// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 57463 0 9
// PrepareAmerican ;
  46: CALL 4072 0 0
// PrepareAlliance ;
  50: CALL 226 0 0
// Action ;
  54: CALL 908 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: EMPTY
 158: LIST
 159: LIST
 160: LIST
 161: PUSH
 162: LD_OWVAR 67
 166: ARRAY
 167: ST_TO_ADDR
// canEnd := false ;
 168: LD_ADDR_EXP 10
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// missionTime := 0 0$00 ;
 176: LD_ADDR_EXP 11
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// killCounter := 0 ;
 184: LD_ADDR_EXP 12
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// bunkerCounter := 0 ;
 192: LD_ADDR_EXP 13
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// end ;
 200: LD_VAR 0 1
 204: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 205: LD_EXP 13
 209: PUSH
 210: LD_INT 3
 212: GREATEREQUAL
 213: IFFALSE 225
 215: GO 217
 217: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 218: LD_STRING ACH_ONEMANARMY
 220: PPUSH
 221: CALL_OW 543
 225: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 226: LD_INT 0
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// uc_side := 7 ;
 235: LD_ADDR_OWVAR 20
 239: PUSH
 240: LD_INT 7
 242: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 243: LD_ADDR_EXP 14
 247: PUSH
 248: LD_STRING JMM
 250: PPUSH
 251: LD_EXP 1
 255: NOT
 256: PPUSH
 257: LD_STRING 14a_
 259: PPUSH
 260: CALL 24515 0 3
 264: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 265: LD_ADDR_EXP 15
 269: PUSH
 270: LD_STRING Burlak
 272: PPUSH
 273: LD_EXP 1
 277: NOT
 278: PPUSH
 279: LD_STRING 14a_
 281: PPUSH
 282: CALL 24515 0 3
 286: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 287: LD_ADDR_EXP 16
 291: PUSH
 292: LD_STRING Joan
 294: PPUSH
 295: LD_EXP 1
 299: NOT
 300: PPUSH
 301: LD_STRING 13a_
 303: PPUSH
 304: CALL 24515 0 3
 308: ST_TO_ADDR
// if not Joan then
 309: LD_EXP 16
 313: NOT
 314: IFFALSE 447
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 316: LD_ADDR_VAR 0 2
 320: PUSH
 321: LD_STRING 13a_others
 323: PPUSH
 324: CALL_OW 31
 328: ST_TO_ADDR
// if tmp then
 329: LD_VAR 0 2
 333: IFFALSE 409
// begin for i in tmp do
 335: LD_ADDR_VAR 0 3
 339: PUSH
 340: LD_VAR 0 2
 344: PUSH
 345: FOR_IN
 346: IFFALSE 407
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 348: LD_VAR 0 3
 352: PPUSH
 353: CALL_OW 257
 357: PUSH
 358: LD_INT 4
 360: EQUAL
 361: PUSH
 362: LD_VAR 0 3
 366: PPUSH
 367: CALL_OW 258
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: PUSH
 377: LD_VAR 0 3
 381: PPUSH
 382: CALL_OW 248
 386: PUSH
 387: LD_INT 3
 389: EQUAL
 390: AND
 391: IFFALSE 405
// begin RuSci := i ;
 393: LD_ADDR_EXP 17
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// break ;
 403: GO 407
// end ;
 405: GO 345
 407: POP
 408: POP
// end ; if not RuSci then
 409: LD_EXP 17
 413: NOT
 414: IFFALSE 447
// begin uc_nation := 3 ;
 416: LD_ADDR_OWVAR 21
 420: PUSH
 421: LD_INT 3
 423: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 424: LD_INT 1
 426: PPUSH
 427: LD_INT 4
 429: PPUSH
 430: LD_INT 10
 432: PPUSH
 433: CALL_OW 380
// RuSci := CreateHuman ;
 437: LD_ADDR_EXP 17
 441: PUSH
 442: CALL_OW 44
 446: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 447: LD_ADDR_VAR 0 6
 451: PUSH
 452: LD_STRING 14a_JMMVeh
 454: PPUSH
 455: LD_INT 5
 457: PUSH
 458: LD_INT 3
 460: PUSH
 461: LD_INT 1
 463: PUSH
 464: LD_INT 7
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: LIST
 478: LIST
 479: LIST
 480: PPUSH
 481: CALL_OW 30
 485: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 486: LD_ADDR_VAR 0 7
 490: PUSH
 491: LD_STRING 14a_BurlakVeh
 493: PPUSH
 494: LD_INT 22
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: LD_INT 1
 502: PUSH
 503: LD_INT 51
 505: PUSH
 506: LD_INT 0
 508: PUSH
 509: LD_INT 3
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: PPUSH
 520: CALL_OW 30
 524: ST_TO_ADDR
// uc_direction := 4 ;
 525: LD_ADDR_OWVAR 24
 529: PUSH
 530: LD_INT 4
 532: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 6
 542: PUSH
 543: LD_INT 6
 545: ARRAY
 546: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 547: LD_VAR 0 6
 551: PUSH
 552: LD_INT 1
 554: ARRAY
 555: PPUSH
 556: LD_VAR 0 6
 560: PUSH
 561: LD_INT 2
 563: ARRAY
 564: PPUSH
 565: LD_VAR 0 6
 569: PUSH
 570: LD_INT 3
 572: ARRAY
 573: PPUSH
 574: LD_VAR 0 6
 578: PUSH
 579: LD_INT 4
 581: ARRAY
 582: PPUSH
 583: LD_INT 60
 585: PPUSH
 586: LD_INT 80
 588: PPUSH
 589: CALL_OW 12
 593: PPUSH
 594: CALL 29339 0 5
// JMMVeh := CreateVehicle ;
 598: LD_ADDR_VAR 0 4
 602: PUSH
 603: CALL_OW 45
 607: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 608: LD_VAR 0 4
 612: PPUSH
 613: LD_INT 1
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL 59751 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 623: LD_VAR 0 6
 627: PUSH
 628: LD_INT 5
 630: ARRAY
 631: PUSH
 632: LD_INT 0
 634: NONEQUAL
 635: IFFALSE 655
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 637: LD_VAR 0 4
 641: PPUSH
 642: LD_VAR 0 6
 646: PUSH
 647: LD_INT 5
 649: ARRAY
 650: PPUSH
 651: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 655: LD_EXP 14
 659: PPUSH
 660: LD_VAR 0 4
 664: PPUSH
 665: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 669: LD_ADDR_OWVAR 21
 673: PUSH
 674: LD_VAR 0 7
 678: PUSH
 679: LD_INT 6
 681: ARRAY
 682: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 683: LD_VAR 0 7
 687: PUSH
 688: LD_INT 1
 690: ARRAY
 691: PPUSH
 692: LD_VAR 0 7
 696: PUSH
 697: LD_INT 2
 699: ARRAY
 700: PPUSH
 701: LD_VAR 0 7
 705: PUSH
 706: LD_INT 3
 708: ARRAY
 709: PPUSH
 710: LD_VAR 0 7
 714: PUSH
 715: LD_INT 4
 717: ARRAY
 718: PPUSH
 719: LD_INT 60
 721: PPUSH
 722: LD_INT 80
 724: PPUSH
 725: CALL_OW 12
 729: PPUSH
 730: CALL 29339 0 5
// BurlakVeh := CreateVehicle ;
 734: LD_ADDR_VAR 0 5
 738: PUSH
 739: CALL_OW 45
 743: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 744: LD_VAR 0 5
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL 59751 0 3
 759: NOT
 760: IFFALSE 780
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 762: LD_VAR 0 5
 766: PPUSH
 767: LD_INT 233
 769: PPUSH
 770: LD_INT 85
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 780: LD_VAR 0 7
 784: PUSH
 785: LD_INT 5
 787: ARRAY
 788: PUSH
 789: LD_INT 0
 791: NONEQUAL
 792: IFFALSE 812
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 794: LD_VAR 0 5
 798: PPUSH
 799: LD_VAR 0 7
 803: PUSH
 804: LD_INT 5
 806: ARRAY
 807: PPUSH
 808: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 812: LD_EXP 15
 816: PPUSH
 817: LD_VAR 0 5
 821: PPUSH
 822: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] ] [ Difficulty ] ;
 826: LD_ADDR_VAR 0 2
 830: PUSH
 831: LD_INT 178
 833: PUSH
 834: LD_INT 91
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 137
 843: PUSH
 844: LD_INT 83
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 157
 853: PUSH
 854: LD_INT 75
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 872: LD_INT 4
 874: PPUSH
 875: LD_INT 4
 877: PPUSH
 878: LD_VAR 0 2
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: PPUSH
 887: LD_VAR 0 2
 891: PUSH
 892: LD_INT 2
 894: ARRAY
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 58
// end ; end_of_file
 903: LD_VAR 0 1
 907: RET
// export function Action ; begin
 908: LD_INT 0
 910: PPUSH
// InGameOn ;
 911: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 915: LD_INT 221
 917: PPUSH
 918: LD_INT 80
 920: PPUSH
 921: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 925: LD_EXP 14
 929: PUSH
 930: LD_EXP 15
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PPUSH
 939: LD_INT 217
 941: PPUSH
 942: LD_INT 79
 944: PPUSH
 945: CALL_OW 111
// wait ( 0 0$7 ) ;
 949: LD_INT 245
 951: PPUSH
 952: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 956: LD_EXP 14
 960: PUSH
 961: LD_EXP 15
 965: PUSH
 966: EMPTY
 967: LIST
 968: LIST
 969: PPUSH
 970: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 974: LD_EXP 15
 978: PPUSH
 979: LD_STRING D2-Bur-1
 981: PPUSH
 982: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
 986: LD_EXP 14
 990: PPUSH
 991: LD_STRING D2-JMM-1
 993: PPUSH
 994: CALL_OW 88
// wait ( 0 0$0.5 ) ;
 998: LD_INT 18
1000: PPUSH
1001: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1005: LD_EXP 15
1009: PPUSH
1010: LD_EXP 14
1014: PPUSH
1015: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1019: LD_EXP 15
1023: PPUSH
1024: LD_STRING D2-Bur-2
1026: PPUSH
1027: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1031: LD_EXP 15
1035: PPUSH
1036: LD_INT 21
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: PPUSH
1051: LD_EXP 15
1055: PPUSH
1056: CALL_OW 74
1060: PPUSH
1061: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1065: LD_EXP 14
1069: PPUSH
1070: LD_INT 21
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PPUSH
1080: CALL_OW 69
1084: PPUSH
1085: LD_EXP 14
1089: PPUSH
1090: CALL_OW 74
1094: PPUSH
1095: CALL_OW 120
// wait ( 0 0$1 ) ;
1099: LD_INT 35
1101: PPUSH
1102: CALL_OW 67
// InGameOff ;
1106: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1110: LD_STRING MArtPickup
1112: PPUSH
1113: CALL_OW 337
// end ;
1117: LD_VAR 0 1
1121: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1122: LD_EXP 22
1126: PPUSH
1127: LD_INT 101
1129: PUSH
1130: LD_INT 7
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 72
1141: PUSH
1142: LD_EXP 8
1146: NOT
1147: AND
1148: IFFALSE 1177
1150: GO 1152
1152: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1153: LD_EXP 15
1157: PPUSH
1158: LD_STRING D3-Bur-1
1160: PPUSH
1161: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1165: LD_EXP 14
1169: PPUSH
1170: LD_STRING D3-JMM-1
1172: PPUSH
1173: CALL_OW 88
// end ;
1177: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1178: LD_INT 5
1180: PPUSH
1181: LD_INT 22
1183: PUSH
1184: LD_INT 7
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PPUSH
1191: CALL_OW 70
1195: IFFALSE 1526
1197: GO 1199
1199: DISABLE
// begin wait ( 0 0$3 ) ;
1200: LD_INT 105
1202: PPUSH
1203: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1207: LD_INT 139
1209: PPUSH
1210: LD_INT 43
1212: PPUSH
1213: LD_INT 7
1215: PPUSH
1216: LD_INT 20
1218: NEG
1219: PPUSH
1220: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1224: LD_INT 139
1226: PPUSH
1227: LD_INT 43
1229: PPUSH
1230: LD_INT 7
1232: PPUSH
1233: CALL_OW 331
// DialogueOn ;
1237: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1241: LD_EXP 14
1245: PPUSH
1246: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1250: LD_EXP 14
1254: PPUSH
1255: LD_STRING D3a-JMM-1
1257: PPUSH
1258: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1262: LD_EXP 15
1266: PPUSH
1267: LD_STRING D3a-Bur-1
1269: PPUSH
1270: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1274: LD_EXP 14
1278: PPUSH
1279: LD_STRING D3a-JMM-2
1281: PPUSH
1282: CALL_OW 88
// if Joan then
1286: LD_EXP 16
1290: IFFALSE 1306
// SayRadio ( Joan , D3a-Joan-2 ) else
1292: LD_EXP 16
1296: PPUSH
1297: LD_STRING D3a-Joan-2
1299: PPUSH
1300: CALL_OW 94
1304: GO 1318
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1306: LD_EXP 17
1310: PPUSH
1311: LD_STRING D3a-RSci1-2
1313: PPUSH
1314: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1318: LD_EXP 18
1322: PPUSH
1323: LD_STRING D3a-Huck-2
1325: PPUSH
1326: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1330: LD_EXP 19
1334: PPUSH
1335: LD_STRING D3a-Pow-2
1337: PPUSH
1338: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1342: LD_EXP 18
1346: PPUSH
1347: LD_STRING D3a-Huck-3
1349: PPUSH
1350: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1354: LD_EXP 19
1358: PPUSH
1359: LD_STRING D3a-Pow-3
1361: PPUSH
1362: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1366: LD_EXP 18
1370: PPUSH
1371: LD_STRING D3a-Huck-4
1373: PPUSH
1374: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1378: LD_EXP 14
1382: PPUSH
1383: LD_STRING D3a-JMM-4
1385: PPUSH
1386: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1390: LD_EXP 15
1394: PPUSH
1395: LD_STRING D3a-Bur-4
1397: PPUSH
1398: CALL_OW 88
// if Joan then
1402: LD_EXP 16
1406: IFFALSE 1422
// SayRadio ( Joan , D3a-Joan-4 ) else
1408: LD_EXP 16
1412: PPUSH
1413: LD_STRING D3a-Joan-4
1415: PPUSH
1416: CALL_OW 94
1420: GO 1434
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1422: LD_EXP 17
1426: PPUSH
1427: LD_STRING D3a-RSci1-4
1429: PPUSH
1430: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1434: LD_INT 133
1436: PPUSH
1437: LD_INT 43
1439: PPUSH
1440: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1444: LD_INT 10
1446: PPUSH
1447: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1451: LD_EXP 14
1455: PPUSH
1456: LD_STRING D3a-JMM-5
1458: PPUSH
1459: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1463: LD_EXP 15
1467: PPUSH
1468: LD_STRING D3a-Bur-5
1470: PPUSH
1471: CALL_OW 88
// DialogueOff ;
1475: CALL_OW 7
// seenBase := true ;
1479: LD_ADDR_EXP 8
1483: PUSH
1484: LD_INT 1
1486: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
1487: LD_INT 525
1489: PUSH
1490: LD_INT 420
1492: PUSH
1493: LD_INT 315
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: LIST
1500: PUSH
1501: LD_OWVAR 67
1505: ARRAY
1506: PPUSH
1507: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1511: LD_EXP 21
1515: PPUSH
1516: LD_INT 142
1518: PPUSH
1519: LD_INT 52
1521: PPUSH
1522: CALL_OW 116
// end ;
1526: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1527: LD_EXP 8
1531: NOT
1532: PUSH
1533: LD_EXP 4
1537: NOT
1538: AND
1539: IFFALSE 1559
1541: GO 1543
1543: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1544: LD_EXP 21
1548: PPUSH
1549: LD_INT 142
1551: PPUSH
1552: LD_INT 52
1554: PPUSH
1555: CALL_OW 116
1559: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1560: LD_INT 0
1562: PPUSH
1563: PPUSH
// contaminateTime := tick ;
1564: LD_ADDR_EXP 3
1568: PUSH
1569: LD_OWVAR 1
1573: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1574: LD_INT 175
1576: PPUSH
1577: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1581: LD_ADDR_VAR 0 5
1585: PUSH
1586: LD_INT 4
1588: PPUSH
1589: CALL_OW 469
1593: ST_TO_ADDR
// if art then
1594: LD_VAR 0 5
1598: IFFALSE 1637
// if art [ 1 ] = 157 and art [ 2 ] = 75 then
1600: LD_VAR 0 5
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PUSH
1609: LD_INT 157
1611: EQUAL
1612: PUSH
1613: LD_VAR 0 5
1617: PUSH
1618: LD_INT 2
1620: ARRAY
1621: PUSH
1622: LD_INT 75
1624: EQUAL
1625: AND
1626: IFFALSE 1637
// begin YouLost ( Artefact ) ;
1628: LD_STRING Artefact
1630: PPUSH
1631: CALL_OW 104
// exit ;
1635: GO 1789
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1637: LD_EXP 14
1641: PPUSH
1642: CALL_OW 302
1646: PUSH
1647: LD_EXP 15
1651: PPUSH
1652: CALL_OW 302
1656: AND
1657: IFFALSE 1734
// begin DialogueOn ;
1659: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1663: LD_EXP 14
1667: PPUSH
1668: LD_STRING D6a-JMM-1
1670: PPUSH
1671: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1675: LD_EXP 15
1679: PPUSH
1680: LD_STRING D6a-Bur-1
1682: PPUSH
1683: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1687: LD_EXP 14
1691: PPUSH
1692: LD_STRING D6c-JMM-1
1694: PPUSH
1695: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1699: LD_EXP 15
1703: PPUSH
1704: LD_STRING D6c-Bur-1
1706: PPUSH
1707: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1711: LD_EXP 14
1715: PPUSH
1716: LD_STRING D6c-JMM-2
1718: PPUSH
1719: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1723: LD_STRING MBase
1725: PPUSH
1726: CALL_OW 337
// DialogueOff ;
1730: CALL_OW 7
// end ; bombExploded := true ;
1734: LD_ADDR_EXP 4
1738: PUSH
1739: LD_INT 1
1741: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ) ;
1742: LD_INT 6300
1744: PUSH
1745: LD_INT 5250
1747: PUSH
1748: LD_INT 4200
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: PUSH
1756: LD_OWVAR 67
1760: ARRAY
1761: PPUSH
1762: CALL_OW 67
// if IsOk ( JMM ) then
1766: LD_EXP 14
1770: PPUSH
1771: CALL_OW 302
1775: IFFALSE 1789
// Say ( JMM , D8-JMM-1 ) ;
1777: LD_EXP 14
1781: PPUSH
1782: LD_STRING D8-JMM-1
1784: PPUSH
1785: CALL_OW 88
// end ;
1789: LD_VAR 0 4
1793: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1794: LD_EXP 9
1798: PUSH
1799: LD_EXP 7
1803: NOT
1804: AND
1805: PUSH
1806: LD_EXP 4
1810: AND
1811: IFFALSE 1866
1813: GO 1815
1815: DISABLE
// begin enable ;
1816: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1817: LD_INT 9
1819: PPUSH
1820: LD_INT 22
1822: PUSH
1823: LD_INT 7
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PPUSH
1830: CALL_OW 70
1834: IFFALSE 1852
// stevensTimer := stevensTimer - 0 0$30 else
1836: LD_ADDR_EXP 9
1840: PUSH
1841: LD_EXP 9
1845: PUSH
1846: LD_INT 1050
1848: MINUS
1849: ST_TO_ADDR
1850: GO 1866
// stevensTimer := stevensTimer - 0 0$1 ;
1852: LD_ADDR_EXP 9
1856: PUSH
1857: LD_EXP 9
1861: PUSH
1862: LD_INT 35
1864: MINUS
1865: ST_TO_ADDR
// end ;
1866: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1867: LD_EXP 9
1871: PUSH
1872: LD_INT 0
1874: LESSEQUAL
1875: PUSH
1876: LD_EXP 7
1880: NOT
1881: AND
1882: IFFALSE 2046
1884: GO 1886
1886: DISABLE
1887: LD_INT 0
1889: PPUSH
1890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1891: LD_ADDR_VAR 0 2
1895: PUSH
1896: LD_INT 22
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 25
1908: PUSH
1909: LD_INT 4
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PPUSH
1920: CALL_OW 69
1924: ST_TO_ADDR
// for i in tmp do
1925: LD_ADDR_VAR 0 1
1929: PUSH
1930: LD_VAR 0 2
1934: PUSH
1935: FOR_IN
1936: IFFALSE 1989
// begin if IsInUnit ( i ) then
1938: LD_VAR 0 1
1942: PPUSH
1943: CALL_OW 310
1947: IFFALSE 1960
// ComExitBuilding ( i ) else
1949: LD_VAR 0 1
1953: PPUSH
1954: CALL_OW 122
1958: GO 1987
// if not HasTask ( i ) then
1960: LD_VAR 0 1
1964: PPUSH
1965: CALL_OW 314
1969: NOT
1970: IFFALSE 1987
// ComMoveXY ( i , 29 , 56 ) ;
1972: LD_VAR 0 1
1976: PPUSH
1977: LD_INT 29
1979: PPUSH
1980: LD_INT 56
1982: PPUSH
1983: CALL_OW 111
// end ;
1987: GO 1935
1989: POP
1990: POP
// repeat wait ( 0 0$1 ) ;
1991: LD_INT 35
1993: PPUSH
1994: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1998: LD_INT 8
2000: PPUSH
2001: LD_INT 22
2003: PUSH
2004: LD_INT 1
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 25
2013: PUSH
2014: LD_INT 4
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PPUSH
2025: CALL_OW 70
2029: IFFALSE 1991
// if planCaptured then
2031: LD_EXP 7
2035: IFFALSE 2039
// exit ;
2037: GO 2046
// YouLost ( Time ) ;
2039: LD_STRING Time
2041: PPUSH
2042: CALL_OW 104
// end ;
2046: PPOPN 2
2048: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2049: LD_INT 22
2051: PUSH
2052: LD_INT 7
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: LD_INT 92
2061: PUSH
2062: LD_INT 142
2064: PUSH
2065: LD_INT 52
2067: PUSH
2068: LD_INT 27
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PPUSH
2081: CALL_OW 69
2085: PUSH
2086: LD_EXP 3
2090: PUSH
2091: LD_INT 6000
2093: PLUS
2094: PUSH
2095: LD_OWVAR 1
2099: GREATER
2100: AND
2101: PUSH
2102: LD_EXP 4
2106: AND
2107: IFFALSE 2162
2109: GO 2111
2111: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2112: LD_EXP 14
2116: PUSH
2117: LD_EXP 15
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PPUSH
2126: CALL_OW 85
// DialogueOn ;
2130: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2134: LD_EXP 14
2138: PPUSH
2139: LD_STRING D6b-JMM-1
2141: PPUSH
2142: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2146: LD_EXP 15
2150: PPUSH
2151: LD_STRING D6b-Bur-1
2153: PPUSH
2154: CALL_OW 88
// DialogueOff ;
2158: CALL_OW 7
// end ;
2162: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2163: LD_EXP 15
2167: PPUSH
2168: LD_INT 142
2170: PPUSH
2171: LD_INT 52
2173: PPUSH
2174: CALL_OW 297
2178: PUSH
2179: LD_INT 25
2181: LESS
2182: PUSH
2183: LD_EXP 15
2187: PPUSH
2188: CALL_OW 310
2192: PPUSH
2193: LD_INT 142
2195: PPUSH
2196: LD_INT 52
2198: PPUSH
2199: CALL_OW 297
2203: PUSH
2204: LD_INT 25
2206: LESS
2207: OR
2208: PUSH
2209: LD_EXP 15
2213: PPUSH
2214: CALL_OW 256
2218: PUSH
2219: LD_INT 1000
2221: LESS
2222: AND
2223: PUSH
2224: LD_EXP 3
2228: PUSH
2229: LD_INT 6000
2231: PLUS
2232: PUSH
2233: LD_OWVAR 1
2237: GREATER
2238: AND
2239: PUSH
2240: LD_EXP 4
2244: AND
2245: IFFALSE 2278
2247: GO 2249
2249: DISABLE
// begin DialogueOn ;
2250: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2254: LD_EXP 15
2258: PPUSH
2259: LD_STRING D7-Bur-1
2261: PPUSH
2262: CALL_OW 88
// enteredContaminatedArea := true ;
2266: LD_ADDR_EXP 5
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// DialogueOff ;
2274: CALL_OW 7
// end ;
2278: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2279: LD_EXP 14
2283: PPUSH
2284: LD_INT 142
2286: PPUSH
2287: LD_INT 52
2289: PPUSH
2290: CALL_OW 297
2294: PUSH
2295: LD_INT 25
2297: LESS
2298: PUSH
2299: LD_EXP 14
2303: PPUSH
2304: CALL_OW 310
2308: PPUSH
2309: LD_INT 142
2311: PPUSH
2312: LD_INT 52
2314: PPUSH
2315: CALL_OW 297
2319: PUSH
2320: LD_INT 25
2322: LESS
2323: OR
2324: PUSH
2325: LD_EXP 14
2329: PPUSH
2330: CALL_OW 256
2334: PUSH
2335: LD_INT 1000
2337: LESS
2338: AND
2339: PUSH
2340: LD_EXP 3
2344: PUSH
2345: LD_INT 6000
2347: PLUS
2348: PUSH
2349: LD_OWVAR 1
2353: GREATER
2354: AND
2355: PUSH
2356: LD_EXP 4
2360: AND
2361: IFFALSE 2394
2363: GO 2365
2365: DISABLE
// begin DialogueOn ;
2366: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2370: LD_EXP 14
2374: PPUSH
2375: LD_STRING D7-JMM-1
2377: PPUSH
2378: CALL_OW 88
// enteredContaminatedArea := true ;
2382: LD_ADDR_EXP 5
2386: PUSH
2387: LD_INT 1
2389: ST_TO_ADDR
// DialogueOff ;
2390: CALL_OW 7
// end ;
2394: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2395: LD_EXP 6
2399: PUSH
2400: LD_EXP 14
2404: PPUSH
2405: CALL_OW 302
2409: AND
2410: PUSH
2411: LD_EXP 15
2415: PPUSH
2416: CALL_OW 302
2420: AND
2421: IFFALSE 2490
2423: GO 2425
2425: DISABLE
// begin DialogueOn ;
2426: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2430: LD_EXP 14
2434: PUSH
2435: LD_EXP 15
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PPUSH
2444: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2448: LD_EXP 14
2452: PPUSH
2453: LD_STRING D4-JMM-1
2455: PPUSH
2456: CALL_OW 88
// if not bombExploded then
2460: LD_EXP 4
2464: NOT
2465: IFFALSE 2479
// Say ( Burlak , D4-Bur-1 ) ;
2467: LD_EXP 15
2471: PPUSH
2472: LD_STRING D4-Bur-1
2474: PPUSH
2475: CALL_OW 88
// DialogueOff ;
2479: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2483: LD_STRING MReturn
2485: PPUSH
2486: CALL_OW 337
// end ;
2490: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2491: LD_EXP 7
2495: NOT
2496: PUSH
2497: LD_INT 22
2499: PUSH
2500: LD_INT 7
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: LD_INT 91
2509: PUSH
2510: LD_INT 9
2512: PUSH
2513: LD_INT 6
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: LIST
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PPUSH
2525: CALL_OW 69
2529: AND
2530: IFFALSE 2607
2532: GO 2534
2534: DISABLE
// begin DialogueOn ;
2535: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2539: LD_INT 55
2541: PPUSH
2542: LD_INT 11
2544: PPUSH
2545: LD_INT 7
2547: PPUSH
2548: LD_INT 6
2550: NEG
2551: PPUSH
2552: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2556: LD_INT 55
2558: PPUSH
2559: LD_INT 11
2561: PPUSH
2562: LD_INT 7
2564: PPUSH
2565: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2569: LD_EXP 15
2573: PPUSH
2574: LD_STRING D9-Bur-1
2576: PPUSH
2577: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2581: LD_EXP 14
2585: PPUSH
2586: LD_STRING D9-JMM-1
2588: PPUSH
2589: CALL_OW 88
// DialogueOff ;
2593: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2597: LD_INT 9
2599: PPUSH
2600: LD_INT 7
2602: PPUSH
2603: CALL_OW 235
// end ;
2607: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2608: LD_INT 9
2610: PPUSH
2611: LD_INT 22
2613: PUSH
2614: LD_INT 7
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PPUSH
2621: CALL_OW 70
2625: IFFALSE 2661
2627: GO 2629
2629: DISABLE
// begin wait ( 0 0$07 ) ;
2630: LD_INT 245
2632: PPUSH
2633: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2637: LD_EXP 14
2641: PPUSH
2642: LD_STRING D10b-JMM-1
2644: PPUSH
2645: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2649: LD_EXP 15
2653: PPUSH
2654: LD_STRING D10b-Bur-1
2656: PPUSH
2657: CALL_OW 88
// end ;
2661: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2662: LD_EXP 9
2666: PUSH
2667: LD_INT 22
2669: PUSH
2670: LD_INT 1
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: LD_INT 25
2679: PUSH
2680: LD_INT 4
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_INT 26
2689: PUSH
2690: LD_INT 1
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: PPUSH
2702: CALL_OW 69
2706: AND
2707: PUSH
2708: LD_INT 5
2710: PPUSH
2711: CALL_OW 255
2715: PUSH
2716: LD_INT 7
2718: EQUAL
2719: PUSH
2720: LD_INT 22
2722: PUSH
2723: LD_INT 1
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 25
2732: PUSH
2733: LD_INT 1
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PPUSH
2744: CALL_OW 69
2748: PUSH
2749: LD_INT 0
2751: EQUAL
2752: OR
2753: AND
2754: IFFALSE 3343
2756: GO 2758
2758: DISABLE
2759: LD_INT 0
2761: PPUSH
// begin case Query ( QKill ) of 1 :
2762: LD_STRING QKill
2764: PPUSH
2765: CALL_OW 97
2769: PUSH
2770: LD_INT 1
2772: DOUBLE
2773: EQUAL
2774: IFTRUE 2778
2776: GO 3331
2778: POP
// begin DialogueOn ;
2779: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2783: LD_EXP 14
2787: PPUSH
2788: LD_STRING D10a-JMM-1
2790: PPUSH
2791: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2795: LD_EXP 15
2799: PPUSH
2800: LD_STRING D10a-Bur-1
2802: PPUSH
2803: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2807: LD_EXP 14
2811: PPUSH
2812: LD_STRING D10a-JMM-2
2814: PPUSH
2815: CALL_OW 88
// if IsOk ( Stevens ) then
2819: LD_EXP 18
2823: PPUSH
2824: CALL_OW 302
2828: IFFALSE 2844
// Say ( Stevens , D10a-Huck-2 ) else
2830: LD_EXP 18
2834: PPUSH
2835: LD_STRING D10a-Huck-2
2837: PPUSH
2838: CALL_OW 88
2842: GO 2895
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2844: LD_INT 22
2846: PUSH
2847: LD_INT 1
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 25
2856: PUSH
2857: LD_INT 4
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: LD_INT 26
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: LIST
2878: PPUSH
2879: CALL_OW 69
2883: PUSH
2884: LD_INT 1
2886: ARRAY
2887: PPUSH
2888: LD_STRING D10a-ASci1-3
2890: PPUSH
2891: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2895: LD_EXP 14
2899: PPUSH
2900: LD_STRING D10a-JMM-4
2902: PPUSH
2903: CALL_OW 88
// if IsOk ( Stevens ) then
2907: LD_EXP 18
2911: PPUSH
2912: CALL_OW 302
2916: IFFALSE 2930
// Say ( Stevens , D10a-Huck-3 ) ;
2918: LD_EXP 18
2922: PPUSH
2923: LD_STRING D10a-Huck-3
2925: PPUSH
2926: CALL_OW 88
// DialogueOff ;
2930: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2934: LD_INT 1
2936: PPUSH
2937: LD_INT 7
2939: PPUSH
2940: LD_INT 1
2942: PPUSH
2943: LD_INT 1
2945: PPUSH
2946: CALL_OW 80
// planCaptured := true ;
2950: LD_ADDR_EXP 7
2954: PUSH
2955: LD_INT 1
2957: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2958: LD_STRING MEnd
2960: PPUSH
2961: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
2965: LD_STRING ACH_DIPLOMACY
2967: PPUSH
2968: CALL_OW 543
// canEnd := true ;
2972: LD_ADDR_EXP 10
2976: PUSH
2977: LD_INT 1
2979: ST_TO_ADDR
// missionTime := tick ;
2980: LD_ADDR_EXP 11
2984: PUSH
2985: LD_OWVAR 1
2989: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2990: LD_INT 35
2992: PPUSH
2993: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
2997: LD_INT 22
2999: PUSH
3000: LD_INT 1
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: LD_INT 3
3009: PUSH
3010: LD_INT 50
3012: PUSH
3013: EMPTY
3014: LIST
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 69
3028: IFFALSE 3144
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3030: LD_ADDR_VAR 0 1
3034: PUSH
3035: LD_INT 22
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: LD_INT 25
3047: PUSH
3048: LD_INT 4
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: PPUSH
3059: CALL_OW 69
3063: PUSH
3064: FOR_IN
3065: IFFALSE 3142
// begin if IsInUnit ( i ) then
3067: LD_VAR 0 1
3071: PPUSH
3072: CALL_OW 310
3076: IFFALSE 3089
// ComExitBuilding ( i ) else
3078: LD_VAR 0 1
3082: PPUSH
3083: CALL_OW 122
3087: GO 3140
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3089: LD_VAR 0 1
3093: PPUSH
3094: LD_INT 22
3096: PUSH
3097: LD_INT 1
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: LD_INT 3
3106: PUSH
3107: LD_INT 50
3109: PUSH
3110: EMPTY
3111: LIST
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PPUSH
3121: CALL_OW 69
3125: PPUSH
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 74
3135: PPUSH
3136: CALL_OW 128
// end ;
3140: GO 3064
3142: POP
3143: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3144: LD_INT 22
3146: PUSH
3147: LD_INT 1
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 3
3156: PUSH
3157: LD_INT 50
3159: PUSH
3160: EMPTY
3161: LIST
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PPUSH
3171: CALL_OW 69
3175: NOT
3176: IFFALSE 2990
// repeat wait ( 3 ) ;
3178: LD_INT 3
3180: PPUSH
3181: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3185: LD_ADDR_VAR 0 1
3189: PUSH
3190: LD_INT 22
3192: PUSH
3193: LD_INT 1
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: PUSH
3200: LD_INT 21
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: PUSH
3219: FOR_IN
3220: IFFALSE 3296
// begin if IsInArea ( i , stevensEscapeArea ) then
3222: LD_VAR 0 1
3226: PPUSH
3227: LD_INT 8
3229: PPUSH
3230: CALL_OW 308
3234: IFFALSE 3247
// begin RemoveUnit ( i ) ;
3236: LD_VAR 0 1
3240: PPUSH
3241: CALL_OW 64
// continue ;
3245: GO 3219
// end ; if IsInUnit ( i ) then
3247: LD_VAR 0 1
3251: PPUSH
3252: CALL_OW 310
3256: IFFALSE 3267
// ComExitBuilding ( i ) ;
3258: LD_VAR 0 1
3262: PPUSH
3263: CALL_OW 122
// if not HasTask ( i ) then
3267: LD_VAR 0 1
3271: PPUSH
3272: CALL_OW 314
3276: NOT
3277: IFFALSE 3294
// ComMoveXY ( i , 28 , 55 ) ;
3279: LD_VAR 0 1
3283: PPUSH
3284: LD_INT 28
3286: PPUSH
3287: LD_INT 55
3289: PPUSH
3290: CALL_OW 111
// end ;
3294: GO 3219
3296: POP
3297: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3298: LD_INT 22
3300: PUSH
3301: LD_INT 1
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 21
3310: PUSH
3311: LD_INT 1
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PPUSH
3322: CALL_OW 69
3326: NOT
3327: IFFALSE 3178
// end ; 2 :
3329: GO 3343
3331: LD_INT 2
3333: DOUBLE
3334: EQUAL
3335: IFTRUE 3339
3337: GO 3342
3339: POP
// ; end ;
3340: GO 3343
3342: POP
// end ;
3343: PPOPN 1
3345: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3346: LD_EXP 10
3350: IFFALSE 3707
3352: GO 3354
3354: DISABLE
3355: LD_INT 0
3357: PPUSH
3358: PPUSH
3359: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3360: LD_INT 10
3362: PPUSH
3363: LD_INT 1
3365: PPUSH
3366: CALL_OW 424
// if Difficulty < 2 then
3370: LD_OWVAR 67
3374: PUSH
3375: LD_INT 2
3377: LESS
3378: IFFALSE 3382
// exit ;
3380: GO 3707
// uc_side := 4 ;
3382: LD_ADDR_OWVAR 20
3386: PUSH
3387: LD_INT 4
3389: ST_TO_ADDR
// uc_nation := 1 ;
3390: LD_ADDR_OWVAR 21
3394: PUSH
3395: LD_INT 1
3397: ST_TO_ADDR
// InitHc ;
3398: CALL_OW 19
// tmp := [ ] ;
3402: LD_ADDR_VAR 0 3
3406: PUSH
3407: EMPTY
3408: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3409: LD_INT 0
3411: PPUSH
3412: LD_INT 5
3414: PPUSH
3415: LD_INT 10
3417: PPUSH
3418: CALL_OW 380
// un := CreateHuman ;
3422: LD_ADDR_VAR 0 1
3426: PUSH
3427: CALL_OW 44
3431: ST_TO_ADDR
// tmp := [ un ] ;
3432: LD_ADDR_VAR 0 3
3436: PUSH
3437: LD_VAR 0 1
3441: PUSH
3442: EMPTY
3443: LIST
3444: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3445: LD_VAR 0 1
3449: PPUSH
3450: LD_INT 226
3452: PPUSH
3453: LD_INT 86
3455: PPUSH
3456: LD_INT 0
3458: PPUSH
3459: CALL_OW 48
// ComHold ( un ) ;
3463: LD_VAR 0 1
3467: PPUSH
3468: CALL_OW 140
// for i = 1 to 3 do
3472: LD_ADDR_VAR 0 2
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_INT 3
3484: PUSH
3485: FOR_TO
3486: IFFALSE 3585
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3488: LD_INT 0
3490: PPUSH
3491: LD_INT 1
3493: PPUSH
3494: LD_INT 8
3496: PPUSH
3497: CALL_OW 380
// un := CreateHuman ;
3501: LD_ADDR_VAR 0 1
3505: PUSH
3506: CALL_OW 44
3510: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3511: LD_VAR 0 1
3515: PPUSH
3516: LD_INT 5
3518: PPUSH
3519: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3523: LD_VAR 0 1
3527: PPUSH
3528: LD_INT 215
3530: PUSH
3531: LD_INT 217
3533: PUSH
3534: LD_INT 219
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_VAR 0 2
3546: ARRAY
3547: PPUSH
3548: LD_INT 76
3550: PPUSH
3551: LD_INT 0
3553: PPUSH
3554: CALL_OW 48
// ComCrawl ( un ) ;
3558: LD_VAR 0 1
3562: PPUSH
3563: CALL_OW 137
// tmp := tmp ^ un ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: LD_VAR 0 3
3576: PUSH
3577: LD_VAR 0 1
3581: ADD
3582: ST_TO_ADDR
// end ;
3583: GO 3485
3585: POP
3586: POP
// repeat wait ( 0 0$1 ) ;
3587: LD_INT 35
3589: PPUSH
3590: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3594: LD_VAR 0 3
3598: PPUSH
3599: LD_INT 24
3601: PUSH
3602: LD_INT 1000
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PPUSH
3609: CALL_OW 72
3613: NOT
3614: IFFALSE 3587
// for i in tmp do
3616: LD_ADDR_VAR 0 2
3620: PUSH
3621: LD_VAR 0 3
3625: PUSH
3626: FOR_IN
3627: IFFALSE 3705
// begin wait ( 0 0$1 ) ;
3629: LD_INT 35
3631: PPUSH
3632: CALL_OW 67
// if Crawls ( i ) then
3636: LD_VAR 0 2
3640: PPUSH
3641: CALL_OW 318
3645: IFFALSE 3658
// ComWalk ( i ) else
3647: LD_VAR 0 2
3651: PPUSH
3652: CALL_OW 138
3656: GO 3703
// if GetClass ( i ) = class_sniper then
3658: LD_VAR 0 2
3662: PPUSH
3663: CALL_OW 257
3667: PUSH
3668: LD_INT 5
3670: EQUAL
3671: IFFALSE 3689
// ComAttackSoporific ( i , JMM ) else
3673: LD_VAR 0 2
3677: PPUSH
3678: LD_EXP 14
3682: PPUSH
3683: CALL_OW 166
3687: GO 3703
// ComAttackUnit ( i , JMM ) ;
3689: LD_VAR 0 2
3693: PPUSH
3694: LD_EXP 14
3698: PPUSH
3699: CALL_OW 115
// end ;
3703: GO 3626
3705: POP
3706: POP
// end ;
3707: PPOPN 3
3709: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3710: LD_EXP 7
3714: NOT
3715: PUSH
3716: LD_INT 1
3718: PPUSH
3719: CALL_OW 301
3723: AND
3724: IFFALSE 3736
3726: GO 3728
3728: DISABLE
// YouLost ( Lab ) ;
3729: LD_STRING Lab
3731: PPUSH
3732: CALL_OW 104
3736: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3737: LD_INT 10
3739: PPUSH
3740: LD_INT 22
3742: PUSH
3743: LD_INT 7
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PPUSH
3750: CALL_OW 70
3754: PUSH
3755: LD_INT 2
3757: GREATEREQUAL
3758: PUSH
3759: LD_INT 10
3761: PPUSH
3762: LD_INT 2
3764: PUSH
3765: LD_INT 34
3767: PUSH
3768: LD_INT 12
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 34
3777: PUSH
3778: LD_INT 51
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: LIST
3789: PPUSH
3790: CALL_OW 70
3794: AND
3795: PUSH
3796: LD_EXP 10
3800: AND
3801: PUSH
3802: LD_EXP 7
3806: AND
3807: PUSH
3808: LD_EXP 6
3812: AND
3813: IFFALSE 4069
3815: GO 3817
3817: DISABLE
3818: LD_INT 0
3820: PPUSH
3821: PPUSH
// begin m1 := false ;
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: LD_INT 0
3829: ST_TO_ADDR
// m2 := false ;
3830: LD_ADDR_VAR 0 2
3834: PUSH
3835: LD_INT 0
3837: ST_TO_ADDR
// if killCounter = 0 then
3838: LD_EXP 12
3842: PUSH
3843: LD_INT 0
3845: EQUAL
3846: IFFALSE 3855
// SetAchievement ( ACH_PACIFIST ) ;
3848: LD_STRING ACH_PACIFIST
3850: PPUSH
3851: CALL_OW 543
// if tick < 7 7$00 then
3855: LD_OWVAR 1
3859: PUSH
3860: LD_INT 14700
3862: LESS
3863: IFFALSE 3879
// begin wait ( 3 ) ;
3865: LD_INT 3
3867: PPUSH
3868: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3872: LD_STRING ACH_ASPEED_18
3874: PPUSH
3875: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3879: LD_STRING Explosion
3881: PPUSH
3882: LD_INT 1
3884: PPUSH
3885: CALL_OW 101
// if enteredContaminatedArea then
3889: LD_EXP 5
3893: IFFALSE 3915
// begin m1 := true ;
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_INT 1
3902: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3903: LD_STRING BioHazard
3905: PPUSH
3906: LD_INT 1
3908: PPUSH
3909: CALL_OW 101
// end else
3913: GO 3926
// AddMedal ( BioHazard , - 1 ) ;
3915: LD_STRING BioHazard
3917: PPUSH
3918: LD_INT 1
3920: NEG
3921: PPUSH
3922: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
3926: LD_EXP 11
3930: PUSH
3931: LD_INT 42000
3933: PUSH
3934: LD_INT 31500
3936: PUSH
3937: LD_INT 25200
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: LIST
3944: PUSH
3945: LD_OWVAR 67
3949: ARRAY
3950: LESSEQUAL
3951: IFFALSE 3973
// begin m2 := true ;
3953: LD_ADDR_VAR 0 2
3957: PUSH
3958: LD_INT 1
3960: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
3961: LD_STRING Speed
3963: PPUSH
3964: LD_INT 1
3966: PPUSH
3967: CALL_OW 101
// end else
3971: GO 3984
// AddMedal ( Speed , - 1 ) ;
3973: LD_STRING Speed
3975: PPUSH
3976: LD_INT 1
3978: NEG
3979: PPUSH
3980: CALL_OW 101
// if Difficulty = 3 and m1 and m2 then
3984: LD_OWVAR 67
3988: PUSH
3989: LD_INT 3
3991: EQUAL
3992: PUSH
3993: LD_VAR 0 1
3997: AND
3998: PUSH
3999: LD_VAR 0 2
4003: AND
4004: IFFALSE 4016
// SetAchievementEX ( ACH_AMER , 18 ) ;
4006: LD_STRING ACH_AMER
4008: PPUSH
4009: LD_INT 18
4011: PPUSH
4012: CALL_OW 564
// GiveMedals ( Main ) ;
4016: LD_STRING Main
4018: PPUSH
4019: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4023: LD_EXP 14
4027: PUSH
4028: LD_EXP 15
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PPUSH
4037: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4041: LD_EXP 14
4045: PPUSH
4046: LD_STRING 14a_JMM
4048: PPUSH
4049: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4053: LD_EXP 15
4057: PPUSH
4058: LD_STRING 14a_Burlak
4060: PPUSH
4061: CALL_OW 38
// YouWin ;
4065: CALL_OW 103
// end ; end_of_file
4069: PPOPN 2
4071: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4072: LD_INT 0
4074: PPUSH
4075: PPUSH
4076: PPUSH
4077: PPUSH
// uc_side := 1 ;
4078: LD_ADDR_OWVAR 20
4082: PUSH
4083: LD_INT 1
4085: ST_TO_ADDR
// uc_nation := 1 ;
4086: LD_ADDR_OWVAR 21
4090: PUSH
4091: LD_INT 1
4093: ST_TO_ADDR
// InitHc ;
4094: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 500 ) ;
4098: LD_INT 34
4100: PPUSH
4101: CALL_OW 274
4105: PPUSH
4106: LD_INT 1
4108: PPUSH
4109: LD_INT 500
4111: PPUSH
4112: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4116: LD_INT 34
4118: PPUSH
4119: CALL_OW 274
4123: PPUSH
4124: LD_INT 3
4126: PPUSH
4127: LD_INT 20
4129: PPUSH
4130: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4134: LD_ADDR_EXP 18
4138: PUSH
4139: LD_STRING Stevens
4141: PPUSH
4142: CALL_OW 25
4146: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4147: LD_ADDR_EXP 19
4151: PUSH
4152: LD_STRING Powell
4154: PPUSH
4155: CALL_OW 25
4159: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4160: LD_EXP 18
4164: PPUSH
4165: LD_INT 1
4167: PPUSH
4168: CALL_OW 52
// vehGuard := [ ] ;
4172: LD_ADDR_EXP 23
4176: PUSH
4177: EMPTY
4178: ST_TO_ADDR
// hc_importance := 0 ;
4179: LD_ADDR_OWVAR 32
4183: PUSH
4184: LD_INT 0
4186: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4187: LD_INT 4
4189: PPUSH
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 3
4195: PPUSH
4196: LD_INT 8
4198: PPUSH
4199: LD_INT 100
4201: PPUSH
4202: CALL 29339 0 5
// sibBomb := CreateVehicle ;
4206: LD_ADDR_EXP 21
4210: PUSH
4211: CALL_OW 45
4215: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4216: LD_EXP 21
4220: PPUSH
4221: LD_INT 1
4223: PPUSH
4224: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4228: LD_EXP 21
4232: PPUSH
4233: LD_INT 93
4235: PPUSH
4236: LD_INT 74
4238: PPUSH
4239: LD_INT 0
4241: PPUSH
4242: CALL_OW 48
// guards := [ ] ;
4246: LD_ADDR_EXP 22
4250: PUSH
4251: EMPTY
4252: ST_TO_ADDR
// for i = 1 to 3 do
4253: LD_ADDR_VAR 0 2
4257: PUSH
4258: DOUBLE
4259: LD_INT 1
4261: DEC
4262: ST_TO_ADDR
4263: LD_INT 3
4265: PUSH
4266: FOR_TO
4267: IFFALSE 4359
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
4269: LD_INT 0
4271: PPUSH
4272: LD_INT 1
4274: PPUSH
4275: LD_INT 8
4277: PUSH
4278: LD_INT 9
4280: PUSH
4281: LD_INT 10
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: LIST
4288: PUSH
4289: LD_OWVAR 67
4293: ARRAY
4294: PPUSH
4295: CALL_OW 380
// un := CreateHuman ;
4299: LD_ADDR_VAR 0 3
4303: PUSH
4304: CALL_OW 44
4308: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4309: LD_VAR 0 3
4313: PPUSH
4314: LD_INT 2
4316: PUSH
4317: LD_INT 3
4319: PUSH
4320: LD_INT 4
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: LIST
4327: PUSH
4328: LD_VAR 0 2
4332: ARRAY
4333: PPUSH
4334: LD_INT 0
4336: PPUSH
4337: CALL_OW 49
// guards := guards ^ un ;
4341: LD_ADDR_EXP 22
4345: PUSH
4346: LD_EXP 22
4350: PUSH
4351: LD_VAR 0 3
4355: ADD
4356: ST_TO_ADDR
// end ;
4357: GO 4266
4359: POP
4360: POP
// baseGuards := [ ] ;
4361: LD_ADDR_EXP 20
4365: PUSH
4366: EMPTY
4367: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
4368: LD_ADDR_VAR 0 2
4372: PUSH
4373: DOUBLE
4374: LD_INT 1
4376: DEC
4377: ST_TO_ADDR
4378: LD_INT 5
4380: PUSH
4381: LD_INT 6
4383: PUSH
4384: LD_INT 7
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: PUSH
4392: LD_OWVAR 67
4396: ARRAY
4397: PUSH
4398: FOR_TO
4399: IFFALSE 4545
// begin PrepareSoldier ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
4401: LD_INT 0
4403: PPUSH
4404: LD_INT 8
4406: PUSH
4407: LD_INT 9
4409: PUSH
4410: LD_INT 10
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: PUSH
4418: LD_OWVAR 67
4422: ARRAY
4423: PPUSH
4424: CALL_OW 381
// un := CreateHuman ;
4428: LD_ADDR_VAR 0 3
4432: PUSH
4433: CALL_OW 44
4437: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4438: LD_ADDR_EXP 20
4442: PUSH
4443: LD_EXP 20
4447: PUSH
4448: LD_VAR 0 3
4452: ADD
4453: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4454: LD_ADDR_VAR 0 4
4458: PUSH
4459: LD_INT 22
4461: PUSH
4462: LD_INT 1
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PUSH
4469: LD_INT 58
4471: PUSH
4472: EMPTY
4473: LIST
4474: PUSH
4475: LD_INT 30
4477: PUSH
4478: LD_INT 32
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: PPUSH
4490: CALL_OW 69
4494: ST_TO_ADDR
// if tmp then
4495: LD_VAR 0 4
4499: IFFALSE 4531
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4501: LD_VAR 0 3
4505: PPUSH
4506: LD_VAR 0 4
4510: PUSH
4511: LD_INT 1
4513: PPUSH
4514: LD_VAR 0 4
4518: PPUSH
4519: CALL_OW 12
4523: ARRAY
4524: PPUSH
4525: CALL_OW 52
4529: GO 4543
// PlaceHumanInUnit ( un , us_bar ) ;
4531: LD_VAR 0 3
4535: PPUSH
4536: LD_INT 51
4538: PPUSH
4539: CALL_OW 52
// end ;
4543: GO 4398
4545: POP
4546: POP
// if Difficulty > 1 then
4547: LD_OWVAR 67
4551: PUSH
4552: LD_INT 1
4554: GREATER
4555: IFFALSE 4599
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 ] [ Difficulty - 1 ] ) ;
4557: LD_INT 0
4559: PPUSH
4560: LD_INT 5
4562: PPUSH
4563: LD_INT 9
4565: PUSH
4566: LD_INT 10
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_OWVAR 67
4577: PUSH
4578: LD_INT 1
4580: MINUS
4581: ARRAY
4582: PPUSH
4583: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4587: CALL_OW 44
4591: PPUSH
4592: LD_INT 80
4594: PPUSH
4595: CALL_OW 52
// end ; for i = 1 to 3 do
4599: LD_ADDR_VAR 0 2
4603: PUSH
4604: DOUBLE
4605: LD_INT 1
4607: DEC
4608: ST_TO_ADDR
4609: LD_INT 3
4611: PUSH
4612: FOR_TO
4613: IFFALSE 4639
// begin PrepareMechanic ( false , 9 ) ;
4615: LD_INT 0
4617: PPUSH
4618: LD_INT 9
4620: PPUSH
4621: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4625: CALL_OW 44
4629: PPUSH
4630: LD_INT 43
4632: PPUSH
4633: CALL_OW 52
// end ;
4637: GO 4612
4639: POP
4640: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4641: CALL_OW 44
4645: PPUSH
4646: LD_INT 49
4648: PPUSH
4649: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4653: LD_ADDR_VAR 0 2
4657: PUSH
4658: DOUBLE
4659: LD_INT 1
4661: DEC
4662: ST_TO_ADDR
4663: LD_INT 1
4665: PUSH
4666: LD_OWVAR 67
4670: PLUS
4671: PUSH
4672: FOR_TO
4673: IFFALSE 4716
// begin PrepareEngineer ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
4675: LD_INT 0
4677: PPUSH
4678: LD_INT 8
4680: PUSH
4681: LD_INT 9
4683: PUSH
4684: LD_INT 10
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: PUSH
4692: LD_OWVAR 67
4696: ARRAY
4697: PPUSH
4698: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4702: CALL_OW 44
4706: PPUSH
4707: LD_INT 5
4709: PPUSH
4710: CALL_OW 52
// end ;
4714: GO 4672
4716: POP
4717: POP
// for i = 1 to 3 do
4718: LD_ADDR_VAR 0 2
4722: PUSH
4723: DOUBLE
4724: LD_INT 1
4726: DEC
4727: ST_TO_ADDR
4728: LD_INT 3
4730: PUSH
4731: FOR_TO
4732: IFFALSE 4758
// begin PrepareScientist ( false , 10 ) ;
4734: LD_INT 0
4736: PPUSH
4737: LD_INT 10
4739: PPUSH
4740: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4744: CALL_OW 44
4748: PPUSH
4749: LD_INT 1
4751: PPUSH
4752: CALL_OW 52
// end ;
4756: GO 4731
4758: POP
4759: POP
// end ;
4760: LD_VAR 0 1
4764: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4765: LD_EXP 22
4769: PUSH
4770: LD_EXP 2
4774: NOT
4775: AND
4776: IFFALSE 4962
4778: GO 4780
4780: DISABLE
4781: LD_INT 0
4783: PPUSH
4784: PPUSH
4785: PPUSH
// begin enable ;
4786: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4787: LD_ADDR_VAR 0 3
4791: PUSH
4792: LD_INT 204
4794: PUSH
4795: LD_INT 30
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 165
4804: PUSH
4805: LD_INT 24
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 195
4814: PUSH
4815: LD_INT 6
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 223
4824: PUSH
4825: LD_INT 54
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 214
4834: PUSH
4835: LD_INT 84
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PUSH
4842: LD_INT 206
4844: PUSH
4845: LD_INT 71
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: ST_TO_ADDR
// for i in guards do
4860: LD_ADDR_VAR 0 1
4864: PUSH
4865: LD_EXP 22
4869: PUSH
4870: FOR_IN
4871: IFFALSE 4960
// begin if HasTask ( i ) then
4873: LD_VAR 0 1
4877: PPUSH
4878: CALL_OW 314
4882: IFFALSE 4888
// continue else
4884: GO 4870
4886: GO 4958
// begin j := rand ( 1 , 6 ) ;
4888: LD_ADDR_VAR 0 2
4892: PUSH
4893: LD_INT 1
4895: PPUSH
4896: LD_INT 6
4898: PPUSH
4899: CALL_OW 12
4903: ST_TO_ADDR
// if not See ( 7 , i ) then
4904: LD_INT 7
4906: PPUSH
4907: LD_VAR 0 1
4911: PPUSH
4912: CALL_OW 292
4916: NOT
4917: IFFALSE 4958
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
4919: LD_VAR 0 1
4923: PPUSH
4924: LD_VAR 0 3
4928: PUSH
4929: LD_VAR 0 2
4933: ARRAY
4934: PUSH
4935: LD_INT 1
4937: ARRAY
4938: PPUSH
4939: LD_VAR 0 3
4943: PUSH
4944: LD_VAR 0 2
4948: ARRAY
4949: PUSH
4950: LD_INT 2
4952: ARRAY
4953: PPUSH
4954: CALL_OW 114
// end ; end ;
4958: GO 4870
4960: POP
4961: POP
// end ;
4962: PPOPN 3
4964: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
4965: LD_EXP 23
4969: PUSH
4970: LD_EXP 7
4974: NOT
4975: AND
4976: IFFALSE 5047
4978: GO 4980
4980: DISABLE
4981: LD_INT 0
4983: PPUSH
// begin enable ;
4984: ENABLE
// for i in vehGuard do
4985: LD_ADDR_VAR 0 1
4989: PUSH
4990: LD_EXP 23
4994: PUSH
4995: FOR_IN
4996: IFFALSE 5045
// if IsOk ( vehGuard ) then
4998: LD_EXP 23
5002: PPUSH
5003: CALL_OW 302
5007: IFFALSE 5043
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5009: LD_VAR 0 1
5013: PPUSH
5014: LD_INT 22
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PPUSH
5024: CALL_OW 69
5028: PPUSH
5029: LD_VAR 0 1
5033: PPUSH
5034: CALL_OW 74
5038: PPUSH
5039: CALL_OW 115
5043: GO 4995
5045: POP
5046: POP
// end ;
5047: PPOPN 1
5049: END
// every 9 9$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured do
5050: LD_EXP 4
5054: PUSH
5055: LD_INT 43
5057: PPUSH
5058: CALL_OW 302
5062: AND
5063: PUSH
5064: LD_EXP 7
5068: NOT
5069: AND
5070: IFFALSE 5118
5072: GO 5074
5074: DISABLE
// begin enable ;
5075: ENABLE
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5076: LD_INT 43
5078: PPUSH
5079: LD_INT 5
5081: PPUSH
5082: LD_INT 3
5084: PPUSH
5085: LD_INT 2
5087: PPUSH
5088: LD_INT 7
5090: PUSH
5091: LD_INT 7
5093: PUSH
5094: LD_INT 9
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: LIST
5101: PUSH
5102: LD_INT 1
5104: PPUSH
5105: LD_INT 3
5107: PPUSH
5108: CALL_OW 12
5112: ARRAY
5113: PPUSH
5114: CALL_OW 125
// end ;
5118: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5119: LD_INT 22
5121: PUSH
5122: LD_INT 1
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: LD_INT 25
5131: PUSH
5132: LD_INT 5
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PUSH
5139: LD_INT 50
5141: PUSH
5142: EMPTY
5143: LIST
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: LIST
5149: PPUSH
5150: CALL_OW 69
5154: PUSH
5155: LD_EXP 7
5159: NOT
5160: AND
5161: IFFALSE 5390
5163: GO 5165
5165: DISABLE
5166: LD_INT 0
5168: PPUSH
5169: PPUSH
// begin enable ;
5170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5171: LD_ADDR_VAR 0 1
5175: PUSH
5176: LD_INT 22
5178: PUSH
5179: LD_INT 1
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 25
5188: PUSH
5189: LD_INT 5
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PUSH
5196: LD_INT 50
5198: PUSH
5199: EMPTY
5200: LIST
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: PPUSH
5207: CALL_OW 69
5211: ST_TO_ADDR
// if not tmp then
5212: LD_VAR 0 1
5216: NOT
5217: IFFALSE 5221
// exit ;
5219: GO 5390
// b := IsInUnit ( tmp [ 1 ] ) ;
5221: LD_ADDR_VAR 0 2
5225: PUSH
5226: LD_VAR 0 1
5230: PUSH
5231: LD_INT 1
5233: ARRAY
5234: PPUSH
5235: CALL_OW 310
5239: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5240: LD_VAR 0 2
5244: NOT
5245: PUSH
5246: LD_VAR 0 1
5250: PUSH
5251: LD_INT 1
5253: ARRAY
5254: PPUSH
5255: CALL_OW 314
5259: OR
5260: IFFALSE 5264
// exit ;
5262: GO 5390
// if b = us_bun1 then
5264: LD_VAR 0 2
5268: PUSH
5269: LD_INT 80
5271: EQUAL
5272: IFFALSE 5333
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5274: LD_VAR 0 1
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PPUSH
5283: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5287: LD_VAR 0 1
5291: PUSH
5292: LD_INT 1
5294: ARRAY
5295: PPUSH
5296: LD_INT 27
5298: PPUSH
5299: LD_INT 44
5301: PPUSH
5302: CALL_OW 174
// if IsOk ( us_bun2 ) then
5306: LD_INT 55
5308: PPUSH
5309: CALL_OW 302
5313: IFFALSE 5331
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5315: LD_VAR 0 1
5319: PUSH
5320: LD_INT 1
5322: ARRAY
5323: PPUSH
5324: LD_INT 55
5326: PPUSH
5327: CALL_OW 180
// end else
5331: GO 5390
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5333: LD_VAR 0 1
5337: PUSH
5338: LD_INT 1
5340: ARRAY
5341: PPUSH
5342: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5346: LD_VAR 0 1
5350: PUSH
5351: LD_INT 1
5353: ARRAY
5354: PPUSH
5355: LD_INT 92
5357: PPUSH
5358: LD_INT 51
5360: PPUSH
5361: CALL_OW 174
// if IsOk ( us_bun1 ) then
5365: LD_INT 80
5367: PPUSH
5368: CALL_OW 302
5372: IFFALSE 5390
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5374: LD_VAR 0 1
5378: PUSH
5379: LD_INT 1
5381: ARRAY
5382: PPUSH
5383: LD_INT 80
5385: PPUSH
5386: CALL_OW 180
// end ; end ;
5390: PPOPN 2
5392: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5393: LD_EXP 7
5397: NOT
5398: PUSH
5399: LD_INT 9
5401: PPUSH
5402: LD_INT 22
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: LD_INT 21
5414: PUSH
5415: LD_INT 3
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PUSH
5422: LD_INT 3
5424: PUSH
5425: LD_INT 24
5427: PUSH
5428: LD_INT 1000
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: PPUSH
5444: CALL_OW 70
5448: AND
5449: IFFALSE 5860
5451: GO 5453
5453: DISABLE
5454: LD_INT 0
5456: PPUSH
5457: PPUSH
5458: PPUSH
5459: PPUSH
// begin enable ;
5460: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5461: LD_ADDR_VAR 0 2
5465: PUSH
5466: LD_INT 22
5468: PUSH
5469: LD_INT 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 25
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 24
5488: PUSH
5489: LD_INT 1000
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: LIST
5500: PPUSH
5501: CALL_OW 69
5505: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5506: LD_ADDR_VAR 0 3
5510: PUSH
5511: LD_INT 22
5513: PUSH
5514: LD_INT 1
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: LD_INT 25
5523: PUSH
5524: LD_INT 2
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 3
5533: PUSH
5534: LD_INT 24
5536: PUSH
5537: LD_INT 750
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: LIST
5552: PPUSH
5553: CALL_OW 69
5557: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5558: LD_ADDR_VAR 0 4
5562: PUSH
5563: LD_INT 9
5565: PPUSH
5566: LD_INT 22
5568: PUSH
5569: LD_INT 1
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: PUSH
5576: LD_INT 21
5578: PUSH
5579: LD_INT 3
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PUSH
5586: LD_INT 3
5588: PUSH
5589: LD_INT 24
5591: PUSH
5592: LD_INT 1000
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: PPUSH
5608: CALL_OW 70
5612: PUSH
5613: LD_INT 1
5615: DIFF
5616: ST_TO_ADDR
// if not tmp and not tmp2 then
5617: LD_VAR 0 2
5621: NOT
5622: PUSH
5623: LD_VAR 0 3
5627: NOT
5628: AND
5629: IFFALSE 5633
// exit ;
5631: GO 5860
// if tmp and b then
5633: LD_VAR 0 2
5637: PUSH
5638: LD_VAR 0 4
5642: AND
5643: IFFALSE 5773
// for i in tmp do
5645: LD_ADDR_VAR 0 1
5649: PUSH
5650: LD_VAR 0 2
5654: PUSH
5655: FOR_IN
5656: IFFALSE 5771
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5658: LD_VAR 0 1
5662: PPUSH
5663: CALL_OW 110
5667: PUSH
5668: LD_INT 1
5670: EQUAL
5671: PUSH
5672: LD_VAR 0 1
5676: PPUSH
5677: CALL_OW 256
5681: PUSH
5682: LD_INT 1000
5684: LESS
5685: AND
5686: IFFALSE 5692
// continue else
5688: GO 5655
5690: GO 5719
// if GetTag ( i ) = 1 then
5692: LD_VAR 0 1
5696: PPUSH
5697: CALL_OW 110
5701: PUSH
5702: LD_INT 1
5704: EQUAL
5705: IFFALSE 5719
// SetTag ( i , 0 ) ;
5707: LD_VAR 0 1
5711: PPUSH
5712: LD_INT 0
5714: PPUSH
5715: CALL_OW 109
// if IsInUnit ( i ) then
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 310
5728: IFFALSE 5739
// ComExitBuilding ( i ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: CALL_OW 122
// if not HasTask ( i ) then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 314
5748: NOT
5749: IFFALSE 5769
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5751: LD_VAR 0 1
5755: PPUSH
5756: LD_VAR 0 4
5760: PUSH
5761: LD_INT 1
5763: ARRAY
5764: PPUSH
5765: CALL_OW 190
// end ;
5769: GO 5655
5771: POP
5772: POP
// if tmp2 then
5773: LD_VAR 0 3
5777: IFFALSE 5860
// for i in tmp2 do
5779: LD_ADDR_VAR 0 1
5783: PUSH
5784: LD_VAR 0 3
5788: PUSH
5789: FOR_IN
5790: IFFALSE 5858
// begin if not GetTag ( i ) = 1 then
5792: LD_VAR 0 1
5796: PPUSH
5797: CALL_OW 110
5801: PUSH
5802: LD_INT 1
5804: EQUAL
5805: NOT
5806: IFFALSE 5820
// SetTag ( i , 1 ) ;
5808: LD_VAR 0 1
5812: PPUSH
5813: LD_INT 1
5815: PPUSH
5816: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5820: LD_VAR 0 1
5824: PPUSH
5825: LD_INT 88
5827: PPUSH
5828: LD_INT 75
5830: PPUSH
5831: CALL_OW 297
5835: PUSH
5836: LD_INT 6
5838: GREATER
5839: IFFALSE 5856
// ComMoveXY ( i , 88 , 75 ) ;
5841: LD_VAR 0 1
5845: PPUSH
5846: LD_INT 88
5848: PPUSH
5849: LD_INT 75
5851: PPUSH
5852: CALL_OW 111
// end ;
5856: GO 5789
5858: POP
5859: POP
// end ;
5860: PPOPN 4
5862: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5863: LD_EXP 7
5867: NOT
5868: PUSH
5869: LD_EXP 9
5873: AND
5874: PUSH
5875: LD_INT 9
5877: PPUSH
5878: LD_INT 22
5880: PUSH
5881: LD_INT 1
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: PUSH
5888: LD_INT 21
5890: PUSH
5891: LD_INT 1
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: LD_INT 24
5903: PUSH
5904: LD_INT 1000
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 70
5924: AND
5925: IFFALSE 6098
5927: GO 5929
5929: DISABLE
5930: LD_INT 0
5932: PPUSH
5933: PPUSH
5934: PPUSH
// begin enable ;
5935: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
5936: LD_ADDR_VAR 0 2
5940: PUSH
5941: LD_INT 22
5943: PUSH
5944: LD_INT 1
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PUSH
5951: LD_INT 25
5953: PUSH
5954: LD_INT 4
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: PPUSH
5965: CALL_OW 69
5969: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5970: LD_ADDR_VAR 0 3
5974: PUSH
5975: LD_INT 9
5977: PPUSH
5978: LD_INT 22
5980: PUSH
5981: LD_INT 1
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: PUSH
5988: LD_INT 21
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 3
6000: PUSH
6001: LD_INT 24
6003: PUSH
6004: LD_INT 1000
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: LIST
6019: PPUSH
6020: CALL_OW 70
6024: ST_TO_ADDR
// if not sci or not tmp then
6025: LD_VAR 0 2
6029: NOT
6030: PUSH
6031: LD_VAR 0 3
6035: NOT
6036: OR
6037: IFFALSE 6041
// exit ;
6039: GO 6098
// for i in sci do
6041: LD_ADDR_VAR 0 1
6045: PUSH
6046: LD_VAR 0 2
6050: PUSH
6051: FOR_IN
6052: IFFALSE 6096
// if IsInUnit ( i ) then
6054: LD_VAR 0 1
6058: PPUSH
6059: CALL_OW 310
6063: IFFALSE 6076
// ComExitBuilding ( i ) else
6065: LD_VAR 0 1
6069: PPUSH
6070: CALL_OW 122
6074: GO 6094
// ComHeal ( i , tmp [ 1 ] ) ;
6076: LD_VAR 0 1
6080: PPUSH
6081: LD_VAR 0 3
6085: PUSH
6086: LD_INT 1
6088: ARRAY
6089: PPUSH
6090: CALL_OW 128
6094: GO 6051
6096: POP
6097: POP
// end ;
6098: PPOPN 3
6100: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6101: LD_EXP 7
6105: NOT
6106: PUSH
6107: LD_EXP 9
6111: AND
6112: PUSH
6113: LD_INT 1
6115: PPUSH
6116: CALL_OW 302
6120: AND
6121: PUSH
6122: LD_INT 9
6124: PPUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 1
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 21
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: LD_INT 3
6147: PUSH
6148: LD_INT 24
6150: PUSH
6151: LD_INT 1000
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 70
6171: NOT
6172: AND
6173: PUSH
6174: LD_INT 22
6176: PUSH
6177: LD_INT 1
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: LD_INT 25
6186: PUSH
6187: LD_INT 4
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 56
6196: PUSH
6197: EMPTY
6198: LIST
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: PPUSH
6205: CALL_OW 69
6209: AND
6210: IFFALSE 6303
6212: GO 6214
6214: DISABLE
6215: LD_INT 0
6217: PPUSH
// begin enable ;
6218: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6219: LD_ADDR_VAR 0 1
6223: PUSH
6224: LD_INT 22
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 25
6236: PUSH
6237: LD_INT 4
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 56
6246: PUSH
6247: EMPTY
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: LIST
6254: PPUSH
6255: CALL_OW 69
6259: PUSH
6260: FOR_IN
6261: IFFALSE 6301
// if not GetTag ( i ) and not HasTask ( i ) then
6263: LD_VAR 0 1
6267: PPUSH
6268: CALL_OW 110
6272: NOT
6273: PUSH
6274: LD_VAR 0 1
6278: PPUSH
6279: CALL_OW 314
6283: NOT
6284: AND
6285: IFFALSE 6299
// ComEnterUnit ( i , us_lab ) ;
6287: LD_VAR 0 1
6291: PPUSH
6292: LD_INT 1
6294: PPUSH
6295: CALL_OW 120
6299: GO 6260
6301: POP
6302: POP
// end ;
6303: PPOPN 1
6305: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6306: LD_EXP 7
6310: NOT
6311: PUSH
6312: LD_INT 9
6314: PPUSH
6315: LD_INT 22
6317: PUSH
6318: LD_INT 1
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: LD_INT 21
6327: PUSH
6328: LD_INT 3
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PUSH
6335: LD_INT 3
6337: PUSH
6338: LD_INT 24
6340: PUSH
6341: LD_INT 1000
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: LIST
6356: PPUSH
6357: CALL_OW 70
6361: NOT
6362: AND
6363: PUSH
6364: LD_INT 22
6366: PUSH
6367: LD_INT 1
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PUSH
6374: LD_INT 25
6376: PUSH
6377: LD_INT 2
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: PUSH
6384: LD_INT 56
6386: PUSH
6387: EMPTY
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: PPUSH
6395: CALL_OW 69
6399: AND
6400: IFFALSE 6493
6402: GO 6404
6404: DISABLE
6405: LD_INT 0
6407: PPUSH
// begin enable ;
6408: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6409: LD_ADDR_VAR 0 1
6413: PUSH
6414: LD_INT 22
6416: PUSH
6417: LD_INT 1
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 2
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 56
6436: PUSH
6437: EMPTY
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: PPUSH
6445: CALL_OW 69
6449: PUSH
6450: FOR_IN
6451: IFFALSE 6491
// if not HasTask ( i ) and not GetTag ( i ) then
6453: LD_VAR 0 1
6457: PPUSH
6458: CALL_OW 314
6462: NOT
6463: PUSH
6464: LD_VAR 0 1
6468: PPUSH
6469: CALL_OW 110
6473: NOT
6474: AND
6475: IFFALSE 6489
// ComEnterUnit ( i , us_depot ) ;
6477: LD_VAR 0 1
6481: PPUSH
6482: LD_INT 5
6484: PPUSH
6485: CALL_OW 120
6489: GO 6450
6491: POP
6492: POP
// end ;
6493: PPOPN 1
6495: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6496: LD_EXP 9
6500: PUSH
6501: LD_INT 0
6503: LESSEQUAL
6504: PUSH
6505: LD_EXP 18
6509: PPUSH
6510: CALL_OW 301
6514: OR
6515: PUSH
6516: LD_INT 22
6518: PUSH
6519: LD_INT 1
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: LD_INT 25
6528: PUSH
6529: LD_INT 2
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PPUSH
6540: CALL_OW 69
6544: AND
6545: IFFALSE 6586
6547: GO 6549
6549: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6550: LD_INT 22
6552: PUSH
6553: LD_INT 1
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: LD_INT 25
6562: PUSH
6563: LD_INT 2
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PPUSH
6574: CALL_OW 69
6578: PPUSH
6579: LD_INT 1
6581: PPUSH
6582: CALL_OW 167
6586: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6587: LD_EXP 7
6591: NOT
6592: PUSH
6593: LD_INT 7
6595: PPUSH
6596: LD_INT 22
6598: PUSH
6599: LD_INT 7
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PPUSH
6606: CALL_OW 70
6610: AND
6611: IFFALSE 6702
6613: GO 6615
6615: DISABLE
6616: LD_INT 0
6618: PPUSH
// begin wait ( 0 0$2 ) ;
6619: LD_INT 70
6621: PPUSH
6622: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6626: LD_ADDR_VAR 0 1
6630: PUSH
6631: LD_INT 22
6633: PUSH
6634: LD_INT 1
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 25
6643: PUSH
6644: LD_INT 1
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PPUSH
6655: CALL_OW 69
6659: PUSH
6660: FOR_IN
6661: IFFALSE 6700
// begin if IsInUnit ( i ) then
6663: LD_VAR 0 1
6667: PPUSH
6668: CALL_OW 310
6672: IFFALSE 6683
// ComExitBuilding ( i ) ;
6674: LD_VAR 0 1
6678: PPUSH
6679: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6683: LD_VAR 0 1
6687: PPUSH
6688: LD_INT 92
6690: PPUSH
6691: LD_INT 78
6693: PPUSH
6694: CALL_OW 174
// end ;
6698: GO 6660
6700: POP
6701: POP
// end ; end_of_file
6702: PPOPN 1
6704: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6705: LD_VAR 0 1
6709: PPUSH
6710: LD_VAR 0 2
6714: PPUSH
6715: LD_VAR 0 3
6719: PPUSH
6720: CALL 1560 0 3
6724: PPOPN 3
6726: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6727: LD_EXP 14
6731: PPUSH
6732: CALL_OW 257
6736: PUSH
6737: LD_INT 4
6739: EQUAL
6740: PUSH
6741: LD_EXP 15
6745: PPUSH
6746: CALL_OW 257
6750: PUSH
6751: LD_INT 4
6753: EQUAL
6754: OR
6755: PUSH
6756: LD_INT 22
6758: PUSH
6759: LD_INT 7
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: LD_INT 21
6768: PUSH
6769: LD_INT 3
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PPUSH
6780: CALL_OW 69
6784: OR
6785: IFFALSE 6789
// exit ;
6787: GO 6827
// if un = JMM then
6789: LD_VAR 0 1
6793: PUSH
6794: LD_EXP 14
6798: EQUAL
6799: IFFALSE 6808
// YouLost ( JMM ) ;
6801: LD_STRING JMM
6803: PPUSH
6804: CALL_OW 104
// if un = Burlak then
6808: LD_VAR 0 1
6812: PUSH
6813: LD_EXP 15
6817: EQUAL
6818: IFFALSE 6827
// YouLost ( Burlak ) ;
6820: LD_STRING Burlak
6822: PPUSH
6823: CALL_OW 104
// end ;
6827: PPOPN 1
6829: END
// on UnitDestroyed ( un ) do begin if un = JMM then
6830: LD_VAR 0 1
6834: PUSH
6835: LD_EXP 14
6839: EQUAL
6840: IFFALSE 6849
// YouLost ( JMM ) ;
6842: LD_STRING JMM
6844: PPUSH
6845: CALL_OW 104
// if un = Burlak then
6849: LD_VAR 0 1
6853: PUSH
6854: LD_EXP 15
6858: EQUAL
6859: IFFALSE 6868
// YouLost ( Burlak ) ;
6861: LD_STRING Burlak
6863: PPUSH
6864: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
6868: LD_VAR 0 1
6872: PUSH
6873: LD_INT 21
6875: PUSH
6876: LD_INT 1
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: LD_INT 23
6885: PUSH
6886: LD_INT 1
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PPUSH
6897: CALL_OW 69
6901: IN
6902: IFFALSE 6918
// killCounter := killCounter + 1 ;
6904: LD_ADDR_EXP 12
6908: PUSH
6909: LD_EXP 12
6913: PUSH
6914: LD_INT 1
6916: PLUS
6917: ST_TO_ADDR
// end ;
6918: PPOPN 1
6920: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6921: LD_VAR 0 2
6925: PUSH
6926: LD_INT 7
6928: EQUAL
6929: PUSH
6930: LD_VAR 0 1
6934: PUSH
6935: LD_INT 2
6937: PUSH
6938: LD_INT 30
6940: PUSH
6941: LD_INT 31
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 30
6950: PUSH
6951: LD_INT 32
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 30
6960: PUSH
6961: LD_INT 33
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: PPUSH
6974: CALL_OW 69
6978: IN
6979: AND
6980: IFFALSE 6996
// bunkerCounter := bunkerCounter + 1 ;
6982: LD_ADDR_EXP 13
6986: PUSH
6987: LD_EXP 13
6991: PUSH
6992: LD_INT 1
6994: PLUS
6995: ST_TO_ADDR
// end ;
6996: PPOPN 3
6998: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 255
7008: PUSH
7009: LD_INT 7
7011: EQUAL
7012: IFFALSE 7022
// artifactPickedUp := true ;
7014: LD_ADDR_EXP 6
7018: PUSH
7019: LD_INT 1
7021: ST_TO_ADDR
// end ;
7022: PPOPN 2
7024: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7025: LD_ADDR_EXP 6
7029: PUSH
7030: LD_INT 0
7032: ST_TO_ADDR
7033: PPOPN 2
7035: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) <> 1 then
7036: LD_VAR 0 1
7040: PPUSH
7041: CALL_OW 255
7045: PUSH
7046: LD_INT 1
7048: NONEQUAL
7049: IFFALSE 7053
// exit ;
7051: GO 7100
// wait ( 0 0$5 ) ;
7053: LD_INT 175
7055: PPUSH
7056: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7060: LD_VAR 0 1
7064: PPUSH
7065: CALL_OW 263
7069: PUSH
7070: LD_INT 2
7072: EQUAL
7073: IFFALSE 7084
// Connect ( vehicle ) ;
7075: LD_VAR 0 1
7079: PPUSH
7080: CALL 32426 0 1
// vehGuard := vehGuard ^ vehicle ;
7084: LD_ADDR_EXP 23
7088: PUSH
7089: LD_EXP 23
7093: PUSH
7094: LD_VAR 0 1
7098: ADD
7099: ST_TO_ADDR
// end ;
7100: PPOPN 2
7102: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7103: LD_VAR 0 1
7107: PUSH
7108: LD_INT 1
7110: EQUAL
7111: PUSH
7112: LD_EXP 7
7116: NOT
7117: AND
7118: IFFALSE 7153
// begin planCaptured := true ;
7120: LD_ADDR_EXP 7
7124: PUSH
7125: LD_INT 1
7127: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7128: LD_STRING MEnd
7130: PPUSH
7131: CALL_OW 337
// canEnd := true ;
7135: LD_ADDR_EXP 10
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// missionTime := tick ;
7143: LD_ADDR_EXP 11
7147: PUSH
7148: LD_OWVAR 1
7152: ST_TO_ADDR
// end ; end ;
7153: PPOPN 3
7155: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7156: LD_VAR 0 1
7160: PPUSH
7161: CALL 20606 0 1
// end ; end_of_file
7165: PPOPN 1
7167: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7168: LD_INT 0
7170: PPUSH
// ar_miner := 81 ;
7171: LD_ADDR_EXP 31
7175: PUSH
7176: LD_INT 81
7178: ST_TO_ADDR
// ar_crane := 88 ;
7179: LD_ADDR_EXP 30
7183: PUSH
7184: LD_INT 88
7186: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7187: LD_ADDR_EXP 25
7191: PUSH
7192: LD_INT 89
7194: ST_TO_ADDR
// us_hack := 99 ;
7195: LD_ADDR_EXP 26
7199: PUSH
7200: LD_INT 99
7202: ST_TO_ADDR
// us_artillery := 97 ;
7203: LD_ADDR_EXP 27
7207: PUSH
7208: LD_INT 97
7210: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7211: LD_ADDR_EXP 28
7215: PUSH
7216: LD_INT 91
7218: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
7219: LD_ADDR_EXP 29
7223: PUSH
7224: LD_INT 92
7226: ST_TO_ADDR
// ru_radar := 98 ;
7227: LD_ADDR_EXP 24
7231: PUSH
7232: LD_INT 98
7234: ST_TO_ADDR
// tech_Artillery := 80 ;
7235: LD_ADDR_EXP 32
7239: PUSH
7240: LD_INT 80
7242: ST_TO_ADDR
// tech_RadMat := 81 ;
7243: LD_ADDR_EXP 33
7247: PUSH
7248: LD_INT 81
7250: ST_TO_ADDR
// tech_BasicTools := 82 ;
7251: LD_ADDR_EXP 34
7255: PUSH
7256: LD_INT 82
7258: ST_TO_ADDR
// tech_Cargo := 83 ;
7259: LD_ADDR_EXP 35
7263: PUSH
7264: LD_INT 83
7266: ST_TO_ADDR
// tech_Track := 84 ;
7267: LD_ADDR_EXP 36
7271: PUSH
7272: LD_INT 84
7274: ST_TO_ADDR
// tech_Crane := 85 ;
7275: LD_ADDR_EXP 37
7279: PUSH
7280: LD_INT 85
7282: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7283: LD_ADDR_EXP 38
7287: PUSH
7288: LD_INT 86
7290: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7291: LD_ADDR_EXP 39
7295: PUSH
7296: LD_INT 87
7298: ST_TO_ADDR
// class_mastodont := 31 ;
7299: LD_ADDR_EXP 40
7303: PUSH
7304: LD_INT 31
7306: ST_TO_ADDR
// class_horse := 21 ;
7307: LD_ADDR_EXP 41
7311: PUSH
7312: LD_INT 21
7314: ST_TO_ADDR
// end ;
7315: LD_VAR 0 1
7319: RET
// every 1 do
7320: GO 7322
7322: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7323: CALL 7168 0 0
7327: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7328: LD_INT 0
7330: PPUSH
// if p2 = 100 then
7331: LD_VAR 0 2
7335: PUSH
7336: LD_INT 100
7338: EQUAL
7339: IFFALSE 8288
// begin if not StreamModeActive then
7341: LD_EXP 42
7345: NOT
7346: IFFALSE 7356
// StreamModeActive := true ;
7348: LD_ADDR_EXP 42
7352: PUSH
7353: LD_INT 1
7355: ST_TO_ADDR
// if p3 = 0 then
7356: LD_VAR 0 3
7360: PUSH
7361: LD_INT 0
7363: EQUAL
7364: IFFALSE 7370
// InitStreamMode ;
7366: CALL 8448 0 0
// if p3 = 1 then
7370: LD_VAR 0 3
7374: PUSH
7375: LD_INT 1
7377: EQUAL
7378: IFFALSE 7388
// sRocket := true ;
7380: LD_ADDR_EXP 47
7384: PUSH
7385: LD_INT 1
7387: ST_TO_ADDR
// if p3 = 2 then
7388: LD_VAR 0 3
7392: PUSH
7393: LD_INT 2
7395: EQUAL
7396: IFFALSE 7406
// sSpeed := true ;
7398: LD_ADDR_EXP 46
7402: PUSH
7403: LD_INT 1
7405: ST_TO_ADDR
// if p3 = 3 then
7406: LD_VAR 0 3
7410: PUSH
7411: LD_INT 3
7413: EQUAL
7414: IFFALSE 7424
// sEngine := true ;
7416: LD_ADDR_EXP 48
7420: PUSH
7421: LD_INT 1
7423: ST_TO_ADDR
// if p3 = 4 then
7424: LD_VAR 0 3
7428: PUSH
7429: LD_INT 4
7431: EQUAL
7432: IFFALSE 7442
// sSpec := true ;
7434: LD_ADDR_EXP 45
7438: PUSH
7439: LD_INT 1
7441: ST_TO_ADDR
// if p3 = 5 then
7442: LD_VAR 0 3
7446: PUSH
7447: LD_INT 5
7449: EQUAL
7450: IFFALSE 7460
// sLevel := true ;
7452: LD_ADDR_EXP 49
7456: PUSH
7457: LD_INT 1
7459: ST_TO_ADDR
// if p3 = 6 then
7460: LD_VAR 0 3
7464: PUSH
7465: LD_INT 6
7467: EQUAL
7468: IFFALSE 7478
// sArmoury := true ;
7470: LD_ADDR_EXP 50
7474: PUSH
7475: LD_INT 1
7477: ST_TO_ADDR
// if p3 = 7 then
7478: LD_VAR 0 3
7482: PUSH
7483: LD_INT 7
7485: EQUAL
7486: IFFALSE 7496
// sRadar := true ;
7488: LD_ADDR_EXP 51
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// if p3 = 8 then
7496: LD_VAR 0 3
7500: PUSH
7501: LD_INT 8
7503: EQUAL
7504: IFFALSE 7514
// sBunker := true ;
7506: LD_ADDR_EXP 52
7510: PUSH
7511: LD_INT 1
7513: ST_TO_ADDR
// if p3 = 9 then
7514: LD_VAR 0 3
7518: PUSH
7519: LD_INT 9
7521: EQUAL
7522: IFFALSE 7532
// sHack := true ;
7524: LD_ADDR_EXP 53
7528: PUSH
7529: LD_INT 1
7531: ST_TO_ADDR
// if p3 = 10 then
7532: LD_VAR 0 3
7536: PUSH
7537: LD_INT 10
7539: EQUAL
7540: IFFALSE 7550
// sFire := true ;
7542: LD_ADDR_EXP 54
7546: PUSH
7547: LD_INT 1
7549: ST_TO_ADDR
// if p3 = 11 then
7550: LD_VAR 0 3
7554: PUSH
7555: LD_INT 11
7557: EQUAL
7558: IFFALSE 7568
// sRefresh := true ;
7560: LD_ADDR_EXP 55
7564: PUSH
7565: LD_INT 1
7567: ST_TO_ADDR
// if p3 = 12 then
7568: LD_VAR 0 3
7572: PUSH
7573: LD_INT 12
7575: EQUAL
7576: IFFALSE 7586
// sExp := true ;
7578: LD_ADDR_EXP 56
7582: PUSH
7583: LD_INT 1
7585: ST_TO_ADDR
// if p3 = 13 then
7586: LD_VAR 0 3
7590: PUSH
7591: LD_INT 13
7593: EQUAL
7594: IFFALSE 7604
// sDepot := true ;
7596: LD_ADDR_EXP 57
7600: PUSH
7601: LD_INT 1
7603: ST_TO_ADDR
// if p3 = 14 then
7604: LD_VAR 0 3
7608: PUSH
7609: LD_INT 14
7611: EQUAL
7612: IFFALSE 7622
// sFlag := true ;
7614: LD_ADDR_EXP 58
7618: PUSH
7619: LD_INT 1
7621: ST_TO_ADDR
// if p3 = 15 then
7622: LD_VAR 0 3
7626: PUSH
7627: LD_INT 15
7629: EQUAL
7630: IFFALSE 7640
// sKamikadze := true ;
7632: LD_ADDR_EXP 66
7636: PUSH
7637: LD_INT 1
7639: ST_TO_ADDR
// if p3 = 16 then
7640: LD_VAR 0 3
7644: PUSH
7645: LD_INT 16
7647: EQUAL
7648: IFFALSE 7658
// sTroll := true ;
7650: LD_ADDR_EXP 67
7654: PUSH
7655: LD_INT 1
7657: ST_TO_ADDR
// if p3 = 17 then
7658: LD_VAR 0 3
7662: PUSH
7663: LD_INT 17
7665: EQUAL
7666: IFFALSE 7676
// sSlow := true ;
7668: LD_ADDR_EXP 68
7672: PUSH
7673: LD_INT 1
7675: ST_TO_ADDR
// if p3 = 18 then
7676: LD_VAR 0 3
7680: PUSH
7681: LD_INT 18
7683: EQUAL
7684: IFFALSE 7694
// sLack := true ;
7686: LD_ADDR_EXP 69
7690: PUSH
7691: LD_INT 1
7693: ST_TO_ADDR
// if p3 = 19 then
7694: LD_VAR 0 3
7698: PUSH
7699: LD_INT 19
7701: EQUAL
7702: IFFALSE 7712
// sTank := true ;
7704: LD_ADDR_EXP 71
7708: PUSH
7709: LD_INT 1
7711: ST_TO_ADDR
// if p3 = 20 then
7712: LD_VAR 0 3
7716: PUSH
7717: LD_INT 20
7719: EQUAL
7720: IFFALSE 7730
// sRemote := true ;
7722: LD_ADDR_EXP 72
7726: PUSH
7727: LD_INT 1
7729: ST_TO_ADDR
// if p3 = 21 then
7730: LD_VAR 0 3
7734: PUSH
7735: LD_INT 21
7737: EQUAL
7738: IFFALSE 7748
// sPowell := true ;
7740: LD_ADDR_EXP 73
7744: PUSH
7745: LD_INT 1
7747: ST_TO_ADDR
// if p3 = 22 then
7748: LD_VAR 0 3
7752: PUSH
7753: LD_INT 22
7755: EQUAL
7756: IFFALSE 7766
// sTeleport := true ;
7758: LD_ADDR_EXP 76
7762: PUSH
7763: LD_INT 1
7765: ST_TO_ADDR
// if p3 = 23 then
7766: LD_VAR 0 3
7770: PUSH
7771: LD_INT 23
7773: EQUAL
7774: IFFALSE 7784
// sOilTower := true ;
7776: LD_ADDR_EXP 78
7780: PUSH
7781: LD_INT 1
7783: ST_TO_ADDR
// if p3 = 24 then
7784: LD_VAR 0 3
7788: PUSH
7789: LD_INT 24
7791: EQUAL
7792: IFFALSE 7802
// sShovel := true ;
7794: LD_ADDR_EXP 79
7798: PUSH
7799: LD_INT 1
7801: ST_TO_ADDR
// if p3 = 25 then
7802: LD_VAR 0 3
7806: PUSH
7807: LD_INT 25
7809: EQUAL
7810: IFFALSE 7820
// sSheik := true ;
7812: LD_ADDR_EXP 80
7816: PUSH
7817: LD_INT 1
7819: ST_TO_ADDR
// if p3 = 26 then
7820: LD_VAR 0 3
7824: PUSH
7825: LD_INT 26
7827: EQUAL
7828: IFFALSE 7838
// sEarthquake := true ;
7830: LD_ADDR_EXP 82
7834: PUSH
7835: LD_INT 1
7837: ST_TO_ADDR
// if p3 = 27 then
7838: LD_VAR 0 3
7842: PUSH
7843: LD_INT 27
7845: EQUAL
7846: IFFALSE 7856
// sAI := true ;
7848: LD_ADDR_EXP 83
7852: PUSH
7853: LD_INT 1
7855: ST_TO_ADDR
// if p3 = 28 then
7856: LD_VAR 0 3
7860: PUSH
7861: LD_INT 28
7863: EQUAL
7864: IFFALSE 7874
// sCargo := true ;
7866: LD_ADDR_EXP 86
7870: PUSH
7871: LD_INT 1
7873: ST_TO_ADDR
// if p3 = 29 then
7874: LD_VAR 0 3
7878: PUSH
7879: LD_INT 29
7881: EQUAL
7882: IFFALSE 7892
// sDLaser := true ;
7884: LD_ADDR_EXP 87
7888: PUSH
7889: LD_INT 1
7891: ST_TO_ADDR
// if p3 = 30 then
7892: LD_VAR 0 3
7896: PUSH
7897: LD_INT 30
7899: EQUAL
7900: IFFALSE 7910
// sExchange := true ;
7902: LD_ADDR_EXP 88
7906: PUSH
7907: LD_INT 1
7909: ST_TO_ADDR
// if p3 = 31 then
7910: LD_VAR 0 3
7914: PUSH
7915: LD_INT 31
7917: EQUAL
7918: IFFALSE 7928
// sFac := true ;
7920: LD_ADDR_EXP 89
7924: PUSH
7925: LD_INT 1
7927: ST_TO_ADDR
// if p3 = 32 then
7928: LD_VAR 0 3
7932: PUSH
7933: LD_INT 32
7935: EQUAL
7936: IFFALSE 7946
// sPower := true ;
7938: LD_ADDR_EXP 90
7942: PUSH
7943: LD_INT 1
7945: ST_TO_ADDR
// if p3 = 33 then
7946: LD_VAR 0 3
7950: PUSH
7951: LD_INT 33
7953: EQUAL
7954: IFFALSE 7964
// sRandom := true ;
7956: LD_ADDR_EXP 91
7960: PUSH
7961: LD_INT 1
7963: ST_TO_ADDR
// if p3 = 34 then
7964: LD_VAR 0 3
7968: PUSH
7969: LD_INT 34
7971: EQUAL
7972: IFFALSE 7982
// sShield := true ;
7974: LD_ADDR_EXP 92
7978: PUSH
7979: LD_INT 1
7981: ST_TO_ADDR
// if p3 = 35 then
7982: LD_VAR 0 3
7986: PUSH
7987: LD_INT 35
7989: EQUAL
7990: IFFALSE 8000
// sTime := true ;
7992: LD_ADDR_EXP 93
7996: PUSH
7997: LD_INT 1
7999: ST_TO_ADDR
// if p3 = 36 then
8000: LD_VAR 0 3
8004: PUSH
8005: LD_INT 36
8007: EQUAL
8008: IFFALSE 8018
// sTools := true ;
8010: LD_ADDR_EXP 94
8014: PUSH
8015: LD_INT 1
8017: ST_TO_ADDR
// if p3 = 101 then
8018: LD_VAR 0 3
8022: PUSH
8023: LD_INT 101
8025: EQUAL
8026: IFFALSE 8036
// sSold := true ;
8028: LD_ADDR_EXP 59
8032: PUSH
8033: LD_INT 1
8035: ST_TO_ADDR
// if p3 = 102 then
8036: LD_VAR 0 3
8040: PUSH
8041: LD_INT 102
8043: EQUAL
8044: IFFALSE 8054
// sDiff := true ;
8046: LD_ADDR_EXP 60
8050: PUSH
8051: LD_INT 1
8053: ST_TO_ADDR
// if p3 = 103 then
8054: LD_VAR 0 3
8058: PUSH
8059: LD_INT 103
8061: EQUAL
8062: IFFALSE 8072
// sFog := true ;
8064: LD_ADDR_EXP 63
8068: PUSH
8069: LD_INT 1
8071: ST_TO_ADDR
// if p3 = 104 then
8072: LD_VAR 0 3
8076: PUSH
8077: LD_INT 104
8079: EQUAL
8080: IFFALSE 8090
// sReset := true ;
8082: LD_ADDR_EXP 64
8086: PUSH
8087: LD_INT 1
8089: ST_TO_ADDR
// if p3 = 105 then
8090: LD_VAR 0 3
8094: PUSH
8095: LD_INT 105
8097: EQUAL
8098: IFFALSE 8108
// sSun := true ;
8100: LD_ADDR_EXP 65
8104: PUSH
8105: LD_INT 1
8107: ST_TO_ADDR
// if p3 = 106 then
8108: LD_VAR 0 3
8112: PUSH
8113: LD_INT 106
8115: EQUAL
8116: IFFALSE 8126
// sTiger := true ;
8118: LD_ADDR_EXP 61
8122: PUSH
8123: LD_INT 1
8125: ST_TO_ADDR
// if p3 = 107 then
8126: LD_VAR 0 3
8130: PUSH
8131: LD_INT 107
8133: EQUAL
8134: IFFALSE 8144
// sBomb := true ;
8136: LD_ADDR_EXP 62
8140: PUSH
8141: LD_INT 1
8143: ST_TO_ADDR
// if p3 = 108 then
8144: LD_VAR 0 3
8148: PUSH
8149: LD_INT 108
8151: EQUAL
8152: IFFALSE 8162
// sWound := true ;
8154: LD_ADDR_EXP 70
8158: PUSH
8159: LD_INT 1
8161: ST_TO_ADDR
// if p3 = 109 then
8162: LD_VAR 0 3
8166: PUSH
8167: LD_INT 109
8169: EQUAL
8170: IFFALSE 8180
// sBetray := true ;
8172: LD_ADDR_EXP 74
8176: PUSH
8177: LD_INT 1
8179: ST_TO_ADDR
// if p3 = 110 then
8180: LD_VAR 0 3
8184: PUSH
8185: LD_INT 110
8187: EQUAL
8188: IFFALSE 8198
// sContamin := true ;
8190: LD_ADDR_EXP 75
8194: PUSH
8195: LD_INT 1
8197: ST_TO_ADDR
// if p3 = 111 then
8198: LD_VAR 0 3
8202: PUSH
8203: LD_INT 111
8205: EQUAL
8206: IFFALSE 8216
// sOil := true ;
8208: LD_ADDR_EXP 77
8212: PUSH
8213: LD_INT 1
8215: ST_TO_ADDR
// if p3 = 112 then
8216: LD_VAR 0 3
8220: PUSH
8221: LD_INT 112
8223: EQUAL
8224: IFFALSE 8234
// sStu := true ;
8226: LD_ADDR_EXP 81
8230: PUSH
8231: LD_INT 1
8233: ST_TO_ADDR
// if p3 = 113 then
8234: LD_VAR 0 3
8238: PUSH
8239: LD_INT 113
8241: EQUAL
8242: IFFALSE 8252
// sBazooka := true ;
8244: LD_ADDR_EXP 84
8248: PUSH
8249: LD_INT 1
8251: ST_TO_ADDR
// if p3 = 114 then
8252: LD_VAR 0 3
8256: PUSH
8257: LD_INT 114
8259: EQUAL
8260: IFFALSE 8270
// sMortar := true ;
8262: LD_ADDR_EXP 85
8266: PUSH
8267: LD_INT 1
8269: ST_TO_ADDR
// if p3 = 115 then
8270: LD_VAR 0 3
8274: PUSH
8275: LD_INT 115
8277: EQUAL
8278: IFFALSE 8288
// sRanger := true ;
8280: LD_ADDR_EXP 95
8284: PUSH
8285: LD_INT 1
8287: ST_TO_ADDR
// end ; if p2 = 101 then
8288: LD_VAR 0 2
8292: PUSH
8293: LD_INT 101
8295: EQUAL
8296: IFFALSE 8424
// begin case p3 of 1 :
8298: LD_VAR 0 3
8302: PUSH
8303: LD_INT 1
8305: DOUBLE
8306: EQUAL
8307: IFTRUE 8311
8309: GO 8318
8311: POP
// hHackUnlimitedResources ; 2 :
8312: CALL 19461 0 0
8316: GO 8424
8318: LD_INT 2
8320: DOUBLE
8321: EQUAL
8322: IFTRUE 8326
8324: GO 8333
8326: POP
// hHackSetLevel10 ; 3 :
8327: CALL 19594 0 0
8331: GO 8424
8333: LD_INT 3
8335: DOUBLE
8336: EQUAL
8337: IFTRUE 8341
8339: GO 8348
8341: POP
// hHackSetLevel10YourUnits ; 4 :
8342: CALL 19679 0 0
8346: GO 8424
8348: LD_INT 4
8350: DOUBLE
8351: EQUAL
8352: IFTRUE 8356
8354: GO 8363
8356: POP
// hHackInvincible ; 5 :
8357: CALL 20127 0 0
8361: GO 8424
8363: LD_INT 5
8365: DOUBLE
8366: EQUAL
8367: IFTRUE 8371
8369: GO 8378
8371: POP
// hHackInvisible ; 6 :
8372: CALL 20238 0 0
8376: GO 8424
8378: LD_INT 6
8380: DOUBLE
8381: EQUAL
8382: IFTRUE 8386
8384: GO 8393
8386: POP
// hHackChangeYourSide ; 7 :
8387: CALL 20295 0 0
8391: GO 8424
8393: LD_INT 7
8395: DOUBLE
8396: EQUAL
8397: IFTRUE 8401
8399: GO 8408
8401: POP
// hHackChangeUnitSide ; 8 :
8402: CALL 20337 0 0
8406: GO 8424
8408: LD_INT 8
8410: DOUBLE
8411: EQUAL
8412: IFTRUE 8416
8414: GO 8423
8416: POP
// hHackFog ; end ;
8417: CALL 20438 0 0
8421: GO 8424
8423: POP
// end ; end ;
8424: LD_VAR 0 7
8428: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8429: GO 8431
8431: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8432: LD_STRING initStreamRollete();
8434: PPUSH
8435: CALL_OW 559
// InitStreamMode ;
8439: CALL 8448 0 0
// DefineStreamItems ( ) ;
8443: CALL 8888 0 0
// end ;
8447: END
// function InitStreamMode ; begin
8448: LD_INT 0
8450: PPUSH
// streamModeActive := false ;
8451: LD_ADDR_EXP 42
8455: PUSH
8456: LD_INT 0
8458: ST_TO_ADDR
// normalCounter := 36 ;
8459: LD_ADDR_EXP 43
8463: PUSH
8464: LD_INT 36
8466: ST_TO_ADDR
// hardcoreCounter := 16 ;
8467: LD_ADDR_EXP 44
8471: PUSH
8472: LD_INT 16
8474: ST_TO_ADDR
// sRocket := false ;
8475: LD_ADDR_EXP 47
8479: PUSH
8480: LD_INT 0
8482: ST_TO_ADDR
// sSpeed := false ;
8483: LD_ADDR_EXP 46
8487: PUSH
8488: LD_INT 0
8490: ST_TO_ADDR
// sEngine := false ;
8491: LD_ADDR_EXP 48
8495: PUSH
8496: LD_INT 0
8498: ST_TO_ADDR
// sSpec := false ;
8499: LD_ADDR_EXP 45
8503: PUSH
8504: LD_INT 0
8506: ST_TO_ADDR
// sLevel := false ;
8507: LD_ADDR_EXP 49
8511: PUSH
8512: LD_INT 0
8514: ST_TO_ADDR
// sArmoury := false ;
8515: LD_ADDR_EXP 50
8519: PUSH
8520: LD_INT 0
8522: ST_TO_ADDR
// sRadar := false ;
8523: LD_ADDR_EXP 51
8527: PUSH
8528: LD_INT 0
8530: ST_TO_ADDR
// sBunker := false ;
8531: LD_ADDR_EXP 52
8535: PUSH
8536: LD_INT 0
8538: ST_TO_ADDR
// sHack := false ;
8539: LD_ADDR_EXP 53
8543: PUSH
8544: LD_INT 0
8546: ST_TO_ADDR
// sFire := false ;
8547: LD_ADDR_EXP 54
8551: PUSH
8552: LD_INT 0
8554: ST_TO_ADDR
// sRefresh := false ;
8555: LD_ADDR_EXP 55
8559: PUSH
8560: LD_INT 0
8562: ST_TO_ADDR
// sExp := false ;
8563: LD_ADDR_EXP 56
8567: PUSH
8568: LD_INT 0
8570: ST_TO_ADDR
// sDepot := false ;
8571: LD_ADDR_EXP 57
8575: PUSH
8576: LD_INT 0
8578: ST_TO_ADDR
// sFlag := false ;
8579: LD_ADDR_EXP 58
8583: PUSH
8584: LD_INT 0
8586: ST_TO_ADDR
// sKamikadze := false ;
8587: LD_ADDR_EXP 66
8591: PUSH
8592: LD_INT 0
8594: ST_TO_ADDR
// sTroll := false ;
8595: LD_ADDR_EXP 67
8599: PUSH
8600: LD_INT 0
8602: ST_TO_ADDR
// sSlow := false ;
8603: LD_ADDR_EXP 68
8607: PUSH
8608: LD_INT 0
8610: ST_TO_ADDR
// sLack := false ;
8611: LD_ADDR_EXP 69
8615: PUSH
8616: LD_INT 0
8618: ST_TO_ADDR
// sTank := false ;
8619: LD_ADDR_EXP 71
8623: PUSH
8624: LD_INT 0
8626: ST_TO_ADDR
// sRemote := false ;
8627: LD_ADDR_EXP 72
8631: PUSH
8632: LD_INT 0
8634: ST_TO_ADDR
// sPowell := false ;
8635: LD_ADDR_EXP 73
8639: PUSH
8640: LD_INT 0
8642: ST_TO_ADDR
// sTeleport := false ;
8643: LD_ADDR_EXP 76
8647: PUSH
8648: LD_INT 0
8650: ST_TO_ADDR
// sOilTower := false ;
8651: LD_ADDR_EXP 78
8655: PUSH
8656: LD_INT 0
8658: ST_TO_ADDR
// sShovel := false ;
8659: LD_ADDR_EXP 79
8663: PUSH
8664: LD_INT 0
8666: ST_TO_ADDR
// sSheik := false ;
8667: LD_ADDR_EXP 80
8671: PUSH
8672: LD_INT 0
8674: ST_TO_ADDR
// sEarthquake := false ;
8675: LD_ADDR_EXP 82
8679: PUSH
8680: LD_INT 0
8682: ST_TO_ADDR
// sAI := false ;
8683: LD_ADDR_EXP 83
8687: PUSH
8688: LD_INT 0
8690: ST_TO_ADDR
// sCargo := false ;
8691: LD_ADDR_EXP 86
8695: PUSH
8696: LD_INT 0
8698: ST_TO_ADDR
// sDLaser := false ;
8699: LD_ADDR_EXP 87
8703: PUSH
8704: LD_INT 0
8706: ST_TO_ADDR
// sExchange := false ;
8707: LD_ADDR_EXP 88
8711: PUSH
8712: LD_INT 0
8714: ST_TO_ADDR
// sFac := false ;
8715: LD_ADDR_EXP 89
8719: PUSH
8720: LD_INT 0
8722: ST_TO_ADDR
// sPower := false ;
8723: LD_ADDR_EXP 90
8727: PUSH
8728: LD_INT 0
8730: ST_TO_ADDR
// sRandom := false ;
8731: LD_ADDR_EXP 91
8735: PUSH
8736: LD_INT 0
8738: ST_TO_ADDR
// sShield := false ;
8739: LD_ADDR_EXP 92
8743: PUSH
8744: LD_INT 0
8746: ST_TO_ADDR
// sTime := false ;
8747: LD_ADDR_EXP 93
8751: PUSH
8752: LD_INT 0
8754: ST_TO_ADDR
// sTools := false ;
8755: LD_ADDR_EXP 94
8759: PUSH
8760: LD_INT 0
8762: ST_TO_ADDR
// sSold := false ;
8763: LD_ADDR_EXP 59
8767: PUSH
8768: LD_INT 0
8770: ST_TO_ADDR
// sDiff := false ;
8771: LD_ADDR_EXP 60
8775: PUSH
8776: LD_INT 0
8778: ST_TO_ADDR
// sFog := false ;
8779: LD_ADDR_EXP 63
8783: PUSH
8784: LD_INT 0
8786: ST_TO_ADDR
// sReset := false ;
8787: LD_ADDR_EXP 64
8791: PUSH
8792: LD_INT 0
8794: ST_TO_ADDR
// sSun := false ;
8795: LD_ADDR_EXP 65
8799: PUSH
8800: LD_INT 0
8802: ST_TO_ADDR
// sTiger := false ;
8803: LD_ADDR_EXP 61
8807: PUSH
8808: LD_INT 0
8810: ST_TO_ADDR
// sBomb := false ;
8811: LD_ADDR_EXP 62
8815: PUSH
8816: LD_INT 0
8818: ST_TO_ADDR
// sWound := false ;
8819: LD_ADDR_EXP 70
8823: PUSH
8824: LD_INT 0
8826: ST_TO_ADDR
// sBetray := false ;
8827: LD_ADDR_EXP 74
8831: PUSH
8832: LD_INT 0
8834: ST_TO_ADDR
// sContamin := false ;
8835: LD_ADDR_EXP 75
8839: PUSH
8840: LD_INT 0
8842: ST_TO_ADDR
// sOil := false ;
8843: LD_ADDR_EXP 77
8847: PUSH
8848: LD_INT 0
8850: ST_TO_ADDR
// sStu := false ;
8851: LD_ADDR_EXP 81
8855: PUSH
8856: LD_INT 0
8858: ST_TO_ADDR
// sBazooka := false ;
8859: LD_ADDR_EXP 84
8863: PUSH
8864: LD_INT 0
8866: ST_TO_ADDR
// sMortar := false ;
8867: LD_ADDR_EXP 85
8871: PUSH
8872: LD_INT 0
8874: ST_TO_ADDR
// sRanger := false ;
8875: LD_ADDR_EXP 95
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// end ;
8883: LD_VAR 0 1
8887: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8888: LD_INT 0
8890: PPUSH
8891: PPUSH
8892: PPUSH
8893: PPUSH
8894: PPUSH
// result := [ ] ;
8895: LD_ADDR_VAR 0 1
8899: PUSH
8900: EMPTY
8901: ST_TO_ADDR
// if campaign_id = 1 then
8902: LD_OWVAR 69
8906: PUSH
8907: LD_INT 1
8909: EQUAL
8910: IFFALSE 11848
// begin case mission_number of 1 :
8912: LD_OWVAR 70
8916: PUSH
8917: LD_INT 1
8919: DOUBLE
8920: EQUAL
8921: IFTRUE 8925
8923: GO 8989
8925: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8926: LD_ADDR_VAR 0 1
8930: PUSH
8931: LD_INT 2
8933: PUSH
8934: LD_INT 4
8936: PUSH
8937: LD_INT 11
8939: PUSH
8940: LD_INT 12
8942: PUSH
8943: LD_INT 15
8945: PUSH
8946: LD_INT 16
8948: PUSH
8949: LD_INT 22
8951: PUSH
8952: LD_INT 23
8954: PUSH
8955: LD_INT 26
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: PUSH
8969: LD_INT 101
8971: PUSH
8972: LD_INT 102
8974: PUSH
8975: LD_INT 106
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: LIST
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: ST_TO_ADDR
8987: GO 11846
8989: LD_INT 2
8991: DOUBLE
8992: EQUAL
8993: IFTRUE 8997
8995: GO 9069
8997: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8998: LD_ADDR_VAR 0 1
9002: PUSH
9003: LD_INT 2
9005: PUSH
9006: LD_INT 4
9008: PUSH
9009: LD_INT 11
9011: PUSH
9012: LD_INT 12
9014: PUSH
9015: LD_INT 15
9017: PUSH
9018: LD_INT 16
9020: PUSH
9021: LD_INT 22
9023: PUSH
9024: LD_INT 23
9026: PUSH
9027: LD_INT 26
9029: PUSH
9030: EMPTY
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: PUSH
9041: LD_INT 101
9043: PUSH
9044: LD_INT 102
9046: PUSH
9047: LD_INT 105
9049: PUSH
9050: LD_INT 106
9052: PUSH
9053: LD_INT 108
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: ST_TO_ADDR
9067: GO 11846
9069: LD_INT 3
9071: DOUBLE
9072: EQUAL
9073: IFTRUE 9077
9075: GO 9153
9077: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9078: LD_ADDR_VAR 0 1
9082: PUSH
9083: LD_INT 2
9085: PUSH
9086: LD_INT 4
9088: PUSH
9089: LD_INT 5
9091: PUSH
9092: LD_INT 11
9094: PUSH
9095: LD_INT 12
9097: PUSH
9098: LD_INT 15
9100: PUSH
9101: LD_INT 16
9103: PUSH
9104: LD_INT 22
9106: PUSH
9107: LD_INT 26
9109: PUSH
9110: LD_INT 36
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: PUSH
9125: LD_INT 101
9127: PUSH
9128: LD_INT 102
9130: PUSH
9131: LD_INT 105
9133: PUSH
9134: LD_INT 106
9136: PUSH
9137: LD_INT 108
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: ST_TO_ADDR
9151: GO 11846
9153: LD_INT 4
9155: DOUBLE
9156: EQUAL
9157: IFTRUE 9161
9159: GO 9245
9161: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9162: LD_ADDR_VAR 0 1
9166: PUSH
9167: LD_INT 2
9169: PUSH
9170: LD_INT 4
9172: PUSH
9173: LD_INT 5
9175: PUSH
9176: LD_INT 8
9178: PUSH
9179: LD_INT 11
9181: PUSH
9182: LD_INT 12
9184: PUSH
9185: LD_INT 15
9187: PUSH
9188: LD_INT 16
9190: PUSH
9191: LD_INT 22
9193: PUSH
9194: LD_INT 23
9196: PUSH
9197: LD_INT 26
9199: PUSH
9200: LD_INT 36
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: PUSH
9217: LD_INT 101
9219: PUSH
9220: LD_INT 102
9222: PUSH
9223: LD_INT 105
9225: PUSH
9226: LD_INT 106
9228: PUSH
9229: LD_INT 108
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: ST_TO_ADDR
9243: GO 11846
9245: LD_INT 5
9247: DOUBLE
9248: EQUAL
9249: IFTRUE 9253
9251: GO 9353
9253: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9254: LD_ADDR_VAR 0 1
9258: PUSH
9259: LD_INT 2
9261: PUSH
9262: LD_INT 4
9264: PUSH
9265: LD_INT 5
9267: PUSH
9268: LD_INT 6
9270: PUSH
9271: LD_INT 8
9273: PUSH
9274: LD_INT 11
9276: PUSH
9277: LD_INT 12
9279: PUSH
9280: LD_INT 15
9282: PUSH
9283: LD_INT 16
9285: PUSH
9286: LD_INT 22
9288: PUSH
9289: LD_INT 23
9291: PUSH
9292: LD_INT 25
9294: PUSH
9295: LD_INT 26
9297: PUSH
9298: LD_INT 36
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: PUSH
9317: LD_INT 101
9319: PUSH
9320: LD_INT 102
9322: PUSH
9323: LD_INT 105
9325: PUSH
9326: LD_INT 106
9328: PUSH
9329: LD_INT 108
9331: PUSH
9332: LD_INT 109
9334: PUSH
9335: LD_INT 112
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: ST_TO_ADDR
9351: GO 11846
9353: LD_INT 6
9355: DOUBLE
9356: EQUAL
9357: IFTRUE 9361
9359: GO 9481
9361: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9362: LD_ADDR_VAR 0 1
9366: PUSH
9367: LD_INT 2
9369: PUSH
9370: LD_INT 4
9372: PUSH
9373: LD_INT 5
9375: PUSH
9376: LD_INT 6
9378: PUSH
9379: LD_INT 8
9381: PUSH
9382: LD_INT 11
9384: PUSH
9385: LD_INT 12
9387: PUSH
9388: LD_INT 15
9390: PUSH
9391: LD_INT 16
9393: PUSH
9394: LD_INT 20
9396: PUSH
9397: LD_INT 21
9399: PUSH
9400: LD_INT 22
9402: PUSH
9403: LD_INT 23
9405: PUSH
9406: LD_INT 25
9408: PUSH
9409: LD_INT 26
9411: PUSH
9412: LD_INT 30
9414: PUSH
9415: LD_INT 31
9417: PUSH
9418: LD_INT 32
9420: PUSH
9421: LD_INT 36
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: PUSH
9445: LD_INT 101
9447: PUSH
9448: LD_INT 102
9450: PUSH
9451: LD_INT 105
9453: PUSH
9454: LD_INT 106
9456: PUSH
9457: LD_INT 108
9459: PUSH
9460: LD_INT 109
9462: PUSH
9463: LD_INT 112
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: ST_TO_ADDR
9479: GO 11846
9481: LD_INT 7
9483: DOUBLE
9484: EQUAL
9485: IFTRUE 9489
9487: GO 9589
9489: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9490: LD_ADDR_VAR 0 1
9494: PUSH
9495: LD_INT 2
9497: PUSH
9498: LD_INT 4
9500: PUSH
9501: LD_INT 5
9503: PUSH
9504: LD_INT 7
9506: PUSH
9507: LD_INT 11
9509: PUSH
9510: LD_INT 12
9512: PUSH
9513: LD_INT 15
9515: PUSH
9516: LD_INT 16
9518: PUSH
9519: LD_INT 20
9521: PUSH
9522: LD_INT 21
9524: PUSH
9525: LD_INT 22
9527: PUSH
9528: LD_INT 23
9530: PUSH
9531: LD_INT 25
9533: PUSH
9534: LD_INT 26
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: PUSH
9553: LD_INT 101
9555: PUSH
9556: LD_INT 102
9558: PUSH
9559: LD_INT 103
9561: PUSH
9562: LD_INT 105
9564: PUSH
9565: LD_INT 106
9567: PUSH
9568: LD_INT 108
9570: PUSH
9571: LD_INT 112
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: ST_TO_ADDR
9587: GO 11846
9589: LD_INT 8
9591: DOUBLE
9592: EQUAL
9593: IFTRUE 9597
9595: GO 9725
9597: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9598: LD_ADDR_VAR 0 1
9602: PUSH
9603: LD_INT 2
9605: PUSH
9606: LD_INT 4
9608: PUSH
9609: LD_INT 5
9611: PUSH
9612: LD_INT 6
9614: PUSH
9615: LD_INT 7
9617: PUSH
9618: LD_INT 8
9620: PUSH
9621: LD_INT 11
9623: PUSH
9624: LD_INT 12
9626: PUSH
9627: LD_INT 15
9629: PUSH
9630: LD_INT 16
9632: PUSH
9633: LD_INT 20
9635: PUSH
9636: LD_INT 21
9638: PUSH
9639: LD_INT 22
9641: PUSH
9642: LD_INT 23
9644: PUSH
9645: LD_INT 25
9647: PUSH
9648: LD_INT 26
9650: PUSH
9651: LD_INT 30
9653: PUSH
9654: LD_INT 31
9656: PUSH
9657: LD_INT 32
9659: PUSH
9660: LD_INT 36
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: PUSH
9685: LD_INT 101
9687: PUSH
9688: LD_INT 102
9690: PUSH
9691: LD_INT 103
9693: PUSH
9694: LD_INT 105
9696: PUSH
9697: LD_INT 106
9699: PUSH
9700: LD_INT 108
9702: PUSH
9703: LD_INT 109
9705: PUSH
9706: LD_INT 112
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: ST_TO_ADDR
9723: GO 11846
9725: LD_INT 9
9727: DOUBLE
9728: EQUAL
9729: IFTRUE 9733
9731: GO 9869
9733: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9734: LD_ADDR_VAR 0 1
9738: PUSH
9739: LD_INT 2
9741: PUSH
9742: LD_INT 4
9744: PUSH
9745: LD_INT 5
9747: PUSH
9748: LD_INT 6
9750: PUSH
9751: LD_INT 7
9753: PUSH
9754: LD_INT 8
9756: PUSH
9757: LD_INT 11
9759: PUSH
9760: LD_INT 12
9762: PUSH
9763: LD_INT 15
9765: PUSH
9766: LD_INT 16
9768: PUSH
9769: LD_INT 20
9771: PUSH
9772: LD_INT 21
9774: PUSH
9775: LD_INT 22
9777: PUSH
9778: LD_INT 23
9780: PUSH
9781: LD_INT 25
9783: PUSH
9784: LD_INT 26
9786: PUSH
9787: LD_INT 28
9789: PUSH
9790: LD_INT 30
9792: PUSH
9793: LD_INT 31
9795: PUSH
9796: LD_INT 32
9798: PUSH
9799: LD_INT 36
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: PUSH
9825: LD_INT 101
9827: PUSH
9828: LD_INT 102
9830: PUSH
9831: LD_INT 103
9833: PUSH
9834: LD_INT 105
9836: PUSH
9837: LD_INT 106
9839: PUSH
9840: LD_INT 108
9842: PUSH
9843: LD_INT 109
9845: PUSH
9846: LD_INT 112
9848: PUSH
9849: LD_INT 114
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: ST_TO_ADDR
9867: GO 11846
9869: LD_INT 10
9871: DOUBLE
9872: EQUAL
9873: IFTRUE 9877
9875: GO 10061
9877: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9878: LD_ADDR_VAR 0 1
9882: PUSH
9883: LD_INT 2
9885: PUSH
9886: LD_INT 4
9888: PUSH
9889: LD_INT 5
9891: PUSH
9892: LD_INT 6
9894: PUSH
9895: LD_INT 7
9897: PUSH
9898: LD_INT 8
9900: PUSH
9901: LD_INT 9
9903: PUSH
9904: LD_INT 10
9906: PUSH
9907: LD_INT 11
9909: PUSH
9910: LD_INT 12
9912: PUSH
9913: LD_INT 13
9915: PUSH
9916: LD_INT 14
9918: PUSH
9919: LD_INT 15
9921: PUSH
9922: LD_INT 16
9924: PUSH
9925: LD_INT 17
9927: PUSH
9928: LD_INT 18
9930: PUSH
9931: LD_INT 19
9933: PUSH
9934: LD_INT 20
9936: PUSH
9937: LD_INT 21
9939: PUSH
9940: LD_INT 22
9942: PUSH
9943: LD_INT 23
9945: PUSH
9946: LD_INT 24
9948: PUSH
9949: LD_INT 25
9951: PUSH
9952: LD_INT 26
9954: PUSH
9955: LD_INT 28
9957: PUSH
9958: LD_INT 30
9960: PUSH
9961: LD_INT 31
9963: PUSH
9964: LD_INT 32
9966: PUSH
9967: LD_INT 36
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: PUSH
10001: LD_INT 101
10003: PUSH
10004: LD_INT 102
10006: PUSH
10007: LD_INT 103
10009: PUSH
10010: LD_INT 104
10012: PUSH
10013: LD_INT 105
10015: PUSH
10016: LD_INT 106
10018: PUSH
10019: LD_INT 107
10021: PUSH
10022: LD_INT 108
10024: PUSH
10025: LD_INT 109
10027: PUSH
10028: LD_INT 110
10030: PUSH
10031: LD_INT 111
10033: PUSH
10034: LD_INT 112
10036: PUSH
10037: LD_INT 114
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: ST_TO_ADDR
10059: GO 11846
10061: LD_INT 11
10063: DOUBLE
10064: EQUAL
10065: IFTRUE 10069
10067: GO 10261
10069: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10070: LD_ADDR_VAR 0 1
10074: PUSH
10075: LD_INT 2
10077: PUSH
10078: LD_INT 3
10080: PUSH
10081: LD_INT 4
10083: PUSH
10084: LD_INT 5
10086: PUSH
10087: LD_INT 6
10089: PUSH
10090: LD_INT 7
10092: PUSH
10093: LD_INT 8
10095: PUSH
10096: LD_INT 9
10098: PUSH
10099: LD_INT 10
10101: PUSH
10102: LD_INT 11
10104: PUSH
10105: LD_INT 12
10107: PUSH
10108: LD_INT 13
10110: PUSH
10111: LD_INT 14
10113: PUSH
10114: LD_INT 15
10116: PUSH
10117: LD_INT 16
10119: PUSH
10120: LD_INT 17
10122: PUSH
10123: LD_INT 18
10125: PUSH
10126: LD_INT 19
10128: PUSH
10129: LD_INT 20
10131: PUSH
10132: LD_INT 21
10134: PUSH
10135: LD_INT 22
10137: PUSH
10138: LD_INT 23
10140: PUSH
10141: LD_INT 24
10143: PUSH
10144: LD_INT 25
10146: PUSH
10147: LD_INT 26
10149: PUSH
10150: LD_INT 28
10152: PUSH
10153: LD_INT 30
10155: PUSH
10156: LD_INT 31
10158: PUSH
10159: LD_INT 32
10161: PUSH
10162: LD_INT 34
10164: PUSH
10165: LD_INT 36
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: PUSH
10201: LD_INT 101
10203: PUSH
10204: LD_INT 102
10206: PUSH
10207: LD_INT 103
10209: PUSH
10210: LD_INT 104
10212: PUSH
10213: LD_INT 105
10215: PUSH
10216: LD_INT 106
10218: PUSH
10219: LD_INT 107
10221: PUSH
10222: LD_INT 108
10224: PUSH
10225: LD_INT 109
10227: PUSH
10228: LD_INT 110
10230: PUSH
10231: LD_INT 111
10233: PUSH
10234: LD_INT 112
10236: PUSH
10237: LD_INT 114
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: ST_TO_ADDR
10259: GO 11846
10261: LD_INT 12
10263: DOUBLE
10264: EQUAL
10265: IFTRUE 10269
10267: GO 10477
10269: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10270: LD_ADDR_VAR 0 1
10274: PUSH
10275: LD_INT 1
10277: PUSH
10278: LD_INT 2
10280: PUSH
10281: LD_INT 3
10283: PUSH
10284: LD_INT 4
10286: PUSH
10287: LD_INT 5
10289: PUSH
10290: LD_INT 6
10292: PUSH
10293: LD_INT 7
10295: PUSH
10296: LD_INT 8
10298: PUSH
10299: LD_INT 9
10301: PUSH
10302: LD_INT 10
10304: PUSH
10305: LD_INT 11
10307: PUSH
10308: LD_INT 12
10310: PUSH
10311: LD_INT 13
10313: PUSH
10314: LD_INT 14
10316: PUSH
10317: LD_INT 15
10319: PUSH
10320: LD_INT 16
10322: PUSH
10323: LD_INT 17
10325: PUSH
10326: LD_INT 18
10328: PUSH
10329: LD_INT 19
10331: PUSH
10332: LD_INT 20
10334: PUSH
10335: LD_INT 21
10337: PUSH
10338: LD_INT 22
10340: PUSH
10341: LD_INT 23
10343: PUSH
10344: LD_INT 24
10346: PUSH
10347: LD_INT 25
10349: PUSH
10350: LD_INT 26
10352: PUSH
10353: LD_INT 27
10355: PUSH
10356: LD_INT 28
10358: PUSH
10359: LD_INT 30
10361: PUSH
10362: LD_INT 31
10364: PUSH
10365: LD_INT 32
10367: PUSH
10368: LD_INT 33
10370: PUSH
10371: LD_INT 34
10373: PUSH
10374: LD_INT 36
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: PUSH
10413: LD_INT 101
10415: PUSH
10416: LD_INT 102
10418: PUSH
10419: LD_INT 103
10421: PUSH
10422: LD_INT 104
10424: PUSH
10425: LD_INT 105
10427: PUSH
10428: LD_INT 106
10430: PUSH
10431: LD_INT 107
10433: PUSH
10434: LD_INT 108
10436: PUSH
10437: LD_INT 109
10439: PUSH
10440: LD_INT 110
10442: PUSH
10443: LD_INT 111
10445: PUSH
10446: LD_INT 112
10448: PUSH
10449: LD_INT 113
10451: PUSH
10452: LD_INT 114
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: ST_TO_ADDR
10475: GO 11846
10477: LD_INT 13
10479: DOUBLE
10480: EQUAL
10481: IFTRUE 10485
10483: GO 10681
10485: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10486: LD_ADDR_VAR 0 1
10490: PUSH
10491: LD_INT 1
10493: PUSH
10494: LD_INT 2
10496: PUSH
10497: LD_INT 3
10499: PUSH
10500: LD_INT 4
10502: PUSH
10503: LD_INT 5
10505: PUSH
10506: LD_INT 8
10508: PUSH
10509: LD_INT 9
10511: PUSH
10512: LD_INT 10
10514: PUSH
10515: LD_INT 11
10517: PUSH
10518: LD_INT 12
10520: PUSH
10521: LD_INT 14
10523: PUSH
10524: LD_INT 15
10526: PUSH
10527: LD_INT 16
10529: PUSH
10530: LD_INT 17
10532: PUSH
10533: LD_INT 18
10535: PUSH
10536: LD_INT 19
10538: PUSH
10539: LD_INT 20
10541: PUSH
10542: LD_INT 21
10544: PUSH
10545: LD_INT 22
10547: PUSH
10548: LD_INT 23
10550: PUSH
10551: LD_INT 24
10553: PUSH
10554: LD_INT 25
10556: PUSH
10557: LD_INT 26
10559: PUSH
10560: LD_INT 27
10562: PUSH
10563: LD_INT 28
10565: PUSH
10566: LD_INT 30
10568: PUSH
10569: LD_INT 31
10571: PUSH
10572: LD_INT 32
10574: PUSH
10575: LD_INT 33
10577: PUSH
10578: LD_INT 34
10580: PUSH
10581: LD_INT 36
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 101
10619: PUSH
10620: LD_INT 102
10622: PUSH
10623: LD_INT 103
10625: PUSH
10626: LD_INT 104
10628: PUSH
10629: LD_INT 105
10631: PUSH
10632: LD_INT 106
10634: PUSH
10635: LD_INT 107
10637: PUSH
10638: LD_INT 108
10640: PUSH
10641: LD_INT 109
10643: PUSH
10644: LD_INT 110
10646: PUSH
10647: LD_INT 111
10649: PUSH
10650: LD_INT 112
10652: PUSH
10653: LD_INT 113
10655: PUSH
10656: LD_INT 114
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: ST_TO_ADDR
10679: GO 11846
10681: LD_INT 14
10683: DOUBLE
10684: EQUAL
10685: IFTRUE 10689
10687: GO 10901
10689: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10690: LD_ADDR_VAR 0 1
10694: PUSH
10695: LD_INT 1
10697: PUSH
10698: LD_INT 2
10700: PUSH
10701: LD_INT 3
10703: PUSH
10704: LD_INT 4
10706: PUSH
10707: LD_INT 5
10709: PUSH
10710: LD_INT 6
10712: PUSH
10713: LD_INT 7
10715: PUSH
10716: LD_INT 8
10718: PUSH
10719: LD_INT 9
10721: PUSH
10722: LD_INT 10
10724: PUSH
10725: LD_INT 11
10727: PUSH
10728: LD_INT 12
10730: PUSH
10731: LD_INT 13
10733: PUSH
10734: LD_INT 14
10736: PUSH
10737: LD_INT 15
10739: PUSH
10740: LD_INT 16
10742: PUSH
10743: LD_INT 17
10745: PUSH
10746: LD_INT 18
10748: PUSH
10749: LD_INT 19
10751: PUSH
10752: LD_INT 20
10754: PUSH
10755: LD_INT 21
10757: PUSH
10758: LD_INT 22
10760: PUSH
10761: LD_INT 23
10763: PUSH
10764: LD_INT 24
10766: PUSH
10767: LD_INT 25
10769: PUSH
10770: LD_INT 26
10772: PUSH
10773: LD_INT 27
10775: PUSH
10776: LD_INT 28
10778: PUSH
10779: LD_INT 29
10781: PUSH
10782: LD_INT 30
10784: PUSH
10785: LD_INT 31
10787: PUSH
10788: LD_INT 32
10790: PUSH
10791: LD_INT 33
10793: PUSH
10794: LD_INT 34
10796: PUSH
10797: LD_INT 36
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 101
10839: PUSH
10840: LD_INT 102
10842: PUSH
10843: LD_INT 103
10845: PUSH
10846: LD_INT 104
10848: PUSH
10849: LD_INT 105
10851: PUSH
10852: LD_INT 106
10854: PUSH
10855: LD_INT 107
10857: PUSH
10858: LD_INT 108
10860: PUSH
10861: LD_INT 109
10863: PUSH
10864: LD_INT 110
10866: PUSH
10867: LD_INT 111
10869: PUSH
10870: LD_INT 112
10872: PUSH
10873: LD_INT 113
10875: PUSH
10876: LD_INT 114
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: ST_TO_ADDR
10899: GO 11846
10901: LD_INT 15
10903: DOUBLE
10904: EQUAL
10905: IFTRUE 10909
10907: GO 11121
10909: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10910: LD_ADDR_VAR 0 1
10914: PUSH
10915: LD_INT 1
10917: PUSH
10918: LD_INT 2
10920: PUSH
10921: LD_INT 3
10923: PUSH
10924: LD_INT 4
10926: PUSH
10927: LD_INT 5
10929: PUSH
10930: LD_INT 6
10932: PUSH
10933: LD_INT 7
10935: PUSH
10936: LD_INT 8
10938: PUSH
10939: LD_INT 9
10941: PUSH
10942: LD_INT 10
10944: PUSH
10945: LD_INT 11
10947: PUSH
10948: LD_INT 12
10950: PUSH
10951: LD_INT 13
10953: PUSH
10954: LD_INT 14
10956: PUSH
10957: LD_INT 15
10959: PUSH
10960: LD_INT 16
10962: PUSH
10963: LD_INT 17
10965: PUSH
10966: LD_INT 18
10968: PUSH
10969: LD_INT 19
10971: PUSH
10972: LD_INT 20
10974: PUSH
10975: LD_INT 21
10977: PUSH
10978: LD_INT 22
10980: PUSH
10981: LD_INT 23
10983: PUSH
10984: LD_INT 24
10986: PUSH
10987: LD_INT 25
10989: PUSH
10990: LD_INT 26
10992: PUSH
10993: LD_INT 27
10995: PUSH
10996: LD_INT 28
10998: PUSH
10999: LD_INT 29
11001: PUSH
11002: LD_INT 30
11004: PUSH
11005: LD_INT 31
11007: PUSH
11008: LD_INT 32
11010: PUSH
11011: LD_INT 33
11013: PUSH
11014: LD_INT 34
11016: PUSH
11017: LD_INT 36
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 101
11059: PUSH
11060: LD_INT 102
11062: PUSH
11063: LD_INT 103
11065: PUSH
11066: LD_INT 104
11068: PUSH
11069: LD_INT 105
11071: PUSH
11072: LD_INT 106
11074: PUSH
11075: LD_INT 107
11077: PUSH
11078: LD_INT 108
11080: PUSH
11081: LD_INT 109
11083: PUSH
11084: LD_INT 110
11086: PUSH
11087: LD_INT 111
11089: PUSH
11090: LD_INT 112
11092: PUSH
11093: LD_INT 113
11095: PUSH
11096: LD_INT 114
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: ST_TO_ADDR
11119: GO 11846
11121: LD_INT 16
11123: DOUBLE
11124: EQUAL
11125: IFTRUE 11129
11127: GO 11253
11129: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11130: LD_ADDR_VAR 0 1
11134: PUSH
11135: LD_INT 2
11137: PUSH
11138: LD_INT 4
11140: PUSH
11141: LD_INT 5
11143: PUSH
11144: LD_INT 7
11146: PUSH
11147: LD_INT 11
11149: PUSH
11150: LD_INT 12
11152: PUSH
11153: LD_INT 15
11155: PUSH
11156: LD_INT 16
11158: PUSH
11159: LD_INT 20
11161: PUSH
11162: LD_INT 21
11164: PUSH
11165: LD_INT 22
11167: PUSH
11168: LD_INT 23
11170: PUSH
11171: LD_INT 25
11173: PUSH
11174: LD_INT 26
11176: PUSH
11177: LD_INT 30
11179: PUSH
11180: LD_INT 31
11182: PUSH
11183: LD_INT 32
11185: PUSH
11186: LD_INT 33
11188: PUSH
11189: LD_INT 34
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 101
11215: PUSH
11216: LD_INT 102
11218: PUSH
11219: LD_INT 103
11221: PUSH
11222: LD_INT 106
11224: PUSH
11225: LD_INT 108
11227: PUSH
11228: LD_INT 112
11230: PUSH
11231: LD_INT 113
11233: PUSH
11234: LD_INT 114
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: ST_TO_ADDR
11251: GO 11846
11253: LD_INT 17
11255: DOUBLE
11256: EQUAL
11257: IFTRUE 11261
11259: GO 11473
11261: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11262: LD_ADDR_VAR 0 1
11266: PUSH
11267: LD_INT 1
11269: PUSH
11270: LD_INT 2
11272: PUSH
11273: LD_INT 3
11275: PUSH
11276: LD_INT 4
11278: PUSH
11279: LD_INT 5
11281: PUSH
11282: LD_INT 6
11284: PUSH
11285: LD_INT 7
11287: PUSH
11288: LD_INT 8
11290: PUSH
11291: LD_INT 9
11293: PUSH
11294: LD_INT 10
11296: PUSH
11297: LD_INT 11
11299: PUSH
11300: LD_INT 12
11302: PUSH
11303: LD_INT 13
11305: PUSH
11306: LD_INT 14
11308: PUSH
11309: LD_INT 15
11311: PUSH
11312: LD_INT 16
11314: PUSH
11315: LD_INT 17
11317: PUSH
11318: LD_INT 18
11320: PUSH
11321: LD_INT 19
11323: PUSH
11324: LD_INT 20
11326: PUSH
11327: LD_INT 21
11329: PUSH
11330: LD_INT 22
11332: PUSH
11333: LD_INT 23
11335: PUSH
11336: LD_INT 24
11338: PUSH
11339: LD_INT 25
11341: PUSH
11342: LD_INT 26
11344: PUSH
11345: LD_INT 27
11347: PUSH
11348: LD_INT 28
11350: PUSH
11351: LD_INT 29
11353: PUSH
11354: LD_INT 30
11356: PUSH
11357: LD_INT 31
11359: PUSH
11360: LD_INT 32
11362: PUSH
11363: LD_INT 33
11365: PUSH
11366: LD_INT 34
11368: PUSH
11369: LD_INT 36
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: PUSH
11409: LD_INT 101
11411: PUSH
11412: LD_INT 102
11414: PUSH
11415: LD_INT 103
11417: PUSH
11418: LD_INT 104
11420: PUSH
11421: LD_INT 105
11423: PUSH
11424: LD_INT 106
11426: PUSH
11427: LD_INT 107
11429: PUSH
11430: LD_INT 108
11432: PUSH
11433: LD_INT 109
11435: PUSH
11436: LD_INT 110
11438: PUSH
11439: LD_INT 111
11441: PUSH
11442: LD_INT 112
11444: PUSH
11445: LD_INT 113
11447: PUSH
11448: LD_INT 114
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: ST_TO_ADDR
11471: GO 11846
11473: LD_INT 18
11475: DOUBLE
11476: EQUAL
11477: IFTRUE 11481
11479: GO 11617
11481: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11482: LD_ADDR_VAR 0 1
11486: PUSH
11487: LD_INT 2
11489: PUSH
11490: LD_INT 4
11492: PUSH
11493: LD_INT 5
11495: PUSH
11496: LD_INT 7
11498: PUSH
11499: LD_INT 11
11501: PUSH
11502: LD_INT 12
11504: PUSH
11505: LD_INT 15
11507: PUSH
11508: LD_INT 16
11510: PUSH
11511: LD_INT 20
11513: PUSH
11514: LD_INT 21
11516: PUSH
11517: LD_INT 22
11519: PUSH
11520: LD_INT 23
11522: PUSH
11523: LD_INT 25
11525: PUSH
11526: LD_INT 26
11528: PUSH
11529: LD_INT 30
11531: PUSH
11532: LD_INT 31
11534: PUSH
11535: LD_INT 32
11537: PUSH
11538: LD_INT 33
11540: PUSH
11541: LD_INT 34
11543: PUSH
11544: LD_INT 35
11546: PUSH
11547: LD_INT 36
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 101
11575: PUSH
11576: LD_INT 102
11578: PUSH
11579: LD_INT 103
11581: PUSH
11582: LD_INT 106
11584: PUSH
11585: LD_INT 108
11587: PUSH
11588: LD_INT 112
11590: PUSH
11591: LD_INT 113
11593: PUSH
11594: LD_INT 114
11596: PUSH
11597: LD_INT 115
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: ST_TO_ADDR
11615: GO 11846
11617: LD_INT 19
11619: DOUBLE
11620: EQUAL
11621: IFTRUE 11625
11623: GO 11845
11625: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11626: LD_ADDR_VAR 0 1
11630: PUSH
11631: LD_INT 1
11633: PUSH
11634: LD_INT 2
11636: PUSH
11637: LD_INT 3
11639: PUSH
11640: LD_INT 4
11642: PUSH
11643: LD_INT 5
11645: PUSH
11646: LD_INT 6
11648: PUSH
11649: LD_INT 7
11651: PUSH
11652: LD_INT 8
11654: PUSH
11655: LD_INT 9
11657: PUSH
11658: LD_INT 10
11660: PUSH
11661: LD_INT 11
11663: PUSH
11664: LD_INT 12
11666: PUSH
11667: LD_INT 13
11669: PUSH
11670: LD_INT 14
11672: PUSH
11673: LD_INT 15
11675: PUSH
11676: LD_INT 16
11678: PUSH
11679: LD_INT 17
11681: PUSH
11682: LD_INT 18
11684: PUSH
11685: LD_INT 19
11687: PUSH
11688: LD_INT 20
11690: PUSH
11691: LD_INT 21
11693: PUSH
11694: LD_INT 22
11696: PUSH
11697: LD_INT 23
11699: PUSH
11700: LD_INT 24
11702: PUSH
11703: LD_INT 25
11705: PUSH
11706: LD_INT 26
11708: PUSH
11709: LD_INT 27
11711: PUSH
11712: LD_INT 28
11714: PUSH
11715: LD_INT 29
11717: PUSH
11718: LD_INT 30
11720: PUSH
11721: LD_INT 31
11723: PUSH
11724: LD_INT 32
11726: PUSH
11727: LD_INT 33
11729: PUSH
11730: LD_INT 34
11732: PUSH
11733: LD_INT 35
11735: PUSH
11736: LD_INT 36
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 101
11779: PUSH
11780: LD_INT 102
11782: PUSH
11783: LD_INT 103
11785: PUSH
11786: LD_INT 104
11788: PUSH
11789: LD_INT 105
11791: PUSH
11792: LD_INT 106
11794: PUSH
11795: LD_INT 107
11797: PUSH
11798: LD_INT 108
11800: PUSH
11801: LD_INT 109
11803: PUSH
11804: LD_INT 110
11806: PUSH
11807: LD_INT 111
11809: PUSH
11810: LD_INT 112
11812: PUSH
11813: LD_INT 113
11815: PUSH
11816: LD_INT 114
11818: PUSH
11819: LD_INT 115
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: ST_TO_ADDR
11843: GO 11846
11845: POP
// end else
11846: GO 12065
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11848: LD_ADDR_VAR 0 1
11852: PUSH
11853: LD_INT 1
11855: PUSH
11856: LD_INT 2
11858: PUSH
11859: LD_INT 3
11861: PUSH
11862: LD_INT 4
11864: PUSH
11865: LD_INT 5
11867: PUSH
11868: LD_INT 6
11870: PUSH
11871: LD_INT 7
11873: PUSH
11874: LD_INT 8
11876: PUSH
11877: LD_INT 9
11879: PUSH
11880: LD_INT 10
11882: PUSH
11883: LD_INT 11
11885: PUSH
11886: LD_INT 12
11888: PUSH
11889: LD_INT 13
11891: PUSH
11892: LD_INT 14
11894: PUSH
11895: LD_INT 15
11897: PUSH
11898: LD_INT 16
11900: PUSH
11901: LD_INT 17
11903: PUSH
11904: LD_INT 18
11906: PUSH
11907: LD_INT 19
11909: PUSH
11910: LD_INT 20
11912: PUSH
11913: LD_INT 21
11915: PUSH
11916: LD_INT 22
11918: PUSH
11919: LD_INT 23
11921: PUSH
11922: LD_INT 24
11924: PUSH
11925: LD_INT 25
11927: PUSH
11928: LD_INT 26
11930: PUSH
11931: LD_INT 27
11933: PUSH
11934: LD_INT 28
11936: PUSH
11937: LD_INT 29
11939: PUSH
11940: LD_INT 30
11942: PUSH
11943: LD_INT 31
11945: PUSH
11946: LD_INT 32
11948: PUSH
11949: LD_INT 33
11951: PUSH
11952: LD_INT 34
11954: PUSH
11955: LD_INT 35
11957: PUSH
11958: LD_INT 36
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 101
12001: PUSH
12002: LD_INT 102
12004: PUSH
12005: LD_INT 103
12007: PUSH
12008: LD_INT 104
12010: PUSH
12011: LD_INT 105
12013: PUSH
12014: LD_INT 106
12016: PUSH
12017: LD_INT 107
12019: PUSH
12020: LD_INT 108
12022: PUSH
12023: LD_INT 109
12025: PUSH
12026: LD_INT 110
12028: PUSH
12029: LD_INT 111
12031: PUSH
12032: LD_INT 112
12034: PUSH
12035: LD_INT 113
12037: PUSH
12038: LD_INT 114
12040: PUSH
12041: LD_INT 115
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: ST_TO_ADDR
// if result then
12065: LD_VAR 0 1
12069: IFFALSE 12358
// begin normal :=  ;
12071: LD_ADDR_VAR 0 3
12075: PUSH
12076: LD_STRING 
12078: ST_TO_ADDR
// hardcore :=  ;
12079: LD_ADDR_VAR 0 4
12083: PUSH
12084: LD_STRING 
12086: ST_TO_ADDR
// for i = 1 to normalCounter do
12087: LD_ADDR_VAR 0 5
12091: PUSH
12092: DOUBLE
12093: LD_INT 1
12095: DEC
12096: ST_TO_ADDR
12097: LD_EXP 43
12101: PUSH
12102: FOR_TO
12103: IFFALSE 12204
// begin tmp := 0 ;
12105: LD_ADDR_VAR 0 2
12109: PUSH
12110: LD_STRING 0
12112: ST_TO_ADDR
// if result [ 1 ] then
12113: LD_VAR 0 1
12117: PUSH
12118: LD_INT 1
12120: ARRAY
12121: IFFALSE 12186
// if result [ 1 ] [ 1 ] = i then
12123: LD_VAR 0 1
12127: PUSH
12128: LD_INT 1
12130: ARRAY
12131: PUSH
12132: LD_INT 1
12134: ARRAY
12135: PUSH
12136: LD_VAR 0 5
12140: EQUAL
12141: IFFALSE 12186
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12143: LD_ADDR_VAR 0 1
12147: PUSH
12148: LD_VAR 0 1
12152: PPUSH
12153: LD_INT 1
12155: PPUSH
12156: LD_VAR 0 1
12160: PUSH
12161: LD_INT 1
12163: ARRAY
12164: PPUSH
12165: LD_INT 1
12167: PPUSH
12168: CALL_OW 3
12172: PPUSH
12173: CALL_OW 1
12177: ST_TO_ADDR
// tmp := 1 ;
12178: LD_ADDR_VAR 0 2
12182: PUSH
12183: LD_STRING 1
12185: ST_TO_ADDR
// end ; normal := normal & tmp ;
12186: LD_ADDR_VAR 0 3
12190: PUSH
12191: LD_VAR 0 3
12195: PUSH
12196: LD_VAR 0 2
12200: STR
12201: ST_TO_ADDR
// end ;
12202: GO 12102
12204: POP
12205: POP
// for i = 1 to hardcoreCounter do
12206: LD_ADDR_VAR 0 5
12210: PUSH
12211: DOUBLE
12212: LD_INT 1
12214: DEC
12215: ST_TO_ADDR
12216: LD_EXP 44
12220: PUSH
12221: FOR_TO
12222: IFFALSE 12327
// begin tmp := 0 ;
12224: LD_ADDR_VAR 0 2
12228: PUSH
12229: LD_STRING 0
12231: ST_TO_ADDR
// if result [ 2 ] then
12232: LD_VAR 0 1
12236: PUSH
12237: LD_INT 2
12239: ARRAY
12240: IFFALSE 12309
// if result [ 2 ] [ 1 ] = 100 + i then
12242: LD_VAR 0 1
12246: PUSH
12247: LD_INT 2
12249: ARRAY
12250: PUSH
12251: LD_INT 1
12253: ARRAY
12254: PUSH
12255: LD_INT 100
12257: PUSH
12258: LD_VAR 0 5
12262: PLUS
12263: EQUAL
12264: IFFALSE 12309
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12266: LD_ADDR_VAR 0 1
12270: PUSH
12271: LD_VAR 0 1
12275: PPUSH
12276: LD_INT 2
12278: PPUSH
12279: LD_VAR 0 1
12283: PUSH
12284: LD_INT 2
12286: ARRAY
12287: PPUSH
12288: LD_INT 1
12290: PPUSH
12291: CALL_OW 3
12295: PPUSH
12296: CALL_OW 1
12300: ST_TO_ADDR
// tmp := 1 ;
12301: LD_ADDR_VAR 0 2
12305: PUSH
12306: LD_STRING 1
12308: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12309: LD_ADDR_VAR 0 4
12313: PUSH
12314: LD_VAR 0 4
12318: PUSH
12319: LD_VAR 0 2
12323: STR
12324: ST_TO_ADDR
// end ;
12325: GO 12221
12327: POP
12328: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12329: LD_STRING getStreamItemsFromMission("
12331: PUSH
12332: LD_VAR 0 3
12336: STR
12337: PUSH
12338: LD_STRING ","
12340: STR
12341: PUSH
12342: LD_VAR 0 4
12346: STR
12347: PUSH
12348: LD_STRING ")
12350: STR
12351: PPUSH
12352: CALL_OW 559
// end else
12356: GO 12365
// ToLua ( getStreamItemsFromMission("","") ) ;
12358: LD_STRING getStreamItemsFromMission("","")
12360: PPUSH
12361: CALL_OW 559
// end ;
12365: LD_VAR 0 1
12369: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12370: LD_EXP 42
12374: PUSH
12375: LD_EXP 47
12379: AND
12380: IFFALSE 12504
12382: GO 12384
12384: DISABLE
12385: LD_INT 0
12387: PPUSH
12388: PPUSH
// begin enable ;
12389: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12390: LD_ADDR_VAR 0 2
12394: PUSH
12395: LD_INT 22
12397: PUSH
12398: LD_OWVAR 2
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: LD_INT 2
12409: PUSH
12410: LD_INT 34
12412: PUSH
12413: LD_INT 7
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 34
12422: PUSH
12423: LD_INT 45
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: LD_INT 34
12432: PUSH
12433: LD_INT 28
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 34
12442: PUSH
12443: LD_INT 47
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PPUSH
12461: CALL_OW 69
12465: ST_TO_ADDR
// if not tmp then
12466: LD_VAR 0 2
12470: NOT
12471: IFFALSE 12475
// exit ;
12473: GO 12504
// for i in tmp do
12475: LD_ADDR_VAR 0 1
12479: PUSH
12480: LD_VAR 0 2
12484: PUSH
12485: FOR_IN
12486: IFFALSE 12502
// begin SetLives ( i , 0 ) ;
12488: LD_VAR 0 1
12492: PPUSH
12493: LD_INT 0
12495: PPUSH
12496: CALL_OW 234
// end ;
12500: GO 12485
12502: POP
12503: POP
// end ;
12504: PPOPN 2
12506: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12507: LD_EXP 42
12511: PUSH
12512: LD_EXP 48
12516: AND
12517: IFFALSE 12601
12519: GO 12521
12521: DISABLE
12522: LD_INT 0
12524: PPUSH
12525: PPUSH
// begin enable ;
12526: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12527: LD_ADDR_VAR 0 2
12531: PUSH
12532: LD_INT 22
12534: PUSH
12535: LD_OWVAR 2
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: LD_INT 32
12546: PUSH
12547: LD_INT 3
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PPUSH
12558: CALL_OW 69
12562: ST_TO_ADDR
// if not tmp then
12563: LD_VAR 0 2
12567: NOT
12568: IFFALSE 12572
// exit ;
12570: GO 12601
// for i in tmp do
12572: LD_ADDR_VAR 0 1
12576: PUSH
12577: LD_VAR 0 2
12581: PUSH
12582: FOR_IN
12583: IFFALSE 12599
// begin SetLives ( i , 0 ) ;
12585: LD_VAR 0 1
12589: PPUSH
12590: LD_INT 0
12592: PPUSH
12593: CALL_OW 234
// end ;
12597: GO 12582
12599: POP
12600: POP
// end ;
12601: PPOPN 2
12603: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12604: LD_EXP 42
12608: PUSH
12609: LD_EXP 45
12613: AND
12614: IFFALSE 12707
12616: GO 12618
12618: DISABLE
12619: LD_INT 0
12621: PPUSH
// begin enable ;
12622: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12623: LD_ADDR_VAR 0 1
12627: PUSH
12628: LD_INT 22
12630: PUSH
12631: LD_OWVAR 2
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 2
12642: PUSH
12643: LD_INT 25
12645: PUSH
12646: LD_INT 5
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PUSH
12653: LD_INT 25
12655: PUSH
12656: LD_INT 9
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PUSH
12663: LD_INT 25
12665: PUSH
12666: LD_INT 8
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PPUSH
12683: CALL_OW 69
12687: PUSH
12688: FOR_IN
12689: IFFALSE 12705
// begin SetClass ( i , 1 ) ;
12691: LD_VAR 0 1
12695: PPUSH
12696: LD_INT 1
12698: PPUSH
12699: CALL_OW 336
// end ;
12703: GO 12688
12705: POP
12706: POP
// end ;
12707: PPOPN 1
12709: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12710: LD_EXP 42
12714: PUSH
12715: LD_EXP 46
12719: AND
12720: PUSH
12721: LD_OWVAR 65
12725: PUSH
12726: LD_INT 7
12728: LESS
12729: AND
12730: IFFALSE 12744
12732: GO 12734
12734: DISABLE
// begin enable ;
12735: ENABLE
// game_speed := 7 ;
12736: LD_ADDR_OWVAR 65
12740: PUSH
12741: LD_INT 7
12743: ST_TO_ADDR
// end ;
12744: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12745: LD_EXP 42
12749: PUSH
12750: LD_EXP 49
12754: AND
12755: IFFALSE 12957
12757: GO 12759
12759: DISABLE
12760: LD_INT 0
12762: PPUSH
12763: PPUSH
12764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12765: LD_ADDR_VAR 0 3
12769: PUSH
12770: LD_INT 81
12772: PUSH
12773: LD_OWVAR 2
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: LD_INT 21
12784: PUSH
12785: LD_INT 1
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PPUSH
12796: CALL_OW 69
12800: ST_TO_ADDR
// if not tmp then
12801: LD_VAR 0 3
12805: NOT
12806: IFFALSE 12810
// exit ;
12808: GO 12957
// if tmp > 5 then
12810: LD_VAR 0 3
12814: PUSH
12815: LD_INT 5
12817: GREATER
12818: IFFALSE 12830
// k := 5 else
12820: LD_ADDR_VAR 0 2
12824: PUSH
12825: LD_INT 5
12827: ST_TO_ADDR
12828: GO 12840
// k := tmp ;
12830: LD_ADDR_VAR 0 2
12834: PUSH
12835: LD_VAR 0 3
12839: ST_TO_ADDR
// for i := 1 to k do
12840: LD_ADDR_VAR 0 1
12844: PUSH
12845: DOUBLE
12846: LD_INT 1
12848: DEC
12849: ST_TO_ADDR
12850: LD_VAR 0 2
12854: PUSH
12855: FOR_TO
12856: IFFALSE 12955
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12858: LD_VAR 0 3
12862: PUSH
12863: LD_VAR 0 1
12867: ARRAY
12868: PPUSH
12869: LD_VAR 0 1
12873: PUSH
12874: LD_INT 4
12876: MOD
12877: PUSH
12878: LD_INT 1
12880: PLUS
12881: PPUSH
12882: CALL_OW 259
12886: PUSH
12887: LD_INT 10
12889: LESS
12890: IFFALSE 12953
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12892: LD_VAR 0 3
12896: PUSH
12897: LD_VAR 0 1
12901: ARRAY
12902: PPUSH
12903: LD_VAR 0 1
12907: PUSH
12908: LD_INT 4
12910: MOD
12911: PUSH
12912: LD_INT 1
12914: PLUS
12915: PPUSH
12916: LD_VAR 0 3
12920: PUSH
12921: LD_VAR 0 1
12925: ARRAY
12926: PPUSH
12927: LD_VAR 0 1
12931: PUSH
12932: LD_INT 4
12934: MOD
12935: PUSH
12936: LD_INT 1
12938: PLUS
12939: PPUSH
12940: CALL_OW 259
12944: PUSH
12945: LD_INT 1
12947: PLUS
12948: PPUSH
12949: CALL_OW 237
12953: GO 12855
12955: POP
12956: POP
// end ;
12957: PPOPN 3
12959: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12960: LD_EXP 42
12964: PUSH
12965: LD_EXP 50
12969: AND
12970: IFFALSE 12990
12972: GO 12974
12974: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12975: LD_INT 4
12977: PPUSH
12978: LD_OWVAR 2
12982: PPUSH
12983: LD_INT 0
12985: PPUSH
12986: CALL_OW 324
12990: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12991: LD_EXP 42
12995: PUSH
12996: LD_EXP 79
13000: AND
13001: IFFALSE 13021
13003: GO 13005
13005: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13006: LD_INT 19
13008: PPUSH
13009: LD_OWVAR 2
13013: PPUSH
13014: LD_INT 0
13016: PPUSH
13017: CALL_OW 324
13021: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13022: LD_EXP 42
13026: PUSH
13027: LD_EXP 51
13031: AND
13032: IFFALSE 13134
13034: GO 13036
13036: DISABLE
13037: LD_INT 0
13039: PPUSH
13040: PPUSH
// begin enable ;
13041: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13042: LD_ADDR_VAR 0 2
13046: PUSH
13047: LD_INT 22
13049: PUSH
13050: LD_OWVAR 2
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PUSH
13059: LD_INT 2
13061: PUSH
13062: LD_INT 34
13064: PUSH
13065: LD_INT 11
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 34
13074: PUSH
13075: LD_INT 30
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PPUSH
13091: CALL_OW 69
13095: ST_TO_ADDR
// if not tmp then
13096: LD_VAR 0 2
13100: NOT
13101: IFFALSE 13105
// exit ;
13103: GO 13134
// for i in tmp do
13105: LD_ADDR_VAR 0 1
13109: PUSH
13110: LD_VAR 0 2
13114: PUSH
13115: FOR_IN
13116: IFFALSE 13132
// begin SetLives ( i , 0 ) ;
13118: LD_VAR 0 1
13122: PPUSH
13123: LD_INT 0
13125: PPUSH
13126: CALL_OW 234
// end ;
13130: GO 13115
13132: POP
13133: POP
// end ;
13134: PPOPN 2
13136: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13137: LD_EXP 42
13141: PUSH
13142: LD_EXP 52
13146: AND
13147: IFFALSE 13167
13149: GO 13151
13151: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13152: LD_INT 32
13154: PPUSH
13155: LD_OWVAR 2
13159: PPUSH
13160: LD_INT 0
13162: PPUSH
13163: CALL_OW 324
13167: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13168: LD_EXP 42
13172: PUSH
13173: LD_EXP 53
13177: AND
13178: IFFALSE 13359
13180: GO 13182
13182: DISABLE
13183: LD_INT 0
13185: PPUSH
13186: PPUSH
13187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13188: LD_ADDR_VAR 0 2
13192: PUSH
13193: LD_INT 22
13195: PUSH
13196: LD_OWVAR 2
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 33
13207: PUSH
13208: LD_INT 3
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PPUSH
13219: CALL_OW 69
13223: ST_TO_ADDR
// if not tmp then
13224: LD_VAR 0 2
13228: NOT
13229: IFFALSE 13233
// exit ;
13231: GO 13359
// side := 0 ;
13233: LD_ADDR_VAR 0 3
13237: PUSH
13238: LD_INT 0
13240: ST_TO_ADDR
// for i := 1 to 8 do
13241: LD_ADDR_VAR 0 1
13245: PUSH
13246: DOUBLE
13247: LD_INT 1
13249: DEC
13250: ST_TO_ADDR
13251: LD_INT 8
13253: PUSH
13254: FOR_TO
13255: IFFALSE 13303
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13257: LD_OWVAR 2
13261: PUSH
13262: LD_VAR 0 1
13266: NONEQUAL
13267: PUSH
13268: LD_OWVAR 2
13272: PPUSH
13273: LD_VAR 0 1
13277: PPUSH
13278: CALL_OW 81
13282: PUSH
13283: LD_INT 2
13285: EQUAL
13286: AND
13287: IFFALSE 13301
// begin side := i ;
13289: LD_ADDR_VAR 0 3
13293: PUSH
13294: LD_VAR 0 1
13298: ST_TO_ADDR
// break ;
13299: GO 13303
// end ;
13301: GO 13254
13303: POP
13304: POP
// if not side then
13305: LD_VAR 0 3
13309: NOT
13310: IFFALSE 13314
// exit ;
13312: GO 13359
// for i := 1 to tmp do
13314: LD_ADDR_VAR 0 1
13318: PUSH
13319: DOUBLE
13320: LD_INT 1
13322: DEC
13323: ST_TO_ADDR
13324: LD_VAR 0 2
13328: PUSH
13329: FOR_TO
13330: IFFALSE 13357
// if Prob ( 60 ) then
13332: LD_INT 60
13334: PPUSH
13335: CALL_OW 13
13339: IFFALSE 13355
// SetSide ( i , side ) ;
13341: LD_VAR 0 1
13345: PPUSH
13346: LD_VAR 0 3
13350: PPUSH
13351: CALL_OW 235
13355: GO 13329
13357: POP
13358: POP
// end ;
13359: PPOPN 3
13361: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13362: LD_EXP 42
13366: PUSH
13367: LD_EXP 55
13371: AND
13372: IFFALSE 13491
13374: GO 13376
13376: DISABLE
13377: LD_INT 0
13379: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13380: LD_ADDR_VAR 0 1
13384: PUSH
13385: LD_INT 22
13387: PUSH
13388: LD_OWVAR 2
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: LD_INT 21
13399: PUSH
13400: LD_INT 1
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 3
13409: PUSH
13410: LD_INT 23
13412: PUSH
13413: LD_INT 0
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: LIST
13428: PPUSH
13429: CALL_OW 69
13433: PUSH
13434: FOR_IN
13435: IFFALSE 13489
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13437: LD_VAR 0 1
13441: PPUSH
13442: CALL_OW 257
13446: PUSH
13447: LD_INT 1
13449: PUSH
13450: LD_INT 2
13452: PUSH
13453: LD_INT 3
13455: PUSH
13456: LD_INT 4
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: IN
13465: IFFALSE 13487
// SetClass ( un , rand ( 1 , 4 ) ) ;
13467: LD_VAR 0 1
13471: PPUSH
13472: LD_INT 1
13474: PPUSH
13475: LD_INT 4
13477: PPUSH
13478: CALL_OW 12
13482: PPUSH
13483: CALL_OW 336
13487: GO 13434
13489: POP
13490: POP
// end ;
13491: PPOPN 1
13493: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13494: LD_EXP 42
13498: PUSH
13499: LD_EXP 54
13503: AND
13504: IFFALSE 13583
13506: GO 13508
13508: DISABLE
13509: LD_INT 0
13511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13512: LD_ADDR_VAR 0 1
13516: PUSH
13517: LD_INT 22
13519: PUSH
13520: LD_OWVAR 2
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 21
13531: PUSH
13532: LD_INT 3
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PPUSH
13543: CALL_OW 69
13547: ST_TO_ADDR
// if not tmp then
13548: LD_VAR 0 1
13552: NOT
13553: IFFALSE 13557
// exit ;
13555: GO 13583
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13557: LD_VAR 0 1
13561: PUSH
13562: LD_INT 1
13564: PPUSH
13565: LD_VAR 0 1
13569: PPUSH
13570: CALL_OW 12
13574: ARRAY
13575: PPUSH
13576: LD_INT 100
13578: PPUSH
13579: CALL_OW 234
// end ;
13583: PPOPN 1
13585: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13586: LD_EXP 42
13590: PUSH
13591: LD_EXP 56
13595: AND
13596: IFFALSE 13694
13598: GO 13600
13600: DISABLE
13601: LD_INT 0
13603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13604: LD_ADDR_VAR 0 1
13608: PUSH
13609: LD_INT 22
13611: PUSH
13612: LD_OWVAR 2
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 21
13623: PUSH
13624: LD_INT 1
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PPUSH
13635: CALL_OW 69
13639: ST_TO_ADDR
// if not tmp then
13640: LD_VAR 0 1
13644: NOT
13645: IFFALSE 13649
// exit ;
13647: GO 13694
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13649: LD_VAR 0 1
13653: PUSH
13654: LD_INT 1
13656: PPUSH
13657: LD_VAR 0 1
13661: PPUSH
13662: CALL_OW 12
13666: ARRAY
13667: PPUSH
13668: LD_INT 1
13670: PPUSH
13671: LD_INT 4
13673: PPUSH
13674: CALL_OW 12
13678: PPUSH
13679: LD_INT 3000
13681: PPUSH
13682: LD_INT 9000
13684: PPUSH
13685: CALL_OW 12
13689: PPUSH
13690: CALL_OW 492
// end ;
13694: PPOPN 1
13696: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13697: LD_EXP 42
13701: PUSH
13702: LD_EXP 57
13706: AND
13707: IFFALSE 13727
13709: GO 13711
13711: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13712: LD_INT 1
13714: PPUSH
13715: LD_OWVAR 2
13719: PPUSH
13720: LD_INT 0
13722: PPUSH
13723: CALL_OW 324
13727: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13728: LD_EXP 42
13732: PUSH
13733: LD_EXP 58
13737: AND
13738: IFFALSE 13821
13740: GO 13742
13742: DISABLE
13743: LD_INT 0
13745: PPUSH
13746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13747: LD_ADDR_VAR 0 2
13751: PUSH
13752: LD_INT 22
13754: PUSH
13755: LD_OWVAR 2
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PUSH
13764: LD_INT 21
13766: PUSH
13767: LD_INT 3
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PPUSH
13778: CALL_OW 69
13782: ST_TO_ADDR
// if not tmp then
13783: LD_VAR 0 2
13787: NOT
13788: IFFALSE 13792
// exit ;
13790: GO 13821
// for i in tmp do
13792: LD_ADDR_VAR 0 1
13796: PUSH
13797: LD_VAR 0 2
13801: PUSH
13802: FOR_IN
13803: IFFALSE 13819
// SetBLevel ( i , 10 ) ;
13805: LD_VAR 0 1
13809: PPUSH
13810: LD_INT 10
13812: PPUSH
13813: CALL_OW 241
13817: GO 13802
13819: POP
13820: POP
// end ;
13821: PPOPN 2
13823: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13824: LD_EXP 42
13828: PUSH
13829: LD_EXP 59
13833: AND
13834: IFFALSE 13945
13836: GO 13838
13838: DISABLE
13839: LD_INT 0
13841: PPUSH
13842: PPUSH
13843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13844: LD_ADDR_VAR 0 3
13848: PUSH
13849: LD_INT 22
13851: PUSH
13852: LD_OWVAR 2
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: LD_INT 25
13863: PUSH
13864: LD_INT 1
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PPUSH
13875: CALL_OW 69
13879: ST_TO_ADDR
// if not tmp then
13880: LD_VAR 0 3
13884: NOT
13885: IFFALSE 13889
// exit ;
13887: GO 13945
// un := tmp [ rand ( 1 , tmp ) ] ;
13889: LD_ADDR_VAR 0 2
13893: PUSH
13894: LD_VAR 0 3
13898: PUSH
13899: LD_INT 1
13901: PPUSH
13902: LD_VAR 0 3
13906: PPUSH
13907: CALL_OW 12
13911: ARRAY
13912: ST_TO_ADDR
// if Crawls ( un ) then
13913: LD_VAR 0 2
13917: PPUSH
13918: CALL_OW 318
13922: IFFALSE 13933
// ComWalk ( un ) ;
13924: LD_VAR 0 2
13928: PPUSH
13929: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13933: LD_VAR 0 2
13937: PPUSH
13938: LD_INT 5
13940: PPUSH
13941: CALL_OW 336
// end ;
13945: PPOPN 3
13947: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13948: LD_EXP 42
13952: PUSH
13953: LD_EXP 60
13957: AND
13958: PUSH
13959: LD_OWVAR 67
13963: PUSH
13964: LD_INT 3
13966: LESS
13967: AND
13968: IFFALSE 13987
13970: GO 13972
13972: DISABLE
// Difficulty := Difficulty + 1 ;
13973: LD_ADDR_OWVAR 67
13977: PUSH
13978: LD_OWVAR 67
13982: PUSH
13983: LD_INT 1
13985: PLUS
13986: ST_TO_ADDR
13987: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13988: LD_EXP 42
13992: PUSH
13993: LD_EXP 61
13997: AND
13998: IFFALSE 14101
14000: GO 14002
14002: DISABLE
14003: LD_INT 0
14005: PPUSH
// begin for i := 1 to 5 do
14006: LD_ADDR_VAR 0 1
14010: PUSH
14011: DOUBLE
14012: LD_INT 1
14014: DEC
14015: ST_TO_ADDR
14016: LD_INT 5
14018: PUSH
14019: FOR_TO
14020: IFFALSE 14099
// begin uc_nation := nation_nature ;
14022: LD_ADDR_OWVAR 21
14026: PUSH
14027: LD_INT 0
14029: ST_TO_ADDR
// uc_side := 0 ;
14030: LD_ADDR_OWVAR 20
14034: PUSH
14035: LD_INT 0
14037: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14038: LD_ADDR_OWVAR 29
14042: PUSH
14043: LD_INT 12
14045: PUSH
14046: LD_INT 12
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: ST_TO_ADDR
// hc_agressivity := 20 ;
14053: LD_ADDR_OWVAR 35
14057: PUSH
14058: LD_INT 20
14060: ST_TO_ADDR
// hc_class := class_tiger ;
14061: LD_ADDR_OWVAR 28
14065: PUSH
14066: LD_INT 14
14068: ST_TO_ADDR
// hc_gallery :=  ;
14069: LD_ADDR_OWVAR 33
14073: PUSH
14074: LD_STRING 
14076: ST_TO_ADDR
// hc_name :=  ;
14077: LD_ADDR_OWVAR 26
14081: PUSH
14082: LD_STRING 
14084: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14085: CALL_OW 44
14089: PPUSH
14090: LD_INT 0
14092: PPUSH
14093: CALL_OW 51
// end ;
14097: GO 14019
14099: POP
14100: POP
// end ;
14101: PPOPN 1
14103: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14104: LD_EXP 42
14108: PUSH
14109: LD_EXP 62
14113: AND
14114: IFFALSE 14123
14116: GO 14118
14118: DISABLE
// StreamSibBomb ;
14119: CALL 14124 0 0
14123: END
// export function StreamSibBomb ; var i , x , y ; begin
14124: LD_INT 0
14126: PPUSH
14127: PPUSH
14128: PPUSH
14129: PPUSH
// result := false ;
14130: LD_ADDR_VAR 0 1
14134: PUSH
14135: LD_INT 0
14137: ST_TO_ADDR
// for i := 1 to 16 do
14138: LD_ADDR_VAR 0 2
14142: PUSH
14143: DOUBLE
14144: LD_INT 1
14146: DEC
14147: ST_TO_ADDR
14148: LD_INT 16
14150: PUSH
14151: FOR_TO
14152: IFFALSE 14351
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14154: LD_ADDR_VAR 0 3
14158: PUSH
14159: LD_INT 10
14161: PUSH
14162: LD_INT 20
14164: PUSH
14165: LD_INT 30
14167: PUSH
14168: LD_INT 40
14170: PUSH
14171: LD_INT 50
14173: PUSH
14174: LD_INT 60
14176: PUSH
14177: LD_INT 70
14179: PUSH
14180: LD_INT 80
14182: PUSH
14183: LD_INT 90
14185: PUSH
14186: LD_INT 100
14188: PUSH
14189: LD_INT 110
14191: PUSH
14192: LD_INT 120
14194: PUSH
14195: LD_INT 130
14197: PUSH
14198: LD_INT 140
14200: PUSH
14201: LD_INT 150
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 1
14223: PPUSH
14224: LD_INT 15
14226: PPUSH
14227: CALL_OW 12
14231: ARRAY
14232: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14233: LD_ADDR_VAR 0 4
14237: PUSH
14238: LD_INT 10
14240: PUSH
14241: LD_INT 20
14243: PUSH
14244: LD_INT 30
14246: PUSH
14247: LD_INT 40
14249: PUSH
14250: LD_INT 50
14252: PUSH
14253: LD_INT 60
14255: PUSH
14256: LD_INT 70
14258: PUSH
14259: LD_INT 80
14261: PUSH
14262: LD_INT 90
14264: PUSH
14265: LD_INT 100
14267: PUSH
14268: LD_INT 110
14270: PUSH
14271: LD_INT 120
14273: PUSH
14274: LD_INT 130
14276: PUSH
14277: LD_INT 140
14279: PUSH
14280: LD_INT 150
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: PUSH
14300: LD_INT 1
14302: PPUSH
14303: LD_INT 15
14305: PPUSH
14306: CALL_OW 12
14310: ARRAY
14311: ST_TO_ADDR
// if ValidHex ( x , y ) then
14312: LD_VAR 0 3
14316: PPUSH
14317: LD_VAR 0 4
14321: PPUSH
14322: CALL_OW 488
14326: IFFALSE 14349
// begin result := [ x , y ] ;
14328: LD_ADDR_VAR 0 1
14332: PUSH
14333: LD_VAR 0 3
14337: PUSH
14338: LD_VAR 0 4
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: ST_TO_ADDR
// break ;
14347: GO 14351
// end ; end ;
14349: GO 14151
14351: POP
14352: POP
// if result then
14353: LD_VAR 0 1
14357: IFFALSE 14417
// begin ToLua ( playSibBomb() ) ;
14359: LD_STRING playSibBomb()
14361: PPUSH
14362: CALL_OW 559
// wait ( 0 0$14 ) ;
14366: LD_INT 490
14368: PPUSH
14369: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14373: LD_VAR 0 1
14377: PUSH
14378: LD_INT 1
14380: ARRAY
14381: PPUSH
14382: LD_VAR 0 1
14386: PUSH
14387: LD_INT 2
14389: ARRAY
14390: PPUSH
14391: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14395: LD_VAR 0 1
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PPUSH
14404: LD_VAR 0 1
14408: PUSH
14409: LD_INT 2
14411: ARRAY
14412: PPUSH
14413: CALL_OW 429
// end ; end ;
14417: LD_VAR 0 1
14421: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14422: LD_EXP 42
14426: PUSH
14427: LD_EXP 64
14431: AND
14432: IFFALSE 14444
14434: GO 14436
14436: DISABLE
// YouLost (  ) ;
14437: LD_STRING 
14439: PPUSH
14440: CALL_OW 104
14444: END
// every 0 0$1 trigger StreamModeActive and sFog do
14445: LD_EXP 42
14449: PUSH
14450: LD_EXP 63
14454: AND
14455: IFFALSE 14469
14457: GO 14459
14459: DISABLE
// FogOff ( your_side ) ;
14460: LD_OWVAR 2
14464: PPUSH
14465: CALL_OW 344
14469: END
// every 0 0$1 trigger StreamModeActive and sSun do
14470: LD_EXP 42
14474: PUSH
14475: LD_EXP 65
14479: AND
14480: IFFALSE 14508
14482: GO 14484
14484: DISABLE
// begin solar_recharge_percent := 0 ;
14485: LD_ADDR_OWVAR 79
14489: PUSH
14490: LD_INT 0
14492: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14493: LD_INT 10500
14495: PPUSH
14496: CALL_OW 67
// solar_recharge_percent := 100 ;
14500: LD_ADDR_OWVAR 79
14504: PUSH
14505: LD_INT 100
14507: ST_TO_ADDR
// end ;
14508: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14509: LD_EXP 42
14513: PUSH
14514: LD_EXP 66
14518: AND
14519: IFFALSE 14758
14521: GO 14523
14523: DISABLE
14524: LD_INT 0
14526: PPUSH
14527: PPUSH
14528: PPUSH
// begin tmp := [ ] ;
14529: LD_ADDR_VAR 0 3
14533: PUSH
14534: EMPTY
14535: ST_TO_ADDR
// for i := 1 to 6 do
14536: LD_ADDR_VAR 0 1
14540: PUSH
14541: DOUBLE
14542: LD_INT 1
14544: DEC
14545: ST_TO_ADDR
14546: LD_INT 6
14548: PUSH
14549: FOR_TO
14550: IFFALSE 14655
// begin uc_nation := nation_nature ;
14552: LD_ADDR_OWVAR 21
14556: PUSH
14557: LD_INT 0
14559: ST_TO_ADDR
// uc_side := 0 ;
14560: LD_ADDR_OWVAR 20
14564: PUSH
14565: LD_INT 0
14567: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14568: LD_ADDR_OWVAR 29
14572: PUSH
14573: LD_INT 12
14575: PUSH
14576: LD_INT 12
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: ST_TO_ADDR
// hc_agressivity := 20 ;
14583: LD_ADDR_OWVAR 35
14587: PUSH
14588: LD_INT 20
14590: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14591: LD_ADDR_OWVAR 28
14595: PUSH
14596: LD_INT 17
14598: ST_TO_ADDR
// hc_gallery :=  ;
14599: LD_ADDR_OWVAR 33
14603: PUSH
14604: LD_STRING 
14606: ST_TO_ADDR
// hc_name :=  ;
14607: LD_ADDR_OWVAR 26
14611: PUSH
14612: LD_STRING 
14614: ST_TO_ADDR
// un := CreateHuman ;
14615: LD_ADDR_VAR 0 2
14619: PUSH
14620: CALL_OW 44
14624: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14625: LD_VAR 0 2
14629: PPUSH
14630: LD_INT 1
14632: PPUSH
14633: CALL_OW 51
// tmp := tmp ^ un ;
14637: LD_ADDR_VAR 0 3
14641: PUSH
14642: LD_VAR 0 3
14646: PUSH
14647: LD_VAR 0 2
14651: ADD
14652: ST_TO_ADDR
// end ;
14653: GO 14549
14655: POP
14656: POP
// repeat wait ( 0 0$1 ) ;
14657: LD_INT 35
14659: PPUSH
14660: CALL_OW 67
// for un in tmp do
14664: LD_ADDR_VAR 0 2
14668: PUSH
14669: LD_VAR 0 3
14673: PUSH
14674: FOR_IN
14675: IFFALSE 14749
// begin if IsDead ( un ) then
14677: LD_VAR 0 2
14681: PPUSH
14682: CALL_OW 301
14686: IFFALSE 14706
// begin tmp := tmp diff un ;
14688: LD_ADDR_VAR 0 3
14692: PUSH
14693: LD_VAR 0 3
14697: PUSH
14698: LD_VAR 0 2
14702: DIFF
14703: ST_TO_ADDR
// continue ;
14704: GO 14674
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14706: LD_VAR 0 2
14710: PPUSH
14711: LD_INT 3
14713: PUSH
14714: LD_INT 22
14716: PUSH
14717: LD_INT 0
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PPUSH
14728: CALL_OW 69
14732: PPUSH
14733: LD_VAR 0 2
14737: PPUSH
14738: CALL_OW 74
14742: PPUSH
14743: CALL_OW 115
// end ;
14747: GO 14674
14749: POP
14750: POP
// until not tmp ;
14751: LD_VAR 0 3
14755: NOT
14756: IFFALSE 14657
// end ;
14758: PPOPN 3
14760: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14761: LD_EXP 42
14765: PUSH
14766: LD_EXP 67
14770: AND
14771: IFFALSE 14825
14773: GO 14775
14775: DISABLE
// begin ToLua ( displayTroll(); ) ;
14776: LD_STRING displayTroll();
14778: PPUSH
14779: CALL_OW 559
// wait ( 3 3$00 ) ;
14783: LD_INT 6300
14785: PPUSH
14786: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14790: LD_STRING hideTroll();
14792: PPUSH
14793: CALL_OW 559
// wait ( 1 1$00 ) ;
14797: LD_INT 2100
14799: PPUSH
14800: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14804: LD_STRING displayTroll();
14806: PPUSH
14807: CALL_OW 559
// wait ( 1 1$00 ) ;
14811: LD_INT 2100
14813: PPUSH
14814: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14818: LD_STRING hideTroll();
14820: PPUSH
14821: CALL_OW 559
// end ;
14825: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14826: LD_EXP 42
14830: PUSH
14831: LD_EXP 68
14835: AND
14836: IFFALSE 14899
14838: GO 14840
14840: DISABLE
14841: LD_INT 0
14843: PPUSH
// begin p := 0 ;
14844: LD_ADDR_VAR 0 1
14848: PUSH
14849: LD_INT 0
14851: ST_TO_ADDR
// repeat game_speed := 1 ;
14852: LD_ADDR_OWVAR 65
14856: PUSH
14857: LD_INT 1
14859: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14860: LD_INT 35
14862: PPUSH
14863: CALL_OW 67
// p := p + 1 ;
14867: LD_ADDR_VAR 0 1
14871: PUSH
14872: LD_VAR 0 1
14876: PUSH
14877: LD_INT 1
14879: PLUS
14880: ST_TO_ADDR
// until p >= 60 ;
14881: LD_VAR 0 1
14885: PUSH
14886: LD_INT 60
14888: GREATEREQUAL
14889: IFFALSE 14852
// game_speed := 4 ;
14891: LD_ADDR_OWVAR 65
14895: PUSH
14896: LD_INT 4
14898: ST_TO_ADDR
// end ;
14899: PPOPN 1
14901: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14902: LD_EXP 42
14906: PUSH
14907: LD_EXP 69
14911: AND
14912: IFFALSE 15058
14914: GO 14916
14916: DISABLE
14917: LD_INT 0
14919: PPUSH
14920: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14921: LD_ADDR_VAR 0 1
14925: PUSH
14926: LD_INT 22
14928: PUSH
14929: LD_OWVAR 2
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 2
14940: PUSH
14941: LD_INT 30
14943: PUSH
14944: LD_INT 0
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: LD_INT 30
14953: PUSH
14954: LD_INT 1
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: LIST
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PPUSH
14970: CALL_OW 69
14974: ST_TO_ADDR
// if not depot then
14975: LD_VAR 0 1
14979: NOT
14980: IFFALSE 14984
// exit ;
14982: GO 15058
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14984: LD_ADDR_VAR 0 2
14988: PUSH
14989: LD_VAR 0 1
14993: PUSH
14994: LD_INT 1
14996: PPUSH
14997: LD_VAR 0 1
15001: PPUSH
15002: CALL_OW 12
15006: ARRAY
15007: PPUSH
15008: CALL_OW 274
15012: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15013: LD_VAR 0 2
15017: PPUSH
15018: LD_INT 1
15020: PPUSH
15021: LD_INT 0
15023: PPUSH
15024: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15028: LD_VAR 0 2
15032: PPUSH
15033: LD_INT 2
15035: PPUSH
15036: LD_INT 0
15038: PPUSH
15039: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15043: LD_VAR 0 2
15047: PPUSH
15048: LD_INT 3
15050: PPUSH
15051: LD_INT 0
15053: PPUSH
15054: CALL_OW 277
// end ;
15058: PPOPN 2
15060: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15061: LD_EXP 42
15065: PUSH
15066: LD_EXP 70
15070: AND
15071: IFFALSE 15168
15073: GO 15075
15075: DISABLE
15076: LD_INT 0
15078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15079: LD_ADDR_VAR 0 1
15083: PUSH
15084: LD_INT 22
15086: PUSH
15087: LD_OWVAR 2
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PUSH
15096: LD_INT 21
15098: PUSH
15099: LD_INT 1
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: PUSH
15106: LD_INT 3
15108: PUSH
15109: LD_INT 23
15111: PUSH
15112: LD_INT 0
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: PPUSH
15128: CALL_OW 69
15132: ST_TO_ADDR
// if not tmp then
15133: LD_VAR 0 1
15137: NOT
15138: IFFALSE 15142
// exit ;
15140: GO 15168
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15142: LD_VAR 0 1
15146: PUSH
15147: LD_INT 1
15149: PPUSH
15150: LD_VAR 0 1
15154: PPUSH
15155: CALL_OW 12
15159: ARRAY
15160: PPUSH
15161: LD_INT 200
15163: PPUSH
15164: CALL_OW 234
// end ;
15168: PPOPN 1
15170: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15171: LD_EXP 42
15175: PUSH
15176: LD_EXP 71
15180: AND
15181: IFFALSE 15260
15183: GO 15185
15185: DISABLE
15186: LD_INT 0
15188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15189: LD_ADDR_VAR 0 1
15193: PUSH
15194: LD_INT 22
15196: PUSH
15197: LD_OWVAR 2
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PUSH
15206: LD_INT 21
15208: PUSH
15209: LD_INT 2
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PPUSH
15220: CALL_OW 69
15224: ST_TO_ADDR
// if not tmp then
15225: LD_VAR 0 1
15229: NOT
15230: IFFALSE 15234
// exit ;
15232: GO 15260
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15234: LD_VAR 0 1
15238: PUSH
15239: LD_INT 1
15241: PPUSH
15242: LD_VAR 0 1
15246: PPUSH
15247: CALL_OW 12
15251: ARRAY
15252: PPUSH
15253: LD_INT 60
15255: PPUSH
15256: CALL_OW 234
// end ;
15260: PPOPN 1
15262: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15263: LD_EXP 42
15267: PUSH
15268: LD_EXP 72
15272: AND
15273: IFFALSE 15372
15275: GO 15277
15277: DISABLE
15278: LD_INT 0
15280: PPUSH
15281: PPUSH
// begin enable ;
15282: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15283: LD_ADDR_VAR 0 1
15287: PUSH
15288: LD_INT 22
15290: PUSH
15291: LD_OWVAR 2
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: LD_INT 61
15302: PUSH
15303: EMPTY
15304: LIST
15305: PUSH
15306: LD_INT 33
15308: PUSH
15309: LD_INT 2
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: LIST
15320: PPUSH
15321: CALL_OW 69
15325: ST_TO_ADDR
// if not tmp then
15326: LD_VAR 0 1
15330: NOT
15331: IFFALSE 15335
// exit ;
15333: GO 15372
// for i in tmp do
15335: LD_ADDR_VAR 0 2
15339: PUSH
15340: LD_VAR 0 1
15344: PUSH
15345: FOR_IN
15346: IFFALSE 15370
// if IsControledBy ( i ) then
15348: LD_VAR 0 2
15352: PPUSH
15353: CALL_OW 312
15357: IFFALSE 15368
// ComUnlink ( i ) ;
15359: LD_VAR 0 2
15363: PPUSH
15364: CALL_OW 136
15368: GO 15345
15370: POP
15371: POP
// end ;
15372: PPOPN 2
15374: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15375: LD_EXP 42
15379: PUSH
15380: LD_EXP 73
15384: AND
15385: IFFALSE 15525
15387: GO 15389
15389: DISABLE
15390: LD_INT 0
15392: PPUSH
15393: PPUSH
// begin ToLua ( displayPowell(); ) ;
15394: LD_STRING displayPowell();
15396: PPUSH
15397: CALL_OW 559
// uc_side := 0 ;
15401: LD_ADDR_OWVAR 20
15405: PUSH
15406: LD_INT 0
15408: ST_TO_ADDR
// uc_nation := 2 ;
15409: LD_ADDR_OWVAR 21
15413: PUSH
15414: LD_INT 2
15416: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15417: LD_ADDR_OWVAR 37
15421: PUSH
15422: LD_INT 14
15424: ST_TO_ADDR
// vc_engine := engine_siberite ;
15425: LD_ADDR_OWVAR 39
15429: PUSH
15430: LD_INT 3
15432: ST_TO_ADDR
// vc_control := control_apeman ;
15433: LD_ADDR_OWVAR 38
15437: PUSH
15438: LD_INT 5
15440: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15441: LD_ADDR_OWVAR 40
15445: PUSH
15446: LD_INT 29
15448: ST_TO_ADDR
// un := CreateVehicle ;
15449: LD_ADDR_VAR 0 2
15453: PUSH
15454: CALL_OW 45
15458: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15459: LD_VAR 0 2
15463: PPUSH
15464: LD_INT 1
15466: PPUSH
15467: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15471: LD_INT 35
15473: PPUSH
15474: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15478: LD_VAR 0 2
15482: PPUSH
15483: LD_INT 22
15485: PUSH
15486: LD_OWVAR 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PPUSH
15495: CALL_OW 69
15499: PPUSH
15500: LD_VAR 0 2
15504: PPUSH
15505: CALL_OW 74
15509: PPUSH
15510: CALL_OW 115
// until IsDead ( un ) ;
15514: LD_VAR 0 2
15518: PPUSH
15519: CALL_OW 301
15523: IFFALSE 15471
// end ;
15525: PPOPN 2
15527: END
// every 0 0$1 trigger StreamModeActive and sStu do
15528: LD_EXP 42
15532: PUSH
15533: LD_EXP 81
15537: AND
15538: IFFALSE 15554
15540: GO 15542
15542: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15543: LD_STRING displayStucuk();
15545: PPUSH
15546: CALL_OW 559
// ResetFog ;
15550: CALL_OW 335
// end ;
15554: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15555: LD_EXP 42
15559: PUSH
15560: LD_EXP 74
15564: AND
15565: IFFALSE 15706
15567: GO 15569
15569: DISABLE
15570: LD_INT 0
15572: PPUSH
15573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15574: LD_ADDR_VAR 0 2
15578: PUSH
15579: LD_INT 22
15581: PUSH
15582: LD_OWVAR 2
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: LD_INT 21
15593: PUSH
15594: LD_INT 1
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PPUSH
15605: CALL_OW 69
15609: ST_TO_ADDR
// if not tmp then
15610: LD_VAR 0 2
15614: NOT
15615: IFFALSE 15619
// exit ;
15617: GO 15706
// un := tmp [ rand ( 1 , tmp ) ] ;
15619: LD_ADDR_VAR 0 1
15623: PUSH
15624: LD_VAR 0 2
15628: PUSH
15629: LD_INT 1
15631: PPUSH
15632: LD_VAR 0 2
15636: PPUSH
15637: CALL_OW 12
15641: ARRAY
15642: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15643: LD_VAR 0 1
15647: PPUSH
15648: LD_INT 0
15650: PPUSH
15651: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15655: LD_VAR 0 1
15659: PPUSH
15660: LD_OWVAR 3
15664: PUSH
15665: LD_VAR 0 1
15669: DIFF
15670: PPUSH
15671: LD_VAR 0 1
15675: PPUSH
15676: CALL_OW 74
15680: PPUSH
15681: CALL_OW 115
// wait ( 0 0$20 ) ;
15685: LD_INT 700
15687: PPUSH
15688: CALL_OW 67
// SetSide ( un , your_side ) ;
15692: LD_VAR 0 1
15696: PPUSH
15697: LD_OWVAR 2
15701: PPUSH
15702: CALL_OW 235
// end ;
15706: PPOPN 2
15708: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15709: LD_EXP 42
15713: PUSH
15714: LD_EXP 75
15718: AND
15719: IFFALSE 15825
15721: GO 15723
15723: DISABLE
15724: LD_INT 0
15726: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15727: LD_ADDR_VAR 0 1
15731: PUSH
15732: LD_INT 22
15734: PUSH
15735: LD_OWVAR 2
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 2
15746: PUSH
15747: LD_INT 30
15749: PUSH
15750: LD_INT 0
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: PUSH
15757: LD_INT 30
15759: PUSH
15760: LD_INT 1
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: LIST
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PPUSH
15776: CALL_OW 69
15780: ST_TO_ADDR
// if not depot then
15781: LD_VAR 0 1
15785: NOT
15786: IFFALSE 15790
// exit ;
15788: GO 15825
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15790: LD_VAR 0 1
15794: PUSH
15795: LD_INT 1
15797: ARRAY
15798: PPUSH
15799: CALL_OW 250
15803: PPUSH
15804: LD_VAR 0 1
15808: PUSH
15809: LD_INT 1
15811: ARRAY
15812: PPUSH
15813: CALL_OW 251
15817: PPUSH
15818: LD_INT 70
15820: PPUSH
15821: CALL_OW 495
// end ;
15825: PPOPN 1
15827: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15828: LD_EXP 42
15832: PUSH
15833: LD_EXP 76
15837: AND
15838: IFFALSE 16049
15840: GO 15842
15842: DISABLE
15843: LD_INT 0
15845: PPUSH
15846: PPUSH
15847: PPUSH
15848: PPUSH
15849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15850: LD_ADDR_VAR 0 5
15854: PUSH
15855: LD_INT 22
15857: PUSH
15858: LD_OWVAR 2
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 21
15869: PUSH
15870: LD_INT 1
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 69
15885: ST_TO_ADDR
// if not tmp then
15886: LD_VAR 0 5
15890: NOT
15891: IFFALSE 15895
// exit ;
15893: GO 16049
// for i in tmp do
15895: LD_ADDR_VAR 0 1
15899: PUSH
15900: LD_VAR 0 5
15904: PUSH
15905: FOR_IN
15906: IFFALSE 16047
// begin d := rand ( 0 , 5 ) ;
15908: LD_ADDR_VAR 0 4
15912: PUSH
15913: LD_INT 0
15915: PPUSH
15916: LD_INT 5
15918: PPUSH
15919: CALL_OW 12
15923: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15924: LD_ADDR_VAR 0 2
15928: PUSH
15929: LD_VAR 0 1
15933: PPUSH
15934: CALL_OW 250
15938: PPUSH
15939: LD_VAR 0 4
15943: PPUSH
15944: LD_INT 3
15946: PPUSH
15947: LD_INT 12
15949: PPUSH
15950: CALL_OW 12
15954: PPUSH
15955: CALL_OW 272
15959: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15960: LD_ADDR_VAR 0 3
15964: PUSH
15965: LD_VAR 0 1
15969: PPUSH
15970: CALL_OW 251
15974: PPUSH
15975: LD_VAR 0 4
15979: PPUSH
15980: LD_INT 3
15982: PPUSH
15983: LD_INT 12
15985: PPUSH
15986: CALL_OW 12
15990: PPUSH
15991: CALL_OW 273
15995: ST_TO_ADDR
// if ValidHex ( x , y ) then
15996: LD_VAR 0 2
16000: PPUSH
16001: LD_VAR 0 3
16005: PPUSH
16006: CALL_OW 488
16010: IFFALSE 16045
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16012: LD_VAR 0 1
16016: PPUSH
16017: LD_VAR 0 2
16021: PPUSH
16022: LD_VAR 0 3
16026: PPUSH
16027: LD_INT 3
16029: PPUSH
16030: LD_INT 6
16032: PPUSH
16033: CALL_OW 12
16037: PPUSH
16038: LD_INT 1
16040: PPUSH
16041: CALL_OW 483
// end ;
16045: GO 15905
16047: POP
16048: POP
// end ;
16049: PPOPN 5
16051: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16052: LD_EXP 42
16056: PUSH
16057: LD_EXP 77
16061: AND
16062: IFFALSE 16156
16064: GO 16066
16066: DISABLE
16067: LD_INT 0
16069: PPUSH
16070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16071: LD_ADDR_VAR 0 2
16075: PUSH
16076: LD_INT 22
16078: PUSH
16079: LD_OWVAR 2
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: LD_INT 32
16090: PUSH
16091: LD_INT 1
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 21
16100: PUSH
16101: LD_INT 2
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: LIST
16112: PPUSH
16113: CALL_OW 69
16117: ST_TO_ADDR
// if not tmp then
16118: LD_VAR 0 2
16122: NOT
16123: IFFALSE 16127
// exit ;
16125: GO 16156
// for i in tmp do
16127: LD_ADDR_VAR 0 1
16131: PUSH
16132: LD_VAR 0 2
16136: PUSH
16137: FOR_IN
16138: IFFALSE 16154
// SetFuel ( i , 0 ) ;
16140: LD_VAR 0 1
16144: PPUSH
16145: LD_INT 0
16147: PPUSH
16148: CALL_OW 240
16152: GO 16137
16154: POP
16155: POP
// end ;
16156: PPOPN 2
16158: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16159: LD_EXP 42
16163: PUSH
16164: LD_EXP 78
16168: AND
16169: IFFALSE 16235
16171: GO 16173
16173: DISABLE
16174: LD_INT 0
16176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16177: LD_ADDR_VAR 0 1
16181: PUSH
16182: LD_INT 22
16184: PUSH
16185: LD_OWVAR 2
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 30
16196: PUSH
16197: LD_INT 29
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PPUSH
16208: CALL_OW 69
16212: ST_TO_ADDR
// if not tmp then
16213: LD_VAR 0 1
16217: NOT
16218: IFFALSE 16222
// exit ;
16220: GO 16235
// DestroyUnit ( tmp [ 1 ] ) ;
16222: LD_VAR 0 1
16226: PUSH
16227: LD_INT 1
16229: ARRAY
16230: PPUSH
16231: CALL_OW 65
// end ;
16235: PPOPN 1
16237: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16238: LD_EXP 42
16242: PUSH
16243: LD_EXP 80
16247: AND
16248: IFFALSE 16377
16250: GO 16252
16252: DISABLE
16253: LD_INT 0
16255: PPUSH
// begin uc_side := 0 ;
16256: LD_ADDR_OWVAR 20
16260: PUSH
16261: LD_INT 0
16263: ST_TO_ADDR
// uc_nation := nation_arabian ;
16264: LD_ADDR_OWVAR 21
16268: PUSH
16269: LD_INT 2
16271: ST_TO_ADDR
// hc_gallery :=  ;
16272: LD_ADDR_OWVAR 33
16276: PUSH
16277: LD_STRING 
16279: ST_TO_ADDR
// hc_name :=  ;
16280: LD_ADDR_OWVAR 26
16284: PUSH
16285: LD_STRING 
16287: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16288: LD_INT 1
16290: PPUSH
16291: LD_INT 11
16293: PPUSH
16294: LD_INT 10
16296: PPUSH
16297: CALL_OW 380
// un := CreateHuman ;
16301: LD_ADDR_VAR 0 1
16305: PUSH
16306: CALL_OW 44
16310: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16311: LD_VAR 0 1
16315: PPUSH
16316: LD_INT 1
16318: PPUSH
16319: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16323: LD_INT 35
16325: PPUSH
16326: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16330: LD_VAR 0 1
16334: PPUSH
16335: LD_INT 22
16337: PUSH
16338: LD_OWVAR 2
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PPUSH
16347: CALL_OW 69
16351: PPUSH
16352: LD_VAR 0 1
16356: PPUSH
16357: CALL_OW 74
16361: PPUSH
16362: CALL_OW 115
// until IsDead ( un ) ;
16366: LD_VAR 0 1
16370: PPUSH
16371: CALL_OW 301
16375: IFFALSE 16323
// end ;
16377: PPOPN 1
16379: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16380: LD_EXP 42
16384: PUSH
16385: LD_EXP 82
16389: AND
16390: IFFALSE 16402
16392: GO 16394
16394: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16395: LD_STRING earthquake(getX(game), 0, 32)
16397: PPUSH
16398: CALL_OW 559
16402: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16403: LD_EXP 42
16407: PUSH
16408: LD_EXP 83
16412: AND
16413: IFFALSE 16504
16415: GO 16417
16417: DISABLE
16418: LD_INT 0
16420: PPUSH
// begin enable ;
16421: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16422: LD_ADDR_VAR 0 1
16426: PUSH
16427: LD_INT 22
16429: PUSH
16430: LD_OWVAR 2
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 21
16441: PUSH
16442: LD_INT 2
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 33
16451: PUSH
16452: LD_INT 3
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: LIST
16463: PPUSH
16464: CALL_OW 69
16468: ST_TO_ADDR
// if not tmp then
16469: LD_VAR 0 1
16473: NOT
16474: IFFALSE 16478
// exit ;
16476: GO 16504
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16478: LD_VAR 0 1
16482: PUSH
16483: LD_INT 1
16485: PPUSH
16486: LD_VAR 0 1
16490: PPUSH
16491: CALL_OW 12
16495: ARRAY
16496: PPUSH
16497: LD_INT 1
16499: PPUSH
16500: CALL_OW 234
// end ;
16504: PPOPN 1
16506: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16507: LD_EXP 42
16511: PUSH
16512: LD_EXP 84
16516: AND
16517: IFFALSE 16658
16519: GO 16521
16521: DISABLE
16522: LD_INT 0
16524: PPUSH
16525: PPUSH
16526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16527: LD_ADDR_VAR 0 3
16531: PUSH
16532: LD_INT 22
16534: PUSH
16535: LD_OWVAR 2
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 25
16546: PUSH
16547: LD_INT 1
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PPUSH
16558: CALL_OW 69
16562: ST_TO_ADDR
// if not tmp then
16563: LD_VAR 0 3
16567: NOT
16568: IFFALSE 16572
// exit ;
16570: GO 16658
// un := tmp [ rand ( 1 , tmp ) ] ;
16572: LD_ADDR_VAR 0 2
16576: PUSH
16577: LD_VAR 0 3
16581: PUSH
16582: LD_INT 1
16584: PPUSH
16585: LD_VAR 0 3
16589: PPUSH
16590: CALL_OW 12
16594: ARRAY
16595: ST_TO_ADDR
// if Crawls ( un ) then
16596: LD_VAR 0 2
16600: PPUSH
16601: CALL_OW 318
16605: IFFALSE 16616
// ComWalk ( un ) ;
16607: LD_VAR 0 2
16611: PPUSH
16612: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16616: LD_VAR 0 2
16620: PPUSH
16621: LD_INT 9
16623: PPUSH
16624: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16628: LD_INT 28
16630: PPUSH
16631: LD_OWVAR 2
16635: PPUSH
16636: LD_INT 2
16638: PPUSH
16639: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16643: LD_INT 29
16645: PPUSH
16646: LD_OWVAR 2
16650: PPUSH
16651: LD_INT 2
16653: PPUSH
16654: CALL_OW 322
// end ;
16658: PPOPN 3
16660: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16661: LD_EXP 42
16665: PUSH
16666: LD_EXP 85
16670: AND
16671: IFFALSE 16782
16673: GO 16675
16675: DISABLE
16676: LD_INT 0
16678: PPUSH
16679: PPUSH
16680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16681: LD_ADDR_VAR 0 3
16685: PUSH
16686: LD_INT 22
16688: PUSH
16689: LD_OWVAR 2
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: LD_INT 25
16700: PUSH
16701: LD_INT 1
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PPUSH
16712: CALL_OW 69
16716: ST_TO_ADDR
// if not tmp then
16717: LD_VAR 0 3
16721: NOT
16722: IFFALSE 16726
// exit ;
16724: GO 16782
// un := tmp [ rand ( 1 , tmp ) ] ;
16726: LD_ADDR_VAR 0 2
16730: PUSH
16731: LD_VAR 0 3
16735: PUSH
16736: LD_INT 1
16738: PPUSH
16739: LD_VAR 0 3
16743: PPUSH
16744: CALL_OW 12
16748: ARRAY
16749: ST_TO_ADDR
// if Crawls ( un ) then
16750: LD_VAR 0 2
16754: PPUSH
16755: CALL_OW 318
16759: IFFALSE 16770
// ComWalk ( un ) ;
16761: LD_VAR 0 2
16765: PPUSH
16766: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16770: LD_VAR 0 2
16774: PPUSH
16775: LD_INT 8
16777: PPUSH
16778: CALL_OW 336
// end ;
16782: PPOPN 3
16784: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16785: LD_EXP 42
16789: PUSH
16790: LD_EXP 86
16794: AND
16795: IFFALSE 16939
16797: GO 16799
16799: DISABLE
16800: LD_INT 0
16802: PPUSH
16803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16804: LD_ADDR_VAR 0 2
16808: PUSH
16809: LD_INT 22
16811: PUSH
16812: LD_OWVAR 2
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 21
16823: PUSH
16824: LD_INT 2
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 2
16833: PUSH
16834: LD_INT 34
16836: PUSH
16837: LD_INT 12
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 34
16846: PUSH
16847: LD_INT 51
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 34
16856: PUSH
16857: LD_INT 32
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: LIST
16874: PPUSH
16875: CALL_OW 69
16879: ST_TO_ADDR
// if not tmp then
16880: LD_VAR 0 2
16884: NOT
16885: IFFALSE 16889
// exit ;
16887: GO 16939
// for i in tmp do
16889: LD_ADDR_VAR 0 1
16893: PUSH
16894: LD_VAR 0 2
16898: PUSH
16899: FOR_IN
16900: IFFALSE 16937
// if GetCargo ( i , mat_artifact ) = 0 then
16902: LD_VAR 0 1
16906: PPUSH
16907: LD_INT 4
16909: PPUSH
16910: CALL_OW 289
16914: PUSH
16915: LD_INT 0
16917: EQUAL
16918: IFFALSE 16935
// SetCargo ( i , mat_siberit , 100 ) ;
16920: LD_VAR 0 1
16924: PPUSH
16925: LD_INT 3
16927: PPUSH
16928: LD_INT 100
16930: PPUSH
16931: CALL_OW 290
16935: GO 16899
16937: POP
16938: POP
// end ;
16939: PPOPN 2
16941: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16942: LD_EXP 42
16946: PUSH
16947: LD_EXP 87
16951: AND
16952: IFFALSE 17135
16954: GO 16956
16956: DISABLE
16957: LD_INT 0
16959: PPUSH
16960: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16961: LD_ADDR_VAR 0 2
16965: PUSH
16966: LD_INT 22
16968: PUSH
16969: LD_OWVAR 2
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PPUSH
16978: CALL_OW 69
16982: ST_TO_ADDR
// if not tmp then
16983: LD_VAR 0 2
16987: NOT
16988: IFFALSE 16992
// exit ;
16990: GO 17135
// for i := 1 to 2 do
16992: LD_ADDR_VAR 0 1
16996: PUSH
16997: DOUBLE
16998: LD_INT 1
17000: DEC
17001: ST_TO_ADDR
17002: LD_INT 2
17004: PUSH
17005: FOR_TO
17006: IFFALSE 17133
// begin uc_side := your_side ;
17008: LD_ADDR_OWVAR 20
17012: PUSH
17013: LD_OWVAR 2
17017: ST_TO_ADDR
// uc_nation := nation_american ;
17018: LD_ADDR_OWVAR 21
17022: PUSH
17023: LD_INT 1
17025: ST_TO_ADDR
// vc_chassis := us_morphling ;
17026: LD_ADDR_OWVAR 37
17030: PUSH
17031: LD_INT 5
17033: ST_TO_ADDR
// vc_engine := engine_siberite ;
17034: LD_ADDR_OWVAR 39
17038: PUSH
17039: LD_INT 3
17041: ST_TO_ADDR
// vc_control := control_computer ;
17042: LD_ADDR_OWVAR 38
17046: PUSH
17047: LD_INT 3
17049: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17050: LD_ADDR_OWVAR 40
17054: PUSH
17055: LD_INT 10
17057: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17058: LD_VAR 0 2
17062: PUSH
17063: LD_INT 1
17065: ARRAY
17066: PPUSH
17067: CALL_OW 310
17071: NOT
17072: IFFALSE 17119
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17074: CALL_OW 45
17078: PPUSH
17079: LD_VAR 0 2
17083: PUSH
17084: LD_INT 1
17086: ARRAY
17087: PPUSH
17088: CALL_OW 250
17092: PPUSH
17093: LD_VAR 0 2
17097: PUSH
17098: LD_INT 1
17100: ARRAY
17101: PPUSH
17102: CALL_OW 251
17106: PPUSH
17107: LD_INT 12
17109: PPUSH
17110: LD_INT 1
17112: PPUSH
17113: CALL_OW 50
17117: GO 17131
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17119: CALL_OW 45
17123: PPUSH
17124: LD_INT 1
17126: PPUSH
17127: CALL_OW 51
// end ;
17131: GO 17005
17133: POP
17134: POP
// end ;
17135: PPOPN 2
17137: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17138: LD_EXP 42
17142: PUSH
17143: LD_EXP 88
17147: AND
17148: IFFALSE 17370
17150: GO 17152
17152: DISABLE
17153: LD_INT 0
17155: PPUSH
17156: PPUSH
17157: PPUSH
17158: PPUSH
17159: PPUSH
17160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17161: LD_ADDR_VAR 0 6
17165: PUSH
17166: LD_INT 22
17168: PUSH
17169: LD_OWVAR 2
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 21
17180: PUSH
17181: LD_INT 1
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 3
17190: PUSH
17191: LD_INT 23
17193: PUSH
17194: LD_INT 0
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: LIST
17209: PPUSH
17210: CALL_OW 69
17214: ST_TO_ADDR
// if not tmp then
17215: LD_VAR 0 6
17219: NOT
17220: IFFALSE 17224
// exit ;
17222: GO 17370
// s1 := rand ( 1 , 4 ) ;
17224: LD_ADDR_VAR 0 2
17228: PUSH
17229: LD_INT 1
17231: PPUSH
17232: LD_INT 4
17234: PPUSH
17235: CALL_OW 12
17239: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17240: LD_ADDR_VAR 0 4
17244: PUSH
17245: LD_VAR 0 6
17249: PUSH
17250: LD_INT 1
17252: ARRAY
17253: PPUSH
17254: LD_VAR 0 2
17258: PPUSH
17259: CALL_OW 259
17263: ST_TO_ADDR
// if s1 = 1 then
17264: LD_VAR 0 2
17268: PUSH
17269: LD_INT 1
17271: EQUAL
17272: IFFALSE 17292
// s2 := rand ( 2 , 4 ) else
17274: LD_ADDR_VAR 0 3
17278: PUSH
17279: LD_INT 2
17281: PPUSH
17282: LD_INT 4
17284: PPUSH
17285: CALL_OW 12
17289: ST_TO_ADDR
17290: GO 17300
// s2 := 1 ;
17292: LD_ADDR_VAR 0 3
17296: PUSH
17297: LD_INT 1
17299: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17300: LD_ADDR_VAR 0 5
17304: PUSH
17305: LD_VAR 0 6
17309: PUSH
17310: LD_INT 1
17312: ARRAY
17313: PPUSH
17314: LD_VAR 0 3
17318: PPUSH
17319: CALL_OW 259
17323: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17324: LD_VAR 0 6
17328: PUSH
17329: LD_INT 1
17331: ARRAY
17332: PPUSH
17333: LD_VAR 0 2
17337: PPUSH
17338: LD_VAR 0 5
17342: PPUSH
17343: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17347: LD_VAR 0 6
17351: PUSH
17352: LD_INT 1
17354: ARRAY
17355: PPUSH
17356: LD_VAR 0 3
17360: PPUSH
17361: LD_VAR 0 4
17365: PPUSH
17366: CALL_OW 237
// end ;
17370: PPOPN 6
17372: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17373: LD_EXP 42
17377: PUSH
17378: LD_EXP 89
17382: AND
17383: IFFALSE 17462
17385: GO 17387
17387: DISABLE
17388: LD_INT 0
17390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17391: LD_ADDR_VAR 0 1
17395: PUSH
17396: LD_INT 22
17398: PUSH
17399: LD_OWVAR 2
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 30
17410: PUSH
17411: LD_INT 3
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PPUSH
17422: CALL_OW 69
17426: ST_TO_ADDR
// if not tmp then
17427: LD_VAR 0 1
17431: NOT
17432: IFFALSE 17436
// exit ;
17434: GO 17462
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17436: LD_VAR 0 1
17440: PUSH
17441: LD_INT 1
17443: PPUSH
17444: LD_VAR 0 1
17448: PPUSH
17449: CALL_OW 12
17453: ARRAY
17454: PPUSH
17455: LD_INT 1
17457: PPUSH
17458: CALL_OW 234
// end ;
17462: PPOPN 1
17464: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17465: LD_EXP 42
17469: PUSH
17470: LD_EXP 90
17474: AND
17475: IFFALSE 17587
17477: GO 17479
17479: DISABLE
17480: LD_INT 0
17482: PPUSH
17483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17484: LD_ADDR_VAR 0 2
17488: PUSH
17489: LD_INT 22
17491: PUSH
17492: LD_OWVAR 2
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 2
17503: PUSH
17504: LD_INT 30
17506: PUSH
17507: LD_INT 27
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 30
17516: PUSH
17517: LD_INT 26
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 30
17526: PUSH
17527: LD_INT 28
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PPUSH
17544: CALL_OW 69
17548: ST_TO_ADDR
// if not tmp then
17549: LD_VAR 0 2
17553: NOT
17554: IFFALSE 17558
// exit ;
17556: GO 17587
// for i in tmp do
17558: LD_ADDR_VAR 0 1
17562: PUSH
17563: LD_VAR 0 2
17567: PUSH
17568: FOR_IN
17569: IFFALSE 17585
// SetLives ( i , 1 ) ;
17571: LD_VAR 0 1
17575: PPUSH
17576: LD_INT 1
17578: PPUSH
17579: CALL_OW 234
17583: GO 17568
17585: POP
17586: POP
// end ;
17587: PPOPN 2
17589: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17590: LD_EXP 42
17594: PUSH
17595: LD_EXP 91
17599: AND
17600: IFFALSE 17874
17602: GO 17604
17604: DISABLE
17605: LD_INT 0
17607: PPUSH
17608: PPUSH
17609: PPUSH
// begin i := rand ( 1 , 7 ) ;
17610: LD_ADDR_VAR 0 1
17614: PUSH
17615: LD_INT 1
17617: PPUSH
17618: LD_INT 7
17620: PPUSH
17621: CALL_OW 12
17625: ST_TO_ADDR
// case i of 1 :
17626: LD_VAR 0 1
17630: PUSH
17631: LD_INT 1
17633: DOUBLE
17634: EQUAL
17635: IFTRUE 17639
17637: GO 17649
17639: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17640: LD_STRING earthquake(getX(game), 0, 32)
17642: PPUSH
17643: CALL_OW 559
17647: GO 17874
17649: LD_INT 2
17651: DOUBLE
17652: EQUAL
17653: IFTRUE 17657
17655: GO 17671
17657: POP
// begin ToLua ( displayStucuk(); ) ;
17658: LD_STRING displayStucuk();
17660: PPUSH
17661: CALL_OW 559
// ResetFog ;
17665: CALL_OW 335
// end ; 3 :
17669: GO 17874
17671: LD_INT 3
17673: DOUBLE
17674: EQUAL
17675: IFTRUE 17679
17677: GO 17783
17679: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17680: LD_ADDR_VAR 0 2
17684: PUSH
17685: LD_INT 22
17687: PUSH
17688: LD_OWVAR 2
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 25
17699: PUSH
17700: LD_INT 1
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PPUSH
17711: CALL_OW 69
17715: ST_TO_ADDR
// if not tmp then
17716: LD_VAR 0 2
17720: NOT
17721: IFFALSE 17725
// exit ;
17723: GO 17874
// un := tmp [ rand ( 1 , tmp ) ] ;
17725: LD_ADDR_VAR 0 3
17729: PUSH
17730: LD_VAR 0 2
17734: PUSH
17735: LD_INT 1
17737: PPUSH
17738: LD_VAR 0 2
17742: PPUSH
17743: CALL_OW 12
17747: ARRAY
17748: ST_TO_ADDR
// if Crawls ( un ) then
17749: LD_VAR 0 3
17753: PPUSH
17754: CALL_OW 318
17758: IFFALSE 17769
// ComWalk ( un ) ;
17760: LD_VAR 0 3
17764: PPUSH
17765: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17769: LD_VAR 0 3
17773: PPUSH
17774: LD_INT 8
17776: PPUSH
17777: CALL_OW 336
// end ; 4 :
17781: GO 17874
17783: LD_INT 4
17785: DOUBLE
17786: EQUAL
17787: IFTRUE 17791
17789: GO 17852
17791: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17792: LD_ADDR_VAR 0 2
17796: PUSH
17797: LD_INT 22
17799: PUSH
17800: LD_OWVAR 2
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 30
17811: PUSH
17812: LD_INT 29
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PPUSH
17823: CALL_OW 69
17827: ST_TO_ADDR
// if not tmp then
17828: LD_VAR 0 2
17832: NOT
17833: IFFALSE 17837
// exit ;
17835: GO 17874
// DestroyUnit ( tmp [ 1 ] ) ;
17837: LD_VAR 0 2
17841: PUSH
17842: LD_INT 1
17844: ARRAY
17845: PPUSH
17846: CALL_OW 65
// end ; 5 .. 7 :
17850: GO 17874
17852: LD_INT 5
17854: DOUBLE
17855: GREATEREQUAL
17856: IFFALSE 17864
17858: LD_INT 7
17860: DOUBLE
17861: LESSEQUAL
17862: IFTRUE 17866
17864: GO 17873
17866: POP
// StreamSibBomb ; end ;
17867: CALL 14124 0 0
17871: GO 17874
17873: POP
// end ;
17874: PPOPN 3
17876: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17877: LD_EXP 42
17881: PUSH
17882: LD_EXP 92
17886: AND
17887: IFFALSE 18043
17889: GO 17891
17891: DISABLE
17892: LD_INT 0
17894: PPUSH
17895: PPUSH
17896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17897: LD_ADDR_VAR 0 2
17901: PUSH
17902: LD_INT 81
17904: PUSH
17905: LD_OWVAR 2
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 2
17916: PUSH
17917: LD_INT 21
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 21
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: LIST
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PPUSH
17946: CALL_OW 69
17950: ST_TO_ADDR
// if not tmp then
17951: LD_VAR 0 2
17955: NOT
17956: IFFALSE 17960
// exit ;
17958: GO 18043
// p := 0 ;
17960: LD_ADDR_VAR 0 3
17964: PUSH
17965: LD_INT 0
17967: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17968: LD_INT 35
17970: PPUSH
17971: CALL_OW 67
// p := p + 1 ;
17975: LD_ADDR_VAR 0 3
17979: PUSH
17980: LD_VAR 0 3
17984: PUSH
17985: LD_INT 1
17987: PLUS
17988: ST_TO_ADDR
// for i in tmp do
17989: LD_ADDR_VAR 0 1
17993: PUSH
17994: LD_VAR 0 2
17998: PUSH
17999: FOR_IN
18000: IFFALSE 18031
// if GetLives ( i ) < 1000 then
18002: LD_VAR 0 1
18006: PPUSH
18007: CALL_OW 256
18011: PUSH
18012: LD_INT 1000
18014: LESS
18015: IFFALSE 18029
// SetLives ( i , 1000 ) ;
18017: LD_VAR 0 1
18021: PPUSH
18022: LD_INT 1000
18024: PPUSH
18025: CALL_OW 234
18029: GO 17999
18031: POP
18032: POP
// until p > 20 ;
18033: LD_VAR 0 3
18037: PUSH
18038: LD_INT 20
18040: GREATER
18041: IFFALSE 17968
// end ;
18043: PPOPN 3
18045: END
// every 0 0$1 trigger StreamModeActive and sTime do
18046: LD_EXP 42
18050: PUSH
18051: LD_EXP 93
18055: AND
18056: IFFALSE 18091
18058: GO 18060
18060: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18061: LD_INT 28
18063: PPUSH
18064: LD_OWVAR 2
18068: PPUSH
18069: LD_INT 2
18071: PPUSH
18072: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18076: LD_INT 30
18078: PPUSH
18079: LD_OWVAR 2
18083: PPUSH
18084: LD_INT 2
18086: PPUSH
18087: CALL_OW 322
// end ;
18091: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18092: LD_EXP 42
18096: PUSH
18097: LD_EXP 94
18101: AND
18102: IFFALSE 18223
18104: GO 18106
18106: DISABLE
18107: LD_INT 0
18109: PPUSH
18110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18111: LD_ADDR_VAR 0 2
18115: PUSH
18116: LD_INT 22
18118: PUSH
18119: LD_OWVAR 2
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 21
18130: PUSH
18131: LD_INT 1
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 3
18140: PUSH
18141: LD_INT 23
18143: PUSH
18144: LD_INT 0
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: LIST
18159: PPUSH
18160: CALL_OW 69
18164: ST_TO_ADDR
// if not tmp then
18165: LD_VAR 0 2
18169: NOT
18170: IFFALSE 18174
// exit ;
18172: GO 18223
// for i in tmp do
18174: LD_ADDR_VAR 0 1
18178: PUSH
18179: LD_VAR 0 2
18183: PUSH
18184: FOR_IN
18185: IFFALSE 18221
// begin if Crawls ( i ) then
18187: LD_VAR 0 1
18191: PPUSH
18192: CALL_OW 318
18196: IFFALSE 18207
// ComWalk ( i ) ;
18198: LD_VAR 0 1
18202: PPUSH
18203: CALL_OW 138
// SetClass ( i , 2 ) ;
18207: LD_VAR 0 1
18211: PPUSH
18212: LD_INT 2
18214: PPUSH
18215: CALL_OW 336
// end ;
18219: GO 18184
18221: POP
18222: POP
// end ;
18223: PPOPN 2
18225: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18226: LD_EXP 42
18230: PUSH
18231: LD_EXP 95
18235: AND
18236: IFFALSE 18517
18238: GO 18240
18240: DISABLE
18241: LD_INT 0
18243: PPUSH
18244: PPUSH
18245: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18246: LD_OWVAR 2
18250: PPUSH
18251: LD_INT 9
18253: PPUSH
18254: LD_INT 1
18256: PPUSH
18257: LD_INT 1
18259: PPUSH
18260: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18264: LD_INT 9
18266: PPUSH
18267: LD_OWVAR 2
18271: PPUSH
18272: CALL_OW 343
// uc_side := 9 ;
18276: LD_ADDR_OWVAR 20
18280: PUSH
18281: LD_INT 9
18283: ST_TO_ADDR
// uc_nation := 2 ;
18284: LD_ADDR_OWVAR 21
18288: PUSH
18289: LD_INT 2
18291: ST_TO_ADDR
// hc_name := Dark Warrior ;
18292: LD_ADDR_OWVAR 26
18296: PUSH
18297: LD_STRING Dark Warrior
18299: ST_TO_ADDR
// hc_gallery :=  ;
18300: LD_ADDR_OWVAR 33
18304: PUSH
18305: LD_STRING 
18307: ST_TO_ADDR
// hc_noskilllimit := true ;
18308: LD_ADDR_OWVAR 76
18312: PUSH
18313: LD_INT 1
18315: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18316: LD_ADDR_OWVAR 31
18320: PUSH
18321: LD_INT 30
18323: PUSH
18324: LD_INT 30
18326: PUSH
18327: LD_INT 30
18329: PUSH
18330: LD_INT 30
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: ST_TO_ADDR
// un := CreateHuman ;
18339: LD_ADDR_VAR 0 3
18343: PUSH
18344: CALL_OW 44
18348: ST_TO_ADDR
// hc_noskilllimit := false ;
18349: LD_ADDR_OWVAR 76
18353: PUSH
18354: LD_INT 0
18356: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18357: LD_VAR 0 3
18361: PPUSH
18362: LD_INT 1
18364: PPUSH
18365: CALL_OW 51
// p := 0 ;
18369: LD_ADDR_VAR 0 2
18373: PUSH
18374: LD_INT 0
18376: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18377: LD_INT 35
18379: PPUSH
18380: CALL_OW 67
// p := p + 1 ;
18384: LD_ADDR_VAR 0 2
18388: PUSH
18389: LD_VAR 0 2
18393: PUSH
18394: LD_INT 1
18396: PLUS
18397: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18398: LD_VAR 0 3
18402: PPUSH
18403: CALL_OW 256
18407: PUSH
18408: LD_INT 1000
18410: LESS
18411: IFFALSE 18425
// SetLives ( un , 1000 ) ;
18413: LD_VAR 0 3
18417: PPUSH
18418: LD_INT 1000
18420: PPUSH
18421: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18425: LD_VAR 0 3
18429: PPUSH
18430: LD_INT 81
18432: PUSH
18433: LD_OWVAR 2
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 91
18444: PUSH
18445: LD_VAR 0 3
18449: PUSH
18450: LD_INT 30
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: LIST
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PPUSH
18462: CALL_OW 69
18466: PPUSH
18467: LD_VAR 0 3
18471: PPUSH
18472: CALL_OW 74
18476: PPUSH
18477: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18481: LD_VAR 0 2
18485: PUSH
18486: LD_INT 60
18488: GREATER
18489: PUSH
18490: LD_VAR 0 3
18494: PPUSH
18495: CALL_OW 301
18499: OR
18500: IFFALSE 18377
// if un then
18502: LD_VAR 0 3
18506: IFFALSE 18517
// RemoveUnit ( un ) ;
18508: LD_VAR 0 3
18512: PPUSH
18513: CALL_OW 64
// end ;
18517: PPOPN 3
18519: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18520: LD_INT 0
18522: PPUSH
// case cmd of 301 :
18523: LD_VAR 0 1
18527: PUSH
18528: LD_INT 301
18530: DOUBLE
18531: EQUAL
18532: IFTRUE 18536
18534: GO 18568
18536: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18537: LD_VAR 0 6
18541: PPUSH
18542: LD_VAR 0 7
18546: PPUSH
18547: LD_VAR 0 8
18551: PPUSH
18552: LD_VAR 0 4
18556: PPUSH
18557: LD_VAR 0 5
18561: PPUSH
18562: CALL 19769 0 5
18566: GO 18689
18568: LD_INT 302
18570: DOUBLE
18571: EQUAL
18572: IFTRUE 18576
18574: GO 18613
18576: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18577: LD_VAR 0 6
18581: PPUSH
18582: LD_VAR 0 7
18586: PPUSH
18587: LD_VAR 0 8
18591: PPUSH
18592: LD_VAR 0 9
18596: PPUSH
18597: LD_VAR 0 4
18601: PPUSH
18602: LD_VAR 0 5
18606: PPUSH
18607: CALL 19860 0 6
18611: GO 18689
18613: LD_INT 303
18615: DOUBLE
18616: EQUAL
18617: IFTRUE 18621
18619: GO 18658
18621: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18622: LD_VAR 0 6
18626: PPUSH
18627: LD_VAR 0 7
18631: PPUSH
18632: LD_VAR 0 8
18636: PPUSH
18637: LD_VAR 0 9
18641: PPUSH
18642: LD_VAR 0 4
18646: PPUSH
18647: LD_VAR 0 5
18651: PPUSH
18652: CALL 18694 0 6
18656: GO 18689
18658: LD_INT 304
18660: DOUBLE
18661: EQUAL
18662: IFTRUE 18666
18664: GO 18688
18666: POP
// hHackTeleport ( unit , x , y ) ; end ;
18667: LD_VAR 0 2
18671: PPUSH
18672: LD_VAR 0 4
18676: PPUSH
18677: LD_VAR 0 5
18681: PPUSH
18682: CALL 20453 0 3
18686: GO 18689
18688: POP
// end ;
18689: LD_VAR 0 12
18693: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18694: LD_INT 0
18696: PPUSH
18697: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18698: LD_VAR 0 1
18702: PUSH
18703: LD_INT 1
18705: LESS
18706: PUSH
18707: LD_VAR 0 1
18711: PUSH
18712: LD_INT 3
18714: GREATER
18715: OR
18716: PUSH
18717: LD_VAR 0 5
18721: PPUSH
18722: LD_VAR 0 6
18726: PPUSH
18727: CALL_OW 428
18731: OR
18732: IFFALSE 18736
// exit ;
18734: GO 19456
// uc_side := your_side ;
18736: LD_ADDR_OWVAR 20
18740: PUSH
18741: LD_OWVAR 2
18745: ST_TO_ADDR
// uc_nation := nation ;
18746: LD_ADDR_OWVAR 21
18750: PUSH
18751: LD_VAR 0 1
18755: ST_TO_ADDR
// bc_level = 1 ;
18756: LD_ADDR_OWVAR 43
18760: PUSH
18761: LD_INT 1
18763: ST_TO_ADDR
// case btype of 1 :
18764: LD_VAR 0 2
18768: PUSH
18769: LD_INT 1
18771: DOUBLE
18772: EQUAL
18773: IFTRUE 18777
18775: GO 18788
18777: POP
// bc_type := b_depot ; 2 :
18778: LD_ADDR_OWVAR 42
18782: PUSH
18783: LD_INT 0
18785: ST_TO_ADDR
18786: GO 19400
18788: LD_INT 2
18790: DOUBLE
18791: EQUAL
18792: IFTRUE 18796
18794: GO 18807
18796: POP
// bc_type := b_warehouse ; 3 :
18797: LD_ADDR_OWVAR 42
18801: PUSH
18802: LD_INT 1
18804: ST_TO_ADDR
18805: GO 19400
18807: LD_INT 3
18809: DOUBLE
18810: EQUAL
18811: IFTRUE 18815
18813: GO 18826
18815: POP
// bc_type := b_lab ; 4 .. 9 :
18816: LD_ADDR_OWVAR 42
18820: PUSH
18821: LD_INT 6
18823: ST_TO_ADDR
18824: GO 19400
18826: LD_INT 4
18828: DOUBLE
18829: GREATEREQUAL
18830: IFFALSE 18838
18832: LD_INT 9
18834: DOUBLE
18835: LESSEQUAL
18836: IFTRUE 18840
18838: GO 18892
18840: POP
// begin bc_type := b_lab_half ;
18841: LD_ADDR_OWVAR 42
18845: PUSH
18846: LD_INT 7
18848: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18849: LD_ADDR_OWVAR 44
18853: PUSH
18854: LD_INT 10
18856: PUSH
18857: LD_INT 11
18859: PUSH
18860: LD_INT 12
18862: PUSH
18863: LD_INT 15
18865: PUSH
18866: LD_INT 14
18868: PUSH
18869: LD_INT 13
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: PUSH
18880: LD_VAR 0 2
18884: PUSH
18885: LD_INT 3
18887: MINUS
18888: ARRAY
18889: ST_TO_ADDR
// end ; 10 .. 13 :
18890: GO 19400
18892: LD_INT 10
18894: DOUBLE
18895: GREATEREQUAL
18896: IFFALSE 18904
18898: LD_INT 13
18900: DOUBLE
18901: LESSEQUAL
18902: IFTRUE 18906
18904: GO 18983
18906: POP
// begin bc_type := b_lab_full ;
18907: LD_ADDR_OWVAR 42
18911: PUSH
18912: LD_INT 8
18914: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18915: LD_ADDR_OWVAR 44
18919: PUSH
18920: LD_INT 10
18922: PUSH
18923: LD_INT 12
18925: PUSH
18926: LD_INT 14
18928: PUSH
18929: LD_INT 13
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: PUSH
18938: LD_VAR 0 2
18942: PUSH
18943: LD_INT 9
18945: MINUS
18946: ARRAY
18947: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18948: LD_ADDR_OWVAR 45
18952: PUSH
18953: LD_INT 11
18955: PUSH
18956: LD_INT 15
18958: PUSH
18959: LD_INT 12
18961: PUSH
18962: LD_INT 15
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: PUSH
18971: LD_VAR 0 2
18975: PUSH
18976: LD_INT 9
18978: MINUS
18979: ARRAY
18980: ST_TO_ADDR
// end ; 14 :
18981: GO 19400
18983: LD_INT 14
18985: DOUBLE
18986: EQUAL
18987: IFTRUE 18991
18989: GO 19002
18991: POP
// bc_type := b_workshop ; 15 :
18992: LD_ADDR_OWVAR 42
18996: PUSH
18997: LD_INT 2
18999: ST_TO_ADDR
19000: GO 19400
19002: LD_INT 15
19004: DOUBLE
19005: EQUAL
19006: IFTRUE 19010
19008: GO 19021
19010: POP
// bc_type := b_factory ; 16 :
19011: LD_ADDR_OWVAR 42
19015: PUSH
19016: LD_INT 3
19018: ST_TO_ADDR
19019: GO 19400
19021: LD_INT 16
19023: DOUBLE
19024: EQUAL
19025: IFTRUE 19029
19027: GO 19040
19029: POP
// bc_type := b_ext_gun ; 17 :
19030: LD_ADDR_OWVAR 42
19034: PUSH
19035: LD_INT 17
19037: ST_TO_ADDR
19038: GO 19400
19040: LD_INT 17
19042: DOUBLE
19043: EQUAL
19044: IFTRUE 19048
19046: GO 19076
19048: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19049: LD_ADDR_OWVAR 42
19053: PUSH
19054: LD_INT 19
19056: PUSH
19057: LD_INT 23
19059: PUSH
19060: LD_INT 19
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: LIST
19067: PUSH
19068: LD_VAR 0 1
19072: ARRAY
19073: ST_TO_ADDR
19074: GO 19400
19076: LD_INT 18
19078: DOUBLE
19079: EQUAL
19080: IFTRUE 19084
19082: GO 19095
19084: POP
// bc_type := b_ext_radar ; 19 :
19085: LD_ADDR_OWVAR 42
19089: PUSH
19090: LD_INT 20
19092: ST_TO_ADDR
19093: GO 19400
19095: LD_INT 19
19097: DOUBLE
19098: EQUAL
19099: IFTRUE 19103
19101: GO 19114
19103: POP
// bc_type := b_ext_radio ; 20 :
19104: LD_ADDR_OWVAR 42
19108: PUSH
19109: LD_INT 22
19111: ST_TO_ADDR
19112: GO 19400
19114: LD_INT 20
19116: DOUBLE
19117: EQUAL
19118: IFTRUE 19122
19120: GO 19133
19122: POP
// bc_type := b_ext_siberium ; 21 :
19123: LD_ADDR_OWVAR 42
19127: PUSH
19128: LD_INT 21
19130: ST_TO_ADDR
19131: GO 19400
19133: LD_INT 21
19135: DOUBLE
19136: EQUAL
19137: IFTRUE 19141
19139: GO 19152
19141: POP
// bc_type := b_ext_computer ; 22 :
19142: LD_ADDR_OWVAR 42
19146: PUSH
19147: LD_INT 24
19149: ST_TO_ADDR
19150: GO 19400
19152: LD_INT 22
19154: DOUBLE
19155: EQUAL
19156: IFTRUE 19160
19158: GO 19171
19160: POP
// bc_type := b_ext_track ; 23 :
19161: LD_ADDR_OWVAR 42
19165: PUSH
19166: LD_INT 16
19168: ST_TO_ADDR
19169: GO 19400
19171: LD_INT 23
19173: DOUBLE
19174: EQUAL
19175: IFTRUE 19179
19177: GO 19190
19179: POP
// bc_type := b_ext_laser ; 24 :
19180: LD_ADDR_OWVAR 42
19184: PUSH
19185: LD_INT 25
19187: ST_TO_ADDR
19188: GO 19400
19190: LD_INT 24
19192: DOUBLE
19193: EQUAL
19194: IFTRUE 19198
19196: GO 19209
19198: POP
// bc_type := b_control_tower ; 25 :
19199: LD_ADDR_OWVAR 42
19203: PUSH
19204: LD_INT 36
19206: ST_TO_ADDR
19207: GO 19400
19209: LD_INT 25
19211: DOUBLE
19212: EQUAL
19213: IFTRUE 19217
19215: GO 19228
19217: POP
// bc_type := b_breastwork ; 26 :
19218: LD_ADDR_OWVAR 42
19222: PUSH
19223: LD_INT 31
19225: ST_TO_ADDR
19226: GO 19400
19228: LD_INT 26
19230: DOUBLE
19231: EQUAL
19232: IFTRUE 19236
19234: GO 19247
19236: POP
// bc_type := b_bunker ; 27 :
19237: LD_ADDR_OWVAR 42
19241: PUSH
19242: LD_INT 32
19244: ST_TO_ADDR
19245: GO 19400
19247: LD_INT 27
19249: DOUBLE
19250: EQUAL
19251: IFTRUE 19255
19253: GO 19266
19255: POP
// bc_type := b_turret ; 28 :
19256: LD_ADDR_OWVAR 42
19260: PUSH
19261: LD_INT 33
19263: ST_TO_ADDR
19264: GO 19400
19266: LD_INT 28
19268: DOUBLE
19269: EQUAL
19270: IFTRUE 19274
19272: GO 19285
19274: POP
// bc_type := b_armoury ; 29 :
19275: LD_ADDR_OWVAR 42
19279: PUSH
19280: LD_INT 4
19282: ST_TO_ADDR
19283: GO 19400
19285: LD_INT 29
19287: DOUBLE
19288: EQUAL
19289: IFTRUE 19293
19291: GO 19304
19293: POP
// bc_type := b_barracks ; 30 :
19294: LD_ADDR_OWVAR 42
19298: PUSH
19299: LD_INT 5
19301: ST_TO_ADDR
19302: GO 19400
19304: LD_INT 30
19306: DOUBLE
19307: EQUAL
19308: IFTRUE 19312
19310: GO 19323
19312: POP
// bc_type := b_solar_power ; 31 :
19313: LD_ADDR_OWVAR 42
19317: PUSH
19318: LD_INT 27
19320: ST_TO_ADDR
19321: GO 19400
19323: LD_INT 31
19325: DOUBLE
19326: EQUAL
19327: IFTRUE 19331
19329: GO 19342
19331: POP
// bc_type := b_oil_power ; 32 :
19332: LD_ADDR_OWVAR 42
19336: PUSH
19337: LD_INT 26
19339: ST_TO_ADDR
19340: GO 19400
19342: LD_INT 32
19344: DOUBLE
19345: EQUAL
19346: IFTRUE 19350
19348: GO 19361
19350: POP
// bc_type := b_siberite_power ; 33 :
19351: LD_ADDR_OWVAR 42
19355: PUSH
19356: LD_INT 28
19358: ST_TO_ADDR
19359: GO 19400
19361: LD_INT 33
19363: DOUBLE
19364: EQUAL
19365: IFTRUE 19369
19367: GO 19380
19369: POP
// bc_type := b_oil_mine ; 34 :
19370: LD_ADDR_OWVAR 42
19374: PUSH
19375: LD_INT 29
19377: ST_TO_ADDR
19378: GO 19400
19380: LD_INT 34
19382: DOUBLE
19383: EQUAL
19384: IFTRUE 19388
19386: GO 19399
19388: POP
// bc_type := b_siberite_mine ; end ;
19389: LD_ADDR_OWVAR 42
19393: PUSH
19394: LD_INT 30
19396: ST_TO_ADDR
19397: GO 19400
19399: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19400: LD_ADDR_VAR 0 8
19404: PUSH
19405: LD_VAR 0 5
19409: PPUSH
19410: LD_VAR 0 6
19414: PPUSH
19415: LD_VAR 0 3
19419: PPUSH
19420: CALL_OW 47
19424: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19425: LD_OWVAR 42
19429: PUSH
19430: LD_INT 32
19432: PUSH
19433: LD_INT 33
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: IN
19440: IFFALSE 19456
// PlaceWeaponTurret ( b , weapon ) ;
19442: LD_VAR 0 8
19446: PPUSH
19447: LD_VAR 0 4
19451: PPUSH
19452: CALL_OW 431
// end ;
19456: LD_VAR 0 7
19460: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19461: LD_INT 0
19463: PPUSH
19464: PPUSH
19465: PPUSH
19466: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19467: LD_ADDR_VAR 0 4
19471: PUSH
19472: LD_INT 22
19474: PUSH
19475: LD_OWVAR 2
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 2
19486: PUSH
19487: LD_INT 30
19489: PUSH
19490: LD_INT 0
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 30
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: LIST
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PPUSH
19516: CALL_OW 69
19520: ST_TO_ADDR
// if not tmp then
19521: LD_VAR 0 4
19525: NOT
19526: IFFALSE 19530
// exit ;
19528: GO 19589
// for i in tmp do
19530: LD_ADDR_VAR 0 2
19534: PUSH
19535: LD_VAR 0 4
19539: PUSH
19540: FOR_IN
19541: IFFALSE 19587
// for j = 1 to 3 do
19543: LD_ADDR_VAR 0 3
19547: PUSH
19548: DOUBLE
19549: LD_INT 1
19551: DEC
19552: ST_TO_ADDR
19553: LD_INT 3
19555: PUSH
19556: FOR_TO
19557: IFFALSE 19583
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19559: LD_VAR 0 2
19563: PPUSH
19564: CALL_OW 274
19568: PPUSH
19569: LD_VAR 0 3
19573: PPUSH
19574: LD_INT 99999
19576: PPUSH
19577: CALL_OW 277
19581: GO 19556
19583: POP
19584: POP
19585: GO 19540
19587: POP
19588: POP
// end ;
19589: LD_VAR 0 1
19593: RET
// export function hHackSetLevel10 ; var i , j ; begin
19594: LD_INT 0
19596: PPUSH
19597: PPUSH
19598: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19599: LD_ADDR_VAR 0 2
19603: PUSH
19604: LD_INT 21
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PPUSH
19614: CALL_OW 69
19618: PUSH
19619: FOR_IN
19620: IFFALSE 19672
// if IsSelected ( i ) then
19622: LD_VAR 0 2
19626: PPUSH
19627: CALL_OW 306
19631: IFFALSE 19670
// begin for j := 1 to 4 do
19633: LD_ADDR_VAR 0 3
19637: PUSH
19638: DOUBLE
19639: LD_INT 1
19641: DEC
19642: ST_TO_ADDR
19643: LD_INT 4
19645: PUSH
19646: FOR_TO
19647: IFFALSE 19668
// SetSkill ( i , j , 10 ) ;
19649: LD_VAR 0 2
19653: PPUSH
19654: LD_VAR 0 3
19658: PPUSH
19659: LD_INT 10
19661: PPUSH
19662: CALL_OW 237
19666: GO 19646
19668: POP
19669: POP
// end ;
19670: GO 19619
19672: POP
19673: POP
// end ;
19674: LD_VAR 0 1
19678: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19679: LD_INT 0
19681: PPUSH
19682: PPUSH
19683: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19684: LD_ADDR_VAR 0 2
19688: PUSH
19689: LD_INT 22
19691: PUSH
19692: LD_OWVAR 2
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 21
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PPUSH
19715: CALL_OW 69
19719: PUSH
19720: FOR_IN
19721: IFFALSE 19762
// begin for j := 1 to 4 do
19723: LD_ADDR_VAR 0 3
19727: PUSH
19728: DOUBLE
19729: LD_INT 1
19731: DEC
19732: ST_TO_ADDR
19733: LD_INT 4
19735: PUSH
19736: FOR_TO
19737: IFFALSE 19758
// SetSkill ( i , j , 10 ) ;
19739: LD_VAR 0 2
19743: PPUSH
19744: LD_VAR 0 3
19748: PPUSH
19749: LD_INT 10
19751: PPUSH
19752: CALL_OW 237
19756: GO 19736
19758: POP
19759: POP
// end ;
19760: GO 19720
19762: POP
19763: POP
// end ;
19764: LD_VAR 0 1
19768: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19769: LD_INT 0
19771: PPUSH
// uc_side := your_side ;
19772: LD_ADDR_OWVAR 20
19776: PUSH
19777: LD_OWVAR 2
19781: ST_TO_ADDR
// uc_nation := nation ;
19782: LD_ADDR_OWVAR 21
19786: PUSH
19787: LD_VAR 0 1
19791: ST_TO_ADDR
// InitHc ;
19792: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19796: LD_INT 0
19798: PPUSH
19799: LD_VAR 0 2
19803: PPUSH
19804: LD_VAR 0 3
19808: PPUSH
19809: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19813: LD_VAR 0 4
19817: PPUSH
19818: LD_VAR 0 5
19822: PPUSH
19823: CALL_OW 428
19827: PUSH
19828: LD_INT 0
19830: EQUAL
19831: IFFALSE 19855
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19833: CALL_OW 44
19837: PPUSH
19838: LD_VAR 0 4
19842: PPUSH
19843: LD_VAR 0 5
19847: PPUSH
19848: LD_INT 1
19850: PPUSH
19851: CALL_OW 48
// end ;
19855: LD_VAR 0 6
19859: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19860: LD_INT 0
19862: PPUSH
19863: PPUSH
// uc_side := your_side ;
19864: LD_ADDR_OWVAR 20
19868: PUSH
19869: LD_OWVAR 2
19873: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19874: LD_VAR 0 1
19878: PUSH
19879: LD_INT 1
19881: PUSH
19882: LD_INT 2
19884: PUSH
19885: LD_INT 3
19887: PUSH
19888: LD_INT 4
19890: PUSH
19891: LD_INT 5
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: IN
19901: IFFALSE 19913
// uc_nation := nation_american else
19903: LD_ADDR_OWVAR 21
19907: PUSH
19908: LD_INT 1
19910: ST_TO_ADDR
19911: GO 19956
// if chassis in [ 11 , 12 , 13 , 14 ] then
19913: LD_VAR 0 1
19917: PUSH
19918: LD_INT 11
19920: PUSH
19921: LD_INT 12
19923: PUSH
19924: LD_INT 13
19926: PUSH
19927: LD_INT 14
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: IN
19936: IFFALSE 19948
// uc_nation := nation_arabian else
19938: LD_ADDR_OWVAR 21
19942: PUSH
19943: LD_INT 2
19945: ST_TO_ADDR
19946: GO 19956
// uc_nation := nation_russian ;
19948: LD_ADDR_OWVAR 21
19952: PUSH
19953: LD_INT 3
19955: ST_TO_ADDR
// vc_chassis := chassis ;
19956: LD_ADDR_OWVAR 37
19960: PUSH
19961: LD_VAR 0 1
19965: ST_TO_ADDR
// vc_engine := engine ;
19966: LD_ADDR_OWVAR 39
19970: PUSH
19971: LD_VAR 0 2
19975: ST_TO_ADDR
// vc_control := control ;
19976: LD_ADDR_OWVAR 38
19980: PUSH
19981: LD_VAR 0 3
19985: ST_TO_ADDR
// vc_weapon := weapon ;
19986: LD_ADDR_OWVAR 40
19990: PUSH
19991: LD_VAR 0 4
19995: ST_TO_ADDR
// un := CreateVehicle ;
19996: LD_ADDR_VAR 0 8
20000: PUSH
20001: CALL_OW 45
20005: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20006: LD_VAR 0 8
20010: PPUSH
20011: LD_INT 0
20013: PPUSH
20014: LD_INT 5
20016: PPUSH
20017: CALL_OW 12
20021: PPUSH
20022: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20026: LD_VAR 0 8
20030: PPUSH
20031: LD_VAR 0 5
20035: PPUSH
20036: LD_VAR 0 6
20040: PPUSH
20041: LD_INT 1
20043: PPUSH
20044: CALL_OW 48
// end ;
20048: LD_VAR 0 7
20052: RET
// export hInvincible ; every 1 do
20053: GO 20055
20055: DISABLE
// hInvincible := [ ] ;
20056: LD_ADDR_EXP 96
20060: PUSH
20061: EMPTY
20062: ST_TO_ADDR
20063: END
// every 10 do var i ;
20064: GO 20066
20066: DISABLE
20067: LD_INT 0
20069: PPUSH
// begin enable ;
20070: ENABLE
// if not hInvincible then
20071: LD_EXP 96
20075: NOT
20076: IFFALSE 20080
// exit ;
20078: GO 20124
// for i in hInvincible do
20080: LD_ADDR_VAR 0 1
20084: PUSH
20085: LD_EXP 96
20089: PUSH
20090: FOR_IN
20091: IFFALSE 20122
// if GetLives ( i ) < 1000 then
20093: LD_VAR 0 1
20097: PPUSH
20098: CALL_OW 256
20102: PUSH
20103: LD_INT 1000
20105: LESS
20106: IFFALSE 20120
// SetLives ( i , 1000 ) ;
20108: LD_VAR 0 1
20112: PPUSH
20113: LD_INT 1000
20115: PPUSH
20116: CALL_OW 234
20120: GO 20090
20122: POP
20123: POP
// end ;
20124: PPOPN 1
20126: END
// export function hHackInvincible ; var i ; begin
20127: LD_INT 0
20129: PPUSH
20130: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20131: LD_ADDR_VAR 0 2
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: LD_INT 21
20141: PUSH
20142: LD_INT 1
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 21
20151: PUSH
20152: LD_INT 2
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: LIST
20163: PPUSH
20164: CALL_OW 69
20168: PUSH
20169: FOR_IN
20170: IFFALSE 20231
// if IsSelected ( i ) then
20172: LD_VAR 0 2
20176: PPUSH
20177: CALL_OW 306
20181: IFFALSE 20229
// begin if i in hInvincible then
20183: LD_VAR 0 2
20187: PUSH
20188: LD_EXP 96
20192: IN
20193: IFFALSE 20213
// hInvincible := hInvincible diff i else
20195: LD_ADDR_EXP 96
20199: PUSH
20200: LD_EXP 96
20204: PUSH
20205: LD_VAR 0 2
20209: DIFF
20210: ST_TO_ADDR
20211: GO 20229
// hInvincible := hInvincible union i ;
20213: LD_ADDR_EXP 96
20217: PUSH
20218: LD_EXP 96
20222: PUSH
20223: LD_VAR 0 2
20227: UNION
20228: ST_TO_ADDR
// end ;
20229: GO 20169
20231: POP
20232: POP
// end ;
20233: LD_VAR 0 1
20237: RET
// export function hHackInvisible ; var i , j ; begin
20238: LD_INT 0
20240: PPUSH
20241: PPUSH
20242: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20243: LD_ADDR_VAR 0 2
20247: PUSH
20248: LD_INT 21
20250: PUSH
20251: LD_INT 1
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PPUSH
20258: CALL_OW 69
20262: PUSH
20263: FOR_IN
20264: IFFALSE 20288
// if IsSelected ( i ) then
20266: LD_VAR 0 2
20270: PPUSH
20271: CALL_OW 306
20275: IFFALSE 20286
// ComForceInvisible ( i ) ;
20277: LD_VAR 0 2
20281: PPUSH
20282: CALL_OW 496
20286: GO 20263
20288: POP
20289: POP
// end ;
20290: LD_VAR 0 1
20294: RET
// export function hHackChangeYourSide ; begin
20295: LD_INT 0
20297: PPUSH
// if your_side = 8 then
20298: LD_OWVAR 2
20302: PUSH
20303: LD_INT 8
20305: EQUAL
20306: IFFALSE 20318
// your_side := 0 else
20308: LD_ADDR_OWVAR 2
20312: PUSH
20313: LD_INT 0
20315: ST_TO_ADDR
20316: GO 20332
// your_side := your_side + 1 ;
20318: LD_ADDR_OWVAR 2
20322: PUSH
20323: LD_OWVAR 2
20327: PUSH
20328: LD_INT 1
20330: PLUS
20331: ST_TO_ADDR
// end ;
20332: LD_VAR 0 1
20336: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20337: LD_INT 0
20339: PPUSH
20340: PPUSH
20341: PPUSH
// for i in all_units do
20342: LD_ADDR_VAR 0 2
20346: PUSH
20347: LD_OWVAR 3
20351: PUSH
20352: FOR_IN
20353: IFFALSE 20431
// if IsSelected ( i ) then
20355: LD_VAR 0 2
20359: PPUSH
20360: CALL_OW 306
20364: IFFALSE 20429
// begin j := GetSide ( i ) ;
20366: LD_ADDR_VAR 0 3
20370: PUSH
20371: LD_VAR 0 2
20375: PPUSH
20376: CALL_OW 255
20380: ST_TO_ADDR
// if j = 8 then
20381: LD_VAR 0 3
20385: PUSH
20386: LD_INT 8
20388: EQUAL
20389: IFFALSE 20401
// j := 0 else
20391: LD_ADDR_VAR 0 3
20395: PUSH
20396: LD_INT 0
20398: ST_TO_ADDR
20399: GO 20415
// j := j + 1 ;
20401: LD_ADDR_VAR 0 3
20405: PUSH
20406: LD_VAR 0 3
20410: PUSH
20411: LD_INT 1
20413: PLUS
20414: ST_TO_ADDR
// SetSide ( i , j ) ;
20415: LD_VAR 0 2
20419: PPUSH
20420: LD_VAR 0 3
20424: PPUSH
20425: CALL_OW 235
// end ;
20429: GO 20352
20431: POP
20432: POP
// end ;
20433: LD_VAR 0 1
20437: RET
// export function hHackFog ; begin
20438: LD_INT 0
20440: PPUSH
// FogOff ( true ) ;
20441: LD_INT 1
20443: PPUSH
20444: CALL_OW 344
// end ;
20448: LD_VAR 0 1
20452: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20453: LD_INT 0
20455: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20456: LD_VAR 0 1
20460: PPUSH
20461: LD_VAR 0 2
20465: PPUSH
20466: LD_VAR 0 3
20470: PPUSH
20471: LD_INT 1
20473: PPUSH
20474: LD_INT 1
20476: PPUSH
20477: CALL_OW 483
// CenterOnXY ( x , y ) ;
20481: LD_VAR 0 2
20485: PPUSH
20486: LD_VAR 0 3
20490: PPUSH
20491: CALL_OW 84
// end ; end_of_file
20495: LD_VAR 0 4
20499: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20500: LD_INT 0
20502: PPUSH
20503: PPUSH
20504: PPUSH
20505: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20506: LD_VAR 0 1
20510: PPUSH
20511: CALL_OW 264
20515: PUSH
20516: LD_EXP 28
20520: EQUAL
20521: IFFALSE 20593
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20523: LD_INT 68
20525: PPUSH
20526: LD_VAR 0 1
20530: PPUSH
20531: CALL_OW 255
20535: PPUSH
20536: CALL_OW 321
20540: PUSH
20541: LD_INT 2
20543: EQUAL
20544: IFFALSE 20556
// eff := 70 else
20546: LD_ADDR_VAR 0 4
20550: PUSH
20551: LD_INT 70
20553: ST_TO_ADDR
20554: GO 20564
// eff := 30 ;
20556: LD_ADDR_VAR 0 4
20560: PUSH
20561: LD_INT 30
20563: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20564: LD_VAR 0 1
20568: PPUSH
20569: CALL_OW 250
20573: PPUSH
20574: LD_VAR 0 1
20578: PPUSH
20579: CALL_OW 251
20583: PPUSH
20584: LD_VAR 0 4
20588: PPUSH
20589: CALL_OW 495
// end ; end ;
20593: LD_VAR 0 2
20597: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20598: LD_INT 0
20600: PPUSH
// end ;
20601: LD_VAR 0 4
20605: RET
// export function SOS_Command ( cmd ) ; begin
20606: LD_INT 0
20608: PPUSH
// end ;
20609: LD_VAR 0 2
20613: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20614: LD_INT 0
20616: PPUSH
// if cmd = 121 then
20617: LD_VAR 0 1
20621: PUSH
20622: LD_INT 121
20624: EQUAL
20625: IFFALSE 20627
// end ;
20627: LD_VAR 0 6
20631: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20632: LD_INT 0
20634: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20635: LD_VAR 0 1
20639: PUSH
20640: LD_INT 250
20642: EQUAL
20643: PUSH
20644: LD_VAR 0 2
20648: PPUSH
20649: CALL_OW 264
20653: PUSH
20654: LD_EXP 31
20658: EQUAL
20659: AND
20660: IFFALSE 20681
// MinerPlaceMine ( unit , x , y ) ;
20662: LD_VAR 0 2
20666: PPUSH
20667: LD_VAR 0 4
20671: PPUSH
20672: LD_VAR 0 5
20676: PPUSH
20677: CALL 23030 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20681: LD_VAR 0 1
20685: PUSH
20686: LD_INT 251
20688: EQUAL
20689: PUSH
20690: LD_VAR 0 2
20694: PPUSH
20695: CALL_OW 264
20699: PUSH
20700: LD_EXP 31
20704: EQUAL
20705: AND
20706: IFFALSE 20727
// MinerDetonateMine ( unit , x , y ) ;
20708: LD_VAR 0 2
20712: PPUSH
20713: LD_VAR 0 4
20717: PPUSH
20718: LD_VAR 0 5
20722: PPUSH
20723: CALL 23307 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20727: LD_VAR 0 1
20731: PUSH
20732: LD_INT 252
20734: EQUAL
20735: PUSH
20736: LD_VAR 0 2
20740: PPUSH
20741: CALL_OW 264
20745: PUSH
20746: LD_EXP 31
20750: EQUAL
20751: AND
20752: IFFALSE 20773
// MinerCreateMinefield ( unit , x , y ) ;
20754: LD_VAR 0 2
20758: PPUSH
20759: LD_VAR 0 4
20763: PPUSH
20764: LD_VAR 0 5
20768: PPUSH
20769: CALL 23724 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20773: LD_VAR 0 1
20777: PUSH
20778: LD_INT 253
20780: EQUAL
20781: PUSH
20782: LD_VAR 0 2
20786: PPUSH
20787: CALL_OW 257
20791: PUSH
20792: LD_INT 5
20794: EQUAL
20795: AND
20796: IFFALSE 20817
// ComBinocular ( unit , x , y ) ;
20798: LD_VAR 0 2
20802: PPUSH
20803: LD_VAR 0 4
20807: PPUSH
20808: LD_VAR 0 5
20812: PPUSH
20813: CALL 24095 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20817: LD_VAR 0 1
20821: PUSH
20822: LD_INT 254
20824: EQUAL
20825: PUSH
20826: LD_VAR 0 2
20830: PPUSH
20831: CALL_OW 264
20835: PUSH
20836: LD_EXP 26
20840: EQUAL
20841: AND
20842: PUSH
20843: LD_VAR 0 3
20847: PPUSH
20848: CALL_OW 263
20852: PUSH
20853: LD_INT 3
20855: EQUAL
20856: AND
20857: IFFALSE 20873
// HackDestroyVehicle ( unit , selectedUnit ) ;
20859: LD_VAR 0 2
20863: PPUSH
20864: LD_VAR 0 3
20868: PPUSH
20869: CALL 22390 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20873: LD_VAR 0 1
20877: PUSH
20878: LD_INT 255
20880: EQUAL
20881: PUSH
20882: LD_VAR 0 2
20886: PPUSH
20887: CALL_OW 264
20891: PUSH
20892: LD_INT 14
20894: PUSH
20895: LD_INT 53
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: IN
20902: AND
20903: PUSH
20904: LD_VAR 0 4
20908: PPUSH
20909: LD_VAR 0 5
20913: PPUSH
20914: CALL_OW 488
20918: AND
20919: IFFALSE 20943
// CutTreeXYR ( unit , x , y , 12 ) ;
20921: LD_VAR 0 2
20925: PPUSH
20926: LD_VAR 0 4
20930: PPUSH
20931: LD_VAR 0 5
20935: PPUSH
20936: LD_INT 12
20938: PPUSH
20939: CALL 20956 0 4
// end ;
20943: LD_VAR 0 6
20947: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
20948: LD_INT 0
20950: PPUSH
// end ;
20951: LD_VAR 0 4
20955: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20956: LD_INT 0
20958: PPUSH
20959: PPUSH
20960: PPUSH
20961: PPUSH
20962: PPUSH
20963: PPUSH
20964: PPUSH
20965: PPUSH
20966: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20967: LD_VAR 0 1
20971: NOT
20972: PUSH
20973: LD_VAR 0 2
20977: PPUSH
20978: LD_VAR 0 3
20982: PPUSH
20983: CALL_OW 488
20987: NOT
20988: OR
20989: PUSH
20990: LD_VAR 0 4
20994: NOT
20995: OR
20996: IFFALSE 21000
// exit ;
20998: GO 21340
// list := [ ] ;
21000: LD_ADDR_VAR 0 13
21004: PUSH
21005: EMPTY
21006: ST_TO_ADDR
// if x - r < 0 then
21007: LD_VAR 0 2
21011: PUSH
21012: LD_VAR 0 4
21016: MINUS
21017: PUSH
21018: LD_INT 0
21020: LESS
21021: IFFALSE 21033
// min_x := 0 else
21023: LD_ADDR_VAR 0 7
21027: PUSH
21028: LD_INT 0
21030: ST_TO_ADDR
21031: GO 21049
// min_x := x - r ;
21033: LD_ADDR_VAR 0 7
21037: PUSH
21038: LD_VAR 0 2
21042: PUSH
21043: LD_VAR 0 4
21047: MINUS
21048: ST_TO_ADDR
// if y - r < 0 then
21049: LD_VAR 0 3
21053: PUSH
21054: LD_VAR 0 4
21058: MINUS
21059: PUSH
21060: LD_INT 0
21062: LESS
21063: IFFALSE 21075
// min_y := 0 else
21065: LD_ADDR_VAR 0 8
21069: PUSH
21070: LD_INT 0
21072: ST_TO_ADDR
21073: GO 21091
// min_y := y - r ;
21075: LD_ADDR_VAR 0 8
21079: PUSH
21080: LD_VAR 0 3
21084: PUSH
21085: LD_VAR 0 4
21089: MINUS
21090: ST_TO_ADDR
// max_x := x + r ;
21091: LD_ADDR_VAR 0 9
21095: PUSH
21096: LD_VAR 0 2
21100: PUSH
21101: LD_VAR 0 4
21105: PLUS
21106: ST_TO_ADDR
// max_y := y + r ;
21107: LD_ADDR_VAR 0 10
21111: PUSH
21112: LD_VAR 0 3
21116: PUSH
21117: LD_VAR 0 4
21121: PLUS
21122: ST_TO_ADDR
// for _x = min_x to max_x do
21123: LD_ADDR_VAR 0 11
21127: PUSH
21128: DOUBLE
21129: LD_VAR 0 7
21133: DEC
21134: ST_TO_ADDR
21135: LD_VAR 0 9
21139: PUSH
21140: FOR_TO
21141: IFFALSE 21258
// for _y = min_y to max_y do
21143: LD_ADDR_VAR 0 12
21147: PUSH
21148: DOUBLE
21149: LD_VAR 0 8
21153: DEC
21154: ST_TO_ADDR
21155: LD_VAR 0 10
21159: PUSH
21160: FOR_TO
21161: IFFALSE 21254
// begin if not ValidHex ( _x , _y ) then
21163: LD_VAR 0 11
21167: PPUSH
21168: LD_VAR 0 12
21172: PPUSH
21173: CALL_OW 488
21177: NOT
21178: IFFALSE 21182
// continue ;
21180: GO 21160
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21182: LD_VAR 0 11
21186: PPUSH
21187: LD_VAR 0 12
21191: PPUSH
21192: CALL_OW 351
21196: PUSH
21197: LD_VAR 0 11
21201: PPUSH
21202: LD_VAR 0 12
21206: PPUSH
21207: CALL_OW 554
21211: AND
21212: IFFALSE 21252
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21214: LD_ADDR_VAR 0 13
21218: PUSH
21219: LD_VAR 0 13
21223: PPUSH
21224: LD_VAR 0 13
21228: PUSH
21229: LD_INT 1
21231: PLUS
21232: PPUSH
21233: LD_VAR 0 11
21237: PUSH
21238: LD_VAR 0 12
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PPUSH
21247: CALL_OW 2
21251: ST_TO_ADDR
// end ;
21252: GO 21160
21254: POP
21255: POP
21256: GO 21140
21258: POP
21259: POP
// if not list then
21260: LD_VAR 0 13
21264: NOT
21265: IFFALSE 21269
// exit ;
21267: GO 21340
// for i in list do
21269: LD_ADDR_VAR 0 6
21273: PUSH
21274: LD_VAR 0 13
21278: PUSH
21279: FOR_IN
21280: IFFALSE 21338
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21282: LD_VAR 0 1
21286: PPUSH
21287: LD_STRING M
21289: PUSH
21290: LD_VAR 0 6
21294: PUSH
21295: LD_INT 1
21297: ARRAY
21298: PUSH
21299: LD_VAR 0 6
21303: PUSH
21304: LD_INT 2
21306: ARRAY
21307: PUSH
21308: LD_INT 0
21310: PUSH
21311: LD_INT 0
21313: PUSH
21314: LD_INT 0
21316: PUSH
21317: LD_INT 0
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: PUSH
21329: EMPTY
21330: LIST
21331: PPUSH
21332: CALL_OW 447
21336: GO 21279
21338: POP
21339: POP
// end ;
21340: LD_VAR 0 5
21344: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21345: LD_EXP 99
21349: NOT
21350: IFFALSE 21400
21352: GO 21354
21354: DISABLE
// begin initHack := true ;
21355: LD_ADDR_EXP 99
21359: PUSH
21360: LD_INT 1
21362: ST_TO_ADDR
// hackTanks := [ ] ;
21363: LD_ADDR_EXP 100
21367: PUSH
21368: EMPTY
21369: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21370: LD_ADDR_EXP 101
21374: PUSH
21375: EMPTY
21376: ST_TO_ADDR
// hackLimit := 3 ;
21377: LD_ADDR_EXP 102
21381: PUSH
21382: LD_INT 3
21384: ST_TO_ADDR
// hackDist := 12 ;
21385: LD_ADDR_EXP 103
21389: PUSH
21390: LD_INT 12
21392: ST_TO_ADDR
// hackCounter := [ ] ;
21393: LD_ADDR_EXP 104
21397: PUSH
21398: EMPTY
21399: ST_TO_ADDR
// end ;
21400: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21401: LD_EXP 99
21405: PUSH
21406: LD_INT 34
21408: PUSH
21409: LD_EXP 26
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PPUSH
21418: CALL_OW 69
21422: AND
21423: IFFALSE 21678
21425: GO 21427
21427: DISABLE
21428: LD_INT 0
21430: PPUSH
21431: PPUSH
// begin enable ;
21432: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21433: LD_ADDR_VAR 0 1
21437: PUSH
21438: LD_INT 34
21440: PUSH
21441: LD_EXP 26
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PPUSH
21450: CALL_OW 69
21454: PUSH
21455: FOR_IN
21456: IFFALSE 21676
// begin if not i in hackTanks then
21458: LD_VAR 0 1
21462: PUSH
21463: LD_EXP 100
21467: IN
21468: NOT
21469: IFFALSE 21552
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21471: LD_ADDR_EXP 100
21475: PUSH
21476: LD_EXP 100
21480: PPUSH
21481: LD_EXP 100
21485: PUSH
21486: LD_INT 1
21488: PLUS
21489: PPUSH
21490: LD_VAR 0 1
21494: PPUSH
21495: CALL_OW 1
21499: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21500: LD_ADDR_EXP 101
21504: PUSH
21505: LD_EXP 101
21509: PPUSH
21510: LD_EXP 101
21514: PUSH
21515: LD_INT 1
21517: PLUS
21518: PPUSH
21519: EMPTY
21520: PPUSH
21521: CALL_OW 1
21525: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21526: LD_ADDR_EXP 104
21530: PUSH
21531: LD_EXP 104
21535: PPUSH
21536: LD_EXP 104
21540: PUSH
21541: LD_INT 1
21543: PLUS
21544: PPUSH
21545: EMPTY
21546: PPUSH
21547: CALL_OW 1
21551: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21552: LD_VAR 0 1
21556: PPUSH
21557: CALL_OW 302
21561: NOT
21562: IFFALSE 21575
// begin HackUnlinkAll ( i ) ;
21564: LD_VAR 0 1
21568: PPUSH
21569: CALL 21681 0 1
// continue ;
21573: GO 21455
// end ; HackCheckCapturedStatus ( i ) ;
21575: LD_VAR 0 1
21579: PPUSH
21580: CALL 22124 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21584: LD_ADDR_VAR 0 2
21588: PUSH
21589: LD_INT 81
21591: PUSH
21592: LD_VAR 0 1
21596: PPUSH
21597: CALL_OW 255
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 33
21608: PUSH
21609: LD_INT 3
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 91
21618: PUSH
21619: LD_VAR 0 1
21623: PUSH
21624: LD_EXP 103
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 50
21636: PUSH
21637: EMPTY
21638: LIST
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: PPUSH
21646: CALL_OW 69
21650: ST_TO_ADDR
// if not tmp then
21651: LD_VAR 0 2
21655: NOT
21656: IFFALSE 21660
// continue ;
21658: GO 21455
// HackLink ( i , tmp ) ;
21660: LD_VAR 0 1
21664: PPUSH
21665: LD_VAR 0 2
21669: PPUSH
21670: CALL 21817 0 2
// end ;
21674: GO 21455
21676: POP
21677: POP
// end ;
21678: PPOPN 2
21680: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21681: LD_INT 0
21683: PPUSH
21684: PPUSH
21685: PPUSH
// if not hack in hackTanks then
21686: LD_VAR 0 1
21690: PUSH
21691: LD_EXP 100
21695: IN
21696: NOT
21697: IFFALSE 21701
// exit ;
21699: GO 21812
// index := GetElementIndex ( hackTanks , hack ) ;
21701: LD_ADDR_VAR 0 4
21705: PUSH
21706: LD_EXP 100
21710: PPUSH
21711: LD_VAR 0 1
21715: PPUSH
21716: CALL 29246 0 2
21720: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21721: LD_EXP 101
21725: PUSH
21726: LD_VAR 0 4
21730: ARRAY
21731: IFFALSE 21812
// begin for i in hackTanksCaptured [ index ] do
21733: LD_ADDR_VAR 0 3
21737: PUSH
21738: LD_EXP 101
21742: PUSH
21743: LD_VAR 0 4
21747: ARRAY
21748: PUSH
21749: FOR_IN
21750: IFFALSE 21776
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21752: LD_VAR 0 3
21756: PUSH
21757: LD_INT 1
21759: ARRAY
21760: PPUSH
21761: LD_VAR 0 3
21765: PUSH
21766: LD_INT 2
21768: ARRAY
21769: PPUSH
21770: CALL_OW 235
21774: GO 21749
21776: POP
21777: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21778: LD_ADDR_EXP 101
21782: PUSH
21783: LD_EXP 101
21787: PPUSH
21788: LD_VAR 0 4
21792: PPUSH
21793: EMPTY
21794: PPUSH
21795: CALL_OW 1
21799: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21800: LD_VAR 0 1
21804: PPUSH
21805: LD_INT 0
21807: PPUSH
21808: CALL_OW 505
// end ; end ;
21812: LD_VAR 0 2
21816: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21817: LD_INT 0
21819: PPUSH
21820: PPUSH
21821: PPUSH
// if not hack in hackTanks or not vehicles then
21822: LD_VAR 0 1
21826: PUSH
21827: LD_EXP 100
21831: IN
21832: NOT
21833: PUSH
21834: LD_VAR 0 2
21838: NOT
21839: OR
21840: IFFALSE 21844
// exit ;
21842: GO 22119
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21844: LD_ADDR_VAR 0 2
21848: PUSH
21849: LD_VAR 0 1
21853: PPUSH
21854: LD_VAR 0 2
21858: PPUSH
21859: LD_INT 1
21861: PPUSH
21862: LD_INT 1
21864: PPUSH
21865: CALL 29896 0 4
21869: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21870: LD_ADDR_VAR 0 5
21874: PUSH
21875: LD_EXP 100
21879: PPUSH
21880: LD_VAR 0 1
21884: PPUSH
21885: CALL 29246 0 2
21889: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21890: LD_EXP 101
21894: PUSH
21895: LD_VAR 0 5
21899: ARRAY
21900: PUSH
21901: LD_EXP 102
21905: LESS
21906: IFFALSE 22095
// begin for i := 1 to vehicles do
21908: LD_ADDR_VAR 0 4
21912: PUSH
21913: DOUBLE
21914: LD_INT 1
21916: DEC
21917: ST_TO_ADDR
21918: LD_VAR 0 2
21922: PUSH
21923: FOR_TO
21924: IFFALSE 22093
// begin if hackTanksCaptured [ index ] = hackLimit then
21926: LD_EXP 101
21930: PUSH
21931: LD_VAR 0 5
21935: ARRAY
21936: PUSH
21937: LD_EXP 102
21941: EQUAL
21942: IFFALSE 21946
// break ;
21944: GO 22093
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21946: LD_ADDR_EXP 104
21950: PUSH
21951: LD_EXP 104
21955: PPUSH
21956: LD_VAR 0 5
21960: PPUSH
21961: LD_EXP 104
21965: PUSH
21966: LD_VAR 0 5
21970: ARRAY
21971: PUSH
21972: LD_INT 1
21974: PLUS
21975: PPUSH
21976: CALL_OW 1
21980: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21981: LD_ADDR_EXP 101
21985: PUSH
21986: LD_EXP 101
21990: PPUSH
21991: LD_VAR 0 5
21995: PUSH
21996: LD_EXP 101
22000: PUSH
22001: LD_VAR 0 5
22005: ARRAY
22006: PUSH
22007: LD_INT 1
22009: PLUS
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PPUSH
22015: LD_VAR 0 2
22019: PUSH
22020: LD_VAR 0 4
22024: ARRAY
22025: PUSH
22026: LD_VAR 0 2
22030: PUSH
22031: LD_VAR 0 4
22035: ARRAY
22036: PPUSH
22037: CALL_OW 255
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PPUSH
22046: CALL 29461 0 3
22050: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22051: LD_VAR 0 2
22055: PUSH
22056: LD_VAR 0 4
22060: ARRAY
22061: PPUSH
22062: LD_VAR 0 1
22066: PPUSH
22067: CALL_OW 255
22071: PPUSH
22072: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22076: LD_VAR 0 2
22080: PUSH
22081: LD_VAR 0 4
22085: ARRAY
22086: PPUSH
22087: CALL_OW 141
// end ;
22091: GO 21923
22093: POP
22094: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22095: LD_VAR 0 1
22099: PPUSH
22100: LD_EXP 101
22104: PUSH
22105: LD_VAR 0 5
22109: ARRAY
22110: PUSH
22111: LD_INT 0
22113: PLUS
22114: PPUSH
22115: CALL_OW 505
// end ;
22119: LD_VAR 0 3
22123: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22124: LD_INT 0
22126: PPUSH
22127: PPUSH
22128: PPUSH
22129: PPUSH
// if not hack in hackTanks then
22130: LD_VAR 0 1
22134: PUSH
22135: LD_EXP 100
22139: IN
22140: NOT
22141: IFFALSE 22145
// exit ;
22143: GO 22385
// index := GetElementIndex ( hackTanks , hack ) ;
22145: LD_ADDR_VAR 0 4
22149: PUSH
22150: LD_EXP 100
22154: PPUSH
22155: LD_VAR 0 1
22159: PPUSH
22160: CALL 29246 0 2
22164: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22165: LD_ADDR_VAR 0 3
22169: PUSH
22170: DOUBLE
22171: LD_EXP 101
22175: PUSH
22176: LD_VAR 0 4
22180: ARRAY
22181: INC
22182: ST_TO_ADDR
22183: LD_INT 1
22185: PUSH
22186: FOR_DOWNTO
22187: IFFALSE 22359
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22189: LD_ADDR_VAR 0 5
22193: PUSH
22194: LD_EXP 101
22198: PUSH
22199: LD_VAR 0 4
22203: ARRAY
22204: PUSH
22205: LD_VAR 0 3
22209: ARRAY
22210: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22211: LD_VAR 0 5
22215: PUSH
22216: LD_INT 1
22218: ARRAY
22219: PPUSH
22220: CALL_OW 302
22224: NOT
22225: PUSH
22226: LD_VAR 0 5
22230: PUSH
22231: LD_INT 1
22233: ARRAY
22234: PPUSH
22235: CALL_OW 255
22239: PUSH
22240: LD_VAR 0 1
22244: PPUSH
22245: CALL_OW 255
22249: NONEQUAL
22250: OR
22251: IFFALSE 22357
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22253: LD_VAR 0 5
22257: PUSH
22258: LD_INT 1
22260: ARRAY
22261: PPUSH
22262: CALL_OW 305
22266: PUSH
22267: LD_VAR 0 5
22271: PUSH
22272: LD_INT 1
22274: ARRAY
22275: PPUSH
22276: CALL_OW 255
22280: PUSH
22281: LD_VAR 0 1
22285: PPUSH
22286: CALL_OW 255
22290: EQUAL
22291: AND
22292: IFFALSE 22316
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22294: LD_VAR 0 5
22298: PUSH
22299: LD_INT 1
22301: ARRAY
22302: PPUSH
22303: LD_VAR 0 5
22307: PUSH
22308: LD_INT 2
22310: ARRAY
22311: PPUSH
22312: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22316: LD_ADDR_EXP 101
22320: PUSH
22321: LD_EXP 101
22325: PPUSH
22326: LD_VAR 0 4
22330: PPUSH
22331: LD_EXP 101
22335: PUSH
22336: LD_VAR 0 4
22340: ARRAY
22341: PPUSH
22342: LD_VAR 0 3
22346: PPUSH
22347: CALL_OW 3
22351: PPUSH
22352: CALL_OW 1
22356: ST_TO_ADDR
// end ; end ;
22357: GO 22186
22359: POP
22360: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22361: LD_VAR 0 1
22365: PPUSH
22366: LD_EXP 101
22370: PUSH
22371: LD_VAR 0 4
22375: ARRAY
22376: PUSH
22377: LD_INT 0
22379: PLUS
22380: PPUSH
22381: CALL_OW 505
// end ;
22385: LD_VAR 0 2
22389: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22390: LD_INT 0
22392: PPUSH
22393: PPUSH
22394: PPUSH
22395: PPUSH
// if not hack in hackTanks then
22396: LD_VAR 0 1
22400: PUSH
22401: LD_EXP 100
22405: IN
22406: NOT
22407: IFFALSE 22411
// exit ;
22409: GO 22496
// index := GetElementIndex ( hackTanks , hack ) ;
22411: LD_ADDR_VAR 0 5
22415: PUSH
22416: LD_EXP 100
22420: PPUSH
22421: LD_VAR 0 1
22425: PPUSH
22426: CALL 29246 0 2
22430: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22431: LD_ADDR_VAR 0 4
22435: PUSH
22436: DOUBLE
22437: LD_INT 1
22439: DEC
22440: ST_TO_ADDR
22441: LD_EXP 101
22445: PUSH
22446: LD_VAR 0 5
22450: ARRAY
22451: PUSH
22452: FOR_TO
22453: IFFALSE 22494
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22455: LD_EXP 101
22459: PUSH
22460: LD_VAR 0 5
22464: ARRAY
22465: PUSH
22466: LD_VAR 0 4
22470: ARRAY
22471: PUSH
22472: LD_INT 1
22474: ARRAY
22475: PUSH
22476: LD_VAR 0 2
22480: EQUAL
22481: IFFALSE 22492
// KillUnit ( vehicle ) ;
22483: LD_VAR 0 2
22487: PPUSH
22488: CALL_OW 66
22492: GO 22452
22494: POP
22495: POP
// end ;
22496: LD_VAR 0 3
22500: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22501: LD_EXP 105
22505: NOT
22506: IFFALSE 22541
22508: GO 22510
22510: DISABLE
// begin initMiner := true ;
22511: LD_ADDR_EXP 105
22515: PUSH
22516: LD_INT 1
22518: ST_TO_ADDR
// minersList := [ ] ;
22519: LD_ADDR_EXP 106
22523: PUSH
22524: EMPTY
22525: ST_TO_ADDR
// minerMinesList := [ ] ;
22526: LD_ADDR_EXP 107
22530: PUSH
22531: EMPTY
22532: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22533: LD_ADDR_EXP 108
22537: PUSH
22538: LD_INT 5
22540: ST_TO_ADDR
// end ;
22541: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22542: LD_EXP 105
22546: PUSH
22547: LD_INT 34
22549: PUSH
22550: LD_EXP 31
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PPUSH
22559: CALL_OW 69
22563: AND
22564: IFFALSE 23027
22566: GO 22568
22568: DISABLE
22569: LD_INT 0
22571: PPUSH
22572: PPUSH
22573: PPUSH
22574: PPUSH
// begin enable ;
22575: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22576: LD_ADDR_VAR 0 1
22580: PUSH
22581: LD_INT 34
22583: PUSH
22584: LD_EXP 31
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PPUSH
22593: CALL_OW 69
22597: PUSH
22598: FOR_IN
22599: IFFALSE 22671
// begin if not i in minersList then
22601: LD_VAR 0 1
22605: PUSH
22606: LD_EXP 106
22610: IN
22611: NOT
22612: IFFALSE 22669
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22614: LD_ADDR_EXP 106
22618: PUSH
22619: LD_EXP 106
22623: PPUSH
22624: LD_EXP 106
22628: PUSH
22629: LD_INT 1
22631: PLUS
22632: PPUSH
22633: LD_VAR 0 1
22637: PPUSH
22638: CALL_OW 1
22642: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22643: LD_ADDR_EXP 107
22647: PUSH
22648: LD_EXP 107
22652: PPUSH
22653: LD_EXP 107
22657: PUSH
22658: LD_INT 1
22660: PLUS
22661: PPUSH
22662: EMPTY
22663: PPUSH
22664: CALL_OW 1
22668: ST_TO_ADDR
// end end ;
22669: GO 22598
22671: POP
22672: POP
// for i := minerMinesList downto 1 do
22673: LD_ADDR_VAR 0 1
22677: PUSH
22678: DOUBLE
22679: LD_EXP 107
22683: INC
22684: ST_TO_ADDR
22685: LD_INT 1
22687: PUSH
22688: FOR_DOWNTO
22689: IFFALSE 23025
// begin if IsLive ( minersList [ i ] ) then
22691: LD_EXP 106
22695: PUSH
22696: LD_VAR 0 1
22700: ARRAY
22701: PPUSH
22702: CALL_OW 300
22706: IFFALSE 22734
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22708: LD_EXP 106
22712: PUSH
22713: LD_VAR 0 1
22717: ARRAY
22718: PPUSH
22719: LD_EXP 107
22723: PUSH
22724: LD_VAR 0 1
22728: ARRAY
22729: PPUSH
22730: CALL_OW 505
// if not minerMinesList [ i ] then
22734: LD_EXP 107
22738: PUSH
22739: LD_VAR 0 1
22743: ARRAY
22744: NOT
22745: IFFALSE 22749
// continue ;
22747: GO 22688
// for j := minerMinesList [ i ] downto 1 do
22749: LD_ADDR_VAR 0 2
22753: PUSH
22754: DOUBLE
22755: LD_EXP 107
22759: PUSH
22760: LD_VAR 0 1
22764: ARRAY
22765: INC
22766: ST_TO_ADDR
22767: LD_INT 1
22769: PUSH
22770: FOR_DOWNTO
22771: IFFALSE 23021
// begin side := GetSide ( minersList [ i ] ) ;
22773: LD_ADDR_VAR 0 3
22777: PUSH
22778: LD_EXP 106
22782: PUSH
22783: LD_VAR 0 1
22787: ARRAY
22788: PPUSH
22789: CALL_OW 255
22793: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22794: LD_ADDR_VAR 0 4
22798: PUSH
22799: LD_EXP 107
22803: PUSH
22804: LD_VAR 0 1
22808: ARRAY
22809: PUSH
22810: LD_VAR 0 2
22814: ARRAY
22815: PUSH
22816: LD_INT 1
22818: ARRAY
22819: PPUSH
22820: LD_EXP 107
22824: PUSH
22825: LD_VAR 0 1
22829: ARRAY
22830: PUSH
22831: LD_VAR 0 2
22835: ARRAY
22836: PUSH
22837: LD_INT 2
22839: ARRAY
22840: PPUSH
22841: CALL_OW 428
22845: ST_TO_ADDR
// if not tmp then
22846: LD_VAR 0 4
22850: NOT
22851: IFFALSE 22855
// continue ;
22853: GO 22770
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22855: LD_VAR 0 4
22859: PUSH
22860: LD_INT 81
22862: PUSH
22863: LD_VAR 0 3
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PPUSH
22872: CALL_OW 69
22876: IN
22877: PUSH
22878: LD_EXP 107
22882: PUSH
22883: LD_VAR 0 1
22887: ARRAY
22888: PUSH
22889: LD_VAR 0 2
22893: ARRAY
22894: PUSH
22895: LD_INT 1
22897: ARRAY
22898: PPUSH
22899: LD_EXP 107
22903: PUSH
22904: LD_VAR 0 1
22908: ARRAY
22909: PUSH
22910: LD_VAR 0 2
22914: ARRAY
22915: PUSH
22916: LD_INT 2
22918: ARRAY
22919: PPUSH
22920: CALL_OW 458
22924: AND
22925: IFFALSE 23019
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22927: LD_EXP 107
22931: PUSH
22932: LD_VAR 0 1
22936: ARRAY
22937: PUSH
22938: LD_VAR 0 2
22942: ARRAY
22943: PUSH
22944: LD_INT 1
22946: ARRAY
22947: PPUSH
22948: LD_EXP 107
22952: PUSH
22953: LD_VAR 0 1
22957: ARRAY
22958: PUSH
22959: LD_VAR 0 2
22963: ARRAY
22964: PUSH
22965: LD_INT 2
22967: ARRAY
22968: PPUSH
22969: LD_VAR 0 3
22973: PPUSH
22974: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22978: LD_ADDR_EXP 107
22982: PUSH
22983: LD_EXP 107
22987: PPUSH
22988: LD_VAR 0 1
22992: PPUSH
22993: LD_EXP 107
22997: PUSH
22998: LD_VAR 0 1
23002: ARRAY
23003: PPUSH
23004: LD_VAR 0 2
23008: PPUSH
23009: CALL_OW 3
23013: PPUSH
23014: CALL_OW 1
23018: ST_TO_ADDR
// end ; end ;
23019: GO 22770
23021: POP
23022: POP
// end ;
23023: GO 22688
23025: POP
23026: POP
// end ;
23027: PPOPN 4
23029: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23030: LD_INT 0
23032: PPUSH
23033: PPUSH
// result := false ;
23034: LD_ADDR_VAR 0 4
23038: PUSH
23039: LD_INT 0
23041: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23042: LD_VAR 0 1
23046: PPUSH
23047: CALL_OW 264
23051: PUSH
23052: LD_EXP 31
23056: EQUAL
23057: NOT
23058: IFFALSE 23062
// exit ;
23060: GO 23302
// index := GetElementIndex ( minersList , unit ) ;
23062: LD_ADDR_VAR 0 5
23066: PUSH
23067: LD_EXP 106
23071: PPUSH
23072: LD_VAR 0 1
23076: PPUSH
23077: CALL 29246 0 2
23081: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23082: LD_EXP 107
23086: PUSH
23087: LD_VAR 0 5
23091: ARRAY
23092: PUSH
23093: LD_EXP 108
23097: GREATEREQUAL
23098: IFFALSE 23102
// exit ;
23100: GO 23302
// ComMoveXY ( unit , x , y ) ;
23102: LD_VAR 0 1
23106: PPUSH
23107: LD_VAR 0 2
23111: PPUSH
23112: LD_VAR 0 3
23116: PPUSH
23117: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23121: LD_INT 35
23123: PPUSH
23124: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23128: LD_VAR 0 1
23132: PPUSH
23133: LD_VAR 0 2
23137: PPUSH
23138: LD_VAR 0 3
23142: PPUSH
23143: CALL 59643 0 3
23147: NOT
23148: PUSH
23149: LD_VAR 0 1
23153: PPUSH
23154: CALL_OW 314
23158: AND
23159: IFFALSE 23163
// exit ;
23161: GO 23302
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23163: LD_VAR 0 2
23167: PPUSH
23168: LD_VAR 0 3
23172: PPUSH
23173: CALL_OW 428
23177: PUSH
23178: LD_VAR 0 1
23182: EQUAL
23183: PUSH
23184: LD_VAR 0 1
23188: PPUSH
23189: CALL_OW 314
23193: NOT
23194: AND
23195: IFFALSE 23121
// PlaySoundXY ( x , y , PlantMine ) ;
23197: LD_VAR 0 2
23201: PPUSH
23202: LD_VAR 0 3
23206: PPUSH
23207: LD_STRING PlantMine
23209: PPUSH
23210: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23214: LD_VAR 0 2
23218: PPUSH
23219: LD_VAR 0 3
23223: PPUSH
23224: LD_VAR 0 1
23228: PPUSH
23229: CALL_OW 255
23233: PPUSH
23234: LD_INT 0
23236: PPUSH
23237: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23241: LD_ADDR_EXP 107
23245: PUSH
23246: LD_EXP 107
23250: PPUSH
23251: LD_VAR 0 5
23255: PUSH
23256: LD_EXP 107
23260: PUSH
23261: LD_VAR 0 5
23265: ARRAY
23266: PUSH
23267: LD_INT 1
23269: PLUS
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PPUSH
23275: LD_VAR 0 2
23279: PUSH
23280: LD_VAR 0 3
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PPUSH
23289: CALL 29461 0 3
23293: ST_TO_ADDR
// result := true ;
23294: LD_ADDR_VAR 0 4
23298: PUSH
23299: LD_INT 1
23301: ST_TO_ADDR
// end ;
23302: LD_VAR 0 4
23306: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23307: LD_INT 0
23309: PPUSH
23310: PPUSH
23311: PPUSH
// if not unit in minersList then
23312: LD_VAR 0 1
23316: PUSH
23317: LD_EXP 106
23321: IN
23322: NOT
23323: IFFALSE 23327
// exit ;
23325: GO 23719
// index := GetElementIndex ( minersList , unit ) ;
23327: LD_ADDR_VAR 0 6
23331: PUSH
23332: LD_EXP 106
23336: PPUSH
23337: LD_VAR 0 1
23341: PPUSH
23342: CALL 29246 0 2
23346: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23347: LD_ADDR_VAR 0 5
23351: PUSH
23352: DOUBLE
23353: LD_EXP 107
23357: PUSH
23358: LD_VAR 0 6
23362: ARRAY
23363: INC
23364: ST_TO_ADDR
23365: LD_INT 1
23367: PUSH
23368: FOR_DOWNTO
23369: IFFALSE 23530
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23371: LD_EXP 107
23375: PUSH
23376: LD_VAR 0 6
23380: ARRAY
23381: PUSH
23382: LD_VAR 0 5
23386: ARRAY
23387: PUSH
23388: LD_INT 1
23390: ARRAY
23391: PUSH
23392: LD_VAR 0 2
23396: EQUAL
23397: PUSH
23398: LD_EXP 107
23402: PUSH
23403: LD_VAR 0 6
23407: ARRAY
23408: PUSH
23409: LD_VAR 0 5
23413: ARRAY
23414: PUSH
23415: LD_INT 2
23417: ARRAY
23418: PUSH
23419: LD_VAR 0 3
23423: EQUAL
23424: AND
23425: IFFALSE 23528
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23427: LD_EXP 107
23431: PUSH
23432: LD_VAR 0 6
23436: ARRAY
23437: PUSH
23438: LD_VAR 0 5
23442: ARRAY
23443: PUSH
23444: LD_INT 1
23446: ARRAY
23447: PPUSH
23448: LD_EXP 107
23452: PUSH
23453: LD_VAR 0 6
23457: ARRAY
23458: PUSH
23459: LD_VAR 0 5
23463: ARRAY
23464: PUSH
23465: LD_INT 2
23467: ARRAY
23468: PPUSH
23469: LD_VAR 0 1
23473: PPUSH
23474: CALL_OW 255
23478: PPUSH
23479: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23483: LD_ADDR_EXP 107
23487: PUSH
23488: LD_EXP 107
23492: PPUSH
23493: LD_VAR 0 6
23497: PPUSH
23498: LD_EXP 107
23502: PUSH
23503: LD_VAR 0 6
23507: ARRAY
23508: PPUSH
23509: LD_VAR 0 5
23513: PPUSH
23514: CALL_OW 3
23518: PPUSH
23519: CALL_OW 1
23523: ST_TO_ADDR
// exit ;
23524: POP
23525: POP
23526: GO 23719
// end ; end ;
23528: GO 23368
23530: POP
23531: POP
// for i := minerMinesList [ index ] downto 1 do
23532: LD_ADDR_VAR 0 5
23536: PUSH
23537: DOUBLE
23538: LD_EXP 107
23542: PUSH
23543: LD_VAR 0 6
23547: ARRAY
23548: INC
23549: ST_TO_ADDR
23550: LD_INT 1
23552: PUSH
23553: FOR_DOWNTO
23554: IFFALSE 23717
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23556: LD_EXP 107
23560: PUSH
23561: LD_VAR 0 6
23565: ARRAY
23566: PUSH
23567: LD_VAR 0 5
23571: ARRAY
23572: PUSH
23573: LD_INT 1
23575: ARRAY
23576: PPUSH
23577: LD_EXP 107
23581: PUSH
23582: LD_VAR 0 6
23586: ARRAY
23587: PUSH
23588: LD_VAR 0 5
23592: ARRAY
23593: PUSH
23594: LD_INT 2
23596: ARRAY
23597: PPUSH
23598: LD_VAR 0 2
23602: PPUSH
23603: LD_VAR 0 3
23607: PPUSH
23608: CALL_OW 298
23612: PUSH
23613: LD_INT 6
23615: LESS
23616: IFFALSE 23715
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23618: LD_EXP 107
23622: PUSH
23623: LD_VAR 0 6
23627: ARRAY
23628: PUSH
23629: LD_VAR 0 5
23633: ARRAY
23634: PUSH
23635: LD_INT 1
23637: ARRAY
23638: PPUSH
23639: LD_EXP 107
23643: PUSH
23644: LD_VAR 0 6
23648: ARRAY
23649: PUSH
23650: LD_VAR 0 5
23654: ARRAY
23655: PUSH
23656: LD_INT 2
23658: ARRAY
23659: PPUSH
23660: LD_VAR 0 1
23664: PPUSH
23665: CALL_OW 255
23669: PPUSH
23670: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23674: LD_ADDR_EXP 107
23678: PUSH
23679: LD_EXP 107
23683: PPUSH
23684: LD_VAR 0 6
23688: PPUSH
23689: LD_EXP 107
23693: PUSH
23694: LD_VAR 0 6
23698: ARRAY
23699: PPUSH
23700: LD_VAR 0 5
23704: PPUSH
23705: CALL_OW 3
23709: PPUSH
23710: CALL_OW 1
23714: ST_TO_ADDR
// end ; end ;
23715: GO 23553
23717: POP
23718: POP
// end ;
23719: LD_VAR 0 4
23723: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23724: LD_INT 0
23726: PPUSH
23727: PPUSH
23728: PPUSH
23729: PPUSH
23730: PPUSH
23731: PPUSH
23732: PPUSH
23733: PPUSH
23734: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23735: LD_VAR 0 1
23739: PPUSH
23740: CALL_OW 264
23744: PUSH
23745: LD_EXP 31
23749: EQUAL
23750: NOT
23751: PUSH
23752: LD_VAR 0 1
23756: PUSH
23757: LD_EXP 106
23761: IN
23762: NOT
23763: OR
23764: IFFALSE 23768
// exit ;
23766: GO 24090
// index := GetElementIndex ( minersList , unit ) ;
23768: LD_ADDR_VAR 0 6
23772: PUSH
23773: LD_EXP 106
23777: PPUSH
23778: LD_VAR 0 1
23782: PPUSH
23783: CALL 29246 0 2
23787: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23788: LD_ADDR_VAR 0 8
23792: PUSH
23793: LD_EXP 108
23797: PUSH
23798: LD_EXP 107
23802: PUSH
23803: LD_VAR 0 6
23807: ARRAY
23808: MINUS
23809: ST_TO_ADDR
// if not minesFreeAmount then
23810: LD_VAR 0 8
23814: NOT
23815: IFFALSE 23819
// exit ;
23817: GO 24090
// tmp := [ ] ;
23819: LD_ADDR_VAR 0 7
23823: PUSH
23824: EMPTY
23825: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23826: LD_ADDR_VAR 0 5
23830: PUSH
23831: DOUBLE
23832: LD_INT 1
23834: DEC
23835: ST_TO_ADDR
23836: LD_VAR 0 8
23840: PUSH
23841: FOR_TO
23842: IFFALSE 24037
// begin _d := rand ( 0 , 5 ) ;
23844: LD_ADDR_VAR 0 11
23848: PUSH
23849: LD_INT 0
23851: PPUSH
23852: LD_INT 5
23854: PPUSH
23855: CALL_OW 12
23859: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23860: LD_ADDR_VAR 0 12
23864: PUSH
23865: LD_INT 2
23867: PPUSH
23868: LD_INT 6
23870: PPUSH
23871: CALL_OW 12
23875: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23876: LD_ADDR_VAR 0 9
23880: PUSH
23881: LD_VAR 0 2
23885: PPUSH
23886: LD_VAR 0 11
23890: PPUSH
23891: LD_VAR 0 12
23895: PPUSH
23896: CALL_OW 272
23900: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23901: LD_ADDR_VAR 0 10
23905: PUSH
23906: LD_VAR 0 3
23910: PPUSH
23911: LD_VAR 0 11
23915: PPUSH
23916: LD_VAR 0 12
23920: PPUSH
23921: CALL_OW 273
23925: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23926: LD_VAR 0 9
23930: PPUSH
23931: LD_VAR 0 10
23935: PPUSH
23936: CALL_OW 488
23940: PUSH
23941: LD_VAR 0 9
23945: PUSH
23946: LD_VAR 0 10
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_VAR 0 7
23959: IN
23960: NOT
23961: AND
23962: PUSH
23963: LD_VAR 0 9
23967: PPUSH
23968: LD_VAR 0 10
23972: PPUSH
23973: CALL_OW 458
23977: NOT
23978: AND
23979: IFFALSE 24021
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23981: LD_ADDR_VAR 0 7
23985: PUSH
23986: LD_VAR 0 7
23990: PPUSH
23991: LD_VAR 0 7
23995: PUSH
23996: LD_INT 1
23998: PLUS
23999: PPUSH
24000: LD_VAR 0 9
24004: PUSH
24005: LD_VAR 0 10
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PPUSH
24014: CALL_OW 1
24018: ST_TO_ADDR
24019: GO 24035
// i := i - 1 ;
24021: LD_ADDR_VAR 0 5
24025: PUSH
24026: LD_VAR 0 5
24030: PUSH
24031: LD_INT 1
24033: MINUS
24034: ST_TO_ADDR
// end ;
24035: GO 23841
24037: POP
24038: POP
// for i in tmp do
24039: LD_ADDR_VAR 0 5
24043: PUSH
24044: LD_VAR 0 7
24048: PUSH
24049: FOR_IN
24050: IFFALSE 24088
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24052: LD_VAR 0 1
24056: PPUSH
24057: LD_VAR 0 5
24061: PUSH
24062: LD_INT 1
24064: ARRAY
24065: PPUSH
24066: LD_VAR 0 5
24070: PUSH
24071: LD_INT 2
24073: ARRAY
24074: PPUSH
24075: CALL 23030 0 3
24079: NOT
24080: IFFALSE 24086
// exit ;
24082: POP
24083: POP
24084: GO 24090
24086: GO 24049
24088: POP
24089: POP
// end ;
24090: LD_VAR 0 4
24094: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24095: LD_INT 0
24097: PPUSH
24098: PPUSH
24099: PPUSH
24100: PPUSH
24101: PPUSH
24102: PPUSH
24103: PPUSH
// if not GetClass ( unit ) = class_sniper then
24104: LD_VAR 0 1
24108: PPUSH
24109: CALL_OW 257
24113: PUSH
24114: LD_INT 5
24116: EQUAL
24117: NOT
24118: IFFALSE 24122
// exit ;
24120: GO 24510
// dist := 8 ;
24122: LD_ADDR_VAR 0 5
24126: PUSH
24127: LD_INT 8
24129: ST_TO_ADDR
// viewRange := 12 ;
24130: LD_ADDR_VAR 0 7
24134: PUSH
24135: LD_INT 12
24137: ST_TO_ADDR
// side := GetSide ( unit ) ;
24138: LD_ADDR_VAR 0 6
24142: PUSH
24143: LD_VAR 0 1
24147: PPUSH
24148: CALL_OW 255
24152: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24153: LD_INT 61
24155: PPUSH
24156: LD_VAR 0 6
24160: PPUSH
24161: CALL_OW 321
24165: PUSH
24166: LD_INT 2
24168: EQUAL
24169: IFFALSE 24179
// viewRange := 16 ;
24171: LD_ADDR_VAR 0 7
24175: PUSH
24176: LD_INT 16
24178: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24179: LD_VAR 0 1
24183: PPUSH
24184: LD_VAR 0 2
24188: PPUSH
24189: LD_VAR 0 3
24193: PPUSH
24194: CALL_OW 297
24198: PUSH
24199: LD_VAR 0 5
24203: GREATER
24204: IFFALSE 24283
// begin ComMoveXY ( unit , x , y ) ;
24206: LD_VAR 0 1
24210: PPUSH
24211: LD_VAR 0 2
24215: PPUSH
24216: LD_VAR 0 3
24220: PPUSH
24221: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24225: LD_INT 35
24227: PPUSH
24228: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24232: LD_VAR 0 1
24236: PPUSH
24237: LD_VAR 0 2
24241: PPUSH
24242: LD_VAR 0 3
24246: PPUSH
24247: CALL 59643 0 3
24251: NOT
24252: IFFALSE 24256
// exit ;
24254: GO 24510
// until GetDistUnitXY ( unit , x , y ) < dist ;
24256: LD_VAR 0 1
24260: PPUSH
24261: LD_VAR 0 2
24265: PPUSH
24266: LD_VAR 0 3
24270: PPUSH
24271: CALL_OW 297
24275: PUSH
24276: LD_VAR 0 5
24280: LESS
24281: IFFALSE 24225
// end ; ComTurnXY ( unit , x , y ) ;
24283: LD_VAR 0 1
24287: PPUSH
24288: LD_VAR 0 2
24292: PPUSH
24293: LD_VAR 0 3
24297: PPUSH
24298: CALL_OW 118
// wait ( 5 ) ;
24302: LD_INT 5
24304: PPUSH
24305: CALL_OW 67
// _d := GetDir ( unit ) ;
24309: LD_ADDR_VAR 0 10
24313: PUSH
24314: LD_VAR 0 1
24318: PPUSH
24319: CALL_OW 254
24323: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24324: LD_ADDR_VAR 0 8
24328: PUSH
24329: LD_VAR 0 1
24333: PPUSH
24334: CALL_OW 250
24338: PPUSH
24339: LD_VAR 0 10
24343: PPUSH
24344: LD_VAR 0 5
24348: PPUSH
24349: CALL_OW 272
24353: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24354: LD_ADDR_VAR 0 9
24358: PUSH
24359: LD_VAR 0 1
24363: PPUSH
24364: CALL_OW 251
24368: PPUSH
24369: LD_VAR 0 10
24373: PPUSH
24374: LD_VAR 0 5
24378: PPUSH
24379: CALL_OW 273
24383: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24384: LD_VAR 0 8
24388: PPUSH
24389: LD_VAR 0 9
24393: PPUSH
24394: CALL_OW 488
24398: NOT
24399: IFFALSE 24403
// exit ;
24401: GO 24510
// ComAnimCustom ( unit , 1 ) ;
24403: LD_VAR 0 1
24407: PPUSH
24408: LD_INT 1
24410: PPUSH
24411: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24415: LD_VAR 0 8
24419: PPUSH
24420: LD_VAR 0 9
24424: PPUSH
24425: LD_VAR 0 6
24429: PPUSH
24430: LD_VAR 0 7
24434: PPUSH
24435: CALL_OW 330
// repeat wait ( 1 ) ;
24439: LD_INT 1
24441: PPUSH
24442: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24446: LD_VAR 0 1
24450: PPUSH
24451: CALL_OW 316
24455: PUSH
24456: LD_VAR 0 1
24460: PPUSH
24461: CALL_OW 314
24465: OR
24466: PUSH
24467: LD_VAR 0 1
24471: PPUSH
24472: CALL_OW 302
24476: NOT
24477: OR
24478: PUSH
24479: LD_VAR 0 1
24483: PPUSH
24484: CALL_OW 301
24488: OR
24489: IFFALSE 24439
// RemoveSeeing ( _x , _y , side ) ;
24491: LD_VAR 0 8
24495: PPUSH
24496: LD_VAR 0 9
24500: PPUSH
24501: LD_VAR 0 6
24505: PPUSH
24506: CALL_OW 331
// end ; end_of_file
24510: LD_VAR 0 4
24514: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24515: LD_INT 0
24517: PPUSH
24518: PPUSH
// if exist_mode then
24519: LD_VAR 0 2
24523: IFFALSE 24548
// unit := CreateCharacter ( prefix & ident ) else
24525: LD_ADDR_VAR 0 5
24529: PUSH
24530: LD_VAR 0 3
24534: PUSH
24535: LD_VAR 0 1
24539: STR
24540: PPUSH
24541: CALL_OW 34
24545: ST_TO_ADDR
24546: GO 24563
// unit := NewCharacter ( ident ) ;
24548: LD_ADDR_VAR 0 5
24552: PUSH
24553: LD_VAR 0 1
24557: PPUSH
24558: CALL_OW 25
24562: ST_TO_ADDR
// result := unit ;
24563: LD_ADDR_VAR 0 4
24567: PUSH
24568: LD_VAR 0 5
24572: ST_TO_ADDR
// end ;
24573: LD_VAR 0 4
24577: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24578: LD_INT 0
24580: PPUSH
24581: PPUSH
// if not side or not nation then
24582: LD_VAR 0 1
24586: NOT
24587: PUSH
24588: LD_VAR 0 2
24592: NOT
24593: OR
24594: IFFALSE 24598
// exit ;
24596: GO 25362
// case nation of nation_american :
24598: LD_VAR 0 2
24602: PUSH
24603: LD_INT 1
24605: DOUBLE
24606: EQUAL
24607: IFTRUE 24611
24609: GO 24825
24611: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24612: LD_ADDR_VAR 0 4
24616: PUSH
24617: LD_INT 35
24619: PUSH
24620: LD_INT 45
24622: PUSH
24623: LD_INT 46
24625: PUSH
24626: LD_INT 47
24628: PUSH
24629: LD_INT 82
24631: PUSH
24632: LD_INT 83
24634: PUSH
24635: LD_INT 84
24637: PUSH
24638: LD_INT 85
24640: PUSH
24641: LD_INT 86
24643: PUSH
24644: LD_INT 1
24646: PUSH
24647: LD_INT 2
24649: PUSH
24650: LD_INT 6
24652: PUSH
24653: LD_INT 15
24655: PUSH
24656: LD_INT 16
24658: PUSH
24659: LD_INT 7
24661: PUSH
24662: LD_INT 12
24664: PUSH
24665: LD_INT 13
24667: PUSH
24668: LD_INT 10
24670: PUSH
24671: LD_INT 14
24673: PUSH
24674: LD_INT 20
24676: PUSH
24677: LD_INT 21
24679: PUSH
24680: LD_INT 22
24682: PUSH
24683: LD_INT 25
24685: PUSH
24686: LD_INT 32
24688: PUSH
24689: LD_INT 27
24691: PUSH
24692: LD_INT 36
24694: PUSH
24695: LD_INT 69
24697: PUSH
24698: LD_INT 39
24700: PUSH
24701: LD_INT 34
24703: PUSH
24704: LD_INT 40
24706: PUSH
24707: LD_INT 48
24709: PUSH
24710: LD_INT 49
24712: PUSH
24713: LD_INT 50
24715: PUSH
24716: LD_INT 51
24718: PUSH
24719: LD_INT 52
24721: PUSH
24722: LD_INT 53
24724: PUSH
24725: LD_INT 54
24727: PUSH
24728: LD_INT 55
24730: PUSH
24731: LD_INT 56
24733: PUSH
24734: LD_INT 57
24736: PUSH
24737: LD_INT 58
24739: PUSH
24740: LD_INT 59
24742: PUSH
24743: LD_INT 60
24745: PUSH
24746: LD_INT 61
24748: PUSH
24749: LD_INT 62
24751: PUSH
24752: LD_INT 80
24754: PUSH
24755: LD_INT 82
24757: PUSH
24758: LD_INT 83
24760: PUSH
24761: LD_INT 84
24763: PUSH
24764: LD_INT 85
24766: PUSH
24767: LD_INT 86
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: ST_TO_ADDR
24823: GO 25286
24825: LD_INT 2
24827: DOUBLE
24828: EQUAL
24829: IFTRUE 24833
24831: GO 25055
24833: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
24834: LD_ADDR_VAR 0 4
24838: PUSH
24839: LD_INT 35
24841: PUSH
24842: LD_INT 45
24844: PUSH
24845: LD_INT 46
24847: PUSH
24848: LD_INT 47
24850: PUSH
24851: LD_INT 82
24853: PUSH
24854: LD_INT 83
24856: PUSH
24857: LD_INT 84
24859: PUSH
24860: LD_INT 85
24862: PUSH
24863: LD_INT 87
24865: PUSH
24866: LD_INT 70
24868: PUSH
24869: LD_INT 1
24871: PUSH
24872: LD_INT 11
24874: PUSH
24875: LD_INT 3
24877: PUSH
24878: LD_INT 4
24880: PUSH
24881: LD_INT 5
24883: PUSH
24884: LD_INT 6
24886: PUSH
24887: LD_INT 15
24889: PUSH
24890: LD_INT 18
24892: PUSH
24893: LD_INT 7
24895: PUSH
24896: LD_INT 17
24898: PUSH
24899: LD_INT 8
24901: PUSH
24902: LD_INT 20
24904: PUSH
24905: LD_INT 21
24907: PUSH
24908: LD_INT 22
24910: PUSH
24911: LD_INT 72
24913: PUSH
24914: LD_INT 26
24916: PUSH
24917: LD_INT 69
24919: PUSH
24920: LD_INT 39
24922: PUSH
24923: LD_INT 40
24925: PUSH
24926: LD_INT 41
24928: PUSH
24929: LD_INT 42
24931: PUSH
24932: LD_INT 43
24934: PUSH
24935: LD_INT 48
24937: PUSH
24938: LD_INT 49
24940: PUSH
24941: LD_INT 50
24943: PUSH
24944: LD_INT 51
24946: PUSH
24947: LD_INT 52
24949: PUSH
24950: LD_INT 53
24952: PUSH
24953: LD_INT 54
24955: PUSH
24956: LD_INT 55
24958: PUSH
24959: LD_INT 56
24961: PUSH
24962: LD_INT 60
24964: PUSH
24965: LD_INT 61
24967: PUSH
24968: LD_INT 62
24970: PUSH
24971: LD_INT 66
24973: PUSH
24974: LD_INT 67
24976: PUSH
24977: LD_INT 68
24979: PUSH
24980: LD_INT 81
24982: PUSH
24983: LD_INT 82
24985: PUSH
24986: LD_INT 83
24988: PUSH
24989: LD_INT 84
24991: PUSH
24992: LD_INT 85
24994: PUSH
24995: LD_INT 87
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: ST_TO_ADDR
25053: GO 25286
25055: LD_INT 3
25057: DOUBLE
25058: EQUAL
25059: IFTRUE 25063
25061: GO 25285
25063: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25064: LD_ADDR_VAR 0 4
25068: PUSH
25069: LD_INT 46
25071: PUSH
25072: LD_INT 47
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: LD_INT 2
25080: PUSH
25081: LD_INT 82
25083: PUSH
25084: LD_INT 83
25086: PUSH
25087: LD_INT 84
25089: PUSH
25090: LD_INT 85
25092: PUSH
25093: LD_INT 86
25095: PUSH
25096: LD_INT 11
25098: PUSH
25099: LD_INT 9
25101: PUSH
25102: LD_INT 20
25104: PUSH
25105: LD_INT 19
25107: PUSH
25108: LD_INT 21
25110: PUSH
25111: LD_INT 24
25113: PUSH
25114: LD_INT 22
25116: PUSH
25117: LD_INT 25
25119: PUSH
25120: LD_INT 28
25122: PUSH
25123: LD_INT 29
25125: PUSH
25126: LD_INT 30
25128: PUSH
25129: LD_INT 31
25131: PUSH
25132: LD_INT 37
25134: PUSH
25135: LD_INT 38
25137: PUSH
25138: LD_INT 32
25140: PUSH
25141: LD_INT 27
25143: PUSH
25144: LD_INT 33
25146: PUSH
25147: LD_INT 69
25149: PUSH
25150: LD_INT 39
25152: PUSH
25153: LD_INT 34
25155: PUSH
25156: LD_INT 40
25158: PUSH
25159: LD_INT 71
25161: PUSH
25162: LD_INT 23
25164: PUSH
25165: LD_INT 44
25167: PUSH
25168: LD_INT 48
25170: PUSH
25171: LD_INT 49
25173: PUSH
25174: LD_INT 50
25176: PUSH
25177: LD_INT 51
25179: PUSH
25180: LD_INT 52
25182: PUSH
25183: LD_INT 53
25185: PUSH
25186: LD_INT 54
25188: PUSH
25189: LD_INT 55
25191: PUSH
25192: LD_INT 56
25194: PUSH
25195: LD_INT 57
25197: PUSH
25198: LD_INT 58
25200: PUSH
25201: LD_INT 59
25203: PUSH
25204: LD_INT 63
25206: PUSH
25207: LD_INT 64
25209: PUSH
25210: LD_INT 65
25212: PUSH
25213: LD_INT 82
25215: PUSH
25216: LD_INT 83
25218: PUSH
25219: LD_INT 84
25221: PUSH
25222: LD_INT 85
25224: PUSH
25225: LD_INT 86
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: ST_TO_ADDR
25283: GO 25286
25285: POP
// if state > - 1 and state < 3 then
25286: LD_VAR 0 3
25290: PUSH
25291: LD_INT 1
25293: NEG
25294: GREATER
25295: PUSH
25296: LD_VAR 0 3
25300: PUSH
25301: LD_INT 3
25303: LESS
25304: AND
25305: IFFALSE 25362
// for i in result do
25307: LD_ADDR_VAR 0 5
25311: PUSH
25312: LD_VAR 0 4
25316: PUSH
25317: FOR_IN
25318: IFFALSE 25360
// if GetTech ( i , side ) <> state then
25320: LD_VAR 0 5
25324: PPUSH
25325: LD_VAR 0 1
25329: PPUSH
25330: CALL_OW 321
25334: PUSH
25335: LD_VAR 0 3
25339: NONEQUAL
25340: IFFALSE 25358
// result := result diff i ;
25342: LD_ADDR_VAR 0 4
25346: PUSH
25347: LD_VAR 0 4
25351: PUSH
25352: LD_VAR 0 5
25356: DIFF
25357: ST_TO_ADDR
25358: GO 25317
25360: POP
25361: POP
// end ;
25362: LD_VAR 0 4
25366: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25367: LD_INT 0
25369: PPUSH
25370: PPUSH
25371: PPUSH
// result := true ;
25372: LD_ADDR_VAR 0 3
25376: PUSH
25377: LD_INT 1
25379: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25380: LD_ADDR_VAR 0 5
25384: PUSH
25385: LD_VAR 0 2
25389: PPUSH
25390: CALL_OW 480
25394: ST_TO_ADDR
// if not tmp then
25395: LD_VAR 0 5
25399: NOT
25400: IFFALSE 25404
// exit ;
25402: GO 25453
// for i in tmp do
25404: LD_ADDR_VAR 0 4
25408: PUSH
25409: LD_VAR 0 5
25413: PUSH
25414: FOR_IN
25415: IFFALSE 25451
// if GetTech ( i , side ) <> state_researched then
25417: LD_VAR 0 4
25421: PPUSH
25422: LD_VAR 0 1
25426: PPUSH
25427: CALL_OW 321
25431: PUSH
25432: LD_INT 2
25434: NONEQUAL
25435: IFFALSE 25449
// begin result := false ;
25437: LD_ADDR_VAR 0 3
25441: PUSH
25442: LD_INT 0
25444: ST_TO_ADDR
// exit ;
25445: POP
25446: POP
25447: GO 25453
// end ;
25449: GO 25414
25451: POP
25452: POP
// end ;
25453: LD_VAR 0 3
25457: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25458: LD_INT 0
25460: PPUSH
25461: PPUSH
25462: PPUSH
25463: PPUSH
25464: PPUSH
25465: PPUSH
25466: PPUSH
25467: PPUSH
25468: PPUSH
25469: PPUSH
25470: PPUSH
25471: PPUSH
25472: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25473: LD_VAR 0 1
25477: NOT
25478: PUSH
25479: LD_VAR 0 1
25483: PPUSH
25484: CALL_OW 257
25488: PUSH
25489: LD_INT 9
25491: NONEQUAL
25492: OR
25493: IFFALSE 25497
// exit ;
25495: GO 26070
// side := GetSide ( unit ) ;
25497: LD_ADDR_VAR 0 9
25501: PUSH
25502: LD_VAR 0 1
25506: PPUSH
25507: CALL_OW 255
25511: ST_TO_ADDR
// tech_space := tech_spacanom ;
25512: LD_ADDR_VAR 0 12
25516: PUSH
25517: LD_INT 29
25519: ST_TO_ADDR
// tech_time := tech_taurad ;
25520: LD_ADDR_VAR 0 13
25524: PUSH
25525: LD_INT 28
25527: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25528: LD_ADDR_VAR 0 11
25532: PUSH
25533: LD_VAR 0 1
25537: PPUSH
25538: CALL_OW 310
25542: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25543: LD_VAR 0 11
25547: PPUSH
25548: CALL_OW 247
25552: PUSH
25553: LD_INT 2
25555: EQUAL
25556: IFFALSE 25560
// exit ;
25558: GO 26070
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25560: LD_ADDR_VAR 0 8
25564: PUSH
25565: LD_INT 81
25567: PUSH
25568: LD_VAR 0 9
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 3
25579: PUSH
25580: LD_INT 21
25582: PUSH
25583: LD_INT 3
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PPUSH
25598: CALL_OW 69
25602: ST_TO_ADDR
// if not tmp then
25603: LD_VAR 0 8
25607: NOT
25608: IFFALSE 25612
// exit ;
25610: GO 26070
// if in_unit then
25612: LD_VAR 0 11
25616: IFFALSE 25640
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25618: LD_ADDR_VAR 0 10
25622: PUSH
25623: LD_VAR 0 8
25627: PPUSH
25628: LD_VAR 0 11
25632: PPUSH
25633: CALL_OW 74
25637: ST_TO_ADDR
25638: GO 25660
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25640: LD_ADDR_VAR 0 10
25644: PUSH
25645: LD_VAR 0 8
25649: PPUSH
25650: LD_VAR 0 1
25654: PPUSH
25655: CALL_OW 74
25659: ST_TO_ADDR
// if not enemy then
25660: LD_VAR 0 10
25664: NOT
25665: IFFALSE 25669
// exit ;
25667: GO 26070
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25669: LD_VAR 0 11
25673: PUSH
25674: LD_VAR 0 11
25678: PPUSH
25679: LD_VAR 0 10
25683: PPUSH
25684: CALL_OW 296
25688: PUSH
25689: LD_INT 13
25691: GREATER
25692: AND
25693: PUSH
25694: LD_VAR 0 1
25698: PPUSH
25699: LD_VAR 0 10
25703: PPUSH
25704: CALL_OW 296
25708: PUSH
25709: LD_INT 12
25711: GREATER
25712: OR
25713: IFFALSE 25717
// exit ;
25715: GO 26070
// missile := [ 1 ] ;
25717: LD_ADDR_VAR 0 14
25721: PUSH
25722: LD_INT 1
25724: PUSH
25725: EMPTY
25726: LIST
25727: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25728: LD_VAR 0 9
25732: PPUSH
25733: LD_VAR 0 12
25737: PPUSH
25738: CALL_OW 325
25742: IFFALSE 25771
// missile := Insert ( missile , missile + 1 , 2 ) ;
25744: LD_ADDR_VAR 0 14
25748: PUSH
25749: LD_VAR 0 14
25753: PPUSH
25754: LD_VAR 0 14
25758: PUSH
25759: LD_INT 1
25761: PLUS
25762: PPUSH
25763: LD_INT 2
25765: PPUSH
25766: CALL_OW 2
25770: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25771: LD_VAR 0 9
25775: PPUSH
25776: LD_VAR 0 13
25780: PPUSH
25781: CALL_OW 325
25785: PUSH
25786: LD_VAR 0 10
25790: PPUSH
25791: CALL_OW 255
25795: PPUSH
25796: LD_VAR 0 13
25800: PPUSH
25801: CALL_OW 325
25805: NOT
25806: AND
25807: IFFALSE 25836
// missile := Insert ( missile , missile + 1 , 3 ) ;
25809: LD_ADDR_VAR 0 14
25813: PUSH
25814: LD_VAR 0 14
25818: PPUSH
25819: LD_VAR 0 14
25823: PUSH
25824: LD_INT 1
25826: PLUS
25827: PPUSH
25828: LD_INT 3
25830: PPUSH
25831: CALL_OW 2
25835: ST_TO_ADDR
// if missile < 2 then
25836: LD_VAR 0 14
25840: PUSH
25841: LD_INT 2
25843: LESS
25844: IFFALSE 25848
// exit ;
25846: GO 26070
// x := GetX ( enemy ) ;
25848: LD_ADDR_VAR 0 4
25852: PUSH
25853: LD_VAR 0 10
25857: PPUSH
25858: CALL_OW 250
25862: ST_TO_ADDR
// y := GetY ( enemy ) ;
25863: LD_ADDR_VAR 0 5
25867: PUSH
25868: LD_VAR 0 10
25872: PPUSH
25873: CALL_OW 251
25877: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25878: LD_ADDR_VAR 0 6
25882: PUSH
25883: LD_VAR 0 4
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PPUSH
25892: LD_INT 1
25894: PPUSH
25895: CALL_OW 12
25899: PLUS
25900: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25901: LD_ADDR_VAR 0 7
25905: PUSH
25906: LD_VAR 0 5
25910: PUSH
25911: LD_INT 1
25913: NEG
25914: PPUSH
25915: LD_INT 1
25917: PPUSH
25918: CALL_OW 12
25922: PLUS
25923: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25924: LD_VAR 0 6
25928: PPUSH
25929: LD_VAR 0 7
25933: PPUSH
25934: CALL_OW 488
25938: NOT
25939: IFFALSE 25961
// begin _x := x ;
25941: LD_ADDR_VAR 0 6
25945: PUSH
25946: LD_VAR 0 4
25950: ST_TO_ADDR
// _y := y ;
25951: LD_ADDR_VAR 0 7
25955: PUSH
25956: LD_VAR 0 5
25960: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25961: LD_ADDR_VAR 0 3
25965: PUSH
25966: LD_INT 1
25968: PPUSH
25969: LD_VAR 0 14
25973: PPUSH
25974: CALL_OW 12
25978: ST_TO_ADDR
// case i of 1 :
25979: LD_VAR 0 3
25983: PUSH
25984: LD_INT 1
25986: DOUBLE
25987: EQUAL
25988: IFTRUE 25992
25990: GO 26009
25992: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25993: LD_VAR 0 1
25997: PPUSH
25998: LD_VAR 0 10
26002: PPUSH
26003: CALL_OW 115
26007: GO 26070
26009: LD_INT 2
26011: DOUBLE
26012: EQUAL
26013: IFTRUE 26017
26015: GO 26039
26017: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26018: LD_VAR 0 1
26022: PPUSH
26023: LD_VAR 0 6
26027: PPUSH
26028: LD_VAR 0 7
26032: PPUSH
26033: CALL_OW 153
26037: GO 26070
26039: LD_INT 3
26041: DOUBLE
26042: EQUAL
26043: IFTRUE 26047
26045: GO 26069
26047: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26048: LD_VAR 0 1
26052: PPUSH
26053: LD_VAR 0 6
26057: PPUSH
26058: LD_VAR 0 7
26062: PPUSH
26063: CALL_OW 154
26067: GO 26070
26069: POP
// end ;
26070: LD_VAR 0 2
26074: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26075: LD_INT 0
26077: PPUSH
26078: PPUSH
26079: PPUSH
26080: PPUSH
26081: PPUSH
26082: PPUSH
// if not unit or not building then
26083: LD_VAR 0 1
26087: NOT
26088: PUSH
26089: LD_VAR 0 2
26093: NOT
26094: OR
26095: IFFALSE 26099
// exit ;
26097: GO 26257
// x := GetX ( building ) ;
26099: LD_ADDR_VAR 0 5
26103: PUSH
26104: LD_VAR 0 2
26108: PPUSH
26109: CALL_OW 250
26113: ST_TO_ADDR
// y := GetY ( building ) ;
26114: LD_ADDR_VAR 0 6
26118: PUSH
26119: LD_VAR 0 2
26123: PPUSH
26124: CALL_OW 251
26128: ST_TO_ADDR
// for i = 0 to 5 do
26129: LD_ADDR_VAR 0 4
26133: PUSH
26134: DOUBLE
26135: LD_INT 0
26137: DEC
26138: ST_TO_ADDR
26139: LD_INT 5
26141: PUSH
26142: FOR_TO
26143: IFFALSE 26255
// begin _x := ShiftX ( x , i , 3 ) ;
26145: LD_ADDR_VAR 0 7
26149: PUSH
26150: LD_VAR 0 5
26154: PPUSH
26155: LD_VAR 0 4
26159: PPUSH
26160: LD_INT 3
26162: PPUSH
26163: CALL_OW 272
26167: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26168: LD_ADDR_VAR 0 8
26172: PUSH
26173: LD_VAR 0 6
26177: PPUSH
26178: LD_VAR 0 4
26182: PPUSH
26183: LD_INT 3
26185: PPUSH
26186: CALL_OW 273
26190: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26191: LD_VAR 0 7
26195: PPUSH
26196: LD_VAR 0 8
26200: PPUSH
26201: CALL_OW 488
26205: NOT
26206: IFFALSE 26210
// continue ;
26208: GO 26142
// if HexInfo ( _x , _y ) = 0 then
26210: LD_VAR 0 7
26214: PPUSH
26215: LD_VAR 0 8
26219: PPUSH
26220: CALL_OW 428
26224: PUSH
26225: LD_INT 0
26227: EQUAL
26228: IFFALSE 26253
// begin ComMoveXY ( unit , _x , _y ) ;
26230: LD_VAR 0 1
26234: PPUSH
26235: LD_VAR 0 7
26239: PPUSH
26240: LD_VAR 0 8
26244: PPUSH
26245: CALL_OW 111
// exit ;
26249: POP
26250: POP
26251: GO 26257
// end ; end ;
26253: GO 26142
26255: POP
26256: POP
// end ;
26257: LD_VAR 0 3
26261: RET
// export function ScanBase ( side , base_area ) ; begin
26262: LD_INT 0
26264: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26265: LD_ADDR_VAR 0 3
26269: PUSH
26270: LD_VAR 0 2
26274: PPUSH
26275: LD_INT 81
26277: PUSH
26278: LD_VAR 0 1
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PPUSH
26287: CALL_OW 70
26291: ST_TO_ADDR
// end ;
26292: LD_VAR 0 3
26296: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26297: LD_INT 0
26299: PPUSH
26300: PPUSH
26301: PPUSH
26302: PPUSH
// result := false ;
26303: LD_ADDR_VAR 0 2
26307: PUSH
26308: LD_INT 0
26310: ST_TO_ADDR
// side := GetSide ( unit ) ;
26311: LD_ADDR_VAR 0 3
26315: PUSH
26316: LD_VAR 0 1
26320: PPUSH
26321: CALL_OW 255
26325: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26326: LD_ADDR_VAR 0 4
26330: PUSH
26331: LD_VAR 0 1
26335: PPUSH
26336: CALL_OW 248
26340: ST_TO_ADDR
// case nat of 1 :
26341: LD_VAR 0 4
26345: PUSH
26346: LD_INT 1
26348: DOUBLE
26349: EQUAL
26350: IFTRUE 26354
26352: GO 26365
26354: POP
// tech := tech_lassight ; 2 :
26355: LD_ADDR_VAR 0 5
26359: PUSH
26360: LD_INT 12
26362: ST_TO_ADDR
26363: GO 26404
26365: LD_INT 2
26367: DOUBLE
26368: EQUAL
26369: IFTRUE 26373
26371: GO 26384
26373: POP
// tech := tech_mortar ; 3 :
26374: LD_ADDR_VAR 0 5
26378: PUSH
26379: LD_INT 41
26381: ST_TO_ADDR
26382: GO 26404
26384: LD_INT 3
26386: DOUBLE
26387: EQUAL
26388: IFTRUE 26392
26390: GO 26403
26392: POP
// tech := tech_bazooka ; end ;
26393: LD_ADDR_VAR 0 5
26397: PUSH
26398: LD_INT 44
26400: ST_TO_ADDR
26401: GO 26404
26403: POP
// if Researched ( side , tech ) then
26404: LD_VAR 0 3
26408: PPUSH
26409: LD_VAR 0 5
26413: PPUSH
26414: CALL_OW 325
26418: IFFALSE 26445
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26420: LD_ADDR_VAR 0 2
26424: PUSH
26425: LD_INT 5
26427: PUSH
26428: LD_INT 8
26430: PUSH
26431: LD_INT 9
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: LIST
26438: PUSH
26439: LD_VAR 0 4
26443: ARRAY
26444: ST_TO_ADDR
// end ;
26445: LD_VAR 0 2
26449: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26450: LD_INT 0
26452: PPUSH
26453: PPUSH
26454: PPUSH
// if not mines then
26455: LD_VAR 0 2
26459: NOT
26460: IFFALSE 26464
// exit ;
26462: GO 26608
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26464: LD_ADDR_VAR 0 5
26468: PUSH
26469: LD_INT 81
26471: PUSH
26472: LD_VAR 0 1
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 3
26483: PUSH
26484: LD_INT 21
26486: PUSH
26487: LD_INT 3
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PPUSH
26502: CALL_OW 69
26506: ST_TO_ADDR
// for i in mines do
26507: LD_ADDR_VAR 0 4
26511: PUSH
26512: LD_VAR 0 2
26516: PUSH
26517: FOR_IN
26518: IFFALSE 26606
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26520: LD_VAR 0 4
26524: PUSH
26525: LD_INT 1
26527: ARRAY
26528: PPUSH
26529: LD_VAR 0 4
26533: PUSH
26534: LD_INT 2
26536: ARRAY
26537: PPUSH
26538: CALL_OW 458
26542: NOT
26543: IFFALSE 26547
// continue ;
26545: GO 26517
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26547: LD_VAR 0 4
26551: PUSH
26552: LD_INT 1
26554: ARRAY
26555: PPUSH
26556: LD_VAR 0 4
26560: PUSH
26561: LD_INT 2
26563: ARRAY
26564: PPUSH
26565: CALL_OW 428
26569: PUSH
26570: LD_VAR 0 5
26574: IN
26575: IFFALSE 26604
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26577: LD_VAR 0 4
26581: PUSH
26582: LD_INT 1
26584: ARRAY
26585: PPUSH
26586: LD_VAR 0 4
26590: PUSH
26591: LD_INT 2
26593: ARRAY
26594: PPUSH
26595: LD_VAR 0 1
26599: PPUSH
26600: CALL_OW 456
// end ;
26604: GO 26517
26606: POP
26607: POP
// end ;
26608: LD_VAR 0 3
26612: RET
// export function Count ( array ) ; var i ; begin
26613: LD_INT 0
26615: PPUSH
26616: PPUSH
// result := 0 ;
26617: LD_ADDR_VAR 0 2
26621: PUSH
26622: LD_INT 0
26624: ST_TO_ADDR
// for i in array do
26625: LD_ADDR_VAR 0 3
26629: PUSH
26630: LD_VAR 0 1
26634: PUSH
26635: FOR_IN
26636: IFFALSE 26660
// if i then
26638: LD_VAR 0 3
26642: IFFALSE 26658
// result := result + 1 ;
26644: LD_ADDR_VAR 0 2
26648: PUSH
26649: LD_VAR 0 2
26653: PUSH
26654: LD_INT 1
26656: PLUS
26657: ST_TO_ADDR
26658: GO 26635
26660: POP
26661: POP
// end ;
26662: LD_VAR 0 2
26666: RET
// export function IsEmpty ( building ) ; begin
26667: LD_INT 0
26669: PPUSH
// if not building then
26670: LD_VAR 0 1
26674: NOT
26675: IFFALSE 26679
// exit ;
26677: GO 26722
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26679: LD_ADDR_VAR 0 2
26683: PUSH
26684: LD_VAR 0 1
26688: PUSH
26689: LD_INT 22
26691: PUSH
26692: LD_VAR 0 1
26696: PPUSH
26697: CALL_OW 255
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 58
26708: PUSH
26709: EMPTY
26710: LIST
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PPUSH
26716: CALL_OW 69
26720: IN
26721: ST_TO_ADDR
// end ;
26722: LD_VAR 0 2
26726: RET
// export function IsNotFull ( building ) ; begin
26727: LD_INT 0
26729: PPUSH
// if not building then
26730: LD_VAR 0 1
26734: NOT
26735: IFFALSE 26739
// exit ;
26737: GO 26758
// result := UnitsInside ( building ) < 6 ;
26739: LD_ADDR_VAR 0 2
26743: PUSH
26744: LD_VAR 0 1
26748: PPUSH
26749: CALL_OW 313
26753: PUSH
26754: LD_INT 6
26756: LESS
26757: ST_TO_ADDR
// end ;
26758: LD_VAR 0 2
26762: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26763: LD_INT 0
26765: PPUSH
26766: PPUSH
26767: PPUSH
26768: PPUSH
// tmp := [ ] ;
26769: LD_ADDR_VAR 0 3
26773: PUSH
26774: EMPTY
26775: ST_TO_ADDR
// list := [ ] ;
26776: LD_ADDR_VAR 0 5
26780: PUSH
26781: EMPTY
26782: ST_TO_ADDR
// for i = 16 to 25 do
26783: LD_ADDR_VAR 0 4
26787: PUSH
26788: DOUBLE
26789: LD_INT 16
26791: DEC
26792: ST_TO_ADDR
26793: LD_INT 25
26795: PUSH
26796: FOR_TO
26797: IFFALSE 26870
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26799: LD_ADDR_VAR 0 3
26803: PUSH
26804: LD_VAR 0 3
26808: PUSH
26809: LD_INT 22
26811: PUSH
26812: LD_VAR 0 1
26816: PPUSH
26817: CALL_OW 255
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 91
26828: PUSH
26829: LD_VAR 0 1
26833: PUSH
26834: LD_INT 6
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 30
26844: PUSH
26845: LD_VAR 0 4
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: LIST
26858: PUSH
26859: EMPTY
26860: LIST
26861: PPUSH
26862: CALL_OW 69
26866: ADD
26867: ST_TO_ADDR
26868: GO 26796
26870: POP
26871: POP
// for i = 1 to tmp do
26872: LD_ADDR_VAR 0 4
26876: PUSH
26877: DOUBLE
26878: LD_INT 1
26880: DEC
26881: ST_TO_ADDR
26882: LD_VAR 0 3
26886: PUSH
26887: FOR_TO
26888: IFFALSE 26976
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26890: LD_ADDR_VAR 0 5
26894: PUSH
26895: LD_VAR 0 5
26899: PUSH
26900: LD_VAR 0 3
26904: PUSH
26905: LD_VAR 0 4
26909: ARRAY
26910: PPUSH
26911: CALL_OW 266
26915: PUSH
26916: LD_VAR 0 3
26920: PUSH
26921: LD_VAR 0 4
26925: ARRAY
26926: PPUSH
26927: CALL_OW 250
26931: PUSH
26932: LD_VAR 0 3
26936: PUSH
26937: LD_VAR 0 4
26941: ARRAY
26942: PPUSH
26943: CALL_OW 251
26947: PUSH
26948: LD_VAR 0 3
26952: PUSH
26953: LD_VAR 0 4
26957: ARRAY
26958: PPUSH
26959: CALL_OW 254
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: PUSH
26970: EMPTY
26971: LIST
26972: ADD
26973: ST_TO_ADDR
26974: GO 26887
26976: POP
26977: POP
// result := list ;
26978: LD_ADDR_VAR 0 2
26982: PUSH
26983: LD_VAR 0 5
26987: ST_TO_ADDR
// end ;
26988: LD_VAR 0 2
26992: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26993: LD_INT 0
26995: PPUSH
26996: PPUSH
26997: PPUSH
26998: PPUSH
26999: PPUSH
27000: PPUSH
27001: PPUSH
// if not factory then
27002: LD_VAR 0 1
27006: NOT
27007: IFFALSE 27011
// exit ;
27009: GO 27604
// if control = control_apeman then
27011: LD_VAR 0 4
27015: PUSH
27016: LD_INT 5
27018: EQUAL
27019: IFFALSE 27128
// begin tmp := UnitsInside ( factory ) ;
27021: LD_ADDR_VAR 0 8
27025: PUSH
27026: LD_VAR 0 1
27030: PPUSH
27031: CALL_OW 313
27035: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27036: LD_VAR 0 8
27040: PPUSH
27041: LD_INT 25
27043: PUSH
27044: LD_INT 12
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PPUSH
27051: CALL_OW 72
27055: NOT
27056: IFFALSE 27066
// control := control_manual ;
27058: LD_ADDR_VAR 0 4
27062: PUSH
27063: LD_INT 1
27065: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27066: LD_ADDR_VAR 0 8
27070: PUSH
27071: LD_VAR 0 1
27075: PPUSH
27076: CALL 26763 0 1
27080: ST_TO_ADDR
// if tmp then
27081: LD_VAR 0 8
27085: IFFALSE 27128
// begin for i in tmp do
27087: LD_ADDR_VAR 0 7
27091: PUSH
27092: LD_VAR 0 8
27096: PUSH
27097: FOR_IN
27098: IFFALSE 27126
// if i [ 1 ] = b_ext_radio then
27100: LD_VAR 0 7
27104: PUSH
27105: LD_INT 1
27107: ARRAY
27108: PUSH
27109: LD_INT 22
27111: EQUAL
27112: IFFALSE 27124
// begin control := control_remote ;
27114: LD_ADDR_VAR 0 4
27118: PUSH
27119: LD_INT 2
27121: ST_TO_ADDR
// break ;
27122: GO 27126
// end ;
27124: GO 27097
27126: POP
27127: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27128: LD_VAR 0 1
27132: PPUSH
27133: LD_VAR 0 2
27137: PPUSH
27138: LD_VAR 0 3
27142: PPUSH
27143: LD_VAR 0 4
27147: PPUSH
27148: LD_VAR 0 5
27152: PPUSH
27153: CALL_OW 448
27157: IFFALSE 27192
// begin result := [ chassis , engine , control , weapon ] ;
27159: LD_ADDR_VAR 0 6
27163: PUSH
27164: LD_VAR 0 2
27168: PUSH
27169: LD_VAR 0 3
27173: PUSH
27174: LD_VAR 0 4
27178: PUSH
27179: LD_VAR 0 5
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: ST_TO_ADDR
// exit ;
27190: GO 27604
// end ; _chassis := AvailableChassisList ( factory ) ;
27192: LD_ADDR_VAR 0 9
27196: PUSH
27197: LD_VAR 0 1
27201: PPUSH
27202: CALL_OW 475
27206: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27207: LD_ADDR_VAR 0 11
27211: PUSH
27212: LD_VAR 0 1
27216: PPUSH
27217: CALL_OW 476
27221: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27222: LD_ADDR_VAR 0 12
27226: PUSH
27227: LD_VAR 0 1
27231: PPUSH
27232: CALL_OW 477
27236: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27237: LD_ADDR_VAR 0 10
27241: PUSH
27242: LD_VAR 0 1
27246: PPUSH
27247: CALL_OW 478
27251: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27252: LD_VAR 0 9
27256: NOT
27257: PUSH
27258: LD_VAR 0 11
27262: NOT
27263: OR
27264: PUSH
27265: LD_VAR 0 12
27269: NOT
27270: OR
27271: PUSH
27272: LD_VAR 0 10
27276: NOT
27277: OR
27278: IFFALSE 27313
// begin result := [ chassis , engine , control , weapon ] ;
27280: LD_ADDR_VAR 0 6
27284: PUSH
27285: LD_VAR 0 2
27289: PUSH
27290: LD_VAR 0 3
27294: PUSH
27295: LD_VAR 0 4
27299: PUSH
27300: LD_VAR 0 5
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: ST_TO_ADDR
// exit ;
27311: GO 27604
// end ; if not chassis in _chassis then
27313: LD_VAR 0 2
27317: PUSH
27318: LD_VAR 0 9
27322: IN
27323: NOT
27324: IFFALSE 27350
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27326: LD_ADDR_VAR 0 2
27330: PUSH
27331: LD_VAR 0 9
27335: PUSH
27336: LD_INT 1
27338: PPUSH
27339: LD_VAR 0 9
27343: PPUSH
27344: CALL_OW 12
27348: ARRAY
27349: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27350: LD_VAR 0 2
27354: PPUSH
27355: LD_VAR 0 3
27359: PPUSH
27360: CALL 27609 0 2
27364: NOT
27365: IFFALSE 27424
// repeat engine := _engine [ 1 ] ;
27367: LD_ADDR_VAR 0 3
27371: PUSH
27372: LD_VAR 0 11
27376: PUSH
27377: LD_INT 1
27379: ARRAY
27380: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27381: LD_ADDR_VAR 0 11
27385: PUSH
27386: LD_VAR 0 11
27390: PPUSH
27391: LD_INT 1
27393: PPUSH
27394: CALL_OW 3
27398: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27399: LD_VAR 0 2
27403: PPUSH
27404: LD_VAR 0 3
27408: PPUSH
27409: CALL 27609 0 2
27413: PUSH
27414: LD_VAR 0 11
27418: PUSH
27419: EMPTY
27420: EQUAL
27421: OR
27422: IFFALSE 27367
// if not control in _control then
27424: LD_VAR 0 4
27428: PUSH
27429: LD_VAR 0 12
27433: IN
27434: NOT
27435: IFFALSE 27461
// control := _control [ rand ( 1 , _control ) ] ;
27437: LD_ADDR_VAR 0 4
27441: PUSH
27442: LD_VAR 0 12
27446: PUSH
27447: LD_INT 1
27449: PPUSH
27450: LD_VAR 0 12
27454: PPUSH
27455: CALL_OW 12
27459: ARRAY
27460: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27461: LD_VAR 0 2
27465: PPUSH
27466: LD_VAR 0 5
27470: PPUSH
27471: CALL 27829 0 2
27475: NOT
27476: IFFALSE 27535
// repeat weapon := _weapon [ 1 ] ;
27478: LD_ADDR_VAR 0 5
27482: PUSH
27483: LD_VAR 0 10
27487: PUSH
27488: LD_INT 1
27490: ARRAY
27491: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27492: LD_ADDR_VAR 0 10
27496: PUSH
27497: LD_VAR 0 10
27501: PPUSH
27502: LD_INT 1
27504: PPUSH
27505: CALL_OW 3
27509: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27510: LD_VAR 0 2
27514: PPUSH
27515: LD_VAR 0 5
27519: PPUSH
27520: CALL 27829 0 2
27524: PUSH
27525: LD_VAR 0 10
27529: PUSH
27530: EMPTY
27531: EQUAL
27532: OR
27533: IFFALSE 27478
// result := [ ] ;
27535: LD_ADDR_VAR 0 6
27539: PUSH
27540: EMPTY
27541: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27542: LD_VAR 0 1
27546: PPUSH
27547: LD_VAR 0 2
27551: PPUSH
27552: LD_VAR 0 3
27556: PPUSH
27557: LD_VAR 0 4
27561: PPUSH
27562: LD_VAR 0 5
27566: PPUSH
27567: CALL_OW 448
27571: IFFALSE 27604
// result := [ chassis , engine , control , weapon ] ;
27573: LD_ADDR_VAR 0 6
27577: PUSH
27578: LD_VAR 0 2
27582: PUSH
27583: LD_VAR 0 3
27587: PUSH
27588: LD_VAR 0 4
27592: PUSH
27593: LD_VAR 0 5
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: ST_TO_ADDR
// end ;
27604: LD_VAR 0 6
27608: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27609: LD_INT 0
27611: PPUSH
// if not chassis or not engine then
27612: LD_VAR 0 1
27616: NOT
27617: PUSH
27618: LD_VAR 0 2
27622: NOT
27623: OR
27624: IFFALSE 27628
// exit ;
27626: GO 27824
// case engine of engine_solar :
27628: LD_VAR 0 2
27632: PUSH
27633: LD_INT 2
27635: DOUBLE
27636: EQUAL
27637: IFTRUE 27641
27639: GO 27679
27641: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27642: LD_ADDR_VAR 0 3
27646: PUSH
27647: LD_INT 11
27649: PUSH
27650: LD_INT 12
27652: PUSH
27653: LD_INT 13
27655: PUSH
27656: LD_INT 14
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: LD_INT 2
27664: PUSH
27665: LD_INT 3
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: ST_TO_ADDR
27677: GO 27808
27679: LD_INT 1
27681: DOUBLE
27682: EQUAL
27683: IFTRUE 27687
27685: GO 27749
27687: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27688: LD_ADDR_VAR 0 3
27692: PUSH
27693: LD_INT 11
27695: PUSH
27696: LD_INT 12
27698: PUSH
27699: LD_INT 13
27701: PUSH
27702: LD_INT 14
27704: PUSH
27705: LD_INT 1
27707: PUSH
27708: LD_INT 2
27710: PUSH
27711: LD_INT 3
27713: PUSH
27714: LD_INT 4
27716: PUSH
27717: LD_INT 5
27719: PUSH
27720: LD_INT 21
27722: PUSH
27723: LD_INT 23
27725: PUSH
27726: LD_INT 22
27728: PUSH
27729: LD_INT 24
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: ST_TO_ADDR
27747: GO 27808
27749: LD_INT 3
27751: DOUBLE
27752: EQUAL
27753: IFTRUE 27757
27755: GO 27807
27757: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27758: LD_ADDR_VAR 0 3
27762: PUSH
27763: LD_INT 13
27765: PUSH
27766: LD_INT 14
27768: PUSH
27769: LD_INT 2
27771: PUSH
27772: LD_INT 3
27774: PUSH
27775: LD_INT 4
27777: PUSH
27778: LD_INT 5
27780: PUSH
27781: LD_INT 21
27783: PUSH
27784: LD_INT 22
27786: PUSH
27787: LD_INT 23
27789: PUSH
27790: LD_INT 24
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: ST_TO_ADDR
27805: GO 27808
27807: POP
// result := ( chassis in result ) ;
27808: LD_ADDR_VAR 0 3
27812: PUSH
27813: LD_VAR 0 1
27817: PUSH
27818: LD_VAR 0 3
27822: IN
27823: ST_TO_ADDR
// end ;
27824: LD_VAR 0 3
27828: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27829: LD_INT 0
27831: PPUSH
// if not chassis or not weapon then
27832: LD_VAR 0 1
27836: NOT
27837: PUSH
27838: LD_VAR 0 2
27842: NOT
27843: OR
27844: IFFALSE 27848
// exit ;
27846: GO 28874
// case weapon of us_machine_gun :
27848: LD_VAR 0 2
27852: PUSH
27853: LD_INT 2
27855: DOUBLE
27856: EQUAL
27857: IFTRUE 27861
27859: GO 27891
27861: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27862: LD_ADDR_VAR 0 3
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: LD_INT 2
27872: PUSH
27873: LD_INT 3
27875: PUSH
27876: LD_INT 4
27878: PUSH
27879: LD_INT 5
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: ST_TO_ADDR
27889: GO 28858
27891: LD_INT 3
27893: DOUBLE
27894: EQUAL
27895: IFTRUE 27899
27897: GO 27929
27899: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27900: LD_ADDR_VAR 0 3
27904: PUSH
27905: LD_INT 1
27907: PUSH
27908: LD_INT 2
27910: PUSH
27911: LD_INT 3
27913: PUSH
27914: LD_INT 4
27916: PUSH
27917: LD_INT 5
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: ST_TO_ADDR
27927: GO 28858
27929: LD_INT 11
27931: DOUBLE
27932: EQUAL
27933: IFTRUE 27937
27935: GO 27967
27937: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27938: LD_ADDR_VAR 0 3
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: LD_INT 2
27948: PUSH
27949: LD_INT 3
27951: PUSH
27952: LD_INT 4
27954: PUSH
27955: LD_INT 5
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: ST_TO_ADDR
27965: GO 28858
27967: LD_INT 4
27969: DOUBLE
27970: EQUAL
27971: IFTRUE 27975
27973: GO 28001
27975: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27976: LD_ADDR_VAR 0 3
27980: PUSH
27981: LD_INT 2
27983: PUSH
27984: LD_INT 3
27986: PUSH
27987: LD_INT 4
27989: PUSH
27990: LD_INT 5
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: ST_TO_ADDR
27999: GO 28858
28001: LD_INT 5
28003: DOUBLE
28004: EQUAL
28005: IFTRUE 28009
28007: GO 28035
28009: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28010: LD_ADDR_VAR 0 3
28014: PUSH
28015: LD_INT 2
28017: PUSH
28018: LD_INT 3
28020: PUSH
28021: LD_INT 4
28023: PUSH
28024: LD_INT 5
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: ST_TO_ADDR
28033: GO 28858
28035: LD_INT 9
28037: DOUBLE
28038: EQUAL
28039: IFTRUE 28043
28041: GO 28069
28043: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28044: LD_ADDR_VAR 0 3
28048: PUSH
28049: LD_INT 2
28051: PUSH
28052: LD_INT 3
28054: PUSH
28055: LD_INT 4
28057: PUSH
28058: LD_INT 5
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: ST_TO_ADDR
28067: GO 28858
28069: LD_INT 7
28071: DOUBLE
28072: EQUAL
28073: IFTRUE 28077
28075: GO 28103
28077: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28078: LD_ADDR_VAR 0 3
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: LD_INT 3
28088: PUSH
28089: LD_INT 4
28091: PUSH
28092: LD_INT 5
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: ST_TO_ADDR
28101: GO 28858
28103: LD_INT 12
28105: DOUBLE
28106: EQUAL
28107: IFTRUE 28111
28109: GO 28137
28111: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28112: LD_ADDR_VAR 0 3
28116: PUSH
28117: LD_INT 2
28119: PUSH
28120: LD_INT 3
28122: PUSH
28123: LD_INT 4
28125: PUSH
28126: LD_INT 5
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: ST_TO_ADDR
28135: GO 28858
28137: LD_INT 13
28139: DOUBLE
28140: EQUAL
28141: IFTRUE 28145
28143: GO 28171
28145: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28146: LD_ADDR_VAR 0 3
28150: PUSH
28151: LD_INT 2
28153: PUSH
28154: LD_INT 3
28156: PUSH
28157: LD_INT 4
28159: PUSH
28160: LD_INT 5
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: ST_TO_ADDR
28169: GO 28858
28171: LD_INT 14
28173: DOUBLE
28174: EQUAL
28175: IFTRUE 28179
28177: GO 28197
28179: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28180: LD_ADDR_VAR 0 3
28184: PUSH
28185: LD_INT 4
28187: PUSH
28188: LD_INT 5
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: ST_TO_ADDR
28195: GO 28858
28197: LD_INT 6
28199: DOUBLE
28200: EQUAL
28201: IFTRUE 28205
28203: GO 28223
28205: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28206: LD_ADDR_VAR 0 3
28210: PUSH
28211: LD_INT 4
28213: PUSH
28214: LD_INT 5
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: ST_TO_ADDR
28221: GO 28858
28223: LD_INT 10
28225: DOUBLE
28226: EQUAL
28227: IFTRUE 28231
28229: GO 28249
28231: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28232: LD_ADDR_VAR 0 3
28236: PUSH
28237: LD_INT 4
28239: PUSH
28240: LD_INT 5
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: ST_TO_ADDR
28247: GO 28858
28249: LD_INT 22
28251: DOUBLE
28252: EQUAL
28253: IFTRUE 28257
28255: GO 28283
28257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28258: LD_ADDR_VAR 0 3
28262: PUSH
28263: LD_INT 11
28265: PUSH
28266: LD_INT 12
28268: PUSH
28269: LD_INT 13
28271: PUSH
28272: LD_INT 14
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: ST_TO_ADDR
28281: GO 28858
28283: LD_INT 23
28285: DOUBLE
28286: EQUAL
28287: IFTRUE 28291
28289: GO 28317
28291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28292: LD_ADDR_VAR 0 3
28296: PUSH
28297: LD_INT 11
28299: PUSH
28300: LD_INT 12
28302: PUSH
28303: LD_INT 13
28305: PUSH
28306: LD_INT 14
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: ST_TO_ADDR
28315: GO 28858
28317: LD_INT 24
28319: DOUBLE
28320: EQUAL
28321: IFTRUE 28325
28323: GO 28351
28325: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: LD_INT 11
28333: PUSH
28334: LD_INT 12
28336: PUSH
28337: LD_INT 13
28339: PUSH
28340: LD_INT 14
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: ST_TO_ADDR
28349: GO 28858
28351: LD_INT 30
28353: DOUBLE
28354: EQUAL
28355: IFTRUE 28359
28357: GO 28385
28359: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28360: LD_ADDR_VAR 0 3
28364: PUSH
28365: LD_INT 11
28367: PUSH
28368: LD_INT 12
28370: PUSH
28371: LD_INT 13
28373: PUSH
28374: LD_INT 14
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: ST_TO_ADDR
28383: GO 28858
28385: LD_INT 25
28387: DOUBLE
28388: EQUAL
28389: IFTRUE 28393
28391: GO 28411
28393: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28394: LD_ADDR_VAR 0 3
28398: PUSH
28399: LD_INT 13
28401: PUSH
28402: LD_INT 14
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: ST_TO_ADDR
28409: GO 28858
28411: LD_INT 27
28413: DOUBLE
28414: EQUAL
28415: IFTRUE 28419
28417: GO 28437
28419: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28420: LD_ADDR_VAR 0 3
28424: PUSH
28425: LD_INT 13
28427: PUSH
28428: LD_INT 14
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: ST_TO_ADDR
28435: GO 28858
28437: LD_INT 28
28439: DOUBLE
28440: EQUAL
28441: IFTRUE 28445
28443: GO 28463
28445: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28446: LD_ADDR_VAR 0 3
28450: PUSH
28451: LD_INT 13
28453: PUSH
28454: LD_INT 14
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: ST_TO_ADDR
28461: GO 28858
28463: LD_INT 29
28465: DOUBLE
28466: EQUAL
28467: IFTRUE 28471
28469: GO 28489
28471: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28472: LD_ADDR_VAR 0 3
28476: PUSH
28477: LD_INT 13
28479: PUSH
28480: LD_INT 14
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: ST_TO_ADDR
28487: GO 28858
28489: LD_INT 31
28491: DOUBLE
28492: EQUAL
28493: IFTRUE 28497
28495: GO 28515
28497: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28498: LD_ADDR_VAR 0 3
28502: PUSH
28503: LD_INT 13
28505: PUSH
28506: LD_INT 14
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: ST_TO_ADDR
28513: GO 28858
28515: LD_INT 26
28517: DOUBLE
28518: EQUAL
28519: IFTRUE 28523
28521: GO 28541
28523: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28524: LD_ADDR_VAR 0 3
28528: PUSH
28529: LD_INT 13
28531: PUSH
28532: LD_INT 14
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: ST_TO_ADDR
28539: GO 28858
28541: LD_INT 42
28543: DOUBLE
28544: EQUAL
28545: IFTRUE 28549
28547: GO 28575
28549: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28550: LD_ADDR_VAR 0 3
28554: PUSH
28555: LD_INT 21
28557: PUSH
28558: LD_INT 22
28560: PUSH
28561: LD_INT 23
28563: PUSH
28564: LD_INT 24
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: ST_TO_ADDR
28573: GO 28858
28575: LD_INT 43
28577: DOUBLE
28578: EQUAL
28579: IFTRUE 28583
28581: GO 28609
28583: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28584: LD_ADDR_VAR 0 3
28588: PUSH
28589: LD_INT 21
28591: PUSH
28592: LD_INT 22
28594: PUSH
28595: LD_INT 23
28597: PUSH
28598: LD_INT 24
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: ST_TO_ADDR
28607: GO 28858
28609: LD_INT 44
28611: DOUBLE
28612: EQUAL
28613: IFTRUE 28617
28615: GO 28643
28617: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28618: LD_ADDR_VAR 0 3
28622: PUSH
28623: LD_INT 21
28625: PUSH
28626: LD_INT 22
28628: PUSH
28629: LD_INT 23
28631: PUSH
28632: LD_INT 24
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: ST_TO_ADDR
28641: GO 28858
28643: LD_INT 45
28645: DOUBLE
28646: EQUAL
28647: IFTRUE 28651
28649: GO 28677
28651: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28652: LD_ADDR_VAR 0 3
28656: PUSH
28657: LD_INT 21
28659: PUSH
28660: LD_INT 22
28662: PUSH
28663: LD_INT 23
28665: PUSH
28666: LD_INT 24
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: ST_TO_ADDR
28675: GO 28858
28677: LD_INT 49
28679: DOUBLE
28680: EQUAL
28681: IFTRUE 28685
28683: GO 28711
28685: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28686: LD_ADDR_VAR 0 3
28690: PUSH
28691: LD_INT 21
28693: PUSH
28694: LD_INT 22
28696: PUSH
28697: LD_INT 23
28699: PUSH
28700: LD_INT 24
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: ST_TO_ADDR
28709: GO 28858
28711: LD_INT 51
28713: DOUBLE
28714: EQUAL
28715: IFTRUE 28719
28717: GO 28745
28719: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28720: LD_ADDR_VAR 0 3
28724: PUSH
28725: LD_INT 21
28727: PUSH
28728: LD_INT 22
28730: PUSH
28731: LD_INT 23
28733: PUSH
28734: LD_INT 24
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: ST_TO_ADDR
28743: GO 28858
28745: LD_INT 52
28747: DOUBLE
28748: EQUAL
28749: IFTRUE 28753
28751: GO 28779
28753: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28754: LD_ADDR_VAR 0 3
28758: PUSH
28759: LD_INT 21
28761: PUSH
28762: LD_INT 22
28764: PUSH
28765: LD_INT 23
28767: PUSH
28768: LD_INT 24
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: ST_TO_ADDR
28777: GO 28858
28779: LD_INT 53
28781: DOUBLE
28782: EQUAL
28783: IFTRUE 28787
28785: GO 28805
28787: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28788: LD_ADDR_VAR 0 3
28792: PUSH
28793: LD_INT 23
28795: PUSH
28796: LD_INT 24
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: ST_TO_ADDR
28803: GO 28858
28805: LD_INT 46
28807: DOUBLE
28808: EQUAL
28809: IFTRUE 28813
28811: GO 28831
28813: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28814: LD_ADDR_VAR 0 3
28818: PUSH
28819: LD_INT 23
28821: PUSH
28822: LD_INT 24
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: ST_TO_ADDR
28829: GO 28858
28831: LD_INT 47
28833: DOUBLE
28834: EQUAL
28835: IFTRUE 28839
28837: GO 28857
28839: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28840: LD_ADDR_VAR 0 3
28844: PUSH
28845: LD_INT 23
28847: PUSH
28848: LD_INT 24
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: ST_TO_ADDR
28855: GO 28858
28857: POP
// result := ( chassis in result ) ;
28858: LD_ADDR_VAR 0 3
28862: PUSH
28863: LD_VAR 0 1
28867: PUSH
28868: LD_VAR 0 3
28872: IN
28873: ST_TO_ADDR
// end ;
28874: LD_VAR 0 3
28878: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28879: LD_INT 0
28881: PPUSH
28882: PPUSH
28883: PPUSH
28884: PPUSH
28885: PPUSH
28886: PPUSH
28887: PPUSH
// result := array ;
28888: LD_ADDR_VAR 0 5
28892: PUSH
28893: LD_VAR 0 1
28897: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28898: LD_VAR 0 1
28902: NOT
28903: PUSH
28904: LD_VAR 0 2
28908: NOT
28909: OR
28910: PUSH
28911: LD_VAR 0 3
28915: NOT
28916: OR
28917: PUSH
28918: LD_VAR 0 2
28922: PUSH
28923: LD_VAR 0 1
28927: GREATER
28928: OR
28929: PUSH
28930: LD_VAR 0 3
28934: PUSH
28935: LD_VAR 0 1
28939: GREATER
28940: OR
28941: IFFALSE 28945
// exit ;
28943: GO 29241
// if direction then
28945: LD_VAR 0 4
28949: IFFALSE 29013
// begin d := 1 ;
28951: LD_ADDR_VAR 0 9
28955: PUSH
28956: LD_INT 1
28958: ST_TO_ADDR
// if i_from > i_to then
28959: LD_VAR 0 2
28963: PUSH
28964: LD_VAR 0 3
28968: GREATER
28969: IFFALSE 28995
// length := ( array - i_from ) + i_to else
28971: LD_ADDR_VAR 0 11
28975: PUSH
28976: LD_VAR 0 1
28980: PUSH
28981: LD_VAR 0 2
28985: MINUS
28986: PUSH
28987: LD_VAR 0 3
28991: PLUS
28992: ST_TO_ADDR
28993: GO 29011
// length := i_to - i_from ;
28995: LD_ADDR_VAR 0 11
28999: PUSH
29000: LD_VAR 0 3
29004: PUSH
29005: LD_VAR 0 2
29009: MINUS
29010: ST_TO_ADDR
// end else
29011: GO 29074
// begin d := - 1 ;
29013: LD_ADDR_VAR 0 9
29017: PUSH
29018: LD_INT 1
29020: NEG
29021: ST_TO_ADDR
// if i_from > i_to then
29022: LD_VAR 0 2
29026: PUSH
29027: LD_VAR 0 3
29031: GREATER
29032: IFFALSE 29052
// length := i_from - i_to else
29034: LD_ADDR_VAR 0 11
29038: PUSH
29039: LD_VAR 0 2
29043: PUSH
29044: LD_VAR 0 3
29048: MINUS
29049: ST_TO_ADDR
29050: GO 29074
// length := ( array - i_to ) + i_from ;
29052: LD_ADDR_VAR 0 11
29056: PUSH
29057: LD_VAR 0 1
29061: PUSH
29062: LD_VAR 0 3
29066: MINUS
29067: PUSH
29068: LD_VAR 0 2
29072: PLUS
29073: ST_TO_ADDR
// end ; if not length then
29074: LD_VAR 0 11
29078: NOT
29079: IFFALSE 29083
// exit ;
29081: GO 29241
// tmp := array ;
29083: LD_ADDR_VAR 0 10
29087: PUSH
29088: LD_VAR 0 1
29092: ST_TO_ADDR
// for i = 1 to length do
29093: LD_ADDR_VAR 0 6
29097: PUSH
29098: DOUBLE
29099: LD_INT 1
29101: DEC
29102: ST_TO_ADDR
29103: LD_VAR 0 11
29107: PUSH
29108: FOR_TO
29109: IFFALSE 29229
// begin for j = 1 to array do
29111: LD_ADDR_VAR 0 7
29115: PUSH
29116: DOUBLE
29117: LD_INT 1
29119: DEC
29120: ST_TO_ADDR
29121: LD_VAR 0 1
29125: PUSH
29126: FOR_TO
29127: IFFALSE 29215
// begin k := j + d ;
29129: LD_ADDR_VAR 0 8
29133: PUSH
29134: LD_VAR 0 7
29138: PUSH
29139: LD_VAR 0 9
29143: PLUS
29144: ST_TO_ADDR
// if k > array then
29145: LD_VAR 0 8
29149: PUSH
29150: LD_VAR 0 1
29154: GREATER
29155: IFFALSE 29165
// k := 1 ;
29157: LD_ADDR_VAR 0 8
29161: PUSH
29162: LD_INT 1
29164: ST_TO_ADDR
// if not k then
29165: LD_VAR 0 8
29169: NOT
29170: IFFALSE 29182
// k := array ;
29172: LD_ADDR_VAR 0 8
29176: PUSH
29177: LD_VAR 0 1
29181: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29182: LD_ADDR_VAR 0 10
29186: PUSH
29187: LD_VAR 0 10
29191: PPUSH
29192: LD_VAR 0 8
29196: PPUSH
29197: LD_VAR 0 1
29201: PUSH
29202: LD_VAR 0 7
29206: ARRAY
29207: PPUSH
29208: CALL_OW 1
29212: ST_TO_ADDR
// end ;
29213: GO 29126
29215: POP
29216: POP
// array := tmp ;
29217: LD_ADDR_VAR 0 1
29221: PUSH
29222: LD_VAR 0 10
29226: ST_TO_ADDR
// end ;
29227: GO 29108
29229: POP
29230: POP
// result := array ;
29231: LD_ADDR_VAR 0 5
29235: PUSH
29236: LD_VAR 0 1
29240: ST_TO_ADDR
// end ;
29241: LD_VAR 0 5
29245: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29246: LD_INT 0
29248: PPUSH
29249: PPUSH
// result := 0 ;
29250: LD_ADDR_VAR 0 3
29254: PUSH
29255: LD_INT 0
29257: ST_TO_ADDR
// if not array or not value in array then
29258: LD_VAR 0 1
29262: NOT
29263: PUSH
29264: LD_VAR 0 2
29268: PUSH
29269: LD_VAR 0 1
29273: IN
29274: NOT
29275: OR
29276: IFFALSE 29280
// exit ;
29278: GO 29334
// for i = 1 to array do
29280: LD_ADDR_VAR 0 4
29284: PUSH
29285: DOUBLE
29286: LD_INT 1
29288: DEC
29289: ST_TO_ADDR
29290: LD_VAR 0 1
29294: PUSH
29295: FOR_TO
29296: IFFALSE 29332
// if value = array [ i ] then
29298: LD_VAR 0 2
29302: PUSH
29303: LD_VAR 0 1
29307: PUSH
29308: LD_VAR 0 4
29312: ARRAY
29313: EQUAL
29314: IFFALSE 29330
// begin result := i ;
29316: LD_ADDR_VAR 0 3
29320: PUSH
29321: LD_VAR 0 4
29325: ST_TO_ADDR
// exit ;
29326: POP
29327: POP
29328: GO 29334
// end ;
29330: GO 29295
29332: POP
29333: POP
// end ;
29334: LD_VAR 0 3
29338: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29339: LD_INT 0
29341: PPUSH
// vc_chassis := chassis ;
29342: LD_ADDR_OWVAR 37
29346: PUSH
29347: LD_VAR 0 1
29351: ST_TO_ADDR
// vc_engine := engine ;
29352: LD_ADDR_OWVAR 39
29356: PUSH
29357: LD_VAR 0 2
29361: ST_TO_ADDR
// vc_control := control ;
29362: LD_ADDR_OWVAR 38
29366: PUSH
29367: LD_VAR 0 3
29371: ST_TO_ADDR
// vc_weapon := weapon ;
29372: LD_ADDR_OWVAR 40
29376: PUSH
29377: LD_VAR 0 4
29381: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29382: LD_ADDR_OWVAR 41
29386: PUSH
29387: LD_VAR 0 5
29391: ST_TO_ADDR
// end ;
29392: LD_VAR 0 6
29396: RET
// export function WantPlant ( unit ) ; var task ; begin
29397: LD_INT 0
29399: PPUSH
29400: PPUSH
// result := false ;
29401: LD_ADDR_VAR 0 2
29405: PUSH
29406: LD_INT 0
29408: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29409: LD_ADDR_VAR 0 3
29413: PUSH
29414: LD_VAR 0 1
29418: PPUSH
29419: CALL_OW 437
29423: ST_TO_ADDR
// if task then
29424: LD_VAR 0 3
29428: IFFALSE 29456
// if task [ 1 ] [ 1 ] = p then
29430: LD_VAR 0 3
29434: PUSH
29435: LD_INT 1
29437: ARRAY
29438: PUSH
29439: LD_INT 1
29441: ARRAY
29442: PUSH
29443: LD_STRING p
29445: EQUAL
29446: IFFALSE 29456
// result := true ;
29448: LD_ADDR_VAR 0 2
29452: PUSH
29453: LD_INT 1
29455: ST_TO_ADDR
// end ;
29456: LD_VAR 0 2
29460: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29461: LD_INT 0
29463: PPUSH
29464: PPUSH
29465: PPUSH
29466: PPUSH
// if pos < 1 then
29467: LD_VAR 0 2
29471: PUSH
29472: LD_INT 1
29474: LESS
29475: IFFALSE 29479
// exit ;
29477: GO 29782
// if pos = 1 then
29479: LD_VAR 0 2
29483: PUSH
29484: LD_INT 1
29486: EQUAL
29487: IFFALSE 29520
// result := Replace ( arr , pos [ 1 ] , value ) else
29489: LD_ADDR_VAR 0 4
29493: PUSH
29494: LD_VAR 0 1
29498: PPUSH
29499: LD_VAR 0 2
29503: PUSH
29504: LD_INT 1
29506: ARRAY
29507: PPUSH
29508: LD_VAR 0 3
29512: PPUSH
29513: CALL_OW 1
29517: ST_TO_ADDR
29518: GO 29782
// begin tmp := arr ;
29520: LD_ADDR_VAR 0 6
29524: PUSH
29525: LD_VAR 0 1
29529: ST_TO_ADDR
// s_arr := [ tmp ] ;
29530: LD_ADDR_VAR 0 7
29534: PUSH
29535: LD_VAR 0 6
29539: PUSH
29540: EMPTY
29541: LIST
29542: ST_TO_ADDR
// for i = 1 to pos - 1 do
29543: LD_ADDR_VAR 0 5
29547: PUSH
29548: DOUBLE
29549: LD_INT 1
29551: DEC
29552: ST_TO_ADDR
29553: LD_VAR 0 2
29557: PUSH
29558: LD_INT 1
29560: MINUS
29561: PUSH
29562: FOR_TO
29563: IFFALSE 29608
// begin tmp := tmp [ pos [ i ] ] ;
29565: LD_ADDR_VAR 0 6
29569: PUSH
29570: LD_VAR 0 6
29574: PUSH
29575: LD_VAR 0 2
29579: PUSH
29580: LD_VAR 0 5
29584: ARRAY
29585: ARRAY
29586: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29587: LD_ADDR_VAR 0 7
29591: PUSH
29592: LD_VAR 0 7
29596: PUSH
29597: LD_VAR 0 6
29601: PUSH
29602: EMPTY
29603: LIST
29604: ADD
29605: ST_TO_ADDR
// end ;
29606: GO 29562
29608: POP
29609: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29610: LD_ADDR_VAR 0 6
29614: PUSH
29615: LD_VAR 0 6
29619: PPUSH
29620: LD_VAR 0 2
29624: PUSH
29625: LD_VAR 0 2
29629: ARRAY
29630: PPUSH
29631: LD_VAR 0 3
29635: PPUSH
29636: CALL_OW 1
29640: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29641: LD_ADDR_VAR 0 7
29645: PUSH
29646: LD_VAR 0 7
29650: PPUSH
29651: LD_VAR 0 7
29655: PPUSH
29656: LD_VAR 0 6
29660: PPUSH
29661: CALL_OW 1
29665: ST_TO_ADDR
// for i = s_arr downto 2 do
29666: LD_ADDR_VAR 0 5
29670: PUSH
29671: DOUBLE
29672: LD_VAR 0 7
29676: INC
29677: ST_TO_ADDR
29678: LD_INT 2
29680: PUSH
29681: FOR_DOWNTO
29682: IFFALSE 29766
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29684: LD_ADDR_VAR 0 6
29688: PUSH
29689: LD_VAR 0 7
29693: PUSH
29694: LD_VAR 0 5
29698: PUSH
29699: LD_INT 1
29701: MINUS
29702: ARRAY
29703: PPUSH
29704: LD_VAR 0 2
29708: PUSH
29709: LD_VAR 0 5
29713: PUSH
29714: LD_INT 1
29716: MINUS
29717: ARRAY
29718: PPUSH
29719: LD_VAR 0 7
29723: PUSH
29724: LD_VAR 0 5
29728: ARRAY
29729: PPUSH
29730: CALL_OW 1
29734: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29735: LD_ADDR_VAR 0 7
29739: PUSH
29740: LD_VAR 0 7
29744: PPUSH
29745: LD_VAR 0 5
29749: PUSH
29750: LD_INT 1
29752: MINUS
29753: PPUSH
29754: LD_VAR 0 6
29758: PPUSH
29759: CALL_OW 1
29763: ST_TO_ADDR
// end ;
29764: GO 29681
29766: POP
29767: POP
// result := s_arr [ 1 ] ;
29768: LD_ADDR_VAR 0 4
29772: PUSH
29773: LD_VAR 0 7
29777: PUSH
29778: LD_INT 1
29780: ARRAY
29781: ST_TO_ADDR
// end ; end ;
29782: LD_VAR 0 4
29786: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29787: LD_INT 0
29789: PPUSH
29790: PPUSH
// if not list then
29791: LD_VAR 0 1
29795: NOT
29796: IFFALSE 29800
// exit ;
29798: GO 29891
// i := list [ pos1 ] ;
29800: LD_ADDR_VAR 0 5
29804: PUSH
29805: LD_VAR 0 1
29809: PUSH
29810: LD_VAR 0 2
29814: ARRAY
29815: ST_TO_ADDR
// if not i then
29816: LD_VAR 0 5
29820: NOT
29821: IFFALSE 29825
// exit ;
29823: GO 29891
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29825: LD_ADDR_VAR 0 1
29829: PUSH
29830: LD_VAR 0 1
29834: PPUSH
29835: LD_VAR 0 2
29839: PPUSH
29840: LD_VAR 0 1
29844: PUSH
29845: LD_VAR 0 3
29849: ARRAY
29850: PPUSH
29851: CALL_OW 1
29855: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29856: LD_ADDR_VAR 0 1
29860: PUSH
29861: LD_VAR 0 1
29865: PPUSH
29866: LD_VAR 0 3
29870: PPUSH
29871: LD_VAR 0 5
29875: PPUSH
29876: CALL_OW 1
29880: ST_TO_ADDR
// result := list ;
29881: LD_ADDR_VAR 0 4
29885: PUSH
29886: LD_VAR 0 1
29890: ST_TO_ADDR
// end ;
29891: LD_VAR 0 4
29895: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29896: LD_INT 0
29898: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29899: LD_ADDR_VAR 0 5
29903: PUSH
29904: LD_VAR 0 1
29908: PPUSH
29909: CALL_OW 250
29913: PPUSH
29914: LD_VAR 0 1
29918: PPUSH
29919: CALL_OW 251
29923: PPUSH
29924: LD_VAR 0 2
29928: PPUSH
29929: LD_VAR 0 3
29933: PPUSH
29934: LD_VAR 0 4
29938: PPUSH
29939: CALL 29949 0 5
29943: ST_TO_ADDR
// end ;
29944: LD_VAR 0 5
29948: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29949: LD_INT 0
29951: PPUSH
29952: PPUSH
29953: PPUSH
29954: PPUSH
// if not list then
29955: LD_VAR 0 3
29959: NOT
29960: IFFALSE 29964
// exit ;
29962: GO 30352
// result := [ ] ;
29964: LD_ADDR_VAR 0 6
29968: PUSH
29969: EMPTY
29970: ST_TO_ADDR
// for i in list do
29971: LD_ADDR_VAR 0 7
29975: PUSH
29976: LD_VAR 0 3
29980: PUSH
29981: FOR_IN
29982: IFFALSE 30184
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29984: LD_ADDR_VAR 0 9
29988: PUSH
29989: LD_VAR 0 7
29993: PPUSH
29994: LD_VAR 0 1
29998: PPUSH
29999: LD_VAR 0 2
30003: PPUSH
30004: CALL_OW 297
30008: ST_TO_ADDR
// if not result then
30009: LD_VAR 0 6
30013: NOT
30014: IFFALSE 30040
// result := [ [ i , tmp ] ] else
30016: LD_ADDR_VAR 0 6
30020: PUSH
30021: LD_VAR 0 7
30025: PUSH
30026: LD_VAR 0 9
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: EMPTY
30036: LIST
30037: ST_TO_ADDR
30038: GO 30182
// begin if result [ result ] [ 2 ] < tmp then
30040: LD_VAR 0 6
30044: PUSH
30045: LD_VAR 0 6
30049: ARRAY
30050: PUSH
30051: LD_INT 2
30053: ARRAY
30054: PUSH
30055: LD_VAR 0 9
30059: LESS
30060: IFFALSE 30102
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30062: LD_ADDR_VAR 0 6
30066: PUSH
30067: LD_VAR 0 6
30071: PPUSH
30072: LD_VAR 0 6
30076: PUSH
30077: LD_INT 1
30079: PLUS
30080: PPUSH
30081: LD_VAR 0 7
30085: PUSH
30086: LD_VAR 0 9
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PPUSH
30095: CALL_OW 2
30099: ST_TO_ADDR
30100: GO 30182
// for j = 1 to result do
30102: LD_ADDR_VAR 0 8
30106: PUSH
30107: DOUBLE
30108: LD_INT 1
30110: DEC
30111: ST_TO_ADDR
30112: LD_VAR 0 6
30116: PUSH
30117: FOR_TO
30118: IFFALSE 30180
// begin if tmp < result [ j ] [ 2 ] then
30120: LD_VAR 0 9
30124: PUSH
30125: LD_VAR 0 6
30129: PUSH
30130: LD_VAR 0 8
30134: ARRAY
30135: PUSH
30136: LD_INT 2
30138: ARRAY
30139: LESS
30140: IFFALSE 30178
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30142: LD_ADDR_VAR 0 6
30146: PUSH
30147: LD_VAR 0 6
30151: PPUSH
30152: LD_VAR 0 8
30156: PPUSH
30157: LD_VAR 0 7
30161: PUSH
30162: LD_VAR 0 9
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PPUSH
30171: CALL_OW 2
30175: ST_TO_ADDR
// break ;
30176: GO 30180
// end ; end ;
30178: GO 30117
30180: POP
30181: POP
// end ; end ;
30182: GO 29981
30184: POP
30185: POP
// if result and not asc then
30186: LD_VAR 0 6
30190: PUSH
30191: LD_VAR 0 4
30195: NOT
30196: AND
30197: IFFALSE 30272
// begin tmp := result ;
30199: LD_ADDR_VAR 0 9
30203: PUSH
30204: LD_VAR 0 6
30208: ST_TO_ADDR
// for i = tmp downto 1 do
30209: LD_ADDR_VAR 0 7
30213: PUSH
30214: DOUBLE
30215: LD_VAR 0 9
30219: INC
30220: ST_TO_ADDR
30221: LD_INT 1
30223: PUSH
30224: FOR_DOWNTO
30225: IFFALSE 30270
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30227: LD_ADDR_VAR 0 6
30231: PUSH
30232: LD_VAR 0 6
30236: PPUSH
30237: LD_VAR 0 9
30241: PUSH
30242: LD_VAR 0 7
30246: MINUS
30247: PUSH
30248: LD_INT 1
30250: PLUS
30251: PPUSH
30252: LD_VAR 0 9
30256: PUSH
30257: LD_VAR 0 7
30261: ARRAY
30262: PPUSH
30263: CALL_OW 1
30267: ST_TO_ADDR
30268: GO 30224
30270: POP
30271: POP
// end ; tmp := [ ] ;
30272: LD_ADDR_VAR 0 9
30276: PUSH
30277: EMPTY
30278: ST_TO_ADDR
// if mode then
30279: LD_VAR 0 5
30283: IFFALSE 30352
// begin for i = 1 to result do
30285: LD_ADDR_VAR 0 7
30289: PUSH
30290: DOUBLE
30291: LD_INT 1
30293: DEC
30294: ST_TO_ADDR
30295: LD_VAR 0 6
30299: PUSH
30300: FOR_TO
30301: IFFALSE 30340
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30303: LD_ADDR_VAR 0 9
30307: PUSH
30308: LD_VAR 0 9
30312: PPUSH
30313: LD_VAR 0 7
30317: PPUSH
30318: LD_VAR 0 6
30322: PUSH
30323: LD_VAR 0 7
30327: ARRAY
30328: PUSH
30329: LD_INT 1
30331: ARRAY
30332: PPUSH
30333: CALL_OW 1
30337: ST_TO_ADDR
30338: GO 30300
30340: POP
30341: POP
// result := tmp ;
30342: LD_ADDR_VAR 0 6
30346: PUSH
30347: LD_VAR 0 9
30351: ST_TO_ADDR
// end ; end ;
30352: LD_VAR 0 6
30356: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30357: LD_INT 0
30359: PPUSH
30360: PPUSH
30361: PPUSH
30362: PPUSH
30363: PPUSH
30364: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30365: LD_ADDR_VAR 0 5
30369: PUSH
30370: LD_INT 0
30372: PUSH
30373: LD_INT 0
30375: PUSH
30376: LD_INT 0
30378: PUSH
30379: EMPTY
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: ST_TO_ADDR
// if not x or not y then
30387: LD_VAR 0 2
30391: NOT
30392: PUSH
30393: LD_VAR 0 3
30397: NOT
30398: OR
30399: IFFALSE 30403
// exit ;
30401: GO 32049
// if not range then
30403: LD_VAR 0 4
30407: NOT
30408: IFFALSE 30418
// range := 10 ;
30410: LD_ADDR_VAR 0 4
30414: PUSH
30415: LD_INT 10
30417: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30418: LD_ADDR_VAR 0 8
30422: PUSH
30423: LD_INT 81
30425: PUSH
30426: LD_VAR 0 1
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 92
30437: PUSH
30438: LD_VAR 0 2
30442: PUSH
30443: LD_VAR 0 3
30447: PUSH
30448: LD_VAR 0 4
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 3
30461: PUSH
30462: LD_INT 21
30464: PUSH
30465: LD_INT 3
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: LIST
30480: PPUSH
30481: CALL_OW 69
30485: ST_TO_ADDR
// if not tmp then
30486: LD_VAR 0 8
30490: NOT
30491: IFFALSE 30495
// exit ;
30493: GO 32049
// for i in tmp do
30495: LD_ADDR_VAR 0 6
30499: PUSH
30500: LD_VAR 0 8
30504: PUSH
30505: FOR_IN
30506: IFFALSE 32024
// begin points := [ 0 , 0 , 0 ] ;
30508: LD_ADDR_VAR 0 9
30512: PUSH
30513: LD_INT 0
30515: PUSH
30516: LD_INT 0
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: LIST
30526: ST_TO_ADDR
// bpoints := 1 ;
30527: LD_ADDR_VAR 0 10
30531: PUSH
30532: LD_INT 1
30534: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30535: LD_VAR 0 6
30539: PPUSH
30540: CALL_OW 247
30544: PUSH
30545: LD_INT 1
30547: DOUBLE
30548: EQUAL
30549: IFTRUE 30553
30551: GO 31131
30553: POP
// begin if GetClass ( i ) = 1 then
30554: LD_VAR 0 6
30558: PPUSH
30559: CALL_OW 257
30563: PUSH
30564: LD_INT 1
30566: EQUAL
30567: IFFALSE 30588
// points := [ 10 , 5 , 3 ] ;
30569: LD_ADDR_VAR 0 9
30573: PUSH
30574: LD_INT 10
30576: PUSH
30577: LD_INT 5
30579: PUSH
30580: LD_INT 3
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: LIST
30587: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30588: LD_VAR 0 6
30592: PPUSH
30593: CALL_OW 257
30597: PUSH
30598: LD_INT 2
30600: PUSH
30601: LD_INT 3
30603: PUSH
30604: LD_INT 4
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: LIST
30611: IN
30612: IFFALSE 30633
// points := [ 3 , 2 , 1 ] ;
30614: LD_ADDR_VAR 0 9
30618: PUSH
30619: LD_INT 3
30621: PUSH
30622: LD_INT 2
30624: PUSH
30625: LD_INT 1
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: LIST
30632: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30633: LD_VAR 0 6
30637: PPUSH
30638: CALL_OW 257
30642: PUSH
30643: LD_INT 5
30645: EQUAL
30646: IFFALSE 30667
// points := [ 130 , 5 , 2 ] ;
30648: LD_ADDR_VAR 0 9
30652: PUSH
30653: LD_INT 130
30655: PUSH
30656: LD_INT 5
30658: PUSH
30659: LD_INT 2
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: LIST
30666: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30667: LD_VAR 0 6
30671: PPUSH
30672: CALL_OW 257
30676: PUSH
30677: LD_INT 8
30679: EQUAL
30680: IFFALSE 30701
// points := [ 35 , 35 , 30 ] ;
30682: LD_ADDR_VAR 0 9
30686: PUSH
30687: LD_INT 35
30689: PUSH
30690: LD_INT 35
30692: PUSH
30693: LD_INT 30
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: LIST
30700: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30701: LD_VAR 0 6
30705: PPUSH
30706: CALL_OW 257
30710: PUSH
30711: LD_INT 9
30713: EQUAL
30714: IFFALSE 30735
// points := [ 20 , 55 , 40 ] ;
30716: LD_ADDR_VAR 0 9
30720: PUSH
30721: LD_INT 20
30723: PUSH
30724: LD_INT 55
30726: PUSH
30727: LD_INT 40
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: LIST
30734: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30735: LD_VAR 0 6
30739: PPUSH
30740: CALL_OW 257
30744: PUSH
30745: LD_INT 12
30747: PUSH
30748: LD_INT 16
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: IN
30755: IFFALSE 30776
// points := [ 5 , 3 , 2 ] ;
30757: LD_ADDR_VAR 0 9
30761: PUSH
30762: LD_INT 5
30764: PUSH
30765: LD_INT 3
30767: PUSH
30768: LD_INT 2
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: LIST
30775: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30776: LD_VAR 0 6
30780: PPUSH
30781: CALL_OW 257
30785: PUSH
30786: LD_INT 17
30788: EQUAL
30789: IFFALSE 30810
// points := [ 100 , 50 , 75 ] ;
30791: LD_ADDR_VAR 0 9
30795: PUSH
30796: LD_INT 100
30798: PUSH
30799: LD_INT 50
30801: PUSH
30802: LD_INT 75
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: LIST
30809: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30810: LD_VAR 0 6
30814: PPUSH
30815: CALL_OW 257
30819: PUSH
30820: LD_INT 15
30822: EQUAL
30823: IFFALSE 30844
// points := [ 10 , 5 , 3 ] ;
30825: LD_ADDR_VAR 0 9
30829: PUSH
30830: LD_INT 10
30832: PUSH
30833: LD_INT 5
30835: PUSH
30836: LD_INT 3
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: LIST
30843: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30844: LD_VAR 0 6
30848: PPUSH
30849: CALL_OW 257
30853: PUSH
30854: LD_INT 14
30856: EQUAL
30857: IFFALSE 30878
// points := [ 10 , 0 , 0 ] ;
30859: LD_ADDR_VAR 0 9
30863: PUSH
30864: LD_INT 10
30866: PUSH
30867: LD_INT 0
30869: PUSH
30870: LD_INT 0
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: LIST
30877: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30878: LD_VAR 0 6
30882: PPUSH
30883: CALL_OW 257
30887: PUSH
30888: LD_INT 11
30890: EQUAL
30891: IFFALSE 30912
// points := [ 30 , 10 , 5 ] ;
30893: LD_ADDR_VAR 0 9
30897: PUSH
30898: LD_INT 30
30900: PUSH
30901: LD_INT 10
30903: PUSH
30904: LD_INT 5
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: LIST
30911: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30912: LD_VAR 0 1
30916: PPUSH
30917: LD_INT 5
30919: PPUSH
30920: CALL_OW 321
30924: PUSH
30925: LD_INT 2
30927: EQUAL
30928: IFFALSE 30945
// bpoints := bpoints * 1.8 ;
30930: LD_ADDR_VAR 0 10
30934: PUSH
30935: LD_VAR 0 10
30939: PUSH
30940: LD_REAL  1.80000000000000E+0000
30943: MUL
30944: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30945: LD_VAR 0 6
30949: PPUSH
30950: CALL_OW 257
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: LD_INT 2
30960: PUSH
30961: LD_INT 3
30963: PUSH
30964: LD_INT 4
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: IN
30973: PUSH
30974: LD_VAR 0 1
30978: PPUSH
30979: LD_INT 51
30981: PPUSH
30982: CALL_OW 321
30986: PUSH
30987: LD_INT 2
30989: EQUAL
30990: AND
30991: IFFALSE 31008
// bpoints := bpoints * 1.2 ;
30993: LD_ADDR_VAR 0 10
30997: PUSH
30998: LD_VAR 0 10
31002: PUSH
31003: LD_REAL  1.20000000000000E+0000
31006: MUL
31007: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31008: LD_VAR 0 6
31012: PPUSH
31013: CALL_OW 257
31017: PUSH
31018: LD_INT 5
31020: PUSH
31021: LD_INT 7
31023: PUSH
31024: LD_INT 9
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: LIST
31031: IN
31032: PUSH
31033: LD_VAR 0 1
31037: PPUSH
31038: LD_INT 52
31040: PPUSH
31041: CALL_OW 321
31045: PUSH
31046: LD_INT 2
31048: EQUAL
31049: AND
31050: IFFALSE 31067
// bpoints := bpoints * 1.5 ;
31052: LD_ADDR_VAR 0 10
31056: PUSH
31057: LD_VAR 0 10
31061: PUSH
31062: LD_REAL  1.50000000000000E+0000
31065: MUL
31066: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31067: LD_VAR 0 1
31071: PPUSH
31072: LD_INT 66
31074: PPUSH
31075: CALL_OW 321
31079: PUSH
31080: LD_INT 2
31082: EQUAL
31083: IFFALSE 31100
// bpoints := bpoints * 1.1 ;
31085: LD_ADDR_VAR 0 10
31089: PUSH
31090: LD_VAR 0 10
31094: PUSH
31095: LD_REAL  1.10000000000000E+0000
31098: MUL
31099: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31100: LD_ADDR_VAR 0 10
31104: PUSH
31105: LD_VAR 0 10
31109: PUSH
31110: LD_VAR 0 6
31114: PPUSH
31115: LD_INT 1
31117: PPUSH
31118: CALL_OW 259
31122: PUSH
31123: LD_REAL  1.15000000000000E+0000
31126: MUL
31127: MUL
31128: ST_TO_ADDR
// end ; unit_vehicle :
31129: GO 31953
31131: LD_INT 2
31133: DOUBLE
31134: EQUAL
31135: IFTRUE 31139
31137: GO 31941
31139: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31140: LD_VAR 0 6
31144: PPUSH
31145: CALL_OW 264
31149: PUSH
31150: LD_INT 2
31152: PUSH
31153: LD_INT 42
31155: PUSH
31156: LD_INT 24
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: LIST
31163: IN
31164: IFFALSE 31185
// points := [ 25 , 5 , 3 ] ;
31166: LD_ADDR_VAR 0 9
31170: PUSH
31171: LD_INT 25
31173: PUSH
31174: LD_INT 5
31176: PUSH
31177: LD_INT 3
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: LIST
31184: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31185: LD_VAR 0 6
31189: PPUSH
31190: CALL_OW 264
31194: PUSH
31195: LD_INT 4
31197: PUSH
31198: LD_INT 43
31200: PUSH
31201: LD_INT 25
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: LIST
31208: IN
31209: IFFALSE 31230
// points := [ 40 , 15 , 5 ] ;
31211: LD_ADDR_VAR 0 9
31215: PUSH
31216: LD_INT 40
31218: PUSH
31219: LD_INT 15
31221: PUSH
31222: LD_INT 5
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: LIST
31229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31230: LD_VAR 0 6
31234: PPUSH
31235: CALL_OW 264
31239: PUSH
31240: LD_INT 3
31242: PUSH
31243: LD_INT 23
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: IN
31250: IFFALSE 31271
// points := [ 7 , 25 , 8 ] ;
31252: LD_ADDR_VAR 0 9
31256: PUSH
31257: LD_INT 7
31259: PUSH
31260: LD_INT 25
31262: PUSH
31263: LD_INT 8
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: LIST
31270: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31271: LD_VAR 0 6
31275: PPUSH
31276: CALL_OW 264
31280: PUSH
31281: LD_INT 5
31283: PUSH
31284: LD_INT 27
31286: PUSH
31287: LD_INT 44
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: LIST
31294: IN
31295: IFFALSE 31316
// points := [ 14 , 50 , 16 ] ;
31297: LD_ADDR_VAR 0 9
31301: PUSH
31302: LD_INT 14
31304: PUSH
31305: LD_INT 50
31307: PUSH
31308: LD_INT 16
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: LIST
31315: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31316: LD_VAR 0 6
31320: PPUSH
31321: CALL_OW 264
31325: PUSH
31326: LD_INT 6
31328: PUSH
31329: LD_INT 46
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: IN
31336: IFFALSE 31357
// points := [ 32 , 120 , 70 ] ;
31338: LD_ADDR_VAR 0 9
31342: PUSH
31343: LD_INT 32
31345: PUSH
31346: LD_INT 120
31348: PUSH
31349: LD_INT 70
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: LIST
31356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
31357: LD_VAR 0 6
31361: PPUSH
31362: CALL_OW 264
31366: PUSH
31367: LD_INT 7
31369: PUSH
31370: LD_INT 28
31372: PUSH
31373: LD_INT 45
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: LIST
31380: IN
31381: IFFALSE 31402
// points := [ 35 , 20 , 45 ] ;
31383: LD_ADDR_VAR 0 9
31387: PUSH
31388: LD_INT 35
31390: PUSH
31391: LD_INT 20
31393: PUSH
31394: LD_INT 45
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: LIST
31401: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31402: LD_VAR 0 6
31406: PPUSH
31407: CALL_OW 264
31411: PUSH
31412: LD_INT 47
31414: PUSH
31415: EMPTY
31416: LIST
31417: IN
31418: IFFALSE 31439
// points := [ 67 , 45 , 75 ] ;
31420: LD_ADDR_VAR 0 9
31424: PUSH
31425: LD_INT 67
31427: PUSH
31428: LD_INT 45
31430: PUSH
31431: LD_INT 75
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: LIST
31438: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31439: LD_VAR 0 6
31443: PPUSH
31444: CALL_OW 264
31448: PUSH
31449: LD_INT 26
31451: PUSH
31452: EMPTY
31453: LIST
31454: IN
31455: IFFALSE 31476
// points := [ 120 , 30 , 80 ] ;
31457: LD_ADDR_VAR 0 9
31461: PUSH
31462: LD_INT 120
31464: PUSH
31465: LD_INT 30
31467: PUSH
31468: LD_INT 80
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: LIST
31475: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31476: LD_VAR 0 6
31480: PPUSH
31481: CALL_OW 264
31485: PUSH
31486: LD_INT 22
31488: PUSH
31489: EMPTY
31490: LIST
31491: IN
31492: IFFALSE 31513
// points := [ 40 , 1 , 1 ] ;
31494: LD_ADDR_VAR 0 9
31498: PUSH
31499: LD_INT 40
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: LD_INT 1
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: LIST
31512: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31513: LD_VAR 0 6
31517: PPUSH
31518: CALL_OW 264
31522: PUSH
31523: LD_INT 29
31525: PUSH
31526: EMPTY
31527: LIST
31528: IN
31529: IFFALSE 31550
// points := [ 70 , 200 , 400 ] ;
31531: LD_ADDR_VAR 0 9
31535: PUSH
31536: LD_INT 70
31538: PUSH
31539: LD_INT 200
31541: PUSH
31542: LD_INT 400
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: LIST
31549: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31550: LD_VAR 0 6
31554: PPUSH
31555: CALL_OW 264
31559: PUSH
31560: LD_INT 14
31562: PUSH
31563: LD_INT 53
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: IN
31570: IFFALSE 31591
// points := [ 40 , 10 , 20 ] ;
31572: LD_ADDR_VAR 0 9
31576: PUSH
31577: LD_INT 40
31579: PUSH
31580: LD_INT 10
31582: PUSH
31583: LD_INT 20
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: LIST
31590: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31591: LD_VAR 0 6
31595: PPUSH
31596: CALL_OW 264
31600: PUSH
31601: LD_INT 9
31603: PUSH
31604: EMPTY
31605: LIST
31606: IN
31607: IFFALSE 31628
// points := [ 5 , 70 , 20 ] ;
31609: LD_ADDR_VAR 0 9
31613: PUSH
31614: LD_INT 5
31616: PUSH
31617: LD_INT 70
31619: PUSH
31620: LD_INT 20
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: LIST
31627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31628: LD_VAR 0 6
31632: PPUSH
31633: CALL_OW 264
31637: PUSH
31638: LD_INT 10
31640: PUSH
31641: EMPTY
31642: LIST
31643: IN
31644: IFFALSE 31665
// points := [ 35 , 110 , 70 ] ;
31646: LD_ADDR_VAR 0 9
31650: PUSH
31651: LD_INT 35
31653: PUSH
31654: LD_INT 110
31656: PUSH
31657: LD_INT 70
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: LIST
31664: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31665: LD_VAR 0 6
31669: PPUSH
31670: CALL_OW 265
31674: PUSH
31675: LD_INT 25
31677: EQUAL
31678: IFFALSE 31699
// points := [ 80 , 65 , 100 ] ;
31680: LD_ADDR_VAR 0 9
31684: PUSH
31685: LD_INT 80
31687: PUSH
31688: LD_INT 65
31690: PUSH
31691: LD_INT 100
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: LIST
31698: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31699: LD_VAR 0 6
31703: PPUSH
31704: CALL_OW 263
31708: PUSH
31709: LD_INT 1
31711: EQUAL
31712: IFFALSE 31747
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31714: LD_ADDR_VAR 0 10
31718: PUSH
31719: LD_VAR 0 10
31723: PUSH
31724: LD_VAR 0 6
31728: PPUSH
31729: CALL_OW 311
31733: PPUSH
31734: LD_INT 3
31736: PPUSH
31737: CALL_OW 259
31741: PUSH
31742: LD_INT 4
31744: MUL
31745: MUL
31746: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31747: LD_VAR 0 6
31751: PPUSH
31752: CALL_OW 263
31756: PUSH
31757: LD_INT 2
31759: EQUAL
31760: IFFALSE 31811
// begin j := IsControledBy ( i ) ;
31762: LD_ADDR_VAR 0 7
31766: PUSH
31767: LD_VAR 0 6
31771: PPUSH
31772: CALL_OW 312
31776: ST_TO_ADDR
// if j then
31777: LD_VAR 0 7
31781: IFFALSE 31811
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31783: LD_ADDR_VAR 0 10
31787: PUSH
31788: LD_VAR 0 10
31792: PUSH
31793: LD_VAR 0 7
31797: PPUSH
31798: LD_INT 3
31800: PPUSH
31801: CALL_OW 259
31805: PUSH
31806: LD_INT 3
31808: MUL
31809: MUL
31810: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31811: LD_VAR 0 6
31815: PPUSH
31816: CALL_OW 264
31820: PUSH
31821: LD_INT 5
31823: PUSH
31824: LD_INT 6
31826: PUSH
31827: LD_INT 46
31829: PUSH
31830: LD_INT 44
31832: PUSH
31833: LD_INT 47
31835: PUSH
31836: LD_INT 45
31838: PUSH
31839: LD_INT 28
31841: PUSH
31842: LD_INT 7
31844: PUSH
31845: LD_INT 27
31847: PUSH
31848: LD_INT 29
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: IN
31863: PUSH
31864: LD_VAR 0 1
31868: PPUSH
31869: LD_INT 52
31871: PPUSH
31872: CALL_OW 321
31876: PUSH
31877: LD_INT 2
31879: EQUAL
31880: AND
31881: IFFALSE 31898
// bpoints := bpoints * 1.2 ;
31883: LD_ADDR_VAR 0 10
31887: PUSH
31888: LD_VAR 0 10
31892: PUSH
31893: LD_REAL  1.20000000000000E+0000
31896: MUL
31897: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31898: LD_VAR 0 6
31902: PPUSH
31903: CALL_OW 264
31907: PUSH
31908: LD_INT 6
31910: PUSH
31911: LD_INT 46
31913: PUSH
31914: LD_INT 47
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: LIST
31921: IN
31922: IFFALSE 31939
// bpoints := bpoints * 1.2 ;
31924: LD_ADDR_VAR 0 10
31928: PUSH
31929: LD_VAR 0 10
31933: PUSH
31934: LD_REAL  1.20000000000000E+0000
31937: MUL
31938: ST_TO_ADDR
// end ; unit_building :
31939: GO 31953
31941: LD_INT 3
31943: DOUBLE
31944: EQUAL
31945: IFTRUE 31949
31947: GO 31952
31949: POP
// ; end ;
31950: GO 31953
31952: POP
// for j = 1 to 3 do
31953: LD_ADDR_VAR 0 7
31957: PUSH
31958: DOUBLE
31959: LD_INT 1
31961: DEC
31962: ST_TO_ADDR
31963: LD_INT 3
31965: PUSH
31966: FOR_TO
31967: IFFALSE 32020
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31969: LD_ADDR_VAR 0 5
31973: PUSH
31974: LD_VAR 0 5
31978: PPUSH
31979: LD_VAR 0 7
31983: PPUSH
31984: LD_VAR 0 5
31988: PUSH
31989: LD_VAR 0 7
31993: ARRAY
31994: PUSH
31995: LD_VAR 0 9
31999: PUSH
32000: LD_VAR 0 7
32004: ARRAY
32005: PUSH
32006: LD_VAR 0 10
32010: MUL
32011: PLUS
32012: PPUSH
32013: CALL_OW 1
32017: ST_TO_ADDR
32018: GO 31966
32020: POP
32021: POP
// end ;
32022: GO 30505
32024: POP
32025: POP
// result := Replace ( result , 4 , tmp ) ;
32026: LD_ADDR_VAR 0 5
32030: PUSH
32031: LD_VAR 0 5
32035: PPUSH
32036: LD_INT 4
32038: PPUSH
32039: LD_VAR 0 8
32043: PPUSH
32044: CALL_OW 1
32048: ST_TO_ADDR
// end ;
32049: LD_VAR 0 5
32053: RET
// export function DangerAtRange ( unit , range ) ; begin
32054: LD_INT 0
32056: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32057: LD_ADDR_VAR 0 3
32061: PUSH
32062: LD_VAR 0 1
32066: PPUSH
32067: CALL_OW 255
32071: PPUSH
32072: LD_VAR 0 1
32076: PPUSH
32077: CALL_OW 250
32081: PPUSH
32082: LD_VAR 0 1
32086: PPUSH
32087: CALL_OW 251
32091: PPUSH
32092: LD_VAR 0 2
32096: PPUSH
32097: CALL 30357 0 4
32101: ST_TO_ADDR
// end ;
32102: LD_VAR 0 3
32106: RET
// export function DangerInArea ( side , area ) ; begin
32107: LD_INT 0
32109: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32110: LD_ADDR_VAR 0 3
32114: PUSH
32115: LD_VAR 0 2
32119: PPUSH
32120: LD_INT 81
32122: PUSH
32123: LD_VAR 0 1
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PPUSH
32132: CALL_OW 70
32136: ST_TO_ADDR
// end ;
32137: LD_VAR 0 3
32141: RET
// export function IsExtension ( b ) ; begin
32142: LD_INT 0
32144: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32145: LD_ADDR_VAR 0 2
32149: PUSH
32150: LD_VAR 0 1
32154: PUSH
32155: LD_INT 23
32157: PUSH
32158: LD_INT 20
32160: PUSH
32161: LD_INT 22
32163: PUSH
32164: LD_INT 17
32166: PUSH
32167: LD_INT 24
32169: PUSH
32170: LD_INT 21
32172: PUSH
32173: LD_INT 19
32175: PUSH
32176: LD_INT 16
32178: PUSH
32179: LD_INT 25
32181: PUSH
32182: LD_INT 18
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: IN
32197: ST_TO_ADDR
// end ;
32198: LD_VAR 0 2
32202: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32203: LD_INT 0
32205: PPUSH
32206: PPUSH
32207: PPUSH
// result := [ ] ;
32208: LD_ADDR_VAR 0 4
32212: PUSH
32213: EMPTY
32214: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32215: LD_ADDR_VAR 0 5
32219: PUSH
32220: LD_VAR 0 2
32224: PPUSH
32225: LD_INT 21
32227: PUSH
32228: LD_INT 3
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PPUSH
32235: CALL_OW 70
32239: ST_TO_ADDR
// if not tmp then
32240: LD_VAR 0 5
32244: NOT
32245: IFFALSE 32249
// exit ;
32247: GO 32313
// if checkLink then
32249: LD_VAR 0 3
32253: IFFALSE 32303
// begin for i in tmp do
32255: LD_ADDR_VAR 0 6
32259: PUSH
32260: LD_VAR 0 5
32264: PUSH
32265: FOR_IN
32266: IFFALSE 32301
// if GetBase ( i ) <> base then
32268: LD_VAR 0 6
32272: PPUSH
32273: CALL_OW 274
32277: PUSH
32278: LD_VAR 0 1
32282: NONEQUAL
32283: IFFALSE 32299
// ComLinkToBase ( base , i ) ;
32285: LD_VAR 0 1
32289: PPUSH
32290: LD_VAR 0 6
32294: PPUSH
32295: CALL_OW 169
32299: GO 32265
32301: POP
32302: POP
// end ; result := tmp ;
32303: LD_ADDR_VAR 0 4
32307: PUSH
32308: LD_VAR 0 5
32312: ST_TO_ADDR
// end ;
32313: LD_VAR 0 4
32317: RET
// export function ComComplete ( units , b ) ; var i ; begin
32318: LD_INT 0
32320: PPUSH
32321: PPUSH
// if not units then
32322: LD_VAR 0 1
32326: NOT
32327: IFFALSE 32331
// exit ;
32329: GO 32421
// for i in units do
32331: LD_ADDR_VAR 0 4
32335: PUSH
32336: LD_VAR 0 1
32340: PUSH
32341: FOR_IN
32342: IFFALSE 32419
// if BuildingStatus ( b ) = bs_build then
32344: LD_VAR 0 2
32348: PPUSH
32349: CALL_OW 461
32353: PUSH
32354: LD_INT 1
32356: EQUAL
32357: IFFALSE 32417
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32359: LD_VAR 0 4
32363: PPUSH
32364: LD_STRING h
32366: PUSH
32367: LD_VAR 0 2
32371: PPUSH
32372: CALL_OW 250
32376: PUSH
32377: LD_VAR 0 2
32381: PPUSH
32382: CALL_OW 251
32386: PUSH
32387: LD_VAR 0 2
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: LD_INT 0
32397: PUSH
32398: LD_INT 0
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: PUSH
32410: EMPTY
32411: LIST
32412: PPUSH
32413: CALL_OW 446
32417: GO 32341
32419: POP
32420: POP
// end ;
32421: LD_VAR 0 3
32425: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32426: LD_INT 0
32428: PPUSH
32429: PPUSH
32430: PPUSH
32431: PPUSH
32432: PPUSH
32433: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
32434: LD_VAR 0 1
32438: NOT
32439: PUSH
32440: LD_VAR 0 1
32444: PPUSH
32445: CALL_OW 263
32449: PUSH
32450: LD_INT 2
32452: EQUAL
32453: NOT
32454: OR
32455: IFFALSE 32459
// exit ;
32457: GO 32775
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32459: LD_ADDR_VAR 0 6
32463: PUSH
32464: LD_INT 22
32466: PUSH
32467: LD_VAR 0 1
32471: PPUSH
32472: CALL_OW 255
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 2
32483: PUSH
32484: LD_INT 30
32486: PUSH
32487: LD_INT 36
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 34
32496: PUSH
32497: LD_INT 31
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: LIST
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PPUSH
32513: CALL_OW 69
32517: ST_TO_ADDR
// if not tmp then
32518: LD_VAR 0 6
32522: NOT
32523: IFFALSE 32527
// exit ;
32525: GO 32775
// result := [ ] ;
32527: LD_ADDR_VAR 0 2
32531: PUSH
32532: EMPTY
32533: ST_TO_ADDR
// for i in tmp do
32534: LD_ADDR_VAR 0 3
32538: PUSH
32539: LD_VAR 0 6
32543: PUSH
32544: FOR_IN
32545: IFFALSE 32616
// begin t := UnitsInside ( i ) ;
32547: LD_ADDR_VAR 0 4
32551: PUSH
32552: LD_VAR 0 3
32556: PPUSH
32557: CALL_OW 313
32561: ST_TO_ADDR
// if t then
32562: LD_VAR 0 4
32566: IFFALSE 32614
// for j in t do
32568: LD_ADDR_VAR 0 7
32572: PUSH
32573: LD_VAR 0 4
32577: PUSH
32578: FOR_IN
32579: IFFALSE 32612
// result := Insert ( result , result + 1 , j ) ;
32581: LD_ADDR_VAR 0 2
32585: PUSH
32586: LD_VAR 0 2
32590: PPUSH
32591: LD_VAR 0 2
32595: PUSH
32596: LD_INT 1
32598: PLUS
32599: PPUSH
32600: LD_VAR 0 7
32604: PPUSH
32605: CALL_OW 2
32609: ST_TO_ADDR
32610: GO 32578
32612: POP
32613: POP
// end ;
32614: GO 32544
32616: POP
32617: POP
// if not result then
32618: LD_VAR 0 2
32622: NOT
32623: IFFALSE 32627
// exit ;
32625: GO 32775
// mech := result [ 1 ] ;
32627: LD_ADDR_VAR 0 5
32631: PUSH
32632: LD_VAR 0 2
32636: PUSH
32637: LD_INT 1
32639: ARRAY
32640: ST_TO_ADDR
// if result > 1 then
32641: LD_VAR 0 2
32645: PUSH
32646: LD_INT 1
32648: GREATER
32649: IFFALSE 32761
// for i = 2 to result do
32651: LD_ADDR_VAR 0 3
32655: PUSH
32656: DOUBLE
32657: LD_INT 2
32659: DEC
32660: ST_TO_ADDR
32661: LD_VAR 0 2
32665: PUSH
32666: FOR_TO
32667: IFFALSE 32759
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32669: LD_ADDR_VAR 0 4
32673: PUSH
32674: LD_VAR 0 2
32678: PUSH
32679: LD_VAR 0 3
32683: ARRAY
32684: PPUSH
32685: LD_INT 3
32687: PPUSH
32688: CALL_OW 259
32692: PUSH
32693: LD_VAR 0 2
32697: PUSH
32698: LD_VAR 0 3
32702: ARRAY
32703: PPUSH
32704: CALL_OW 432
32708: MINUS
32709: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32710: LD_VAR 0 4
32714: PUSH
32715: LD_VAR 0 5
32719: PPUSH
32720: LD_INT 3
32722: PPUSH
32723: CALL_OW 259
32727: PUSH
32728: LD_VAR 0 5
32732: PPUSH
32733: CALL_OW 432
32737: MINUS
32738: GREATEREQUAL
32739: IFFALSE 32757
// mech := result [ i ] ;
32741: LD_ADDR_VAR 0 5
32745: PUSH
32746: LD_VAR 0 2
32750: PUSH
32751: LD_VAR 0 3
32755: ARRAY
32756: ST_TO_ADDR
// end ;
32757: GO 32666
32759: POP
32760: POP
// ComLinkTo ( vehicle , mech ) ;
32761: LD_VAR 0 1
32765: PPUSH
32766: LD_VAR 0 5
32770: PPUSH
32771: CALL_OW 135
// end ;
32775: LD_VAR 0 2
32779: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32780: LD_INT 0
32782: PPUSH
32783: PPUSH
32784: PPUSH
32785: PPUSH
32786: PPUSH
32787: PPUSH
32788: PPUSH
32789: PPUSH
32790: PPUSH
32791: PPUSH
32792: PPUSH
32793: PPUSH
32794: PPUSH
// result := [ ] ;
32795: LD_ADDR_VAR 0 7
32799: PUSH
32800: EMPTY
32801: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32802: LD_VAR 0 1
32806: PPUSH
32807: CALL_OW 266
32811: PUSH
32812: LD_INT 0
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: IN
32822: NOT
32823: IFFALSE 32827
// exit ;
32825: GO 34461
// if name then
32827: LD_VAR 0 3
32831: IFFALSE 32847
// SetBName ( base_dep , name ) ;
32833: LD_VAR 0 1
32837: PPUSH
32838: LD_VAR 0 3
32842: PPUSH
32843: CALL_OW 500
// base := GetBase ( base_dep ) ;
32847: LD_ADDR_VAR 0 15
32851: PUSH
32852: LD_VAR 0 1
32856: PPUSH
32857: CALL_OW 274
32861: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32862: LD_ADDR_VAR 0 16
32866: PUSH
32867: LD_VAR 0 1
32871: PPUSH
32872: CALL_OW 255
32876: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32877: LD_ADDR_VAR 0 17
32881: PUSH
32882: LD_VAR 0 1
32886: PPUSH
32887: CALL_OW 248
32891: ST_TO_ADDR
// if sources then
32892: LD_VAR 0 5
32896: IFFALSE 32943
// for i = 1 to 3 do
32898: LD_ADDR_VAR 0 8
32902: PUSH
32903: DOUBLE
32904: LD_INT 1
32906: DEC
32907: ST_TO_ADDR
32908: LD_INT 3
32910: PUSH
32911: FOR_TO
32912: IFFALSE 32941
// AddResourceType ( base , i , sources [ i ] ) ;
32914: LD_VAR 0 15
32918: PPUSH
32919: LD_VAR 0 8
32923: PPUSH
32924: LD_VAR 0 5
32928: PUSH
32929: LD_VAR 0 8
32933: ARRAY
32934: PPUSH
32935: CALL_OW 276
32939: GO 32911
32941: POP
32942: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32943: LD_ADDR_VAR 0 18
32947: PUSH
32948: LD_VAR 0 15
32952: PPUSH
32953: LD_VAR 0 2
32957: PPUSH
32958: LD_INT 1
32960: PPUSH
32961: CALL 32203 0 3
32965: ST_TO_ADDR
// InitHc ;
32966: CALL_OW 19
// InitUc ;
32970: CALL_OW 18
// uc_side := side ;
32974: LD_ADDR_OWVAR 20
32978: PUSH
32979: LD_VAR 0 16
32983: ST_TO_ADDR
// uc_nation := nation ;
32984: LD_ADDR_OWVAR 21
32988: PUSH
32989: LD_VAR 0 17
32993: ST_TO_ADDR
// if buildings then
32994: LD_VAR 0 18
32998: IFFALSE 34320
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33000: LD_ADDR_VAR 0 19
33004: PUSH
33005: LD_VAR 0 18
33009: PPUSH
33010: LD_INT 2
33012: PUSH
33013: LD_INT 30
33015: PUSH
33016: LD_INT 29
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 30
33025: PUSH
33026: LD_INT 30
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: LIST
33037: PPUSH
33038: CALL_OW 72
33042: ST_TO_ADDR
// if tmp then
33043: LD_VAR 0 19
33047: IFFALSE 33095
// for i in tmp do
33049: LD_ADDR_VAR 0 8
33053: PUSH
33054: LD_VAR 0 19
33058: PUSH
33059: FOR_IN
33060: IFFALSE 33093
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33062: LD_VAR 0 8
33066: PPUSH
33067: CALL_OW 250
33071: PPUSH
33072: LD_VAR 0 8
33076: PPUSH
33077: CALL_OW 251
33081: PPUSH
33082: LD_VAR 0 16
33086: PPUSH
33087: CALL_OW 441
33091: GO 33059
33093: POP
33094: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33095: LD_VAR 0 18
33099: PPUSH
33100: LD_INT 2
33102: PUSH
33103: LD_INT 30
33105: PUSH
33106: LD_INT 32
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 30
33115: PUSH
33116: LD_INT 33
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: LIST
33127: PPUSH
33128: CALL_OW 72
33132: IFFALSE 33220
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33134: LD_ADDR_VAR 0 8
33138: PUSH
33139: LD_VAR 0 18
33143: PPUSH
33144: LD_INT 2
33146: PUSH
33147: LD_INT 30
33149: PUSH
33150: LD_INT 32
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 30
33159: PUSH
33160: LD_INT 33
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: PPUSH
33172: CALL_OW 72
33176: PUSH
33177: FOR_IN
33178: IFFALSE 33218
// begin if not GetBWeapon ( i ) then
33180: LD_VAR 0 8
33184: PPUSH
33185: CALL_OW 269
33189: NOT
33190: IFFALSE 33216
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33192: LD_VAR 0 8
33196: PPUSH
33197: LD_VAR 0 8
33201: PPUSH
33202: LD_VAR 0 2
33206: PPUSH
33207: CALL 34466 0 2
33211: PPUSH
33212: CALL_OW 431
// end ;
33216: GO 33177
33218: POP
33219: POP
// end ; for i = 1 to personel do
33220: LD_ADDR_VAR 0 8
33224: PUSH
33225: DOUBLE
33226: LD_INT 1
33228: DEC
33229: ST_TO_ADDR
33230: LD_VAR 0 6
33234: PUSH
33235: FOR_TO
33236: IFFALSE 34300
// begin if i > 4 then
33238: LD_VAR 0 8
33242: PUSH
33243: LD_INT 4
33245: GREATER
33246: IFFALSE 33250
// break ;
33248: GO 34300
// case i of 1 :
33250: LD_VAR 0 8
33254: PUSH
33255: LD_INT 1
33257: DOUBLE
33258: EQUAL
33259: IFTRUE 33263
33261: GO 33343
33263: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33264: LD_ADDR_VAR 0 12
33268: PUSH
33269: LD_VAR 0 18
33273: PPUSH
33274: LD_INT 22
33276: PUSH
33277: LD_VAR 0 16
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 58
33288: PUSH
33289: EMPTY
33290: LIST
33291: PUSH
33292: LD_INT 2
33294: PUSH
33295: LD_INT 30
33297: PUSH
33298: LD_INT 32
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 30
33307: PUSH
33308: LD_INT 4
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 30
33317: PUSH
33318: LD_INT 5
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: LIST
33335: PPUSH
33336: CALL_OW 72
33340: ST_TO_ADDR
33341: GO 33565
33343: LD_INT 2
33345: DOUBLE
33346: EQUAL
33347: IFTRUE 33351
33349: GO 33413
33351: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33352: LD_ADDR_VAR 0 12
33356: PUSH
33357: LD_VAR 0 18
33361: PPUSH
33362: LD_INT 22
33364: PUSH
33365: LD_VAR 0 16
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: LD_INT 30
33379: PUSH
33380: LD_INT 0
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 30
33389: PUSH
33390: LD_INT 1
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: LIST
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PPUSH
33406: CALL_OW 72
33410: ST_TO_ADDR
33411: GO 33565
33413: LD_INT 3
33415: DOUBLE
33416: EQUAL
33417: IFTRUE 33421
33419: GO 33483
33421: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33422: LD_ADDR_VAR 0 12
33426: PUSH
33427: LD_VAR 0 18
33431: PPUSH
33432: LD_INT 22
33434: PUSH
33435: LD_VAR 0 16
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 2
33446: PUSH
33447: LD_INT 30
33449: PUSH
33450: LD_INT 2
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 30
33459: PUSH
33460: LD_INT 3
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: LIST
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PPUSH
33476: CALL_OW 72
33480: ST_TO_ADDR
33481: GO 33565
33483: LD_INT 4
33485: DOUBLE
33486: EQUAL
33487: IFTRUE 33491
33489: GO 33564
33491: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33492: LD_ADDR_VAR 0 12
33496: PUSH
33497: LD_VAR 0 18
33501: PPUSH
33502: LD_INT 22
33504: PUSH
33505: LD_VAR 0 16
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 2
33516: PUSH
33517: LD_INT 30
33519: PUSH
33520: LD_INT 6
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 30
33529: PUSH
33530: LD_INT 7
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 30
33539: PUSH
33540: LD_INT 8
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PPUSH
33557: CALL_OW 72
33561: ST_TO_ADDR
33562: GO 33565
33564: POP
// if i = 1 then
33565: LD_VAR 0 8
33569: PUSH
33570: LD_INT 1
33572: EQUAL
33573: IFFALSE 33684
// begin tmp := [ ] ;
33575: LD_ADDR_VAR 0 19
33579: PUSH
33580: EMPTY
33581: ST_TO_ADDR
// for j in f do
33582: LD_ADDR_VAR 0 9
33586: PUSH
33587: LD_VAR 0 12
33591: PUSH
33592: FOR_IN
33593: IFFALSE 33666
// if GetBType ( j ) = b_bunker then
33595: LD_VAR 0 9
33599: PPUSH
33600: CALL_OW 266
33604: PUSH
33605: LD_INT 32
33607: EQUAL
33608: IFFALSE 33635
// tmp := Insert ( tmp , 1 , j ) else
33610: LD_ADDR_VAR 0 19
33614: PUSH
33615: LD_VAR 0 19
33619: PPUSH
33620: LD_INT 1
33622: PPUSH
33623: LD_VAR 0 9
33627: PPUSH
33628: CALL_OW 2
33632: ST_TO_ADDR
33633: GO 33664
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33635: LD_ADDR_VAR 0 19
33639: PUSH
33640: LD_VAR 0 19
33644: PPUSH
33645: LD_VAR 0 19
33649: PUSH
33650: LD_INT 1
33652: PLUS
33653: PPUSH
33654: LD_VAR 0 9
33658: PPUSH
33659: CALL_OW 2
33663: ST_TO_ADDR
33664: GO 33592
33666: POP
33667: POP
// if tmp then
33668: LD_VAR 0 19
33672: IFFALSE 33684
// f := tmp ;
33674: LD_ADDR_VAR 0 12
33678: PUSH
33679: LD_VAR 0 19
33683: ST_TO_ADDR
// end ; x := personel [ i ] ;
33684: LD_ADDR_VAR 0 13
33688: PUSH
33689: LD_VAR 0 6
33693: PUSH
33694: LD_VAR 0 8
33698: ARRAY
33699: ST_TO_ADDR
// if x = - 1 then
33700: LD_VAR 0 13
33704: PUSH
33705: LD_INT 1
33707: NEG
33708: EQUAL
33709: IFFALSE 33918
// begin for j in f do
33711: LD_ADDR_VAR 0 9
33715: PUSH
33716: LD_VAR 0 12
33720: PUSH
33721: FOR_IN
33722: IFFALSE 33914
// repeat InitHc ;
33724: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33728: LD_VAR 0 9
33732: PPUSH
33733: CALL_OW 266
33737: PUSH
33738: LD_INT 5
33740: EQUAL
33741: IFFALSE 33811
// begin if UnitsInside ( j ) < 3 then
33743: LD_VAR 0 9
33747: PPUSH
33748: CALL_OW 313
33752: PUSH
33753: LD_INT 3
33755: LESS
33756: IFFALSE 33792
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33758: LD_INT 0
33760: PPUSH
33761: LD_INT 5
33763: PUSH
33764: LD_INT 8
33766: PUSH
33767: LD_INT 9
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: LIST
33774: PUSH
33775: LD_VAR 0 17
33779: ARRAY
33780: PPUSH
33781: LD_VAR 0 4
33785: PPUSH
33786: CALL_OW 380
33790: GO 33809
// PrepareHuman ( false , i , skill ) ;
33792: LD_INT 0
33794: PPUSH
33795: LD_VAR 0 8
33799: PPUSH
33800: LD_VAR 0 4
33804: PPUSH
33805: CALL_OW 380
// end else
33809: GO 33828
// PrepareHuman ( false , i , skill ) ;
33811: LD_INT 0
33813: PPUSH
33814: LD_VAR 0 8
33818: PPUSH
33819: LD_VAR 0 4
33823: PPUSH
33824: CALL_OW 380
// un := CreateHuman ;
33828: LD_ADDR_VAR 0 14
33832: PUSH
33833: CALL_OW 44
33837: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33838: LD_ADDR_VAR 0 7
33842: PUSH
33843: LD_VAR 0 7
33847: PPUSH
33848: LD_INT 1
33850: PPUSH
33851: LD_VAR 0 14
33855: PPUSH
33856: CALL_OW 2
33860: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33861: LD_VAR 0 14
33865: PPUSH
33866: LD_VAR 0 9
33870: PPUSH
33871: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33875: LD_VAR 0 9
33879: PPUSH
33880: CALL_OW 313
33884: PUSH
33885: LD_INT 6
33887: EQUAL
33888: PUSH
33889: LD_VAR 0 9
33893: PPUSH
33894: CALL_OW 266
33898: PUSH
33899: LD_INT 32
33901: PUSH
33902: LD_INT 31
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: IN
33909: OR
33910: IFFALSE 33724
33912: GO 33721
33914: POP
33915: POP
// end else
33916: GO 34298
// for j = 1 to x do
33918: LD_ADDR_VAR 0 9
33922: PUSH
33923: DOUBLE
33924: LD_INT 1
33926: DEC
33927: ST_TO_ADDR
33928: LD_VAR 0 13
33932: PUSH
33933: FOR_TO
33934: IFFALSE 34296
// begin InitHc ;
33936: CALL_OW 19
// if not f then
33940: LD_VAR 0 12
33944: NOT
33945: IFFALSE 34034
// begin PrepareHuman ( false , i , skill ) ;
33947: LD_INT 0
33949: PPUSH
33950: LD_VAR 0 8
33954: PPUSH
33955: LD_VAR 0 4
33959: PPUSH
33960: CALL_OW 380
// un := CreateHuman ;
33964: LD_ADDR_VAR 0 14
33968: PUSH
33969: CALL_OW 44
33973: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33974: LD_ADDR_VAR 0 7
33978: PUSH
33979: LD_VAR 0 7
33983: PPUSH
33984: LD_INT 1
33986: PPUSH
33987: LD_VAR 0 14
33991: PPUSH
33992: CALL_OW 2
33996: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33997: LD_VAR 0 14
34001: PPUSH
34002: LD_VAR 0 1
34006: PPUSH
34007: CALL_OW 250
34011: PPUSH
34012: LD_VAR 0 1
34016: PPUSH
34017: CALL_OW 251
34021: PPUSH
34022: LD_INT 10
34024: PPUSH
34025: LD_INT 0
34027: PPUSH
34028: CALL_OW 50
// continue ;
34032: GO 33933
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34034: LD_VAR 0 12
34038: PUSH
34039: LD_INT 1
34041: ARRAY
34042: PPUSH
34043: CALL_OW 313
34047: PUSH
34048: LD_VAR 0 12
34052: PUSH
34053: LD_INT 1
34055: ARRAY
34056: PPUSH
34057: CALL_OW 266
34061: PUSH
34062: LD_INT 32
34064: PUSH
34065: LD_INT 31
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: IN
34072: AND
34073: PUSH
34074: LD_VAR 0 12
34078: PUSH
34079: LD_INT 1
34081: ARRAY
34082: PPUSH
34083: CALL_OW 313
34087: PUSH
34088: LD_INT 6
34090: EQUAL
34091: OR
34092: IFFALSE 34112
// f := Delete ( f , 1 ) ;
34094: LD_ADDR_VAR 0 12
34098: PUSH
34099: LD_VAR 0 12
34103: PPUSH
34104: LD_INT 1
34106: PPUSH
34107: CALL_OW 3
34111: ST_TO_ADDR
// if not f then
34112: LD_VAR 0 12
34116: NOT
34117: IFFALSE 34135
// begin x := x + 2 ;
34119: LD_ADDR_VAR 0 13
34123: PUSH
34124: LD_VAR 0 13
34128: PUSH
34129: LD_INT 2
34131: PLUS
34132: ST_TO_ADDR
// continue ;
34133: GO 33933
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34135: LD_VAR 0 12
34139: PUSH
34140: LD_INT 1
34142: ARRAY
34143: PPUSH
34144: CALL_OW 266
34148: PUSH
34149: LD_INT 5
34151: EQUAL
34152: IFFALSE 34226
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34154: LD_VAR 0 12
34158: PUSH
34159: LD_INT 1
34161: ARRAY
34162: PPUSH
34163: CALL_OW 313
34167: PUSH
34168: LD_INT 3
34170: LESS
34171: IFFALSE 34207
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34173: LD_INT 0
34175: PPUSH
34176: LD_INT 5
34178: PUSH
34179: LD_INT 8
34181: PUSH
34182: LD_INT 9
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: LIST
34189: PUSH
34190: LD_VAR 0 17
34194: ARRAY
34195: PPUSH
34196: LD_VAR 0 4
34200: PPUSH
34201: CALL_OW 380
34205: GO 34224
// PrepareHuman ( false , i , skill ) ;
34207: LD_INT 0
34209: PPUSH
34210: LD_VAR 0 8
34214: PPUSH
34215: LD_VAR 0 4
34219: PPUSH
34220: CALL_OW 380
// end else
34224: GO 34243
// PrepareHuman ( false , i , skill ) ;
34226: LD_INT 0
34228: PPUSH
34229: LD_VAR 0 8
34233: PPUSH
34234: LD_VAR 0 4
34238: PPUSH
34239: CALL_OW 380
// un := CreateHuman ;
34243: LD_ADDR_VAR 0 14
34247: PUSH
34248: CALL_OW 44
34252: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34253: LD_ADDR_VAR 0 7
34257: PUSH
34258: LD_VAR 0 7
34262: PPUSH
34263: LD_INT 1
34265: PPUSH
34266: LD_VAR 0 14
34270: PPUSH
34271: CALL_OW 2
34275: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34276: LD_VAR 0 14
34280: PPUSH
34281: LD_VAR 0 12
34285: PUSH
34286: LD_INT 1
34288: ARRAY
34289: PPUSH
34290: CALL_OW 52
// end ;
34294: GO 33933
34296: POP
34297: POP
// end ;
34298: GO 33235
34300: POP
34301: POP
// result := result ^ buildings ;
34302: LD_ADDR_VAR 0 7
34306: PUSH
34307: LD_VAR 0 7
34311: PUSH
34312: LD_VAR 0 18
34316: ADD
34317: ST_TO_ADDR
// end else
34318: GO 34461
// begin for i = 1 to personel do
34320: LD_ADDR_VAR 0 8
34324: PUSH
34325: DOUBLE
34326: LD_INT 1
34328: DEC
34329: ST_TO_ADDR
34330: LD_VAR 0 6
34334: PUSH
34335: FOR_TO
34336: IFFALSE 34459
// begin if i > 4 then
34338: LD_VAR 0 8
34342: PUSH
34343: LD_INT 4
34345: GREATER
34346: IFFALSE 34350
// break ;
34348: GO 34459
// x := personel [ i ] ;
34350: LD_ADDR_VAR 0 13
34354: PUSH
34355: LD_VAR 0 6
34359: PUSH
34360: LD_VAR 0 8
34364: ARRAY
34365: ST_TO_ADDR
// if x = - 1 then
34366: LD_VAR 0 13
34370: PUSH
34371: LD_INT 1
34373: NEG
34374: EQUAL
34375: IFFALSE 34379
// continue ;
34377: GO 34335
// PrepareHuman ( false , i , skill ) ;
34379: LD_INT 0
34381: PPUSH
34382: LD_VAR 0 8
34386: PPUSH
34387: LD_VAR 0 4
34391: PPUSH
34392: CALL_OW 380
// un := CreateHuman ;
34396: LD_ADDR_VAR 0 14
34400: PUSH
34401: CALL_OW 44
34405: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34406: LD_VAR 0 14
34410: PPUSH
34411: LD_VAR 0 1
34415: PPUSH
34416: CALL_OW 250
34420: PPUSH
34421: LD_VAR 0 1
34425: PPUSH
34426: CALL_OW 251
34430: PPUSH
34431: LD_INT 10
34433: PPUSH
34434: LD_INT 0
34436: PPUSH
34437: CALL_OW 50
// result := result ^ un ;
34441: LD_ADDR_VAR 0 7
34445: PUSH
34446: LD_VAR 0 7
34450: PUSH
34451: LD_VAR 0 14
34455: ADD
34456: ST_TO_ADDR
// end ;
34457: GO 34335
34459: POP
34460: POP
// end ; end ;
34461: LD_VAR 0 7
34465: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34466: LD_INT 0
34468: PPUSH
34469: PPUSH
34470: PPUSH
34471: PPUSH
34472: PPUSH
34473: PPUSH
34474: PPUSH
34475: PPUSH
34476: PPUSH
34477: PPUSH
34478: PPUSH
34479: PPUSH
34480: PPUSH
34481: PPUSH
34482: PPUSH
34483: PPUSH
// result := false ;
34484: LD_ADDR_VAR 0 3
34488: PUSH
34489: LD_INT 0
34491: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34492: LD_VAR 0 1
34496: NOT
34497: PUSH
34498: LD_VAR 0 1
34502: PPUSH
34503: CALL_OW 266
34507: PUSH
34508: LD_INT 32
34510: PUSH
34511: LD_INT 33
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: IN
34518: NOT
34519: OR
34520: IFFALSE 34524
// exit ;
34522: GO 35663
// nat := GetNation ( tower ) ;
34524: LD_ADDR_VAR 0 12
34528: PUSH
34529: LD_VAR 0 1
34533: PPUSH
34534: CALL_OW 248
34538: ST_TO_ADDR
// side := GetSide ( tower ) ;
34539: LD_ADDR_VAR 0 16
34543: PUSH
34544: LD_VAR 0 1
34548: PPUSH
34549: CALL_OW 255
34553: ST_TO_ADDR
// x := GetX ( tower ) ;
34554: LD_ADDR_VAR 0 10
34558: PUSH
34559: LD_VAR 0 1
34563: PPUSH
34564: CALL_OW 250
34568: ST_TO_ADDR
// y := GetY ( tower ) ;
34569: LD_ADDR_VAR 0 11
34573: PUSH
34574: LD_VAR 0 1
34578: PPUSH
34579: CALL_OW 251
34583: ST_TO_ADDR
// if not x or not y then
34584: LD_VAR 0 10
34588: NOT
34589: PUSH
34590: LD_VAR 0 11
34594: NOT
34595: OR
34596: IFFALSE 34600
// exit ;
34598: GO 35663
// weapon := 0 ;
34600: LD_ADDR_VAR 0 18
34604: PUSH
34605: LD_INT 0
34607: ST_TO_ADDR
// fac_list := [ ] ;
34608: LD_ADDR_VAR 0 17
34612: PUSH
34613: EMPTY
34614: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34615: LD_ADDR_VAR 0 6
34619: PUSH
34620: LD_VAR 0 1
34624: PPUSH
34625: CALL_OW 274
34629: PPUSH
34630: LD_VAR 0 2
34634: PPUSH
34635: LD_INT 0
34637: PPUSH
34638: CALL 32203 0 3
34642: PPUSH
34643: LD_INT 30
34645: PUSH
34646: LD_INT 3
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PPUSH
34653: CALL_OW 72
34657: ST_TO_ADDR
// if not factories then
34658: LD_VAR 0 6
34662: NOT
34663: IFFALSE 34667
// exit ;
34665: GO 35663
// for i in factories do
34667: LD_ADDR_VAR 0 8
34671: PUSH
34672: LD_VAR 0 6
34676: PUSH
34677: FOR_IN
34678: IFFALSE 34703
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34680: LD_ADDR_VAR 0 17
34684: PUSH
34685: LD_VAR 0 17
34689: PUSH
34690: LD_VAR 0 8
34694: PPUSH
34695: CALL_OW 478
34699: UNION
34700: ST_TO_ADDR
34701: GO 34677
34703: POP
34704: POP
// if not fac_list then
34705: LD_VAR 0 17
34709: NOT
34710: IFFALSE 34714
// exit ;
34712: GO 35663
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34714: LD_ADDR_VAR 0 5
34718: PUSH
34719: LD_INT 4
34721: PUSH
34722: LD_INT 5
34724: PUSH
34725: LD_INT 9
34727: PUSH
34728: LD_INT 10
34730: PUSH
34731: LD_INT 6
34733: PUSH
34734: LD_INT 7
34736: PUSH
34737: LD_INT 11
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 27
34751: PUSH
34752: LD_INT 28
34754: PUSH
34755: LD_INT 26
34757: PUSH
34758: LD_INT 30
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 43
34769: PUSH
34770: LD_INT 44
34772: PUSH
34773: LD_INT 46
34775: PUSH
34776: LD_INT 45
34778: PUSH
34779: LD_INT 47
34781: PUSH
34782: LD_INT 49
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: LIST
34797: PUSH
34798: LD_VAR 0 12
34802: ARRAY
34803: ST_TO_ADDR
// for i in list do
34804: LD_ADDR_VAR 0 8
34808: PUSH
34809: LD_VAR 0 5
34813: PUSH
34814: FOR_IN
34815: IFFALSE 34848
// if not i in fac_list then
34817: LD_VAR 0 8
34821: PUSH
34822: LD_VAR 0 17
34826: IN
34827: NOT
34828: IFFALSE 34846
// list := list diff i ;
34830: LD_ADDR_VAR 0 5
34834: PUSH
34835: LD_VAR 0 5
34839: PUSH
34840: LD_VAR 0 8
34844: DIFF
34845: ST_TO_ADDR
34846: GO 34814
34848: POP
34849: POP
// if not list then
34850: LD_VAR 0 5
34854: NOT
34855: IFFALSE 34859
// exit ;
34857: GO 35663
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34859: LD_VAR 0 12
34863: PUSH
34864: LD_INT 3
34866: EQUAL
34867: PUSH
34868: LD_INT 49
34870: PUSH
34871: LD_VAR 0 5
34875: IN
34876: AND
34877: PUSH
34878: LD_INT 31
34880: PPUSH
34881: LD_VAR 0 16
34885: PPUSH
34886: CALL_OW 321
34890: PUSH
34891: LD_INT 2
34893: EQUAL
34894: AND
34895: IFFALSE 34955
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34897: LD_INT 22
34899: PUSH
34900: LD_VAR 0 16
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 35
34911: PUSH
34912: LD_INT 49
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 91
34921: PUSH
34922: LD_VAR 0 1
34926: PUSH
34927: LD_INT 10
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: LIST
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: LIST
34939: PPUSH
34940: CALL_OW 69
34944: NOT
34945: IFFALSE 34955
// weapon := ru_time_lapser ;
34947: LD_ADDR_VAR 0 18
34951: PUSH
34952: LD_INT 49
34954: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34955: LD_VAR 0 12
34959: PUSH
34960: LD_INT 1
34962: PUSH
34963: LD_INT 2
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: IN
34970: PUSH
34971: LD_INT 11
34973: PUSH
34974: LD_VAR 0 5
34978: IN
34979: PUSH
34980: LD_INT 30
34982: PUSH
34983: LD_VAR 0 5
34987: IN
34988: OR
34989: AND
34990: PUSH
34991: LD_INT 6
34993: PPUSH
34994: LD_VAR 0 16
34998: PPUSH
34999: CALL_OW 321
35003: PUSH
35004: LD_INT 2
35006: EQUAL
35007: AND
35008: IFFALSE 35173
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35010: LD_INT 22
35012: PUSH
35013: LD_VAR 0 16
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: LD_INT 35
35027: PUSH
35028: LD_INT 11
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 35
35037: PUSH
35038: LD_INT 30
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 91
35052: PUSH
35053: LD_VAR 0 1
35057: PUSH
35058: LD_INT 18
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: LIST
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: LIST
35070: PPUSH
35071: CALL_OW 69
35075: NOT
35076: PUSH
35077: LD_INT 22
35079: PUSH
35080: LD_VAR 0 16
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 2
35091: PUSH
35092: LD_INT 30
35094: PUSH
35095: LD_INT 32
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 30
35104: PUSH
35105: LD_INT 33
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 91
35119: PUSH
35120: LD_VAR 0 1
35124: PUSH
35125: LD_INT 12
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: LIST
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: LIST
35137: PUSH
35138: EMPTY
35139: LIST
35140: PPUSH
35141: CALL_OW 69
35145: PUSH
35146: LD_INT 2
35148: GREATER
35149: AND
35150: IFFALSE 35173
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35152: LD_ADDR_VAR 0 18
35156: PUSH
35157: LD_INT 11
35159: PUSH
35160: LD_INT 30
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_VAR 0 12
35171: ARRAY
35172: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35173: LD_VAR 0 18
35177: NOT
35178: PUSH
35179: LD_INT 40
35181: PPUSH
35182: LD_VAR 0 16
35186: PPUSH
35187: CALL_OW 321
35191: PUSH
35192: LD_INT 2
35194: EQUAL
35195: AND
35196: PUSH
35197: LD_INT 7
35199: PUSH
35200: LD_VAR 0 5
35204: IN
35205: PUSH
35206: LD_INT 28
35208: PUSH
35209: LD_VAR 0 5
35213: IN
35214: OR
35215: PUSH
35216: LD_INT 45
35218: PUSH
35219: LD_VAR 0 5
35223: IN
35224: OR
35225: AND
35226: IFFALSE 35480
// begin hex := GetHexInfo ( x , y ) ;
35228: LD_ADDR_VAR 0 4
35232: PUSH
35233: LD_VAR 0 10
35237: PPUSH
35238: LD_VAR 0 11
35242: PPUSH
35243: CALL_OW 546
35247: ST_TO_ADDR
// if hex [ 1 ] then
35248: LD_VAR 0 4
35252: PUSH
35253: LD_INT 1
35255: ARRAY
35256: IFFALSE 35260
// exit ;
35258: GO 35663
// height := hex [ 2 ] ;
35260: LD_ADDR_VAR 0 15
35264: PUSH
35265: LD_VAR 0 4
35269: PUSH
35270: LD_INT 2
35272: ARRAY
35273: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35274: LD_ADDR_VAR 0 14
35278: PUSH
35279: LD_INT 0
35281: PUSH
35282: LD_INT 2
35284: PUSH
35285: LD_INT 3
35287: PUSH
35288: LD_INT 5
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: ST_TO_ADDR
// for i in tmp do
35297: LD_ADDR_VAR 0 8
35301: PUSH
35302: LD_VAR 0 14
35306: PUSH
35307: FOR_IN
35308: IFFALSE 35478
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35310: LD_ADDR_VAR 0 9
35314: PUSH
35315: LD_VAR 0 10
35319: PPUSH
35320: LD_VAR 0 8
35324: PPUSH
35325: LD_INT 5
35327: PPUSH
35328: CALL_OW 272
35332: PUSH
35333: LD_VAR 0 11
35337: PPUSH
35338: LD_VAR 0 8
35342: PPUSH
35343: LD_INT 5
35345: PPUSH
35346: CALL_OW 273
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35355: LD_VAR 0 9
35359: PUSH
35360: LD_INT 1
35362: ARRAY
35363: PPUSH
35364: LD_VAR 0 9
35368: PUSH
35369: LD_INT 2
35371: ARRAY
35372: PPUSH
35373: CALL_OW 488
35377: IFFALSE 35476
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35379: LD_ADDR_VAR 0 4
35383: PUSH
35384: LD_VAR 0 9
35388: PUSH
35389: LD_INT 1
35391: ARRAY
35392: PPUSH
35393: LD_VAR 0 9
35397: PUSH
35398: LD_INT 2
35400: ARRAY
35401: PPUSH
35402: CALL_OW 546
35406: ST_TO_ADDR
// if hex [ 1 ] then
35407: LD_VAR 0 4
35411: PUSH
35412: LD_INT 1
35414: ARRAY
35415: IFFALSE 35419
// continue ;
35417: GO 35307
// h := hex [ 2 ] ;
35419: LD_ADDR_VAR 0 13
35423: PUSH
35424: LD_VAR 0 4
35428: PUSH
35429: LD_INT 2
35431: ARRAY
35432: ST_TO_ADDR
// if h + 7 < height then
35433: LD_VAR 0 13
35437: PUSH
35438: LD_INT 7
35440: PLUS
35441: PUSH
35442: LD_VAR 0 15
35446: LESS
35447: IFFALSE 35476
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35449: LD_ADDR_VAR 0 18
35453: PUSH
35454: LD_INT 7
35456: PUSH
35457: LD_INT 28
35459: PUSH
35460: LD_INT 45
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: LIST
35467: PUSH
35468: LD_VAR 0 12
35472: ARRAY
35473: ST_TO_ADDR
// break ;
35474: GO 35478
// end ; end ; end ;
35476: GO 35307
35478: POP
35479: POP
// end ; if not weapon then
35480: LD_VAR 0 18
35484: NOT
35485: IFFALSE 35545
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35487: LD_ADDR_VAR 0 5
35491: PUSH
35492: LD_VAR 0 5
35496: PUSH
35497: LD_INT 11
35499: PUSH
35500: LD_INT 30
35502: PUSH
35503: LD_INT 49
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: LIST
35510: DIFF
35511: ST_TO_ADDR
// if not list then
35512: LD_VAR 0 5
35516: NOT
35517: IFFALSE 35521
// exit ;
35519: GO 35663
// weapon := list [ rand ( 1 , list ) ] ;
35521: LD_ADDR_VAR 0 18
35525: PUSH
35526: LD_VAR 0 5
35530: PUSH
35531: LD_INT 1
35533: PPUSH
35534: LD_VAR 0 5
35538: PPUSH
35539: CALL_OW 12
35543: ARRAY
35544: ST_TO_ADDR
// end ; if weapon then
35545: LD_VAR 0 18
35549: IFFALSE 35663
// begin tmp := CostOfWeapon ( weapon ) ;
35551: LD_ADDR_VAR 0 14
35555: PUSH
35556: LD_VAR 0 18
35560: PPUSH
35561: CALL_OW 451
35565: ST_TO_ADDR
// j := GetBase ( tower ) ;
35566: LD_ADDR_VAR 0 9
35570: PUSH
35571: LD_VAR 0 1
35575: PPUSH
35576: CALL_OW 274
35580: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35581: LD_VAR 0 9
35585: PPUSH
35586: LD_INT 1
35588: PPUSH
35589: CALL_OW 275
35593: PUSH
35594: LD_VAR 0 14
35598: PUSH
35599: LD_INT 1
35601: ARRAY
35602: GREATEREQUAL
35603: PUSH
35604: LD_VAR 0 9
35608: PPUSH
35609: LD_INT 2
35611: PPUSH
35612: CALL_OW 275
35616: PUSH
35617: LD_VAR 0 14
35621: PUSH
35622: LD_INT 2
35624: ARRAY
35625: GREATEREQUAL
35626: AND
35627: PUSH
35628: LD_VAR 0 9
35632: PPUSH
35633: LD_INT 3
35635: PPUSH
35636: CALL_OW 275
35640: PUSH
35641: LD_VAR 0 14
35645: PUSH
35646: LD_INT 3
35648: ARRAY
35649: GREATEREQUAL
35650: AND
35651: IFFALSE 35663
// result := weapon ;
35653: LD_ADDR_VAR 0 3
35657: PUSH
35658: LD_VAR 0 18
35662: ST_TO_ADDR
// end ; end ;
35663: LD_VAR 0 3
35667: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35668: LD_INT 0
35670: PPUSH
35671: PPUSH
// result := true ;
35672: LD_ADDR_VAR 0 3
35676: PUSH
35677: LD_INT 1
35679: ST_TO_ADDR
// if array1 = array2 then
35680: LD_VAR 0 1
35684: PUSH
35685: LD_VAR 0 2
35689: EQUAL
35690: IFFALSE 35750
// begin for i = 1 to array1 do
35692: LD_ADDR_VAR 0 4
35696: PUSH
35697: DOUBLE
35698: LD_INT 1
35700: DEC
35701: ST_TO_ADDR
35702: LD_VAR 0 1
35706: PUSH
35707: FOR_TO
35708: IFFALSE 35746
// if array1 [ i ] <> array2 [ i ] then
35710: LD_VAR 0 1
35714: PUSH
35715: LD_VAR 0 4
35719: ARRAY
35720: PUSH
35721: LD_VAR 0 2
35725: PUSH
35726: LD_VAR 0 4
35730: ARRAY
35731: NONEQUAL
35732: IFFALSE 35744
// begin result := false ;
35734: LD_ADDR_VAR 0 3
35738: PUSH
35739: LD_INT 0
35741: ST_TO_ADDR
// break ;
35742: GO 35746
// end ;
35744: GO 35707
35746: POP
35747: POP
// end else
35748: GO 35758
// result := false ;
35750: LD_ADDR_VAR 0 3
35754: PUSH
35755: LD_INT 0
35757: ST_TO_ADDR
// end ;
35758: LD_VAR 0 3
35762: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35763: LD_INT 0
35765: PPUSH
35766: PPUSH
// if not array1 or not array2 then
35767: LD_VAR 0 1
35771: NOT
35772: PUSH
35773: LD_VAR 0 2
35777: NOT
35778: OR
35779: IFFALSE 35783
// exit ;
35781: GO 35847
// result := true ;
35783: LD_ADDR_VAR 0 3
35787: PUSH
35788: LD_INT 1
35790: ST_TO_ADDR
// for i = 1 to array1 do
35791: LD_ADDR_VAR 0 4
35795: PUSH
35796: DOUBLE
35797: LD_INT 1
35799: DEC
35800: ST_TO_ADDR
35801: LD_VAR 0 1
35805: PUSH
35806: FOR_TO
35807: IFFALSE 35845
// if array1 [ i ] <> array2 [ i ] then
35809: LD_VAR 0 1
35813: PUSH
35814: LD_VAR 0 4
35818: ARRAY
35819: PUSH
35820: LD_VAR 0 2
35824: PUSH
35825: LD_VAR 0 4
35829: ARRAY
35830: NONEQUAL
35831: IFFALSE 35843
// begin result := false ;
35833: LD_ADDR_VAR 0 3
35837: PUSH
35838: LD_INT 0
35840: ST_TO_ADDR
// break ;
35841: GO 35845
// end ;
35843: GO 35806
35845: POP
35846: POP
// end ;
35847: LD_VAR 0 3
35851: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35852: LD_INT 0
35854: PPUSH
35855: PPUSH
35856: PPUSH
// pom := GetBase ( fac ) ;
35857: LD_ADDR_VAR 0 5
35861: PUSH
35862: LD_VAR 0 1
35866: PPUSH
35867: CALL_OW 274
35871: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35872: LD_ADDR_VAR 0 4
35876: PUSH
35877: LD_VAR 0 2
35881: PUSH
35882: LD_INT 1
35884: ARRAY
35885: PPUSH
35886: LD_VAR 0 2
35890: PUSH
35891: LD_INT 2
35893: ARRAY
35894: PPUSH
35895: LD_VAR 0 2
35899: PUSH
35900: LD_INT 3
35902: ARRAY
35903: PPUSH
35904: LD_VAR 0 2
35908: PUSH
35909: LD_INT 4
35911: ARRAY
35912: PPUSH
35913: CALL_OW 449
35917: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35918: LD_ADDR_VAR 0 3
35922: PUSH
35923: LD_VAR 0 5
35927: PPUSH
35928: LD_INT 1
35930: PPUSH
35931: CALL_OW 275
35935: PUSH
35936: LD_VAR 0 4
35940: PUSH
35941: LD_INT 1
35943: ARRAY
35944: GREATEREQUAL
35945: PUSH
35946: LD_VAR 0 5
35950: PPUSH
35951: LD_INT 2
35953: PPUSH
35954: CALL_OW 275
35958: PUSH
35959: LD_VAR 0 4
35963: PUSH
35964: LD_INT 2
35966: ARRAY
35967: GREATEREQUAL
35968: AND
35969: PUSH
35970: LD_VAR 0 5
35974: PPUSH
35975: LD_INT 3
35977: PPUSH
35978: CALL_OW 275
35982: PUSH
35983: LD_VAR 0 4
35987: PUSH
35988: LD_INT 3
35990: ARRAY
35991: GREATEREQUAL
35992: AND
35993: ST_TO_ADDR
// end ;
35994: LD_VAR 0 3
35998: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35999: LD_INT 0
36001: PPUSH
36002: PPUSH
36003: PPUSH
36004: PPUSH
// pom := GetBase ( building ) ;
36005: LD_ADDR_VAR 0 3
36009: PUSH
36010: LD_VAR 0 1
36014: PPUSH
36015: CALL_OW 274
36019: ST_TO_ADDR
// if not pom then
36020: LD_VAR 0 3
36024: NOT
36025: IFFALSE 36029
// exit ;
36027: GO 36199
// btype := GetBType ( building ) ;
36029: LD_ADDR_VAR 0 5
36033: PUSH
36034: LD_VAR 0 1
36038: PPUSH
36039: CALL_OW 266
36043: ST_TO_ADDR
// if btype = b_armoury then
36044: LD_VAR 0 5
36048: PUSH
36049: LD_INT 4
36051: EQUAL
36052: IFFALSE 36062
// btype := b_barracks ;
36054: LD_ADDR_VAR 0 5
36058: PUSH
36059: LD_INT 5
36061: ST_TO_ADDR
// if btype = b_depot then
36062: LD_VAR 0 5
36066: PUSH
36067: LD_INT 0
36069: EQUAL
36070: IFFALSE 36080
// btype := b_warehouse ;
36072: LD_ADDR_VAR 0 5
36076: PUSH
36077: LD_INT 1
36079: ST_TO_ADDR
// if btype = b_workshop then
36080: LD_VAR 0 5
36084: PUSH
36085: LD_INT 2
36087: EQUAL
36088: IFFALSE 36098
// btype := b_factory ;
36090: LD_ADDR_VAR 0 5
36094: PUSH
36095: LD_INT 3
36097: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36098: LD_ADDR_VAR 0 4
36102: PUSH
36103: LD_VAR 0 5
36107: PPUSH
36108: LD_VAR 0 1
36112: PPUSH
36113: CALL_OW 248
36117: PPUSH
36118: CALL_OW 450
36122: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36123: LD_ADDR_VAR 0 2
36127: PUSH
36128: LD_VAR 0 3
36132: PPUSH
36133: LD_INT 1
36135: PPUSH
36136: CALL_OW 275
36140: PUSH
36141: LD_VAR 0 4
36145: PUSH
36146: LD_INT 1
36148: ARRAY
36149: GREATEREQUAL
36150: PUSH
36151: LD_VAR 0 3
36155: PPUSH
36156: LD_INT 2
36158: PPUSH
36159: CALL_OW 275
36163: PUSH
36164: LD_VAR 0 4
36168: PUSH
36169: LD_INT 2
36171: ARRAY
36172: GREATEREQUAL
36173: AND
36174: PUSH
36175: LD_VAR 0 3
36179: PPUSH
36180: LD_INT 3
36182: PPUSH
36183: CALL_OW 275
36187: PUSH
36188: LD_VAR 0 4
36192: PUSH
36193: LD_INT 3
36195: ARRAY
36196: GREATEREQUAL
36197: AND
36198: ST_TO_ADDR
// end ;
36199: LD_VAR 0 2
36203: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36204: LD_INT 0
36206: PPUSH
36207: PPUSH
36208: PPUSH
// pom := GetBase ( building ) ;
36209: LD_ADDR_VAR 0 4
36213: PUSH
36214: LD_VAR 0 1
36218: PPUSH
36219: CALL_OW 274
36223: ST_TO_ADDR
// if not pom then
36224: LD_VAR 0 4
36228: NOT
36229: IFFALSE 36233
// exit ;
36231: GO 36334
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36233: LD_ADDR_VAR 0 5
36237: PUSH
36238: LD_VAR 0 2
36242: PPUSH
36243: LD_VAR 0 1
36247: PPUSH
36248: CALL_OW 248
36252: PPUSH
36253: CALL_OW 450
36257: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36258: LD_ADDR_VAR 0 3
36262: PUSH
36263: LD_VAR 0 4
36267: PPUSH
36268: LD_INT 1
36270: PPUSH
36271: CALL_OW 275
36275: PUSH
36276: LD_VAR 0 5
36280: PUSH
36281: LD_INT 1
36283: ARRAY
36284: GREATEREQUAL
36285: PUSH
36286: LD_VAR 0 4
36290: PPUSH
36291: LD_INT 2
36293: PPUSH
36294: CALL_OW 275
36298: PUSH
36299: LD_VAR 0 5
36303: PUSH
36304: LD_INT 2
36306: ARRAY
36307: GREATEREQUAL
36308: AND
36309: PUSH
36310: LD_VAR 0 4
36314: PPUSH
36315: LD_INT 3
36317: PPUSH
36318: CALL_OW 275
36322: PUSH
36323: LD_VAR 0 5
36327: PUSH
36328: LD_INT 3
36330: ARRAY
36331: GREATEREQUAL
36332: AND
36333: ST_TO_ADDR
// end ;
36334: LD_VAR 0 3
36338: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36339: LD_INT 0
36341: PPUSH
36342: PPUSH
36343: PPUSH
36344: PPUSH
36345: PPUSH
36346: PPUSH
36347: PPUSH
36348: PPUSH
36349: PPUSH
36350: PPUSH
36351: PPUSH
// result := false ;
36352: LD_ADDR_VAR 0 8
36356: PUSH
36357: LD_INT 0
36359: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36360: LD_VAR 0 5
36364: NOT
36365: PUSH
36366: LD_VAR 0 1
36370: NOT
36371: OR
36372: PUSH
36373: LD_VAR 0 2
36377: NOT
36378: OR
36379: PUSH
36380: LD_VAR 0 3
36384: NOT
36385: OR
36386: IFFALSE 36390
// exit ;
36388: GO 37204
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36390: LD_ADDR_VAR 0 14
36394: PUSH
36395: LD_VAR 0 1
36399: PPUSH
36400: LD_VAR 0 2
36404: PPUSH
36405: LD_VAR 0 3
36409: PPUSH
36410: LD_VAR 0 4
36414: PPUSH
36415: LD_VAR 0 5
36419: PUSH
36420: LD_INT 1
36422: ARRAY
36423: PPUSH
36424: CALL_OW 248
36428: PPUSH
36429: LD_INT 0
36431: PPUSH
36432: CALL 38041 0 6
36436: ST_TO_ADDR
// if not hexes then
36437: LD_VAR 0 14
36441: NOT
36442: IFFALSE 36446
// exit ;
36444: GO 37204
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36446: LD_ADDR_VAR 0 17
36450: PUSH
36451: LD_VAR 0 5
36455: PPUSH
36456: LD_INT 22
36458: PUSH
36459: LD_VAR 0 13
36463: PPUSH
36464: CALL_OW 255
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 2
36475: PUSH
36476: LD_INT 30
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 30
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: LIST
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PPUSH
36505: CALL_OW 72
36509: ST_TO_ADDR
// for i = 1 to hexes do
36510: LD_ADDR_VAR 0 9
36514: PUSH
36515: DOUBLE
36516: LD_INT 1
36518: DEC
36519: ST_TO_ADDR
36520: LD_VAR 0 14
36524: PUSH
36525: FOR_TO
36526: IFFALSE 37202
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36528: LD_ADDR_VAR 0 13
36532: PUSH
36533: LD_VAR 0 14
36537: PUSH
36538: LD_VAR 0 9
36542: ARRAY
36543: PUSH
36544: LD_INT 1
36546: ARRAY
36547: PPUSH
36548: LD_VAR 0 14
36552: PUSH
36553: LD_VAR 0 9
36557: ARRAY
36558: PUSH
36559: LD_INT 2
36561: ARRAY
36562: PPUSH
36563: CALL_OW 428
36567: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36568: LD_VAR 0 14
36572: PUSH
36573: LD_VAR 0 9
36577: ARRAY
36578: PUSH
36579: LD_INT 1
36581: ARRAY
36582: PPUSH
36583: LD_VAR 0 14
36587: PUSH
36588: LD_VAR 0 9
36592: ARRAY
36593: PUSH
36594: LD_INT 2
36596: ARRAY
36597: PPUSH
36598: CALL_OW 351
36602: PUSH
36603: LD_VAR 0 14
36607: PUSH
36608: LD_VAR 0 9
36612: ARRAY
36613: PUSH
36614: LD_INT 1
36616: ARRAY
36617: PPUSH
36618: LD_VAR 0 14
36622: PUSH
36623: LD_VAR 0 9
36627: ARRAY
36628: PUSH
36629: LD_INT 2
36631: ARRAY
36632: PPUSH
36633: CALL_OW 488
36637: NOT
36638: OR
36639: PUSH
36640: LD_VAR 0 13
36644: PPUSH
36645: CALL_OW 247
36649: PUSH
36650: LD_INT 3
36652: EQUAL
36653: OR
36654: IFFALSE 36660
// exit ;
36656: POP
36657: POP
36658: GO 37204
// if not tmp then
36660: LD_VAR 0 13
36664: NOT
36665: IFFALSE 36669
// continue ;
36667: GO 36525
// result := true ;
36669: LD_ADDR_VAR 0 8
36673: PUSH
36674: LD_INT 1
36676: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36677: LD_VAR 0 6
36681: PUSH
36682: LD_VAR 0 13
36686: PPUSH
36687: CALL_OW 247
36691: PUSH
36692: LD_INT 2
36694: EQUAL
36695: AND
36696: PUSH
36697: LD_VAR 0 13
36701: PPUSH
36702: CALL_OW 263
36706: PUSH
36707: LD_INT 1
36709: EQUAL
36710: AND
36711: IFFALSE 36875
// begin if IsDrivenBy ( tmp ) then
36713: LD_VAR 0 13
36717: PPUSH
36718: CALL_OW 311
36722: IFFALSE 36726
// continue ;
36724: GO 36525
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36726: LD_VAR 0 6
36730: PPUSH
36731: LD_INT 3
36733: PUSH
36734: LD_INT 60
36736: PUSH
36737: EMPTY
36738: LIST
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 3
36746: PUSH
36747: LD_INT 55
36749: PUSH
36750: EMPTY
36751: LIST
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PPUSH
36761: CALL_OW 72
36765: IFFALSE 36873
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36767: LD_ADDR_VAR 0 18
36771: PUSH
36772: LD_VAR 0 6
36776: PPUSH
36777: LD_INT 3
36779: PUSH
36780: LD_INT 60
36782: PUSH
36783: EMPTY
36784: LIST
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 3
36792: PUSH
36793: LD_INT 55
36795: PUSH
36796: EMPTY
36797: LIST
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PPUSH
36807: CALL_OW 72
36811: PUSH
36812: LD_INT 1
36814: ARRAY
36815: ST_TO_ADDR
// if IsInUnit ( driver ) then
36816: LD_VAR 0 18
36820: PPUSH
36821: CALL_OW 310
36825: IFFALSE 36836
// ComExit ( driver ) ;
36827: LD_VAR 0 18
36831: PPUSH
36832: CALL 61225 0 1
// AddComEnterUnit ( driver , tmp ) ;
36836: LD_VAR 0 18
36840: PPUSH
36841: LD_VAR 0 13
36845: PPUSH
36846: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36850: LD_VAR 0 18
36854: PPUSH
36855: LD_VAR 0 7
36859: PPUSH
36860: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36864: LD_VAR 0 18
36868: PPUSH
36869: CALL_OW 181
// end ; continue ;
36873: GO 36525
// end ; if not cleaners or not tmp in cleaners then
36875: LD_VAR 0 6
36879: NOT
36880: PUSH
36881: LD_VAR 0 13
36885: PUSH
36886: LD_VAR 0 6
36890: IN
36891: NOT
36892: OR
36893: IFFALSE 37200
// begin if dep then
36895: LD_VAR 0 17
36899: IFFALSE 37035
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36901: LD_ADDR_VAR 0 16
36905: PUSH
36906: LD_VAR 0 17
36910: PUSH
36911: LD_INT 1
36913: ARRAY
36914: PPUSH
36915: CALL_OW 250
36919: PPUSH
36920: LD_VAR 0 17
36924: PUSH
36925: LD_INT 1
36927: ARRAY
36928: PPUSH
36929: CALL_OW 254
36933: PPUSH
36934: LD_INT 5
36936: PPUSH
36937: CALL_OW 272
36941: PUSH
36942: LD_VAR 0 17
36946: PUSH
36947: LD_INT 1
36949: ARRAY
36950: PPUSH
36951: CALL_OW 251
36955: PPUSH
36956: LD_VAR 0 17
36960: PUSH
36961: LD_INT 1
36963: ARRAY
36964: PPUSH
36965: CALL_OW 254
36969: PPUSH
36970: LD_INT 5
36972: PPUSH
36973: CALL_OW 273
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36982: LD_VAR 0 16
36986: PUSH
36987: LD_INT 1
36989: ARRAY
36990: PPUSH
36991: LD_VAR 0 16
36995: PUSH
36996: LD_INT 2
36998: ARRAY
36999: PPUSH
37000: CALL_OW 488
37004: IFFALSE 37035
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37006: LD_VAR 0 13
37010: PPUSH
37011: LD_VAR 0 16
37015: PUSH
37016: LD_INT 1
37018: ARRAY
37019: PPUSH
37020: LD_VAR 0 16
37024: PUSH
37025: LD_INT 2
37027: ARRAY
37028: PPUSH
37029: CALL_OW 111
// continue ;
37033: GO 36525
// end ; end ; r := GetDir ( tmp ) ;
37035: LD_ADDR_VAR 0 15
37039: PUSH
37040: LD_VAR 0 13
37044: PPUSH
37045: CALL_OW 254
37049: ST_TO_ADDR
// if r = 5 then
37050: LD_VAR 0 15
37054: PUSH
37055: LD_INT 5
37057: EQUAL
37058: IFFALSE 37068
// r := 0 ;
37060: LD_ADDR_VAR 0 15
37064: PUSH
37065: LD_INT 0
37067: ST_TO_ADDR
// for j = r to 5 do
37068: LD_ADDR_VAR 0 10
37072: PUSH
37073: DOUBLE
37074: LD_VAR 0 15
37078: DEC
37079: ST_TO_ADDR
37080: LD_INT 5
37082: PUSH
37083: FOR_TO
37084: IFFALSE 37198
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37086: LD_ADDR_VAR 0 11
37090: PUSH
37091: LD_VAR 0 13
37095: PPUSH
37096: CALL_OW 250
37100: PPUSH
37101: LD_VAR 0 10
37105: PPUSH
37106: LD_INT 2
37108: PPUSH
37109: CALL_OW 272
37113: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37114: LD_ADDR_VAR 0 12
37118: PUSH
37119: LD_VAR 0 13
37123: PPUSH
37124: CALL_OW 251
37128: PPUSH
37129: LD_VAR 0 10
37133: PPUSH
37134: LD_INT 2
37136: PPUSH
37137: CALL_OW 273
37141: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37142: LD_VAR 0 11
37146: PPUSH
37147: LD_VAR 0 12
37151: PPUSH
37152: CALL_OW 488
37156: PUSH
37157: LD_VAR 0 11
37161: PPUSH
37162: LD_VAR 0 12
37166: PPUSH
37167: CALL_OW 428
37171: NOT
37172: AND
37173: IFFALSE 37196
// begin ComMoveXY ( tmp , _x , _y ) ;
37175: LD_VAR 0 13
37179: PPUSH
37180: LD_VAR 0 11
37184: PPUSH
37185: LD_VAR 0 12
37189: PPUSH
37190: CALL_OW 111
// break ;
37194: GO 37198
// end ; end ;
37196: GO 37083
37198: POP
37199: POP
// end ; end ;
37200: GO 36525
37202: POP
37203: POP
// end ;
37204: LD_VAR 0 8
37208: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
37209: LD_INT 0
37211: PPUSH
37212: PPUSH
37213: PPUSH
37214: PPUSH
37215: PPUSH
37216: PPUSH
37217: PPUSH
37218: PPUSH
37219: PPUSH
37220: PPUSH
// result := false ;
37221: LD_ADDR_VAR 0 6
37225: PUSH
37226: LD_INT 0
37228: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37229: LD_VAR 0 1
37233: NOT
37234: PUSH
37235: LD_VAR 0 1
37239: PPUSH
37240: CALL_OW 266
37244: PUSH
37245: LD_INT 0
37247: PUSH
37248: LD_INT 1
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: IN
37255: NOT
37256: OR
37257: PUSH
37258: LD_VAR 0 2
37262: NOT
37263: OR
37264: PUSH
37265: LD_VAR 0 5
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: LD_INT 1
37275: PUSH
37276: LD_INT 2
37278: PUSH
37279: LD_INT 3
37281: PUSH
37282: LD_INT 4
37284: PUSH
37285: LD_INT 5
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: IN
37296: NOT
37297: OR
37298: PUSH
37299: LD_VAR 0 3
37303: PPUSH
37304: LD_VAR 0 4
37308: PPUSH
37309: CALL_OW 488
37313: NOT
37314: OR
37315: IFFALSE 37319
// exit ;
37317: GO 38036
// pom := GetBase ( depot ) ;
37319: LD_ADDR_VAR 0 10
37323: PUSH
37324: LD_VAR 0 1
37328: PPUSH
37329: CALL_OW 274
37333: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37334: LD_ADDR_VAR 0 11
37338: PUSH
37339: LD_VAR 0 2
37343: PPUSH
37344: LD_VAR 0 1
37348: PPUSH
37349: CALL_OW 248
37353: PPUSH
37354: CALL_OW 450
37358: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37359: LD_VAR 0 10
37363: PPUSH
37364: LD_INT 1
37366: PPUSH
37367: CALL_OW 275
37371: PUSH
37372: LD_VAR 0 11
37376: PUSH
37377: LD_INT 1
37379: ARRAY
37380: GREATEREQUAL
37381: PUSH
37382: LD_VAR 0 10
37386: PPUSH
37387: LD_INT 2
37389: PPUSH
37390: CALL_OW 275
37394: PUSH
37395: LD_VAR 0 11
37399: PUSH
37400: LD_INT 2
37402: ARRAY
37403: GREATEREQUAL
37404: AND
37405: PUSH
37406: LD_VAR 0 10
37410: PPUSH
37411: LD_INT 3
37413: PPUSH
37414: CALL_OW 275
37418: PUSH
37419: LD_VAR 0 11
37423: PUSH
37424: LD_INT 3
37426: ARRAY
37427: GREATEREQUAL
37428: AND
37429: NOT
37430: IFFALSE 37434
// exit ;
37432: GO 38036
// if GetBType ( depot ) = b_depot then
37434: LD_VAR 0 1
37438: PPUSH
37439: CALL_OW 266
37443: PUSH
37444: LD_INT 0
37446: EQUAL
37447: IFFALSE 37459
// dist := 28 else
37449: LD_ADDR_VAR 0 14
37453: PUSH
37454: LD_INT 28
37456: ST_TO_ADDR
37457: GO 37467
// dist := 36 ;
37459: LD_ADDR_VAR 0 14
37463: PUSH
37464: LD_INT 36
37466: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37467: LD_VAR 0 1
37471: PPUSH
37472: LD_VAR 0 3
37476: PPUSH
37477: LD_VAR 0 4
37481: PPUSH
37482: CALL_OW 297
37486: PUSH
37487: LD_VAR 0 14
37491: GREATER
37492: IFFALSE 37496
// exit ;
37494: GO 38036
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37496: LD_ADDR_VAR 0 12
37500: PUSH
37501: LD_VAR 0 2
37505: PPUSH
37506: LD_VAR 0 3
37510: PPUSH
37511: LD_VAR 0 4
37515: PPUSH
37516: LD_VAR 0 5
37520: PPUSH
37521: LD_VAR 0 1
37525: PPUSH
37526: CALL_OW 248
37530: PPUSH
37531: LD_INT 0
37533: PPUSH
37534: CALL 38041 0 6
37538: ST_TO_ADDR
// if not hexes then
37539: LD_VAR 0 12
37543: NOT
37544: IFFALSE 37548
// exit ;
37546: GO 38036
// hex := GetHexInfo ( x , y ) ;
37548: LD_ADDR_VAR 0 15
37552: PUSH
37553: LD_VAR 0 3
37557: PPUSH
37558: LD_VAR 0 4
37562: PPUSH
37563: CALL_OW 546
37567: ST_TO_ADDR
// if hex [ 1 ] then
37568: LD_VAR 0 15
37572: PUSH
37573: LD_INT 1
37575: ARRAY
37576: IFFALSE 37580
// exit ;
37578: GO 38036
// height := hex [ 2 ] ;
37580: LD_ADDR_VAR 0 13
37584: PUSH
37585: LD_VAR 0 15
37589: PUSH
37590: LD_INT 2
37592: ARRAY
37593: ST_TO_ADDR
// for i = 1 to hexes do
37594: LD_ADDR_VAR 0 7
37598: PUSH
37599: DOUBLE
37600: LD_INT 1
37602: DEC
37603: ST_TO_ADDR
37604: LD_VAR 0 12
37608: PUSH
37609: FOR_TO
37610: IFFALSE 37940
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37612: LD_VAR 0 12
37616: PUSH
37617: LD_VAR 0 7
37621: ARRAY
37622: PUSH
37623: LD_INT 1
37625: ARRAY
37626: PPUSH
37627: LD_VAR 0 12
37631: PUSH
37632: LD_VAR 0 7
37636: ARRAY
37637: PUSH
37638: LD_INT 2
37640: ARRAY
37641: PPUSH
37642: CALL_OW 488
37646: NOT
37647: PUSH
37648: LD_VAR 0 12
37652: PUSH
37653: LD_VAR 0 7
37657: ARRAY
37658: PUSH
37659: LD_INT 1
37661: ARRAY
37662: PPUSH
37663: LD_VAR 0 12
37667: PUSH
37668: LD_VAR 0 7
37672: ARRAY
37673: PUSH
37674: LD_INT 2
37676: ARRAY
37677: PPUSH
37678: CALL_OW 428
37682: PUSH
37683: LD_INT 0
37685: GREATER
37686: OR
37687: PUSH
37688: LD_VAR 0 12
37692: PUSH
37693: LD_VAR 0 7
37697: ARRAY
37698: PUSH
37699: LD_INT 1
37701: ARRAY
37702: PPUSH
37703: LD_VAR 0 12
37707: PUSH
37708: LD_VAR 0 7
37712: ARRAY
37713: PUSH
37714: LD_INT 2
37716: ARRAY
37717: PPUSH
37718: CALL_OW 351
37722: OR
37723: IFFALSE 37729
// exit ;
37725: POP
37726: POP
37727: GO 38036
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37729: LD_ADDR_VAR 0 8
37733: PUSH
37734: LD_VAR 0 12
37738: PUSH
37739: LD_VAR 0 7
37743: ARRAY
37744: PUSH
37745: LD_INT 1
37747: ARRAY
37748: PPUSH
37749: LD_VAR 0 12
37753: PUSH
37754: LD_VAR 0 7
37758: ARRAY
37759: PUSH
37760: LD_INT 2
37762: ARRAY
37763: PPUSH
37764: CALL_OW 546
37768: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37769: LD_VAR 0 8
37773: PUSH
37774: LD_INT 1
37776: ARRAY
37777: PUSH
37778: LD_VAR 0 8
37782: PUSH
37783: LD_INT 2
37785: ARRAY
37786: PUSH
37787: LD_VAR 0 13
37791: PUSH
37792: LD_INT 2
37794: PLUS
37795: GREATER
37796: OR
37797: PUSH
37798: LD_VAR 0 8
37802: PUSH
37803: LD_INT 2
37805: ARRAY
37806: PUSH
37807: LD_VAR 0 13
37811: PUSH
37812: LD_INT 2
37814: MINUS
37815: LESS
37816: OR
37817: PUSH
37818: LD_VAR 0 8
37822: PUSH
37823: LD_INT 3
37825: ARRAY
37826: PUSH
37827: LD_INT 0
37829: PUSH
37830: LD_INT 8
37832: PUSH
37833: LD_INT 9
37835: PUSH
37836: LD_INT 10
37838: PUSH
37839: LD_INT 11
37841: PUSH
37842: LD_INT 12
37844: PUSH
37845: LD_INT 13
37847: PUSH
37848: LD_INT 16
37850: PUSH
37851: LD_INT 17
37853: PUSH
37854: LD_INT 18
37856: PUSH
37857: LD_INT 19
37859: PUSH
37860: LD_INT 20
37862: PUSH
37863: LD_INT 21
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: IN
37881: NOT
37882: OR
37883: PUSH
37884: LD_VAR 0 8
37888: PUSH
37889: LD_INT 5
37891: ARRAY
37892: NOT
37893: OR
37894: PUSH
37895: LD_VAR 0 8
37899: PUSH
37900: LD_INT 6
37902: ARRAY
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: LD_INT 2
37909: PUSH
37910: LD_INT 7
37912: PUSH
37913: LD_INT 9
37915: PUSH
37916: LD_INT 10
37918: PUSH
37919: LD_INT 11
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: IN
37930: NOT
37931: OR
37932: IFFALSE 37938
// exit ;
37934: POP
37935: POP
37936: GO 38036
// end ;
37938: GO 37609
37940: POP
37941: POP
// side := GetSide ( depot ) ;
37942: LD_ADDR_VAR 0 9
37946: PUSH
37947: LD_VAR 0 1
37951: PPUSH
37952: CALL_OW 255
37956: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37957: LD_VAR 0 9
37961: PPUSH
37962: LD_VAR 0 3
37966: PPUSH
37967: LD_VAR 0 4
37971: PPUSH
37972: LD_INT 20
37974: PPUSH
37975: CALL 30357 0 4
37979: PUSH
37980: LD_INT 4
37982: ARRAY
37983: IFFALSE 37987
// exit ;
37985: GO 38036
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37987: LD_VAR 0 2
37991: PUSH
37992: LD_INT 29
37994: PUSH
37995: LD_INT 30
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: IN
38002: PUSH
38003: LD_VAR 0 3
38007: PPUSH
38008: LD_VAR 0 4
38012: PPUSH
38013: LD_VAR 0 9
38017: PPUSH
38018: CALL_OW 440
38022: NOT
38023: AND
38024: IFFALSE 38028
// exit ;
38026: GO 38036
// result := true ;
38028: LD_ADDR_VAR 0 6
38032: PUSH
38033: LD_INT 1
38035: ST_TO_ADDR
// end ;
38036: LD_VAR 0 6
38040: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38041: LD_INT 0
38043: PPUSH
38044: PPUSH
38045: PPUSH
38046: PPUSH
38047: PPUSH
38048: PPUSH
38049: PPUSH
38050: PPUSH
38051: PPUSH
38052: PPUSH
38053: PPUSH
38054: PPUSH
38055: PPUSH
38056: PPUSH
38057: PPUSH
38058: PPUSH
38059: PPUSH
38060: PPUSH
38061: PPUSH
38062: PPUSH
38063: PPUSH
38064: PPUSH
38065: PPUSH
38066: PPUSH
38067: PPUSH
38068: PPUSH
38069: PPUSH
38070: PPUSH
38071: PPUSH
38072: PPUSH
38073: PPUSH
38074: PPUSH
38075: PPUSH
38076: PPUSH
38077: PPUSH
38078: PPUSH
38079: PPUSH
38080: PPUSH
38081: PPUSH
38082: PPUSH
38083: PPUSH
38084: PPUSH
38085: PPUSH
38086: PPUSH
38087: PPUSH
38088: PPUSH
38089: PPUSH
38090: PPUSH
38091: PPUSH
38092: PPUSH
38093: PPUSH
38094: PPUSH
38095: PPUSH
38096: PPUSH
38097: PPUSH
38098: PPUSH
38099: PPUSH
38100: PPUSH
// result = [ ] ;
38101: LD_ADDR_VAR 0 7
38105: PUSH
38106: EMPTY
38107: ST_TO_ADDR
// temp_list = [ ] ;
38108: LD_ADDR_VAR 0 9
38112: PUSH
38113: EMPTY
38114: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38115: LD_VAR 0 4
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: LD_INT 1
38125: PUSH
38126: LD_INT 2
38128: PUSH
38129: LD_INT 3
38131: PUSH
38132: LD_INT 4
38134: PUSH
38135: LD_INT 5
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: IN
38146: NOT
38147: PUSH
38148: LD_VAR 0 1
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: LD_INT 1
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: IN
38163: PUSH
38164: LD_VAR 0 5
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: LD_INT 3
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: LIST
38182: IN
38183: NOT
38184: AND
38185: OR
38186: IFFALSE 38190
// exit ;
38188: GO 56581
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38190: LD_VAR 0 1
38194: PUSH
38195: LD_INT 6
38197: PUSH
38198: LD_INT 7
38200: PUSH
38201: LD_INT 8
38203: PUSH
38204: LD_INT 13
38206: PUSH
38207: LD_INT 12
38209: PUSH
38210: LD_INT 15
38212: PUSH
38213: LD_INT 11
38215: PUSH
38216: LD_INT 14
38218: PUSH
38219: LD_INT 10
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: IN
38233: IFFALSE 38243
// btype = b_lab ;
38235: LD_ADDR_VAR 0 1
38239: PUSH
38240: LD_INT 6
38242: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38243: LD_VAR 0 6
38247: PUSH
38248: LD_INT 0
38250: PUSH
38251: LD_INT 1
38253: PUSH
38254: LD_INT 2
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: LIST
38261: IN
38262: NOT
38263: PUSH
38264: LD_VAR 0 1
38268: PUSH
38269: LD_INT 0
38271: PUSH
38272: LD_INT 1
38274: PUSH
38275: LD_INT 2
38277: PUSH
38278: LD_INT 3
38280: PUSH
38281: LD_INT 6
38283: PUSH
38284: LD_INT 36
38286: PUSH
38287: LD_INT 4
38289: PUSH
38290: LD_INT 5
38292: PUSH
38293: LD_INT 31
38295: PUSH
38296: LD_INT 32
38298: PUSH
38299: LD_INT 33
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: IN
38315: NOT
38316: PUSH
38317: LD_VAR 0 6
38321: PUSH
38322: LD_INT 1
38324: EQUAL
38325: AND
38326: OR
38327: PUSH
38328: LD_VAR 0 1
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: LD_INT 3
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: IN
38343: NOT
38344: PUSH
38345: LD_VAR 0 6
38349: PUSH
38350: LD_INT 2
38352: EQUAL
38353: AND
38354: OR
38355: IFFALSE 38365
// mode = 0 ;
38357: LD_ADDR_VAR 0 6
38361: PUSH
38362: LD_INT 0
38364: ST_TO_ADDR
// case mode of 0 :
38365: LD_VAR 0 6
38369: PUSH
38370: LD_INT 0
38372: DOUBLE
38373: EQUAL
38374: IFTRUE 38378
38376: GO 49831
38378: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38379: LD_ADDR_VAR 0 11
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: LD_INT 0
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: LD_INT 1
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: LD_INT 0
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 1
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: NEG
38438: PUSH
38439: LD_INT 0
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 1
38448: NEG
38449: PUSH
38450: LD_INT 1
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 1
38460: NEG
38461: PUSH
38462: LD_INT 2
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: LD_INT 2
38475: NEG
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 1
38483: PUSH
38484: LD_INT 1
38486: NEG
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 1
38494: PUSH
38495: LD_INT 2
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: LD_INT 2
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: LD_INT 3
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 0
38535: PUSH
38536: LD_INT 3
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: NEG
38546: PUSH
38547: LD_INT 2
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38572: LD_ADDR_VAR 0 12
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 1
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: NEG
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: LD_INT 1
38645: NEG
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 1
38653: PUSH
38654: LD_INT 1
38656: NEG
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 2
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 2
38674: PUSH
38675: LD_INT 1
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 2
38695: NEG
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 2
38706: NEG
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 2
38718: NEG
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 3
38729: NEG
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 3
38740: NEG
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38768: LD_ADDR_VAR 0 13
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 1
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: LD_INT 1
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: LD_INT 1
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 1
38826: NEG
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: LD_INT 1
38841: NEG
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: LD_INT 2
38853: NEG
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 2
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 2
38871: PUSH
38872: LD_INT 2
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: PUSH
38882: LD_INT 2
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 2
38891: NEG
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 2
38903: NEG
38904: PUSH
38905: LD_INT 2
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 2
38915: NEG
38916: PUSH
38917: LD_INT 3
38919: NEG
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 3
38927: NEG
38928: PUSH
38929: LD_INT 2
38931: NEG
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 3
38939: NEG
38940: PUSH
38941: LD_INT 3
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38967: LD_ADDR_VAR 0 14
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 0
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: NEG
39037: PUSH
39038: LD_INT 1
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 1
39048: NEG
39049: PUSH
39050: LD_INT 2
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: LD_INT 2
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 1
39113: NEG
39114: PUSH
39115: LD_INT 3
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: LD_INT 3
39128: NEG
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 1
39136: PUSH
39137: LD_INT 2
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39163: LD_ADDR_VAR 0 15
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: LD_INT 1
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 1
39201: PUSH
39202: LD_INT 1
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: LD_INT 1
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 1
39221: NEG
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: LD_INT 1
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: LD_INT 0
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 2
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: NEG
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 2
39297: NEG
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 2
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 3
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 3
39330: PUSH
39331: LD_INT 1
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39356: LD_ADDR_VAR 0 16
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: LD_INT 1
39376: NEG
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: LD_INT 1
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: LD_INT 1
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 1
39437: NEG
39438: PUSH
39439: LD_INT 2
39441: NEG
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 2
39449: PUSH
39450: LD_INT 1
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 2
39459: PUSH
39460: LD_INT 2
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 2
39479: NEG
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 2
39491: NEG
39492: PUSH
39493: LD_INT 2
39495: NEG
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 3
39503: PUSH
39504: LD_INT 2
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 3
39513: PUSH
39514: LD_INT 3
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 2
39523: PUSH
39524: LD_INT 3
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39549: LD_ADDR_VAR 0 17
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 0
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 1
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: LD_INT 1
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: LD_INT 1
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 1
39630: NEG
39631: PUSH
39632: LD_INT 2
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 0
39642: PUSH
39643: LD_INT 2
39645: NEG
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: LD_INT 1
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 2
39674: PUSH
39675: LD_INT 1
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 2
39684: PUSH
39685: LD_INT 2
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 1
39694: PUSH
39695: LD_INT 2
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: LD_INT 2
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 2
39725: NEG
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 2
39736: NEG
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 2
39748: NEG
39749: PUSH
39750: LD_INT 2
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39779: LD_ADDR_VAR 0 18
39783: PUSH
39784: LD_INT 0
39786: PUSH
39787: LD_INT 0
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: LD_INT 1
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 1
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 1
39817: PUSH
39818: LD_INT 1
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 0
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 1
39837: NEG
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: PUSH
39850: LD_INT 1
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 1
39860: NEG
39861: PUSH
39862: LD_INT 2
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: LD_INT 2
39875: NEG
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: LD_INT 1
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 2
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 2
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 2
39914: PUSH
39915: LD_INT 2
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: LD_INT 2
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: LD_INT 2
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: LD_INT 1
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 2
39955: NEG
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: NEG
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 2
39978: NEG
39979: PUSH
39980: LD_INT 2
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40009: LD_ADDR_VAR 0 19
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: LD_INT 2
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: LD_INT 2
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: LD_INT 1
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 2
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: LD_INT 1
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: LD_INT 2
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: LD_INT 2
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 2
40185: NEG
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 2
40196: NEG
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 2
40208: NEG
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40239: LD_ADDR_VAR 0 20
40243: PUSH
40244: LD_INT 0
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 1
40277: PUSH
40278: LD_INT 1
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: LD_INT 1
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 1
40297: NEG
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: LD_INT 1
40312: NEG
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 1
40320: NEG
40321: PUSH
40322: LD_INT 2
40324: NEG
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 0
40332: PUSH
40333: LD_INT 2
40335: NEG
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: LD_INT 1
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 2
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: LD_INT 1
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 2
40374: PUSH
40375: LD_INT 2
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 2
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 2
40415: NEG
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: NEG
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 2
40438: NEG
40439: PUSH
40440: LD_INT 2
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40469: LD_ADDR_VAR 0 21
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 0
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: LD_INT 0
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 1
40538: NEG
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 1
40550: NEG
40551: PUSH
40552: LD_INT 2
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: LD_INT 2
40565: NEG
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 2
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: LD_INT 1
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 2
40604: PUSH
40605: LD_INT 2
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: LD_INT 2
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: LD_INT 2
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: LD_INT 1
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 2
40645: NEG
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 2
40656: NEG
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 2
40668: NEG
40669: PUSH
40670: LD_INT 2
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40699: LD_ADDR_VAR 0 22
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: LD_INT 1
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: LD_INT 1
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: LD_INT 2
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: LD_INT 2
40795: NEG
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 2
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 2
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: LD_INT 2
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 2
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 1
40864: NEG
40865: PUSH
40866: LD_INT 1
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 2
40875: NEG
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 2
40886: NEG
40887: PUSH
40888: LD_INT 1
40890: NEG
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 2
40898: NEG
40899: PUSH
40900: LD_INT 2
40902: NEG
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40929: LD_ADDR_VAR 0 23
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 1
40987: NEG
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: LD_INT 2
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: LD_INT 2
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 2
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: PUSH
41065: LD_INT 2
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 2
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: LD_INT 2
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 2
41105: NEG
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 2
41116: NEG
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 2
41128: NEG
41129: PUSH
41130: LD_INT 2
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: LD_INT 3
41144: NEG
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: PUSH
41154: LD_INT 3
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: LD_INT 2
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 2
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41209: LD_ADDR_VAR 0 24
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 0
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: LD_INT 2
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: LD_INT 2
41305: NEG
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 2
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 2
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 2
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: LD_INT 2
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: LD_INT 2
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 2
41385: NEG
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 2
41396: NEG
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 2
41408: NEG
41409: PUSH
41410: LD_INT 2
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 2
41431: PUSH
41432: LD_INT 1
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 3
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 3
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41485: LD_ADDR_VAR 0 25
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 1
41554: NEG
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: LD_INT 2
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: LD_INT 2
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 2
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 2
41620: PUSH
41621: LD_INT 2
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: LD_INT 2
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: LD_INT 2
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 2
41661: NEG
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 2
41684: NEG
41685: PUSH
41686: LD_INT 2
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 3
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 3
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 2
41716: PUSH
41717: LD_INT 3
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: LD_INT 3
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41759: LD_ADDR_VAR 0 26
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: LD_INT 1
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: LD_INT 1
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 2
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 2
41884: PUSH
41885: LD_INT 1
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 2
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 1
41924: NEG
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 2
41935: NEG
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 2
41946: NEG
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: LD_INT 2
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 2
41970: PUSH
41971: LD_INT 3
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: LD_INT 3
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 1
41990: NEG
41991: PUSH
41992: LD_INT 2
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 2
42001: NEG
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42035: LD_ADDR_VAR 0 27
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: LD_INT 2
42120: NEG
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 2
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 1
42200: NEG
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 2
42211: NEG
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 2
42222: NEG
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 2
42234: NEG
42235: PUSH
42236: LD_INT 2
42238: NEG
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: LD_INT 2
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 2
42257: NEG
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 3
42268: NEG
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 3
42280: NEG
42281: PUSH
42282: LD_INT 2
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42315: LD_ADDR_VAR 0 28
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: LD_INT 1
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: LD_INT 2
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: LD_INT 2
42411: NEG
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 2
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 2
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 2
42491: NEG
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 2
42502: NEG
42503: PUSH
42504: LD_INT 1
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 2
42514: NEG
42515: PUSH
42516: LD_INT 2
42518: NEG
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: LD_INT 3
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: LD_INT 3
42542: NEG
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 3
42550: NEG
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 3
42562: NEG
42563: PUSH
42564: LD_INT 2
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42597: LD_ADDR_VAR 0 29
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: LD_INT 2
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: LD_INT 2
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 2
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: LD_INT 2
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 1
42752: NEG
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: NEG
42764: PUSH
42765: LD_INT 1
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 2
42775: NEG
42776: PUSH
42777: LD_INT 2
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 2
42787: NEG
42788: PUSH
42789: LD_INT 3
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 2
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 3
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: LD_INT 3
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: LD_INT 2
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 3
42841: NEG
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42876: LD_ADDR_VAR 0 30
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: LD_INT 1
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 1
42945: NEG
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: LD_INT 2
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: LD_INT 2
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 2
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 2
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 2
43011: PUSH
43012: LD_INT 2
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 1
43021: PUSH
43022: LD_INT 2
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 2
43053: NEG
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: LD_INT 3
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 3
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: LD_INT 3
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 2
43108: NEG
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 3
43119: NEG
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43154: LD_ADDR_VAR 0 31
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: LD_INT 1
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: LD_INT 2
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 2
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 2
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 2
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: LD_INT 2
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: LD_INT 2
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 2
43319: NEG
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: LD_INT 2
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 2
43343: NEG
43344: PUSH
43345: LD_INT 3
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: LD_INT 1
43358: NEG
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 3
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: LD_INT 3
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 3
43397: NEG
43398: PUSH
43399: LD_INT 2
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43432: LD_ADDR_VAR 0 32
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 2
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 2
43557: PUSH
43558: LD_INT 2
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 2
43598: NEG
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 2
43609: NEG
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: LD_INT 3
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: LD_INT 2
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 3
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: LD_INT 3
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: LD_INT 1
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 3
43675: NEG
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43710: LD_ADDR_VAR 0 33
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: LD_INT 1
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: LD_INT 2
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: LD_INT 2
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 2
43865: NEG
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 2
43876: NEG
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 2
43888: NEG
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 2
43900: NEG
43901: PUSH
43902: LD_INT 3
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 2
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 3
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: LD_INT 3
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: LD_INT 2
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 3
43954: NEG
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43989: LD_ADDR_VAR 0 34
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: LD_INT 2
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 2
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: LD_INT 2
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: NEG
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 2
44156: NEG
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 2
44168: NEG
44169: PUSH
44170: LD_INT 2
44172: NEG
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: LD_INT 3
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 3
44203: PUSH
44204: LD_INT 2
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 2
44213: PUSH
44214: LD_INT 3
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 3
44234: NEG
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44269: LD_ADDR_VAR 0 35
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44381: LD_ADDR_VAR 0 36
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: LD_INT 2
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44493: LD_ADDR_VAR 0 37
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44605: LD_ADDR_VAR 0 38
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 2
44696: NEG
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44717: LD_ADDR_VAR 0 39
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: LD_INT 2
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44829: LD_ADDR_VAR 0 40
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 0
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44941: LD_ADDR_VAR 0 41
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 2
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 2
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: LD_INT 2
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 2
45096: NEG
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 2
45107: NEG
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 2
45119: NEG
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 2
45131: NEG
45132: PUSH
45133: LD_INT 3
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 3
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 3
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 3
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 3
45184: PUSH
45185: LD_INT 3
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: LD_INT 3
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 3
45215: NEG
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 3
45226: NEG
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 3
45238: NEG
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 3
45250: NEG
45251: PUSH
45252: LD_INT 3
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45291: LD_ADDR_VAR 0 42
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: LD_INT 2
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: LD_INT 2
45387: NEG
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: LD_INT 2
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: LD_INT 2
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 2
45481: NEG
45482: PUSH
45483: LD_INT 3
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: LD_INT 3
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 3
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 3
45527: PUSH
45528: LD_INT 2
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 3
45537: PUSH
45538: LD_INT 3
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: LD_INT 3
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: LD_INT 3
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: LD_INT 3
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 3
45588: NEG
45589: PUSH
45590: LD_INT 2
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 3
45600: NEG
45601: PUSH
45602: LD_INT 3
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45641: LD_ADDR_VAR 0 43
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: LD_INT 1
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 2
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: LD_INT 2
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 2
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 2
45807: NEG
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: NEG
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: LD_INT 3
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 3
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 3
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 3
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: LD_INT 3
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: LD_INT 3
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 2
45926: NEG
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 3
45937: NEG
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 3
45948: NEG
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45989: LD_ADDR_VAR 0 44
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: LD_INT 2
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 2
46144: NEG
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 2
46167: NEG
46168: PUSH
46169: LD_INT 2
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: NEG
46180: PUSH
46181: LD_INT 3
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 2
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 3
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 3
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 3
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 3
46232: PUSH
46233: LD_INT 3
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 2
46242: PUSH
46243: LD_INT 3
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 3
46263: NEG
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 3
46274: NEG
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 3
46286: NEG
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 3
46298: NEG
46299: PUSH
46300: LD_INT 3
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46339: LD_ADDR_VAR 0 45
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 2
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 2
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 1
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 2
46517: NEG
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 2
46529: NEG
46530: PUSH
46531: LD_INT 3
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: LD_INT 3
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: LD_INT 3
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 3
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 3
46585: PUSH
46586: LD_INT 3
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 2
46595: PUSH
46596: LD_INT 3
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: LD_INT 3
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: LD_INT 3
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: LD_INT 2
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 3
46636: NEG
46637: PUSH
46638: LD_INT 2
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 3
46648: NEG
46649: PUSH
46650: LD_INT 3
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46689: LD_ADDR_VAR 0 46
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: LD_INT 1
46762: NEG
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: LD_INT 2
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 2
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: LD_INT 3
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 3
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 2
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 3
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 3
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 3
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 3
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 2
46974: NEG
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 3
46985: NEG
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 3
46996: NEG
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47037: LD_ADDR_VAR 0 47
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: LD_INT 2
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: NEG
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: NEG
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47188: LD_ADDR_VAR 0 48
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47335: LD_ADDR_VAR 0 49
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: LD_INT 2
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47479: LD_ADDR_VAR 0 50
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47623: LD_ADDR_VAR 0 51
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47770: LD_ADDR_VAR 0 52
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: LD_INT 2
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: NEG
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: NEG
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 2
47897: NEG
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47921: LD_ADDR_VAR 0 53
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: LD_INT 2
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 2
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: PUSH
48057: LD_INT 2
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 2
48097: NEG
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48151: LD_ADDR_VAR 0 54
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: LD_INT 2
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: LD_INT 2
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 2
48327: NEG
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48381: LD_ADDR_VAR 0 55
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: NEG
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 0
48474: PUSH
48475: LD_INT 2
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 2
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 2
48557: NEG
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 2
48568: NEG
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48611: LD_ADDR_VAR 0 56
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 2
48746: PUSH
48747: LD_INT 2
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: LD_INT 2
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: NEG
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: LD_INT 2
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48841: LD_ADDR_VAR 0 57
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: LD_INT 2
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: LD_INT 2
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: PUSH
48977: LD_INT 2
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: LD_INT 2
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49071: LD_ADDR_VAR 0 58
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 2
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: PUSH
49207: LD_INT 2
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: LD_INT 2
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 2
49247: NEG
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 2
49270: NEG
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49301: LD_ADDR_VAR 0 59
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49389: LD_ADDR_VAR 0 60
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49477: LD_ADDR_VAR 0 61
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49565: LD_ADDR_VAR 0 62
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49653: LD_ADDR_VAR 0 63
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49741: LD_ADDR_VAR 0 64
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: ST_TO_ADDR
// end ; 1 :
49829: GO 55726
49831: LD_INT 1
49833: DOUBLE
49834: EQUAL
49835: IFTRUE 49839
49837: GO 52462
49839: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49840: LD_ADDR_VAR 0 11
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: LD_INT 3
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: LD_INT 3
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: LD_INT 2
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: LIST
49883: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49884: LD_ADDR_VAR 0 12
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 3
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 3
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: LIST
49924: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49925: LD_ADDR_VAR 0 13
49929: PUSH
49930: LD_INT 3
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 3
49942: PUSH
49943: LD_INT 3
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 2
49952: PUSH
49953: LD_INT 3
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: LIST
49964: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49965: LD_ADDR_VAR 0 14
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: LD_INT 3
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 3
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: LIST
50005: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50006: LD_ADDR_VAR 0 15
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 3
50024: NEG
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 3
50035: NEG
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: LIST
50049: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50050: LD_ADDR_VAR 0 16
50054: PUSH
50055: LD_INT 2
50057: NEG
50058: PUSH
50059: LD_INT 3
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 3
50069: NEG
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 3
50081: NEG
50082: PUSH
50083: LD_INT 3
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: LIST
50095: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50096: LD_ADDR_VAR 0 17
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: LD_INT 3
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: LD_INT 3
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: LD_INT 2
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: LIST
50139: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50140: LD_ADDR_VAR 0 18
50144: PUSH
50145: LD_INT 2
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 3
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 3
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50181: LD_ADDR_VAR 0 19
50185: PUSH
50186: LD_INT 3
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 3
50198: PUSH
50199: LD_INT 3
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: LD_INT 3
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: LIST
50220: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50221: LD_ADDR_VAR 0 20
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: LD_INT 3
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: LD_INT 3
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: LIST
50261: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50262: LD_ADDR_VAR 0 21
50266: PUSH
50267: LD_INT 2
50269: NEG
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 3
50280: NEG
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 3
50291: NEG
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: LIST
50305: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50306: LD_ADDR_VAR 0 22
50310: PUSH
50311: LD_INT 2
50313: NEG
50314: PUSH
50315: LD_INT 3
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 3
50325: NEG
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 3
50337: NEG
50338: PUSH
50339: LD_INT 3
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: LIST
50351: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50352: LD_ADDR_VAR 0 23
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: LD_INT 3
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: LD_INT 4
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 3
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: LIST
50395: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50396: LD_ADDR_VAR 0 24
50400: PUSH
50401: LD_INT 3
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 3
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 4
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: LIST
50436: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50437: LD_ADDR_VAR 0 25
50441: PUSH
50442: LD_INT 3
50444: PUSH
50445: LD_INT 3
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 4
50454: PUSH
50455: LD_INT 3
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 3
50464: PUSH
50465: LD_INT 4
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: LIST
50476: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50477: LD_ADDR_VAR 0 26
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 3
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: LD_INT 4
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: LD_INT 3
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: LIST
50517: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50518: LD_ADDR_VAR 0 27
50522: PUSH
50523: LD_INT 3
50525: NEG
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 3
50536: NEG
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 4
50547: NEG
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: LIST
50561: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50562: LD_ADDR_VAR 0 28
50566: PUSH
50567: LD_INT 3
50569: NEG
50570: PUSH
50571: LD_INT 3
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 3
50581: NEG
50582: PUSH
50583: LD_INT 4
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 4
50593: NEG
50594: PUSH
50595: LD_INT 3
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: LIST
50607: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50608: LD_ADDR_VAR 0 29
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: LD_INT 3
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 3
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: LD_INT 4
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: LD_INT 4
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: LD_INT 3
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: LD_INT 5
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: LD_INT 5
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: LD_INT 4
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: LD_INT 6
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: LD_INT 6
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 5
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50763: LD_ADDR_VAR 0 30
50767: PUSH
50768: LD_INT 2
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 3
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 3
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 4
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 4
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 4
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 5
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 5
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 5
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 6
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 6
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50906: LD_ADDR_VAR 0 31
50910: PUSH
50911: LD_INT 3
50913: PUSH
50914: LD_INT 2
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 3
50923: PUSH
50924: LD_INT 3
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 2
50933: PUSH
50934: LD_INT 3
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 4
50943: PUSH
50944: LD_INT 3
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 4
50953: PUSH
50954: LD_INT 4
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 3
50963: PUSH
50964: LD_INT 4
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 5
50973: PUSH
50974: LD_INT 4
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 5
50983: PUSH
50984: LD_INT 5
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 4
50993: PUSH
50994: LD_INT 5
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 6
51003: PUSH
51004: LD_INT 5
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 6
51013: PUSH
51014: LD_INT 6
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 5
51023: PUSH
51024: LD_INT 6
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51045: LD_ADDR_VAR 0 32
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: LD_INT 3
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 3
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 4
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 4
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 3
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 5
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 5
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 4
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 6
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: LD_INT 6
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 5
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51188: LD_ADDR_VAR 0 33
51192: PUSH
51193: LD_INT 2
51195: NEG
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 3
51206: NEG
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 3
51217: NEG
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 3
51229: NEG
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 4
51240: NEG
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 4
51251: NEG
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 4
51263: NEG
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 5
51274: NEG
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 5
51285: NEG
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 5
51297: NEG
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 6
51308: NEG
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 6
51319: NEG
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51343: LD_ADDR_VAR 0 34
51347: PUSH
51348: LD_INT 2
51350: NEG
51351: PUSH
51352: LD_INT 3
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 3
51362: NEG
51363: PUSH
51364: LD_INT 2
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 3
51374: NEG
51375: PUSH
51376: LD_INT 3
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 3
51386: NEG
51387: PUSH
51388: LD_INT 4
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 4
51398: NEG
51399: PUSH
51400: LD_INT 3
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 4
51410: NEG
51411: PUSH
51412: LD_INT 4
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 4
51422: NEG
51423: PUSH
51424: LD_INT 5
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 5
51434: NEG
51435: PUSH
51436: LD_INT 4
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 5
51446: NEG
51447: PUSH
51448: LD_INT 5
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 5
51458: NEG
51459: PUSH
51460: LD_INT 6
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 6
51470: NEG
51471: PUSH
51472: LD_INT 5
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 6
51482: NEG
51483: PUSH
51484: LD_INT 6
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51506: LD_ADDR_VAR 0 41
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: LD_INT 2
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: LD_INT 3
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 2
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: LIST
51549: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51550: LD_ADDR_VAR 0 42
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 2
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 3
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: LIST
51590: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51591: LD_ADDR_VAR 0 43
51595: PUSH
51596: LD_INT 2
51598: PUSH
51599: LD_INT 2
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 3
51608: PUSH
51609: LD_INT 2
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 2
51618: PUSH
51619: LD_INT 3
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: LIST
51630: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51631: LD_ADDR_VAR 0 44
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 3
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: LIST
51671: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51672: LD_ADDR_VAR 0 45
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 3
51701: NEG
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: LIST
51715: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51716: LD_ADDR_VAR 0 46
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: NEG
51736: PUSH
51737: LD_INT 3
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 3
51747: NEG
51748: PUSH
51749: LD_INT 2
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: LIST
51761: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51762: LD_ADDR_VAR 0 47
51766: PUSH
51767: LD_INT 2
51769: NEG
51770: PUSH
51771: LD_INT 3
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: LD_INT 3
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51795: LD_ADDR_VAR 0 48
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51826: LD_ADDR_VAR 0 49
51830: PUSH
51831: LD_INT 3
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 3
51843: PUSH
51844: LD_INT 2
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51855: LD_ADDR_VAR 0 50
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 3
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51884: LD_ADDR_VAR 0 51
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 2
51902: NEG
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51915: LD_ADDR_VAR 0 52
51919: PUSH
51920: LD_INT 3
51922: NEG
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 3
51934: NEG
51935: PUSH
51936: LD_INT 2
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51948: LD_ADDR_VAR 0 53
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: LD_INT 3
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: LD_INT 3
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: LD_INT 2
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: LIST
51991: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51992: LD_ADDR_VAR 0 54
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 3
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: LIST
52032: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52033: LD_ADDR_VAR 0 55
52037: PUSH
52038: LD_INT 3
52040: PUSH
52041: LD_INT 2
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 3
52050: PUSH
52051: LD_INT 3
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: LD_INT 3
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: LIST
52072: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52073: LD_ADDR_VAR 0 56
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: LD_INT 3
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: LD_INT 3
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: LD_INT 2
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: LIST
52113: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52114: LD_ADDR_VAR 0 57
52118: PUSH
52119: LD_INT 2
52121: NEG
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 3
52132: NEG
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 3
52143: NEG
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: LIST
52157: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52158: LD_ADDR_VAR 0 58
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: LD_INT 3
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 3
52177: NEG
52178: PUSH
52179: LD_INT 2
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 3
52189: NEG
52190: PUSH
52191: LD_INT 3
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: LIST
52203: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52204: LD_ADDR_VAR 0 59
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: LD_INT 2
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: LIST
52247: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52248: LD_ADDR_VAR 0 60
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 2
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: LIST
52288: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52289: LD_ADDR_VAR 0 61
52293: PUSH
52294: LD_INT 2
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: LIST
52328: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52329: LD_ADDR_VAR 0 62
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 2
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 2
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: LIST
52369: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52370: LD_ADDR_VAR 0 63
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: LIST
52413: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52414: LD_ADDR_VAR 0 64
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: LD_INT 2
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: LD_INT 2
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: LIST
52459: ST_TO_ADDR
// end ; 2 :
52460: GO 55726
52462: LD_INT 2
52464: DOUBLE
52465: EQUAL
52466: IFTRUE 52470
52468: GO 55725
52470: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52471: LD_ADDR_VAR 0 29
52475: PUSH
52476: LD_INT 4
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 4
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 5
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 5
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 4
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 3
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 3
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 3
52550: PUSH
52551: LD_INT 2
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 5
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 3
52571: PUSH
52572: LD_INT 3
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 3
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 4
52591: PUSH
52592: LD_INT 3
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 4
52601: PUSH
52602: LD_INT 4
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 3
52611: PUSH
52612: LD_INT 4
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 2
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 4
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: LD_INT 4
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: LD_INT 4
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 3
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 4
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 5
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: LD_INT 5
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: LD_INT 4
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: LD_INT 3
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: LD_INT 5
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: LD_INT 3
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 3
52754: NEG
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 3
52765: NEG
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 2
52788: NEG
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 3
52799: NEG
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 4
52810: NEG
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 4
52821: NEG
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 4
52833: NEG
52834: PUSH
52835: LD_INT 2
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 4
52856: NEG
52857: PUSH
52858: LD_INT 4
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 4
52868: NEG
52869: PUSH
52870: LD_INT 5
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 3
52880: NEG
52881: PUSH
52882: LD_INT 4
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 3
52892: NEG
52893: PUSH
52894: LD_INT 3
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 4
52904: NEG
52905: PUSH
52906: LD_INT 3
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 5
52916: NEG
52917: PUSH
52918: LD_INT 4
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 5
52928: NEG
52929: PUSH
52930: LD_INT 5
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 3
52940: NEG
52941: PUSH
52942: LD_INT 5
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 5
52952: NEG
52953: PUSH
52954: LD_INT 3
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53009: LD_ADDR_VAR 0 30
53013: PUSH
53014: LD_INT 4
53016: PUSH
53017: LD_INT 4
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 4
53026: PUSH
53027: LD_INT 3
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 5
53036: PUSH
53037: LD_INT 4
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 5
53046: PUSH
53047: LD_INT 5
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 4
53056: PUSH
53057: LD_INT 5
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 3
53066: PUSH
53067: LD_INT 4
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 3
53076: PUSH
53077: LD_INT 3
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 5
53086: PUSH
53087: LD_INT 3
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 3
53096: PUSH
53097: LD_INT 5
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: LD_INT 3
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 2
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: LD_INT 3
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: LD_INT 4
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: LD_INT 4
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: NEG
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: LD_INT 4
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 4
53199: NEG
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 4
53210: NEG
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 3
53222: NEG
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 3
53233: NEG
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 4
53244: NEG
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 5
53255: NEG
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 5
53266: NEG
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 5
53278: NEG
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 3
53290: NEG
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 3
53301: NEG
53302: PUSH
53303: LD_INT 3
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 3
53313: NEG
53314: PUSH
53315: LD_INT 4
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: NEG
53326: PUSH
53327: LD_INT 3
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 3
53349: NEG
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 4
53361: NEG
53362: PUSH
53363: LD_INT 3
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 4
53373: NEG
53374: PUSH
53375: LD_INT 4
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: LD_INT 4
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 4
53397: NEG
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: LD_INT 4
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 5
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 4
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 3
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 3
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: LD_INT 4
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: LD_INT 5
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: LD_INT 3
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: LD_INT 5
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53556: LD_ADDR_VAR 0 31
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 4
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 3
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: LD_INT 4
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: LD_INT 5
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: LD_INT 5
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 4
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: LD_INT 3
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: LD_INT 5
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 2
53645: NEG
53646: PUSH
53647: LD_INT 3
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 3
53656: NEG
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 3
53667: NEG
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 3
53701: NEG
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 4
53712: NEG
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 4
53723: NEG
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 4
53735: NEG
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 2
53747: NEG
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 4
53758: NEG
53759: PUSH
53760: LD_INT 4
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 4
53770: NEG
53771: PUSH
53772: LD_INT 5
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 3
53782: NEG
53783: PUSH
53784: LD_INT 4
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 3
53794: NEG
53795: PUSH
53796: LD_INT 3
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 4
53806: NEG
53807: PUSH
53808: LD_INT 3
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 5
53818: NEG
53819: PUSH
53820: LD_INT 4
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 5
53830: NEG
53831: PUSH
53832: LD_INT 5
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 3
53842: NEG
53843: PUSH
53844: LD_INT 5
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 5
53854: NEG
53855: PUSH
53856: LD_INT 3
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 3
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 4
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 3
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 2
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: LD_INT 3
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: LD_INT 4
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: LD_INT 2
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 2
53956: NEG
53957: PUSH
53958: LD_INT 4
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 4
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 4
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 5
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 5
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 4
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 3
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 3
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 3
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 5
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54106: LD_ADDR_VAR 0 32
54110: PUSH
54111: LD_INT 4
54113: NEG
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 4
54124: NEG
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 3
54136: NEG
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 3
54147: NEG
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 4
54158: NEG
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 5
54169: NEG
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 5
54180: NEG
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 5
54192: NEG
54193: PUSH
54194: LD_INT 2
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 3
54204: NEG
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 3
54215: NEG
54216: PUSH
54217: LD_INT 3
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 3
54227: NEG
54228: PUSH
54229: LD_INT 4
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: LD_INT 3
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 3
54263: NEG
54264: PUSH
54265: LD_INT 2
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 4
54275: NEG
54276: PUSH
54277: LD_INT 3
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 4
54287: NEG
54288: PUSH
54289: LD_INT 4
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: LD_INT 4
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 4
54311: NEG
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: LD_INT 4
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: LD_INT 5
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: LD_INT 4
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: LD_INT 3
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 3
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 4
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: LD_INT 5
54394: NEG
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: LD_INT 3
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: NEG
54414: PUSH
54415: LD_INT 5
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 3
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 3
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 4
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 4
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 3
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: LD_INT 2
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 4
54508: PUSH
54509: LD_INT 2
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 4
54518: PUSH
54519: LD_INT 4
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 4
54528: PUSH
54529: LD_INT 3
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 5
54538: PUSH
54539: LD_INT 4
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 5
54548: PUSH
54549: LD_INT 5
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 4
54558: PUSH
54559: LD_INT 5
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 3
54568: PUSH
54569: LD_INT 4
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 3
54578: PUSH
54579: LD_INT 3
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 5
54588: PUSH
54589: LD_INT 3
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 3
54598: PUSH
54599: LD_INT 5
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54653: LD_ADDR_VAR 0 33
54657: PUSH
54658: LD_INT 4
54660: NEG
54661: PUSH
54662: LD_INT 4
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 4
54672: NEG
54673: PUSH
54674: LD_INT 5
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 3
54684: NEG
54685: PUSH
54686: LD_INT 4
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 3
54696: NEG
54697: PUSH
54698: LD_INT 3
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 4
54708: NEG
54709: PUSH
54710: LD_INT 3
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 5
54720: NEG
54721: PUSH
54722: LD_INT 4
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 5
54732: NEG
54733: PUSH
54734: LD_INT 5
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 3
54744: NEG
54745: PUSH
54746: LD_INT 5
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 5
54756: NEG
54757: PUSH
54758: LD_INT 3
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: LD_INT 3
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: LD_INT 4
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 3
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: LD_INT 2
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 2
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: LD_INT 3
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: LD_INT 4
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: NEG
54859: PUSH
54860: LD_INT 4
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 4
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 4
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 5
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 5
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 4
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 3
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 3
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 3
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 5
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 3
54963: PUSH
54964: LD_INT 3
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 3
54973: PUSH
54974: LD_INT 2
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 4
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 4
54993: PUSH
54994: LD_INT 4
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 3
55003: PUSH
55004: LD_INT 4
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: LD_INT 3
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 2
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 4
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: LD_INT 4
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 4
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 3
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 4
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: LD_INT 5
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: LD_INT 5
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: LD_INT 4
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: LD_INT 3
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: LD_INT 5
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: LD_INT 3
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55191: LD_ADDR_VAR 0 34
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 4
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 5
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: LD_INT 4
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: LD_INT 3
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 3
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: LD_INT 4
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: LD_INT 5
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: LD_INT 3
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: LD_INT 5
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 3
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 3
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 4
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 4
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 3
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 2
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: LD_INT 2
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 4
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 4
55393: PUSH
55394: LD_INT 4
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 4
55403: PUSH
55404: LD_INT 3
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 5
55413: PUSH
55414: LD_INT 4
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 5
55423: PUSH
55424: LD_INT 5
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 4
55433: PUSH
55434: LD_INT 5
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 3
55443: PUSH
55444: LD_INT 4
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 3
55453: PUSH
55454: LD_INT 3
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 5
55463: PUSH
55464: LD_INT 3
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 3
55473: PUSH
55474: LD_INT 5
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 3
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: LD_INT 3
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: LD_INT 4
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: LD_INT 4
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: LD_INT 3
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: LD_INT 4
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: NEG
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 4
55576: NEG
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 4
55587: NEG
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 3
55599: NEG
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 3
55610: NEG
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 4
55621: NEG
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 5
55632: NEG
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 5
55643: NEG
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 5
55655: NEG
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 3
55667: NEG
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: ST_TO_ADDR
// end ; end ;
55723: GO 55726
55725: POP
// case btype of b_depot , b_warehouse :
55726: LD_VAR 0 1
55730: PUSH
55731: LD_INT 0
55733: DOUBLE
55734: EQUAL
55735: IFTRUE 55745
55737: LD_INT 1
55739: DOUBLE
55740: EQUAL
55741: IFTRUE 55745
55743: GO 55946
55745: POP
// case nation of nation_american :
55746: LD_VAR 0 5
55750: PUSH
55751: LD_INT 1
55753: DOUBLE
55754: EQUAL
55755: IFTRUE 55759
55757: GO 55815
55759: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55760: LD_ADDR_VAR 0 9
55764: PUSH
55765: LD_VAR 0 11
55769: PUSH
55770: LD_VAR 0 12
55774: PUSH
55775: LD_VAR 0 13
55779: PUSH
55780: LD_VAR 0 14
55784: PUSH
55785: LD_VAR 0 15
55789: PUSH
55790: LD_VAR 0 16
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: PUSH
55803: LD_VAR 0 4
55807: PUSH
55808: LD_INT 1
55810: PLUS
55811: ARRAY
55812: ST_TO_ADDR
55813: GO 55944
55815: LD_INT 2
55817: DOUBLE
55818: EQUAL
55819: IFTRUE 55823
55821: GO 55879
55823: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55824: LD_ADDR_VAR 0 9
55828: PUSH
55829: LD_VAR 0 17
55833: PUSH
55834: LD_VAR 0 18
55838: PUSH
55839: LD_VAR 0 19
55843: PUSH
55844: LD_VAR 0 20
55848: PUSH
55849: LD_VAR 0 21
55853: PUSH
55854: LD_VAR 0 22
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: PUSH
55867: LD_VAR 0 4
55871: PUSH
55872: LD_INT 1
55874: PLUS
55875: ARRAY
55876: ST_TO_ADDR
55877: GO 55944
55879: LD_INT 3
55881: DOUBLE
55882: EQUAL
55883: IFTRUE 55887
55885: GO 55943
55887: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55888: LD_ADDR_VAR 0 9
55892: PUSH
55893: LD_VAR 0 23
55897: PUSH
55898: LD_VAR 0 24
55902: PUSH
55903: LD_VAR 0 25
55907: PUSH
55908: LD_VAR 0 26
55912: PUSH
55913: LD_VAR 0 27
55917: PUSH
55918: LD_VAR 0 28
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: PUSH
55931: LD_VAR 0 4
55935: PUSH
55936: LD_INT 1
55938: PLUS
55939: ARRAY
55940: ST_TO_ADDR
55941: GO 55944
55943: POP
55944: GO 56499
55946: LD_INT 2
55948: DOUBLE
55949: EQUAL
55950: IFTRUE 55960
55952: LD_INT 3
55954: DOUBLE
55955: EQUAL
55956: IFTRUE 55960
55958: GO 56016
55960: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55961: LD_ADDR_VAR 0 9
55965: PUSH
55966: LD_VAR 0 29
55970: PUSH
55971: LD_VAR 0 30
55975: PUSH
55976: LD_VAR 0 31
55980: PUSH
55981: LD_VAR 0 32
55985: PUSH
55986: LD_VAR 0 33
55990: PUSH
55991: LD_VAR 0 34
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: PUSH
56004: LD_VAR 0 4
56008: PUSH
56009: LD_INT 1
56011: PLUS
56012: ARRAY
56013: ST_TO_ADDR
56014: GO 56499
56016: LD_INT 16
56018: DOUBLE
56019: EQUAL
56020: IFTRUE 56078
56022: LD_INT 17
56024: DOUBLE
56025: EQUAL
56026: IFTRUE 56078
56028: LD_INT 18
56030: DOUBLE
56031: EQUAL
56032: IFTRUE 56078
56034: LD_INT 19
56036: DOUBLE
56037: EQUAL
56038: IFTRUE 56078
56040: LD_INT 22
56042: DOUBLE
56043: EQUAL
56044: IFTRUE 56078
56046: LD_INT 20
56048: DOUBLE
56049: EQUAL
56050: IFTRUE 56078
56052: LD_INT 21
56054: DOUBLE
56055: EQUAL
56056: IFTRUE 56078
56058: LD_INT 23
56060: DOUBLE
56061: EQUAL
56062: IFTRUE 56078
56064: LD_INT 24
56066: DOUBLE
56067: EQUAL
56068: IFTRUE 56078
56070: LD_INT 25
56072: DOUBLE
56073: EQUAL
56074: IFTRUE 56078
56076: GO 56134
56078: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56079: LD_ADDR_VAR 0 9
56083: PUSH
56084: LD_VAR 0 35
56088: PUSH
56089: LD_VAR 0 36
56093: PUSH
56094: LD_VAR 0 37
56098: PUSH
56099: LD_VAR 0 38
56103: PUSH
56104: LD_VAR 0 39
56108: PUSH
56109: LD_VAR 0 40
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: PUSH
56122: LD_VAR 0 4
56126: PUSH
56127: LD_INT 1
56129: PLUS
56130: ARRAY
56131: ST_TO_ADDR
56132: GO 56499
56134: LD_INT 6
56136: DOUBLE
56137: EQUAL
56138: IFTRUE 56190
56140: LD_INT 7
56142: DOUBLE
56143: EQUAL
56144: IFTRUE 56190
56146: LD_INT 8
56148: DOUBLE
56149: EQUAL
56150: IFTRUE 56190
56152: LD_INT 13
56154: DOUBLE
56155: EQUAL
56156: IFTRUE 56190
56158: LD_INT 12
56160: DOUBLE
56161: EQUAL
56162: IFTRUE 56190
56164: LD_INT 15
56166: DOUBLE
56167: EQUAL
56168: IFTRUE 56190
56170: LD_INT 11
56172: DOUBLE
56173: EQUAL
56174: IFTRUE 56190
56176: LD_INT 14
56178: DOUBLE
56179: EQUAL
56180: IFTRUE 56190
56182: LD_INT 10
56184: DOUBLE
56185: EQUAL
56186: IFTRUE 56190
56188: GO 56246
56190: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56191: LD_ADDR_VAR 0 9
56195: PUSH
56196: LD_VAR 0 41
56200: PUSH
56201: LD_VAR 0 42
56205: PUSH
56206: LD_VAR 0 43
56210: PUSH
56211: LD_VAR 0 44
56215: PUSH
56216: LD_VAR 0 45
56220: PUSH
56221: LD_VAR 0 46
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: PUSH
56234: LD_VAR 0 4
56238: PUSH
56239: LD_INT 1
56241: PLUS
56242: ARRAY
56243: ST_TO_ADDR
56244: GO 56499
56246: LD_INT 36
56248: DOUBLE
56249: EQUAL
56250: IFTRUE 56254
56252: GO 56310
56254: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56255: LD_ADDR_VAR 0 9
56259: PUSH
56260: LD_VAR 0 47
56264: PUSH
56265: LD_VAR 0 48
56269: PUSH
56270: LD_VAR 0 49
56274: PUSH
56275: LD_VAR 0 50
56279: PUSH
56280: LD_VAR 0 51
56284: PUSH
56285: LD_VAR 0 52
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: PUSH
56298: LD_VAR 0 4
56302: PUSH
56303: LD_INT 1
56305: PLUS
56306: ARRAY
56307: ST_TO_ADDR
56308: GO 56499
56310: LD_INT 4
56312: DOUBLE
56313: EQUAL
56314: IFTRUE 56336
56316: LD_INT 5
56318: DOUBLE
56319: EQUAL
56320: IFTRUE 56336
56322: LD_INT 34
56324: DOUBLE
56325: EQUAL
56326: IFTRUE 56336
56328: LD_INT 37
56330: DOUBLE
56331: EQUAL
56332: IFTRUE 56336
56334: GO 56392
56336: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56337: LD_ADDR_VAR 0 9
56341: PUSH
56342: LD_VAR 0 53
56346: PUSH
56347: LD_VAR 0 54
56351: PUSH
56352: LD_VAR 0 55
56356: PUSH
56357: LD_VAR 0 56
56361: PUSH
56362: LD_VAR 0 57
56366: PUSH
56367: LD_VAR 0 58
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: PUSH
56380: LD_VAR 0 4
56384: PUSH
56385: LD_INT 1
56387: PLUS
56388: ARRAY
56389: ST_TO_ADDR
56390: GO 56499
56392: LD_INT 31
56394: DOUBLE
56395: EQUAL
56396: IFTRUE 56442
56398: LD_INT 32
56400: DOUBLE
56401: EQUAL
56402: IFTRUE 56442
56404: LD_INT 33
56406: DOUBLE
56407: EQUAL
56408: IFTRUE 56442
56410: LD_INT 27
56412: DOUBLE
56413: EQUAL
56414: IFTRUE 56442
56416: LD_INT 26
56418: DOUBLE
56419: EQUAL
56420: IFTRUE 56442
56422: LD_INT 28
56424: DOUBLE
56425: EQUAL
56426: IFTRUE 56442
56428: LD_INT 29
56430: DOUBLE
56431: EQUAL
56432: IFTRUE 56442
56434: LD_INT 30
56436: DOUBLE
56437: EQUAL
56438: IFTRUE 56442
56440: GO 56498
56442: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56443: LD_ADDR_VAR 0 9
56447: PUSH
56448: LD_VAR 0 59
56452: PUSH
56453: LD_VAR 0 60
56457: PUSH
56458: LD_VAR 0 61
56462: PUSH
56463: LD_VAR 0 62
56467: PUSH
56468: LD_VAR 0 63
56472: PUSH
56473: LD_VAR 0 64
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: PUSH
56486: LD_VAR 0 4
56490: PUSH
56491: LD_INT 1
56493: PLUS
56494: ARRAY
56495: ST_TO_ADDR
56496: GO 56499
56498: POP
// temp_list2 = [ ] ;
56499: LD_ADDR_VAR 0 10
56503: PUSH
56504: EMPTY
56505: ST_TO_ADDR
// for i in temp_list do
56506: LD_ADDR_VAR 0 8
56510: PUSH
56511: LD_VAR 0 9
56515: PUSH
56516: FOR_IN
56517: IFFALSE 56569
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56519: LD_ADDR_VAR 0 10
56523: PUSH
56524: LD_VAR 0 10
56528: PUSH
56529: LD_VAR 0 8
56533: PUSH
56534: LD_INT 1
56536: ARRAY
56537: PUSH
56538: LD_VAR 0 2
56542: PLUS
56543: PUSH
56544: LD_VAR 0 8
56548: PUSH
56549: LD_INT 2
56551: ARRAY
56552: PUSH
56553: LD_VAR 0 3
56557: PLUS
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: EMPTY
56564: LIST
56565: ADD
56566: ST_TO_ADDR
56567: GO 56516
56569: POP
56570: POP
// result = temp_list2 ;
56571: LD_ADDR_VAR 0 7
56575: PUSH
56576: LD_VAR 0 10
56580: ST_TO_ADDR
// end ;
56581: LD_VAR 0 7
56585: RET
// export function EnemyInRange ( unit , dist ) ; begin
56586: LD_INT 0
56588: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56589: LD_ADDR_VAR 0 3
56593: PUSH
56594: LD_VAR 0 1
56598: PPUSH
56599: CALL_OW 255
56603: PPUSH
56604: LD_VAR 0 1
56608: PPUSH
56609: CALL_OW 250
56613: PPUSH
56614: LD_VAR 0 1
56618: PPUSH
56619: CALL_OW 251
56623: PPUSH
56624: LD_VAR 0 2
56628: PPUSH
56629: CALL 30357 0 4
56633: PUSH
56634: LD_INT 4
56636: ARRAY
56637: ST_TO_ADDR
// end ;
56638: LD_VAR 0 3
56642: RET
// export function PlayerSeeMe ( unit ) ; begin
56643: LD_INT 0
56645: PPUSH
// result := See ( your_side , unit ) ;
56646: LD_ADDR_VAR 0 2
56650: PUSH
56651: LD_OWVAR 2
56655: PPUSH
56656: LD_VAR 0 1
56660: PPUSH
56661: CALL_OW 292
56665: ST_TO_ADDR
// end ;
56666: LD_VAR 0 2
56670: RET
// export function ReverseDir ( unit ) ; begin
56671: LD_INT 0
56673: PPUSH
// if not unit then
56674: LD_VAR 0 1
56678: NOT
56679: IFFALSE 56683
// exit ;
56681: GO 56706
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56683: LD_ADDR_VAR 0 2
56687: PUSH
56688: LD_VAR 0 1
56692: PPUSH
56693: CALL_OW 254
56697: PUSH
56698: LD_INT 3
56700: PLUS
56701: PUSH
56702: LD_INT 6
56704: MOD
56705: ST_TO_ADDR
// end ;
56706: LD_VAR 0 2
56710: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56711: LD_INT 0
56713: PPUSH
56714: PPUSH
56715: PPUSH
56716: PPUSH
56717: PPUSH
// if not hexes then
56718: LD_VAR 0 2
56722: NOT
56723: IFFALSE 56727
// exit ;
56725: GO 56875
// dist := 9999 ;
56727: LD_ADDR_VAR 0 5
56731: PUSH
56732: LD_INT 9999
56734: ST_TO_ADDR
// for i = 1 to hexes do
56735: LD_ADDR_VAR 0 4
56739: PUSH
56740: DOUBLE
56741: LD_INT 1
56743: DEC
56744: ST_TO_ADDR
56745: LD_VAR 0 2
56749: PUSH
56750: FOR_TO
56751: IFFALSE 56863
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56753: LD_VAR 0 1
56757: PPUSH
56758: LD_VAR 0 2
56762: PUSH
56763: LD_VAR 0 4
56767: ARRAY
56768: PUSH
56769: LD_INT 1
56771: ARRAY
56772: PPUSH
56773: LD_VAR 0 2
56777: PUSH
56778: LD_VAR 0 4
56782: ARRAY
56783: PUSH
56784: LD_INT 2
56786: ARRAY
56787: PPUSH
56788: CALL_OW 297
56792: PUSH
56793: LD_VAR 0 5
56797: LESS
56798: IFFALSE 56861
// begin hex := hexes [ i ] ;
56800: LD_ADDR_VAR 0 7
56804: PUSH
56805: LD_VAR 0 2
56809: PUSH
56810: LD_VAR 0 4
56814: ARRAY
56815: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56816: LD_ADDR_VAR 0 5
56820: PUSH
56821: LD_VAR 0 1
56825: PPUSH
56826: LD_VAR 0 2
56830: PUSH
56831: LD_VAR 0 4
56835: ARRAY
56836: PUSH
56837: LD_INT 1
56839: ARRAY
56840: PPUSH
56841: LD_VAR 0 2
56845: PUSH
56846: LD_VAR 0 4
56850: ARRAY
56851: PUSH
56852: LD_INT 2
56854: ARRAY
56855: PPUSH
56856: CALL_OW 297
56860: ST_TO_ADDR
// end ; end ;
56861: GO 56750
56863: POP
56864: POP
// result := hex ;
56865: LD_ADDR_VAR 0 3
56869: PUSH
56870: LD_VAR 0 7
56874: ST_TO_ADDR
// end ;
56875: LD_VAR 0 3
56879: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56880: LD_INT 0
56882: PPUSH
56883: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56884: LD_VAR 0 1
56888: NOT
56889: PUSH
56890: LD_VAR 0 1
56894: PUSH
56895: LD_INT 21
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 23
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PPUSH
56919: CALL_OW 69
56923: IN
56924: NOT
56925: OR
56926: IFFALSE 56930
// exit ;
56928: GO 56977
// for i = 1 to 3 do
56930: LD_ADDR_VAR 0 3
56934: PUSH
56935: DOUBLE
56936: LD_INT 1
56938: DEC
56939: ST_TO_ADDR
56940: LD_INT 3
56942: PUSH
56943: FOR_TO
56944: IFFALSE 56975
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56946: LD_VAR 0 1
56950: PPUSH
56951: CALL_OW 250
56955: PPUSH
56956: LD_VAR 0 1
56960: PPUSH
56961: CALL_OW 251
56965: PPUSH
56966: LD_INT 1
56968: PPUSH
56969: CALL_OW 453
56973: GO 56943
56975: POP
56976: POP
// end ;
56977: LD_VAR 0 2
56981: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56982: LD_INT 0
56984: PPUSH
56985: PPUSH
56986: PPUSH
56987: PPUSH
56988: PPUSH
56989: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56990: LD_VAR 0 1
56994: NOT
56995: PUSH
56996: LD_VAR 0 2
57000: NOT
57001: OR
57002: PUSH
57003: LD_VAR 0 1
57007: PPUSH
57008: CALL_OW 314
57012: OR
57013: IFFALSE 57017
// exit ;
57015: GO 57458
// x := GetX ( enemy_unit ) ;
57017: LD_ADDR_VAR 0 7
57021: PUSH
57022: LD_VAR 0 2
57026: PPUSH
57027: CALL_OW 250
57031: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57032: LD_ADDR_VAR 0 8
57036: PUSH
57037: LD_VAR 0 2
57041: PPUSH
57042: CALL_OW 251
57046: ST_TO_ADDR
// if not x or not y then
57047: LD_VAR 0 7
57051: NOT
57052: PUSH
57053: LD_VAR 0 8
57057: NOT
57058: OR
57059: IFFALSE 57063
// exit ;
57061: GO 57458
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57063: LD_ADDR_VAR 0 6
57067: PUSH
57068: LD_VAR 0 7
57072: PPUSH
57073: LD_INT 0
57075: PPUSH
57076: LD_INT 4
57078: PPUSH
57079: CALL_OW 272
57083: PUSH
57084: LD_VAR 0 8
57088: PPUSH
57089: LD_INT 0
57091: PPUSH
57092: LD_INT 4
57094: PPUSH
57095: CALL_OW 273
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_VAR 0 7
57108: PPUSH
57109: LD_INT 1
57111: PPUSH
57112: LD_INT 4
57114: PPUSH
57115: CALL_OW 272
57119: PUSH
57120: LD_VAR 0 8
57124: PPUSH
57125: LD_INT 1
57127: PPUSH
57128: LD_INT 4
57130: PPUSH
57131: CALL_OW 273
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_VAR 0 7
57144: PPUSH
57145: LD_INT 2
57147: PPUSH
57148: LD_INT 4
57150: PPUSH
57151: CALL_OW 272
57155: PUSH
57156: LD_VAR 0 8
57160: PPUSH
57161: LD_INT 2
57163: PPUSH
57164: LD_INT 4
57166: PPUSH
57167: CALL_OW 273
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_VAR 0 7
57180: PPUSH
57181: LD_INT 3
57183: PPUSH
57184: LD_INT 4
57186: PPUSH
57187: CALL_OW 272
57191: PUSH
57192: LD_VAR 0 8
57196: PPUSH
57197: LD_INT 3
57199: PPUSH
57200: LD_INT 4
57202: PPUSH
57203: CALL_OW 273
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_VAR 0 7
57216: PPUSH
57217: LD_INT 4
57219: PPUSH
57220: LD_INT 4
57222: PPUSH
57223: CALL_OW 272
57227: PUSH
57228: LD_VAR 0 8
57232: PPUSH
57233: LD_INT 4
57235: PPUSH
57236: LD_INT 4
57238: PPUSH
57239: CALL_OW 273
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_VAR 0 7
57252: PPUSH
57253: LD_INT 5
57255: PPUSH
57256: LD_INT 4
57258: PPUSH
57259: CALL_OW 272
57263: PUSH
57264: LD_VAR 0 8
57268: PPUSH
57269: LD_INT 5
57271: PPUSH
57272: LD_INT 4
57274: PPUSH
57275: CALL_OW 273
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: ST_TO_ADDR
// for i = tmp downto 1 do
57292: LD_ADDR_VAR 0 4
57296: PUSH
57297: DOUBLE
57298: LD_VAR 0 6
57302: INC
57303: ST_TO_ADDR
57304: LD_INT 1
57306: PUSH
57307: FOR_DOWNTO
57308: IFFALSE 57409
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57310: LD_VAR 0 6
57314: PUSH
57315: LD_VAR 0 4
57319: ARRAY
57320: PUSH
57321: LD_INT 1
57323: ARRAY
57324: PPUSH
57325: LD_VAR 0 6
57329: PUSH
57330: LD_VAR 0 4
57334: ARRAY
57335: PUSH
57336: LD_INT 2
57338: ARRAY
57339: PPUSH
57340: CALL_OW 488
57344: NOT
57345: PUSH
57346: LD_VAR 0 6
57350: PUSH
57351: LD_VAR 0 4
57355: ARRAY
57356: PUSH
57357: LD_INT 1
57359: ARRAY
57360: PPUSH
57361: LD_VAR 0 6
57365: PUSH
57366: LD_VAR 0 4
57370: ARRAY
57371: PUSH
57372: LD_INT 2
57374: ARRAY
57375: PPUSH
57376: CALL_OW 428
57380: PUSH
57381: LD_INT 0
57383: NONEQUAL
57384: OR
57385: IFFALSE 57407
// tmp := Delete ( tmp , i ) ;
57387: LD_ADDR_VAR 0 6
57391: PUSH
57392: LD_VAR 0 6
57396: PPUSH
57397: LD_VAR 0 4
57401: PPUSH
57402: CALL_OW 3
57406: ST_TO_ADDR
57407: GO 57307
57409: POP
57410: POP
// j := GetClosestHex ( unit , tmp ) ;
57411: LD_ADDR_VAR 0 5
57415: PUSH
57416: LD_VAR 0 1
57420: PPUSH
57421: LD_VAR 0 6
57425: PPUSH
57426: CALL 56711 0 2
57430: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57431: LD_VAR 0 1
57435: PPUSH
57436: LD_VAR 0 5
57440: PUSH
57441: LD_INT 1
57443: ARRAY
57444: PPUSH
57445: LD_VAR 0 5
57449: PUSH
57450: LD_INT 2
57452: ARRAY
57453: PPUSH
57454: CALL_OW 111
// end ;
57458: LD_VAR 0 3
57462: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57463: LD_INT 0
57465: PPUSH
57466: PPUSH
57467: PPUSH
// uc_side = 0 ;
57468: LD_ADDR_OWVAR 20
57472: PUSH
57473: LD_INT 0
57475: ST_TO_ADDR
// uc_nation = 0 ;
57476: LD_ADDR_OWVAR 21
57480: PUSH
57481: LD_INT 0
57483: ST_TO_ADDR
// InitHc_All ( ) ;
57484: CALL_OW 584
// InitVc ;
57488: CALL_OW 20
// if mastodonts then
57492: LD_VAR 0 6
57496: IFFALSE 57563
// for i = 1 to mastodonts do
57498: LD_ADDR_VAR 0 11
57502: PUSH
57503: DOUBLE
57504: LD_INT 1
57506: DEC
57507: ST_TO_ADDR
57508: LD_VAR 0 6
57512: PUSH
57513: FOR_TO
57514: IFFALSE 57561
// begin vc_chassis := 31 ;
57516: LD_ADDR_OWVAR 37
57520: PUSH
57521: LD_INT 31
57523: ST_TO_ADDR
// vc_control := control_rider ;
57524: LD_ADDR_OWVAR 38
57528: PUSH
57529: LD_INT 4
57531: ST_TO_ADDR
// animal := CreateVehicle ;
57532: LD_ADDR_VAR 0 12
57536: PUSH
57537: CALL_OW 45
57541: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57542: LD_VAR 0 12
57546: PPUSH
57547: LD_VAR 0 8
57551: PPUSH
57552: LD_INT 0
57554: PPUSH
57555: CALL 59751 0 3
// end ;
57559: GO 57513
57561: POP
57562: POP
// if horses then
57563: LD_VAR 0 5
57567: IFFALSE 57634
// for i = 1 to horses do
57569: LD_ADDR_VAR 0 11
57573: PUSH
57574: DOUBLE
57575: LD_INT 1
57577: DEC
57578: ST_TO_ADDR
57579: LD_VAR 0 5
57583: PUSH
57584: FOR_TO
57585: IFFALSE 57632
// begin hc_class := 21 ;
57587: LD_ADDR_OWVAR 28
57591: PUSH
57592: LD_INT 21
57594: ST_TO_ADDR
// hc_gallery :=  ;
57595: LD_ADDR_OWVAR 33
57599: PUSH
57600: LD_STRING 
57602: ST_TO_ADDR
// animal := CreateHuman ;
57603: LD_ADDR_VAR 0 12
57607: PUSH
57608: CALL_OW 44
57612: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57613: LD_VAR 0 12
57617: PPUSH
57618: LD_VAR 0 8
57622: PPUSH
57623: LD_INT 0
57625: PPUSH
57626: CALL 59751 0 3
// end ;
57630: GO 57584
57632: POP
57633: POP
// if birds then
57634: LD_VAR 0 1
57638: IFFALSE 57705
// for i = 1 to birds do
57640: LD_ADDR_VAR 0 11
57644: PUSH
57645: DOUBLE
57646: LD_INT 1
57648: DEC
57649: ST_TO_ADDR
57650: LD_VAR 0 1
57654: PUSH
57655: FOR_TO
57656: IFFALSE 57703
// begin hc_class = 18 ;
57658: LD_ADDR_OWVAR 28
57662: PUSH
57663: LD_INT 18
57665: ST_TO_ADDR
// hc_gallery =  ;
57666: LD_ADDR_OWVAR 33
57670: PUSH
57671: LD_STRING 
57673: ST_TO_ADDR
// animal := CreateHuman ;
57674: LD_ADDR_VAR 0 12
57678: PUSH
57679: CALL_OW 44
57683: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57684: LD_VAR 0 12
57688: PPUSH
57689: LD_VAR 0 8
57693: PPUSH
57694: LD_INT 0
57696: PPUSH
57697: CALL 59751 0 3
// end ;
57701: GO 57655
57703: POP
57704: POP
// if tigers then
57705: LD_VAR 0 2
57709: IFFALSE 57793
// for i = 1 to tigers do
57711: LD_ADDR_VAR 0 11
57715: PUSH
57716: DOUBLE
57717: LD_INT 1
57719: DEC
57720: ST_TO_ADDR
57721: LD_VAR 0 2
57725: PUSH
57726: FOR_TO
57727: IFFALSE 57791
// begin hc_class = class_tiger ;
57729: LD_ADDR_OWVAR 28
57733: PUSH
57734: LD_INT 14
57736: ST_TO_ADDR
// hc_gallery =  ;
57737: LD_ADDR_OWVAR 33
57741: PUSH
57742: LD_STRING 
57744: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57745: LD_ADDR_OWVAR 35
57749: PUSH
57750: LD_INT 7
57752: NEG
57753: PPUSH
57754: LD_INT 7
57756: PPUSH
57757: CALL_OW 12
57761: ST_TO_ADDR
// animal := CreateHuman ;
57762: LD_ADDR_VAR 0 12
57766: PUSH
57767: CALL_OW 44
57771: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57772: LD_VAR 0 12
57776: PPUSH
57777: LD_VAR 0 8
57781: PPUSH
57782: LD_INT 0
57784: PPUSH
57785: CALL 59751 0 3
// end ;
57789: GO 57726
57791: POP
57792: POP
// if apemans then
57793: LD_VAR 0 3
57797: IFFALSE 57920
// for i = 1 to apemans do
57799: LD_ADDR_VAR 0 11
57803: PUSH
57804: DOUBLE
57805: LD_INT 1
57807: DEC
57808: ST_TO_ADDR
57809: LD_VAR 0 3
57813: PUSH
57814: FOR_TO
57815: IFFALSE 57918
// begin hc_class = class_apeman ;
57817: LD_ADDR_OWVAR 28
57821: PUSH
57822: LD_INT 12
57824: ST_TO_ADDR
// hc_gallery =  ;
57825: LD_ADDR_OWVAR 33
57829: PUSH
57830: LD_STRING 
57832: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
57833: LD_ADDR_OWVAR 35
57837: PUSH
57838: LD_INT 5
57840: NEG
57841: PPUSH
57842: LD_INT 5
57844: PPUSH
57845: CALL_OW 12
57849: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57850: LD_ADDR_OWVAR 31
57854: PUSH
57855: LD_INT 1
57857: PPUSH
57858: LD_INT 3
57860: PPUSH
57861: CALL_OW 12
57865: PUSH
57866: LD_INT 1
57868: PPUSH
57869: LD_INT 3
57871: PPUSH
57872: CALL_OW 12
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: LD_INT 0
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: ST_TO_ADDR
// animal := CreateHuman ;
57889: LD_ADDR_VAR 0 12
57893: PUSH
57894: CALL_OW 44
57898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57899: LD_VAR 0 12
57903: PPUSH
57904: LD_VAR 0 8
57908: PPUSH
57909: LD_INT 0
57911: PPUSH
57912: CALL 59751 0 3
// end ;
57916: GO 57814
57918: POP
57919: POP
// if enchidnas then
57920: LD_VAR 0 4
57924: IFFALSE 57991
// for i = 1 to enchidnas do
57926: LD_ADDR_VAR 0 11
57930: PUSH
57931: DOUBLE
57932: LD_INT 1
57934: DEC
57935: ST_TO_ADDR
57936: LD_VAR 0 4
57940: PUSH
57941: FOR_TO
57942: IFFALSE 57989
// begin hc_class = 13 ;
57944: LD_ADDR_OWVAR 28
57948: PUSH
57949: LD_INT 13
57951: ST_TO_ADDR
// hc_gallery =  ;
57952: LD_ADDR_OWVAR 33
57956: PUSH
57957: LD_STRING 
57959: ST_TO_ADDR
// animal := CreateHuman ;
57960: LD_ADDR_VAR 0 12
57964: PUSH
57965: CALL_OW 44
57969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57970: LD_VAR 0 12
57974: PPUSH
57975: LD_VAR 0 8
57979: PPUSH
57980: LD_INT 0
57982: PPUSH
57983: CALL 59751 0 3
// end ;
57987: GO 57941
57989: POP
57990: POP
// if fishes then
57991: LD_VAR 0 7
57995: IFFALSE 58062
// for i = 1 to fishes do
57997: LD_ADDR_VAR 0 11
58001: PUSH
58002: DOUBLE
58003: LD_INT 1
58005: DEC
58006: ST_TO_ADDR
58007: LD_VAR 0 7
58011: PUSH
58012: FOR_TO
58013: IFFALSE 58060
// begin hc_class = 20 ;
58015: LD_ADDR_OWVAR 28
58019: PUSH
58020: LD_INT 20
58022: ST_TO_ADDR
// hc_gallery =  ;
58023: LD_ADDR_OWVAR 33
58027: PUSH
58028: LD_STRING 
58030: ST_TO_ADDR
// animal := CreateHuman ;
58031: LD_ADDR_VAR 0 12
58035: PUSH
58036: CALL_OW 44
58040: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58041: LD_VAR 0 12
58045: PPUSH
58046: LD_VAR 0 9
58050: PPUSH
58051: LD_INT 0
58053: PPUSH
58054: CALL 59751 0 3
// end ;
58058: GO 58012
58060: POP
58061: POP
// end ;
58062: LD_VAR 0 10
58066: RET
// export function WantHeal ( sci , unit ) ; begin
58067: LD_INT 0
58069: PPUSH
// if GetTaskList ( sci ) > 0 then
58070: LD_VAR 0 1
58074: PPUSH
58075: CALL_OW 437
58079: PUSH
58080: LD_INT 0
58082: GREATER
58083: IFFALSE 58153
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58085: LD_VAR 0 1
58089: PPUSH
58090: CALL_OW 437
58094: PUSH
58095: LD_INT 1
58097: ARRAY
58098: PUSH
58099: LD_INT 1
58101: ARRAY
58102: PUSH
58103: LD_STRING l
58105: EQUAL
58106: PUSH
58107: LD_VAR 0 1
58111: PPUSH
58112: CALL_OW 437
58116: PUSH
58117: LD_INT 1
58119: ARRAY
58120: PUSH
58121: LD_INT 4
58123: ARRAY
58124: PUSH
58125: LD_VAR 0 2
58129: EQUAL
58130: AND
58131: IFFALSE 58143
// result := true else
58133: LD_ADDR_VAR 0 3
58137: PUSH
58138: LD_INT 1
58140: ST_TO_ADDR
58141: GO 58151
// result := false ;
58143: LD_ADDR_VAR 0 3
58147: PUSH
58148: LD_INT 0
58150: ST_TO_ADDR
// end else
58151: GO 58161
// result := false ;
58153: LD_ADDR_VAR 0 3
58157: PUSH
58158: LD_INT 0
58160: ST_TO_ADDR
// end ;
58161: LD_VAR 0 3
58165: RET
// export function HealTarget ( sci ) ; begin
58166: LD_INT 0
58168: PPUSH
// if not sci then
58169: LD_VAR 0 1
58173: NOT
58174: IFFALSE 58178
// exit ;
58176: GO 58243
// result := 0 ;
58178: LD_ADDR_VAR 0 2
58182: PUSH
58183: LD_INT 0
58185: ST_TO_ADDR
// if GetTaskList ( sci ) then
58186: LD_VAR 0 1
58190: PPUSH
58191: CALL_OW 437
58195: IFFALSE 58243
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58197: LD_VAR 0 1
58201: PPUSH
58202: CALL_OW 437
58206: PUSH
58207: LD_INT 1
58209: ARRAY
58210: PUSH
58211: LD_INT 1
58213: ARRAY
58214: PUSH
58215: LD_STRING l
58217: EQUAL
58218: IFFALSE 58243
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58220: LD_ADDR_VAR 0 2
58224: PUSH
58225: LD_VAR 0 1
58229: PPUSH
58230: CALL_OW 437
58234: PUSH
58235: LD_INT 1
58237: ARRAY
58238: PUSH
58239: LD_INT 4
58241: ARRAY
58242: ST_TO_ADDR
// end ;
58243: LD_VAR 0 2
58247: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58248: LD_INT 0
58250: PPUSH
58251: PPUSH
58252: PPUSH
58253: PPUSH
// if not base_units then
58254: LD_VAR 0 1
58258: NOT
58259: IFFALSE 58263
// exit ;
58261: GO 58350
// result := false ;
58263: LD_ADDR_VAR 0 2
58267: PUSH
58268: LD_INT 0
58270: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58271: LD_ADDR_VAR 0 5
58275: PUSH
58276: LD_VAR 0 1
58280: PPUSH
58281: LD_INT 21
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PPUSH
58291: CALL_OW 72
58295: ST_TO_ADDR
// if not tmp then
58296: LD_VAR 0 5
58300: NOT
58301: IFFALSE 58305
// exit ;
58303: GO 58350
// for i in tmp do
58305: LD_ADDR_VAR 0 3
58309: PUSH
58310: LD_VAR 0 5
58314: PUSH
58315: FOR_IN
58316: IFFALSE 58348
// begin result := EnemyInRange ( i , 22 ) ;
58318: LD_ADDR_VAR 0 2
58322: PUSH
58323: LD_VAR 0 3
58327: PPUSH
58328: LD_INT 22
58330: PPUSH
58331: CALL 56586 0 2
58335: ST_TO_ADDR
// if result then
58336: LD_VAR 0 2
58340: IFFALSE 58346
// exit ;
58342: POP
58343: POP
58344: GO 58350
// end ;
58346: GO 58315
58348: POP
58349: POP
// end ;
58350: LD_VAR 0 2
58354: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58355: LD_INT 0
58357: PPUSH
58358: PPUSH
// if not units then
58359: LD_VAR 0 1
58363: NOT
58364: IFFALSE 58368
// exit ;
58366: GO 58438
// result := [ ] ;
58368: LD_ADDR_VAR 0 3
58372: PUSH
58373: EMPTY
58374: ST_TO_ADDR
// for i in units do
58375: LD_ADDR_VAR 0 4
58379: PUSH
58380: LD_VAR 0 1
58384: PUSH
58385: FOR_IN
58386: IFFALSE 58436
// if GetTag ( i ) = tag then
58388: LD_VAR 0 4
58392: PPUSH
58393: CALL_OW 110
58397: PUSH
58398: LD_VAR 0 2
58402: EQUAL
58403: IFFALSE 58434
// result := Insert ( result , result + 1 , i ) ;
58405: LD_ADDR_VAR 0 3
58409: PUSH
58410: LD_VAR 0 3
58414: PPUSH
58415: LD_VAR 0 3
58419: PUSH
58420: LD_INT 1
58422: PLUS
58423: PPUSH
58424: LD_VAR 0 4
58428: PPUSH
58429: CALL_OW 2
58433: ST_TO_ADDR
58434: GO 58385
58436: POP
58437: POP
// end ;
58438: LD_VAR 0 3
58442: RET
// export function IsDriver ( un ) ; begin
58443: LD_INT 0
58445: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58446: LD_ADDR_VAR 0 2
58450: PUSH
58451: LD_VAR 0 1
58455: PUSH
58456: LD_INT 55
58458: PUSH
58459: EMPTY
58460: LIST
58461: PPUSH
58462: CALL_OW 69
58466: IN
58467: ST_TO_ADDR
// end ;
58468: LD_VAR 0 2
58472: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58473: LD_INT 0
58475: PPUSH
58476: PPUSH
// list := [ ] ;
58477: LD_ADDR_VAR 0 5
58481: PUSH
58482: EMPTY
58483: ST_TO_ADDR
// case d of 0 :
58484: LD_VAR 0 3
58488: PUSH
58489: LD_INT 0
58491: DOUBLE
58492: EQUAL
58493: IFTRUE 58497
58495: GO 58630
58497: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58498: LD_ADDR_VAR 0 5
58502: PUSH
58503: LD_VAR 0 1
58507: PUSH
58508: LD_INT 4
58510: MINUS
58511: PUSH
58512: LD_VAR 0 2
58516: PUSH
58517: LD_INT 4
58519: MINUS
58520: PUSH
58521: LD_INT 2
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: LIST
58528: PUSH
58529: LD_VAR 0 1
58533: PUSH
58534: LD_INT 3
58536: MINUS
58537: PUSH
58538: LD_VAR 0 2
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: LIST
58550: PUSH
58551: LD_VAR 0 1
58555: PUSH
58556: LD_INT 4
58558: PLUS
58559: PUSH
58560: LD_VAR 0 2
58564: PUSH
58565: LD_INT 4
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: LIST
58572: PUSH
58573: LD_VAR 0 1
58577: PUSH
58578: LD_INT 3
58580: PLUS
58581: PUSH
58582: LD_VAR 0 2
58586: PUSH
58587: LD_INT 3
58589: PLUS
58590: PUSH
58591: LD_INT 5
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: LIST
58598: PUSH
58599: LD_VAR 0 1
58603: PUSH
58604: LD_VAR 0 2
58608: PUSH
58609: LD_INT 4
58611: PLUS
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: LIST
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: ST_TO_ADDR
// end ; 1 :
58628: GO 59328
58630: LD_INT 1
58632: DOUBLE
58633: EQUAL
58634: IFTRUE 58638
58636: GO 58771
58638: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58639: LD_ADDR_VAR 0 5
58643: PUSH
58644: LD_VAR 0 1
58648: PUSH
58649: LD_VAR 0 2
58653: PUSH
58654: LD_INT 4
58656: MINUS
58657: PUSH
58658: LD_INT 3
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: LIST
58665: PUSH
58666: LD_VAR 0 1
58670: PUSH
58671: LD_INT 3
58673: MINUS
58674: PUSH
58675: LD_VAR 0 2
58679: PUSH
58680: LD_INT 3
58682: MINUS
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: LIST
58691: PUSH
58692: LD_VAR 0 1
58696: PUSH
58697: LD_INT 4
58699: MINUS
58700: PUSH
58701: LD_VAR 0 2
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: LIST
58713: PUSH
58714: LD_VAR 0 1
58718: PUSH
58719: LD_VAR 0 2
58723: PUSH
58724: LD_INT 3
58726: PLUS
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: LIST
58735: PUSH
58736: LD_VAR 0 1
58740: PUSH
58741: LD_INT 4
58743: PLUS
58744: PUSH
58745: LD_VAR 0 2
58749: PUSH
58750: LD_INT 4
58752: PLUS
58753: PUSH
58754: LD_INT 5
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: LIST
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: ST_TO_ADDR
// end ; 2 :
58769: GO 59328
58771: LD_INT 2
58773: DOUBLE
58774: EQUAL
58775: IFTRUE 58779
58777: GO 58908
58779: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58780: LD_ADDR_VAR 0 5
58784: PUSH
58785: LD_VAR 0 1
58789: PUSH
58790: LD_VAR 0 2
58794: PUSH
58795: LD_INT 3
58797: MINUS
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: LIST
58806: PUSH
58807: LD_VAR 0 1
58811: PUSH
58812: LD_INT 4
58814: PLUS
58815: PUSH
58816: LD_VAR 0 2
58820: PUSH
58821: LD_INT 4
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: LIST
58828: PUSH
58829: LD_VAR 0 1
58833: PUSH
58834: LD_VAR 0 2
58838: PUSH
58839: LD_INT 4
58841: PLUS
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: LIST
58850: PUSH
58851: LD_VAR 0 1
58855: PUSH
58856: LD_INT 3
58858: MINUS
58859: PUSH
58860: LD_VAR 0 2
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: LIST
58872: PUSH
58873: LD_VAR 0 1
58877: PUSH
58878: LD_INT 4
58880: MINUS
58881: PUSH
58882: LD_VAR 0 2
58886: PUSH
58887: LD_INT 4
58889: MINUS
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: ST_TO_ADDR
// end ; 3 :
58906: GO 59328
58908: LD_INT 3
58910: DOUBLE
58911: EQUAL
58912: IFTRUE 58916
58914: GO 59049
58916: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58917: LD_ADDR_VAR 0 5
58921: PUSH
58922: LD_VAR 0 1
58926: PUSH
58927: LD_INT 3
58929: PLUS
58930: PUSH
58931: LD_VAR 0 2
58935: PUSH
58936: LD_INT 4
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: LIST
58943: PUSH
58944: LD_VAR 0 1
58948: PUSH
58949: LD_INT 4
58951: PLUS
58952: PUSH
58953: LD_VAR 0 2
58957: PUSH
58958: LD_INT 4
58960: PLUS
58961: PUSH
58962: LD_INT 5
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: LIST
58969: PUSH
58970: LD_VAR 0 1
58974: PUSH
58975: LD_INT 4
58977: MINUS
58978: PUSH
58979: LD_VAR 0 2
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: PUSH
58992: LD_VAR 0 1
58996: PUSH
58997: LD_VAR 0 2
59001: PUSH
59002: LD_INT 4
59004: MINUS
59005: PUSH
59006: LD_INT 3
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: LIST
59013: PUSH
59014: LD_VAR 0 1
59018: PUSH
59019: LD_INT 3
59021: MINUS
59022: PUSH
59023: LD_VAR 0 2
59027: PUSH
59028: LD_INT 3
59030: MINUS
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: LIST
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: ST_TO_ADDR
// end ; 4 :
59047: GO 59328
59049: LD_INT 4
59051: DOUBLE
59052: EQUAL
59053: IFTRUE 59057
59055: GO 59190
59057: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59058: LD_ADDR_VAR 0 5
59062: PUSH
59063: LD_VAR 0 1
59067: PUSH
59068: LD_VAR 0 2
59072: PUSH
59073: LD_INT 4
59075: PLUS
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: LIST
59084: PUSH
59085: LD_VAR 0 1
59089: PUSH
59090: LD_INT 3
59092: PLUS
59093: PUSH
59094: LD_VAR 0 2
59098: PUSH
59099: LD_INT 3
59101: PLUS
59102: PUSH
59103: LD_INT 5
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: LIST
59110: PUSH
59111: LD_VAR 0 1
59115: PUSH
59116: LD_INT 4
59118: PLUS
59119: PUSH
59120: LD_VAR 0 2
59124: PUSH
59125: LD_INT 4
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: LIST
59132: PUSH
59133: LD_VAR 0 1
59137: PUSH
59138: LD_VAR 0 2
59142: PUSH
59143: LD_INT 3
59145: MINUS
59146: PUSH
59147: LD_INT 3
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: LIST
59154: PUSH
59155: LD_VAR 0 1
59159: PUSH
59160: LD_INT 4
59162: MINUS
59163: PUSH
59164: LD_VAR 0 2
59168: PUSH
59169: LD_INT 4
59171: MINUS
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: LIST
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: ST_TO_ADDR
// end ; 5 :
59188: GO 59328
59190: LD_INT 5
59192: DOUBLE
59193: EQUAL
59194: IFTRUE 59198
59196: GO 59327
59198: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59199: LD_ADDR_VAR 0 5
59203: PUSH
59204: LD_VAR 0 1
59208: PUSH
59209: LD_INT 4
59211: MINUS
59212: PUSH
59213: LD_VAR 0 2
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: LIST
59225: PUSH
59226: LD_VAR 0 1
59230: PUSH
59231: LD_VAR 0 2
59235: PUSH
59236: LD_INT 4
59238: MINUS
59239: PUSH
59240: LD_INT 3
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: PUSH
59248: LD_VAR 0 1
59252: PUSH
59253: LD_INT 4
59255: PLUS
59256: PUSH
59257: LD_VAR 0 2
59261: PUSH
59262: LD_INT 4
59264: PLUS
59265: PUSH
59266: LD_INT 5
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: LIST
59273: PUSH
59274: LD_VAR 0 1
59278: PUSH
59279: LD_INT 3
59281: PLUS
59282: PUSH
59283: LD_VAR 0 2
59287: PUSH
59288: LD_INT 4
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: LIST
59295: PUSH
59296: LD_VAR 0 1
59300: PUSH
59301: LD_VAR 0 2
59305: PUSH
59306: LD_INT 3
59308: PLUS
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: LIST
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: ST_TO_ADDR
// end ; end ;
59325: GO 59328
59327: POP
// result := list ;
59328: LD_ADDR_VAR 0 4
59332: PUSH
59333: LD_VAR 0 5
59337: ST_TO_ADDR
// end ;
59338: LD_VAR 0 4
59342: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59343: LD_INT 0
59345: PPUSH
59346: PPUSH
59347: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59348: LD_VAR 0 1
59352: NOT
59353: PUSH
59354: LD_VAR 0 2
59358: PUSH
59359: LD_INT 1
59361: PUSH
59362: LD_INT 2
59364: PUSH
59365: LD_INT 3
59367: PUSH
59368: LD_INT 4
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: IN
59377: NOT
59378: OR
59379: IFFALSE 59383
// exit ;
59381: GO 59475
// tmp := [ ] ;
59383: LD_ADDR_VAR 0 5
59387: PUSH
59388: EMPTY
59389: ST_TO_ADDR
// for i in units do
59390: LD_ADDR_VAR 0 4
59394: PUSH
59395: LD_VAR 0 1
59399: PUSH
59400: FOR_IN
59401: IFFALSE 59444
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59403: LD_ADDR_VAR 0 5
59407: PUSH
59408: LD_VAR 0 5
59412: PPUSH
59413: LD_VAR 0 5
59417: PUSH
59418: LD_INT 1
59420: PLUS
59421: PPUSH
59422: LD_VAR 0 4
59426: PPUSH
59427: LD_VAR 0 2
59431: PPUSH
59432: CALL_OW 259
59436: PPUSH
59437: CALL_OW 2
59441: ST_TO_ADDR
59442: GO 59400
59444: POP
59445: POP
// if not tmp then
59446: LD_VAR 0 5
59450: NOT
59451: IFFALSE 59455
// exit ;
59453: GO 59475
// result := SortListByListDesc ( units , tmp ) ;
59455: LD_ADDR_VAR 0 3
59459: PUSH
59460: LD_VAR 0 1
59464: PPUSH
59465: LD_VAR 0 5
59469: PPUSH
59470: CALL_OW 77
59474: ST_TO_ADDR
// end ;
59475: LD_VAR 0 3
59479: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59480: LD_INT 0
59482: PPUSH
59483: PPUSH
59484: PPUSH
// result := false ;
59485: LD_ADDR_VAR 0 3
59489: PUSH
59490: LD_INT 0
59492: ST_TO_ADDR
// x := GetX ( building ) ;
59493: LD_ADDR_VAR 0 4
59497: PUSH
59498: LD_VAR 0 2
59502: PPUSH
59503: CALL_OW 250
59507: ST_TO_ADDR
// y := GetY ( building ) ;
59508: LD_ADDR_VAR 0 5
59512: PUSH
59513: LD_VAR 0 2
59517: PPUSH
59518: CALL_OW 251
59522: ST_TO_ADDR
// if not building or not x or not y then
59523: LD_VAR 0 2
59527: NOT
59528: PUSH
59529: LD_VAR 0 4
59533: NOT
59534: OR
59535: PUSH
59536: LD_VAR 0 5
59540: NOT
59541: OR
59542: IFFALSE 59546
// exit ;
59544: GO 59638
// if GetTaskList ( unit ) then
59546: LD_VAR 0 1
59550: PPUSH
59551: CALL_OW 437
59555: IFFALSE 59638
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59557: LD_STRING e
59559: PUSH
59560: LD_VAR 0 1
59564: PPUSH
59565: CALL_OW 437
59569: PUSH
59570: LD_INT 1
59572: ARRAY
59573: PUSH
59574: LD_INT 1
59576: ARRAY
59577: EQUAL
59578: PUSH
59579: LD_VAR 0 4
59583: PUSH
59584: LD_VAR 0 1
59588: PPUSH
59589: CALL_OW 437
59593: PUSH
59594: LD_INT 1
59596: ARRAY
59597: PUSH
59598: LD_INT 2
59600: ARRAY
59601: EQUAL
59602: AND
59603: PUSH
59604: LD_VAR 0 5
59608: PUSH
59609: LD_VAR 0 1
59613: PPUSH
59614: CALL_OW 437
59618: PUSH
59619: LD_INT 1
59621: ARRAY
59622: PUSH
59623: LD_INT 3
59625: ARRAY
59626: EQUAL
59627: AND
59628: IFFALSE 59638
// result := true end ;
59630: LD_ADDR_VAR 0 3
59634: PUSH
59635: LD_INT 1
59637: ST_TO_ADDR
// end ;
59638: LD_VAR 0 3
59642: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59643: LD_INT 0
59645: PPUSH
// result := false ;
59646: LD_ADDR_VAR 0 4
59650: PUSH
59651: LD_INT 0
59653: ST_TO_ADDR
// if GetTaskList ( unit ) then
59654: LD_VAR 0 1
59658: PPUSH
59659: CALL_OW 437
59663: IFFALSE 59746
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59665: LD_STRING M
59667: PUSH
59668: LD_VAR 0 1
59672: PPUSH
59673: CALL_OW 437
59677: PUSH
59678: LD_INT 1
59680: ARRAY
59681: PUSH
59682: LD_INT 1
59684: ARRAY
59685: EQUAL
59686: PUSH
59687: LD_VAR 0 2
59691: PUSH
59692: LD_VAR 0 1
59696: PPUSH
59697: CALL_OW 437
59701: PUSH
59702: LD_INT 1
59704: ARRAY
59705: PUSH
59706: LD_INT 2
59708: ARRAY
59709: EQUAL
59710: AND
59711: PUSH
59712: LD_VAR 0 3
59716: PUSH
59717: LD_VAR 0 1
59721: PPUSH
59722: CALL_OW 437
59726: PUSH
59727: LD_INT 1
59729: ARRAY
59730: PUSH
59731: LD_INT 3
59733: ARRAY
59734: EQUAL
59735: AND
59736: IFFALSE 59746
// result := true ;
59738: LD_ADDR_VAR 0 4
59742: PUSH
59743: LD_INT 1
59745: ST_TO_ADDR
// end ; end ;
59746: LD_VAR 0 4
59750: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59751: LD_INT 0
59753: PPUSH
59754: PPUSH
59755: PPUSH
59756: PPUSH
// if not unit or not area then
59757: LD_VAR 0 1
59761: NOT
59762: PUSH
59763: LD_VAR 0 2
59767: NOT
59768: OR
59769: IFFALSE 59773
// exit ;
59771: GO 59937
// tmp := AreaToList ( area , i ) ;
59773: LD_ADDR_VAR 0 6
59777: PUSH
59778: LD_VAR 0 2
59782: PPUSH
59783: LD_VAR 0 5
59787: PPUSH
59788: CALL_OW 517
59792: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59793: LD_ADDR_VAR 0 5
59797: PUSH
59798: DOUBLE
59799: LD_INT 1
59801: DEC
59802: ST_TO_ADDR
59803: LD_VAR 0 6
59807: PUSH
59808: LD_INT 1
59810: ARRAY
59811: PUSH
59812: FOR_TO
59813: IFFALSE 59935
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59815: LD_ADDR_VAR 0 7
59819: PUSH
59820: LD_VAR 0 6
59824: PUSH
59825: LD_INT 1
59827: ARRAY
59828: PUSH
59829: LD_VAR 0 5
59833: ARRAY
59834: PUSH
59835: LD_VAR 0 6
59839: PUSH
59840: LD_INT 2
59842: ARRAY
59843: PUSH
59844: LD_VAR 0 5
59848: ARRAY
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59854: LD_VAR 0 7
59858: PUSH
59859: LD_INT 1
59861: ARRAY
59862: PPUSH
59863: LD_VAR 0 7
59867: PUSH
59868: LD_INT 2
59870: ARRAY
59871: PPUSH
59872: CALL_OW 428
59876: PUSH
59877: LD_INT 0
59879: EQUAL
59880: IFFALSE 59933
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59882: LD_VAR 0 1
59886: PPUSH
59887: LD_VAR 0 7
59891: PUSH
59892: LD_INT 1
59894: ARRAY
59895: PPUSH
59896: LD_VAR 0 7
59900: PUSH
59901: LD_INT 2
59903: ARRAY
59904: PPUSH
59905: LD_VAR 0 3
59909: PPUSH
59910: CALL_OW 48
// result := IsPlaced ( unit ) ;
59914: LD_ADDR_VAR 0 4
59918: PUSH
59919: LD_VAR 0 1
59923: PPUSH
59924: CALL_OW 305
59928: ST_TO_ADDR
// exit ;
59929: POP
59930: POP
59931: GO 59937
// end ; end ;
59933: GO 59812
59935: POP
59936: POP
// end ;
59937: LD_VAR 0 4
59941: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59942: LD_INT 0
59944: PPUSH
59945: PPUSH
59946: PPUSH
// if not side or side > 8 then
59947: LD_VAR 0 1
59951: NOT
59952: PUSH
59953: LD_VAR 0 1
59957: PUSH
59958: LD_INT 8
59960: GREATER
59961: OR
59962: IFFALSE 59966
// exit ;
59964: GO 60153
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59966: LD_ADDR_VAR 0 4
59970: PUSH
59971: LD_INT 22
59973: PUSH
59974: LD_VAR 0 1
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 21
59985: PUSH
59986: LD_INT 3
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PPUSH
59997: CALL_OW 69
60001: ST_TO_ADDR
// if not tmp then
60002: LD_VAR 0 4
60006: NOT
60007: IFFALSE 60011
// exit ;
60009: GO 60153
// enable_addtolog := true ;
60011: LD_ADDR_OWVAR 81
60015: PUSH
60016: LD_INT 1
60018: ST_TO_ADDR
// AddToLog ( [ ) ;
60019: LD_STRING [
60021: PPUSH
60022: CALL_OW 561
// for i in tmp do
60026: LD_ADDR_VAR 0 3
60030: PUSH
60031: LD_VAR 0 4
60035: PUSH
60036: FOR_IN
60037: IFFALSE 60144
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60039: LD_STRING [
60041: PUSH
60042: LD_VAR 0 3
60046: PPUSH
60047: CALL_OW 266
60051: STR
60052: PUSH
60053: LD_STRING , 
60055: STR
60056: PUSH
60057: LD_VAR 0 3
60061: PPUSH
60062: CALL_OW 250
60066: STR
60067: PUSH
60068: LD_STRING , 
60070: STR
60071: PUSH
60072: LD_VAR 0 3
60076: PPUSH
60077: CALL_OW 251
60081: STR
60082: PUSH
60083: LD_STRING , 
60085: STR
60086: PUSH
60087: LD_VAR 0 3
60091: PPUSH
60092: CALL_OW 254
60096: STR
60097: PUSH
60098: LD_STRING , 
60100: STR
60101: PUSH
60102: LD_VAR 0 3
60106: PPUSH
60107: LD_INT 1
60109: PPUSH
60110: CALL_OW 268
60114: STR
60115: PUSH
60116: LD_STRING , 
60118: STR
60119: PUSH
60120: LD_VAR 0 3
60124: PPUSH
60125: LD_INT 2
60127: PPUSH
60128: CALL_OW 268
60132: STR
60133: PUSH
60134: LD_STRING ],
60136: STR
60137: PPUSH
60138: CALL_OW 561
// end ;
60142: GO 60036
60144: POP
60145: POP
// AddToLog ( ]; ) ;
60146: LD_STRING ];
60148: PPUSH
60149: CALL_OW 561
// end ;
60153: LD_VAR 0 2
60157: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60158: LD_INT 0
60160: PPUSH
60161: PPUSH
60162: PPUSH
60163: PPUSH
60164: PPUSH
// if not area or not rate or not max then
60165: LD_VAR 0 1
60169: NOT
60170: PUSH
60171: LD_VAR 0 2
60175: NOT
60176: OR
60177: PUSH
60178: LD_VAR 0 4
60182: NOT
60183: OR
60184: IFFALSE 60188
// exit ;
60186: GO 60380
// while 1 do
60188: LD_INT 1
60190: IFFALSE 60380
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60192: LD_ADDR_VAR 0 9
60196: PUSH
60197: LD_VAR 0 1
60201: PPUSH
60202: LD_INT 1
60204: PPUSH
60205: CALL_OW 287
60209: PUSH
60210: LD_INT 10
60212: MUL
60213: ST_TO_ADDR
// r := rate / 10 ;
60214: LD_ADDR_VAR 0 7
60218: PUSH
60219: LD_VAR 0 2
60223: PUSH
60224: LD_INT 10
60226: DIVREAL
60227: ST_TO_ADDR
// time := 1 1$00 ;
60228: LD_ADDR_VAR 0 8
60232: PUSH
60233: LD_INT 2100
60235: ST_TO_ADDR
// if amount < min then
60236: LD_VAR 0 9
60240: PUSH
60241: LD_VAR 0 3
60245: LESS
60246: IFFALSE 60264
// r := r * 2 else
60248: LD_ADDR_VAR 0 7
60252: PUSH
60253: LD_VAR 0 7
60257: PUSH
60258: LD_INT 2
60260: MUL
60261: ST_TO_ADDR
60262: GO 60290
// if amount > max then
60264: LD_VAR 0 9
60268: PUSH
60269: LD_VAR 0 4
60273: GREATER
60274: IFFALSE 60290
// r := r / 2 ;
60276: LD_ADDR_VAR 0 7
60280: PUSH
60281: LD_VAR 0 7
60285: PUSH
60286: LD_INT 2
60288: DIVREAL
60289: ST_TO_ADDR
// time := time / r ;
60290: LD_ADDR_VAR 0 8
60294: PUSH
60295: LD_VAR 0 8
60299: PUSH
60300: LD_VAR 0 7
60304: DIVREAL
60305: ST_TO_ADDR
// if time < 0 then
60306: LD_VAR 0 8
60310: PUSH
60311: LD_INT 0
60313: LESS
60314: IFFALSE 60331
// time := time * - 1 ;
60316: LD_ADDR_VAR 0 8
60320: PUSH
60321: LD_VAR 0 8
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: MUL
60330: ST_TO_ADDR
// wait ( time ) ;
60331: LD_VAR 0 8
60335: PPUSH
60336: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60340: LD_INT 35
60342: PPUSH
60343: LD_INT 875
60345: PPUSH
60346: CALL_OW 12
60350: PPUSH
60351: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60355: LD_INT 1
60357: PPUSH
60358: LD_INT 5
60360: PPUSH
60361: CALL_OW 12
60365: PPUSH
60366: LD_VAR 0 1
60370: PPUSH
60371: LD_INT 1
60373: PPUSH
60374: CALL_OW 55
// end ;
60378: GO 60188
// end ;
60380: LD_VAR 0 5
60384: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60385: LD_INT 0
60387: PPUSH
60388: PPUSH
60389: PPUSH
60390: PPUSH
60391: PPUSH
60392: PPUSH
60393: PPUSH
60394: PPUSH
// if not turrets or not factories then
60395: LD_VAR 0 1
60399: NOT
60400: PUSH
60401: LD_VAR 0 2
60405: NOT
60406: OR
60407: IFFALSE 60411
// exit ;
60409: GO 60718
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60411: LD_ADDR_VAR 0 10
60415: PUSH
60416: LD_INT 5
60418: PUSH
60419: LD_INT 6
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 2
60428: PUSH
60429: LD_INT 4
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 3
60438: PUSH
60439: LD_INT 5
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 24
60453: PUSH
60454: LD_INT 25
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 23
60463: PUSH
60464: LD_INT 27
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 42
60477: PUSH
60478: LD_INT 43
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 44
60487: PUSH
60488: LD_INT 46
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 45
60497: PUSH
60498: LD_INT 47
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: LIST
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: LIST
60514: ST_TO_ADDR
// result := [ ] ;
60515: LD_ADDR_VAR 0 3
60519: PUSH
60520: EMPTY
60521: ST_TO_ADDR
// for i in turrets do
60522: LD_ADDR_VAR 0 4
60526: PUSH
60527: LD_VAR 0 1
60531: PUSH
60532: FOR_IN
60533: IFFALSE 60716
// begin nat := GetNation ( i ) ;
60535: LD_ADDR_VAR 0 7
60539: PUSH
60540: LD_VAR 0 4
60544: PPUSH
60545: CALL_OW 248
60549: ST_TO_ADDR
// weapon := 0 ;
60550: LD_ADDR_VAR 0 8
60554: PUSH
60555: LD_INT 0
60557: ST_TO_ADDR
// if not nat then
60558: LD_VAR 0 7
60562: NOT
60563: IFFALSE 60567
// continue ;
60565: GO 60532
// for j in list [ nat ] do
60567: LD_ADDR_VAR 0 5
60571: PUSH
60572: LD_VAR 0 10
60576: PUSH
60577: LD_VAR 0 7
60581: ARRAY
60582: PUSH
60583: FOR_IN
60584: IFFALSE 60625
// if GetBWeapon ( i ) = j [ 1 ] then
60586: LD_VAR 0 4
60590: PPUSH
60591: CALL_OW 269
60595: PUSH
60596: LD_VAR 0 5
60600: PUSH
60601: LD_INT 1
60603: ARRAY
60604: EQUAL
60605: IFFALSE 60623
// begin weapon := j [ 2 ] ;
60607: LD_ADDR_VAR 0 8
60611: PUSH
60612: LD_VAR 0 5
60616: PUSH
60617: LD_INT 2
60619: ARRAY
60620: ST_TO_ADDR
// break ;
60621: GO 60625
// end ;
60623: GO 60583
60625: POP
60626: POP
// if not weapon then
60627: LD_VAR 0 8
60631: NOT
60632: IFFALSE 60636
// continue ;
60634: GO 60532
// for k in factories do
60636: LD_ADDR_VAR 0 6
60640: PUSH
60641: LD_VAR 0 2
60645: PUSH
60646: FOR_IN
60647: IFFALSE 60712
// begin weapons := AvailableWeaponList ( k ) ;
60649: LD_ADDR_VAR 0 9
60653: PUSH
60654: LD_VAR 0 6
60658: PPUSH
60659: CALL_OW 478
60663: ST_TO_ADDR
// if not weapons then
60664: LD_VAR 0 9
60668: NOT
60669: IFFALSE 60673
// continue ;
60671: GO 60646
// if weapon in weapons then
60673: LD_VAR 0 8
60677: PUSH
60678: LD_VAR 0 9
60682: IN
60683: IFFALSE 60710
// begin result := [ i , weapon ] ;
60685: LD_ADDR_VAR 0 3
60689: PUSH
60690: LD_VAR 0 4
60694: PUSH
60695: LD_VAR 0 8
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: ST_TO_ADDR
// exit ;
60704: POP
60705: POP
60706: POP
60707: POP
60708: GO 60718
// end ; end ;
60710: GO 60646
60712: POP
60713: POP
// end ;
60714: GO 60532
60716: POP
60717: POP
// end ;
60718: LD_VAR 0 3
60722: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60723: LD_INT 0
60725: PPUSH
// if not side or side > 8 then
60726: LD_VAR 0 3
60730: NOT
60731: PUSH
60732: LD_VAR 0 3
60736: PUSH
60737: LD_INT 8
60739: GREATER
60740: OR
60741: IFFALSE 60745
// exit ;
60743: GO 60804
// if not range then
60745: LD_VAR 0 4
60749: NOT
60750: IFFALSE 60761
// range := - 12 ;
60752: LD_ADDR_VAR 0 4
60756: PUSH
60757: LD_INT 12
60759: NEG
60760: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60761: LD_VAR 0 1
60765: PPUSH
60766: LD_VAR 0 2
60770: PPUSH
60771: LD_VAR 0 3
60775: PPUSH
60776: LD_VAR 0 4
60780: PPUSH
60781: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60785: LD_VAR 0 1
60789: PPUSH
60790: LD_VAR 0 2
60794: PPUSH
60795: LD_VAR 0 3
60799: PPUSH
60800: CALL_OW 331
// end ;
60804: LD_VAR 0 5
60808: RET
// export function Video ( mode ) ; begin
60809: LD_INT 0
60811: PPUSH
// ingame_video = mode ;
60812: LD_ADDR_OWVAR 52
60816: PUSH
60817: LD_VAR 0 1
60821: ST_TO_ADDR
// interface_hidden = mode ;
60822: LD_ADDR_OWVAR 54
60826: PUSH
60827: LD_VAR 0 1
60831: ST_TO_ADDR
// end ;
60832: LD_VAR 0 2
60836: RET
// export function Join ( array , element ) ; begin
60837: LD_INT 0
60839: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60840: LD_ADDR_VAR 0 3
60844: PUSH
60845: LD_VAR 0 1
60849: PPUSH
60850: LD_VAR 0 1
60854: PUSH
60855: LD_INT 1
60857: PLUS
60858: PPUSH
60859: LD_VAR 0 2
60863: PPUSH
60864: CALL_OW 1
60868: ST_TO_ADDR
// end ;
60869: LD_VAR 0 3
60873: RET
// export function JoinUnion ( array , element ) ; begin
60874: LD_INT 0
60876: PPUSH
// result := array union element ;
60877: LD_ADDR_VAR 0 3
60881: PUSH
60882: LD_VAR 0 1
60886: PUSH
60887: LD_VAR 0 2
60891: UNION
60892: ST_TO_ADDR
// end ;
60893: LD_VAR 0 3
60897: RET
// export function GetBehemoths ( side ) ; begin
60898: LD_INT 0
60900: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60901: LD_ADDR_VAR 0 2
60905: PUSH
60906: LD_INT 22
60908: PUSH
60909: LD_VAR 0 1
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 31
60920: PUSH
60921: LD_INT 25
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PPUSH
60932: CALL_OW 69
60936: ST_TO_ADDR
// end ;
60937: LD_VAR 0 2
60941: RET
// export function Shuffle ( array ) ; var i , index ; begin
60942: LD_INT 0
60944: PPUSH
60945: PPUSH
60946: PPUSH
// result := [ ] ;
60947: LD_ADDR_VAR 0 2
60951: PUSH
60952: EMPTY
60953: ST_TO_ADDR
// if not array then
60954: LD_VAR 0 1
60958: NOT
60959: IFFALSE 60963
// exit ;
60961: GO 61062
// Randomize ;
60963: CALL_OW 10
// for i = array downto 1 do
60967: LD_ADDR_VAR 0 3
60971: PUSH
60972: DOUBLE
60973: LD_VAR 0 1
60977: INC
60978: ST_TO_ADDR
60979: LD_INT 1
60981: PUSH
60982: FOR_DOWNTO
60983: IFFALSE 61060
// begin index := rand ( 1 , array ) ;
60985: LD_ADDR_VAR 0 4
60989: PUSH
60990: LD_INT 1
60992: PPUSH
60993: LD_VAR 0 1
60997: PPUSH
60998: CALL_OW 12
61002: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61003: LD_ADDR_VAR 0 2
61007: PUSH
61008: LD_VAR 0 2
61012: PPUSH
61013: LD_VAR 0 2
61017: PUSH
61018: LD_INT 1
61020: PLUS
61021: PPUSH
61022: LD_VAR 0 1
61026: PUSH
61027: LD_VAR 0 4
61031: ARRAY
61032: PPUSH
61033: CALL_OW 2
61037: ST_TO_ADDR
// array := Delete ( array , index ) ;
61038: LD_ADDR_VAR 0 1
61042: PUSH
61043: LD_VAR 0 1
61047: PPUSH
61048: LD_VAR 0 4
61052: PPUSH
61053: CALL_OW 3
61057: ST_TO_ADDR
// end ;
61058: GO 60982
61060: POP
61061: POP
// end ;
61062: LD_VAR 0 2
61066: RET
// export function GetBaseMaterials ( base ) ; begin
61067: LD_INT 0
61069: PPUSH
// result := [ 0 , 0 , 0 ] ;
61070: LD_ADDR_VAR 0 2
61074: PUSH
61075: LD_INT 0
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: LIST
61088: ST_TO_ADDR
// if not base then
61089: LD_VAR 0 1
61093: NOT
61094: IFFALSE 61098
// exit ;
61096: GO 61147
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61098: LD_ADDR_VAR 0 2
61102: PUSH
61103: LD_VAR 0 1
61107: PPUSH
61108: LD_INT 1
61110: PPUSH
61111: CALL_OW 275
61115: PUSH
61116: LD_VAR 0 1
61120: PPUSH
61121: LD_INT 2
61123: PPUSH
61124: CALL_OW 275
61128: PUSH
61129: LD_VAR 0 1
61133: PPUSH
61134: LD_INT 3
61136: PPUSH
61137: CALL_OW 275
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: LIST
61146: ST_TO_ADDR
// end ;
61147: LD_VAR 0 2
61151: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61152: LD_INT 0
61154: PPUSH
61155: PPUSH
// result := array ;
61156: LD_ADDR_VAR 0 3
61160: PUSH
61161: LD_VAR 0 1
61165: ST_TO_ADDR
// if size > 0 then
61166: LD_VAR 0 2
61170: PUSH
61171: LD_INT 0
61173: GREATER
61174: IFFALSE 61220
// for i := array downto size do
61176: LD_ADDR_VAR 0 4
61180: PUSH
61181: DOUBLE
61182: LD_VAR 0 1
61186: INC
61187: ST_TO_ADDR
61188: LD_VAR 0 2
61192: PUSH
61193: FOR_DOWNTO
61194: IFFALSE 61218
// result := Delete ( result , result ) ;
61196: LD_ADDR_VAR 0 3
61200: PUSH
61201: LD_VAR 0 3
61205: PPUSH
61206: LD_VAR 0 3
61210: PPUSH
61211: CALL_OW 3
61215: ST_TO_ADDR
61216: GO 61193
61218: POP
61219: POP
// end ;
61220: LD_VAR 0 3
61224: RET
// export function ComExit ( unit ) ; var tmp ; begin
61225: LD_INT 0
61227: PPUSH
61228: PPUSH
// if not IsInUnit ( unit ) then
61229: LD_VAR 0 1
61233: PPUSH
61234: CALL_OW 310
61238: NOT
61239: IFFALSE 61243
// exit ;
61241: GO 61303
// tmp := IsInUnit ( unit ) ;
61243: LD_ADDR_VAR 0 3
61247: PUSH
61248: LD_VAR 0 1
61252: PPUSH
61253: CALL_OW 310
61257: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61258: LD_VAR 0 3
61262: PPUSH
61263: CALL_OW 247
61267: PUSH
61268: LD_INT 2
61270: EQUAL
61271: IFFALSE 61284
// ComExitVehicle ( unit ) else
61273: LD_VAR 0 1
61277: PPUSH
61278: CALL_OW 121
61282: GO 61293
// ComExitBuilding ( unit ) ;
61284: LD_VAR 0 1
61288: PPUSH
61289: CALL_OW 122
// result := tmp ;
61293: LD_ADDR_VAR 0 2
61297: PUSH
61298: LD_VAR 0 3
61302: ST_TO_ADDR
// end ;
61303: LD_VAR 0 2
61307: RET
// export function ComExitAll ( units ) ; var i ; begin
61308: LD_INT 0
61310: PPUSH
61311: PPUSH
// if not units then
61312: LD_VAR 0 1
61316: NOT
61317: IFFALSE 61321
// exit ;
61319: GO 61347
// for i in units do
61321: LD_ADDR_VAR 0 3
61325: PUSH
61326: LD_VAR 0 1
61330: PUSH
61331: FOR_IN
61332: IFFALSE 61345
// ComExit ( i ) ;
61334: LD_VAR 0 3
61338: PPUSH
61339: CALL 61225 0 1
61343: GO 61331
61345: POP
61346: POP
// end ;
61347: LD_VAR 0 2
61351: RET
// export function ResetHc ; begin
61352: LD_INT 0
61354: PPUSH
// InitHc ;
61355: CALL_OW 19
// hc_importance := 0 ;
61359: LD_ADDR_OWVAR 32
61363: PUSH
61364: LD_INT 0
61366: ST_TO_ADDR
// end ;
61367: LD_VAR 0 1
61371: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61372: LD_INT 0
61374: PPUSH
61375: PPUSH
61376: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61377: LD_ADDR_VAR 0 6
61381: PUSH
61382: LD_VAR 0 1
61386: PUSH
61387: LD_VAR 0 3
61391: PLUS
61392: PUSH
61393: LD_INT 2
61395: DIV
61396: ST_TO_ADDR
// if _x < 0 then
61397: LD_VAR 0 6
61401: PUSH
61402: LD_INT 0
61404: LESS
61405: IFFALSE 61422
// _x := _x * - 1 ;
61407: LD_ADDR_VAR 0 6
61411: PUSH
61412: LD_VAR 0 6
61416: PUSH
61417: LD_INT 1
61419: NEG
61420: MUL
61421: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61422: LD_ADDR_VAR 0 7
61426: PUSH
61427: LD_VAR 0 2
61431: PUSH
61432: LD_VAR 0 4
61436: PLUS
61437: PUSH
61438: LD_INT 2
61440: DIV
61441: ST_TO_ADDR
// if _y < 0 then
61442: LD_VAR 0 7
61446: PUSH
61447: LD_INT 0
61449: LESS
61450: IFFALSE 61467
// _y := _y * - 1 ;
61452: LD_ADDR_VAR 0 7
61456: PUSH
61457: LD_VAR 0 7
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: MUL
61466: ST_TO_ADDR
// result := [ _x , _y ] ;
61467: LD_ADDR_VAR 0 5
61471: PUSH
61472: LD_VAR 0 6
61476: PUSH
61477: LD_VAR 0 7
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: ST_TO_ADDR
// end ;
61486: LD_VAR 0 5
61490: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61491: LD_INT 0
61493: PPUSH
61494: PPUSH
61495: PPUSH
61496: PPUSH
// task := GetTaskList ( unit ) ;
61497: LD_ADDR_VAR 0 7
61501: PUSH
61502: LD_VAR 0 1
61506: PPUSH
61507: CALL_OW 437
61511: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61512: LD_VAR 0 7
61516: NOT
61517: PUSH
61518: LD_VAR 0 1
61522: PPUSH
61523: LD_VAR 0 2
61527: PPUSH
61528: CALL_OW 308
61532: NOT
61533: AND
61534: IFFALSE 61538
// exit ;
61536: GO 61656
// if IsInArea ( unit , area ) then
61538: LD_VAR 0 1
61542: PPUSH
61543: LD_VAR 0 2
61547: PPUSH
61548: CALL_OW 308
61552: IFFALSE 61570
// begin ComMoveToArea ( unit , goAway ) ;
61554: LD_VAR 0 1
61558: PPUSH
61559: LD_VAR 0 3
61563: PPUSH
61564: CALL_OW 113
// exit ;
61568: GO 61656
// end ; if task [ 1 ] [ 1 ] <> M then
61570: LD_VAR 0 7
61574: PUSH
61575: LD_INT 1
61577: ARRAY
61578: PUSH
61579: LD_INT 1
61581: ARRAY
61582: PUSH
61583: LD_STRING M
61585: NONEQUAL
61586: IFFALSE 61590
// exit ;
61588: GO 61656
// x := task [ 1 ] [ 2 ] ;
61590: LD_ADDR_VAR 0 5
61594: PUSH
61595: LD_VAR 0 7
61599: PUSH
61600: LD_INT 1
61602: ARRAY
61603: PUSH
61604: LD_INT 2
61606: ARRAY
61607: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61608: LD_ADDR_VAR 0 6
61612: PUSH
61613: LD_VAR 0 7
61617: PUSH
61618: LD_INT 1
61620: ARRAY
61621: PUSH
61622: LD_INT 3
61624: ARRAY
61625: ST_TO_ADDR
// if InArea ( x , y , area ) then
61626: LD_VAR 0 5
61630: PPUSH
61631: LD_VAR 0 6
61635: PPUSH
61636: LD_VAR 0 2
61640: PPUSH
61641: CALL_OW 309
61645: IFFALSE 61656
// ComStop ( unit ) ;
61647: LD_VAR 0 1
61651: PPUSH
61652: CALL_OW 141
// end ;
61656: LD_VAR 0 4
61660: RET
// export function Abs ( value ) ; begin
61661: LD_INT 0
61663: PPUSH
// result := value ;
61664: LD_ADDR_VAR 0 2
61668: PUSH
61669: LD_VAR 0 1
61673: ST_TO_ADDR
// if value < 0 then
61674: LD_VAR 0 1
61678: PUSH
61679: LD_INT 0
61681: LESS
61682: IFFALSE 61699
// result := value * - 1 ;
61684: LD_ADDR_VAR 0 2
61688: PUSH
61689: LD_VAR 0 1
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: MUL
61698: ST_TO_ADDR
// end ;
61699: LD_VAR 0 2
61703: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61704: LD_INT 0
61706: PPUSH
61707: PPUSH
61708: PPUSH
61709: PPUSH
61710: PPUSH
61711: PPUSH
61712: PPUSH
61713: PPUSH
// if not unit or not building then
61714: LD_VAR 0 1
61718: NOT
61719: PUSH
61720: LD_VAR 0 2
61724: NOT
61725: OR
61726: IFFALSE 61730
// exit ;
61728: GO 61956
// x := GetX ( building ) ;
61730: LD_ADDR_VAR 0 4
61734: PUSH
61735: LD_VAR 0 2
61739: PPUSH
61740: CALL_OW 250
61744: ST_TO_ADDR
// y := GetY ( building ) ;
61745: LD_ADDR_VAR 0 6
61749: PUSH
61750: LD_VAR 0 2
61754: PPUSH
61755: CALL_OW 251
61759: ST_TO_ADDR
// d := GetDir ( building ) ;
61760: LD_ADDR_VAR 0 8
61764: PUSH
61765: LD_VAR 0 2
61769: PPUSH
61770: CALL_OW 254
61774: ST_TO_ADDR
// r := 4 ;
61775: LD_ADDR_VAR 0 9
61779: PUSH
61780: LD_INT 4
61782: ST_TO_ADDR
// for i := 1 to 5 do
61783: LD_ADDR_VAR 0 10
61787: PUSH
61788: DOUBLE
61789: LD_INT 1
61791: DEC
61792: ST_TO_ADDR
61793: LD_INT 5
61795: PUSH
61796: FOR_TO
61797: IFFALSE 61954
// begin _x := ShiftX ( x , d , r + i ) ;
61799: LD_ADDR_VAR 0 5
61803: PUSH
61804: LD_VAR 0 4
61808: PPUSH
61809: LD_VAR 0 8
61813: PPUSH
61814: LD_VAR 0 9
61818: PUSH
61819: LD_VAR 0 10
61823: PLUS
61824: PPUSH
61825: CALL_OW 272
61829: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61830: LD_ADDR_VAR 0 7
61834: PUSH
61835: LD_VAR 0 6
61839: PPUSH
61840: LD_VAR 0 8
61844: PPUSH
61845: LD_VAR 0 9
61849: PUSH
61850: LD_VAR 0 10
61854: PLUS
61855: PPUSH
61856: CALL_OW 273
61860: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61861: LD_VAR 0 5
61865: PPUSH
61866: LD_VAR 0 7
61870: PPUSH
61871: CALL_OW 488
61875: PUSH
61876: LD_VAR 0 5
61880: PPUSH
61881: LD_VAR 0 7
61885: PPUSH
61886: CALL_OW 428
61890: PPUSH
61891: CALL_OW 247
61895: PUSH
61896: LD_INT 3
61898: PUSH
61899: LD_INT 2
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: IN
61906: NOT
61907: AND
61908: IFFALSE 61952
// begin ComMoveXY ( unit , _x , _y ) ;
61910: LD_VAR 0 1
61914: PPUSH
61915: LD_VAR 0 5
61919: PPUSH
61920: LD_VAR 0 7
61924: PPUSH
61925: CALL_OW 111
// result := [ _x , _y ] ;
61929: LD_ADDR_VAR 0 3
61933: PUSH
61934: LD_VAR 0 5
61938: PUSH
61939: LD_VAR 0 7
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: ST_TO_ADDR
// exit ;
61948: POP
61949: POP
61950: GO 61956
// end ; end ;
61952: GO 61796
61954: POP
61955: POP
// end ;
61956: LD_VAR 0 3
61960: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61961: LD_INT 0
61963: PPUSH
61964: PPUSH
61965: PPUSH
// result := 0 ;
61966: LD_ADDR_VAR 0 3
61970: PUSH
61971: LD_INT 0
61973: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61974: LD_VAR 0 1
61978: PUSH
61979: LD_INT 0
61981: LESS
61982: PUSH
61983: LD_VAR 0 1
61987: PUSH
61988: LD_INT 8
61990: GREATER
61991: OR
61992: PUSH
61993: LD_VAR 0 2
61997: PUSH
61998: LD_INT 0
62000: LESS
62001: OR
62002: PUSH
62003: LD_VAR 0 2
62007: PUSH
62008: LD_INT 8
62010: GREATER
62011: OR
62012: IFFALSE 62016
// exit ;
62014: GO 62091
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62016: LD_ADDR_VAR 0 4
62020: PUSH
62021: LD_INT 22
62023: PUSH
62024: LD_VAR 0 2
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PPUSH
62033: CALL_OW 69
62037: PUSH
62038: FOR_IN
62039: IFFALSE 62089
// begin un := UnitShoot ( i ) ;
62041: LD_ADDR_VAR 0 5
62045: PUSH
62046: LD_VAR 0 4
62050: PPUSH
62051: CALL_OW 504
62055: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62056: LD_VAR 0 5
62060: PPUSH
62061: CALL_OW 255
62065: PUSH
62066: LD_VAR 0 1
62070: EQUAL
62071: IFFALSE 62087
// begin result := un ;
62073: LD_ADDR_VAR 0 3
62077: PUSH
62078: LD_VAR 0 5
62082: ST_TO_ADDR
// exit ;
62083: POP
62084: POP
62085: GO 62091
// end ; end ;
62087: GO 62038
62089: POP
62090: POP
// end ;
62091: LD_VAR 0 3
62095: RET
// export function GetCargoBay ( units ) ; begin
62096: LD_INT 0
62098: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62099: LD_ADDR_VAR 0 2
62103: PUSH
62104: LD_VAR 0 1
62108: PPUSH
62109: LD_INT 2
62111: PUSH
62112: LD_INT 34
62114: PUSH
62115: LD_INT 12
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 34
62124: PUSH
62125: LD_INT 51
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 34
62134: PUSH
62135: LD_INT 32
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 34
62144: PUSH
62145: LD_EXP 25
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: PPUSH
62161: CALL_OW 72
62165: ST_TO_ADDR
// end ; end_of_file
62166: LD_VAR 0 2
62170: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
62171: LD_VAR 0 1
62175: PUSH
62176: LD_INT 200
62178: DOUBLE
62179: GREATEREQUAL
62180: IFFALSE 62188
62182: LD_INT 299
62184: DOUBLE
62185: LESSEQUAL
62186: IFTRUE 62190
62188: GO 62222
62190: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
62191: LD_VAR 0 1
62195: PPUSH
62196: LD_VAR 0 2
62200: PPUSH
62201: LD_VAR 0 3
62205: PPUSH
62206: LD_VAR 0 4
62210: PPUSH
62211: LD_VAR 0 5
62215: PPUSH
62216: CALL 20632 0 5
62220: GO 62299
62222: LD_INT 300
62224: DOUBLE
62225: GREATEREQUAL
62226: IFFALSE 62234
62228: LD_INT 399
62230: DOUBLE
62231: LESSEQUAL
62232: IFTRUE 62236
62234: GO 62298
62236: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
62237: LD_VAR 0 1
62241: PPUSH
62242: LD_VAR 0 2
62246: PPUSH
62247: LD_VAR 0 3
62251: PPUSH
62252: LD_VAR 0 4
62256: PPUSH
62257: LD_VAR 0 5
62261: PPUSH
62262: LD_VAR 0 6
62266: PPUSH
62267: LD_VAR 0 7
62271: PPUSH
62272: LD_VAR 0 8
62276: PPUSH
62277: LD_VAR 0 9
62281: PPUSH
62282: LD_VAR 0 10
62286: PPUSH
62287: LD_VAR 0 11
62291: PPUSH
62292: CALL 18520 0 11
62296: GO 62299
62298: POP
// end ;
62299: PPOPN 11
62301: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
62302: LD_VAR 0 1
62306: PPUSH
62307: LD_VAR 0 2
62311: PPUSH
62312: LD_VAR 0 3
62316: PPUSH
62317: LD_VAR 0 4
62321: PPUSH
62322: LD_VAR 0 5
62326: PPUSH
62327: CALL 20614 0 5
// end ; end_of_file
62331: PPOPN 5
62333: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
62334: LD_VAR 0 1
62338: PPUSH
62339: LD_VAR 0 2
62343: PPUSH
62344: LD_VAR 0 3
62348: PPUSH
62349: LD_VAR 0 4
62353: PPUSH
62354: LD_VAR 0 5
62358: PPUSH
62359: LD_VAR 0 6
62363: PPUSH
62364: CALL 7328 0 6
// end ;
62368: PPOPN 6
62370: END
