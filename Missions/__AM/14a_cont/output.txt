// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 61416 0 9
// PrepareAmerican ;
  46: CALL 4137 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 923 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 27405 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 27405 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 27405 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 451
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 413
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 411
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: PUSH
 366: LD_VAR 0 3
 370: PPUSH
 371: CALL_OW 258
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: AND
 380: PUSH
 381: LD_VAR 0 3
 385: PPUSH
 386: CALL_OW 248
 390: PUSH
 391: LD_INT 3
 393: EQUAL
 394: AND
 395: IFFALSE 409
// begin RuSci := i ;
 397: LD_ADDR_EXP 17
 401: PUSH
 402: LD_VAR 0 3
 406: ST_TO_ADDR
// break ;
 407: GO 411
// end ;
 409: GO 349
 411: POP
 412: POP
// end ; if not RuSci then
 413: LD_EXP 17
 417: NOT
 418: IFFALSE 451
// begin uc_nation := 3 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 3
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 4
 433: PPUSH
 434: LD_INT 10
 436: PPUSH
 437: CALL_OW 380
// RuSci := CreateHuman ;
 441: LD_ADDR_EXP 17
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 451: LD_ADDR_VAR 0 6
 455: PUSH
 456: LD_STRING 14a_JMMVeh
 458: PPUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 30
 489: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 490: LD_ADDR_VAR 0 7
 494: PUSH
 495: LD_STRING 14a_BurlakVeh
 497: PPUSH
 498: LD_INT 22
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 1
 506: PUSH
 507: LD_INT 51
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 30
 528: ST_TO_ADDR
// uc_direction := 4 ;
 529: LD_ADDR_OWVAR 24
 533: PUSH
 534: LD_INT 4
 536: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 6
 549: ARRAY
 550: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 551: LD_VAR 0 6
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_VAR 0 6
 564: PUSH
 565: LD_INT 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 6
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 6
 582: PUSH
 583: LD_INT 4
 585: ARRAY
 586: PPUSH
 587: LD_INT 60
 589: PPUSH
 590: LD_INT 80
 592: PPUSH
 593: CALL_OW 12
 597: PPUSH
 598: CALL 32245 0 5
// JMMVeh := CreateVehicle ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: CALL_OW 45
 611: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 63644 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 627: LD_VAR 0 6
 631: PUSH
 632: LD_INT 5
 634: ARRAY
 635: PUSH
 636: LD_INT 0
 638: NONEQUAL
 639: IFFALSE 659
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 6
 650: PUSH
 651: LD_INT 5
 653: ARRAY
 654: PPUSH
 655: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 659: LD_EXP 14
 663: PPUSH
 664: LD_VAR 0 4
 668: PPUSH
 669: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 673: LD_ADDR_OWVAR 21
 677: PUSH
 678: LD_VAR 0 7
 682: PUSH
 683: LD_INT 6
 685: ARRAY
 686: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 687: LD_VAR 0 7
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: PPUSH
 696: LD_VAR 0 7
 700: PUSH
 701: LD_INT 2
 703: ARRAY
 704: PPUSH
 705: LD_VAR 0 7
 709: PUSH
 710: LD_INT 3
 712: ARRAY
 713: PPUSH
 714: LD_VAR 0 7
 718: PUSH
 719: LD_INT 4
 721: ARRAY
 722: PPUSH
 723: LD_INT 60
 725: PPUSH
 726: LD_INT 80
 728: PPUSH
 729: CALL_OW 12
 733: PPUSH
 734: CALL 32245 0 5
// BurlakVeh := CreateVehicle ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 748: LD_VAR 0 5
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 63644 0 3
 763: NOT
 764: IFFALSE 784
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 766: LD_VAR 0 5
 770: PPUSH
 771: LD_INT 233
 773: PPUSH
 774: LD_INT 85
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 784: LD_VAR 0 7
 788: PUSH
 789: LD_INT 5
 791: ARRAY
 792: PUSH
 793: LD_INT 0
 795: NONEQUAL
 796: IFFALSE 816
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_VAR 0 7
 807: PUSH
 808: LD_INT 5
 810: ARRAY
 811: PPUSH
 812: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 816: LD_EXP 15
 820: PPUSH
 821: LD_VAR 0 5
 825: PPUSH
 826: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_INT 178
 837: PUSH
 838: LD_INT 91
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 137
 847: PUSH
 848: LD_INT 83
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 157
 857: PUSH
 858: LD_INT 75
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 162
 867: PUSH
 868: LD_INT 67
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 887: LD_INT 4
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 58
// end ; end_of_file
 918: LD_VAR 0 1
 922: RET
// export function Action ; begin
 923: LD_INT 0
 925: PPUSH
// InGameOn ;
 926: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 930: LD_INT 221
 932: PPUSH
 933: LD_INT 80
 935: PPUSH
 936: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 940: LD_EXP 14
 944: PUSH
 945: LD_EXP 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: LD_INT 217
 956: PPUSH
 957: LD_INT 79
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$7 ) ;
 964: LD_INT 245
 966: PPUSH
 967: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 971: LD_EXP 14
 975: PUSH
 976: LD_EXP 15
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 989: LD_EXP 15
 993: PPUSH
 994: LD_STRING D2-Bur-1
 996: PPUSH
 997: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1001: LD_EXP 14
1005: PPUSH
1006: LD_STRING D2-JMM-1
1008: PPUSH
1009: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1013: LD_INT 18
1015: PPUSH
1016: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1020: LD_EXP 15
1024: PPUSH
1025: LD_EXP 14
1029: PPUSH
1030: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1034: LD_EXP 15
1038: PPUSH
1039: LD_STRING D2-Bur-2
1041: PPUSH
1042: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1046: LD_EXP 15
1050: PPUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 2
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: PPUSH
1066: LD_EXP 15
1070: PPUSH
1071: CALL_OW 74
1075: PPUSH
1076: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1080: LD_EXP 14
1084: PPUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 2
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL_OW 69
1099: PPUSH
1100: LD_EXP 14
1104: PPUSH
1105: CALL_OW 74
1109: PPUSH
1110: CALL_OW 120
// wait ( 0 0$1 ) ;
1114: LD_INT 35
1116: PPUSH
1117: CALL_OW 67
// InGameOff ;
1121: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1125: LD_STRING MArtPickup
1127: PPUSH
1128: CALL_OW 337
// end ;
1132: LD_VAR 0 1
1136: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1137: LD_EXP 22
1141: PPUSH
1142: LD_INT 101
1144: PUSH
1145: LD_INT 7
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: PUSH
1157: LD_EXP 8
1161: NOT
1162: AND
1163: IFFALSE 1192
1165: GO 1167
1167: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING D3-Bur-1
1175: PPUSH
1176: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1180: LD_EXP 14
1184: PPUSH
1185: LD_STRING D3-JMM-1
1187: PPUSH
1188: CALL_OW 88
// end ;
1192: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1193: LD_INT 5
1195: PPUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 70
1210: IFFALSE 1545
1212: GO 1214
1214: DISABLE
// begin wait ( 0 0$3 ) ;
1215: LD_INT 105
1217: PPUSH
1218: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1222: LD_INT 139
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 7
1230: PPUSH
1231: LD_INT 20
1233: NEG
1234: PPUSH
1235: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1239: LD_INT 139
1241: PPUSH
1242: LD_INT 43
1244: PPUSH
1245: LD_INT 7
1247: PPUSH
1248: CALL_OW 331
// DialogueOn ;
1252: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1256: LD_EXP 14
1260: PPUSH
1261: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1265: LD_EXP 14
1269: PPUSH
1270: LD_STRING D3a-JMM-1
1272: PPUSH
1273: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1277: LD_EXP 15
1281: PPUSH
1282: LD_STRING D3a-Bur-1
1284: PPUSH
1285: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_STRING D3a-JMM-2
1296: PPUSH
1297: CALL_OW 88
// if Joan then
1301: LD_EXP 16
1305: IFFALSE 1321
// SayRadio ( Joan , D3a-Joan-2 ) else
1307: LD_EXP 16
1311: PPUSH
1312: LD_STRING D3a-Joan-2
1314: PPUSH
1315: CALL_OW 94
1319: GO 1333
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1321: LD_EXP 17
1325: PPUSH
1326: LD_STRING D3a-RSci1-2
1328: PPUSH
1329: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_STRING D3a-Huck-2
1340: PPUSH
1341: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_STRING D3a-Pow-2
1352: PPUSH
1353: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1357: LD_EXP 18
1361: PPUSH
1362: LD_STRING D3a-Huck-3
1364: PPUSH
1365: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1369: LD_EXP 19
1373: PPUSH
1374: LD_STRING D3a-Pow-3
1376: PPUSH
1377: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1381: LD_EXP 18
1385: PPUSH
1386: LD_STRING D3a-Huck-4
1388: PPUSH
1389: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1393: LD_EXP 14
1397: PPUSH
1398: LD_STRING D3a-JMM-4
1400: PPUSH
1401: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1405: LD_EXP 15
1409: PPUSH
1410: LD_STRING D3a-Bur-4
1412: PPUSH
1413: CALL_OW 88
// if Joan then
1417: LD_EXP 16
1421: IFFALSE 1437
// SayRadio ( Joan , D3a-Joan-4 ) else
1423: LD_EXP 16
1427: PPUSH
1428: LD_STRING D3a-Joan-4
1430: PPUSH
1431: CALL_OW 94
1435: GO 1449
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1437: LD_EXP 17
1441: PPUSH
1442: LD_STRING D3a-RSci1-4
1444: PPUSH
1445: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1449: LD_INT 133
1451: PPUSH
1452: LD_INT 43
1454: PPUSH
1455: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1459: LD_INT 10
1461: PPUSH
1462: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1466: LD_EXP 14
1470: PPUSH
1471: LD_STRING D3a-JMM-5
1473: PPUSH
1474: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1478: LD_EXP 15
1482: PPUSH
1483: LD_STRING D3a-Bur-5
1485: PPUSH
1486: CALL_OW 88
// DialogueOff ;
1490: CALL_OW 7
// seenBase := true ;
1494: LD_ADDR_EXP 8
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1502: LD_INT 525
1504: PUSH
1505: LD_INT 420
1507: PUSH
1508: LD_INT 315
1510: PUSH
1511: LD_INT 280
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PPUSH
1526: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1530: LD_EXP 21
1534: PPUSH
1535: LD_INT 142
1537: PPUSH
1538: LD_INT 52
1540: PPUSH
1541: CALL_OW 116
// end ;
1545: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1546: LD_EXP 8
1550: NOT
1551: PUSH
1552: LD_EXP 4
1556: NOT
1557: AND
1558: IFFALSE 1578
1560: GO 1562
1562: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1563: LD_EXP 21
1567: PPUSH
1568: LD_INT 142
1570: PPUSH
1571: LD_INT 52
1573: PPUSH
1574: CALL_OW 116
1578: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// contaminateTime := tick ;
1583: LD_ADDR_EXP 3
1587: PUSH
1588: LD_OWVAR 1
1592: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1593: LD_INT 175
1595: PPUSH
1596: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1600: LD_ADDR_VAR 0 5
1604: PUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 469
1612: ST_TO_ADDR
// if art then
1613: LD_VAR 0 5
1617: IFFALSE 1670
// if art [ 1 ] in [ 157 , 162 ] and art [ 2 ] in [ 75 , 67 ] then
1619: LD_VAR 0 5
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PUSH
1628: LD_INT 157
1630: PUSH
1631: LD_INT 162
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: IN
1638: PUSH
1639: LD_VAR 0 5
1643: PUSH
1644: LD_INT 2
1646: ARRAY
1647: PUSH
1648: LD_INT 75
1650: PUSH
1651: LD_INT 67
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: IN
1658: AND
1659: IFFALSE 1670
// begin YouLost ( Artefact ) ;
1661: LD_STRING Artefact
1663: PPUSH
1664: CALL_OW 104
// exit ;
1668: GO 1826
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1670: LD_EXP 14
1674: PPUSH
1675: CALL_OW 302
1679: PUSH
1680: LD_EXP 15
1684: PPUSH
1685: CALL_OW 302
1689: AND
1690: IFFALSE 1767
// begin DialogueOn ;
1692: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1696: LD_EXP 14
1700: PPUSH
1701: LD_STRING D6a-JMM-1
1703: PPUSH
1704: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1708: LD_EXP 15
1712: PPUSH
1713: LD_STRING D6a-Bur-1
1715: PPUSH
1716: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1720: LD_EXP 14
1724: PPUSH
1725: LD_STRING D6c-JMM-1
1727: PPUSH
1728: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1732: LD_EXP 15
1736: PPUSH
1737: LD_STRING D6c-Bur-1
1739: PPUSH
1740: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1744: LD_EXP 14
1748: PPUSH
1749: LD_STRING D6c-JMM-2
1751: PPUSH
1752: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1756: LD_STRING MBase
1758: PPUSH
1759: CALL_OW 337
// DialogueOff ;
1763: CALL_OW 7
// end ; bombExploded := true ;
1767: LD_ADDR_EXP 4
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1775: LD_INT 6300
1777: PUSH
1778: LD_INT 5250
1780: PUSH
1781: LD_INT 4200
1783: PUSH
1784: LD_INT 3500
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_OWVAR 67
1797: ARRAY
1798: PPUSH
1799: CALL_OW 67
// if IsOk ( JMM ) then
1803: LD_EXP 14
1807: PPUSH
1808: CALL_OW 302
1812: IFFALSE 1826
// Say ( JMM , D8-JMM-1 ) ;
1814: LD_EXP 14
1818: PPUSH
1819: LD_STRING D8-JMM-1
1821: PPUSH
1822: CALL_OW 88
// end ;
1826: LD_VAR 0 4
1830: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1831: LD_EXP 9
1835: PUSH
1836: LD_EXP 7
1840: NOT
1841: AND
1842: PUSH
1843: LD_EXP 4
1847: AND
1848: IFFALSE 1903
1850: GO 1852
1852: DISABLE
// begin enable ;
1853: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1854: LD_INT 9
1856: PPUSH
1857: LD_INT 22
1859: PUSH
1860: LD_INT 7
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: PPUSH
1867: CALL_OW 70
1871: IFFALSE 1889
// stevensTimer := stevensTimer - 0 0$30 else
1873: LD_ADDR_EXP 9
1877: PUSH
1878: LD_EXP 9
1882: PUSH
1883: LD_INT 1050
1885: MINUS
1886: ST_TO_ADDR
1887: GO 1903
// stevensTimer := stevensTimer - 0 0$1 ;
1889: LD_ADDR_EXP 9
1893: PUSH
1894: LD_EXP 9
1898: PUSH
1899: LD_INT 35
1901: MINUS
1902: ST_TO_ADDR
// end ;
1903: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1904: LD_EXP 9
1908: PUSH
1909: LD_INT 0
1911: LESSEQUAL
1912: PUSH
1913: LD_EXP 7
1917: NOT
1918: AND
1919: IFFALSE 2083
1921: GO 1923
1923: DISABLE
1924: LD_INT 0
1926: PPUSH
1927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1928: LD_ADDR_VAR 0 2
1932: PUSH
1933: LD_INT 22
1935: PUSH
1936: LD_INT 1
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 25
1945: PUSH
1946: LD_INT 4
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PPUSH
1957: CALL_OW 69
1961: ST_TO_ADDR
// for i in tmp do
1962: LD_ADDR_VAR 0 1
1966: PUSH
1967: LD_VAR 0 2
1971: PUSH
1972: FOR_IN
1973: IFFALSE 2026
// begin if IsInUnit ( i ) then
1975: LD_VAR 0 1
1979: PPUSH
1980: CALL_OW 310
1984: IFFALSE 1997
// ComExitBuilding ( i ) else
1986: LD_VAR 0 1
1990: PPUSH
1991: CALL_OW 122
1995: GO 2024
// if not HasTask ( i ) then
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 314
2006: NOT
2007: IFFALSE 2024
// ComMoveXY ( i , 29 , 56 ) ;
2009: LD_VAR 0 1
2013: PPUSH
2014: LD_INT 29
2016: PPUSH
2017: LD_INT 56
2019: PPUSH
2020: CALL_OW 111
// end ;
2024: GO 1972
2026: POP
2027: POP
// repeat wait ( 0 0$1 ) ;
2028: LD_INT 35
2030: PPUSH
2031: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2035: LD_INT 8
2037: PPUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 1
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 25
2050: PUSH
2051: LD_INT 4
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PPUSH
2062: CALL_OW 70
2066: IFFALSE 2028
// if planCaptured then
2068: LD_EXP 7
2072: IFFALSE 2076
// exit ;
2074: GO 2083
// YouLost ( Time ) ;
2076: LD_STRING Time
2078: PPUSH
2079: CALL_OW 104
// end ;
2083: PPOPN 2
2085: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2086: LD_INT 22
2088: PUSH
2089: LD_INT 7
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: PUSH
2096: LD_INT 92
2098: PUSH
2099: LD_INT 142
2101: PUSH
2102: LD_INT 52
2104: PUSH
2105: LD_INT 27
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: PPUSH
2118: CALL_OW 69
2122: PUSH
2123: LD_EXP 3
2127: PUSH
2128: LD_INT 6000
2130: PLUS
2131: PUSH
2132: LD_OWVAR 1
2136: GREATER
2137: AND
2138: PUSH
2139: LD_EXP 4
2143: AND
2144: IFFALSE 2199
2146: GO 2148
2148: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2149: LD_EXP 14
2153: PUSH
2154: LD_EXP 15
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: PPUSH
2163: CALL_OW 85
// DialogueOn ;
2167: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2171: LD_EXP 14
2175: PPUSH
2176: LD_STRING D6b-JMM-1
2178: PPUSH
2179: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2183: LD_EXP 15
2187: PPUSH
2188: LD_STRING D6b-Bur-1
2190: PPUSH
2191: CALL_OW 88
// DialogueOff ;
2195: CALL_OW 7
// end ;
2199: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2200: LD_EXP 15
2204: PPUSH
2205: LD_INT 142
2207: PPUSH
2208: LD_INT 52
2210: PPUSH
2211: CALL_OW 297
2215: PUSH
2216: LD_INT 25
2218: LESS
2219: PUSH
2220: LD_EXP 15
2224: PPUSH
2225: CALL_OW 310
2229: PPUSH
2230: LD_INT 142
2232: PPUSH
2233: LD_INT 52
2235: PPUSH
2236: CALL_OW 297
2240: PUSH
2241: LD_INT 25
2243: LESS
2244: OR
2245: PUSH
2246: LD_EXP 15
2250: PPUSH
2251: CALL_OW 256
2255: PUSH
2256: LD_INT 1000
2258: LESS
2259: AND
2260: PUSH
2261: LD_EXP 3
2265: PUSH
2266: LD_INT 6000
2268: PLUS
2269: PUSH
2270: LD_OWVAR 1
2274: GREATER
2275: AND
2276: PUSH
2277: LD_EXP 4
2281: AND
2282: IFFALSE 2315
2284: GO 2286
2286: DISABLE
// begin DialogueOn ;
2287: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2291: LD_EXP 15
2295: PPUSH
2296: LD_STRING D7-Bur-1
2298: PPUSH
2299: CALL_OW 88
// enteredContaminatedArea := true ;
2303: LD_ADDR_EXP 5
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// DialogueOff ;
2311: CALL_OW 7
// end ;
2315: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2316: LD_EXP 14
2320: PPUSH
2321: LD_INT 142
2323: PPUSH
2324: LD_INT 52
2326: PPUSH
2327: CALL_OW 297
2331: PUSH
2332: LD_INT 25
2334: LESS
2335: PUSH
2336: LD_EXP 14
2340: PPUSH
2341: CALL_OW 310
2345: PPUSH
2346: LD_INT 142
2348: PPUSH
2349: LD_INT 52
2351: PPUSH
2352: CALL_OW 297
2356: PUSH
2357: LD_INT 25
2359: LESS
2360: OR
2361: PUSH
2362: LD_EXP 14
2366: PPUSH
2367: CALL_OW 256
2371: PUSH
2372: LD_INT 1000
2374: LESS
2375: AND
2376: PUSH
2377: LD_EXP 3
2381: PUSH
2382: LD_INT 6000
2384: PLUS
2385: PUSH
2386: LD_OWVAR 1
2390: GREATER
2391: AND
2392: PUSH
2393: LD_EXP 4
2397: AND
2398: IFFALSE 2431
2400: GO 2402
2402: DISABLE
// begin DialogueOn ;
2403: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2407: LD_EXP 14
2411: PPUSH
2412: LD_STRING D7-JMM-1
2414: PPUSH
2415: CALL_OW 88
// enteredContaminatedArea := true ;
2419: LD_ADDR_EXP 5
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// DialogueOff ;
2427: CALL_OW 7
// end ;
2431: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2432: LD_EXP 6
2436: PUSH
2437: LD_EXP 14
2441: PPUSH
2442: CALL_OW 302
2446: AND
2447: PUSH
2448: LD_EXP 15
2452: PPUSH
2453: CALL_OW 302
2457: AND
2458: IFFALSE 2527
2460: GO 2462
2462: DISABLE
// begin DialogueOn ;
2463: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2467: LD_EXP 14
2471: PUSH
2472: LD_EXP 15
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: PPUSH
2481: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2485: LD_EXP 14
2489: PPUSH
2490: LD_STRING D4-JMM-1
2492: PPUSH
2493: CALL_OW 88
// if not bombExploded then
2497: LD_EXP 4
2501: NOT
2502: IFFALSE 2516
// Say ( Burlak , D4-Bur-1 ) ;
2504: LD_EXP 15
2508: PPUSH
2509: LD_STRING D4-Bur-1
2511: PPUSH
2512: CALL_OW 88
// DialogueOff ;
2516: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2520: LD_STRING MReturn
2522: PPUSH
2523: CALL_OW 337
// end ;
2527: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2528: LD_EXP 7
2532: NOT
2533: PUSH
2534: LD_INT 22
2536: PUSH
2537: LD_INT 7
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: PUSH
2544: LD_INT 91
2546: PUSH
2547: LD_INT 9
2549: PUSH
2550: LD_INT 6
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: LIST
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PPUSH
2562: CALL_OW 69
2566: AND
2567: IFFALSE 2644
2569: GO 2571
2571: DISABLE
// begin DialogueOn ;
2572: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2576: LD_INT 55
2578: PPUSH
2579: LD_INT 11
2581: PPUSH
2582: LD_INT 7
2584: PPUSH
2585: LD_INT 6
2587: NEG
2588: PPUSH
2589: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2593: LD_INT 55
2595: PPUSH
2596: LD_INT 11
2598: PPUSH
2599: LD_INT 7
2601: PPUSH
2602: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2606: LD_EXP 15
2610: PPUSH
2611: LD_STRING D9-Bur-1
2613: PPUSH
2614: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2618: LD_EXP 14
2622: PPUSH
2623: LD_STRING D9-JMM-1
2625: PPUSH
2626: CALL_OW 88
// DialogueOff ;
2630: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2634: LD_INT 9
2636: PPUSH
2637: LD_INT 7
2639: PPUSH
2640: CALL_OW 235
// end ;
2644: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2645: LD_INT 9
2647: PPUSH
2648: LD_INT 22
2650: PUSH
2651: LD_INT 7
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PPUSH
2658: CALL_OW 70
2662: IFFALSE 2698
2664: GO 2666
2666: DISABLE
// begin wait ( 0 0$07 ) ;
2667: LD_INT 245
2669: PPUSH
2670: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2674: LD_EXP 14
2678: PPUSH
2679: LD_STRING D10b-JMM-1
2681: PPUSH
2682: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2686: LD_EXP 15
2690: PPUSH
2691: LD_STRING D10b-Bur-1
2693: PPUSH
2694: CALL_OW 88
// end ;
2698: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2699: LD_EXP 9
2703: PUSH
2704: LD_INT 22
2706: PUSH
2707: LD_INT 1
2709: PUSH
2710: EMPTY
2711: LIST
2712: LIST
2713: PUSH
2714: LD_INT 25
2716: PUSH
2717: LD_INT 4
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 26
2726: PUSH
2727: LD_INT 1
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: LIST
2738: PPUSH
2739: CALL_OW 69
2743: AND
2744: PUSH
2745: LD_INT 5
2747: PPUSH
2748: CALL_OW 255
2752: PUSH
2753: LD_INT 7
2755: EQUAL
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 25
2769: PUSH
2770: LD_INT 1
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: PUSH
2786: LD_INT 0
2788: EQUAL
2789: OR
2790: AND
2791: IFFALSE 3380
2793: GO 2795
2795: DISABLE
2796: LD_INT 0
2798: PPUSH
// begin case Query ( QKill ) of 1 :
2799: LD_STRING QKill
2801: PPUSH
2802: CALL_OW 97
2806: PUSH
2807: LD_INT 1
2809: DOUBLE
2810: EQUAL
2811: IFTRUE 2815
2813: GO 3368
2815: POP
// begin DialogueOn ;
2816: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2820: LD_EXP 14
2824: PPUSH
2825: LD_STRING D10a-JMM-1
2827: PPUSH
2828: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2832: LD_EXP 15
2836: PPUSH
2837: LD_STRING D10a-Bur-1
2839: PPUSH
2840: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2844: LD_EXP 14
2848: PPUSH
2849: LD_STRING D10a-JMM-2
2851: PPUSH
2852: CALL_OW 88
// if IsOk ( Stevens ) then
2856: LD_EXP 18
2860: PPUSH
2861: CALL_OW 302
2865: IFFALSE 2881
// Say ( Stevens , D10a-Huck-2 ) else
2867: LD_EXP 18
2871: PPUSH
2872: LD_STRING D10a-Huck-2
2874: PPUSH
2875: CALL_OW 88
2879: GO 2932
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2881: LD_INT 22
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 25
2893: PUSH
2894: LD_INT 4
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: LD_INT 26
2903: PUSH
2904: LD_INT 1
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: LIST
2915: PPUSH
2916: CALL_OW 69
2920: PUSH
2921: LD_INT 1
2923: ARRAY
2924: PPUSH
2925: LD_STRING D10a-ASci1-3
2927: PPUSH
2928: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2932: LD_EXP 14
2936: PPUSH
2937: LD_STRING D10a-JMM-4
2939: PPUSH
2940: CALL_OW 88
// if IsOk ( Stevens ) then
2944: LD_EXP 18
2948: PPUSH
2949: CALL_OW 302
2953: IFFALSE 2967
// Say ( Stevens , D10a-Huck-3 ) ;
2955: LD_EXP 18
2959: PPUSH
2960: LD_STRING D10a-Huck-3
2962: PPUSH
2963: CALL_OW 88
// DialogueOff ;
2967: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2971: LD_INT 1
2973: PPUSH
2974: LD_INT 7
2976: PPUSH
2977: LD_INT 1
2979: PPUSH
2980: LD_INT 1
2982: PPUSH
2983: CALL_OW 80
// planCaptured := true ;
2987: LD_ADDR_EXP 7
2991: PUSH
2992: LD_INT 1
2994: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2995: LD_STRING MEnd
2997: PPUSH
2998: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
3002: LD_STRING ACH_DIPLOMACY
3004: PPUSH
3005: CALL_OW 543
// canEnd := true ;
3009: LD_ADDR_EXP 10
3013: PUSH
3014: LD_INT 1
3016: ST_TO_ADDR
// missionTime := tick ;
3017: LD_ADDR_EXP 11
3021: PUSH
3022: LD_OWVAR 1
3026: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3027: LD_INT 35
3029: PPUSH
3030: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3034: LD_INT 22
3036: PUSH
3037: LD_INT 1
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: LD_INT 3
3046: PUSH
3047: LD_INT 50
3049: PUSH
3050: EMPTY
3051: LIST
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PPUSH
3061: CALL_OW 69
3065: IFFALSE 3181
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3067: LD_ADDR_VAR 0 1
3071: PUSH
3072: LD_INT 22
3074: PUSH
3075: LD_INT 1
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 25
3084: PUSH
3085: LD_INT 4
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PPUSH
3096: CALL_OW 69
3100: PUSH
3101: FOR_IN
3102: IFFALSE 3179
// begin if IsInUnit ( i ) then
3104: LD_VAR 0 1
3108: PPUSH
3109: CALL_OW 310
3113: IFFALSE 3126
// ComExitBuilding ( i ) else
3115: LD_VAR 0 1
3119: PPUSH
3120: CALL_OW 122
3124: GO 3177
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3126: LD_VAR 0 1
3130: PPUSH
3131: LD_INT 22
3133: PUSH
3134: LD_INT 1
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: PUSH
3141: LD_INT 3
3143: PUSH
3144: LD_INT 50
3146: PUSH
3147: EMPTY
3148: LIST
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 69
3162: PPUSH
3163: LD_VAR 0 1
3167: PPUSH
3168: CALL_OW 74
3172: PPUSH
3173: CALL_OW 128
// end ;
3177: GO 3101
3179: POP
3180: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3181: LD_INT 22
3183: PUSH
3184: LD_INT 1
3186: PUSH
3187: EMPTY
3188: LIST
3189: LIST
3190: PUSH
3191: LD_INT 3
3193: PUSH
3194: LD_INT 50
3196: PUSH
3197: EMPTY
3198: LIST
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: PPUSH
3208: CALL_OW 69
3212: NOT
3213: IFFALSE 3027
// repeat wait ( 3 ) ;
3215: LD_INT 3
3217: PPUSH
3218: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3222: LD_ADDR_VAR 0 1
3226: PUSH
3227: LD_INT 22
3229: PUSH
3230: LD_INT 1
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: LD_INT 21
3239: PUSH
3240: LD_INT 1
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: PPUSH
3251: CALL_OW 69
3255: PUSH
3256: FOR_IN
3257: IFFALSE 3333
// begin if IsInArea ( i , stevensEscapeArea ) then
3259: LD_VAR 0 1
3263: PPUSH
3264: LD_INT 8
3266: PPUSH
3267: CALL_OW 308
3271: IFFALSE 3284
// begin RemoveUnit ( i ) ;
3273: LD_VAR 0 1
3277: PPUSH
3278: CALL_OW 64
// continue ;
3282: GO 3256
// end ; if IsInUnit ( i ) then
3284: LD_VAR 0 1
3288: PPUSH
3289: CALL_OW 310
3293: IFFALSE 3304
// ComExitBuilding ( i ) ;
3295: LD_VAR 0 1
3299: PPUSH
3300: CALL_OW 122
// if not HasTask ( i ) then
3304: LD_VAR 0 1
3308: PPUSH
3309: CALL_OW 314
3313: NOT
3314: IFFALSE 3331
// ComMoveXY ( i , 28 , 55 ) ;
3316: LD_VAR 0 1
3320: PPUSH
3321: LD_INT 28
3323: PPUSH
3324: LD_INT 55
3326: PPUSH
3327: CALL_OW 111
// end ;
3331: GO 3256
3333: POP
3334: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3335: LD_INT 22
3337: PUSH
3338: LD_INT 1
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PUSH
3345: LD_INT 21
3347: PUSH
3348: LD_INT 1
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 69
3363: NOT
3364: IFFALSE 3215
// end ; 2 :
3366: GO 3380
3368: LD_INT 2
3370: DOUBLE
3371: EQUAL
3372: IFTRUE 3376
3374: GO 3379
3376: POP
// ; end ;
3377: GO 3380
3379: POP
// end ;
3380: PPOPN 1
3382: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3383: LD_EXP 10
3387: IFFALSE 3744
3389: GO 3391
3391: DISABLE
3392: LD_INT 0
3394: PPUSH
3395: PPUSH
3396: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3397: LD_INT 10
3399: PPUSH
3400: LD_INT 1
3402: PPUSH
3403: CALL_OW 424
// if Difficulty < 2 then
3407: LD_OWVAR 67
3411: PUSH
3412: LD_INT 2
3414: LESS
3415: IFFALSE 3419
// exit ;
3417: GO 3744
// uc_side := 4 ;
3419: LD_ADDR_OWVAR 20
3423: PUSH
3424: LD_INT 4
3426: ST_TO_ADDR
// uc_nation := 1 ;
3427: LD_ADDR_OWVAR 21
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// InitHc ;
3435: CALL_OW 19
// tmp := [ ] ;
3439: LD_ADDR_VAR 0 3
3443: PUSH
3444: EMPTY
3445: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3446: LD_INT 0
3448: PPUSH
3449: LD_INT 5
3451: PPUSH
3452: LD_INT 10
3454: PPUSH
3455: CALL_OW 380
// un := CreateHuman ;
3459: LD_ADDR_VAR 0 1
3463: PUSH
3464: CALL_OW 44
3468: ST_TO_ADDR
// tmp := [ un ] ;
3469: LD_ADDR_VAR 0 3
3473: PUSH
3474: LD_VAR 0 1
3478: PUSH
3479: EMPTY
3480: LIST
3481: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3482: LD_VAR 0 1
3486: PPUSH
3487: LD_INT 226
3489: PPUSH
3490: LD_INT 86
3492: PPUSH
3493: LD_INT 0
3495: PPUSH
3496: CALL_OW 48
// ComHold ( un ) ;
3500: LD_VAR 0 1
3504: PPUSH
3505: CALL_OW 140
// for i = 1 to 3 do
3509: LD_ADDR_VAR 0 2
3513: PUSH
3514: DOUBLE
3515: LD_INT 1
3517: DEC
3518: ST_TO_ADDR
3519: LD_INT 3
3521: PUSH
3522: FOR_TO
3523: IFFALSE 3622
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3525: LD_INT 0
3527: PPUSH
3528: LD_INT 1
3530: PPUSH
3531: LD_INT 8
3533: PPUSH
3534: CALL_OW 380
// un := CreateHuman ;
3538: LD_ADDR_VAR 0 1
3542: PUSH
3543: CALL_OW 44
3547: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3548: LD_VAR 0 1
3552: PPUSH
3553: LD_INT 5
3555: PPUSH
3556: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3560: LD_VAR 0 1
3564: PPUSH
3565: LD_INT 215
3567: PUSH
3568: LD_INT 217
3570: PUSH
3571: LD_INT 219
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: LIST
3578: PUSH
3579: LD_VAR 0 2
3583: ARRAY
3584: PPUSH
3585: LD_INT 76
3587: PPUSH
3588: LD_INT 0
3590: PPUSH
3591: CALL_OW 48
// ComCrawl ( un ) ;
3595: LD_VAR 0 1
3599: PPUSH
3600: CALL_OW 137
// tmp := tmp ^ un ;
3604: LD_ADDR_VAR 0 3
3608: PUSH
3609: LD_VAR 0 3
3613: PUSH
3614: LD_VAR 0 1
3618: ADD
3619: ST_TO_ADDR
// end ;
3620: GO 3522
3622: POP
3623: POP
// repeat wait ( 0 0$1 ) ;
3624: LD_INT 35
3626: PPUSH
3627: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3631: LD_VAR 0 3
3635: PPUSH
3636: LD_INT 24
3638: PUSH
3639: LD_INT 1000
3641: PUSH
3642: EMPTY
3643: LIST
3644: LIST
3645: PPUSH
3646: CALL_OW 72
3650: NOT
3651: IFFALSE 3624
// for i in tmp do
3653: LD_ADDR_VAR 0 2
3657: PUSH
3658: LD_VAR 0 3
3662: PUSH
3663: FOR_IN
3664: IFFALSE 3742
// begin wait ( 0 0$1 ) ;
3666: LD_INT 35
3668: PPUSH
3669: CALL_OW 67
// if Crawls ( i ) then
3673: LD_VAR 0 2
3677: PPUSH
3678: CALL_OW 318
3682: IFFALSE 3695
// ComWalk ( i ) else
3684: LD_VAR 0 2
3688: PPUSH
3689: CALL_OW 138
3693: GO 3740
// if GetClass ( i ) = class_sniper then
3695: LD_VAR 0 2
3699: PPUSH
3700: CALL_OW 257
3704: PUSH
3705: LD_INT 5
3707: EQUAL
3708: IFFALSE 3726
// ComAttackSoporific ( i , JMM ) else
3710: LD_VAR 0 2
3714: PPUSH
3715: LD_EXP 14
3719: PPUSH
3720: CALL_OW 166
3724: GO 3740
// ComAttackUnit ( i , JMM ) ;
3726: LD_VAR 0 2
3730: PPUSH
3731: LD_EXP 14
3735: PPUSH
3736: CALL_OW 115
// end ;
3740: GO 3663
3742: POP
3743: POP
// end ;
3744: PPOPN 3
3746: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3747: LD_EXP 7
3751: NOT
3752: PUSH
3753: LD_INT 1
3755: PPUSH
3756: CALL_OW 301
3760: AND
3761: IFFALSE 3773
3763: GO 3765
3765: DISABLE
// YouLost ( Lab ) ;
3766: LD_STRING Lab
3768: PPUSH
3769: CALL_OW 104
3773: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ [ f_not , [ f_empty ] ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3774: LD_INT 10
3776: PPUSH
3777: LD_INT 22
3779: PUSH
3780: LD_INT 7
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: PPUSH
3787: CALL_OW 70
3791: PUSH
3792: LD_INT 2
3794: GREATEREQUAL
3795: PUSH
3796: LD_INT 10
3798: PPUSH
3799: LD_INT 3
3801: PUSH
3802: LD_INT 58
3804: PUSH
3805: EMPTY
3806: LIST
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PUSH
3812: LD_INT 2
3814: PUSH
3815: LD_INT 34
3817: PUSH
3818: LD_INT 12
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 34
3827: PUSH
3828: LD_INT 51
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: LIST
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PPUSH
3844: CALL_OW 70
3848: AND
3849: PUSH
3850: LD_EXP 10
3854: AND
3855: PUSH
3856: LD_EXP 7
3860: AND
3861: PUSH
3862: LD_EXP 6
3866: AND
3867: IFFALSE 4134
3869: GO 3871
3871: DISABLE
3872: LD_INT 0
3874: PPUSH
3875: PPUSH
// begin m1 := false ;
3876: LD_ADDR_VAR 0 1
3880: PUSH
3881: LD_INT 0
3883: ST_TO_ADDR
// m2 := false ;
3884: LD_ADDR_VAR 0 2
3888: PUSH
3889: LD_INT 0
3891: ST_TO_ADDR
// if killCounter = 0 then
3892: LD_EXP 12
3896: PUSH
3897: LD_INT 0
3899: EQUAL
3900: IFFALSE 3909
// SetAchievement ( ACH_PACIFIST ) ;
3902: LD_STRING ACH_PACIFIST
3904: PPUSH
3905: CALL_OW 543
// if tick < 7 7$00 then
3909: LD_OWVAR 1
3913: PUSH
3914: LD_INT 14700
3916: LESS
3917: IFFALSE 3933
// begin wait ( 3 ) ;
3919: LD_INT 3
3921: PPUSH
3922: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3926: LD_STRING ACH_ASPEED_18
3928: PPUSH
3929: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3933: LD_STRING Explosion
3935: PPUSH
3936: LD_INT 1
3938: PPUSH
3939: CALL_OW 101
// if enteredContaminatedArea then
3943: LD_EXP 5
3947: IFFALSE 3969
// begin m1 := true ;
3949: LD_ADDR_VAR 0 1
3953: PUSH
3954: LD_INT 1
3956: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3957: LD_STRING BioHazard
3959: PPUSH
3960: LD_INT 1
3962: PPUSH
3963: CALL_OW 101
// end else
3967: GO 3980
// AddMedal ( BioHazard , - 1 ) ;
3969: LD_STRING BioHazard
3971: PPUSH
3972: LD_INT 1
3974: NEG
3975: PPUSH
3976: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
3980: LD_EXP 11
3984: PUSH
3985: LD_INT 42000
3987: PUSH
3988: LD_INT 31500
3990: PUSH
3991: LD_INT 25200
3993: PUSH
3994: LD_INT 24150
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: PUSH
4003: LD_OWVAR 67
4007: ARRAY
4008: LESSEQUAL
4009: IFFALSE 4031
// begin m2 := true ;
4011: LD_ADDR_VAR 0 2
4015: PUSH
4016: LD_INT 1
4018: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
4019: LD_STRING Speed
4021: PPUSH
4022: LD_INT 1
4024: PPUSH
4025: CALL_OW 101
// end else
4029: GO 4042
// AddMedal ( Speed , - 1 ) ;
4031: LD_STRING Speed
4033: PPUSH
4034: LD_INT 1
4036: NEG
4037: PPUSH
4038: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4042: LD_OWVAR 67
4046: PUSH
4047: LD_INT 3
4049: GREATEREQUAL
4050: PUSH
4051: LD_VAR 0 1
4055: AND
4056: PUSH
4057: LD_VAR 0 2
4061: AND
4062: IFFALSE 4074
// SetAchievementEX ( ACH_AMER , 18 ) ;
4064: LD_STRING ACH_AMER
4066: PPUSH
4067: LD_INT 18
4069: PPUSH
4070: CALL_OW 564
// GiveMedals ( Main ) ;
4074: LD_STRING Main
4076: PPUSH
4077: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4081: LD_EXP 14
4085: PUSH
4086: LD_EXP 15
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PPUSH
4095: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4099: LD_EXP 14
4103: PPUSH
4104: LD_STRING 14a_JMM
4106: PPUSH
4107: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4111: LD_EXP 15
4115: PPUSH
4116: LD_STRING 14a_Burlak
4118: PPUSH
4119: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
4123: LD_STRING enableBioCharacter(BIO_HUGH)
4125: PPUSH
4126: CALL_OW 559
// YouWin ;
4130: CALL_OW 103
// end ; end_of_file
4134: PPOPN 2
4136: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4137: LD_INT 0
4139: PPUSH
4140: PPUSH
4141: PPUSH
4142: PPUSH
// uc_side := 1 ;
4143: LD_ADDR_OWVAR 20
4147: PUSH
4148: LD_INT 1
4150: ST_TO_ADDR
// uc_nation := 1 ;
4151: LD_ADDR_OWVAR 21
4155: PUSH
4156: LD_INT 1
4158: ST_TO_ADDR
// InitHc ;
4159: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 750 ) ;
4163: LD_INT 34
4165: PPUSH
4166: CALL_OW 274
4170: PPUSH
4171: LD_INT 1
4173: PPUSH
4174: LD_INT 750
4176: PPUSH
4177: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4181: LD_INT 34
4183: PPUSH
4184: CALL_OW 274
4188: PPUSH
4189: LD_INT 3
4191: PPUSH
4192: LD_INT 20
4194: PPUSH
4195: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4199: LD_ADDR_EXP 18
4203: PUSH
4204: LD_STRING Stevens
4206: PPUSH
4207: CALL_OW 25
4211: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4212: LD_ADDR_EXP 19
4216: PUSH
4217: LD_STRING Powell
4219: PPUSH
4220: CALL_OW 25
4224: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4225: LD_EXP 18
4229: PPUSH
4230: LD_INT 1
4232: PPUSH
4233: CALL_OW 52
// vehGuard := [ ] ;
4237: LD_ADDR_EXP 23
4241: PUSH
4242: EMPTY
4243: ST_TO_ADDR
// hc_importance := 0 ;
4244: LD_ADDR_OWVAR 32
4248: PUSH
4249: LD_INT 0
4251: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4252: LD_INT 4
4254: PPUSH
4255: LD_INT 3
4257: PPUSH
4258: LD_INT 3
4260: PPUSH
4261: LD_INT 8
4263: PPUSH
4264: LD_INT 100
4266: PPUSH
4267: CALL 32245 0 5
// sibBomb := CreateVehicle ;
4271: LD_ADDR_EXP 21
4275: PUSH
4276: CALL_OW 45
4280: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4281: LD_EXP 21
4285: PPUSH
4286: LD_INT 1
4288: PPUSH
4289: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4293: LD_EXP 21
4297: PPUSH
4298: LD_INT 93
4300: PPUSH
4301: LD_INT 74
4303: PPUSH
4304: LD_INT 0
4306: PPUSH
4307: CALL_OW 48
// guards := [ ] ;
4311: LD_ADDR_EXP 22
4315: PUSH
4316: EMPTY
4317: ST_TO_ADDR
// for i = 1 to 3 do
4318: LD_ADDR_VAR 0 2
4322: PUSH
4323: DOUBLE
4324: LD_INT 1
4326: DEC
4327: ST_TO_ADDR
4328: LD_INT 3
4330: PUSH
4331: FOR_TO
4332: IFFALSE 4428
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4334: LD_INT 0
4336: PPUSH
4337: LD_INT 1
4339: PPUSH
4340: LD_INT 8
4342: PUSH
4343: LD_INT 9
4345: PUSH
4346: LD_INT 10
4348: PUSH
4349: LD_INT 10
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: PUSH
4358: LD_OWVAR 67
4362: ARRAY
4363: PPUSH
4364: CALL_OW 380
// un := CreateHuman ;
4368: LD_ADDR_VAR 0 3
4372: PUSH
4373: CALL_OW 44
4377: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4378: LD_VAR 0 3
4382: PPUSH
4383: LD_INT 2
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: LD_INT 4
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: PUSH
4397: LD_VAR 0 2
4401: ARRAY
4402: PPUSH
4403: LD_INT 0
4405: PPUSH
4406: CALL_OW 49
// guards := guards ^ un ;
4410: LD_ADDR_EXP 22
4414: PUSH
4415: LD_EXP 22
4419: PUSH
4420: LD_VAR 0 3
4424: ADD
4425: ST_TO_ADDR
// end ;
4426: GO 4331
4428: POP
4429: POP
// baseGuards := [ ] ;
4430: LD_ADDR_EXP 20
4434: PUSH
4435: EMPTY
4436: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4437: LD_ADDR_VAR 0 2
4441: PUSH
4442: DOUBLE
4443: LD_INT 1
4445: DEC
4446: ST_TO_ADDR
4447: LD_INT 5
4449: PUSH
4450: LD_INT 6
4452: PUSH
4453: LD_INT 7
4455: PUSH
4456: LD_INT 8
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: PUSH
4465: LD_OWVAR 67
4469: ARRAY
4470: PUSH
4471: FOR_TO
4472: IFFALSE 4622
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4474: LD_INT 0
4476: PPUSH
4477: LD_INT 8
4479: PUSH
4480: LD_INT 9
4482: PUSH
4483: LD_INT 10
4485: PUSH
4486: LD_INT 10
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: PUSH
4495: LD_OWVAR 67
4499: ARRAY
4500: PPUSH
4501: CALL_OW 381
// un := CreateHuman ;
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: CALL_OW 44
4514: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4515: LD_ADDR_EXP 20
4519: PUSH
4520: LD_EXP 20
4524: PUSH
4525: LD_VAR 0 3
4529: ADD
4530: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4531: LD_ADDR_VAR 0 4
4535: PUSH
4536: LD_INT 22
4538: PUSH
4539: LD_INT 1
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PUSH
4546: LD_INT 58
4548: PUSH
4549: EMPTY
4550: LIST
4551: PUSH
4552: LD_INT 30
4554: PUSH
4555: LD_INT 32
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: PPUSH
4567: CALL_OW 69
4571: ST_TO_ADDR
// if tmp then
4572: LD_VAR 0 4
4576: IFFALSE 4608
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4578: LD_VAR 0 3
4582: PPUSH
4583: LD_VAR 0 4
4587: PUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_VAR 0 4
4595: PPUSH
4596: CALL_OW 12
4600: ARRAY
4601: PPUSH
4602: CALL_OW 52
4606: GO 4620
// PlaceHumanInUnit ( un , us_bar ) ;
4608: LD_VAR 0 3
4612: PPUSH
4613: LD_INT 51
4615: PPUSH
4616: CALL_OW 52
// end ;
4620: GO 4471
4622: POP
4623: POP
// if Difficulty > 1 then
4624: LD_OWVAR 67
4628: PUSH
4629: LD_INT 1
4631: GREATER
4632: IFFALSE 4680
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4634: LD_INT 0
4636: PPUSH
4637: LD_INT 5
4639: PPUSH
4640: LD_INT 9
4642: PUSH
4643: LD_INT 10
4645: PUSH
4646: LD_INT 10
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: LIST
4653: PUSH
4654: LD_OWVAR 67
4658: PUSH
4659: LD_INT 1
4661: MINUS
4662: ARRAY
4663: PPUSH
4664: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4668: CALL_OW 44
4672: PPUSH
4673: LD_INT 80
4675: PPUSH
4676: CALL_OW 52
// end ; for i = 1 to 3 do
4680: LD_ADDR_VAR 0 2
4684: PUSH
4685: DOUBLE
4686: LD_INT 1
4688: DEC
4689: ST_TO_ADDR
4690: LD_INT 3
4692: PUSH
4693: FOR_TO
4694: IFFALSE 4720
// begin PrepareMechanic ( false , 9 ) ;
4696: LD_INT 0
4698: PPUSH
4699: LD_INT 9
4701: PPUSH
4702: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4706: CALL_OW 44
4710: PPUSH
4711: LD_INT 43
4713: PPUSH
4714: CALL_OW 52
// end ;
4718: GO 4693
4720: POP
4721: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4722: CALL_OW 44
4726: PPUSH
4727: LD_INT 49
4729: PPUSH
4730: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4734: LD_ADDR_VAR 0 2
4738: PUSH
4739: DOUBLE
4740: LD_INT 1
4742: DEC
4743: ST_TO_ADDR
4744: LD_INT 1
4746: PUSH
4747: LD_OWVAR 67
4751: PLUS
4752: PUSH
4753: FOR_TO
4754: IFFALSE 4801
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4756: LD_INT 0
4758: PPUSH
4759: LD_INT 8
4761: PUSH
4762: LD_INT 9
4764: PUSH
4765: LD_INT 10
4767: PUSH
4768: LD_INT 10
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: PUSH
4777: LD_OWVAR 67
4781: ARRAY
4782: PPUSH
4783: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4787: CALL_OW 44
4791: PPUSH
4792: LD_INT 5
4794: PPUSH
4795: CALL_OW 52
// end ;
4799: GO 4753
4801: POP
4802: POP
// for i = 1 to 3 do
4803: LD_ADDR_VAR 0 2
4807: PUSH
4808: DOUBLE
4809: LD_INT 1
4811: DEC
4812: ST_TO_ADDR
4813: LD_INT 3
4815: PUSH
4816: FOR_TO
4817: IFFALSE 4843
// begin PrepareScientist ( false , 10 ) ;
4819: LD_INT 0
4821: PPUSH
4822: LD_INT 10
4824: PPUSH
4825: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4829: CALL_OW 44
4833: PPUSH
4834: LD_INT 1
4836: PPUSH
4837: CALL_OW 52
// end ;
4841: GO 4816
4843: POP
4844: POP
// end ;
4845: LD_VAR 0 1
4849: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4850: LD_EXP 22
4854: PUSH
4855: LD_EXP 2
4859: NOT
4860: AND
4861: IFFALSE 5047
4863: GO 4865
4865: DISABLE
4866: LD_INT 0
4868: PPUSH
4869: PPUSH
4870: PPUSH
// begin enable ;
4871: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4872: LD_ADDR_VAR 0 3
4876: PUSH
4877: LD_INT 204
4879: PUSH
4880: LD_INT 30
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: LD_INT 165
4889: PUSH
4890: LD_INT 24
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: PUSH
4897: LD_INT 195
4899: PUSH
4900: LD_INT 6
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PUSH
4907: LD_INT 223
4909: PUSH
4910: LD_INT 54
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: LD_INT 214
4919: PUSH
4920: LD_INT 84
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 206
4929: PUSH
4930: LD_INT 71
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: ST_TO_ADDR
// for i in guards do
4945: LD_ADDR_VAR 0 1
4949: PUSH
4950: LD_EXP 22
4954: PUSH
4955: FOR_IN
4956: IFFALSE 5045
// begin if HasTask ( i ) then
4958: LD_VAR 0 1
4962: PPUSH
4963: CALL_OW 314
4967: IFFALSE 4973
// continue else
4969: GO 4955
4971: GO 5043
// begin j := rand ( 1 , 6 ) ;
4973: LD_ADDR_VAR 0 2
4977: PUSH
4978: LD_INT 1
4980: PPUSH
4981: LD_INT 6
4983: PPUSH
4984: CALL_OW 12
4988: ST_TO_ADDR
// if not See ( 7 , i ) then
4989: LD_INT 7
4991: PPUSH
4992: LD_VAR 0 1
4996: PPUSH
4997: CALL_OW 292
5001: NOT
5002: IFFALSE 5043
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
5004: LD_VAR 0 1
5008: PPUSH
5009: LD_VAR 0 3
5013: PUSH
5014: LD_VAR 0 2
5018: ARRAY
5019: PUSH
5020: LD_INT 1
5022: ARRAY
5023: PPUSH
5024: LD_VAR 0 3
5028: PUSH
5029: LD_VAR 0 2
5033: ARRAY
5034: PUSH
5035: LD_INT 2
5037: ARRAY
5038: PPUSH
5039: CALL_OW 114
// end ; end ;
5043: GO 4955
5045: POP
5046: POP
// end ;
5047: PPOPN 3
5049: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5050: LD_EXP 23
5054: PUSH
5055: LD_EXP 7
5059: NOT
5060: AND
5061: IFFALSE 5143
5063: GO 5065
5065: DISABLE
5066: LD_INT 0
5068: PPUSH
// begin enable ;
5069: ENABLE
// for i in vehGuard do
5070: LD_ADDR_VAR 0 1
5074: PUSH
5075: LD_EXP 23
5079: PUSH
5080: FOR_IN
5081: IFFALSE 5141
// if IsOk ( i ) and IsControledBy ( i ) then
5083: LD_VAR 0 1
5087: PPUSH
5088: CALL_OW 302
5092: PUSH
5093: LD_VAR 0 1
5097: PPUSH
5098: CALL_OW 312
5102: AND
5103: IFFALSE 5139
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5105: LD_VAR 0 1
5109: PPUSH
5110: LD_INT 22
5112: PUSH
5113: LD_INT 7
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PPUSH
5120: CALL_OW 69
5124: PPUSH
5125: LD_VAR 0 1
5129: PPUSH
5130: CALL_OW 74
5134: PPUSH
5135: CALL_OW 115
5139: GO 5080
5141: POP
5142: POP
// end ;
5143: PPOPN 1
5145: END
// every 1 1$00 + 3 3$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured and Difficulty > 1 do
5146: LD_EXP 4
5150: PUSH
5151: LD_INT 43
5153: PPUSH
5154: CALL_OW 302
5158: AND
5159: PUSH
5160: LD_EXP 7
5164: NOT
5165: AND
5166: PUSH
5167: LD_OWVAR 67
5171: PUSH
5172: LD_INT 1
5174: GREATER
5175: AND
5176: IFFALSE 5241
5178: GO 5180
5180: DISABLE
// begin enable ;
5181: ENABLE
// if Count ( vehGuard ) < Difficulty then
5182: LD_EXP 23
5186: PPUSH
5187: CALL 29507 0 1
5191: PUSH
5192: LD_OWVAR 67
5196: LESS
5197: IFFALSE 5241
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5199: LD_INT 43
5201: PPUSH
5202: LD_INT 5
5204: PPUSH
5205: LD_INT 3
5207: PPUSH
5208: LD_INT 2
5210: PPUSH
5211: LD_INT 7
5213: PUSH
5214: LD_INT 7
5216: PUSH
5217: LD_INT 9
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: LIST
5224: PUSH
5225: LD_INT 1
5227: PPUSH
5228: LD_INT 3
5230: PPUSH
5231: CALL_OW 12
5235: ARRAY
5236: PPUSH
5237: CALL_OW 125
// end ;
5241: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5242: LD_INT 22
5244: PUSH
5245: LD_INT 1
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: LD_INT 25
5254: PUSH
5255: LD_INT 5
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: LD_INT 50
5264: PUSH
5265: EMPTY
5266: LIST
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: PPUSH
5273: CALL_OW 69
5277: PUSH
5278: LD_EXP 7
5282: NOT
5283: AND
5284: IFFALSE 5513
5286: GO 5288
5288: DISABLE
5289: LD_INT 0
5291: PPUSH
5292: PPUSH
// begin enable ;
5293: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5294: LD_ADDR_VAR 0 1
5298: PUSH
5299: LD_INT 22
5301: PUSH
5302: LD_INT 1
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 25
5311: PUSH
5312: LD_INT 5
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: LD_INT 50
5321: PUSH
5322: EMPTY
5323: LIST
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: LIST
5329: PPUSH
5330: CALL_OW 69
5334: ST_TO_ADDR
// if not tmp then
5335: LD_VAR 0 1
5339: NOT
5340: IFFALSE 5344
// exit ;
5342: GO 5513
// b := IsInUnit ( tmp [ 1 ] ) ;
5344: LD_ADDR_VAR 0 2
5348: PUSH
5349: LD_VAR 0 1
5353: PUSH
5354: LD_INT 1
5356: ARRAY
5357: PPUSH
5358: CALL_OW 310
5362: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5363: LD_VAR 0 2
5367: NOT
5368: PUSH
5369: LD_VAR 0 1
5373: PUSH
5374: LD_INT 1
5376: ARRAY
5377: PPUSH
5378: CALL_OW 314
5382: OR
5383: IFFALSE 5387
// exit ;
5385: GO 5513
// if b = us_bun1 then
5387: LD_VAR 0 2
5391: PUSH
5392: LD_INT 80
5394: EQUAL
5395: IFFALSE 5456
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5397: LD_VAR 0 1
5401: PUSH
5402: LD_INT 1
5404: ARRAY
5405: PPUSH
5406: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5410: LD_VAR 0 1
5414: PUSH
5415: LD_INT 1
5417: ARRAY
5418: PPUSH
5419: LD_INT 27
5421: PPUSH
5422: LD_INT 44
5424: PPUSH
5425: CALL_OW 174
// if IsOk ( us_bun2 ) then
5429: LD_INT 55
5431: PPUSH
5432: CALL_OW 302
5436: IFFALSE 5454
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5438: LD_VAR 0 1
5442: PUSH
5443: LD_INT 1
5445: ARRAY
5446: PPUSH
5447: LD_INT 55
5449: PPUSH
5450: CALL_OW 180
// end else
5454: GO 5513
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5456: LD_VAR 0 1
5460: PUSH
5461: LD_INT 1
5463: ARRAY
5464: PPUSH
5465: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5469: LD_VAR 0 1
5473: PUSH
5474: LD_INT 1
5476: ARRAY
5477: PPUSH
5478: LD_INT 92
5480: PPUSH
5481: LD_INT 51
5483: PPUSH
5484: CALL_OW 174
// if IsOk ( us_bun1 ) then
5488: LD_INT 80
5490: PPUSH
5491: CALL_OW 302
5495: IFFALSE 5513
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5497: LD_VAR 0 1
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PPUSH
5506: LD_INT 80
5508: PPUSH
5509: CALL_OW 180
// end ; end ;
5513: PPOPN 2
5515: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5516: LD_EXP 7
5520: NOT
5521: PUSH
5522: LD_INT 9
5524: PPUSH
5525: LD_INT 22
5527: PUSH
5528: LD_INT 1
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 21
5537: PUSH
5538: LD_INT 3
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 3
5547: PUSH
5548: LD_INT 24
5550: PUSH
5551: LD_INT 1000
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 70
5571: AND
5572: IFFALSE 5983
5574: GO 5576
5576: DISABLE
5577: LD_INT 0
5579: PPUSH
5580: PPUSH
5581: PPUSH
5582: PPUSH
// begin enable ;
5583: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5584: LD_ADDR_VAR 0 2
5588: PUSH
5589: LD_INT 22
5591: PUSH
5592: LD_INT 1
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 25
5601: PUSH
5602: LD_INT 2
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PUSH
5609: LD_INT 24
5611: PUSH
5612: LD_INT 1000
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: LIST
5623: PPUSH
5624: CALL_OW 69
5628: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5629: LD_ADDR_VAR 0 3
5633: PUSH
5634: LD_INT 22
5636: PUSH
5637: LD_INT 1
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: LD_INT 25
5646: PUSH
5647: LD_INT 2
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: LD_INT 3
5656: PUSH
5657: LD_INT 24
5659: PUSH
5660: LD_INT 750
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: LIST
5675: PPUSH
5676: CALL_OW 69
5680: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5681: LD_ADDR_VAR 0 4
5685: PUSH
5686: LD_INT 9
5688: PPUSH
5689: LD_INT 22
5691: PUSH
5692: LD_INT 1
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: LD_INT 21
5701: PUSH
5702: LD_INT 3
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PUSH
5709: LD_INT 3
5711: PUSH
5712: LD_INT 24
5714: PUSH
5715: LD_INT 1000
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: LIST
5730: PPUSH
5731: CALL_OW 70
5735: PUSH
5736: LD_INT 1
5738: DIFF
5739: ST_TO_ADDR
// if not tmp and not tmp2 then
5740: LD_VAR 0 2
5744: NOT
5745: PUSH
5746: LD_VAR 0 3
5750: NOT
5751: AND
5752: IFFALSE 5756
// exit ;
5754: GO 5983
// if tmp and b then
5756: LD_VAR 0 2
5760: PUSH
5761: LD_VAR 0 4
5765: AND
5766: IFFALSE 5896
// for i in tmp do
5768: LD_ADDR_VAR 0 1
5772: PUSH
5773: LD_VAR 0 2
5777: PUSH
5778: FOR_IN
5779: IFFALSE 5894
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5781: LD_VAR 0 1
5785: PPUSH
5786: CALL_OW 110
5790: PUSH
5791: LD_INT 1
5793: EQUAL
5794: PUSH
5795: LD_VAR 0 1
5799: PPUSH
5800: CALL_OW 256
5804: PUSH
5805: LD_INT 1000
5807: LESS
5808: AND
5809: IFFALSE 5815
// continue else
5811: GO 5778
5813: GO 5842
// if GetTag ( i ) = 1 then
5815: LD_VAR 0 1
5819: PPUSH
5820: CALL_OW 110
5824: PUSH
5825: LD_INT 1
5827: EQUAL
5828: IFFALSE 5842
// SetTag ( i , 0 ) ;
5830: LD_VAR 0 1
5834: PPUSH
5835: LD_INT 0
5837: PPUSH
5838: CALL_OW 109
// if IsInUnit ( i ) then
5842: LD_VAR 0 1
5846: PPUSH
5847: CALL_OW 310
5851: IFFALSE 5862
// ComExitBuilding ( i ) ;
5853: LD_VAR 0 1
5857: PPUSH
5858: CALL_OW 122
// if not HasTask ( i ) then
5862: LD_VAR 0 1
5866: PPUSH
5867: CALL_OW 314
5871: NOT
5872: IFFALSE 5892
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5874: LD_VAR 0 1
5878: PPUSH
5879: LD_VAR 0 4
5883: PUSH
5884: LD_INT 1
5886: ARRAY
5887: PPUSH
5888: CALL_OW 190
// end ;
5892: GO 5778
5894: POP
5895: POP
// if tmp2 then
5896: LD_VAR 0 3
5900: IFFALSE 5983
// for i in tmp2 do
5902: LD_ADDR_VAR 0 1
5906: PUSH
5907: LD_VAR 0 3
5911: PUSH
5912: FOR_IN
5913: IFFALSE 5981
// begin if not GetTag ( i ) = 1 then
5915: LD_VAR 0 1
5919: PPUSH
5920: CALL_OW 110
5924: PUSH
5925: LD_INT 1
5927: EQUAL
5928: NOT
5929: IFFALSE 5943
// SetTag ( i , 1 ) ;
5931: LD_VAR 0 1
5935: PPUSH
5936: LD_INT 1
5938: PPUSH
5939: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5943: LD_VAR 0 1
5947: PPUSH
5948: LD_INT 88
5950: PPUSH
5951: LD_INT 75
5953: PPUSH
5954: CALL_OW 297
5958: PUSH
5959: LD_INT 6
5961: GREATER
5962: IFFALSE 5979
// ComMoveXY ( i , 88 , 75 ) ;
5964: LD_VAR 0 1
5968: PPUSH
5969: LD_INT 88
5971: PPUSH
5972: LD_INT 75
5974: PPUSH
5975: CALL_OW 111
// end ;
5979: GO 5912
5981: POP
5982: POP
// end ;
5983: PPOPN 4
5985: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5986: LD_EXP 7
5990: NOT
5991: PUSH
5992: LD_EXP 9
5996: AND
5997: PUSH
5998: LD_INT 9
6000: PPUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 1
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 21
6013: PUSH
6014: LD_INT 1
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: PUSH
6021: LD_INT 3
6023: PUSH
6024: LD_INT 24
6026: PUSH
6027: LD_INT 1000
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: LIST
6042: PPUSH
6043: CALL_OW 70
6047: AND
6048: IFFALSE 6221
6050: GO 6052
6052: DISABLE
6053: LD_INT 0
6055: PPUSH
6056: PPUSH
6057: PPUSH
// begin enable ;
6058: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
6059: LD_ADDR_VAR 0 2
6063: PUSH
6064: LD_INT 22
6066: PUSH
6067: LD_INT 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 4
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PPUSH
6088: CALL_OW 69
6092: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6093: LD_ADDR_VAR 0 3
6097: PUSH
6098: LD_INT 9
6100: PPUSH
6101: LD_INT 22
6103: PUSH
6104: LD_INT 1
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 21
6113: PUSH
6114: LD_INT 1
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: PUSH
6121: LD_INT 3
6123: PUSH
6124: LD_INT 24
6126: PUSH
6127: LD_INT 1000
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: LIST
6142: PPUSH
6143: CALL_OW 70
6147: ST_TO_ADDR
// if not sci or not tmp then
6148: LD_VAR 0 2
6152: NOT
6153: PUSH
6154: LD_VAR 0 3
6158: NOT
6159: OR
6160: IFFALSE 6164
// exit ;
6162: GO 6221
// for i in sci do
6164: LD_ADDR_VAR 0 1
6168: PUSH
6169: LD_VAR 0 2
6173: PUSH
6174: FOR_IN
6175: IFFALSE 6219
// if IsInUnit ( i ) then
6177: LD_VAR 0 1
6181: PPUSH
6182: CALL_OW 310
6186: IFFALSE 6199
// ComExitBuilding ( i ) else
6188: LD_VAR 0 1
6192: PPUSH
6193: CALL_OW 122
6197: GO 6217
// ComHeal ( i , tmp [ 1 ] ) ;
6199: LD_VAR 0 1
6203: PPUSH
6204: LD_VAR 0 3
6208: PUSH
6209: LD_INT 1
6211: ARRAY
6212: PPUSH
6213: CALL_OW 128
6217: GO 6174
6219: POP
6220: POP
// end ;
6221: PPOPN 3
6223: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6224: LD_EXP 7
6228: NOT
6229: PUSH
6230: LD_EXP 9
6234: AND
6235: PUSH
6236: LD_INT 1
6238: PPUSH
6239: CALL_OW 302
6243: AND
6244: PUSH
6245: LD_INT 9
6247: PPUSH
6248: LD_INT 22
6250: PUSH
6251: LD_INT 1
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PUSH
6258: LD_INT 21
6260: PUSH
6261: LD_INT 1
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PUSH
6268: LD_INT 3
6270: PUSH
6271: LD_INT 24
6273: PUSH
6274: LD_INT 1000
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: PPUSH
6290: CALL_OW 70
6294: NOT
6295: AND
6296: PUSH
6297: LD_INT 22
6299: PUSH
6300: LD_INT 1
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: LD_INT 25
6309: PUSH
6310: LD_INT 4
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: PUSH
6317: LD_INT 56
6319: PUSH
6320: EMPTY
6321: LIST
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: LIST
6327: PPUSH
6328: CALL_OW 69
6332: AND
6333: IFFALSE 6426
6335: GO 6337
6337: DISABLE
6338: LD_INT 0
6340: PPUSH
// begin enable ;
6341: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6342: LD_ADDR_VAR 0 1
6346: PUSH
6347: LD_INT 22
6349: PUSH
6350: LD_INT 1
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PUSH
6357: LD_INT 25
6359: PUSH
6360: LD_INT 4
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: LD_INT 56
6369: PUSH
6370: EMPTY
6371: LIST
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: LIST
6377: PPUSH
6378: CALL_OW 69
6382: PUSH
6383: FOR_IN
6384: IFFALSE 6424
// if not GetTag ( i ) and not HasTask ( i ) then
6386: LD_VAR 0 1
6390: PPUSH
6391: CALL_OW 110
6395: NOT
6396: PUSH
6397: LD_VAR 0 1
6401: PPUSH
6402: CALL_OW 314
6406: NOT
6407: AND
6408: IFFALSE 6422
// ComEnterUnit ( i , us_lab ) ;
6410: LD_VAR 0 1
6414: PPUSH
6415: LD_INT 1
6417: PPUSH
6418: CALL_OW 120
6422: GO 6383
6424: POP
6425: POP
// end ;
6426: PPOPN 1
6428: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6429: LD_EXP 7
6433: NOT
6434: PUSH
6435: LD_INT 9
6437: PPUSH
6438: LD_INT 22
6440: PUSH
6441: LD_INT 1
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 21
6450: PUSH
6451: LD_INT 3
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: LD_INT 3
6460: PUSH
6461: LD_INT 24
6463: PUSH
6464: LD_INT 1000
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: PPUSH
6480: CALL_OW 70
6484: NOT
6485: AND
6486: PUSH
6487: LD_INT 22
6489: PUSH
6490: LD_INT 1
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 25
6499: PUSH
6500: LD_INT 2
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 56
6509: PUSH
6510: EMPTY
6511: LIST
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: PPUSH
6518: CALL_OW 69
6522: AND
6523: IFFALSE 6616
6525: GO 6527
6527: DISABLE
6528: LD_INT 0
6530: PPUSH
// begin enable ;
6531: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6532: LD_ADDR_VAR 0 1
6536: PUSH
6537: LD_INT 22
6539: PUSH
6540: LD_INT 1
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 25
6549: PUSH
6550: LD_INT 2
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: LD_INT 56
6559: PUSH
6560: EMPTY
6561: LIST
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: LIST
6567: PPUSH
6568: CALL_OW 69
6572: PUSH
6573: FOR_IN
6574: IFFALSE 6614
// if not HasTask ( i ) and not GetTag ( i ) then
6576: LD_VAR 0 1
6580: PPUSH
6581: CALL_OW 314
6585: NOT
6586: PUSH
6587: LD_VAR 0 1
6591: PPUSH
6592: CALL_OW 110
6596: NOT
6597: AND
6598: IFFALSE 6612
// ComEnterUnit ( i , us_depot ) ;
6600: LD_VAR 0 1
6604: PPUSH
6605: LD_INT 5
6607: PPUSH
6608: CALL_OW 120
6612: GO 6573
6614: POP
6615: POP
// end ;
6616: PPOPN 1
6618: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6619: LD_EXP 9
6623: PUSH
6624: LD_INT 0
6626: LESSEQUAL
6627: PUSH
6628: LD_EXP 18
6632: PPUSH
6633: CALL_OW 301
6637: OR
6638: PUSH
6639: LD_INT 22
6641: PUSH
6642: LD_INT 1
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 25
6651: PUSH
6652: LD_INT 2
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PPUSH
6663: CALL_OW 69
6667: AND
6668: IFFALSE 6709
6670: GO 6672
6672: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6673: LD_INT 22
6675: PUSH
6676: LD_INT 1
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 25
6685: PUSH
6686: LD_INT 2
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PPUSH
6697: CALL_OW 69
6701: PPUSH
6702: LD_INT 1
6704: PPUSH
6705: CALL_OW 167
6709: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6710: LD_EXP 7
6714: NOT
6715: PUSH
6716: LD_INT 7
6718: PPUSH
6719: LD_INT 22
6721: PUSH
6722: LD_INT 7
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PPUSH
6729: CALL_OW 70
6733: AND
6734: IFFALSE 6825
6736: GO 6738
6738: DISABLE
6739: LD_INT 0
6741: PPUSH
// begin wait ( 0 0$2 ) ;
6742: LD_INT 70
6744: PPUSH
6745: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6749: LD_ADDR_VAR 0 1
6753: PUSH
6754: LD_INT 22
6756: PUSH
6757: LD_INT 1
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: PUSH
6764: LD_INT 25
6766: PUSH
6767: LD_INT 1
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PPUSH
6778: CALL_OW 69
6782: PUSH
6783: FOR_IN
6784: IFFALSE 6823
// begin if IsInUnit ( i ) then
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 310
6795: IFFALSE 6806
// ComExitBuilding ( i ) ;
6797: LD_VAR 0 1
6801: PPUSH
6802: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6806: LD_VAR 0 1
6810: PPUSH
6811: LD_INT 92
6813: PPUSH
6814: LD_INT 78
6816: PPUSH
6817: CALL_OW 174
// end ;
6821: GO 6783
6823: POP
6824: POP
// end ; end_of_file
6825: PPOPN 1
6827: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6828: LD_VAR 0 1
6832: PPUSH
6833: LD_VAR 0 2
6837: PPUSH
6838: LD_VAR 0 3
6842: PPUSH
6843: CALL 1579 0 3
6847: PPOPN 3
6849: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6850: LD_EXP 14
6854: PPUSH
6855: CALL_OW 257
6859: PUSH
6860: LD_INT 4
6862: EQUAL
6863: PUSH
6864: LD_EXP 15
6868: PPUSH
6869: CALL_OW 257
6873: PUSH
6874: LD_INT 4
6876: EQUAL
6877: OR
6878: PUSH
6879: LD_INT 22
6881: PUSH
6882: LD_INT 7
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: LD_INT 21
6891: PUSH
6892: LD_INT 3
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PPUSH
6903: CALL_OW 69
6907: OR
6908: IFFALSE 6912
// exit ;
6910: GO 6950
// if un = JMM then
6912: LD_VAR 0 1
6916: PUSH
6917: LD_EXP 14
6921: EQUAL
6922: IFFALSE 6931
// YouLost ( JMM ) ;
6924: LD_STRING JMM
6926: PPUSH
6927: CALL_OW 104
// if un = Burlak then
6931: LD_VAR 0 1
6935: PUSH
6936: LD_EXP 15
6940: EQUAL
6941: IFFALSE 6950
// YouLost ( Burlak ) ;
6943: LD_STRING Burlak
6945: PPUSH
6946: CALL_OW 104
// end ;
6950: PPOPN 1
6952: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6953: LD_VAR 0 1
6957: PPUSH
6958: CALL 23116 0 1
// if un = JMM then
6962: LD_VAR 0 1
6966: PUSH
6967: LD_EXP 14
6971: EQUAL
6972: IFFALSE 6981
// YouLost ( JMM ) ;
6974: LD_STRING JMM
6976: PPUSH
6977: CALL_OW 104
// if un = Burlak then
6981: LD_VAR 0 1
6985: PUSH
6986: LD_EXP 15
6990: EQUAL
6991: IFFALSE 7000
// YouLost ( Burlak ) ;
6993: LD_STRING Burlak
6995: PPUSH
6996: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
7000: LD_VAR 0 1
7004: PUSH
7005: LD_INT 21
7007: PUSH
7008: LD_INT 1
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 23
7017: PUSH
7018: LD_INT 1
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PPUSH
7029: CALL_OW 69
7033: IN
7034: IFFALSE 7050
// killCounter := killCounter + 1 ;
7036: LD_ADDR_EXP 12
7040: PUSH
7041: LD_EXP 12
7045: PUSH
7046: LD_INT 1
7048: PLUS
7049: ST_TO_ADDR
// end ;
7050: PPOPN 1
7052: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
7053: LD_VAR 0 2
7057: PUSH
7058: LD_INT 7
7060: EQUAL
7061: PUSH
7062: LD_VAR 0 1
7066: PUSH
7067: LD_INT 2
7069: PUSH
7070: LD_INT 30
7072: PUSH
7073: LD_INT 31
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 30
7082: PUSH
7083: LD_INT 32
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 30
7092: PUSH
7093: LD_INT 33
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: PPUSH
7106: CALL_OW 69
7110: IN
7111: AND
7112: IFFALSE 7128
// bunkerCounter := bunkerCounter + 1 ;
7114: LD_ADDR_EXP 13
7118: PUSH
7119: LD_EXP 13
7123: PUSH
7124: LD_INT 1
7126: PLUS
7127: ST_TO_ADDR
// end ;
7128: PPOPN 3
7130: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL_OW 255
7140: PUSH
7141: LD_INT 7
7143: EQUAL
7144: IFFALSE 7154
// artifactPickedUp := true ;
7146: LD_ADDR_EXP 6
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// end ;
7154: PPOPN 2
7156: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7157: LD_ADDR_EXP 6
7161: PUSH
7162: LD_INT 0
7164: ST_TO_ADDR
7165: PPOPN 2
7167: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7168: LD_VAR 0 1
7172: PPUSH
7173: LD_VAR 0 2
7177: PPUSH
7178: CALL 23236 0 2
// if GetSide ( vehicle ) <> 1 then
7182: LD_VAR 0 1
7186: PPUSH
7187: CALL_OW 255
7191: PUSH
7192: LD_INT 1
7194: NONEQUAL
7195: IFFALSE 7199
// exit ;
7197: GO 7246
// wait ( 0 0$5 ) ;
7199: LD_INT 175
7201: PPUSH
7202: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7206: LD_VAR 0 1
7210: PPUSH
7211: CALL_OW 263
7215: PUSH
7216: LD_INT 2
7218: EQUAL
7219: IFFALSE 7230
// Connect ( vehicle ) ;
7221: LD_VAR 0 1
7225: PPUSH
7226: CALL 35345 0 1
// vehGuard := vehGuard ^ vehicle ;
7230: LD_ADDR_EXP 23
7234: PUSH
7235: LD_EXP 23
7239: PUSH
7240: LD_VAR 0 1
7244: ADD
7245: ST_TO_ADDR
// end ;
7246: PPOPN 2
7248: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7249: LD_VAR 0 1
7253: PUSH
7254: LD_INT 1
7256: EQUAL
7257: PUSH
7258: LD_EXP 7
7262: NOT
7263: AND
7264: IFFALSE 7299
// begin planCaptured := true ;
7266: LD_ADDR_EXP 7
7270: PUSH
7271: LD_INT 1
7273: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7274: LD_STRING MEnd
7276: PPUSH
7277: CALL_OW 337
// canEnd := true ;
7281: LD_ADDR_EXP 10
7285: PUSH
7286: LD_INT 1
7288: ST_TO_ADDR
// missionTime := tick ;
7289: LD_ADDR_EXP 11
7293: PUSH
7294: LD_OWVAR 1
7298: ST_TO_ADDR
// end ; end ;
7299: PPOPN 3
7301: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7302: LD_VAR 0 1
7306: PPUSH
7307: CALL 23220 0 1
// end ; end_of_file end_of_file
7311: PPOPN 1
7313: END
// export globalGameSaveCounter ; every 0 0$1 do
7314: GO 7316
7316: DISABLE
// begin enable ;
7317: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7318: LD_STRING updateTimer(
7320: PUSH
7321: LD_OWVAR 1
7325: STR
7326: PUSH
7327: LD_STRING );
7329: STR
7330: PPUSH
7331: CALL_OW 559
// end ;
7335: END
// every 0 0$1 do
7336: GO 7338
7338: DISABLE
// begin globalGameSaveCounter := 0 ;
7339: LD_ADDR_EXP 24
7343: PUSH
7344: LD_INT 0
7346: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7347: LD_STRING setGameSaveCounter(0)
7349: PPUSH
7350: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7354: LD_STRING initStreamRollete();
7356: PPUSH
7357: CALL_OW 559
// InitStreamMode ;
7361: CALL 8687 0 0
// DefineStreamItems ( false ) ;
7365: LD_INT 0
7367: PPUSH
7368: CALL 9151 0 1
// end ;
7372: END
// export function SOS_MapStart ( ) ; begin
7373: LD_INT 0
7375: PPUSH
// if streamModeActive then
7376: LD_EXP 25
7380: IFFALSE 7389
// DefineStreamItems ( true ) ;
7382: LD_INT 1
7384: PPUSH
7385: CALL 9151 0 1
// UpdateLuaVariables ( ) ;
7389: CALL 7406 0 0
// UpdateFactoryWaypoints ( ) ;
7393: CALL 22020 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7397: CALL 22277 0 0
// end ;
7401: LD_VAR 0 1
7405: RET
// function UpdateLuaVariables ( ) ; begin
7406: LD_INT 0
7408: PPUSH
// if globalGameSaveCounter then
7409: LD_EXP 24
7413: IFFALSE 7447
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7415: LD_ADDR_EXP 24
7419: PUSH
7420: LD_EXP 24
7424: PPUSH
7425: CALL 66087 0 1
7429: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7430: LD_STRING setGameSaveCounter(
7432: PUSH
7433: LD_EXP 24
7437: STR
7438: PUSH
7439: LD_STRING )
7441: STR
7442: PPUSH
7443: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7447: LD_STRING setGameDifficulty(
7449: PUSH
7450: LD_OWVAR 67
7454: STR
7455: PUSH
7456: LD_STRING )
7458: STR
7459: PPUSH
7460: CALL_OW 559
// end ;
7464: LD_VAR 0 1
7468: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7469: LD_INT 0
7471: PPUSH
// if p2 = stream_mode then
7472: LD_VAR 0 2
7476: PUSH
7477: LD_INT 100
7479: EQUAL
7480: IFFALSE 8483
// begin if not StreamModeActive then
7482: LD_EXP 25
7486: NOT
7487: IFFALSE 7497
// StreamModeActive := true ;
7489: LD_ADDR_EXP 25
7493: PUSH
7494: LD_INT 1
7496: ST_TO_ADDR
// if p3 = 0 then
7497: LD_VAR 0 3
7501: PUSH
7502: LD_INT 0
7504: EQUAL
7505: IFFALSE 7511
// InitStreamMode ;
7507: CALL 8687 0 0
// if p3 = 1 then
7511: LD_VAR 0 3
7515: PUSH
7516: LD_INT 1
7518: EQUAL
7519: IFFALSE 7529
// sRocket := true ;
7521: LD_ADDR_EXP 30
7525: PUSH
7526: LD_INT 1
7528: ST_TO_ADDR
// if p3 = 2 then
7529: LD_VAR 0 3
7533: PUSH
7534: LD_INT 2
7536: EQUAL
7537: IFFALSE 7547
// sSpeed := true ;
7539: LD_ADDR_EXP 29
7543: PUSH
7544: LD_INT 1
7546: ST_TO_ADDR
// if p3 = 3 then
7547: LD_VAR 0 3
7551: PUSH
7552: LD_INT 3
7554: EQUAL
7555: IFFALSE 7565
// sEngine := true ;
7557: LD_ADDR_EXP 31
7561: PUSH
7562: LD_INT 1
7564: ST_TO_ADDR
// if p3 = 4 then
7565: LD_VAR 0 3
7569: PUSH
7570: LD_INT 4
7572: EQUAL
7573: IFFALSE 7583
// sSpec := true ;
7575: LD_ADDR_EXP 28
7579: PUSH
7580: LD_INT 1
7582: ST_TO_ADDR
// if p3 = 5 then
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 5
7590: EQUAL
7591: IFFALSE 7601
// sLevel := true ;
7593: LD_ADDR_EXP 32
7597: PUSH
7598: LD_INT 1
7600: ST_TO_ADDR
// if p3 = 6 then
7601: LD_VAR 0 3
7605: PUSH
7606: LD_INT 6
7608: EQUAL
7609: IFFALSE 7619
// sArmoury := true ;
7611: LD_ADDR_EXP 33
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// if p3 = 7 then
7619: LD_VAR 0 3
7623: PUSH
7624: LD_INT 7
7626: EQUAL
7627: IFFALSE 7637
// sRadar := true ;
7629: LD_ADDR_EXP 34
7633: PUSH
7634: LD_INT 1
7636: ST_TO_ADDR
// if p3 = 8 then
7637: LD_VAR 0 3
7641: PUSH
7642: LD_INT 8
7644: EQUAL
7645: IFFALSE 7655
// sBunker := true ;
7647: LD_ADDR_EXP 35
7651: PUSH
7652: LD_INT 1
7654: ST_TO_ADDR
// if p3 = 9 then
7655: LD_VAR 0 3
7659: PUSH
7660: LD_INT 9
7662: EQUAL
7663: IFFALSE 7673
// sHack := true ;
7665: LD_ADDR_EXP 36
7669: PUSH
7670: LD_INT 1
7672: ST_TO_ADDR
// if p3 = 10 then
7673: LD_VAR 0 3
7677: PUSH
7678: LD_INT 10
7680: EQUAL
7681: IFFALSE 7691
// sFire := true ;
7683: LD_ADDR_EXP 37
7687: PUSH
7688: LD_INT 1
7690: ST_TO_ADDR
// if p3 = 11 then
7691: LD_VAR 0 3
7695: PUSH
7696: LD_INT 11
7698: EQUAL
7699: IFFALSE 7709
// sRefresh := true ;
7701: LD_ADDR_EXP 38
7705: PUSH
7706: LD_INT 1
7708: ST_TO_ADDR
// if p3 = 12 then
7709: LD_VAR 0 3
7713: PUSH
7714: LD_INT 12
7716: EQUAL
7717: IFFALSE 7727
// sExp := true ;
7719: LD_ADDR_EXP 39
7723: PUSH
7724: LD_INT 1
7726: ST_TO_ADDR
// if p3 = 13 then
7727: LD_VAR 0 3
7731: PUSH
7732: LD_INT 13
7734: EQUAL
7735: IFFALSE 7745
// sDepot := true ;
7737: LD_ADDR_EXP 40
7741: PUSH
7742: LD_INT 1
7744: ST_TO_ADDR
// if p3 = 14 then
7745: LD_VAR 0 3
7749: PUSH
7750: LD_INT 14
7752: EQUAL
7753: IFFALSE 7763
// sFlag := true ;
7755: LD_ADDR_EXP 41
7759: PUSH
7760: LD_INT 1
7762: ST_TO_ADDR
// if p3 = 15 then
7763: LD_VAR 0 3
7767: PUSH
7768: LD_INT 15
7770: EQUAL
7771: IFFALSE 7781
// sKamikadze := true ;
7773: LD_ADDR_EXP 49
7777: PUSH
7778: LD_INT 1
7780: ST_TO_ADDR
// if p3 = 16 then
7781: LD_VAR 0 3
7785: PUSH
7786: LD_INT 16
7788: EQUAL
7789: IFFALSE 7799
// sTroll := true ;
7791: LD_ADDR_EXP 50
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// if p3 = 17 then
7799: LD_VAR 0 3
7803: PUSH
7804: LD_INT 17
7806: EQUAL
7807: IFFALSE 7817
// sSlow := true ;
7809: LD_ADDR_EXP 51
7813: PUSH
7814: LD_INT 1
7816: ST_TO_ADDR
// if p3 = 18 then
7817: LD_VAR 0 3
7821: PUSH
7822: LD_INT 18
7824: EQUAL
7825: IFFALSE 7835
// sLack := true ;
7827: LD_ADDR_EXP 52
7831: PUSH
7832: LD_INT 1
7834: ST_TO_ADDR
// if p3 = 19 then
7835: LD_VAR 0 3
7839: PUSH
7840: LD_INT 19
7842: EQUAL
7843: IFFALSE 7853
// sTank := true ;
7845: LD_ADDR_EXP 54
7849: PUSH
7850: LD_INT 1
7852: ST_TO_ADDR
// if p3 = 20 then
7853: LD_VAR 0 3
7857: PUSH
7858: LD_INT 20
7860: EQUAL
7861: IFFALSE 7871
// sRemote := true ;
7863: LD_ADDR_EXP 55
7867: PUSH
7868: LD_INT 1
7870: ST_TO_ADDR
// if p3 = 21 then
7871: LD_VAR 0 3
7875: PUSH
7876: LD_INT 21
7878: EQUAL
7879: IFFALSE 7889
// sPowell := true ;
7881: LD_ADDR_EXP 56
7885: PUSH
7886: LD_INT 1
7888: ST_TO_ADDR
// if p3 = 22 then
7889: LD_VAR 0 3
7893: PUSH
7894: LD_INT 22
7896: EQUAL
7897: IFFALSE 7907
// sTeleport := true ;
7899: LD_ADDR_EXP 59
7903: PUSH
7904: LD_INT 1
7906: ST_TO_ADDR
// if p3 = 23 then
7907: LD_VAR 0 3
7911: PUSH
7912: LD_INT 23
7914: EQUAL
7915: IFFALSE 7925
// sOilTower := true ;
7917: LD_ADDR_EXP 61
7921: PUSH
7922: LD_INT 1
7924: ST_TO_ADDR
// if p3 = 24 then
7925: LD_VAR 0 3
7929: PUSH
7930: LD_INT 24
7932: EQUAL
7933: IFFALSE 7943
// sShovel := true ;
7935: LD_ADDR_EXP 62
7939: PUSH
7940: LD_INT 1
7942: ST_TO_ADDR
// if p3 = 25 then
7943: LD_VAR 0 3
7947: PUSH
7948: LD_INT 25
7950: EQUAL
7951: IFFALSE 7961
// sSheik := true ;
7953: LD_ADDR_EXP 63
7957: PUSH
7958: LD_INT 1
7960: ST_TO_ADDR
// if p3 = 26 then
7961: LD_VAR 0 3
7965: PUSH
7966: LD_INT 26
7968: EQUAL
7969: IFFALSE 7979
// sEarthquake := true ;
7971: LD_ADDR_EXP 65
7975: PUSH
7976: LD_INT 1
7978: ST_TO_ADDR
// if p3 = 27 then
7979: LD_VAR 0 3
7983: PUSH
7984: LD_INT 27
7986: EQUAL
7987: IFFALSE 7997
// sAI := true ;
7989: LD_ADDR_EXP 66
7993: PUSH
7994: LD_INT 1
7996: ST_TO_ADDR
// if p3 = 28 then
7997: LD_VAR 0 3
8001: PUSH
8002: LD_INT 28
8004: EQUAL
8005: IFFALSE 8015
// sCargo := true ;
8007: LD_ADDR_EXP 69
8011: PUSH
8012: LD_INT 1
8014: ST_TO_ADDR
// if p3 = 29 then
8015: LD_VAR 0 3
8019: PUSH
8020: LD_INT 29
8022: EQUAL
8023: IFFALSE 8033
// sDLaser := true ;
8025: LD_ADDR_EXP 70
8029: PUSH
8030: LD_INT 1
8032: ST_TO_ADDR
// if p3 = 30 then
8033: LD_VAR 0 3
8037: PUSH
8038: LD_INT 30
8040: EQUAL
8041: IFFALSE 8051
// sExchange := true ;
8043: LD_ADDR_EXP 71
8047: PUSH
8048: LD_INT 1
8050: ST_TO_ADDR
// if p3 = 31 then
8051: LD_VAR 0 3
8055: PUSH
8056: LD_INT 31
8058: EQUAL
8059: IFFALSE 8069
// sFac := true ;
8061: LD_ADDR_EXP 72
8065: PUSH
8066: LD_INT 1
8068: ST_TO_ADDR
// if p3 = 32 then
8069: LD_VAR 0 3
8073: PUSH
8074: LD_INT 32
8076: EQUAL
8077: IFFALSE 8087
// sPower := true ;
8079: LD_ADDR_EXP 73
8083: PUSH
8084: LD_INT 1
8086: ST_TO_ADDR
// if p3 = 33 then
8087: LD_VAR 0 3
8091: PUSH
8092: LD_INT 33
8094: EQUAL
8095: IFFALSE 8105
// sRandom := true ;
8097: LD_ADDR_EXP 74
8101: PUSH
8102: LD_INT 1
8104: ST_TO_ADDR
// if p3 = 34 then
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 34
8112: EQUAL
8113: IFFALSE 8123
// sShield := true ;
8115: LD_ADDR_EXP 75
8119: PUSH
8120: LD_INT 1
8122: ST_TO_ADDR
// if p3 = 35 then
8123: LD_VAR 0 3
8127: PUSH
8128: LD_INT 35
8130: EQUAL
8131: IFFALSE 8141
// sTime := true ;
8133: LD_ADDR_EXP 76
8137: PUSH
8138: LD_INT 1
8140: ST_TO_ADDR
// if p3 = 36 then
8141: LD_VAR 0 3
8145: PUSH
8146: LD_INT 36
8148: EQUAL
8149: IFFALSE 8159
// sTools := true ;
8151: LD_ADDR_EXP 77
8155: PUSH
8156: LD_INT 1
8158: ST_TO_ADDR
// if p3 = 101 then
8159: LD_VAR 0 3
8163: PUSH
8164: LD_INT 101
8166: EQUAL
8167: IFFALSE 8177
// sSold := true ;
8169: LD_ADDR_EXP 42
8173: PUSH
8174: LD_INT 1
8176: ST_TO_ADDR
// if p3 = 102 then
8177: LD_VAR 0 3
8181: PUSH
8182: LD_INT 102
8184: EQUAL
8185: IFFALSE 8195
// sDiff := true ;
8187: LD_ADDR_EXP 43
8191: PUSH
8192: LD_INT 1
8194: ST_TO_ADDR
// if p3 = 103 then
8195: LD_VAR 0 3
8199: PUSH
8200: LD_INT 103
8202: EQUAL
8203: IFFALSE 8213
// sFog := true ;
8205: LD_ADDR_EXP 46
8209: PUSH
8210: LD_INT 1
8212: ST_TO_ADDR
// if p3 = 104 then
8213: LD_VAR 0 3
8217: PUSH
8218: LD_INT 104
8220: EQUAL
8221: IFFALSE 8231
// sReset := true ;
8223: LD_ADDR_EXP 47
8227: PUSH
8228: LD_INT 1
8230: ST_TO_ADDR
// if p3 = 105 then
8231: LD_VAR 0 3
8235: PUSH
8236: LD_INT 105
8238: EQUAL
8239: IFFALSE 8249
// sSun := true ;
8241: LD_ADDR_EXP 48
8245: PUSH
8246: LD_INT 1
8248: ST_TO_ADDR
// if p3 = 106 then
8249: LD_VAR 0 3
8253: PUSH
8254: LD_INT 106
8256: EQUAL
8257: IFFALSE 8267
// sTiger := true ;
8259: LD_ADDR_EXP 44
8263: PUSH
8264: LD_INT 1
8266: ST_TO_ADDR
// if p3 = 107 then
8267: LD_VAR 0 3
8271: PUSH
8272: LD_INT 107
8274: EQUAL
8275: IFFALSE 8285
// sBomb := true ;
8277: LD_ADDR_EXP 45
8281: PUSH
8282: LD_INT 1
8284: ST_TO_ADDR
// if p3 = 108 then
8285: LD_VAR 0 3
8289: PUSH
8290: LD_INT 108
8292: EQUAL
8293: IFFALSE 8303
// sWound := true ;
8295: LD_ADDR_EXP 53
8299: PUSH
8300: LD_INT 1
8302: ST_TO_ADDR
// if p3 = 109 then
8303: LD_VAR 0 3
8307: PUSH
8308: LD_INT 109
8310: EQUAL
8311: IFFALSE 8321
// sBetray := true ;
8313: LD_ADDR_EXP 57
8317: PUSH
8318: LD_INT 1
8320: ST_TO_ADDR
// if p3 = 110 then
8321: LD_VAR 0 3
8325: PUSH
8326: LD_INT 110
8328: EQUAL
8329: IFFALSE 8339
// sContamin := true ;
8331: LD_ADDR_EXP 58
8335: PUSH
8336: LD_INT 1
8338: ST_TO_ADDR
// if p3 = 111 then
8339: LD_VAR 0 3
8343: PUSH
8344: LD_INT 111
8346: EQUAL
8347: IFFALSE 8357
// sOil := true ;
8349: LD_ADDR_EXP 60
8353: PUSH
8354: LD_INT 1
8356: ST_TO_ADDR
// if p3 = 112 then
8357: LD_VAR 0 3
8361: PUSH
8362: LD_INT 112
8364: EQUAL
8365: IFFALSE 8375
// sStu := true ;
8367: LD_ADDR_EXP 64
8371: PUSH
8372: LD_INT 1
8374: ST_TO_ADDR
// if p3 = 113 then
8375: LD_VAR 0 3
8379: PUSH
8380: LD_INT 113
8382: EQUAL
8383: IFFALSE 8393
// sBazooka := true ;
8385: LD_ADDR_EXP 67
8389: PUSH
8390: LD_INT 1
8392: ST_TO_ADDR
// if p3 = 114 then
8393: LD_VAR 0 3
8397: PUSH
8398: LD_INT 114
8400: EQUAL
8401: IFFALSE 8411
// sMortar := true ;
8403: LD_ADDR_EXP 68
8407: PUSH
8408: LD_INT 1
8410: ST_TO_ADDR
// if p3 = 115 then
8411: LD_VAR 0 3
8415: PUSH
8416: LD_INT 115
8418: EQUAL
8419: IFFALSE 8429
// sRanger := true ;
8421: LD_ADDR_EXP 78
8425: PUSH
8426: LD_INT 1
8428: ST_TO_ADDR
// if p3 = 116 then
8429: LD_VAR 0 3
8433: PUSH
8434: LD_INT 116
8436: EQUAL
8437: IFFALSE 8447
// sComputer := true ;
8439: LD_ADDR_EXP 79
8443: PUSH
8444: LD_INT 1
8446: ST_TO_ADDR
// if p3 = 117 then
8447: LD_VAR 0 3
8451: PUSH
8452: LD_INT 117
8454: EQUAL
8455: IFFALSE 8465
// s30 := true ;
8457: LD_ADDR_EXP 80
8461: PUSH
8462: LD_INT 1
8464: ST_TO_ADDR
// if p3 = 118 then
8465: LD_VAR 0 3
8469: PUSH
8470: LD_INT 118
8472: EQUAL
8473: IFFALSE 8483
// s60 := true ;
8475: LD_ADDR_EXP 81
8479: PUSH
8480: LD_INT 1
8482: ST_TO_ADDR
// end ; if p2 = hack_mode then
8483: LD_VAR 0 2
8487: PUSH
8488: LD_INT 101
8490: EQUAL
8491: IFFALSE 8619
// begin case p3 of 1 :
8493: LD_VAR 0 3
8497: PUSH
8498: LD_INT 1
8500: DOUBLE
8501: EQUAL
8502: IFTRUE 8506
8504: GO 8513
8506: POP
// hHackUnlimitedResources ; 2 :
8507: CALL 20766 0 0
8511: GO 8619
8513: LD_INT 2
8515: DOUBLE
8516: EQUAL
8517: IFTRUE 8521
8519: GO 8528
8521: POP
// hHackSetLevel10 ; 3 :
8522: CALL 20899 0 0
8526: GO 8619
8528: LD_INT 3
8530: DOUBLE
8531: EQUAL
8532: IFTRUE 8536
8534: GO 8543
8536: POP
// hHackSetLevel10YourUnits ; 4 :
8537: CALL 20984 0 0
8541: GO 8619
8543: LD_INT 4
8545: DOUBLE
8546: EQUAL
8547: IFTRUE 8551
8549: GO 8558
8551: POP
// hHackInvincible ; 5 :
8552: CALL 21432 0 0
8556: GO 8619
8558: LD_INT 5
8560: DOUBLE
8561: EQUAL
8562: IFTRUE 8566
8564: GO 8573
8566: POP
// hHackInvisible ; 6 :
8567: CALL 21543 0 0
8571: GO 8619
8573: LD_INT 6
8575: DOUBLE
8576: EQUAL
8577: IFTRUE 8581
8579: GO 8588
8581: POP
// hHackChangeYourSide ; 7 :
8582: CALL 21600 0 0
8586: GO 8619
8588: LD_INT 7
8590: DOUBLE
8591: EQUAL
8592: IFTRUE 8596
8594: GO 8603
8596: POP
// hHackChangeUnitSide ; 8 :
8597: CALL 21642 0 0
8601: GO 8619
8603: LD_INT 8
8605: DOUBLE
8606: EQUAL
8607: IFTRUE 8611
8609: GO 8618
8611: POP
// hHackFog ; end ;
8612: CALL 21743 0 0
8616: GO 8619
8618: POP
// end ; if p2 = game_save_mode then
8619: LD_VAR 0 2
8623: PUSH
8624: LD_INT 102
8626: EQUAL
8627: IFFALSE 8682
// begin if p3 = 1 then
8629: LD_VAR 0 3
8633: PUSH
8634: LD_INT 1
8636: EQUAL
8637: IFFALSE 8649
// globalGameSaveCounter := p4 ;
8639: LD_ADDR_EXP 24
8643: PUSH
8644: LD_VAR 0 4
8648: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8649: LD_VAR 0 3
8653: PUSH
8654: LD_INT 2
8656: EQUAL
8657: PUSH
8658: LD_EXP 24
8662: AND
8663: IFFALSE 8682
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8665: LD_STRING setGameSaveCounter(
8667: PUSH
8668: LD_EXP 24
8672: STR
8673: PUSH
8674: LD_STRING )
8676: STR
8677: PPUSH
8678: CALL_OW 559
// end ; end ;
8682: LD_VAR 0 7
8686: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8687: LD_INT 0
8689: PPUSH
// streamModeActive := false ;
8690: LD_ADDR_EXP 25
8694: PUSH
8695: LD_INT 0
8697: ST_TO_ADDR
// normalCounter := 36 ;
8698: LD_ADDR_EXP 26
8702: PUSH
8703: LD_INT 36
8705: ST_TO_ADDR
// hardcoreCounter := 18 ;
8706: LD_ADDR_EXP 27
8710: PUSH
8711: LD_INT 18
8713: ST_TO_ADDR
// sRocket := false ;
8714: LD_ADDR_EXP 30
8718: PUSH
8719: LD_INT 0
8721: ST_TO_ADDR
// sSpeed := false ;
8722: LD_ADDR_EXP 29
8726: PUSH
8727: LD_INT 0
8729: ST_TO_ADDR
// sEngine := false ;
8730: LD_ADDR_EXP 31
8734: PUSH
8735: LD_INT 0
8737: ST_TO_ADDR
// sSpec := false ;
8738: LD_ADDR_EXP 28
8742: PUSH
8743: LD_INT 0
8745: ST_TO_ADDR
// sLevel := false ;
8746: LD_ADDR_EXP 32
8750: PUSH
8751: LD_INT 0
8753: ST_TO_ADDR
// sArmoury := false ;
8754: LD_ADDR_EXP 33
8758: PUSH
8759: LD_INT 0
8761: ST_TO_ADDR
// sRadar := false ;
8762: LD_ADDR_EXP 34
8766: PUSH
8767: LD_INT 0
8769: ST_TO_ADDR
// sBunker := false ;
8770: LD_ADDR_EXP 35
8774: PUSH
8775: LD_INT 0
8777: ST_TO_ADDR
// sHack := false ;
8778: LD_ADDR_EXP 36
8782: PUSH
8783: LD_INT 0
8785: ST_TO_ADDR
// sFire := false ;
8786: LD_ADDR_EXP 37
8790: PUSH
8791: LD_INT 0
8793: ST_TO_ADDR
// sRefresh := false ;
8794: LD_ADDR_EXP 38
8798: PUSH
8799: LD_INT 0
8801: ST_TO_ADDR
// sExp := false ;
8802: LD_ADDR_EXP 39
8806: PUSH
8807: LD_INT 0
8809: ST_TO_ADDR
// sDepot := false ;
8810: LD_ADDR_EXP 40
8814: PUSH
8815: LD_INT 0
8817: ST_TO_ADDR
// sFlag := false ;
8818: LD_ADDR_EXP 41
8822: PUSH
8823: LD_INT 0
8825: ST_TO_ADDR
// sKamikadze := false ;
8826: LD_ADDR_EXP 49
8830: PUSH
8831: LD_INT 0
8833: ST_TO_ADDR
// sTroll := false ;
8834: LD_ADDR_EXP 50
8838: PUSH
8839: LD_INT 0
8841: ST_TO_ADDR
// sSlow := false ;
8842: LD_ADDR_EXP 51
8846: PUSH
8847: LD_INT 0
8849: ST_TO_ADDR
// sLack := false ;
8850: LD_ADDR_EXP 52
8854: PUSH
8855: LD_INT 0
8857: ST_TO_ADDR
// sTank := false ;
8858: LD_ADDR_EXP 54
8862: PUSH
8863: LD_INT 0
8865: ST_TO_ADDR
// sRemote := false ;
8866: LD_ADDR_EXP 55
8870: PUSH
8871: LD_INT 0
8873: ST_TO_ADDR
// sPowell := false ;
8874: LD_ADDR_EXP 56
8878: PUSH
8879: LD_INT 0
8881: ST_TO_ADDR
// sTeleport := false ;
8882: LD_ADDR_EXP 59
8886: PUSH
8887: LD_INT 0
8889: ST_TO_ADDR
// sOilTower := false ;
8890: LD_ADDR_EXP 61
8894: PUSH
8895: LD_INT 0
8897: ST_TO_ADDR
// sShovel := false ;
8898: LD_ADDR_EXP 62
8902: PUSH
8903: LD_INT 0
8905: ST_TO_ADDR
// sSheik := false ;
8906: LD_ADDR_EXP 63
8910: PUSH
8911: LD_INT 0
8913: ST_TO_ADDR
// sEarthquake := false ;
8914: LD_ADDR_EXP 65
8918: PUSH
8919: LD_INT 0
8921: ST_TO_ADDR
// sAI := false ;
8922: LD_ADDR_EXP 66
8926: PUSH
8927: LD_INT 0
8929: ST_TO_ADDR
// sCargo := false ;
8930: LD_ADDR_EXP 69
8934: PUSH
8935: LD_INT 0
8937: ST_TO_ADDR
// sDLaser := false ;
8938: LD_ADDR_EXP 70
8942: PUSH
8943: LD_INT 0
8945: ST_TO_ADDR
// sExchange := false ;
8946: LD_ADDR_EXP 71
8950: PUSH
8951: LD_INT 0
8953: ST_TO_ADDR
// sFac := false ;
8954: LD_ADDR_EXP 72
8958: PUSH
8959: LD_INT 0
8961: ST_TO_ADDR
// sPower := false ;
8962: LD_ADDR_EXP 73
8966: PUSH
8967: LD_INT 0
8969: ST_TO_ADDR
// sRandom := false ;
8970: LD_ADDR_EXP 74
8974: PUSH
8975: LD_INT 0
8977: ST_TO_ADDR
// sShield := false ;
8978: LD_ADDR_EXP 75
8982: PUSH
8983: LD_INT 0
8985: ST_TO_ADDR
// sTime := false ;
8986: LD_ADDR_EXP 76
8990: PUSH
8991: LD_INT 0
8993: ST_TO_ADDR
// sTools := false ;
8994: LD_ADDR_EXP 77
8998: PUSH
8999: LD_INT 0
9001: ST_TO_ADDR
// sSold := false ;
9002: LD_ADDR_EXP 42
9006: PUSH
9007: LD_INT 0
9009: ST_TO_ADDR
// sDiff := false ;
9010: LD_ADDR_EXP 43
9014: PUSH
9015: LD_INT 0
9017: ST_TO_ADDR
// sFog := false ;
9018: LD_ADDR_EXP 46
9022: PUSH
9023: LD_INT 0
9025: ST_TO_ADDR
// sReset := false ;
9026: LD_ADDR_EXP 47
9030: PUSH
9031: LD_INT 0
9033: ST_TO_ADDR
// sSun := false ;
9034: LD_ADDR_EXP 48
9038: PUSH
9039: LD_INT 0
9041: ST_TO_ADDR
// sTiger := false ;
9042: LD_ADDR_EXP 44
9046: PUSH
9047: LD_INT 0
9049: ST_TO_ADDR
// sBomb := false ;
9050: LD_ADDR_EXP 45
9054: PUSH
9055: LD_INT 0
9057: ST_TO_ADDR
// sWound := false ;
9058: LD_ADDR_EXP 53
9062: PUSH
9063: LD_INT 0
9065: ST_TO_ADDR
// sBetray := false ;
9066: LD_ADDR_EXP 57
9070: PUSH
9071: LD_INT 0
9073: ST_TO_ADDR
// sContamin := false ;
9074: LD_ADDR_EXP 58
9078: PUSH
9079: LD_INT 0
9081: ST_TO_ADDR
// sOil := false ;
9082: LD_ADDR_EXP 60
9086: PUSH
9087: LD_INT 0
9089: ST_TO_ADDR
// sStu := false ;
9090: LD_ADDR_EXP 64
9094: PUSH
9095: LD_INT 0
9097: ST_TO_ADDR
// sBazooka := false ;
9098: LD_ADDR_EXP 67
9102: PUSH
9103: LD_INT 0
9105: ST_TO_ADDR
// sMortar := false ;
9106: LD_ADDR_EXP 68
9110: PUSH
9111: LD_INT 0
9113: ST_TO_ADDR
// sRanger := false ;
9114: LD_ADDR_EXP 78
9118: PUSH
9119: LD_INT 0
9121: ST_TO_ADDR
// sComputer := false ;
9122: LD_ADDR_EXP 79
9126: PUSH
9127: LD_INT 0
9129: ST_TO_ADDR
// s30 := false ;
9130: LD_ADDR_EXP 80
9134: PUSH
9135: LD_INT 0
9137: ST_TO_ADDR
// s60 := false ;
9138: LD_ADDR_EXP 81
9142: PUSH
9143: LD_INT 0
9145: ST_TO_ADDR
// end ;
9146: LD_VAR 0 1
9150: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9151: LD_INT 0
9153: PPUSH
9154: PPUSH
9155: PPUSH
9156: PPUSH
9157: PPUSH
9158: PPUSH
9159: PPUSH
// result := [ ] ;
9160: LD_ADDR_VAR 0 2
9164: PUSH
9165: EMPTY
9166: ST_TO_ADDR
// if campaign_id = 1 then
9167: LD_OWVAR 69
9171: PUSH
9172: LD_INT 1
9174: EQUAL
9175: IFFALSE 12341
// begin case mission_number of 1 :
9177: LD_OWVAR 70
9181: PUSH
9182: LD_INT 1
9184: DOUBLE
9185: EQUAL
9186: IFTRUE 9190
9188: GO 9266
9190: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9191: LD_ADDR_VAR 0 2
9195: PUSH
9196: LD_INT 2
9198: PUSH
9199: LD_INT 4
9201: PUSH
9202: LD_INT 11
9204: PUSH
9205: LD_INT 12
9207: PUSH
9208: LD_INT 15
9210: PUSH
9211: LD_INT 16
9213: PUSH
9214: LD_INT 22
9216: PUSH
9217: LD_INT 23
9219: PUSH
9220: LD_INT 26
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: PUSH
9234: LD_INT 101
9236: PUSH
9237: LD_INT 102
9239: PUSH
9240: LD_INT 106
9242: PUSH
9243: LD_INT 116
9245: PUSH
9246: LD_INT 117
9248: PUSH
9249: LD_INT 118
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: ST_TO_ADDR
9264: GO 12339
9266: LD_INT 2
9268: DOUBLE
9269: EQUAL
9270: IFTRUE 9274
9272: GO 9358
9274: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9275: LD_ADDR_VAR 0 2
9279: PUSH
9280: LD_INT 2
9282: PUSH
9283: LD_INT 4
9285: PUSH
9286: LD_INT 11
9288: PUSH
9289: LD_INT 12
9291: PUSH
9292: LD_INT 15
9294: PUSH
9295: LD_INT 16
9297: PUSH
9298: LD_INT 22
9300: PUSH
9301: LD_INT 23
9303: PUSH
9304: LD_INT 26
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: PUSH
9318: LD_INT 101
9320: PUSH
9321: LD_INT 102
9323: PUSH
9324: LD_INT 105
9326: PUSH
9327: LD_INT 106
9329: PUSH
9330: LD_INT 108
9332: PUSH
9333: LD_INT 116
9335: PUSH
9336: LD_INT 117
9338: PUSH
9339: LD_INT 118
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: ST_TO_ADDR
9356: GO 12339
9358: LD_INT 3
9360: DOUBLE
9361: EQUAL
9362: IFTRUE 9366
9364: GO 9454
9366: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9367: LD_ADDR_VAR 0 2
9371: PUSH
9372: LD_INT 2
9374: PUSH
9375: LD_INT 4
9377: PUSH
9378: LD_INT 5
9380: PUSH
9381: LD_INT 11
9383: PUSH
9384: LD_INT 12
9386: PUSH
9387: LD_INT 15
9389: PUSH
9390: LD_INT 16
9392: PUSH
9393: LD_INT 22
9395: PUSH
9396: LD_INT 26
9398: PUSH
9399: LD_INT 36
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: PUSH
9414: LD_INT 101
9416: PUSH
9417: LD_INT 102
9419: PUSH
9420: LD_INT 105
9422: PUSH
9423: LD_INT 106
9425: PUSH
9426: LD_INT 108
9428: PUSH
9429: LD_INT 116
9431: PUSH
9432: LD_INT 117
9434: PUSH
9435: LD_INT 118
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: ST_TO_ADDR
9452: GO 12339
9454: LD_INT 4
9456: DOUBLE
9457: EQUAL
9458: IFTRUE 9462
9460: GO 9558
9462: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9463: LD_ADDR_VAR 0 2
9467: PUSH
9468: LD_INT 2
9470: PUSH
9471: LD_INT 4
9473: PUSH
9474: LD_INT 5
9476: PUSH
9477: LD_INT 8
9479: PUSH
9480: LD_INT 11
9482: PUSH
9483: LD_INT 12
9485: PUSH
9486: LD_INT 15
9488: PUSH
9489: LD_INT 16
9491: PUSH
9492: LD_INT 22
9494: PUSH
9495: LD_INT 23
9497: PUSH
9498: LD_INT 26
9500: PUSH
9501: LD_INT 36
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: PUSH
9518: LD_INT 101
9520: PUSH
9521: LD_INT 102
9523: PUSH
9524: LD_INT 105
9526: PUSH
9527: LD_INT 106
9529: PUSH
9530: LD_INT 108
9532: PUSH
9533: LD_INT 116
9535: PUSH
9536: LD_INT 117
9538: PUSH
9539: LD_INT 118
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: ST_TO_ADDR
9556: GO 12339
9558: LD_INT 5
9560: DOUBLE
9561: EQUAL
9562: IFTRUE 9566
9564: GO 9678
9566: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9567: LD_ADDR_VAR 0 2
9571: PUSH
9572: LD_INT 2
9574: PUSH
9575: LD_INT 4
9577: PUSH
9578: LD_INT 5
9580: PUSH
9581: LD_INT 6
9583: PUSH
9584: LD_INT 8
9586: PUSH
9587: LD_INT 11
9589: PUSH
9590: LD_INT 12
9592: PUSH
9593: LD_INT 15
9595: PUSH
9596: LD_INT 16
9598: PUSH
9599: LD_INT 22
9601: PUSH
9602: LD_INT 23
9604: PUSH
9605: LD_INT 25
9607: PUSH
9608: LD_INT 26
9610: PUSH
9611: LD_INT 36
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 101
9632: PUSH
9633: LD_INT 102
9635: PUSH
9636: LD_INT 105
9638: PUSH
9639: LD_INT 106
9641: PUSH
9642: LD_INT 108
9644: PUSH
9645: LD_INT 109
9647: PUSH
9648: LD_INT 112
9650: PUSH
9651: LD_INT 116
9653: PUSH
9654: LD_INT 117
9656: PUSH
9657: LD_INT 118
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: ST_TO_ADDR
9676: GO 12339
9678: LD_INT 6
9680: DOUBLE
9681: EQUAL
9682: IFTRUE 9686
9684: GO 9818
9686: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9687: LD_ADDR_VAR 0 2
9691: PUSH
9692: LD_INT 2
9694: PUSH
9695: LD_INT 4
9697: PUSH
9698: LD_INT 5
9700: PUSH
9701: LD_INT 6
9703: PUSH
9704: LD_INT 8
9706: PUSH
9707: LD_INT 11
9709: PUSH
9710: LD_INT 12
9712: PUSH
9713: LD_INT 15
9715: PUSH
9716: LD_INT 16
9718: PUSH
9719: LD_INT 20
9721: PUSH
9722: LD_INT 21
9724: PUSH
9725: LD_INT 22
9727: PUSH
9728: LD_INT 23
9730: PUSH
9731: LD_INT 25
9733: PUSH
9734: LD_INT 26
9736: PUSH
9737: LD_INT 30
9739: PUSH
9740: LD_INT 31
9742: PUSH
9743: LD_INT 32
9745: PUSH
9746: LD_INT 36
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: PUSH
9770: LD_INT 101
9772: PUSH
9773: LD_INT 102
9775: PUSH
9776: LD_INT 105
9778: PUSH
9779: LD_INT 106
9781: PUSH
9782: LD_INT 108
9784: PUSH
9785: LD_INT 109
9787: PUSH
9788: LD_INT 112
9790: PUSH
9791: LD_INT 116
9793: PUSH
9794: LD_INT 117
9796: PUSH
9797: LD_INT 118
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: ST_TO_ADDR
9816: GO 12339
9818: LD_INT 7
9820: DOUBLE
9821: EQUAL
9822: IFTRUE 9826
9824: GO 9938
9826: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9827: LD_ADDR_VAR 0 2
9831: PUSH
9832: LD_INT 2
9834: PUSH
9835: LD_INT 4
9837: PUSH
9838: LD_INT 5
9840: PUSH
9841: LD_INT 7
9843: PUSH
9844: LD_INT 11
9846: PUSH
9847: LD_INT 12
9849: PUSH
9850: LD_INT 15
9852: PUSH
9853: LD_INT 16
9855: PUSH
9856: LD_INT 20
9858: PUSH
9859: LD_INT 21
9861: PUSH
9862: LD_INT 22
9864: PUSH
9865: LD_INT 23
9867: PUSH
9868: LD_INT 25
9870: PUSH
9871: LD_INT 26
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 101
9892: PUSH
9893: LD_INT 102
9895: PUSH
9896: LD_INT 103
9898: PUSH
9899: LD_INT 105
9901: PUSH
9902: LD_INT 106
9904: PUSH
9905: LD_INT 108
9907: PUSH
9908: LD_INT 112
9910: PUSH
9911: LD_INT 116
9913: PUSH
9914: LD_INT 117
9916: PUSH
9917: LD_INT 118
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: ST_TO_ADDR
9936: GO 12339
9938: LD_INT 8
9940: DOUBLE
9941: EQUAL
9942: IFTRUE 9946
9944: GO 10086
9946: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9947: LD_ADDR_VAR 0 2
9951: PUSH
9952: LD_INT 2
9954: PUSH
9955: LD_INT 4
9957: PUSH
9958: LD_INT 5
9960: PUSH
9961: LD_INT 6
9963: PUSH
9964: LD_INT 7
9966: PUSH
9967: LD_INT 8
9969: PUSH
9970: LD_INT 11
9972: PUSH
9973: LD_INT 12
9975: PUSH
9976: LD_INT 15
9978: PUSH
9979: LD_INT 16
9981: PUSH
9982: LD_INT 20
9984: PUSH
9985: LD_INT 21
9987: PUSH
9988: LD_INT 22
9990: PUSH
9991: LD_INT 23
9993: PUSH
9994: LD_INT 25
9996: PUSH
9997: LD_INT 26
9999: PUSH
10000: LD_INT 30
10002: PUSH
10003: LD_INT 31
10005: PUSH
10006: LD_INT 32
10008: PUSH
10009: LD_INT 36
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 101
10036: PUSH
10037: LD_INT 102
10039: PUSH
10040: LD_INT 103
10042: PUSH
10043: LD_INT 105
10045: PUSH
10046: LD_INT 106
10048: PUSH
10049: LD_INT 108
10051: PUSH
10052: LD_INT 109
10054: PUSH
10055: LD_INT 112
10057: PUSH
10058: LD_INT 116
10060: PUSH
10061: LD_INT 117
10063: PUSH
10064: LD_INT 118
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: ST_TO_ADDR
10084: GO 12339
10086: LD_INT 9
10088: DOUBLE
10089: EQUAL
10090: IFTRUE 10094
10092: GO 10242
10094: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10095: LD_ADDR_VAR 0 2
10099: PUSH
10100: LD_INT 2
10102: PUSH
10103: LD_INT 4
10105: PUSH
10106: LD_INT 5
10108: PUSH
10109: LD_INT 6
10111: PUSH
10112: LD_INT 7
10114: PUSH
10115: LD_INT 8
10117: PUSH
10118: LD_INT 11
10120: PUSH
10121: LD_INT 12
10123: PUSH
10124: LD_INT 15
10126: PUSH
10127: LD_INT 16
10129: PUSH
10130: LD_INT 20
10132: PUSH
10133: LD_INT 21
10135: PUSH
10136: LD_INT 22
10138: PUSH
10139: LD_INT 23
10141: PUSH
10142: LD_INT 25
10144: PUSH
10145: LD_INT 26
10147: PUSH
10148: LD_INT 28
10150: PUSH
10151: LD_INT 30
10153: PUSH
10154: LD_INT 31
10156: PUSH
10157: LD_INT 32
10159: PUSH
10160: LD_INT 36
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: PUSH
10186: LD_INT 101
10188: PUSH
10189: LD_INT 102
10191: PUSH
10192: LD_INT 103
10194: PUSH
10195: LD_INT 105
10197: PUSH
10198: LD_INT 106
10200: PUSH
10201: LD_INT 108
10203: PUSH
10204: LD_INT 109
10206: PUSH
10207: LD_INT 112
10209: PUSH
10210: LD_INT 114
10212: PUSH
10213: LD_INT 116
10215: PUSH
10216: LD_INT 117
10218: PUSH
10219: LD_INT 118
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: ST_TO_ADDR
10240: GO 12339
10242: LD_INT 10
10244: DOUBLE
10245: EQUAL
10246: IFTRUE 10250
10248: GO 10446
10250: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10251: LD_ADDR_VAR 0 2
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: LD_INT 4
10261: PUSH
10262: LD_INT 5
10264: PUSH
10265: LD_INT 6
10267: PUSH
10268: LD_INT 7
10270: PUSH
10271: LD_INT 8
10273: PUSH
10274: LD_INT 9
10276: PUSH
10277: LD_INT 10
10279: PUSH
10280: LD_INT 11
10282: PUSH
10283: LD_INT 12
10285: PUSH
10286: LD_INT 13
10288: PUSH
10289: LD_INT 14
10291: PUSH
10292: LD_INT 15
10294: PUSH
10295: LD_INT 16
10297: PUSH
10298: LD_INT 17
10300: PUSH
10301: LD_INT 18
10303: PUSH
10304: LD_INT 19
10306: PUSH
10307: LD_INT 20
10309: PUSH
10310: LD_INT 21
10312: PUSH
10313: LD_INT 22
10315: PUSH
10316: LD_INT 23
10318: PUSH
10319: LD_INT 24
10321: PUSH
10322: LD_INT 25
10324: PUSH
10325: LD_INT 26
10327: PUSH
10328: LD_INT 28
10330: PUSH
10331: LD_INT 30
10333: PUSH
10334: LD_INT 31
10336: PUSH
10337: LD_INT 32
10339: PUSH
10340: LD_INT 36
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 101
10376: PUSH
10377: LD_INT 102
10379: PUSH
10380: LD_INT 103
10382: PUSH
10383: LD_INT 104
10385: PUSH
10386: LD_INT 105
10388: PUSH
10389: LD_INT 106
10391: PUSH
10392: LD_INT 107
10394: PUSH
10395: LD_INT 108
10397: PUSH
10398: LD_INT 109
10400: PUSH
10401: LD_INT 110
10403: PUSH
10404: LD_INT 111
10406: PUSH
10407: LD_INT 112
10409: PUSH
10410: LD_INT 114
10412: PUSH
10413: LD_INT 116
10415: PUSH
10416: LD_INT 117
10418: PUSH
10419: LD_INT 118
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: ST_TO_ADDR
10444: GO 12339
10446: LD_INT 11
10448: DOUBLE
10449: EQUAL
10450: IFTRUE 10454
10452: GO 10658
10454: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10455: LD_ADDR_VAR 0 2
10459: PUSH
10460: LD_INT 2
10462: PUSH
10463: LD_INT 3
10465: PUSH
10466: LD_INT 4
10468: PUSH
10469: LD_INT 5
10471: PUSH
10472: LD_INT 6
10474: PUSH
10475: LD_INT 7
10477: PUSH
10478: LD_INT 8
10480: PUSH
10481: LD_INT 9
10483: PUSH
10484: LD_INT 10
10486: PUSH
10487: LD_INT 11
10489: PUSH
10490: LD_INT 12
10492: PUSH
10493: LD_INT 13
10495: PUSH
10496: LD_INT 14
10498: PUSH
10499: LD_INT 15
10501: PUSH
10502: LD_INT 16
10504: PUSH
10505: LD_INT 17
10507: PUSH
10508: LD_INT 18
10510: PUSH
10511: LD_INT 19
10513: PUSH
10514: LD_INT 20
10516: PUSH
10517: LD_INT 21
10519: PUSH
10520: LD_INT 22
10522: PUSH
10523: LD_INT 23
10525: PUSH
10526: LD_INT 24
10528: PUSH
10529: LD_INT 25
10531: PUSH
10532: LD_INT 26
10534: PUSH
10535: LD_INT 28
10537: PUSH
10538: LD_INT 30
10540: PUSH
10541: LD_INT 31
10543: PUSH
10544: LD_INT 32
10546: PUSH
10547: LD_INT 34
10549: PUSH
10550: LD_INT 36
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 101
10588: PUSH
10589: LD_INT 102
10591: PUSH
10592: LD_INT 103
10594: PUSH
10595: LD_INT 104
10597: PUSH
10598: LD_INT 105
10600: PUSH
10601: LD_INT 106
10603: PUSH
10604: LD_INT 107
10606: PUSH
10607: LD_INT 108
10609: PUSH
10610: LD_INT 109
10612: PUSH
10613: LD_INT 110
10615: PUSH
10616: LD_INT 111
10618: PUSH
10619: LD_INT 112
10621: PUSH
10622: LD_INT 114
10624: PUSH
10625: LD_INT 116
10627: PUSH
10628: LD_INT 117
10630: PUSH
10631: LD_INT 118
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: ST_TO_ADDR
10656: GO 12339
10658: LD_INT 12
10660: DOUBLE
10661: EQUAL
10662: IFTRUE 10666
10664: GO 10886
10666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10667: LD_ADDR_VAR 0 2
10671: PUSH
10672: LD_INT 1
10674: PUSH
10675: LD_INT 2
10677: PUSH
10678: LD_INT 3
10680: PUSH
10681: LD_INT 4
10683: PUSH
10684: LD_INT 5
10686: PUSH
10687: LD_INT 6
10689: PUSH
10690: LD_INT 7
10692: PUSH
10693: LD_INT 8
10695: PUSH
10696: LD_INT 9
10698: PUSH
10699: LD_INT 10
10701: PUSH
10702: LD_INT 11
10704: PUSH
10705: LD_INT 12
10707: PUSH
10708: LD_INT 13
10710: PUSH
10711: LD_INT 14
10713: PUSH
10714: LD_INT 15
10716: PUSH
10717: LD_INT 16
10719: PUSH
10720: LD_INT 17
10722: PUSH
10723: LD_INT 18
10725: PUSH
10726: LD_INT 19
10728: PUSH
10729: LD_INT 20
10731: PUSH
10732: LD_INT 21
10734: PUSH
10735: LD_INT 22
10737: PUSH
10738: LD_INT 23
10740: PUSH
10741: LD_INT 24
10743: PUSH
10744: LD_INT 25
10746: PUSH
10747: LD_INT 26
10749: PUSH
10750: LD_INT 27
10752: PUSH
10753: LD_INT 28
10755: PUSH
10756: LD_INT 30
10758: PUSH
10759: LD_INT 31
10761: PUSH
10762: LD_INT 32
10764: PUSH
10765: LD_INT 33
10767: PUSH
10768: LD_INT 34
10770: PUSH
10771: LD_INT 36
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: PUSH
10810: LD_INT 101
10812: PUSH
10813: LD_INT 102
10815: PUSH
10816: LD_INT 103
10818: PUSH
10819: LD_INT 104
10821: PUSH
10822: LD_INT 105
10824: PUSH
10825: LD_INT 106
10827: PUSH
10828: LD_INT 107
10830: PUSH
10831: LD_INT 108
10833: PUSH
10834: LD_INT 109
10836: PUSH
10837: LD_INT 110
10839: PUSH
10840: LD_INT 111
10842: PUSH
10843: LD_INT 112
10845: PUSH
10846: LD_INT 113
10848: PUSH
10849: LD_INT 114
10851: PUSH
10852: LD_INT 116
10854: PUSH
10855: LD_INT 117
10857: PUSH
10858: LD_INT 118
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: ST_TO_ADDR
10884: GO 12339
10886: LD_INT 13
10888: DOUBLE
10889: EQUAL
10890: IFTRUE 10894
10892: GO 11102
10894: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10895: LD_ADDR_VAR 0 2
10899: PUSH
10900: LD_INT 1
10902: PUSH
10903: LD_INT 2
10905: PUSH
10906: LD_INT 3
10908: PUSH
10909: LD_INT 4
10911: PUSH
10912: LD_INT 5
10914: PUSH
10915: LD_INT 8
10917: PUSH
10918: LD_INT 9
10920: PUSH
10921: LD_INT 10
10923: PUSH
10924: LD_INT 11
10926: PUSH
10927: LD_INT 12
10929: PUSH
10930: LD_INT 14
10932: PUSH
10933: LD_INT 15
10935: PUSH
10936: LD_INT 16
10938: PUSH
10939: LD_INT 17
10941: PUSH
10942: LD_INT 18
10944: PUSH
10945: LD_INT 19
10947: PUSH
10948: LD_INT 20
10950: PUSH
10951: LD_INT 21
10953: PUSH
10954: LD_INT 22
10956: PUSH
10957: LD_INT 23
10959: PUSH
10960: LD_INT 24
10962: PUSH
10963: LD_INT 25
10965: PUSH
10966: LD_INT 26
10968: PUSH
10969: LD_INT 27
10971: PUSH
10972: LD_INT 28
10974: PUSH
10975: LD_INT 30
10977: PUSH
10978: LD_INT 31
10980: PUSH
10981: LD_INT 32
10983: PUSH
10984: LD_INT 33
10986: PUSH
10987: LD_INT 34
10989: PUSH
10990: LD_INT 36
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 101
11028: PUSH
11029: LD_INT 102
11031: PUSH
11032: LD_INT 103
11034: PUSH
11035: LD_INT 104
11037: PUSH
11038: LD_INT 105
11040: PUSH
11041: LD_INT 106
11043: PUSH
11044: LD_INT 107
11046: PUSH
11047: LD_INT 108
11049: PUSH
11050: LD_INT 109
11052: PUSH
11053: LD_INT 110
11055: PUSH
11056: LD_INT 111
11058: PUSH
11059: LD_INT 112
11061: PUSH
11062: LD_INT 113
11064: PUSH
11065: LD_INT 114
11067: PUSH
11068: LD_INT 116
11070: PUSH
11071: LD_INT 117
11073: PUSH
11074: LD_INT 118
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: ST_TO_ADDR
11100: GO 12339
11102: LD_INT 14
11104: DOUBLE
11105: EQUAL
11106: IFTRUE 11110
11108: GO 11334
11110: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11111: LD_ADDR_VAR 0 2
11115: PUSH
11116: LD_INT 1
11118: PUSH
11119: LD_INT 2
11121: PUSH
11122: LD_INT 3
11124: PUSH
11125: LD_INT 4
11127: PUSH
11128: LD_INT 5
11130: PUSH
11131: LD_INT 6
11133: PUSH
11134: LD_INT 7
11136: PUSH
11137: LD_INT 8
11139: PUSH
11140: LD_INT 9
11142: PUSH
11143: LD_INT 10
11145: PUSH
11146: LD_INT 11
11148: PUSH
11149: LD_INT 12
11151: PUSH
11152: LD_INT 13
11154: PUSH
11155: LD_INT 14
11157: PUSH
11158: LD_INT 15
11160: PUSH
11161: LD_INT 16
11163: PUSH
11164: LD_INT 17
11166: PUSH
11167: LD_INT 18
11169: PUSH
11170: LD_INT 19
11172: PUSH
11173: LD_INT 20
11175: PUSH
11176: LD_INT 21
11178: PUSH
11179: LD_INT 22
11181: PUSH
11182: LD_INT 23
11184: PUSH
11185: LD_INT 24
11187: PUSH
11188: LD_INT 25
11190: PUSH
11191: LD_INT 26
11193: PUSH
11194: LD_INT 27
11196: PUSH
11197: LD_INT 28
11199: PUSH
11200: LD_INT 29
11202: PUSH
11203: LD_INT 30
11205: PUSH
11206: LD_INT 31
11208: PUSH
11209: LD_INT 32
11211: PUSH
11212: LD_INT 33
11214: PUSH
11215: LD_INT 34
11217: PUSH
11218: LD_INT 36
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 101
11260: PUSH
11261: LD_INT 102
11263: PUSH
11264: LD_INT 103
11266: PUSH
11267: LD_INT 104
11269: PUSH
11270: LD_INT 105
11272: PUSH
11273: LD_INT 106
11275: PUSH
11276: LD_INT 107
11278: PUSH
11279: LD_INT 108
11281: PUSH
11282: LD_INT 109
11284: PUSH
11285: LD_INT 110
11287: PUSH
11288: LD_INT 111
11290: PUSH
11291: LD_INT 112
11293: PUSH
11294: LD_INT 113
11296: PUSH
11297: LD_INT 114
11299: PUSH
11300: LD_INT 116
11302: PUSH
11303: LD_INT 117
11305: PUSH
11306: LD_INT 118
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: ST_TO_ADDR
11332: GO 12339
11334: LD_INT 15
11336: DOUBLE
11337: EQUAL
11338: IFTRUE 11342
11340: GO 11566
11342: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11343: LD_ADDR_VAR 0 2
11347: PUSH
11348: LD_INT 1
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: LD_INT 3
11356: PUSH
11357: LD_INT 4
11359: PUSH
11360: LD_INT 5
11362: PUSH
11363: LD_INT 6
11365: PUSH
11366: LD_INT 7
11368: PUSH
11369: LD_INT 8
11371: PUSH
11372: LD_INT 9
11374: PUSH
11375: LD_INT 10
11377: PUSH
11378: LD_INT 11
11380: PUSH
11381: LD_INT 12
11383: PUSH
11384: LD_INT 13
11386: PUSH
11387: LD_INT 14
11389: PUSH
11390: LD_INT 15
11392: PUSH
11393: LD_INT 16
11395: PUSH
11396: LD_INT 17
11398: PUSH
11399: LD_INT 18
11401: PUSH
11402: LD_INT 19
11404: PUSH
11405: LD_INT 20
11407: PUSH
11408: LD_INT 21
11410: PUSH
11411: LD_INT 22
11413: PUSH
11414: LD_INT 23
11416: PUSH
11417: LD_INT 24
11419: PUSH
11420: LD_INT 25
11422: PUSH
11423: LD_INT 26
11425: PUSH
11426: LD_INT 27
11428: PUSH
11429: LD_INT 28
11431: PUSH
11432: LD_INT 29
11434: PUSH
11435: LD_INT 30
11437: PUSH
11438: LD_INT 31
11440: PUSH
11441: LD_INT 32
11443: PUSH
11444: LD_INT 33
11446: PUSH
11447: LD_INT 34
11449: PUSH
11450: LD_INT 36
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 101
11492: PUSH
11493: LD_INT 102
11495: PUSH
11496: LD_INT 103
11498: PUSH
11499: LD_INT 104
11501: PUSH
11502: LD_INT 105
11504: PUSH
11505: LD_INT 106
11507: PUSH
11508: LD_INT 107
11510: PUSH
11511: LD_INT 108
11513: PUSH
11514: LD_INT 109
11516: PUSH
11517: LD_INT 110
11519: PUSH
11520: LD_INT 111
11522: PUSH
11523: LD_INT 112
11525: PUSH
11526: LD_INT 113
11528: PUSH
11529: LD_INT 114
11531: PUSH
11532: LD_INT 116
11534: PUSH
11535: LD_INT 117
11537: PUSH
11538: LD_INT 118
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: ST_TO_ADDR
11564: GO 12339
11566: LD_INT 16
11568: DOUBLE
11569: EQUAL
11570: IFTRUE 11574
11572: GO 11710
11574: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11575: LD_ADDR_VAR 0 2
11579: PUSH
11580: LD_INT 2
11582: PUSH
11583: LD_INT 4
11585: PUSH
11586: LD_INT 5
11588: PUSH
11589: LD_INT 7
11591: PUSH
11592: LD_INT 11
11594: PUSH
11595: LD_INT 12
11597: PUSH
11598: LD_INT 15
11600: PUSH
11601: LD_INT 16
11603: PUSH
11604: LD_INT 20
11606: PUSH
11607: LD_INT 21
11609: PUSH
11610: LD_INT 22
11612: PUSH
11613: LD_INT 23
11615: PUSH
11616: LD_INT 25
11618: PUSH
11619: LD_INT 26
11621: PUSH
11622: LD_INT 30
11624: PUSH
11625: LD_INT 31
11627: PUSH
11628: LD_INT 32
11630: PUSH
11631: LD_INT 33
11633: PUSH
11634: LD_INT 34
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 101
11660: PUSH
11661: LD_INT 102
11663: PUSH
11664: LD_INT 103
11666: PUSH
11667: LD_INT 106
11669: PUSH
11670: LD_INT 108
11672: PUSH
11673: LD_INT 112
11675: PUSH
11676: LD_INT 113
11678: PUSH
11679: LD_INT 114
11681: PUSH
11682: LD_INT 116
11684: PUSH
11685: LD_INT 117
11687: PUSH
11688: LD_INT 118
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: ST_TO_ADDR
11708: GO 12339
11710: LD_INT 17
11712: DOUBLE
11713: EQUAL
11714: IFTRUE 11718
11716: GO 11942
11718: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11719: LD_ADDR_VAR 0 2
11723: PUSH
11724: LD_INT 1
11726: PUSH
11727: LD_INT 2
11729: PUSH
11730: LD_INT 3
11732: PUSH
11733: LD_INT 4
11735: PUSH
11736: LD_INT 5
11738: PUSH
11739: LD_INT 6
11741: PUSH
11742: LD_INT 7
11744: PUSH
11745: LD_INT 8
11747: PUSH
11748: LD_INT 9
11750: PUSH
11751: LD_INT 10
11753: PUSH
11754: LD_INT 11
11756: PUSH
11757: LD_INT 12
11759: PUSH
11760: LD_INT 13
11762: PUSH
11763: LD_INT 14
11765: PUSH
11766: LD_INT 15
11768: PUSH
11769: LD_INT 16
11771: PUSH
11772: LD_INT 17
11774: PUSH
11775: LD_INT 18
11777: PUSH
11778: LD_INT 19
11780: PUSH
11781: LD_INT 20
11783: PUSH
11784: LD_INT 21
11786: PUSH
11787: LD_INT 22
11789: PUSH
11790: LD_INT 23
11792: PUSH
11793: LD_INT 24
11795: PUSH
11796: LD_INT 25
11798: PUSH
11799: LD_INT 26
11801: PUSH
11802: LD_INT 27
11804: PUSH
11805: LD_INT 28
11807: PUSH
11808: LD_INT 29
11810: PUSH
11811: LD_INT 30
11813: PUSH
11814: LD_INT 31
11816: PUSH
11817: LD_INT 32
11819: PUSH
11820: LD_INT 33
11822: PUSH
11823: LD_INT 34
11825: PUSH
11826: LD_INT 36
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: PUSH
11866: LD_INT 101
11868: PUSH
11869: LD_INT 102
11871: PUSH
11872: LD_INT 103
11874: PUSH
11875: LD_INT 104
11877: PUSH
11878: LD_INT 105
11880: PUSH
11881: LD_INT 106
11883: PUSH
11884: LD_INT 107
11886: PUSH
11887: LD_INT 108
11889: PUSH
11890: LD_INT 109
11892: PUSH
11893: LD_INT 110
11895: PUSH
11896: LD_INT 111
11898: PUSH
11899: LD_INT 112
11901: PUSH
11902: LD_INT 113
11904: PUSH
11905: LD_INT 114
11907: PUSH
11908: LD_INT 116
11910: PUSH
11911: LD_INT 117
11913: PUSH
11914: LD_INT 118
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: ST_TO_ADDR
11940: GO 12339
11942: LD_INT 18
11944: DOUBLE
11945: EQUAL
11946: IFTRUE 11950
11948: GO 12098
11950: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11951: LD_ADDR_VAR 0 2
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: LD_INT 4
11961: PUSH
11962: LD_INT 5
11964: PUSH
11965: LD_INT 7
11967: PUSH
11968: LD_INT 11
11970: PUSH
11971: LD_INT 12
11973: PUSH
11974: LD_INT 15
11976: PUSH
11977: LD_INT 16
11979: PUSH
11980: LD_INT 20
11982: PUSH
11983: LD_INT 21
11985: PUSH
11986: LD_INT 22
11988: PUSH
11989: LD_INT 23
11991: PUSH
11992: LD_INT 25
11994: PUSH
11995: LD_INT 26
11997: PUSH
11998: LD_INT 30
12000: PUSH
12001: LD_INT 31
12003: PUSH
12004: LD_INT 32
12006: PUSH
12007: LD_INT 33
12009: PUSH
12010: LD_INT 34
12012: PUSH
12013: LD_INT 35
12015: PUSH
12016: LD_INT 36
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 101
12044: PUSH
12045: LD_INT 102
12047: PUSH
12048: LD_INT 103
12050: PUSH
12051: LD_INT 106
12053: PUSH
12054: LD_INT 108
12056: PUSH
12057: LD_INT 112
12059: PUSH
12060: LD_INT 113
12062: PUSH
12063: LD_INT 114
12065: PUSH
12066: LD_INT 115
12068: PUSH
12069: LD_INT 116
12071: PUSH
12072: LD_INT 117
12074: PUSH
12075: LD_INT 118
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: ST_TO_ADDR
12096: GO 12339
12098: LD_INT 19
12100: DOUBLE
12101: EQUAL
12102: IFTRUE 12106
12104: GO 12338
12106: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12107: LD_ADDR_VAR 0 2
12111: PUSH
12112: LD_INT 1
12114: PUSH
12115: LD_INT 2
12117: PUSH
12118: LD_INT 3
12120: PUSH
12121: LD_INT 4
12123: PUSH
12124: LD_INT 5
12126: PUSH
12127: LD_INT 6
12129: PUSH
12130: LD_INT 7
12132: PUSH
12133: LD_INT 8
12135: PUSH
12136: LD_INT 9
12138: PUSH
12139: LD_INT 10
12141: PUSH
12142: LD_INT 11
12144: PUSH
12145: LD_INT 12
12147: PUSH
12148: LD_INT 13
12150: PUSH
12151: LD_INT 14
12153: PUSH
12154: LD_INT 15
12156: PUSH
12157: LD_INT 16
12159: PUSH
12160: LD_INT 17
12162: PUSH
12163: LD_INT 18
12165: PUSH
12166: LD_INT 19
12168: PUSH
12169: LD_INT 20
12171: PUSH
12172: LD_INT 21
12174: PUSH
12175: LD_INT 22
12177: PUSH
12178: LD_INT 23
12180: PUSH
12181: LD_INT 24
12183: PUSH
12184: LD_INT 25
12186: PUSH
12187: LD_INT 26
12189: PUSH
12190: LD_INT 27
12192: PUSH
12193: LD_INT 28
12195: PUSH
12196: LD_INT 29
12198: PUSH
12199: LD_INT 30
12201: PUSH
12202: LD_INT 31
12204: PUSH
12205: LD_INT 32
12207: PUSH
12208: LD_INT 33
12210: PUSH
12211: LD_INT 34
12213: PUSH
12214: LD_INT 35
12216: PUSH
12217: LD_INT 36
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 101
12260: PUSH
12261: LD_INT 102
12263: PUSH
12264: LD_INT 103
12266: PUSH
12267: LD_INT 104
12269: PUSH
12270: LD_INT 105
12272: PUSH
12273: LD_INT 106
12275: PUSH
12276: LD_INT 107
12278: PUSH
12279: LD_INT 108
12281: PUSH
12282: LD_INT 109
12284: PUSH
12285: LD_INT 110
12287: PUSH
12288: LD_INT 111
12290: PUSH
12291: LD_INT 112
12293: PUSH
12294: LD_INT 113
12296: PUSH
12297: LD_INT 114
12299: PUSH
12300: LD_INT 115
12302: PUSH
12303: LD_INT 116
12305: PUSH
12306: LD_INT 117
12308: PUSH
12309: LD_INT 118
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: ST_TO_ADDR
12336: GO 12339
12338: POP
// end else
12339: GO 12570
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12341: LD_ADDR_VAR 0 2
12345: PUSH
12346: LD_INT 1
12348: PUSH
12349: LD_INT 2
12351: PUSH
12352: LD_INT 3
12354: PUSH
12355: LD_INT 4
12357: PUSH
12358: LD_INT 5
12360: PUSH
12361: LD_INT 6
12363: PUSH
12364: LD_INT 7
12366: PUSH
12367: LD_INT 8
12369: PUSH
12370: LD_INT 9
12372: PUSH
12373: LD_INT 10
12375: PUSH
12376: LD_INT 11
12378: PUSH
12379: LD_INT 12
12381: PUSH
12382: LD_INT 13
12384: PUSH
12385: LD_INT 14
12387: PUSH
12388: LD_INT 15
12390: PUSH
12391: LD_INT 16
12393: PUSH
12394: LD_INT 17
12396: PUSH
12397: LD_INT 18
12399: PUSH
12400: LD_INT 19
12402: PUSH
12403: LD_INT 20
12405: PUSH
12406: LD_INT 21
12408: PUSH
12409: LD_INT 22
12411: PUSH
12412: LD_INT 23
12414: PUSH
12415: LD_INT 24
12417: PUSH
12418: LD_INT 25
12420: PUSH
12421: LD_INT 26
12423: PUSH
12424: LD_INT 27
12426: PUSH
12427: LD_INT 28
12429: PUSH
12430: LD_INT 29
12432: PUSH
12433: LD_INT 30
12435: PUSH
12436: LD_INT 31
12438: PUSH
12439: LD_INT 32
12441: PUSH
12442: LD_INT 33
12444: PUSH
12445: LD_INT 34
12447: PUSH
12448: LD_INT 35
12450: PUSH
12451: LD_INT 36
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 101
12494: PUSH
12495: LD_INT 102
12497: PUSH
12498: LD_INT 103
12500: PUSH
12501: LD_INT 104
12503: PUSH
12504: LD_INT 105
12506: PUSH
12507: LD_INT 106
12509: PUSH
12510: LD_INT 107
12512: PUSH
12513: LD_INT 108
12515: PUSH
12516: LD_INT 109
12518: PUSH
12519: LD_INT 110
12521: PUSH
12522: LD_INT 111
12524: PUSH
12525: LD_INT 112
12527: PUSH
12528: LD_INT 113
12530: PUSH
12531: LD_INT 114
12533: PUSH
12534: LD_INT 115
12536: PUSH
12537: LD_INT 116
12539: PUSH
12540: LD_INT 117
12542: PUSH
12543: LD_INT 118
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: ST_TO_ADDR
// if result then
12570: LD_VAR 0 2
12574: IFFALSE 13360
// begin normal :=  ;
12576: LD_ADDR_VAR 0 5
12580: PUSH
12581: LD_STRING 
12583: ST_TO_ADDR
// hardcore :=  ;
12584: LD_ADDR_VAR 0 6
12588: PUSH
12589: LD_STRING 
12591: ST_TO_ADDR
// active :=  ;
12592: LD_ADDR_VAR 0 7
12596: PUSH
12597: LD_STRING 
12599: ST_TO_ADDR
// for i = 1 to normalCounter do
12600: LD_ADDR_VAR 0 8
12604: PUSH
12605: DOUBLE
12606: LD_INT 1
12608: DEC
12609: ST_TO_ADDR
12610: LD_EXP 26
12614: PUSH
12615: FOR_TO
12616: IFFALSE 12717
// begin tmp := 0 ;
12618: LD_ADDR_VAR 0 3
12622: PUSH
12623: LD_STRING 0
12625: ST_TO_ADDR
// if result [ 1 ] then
12626: LD_VAR 0 2
12630: PUSH
12631: LD_INT 1
12633: ARRAY
12634: IFFALSE 12699
// if result [ 1 ] [ 1 ] = i then
12636: LD_VAR 0 2
12640: PUSH
12641: LD_INT 1
12643: ARRAY
12644: PUSH
12645: LD_INT 1
12647: ARRAY
12648: PUSH
12649: LD_VAR 0 8
12653: EQUAL
12654: IFFALSE 12699
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12656: LD_ADDR_VAR 0 2
12660: PUSH
12661: LD_VAR 0 2
12665: PPUSH
12666: LD_INT 1
12668: PPUSH
12669: LD_VAR 0 2
12673: PUSH
12674: LD_INT 1
12676: ARRAY
12677: PPUSH
12678: LD_INT 1
12680: PPUSH
12681: CALL_OW 3
12685: PPUSH
12686: CALL_OW 1
12690: ST_TO_ADDR
// tmp := 1 ;
12691: LD_ADDR_VAR 0 3
12695: PUSH
12696: LD_STRING 1
12698: ST_TO_ADDR
// end ; normal := normal & tmp ;
12699: LD_ADDR_VAR 0 5
12703: PUSH
12704: LD_VAR 0 5
12708: PUSH
12709: LD_VAR 0 3
12713: STR
12714: ST_TO_ADDR
// end ;
12715: GO 12615
12717: POP
12718: POP
// for i = 1 to hardcoreCounter do
12719: LD_ADDR_VAR 0 8
12723: PUSH
12724: DOUBLE
12725: LD_INT 1
12727: DEC
12728: ST_TO_ADDR
12729: LD_EXP 27
12733: PUSH
12734: FOR_TO
12735: IFFALSE 12840
// begin tmp := 0 ;
12737: LD_ADDR_VAR 0 3
12741: PUSH
12742: LD_STRING 0
12744: ST_TO_ADDR
// if result [ 2 ] then
12745: LD_VAR 0 2
12749: PUSH
12750: LD_INT 2
12752: ARRAY
12753: IFFALSE 12822
// if result [ 2 ] [ 1 ] = 100 + i then
12755: LD_VAR 0 2
12759: PUSH
12760: LD_INT 2
12762: ARRAY
12763: PUSH
12764: LD_INT 1
12766: ARRAY
12767: PUSH
12768: LD_INT 100
12770: PUSH
12771: LD_VAR 0 8
12775: PLUS
12776: EQUAL
12777: IFFALSE 12822
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12779: LD_ADDR_VAR 0 2
12783: PUSH
12784: LD_VAR 0 2
12788: PPUSH
12789: LD_INT 2
12791: PPUSH
12792: LD_VAR 0 2
12796: PUSH
12797: LD_INT 2
12799: ARRAY
12800: PPUSH
12801: LD_INT 1
12803: PPUSH
12804: CALL_OW 3
12808: PPUSH
12809: CALL_OW 1
12813: ST_TO_ADDR
// tmp := 1 ;
12814: LD_ADDR_VAR 0 3
12818: PUSH
12819: LD_STRING 1
12821: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12822: LD_ADDR_VAR 0 6
12826: PUSH
12827: LD_VAR 0 6
12831: PUSH
12832: LD_VAR 0 3
12836: STR
12837: ST_TO_ADDR
// end ;
12838: GO 12734
12840: POP
12841: POP
// if isGameLoad then
12842: LD_VAR 0 1
12846: IFFALSE 13321
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12848: LD_ADDR_VAR 0 4
12852: PUSH
12853: LD_EXP 30
12857: PUSH
12858: LD_EXP 29
12862: PUSH
12863: LD_EXP 31
12867: PUSH
12868: LD_EXP 28
12872: PUSH
12873: LD_EXP 32
12877: PUSH
12878: LD_EXP 33
12882: PUSH
12883: LD_EXP 34
12887: PUSH
12888: LD_EXP 35
12892: PUSH
12893: LD_EXP 36
12897: PUSH
12898: LD_EXP 37
12902: PUSH
12903: LD_EXP 38
12907: PUSH
12908: LD_EXP 39
12912: PUSH
12913: LD_EXP 40
12917: PUSH
12918: LD_EXP 41
12922: PUSH
12923: LD_EXP 49
12927: PUSH
12928: LD_EXP 50
12932: PUSH
12933: LD_EXP 51
12937: PUSH
12938: LD_EXP 52
12942: PUSH
12943: LD_EXP 54
12947: PUSH
12948: LD_EXP 55
12952: PUSH
12953: LD_EXP 56
12957: PUSH
12958: LD_EXP 59
12962: PUSH
12963: LD_EXP 61
12967: PUSH
12968: LD_EXP 62
12972: PUSH
12973: LD_EXP 63
12977: PUSH
12978: LD_EXP 65
12982: PUSH
12983: LD_EXP 66
12987: PUSH
12988: LD_EXP 69
12992: PUSH
12993: LD_EXP 70
12997: PUSH
12998: LD_EXP 71
13002: PUSH
13003: LD_EXP 72
13007: PUSH
13008: LD_EXP 73
13012: PUSH
13013: LD_EXP 74
13017: PUSH
13018: LD_EXP 75
13022: PUSH
13023: LD_EXP 76
13027: PUSH
13028: LD_EXP 77
13032: PUSH
13033: LD_EXP 42
13037: PUSH
13038: LD_EXP 43
13042: PUSH
13043: LD_EXP 46
13047: PUSH
13048: LD_EXP 47
13052: PUSH
13053: LD_EXP 48
13057: PUSH
13058: LD_EXP 44
13062: PUSH
13063: LD_EXP 45
13067: PUSH
13068: LD_EXP 53
13072: PUSH
13073: LD_EXP 57
13077: PUSH
13078: LD_EXP 58
13082: PUSH
13083: LD_EXP 60
13087: PUSH
13088: LD_EXP 64
13092: PUSH
13093: LD_EXP 67
13097: PUSH
13098: LD_EXP 68
13102: PUSH
13103: LD_EXP 78
13107: PUSH
13108: LD_EXP 79
13112: PUSH
13113: LD_EXP 80
13117: PUSH
13118: LD_EXP 81
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: ST_TO_ADDR
// tmp :=  ;
13179: LD_ADDR_VAR 0 3
13183: PUSH
13184: LD_STRING 
13186: ST_TO_ADDR
// for i = 1 to normalCounter do
13187: LD_ADDR_VAR 0 8
13191: PUSH
13192: DOUBLE
13193: LD_INT 1
13195: DEC
13196: ST_TO_ADDR
13197: LD_EXP 26
13201: PUSH
13202: FOR_TO
13203: IFFALSE 13239
// begin if flags [ i ] then
13205: LD_VAR 0 4
13209: PUSH
13210: LD_VAR 0 8
13214: ARRAY
13215: IFFALSE 13237
// tmp := tmp & i & ; ;
13217: LD_ADDR_VAR 0 3
13221: PUSH
13222: LD_VAR 0 3
13226: PUSH
13227: LD_VAR 0 8
13231: STR
13232: PUSH
13233: LD_STRING ;
13235: STR
13236: ST_TO_ADDR
// end ;
13237: GO 13202
13239: POP
13240: POP
// for i = 1 to hardcoreCounter do
13241: LD_ADDR_VAR 0 8
13245: PUSH
13246: DOUBLE
13247: LD_INT 1
13249: DEC
13250: ST_TO_ADDR
13251: LD_EXP 27
13255: PUSH
13256: FOR_TO
13257: IFFALSE 13303
// begin if flags [ normalCounter + i ] then
13259: LD_VAR 0 4
13263: PUSH
13264: LD_EXP 26
13268: PUSH
13269: LD_VAR 0 8
13273: PLUS
13274: ARRAY
13275: IFFALSE 13301
// tmp := tmp & ( 100 + i ) & ; ;
13277: LD_ADDR_VAR 0 3
13281: PUSH
13282: LD_VAR 0 3
13286: PUSH
13287: LD_INT 100
13289: PUSH
13290: LD_VAR 0 8
13294: PLUS
13295: STR
13296: PUSH
13297: LD_STRING ;
13299: STR
13300: ST_TO_ADDR
// end ;
13301: GO 13256
13303: POP
13304: POP
// if tmp then
13305: LD_VAR 0 3
13309: IFFALSE 13321
// active := tmp ;
13311: LD_ADDR_VAR 0 7
13315: PUSH
13316: LD_VAR 0 3
13320: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13321: LD_STRING getStreamItemsFromMission("
13323: PUSH
13324: LD_VAR 0 5
13328: STR
13329: PUSH
13330: LD_STRING ","
13332: STR
13333: PUSH
13334: LD_VAR 0 6
13338: STR
13339: PUSH
13340: LD_STRING ","
13342: STR
13343: PUSH
13344: LD_VAR 0 7
13348: STR
13349: PUSH
13350: LD_STRING ")
13352: STR
13353: PPUSH
13354: CALL_OW 559
// end else
13358: GO 13367
// ToLua ( getStreamItemsFromMission("","","") ) ;
13360: LD_STRING getStreamItemsFromMission("","","")
13362: PPUSH
13363: CALL_OW 559
// end ;
13367: LD_VAR 0 2
13371: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13372: LD_EXP 25
13376: PUSH
13377: LD_EXP 30
13381: AND
13382: IFFALSE 13506
13384: GO 13386
13386: DISABLE
13387: LD_INT 0
13389: PPUSH
13390: PPUSH
// begin enable ;
13391: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13392: LD_ADDR_VAR 0 2
13396: PUSH
13397: LD_INT 22
13399: PUSH
13400: LD_OWVAR 2
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 2
13411: PUSH
13412: LD_INT 34
13414: PUSH
13415: LD_INT 7
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 34
13424: PUSH
13425: LD_INT 45
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 34
13434: PUSH
13435: LD_INT 28
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: LD_INT 34
13444: PUSH
13445: LD_INT 47
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PPUSH
13463: CALL_OW 69
13467: ST_TO_ADDR
// if not tmp then
13468: LD_VAR 0 2
13472: NOT
13473: IFFALSE 13477
// exit ;
13475: GO 13506
// for i in tmp do
13477: LD_ADDR_VAR 0 1
13481: PUSH
13482: LD_VAR 0 2
13486: PUSH
13487: FOR_IN
13488: IFFALSE 13504
// begin SetLives ( i , 0 ) ;
13490: LD_VAR 0 1
13494: PPUSH
13495: LD_INT 0
13497: PPUSH
13498: CALL_OW 234
// end ;
13502: GO 13487
13504: POP
13505: POP
// end ;
13506: PPOPN 2
13508: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13509: LD_EXP 25
13513: PUSH
13514: LD_EXP 31
13518: AND
13519: IFFALSE 13603
13521: GO 13523
13523: DISABLE
13524: LD_INT 0
13526: PPUSH
13527: PPUSH
// begin enable ;
13528: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13529: LD_ADDR_VAR 0 2
13533: PUSH
13534: LD_INT 22
13536: PUSH
13537: LD_OWVAR 2
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 32
13548: PUSH
13549: LD_INT 3
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 69
13564: ST_TO_ADDR
// if not tmp then
13565: LD_VAR 0 2
13569: NOT
13570: IFFALSE 13574
// exit ;
13572: GO 13603
// for i in tmp do
13574: LD_ADDR_VAR 0 1
13578: PUSH
13579: LD_VAR 0 2
13583: PUSH
13584: FOR_IN
13585: IFFALSE 13601
// begin SetLives ( i , 0 ) ;
13587: LD_VAR 0 1
13591: PPUSH
13592: LD_INT 0
13594: PPUSH
13595: CALL_OW 234
// end ;
13599: GO 13584
13601: POP
13602: POP
// end ;
13603: PPOPN 2
13605: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13606: LD_EXP 25
13610: PUSH
13611: LD_EXP 28
13615: AND
13616: IFFALSE 13709
13618: GO 13620
13620: DISABLE
13621: LD_INT 0
13623: PPUSH
// begin enable ;
13624: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13625: LD_ADDR_VAR 0 1
13629: PUSH
13630: LD_INT 22
13632: PUSH
13633: LD_OWVAR 2
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: LD_INT 2
13644: PUSH
13645: LD_INT 25
13647: PUSH
13648: LD_INT 5
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 25
13657: PUSH
13658: LD_INT 9
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 25
13667: PUSH
13668: LD_INT 8
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: PUSH
13690: FOR_IN
13691: IFFALSE 13707
// begin SetClass ( i , 1 ) ;
13693: LD_VAR 0 1
13697: PPUSH
13698: LD_INT 1
13700: PPUSH
13701: CALL_OW 336
// end ;
13705: GO 13690
13707: POP
13708: POP
// end ;
13709: PPOPN 1
13711: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13712: LD_EXP 25
13716: PUSH
13717: LD_EXP 29
13721: AND
13722: PUSH
13723: LD_OWVAR 65
13727: PUSH
13728: LD_INT 7
13730: LESS
13731: AND
13732: IFFALSE 13746
13734: GO 13736
13736: DISABLE
// begin enable ;
13737: ENABLE
// game_speed := 7 ;
13738: LD_ADDR_OWVAR 65
13742: PUSH
13743: LD_INT 7
13745: ST_TO_ADDR
// end ;
13746: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13747: LD_EXP 25
13751: PUSH
13752: LD_EXP 32
13756: AND
13757: IFFALSE 13959
13759: GO 13761
13761: DISABLE
13762: LD_INT 0
13764: PPUSH
13765: PPUSH
13766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13767: LD_ADDR_VAR 0 3
13771: PUSH
13772: LD_INT 81
13774: PUSH
13775: LD_OWVAR 2
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 21
13786: PUSH
13787: LD_INT 1
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PPUSH
13798: CALL_OW 69
13802: ST_TO_ADDR
// if not tmp then
13803: LD_VAR 0 3
13807: NOT
13808: IFFALSE 13812
// exit ;
13810: GO 13959
// if tmp > 5 then
13812: LD_VAR 0 3
13816: PUSH
13817: LD_INT 5
13819: GREATER
13820: IFFALSE 13832
// k := 5 else
13822: LD_ADDR_VAR 0 2
13826: PUSH
13827: LD_INT 5
13829: ST_TO_ADDR
13830: GO 13842
// k := tmp ;
13832: LD_ADDR_VAR 0 2
13836: PUSH
13837: LD_VAR 0 3
13841: ST_TO_ADDR
// for i := 1 to k do
13842: LD_ADDR_VAR 0 1
13846: PUSH
13847: DOUBLE
13848: LD_INT 1
13850: DEC
13851: ST_TO_ADDR
13852: LD_VAR 0 2
13856: PUSH
13857: FOR_TO
13858: IFFALSE 13957
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13860: LD_VAR 0 3
13864: PUSH
13865: LD_VAR 0 1
13869: ARRAY
13870: PPUSH
13871: LD_VAR 0 1
13875: PUSH
13876: LD_INT 4
13878: MOD
13879: PUSH
13880: LD_INT 1
13882: PLUS
13883: PPUSH
13884: CALL_OW 259
13888: PUSH
13889: LD_INT 10
13891: LESS
13892: IFFALSE 13955
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13894: LD_VAR 0 3
13898: PUSH
13899: LD_VAR 0 1
13903: ARRAY
13904: PPUSH
13905: LD_VAR 0 1
13909: PUSH
13910: LD_INT 4
13912: MOD
13913: PUSH
13914: LD_INT 1
13916: PLUS
13917: PPUSH
13918: LD_VAR 0 3
13922: PUSH
13923: LD_VAR 0 1
13927: ARRAY
13928: PPUSH
13929: LD_VAR 0 1
13933: PUSH
13934: LD_INT 4
13936: MOD
13937: PUSH
13938: LD_INT 1
13940: PLUS
13941: PPUSH
13942: CALL_OW 259
13946: PUSH
13947: LD_INT 1
13949: PLUS
13950: PPUSH
13951: CALL_OW 237
13955: GO 13857
13957: POP
13958: POP
// end ;
13959: PPOPN 3
13961: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13962: LD_EXP 25
13966: PUSH
13967: LD_EXP 33
13971: AND
13972: IFFALSE 13992
13974: GO 13976
13976: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13977: LD_INT 4
13979: PPUSH
13980: LD_OWVAR 2
13984: PPUSH
13985: LD_INT 0
13987: PPUSH
13988: CALL_OW 324
13992: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13993: LD_EXP 25
13997: PUSH
13998: LD_EXP 62
14002: AND
14003: IFFALSE 14023
14005: GO 14007
14007: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14008: LD_INT 19
14010: PPUSH
14011: LD_OWVAR 2
14015: PPUSH
14016: LD_INT 0
14018: PPUSH
14019: CALL_OW 324
14023: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14024: LD_EXP 25
14028: PUSH
14029: LD_EXP 34
14033: AND
14034: IFFALSE 14136
14036: GO 14038
14038: DISABLE
14039: LD_INT 0
14041: PPUSH
14042: PPUSH
// begin enable ;
14043: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14044: LD_ADDR_VAR 0 2
14048: PUSH
14049: LD_INT 22
14051: PUSH
14052: LD_OWVAR 2
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 2
14063: PUSH
14064: LD_INT 34
14066: PUSH
14067: LD_INT 11
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 34
14076: PUSH
14077: LD_INT 30
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PPUSH
14093: CALL_OW 69
14097: ST_TO_ADDR
// if not tmp then
14098: LD_VAR 0 2
14102: NOT
14103: IFFALSE 14107
// exit ;
14105: GO 14136
// for i in tmp do
14107: LD_ADDR_VAR 0 1
14111: PUSH
14112: LD_VAR 0 2
14116: PUSH
14117: FOR_IN
14118: IFFALSE 14134
// begin SetLives ( i , 0 ) ;
14120: LD_VAR 0 1
14124: PPUSH
14125: LD_INT 0
14127: PPUSH
14128: CALL_OW 234
// end ;
14132: GO 14117
14134: POP
14135: POP
// end ;
14136: PPOPN 2
14138: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14139: LD_EXP 25
14143: PUSH
14144: LD_EXP 35
14148: AND
14149: IFFALSE 14169
14151: GO 14153
14153: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14154: LD_INT 32
14156: PPUSH
14157: LD_OWVAR 2
14161: PPUSH
14162: LD_INT 0
14164: PPUSH
14165: CALL_OW 324
14169: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14170: LD_EXP 25
14174: PUSH
14175: LD_EXP 36
14179: AND
14180: IFFALSE 14361
14182: GO 14184
14184: DISABLE
14185: LD_INT 0
14187: PPUSH
14188: PPUSH
14189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14190: LD_ADDR_VAR 0 2
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_OWVAR 2
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 33
14209: PUSH
14210: LD_INT 3
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PPUSH
14221: CALL_OW 69
14225: ST_TO_ADDR
// if not tmp then
14226: LD_VAR 0 2
14230: NOT
14231: IFFALSE 14235
// exit ;
14233: GO 14361
// side := 0 ;
14235: LD_ADDR_VAR 0 3
14239: PUSH
14240: LD_INT 0
14242: ST_TO_ADDR
// for i := 1 to 8 do
14243: LD_ADDR_VAR 0 1
14247: PUSH
14248: DOUBLE
14249: LD_INT 1
14251: DEC
14252: ST_TO_ADDR
14253: LD_INT 8
14255: PUSH
14256: FOR_TO
14257: IFFALSE 14305
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14259: LD_OWVAR 2
14263: PUSH
14264: LD_VAR 0 1
14268: NONEQUAL
14269: PUSH
14270: LD_OWVAR 2
14274: PPUSH
14275: LD_VAR 0 1
14279: PPUSH
14280: CALL_OW 81
14284: PUSH
14285: LD_INT 2
14287: EQUAL
14288: AND
14289: IFFALSE 14303
// begin side := i ;
14291: LD_ADDR_VAR 0 3
14295: PUSH
14296: LD_VAR 0 1
14300: ST_TO_ADDR
// break ;
14301: GO 14305
// end ;
14303: GO 14256
14305: POP
14306: POP
// if not side then
14307: LD_VAR 0 3
14311: NOT
14312: IFFALSE 14316
// exit ;
14314: GO 14361
// for i := 1 to tmp do
14316: LD_ADDR_VAR 0 1
14320: PUSH
14321: DOUBLE
14322: LD_INT 1
14324: DEC
14325: ST_TO_ADDR
14326: LD_VAR 0 2
14330: PUSH
14331: FOR_TO
14332: IFFALSE 14359
// if Prob ( 60 ) then
14334: LD_INT 60
14336: PPUSH
14337: CALL_OW 13
14341: IFFALSE 14357
// SetSide ( i , side ) ;
14343: LD_VAR 0 1
14347: PPUSH
14348: LD_VAR 0 3
14352: PPUSH
14353: CALL_OW 235
14357: GO 14331
14359: POP
14360: POP
// end ;
14361: PPOPN 3
14363: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14364: LD_EXP 25
14368: PUSH
14369: LD_EXP 38
14373: AND
14374: IFFALSE 14493
14376: GO 14378
14378: DISABLE
14379: LD_INT 0
14381: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14382: LD_ADDR_VAR 0 1
14386: PUSH
14387: LD_INT 22
14389: PUSH
14390: LD_OWVAR 2
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 21
14401: PUSH
14402: LD_INT 1
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 3
14411: PUSH
14412: LD_INT 23
14414: PUSH
14415: LD_INT 0
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: PPUSH
14431: CALL_OW 69
14435: PUSH
14436: FOR_IN
14437: IFFALSE 14491
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14439: LD_VAR 0 1
14443: PPUSH
14444: CALL_OW 257
14448: PUSH
14449: LD_INT 1
14451: PUSH
14452: LD_INT 2
14454: PUSH
14455: LD_INT 3
14457: PUSH
14458: LD_INT 4
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: IN
14467: IFFALSE 14489
// SetClass ( un , rand ( 1 , 4 ) ) ;
14469: LD_VAR 0 1
14473: PPUSH
14474: LD_INT 1
14476: PPUSH
14477: LD_INT 4
14479: PPUSH
14480: CALL_OW 12
14484: PPUSH
14485: CALL_OW 336
14489: GO 14436
14491: POP
14492: POP
// end ;
14493: PPOPN 1
14495: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14496: LD_EXP 25
14500: PUSH
14501: LD_EXP 37
14505: AND
14506: IFFALSE 14585
14508: GO 14510
14510: DISABLE
14511: LD_INT 0
14513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14514: LD_ADDR_VAR 0 1
14518: PUSH
14519: LD_INT 22
14521: PUSH
14522: LD_OWVAR 2
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 21
14533: PUSH
14534: LD_INT 3
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PPUSH
14545: CALL_OW 69
14549: ST_TO_ADDR
// if not tmp then
14550: LD_VAR 0 1
14554: NOT
14555: IFFALSE 14559
// exit ;
14557: GO 14585
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14559: LD_VAR 0 1
14563: PUSH
14564: LD_INT 1
14566: PPUSH
14567: LD_VAR 0 1
14571: PPUSH
14572: CALL_OW 12
14576: ARRAY
14577: PPUSH
14578: LD_INT 100
14580: PPUSH
14581: CALL_OW 234
// end ;
14585: PPOPN 1
14587: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14588: LD_EXP 25
14592: PUSH
14593: LD_EXP 39
14597: AND
14598: IFFALSE 14696
14600: GO 14602
14602: DISABLE
14603: LD_INT 0
14605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14606: LD_ADDR_VAR 0 1
14610: PUSH
14611: LD_INT 22
14613: PUSH
14614: LD_OWVAR 2
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 21
14625: PUSH
14626: LD_INT 1
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PPUSH
14637: CALL_OW 69
14641: ST_TO_ADDR
// if not tmp then
14642: LD_VAR 0 1
14646: NOT
14647: IFFALSE 14651
// exit ;
14649: GO 14696
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14651: LD_VAR 0 1
14655: PUSH
14656: LD_INT 1
14658: PPUSH
14659: LD_VAR 0 1
14663: PPUSH
14664: CALL_OW 12
14668: ARRAY
14669: PPUSH
14670: LD_INT 1
14672: PPUSH
14673: LD_INT 4
14675: PPUSH
14676: CALL_OW 12
14680: PPUSH
14681: LD_INT 3000
14683: PPUSH
14684: LD_INT 9000
14686: PPUSH
14687: CALL_OW 12
14691: PPUSH
14692: CALL_OW 492
// end ;
14696: PPOPN 1
14698: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14699: LD_EXP 25
14703: PUSH
14704: LD_EXP 40
14708: AND
14709: IFFALSE 14729
14711: GO 14713
14713: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14714: LD_INT 1
14716: PPUSH
14717: LD_OWVAR 2
14721: PPUSH
14722: LD_INT 0
14724: PPUSH
14725: CALL_OW 324
14729: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14730: LD_EXP 25
14734: PUSH
14735: LD_EXP 41
14739: AND
14740: IFFALSE 14823
14742: GO 14744
14744: DISABLE
14745: LD_INT 0
14747: PPUSH
14748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14749: LD_ADDR_VAR 0 2
14753: PUSH
14754: LD_INT 22
14756: PUSH
14757: LD_OWVAR 2
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 21
14768: PUSH
14769: LD_INT 3
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PPUSH
14780: CALL_OW 69
14784: ST_TO_ADDR
// if not tmp then
14785: LD_VAR 0 2
14789: NOT
14790: IFFALSE 14794
// exit ;
14792: GO 14823
// for i in tmp do
14794: LD_ADDR_VAR 0 1
14798: PUSH
14799: LD_VAR 0 2
14803: PUSH
14804: FOR_IN
14805: IFFALSE 14821
// SetBLevel ( i , 10 ) ;
14807: LD_VAR 0 1
14811: PPUSH
14812: LD_INT 10
14814: PPUSH
14815: CALL_OW 241
14819: GO 14804
14821: POP
14822: POP
// end ;
14823: PPOPN 2
14825: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14826: LD_EXP 25
14830: PUSH
14831: LD_EXP 42
14835: AND
14836: IFFALSE 14947
14838: GO 14840
14840: DISABLE
14841: LD_INT 0
14843: PPUSH
14844: PPUSH
14845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14846: LD_ADDR_VAR 0 3
14850: PUSH
14851: LD_INT 22
14853: PUSH
14854: LD_OWVAR 2
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 25
14865: PUSH
14866: LD_INT 1
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PPUSH
14877: CALL_OW 69
14881: ST_TO_ADDR
// if not tmp then
14882: LD_VAR 0 3
14886: NOT
14887: IFFALSE 14891
// exit ;
14889: GO 14947
// un := tmp [ rand ( 1 , tmp ) ] ;
14891: LD_ADDR_VAR 0 2
14895: PUSH
14896: LD_VAR 0 3
14900: PUSH
14901: LD_INT 1
14903: PPUSH
14904: LD_VAR 0 3
14908: PPUSH
14909: CALL_OW 12
14913: ARRAY
14914: ST_TO_ADDR
// if Crawls ( un ) then
14915: LD_VAR 0 2
14919: PPUSH
14920: CALL_OW 318
14924: IFFALSE 14935
// ComWalk ( un ) ;
14926: LD_VAR 0 2
14930: PPUSH
14931: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14935: LD_VAR 0 2
14939: PPUSH
14940: LD_INT 5
14942: PPUSH
14943: CALL_OW 336
// end ;
14947: PPOPN 3
14949: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14950: LD_EXP 25
14954: PUSH
14955: LD_EXP 43
14959: AND
14960: PUSH
14961: LD_OWVAR 67
14965: PUSH
14966: LD_INT 4
14968: LESS
14969: AND
14970: IFFALSE 14989
14972: GO 14974
14974: DISABLE
// begin Difficulty := Difficulty + 1 ;
14975: LD_ADDR_OWVAR 67
14979: PUSH
14980: LD_OWVAR 67
14984: PUSH
14985: LD_INT 1
14987: PLUS
14988: ST_TO_ADDR
// end ;
14989: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14990: LD_EXP 25
14994: PUSH
14995: LD_EXP 44
14999: AND
15000: IFFALSE 15103
15002: GO 15004
15004: DISABLE
15005: LD_INT 0
15007: PPUSH
// begin for i := 1 to 5 do
15008: LD_ADDR_VAR 0 1
15012: PUSH
15013: DOUBLE
15014: LD_INT 1
15016: DEC
15017: ST_TO_ADDR
15018: LD_INT 5
15020: PUSH
15021: FOR_TO
15022: IFFALSE 15101
// begin uc_nation := nation_nature ;
15024: LD_ADDR_OWVAR 21
15028: PUSH
15029: LD_INT 0
15031: ST_TO_ADDR
// uc_side := 0 ;
15032: LD_ADDR_OWVAR 20
15036: PUSH
15037: LD_INT 0
15039: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15040: LD_ADDR_OWVAR 29
15044: PUSH
15045: LD_INT 12
15047: PUSH
15048: LD_INT 12
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: ST_TO_ADDR
// hc_agressivity := 20 ;
15055: LD_ADDR_OWVAR 35
15059: PUSH
15060: LD_INT 20
15062: ST_TO_ADDR
// hc_class := class_tiger ;
15063: LD_ADDR_OWVAR 28
15067: PUSH
15068: LD_INT 14
15070: ST_TO_ADDR
// hc_gallery :=  ;
15071: LD_ADDR_OWVAR 33
15075: PUSH
15076: LD_STRING 
15078: ST_TO_ADDR
// hc_name :=  ;
15079: LD_ADDR_OWVAR 26
15083: PUSH
15084: LD_STRING 
15086: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15087: CALL_OW 44
15091: PPUSH
15092: LD_INT 0
15094: PPUSH
15095: CALL_OW 51
// end ;
15099: GO 15021
15101: POP
15102: POP
// end ;
15103: PPOPN 1
15105: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15106: LD_EXP 25
15110: PUSH
15111: LD_EXP 45
15115: AND
15116: IFFALSE 15125
15118: GO 15120
15120: DISABLE
// StreamSibBomb ;
15121: CALL 15126 0 0
15125: END
// export function StreamSibBomb ; var i , x , y ; begin
15126: LD_INT 0
15128: PPUSH
15129: PPUSH
15130: PPUSH
15131: PPUSH
// result := false ;
15132: LD_ADDR_VAR 0 1
15136: PUSH
15137: LD_INT 0
15139: ST_TO_ADDR
// for i := 1 to 16 do
15140: LD_ADDR_VAR 0 2
15144: PUSH
15145: DOUBLE
15146: LD_INT 1
15148: DEC
15149: ST_TO_ADDR
15150: LD_INT 16
15152: PUSH
15153: FOR_TO
15154: IFFALSE 15353
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15156: LD_ADDR_VAR 0 3
15160: PUSH
15161: LD_INT 10
15163: PUSH
15164: LD_INT 20
15166: PUSH
15167: LD_INT 30
15169: PUSH
15170: LD_INT 40
15172: PUSH
15173: LD_INT 50
15175: PUSH
15176: LD_INT 60
15178: PUSH
15179: LD_INT 70
15181: PUSH
15182: LD_INT 80
15184: PUSH
15185: LD_INT 90
15187: PUSH
15188: LD_INT 100
15190: PUSH
15191: LD_INT 110
15193: PUSH
15194: LD_INT 120
15196: PUSH
15197: LD_INT 130
15199: PUSH
15200: LD_INT 140
15202: PUSH
15203: LD_INT 150
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: PUSH
15223: LD_INT 1
15225: PPUSH
15226: LD_INT 15
15228: PPUSH
15229: CALL_OW 12
15233: ARRAY
15234: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15235: LD_ADDR_VAR 0 4
15239: PUSH
15240: LD_INT 10
15242: PUSH
15243: LD_INT 20
15245: PUSH
15246: LD_INT 30
15248: PUSH
15249: LD_INT 40
15251: PUSH
15252: LD_INT 50
15254: PUSH
15255: LD_INT 60
15257: PUSH
15258: LD_INT 70
15260: PUSH
15261: LD_INT 80
15263: PUSH
15264: LD_INT 90
15266: PUSH
15267: LD_INT 100
15269: PUSH
15270: LD_INT 110
15272: PUSH
15273: LD_INT 120
15275: PUSH
15276: LD_INT 130
15278: PUSH
15279: LD_INT 140
15281: PUSH
15282: LD_INT 150
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: PUSH
15302: LD_INT 1
15304: PPUSH
15305: LD_INT 15
15307: PPUSH
15308: CALL_OW 12
15312: ARRAY
15313: ST_TO_ADDR
// if ValidHex ( x , y ) then
15314: LD_VAR 0 3
15318: PPUSH
15319: LD_VAR 0 4
15323: PPUSH
15324: CALL_OW 488
15328: IFFALSE 15351
// begin result := [ x , y ] ;
15330: LD_ADDR_VAR 0 1
15334: PUSH
15335: LD_VAR 0 3
15339: PUSH
15340: LD_VAR 0 4
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: ST_TO_ADDR
// break ;
15349: GO 15353
// end ; end ;
15351: GO 15153
15353: POP
15354: POP
// if result then
15355: LD_VAR 0 1
15359: IFFALSE 15419
// begin ToLua ( playSibBomb() ) ;
15361: LD_STRING playSibBomb()
15363: PPUSH
15364: CALL_OW 559
// wait ( 0 0$14 ) ;
15368: LD_INT 490
15370: PPUSH
15371: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15375: LD_VAR 0 1
15379: PUSH
15380: LD_INT 1
15382: ARRAY
15383: PPUSH
15384: LD_VAR 0 1
15388: PUSH
15389: LD_INT 2
15391: ARRAY
15392: PPUSH
15393: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15397: LD_VAR 0 1
15401: PUSH
15402: LD_INT 1
15404: ARRAY
15405: PPUSH
15406: LD_VAR 0 1
15410: PUSH
15411: LD_INT 2
15413: ARRAY
15414: PPUSH
15415: CALL_OW 429
// end ; end ;
15419: LD_VAR 0 1
15423: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15424: LD_EXP 25
15428: PUSH
15429: LD_EXP 47
15433: AND
15434: IFFALSE 15446
15436: GO 15438
15438: DISABLE
// YouLost (  ) ;
15439: LD_STRING 
15441: PPUSH
15442: CALL_OW 104
15446: END
// every 0 0$1 trigger StreamModeActive and sFog do
15447: LD_EXP 25
15451: PUSH
15452: LD_EXP 46
15456: AND
15457: IFFALSE 15471
15459: GO 15461
15461: DISABLE
// FogOff ( your_side ) ;
15462: LD_OWVAR 2
15466: PPUSH
15467: CALL_OW 344
15471: END
// every 0 0$1 trigger StreamModeActive and sSun do
15472: LD_EXP 25
15476: PUSH
15477: LD_EXP 48
15481: AND
15482: IFFALSE 15510
15484: GO 15486
15486: DISABLE
// begin solar_recharge_percent := 0 ;
15487: LD_ADDR_OWVAR 79
15491: PUSH
15492: LD_INT 0
15494: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15495: LD_INT 10500
15497: PPUSH
15498: CALL_OW 67
// solar_recharge_percent := 100 ;
15502: LD_ADDR_OWVAR 79
15506: PUSH
15507: LD_INT 100
15509: ST_TO_ADDR
// end ;
15510: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15511: LD_EXP 25
15515: PUSH
15516: LD_EXP 49
15520: AND
15521: IFFALSE 15760
15523: GO 15525
15525: DISABLE
15526: LD_INT 0
15528: PPUSH
15529: PPUSH
15530: PPUSH
// begin tmp := [ ] ;
15531: LD_ADDR_VAR 0 3
15535: PUSH
15536: EMPTY
15537: ST_TO_ADDR
// for i := 1 to 6 do
15538: LD_ADDR_VAR 0 1
15542: PUSH
15543: DOUBLE
15544: LD_INT 1
15546: DEC
15547: ST_TO_ADDR
15548: LD_INT 6
15550: PUSH
15551: FOR_TO
15552: IFFALSE 15657
// begin uc_nation := nation_nature ;
15554: LD_ADDR_OWVAR 21
15558: PUSH
15559: LD_INT 0
15561: ST_TO_ADDR
// uc_side := 0 ;
15562: LD_ADDR_OWVAR 20
15566: PUSH
15567: LD_INT 0
15569: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15570: LD_ADDR_OWVAR 29
15574: PUSH
15575: LD_INT 12
15577: PUSH
15578: LD_INT 12
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: ST_TO_ADDR
// hc_agressivity := 20 ;
15585: LD_ADDR_OWVAR 35
15589: PUSH
15590: LD_INT 20
15592: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15593: LD_ADDR_OWVAR 28
15597: PUSH
15598: LD_INT 17
15600: ST_TO_ADDR
// hc_gallery :=  ;
15601: LD_ADDR_OWVAR 33
15605: PUSH
15606: LD_STRING 
15608: ST_TO_ADDR
// hc_name :=  ;
15609: LD_ADDR_OWVAR 26
15613: PUSH
15614: LD_STRING 
15616: ST_TO_ADDR
// un := CreateHuman ;
15617: LD_ADDR_VAR 0 2
15621: PUSH
15622: CALL_OW 44
15626: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15627: LD_VAR 0 2
15631: PPUSH
15632: LD_INT 1
15634: PPUSH
15635: CALL_OW 51
// tmp := tmp ^ un ;
15639: LD_ADDR_VAR 0 3
15643: PUSH
15644: LD_VAR 0 3
15648: PUSH
15649: LD_VAR 0 2
15653: ADD
15654: ST_TO_ADDR
// end ;
15655: GO 15551
15657: POP
15658: POP
// repeat wait ( 0 0$1 ) ;
15659: LD_INT 35
15661: PPUSH
15662: CALL_OW 67
// for un in tmp do
15666: LD_ADDR_VAR 0 2
15670: PUSH
15671: LD_VAR 0 3
15675: PUSH
15676: FOR_IN
15677: IFFALSE 15751
// begin if IsDead ( un ) then
15679: LD_VAR 0 2
15683: PPUSH
15684: CALL_OW 301
15688: IFFALSE 15708
// begin tmp := tmp diff un ;
15690: LD_ADDR_VAR 0 3
15694: PUSH
15695: LD_VAR 0 3
15699: PUSH
15700: LD_VAR 0 2
15704: DIFF
15705: ST_TO_ADDR
// continue ;
15706: GO 15676
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15708: LD_VAR 0 2
15712: PPUSH
15713: LD_INT 3
15715: PUSH
15716: LD_INT 22
15718: PUSH
15719: LD_INT 0
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PPUSH
15730: CALL_OW 69
15734: PPUSH
15735: LD_VAR 0 2
15739: PPUSH
15740: CALL_OW 74
15744: PPUSH
15745: CALL_OW 115
// end ;
15749: GO 15676
15751: POP
15752: POP
// until not tmp ;
15753: LD_VAR 0 3
15757: NOT
15758: IFFALSE 15659
// end ;
15760: PPOPN 3
15762: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15763: LD_EXP 25
15767: PUSH
15768: LD_EXP 50
15772: AND
15773: IFFALSE 15827
15775: GO 15777
15777: DISABLE
// begin ToLua ( displayTroll(); ) ;
15778: LD_STRING displayTroll();
15780: PPUSH
15781: CALL_OW 559
// wait ( 3 3$00 ) ;
15785: LD_INT 6300
15787: PPUSH
15788: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15792: LD_STRING hideTroll();
15794: PPUSH
15795: CALL_OW 559
// wait ( 1 1$00 ) ;
15799: LD_INT 2100
15801: PPUSH
15802: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15806: LD_STRING displayTroll();
15808: PPUSH
15809: CALL_OW 559
// wait ( 1 1$00 ) ;
15813: LD_INT 2100
15815: PPUSH
15816: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15820: LD_STRING hideTroll();
15822: PPUSH
15823: CALL_OW 559
// end ;
15827: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15828: LD_EXP 25
15832: PUSH
15833: LD_EXP 51
15837: AND
15838: IFFALSE 15901
15840: GO 15842
15842: DISABLE
15843: LD_INT 0
15845: PPUSH
// begin p := 0 ;
15846: LD_ADDR_VAR 0 1
15850: PUSH
15851: LD_INT 0
15853: ST_TO_ADDR
// repeat game_speed := 1 ;
15854: LD_ADDR_OWVAR 65
15858: PUSH
15859: LD_INT 1
15861: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15862: LD_INT 35
15864: PPUSH
15865: CALL_OW 67
// p := p + 1 ;
15869: LD_ADDR_VAR 0 1
15873: PUSH
15874: LD_VAR 0 1
15878: PUSH
15879: LD_INT 1
15881: PLUS
15882: ST_TO_ADDR
// until p >= 60 ;
15883: LD_VAR 0 1
15887: PUSH
15888: LD_INT 60
15890: GREATEREQUAL
15891: IFFALSE 15854
// game_speed := 4 ;
15893: LD_ADDR_OWVAR 65
15897: PUSH
15898: LD_INT 4
15900: ST_TO_ADDR
// end ;
15901: PPOPN 1
15903: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15904: LD_EXP 25
15908: PUSH
15909: LD_EXP 52
15913: AND
15914: IFFALSE 16060
15916: GO 15918
15918: DISABLE
15919: LD_INT 0
15921: PPUSH
15922: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15923: LD_ADDR_VAR 0 1
15927: PUSH
15928: LD_INT 22
15930: PUSH
15931: LD_OWVAR 2
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 2
15942: PUSH
15943: LD_INT 30
15945: PUSH
15946: LD_INT 0
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 30
15955: PUSH
15956: LD_INT 1
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PPUSH
15972: CALL_OW 69
15976: ST_TO_ADDR
// if not depot then
15977: LD_VAR 0 1
15981: NOT
15982: IFFALSE 15986
// exit ;
15984: GO 16060
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15986: LD_ADDR_VAR 0 2
15990: PUSH
15991: LD_VAR 0 1
15995: PUSH
15996: LD_INT 1
15998: PPUSH
15999: LD_VAR 0 1
16003: PPUSH
16004: CALL_OW 12
16008: ARRAY
16009: PPUSH
16010: CALL_OW 274
16014: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16015: LD_VAR 0 2
16019: PPUSH
16020: LD_INT 1
16022: PPUSH
16023: LD_INT 0
16025: PPUSH
16026: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16030: LD_VAR 0 2
16034: PPUSH
16035: LD_INT 2
16037: PPUSH
16038: LD_INT 0
16040: PPUSH
16041: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16045: LD_VAR 0 2
16049: PPUSH
16050: LD_INT 3
16052: PPUSH
16053: LD_INT 0
16055: PPUSH
16056: CALL_OW 277
// end ;
16060: PPOPN 2
16062: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16063: LD_EXP 25
16067: PUSH
16068: LD_EXP 53
16072: AND
16073: IFFALSE 16170
16075: GO 16077
16077: DISABLE
16078: LD_INT 0
16080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16081: LD_ADDR_VAR 0 1
16085: PUSH
16086: LD_INT 22
16088: PUSH
16089: LD_OWVAR 2
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 21
16100: PUSH
16101: LD_INT 1
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 3
16110: PUSH
16111: LD_INT 23
16113: PUSH
16114: LD_INT 0
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: LIST
16129: PPUSH
16130: CALL_OW 69
16134: ST_TO_ADDR
// if not tmp then
16135: LD_VAR 0 1
16139: NOT
16140: IFFALSE 16144
// exit ;
16142: GO 16170
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16144: LD_VAR 0 1
16148: PUSH
16149: LD_INT 1
16151: PPUSH
16152: LD_VAR 0 1
16156: PPUSH
16157: CALL_OW 12
16161: ARRAY
16162: PPUSH
16163: LD_INT 200
16165: PPUSH
16166: CALL_OW 234
// end ;
16170: PPOPN 1
16172: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16173: LD_EXP 25
16177: PUSH
16178: LD_EXP 54
16182: AND
16183: IFFALSE 16262
16185: GO 16187
16187: DISABLE
16188: LD_INT 0
16190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16191: LD_ADDR_VAR 0 1
16195: PUSH
16196: LD_INT 22
16198: PUSH
16199: LD_OWVAR 2
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 21
16210: PUSH
16211: LD_INT 2
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PPUSH
16222: CALL_OW 69
16226: ST_TO_ADDR
// if not tmp then
16227: LD_VAR 0 1
16231: NOT
16232: IFFALSE 16236
// exit ;
16234: GO 16262
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16236: LD_VAR 0 1
16240: PUSH
16241: LD_INT 1
16243: PPUSH
16244: LD_VAR 0 1
16248: PPUSH
16249: CALL_OW 12
16253: ARRAY
16254: PPUSH
16255: LD_INT 60
16257: PPUSH
16258: CALL_OW 234
// end ;
16262: PPOPN 1
16264: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16265: LD_EXP 25
16269: PUSH
16270: LD_EXP 55
16274: AND
16275: IFFALSE 16374
16277: GO 16279
16279: DISABLE
16280: LD_INT 0
16282: PPUSH
16283: PPUSH
// begin enable ;
16284: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16285: LD_ADDR_VAR 0 1
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: LD_OWVAR 2
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 61
16304: PUSH
16305: EMPTY
16306: LIST
16307: PUSH
16308: LD_INT 33
16310: PUSH
16311: LD_INT 2
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: LIST
16322: PPUSH
16323: CALL_OW 69
16327: ST_TO_ADDR
// if not tmp then
16328: LD_VAR 0 1
16332: NOT
16333: IFFALSE 16337
// exit ;
16335: GO 16374
// for i in tmp do
16337: LD_ADDR_VAR 0 2
16341: PUSH
16342: LD_VAR 0 1
16346: PUSH
16347: FOR_IN
16348: IFFALSE 16372
// if IsControledBy ( i ) then
16350: LD_VAR 0 2
16354: PPUSH
16355: CALL_OW 312
16359: IFFALSE 16370
// ComUnlink ( i ) ;
16361: LD_VAR 0 2
16365: PPUSH
16366: CALL_OW 136
16370: GO 16347
16372: POP
16373: POP
// end ;
16374: PPOPN 2
16376: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16377: LD_EXP 25
16381: PUSH
16382: LD_EXP 56
16386: AND
16387: IFFALSE 16527
16389: GO 16391
16391: DISABLE
16392: LD_INT 0
16394: PPUSH
16395: PPUSH
// begin ToLua ( displayPowell(); ) ;
16396: LD_STRING displayPowell();
16398: PPUSH
16399: CALL_OW 559
// uc_side := 0 ;
16403: LD_ADDR_OWVAR 20
16407: PUSH
16408: LD_INT 0
16410: ST_TO_ADDR
// uc_nation := 2 ;
16411: LD_ADDR_OWVAR 21
16415: PUSH
16416: LD_INT 2
16418: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16419: LD_ADDR_OWVAR 37
16423: PUSH
16424: LD_INT 14
16426: ST_TO_ADDR
// vc_engine := engine_siberite ;
16427: LD_ADDR_OWVAR 39
16431: PUSH
16432: LD_INT 3
16434: ST_TO_ADDR
// vc_control := control_apeman ;
16435: LD_ADDR_OWVAR 38
16439: PUSH
16440: LD_INT 5
16442: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16443: LD_ADDR_OWVAR 40
16447: PUSH
16448: LD_INT 29
16450: ST_TO_ADDR
// un := CreateVehicle ;
16451: LD_ADDR_VAR 0 2
16455: PUSH
16456: CALL_OW 45
16460: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16461: LD_VAR 0 2
16465: PPUSH
16466: LD_INT 1
16468: PPUSH
16469: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16473: LD_INT 35
16475: PPUSH
16476: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16480: LD_VAR 0 2
16484: PPUSH
16485: LD_INT 22
16487: PUSH
16488: LD_OWVAR 2
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PPUSH
16497: CALL_OW 69
16501: PPUSH
16502: LD_VAR 0 2
16506: PPUSH
16507: CALL_OW 74
16511: PPUSH
16512: CALL_OW 115
// until IsDead ( un ) ;
16516: LD_VAR 0 2
16520: PPUSH
16521: CALL_OW 301
16525: IFFALSE 16473
// end ;
16527: PPOPN 2
16529: END
// every 0 0$1 trigger StreamModeActive and sStu do
16530: LD_EXP 25
16534: PUSH
16535: LD_EXP 64
16539: AND
16540: IFFALSE 16556
16542: GO 16544
16544: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16545: LD_STRING displayStucuk();
16547: PPUSH
16548: CALL_OW 559
// ResetFog ;
16552: CALL_OW 335
// end ;
16556: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16557: LD_EXP 25
16561: PUSH
16562: LD_EXP 57
16566: AND
16567: IFFALSE 16708
16569: GO 16571
16571: DISABLE
16572: LD_INT 0
16574: PPUSH
16575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16576: LD_ADDR_VAR 0 2
16580: PUSH
16581: LD_INT 22
16583: PUSH
16584: LD_OWVAR 2
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 21
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PPUSH
16607: CALL_OW 69
16611: ST_TO_ADDR
// if not tmp then
16612: LD_VAR 0 2
16616: NOT
16617: IFFALSE 16621
// exit ;
16619: GO 16708
// un := tmp [ rand ( 1 , tmp ) ] ;
16621: LD_ADDR_VAR 0 1
16625: PUSH
16626: LD_VAR 0 2
16630: PUSH
16631: LD_INT 1
16633: PPUSH
16634: LD_VAR 0 2
16638: PPUSH
16639: CALL_OW 12
16643: ARRAY
16644: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16645: LD_VAR 0 1
16649: PPUSH
16650: LD_INT 0
16652: PPUSH
16653: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16657: LD_VAR 0 1
16661: PPUSH
16662: LD_OWVAR 3
16666: PUSH
16667: LD_VAR 0 1
16671: DIFF
16672: PPUSH
16673: LD_VAR 0 1
16677: PPUSH
16678: CALL_OW 74
16682: PPUSH
16683: CALL_OW 115
// wait ( 0 0$20 ) ;
16687: LD_INT 700
16689: PPUSH
16690: CALL_OW 67
// SetSide ( un , your_side ) ;
16694: LD_VAR 0 1
16698: PPUSH
16699: LD_OWVAR 2
16703: PPUSH
16704: CALL_OW 235
// end ;
16708: PPOPN 2
16710: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16711: LD_EXP 25
16715: PUSH
16716: LD_EXP 58
16720: AND
16721: IFFALSE 16827
16723: GO 16725
16725: DISABLE
16726: LD_INT 0
16728: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16729: LD_ADDR_VAR 0 1
16733: PUSH
16734: LD_INT 22
16736: PUSH
16737: LD_OWVAR 2
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 2
16748: PUSH
16749: LD_INT 30
16751: PUSH
16752: LD_INT 0
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 30
16761: PUSH
16762: LD_INT 1
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: LIST
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PPUSH
16778: CALL_OW 69
16782: ST_TO_ADDR
// if not depot then
16783: LD_VAR 0 1
16787: NOT
16788: IFFALSE 16792
// exit ;
16790: GO 16827
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16792: LD_VAR 0 1
16796: PUSH
16797: LD_INT 1
16799: ARRAY
16800: PPUSH
16801: CALL_OW 250
16805: PPUSH
16806: LD_VAR 0 1
16810: PUSH
16811: LD_INT 1
16813: ARRAY
16814: PPUSH
16815: CALL_OW 251
16819: PPUSH
16820: LD_INT 70
16822: PPUSH
16823: CALL_OW 495
// end ;
16827: PPOPN 1
16829: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16830: LD_EXP 25
16834: PUSH
16835: LD_EXP 59
16839: AND
16840: IFFALSE 17051
16842: GO 16844
16844: DISABLE
16845: LD_INT 0
16847: PPUSH
16848: PPUSH
16849: PPUSH
16850: PPUSH
16851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16852: LD_ADDR_VAR 0 5
16856: PUSH
16857: LD_INT 22
16859: PUSH
16860: LD_OWVAR 2
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 21
16871: PUSH
16872: LD_INT 1
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PPUSH
16883: CALL_OW 69
16887: ST_TO_ADDR
// if not tmp then
16888: LD_VAR 0 5
16892: NOT
16893: IFFALSE 16897
// exit ;
16895: GO 17051
// for i in tmp do
16897: LD_ADDR_VAR 0 1
16901: PUSH
16902: LD_VAR 0 5
16906: PUSH
16907: FOR_IN
16908: IFFALSE 17049
// begin d := rand ( 0 , 5 ) ;
16910: LD_ADDR_VAR 0 4
16914: PUSH
16915: LD_INT 0
16917: PPUSH
16918: LD_INT 5
16920: PPUSH
16921: CALL_OW 12
16925: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16926: LD_ADDR_VAR 0 2
16930: PUSH
16931: LD_VAR 0 1
16935: PPUSH
16936: CALL_OW 250
16940: PPUSH
16941: LD_VAR 0 4
16945: PPUSH
16946: LD_INT 3
16948: PPUSH
16949: LD_INT 12
16951: PPUSH
16952: CALL_OW 12
16956: PPUSH
16957: CALL_OW 272
16961: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16962: LD_ADDR_VAR 0 3
16966: PUSH
16967: LD_VAR 0 1
16971: PPUSH
16972: CALL_OW 251
16976: PPUSH
16977: LD_VAR 0 4
16981: PPUSH
16982: LD_INT 3
16984: PPUSH
16985: LD_INT 12
16987: PPUSH
16988: CALL_OW 12
16992: PPUSH
16993: CALL_OW 273
16997: ST_TO_ADDR
// if ValidHex ( x , y ) then
16998: LD_VAR 0 2
17002: PPUSH
17003: LD_VAR 0 3
17007: PPUSH
17008: CALL_OW 488
17012: IFFALSE 17047
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17014: LD_VAR 0 1
17018: PPUSH
17019: LD_VAR 0 2
17023: PPUSH
17024: LD_VAR 0 3
17028: PPUSH
17029: LD_INT 3
17031: PPUSH
17032: LD_INT 6
17034: PPUSH
17035: CALL_OW 12
17039: PPUSH
17040: LD_INT 1
17042: PPUSH
17043: CALL_OW 483
// end ;
17047: GO 16907
17049: POP
17050: POP
// end ;
17051: PPOPN 5
17053: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17054: LD_EXP 25
17058: PUSH
17059: LD_EXP 60
17063: AND
17064: IFFALSE 17158
17066: GO 17068
17068: DISABLE
17069: LD_INT 0
17071: PPUSH
17072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17073: LD_ADDR_VAR 0 2
17077: PUSH
17078: LD_INT 22
17080: PUSH
17081: LD_OWVAR 2
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 32
17092: PUSH
17093: LD_INT 1
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 21
17102: PUSH
17103: LD_INT 2
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: LIST
17114: PPUSH
17115: CALL_OW 69
17119: ST_TO_ADDR
// if not tmp then
17120: LD_VAR 0 2
17124: NOT
17125: IFFALSE 17129
// exit ;
17127: GO 17158
// for i in tmp do
17129: LD_ADDR_VAR 0 1
17133: PUSH
17134: LD_VAR 0 2
17138: PUSH
17139: FOR_IN
17140: IFFALSE 17156
// SetFuel ( i , 0 ) ;
17142: LD_VAR 0 1
17146: PPUSH
17147: LD_INT 0
17149: PPUSH
17150: CALL_OW 240
17154: GO 17139
17156: POP
17157: POP
// end ;
17158: PPOPN 2
17160: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17161: LD_EXP 25
17165: PUSH
17166: LD_EXP 61
17170: AND
17171: IFFALSE 17237
17173: GO 17175
17175: DISABLE
17176: LD_INT 0
17178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17179: LD_ADDR_VAR 0 1
17183: PUSH
17184: LD_INT 22
17186: PUSH
17187: LD_OWVAR 2
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 30
17198: PUSH
17199: LD_INT 29
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PPUSH
17210: CALL_OW 69
17214: ST_TO_ADDR
// if not tmp then
17215: LD_VAR 0 1
17219: NOT
17220: IFFALSE 17224
// exit ;
17222: GO 17237
// DestroyUnit ( tmp [ 1 ] ) ;
17224: LD_VAR 0 1
17228: PUSH
17229: LD_INT 1
17231: ARRAY
17232: PPUSH
17233: CALL_OW 65
// end ;
17237: PPOPN 1
17239: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17240: LD_EXP 25
17244: PUSH
17245: LD_EXP 63
17249: AND
17250: IFFALSE 17379
17252: GO 17254
17254: DISABLE
17255: LD_INT 0
17257: PPUSH
// begin uc_side := 0 ;
17258: LD_ADDR_OWVAR 20
17262: PUSH
17263: LD_INT 0
17265: ST_TO_ADDR
// uc_nation := nation_arabian ;
17266: LD_ADDR_OWVAR 21
17270: PUSH
17271: LD_INT 2
17273: ST_TO_ADDR
// hc_gallery :=  ;
17274: LD_ADDR_OWVAR 33
17278: PUSH
17279: LD_STRING 
17281: ST_TO_ADDR
// hc_name :=  ;
17282: LD_ADDR_OWVAR 26
17286: PUSH
17287: LD_STRING 
17289: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17290: LD_INT 1
17292: PPUSH
17293: LD_INT 11
17295: PPUSH
17296: LD_INT 10
17298: PPUSH
17299: CALL_OW 380
// un := CreateHuman ;
17303: LD_ADDR_VAR 0 1
17307: PUSH
17308: CALL_OW 44
17312: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17313: LD_VAR 0 1
17317: PPUSH
17318: LD_INT 1
17320: PPUSH
17321: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17325: LD_INT 35
17327: PPUSH
17328: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17332: LD_VAR 0 1
17336: PPUSH
17337: LD_INT 22
17339: PUSH
17340: LD_OWVAR 2
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PPUSH
17349: CALL_OW 69
17353: PPUSH
17354: LD_VAR 0 1
17358: PPUSH
17359: CALL_OW 74
17363: PPUSH
17364: CALL_OW 115
// until IsDead ( un ) ;
17368: LD_VAR 0 1
17372: PPUSH
17373: CALL_OW 301
17377: IFFALSE 17325
// end ;
17379: PPOPN 1
17381: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17382: LD_EXP 25
17386: PUSH
17387: LD_EXP 65
17391: AND
17392: IFFALSE 17404
17394: GO 17396
17396: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17397: LD_STRING earthquake(getX(game), 0, 32)
17399: PPUSH
17400: CALL_OW 559
17404: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17405: LD_EXP 25
17409: PUSH
17410: LD_EXP 66
17414: AND
17415: IFFALSE 17506
17417: GO 17419
17419: DISABLE
17420: LD_INT 0
17422: PPUSH
// begin enable ;
17423: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17424: LD_ADDR_VAR 0 1
17428: PUSH
17429: LD_INT 22
17431: PUSH
17432: LD_OWVAR 2
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 21
17443: PUSH
17444: LD_INT 2
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 33
17453: PUSH
17454: LD_INT 3
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: PPUSH
17466: CALL_OW 69
17470: ST_TO_ADDR
// if not tmp then
17471: LD_VAR 0 1
17475: NOT
17476: IFFALSE 17480
// exit ;
17478: GO 17506
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17480: LD_VAR 0 1
17484: PUSH
17485: LD_INT 1
17487: PPUSH
17488: LD_VAR 0 1
17492: PPUSH
17493: CALL_OW 12
17497: ARRAY
17498: PPUSH
17499: LD_INT 1
17501: PPUSH
17502: CALL_OW 234
// end ;
17506: PPOPN 1
17508: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17509: LD_EXP 25
17513: PUSH
17514: LD_EXP 67
17518: AND
17519: IFFALSE 17660
17521: GO 17523
17523: DISABLE
17524: LD_INT 0
17526: PPUSH
17527: PPUSH
17528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17529: LD_ADDR_VAR 0 3
17533: PUSH
17534: LD_INT 22
17536: PUSH
17537: LD_OWVAR 2
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 25
17548: PUSH
17549: LD_INT 1
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PPUSH
17560: CALL_OW 69
17564: ST_TO_ADDR
// if not tmp then
17565: LD_VAR 0 3
17569: NOT
17570: IFFALSE 17574
// exit ;
17572: GO 17660
// un := tmp [ rand ( 1 , tmp ) ] ;
17574: LD_ADDR_VAR 0 2
17578: PUSH
17579: LD_VAR 0 3
17583: PUSH
17584: LD_INT 1
17586: PPUSH
17587: LD_VAR 0 3
17591: PPUSH
17592: CALL_OW 12
17596: ARRAY
17597: ST_TO_ADDR
// if Crawls ( un ) then
17598: LD_VAR 0 2
17602: PPUSH
17603: CALL_OW 318
17607: IFFALSE 17618
// ComWalk ( un ) ;
17609: LD_VAR 0 2
17613: PPUSH
17614: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17618: LD_VAR 0 2
17622: PPUSH
17623: LD_INT 9
17625: PPUSH
17626: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17630: LD_INT 28
17632: PPUSH
17633: LD_OWVAR 2
17637: PPUSH
17638: LD_INT 2
17640: PPUSH
17641: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17645: LD_INT 29
17647: PPUSH
17648: LD_OWVAR 2
17652: PPUSH
17653: LD_INT 2
17655: PPUSH
17656: CALL_OW 322
// end ;
17660: PPOPN 3
17662: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17663: LD_EXP 25
17667: PUSH
17668: LD_EXP 68
17672: AND
17673: IFFALSE 17784
17675: GO 17677
17677: DISABLE
17678: LD_INT 0
17680: PPUSH
17681: PPUSH
17682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17683: LD_ADDR_VAR 0 3
17687: PUSH
17688: LD_INT 22
17690: PUSH
17691: LD_OWVAR 2
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 25
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PPUSH
17714: CALL_OW 69
17718: ST_TO_ADDR
// if not tmp then
17719: LD_VAR 0 3
17723: NOT
17724: IFFALSE 17728
// exit ;
17726: GO 17784
// un := tmp [ rand ( 1 , tmp ) ] ;
17728: LD_ADDR_VAR 0 2
17732: PUSH
17733: LD_VAR 0 3
17737: PUSH
17738: LD_INT 1
17740: PPUSH
17741: LD_VAR 0 3
17745: PPUSH
17746: CALL_OW 12
17750: ARRAY
17751: ST_TO_ADDR
// if Crawls ( un ) then
17752: LD_VAR 0 2
17756: PPUSH
17757: CALL_OW 318
17761: IFFALSE 17772
// ComWalk ( un ) ;
17763: LD_VAR 0 2
17767: PPUSH
17768: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17772: LD_VAR 0 2
17776: PPUSH
17777: LD_INT 8
17779: PPUSH
17780: CALL_OW 336
// end ;
17784: PPOPN 3
17786: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17787: LD_EXP 25
17791: PUSH
17792: LD_EXP 69
17796: AND
17797: IFFALSE 17941
17799: GO 17801
17801: DISABLE
17802: LD_INT 0
17804: PPUSH
17805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17806: LD_ADDR_VAR 0 2
17810: PUSH
17811: LD_INT 22
17813: PUSH
17814: LD_OWVAR 2
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 21
17825: PUSH
17826: LD_INT 2
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 2
17835: PUSH
17836: LD_INT 34
17838: PUSH
17839: LD_INT 12
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 34
17848: PUSH
17849: LD_INT 51
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 34
17858: PUSH
17859: LD_INT 32
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: LIST
17876: PPUSH
17877: CALL_OW 69
17881: ST_TO_ADDR
// if not tmp then
17882: LD_VAR 0 2
17886: NOT
17887: IFFALSE 17891
// exit ;
17889: GO 17941
// for i in tmp do
17891: LD_ADDR_VAR 0 1
17895: PUSH
17896: LD_VAR 0 2
17900: PUSH
17901: FOR_IN
17902: IFFALSE 17939
// if GetCargo ( i , mat_artifact ) = 0 then
17904: LD_VAR 0 1
17908: PPUSH
17909: LD_INT 4
17911: PPUSH
17912: CALL_OW 289
17916: PUSH
17917: LD_INT 0
17919: EQUAL
17920: IFFALSE 17937
// SetCargo ( i , mat_siberit , 100 ) ;
17922: LD_VAR 0 1
17926: PPUSH
17927: LD_INT 3
17929: PPUSH
17930: LD_INT 100
17932: PPUSH
17933: CALL_OW 290
17937: GO 17901
17939: POP
17940: POP
// end ;
17941: PPOPN 2
17943: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17944: LD_EXP 25
17948: PUSH
17949: LD_EXP 70
17953: AND
17954: IFFALSE 18137
17956: GO 17958
17958: DISABLE
17959: LD_INT 0
17961: PPUSH
17962: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17963: LD_ADDR_VAR 0 2
17967: PUSH
17968: LD_INT 22
17970: PUSH
17971: LD_OWVAR 2
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PPUSH
17980: CALL_OW 69
17984: ST_TO_ADDR
// if not tmp then
17985: LD_VAR 0 2
17989: NOT
17990: IFFALSE 17994
// exit ;
17992: GO 18137
// for i := 1 to 2 do
17994: LD_ADDR_VAR 0 1
17998: PUSH
17999: DOUBLE
18000: LD_INT 1
18002: DEC
18003: ST_TO_ADDR
18004: LD_INT 2
18006: PUSH
18007: FOR_TO
18008: IFFALSE 18135
// begin uc_side := your_side ;
18010: LD_ADDR_OWVAR 20
18014: PUSH
18015: LD_OWVAR 2
18019: ST_TO_ADDR
// uc_nation := nation_american ;
18020: LD_ADDR_OWVAR 21
18024: PUSH
18025: LD_INT 1
18027: ST_TO_ADDR
// vc_chassis := us_morphling ;
18028: LD_ADDR_OWVAR 37
18032: PUSH
18033: LD_INT 5
18035: ST_TO_ADDR
// vc_engine := engine_siberite ;
18036: LD_ADDR_OWVAR 39
18040: PUSH
18041: LD_INT 3
18043: ST_TO_ADDR
// vc_control := control_computer ;
18044: LD_ADDR_OWVAR 38
18048: PUSH
18049: LD_INT 3
18051: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18052: LD_ADDR_OWVAR 40
18056: PUSH
18057: LD_INT 10
18059: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18060: LD_VAR 0 2
18064: PUSH
18065: LD_INT 1
18067: ARRAY
18068: PPUSH
18069: CALL_OW 310
18073: NOT
18074: IFFALSE 18121
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18076: CALL_OW 45
18080: PPUSH
18081: LD_VAR 0 2
18085: PUSH
18086: LD_INT 1
18088: ARRAY
18089: PPUSH
18090: CALL_OW 250
18094: PPUSH
18095: LD_VAR 0 2
18099: PUSH
18100: LD_INT 1
18102: ARRAY
18103: PPUSH
18104: CALL_OW 251
18108: PPUSH
18109: LD_INT 12
18111: PPUSH
18112: LD_INT 1
18114: PPUSH
18115: CALL_OW 50
18119: GO 18133
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18121: CALL_OW 45
18125: PPUSH
18126: LD_INT 1
18128: PPUSH
18129: CALL_OW 51
// end ;
18133: GO 18007
18135: POP
18136: POP
// end ;
18137: PPOPN 2
18139: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18140: LD_EXP 25
18144: PUSH
18145: LD_EXP 71
18149: AND
18150: IFFALSE 18372
18152: GO 18154
18154: DISABLE
18155: LD_INT 0
18157: PPUSH
18158: PPUSH
18159: PPUSH
18160: PPUSH
18161: PPUSH
18162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18163: LD_ADDR_VAR 0 6
18167: PUSH
18168: LD_INT 22
18170: PUSH
18171: LD_OWVAR 2
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 21
18182: PUSH
18183: LD_INT 1
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 3
18192: PUSH
18193: LD_INT 23
18195: PUSH
18196: LD_INT 0
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: LIST
18211: PPUSH
18212: CALL_OW 69
18216: ST_TO_ADDR
// if not tmp then
18217: LD_VAR 0 6
18221: NOT
18222: IFFALSE 18226
// exit ;
18224: GO 18372
// s1 := rand ( 1 , 4 ) ;
18226: LD_ADDR_VAR 0 2
18230: PUSH
18231: LD_INT 1
18233: PPUSH
18234: LD_INT 4
18236: PPUSH
18237: CALL_OW 12
18241: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18242: LD_ADDR_VAR 0 4
18246: PUSH
18247: LD_VAR 0 6
18251: PUSH
18252: LD_INT 1
18254: ARRAY
18255: PPUSH
18256: LD_VAR 0 2
18260: PPUSH
18261: CALL_OW 259
18265: ST_TO_ADDR
// if s1 = 1 then
18266: LD_VAR 0 2
18270: PUSH
18271: LD_INT 1
18273: EQUAL
18274: IFFALSE 18294
// s2 := rand ( 2 , 4 ) else
18276: LD_ADDR_VAR 0 3
18280: PUSH
18281: LD_INT 2
18283: PPUSH
18284: LD_INT 4
18286: PPUSH
18287: CALL_OW 12
18291: ST_TO_ADDR
18292: GO 18302
// s2 := 1 ;
18294: LD_ADDR_VAR 0 3
18298: PUSH
18299: LD_INT 1
18301: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18302: LD_ADDR_VAR 0 5
18306: PUSH
18307: LD_VAR 0 6
18311: PUSH
18312: LD_INT 1
18314: ARRAY
18315: PPUSH
18316: LD_VAR 0 3
18320: PPUSH
18321: CALL_OW 259
18325: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18326: LD_VAR 0 6
18330: PUSH
18331: LD_INT 1
18333: ARRAY
18334: PPUSH
18335: LD_VAR 0 2
18339: PPUSH
18340: LD_VAR 0 5
18344: PPUSH
18345: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18349: LD_VAR 0 6
18353: PUSH
18354: LD_INT 1
18356: ARRAY
18357: PPUSH
18358: LD_VAR 0 3
18362: PPUSH
18363: LD_VAR 0 4
18367: PPUSH
18368: CALL_OW 237
// end ;
18372: PPOPN 6
18374: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18375: LD_EXP 25
18379: PUSH
18380: LD_EXP 72
18384: AND
18385: IFFALSE 18464
18387: GO 18389
18389: DISABLE
18390: LD_INT 0
18392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18393: LD_ADDR_VAR 0 1
18397: PUSH
18398: LD_INT 22
18400: PUSH
18401: LD_OWVAR 2
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 30
18412: PUSH
18413: LD_INT 3
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PPUSH
18424: CALL_OW 69
18428: ST_TO_ADDR
// if not tmp then
18429: LD_VAR 0 1
18433: NOT
18434: IFFALSE 18438
// exit ;
18436: GO 18464
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18438: LD_VAR 0 1
18442: PUSH
18443: LD_INT 1
18445: PPUSH
18446: LD_VAR 0 1
18450: PPUSH
18451: CALL_OW 12
18455: ARRAY
18456: PPUSH
18457: LD_INT 1
18459: PPUSH
18460: CALL_OW 234
// end ;
18464: PPOPN 1
18466: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18467: LD_EXP 25
18471: PUSH
18472: LD_EXP 73
18476: AND
18477: IFFALSE 18589
18479: GO 18481
18481: DISABLE
18482: LD_INT 0
18484: PPUSH
18485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18486: LD_ADDR_VAR 0 2
18490: PUSH
18491: LD_INT 22
18493: PUSH
18494: LD_OWVAR 2
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 2
18505: PUSH
18506: LD_INT 30
18508: PUSH
18509: LD_INT 27
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 30
18518: PUSH
18519: LD_INT 26
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 30
18528: PUSH
18529: LD_INT 28
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PPUSH
18546: CALL_OW 69
18550: ST_TO_ADDR
// if not tmp then
18551: LD_VAR 0 2
18555: NOT
18556: IFFALSE 18560
// exit ;
18558: GO 18589
// for i in tmp do
18560: LD_ADDR_VAR 0 1
18564: PUSH
18565: LD_VAR 0 2
18569: PUSH
18570: FOR_IN
18571: IFFALSE 18587
// SetLives ( i , 1 ) ;
18573: LD_VAR 0 1
18577: PPUSH
18578: LD_INT 1
18580: PPUSH
18581: CALL_OW 234
18585: GO 18570
18587: POP
18588: POP
// end ;
18589: PPOPN 2
18591: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18592: LD_EXP 25
18596: PUSH
18597: LD_EXP 74
18601: AND
18602: IFFALSE 18889
18604: GO 18606
18606: DISABLE
18607: LD_INT 0
18609: PPUSH
18610: PPUSH
18611: PPUSH
// begin i := rand ( 1 , 7 ) ;
18612: LD_ADDR_VAR 0 1
18616: PUSH
18617: LD_INT 1
18619: PPUSH
18620: LD_INT 7
18622: PPUSH
18623: CALL_OW 12
18627: ST_TO_ADDR
// case i of 1 :
18628: LD_VAR 0 1
18632: PUSH
18633: LD_INT 1
18635: DOUBLE
18636: EQUAL
18637: IFTRUE 18641
18639: GO 18651
18641: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18642: LD_STRING earthquake(getX(game), 0, 32)
18644: PPUSH
18645: CALL_OW 559
18649: GO 18889
18651: LD_INT 2
18653: DOUBLE
18654: EQUAL
18655: IFTRUE 18659
18657: GO 18673
18659: POP
// begin ToLua ( displayStucuk(); ) ;
18660: LD_STRING displayStucuk();
18662: PPUSH
18663: CALL_OW 559
// ResetFog ;
18667: CALL_OW 335
// end ; 3 :
18671: GO 18889
18673: LD_INT 3
18675: DOUBLE
18676: EQUAL
18677: IFTRUE 18681
18679: GO 18785
18681: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18682: LD_ADDR_VAR 0 2
18686: PUSH
18687: LD_INT 22
18689: PUSH
18690: LD_OWVAR 2
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 25
18701: PUSH
18702: LD_INT 1
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PPUSH
18713: CALL_OW 69
18717: ST_TO_ADDR
// if not tmp then
18718: LD_VAR 0 2
18722: NOT
18723: IFFALSE 18727
// exit ;
18725: GO 18889
// un := tmp [ rand ( 1 , tmp ) ] ;
18727: LD_ADDR_VAR 0 3
18731: PUSH
18732: LD_VAR 0 2
18736: PUSH
18737: LD_INT 1
18739: PPUSH
18740: LD_VAR 0 2
18744: PPUSH
18745: CALL_OW 12
18749: ARRAY
18750: ST_TO_ADDR
// if Crawls ( un ) then
18751: LD_VAR 0 3
18755: PPUSH
18756: CALL_OW 318
18760: IFFALSE 18771
// ComWalk ( un ) ;
18762: LD_VAR 0 3
18766: PPUSH
18767: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18771: LD_VAR 0 3
18775: PPUSH
18776: LD_INT 8
18778: PPUSH
18779: CALL_OW 336
// end ; 4 :
18783: GO 18889
18785: LD_INT 4
18787: DOUBLE
18788: EQUAL
18789: IFTRUE 18793
18791: GO 18867
18793: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18794: LD_ADDR_VAR 0 2
18798: PUSH
18799: LD_INT 22
18801: PUSH
18802: LD_OWVAR 2
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 30
18813: PUSH
18814: LD_INT 29
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PPUSH
18825: CALL_OW 69
18829: ST_TO_ADDR
// if not tmp then
18830: LD_VAR 0 2
18834: NOT
18835: IFFALSE 18839
// exit ;
18837: GO 18889
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18839: LD_VAR 0 2
18843: PUSH
18844: LD_INT 1
18846: ARRAY
18847: PPUSH
18848: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18852: LD_VAR 0 2
18856: PUSH
18857: LD_INT 1
18859: ARRAY
18860: PPUSH
18861: CALL_OW 65
// end ; 5 .. 7 :
18865: GO 18889
18867: LD_INT 5
18869: DOUBLE
18870: GREATEREQUAL
18871: IFFALSE 18879
18873: LD_INT 7
18875: DOUBLE
18876: LESSEQUAL
18877: IFTRUE 18881
18879: GO 18888
18881: POP
// StreamSibBomb ; end ;
18882: CALL 15126 0 0
18886: GO 18889
18888: POP
// end ;
18889: PPOPN 3
18891: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18892: LD_EXP 25
18896: PUSH
18897: LD_EXP 75
18901: AND
18902: IFFALSE 19058
18904: GO 18906
18906: DISABLE
18907: LD_INT 0
18909: PPUSH
18910: PPUSH
18911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18912: LD_ADDR_VAR 0 2
18916: PUSH
18917: LD_INT 81
18919: PUSH
18920: LD_OWVAR 2
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 2
18931: PUSH
18932: LD_INT 21
18934: PUSH
18935: LD_INT 1
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 21
18944: PUSH
18945: LD_INT 2
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: LIST
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PPUSH
18961: CALL_OW 69
18965: ST_TO_ADDR
// if not tmp then
18966: LD_VAR 0 2
18970: NOT
18971: IFFALSE 18975
// exit ;
18973: GO 19058
// p := 0 ;
18975: LD_ADDR_VAR 0 3
18979: PUSH
18980: LD_INT 0
18982: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18983: LD_INT 35
18985: PPUSH
18986: CALL_OW 67
// p := p + 1 ;
18990: LD_ADDR_VAR 0 3
18994: PUSH
18995: LD_VAR 0 3
18999: PUSH
19000: LD_INT 1
19002: PLUS
19003: ST_TO_ADDR
// for i in tmp do
19004: LD_ADDR_VAR 0 1
19008: PUSH
19009: LD_VAR 0 2
19013: PUSH
19014: FOR_IN
19015: IFFALSE 19046
// if GetLives ( i ) < 1000 then
19017: LD_VAR 0 1
19021: PPUSH
19022: CALL_OW 256
19026: PUSH
19027: LD_INT 1000
19029: LESS
19030: IFFALSE 19044
// SetLives ( i , 1000 ) ;
19032: LD_VAR 0 1
19036: PPUSH
19037: LD_INT 1000
19039: PPUSH
19040: CALL_OW 234
19044: GO 19014
19046: POP
19047: POP
// until p > 20 ;
19048: LD_VAR 0 3
19052: PUSH
19053: LD_INT 20
19055: GREATER
19056: IFFALSE 18983
// end ;
19058: PPOPN 3
19060: END
// every 0 0$1 trigger StreamModeActive and sTime do
19061: LD_EXP 25
19065: PUSH
19066: LD_EXP 76
19070: AND
19071: IFFALSE 19106
19073: GO 19075
19075: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19076: LD_INT 28
19078: PPUSH
19079: LD_OWVAR 2
19083: PPUSH
19084: LD_INT 2
19086: PPUSH
19087: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19091: LD_INT 30
19093: PPUSH
19094: LD_OWVAR 2
19098: PPUSH
19099: LD_INT 2
19101: PPUSH
19102: CALL_OW 322
// end ;
19106: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19107: LD_EXP 25
19111: PUSH
19112: LD_EXP 77
19116: AND
19117: IFFALSE 19238
19119: GO 19121
19121: DISABLE
19122: LD_INT 0
19124: PPUSH
19125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19126: LD_ADDR_VAR 0 2
19130: PUSH
19131: LD_INT 22
19133: PUSH
19134: LD_OWVAR 2
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 21
19145: PUSH
19146: LD_INT 1
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 3
19155: PUSH
19156: LD_INT 23
19158: PUSH
19159: LD_INT 0
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: LIST
19174: PPUSH
19175: CALL_OW 69
19179: ST_TO_ADDR
// if not tmp then
19180: LD_VAR 0 2
19184: NOT
19185: IFFALSE 19189
// exit ;
19187: GO 19238
// for i in tmp do
19189: LD_ADDR_VAR 0 1
19193: PUSH
19194: LD_VAR 0 2
19198: PUSH
19199: FOR_IN
19200: IFFALSE 19236
// begin if Crawls ( i ) then
19202: LD_VAR 0 1
19206: PPUSH
19207: CALL_OW 318
19211: IFFALSE 19222
// ComWalk ( i ) ;
19213: LD_VAR 0 1
19217: PPUSH
19218: CALL_OW 138
// SetClass ( i , 2 ) ;
19222: LD_VAR 0 1
19226: PPUSH
19227: LD_INT 2
19229: PPUSH
19230: CALL_OW 336
// end ;
19234: GO 19199
19236: POP
19237: POP
// end ;
19238: PPOPN 2
19240: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19241: LD_EXP 25
19245: PUSH
19246: LD_EXP 78
19250: AND
19251: IFFALSE 19539
19253: GO 19255
19255: DISABLE
19256: LD_INT 0
19258: PPUSH
19259: PPUSH
19260: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19261: LD_OWVAR 2
19265: PPUSH
19266: LD_INT 9
19268: PPUSH
19269: LD_INT 1
19271: PPUSH
19272: LD_INT 1
19274: PPUSH
19275: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19279: LD_INT 9
19281: PPUSH
19282: LD_OWVAR 2
19286: PPUSH
19287: CALL_OW 343
// uc_side := 9 ;
19291: LD_ADDR_OWVAR 20
19295: PUSH
19296: LD_INT 9
19298: ST_TO_ADDR
// uc_nation := 2 ;
19299: LD_ADDR_OWVAR 21
19303: PUSH
19304: LD_INT 2
19306: ST_TO_ADDR
// hc_name := Dark Warrior ;
19307: LD_ADDR_OWVAR 26
19311: PUSH
19312: LD_STRING Dark Warrior
19314: ST_TO_ADDR
// hc_gallery :=  ;
19315: LD_ADDR_OWVAR 33
19319: PUSH
19320: LD_STRING 
19322: ST_TO_ADDR
// hc_noskilllimit := true ;
19323: LD_ADDR_OWVAR 76
19327: PUSH
19328: LD_INT 1
19330: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19331: LD_ADDR_OWVAR 31
19335: PUSH
19336: LD_INT 30
19338: PUSH
19339: LD_INT 30
19341: PUSH
19342: LD_INT 30
19344: PUSH
19345: LD_INT 30
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: ST_TO_ADDR
// un := CreateHuman ;
19354: LD_ADDR_VAR 0 3
19358: PUSH
19359: CALL_OW 44
19363: ST_TO_ADDR
// hc_noskilllimit := false ;
19364: LD_ADDR_OWVAR 76
19368: PUSH
19369: LD_INT 0
19371: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19372: LD_VAR 0 3
19376: PPUSH
19377: LD_INT 1
19379: PPUSH
19380: CALL_OW 51
// ToLua ( playRanger() ) ;
19384: LD_STRING playRanger()
19386: PPUSH
19387: CALL_OW 559
// p := 0 ;
19391: LD_ADDR_VAR 0 2
19395: PUSH
19396: LD_INT 0
19398: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19399: LD_INT 35
19401: PPUSH
19402: CALL_OW 67
// p := p + 1 ;
19406: LD_ADDR_VAR 0 2
19410: PUSH
19411: LD_VAR 0 2
19415: PUSH
19416: LD_INT 1
19418: PLUS
19419: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19420: LD_VAR 0 3
19424: PPUSH
19425: CALL_OW 256
19429: PUSH
19430: LD_INT 1000
19432: LESS
19433: IFFALSE 19447
// SetLives ( un , 1000 ) ;
19435: LD_VAR 0 3
19439: PPUSH
19440: LD_INT 1000
19442: PPUSH
19443: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19447: LD_VAR 0 3
19451: PPUSH
19452: LD_INT 81
19454: PUSH
19455: LD_OWVAR 2
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 91
19466: PUSH
19467: LD_VAR 0 3
19471: PUSH
19472: LD_INT 30
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: LIST
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PPUSH
19484: CALL_OW 69
19488: PPUSH
19489: LD_VAR 0 3
19493: PPUSH
19494: CALL_OW 74
19498: PPUSH
19499: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19503: LD_VAR 0 2
19507: PUSH
19508: LD_INT 80
19510: GREATER
19511: PUSH
19512: LD_VAR 0 3
19516: PPUSH
19517: CALL_OW 301
19521: OR
19522: IFFALSE 19399
// if un then
19524: LD_VAR 0 3
19528: IFFALSE 19539
// RemoveUnit ( un ) ;
19530: LD_VAR 0 3
19534: PPUSH
19535: CALL_OW 64
// end ;
19539: PPOPN 3
19541: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19542: LD_EXP 79
19546: IFFALSE 19662
19548: GO 19550
19550: DISABLE
19551: LD_INT 0
19553: PPUSH
19554: PPUSH
19555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19556: LD_ADDR_VAR 0 2
19560: PUSH
19561: LD_INT 81
19563: PUSH
19564: LD_OWVAR 2
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 21
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PPUSH
19587: CALL_OW 69
19591: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19592: LD_STRING playComputer()
19594: PPUSH
19595: CALL_OW 559
// if not tmp then
19599: LD_VAR 0 2
19603: NOT
19604: IFFALSE 19608
// exit ;
19606: GO 19662
// for i in tmp do
19608: LD_ADDR_VAR 0 1
19612: PUSH
19613: LD_VAR 0 2
19617: PUSH
19618: FOR_IN
19619: IFFALSE 19660
// for j := 1 to 4 do
19621: LD_ADDR_VAR 0 3
19625: PUSH
19626: DOUBLE
19627: LD_INT 1
19629: DEC
19630: ST_TO_ADDR
19631: LD_INT 4
19633: PUSH
19634: FOR_TO
19635: IFFALSE 19656
// SetSkill ( i , j , 10 ) ;
19637: LD_VAR 0 1
19641: PPUSH
19642: LD_VAR 0 3
19646: PPUSH
19647: LD_INT 10
19649: PPUSH
19650: CALL_OW 237
19654: GO 19634
19656: POP
19657: POP
19658: GO 19618
19660: POP
19661: POP
// end ;
19662: PPOPN 3
19664: END
// every 0 0$1 trigger s30 do var i , tmp ;
19665: LD_EXP 80
19669: IFFALSE 19738
19671: GO 19673
19673: DISABLE
19674: LD_INT 0
19676: PPUSH
19677: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19678: LD_ADDR_VAR 0 2
19682: PUSH
19683: LD_INT 22
19685: PUSH
19686: LD_OWVAR 2
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PPUSH
19695: CALL_OW 69
19699: ST_TO_ADDR
// if not tmp then
19700: LD_VAR 0 2
19704: NOT
19705: IFFALSE 19709
// exit ;
19707: GO 19738
// for i in tmp do
19709: LD_ADDR_VAR 0 1
19713: PUSH
19714: LD_VAR 0 2
19718: PUSH
19719: FOR_IN
19720: IFFALSE 19736
// SetLives ( i , 300 ) ;
19722: LD_VAR 0 1
19726: PPUSH
19727: LD_INT 300
19729: PPUSH
19730: CALL_OW 234
19734: GO 19719
19736: POP
19737: POP
// end ;
19738: PPOPN 2
19740: END
// every 0 0$1 trigger s60 do var i , tmp ;
19741: LD_EXP 81
19745: IFFALSE 19814
19747: GO 19749
19749: DISABLE
19750: LD_INT 0
19752: PPUSH
19753: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19754: LD_ADDR_VAR 0 2
19758: PUSH
19759: LD_INT 22
19761: PUSH
19762: LD_OWVAR 2
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PPUSH
19771: CALL_OW 69
19775: ST_TO_ADDR
// if not tmp then
19776: LD_VAR 0 2
19780: NOT
19781: IFFALSE 19785
// exit ;
19783: GO 19814
// for i in tmp do
19785: LD_ADDR_VAR 0 1
19789: PUSH
19790: LD_VAR 0 2
19794: PUSH
19795: FOR_IN
19796: IFFALSE 19812
// SetLives ( i , 600 ) ;
19798: LD_VAR 0 1
19802: PPUSH
19803: LD_INT 600
19805: PPUSH
19806: CALL_OW 234
19810: GO 19795
19812: POP
19813: POP
// end ;
19814: PPOPN 2
19816: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19817: LD_INT 0
19819: PPUSH
// case cmd of 301 :
19820: LD_VAR 0 1
19824: PUSH
19825: LD_INT 301
19827: DOUBLE
19828: EQUAL
19829: IFTRUE 19833
19831: GO 19865
19833: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19834: LD_VAR 0 6
19838: PPUSH
19839: LD_VAR 0 7
19843: PPUSH
19844: LD_VAR 0 8
19848: PPUSH
19849: LD_VAR 0 4
19853: PPUSH
19854: LD_VAR 0 5
19858: PPUSH
19859: CALL 21074 0 5
19863: GO 19986
19865: LD_INT 302
19867: DOUBLE
19868: EQUAL
19869: IFTRUE 19873
19871: GO 19910
19873: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19874: LD_VAR 0 6
19878: PPUSH
19879: LD_VAR 0 7
19883: PPUSH
19884: LD_VAR 0 8
19888: PPUSH
19889: LD_VAR 0 9
19893: PPUSH
19894: LD_VAR 0 4
19898: PPUSH
19899: LD_VAR 0 5
19903: PPUSH
19904: CALL 21165 0 6
19908: GO 19986
19910: LD_INT 303
19912: DOUBLE
19913: EQUAL
19914: IFTRUE 19918
19916: GO 19955
19918: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19919: LD_VAR 0 6
19923: PPUSH
19924: LD_VAR 0 7
19928: PPUSH
19929: LD_VAR 0 8
19933: PPUSH
19934: LD_VAR 0 9
19938: PPUSH
19939: LD_VAR 0 4
19943: PPUSH
19944: LD_VAR 0 5
19948: PPUSH
19949: CALL 19991 0 6
19953: GO 19986
19955: LD_INT 304
19957: DOUBLE
19958: EQUAL
19959: IFTRUE 19963
19961: GO 19985
19963: POP
// hHackTeleport ( unit , x , y ) ; end ;
19964: LD_VAR 0 2
19968: PPUSH
19969: LD_VAR 0 4
19973: PPUSH
19974: LD_VAR 0 5
19978: PPUSH
19979: CALL 21758 0 3
19983: GO 19986
19985: POP
// end ;
19986: LD_VAR 0 12
19990: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19991: LD_INT 0
19993: PPUSH
19994: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19995: LD_VAR 0 1
19999: PUSH
20000: LD_INT 1
20002: LESS
20003: PUSH
20004: LD_VAR 0 1
20008: PUSH
20009: LD_INT 3
20011: GREATER
20012: OR
20013: PUSH
20014: LD_VAR 0 5
20018: PPUSH
20019: LD_VAR 0 6
20023: PPUSH
20024: CALL_OW 428
20028: OR
20029: IFFALSE 20033
// exit ;
20031: GO 20761
// uc_side := your_side ;
20033: LD_ADDR_OWVAR 20
20037: PUSH
20038: LD_OWVAR 2
20042: ST_TO_ADDR
// uc_nation := nation ;
20043: LD_ADDR_OWVAR 21
20047: PUSH
20048: LD_VAR 0 1
20052: ST_TO_ADDR
// bc_level = 1 ;
20053: LD_ADDR_OWVAR 43
20057: PUSH
20058: LD_INT 1
20060: ST_TO_ADDR
// case btype of 1 :
20061: LD_VAR 0 2
20065: PUSH
20066: LD_INT 1
20068: DOUBLE
20069: EQUAL
20070: IFTRUE 20074
20072: GO 20085
20074: POP
// bc_type := b_depot ; 2 :
20075: LD_ADDR_OWVAR 42
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
20083: GO 20705
20085: LD_INT 2
20087: DOUBLE
20088: EQUAL
20089: IFTRUE 20093
20091: GO 20104
20093: POP
// bc_type := b_warehouse ; 3 :
20094: LD_ADDR_OWVAR 42
20098: PUSH
20099: LD_INT 1
20101: ST_TO_ADDR
20102: GO 20705
20104: LD_INT 3
20106: DOUBLE
20107: EQUAL
20108: IFTRUE 20112
20110: GO 20123
20112: POP
// bc_type := b_lab ; 4 .. 9 :
20113: LD_ADDR_OWVAR 42
20117: PUSH
20118: LD_INT 6
20120: ST_TO_ADDR
20121: GO 20705
20123: LD_INT 4
20125: DOUBLE
20126: GREATEREQUAL
20127: IFFALSE 20135
20129: LD_INT 9
20131: DOUBLE
20132: LESSEQUAL
20133: IFTRUE 20137
20135: GO 20197
20137: POP
// begin bc_type := b_lab_half ;
20138: LD_ADDR_OWVAR 42
20142: PUSH
20143: LD_INT 7
20145: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20146: LD_ADDR_OWVAR 44
20150: PUSH
20151: LD_INT 10
20153: PUSH
20154: LD_INT 11
20156: PUSH
20157: LD_INT 12
20159: PUSH
20160: LD_INT 15
20162: PUSH
20163: LD_INT 14
20165: PUSH
20166: LD_INT 13
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: PUSH
20177: LD_VAR 0 2
20181: PUSH
20182: LD_INT 3
20184: MINUS
20185: ARRAY
20186: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20187: LD_ADDR_OWVAR 45
20191: PUSH
20192: LD_INT 9
20194: ST_TO_ADDR
// end ; 10 .. 13 :
20195: GO 20705
20197: LD_INT 10
20199: DOUBLE
20200: GREATEREQUAL
20201: IFFALSE 20209
20203: LD_INT 13
20205: DOUBLE
20206: LESSEQUAL
20207: IFTRUE 20211
20209: GO 20288
20211: POP
// begin bc_type := b_lab_full ;
20212: LD_ADDR_OWVAR 42
20216: PUSH
20217: LD_INT 8
20219: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20220: LD_ADDR_OWVAR 44
20224: PUSH
20225: LD_INT 10
20227: PUSH
20228: LD_INT 12
20230: PUSH
20231: LD_INT 14
20233: PUSH
20234: LD_INT 13
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: PUSH
20243: LD_VAR 0 2
20247: PUSH
20248: LD_INT 9
20250: MINUS
20251: ARRAY
20252: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20253: LD_ADDR_OWVAR 45
20257: PUSH
20258: LD_INT 11
20260: PUSH
20261: LD_INT 15
20263: PUSH
20264: LD_INT 12
20266: PUSH
20267: LD_INT 15
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: PUSH
20276: LD_VAR 0 2
20280: PUSH
20281: LD_INT 9
20283: MINUS
20284: ARRAY
20285: ST_TO_ADDR
// end ; 14 :
20286: GO 20705
20288: LD_INT 14
20290: DOUBLE
20291: EQUAL
20292: IFTRUE 20296
20294: GO 20307
20296: POP
// bc_type := b_workshop ; 15 :
20297: LD_ADDR_OWVAR 42
20301: PUSH
20302: LD_INT 2
20304: ST_TO_ADDR
20305: GO 20705
20307: LD_INT 15
20309: DOUBLE
20310: EQUAL
20311: IFTRUE 20315
20313: GO 20326
20315: POP
// bc_type := b_factory ; 16 :
20316: LD_ADDR_OWVAR 42
20320: PUSH
20321: LD_INT 3
20323: ST_TO_ADDR
20324: GO 20705
20326: LD_INT 16
20328: DOUBLE
20329: EQUAL
20330: IFTRUE 20334
20332: GO 20345
20334: POP
// bc_type := b_ext_gun ; 17 :
20335: LD_ADDR_OWVAR 42
20339: PUSH
20340: LD_INT 17
20342: ST_TO_ADDR
20343: GO 20705
20345: LD_INT 17
20347: DOUBLE
20348: EQUAL
20349: IFTRUE 20353
20351: GO 20381
20353: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20354: LD_ADDR_OWVAR 42
20358: PUSH
20359: LD_INT 19
20361: PUSH
20362: LD_INT 23
20364: PUSH
20365: LD_INT 19
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: LIST
20372: PUSH
20373: LD_VAR 0 1
20377: ARRAY
20378: ST_TO_ADDR
20379: GO 20705
20381: LD_INT 18
20383: DOUBLE
20384: EQUAL
20385: IFTRUE 20389
20387: GO 20400
20389: POP
// bc_type := b_ext_radar ; 19 :
20390: LD_ADDR_OWVAR 42
20394: PUSH
20395: LD_INT 20
20397: ST_TO_ADDR
20398: GO 20705
20400: LD_INT 19
20402: DOUBLE
20403: EQUAL
20404: IFTRUE 20408
20406: GO 20419
20408: POP
// bc_type := b_ext_radio ; 20 :
20409: LD_ADDR_OWVAR 42
20413: PUSH
20414: LD_INT 22
20416: ST_TO_ADDR
20417: GO 20705
20419: LD_INT 20
20421: DOUBLE
20422: EQUAL
20423: IFTRUE 20427
20425: GO 20438
20427: POP
// bc_type := b_ext_siberium ; 21 :
20428: LD_ADDR_OWVAR 42
20432: PUSH
20433: LD_INT 21
20435: ST_TO_ADDR
20436: GO 20705
20438: LD_INT 21
20440: DOUBLE
20441: EQUAL
20442: IFTRUE 20446
20444: GO 20457
20446: POP
// bc_type := b_ext_computer ; 22 :
20447: LD_ADDR_OWVAR 42
20451: PUSH
20452: LD_INT 24
20454: ST_TO_ADDR
20455: GO 20705
20457: LD_INT 22
20459: DOUBLE
20460: EQUAL
20461: IFTRUE 20465
20463: GO 20476
20465: POP
// bc_type := b_ext_track ; 23 :
20466: LD_ADDR_OWVAR 42
20470: PUSH
20471: LD_INT 16
20473: ST_TO_ADDR
20474: GO 20705
20476: LD_INT 23
20478: DOUBLE
20479: EQUAL
20480: IFTRUE 20484
20482: GO 20495
20484: POP
// bc_type := b_ext_laser ; 24 :
20485: LD_ADDR_OWVAR 42
20489: PUSH
20490: LD_INT 25
20492: ST_TO_ADDR
20493: GO 20705
20495: LD_INT 24
20497: DOUBLE
20498: EQUAL
20499: IFTRUE 20503
20501: GO 20514
20503: POP
// bc_type := b_control_tower ; 25 :
20504: LD_ADDR_OWVAR 42
20508: PUSH
20509: LD_INT 36
20511: ST_TO_ADDR
20512: GO 20705
20514: LD_INT 25
20516: DOUBLE
20517: EQUAL
20518: IFTRUE 20522
20520: GO 20533
20522: POP
// bc_type := b_breastwork ; 26 :
20523: LD_ADDR_OWVAR 42
20527: PUSH
20528: LD_INT 31
20530: ST_TO_ADDR
20531: GO 20705
20533: LD_INT 26
20535: DOUBLE
20536: EQUAL
20537: IFTRUE 20541
20539: GO 20552
20541: POP
// bc_type := b_bunker ; 27 :
20542: LD_ADDR_OWVAR 42
20546: PUSH
20547: LD_INT 32
20549: ST_TO_ADDR
20550: GO 20705
20552: LD_INT 27
20554: DOUBLE
20555: EQUAL
20556: IFTRUE 20560
20558: GO 20571
20560: POP
// bc_type := b_turret ; 28 :
20561: LD_ADDR_OWVAR 42
20565: PUSH
20566: LD_INT 33
20568: ST_TO_ADDR
20569: GO 20705
20571: LD_INT 28
20573: DOUBLE
20574: EQUAL
20575: IFTRUE 20579
20577: GO 20590
20579: POP
// bc_type := b_armoury ; 29 :
20580: LD_ADDR_OWVAR 42
20584: PUSH
20585: LD_INT 4
20587: ST_TO_ADDR
20588: GO 20705
20590: LD_INT 29
20592: DOUBLE
20593: EQUAL
20594: IFTRUE 20598
20596: GO 20609
20598: POP
// bc_type := b_barracks ; 30 :
20599: LD_ADDR_OWVAR 42
20603: PUSH
20604: LD_INT 5
20606: ST_TO_ADDR
20607: GO 20705
20609: LD_INT 30
20611: DOUBLE
20612: EQUAL
20613: IFTRUE 20617
20615: GO 20628
20617: POP
// bc_type := b_solar_power ; 31 :
20618: LD_ADDR_OWVAR 42
20622: PUSH
20623: LD_INT 27
20625: ST_TO_ADDR
20626: GO 20705
20628: LD_INT 31
20630: DOUBLE
20631: EQUAL
20632: IFTRUE 20636
20634: GO 20647
20636: POP
// bc_type := b_oil_power ; 32 :
20637: LD_ADDR_OWVAR 42
20641: PUSH
20642: LD_INT 26
20644: ST_TO_ADDR
20645: GO 20705
20647: LD_INT 32
20649: DOUBLE
20650: EQUAL
20651: IFTRUE 20655
20653: GO 20666
20655: POP
// bc_type := b_siberite_power ; 33 :
20656: LD_ADDR_OWVAR 42
20660: PUSH
20661: LD_INT 28
20663: ST_TO_ADDR
20664: GO 20705
20666: LD_INT 33
20668: DOUBLE
20669: EQUAL
20670: IFTRUE 20674
20672: GO 20685
20674: POP
// bc_type := b_oil_mine ; 34 :
20675: LD_ADDR_OWVAR 42
20679: PUSH
20680: LD_INT 29
20682: ST_TO_ADDR
20683: GO 20705
20685: LD_INT 34
20687: DOUBLE
20688: EQUAL
20689: IFTRUE 20693
20691: GO 20704
20693: POP
// bc_type := b_siberite_mine ; end ;
20694: LD_ADDR_OWVAR 42
20698: PUSH
20699: LD_INT 30
20701: ST_TO_ADDR
20702: GO 20705
20704: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20705: LD_ADDR_VAR 0 8
20709: PUSH
20710: LD_VAR 0 5
20714: PPUSH
20715: LD_VAR 0 6
20719: PPUSH
20720: LD_VAR 0 3
20724: PPUSH
20725: CALL_OW 47
20729: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20730: LD_OWVAR 42
20734: PUSH
20735: LD_INT 32
20737: PUSH
20738: LD_INT 33
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: IN
20745: IFFALSE 20761
// PlaceWeaponTurret ( b , weapon ) ;
20747: LD_VAR 0 8
20751: PPUSH
20752: LD_VAR 0 4
20756: PPUSH
20757: CALL_OW 431
// end ;
20761: LD_VAR 0 7
20765: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20766: LD_INT 0
20768: PPUSH
20769: PPUSH
20770: PPUSH
20771: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20772: LD_ADDR_VAR 0 4
20776: PUSH
20777: LD_INT 22
20779: PUSH
20780: LD_OWVAR 2
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 2
20791: PUSH
20792: LD_INT 30
20794: PUSH
20795: LD_INT 0
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 30
20804: PUSH
20805: LD_INT 1
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PPUSH
20821: CALL_OW 69
20825: ST_TO_ADDR
// if not tmp then
20826: LD_VAR 0 4
20830: NOT
20831: IFFALSE 20835
// exit ;
20833: GO 20894
// for i in tmp do
20835: LD_ADDR_VAR 0 2
20839: PUSH
20840: LD_VAR 0 4
20844: PUSH
20845: FOR_IN
20846: IFFALSE 20892
// for j = 1 to 3 do
20848: LD_ADDR_VAR 0 3
20852: PUSH
20853: DOUBLE
20854: LD_INT 1
20856: DEC
20857: ST_TO_ADDR
20858: LD_INT 3
20860: PUSH
20861: FOR_TO
20862: IFFALSE 20888
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20864: LD_VAR 0 2
20868: PPUSH
20869: CALL_OW 274
20873: PPUSH
20874: LD_VAR 0 3
20878: PPUSH
20879: LD_INT 99999
20881: PPUSH
20882: CALL_OW 277
20886: GO 20861
20888: POP
20889: POP
20890: GO 20845
20892: POP
20893: POP
// end ;
20894: LD_VAR 0 1
20898: RET
// export function hHackSetLevel10 ; var i , j ; begin
20899: LD_INT 0
20901: PPUSH
20902: PPUSH
20903: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20904: LD_ADDR_VAR 0 2
20908: PUSH
20909: LD_INT 21
20911: PUSH
20912: LD_INT 1
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PPUSH
20919: CALL_OW 69
20923: PUSH
20924: FOR_IN
20925: IFFALSE 20977
// if IsSelected ( i ) then
20927: LD_VAR 0 2
20931: PPUSH
20932: CALL_OW 306
20936: IFFALSE 20975
// begin for j := 1 to 4 do
20938: LD_ADDR_VAR 0 3
20942: PUSH
20943: DOUBLE
20944: LD_INT 1
20946: DEC
20947: ST_TO_ADDR
20948: LD_INT 4
20950: PUSH
20951: FOR_TO
20952: IFFALSE 20973
// SetSkill ( i , j , 10 ) ;
20954: LD_VAR 0 2
20958: PPUSH
20959: LD_VAR 0 3
20963: PPUSH
20964: LD_INT 10
20966: PPUSH
20967: CALL_OW 237
20971: GO 20951
20973: POP
20974: POP
// end ;
20975: GO 20924
20977: POP
20978: POP
// end ;
20979: LD_VAR 0 1
20983: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20984: LD_INT 0
20986: PPUSH
20987: PPUSH
20988: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20989: LD_ADDR_VAR 0 2
20993: PUSH
20994: LD_INT 22
20996: PUSH
20997: LD_OWVAR 2
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 21
21008: PUSH
21009: LD_INT 1
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PPUSH
21020: CALL_OW 69
21024: PUSH
21025: FOR_IN
21026: IFFALSE 21067
// begin for j := 1 to 4 do
21028: LD_ADDR_VAR 0 3
21032: PUSH
21033: DOUBLE
21034: LD_INT 1
21036: DEC
21037: ST_TO_ADDR
21038: LD_INT 4
21040: PUSH
21041: FOR_TO
21042: IFFALSE 21063
// SetSkill ( i , j , 10 ) ;
21044: LD_VAR 0 2
21048: PPUSH
21049: LD_VAR 0 3
21053: PPUSH
21054: LD_INT 10
21056: PPUSH
21057: CALL_OW 237
21061: GO 21041
21063: POP
21064: POP
// end ;
21065: GO 21025
21067: POP
21068: POP
// end ;
21069: LD_VAR 0 1
21073: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21074: LD_INT 0
21076: PPUSH
// uc_side := your_side ;
21077: LD_ADDR_OWVAR 20
21081: PUSH
21082: LD_OWVAR 2
21086: ST_TO_ADDR
// uc_nation := nation ;
21087: LD_ADDR_OWVAR 21
21091: PUSH
21092: LD_VAR 0 1
21096: ST_TO_ADDR
// InitHc ;
21097: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21101: LD_INT 0
21103: PPUSH
21104: LD_VAR 0 2
21108: PPUSH
21109: LD_VAR 0 3
21113: PPUSH
21114: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21118: LD_VAR 0 4
21122: PPUSH
21123: LD_VAR 0 5
21127: PPUSH
21128: CALL_OW 428
21132: PUSH
21133: LD_INT 0
21135: EQUAL
21136: IFFALSE 21160
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21138: CALL_OW 44
21142: PPUSH
21143: LD_VAR 0 4
21147: PPUSH
21148: LD_VAR 0 5
21152: PPUSH
21153: LD_INT 1
21155: PPUSH
21156: CALL_OW 48
// end ;
21160: LD_VAR 0 6
21164: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21165: LD_INT 0
21167: PPUSH
21168: PPUSH
// uc_side := your_side ;
21169: LD_ADDR_OWVAR 20
21173: PUSH
21174: LD_OWVAR 2
21178: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21179: LD_VAR 0 1
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: LD_INT 2
21189: PUSH
21190: LD_INT 3
21192: PUSH
21193: LD_INT 4
21195: PUSH
21196: LD_INT 5
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: IN
21206: IFFALSE 21218
// uc_nation := nation_american else
21208: LD_ADDR_OWVAR 21
21212: PUSH
21213: LD_INT 1
21215: ST_TO_ADDR
21216: GO 21261
// if chassis in [ 11 , 12 , 13 , 14 ] then
21218: LD_VAR 0 1
21222: PUSH
21223: LD_INT 11
21225: PUSH
21226: LD_INT 12
21228: PUSH
21229: LD_INT 13
21231: PUSH
21232: LD_INT 14
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: IN
21241: IFFALSE 21253
// uc_nation := nation_arabian else
21243: LD_ADDR_OWVAR 21
21247: PUSH
21248: LD_INT 2
21250: ST_TO_ADDR
21251: GO 21261
// uc_nation := nation_russian ;
21253: LD_ADDR_OWVAR 21
21257: PUSH
21258: LD_INT 3
21260: ST_TO_ADDR
// vc_chassis := chassis ;
21261: LD_ADDR_OWVAR 37
21265: PUSH
21266: LD_VAR 0 1
21270: ST_TO_ADDR
// vc_engine := engine ;
21271: LD_ADDR_OWVAR 39
21275: PUSH
21276: LD_VAR 0 2
21280: ST_TO_ADDR
// vc_control := control ;
21281: LD_ADDR_OWVAR 38
21285: PUSH
21286: LD_VAR 0 3
21290: ST_TO_ADDR
// vc_weapon := weapon ;
21291: LD_ADDR_OWVAR 40
21295: PUSH
21296: LD_VAR 0 4
21300: ST_TO_ADDR
// un := CreateVehicle ;
21301: LD_ADDR_VAR 0 8
21305: PUSH
21306: CALL_OW 45
21310: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21311: LD_VAR 0 8
21315: PPUSH
21316: LD_INT 0
21318: PPUSH
21319: LD_INT 5
21321: PPUSH
21322: CALL_OW 12
21326: PPUSH
21327: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21331: LD_VAR 0 8
21335: PPUSH
21336: LD_VAR 0 5
21340: PPUSH
21341: LD_VAR 0 6
21345: PPUSH
21346: LD_INT 1
21348: PPUSH
21349: CALL_OW 48
// end ;
21353: LD_VAR 0 7
21357: RET
// export hInvincible ; every 1 do
21358: GO 21360
21360: DISABLE
// hInvincible := [ ] ;
21361: LD_ADDR_EXP 82
21365: PUSH
21366: EMPTY
21367: ST_TO_ADDR
21368: END
// every 10 do var i ;
21369: GO 21371
21371: DISABLE
21372: LD_INT 0
21374: PPUSH
// begin enable ;
21375: ENABLE
// if not hInvincible then
21376: LD_EXP 82
21380: NOT
21381: IFFALSE 21385
// exit ;
21383: GO 21429
// for i in hInvincible do
21385: LD_ADDR_VAR 0 1
21389: PUSH
21390: LD_EXP 82
21394: PUSH
21395: FOR_IN
21396: IFFALSE 21427
// if GetLives ( i ) < 1000 then
21398: LD_VAR 0 1
21402: PPUSH
21403: CALL_OW 256
21407: PUSH
21408: LD_INT 1000
21410: LESS
21411: IFFALSE 21425
// SetLives ( i , 1000 ) ;
21413: LD_VAR 0 1
21417: PPUSH
21418: LD_INT 1000
21420: PPUSH
21421: CALL_OW 234
21425: GO 21395
21427: POP
21428: POP
// end ;
21429: PPOPN 1
21431: END
// export function hHackInvincible ; var i ; begin
21432: LD_INT 0
21434: PPUSH
21435: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21436: LD_ADDR_VAR 0 2
21440: PUSH
21441: LD_INT 2
21443: PUSH
21444: LD_INT 21
21446: PUSH
21447: LD_INT 1
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 21
21456: PUSH
21457: LD_INT 2
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: LIST
21468: PPUSH
21469: CALL_OW 69
21473: PUSH
21474: FOR_IN
21475: IFFALSE 21536
// if IsSelected ( i ) then
21477: LD_VAR 0 2
21481: PPUSH
21482: CALL_OW 306
21486: IFFALSE 21534
// begin if i in hInvincible then
21488: LD_VAR 0 2
21492: PUSH
21493: LD_EXP 82
21497: IN
21498: IFFALSE 21518
// hInvincible := hInvincible diff i else
21500: LD_ADDR_EXP 82
21504: PUSH
21505: LD_EXP 82
21509: PUSH
21510: LD_VAR 0 2
21514: DIFF
21515: ST_TO_ADDR
21516: GO 21534
// hInvincible := hInvincible union i ;
21518: LD_ADDR_EXP 82
21522: PUSH
21523: LD_EXP 82
21527: PUSH
21528: LD_VAR 0 2
21532: UNION
21533: ST_TO_ADDR
// end ;
21534: GO 21474
21536: POP
21537: POP
// end ;
21538: LD_VAR 0 1
21542: RET
// export function hHackInvisible ; var i , j ; begin
21543: LD_INT 0
21545: PPUSH
21546: PPUSH
21547: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21548: LD_ADDR_VAR 0 2
21552: PUSH
21553: LD_INT 21
21555: PUSH
21556: LD_INT 1
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PPUSH
21563: CALL_OW 69
21567: PUSH
21568: FOR_IN
21569: IFFALSE 21593
// if IsSelected ( i ) then
21571: LD_VAR 0 2
21575: PPUSH
21576: CALL_OW 306
21580: IFFALSE 21591
// ComForceInvisible ( i ) ;
21582: LD_VAR 0 2
21586: PPUSH
21587: CALL_OW 496
21591: GO 21568
21593: POP
21594: POP
// end ;
21595: LD_VAR 0 1
21599: RET
// export function hHackChangeYourSide ; begin
21600: LD_INT 0
21602: PPUSH
// if your_side = 8 then
21603: LD_OWVAR 2
21607: PUSH
21608: LD_INT 8
21610: EQUAL
21611: IFFALSE 21623
// your_side := 0 else
21613: LD_ADDR_OWVAR 2
21617: PUSH
21618: LD_INT 0
21620: ST_TO_ADDR
21621: GO 21637
// your_side := your_side + 1 ;
21623: LD_ADDR_OWVAR 2
21627: PUSH
21628: LD_OWVAR 2
21632: PUSH
21633: LD_INT 1
21635: PLUS
21636: ST_TO_ADDR
// end ;
21637: LD_VAR 0 1
21641: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21642: LD_INT 0
21644: PPUSH
21645: PPUSH
21646: PPUSH
// for i in all_units do
21647: LD_ADDR_VAR 0 2
21651: PUSH
21652: LD_OWVAR 3
21656: PUSH
21657: FOR_IN
21658: IFFALSE 21736
// if IsSelected ( i ) then
21660: LD_VAR 0 2
21664: PPUSH
21665: CALL_OW 306
21669: IFFALSE 21734
// begin j := GetSide ( i ) ;
21671: LD_ADDR_VAR 0 3
21675: PUSH
21676: LD_VAR 0 2
21680: PPUSH
21681: CALL_OW 255
21685: ST_TO_ADDR
// if j = 8 then
21686: LD_VAR 0 3
21690: PUSH
21691: LD_INT 8
21693: EQUAL
21694: IFFALSE 21706
// j := 0 else
21696: LD_ADDR_VAR 0 3
21700: PUSH
21701: LD_INT 0
21703: ST_TO_ADDR
21704: GO 21720
// j := j + 1 ;
21706: LD_ADDR_VAR 0 3
21710: PUSH
21711: LD_VAR 0 3
21715: PUSH
21716: LD_INT 1
21718: PLUS
21719: ST_TO_ADDR
// SetSide ( i , j ) ;
21720: LD_VAR 0 2
21724: PPUSH
21725: LD_VAR 0 3
21729: PPUSH
21730: CALL_OW 235
// end ;
21734: GO 21657
21736: POP
21737: POP
// end ;
21738: LD_VAR 0 1
21742: RET
// export function hHackFog ; begin
21743: LD_INT 0
21745: PPUSH
// FogOff ( true ) ;
21746: LD_INT 1
21748: PPUSH
21749: CALL_OW 344
// end ;
21753: LD_VAR 0 1
21757: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21758: LD_INT 0
21760: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21761: LD_VAR 0 1
21765: PPUSH
21766: LD_VAR 0 2
21770: PPUSH
21771: LD_VAR 0 3
21775: PPUSH
21776: LD_INT 1
21778: PPUSH
21779: LD_INT 1
21781: PPUSH
21782: CALL_OW 483
// CenterOnXY ( x , y ) ;
21786: LD_VAR 0 2
21790: PPUSH
21791: LD_VAR 0 3
21795: PPUSH
21796: CALL_OW 84
// end ;
21800: LD_VAR 0 4
21804: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21805: LD_INT 0
21807: PPUSH
21808: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21809: LD_VAR 0 1
21813: NOT
21814: PUSH
21815: LD_VAR 0 2
21819: PPUSH
21820: LD_VAR 0 3
21824: PPUSH
21825: CALL_OW 488
21829: NOT
21830: OR
21831: PUSH
21832: LD_VAR 0 1
21836: PPUSH
21837: CALL_OW 266
21841: PUSH
21842: LD_INT 3
21844: NONEQUAL
21845: PUSH
21846: LD_VAR 0 1
21850: PPUSH
21851: CALL_OW 247
21855: PUSH
21856: LD_INT 1
21858: EQUAL
21859: NOT
21860: AND
21861: OR
21862: IFFALSE 21866
// exit ;
21864: GO 22015
// if GetType ( factory ) = unit_human then
21866: LD_VAR 0 1
21870: PPUSH
21871: CALL_OW 247
21875: PUSH
21876: LD_INT 1
21878: EQUAL
21879: IFFALSE 21896
// factory := IsInUnit ( factory ) ;
21881: LD_ADDR_VAR 0 1
21885: PUSH
21886: LD_VAR 0 1
21890: PPUSH
21891: CALL_OW 310
21895: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21896: LD_VAR 0 1
21900: PPUSH
21901: CALL_OW 266
21905: PUSH
21906: LD_INT 3
21908: NONEQUAL
21909: IFFALSE 21913
// exit ;
21911: GO 22015
// if HexInfo ( x , y ) = factory then
21913: LD_VAR 0 2
21917: PPUSH
21918: LD_VAR 0 3
21922: PPUSH
21923: CALL_OW 428
21927: PUSH
21928: LD_VAR 0 1
21932: EQUAL
21933: IFFALSE 21960
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21935: LD_ADDR_EXP 83
21939: PUSH
21940: LD_EXP 83
21944: PPUSH
21945: LD_VAR 0 1
21949: PPUSH
21950: LD_INT 0
21952: PPUSH
21953: CALL_OW 1
21957: ST_TO_ADDR
21958: GO 22011
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21960: LD_ADDR_EXP 83
21964: PUSH
21965: LD_EXP 83
21969: PPUSH
21970: LD_VAR 0 1
21974: PPUSH
21975: LD_VAR 0 1
21979: PPUSH
21980: CALL_OW 255
21984: PUSH
21985: LD_VAR 0 1
21989: PUSH
21990: LD_VAR 0 2
21994: PUSH
21995: LD_VAR 0 3
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: PPUSH
22006: CALL_OW 1
22010: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22011: CALL 22020 0 0
// end ;
22015: LD_VAR 0 4
22019: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22020: LD_INT 0
22022: PPUSH
22023: PPUSH
22024: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22025: LD_STRING resetFactoryWaypoint();
22027: PPUSH
22028: CALL_OW 559
// if factoryWaypoints then
22032: LD_EXP 83
22036: IFFALSE 22162
// begin list := PrepareArray ( factoryWaypoints ) ;
22038: LD_ADDR_VAR 0 3
22042: PUSH
22043: LD_EXP 83
22047: PPUSH
22048: CALL 68484 0 1
22052: ST_TO_ADDR
// for i := 1 to list do
22053: LD_ADDR_VAR 0 2
22057: PUSH
22058: DOUBLE
22059: LD_INT 1
22061: DEC
22062: ST_TO_ADDR
22063: LD_VAR 0 3
22067: PUSH
22068: FOR_TO
22069: IFFALSE 22160
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22071: LD_STRING setFactoryWaypointXY(
22073: PUSH
22074: LD_VAR 0 3
22078: PUSH
22079: LD_VAR 0 2
22083: ARRAY
22084: PUSH
22085: LD_INT 1
22087: ARRAY
22088: STR
22089: PUSH
22090: LD_STRING ,
22092: STR
22093: PUSH
22094: LD_VAR 0 3
22098: PUSH
22099: LD_VAR 0 2
22103: ARRAY
22104: PUSH
22105: LD_INT 2
22107: ARRAY
22108: STR
22109: PUSH
22110: LD_STRING ,
22112: STR
22113: PUSH
22114: LD_VAR 0 3
22118: PUSH
22119: LD_VAR 0 2
22123: ARRAY
22124: PUSH
22125: LD_INT 3
22127: ARRAY
22128: STR
22129: PUSH
22130: LD_STRING ,
22132: STR
22133: PUSH
22134: LD_VAR 0 3
22138: PUSH
22139: LD_VAR 0 2
22143: ARRAY
22144: PUSH
22145: LD_INT 4
22147: ARRAY
22148: STR
22149: PUSH
22150: LD_STRING )
22152: STR
22153: PPUSH
22154: CALL_OW 559
22158: GO 22068
22160: POP
22161: POP
// end ; end ;
22162: LD_VAR 0 1
22166: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22167: LD_INT 0
22169: PPUSH
// if HexInfo ( x , y ) = warehouse then
22170: LD_VAR 0 2
22174: PPUSH
22175: LD_VAR 0 3
22179: PPUSH
22180: CALL_OW 428
22184: PUSH
22185: LD_VAR 0 1
22189: EQUAL
22190: IFFALSE 22217
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22192: LD_ADDR_EXP 84
22196: PUSH
22197: LD_EXP 84
22201: PPUSH
22202: LD_VAR 0 1
22206: PPUSH
22207: LD_INT 0
22209: PPUSH
22210: CALL_OW 1
22214: ST_TO_ADDR
22215: GO 22268
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22217: LD_ADDR_EXP 84
22221: PUSH
22222: LD_EXP 84
22226: PPUSH
22227: LD_VAR 0 1
22231: PPUSH
22232: LD_VAR 0 1
22236: PPUSH
22237: CALL_OW 255
22241: PUSH
22242: LD_VAR 0 1
22246: PUSH
22247: LD_VAR 0 2
22251: PUSH
22252: LD_VAR 0 3
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: PPUSH
22263: CALL_OW 1
22267: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22268: CALL 22277 0 0
// end ;
22272: LD_VAR 0 4
22276: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22277: LD_INT 0
22279: PPUSH
22280: PPUSH
22281: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22282: LD_STRING resetWarehouseGatheringPoints();
22284: PPUSH
22285: CALL_OW 559
// if warehouseGatheringPoints then
22289: LD_EXP 84
22293: IFFALSE 22419
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22295: LD_ADDR_VAR 0 3
22299: PUSH
22300: LD_EXP 84
22304: PPUSH
22305: CALL 68484 0 1
22309: ST_TO_ADDR
// for i := 1 to list do
22310: LD_ADDR_VAR 0 2
22314: PUSH
22315: DOUBLE
22316: LD_INT 1
22318: DEC
22319: ST_TO_ADDR
22320: LD_VAR 0 3
22324: PUSH
22325: FOR_TO
22326: IFFALSE 22417
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22328: LD_STRING setWarehouseGatheringPointXY(
22330: PUSH
22331: LD_VAR 0 3
22335: PUSH
22336: LD_VAR 0 2
22340: ARRAY
22341: PUSH
22342: LD_INT 1
22344: ARRAY
22345: STR
22346: PUSH
22347: LD_STRING ,
22349: STR
22350: PUSH
22351: LD_VAR 0 3
22355: PUSH
22356: LD_VAR 0 2
22360: ARRAY
22361: PUSH
22362: LD_INT 2
22364: ARRAY
22365: STR
22366: PUSH
22367: LD_STRING ,
22369: STR
22370: PUSH
22371: LD_VAR 0 3
22375: PUSH
22376: LD_VAR 0 2
22380: ARRAY
22381: PUSH
22382: LD_INT 3
22384: ARRAY
22385: STR
22386: PUSH
22387: LD_STRING ,
22389: STR
22390: PUSH
22391: LD_VAR 0 3
22395: PUSH
22396: LD_VAR 0 2
22400: ARRAY
22401: PUSH
22402: LD_INT 4
22404: ARRAY
22405: STR
22406: PUSH
22407: LD_STRING )
22409: STR
22410: PPUSH
22411: CALL_OW 559
22415: GO 22325
22417: POP
22418: POP
// end ; end ;
22419: LD_VAR 0 1
22423: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22424: LD_EXP 84
22428: IFFALSE 23113
22430: GO 22432
22432: DISABLE
22433: LD_INT 0
22435: PPUSH
22436: PPUSH
22437: PPUSH
22438: PPUSH
22439: PPUSH
22440: PPUSH
22441: PPUSH
22442: PPUSH
22443: PPUSH
// begin enable ;
22444: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22445: LD_ADDR_VAR 0 3
22449: PUSH
22450: LD_EXP 84
22454: PPUSH
22455: CALL 68484 0 1
22459: ST_TO_ADDR
// if not list then
22460: LD_VAR 0 3
22464: NOT
22465: IFFALSE 22469
// exit ;
22467: GO 23113
// for i := 1 to list do
22469: LD_ADDR_VAR 0 1
22473: PUSH
22474: DOUBLE
22475: LD_INT 1
22477: DEC
22478: ST_TO_ADDR
22479: LD_VAR 0 3
22483: PUSH
22484: FOR_TO
22485: IFFALSE 23111
// begin depot := list [ i ] [ 2 ] ;
22487: LD_ADDR_VAR 0 8
22491: PUSH
22492: LD_VAR 0 3
22496: PUSH
22497: LD_VAR 0 1
22501: ARRAY
22502: PUSH
22503: LD_INT 2
22505: ARRAY
22506: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22507: LD_ADDR_VAR 0 5
22511: PUSH
22512: LD_VAR 0 3
22516: PUSH
22517: LD_VAR 0 1
22521: ARRAY
22522: PUSH
22523: LD_INT 1
22525: ARRAY
22526: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22527: LD_VAR 0 8
22531: PPUSH
22532: CALL_OW 301
22536: PUSH
22537: LD_VAR 0 5
22541: PUSH
22542: LD_VAR 0 8
22546: PPUSH
22547: CALL_OW 255
22551: NONEQUAL
22552: OR
22553: IFFALSE 22582
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22555: LD_ADDR_EXP 84
22559: PUSH
22560: LD_EXP 84
22564: PPUSH
22565: LD_VAR 0 8
22569: PPUSH
22570: LD_INT 0
22572: PPUSH
22573: CALL_OW 1
22577: ST_TO_ADDR
// exit ;
22578: POP
22579: POP
22580: GO 23113
// end ; x := list [ i ] [ 3 ] ;
22582: LD_ADDR_VAR 0 6
22586: PUSH
22587: LD_VAR 0 3
22591: PUSH
22592: LD_VAR 0 1
22596: ARRAY
22597: PUSH
22598: LD_INT 3
22600: ARRAY
22601: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22602: LD_ADDR_VAR 0 7
22606: PUSH
22607: LD_VAR 0 3
22611: PUSH
22612: LD_VAR 0 1
22616: ARRAY
22617: PUSH
22618: LD_INT 4
22620: ARRAY
22621: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22622: LD_ADDR_VAR 0 9
22626: PUSH
22627: LD_VAR 0 6
22631: PPUSH
22632: LD_VAR 0 7
22636: PPUSH
22637: LD_INT 16
22639: PPUSH
22640: CALL 67072 0 3
22644: ST_TO_ADDR
// if not cratesNearbyPoint then
22645: LD_VAR 0 9
22649: NOT
22650: IFFALSE 22656
// exit ;
22652: POP
22653: POP
22654: GO 23113
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22656: LD_ADDR_VAR 0 4
22660: PUSH
22661: LD_INT 22
22663: PUSH
22664: LD_VAR 0 5
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 3
22675: PUSH
22676: LD_INT 60
22678: PUSH
22679: EMPTY
22680: LIST
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 91
22688: PUSH
22689: LD_VAR 0 8
22693: PUSH
22694: LD_INT 6
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 2
22704: PUSH
22705: LD_INT 25
22707: PUSH
22708: LD_INT 2
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 25
22717: PUSH
22718: LD_INT 16
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: LIST
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: PPUSH
22736: CALL_OW 69
22740: PUSH
22741: LD_VAR 0 8
22745: PPUSH
22746: CALL_OW 313
22750: PPUSH
22751: LD_INT 3
22753: PUSH
22754: LD_INT 60
22756: PUSH
22757: EMPTY
22758: LIST
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 2
22766: PUSH
22767: LD_INT 25
22769: PUSH
22770: LD_INT 2
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 25
22779: PUSH
22780: LD_INT 16
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: LIST
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PPUSH
22796: CALL_OW 72
22800: UNION
22801: ST_TO_ADDR
// if tmp then
22802: LD_VAR 0 4
22806: IFFALSE 22886
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22808: LD_ADDR_VAR 0 4
22812: PUSH
22813: LD_VAR 0 4
22817: PPUSH
22818: LD_INT 3
22820: PPUSH
22821: CALL 65041 0 2
22825: ST_TO_ADDR
// for j in tmp do
22826: LD_ADDR_VAR 0 2
22830: PUSH
22831: LD_VAR 0 4
22835: PUSH
22836: FOR_IN
22837: IFFALSE 22880
// begin if IsInUnit ( j ) then
22839: LD_VAR 0 2
22843: PPUSH
22844: CALL_OW 310
22848: IFFALSE 22859
// ComExit ( j ) ;
22850: LD_VAR 0 2
22854: PPUSH
22855: CALL 65124 0 1
// AddComCollect ( j , x , y ) ;
22859: LD_VAR 0 2
22863: PPUSH
22864: LD_VAR 0 6
22868: PPUSH
22869: LD_VAR 0 7
22873: PPUSH
22874: CALL_OW 177
// end ;
22878: GO 22836
22880: POP
22881: POP
// exit ;
22882: POP
22883: POP
22884: GO 23113
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22886: LD_ADDR_VAR 0 4
22890: PUSH
22891: LD_INT 22
22893: PUSH
22894: LD_VAR 0 5
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 91
22905: PUSH
22906: LD_VAR 0 8
22910: PUSH
22911: LD_INT 8
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 2
22921: PUSH
22922: LD_INT 34
22924: PUSH
22925: LD_INT 12
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 34
22934: PUSH
22935: LD_INT 51
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 34
22944: PUSH
22945: LD_INT 32
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 34
22954: PUSH
22955: LD_INT 89
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: LIST
22973: PPUSH
22974: CALL_OW 69
22978: ST_TO_ADDR
// if tmp then
22979: LD_VAR 0 4
22983: IFFALSE 23109
// begin for j in tmp do
22985: LD_ADDR_VAR 0 2
22989: PUSH
22990: LD_VAR 0 4
22994: PUSH
22995: FOR_IN
22996: IFFALSE 23107
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22998: LD_VAR 0 2
23002: PPUSH
23003: CALL_OW 262
23007: PUSH
23008: LD_INT 3
23010: EQUAL
23011: PUSH
23012: LD_VAR 0 2
23016: PPUSH
23017: CALL_OW 261
23021: PUSH
23022: LD_INT 20
23024: GREATER
23025: OR
23026: PUSH
23027: LD_VAR 0 2
23031: PPUSH
23032: CALL_OW 314
23036: NOT
23037: AND
23038: PUSH
23039: LD_VAR 0 2
23043: PPUSH
23044: CALL_OW 263
23048: PUSH
23049: LD_INT 1
23051: NONEQUAL
23052: PUSH
23053: LD_VAR 0 2
23057: PPUSH
23058: CALL_OW 311
23062: OR
23063: AND
23064: IFFALSE 23105
// begin ComCollect ( j , x , y ) ;
23066: LD_VAR 0 2
23070: PPUSH
23071: LD_VAR 0 6
23075: PPUSH
23076: LD_VAR 0 7
23080: PPUSH
23081: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23085: LD_VAR 0 2
23089: PPUSH
23090: LD_VAR 0 8
23094: PPUSH
23095: CALL_OW 172
// exit ;
23099: POP
23100: POP
23101: POP
23102: POP
23103: GO 23113
// end ;
23105: GO 22995
23107: POP
23108: POP
// end ; end ;
23109: GO 22484
23111: POP
23112: POP
// end ; end_of_file
23113: PPOPN 9
23115: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23116: LD_INT 0
23118: PPUSH
23119: PPUSH
23120: PPUSH
23121: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23122: LD_VAR 0 1
23126: PPUSH
23127: CALL_OW 264
23131: PUSH
23132: LD_INT 91
23134: EQUAL
23135: IFFALSE 23207
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23137: LD_INT 68
23139: PPUSH
23140: LD_VAR 0 1
23144: PPUSH
23145: CALL_OW 255
23149: PPUSH
23150: CALL_OW 321
23154: PUSH
23155: LD_INT 2
23157: EQUAL
23158: IFFALSE 23170
// eff := 70 else
23160: LD_ADDR_VAR 0 4
23164: PUSH
23165: LD_INT 70
23167: ST_TO_ADDR
23168: GO 23178
// eff := 30 ;
23170: LD_ADDR_VAR 0 4
23174: PUSH
23175: LD_INT 30
23177: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23178: LD_VAR 0 1
23182: PPUSH
23183: CALL_OW 250
23187: PPUSH
23188: LD_VAR 0 1
23192: PPUSH
23193: CALL_OW 251
23197: PPUSH
23198: LD_VAR 0 4
23202: PPUSH
23203: CALL_OW 495
// end ; end ;
23207: LD_VAR 0 2
23211: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23212: LD_INT 0
23214: PPUSH
// end ;
23215: LD_VAR 0 4
23219: RET
// export function SOS_Command ( cmd ) ; begin
23220: LD_INT 0
23222: PPUSH
// end ;
23223: LD_VAR 0 2
23227: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23228: LD_INT 0
23230: PPUSH
// end ;
23231: LD_VAR 0 6
23235: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
23236: LD_INT 0
23238: PPUSH
23239: PPUSH
// if not vehicle or not factory then
23240: LD_VAR 0 1
23244: NOT
23245: PUSH
23246: LD_VAR 0 2
23250: NOT
23251: OR
23252: IFFALSE 23256
// exit ;
23254: GO 23487
// if factoryWaypoints >= factory then
23256: LD_EXP 83
23260: PUSH
23261: LD_VAR 0 2
23265: GREATEREQUAL
23266: IFFALSE 23487
// if factoryWaypoints [ factory ] then
23268: LD_EXP 83
23272: PUSH
23273: LD_VAR 0 2
23277: ARRAY
23278: IFFALSE 23487
// begin if GetControl ( vehicle ) = control_manual then
23280: LD_VAR 0 1
23284: PPUSH
23285: CALL_OW 263
23289: PUSH
23290: LD_INT 1
23292: EQUAL
23293: IFFALSE 23374
// begin driver := IsDrivenBy ( vehicle ) ;
23295: LD_ADDR_VAR 0 4
23299: PUSH
23300: LD_VAR 0 1
23304: PPUSH
23305: CALL_OW 311
23309: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23310: LD_VAR 0 4
23314: PPUSH
23315: LD_EXP 83
23319: PUSH
23320: LD_VAR 0 2
23324: ARRAY
23325: PUSH
23326: LD_INT 3
23328: ARRAY
23329: PPUSH
23330: LD_EXP 83
23334: PUSH
23335: LD_VAR 0 2
23339: ARRAY
23340: PUSH
23341: LD_INT 4
23343: ARRAY
23344: PPUSH
23345: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23349: LD_VAR 0 4
23353: PPUSH
23354: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23358: LD_VAR 0 4
23362: PPUSH
23363: LD_VAR 0 2
23367: PPUSH
23368: CALL_OW 180
// end else
23372: GO 23487
// if GetControl ( vehicle ) = control_remote then
23374: LD_VAR 0 1
23378: PPUSH
23379: CALL_OW 263
23383: PUSH
23384: LD_INT 2
23386: EQUAL
23387: IFFALSE 23448
// begin wait ( 0 0$2 ) ;
23389: LD_INT 70
23391: PPUSH
23392: CALL_OW 67
// if Connect ( vehicle ) then
23396: LD_VAR 0 1
23400: PPUSH
23401: CALL 35345 0 1
23405: IFFALSE 23446
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23407: LD_VAR 0 1
23411: PPUSH
23412: LD_EXP 83
23416: PUSH
23417: LD_VAR 0 2
23421: ARRAY
23422: PUSH
23423: LD_INT 3
23425: ARRAY
23426: PPUSH
23427: LD_EXP 83
23431: PUSH
23432: LD_VAR 0 2
23436: ARRAY
23437: PUSH
23438: LD_INT 4
23440: ARRAY
23441: PPUSH
23442: CALL_OW 171
// end else
23446: GO 23487
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23448: LD_VAR 0 1
23452: PPUSH
23453: LD_EXP 83
23457: PUSH
23458: LD_VAR 0 2
23462: ARRAY
23463: PUSH
23464: LD_INT 3
23466: ARRAY
23467: PPUSH
23468: LD_EXP 83
23472: PUSH
23473: LD_VAR 0 2
23477: ARRAY
23478: PUSH
23479: LD_INT 4
23481: ARRAY
23482: PPUSH
23483: CALL_OW 171
// end ; end ;
23487: LD_VAR 0 3
23491: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23492: LD_INT 0
23494: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23495: LD_VAR 0 1
23499: PUSH
23500: LD_INT 250
23502: EQUAL
23503: PUSH
23504: LD_VAR 0 2
23508: PPUSH
23509: CALL_OW 264
23513: PUSH
23514: LD_INT 81
23516: EQUAL
23517: AND
23518: IFFALSE 23539
// MinerPlaceMine ( unit , x , y ) ;
23520: LD_VAR 0 2
23524: PPUSH
23525: LD_VAR 0 4
23529: PPUSH
23530: LD_VAR 0 5
23534: PPUSH
23535: CALL 25924 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23539: LD_VAR 0 1
23543: PUSH
23544: LD_INT 251
23546: EQUAL
23547: PUSH
23548: LD_VAR 0 2
23552: PPUSH
23553: CALL_OW 264
23557: PUSH
23558: LD_INT 81
23560: EQUAL
23561: AND
23562: IFFALSE 23583
// MinerDetonateMine ( unit , x , y ) ;
23564: LD_VAR 0 2
23568: PPUSH
23569: LD_VAR 0 4
23573: PPUSH
23574: LD_VAR 0 5
23578: PPUSH
23579: CALL 26199 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23583: LD_VAR 0 1
23587: PUSH
23588: LD_INT 252
23590: EQUAL
23591: PUSH
23592: LD_VAR 0 2
23596: PPUSH
23597: CALL_OW 264
23601: PUSH
23602: LD_INT 81
23604: EQUAL
23605: AND
23606: IFFALSE 23627
// MinerCreateMinefield ( unit , x , y ) ;
23608: LD_VAR 0 2
23612: PPUSH
23613: LD_VAR 0 4
23617: PPUSH
23618: LD_VAR 0 5
23622: PPUSH
23623: CALL 26616 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23627: LD_VAR 0 1
23631: PUSH
23632: LD_INT 253
23634: EQUAL
23635: PUSH
23636: LD_VAR 0 2
23640: PPUSH
23641: CALL_OW 257
23645: PUSH
23646: LD_INT 5
23648: EQUAL
23649: AND
23650: IFFALSE 23671
// ComBinocular ( unit , x , y ) ;
23652: LD_VAR 0 2
23656: PPUSH
23657: LD_VAR 0 4
23661: PPUSH
23662: LD_VAR 0 5
23666: PPUSH
23667: CALL 26985 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23671: LD_VAR 0 1
23675: PUSH
23676: LD_INT 254
23678: EQUAL
23679: PUSH
23680: LD_VAR 0 2
23684: PPUSH
23685: CALL_OW 264
23689: PUSH
23690: LD_INT 99
23692: EQUAL
23693: AND
23694: PUSH
23695: LD_VAR 0 3
23699: PPUSH
23700: CALL_OW 263
23704: PUSH
23705: LD_INT 3
23707: EQUAL
23708: AND
23709: IFFALSE 23725
// HackDestroyVehicle ( unit , selectedUnit ) ;
23711: LD_VAR 0 2
23715: PPUSH
23716: LD_VAR 0 3
23720: PPUSH
23721: CALL 25288 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23725: LD_VAR 0 1
23729: PUSH
23730: LD_INT 255
23732: EQUAL
23733: PUSH
23734: LD_VAR 0 2
23738: PPUSH
23739: CALL_OW 264
23743: PUSH
23744: LD_INT 14
23746: PUSH
23747: LD_INT 53
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: IN
23754: AND
23755: PUSH
23756: LD_VAR 0 4
23760: PPUSH
23761: LD_VAR 0 5
23765: PPUSH
23766: CALL_OW 488
23770: AND
23771: IFFALSE 23795
// CutTreeXYR ( unit , x , y , 12 ) ;
23773: LD_VAR 0 2
23777: PPUSH
23778: LD_VAR 0 4
23782: PPUSH
23783: LD_VAR 0 5
23787: PPUSH
23788: LD_INT 12
23790: PPUSH
23791: CALL 23858 0 4
// if cmd = 256 then
23795: LD_VAR 0 1
23799: PUSH
23800: LD_INT 256
23802: EQUAL
23803: IFFALSE 23824
// SetFactoryWaypoint ( unit , x , y ) ;
23805: LD_VAR 0 2
23809: PPUSH
23810: LD_VAR 0 4
23814: PPUSH
23815: LD_VAR 0 5
23819: PPUSH
23820: CALL 21805 0 3
// if cmd = 257 then
23824: LD_VAR 0 1
23828: PUSH
23829: LD_INT 257
23831: EQUAL
23832: IFFALSE 23853
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23834: LD_VAR 0 2
23838: PPUSH
23839: LD_VAR 0 4
23843: PPUSH
23844: LD_VAR 0 5
23848: PPUSH
23849: CALL 22167 0 3
// end ;
23853: LD_VAR 0 6
23857: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23858: LD_INT 0
23860: PPUSH
23861: PPUSH
23862: PPUSH
23863: PPUSH
23864: PPUSH
23865: PPUSH
23866: PPUSH
23867: PPUSH
23868: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23869: LD_VAR 0 1
23873: NOT
23874: PUSH
23875: LD_VAR 0 2
23879: PPUSH
23880: LD_VAR 0 3
23884: PPUSH
23885: CALL_OW 488
23889: NOT
23890: OR
23891: PUSH
23892: LD_VAR 0 4
23896: NOT
23897: OR
23898: IFFALSE 23902
// exit ;
23900: GO 24242
// list := [ ] ;
23902: LD_ADDR_VAR 0 13
23906: PUSH
23907: EMPTY
23908: ST_TO_ADDR
// if x - r < 0 then
23909: LD_VAR 0 2
23913: PUSH
23914: LD_VAR 0 4
23918: MINUS
23919: PUSH
23920: LD_INT 0
23922: LESS
23923: IFFALSE 23935
// min_x := 0 else
23925: LD_ADDR_VAR 0 7
23929: PUSH
23930: LD_INT 0
23932: ST_TO_ADDR
23933: GO 23951
// min_x := x - r ;
23935: LD_ADDR_VAR 0 7
23939: PUSH
23940: LD_VAR 0 2
23944: PUSH
23945: LD_VAR 0 4
23949: MINUS
23950: ST_TO_ADDR
// if y - r < 0 then
23951: LD_VAR 0 3
23955: PUSH
23956: LD_VAR 0 4
23960: MINUS
23961: PUSH
23962: LD_INT 0
23964: LESS
23965: IFFALSE 23977
// min_y := 0 else
23967: LD_ADDR_VAR 0 8
23971: PUSH
23972: LD_INT 0
23974: ST_TO_ADDR
23975: GO 23993
// min_y := y - r ;
23977: LD_ADDR_VAR 0 8
23981: PUSH
23982: LD_VAR 0 3
23986: PUSH
23987: LD_VAR 0 4
23991: MINUS
23992: ST_TO_ADDR
// max_x := x + r ;
23993: LD_ADDR_VAR 0 9
23997: PUSH
23998: LD_VAR 0 2
24002: PUSH
24003: LD_VAR 0 4
24007: PLUS
24008: ST_TO_ADDR
// max_y := y + r ;
24009: LD_ADDR_VAR 0 10
24013: PUSH
24014: LD_VAR 0 3
24018: PUSH
24019: LD_VAR 0 4
24023: PLUS
24024: ST_TO_ADDR
// for _x = min_x to max_x do
24025: LD_ADDR_VAR 0 11
24029: PUSH
24030: DOUBLE
24031: LD_VAR 0 7
24035: DEC
24036: ST_TO_ADDR
24037: LD_VAR 0 9
24041: PUSH
24042: FOR_TO
24043: IFFALSE 24160
// for _y = min_y to max_y do
24045: LD_ADDR_VAR 0 12
24049: PUSH
24050: DOUBLE
24051: LD_VAR 0 8
24055: DEC
24056: ST_TO_ADDR
24057: LD_VAR 0 10
24061: PUSH
24062: FOR_TO
24063: IFFALSE 24156
// begin if not ValidHex ( _x , _y ) then
24065: LD_VAR 0 11
24069: PPUSH
24070: LD_VAR 0 12
24074: PPUSH
24075: CALL_OW 488
24079: NOT
24080: IFFALSE 24084
// continue ;
24082: GO 24062
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24084: LD_VAR 0 11
24088: PPUSH
24089: LD_VAR 0 12
24093: PPUSH
24094: CALL_OW 351
24098: PUSH
24099: LD_VAR 0 11
24103: PPUSH
24104: LD_VAR 0 12
24108: PPUSH
24109: CALL_OW 554
24113: AND
24114: IFFALSE 24154
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24116: LD_ADDR_VAR 0 13
24120: PUSH
24121: LD_VAR 0 13
24125: PPUSH
24126: LD_VAR 0 13
24130: PUSH
24131: LD_INT 1
24133: PLUS
24134: PPUSH
24135: LD_VAR 0 11
24139: PUSH
24140: LD_VAR 0 12
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PPUSH
24149: CALL_OW 2
24153: ST_TO_ADDR
// end ;
24154: GO 24062
24156: POP
24157: POP
24158: GO 24042
24160: POP
24161: POP
// if not list then
24162: LD_VAR 0 13
24166: NOT
24167: IFFALSE 24171
// exit ;
24169: GO 24242
// for i in list do
24171: LD_ADDR_VAR 0 6
24175: PUSH
24176: LD_VAR 0 13
24180: PUSH
24181: FOR_IN
24182: IFFALSE 24240
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24184: LD_VAR 0 1
24188: PPUSH
24189: LD_STRING M
24191: PUSH
24192: LD_VAR 0 6
24196: PUSH
24197: LD_INT 1
24199: ARRAY
24200: PUSH
24201: LD_VAR 0 6
24205: PUSH
24206: LD_INT 2
24208: ARRAY
24209: PUSH
24210: LD_INT 0
24212: PUSH
24213: LD_INT 0
24215: PUSH
24216: LD_INT 0
24218: PUSH
24219: LD_INT 0
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: PUSH
24231: EMPTY
24232: LIST
24233: PPUSH
24234: CALL_OW 447
24238: GO 24181
24240: POP
24241: POP
// end ;
24242: LD_VAR 0 5
24246: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24247: LD_EXP 86
24251: NOT
24252: IFFALSE 24302
24254: GO 24256
24256: DISABLE
// begin initHack := true ;
24257: LD_ADDR_EXP 86
24261: PUSH
24262: LD_INT 1
24264: ST_TO_ADDR
// hackTanks := [ ] ;
24265: LD_ADDR_EXP 87
24269: PUSH
24270: EMPTY
24271: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24272: LD_ADDR_EXP 88
24276: PUSH
24277: EMPTY
24278: ST_TO_ADDR
// hackLimit := 3 ;
24279: LD_ADDR_EXP 89
24283: PUSH
24284: LD_INT 3
24286: ST_TO_ADDR
// hackDist := 12 ;
24287: LD_ADDR_EXP 90
24291: PUSH
24292: LD_INT 12
24294: ST_TO_ADDR
// hackCounter := [ ] ;
24295: LD_ADDR_EXP 91
24299: PUSH
24300: EMPTY
24301: ST_TO_ADDR
// end ;
24302: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24303: LD_EXP 86
24307: PUSH
24308: LD_INT 34
24310: PUSH
24311: LD_INT 99
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PPUSH
24318: CALL_OW 69
24322: AND
24323: IFFALSE 24576
24325: GO 24327
24327: DISABLE
24328: LD_INT 0
24330: PPUSH
24331: PPUSH
// begin enable ;
24332: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24333: LD_ADDR_VAR 0 1
24337: PUSH
24338: LD_INT 34
24340: PUSH
24341: LD_INT 99
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PPUSH
24348: CALL_OW 69
24352: PUSH
24353: FOR_IN
24354: IFFALSE 24574
// begin if not i in hackTanks then
24356: LD_VAR 0 1
24360: PUSH
24361: LD_EXP 87
24365: IN
24366: NOT
24367: IFFALSE 24450
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24369: LD_ADDR_EXP 87
24373: PUSH
24374: LD_EXP 87
24378: PPUSH
24379: LD_EXP 87
24383: PUSH
24384: LD_INT 1
24386: PLUS
24387: PPUSH
24388: LD_VAR 0 1
24392: PPUSH
24393: CALL_OW 1
24397: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24398: LD_ADDR_EXP 88
24402: PUSH
24403: LD_EXP 88
24407: PPUSH
24408: LD_EXP 88
24412: PUSH
24413: LD_INT 1
24415: PLUS
24416: PPUSH
24417: EMPTY
24418: PPUSH
24419: CALL_OW 1
24423: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24424: LD_ADDR_EXP 91
24428: PUSH
24429: LD_EXP 91
24433: PPUSH
24434: LD_EXP 91
24438: PUSH
24439: LD_INT 1
24441: PLUS
24442: PPUSH
24443: EMPTY
24444: PPUSH
24445: CALL_OW 1
24449: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24450: LD_VAR 0 1
24454: PPUSH
24455: CALL_OW 302
24459: NOT
24460: IFFALSE 24473
// begin HackUnlinkAll ( i ) ;
24462: LD_VAR 0 1
24466: PPUSH
24467: CALL 24579 0 1
// continue ;
24471: GO 24353
// end ; HackCheckCapturedStatus ( i ) ;
24473: LD_VAR 0 1
24477: PPUSH
24478: CALL 25022 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24482: LD_ADDR_VAR 0 2
24486: PUSH
24487: LD_INT 81
24489: PUSH
24490: LD_VAR 0 1
24494: PPUSH
24495: CALL_OW 255
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 33
24506: PUSH
24507: LD_INT 3
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 91
24516: PUSH
24517: LD_VAR 0 1
24521: PUSH
24522: LD_EXP 90
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 50
24534: PUSH
24535: EMPTY
24536: LIST
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: PPUSH
24544: CALL_OW 69
24548: ST_TO_ADDR
// if not tmp then
24549: LD_VAR 0 2
24553: NOT
24554: IFFALSE 24558
// continue ;
24556: GO 24353
// HackLink ( i , tmp ) ;
24558: LD_VAR 0 1
24562: PPUSH
24563: LD_VAR 0 2
24567: PPUSH
24568: CALL 24715 0 2
// end ;
24572: GO 24353
24574: POP
24575: POP
// end ;
24576: PPOPN 2
24578: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24579: LD_INT 0
24581: PPUSH
24582: PPUSH
24583: PPUSH
// if not hack in hackTanks then
24584: LD_VAR 0 1
24588: PUSH
24589: LD_EXP 87
24593: IN
24594: NOT
24595: IFFALSE 24599
// exit ;
24597: GO 24710
// index := GetElementIndex ( hackTanks , hack ) ;
24599: LD_ADDR_VAR 0 4
24603: PUSH
24604: LD_EXP 87
24608: PPUSH
24609: LD_VAR 0 1
24613: PPUSH
24614: CALL 32152 0 2
24618: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24619: LD_EXP 88
24623: PUSH
24624: LD_VAR 0 4
24628: ARRAY
24629: IFFALSE 24710
// begin for i in hackTanksCaptured [ index ] do
24631: LD_ADDR_VAR 0 3
24635: PUSH
24636: LD_EXP 88
24640: PUSH
24641: LD_VAR 0 4
24645: ARRAY
24646: PUSH
24647: FOR_IN
24648: IFFALSE 24674
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24650: LD_VAR 0 3
24654: PUSH
24655: LD_INT 1
24657: ARRAY
24658: PPUSH
24659: LD_VAR 0 3
24663: PUSH
24664: LD_INT 2
24666: ARRAY
24667: PPUSH
24668: CALL_OW 235
24672: GO 24647
24674: POP
24675: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24676: LD_ADDR_EXP 88
24680: PUSH
24681: LD_EXP 88
24685: PPUSH
24686: LD_VAR 0 4
24690: PPUSH
24691: EMPTY
24692: PPUSH
24693: CALL_OW 1
24697: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24698: LD_VAR 0 1
24702: PPUSH
24703: LD_INT 0
24705: PPUSH
24706: CALL_OW 505
// end ; end ;
24710: LD_VAR 0 2
24714: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24715: LD_INT 0
24717: PPUSH
24718: PPUSH
24719: PPUSH
// if not hack in hackTanks or not vehicles then
24720: LD_VAR 0 1
24724: PUSH
24725: LD_EXP 87
24729: IN
24730: NOT
24731: PUSH
24732: LD_VAR 0 2
24736: NOT
24737: OR
24738: IFFALSE 24742
// exit ;
24740: GO 25017
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24742: LD_ADDR_VAR 0 2
24746: PUSH
24747: LD_VAR 0 1
24751: PPUSH
24752: LD_VAR 0 2
24756: PPUSH
24757: LD_INT 1
24759: PPUSH
24760: LD_INT 1
24762: PPUSH
24763: CALL 32802 0 4
24767: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24768: LD_ADDR_VAR 0 5
24772: PUSH
24773: LD_EXP 87
24777: PPUSH
24778: LD_VAR 0 1
24782: PPUSH
24783: CALL 32152 0 2
24787: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24788: LD_EXP 88
24792: PUSH
24793: LD_VAR 0 5
24797: ARRAY
24798: PUSH
24799: LD_EXP 89
24803: LESS
24804: IFFALSE 24993
// begin for i := 1 to vehicles do
24806: LD_ADDR_VAR 0 4
24810: PUSH
24811: DOUBLE
24812: LD_INT 1
24814: DEC
24815: ST_TO_ADDR
24816: LD_VAR 0 2
24820: PUSH
24821: FOR_TO
24822: IFFALSE 24991
// begin if hackTanksCaptured [ index ] = hackLimit then
24824: LD_EXP 88
24828: PUSH
24829: LD_VAR 0 5
24833: ARRAY
24834: PUSH
24835: LD_EXP 89
24839: EQUAL
24840: IFFALSE 24844
// break ;
24842: GO 24991
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24844: LD_ADDR_EXP 91
24848: PUSH
24849: LD_EXP 91
24853: PPUSH
24854: LD_VAR 0 5
24858: PPUSH
24859: LD_EXP 91
24863: PUSH
24864: LD_VAR 0 5
24868: ARRAY
24869: PUSH
24870: LD_INT 1
24872: PLUS
24873: PPUSH
24874: CALL_OW 1
24878: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24879: LD_ADDR_EXP 88
24883: PUSH
24884: LD_EXP 88
24888: PPUSH
24889: LD_VAR 0 5
24893: PUSH
24894: LD_EXP 88
24898: PUSH
24899: LD_VAR 0 5
24903: ARRAY
24904: PUSH
24905: LD_INT 1
24907: PLUS
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PPUSH
24913: LD_VAR 0 2
24917: PUSH
24918: LD_VAR 0 4
24922: ARRAY
24923: PUSH
24924: LD_VAR 0 2
24928: PUSH
24929: LD_VAR 0 4
24933: ARRAY
24934: PPUSH
24935: CALL_OW 255
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PPUSH
24944: CALL 32367 0 3
24948: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24949: LD_VAR 0 2
24953: PUSH
24954: LD_VAR 0 4
24958: ARRAY
24959: PPUSH
24960: LD_VAR 0 1
24964: PPUSH
24965: CALL_OW 255
24969: PPUSH
24970: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24974: LD_VAR 0 2
24978: PUSH
24979: LD_VAR 0 4
24983: ARRAY
24984: PPUSH
24985: CALL_OW 141
// end ;
24989: GO 24821
24991: POP
24992: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24993: LD_VAR 0 1
24997: PPUSH
24998: LD_EXP 88
25002: PUSH
25003: LD_VAR 0 5
25007: ARRAY
25008: PUSH
25009: LD_INT 0
25011: PLUS
25012: PPUSH
25013: CALL_OW 505
// end ;
25017: LD_VAR 0 3
25021: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25022: LD_INT 0
25024: PPUSH
25025: PPUSH
25026: PPUSH
25027: PPUSH
// if not hack in hackTanks then
25028: LD_VAR 0 1
25032: PUSH
25033: LD_EXP 87
25037: IN
25038: NOT
25039: IFFALSE 25043
// exit ;
25041: GO 25283
// index := GetElementIndex ( hackTanks , hack ) ;
25043: LD_ADDR_VAR 0 4
25047: PUSH
25048: LD_EXP 87
25052: PPUSH
25053: LD_VAR 0 1
25057: PPUSH
25058: CALL 32152 0 2
25062: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25063: LD_ADDR_VAR 0 3
25067: PUSH
25068: DOUBLE
25069: LD_EXP 88
25073: PUSH
25074: LD_VAR 0 4
25078: ARRAY
25079: INC
25080: ST_TO_ADDR
25081: LD_INT 1
25083: PUSH
25084: FOR_DOWNTO
25085: IFFALSE 25257
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25087: LD_ADDR_VAR 0 5
25091: PUSH
25092: LD_EXP 88
25096: PUSH
25097: LD_VAR 0 4
25101: ARRAY
25102: PUSH
25103: LD_VAR 0 3
25107: ARRAY
25108: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25109: LD_VAR 0 5
25113: PUSH
25114: LD_INT 1
25116: ARRAY
25117: PPUSH
25118: CALL_OW 302
25122: NOT
25123: PUSH
25124: LD_VAR 0 5
25128: PUSH
25129: LD_INT 1
25131: ARRAY
25132: PPUSH
25133: CALL_OW 255
25137: PUSH
25138: LD_VAR 0 1
25142: PPUSH
25143: CALL_OW 255
25147: NONEQUAL
25148: OR
25149: IFFALSE 25255
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25151: LD_VAR 0 5
25155: PUSH
25156: LD_INT 1
25158: ARRAY
25159: PPUSH
25160: CALL_OW 305
25164: PUSH
25165: LD_VAR 0 5
25169: PUSH
25170: LD_INT 1
25172: ARRAY
25173: PPUSH
25174: CALL_OW 255
25178: PUSH
25179: LD_VAR 0 1
25183: PPUSH
25184: CALL_OW 255
25188: EQUAL
25189: AND
25190: IFFALSE 25214
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25192: LD_VAR 0 5
25196: PUSH
25197: LD_INT 1
25199: ARRAY
25200: PPUSH
25201: LD_VAR 0 5
25205: PUSH
25206: LD_INT 2
25208: ARRAY
25209: PPUSH
25210: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25214: LD_ADDR_EXP 88
25218: PUSH
25219: LD_EXP 88
25223: PPUSH
25224: LD_VAR 0 4
25228: PPUSH
25229: LD_EXP 88
25233: PUSH
25234: LD_VAR 0 4
25238: ARRAY
25239: PPUSH
25240: LD_VAR 0 3
25244: PPUSH
25245: CALL_OW 3
25249: PPUSH
25250: CALL_OW 1
25254: ST_TO_ADDR
// end ; end ;
25255: GO 25084
25257: POP
25258: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25259: LD_VAR 0 1
25263: PPUSH
25264: LD_EXP 88
25268: PUSH
25269: LD_VAR 0 4
25273: ARRAY
25274: PUSH
25275: LD_INT 0
25277: PLUS
25278: PPUSH
25279: CALL_OW 505
// end ;
25283: LD_VAR 0 2
25287: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25288: LD_INT 0
25290: PPUSH
25291: PPUSH
25292: PPUSH
25293: PPUSH
// if not hack in hackTanks then
25294: LD_VAR 0 1
25298: PUSH
25299: LD_EXP 87
25303: IN
25304: NOT
25305: IFFALSE 25309
// exit ;
25307: GO 25394
// index := GetElementIndex ( hackTanks , hack ) ;
25309: LD_ADDR_VAR 0 5
25313: PUSH
25314: LD_EXP 87
25318: PPUSH
25319: LD_VAR 0 1
25323: PPUSH
25324: CALL 32152 0 2
25328: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25329: LD_ADDR_VAR 0 4
25333: PUSH
25334: DOUBLE
25335: LD_INT 1
25337: DEC
25338: ST_TO_ADDR
25339: LD_EXP 88
25343: PUSH
25344: LD_VAR 0 5
25348: ARRAY
25349: PUSH
25350: FOR_TO
25351: IFFALSE 25392
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25353: LD_EXP 88
25357: PUSH
25358: LD_VAR 0 5
25362: ARRAY
25363: PUSH
25364: LD_VAR 0 4
25368: ARRAY
25369: PUSH
25370: LD_INT 1
25372: ARRAY
25373: PUSH
25374: LD_VAR 0 2
25378: EQUAL
25379: IFFALSE 25390
// KillUnit ( vehicle ) ;
25381: LD_VAR 0 2
25385: PPUSH
25386: CALL_OW 66
25390: GO 25350
25392: POP
25393: POP
// end ;
25394: LD_VAR 0 3
25398: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25399: LD_EXP 92
25403: NOT
25404: IFFALSE 25439
25406: GO 25408
25408: DISABLE
// begin initMiner := true ;
25409: LD_ADDR_EXP 92
25413: PUSH
25414: LD_INT 1
25416: ST_TO_ADDR
// minersList := [ ] ;
25417: LD_ADDR_EXP 93
25421: PUSH
25422: EMPTY
25423: ST_TO_ADDR
// minerMinesList := [ ] ;
25424: LD_ADDR_EXP 94
25428: PUSH
25429: EMPTY
25430: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25431: LD_ADDR_EXP 95
25435: PUSH
25436: LD_INT 5
25438: ST_TO_ADDR
// end ;
25439: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25440: LD_EXP 92
25444: PUSH
25445: LD_INT 34
25447: PUSH
25448: LD_INT 81
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PPUSH
25455: CALL_OW 69
25459: AND
25460: IFFALSE 25921
25462: GO 25464
25464: DISABLE
25465: LD_INT 0
25467: PPUSH
25468: PPUSH
25469: PPUSH
25470: PPUSH
// begin enable ;
25471: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25472: LD_ADDR_VAR 0 1
25476: PUSH
25477: LD_INT 34
25479: PUSH
25480: LD_INT 81
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PPUSH
25487: CALL_OW 69
25491: PUSH
25492: FOR_IN
25493: IFFALSE 25565
// begin if not i in minersList then
25495: LD_VAR 0 1
25499: PUSH
25500: LD_EXP 93
25504: IN
25505: NOT
25506: IFFALSE 25563
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25508: LD_ADDR_EXP 93
25512: PUSH
25513: LD_EXP 93
25517: PPUSH
25518: LD_EXP 93
25522: PUSH
25523: LD_INT 1
25525: PLUS
25526: PPUSH
25527: LD_VAR 0 1
25531: PPUSH
25532: CALL_OW 1
25536: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25537: LD_ADDR_EXP 94
25541: PUSH
25542: LD_EXP 94
25546: PPUSH
25547: LD_EXP 94
25551: PUSH
25552: LD_INT 1
25554: PLUS
25555: PPUSH
25556: EMPTY
25557: PPUSH
25558: CALL_OW 1
25562: ST_TO_ADDR
// end end ;
25563: GO 25492
25565: POP
25566: POP
// for i := minerMinesList downto 1 do
25567: LD_ADDR_VAR 0 1
25571: PUSH
25572: DOUBLE
25573: LD_EXP 94
25577: INC
25578: ST_TO_ADDR
25579: LD_INT 1
25581: PUSH
25582: FOR_DOWNTO
25583: IFFALSE 25919
// begin if IsLive ( minersList [ i ] ) then
25585: LD_EXP 93
25589: PUSH
25590: LD_VAR 0 1
25594: ARRAY
25595: PPUSH
25596: CALL_OW 300
25600: IFFALSE 25628
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25602: LD_EXP 93
25606: PUSH
25607: LD_VAR 0 1
25611: ARRAY
25612: PPUSH
25613: LD_EXP 94
25617: PUSH
25618: LD_VAR 0 1
25622: ARRAY
25623: PPUSH
25624: CALL_OW 505
// if not minerMinesList [ i ] then
25628: LD_EXP 94
25632: PUSH
25633: LD_VAR 0 1
25637: ARRAY
25638: NOT
25639: IFFALSE 25643
// continue ;
25641: GO 25582
// for j := minerMinesList [ i ] downto 1 do
25643: LD_ADDR_VAR 0 2
25647: PUSH
25648: DOUBLE
25649: LD_EXP 94
25653: PUSH
25654: LD_VAR 0 1
25658: ARRAY
25659: INC
25660: ST_TO_ADDR
25661: LD_INT 1
25663: PUSH
25664: FOR_DOWNTO
25665: IFFALSE 25915
// begin side := GetSide ( minersList [ i ] ) ;
25667: LD_ADDR_VAR 0 3
25671: PUSH
25672: LD_EXP 93
25676: PUSH
25677: LD_VAR 0 1
25681: ARRAY
25682: PPUSH
25683: CALL_OW 255
25687: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25688: LD_ADDR_VAR 0 4
25692: PUSH
25693: LD_EXP 94
25697: PUSH
25698: LD_VAR 0 1
25702: ARRAY
25703: PUSH
25704: LD_VAR 0 2
25708: ARRAY
25709: PUSH
25710: LD_INT 1
25712: ARRAY
25713: PPUSH
25714: LD_EXP 94
25718: PUSH
25719: LD_VAR 0 1
25723: ARRAY
25724: PUSH
25725: LD_VAR 0 2
25729: ARRAY
25730: PUSH
25731: LD_INT 2
25733: ARRAY
25734: PPUSH
25735: CALL_OW 428
25739: ST_TO_ADDR
// if not tmp then
25740: LD_VAR 0 4
25744: NOT
25745: IFFALSE 25749
// continue ;
25747: GO 25664
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25749: LD_VAR 0 4
25753: PUSH
25754: LD_INT 81
25756: PUSH
25757: LD_VAR 0 3
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PPUSH
25766: CALL_OW 69
25770: IN
25771: PUSH
25772: LD_EXP 94
25776: PUSH
25777: LD_VAR 0 1
25781: ARRAY
25782: PUSH
25783: LD_VAR 0 2
25787: ARRAY
25788: PUSH
25789: LD_INT 1
25791: ARRAY
25792: PPUSH
25793: LD_EXP 94
25797: PUSH
25798: LD_VAR 0 1
25802: ARRAY
25803: PUSH
25804: LD_VAR 0 2
25808: ARRAY
25809: PUSH
25810: LD_INT 2
25812: ARRAY
25813: PPUSH
25814: CALL_OW 458
25818: AND
25819: IFFALSE 25913
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25821: LD_EXP 94
25825: PUSH
25826: LD_VAR 0 1
25830: ARRAY
25831: PUSH
25832: LD_VAR 0 2
25836: ARRAY
25837: PUSH
25838: LD_INT 1
25840: ARRAY
25841: PPUSH
25842: LD_EXP 94
25846: PUSH
25847: LD_VAR 0 1
25851: ARRAY
25852: PUSH
25853: LD_VAR 0 2
25857: ARRAY
25858: PUSH
25859: LD_INT 2
25861: ARRAY
25862: PPUSH
25863: LD_VAR 0 3
25867: PPUSH
25868: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25872: LD_ADDR_EXP 94
25876: PUSH
25877: LD_EXP 94
25881: PPUSH
25882: LD_VAR 0 1
25886: PPUSH
25887: LD_EXP 94
25891: PUSH
25892: LD_VAR 0 1
25896: ARRAY
25897: PPUSH
25898: LD_VAR 0 2
25902: PPUSH
25903: CALL_OW 3
25907: PPUSH
25908: CALL_OW 1
25912: ST_TO_ADDR
// end ; end ;
25913: GO 25664
25915: POP
25916: POP
// end ;
25917: GO 25582
25919: POP
25920: POP
// end ;
25921: PPOPN 4
25923: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25924: LD_INT 0
25926: PPUSH
25927: PPUSH
// result := false ;
25928: LD_ADDR_VAR 0 4
25932: PUSH
25933: LD_INT 0
25935: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25936: LD_VAR 0 1
25940: PPUSH
25941: CALL_OW 264
25945: PUSH
25946: LD_INT 81
25948: EQUAL
25949: NOT
25950: IFFALSE 25954
// exit ;
25952: GO 26194
// index := GetElementIndex ( minersList , unit ) ;
25954: LD_ADDR_VAR 0 5
25958: PUSH
25959: LD_EXP 93
25963: PPUSH
25964: LD_VAR 0 1
25968: PPUSH
25969: CALL 32152 0 2
25973: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25974: LD_EXP 94
25978: PUSH
25979: LD_VAR 0 5
25983: ARRAY
25984: PUSH
25985: LD_EXP 95
25989: GREATEREQUAL
25990: IFFALSE 25994
// exit ;
25992: GO 26194
// ComMoveXY ( unit , x , y ) ;
25994: LD_VAR 0 1
25998: PPUSH
25999: LD_VAR 0 2
26003: PPUSH
26004: LD_VAR 0 3
26008: PPUSH
26009: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26013: LD_INT 35
26015: PPUSH
26016: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26020: LD_VAR 0 1
26024: PPUSH
26025: LD_VAR 0 2
26029: PPUSH
26030: LD_VAR 0 3
26034: PPUSH
26035: CALL 63536 0 3
26039: NOT
26040: PUSH
26041: LD_VAR 0 1
26045: PPUSH
26046: CALL_OW 314
26050: AND
26051: IFFALSE 26055
// exit ;
26053: GO 26194
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26055: LD_VAR 0 2
26059: PPUSH
26060: LD_VAR 0 3
26064: PPUSH
26065: CALL_OW 428
26069: PUSH
26070: LD_VAR 0 1
26074: EQUAL
26075: PUSH
26076: LD_VAR 0 1
26080: PPUSH
26081: CALL_OW 314
26085: NOT
26086: AND
26087: IFFALSE 26013
// PlaySoundXY ( x , y , PlantMine ) ;
26089: LD_VAR 0 2
26093: PPUSH
26094: LD_VAR 0 3
26098: PPUSH
26099: LD_STRING PlantMine
26101: PPUSH
26102: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26106: LD_VAR 0 2
26110: PPUSH
26111: LD_VAR 0 3
26115: PPUSH
26116: LD_VAR 0 1
26120: PPUSH
26121: CALL_OW 255
26125: PPUSH
26126: LD_INT 0
26128: PPUSH
26129: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26133: LD_ADDR_EXP 94
26137: PUSH
26138: LD_EXP 94
26142: PPUSH
26143: LD_VAR 0 5
26147: PUSH
26148: LD_EXP 94
26152: PUSH
26153: LD_VAR 0 5
26157: ARRAY
26158: PUSH
26159: LD_INT 1
26161: PLUS
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PPUSH
26167: LD_VAR 0 2
26171: PUSH
26172: LD_VAR 0 3
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PPUSH
26181: CALL 32367 0 3
26185: ST_TO_ADDR
// result := true ;
26186: LD_ADDR_VAR 0 4
26190: PUSH
26191: LD_INT 1
26193: ST_TO_ADDR
// end ;
26194: LD_VAR 0 4
26198: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26199: LD_INT 0
26201: PPUSH
26202: PPUSH
26203: PPUSH
// if not unit in minersList then
26204: LD_VAR 0 1
26208: PUSH
26209: LD_EXP 93
26213: IN
26214: NOT
26215: IFFALSE 26219
// exit ;
26217: GO 26611
// index := GetElementIndex ( minersList , unit ) ;
26219: LD_ADDR_VAR 0 6
26223: PUSH
26224: LD_EXP 93
26228: PPUSH
26229: LD_VAR 0 1
26233: PPUSH
26234: CALL 32152 0 2
26238: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26239: LD_ADDR_VAR 0 5
26243: PUSH
26244: DOUBLE
26245: LD_EXP 94
26249: PUSH
26250: LD_VAR 0 6
26254: ARRAY
26255: INC
26256: ST_TO_ADDR
26257: LD_INT 1
26259: PUSH
26260: FOR_DOWNTO
26261: IFFALSE 26422
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26263: LD_EXP 94
26267: PUSH
26268: LD_VAR 0 6
26272: ARRAY
26273: PUSH
26274: LD_VAR 0 5
26278: ARRAY
26279: PUSH
26280: LD_INT 1
26282: ARRAY
26283: PUSH
26284: LD_VAR 0 2
26288: EQUAL
26289: PUSH
26290: LD_EXP 94
26294: PUSH
26295: LD_VAR 0 6
26299: ARRAY
26300: PUSH
26301: LD_VAR 0 5
26305: ARRAY
26306: PUSH
26307: LD_INT 2
26309: ARRAY
26310: PUSH
26311: LD_VAR 0 3
26315: EQUAL
26316: AND
26317: IFFALSE 26420
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26319: LD_EXP 94
26323: PUSH
26324: LD_VAR 0 6
26328: ARRAY
26329: PUSH
26330: LD_VAR 0 5
26334: ARRAY
26335: PUSH
26336: LD_INT 1
26338: ARRAY
26339: PPUSH
26340: LD_EXP 94
26344: PUSH
26345: LD_VAR 0 6
26349: ARRAY
26350: PUSH
26351: LD_VAR 0 5
26355: ARRAY
26356: PUSH
26357: LD_INT 2
26359: ARRAY
26360: PPUSH
26361: LD_VAR 0 1
26365: PPUSH
26366: CALL_OW 255
26370: PPUSH
26371: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26375: LD_ADDR_EXP 94
26379: PUSH
26380: LD_EXP 94
26384: PPUSH
26385: LD_VAR 0 6
26389: PPUSH
26390: LD_EXP 94
26394: PUSH
26395: LD_VAR 0 6
26399: ARRAY
26400: PPUSH
26401: LD_VAR 0 5
26405: PPUSH
26406: CALL_OW 3
26410: PPUSH
26411: CALL_OW 1
26415: ST_TO_ADDR
// exit ;
26416: POP
26417: POP
26418: GO 26611
// end ; end ;
26420: GO 26260
26422: POP
26423: POP
// for i := minerMinesList [ index ] downto 1 do
26424: LD_ADDR_VAR 0 5
26428: PUSH
26429: DOUBLE
26430: LD_EXP 94
26434: PUSH
26435: LD_VAR 0 6
26439: ARRAY
26440: INC
26441: ST_TO_ADDR
26442: LD_INT 1
26444: PUSH
26445: FOR_DOWNTO
26446: IFFALSE 26609
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26448: LD_EXP 94
26452: PUSH
26453: LD_VAR 0 6
26457: ARRAY
26458: PUSH
26459: LD_VAR 0 5
26463: ARRAY
26464: PUSH
26465: LD_INT 1
26467: ARRAY
26468: PPUSH
26469: LD_EXP 94
26473: PUSH
26474: LD_VAR 0 6
26478: ARRAY
26479: PUSH
26480: LD_VAR 0 5
26484: ARRAY
26485: PUSH
26486: LD_INT 2
26488: ARRAY
26489: PPUSH
26490: LD_VAR 0 2
26494: PPUSH
26495: LD_VAR 0 3
26499: PPUSH
26500: CALL_OW 298
26504: PUSH
26505: LD_INT 6
26507: LESS
26508: IFFALSE 26607
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26510: LD_EXP 94
26514: PUSH
26515: LD_VAR 0 6
26519: ARRAY
26520: PUSH
26521: LD_VAR 0 5
26525: ARRAY
26526: PUSH
26527: LD_INT 1
26529: ARRAY
26530: PPUSH
26531: LD_EXP 94
26535: PUSH
26536: LD_VAR 0 6
26540: ARRAY
26541: PUSH
26542: LD_VAR 0 5
26546: ARRAY
26547: PUSH
26548: LD_INT 2
26550: ARRAY
26551: PPUSH
26552: LD_VAR 0 1
26556: PPUSH
26557: CALL_OW 255
26561: PPUSH
26562: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26566: LD_ADDR_EXP 94
26570: PUSH
26571: LD_EXP 94
26575: PPUSH
26576: LD_VAR 0 6
26580: PPUSH
26581: LD_EXP 94
26585: PUSH
26586: LD_VAR 0 6
26590: ARRAY
26591: PPUSH
26592: LD_VAR 0 5
26596: PPUSH
26597: CALL_OW 3
26601: PPUSH
26602: CALL_OW 1
26606: ST_TO_ADDR
// end ; end ;
26607: GO 26445
26609: POP
26610: POP
// end ;
26611: LD_VAR 0 4
26615: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26616: LD_INT 0
26618: PPUSH
26619: PPUSH
26620: PPUSH
26621: PPUSH
26622: PPUSH
26623: PPUSH
26624: PPUSH
26625: PPUSH
26626: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26627: LD_VAR 0 1
26631: PPUSH
26632: CALL_OW 264
26636: PUSH
26637: LD_INT 81
26639: EQUAL
26640: NOT
26641: PUSH
26642: LD_VAR 0 1
26646: PUSH
26647: LD_EXP 93
26651: IN
26652: NOT
26653: OR
26654: IFFALSE 26658
// exit ;
26656: GO 26980
// index := GetElementIndex ( minersList , unit ) ;
26658: LD_ADDR_VAR 0 6
26662: PUSH
26663: LD_EXP 93
26667: PPUSH
26668: LD_VAR 0 1
26672: PPUSH
26673: CALL 32152 0 2
26677: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26678: LD_ADDR_VAR 0 8
26682: PUSH
26683: LD_EXP 95
26687: PUSH
26688: LD_EXP 94
26692: PUSH
26693: LD_VAR 0 6
26697: ARRAY
26698: MINUS
26699: ST_TO_ADDR
// if not minesFreeAmount then
26700: LD_VAR 0 8
26704: NOT
26705: IFFALSE 26709
// exit ;
26707: GO 26980
// tmp := [ ] ;
26709: LD_ADDR_VAR 0 7
26713: PUSH
26714: EMPTY
26715: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26716: LD_ADDR_VAR 0 5
26720: PUSH
26721: DOUBLE
26722: LD_INT 1
26724: DEC
26725: ST_TO_ADDR
26726: LD_VAR 0 8
26730: PUSH
26731: FOR_TO
26732: IFFALSE 26927
// begin _d := rand ( 0 , 5 ) ;
26734: LD_ADDR_VAR 0 11
26738: PUSH
26739: LD_INT 0
26741: PPUSH
26742: LD_INT 5
26744: PPUSH
26745: CALL_OW 12
26749: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26750: LD_ADDR_VAR 0 12
26754: PUSH
26755: LD_INT 2
26757: PPUSH
26758: LD_INT 6
26760: PPUSH
26761: CALL_OW 12
26765: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26766: LD_ADDR_VAR 0 9
26770: PUSH
26771: LD_VAR 0 2
26775: PPUSH
26776: LD_VAR 0 11
26780: PPUSH
26781: LD_VAR 0 12
26785: PPUSH
26786: CALL_OW 272
26790: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26791: LD_ADDR_VAR 0 10
26795: PUSH
26796: LD_VAR 0 3
26800: PPUSH
26801: LD_VAR 0 11
26805: PPUSH
26806: LD_VAR 0 12
26810: PPUSH
26811: CALL_OW 273
26815: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26816: LD_VAR 0 9
26820: PPUSH
26821: LD_VAR 0 10
26825: PPUSH
26826: CALL_OW 488
26830: PUSH
26831: LD_VAR 0 9
26835: PUSH
26836: LD_VAR 0 10
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_VAR 0 7
26849: IN
26850: NOT
26851: AND
26852: PUSH
26853: LD_VAR 0 9
26857: PPUSH
26858: LD_VAR 0 10
26862: PPUSH
26863: CALL_OW 458
26867: NOT
26868: AND
26869: IFFALSE 26911
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26871: LD_ADDR_VAR 0 7
26875: PUSH
26876: LD_VAR 0 7
26880: PPUSH
26881: LD_VAR 0 7
26885: PUSH
26886: LD_INT 1
26888: PLUS
26889: PPUSH
26890: LD_VAR 0 9
26894: PUSH
26895: LD_VAR 0 10
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PPUSH
26904: CALL_OW 1
26908: ST_TO_ADDR
26909: GO 26925
// i := i - 1 ;
26911: LD_ADDR_VAR 0 5
26915: PUSH
26916: LD_VAR 0 5
26920: PUSH
26921: LD_INT 1
26923: MINUS
26924: ST_TO_ADDR
// end ;
26925: GO 26731
26927: POP
26928: POP
// for i in tmp do
26929: LD_ADDR_VAR 0 5
26933: PUSH
26934: LD_VAR 0 7
26938: PUSH
26939: FOR_IN
26940: IFFALSE 26978
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26942: LD_VAR 0 1
26946: PPUSH
26947: LD_VAR 0 5
26951: PUSH
26952: LD_INT 1
26954: ARRAY
26955: PPUSH
26956: LD_VAR 0 5
26960: PUSH
26961: LD_INT 2
26963: ARRAY
26964: PPUSH
26965: CALL 25924 0 3
26969: NOT
26970: IFFALSE 26976
// exit ;
26972: POP
26973: POP
26974: GO 26980
26976: GO 26939
26978: POP
26979: POP
// end ;
26980: LD_VAR 0 4
26984: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26985: LD_INT 0
26987: PPUSH
26988: PPUSH
26989: PPUSH
26990: PPUSH
26991: PPUSH
26992: PPUSH
26993: PPUSH
// if not GetClass ( unit ) = class_sniper then
26994: LD_VAR 0 1
26998: PPUSH
26999: CALL_OW 257
27003: PUSH
27004: LD_INT 5
27006: EQUAL
27007: NOT
27008: IFFALSE 27012
// exit ;
27010: GO 27400
// dist := 8 ;
27012: LD_ADDR_VAR 0 5
27016: PUSH
27017: LD_INT 8
27019: ST_TO_ADDR
// viewRange := 12 ;
27020: LD_ADDR_VAR 0 7
27024: PUSH
27025: LD_INT 12
27027: ST_TO_ADDR
// side := GetSide ( unit ) ;
27028: LD_ADDR_VAR 0 6
27032: PUSH
27033: LD_VAR 0 1
27037: PPUSH
27038: CALL_OW 255
27042: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27043: LD_INT 61
27045: PPUSH
27046: LD_VAR 0 6
27050: PPUSH
27051: CALL_OW 321
27055: PUSH
27056: LD_INT 2
27058: EQUAL
27059: IFFALSE 27069
// viewRange := 16 ;
27061: LD_ADDR_VAR 0 7
27065: PUSH
27066: LD_INT 16
27068: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27069: LD_VAR 0 1
27073: PPUSH
27074: LD_VAR 0 2
27078: PPUSH
27079: LD_VAR 0 3
27083: PPUSH
27084: CALL_OW 297
27088: PUSH
27089: LD_VAR 0 5
27093: GREATER
27094: IFFALSE 27173
// begin ComMoveXY ( unit , x , y ) ;
27096: LD_VAR 0 1
27100: PPUSH
27101: LD_VAR 0 2
27105: PPUSH
27106: LD_VAR 0 3
27110: PPUSH
27111: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27115: LD_INT 35
27117: PPUSH
27118: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27122: LD_VAR 0 1
27126: PPUSH
27127: LD_VAR 0 2
27131: PPUSH
27132: LD_VAR 0 3
27136: PPUSH
27137: CALL 63536 0 3
27141: NOT
27142: IFFALSE 27146
// exit ;
27144: GO 27400
// until GetDistUnitXY ( unit , x , y ) < dist ;
27146: LD_VAR 0 1
27150: PPUSH
27151: LD_VAR 0 2
27155: PPUSH
27156: LD_VAR 0 3
27160: PPUSH
27161: CALL_OW 297
27165: PUSH
27166: LD_VAR 0 5
27170: LESS
27171: IFFALSE 27115
// end ; ComTurnXY ( unit , x , y ) ;
27173: LD_VAR 0 1
27177: PPUSH
27178: LD_VAR 0 2
27182: PPUSH
27183: LD_VAR 0 3
27187: PPUSH
27188: CALL_OW 118
// wait ( 5 ) ;
27192: LD_INT 5
27194: PPUSH
27195: CALL_OW 67
// _d := GetDir ( unit ) ;
27199: LD_ADDR_VAR 0 10
27203: PUSH
27204: LD_VAR 0 1
27208: PPUSH
27209: CALL_OW 254
27213: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27214: LD_ADDR_VAR 0 8
27218: PUSH
27219: LD_VAR 0 1
27223: PPUSH
27224: CALL_OW 250
27228: PPUSH
27229: LD_VAR 0 10
27233: PPUSH
27234: LD_VAR 0 5
27238: PPUSH
27239: CALL_OW 272
27243: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27244: LD_ADDR_VAR 0 9
27248: PUSH
27249: LD_VAR 0 1
27253: PPUSH
27254: CALL_OW 251
27258: PPUSH
27259: LD_VAR 0 10
27263: PPUSH
27264: LD_VAR 0 5
27268: PPUSH
27269: CALL_OW 273
27273: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27274: LD_VAR 0 8
27278: PPUSH
27279: LD_VAR 0 9
27283: PPUSH
27284: CALL_OW 488
27288: NOT
27289: IFFALSE 27293
// exit ;
27291: GO 27400
// ComAnimCustom ( unit , 1 ) ;
27293: LD_VAR 0 1
27297: PPUSH
27298: LD_INT 1
27300: PPUSH
27301: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27305: LD_VAR 0 8
27309: PPUSH
27310: LD_VAR 0 9
27314: PPUSH
27315: LD_VAR 0 6
27319: PPUSH
27320: LD_VAR 0 7
27324: PPUSH
27325: CALL_OW 330
// repeat wait ( 1 ) ;
27329: LD_INT 1
27331: PPUSH
27332: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27336: LD_VAR 0 1
27340: PPUSH
27341: CALL_OW 316
27345: PUSH
27346: LD_VAR 0 1
27350: PPUSH
27351: CALL_OW 314
27355: OR
27356: PUSH
27357: LD_VAR 0 1
27361: PPUSH
27362: CALL_OW 302
27366: NOT
27367: OR
27368: PUSH
27369: LD_VAR 0 1
27373: PPUSH
27374: CALL_OW 301
27378: OR
27379: IFFALSE 27329
// RemoveSeeing ( _x , _y , side ) ;
27381: LD_VAR 0 8
27385: PPUSH
27386: LD_VAR 0 9
27390: PPUSH
27391: LD_VAR 0 6
27395: PPUSH
27396: CALL_OW 331
// end ; end_of_file
27400: LD_VAR 0 4
27404: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27405: LD_INT 0
27407: PPUSH
27408: PPUSH
// if exist_mode then
27409: LD_VAR 0 2
27413: IFFALSE 27438
// unit := CreateCharacter ( prefix & ident ) else
27415: LD_ADDR_VAR 0 5
27419: PUSH
27420: LD_VAR 0 3
27424: PUSH
27425: LD_VAR 0 1
27429: STR
27430: PPUSH
27431: CALL_OW 34
27435: ST_TO_ADDR
27436: GO 27453
// unit := NewCharacter ( ident ) ;
27438: LD_ADDR_VAR 0 5
27442: PUSH
27443: LD_VAR 0 1
27447: PPUSH
27448: CALL_OW 25
27452: ST_TO_ADDR
// result := unit ;
27453: LD_ADDR_VAR 0 4
27457: PUSH
27458: LD_VAR 0 5
27462: ST_TO_ADDR
// end ;
27463: LD_VAR 0 4
27467: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27468: LD_INT 0
27470: PPUSH
27471: PPUSH
// if not side or not nation then
27472: LD_VAR 0 1
27476: NOT
27477: PUSH
27478: LD_VAR 0 2
27482: NOT
27483: OR
27484: IFFALSE 27488
// exit ;
27486: GO 28256
// case nation of nation_american :
27488: LD_VAR 0 2
27492: PUSH
27493: LD_INT 1
27495: DOUBLE
27496: EQUAL
27497: IFTRUE 27501
27499: GO 27715
27501: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27502: LD_ADDR_VAR 0 4
27506: PUSH
27507: LD_INT 35
27509: PUSH
27510: LD_INT 45
27512: PUSH
27513: LD_INT 46
27515: PUSH
27516: LD_INT 47
27518: PUSH
27519: LD_INT 82
27521: PUSH
27522: LD_INT 83
27524: PUSH
27525: LD_INT 84
27527: PUSH
27528: LD_INT 85
27530: PUSH
27531: LD_INT 86
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: LD_INT 2
27539: PUSH
27540: LD_INT 6
27542: PUSH
27543: LD_INT 15
27545: PUSH
27546: LD_INT 16
27548: PUSH
27549: LD_INT 7
27551: PUSH
27552: LD_INT 12
27554: PUSH
27555: LD_INT 13
27557: PUSH
27558: LD_INT 10
27560: PUSH
27561: LD_INT 14
27563: PUSH
27564: LD_INT 20
27566: PUSH
27567: LD_INT 21
27569: PUSH
27570: LD_INT 22
27572: PUSH
27573: LD_INT 25
27575: PUSH
27576: LD_INT 32
27578: PUSH
27579: LD_INT 27
27581: PUSH
27582: LD_INT 36
27584: PUSH
27585: LD_INT 69
27587: PUSH
27588: LD_INT 39
27590: PUSH
27591: LD_INT 34
27593: PUSH
27594: LD_INT 40
27596: PUSH
27597: LD_INT 48
27599: PUSH
27600: LD_INT 49
27602: PUSH
27603: LD_INT 50
27605: PUSH
27606: LD_INT 51
27608: PUSH
27609: LD_INT 52
27611: PUSH
27612: LD_INT 53
27614: PUSH
27615: LD_INT 54
27617: PUSH
27618: LD_INT 55
27620: PUSH
27621: LD_INT 56
27623: PUSH
27624: LD_INT 57
27626: PUSH
27627: LD_INT 58
27629: PUSH
27630: LD_INT 59
27632: PUSH
27633: LD_INT 60
27635: PUSH
27636: LD_INT 61
27638: PUSH
27639: LD_INT 62
27641: PUSH
27642: LD_INT 80
27644: PUSH
27645: LD_INT 82
27647: PUSH
27648: LD_INT 83
27650: PUSH
27651: LD_INT 84
27653: PUSH
27654: LD_INT 85
27656: PUSH
27657: LD_INT 86
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: ST_TO_ADDR
27713: GO 28180
27715: LD_INT 2
27717: DOUBLE
27718: EQUAL
27719: IFTRUE 27723
27721: GO 27949
27723: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27724: LD_ADDR_VAR 0 4
27728: PUSH
27729: LD_INT 35
27731: PUSH
27732: LD_INT 45
27734: PUSH
27735: LD_INT 46
27737: PUSH
27738: LD_INT 47
27740: PUSH
27741: LD_INT 82
27743: PUSH
27744: LD_INT 83
27746: PUSH
27747: LD_INT 84
27749: PUSH
27750: LD_INT 85
27752: PUSH
27753: LD_INT 87
27755: PUSH
27756: LD_INT 70
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: LD_INT 11
27764: PUSH
27765: LD_INT 3
27767: PUSH
27768: LD_INT 4
27770: PUSH
27771: LD_INT 5
27773: PUSH
27774: LD_INT 6
27776: PUSH
27777: LD_INT 15
27779: PUSH
27780: LD_INT 18
27782: PUSH
27783: LD_INT 7
27785: PUSH
27786: LD_INT 17
27788: PUSH
27789: LD_INT 8
27791: PUSH
27792: LD_INT 20
27794: PUSH
27795: LD_INT 21
27797: PUSH
27798: LD_INT 22
27800: PUSH
27801: LD_INT 72
27803: PUSH
27804: LD_INT 26
27806: PUSH
27807: LD_INT 69
27809: PUSH
27810: LD_INT 39
27812: PUSH
27813: LD_INT 40
27815: PUSH
27816: LD_INT 41
27818: PUSH
27819: LD_INT 42
27821: PUSH
27822: LD_INT 43
27824: PUSH
27825: LD_INT 48
27827: PUSH
27828: LD_INT 49
27830: PUSH
27831: LD_INT 50
27833: PUSH
27834: LD_INT 51
27836: PUSH
27837: LD_INT 52
27839: PUSH
27840: LD_INT 53
27842: PUSH
27843: LD_INT 54
27845: PUSH
27846: LD_INT 55
27848: PUSH
27849: LD_INT 56
27851: PUSH
27852: LD_INT 60
27854: PUSH
27855: LD_INT 61
27857: PUSH
27858: LD_INT 62
27860: PUSH
27861: LD_INT 66
27863: PUSH
27864: LD_INT 67
27866: PUSH
27867: LD_INT 68
27869: PUSH
27870: LD_INT 81
27872: PUSH
27873: LD_INT 82
27875: PUSH
27876: LD_INT 83
27878: PUSH
27879: LD_INT 84
27881: PUSH
27882: LD_INT 85
27884: PUSH
27885: LD_INT 87
27887: PUSH
27888: LD_INT 88
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: ST_TO_ADDR
27947: GO 28180
27949: LD_INT 3
27951: DOUBLE
27952: EQUAL
27953: IFTRUE 27957
27955: GO 28179
27957: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27958: LD_ADDR_VAR 0 4
27962: PUSH
27963: LD_INT 46
27965: PUSH
27966: LD_INT 47
27968: PUSH
27969: LD_INT 1
27971: PUSH
27972: LD_INT 2
27974: PUSH
27975: LD_INT 82
27977: PUSH
27978: LD_INT 83
27980: PUSH
27981: LD_INT 84
27983: PUSH
27984: LD_INT 85
27986: PUSH
27987: LD_INT 86
27989: PUSH
27990: LD_INT 11
27992: PUSH
27993: LD_INT 9
27995: PUSH
27996: LD_INT 20
27998: PUSH
27999: LD_INT 19
28001: PUSH
28002: LD_INT 21
28004: PUSH
28005: LD_INT 24
28007: PUSH
28008: LD_INT 22
28010: PUSH
28011: LD_INT 25
28013: PUSH
28014: LD_INT 28
28016: PUSH
28017: LD_INT 29
28019: PUSH
28020: LD_INT 30
28022: PUSH
28023: LD_INT 31
28025: PUSH
28026: LD_INT 37
28028: PUSH
28029: LD_INT 38
28031: PUSH
28032: LD_INT 32
28034: PUSH
28035: LD_INT 27
28037: PUSH
28038: LD_INT 33
28040: PUSH
28041: LD_INT 69
28043: PUSH
28044: LD_INT 39
28046: PUSH
28047: LD_INT 34
28049: PUSH
28050: LD_INT 40
28052: PUSH
28053: LD_INT 71
28055: PUSH
28056: LD_INT 23
28058: PUSH
28059: LD_INT 44
28061: PUSH
28062: LD_INT 48
28064: PUSH
28065: LD_INT 49
28067: PUSH
28068: LD_INT 50
28070: PUSH
28071: LD_INT 51
28073: PUSH
28074: LD_INT 52
28076: PUSH
28077: LD_INT 53
28079: PUSH
28080: LD_INT 54
28082: PUSH
28083: LD_INT 55
28085: PUSH
28086: LD_INT 56
28088: PUSH
28089: LD_INT 57
28091: PUSH
28092: LD_INT 58
28094: PUSH
28095: LD_INT 59
28097: PUSH
28098: LD_INT 63
28100: PUSH
28101: LD_INT 64
28103: PUSH
28104: LD_INT 65
28106: PUSH
28107: LD_INT 82
28109: PUSH
28110: LD_INT 83
28112: PUSH
28113: LD_INT 84
28115: PUSH
28116: LD_INT 85
28118: PUSH
28119: LD_INT 86
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: ST_TO_ADDR
28177: GO 28180
28179: POP
// if state > - 1 and state < 3 then
28180: LD_VAR 0 3
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: GREATER
28189: PUSH
28190: LD_VAR 0 3
28194: PUSH
28195: LD_INT 3
28197: LESS
28198: AND
28199: IFFALSE 28256
// for i in result do
28201: LD_ADDR_VAR 0 5
28205: PUSH
28206: LD_VAR 0 4
28210: PUSH
28211: FOR_IN
28212: IFFALSE 28254
// if GetTech ( i , side ) <> state then
28214: LD_VAR 0 5
28218: PPUSH
28219: LD_VAR 0 1
28223: PPUSH
28224: CALL_OW 321
28228: PUSH
28229: LD_VAR 0 3
28233: NONEQUAL
28234: IFFALSE 28252
// result := result diff i ;
28236: LD_ADDR_VAR 0 4
28240: PUSH
28241: LD_VAR 0 4
28245: PUSH
28246: LD_VAR 0 5
28250: DIFF
28251: ST_TO_ADDR
28252: GO 28211
28254: POP
28255: POP
// end ;
28256: LD_VAR 0 4
28260: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28261: LD_INT 0
28263: PPUSH
28264: PPUSH
28265: PPUSH
// result := true ;
28266: LD_ADDR_VAR 0 3
28270: PUSH
28271: LD_INT 1
28273: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28274: LD_ADDR_VAR 0 5
28278: PUSH
28279: LD_VAR 0 2
28283: PPUSH
28284: CALL_OW 480
28288: ST_TO_ADDR
// if not tmp then
28289: LD_VAR 0 5
28293: NOT
28294: IFFALSE 28298
// exit ;
28296: GO 28347
// for i in tmp do
28298: LD_ADDR_VAR 0 4
28302: PUSH
28303: LD_VAR 0 5
28307: PUSH
28308: FOR_IN
28309: IFFALSE 28345
// if GetTech ( i , side ) <> state_researched then
28311: LD_VAR 0 4
28315: PPUSH
28316: LD_VAR 0 1
28320: PPUSH
28321: CALL_OW 321
28325: PUSH
28326: LD_INT 2
28328: NONEQUAL
28329: IFFALSE 28343
// begin result := false ;
28331: LD_ADDR_VAR 0 3
28335: PUSH
28336: LD_INT 0
28338: ST_TO_ADDR
// exit ;
28339: POP
28340: POP
28341: GO 28347
// end ;
28343: GO 28308
28345: POP
28346: POP
// end ;
28347: LD_VAR 0 3
28351: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28352: LD_INT 0
28354: PPUSH
28355: PPUSH
28356: PPUSH
28357: PPUSH
28358: PPUSH
28359: PPUSH
28360: PPUSH
28361: PPUSH
28362: PPUSH
28363: PPUSH
28364: PPUSH
28365: PPUSH
28366: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28367: LD_VAR 0 1
28371: NOT
28372: PUSH
28373: LD_VAR 0 1
28377: PPUSH
28378: CALL_OW 257
28382: PUSH
28383: LD_INT 9
28385: NONEQUAL
28386: OR
28387: IFFALSE 28391
// exit ;
28389: GO 28964
// side := GetSide ( unit ) ;
28391: LD_ADDR_VAR 0 9
28395: PUSH
28396: LD_VAR 0 1
28400: PPUSH
28401: CALL_OW 255
28405: ST_TO_ADDR
// tech_space := tech_spacanom ;
28406: LD_ADDR_VAR 0 12
28410: PUSH
28411: LD_INT 29
28413: ST_TO_ADDR
// tech_time := tech_taurad ;
28414: LD_ADDR_VAR 0 13
28418: PUSH
28419: LD_INT 28
28421: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28422: LD_ADDR_VAR 0 11
28426: PUSH
28427: LD_VAR 0 1
28431: PPUSH
28432: CALL_OW 310
28436: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28437: LD_VAR 0 11
28441: PPUSH
28442: CALL_OW 247
28446: PUSH
28447: LD_INT 2
28449: EQUAL
28450: IFFALSE 28454
// exit ;
28452: GO 28964
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28454: LD_ADDR_VAR 0 8
28458: PUSH
28459: LD_INT 81
28461: PUSH
28462: LD_VAR 0 9
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 3
28473: PUSH
28474: LD_INT 21
28476: PUSH
28477: LD_INT 3
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PPUSH
28492: CALL_OW 69
28496: ST_TO_ADDR
// if not tmp then
28497: LD_VAR 0 8
28501: NOT
28502: IFFALSE 28506
// exit ;
28504: GO 28964
// if in_unit then
28506: LD_VAR 0 11
28510: IFFALSE 28534
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28512: LD_ADDR_VAR 0 10
28516: PUSH
28517: LD_VAR 0 8
28521: PPUSH
28522: LD_VAR 0 11
28526: PPUSH
28527: CALL_OW 74
28531: ST_TO_ADDR
28532: GO 28554
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28534: LD_ADDR_VAR 0 10
28538: PUSH
28539: LD_VAR 0 8
28543: PPUSH
28544: LD_VAR 0 1
28548: PPUSH
28549: CALL_OW 74
28553: ST_TO_ADDR
// if not enemy then
28554: LD_VAR 0 10
28558: NOT
28559: IFFALSE 28563
// exit ;
28561: GO 28964
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28563: LD_VAR 0 11
28567: PUSH
28568: LD_VAR 0 11
28572: PPUSH
28573: LD_VAR 0 10
28577: PPUSH
28578: CALL_OW 296
28582: PUSH
28583: LD_INT 13
28585: GREATER
28586: AND
28587: PUSH
28588: LD_VAR 0 1
28592: PPUSH
28593: LD_VAR 0 10
28597: PPUSH
28598: CALL_OW 296
28602: PUSH
28603: LD_INT 12
28605: GREATER
28606: OR
28607: IFFALSE 28611
// exit ;
28609: GO 28964
// missile := [ 1 ] ;
28611: LD_ADDR_VAR 0 14
28615: PUSH
28616: LD_INT 1
28618: PUSH
28619: EMPTY
28620: LIST
28621: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28622: LD_VAR 0 9
28626: PPUSH
28627: LD_VAR 0 12
28631: PPUSH
28632: CALL_OW 325
28636: IFFALSE 28665
// missile := Replace ( missile , missile + 1 , 2 ) ;
28638: LD_ADDR_VAR 0 14
28642: PUSH
28643: LD_VAR 0 14
28647: PPUSH
28648: LD_VAR 0 14
28652: PUSH
28653: LD_INT 1
28655: PLUS
28656: PPUSH
28657: LD_INT 2
28659: PPUSH
28660: CALL_OW 1
28664: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28665: LD_VAR 0 9
28669: PPUSH
28670: LD_VAR 0 13
28674: PPUSH
28675: CALL_OW 325
28679: PUSH
28680: LD_VAR 0 10
28684: PPUSH
28685: CALL_OW 255
28689: PPUSH
28690: LD_VAR 0 13
28694: PPUSH
28695: CALL_OW 325
28699: NOT
28700: AND
28701: IFFALSE 28730
// missile := Replace ( missile , missile + 1 , 3 ) ;
28703: LD_ADDR_VAR 0 14
28707: PUSH
28708: LD_VAR 0 14
28712: PPUSH
28713: LD_VAR 0 14
28717: PUSH
28718: LD_INT 1
28720: PLUS
28721: PPUSH
28722: LD_INT 3
28724: PPUSH
28725: CALL_OW 1
28729: ST_TO_ADDR
// if missile < 2 then
28730: LD_VAR 0 14
28734: PUSH
28735: LD_INT 2
28737: LESS
28738: IFFALSE 28742
// exit ;
28740: GO 28964
// x := GetX ( enemy ) ;
28742: LD_ADDR_VAR 0 4
28746: PUSH
28747: LD_VAR 0 10
28751: PPUSH
28752: CALL_OW 250
28756: ST_TO_ADDR
// y := GetY ( enemy ) ;
28757: LD_ADDR_VAR 0 5
28761: PUSH
28762: LD_VAR 0 10
28766: PPUSH
28767: CALL_OW 251
28771: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28772: LD_ADDR_VAR 0 6
28776: PUSH
28777: LD_VAR 0 4
28781: PUSH
28782: LD_INT 1
28784: NEG
28785: PPUSH
28786: LD_INT 1
28788: PPUSH
28789: CALL_OW 12
28793: PLUS
28794: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28795: LD_ADDR_VAR 0 7
28799: PUSH
28800: LD_VAR 0 5
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PPUSH
28809: LD_INT 1
28811: PPUSH
28812: CALL_OW 12
28816: PLUS
28817: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28818: LD_VAR 0 6
28822: PPUSH
28823: LD_VAR 0 7
28827: PPUSH
28828: CALL_OW 488
28832: NOT
28833: IFFALSE 28855
// begin _x := x ;
28835: LD_ADDR_VAR 0 6
28839: PUSH
28840: LD_VAR 0 4
28844: ST_TO_ADDR
// _y := y ;
28845: LD_ADDR_VAR 0 7
28849: PUSH
28850: LD_VAR 0 5
28854: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28855: LD_ADDR_VAR 0 3
28859: PUSH
28860: LD_INT 1
28862: PPUSH
28863: LD_VAR 0 14
28867: PPUSH
28868: CALL_OW 12
28872: ST_TO_ADDR
// case i of 1 :
28873: LD_VAR 0 3
28877: PUSH
28878: LD_INT 1
28880: DOUBLE
28881: EQUAL
28882: IFTRUE 28886
28884: GO 28903
28886: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28887: LD_VAR 0 1
28891: PPUSH
28892: LD_VAR 0 10
28896: PPUSH
28897: CALL_OW 115
28901: GO 28964
28903: LD_INT 2
28905: DOUBLE
28906: EQUAL
28907: IFTRUE 28911
28909: GO 28933
28911: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28912: LD_VAR 0 1
28916: PPUSH
28917: LD_VAR 0 6
28921: PPUSH
28922: LD_VAR 0 7
28926: PPUSH
28927: CALL_OW 153
28931: GO 28964
28933: LD_INT 3
28935: DOUBLE
28936: EQUAL
28937: IFTRUE 28941
28939: GO 28963
28941: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28942: LD_VAR 0 1
28946: PPUSH
28947: LD_VAR 0 6
28951: PPUSH
28952: LD_VAR 0 7
28956: PPUSH
28957: CALL_OW 154
28961: GO 28964
28963: POP
// end ;
28964: LD_VAR 0 2
28968: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28969: LD_INT 0
28971: PPUSH
28972: PPUSH
28973: PPUSH
28974: PPUSH
28975: PPUSH
28976: PPUSH
// if not unit or not building then
28977: LD_VAR 0 1
28981: NOT
28982: PUSH
28983: LD_VAR 0 2
28987: NOT
28988: OR
28989: IFFALSE 28993
// exit ;
28991: GO 29151
// x := GetX ( building ) ;
28993: LD_ADDR_VAR 0 5
28997: PUSH
28998: LD_VAR 0 2
29002: PPUSH
29003: CALL_OW 250
29007: ST_TO_ADDR
// y := GetY ( building ) ;
29008: LD_ADDR_VAR 0 6
29012: PUSH
29013: LD_VAR 0 2
29017: PPUSH
29018: CALL_OW 251
29022: ST_TO_ADDR
// for i = 0 to 5 do
29023: LD_ADDR_VAR 0 4
29027: PUSH
29028: DOUBLE
29029: LD_INT 0
29031: DEC
29032: ST_TO_ADDR
29033: LD_INT 5
29035: PUSH
29036: FOR_TO
29037: IFFALSE 29149
// begin _x := ShiftX ( x , i , 3 ) ;
29039: LD_ADDR_VAR 0 7
29043: PUSH
29044: LD_VAR 0 5
29048: PPUSH
29049: LD_VAR 0 4
29053: PPUSH
29054: LD_INT 3
29056: PPUSH
29057: CALL_OW 272
29061: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29062: LD_ADDR_VAR 0 8
29066: PUSH
29067: LD_VAR 0 6
29071: PPUSH
29072: LD_VAR 0 4
29076: PPUSH
29077: LD_INT 3
29079: PPUSH
29080: CALL_OW 273
29084: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29085: LD_VAR 0 7
29089: PPUSH
29090: LD_VAR 0 8
29094: PPUSH
29095: CALL_OW 488
29099: NOT
29100: IFFALSE 29104
// continue ;
29102: GO 29036
// if HexInfo ( _x , _y ) = 0 then
29104: LD_VAR 0 7
29108: PPUSH
29109: LD_VAR 0 8
29113: PPUSH
29114: CALL_OW 428
29118: PUSH
29119: LD_INT 0
29121: EQUAL
29122: IFFALSE 29147
// begin ComMoveXY ( unit , _x , _y ) ;
29124: LD_VAR 0 1
29128: PPUSH
29129: LD_VAR 0 7
29133: PPUSH
29134: LD_VAR 0 8
29138: PPUSH
29139: CALL_OW 111
// exit ;
29143: POP
29144: POP
29145: GO 29151
// end ; end ;
29147: GO 29036
29149: POP
29150: POP
// end ;
29151: LD_VAR 0 3
29155: RET
// export function ScanBase ( side , base_area ) ; begin
29156: LD_INT 0
29158: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29159: LD_ADDR_VAR 0 3
29163: PUSH
29164: LD_VAR 0 2
29168: PPUSH
29169: LD_INT 81
29171: PUSH
29172: LD_VAR 0 1
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PPUSH
29181: CALL_OW 70
29185: ST_TO_ADDR
// end ;
29186: LD_VAR 0 3
29190: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29191: LD_INT 0
29193: PPUSH
29194: PPUSH
29195: PPUSH
29196: PPUSH
// result := false ;
29197: LD_ADDR_VAR 0 2
29201: PUSH
29202: LD_INT 0
29204: ST_TO_ADDR
// side := GetSide ( unit ) ;
29205: LD_ADDR_VAR 0 3
29209: PUSH
29210: LD_VAR 0 1
29214: PPUSH
29215: CALL_OW 255
29219: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29220: LD_ADDR_VAR 0 4
29224: PUSH
29225: LD_VAR 0 1
29229: PPUSH
29230: CALL_OW 248
29234: ST_TO_ADDR
// case nat of 1 :
29235: LD_VAR 0 4
29239: PUSH
29240: LD_INT 1
29242: DOUBLE
29243: EQUAL
29244: IFTRUE 29248
29246: GO 29259
29248: POP
// tech := tech_lassight ; 2 :
29249: LD_ADDR_VAR 0 5
29253: PUSH
29254: LD_INT 12
29256: ST_TO_ADDR
29257: GO 29298
29259: LD_INT 2
29261: DOUBLE
29262: EQUAL
29263: IFTRUE 29267
29265: GO 29278
29267: POP
// tech := tech_mortar ; 3 :
29268: LD_ADDR_VAR 0 5
29272: PUSH
29273: LD_INT 41
29275: ST_TO_ADDR
29276: GO 29298
29278: LD_INT 3
29280: DOUBLE
29281: EQUAL
29282: IFTRUE 29286
29284: GO 29297
29286: POP
// tech := tech_bazooka ; end ;
29287: LD_ADDR_VAR 0 5
29291: PUSH
29292: LD_INT 44
29294: ST_TO_ADDR
29295: GO 29298
29297: POP
// if Researched ( side , tech ) then
29298: LD_VAR 0 3
29302: PPUSH
29303: LD_VAR 0 5
29307: PPUSH
29308: CALL_OW 325
29312: IFFALSE 29339
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29314: LD_ADDR_VAR 0 2
29318: PUSH
29319: LD_INT 5
29321: PUSH
29322: LD_INT 8
29324: PUSH
29325: LD_INT 9
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: LIST
29332: PUSH
29333: LD_VAR 0 4
29337: ARRAY
29338: ST_TO_ADDR
// end ;
29339: LD_VAR 0 2
29343: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29344: LD_INT 0
29346: PPUSH
29347: PPUSH
29348: PPUSH
// if not mines then
29349: LD_VAR 0 2
29353: NOT
29354: IFFALSE 29358
// exit ;
29356: GO 29502
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29358: LD_ADDR_VAR 0 5
29362: PUSH
29363: LD_INT 81
29365: PUSH
29366: LD_VAR 0 1
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 3
29377: PUSH
29378: LD_INT 21
29380: PUSH
29381: LD_INT 3
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PPUSH
29396: CALL_OW 69
29400: ST_TO_ADDR
// for i in mines do
29401: LD_ADDR_VAR 0 4
29405: PUSH
29406: LD_VAR 0 2
29410: PUSH
29411: FOR_IN
29412: IFFALSE 29500
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29414: LD_VAR 0 4
29418: PUSH
29419: LD_INT 1
29421: ARRAY
29422: PPUSH
29423: LD_VAR 0 4
29427: PUSH
29428: LD_INT 2
29430: ARRAY
29431: PPUSH
29432: CALL_OW 458
29436: NOT
29437: IFFALSE 29441
// continue ;
29439: GO 29411
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29441: LD_VAR 0 4
29445: PUSH
29446: LD_INT 1
29448: ARRAY
29449: PPUSH
29450: LD_VAR 0 4
29454: PUSH
29455: LD_INT 2
29457: ARRAY
29458: PPUSH
29459: CALL_OW 428
29463: PUSH
29464: LD_VAR 0 5
29468: IN
29469: IFFALSE 29498
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29471: LD_VAR 0 4
29475: PUSH
29476: LD_INT 1
29478: ARRAY
29479: PPUSH
29480: LD_VAR 0 4
29484: PUSH
29485: LD_INT 2
29487: ARRAY
29488: PPUSH
29489: LD_VAR 0 1
29493: PPUSH
29494: CALL_OW 456
// end ;
29498: GO 29411
29500: POP
29501: POP
// end ;
29502: LD_VAR 0 3
29506: RET
// export function Count ( array ) ; begin
29507: LD_INT 0
29509: PPUSH
// result := array + 0 ;
29510: LD_ADDR_VAR 0 2
29514: PUSH
29515: LD_VAR 0 1
29519: PUSH
29520: LD_INT 0
29522: PLUS
29523: ST_TO_ADDR
// end ;
29524: LD_VAR 0 2
29528: RET
// export function IsEmpty ( building ) ; begin
29529: LD_INT 0
29531: PPUSH
// if not building then
29532: LD_VAR 0 1
29536: NOT
29537: IFFALSE 29541
// exit ;
29539: GO 29584
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29541: LD_ADDR_VAR 0 2
29545: PUSH
29546: LD_VAR 0 1
29550: PUSH
29551: LD_INT 22
29553: PUSH
29554: LD_VAR 0 1
29558: PPUSH
29559: CALL_OW 255
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 58
29570: PUSH
29571: EMPTY
29572: LIST
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PPUSH
29578: CALL_OW 69
29582: IN
29583: ST_TO_ADDR
// end ;
29584: LD_VAR 0 2
29588: RET
// export function IsNotFull ( building ) ; var places ; begin
29589: LD_INT 0
29591: PPUSH
29592: PPUSH
// if not building then
29593: LD_VAR 0 1
29597: NOT
29598: IFFALSE 29602
// exit ;
29600: GO 29630
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29602: LD_ADDR_VAR 0 2
29606: PUSH
29607: LD_VAR 0 1
29611: PPUSH
29612: LD_INT 3
29614: PUSH
29615: LD_INT 62
29617: PUSH
29618: EMPTY
29619: LIST
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PPUSH
29625: CALL_OW 72
29629: ST_TO_ADDR
// end ;
29630: LD_VAR 0 2
29634: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29635: LD_INT 0
29637: PPUSH
29638: PPUSH
29639: PPUSH
29640: PPUSH
// tmp := [ ] ;
29641: LD_ADDR_VAR 0 3
29645: PUSH
29646: EMPTY
29647: ST_TO_ADDR
// list := [ ] ;
29648: LD_ADDR_VAR 0 5
29652: PUSH
29653: EMPTY
29654: ST_TO_ADDR
// for i = 16 to 25 do
29655: LD_ADDR_VAR 0 4
29659: PUSH
29660: DOUBLE
29661: LD_INT 16
29663: DEC
29664: ST_TO_ADDR
29665: LD_INT 25
29667: PUSH
29668: FOR_TO
29669: IFFALSE 29742
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29671: LD_ADDR_VAR 0 3
29675: PUSH
29676: LD_VAR 0 3
29680: PUSH
29681: LD_INT 22
29683: PUSH
29684: LD_VAR 0 1
29688: PPUSH
29689: CALL_OW 255
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 91
29700: PUSH
29701: LD_VAR 0 1
29705: PUSH
29706: LD_INT 6
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 30
29716: PUSH
29717: LD_VAR 0 4
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: LIST
29730: PUSH
29731: EMPTY
29732: LIST
29733: PPUSH
29734: CALL_OW 69
29738: ADD
29739: ST_TO_ADDR
29740: GO 29668
29742: POP
29743: POP
// for i = 1 to tmp do
29744: LD_ADDR_VAR 0 4
29748: PUSH
29749: DOUBLE
29750: LD_INT 1
29752: DEC
29753: ST_TO_ADDR
29754: LD_VAR 0 3
29758: PUSH
29759: FOR_TO
29760: IFFALSE 29848
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29762: LD_ADDR_VAR 0 5
29766: PUSH
29767: LD_VAR 0 5
29771: PUSH
29772: LD_VAR 0 3
29776: PUSH
29777: LD_VAR 0 4
29781: ARRAY
29782: PPUSH
29783: CALL_OW 266
29787: PUSH
29788: LD_VAR 0 3
29792: PUSH
29793: LD_VAR 0 4
29797: ARRAY
29798: PPUSH
29799: CALL_OW 250
29803: PUSH
29804: LD_VAR 0 3
29808: PUSH
29809: LD_VAR 0 4
29813: ARRAY
29814: PPUSH
29815: CALL_OW 251
29819: PUSH
29820: LD_VAR 0 3
29824: PUSH
29825: LD_VAR 0 4
29829: ARRAY
29830: PPUSH
29831: CALL_OW 254
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: PUSH
29842: EMPTY
29843: LIST
29844: ADD
29845: ST_TO_ADDR
29846: GO 29759
29848: POP
29849: POP
// result := list ;
29850: LD_ADDR_VAR 0 2
29854: PUSH
29855: LD_VAR 0 5
29859: ST_TO_ADDR
// end ;
29860: LD_VAR 0 2
29864: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29865: LD_INT 0
29867: PPUSH
29868: PPUSH
29869: PPUSH
29870: PPUSH
29871: PPUSH
29872: PPUSH
29873: PPUSH
// if not factory then
29874: LD_VAR 0 1
29878: NOT
29879: IFFALSE 29883
// exit ;
29881: GO 30476
// if control = control_apeman then
29883: LD_VAR 0 4
29887: PUSH
29888: LD_INT 5
29890: EQUAL
29891: IFFALSE 30000
// begin tmp := UnitsInside ( factory ) ;
29893: LD_ADDR_VAR 0 8
29897: PUSH
29898: LD_VAR 0 1
29902: PPUSH
29903: CALL_OW 313
29907: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29908: LD_VAR 0 8
29912: PPUSH
29913: LD_INT 25
29915: PUSH
29916: LD_INT 12
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PPUSH
29923: CALL_OW 72
29927: NOT
29928: IFFALSE 29938
// control := control_manual ;
29930: LD_ADDR_VAR 0 4
29934: PUSH
29935: LD_INT 1
29937: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29938: LD_ADDR_VAR 0 8
29942: PUSH
29943: LD_VAR 0 1
29947: PPUSH
29948: CALL 29635 0 1
29952: ST_TO_ADDR
// if tmp then
29953: LD_VAR 0 8
29957: IFFALSE 30000
// begin for i in tmp do
29959: LD_ADDR_VAR 0 7
29963: PUSH
29964: LD_VAR 0 8
29968: PUSH
29969: FOR_IN
29970: IFFALSE 29998
// if i [ 1 ] = b_ext_radio then
29972: LD_VAR 0 7
29976: PUSH
29977: LD_INT 1
29979: ARRAY
29980: PUSH
29981: LD_INT 22
29983: EQUAL
29984: IFFALSE 29996
// begin control := control_remote ;
29986: LD_ADDR_VAR 0 4
29990: PUSH
29991: LD_INT 2
29993: ST_TO_ADDR
// break ;
29994: GO 29998
// end ;
29996: GO 29969
29998: POP
29999: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30000: LD_VAR 0 1
30004: PPUSH
30005: LD_VAR 0 2
30009: PPUSH
30010: LD_VAR 0 3
30014: PPUSH
30015: LD_VAR 0 4
30019: PPUSH
30020: LD_VAR 0 5
30024: PPUSH
30025: CALL_OW 448
30029: IFFALSE 30064
// begin result := [ chassis , engine , control , weapon ] ;
30031: LD_ADDR_VAR 0 6
30035: PUSH
30036: LD_VAR 0 2
30040: PUSH
30041: LD_VAR 0 3
30045: PUSH
30046: LD_VAR 0 4
30050: PUSH
30051: LD_VAR 0 5
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: ST_TO_ADDR
// exit ;
30062: GO 30476
// end ; _chassis := AvailableChassisList ( factory ) ;
30064: LD_ADDR_VAR 0 9
30068: PUSH
30069: LD_VAR 0 1
30073: PPUSH
30074: CALL_OW 475
30078: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30079: LD_ADDR_VAR 0 11
30083: PUSH
30084: LD_VAR 0 1
30088: PPUSH
30089: CALL_OW 476
30093: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30094: LD_ADDR_VAR 0 12
30098: PUSH
30099: LD_VAR 0 1
30103: PPUSH
30104: CALL_OW 477
30108: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30109: LD_ADDR_VAR 0 10
30113: PUSH
30114: LD_VAR 0 1
30118: PPUSH
30119: CALL_OW 478
30123: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30124: LD_VAR 0 9
30128: NOT
30129: PUSH
30130: LD_VAR 0 11
30134: NOT
30135: OR
30136: PUSH
30137: LD_VAR 0 12
30141: NOT
30142: OR
30143: PUSH
30144: LD_VAR 0 10
30148: NOT
30149: OR
30150: IFFALSE 30185
// begin result := [ chassis , engine , control , weapon ] ;
30152: LD_ADDR_VAR 0 6
30156: PUSH
30157: LD_VAR 0 2
30161: PUSH
30162: LD_VAR 0 3
30166: PUSH
30167: LD_VAR 0 4
30171: PUSH
30172: LD_VAR 0 5
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: ST_TO_ADDR
// exit ;
30183: GO 30476
// end ; if not chassis in _chassis then
30185: LD_VAR 0 2
30189: PUSH
30190: LD_VAR 0 9
30194: IN
30195: NOT
30196: IFFALSE 30222
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30198: LD_ADDR_VAR 0 2
30202: PUSH
30203: LD_VAR 0 9
30207: PUSH
30208: LD_INT 1
30210: PPUSH
30211: LD_VAR 0 9
30215: PPUSH
30216: CALL_OW 12
30220: ARRAY
30221: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30222: LD_VAR 0 2
30226: PPUSH
30227: LD_VAR 0 3
30231: PPUSH
30232: CALL 30481 0 2
30236: NOT
30237: IFFALSE 30296
// repeat engine := _engine [ 1 ] ;
30239: LD_ADDR_VAR 0 3
30243: PUSH
30244: LD_VAR 0 11
30248: PUSH
30249: LD_INT 1
30251: ARRAY
30252: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30253: LD_ADDR_VAR 0 11
30257: PUSH
30258: LD_VAR 0 11
30262: PPUSH
30263: LD_INT 1
30265: PPUSH
30266: CALL_OW 3
30270: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30271: LD_VAR 0 2
30275: PPUSH
30276: LD_VAR 0 3
30280: PPUSH
30281: CALL 30481 0 2
30285: PUSH
30286: LD_VAR 0 11
30290: PUSH
30291: EMPTY
30292: EQUAL
30293: OR
30294: IFFALSE 30239
// if not control in _control then
30296: LD_VAR 0 4
30300: PUSH
30301: LD_VAR 0 12
30305: IN
30306: NOT
30307: IFFALSE 30333
// control := _control [ rand ( 1 , _control ) ] ;
30309: LD_ADDR_VAR 0 4
30313: PUSH
30314: LD_VAR 0 12
30318: PUSH
30319: LD_INT 1
30321: PPUSH
30322: LD_VAR 0 12
30326: PPUSH
30327: CALL_OW 12
30331: ARRAY
30332: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30333: LD_VAR 0 2
30337: PPUSH
30338: LD_VAR 0 5
30342: PPUSH
30343: CALL 30701 0 2
30347: NOT
30348: IFFALSE 30407
// repeat weapon := _weapon [ 1 ] ;
30350: LD_ADDR_VAR 0 5
30354: PUSH
30355: LD_VAR 0 10
30359: PUSH
30360: LD_INT 1
30362: ARRAY
30363: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30364: LD_ADDR_VAR 0 10
30368: PUSH
30369: LD_VAR 0 10
30373: PPUSH
30374: LD_INT 1
30376: PPUSH
30377: CALL_OW 3
30381: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30382: LD_VAR 0 2
30386: PPUSH
30387: LD_VAR 0 5
30391: PPUSH
30392: CALL 30701 0 2
30396: PUSH
30397: LD_VAR 0 10
30401: PUSH
30402: EMPTY
30403: EQUAL
30404: OR
30405: IFFALSE 30350
// result := [ ] ;
30407: LD_ADDR_VAR 0 6
30411: PUSH
30412: EMPTY
30413: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30414: LD_VAR 0 1
30418: PPUSH
30419: LD_VAR 0 2
30423: PPUSH
30424: LD_VAR 0 3
30428: PPUSH
30429: LD_VAR 0 4
30433: PPUSH
30434: LD_VAR 0 5
30438: PPUSH
30439: CALL_OW 448
30443: IFFALSE 30476
// result := [ chassis , engine , control , weapon ] ;
30445: LD_ADDR_VAR 0 6
30449: PUSH
30450: LD_VAR 0 2
30454: PUSH
30455: LD_VAR 0 3
30459: PUSH
30460: LD_VAR 0 4
30464: PUSH
30465: LD_VAR 0 5
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: ST_TO_ADDR
// end ;
30476: LD_VAR 0 6
30480: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30481: LD_INT 0
30483: PPUSH
// if not chassis or not engine then
30484: LD_VAR 0 1
30488: NOT
30489: PUSH
30490: LD_VAR 0 2
30494: NOT
30495: OR
30496: IFFALSE 30500
// exit ;
30498: GO 30696
// case engine of engine_solar :
30500: LD_VAR 0 2
30504: PUSH
30505: LD_INT 2
30507: DOUBLE
30508: EQUAL
30509: IFTRUE 30513
30511: GO 30551
30513: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30514: LD_ADDR_VAR 0 3
30518: PUSH
30519: LD_INT 11
30521: PUSH
30522: LD_INT 12
30524: PUSH
30525: LD_INT 13
30527: PUSH
30528: LD_INT 14
30530: PUSH
30531: LD_INT 1
30533: PUSH
30534: LD_INT 2
30536: PUSH
30537: LD_INT 3
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: ST_TO_ADDR
30549: GO 30680
30551: LD_INT 1
30553: DOUBLE
30554: EQUAL
30555: IFTRUE 30559
30557: GO 30621
30559: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30560: LD_ADDR_VAR 0 3
30564: PUSH
30565: LD_INT 11
30567: PUSH
30568: LD_INT 12
30570: PUSH
30571: LD_INT 13
30573: PUSH
30574: LD_INT 14
30576: PUSH
30577: LD_INT 1
30579: PUSH
30580: LD_INT 2
30582: PUSH
30583: LD_INT 3
30585: PUSH
30586: LD_INT 4
30588: PUSH
30589: LD_INT 5
30591: PUSH
30592: LD_INT 21
30594: PUSH
30595: LD_INT 23
30597: PUSH
30598: LD_INT 22
30600: PUSH
30601: LD_INT 24
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: ST_TO_ADDR
30619: GO 30680
30621: LD_INT 3
30623: DOUBLE
30624: EQUAL
30625: IFTRUE 30629
30627: GO 30679
30629: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30630: LD_ADDR_VAR 0 3
30634: PUSH
30635: LD_INT 13
30637: PUSH
30638: LD_INT 14
30640: PUSH
30641: LD_INT 2
30643: PUSH
30644: LD_INT 3
30646: PUSH
30647: LD_INT 4
30649: PUSH
30650: LD_INT 5
30652: PUSH
30653: LD_INT 21
30655: PUSH
30656: LD_INT 22
30658: PUSH
30659: LD_INT 23
30661: PUSH
30662: LD_INT 24
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: ST_TO_ADDR
30677: GO 30680
30679: POP
// result := ( chassis in result ) ;
30680: LD_ADDR_VAR 0 3
30684: PUSH
30685: LD_VAR 0 1
30689: PUSH
30690: LD_VAR 0 3
30694: IN
30695: ST_TO_ADDR
// end ;
30696: LD_VAR 0 3
30700: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30701: LD_INT 0
30703: PPUSH
// if not chassis or not weapon then
30704: LD_VAR 0 1
30708: NOT
30709: PUSH
30710: LD_VAR 0 2
30714: NOT
30715: OR
30716: IFFALSE 30720
// exit ;
30718: GO 31780
// case weapon of us_machine_gun :
30720: LD_VAR 0 2
30724: PUSH
30725: LD_INT 2
30727: DOUBLE
30728: EQUAL
30729: IFTRUE 30733
30731: GO 30763
30733: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30734: LD_ADDR_VAR 0 3
30738: PUSH
30739: LD_INT 1
30741: PUSH
30742: LD_INT 2
30744: PUSH
30745: LD_INT 3
30747: PUSH
30748: LD_INT 4
30750: PUSH
30751: LD_INT 5
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: ST_TO_ADDR
30761: GO 31764
30763: LD_INT 3
30765: DOUBLE
30766: EQUAL
30767: IFTRUE 30771
30769: GO 30801
30771: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30772: LD_ADDR_VAR 0 3
30776: PUSH
30777: LD_INT 1
30779: PUSH
30780: LD_INT 2
30782: PUSH
30783: LD_INT 3
30785: PUSH
30786: LD_INT 4
30788: PUSH
30789: LD_INT 5
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: ST_TO_ADDR
30799: GO 31764
30801: LD_INT 11
30803: DOUBLE
30804: EQUAL
30805: IFTRUE 30809
30807: GO 30839
30809: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30810: LD_ADDR_VAR 0 3
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: LD_INT 3
30823: PUSH
30824: LD_INT 4
30826: PUSH
30827: LD_INT 5
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: ST_TO_ADDR
30837: GO 31764
30839: LD_INT 4
30841: DOUBLE
30842: EQUAL
30843: IFTRUE 30847
30845: GO 30873
30847: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30848: LD_ADDR_VAR 0 3
30852: PUSH
30853: LD_INT 2
30855: PUSH
30856: LD_INT 3
30858: PUSH
30859: LD_INT 4
30861: PUSH
30862: LD_INT 5
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: ST_TO_ADDR
30871: GO 31764
30873: LD_INT 5
30875: DOUBLE
30876: EQUAL
30877: IFTRUE 30881
30879: GO 30907
30881: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30882: LD_ADDR_VAR 0 3
30886: PUSH
30887: LD_INT 2
30889: PUSH
30890: LD_INT 3
30892: PUSH
30893: LD_INT 4
30895: PUSH
30896: LD_INT 5
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: ST_TO_ADDR
30905: GO 31764
30907: LD_INT 9
30909: DOUBLE
30910: EQUAL
30911: IFTRUE 30915
30913: GO 30941
30915: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30916: LD_ADDR_VAR 0 3
30920: PUSH
30921: LD_INT 2
30923: PUSH
30924: LD_INT 3
30926: PUSH
30927: LD_INT 4
30929: PUSH
30930: LD_INT 5
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: ST_TO_ADDR
30939: GO 31764
30941: LD_INT 7
30943: DOUBLE
30944: EQUAL
30945: IFTRUE 30949
30947: GO 30975
30949: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30950: LD_ADDR_VAR 0 3
30954: PUSH
30955: LD_INT 2
30957: PUSH
30958: LD_INT 3
30960: PUSH
30961: LD_INT 4
30963: PUSH
30964: LD_INT 5
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: ST_TO_ADDR
30973: GO 31764
30975: LD_INT 12
30977: DOUBLE
30978: EQUAL
30979: IFTRUE 30983
30981: GO 31009
30983: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30984: LD_ADDR_VAR 0 3
30988: PUSH
30989: LD_INT 2
30991: PUSH
30992: LD_INT 3
30994: PUSH
30995: LD_INT 4
30997: PUSH
30998: LD_INT 5
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: ST_TO_ADDR
31007: GO 31764
31009: LD_INT 13
31011: DOUBLE
31012: EQUAL
31013: IFTRUE 31017
31015: GO 31043
31017: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31018: LD_ADDR_VAR 0 3
31022: PUSH
31023: LD_INT 2
31025: PUSH
31026: LD_INT 3
31028: PUSH
31029: LD_INT 4
31031: PUSH
31032: LD_INT 5
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: ST_TO_ADDR
31041: GO 31764
31043: LD_INT 14
31045: DOUBLE
31046: EQUAL
31047: IFTRUE 31051
31049: GO 31069
31051: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31052: LD_ADDR_VAR 0 3
31056: PUSH
31057: LD_INT 4
31059: PUSH
31060: LD_INT 5
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: ST_TO_ADDR
31067: GO 31764
31069: LD_INT 6
31071: DOUBLE
31072: EQUAL
31073: IFTRUE 31077
31075: GO 31095
31077: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31078: LD_ADDR_VAR 0 3
31082: PUSH
31083: LD_INT 4
31085: PUSH
31086: LD_INT 5
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: ST_TO_ADDR
31093: GO 31764
31095: LD_INT 10
31097: DOUBLE
31098: EQUAL
31099: IFTRUE 31103
31101: GO 31121
31103: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31104: LD_ADDR_VAR 0 3
31108: PUSH
31109: LD_INT 4
31111: PUSH
31112: LD_INT 5
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: ST_TO_ADDR
31119: GO 31764
31121: LD_INT 22
31123: DOUBLE
31124: EQUAL
31125: IFTRUE 31129
31127: GO 31155
31129: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31130: LD_ADDR_VAR 0 3
31134: PUSH
31135: LD_INT 11
31137: PUSH
31138: LD_INT 12
31140: PUSH
31141: LD_INT 13
31143: PUSH
31144: LD_INT 14
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: ST_TO_ADDR
31153: GO 31764
31155: LD_INT 23
31157: DOUBLE
31158: EQUAL
31159: IFTRUE 31163
31161: GO 31189
31163: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31164: LD_ADDR_VAR 0 3
31168: PUSH
31169: LD_INT 11
31171: PUSH
31172: LD_INT 12
31174: PUSH
31175: LD_INT 13
31177: PUSH
31178: LD_INT 14
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: ST_TO_ADDR
31187: GO 31764
31189: LD_INT 24
31191: DOUBLE
31192: EQUAL
31193: IFTRUE 31197
31195: GO 31223
31197: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31198: LD_ADDR_VAR 0 3
31202: PUSH
31203: LD_INT 11
31205: PUSH
31206: LD_INT 12
31208: PUSH
31209: LD_INT 13
31211: PUSH
31212: LD_INT 14
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: ST_TO_ADDR
31221: GO 31764
31223: LD_INT 30
31225: DOUBLE
31226: EQUAL
31227: IFTRUE 31231
31229: GO 31257
31231: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31232: LD_ADDR_VAR 0 3
31236: PUSH
31237: LD_INT 11
31239: PUSH
31240: LD_INT 12
31242: PUSH
31243: LD_INT 13
31245: PUSH
31246: LD_INT 14
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: ST_TO_ADDR
31255: GO 31764
31257: LD_INT 25
31259: DOUBLE
31260: EQUAL
31261: IFTRUE 31265
31263: GO 31283
31265: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31266: LD_ADDR_VAR 0 3
31270: PUSH
31271: LD_INT 13
31273: PUSH
31274: LD_INT 14
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: ST_TO_ADDR
31281: GO 31764
31283: LD_INT 27
31285: DOUBLE
31286: EQUAL
31287: IFTRUE 31291
31289: GO 31309
31291: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31292: LD_ADDR_VAR 0 3
31296: PUSH
31297: LD_INT 13
31299: PUSH
31300: LD_INT 14
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: ST_TO_ADDR
31307: GO 31764
31309: LD_INT 92
31311: DOUBLE
31312: EQUAL
31313: IFTRUE 31317
31315: GO 31343
31317: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31318: LD_ADDR_VAR 0 3
31322: PUSH
31323: LD_INT 11
31325: PUSH
31326: LD_INT 12
31328: PUSH
31329: LD_INT 13
31331: PUSH
31332: LD_INT 14
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: ST_TO_ADDR
31341: GO 31764
31343: LD_INT 28
31345: DOUBLE
31346: EQUAL
31347: IFTRUE 31351
31349: GO 31369
31351: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31352: LD_ADDR_VAR 0 3
31356: PUSH
31357: LD_INT 13
31359: PUSH
31360: LD_INT 14
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: ST_TO_ADDR
31367: GO 31764
31369: LD_INT 29
31371: DOUBLE
31372: EQUAL
31373: IFTRUE 31377
31375: GO 31395
31377: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31378: LD_ADDR_VAR 0 3
31382: PUSH
31383: LD_INT 13
31385: PUSH
31386: LD_INT 14
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: ST_TO_ADDR
31393: GO 31764
31395: LD_INT 31
31397: DOUBLE
31398: EQUAL
31399: IFTRUE 31403
31401: GO 31421
31403: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31404: LD_ADDR_VAR 0 3
31408: PUSH
31409: LD_INT 13
31411: PUSH
31412: LD_INT 14
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: ST_TO_ADDR
31419: GO 31764
31421: LD_INT 26
31423: DOUBLE
31424: EQUAL
31425: IFTRUE 31429
31427: GO 31447
31429: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31430: LD_ADDR_VAR 0 3
31434: PUSH
31435: LD_INT 13
31437: PUSH
31438: LD_INT 14
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: ST_TO_ADDR
31445: GO 31764
31447: LD_INT 42
31449: DOUBLE
31450: EQUAL
31451: IFTRUE 31455
31453: GO 31481
31455: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31456: LD_ADDR_VAR 0 3
31460: PUSH
31461: LD_INT 21
31463: PUSH
31464: LD_INT 22
31466: PUSH
31467: LD_INT 23
31469: PUSH
31470: LD_INT 24
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: ST_TO_ADDR
31479: GO 31764
31481: LD_INT 43
31483: DOUBLE
31484: EQUAL
31485: IFTRUE 31489
31487: GO 31515
31489: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31490: LD_ADDR_VAR 0 3
31494: PUSH
31495: LD_INT 21
31497: PUSH
31498: LD_INT 22
31500: PUSH
31501: LD_INT 23
31503: PUSH
31504: LD_INT 24
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: ST_TO_ADDR
31513: GO 31764
31515: LD_INT 44
31517: DOUBLE
31518: EQUAL
31519: IFTRUE 31523
31521: GO 31549
31523: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31524: LD_ADDR_VAR 0 3
31528: PUSH
31529: LD_INT 21
31531: PUSH
31532: LD_INT 22
31534: PUSH
31535: LD_INT 23
31537: PUSH
31538: LD_INT 24
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: ST_TO_ADDR
31547: GO 31764
31549: LD_INT 45
31551: DOUBLE
31552: EQUAL
31553: IFTRUE 31557
31555: GO 31583
31557: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31558: LD_ADDR_VAR 0 3
31562: PUSH
31563: LD_INT 21
31565: PUSH
31566: LD_INT 22
31568: PUSH
31569: LD_INT 23
31571: PUSH
31572: LD_INT 24
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: ST_TO_ADDR
31581: GO 31764
31583: LD_INT 49
31585: DOUBLE
31586: EQUAL
31587: IFTRUE 31591
31589: GO 31617
31591: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31592: LD_ADDR_VAR 0 3
31596: PUSH
31597: LD_INT 21
31599: PUSH
31600: LD_INT 22
31602: PUSH
31603: LD_INT 23
31605: PUSH
31606: LD_INT 24
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: ST_TO_ADDR
31615: GO 31764
31617: LD_INT 51
31619: DOUBLE
31620: EQUAL
31621: IFTRUE 31625
31623: GO 31651
31625: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31626: LD_ADDR_VAR 0 3
31630: PUSH
31631: LD_INT 21
31633: PUSH
31634: LD_INT 22
31636: PUSH
31637: LD_INT 23
31639: PUSH
31640: LD_INT 24
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: ST_TO_ADDR
31649: GO 31764
31651: LD_INT 52
31653: DOUBLE
31654: EQUAL
31655: IFTRUE 31659
31657: GO 31685
31659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31660: LD_ADDR_VAR 0 3
31664: PUSH
31665: LD_INT 21
31667: PUSH
31668: LD_INT 22
31670: PUSH
31671: LD_INT 23
31673: PUSH
31674: LD_INT 24
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: ST_TO_ADDR
31683: GO 31764
31685: LD_INT 53
31687: DOUBLE
31688: EQUAL
31689: IFTRUE 31693
31691: GO 31711
31693: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31694: LD_ADDR_VAR 0 3
31698: PUSH
31699: LD_INT 23
31701: PUSH
31702: LD_INT 24
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: ST_TO_ADDR
31709: GO 31764
31711: LD_INT 46
31713: DOUBLE
31714: EQUAL
31715: IFTRUE 31719
31717: GO 31737
31719: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31720: LD_ADDR_VAR 0 3
31724: PUSH
31725: LD_INT 23
31727: PUSH
31728: LD_INT 24
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: ST_TO_ADDR
31735: GO 31764
31737: LD_INT 47
31739: DOUBLE
31740: EQUAL
31741: IFTRUE 31745
31743: GO 31763
31745: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31746: LD_ADDR_VAR 0 3
31750: PUSH
31751: LD_INT 23
31753: PUSH
31754: LD_INT 24
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: ST_TO_ADDR
31761: GO 31764
31763: POP
// result := ( chassis in result ) ;
31764: LD_ADDR_VAR 0 3
31768: PUSH
31769: LD_VAR 0 1
31773: PUSH
31774: LD_VAR 0 3
31778: IN
31779: ST_TO_ADDR
// end ;
31780: LD_VAR 0 3
31784: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31785: LD_INT 0
31787: PPUSH
31788: PPUSH
31789: PPUSH
31790: PPUSH
31791: PPUSH
31792: PPUSH
31793: PPUSH
// result := array ;
31794: LD_ADDR_VAR 0 5
31798: PUSH
31799: LD_VAR 0 1
31803: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31804: LD_VAR 0 1
31808: NOT
31809: PUSH
31810: LD_VAR 0 2
31814: NOT
31815: OR
31816: PUSH
31817: LD_VAR 0 3
31821: NOT
31822: OR
31823: PUSH
31824: LD_VAR 0 2
31828: PUSH
31829: LD_VAR 0 1
31833: GREATER
31834: OR
31835: PUSH
31836: LD_VAR 0 3
31840: PUSH
31841: LD_VAR 0 1
31845: GREATER
31846: OR
31847: IFFALSE 31851
// exit ;
31849: GO 32147
// if direction then
31851: LD_VAR 0 4
31855: IFFALSE 31919
// begin d := 1 ;
31857: LD_ADDR_VAR 0 9
31861: PUSH
31862: LD_INT 1
31864: ST_TO_ADDR
// if i_from > i_to then
31865: LD_VAR 0 2
31869: PUSH
31870: LD_VAR 0 3
31874: GREATER
31875: IFFALSE 31901
// length := ( array - i_from ) + i_to else
31877: LD_ADDR_VAR 0 11
31881: PUSH
31882: LD_VAR 0 1
31886: PUSH
31887: LD_VAR 0 2
31891: MINUS
31892: PUSH
31893: LD_VAR 0 3
31897: PLUS
31898: ST_TO_ADDR
31899: GO 31917
// length := i_to - i_from ;
31901: LD_ADDR_VAR 0 11
31905: PUSH
31906: LD_VAR 0 3
31910: PUSH
31911: LD_VAR 0 2
31915: MINUS
31916: ST_TO_ADDR
// end else
31917: GO 31980
// begin d := - 1 ;
31919: LD_ADDR_VAR 0 9
31923: PUSH
31924: LD_INT 1
31926: NEG
31927: ST_TO_ADDR
// if i_from > i_to then
31928: LD_VAR 0 2
31932: PUSH
31933: LD_VAR 0 3
31937: GREATER
31938: IFFALSE 31958
// length := i_from - i_to else
31940: LD_ADDR_VAR 0 11
31944: PUSH
31945: LD_VAR 0 2
31949: PUSH
31950: LD_VAR 0 3
31954: MINUS
31955: ST_TO_ADDR
31956: GO 31980
// length := ( array - i_to ) + i_from ;
31958: LD_ADDR_VAR 0 11
31962: PUSH
31963: LD_VAR 0 1
31967: PUSH
31968: LD_VAR 0 3
31972: MINUS
31973: PUSH
31974: LD_VAR 0 2
31978: PLUS
31979: ST_TO_ADDR
// end ; if not length then
31980: LD_VAR 0 11
31984: NOT
31985: IFFALSE 31989
// exit ;
31987: GO 32147
// tmp := array ;
31989: LD_ADDR_VAR 0 10
31993: PUSH
31994: LD_VAR 0 1
31998: ST_TO_ADDR
// for i = 1 to length do
31999: LD_ADDR_VAR 0 6
32003: PUSH
32004: DOUBLE
32005: LD_INT 1
32007: DEC
32008: ST_TO_ADDR
32009: LD_VAR 0 11
32013: PUSH
32014: FOR_TO
32015: IFFALSE 32135
// begin for j = 1 to array do
32017: LD_ADDR_VAR 0 7
32021: PUSH
32022: DOUBLE
32023: LD_INT 1
32025: DEC
32026: ST_TO_ADDR
32027: LD_VAR 0 1
32031: PUSH
32032: FOR_TO
32033: IFFALSE 32121
// begin k := j + d ;
32035: LD_ADDR_VAR 0 8
32039: PUSH
32040: LD_VAR 0 7
32044: PUSH
32045: LD_VAR 0 9
32049: PLUS
32050: ST_TO_ADDR
// if k > array then
32051: LD_VAR 0 8
32055: PUSH
32056: LD_VAR 0 1
32060: GREATER
32061: IFFALSE 32071
// k := 1 ;
32063: LD_ADDR_VAR 0 8
32067: PUSH
32068: LD_INT 1
32070: ST_TO_ADDR
// if not k then
32071: LD_VAR 0 8
32075: NOT
32076: IFFALSE 32088
// k := array ;
32078: LD_ADDR_VAR 0 8
32082: PUSH
32083: LD_VAR 0 1
32087: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32088: LD_ADDR_VAR 0 10
32092: PUSH
32093: LD_VAR 0 10
32097: PPUSH
32098: LD_VAR 0 8
32102: PPUSH
32103: LD_VAR 0 1
32107: PUSH
32108: LD_VAR 0 7
32112: ARRAY
32113: PPUSH
32114: CALL_OW 1
32118: ST_TO_ADDR
// end ;
32119: GO 32032
32121: POP
32122: POP
// array := tmp ;
32123: LD_ADDR_VAR 0 1
32127: PUSH
32128: LD_VAR 0 10
32132: ST_TO_ADDR
// end ;
32133: GO 32014
32135: POP
32136: POP
// result := array ;
32137: LD_ADDR_VAR 0 5
32141: PUSH
32142: LD_VAR 0 1
32146: ST_TO_ADDR
// end ;
32147: LD_VAR 0 5
32151: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32152: LD_INT 0
32154: PPUSH
32155: PPUSH
// result := 0 ;
32156: LD_ADDR_VAR 0 3
32160: PUSH
32161: LD_INT 0
32163: ST_TO_ADDR
// if not array or not value in array then
32164: LD_VAR 0 1
32168: NOT
32169: PUSH
32170: LD_VAR 0 2
32174: PUSH
32175: LD_VAR 0 1
32179: IN
32180: NOT
32181: OR
32182: IFFALSE 32186
// exit ;
32184: GO 32240
// for i = 1 to array do
32186: LD_ADDR_VAR 0 4
32190: PUSH
32191: DOUBLE
32192: LD_INT 1
32194: DEC
32195: ST_TO_ADDR
32196: LD_VAR 0 1
32200: PUSH
32201: FOR_TO
32202: IFFALSE 32238
// if value = array [ i ] then
32204: LD_VAR 0 2
32208: PUSH
32209: LD_VAR 0 1
32213: PUSH
32214: LD_VAR 0 4
32218: ARRAY
32219: EQUAL
32220: IFFALSE 32236
// begin result := i ;
32222: LD_ADDR_VAR 0 3
32226: PUSH
32227: LD_VAR 0 4
32231: ST_TO_ADDR
// exit ;
32232: POP
32233: POP
32234: GO 32240
// end ;
32236: GO 32201
32238: POP
32239: POP
// end ;
32240: LD_VAR 0 3
32244: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32245: LD_INT 0
32247: PPUSH
// vc_chassis := chassis ;
32248: LD_ADDR_OWVAR 37
32252: PUSH
32253: LD_VAR 0 1
32257: ST_TO_ADDR
// vc_engine := engine ;
32258: LD_ADDR_OWVAR 39
32262: PUSH
32263: LD_VAR 0 2
32267: ST_TO_ADDR
// vc_control := control ;
32268: LD_ADDR_OWVAR 38
32272: PUSH
32273: LD_VAR 0 3
32277: ST_TO_ADDR
// vc_weapon := weapon ;
32278: LD_ADDR_OWVAR 40
32282: PUSH
32283: LD_VAR 0 4
32287: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32288: LD_ADDR_OWVAR 41
32292: PUSH
32293: LD_VAR 0 5
32297: ST_TO_ADDR
// end ;
32298: LD_VAR 0 6
32302: RET
// export function WantPlant ( unit ) ; var task ; begin
32303: LD_INT 0
32305: PPUSH
32306: PPUSH
// result := false ;
32307: LD_ADDR_VAR 0 2
32311: PUSH
32312: LD_INT 0
32314: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32315: LD_ADDR_VAR 0 3
32319: PUSH
32320: LD_VAR 0 1
32324: PPUSH
32325: CALL_OW 437
32329: ST_TO_ADDR
// if task then
32330: LD_VAR 0 3
32334: IFFALSE 32362
// if task [ 1 ] [ 1 ] = p then
32336: LD_VAR 0 3
32340: PUSH
32341: LD_INT 1
32343: ARRAY
32344: PUSH
32345: LD_INT 1
32347: ARRAY
32348: PUSH
32349: LD_STRING p
32351: EQUAL
32352: IFFALSE 32362
// result := true ;
32354: LD_ADDR_VAR 0 2
32358: PUSH
32359: LD_INT 1
32361: ST_TO_ADDR
// end ;
32362: LD_VAR 0 2
32366: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32367: LD_INT 0
32369: PPUSH
32370: PPUSH
32371: PPUSH
32372: PPUSH
// if pos < 1 then
32373: LD_VAR 0 2
32377: PUSH
32378: LD_INT 1
32380: LESS
32381: IFFALSE 32385
// exit ;
32383: GO 32688
// if pos = 1 then
32385: LD_VAR 0 2
32389: PUSH
32390: LD_INT 1
32392: EQUAL
32393: IFFALSE 32426
// result := Replace ( arr , pos [ 1 ] , value ) else
32395: LD_ADDR_VAR 0 4
32399: PUSH
32400: LD_VAR 0 1
32404: PPUSH
32405: LD_VAR 0 2
32409: PUSH
32410: LD_INT 1
32412: ARRAY
32413: PPUSH
32414: LD_VAR 0 3
32418: PPUSH
32419: CALL_OW 1
32423: ST_TO_ADDR
32424: GO 32688
// begin tmp := arr ;
32426: LD_ADDR_VAR 0 6
32430: PUSH
32431: LD_VAR 0 1
32435: ST_TO_ADDR
// s_arr := [ tmp ] ;
32436: LD_ADDR_VAR 0 7
32440: PUSH
32441: LD_VAR 0 6
32445: PUSH
32446: EMPTY
32447: LIST
32448: ST_TO_ADDR
// for i = 1 to pos - 1 do
32449: LD_ADDR_VAR 0 5
32453: PUSH
32454: DOUBLE
32455: LD_INT 1
32457: DEC
32458: ST_TO_ADDR
32459: LD_VAR 0 2
32463: PUSH
32464: LD_INT 1
32466: MINUS
32467: PUSH
32468: FOR_TO
32469: IFFALSE 32514
// begin tmp := tmp [ pos [ i ] ] ;
32471: LD_ADDR_VAR 0 6
32475: PUSH
32476: LD_VAR 0 6
32480: PUSH
32481: LD_VAR 0 2
32485: PUSH
32486: LD_VAR 0 5
32490: ARRAY
32491: ARRAY
32492: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32493: LD_ADDR_VAR 0 7
32497: PUSH
32498: LD_VAR 0 7
32502: PUSH
32503: LD_VAR 0 6
32507: PUSH
32508: EMPTY
32509: LIST
32510: ADD
32511: ST_TO_ADDR
// end ;
32512: GO 32468
32514: POP
32515: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32516: LD_ADDR_VAR 0 6
32520: PUSH
32521: LD_VAR 0 6
32525: PPUSH
32526: LD_VAR 0 2
32530: PUSH
32531: LD_VAR 0 2
32535: ARRAY
32536: PPUSH
32537: LD_VAR 0 3
32541: PPUSH
32542: CALL_OW 1
32546: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32547: LD_ADDR_VAR 0 7
32551: PUSH
32552: LD_VAR 0 7
32556: PPUSH
32557: LD_VAR 0 7
32561: PPUSH
32562: LD_VAR 0 6
32566: PPUSH
32567: CALL_OW 1
32571: ST_TO_ADDR
// for i = s_arr downto 2 do
32572: LD_ADDR_VAR 0 5
32576: PUSH
32577: DOUBLE
32578: LD_VAR 0 7
32582: INC
32583: ST_TO_ADDR
32584: LD_INT 2
32586: PUSH
32587: FOR_DOWNTO
32588: IFFALSE 32672
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32590: LD_ADDR_VAR 0 6
32594: PUSH
32595: LD_VAR 0 7
32599: PUSH
32600: LD_VAR 0 5
32604: PUSH
32605: LD_INT 1
32607: MINUS
32608: ARRAY
32609: PPUSH
32610: LD_VAR 0 2
32614: PUSH
32615: LD_VAR 0 5
32619: PUSH
32620: LD_INT 1
32622: MINUS
32623: ARRAY
32624: PPUSH
32625: LD_VAR 0 7
32629: PUSH
32630: LD_VAR 0 5
32634: ARRAY
32635: PPUSH
32636: CALL_OW 1
32640: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32641: LD_ADDR_VAR 0 7
32645: PUSH
32646: LD_VAR 0 7
32650: PPUSH
32651: LD_VAR 0 5
32655: PUSH
32656: LD_INT 1
32658: MINUS
32659: PPUSH
32660: LD_VAR 0 6
32664: PPUSH
32665: CALL_OW 1
32669: ST_TO_ADDR
// end ;
32670: GO 32587
32672: POP
32673: POP
// result := s_arr [ 1 ] ;
32674: LD_ADDR_VAR 0 4
32678: PUSH
32679: LD_VAR 0 7
32683: PUSH
32684: LD_INT 1
32686: ARRAY
32687: ST_TO_ADDR
// end ; end ;
32688: LD_VAR 0 4
32692: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32693: LD_INT 0
32695: PPUSH
32696: PPUSH
// if not list then
32697: LD_VAR 0 1
32701: NOT
32702: IFFALSE 32706
// exit ;
32704: GO 32797
// i := list [ pos1 ] ;
32706: LD_ADDR_VAR 0 5
32710: PUSH
32711: LD_VAR 0 1
32715: PUSH
32716: LD_VAR 0 2
32720: ARRAY
32721: ST_TO_ADDR
// if not i then
32722: LD_VAR 0 5
32726: NOT
32727: IFFALSE 32731
// exit ;
32729: GO 32797
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32731: LD_ADDR_VAR 0 1
32735: PUSH
32736: LD_VAR 0 1
32740: PPUSH
32741: LD_VAR 0 2
32745: PPUSH
32746: LD_VAR 0 1
32750: PUSH
32751: LD_VAR 0 3
32755: ARRAY
32756: PPUSH
32757: CALL_OW 1
32761: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32762: LD_ADDR_VAR 0 1
32766: PUSH
32767: LD_VAR 0 1
32771: PPUSH
32772: LD_VAR 0 3
32776: PPUSH
32777: LD_VAR 0 5
32781: PPUSH
32782: CALL_OW 1
32786: ST_TO_ADDR
// result := list ;
32787: LD_ADDR_VAR 0 4
32791: PUSH
32792: LD_VAR 0 1
32796: ST_TO_ADDR
// end ;
32797: LD_VAR 0 4
32801: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32802: LD_INT 0
32804: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32805: LD_ADDR_VAR 0 5
32809: PUSH
32810: LD_VAR 0 1
32814: PPUSH
32815: CALL_OW 250
32819: PPUSH
32820: LD_VAR 0 1
32824: PPUSH
32825: CALL_OW 251
32829: PPUSH
32830: LD_VAR 0 2
32834: PPUSH
32835: LD_VAR 0 3
32839: PPUSH
32840: LD_VAR 0 4
32844: PPUSH
32845: CALL 32855 0 5
32849: ST_TO_ADDR
// end ;
32850: LD_VAR 0 5
32854: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32855: LD_INT 0
32857: PPUSH
32858: PPUSH
32859: PPUSH
32860: PPUSH
// if not list then
32861: LD_VAR 0 3
32865: NOT
32866: IFFALSE 32870
// exit ;
32868: GO 33258
// result := [ ] ;
32870: LD_ADDR_VAR 0 6
32874: PUSH
32875: EMPTY
32876: ST_TO_ADDR
// for i in list do
32877: LD_ADDR_VAR 0 7
32881: PUSH
32882: LD_VAR 0 3
32886: PUSH
32887: FOR_IN
32888: IFFALSE 33090
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32890: LD_ADDR_VAR 0 9
32894: PUSH
32895: LD_VAR 0 7
32899: PPUSH
32900: LD_VAR 0 1
32904: PPUSH
32905: LD_VAR 0 2
32909: PPUSH
32910: CALL_OW 297
32914: ST_TO_ADDR
// if not result then
32915: LD_VAR 0 6
32919: NOT
32920: IFFALSE 32946
// result := [ [ i , tmp ] ] else
32922: LD_ADDR_VAR 0 6
32926: PUSH
32927: LD_VAR 0 7
32931: PUSH
32932: LD_VAR 0 9
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: EMPTY
32942: LIST
32943: ST_TO_ADDR
32944: GO 33088
// begin if result [ result ] [ 2 ] < tmp then
32946: LD_VAR 0 6
32950: PUSH
32951: LD_VAR 0 6
32955: ARRAY
32956: PUSH
32957: LD_INT 2
32959: ARRAY
32960: PUSH
32961: LD_VAR 0 9
32965: LESS
32966: IFFALSE 33008
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32968: LD_ADDR_VAR 0 6
32972: PUSH
32973: LD_VAR 0 6
32977: PPUSH
32978: LD_VAR 0 6
32982: PUSH
32983: LD_INT 1
32985: PLUS
32986: PPUSH
32987: LD_VAR 0 7
32991: PUSH
32992: LD_VAR 0 9
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PPUSH
33001: CALL_OW 2
33005: ST_TO_ADDR
33006: GO 33088
// for j = 1 to result do
33008: LD_ADDR_VAR 0 8
33012: PUSH
33013: DOUBLE
33014: LD_INT 1
33016: DEC
33017: ST_TO_ADDR
33018: LD_VAR 0 6
33022: PUSH
33023: FOR_TO
33024: IFFALSE 33086
// begin if tmp < result [ j ] [ 2 ] then
33026: LD_VAR 0 9
33030: PUSH
33031: LD_VAR 0 6
33035: PUSH
33036: LD_VAR 0 8
33040: ARRAY
33041: PUSH
33042: LD_INT 2
33044: ARRAY
33045: LESS
33046: IFFALSE 33084
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33048: LD_ADDR_VAR 0 6
33052: PUSH
33053: LD_VAR 0 6
33057: PPUSH
33058: LD_VAR 0 8
33062: PPUSH
33063: LD_VAR 0 7
33067: PUSH
33068: LD_VAR 0 9
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PPUSH
33077: CALL_OW 2
33081: ST_TO_ADDR
// break ;
33082: GO 33086
// end ; end ;
33084: GO 33023
33086: POP
33087: POP
// end ; end ;
33088: GO 32887
33090: POP
33091: POP
// if result and not asc then
33092: LD_VAR 0 6
33096: PUSH
33097: LD_VAR 0 4
33101: NOT
33102: AND
33103: IFFALSE 33178
// begin tmp := result ;
33105: LD_ADDR_VAR 0 9
33109: PUSH
33110: LD_VAR 0 6
33114: ST_TO_ADDR
// for i = tmp downto 1 do
33115: LD_ADDR_VAR 0 7
33119: PUSH
33120: DOUBLE
33121: LD_VAR 0 9
33125: INC
33126: ST_TO_ADDR
33127: LD_INT 1
33129: PUSH
33130: FOR_DOWNTO
33131: IFFALSE 33176
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33133: LD_ADDR_VAR 0 6
33137: PUSH
33138: LD_VAR 0 6
33142: PPUSH
33143: LD_VAR 0 9
33147: PUSH
33148: LD_VAR 0 7
33152: MINUS
33153: PUSH
33154: LD_INT 1
33156: PLUS
33157: PPUSH
33158: LD_VAR 0 9
33162: PUSH
33163: LD_VAR 0 7
33167: ARRAY
33168: PPUSH
33169: CALL_OW 1
33173: ST_TO_ADDR
33174: GO 33130
33176: POP
33177: POP
// end ; tmp := [ ] ;
33178: LD_ADDR_VAR 0 9
33182: PUSH
33183: EMPTY
33184: ST_TO_ADDR
// if mode then
33185: LD_VAR 0 5
33189: IFFALSE 33258
// begin for i = 1 to result do
33191: LD_ADDR_VAR 0 7
33195: PUSH
33196: DOUBLE
33197: LD_INT 1
33199: DEC
33200: ST_TO_ADDR
33201: LD_VAR 0 6
33205: PUSH
33206: FOR_TO
33207: IFFALSE 33246
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33209: LD_ADDR_VAR 0 9
33213: PUSH
33214: LD_VAR 0 9
33218: PPUSH
33219: LD_VAR 0 7
33223: PPUSH
33224: LD_VAR 0 6
33228: PUSH
33229: LD_VAR 0 7
33233: ARRAY
33234: PUSH
33235: LD_INT 1
33237: ARRAY
33238: PPUSH
33239: CALL_OW 1
33243: ST_TO_ADDR
33244: GO 33206
33246: POP
33247: POP
// result := tmp ;
33248: LD_ADDR_VAR 0 6
33252: PUSH
33253: LD_VAR 0 9
33257: ST_TO_ADDR
// end ; end ;
33258: LD_VAR 0 6
33262: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33263: LD_INT 0
33265: PPUSH
33266: PPUSH
33267: PPUSH
33268: PPUSH
33269: PPUSH
33270: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33271: LD_ADDR_VAR 0 5
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: LD_INT 0
33284: PUSH
33285: EMPTY
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: ST_TO_ADDR
// if not x or not y then
33293: LD_VAR 0 2
33297: NOT
33298: PUSH
33299: LD_VAR 0 3
33303: NOT
33304: OR
33305: IFFALSE 33309
// exit ;
33307: GO 34959
// if not range then
33309: LD_VAR 0 4
33313: NOT
33314: IFFALSE 33324
// range := 10 ;
33316: LD_ADDR_VAR 0 4
33320: PUSH
33321: LD_INT 10
33323: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33324: LD_ADDR_VAR 0 8
33328: PUSH
33329: LD_INT 81
33331: PUSH
33332: LD_VAR 0 1
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 92
33343: PUSH
33344: LD_VAR 0 2
33348: PUSH
33349: LD_VAR 0 3
33353: PUSH
33354: LD_VAR 0 4
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 3
33367: PUSH
33368: LD_INT 21
33370: PUSH
33371: LD_INT 3
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: LIST
33386: PPUSH
33387: CALL_OW 69
33391: ST_TO_ADDR
// if not tmp then
33392: LD_VAR 0 8
33396: NOT
33397: IFFALSE 33401
// exit ;
33399: GO 34959
// for i in tmp do
33401: LD_ADDR_VAR 0 6
33405: PUSH
33406: LD_VAR 0 8
33410: PUSH
33411: FOR_IN
33412: IFFALSE 34934
// begin points := [ 0 , 0 , 0 ] ;
33414: LD_ADDR_VAR 0 9
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: LD_INT 0
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: LIST
33432: ST_TO_ADDR
// bpoints := 1 ;
33433: LD_ADDR_VAR 0 10
33437: PUSH
33438: LD_INT 1
33440: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33441: LD_VAR 0 6
33445: PPUSH
33446: CALL_OW 247
33450: PUSH
33451: LD_INT 1
33453: DOUBLE
33454: EQUAL
33455: IFTRUE 33459
33457: GO 34037
33459: POP
// begin if GetClass ( i ) = 1 then
33460: LD_VAR 0 6
33464: PPUSH
33465: CALL_OW 257
33469: PUSH
33470: LD_INT 1
33472: EQUAL
33473: IFFALSE 33494
// points := [ 10 , 5 , 3 ] ;
33475: LD_ADDR_VAR 0 9
33479: PUSH
33480: LD_INT 10
33482: PUSH
33483: LD_INT 5
33485: PUSH
33486: LD_INT 3
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: LIST
33493: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33494: LD_VAR 0 6
33498: PPUSH
33499: CALL_OW 257
33503: PUSH
33504: LD_INT 2
33506: PUSH
33507: LD_INT 3
33509: PUSH
33510: LD_INT 4
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: LIST
33517: IN
33518: IFFALSE 33539
// points := [ 3 , 2 , 1 ] ;
33520: LD_ADDR_VAR 0 9
33524: PUSH
33525: LD_INT 3
33527: PUSH
33528: LD_INT 2
33530: PUSH
33531: LD_INT 1
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: LIST
33538: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33539: LD_VAR 0 6
33543: PPUSH
33544: CALL_OW 257
33548: PUSH
33549: LD_INT 5
33551: EQUAL
33552: IFFALSE 33573
// points := [ 130 , 5 , 2 ] ;
33554: LD_ADDR_VAR 0 9
33558: PUSH
33559: LD_INT 130
33561: PUSH
33562: LD_INT 5
33564: PUSH
33565: LD_INT 2
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: LIST
33572: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33573: LD_VAR 0 6
33577: PPUSH
33578: CALL_OW 257
33582: PUSH
33583: LD_INT 8
33585: EQUAL
33586: IFFALSE 33607
// points := [ 35 , 35 , 30 ] ;
33588: LD_ADDR_VAR 0 9
33592: PUSH
33593: LD_INT 35
33595: PUSH
33596: LD_INT 35
33598: PUSH
33599: LD_INT 30
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: LIST
33606: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33607: LD_VAR 0 6
33611: PPUSH
33612: CALL_OW 257
33616: PUSH
33617: LD_INT 9
33619: EQUAL
33620: IFFALSE 33641
// points := [ 20 , 55 , 40 ] ;
33622: LD_ADDR_VAR 0 9
33626: PUSH
33627: LD_INT 20
33629: PUSH
33630: LD_INT 55
33632: PUSH
33633: LD_INT 40
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: LIST
33640: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33641: LD_VAR 0 6
33645: PPUSH
33646: CALL_OW 257
33650: PUSH
33651: LD_INT 12
33653: PUSH
33654: LD_INT 16
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: IN
33661: IFFALSE 33682
// points := [ 5 , 3 , 2 ] ;
33663: LD_ADDR_VAR 0 9
33667: PUSH
33668: LD_INT 5
33670: PUSH
33671: LD_INT 3
33673: PUSH
33674: LD_INT 2
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: LIST
33681: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33682: LD_VAR 0 6
33686: PPUSH
33687: CALL_OW 257
33691: PUSH
33692: LD_INT 17
33694: EQUAL
33695: IFFALSE 33716
// points := [ 100 , 50 , 75 ] ;
33697: LD_ADDR_VAR 0 9
33701: PUSH
33702: LD_INT 100
33704: PUSH
33705: LD_INT 50
33707: PUSH
33708: LD_INT 75
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: LIST
33715: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33716: LD_VAR 0 6
33720: PPUSH
33721: CALL_OW 257
33725: PUSH
33726: LD_INT 15
33728: EQUAL
33729: IFFALSE 33750
// points := [ 10 , 5 , 3 ] ;
33731: LD_ADDR_VAR 0 9
33735: PUSH
33736: LD_INT 10
33738: PUSH
33739: LD_INT 5
33741: PUSH
33742: LD_INT 3
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33750: LD_VAR 0 6
33754: PPUSH
33755: CALL_OW 257
33759: PUSH
33760: LD_INT 14
33762: EQUAL
33763: IFFALSE 33784
// points := [ 10 , 0 , 0 ] ;
33765: LD_ADDR_VAR 0 9
33769: PUSH
33770: LD_INT 10
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: LIST
33783: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33784: LD_VAR 0 6
33788: PPUSH
33789: CALL_OW 257
33793: PUSH
33794: LD_INT 11
33796: EQUAL
33797: IFFALSE 33818
// points := [ 30 , 10 , 5 ] ;
33799: LD_ADDR_VAR 0 9
33803: PUSH
33804: LD_INT 30
33806: PUSH
33807: LD_INT 10
33809: PUSH
33810: LD_INT 5
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: LIST
33817: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33818: LD_VAR 0 1
33822: PPUSH
33823: LD_INT 5
33825: PPUSH
33826: CALL_OW 321
33830: PUSH
33831: LD_INT 2
33833: EQUAL
33834: IFFALSE 33851
// bpoints := bpoints * 1.8 ;
33836: LD_ADDR_VAR 0 10
33840: PUSH
33841: LD_VAR 0 10
33845: PUSH
33846: LD_REAL  1.80000000000000E+0000
33849: MUL
33850: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33851: LD_VAR 0 6
33855: PPUSH
33856: CALL_OW 257
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: LD_INT 3
33869: PUSH
33870: LD_INT 4
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: IN
33879: PUSH
33880: LD_VAR 0 1
33884: PPUSH
33885: LD_INT 51
33887: PPUSH
33888: CALL_OW 321
33892: PUSH
33893: LD_INT 2
33895: EQUAL
33896: AND
33897: IFFALSE 33914
// bpoints := bpoints * 1.2 ;
33899: LD_ADDR_VAR 0 10
33903: PUSH
33904: LD_VAR 0 10
33908: PUSH
33909: LD_REAL  1.20000000000000E+0000
33912: MUL
33913: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33914: LD_VAR 0 6
33918: PPUSH
33919: CALL_OW 257
33923: PUSH
33924: LD_INT 5
33926: PUSH
33927: LD_INT 7
33929: PUSH
33930: LD_INT 9
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: LIST
33937: IN
33938: PUSH
33939: LD_VAR 0 1
33943: PPUSH
33944: LD_INT 52
33946: PPUSH
33947: CALL_OW 321
33951: PUSH
33952: LD_INT 2
33954: EQUAL
33955: AND
33956: IFFALSE 33973
// bpoints := bpoints * 1.5 ;
33958: LD_ADDR_VAR 0 10
33962: PUSH
33963: LD_VAR 0 10
33967: PUSH
33968: LD_REAL  1.50000000000000E+0000
33971: MUL
33972: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33973: LD_VAR 0 1
33977: PPUSH
33978: LD_INT 66
33980: PPUSH
33981: CALL_OW 321
33985: PUSH
33986: LD_INT 2
33988: EQUAL
33989: IFFALSE 34006
// bpoints := bpoints * 1.1 ;
33991: LD_ADDR_VAR 0 10
33995: PUSH
33996: LD_VAR 0 10
34000: PUSH
34001: LD_REAL  1.10000000000000E+0000
34004: MUL
34005: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34006: LD_ADDR_VAR 0 10
34010: PUSH
34011: LD_VAR 0 10
34015: PUSH
34016: LD_VAR 0 6
34020: PPUSH
34021: LD_INT 1
34023: PPUSH
34024: CALL_OW 259
34028: PUSH
34029: LD_REAL  1.15000000000000E+0000
34032: MUL
34033: MUL
34034: ST_TO_ADDR
// end ; unit_vehicle :
34035: GO 34863
34037: LD_INT 2
34039: DOUBLE
34040: EQUAL
34041: IFTRUE 34045
34043: GO 34851
34045: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34046: LD_VAR 0 6
34050: PPUSH
34051: CALL_OW 264
34055: PUSH
34056: LD_INT 2
34058: PUSH
34059: LD_INT 42
34061: PUSH
34062: LD_INT 24
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: LIST
34069: IN
34070: IFFALSE 34091
// points := [ 25 , 5 , 3 ] ;
34072: LD_ADDR_VAR 0 9
34076: PUSH
34077: LD_INT 25
34079: PUSH
34080: LD_INT 5
34082: PUSH
34083: LD_INT 3
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: LIST
34090: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34091: LD_VAR 0 6
34095: PPUSH
34096: CALL_OW 264
34100: PUSH
34101: LD_INT 4
34103: PUSH
34104: LD_INT 43
34106: PUSH
34107: LD_INT 25
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: LIST
34114: IN
34115: IFFALSE 34136
// points := [ 40 , 15 , 5 ] ;
34117: LD_ADDR_VAR 0 9
34121: PUSH
34122: LD_INT 40
34124: PUSH
34125: LD_INT 15
34127: PUSH
34128: LD_INT 5
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: LIST
34135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34136: LD_VAR 0 6
34140: PPUSH
34141: CALL_OW 264
34145: PUSH
34146: LD_INT 3
34148: PUSH
34149: LD_INT 23
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: IN
34156: IFFALSE 34177
// points := [ 7 , 25 , 8 ] ;
34158: LD_ADDR_VAR 0 9
34162: PUSH
34163: LD_INT 7
34165: PUSH
34166: LD_INT 25
34168: PUSH
34169: LD_INT 8
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: LIST
34176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34177: LD_VAR 0 6
34181: PPUSH
34182: CALL_OW 264
34186: PUSH
34187: LD_INT 5
34189: PUSH
34190: LD_INT 27
34192: PUSH
34193: LD_INT 44
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: LIST
34200: IN
34201: IFFALSE 34222
// points := [ 14 , 50 , 16 ] ;
34203: LD_ADDR_VAR 0 9
34207: PUSH
34208: LD_INT 14
34210: PUSH
34211: LD_INT 50
34213: PUSH
34214: LD_INT 16
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: LIST
34221: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34222: LD_VAR 0 6
34226: PPUSH
34227: CALL_OW 264
34231: PUSH
34232: LD_INT 6
34234: PUSH
34235: LD_INT 46
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: IN
34242: IFFALSE 34263
// points := [ 32 , 120 , 70 ] ;
34244: LD_ADDR_VAR 0 9
34248: PUSH
34249: LD_INT 32
34251: PUSH
34252: LD_INT 120
34254: PUSH
34255: LD_INT 70
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34263: LD_VAR 0 6
34267: PPUSH
34268: CALL_OW 264
34272: PUSH
34273: LD_INT 7
34275: PUSH
34276: LD_INT 28
34278: PUSH
34279: LD_INT 45
34281: PUSH
34282: LD_INT 92
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: IN
34291: IFFALSE 34312
// points := [ 35 , 20 , 45 ] ;
34293: LD_ADDR_VAR 0 9
34297: PUSH
34298: LD_INT 35
34300: PUSH
34301: LD_INT 20
34303: PUSH
34304: LD_INT 45
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: LIST
34311: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34312: LD_VAR 0 6
34316: PPUSH
34317: CALL_OW 264
34321: PUSH
34322: LD_INT 47
34324: PUSH
34325: EMPTY
34326: LIST
34327: IN
34328: IFFALSE 34349
// points := [ 67 , 45 , 75 ] ;
34330: LD_ADDR_VAR 0 9
34334: PUSH
34335: LD_INT 67
34337: PUSH
34338: LD_INT 45
34340: PUSH
34341: LD_INT 75
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: LIST
34348: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34349: LD_VAR 0 6
34353: PPUSH
34354: CALL_OW 264
34358: PUSH
34359: LD_INT 26
34361: PUSH
34362: EMPTY
34363: LIST
34364: IN
34365: IFFALSE 34386
// points := [ 120 , 30 , 80 ] ;
34367: LD_ADDR_VAR 0 9
34371: PUSH
34372: LD_INT 120
34374: PUSH
34375: LD_INT 30
34377: PUSH
34378: LD_INT 80
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: LIST
34385: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34386: LD_VAR 0 6
34390: PPUSH
34391: CALL_OW 264
34395: PUSH
34396: LD_INT 22
34398: PUSH
34399: EMPTY
34400: LIST
34401: IN
34402: IFFALSE 34423
// points := [ 40 , 1 , 1 ] ;
34404: LD_ADDR_VAR 0 9
34408: PUSH
34409: LD_INT 40
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: LIST
34422: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34423: LD_VAR 0 6
34427: PPUSH
34428: CALL_OW 264
34432: PUSH
34433: LD_INT 29
34435: PUSH
34436: EMPTY
34437: LIST
34438: IN
34439: IFFALSE 34460
// points := [ 70 , 200 , 400 ] ;
34441: LD_ADDR_VAR 0 9
34445: PUSH
34446: LD_INT 70
34448: PUSH
34449: LD_INT 200
34451: PUSH
34452: LD_INT 400
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: LIST
34459: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34460: LD_VAR 0 6
34464: PPUSH
34465: CALL_OW 264
34469: PUSH
34470: LD_INT 14
34472: PUSH
34473: LD_INT 53
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: IN
34480: IFFALSE 34501
// points := [ 40 , 10 , 20 ] ;
34482: LD_ADDR_VAR 0 9
34486: PUSH
34487: LD_INT 40
34489: PUSH
34490: LD_INT 10
34492: PUSH
34493: LD_INT 20
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: LIST
34500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34501: LD_VAR 0 6
34505: PPUSH
34506: CALL_OW 264
34510: PUSH
34511: LD_INT 9
34513: PUSH
34514: EMPTY
34515: LIST
34516: IN
34517: IFFALSE 34538
// points := [ 5 , 70 , 20 ] ;
34519: LD_ADDR_VAR 0 9
34523: PUSH
34524: LD_INT 5
34526: PUSH
34527: LD_INT 70
34529: PUSH
34530: LD_INT 20
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: LIST
34537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34538: LD_VAR 0 6
34542: PPUSH
34543: CALL_OW 264
34547: PUSH
34548: LD_INT 10
34550: PUSH
34551: EMPTY
34552: LIST
34553: IN
34554: IFFALSE 34575
// points := [ 35 , 110 , 70 ] ;
34556: LD_ADDR_VAR 0 9
34560: PUSH
34561: LD_INT 35
34563: PUSH
34564: LD_INT 110
34566: PUSH
34567: LD_INT 70
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: LIST
34574: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34575: LD_VAR 0 6
34579: PPUSH
34580: CALL_OW 265
34584: PUSH
34585: LD_INT 25
34587: EQUAL
34588: IFFALSE 34609
// points := [ 80 , 65 , 100 ] ;
34590: LD_ADDR_VAR 0 9
34594: PUSH
34595: LD_INT 80
34597: PUSH
34598: LD_INT 65
34600: PUSH
34601: LD_INT 100
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: LIST
34608: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34609: LD_VAR 0 6
34613: PPUSH
34614: CALL_OW 263
34618: PUSH
34619: LD_INT 1
34621: EQUAL
34622: IFFALSE 34657
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34624: LD_ADDR_VAR 0 10
34628: PUSH
34629: LD_VAR 0 10
34633: PUSH
34634: LD_VAR 0 6
34638: PPUSH
34639: CALL_OW 311
34643: PPUSH
34644: LD_INT 3
34646: PPUSH
34647: CALL_OW 259
34651: PUSH
34652: LD_INT 4
34654: MUL
34655: MUL
34656: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34657: LD_VAR 0 6
34661: PPUSH
34662: CALL_OW 263
34666: PUSH
34667: LD_INT 2
34669: EQUAL
34670: IFFALSE 34721
// begin j := IsControledBy ( i ) ;
34672: LD_ADDR_VAR 0 7
34676: PUSH
34677: LD_VAR 0 6
34681: PPUSH
34682: CALL_OW 312
34686: ST_TO_ADDR
// if j then
34687: LD_VAR 0 7
34691: IFFALSE 34721
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34693: LD_ADDR_VAR 0 10
34697: PUSH
34698: LD_VAR 0 10
34702: PUSH
34703: LD_VAR 0 7
34707: PPUSH
34708: LD_INT 3
34710: PPUSH
34711: CALL_OW 259
34715: PUSH
34716: LD_INT 3
34718: MUL
34719: MUL
34720: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34721: LD_VAR 0 6
34725: PPUSH
34726: CALL_OW 264
34730: PUSH
34731: LD_INT 5
34733: PUSH
34734: LD_INT 6
34736: PUSH
34737: LD_INT 46
34739: PUSH
34740: LD_INT 44
34742: PUSH
34743: LD_INT 47
34745: PUSH
34746: LD_INT 45
34748: PUSH
34749: LD_INT 28
34751: PUSH
34752: LD_INT 7
34754: PUSH
34755: LD_INT 27
34757: PUSH
34758: LD_INT 29
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: IN
34773: PUSH
34774: LD_VAR 0 1
34778: PPUSH
34779: LD_INT 52
34781: PPUSH
34782: CALL_OW 321
34786: PUSH
34787: LD_INT 2
34789: EQUAL
34790: AND
34791: IFFALSE 34808
// bpoints := bpoints * 1.2 ;
34793: LD_ADDR_VAR 0 10
34797: PUSH
34798: LD_VAR 0 10
34802: PUSH
34803: LD_REAL  1.20000000000000E+0000
34806: MUL
34807: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34808: LD_VAR 0 6
34812: PPUSH
34813: CALL_OW 264
34817: PUSH
34818: LD_INT 6
34820: PUSH
34821: LD_INT 46
34823: PUSH
34824: LD_INT 47
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: LIST
34831: IN
34832: IFFALSE 34849
// bpoints := bpoints * 1.2 ;
34834: LD_ADDR_VAR 0 10
34838: PUSH
34839: LD_VAR 0 10
34843: PUSH
34844: LD_REAL  1.20000000000000E+0000
34847: MUL
34848: ST_TO_ADDR
// end ; unit_building :
34849: GO 34863
34851: LD_INT 3
34853: DOUBLE
34854: EQUAL
34855: IFTRUE 34859
34857: GO 34862
34859: POP
// ; end ;
34860: GO 34863
34862: POP
// for j = 1 to 3 do
34863: LD_ADDR_VAR 0 7
34867: PUSH
34868: DOUBLE
34869: LD_INT 1
34871: DEC
34872: ST_TO_ADDR
34873: LD_INT 3
34875: PUSH
34876: FOR_TO
34877: IFFALSE 34930
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34879: LD_ADDR_VAR 0 5
34883: PUSH
34884: LD_VAR 0 5
34888: PPUSH
34889: LD_VAR 0 7
34893: PPUSH
34894: LD_VAR 0 5
34898: PUSH
34899: LD_VAR 0 7
34903: ARRAY
34904: PUSH
34905: LD_VAR 0 9
34909: PUSH
34910: LD_VAR 0 7
34914: ARRAY
34915: PUSH
34916: LD_VAR 0 10
34920: MUL
34921: PLUS
34922: PPUSH
34923: CALL_OW 1
34927: ST_TO_ADDR
34928: GO 34876
34930: POP
34931: POP
// end ;
34932: GO 33411
34934: POP
34935: POP
// result := Replace ( result , 4 , tmp ) ;
34936: LD_ADDR_VAR 0 5
34940: PUSH
34941: LD_VAR 0 5
34945: PPUSH
34946: LD_INT 4
34948: PPUSH
34949: LD_VAR 0 8
34953: PPUSH
34954: CALL_OW 1
34958: ST_TO_ADDR
// end ;
34959: LD_VAR 0 5
34963: RET
// export function DangerAtRange ( unit , range ) ; begin
34964: LD_INT 0
34966: PPUSH
// if not unit then
34967: LD_VAR 0 1
34971: NOT
34972: IFFALSE 34976
// exit ;
34974: GO 35021
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34976: LD_ADDR_VAR 0 3
34980: PUSH
34981: LD_VAR 0 1
34985: PPUSH
34986: CALL_OW 255
34990: PPUSH
34991: LD_VAR 0 1
34995: PPUSH
34996: CALL_OW 250
35000: PPUSH
35001: LD_VAR 0 1
35005: PPUSH
35006: CALL_OW 251
35010: PPUSH
35011: LD_VAR 0 2
35015: PPUSH
35016: CALL 33263 0 4
35020: ST_TO_ADDR
// end ;
35021: LD_VAR 0 3
35025: RET
// export function DangerInArea ( side , area ) ; begin
35026: LD_INT 0
35028: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35029: LD_ADDR_VAR 0 3
35033: PUSH
35034: LD_VAR 0 2
35038: PPUSH
35039: LD_INT 81
35041: PUSH
35042: LD_VAR 0 1
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PPUSH
35051: CALL_OW 70
35055: ST_TO_ADDR
// end ;
35056: LD_VAR 0 3
35060: RET
// export function IsExtension ( b ) ; begin
35061: LD_INT 0
35063: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35064: LD_ADDR_VAR 0 2
35068: PUSH
35069: LD_VAR 0 1
35073: PUSH
35074: LD_INT 23
35076: PUSH
35077: LD_INT 20
35079: PUSH
35080: LD_INT 22
35082: PUSH
35083: LD_INT 17
35085: PUSH
35086: LD_INT 24
35088: PUSH
35089: LD_INT 21
35091: PUSH
35092: LD_INT 19
35094: PUSH
35095: LD_INT 16
35097: PUSH
35098: LD_INT 25
35100: PUSH
35101: LD_INT 18
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: IN
35116: ST_TO_ADDR
// end ;
35117: LD_VAR 0 2
35121: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35122: LD_INT 0
35124: PPUSH
35125: PPUSH
35126: PPUSH
// result := [ ] ;
35127: LD_ADDR_VAR 0 4
35131: PUSH
35132: EMPTY
35133: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35134: LD_ADDR_VAR 0 5
35138: PUSH
35139: LD_VAR 0 2
35143: PPUSH
35144: LD_INT 21
35146: PUSH
35147: LD_INT 3
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PPUSH
35154: CALL_OW 70
35158: ST_TO_ADDR
// if not tmp then
35159: LD_VAR 0 5
35163: NOT
35164: IFFALSE 35168
// exit ;
35166: GO 35232
// if checkLink then
35168: LD_VAR 0 3
35172: IFFALSE 35222
// begin for i in tmp do
35174: LD_ADDR_VAR 0 6
35178: PUSH
35179: LD_VAR 0 5
35183: PUSH
35184: FOR_IN
35185: IFFALSE 35220
// if GetBase ( i ) <> base then
35187: LD_VAR 0 6
35191: PPUSH
35192: CALL_OW 274
35196: PUSH
35197: LD_VAR 0 1
35201: NONEQUAL
35202: IFFALSE 35218
// ComLinkToBase ( base , i ) ;
35204: LD_VAR 0 1
35208: PPUSH
35209: LD_VAR 0 6
35213: PPUSH
35214: CALL_OW 169
35218: GO 35184
35220: POP
35221: POP
// end ; result := tmp ;
35222: LD_ADDR_VAR 0 4
35226: PUSH
35227: LD_VAR 0 5
35231: ST_TO_ADDR
// end ;
35232: LD_VAR 0 4
35236: RET
// export function ComComplete ( units , b ) ; var i ; begin
35237: LD_INT 0
35239: PPUSH
35240: PPUSH
// if not units then
35241: LD_VAR 0 1
35245: NOT
35246: IFFALSE 35250
// exit ;
35248: GO 35340
// for i in units do
35250: LD_ADDR_VAR 0 4
35254: PUSH
35255: LD_VAR 0 1
35259: PUSH
35260: FOR_IN
35261: IFFALSE 35338
// if BuildingStatus ( b ) = bs_build then
35263: LD_VAR 0 2
35267: PPUSH
35268: CALL_OW 461
35272: PUSH
35273: LD_INT 1
35275: EQUAL
35276: IFFALSE 35336
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35278: LD_VAR 0 4
35282: PPUSH
35283: LD_STRING h
35285: PUSH
35286: LD_VAR 0 2
35290: PPUSH
35291: CALL_OW 250
35295: PUSH
35296: LD_VAR 0 2
35300: PPUSH
35301: CALL_OW 251
35305: PUSH
35306: LD_VAR 0 2
35310: PUSH
35311: LD_INT 0
35313: PUSH
35314: LD_INT 0
35316: PUSH
35317: LD_INT 0
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: PUSH
35329: EMPTY
35330: LIST
35331: PPUSH
35332: CALL_OW 446
35336: GO 35260
35338: POP
35339: POP
// end ;
35340: LD_VAR 0 3
35344: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35345: LD_INT 0
35347: PPUSH
35348: PPUSH
35349: PPUSH
35350: PPUSH
35351: PPUSH
35352: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35353: LD_VAR 0 1
35357: NOT
35358: PUSH
35359: LD_VAR 0 1
35363: PPUSH
35364: CALL_OW 263
35368: PUSH
35369: LD_INT 2
35371: NONEQUAL
35372: OR
35373: IFFALSE 35377
// exit ;
35375: GO 35693
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35377: LD_ADDR_VAR 0 6
35381: PUSH
35382: LD_INT 22
35384: PUSH
35385: LD_VAR 0 1
35389: PPUSH
35390: CALL_OW 255
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 2
35401: PUSH
35402: LD_INT 30
35404: PUSH
35405: LD_INT 36
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 34
35414: PUSH
35415: LD_INT 31
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: LIST
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PPUSH
35431: CALL_OW 69
35435: ST_TO_ADDR
// if not tmp then
35436: LD_VAR 0 6
35440: NOT
35441: IFFALSE 35445
// exit ;
35443: GO 35693
// result := [ ] ;
35445: LD_ADDR_VAR 0 2
35449: PUSH
35450: EMPTY
35451: ST_TO_ADDR
// for i in tmp do
35452: LD_ADDR_VAR 0 3
35456: PUSH
35457: LD_VAR 0 6
35461: PUSH
35462: FOR_IN
35463: IFFALSE 35534
// begin t := UnitsInside ( i ) ;
35465: LD_ADDR_VAR 0 4
35469: PUSH
35470: LD_VAR 0 3
35474: PPUSH
35475: CALL_OW 313
35479: ST_TO_ADDR
// if t then
35480: LD_VAR 0 4
35484: IFFALSE 35532
// for j in t do
35486: LD_ADDR_VAR 0 7
35490: PUSH
35491: LD_VAR 0 4
35495: PUSH
35496: FOR_IN
35497: IFFALSE 35530
// result := Replace ( result , result + 1 , j ) ;
35499: LD_ADDR_VAR 0 2
35503: PUSH
35504: LD_VAR 0 2
35508: PPUSH
35509: LD_VAR 0 2
35513: PUSH
35514: LD_INT 1
35516: PLUS
35517: PPUSH
35518: LD_VAR 0 7
35522: PPUSH
35523: CALL_OW 1
35527: ST_TO_ADDR
35528: GO 35496
35530: POP
35531: POP
// end ;
35532: GO 35462
35534: POP
35535: POP
// if not result then
35536: LD_VAR 0 2
35540: NOT
35541: IFFALSE 35545
// exit ;
35543: GO 35693
// mech := result [ 1 ] ;
35545: LD_ADDR_VAR 0 5
35549: PUSH
35550: LD_VAR 0 2
35554: PUSH
35555: LD_INT 1
35557: ARRAY
35558: ST_TO_ADDR
// if result > 1 then
35559: LD_VAR 0 2
35563: PUSH
35564: LD_INT 1
35566: GREATER
35567: IFFALSE 35679
// begin for i = 2 to result do
35569: LD_ADDR_VAR 0 3
35573: PUSH
35574: DOUBLE
35575: LD_INT 2
35577: DEC
35578: ST_TO_ADDR
35579: LD_VAR 0 2
35583: PUSH
35584: FOR_TO
35585: IFFALSE 35677
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35587: LD_ADDR_VAR 0 4
35591: PUSH
35592: LD_VAR 0 2
35596: PUSH
35597: LD_VAR 0 3
35601: ARRAY
35602: PPUSH
35603: LD_INT 3
35605: PPUSH
35606: CALL_OW 259
35610: PUSH
35611: LD_VAR 0 2
35615: PUSH
35616: LD_VAR 0 3
35620: ARRAY
35621: PPUSH
35622: CALL_OW 432
35626: MINUS
35627: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35628: LD_VAR 0 4
35632: PUSH
35633: LD_VAR 0 5
35637: PPUSH
35638: LD_INT 3
35640: PPUSH
35641: CALL_OW 259
35645: PUSH
35646: LD_VAR 0 5
35650: PPUSH
35651: CALL_OW 432
35655: MINUS
35656: GREATEREQUAL
35657: IFFALSE 35675
// mech := result [ i ] ;
35659: LD_ADDR_VAR 0 5
35663: PUSH
35664: LD_VAR 0 2
35668: PUSH
35669: LD_VAR 0 3
35673: ARRAY
35674: ST_TO_ADDR
// end ;
35675: GO 35584
35677: POP
35678: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35679: LD_VAR 0 1
35683: PPUSH
35684: LD_VAR 0 5
35688: PPUSH
35689: CALL_OW 135
// end ;
35693: LD_VAR 0 2
35697: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35698: LD_INT 0
35700: PPUSH
35701: PPUSH
35702: PPUSH
35703: PPUSH
35704: PPUSH
35705: PPUSH
35706: PPUSH
35707: PPUSH
35708: PPUSH
35709: PPUSH
35710: PPUSH
35711: PPUSH
35712: PPUSH
// result := [ ] ;
35713: LD_ADDR_VAR 0 7
35717: PUSH
35718: EMPTY
35719: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35720: LD_VAR 0 1
35724: PPUSH
35725: CALL_OW 266
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: LD_INT 1
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: IN
35740: NOT
35741: IFFALSE 35745
// exit ;
35743: GO 37379
// if name then
35745: LD_VAR 0 3
35749: IFFALSE 35765
// SetBName ( base_dep , name ) ;
35751: LD_VAR 0 1
35755: PPUSH
35756: LD_VAR 0 3
35760: PPUSH
35761: CALL_OW 500
// base := GetBase ( base_dep ) ;
35765: LD_ADDR_VAR 0 15
35769: PUSH
35770: LD_VAR 0 1
35774: PPUSH
35775: CALL_OW 274
35779: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35780: LD_ADDR_VAR 0 16
35784: PUSH
35785: LD_VAR 0 1
35789: PPUSH
35790: CALL_OW 255
35794: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35795: LD_ADDR_VAR 0 17
35799: PUSH
35800: LD_VAR 0 1
35804: PPUSH
35805: CALL_OW 248
35809: ST_TO_ADDR
// if sources then
35810: LD_VAR 0 5
35814: IFFALSE 35861
// for i = 1 to 3 do
35816: LD_ADDR_VAR 0 8
35820: PUSH
35821: DOUBLE
35822: LD_INT 1
35824: DEC
35825: ST_TO_ADDR
35826: LD_INT 3
35828: PUSH
35829: FOR_TO
35830: IFFALSE 35859
// AddResourceType ( base , i , sources [ i ] ) ;
35832: LD_VAR 0 15
35836: PPUSH
35837: LD_VAR 0 8
35841: PPUSH
35842: LD_VAR 0 5
35846: PUSH
35847: LD_VAR 0 8
35851: ARRAY
35852: PPUSH
35853: CALL_OW 276
35857: GO 35829
35859: POP
35860: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35861: LD_ADDR_VAR 0 18
35865: PUSH
35866: LD_VAR 0 15
35870: PPUSH
35871: LD_VAR 0 2
35875: PPUSH
35876: LD_INT 1
35878: PPUSH
35879: CALL 35122 0 3
35883: ST_TO_ADDR
// InitHc ;
35884: CALL_OW 19
// InitUc ;
35888: CALL_OW 18
// uc_side := side ;
35892: LD_ADDR_OWVAR 20
35896: PUSH
35897: LD_VAR 0 16
35901: ST_TO_ADDR
// uc_nation := nation ;
35902: LD_ADDR_OWVAR 21
35906: PUSH
35907: LD_VAR 0 17
35911: ST_TO_ADDR
// if buildings then
35912: LD_VAR 0 18
35916: IFFALSE 37238
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35918: LD_ADDR_VAR 0 19
35922: PUSH
35923: LD_VAR 0 18
35927: PPUSH
35928: LD_INT 2
35930: PUSH
35931: LD_INT 30
35933: PUSH
35934: LD_INT 29
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 30
35943: PUSH
35944: LD_INT 30
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: LIST
35955: PPUSH
35956: CALL_OW 72
35960: ST_TO_ADDR
// if tmp then
35961: LD_VAR 0 19
35965: IFFALSE 36013
// for i in tmp do
35967: LD_ADDR_VAR 0 8
35971: PUSH
35972: LD_VAR 0 19
35976: PUSH
35977: FOR_IN
35978: IFFALSE 36011
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35980: LD_VAR 0 8
35984: PPUSH
35985: CALL_OW 250
35989: PPUSH
35990: LD_VAR 0 8
35994: PPUSH
35995: CALL_OW 251
35999: PPUSH
36000: LD_VAR 0 16
36004: PPUSH
36005: CALL_OW 441
36009: GO 35977
36011: POP
36012: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36013: LD_VAR 0 18
36017: PPUSH
36018: LD_INT 2
36020: PUSH
36021: LD_INT 30
36023: PUSH
36024: LD_INT 32
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 30
36033: PUSH
36034: LD_INT 33
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: LIST
36045: PPUSH
36046: CALL_OW 72
36050: IFFALSE 36138
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36052: LD_ADDR_VAR 0 8
36056: PUSH
36057: LD_VAR 0 18
36061: PPUSH
36062: LD_INT 2
36064: PUSH
36065: LD_INT 30
36067: PUSH
36068: LD_INT 32
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 30
36077: PUSH
36078: LD_INT 33
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: LIST
36089: PPUSH
36090: CALL_OW 72
36094: PUSH
36095: FOR_IN
36096: IFFALSE 36136
// begin if not GetBWeapon ( i ) then
36098: LD_VAR 0 8
36102: PPUSH
36103: CALL_OW 269
36107: NOT
36108: IFFALSE 36134
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36110: LD_VAR 0 8
36114: PPUSH
36115: LD_VAR 0 8
36119: PPUSH
36120: LD_VAR 0 2
36124: PPUSH
36125: CALL 37384 0 2
36129: PPUSH
36130: CALL_OW 431
// end ;
36134: GO 36095
36136: POP
36137: POP
// end ; for i = 1 to personel do
36138: LD_ADDR_VAR 0 8
36142: PUSH
36143: DOUBLE
36144: LD_INT 1
36146: DEC
36147: ST_TO_ADDR
36148: LD_VAR 0 6
36152: PUSH
36153: FOR_TO
36154: IFFALSE 37218
// begin if i > 4 then
36156: LD_VAR 0 8
36160: PUSH
36161: LD_INT 4
36163: GREATER
36164: IFFALSE 36168
// break ;
36166: GO 37218
// case i of 1 :
36168: LD_VAR 0 8
36172: PUSH
36173: LD_INT 1
36175: DOUBLE
36176: EQUAL
36177: IFTRUE 36181
36179: GO 36261
36181: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36182: LD_ADDR_VAR 0 12
36186: PUSH
36187: LD_VAR 0 18
36191: PPUSH
36192: LD_INT 22
36194: PUSH
36195: LD_VAR 0 16
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 58
36206: PUSH
36207: EMPTY
36208: LIST
36209: PUSH
36210: LD_INT 2
36212: PUSH
36213: LD_INT 30
36215: PUSH
36216: LD_INT 32
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 30
36225: PUSH
36226: LD_INT 4
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 30
36235: PUSH
36236: LD_INT 5
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: LIST
36253: PPUSH
36254: CALL_OW 72
36258: ST_TO_ADDR
36259: GO 36483
36261: LD_INT 2
36263: DOUBLE
36264: EQUAL
36265: IFTRUE 36269
36267: GO 36331
36269: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36270: LD_ADDR_VAR 0 12
36274: PUSH
36275: LD_VAR 0 18
36279: PPUSH
36280: LD_INT 22
36282: PUSH
36283: LD_VAR 0 16
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 2
36294: PUSH
36295: LD_INT 30
36297: PUSH
36298: LD_INT 0
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 30
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: LIST
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PPUSH
36324: CALL_OW 72
36328: ST_TO_ADDR
36329: GO 36483
36331: LD_INT 3
36333: DOUBLE
36334: EQUAL
36335: IFTRUE 36339
36337: GO 36401
36339: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36340: LD_ADDR_VAR 0 12
36344: PUSH
36345: LD_VAR 0 18
36349: PPUSH
36350: LD_INT 22
36352: PUSH
36353: LD_VAR 0 16
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 2
36364: PUSH
36365: LD_INT 30
36367: PUSH
36368: LD_INT 2
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 30
36377: PUSH
36378: LD_INT 3
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: LIST
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PPUSH
36394: CALL_OW 72
36398: ST_TO_ADDR
36399: GO 36483
36401: LD_INT 4
36403: DOUBLE
36404: EQUAL
36405: IFTRUE 36409
36407: GO 36482
36409: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36410: LD_ADDR_VAR 0 12
36414: PUSH
36415: LD_VAR 0 18
36419: PPUSH
36420: LD_INT 22
36422: PUSH
36423: LD_VAR 0 16
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: LD_INT 30
36437: PUSH
36438: LD_INT 6
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 30
36447: PUSH
36448: LD_INT 7
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 30
36457: PUSH
36458: LD_INT 8
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PPUSH
36475: CALL_OW 72
36479: ST_TO_ADDR
36480: GO 36483
36482: POP
// if i = 1 then
36483: LD_VAR 0 8
36487: PUSH
36488: LD_INT 1
36490: EQUAL
36491: IFFALSE 36602
// begin tmp := [ ] ;
36493: LD_ADDR_VAR 0 19
36497: PUSH
36498: EMPTY
36499: ST_TO_ADDR
// for j in f do
36500: LD_ADDR_VAR 0 9
36504: PUSH
36505: LD_VAR 0 12
36509: PUSH
36510: FOR_IN
36511: IFFALSE 36584
// if GetBType ( j ) = b_bunker then
36513: LD_VAR 0 9
36517: PPUSH
36518: CALL_OW 266
36522: PUSH
36523: LD_INT 32
36525: EQUAL
36526: IFFALSE 36553
// tmp := Insert ( tmp , 1 , j ) else
36528: LD_ADDR_VAR 0 19
36532: PUSH
36533: LD_VAR 0 19
36537: PPUSH
36538: LD_INT 1
36540: PPUSH
36541: LD_VAR 0 9
36545: PPUSH
36546: CALL_OW 2
36550: ST_TO_ADDR
36551: GO 36582
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36553: LD_ADDR_VAR 0 19
36557: PUSH
36558: LD_VAR 0 19
36562: PPUSH
36563: LD_VAR 0 19
36567: PUSH
36568: LD_INT 1
36570: PLUS
36571: PPUSH
36572: LD_VAR 0 9
36576: PPUSH
36577: CALL_OW 2
36581: ST_TO_ADDR
36582: GO 36510
36584: POP
36585: POP
// if tmp then
36586: LD_VAR 0 19
36590: IFFALSE 36602
// f := tmp ;
36592: LD_ADDR_VAR 0 12
36596: PUSH
36597: LD_VAR 0 19
36601: ST_TO_ADDR
// end ; x := personel [ i ] ;
36602: LD_ADDR_VAR 0 13
36606: PUSH
36607: LD_VAR 0 6
36611: PUSH
36612: LD_VAR 0 8
36616: ARRAY
36617: ST_TO_ADDR
// if x = - 1 then
36618: LD_VAR 0 13
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: EQUAL
36627: IFFALSE 36836
// begin for j in f do
36629: LD_ADDR_VAR 0 9
36633: PUSH
36634: LD_VAR 0 12
36638: PUSH
36639: FOR_IN
36640: IFFALSE 36832
// repeat InitHc ;
36642: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36646: LD_VAR 0 9
36650: PPUSH
36651: CALL_OW 266
36655: PUSH
36656: LD_INT 5
36658: EQUAL
36659: IFFALSE 36729
// begin if UnitsInside ( j ) < 3 then
36661: LD_VAR 0 9
36665: PPUSH
36666: CALL_OW 313
36670: PUSH
36671: LD_INT 3
36673: LESS
36674: IFFALSE 36710
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36676: LD_INT 0
36678: PPUSH
36679: LD_INT 5
36681: PUSH
36682: LD_INT 8
36684: PUSH
36685: LD_INT 9
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: LIST
36692: PUSH
36693: LD_VAR 0 17
36697: ARRAY
36698: PPUSH
36699: LD_VAR 0 4
36703: PPUSH
36704: CALL_OW 380
36708: GO 36727
// PrepareHuman ( false , i , skill ) ;
36710: LD_INT 0
36712: PPUSH
36713: LD_VAR 0 8
36717: PPUSH
36718: LD_VAR 0 4
36722: PPUSH
36723: CALL_OW 380
// end else
36727: GO 36746
// PrepareHuman ( false , i , skill ) ;
36729: LD_INT 0
36731: PPUSH
36732: LD_VAR 0 8
36736: PPUSH
36737: LD_VAR 0 4
36741: PPUSH
36742: CALL_OW 380
// un := CreateHuman ;
36746: LD_ADDR_VAR 0 14
36750: PUSH
36751: CALL_OW 44
36755: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36756: LD_ADDR_VAR 0 7
36760: PUSH
36761: LD_VAR 0 7
36765: PPUSH
36766: LD_INT 1
36768: PPUSH
36769: LD_VAR 0 14
36773: PPUSH
36774: CALL_OW 2
36778: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36779: LD_VAR 0 14
36783: PPUSH
36784: LD_VAR 0 9
36788: PPUSH
36789: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36793: LD_VAR 0 9
36797: PPUSH
36798: CALL_OW 313
36802: PUSH
36803: LD_INT 6
36805: EQUAL
36806: PUSH
36807: LD_VAR 0 9
36811: PPUSH
36812: CALL_OW 266
36816: PUSH
36817: LD_INT 32
36819: PUSH
36820: LD_INT 31
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: IN
36827: OR
36828: IFFALSE 36642
36830: GO 36639
36832: POP
36833: POP
// end else
36834: GO 37216
// for j = 1 to x do
36836: LD_ADDR_VAR 0 9
36840: PUSH
36841: DOUBLE
36842: LD_INT 1
36844: DEC
36845: ST_TO_ADDR
36846: LD_VAR 0 13
36850: PUSH
36851: FOR_TO
36852: IFFALSE 37214
// begin InitHc ;
36854: CALL_OW 19
// if not f then
36858: LD_VAR 0 12
36862: NOT
36863: IFFALSE 36952
// begin PrepareHuman ( false , i , skill ) ;
36865: LD_INT 0
36867: PPUSH
36868: LD_VAR 0 8
36872: PPUSH
36873: LD_VAR 0 4
36877: PPUSH
36878: CALL_OW 380
// un := CreateHuman ;
36882: LD_ADDR_VAR 0 14
36886: PUSH
36887: CALL_OW 44
36891: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36892: LD_ADDR_VAR 0 7
36896: PUSH
36897: LD_VAR 0 7
36901: PPUSH
36902: LD_INT 1
36904: PPUSH
36905: LD_VAR 0 14
36909: PPUSH
36910: CALL_OW 2
36914: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36915: LD_VAR 0 14
36919: PPUSH
36920: LD_VAR 0 1
36924: PPUSH
36925: CALL_OW 250
36929: PPUSH
36930: LD_VAR 0 1
36934: PPUSH
36935: CALL_OW 251
36939: PPUSH
36940: LD_INT 10
36942: PPUSH
36943: LD_INT 0
36945: PPUSH
36946: CALL_OW 50
// continue ;
36950: GO 36851
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36952: LD_VAR 0 12
36956: PUSH
36957: LD_INT 1
36959: ARRAY
36960: PPUSH
36961: CALL_OW 313
36965: PUSH
36966: LD_VAR 0 12
36970: PUSH
36971: LD_INT 1
36973: ARRAY
36974: PPUSH
36975: CALL_OW 266
36979: PUSH
36980: LD_INT 32
36982: PUSH
36983: LD_INT 31
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: IN
36990: AND
36991: PUSH
36992: LD_VAR 0 12
36996: PUSH
36997: LD_INT 1
36999: ARRAY
37000: PPUSH
37001: CALL_OW 313
37005: PUSH
37006: LD_INT 6
37008: EQUAL
37009: OR
37010: IFFALSE 37030
// f := Delete ( f , 1 ) ;
37012: LD_ADDR_VAR 0 12
37016: PUSH
37017: LD_VAR 0 12
37021: PPUSH
37022: LD_INT 1
37024: PPUSH
37025: CALL_OW 3
37029: ST_TO_ADDR
// if not f then
37030: LD_VAR 0 12
37034: NOT
37035: IFFALSE 37053
// begin x := x + 2 ;
37037: LD_ADDR_VAR 0 13
37041: PUSH
37042: LD_VAR 0 13
37046: PUSH
37047: LD_INT 2
37049: PLUS
37050: ST_TO_ADDR
// continue ;
37051: GO 36851
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37053: LD_VAR 0 12
37057: PUSH
37058: LD_INT 1
37060: ARRAY
37061: PPUSH
37062: CALL_OW 266
37066: PUSH
37067: LD_INT 5
37069: EQUAL
37070: IFFALSE 37144
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37072: LD_VAR 0 12
37076: PUSH
37077: LD_INT 1
37079: ARRAY
37080: PPUSH
37081: CALL_OW 313
37085: PUSH
37086: LD_INT 3
37088: LESS
37089: IFFALSE 37125
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37091: LD_INT 0
37093: PPUSH
37094: LD_INT 5
37096: PUSH
37097: LD_INT 8
37099: PUSH
37100: LD_INT 9
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: LIST
37107: PUSH
37108: LD_VAR 0 17
37112: ARRAY
37113: PPUSH
37114: LD_VAR 0 4
37118: PPUSH
37119: CALL_OW 380
37123: GO 37142
// PrepareHuman ( false , i , skill ) ;
37125: LD_INT 0
37127: PPUSH
37128: LD_VAR 0 8
37132: PPUSH
37133: LD_VAR 0 4
37137: PPUSH
37138: CALL_OW 380
// end else
37142: GO 37161
// PrepareHuman ( false , i , skill ) ;
37144: LD_INT 0
37146: PPUSH
37147: LD_VAR 0 8
37151: PPUSH
37152: LD_VAR 0 4
37156: PPUSH
37157: CALL_OW 380
// un := CreateHuman ;
37161: LD_ADDR_VAR 0 14
37165: PUSH
37166: CALL_OW 44
37170: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37171: LD_ADDR_VAR 0 7
37175: PUSH
37176: LD_VAR 0 7
37180: PPUSH
37181: LD_INT 1
37183: PPUSH
37184: LD_VAR 0 14
37188: PPUSH
37189: CALL_OW 2
37193: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37194: LD_VAR 0 14
37198: PPUSH
37199: LD_VAR 0 12
37203: PUSH
37204: LD_INT 1
37206: ARRAY
37207: PPUSH
37208: CALL_OW 52
// end ;
37212: GO 36851
37214: POP
37215: POP
// end ;
37216: GO 36153
37218: POP
37219: POP
// result := result ^ buildings ;
37220: LD_ADDR_VAR 0 7
37224: PUSH
37225: LD_VAR 0 7
37229: PUSH
37230: LD_VAR 0 18
37234: ADD
37235: ST_TO_ADDR
// end else
37236: GO 37379
// begin for i = 1 to personel do
37238: LD_ADDR_VAR 0 8
37242: PUSH
37243: DOUBLE
37244: LD_INT 1
37246: DEC
37247: ST_TO_ADDR
37248: LD_VAR 0 6
37252: PUSH
37253: FOR_TO
37254: IFFALSE 37377
// begin if i > 4 then
37256: LD_VAR 0 8
37260: PUSH
37261: LD_INT 4
37263: GREATER
37264: IFFALSE 37268
// break ;
37266: GO 37377
// x := personel [ i ] ;
37268: LD_ADDR_VAR 0 13
37272: PUSH
37273: LD_VAR 0 6
37277: PUSH
37278: LD_VAR 0 8
37282: ARRAY
37283: ST_TO_ADDR
// if x = - 1 then
37284: LD_VAR 0 13
37288: PUSH
37289: LD_INT 1
37291: NEG
37292: EQUAL
37293: IFFALSE 37297
// continue ;
37295: GO 37253
// PrepareHuman ( false , i , skill ) ;
37297: LD_INT 0
37299: PPUSH
37300: LD_VAR 0 8
37304: PPUSH
37305: LD_VAR 0 4
37309: PPUSH
37310: CALL_OW 380
// un := CreateHuman ;
37314: LD_ADDR_VAR 0 14
37318: PUSH
37319: CALL_OW 44
37323: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37324: LD_VAR 0 14
37328: PPUSH
37329: LD_VAR 0 1
37333: PPUSH
37334: CALL_OW 250
37338: PPUSH
37339: LD_VAR 0 1
37343: PPUSH
37344: CALL_OW 251
37348: PPUSH
37349: LD_INT 10
37351: PPUSH
37352: LD_INT 0
37354: PPUSH
37355: CALL_OW 50
// result := result ^ un ;
37359: LD_ADDR_VAR 0 7
37363: PUSH
37364: LD_VAR 0 7
37368: PUSH
37369: LD_VAR 0 14
37373: ADD
37374: ST_TO_ADDR
// end ;
37375: GO 37253
37377: POP
37378: POP
// end ; end ;
37379: LD_VAR 0 7
37383: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37384: LD_INT 0
37386: PPUSH
37387: PPUSH
37388: PPUSH
37389: PPUSH
37390: PPUSH
37391: PPUSH
37392: PPUSH
37393: PPUSH
37394: PPUSH
37395: PPUSH
37396: PPUSH
37397: PPUSH
37398: PPUSH
37399: PPUSH
37400: PPUSH
37401: PPUSH
// result := false ;
37402: LD_ADDR_VAR 0 3
37406: PUSH
37407: LD_INT 0
37409: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37410: LD_VAR 0 1
37414: NOT
37415: PUSH
37416: LD_VAR 0 1
37420: PPUSH
37421: CALL_OW 266
37425: PUSH
37426: LD_INT 32
37428: PUSH
37429: LD_INT 33
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: IN
37436: NOT
37437: OR
37438: IFFALSE 37442
// exit ;
37440: GO 38551
// nat := GetNation ( tower ) ;
37442: LD_ADDR_VAR 0 12
37446: PUSH
37447: LD_VAR 0 1
37451: PPUSH
37452: CALL_OW 248
37456: ST_TO_ADDR
// side := GetSide ( tower ) ;
37457: LD_ADDR_VAR 0 16
37461: PUSH
37462: LD_VAR 0 1
37466: PPUSH
37467: CALL_OW 255
37471: ST_TO_ADDR
// x := GetX ( tower ) ;
37472: LD_ADDR_VAR 0 10
37476: PUSH
37477: LD_VAR 0 1
37481: PPUSH
37482: CALL_OW 250
37486: ST_TO_ADDR
// y := GetY ( tower ) ;
37487: LD_ADDR_VAR 0 11
37491: PUSH
37492: LD_VAR 0 1
37496: PPUSH
37497: CALL_OW 251
37501: ST_TO_ADDR
// if not x or not y then
37502: LD_VAR 0 10
37506: NOT
37507: PUSH
37508: LD_VAR 0 11
37512: NOT
37513: OR
37514: IFFALSE 37518
// exit ;
37516: GO 38551
// weapon := 0 ;
37518: LD_ADDR_VAR 0 18
37522: PUSH
37523: LD_INT 0
37525: ST_TO_ADDR
// fac_list := [ ] ;
37526: LD_ADDR_VAR 0 17
37530: PUSH
37531: EMPTY
37532: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37533: LD_ADDR_VAR 0 6
37537: PUSH
37538: LD_VAR 0 1
37542: PPUSH
37543: CALL_OW 274
37547: PPUSH
37548: LD_VAR 0 2
37552: PPUSH
37553: LD_INT 0
37555: PPUSH
37556: CALL 35122 0 3
37560: PPUSH
37561: LD_INT 30
37563: PUSH
37564: LD_INT 3
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PPUSH
37571: CALL_OW 72
37575: ST_TO_ADDR
// if not factories then
37576: LD_VAR 0 6
37580: NOT
37581: IFFALSE 37585
// exit ;
37583: GO 38551
// for i in factories do
37585: LD_ADDR_VAR 0 8
37589: PUSH
37590: LD_VAR 0 6
37594: PUSH
37595: FOR_IN
37596: IFFALSE 37621
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37598: LD_ADDR_VAR 0 17
37602: PUSH
37603: LD_VAR 0 17
37607: PUSH
37608: LD_VAR 0 8
37612: PPUSH
37613: CALL_OW 478
37617: UNION
37618: ST_TO_ADDR
37619: GO 37595
37621: POP
37622: POP
// if not fac_list then
37623: LD_VAR 0 17
37627: NOT
37628: IFFALSE 37632
// exit ;
37630: GO 38551
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37632: LD_ADDR_VAR 0 5
37636: PUSH
37637: LD_INT 4
37639: PUSH
37640: LD_INT 5
37642: PUSH
37643: LD_INT 9
37645: PUSH
37646: LD_INT 10
37648: PUSH
37649: LD_INT 6
37651: PUSH
37652: LD_INT 7
37654: PUSH
37655: LD_INT 11
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 27
37669: PUSH
37670: LD_INT 28
37672: PUSH
37673: LD_INT 26
37675: PUSH
37676: LD_INT 30
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 43
37687: PUSH
37688: LD_INT 44
37690: PUSH
37691: LD_INT 46
37693: PUSH
37694: LD_INT 45
37696: PUSH
37697: LD_INT 47
37699: PUSH
37700: LD_INT 49
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: LIST
37715: PUSH
37716: LD_VAR 0 12
37720: ARRAY
37721: ST_TO_ADDR
// list := list isect fac_list ;
37722: LD_ADDR_VAR 0 5
37726: PUSH
37727: LD_VAR 0 5
37731: PUSH
37732: LD_VAR 0 17
37736: ISECT
37737: ST_TO_ADDR
// if not list then
37738: LD_VAR 0 5
37742: NOT
37743: IFFALSE 37747
// exit ;
37745: GO 38551
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37747: LD_VAR 0 12
37751: PUSH
37752: LD_INT 3
37754: EQUAL
37755: PUSH
37756: LD_INT 49
37758: PUSH
37759: LD_VAR 0 5
37763: IN
37764: AND
37765: PUSH
37766: LD_INT 31
37768: PPUSH
37769: LD_VAR 0 16
37773: PPUSH
37774: CALL_OW 321
37778: PUSH
37779: LD_INT 2
37781: EQUAL
37782: AND
37783: IFFALSE 37843
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37785: LD_INT 22
37787: PUSH
37788: LD_VAR 0 16
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 35
37799: PUSH
37800: LD_INT 49
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 91
37809: PUSH
37810: LD_VAR 0 1
37814: PUSH
37815: LD_INT 10
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: LIST
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: LIST
37827: PPUSH
37828: CALL_OW 69
37832: NOT
37833: IFFALSE 37843
// weapon := ru_time_lapser ;
37835: LD_ADDR_VAR 0 18
37839: PUSH
37840: LD_INT 49
37842: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37843: LD_VAR 0 12
37847: PUSH
37848: LD_INT 1
37850: PUSH
37851: LD_INT 2
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: IN
37858: PUSH
37859: LD_INT 11
37861: PUSH
37862: LD_VAR 0 5
37866: IN
37867: PUSH
37868: LD_INT 30
37870: PUSH
37871: LD_VAR 0 5
37875: IN
37876: OR
37877: AND
37878: PUSH
37879: LD_INT 6
37881: PPUSH
37882: LD_VAR 0 16
37886: PPUSH
37887: CALL_OW 321
37891: PUSH
37892: LD_INT 2
37894: EQUAL
37895: AND
37896: IFFALSE 38061
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37898: LD_INT 22
37900: PUSH
37901: LD_VAR 0 16
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: LD_INT 35
37915: PUSH
37916: LD_INT 11
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 35
37925: PUSH
37926: LD_INT 30
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 91
37940: PUSH
37941: LD_VAR 0 1
37945: PUSH
37946: LD_INT 18
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: LIST
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: LIST
37958: PPUSH
37959: CALL_OW 69
37963: NOT
37964: PUSH
37965: LD_INT 22
37967: PUSH
37968: LD_VAR 0 16
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 2
37979: PUSH
37980: LD_INT 30
37982: PUSH
37983: LD_INT 32
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 30
37992: PUSH
37993: LD_INT 33
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 91
38007: PUSH
38008: LD_VAR 0 1
38012: PUSH
38013: LD_INT 12
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: LIST
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: LIST
38025: PUSH
38026: EMPTY
38027: LIST
38028: PPUSH
38029: CALL_OW 69
38033: PUSH
38034: LD_INT 2
38036: GREATER
38037: AND
38038: IFFALSE 38061
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38040: LD_ADDR_VAR 0 18
38044: PUSH
38045: LD_INT 11
38047: PUSH
38048: LD_INT 30
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_VAR 0 12
38059: ARRAY
38060: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38061: LD_VAR 0 18
38065: NOT
38066: PUSH
38067: LD_INT 40
38069: PPUSH
38070: LD_VAR 0 16
38074: PPUSH
38075: CALL_OW 321
38079: PUSH
38080: LD_INT 2
38082: EQUAL
38083: AND
38084: PUSH
38085: LD_INT 7
38087: PUSH
38088: LD_VAR 0 5
38092: IN
38093: PUSH
38094: LD_INT 28
38096: PUSH
38097: LD_VAR 0 5
38101: IN
38102: OR
38103: PUSH
38104: LD_INT 45
38106: PUSH
38107: LD_VAR 0 5
38111: IN
38112: OR
38113: AND
38114: IFFALSE 38368
// begin hex := GetHexInfo ( x , y ) ;
38116: LD_ADDR_VAR 0 4
38120: PUSH
38121: LD_VAR 0 10
38125: PPUSH
38126: LD_VAR 0 11
38130: PPUSH
38131: CALL_OW 546
38135: ST_TO_ADDR
// if hex [ 1 ] then
38136: LD_VAR 0 4
38140: PUSH
38141: LD_INT 1
38143: ARRAY
38144: IFFALSE 38148
// exit ;
38146: GO 38551
// height := hex [ 2 ] ;
38148: LD_ADDR_VAR 0 15
38152: PUSH
38153: LD_VAR 0 4
38157: PUSH
38158: LD_INT 2
38160: ARRAY
38161: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38162: LD_ADDR_VAR 0 14
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: LD_INT 3
38175: PUSH
38176: LD_INT 5
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: ST_TO_ADDR
// for i in tmp do
38185: LD_ADDR_VAR 0 8
38189: PUSH
38190: LD_VAR 0 14
38194: PUSH
38195: FOR_IN
38196: IFFALSE 38366
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38198: LD_ADDR_VAR 0 9
38202: PUSH
38203: LD_VAR 0 10
38207: PPUSH
38208: LD_VAR 0 8
38212: PPUSH
38213: LD_INT 5
38215: PPUSH
38216: CALL_OW 272
38220: PUSH
38221: LD_VAR 0 11
38225: PPUSH
38226: LD_VAR 0 8
38230: PPUSH
38231: LD_INT 5
38233: PPUSH
38234: CALL_OW 273
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38243: LD_VAR 0 9
38247: PUSH
38248: LD_INT 1
38250: ARRAY
38251: PPUSH
38252: LD_VAR 0 9
38256: PUSH
38257: LD_INT 2
38259: ARRAY
38260: PPUSH
38261: CALL_OW 488
38265: IFFALSE 38364
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38267: LD_ADDR_VAR 0 4
38271: PUSH
38272: LD_VAR 0 9
38276: PUSH
38277: LD_INT 1
38279: ARRAY
38280: PPUSH
38281: LD_VAR 0 9
38285: PUSH
38286: LD_INT 2
38288: ARRAY
38289: PPUSH
38290: CALL_OW 546
38294: ST_TO_ADDR
// if hex [ 1 ] then
38295: LD_VAR 0 4
38299: PUSH
38300: LD_INT 1
38302: ARRAY
38303: IFFALSE 38307
// continue ;
38305: GO 38195
// h := hex [ 2 ] ;
38307: LD_ADDR_VAR 0 13
38311: PUSH
38312: LD_VAR 0 4
38316: PUSH
38317: LD_INT 2
38319: ARRAY
38320: ST_TO_ADDR
// if h + 7 < height then
38321: LD_VAR 0 13
38325: PUSH
38326: LD_INT 7
38328: PLUS
38329: PUSH
38330: LD_VAR 0 15
38334: LESS
38335: IFFALSE 38364
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38337: LD_ADDR_VAR 0 18
38341: PUSH
38342: LD_INT 7
38344: PUSH
38345: LD_INT 28
38347: PUSH
38348: LD_INT 45
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: LIST
38355: PUSH
38356: LD_VAR 0 12
38360: ARRAY
38361: ST_TO_ADDR
// break ;
38362: GO 38366
// end ; end ; end ;
38364: GO 38195
38366: POP
38367: POP
// end ; if not weapon then
38368: LD_VAR 0 18
38372: NOT
38373: IFFALSE 38433
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38375: LD_ADDR_VAR 0 5
38379: PUSH
38380: LD_VAR 0 5
38384: PUSH
38385: LD_INT 11
38387: PUSH
38388: LD_INT 30
38390: PUSH
38391: LD_INT 49
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: LIST
38398: DIFF
38399: ST_TO_ADDR
// if not list then
38400: LD_VAR 0 5
38404: NOT
38405: IFFALSE 38409
// exit ;
38407: GO 38551
// weapon := list [ rand ( 1 , list ) ] ;
38409: LD_ADDR_VAR 0 18
38413: PUSH
38414: LD_VAR 0 5
38418: PUSH
38419: LD_INT 1
38421: PPUSH
38422: LD_VAR 0 5
38426: PPUSH
38427: CALL_OW 12
38431: ARRAY
38432: ST_TO_ADDR
// end ; if weapon then
38433: LD_VAR 0 18
38437: IFFALSE 38551
// begin tmp := CostOfWeapon ( weapon ) ;
38439: LD_ADDR_VAR 0 14
38443: PUSH
38444: LD_VAR 0 18
38448: PPUSH
38449: CALL_OW 451
38453: ST_TO_ADDR
// j := GetBase ( tower ) ;
38454: LD_ADDR_VAR 0 9
38458: PUSH
38459: LD_VAR 0 1
38463: PPUSH
38464: CALL_OW 274
38468: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38469: LD_VAR 0 9
38473: PPUSH
38474: LD_INT 1
38476: PPUSH
38477: CALL_OW 275
38481: PUSH
38482: LD_VAR 0 14
38486: PUSH
38487: LD_INT 1
38489: ARRAY
38490: GREATEREQUAL
38491: PUSH
38492: LD_VAR 0 9
38496: PPUSH
38497: LD_INT 2
38499: PPUSH
38500: CALL_OW 275
38504: PUSH
38505: LD_VAR 0 14
38509: PUSH
38510: LD_INT 2
38512: ARRAY
38513: GREATEREQUAL
38514: AND
38515: PUSH
38516: LD_VAR 0 9
38520: PPUSH
38521: LD_INT 3
38523: PPUSH
38524: CALL_OW 275
38528: PUSH
38529: LD_VAR 0 14
38533: PUSH
38534: LD_INT 3
38536: ARRAY
38537: GREATEREQUAL
38538: AND
38539: IFFALSE 38551
// result := weapon ;
38541: LD_ADDR_VAR 0 3
38545: PUSH
38546: LD_VAR 0 18
38550: ST_TO_ADDR
// end ; end ;
38551: LD_VAR 0 3
38555: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38556: LD_INT 0
38558: PPUSH
38559: PPUSH
// result := true ;
38560: LD_ADDR_VAR 0 3
38564: PUSH
38565: LD_INT 1
38567: ST_TO_ADDR
// if array1 = array2 then
38568: LD_VAR 0 1
38572: PUSH
38573: LD_VAR 0 2
38577: EQUAL
38578: IFFALSE 38638
// begin for i = 1 to array1 do
38580: LD_ADDR_VAR 0 4
38584: PUSH
38585: DOUBLE
38586: LD_INT 1
38588: DEC
38589: ST_TO_ADDR
38590: LD_VAR 0 1
38594: PUSH
38595: FOR_TO
38596: IFFALSE 38634
// if array1 [ i ] <> array2 [ i ] then
38598: LD_VAR 0 1
38602: PUSH
38603: LD_VAR 0 4
38607: ARRAY
38608: PUSH
38609: LD_VAR 0 2
38613: PUSH
38614: LD_VAR 0 4
38618: ARRAY
38619: NONEQUAL
38620: IFFALSE 38632
// begin result := false ;
38622: LD_ADDR_VAR 0 3
38626: PUSH
38627: LD_INT 0
38629: ST_TO_ADDR
// break ;
38630: GO 38634
// end ;
38632: GO 38595
38634: POP
38635: POP
// end else
38636: GO 38646
// result := false ;
38638: LD_ADDR_VAR 0 3
38642: PUSH
38643: LD_INT 0
38645: ST_TO_ADDR
// end ;
38646: LD_VAR 0 3
38650: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38651: LD_INT 0
38653: PPUSH
38654: PPUSH
// if not array1 or not array2 then
38655: LD_VAR 0 1
38659: NOT
38660: PUSH
38661: LD_VAR 0 2
38665: NOT
38666: OR
38667: IFFALSE 38671
// exit ;
38669: GO 38735
// result := true ;
38671: LD_ADDR_VAR 0 3
38675: PUSH
38676: LD_INT 1
38678: ST_TO_ADDR
// for i = 1 to array1 do
38679: LD_ADDR_VAR 0 4
38683: PUSH
38684: DOUBLE
38685: LD_INT 1
38687: DEC
38688: ST_TO_ADDR
38689: LD_VAR 0 1
38693: PUSH
38694: FOR_TO
38695: IFFALSE 38733
// if array1 [ i ] <> array2 [ i ] then
38697: LD_VAR 0 1
38701: PUSH
38702: LD_VAR 0 4
38706: ARRAY
38707: PUSH
38708: LD_VAR 0 2
38712: PUSH
38713: LD_VAR 0 4
38717: ARRAY
38718: NONEQUAL
38719: IFFALSE 38731
// begin result := false ;
38721: LD_ADDR_VAR 0 3
38725: PUSH
38726: LD_INT 0
38728: ST_TO_ADDR
// break ;
38729: GO 38733
// end ;
38731: GO 38694
38733: POP
38734: POP
// end ;
38735: LD_VAR 0 3
38739: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38740: LD_INT 0
38742: PPUSH
38743: PPUSH
38744: PPUSH
// pom := GetBase ( fac ) ;
38745: LD_ADDR_VAR 0 5
38749: PUSH
38750: LD_VAR 0 1
38754: PPUSH
38755: CALL_OW 274
38759: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38760: LD_ADDR_VAR 0 4
38764: PUSH
38765: LD_VAR 0 2
38769: PUSH
38770: LD_INT 1
38772: ARRAY
38773: PPUSH
38774: LD_VAR 0 2
38778: PUSH
38779: LD_INT 2
38781: ARRAY
38782: PPUSH
38783: LD_VAR 0 2
38787: PUSH
38788: LD_INT 3
38790: ARRAY
38791: PPUSH
38792: LD_VAR 0 2
38796: PUSH
38797: LD_INT 4
38799: ARRAY
38800: PPUSH
38801: CALL_OW 449
38805: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38806: LD_ADDR_VAR 0 3
38810: PUSH
38811: LD_VAR 0 5
38815: PPUSH
38816: LD_INT 1
38818: PPUSH
38819: CALL_OW 275
38823: PUSH
38824: LD_VAR 0 4
38828: PUSH
38829: LD_INT 1
38831: ARRAY
38832: GREATEREQUAL
38833: PUSH
38834: LD_VAR 0 5
38838: PPUSH
38839: LD_INT 2
38841: PPUSH
38842: CALL_OW 275
38846: PUSH
38847: LD_VAR 0 4
38851: PUSH
38852: LD_INT 2
38854: ARRAY
38855: GREATEREQUAL
38856: AND
38857: PUSH
38858: LD_VAR 0 5
38862: PPUSH
38863: LD_INT 3
38865: PPUSH
38866: CALL_OW 275
38870: PUSH
38871: LD_VAR 0 4
38875: PUSH
38876: LD_INT 3
38878: ARRAY
38879: GREATEREQUAL
38880: AND
38881: ST_TO_ADDR
// end ;
38882: LD_VAR 0 3
38886: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38887: LD_INT 0
38889: PPUSH
38890: PPUSH
38891: PPUSH
38892: PPUSH
// pom := GetBase ( building ) ;
38893: LD_ADDR_VAR 0 3
38897: PUSH
38898: LD_VAR 0 1
38902: PPUSH
38903: CALL_OW 274
38907: ST_TO_ADDR
// if not pom then
38908: LD_VAR 0 3
38912: NOT
38913: IFFALSE 38917
// exit ;
38915: GO 39087
// btype := GetBType ( building ) ;
38917: LD_ADDR_VAR 0 5
38921: PUSH
38922: LD_VAR 0 1
38926: PPUSH
38927: CALL_OW 266
38931: ST_TO_ADDR
// if btype = b_armoury then
38932: LD_VAR 0 5
38936: PUSH
38937: LD_INT 4
38939: EQUAL
38940: IFFALSE 38950
// btype := b_barracks ;
38942: LD_ADDR_VAR 0 5
38946: PUSH
38947: LD_INT 5
38949: ST_TO_ADDR
// if btype = b_depot then
38950: LD_VAR 0 5
38954: PUSH
38955: LD_INT 0
38957: EQUAL
38958: IFFALSE 38968
// btype := b_warehouse ;
38960: LD_ADDR_VAR 0 5
38964: PUSH
38965: LD_INT 1
38967: ST_TO_ADDR
// if btype = b_workshop then
38968: LD_VAR 0 5
38972: PUSH
38973: LD_INT 2
38975: EQUAL
38976: IFFALSE 38986
// btype := b_factory ;
38978: LD_ADDR_VAR 0 5
38982: PUSH
38983: LD_INT 3
38985: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38986: LD_ADDR_VAR 0 4
38990: PUSH
38991: LD_VAR 0 5
38995: PPUSH
38996: LD_VAR 0 1
39000: PPUSH
39001: CALL_OW 248
39005: PPUSH
39006: CALL_OW 450
39010: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39011: LD_ADDR_VAR 0 2
39015: PUSH
39016: LD_VAR 0 3
39020: PPUSH
39021: LD_INT 1
39023: PPUSH
39024: CALL_OW 275
39028: PUSH
39029: LD_VAR 0 4
39033: PUSH
39034: LD_INT 1
39036: ARRAY
39037: GREATEREQUAL
39038: PUSH
39039: LD_VAR 0 3
39043: PPUSH
39044: LD_INT 2
39046: PPUSH
39047: CALL_OW 275
39051: PUSH
39052: LD_VAR 0 4
39056: PUSH
39057: LD_INT 2
39059: ARRAY
39060: GREATEREQUAL
39061: AND
39062: PUSH
39063: LD_VAR 0 3
39067: PPUSH
39068: LD_INT 3
39070: PPUSH
39071: CALL_OW 275
39075: PUSH
39076: LD_VAR 0 4
39080: PUSH
39081: LD_INT 3
39083: ARRAY
39084: GREATEREQUAL
39085: AND
39086: ST_TO_ADDR
// end ;
39087: LD_VAR 0 2
39091: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39092: LD_INT 0
39094: PPUSH
39095: PPUSH
39096: PPUSH
// pom := GetBase ( building ) ;
39097: LD_ADDR_VAR 0 4
39101: PUSH
39102: LD_VAR 0 1
39106: PPUSH
39107: CALL_OW 274
39111: ST_TO_ADDR
// if not pom then
39112: LD_VAR 0 4
39116: NOT
39117: IFFALSE 39121
// exit ;
39119: GO 39222
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39121: LD_ADDR_VAR 0 5
39125: PUSH
39126: LD_VAR 0 2
39130: PPUSH
39131: LD_VAR 0 1
39135: PPUSH
39136: CALL_OW 248
39140: PPUSH
39141: CALL_OW 450
39145: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39146: LD_ADDR_VAR 0 3
39150: PUSH
39151: LD_VAR 0 4
39155: PPUSH
39156: LD_INT 1
39158: PPUSH
39159: CALL_OW 275
39163: PUSH
39164: LD_VAR 0 5
39168: PUSH
39169: LD_INT 1
39171: ARRAY
39172: GREATEREQUAL
39173: PUSH
39174: LD_VAR 0 4
39178: PPUSH
39179: LD_INT 2
39181: PPUSH
39182: CALL_OW 275
39186: PUSH
39187: LD_VAR 0 5
39191: PUSH
39192: LD_INT 2
39194: ARRAY
39195: GREATEREQUAL
39196: AND
39197: PUSH
39198: LD_VAR 0 4
39202: PPUSH
39203: LD_INT 3
39205: PPUSH
39206: CALL_OW 275
39210: PUSH
39211: LD_VAR 0 5
39215: PUSH
39216: LD_INT 3
39218: ARRAY
39219: GREATEREQUAL
39220: AND
39221: ST_TO_ADDR
// end ;
39222: LD_VAR 0 3
39226: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39227: LD_INT 0
39229: PPUSH
39230: PPUSH
39231: PPUSH
39232: PPUSH
39233: PPUSH
39234: PPUSH
39235: PPUSH
39236: PPUSH
39237: PPUSH
39238: PPUSH
39239: PPUSH
// result := false ;
39240: LD_ADDR_VAR 0 8
39244: PUSH
39245: LD_INT 0
39247: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39248: LD_VAR 0 5
39252: NOT
39253: PUSH
39254: LD_VAR 0 1
39258: NOT
39259: OR
39260: PUSH
39261: LD_VAR 0 2
39265: NOT
39266: OR
39267: PUSH
39268: LD_VAR 0 3
39272: NOT
39273: OR
39274: IFFALSE 39278
// exit ;
39276: GO 40092
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39278: LD_ADDR_VAR 0 14
39282: PUSH
39283: LD_VAR 0 1
39287: PPUSH
39288: LD_VAR 0 2
39292: PPUSH
39293: LD_VAR 0 3
39297: PPUSH
39298: LD_VAR 0 4
39302: PPUSH
39303: LD_VAR 0 5
39307: PUSH
39308: LD_INT 1
39310: ARRAY
39311: PPUSH
39312: CALL_OW 248
39316: PPUSH
39317: LD_INT 0
39319: PPUSH
39320: CALL 41345 0 6
39324: ST_TO_ADDR
// if not hexes then
39325: LD_VAR 0 14
39329: NOT
39330: IFFALSE 39334
// exit ;
39332: GO 40092
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39334: LD_ADDR_VAR 0 17
39338: PUSH
39339: LD_VAR 0 5
39343: PPUSH
39344: LD_INT 22
39346: PUSH
39347: LD_VAR 0 13
39351: PPUSH
39352: CALL_OW 255
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 2
39363: PUSH
39364: LD_INT 30
39366: PUSH
39367: LD_INT 0
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 30
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: LIST
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PPUSH
39393: CALL_OW 72
39397: ST_TO_ADDR
// for i = 1 to hexes do
39398: LD_ADDR_VAR 0 9
39402: PUSH
39403: DOUBLE
39404: LD_INT 1
39406: DEC
39407: ST_TO_ADDR
39408: LD_VAR 0 14
39412: PUSH
39413: FOR_TO
39414: IFFALSE 40090
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39416: LD_ADDR_VAR 0 13
39420: PUSH
39421: LD_VAR 0 14
39425: PUSH
39426: LD_VAR 0 9
39430: ARRAY
39431: PUSH
39432: LD_INT 1
39434: ARRAY
39435: PPUSH
39436: LD_VAR 0 14
39440: PUSH
39441: LD_VAR 0 9
39445: ARRAY
39446: PUSH
39447: LD_INT 2
39449: ARRAY
39450: PPUSH
39451: CALL_OW 428
39455: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39456: LD_VAR 0 14
39460: PUSH
39461: LD_VAR 0 9
39465: ARRAY
39466: PUSH
39467: LD_INT 1
39469: ARRAY
39470: PPUSH
39471: LD_VAR 0 14
39475: PUSH
39476: LD_VAR 0 9
39480: ARRAY
39481: PUSH
39482: LD_INT 2
39484: ARRAY
39485: PPUSH
39486: CALL_OW 351
39490: PUSH
39491: LD_VAR 0 14
39495: PUSH
39496: LD_VAR 0 9
39500: ARRAY
39501: PUSH
39502: LD_INT 1
39504: ARRAY
39505: PPUSH
39506: LD_VAR 0 14
39510: PUSH
39511: LD_VAR 0 9
39515: ARRAY
39516: PUSH
39517: LD_INT 2
39519: ARRAY
39520: PPUSH
39521: CALL_OW 488
39525: NOT
39526: OR
39527: PUSH
39528: LD_VAR 0 13
39532: PPUSH
39533: CALL_OW 247
39537: PUSH
39538: LD_INT 3
39540: EQUAL
39541: OR
39542: IFFALSE 39548
// exit ;
39544: POP
39545: POP
39546: GO 40092
// if not tmp then
39548: LD_VAR 0 13
39552: NOT
39553: IFFALSE 39557
// continue ;
39555: GO 39413
// result := true ;
39557: LD_ADDR_VAR 0 8
39561: PUSH
39562: LD_INT 1
39564: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39565: LD_VAR 0 6
39569: PUSH
39570: LD_VAR 0 13
39574: PPUSH
39575: CALL_OW 247
39579: PUSH
39580: LD_INT 2
39582: EQUAL
39583: AND
39584: PUSH
39585: LD_VAR 0 13
39589: PPUSH
39590: CALL_OW 263
39594: PUSH
39595: LD_INT 1
39597: EQUAL
39598: AND
39599: IFFALSE 39763
// begin if IsDrivenBy ( tmp ) then
39601: LD_VAR 0 13
39605: PPUSH
39606: CALL_OW 311
39610: IFFALSE 39614
// continue ;
39612: GO 39413
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39614: LD_VAR 0 6
39618: PPUSH
39619: LD_INT 3
39621: PUSH
39622: LD_INT 60
39624: PUSH
39625: EMPTY
39626: LIST
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 3
39634: PUSH
39635: LD_INT 55
39637: PUSH
39638: EMPTY
39639: LIST
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PPUSH
39649: CALL_OW 72
39653: IFFALSE 39761
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39655: LD_ADDR_VAR 0 18
39659: PUSH
39660: LD_VAR 0 6
39664: PPUSH
39665: LD_INT 3
39667: PUSH
39668: LD_INT 60
39670: PUSH
39671: EMPTY
39672: LIST
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 3
39680: PUSH
39681: LD_INT 55
39683: PUSH
39684: EMPTY
39685: LIST
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PPUSH
39695: CALL_OW 72
39699: PUSH
39700: LD_INT 1
39702: ARRAY
39703: ST_TO_ADDR
// if IsInUnit ( driver ) then
39704: LD_VAR 0 18
39708: PPUSH
39709: CALL_OW 310
39713: IFFALSE 39724
// ComExit ( driver ) ;
39715: LD_VAR 0 18
39719: PPUSH
39720: CALL 65124 0 1
// AddComEnterUnit ( driver , tmp ) ;
39724: LD_VAR 0 18
39728: PPUSH
39729: LD_VAR 0 13
39733: PPUSH
39734: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39738: LD_VAR 0 18
39742: PPUSH
39743: LD_VAR 0 7
39747: PPUSH
39748: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39752: LD_VAR 0 18
39756: PPUSH
39757: CALL_OW 181
// end ; continue ;
39761: GO 39413
// end ; if not cleaners or not tmp in cleaners then
39763: LD_VAR 0 6
39767: NOT
39768: PUSH
39769: LD_VAR 0 13
39773: PUSH
39774: LD_VAR 0 6
39778: IN
39779: NOT
39780: OR
39781: IFFALSE 40088
// begin if dep then
39783: LD_VAR 0 17
39787: IFFALSE 39923
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39789: LD_ADDR_VAR 0 16
39793: PUSH
39794: LD_VAR 0 17
39798: PUSH
39799: LD_INT 1
39801: ARRAY
39802: PPUSH
39803: CALL_OW 250
39807: PPUSH
39808: LD_VAR 0 17
39812: PUSH
39813: LD_INT 1
39815: ARRAY
39816: PPUSH
39817: CALL_OW 254
39821: PPUSH
39822: LD_INT 5
39824: PPUSH
39825: CALL_OW 272
39829: PUSH
39830: LD_VAR 0 17
39834: PUSH
39835: LD_INT 1
39837: ARRAY
39838: PPUSH
39839: CALL_OW 251
39843: PPUSH
39844: LD_VAR 0 17
39848: PUSH
39849: LD_INT 1
39851: ARRAY
39852: PPUSH
39853: CALL_OW 254
39857: PPUSH
39858: LD_INT 5
39860: PPUSH
39861: CALL_OW 273
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39870: LD_VAR 0 16
39874: PUSH
39875: LD_INT 1
39877: ARRAY
39878: PPUSH
39879: LD_VAR 0 16
39883: PUSH
39884: LD_INT 2
39886: ARRAY
39887: PPUSH
39888: CALL_OW 488
39892: IFFALSE 39923
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39894: LD_VAR 0 13
39898: PPUSH
39899: LD_VAR 0 16
39903: PUSH
39904: LD_INT 1
39906: ARRAY
39907: PPUSH
39908: LD_VAR 0 16
39912: PUSH
39913: LD_INT 2
39915: ARRAY
39916: PPUSH
39917: CALL_OW 111
// continue ;
39921: GO 39413
// end ; end ; r := GetDir ( tmp ) ;
39923: LD_ADDR_VAR 0 15
39927: PUSH
39928: LD_VAR 0 13
39932: PPUSH
39933: CALL_OW 254
39937: ST_TO_ADDR
// if r = 5 then
39938: LD_VAR 0 15
39942: PUSH
39943: LD_INT 5
39945: EQUAL
39946: IFFALSE 39956
// r := 0 ;
39948: LD_ADDR_VAR 0 15
39952: PUSH
39953: LD_INT 0
39955: ST_TO_ADDR
// for j = r to 5 do
39956: LD_ADDR_VAR 0 10
39960: PUSH
39961: DOUBLE
39962: LD_VAR 0 15
39966: DEC
39967: ST_TO_ADDR
39968: LD_INT 5
39970: PUSH
39971: FOR_TO
39972: IFFALSE 40086
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39974: LD_ADDR_VAR 0 11
39978: PUSH
39979: LD_VAR 0 13
39983: PPUSH
39984: CALL_OW 250
39988: PPUSH
39989: LD_VAR 0 10
39993: PPUSH
39994: LD_INT 2
39996: PPUSH
39997: CALL_OW 272
40001: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40002: LD_ADDR_VAR 0 12
40006: PUSH
40007: LD_VAR 0 13
40011: PPUSH
40012: CALL_OW 251
40016: PPUSH
40017: LD_VAR 0 10
40021: PPUSH
40022: LD_INT 2
40024: PPUSH
40025: CALL_OW 273
40029: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40030: LD_VAR 0 11
40034: PPUSH
40035: LD_VAR 0 12
40039: PPUSH
40040: CALL_OW 488
40044: PUSH
40045: LD_VAR 0 11
40049: PPUSH
40050: LD_VAR 0 12
40054: PPUSH
40055: CALL_OW 428
40059: NOT
40060: AND
40061: IFFALSE 40084
// begin ComMoveXY ( tmp , _x , _y ) ;
40063: LD_VAR 0 13
40067: PPUSH
40068: LD_VAR 0 11
40072: PPUSH
40073: LD_VAR 0 12
40077: PPUSH
40078: CALL_OW 111
// break ;
40082: GO 40086
// end ; end ;
40084: GO 39971
40086: POP
40087: POP
// end ; end ;
40088: GO 39413
40090: POP
40091: POP
// end ;
40092: LD_VAR 0 8
40096: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40097: LD_INT 0
40099: PPUSH
// result := true ;
40100: LD_ADDR_VAR 0 3
40104: PUSH
40105: LD_INT 1
40107: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40108: LD_VAR 0 2
40112: PUSH
40113: LD_INT 24
40115: DOUBLE
40116: EQUAL
40117: IFTRUE 40127
40119: LD_INT 33
40121: DOUBLE
40122: EQUAL
40123: IFTRUE 40127
40125: GO 40152
40127: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40128: LD_ADDR_VAR 0 3
40132: PUSH
40133: LD_INT 32
40135: PPUSH
40136: LD_VAR 0 1
40140: PPUSH
40141: CALL_OW 321
40145: PUSH
40146: LD_INT 2
40148: EQUAL
40149: ST_TO_ADDR
40150: GO 40468
40152: LD_INT 20
40154: DOUBLE
40155: EQUAL
40156: IFTRUE 40160
40158: GO 40185
40160: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40161: LD_ADDR_VAR 0 3
40165: PUSH
40166: LD_INT 6
40168: PPUSH
40169: LD_VAR 0 1
40173: PPUSH
40174: CALL_OW 321
40178: PUSH
40179: LD_INT 2
40181: EQUAL
40182: ST_TO_ADDR
40183: GO 40468
40185: LD_INT 22
40187: DOUBLE
40188: EQUAL
40189: IFTRUE 40199
40191: LD_INT 36
40193: DOUBLE
40194: EQUAL
40195: IFTRUE 40199
40197: GO 40224
40199: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40200: LD_ADDR_VAR 0 3
40204: PUSH
40205: LD_INT 15
40207: PPUSH
40208: LD_VAR 0 1
40212: PPUSH
40213: CALL_OW 321
40217: PUSH
40218: LD_INT 2
40220: EQUAL
40221: ST_TO_ADDR
40222: GO 40468
40224: LD_INT 30
40226: DOUBLE
40227: EQUAL
40228: IFTRUE 40232
40230: GO 40257
40232: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40233: LD_ADDR_VAR 0 3
40237: PUSH
40238: LD_INT 20
40240: PPUSH
40241: LD_VAR 0 1
40245: PPUSH
40246: CALL_OW 321
40250: PUSH
40251: LD_INT 2
40253: EQUAL
40254: ST_TO_ADDR
40255: GO 40468
40257: LD_INT 28
40259: DOUBLE
40260: EQUAL
40261: IFTRUE 40271
40263: LD_INT 21
40265: DOUBLE
40266: EQUAL
40267: IFTRUE 40271
40269: GO 40296
40271: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40272: LD_ADDR_VAR 0 3
40276: PUSH
40277: LD_INT 21
40279: PPUSH
40280: LD_VAR 0 1
40284: PPUSH
40285: CALL_OW 321
40289: PUSH
40290: LD_INT 2
40292: EQUAL
40293: ST_TO_ADDR
40294: GO 40468
40296: LD_INT 16
40298: DOUBLE
40299: EQUAL
40300: IFTRUE 40304
40302: GO 40329
40304: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40305: LD_ADDR_VAR 0 3
40309: PUSH
40310: LD_INT 84
40312: PPUSH
40313: LD_VAR 0 1
40317: PPUSH
40318: CALL_OW 321
40322: PUSH
40323: LD_INT 2
40325: EQUAL
40326: ST_TO_ADDR
40327: GO 40468
40329: LD_INT 19
40331: DOUBLE
40332: EQUAL
40333: IFTRUE 40343
40335: LD_INT 23
40337: DOUBLE
40338: EQUAL
40339: IFTRUE 40343
40341: GO 40368
40343: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40344: LD_ADDR_VAR 0 3
40348: PUSH
40349: LD_INT 83
40351: PPUSH
40352: LD_VAR 0 1
40356: PPUSH
40357: CALL_OW 321
40361: PUSH
40362: LD_INT 2
40364: EQUAL
40365: ST_TO_ADDR
40366: GO 40468
40368: LD_INT 17
40370: DOUBLE
40371: EQUAL
40372: IFTRUE 40376
40374: GO 40401
40376: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40377: LD_ADDR_VAR 0 3
40381: PUSH
40382: LD_INT 39
40384: PPUSH
40385: LD_VAR 0 1
40389: PPUSH
40390: CALL_OW 321
40394: PUSH
40395: LD_INT 2
40397: EQUAL
40398: ST_TO_ADDR
40399: GO 40468
40401: LD_INT 18
40403: DOUBLE
40404: EQUAL
40405: IFTRUE 40409
40407: GO 40434
40409: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40410: LD_ADDR_VAR 0 3
40414: PUSH
40415: LD_INT 40
40417: PPUSH
40418: LD_VAR 0 1
40422: PPUSH
40423: CALL_OW 321
40427: PUSH
40428: LD_INT 2
40430: EQUAL
40431: ST_TO_ADDR
40432: GO 40468
40434: LD_INT 27
40436: DOUBLE
40437: EQUAL
40438: IFTRUE 40442
40440: GO 40467
40442: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40443: LD_ADDR_VAR 0 3
40447: PUSH
40448: LD_INT 35
40450: PPUSH
40451: LD_VAR 0 1
40455: PPUSH
40456: CALL_OW 321
40460: PUSH
40461: LD_INT 2
40463: EQUAL
40464: ST_TO_ADDR
40465: GO 40468
40467: POP
// end ;
40468: LD_VAR 0 3
40472: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40473: LD_INT 0
40475: PPUSH
40476: PPUSH
40477: PPUSH
40478: PPUSH
40479: PPUSH
40480: PPUSH
40481: PPUSH
40482: PPUSH
40483: PPUSH
40484: PPUSH
40485: PPUSH
// result := false ;
40486: LD_ADDR_VAR 0 6
40490: PUSH
40491: LD_INT 0
40493: ST_TO_ADDR
// if btype = b_depot then
40494: LD_VAR 0 2
40498: PUSH
40499: LD_INT 0
40501: EQUAL
40502: IFFALSE 40514
// begin result := true ;
40504: LD_ADDR_VAR 0 6
40508: PUSH
40509: LD_INT 1
40511: ST_TO_ADDR
// exit ;
40512: GO 41340
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40514: LD_VAR 0 1
40518: NOT
40519: PUSH
40520: LD_VAR 0 1
40524: PPUSH
40525: CALL_OW 266
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: IN
40540: NOT
40541: OR
40542: PUSH
40543: LD_VAR 0 2
40547: NOT
40548: OR
40549: PUSH
40550: LD_VAR 0 5
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: LD_INT 2
40563: PUSH
40564: LD_INT 3
40566: PUSH
40567: LD_INT 4
40569: PUSH
40570: LD_INT 5
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: IN
40581: NOT
40582: OR
40583: PUSH
40584: LD_VAR 0 3
40588: PPUSH
40589: LD_VAR 0 4
40593: PPUSH
40594: CALL_OW 488
40598: NOT
40599: OR
40600: IFFALSE 40604
// exit ;
40602: GO 41340
// side := GetSide ( depot ) ;
40604: LD_ADDR_VAR 0 9
40608: PUSH
40609: LD_VAR 0 1
40613: PPUSH
40614: CALL_OW 255
40618: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40619: LD_VAR 0 9
40623: PPUSH
40624: LD_VAR 0 2
40628: PPUSH
40629: CALL 40097 0 2
40633: NOT
40634: IFFALSE 40638
// exit ;
40636: GO 41340
// pom := GetBase ( depot ) ;
40638: LD_ADDR_VAR 0 10
40642: PUSH
40643: LD_VAR 0 1
40647: PPUSH
40648: CALL_OW 274
40652: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40653: LD_ADDR_VAR 0 11
40657: PUSH
40658: LD_VAR 0 2
40662: PPUSH
40663: LD_VAR 0 1
40667: PPUSH
40668: CALL_OW 248
40672: PPUSH
40673: CALL_OW 450
40677: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40678: LD_VAR 0 10
40682: PPUSH
40683: LD_INT 1
40685: PPUSH
40686: CALL_OW 275
40690: PUSH
40691: LD_VAR 0 11
40695: PUSH
40696: LD_INT 1
40698: ARRAY
40699: GREATEREQUAL
40700: PUSH
40701: LD_VAR 0 10
40705: PPUSH
40706: LD_INT 2
40708: PPUSH
40709: CALL_OW 275
40713: PUSH
40714: LD_VAR 0 11
40718: PUSH
40719: LD_INT 2
40721: ARRAY
40722: GREATEREQUAL
40723: AND
40724: PUSH
40725: LD_VAR 0 10
40729: PPUSH
40730: LD_INT 3
40732: PPUSH
40733: CALL_OW 275
40737: PUSH
40738: LD_VAR 0 11
40742: PUSH
40743: LD_INT 3
40745: ARRAY
40746: GREATEREQUAL
40747: AND
40748: NOT
40749: IFFALSE 40753
// exit ;
40751: GO 41340
// if GetBType ( depot ) = b_depot then
40753: LD_VAR 0 1
40757: PPUSH
40758: CALL_OW 266
40762: PUSH
40763: LD_INT 0
40765: EQUAL
40766: IFFALSE 40778
// dist := 28 else
40768: LD_ADDR_VAR 0 14
40772: PUSH
40773: LD_INT 28
40775: ST_TO_ADDR
40776: GO 40786
// dist := 36 ;
40778: LD_ADDR_VAR 0 14
40782: PUSH
40783: LD_INT 36
40785: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40786: LD_VAR 0 1
40790: PPUSH
40791: LD_VAR 0 3
40795: PPUSH
40796: LD_VAR 0 4
40800: PPUSH
40801: CALL_OW 297
40805: PUSH
40806: LD_VAR 0 14
40810: GREATER
40811: IFFALSE 40815
// exit ;
40813: GO 41340
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40815: LD_ADDR_VAR 0 12
40819: PUSH
40820: LD_VAR 0 2
40824: PPUSH
40825: LD_VAR 0 3
40829: PPUSH
40830: LD_VAR 0 4
40834: PPUSH
40835: LD_VAR 0 5
40839: PPUSH
40840: LD_VAR 0 1
40844: PPUSH
40845: CALL_OW 248
40849: PPUSH
40850: LD_INT 0
40852: PPUSH
40853: CALL 41345 0 6
40857: ST_TO_ADDR
// if not hexes then
40858: LD_VAR 0 12
40862: NOT
40863: IFFALSE 40867
// exit ;
40865: GO 41340
// hex := GetHexInfo ( x , y ) ;
40867: LD_ADDR_VAR 0 15
40871: PUSH
40872: LD_VAR 0 3
40876: PPUSH
40877: LD_VAR 0 4
40881: PPUSH
40882: CALL_OW 546
40886: ST_TO_ADDR
// if hex [ 1 ] then
40887: LD_VAR 0 15
40891: PUSH
40892: LD_INT 1
40894: ARRAY
40895: IFFALSE 40899
// exit ;
40897: GO 41340
// height := hex [ 2 ] ;
40899: LD_ADDR_VAR 0 13
40903: PUSH
40904: LD_VAR 0 15
40908: PUSH
40909: LD_INT 2
40911: ARRAY
40912: ST_TO_ADDR
// for i = 1 to hexes do
40913: LD_ADDR_VAR 0 7
40917: PUSH
40918: DOUBLE
40919: LD_INT 1
40921: DEC
40922: ST_TO_ADDR
40923: LD_VAR 0 12
40927: PUSH
40928: FOR_TO
40929: IFFALSE 41259
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40931: LD_VAR 0 12
40935: PUSH
40936: LD_VAR 0 7
40940: ARRAY
40941: PUSH
40942: LD_INT 1
40944: ARRAY
40945: PPUSH
40946: LD_VAR 0 12
40950: PUSH
40951: LD_VAR 0 7
40955: ARRAY
40956: PUSH
40957: LD_INT 2
40959: ARRAY
40960: PPUSH
40961: CALL_OW 488
40965: NOT
40966: PUSH
40967: LD_VAR 0 12
40971: PUSH
40972: LD_VAR 0 7
40976: ARRAY
40977: PUSH
40978: LD_INT 1
40980: ARRAY
40981: PPUSH
40982: LD_VAR 0 12
40986: PUSH
40987: LD_VAR 0 7
40991: ARRAY
40992: PUSH
40993: LD_INT 2
40995: ARRAY
40996: PPUSH
40997: CALL_OW 428
41001: PUSH
41002: LD_INT 0
41004: GREATER
41005: OR
41006: PUSH
41007: LD_VAR 0 12
41011: PUSH
41012: LD_VAR 0 7
41016: ARRAY
41017: PUSH
41018: LD_INT 1
41020: ARRAY
41021: PPUSH
41022: LD_VAR 0 12
41026: PUSH
41027: LD_VAR 0 7
41031: ARRAY
41032: PUSH
41033: LD_INT 2
41035: ARRAY
41036: PPUSH
41037: CALL_OW 351
41041: OR
41042: IFFALSE 41048
// exit ;
41044: POP
41045: POP
41046: GO 41340
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41048: LD_ADDR_VAR 0 8
41052: PUSH
41053: LD_VAR 0 12
41057: PUSH
41058: LD_VAR 0 7
41062: ARRAY
41063: PUSH
41064: LD_INT 1
41066: ARRAY
41067: PPUSH
41068: LD_VAR 0 12
41072: PUSH
41073: LD_VAR 0 7
41077: ARRAY
41078: PUSH
41079: LD_INT 2
41081: ARRAY
41082: PPUSH
41083: CALL_OW 546
41087: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41088: LD_VAR 0 8
41092: PUSH
41093: LD_INT 1
41095: ARRAY
41096: PUSH
41097: LD_VAR 0 8
41101: PUSH
41102: LD_INT 2
41104: ARRAY
41105: PUSH
41106: LD_VAR 0 13
41110: PUSH
41111: LD_INT 2
41113: PLUS
41114: GREATER
41115: OR
41116: PUSH
41117: LD_VAR 0 8
41121: PUSH
41122: LD_INT 2
41124: ARRAY
41125: PUSH
41126: LD_VAR 0 13
41130: PUSH
41131: LD_INT 2
41133: MINUS
41134: LESS
41135: OR
41136: PUSH
41137: LD_VAR 0 8
41141: PUSH
41142: LD_INT 3
41144: ARRAY
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: LD_INT 8
41151: PUSH
41152: LD_INT 9
41154: PUSH
41155: LD_INT 10
41157: PUSH
41158: LD_INT 11
41160: PUSH
41161: LD_INT 12
41163: PUSH
41164: LD_INT 13
41166: PUSH
41167: LD_INT 16
41169: PUSH
41170: LD_INT 17
41172: PUSH
41173: LD_INT 18
41175: PUSH
41176: LD_INT 19
41178: PUSH
41179: LD_INT 20
41181: PUSH
41182: LD_INT 21
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: IN
41200: NOT
41201: OR
41202: PUSH
41203: LD_VAR 0 8
41207: PUSH
41208: LD_INT 5
41210: ARRAY
41211: NOT
41212: OR
41213: PUSH
41214: LD_VAR 0 8
41218: PUSH
41219: LD_INT 6
41221: ARRAY
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 2
41228: PUSH
41229: LD_INT 7
41231: PUSH
41232: LD_INT 9
41234: PUSH
41235: LD_INT 10
41237: PUSH
41238: LD_INT 11
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: IN
41249: NOT
41250: OR
41251: IFFALSE 41257
// exit ;
41253: POP
41254: POP
41255: GO 41340
// end ;
41257: GO 40928
41259: POP
41260: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41261: LD_VAR 0 9
41265: PPUSH
41266: LD_VAR 0 3
41270: PPUSH
41271: LD_VAR 0 4
41275: PPUSH
41276: LD_INT 20
41278: PPUSH
41279: CALL 33263 0 4
41283: PUSH
41284: LD_INT 4
41286: ARRAY
41287: IFFALSE 41291
// exit ;
41289: GO 41340
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41291: LD_VAR 0 2
41295: PUSH
41296: LD_INT 29
41298: PUSH
41299: LD_INT 30
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: IN
41306: PUSH
41307: LD_VAR 0 3
41311: PPUSH
41312: LD_VAR 0 4
41316: PPUSH
41317: LD_VAR 0 9
41321: PPUSH
41322: CALL_OW 440
41326: NOT
41327: AND
41328: IFFALSE 41332
// exit ;
41330: GO 41340
// result := true ;
41332: LD_ADDR_VAR 0 6
41336: PUSH
41337: LD_INT 1
41339: ST_TO_ADDR
// end ;
41340: LD_VAR 0 6
41344: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41345: LD_INT 0
41347: PPUSH
41348: PPUSH
41349: PPUSH
41350: PPUSH
41351: PPUSH
41352: PPUSH
41353: PPUSH
41354: PPUSH
41355: PPUSH
41356: PPUSH
41357: PPUSH
41358: PPUSH
41359: PPUSH
41360: PPUSH
41361: PPUSH
41362: PPUSH
41363: PPUSH
41364: PPUSH
41365: PPUSH
41366: PPUSH
41367: PPUSH
41368: PPUSH
41369: PPUSH
41370: PPUSH
41371: PPUSH
41372: PPUSH
41373: PPUSH
41374: PPUSH
41375: PPUSH
41376: PPUSH
41377: PPUSH
41378: PPUSH
41379: PPUSH
41380: PPUSH
41381: PPUSH
41382: PPUSH
41383: PPUSH
41384: PPUSH
41385: PPUSH
41386: PPUSH
41387: PPUSH
41388: PPUSH
41389: PPUSH
41390: PPUSH
41391: PPUSH
41392: PPUSH
41393: PPUSH
41394: PPUSH
41395: PPUSH
41396: PPUSH
41397: PPUSH
41398: PPUSH
41399: PPUSH
41400: PPUSH
41401: PPUSH
41402: PPUSH
41403: PPUSH
41404: PPUSH
// result = [ ] ;
41405: LD_ADDR_VAR 0 7
41409: PUSH
41410: EMPTY
41411: ST_TO_ADDR
// temp_list = [ ] ;
41412: LD_ADDR_VAR 0 9
41416: PUSH
41417: EMPTY
41418: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41419: LD_VAR 0 4
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: LD_INT 2
41432: PUSH
41433: LD_INT 3
41435: PUSH
41436: LD_INT 4
41438: PUSH
41439: LD_INT 5
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: IN
41450: NOT
41451: PUSH
41452: LD_VAR 0 1
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: LD_INT 1
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: IN
41467: PUSH
41468: LD_VAR 0 5
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: LD_INT 2
41478: PUSH
41479: LD_INT 3
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: LIST
41486: IN
41487: NOT
41488: AND
41489: OR
41490: IFFALSE 41494
// exit ;
41492: GO 59885
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41494: LD_VAR 0 1
41498: PUSH
41499: LD_INT 6
41501: PUSH
41502: LD_INT 7
41504: PUSH
41505: LD_INT 8
41507: PUSH
41508: LD_INT 13
41510: PUSH
41511: LD_INT 12
41513: PUSH
41514: LD_INT 15
41516: PUSH
41517: LD_INT 11
41519: PUSH
41520: LD_INT 14
41522: PUSH
41523: LD_INT 10
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: IN
41537: IFFALSE 41547
// btype = b_lab ;
41539: LD_ADDR_VAR 0 1
41543: PUSH
41544: LD_INT 6
41546: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41547: LD_VAR 0 6
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: LIST
41565: IN
41566: NOT
41567: PUSH
41568: LD_VAR 0 1
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: LD_INT 2
41581: PUSH
41582: LD_INT 3
41584: PUSH
41585: LD_INT 6
41587: PUSH
41588: LD_INT 36
41590: PUSH
41591: LD_INT 4
41593: PUSH
41594: LD_INT 5
41596: PUSH
41597: LD_INT 31
41599: PUSH
41600: LD_INT 32
41602: PUSH
41603: LD_INT 33
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: IN
41619: NOT
41620: PUSH
41621: LD_VAR 0 6
41625: PUSH
41626: LD_INT 1
41628: EQUAL
41629: AND
41630: OR
41631: PUSH
41632: LD_VAR 0 1
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: LD_INT 3
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: IN
41647: NOT
41648: PUSH
41649: LD_VAR 0 6
41653: PUSH
41654: LD_INT 2
41656: EQUAL
41657: AND
41658: OR
41659: IFFALSE 41669
// mode = 0 ;
41661: LD_ADDR_VAR 0 6
41665: PUSH
41666: LD_INT 0
41668: ST_TO_ADDR
// case mode of 0 :
41669: LD_VAR 0 6
41673: PUSH
41674: LD_INT 0
41676: DOUBLE
41677: EQUAL
41678: IFTRUE 41682
41680: GO 53135
41682: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41683: LD_ADDR_VAR 0 11
41687: PUSH
41688: LD_INT 0
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: PUSH
41722: LD_INT 1
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: LD_INT 1
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: LD_INT 2
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: LD_INT 2
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: LD_INT 2
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 2
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 3
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 3
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: LD_INT 2
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41876: LD_ADDR_VAR 0 12
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: NEG
41946: PUSH
41947: LD_INT 1
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 2
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 2
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 2
41999: NEG
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 3
42033: NEG
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 3
42044: NEG
42045: PUSH
42046: LD_INT 1
42048: NEG
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42072: LD_ADDR_VAR 0 13
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: LD_INT 1
42092: NEG
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 1
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 1
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: LD_INT 2
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 2
42175: PUSH
42176: LD_INT 2
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: LD_INT 2
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 2
42195: NEG
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: LD_INT 2
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 2
42219: NEG
42220: PUSH
42221: LD_INT 3
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 3
42231: NEG
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 3
42243: NEG
42244: PUSH
42245: LD_INT 3
42247: NEG
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42271: LD_ADDR_VAR 0 14
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 1
42340: NEG
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: LD_INT 2
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: LD_INT 2
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 2
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 2
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: LD_INT 3
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: LD_INT 3
42432: NEG
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: LD_INT 2
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42467: LD_ADDR_VAR 0 15
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 2
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 2
42590: NEG
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 2
42601: NEG
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 3
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 3
42634: PUSH
42635: LD_INT 1
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42660: LD_ADDR_VAR 0 16
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: LD_INT 1
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: NEG
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: LD_INT 2
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 2
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: LD_INT 2
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 2
42783: NEG
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 2
42795: NEG
42796: PUSH
42797: LD_INT 2
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 3
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 3
42817: PUSH
42818: LD_INT 3
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: LD_INT 3
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42853: LD_ADDR_VAR 0 17
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: LD_INT 0
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: LD_INT 2
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: LD_INT 2
42949: NEG
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 2
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 2
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: LD_INT 2
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: LD_INT 2
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: LD_INT 2
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 2
43029: NEG
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 2
43040: NEG
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: LD_INT 2
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43083: LD_ADDR_VAR 0 18
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: LD_INT 2
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 2
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 2
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 2
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 2
43218: PUSH
43219: LD_INT 2
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: LD_INT 2
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 2
43259: NEG
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 2
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 2
43282: NEG
43283: PUSH
43284: LD_INT 2
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43313: LD_ADDR_VAR 0 19
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: LD_INT 1
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 1
43371: NEG
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: LD_INT 2
43398: NEG
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: LD_INT 2
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 2
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 2
43448: PUSH
43449: LD_INT 2
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: LD_INT 2
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 2
43489: NEG
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 2
43500: NEG
43501: PUSH
43502: LD_INT 1
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: LD_INT 2
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43543: LD_ADDR_VAR 0 20
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: LD_INT 1
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 1
43581: PUSH
43582: LD_INT 1
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: LD_INT 2
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: LD_INT 2
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 2
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 2
43678: PUSH
43679: LD_INT 2
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: LD_INT 2
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 2
43719: NEG
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 2
43730: NEG
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 2
43742: NEG
43743: PUSH
43744: LD_INT 2
43746: NEG
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43773: LD_ADDR_VAR 0 21
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: LD_INT 2
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 2
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 2
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 2
43908: PUSH
43909: LD_INT 2
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: LD_INT 2
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: LD_INT 2
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 2
43949: NEG
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 2
43960: NEG
43961: PUSH
43962: LD_INT 1
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 2
43972: NEG
43973: PUSH
43974: LD_INT 2
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44003: LD_ADDR_VAR 0 22
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: LD_INT 1
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: NEG
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: NEG
44085: PUSH
44086: LD_INT 2
44088: NEG
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 2
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 2
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 2
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 2
44138: PUSH
44139: LD_INT 2
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: LD_INT 2
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 2
44179: NEG
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 2
44190: NEG
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 2
44202: NEG
44203: PUSH
44204: LD_INT 2
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44233: LD_ADDR_VAR 0 23
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: LD_INT 2
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: LD_INT 2
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: NEG
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 2
44432: NEG
44433: PUSH
44434: LD_INT 2
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: LD_INT 3
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: LD_INT 3
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 2
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44513: LD_ADDR_VAR 0 24
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: LD_INT 2
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: LD_INT 2
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: LD_INT 1
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 2
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: LD_INT 2
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 2
44689: NEG
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 3
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 3
44756: PUSH
44757: LD_INT 2
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44789: LD_ADDR_VAR 0 25
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 3
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 3
45010: PUSH
45011: LD_INT 2
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: LD_INT 3
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: LD_INT 3
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45063: LD_ADDR_VAR 0 26
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: NEG
45263: PUSH
45264: LD_INT 2
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: PUSH
45275: LD_INT 3
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: LD_INT 3
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: LD_INT 2
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: NEG
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45339: LD_ADDR_VAR 0 27
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: LD_INT 2
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: LD_INT 2
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 2
45526: NEG
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: NEG
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: NEG
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 3
45572: NEG
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 3
45584: NEG
45585: PUSH
45586: LD_INT 2
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45619: LD_ADDR_VAR 0 28
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: LD_INT 2
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: LD_INT 2
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: NEG
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: NEG
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 2
45830: NEG
45831: PUSH
45832: LD_INT 3
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 3
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 3
45854: NEG
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 3
45866: NEG
45867: PUSH
45868: LD_INT 2
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45901: LD_ADDR_VAR 0 29
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: LD_INT 2
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 2
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 2
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 2
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: LD_INT 2
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: LD_INT 3
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 3
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: LD_INT 3
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: LD_INT 2
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 3
46145: NEG
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46180: LD_ADDR_VAR 0 30
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 2
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: LD_INT 3
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: LD_INT 2
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 3
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: LD_INT 3
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 2
46412: NEG
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 3
46423: NEG
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46458: LD_ADDR_VAR 0 31
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: LD_INT 2
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 1
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: LD_INT 2
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: LD_INT 2
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: LD_INT 3
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 2
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 3
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: LD_INT 3
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 3
46701: NEG
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46736: LD_ADDR_VAR 0 32
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: LD_INT 3
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 3
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 2
46958: PUSH
46959: LD_INT 3
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 3
46979: NEG
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47014: LD_ADDR_VAR 0 33
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: LD_INT 2
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 2
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: LD_INT 2
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 2
47169: NEG
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 2
47192: NEG
47193: PUSH
47194: LD_INT 2
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: LD_INT 3
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 2
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 3
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: LD_INT 3
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: LD_INT 2
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 3
47258: NEG
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47293: LD_ADDR_VAR 0 34
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 2
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: PUSH
47419: LD_INT 2
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 2
47449: NEG
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: NEG
47461: PUSH
47462: LD_INT 1
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: LD_INT 2
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 3
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 3
47507: PUSH
47508: LD_INT 2
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: LD_INT 3
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 2
47527: NEG
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 3
47538: NEG
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47573: LD_ADDR_VAR 0 35
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47685: LD_ADDR_VAR 0 36
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: LD_INT 2
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47797: LD_ADDR_VAR 0 37
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47909: LD_ADDR_VAR 0 38
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 2
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48021: LD_ADDR_VAR 0 39
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: LD_INT 2
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 2
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48133: LD_ADDR_VAR 0 40
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: LD_INT 1
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48245: LD_ADDR_VAR 0 41
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: LD_INT 2
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: NEG
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 2
48435: NEG
48436: PUSH
48437: LD_INT 3
48439: NEG
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 3
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 3
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 3
48478: PUSH
48479: LD_INT 2
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 3
48488: PUSH
48489: LD_INT 3
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: LD_INT 3
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 2
48508: NEG
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 3
48519: NEG
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 3
48530: NEG
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 3
48542: NEG
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 3
48554: NEG
48555: PUSH
48556: LD_INT 3
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48595: LD_ADDR_VAR 0 42
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: LD_INT 2
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 2
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: NEG
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 2
48785: NEG
48786: PUSH
48787: LD_INT 3
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: LD_INT 3
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: LD_INT 3
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 3
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 3
48841: PUSH
48842: LD_INT 3
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 2
48851: PUSH
48852: LD_INT 3
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: LD_INT 3
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: LD_INT 3
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 3
48892: NEG
48893: PUSH
48894: LD_INT 2
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 3
48904: NEG
48905: PUSH
48906: LD_INT 3
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48945: LD_ADDR_VAR 0 43
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: LD_INT 2
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 2
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: NEG
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 2
49111: NEG
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: NEG
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: LD_INT 3
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 3
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: LD_INT 2
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 3
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 3
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 3
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 3
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 2
49230: NEG
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 3
49241: NEG
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 3
49252: NEG
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49293: LD_ADDR_VAR 0 44
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: LD_INT 2
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: NEG
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: LD_INT 2
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: LD_INT 3
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 2
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 3
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 3
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 3
49526: PUSH
49527: LD_INT 2
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 3
49536: PUSH
49537: LD_INT 3
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 2
49546: PUSH
49547: LD_INT 3
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: NEG
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 3
49567: NEG
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 3
49578: NEG
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 3
49590: NEG
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 3
49602: NEG
49603: PUSH
49604: LD_INT 3
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49643: LD_ADDR_VAR 0 45
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 2
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: LD_INT 2
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: NEG
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 2
49833: NEG
49834: PUSH
49835: LD_INT 3
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: LD_INT 3
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: LD_INT 3
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 3
49879: PUSH
49880: LD_INT 2
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 3
49889: PUSH
49890: LD_INT 3
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 2
49899: PUSH
49900: LD_INT 3
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: LD_INT 3
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: LD_INT 3
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: LD_INT 2
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 3
49940: NEG
49941: PUSH
49942: LD_INT 2
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 3
49952: NEG
49953: PUSH
49954: LD_INT 3
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49993: LD_ADDR_VAR 0 46
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 2
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 2
50170: NEG
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 3
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 3
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: LD_INT 2
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 3
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 3
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 3
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: LD_INT 2
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 3
50289: NEG
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 3
50300: NEG
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50341: LD_ADDR_VAR 0 47
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 2
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50492: LD_ADDR_VAR 0 48
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: NEG
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 2
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 2
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50639: LD_ADDR_VAR 0 49
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 1
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 2
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 2
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 2
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50783: LD_ADDR_VAR 0 50
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 2
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 2
50874: PUSH
50875: LD_INT 2
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: LD_INT 2
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: LD_INT 2
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50927: LD_ADDR_VAR 0 51
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51074: LD_ADDR_VAR 0 52
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: NEG
51202: PUSH
51203: LD_INT 2
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51225: LD_ADDR_VAR 0 53
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: LD_INT 2
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 2
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 2
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 2
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 2
51360: PUSH
51361: LD_INT 2
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: LD_INT 2
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: NEG
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 2
51424: NEG
51425: PUSH
51426: LD_INT 2
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51455: LD_ADDR_VAR 0 54
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 2
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 2
51590: PUSH
51591: LD_INT 2
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: LD_INT 2
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 2
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: LD_INT 2
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51685: LD_ADDR_VAR 0 55
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: LD_INT 2
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: LD_INT 2
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 2
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: LD_INT 2
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 2
51861: NEG
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 2
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51915: LD_ADDR_VAR 0 56
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: NEG
51997: PUSH
51998: LD_INT 2
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 2
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: LD_INT 2
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: LD_INT 2
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 2
52091: NEG
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: LD_INT 2
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52145: LD_ADDR_VAR 0 57
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: NEG
52227: PUSH
52228: LD_INT 2
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: LD_INT 2
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 2
52332: NEG
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 2
52344: NEG
52345: PUSH
52346: LD_INT 2
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52375: LD_ADDR_VAR 0 58
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: LD_INT 2
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 2
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: LD_INT 2
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 2
52551: NEG
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52605: LD_ADDR_VAR 0 59
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52693: LD_ADDR_VAR 0 60
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52781: LD_ADDR_VAR 0 61
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52869: LD_ADDR_VAR 0 62
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: NEG
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52957: LD_ADDR_VAR 0 63
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 1
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53045: LD_ADDR_VAR 0 64
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: ST_TO_ADDR
// end ; 1 :
53133: GO 59030
53135: LD_INT 1
53137: DOUBLE
53138: EQUAL
53139: IFTRUE 53143
53141: GO 55766
53143: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53144: LD_ADDR_VAR 0 11
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: LD_INT 3
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: LD_INT 3
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: LIST
53187: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53188: LD_ADDR_VAR 0 12
53192: PUSH
53193: LD_INT 2
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 3
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 3
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: LIST
53228: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53229: LD_ADDR_VAR 0 13
53233: PUSH
53234: LD_INT 3
53236: PUSH
53237: LD_INT 2
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 3
53246: PUSH
53247: LD_INT 3
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: LD_INT 3
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: LIST
53268: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53269: LD_ADDR_VAR 0 14
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 3
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: LD_INT 3
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: LIST
53309: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53310: LD_ADDR_VAR 0 15
53314: PUSH
53315: LD_INT 2
53317: NEG
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 3
53328: NEG
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 3
53339: NEG
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: LIST
53353: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53354: LD_ADDR_VAR 0 16
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: LD_INT 3
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 3
53373: NEG
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 3
53385: NEG
53386: PUSH
53387: LD_INT 3
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: LIST
53399: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53400: LD_ADDR_VAR 0 17
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: LD_INT 3
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: LD_INT 3
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: LIST
53443: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53444: LD_ADDR_VAR 0 18
53448: PUSH
53449: LD_INT 2
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 3
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 3
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: LIST
53484: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53485: LD_ADDR_VAR 0 19
53489: PUSH
53490: LD_INT 3
53492: PUSH
53493: LD_INT 2
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 3
53502: PUSH
53503: LD_INT 3
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 2
53512: PUSH
53513: LD_INT 3
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: LIST
53524: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53525: LD_ADDR_VAR 0 20
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: LD_INT 3
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 3
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: LIST
53565: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53566: LD_ADDR_VAR 0 21
53570: PUSH
53571: LD_INT 2
53573: NEG
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 3
53584: NEG
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 3
53595: NEG
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: LIST
53609: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53610: LD_ADDR_VAR 0 22
53614: PUSH
53615: LD_INT 2
53617: NEG
53618: PUSH
53619: LD_INT 3
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 3
53629: NEG
53630: PUSH
53631: LD_INT 2
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 3
53641: NEG
53642: PUSH
53643: LD_INT 3
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: LIST
53655: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53656: LD_ADDR_VAR 0 23
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: LD_INT 3
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: LD_INT 4
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: LD_INT 3
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: LIST
53699: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53700: LD_ADDR_VAR 0 24
53704: PUSH
53705: LD_INT 3
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 3
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 4
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: LIST
53740: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53741: LD_ADDR_VAR 0 25
53745: PUSH
53746: LD_INT 3
53748: PUSH
53749: LD_INT 3
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 4
53758: PUSH
53759: LD_INT 3
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 3
53768: PUSH
53769: LD_INT 4
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53781: LD_ADDR_VAR 0 26
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 3
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: LD_INT 4
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: LD_INT 3
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53822: LD_ADDR_VAR 0 27
53826: PUSH
53827: LD_INT 3
53829: NEG
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 3
53840: NEG
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 4
53851: NEG
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: LIST
53865: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53866: LD_ADDR_VAR 0 28
53870: PUSH
53871: LD_INT 3
53873: NEG
53874: PUSH
53875: LD_INT 3
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 3
53885: NEG
53886: PUSH
53887: LD_INT 4
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 4
53897: NEG
53898: PUSH
53899: LD_INT 3
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: LIST
53911: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53912: LD_ADDR_VAR 0 29
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 3
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: LD_INT 3
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: LD_INT 4
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 4
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: LD_INT 3
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: LD_INT 5
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 5
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: LD_INT 4
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: LD_INT 6
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: LD_INT 6
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: LD_INT 5
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54067: LD_ADDR_VAR 0 30
54071: PUSH
54072: LD_INT 2
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 3
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 3
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 3
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 4
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 4
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 4
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 5
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 5
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 5
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 6
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 6
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54210: LD_ADDR_VAR 0 31
54214: PUSH
54215: LD_INT 3
54217: PUSH
54218: LD_INT 2
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 3
54227: PUSH
54228: LD_INT 3
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: LD_INT 3
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 4
54247: PUSH
54248: LD_INT 3
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 4
54257: PUSH
54258: LD_INT 4
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 3
54267: PUSH
54268: LD_INT 4
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 5
54277: PUSH
54278: LD_INT 4
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 5
54287: PUSH
54288: LD_INT 5
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 4
54297: PUSH
54298: LD_INT 5
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 6
54307: PUSH
54308: LD_INT 5
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 6
54317: PUSH
54318: LD_INT 6
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 5
54327: PUSH
54328: LD_INT 6
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54349: LD_ADDR_VAR 0 32
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: LD_INT 3
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 3
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: LD_INT 2
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: LD_INT 4
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 4
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 3
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 5
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 5
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 4
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 6
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 6
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 5
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54492: LD_ADDR_VAR 0 33
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 3
54510: NEG
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 3
54521: NEG
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 3
54533: NEG
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 4
54544: NEG
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 4
54555: NEG
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 4
54567: NEG
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 5
54578: NEG
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 5
54589: NEG
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 5
54601: NEG
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 6
54612: NEG
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 6
54623: NEG
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54647: LD_ADDR_VAR 0 34
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: LD_INT 3
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 3
54666: NEG
54667: PUSH
54668: LD_INT 2
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 3
54678: NEG
54679: PUSH
54680: LD_INT 3
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 3
54690: NEG
54691: PUSH
54692: LD_INT 4
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 4
54702: NEG
54703: PUSH
54704: LD_INT 3
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 4
54714: NEG
54715: PUSH
54716: LD_INT 4
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 4
54726: NEG
54727: PUSH
54728: LD_INT 5
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 5
54738: NEG
54739: PUSH
54740: LD_INT 4
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 5
54750: NEG
54751: PUSH
54752: LD_INT 5
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 5
54762: NEG
54763: PUSH
54764: LD_INT 6
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 6
54774: NEG
54775: PUSH
54776: LD_INT 5
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 6
54786: NEG
54787: PUSH
54788: LD_INT 6
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54810: LD_ADDR_VAR 0 41
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: LD_INT 3
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: LD_INT 2
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: LIST
54853: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54854: LD_ADDR_VAR 0 42
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 3
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: LIST
54894: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54895: LD_ADDR_VAR 0 43
54899: PUSH
54900: LD_INT 2
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 3
54912: PUSH
54913: LD_INT 2
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: PUSH
54923: LD_INT 3
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: LIST
54934: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54935: LD_ADDR_VAR 0 44
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: LD_INT 3
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: LD_INT 2
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: LIST
54975: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54976: LD_ADDR_VAR 0 45
54980: PUSH
54981: LD_INT 2
54983: NEG
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 2
54994: NEG
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 3
55005: NEG
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: LIST
55019: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55020: LD_ADDR_VAR 0 46
55024: PUSH
55025: LD_INT 2
55027: NEG
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 2
55039: NEG
55040: PUSH
55041: LD_INT 3
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 3
55051: NEG
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: LIST
55065: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55066: LD_ADDR_VAR 0 47
55070: PUSH
55071: LD_INT 2
55073: NEG
55074: PUSH
55075: LD_INT 3
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55099: LD_ADDR_VAR 0 48
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: LD_INT 2
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55130: LD_ADDR_VAR 0 49
55134: PUSH
55135: LD_INT 3
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 3
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55159: LD_ADDR_VAR 0 50
55163: PUSH
55164: LD_INT 2
55166: PUSH
55167: LD_INT 3
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 3
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55188: LD_ADDR_VAR 0 51
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55219: LD_ADDR_VAR 0 52
55223: PUSH
55224: LD_INT 3
55226: NEG
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 3
55238: NEG
55239: PUSH
55240: LD_INT 2
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55252: LD_ADDR_VAR 0 53
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: LD_INT 3
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: LD_INT 3
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: LIST
55295: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55296: LD_ADDR_VAR 0 54
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 3
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 3
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: LIST
55336: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55337: LD_ADDR_VAR 0 55
55341: PUSH
55342: LD_INT 3
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 3
55354: PUSH
55355: LD_INT 3
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: LD_INT 3
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: LIST
55376: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55377: LD_ADDR_VAR 0 56
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: LD_INT 3
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 3
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: LIST
55417: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55418: LD_ADDR_VAR 0 57
55422: PUSH
55423: LD_INT 2
55425: NEG
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 3
55436: NEG
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 3
55447: NEG
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: LIST
55461: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55462: LD_ADDR_VAR 0 58
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: LD_INT 3
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 3
55481: NEG
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 3
55493: NEG
55494: PUSH
55495: LD_INT 3
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: LIST
55507: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55508: LD_ADDR_VAR 0 59
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 2
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: LIST
55551: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55552: LD_ADDR_VAR 0 60
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: LIST
55592: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55593: LD_ADDR_VAR 0 61
55597: PUSH
55598: LD_INT 2
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 2
55610: PUSH
55611: LD_INT 2
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: LD_INT 2
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: LIST
55632: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55633: LD_ADDR_VAR 0 62
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: LIST
55673: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55674: LD_ADDR_VAR 0 63
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: LIST
55717: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55718: LD_ADDR_VAR 0 64
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: LD_INT 2
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: NEG
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: NEG
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: LIST
55763: ST_TO_ADDR
// end ; 2 :
55764: GO 59030
55766: LD_INT 2
55768: DOUBLE
55769: EQUAL
55770: IFTRUE 55774
55772: GO 59029
55774: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55775: LD_ADDR_VAR 0 29
55779: PUSH
55780: LD_INT 4
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 4
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 5
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 5
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 4
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 3
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 3
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 3
55854: PUSH
55855: LD_INT 2
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 5
55865: PUSH
55866: LD_INT 2
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 3
55875: PUSH
55876: LD_INT 3
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 3
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 4
55895: PUSH
55896: LD_INT 3
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 4
55905: PUSH
55906: LD_INT 4
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 3
55915: PUSH
55916: LD_INT 4
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: PUSH
55926: LD_INT 3
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: LD_INT 2
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 4
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: LD_INT 4
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 4
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 3
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: LD_INT 4
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: LD_INT 5
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 5
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: LD_INT 4
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 3
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: LD_INT 5
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: LD_INT 3
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 3
56058: NEG
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 3
56069: NEG
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 3
56103: NEG
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 4
56114: NEG
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 4
56125: NEG
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 4
56137: NEG
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: LD_INT 2
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 4
56160: NEG
56161: PUSH
56162: LD_INT 4
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 4
56172: NEG
56173: PUSH
56174: LD_INT 5
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 3
56184: NEG
56185: PUSH
56186: LD_INT 4
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 3
56196: NEG
56197: PUSH
56198: LD_INT 3
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 4
56208: NEG
56209: PUSH
56210: LD_INT 3
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 5
56220: NEG
56221: PUSH
56222: LD_INT 4
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 5
56232: NEG
56233: PUSH
56234: LD_INT 5
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 3
56244: NEG
56245: PUSH
56246: LD_INT 5
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 5
56256: NEG
56257: PUSH
56258: LD_INT 3
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56313: LD_ADDR_VAR 0 30
56317: PUSH
56318: LD_INT 4
56320: PUSH
56321: LD_INT 4
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 4
56330: PUSH
56331: LD_INT 3
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 5
56340: PUSH
56341: LD_INT 4
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 5
56350: PUSH
56351: LD_INT 5
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 4
56360: PUSH
56361: LD_INT 5
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 3
56370: PUSH
56371: LD_INT 4
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 3
56380: PUSH
56381: LD_INT 3
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 5
56390: PUSH
56391: LD_INT 3
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 3
56400: PUSH
56401: LD_INT 5
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: LD_INT 3
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: LD_INT 3
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 4
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 4
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: LD_INT 2
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: LD_INT 4
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 2
56492: NEG
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 4
56503: NEG
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 4
56514: NEG
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 3
56526: NEG
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 3
56537: NEG
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 4
56548: NEG
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 5
56559: NEG
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 5
56570: NEG
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 5
56582: NEG
56583: PUSH
56584: LD_INT 2
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 3
56594: NEG
56595: PUSH
56596: LD_INT 2
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 3
56605: NEG
56606: PUSH
56607: LD_INT 3
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 3
56617: NEG
56618: PUSH
56619: LD_INT 4
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: LD_INT 3
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 2
56641: NEG
56642: PUSH
56643: LD_INT 2
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 3
56653: NEG
56654: PUSH
56655: LD_INT 2
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 4
56665: NEG
56666: PUSH
56667: LD_INT 3
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 4
56677: NEG
56678: PUSH
56679: LD_INT 4
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: NEG
56690: PUSH
56691: LD_INT 4
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 4
56701: NEG
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: LD_INT 4
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: LD_INT 5
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: LD_INT 4
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: LD_INT 3
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: LD_INT 3
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: LD_INT 4
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: LD_INT 5
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 2
56792: PUSH
56793: LD_INT 3
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 2
56803: NEG
56804: PUSH
56805: LD_INT 5
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56860: LD_ADDR_VAR 0 31
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: LD_INT 4
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: LD_INT 3
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 4
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: LD_INT 5
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: LD_INT 5
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: LD_INT 4
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: LD_INT 5
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: LD_INT 3
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 3
56960: NEG
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 3
56971: NEG
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 2
56983: NEG
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 3
57005: NEG
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 4
57016: NEG
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 4
57027: NEG
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 4
57039: NEG
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 2
57051: NEG
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 4
57062: NEG
57063: PUSH
57064: LD_INT 4
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 4
57074: NEG
57075: PUSH
57076: LD_INT 5
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 3
57086: NEG
57087: PUSH
57088: LD_INT 4
57090: NEG
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 3
57098: NEG
57099: PUSH
57100: LD_INT 3
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 4
57110: NEG
57111: PUSH
57112: LD_INT 3
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 5
57122: NEG
57123: PUSH
57124: LD_INT 4
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 5
57134: NEG
57135: PUSH
57136: LD_INT 5
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 3
57146: NEG
57147: PUSH
57148: LD_INT 5
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 5
57158: NEG
57159: PUSH
57160: LD_INT 3
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: LD_INT 3
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 4
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: LD_INT 3
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: LD_INT 2
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: LD_INT 3
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: LD_INT 4
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: PUSH
57250: LD_INT 2
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 2
57260: NEG
57261: PUSH
57262: LD_INT 4
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 4
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 4
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 5
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 5
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 4
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 3
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 3
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 3
57344: PUSH
57345: LD_INT 2
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 5
57355: PUSH
57356: LD_INT 2
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57410: LD_ADDR_VAR 0 32
57414: PUSH
57415: LD_INT 4
57417: NEG
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 4
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 3
57440: NEG
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 4
57462: NEG
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 5
57473: NEG
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 5
57484: NEG
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 5
57496: NEG
57497: PUSH
57498: LD_INT 2
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 3
57508: NEG
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 3
57519: NEG
57520: PUSH
57521: LD_INT 3
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 3
57531: NEG
57532: PUSH
57533: LD_INT 4
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: LD_INT 3
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: LD_INT 2
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 3
57567: NEG
57568: PUSH
57569: LD_INT 2
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 4
57579: NEG
57580: PUSH
57581: LD_INT 3
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 4
57591: NEG
57592: PUSH
57593: LD_INT 4
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 2
57603: NEG
57604: PUSH
57605: LD_INT 4
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 4
57615: NEG
57616: PUSH
57617: LD_INT 2
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: LD_INT 4
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: LD_INT 5
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: LD_INT 4
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: LD_INT 3
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: LD_INT 3
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: LD_INT 4
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: LD_INT 5
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: LD_INT 3
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 2
57717: NEG
57718: PUSH
57719: LD_INT 5
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 3
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 3
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 4
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 4
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 3
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: LD_INT 2
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 4
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 4
57822: PUSH
57823: LD_INT 4
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 4
57832: PUSH
57833: LD_INT 3
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 5
57842: PUSH
57843: LD_INT 4
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 5
57852: PUSH
57853: LD_INT 5
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 4
57862: PUSH
57863: LD_INT 5
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 3
57872: PUSH
57873: LD_INT 4
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 3
57882: PUSH
57883: LD_INT 3
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 5
57892: PUSH
57893: LD_INT 3
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 3
57902: PUSH
57903: LD_INT 5
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57957: LD_ADDR_VAR 0 33
57961: PUSH
57962: LD_INT 4
57964: NEG
57965: PUSH
57966: LD_INT 4
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 4
57976: NEG
57977: PUSH
57978: LD_INT 5
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 3
57988: NEG
57989: PUSH
57990: LD_INT 4
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 3
58000: NEG
58001: PUSH
58002: LD_INT 3
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 4
58012: NEG
58013: PUSH
58014: LD_INT 3
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 5
58024: NEG
58025: PUSH
58026: LD_INT 4
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 5
58036: NEG
58037: PUSH
58038: LD_INT 5
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 3
58048: NEG
58049: PUSH
58050: LD_INT 5
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 5
58060: NEG
58061: PUSH
58062: LD_INT 3
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 0
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: LD_INT 4
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 3
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 2
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: LD_INT 2
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 1
58127: NEG
58128: PUSH
58129: LD_INT 3
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: LD_INT 4
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: LD_INT 2
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 2
58162: NEG
58163: PUSH
58164: LD_INT 4
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 4
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 4
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 5
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 5
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 4
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 3
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 3
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 3
58246: PUSH
58247: LD_INT 2
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 5
58257: PUSH
58258: LD_INT 2
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 3
58267: PUSH
58268: LD_INT 3
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 3
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 4
58287: PUSH
58288: LD_INT 3
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 4
58297: PUSH
58298: LD_INT 4
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 3
58307: PUSH
58308: LD_INT 4
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 2
58317: PUSH
58318: LD_INT 3
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 2
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 4
58337: PUSH
58338: LD_INT 2
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 2
58347: PUSH
58348: LD_INT 4
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: LD_INT 4
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: LD_INT 3
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: LD_INT 4
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: LD_INT 5
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: LD_INT 5
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: LD_INT 4
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: LD_INT 3
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: LD_INT 5
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 2
58439: NEG
58440: PUSH
58441: LD_INT 3
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58495: LD_ADDR_VAR 0 34
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: LD_INT 4
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: LD_INT 5
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: LD_INT 4
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: LD_INT 3
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: LD_INT 3
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: LD_INT 4
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: LD_INT 5
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 2
58581: PUSH
58582: LD_INT 3
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 2
58592: NEG
58593: PUSH
58594: LD_INT 5
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 3
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 4
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 4
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 3
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: LD_INT 2
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 4
58687: PUSH
58688: LD_INT 2
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 4
58697: PUSH
58698: LD_INT 4
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 4
58707: PUSH
58708: LD_INT 3
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 5
58717: PUSH
58718: LD_INT 4
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 5
58727: PUSH
58728: LD_INT 5
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 4
58737: PUSH
58738: LD_INT 5
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 3
58747: PUSH
58748: LD_INT 4
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 3
58757: PUSH
58758: LD_INT 3
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 5
58767: PUSH
58768: LD_INT 3
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 3
58777: PUSH
58778: LD_INT 5
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: LD_INT 3
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 1
58817: PUSH
58818: LD_INT 4
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: LD_INT 4
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: NEG
58838: PUSH
58839: LD_INT 3
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: LD_INT 4
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: NEG
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 4
58880: NEG
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 4
58891: NEG
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 3
58903: NEG
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 3
58914: NEG
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 4
58925: NEG
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 5
58936: NEG
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 5
58947: NEG
58948: PUSH
58949: LD_INT 1
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 5
58959: NEG
58960: PUSH
58961: LD_INT 2
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: NEG
58972: PUSH
58973: LD_INT 2
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: ST_TO_ADDR
// end ; end ;
59027: GO 59030
59029: POP
// case btype of b_depot , b_warehouse :
59030: LD_VAR 0 1
59034: PUSH
59035: LD_INT 0
59037: DOUBLE
59038: EQUAL
59039: IFTRUE 59049
59041: LD_INT 1
59043: DOUBLE
59044: EQUAL
59045: IFTRUE 59049
59047: GO 59250
59049: POP
// case nation of nation_american :
59050: LD_VAR 0 5
59054: PUSH
59055: LD_INT 1
59057: DOUBLE
59058: EQUAL
59059: IFTRUE 59063
59061: GO 59119
59063: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59064: LD_ADDR_VAR 0 9
59068: PUSH
59069: LD_VAR 0 11
59073: PUSH
59074: LD_VAR 0 12
59078: PUSH
59079: LD_VAR 0 13
59083: PUSH
59084: LD_VAR 0 14
59088: PUSH
59089: LD_VAR 0 15
59093: PUSH
59094: LD_VAR 0 16
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: PUSH
59107: LD_VAR 0 4
59111: PUSH
59112: LD_INT 1
59114: PLUS
59115: ARRAY
59116: ST_TO_ADDR
59117: GO 59248
59119: LD_INT 2
59121: DOUBLE
59122: EQUAL
59123: IFTRUE 59127
59125: GO 59183
59127: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59128: LD_ADDR_VAR 0 9
59132: PUSH
59133: LD_VAR 0 17
59137: PUSH
59138: LD_VAR 0 18
59142: PUSH
59143: LD_VAR 0 19
59147: PUSH
59148: LD_VAR 0 20
59152: PUSH
59153: LD_VAR 0 21
59157: PUSH
59158: LD_VAR 0 22
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: PUSH
59171: LD_VAR 0 4
59175: PUSH
59176: LD_INT 1
59178: PLUS
59179: ARRAY
59180: ST_TO_ADDR
59181: GO 59248
59183: LD_INT 3
59185: DOUBLE
59186: EQUAL
59187: IFTRUE 59191
59189: GO 59247
59191: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59192: LD_ADDR_VAR 0 9
59196: PUSH
59197: LD_VAR 0 23
59201: PUSH
59202: LD_VAR 0 24
59206: PUSH
59207: LD_VAR 0 25
59211: PUSH
59212: LD_VAR 0 26
59216: PUSH
59217: LD_VAR 0 27
59221: PUSH
59222: LD_VAR 0 28
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: PUSH
59235: LD_VAR 0 4
59239: PUSH
59240: LD_INT 1
59242: PLUS
59243: ARRAY
59244: ST_TO_ADDR
59245: GO 59248
59247: POP
59248: GO 59803
59250: LD_INT 2
59252: DOUBLE
59253: EQUAL
59254: IFTRUE 59264
59256: LD_INT 3
59258: DOUBLE
59259: EQUAL
59260: IFTRUE 59264
59262: GO 59320
59264: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59265: LD_ADDR_VAR 0 9
59269: PUSH
59270: LD_VAR 0 29
59274: PUSH
59275: LD_VAR 0 30
59279: PUSH
59280: LD_VAR 0 31
59284: PUSH
59285: LD_VAR 0 32
59289: PUSH
59290: LD_VAR 0 33
59294: PUSH
59295: LD_VAR 0 34
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: PUSH
59308: LD_VAR 0 4
59312: PUSH
59313: LD_INT 1
59315: PLUS
59316: ARRAY
59317: ST_TO_ADDR
59318: GO 59803
59320: LD_INT 16
59322: DOUBLE
59323: EQUAL
59324: IFTRUE 59382
59326: LD_INT 17
59328: DOUBLE
59329: EQUAL
59330: IFTRUE 59382
59332: LD_INT 18
59334: DOUBLE
59335: EQUAL
59336: IFTRUE 59382
59338: LD_INT 19
59340: DOUBLE
59341: EQUAL
59342: IFTRUE 59382
59344: LD_INT 22
59346: DOUBLE
59347: EQUAL
59348: IFTRUE 59382
59350: LD_INT 20
59352: DOUBLE
59353: EQUAL
59354: IFTRUE 59382
59356: LD_INT 21
59358: DOUBLE
59359: EQUAL
59360: IFTRUE 59382
59362: LD_INT 23
59364: DOUBLE
59365: EQUAL
59366: IFTRUE 59382
59368: LD_INT 24
59370: DOUBLE
59371: EQUAL
59372: IFTRUE 59382
59374: LD_INT 25
59376: DOUBLE
59377: EQUAL
59378: IFTRUE 59382
59380: GO 59438
59382: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59383: LD_ADDR_VAR 0 9
59387: PUSH
59388: LD_VAR 0 35
59392: PUSH
59393: LD_VAR 0 36
59397: PUSH
59398: LD_VAR 0 37
59402: PUSH
59403: LD_VAR 0 38
59407: PUSH
59408: LD_VAR 0 39
59412: PUSH
59413: LD_VAR 0 40
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: PUSH
59426: LD_VAR 0 4
59430: PUSH
59431: LD_INT 1
59433: PLUS
59434: ARRAY
59435: ST_TO_ADDR
59436: GO 59803
59438: LD_INT 6
59440: DOUBLE
59441: EQUAL
59442: IFTRUE 59494
59444: LD_INT 7
59446: DOUBLE
59447: EQUAL
59448: IFTRUE 59494
59450: LD_INT 8
59452: DOUBLE
59453: EQUAL
59454: IFTRUE 59494
59456: LD_INT 13
59458: DOUBLE
59459: EQUAL
59460: IFTRUE 59494
59462: LD_INT 12
59464: DOUBLE
59465: EQUAL
59466: IFTRUE 59494
59468: LD_INT 15
59470: DOUBLE
59471: EQUAL
59472: IFTRUE 59494
59474: LD_INT 11
59476: DOUBLE
59477: EQUAL
59478: IFTRUE 59494
59480: LD_INT 14
59482: DOUBLE
59483: EQUAL
59484: IFTRUE 59494
59486: LD_INT 10
59488: DOUBLE
59489: EQUAL
59490: IFTRUE 59494
59492: GO 59550
59494: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59495: LD_ADDR_VAR 0 9
59499: PUSH
59500: LD_VAR 0 41
59504: PUSH
59505: LD_VAR 0 42
59509: PUSH
59510: LD_VAR 0 43
59514: PUSH
59515: LD_VAR 0 44
59519: PUSH
59520: LD_VAR 0 45
59524: PUSH
59525: LD_VAR 0 46
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: PUSH
59538: LD_VAR 0 4
59542: PUSH
59543: LD_INT 1
59545: PLUS
59546: ARRAY
59547: ST_TO_ADDR
59548: GO 59803
59550: LD_INT 36
59552: DOUBLE
59553: EQUAL
59554: IFTRUE 59558
59556: GO 59614
59558: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59559: LD_ADDR_VAR 0 9
59563: PUSH
59564: LD_VAR 0 47
59568: PUSH
59569: LD_VAR 0 48
59573: PUSH
59574: LD_VAR 0 49
59578: PUSH
59579: LD_VAR 0 50
59583: PUSH
59584: LD_VAR 0 51
59588: PUSH
59589: LD_VAR 0 52
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: PUSH
59602: LD_VAR 0 4
59606: PUSH
59607: LD_INT 1
59609: PLUS
59610: ARRAY
59611: ST_TO_ADDR
59612: GO 59803
59614: LD_INT 4
59616: DOUBLE
59617: EQUAL
59618: IFTRUE 59640
59620: LD_INT 5
59622: DOUBLE
59623: EQUAL
59624: IFTRUE 59640
59626: LD_INT 34
59628: DOUBLE
59629: EQUAL
59630: IFTRUE 59640
59632: LD_INT 37
59634: DOUBLE
59635: EQUAL
59636: IFTRUE 59640
59638: GO 59696
59640: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59641: LD_ADDR_VAR 0 9
59645: PUSH
59646: LD_VAR 0 53
59650: PUSH
59651: LD_VAR 0 54
59655: PUSH
59656: LD_VAR 0 55
59660: PUSH
59661: LD_VAR 0 56
59665: PUSH
59666: LD_VAR 0 57
59670: PUSH
59671: LD_VAR 0 58
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: PUSH
59684: LD_VAR 0 4
59688: PUSH
59689: LD_INT 1
59691: PLUS
59692: ARRAY
59693: ST_TO_ADDR
59694: GO 59803
59696: LD_INT 31
59698: DOUBLE
59699: EQUAL
59700: IFTRUE 59746
59702: LD_INT 32
59704: DOUBLE
59705: EQUAL
59706: IFTRUE 59746
59708: LD_INT 33
59710: DOUBLE
59711: EQUAL
59712: IFTRUE 59746
59714: LD_INT 27
59716: DOUBLE
59717: EQUAL
59718: IFTRUE 59746
59720: LD_INT 26
59722: DOUBLE
59723: EQUAL
59724: IFTRUE 59746
59726: LD_INT 28
59728: DOUBLE
59729: EQUAL
59730: IFTRUE 59746
59732: LD_INT 29
59734: DOUBLE
59735: EQUAL
59736: IFTRUE 59746
59738: LD_INT 30
59740: DOUBLE
59741: EQUAL
59742: IFTRUE 59746
59744: GO 59802
59746: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59747: LD_ADDR_VAR 0 9
59751: PUSH
59752: LD_VAR 0 59
59756: PUSH
59757: LD_VAR 0 60
59761: PUSH
59762: LD_VAR 0 61
59766: PUSH
59767: LD_VAR 0 62
59771: PUSH
59772: LD_VAR 0 63
59776: PUSH
59777: LD_VAR 0 64
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: PUSH
59790: LD_VAR 0 4
59794: PUSH
59795: LD_INT 1
59797: PLUS
59798: ARRAY
59799: ST_TO_ADDR
59800: GO 59803
59802: POP
// temp_list2 = [ ] ;
59803: LD_ADDR_VAR 0 10
59807: PUSH
59808: EMPTY
59809: ST_TO_ADDR
// for i in temp_list do
59810: LD_ADDR_VAR 0 8
59814: PUSH
59815: LD_VAR 0 9
59819: PUSH
59820: FOR_IN
59821: IFFALSE 59873
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59823: LD_ADDR_VAR 0 10
59827: PUSH
59828: LD_VAR 0 10
59832: PUSH
59833: LD_VAR 0 8
59837: PUSH
59838: LD_INT 1
59840: ARRAY
59841: PUSH
59842: LD_VAR 0 2
59846: PLUS
59847: PUSH
59848: LD_VAR 0 8
59852: PUSH
59853: LD_INT 2
59855: ARRAY
59856: PUSH
59857: LD_VAR 0 3
59861: PLUS
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: EMPTY
59868: LIST
59869: ADD
59870: ST_TO_ADDR
59871: GO 59820
59873: POP
59874: POP
// result = temp_list2 ;
59875: LD_ADDR_VAR 0 7
59879: PUSH
59880: LD_VAR 0 10
59884: ST_TO_ADDR
// end ;
59885: LD_VAR 0 7
59889: RET
// export function EnemyInRange ( unit , dist ) ; begin
59890: LD_INT 0
59892: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59893: LD_ADDR_VAR 0 3
59897: PUSH
59898: LD_VAR 0 1
59902: PPUSH
59903: CALL_OW 255
59907: PPUSH
59908: LD_VAR 0 1
59912: PPUSH
59913: CALL_OW 250
59917: PPUSH
59918: LD_VAR 0 1
59922: PPUSH
59923: CALL_OW 251
59927: PPUSH
59928: LD_VAR 0 2
59932: PPUSH
59933: CALL 33263 0 4
59937: PUSH
59938: LD_INT 4
59940: ARRAY
59941: ST_TO_ADDR
// end ;
59942: LD_VAR 0 3
59946: RET
// export function PlayerSeeMe ( unit ) ; begin
59947: LD_INT 0
59949: PPUSH
// result := See ( your_side , unit ) ;
59950: LD_ADDR_VAR 0 2
59954: PUSH
59955: LD_OWVAR 2
59959: PPUSH
59960: LD_VAR 0 1
59964: PPUSH
59965: CALL_OW 292
59969: ST_TO_ADDR
// end ;
59970: LD_VAR 0 2
59974: RET
// export function ReverseDir ( unit ) ; begin
59975: LD_INT 0
59977: PPUSH
// if not unit then
59978: LD_VAR 0 1
59982: NOT
59983: IFFALSE 59987
// exit ;
59985: GO 60010
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59987: LD_ADDR_VAR 0 2
59991: PUSH
59992: LD_VAR 0 1
59996: PPUSH
59997: CALL_OW 254
60001: PUSH
60002: LD_INT 3
60004: PLUS
60005: PUSH
60006: LD_INT 6
60008: MOD
60009: ST_TO_ADDR
// end ;
60010: LD_VAR 0 2
60014: RET
// export function ReverseArray ( array ) ; var i ; begin
60015: LD_INT 0
60017: PPUSH
60018: PPUSH
// if not array then
60019: LD_VAR 0 1
60023: NOT
60024: IFFALSE 60028
// exit ;
60026: GO 60083
// result := [ ] ;
60028: LD_ADDR_VAR 0 2
60032: PUSH
60033: EMPTY
60034: ST_TO_ADDR
// for i := array downto 1 do
60035: LD_ADDR_VAR 0 3
60039: PUSH
60040: DOUBLE
60041: LD_VAR 0 1
60045: INC
60046: ST_TO_ADDR
60047: LD_INT 1
60049: PUSH
60050: FOR_DOWNTO
60051: IFFALSE 60081
// result := Join ( result , array [ i ] ) ;
60053: LD_ADDR_VAR 0 2
60057: PUSH
60058: LD_VAR 0 2
60062: PPUSH
60063: LD_VAR 0 1
60067: PUSH
60068: LD_VAR 0 3
60072: ARRAY
60073: PPUSH
60074: CALL 64726 0 2
60078: ST_TO_ADDR
60079: GO 60050
60081: POP
60082: POP
// end ;
60083: LD_VAR 0 2
60087: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60088: LD_INT 0
60090: PPUSH
60091: PPUSH
60092: PPUSH
60093: PPUSH
60094: PPUSH
60095: PPUSH
// if not unit or not hexes then
60096: LD_VAR 0 1
60100: NOT
60101: PUSH
60102: LD_VAR 0 2
60106: NOT
60107: OR
60108: IFFALSE 60112
// exit ;
60110: GO 60235
// dist := 9999 ;
60112: LD_ADDR_VAR 0 5
60116: PUSH
60117: LD_INT 9999
60119: ST_TO_ADDR
// for i = 1 to hexes do
60120: LD_ADDR_VAR 0 4
60124: PUSH
60125: DOUBLE
60126: LD_INT 1
60128: DEC
60129: ST_TO_ADDR
60130: LD_VAR 0 2
60134: PUSH
60135: FOR_TO
60136: IFFALSE 60223
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60138: LD_ADDR_VAR 0 6
60142: PUSH
60143: LD_VAR 0 1
60147: PPUSH
60148: LD_VAR 0 2
60152: PUSH
60153: LD_VAR 0 4
60157: ARRAY
60158: PUSH
60159: LD_INT 1
60161: ARRAY
60162: PPUSH
60163: LD_VAR 0 2
60167: PUSH
60168: LD_VAR 0 4
60172: ARRAY
60173: PUSH
60174: LD_INT 2
60176: ARRAY
60177: PPUSH
60178: CALL_OW 297
60182: ST_TO_ADDR
// if tdist < dist then
60183: LD_VAR 0 6
60187: PUSH
60188: LD_VAR 0 5
60192: LESS
60193: IFFALSE 60221
// begin hex := hexes [ i ] ;
60195: LD_ADDR_VAR 0 8
60199: PUSH
60200: LD_VAR 0 2
60204: PUSH
60205: LD_VAR 0 4
60209: ARRAY
60210: ST_TO_ADDR
// dist := tdist ;
60211: LD_ADDR_VAR 0 5
60215: PUSH
60216: LD_VAR 0 6
60220: ST_TO_ADDR
// end ; end ;
60221: GO 60135
60223: POP
60224: POP
// result := hex ;
60225: LD_ADDR_VAR 0 3
60229: PUSH
60230: LD_VAR 0 8
60234: ST_TO_ADDR
// end ;
60235: LD_VAR 0 3
60239: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60240: LD_INT 0
60242: PPUSH
60243: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60244: LD_VAR 0 1
60248: NOT
60249: PUSH
60250: LD_VAR 0 1
60254: PUSH
60255: LD_INT 21
60257: PUSH
60258: LD_INT 2
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 23
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PPUSH
60279: CALL_OW 69
60283: IN
60284: NOT
60285: OR
60286: IFFALSE 60290
// exit ;
60288: GO 60337
// for i = 1 to 3 do
60290: LD_ADDR_VAR 0 3
60294: PUSH
60295: DOUBLE
60296: LD_INT 1
60298: DEC
60299: ST_TO_ADDR
60300: LD_INT 3
60302: PUSH
60303: FOR_TO
60304: IFFALSE 60335
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60306: LD_VAR 0 1
60310: PPUSH
60311: CALL_OW 250
60315: PPUSH
60316: LD_VAR 0 1
60320: PPUSH
60321: CALL_OW 251
60325: PPUSH
60326: LD_INT 1
60328: PPUSH
60329: CALL_OW 453
60333: GO 60303
60335: POP
60336: POP
// end ;
60337: LD_VAR 0 2
60341: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60342: LD_INT 0
60344: PPUSH
60345: PPUSH
60346: PPUSH
60347: PPUSH
60348: PPUSH
60349: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60350: LD_VAR 0 1
60354: NOT
60355: PUSH
60356: LD_VAR 0 2
60360: NOT
60361: OR
60362: PUSH
60363: LD_VAR 0 1
60367: PPUSH
60368: CALL_OW 314
60372: OR
60373: IFFALSE 60377
// exit ;
60375: GO 60844
// if GetLives ( i ) < 250 then
60377: LD_VAR 0 4
60381: PPUSH
60382: CALL_OW 256
60386: PUSH
60387: LD_INT 250
60389: LESS
60390: IFFALSE 60403
// begin ComAutodestruct ( i ) ;
60392: LD_VAR 0 4
60396: PPUSH
60397: CALL 60240 0 1
// exit ;
60401: GO 60844
// end ; x := GetX ( enemy_unit ) ;
60403: LD_ADDR_VAR 0 7
60407: PUSH
60408: LD_VAR 0 2
60412: PPUSH
60413: CALL_OW 250
60417: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60418: LD_ADDR_VAR 0 8
60422: PUSH
60423: LD_VAR 0 2
60427: PPUSH
60428: CALL_OW 251
60432: ST_TO_ADDR
// if not x or not y then
60433: LD_VAR 0 7
60437: NOT
60438: PUSH
60439: LD_VAR 0 8
60443: NOT
60444: OR
60445: IFFALSE 60449
// exit ;
60447: GO 60844
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60449: LD_ADDR_VAR 0 6
60453: PUSH
60454: LD_VAR 0 7
60458: PPUSH
60459: LD_INT 0
60461: PPUSH
60462: LD_INT 4
60464: PPUSH
60465: CALL_OW 272
60469: PUSH
60470: LD_VAR 0 8
60474: PPUSH
60475: LD_INT 0
60477: PPUSH
60478: LD_INT 4
60480: PPUSH
60481: CALL_OW 273
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_VAR 0 7
60494: PPUSH
60495: LD_INT 1
60497: PPUSH
60498: LD_INT 4
60500: PPUSH
60501: CALL_OW 272
60505: PUSH
60506: LD_VAR 0 8
60510: PPUSH
60511: LD_INT 1
60513: PPUSH
60514: LD_INT 4
60516: PPUSH
60517: CALL_OW 273
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_VAR 0 7
60530: PPUSH
60531: LD_INT 2
60533: PPUSH
60534: LD_INT 4
60536: PPUSH
60537: CALL_OW 272
60541: PUSH
60542: LD_VAR 0 8
60546: PPUSH
60547: LD_INT 2
60549: PPUSH
60550: LD_INT 4
60552: PPUSH
60553: CALL_OW 273
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_VAR 0 7
60566: PPUSH
60567: LD_INT 3
60569: PPUSH
60570: LD_INT 4
60572: PPUSH
60573: CALL_OW 272
60577: PUSH
60578: LD_VAR 0 8
60582: PPUSH
60583: LD_INT 3
60585: PPUSH
60586: LD_INT 4
60588: PPUSH
60589: CALL_OW 273
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_VAR 0 7
60602: PPUSH
60603: LD_INT 4
60605: PPUSH
60606: LD_INT 4
60608: PPUSH
60609: CALL_OW 272
60613: PUSH
60614: LD_VAR 0 8
60618: PPUSH
60619: LD_INT 4
60621: PPUSH
60622: LD_INT 4
60624: PPUSH
60625: CALL_OW 273
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_VAR 0 7
60638: PPUSH
60639: LD_INT 5
60641: PPUSH
60642: LD_INT 4
60644: PPUSH
60645: CALL_OW 272
60649: PUSH
60650: LD_VAR 0 8
60654: PPUSH
60655: LD_INT 5
60657: PPUSH
60658: LD_INT 4
60660: PPUSH
60661: CALL_OW 273
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: ST_TO_ADDR
// for i = tmp downto 1 do
60678: LD_ADDR_VAR 0 4
60682: PUSH
60683: DOUBLE
60684: LD_VAR 0 6
60688: INC
60689: ST_TO_ADDR
60690: LD_INT 1
60692: PUSH
60693: FOR_DOWNTO
60694: IFFALSE 60795
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60696: LD_VAR 0 6
60700: PUSH
60701: LD_VAR 0 4
60705: ARRAY
60706: PUSH
60707: LD_INT 1
60709: ARRAY
60710: PPUSH
60711: LD_VAR 0 6
60715: PUSH
60716: LD_VAR 0 4
60720: ARRAY
60721: PUSH
60722: LD_INT 2
60724: ARRAY
60725: PPUSH
60726: CALL_OW 488
60730: NOT
60731: PUSH
60732: LD_VAR 0 6
60736: PUSH
60737: LD_VAR 0 4
60741: ARRAY
60742: PUSH
60743: LD_INT 1
60745: ARRAY
60746: PPUSH
60747: LD_VAR 0 6
60751: PUSH
60752: LD_VAR 0 4
60756: ARRAY
60757: PUSH
60758: LD_INT 2
60760: ARRAY
60761: PPUSH
60762: CALL_OW 428
60766: PUSH
60767: LD_INT 0
60769: NONEQUAL
60770: OR
60771: IFFALSE 60793
// tmp := Delete ( tmp , i ) ;
60773: LD_ADDR_VAR 0 6
60777: PUSH
60778: LD_VAR 0 6
60782: PPUSH
60783: LD_VAR 0 4
60787: PPUSH
60788: CALL_OW 3
60792: ST_TO_ADDR
60793: GO 60693
60795: POP
60796: POP
// j := GetClosestHex ( unit , tmp ) ;
60797: LD_ADDR_VAR 0 5
60801: PUSH
60802: LD_VAR 0 1
60806: PPUSH
60807: LD_VAR 0 6
60811: PPUSH
60812: CALL 60088 0 2
60816: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60817: LD_VAR 0 1
60821: PPUSH
60822: LD_VAR 0 5
60826: PUSH
60827: LD_INT 1
60829: ARRAY
60830: PPUSH
60831: LD_VAR 0 5
60835: PUSH
60836: LD_INT 2
60838: ARRAY
60839: PPUSH
60840: CALL_OW 111
// end ;
60844: LD_VAR 0 3
60848: RET
// export function PrepareApemanSoldier ( ) ; begin
60849: LD_INT 0
60851: PPUSH
// uc_nation := 0 ;
60852: LD_ADDR_OWVAR 21
60856: PUSH
60857: LD_INT 0
60859: ST_TO_ADDR
// hc_sex := sex_male ;
60860: LD_ADDR_OWVAR 27
60864: PUSH
60865: LD_INT 1
60867: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60868: LD_ADDR_OWVAR 28
60872: PUSH
60873: LD_INT 15
60875: ST_TO_ADDR
// hc_gallery :=  ;
60876: LD_ADDR_OWVAR 33
60880: PUSH
60881: LD_STRING 
60883: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60884: LD_ADDR_OWVAR 31
60888: PUSH
60889: LD_INT 0
60891: PPUSH
60892: LD_INT 3
60894: PPUSH
60895: CALL_OW 12
60899: PUSH
60900: LD_INT 0
60902: PPUSH
60903: LD_INT 3
60905: PPUSH
60906: CALL_OW 12
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: ST_TO_ADDR
// end ;
60923: LD_VAR 0 1
60927: RET
// export function PrepareApemanEngineer ( ) ; begin
60928: LD_INT 0
60930: PPUSH
// uc_nation := 0 ;
60931: LD_ADDR_OWVAR 21
60935: PUSH
60936: LD_INT 0
60938: ST_TO_ADDR
// hc_sex := sex_male ;
60939: LD_ADDR_OWVAR 27
60943: PUSH
60944: LD_INT 1
60946: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60947: LD_ADDR_OWVAR 28
60951: PUSH
60952: LD_INT 16
60954: ST_TO_ADDR
// hc_gallery :=  ;
60955: LD_ADDR_OWVAR 33
60959: PUSH
60960: LD_STRING 
60962: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60963: LD_ADDR_OWVAR 31
60967: PUSH
60968: LD_INT 0
60970: PPUSH
60971: LD_INT 3
60973: PPUSH
60974: CALL_OW 12
60978: PUSH
60979: LD_INT 0
60981: PPUSH
60982: LD_INT 3
60984: PPUSH
60985: CALL_OW 12
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: ST_TO_ADDR
// end ;
61002: LD_VAR 0 1
61006: RET
// export function PrepareApeman ( agressivity ) ; begin
61007: LD_INT 0
61009: PPUSH
// uc_side := 0 ;
61010: LD_ADDR_OWVAR 20
61014: PUSH
61015: LD_INT 0
61017: ST_TO_ADDR
// uc_nation := 0 ;
61018: LD_ADDR_OWVAR 21
61022: PUSH
61023: LD_INT 0
61025: ST_TO_ADDR
// hc_sex := sex_male ;
61026: LD_ADDR_OWVAR 27
61030: PUSH
61031: LD_INT 1
61033: ST_TO_ADDR
// hc_class := class_apeman ;
61034: LD_ADDR_OWVAR 28
61038: PUSH
61039: LD_INT 12
61041: ST_TO_ADDR
// hc_gallery :=  ;
61042: LD_ADDR_OWVAR 33
61046: PUSH
61047: LD_STRING 
61049: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61050: LD_ADDR_OWVAR 35
61054: PUSH
61055: LD_VAR 0 1
61059: NEG
61060: PPUSH
61061: LD_VAR 0 1
61065: PPUSH
61066: CALL_OW 12
61070: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61071: LD_ADDR_OWVAR 31
61075: PUSH
61076: LD_INT 0
61078: PPUSH
61079: LD_INT 3
61081: PPUSH
61082: CALL_OW 12
61086: PUSH
61087: LD_INT 0
61089: PPUSH
61090: LD_INT 3
61092: PPUSH
61093: CALL_OW 12
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: ST_TO_ADDR
// end ;
61110: LD_VAR 0 2
61114: RET
// export function PrepareTiger ( agressivity ) ; begin
61115: LD_INT 0
61117: PPUSH
// uc_side := 0 ;
61118: LD_ADDR_OWVAR 20
61122: PUSH
61123: LD_INT 0
61125: ST_TO_ADDR
// uc_nation := 0 ;
61126: LD_ADDR_OWVAR 21
61130: PUSH
61131: LD_INT 0
61133: ST_TO_ADDR
// hc_class := class_tiger ;
61134: LD_ADDR_OWVAR 28
61138: PUSH
61139: LD_INT 14
61141: ST_TO_ADDR
// hc_gallery :=  ;
61142: LD_ADDR_OWVAR 33
61146: PUSH
61147: LD_STRING 
61149: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61150: LD_ADDR_OWVAR 35
61154: PUSH
61155: LD_VAR 0 1
61159: NEG
61160: PPUSH
61161: LD_VAR 0 1
61165: PPUSH
61166: CALL_OW 12
61170: ST_TO_ADDR
// end ;
61171: LD_VAR 0 2
61175: RET
// export function PrepareEnchidna ( ) ; begin
61176: LD_INT 0
61178: PPUSH
// uc_side := 0 ;
61179: LD_ADDR_OWVAR 20
61183: PUSH
61184: LD_INT 0
61186: ST_TO_ADDR
// uc_nation := 0 ;
61187: LD_ADDR_OWVAR 21
61191: PUSH
61192: LD_INT 0
61194: ST_TO_ADDR
// hc_class := class_baggie ;
61195: LD_ADDR_OWVAR 28
61199: PUSH
61200: LD_INT 13
61202: ST_TO_ADDR
// hc_gallery :=  ;
61203: LD_ADDR_OWVAR 33
61207: PUSH
61208: LD_STRING 
61210: ST_TO_ADDR
// end ;
61211: LD_VAR 0 1
61215: RET
// export function PrepareFrog ( ) ; begin
61216: LD_INT 0
61218: PPUSH
// uc_side := 0 ;
61219: LD_ADDR_OWVAR 20
61223: PUSH
61224: LD_INT 0
61226: ST_TO_ADDR
// uc_nation := 0 ;
61227: LD_ADDR_OWVAR 21
61231: PUSH
61232: LD_INT 0
61234: ST_TO_ADDR
// hc_class := class_frog ;
61235: LD_ADDR_OWVAR 28
61239: PUSH
61240: LD_INT 19
61242: ST_TO_ADDR
// hc_gallery :=  ;
61243: LD_ADDR_OWVAR 33
61247: PUSH
61248: LD_STRING 
61250: ST_TO_ADDR
// end ;
61251: LD_VAR 0 1
61255: RET
// export function PrepareFish ( ) ; begin
61256: LD_INT 0
61258: PPUSH
// uc_side := 0 ;
61259: LD_ADDR_OWVAR 20
61263: PUSH
61264: LD_INT 0
61266: ST_TO_ADDR
// uc_nation := 0 ;
61267: LD_ADDR_OWVAR 21
61271: PUSH
61272: LD_INT 0
61274: ST_TO_ADDR
// hc_class := class_fish ;
61275: LD_ADDR_OWVAR 28
61279: PUSH
61280: LD_INT 20
61282: ST_TO_ADDR
// hc_gallery :=  ;
61283: LD_ADDR_OWVAR 33
61287: PUSH
61288: LD_STRING 
61290: ST_TO_ADDR
// end ;
61291: LD_VAR 0 1
61295: RET
// export function PrepareBird ( ) ; begin
61296: LD_INT 0
61298: PPUSH
// uc_side := 0 ;
61299: LD_ADDR_OWVAR 20
61303: PUSH
61304: LD_INT 0
61306: ST_TO_ADDR
// uc_nation := 0 ;
61307: LD_ADDR_OWVAR 21
61311: PUSH
61312: LD_INT 0
61314: ST_TO_ADDR
// hc_class := class_phororhacos ;
61315: LD_ADDR_OWVAR 28
61319: PUSH
61320: LD_INT 18
61322: ST_TO_ADDR
// hc_gallery :=  ;
61323: LD_ADDR_OWVAR 33
61327: PUSH
61328: LD_STRING 
61330: ST_TO_ADDR
// end ;
61331: LD_VAR 0 1
61335: RET
// export function PrepareHorse ( ) ; begin
61336: LD_INT 0
61338: PPUSH
// uc_side := 0 ;
61339: LD_ADDR_OWVAR 20
61343: PUSH
61344: LD_INT 0
61346: ST_TO_ADDR
// uc_nation := 0 ;
61347: LD_ADDR_OWVAR 21
61351: PUSH
61352: LD_INT 0
61354: ST_TO_ADDR
// hc_class := class_horse ;
61355: LD_ADDR_OWVAR 28
61359: PUSH
61360: LD_INT 21
61362: ST_TO_ADDR
// hc_gallery :=  ;
61363: LD_ADDR_OWVAR 33
61367: PUSH
61368: LD_STRING 
61370: ST_TO_ADDR
// end ;
61371: LD_VAR 0 1
61375: RET
// export function PrepareMastodont ( ) ; begin
61376: LD_INT 0
61378: PPUSH
// uc_side := 0 ;
61379: LD_ADDR_OWVAR 20
61383: PUSH
61384: LD_INT 0
61386: ST_TO_ADDR
// uc_nation := 0 ;
61387: LD_ADDR_OWVAR 21
61391: PUSH
61392: LD_INT 0
61394: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61395: LD_ADDR_OWVAR 37
61399: PUSH
61400: LD_INT 31
61402: ST_TO_ADDR
// vc_control := control_rider ;
61403: LD_ADDR_OWVAR 38
61407: PUSH
61408: LD_INT 4
61410: ST_TO_ADDR
// end ;
61411: LD_VAR 0 1
61415: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61416: LD_INT 0
61418: PPUSH
61419: PPUSH
61420: PPUSH
// uc_side = 0 ;
61421: LD_ADDR_OWVAR 20
61425: PUSH
61426: LD_INT 0
61428: ST_TO_ADDR
// uc_nation = 0 ;
61429: LD_ADDR_OWVAR 21
61433: PUSH
61434: LD_INT 0
61436: ST_TO_ADDR
// InitHc_All ( ) ;
61437: CALL_OW 584
// InitVc ;
61441: CALL_OW 20
// if mastodonts then
61445: LD_VAR 0 6
61449: IFFALSE 61516
// for i = 1 to mastodonts do
61451: LD_ADDR_VAR 0 11
61455: PUSH
61456: DOUBLE
61457: LD_INT 1
61459: DEC
61460: ST_TO_ADDR
61461: LD_VAR 0 6
61465: PUSH
61466: FOR_TO
61467: IFFALSE 61514
// begin vc_chassis := 31 ;
61469: LD_ADDR_OWVAR 37
61473: PUSH
61474: LD_INT 31
61476: ST_TO_ADDR
// vc_control := control_rider ;
61477: LD_ADDR_OWVAR 38
61481: PUSH
61482: LD_INT 4
61484: ST_TO_ADDR
// animal := CreateVehicle ;
61485: LD_ADDR_VAR 0 12
61489: PUSH
61490: CALL_OW 45
61494: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61495: LD_VAR 0 12
61499: PPUSH
61500: LD_VAR 0 8
61504: PPUSH
61505: LD_INT 0
61507: PPUSH
61508: CALL 63644 0 3
// end ;
61512: GO 61466
61514: POP
61515: POP
// if horses then
61516: LD_VAR 0 5
61520: IFFALSE 61587
// for i = 1 to horses do
61522: LD_ADDR_VAR 0 11
61526: PUSH
61527: DOUBLE
61528: LD_INT 1
61530: DEC
61531: ST_TO_ADDR
61532: LD_VAR 0 5
61536: PUSH
61537: FOR_TO
61538: IFFALSE 61585
// begin hc_class := 21 ;
61540: LD_ADDR_OWVAR 28
61544: PUSH
61545: LD_INT 21
61547: ST_TO_ADDR
// hc_gallery :=  ;
61548: LD_ADDR_OWVAR 33
61552: PUSH
61553: LD_STRING 
61555: ST_TO_ADDR
// animal := CreateHuman ;
61556: LD_ADDR_VAR 0 12
61560: PUSH
61561: CALL_OW 44
61565: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61566: LD_VAR 0 12
61570: PPUSH
61571: LD_VAR 0 8
61575: PPUSH
61576: LD_INT 0
61578: PPUSH
61579: CALL 63644 0 3
// end ;
61583: GO 61537
61585: POP
61586: POP
// if birds then
61587: LD_VAR 0 1
61591: IFFALSE 61658
// for i = 1 to birds do
61593: LD_ADDR_VAR 0 11
61597: PUSH
61598: DOUBLE
61599: LD_INT 1
61601: DEC
61602: ST_TO_ADDR
61603: LD_VAR 0 1
61607: PUSH
61608: FOR_TO
61609: IFFALSE 61656
// begin hc_class := 18 ;
61611: LD_ADDR_OWVAR 28
61615: PUSH
61616: LD_INT 18
61618: ST_TO_ADDR
// hc_gallery =  ;
61619: LD_ADDR_OWVAR 33
61623: PUSH
61624: LD_STRING 
61626: ST_TO_ADDR
// animal := CreateHuman ;
61627: LD_ADDR_VAR 0 12
61631: PUSH
61632: CALL_OW 44
61636: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61637: LD_VAR 0 12
61641: PPUSH
61642: LD_VAR 0 8
61646: PPUSH
61647: LD_INT 0
61649: PPUSH
61650: CALL 63644 0 3
// end ;
61654: GO 61608
61656: POP
61657: POP
// if tigers then
61658: LD_VAR 0 2
61662: IFFALSE 61746
// for i = 1 to tigers do
61664: LD_ADDR_VAR 0 11
61668: PUSH
61669: DOUBLE
61670: LD_INT 1
61672: DEC
61673: ST_TO_ADDR
61674: LD_VAR 0 2
61678: PUSH
61679: FOR_TO
61680: IFFALSE 61744
// begin hc_class = class_tiger ;
61682: LD_ADDR_OWVAR 28
61686: PUSH
61687: LD_INT 14
61689: ST_TO_ADDR
// hc_gallery =  ;
61690: LD_ADDR_OWVAR 33
61694: PUSH
61695: LD_STRING 
61697: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61698: LD_ADDR_OWVAR 35
61702: PUSH
61703: LD_INT 7
61705: NEG
61706: PPUSH
61707: LD_INT 7
61709: PPUSH
61710: CALL_OW 12
61714: ST_TO_ADDR
// animal := CreateHuman ;
61715: LD_ADDR_VAR 0 12
61719: PUSH
61720: CALL_OW 44
61724: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61725: LD_VAR 0 12
61729: PPUSH
61730: LD_VAR 0 8
61734: PPUSH
61735: LD_INT 0
61737: PPUSH
61738: CALL 63644 0 3
// end ;
61742: GO 61679
61744: POP
61745: POP
// if apemans then
61746: LD_VAR 0 3
61750: IFFALSE 61873
// for i = 1 to apemans do
61752: LD_ADDR_VAR 0 11
61756: PUSH
61757: DOUBLE
61758: LD_INT 1
61760: DEC
61761: ST_TO_ADDR
61762: LD_VAR 0 3
61766: PUSH
61767: FOR_TO
61768: IFFALSE 61871
// begin hc_class = class_apeman ;
61770: LD_ADDR_OWVAR 28
61774: PUSH
61775: LD_INT 12
61777: ST_TO_ADDR
// hc_gallery =  ;
61778: LD_ADDR_OWVAR 33
61782: PUSH
61783: LD_STRING 
61785: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61786: LD_ADDR_OWVAR 35
61790: PUSH
61791: LD_INT 2
61793: NEG
61794: PPUSH
61795: LD_INT 2
61797: PPUSH
61798: CALL_OW 12
61802: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61803: LD_ADDR_OWVAR 31
61807: PUSH
61808: LD_INT 1
61810: PPUSH
61811: LD_INT 3
61813: PPUSH
61814: CALL_OW 12
61818: PUSH
61819: LD_INT 1
61821: PPUSH
61822: LD_INT 3
61824: PPUSH
61825: CALL_OW 12
61829: PUSH
61830: LD_INT 0
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: ST_TO_ADDR
// animal := CreateHuman ;
61842: LD_ADDR_VAR 0 12
61846: PUSH
61847: CALL_OW 44
61851: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61852: LD_VAR 0 12
61856: PPUSH
61857: LD_VAR 0 8
61861: PPUSH
61862: LD_INT 0
61864: PPUSH
61865: CALL 63644 0 3
// end ;
61869: GO 61767
61871: POP
61872: POP
// if enchidnas then
61873: LD_VAR 0 4
61877: IFFALSE 61944
// for i = 1 to enchidnas do
61879: LD_ADDR_VAR 0 11
61883: PUSH
61884: DOUBLE
61885: LD_INT 1
61887: DEC
61888: ST_TO_ADDR
61889: LD_VAR 0 4
61893: PUSH
61894: FOR_TO
61895: IFFALSE 61942
// begin hc_class = 13 ;
61897: LD_ADDR_OWVAR 28
61901: PUSH
61902: LD_INT 13
61904: ST_TO_ADDR
// hc_gallery =  ;
61905: LD_ADDR_OWVAR 33
61909: PUSH
61910: LD_STRING 
61912: ST_TO_ADDR
// animal := CreateHuman ;
61913: LD_ADDR_VAR 0 12
61917: PUSH
61918: CALL_OW 44
61922: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61923: LD_VAR 0 12
61927: PPUSH
61928: LD_VAR 0 8
61932: PPUSH
61933: LD_INT 0
61935: PPUSH
61936: CALL 63644 0 3
// end ;
61940: GO 61894
61942: POP
61943: POP
// if fishes then
61944: LD_VAR 0 7
61948: IFFALSE 62015
// for i = 1 to fishes do
61950: LD_ADDR_VAR 0 11
61954: PUSH
61955: DOUBLE
61956: LD_INT 1
61958: DEC
61959: ST_TO_ADDR
61960: LD_VAR 0 7
61964: PUSH
61965: FOR_TO
61966: IFFALSE 62013
// begin hc_class = 20 ;
61968: LD_ADDR_OWVAR 28
61972: PUSH
61973: LD_INT 20
61975: ST_TO_ADDR
// hc_gallery =  ;
61976: LD_ADDR_OWVAR 33
61980: PUSH
61981: LD_STRING 
61983: ST_TO_ADDR
// animal := CreateHuman ;
61984: LD_ADDR_VAR 0 12
61988: PUSH
61989: CALL_OW 44
61993: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61994: LD_VAR 0 12
61998: PPUSH
61999: LD_VAR 0 9
62003: PPUSH
62004: LD_INT 0
62006: PPUSH
62007: CALL 63644 0 3
// end ;
62011: GO 61965
62013: POP
62014: POP
// end ;
62015: LD_VAR 0 10
62019: RET
// export function WantHeal ( sci , unit ) ; begin
62020: LD_INT 0
62022: PPUSH
// if GetTaskList ( sci ) > 0 then
62023: LD_VAR 0 1
62027: PPUSH
62028: CALL_OW 437
62032: PUSH
62033: LD_INT 0
62035: GREATER
62036: IFFALSE 62106
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62038: LD_VAR 0 1
62042: PPUSH
62043: CALL_OW 437
62047: PUSH
62048: LD_INT 1
62050: ARRAY
62051: PUSH
62052: LD_INT 1
62054: ARRAY
62055: PUSH
62056: LD_STRING l
62058: EQUAL
62059: PUSH
62060: LD_VAR 0 1
62064: PPUSH
62065: CALL_OW 437
62069: PUSH
62070: LD_INT 1
62072: ARRAY
62073: PUSH
62074: LD_INT 4
62076: ARRAY
62077: PUSH
62078: LD_VAR 0 2
62082: EQUAL
62083: AND
62084: IFFALSE 62096
// result := true else
62086: LD_ADDR_VAR 0 3
62090: PUSH
62091: LD_INT 1
62093: ST_TO_ADDR
62094: GO 62104
// result := false ;
62096: LD_ADDR_VAR 0 3
62100: PUSH
62101: LD_INT 0
62103: ST_TO_ADDR
// end else
62104: GO 62114
// result := false ;
62106: LD_ADDR_VAR 0 3
62110: PUSH
62111: LD_INT 0
62113: ST_TO_ADDR
// end ;
62114: LD_VAR 0 3
62118: RET
// export function HealTarget ( sci ) ; begin
62119: LD_INT 0
62121: PPUSH
// if not sci then
62122: LD_VAR 0 1
62126: NOT
62127: IFFALSE 62131
// exit ;
62129: GO 62196
// result := 0 ;
62131: LD_ADDR_VAR 0 2
62135: PUSH
62136: LD_INT 0
62138: ST_TO_ADDR
// if GetTaskList ( sci ) then
62139: LD_VAR 0 1
62143: PPUSH
62144: CALL_OW 437
62148: IFFALSE 62196
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62150: LD_VAR 0 1
62154: PPUSH
62155: CALL_OW 437
62159: PUSH
62160: LD_INT 1
62162: ARRAY
62163: PUSH
62164: LD_INT 1
62166: ARRAY
62167: PUSH
62168: LD_STRING l
62170: EQUAL
62171: IFFALSE 62196
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62173: LD_ADDR_VAR 0 2
62177: PUSH
62178: LD_VAR 0 1
62182: PPUSH
62183: CALL_OW 437
62187: PUSH
62188: LD_INT 1
62190: ARRAY
62191: PUSH
62192: LD_INT 4
62194: ARRAY
62195: ST_TO_ADDR
// end ;
62196: LD_VAR 0 2
62200: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62201: LD_INT 0
62203: PPUSH
62204: PPUSH
62205: PPUSH
62206: PPUSH
// if not base_units then
62207: LD_VAR 0 1
62211: NOT
62212: IFFALSE 62216
// exit ;
62214: GO 62303
// result := false ;
62216: LD_ADDR_VAR 0 2
62220: PUSH
62221: LD_INT 0
62223: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62224: LD_ADDR_VAR 0 5
62228: PUSH
62229: LD_VAR 0 1
62233: PPUSH
62234: LD_INT 21
62236: PUSH
62237: LD_INT 3
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PPUSH
62244: CALL_OW 72
62248: ST_TO_ADDR
// if not tmp then
62249: LD_VAR 0 5
62253: NOT
62254: IFFALSE 62258
// exit ;
62256: GO 62303
// for i in tmp do
62258: LD_ADDR_VAR 0 3
62262: PUSH
62263: LD_VAR 0 5
62267: PUSH
62268: FOR_IN
62269: IFFALSE 62301
// begin result := EnemyInRange ( i , 22 ) ;
62271: LD_ADDR_VAR 0 2
62275: PUSH
62276: LD_VAR 0 3
62280: PPUSH
62281: LD_INT 22
62283: PPUSH
62284: CALL 59890 0 2
62288: ST_TO_ADDR
// if result then
62289: LD_VAR 0 2
62293: IFFALSE 62299
// exit ;
62295: POP
62296: POP
62297: GO 62303
// end ;
62299: GO 62268
62301: POP
62302: POP
// end ;
62303: LD_VAR 0 2
62307: RET
// export function FilterByTag ( units , tag ) ; begin
62308: LD_INT 0
62310: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62311: LD_ADDR_VAR 0 3
62315: PUSH
62316: LD_VAR 0 1
62320: PPUSH
62321: LD_INT 120
62323: PUSH
62324: LD_VAR 0 2
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PPUSH
62333: CALL_OW 72
62337: ST_TO_ADDR
// end ;
62338: LD_VAR 0 3
62342: RET
// export function IsDriver ( un ) ; begin
62343: LD_INT 0
62345: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62346: LD_ADDR_VAR 0 2
62350: PUSH
62351: LD_VAR 0 1
62355: PUSH
62356: LD_INT 55
62358: PUSH
62359: EMPTY
62360: LIST
62361: PPUSH
62362: CALL_OW 69
62366: IN
62367: ST_TO_ADDR
// end ;
62368: LD_VAR 0 2
62372: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62373: LD_INT 0
62375: PPUSH
62376: PPUSH
// list := [ ] ;
62377: LD_ADDR_VAR 0 5
62381: PUSH
62382: EMPTY
62383: ST_TO_ADDR
// case d of 0 :
62384: LD_VAR 0 3
62388: PUSH
62389: LD_INT 0
62391: DOUBLE
62392: EQUAL
62393: IFTRUE 62397
62395: GO 62530
62397: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62398: LD_ADDR_VAR 0 5
62402: PUSH
62403: LD_VAR 0 1
62407: PUSH
62408: LD_INT 4
62410: MINUS
62411: PUSH
62412: LD_VAR 0 2
62416: PUSH
62417: LD_INT 4
62419: MINUS
62420: PUSH
62421: LD_INT 2
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: LIST
62428: PUSH
62429: LD_VAR 0 1
62433: PUSH
62434: LD_INT 3
62436: MINUS
62437: PUSH
62438: LD_VAR 0 2
62442: PUSH
62443: LD_INT 1
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: LIST
62450: PUSH
62451: LD_VAR 0 1
62455: PUSH
62456: LD_INT 4
62458: PLUS
62459: PUSH
62460: LD_VAR 0 2
62464: PUSH
62465: LD_INT 4
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: LIST
62472: PUSH
62473: LD_VAR 0 1
62477: PUSH
62478: LD_INT 3
62480: PLUS
62481: PUSH
62482: LD_VAR 0 2
62486: PUSH
62487: LD_INT 3
62489: PLUS
62490: PUSH
62491: LD_INT 5
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: LIST
62498: PUSH
62499: LD_VAR 0 1
62503: PUSH
62504: LD_VAR 0 2
62508: PUSH
62509: LD_INT 4
62511: PLUS
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: LIST
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: ST_TO_ADDR
// end ; 1 :
62528: GO 63228
62530: LD_INT 1
62532: DOUBLE
62533: EQUAL
62534: IFTRUE 62538
62536: GO 62671
62538: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62539: LD_ADDR_VAR 0 5
62543: PUSH
62544: LD_VAR 0 1
62548: PUSH
62549: LD_VAR 0 2
62553: PUSH
62554: LD_INT 4
62556: MINUS
62557: PUSH
62558: LD_INT 3
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: LIST
62565: PUSH
62566: LD_VAR 0 1
62570: PUSH
62571: LD_INT 3
62573: MINUS
62574: PUSH
62575: LD_VAR 0 2
62579: PUSH
62580: LD_INT 3
62582: MINUS
62583: PUSH
62584: LD_INT 2
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: LIST
62591: PUSH
62592: LD_VAR 0 1
62596: PUSH
62597: LD_INT 4
62599: MINUS
62600: PUSH
62601: LD_VAR 0 2
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: LIST
62613: PUSH
62614: LD_VAR 0 1
62618: PUSH
62619: LD_VAR 0 2
62623: PUSH
62624: LD_INT 3
62626: PLUS
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: LIST
62635: PUSH
62636: LD_VAR 0 1
62640: PUSH
62641: LD_INT 4
62643: PLUS
62644: PUSH
62645: LD_VAR 0 2
62649: PUSH
62650: LD_INT 4
62652: PLUS
62653: PUSH
62654: LD_INT 5
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: LIST
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: ST_TO_ADDR
// end ; 2 :
62669: GO 63228
62671: LD_INT 2
62673: DOUBLE
62674: EQUAL
62675: IFTRUE 62679
62677: GO 62808
62679: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62680: LD_ADDR_VAR 0 5
62684: PUSH
62685: LD_VAR 0 1
62689: PUSH
62690: LD_VAR 0 2
62694: PUSH
62695: LD_INT 3
62697: MINUS
62698: PUSH
62699: LD_INT 3
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: LIST
62706: PUSH
62707: LD_VAR 0 1
62711: PUSH
62712: LD_INT 4
62714: PLUS
62715: PUSH
62716: LD_VAR 0 2
62720: PUSH
62721: LD_INT 4
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: LIST
62728: PUSH
62729: LD_VAR 0 1
62733: PUSH
62734: LD_VAR 0 2
62738: PUSH
62739: LD_INT 4
62741: PLUS
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: LIST
62750: PUSH
62751: LD_VAR 0 1
62755: PUSH
62756: LD_INT 3
62758: MINUS
62759: PUSH
62760: LD_VAR 0 2
62764: PUSH
62765: LD_INT 1
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: LIST
62772: PUSH
62773: LD_VAR 0 1
62777: PUSH
62778: LD_INT 4
62780: MINUS
62781: PUSH
62782: LD_VAR 0 2
62786: PUSH
62787: LD_INT 4
62789: MINUS
62790: PUSH
62791: LD_INT 2
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: LIST
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: ST_TO_ADDR
// end ; 3 :
62806: GO 63228
62808: LD_INT 3
62810: DOUBLE
62811: EQUAL
62812: IFTRUE 62816
62814: GO 62949
62816: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62817: LD_ADDR_VAR 0 5
62821: PUSH
62822: LD_VAR 0 1
62826: PUSH
62827: LD_INT 3
62829: PLUS
62830: PUSH
62831: LD_VAR 0 2
62835: PUSH
62836: LD_INT 4
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: LIST
62843: PUSH
62844: LD_VAR 0 1
62848: PUSH
62849: LD_INT 4
62851: PLUS
62852: PUSH
62853: LD_VAR 0 2
62857: PUSH
62858: LD_INT 4
62860: PLUS
62861: PUSH
62862: LD_INT 5
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: LIST
62869: PUSH
62870: LD_VAR 0 1
62874: PUSH
62875: LD_INT 4
62877: MINUS
62878: PUSH
62879: LD_VAR 0 2
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: LIST
62891: PUSH
62892: LD_VAR 0 1
62896: PUSH
62897: LD_VAR 0 2
62901: PUSH
62902: LD_INT 4
62904: MINUS
62905: PUSH
62906: LD_INT 3
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: LIST
62913: PUSH
62914: LD_VAR 0 1
62918: PUSH
62919: LD_INT 3
62921: MINUS
62922: PUSH
62923: LD_VAR 0 2
62927: PUSH
62928: LD_INT 3
62930: MINUS
62931: PUSH
62932: LD_INT 2
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: LIST
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: ST_TO_ADDR
// end ; 4 :
62947: GO 63228
62949: LD_INT 4
62951: DOUBLE
62952: EQUAL
62953: IFTRUE 62957
62955: GO 63090
62957: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62958: LD_ADDR_VAR 0 5
62962: PUSH
62963: LD_VAR 0 1
62967: PUSH
62968: LD_VAR 0 2
62972: PUSH
62973: LD_INT 4
62975: PLUS
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: LIST
62984: PUSH
62985: LD_VAR 0 1
62989: PUSH
62990: LD_INT 3
62992: PLUS
62993: PUSH
62994: LD_VAR 0 2
62998: PUSH
62999: LD_INT 3
63001: PLUS
63002: PUSH
63003: LD_INT 5
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: LIST
63010: PUSH
63011: LD_VAR 0 1
63015: PUSH
63016: LD_INT 4
63018: PLUS
63019: PUSH
63020: LD_VAR 0 2
63024: PUSH
63025: LD_INT 4
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: LIST
63032: PUSH
63033: LD_VAR 0 1
63037: PUSH
63038: LD_VAR 0 2
63042: PUSH
63043: LD_INT 3
63045: MINUS
63046: PUSH
63047: LD_INT 3
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: LIST
63054: PUSH
63055: LD_VAR 0 1
63059: PUSH
63060: LD_INT 4
63062: MINUS
63063: PUSH
63064: LD_VAR 0 2
63068: PUSH
63069: LD_INT 4
63071: MINUS
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: LIST
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: ST_TO_ADDR
// end ; 5 :
63088: GO 63228
63090: LD_INT 5
63092: DOUBLE
63093: EQUAL
63094: IFTRUE 63098
63096: GO 63227
63098: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63099: LD_ADDR_VAR 0 5
63103: PUSH
63104: LD_VAR 0 1
63108: PUSH
63109: LD_INT 4
63111: MINUS
63112: PUSH
63113: LD_VAR 0 2
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: LIST
63125: PUSH
63126: LD_VAR 0 1
63130: PUSH
63131: LD_VAR 0 2
63135: PUSH
63136: LD_INT 4
63138: MINUS
63139: PUSH
63140: LD_INT 3
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: LIST
63147: PUSH
63148: LD_VAR 0 1
63152: PUSH
63153: LD_INT 4
63155: PLUS
63156: PUSH
63157: LD_VAR 0 2
63161: PUSH
63162: LD_INT 4
63164: PLUS
63165: PUSH
63166: LD_INT 5
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: LIST
63173: PUSH
63174: LD_VAR 0 1
63178: PUSH
63179: LD_INT 3
63181: PLUS
63182: PUSH
63183: LD_VAR 0 2
63187: PUSH
63188: LD_INT 4
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: LIST
63195: PUSH
63196: LD_VAR 0 1
63200: PUSH
63201: LD_VAR 0 2
63205: PUSH
63206: LD_INT 3
63208: PLUS
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: LIST
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: ST_TO_ADDR
// end ; end ;
63225: GO 63228
63227: POP
// result := list ;
63228: LD_ADDR_VAR 0 4
63232: PUSH
63233: LD_VAR 0 5
63237: ST_TO_ADDR
// end ;
63238: LD_VAR 0 4
63242: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63243: LD_INT 0
63245: PPUSH
63246: PPUSH
63247: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63248: LD_VAR 0 1
63252: NOT
63253: PUSH
63254: LD_VAR 0 2
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: LD_INT 2
63264: PUSH
63265: LD_INT 3
63267: PUSH
63268: LD_INT 4
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: IN
63277: NOT
63278: OR
63279: IFFALSE 63283
// exit ;
63281: GO 63366
// tmp := [ ] ;
63283: LD_ADDR_VAR 0 5
63287: PUSH
63288: EMPTY
63289: ST_TO_ADDR
// for i in units do
63290: LD_ADDR_VAR 0 4
63294: PUSH
63295: LD_VAR 0 1
63299: PUSH
63300: FOR_IN
63301: IFFALSE 63335
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63303: LD_ADDR_VAR 0 5
63307: PUSH
63308: LD_VAR 0 5
63312: PPUSH
63313: LD_VAR 0 4
63317: PPUSH
63318: LD_VAR 0 2
63322: PPUSH
63323: CALL_OW 259
63327: PPUSH
63328: CALL 64726 0 2
63332: ST_TO_ADDR
63333: GO 63300
63335: POP
63336: POP
// if not tmp then
63337: LD_VAR 0 5
63341: NOT
63342: IFFALSE 63346
// exit ;
63344: GO 63366
// result := SortListByListDesc ( units , tmp ) ;
63346: LD_ADDR_VAR 0 3
63350: PUSH
63351: LD_VAR 0 1
63355: PPUSH
63356: LD_VAR 0 5
63360: PPUSH
63361: CALL_OW 77
63365: ST_TO_ADDR
// end ;
63366: LD_VAR 0 3
63370: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63371: LD_INT 0
63373: PPUSH
63374: PPUSH
63375: PPUSH
// result := false ;
63376: LD_ADDR_VAR 0 3
63380: PUSH
63381: LD_INT 0
63383: ST_TO_ADDR
// if not building then
63384: LD_VAR 0 2
63388: NOT
63389: IFFALSE 63393
// exit ;
63391: GO 63531
// x := GetX ( building ) ;
63393: LD_ADDR_VAR 0 4
63397: PUSH
63398: LD_VAR 0 2
63402: PPUSH
63403: CALL_OW 250
63407: ST_TO_ADDR
// y := GetY ( building ) ;
63408: LD_ADDR_VAR 0 5
63412: PUSH
63413: LD_VAR 0 2
63417: PPUSH
63418: CALL_OW 251
63422: ST_TO_ADDR
// if not x or not y then
63423: LD_VAR 0 4
63427: NOT
63428: PUSH
63429: LD_VAR 0 5
63433: NOT
63434: OR
63435: IFFALSE 63439
// exit ;
63437: GO 63531
// if GetTaskList ( unit ) then
63439: LD_VAR 0 1
63443: PPUSH
63444: CALL_OW 437
63448: IFFALSE 63531
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63450: LD_STRING e
63452: PUSH
63453: LD_VAR 0 1
63457: PPUSH
63458: CALL_OW 437
63462: PUSH
63463: LD_INT 1
63465: ARRAY
63466: PUSH
63467: LD_INT 1
63469: ARRAY
63470: EQUAL
63471: PUSH
63472: LD_VAR 0 4
63476: PUSH
63477: LD_VAR 0 1
63481: PPUSH
63482: CALL_OW 437
63486: PUSH
63487: LD_INT 1
63489: ARRAY
63490: PUSH
63491: LD_INT 2
63493: ARRAY
63494: EQUAL
63495: AND
63496: PUSH
63497: LD_VAR 0 5
63501: PUSH
63502: LD_VAR 0 1
63506: PPUSH
63507: CALL_OW 437
63511: PUSH
63512: LD_INT 1
63514: ARRAY
63515: PUSH
63516: LD_INT 3
63518: ARRAY
63519: EQUAL
63520: AND
63521: IFFALSE 63531
// result := true end ;
63523: LD_ADDR_VAR 0 3
63527: PUSH
63528: LD_INT 1
63530: ST_TO_ADDR
// end ;
63531: LD_VAR 0 3
63535: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63536: LD_INT 0
63538: PPUSH
// result := false ;
63539: LD_ADDR_VAR 0 4
63543: PUSH
63544: LD_INT 0
63546: ST_TO_ADDR
// if GetTaskList ( unit ) then
63547: LD_VAR 0 1
63551: PPUSH
63552: CALL_OW 437
63556: IFFALSE 63639
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63558: LD_STRING M
63560: PUSH
63561: LD_VAR 0 1
63565: PPUSH
63566: CALL_OW 437
63570: PUSH
63571: LD_INT 1
63573: ARRAY
63574: PUSH
63575: LD_INT 1
63577: ARRAY
63578: EQUAL
63579: PUSH
63580: LD_VAR 0 2
63584: PUSH
63585: LD_VAR 0 1
63589: PPUSH
63590: CALL_OW 437
63594: PUSH
63595: LD_INT 1
63597: ARRAY
63598: PUSH
63599: LD_INT 2
63601: ARRAY
63602: EQUAL
63603: AND
63604: PUSH
63605: LD_VAR 0 3
63609: PUSH
63610: LD_VAR 0 1
63614: PPUSH
63615: CALL_OW 437
63619: PUSH
63620: LD_INT 1
63622: ARRAY
63623: PUSH
63624: LD_INT 3
63626: ARRAY
63627: EQUAL
63628: AND
63629: IFFALSE 63639
// result := true ;
63631: LD_ADDR_VAR 0 4
63635: PUSH
63636: LD_INT 1
63638: ST_TO_ADDR
// end ; end ;
63639: LD_VAR 0 4
63643: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63644: LD_INT 0
63646: PPUSH
63647: PPUSH
63648: PPUSH
63649: PPUSH
// if not unit or not area then
63650: LD_VAR 0 1
63654: NOT
63655: PUSH
63656: LD_VAR 0 2
63660: NOT
63661: OR
63662: IFFALSE 63666
// exit ;
63664: GO 63829
// tmp := AreaToList ( area , i ) ;
63666: LD_ADDR_VAR 0 6
63670: PUSH
63671: LD_VAR 0 2
63675: PPUSH
63676: LD_VAR 0 5
63680: PPUSH
63681: CALL_OW 517
63685: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63686: LD_ADDR_VAR 0 5
63690: PUSH
63691: DOUBLE
63692: LD_INT 1
63694: DEC
63695: ST_TO_ADDR
63696: LD_VAR 0 6
63700: PUSH
63701: LD_INT 1
63703: ARRAY
63704: PUSH
63705: FOR_TO
63706: IFFALSE 63827
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63708: LD_ADDR_VAR 0 7
63712: PUSH
63713: LD_VAR 0 6
63717: PUSH
63718: LD_INT 1
63720: ARRAY
63721: PUSH
63722: LD_VAR 0 5
63726: ARRAY
63727: PUSH
63728: LD_VAR 0 6
63732: PUSH
63733: LD_INT 2
63735: ARRAY
63736: PUSH
63737: LD_VAR 0 5
63741: ARRAY
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
63747: LD_INT 92
63749: PUSH
63750: LD_VAR 0 7
63754: PUSH
63755: LD_INT 1
63757: ARRAY
63758: PUSH
63759: LD_VAR 0 7
63763: PUSH
63764: LD_INT 2
63766: ARRAY
63767: PUSH
63768: LD_INT 3
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: PPUSH
63777: CALL_OW 69
63781: PUSH
63782: LD_INT 0
63784: EQUAL
63785: IFFALSE 63825
// begin PlaceUnitArea ( unit , area , mode ) ;
63787: LD_VAR 0 1
63791: PPUSH
63792: LD_VAR 0 2
63796: PPUSH
63797: LD_VAR 0 3
63801: PPUSH
63802: CALL_OW 49
// result := IsPlaced ( unit ) ;
63806: LD_ADDR_VAR 0 4
63810: PUSH
63811: LD_VAR 0 1
63815: PPUSH
63816: CALL_OW 305
63820: ST_TO_ADDR
// exit ;
63821: POP
63822: POP
63823: GO 63829
// end ; end ;
63825: GO 63705
63827: POP
63828: POP
// end ;
63829: LD_VAR 0 4
63833: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63834: LD_INT 0
63836: PPUSH
63837: PPUSH
63838: PPUSH
// if not side or side > 8 then
63839: LD_VAR 0 1
63843: NOT
63844: PUSH
63845: LD_VAR 0 1
63849: PUSH
63850: LD_INT 8
63852: GREATER
63853: OR
63854: IFFALSE 63858
// exit ;
63856: GO 64045
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63858: LD_ADDR_VAR 0 4
63862: PUSH
63863: LD_INT 22
63865: PUSH
63866: LD_VAR 0 1
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 21
63877: PUSH
63878: LD_INT 3
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PPUSH
63889: CALL_OW 69
63893: ST_TO_ADDR
// if not tmp then
63894: LD_VAR 0 4
63898: NOT
63899: IFFALSE 63903
// exit ;
63901: GO 64045
// enable_addtolog := true ;
63903: LD_ADDR_OWVAR 81
63907: PUSH
63908: LD_INT 1
63910: ST_TO_ADDR
// AddToLog ( [ ) ;
63911: LD_STRING [
63913: PPUSH
63914: CALL_OW 561
// for i in tmp do
63918: LD_ADDR_VAR 0 3
63922: PUSH
63923: LD_VAR 0 4
63927: PUSH
63928: FOR_IN
63929: IFFALSE 64036
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63931: LD_STRING [
63933: PUSH
63934: LD_VAR 0 3
63938: PPUSH
63939: CALL_OW 266
63943: STR
63944: PUSH
63945: LD_STRING , 
63947: STR
63948: PUSH
63949: LD_VAR 0 3
63953: PPUSH
63954: CALL_OW 250
63958: STR
63959: PUSH
63960: LD_STRING , 
63962: STR
63963: PUSH
63964: LD_VAR 0 3
63968: PPUSH
63969: CALL_OW 251
63973: STR
63974: PUSH
63975: LD_STRING , 
63977: STR
63978: PUSH
63979: LD_VAR 0 3
63983: PPUSH
63984: CALL_OW 254
63988: STR
63989: PUSH
63990: LD_STRING , 
63992: STR
63993: PUSH
63994: LD_VAR 0 3
63998: PPUSH
63999: LD_INT 1
64001: PPUSH
64002: CALL_OW 268
64006: STR
64007: PUSH
64008: LD_STRING , 
64010: STR
64011: PUSH
64012: LD_VAR 0 3
64016: PPUSH
64017: LD_INT 2
64019: PPUSH
64020: CALL_OW 268
64024: STR
64025: PUSH
64026: LD_STRING ],
64028: STR
64029: PPUSH
64030: CALL_OW 561
// end ;
64034: GO 63928
64036: POP
64037: POP
// AddToLog ( ]; ) ;
64038: LD_STRING ];
64040: PPUSH
64041: CALL_OW 561
// end ;
64045: LD_VAR 0 2
64049: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64050: LD_INT 0
64052: PPUSH
64053: PPUSH
64054: PPUSH
64055: PPUSH
64056: PPUSH
// if not area or not rate or not max then
64057: LD_VAR 0 1
64061: NOT
64062: PUSH
64063: LD_VAR 0 2
64067: NOT
64068: OR
64069: PUSH
64070: LD_VAR 0 4
64074: NOT
64075: OR
64076: IFFALSE 64080
// exit ;
64078: GO 64269
// while 1 do
64080: LD_INT 1
64082: IFFALSE 64269
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64084: LD_ADDR_VAR 0 9
64088: PUSH
64089: LD_VAR 0 1
64093: PPUSH
64094: LD_INT 1
64096: PPUSH
64097: CALL_OW 287
64101: PUSH
64102: LD_INT 10
64104: MUL
64105: ST_TO_ADDR
// r := rate / 10 ;
64106: LD_ADDR_VAR 0 7
64110: PUSH
64111: LD_VAR 0 2
64115: PUSH
64116: LD_INT 10
64118: DIVREAL
64119: ST_TO_ADDR
// time := 1 1$00 ;
64120: LD_ADDR_VAR 0 8
64124: PUSH
64125: LD_INT 2100
64127: ST_TO_ADDR
// if amount < min then
64128: LD_VAR 0 9
64132: PUSH
64133: LD_VAR 0 3
64137: LESS
64138: IFFALSE 64156
// r := r * 2 else
64140: LD_ADDR_VAR 0 7
64144: PUSH
64145: LD_VAR 0 7
64149: PUSH
64150: LD_INT 2
64152: MUL
64153: ST_TO_ADDR
64154: GO 64182
// if amount > max then
64156: LD_VAR 0 9
64160: PUSH
64161: LD_VAR 0 4
64165: GREATER
64166: IFFALSE 64182
// r := r / 2 ;
64168: LD_ADDR_VAR 0 7
64172: PUSH
64173: LD_VAR 0 7
64177: PUSH
64178: LD_INT 2
64180: DIVREAL
64181: ST_TO_ADDR
// time := time / r ;
64182: LD_ADDR_VAR 0 8
64186: PUSH
64187: LD_VAR 0 8
64191: PUSH
64192: LD_VAR 0 7
64196: DIVREAL
64197: ST_TO_ADDR
// if time < 0 then
64198: LD_VAR 0 8
64202: PUSH
64203: LD_INT 0
64205: LESS
64206: IFFALSE 64223
// time := time * - 1 ;
64208: LD_ADDR_VAR 0 8
64212: PUSH
64213: LD_VAR 0 8
64217: PUSH
64218: LD_INT 1
64220: NEG
64221: MUL
64222: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64223: LD_VAR 0 8
64227: PUSH
64228: LD_INT 35
64230: PPUSH
64231: LD_INT 875
64233: PPUSH
64234: CALL_OW 12
64238: PLUS
64239: PPUSH
64240: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64244: LD_INT 1
64246: PPUSH
64247: LD_INT 5
64249: PPUSH
64250: CALL_OW 12
64254: PPUSH
64255: LD_VAR 0 1
64259: PPUSH
64260: LD_INT 1
64262: PPUSH
64263: CALL_OW 55
// end ;
64267: GO 64080
// end ;
64269: LD_VAR 0 5
64273: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64274: LD_INT 0
64276: PPUSH
64277: PPUSH
64278: PPUSH
64279: PPUSH
64280: PPUSH
64281: PPUSH
64282: PPUSH
64283: PPUSH
// if not turrets or not factories then
64284: LD_VAR 0 1
64288: NOT
64289: PUSH
64290: LD_VAR 0 2
64294: NOT
64295: OR
64296: IFFALSE 64300
// exit ;
64298: GO 64607
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64300: LD_ADDR_VAR 0 10
64304: PUSH
64305: LD_INT 5
64307: PUSH
64308: LD_INT 6
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 2
64317: PUSH
64318: LD_INT 4
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 3
64327: PUSH
64328: LD_INT 5
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 24
64342: PUSH
64343: LD_INT 25
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 23
64352: PUSH
64353: LD_INT 27
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 42
64366: PUSH
64367: LD_INT 43
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 44
64376: PUSH
64377: LD_INT 46
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 45
64386: PUSH
64387: LD_INT 47
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: LIST
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: LIST
64403: ST_TO_ADDR
// result := [ ] ;
64404: LD_ADDR_VAR 0 3
64408: PUSH
64409: EMPTY
64410: ST_TO_ADDR
// for i in turrets do
64411: LD_ADDR_VAR 0 4
64415: PUSH
64416: LD_VAR 0 1
64420: PUSH
64421: FOR_IN
64422: IFFALSE 64605
// begin nat := GetNation ( i ) ;
64424: LD_ADDR_VAR 0 7
64428: PUSH
64429: LD_VAR 0 4
64433: PPUSH
64434: CALL_OW 248
64438: ST_TO_ADDR
// weapon := 0 ;
64439: LD_ADDR_VAR 0 8
64443: PUSH
64444: LD_INT 0
64446: ST_TO_ADDR
// if not nat then
64447: LD_VAR 0 7
64451: NOT
64452: IFFALSE 64456
// continue ;
64454: GO 64421
// for j in list [ nat ] do
64456: LD_ADDR_VAR 0 5
64460: PUSH
64461: LD_VAR 0 10
64465: PUSH
64466: LD_VAR 0 7
64470: ARRAY
64471: PUSH
64472: FOR_IN
64473: IFFALSE 64514
// if GetBWeapon ( i ) = j [ 1 ] then
64475: LD_VAR 0 4
64479: PPUSH
64480: CALL_OW 269
64484: PUSH
64485: LD_VAR 0 5
64489: PUSH
64490: LD_INT 1
64492: ARRAY
64493: EQUAL
64494: IFFALSE 64512
// begin weapon := j [ 2 ] ;
64496: LD_ADDR_VAR 0 8
64500: PUSH
64501: LD_VAR 0 5
64505: PUSH
64506: LD_INT 2
64508: ARRAY
64509: ST_TO_ADDR
// break ;
64510: GO 64514
// end ;
64512: GO 64472
64514: POP
64515: POP
// if not weapon then
64516: LD_VAR 0 8
64520: NOT
64521: IFFALSE 64525
// continue ;
64523: GO 64421
// for k in factories do
64525: LD_ADDR_VAR 0 6
64529: PUSH
64530: LD_VAR 0 2
64534: PUSH
64535: FOR_IN
64536: IFFALSE 64601
// begin weapons := AvailableWeaponList ( k ) ;
64538: LD_ADDR_VAR 0 9
64542: PUSH
64543: LD_VAR 0 6
64547: PPUSH
64548: CALL_OW 478
64552: ST_TO_ADDR
// if not weapons then
64553: LD_VAR 0 9
64557: NOT
64558: IFFALSE 64562
// continue ;
64560: GO 64535
// if weapon in weapons then
64562: LD_VAR 0 8
64566: PUSH
64567: LD_VAR 0 9
64571: IN
64572: IFFALSE 64599
// begin result := [ i , weapon ] ;
64574: LD_ADDR_VAR 0 3
64578: PUSH
64579: LD_VAR 0 4
64583: PUSH
64584: LD_VAR 0 8
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: ST_TO_ADDR
// exit ;
64593: POP
64594: POP
64595: POP
64596: POP
64597: GO 64607
// end ; end ;
64599: GO 64535
64601: POP
64602: POP
// end ;
64603: GO 64421
64605: POP
64606: POP
// end ;
64607: LD_VAR 0 3
64611: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64612: LD_INT 0
64614: PPUSH
// if not side or side > 8 then
64615: LD_VAR 0 3
64619: NOT
64620: PUSH
64621: LD_VAR 0 3
64625: PUSH
64626: LD_INT 8
64628: GREATER
64629: OR
64630: IFFALSE 64634
// exit ;
64632: GO 64693
// if not range then
64634: LD_VAR 0 4
64638: NOT
64639: IFFALSE 64650
// range := - 12 ;
64641: LD_ADDR_VAR 0 4
64645: PUSH
64646: LD_INT 12
64648: NEG
64649: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64650: LD_VAR 0 1
64654: PPUSH
64655: LD_VAR 0 2
64659: PPUSH
64660: LD_VAR 0 3
64664: PPUSH
64665: LD_VAR 0 4
64669: PPUSH
64670: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64674: LD_VAR 0 1
64678: PPUSH
64679: LD_VAR 0 2
64683: PPUSH
64684: LD_VAR 0 3
64688: PPUSH
64689: CALL_OW 331
// end ;
64693: LD_VAR 0 5
64697: RET
// export function Video ( mode ) ; begin
64698: LD_INT 0
64700: PPUSH
// ingame_video = mode ;
64701: LD_ADDR_OWVAR 52
64705: PUSH
64706: LD_VAR 0 1
64710: ST_TO_ADDR
// interface_hidden = mode ;
64711: LD_ADDR_OWVAR 54
64715: PUSH
64716: LD_VAR 0 1
64720: ST_TO_ADDR
// end ;
64721: LD_VAR 0 2
64725: RET
// export function Join ( array , element ) ; begin
64726: LD_INT 0
64728: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64729: LD_ADDR_VAR 0 3
64733: PUSH
64734: LD_VAR 0 1
64738: PPUSH
64739: LD_VAR 0 1
64743: PUSH
64744: LD_INT 1
64746: PLUS
64747: PPUSH
64748: LD_VAR 0 2
64752: PPUSH
64753: CALL_OW 1
64757: ST_TO_ADDR
// end ;
64758: LD_VAR 0 3
64762: RET
// export function JoinUnion ( array , element ) ; begin
64763: LD_INT 0
64765: PPUSH
// result := array union element ;
64766: LD_ADDR_VAR 0 3
64770: PUSH
64771: LD_VAR 0 1
64775: PUSH
64776: LD_VAR 0 2
64780: UNION
64781: ST_TO_ADDR
// end ;
64782: LD_VAR 0 3
64786: RET
// export function GetBehemoths ( side ) ; begin
64787: LD_INT 0
64789: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64790: LD_ADDR_VAR 0 2
64794: PUSH
64795: LD_INT 22
64797: PUSH
64798: LD_VAR 0 1
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 31
64809: PUSH
64810: LD_INT 25
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PPUSH
64821: CALL_OW 69
64825: ST_TO_ADDR
// end ;
64826: LD_VAR 0 2
64830: RET
// export function Shuffle ( array ) ; var i , index ; begin
64831: LD_INT 0
64833: PPUSH
64834: PPUSH
64835: PPUSH
// result := [ ] ;
64836: LD_ADDR_VAR 0 2
64840: PUSH
64841: EMPTY
64842: ST_TO_ADDR
// if not array then
64843: LD_VAR 0 1
64847: NOT
64848: IFFALSE 64852
// exit ;
64850: GO 64951
// Randomize ;
64852: CALL_OW 10
// for i = array downto 1 do
64856: LD_ADDR_VAR 0 3
64860: PUSH
64861: DOUBLE
64862: LD_VAR 0 1
64866: INC
64867: ST_TO_ADDR
64868: LD_INT 1
64870: PUSH
64871: FOR_DOWNTO
64872: IFFALSE 64949
// begin index := rand ( 1 , array ) ;
64874: LD_ADDR_VAR 0 4
64878: PUSH
64879: LD_INT 1
64881: PPUSH
64882: LD_VAR 0 1
64886: PPUSH
64887: CALL_OW 12
64891: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64892: LD_ADDR_VAR 0 2
64896: PUSH
64897: LD_VAR 0 2
64901: PPUSH
64902: LD_VAR 0 2
64906: PUSH
64907: LD_INT 1
64909: PLUS
64910: PPUSH
64911: LD_VAR 0 1
64915: PUSH
64916: LD_VAR 0 4
64920: ARRAY
64921: PPUSH
64922: CALL_OW 2
64926: ST_TO_ADDR
// array := Delete ( array , index ) ;
64927: LD_ADDR_VAR 0 1
64931: PUSH
64932: LD_VAR 0 1
64936: PPUSH
64937: LD_VAR 0 4
64941: PPUSH
64942: CALL_OW 3
64946: ST_TO_ADDR
// end ;
64947: GO 64871
64949: POP
64950: POP
// end ;
64951: LD_VAR 0 2
64955: RET
// export function GetBaseMaterials ( base ) ; begin
64956: LD_INT 0
64958: PPUSH
// result := [ 0 , 0 , 0 ] ;
64959: LD_ADDR_VAR 0 2
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: LIST
64977: ST_TO_ADDR
// if not base then
64978: LD_VAR 0 1
64982: NOT
64983: IFFALSE 64987
// exit ;
64985: GO 65036
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64987: LD_ADDR_VAR 0 2
64991: PUSH
64992: LD_VAR 0 1
64996: PPUSH
64997: LD_INT 1
64999: PPUSH
65000: CALL_OW 275
65004: PUSH
65005: LD_VAR 0 1
65009: PPUSH
65010: LD_INT 2
65012: PPUSH
65013: CALL_OW 275
65017: PUSH
65018: LD_VAR 0 1
65022: PPUSH
65023: LD_INT 3
65025: PPUSH
65026: CALL_OW 275
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: LIST
65035: ST_TO_ADDR
// end ;
65036: LD_VAR 0 2
65040: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65041: LD_INT 0
65043: PPUSH
65044: PPUSH
// result := array ;
65045: LD_ADDR_VAR 0 3
65049: PUSH
65050: LD_VAR 0 1
65054: ST_TO_ADDR
// if size >= result then
65055: LD_VAR 0 2
65059: PUSH
65060: LD_VAR 0 3
65064: GREATEREQUAL
65065: IFFALSE 65069
// exit ;
65067: GO 65119
// if size then
65069: LD_VAR 0 2
65073: IFFALSE 65119
// for i := array downto size do
65075: LD_ADDR_VAR 0 4
65079: PUSH
65080: DOUBLE
65081: LD_VAR 0 1
65085: INC
65086: ST_TO_ADDR
65087: LD_VAR 0 2
65091: PUSH
65092: FOR_DOWNTO
65093: IFFALSE 65117
// result := Delete ( result , result ) ;
65095: LD_ADDR_VAR 0 3
65099: PUSH
65100: LD_VAR 0 3
65104: PPUSH
65105: LD_VAR 0 3
65109: PPUSH
65110: CALL_OW 3
65114: ST_TO_ADDR
65115: GO 65092
65117: POP
65118: POP
// end ;
65119: LD_VAR 0 3
65123: RET
// export function ComExit ( unit ) ; var tmp ; begin
65124: LD_INT 0
65126: PPUSH
65127: PPUSH
// if not IsInUnit ( unit ) then
65128: LD_VAR 0 1
65132: PPUSH
65133: CALL_OW 310
65137: NOT
65138: IFFALSE 65142
// exit ;
65140: GO 65202
// tmp := IsInUnit ( unit ) ;
65142: LD_ADDR_VAR 0 3
65146: PUSH
65147: LD_VAR 0 1
65151: PPUSH
65152: CALL_OW 310
65156: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65157: LD_VAR 0 3
65161: PPUSH
65162: CALL_OW 247
65166: PUSH
65167: LD_INT 2
65169: EQUAL
65170: IFFALSE 65183
// ComExitVehicle ( unit ) else
65172: LD_VAR 0 1
65176: PPUSH
65177: CALL_OW 121
65181: GO 65192
// ComExitBuilding ( unit ) ;
65183: LD_VAR 0 1
65187: PPUSH
65188: CALL_OW 122
// result := tmp ;
65192: LD_ADDR_VAR 0 2
65196: PUSH
65197: LD_VAR 0 3
65201: ST_TO_ADDR
// end ;
65202: LD_VAR 0 2
65206: RET
// export function ComExitAll ( units ) ; var i ; begin
65207: LD_INT 0
65209: PPUSH
65210: PPUSH
// if not units then
65211: LD_VAR 0 1
65215: NOT
65216: IFFALSE 65220
// exit ;
65218: GO 65246
// for i in units do
65220: LD_ADDR_VAR 0 3
65224: PUSH
65225: LD_VAR 0 1
65229: PUSH
65230: FOR_IN
65231: IFFALSE 65244
// ComExit ( i ) ;
65233: LD_VAR 0 3
65237: PPUSH
65238: CALL 65124 0 1
65242: GO 65230
65244: POP
65245: POP
// end ;
65246: LD_VAR 0 2
65250: RET
// export function ResetHc ; begin
65251: LD_INT 0
65253: PPUSH
// InitHc ;
65254: CALL_OW 19
// hc_importance := 0 ;
65258: LD_ADDR_OWVAR 32
65262: PUSH
65263: LD_INT 0
65265: ST_TO_ADDR
// end ;
65266: LD_VAR 0 1
65270: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65271: LD_INT 0
65273: PPUSH
65274: PPUSH
65275: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65276: LD_ADDR_VAR 0 6
65280: PUSH
65281: LD_VAR 0 1
65285: PUSH
65286: LD_VAR 0 3
65290: PLUS
65291: PUSH
65292: LD_INT 2
65294: DIV
65295: ST_TO_ADDR
// if _x < 0 then
65296: LD_VAR 0 6
65300: PUSH
65301: LD_INT 0
65303: LESS
65304: IFFALSE 65321
// _x := _x * - 1 ;
65306: LD_ADDR_VAR 0 6
65310: PUSH
65311: LD_VAR 0 6
65315: PUSH
65316: LD_INT 1
65318: NEG
65319: MUL
65320: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65321: LD_ADDR_VAR 0 7
65325: PUSH
65326: LD_VAR 0 2
65330: PUSH
65331: LD_VAR 0 4
65335: PLUS
65336: PUSH
65337: LD_INT 2
65339: DIV
65340: ST_TO_ADDR
// if _y < 0 then
65341: LD_VAR 0 7
65345: PUSH
65346: LD_INT 0
65348: LESS
65349: IFFALSE 65366
// _y := _y * - 1 ;
65351: LD_ADDR_VAR 0 7
65355: PUSH
65356: LD_VAR 0 7
65360: PUSH
65361: LD_INT 1
65363: NEG
65364: MUL
65365: ST_TO_ADDR
// result := [ _x , _y ] ;
65366: LD_ADDR_VAR 0 5
65370: PUSH
65371: LD_VAR 0 6
65375: PUSH
65376: LD_VAR 0 7
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: ST_TO_ADDR
// end ;
65385: LD_VAR 0 5
65389: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65390: LD_INT 0
65392: PPUSH
65393: PPUSH
65394: PPUSH
65395: PPUSH
// task := GetTaskList ( unit ) ;
65396: LD_ADDR_VAR 0 7
65400: PUSH
65401: LD_VAR 0 1
65405: PPUSH
65406: CALL_OW 437
65410: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65411: LD_VAR 0 7
65415: NOT
65416: PUSH
65417: LD_VAR 0 1
65421: PPUSH
65422: LD_VAR 0 2
65426: PPUSH
65427: CALL_OW 308
65431: NOT
65432: AND
65433: IFFALSE 65437
// exit ;
65435: GO 65555
// if IsInArea ( unit , area ) then
65437: LD_VAR 0 1
65441: PPUSH
65442: LD_VAR 0 2
65446: PPUSH
65447: CALL_OW 308
65451: IFFALSE 65469
// begin ComMoveToArea ( unit , goAway ) ;
65453: LD_VAR 0 1
65457: PPUSH
65458: LD_VAR 0 3
65462: PPUSH
65463: CALL_OW 113
// exit ;
65467: GO 65555
// end ; if task [ 1 ] [ 1 ] <> M then
65469: LD_VAR 0 7
65473: PUSH
65474: LD_INT 1
65476: ARRAY
65477: PUSH
65478: LD_INT 1
65480: ARRAY
65481: PUSH
65482: LD_STRING M
65484: NONEQUAL
65485: IFFALSE 65489
// exit ;
65487: GO 65555
// x := task [ 1 ] [ 2 ] ;
65489: LD_ADDR_VAR 0 5
65493: PUSH
65494: LD_VAR 0 7
65498: PUSH
65499: LD_INT 1
65501: ARRAY
65502: PUSH
65503: LD_INT 2
65505: ARRAY
65506: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65507: LD_ADDR_VAR 0 6
65511: PUSH
65512: LD_VAR 0 7
65516: PUSH
65517: LD_INT 1
65519: ARRAY
65520: PUSH
65521: LD_INT 3
65523: ARRAY
65524: ST_TO_ADDR
// if InArea ( x , y , area ) then
65525: LD_VAR 0 5
65529: PPUSH
65530: LD_VAR 0 6
65534: PPUSH
65535: LD_VAR 0 2
65539: PPUSH
65540: CALL_OW 309
65544: IFFALSE 65555
// ComStop ( unit ) ;
65546: LD_VAR 0 1
65550: PPUSH
65551: CALL_OW 141
// end ;
65555: LD_VAR 0 4
65559: RET
// export function Abs ( value ) ; begin
65560: LD_INT 0
65562: PPUSH
// result := value ;
65563: LD_ADDR_VAR 0 2
65567: PUSH
65568: LD_VAR 0 1
65572: ST_TO_ADDR
// if value < 0 then
65573: LD_VAR 0 1
65577: PUSH
65578: LD_INT 0
65580: LESS
65581: IFFALSE 65598
// result := value * - 1 ;
65583: LD_ADDR_VAR 0 2
65587: PUSH
65588: LD_VAR 0 1
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: MUL
65597: ST_TO_ADDR
// end ;
65598: LD_VAR 0 2
65602: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65603: LD_INT 0
65605: PPUSH
65606: PPUSH
65607: PPUSH
65608: PPUSH
65609: PPUSH
65610: PPUSH
65611: PPUSH
65612: PPUSH
// if not unit or not building then
65613: LD_VAR 0 1
65617: NOT
65618: PUSH
65619: LD_VAR 0 2
65623: NOT
65624: OR
65625: IFFALSE 65629
// exit ;
65627: GO 65855
// x := GetX ( building ) ;
65629: LD_ADDR_VAR 0 4
65633: PUSH
65634: LD_VAR 0 2
65638: PPUSH
65639: CALL_OW 250
65643: ST_TO_ADDR
// y := GetY ( building ) ;
65644: LD_ADDR_VAR 0 6
65648: PUSH
65649: LD_VAR 0 2
65653: PPUSH
65654: CALL_OW 251
65658: ST_TO_ADDR
// d := GetDir ( building ) ;
65659: LD_ADDR_VAR 0 8
65663: PUSH
65664: LD_VAR 0 2
65668: PPUSH
65669: CALL_OW 254
65673: ST_TO_ADDR
// r := 4 ;
65674: LD_ADDR_VAR 0 9
65678: PUSH
65679: LD_INT 4
65681: ST_TO_ADDR
// for i := 1 to 5 do
65682: LD_ADDR_VAR 0 10
65686: PUSH
65687: DOUBLE
65688: LD_INT 1
65690: DEC
65691: ST_TO_ADDR
65692: LD_INT 5
65694: PUSH
65695: FOR_TO
65696: IFFALSE 65853
// begin _x := ShiftX ( x , d , r + i ) ;
65698: LD_ADDR_VAR 0 5
65702: PUSH
65703: LD_VAR 0 4
65707: PPUSH
65708: LD_VAR 0 8
65712: PPUSH
65713: LD_VAR 0 9
65717: PUSH
65718: LD_VAR 0 10
65722: PLUS
65723: PPUSH
65724: CALL_OW 272
65728: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65729: LD_ADDR_VAR 0 7
65733: PUSH
65734: LD_VAR 0 6
65738: PPUSH
65739: LD_VAR 0 8
65743: PPUSH
65744: LD_VAR 0 9
65748: PUSH
65749: LD_VAR 0 10
65753: PLUS
65754: PPUSH
65755: CALL_OW 273
65759: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65760: LD_VAR 0 5
65764: PPUSH
65765: LD_VAR 0 7
65769: PPUSH
65770: CALL_OW 488
65774: PUSH
65775: LD_VAR 0 5
65779: PPUSH
65780: LD_VAR 0 7
65784: PPUSH
65785: CALL_OW 428
65789: PPUSH
65790: CALL_OW 247
65794: PUSH
65795: LD_INT 3
65797: PUSH
65798: LD_INT 2
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: IN
65805: NOT
65806: AND
65807: IFFALSE 65851
// begin ComMoveXY ( unit , _x , _y ) ;
65809: LD_VAR 0 1
65813: PPUSH
65814: LD_VAR 0 5
65818: PPUSH
65819: LD_VAR 0 7
65823: PPUSH
65824: CALL_OW 111
// result := [ _x , _y ] ;
65828: LD_ADDR_VAR 0 3
65832: PUSH
65833: LD_VAR 0 5
65837: PUSH
65838: LD_VAR 0 7
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: ST_TO_ADDR
// exit ;
65847: POP
65848: POP
65849: GO 65855
// end ; end ;
65851: GO 65695
65853: POP
65854: POP
// end ;
65855: LD_VAR 0 3
65859: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65860: LD_INT 0
65862: PPUSH
65863: PPUSH
65864: PPUSH
// result := 0 ;
65865: LD_ADDR_VAR 0 3
65869: PUSH
65870: LD_INT 0
65872: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65873: LD_VAR 0 1
65877: PUSH
65878: LD_INT 0
65880: LESS
65881: PUSH
65882: LD_VAR 0 1
65886: PUSH
65887: LD_INT 8
65889: GREATER
65890: OR
65891: PUSH
65892: LD_VAR 0 2
65896: PUSH
65897: LD_INT 0
65899: LESS
65900: OR
65901: PUSH
65902: LD_VAR 0 2
65906: PUSH
65907: LD_INT 8
65909: GREATER
65910: OR
65911: IFFALSE 65915
// exit ;
65913: GO 65990
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65915: LD_ADDR_VAR 0 4
65919: PUSH
65920: LD_INT 22
65922: PUSH
65923: LD_VAR 0 2
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PPUSH
65932: CALL_OW 69
65936: PUSH
65937: FOR_IN
65938: IFFALSE 65988
// begin un := UnitShoot ( i ) ;
65940: LD_ADDR_VAR 0 5
65944: PUSH
65945: LD_VAR 0 4
65949: PPUSH
65950: CALL_OW 504
65954: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65955: LD_VAR 0 5
65959: PPUSH
65960: CALL_OW 255
65964: PUSH
65965: LD_VAR 0 1
65969: EQUAL
65970: IFFALSE 65986
// begin result := un ;
65972: LD_ADDR_VAR 0 3
65976: PUSH
65977: LD_VAR 0 5
65981: ST_TO_ADDR
// exit ;
65982: POP
65983: POP
65984: GO 65990
// end ; end ;
65986: GO 65937
65988: POP
65989: POP
// end ;
65990: LD_VAR 0 3
65994: RET
// export function GetCargoBay ( units ) ; begin
65995: LD_INT 0
65997: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65998: LD_ADDR_VAR 0 2
66002: PUSH
66003: LD_VAR 0 1
66007: PPUSH
66008: LD_INT 2
66010: PUSH
66011: LD_INT 34
66013: PUSH
66014: LD_INT 12
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 34
66023: PUSH
66024: LD_INT 51
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 34
66033: PUSH
66034: LD_INT 32
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 34
66043: PUSH
66044: LD_INT 89
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: PPUSH
66058: CALL_OW 72
66062: ST_TO_ADDR
// end ;
66063: LD_VAR 0 2
66067: RET
// export function Negate ( value ) ; begin
66068: LD_INT 0
66070: PPUSH
// result := not value ;
66071: LD_ADDR_VAR 0 2
66075: PUSH
66076: LD_VAR 0 1
66080: NOT
66081: ST_TO_ADDR
// end ;
66082: LD_VAR 0 2
66086: RET
// export function Inc ( value ) ; begin
66087: LD_INT 0
66089: PPUSH
// result := value + 1 ;
66090: LD_ADDR_VAR 0 2
66094: PUSH
66095: LD_VAR 0 1
66099: PUSH
66100: LD_INT 1
66102: PLUS
66103: ST_TO_ADDR
// end ;
66104: LD_VAR 0 2
66108: RET
// export function Dec ( value ) ; begin
66109: LD_INT 0
66111: PPUSH
// result := value - 1 ;
66112: LD_ADDR_VAR 0 2
66116: PUSH
66117: LD_VAR 0 1
66121: PUSH
66122: LD_INT 1
66124: MINUS
66125: ST_TO_ADDR
// end ;
66126: LD_VAR 0 2
66130: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66131: LD_INT 0
66133: PPUSH
66134: PPUSH
66135: PPUSH
66136: PPUSH
66137: PPUSH
66138: PPUSH
66139: PPUSH
66140: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66141: LD_VAR 0 1
66145: PPUSH
66146: LD_VAR 0 2
66150: PPUSH
66151: CALL_OW 488
66155: NOT
66156: PUSH
66157: LD_VAR 0 3
66161: PPUSH
66162: LD_VAR 0 4
66166: PPUSH
66167: CALL_OW 488
66171: NOT
66172: OR
66173: IFFALSE 66186
// begin result := - 1 ;
66175: LD_ADDR_VAR 0 5
66179: PUSH
66180: LD_INT 1
66182: NEG
66183: ST_TO_ADDR
// exit ;
66184: GO 66421
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66186: LD_ADDR_VAR 0 12
66190: PUSH
66191: LD_VAR 0 1
66195: PPUSH
66196: LD_VAR 0 2
66200: PPUSH
66201: LD_VAR 0 3
66205: PPUSH
66206: LD_VAR 0 4
66210: PPUSH
66211: CALL 65271 0 4
66215: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66216: LD_ADDR_VAR 0 11
66220: PUSH
66221: LD_VAR 0 1
66225: PPUSH
66226: LD_VAR 0 2
66230: PPUSH
66231: LD_VAR 0 12
66235: PUSH
66236: LD_INT 1
66238: ARRAY
66239: PPUSH
66240: LD_VAR 0 12
66244: PUSH
66245: LD_INT 2
66247: ARRAY
66248: PPUSH
66249: CALL_OW 298
66253: ST_TO_ADDR
// distance := 9999 ;
66254: LD_ADDR_VAR 0 10
66258: PUSH
66259: LD_INT 9999
66261: ST_TO_ADDR
// for i := 0 to 5 do
66262: LD_ADDR_VAR 0 6
66266: PUSH
66267: DOUBLE
66268: LD_INT 0
66270: DEC
66271: ST_TO_ADDR
66272: LD_INT 5
66274: PUSH
66275: FOR_TO
66276: IFFALSE 66419
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66278: LD_ADDR_VAR 0 7
66282: PUSH
66283: LD_VAR 0 1
66287: PPUSH
66288: LD_VAR 0 6
66292: PPUSH
66293: LD_VAR 0 11
66297: PPUSH
66298: CALL_OW 272
66302: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66303: LD_ADDR_VAR 0 8
66307: PUSH
66308: LD_VAR 0 2
66312: PPUSH
66313: LD_VAR 0 6
66317: PPUSH
66318: LD_VAR 0 11
66322: PPUSH
66323: CALL_OW 273
66327: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66328: LD_VAR 0 7
66332: PPUSH
66333: LD_VAR 0 8
66337: PPUSH
66338: CALL_OW 488
66342: NOT
66343: IFFALSE 66347
// continue ;
66345: GO 66275
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66347: LD_ADDR_VAR 0 9
66351: PUSH
66352: LD_VAR 0 12
66356: PUSH
66357: LD_INT 1
66359: ARRAY
66360: PPUSH
66361: LD_VAR 0 12
66365: PUSH
66366: LD_INT 2
66368: ARRAY
66369: PPUSH
66370: LD_VAR 0 7
66374: PPUSH
66375: LD_VAR 0 8
66379: PPUSH
66380: CALL_OW 298
66384: ST_TO_ADDR
// if tmp < distance then
66385: LD_VAR 0 9
66389: PUSH
66390: LD_VAR 0 10
66394: LESS
66395: IFFALSE 66417
// begin result := i ;
66397: LD_ADDR_VAR 0 5
66401: PUSH
66402: LD_VAR 0 6
66406: ST_TO_ADDR
// distance := tmp ;
66407: LD_ADDR_VAR 0 10
66411: PUSH
66412: LD_VAR 0 9
66416: ST_TO_ADDR
// end ; end ;
66417: GO 66275
66419: POP
66420: POP
// end ;
66421: LD_VAR 0 5
66425: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66426: LD_INT 0
66428: PPUSH
66429: PPUSH
// if not driver or not IsInUnit ( driver ) then
66430: LD_VAR 0 1
66434: NOT
66435: PUSH
66436: LD_VAR 0 1
66440: PPUSH
66441: CALL_OW 310
66445: NOT
66446: OR
66447: IFFALSE 66451
// exit ;
66449: GO 66541
// vehicle := IsInUnit ( driver ) ;
66451: LD_ADDR_VAR 0 3
66455: PUSH
66456: LD_VAR 0 1
66460: PPUSH
66461: CALL_OW 310
66465: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66466: LD_VAR 0 1
66470: PPUSH
66471: LD_STRING \
66473: PUSH
66474: LD_INT 0
66476: PUSH
66477: LD_INT 0
66479: PUSH
66480: LD_INT 0
66482: PUSH
66483: LD_INT 0
66485: PUSH
66486: LD_INT 0
66488: PUSH
66489: LD_INT 0
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: PUSH
66501: LD_STRING E
66503: PUSH
66504: LD_INT 0
66506: PUSH
66507: LD_INT 0
66509: PUSH
66510: LD_VAR 0 3
66514: PUSH
66515: LD_INT 0
66517: PUSH
66518: LD_INT 0
66520: PUSH
66521: LD_INT 0
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PPUSH
66537: CALL_OW 446
// end ;
66541: LD_VAR 0 2
66545: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66546: LD_INT 0
66548: PPUSH
66549: PPUSH
// if not driver or not IsInUnit ( driver ) then
66550: LD_VAR 0 1
66554: NOT
66555: PUSH
66556: LD_VAR 0 1
66560: PPUSH
66561: CALL_OW 310
66565: NOT
66566: OR
66567: IFFALSE 66571
// exit ;
66569: GO 66661
// vehicle := IsInUnit ( driver ) ;
66571: LD_ADDR_VAR 0 3
66575: PUSH
66576: LD_VAR 0 1
66580: PPUSH
66581: CALL_OW 310
66585: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66586: LD_VAR 0 1
66590: PPUSH
66591: LD_STRING \
66593: PUSH
66594: LD_INT 0
66596: PUSH
66597: LD_INT 0
66599: PUSH
66600: LD_INT 0
66602: PUSH
66603: LD_INT 0
66605: PUSH
66606: LD_INT 0
66608: PUSH
66609: LD_INT 0
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: PUSH
66621: LD_STRING E
66623: PUSH
66624: LD_INT 0
66626: PUSH
66627: LD_INT 0
66629: PUSH
66630: LD_VAR 0 3
66634: PUSH
66635: LD_INT 0
66637: PUSH
66638: LD_INT 0
66640: PUSH
66641: LD_INT 0
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PPUSH
66657: CALL_OW 447
// end ;
66661: LD_VAR 0 2
66665: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66666: LD_INT 0
66668: PPUSH
66669: PPUSH
66670: PPUSH
// tmp := [ ] ;
66671: LD_ADDR_VAR 0 5
66675: PUSH
66676: EMPTY
66677: ST_TO_ADDR
// for i in units do
66678: LD_ADDR_VAR 0 4
66682: PUSH
66683: LD_VAR 0 1
66687: PUSH
66688: FOR_IN
66689: IFFALSE 66727
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66691: LD_ADDR_VAR 0 5
66695: PUSH
66696: LD_VAR 0 5
66700: PPUSH
66701: LD_VAR 0 5
66705: PUSH
66706: LD_INT 1
66708: PLUS
66709: PPUSH
66710: LD_VAR 0 4
66714: PPUSH
66715: CALL_OW 256
66719: PPUSH
66720: CALL_OW 2
66724: ST_TO_ADDR
66725: GO 66688
66727: POP
66728: POP
// if not tmp then
66729: LD_VAR 0 5
66733: NOT
66734: IFFALSE 66738
// exit ;
66736: GO 66786
// if asc then
66738: LD_VAR 0 2
66742: IFFALSE 66766
// result := SortListByListAsc ( units , tmp ) else
66744: LD_ADDR_VAR 0 3
66748: PUSH
66749: LD_VAR 0 1
66753: PPUSH
66754: LD_VAR 0 5
66758: PPUSH
66759: CALL_OW 76
66763: ST_TO_ADDR
66764: GO 66786
// result := SortListByListDesc ( units , tmp ) ;
66766: LD_ADDR_VAR 0 3
66770: PUSH
66771: LD_VAR 0 1
66775: PPUSH
66776: LD_VAR 0 5
66780: PPUSH
66781: CALL_OW 77
66785: ST_TO_ADDR
// end ;
66786: LD_VAR 0 3
66790: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66791: LD_INT 0
66793: PPUSH
66794: PPUSH
// task := GetTaskList ( mech ) ;
66795: LD_ADDR_VAR 0 4
66799: PUSH
66800: LD_VAR 0 1
66804: PPUSH
66805: CALL_OW 437
66809: ST_TO_ADDR
// if not task then
66810: LD_VAR 0 4
66814: NOT
66815: IFFALSE 66819
// exit ;
66817: GO 66861
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66819: LD_ADDR_VAR 0 3
66823: PUSH
66824: LD_VAR 0 4
66828: PUSH
66829: LD_INT 1
66831: ARRAY
66832: PUSH
66833: LD_INT 1
66835: ARRAY
66836: PUSH
66837: LD_STRING r
66839: EQUAL
66840: PUSH
66841: LD_VAR 0 4
66845: PUSH
66846: LD_INT 1
66848: ARRAY
66849: PUSH
66850: LD_INT 4
66852: ARRAY
66853: PUSH
66854: LD_VAR 0 2
66858: EQUAL
66859: AND
66860: ST_TO_ADDR
// end ;
66861: LD_VAR 0 3
66865: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66866: LD_INT 0
66868: PPUSH
// SetDir ( unit , d ) ;
66869: LD_VAR 0 1
66873: PPUSH
66874: LD_VAR 0 4
66878: PPUSH
66879: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66883: LD_VAR 0 1
66887: PPUSH
66888: LD_VAR 0 2
66892: PPUSH
66893: LD_VAR 0 3
66897: PPUSH
66898: LD_VAR 0 5
66902: PPUSH
66903: CALL_OW 48
// end ;
66907: LD_VAR 0 6
66911: RET
// export function ToNaturalNumber ( number ) ; begin
66912: LD_INT 0
66914: PPUSH
// result := number div 1 ;
66915: LD_ADDR_VAR 0 2
66919: PUSH
66920: LD_VAR 0 1
66924: PUSH
66925: LD_INT 1
66927: DIV
66928: ST_TO_ADDR
// if number < 0 then
66929: LD_VAR 0 1
66933: PUSH
66934: LD_INT 0
66936: LESS
66937: IFFALSE 66947
// result := 0 ;
66939: LD_ADDR_VAR 0 2
66943: PUSH
66944: LD_INT 0
66946: ST_TO_ADDR
// end ;
66947: LD_VAR 0 2
66951: RET
// export function SortByClass ( units , class ) ; var un ; begin
66952: LD_INT 0
66954: PPUSH
66955: PPUSH
// if not units or not class then
66956: LD_VAR 0 1
66960: NOT
66961: PUSH
66962: LD_VAR 0 2
66966: NOT
66967: OR
66968: IFFALSE 66972
// exit ;
66970: GO 67067
// result := [ ] ;
66972: LD_ADDR_VAR 0 3
66976: PUSH
66977: EMPTY
66978: ST_TO_ADDR
// for un in units do
66979: LD_ADDR_VAR 0 4
66983: PUSH
66984: LD_VAR 0 1
66988: PUSH
66989: FOR_IN
66990: IFFALSE 67065
// if GetClass ( un ) = class then
66992: LD_VAR 0 4
66996: PPUSH
66997: CALL_OW 257
67001: PUSH
67002: LD_VAR 0 2
67006: EQUAL
67007: IFFALSE 67034
// result := Insert ( result , 1 , un ) else
67009: LD_ADDR_VAR 0 3
67013: PUSH
67014: LD_VAR 0 3
67018: PPUSH
67019: LD_INT 1
67021: PPUSH
67022: LD_VAR 0 4
67026: PPUSH
67027: CALL_OW 2
67031: ST_TO_ADDR
67032: GO 67063
// result := Replace ( result , result + 1 , un ) ;
67034: LD_ADDR_VAR 0 3
67038: PUSH
67039: LD_VAR 0 3
67043: PPUSH
67044: LD_VAR 0 3
67048: PUSH
67049: LD_INT 1
67051: PLUS
67052: PPUSH
67053: LD_VAR 0 4
67057: PPUSH
67058: CALL_OW 1
67062: ST_TO_ADDR
67063: GO 66989
67065: POP
67066: POP
// end ;
67067: LD_VAR 0 3
67071: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67072: LD_INT 0
67074: PPUSH
67075: PPUSH
67076: PPUSH
67077: PPUSH
67078: PPUSH
67079: PPUSH
67080: PPUSH
// result := [ ] ;
67081: LD_ADDR_VAR 0 4
67085: PUSH
67086: EMPTY
67087: ST_TO_ADDR
// if x - r < 0 then
67088: LD_VAR 0 1
67092: PUSH
67093: LD_VAR 0 3
67097: MINUS
67098: PUSH
67099: LD_INT 0
67101: LESS
67102: IFFALSE 67114
// min_x := 0 else
67104: LD_ADDR_VAR 0 8
67108: PUSH
67109: LD_INT 0
67111: ST_TO_ADDR
67112: GO 67130
// min_x := x - r ;
67114: LD_ADDR_VAR 0 8
67118: PUSH
67119: LD_VAR 0 1
67123: PUSH
67124: LD_VAR 0 3
67128: MINUS
67129: ST_TO_ADDR
// if y - r < 0 then
67130: LD_VAR 0 2
67134: PUSH
67135: LD_VAR 0 3
67139: MINUS
67140: PUSH
67141: LD_INT 0
67143: LESS
67144: IFFALSE 67156
// min_y := 0 else
67146: LD_ADDR_VAR 0 7
67150: PUSH
67151: LD_INT 0
67153: ST_TO_ADDR
67154: GO 67172
// min_y := y - r ;
67156: LD_ADDR_VAR 0 7
67160: PUSH
67161: LD_VAR 0 2
67165: PUSH
67166: LD_VAR 0 3
67170: MINUS
67171: ST_TO_ADDR
// max_x := x + r ;
67172: LD_ADDR_VAR 0 9
67176: PUSH
67177: LD_VAR 0 1
67181: PUSH
67182: LD_VAR 0 3
67186: PLUS
67187: ST_TO_ADDR
// max_y := y + r ;
67188: LD_ADDR_VAR 0 10
67192: PUSH
67193: LD_VAR 0 2
67197: PUSH
67198: LD_VAR 0 3
67202: PLUS
67203: ST_TO_ADDR
// for _x = min_x to max_x do
67204: LD_ADDR_VAR 0 5
67208: PUSH
67209: DOUBLE
67210: LD_VAR 0 8
67214: DEC
67215: ST_TO_ADDR
67216: LD_VAR 0 9
67220: PUSH
67221: FOR_TO
67222: IFFALSE 67323
// for _y = min_y to max_y do
67224: LD_ADDR_VAR 0 6
67228: PUSH
67229: DOUBLE
67230: LD_VAR 0 7
67234: DEC
67235: ST_TO_ADDR
67236: LD_VAR 0 10
67240: PUSH
67241: FOR_TO
67242: IFFALSE 67319
// begin if not ValidHex ( _x , _y ) then
67244: LD_VAR 0 5
67248: PPUSH
67249: LD_VAR 0 6
67253: PPUSH
67254: CALL_OW 488
67258: NOT
67259: IFFALSE 67263
// continue ;
67261: GO 67241
// if GetResourceTypeXY ( _x , _y ) then
67263: LD_VAR 0 5
67267: PPUSH
67268: LD_VAR 0 6
67272: PPUSH
67273: CALL_OW 283
67277: IFFALSE 67317
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67279: LD_ADDR_VAR 0 4
67283: PUSH
67284: LD_VAR 0 4
67288: PPUSH
67289: LD_VAR 0 4
67293: PUSH
67294: LD_INT 1
67296: PLUS
67297: PPUSH
67298: LD_VAR 0 5
67302: PUSH
67303: LD_VAR 0 6
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PPUSH
67312: CALL_OW 1
67316: ST_TO_ADDR
// end ;
67317: GO 67241
67319: POP
67320: POP
67321: GO 67221
67323: POP
67324: POP
// end ;
67325: LD_VAR 0 4
67329: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67330: LD_INT 0
67332: PPUSH
67333: PPUSH
67334: PPUSH
67335: PPUSH
67336: PPUSH
67337: PPUSH
67338: PPUSH
67339: PPUSH
// if not units then
67340: LD_VAR 0 1
67344: NOT
67345: IFFALSE 67349
// exit ;
67347: GO 67873
// result := UnitFilter ( units , [ f_ok ] ) ;
67349: LD_ADDR_VAR 0 3
67353: PUSH
67354: LD_VAR 0 1
67358: PPUSH
67359: LD_INT 50
67361: PUSH
67362: EMPTY
67363: LIST
67364: PPUSH
67365: CALL_OW 72
67369: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67370: LD_ADDR_VAR 0 8
67374: PUSH
67375: LD_VAR 0 1
67379: PUSH
67380: LD_INT 1
67382: ARRAY
67383: PPUSH
67384: CALL_OW 255
67388: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67389: LD_ADDR_VAR 0 10
67393: PUSH
67394: LD_INT 29
67396: PUSH
67397: LD_INT 91
67399: PUSH
67400: LD_INT 49
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: LIST
67407: ST_TO_ADDR
// if not result then
67408: LD_VAR 0 3
67412: NOT
67413: IFFALSE 67417
// exit ;
67415: GO 67873
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67417: LD_ADDR_VAR 0 5
67421: PUSH
67422: LD_INT 81
67424: PUSH
67425: LD_VAR 0 8
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PPUSH
67434: CALL_OW 69
67438: ST_TO_ADDR
// for i in result do
67439: LD_ADDR_VAR 0 4
67443: PUSH
67444: LD_VAR 0 3
67448: PUSH
67449: FOR_IN
67450: IFFALSE 67871
// begin tag := GetTag ( i ) + 1 ;
67452: LD_ADDR_VAR 0 9
67456: PUSH
67457: LD_VAR 0 4
67461: PPUSH
67462: CALL_OW 110
67466: PUSH
67467: LD_INT 1
67469: PLUS
67470: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67471: LD_ADDR_VAR 0 7
67475: PUSH
67476: LD_VAR 0 4
67480: PPUSH
67481: CALL_OW 250
67485: PPUSH
67486: LD_VAR 0 4
67490: PPUSH
67491: CALL_OW 251
67495: PPUSH
67496: LD_INT 6
67498: PPUSH
67499: CALL 67072 0 3
67503: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67504: LD_VAR 0 4
67508: PPUSH
67509: CALL_OW 247
67513: PUSH
67514: LD_INT 2
67516: EQUAL
67517: PUSH
67518: LD_VAR 0 7
67522: AND
67523: PUSH
67524: LD_VAR 0 4
67528: PPUSH
67529: CALL_OW 264
67533: PUSH
67534: LD_VAR 0 10
67538: IN
67539: NOT
67540: AND
67541: IFFALSE 67580
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67543: LD_VAR 0 4
67547: PPUSH
67548: LD_VAR 0 7
67552: PUSH
67553: LD_INT 1
67555: ARRAY
67556: PUSH
67557: LD_INT 1
67559: ARRAY
67560: PPUSH
67561: LD_VAR 0 7
67565: PUSH
67566: LD_INT 1
67568: ARRAY
67569: PUSH
67570: LD_INT 2
67572: ARRAY
67573: PPUSH
67574: CALL_OW 116
67578: GO 67869
// if path > tag then
67580: LD_VAR 0 2
67584: PUSH
67585: LD_VAR 0 9
67589: GREATER
67590: IFFALSE 67798
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67592: LD_ADDR_VAR 0 6
67596: PUSH
67597: LD_VAR 0 5
67601: PPUSH
67602: LD_INT 91
67604: PUSH
67605: LD_VAR 0 4
67609: PUSH
67610: LD_INT 8
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: LIST
67617: PPUSH
67618: CALL_OW 72
67622: ST_TO_ADDR
// if nearEnemy then
67623: LD_VAR 0 6
67627: IFFALSE 67696
// begin if GetWeapon ( i ) = ru_time_lapser then
67629: LD_VAR 0 4
67633: PPUSH
67634: CALL_OW 264
67638: PUSH
67639: LD_INT 49
67641: EQUAL
67642: IFFALSE 67670
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67644: LD_VAR 0 4
67648: PPUSH
67649: LD_VAR 0 6
67653: PPUSH
67654: LD_VAR 0 4
67658: PPUSH
67659: CALL_OW 74
67663: PPUSH
67664: CALL_OW 112
67668: GO 67694
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67670: LD_VAR 0 4
67674: PPUSH
67675: LD_VAR 0 6
67679: PPUSH
67680: LD_VAR 0 4
67684: PPUSH
67685: CALL_OW 74
67689: PPUSH
67690: CALL 68798 0 2
// end else
67694: GO 67796
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67696: LD_VAR 0 4
67700: PPUSH
67701: LD_VAR 0 2
67705: PUSH
67706: LD_VAR 0 9
67710: ARRAY
67711: PUSH
67712: LD_INT 1
67714: ARRAY
67715: PPUSH
67716: LD_VAR 0 2
67720: PUSH
67721: LD_VAR 0 9
67725: ARRAY
67726: PUSH
67727: LD_INT 2
67729: ARRAY
67730: PPUSH
67731: CALL_OW 297
67735: PUSH
67736: LD_INT 6
67738: GREATER
67739: IFFALSE 67782
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67741: LD_VAR 0 4
67745: PPUSH
67746: LD_VAR 0 2
67750: PUSH
67751: LD_VAR 0 9
67755: ARRAY
67756: PUSH
67757: LD_INT 1
67759: ARRAY
67760: PPUSH
67761: LD_VAR 0 2
67765: PUSH
67766: LD_VAR 0 9
67770: ARRAY
67771: PUSH
67772: LD_INT 2
67774: ARRAY
67775: PPUSH
67776: CALL_OW 114
67780: GO 67796
// SetTag ( i , tag ) ;
67782: LD_VAR 0 4
67786: PPUSH
67787: LD_VAR 0 9
67791: PPUSH
67792: CALL_OW 109
// end else
67796: GO 67869
// if enemy then
67798: LD_VAR 0 5
67802: IFFALSE 67869
// begin if GetWeapon ( i ) = ru_time_lapser then
67804: LD_VAR 0 4
67808: PPUSH
67809: CALL_OW 264
67813: PUSH
67814: LD_INT 49
67816: EQUAL
67817: IFFALSE 67845
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67819: LD_VAR 0 4
67823: PPUSH
67824: LD_VAR 0 5
67828: PPUSH
67829: LD_VAR 0 4
67833: PPUSH
67834: CALL_OW 74
67838: PPUSH
67839: CALL_OW 112
67843: GO 67869
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67845: LD_VAR 0 4
67849: PPUSH
67850: LD_VAR 0 5
67854: PPUSH
67855: LD_VAR 0 4
67859: PPUSH
67860: CALL_OW 74
67864: PPUSH
67865: CALL 68798 0 2
// end ; end ;
67869: GO 67449
67871: POP
67872: POP
// end ;
67873: LD_VAR 0 3
67877: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67878: LD_INT 0
67880: PPUSH
67881: PPUSH
67882: PPUSH
// if not unit or IsInUnit ( unit ) then
67883: LD_VAR 0 1
67887: NOT
67888: PUSH
67889: LD_VAR 0 1
67893: PPUSH
67894: CALL_OW 310
67898: OR
67899: IFFALSE 67903
// exit ;
67901: GO 67994
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67903: LD_ADDR_VAR 0 4
67907: PUSH
67908: LD_VAR 0 1
67912: PPUSH
67913: CALL_OW 250
67917: PPUSH
67918: LD_VAR 0 2
67922: PPUSH
67923: LD_INT 1
67925: PPUSH
67926: CALL_OW 272
67930: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67931: LD_ADDR_VAR 0 5
67935: PUSH
67936: LD_VAR 0 1
67940: PPUSH
67941: CALL_OW 251
67945: PPUSH
67946: LD_VAR 0 2
67950: PPUSH
67951: LD_INT 1
67953: PPUSH
67954: CALL_OW 273
67958: ST_TO_ADDR
// if ValidHex ( x , y ) then
67959: LD_VAR 0 4
67963: PPUSH
67964: LD_VAR 0 5
67968: PPUSH
67969: CALL_OW 488
67973: IFFALSE 67994
// ComTurnXY ( unit , x , y ) ;
67975: LD_VAR 0 1
67979: PPUSH
67980: LD_VAR 0 4
67984: PPUSH
67985: LD_VAR 0 5
67989: PPUSH
67990: CALL_OW 118
// end ;
67994: LD_VAR 0 3
67998: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67999: LD_INT 0
68001: PPUSH
68002: PPUSH
// result := false ;
68003: LD_ADDR_VAR 0 3
68007: PUSH
68008: LD_INT 0
68010: ST_TO_ADDR
// if not units then
68011: LD_VAR 0 2
68015: NOT
68016: IFFALSE 68020
// exit ;
68018: GO 68065
// for i in units do
68020: LD_ADDR_VAR 0 4
68024: PUSH
68025: LD_VAR 0 2
68029: PUSH
68030: FOR_IN
68031: IFFALSE 68063
// if See ( side , i ) then
68033: LD_VAR 0 1
68037: PPUSH
68038: LD_VAR 0 4
68042: PPUSH
68043: CALL_OW 292
68047: IFFALSE 68061
// begin result := true ;
68049: LD_ADDR_VAR 0 3
68053: PUSH
68054: LD_INT 1
68056: ST_TO_ADDR
// exit ;
68057: POP
68058: POP
68059: GO 68065
// end ;
68061: GO 68030
68063: POP
68064: POP
// end ;
68065: LD_VAR 0 3
68069: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68070: LD_INT 0
68072: PPUSH
68073: PPUSH
68074: PPUSH
68075: PPUSH
// if not unit or not points then
68076: LD_VAR 0 1
68080: NOT
68081: PUSH
68082: LD_VAR 0 2
68086: NOT
68087: OR
68088: IFFALSE 68092
// exit ;
68090: GO 68182
// dist := 99999 ;
68092: LD_ADDR_VAR 0 5
68096: PUSH
68097: LD_INT 99999
68099: ST_TO_ADDR
// for i in points do
68100: LD_ADDR_VAR 0 4
68104: PUSH
68105: LD_VAR 0 2
68109: PUSH
68110: FOR_IN
68111: IFFALSE 68180
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68113: LD_ADDR_VAR 0 6
68117: PUSH
68118: LD_VAR 0 1
68122: PPUSH
68123: LD_VAR 0 4
68127: PUSH
68128: LD_INT 1
68130: ARRAY
68131: PPUSH
68132: LD_VAR 0 4
68136: PUSH
68137: LD_INT 2
68139: ARRAY
68140: PPUSH
68141: CALL_OW 297
68145: ST_TO_ADDR
// if tmpDist < dist then
68146: LD_VAR 0 6
68150: PUSH
68151: LD_VAR 0 5
68155: LESS
68156: IFFALSE 68178
// begin result := i ;
68158: LD_ADDR_VAR 0 3
68162: PUSH
68163: LD_VAR 0 4
68167: ST_TO_ADDR
// dist := tmpDist ;
68168: LD_ADDR_VAR 0 5
68172: PUSH
68173: LD_VAR 0 6
68177: ST_TO_ADDR
// end ; end ;
68178: GO 68110
68180: POP
68181: POP
// end ;
68182: LD_VAR 0 3
68186: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68187: LD_INT 0
68189: PPUSH
// uc_side := side ;
68190: LD_ADDR_OWVAR 20
68194: PUSH
68195: LD_VAR 0 1
68199: ST_TO_ADDR
// uc_nation := 3 ;
68200: LD_ADDR_OWVAR 21
68204: PUSH
68205: LD_INT 3
68207: ST_TO_ADDR
// vc_chassis := 25 ;
68208: LD_ADDR_OWVAR 37
68212: PUSH
68213: LD_INT 25
68215: ST_TO_ADDR
// vc_engine := engine_siberite ;
68216: LD_ADDR_OWVAR 39
68220: PUSH
68221: LD_INT 3
68223: ST_TO_ADDR
// vc_control := control_computer ;
68224: LD_ADDR_OWVAR 38
68228: PUSH
68229: LD_INT 3
68231: ST_TO_ADDR
// vc_weapon := 59 ;
68232: LD_ADDR_OWVAR 40
68236: PUSH
68237: LD_INT 59
68239: ST_TO_ADDR
// result := CreateVehicle ;
68240: LD_ADDR_VAR 0 5
68244: PUSH
68245: CALL_OW 45
68249: ST_TO_ADDR
// SetDir ( result , d ) ;
68250: LD_VAR 0 5
68254: PPUSH
68255: LD_VAR 0 4
68259: PPUSH
68260: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68264: LD_VAR 0 5
68268: PPUSH
68269: LD_VAR 0 2
68273: PPUSH
68274: LD_VAR 0 3
68278: PPUSH
68279: LD_INT 0
68281: PPUSH
68282: CALL_OW 48
// end ;
68286: LD_VAR 0 5
68290: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68291: LD_INT 0
68293: PPUSH
68294: PPUSH
68295: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68296: LD_ADDR_VAR 0 2
68300: PUSH
68301: LD_INT 0
68303: PUSH
68304: LD_INT 0
68306: PUSH
68307: LD_INT 0
68309: PUSH
68310: LD_INT 0
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68319: LD_VAR 0 1
68323: NOT
68324: PUSH
68325: LD_VAR 0 1
68329: PPUSH
68330: CALL_OW 264
68334: PUSH
68335: LD_INT 12
68337: PUSH
68338: LD_INT 51
68340: PUSH
68341: LD_INT 32
68343: PUSH
68344: LD_INT 89
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: IN
68353: NOT
68354: OR
68355: IFFALSE 68359
// exit ;
68357: GO 68457
// for i := 1 to 3 do
68359: LD_ADDR_VAR 0 3
68363: PUSH
68364: DOUBLE
68365: LD_INT 1
68367: DEC
68368: ST_TO_ADDR
68369: LD_INT 3
68371: PUSH
68372: FOR_TO
68373: IFFALSE 68455
// begin tmp := GetCargo ( cargo , i ) ;
68375: LD_ADDR_VAR 0 4
68379: PUSH
68380: LD_VAR 0 1
68384: PPUSH
68385: LD_VAR 0 3
68389: PPUSH
68390: CALL_OW 289
68394: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68395: LD_ADDR_VAR 0 2
68399: PUSH
68400: LD_VAR 0 2
68404: PPUSH
68405: LD_VAR 0 3
68409: PPUSH
68410: LD_VAR 0 4
68414: PPUSH
68415: CALL_OW 1
68419: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68420: LD_ADDR_VAR 0 2
68424: PUSH
68425: LD_VAR 0 2
68429: PPUSH
68430: LD_INT 4
68432: PPUSH
68433: LD_VAR 0 2
68437: PUSH
68438: LD_INT 4
68440: ARRAY
68441: PUSH
68442: LD_VAR 0 4
68446: PLUS
68447: PPUSH
68448: CALL_OW 1
68452: ST_TO_ADDR
// end ;
68453: GO 68372
68455: POP
68456: POP
// end ;
68457: LD_VAR 0 2
68461: RET
// export function Length ( array ) ; begin
68462: LD_INT 0
68464: PPUSH
// result := array + 0 ;
68465: LD_ADDR_VAR 0 2
68469: PUSH
68470: LD_VAR 0 1
68474: PUSH
68475: LD_INT 0
68477: PLUS
68478: ST_TO_ADDR
// end ;
68479: LD_VAR 0 2
68483: RET
// export function PrepareArray ( array ) ; begin
68484: LD_INT 0
68486: PPUSH
// result := array diff 0 ;
68487: LD_ADDR_VAR 0 2
68491: PUSH
68492: LD_VAR 0 1
68496: PUSH
68497: LD_INT 0
68499: DIFF
68500: ST_TO_ADDR
// if not result [ 1 ] then
68501: LD_VAR 0 2
68505: PUSH
68506: LD_INT 1
68508: ARRAY
68509: NOT
68510: IFFALSE 68530
// result := Delete ( result , 1 ) ;
68512: LD_ADDR_VAR 0 2
68516: PUSH
68517: LD_VAR 0 2
68521: PPUSH
68522: LD_INT 1
68524: PPUSH
68525: CALL_OW 3
68529: ST_TO_ADDR
// end ;
68530: LD_VAR 0 2
68534: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68535: LD_INT 0
68537: PPUSH
68538: PPUSH
68539: PPUSH
68540: PPUSH
// sibRocketRange := 25 ;
68541: LD_ADDR_VAR 0 6
68545: PUSH
68546: LD_INT 25
68548: ST_TO_ADDR
// result := false ;
68549: LD_ADDR_VAR 0 4
68553: PUSH
68554: LD_INT 0
68556: ST_TO_ADDR
// for i := 0 to 5 do
68557: LD_ADDR_VAR 0 5
68561: PUSH
68562: DOUBLE
68563: LD_INT 0
68565: DEC
68566: ST_TO_ADDR
68567: LD_INT 5
68569: PUSH
68570: FOR_TO
68571: IFFALSE 68638
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68573: LD_VAR 0 1
68577: PPUSH
68578: LD_VAR 0 5
68582: PPUSH
68583: LD_VAR 0 6
68587: PPUSH
68588: CALL_OW 272
68592: PPUSH
68593: LD_VAR 0 2
68597: PPUSH
68598: LD_VAR 0 5
68602: PPUSH
68603: LD_VAR 0 6
68607: PPUSH
68608: CALL_OW 273
68612: PPUSH
68613: LD_VAR 0 3
68617: PPUSH
68618: CALL_OW 309
68622: IFFALSE 68636
// begin result := true ;
68624: LD_ADDR_VAR 0 4
68628: PUSH
68629: LD_INT 1
68631: ST_TO_ADDR
// exit ;
68632: POP
68633: POP
68634: GO 68640
// end ;
68636: GO 68570
68638: POP
68639: POP
// end ;
68640: LD_VAR 0 4
68644: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68645: LD_INT 0
68647: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68648: LD_VAR 0 1
68652: PPUSH
68653: LD_VAR 0 2
68657: PPUSH
68658: LD_INT 0
68660: PPUSH
68661: LD_INT 0
68663: PPUSH
68664: LD_INT 1
68666: PPUSH
68667: LD_INT 0
68669: PPUSH
68670: CALL_OW 587
// end ;
68674: LD_VAR 0 3
68678: RET
// export function CenterOnNow ( unit ) ; begin
68679: LD_INT 0
68681: PPUSH
// result := IsInUnit ( unit ) ;
68682: LD_ADDR_VAR 0 2
68686: PUSH
68687: LD_VAR 0 1
68691: PPUSH
68692: CALL_OW 310
68696: ST_TO_ADDR
// if not result then
68697: LD_VAR 0 2
68701: NOT
68702: IFFALSE 68714
// result := unit ;
68704: LD_ADDR_VAR 0 2
68708: PUSH
68709: LD_VAR 0 1
68713: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68714: LD_VAR 0 1
68718: PPUSH
68719: CALL_OW 87
// end ;
68723: LD_VAR 0 2
68727: RET
// export function ComMoveHex ( unit , hex ) ; begin
68728: LD_INT 0
68730: PPUSH
// if not hex then
68731: LD_VAR 0 2
68735: NOT
68736: IFFALSE 68740
// exit ;
68738: GO 68793
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68740: LD_VAR 0 2
68744: PUSH
68745: LD_INT 1
68747: ARRAY
68748: PPUSH
68749: LD_VAR 0 2
68753: PUSH
68754: LD_INT 2
68756: ARRAY
68757: PPUSH
68758: CALL_OW 428
68762: IFFALSE 68766
// exit ;
68764: GO 68793
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
68766: LD_VAR 0 1
68770: PPUSH
68771: LD_VAR 0 2
68775: PUSH
68776: LD_INT 1
68778: ARRAY
68779: PPUSH
68780: LD_VAR 0 2
68784: PUSH
68785: LD_INT 2
68787: ARRAY
68788: PPUSH
68789: CALL_OW 111
// end ;
68793: LD_VAR 0 3
68797: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
68798: LD_INT 0
68800: PPUSH
68801: PPUSH
68802: PPUSH
// if not unit or not enemy then
68803: LD_VAR 0 1
68807: NOT
68808: PUSH
68809: LD_VAR 0 2
68813: NOT
68814: OR
68815: IFFALSE 68819
// exit ;
68817: GO 68943
// x := GetX ( enemy ) ;
68819: LD_ADDR_VAR 0 4
68823: PUSH
68824: LD_VAR 0 2
68828: PPUSH
68829: CALL_OW 250
68833: ST_TO_ADDR
// y := GetY ( enemy ) ;
68834: LD_ADDR_VAR 0 5
68838: PUSH
68839: LD_VAR 0 2
68843: PPUSH
68844: CALL_OW 251
68848: ST_TO_ADDR
// if ValidHex ( x , y ) then
68849: LD_VAR 0 4
68853: PPUSH
68854: LD_VAR 0 5
68858: PPUSH
68859: CALL_OW 488
68863: IFFALSE 68943
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
68865: LD_VAR 0 2
68869: PPUSH
68870: CALL_OW 247
68874: PUSH
68875: LD_INT 3
68877: PUSH
68878: LD_INT 2
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: IN
68885: PUSH
68886: LD_VAR 0 1
68890: PPUSH
68891: CALL_OW 255
68895: PPUSH
68896: LD_VAR 0 2
68900: PPUSH
68901: CALL_OW 292
68905: AND
68906: IFFALSE 68924
// ComAttackUnit ( unit , enemy ) else
68908: LD_VAR 0 1
68912: PPUSH
68913: LD_VAR 0 2
68917: PPUSH
68918: CALL_OW 115
68922: GO 68943
// ComAgressiveMove ( unit , x , y ) ;
68924: LD_VAR 0 1
68928: PPUSH
68929: LD_VAR 0 4
68933: PPUSH
68934: LD_VAR 0 5
68938: PPUSH
68939: CALL_OW 114
// end ; end_of_file
68943: LD_VAR 0 3
68947: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68948: LD_VAR 0 1
68952: PUSH
68953: LD_INT 200
68955: DOUBLE
68956: GREATEREQUAL
68957: IFFALSE 68965
68959: LD_INT 299
68961: DOUBLE
68962: LESSEQUAL
68963: IFTRUE 68967
68965: GO 68999
68967: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68968: LD_VAR 0 1
68972: PPUSH
68973: LD_VAR 0 2
68977: PPUSH
68978: LD_VAR 0 3
68982: PPUSH
68983: LD_VAR 0 4
68987: PPUSH
68988: LD_VAR 0 5
68992: PPUSH
68993: CALL 23492 0 5
68997: GO 69076
68999: LD_INT 300
69001: DOUBLE
69002: GREATEREQUAL
69003: IFFALSE 69011
69005: LD_INT 399
69007: DOUBLE
69008: LESSEQUAL
69009: IFTRUE 69013
69011: GO 69075
69013: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69014: LD_VAR 0 1
69018: PPUSH
69019: LD_VAR 0 2
69023: PPUSH
69024: LD_VAR 0 3
69028: PPUSH
69029: LD_VAR 0 4
69033: PPUSH
69034: LD_VAR 0 5
69038: PPUSH
69039: LD_VAR 0 6
69043: PPUSH
69044: LD_VAR 0 7
69048: PPUSH
69049: LD_VAR 0 8
69053: PPUSH
69054: LD_VAR 0 9
69058: PPUSH
69059: LD_VAR 0 10
69063: PPUSH
69064: LD_VAR 0 11
69068: PPUSH
69069: CALL 19817 0 11
69073: GO 69076
69075: POP
// end ;
69076: PPOPN 11
69078: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69079: LD_VAR 0 1
69083: PPUSH
69084: LD_VAR 0 2
69088: PPUSH
69089: LD_VAR 0 3
69093: PPUSH
69094: LD_VAR 0 4
69098: PPUSH
69099: LD_VAR 0 5
69103: PPUSH
69104: CALL 23228 0 5
// end ; end_of_file
69108: PPOPN 5
69110: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69111: LD_VAR 0 1
69115: PPUSH
69116: LD_VAR 0 2
69120: PPUSH
69121: LD_VAR 0 3
69125: PPUSH
69126: LD_VAR 0 4
69130: PPUSH
69131: LD_VAR 0 5
69135: PPUSH
69136: LD_VAR 0 6
69140: PPUSH
69141: CALL 7469 0 6
// end ;
69145: PPOPN 6
69147: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69148: LD_INT 0
69150: PPUSH
// begin if not units then
69151: LD_VAR 0 1
69155: NOT
69156: IFFALSE 69160
// exit ;
69158: GO 69160
// end ;
69160: PPOPN 7
69162: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69163: CALL 7373 0 0
// end ;
69167: PPOPN 1
69169: END
