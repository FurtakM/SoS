// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 57441 0 9
// PrepareAmerican ;
  46: CALL 4072 0 0
// PrepareAlliance ;
  50: CALL 226 0 0
// Action ;
  54: CALL 908 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: EMPTY
 158: LIST
 159: LIST
 160: LIST
 161: PUSH
 162: LD_OWVAR 67
 166: ARRAY
 167: ST_TO_ADDR
// canEnd := false ;
 168: LD_ADDR_EXP 10
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// missionTime := 0 0$00 ;
 176: LD_ADDR_EXP 11
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// killCounter := 0 ;
 184: LD_ADDR_EXP 12
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// bunkerCounter := 0 ;
 192: LD_ADDR_EXP 13
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// end ;
 200: LD_VAR 0 1
 204: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 205: LD_EXP 13
 209: PUSH
 210: LD_INT 3
 212: GREATEREQUAL
 213: IFFALSE 225
 215: GO 217
 217: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 218: LD_STRING ACH_ONEMANARMY
 220: PPUSH
 221: CALL_OW 543
 225: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 226: LD_INT 0
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// uc_side := 7 ;
 235: LD_ADDR_OWVAR 20
 239: PUSH
 240: LD_INT 7
 242: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 243: LD_ADDR_EXP 14
 247: PUSH
 248: LD_STRING JMM
 250: PPUSH
 251: LD_EXP 1
 255: NOT
 256: PPUSH
 257: LD_STRING 14a_
 259: PPUSH
 260: CALL 24523 0 3
 264: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 265: LD_ADDR_EXP 15
 269: PUSH
 270: LD_STRING Burlak
 272: PPUSH
 273: LD_EXP 1
 277: NOT
 278: PPUSH
 279: LD_STRING 14a_
 281: PPUSH
 282: CALL 24523 0 3
 286: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 287: LD_ADDR_EXP 16
 291: PUSH
 292: LD_STRING Joan
 294: PPUSH
 295: LD_EXP 1
 299: NOT
 300: PPUSH
 301: LD_STRING 13a_
 303: PPUSH
 304: CALL 24523 0 3
 308: ST_TO_ADDR
// if not Joan then
 309: LD_EXP 16
 313: NOT
 314: IFFALSE 447
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 316: LD_ADDR_VAR 0 2
 320: PUSH
 321: LD_STRING 13a_others
 323: PPUSH
 324: CALL_OW 31
 328: ST_TO_ADDR
// if tmp then
 329: LD_VAR 0 2
 333: IFFALSE 409
// begin for i in tmp do
 335: LD_ADDR_VAR 0 3
 339: PUSH
 340: LD_VAR 0 2
 344: PUSH
 345: FOR_IN
 346: IFFALSE 407
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 348: LD_VAR 0 3
 352: PPUSH
 353: CALL_OW 257
 357: PUSH
 358: LD_INT 4
 360: EQUAL
 361: PUSH
 362: LD_VAR 0 3
 366: PPUSH
 367: CALL_OW 258
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: PUSH
 377: LD_VAR 0 3
 381: PPUSH
 382: CALL_OW 248
 386: PUSH
 387: LD_INT 3
 389: EQUAL
 390: AND
 391: IFFALSE 405
// begin RuSci := i ;
 393: LD_ADDR_EXP 17
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// break ;
 403: GO 407
// end ;
 405: GO 345
 407: POP
 408: POP
// end ; if not RuSci then
 409: LD_EXP 17
 413: NOT
 414: IFFALSE 447
// begin uc_nation := 3 ;
 416: LD_ADDR_OWVAR 21
 420: PUSH
 421: LD_INT 3
 423: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 424: LD_INT 1
 426: PPUSH
 427: LD_INT 4
 429: PPUSH
 430: LD_INT 10
 432: PPUSH
 433: CALL_OW 380
// RuSci := CreateHuman ;
 437: LD_ADDR_EXP 17
 441: PUSH
 442: CALL_OW 44
 446: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 447: LD_ADDR_VAR 0 6
 451: PUSH
 452: LD_STRING 14a_JMMVeh
 454: PPUSH
 455: LD_INT 5
 457: PUSH
 458: LD_INT 3
 460: PUSH
 461: LD_INT 1
 463: PUSH
 464: LD_INT 7
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: LIST
 478: LIST
 479: LIST
 480: PPUSH
 481: CALL_OW 30
 485: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 486: LD_ADDR_VAR 0 7
 490: PUSH
 491: LD_STRING 14a_BurlakVeh
 493: PPUSH
 494: LD_INT 22
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: LD_INT 1
 502: PUSH
 503: LD_INT 51
 505: PUSH
 506: LD_INT 0
 508: PUSH
 509: LD_INT 3
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: PPUSH
 520: CALL_OW 30
 524: ST_TO_ADDR
// uc_direction := 4 ;
 525: LD_ADDR_OWVAR 24
 529: PUSH
 530: LD_INT 4
 532: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 6
 542: PUSH
 543: LD_INT 6
 545: ARRAY
 546: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 547: LD_VAR 0 6
 551: PUSH
 552: LD_INT 1
 554: ARRAY
 555: PPUSH
 556: LD_VAR 0 6
 560: PUSH
 561: LD_INT 2
 563: ARRAY
 564: PPUSH
 565: LD_VAR 0 6
 569: PUSH
 570: LD_INT 3
 572: ARRAY
 573: PPUSH
 574: LD_VAR 0 6
 578: PUSH
 579: LD_INT 4
 581: ARRAY
 582: PPUSH
 583: LD_INT 60
 585: PPUSH
 586: LD_INT 80
 588: PPUSH
 589: CALL_OW 12
 593: PPUSH
 594: CALL 29347 0 5
// JMMVeh := CreateVehicle ;
 598: LD_ADDR_VAR 0 4
 602: PUSH
 603: CALL_OW 45
 607: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 608: LD_VAR 0 4
 612: PPUSH
 613: LD_INT 1
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL 59729 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 623: LD_VAR 0 6
 627: PUSH
 628: LD_INT 5
 630: ARRAY
 631: PUSH
 632: LD_INT 0
 634: NONEQUAL
 635: IFFALSE 655
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 637: LD_VAR 0 4
 641: PPUSH
 642: LD_VAR 0 6
 646: PUSH
 647: LD_INT 5
 649: ARRAY
 650: PPUSH
 651: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 655: LD_EXP 14
 659: PPUSH
 660: LD_VAR 0 4
 664: PPUSH
 665: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 669: LD_ADDR_OWVAR 21
 673: PUSH
 674: LD_VAR 0 7
 678: PUSH
 679: LD_INT 6
 681: ARRAY
 682: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 683: LD_VAR 0 7
 687: PUSH
 688: LD_INT 1
 690: ARRAY
 691: PPUSH
 692: LD_VAR 0 7
 696: PUSH
 697: LD_INT 2
 699: ARRAY
 700: PPUSH
 701: LD_VAR 0 7
 705: PUSH
 706: LD_INT 3
 708: ARRAY
 709: PPUSH
 710: LD_VAR 0 7
 714: PUSH
 715: LD_INT 4
 717: ARRAY
 718: PPUSH
 719: LD_INT 60
 721: PPUSH
 722: LD_INT 80
 724: PPUSH
 725: CALL_OW 12
 729: PPUSH
 730: CALL 29347 0 5
// BurlakVeh := CreateVehicle ;
 734: LD_ADDR_VAR 0 5
 738: PUSH
 739: CALL_OW 45
 743: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 744: LD_VAR 0 5
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL 59729 0 3
 759: NOT
 760: IFFALSE 780
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 762: LD_VAR 0 5
 766: PPUSH
 767: LD_INT 233
 769: PPUSH
 770: LD_INT 85
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 780: LD_VAR 0 7
 784: PUSH
 785: LD_INT 5
 787: ARRAY
 788: PUSH
 789: LD_INT 0
 791: NONEQUAL
 792: IFFALSE 812
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 794: LD_VAR 0 5
 798: PPUSH
 799: LD_VAR 0 7
 803: PUSH
 804: LD_INT 5
 806: ARRAY
 807: PPUSH
 808: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 812: LD_EXP 15
 816: PPUSH
 817: LD_VAR 0 5
 821: PPUSH
 822: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] ] [ Difficulty ] ;
 826: LD_ADDR_VAR 0 2
 830: PUSH
 831: LD_INT 178
 833: PUSH
 834: LD_INT 91
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 137
 843: PUSH
 844: LD_INT 83
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 157
 853: PUSH
 854: LD_INT 75
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 872: LD_INT 4
 874: PPUSH
 875: LD_INT 4
 877: PPUSH
 878: LD_VAR 0 2
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: PPUSH
 887: LD_VAR 0 2
 891: PUSH
 892: LD_INT 2
 894: ARRAY
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 58
// end ; end_of_file
 903: LD_VAR 0 1
 907: RET
// export function Action ; begin
 908: LD_INT 0
 910: PPUSH
// InGameOn ;
 911: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 915: LD_INT 221
 917: PPUSH
 918: LD_INT 80
 920: PPUSH
 921: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 925: LD_EXP 14
 929: PUSH
 930: LD_EXP 15
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PPUSH
 939: LD_INT 217
 941: PPUSH
 942: LD_INT 79
 944: PPUSH
 945: CALL_OW 111
// wait ( 0 0$7 ) ;
 949: LD_INT 245
 951: PPUSH
 952: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 956: LD_EXP 14
 960: PUSH
 961: LD_EXP 15
 965: PUSH
 966: EMPTY
 967: LIST
 968: LIST
 969: PPUSH
 970: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 974: LD_EXP 15
 978: PPUSH
 979: LD_STRING D2-Bur-1
 981: PPUSH
 982: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
 986: LD_EXP 14
 990: PPUSH
 991: LD_STRING D2-JMM-1
 993: PPUSH
 994: CALL_OW 88
// wait ( 0 0$0.5 ) ;
 998: LD_INT 18
1000: PPUSH
1001: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1005: LD_EXP 15
1009: PPUSH
1010: LD_EXP 14
1014: PPUSH
1015: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1019: LD_EXP 15
1023: PPUSH
1024: LD_STRING D2-Bur-2
1026: PPUSH
1027: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1031: LD_EXP 15
1035: PPUSH
1036: LD_INT 21
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: PPUSH
1051: LD_EXP 15
1055: PPUSH
1056: CALL_OW 74
1060: PPUSH
1061: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1065: LD_EXP 14
1069: PPUSH
1070: LD_INT 21
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PPUSH
1080: CALL_OW 69
1084: PPUSH
1085: LD_EXP 14
1089: PPUSH
1090: CALL_OW 74
1094: PPUSH
1095: CALL_OW 120
// wait ( 0 0$1 ) ;
1099: LD_INT 35
1101: PPUSH
1102: CALL_OW 67
// InGameOff ;
1106: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1110: LD_STRING MArtPickup
1112: PPUSH
1113: CALL_OW 337
// end ;
1117: LD_VAR 0 1
1121: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1122: LD_EXP 22
1126: PPUSH
1127: LD_INT 101
1129: PUSH
1130: LD_INT 7
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 72
1141: PUSH
1142: LD_EXP 8
1146: NOT
1147: AND
1148: IFFALSE 1177
1150: GO 1152
1152: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1153: LD_EXP 15
1157: PPUSH
1158: LD_STRING D3-Bur-1
1160: PPUSH
1161: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1165: LD_EXP 14
1169: PPUSH
1170: LD_STRING D3-JMM-1
1172: PPUSH
1173: CALL_OW 88
// end ;
1177: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1178: LD_INT 5
1180: PPUSH
1181: LD_INT 22
1183: PUSH
1184: LD_INT 7
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PPUSH
1191: CALL_OW 70
1195: IFFALSE 1526
1197: GO 1199
1199: DISABLE
// begin wait ( 0 0$3 ) ;
1200: LD_INT 105
1202: PPUSH
1203: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1207: LD_INT 139
1209: PPUSH
1210: LD_INT 43
1212: PPUSH
1213: LD_INT 7
1215: PPUSH
1216: LD_INT 20
1218: NEG
1219: PPUSH
1220: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1224: LD_INT 139
1226: PPUSH
1227: LD_INT 43
1229: PPUSH
1230: LD_INT 7
1232: PPUSH
1233: CALL_OW 331
// DialogueOn ;
1237: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1241: LD_EXP 14
1245: PPUSH
1246: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1250: LD_EXP 14
1254: PPUSH
1255: LD_STRING D3a-JMM-1
1257: PPUSH
1258: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1262: LD_EXP 15
1266: PPUSH
1267: LD_STRING D3a-Bur-1
1269: PPUSH
1270: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1274: LD_EXP 14
1278: PPUSH
1279: LD_STRING D3a-JMM-2
1281: PPUSH
1282: CALL_OW 88
// if Joan then
1286: LD_EXP 16
1290: IFFALSE 1306
// SayRadio ( Joan , D3a-Joan-2 ) else
1292: LD_EXP 16
1296: PPUSH
1297: LD_STRING D3a-Joan-2
1299: PPUSH
1300: CALL_OW 94
1304: GO 1318
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1306: LD_EXP 17
1310: PPUSH
1311: LD_STRING D3a-RSci1-2
1313: PPUSH
1314: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1318: LD_EXP 18
1322: PPUSH
1323: LD_STRING D3a-Huck-2
1325: PPUSH
1326: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1330: LD_EXP 19
1334: PPUSH
1335: LD_STRING D3a-Pow-2
1337: PPUSH
1338: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1342: LD_EXP 18
1346: PPUSH
1347: LD_STRING D3a-Huck-3
1349: PPUSH
1350: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1354: LD_EXP 19
1358: PPUSH
1359: LD_STRING D3a-Pow-3
1361: PPUSH
1362: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1366: LD_EXP 18
1370: PPUSH
1371: LD_STRING D3a-Huck-4
1373: PPUSH
1374: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1378: LD_EXP 14
1382: PPUSH
1383: LD_STRING D3a-JMM-4
1385: PPUSH
1386: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1390: LD_EXP 15
1394: PPUSH
1395: LD_STRING D3a-Bur-4
1397: PPUSH
1398: CALL_OW 88
// if Joan then
1402: LD_EXP 16
1406: IFFALSE 1422
// SayRadio ( Joan , D3a-Joan-4 ) else
1408: LD_EXP 16
1412: PPUSH
1413: LD_STRING D3a-Joan-4
1415: PPUSH
1416: CALL_OW 94
1420: GO 1434
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1422: LD_EXP 17
1426: PPUSH
1427: LD_STRING D3a-RSci1-4
1429: PPUSH
1430: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1434: LD_INT 133
1436: PPUSH
1437: LD_INT 43
1439: PPUSH
1440: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1444: LD_INT 10
1446: PPUSH
1447: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1451: LD_EXP 14
1455: PPUSH
1456: LD_STRING D3a-JMM-5
1458: PPUSH
1459: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1463: LD_EXP 15
1467: PPUSH
1468: LD_STRING D3a-Bur-5
1470: PPUSH
1471: CALL_OW 88
// DialogueOff ;
1475: CALL_OW 7
// seenBase := true ;
1479: LD_ADDR_EXP 8
1483: PUSH
1484: LD_INT 1
1486: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
1487: LD_INT 525
1489: PUSH
1490: LD_INT 420
1492: PUSH
1493: LD_INT 315
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: LIST
1500: PUSH
1501: LD_OWVAR 67
1505: ARRAY
1506: PPUSH
1507: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1511: LD_EXP 21
1515: PPUSH
1516: LD_INT 142
1518: PPUSH
1519: LD_INT 52
1521: PPUSH
1522: CALL_OW 116
// end ;
1526: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1527: LD_EXP 8
1531: NOT
1532: PUSH
1533: LD_EXP 4
1537: NOT
1538: AND
1539: IFFALSE 1559
1541: GO 1543
1543: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1544: LD_EXP 21
1548: PPUSH
1549: LD_INT 142
1551: PPUSH
1552: LD_INT 52
1554: PPUSH
1555: CALL_OW 116
1559: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1560: LD_INT 0
1562: PPUSH
1563: PPUSH
// contaminateTime := tick ;
1564: LD_ADDR_EXP 3
1568: PUSH
1569: LD_OWVAR 1
1573: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1574: LD_INT 175
1576: PPUSH
1577: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1581: LD_ADDR_VAR 0 5
1585: PUSH
1586: LD_INT 4
1588: PPUSH
1589: CALL_OW 469
1593: ST_TO_ADDR
// if art then
1594: LD_VAR 0 5
1598: IFFALSE 1637
// if art [ 1 ] = 157 and art [ 2 ] = 75 then
1600: LD_VAR 0 5
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PUSH
1609: LD_INT 157
1611: EQUAL
1612: PUSH
1613: LD_VAR 0 5
1617: PUSH
1618: LD_INT 2
1620: ARRAY
1621: PUSH
1622: LD_INT 75
1624: EQUAL
1625: AND
1626: IFFALSE 1637
// begin YouLost ( Artefact ) ;
1628: LD_STRING Artefact
1630: PPUSH
1631: CALL_OW 104
// exit ;
1635: GO 1789
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1637: LD_EXP 14
1641: PPUSH
1642: CALL_OW 302
1646: PUSH
1647: LD_EXP 15
1651: PPUSH
1652: CALL_OW 302
1656: AND
1657: IFFALSE 1734
// begin DialogueOn ;
1659: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1663: LD_EXP 14
1667: PPUSH
1668: LD_STRING D6a-JMM-1
1670: PPUSH
1671: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1675: LD_EXP 15
1679: PPUSH
1680: LD_STRING D6a-Bur-1
1682: PPUSH
1683: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1687: LD_EXP 14
1691: PPUSH
1692: LD_STRING D6c-JMM-1
1694: PPUSH
1695: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1699: LD_EXP 15
1703: PPUSH
1704: LD_STRING D6c-Bur-1
1706: PPUSH
1707: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1711: LD_EXP 14
1715: PPUSH
1716: LD_STRING D6c-JMM-2
1718: PPUSH
1719: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1723: LD_STRING MBase
1725: PPUSH
1726: CALL_OW 337
// DialogueOff ;
1730: CALL_OW 7
// end ; bombExploded := true ;
1734: LD_ADDR_EXP 4
1738: PUSH
1739: LD_INT 1
1741: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ) ;
1742: LD_INT 6300
1744: PUSH
1745: LD_INT 5250
1747: PUSH
1748: LD_INT 4200
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: PUSH
1756: LD_OWVAR 67
1760: ARRAY
1761: PPUSH
1762: CALL_OW 67
// if IsOk ( JMM ) then
1766: LD_EXP 14
1770: PPUSH
1771: CALL_OW 302
1775: IFFALSE 1789
// Say ( JMM , D8-JMM-1 ) ;
1777: LD_EXP 14
1781: PPUSH
1782: LD_STRING D8-JMM-1
1784: PPUSH
1785: CALL_OW 88
// end ;
1789: LD_VAR 0 4
1793: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1794: LD_EXP 9
1798: PUSH
1799: LD_EXP 7
1803: NOT
1804: AND
1805: PUSH
1806: LD_EXP 4
1810: AND
1811: IFFALSE 1866
1813: GO 1815
1815: DISABLE
// begin enable ;
1816: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1817: LD_INT 9
1819: PPUSH
1820: LD_INT 22
1822: PUSH
1823: LD_INT 7
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PPUSH
1830: CALL_OW 70
1834: IFFALSE 1852
// stevensTimer := stevensTimer - 0 0$30 else
1836: LD_ADDR_EXP 9
1840: PUSH
1841: LD_EXP 9
1845: PUSH
1846: LD_INT 1050
1848: MINUS
1849: ST_TO_ADDR
1850: GO 1866
// stevensTimer := stevensTimer - 0 0$1 ;
1852: LD_ADDR_EXP 9
1856: PUSH
1857: LD_EXP 9
1861: PUSH
1862: LD_INT 35
1864: MINUS
1865: ST_TO_ADDR
// end ;
1866: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1867: LD_EXP 9
1871: PUSH
1872: LD_INT 0
1874: LESSEQUAL
1875: PUSH
1876: LD_EXP 7
1880: NOT
1881: AND
1882: IFFALSE 2046
1884: GO 1886
1886: DISABLE
1887: LD_INT 0
1889: PPUSH
1890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1891: LD_ADDR_VAR 0 2
1895: PUSH
1896: LD_INT 22
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 25
1908: PUSH
1909: LD_INT 4
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PPUSH
1920: CALL_OW 69
1924: ST_TO_ADDR
// for i in tmp do
1925: LD_ADDR_VAR 0 1
1929: PUSH
1930: LD_VAR 0 2
1934: PUSH
1935: FOR_IN
1936: IFFALSE 1989
// begin if IsInUnit ( i ) then
1938: LD_VAR 0 1
1942: PPUSH
1943: CALL_OW 310
1947: IFFALSE 1960
// ComExitBuilding ( i ) else
1949: LD_VAR 0 1
1953: PPUSH
1954: CALL_OW 122
1958: GO 1987
// if not HasTask ( i ) then
1960: LD_VAR 0 1
1964: PPUSH
1965: CALL_OW 314
1969: NOT
1970: IFFALSE 1987
// ComMoveXY ( i , 29 , 56 ) ;
1972: LD_VAR 0 1
1976: PPUSH
1977: LD_INT 29
1979: PPUSH
1980: LD_INT 56
1982: PPUSH
1983: CALL_OW 111
// end ;
1987: GO 1935
1989: POP
1990: POP
// repeat wait ( 0 0$1 ) ;
1991: LD_INT 35
1993: PPUSH
1994: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1998: LD_INT 8
2000: PPUSH
2001: LD_INT 22
2003: PUSH
2004: LD_INT 1
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 25
2013: PUSH
2014: LD_INT 4
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PPUSH
2025: CALL_OW 70
2029: IFFALSE 1991
// if planCaptured then
2031: LD_EXP 7
2035: IFFALSE 2039
// exit ;
2037: GO 2046
// YouLost ( Time ) ;
2039: LD_STRING Time
2041: PPUSH
2042: CALL_OW 104
// end ;
2046: PPOPN 2
2048: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2049: LD_INT 22
2051: PUSH
2052: LD_INT 7
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: LD_INT 92
2061: PUSH
2062: LD_INT 142
2064: PUSH
2065: LD_INT 52
2067: PUSH
2068: LD_INT 27
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PPUSH
2081: CALL_OW 69
2085: PUSH
2086: LD_EXP 3
2090: PUSH
2091: LD_INT 6000
2093: PLUS
2094: PUSH
2095: LD_OWVAR 1
2099: GREATER
2100: AND
2101: PUSH
2102: LD_EXP 4
2106: AND
2107: IFFALSE 2162
2109: GO 2111
2111: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2112: LD_EXP 14
2116: PUSH
2117: LD_EXP 15
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PPUSH
2126: CALL_OW 85
// DialogueOn ;
2130: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2134: LD_EXP 14
2138: PPUSH
2139: LD_STRING D6b-JMM-1
2141: PPUSH
2142: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2146: LD_EXP 15
2150: PPUSH
2151: LD_STRING D6b-Bur-1
2153: PPUSH
2154: CALL_OW 88
// DialogueOff ;
2158: CALL_OW 7
// end ;
2162: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2163: LD_EXP 15
2167: PPUSH
2168: LD_INT 142
2170: PPUSH
2171: LD_INT 52
2173: PPUSH
2174: CALL_OW 297
2178: PUSH
2179: LD_INT 25
2181: LESS
2182: PUSH
2183: LD_EXP 15
2187: PPUSH
2188: CALL_OW 310
2192: PPUSH
2193: LD_INT 142
2195: PPUSH
2196: LD_INT 52
2198: PPUSH
2199: CALL_OW 297
2203: PUSH
2204: LD_INT 25
2206: LESS
2207: OR
2208: PUSH
2209: LD_EXP 15
2213: PPUSH
2214: CALL_OW 256
2218: PUSH
2219: LD_INT 1000
2221: LESS
2222: AND
2223: PUSH
2224: LD_EXP 3
2228: PUSH
2229: LD_INT 6000
2231: PLUS
2232: PUSH
2233: LD_OWVAR 1
2237: GREATER
2238: AND
2239: PUSH
2240: LD_EXP 4
2244: AND
2245: IFFALSE 2278
2247: GO 2249
2249: DISABLE
// begin DialogueOn ;
2250: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2254: LD_EXP 15
2258: PPUSH
2259: LD_STRING D7-Bur-1
2261: PPUSH
2262: CALL_OW 88
// enteredContaminatedArea := true ;
2266: LD_ADDR_EXP 5
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// DialogueOff ;
2274: CALL_OW 7
// end ;
2278: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2279: LD_EXP 14
2283: PPUSH
2284: LD_INT 142
2286: PPUSH
2287: LD_INT 52
2289: PPUSH
2290: CALL_OW 297
2294: PUSH
2295: LD_INT 25
2297: LESS
2298: PUSH
2299: LD_EXP 14
2303: PPUSH
2304: CALL_OW 310
2308: PPUSH
2309: LD_INT 142
2311: PPUSH
2312: LD_INT 52
2314: PPUSH
2315: CALL_OW 297
2319: PUSH
2320: LD_INT 25
2322: LESS
2323: OR
2324: PUSH
2325: LD_EXP 14
2329: PPUSH
2330: CALL_OW 256
2334: PUSH
2335: LD_INT 1000
2337: LESS
2338: AND
2339: PUSH
2340: LD_EXP 3
2344: PUSH
2345: LD_INT 6000
2347: PLUS
2348: PUSH
2349: LD_OWVAR 1
2353: GREATER
2354: AND
2355: PUSH
2356: LD_EXP 4
2360: AND
2361: IFFALSE 2394
2363: GO 2365
2365: DISABLE
// begin DialogueOn ;
2366: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2370: LD_EXP 14
2374: PPUSH
2375: LD_STRING D7-JMM-1
2377: PPUSH
2378: CALL_OW 88
// enteredContaminatedArea := true ;
2382: LD_ADDR_EXP 5
2386: PUSH
2387: LD_INT 1
2389: ST_TO_ADDR
// DialogueOff ;
2390: CALL_OW 7
// end ;
2394: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2395: LD_EXP 6
2399: PUSH
2400: LD_EXP 14
2404: PPUSH
2405: CALL_OW 302
2409: AND
2410: PUSH
2411: LD_EXP 15
2415: PPUSH
2416: CALL_OW 302
2420: AND
2421: IFFALSE 2490
2423: GO 2425
2425: DISABLE
// begin DialogueOn ;
2426: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2430: LD_EXP 14
2434: PUSH
2435: LD_EXP 15
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PPUSH
2444: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2448: LD_EXP 14
2452: PPUSH
2453: LD_STRING D4-JMM-1
2455: PPUSH
2456: CALL_OW 88
// if not bombExploded then
2460: LD_EXP 4
2464: NOT
2465: IFFALSE 2479
// Say ( Burlak , D4-Bur-1 ) ;
2467: LD_EXP 15
2471: PPUSH
2472: LD_STRING D4-Bur-1
2474: PPUSH
2475: CALL_OW 88
// DialogueOff ;
2479: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2483: LD_STRING MReturn
2485: PPUSH
2486: CALL_OW 337
// end ;
2490: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2491: LD_EXP 7
2495: NOT
2496: PUSH
2497: LD_INT 22
2499: PUSH
2500: LD_INT 7
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: LD_INT 91
2509: PUSH
2510: LD_INT 9
2512: PUSH
2513: LD_INT 6
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: LIST
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PPUSH
2525: CALL_OW 69
2529: AND
2530: IFFALSE 2607
2532: GO 2534
2534: DISABLE
// begin DialogueOn ;
2535: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2539: LD_INT 55
2541: PPUSH
2542: LD_INT 11
2544: PPUSH
2545: LD_INT 7
2547: PPUSH
2548: LD_INT 6
2550: NEG
2551: PPUSH
2552: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2556: LD_INT 55
2558: PPUSH
2559: LD_INT 11
2561: PPUSH
2562: LD_INT 7
2564: PPUSH
2565: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2569: LD_EXP 15
2573: PPUSH
2574: LD_STRING D9-Bur-1
2576: PPUSH
2577: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2581: LD_EXP 14
2585: PPUSH
2586: LD_STRING D9-JMM-1
2588: PPUSH
2589: CALL_OW 88
// DialogueOff ;
2593: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2597: LD_INT 9
2599: PPUSH
2600: LD_INT 7
2602: PPUSH
2603: CALL_OW 235
// end ;
2607: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2608: LD_INT 9
2610: PPUSH
2611: LD_INT 22
2613: PUSH
2614: LD_INT 7
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PPUSH
2621: CALL_OW 70
2625: IFFALSE 2661
2627: GO 2629
2629: DISABLE
// begin wait ( 0 0$07 ) ;
2630: LD_INT 245
2632: PPUSH
2633: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2637: LD_EXP 14
2641: PPUSH
2642: LD_STRING D10b-JMM-1
2644: PPUSH
2645: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2649: LD_EXP 15
2653: PPUSH
2654: LD_STRING D10b-Bur-1
2656: PPUSH
2657: CALL_OW 88
// end ;
2661: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2662: LD_EXP 9
2666: PUSH
2667: LD_INT 22
2669: PUSH
2670: LD_INT 1
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: LD_INT 25
2679: PUSH
2680: LD_INT 4
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_INT 26
2689: PUSH
2690: LD_INT 1
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: PPUSH
2702: CALL_OW 69
2706: AND
2707: PUSH
2708: LD_INT 5
2710: PPUSH
2711: CALL_OW 255
2715: PUSH
2716: LD_INT 7
2718: EQUAL
2719: PUSH
2720: LD_INT 22
2722: PUSH
2723: LD_INT 1
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 25
2732: PUSH
2733: LD_INT 1
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PPUSH
2744: CALL_OW 69
2748: PUSH
2749: LD_INT 0
2751: EQUAL
2752: OR
2753: AND
2754: IFFALSE 3343
2756: GO 2758
2758: DISABLE
2759: LD_INT 0
2761: PPUSH
// begin case Query ( QKill ) of 1 :
2762: LD_STRING QKill
2764: PPUSH
2765: CALL_OW 97
2769: PUSH
2770: LD_INT 1
2772: DOUBLE
2773: EQUAL
2774: IFTRUE 2778
2776: GO 3331
2778: POP
// begin DialogueOn ;
2779: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2783: LD_EXP 14
2787: PPUSH
2788: LD_STRING D10a-JMM-1
2790: PPUSH
2791: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2795: LD_EXP 15
2799: PPUSH
2800: LD_STRING D10a-Bur-1
2802: PPUSH
2803: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2807: LD_EXP 14
2811: PPUSH
2812: LD_STRING D10a-JMM-2
2814: PPUSH
2815: CALL_OW 88
// if IsOk ( Stevens ) then
2819: LD_EXP 18
2823: PPUSH
2824: CALL_OW 302
2828: IFFALSE 2844
// Say ( Stevens , D10a-Huck-2 ) else
2830: LD_EXP 18
2834: PPUSH
2835: LD_STRING D10a-Huck-2
2837: PPUSH
2838: CALL_OW 88
2842: GO 2895
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2844: LD_INT 22
2846: PUSH
2847: LD_INT 1
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 25
2856: PUSH
2857: LD_INT 4
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: LD_INT 26
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: LIST
2878: PPUSH
2879: CALL_OW 69
2883: PUSH
2884: LD_INT 1
2886: ARRAY
2887: PPUSH
2888: LD_STRING D10a-ASci1-3
2890: PPUSH
2891: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2895: LD_EXP 14
2899: PPUSH
2900: LD_STRING D10a-JMM-4
2902: PPUSH
2903: CALL_OW 88
// if IsOk ( Stevens ) then
2907: LD_EXP 18
2911: PPUSH
2912: CALL_OW 302
2916: IFFALSE 2930
// Say ( Stevens , D10a-Huck-3 ) ;
2918: LD_EXP 18
2922: PPUSH
2923: LD_STRING D10a-Huck-3
2925: PPUSH
2926: CALL_OW 88
// DialogueOff ;
2930: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2934: LD_INT 1
2936: PPUSH
2937: LD_INT 7
2939: PPUSH
2940: LD_INT 1
2942: PPUSH
2943: LD_INT 1
2945: PPUSH
2946: CALL_OW 80
// planCaptured := true ;
2950: LD_ADDR_EXP 7
2954: PUSH
2955: LD_INT 1
2957: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2958: LD_STRING MEnd
2960: PPUSH
2961: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
2965: LD_STRING ACH_DIPLOMACY
2967: PPUSH
2968: CALL_OW 543
// canEnd := true ;
2972: LD_ADDR_EXP 10
2976: PUSH
2977: LD_INT 1
2979: ST_TO_ADDR
// missionTime := tick ;
2980: LD_ADDR_EXP 11
2984: PUSH
2985: LD_OWVAR 1
2989: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2990: LD_INT 35
2992: PPUSH
2993: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
2997: LD_INT 22
2999: PUSH
3000: LD_INT 1
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: LD_INT 3
3009: PUSH
3010: LD_INT 50
3012: PUSH
3013: EMPTY
3014: LIST
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 69
3028: IFFALSE 3144
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3030: LD_ADDR_VAR 0 1
3034: PUSH
3035: LD_INT 22
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: LD_INT 25
3047: PUSH
3048: LD_INT 4
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: PPUSH
3059: CALL_OW 69
3063: PUSH
3064: FOR_IN
3065: IFFALSE 3142
// begin if IsInUnit ( i ) then
3067: LD_VAR 0 1
3071: PPUSH
3072: CALL_OW 310
3076: IFFALSE 3089
// ComExitBuilding ( i ) else
3078: LD_VAR 0 1
3082: PPUSH
3083: CALL_OW 122
3087: GO 3140
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3089: LD_VAR 0 1
3093: PPUSH
3094: LD_INT 22
3096: PUSH
3097: LD_INT 1
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: LD_INT 3
3106: PUSH
3107: LD_INT 50
3109: PUSH
3110: EMPTY
3111: LIST
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PPUSH
3121: CALL_OW 69
3125: PPUSH
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 74
3135: PPUSH
3136: CALL_OW 128
// end ;
3140: GO 3064
3142: POP
3143: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3144: LD_INT 22
3146: PUSH
3147: LD_INT 1
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 3
3156: PUSH
3157: LD_INT 50
3159: PUSH
3160: EMPTY
3161: LIST
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PPUSH
3171: CALL_OW 69
3175: NOT
3176: IFFALSE 2990
// repeat wait ( 3 ) ;
3178: LD_INT 3
3180: PPUSH
3181: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3185: LD_ADDR_VAR 0 1
3189: PUSH
3190: LD_INT 22
3192: PUSH
3193: LD_INT 1
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: PUSH
3200: LD_INT 21
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: PUSH
3219: FOR_IN
3220: IFFALSE 3296
// begin if IsInArea ( i , stevensEscapeArea ) then
3222: LD_VAR 0 1
3226: PPUSH
3227: LD_INT 8
3229: PPUSH
3230: CALL_OW 308
3234: IFFALSE 3247
// begin RemoveUnit ( i ) ;
3236: LD_VAR 0 1
3240: PPUSH
3241: CALL_OW 64
// continue ;
3245: GO 3219
// end ; if IsInUnit ( i ) then
3247: LD_VAR 0 1
3251: PPUSH
3252: CALL_OW 310
3256: IFFALSE 3267
// ComExitBuilding ( i ) ;
3258: LD_VAR 0 1
3262: PPUSH
3263: CALL_OW 122
// if not HasTask ( i ) then
3267: LD_VAR 0 1
3271: PPUSH
3272: CALL_OW 314
3276: NOT
3277: IFFALSE 3294
// ComMoveXY ( i , 28 , 55 ) ;
3279: LD_VAR 0 1
3283: PPUSH
3284: LD_INT 28
3286: PPUSH
3287: LD_INT 55
3289: PPUSH
3290: CALL_OW 111
// end ;
3294: GO 3219
3296: POP
3297: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3298: LD_INT 22
3300: PUSH
3301: LD_INT 1
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 21
3310: PUSH
3311: LD_INT 1
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PPUSH
3322: CALL_OW 69
3326: NOT
3327: IFFALSE 3178
// end ; 2 :
3329: GO 3343
3331: LD_INT 2
3333: DOUBLE
3334: EQUAL
3335: IFTRUE 3339
3337: GO 3342
3339: POP
// ; end ;
3340: GO 3343
3342: POP
// end ;
3343: PPOPN 1
3345: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3346: LD_EXP 10
3350: IFFALSE 3707
3352: GO 3354
3354: DISABLE
3355: LD_INT 0
3357: PPUSH
3358: PPUSH
3359: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3360: LD_INT 10
3362: PPUSH
3363: LD_INT 1
3365: PPUSH
3366: CALL_OW 424
// if Difficulty < 2 then
3370: LD_OWVAR 67
3374: PUSH
3375: LD_INT 2
3377: LESS
3378: IFFALSE 3382
// exit ;
3380: GO 3707
// uc_side := 4 ;
3382: LD_ADDR_OWVAR 20
3386: PUSH
3387: LD_INT 4
3389: ST_TO_ADDR
// uc_nation := 1 ;
3390: LD_ADDR_OWVAR 21
3394: PUSH
3395: LD_INT 1
3397: ST_TO_ADDR
// InitHc ;
3398: CALL_OW 19
// tmp := [ ] ;
3402: LD_ADDR_VAR 0 3
3406: PUSH
3407: EMPTY
3408: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3409: LD_INT 0
3411: PPUSH
3412: LD_INT 5
3414: PPUSH
3415: LD_INT 10
3417: PPUSH
3418: CALL_OW 380
// un := CreateHuman ;
3422: LD_ADDR_VAR 0 1
3426: PUSH
3427: CALL_OW 44
3431: ST_TO_ADDR
// tmp := [ un ] ;
3432: LD_ADDR_VAR 0 3
3436: PUSH
3437: LD_VAR 0 1
3441: PUSH
3442: EMPTY
3443: LIST
3444: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3445: LD_VAR 0 1
3449: PPUSH
3450: LD_INT 226
3452: PPUSH
3453: LD_INT 86
3455: PPUSH
3456: LD_INT 0
3458: PPUSH
3459: CALL_OW 48
// ComHold ( un ) ;
3463: LD_VAR 0 1
3467: PPUSH
3468: CALL_OW 140
// for i = 1 to 3 do
3472: LD_ADDR_VAR 0 2
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_INT 3
3484: PUSH
3485: FOR_TO
3486: IFFALSE 3585
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3488: LD_INT 0
3490: PPUSH
3491: LD_INT 1
3493: PPUSH
3494: LD_INT 8
3496: PPUSH
3497: CALL_OW 380
// un := CreateHuman ;
3501: LD_ADDR_VAR 0 1
3505: PUSH
3506: CALL_OW 44
3510: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3511: LD_VAR 0 1
3515: PPUSH
3516: LD_INT 5
3518: PPUSH
3519: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3523: LD_VAR 0 1
3527: PPUSH
3528: LD_INT 215
3530: PUSH
3531: LD_INT 217
3533: PUSH
3534: LD_INT 219
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_VAR 0 2
3546: ARRAY
3547: PPUSH
3548: LD_INT 76
3550: PPUSH
3551: LD_INT 0
3553: PPUSH
3554: CALL_OW 48
// ComCrawl ( un ) ;
3558: LD_VAR 0 1
3562: PPUSH
3563: CALL_OW 137
// tmp := tmp ^ un ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: LD_VAR 0 3
3576: PUSH
3577: LD_VAR 0 1
3581: ADD
3582: ST_TO_ADDR
// end ;
3583: GO 3485
3585: POP
3586: POP
// repeat wait ( 0 0$1 ) ;
3587: LD_INT 35
3589: PPUSH
3590: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3594: LD_VAR 0 3
3598: PPUSH
3599: LD_INT 24
3601: PUSH
3602: LD_INT 1000
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PPUSH
3609: CALL_OW 72
3613: NOT
3614: IFFALSE 3587
// for i in tmp do
3616: LD_ADDR_VAR 0 2
3620: PUSH
3621: LD_VAR 0 3
3625: PUSH
3626: FOR_IN
3627: IFFALSE 3705
// begin wait ( 0 0$1 ) ;
3629: LD_INT 35
3631: PPUSH
3632: CALL_OW 67
// if Crawls ( i ) then
3636: LD_VAR 0 2
3640: PPUSH
3641: CALL_OW 318
3645: IFFALSE 3658
// ComWalk ( i ) else
3647: LD_VAR 0 2
3651: PPUSH
3652: CALL_OW 138
3656: GO 3703
// if GetClass ( i ) = class_sniper then
3658: LD_VAR 0 2
3662: PPUSH
3663: CALL_OW 257
3667: PUSH
3668: LD_INT 5
3670: EQUAL
3671: IFFALSE 3689
// ComAttackSoporific ( i , JMM ) else
3673: LD_VAR 0 2
3677: PPUSH
3678: LD_EXP 14
3682: PPUSH
3683: CALL_OW 166
3687: GO 3703
// ComAttackUnit ( i , JMM ) ;
3689: LD_VAR 0 2
3693: PPUSH
3694: LD_EXP 14
3698: PPUSH
3699: CALL_OW 115
// end ;
3703: GO 3626
3705: POP
3706: POP
// end ;
3707: PPOPN 3
3709: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3710: LD_EXP 7
3714: NOT
3715: PUSH
3716: LD_INT 1
3718: PPUSH
3719: CALL_OW 301
3723: AND
3724: IFFALSE 3736
3726: GO 3728
3728: DISABLE
// YouLost ( Lab ) ;
3729: LD_STRING Lab
3731: PPUSH
3732: CALL_OW 104
3736: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3737: LD_INT 10
3739: PPUSH
3740: LD_INT 22
3742: PUSH
3743: LD_INT 7
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PPUSH
3750: CALL_OW 70
3754: PUSH
3755: LD_INT 2
3757: GREATEREQUAL
3758: PUSH
3759: LD_INT 10
3761: PPUSH
3762: LD_INT 2
3764: PUSH
3765: LD_INT 34
3767: PUSH
3768: LD_INT 12
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 34
3777: PUSH
3778: LD_INT 51
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: LIST
3789: PPUSH
3790: CALL_OW 70
3794: AND
3795: PUSH
3796: LD_EXP 10
3800: AND
3801: PUSH
3802: LD_EXP 7
3806: AND
3807: PUSH
3808: LD_EXP 6
3812: AND
3813: IFFALSE 4069
3815: GO 3817
3817: DISABLE
3818: LD_INT 0
3820: PPUSH
3821: PPUSH
// begin m1 := false ;
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: LD_INT 0
3829: ST_TO_ADDR
// m2 := false ;
3830: LD_ADDR_VAR 0 2
3834: PUSH
3835: LD_INT 0
3837: ST_TO_ADDR
// if killCounter = 0 then
3838: LD_EXP 12
3842: PUSH
3843: LD_INT 0
3845: EQUAL
3846: IFFALSE 3855
// SetAchievement ( ACH_PACIFIST ) ;
3848: LD_STRING ACH_PACIFIST
3850: PPUSH
3851: CALL_OW 543
// if tick < 7 7$00 then
3855: LD_OWVAR 1
3859: PUSH
3860: LD_INT 14700
3862: LESS
3863: IFFALSE 3879
// begin wait ( 3 ) ;
3865: LD_INT 3
3867: PPUSH
3868: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3872: LD_STRING ACH_ASPEED_18
3874: PPUSH
3875: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3879: LD_STRING Explosion
3881: PPUSH
3882: LD_INT 1
3884: PPUSH
3885: CALL_OW 101
// if enteredContaminatedArea then
3889: LD_EXP 5
3893: IFFALSE 3915
// begin m1 := true ;
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_INT 1
3902: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3903: LD_STRING BioHazard
3905: PPUSH
3906: LD_INT 1
3908: PPUSH
3909: CALL_OW 101
// end else
3913: GO 3926
// AddMedal ( BioHazard , - 1 ) ;
3915: LD_STRING BioHazard
3917: PPUSH
3918: LD_INT 1
3920: NEG
3921: PPUSH
3922: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
3926: LD_EXP 11
3930: PUSH
3931: LD_INT 42000
3933: PUSH
3934: LD_INT 31500
3936: PUSH
3937: LD_INT 25200
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: LIST
3944: PUSH
3945: LD_OWVAR 67
3949: ARRAY
3950: LESSEQUAL
3951: IFFALSE 3973
// begin m2 := true ;
3953: LD_ADDR_VAR 0 2
3957: PUSH
3958: LD_INT 1
3960: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
3961: LD_STRING Speed
3963: PPUSH
3964: LD_INT 1
3966: PPUSH
3967: CALL_OW 101
// end else
3971: GO 3984
// AddMedal ( Speed , - 1 ) ;
3973: LD_STRING Speed
3975: PPUSH
3976: LD_INT 1
3978: NEG
3979: PPUSH
3980: CALL_OW 101
// if Difficulty = 3 and m1 and m2 then
3984: LD_OWVAR 67
3988: PUSH
3989: LD_INT 3
3991: EQUAL
3992: PUSH
3993: LD_VAR 0 1
3997: AND
3998: PUSH
3999: LD_VAR 0 2
4003: AND
4004: IFFALSE 4016
// SetAchievementEX ( ACH_AMER , 18 ) ;
4006: LD_STRING ACH_AMER
4008: PPUSH
4009: LD_INT 18
4011: PPUSH
4012: CALL_OW 564
// GiveMedals ( Main ) ;
4016: LD_STRING Main
4018: PPUSH
4019: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4023: LD_EXP 14
4027: PUSH
4028: LD_EXP 15
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PPUSH
4037: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4041: LD_EXP 14
4045: PPUSH
4046: LD_STRING 14a_JMM
4048: PPUSH
4049: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4053: LD_EXP 15
4057: PPUSH
4058: LD_STRING 14a_Burlak
4060: PPUSH
4061: CALL_OW 38
// YouWin ;
4065: CALL_OW 103
// end ; end_of_file
4069: PPOPN 2
4071: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4072: LD_INT 0
4074: PPUSH
4075: PPUSH
4076: PPUSH
4077: PPUSH
// uc_side := 1 ;
4078: LD_ADDR_OWVAR 20
4082: PUSH
4083: LD_INT 1
4085: ST_TO_ADDR
// uc_nation := 1 ;
4086: LD_ADDR_OWVAR 21
4090: PUSH
4091: LD_INT 1
4093: ST_TO_ADDR
// InitHc ;
4094: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 500 ) ;
4098: LD_INT 34
4100: PPUSH
4101: CALL_OW 274
4105: PPUSH
4106: LD_INT 1
4108: PPUSH
4109: LD_INT 500
4111: PPUSH
4112: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4116: LD_INT 34
4118: PPUSH
4119: CALL_OW 274
4123: PPUSH
4124: LD_INT 3
4126: PPUSH
4127: LD_INT 20
4129: PPUSH
4130: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4134: LD_ADDR_EXP 18
4138: PUSH
4139: LD_STRING Stevens
4141: PPUSH
4142: CALL_OW 25
4146: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4147: LD_ADDR_EXP 19
4151: PUSH
4152: LD_STRING Powell
4154: PPUSH
4155: CALL_OW 25
4159: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4160: LD_EXP 18
4164: PPUSH
4165: LD_INT 1
4167: PPUSH
4168: CALL_OW 52
// vehGuard := [ ] ;
4172: LD_ADDR_EXP 23
4176: PUSH
4177: EMPTY
4178: ST_TO_ADDR
// hc_importance := 0 ;
4179: LD_ADDR_OWVAR 32
4183: PUSH
4184: LD_INT 0
4186: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4187: LD_INT 4
4189: PPUSH
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 3
4195: PPUSH
4196: LD_INT 8
4198: PPUSH
4199: LD_INT 100
4201: PPUSH
4202: CALL 29347 0 5
// sibBomb := CreateVehicle ;
4206: LD_ADDR_EXP 21
4210: PUSH
4211: CALL_OW 45
4215: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4216: LD_EXP 21
4220: PPUSH
4221: LD_INT 1
4223: PPUSH
4224: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4228: LD_EXP 21
4232: PPUSH
4233: LD_INT 93
4235: PPUSH
4236: LD_INT 74
4238: PPUSH
4239: LD_INT 0
4241: PPUSH
4242: CALL_OW 48
// guards := [ ] ;
4246: LD_ADDR_EXP 22
4250: PUSH
4251: EMPTY
4252: ST_TO_ADDR
// for i = 1 to 3 do
4253: LD_ADDR_VAR 0 2
4257: PUSH
4258: DOUBLE
4259: LD_INT 1
4261: DEC
4262: ST_TO_ADDR
4263: LD_INT 3
4265: PUSH
4266: FOR_TO
4267: IFFALSE 4359
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
4269: LD_INT 0
4271: PPUSH
4272: LD_INT 1
4274: PPUSH
4275: LD_INT 8
4277: PUSH
4278: LD_INT 9
4280: PUSH
4281: LD_INT 10
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: LIST
4288: PUSH
4289: LD_OWVAR 67
4293: ARRAY
4294: PPUSH
4295: CALL_OW 380
// un := CreateHuman ;
4299: LD_ADDR_VAR 0 3
4303: PUSH
4304: CALL_OW 44
4308: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4309: LD_VAR 0 3
4313: PPUSH
4314: LD_INT 2
4316: PUSH
4317: LD_INT 3
4319: PUSH
4320: LD_INT 4
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: LIST
4327: PUSH
4328: LD_VAR 0 2
4332: ARRAY
4333: PPUSH
4334: LD_INT 0
4336: PPUSH
4337: CALL_OW 49
// guards := guards ^ un ;
4341: LD_ADDR_EXP 22
4345: PUSH
4346: LD_EXP 22
4350: PUSH
4351: LD_VAR 0 3
4355: ADD
4356: ST_TO_ADDR
// end ;
4357: GO 4266
4359: POP
4360: POP
// baseGuards := [ ] ;
4361: LD_ADDR_EXP 20
4365: PUSH
4366: EMPTY
4367: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
4368: LD_ADDR_VAR 0 2
4372: PUSH
4373: DOUBLE
4374: LD_INT 1
4376: DEC
4377: ST_TO_ADDR
4378: LD_INT 5
4380: PUSH
4381: LD_INT 6
4383: PUSH
4384: LD_INT 7
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: PUSH
4392: LD_OWVAR 67
4396: ARRAY
4397: PUSH
4398: FOR_TO
4399: IFFALSE 4545
// begin PrepareSoldier ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
4401: LD_INT 0
4403: PPUSH
4404: LD_INT 8
4406: PUSH
4407: LD_INT 9
4409: PUSH
4410: LD_INT 10
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: PUSH
4418: LD_OWVAR 67
4422: ARRAY
4423: PPUSH
4424: CALL_OW 381
// un := CreateHuman ;
4428: LD_ADDR_VAR 0 3
4432: PUSH
4433: CALL_OW 44
4437: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4438: LD_ADDR_EXP 20
4442: PUSH
4443: LD_EXP 20
4447: PUSH
4448: LD_VAR 0 3
4452: ADD
4453: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4454: LD_ADDR_VAR 0 4
4458: PUSH
4459: LD_INT 22
4461: PUSH
4462: LD_INT 1
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PUSH
4469: LD_INT 58
4471: PUSH
4472: EMPTY
4473: LIST
4474: PUSH
4475: LD_INT 30
4477: PUSH
4478: LD_INT 32
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: PPUSH
4490: CALL_OW 69
4494: ST_TO_ADDR
// if tmp then
4495: LD_VAR 0 4
4499: IFFALSE 4531
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4501: LD_VAR 0 3
4505: PPUSH
4506: LD_VAR 0 4
4510: PUSH
4511: LD_INT 1
4513: PPUSH
4514: LD_VAR 0 4
4518: PPUSH
4519: CALL_OW 12
4523: ARRAY
4524: PPUSH
4525: CALL_OW 52
4529: GO 4543
// PlaceHumanInUnit ( un , us_bar ) ;
4531: LD_VAR 0 3
4535: PPUSH
4536: LD_INT 51
4538: PPUSH
4539: CALL_OW 52
// end ;
4543: GO 4398
4545: POP
4546: POP
// if Difficulty > 1 then
4547: LD_OWVAR 67
4551: PUSH
4552: LD_INT 1
4554: GREATER
4555: IFFALSE 4599
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 ] [ Difficulty - 1 ] ) ;
4557: LD_INT 0
4559: PPUSH
4560: LD_INT 5
4562: PPUSH
4563: LD_INT 9
4565: PUSH
4566: LD_INT 10
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_OWVAR 67
4577: PUSH
4578: LD_INT 1
4580: MINUS
4581: ARRAY
4582: PPUSH
4583: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4587: CALL_OW 44
4591: PPUSH
4592: LD_INT 80
4594: PPUSH
4595: CALL_OW 52
// end ; for i = 1 to 3 do
4599: LD_ADDR_VAR 0 2
4603: PUSH
4604: DOUBLE
4605: LD_INT 1
4607: DEC
4608: ST_TO_ADDR
4609: LD_INT 3
4611: PUSH
4612: FOR_TO
4613: IFFALSE 4639
// begin PrepareMechanic ( false , 9 ) ;
4615: LD_INT 0
4617: PPUSH
4618: LD_INT 9
4620: PPUSH
4621: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4625: CALL_OW 44
4629: PPUSH
4630: LD_INT 43
4632: PPUSH
4633: CALL_OW 52
// end ;
4637: GO 4612
4639: POP
4640: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4641: CALL_OW 44
4645: PPUSH
4646: LD_INT 49
4648: PPUSH
4649: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4653: LD_ADDR_VAR 0 2
4657: PUSH
4658: DOUBLE
4659: LD_INT 1
4661: DEC
4662: ST_TO_ADDR
4663: LD_INT 1
4665: PUSH
4666: LD_OWVAR 67
4670: PLUS
4671: PUSH
4672: FOR_TO
4673: IFFALSE 4716
// begin PrepareEngineer ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
4675: LD_INT 0
4677: PPUSH
4678: LD_INT 8
4680: PUSH
4681: LD_INT 9
4683: PUSH
4684: LD_INT 10
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: PUSH
4692: LD_OWVAR 67
4696: ARRAY
4697: PPUSH
4698: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4702: CALL_OW 44
4706: PPUSH
4707: LD_INT 5
4709: PPUSH
4710: CALL_OW 52
// end ;
4714: GO 4672
4716: POP
4717: POP
// for i = 1 to 3 do
4718: LD_ADDR_VAR 0 2
4722: PUSH
4723: DOUBLE
4724: LD_INT 1
4726: DEC
4727: ST_TO_ADDR
4728: LD_INT 3
4730: PUSH
4731: FOR_TO
4732: IFFALSE 4758
// begin PrepareScientist ( false , 10 ) ;
4734: LD_INT 0
4736: PPUSH
4737: LD_INT 10
4739: PPUSH
4740: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4744: CALL_OW 44
4748: PPUSH
4749: LD_INT 1
4751: PPUSH
4752: CALL_OW 52
// end ;
4756: GO 4731
4758: POP
4759: POP
// end ;
4760: LD_VAR 0 1
4764: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4765: LD_EXP 22
4769: PUSH
4770: LD_EXP 2
4774: NOT
4775: AND
4776: IFFALSE 4962
4778: GO 4780
4780: DISABLE
4781: LD_INT 0
4783: PPUSH
4784: PPUSH
4785: PPUSH
// begin enable ;
4786: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4787: LD_ADDR_VAR 0 3
4791: PUSH
4792: LD_INT 204
4794: PUSH
4795: LD_INT 30
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 165
4804: PUSH
4805: LD_INT 24
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 195
4814: PUSH
4815: LD_INT 6
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 223
4824: PUSH
4825: LD_INT 54
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 214
4834: PUSH
4835: LD_INT 84
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PUSH
4842: LD_INT 206
4844: PUSH
4845: LD_INT 71
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: ST_TO_ADDR
// for i in guards do
4860: LD_ADDR_VAR 0 1
4864: PUSH
4865: LD_EXP 22
4869: PUSH
4870: FOR_IN
4871: IFFALSE 4960
// begin if HasTask ( i ) then
4873: LD_VAR 0 1
4877: PPUSH
4878: CALL_OW 314
4882: IFFALSE 4888
// continue else
4884: GO 4870
4886: GO 4958
// begin j := rand ( 1 , 6 ) ;
4888: LD_ADDR_VAR 0 2
4892: PUSH
4893: LD_INT 1
4895: PPUSH
4896: LD_INT 6
4898: PPUSH
4899: CALL_OW 12
4903: ST_TO_ADDR
// if not See ( 7 , i ) then
4904: LD_INT 7
4906: PPUSH
4907: LD_VAR 0 1
4911: PPUSH
4912: CALL_OW 292
4916: NOT
4917: IFFALSE 4958
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
4919: LD_VAR 0 1
4923: PPUSH
4924: LD_VAR 0 3
4928: PUSH
4929: LD_VAR 0 2
4933: ARRAY
4934: PUSH
4935: LD_INT 1
4937: ARRAY
4938: PPUSH
4939: LD_VAR 0 3
4943: PUSH
4944: LD_VAR 0 2
4948: ARRAY
4949: PUSH
4950: LD_INT 2
4952: ARRAY
4953: PPUSH
4954: CALL_OW 114
// end ; end ;
4958: GO 4870
4960: POP
4961: POP
// end ;
4962: PPOPN 3
4964: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
4965: LD_EXP 23
4969: PUSH
4970: LD_EXP 7
4974: NOT
4975: AND
4976: IFFALSE 5047
4978: GO 4980
4980: DISABLE
4981: LD_INT 0
4983: PPUSH
// begin enable ;
4984: ENABLE
// for i in vehGuard do
4985: LD_ADDR_VAR 0 1
4989: PUSH
4990: LD_EXP 23
4994: PUSH
4995: FOR_IN
4996: IFFALSE 5045
// if IsOk ( vehGuard ) then
4998: LD_EXP 23
5002: PPUSH
5003: CALL_OW 302
5007: IFFALSE 5043
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5009: LD_VAR 0 1
5013: PPUSH
5014: LD_INT 22
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PPUSH
5024: CALL_OW 69
5028: PPUSH
5029: LD_VAR 0 1
5033: PPUSH
5034: CALL_OW 74
5038: PPUSH
5039: CALL_OW 115
5043: GO 4995
5045: POP
5046: POP
// end ;
5047: PPOPN 1
5049: END
// every 9 9$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured do
5050: LD_EXP 4
5054: PUSH
5055: LD_INT 43
5057: PPUSH
5058: CALL_OW 302
5062: AND
5063: PUSH
5064: LD_EXP 7
5068: NOT
5069: AND
5070: IFFALSE 5118
5072: GO 5074
5074: DISABLE
// begin enable ;
5075: ENABLE
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5076: LD_INT 43
5078: PPUSH
5079: LD_INT 5
5081: PPUSH
5082: LD_INT 3
5084: PPUSH
5085: LD_INT 2
5087: PPUSH
5088: LD_INT 7
5090: PUSH
5091: LD_INT 7
5093: PUSH
5094: LD_INT 9
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: LIST
5101: PUSH
5102: LD_INT 1
5104: PPUSH
5105: LD_INT 3
5107: PPUSH
5108: CALL_OW 12
5112: ARRAY
5113: PPUSH
5114: CALL_OW 125
// end ;
5118: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5119: LD_INT 22
5121: PUSH
5122: LD_INT 1
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: LD_INT 25
5131: PUSH
5132: LD_INT 5
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PUSH
5139: LD_INT 50
5141: PUSH
5142: EMPTY
5143: LIST
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: LIST
5149: PPUSH
5150: CALL_OW 69
5154: PUSH
5155: LD_EXP 7
5159: NOT
5160: AND
5161: IFFALSE 5390
5163: GO 5165
5165: DISABLE
5166: LD_INT 0
5168: PPUSH
5169: PPUSH
// begin enable ;
5170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5171: LD_ADDR_VAR 0 1
5175: PUSH
5176: LD_INT 22
5178: PUSH
5179: LD_INT 1
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 25
5188: PUSH
5189: LD_INT 5
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PUSH
5196: LD_INT 50
5198: PUSH
5199: EMPTY
5200: LIST
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: PPUSH
5207: CALL_OW 69
5211: ST_TO_ADDR
// if not tmp then
5212: LD_VAR 0 1
5216: NOT
5217: IFFALSE 5221
// exit ;
5219: GO 5390
// b := IsInUnit ( tmp [ 1 ] ) ;
5221: LD_ADDR_VAR 0 2
5225: PUSH
5226: LD_VAR 0 1
5230: PUSH
5231: LD_INT 1
5233: ARRAY
5234: PPUSH
5235: CALL_OW 310
5239: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5240: LD_VAR 0 2
5244: NOT
5245: PUSH
5246: LD_VAR 0 1
5250: PUSH
5251: LD_INT 1
5253: ARRAY
5254: PPUSH
5255: CALL_OW 314
5259: OR
5260: IFFALSE 5264
// exit ;
5262: GO 5390
// if b = us_bun1 then
5264: LD_VAR 0 2
5268: PUSH
5269: LD_INT 80
5271: EQUAL
5272: IFFALSE 5333
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5274: LD_VAR 0 1
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PPUSH
5283: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5287: LD_VAR 0 1
5291: PUSH
5292: LD_INT 1
5294: ARRAY
5295: PPUSH
5296: LD_INT 27
5298: PPUSH
5299: LD_INT 44
5301: PPUSH
5302: CALL_OW 174
// if IsOk ( us_bun2 ) then
5306: LD_INT 55
5308: PPUSH
5309: CALL_OW 302
5313: IFFALSE 5331
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5315: LD_VAR 0 1
5319: PUSH
5320: LD_INT 1
5322: ARRAY
5323: PPUSH
5324: LD_INT 55
5326: PPUSH
5327: CALL_OW 180
// end else
5331: GO 5390
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5333: LD_VAR 0 1
5337: PUSH
5338: LD_INT 1
5340: ARRAY
5341: PPUSH
5342: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5346: LD_VAR 0 1
5350: PUSH
5351: LD_INT 1
5353: ARRAY
5354: PPUSH
5355: LD_INT 92
5357: PPUSH
5358: LD_INT 51
5360: PPUSH
5361: CALL_OW 174
// if IsOk ( us_bun1 ) then
5365: LD_INT 80
5367: PPUSH
5368: CALL_OW 302
5372: IFFALSE 5390
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5374: LD_VAR 0 1
5378: PUSH
5379: LD_INT 1
5381: ARRAY
5382: PPUSH
5383: LD_INT 80
5385: PPUSH
5386: CALL_OW 180
// end ; end ;
5390: PPOPN 2
5392: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5393: LD_EXP 7
5397: NOT
5398: PUSH
5399: LD_INT 9
5401: PPUSH
5402: LD_INT 22
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: LD_INT 21
5414: PUSH
5415: LD_INT 3
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PUSH
5422: LD_INT 3
5424: PUSH
5425: LD_INT 24
5427: PUSH
5428: LD_INT 1000
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: PPUSH
5444: CALL_OW 70
5448: AND
5449: IFFALSE 5860
5451: GO 5453
5453: DISABLE
5454: LD_INT 0
5456: PPUSH
5457: PPUSH
5458: PPUSH
5459: PPUSH
// begin enable ;
5460: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5461: LD_ADDR_VAR 0 2
5465: PUSH
5466: LD_INT 22
5468: PUSH
5469: LD_INT 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 25
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 24
5488: PUSH
5489: LD_INT 1000
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: LIST
5500: PPUSH
5501: CALL_OW 69
5505: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5506: LD_ADDR_VAR 0 3
5510: PUSH
5511: LD_INT 22
5513: PUSH
5514: LD_INT 1
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: LD_INT 25
5523: PUSH
5524: LD_INT 2
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 3
5533: PUSH
5534: LD_INT 24
5536: PUSH
5537: LD_INT 750
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: LIST
5552: PPUSH
5553: CALL_OW 69
5557: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5558: LD_ADDR_VAR 0 4
5562: PUSH
5563: LD_INT 9
5565: PPUSH
5566: LD_INT 22
5568: PUSH
5569: LD_INT 1
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: PUSH
5576: LD_INT 21
5578: PUSH
5579: LD_INT 3
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PUSH
5586: LD_INT 3
5588: PUSH
5589: LD_INT 24
5591: PUSH
5592: LD_INT 1000
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: PPUSH
5608: CALL_OW 70
5612: PUSH
5613: LD_INT 1
5615: DIFF
5616: ST_TO_ADDR
// if not tmp and not tmp2 then
5617: LD_VAR 0 2
5621: NOT
5622: PUSH
5623: LD_VAR 0 3
5627: NOT
5628: AND
5629: IFFALSE 5633
// exit ;
5631: GO 5860
// if tmp and b then
5633: LD_VAR 0 2
5637: PUSH
5638: LD_VAR 0 4
5642: AND
5643: IFFALSE 5773
// for i in tmp do
5645: LD_ADDR_VAR 0 1
5649: PUSH
5650: LD_VAR 0 2
5654: PUSH
5655: FOR_IN
5656: IFFALSE 5771
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5658: LD_VAR 0 1
5662: PPUSH
5663: CALL_OW 110
5667: PUSH
5668: LD_INT 1
5670: EQUAL
5671: PUSH
5672: LD_VAR 0 1
5676: PPUSH
5677: CALL_OW 256
5681: PUSH
5682: LD_INT 1000
5684: LESS
5685: AND
5686: IFFALSE 5692
// continue else
5688: GO 5655
5690: GO 5719
// if GetTag ( i ) = 1 then
5692: LD_VAR 0 1
5696: PPUSH
5697: CALL_OW 110
5701: PUSH
5702: LD_INT 1
5704: EQUAL
5705: IFFALSE 5719
// SetTag ( i , 0 ) ;
5707: LD_VAR 0 1
5711: PPUSH
5712: LD_INT 0
5714: PPUSH
5715: CALL_OW 109
// if IsInUnit ( i ) then
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 310
5728: IFFALSE 5739
// ComExitBuilding ( i ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: CALL_OW 122
// if not HasTask ( i ) then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 314
5748: NOT
5749: IFFALSE 5769
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5751: LD_VAR 0 1
5755: PPUSH
5756: LD_VAR 0 4
5760: PUSH
5761: LD_INT 1
5763: ARRAY
5764: PPUSH
5765: CALL_OW 190
// end ;
5769: GO 5655
5771: POP
5772: POP
// if tmp2 then
5773: LD_VAR 0 3
5777: IFFALSE 5860
// for i in tmp2 do
5779: LD_ADDR_VAR 0 1
5783: PUSH
5784: LD_VAR 0 3
5788: PUSH
5789: FOR_IN
5790: IFFALSE 5858
// begin if not GetTag ( i ) = 1 then
5792: LD_VAR 0 1
5796: PPUSH
5797: CALL_OW 110
5801: PUSH
5802: LD_INT 1
5804: EQUAL
5805: NOT
5806: IFFALSE 5820
// SetTag ( i , 1 ) ;
5808: LD_VAR 0 1
5812: PPUSH
5813: LD_INT 1
5815: PPUSH
5816: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5820: LD_VAR 0 1
5824: PPUSH
5825: LD_INT 88
5827: PPUSH
5828: LD_INT 75
5830: PPUSH
5831: CALL_OW 297
5835: PUSH
5836: LD_INT 6
5838: GREATER
5839: IFFALSE 5856
// ComMoveXY ( i , 88 , 75 ) ;
5841: LD_VAR 0 1
5845: PPUSH
5846: LD_INT 88
5848: PPUSH
5849: LD_INT 75
5851: PPUSH
5852: CALL_OW 111
// end ;
5856: GO 5789
5858: POP
5859: POP
// end ;
5860: PPOPN 4
5862: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5863: LD_EXP 7
5867: NOT
5868: PUSH
5869: LD_EXP 9
5873: AND
5874: PUSH
5875: LD_INT 9
5877: PPUSH
5878: LD_INT 22
5880: PUSH
5881: LD_INT 1
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: PUSH
5888: LD_INT 21
5890: PUSH
5891: LD_INT 1
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: LD_INT 24
5903: PUSH
5904: LD_INT 1000
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 70
5924: AND
5925: IFFALSE 6098
5927: GO 5929
5929: DISABLE
5930: LD_INT 0
5932: PPUSH
5933: PPUSH
5934: PPUSH
// begin enable ;
5935: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
5936: LD_ADDR_VAR 0 2
5940: PUSH
5941: LD_INT 22
5943: PUSH
5944: LD_INT 1
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PUSH
5951: LD_INT 25
5953: PUSH
5954: LD_INT 4
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: PPUSH
5965: CALL_OW 69
5969: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5970: LD_ADDR_VAR 0 3
5974: PUSH
5975: LD_INT 9
5977: PPUSH
5978: LD_INT 22
5980: PUSH
5981: LD_INT 1
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: PUSH
5988: LD_INT 21
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 3
6000: PUSH
6001: LD_INT 24
6003: PUSH
6004: LD_INT 1000
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: LIST
6019: PPUSH
6020: CALL_OW 70
6024: ST_TO_ADDR
// if not sci or not tmp then
6025: LD_VAR 0 2
6029: NOT
6030: PUSH
6031: LD_VAR 0 3
6035: NOT
6036: OR
6037: IFFALSE 6041
// exit ;
6039: GO 6098
// for i in sci do
6041: LD_ADDR_VAR 0 1
6045: PUSH
6046: LD_VAR 0 2
6050: PUSH
6051: FOR_IN
6052: IFFALSE 6096
// if IsInUnit ( i ) then
6054: LD_VAR 0 1
6058: PPUSH
6059: CALL_OW 310
6063: IFFALSE 6076
// ComExitBuilding ( i ) else
6065: LD_VAR 0 1
6069: PPUSH
6070: CALL_OW 122
6074: GO 6094
// ComHeal ( i , tmp [ 1 ] ) ;
6076: LD_VAR 0 1
6080: PPUSH
6081: LD_VAR 0 3
6085: PUSH
6086: LD_INT 1
6088: ARRAY
6089: PPUSH
6090: CALL_OW 128
6094: GO 6051
6096: POP
6097: POP
// end ;
6098: PPOPN 3
6100: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6101: LD_EXP 7
6105: NOT
6106: PUSH
6107: LD_EXP 9
6111: AND
6112: PUSH
6113: LD_INT 1
6115: PPUSH
6116: CALL_OW 302
6120: AND
6121: PUSH
6122: LD_INT 9
6124: PPUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 1
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 21
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: LD_INT 3
6147: PUSH
6148: LD_INT 24
6150: PUSH
6151: LD_INT 1000
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 70
6171: NOT
6172: AND
6173: PUSH
6174: LD_INT 22
6176: PUSH
6177: LD_INT 1
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: LD_INT 25
6186: PUSH
6187: LD_INT 4
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 56
6196: PUSH
6197: EMPTY
6198: LIST
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: PPUSH
6205: CALL_OW 69
6209: AND
6210: IFFALSE 6303
6212: GO 6214
6214: DISABLE
6215: LD_INT 0
6217: PPUSH
// begin enable ;
6218: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6219: LD_ADDR_VAR 0 1
6223: PUSH
6224: LD_INT 22
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 25
6236: PUSH
6237: LD_INT 4
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 56
6246: PUSH
6247: EMPTY
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: LIST
6254: PPUSH
6255: CALL_OW 69
6259: PUSH
6260: FOR_IN
6261: IFFALSE 6301
// if not GetTag ( i ) and not HasTask ( i ) then
6263: LD_VAR 0 1
6267: PPUSH
6268: CALL_OW 110
6272: NOT
6273: PUSH
6274: LD_VAR 0 1
6278: PPUSH
6279: CALL_OW 314
6283: NOT
6284: AND
6285: IFFALSE 6299
// ComEnterUnit ( i , us_lab ) ;
6287: LD_VAR 0 1
6291: PPUSH
6292: LD_INT 1
6294: PPUSH
6295: CALL_OW 120
6299: GO 6260
6301: POP
6302: POP
// end ;
6303: PPOPN 1
6305: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6306: LD_EXP 7
6310: NOT
6311: PUSH
6312: LD_INT 9
6314: PPUSH
6315: LD_INT 22
6317: PUSH
6318: LD_INT 1
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: LD_INT 21
6327: PUSH
6328: LD_INT 3
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PUSH
6335: LD_INT 3
6337: PUSH
6338: LD_INT 24
6340: PUSH
6341: LD_INT 1000
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: LIST
6356: PPUSH
6357: CALL_OW 70
6361: NOT
6362: AND
6363: PUSH
6364: LD_INT 22
6366: PUSH
6367: LD_INT 1
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PUSH
6374: LD_INT 25
6376: PUSH
6377: LD_INT 2
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: PUSH
6384: LD_INT 56
6386: PUSH
6387: EMPTY
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: PPUSH
6395: CALL_OW 69
6399: AND
6400: IFFALSE 6493
6402: GO 6404
6404: DISABLE
6405: LD_INT 0
6407: PPUSH
// begin enable ;
6408: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6409: LD_ADDR_VAR 0 1
6413: PUSH
6414: LD_INT 22
6416: PUSH
6417: LD_INT 1
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 2
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 56
6436: PUSH
6437: EMPTY
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: PPUSH
6445: CALL_OW 69
6449: PUSH
6450: FOR_IN
6451: IFFALSE 6491
// if not HasTask ( i ) and not GetTag ( i ) then
6453: LD_VAR 0 1
6457: PPUSH
6458: CALL_OW 314
6462: NOT
6463: PUSH
6464: LD_VAR 0 1
6468: PPUSH
6469: CALL_OW 110
6473: NOT
6474: AND
6475: IFFALSE 6489
// ComEnterUnit ( i , us_depot ) ;
6477: LD_VAR 0 1
6481: PPUSH
6482: LD_INT 5
6484: PPUSH
6485: CALL_OW 120
6489: GO 6450
6491: POP
6492: POP
// end ;
6493: PPOPN 1
6495: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6496: LD_EXP 9
6500: PUSH
6501: LD_INT 0
6503: LESSEQUAL
6504: PUSH
6505: LD_EXP 18
6509: PPUSH
6510: CALL_OW 301
6514: OR
6515: PUSH
6516: LD_INT 22
6518: PUSH
6519: LD_INT 1
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: LD_INT 25
6528: PUSH
6529: LD_INT 2
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PPUSH
6540: CALL_OW 69
6544: AND
6545: IFFALSE 6586
6547: GO 6549
6549: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6550: LD_INT 22
6552: PUSH
6553: LD_INT 1
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: LD_INT 25
6562: PUSH
6563: LD_INT 2
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PPUSH
6574: CALL_OW 69
6578: PPUSH
6579: LD_INT 1
6581: PPUSH
6582: CALL_OW 167
6586: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6587: LD_EXP 7
6591: NOT
6592: PUSH
6593: LD_INT 7
6595: PPUSH
6596: LD_INT 22
6598: PUSH
6599: LD_INT 7
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PPUSH
6606: CALL_OW 70
6610: AND
6611: IFFALSE 6702
6613: GO 6615
6615: DISABLE
6616: LD_INT 0
6618: PPUSH
// begin wait ( 0 0$2 ) ;
6619: LD_INT 70
6621: PPUSH
6622: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6626: LD_ADDR_VAR 0 1
6630: PUSH
6631: LD_INT 22
6633: PUSH
6634: LD_INT 1
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 25
6643: PUSH
6644: LD_INT 1
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PPUSH
6655: CALL_OW 69
6659: PUSH
6660: FOR_IN
6661: IFFALSE 6700
// begin if IsInUnit ( i ) then
6663: LD_VAR 0 1
6667: PPUSH
6668: CALL_OW 310
6672: IFFALSE 6683
// ComExitBuilding ( i ) ;
6674: LD_VAR 0 1
6678: PPUSH
6679: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6683: LD_VAR 0 1
6687: PPUSH
6688: LD_INT 92
6690: PPUSH
6691: LD_INT 78
6693: PPUSH
6694: CALL_OW 174
// end ;
6698: GO 6660
6700: POP
6701: POP
// end ; end_of_file
6702: PPOPN 1
6704: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6705: LD_VAR 0 1
6709: PPUSH
6710: LD_VAR 0 2
6714: PPUSH
6715: LD_VAR 0 3
6719: PPUSH
6720: CALL 1560 0 3
6724: PPOPN 3
6726: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6727: LD_EXP 14
6731: PPUSH
6732: CALL_OW 257
6736: PUSH
6737: LD_INT 4
6739: EQUAL
6740: PUSH
6741: LD_EXP 15
6745: PPUSH
6746: CALL_OW 257
6750: PUSH
6751: LD_INT 4
6753: EQUAL
6754: OR
6755: PUSH
6756: LD_INT 22
6758: PUSH
6759: LD_INT 7
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: LD_INT 21
6768: PUSH
6769: LD_INT 3
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PPUSH
6780: CALL_OW 69
6784: OR
6785: IFFALSE 6789
// exit ;
6787: GO 6827
// if un = JMM then
6789: LD_VAR 0 1
6793: PUSH
6794: LD_EXP 14
6798: EQUAL
6799: IFFALSE 6808
// YouLost ( JMM ) ;
6801: LD_STRING JMM
6803: PPUSH
6804: CALL_OW 104
// if un = Burlak then
6808: LD_VAR 0 1
6812: PUSH
6813: LD_EXP 15
6817: EQUAL
6818: IFFALSE 6827
// YouLost ( Burlak ) ;
6820: LD_STRING Burlak
6822: PPUSH
6823: CALL_OW 104
// end ;
6827: PPOPN 1
6829: END
// on UnitDestroyed ( un ) do begin if un = JMM then
6830: LD_VAR 0 1
6834: PUSH
6835: LD_EXP 14
6839: EQUAL
6840: IFFALSE 6849
// YouLost ( JMM ) ;
6842: LD_STRING JMM
6844: PPUSH
6845: CALL_OW 104
// if un = Burlak then
6849: LD_VAR 0 1
6853: PUSH
6854: LD_EXP 15
6858: EQUAL
6859: IFFALSE 6868
// YouLost ( Burlak ) ;
6861: LD_STRING Burlak
6863: PPUSH
6864: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
6868: LD_VAR 0 1
6872: PUSH
6873: LD_INT 21
6875: PUSH
6876: LD_INT 1
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: LD_INT 23
6885: PUSH
6886: LD_INT 1
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PPUSH
6897: CALL_OW 69
6901: IN
6902: IFFALSE 6918
// killCounter := killCounter + 1 ;
6904: LD_ADDR_EXP 12
6908: PUSH
6909: LD_EXP 12
6913: PUSH
6914: LD_INT 1
6916: PLUS
6917: ST_TO_ADDR
// end ;
6918: PPOPN 1
6920: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6921: LD_VAR 0 2
6925: PUSH
6926: LD_INT 7
6928: EQUAL
6929: PUSH
6930: LD_VAR 0 1
6934: PUSH
6935: LD_INT 2
6937: PUSH
6938: LD_INT 30
6940: PUSH
6941: LD_INT 31
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 30
6950: PUSH
6951: LD_INT 32
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 30
6960: PUSH
6961: LD_INT 33
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: PPUSH
6974: CALL_OW 69
6978: IN
6979: AND
6980: IFFALSE 6996
// bunkerCounter := bunkerCounter + 1 ;
6982: LD_ADDR_EXP 13
6986: PUSH
6987: LD_EXP 13
6991: PUSH
6992: LD_INT 1
6994: PLUS
6995: ST_TO_ADDR
// end ;
6996: PPOPN 3
6998: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 255
7008: PUSH
7009: LD_INT 7
7011: EQUAL
7012: IFFALSE 7022
// artifactPickedUp := true ;
7014: LD_ADDR_EXP 6
7018: PUSH
7019: LD_INT 1
7021: ST_TO_ADDR
// end ;
7022: PPOPN 2
7024: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7025: LD_ADDR_EXP 6
7029: PUSH
7030: LD_INT 0
7032: ST_TO_ADDR
7033: PPOPN 2
7035: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) <> 1 then
7036: LD_VAR 0 1
7040: PPUSH
7041: CALL_OW 255
7045: PUSH
7046: LD_INT 1
7048: NONEQUAL
7049: IFFALSE 7053
// exit ;
7051: GO 7100
// wait ( 0 0$5 ) ;
7053: LD_INT 175
7055: PPUSH
7056: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7060: LD_VAR 0 1
7064: PPUSH
7065: CALL_OW 263
7069: PUSH
7070: LD_INT 2
7072: EQUAL
7073: IFFALSE 7084
// Connect ( vehicle ) ;
7075: LD_VAR 0 1
7079: PPUSH
7080: CALL 32434 0 1
// vehGuard := vehGuard ^ vehicle ;
7084: LD_ADDR_EXP 23
7088: PUSH
7089: LD_EXP 23
7093: PUSH
7094: LD_VAR 0 1
7098: ADD
7099: ST_TO_ADDR
// end ;
7100: PPOPN 2
7102: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7103: LD_VAR 0 1
7107: PUSH
7108: LD_INT 1
7110: EQUAL
7111: PUSH
7112: LD_EXP 7
7116: NOT
7117: AND
7118: IFFALSE 7153
// begin planCaptured := true ;
7120: LD_ADDR_EXP 7
7124: PUSH
7125: LD_INT 1
7127: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7128: LD_STRING MEnd
7130: PPUSH
7131: CALL_OW 337
// canEnd := true ;
7135: LD_ADDR_EXP 10
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// missionTime := tick ;
7143: LD_ADDR_EXP 11
7147: PUSH
7148: LD_OWVAR 1
7152: ST_TO_ADDR
// end ; end ;
7153: PPOPN 3
7155: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7156: LD_VAR 0 1
7160: PPUSH
7161: CALL 20614 0 1
// end ; end_of_file
7165: PPOPN 1
7167: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7168: LD_INT 0
7170: PPUSH
// ar_miner := 81 ;
7171: LD_ADDR_EXP 31
7175: PUSH
7176: LD_INT 81
7178: ST_TO_ADDR
// ar_crane := 88 ;
7179: LD_ADDR_EXP 30
7183: PUSH
7184: LD_INT 88
7186: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7187: LD_ADDR_EXP 25
7191: PUSH
7192: LD_INT 89
7194: ST_TO_ADDR
// us_hack := 99 ;
7195: LD_ADDR_EXP 26
7199: PUSH
7200: LD_INT 99
7202: ST_TO_ADDR
// us_artillery := 97 ;
7203: LD_ADDR_EXP 27
7207: PUSH
7208: LD_INT 97
7210: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7211: LD_ADDR_EXP 28
7215: PUSH
7216: LD_INT 91
7218: ST_TO_ADDR
// ar_mortar := 92 ;
7219: LD_ADDR_EXP 29
7223: PUSH
7224: LD_INT 92
7226: ST_TO_ADDR
// ru_radar := 98 ;
7227: LD_ADDR_EXP 24
7231: PUSH
7232: LD_INT 98
7234: ST_TO_ADDR
// tech_Artillery := 80 ;
7235: LD_ADDR_EXP 32
7239: PUSH
7240: LD_INT 80
7242: ST_TO_ADDR
// tech_RadMat := 81 ;
7243: LD_ADDR_EXP 33
7247: PUSH
7248: LD_INT 81
7250: ST_TO_ADDR
// tech_BasicTools := 82 ;
7251: LD_ADDR_EXP 34
7255: PUSH
7256: LD_INT 82
7258: ST_TO_ADDR
// tech_Cargo := 83 ;
7259: LD_ADDR_EXP 35
7263: PUSH
7264: LD_INT 83
7266: ST_TO_ADDR
// tech_Track := 84 ;
7267: LD_ADDR_EXP 36
7271: PUSH
7272: LD_INT 84
7274: ST_TO_ADDR
// tech_Crane := 85 ;
7275: LD_ADDR_EXP 37
7279: PUSH
7280: LD_INT 85
7282: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7283: LD_ADDR_EXP 38
7287: PUSH
7288: LD_INT 86
7290: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7291: LD_ADDR_EXP 39
7295: PUSH
7296: LD_INT 87
7298: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
7299: LD_ADDR_EXP 40
7303: PUSH
7304: LD_INT 88
7306: ST_TO_ADDR
// class_mastodont := 31 ;
7307: LD_ADDR_EXP 41
7311: PUSH
7312: LD_INT 31
7314: ST_TO_ADDR
// class_horse := 21 ;
7315: LD_ADDR_EXP 42
7319: PUSH
7320: LD_INT 21
7322: ST_TO_ADDR
// end ;
7323: LD_VAR 0 1
7327: RET
// every 1 do
7328: GO 7330
7330: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7331: CALL 7168 0 0
7335: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7336: LD_INT 0
7338: PPUSH
// if p2 = 100 then
7339: LD_VAR 0 2
7343: PUSH
7344: LD_INT 100
7346: EQUAL
7347: IFFALSE 8296
// begin if not StreamModeActive then
7349: LD_EXP 43
7353: NOT
7354: IFFALSE 7364
// StreamModeActive := true ;
7356: LD_ADDR_EXP 43
7360: PUSH
7361: LD_INT 1
7363: ST_TO_ADDR
// if p3 = 0 then
7364: LD_VAR 0 3
7368: PUSH
7369: LD_INT 0
7371: EQUAL
7372: IFFALSE 7378
// InitStreamMode ;
7374: CALL 8456 0 0
// if p3 = 1 then
7378: LD_VAR 0 3
7382: PUSH
7383: LD_INT 1
7385: EQUAL
7386: IFFALSE 7396
// sRocket := true ;
7388: LD_ADDR_EXP 48
7392: PUSH
7393: LD_INT 1
7395: ST_TO_ADDR
// if p3 = 2 then
7396: LD_VAR 0 3
7400: PUSH
7401: LD_INT 2
7403: EQUAL
7404: IFFALSE 7414
// sSpeed := true ;
7406: LD_ADDR_EXP 47
7410: PUSH
7411: LD_INT 1
7413: ST_TO_ADDR
// if p3 = 3 then
7414: LD_VAR 0 3
7418: PUSH
7419: LD_INT 3
7421: EQUAL
7422: IFFALSE 7432
// sEngine := true ;
7424: LD_ADDR_EXP 49
7428: PUSH
7429: LD_INT 1
7431: ST_TO_ADDR
// if p3 = 4 then
7432: LD_VAR 0 3
7436: PUSH
7437: LD_INT 4
7439: EQUAL
7440: IFFALSE 7450
// sSpec := true ;
7442: LD_ADDR_EXP 46
7446: PUSH
7447: LD_INT 1
7449: ST_TO_ADDR
// if p3 = 5 then
7450: LD_VAR 0 3
7454: PUSH
7455: LD_INT 5
7457: EQUAL
7458: IFFALSE 7468
// sLevel := true ;
7460: LD_ADDR_EXP 50
7464: PUSH
7465: LD_INT 1
7467: ST_TO_ADDR
// if p3 = 6 then
7468: LD_VAR 0 3
7472: PUSH
7473: LD_INT 6
7475: EQUAL
7476: IFFALSE 7486
// sArmoury := true ;
7478: LD_ADDR_EXP 51
7482: PUSH
7483: LD_INT 1
7485: ST_TO_ADDR
// if p3 = 7 then
7486: LD_VAR 0 3
7490: PUSH
7491: LD_INT 7
7493: EQUAL
7494: IFFALSE 7504
// sRadar := true ;
7496: LD_ADDR_EXP 52
7500: PUSH
7501: LD_INT 1
7503: ST_TO_ADDR
// if p3 = 8 then
7504: LD_VAR 0 3
7508: PUSH
7509: LD_INT 8
7511: EQUAL
7512: IFFALSE 7522
// sBunker := true ;
7514: LD_ADDR_EXP 53
7518: PUSH
7519: LD_INT 1
7521: ST_TO_ADDR
// if p3 = 9 then
7522: LD_VAR 0 3
7526: PUSH
7527: LD_INT 9
7529: EQUAL
7530: IFFALSE 7540
// sHack := true ;
7532: LD_ADDR_EXP 54
7536: PUSH
7537: LD_INT 1
7539: ST_TO_ADDR
// if p3 = 10 then
7540: LD_VAR 0 3
7544: PUSH
7545: LD_INT 10
7547: EQUAL
7548: IFFALSE 7558
// sFire := true ;
7550: LD_ADDR_EXP 55
7554: PUSH
7555: LD_INT 1
7557: ST_TO_ADDR
// if p3 = 11 then
7558: LD_VAR 0 3
7562: PUSH
7563: LD_INT 11
7565: EQUAL
7566: IFFALSE 7576
// sRefresh := true ;
7568: LD_ADDR_EXP 56
7572: PUSH
7573: LD_INT 1
7575: ST_TO_ADDR
// if p3 = 12 then
7576: LD_VAR 0 3
7580: PUSH
7581: LD_INT 12
7583: EQUAL
7584: IFFALSE 7594
// sExp := true ;
7586: LD_ADDR_EXP 57
7590: PUSH
7591: LD_INT 1
7593: ST_TO_ADDR
// if p3 = 13 then
7594: LD_VAR 0 3
7598: PUSH
7599: LD_INT 13
7601: EQUAL
7602: IFFALSE 7612
// sDepot := true ;
7604: LD_ADDR_EXP 58
7608: PUSH
7609: LD_INT 1
7611: ST_TO_ADDR
// if p3 = 14 then
7612: LD_VAR 0 3
7616: PUSH
7617: LD_INT 14
7619: EQUAL
7620: IFFALSE 7630
// sFlag := true ;
7622: LD_ADDR_EXP 59
7626: PUSH
7627: LD_INT 1
7629: ST_TO_ADDR
// if p3 = 15 then
7630: LD_VAR 0 3
7634: PUSH
7635: LD_INT 15
7637: EQUAL
7638: IFFALSE 7648
// sKamikadze := true ;
7640: LD_ADDR_EXP 67
7644: PUSH
7645: LD_INT 1
7647: ST_TO_ADDR
// if p3 = 16 then
7648: LD_VAR 0 3
7652: PUSH
7653: LD_INT 16
7655: EQUAL
7656: IFFALSE 7666
// sTroll := true ;
7658: LD_ADDR_EXP 68
7662: PUSH
7663: LD_INT 1
7665: ST_TO_ADDR
// if p3 = 17 then
7666: LD_VAR 0 3
7670: PUSH
7671: LD_INT 17
7673: EQUAL
7674: IFFALSE 7684
// sSlow := true ;
7676: LD_ADDR_EXP 69
7680: PUSH
7681: LD_INT 1
7683: ST_TO_ADDR
// if p3 = 18 then
7684: LD_VAR 0 3
7688: PUSH
7689: LD_INT 18
7691: EQUAL
7692: IFFALSE 7702
// sLack := true ;
7694: LD_ADDR_EXP 70
7698: PUSH
7699: LD_INT 1
7701: ST_TO_ADDR
// if p3 = 19 then
7702: LD_VAR 0 3
7706: PUSH
7707: LD_INT 19
7709: EQUAL
7710: IFFALSE 7720
// sTank := true ;
7712: LD_ADDR_EXP 72
7716: PUSH
7717: LD_INT 1
7719: ST_TO_ADDR
// if p3 = 20 then
7720: LD_VAR 0 3
7724: PUSH
7725: LD_INT 20
7727: EQUAL
7728: IFFALSE 7738
// sRemote := true ;
7730: LD_ADDR_EXP 73
7734: PUSH
7735: LD_INT 1
7737: ST_TO_ADDR
// if p3 = 21 then
7738: LD_VAR 0 3
7742: PUSH
7743: LD_INT 21
7745: EQUAL
7746: IFFALSE 7756
// sPowell := true ;
7748: LD_ADDR_EXP 74
7752: PUSH
7753: LD_INT 1
7755: ST_TO_ADDR
// if p3 = 22 then
7756: LD_VAR 0 3
7760: PUSH
7761: LD_INT 22
7763: EQUAL
7764: IFFALSE 7774
// sTeleport := true ;
7766: LD_ADDR_EXP 77
7770: PUSH
7771: LD_INT 1
7773: ST_TO_ADDR
// if p3 = 23 then
7774: LD_VAR 0 3
7778: PUSH
7779: LD_INT 23
7781: EQUAL
7782: IFFALSE 7792
// sOilTower := true ;
7784: LD_ADDR_EXP 79
7788: PUSH
7789: LD_INT 1
7791: ST_TO_ADDR
// if p3 = 24 then
7792: LD_VAR 0 3
7796: PUSH
7797: LD_INT 24
7799: EQUAL
7800: IFFALSE 7810
// sShovel := true ;
7802: LD_ADDR_EXP 80
7806: PUSH
7807: LD_INT 1
7809: ST_TO_ADDR
// if p3 = 25 then
7810: LD_VAR 0 3
7814: PUSH
7815: LD_INT 25
7817: EQUAL
7818: IFFALSE 7828
// sSheik := true ;
7820: LD_ADDR_EXP 81
7824: PUSH
7825: LD_INT 1
7827: ST_TO_ADDR
// if p3 = 26 then
7828: LD_VAR 0 3
7832: PUSH
7833: LD_INT 26
7835: EQUAL
7836: IFFALSE 7846
// sEarthquake := true ;
7838: LD_ADDR_EXP 83
7842: PUSH
7843: LD_INT 1
7845: ST_TO_ADDR
// if p3 = 27 then
7846: LD_VAR 0 3
7850: PUSH
7851: LD_INT 27
7853: EQUAL
7854: IFFALSE 7864
// sAI := true ;
7856: LD_ADDR_EXP 84
7860: PUSH
7861: LD_INT 1
7863: ST_TO_ADDR
// if p3 = 28 then
7864: LD_VAR 0 3
7868: PUSH
7869: LD_INT 28
7871: EQUAL
7872: IFFALSE 7882
// sCargo := true ;
7874: LD_ADDR_EXP 87
7878: PUSH
7879: LD_INT 1
7881: ST_TO_ADDR
// if p3 = 29 then
7882: LD_VAR 0 3
7886: PUSH
7887: LD_INT 29
7889: EQUAL
7890: IFFALSE 7900
// sDLaser := true ;
7892: LD_ADDR_EXP 88
7896: PUSH
7897: LD_INT 1
7899: ST_TO_ADDR
// if p3 = 30 then
7900: LD_VAR 0 3
7904: PUSH
7905: LD_INT 30
7907: EQUAL
7908: IFFALSE 7918
// sExchange := true ;
7910: LD_ADDR_EXP 89
7914: PUSH
7915: LD_INT 1
7917: ST_TO_ADDR
// if p3 = 31 then
7918: LD_VAR 0 3
7922: PUSH
7923: LD_INT 31
7925: EQUAL
7926: IFFALSE 7936
// sFac := true ;
7928: LD_ADDR_EXP 90
7932: PUSH
7933: LD_INT 1
7935: ST_TO_ADDR
// if p3 = 32 then
7936: LD_VAR 0 3
7940: PUSH
7941: LD_INT 32
7943: EQUAL
7944: IFFALSE 7954
// sPower := true ;
7946: LD_ADDR_EXP 91
7950: PUSH
7951: LD_INT 1
7953: ST_TO_ADDR
// if p3 = 33 then
7954: LD_VAR 0 3
7958: PUSH
7959: LD_INT 33
7961: EQUAL
7962: IFFALSE 7972
// sRandom := true ;
7964: LD_ADDR_EXP 92
7968: PUSH
7969: LD_INT 1
7971: ST_TO_ADDR
// if p3 = 34 then
7972: LD_VAR 0 3
7976: PUSH
7977: LD_INT 34
7979: EQUAL
7980: IFFALSE 7990
// sShield := true ;
7982: LD_ADDR_EXP 93
7986: PUSH
7987: LD_INT 1
7989: ST_TO_ADDR
// if p3 = 35 then
7990: LD_VAR 0 3
7994: PUSH
7995: LD_INT 35
7997: EQUAL
7998: IFFALSE 8008
// sTime := true ;
8000: LD_ADDR_EXP 94
8004: PUSH
8005: LD_INT 1
8007: ST_TO_ADDR
// if p3 = 36 then
8008: LD_VAR 0 3
8012: PUSH
8013: LD_INT 36
8015: EQUAL
8016: IFFALSE 8026
// sTools := true ;
8018: LD_ADDR_EXP 95
8022: PUSH
8023: LD_INT 1
8025: ST_TO_ADDR
// if p3 = 101 then
8026: LD_VAR 0 3
8030: PUSH
8031: LD_INT 101
8033: EQUAL
8034: IFFALSE 8044
// sSold := true ;
8036: LD_ADDR_EXP 60
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// if p3 = 102 then
8044: LD_VAR 0 3
8048: PUSH
8049: LD_INT 102
8051: EQUAL
8052: IFFALSE 8062
// sDiff := true ;
8054: LD_ADDR_EXP 61
8058: PUSH
8059: LD_INT 1
8061: ST_TO_ADDR
// if p3 = 103 then
8062: LD_VAR 0 3
8066: PUSH
8067: LD_INT 103
8069: EQUAL
8070: IFFALSE 8080
// sFog := true ;
8072: LD_ADDR_EXP 64
8076: PUSH
8077: LD_INT 1
8079: ST_TO_ADDR
// if p3 = 104 then
8080: LD_VAR 0 3
8084: PUSH
8085: LD_INT 104
8087: EQUAL
8088: IFFALSE 8098
// sReset := true ;
8090: LD_ADDR_EXP 65
8094: PUSH
8095: LD_INT 1
8097: ST_TO_ADDR
// if p3 = 105 then
8098: LD_VAR 0 3
8102: PUSH
8103: LD_INT 105
8105: EQUAL
8106: IFFALSE 8116
// sSun := true ;
8108: LD_ADDR_EXP 66
8112: PUSH
8113: LD_INT 1
8115: ST_TO_ADDR
// if p3 = 106 then
8116: LD_VAR 0 3
8120: PUSH
8121: LD_INT 106
8123: EQUAL
8124: IFFALSE 8134
// sTiger := true ;
8126: LD_ADDR_EXP 62
8130: PUSH
8131: LD_INT 1
8133: ST_TO_ADDR
// if p3 = 107 then
8134: LD_VAR 0 3
8138: PUSH
8139: LD_INT 107
8141: EQUAL
8142: IFFALSE 8152
// sBomb := true ;
8144: LD_ADDR_EXP 63
8148: PUSH
8149: LD_INT 1
8151: ST_TO_ADDR
// if p3 = 108 then
8152: LD_VAR 0 3
8156: PUSH
8157: LD_INT 108
8159: EQUAL
8160: IFFALSE 8170
// sWound := true ;
8162: LD_ADDR_EXP 71
8166: PUSH
8167: LD_INT 1
8169: ST_TO_ADDR
// if p3 = 109 then
8170: LD_VAR 0 3
8174: PUSH
8175: LD_INT 109
8177: EQUAL
8178: IFFALSE 8188
// sBetray := true ;
8180: LD_ADDR_EXP 75
8184: PUSH
8185: LD_INT 1
8187: ST_TO_ADDR
// if p3 = 110 then
8188: LD_VAR 0 3
8192: PUSH
8193: LD_INT 110
8195: EQUAL
8196: IFFALSE 8206
// sContamin := true ;
8198: LD_ADDR_EXP 76
8202: PUSH
8203: LD_INT 1
8205: ST_TO_ADDR
// if p3 = 111 then
8206: LD_VAR 0 3
8210: PUSH
8211: LD_INT 111
8213: EQUAL
8214: IFFALSE 8224
// sOil := true ;
8216: LD_ADDR_EXP 78
8220: PUSH
8221: LD_INT 1
8223: ST_TO_ADDR
// if p3 = 112 then
8224: LD_VAR 0 3
8228: PUSH
8229: LD_INT 112
8231: EQUAL
8232: IFFALSE 8242
// sStu := true ;
8234: LD_ADDR_EXP 82
8238: PUSH
8239: LD_INT 1
8241: ST_TO_ADDR
// if p3 = 113 then
8242: LD_VAR 0 3
8246: PUSH
8247: LD_INT 113
8249: EQUAL
8250: IFFALSE 8260
// sBazooka := true ;
8252: LD_ADDR_EXP 85
8256: PUSH
8257: LD_INT 1
8259: ST_TO_ADDR
// if p3 = 114 then
8260: LD_VAR 0 3
8264: PUSH
8265: LD_INT 114
8267: EQUAL
8268: IFFALSE 8278
// sMortar := true ;
8270: LD_ADDR_EXP 86
8274: PUSH
8275: LD_INT 1
8277: ST_TO_ADDR
// if p3 = 115 then
8278: LD_VAR 0 3
8282: PUSH
8283: LD_INT 115
8285: EQUAL
8286: IFFALSE 8296
// sRanger := true ;
8288: LD_ADDR_EXP 96
8292: PUSH
8293: LD_INT 1
8295: ST_TO_ADDR
// end ; if p2 = 101 then
8296: LD_VAR 0 2
8300: PUSH
8301: LD_INT 101
8303: EQUAL
8304: IFFALSE 8432
// begin case p3 of 1 :
8306: LD_VAR 0 3
8310: PUSH
8311: LD_INT 1
8313: DOUBLE
8314: EQUAL
8315: IFTRUE 8319
8317: GO 8326
8319: POP
// hHackUnlimitedResources ; 2 :
8320: CALL 19469 0 0
8324: GO 8432
8326: LD_INT 2
8328: DOUBLE
8329: EQUAL
8330: IFTRUE 8334
8332: GO 8341
8334: POP
// hHackSetLevel10 ; 3 :
8335: CALL 19602 0 0
8339: GO 8432
8341: LD_INT 3
8343: DOUBLE
8344: EQUAL
8345: IFTRUE 8349
8347: GO 8356
8349: POP
// hHackSetLevel10YourUnits ; 4 :
8350: CALL 19687 0 0
8354: GO 8432
8356: LD_INT 4
8358: DOUBLE
8359: EQUAL
8360: IFTRUE 8364
8362: GO 8371
8364: POP
// hHackInvincible ; 5 :
8365: CALL 20135 0 0
8369: GO 8432
8371: LD_INT 5
8373: DOUBLE
8374: EQUAL
8375: IFTRUE 8379
8377: GO 8386
8379: POP
// hHackInvisible ; 6 :
8380: CALL 20246 0 0
8384: GO 8432
8386: LD_INT 6
8388: DOUBLE
8389: EQUAL
8390: IFTRUE 8394
8392: GO 8401
8394: POP
// hHackChangeYourSide ; 7 :
8395: CALL 20303 0 0
8399: GO 8432
8401: LD_INT 7
8403: DOUBLE
8404: EQUAL
8405: IFTRUE 8409
8407: GO 8416
8409: POP
// hHackChangeUnitSide ; 8 :
8410: CALL 20345 0 0
8414: GO 8432
8416: LD_INT 8
8418: DOUBLE
8419: EQUAL
8420: IFTRUE 8424
8422: GO 8431
8424: POP
// hHackFog ; end ;
8425: CALL 20446 0 0
8429: GO 8432
8431: POP
// end ; end ;
8432: LD_VAR 0 7
8436: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8437: GO 8439
8439: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8440: LD_STRING initStreamRollete();
8442: PPUSH
8443: CALL_OW 559
// InitStreamMode ;
8447: CALL 8456 0 0
// DefineStreamItems ( ) ;
8451: CALL 8896 0 0
// end ;
8455: END
// function InitStreamMode ; begin
8456: LD_INT 0
8458: PPUSH
// streamModeActive := false ;
8459: LD_ADDR_EXP 43
8463: PUSH
8464: LD_INT 0
8466: ST_TO_ADDR
// normalCounter := 36 ;
8467: LD_ADDR_EXP 44
8471: PUSH
8472: LD_INT 36
8474: ST_TO_ADDR
// hardcoreCounter := 16 ;
8475: LD_ADDR_EXP 45
8479: PUSH
8480: LD_INT 16
8482: ST_TO_ADDR
// sRocket := false ;
8483: LD_ADDR_EXP 48
8487: PUSH
8488: LD_INT 0
8490: ST_TO_ADDR
// sSpeed := false ;
8491: LD_ADDR_EXP 47
8495: PUSH
8496: LD_INT 0
8498: ST_TO_ADDR
// sEngine := false ;
8499: LD_ADDR_EXP 49
8503: PUSH
8504: LD_INT 0
8506: ST_TO_ADDR
// sSpec := false ;
8507: LD_ADDR_EXP 46
8511: PUSH
8512: LD_INT 0
8514: ST_TO_ADDR
// sLevel := false ;
8515: LD_ADDR_EXP 50
8519: PUSH
8520: LD_INT 0
8522: ST_TO_ADDR
// sArmoury := false ;
8523: LD_ADDR_EXP 51
8527: PUSH
8528: LD_INT 0
8530: ST_TO_ADDR
// sRadar := false ;
8531: LD_ADDR_EXP 52
8535: PUSH
8536: LD_INT 0
8538: ST_TO_ADDR
// sBunker := false ;
8539: LD_ADDR_EXP 53
8543: PUSH
8544: LD_INT 0
8546: ST_TO_ADDR
// sHack := false ;
8547: LD_ADDR_EXP 54
8551: PUSH
8552: LD_INT 0
8554: ST_TO_ADDR
// sFire := false ;
8555: LD_ADDR_EXP 55
8559: PUSH
8560: LD_INT 0
8562: ST_TO_ADDR
// sRefresh := false ;
8563: LD_ADDR_EXP 56
8567: PUSH
8568: LD_INT 0
8570: ST_TO_ADDR
// sExp := false ;
8571: LD_ADDR_EXP 57
8575: PUSH
8576: LD_INT 0
8578: ST_TO_ADDR
// sDepot := false ;
8579: LD_ADDR_EXP 58
8583: PUSH
8584: LD_INT 0
8586: ST_TO_ADDR
// sFlag := false ;
8587: LD_ADDR_EXP 59
8591: PUSH
8592: LD_INT 0
8594: ST_TO_ADDR
// sKamikadze := false ;
8595: LD_ADDR_EXP 67
8599: PUSH
8600: LD_INT 0
8602: ST_TO_ADDR
// sTroll := false ;
8603: LD_ADDR_EXP 68
8607: PUSH
8608: LD_INT 0
8610: ST_TO_ADDR
// sSlow := false ;
8611: LD_ADDR_EXP 69
8615: PUSH
8616: LD_INT 0
8618: ST_TO_ADDR
// sLack := false ;
8619: LD_ADDR_EXP 70
8623: PUSH
8624: LD_INT 0
8626: ST_TO_ADDR
// sTank := false ;
8627: LD_ADDR_EXP 72
8631: PUSH
8632: LD_INT 0
8634: ST_TO_ADDR
// sRemote := false ;
8635: LD_ADDR_EXP 73
8639: PUSH
8640: LD_INT 0
8642: ST_TO_ADDR
// sPowell := false ;
8643: LD_ADDR_EXP 74
8647: PUSH
8648: LD_INT 0
8650: ST_TO_ADDR
// sTeleport := false ;
8651: LD_ADDR_EXP 77
8655: PUSH
8656: LD_INT 0
8658: ST_TO_ADDR
// sOilTower := false ;
8659: LD_ADDR_EXP 79
8663: PUSH
8664: LD_INT 0
8666: ST_TO_ADDR
// sShovel := false ;
8667: LD_ADDR_EXP 80
8671: PUSH
8672: LD_INT 0
8674: ST_TO_ADDR
// sSheik := false ;
8675: LD_ADDR_EXP 81
8679: PUSH
8680: LD_INT 0
8682: ST_TO_ADDR
// sEarthquake := false ;
8683: LD_ADDR_EXP 83
8687: PUSH
8688: LD_INT 0
8690: ST_TO_ADDR
// sAI := false ;
8691: LD_ADDR_EXP 84
8695: PUSH
8696: LD_INT 0
8698: ST_TO_ADDR
// sCargo := false ;
8699: LD_ADDR_EXP 87
8703: PUSH
8704: LD_INT 0
8706: ST_TO_ADDR
// sDLaser := false ;
8707: LD_ADDR_EXP 88
8711: PUSH
8712: LD_INT 0
8714: ST_TO_ADDR
// sExchange := false ;
8715: LD_ADDR_EXP 89
8719: PUSH
8720: LD_INT 0
8722: ST_TO_ADDR
// sFac := false ;
8723: LD_ADDR_EXP 90
8727: PUSH
8728: LD_INT 0
8730: ST_TO_ADDR
// sPower := false ;
8731: LD_ADDR_EXP 91
8735: PUSH
8736: LD_INT 0
8738: ST_TO_ADDR
// sRandom := false ;
8739: LD_ADDR_EXP 92
8743: PUSH
8744: LD_INT 0
8746: ST_TO_ADDR
// sShield := false ;
8747: LD_ADDR_EXP 93
8751: PUSH
8752: LD_INT 0
8754: ST_TO_ADDR
// sTime := false ;
8755: LD_ADDR_EXP 94
8759: PUSH
8760: LD_INT 0
8762: ST_TO_ADDR
// sTools := false ;
8763: LD_ADDR_EXP 95
8767: PUSH
8768: LD_INT 0
8770: ST_TO_ADDR
// sSold := false ;
8771: LD_ADDR_EXP 60
8775: PUSH
8776: LD_INT 0
8778: ST_TO_ADDR
// sDiff := false ;
8779: LD_ADDR_EXP 61
8783: PUSH
8784: LD_INT 0
8786: ST_TO_ADDR
// sFog := false ;
8787: LD_ADDR_EXP 64
8791: PUSH
8792: LD_INT 0
8794: ST_TO_ADDR
// sReset := false ;
8795: LD_ADDR_EXP 65
8799: PUSH
8800: LD_INT 0
8802: ST_TO_ADDR
// sSun := false ;
8803: LD_ADDR_EXP 66
8807: PUSH
8808: LD_INT 0
8810: ST_TO_ADDR
// sTiger := false ;
8811: LD_ADDR_EXP 62
8815: PUSH
8816: LD_INT 0
8818: ST_TO_ADDR
// sBomb := false ;
8819: LD_ADDR_EXP 63
8823: PUSH
8824: LD_INT 0
8826: ST_TO_ADDR
// sWound := false ;
8827: LD_ADDR_EXP 71
8831: PUSH
8832: LD_INT 0
8834: ST_TO_ADDR
// sBetray := false ;
8835: LD_ADDR_EXP 75
8839: PUSH
8840: LD_INT 0
8842: ST_TO_ADDR
// sContamin := false ;
8843: LD_ADDR_EXP 76
8847: PUSH
8848: LD_INT 0
8850: ST_TO_ADDR
// sOil := false ;
8851: LD_ADDR_EXP 78
8855: PUSH
8856: LD_INT 0
8858: ST_TO_ADDR
// sStu := false ;
8859: LD_ADDR_EXP 82
8863: PUSH
8864: LD_INT 0
8866: ST_TO_ADDR
// sBazooka := false ;
8867: LD_ADDR_EXP 85
8871: PUSH
8872: LD_INT 0
8874: ST_TO_ADDR
// sMortar := false ;
8875: LD_ADDR_EXP 86
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// sRanger := false ;
8883: LD_ADDR_EXP 96
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// end ;
8891: LD_VAR 0 1
8895: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8896: LD_INT 0
8898: PPUSH
8899: PPUSH
8900: PPUSH
8901: PPUSH
8902: PPUSH
// result := [ ] ;
8903: LD_ADDR_VAR 0 1
8907: PUSH
8908: EMPTY
8909: ST_TO_ADDR
// if campaign_id = 1 then
8910: LD_OWVAR 69
8914: PUSH
8915: LD_INT 1
8917: EQUAL
8918: IFFALSE 11856
// begin case mission_number of 1 :
8920: LD_OWVAR 70
8924: PUSH
8925: LD_INT 1
8927: DOUBLE
8928: EQUAL
8929: IFTRUE 8933
8931: GO 8997
8933: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8934: LD_ADDR_VAR 0 1
8938: PUSH
8939: LD_INT 2
8941: PUSH
8942: LD_INT 4
8944: PUSH
8945: LD_INT 11
8947: PUSH
8948: LD_INT 12
8950: PUSH
8951: LD_INT 15
8953: PUSH
8954: LD_INT 16
8956: PUSH
8957: LD_INT 22
8959: PUSH
8960: LD_INT 23
8962: PUSH
8963: LD_INT 26
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: PUSH
8977: LD_INT 101
8979: PUSH
8980: LD_INT 102
8982: PUSH
8983: LD_INT 106
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: LIST
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: ST_TO_ADDR
8995: GO 11854
8997: LD_INT 2
8999: DOUBLE
9000: EQUAL
9001: IFTRUE 9005
9003: GO 9077
9005: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9006: LD_ADDR_VAR 0 1
9010: PUSH
9011: LD_INT 2
9013: PUSH
9014: LD_INT 4
9016: PUSH
9017: LD_INT 11
9019: PUSH
9020: LD_INT 12
9022: PUSH
9023: LD_INT 15
9025: PUSH
9026: LD_INT 16
9028: PUSH
9029: LD_INT 22
9031: PUSH
9032: LD_INT 23
9034: PUSH
9035: LD_INT 26
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 101
9051: PUSH
9052: LD_INT 102
9054: PUSH
9055: LD_INT 105
9057: PUSH
9058: LD_INT 106
9060: PUSH
9061: LD_INT 108
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: ST_TO_ADDR
9075: GO 11854
9077: LD_INT 3
9079: DOUBLE
9080: EQUAL
9081: IFTRUE 9085
9083: GO 9161
9085: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9086: LD_ADDR_VAR 0 1
9090: PUSH
9091: LD_INT 2
9093: PUSH
9094: LD_INT 4
9096: PUSH
9097: LD_INT 5
9099: PUSH
9100: LD_INT 11
9102: PUSH
9103: LD_INT 12
9105: PUSH
9106: LD_INT 15
9108: PUSH
9109: LD_INT 16
9111: PUSH
9112: LD_INT 22
9114: PUSH
9115: LD_INT 26
9117: PUSH
9118: LD_INT 36
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 101
9135: PUSH
9136: LD_INT 102
9138: PUSH
9139: LD_INT 105
9141: PUSH
9142: LD_INT 106
9144: PUSH
9145: LD_INT 108
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: ST_TO_ADDR
9159: GO 11854
9161: LD_INT 4
9163: DOUBLE
9164: EQUAL
9165: IFTRUE 9169
9167: GO 9253
9169: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9170: LD_ADDR_VAR 0 1
9174: PUSH
9175: LD_INT 2
9177: PUSH
9178: LD_INT 4
9180: PUSH
9181: LD_INT 5
9183: PUSH
9184: LD_INT 8
9186: PUSH
9187: LD_INT 11
9189: PUSH
9190: LD_INT 12
9192: PUSH
9193: LD_INT 15
9195: PUSH
9196: LD_INT 16
9198: PUSH
9199: LD_INT 22
9201: PUSH
9202: LD_INT 23
9204: PUSH
9205: LD_INT 26
9207: PUSH
9208: LD_INT 36
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: PUSH
9225: LD_INT 101
9227: PUSH
9228: LD_INT 102
9230: PUSH
9231: LD_INT 105
9233: PUSH
9234: LD_INT 106
9236: PUSH
9237: LD_INT 108
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: ST_TO_ADDR
9251: GO 11854
9253: LD_INT 5
9255: DOUBLE
9256: EQUAL
9257: IFTRUE 9261
9259: GO 9361
9261: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9262: LD_ADDR_VAR 0 1
9266: PUSH
9267: LD_INT 2
9269: PUSH
9270: LD_INT 4
9272: PUSH
9273: LD_INT 5
9275: PUSH
9276: LD_INT 6
9278: PUSH
9279: LD_INT 8
9281: PUSH
9282: LD_INT 11
9284: PUSH
9285: LD_INT 12
9287: PUSH
9288: LD_INT 15
9290: PUSH
9291: LD_INT 16
9293: PUSH
9294: LD_INT 22
9296: PUSH
9297: LD_INT 23
9299: PUSH
9300: LD_INT 25
9302: PUSH
9303: LD_INT 26
9305: PUSH
9306: LD_INT 36
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: PUSH
9325: LD_INT 101
9327: PUSH
9328: LD_INT 102
9330: PUSH
9331: LD_INT 105
9333: PUSH
9334: LD_INT 106
9336: PUSH
9337: LD_INT 108
9339: PUSH
9340: LD_INT 109
9342: PUSH
9343: LD_INT 112
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: ST_TO_ADDR
9359: GO 11854
9361: LD_INT 6
9363: DOUBLE
9364: EQUAL
9365: IFTRUE 9369
9367: GO 9489
9369: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9370: LD_ADDR_VAR 0 1
9374: PUSH
9375: LD_INT 2
9377: PUSH
9378: LD_INT 4
9380: PUSH
9381: LD_INT 5
9383: PUSH
9384: LD_INT 6
9386: PUSH
9387: LD_INT 8
9389: PUSH
9390: LD_INT 11
9392: PUSH
9393: LD_INT 12
9395: PUSH
9396: LD_INT 15
9398: PUSH
9399: LD_INT 16
9401: PUSH
9402: LD_INT 20
9404: PUSH
9405: LD_INT 21
9407: PUSH
9408: LD_INT 22
9410: PUSH
9411: LD_INT 23
9413: PUSH
9414: LD_INT 25
9416: PUSH
9417: LD_INT 26
9419: PUSH
9420: LD_INT 30
9422: PUSH
9423: LD_INT 31
9425: PUSH
9426: LD_INT 32
9428: PUSH
9429: LD_INT 36
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: PUSH
9453: LD_INT 101
9455: PUSH
9456: LD_INT 102
9458: PUSH
9459: LD_INT 105
9461: PUSH
9462: LD_INT 106
9464: PUSH
9465: LD_INT 108
9467: PUSH
9468: LD_INT 109
9470: PUSH
9471: LD_INT 112
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: ST_TO_ADDR
9487: GO 11854
9489: LD_INT 7
9491: DOUBLE
9492: EQUAL
9493: IFTRUE 9497
9495: GO 9597
9497: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9498: LD_ADDR_VAR 0 1
9502: PUSH
9503: LD_INT 2
9505: PUSH
9506: LD_INT 4
9508: PUSH
9509: LD_INT 5
9511: PUSH
9512: LD_INT 7
9514: PUSH
9515: LD_INT 11
9517: PUSH
9518: LD_INT 12
9520: PUSH
9521: LD_INT 15
9523: PUSH
9524: LD_INT 16
9526: PUSH
9527: LD_INT 20
9529: PUSH
9530: LD_INT 21
9532: PUSH
9533: LD_INT 22
9535: PUSH
9536: LD_INT 23
9538: PUSH
9539: LD_INT 25
9541: PUSH
9542: LD_INT 26
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: PUSH
9561: LD_INT 101
9563: PUSH
9564: LD_INT 102
9566: PUSH
9567: LD_INT 103
9569: PUSH
9570: LD_INT 105
9572: PUSH
9573: LD_INT 106
9575: PUSH
9576: LD_INT 108
9578: PUSH
9579: LD_INT 112
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: ST_TO_ADDR
9595: GO 11854
9597: LD_INT 8
9599: DOUBLE
9600: EQUAL
9601: IFTRUE 9605
9603: GO 9733
9605: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9606: LD_ADDR_VAR 0 1
9610: PUSH
9611: LD_INT 2
9613: PUSH
9614: LD_INT 4
9616: PUSH
9617: LD_INT 5
9619: PUSH
9620: LD_INT 6
9622: PUSH
9623: LD_INT 7
9625: PUSH
9626: LD_INT 8
9628: PUSH
9629: LD_INT 11
9631: PUSH
9632: LD_INT 12
9634: PUSH
9635: LD_INT 15
9637: PUSH
9638: LD_INT 16
9640: PUSH
9641: LD_INT 20
9643: PUSH
9644: LD_INT 21
9646: PUSH
9647: LD_INT 22
9649: PUSH
9650: LD_INT 23
9652: PUSH
9653: LD_INT 25
9655: PUSH
9656: LD_INT 26
9658: PUSH
9659: LD_INT 30
9661: PUSH
9662: LD_INT 31
9664: PUSH
9665: LD_INT 32
9667: PUSH
9668: LD_INT 36
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 101
9695: PUSH
9696: LD_INT 102
9698: PUSH
9699: LD_INT 103
9701: PUSH
9702: LD_INT 105
9704: PUSH
9705: LD_INT 106
9707: PUSH
9708: LD_INT 108
9710: PUSH
9711: LD_INT 109
9713: PUSH
9714: LD_INT 112
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: ST_TO_ADDR
9731: GO 11854
9733: LD_INT 9
9735: DOUBLE
9736: EQUAL
9737: IFTRUE 9741
9739: GO 9877
9741: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9742: LD_ADDR_VAR 0 1
9746: PUSH
9747: LD_INT 2
9749: PUSH
9750: LD_INT 4
9752: PUSH
9753: LD_INT 5
9755: PUSH
9756: LD_INT 6
9758: PUSH
9759: LD_INT 7
9761: PUSH
9762: LD_INT 8
9764: PUSH
9765: LD_INT 11
9767: PUSH
9768: LD_INT 12
9770: PUSH
9771: LD_INT 15
9773: PUSH
9774: LD_INT 16
9776: PUSH
9777: LD_INT 20
9779: PUSH
9780: LD_INT 21
9782: PUSH
9783: LD_INT 22
9785: PUSH
9786: LD_INT 23
9788: PUSH
9789: LD_INT 25
9791: PUSH
9792: LD_INT 26
9794: PUSH
9795: LD_INT 28
9797: PUSH
9798: LD_INT 30
9800: PUSH
9801: LD_INT 31
9803: PUSH
9804: LD_INT 32
9806: PUSH
9807: LD_INT 36
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 101
9835: PUSH
9836: LD_INT 102
9838: PUSH
9839: LD_INT 103
9841: PUSH
9842: LD_INT 105
9844: PUSH
9845: LD_INT 106
9847: PUSH
9848: LD_INT 108
9850: PUSH
9851: LD_INT 109
9853: PUSH
9854: LD_INT 112
9856: PUSH
9857: LD_INT 114
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: ST_TO_ADDR
9875: GO 11854
9877: LD_INT 10
9879: DOUBLE
9880: EQUAL
9881: IFTRUE 9885
9883: GO 10069
9885: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9886: LD_ADDR_VAR 0 1
9890: PUSH
9891: LD_INT 2
9893: PUSH
9894: LD_INT 4
9896: PUSH
9897: LD_INT 5
9899: PUSH
9900: LD_INT 6
9902: PUSH
9903: LD_INT 7
9905: PUSH
9906: LD_INT 8
9908: PUSH
9909: LD_INT 9
9911: PUSH
9912: LD_INT 10
9914: PUSH
9915: LD_INT 11
9917: PUSH
9918: LD_INT 12
9920: PUSH
9921: LD_INT 13
9923: PUSH
9924: LD_INT 14
9926: PUSH
9927: LD_INT 15
9929: PUSH
9930: LD_INT 16
9932: PUSH
9933: LD_INT 17
9935: PUSH
9936: LD_INT 18
9938: PUSH
9939: LD_INT 19
9941: PUSH
9942: LD_INT 20
9944: PUSH
9945: LD_INT 21
9947: PUSH
9948: LD_INT 22
9950: PUSH
9951: LD_INT 23
9953: PUSH
9954: LD_INT 24
9956: PUSH
9957: LD_INT 25
9959: PUSH
9960: LD_INT 26
9962: PUSH
9963: LD_INT 28
9965: PUSH
9966: LD_INT 30
9968: PUSH
9969: LD_INT 31
9971: PUSH
9972: LD_INT 32
9974: PUSH
9975: LD_INT 36
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: PUSH
10009: LD_INT 101
10011: PUSH
10012: LD_INT 102
10014: PUSH
10015: LD_INT 103
10017: PUSH
10018: LD_INT 104
10020: PUSH
10021: LD_INT 105
10023: PUSH
10024: LD_INT 106
10026: PUSH
10027: LD_INT 107
10029: PUSH
10030: LD_INT 108
10032: PUSH
10033: LD_INT 109
10035: PUSH
10036: LD_INT 110
10038: PUSH
10039: LD_INT 111
10041: PUSH
10042: LD_INT 112
10044: PUSH
10045: LD_INT 114
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: ST_TO_ADDR
10067: GO 11854
10069: LD_INT 11
10071: DOUBLE
10072: EQUAL
10073: IFTRUE 10077
10075: GO 10269
10077: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10078: LD_ADDR_VAR 0 1
10082: PUSH
10083: LD_INT 2
10085: PUSH
10086: LD_INT 3
10088: PUSH
10089: LD_INT 4
10091: PUSH
10092: LD_INT 5
10094: PUSH
10095: LD_INT 6
10097: PUSH
10098: LD_INT 7
10100: PUSH
10101: LD_INT 8
10103: PUSH
10104: LD_INT 9
10106: PUSH
10107: LD_INT 10
10109: PUSH
10110: LD_INT 11
10112: PUSH
10113: LD_INT 12
10115: PUSH
10116: LD_INT 13
10118: PUSH
10119: LD_INT 14
10121: PUSH
10122: LD_INT 15
10124: PUSH
10125: LD_INT 16
10127: PUSH
10128: LD_INT 17
10130: PUSH
10131: LD_INT 18
10133: PUSH
10134: LD_INT 19
10136: PUSH
10137: LD_INT 20
10139: PUSH
10140: LD_INT 21
10142: PUSH
10143: LD_INT 22
10145: PUSH
10146: LD_INT 23
10148: PUSH
10149: LD_INT 24
10151: PUSH
10152: LD_INT 25
10154: PUSH
10155: LD_INT 26
10157: PUSH
10158: LD_INT 28
10160: PUSH
10161: LD_INT 30
10163: PUSH
10164: LD_INT 31
10166: PUSH
10167: LD_INT 32
10169: PUSH
10170: LD_INT 34
10172: PUSH
10173: LD_INT 36
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 101
10211: PUSH
10212: LD_INT 102
10214: PUSH
10215: LD_INT 103
10217: PUSH
10218: LD_INT 104
10220: PUSH
10221: LD_INT 105
10223: PUSH
10224: LD_INT 106
10226: PUSH
10227: LD_INT 107
10229: PUSH
10230: LD_INT 108
10232: PUSH
10233: LD_INT 109
10235: PUSH
10236: LD_INT 110
10238: PUSH
10239: LD_INT 111
10241: PUSH
10242: LD_INT 112
10244: PUSH
10245: LD_INT 114
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: ST_TO_ADDR
10267: GO 11854
10269: LD_INT 12
10271: DOUBLE
10272: EQUAL
10273: IFTRUE 10277
10275: GO 10485
10277: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10278: LD_ADDR_VAR 0 1
10282: PUSH
10283: LD_INT 1
10285: PUSH
10286: LD_INT 2
10288: PUSH
10289: LD_INT 3
10291: PUSH
10292: LD_INT 4
10294: PUSH
10295: LD_INT 5
10297: PUSH
10298: LD_INT 6
10300: PUSH
10301: LD_INT 7
10303: PUSH
10304: LD_INT 8
10306: PUSH
10307: LD_INT 9
10309: PUSH
10310: LD_INT 10
10312: PUSH
10313: LD_INT 11
10315: PUSH
10316: LD_INT 12
10318: PUSH
10319: LD_INT 13
10321: PUSH
10322: LD_INT 14
10324: PUSH
10325: LD_INT 15
10327: PUSH
10328: LD_INT 16
10330: PUSH
10331: LD_INT 17
10333: PUSH
10334: LD_INT 18
10336: PUSH
10337: LD_INT 19
10339: PUSH
10340: LD_INT 20
10342: PUSH
10343: LD_INT 21
10345: PUSH
10346: LD_INT 22
10348: PUSH
10349: LD_INT 23
10351: PUSH
10352: LD_INT 24
10354: PUSH
10355: LD_INT 25
10357: PUSH
10358: LD_INT 26
10360: PUSH
10361: LD_INT 27
10363: PUSH
10364: LD_INT 28
10366: PUSH
10367: LD_INT 30
10369: PUSH
10370: LD_INT 31
10372: PUSH
10373: LD_INT 32
10375: PUSH
10376: LD_INT 33
10378: PUSH
10379: LD_INT 34
10381: PUSH
10382: LD_INT 36
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 101
10423: PUSH
10424: LD_INT 102
10426: PUSH
10427: LD_INT 103
10429: PUSH
10430: LD_INT 104
10432: PUSH
10433: LD_INT 105
10435: PUSH
10436: LD_INT 106
10438: PUSH
10439: LD_INT 107
10441: PUSH
10442: LD_INT 108
10444: PUSH
10445: LD_INT 109
10447: PUSH
10448: LD_INT 110
10450: PUSH
10451: LD_INT 111
10453: PUSH
10454: LD_INT 112
10456: PUSH
10457: LD_INT 113
10459: PUSH
10460: LD_INT 114
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: ST_TO_ADDR
10483: GO 11854
10485: LD_INT 13
10487: DOUBLE
10488: EQUAL
10489: IFTRUE 10493
10491: GO 10689
10493: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10494: LD_ADDR_VAR 0 1
10498: PUSH
10499: LD_INT 1
10501: PUSH
10502: LD_INT 2
10504: PUSH
10505: LD_INT 3
10507: PUSH
10508: LD_INT 4
10510: PUSH
10511: LD_INT 5
10513: PUSH
10514: LD_INT 8
10516: PUSH
10517: LD_INT 9
10519: PUSH
10520: LD_INT 10
10522: PUSH
10523: LD_INT 11
10525: PUSH
10526: LD_INT 12
10528: PUSH
10529: LD_INT 14
10531: PUSH
10532: LD_INT 15
10534: PUSH
10535: LD_INT 16
10537: PUSH
10538: LD_INT 17
10540: PUSH
10541: LD_INT 18
10543: PUSH
10544: LD_INT 19
10546: PUSH
10547: LD_INT 20
10549: PUSH
10550: LD_INT 21
10552: PUSH
10553: LD_INT 22
10555: PUSH
10556: LD_INT 23
10558: PUSH
10559: LD_INT 24
10561: PUSH
10562: LD_INT 25
10564: PUSH
10565: LD_INT 26
10567: PUSH
10568: LD_INT 27
10570: PUSH
10571: LD_INT 28
10573: PUSH
10574: LD_INT 30
10576: PUSH
10577: LD_INT 31
10579: PUSH
10580: LD_INT 32
10582: PUSH
10583: LD_INT 33
10585: PUSH
10586: LD_INT 34
10588: PUSH
10589: LD_INT 36
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: PUSH
10625: LD_INT 101
10627: PUSH
10628: LD_INT 102
10630: PUSH
10631: LD_INT 103
10633: PUSH
10634: LD_INT 104
10636: PUSH
10637: LD_INT 105
10639: PUSH
10640: LD_INT 106
10642: PUSH
10643: LD_INT 107
10645: PUSH
10646: LD_INT 108
10648: PUSH
10649: LD_INT 109
10651: PUSH
10652: LD_INT 110
10654: PUSH
10655: LD_INT 111
10657: PUSH
10658: LD_INT 112
10660: PUSH
10661: LD_INT 113
10663: PUSH
10664: LD_INT 114
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: ST_TO_ADDR
10687: GO 11854
10689: LD_INT 14
10691: DOUBLE
10692: EQUAL
10693: IFTRUE 10697
10695: GO 10909
10697: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10698: LD_ADDR_VAR 0 1
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: LD_INT 2
10708: PUSH
10709: LD_INT 3
10711: PUSH
10712: LD_INT 4
10714: PUSH
10715: LD_INT 5
10717: PUSH
10718: LD_INT 6
10720: PUSH
10721: LD_INT 7
10723: PUSH
10724: LD_INT 8
10726: PUSH
10727: LD_INT 9
10729: PUSH
10730: LD_INT 10
10732: PUSH
10733: LD_INT 11
10735: PUSH
10736: LD_INT 12
10738: PUSH
10739: LD_INT 13
10741: PUSH
10742: LD_INT 14
10744: PUSH
10745: LD_INT 15
10747: PUSH
10748: LD_INT 16
10750: PUSH
10751: LD_INT 17
10753: PUSH
10754: LD_INT 18
10756: PUSH
10757: LD_INT 19
10759: PUSH
10760: LD_INT 20
10762: PUSH
10763: LD_INT 21
10765: PUSH
10766: LD_INT 22
10768: PUSH
10769: LD_INT 23
10771: PUSH
10772: LD_INT 24
10774: PUSH
10775: LD_INT 25
10777: PUSH
10778: LD_INT 26
10780: PUSH
10781: LD_INT 27
10783: PUSH
10784: LD_INT 28
10786: PUSH
10787: LD_INT 29
10789: PUSH
10790: LD_INT 30
10792: PUSH
10793: LD_INT 31
10795: PUSH
10796: LD_INT 32
10798: PUSH
10799: LD_INT 33
10801: PUSH
10802: LD_INT 34
10804: PUSH
10805: LD_INT 36
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: PUSH
10845: LD_INT 101
10847: PUSH
10848: LD_INT 102
10850: PUSH
10851: LD_INT 103
10853: PUSH
10854: LD_INT 104
10856: PUSH
10857: LD_INT 105
10859: PUSH
10860: LD_INT 106
10862: PUSH
10863: LD_INT 107
10865: PUSH
10866: LD_INT 108
10868: PUSH
10869: LD_INT 109
10871: PUSH
10872: LD_INT 110
10874: PUSH
10875: LD_INT 111
10877: PUSH
10878: LD_INT 112
10880: PUSH
10881: LD_INT 113
10883: PUSH
10884: LD_INT 114
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: ST_TO_ADDR
10907: GO 11854
10909: LD_INT 15
10911: DOUBLE
10912: EQUAL
10913: IFTRUE 10917
10915: GO 11129
10917: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10918: LD_ADDR_VAR 0 1
10922: PUSH
10923: LD_INT 1
10925: PUSH
10926: LD_INT 2
10928: PUSH
10929: LD_INT 3
10931: PUSH
10932: LD_INT 4
10934: PUSH
10935: LD_INT 5
10937: PUSH
10938: LD_INT 6
10940: PUSH
10941: LD_INT 7
10943: PUSH
10944: LD_INT 8
10946: PUSH
10947: LD_INT 9
10949: PUSH
10950: LD_INT 10
10952: PUSH
10953: LD_INT 11
10955: PUSH
10956: LD_INT 12
10958: PUSH
10959: LD_INT 13
10961: PUSH
10962: LD_INT 14
10964: PUSH
10965: LD_INT 15
10967: PUSH
10968: LD_INT 16
10970: PUSH
10971: LD_INT 17
10973: PUSH
10974: LD_INT 18
10976: PUSH
10977: LD_INT 19
10979: PUSH
10980: LD_INT 20
10982: PUSH
10983: LD_INT 21
10985: PUSH
10986: LD_INT 22
10988: PUSH
10989: LD_INT 23
10991: PUSH
10992: LD_INT 24
10994: PUSH
10995: LD_INT 25
10997: PUSH
10998: LD_INT 26
11000: PUSH
11001: LD_INT 27
11003: PUSH
11004: LD_INT 28
11006: PUSH
11007: LD_INT 29
11009: PUSH
11010: LD_INT 30
11012: PUSH
11013: LD_INT 31
11015: PUSH
11016: LD_INT 32
11018: PUSH
11019: LD_INT 33
11021: PUSH
11022: LD_INT 34
11024: PUSH
11025: LD_INT 36
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: PUSH
11065: LD_INT 101
11067: PUSH
11068: LD_INT 102
11070: PUSH
11071: LD_INT 103
11073: PUSH
11074: LD_INT 104
11076: PUSH
11077: LD_INT 105
11079: PUSH
11080: LD_INT 106
11082: PUSH
11083: LD_INT 107
11085: PUSH
11086: LD_INT 108
11088: PUSH
11089: LD_INT 109
11091: PUSH
11092: LD_INT 110
11094: PUSH
11095: LD_INT 111
11097: PUSH
11098: LD_INT 112
11100: PUSH
11101: LD_INT 113
11103: PUSH
11104: LD_INT 114
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: ST_TO_ADDR
11127: GO 11854
11129: LD_INT 16
11131: DOUBLE
11132: EQUAL
11133: IFTRUE 11137
11135: GO 11261
11137: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11138: LD_ADDR_VAR 0 1
11142: PUSH
11143: LD_INT 2
11145: PUSH
11146: LD_INT 4
11148: PUSH
11149: LD_INT 5
11151: PUSH
11152: LD_INT 7
11154: PUSH
11155: LD_INT 11
11157: PUSH
11158: LD_INT 12
11160: PUSH
11161: LD_INT 15
11163: PUSH
11164: LD_INT 16
11166: PUSH
11167: LD_INT 20
11169: PUSH
11170: LD_INT 21
11172: PUSH
11173: LD_INT 22
11175: PUSH
11176: LD_INT 23
11178: PUSH
11179: LD_INT 25
11181: PUSH
11182: LD_INT 26
11184: PUSH
11185: LD_INT 30
11187: PUSH
11188: LD_INT 31
11190: PUSH
11191: LD_INT 32
11193: PUSH
11194: LD_INT 33
11196: PUSH
11197: LD_INT 34
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: PUSH
11221: LD_INT 101
11223: PUSH
11224: LD_INT 102
11226: PUSH
11227: LD_INT 103
11229: PUSH
11230: LD_INT 106
11232: PUSH
11233: LD_INT 108
11235: PUSH
11236: LD_INT 112
11238: PUSH
11239: LD_INT 113
11241: PUSH
11242: LD_INT 114
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: ST_TO_ADDR
11259: GO 11854
11261: LD_INT 17
11263: DOUBLE
11264: EQUAL
11265: IFTRUE 11269
11267: GO 11481
11269: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11270: LD_ADDR_VAR 0 1
11274: PUSH
11275: LD_INT 1
11277: PUSH
11278: LD_INT 2
11280: PUSH
11281: LD_INT 3
11283: PUSH
11284: LD_INT 4
11286: PUSH
11287: LD_INT 5
11289: PUSH
11290: LD_INT 6
11292: PUSH
11293: LD_INT 7
11295: PUSH
11296: LD_INT 8
11298: PUSH
11299: LD_INT 9
11301: PUSH
11302: LD_INT 10
11304: PUSH
11305: LD_INT 11
11307: PUSH
11308: LD_INT 12
11310: PUSH
11311: LD_INT 13
11313: PUSH
11314: LD_INT 14
11316: PUSH
11317: LD_INT 15
11319: PUSH
11320: LD_INT 16
11322: PUSH
11323: LD_INT 17
11325: PUSH
11326: LD_INT 18
11328: PUSH
11329: LD_INT 19
11331: PUSH
11332: LD_INT 20
11334: PUSH
11335: LD_INT 21
11337: PUSH
11338: LD_INT 22
11340: PUSH
11341: LD_INT 23
11343: PUSH
11344: LD_INT 24
11346: PUSH
11347: LD_INT 25
11349: PUSH
11350: LD_INT 26
11352: PUSH
11353: LD_INT 27
11355: PUSH
11356: LD_INT 28
11358: PUSH
11359: LD_INT 29
11361: PUSH
11362: LD_INT 30
11364: PUSH
11365: LD_INT 31
11367: PUSH
11368: LD_INT 32
11370: PUSH
11371: LD_INT 33
11373: PUSH
11374: LD_INT 34
11376: PUSH
11377: LD_INT 36
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 101
11419: PUSH
11420: LD_INT 102
11422: PUSH
11423: LD_INT 103
11425: PUSH
11426: LD_INT 104
11428: PUSH
11429: LD_INT 105
11431: PUSH
11432: LD_INT 106
11434: PUSH
11435: LD_INT 107
11437: PUSH
11438: LD_INT 108
11440: PUSH
11441: LD_INT 109
11443: PUSH
11444: LD_INT 110
11446: PUSH
11447: LD_INT 111
11449: PUSH
11450: LD_INT 112
11452: PUSH
11453: LD_INT 113
11455: PUSH
11456: LD_INT 114
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: ST_TO_ADDR
11479: GO 11854
11481: LD_INT 18
11483: DOUBLE
11484: EQUAL
11485: IFTRUE 11489
11487: GO 11625
11489: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11490: LD_ADDR_VAR 0 1
11494: PUSH
11495: LD_INT 2
11497: PUSH
11498: LD_INT 4
11500: PUSH
11501: LD_INT 5
11503: PUSH
11504: LD_INT 7
11506: PUSH
11507: LD_INT 11
11509: PUSH
11510: LD_INT 12
11512: PUSH
11513: LD_INT 15
11515: PUSH
11516: LD_INT 16
11518: PUSH
11519: LD_INT 20
11521: PUSH
11522: LD_INT 21
11524: PUSH
11525: LD_INT 22
11527: PUSH
11528: LD_INT 23
11530: PUSH
11531: LD_INT 25
11533: PUSH
11534: LD_INT 26
11536: PUSH
11537: LD_INT 30
11539: PUSH
11540: LD_INT 31
11542: PUSH
11543: LD_INT 32
11545: PUSH
11546: LD_INT 33
11548: PUSH
11549: LD_INT 34
11551: PUSH
11552: LD_INT 35
11554: PUSH
11555: LD_INT 36
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 101
11583: PUSH
11584: LD_INT 102
11586: PUSH
11587: LD_INT 103
11589: PUSH
11590: LD_INT 106
11592: PUSH
11593: LD_INT 108
11595: PUSH
11596: LD_INT 112
11598: PUSH
11599: LD_INT 113
11601: PUSH
11602: LD_INT 114
11604: PUSH
11605: LD_INT 115
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: ST_TO_ADDR
11623: GO 11854
11625: LD_INT 19
11627: DOUBLE
11628: EQUAL
11629: IFTRUE 11633
11631: GO 11853
11633: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11634: LD_ADDR_VAR 0 1
11638: PUSH
11639: LD_INT 1
11641: PUSH
11642: LD_INT 2
11644: PUSH
11645: LD_INT 3
11647: PUSH
11648: LD_INT 4
11650: PUSH
11651: LD_INT 5
11653: PUSH
11654: LD_INT 6
11656: PUSH
11657: LD_INT 7
11659: PUSH
11660: LD_INT 8
11662: PUSH
11663: LD_INT 9
11665: PUSH
11666: LD_INT 10
11668: PUSH
11669: LD_INT 11
11671: PUSH
11672: LD_INT 12
11674: PUSH
11675: LD_INT 13
11677: PUSH
11678: LD_INT 14
11680: PUSH
11681: LD_INT 15
11683: PUSH
11684: LD_INT 16
11686: PUSH
11687: LD_INT 17
11689: PUSH
11690: LD_INT 18
11692: PUSH
11693: LD_INT 19
11695: PUSH
11696: LD_INT 20
11698: PUSH
11699: LD_INT 21
11701: PUSH
11702: LD_INT 22
11704: PUSH
11705: LD_INT 23
11707: PUSH
11708: LD_INT 24
11710: PUSH
11711: LD_INT 25
11713: PUSH
11714: LD_INT 26
11716: PUSH
11717: LD_INT 27
11719: PUSH
11720: LD_INT 28
11722: PUSH
11723: LD_INT 29
11725: PUSH
11726: LD_INT 30
11728: PUSH
11729: LD_INT 31
11731: PUSH
11732: LD_INT 32
11734: PUSH
11735: LD_INT 33
11737: PUSH
11738: LD_INT 34
11740: PUSH
11741: LD_INT 35
11743: PUSH
11744: LD_INT 36
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 101
11787: PUSH
11788: LD_INT 102
11790: PUSH
11791: LD_INT 103
11793: PUSH
11794: LD_INT 104
11796: PUSH
11797: LD_INT 105
11799: PUSH
11800: LD_INT 106
11802: PUSH
11803: LD_INT 107
11805: PUSH
11806: LD_INT 108
11808: PUSH
11809: LD_INT 109
11811: PUSH
11812: LD_INT 110
11814: PUSH
11815: LD_INT 111
11817: PUSH
11818: LD_INT 112
11820: PUSH
11821: LD_INT 113
11823: PUSH
11824: LD_INT 114
11826: PUSH
11827: LD_INT 115
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: ST_TO_ADDR
11851: GO 11854
11853: POP
// end else
11854: GO 12073
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11856: LD_ADDR_VAR 0 1
11860: PUSH
11861: LD_INT 1
11863: PUSH
11864: LD_INT 2
11866: PUSH
11867: LD_INT 3
11869: PUSH
11870: LD_INT 4
11872: PUSH
11873: LD_INT 5
11875: PUSH
11876: LD_INT 6
11878: PUSH
11879: LD_INT 7
11881: PUSH
11882: LD_INT 8
11884: PUSH
11885: LD_INT 9
11887: PUSH
11888: LD_INT 10
11890: PUSH
11891: LD_INT 11
11893: PUSH
11894: LD_INT 12
11896: PUSH
11897: LD_INT 13
11899: PUSH
11900: LD_INT 14
11902: PUSH
11903: LD_INT 15
11905: PUSH
11906: LD_INT 16
11908: PUSH
11909: LD_INT 17
11911: PUSH
11912: LD_INT 18
11914: PUSH
11915: LD_INT 19
11917: PUSH
11918: LD_INT 20
11920: PUSH
11921: LD_INT 21
11923: PUSH
11924: LD_INT 22
11926: PUSH
11927: LD_INT 23
11929: PUSH
11930: LD_INT 24
11932: PUSH
11933: LD_INT 25
11935: PUSH
11936: LD_INT 26
11938: PUSH
11939: LD_INT 27
11941: PUSH
11942: LD_INT 28
11944: PUSH
11945: LD_INT 29
11947: PUSH
11948: LD_INT 30
11950: PUSH
11951: LD_INT 31
11953: PUSH
11954: LD_INT 32
11956: PUSH
11957: LD_INT 33
11959: PUSH
11960: LD_INT 34
11962: PUSH
11963: LD_INT 35
11965: PUSH
11966: LD_INT 36
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 101
12009: PUSH
12010: LD_INT 102
12012: PUSH
12013: LD_INT 103
12015: PUSH
12016: LD_INT 104
12018: PUSH
12019: LD_INT 105
12021: PUSH
12022: LD_INT 106
12024: PUSH
12025: LD_INT 107
12027: PUSH
12028: LD_INT 108
12030: PUSH
12031: LD_INT 109
12033: PUSH
12034: LD_INT 110
12036: PUSH
12037: LD_INT 111
12039: PUSH
12040: LD_INT 112
12042: PUSH
12043: LD_INT 113
12045: PUSH
12046: LD_INT 114
12048: PUSH
12049: LD_INT 115
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: ST_TO_ADDR
// if result then
12073: LD_VAR 0 1
12077: IFFALSE 12366
// begin normal :=  ;
12079: LD_ADDR_VAR 0 3
12083: PUSH
12084: LD_STRING 
12086: ST_TO_ADDR
// hardcore :=  ;
12087: LD_ADDR_VAR 0 4
12091: PUSH
12092: LD_STRING 
12094: ST_TO_ADDR
// for i = 1 to normalCounter do
12095: LD_ADDR_VAR 0 5
12099: PUSH
12100: DOUBLE
12101: LD_INT 1
12103: DEC
12104: ST_TO_ADDR
12105: LD_EXP 44
12109: PUSH
12110: FOR_TO
12111: IFFALSE 12212
// begin tmp := 0 ;
12113: LD_ADDR_VAR 0 2
12117: PUSH
12118: LD_STRING 0
12120: ST_TO_ADDR
// if result [ 1 ] then
12121: LD_VAR 0 1
12125: PUSH
12126: LD_INT 1
12128: ARRAY
12129: IFFALSE 12194
// if result [ 1 ] [ 1 ] = i then
12131: LD_VAR 0 1
12135: PUSH
12136: LD_INT 1
12138: ARRAY
12139: PUSH
12140: LD_INT 1
12142: ARRAY
12143: PUSH
12144: LD_VAR 0 5
12148: EQUAL
12149: IFFALSE 12194
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12151: LD_ADDR_VAR 0 1
12155: PUSH
12156: LD_VAR 0 1
12160: PPUSH
12161: LD_INT 1
12163: PPUSH
12164: LD_VAR 0 1
12168: PUSH
12169: LD_INT 1
12171: ARRAY
12172: PPUSH
12173: LD_INT 1
12175: PPUSH
12176: CALL_OW 3
12180: PPUSH
12181: CALL_OW 1
12185: ST_TO_ADDR
// tmp := 1 ;
12186: LD_ADDR_VAR 0 2
12190: PUSH
12191: LD_STRING 1
12193: ST_TO_ADDR
// end ; normal := normal & tmp ;
12194: LD_ADDR_VAR 0 3
12198: PUSH
12199: LD_VAR 0 3
12203: PUSH
12204: LD_VAR 0 2
12208: STR
12209: ST_TO_ADDR
// end ;
12210: GO 12110
12212: POP
12213: POP
// for i = 1 to hardcoreCounter do
12214: LD_ADDR_VAR 0 5
12218: PUSH
12219: DOUBLE
12220: LD_INT 1
12222: DEC
12223: ST_TO_ADDR
12224: LD_EXP 45
12228: PUSH
12229: FOR_TO
12230: IFFALSE 12335
// begin tmp := 0 ;
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: LD_STRING 0
12239: ST_TO_ADDR
// if result [ 2 ] then
12240: LD_VAR 0 1
12244: PUSH
12245: LD_INT 2
12247: ARRAY
12248: IFFALSE 12317
// if result [ 2 ] [ 1 ] = 100 + i then
12250: LD_VAR 0 1
12254: PUSH
12255: LD_INT 2
12257: ARRAY
12258: PUSH
12259: LD_INT 1
12261: ARRAY
12262: PUSH
12263: LD_INT 100
12265: PUSH
12266: LD_VAR 0 5
12270: PLUS
12271: EQUAL
12272: IFFALSE 12317
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12274: LD_ADDR_VAR 0 1
12278: PUSH
12279: LD_VAR 0 1
12283: PPUSH
12284: LD_INT 2
12286: PPUSH
12287: LD_VAR 0 1
12291: PUSH
12292: LD_INT 2
12294: ARRAY
12295: PPUSH
12296: LD_INT 1
12298: PPUSH
12299: CALL_OW 3
12303: PPUSH
12304: CALL_OW 1
12308: ST_TO_ADDR
// tmp := 1 ;
12309: LD_ADDR_VAR 0 2
12313: PUSH
12314: LD_STRING 1
12316: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12317: LD_ADDR_VAR 0 4
12321: PUSH
12322: LD_VAR 0 4
12326: PUSH
12327: LD_VAR 0 2
12331: STR
12332: ST_TO_ADDR
// end ;
12333: GO 12229
12335: POP
12336: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12337: LD_STRING getStreamItemsFromMission("
12339: PUSH
12340: LD_VAR 0 3
12344: STR
12345: PUSH
12346: LD_STRING ","
12348: STR
12349: PUSH
12350: LD_VAR 0 4
12354: STR
12355: PUSH
12356: LD_STRING ")
12358: STR
12359: PPUSH
12360: CALL_OW 559
// end else
12364: GO 12373
// ToLua ( getStreamItemsFromMission("","") ) ;
12366: LD_STRING getStreamItemsFromMission("","")
12368: PPUSH
12369: CALL_OW 559
// end ;
12373: LD_VAR 0 1
12377: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12378: LD_EXP 43
12382: PUSH
12383: LD_EXP 48
12387: AND
12388: IFFALSE 12512
12390: GO 12392
12392: DISABLE
12393: LD_INT 0
12395: PPUSH
12396: PPUSH
// begin enable ;
12397: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12398: LD_ADDR_VAR 0 2
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_OWVAR 2
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 2
12417: PUSH
12418: LD_INT 34
12420: PUSH
12421: LD_INT 7
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 34
12430: PUSH
12431: LD_INT 45
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 34
12440: PUSH
12441: LD_INT 28
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: LD_INT 34
12450: PUSH
12451: LD_INT 47
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PPUSH
12469: CALL_OW 69
12473: ST_TO_ADDR
// if not tmp then
12474: LD_VAR 0 2
12478: NOT
12479: IFFALSE 12483
// exit ;
12481: GO 12512
// for i in tmp do
12483: LD_ADDR_VAR 0 1
12487: PUSH
12488: LD_VAR 0 2
12492: PUSH
12493: FOR_IN
12494: IFFALSE 12510
// begin SetLives ( i , 0 ) ;
12496: LD_VAR 0 1
12500: PPUSH
12501: LD_INT 0
12503: PPUSH
12504: CALL_OW 234
// end ;
12508: GO 12493
12510: POP
12511: POP
// end ;
12512: PPOPN 2
12514: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12515: LD_EXP 43
12519: PUSH
12520: LD_EXP 49
12524: AND
12525: IFFALSE 12609
12527: GO 12529
12529: DISABLE
12530: LD_INT 0
12532: PPUSH
12533: PPUSH
// begin enable ;
12534: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12535: LD_ADDR_VAR 0 2
12539: PUSH
12540: LD_INT 22
12542: PUSH
12543: LD_OWVAR 2
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: PUSH
12552: LD_INT 32
12554: PUSH
12555: LD_INT 3
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PPUSH
12566: CALL_OW 69
12570: ST_TO_ADDR
// if not tmp then
12571: LD_VAR 0 2
12575: NOT
12576: IFFALSE 12580
// exit ;
12578: GO 12609
// for i in tmp do
12580: LD_ADDR_VAR 0 1
12584: PUSH
12585: LD_VAR 0 2
12589: PUSH
12590: FOR_IN
12591: IFFALSE 12607
// begin SetLives ( i , 0 ) ;
12593: LD_VAR 0 1
12597: PPUSH
12598: LD_INT 0
12600: PPUSH
12601: CALL_OW 234
// end ;
12605: GO 12590
12607: POP
12608: POP
// end ;
12609: PPOPN 2
12611: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12612: LD_EXP 43
12616: PUSH
12617: LD_EXP 46
12621: AND
12622: IFFALSE 12715
12624: GO 12626
12626: DISABLE
12627: LD_INT 0
12629: PPUSH
// begin enable ;
12630: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12631: LD_ADDR_VAR 0 1
12635: PUSH
12636: LD_INT 22
12638: PUSH
12639: LD_OWVAR 2
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PUSH
12648: LD_INT 2
12650: PUSH
12651: LD_INT 25
12653: PUSH
12654: LD_INT 5
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: LD_INT 25
12663: PUSH
12664: LD_INT 9
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: LD_INT 25
12673: PUSH
12674: LD_INT 8
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PPUSH
12691: CALL_OW 69
12695: PUSH
12696: FOR_IN
12697: IFFALSE 12713
// begin SetClass ( i , 1 ) ;
12699: LD_VAR 0 1
12703: PPUSH
12704: LD_INT 1
12706: PPUSH
12707: CALL_OW 336
// end ;
12711: GO 12696
12713: POP
12714: POP
// end ;
12715: PPOPN 1
12717: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12718: LD_EXP 43
12722: PUSH
12723: LD_EXP 47
12727: AND
12728: PUSH
12729: LD_OWVAR 65
12733: PUSH
12734: LD_INT 7
12736: LESS
12737: AND
12738: IFFALSE 12752
12740: GO 12742
12742: DISABLE
// begin enable ;
12743: ENABLE
// game_speed := 7 ;
12744: LD_ADDR_OWVAR 65
12748: PUSH
12749: LD_INT 7
12751: ST_TO_ADDR
// end ;
12752: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12753: LD_EXP 43
12757: PUSH
12758: LD_EXP 50
12762: AND
12763: IFFALSE 12965
12765: GO 12767
12767: DISABLE
12768: LD_INT 0
12770: PPUSH
12771: PPUSH
12772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12773: LD_ADDR_VAR 0 3
12777: PUSH
12778: LD_INT 81
12780: PUSH
12781: LD_OWVAR 2
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PUSH
12790: LD_INT 21
12792: PUSH
12793: LD_INT 1
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PPUSH
12804: CALL_OW 69
12808: ST_TO_ADDR
// if not tmp then
12809: LD_VAR 0 3
12813: NOT
12814: IFFALSE 12818
// exit ;
12816: GO 12965
// if tmp > 5 then
12818: LD_VAR 0 3
12822: PUSH
12823: LD_INT 5
12825: GREATER
12826: IFFALSE 12838
// k := 5 else
12828: LD_ADDR_VAR 0 2
12832: PUSH
12833: LD_INT 5
12835: ST_TO_ADDR
12836: GO 12848
// k := tmp ;
12838: LD_ADDR_VAR 0 2
12842: PUSH
12843: LD_VAR 0 3
12847: ST_TO_ADDR
// for i := 1 to k do
12848: LD_ADDR_VAR 0 1
12852: PUSH
12853: DOUBLE
12854: LD_INT 1
12856: DEC
12857: ST_TO_ADDR
12858: LD_VAR 0 2
12862: PUSH
12863: FOR_TO
12864: IFFALSE 12963
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12866: LD_VAR 0 3
12870: PUSH
12871: LD_VAR 0 1
12875: ARRAY
12876: PPUSH
12877: LD_VAR 0 1
12881: PUSH
12882: LD_INT 4
12884: MOD
12885: PUSH
12886: LD_INT 1
12888: PLUS
12889: PPUSH
12890: CALL_OW 259
12894: PUSH
12895: LD_INT 10
12897: LESS
12898: IFFALSE 12961
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12900: LD_VAR 0 3
12904: PUSH
12905: LD_VAR 0 1
12909: ARRAY
12910: PPUSH
12911: LD_VAR 0 1
12915: PUSH
12916: LD_INT 4
12918: MOD
12919: PUSH
12920: LD_INT 1
12922: PLUS
12923: PPUSH
12924: LD_VAR 0 3
12928: PUSH
12929: LD_VAR 0 1
12933: ARRAY
12934: PPUSH
12935: LD_VAR 0 1
12939: PUSH
12940: LD_INT 4
12942: MOD
12943: PUSH
12944: LD_INT 1
12946: PLUS
12947: PPUSH
12948: CALL_OW 259
12952: PUSH
12953: LD_INT 1
12955: PLUS
12956: PPUSH
12957: CALL_OW 237
12961: GO 12863
12963: POP
12964: POP
// end ;
12965: PPOPN 3
12967: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12968: LD_EXP 43
12972: PUSH
12973: LD_EXP 51
12977: AND
12978: IFFALSE 12998
12980: GO 12982
12982: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12983: LD_INT 4
12985: PPUSH
12986: LD_OWVAR 2
12990: PPUSH
12991: LD_INT 0
12993: PPUSH
12994: CALL_OW 324
12998: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12999: LD_EXP 43
13003: PUSH
13004: LD_EXP 80
13008: AND
13009: IFFALSE 13029
13011: GO 13013
13013: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13014: LD_INT 19
13016: PPUSH
13017: LD_OWVAR 2
13021: PPUSH
13022: LD_INT 0
13024: PPUSH
13025: CALL_OW 324
13029: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13030: LD_EXP 43
13034: PUSH
13035: LD_EXP 52
13039: AND
13040: IFFALSE 13142
13042: GO 13044
13044: DISABLE
13045: LD_INT 0
13047: PPUSH
13048: PPUSH
// begin enable ;
13049: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13050: LD_ADDR_VAR 0 2
13054: PUSH
13055: LD_INT 22
13057: PUSH
13058: LD_OWVAR 2
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: LD_INT 2
13069: PUSH
13070: LD_INT 34
13072: PUSH
13073: LD_INT 11
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: PUSH
13080: LD_INT 34
13082: PUSH
13083: LD_INT 30
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PPUSH
13099: CALL_OW 69
13103: ST_TO_ADDR
// if not tmp then
13104: LD_VAR 0 2
13108: NOT
13109: IFFALSE 13113
// exit ;
13111: GO 13142
// for i in tmp do
13113: LD_ADDR_VAR 0 1
13117: PUSH
13118: LD_VAR 0 2
13122: PUSH
13123: FOR_IN
13124: IFFALSE 13140
// begin SetLives ( i , 0 ) ;
13126: LD_VAR 0 1
13130: PPUSH
13131: LD_INT 0
13133: PPUSH
13134: CALL_OW 234
// end ;
13138: GO 13123
13140: POP
13141: POP
// end ;
13142: PPOPN 2
13144: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13145: LD_EXP 43
13149: PUSH
13150: LD_EXP 53
13154: AND
13155: IFFALSE 13175
13157: GO 13159
13159: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13160: LD_INT 32
13162: PPUSH
13163: LD_OWVAR 2
13167: PPUSH
13168: LD_INT 0
13170: PPUSH
13171: CALL_OW 324
13175: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13176: LD_EXP 43
13180: PUSH
13181: LD_EXP 54
13185: AND
13186: IFFALSE 13367
13188: GO 13190
13190: DISABLE
13191: LD_INT 0
13193: PPUSH
13194: PPUSH
13195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13196: LD_ADDR_VAR 0 2
13200: PUSH
13201: LD_INT 22
13203: PUSH
13204: LD_OWVAR 2
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 33
13215: PUSH
13216: LD_INT 3
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PPUSH
13227: CALL_OW 69
13231: ST_TO_ADDR
// if not tmp then
13232: LD_VAR 0 2
13236: NOT
13237: IFFALSE 13241
// exit ;
13239: GO 13367
// side := 0 ;
13241: LD_ADDR_VAR 0 3
13245: PUSH
13246: LD_INT 0
13248: ST_TO_ADDR
// for i := 1 to 8 do
13249: LD_ADDR_VAR 0 1
13253: PUSH
13254: DOUBLE
13255: LD_INT 1
13257: DEC
13258: ST_TO_ADDR
13259: LD_INT 8
13261: PUSH
13262: FOR_TO
13263: IFFALSE 13311
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13265: LD_OWVAR 2
13269: PUSH
13270: LD_VAR 0 1
13274: NONEQUAL
13275: PUSH
13276: LD_OWVAR 2
13280: PPUSH
13281: LD_VAR 0 1
13285: PPUSH
13286: CALL_OW 81
13290: PUSH
13291: LD_INT 2
13293: EQUAL
13294: AND
13295: IFFALSE 13309
// begin side := i ;
13297: LD_ADDR_VAR 0 3
13301: PUSH
13302: LD_VAR 0 1
13306: ST_TO_ADDR
// break ;
13307: GO 13311
// end ;
13309: GO 13262
13311: POP
13312: POP
// if not side then
13313: LD_VAR 0 3
13317: NOT
13318: IFFALSE 13322
// exit ;
13320: GO 13367
// for i := 1 to tmp do
13322: LD_ADDR_VAR 0 1
13326: PUSH
13327: DOUBLE
13328: LD_INT 1
13330: DEC
13331: ST_TO_ADDR
13332: LD_VAR 0 2
13336: PUSH
13337: FOR_TO
13338: IFFALSE 13365
// if Prob ( 60 ) then
13340: LD_INT 60
13342: PPUSH
13343: CALL_OW 13
13347: IFFALSE 13363
// SetSide ( i , side ) ;
13349: LD_VAR 0 1
13353: PPUSH
13354: LD_VAR 0 3
13358: PPUSH
13359: CALL_OW 235
13363: GO 13337
13365: POP
13366: POP
// end ;
13367: PPOPN 3
13369: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13370: LD_EXP 43
13374: PUSH
13375: LD_EXP 56
13379: AND
13380: IFFALSE 13499
13382: GO 13384
13384: DISABLE
13385: LD_INT 0
13387: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13388: LD_ADDR_VAR 0 1
13392: PUSH
13393: LD_INT 22
13395: PUSH
13396: LD_OWVAR 2
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 21
13407: PUSH
13408: LD_INT 1
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 3
13417: PUSH
13418: LD_INT 23
13420: PUSH
13421: LD_INT 0
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: PPUSH
13437: CALL_OW 69
13441: PUSH
13442: FOR_IN
13443: IFFALSE 13497
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13445: LD_VAR 0 1
13449: PPUSH
13450: CALL_OW 257
13454: PUSH
13455: LD_INT 1
13457: PUSH
13458: LD_INT 2
13460: PUSH
13461: LD_INT 3
13463: PUSH
13464: LD_INT 4
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: IN
13473: IFFALSE 13495
// SetClass ( un , rand ( 1 , 4 ) ) ;
13475: LD_VAR 0 1
13479: PPUSH
13480: LD_INT 1
13482: PPUSH
13483: LD_INT 4
13485: PPUSH
13486: CALL_OW 12
13490: PPUSH
13491: CALL_OW 336
13495: GO 13442
13497: POP
13498: POP
// end ;
13499: PPOPN 1
13501: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13502: LD_EXP 43
13506: PUSH
13507: LD_EXP 55
13511: AND
13512: IFFALSE 13591
13514: GO 13516
13516: DISABLE
13517: LD_INT 0
13519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13520: LD_ADDR_VAR 0 1
13524: PUSH
13525: LD_INT 22
13527: PUSH
13528: LD_OWVAR 2
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 21
13539: PUSH
13540: LD_INT 3
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: PPUSH
13551: CALL_OW 69
13555: ST_TO_ADDR
// if not tmp then
13556: LD_VAR 0 1
13560: NOT
13561: IFFALSE 13565
// exit ;
13563: GO 13591
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13565: LD_VAR 0 1
13569: PUSH
13570: LD_INT 1
13572: PPUSH
13573: LD_VAR 0 1
13577: PPUSH
13578: CALL_OW 12
13582: ARRAY
13583: PPUSH
13584: LD_INT 100
13586: PPUSH
13587: CALL_OW 234
// end ;
13591: PPOPN 1
13593: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13594: LD_EXP 43
13598: PUSH
13599: LD_EXP 57
13603: AND
13604: IFFALSE 13702
13606: GO 13608
13608: DISABLE
13609: LD_INT 0
13611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13612: LD_ADDR_VAR 0 1
13616: PUSH
13617: LD_INT 22
13619: PUSH
13620: LD_OWVAR 2
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 21
13631: PUSH
13632: LD_INT 1
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PPUSH
13643: CALL_OW 69
13647: ST_TO_ADDR
// if not tmp then
13648: LD_VAR 0 1
13652: NOT
13653: IFFALSE 13657
// exit ;
13655: GO 13702
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13657: LD_VAR 0 1
13661: PUSH
13662: LD_INT 1
13664: PPUSH
13665: LD_VAR 0 1
13669: PPUSH
13670: CALL_OW 12
13674: ARRAY
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: LD_INT 4
13681: PPUSH
13682: CALL_OW 12
13686: PPUSH
13687: LD_INT 3000
13689: PPUSH
13690: LD_INT 9000
13692: PPUSH
13693: CALL_OW 12
13697: PPUSH
13698: CALL_OW 492
// end ;
13702: PPOPN 1
13704: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13705: LD_EXP 43
13709: PUSH
13710: LD_EXP 58
13714: AND
13715: IFFALSE 13735
13717: GO 13719
13719: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13720: LD_INT 1
13722: PPUSH
13723: LD_OWVAR 2
13727: PPUSH
13728: LD_INT 0
13730: PPUSH
13731: CALL_OW 324
13735: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13736: LD_EXP 43
13740: PUSH
13741: LD_EXP 59
13745: AND
13746: IFFALSE 13829
13748: GO 13750
13750: DISABLE
13751: LD_INT 0
13753: PPUSH
13754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_INT 22
13762: PUSH
13763: LD_OWVAR 2
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: PUSH
13772: LD_INT 21
13774: PUSH
13775: LD_INT 3
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PPUSH
13786: CALL_OW 69
13790: ST_TO_ADDR
// if not tmp then
13791: LD_VAR 0 2
13795: NOT
13796: IFFALSE 13800
// exit ;
13798: GO 13829
// for i in tmp do
13800: LD_ADDR_VAR 0 1
13804: PUSH
13805: LD_VAR 0 2
13809: PUSH
13810: FOR_IN
13811: IFFALSE 13827
// SetBLevel ( i , 10 ) ;
13813: LD_VAR 0 1
13817: PPUSH
13818: LD_INT 10
13820: PPUSH
13821: CALL_OW 241
13825: GO 13810
13827: POP
13828: POP
// end ;
13829: PPOPN 2
13831: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13832: LD_EXP 43
13836: PUSH
13837: LD_EXP 60
13841: AND
13842: IFFALSE 13953
13844: GO 13846
13846: DISABLE
13847: LD_INT 0
13849: PPUSH
13850: PPUSH
13851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13852: LD_ADDR_VAR 0 3
13856: PUSH
13857: LD_INT 22
13859: PUSH
13860: LD_OWVAR 2
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: PUSH
13869: LD_INT 25
13871: PUSH
13872: LD_INT 1
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PPUSH
13883: CALL_OW 69
13887: ST_TO_ADDR
// if not tmp then
13888: LD_VAR 0 3
13892: NOT
13893: IFFALSE 13897
// exit ;
13895: GO 13953
// un := tmp [ rand ( 1 , tmp ) ] ;
13897: LD_ADDR_VAR 0 2
13901: PUSH
13902: LD_VAR 0 3
13906: PUSH
13907: LD_INT 1
13909: PPUSH
13910: LD_VAR 0 3
13914: PPUSH
13915: CALL_OW 12
13919: ARRAY
13920: ST_TO_ADDR
// if Crawls ( un ) then
13921: LD_VAR 0 2
13925: PPUSH
13926: CALL_OW 318
13930: IFFALSE 13941
// ComWalk ( un ) ;
13932: LD_VAR 0 2
13936: PPUSH
13937: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13941: LD_VAR 0 2
13945: PPUSH
13946: LD_INT 5
13948: PPUSH
13949: CALL_OW 336
// end ;
13953: PPOPN 3
13955: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13956: LD_EXP 43
13960: PUSH
13961: LD_EXP 61
13965: AND
13966: PUSH
13967: LD_OWVAR 67
13971: PUSH
13972: LD_INT 3
13974: LESS
13975: AND
13976: IFFALSE 13995
13978: GO 13980
13980: DISABLE
// Difficulty := Difficulty + 1 ;
13981: LD_ADDR_OWVAR 67
13985: PUSH
13986: LD_OWVAR 67
13990: PUSH
13991: LD_INT 1
13993: PLUS
13994: ST_TO_ADDR
13995: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13996: LD_EXP 43
14000: PUSH
14001: LD_EXP 62
14005: AND
14006: IFFALSE 14109
14008: GO 14010
14010: DISABLE
14011: LD_INT 0
14013: PPUSH
// begin for i := 1 to 5 do
14014: LD_ADDR_VAR 0 1
14018: PUSH
14019: DOUBLE
14020: LD_INT 1
14022: DEC
14023: ST_TO_ADDR
14024: LD_INT 5
14026: PUSH
14027: FOR_TO
14028: IFFALSE 14107
// begin uc_nation := nation_nature ;
14030: LD_ADDR_OWVAR 21
14034: PUSH
14035: LD_INT 0
14037: ST_TO_ADDR
// uc_side := 0 ;
14038: LD_ADDR_OWVAR 20
14042: PUSH
14043: LD_INT 0
14045: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14046: LD_ADDR_OWVAR 29
14050: PUSH
14051: LD_INT 12
14053: PUSH
14054: LD_INT 12
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: ST_TO_ADDR
// hc_agressivity := 20 ;
14061: LD_ADDR_OWVAR 35
14065: PUSH
14066: LD_INT 20
14068: ST_TO_ADDR
// hc_class := class_tiger ;
14069: LD_ADDR_OWVAR 28
14073: PUSH
14074: LD_INT 14
14076: ST_TO_ADDR
// hc_gallery :=  ;
14077: LD_ADDR_OWVAR 33
14081: PUSH
14082: LD_STRING 
14084: ST_TO_ADDR
// hc_name :=  ;
14085: LD_ADDR_OWVAR 26
14089: PUSH
14090: LD_STRING 
14092: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14093: CALL_OW 44
14097: PPUSH
14098: LD_INT 0
14100: PPUSH
14101: CALL_OW 51
// end ;
14105: GO 14027
14107: POP
14108: POP
// end ;
14109: PPOPN 1
14111: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14112: LD_EXP 43
14116: PUSH
14117: LD_EXP 63
14121: AND
14122: IFFALSE 14131
14124: GO 14126
14126: DISABLE
// StreamSibBomb ;
14127: CALL 14132 0 0
14131: END
// export function StreamSibBomb ; var i , x , y ; begin
14132: LD_INT 0
14134: PPUSH
14135: PPUSH
14136: PPUSH
14137: PPUSH
// result := false ;
14138: LD_ADDR_VAR 0 1
14142: PUSH
14143: LD_INT 0
14145: ST_TO_ADDR
// for i := 1 to 16 do
14146: LD_ADDR_VAR 0 2
14150: PUSH
14151: DOUBLE
14152: LD_INT 1
14154: DEC
14155: ST_TO_ADDR
14156: LD_INT 16
14158: PUSH
14159: FOR_TO
14160: IFFALSE 14359
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14162: LD_ADDR_VAR 0 3
14166: PUSH
14167: LD_INT 10
14169: PUSH
14170: LD_INT 20
14172: PUSH
14173: LD_INT 30
14175: PUSH
14176: LD_INT 40
14178: PUSH
14179: LD_INT 50
14181: PUSH
14182: LD_INT 60
14184: PUSH
14185: LD_INT 70
14187: PUSH
14188: LD_INT 80
14190: PUSH
14191: LD_INT 90
14193: PUSH
14194: LD_INT 100
14196: PUSH
14197: LD_INT 110
14199: PUSH
14200: LD_INT 120
14202: PUSH
14203: LD_INT 130
14205: PUSH
14206: LD_INT 140
14208: PUSH
14209: LD_INT 150
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 1
14231: PPUSH
14232: LD_INT 15
14234: PPUSH
14235: CALL_OW 12
14239: ARRAY
14240: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14241: LD_ADDR_VAR 0 4
14245: PUSH
14246: LD_INT 10
14248: PUSH
14249: LD_INT 20
14251: PUSH
14252: LD_INT 30
14254: PUSH
14255: LD_INT 40
14257: PUSH
14258: LD_INT 50
14260: PUSH
14261: LD_INT 60
14263: PUSH
14264: LD_INT 70
14266: PUSH
14267: LD_INT 80
14269: PUSH
14270: LD_INT 90
14272: PUSH
14273: LD_INT 100
14275: PUSH
14276: LD_INT 110
14278: PUSH
14279: LD_INT 120
14281: PUSH
14282: LD_INT 130
14284: PUSH
14285: LD_INT 140
14287: PUSH
14288: LD_INT 150
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 1
14310: PPUSH
14311: LD_INT 15
14313: PPUSH
14314: CALL_OW 12
14318: ARRAY
14319: ST_TO_ADDR
// if ValidHex ( x , y ) then
14320: LD_VAR 0 3
14324: PPUSH
14325: LD_VAR 0 4
14329: PPUSH
14330: CALL_OW 488
14334: IFFALSE 14357
// begin result := [ x , y ] ;
14336: LD_ADDR_VAR 0 1
14340: PUSH
14341: LD_VAR 0 3
14345: PUSH
14346: LD_VAR 0 4
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: ST_TO_ADDR
// break ;
14355: GO 14359
// end ; end ;
14357: GO 14159
14359: POP
14360: POP
// if result then
14361: LD_VAR 0 1
14365: IFFALSE 14425
// begin ToLua ( playSibBomb() ) ;
14367: LD_STRING playSibBomb()
14369: PPUSH
14370: CALL_OW 559
// wait ( 0 0$14 ) ;
14374: LD_INT 490
14376: PPUSH
14377: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14381: LD_VAR 0 1
14385: PUSH
14386: LD_INT 1
14388: ARRAY
14389: PPUSH
14390: LD_VAR 0 1
14394: PUSH
14395: LD_INT 2
14397: ARRAY
14398: PPUSH
14399: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14403: LD_VAR 0 1
14407: PUSH
14408: LD_INT 1
14410: ARRAY
14411: PPUSH
14412: LD_VAR 0 1
14416: PUSH
14417: LD_INT 2
14419: ARRAY
14420: PPUSH
14421: CALL_OW 429
// end ; end ;
14425: LD_VAR 0 1
14429: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14430: LD_EXP 43
14434: PUSH
14435: LD_EXP 65
14439: AND
14440: IFFALSE 14452
14442: GO 14444
14444: DISABLE
// YouLost (  ) ;
14445: LD_STRING 
14447: PPUSH
14448: CALL_OW 104
14452: END
// every 0 0$1 trigger StreamModeActive and sFog do
14453: LD_EXP 43
14457: PUSH
14458: LD_EXP 64
14462: AND
14463: IFFALSE 14477
14465: GO 14467
14467: DISABLE
// FogOff ( your_side ) ;
14468: LD_OWVAR 2
14472: PPUSH
14473: CALL_OW 344
14477: END
// every 0 0$1 trigger StreamModeActive and sSun do
14478: LD_EXP 43
14482: PUSH
14483: LD_EXP 66
14487: AND
14488: IFFALSE 14516
14490: GO 14492
14492: DISABLE
// begin solar_recharge_percent := 0 ;
14493: LD_ADDR_OWVAR 79
14497: PUSH
14498: LD_INT 0
14500: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14501: LD_INT 10500
14503: PPUSH
14504: CALL_OW 67
// solar_recharge_percent := 100 ;
14508: LD_ADDR_OWVAR 79
14512: PUSH
14513: LD_INT 100
14515: ST_TO_ADDR
// end ;
14516: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14517: LD_EXP 43
14521: PUSH
14522: LD_EXP 67
14526: AND
14527: IFFALSE 14766
14529: GO 14531
14531: DISABLE
14532: LD_INT 0
14534: PPUSH
14535: PPUSH
14536: PPUSH
// begin tmp := [ ] ;
14537: LD_ADDR_VAR 0 3
14541: PUSH
14542: EMPTY
14543: ST_TO_ADDR
// for i := 1 to 6 do
14544: LD_ADDR_VAR 0 1
14548: PUSH
14549: DOUBLE
14550: LD_INT 1
14552: DEC
14553: ST_TO_ADDR
14554: LD_INT 6
14556: PUSH
14557: FOR_TO
14558: IFFALSE 14663
// begin uc_nation := nation_nature ;
14560: LD_ADDR_OWVAR 21
14564: PUSH
14565: LD_INT 0
14567: ST_TO_ADDR
// uc_side := 0 ;
14568: LD_ADDR_OWVAR 20
14572: PUSH
14573: LD_INT 0
14575: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14576: LD_ADDR_OWVAR 29
14580: PUSH
14581: LD_INT 12
14583: PUSH
14584: LD_INT 12
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: ST_TO_ADDR
// hc_agressivity := 20 ;
14591: LD_ADDR_OWVAR 35
14595: PUSH
14596: LD_INT 20
14598: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14599: LD_ADDR_OWVAR 28
14603: PUSH
14604: LD_INT 17
14606: ST_TO_ADDR
// hc_gallery :=  ;
14607: LD_ADDR_OWVAR 33
14611: PUSH
14612: LD_STRING 
14614: ST_TO_ADDR
// hc_name :=  ;
14615: LD_ADDR_OWVAR 26
14619: PUSH
14620: LD_STRING 
14622: ST_TO_ADDR
// un := CreateHuman ;
14623: LD_ADDR_VAR 0 2
14627: PUSH
14628: CALL_OW 44
14632: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14633: LD_VAR 0 2
14637: PPUSH
14638: LD_INT 1
14640: PPUSH
14641: CALL_OW 51
// tmp := tmp ^ un ;
14645: LD_ADDR_VAR 0 3
14649: PUSH
14650: LD_VAR 0 3
14654: PUSH
14655: LD_VAR 0 2
14659: ADD
14660: ST_TO_ADDR
// end ;
14661: GO 14557
14663: POP
14664: POP
// repeat wait ( 0 0$1 ) ;
14665: LD_INT 35
14667: PPUSH
14668: CALL_OW 67
// for un in tmp do
14672: LD_ADDR_VAR 0 2
14676: PUSH
14677: LD_VAR 0 3
14681: PUSH
14682: FOR_IN
14683: IFFALSE 14757
// begin if IsDead ( un ) then
14685: LD_VAR 0 2
14689: PPUSH
14690: CALL_OW 301
14694: IFFALSE 14714
// begin tmp := tmp diff un ;
14696: LD_ADDR_VAR 0 3
14700: PUSH
14701: LD_VAR 0 3
14705: PUSH
14706: LD_VAR 0 2
14710: DIFF
14711: ST_TO_ADDR
// continue ;
14712: GO 14682
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14714: LD_VAR 0 2
14718: PPUSH
14719: LD_INT 3
14721: PUSH
14722: LD_INT 22
14724: PUSH
14725: LD_INT 0
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PPUSH
14736: CALL_OW 69
14740: PPUSH
14741: LD_VAR 0 2
14745: PPUSH
14746: CALL_OW 74
14750: PPUSH
14751: CALL_OW 115
// end ;
14755: GO 14682
14757: POP
14758: POP
// until not tmp ;
14759: LD_VAR 0 3
14763: NOT
14764: IFFALSE 14665
// end ;
14766: PPOPN 3
14768: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14769: LD_EXP 43
14773: PUSH
14774: LD_EXP 68
14778: AND
14779: IFFALSE 14833
14781: GO 14783
14783: DISABLE
// begin ToLua ( displayTroll(); ) ;
14784: LD_STRING displayTroll();
14786: PPUSH
14787: CALL_OW 559
// wait ( 3 3$00 ) ;
14791: LD_INT 6300
14793: PPUSH
14794: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14798: LD_STRING hideTroll();
14800: PPUSH
14801: CALL_OW 559
// wait ( 1 1$00 ) ;
14805: LD_INT 2100
14807: PPUSH
14808: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14812: LD_STRING displayTroll();
14814: PPUSH
14815: CALL_OW 559
// wait ( 1 1$00 ) ;
14819: LD_INT 2100
14821: PPUSH
14822: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14826: LD_STRING hideTroll();
14828: PPUSH
14829: CALL_OW 559
// end ;
14833: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14834: LD_EXP 43
14838: PUSH
14839: LD_EXP 69
14843: AND
14844: IFFALSE 14907
14846: GO 14848
14848: DISABLE
14849: LD_INT 0
14851: PPUSH
// begin p := 0 ;
14852: LD_ADDR_VAR 0 1
14856: PUSH
14857: LD_INT 0
14859: ST_TO_ADDR
// repeat game_speed := 1 ;
14860: LD_ADDR_OWVAR 65
14864: PUSH
14865: LD_INT 1
14867: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14868: LD_INT 35
14870: PPUSH
14871: CALL_OW 67
// p := p + 1 ;
14875: LD_ADDR_VAR 0 1
14879: PUSH
14880: LD_VAR 0 1
14884: PUSH
14885: LD_INT 1
14887: PLUS
14888: ST_TO_ADDR
// until p >= 60 ;
14889: LD_VAR 0 1
14893: PUSH
14894: LD_INT 60
14896: GREATEREQUAL
14897: IFFALSE 14860
// game_speed := 4 ;
14899: LD_ADDR_OWVAR 65
14903: PUSH
14904: LD_INT 4
14906: ST_TO_ADDR
// end ;
14907: PPOPN 1
14909: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14910: LD_EXP 43
14914: PUSH
14915: LD_EXP 70
14919: AND
14920: IFFALSE 15066
14922: GO 14924
14924: DISABLE
14925: LD_INT 0
14927: PPUSH
14928: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14929: LD_ADDR_VAR 0 1
14933: PUSH
14934: LD_INT 22
14936: PUSH
14937: LD_OWVAR 2
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 2
14948: PUSH
14949: LD_INT 30
14951: PUSH
14952: LD_INT 0
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PUSH
14959: LD_INT 30
14961: PUSH
14962: LD_INT 1
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: LIST
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PPUSH
14978: CALL_OW 69
14982: ST_TO_ADDR
// if not depot then
14983: LD_VAR 0 1
14987: NOT
14988: IFFALSE 14992
// exit ;
14990: GO 15066
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14992: LD_ADDR_VAR 0 2
14996: PUSH
14997: LD_VAR 0 1
15001: PUSH
15002: LD_INT 1
15004: PPUSH
15005: LD_VAR 0 1
15009: PPUSH
15010: CALL_OW 12
15014: ARRAY
15015: PPUSH
15016: CALL_OW 274
15020: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15021: LD_VAR 0 2
15025: PPUSH
15026: LD_INT 1
15028: PPUSH
15029: LD_INT 0
15031: PPUSH
15032: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15036: LD_VAR 0 2
15040: PPUSH
15041: LD_INT 2
15043: PPUSH
15044: LD_INT 0
15046: PPUSH
15047: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15051: LD_VAR 0 2
15055: PPUSH
15056: LD_INT 3
15058: PPUSH
15059: LD_INT 0
15061: PPUSH
15062: CALL_OW 277
// end ;
15066: PPOPN 2
15068: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15069: LD_EXP 43
15073: PUSH
15074: LD_EXP 71
15078: AND
15079: IFFALSE 15176
15081: GO 15083
15083: DISABLE
15084: LD_INT 0
15086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15087: LD_ADDR_VAR 0 1
15091: PUSH
15092: LD_INT 22
15094: PUSH
15095: LD_OWVAR 2
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 21
15106: PUSH
15107: LD_INT 1
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 3
15116: PUSH
15117: LD_INT 23
15119: PUSH
15120: LD_INT 0
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: LIST
15135: PPUSH
15136: CALL_OW 69
15140: ST_TO_ADDR
// if not tmp then
15141: LD_VAR 0 1
15145: NOT
15146: IFFALSE 15150
// exit ;
15148: GO 15176
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15150: LD_VAR 0 1
15154: PUSH
15155: LD_INT 1
15157: PPUSH
15158: LD_VAR 0 1
15162: PPUSH
15163: CALL_OW 12
15167: ARRAY
15168: PPUSH
15169: LD_INT 200
15171: PPUSH
15172: CALL_OW 234
// end ;
15176: PPOPN 1
15178: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15179: LD_EXP 43
15183: PUSH
15184: LD_EXP 72
15188: AND
15189: IFFALSE 15268
15191: GO 15193
15193: DISABLE
15194: LD_INT 0
15196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15197: LD_ADDR_VAR 0 1
15201: PUSH
15202: LD_INT 22
15204: PUSH
15205: LD_OWVAR 2
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: LD_INT 21
15216: PUSH
15217: LD_INT 2
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PPUSH
15228: CALL_OW 69
15232: ST_TO_ADDR
// if not tmp then
15233: LD_VAR 0 1
15237: NOT
15238: IFFALSE 15242
// exit ;
15240: GO 15268
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15242: LD_VAR 0 1
15246: PUSH
15247: LD_INT 1
15249: PPUSH
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 12
15259: ARRAY
15260: PPUSH
15261: LD_INT 60
15263: PPUSH
15264: CALL_OW 234
// end ;
15268: PPOPN 1
15270: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15271: LD_EXP 43
15275: PUSH
15276: LD_EXP 73
15280: AND
15281: IFFALSE 15380
15283: GO 15285
15285: DISABLE
15286: LD_INT 0
15288: PPUSH
15289: PPUSH
// begin enable ;
15290: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15291: LD_ADDR_VAR 0 1
15295: PUSH
15296: LD_INT 22
15298: PUSH
15299: LD_OWVAR 2
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: LD_INT 61
15310: PUSH
15311: EMPTY
15312: LIST
15313: PUSH
15314: LD_INT 33
15316: PUSH
15317: LD_INT 2
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: LIST
15328: PPUSH
15329: CALL_OW 69
15333: ST_TO_ADDR
// if not tmp then
15334: LD_VAR 0 1
15338: NOT
15339: IFFALSE 15343
// exit ;
15341: GO 15380
// for i in tmp do
15343: LD_ADDR_VAR 0 2
15347: PUSH
15348: LD_VAR 0 1
15352: PUSH
15353: FOR_IN
15354: IFFALSE 15378
// if IsControledBy ( i ) then
15356: LD_VAR 0 2
15360: PPUSH
15361: CALL_OW 312
15365: IFFALSE 15376
// ComUnlink ( i ) ;
15367: LD_VAR 0 2
15371: PPUSH
15372: CALL_OW 136
15376: GO 15353
15378: POP
15379: POP
// end ;
15380: PPOPN 2
15382: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15383: LD_EXP 43
15387: PUSH
15388: LD_EXP 74
15392: AND
15393: IFFALSE 15533
15395: GO 15397
15397: DISABLE
15398: LD_INT 0
15400: PPUSH
15401: PPUSH
// begin ToLua ( displayPowell(); ) ;
15402: LD_STRING displayPowell();
15404: PPUSH
15405: CALL_OW 559
// uc_side := 0 ;
15409: LD_ADDR_OWVAR 20
15413: PUSH
15414: LD_INT 0
15416: ST_TO_ADDR
// uc_nation := 2 ;
15417: LD_ADDR_OWVAR 21
15421: PUSH
15422: LD_INT 2
15424: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15425: LD_ADDR_OWVAR 37
15429: PUSH
15430: LD_INT 14
15432: ST_TO_ADDR
// vc_engine := engine_siberite ;
15433: LD_ADDR_OWVAR 39
15437: PUSH
15438: LD_INT 3
15440: ST_TO_ADDR
// vc_control := control_apeman ;
15441: LD_ADDR_OWVAR 38
15445: PUSH
15446: LD_INT 5
15448: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15449: LD_ADDR_OWVAR 40
15453: PUSH
15454: LD_INT 29
15456: ST_TO_ADDR
// un := CreateVehicle ;
15457: LD_ADDR_VAR 0 2
15461: PUSH
15462: CALL_OW 45
15466: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15467: LD_VAR 0 2
15471: PPUSH
15472: LD_INT 1
15474: PPUSH
15475: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15479: LD_INT 35
15481: PPUSH
15482: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15486: LD_VAR 0 2
15490: PPUSH
15491: LD_INT 22
15493: PUSH
15494: LD_OWVAR 2
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PPUSH
15503: CALL_OW 69
15507: PPUSH
15508: LD_VAR 0 2
15512: PPUSH
15513: CALL_OW 74
15517: PPUSH
15518: CALL_OW 115
// until IsDead ( un ) ;
15522: LD_VAR 0 2
15526: PPUSH
15527: CALL_OW 301
15531: IFFALSE 15479
// end ;
15533: PPOPN 2
15535: END
// every 0 0$1 trigger StreamModeActive and sStu do
15536: LD_EXP 43
15540: PUSH
15541: LD_EXP 82
15545: AND
15546: IFFALSE 15562
15548: GO 15550
15550: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15551: LD_STRING displayStucuk();
15553: PPUSH
15554: CALL_OW 559
// ResetFog ;
15558: CALL_OW 335
// end ;
15562: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15563: LD_EXP 43
15567: PUSH
15568: LD_EXP 75
15572: AND
15573: IFFALSE 15714
15575: GO 15577
15577: DISABLE
15578: LD_INT 0
15580: PPUSH
15581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15582: LD_ADDR_VAR 0 2
15586: PUSH
15587: LD_INT 22
15589: PUSH
15590: LD_OWVAR 2
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: LD_INT 21
15601: PUSH
15602: LD_INT 1
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PPUSH
15613: CALL_OW 69
15617: ST_TO_ADDR
// if not tmp then
15618: LD_VAR 0 2
15622: NOT
15623: IFFALSE 15627
// exit ;
15625: GO 15714
// un := tmp [ rand ( 1 , tmp ) ] ;
15627: LD_ADDR_VAR 0 1
15631: PUSH
15632: LD_VAR 0 2
15636: PUSH
15637: LD_INT 1
15639: PPUSH
15640: LD_VAR 0 2
15644: PPUSH
15645: CALL_OW 12
15649: ARRAY
15650: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15651: LD_VAR 0 1
15655: PPUSH
15656: LD_INT 0
15658: PPUSH
15659: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15663: LD_VAR 0 1
15667: PPUSH
15668: LD_OWVAR 3
15672: PUSH
15673: LD_VAR 0 1
15677: DIFF
15678: PPUSH
15679: LD_VAR 0 1
15683: PPUSH
15684: CALL_OW 74
15688: PPUSH
15689: CALL_OW 115
// wait ( 0 0$20 ) ;
15693: LD_INT 700
15695: PPUSH
15696: CALL_OW 67
// SetSide ( un , your_side ) ;
15700: LD_VAR 0 1
15704: PPUSH
15705: LD_OWVAR 2
15709: PPUSH
15710: CALL_OW 235
// end ;
15714: PPOPN 2
15716: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15717: LD_EXP 43
15721: PUSH
15722: LD_EXP 76
15726: AND
15727: IFFALSE 15833
15729: GO 15731
15731: DISABLE
15732: LD_INT 0
15734: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15735: LD_ADDR_VAR 0 1
15739: PUSH
15740: LD_INT 22
15742: PUSH
15743: LD_OWVAR 2
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PUSH
15752: LD_INT 2
15754: PUSH
15755: LD_INT 30
15757: PUSH
15758: LD_INT 0
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 30
15767: PUSH
15768: LD_INT 1
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: LIST
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PPUSH
15784: CALL_OW 69
15788: ST_TO_ADDR
// if not depot then
15789: LD_VAR 0 1
15793: NOT
15794: IFFALSE 15798
// exit ;
15796: GO 15833
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15798: LD_VAR 0 1
15802: PUSH
15803: LD_INT 1
15805: ARRAY
15806: PPUSH
15807: CALL_OW 250
15811: PPUSH
15812: LD_VAR 0 1
15816: PUSH
15817: LD_INT 1
15819: ARRAY
15820: PPUSH
15821: CALL_OW 251
15825: PPUSH
15826: LD_INT 70
15828: PPUSH
15829: CALL_OW 495
// end ;
15833: PPOPN 1
15835: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15836: LD_EXP 43
15840: PUSH
15841: LD_EXP 77
15845: AND
15846: IFFALSE 16057
15848: GO 15850
15850: DISABLE
15851: LD_INT 0
15853: PPUSH
15854: PPUSH
15855: PPUSH
15856: PPUSH
15857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15858: LD_ADDR_VAR 0 5
15862: PUSH
15863: LD_INT 22
15865: PUSH
15866: LD_OWVAR 2
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 21
15877: PUSH
15878: LD_INT 1
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PPUSH
15889: CALL_OW 69
15893: ST_TO_ADDR
// if not tmp then
15894: LD_VAR 0 5
15898: NOT
15899: IFFALSE 15903
// exit ;
15901: GO 16057
// for i in tmp do
15903: LD_ADDR_VAR 0 1
15907: PUSH
15908: LD_VAR 0 5
15912: PUSH
15913: FOR_IN
15914: IFFALSE 16055
// begin d := rand ( 0 , 5 ) ;
15916: LD_ADDR_VAR 0 4
15920: PUSH
15921: LD_INT 0
15923: PPUSH
15924: LD_INT 5
15926: PPUSH
15927: CALL_OW 12
15931: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15932: LD_ADDR_VAR 0 2
15936: PUSH
15937: LD_VAR 0 1
15941: PPUSH
15942: CALL_OW 250
15946: PPUSH
15947: LD_VAR 0 4
15951: PPUSH
15952: LD_INT 3
15954: PPUSH
15955: LD_INT 12
15957: PPUSH
15958: CALL_OW 12
15962: PPUSH
15963: CALL_OW 272
15967: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15968: LD_ADDR_VAR 0 3
15972: PUSH
15973: LD_VAR 0 1
15977: PPUSH
15978: CALL_OW 251
15982: PPUSH
15983: LD_VAR 0 4
15987: PPUSH
15988: LD_INT 3
15990: PPUSH
15991: LD_INT 12
15993: PPUSH
15994: CALL_OW 12
15998: PPUSH
15999: CALL_OW 273
16003: ST_TO_ADDR
// if ValidHex ( x , y ) then
16004: LD_VAR 0 2
16008: PPUSH
16009: LD_VAR 0 3
16013: PPUSH
16014: CALL_OW 488
16018: IFFALSE 16053
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16020: LD_VAR 0 1
16024: PPUSH
16025: LD_VAR 0 2
16029: PPUSH
16030: LD_VAR 0 3
16034: PPUSH
16035: LD_INT 3
16037: PPUSH
16038: LD_INT 6
16040: PPUSH
16041: CALL_OW 12
16045: PPUSH
16046: LD_INT 1
16048: PPUSH
16049: CALL_OW 483
// end ;
16053: GO 15913
16055: POP
16056: POP
// end ;
16057: PPOPN 5
16059: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16060: LD_EXP 43
16064: PUSH
16065: LD_EXP 78
16069: AND
16070: IFFALSE 16164
16072: GO 16074
16074: DISABLE
16075: LD_INT 0
16077: PPUSH
16078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16079: LD_ADDR_VAR 0 2
16083: PUSH
16084: LD_INT 22
16086: PUSH
16087: LD_OWVAR 2
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: LD_INT 32
16098: PUSH
16099: LD_INT 1
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: LD_INT 21
16108: PUSH
16109: LD_INT 2
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: LIST
16120: PPUSH
16121: CALL_OW 69
16125: ST_TO_ADDR
// if not tmp then
16126: LD_VAR 0 2
16130: NOT
16131: IFFALSE 16135
// exit ;
16133: GO 16164
// for i in tmp do
16135: LD_ADDR_VAR 0 1
16139: PUSH
16140: LD_VAR 0 2
16144: PUSH
16145: FOR_IN
16146: IFFALSE 16162
// SetFuel ( i , 0 ) ;
16148: LD_VAR 0 1
16152: PPUSH
16153: LD_INT 0
16155: PPUSH
16156: CALL_OW 240
16160: GO 16145
16162: POP
16163: POP
// end ;
16164: PPOPN 2
16166: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16167: LD_EXP 43
16171: PUSH
16172: LD_EXP 79
16176: AND
16177: IFFALSE 16243
16179: GO 16181
16181: DISABLE
16182: LD_INT 0
16184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16185: LD_ADDR_VAR 0 1
16189: PUSH
16190: LD_INT 22
16192: PUSH
16193: LD_OWVAR 2
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 30
16204: PUSH
16205: LD_INT 29
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PPUSH
16216: CALL_OW 69
16220: ST_TO_ADDR
// if not tmp then
16221: LD_VAR 0 1
16225: NOT
16226: IFFALSE 16230
// exit ;
16228: GO 16243
// DestroyUnit ( tmp [ 1 ] ) ;
16230: LD_VAR 0 1
16234: PUSH
16235: LD_INT 1
16237: ARRAY
16238: PPUSH
16239: CALL_OW 65
// end ;
16243: PPOPN 1
16245: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16246: LD_EXP 43
16250: PUSH
16251: LD_EXP 81
16255: AND
16256: IFFALSE 16385
16258: GO 16260
16260: DISABLE
16261: LD_INT 0
16263: PPUSH
// begin uc_side := 0 ;
16264: LD_ADDR_OWVAR 20
16268: PUSH
16269: LD_INT 0
16271: ST_TO_ADDR
// uc_nation := nation_arabian ;
16272: LD_ADDR_OWVAR 21
16276: PUSH
16277: LD_INT 2
16279: ST_TO_ADDR
// hc_gallery :=  ;
16280: LD_ADDR_OWVAR 33
16284: PUSH
16285: LD_STRING 
16287: ST_TO_ADDR
// hc_name :=  ;
16288: LD_ADDR_OWVAR 26
16292: PUSH
16293: LD_STRING 
16295: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16296: LD_INT 1
16298: PPUSH
16299: LD_INT 11
16301: PPUSH
16302: LD_INT 10
16304: PPUSH
16305: CALL_OW 380
// un := CreateHuman ;
16309: LD_ADDR_VAR 0 1
16313: PUSH
16314: CALL_OW 44
16318: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16319: LD_VAR 0 1
16323: PPUSH
16324: LD_INT 1
16326: PPUSH
16327: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16331: LD_INT 35
16333: PPUSH
16334: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16338: LD_VAR 0 1
16342: PPUSH
16343: LD_INT 22
16345: PUSH
16346: LD_OWVAR 2
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PPUSH
16355: CALL_OW 69
16359: PPUSH
16360: LD_VAR 0 1
16364: PPUSH
16365: CALL_OW 74
16369: PPUSH
16370: CALL_OW 115
// until IsDead ( un ) ;
16374: LD_VAR 0 1
16378: PPUSH
16379: CALL_OW 301
16383: IFFALSE 16331
// end ;
16385: PPOPN 1
16387: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16388: LD_EXP 43
16392: PUSH
16393: LD_EXP 83
16397: AND
16398: IFFALSE 16410
16400: GO 16402
16402: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16403: LD_STRING earthquake(getX(game), 0, 32)
16405: PPUSH
16406: CALL_OW 559
16410: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16411: LD_EXP 43
16415: PUSH
16416: LD_EXP 84
16420: AND
16421: IFFALSE 16512
16423: GO 16425
16425: DISABLE
16426: LD_INT 0
16428: PPUSH
// begin enable ;
16429: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16430: LD_ADDR_VAR 0 1
16434: PUSH
16435: LD_INT 22
16437: PUSH
16438: LD_OWVAR 2
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 21
16449: PUSH
16450: LD_INT 2
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: LD_INT 33
16459: PUSH
16460: LD_INT 3
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: LIST
16471: PPUSH
16472: CALL_OW 69
16476: ST_TO_ADDR
// if not tmp then
16477: LD_VAR 0 1
16481: NOT
16482: IFFALSE 16486
// exit ;
16484: GO 16512
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16486: LD_VAR 0 1
16490: PUSH
16491: LD_INT 1
16493: PPUSH
16494: LD_VAR 0 1
16498: PPUSH
16499: CALL_OW 12
16503: ARRAY
16504: PPUSH
16505: LD_INT 1
16507: PPUSH
16508: CALL_OW 234
// end ;
16512: PPOPN 1
16514: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16515: LD_EXP 43
16519: PUSH
16520: LD_EXP 85
16524: AND
16525: IFFALSE 16666
16527: GO 16529
16529: DISABLE
16530: LD_INT 0
16532: PPUSH
16533: PPUSH
16534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16535: LD_ADDR_VAR 0 3
16539: PUSH
16540: LD_INT 22
16542: PUSH
16543: LD_OWVAR 2
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 25
16554: PUSH
16555: LD_INT 1
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PPUSH
16566: CALL_OW 69
16570: ST_TO_ADDR
// if not tmp then
16571: LD_VAR 0 3
16575: NOT
16576: IFFALSE 16580
// exit ;
16578: GO 16666
// un := tmp [ rand ( 1 , tmp ) ] ;
16580: LD_ADDR_VAR 0 2
16584: PUSH
16585: LD_VAR 0 3
16589: PUSH
16590: LD_INT 1
16592: PPUSH
16593: LD_VAR 0 3
16597: PPUSH
16598: CALL_OW 12
16602: ARRAY
16603: ST_TO_ADDR
// if Crawls ( un ) then
16604: LD_VAR 0 2
16608: PPUSH
16609: CALL_OW 318
16613: IFFALSE 16624
// ComWalk ( un ) ;
16615: LD_VAR 0 2
16619: PPUSH
16620: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16624: LD_VAR 0 2
16628: PPUSH
16629: LD_INT 9
16631: PPUSH
16632: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16636: LD_INT 28
16638: PPUSH
16639: LD_OWVAR 2
16643: PPUSH
16644: LD_INT 2
16646: PPUSH
16647: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16651: LD_INT 29
16653: PPUSH
16654: LD_OWVAR 2
16658: PPUSH
16659: LD_INT 2
16661: PPUSH
16662: CALL_OW 322
// end ;
16666: PPOPN 3
16668: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16669: LD_EXP 43
16673: PUSH
16674: LD_EXP 86
16678: AND
16679: IFFALSE 16790
16681: GO 16683
16683: DISABLE
16684: LD_INT 0
16686: PPUSH
16687: PPUSH
16688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16689: LD_ADDR_VAR 0 3
16693: PUSH
16694: LD_INT 22
16696: PUSH
16697: LD_OWVAR 2
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 25
16708: PUSH
16709: LD_INT 1
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PPUSH
16720: CALL_OW 69
16724: ST_TO_ADDR
// if not tmp then
16725: LD_VAR 0 3
16729: NOT
16730: IFFALSE 16734
// exit ;
16732: GO 16790
// un := tmp [ rand ( 1 , tmp ) ] ;
16734: LD_ADDR_VAR 0 2
16738: PUSH
16739: LD_VAR 0 3
16743: PUSH
16744: LD_INT 1
16746: PPUSH
16747: LD_VAR 0 3
16751: PPUSH
16752: CALL_OW 12
16756: ARRAY
16757: ST_TO_ADDR
// if Crawls ( un ) then
16758: LD_VAR 0 2
16762: PPUSH
16763: CALL_OW 318
16767: IFFALSE 16778
// ComWalk ( un ) ;
16769: LD_VAR 0 2
16773: PPUSH
16774: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16778: LD_VAR 0 2
16782: PPUSH
16783: LD_INT 8
16785: PPUSH
16786: CALL_OW 336
// end ;
16790: PPOPN 3
16792: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16793: LD_EXP 43
16797: PUSH
16798: LD_EXP 87
16802: AND
16803: IFFALSE 16947
16805: GO 16807
16807: DISABLE
16808: LD_INT 0
16810: PPUSH
16811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16812: LD_ADDR_VAR 0 2
16816: PUSH
16817: LD_INT 22
16819: PUSH
16820: LD_OWVAR 2
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 21
16831: PUSH
16832: LD_INT 2
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 2
16841: PUSH
16842: LD_INT 34
16844: PUSH
16845: LD_INT 12
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 34
16854: PUSH
16855: LD_INT 51
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 34
16864: PUSH
16865: LD_INT 32
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: LIST
16882: PPUSH
16883: CALL_OW 69
16887: ST_TO_ADDR
// if not tmp then
16888: LD_VAR 0 2
16892: NOT
16893: IFFALSE 16897
// exit ;
16895: GO 16947
// for i in tmp do
16897: LD_ADDR_VAR 0 1
16901: PUSH
16902: LD_VAR 0 2
16906: PUSH
16907: FOR_IN
16908: IFFALSE 16945
// if GetCargo ( i , mat_artifact ) = 0 then
16910: LD_VAR 0 1
16914: PPUSH
16915: LD_INT 4
16917: PPUSH
16918: CALL_OW 289
16922: PUSH
16923: LD_INT 0
16925: EQUAL
16926: IFFALSE 16943
// SetCargo ( i , mat_siberit , 100 ) ;
16928: LD_VAR 0 1
16932: PPUSH
16933: LD_INT 3
16935: PPUSH
16936: LD_INT 100
16938: PPUSH
16939: CALL_OW 290
16943: GO 16907
16945: POP
16946: POP
// end ;
16947: PPOPN 2
16949: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16950: LD_EXP 43
16954: PUSH
16955: LD_EXP 88
16959: AND
16960: IFFALSE 17143
16962: GO 16964
16964: DISABLE
16965: LD_INT 0
16967: PPUSH
16968: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16969: LD_ADDR_VAR 0 2
16973: PUSH
16974: LD_INT 22
16976: PUSH
16977: LD_OWVAR 2
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PPUSH
16986: CALL_OW 69
16990: ST_TO_ADDR
// if not tmp then
16991: LD_VAR 0 2
16995: NOT
16996: IFFALSE 17000
// exit ;
16998: GO 17143
// for i := 1 to 2 do
17000: LD_ADDR_VAR 0 1
17004: PUSH
17005: DOUBLE
17006: LD_INT 1
17008: DEC
17009: ST_TO_ADDR
17010: LD_INT 2
17012: PUSH
17013: FOR_TO
17014: IFFALSE 17141
// begin uc_side := your_side ;
17016: LD_ADDR_OWVAR 20
17020: PUSH
17021: LD_OWVAR 2
17025: ST_TO_ADDR
// uc_nation := nation_american ;
17026: LD_ADDR_OWVAR 21
17030: PUSH
17031: LD_INT 1
17033: ST_TO_ADDR
// vc_chassis := us_morphling ;
17034: LD_ADDR_OWVAR 37
17038: PUSH
17039: LD_INT 5
17041: ST_TO_ADDR
// vc_engine := engine_siberite ;
17042: LD_ADDR_OWVAR 39
17046: PUSH
17047: LD_INT 3
17049: ST_TO_ADDR
// vc_control := control_computer ;
17050: LD_ADDR_OWVAR 38
17054: PUSH
17055: LD_INT 3
17057: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17058: LD_ADDR_OWVAR 40
17062: PUSH
17063: LD_INT 10
17065: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17066: LD_VAR 0 2
17070: PUSH
17071: LD_INT 1
17073: ARRAY
17074: PPUSH
17075: CALL_OW 310
17079: NOT
17080: IFFALSE 17127
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17082: CALL_OW 45
17086: PPUSH
17087: LD_VAR 0 2
17091: PUSH
17092: LD_INT 1
17094: ARRAY
17095: PPUSH
17096: CALL_OW 250
17100: PPUSH
17101: LD_VAR 0 2
17105: PUSH
17106: LD_INT 1
17108: ARRAY
17109: PPUSH
17110: CALL_OW 251
17114: PPUSH
17115: LD_INT 12
17117: PPUSH
17118: LD_INT 1
17120: PPUSH
17121: CALL_OW 50
17125: GO 17139
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17127: CALL_OW 45
17131: PPUSH
17132: LD_INT 1
17134: PPUSH
17135: CALL_OW 51
// end ;
17139: GO 17013
17141: POP
17142: POP
// end ;
17143: PPOPN 2
17145: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17146: LD_EXP 43
17150: PUSH
17151: LD_EXP 89
17155: AND
17156: IFFALSE 17378
17158: GO 17160
17160: DISABLE
17161: LD_INT 0
17163: PPUSH
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17169: LD_ADDR_VAR 0 6
17173: PUSH
17174: LD_INT 22
17176: PUSH
17177: LD_OWVAR 2
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 21
17188: PUSH
17189: LD_INT 1
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 3
17198: PUSH
17199: LD_INT 23
17201: PUSH
17202: LD_INT 0
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: LIST
17217: PPUSH
17218: CALL_OW 69
17222: ST_TO_ADDR
// if not tmp then
17223: LD_VAR 0 6
17227: NOT
17228: IFFALSE 17232
// exit ;
17230: GO 17378
// s1 := rand ( 1 , 4 ) ;
17232: LD_ADDR_VAR 0 2
17236: PUSH
17237: LD_INT 1
17239: PPUSH
17240: LD_INT 4
17242: PPUSH
17243: CALL_OW 12
17247: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17248: LD_ADDR_VAR 0 4
17252: PUSH
17253: LD_VAR 0 6
17257: PUSH
17258: LD_INT 1
17260: ARRAY
17261: PPUSH
17262: LD_VAR 0 2
17266: PPUSH
17267: CALL_OW 259
17271: ST_TO_ADDR
// if s1 = 1 then
17272: LD_VAR 0 2
17276: PUSH
17277: LD_INT 1
17279: EQUAL
17280: IFFALSE 17300
// s2 := rand ( 2 , 4 ) else
17282: LD_ADDR_VAR 0 3
17286: PUSH
17287: LD_INT 2
17289: PPUSH
17290: LD_INT 4
17292: PPUSH
17293: CALL_OW 12
17297: ST_TO_ADDR
17298: GO 17308
// s2 := 1 ;
17300: LD_ADDR_VAR 0 3
17304: PUSH
17305: LD_INT 1
17307: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17308: LD_ADDR_VAR 0 5
17312: PUSH
17313: LD_VAR 0 6
17317: PUSH
17318: LD_INT 1
17320: ARRAY
17321: PPUSH
17322: LD_VAR 0 3
17326: PPUSH
17327: CALL_OW 259
17331: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17332: LD_VAR 0 6
17336: PUSH
17337: LD_INT 1
17339: ARRAY
17340: PPUSH
17341: LD_VAR 0 2
17345: PPUSH
17346: LD_VAR 0 5
17350: PPUSH
17351: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17355: LD_VAR 0 6
17359: PUSH
17360: LD_INT 1
17362: ARRAY
17363: PPUSH
17364: LD_VAR 0 3
17368: PPUSH
17369: LD_VAR 0 4
17373: PPUSH
17374: CALL_OW 237
// end ;
17378: PPOPN 6
17380: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17381: LD_EXP 43
17385: PUSH
17386: LD_EXP 90
17390: AND
17391: IFFALSE 17470
17393: GO 17395
17395: DISABLE
17396: LD_INT 0
17398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17399: LD_ADDR_VAR 0 1
17403: PUSH
17404: LD_INT 22
17406: PUSH
17407: LD_OWVAR 2
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 30
17418: PUSH
17419: LD_INT 3
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PPUSH
17430: CALL_OW 69
17434: ST_TO_ADDR
// if not tmp then
17435: LD_VAR 0 1
17439: NOT
17440: IFFALSE 17444
// exit ;
17442: GO 17470
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17444: LD_VAR 0 1
17448: PUSH
17449: LD_INT 1
17451: PPUSH
17452: LD_VAR 0 1
17456: PPUSH
17457: CALL_OW 12
17461: ARRAY
17462: PPUSH
17463: LD_INT 1
17465: PPUSH
17466: CALL_OW 234
// end ;
17470: PPOPN 1
17472: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17473: LD_EXP 43
17477: PUSH
17478: LD_EXP 91
17482: AND
17483: IFFALSE 17595
17485: GO 17487
17487: DISABLE
17488: LD_INT 0
17490: PPUSH
17491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17492: LD_ADDR_VAR 0 2
17496: PUSH
17497: LD_INT 22
17499: PUSH
17500: LD_OWVAR 2
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 2
17511: PUSH
17512: LD_INT 30
17514: PUSH
17515: LD_INT 27
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 30
17524: PUSH
17525: LD_INT 26
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 30
17534: PUSH
17535: LD_INT 28
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PPUSH
17552: CALL_OW 69
17556: ST_TO_ADDR
// if not tmp then
17557: LD_VAR 0 2
17561: NOT
17562: IFFALSE 17566
// exit ;
17564: GO 17595
// for i in tmp do
17566: LD_ADDR_VAR 0 1
17570: PUSH
17571: LD_VAR 0 2
17575: PUSH
17576: FOR_IN
17577: IFFALSE 17593
// SetLives ( i , 1 ) ;
17579: LD_VAR 0 1
17583: PPUSH
17584: LD_INT 1
17586: PPUSH
17587: CALL_OW 234
17591: GO 17576
17593: POP
17594: POP
// end ;
17595: PPOPN 2
17597: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17598: LD_EXP 43
17602: PUSH
17603: LD_EXP 92
17607: AND
17608: IFFALSE 17882
17610: GO 17612
17612: DISABLE
17613: LD_INT 0
17615: PPUSH
17616: PPUSH
17617: PPUSH
// begin i := rand ( 1 , 7 ) ;
17618: LD_ADDR_VAR 0 1
17622: PUSH
17623: LD_INT 1
17625: PPUSH
17626: LD_INT 7
17628: PPUSH
17629: CALL_OW 12
17633: ST_TO_ADDR
// case i of 1 :
17634: LD_VAR 0 1
17638: PUSH
17639: LD_INT 1
17641: DOUBLE
17642: EQUAL
17643: IFTRUE 17647
17645: GO 17657
17647: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17648: LD_STRING earthquake(getX(game), 0, 32)
17650: PPUSH
17651: CALL_OW 559
17655: GO 17882
17657: LD_INT 2
17659: DOUBLE
17660: EQUAL
17661: IFTRUE 17665
17663: GO 17679
17665: POP
// begin ToLua ( displayStucuk(); ) ;
17666: LD_STRING displayStucuk();
17668: PPUSH
17669: CALL_OW 559
// ResetFog ;
17673: CALL_OW 335
// end ; 3 :
17677: GO 17882
17679: LD_INT 3
17681: DOUBLE
17682: EQUAL
17683: IFTRUE 17687
17685: GO 17791
17687: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17688: LD_ADDR_VAR 0 2
17692: PUSH
17693: LD_INT 22
17695: PUSH
17696: LD_OWVAR 2
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 25
17707: PUSH
17708: LD_INT 1
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PPUSH
17719: CALL_OW 69
17723: ST_TO_ADDR
// if not tmp then
17724: LD_VAR 0 2
17728: NOT
17729: IFFALSE 17733
// exit ;
17731: GO 17882
// un := tmp [ rand ( 1 , tmp ) ] ;
17733: LD_ADDR_VAR 0 3
17737: PUSH
17738: LD_VAR 0 2
17742: PUSH
17743: LD_INT 1
17745: PPUSH
17746: LD_VAR 0 2
17750: PPUSH
17751: CALL_OW 12
17755: ARRAY
17756: ST_TO_ADDR
// if Crawls ( un ) then
17757: LD_VAR 0 3
17761: PPUSH
17762: CALL_OW 318
17766: IFFALSE 17777
// ComWalk ( un ) ;
17768: LD_VAR 0 3
17772: PPUSH
17773: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17777: LD_VAR 0 3
17781: PPUSH
17782: LD_INT 8
17784: PPUSH
17785: CALL_OW 336
// end ; 4 :
17789: GO 17882
17791: LD_INT 4
17793: DOUBLE
17794: EQUAL
17795: IFTRUE 17799
17797: GO 17860
17799: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17800: LD_ADDR_VAR 0 2
17804: PUSH
17805: LD_INT 22
17807: PUSH
17808: LD_OWVAR 2
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 30
17819: PUSH
17820: LD_INT 29
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PPUSH
17831: CALL_OW 69
17835: ST_TO_ADDR
// if not tmp then
17836: LD_VAR 0 2
17840: NOT
17841: IFFALSE 17845
// exit ;
17843: GO 17882
// DestroyUnit ( tmp [ 1 ] ) ;
17845: LD_VAR 0 2
17849: PUSH
17850: LD_INT 1
17852: ARRAY
17853: PPUSH
17854: CALL_OW 65
// end ; 5 .. 7 :
17858: GO 17882
17860: LD_INT 5
17862: DOUBLE
17863: GREATEREQUAL
17864: IFFALSE 17872
17866: LD_INT 7
17868: DOUBLE
17869: LESSEQUAL
17870: IFTRUE 17874
17872: GO 17881
17874: POP
// StreamSibBomb ; end ;
17875: CALL 14132 0 0
17879: GO 17882
17881: POP
// end ;
17882: PPOPN 3
17884: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17885: LD_EXP 43
17889: PUSH
17890: LD_EXP 93
17894: AND
17895: IFFALSE 18051
17897: GO 17899
17899: DISABLE
17900: LD_INT 0
17902: PPUSH
17903: PPUSH
17904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17905: LD_ADDR_VAR 0 2
17909: PUSH
17910: LD_INT 81
17912: PUSH
17913: LD_OWVAR 2
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 2
17924: PUSH
17925: LD_INT 21
17927: PUSH
17928: LD_INT 1
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 21
17937: PUSH
17938: LD_INT 2
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: LIST
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PPUSH
17954: CALL_OW 69
17958: ST_TO_ADDR
// if not tmp then
17959: LD_VAR 0 2
17963: NOT
17964: IFFALSE 17968
// exit ;
17966: GO 18051
// p := 0 ;
17968: LD_ADDR_VAR 0 3
17972: PUSH
17973: LD_INT 0
17975: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17976: LD_INT 35
17978: PPUSH
17979: CALL_OW 67
// p := p + 1 ;
17983: LD_ADDR_VAR 0 3
17987: PUSH
17988: LD_VAR 0 3
17992: PUSH
17993: LD_INT 1
17995: PLUS
17996: ST_TO_ADDR
// for i in tmp do
17997: LD_ADDR_VAR 0 1
18001: PUSH
18002: LD_VAR 0 2
18006: PUSH
18007: FOR_IN
18008: IFFALSE 18039
// if GetLives ( i ) < 1000 then
18010: LD_VAR 0 1
18014: PPUSH
18015: CALL_OW 256
18019: PUSH
18020: LD_INT 1000
18022: LESS
18023: IFFALSE 18037
// SetLives ( i , 1000 ) ;
18025: LD_VAR 0 1
18029: PPUSH
18030: LD_INT 1000
18032: PPUSH
18033: CALL_OW 234
18037: GO 18007
18039: POP
18040: POP
// until p > 20 ;
18041: LD_VAR 0 3
18045: PUSH
18046: LD_INT 20
18048: GREATER
18049: IFFALSE 17976
// end ;
18051: PPOPN 3
18053: END
// every 0 0$1 trigger StreamModeActive and sTime do
18054: LD_EXP 43
18058: PUSH
18059: LD_EXP 94
18063: AND
18064: IFFALSE 18099
18066: GO 18068
18068: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18069: LD_INT 28
18071: PPUSH
18072: LD_OWVAR 2
18076: PPUSH
18077: LD_INT 2
18079: PPUSH
18080: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18084: LD_INT 30
18086: PPUSH
18087: LD_OWVAR 2
18091: PPUSH
18092: LD_INT 2
18094: PPUSH
18095: CALL_OW 322
// end ;
18099: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18100: LD_EXP 43
18104: PUSH
18105: LD_EXP 95
18109: AND
18110: IFFALSE 18231
18112: GO 18114
18114: DISABLE
18115: LD_INT 0
18117: PPUSH
18118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18119: LD_ADDR_VAR 0 2
18123: PUSH
18124: LD_INT 22
18126: PUSH
18127: LD_OWVAR 2
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 21
18138: PUSH
18139: LD_INT 1
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 3
18148: PUSH
18149: LD_INT 23
18151: PUSH
18152: LD_INT 0
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: LIST
18167: PPUSH
18168: CALL_OW 69
18172: ST_TO_ADDR
// if not tmp then
18173: LD_VAR 0 2
18177: NOT
18178: IFFALSE 18182
// exit ;
18180: GO 18231
// for i in tmp do
18182: LD_ADDR_VAR 0 1
18186: PUSH
18187: LD_VAR 0 2
18191: PUSH
18192: FOR_IN
18193: IFFALSE 18229
// begin if Crawls ( i ) then
18195: LD_VAR 0 1
18199: PPUSH
18200: CALL_OW 318
18204: IFFALSE 18215
// ComWalk ( i ) ;
18206: LD_VAR 0 1
18210: PPUSH
18211: CALL_OW 138
// SetClass ( i , 2 ) ;
18215: LD_VAR 0 1
18219: PPUSH
18220: LD_INT 2
18222: PPUSH
18223: CALL_OW 336
// end ;
18227: GO 18192
18229: POP
18230: POP
// end ;
18231: PPOPN 2
18233: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18234: LD_EXP 43
18238: PUSH
18239: LD_EXP 96
18243: AND
18244: IFFALSE 18525
18246: GO 18248
18248: DISABLE
18249: LD_INT 0
18251: PPUSH
18252: PPUSH
18253: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18254: LD_OWVAR 2
18258: PPUSH
18259: LD_INT 9
18261: PPUSH
18262: LD_INT 1
18264: PPUSH
18265: LD_INT 1
18267: PPUSH
18268: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18272: LD_INT 9
18274: PPUSH
18275: LD_OWVAR 2
18279: PPUSH
18280: CALL_OW 343
// uc_side := 9 ;
18284: LD_ADDR_OWVAR 20
18288: PUSH
18289: LD_INT 9
18291: ST_TO_ADDR
// uc_nation := 2 ;
18292: LD_ADDR_OWVAR 21
18296: PUSH
18297: LD_INT 2
18299: ST_TO_ADDR
// hc_name := Dark Warrior ;
18300: LD_ADDR_OWVAR 26
18304: PUSH
18305: LD_STRING Dark Warrior
18307: ST_TO_ADDR
// hc_gallery :=  ;
18308: LD_ADDR_OWVAR 33
18312: PUSH
18313: LD_STRING 
18315: ST_TO_ADDR
// hc_noskilllimit := true ;
18316: LD_ADDR_OWVAR 76
18320: PUSH
18321: LD_INT 1
18323: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18324: LD_ADDR_OWVAR 31
18328: PUSH
18329: LD_INT 30
18331: PUSH
18332: LD_INT 30
18334: PUSH
18335: LD_INT 30
18337: PUSH
18338: LD_INT 30
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: ST_TO_ADDR
// un := CreateHuman ;
18347: LD_ADDR_VAR 0 3
18351: PUSH
18352: CALL_OW 44
18356: ST_TO_ADDR
// hc_noskilllimit := false ;
18357: LD_ADDR_OWVAR 76
18361: PUSH
18362: LD_INT 0
18364: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18365: LD_VAR 0 3
18369: PPUSH
18370: LD_INT 1
18372: PPUSH
18373: CALL_OW 51
// p := 0 ;
18377: LD_ADDR_VAR 0 2
18381: PUSH
18382: LD_INT 0
18384: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18385: LD_INT 35
18387: PPUSH
18388: CALL_OW 67
// p := p + 1 ;
18392: LD_ADDR_VAR 0 2
18396: PUSH
18397: LD_VAR 0 2
18401: PUSH
18402: LD_INT 1
18404: PLUS
18405: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18406: LD_VAR 0 3
18410: PPUSH
18411: CALL_OW 256
18415: PUSH
18416: LD_INT 1000
18418: LESS
18419: IFFALSE 18433
// SetLives ( un , 1000 ) ;
18421: LD_VAR 0 3
18425: PPUSH
18426: LD_INT 1000
18428: PPUSH
18429: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18433: LD_VAR 0 3
18437: PPUSH
18438: LD_INT 81
18440: PUSH
18441: LD_OWVAR 2
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 91
18452: PUSH
18453: LD_VAR 0 3
18457: PUSH
18458: LD_INT 30
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: LIST
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PPUSH
18470: CALL_OW 69
18474: PPUSH
18475: LD_VAR 0 3
18479: PPUSH
18480: CALL_OW 74
18484: PPUSH
18485: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18489: LD_VAR 0 2
18493: PUSH
18494: LD_INT 60
18496: GREATER
18497: PUSH
18498: LD_VAR 0 3
18502: PPUSH
18503: CALL_OW 301
18507: OR
18508: IFFALSE 18385
// if un then
18510: LD_VAR 0 3
18514: IFFALSE 18525
// RemoveUnit ( un ) ;
18516: LD_VAR 0 3
18520: PPUSH
18521: CALL_OW 64
// end ;
18525: PPOPN 3
18527: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18528: LD_INT 0
18530: PPUSH
// case cmd of 301 :
18531: LD_VAR 0 1
18535: PUSH
18536: LD_INT 301
18538: DOUBLE
18539: EQUAL
18540: IFTRUE 18544
18542: GO 18576
18544: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18545: LD_VAR 0 6
18549: PPUSH
18550: LD_VAR 0 7
18554: PPUSH
18555: LD_VAR 0 8
18559: PPUSH
18560: LD_VAR 0 4
18564: PPUSH
18565: LD_VAR 0 5
18569: PPUSH
18570: CALL 19777 0 5
18574: GO 18697
18576: LD_INT 302
18578: DOUBLE
18579: EQUAL
18580: IFTRUE 18584
18582: GO 18621
18584: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18585: LD_VAR 0 6
18589: PPUSH
18590: LD_VAR 0 7
18594: PPUSH
18595: LD_VAR 0 8
18599: PPUSH
18600: LD_VAR 0 9
18604: PPUSH
18605: LD_VAR 0 4
18609: PPUSH
18610: LD_VAR 0 5
18614: PPUSH
18615: CALL 19868 0 6
18619: GO 18697
18621: LD_INT 303
18623: DOUBLE
18624: EQUAL
18625: IFTRUE 18629
18627: GO 18666
18629: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18630: LD_VAR 0 6
18634: PPUSH
18635: LD_VAR 0 7
18639: PPUSH
18640: LD_VAR 0 8
18644: PPUSH
18645: LD_VAR 0 9
18649: PPUSH
18650: LD_VAR 0 4
18654: PPUSH
18655: LD_VAR 0 5
18659: PPUSH
18660: CALL 18702 0 6
18664: GO 18697
18666: LD_INT 304
18668: DOUBLE
18669: EQUAL
18670: IFTRUE 18674
18672: GO 18696
18674: POP
// hHackTeleport ( unit , x , y ) ; end ;
18675: LD_VAR 0 2
18679: PPUSH
18680: LD_VAR 0 4
18684: PPUSH
18685: LD_VAR 0 5
18689: PPUSH
18690: CALL 20461 0 3
18694: GO 18697
18696: POP
// end ;
18697: LD_VAR 0 12
18701: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18702: LD_INT 0
18704: PPUSH
18705: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18706: LD_VAR 0 1
18710: PUSH
18711: LD_INT 1
18713: LESS
18714: PUSH
18715: LD_VAR 0 1
18719: PUSH
18720: LD_INT 3
18722: GREATER
18723: OR
18724: PUSH
18725: LD_VAR 0 5
18729: PPUSH
18730: LD_VAR 0 6
18734: PPUSH
18735: CALL_OW 428
18739: OR
18740: IFFALSE 18744
// exit ;
18742: GO 19464
// uc_side := your_side ;
18744: LD_ADDR_OWVAR 20
18748: PUSH
18749: LD_OWVAR 2
18753: ST_TO_ADDR
// uc_nation := nation ;
18754: LD_ADDR_OWVAR 21
18758: PUSH
18759: LD_VAR 0 1
18763: ST_TO_ADDR
// bc_level = 1 ;
18764: LD_ADDR_OWVAR 43
18768: PUSH
18769: LD_INT 1
18771: ST_TO_ADDR
// case btype of 1 :
18772: LD_VAR 0 2
18776: PUSH
18777: LD_INT 1
18779: DOUBLE
18780: EQUAL
18781: IFTRUE 18785
18783: GO 18796
18785: POP
// bc_type := b_depot ; 2 :
18786: LD_ADDR_OWVAR 42
18790: PUSH
18791: LD_INT 0
18793: ST_TO_ADDR
18794: GO 19408
18796: LD_INT 2
18798: DOUBLE
18799: EQUAL
18800: IFTRUE 18804
18802: GO 18815
18804: POP
// bc_type := b_warehouse ; 3 :
18805: LD_ADDR_OWVAR 42
18809: PUSH
18810: LD_INT 1
18812: ST_TO_ADDR
18813: GO 19408
18815: LD_INT 3
18817: DOUBLE
18818: EQUAL
18819: IFTRUE 18823
18821: GO 18834
18823: POP
// bc_type := b_lab ; 4 .. 9 :
18824: LD_ADDR_OWVAR 42
18828: PUSH
18829: LD_INT 6
18831: ST_TO_ADDR
18832: GO 19408
18834: LD_INT 4
18836: DOUBLE
18837: GREATEREQUAL
18838: IFFALSE 18846
18840: LD_INT 9
18842: DOUBLE
18843: LESSEQUAL
18844: IFTRUE 18848
18846: GO 18900
18848: POP
// begin bc_type := b_lab_half ;
18849: LD_ADDR_OWVAR 42
18853: PUSH
18854: LD_INT 7
18856: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18857: LD_ADDR_OWVAR 44
18861: PUSH
18862: LD_INT 10
18864: PUSH
18865: LD_INT 11
18867: PUSH
18868: LD_INT 12
18870: PUSH
18871: LD_INT 15
18873: PUSH
18874: LD_INT 14
18876: PUSH
18877: LD_INT 13
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: PUSH
18888: LD_VAR 0 2
18892: PUSH
18893: LD_INT 3
18895: MINUS
18896: ARRAY
18897: ST_TO_ADDR
// end ; 10 .. 13 :
18898: GO 19408
18900: LD_INT 10
18902: DOUBLE
18903: GREATEREQUAL
18904: IFFALSE 18912
18906: LD_INT 13
18908: DOUBLE
18909: LESSEQUAL
18910: IFTRUE 18914
18912: GO 18991
18914: POP
// begin bc_type := b_lab_full ;
18915: LD_ADDR_OWVAR 42
18919: PUSH
18920: LD_INT 8
18922: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18923: LD_ADDR_OWVAR 44
18927: PUSH
18928: LD_INT 10
18930: PUSH
18931: LD_INT 12
18933: PUSH
18934: LD_INT 14
18936: PUSH
18937: LD_INT 13
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: PUSH
18946: LD_VAR 0 2
18950: PUSH
18951: LD_INT 9
18953: MINUS
18954: ARRAY
18955: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18956: LD_ADDR_OWVAR 45
18960: PUSH
18961: LD_INT 11
18963: PUSH
18964: LD_INT 15
18966: PUSH
18967: LD_INT 12
18969: PUSH
18970: LD_INT 15
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: PUSH
18979: LD_VAR 0 2
18983: PUSH
18984: LD_INT 9
18986: MINUS
18987: ARRAY
18988: ST_TO_ADDR
// end ; 14 :
18989: GO 19408
18991: LD_INT 14
18993: DOUBLE
18994: EQUAL
18995: IFTRUE 18999
18997: GO 19010
18999: POP
// bc_type := b_workshop ; 15 :
19000: LD_ADDR_OWVAR 42
19004: PUSH
19005: LD_INT 2
19007: ST_TO_ADDR
19008: GO 19408
19010: LD_INT 15
19012: DOUBLE
19013: EQUAL
19014: IFTRUE 19018
19016: GO 19029
19018: POP
// bc_type := b_factory ; 16 :
19019: LD_ADDR_OWVAR 42
19023: PUSH
19024: LD_INT 3
19026: ST_TO_ADDR
19027: GO 19408
19029: LD_INT 16
19031: DOUBLE
19032: EQUAL
19033: IFTRUE 19037
19035: GO 19048
19037: POP
// bc_type := b_ext_gun ; 17 :
19038: LD_ADDR_OWVAR 42
19042: PUSH
19043: LD_INT 17
19045: ST_TO_ADDR
19046: GO 19408
19048: LD_INT 17
19050: DOUBLE
19051: EQUAL
19052: IFTRUE 19056
19054: GO 19084
19056: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19057: LD_ADDR_OWVAR 42
19061: PUSH
19062: LD_INT 19
19064: PUSH
19065: LD_INT 23
19067: PUSH
19068: LD_INT 19
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: LIST
19075: PUSH
19076: LD_VAR 0 1
19080: ARRAY
19081: ST_TO_ADDR
19082: GO 19408
19084: LD_INT 18
19086: DOUBLE
19087: EQUAL
19088: IFTRUE 19092
19090: GO 19103
19092: POP
// bc_type := b_ext_radar ; 19 :
19093: LD_ADDR_OWVAR 42
19097: PUSH
19098: LD_INT 20
19100: ST_TO_ADDR
19101: GO 19408
19103: LD_INT 19
19105: DOUBLE
19106: EQUAL
19107: IFTRUE 19111
19109: GO 19122
19111: POP
// bc_type := b_ext_radio ; 20 :
19112: LD_ADDR_OWVAR 42
19116: PUSH
19117: LD_INT 22
19119: ST_TO_ADDR
19120: GO 19408
19122: LD_INT 20
19124: DOUBLE
19125: EQUAL
19126: IFTRUE 19130
19128: GO 19141
19130: POP
// bc_type := b_ext_siberium ; 21 :
19131: LD_ADDR_OWVAR 42
19135: PUSH
19136: LD_INT 21
19138: ST_TO_ADDR
19139: GO 19408
19141: LD_INT 21
19143: DOUBLE
19144: EQUAL
19145: IFTRUE 19149
19147: GO 19160
19149: POP
// bc_type := b_ext_computer ; 22 :
19150: LD_ADDR_OWVAR 42
19154: PUSH
19155: LD_INT 24
19157: ST_TO_ADDR
19158: GO 19408
19160: LD_INT 22
19162: DOUBLE
19163: EQUAL
19164: IFTRUE 19168
19166: GO 19179
19168: POP
// bc_type := b_ext_track ; 23 :
19169: LD_ADDR_OWVAR 42
19173: PUSH
19174: LD_INT 16
19176: ST_TO_ADDR
19177: GO 19408
19179: LD_INT 23
19181: DOUBLE
19182: EQUAL
19183: IFTRUE 19187
19185: GO 19198
19187: POP
// bc_type := b_ext_laser ; 24 :
19188: LD_ADDR_OWVAR 42
19192: PUSH
19193: LD_INT 25
19195: ST_TO_ADDR
19196: GO 19408
19198: LD_INT 24
19200: DOUBLE
19201: EQUAL
19202: IFTRUE 19206
19204: GO 19217
19206: POP
// bc_type := b_control_tower ; 25 :
19207: LD_ADDR_OWVAR 42
19211: PUSH
19212: LD_INT 36
19214: ST_TO_ADDR
19215: GO 19408
19217: LD_INT 25
19219: DOUBLE
19220: EQUAL
19221: IFTRUE 19225
19223: GO 19236
19225: POP
// bc_type := b_breastwork ; 26 :
19226: LD_ADDR_OWVAR 42
19230: PUSH
19231: LD_INT 31
19233: ST_TO_ADDR
19234: GO 19408
19236: LD_INT 26
19238: DOUBLE
19239: EQUAL
19240: IFTRUE 19244
19242: GO 19255
19244: POP
// bc_type := b_bunker ; 27 :
19245: LD_ADDR_OWVAR 42
19249: PUSH
19250: LD_INT 32
19252: ST_TO_ADDR
19253: GO 19408
19255: LD_INT 27
19257: DOUBLE
19258: EQUAL
19259: IFTRUE 19263
19261: GO 19274
19263: POP
// bc_type := b_turret ; 28 :
19264: LD_ADDR_OWVAR 42
19268: PUSH
19269: LD_INT 33
19271: ST_TO_ADDR
19272: GO 19408
19274: LD_INT 28
19276: DOUBLE
19277: EQUAL
19278: IFTRUE 19282
19280: GO 19293
19282: POP
// bc_type := b_armoury ; 29 :
19283: LD_ADDR_OWVAR 42
19287: PUSH
19288: LD_INT 4
19290: ST_TO_ADDR
19291: GO 19408
19293: LD_INT 29
19295: DOUBLE
19296: EQUAL
19297: IFTRUE 19301
19299: GO 19312
19301: POP
// bc_type := b_barracks ; 30 :
19302: LD_ADDR_OWVAR 42
19306: PUSH
19307: LD_INT 5
19309: ST_TO_ADDR
19310: GO 19408
19312: LD_INT 30
19314: DOUBLE
19315: EQUAL
19316: IFTRUE 19320
19318: GO 19331
19320: POP
// bc_type := b_solar_power ; 31 :
19321: LD_ADDR_OWVAR 42
19325: PUSH
19326: LD_INT 27
19328: ST_TO_ADDR
19329: GO 19408
19331: LD_INT 31
19333: DOUBLE
19334: EQUAL
19335: IFTRUE 19339
19337: GO 19350
19339: POP
// bc_type := b_oil_power ; 32 :
19340: LD_ADDR_OWVAR 42
19344: PUSH
19345: LD_INT 26
19347: ST_TO_ADDR
19348: GO 19408
19350: LD_INT 32
19352: DOUBLE
19353: EQUAL
19354: IFTRUE 19358
19356: GO 19369
19358: POP
// bc_type := b_siberite_power ; 33 :
19359: LD_ADDR_OWVAR 42
19363: PUSH
19364: LD_INT 28
19366: ST_TO_ADDR
19367: GO 19408
19369: LD_INT 33
19371: DOUBLE
19372: EQUAL
19373: IFTRUE 19377
19375: GO 19388
19377: POP
// bc_type := b_oil_mine ; 34 :
19378: LD_ADDR_OWVAR 42
19382: PUSH
19383: LD_INT 29
19385: ST_TO_ADDR
19386: GO 19408
19388: LD_INT 34
19390: DOUBLE
19391: EQUAL
19392: IFTRUE 19396
19394: GO 19407
19396: POP
// bc_type := b_siberite_mine ; end ;
19397: LD_ADDR_OWVAR 42
19401: PUSH
19402: LD_INT 30
19404: ST_TO_ADDR
19405: GO 19408
19407: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19408: LD_ADDR_VAR 0 8
19412: PUSH
19413: LD_VAR 0 5
19417: PPUSH
19418: LD_VAR 0 6
19422: PPUSH
19423: LD_VAR 0 3
19427: PPUSH
19428: CALL_OW 47
19432: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19433: LD_OWVAR 42
19437: PUSH
19438: LD_INT 32
19440: PUSH
19441: LD_INT 33
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: IN
19448: IFFALSE 19464
// PlaceWeaponTurret ( b , weapon ) ;
19450: LD_VAR 0 8
19454: PPUSH
19455: LD_VAR 0 4
19459: PPUSH
19460: CALL_OW 431
// end ;
19464: LD_VAR 0 7
19468: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19469: LD_INT 0
19471: PPUSH
19472: PPUSH
19473: PPUSH
19474: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19475: LD_ADDR_VAR 0 4
19479: PUSH
19480: LD_INT 22
19482: PUSH
19483: LD_OWVAR 2
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 2
19494: PUSH
19495: LD_INT 30
19497: PUSH
19498: LD_INT 0
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 30
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PPUSH
19524: CALL_OW 69
19528: ST_TO_ADDR
// if not tmp then
19529: LD_VAR 0 4
19533: NOT
19534: IFFALSE 19538
// exit ;
19536: GO 19597
// for i in tmp do
19538: LD_ADDR_VAR 0 2
19542: PUSH
19543: LD_VAR 0 4
19547: PUSH
19548: FOR_IN
19549: IFFALSE 19595
// for j = 1 to 3 do
19551: LD_ADDR_VAR 0 3
19555: PUSH
19556: DOUBLE
19557: LD_INT 1
19559: DEC
19560: ST_TO_ADDR
19561: LD_INT 3
19563: PUSH
19564: FOR_TO
19565: IFFALSE 19591
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19567: LD_VAR 0 2
19571: PPUSH
19572: CALL_OW 274
19576: PPUSH
19577: LD_VAR 0 3
19581: PPUSH
19582: LD_INT 99999
19584: PPUSH
19585: CALL_OW 277
19589: GO 19564
19591: POP
19592: POP
19593: GO 19548
19595: POP
19596: POP
// end ;
19597: LD_VAR 0 1
19601: RET
// export function hHackSetLevel10 ; var i , j ; begin
19602: LD_INT 0
19604: PPUSH
19605: PPUSH
19606: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19607: LD_ADDR_VAR 0 2
19611: PUSH
19612: LD_INT 21
19614: PUSH
19615: LD_INT 1
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PPUSH
19622: CALL_OW 69
19626: PUSH
19627: FOR_IN
19628: IFFALSE 19680
// if IsSelected ( i ) then
19630: LD_VAR 0 2
19634: PPUSH
19635: CALL_OW 306
19639: IFFALSE 19678
// begin for j := 1 to 4 do
19641: LD_ADDR_VAR 0 3
19645: PUSH
19646: DOUBLE
19647: LD_INT 1
19649: DEC
19650: ST_TO_ADDR
19651: LD_INT 4
19653: PUSH
19654: FOR_TO
19655: IFFALSE 19676
// SetSkill ( i , j , 10 ) ;
19657: LD_VAR 0 2
19661: PPUSH
19662: LD_VAR 0 3
19666: PPUSH
19667: LD_INT 10
19669: PPUSH
19670: CALL_OW 237
19674: GO 19654
19676: POP
19677: POP
// end ;
19678: GO 19627
19680: POP
19681: POP
// end ;
19682: LD_VAR 0 1
19686: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19687: LD_INT 0
19689: PPUSH
19690: PPUSH
19691: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19692: LD_ADDR_VAR 0 2
19696: PUSH
19697: LD_INT 22
19699: PUSH
19700: LD_OWVAR 2
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 21
19711: PUSH
19712: LD_INT 1
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PPUSH
19723: CALL_OW 69
19727: PUSH
19728: FOR_IN
19729: IFFALSE 19770
// begin for j := 1 to 4 do
19731: LD_ADDR_VAR 0 3
19735: PUSH
19736: DOUBLE
19737: LD_INT 1
19739: DEC
19740: ST_TO_ADDR
19741: LD_INT 4
19743: PUSH
19744: FOR_TO
19745: IFFALSE 19766
// SetSkill ( i , j , 10 ) ;
19747: LD_VAR 0 2
19751: PPUSH
19752: LD_VAR 0 3
19756: PPUSH
19757: LD_INT 10
19759: PPUSH
19760: CALL_OW 237
19764: GO 19744
19766: POP
19767: POP
// end ;
19768: GO 19728
19770: POP
19771: POP
// end ;
19772: LD_VAR 0 1
19776: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19777: LD_INT 0
19779: PPUSH
// uc_side := your_side ;
19780: LD_ADDR_OWVAR 20
19784: PUSH
19785: LD_OWVAR 2
19789: ST_TO_ADDR
// uc_nation := nation ;
19790: LD_ADDR_OWVAR 21
19794: PUSH
19795: LD_VAR 0 1
19799: ST_TO_ADDR
// InitHc ;
19800: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19804: LD_INT 0
19806: PPUSH
19807: LD_VAR 0 2
19811: PPUSH
19812: LD_VAR 0 3
19816: PPUSH
19817: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19821: LD_VAR 0 4
19825: PPUSH
19826: LD_VAR 0 5
19830: PPUSH
19831: CALL_OW 428
19835: PUSH
19836: LD_INT 0
19838: EQUAL
19839: IFFALSE 19863
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19841: CALL_OW 44
19845: PPUSH
19846: LD_VAR 0 4
19850: PPUSH
19851: LD_VAR 0 5
19855: PPUSH
19856: LD_INT 1
19858: PPUSH
19859: CALL_OW 48
// end ;
19863: LD_VAR 0 6
19867: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19868: LD_INT 0
19870: PPUSH
19871: PPUSH
// uc_side := your_side ;
19872: LD_ADDR_OWVAR 20
19876: PUSH
19877: LD_OWVAR 2
19881: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19882: LD_VAR 0 1
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: LD_INT 2
19892: PUSH
19893: LD_INT 3
19895: PUSH
19896: LD_INT 4
19898: PUSH
19899: LD_INT 5
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: IN
19909: IFFALSE 19921
// uc_nation := nation_american else
19911: LD_ADDR_OWVAR 21
19915: PUSH
19916: LD_INT 1
19918: ST_TO_ADDR
19919: GO 19964
// if chassis in [ 11 , 12 , 13 , 14 ] then
19921: LD_VAR 0 1
19925: PUSH
19926: LD_INT 11
19928: PUSH
19929: LD_INT 12
19931: PUSH
19932: LD_INT 13
19934: PUSH
19935: LD_INT 14
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: IN
19944: IFFALSE 19956
// uc_nation := nation_arabian else
19946: LD_ADDR_OWVAR 21
19950: PUSH
19951: LD_INT 2
19953: ST_TO_ADDR
19954: GO 19964
// uc_nation := nation_russian ;
19956: LD_ADDR_OWVAR 21
19960: PUSH
19961: LD_INT 3
19963: ST_TO_ADDR
// vc_chassis := chassis ;
19964: LD_ADDR_OWVAR 37
19968: PUSH
19969: LD_VAR 0 1
19973: ST_TO_ADDR
// vc_engine := engine ;
19974: LD_ADDR_OWVAR 39
19978: PUSH
19979: LD_VAR 0 2
19983: ST_TO_ADDR
// vc_control := control ;
19984: LD_ADDR_OWVAR 38
19988: PUSH
19989: LD_VAR 0 3
19993: ST_TO_ADDR
// vc_weapon := weapon ;
19994: LD_ADDR_OWVAR 40
19998: PUSH
19999: LD_VAR 0 4
20003: ST_TO_ADDR
// un := CreateVehicle ;
20004: LD_ADDR_VAR 0 8
20008: PUSH
20009: CALL_OW 45
20013: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20014: LD_VAR 0 8
20018: PPUSH
20019: LD_INT 0
20021: PPUSH
20022: LD_INT 5
20024: PPUSH
20025: CALL_OW 12
20029: PPUSH
20030: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20034: LD_VAR 0 8
20038: PPUSH
20039: LD_VAR 0 5
20043: PPUSH
20044: LD_VAR 0 6
20048: PPUSH
20049: LD_INT 1
20051: PPUSH
20052: CALL_OW 48
// end ;
20056: LD_VAR 0 7
20060: RET
// export hInvincible ; every 1 do
20061: GO 20063
20063: DISABLE
// hInvincible := [ ] ;
20064: LD_ADDR_EXP 97
20068: PUSH
20069: EMPTY
20070: ST_TO_ADDR
20071: END
// every 10 do var i ;
20072: GO 20074
20074: DISABLE
20075: LD_INT 0
20077: PPUSH
// begin enable ;
20078: ENABLE
// if not hInvincible then
20079: LD_EXP 97
20083: NOT
20084: IFFALSE 20088
// exit ;
20086: GO 20132
// for i in hInvincible do
20088: LD_ADDR_VAR 0 1
20092: PUSH
20093: LD_EXP 97
20097: PUSH
20098: FOR_IN
20099: IFFALSE 20130
// if GetLives ( i ) < 1000 then
20101: LD_VAR 0 1
20105: PPUSH
20106: CALL_OW 256
20110: PUSH
20111: LD_INT 1000
20113: LESS
20114: IFFALSE 20128
// SetLives ( i , 1000 ) ;
20116: LD_VAR 0 1
20120: PPUSH
20121: LD_INT 1000
20123: PPUSH
20124: CALL_OW 234
20128: GO 20098
20130: POP
20131: POP
// end ;
20132: PPOPN 1
20134: END
// export function hHackInvincible ; var i ; begin
20135: LD_INT 0
20137: PPUSH
20138: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20139: LD_ADDR_VAR 0 2
20143: PUSH
20144: LD_INT 2
20146: PUSH
20147: LD_INT 21
20149: PUSH
20150: LD_INT 1
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 21
20159: PUSH
20160: LD_INT 2
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: LIST
20171: PPUSH
20172: CALL_OW 69
20176: PUSH
20177: FOR_IN
20178: IFFALSE 20239
// if IsSelected ( i ) then
20180: LD_VAR 0 2
20184: PPUSH
20185: CALL_OW 306
20189: IFFALSE 20237
// begin if i in hInvincible then
20191: LD_VAR 0 2
20195: PUSH
20196: LD_EXP 97
20200: IN
20201: IFFALSE 20221
// hInvincible := hInvincible diff i else
20203: LD_ADDR_EXP 97
20207: PUSH
20208: LD_EXP 97
20212: PUSH
20213: LD_VAR 0 2
20217: DIFF
20218: ST_TO_ADDR
20219: GO 20237
// hInvincible := hInvincible union i ;
20221: LD_ADDR_EXP 97
20225: PUSH
20226: LD_EXP 97
20230: PUSH
20231: LD_VAR 0 2
20235: UNION
20236: ST_TO_ADDR
// end ;
20237: GO 20177
20239: POP
20240: POP
// end ;
20241: LD_VAR 0 1
20245: RET
// export function hHackInvisible ; var i , j ; begin
20246: LD_INT 0
20248: PPUSH
20249: PPUSH
20250: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20251: LD_ADDR_VAR 0 2
20255: PUSH
20256: LD_INT 21
20258: PUSH
20259: LD_INT 1
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PPUSH
20266: CALL_OW 69
20270: PUSH
20271: FOR_IN
20272: IFFALSE 20296
// if IsSelected ( i ) then
20274: LD_VAR 0 2
20278: PPUSH
20279: CALL_OW 306
20283: IFFALSE 20294
// ComForceInvisible ( i ) ;
20285: LD_VAR 0 2
20289: PPUSH
20290: CALL_OW 496
20294: GO 20271
20296: POP
20297: POP
// end ;
20298: LD_VAR 0 1
20302: RET
// export function hHackChangeYourSide ; begin
20303: LD_INT 0
20305: PPUSH
// if your_side = 8 then
20306: LD_OWVAR 2
20310: PUSH
20311: LD_INT 8
20313: EQUAL
20314: IFFALSE 20326
// your_side := 0 else
20316: LD_ADDR_OWVAR 2
20320: PUSH
20321: LD_INT 0
20323: ST_TO_ADDR
20324: GO 20340
// your_side := your_side + 1 ;
20326: LD_ADDR_OWVAR 2
20330: PUSH
20331: LD_OWVAR 2
20335: PUSH
20336: LD_INT 1
20338: PLUS
20339: ST_TO_ADDR
// end ;
20340: LD_VAR 0 1
20344: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20345: LD_INT 0
20347: PPUSH
20348: PPUSH
20349: PPUSH
// for i in all_units do
20350: LD_ADDR_VAR 0 2
20354: PUSH
20355: LD_OWVAR 3
20359: PUSH
20360: FOR_IN
20361: IFFALSE 20439
// if IsSelected ( i ) then
20363: LD_VAR 0 2
20367: PPUSH
20368: CALL_OW 306
20372: IFFALSE 20437
// begin j := GetSide ( i ) ;
20374: LD_ADDR_VAR 0 3
20378: PUSH
20379: LD_VAR 0 2
20383: PPUSH
20384: CALL_OW 255
20388: ST_TO_ADDR
// if j = 8 then
20389: LD_VAR 0 3
20393: PUSH
20394: LD_INT 8
20396: EQUAL
20397: IFFALSE 20409
// j := 0 else
20399: LD_ADDR_VAR 0 3
20403: PUSH
20404: LD_INT 0
20406: ST_TO_ADDR
20407: GO 20423
// j := j + 1 ;
20409: LD_ADDR_VAR 0 3
20413: PUSH
20414: LD_VAR 0 3
20418: PUSH
20419: LD_INT 1
20421: PLUS
20422: ST_TO_ADDR
// SetSide ( i , j ) ;
20423: LD_VAR 0 2
20427: PPUSH
20428: LD_VAR 0 3
20432: PPUSH
20433: CALL_OW 235
// end ;
20437: GO 20360
20439: POP
20440: POP
// end ;
20441: LD_VAR 0 1
20445: RET
// export function hHackFog ; begin
20446: LD_INT 0
20448: PPUSH
// FogOff ( true ) ;
20449: LD_INT 1
20451: PPUSH
20452: CALL_OW 344
// end ;
20456: LD_VAR 0 1
20460: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20461: LD_INT 0
20463: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20464: LD_VAR 0 1
20468: PPUSH
20469: LD_VAR 0 2
20473: PPUSH
20474: LD_VAR 0 3
20478: PPUSH
20479: LD_INT 1
20481: PPUSH
20482: LD_INT 1
20484: PPUSH
20485: CALL_OW 483
// CenterOnXY ( x , y ) ;
20489: LD_VAR 0 2
20493: PPUSH
20494: LD_VAR 0 3
20498: PPUSH
20499: CALL_OW 84
// end ; end_of_file
20503: LD_VAR 0 4
20507: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20508: LD_INT 0
20510: PPUSH
20511: PPUSH
20512: PPUSH
20513: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20514: LD_VAR 0 1
20518: PPUSH
20519: CALL_OW 264
20523: PUSH
20524: LD_EXP 28
20528: EQUAL
20529: IFFALSE 20601
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20531: LD_INT 68
20533: PPUSH
20534: LD_VAR 0 1
20538: PPUSH
20539: CALL_OW 255
20543: PPUSH
20544: CALL_OW 321
20548: PUSH
20549: LD_INT 2
20551: EQUAL
20552: IFFALSE 20564
// eff := 70 else
20554: LD_ADDR_VAR 0 4
20558: PUSH
20559: LD_INT 70
20561: ST_TO_ADDR
20562: GO 20572
// eff := 30 ;
20564: LD_ADDR_VAR 0 4
20568: PUSH
20569: LD_INT 30
20571: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20572: LD_VAR 0 1
20576: PPUSH
20577: CALL_OW 250
20581: PPUSH
20582: LD_VAR 0 1
20586: PPUSH
20587: CALL_OW 251
20591: PPUSH
20592: LD_VAR 0 4
20596: PPUSH
20597: CALL_OW 495
// end ; end ;
20601: LD_VAR 0 2
20605: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20606: LD_INT 0
20608: PPUSH
// end ;
20609: LD_VAR 0 4
20613: RET
// export function SOS_Command ( cmd ) ; begin
20614: LD_INT 0
20616: PPUSH
// end ;
20617: LD_VAR 0 2
20621: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20622: LD_INT 0
20624: PPUSH
// if cmd = 121 then
20625: LD_VAR 0 1
20629: PUSH
20630: LD_INT 121
20632: EQUAL
20633: IFFALSE 20635
// end ;
20635: LD_VAR 0 6
20639: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20640: LD_INT 0
20642: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20643: LD_VAR 0 1
20647: PUSH
20648: LD_INT 250
20650: EQUAL
20651: PUSH
20652: LD_VAR 0 2
20656: PPUSH
20657: CALL_OW 264
20661: PUSH
20662: LD_EXP 31
20666: EQUAL
20667: AND
20668: IFFALSE 20689
// MinerPlaceMine ( unit , x , y ) ;
20670: LD_VAR 0 2
20674: PPUSH
20675: LD_VAR 0 4
20679: PPUSH
20680: LD_VAR 0 5
20684: PPUSH
20685: CALL 23038 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20689: LD_VAR 0 1
20693: PUSH
20694: LD_INT 251
20696: EQUAL
20697: PUSH
20698: LD_VAR 0 2
20702: PPUSH
20703: CALL_OW 264
20707: PUSH
20708: LD_EXP 31
20712: EQUAL
20713: AND
20714: IFFALSE 20735
// MinerDetonateMine ( unit , x , y ) ;
20716: LD_VAR 0 2
20720: PPUSH
20721: LD_VAR 0 4
20725: PPUSH
20726: LD_VAR 0 5
20730: PPUSH
20731: CALL 23315 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20735: LD_VAR 0 1
20739: PUSH
20740: LD_INT 252
20742: EQUAL
20743: PUSH
20744: LD_VAR 0 2
20748: PPUSH
20749: CALL_OW 264
20753: PUSH
20754: LD_EXP 31
20758: EQUAL
20759: AND
20760: IFFALSE 20781
// MinerCreateMinefield ( unit , x , y ) ;
20762: LD_VAR 0 2
20766: PPUSH
20767: LD_VAR 0 4
20771: PPUSH
20772: LD_VAR 0 5
20776: PPUSH
20777: CALL 23732 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20781: LD_VAR 0 1
20785: PUSH
20786: LD_INT 253
20788: EQUAL
20789: PUSH
20790: LD_VAR 0 2
20794: PPUSH
20795: CALL_OW 257
20799: PUSH
20800: LD_INT 5
20802: EQUAL
20803: AND
20804: IFFALSE 20825
// ComBinocular ( unit , x , y ) ;
20806: LD_VAR 0 2
20810: PPUSH
20811: LD_VAR 0 4
20815: PPUSH
20816: LD_VAR 0 5
20820: PPUSH
20821: CALL 24103 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20825: LD_VAR 0 1
20829: PUSH
20830: LD_INT 254
20832: EQUAL
20833: PUSH
20834: LD_VAR 0 2
20838: PPUSH
20839: CALL_OW 264
20843: PUSH
20844: LD_EXP 26
20848: EQUAL
20849: AND
20850: PUSH
20851: LD_VAR 0 3
20855: PPUSH
20856: CALL_OW 263
20860: PUSH
20861: LD_INT 3
20863: EQUAL
20864: AND
20865: IFFALSE 20881
// HackDestroyVehicle ( unit , selectedUnit ) ;
20867: LD_VAR 0 2
20871: PPUSH
20872: LD_VAR 0 3
20876: PPUSH
20877: CALL 22398 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20881: LD_VAR 0 1
20885: PUSH
20886: LD_INT 255
20888: EQUAL
20889: PUSH
20890: LD_VAR 0 2
20894: PPUSH
20895: CALL_OW 264
20899: PUSH
20900: LD_INT 14
20902: PUSH
20903: LD_INT 53
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: IN
20910: AND
20911: PUSH
20912: LD_VAR 0 4
20916: PPUSH
20917: LD_VAR 0 5
20921: PPUSH
20922: CALL_OW 488
20926: AND
20927: IFFALSE 20951
// CutTreeXYR ( unit , x , y , 12 ) ;
20929: LD_VAR 0 2
20933: PPUSH
20934: LD_VAR 0 4
20938: PPUSH
20939: LD_VAR 0 5
20943: PPUSH
20944: LD_INT 12
20946: PPUSH
20947: CALL 20964 0 4
// end ;
20951: LD_VAR 0 6
20955: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
20956: LD_INT 0
20958: PPUSH
// end ;
20959: LD_VAR 0 4
20963: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20964: LD_INT 0
20966: PPUSH
20967: PPUSH
20968: PPUSH
20969: PPUSH
20970: PPUSH
20971: PPUSH
20972: PPUSH
20973: PPUSH
20974: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20975: LD_VAR 0 1
20979: NOT
20980: PUSH
20981: LD_VAR 0 2
20985: PPUSH
20986: LD_VAR 0 3
20990: PPUSH
20991: CALL_OW 488
20995: NOT
20996: OR
20997: PUSH
20998: LD_VAR 0 4
21002: NOT
21003: OR
21004: IFFALSE 21008
// exit ;
21006: GO 21348
// list := [ ] ;
21008: LD_ADDR_VAR 0 13
21012: PUSH
21013: EMPTY
21014: ST_TO_ADDR
// if x - r < 0 then
21015: LD_VAR 0 2
21019: PUSH
21020: LD_VAR 0 4
21024: MINUS
21025: PUSH
21026: LD_INT 0
21028: LESS
21029: IFFALSE 21041
// min_x := 0 else
21031: LD_ADDR_VAR 0 7
21035: PUSH
21036: LD_INT 0
21038: ST_TO_ADDR
21039: GO 21057
// min_x := x - r ;
21041: LD_ADDR_VAR 0 7
21045: PUSH
21046: LD_VAR 0 2
21050: PUSH
21051: LD_VAR 0 4
21055: MINUS
21056: ST_TO_ADDR
// if y - r < 0 then
21057: LD_VAR 0 3
21061: PUSH
21062: LD_VAR 0 4
21066: MINUS
21067: PUSH
21068: LD_INT 0
21070: LESS
21071: IFFALSE 21083
// min_y := 0 else
21073: LD_ADDR_VAR 0 8
21077: PUSH
21078: LD_INT 0
21080: ST_TO_ADDR
21081: GO 21099
// min_y := y - r ;
21083: LD_ADDR_VAR 0 8
21087: PUSH
21088: LD_VAR 0 3
21092: PUSH
21093: LD_VAR 0 4
21097: MINUS
21098: ST_TO_ADDR
// max_x := x + r ;
21099: LD_ADDR_VAR 0 9
21103: PUSH
21104: LD_VAR 0 2
21108: PUSH
21109: LD_VAR 0 4
21113: PLUS
21114: ST_TO_ADDR
// max_y := y + r ;
21115: LD_ADDR_VAR 0 10
21119: PUSH
21120: LD_VAR 0 3
21124: PUSH
21125: LD_VAR 0 4
21129: PLUS
21130: ST_TO_ADDR
// for _x = min_x to max_x do
21131: LD_ADDR_VAR 0 11
21135: PUSH
21136: DOUBLE
21137: LD_VAR 0 7
21141: DEC
21142: ST_TO_ADDR
21143: LD_VAR 0 9
21147: PUSH
21148: FOR_TO
21149: IFFALSE 21266
// for _y = min_y to max_y do
21151: LD_ADDR_VAR 0 12
21155: PUSH
21156: DOUBLE
21157: LD_VAR 0 8
21161: DEC
21162: ST_TO_ADDR
21163: LD_VAR 0 10
21167: PUSH
21168: FOR_TO
21169: IFFALSE 21262
// begin if not ValidHex ( _x , _y ) then
21171: LD_VAR 0 11
21175: PPUSH
21176: LD_VAR 0 12
21180: PPUSH
21181: CALL_OW 488
21185: NOT
21186: IFFALSE 21190
// continue ;
21188: GO 21168
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21190: LD_VAR 0 11
21194: PPUSH
21195: LD_VAR 0 12
21199: PPUSH
21200: CALL_OW 351
21204: PUSH
21205: LD_VAR 0 11
21209: PPUSH
21210: LD_VAR 0 12
21214: PPUSH
21215: CALL_OW 554
21219: AND
21220: IFFALSE 21260
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21222: LD_ADDR_VAR 0 13
21226: PUSH
21227: LD_VAR 0 13
21231: PPUSH
21232: LD_VAR 0 13
21236: PUSH
21237: LD_INT 1
21239: PLUS
21240: PPUSH
21241: LD_VAR 0 11
21245: PUSH
21246: LD_VAR 0 12
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PPUSH
21255: CALL_OW 2
21259: ST_TO_ADDR
// end ;
21260: GO 21168
21262: POP
21263: POP
21264: GO 21148
21266: POP
21267: POP
// if not list then
21268: LD_VAR 0 13
21272: NOT
21273: IFFALSE 21277
// exit ;
21275: GO 21348
// for i in list do
21277: LD_ADDR_VAR 0 6
21281: PUSH
21282: LD_VAR 0 13
21286: PUSH
21287: FOR_IN
21288: IFFALSE 21346
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21290: LD_VAR 0 1
21294: PPUSH
21295: LD_STRING M
21297: PUSH
21298: LD_VAR 0 6
21302: PUSH
21303: LD_INT 1
21305: ARRAY
21306: PUSH
21307: LD_VAR 0 6
21311: PUSH
21312: LD_INT 2
21314: ARRAY
21315: PUSH
21316: LD_INT 0
21318: PUSH
21319: LD_INT 0
21321: PUSH
21322: LD_INT 0
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: PUSH
21337: EMPTY
21338: LIST
21339: PPUSH
21340: CALL_OW 447
21344: GO 21287
21346: POP
21347: POP
// end ;
21348: LD_VAR 0 5
21352: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21353: LD_EXP 100
21357: NOT
21358: IFFALSE 21408
21360: GO 21362
21362: DISABLE
// begin initHack := true ;
21363: LD_ADDR_EXP 100
21367: PUSH
21368: LD_INT 1
21370: ST_TO_ADDR
// hackTanks := [ ] ;
21371: LD_ADDR_EXP 101
21375: PUSH
21376: EMPTY
21377: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21378: LD_ADDR_EXP 102
21382: PUSH
21383: EMPTY
21384: ST_TO_ADDR
// hackLimit := 3 ;
21385: LD_ADDR_EXP 103
21389: PUSH
21390: LD_INT 3
21392: ST_TO_ADDR
// hackDist := 12 ;
21393: LD_ADDR_EXP 104
21397: PUSH
21398: LD_INT 12
21400: ST_TO_ADDR
// hackCounter := [ ] ;
21401: LD_ADDR_EXP 105
21405: PUSH
21406: EMPTY
21407: ST_TO_ADDR
// end ;
21408: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21409: LD_EXP 100
21413: PUSH
21414: LD_INT 34
21416: PUSH
21417: LD_EXP 26
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PPUSH
21426: CALL_OW 69
21430: AND
21431: IFFALSE 21686
21433: GO 21435
21435: DISABLE
21436: LD_INT 0
21438: PPUSH
21439: PPUSH
// begin enable ;
21440: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21441: LD_ADDR_VAR 0 1
21445: PUSH
21446: LD_INT 34
21448: PUSH
21449: LD_EXP 26
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PPUSH
21458: CALL_OW 69
21462: PUSH
21463: FOR_IN
21464: IFFALSE 21684
// begin if not i in hackTanks then
21466: LD_VAR 0 1
21470: PUSH
21471: LD_EXP 101
21475: IN
21476: NOT
21477: IFFALSE 21560
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21479: LD_ADDR_EXP 101
21483: PUSH
21484: LD_EXP 101
21488: PPUSH
21489: LD_EXP 101
21493: PUSH
21494: LD_INT 1
21496: PLUS
21497: PPUSH
21498: LD_VAR 0 1
21502: PPUSH
21503: CALL_OW 1
21507: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21508: LD_ADDR_EXP 102
21512: PUSH
21513: LD_EXP 102
21517: PPUSH
21518: LD_EXP 102
21522: PUSH
21523: LD_INT 1
21525: PLUS
21526: PPUSH
21527: EMPTY
21528: PPUSH
21529: CALL_OW 1
21533: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21534: LD_ADDR_EXP 105
21538: PUSH
21539: LD_EXP 105
21543: PPUSH
21544: LD_EXP 105
21548: PUSH
21549: LD_INT 1
21551: PLUS
21552: PPUSH
21553: EMPTY
21554: PPUSH
21555: CALL_OW 1
21559: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21560: LD_VAR 0 1
21564: PPUSH
21565: CALL_OW 302
21569: NOT
21570: IFFALSE 21583
// begin HackUnlinkAll ( i ) ;
21572: LD_VAR 0 1
21576: PPUSH
21577: CALL 21689 0 1
// continue ;
21581: GO 21463
// end ; HackCheckCapturedStatus ( i ) ;
21583: LD_VAR 0 1
21587: PPUSH
21588: CALL 22132 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21592: LD_ADDR_VAR 0 2
21596: PUSH
21597: LD_INT 81
21599: PUSH
21600: LD_VAR 0 1
21604: PPUSH
21605: CALL_OW 255
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 33
21616: PUSH
21617: LD_INT 3
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 91
21626: PUSH
21627: LD_VAR 0 1
21631: PUSH
21632: LD_EXP 104
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 50
21644: PUSH
21645: EMPTY
21646: LIST
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: PPUSH
21654: CALL_OW 69
21658: ST_TO_ADDR
// if not tmp then
21659: LD_VAR 0 2
21663: NOT
21664: IFFALSE 21668
// continue ;
21666: GO 21463
// HackLink ( i , tmp ) ;
21668: LD_VAR 0 1
21672: PPUSH
21673: LD_VAR 0 2
21677: PPUSH
21678: CALL 21825 0 2
// end ;
21682: GO 21463
21684: POP
21685: POP
// end ;
21686: PPOPN 2
21688: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21689: LD_INT 0
21691: PPUSH
21692: PPUSH
21693: PPUSH
// if not hack in hackTanks then
21694: LD_VAR 0 1
21698: PUSH
21699: LD_EXP 101
21703: IN
21704: NOT
21705: IFFALSE 21709
// exit ;
21707: GO 21820
// index := GetElementIndex ( hackTanks , hack ) ;
21709: LD_ADDR_VAR 0 4
21713: PUSH
21714: LD_EXP 101
21718: PPUSH
21719: LD_VAR 0 1
21723: PPUSH
21724: CALL 29254 0 2
21728: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21729: LD_EXP 102
21733: PUSH
21734: LD_VAR 0 4
21738: ARRAY
21739: IFFALSE 21820
// begin for i in hackTanksCaptured [ index ] do
21741: LD_ADDR_VAR 0 3
21745: PUSH
21746: LD_EXP 102
21750: PUSH
21751: LD_VAR 0 4
21755: ARRAY
21756: PUSH
21757: FOR_IN
21758: IFFALSE 21784
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21760: LD_VAR 0 3
21764: PUSH
21765: LD_INT 1
21767: ARRAY
21768: PPUSH
21769: LD_VAR 0 3
21773: PUSH
21774: LD_INT 2
21776: ARRAY
21777: PPUSH
21778: CALL_OW 235
21782: GO 21757
21784: POP
21785: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21786: LD_ADDR_EXP 102
21790: PUSH
21791: LD_EXP 102
21795: PPUSH
21796: LD_VAR 0 4
21800: PPUSH
21801: EMPTY
21802: PPUSH
21803: CALL_OW 1
21807: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21808: LD_VAR 0 1
21812: PPUSH
21813: LD_INT 0
21815: PPUSH
21816: CALL_OW 505
// end ; end ;
21820: LD_VAR 0 2
21824: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21825: LD_INT 0
21827: PPUSH
21828: PPUSH
21829: PPUSH
// if not hack in hackTanks or not vehicles then
21830: LD_VAR 0 1
21834: PUSH
21835: LD_EXP 101
21839: IN
21840: NOT
21841: PUSH
21842: LD_VAR 0 2
21846: NOT
21847: OR
21848: IFFALSE 21852
// exit ;
21850: GO 22127
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21852: LD_ADDR_VAR 0 2
21856: PUSH
21857: LD_VAR 0 1
21861: PPUSH
21862: LD_VAR 0 2
21866: PPUSH
21867: LD_INT 1
21869: PPUSH
21870: LD_INT 1
21872: PPUSH
21873: CALL 29904 0 4
21877: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21878: LD_ADDR_VAR 0 5
21882: PUSH
21883: LD_EXP 101
21887: PPUSH
21888: LD_VAR 0 1
21892: PPUSH
21893: CALL 29254 0 2
21897: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21898: LD_EXP 102
21902: PUSH
21903: LD_VAR 0 5
21907: ARRAY
21908: PUSH
21909: LD_EXP 103
21913: LESS
21914: IFFALSE 22103
// begin for i := 1 to vehicles do
21916: LD_ADDR_VAR 0 4
21920: PUSH
21921: DOUBLE
21922: LD_INT 1
21924: DEC
21925: ST_TO_ADDR
21926: LD_VAR 0 2
21930: PUSH
21931: FOR_TO
21932: IFFALSE 22101
// begin if hackTanksCaptured [ index ] = hackLimit then
21934: LD_EXP 102
21938: PUSH
21939: LD_VAR 0 5
21943: ARRAY
21944: PUSH
21945: LD_EXP 103
21949: EQUAL
21950: IFFALSE 21954
// break ;
21952: GO 22101
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21954: LD_ADDR_EXP 105
21958: PUSH
21959: LD_EXP 105
21963: PPUSH
21964: LD_VAR 0 5
21968: PPUSH
21969: LD_EXP 105
21973: PUSH
21974: LD_VAR 0 5
21978: ARRAY
21979: PUSH
21980: LD_INT 1
21982: PLUS
21983: PPUSH
21984: CALL_OW 1
21988: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21989: LD_ADDR_EXP 102
21993: PUSH
21994: LD_EXP 102
21998: PPUSH
21999: LD_VAR 0 5
22003: PUSH
22004: LD_EXP 102
22008: PUSH
22009: LD_VAR 0 5
22013: ARRAY
22014: PUSH
22015: LD_INT 1
22017: PLUS
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PPUSH
22023: LD_VAR 0 2
22027: PUSH
22028: LD_VAR 0 4
22032: ARRAY
22033: PUSH
22034: LD_VAR 0 2
22038: PUSH
22039: LD_VAR 0 4
22043: ARRAY
22044: PPUSH
22045: CALL_OW 255
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PPUSH
22054: CALL 29469 0 3
22058: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22059: LD_VAR 0 2
22063: PUSH
22064: LD_VAR 0 4
22068: ARRAY
22069: PPUSH
22070: LD_VAR 0 1
22074: PPUSH
22075: CALL_OW 255
22079: PPUSH
22080: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22084: LD_VAR 0 2
22088: PUSH
22089: LD_VAR 0 4
22093: ARRAY
22094: PPUSH
22095: CALL_OW 141
// end ;
22099: GO 21931
22101: POP
22102: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22103: LD_VAR 0 1
22107: PPUSH
22108: LD_EXP 102
22112: PUSH
22113: LD_VAR 0 5
22117: ARRAY
22118: PUSH
22119: LD_INT 0
22121: PLUS
22122: PPUSH
22123: CALL_OW 505
// end ;
22127: LD_VAR 0 3
22131: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22132: LD_INT 0
22134: PPUSH
22135: PPUSH
22136: PPUSH
22137: PPUSH
// if not hack in hackTanks then
22138: LD_VAR 0 1
22142: PUSH
22143: LD_EXP 101
22147: IN
22148: NOT
22149: IFFALSE 22153
// exit ;
22151: GO 22393
// index := GetElementIndex ( hackTanks , hack ) ;
22153: LD_ADDR_VAR 0 4
22157: PUSH
22158: LD_EXP 101
22162: PPUSH
22163: LD_VAR 0 1
22167: PPUSH
22168: CALL 29254 0 2
22172: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22173: LD_ADDR_VAR 0 3
22177: PUSH
22178: DOUBLE
22179: LD_EXP 102
22183: PUSH
22184: LD_VAR 0 4
22188: ARRAY
22189: INC
22190: ST_TO_ADDR
22191: LD_INT 1
22193: PUSH
22194: FOR_DOWNTO
22195: IFFALSE 22367
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22197: LD_ADDR_VAR 0 5
22201: PUSH
22202: LD_EXP 102
22206: PUSH
22207: LD_VAR 0 4
22211: ARRAY
22212: PUSH
22213: LD_VAR 0 3
22217: ARRAY
22218: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22219: LD_VAR 0 5
22223: PUSH
22224: LD_INT 1
22226: ARRAY
22227: PPUSH
22228: CALL_OW 302
22232: NOT
22233: PUSH
22234: LD_VAR 0 5
22238: PUSH
22239: LD_INT 1
22241: ARRAY
22242: PPUSH
22243: CALL_OW 255
22247: PUSH
22248: LD_VAR 0 1
22252: PPUSH
22253: CALL_OW 255
22257: NONEQUAL
22258: OR
22259: IFFALSE 22365
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22261: LD_VAR 0 5
22265: PUSH
22266: LD_INT 1
22268: ARRAY
22269: PPUSH
22270: CALL_OW 305
22274: PUSH
22275: LD_VAR 0 5
22279: PUSH
22280: LD_INT 1
22282: ARRAY
22283: PPUSH
22284: CALL_OW 255
22288: PUSH
22289: LD_VAR 0 1
22293: PPUSH
22294: CALL_OW 255
22298: EQUAL
22299: AND
22300: IFFALSE 22324
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22302: LD_VAR 0 5
22306: PUSH
22307: LD_INT 1
22309: ARRAY
22310: PPUSH
22311: LD_VAR 0 5
22315: PUSH
22316: LD_INT 2
22318: ARRAY
22319: PPUSH
22320: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22324: LD_ADDR_EXP 102
22328: PUSH
22329: LD_EXP 102
22333: PPUSH
22334: LD_VAR 0 4
22338: PPUSH
22339: LD_EXP 102
22343: PUSH
22344: LD_VAR 0 4
22348: ARRAY
22349: PPUSH
22350: LD_VAR 0 3
22354: PPUSH
22355: CALL_OW 3
22359: PPUSH
22360: CALL_OW 1
22364: ST_TO_ADDR
// end ; end ;
22365: GO 22194
22367: POP
22368: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22369: LD_VAR 0 1
22373: PPUSH
22374: LD_EXP 102
22378: PUSH
22379: LD_VAR 0 4
22383: ARRAY
22384: PUSH
22385: LD_INT 0
22387: PLUS
22388: PPUSH
22389: CALL_OW 505
// end ;
22393: LD_VAR 0 2
22397: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22398: LD_INT 0
22400: PPUSH
22401: PPUSH
22402: PPUSH
22403: PPUSH
// if not hack in hackTanks then
22404: LD_VAR 0 1
22408: PUSH
22409: LD_EXP 101
22413: IN
22414: NOT
22415: IFFALSE 22419
// exit ;
22417: GO 22504
// index := GetElementIndex ( hackTanks , hack ) ;
22419: LD_ADDR_VAR 0 5
22423: PUSH
22424: LD_EXP 101
22428: PPUSH
22429: LD_VAR 0 1
22433: PPUSH
22434: CALL 29254 0 2
22438: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22439: LD_ADDR_VAR 0 4
22443: PUSH
22444: DOUBLE
22445: LD_INT 1
22447: DEC
22448: ST_TO_ADDR
22449: LD_EXP 102
22453: PUSH
22454: LD_VAR 0 5
22458: ARRAY
22459: PUSH
22460: FOR_TO
22461: IFFALSE 22502
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22463: LD_EXP 102
22467: PUSH
22468: LD_VAR 0 5
22472: ARRAY
22473: PUSH
22474: LD_VAR 0 4
22478: ARRAY
22479: PUSH
22480: LD_INT 1
22482: ARRAY
22483: PUSH
22484: LD_VAR 0 2
22488: EQUAL
22489: IFFALSE 22500
// KillUnit ( vehicle ) ;
22491: LD_VAR 0 2
22495: PPUSH
22496: CALL_OW 66
22500: GO 22460
22502: POP
22503: POP
// end ;
22504: LD_VAR 0 3
22508: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22509: LD_EXP 106
22513: NOT
22514: IFFALSE 22549
22516: GO 22518
22518: DISABLE
// begin initMiner := true ;
22519: LD_ADDR_EXP 106
22523: PUSH
22524: LD_INT 1
22526: ST_TO_ADDR
// minersList := [ ] ;
22527: LD_ADDR_EXP 107
22531: PUSH
22532: EMPTY
22533: ST_TO_ADDR
// minerMinesList := [ ] ;
22534: LD_ADDR_EXP 108
22538: PUSH
22539: EMPTY
22540: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22541: LD_ADDR_EXP 109
22545: PUSH
22546: LD_INT 5
22548: ST_TO_ADDR
// end ;
22549: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22550: LD_EXP 106
22554: PUSH
22555: LD_INT 34
22557: PUSH
22558: LD_EXP 31
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PPUSH
22567: CALL_OW 69
22571: AND
22572: IFFALSE 23035
22574: GO 22576
22576: DISABLE
22577: LD_INT 0
22579: PPUSH
22580: PPUSH
22581: PPUSH
22582: PPUSH
// begin enable ;
22583: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22584: LD_ADDR_VAR 0 1
22588: PUSH
22589: LD_INT 34
22591: PUSH
22592: LD_EXP 31
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PPUSH
22601: CALL_OW 69
22605: PUSH
22606: FOR_IN
22607: IFFALSE 22679
// begin if not i in minersList then
22609: LD_VAR 0 1
22613: PUSH
22614: LD_EXP 107
22618: IN
22619: NOT
22620: IFFALSE 22677
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22622: LD_ADDR_EXP 107
22626: PUSH
22627: LD_EXP 107
22631: PPUSH
22632: LD_EXP 107
22636: PUSH
22637: LD_INT 1
22639: PLUS
22640: PPUSH
22641: LD_VAR 0 1
22645: PPUSH
22646: CALL_OW 1
22650: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22651: LD_ADDR_EXP 108
22655: PUSH
22656: LD_EXP 108
22660: PPUSH
22661: LD_EXP 108
22665: PUSH
22666: LD_INT 1
22668: PLUS
22669: PPUSH
22670: EMPTY
22671: PPUSH
22672: CALL_OW 1
22676: ST_TO_ADDR
// end end ;
22677: GO 22606
22679: POP
22680: POP
// for i := minerMinesList downto 1 do
22681: LD_ADDR_VAR 0 1
22685: PUSH
22686: DOUBLE
22687: LD_EXP 108
22691: INC
22692: ST_TO_ADDR
22693: LD_INT 1
22695: PUSH
22696: FOR_DOWNTO
22697: IFFALSE 23033
// begin if IsLive ( minersList [ i ] ) then
22699: LD_EXP 107
22703: PUSH
22704: LD_VAR 0 1
22708: ARRAY
22709: PPUSH
22710: CALL_OW 300
22714: IFFALSE 22742
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22716: LD_EXP 107
22720: PUSH
22721: LD_VAR 0 1
22725: ARRAY
22726: PPUSH
22727: LD_EXP 108
22731: PUSH
22732: LD_VAR 0 1
22736: ARRAY
22737: PPUSH
22738: CALL_OW 505
// if not minerMinesList [ i ] then
22742: LD_EXP 108
22746: PUSH
22747: LD_VAR 0 1
22751: ARRAY
22752: NOT
22753: IFFALSE 22757
// continue ;
22755: GO 22696
// for j := minerMinesList [ i ] downto 1 do
22757: LD_ADDR_VAR 0 2
22761: PUSH
22762: DOUBLE
22763: LD_EXP 108
22767: PUSH
22768: LD_VAR 0 1
22772: ARRAY
22773: INC
22774: ST_TO_ADDR
22775: LD_INT 1
22777: PUSH
22778: FOR_DOWNTO
22779: IFFALSE 23029
// begin side := GetSide ( minersList [ i ] ) ;
22781: LD_ADDR_VAR 0 3
22785: PUSH
22786: LD_EXP 107
22790: PUSH
22791: LD_VAR 0 1
22795: ARRAY
22796: PPUSH
22797: CALL_OW 255
22801: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22802: LD_ADDR_VAR 0 4
22806: PUSH
22807: LD_EXP 108
22811: PUSH
22812: LD_VAR 0 1
22816: ARRAY
22817: PUSH
22818: LD_VAR 0 2
22822: ARRAY
22823: PUSH
22824: LD_INT 1
22826: ARRAY
22827: PPUSH
22828: LD_EXP 108
22832: PUSH
22833: LD_VAR 0 1
22837: ARRAY
22838: PUSH
22839: LD_VAR 0 2
22843: ARRAY
22844: PUSH
22845: LD_INT 2
22847: ARRAY
22848: PPUSH
22849: CALL_OW 428
22853: ST_TO_ADDR
// if not tmp then
22854: LD_VAR 0 4
22858: NOT
22859: IFFALSE 22863
// continue ;
22861: GO 22778
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22863: LD_VAR 0 4
22867: PUSH
22868: LD_INT 81
22870: PUSH
22871: LD_VAR 0 3
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PPUSH
22880: CALL_OW 69
22884: IN
22885: PUSH
22886: LD_EXP 108
22890: PUSH
22891: LD_VAR 0 1
22895: ARRAY
22896: PUSH
22897: LD_VAR 0 2
22901: ARRAY
22902: PUSH
22903: LD_INT 1
22905: ARRAY
22906: PPUSH
22907: LD_EXP 108
22911: PUSH
22912: LD_VAR 0 1
22916: ARRAY
22917: PUSH
22918: LD_VAR 0 2
22922: ARRAY
22923: PUSH
22924: LD_INT 2
22926: ARRAY
22927: PPUSH
22928: CALL_OW 458
22932: AND
22933: IFFALSE 23027
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22935: LD_EXP 108
22939: PUSH
22940: LD_VAR 0 1
22944: ARRAY
22945: PUSH
22946: LD_VAR 0 2
22950: ARRAY
22951: PUSH
22952: LD_INT 1
22954: ARRAY
22955: PPUSH
22956: LD_EXP 108
22960: PUSH
22961: LD_VAR 0 1
22965: ARRAY
22966: PUSH
22967: LD_VAR 0 2
22971: ARRAY
22972: PUSH
22973: LD_INT 2
22975: ARRAY
22976: PPUSH
22977: LD_VAR 0 3
22981: PPUSH
22982: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22986: LD_ADDR_EXP 108
22990: PUSH
22991: LD_EXP 108
22995: PPUSH
22996: LD_VAR 0 1
23000: PPUSH
23001: LD_EXP 108
23005: PUSH
23006: LD_VAR 0 1
23010: ARRAY
23011: PPUSH
23012: LD_VAR 0 2
23016: PPUSH
23017: CALL_OW 3
23021: PPUSH
23022: CALL_OW 1
23026: ST_TO_ADDR
// end ; end ;
23027: GO 22778
23029: POP
23030: POP
// end ;
23031: GO 22696
23033: POP
23034: POP
// end ;
23035: PPOPN 4
23037: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23038: LD_INT 0
23040: PPUSH
23041: PPUSH
// result := false ;
23042: LD_ADDR_VAR 0 4
23046: PUSH
23047: LD_INT 0
23049: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23050: LD_VAR 0 1
23054: PPUSH
23055: CALL_OW 264
23059: PUSH
23060: LD_EXP 31
23064: EQUAL
23065: NOT
23066: IFFALSE 23070
// exit ;
23068: GO 23310
// index := GetElementIndex ( minersList , unit ) ;
23070: LD_ADDR_VAR 0 5
23074: PUSH
23075: LD_EXP 107
23079: PPUSH
23080: LD_VAR 0 1
23084: PPUSH
23085: CALL 29254 0 2
23089: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23090: LD_EXP 108
23094: PUSH
23095: LD_VAR 0 5
23099: ARRAY
23100: PUSH
23101: LD_EXP 109
23105: GREATEREQUAL
23106: IFFALSE 23110
// exit ;
23108: GO 23310
// ComMoveXY ( unit , x , y ) ;
23110: LD_VAR 0 1
23114: PPUSH
23115: LD_VAR 0 2
23119: PPUSH
23120: LD_VAR 0 3
23124: PPUSH
23125: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23129: LD_INT 35
23131: PPUSH
23132: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23136: LD_VAR 0 1
23140: PPUSH
23141: LD_VAR 0 2
23145: PPUSH
23146: LD_VAR 0 3
23150: PPUSH
23151: CALL 59621 0 3
23155: NOT
23156: PUSH
23157: LD_VAR 0 1
23161: PPUSH
23162: CALL_OW 314
23166: AND
23167: IFFALSE 23171
// exit ;
23169: GO 23310
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23171: LD_VAR 0 2
23175: PPUSH
23176: LD_VAR 0 3
23180: PPUSH
23181: CALL_OW 428
23185: PUSH
23186: LD_VAR 0 1
23190: EQUAL
23191: PUSH
23192: LD_VAR 0 1
23196: PPUSH
23197: CALL_OW 314
23201: NOT
23202: AND
23203: IFFALSE 23129
// PlaySoundXY ( x , y , PlantMine ) ;
23205: LD_VAR 0 2
23209: PPUSH
23210: LD_VAR 0 3
23214: PPUSH
23215: LD_STRING PlantMine
23217: PPUSH
23218: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23222: LD_VAR 0 2
23226: PPUSH
23227: LD_VAR 0 3
23231: PPUSH
23232: LD_VAR 0 1
23236: PPUSH
23237: CALL_OW 255
23241: PPUSH
23242: LD_INT 0
23244: PPUSH
23245: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23249: LD_ADDR_EXP 108
23253: PUSH
23254: LD_EXP 108
23258: PPUSH
23259: LD_VAR 0 5
23263: PUSH
23264: LD_EXP 108
23268: PUSH
23269: LD_VAR 0 5
23273: ARRAY
23274: PUSH
23275: LD_INT 1
23277: PLUS
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PPUSH
23283: LD_VAR 0 2
23287: PUSH
23288: LD_VAR 0 3
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PPUSH
23297: CALL 29469 0 3
23301: ST_TO_ADDR
// result := true ;
23302: LD_ADDR_VAR 0 4
23306: PUSH
23307: LD_INT 1
23309: ST_TO_ADDR
// end ;
23310: LD_VAR 0 4
23314: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23315: LD_INT 0
23317: PPUSH
23318: PPUSH
23319: PPUSH
// if not unit in minersList then
23320: LD_VAR 0 1
23324: PUSH
23325: LD_EXP 107
23329: IN
23330: NOT
23331: IFFALSE 23335
// exit ;
23333: GO 23727
// index := GetElementIndex ( minersList , unit ) ;
23335: LD_ADDR_VAR 0 6
23339: PUSH
23340: LD_EXP 107
23344: PPUSH
23345: LD_VAR 0 1
23349: PPUSH
23350: CALL 29254 0 2
23354: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23355: LD_ADDR_VAR 0 5
23359: PUSH
23360: DOUBLE
23361: LD_EXP 108
23365: PUSH
23366: LD_VAR 0 6
23370: ARRAY
23371: INC
23372: ST_TO_ADDR
23373: LD_INT 1
23375: PUSH
23376: FOR_DOWNTO
23377: IFFALSE 23538
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23379: LD_EXP 108
23383: PUSH
23384: LD_VAR 0 6
23388: ARRAY
23389: PUSH
23390: LD_VAR 0 5
23394: ARRAY
23395: PUSH
23396: LD_INT 1
23398: ARRAY
23399: PUSH
23400: LD_VAR 0 2
23404: EQUAL
23405: PUSH
23406: LD_EXP 108
23410: PUSH
23411: LD_VAR 0 6
23415: ARRAY
23416: PUSH
23417: LD_VAR 0 5
23421: ARRAY
23422: PUSH
23423: LD_INT 2
23425: ARRAY
23426: PUSH
23427: LD_VAR 0 3
23431: EQUAL
23432: AND
23433: IFFALSE 23536
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23435: LD_EXP 108
23439: PUSH
23440: LD_VAR 0 6
23444: ARRAY
23445: PUSH
23446: LD_VAR 0 5
23450: ARRAY
23451: PUSH
23452: LD_INT 1
23454: ARRAY
23455: PPUSH
23456: LD_EXP 108
23460: PUSH
23461: LD_VAR 0 6
23465: ARRAY
23466: PUSH
23467: LD_VAR 0 5
23471: ARRAY
23472: PUSH
23473: LD_INT 2
23475: ARRAY
23476: PPUSH
23477: LD_VAR 0 1
23481: PPUSH
23482: CALL_OW 255
23486: PPUSH
23487: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23491: LD_ADDR_EXP 108
23495: PUSH
23496: LD_EXP 108
23500: PPUSH
23501: LD_VAR 0 6
23505: PPUSH
23506: LD_EXP 108
23510: PUSH
23511: LD_VAR 0 6
23515: ARRAY
23516: PPUSH
23517: LD_VAR 0 5
23521: PPUSH
23522: CALL_OW 3
23526: PPUSH
23527: CALL_OW 1
23531: ST_TO_ADDR
// exit ;
23532: POP
23533: POP
23534: GO 23727
// end ; end ;
23536: GO 23376
23538: POP
23539: POP
// for i := minerMinesList [ index ] downto 1 do
23540: LD_ADDR_VAR 0 5
23544: PUSH
23545: DOUBLE
23546: LD_EXP 108
23550: PUSH
23551: LD_VAR 0 6
23555: ARRAY
23556: INC
23557: ST_TO_ADDR
23558: LD_INT 1
23560: PUSH
23561: FOR_DOWNTO
23562: IFFALSE 23725
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23564: LD_EXP 108
23568: PUSH
23569: LD_VAR 0 6
23573: ARRAY
23574: PUSH
23575: LD_VAR 0 5
23579: ARRAY
23580: PUSH
23581: LD_INT 1
23583: ARRAY
23584: PPUSH
23585: LD_EXP 108
23589: PUSH
23590: LD_VAR 0 6
23594: ARRAY
23595: PUSH
23596: LD_VAR 0 5
23600: ARRAY
23601: PUSH
23602: LD_INT 2
23604: ARRAY
23605: PPUSH
23606: LD_VAR 0 2
23610: PPUSH
23611: LD_VAR 0 3
23615: PPUSH
23616: CALL_OW 298
23620: PUSH
23621: LD_INT 6
23623: LESS
23624: IFFALSE 23723
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23626: LD_EXP 108
23630: PUSH
23631: LD_VAR 0 6
23635: ARRAY
23636: PUSH
23637: LD_VAR 0 5
23641: ARRAY
23642: PUSH
23643: LD_INT 1
23645: ARRAY
23646: PPUSH
23647: LD_EXP 108
23651: PUSH
23652: LD_VAR 0 6
23656: ARRAY
23657: PUSH
23658: LD_VAR 0 5
23662: ARRAY
23663: PUSH
23664: LD_INT 2
23666: ARRAY
23667: PPUSH
23668: LD_VAR 0 1
23672: PPUSH
23673: CALL_OW 255
23677: PPUSH
23678: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23682: LD_ADDR_EXP 108
23686: PUSH
23687: LD_EXP 108
23691: PPUSH
23692: LD_VAR 0 6
23696: PPUSH
23697: LD_EXP 108
23701: PUSH
23702: LD_VAR 0 6
23706: ARRAY
23707: PPUSH
23708: LD_VAR 0 5
23712: PPUSH
23713: CALL_OW 3
23717: PPUSH
23718: CALL_OW 1
23722: ST_TO_ADDR
// end ; end ;
23723: GO 23561
23725: POP
23726: POP
// end ;
23727: LD_VAR 0 4
23731: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23732: LD_INT 0
23734: PPUSH
23735: PPUSH
23736: PPUSH
23737: PPUSH
23738: PPUSH
23739: PPUSH
23740: PPUSH
23741: PPUSH
23742: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23743: LD_VAR 0 1
23747: PPUSH
23748: CALL_OW 264
23752: PUSH
23753: LD_EXP 31
23757: EQUAL
23758: NOT
23759: PUSH
23760: LD_VAR 0 1
23764: PUSH
23765: LD_EXP 107
23769: IN
23770: NOT
23771: OR
23772: IFFALSE 23776
// exit ;
23774: GO 24098
// index := GetElementIndex ( minersList , unit ) ;
23776: LD_ADDR_VAR 0 6
23780: PUSH
23781: LD_EXP 107
23785: PPUSH
23786: LD_VAR 0 1
23790: PPUSH
23791: CALL 29254 0 2
23795: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23796: LD_ADDR_VAR 0 8
23800: PUSH
23801: LD_EXP 109
23805: PUSH
23806: LD_EXP 108
23810: PUSH
23811: LD_VAR 0 6
23815: ARRAY
23816: MINUS
23817: ST_TO_ADDR
// if not minesFreeAmount then
23818: LD_VAR 0 8
23822: NOT
23823: IFFALSE 23827
// exit ;
23825: GO 24098
// tmp := [ ] ;
23827: LD_ADDR_VAR 0 7
23831: PUSH
23832: EMPTY
23833: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23834: LD_ADDR_VAR 0 5
23838: PUSH
23839: DOUBLE
23840: LD_INT 1
23842: DEC
23843: ST_TO_ADDR
23844: LD_VAR 0 8
23848: PUSH
23849: FOR_TO
23850: IFFALSE 24045
// begin _d := rand ( 0 , 5 ) ;
23852: LD_ADDR_VAR 0 11
23856: PUSH
23857: LD_INT 0
23859: PPUSH
23860: LD_INT 5
23862: PPUSH
23863: CALL_OW 12
23867: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23868: LD_ADDR_VAR 0 12
23872: PUSH
23873: LD_INT 2
23875: PPUSH
23876: LD_INT 6
23878: PPUSH
23879: CALL_OW 12
23883: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23884: LD_ADDR_VAR 0 9
23888: PUSH
23889: LD_VAR 0 2
23893: PPUSH
23894: LD_VAR 0 11
23898: PPUSH
23899: LD_VAR 0 12
23903: PPUSH
23904: CALL_OW 272
23908: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23909: LD_ADDR_VAR 0 10
23913: PUSH
23914: LD_VAR 0 3
23918: PPUSH
23919: LD_VAR 0 11
23923: PPUSH
23924: LD_VAR 0 12
23928: PPUSH
23929: CALL_OW 273
23933: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23934: LD_VAR 0 9
23938: PPUSH
23939: LD_VAR 0 10
23943: PPUSH
23944: CALL_OW 488
23948: PUSH
23949: LD_VAR 0 9
23953: PUSH
23954: LD_VAR 0 10
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_VAR 0 7
23967: IN
23968: NOT
23969: AND
23970: PUSH
23971: LD_VAR 0 9
23975: PPUSH
23976: LD_VAR 0 10
23980: PPUSH
23981: CALL_OW 458
23985: NOT
23986: AND
23987: IFFALSE 24029
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23989: LD_ADDR_VAR 0 7
23993: PUSH
23994: LD_VAR 0 7
23998: PPUSH
23999: LD_VAR 0 7
24003: PUSH
24004: LD_INT 1
24006: PLUS
24007: PPUSH
24008: LD_VAR 0 9
24012: PUSH
24013: LD_VAR 0 10
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PPUSH
24022: CALL_OW 1
24026: ST_TO_ADDR
24027: GO 24043
// i := i - 1 ;
24029: LD_ADDR_VAR 0 5
24033: PUSH
24034: LD_VAR 0 5
24038: PUSH
24039: LD_INT 1
24041: MINUS
24042: ST_TO_ADDR
// end ;
24043: GO 23849
24045: POP
24046: POP
// for i in tmp do
24047: LD_ADDR_VAR 0 5
24051: PUSH
24052: LD_VAR 0 7
24056: PUSH
24057: FOR_IN
24058: IFFALSE 24096
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24060: LD_VAR 0 1
24064: PPUSH
24065: LD_VAR 0 5
24069: PUSH
24070: LD_INT 1
24072: ARRAY
24073: PPUSH
24074: LD_VAR 0 5
24078: PUSH
24079: LD_INT 2
24081: ARRAY
24082: PPUSH
24083: CALL 23038 0 3
24087: NOT
24088: IFFALSE 24094
// exit ;
24090: POP
24091: POP
24092: GO 24098
24094: GO 24057
24096: POP
24097: POP
// end ;
24098: LD_VAR 0 4
24102: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24103: LD_INT 0
24105: PPUSH
24106: PPUSH
24107: PPUSH
24108: PPUSH
24109: PPUSH
24110: PPUSH
24111: PPUSH
// if not GetClass ( unit ) = class_sniper then
24112: LD_VAR 0 1
24116: PPUSH
24117: CALL_OW 257
24121: PUSH
24122: LD_INT 5
24124: EQUAL
24125: NOT
24126: IFFALSE 24130
// exit ;
24128: GO 24518
// dist := 8 ;
24130: LD_ADDR_VAR 0 5
24134: PUSH
24135: LD_INT 8
24137: ST_TO_ADDR
// viewRange := 12 ;
24138: LD_ADDR_VAR 0 7
24142: PUSH
24143: LD_INT 12
24145: ST_TO_ADDR
// side := GetSide ( unit ) ;
24146: LD_ADDR_VAR 0 6
24150: PUSH
24151: LD_VAR 0 1
24155: PPUSH
24156: CALL_OW 255
24160: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24161: LD_INT 61
24163: PPUSH
24164: LD_VAR 0 6
24168: PPUSH
24169: CALL_OW 321
24173: PUSH
24174: LD_INT 2
24176: EQUAL
24177: IFFALSE 24187
// viewRange := 16 ;
24179: LD_ADDR_VAR 0 7
24183: PUSH
24184: LD_INT 16
24186: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24187: LD_VAR 0 1
24191: PPUSH
24192: LD_VAR 0 2
24196: PPUSH
24197: LD_VAR 0 3
24201: PPUSH
24202: CALL_OW 297
24206: PUSH
24207: LD_VAR 0 5
24211: GREATER
24212: IFFALSE 24291
// begin ComMoveXY ( unit , x , y ) ;
24214: LD_VAR 0 1
24218: PPUSH
24219: LD_VAR 0 2
24223: PPUSH
24224: LD_VAR 0 3
24228: PPUSH
24229: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24233: LD_INT 35
24235: PPUSH
24236: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24240: LD_VAR 0 1
24244: PPUSH
24245: LD_VAR 0 2
24249: PPUSH
24250: LD_VAR 0 3
24254: PPUSH
24255: CALL 59621 0 3
24259: NOT
24260: IFFALSE 24264
// exit ;
24262: GO 24518
// until GetDistUnitXY ( unit , x , y ) < dist ;
24264: LD_VAR 0 1
24268: PPUSH
24269: LD_VAR 0 2
24273: PPUSH
24274: LD_VAR 0 3
24278: PPUSH
24279: CALL_OW 297
24283: PUSH
24284: LD_VAR 0 5
24288: LESS
24289: IFFALSE 24233
// end ; ComTurnXY ( unit , x , y ) ;
24291: LD_VAR 0 1
24295: PPUSH
24296: LD_VAR 0 2
24300: PPUSH
24301: LD_VAR 0 3
24305: PPUSH
24306: CALL_OW 118
// wait ( 5 ) ;
24310: LD_INT 5
24312: PPUSH
24313: CALL_OW 67
// _d := GetDir ( unit ) ;
24317: LD_ADDR_VAR 0 10
24321: PUSH
24322: LD_VAR 0 1
24326: PPUSH
24327: CALL_OW 254
24331: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24332: LD_ADDR_VAR 0 8
24336: PUSH
24337: LD_VAR 0 1
24341: PPUSH
24342: CALL_OW 250
24346: PPUSH
24347: LD_VAR 0 10
24351: PPUSH
24352: LD_VAR 0 5
24356: PPUSH
24357: CALL_OW 272
24361: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24362: LD_ADDR_VAR 0 9
24366: PUSH
24367: LD_VAR 0 1
24371: PPUSH
24372: CALL_OW 251
24376: PPUSH
24377: LD_VAR 0 10
24381: PPUSH
24382: LD_VAR 0 5
24386: PPUSH
24387: CALL_OW 273
24391: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24392: LD_VAR 0 8
24396: PPUSH
24397: LD_VAR 0 9
24401: PPUSH
24402: CALL_OW 488
24406: NOT
24407: IFFALSE 24411
// exit ;
24409: GO 24518
// ComAnimCustom ( unit , 1 ) ;
24411: LD_VAR 0 1
24415: PPUSH
24416: LD_INT 1
24418: PPUSH
24419: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24423: LD_VAR 0 8
24427: PPUSH
24428: LD_VAR 0 9
24432: PPUSH
24433: LD_VAR 0 6
24437: PPUSH
24438: LD_VAR 0 7
24442: PPUSH
24443: CALL_OW 330
// repeat wait ( 1 ) ;
24447: LD_INT 1
24449: PPUSH
24450: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24454: LD_VAR 0 1
24458: PPUSH
24459: CALL_OW 316
24463: PUSH
24464: LD_VAR 0 1
24468: PPUSH
24469: CALL_OW 314
24473: OR
24474: PUSH
24475: LD_VAR 0 1
24479: PPUSH
24480: CALL_OW 302
24484: NOT
24485: OR
24486: PUSH
24487: LD_VAR 0 1
24491: PPUSH
24492: CALL_OW 301
24496: OR
24497: IFFALSE 24447
// RemoveSeeing ( _x , _y , side ) ;
24499: LD_VAR 0 8
24503: PPUSH
24504: LD_VAR 0 9
24508: PPUSH
24509: LD_VAR 0 6
24513: PPUSH
24514: CALL_OW 331
// end ; end_of_file
24518: LD_VAR 0 4
24522: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24523: LD_INT 0
24525: PPUSH
24526: PPUSH
// if exist_mode then
24527: LD_VAR 0 2
24531: IFFALSE 24556
// unit := CreateCharacter ( prefix & ident ) else
24533: LD_ADDR_VAR 0 5
24537: PUSH
24538: LD_VAR 0 3
24542: PUSH
24543: LD_VAR 0 1
24547: STR
24548: PPUSH
24549: CALL_OW 34
24553: ST_TO_ADDR
24554: GO 24571
// unit := NewCharacter ( ident ) ;
24556: LD_ADDR_VAR 0 5
24560: PUSH
24561: LD_VAR 0 1
24565: PPUSH
24566: CALL_OW 25
24570: ST_TO_ADDR
// result := unit ;
24571: LD_ADDR_VAR 0 4
24575: PUSH
24576: LD_VAR 0 5
24580: ST_TO_ADDR
// end ;
24581: LD_VAR 0 4
24585: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24586: LD_INT 0
24588: PPUSH
24589: PPUSH
// if not side or not nation then
24590: LD_VAR 0 1
24594: NOT
24595: PUSH
24596: LD_VAR 0 2
24600: NOT
24601: OR
24602: IFFALSE 24606
// exit ;
24604: GO 25370
// case nation of nation_american :
24606: LD_VAR 0 2
24610: PUSH
24611: LD_INT 1
24613: DOUBLE
24614: EQUAL
24615: IFTRUE 24619
24617: GO 24833
24619: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24620: LD_ADDR_VAR 0 4
24624: PUSH
24625: LD_INT 35
24627: PUSH
24628: LD_INT 45
24630: PUSH
24631: LD_INT 46
24633: PUSH
24634: LD_INT 47
24636: PUSH
24637: LD_INT 82
24639: PUSH
24640: LD_INT 83
24642: PUSH
24643: LD_INT 84
24645: PUSH
24646: LD_INT 85
24648: PUSH
24649: LD_INT 86
24651: PUSH
24652: LD_INT 1
24654: PUSH
24655: LD_INT 2
24657: PUSH
24658: LD_INT 6
24660: PUSH
24661: LD_INT 15
24663: PUSH
24664: LD_INT 16
24666: PUSH
24667: LD_INT 7
24669: PUSH
24670: LD_INT 12
24672: PUSH
24673: LD_INT 13
24675: PUSH
24676: LD_INT 10
24678: PUSH
24679: LD_INT 14
24681: PUSH
24682: LD_INT 20
24684: PUSH
24685: LD_INT 21
24687: PUSH
24688: LD_INT 22
24690: PUSH
24691: LD_INT 25
24693: PUSH
24694: LD_INT 32
24696: PUSH
24697: LD_INT 27
24699: PUSH
24700: LD_INT 36
24702: PUSH
24703: LD_INT 69
24705: PUSH
24706: LD_INT 39
24708: PUSH
24709: LD_INT 34
24711: PUSH
24712: LD_INT 40
24714: PUSH
24715: LD_INT 48
24717: PUSH
24718: LD_INT 49
24720: PUSH
24721: LD_INT 50
24723: PUSH
24724: LD_INT 51
24726: PUSH
24727: LD_INT 52
24729: PUSH
24730: LD_INT 53
24732: PUSH
24733: LD_INT 54
24735: PUSH
24736: LD_INT 55
24738: PUSH
24739: LD_INT 56
24741: PUSH
24742: LD_INT 57
24744: PUSH
24745: LD_INT 58
24747: PUSH
24748: LD_INT 59
24750: PUSH
24751: LD_INT 60
24753: PUSH
24754: LD_INT 61
24756: PUSH
24757: LD_INT 62
24759: PUSH
24760: LD_INT 80
24762: PUSH
24763: LD_INT 82
24765: PUSH
24766: LD_INT 83
24768: PUSH
24769: LD_INT 84
24771: PUSH
24772: LD_INT 85
24774: PUSH
24775: LD_INT 86
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: ST_TO_ADDR
24831: GO 25294
24833: LD_INT 2
24835: DOUBLE
24836: EQUAL
24837: IFTRUE 24841
24839: GO 25063
24841: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
24842: LD_ADDR_VAR 0 4
24846: PUSH
24847: LD_INT 35
24849: PUSH
24850: LD_INT 45
24852: PUSH
24853: LD_INT 46
24855: PUSH
24856: LD_INT 47
24858: PUSH
24859: LD_INT 82
24861: PUSH
24862: LD_INT 83
24864: PUSH
24865: LD_INT 84
24867: PUSH
24868: LD_INT 85
24870: PUSH
24871: LD_INT 87
24873: PUSH
24874: LD_INT 70
24876: PUSH
24877: LD_INT 1
24879: PUSH
24880: LD_INT 11
24882: PUSH
24883: LD_INT 3
24885: PUSH
24886: LD_INT 4
24888: PUSH
24889: LD_INT 5
24891: PUSH
24892: LD_INT 6
24894: PUSH
24895: LD_INT 15
24897: PUSH
24898: LD_INT 18
24900: PUSH
24901: LD_INT 7
24903: PUSH
24904: LD_INT 17
24906: PUSH
24907: LD_INT 8
24909: PUSH
24910: LD_INT 20
24912: PUSH
24913: LD_INT 21
24915: PUSH
24916: LD_INT 22
24918: PUSH
24919: LD_INT 72
24921: PUSH
24922: LD_INT 26
24924: PUSH
24925: LD_INT 69
24927: PUSH
24928: LD_INT 39
24930: PUSH
24931: LD_INT 40
24933: PUSH
24934: LD_INT 41
24936: PUSH
24937: LD_INT 42
24939: PUSH
24940: LD_INT 43
24942: PUSH
24943: LD_INT 48
24945: PUSH
24946: LD_INT 49
24948: PUSH
24949: LD_INT 50
24951: PUSH
24952: LD_INT 51
24954: PUSH
24955: LD_INT 52
24957: PUSH
24958: LD_INT 53
24960: PUSH
24961: LD_INT 54
24963: PUSH
24964: LD_INT 55
24966: PUSH
24967: LD_INT 56
24969: PUSH
24970: LD_INT 60
24972: PUSH
24973: LD_INT 61
24975: PUSH
24976: LD_INT 62
24978: PUSH
24979: LD_INT 66
24981: PUSH
24982: LD_INT 67
24984: PUSH
24985: LD_INT 68
24987: PUSH
24988: LD_INT 81
24990: PUSH
24991: LD_INT 82
24993: PUSH
24994: LD_INT 83
24996: PUSH
24997: LD_INT 84
24999: PUSH
25000: LD_INT 85
25002: PUSH
25003: LD_INT 87
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: ST_TO_ADDR
25061: GO 25294
25063: LD_INT 3
25065: DOUBLE
25066: EQUAL
25067: IFTRUE 25071
25069: GO 25293
25071: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25072: LD_ADDR_VAR 0 4
25076: PUSH
25077: LD_INT 46
25079: PUSH
25080: LD_INT 47
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: LD_INT 2
25088: PUSH
25089: LD_INT 82
25091: PUSH
25092: LD_INT 83
25094: PUSH
25095: LD_INT 84
25097: PUSH
25098: LD_INT 85
25100: PUSH
25101: LD_INT 86
25103: PUSH
25104: LD_INT 11
25106: PUSH
25107: LD_INT 9
25109: PUSH
25110: LD_INT 20
25112: PUSH
25113: LD_INT 19
25115: PUSH
25116: LD_INT 21
25118: PUSH
25119: LD_INT 24
25121: PUSH
25122: LD_INT 22
25124: PUSH
25125: LD_INT 25
25127: PUSH
25128: LD_INT 28
25130: PUSH
25131: LD_INT 29
25133: PUSH
25134: LD_INT 30
25136: PUSH
25137: LD_INT 31
25139: PUSH
25140: LD_INT 37
25142: PUSH
25143: LD_INT 38
25145: PUSH
25146: LD_INT 32
25148: PUSH
25149: LD_INT 27
25151: PUSH
25152: LD_INT 33
25154: PUSH
25155: LD_INT 69
25157: PUSH
25158: LD_INT 39
25160: PUSH
25161: LD_INT 34
25163: PUSH
25164: LD_INT 40
25166: PUSH
25167: LD_INT 71
25169: PUSH
25170: LD_INT 23
25172: PUSH
25173: LD_INT 44
25175: PUSH
25176: LD_INT 48
25178: PUSH
25179: LD_INT 49
25181: PUSH
25182: LD_INT 50
25184: PUSH
25185: LD_INT 51
25187: PUSH
25188: LD_INT 52
25190: PUSH
25191: LD_INT 53
25193: PUSH
25194: LD_INT 54
25196: PUSH
25197: LD_INT 55
25199: PUSH
25200: LD_INT 56
25202: PUSH
25203: LD_INT 57
25205: PUSH
25206: LD_INT 58
25208: PUSH
25209: LD_INT 59
25211: PUSH
25212: LD_INT 63
25214: PUSH
25215: LD_INT 64
25217: PUSH
25218: LD_INT 65
25220: PUSH
25221: LD_INT 82
25223: PUSH
25224: LD_INT 83
25226: PUSH
25227: LD_INT 84
25229: PUSH
25230: LD_INT 85
25232: PUSH
25233: LD_INT 86
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: ST_TO_ADDR
25291: GO 25294
25293: POP
// if state > - 1 and state < 3 then
25294: LD_VAR 0 3
25298: PUSH
25299: LD_INT 1
25301: NEG
25302: GREATER
25303: PUSH
25304: LD_VAR 0 3
25308: PUSH
25309: LD_INT 3
25311: LESS
25312: AND
25313: IFFALSE 25370
// for i in result do
25315: LD_ADDR_VAR 0 5
25319: PUSH
25320: LD_VAR 0 4
25324: PUSH
25325: FOR_IN
25326: IFFALSE 25368
// if GetTech ( i , side ) <> state then
25328: LD_VAR 0 5
25332: PPUSH
25333: LD_VAR 0 1
25337: PPUSH
25338: CALL_OW 321
25342: PUSH
25343: LD_VAR 0 3
25347: NONEQUAL
25348: IFFALSE 25366
// result := result diff i ;
25350: LD_ADDR_VAR 0 4
25354: PUSH
25355: LD_VAR 0 4
25359: PUSH
25360: LD_VAR 0 5
25364: DIFF
25365: ST_TO_ADDR
25366: GO 25325
25368: POP
25369: POP
// end ;
25370: LD_VAR 0 4
25374: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25375: LD_INT 0
25377: PPUSH
25378: PPUSH
25379: PPUSH
// result := true ;
25380: LD_ADDR_VAR 0 3
25384: PUSH
25385: LD_INT 1
25387: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25388: LD_ADDR_VAR 0 5
25392: PUSH
25393: LD_VAR 0 2
25397: PPUSH
25398: CALL_OW 480
25402: ST_TO_ADDR
// if not tmp then
25403: LD_VAR 0 5
25407: NOT
25408: IFFALSE 25412
// exit ;
25410: GO 25461
// for i in tmp do
25412: LD_ADDR_VAR 0 4
25416: PUSH
25417: LD_VAR 0 5
25421: PUSH
25422: FOR_IN
25423: IFFALSE 25459
// if GetTech ( i , side ) <> state_researched then
25425: LD_VAR 0 4
25429: PPUSH
25430: LD_VAR 0 1
25434: PPUSH
25435: CALL_OW 321
25439: PUSH
25440: LD_INT 2
25442: NONEQUAL
25443: IFFALSE 25457
// begin result := false ;
25445: LD_ADDR_VAR 0 3
25449: PUSH
25450: LD_INT 0
25452: ST_TO_ADDR
// exit ;
25453: POP
25454: POP
25455: GO 25461
// end ;
25457: GO 25422
25459: POP
25460: POP
// end ;
25461: LD_VAR 0 3
25465: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25466: LD_INT 0
25468: PPUSH
25469: PPUSH
25470: PPUSH
25471: PPUSH
25472: PPUSH
25473: PPUSH
25474: PPUSH
25475: PPUSH
25476: PPUSH
25477: PPUSH
25478: PPUSH
25479: PPUSH
25480: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25481: LD_VAR 0 1
25485: NOT
25486: PUSH
25487: LD_VAR 0 1
25491: PPUSH
25492: CALL_OW 257
25496: PUSH
25497: LD_INT 9
25499: NONEQUAL
25500: OR
25501: IFFALSE 25505
// exit ;
25503: GO 26078
// side := GetSide ( unit ) ;
25505: LD_ADDR_VAR 0 9
25509: PUSH
25510: LD_VAR 0 1
25514: PPUSH
25515: CALL_OW 255
25519: ST_TO_ADDR
// tech_space := tech_spacanom ;
25520: LD_ADDR_VAR 0 12
25524: PUSH
25525: LD_INT 29
25527: ST_TO_ADDR
// tech_time := tech_taurad ;
25528: LD_ADDR_VAR 0 13
25532: PUSH
25533: LD_INT 28
25535: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25536: LD_ADDR_VAR 0 11
25540: PUSH
25541: LD_VAR 0 1
25545: PPUSH
25546: CALL_OW 310
25550: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25551: LD_VAR 0 11
25555: PPUSH
25556: CALL_OW 247
25560: PUSH
25561: LD_INT 2
25563: EQUAL
25564: IFFALSE 25568
// exit ;
25566: GO 26078
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25568: LD_ADDR_VAR 0 8
25572: PUSH
25573: LD_INT 81
25575: PUSH
25576: LD_VAR 0 9
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 3
25587: PUSH
25588: LD_INT 21
25590: PUSH
25591: LD_INT 3
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PPUSH
25606: CALL_OW 69
25610: ST_TO_ADDR
// if not tmp then
25611: LD_VAR 0 8
25615: NOT
25616: IFFALSE 25620
// exit ;
25618: GO 26078
// if in_unit then
25620: LD_VAR 0 11
25624: IFFALSE 25648
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25626: LD_ADDR_VAR 0 10
25630: PUSH
25631: LD_VAR 0 8
25635: PPUSH
25636: LD_VAR 0 11
25640: PPUSH
25641: CALL_OW 74
25645: ST_TO_ADDR
25646: GO 25668
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25648: LD_ADDR_VAR 0 10
25652: PUSH
25653: LD_VAR 0 8
25657: PPUSH
25658: LD_VAR 0 1
25662: PPUSH
25663: CALL_OW 74
25667: ST_TO_ADDR
// if not enemy then
25668: LD_VAR 0 10
25672: NOT
25673: IFFALSE 25677
// exit ;
25675: GO 26078
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25677: LD_VAR 0 11
25681: PUSH
25682: LD_VAR 0 11
25686: PPUSH
25687: LD_VAR 0 10
25691: PPUSH
25692: CALL_OW 296
25696: PUSH
25697: LD_INT 13
25699: GREATER
25700: AND
25701: PUSH
25702: LD_VAR 0 1
25706: PPUSH
25707: LD_VAR 0 10
25711: PPUSH
25712: CALL_OW 296
25716: PUSH
25717: LD_INT 12
25719: GREATER
25720: OR
25721: IFFALSE 25725
// exit ;
25723: GO 26078
// missile := [ 1 ] ;
25725: LD_ADDR_VAR 0 14
25729: PUSH
25730: LD_INT 1
25732: PUSH
25733: EMPTY
25734: LIST
25735: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25736: LD_VAR 0 9
25740: PPUSH
25741: LD_VAR 0 12
25745: PPUSH
25746: CALL_OW 325
25750: IFFALSE 25779
// missile := Insert ( missile , missile + 1 , 2 ) ;
25752: LD_ADDR_VAR 0 14
25756: PUSH
25757: LD_VAR 0 14
25761: PPUSH
25762: LD_VAR 0 14
25766: PUSH
25767: LD_INT 1
25769: PLUS
25770: PPUSH
25771: LD_INT 2
25773: PPUSH
25774: CALL_OW 2
25778: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25779: LD_VAR 0 9
25783: PPUSH
25784: LD_VAR 0 13
25788: PPUSH
25789: CALL_OW 325
25793: PUSH
25794: LD_VAR 0 10
25798: PPUSH
25799: CALL_OW 255
25803: PPUSH
25804: LD_VAR 0 13
25808: PPUSH
25809: CALL_OW 325
25813: NOT
25814: AND
25815: IFFALSE 25844
// missile := Insert ( missile , missile + 1 , 3 ) ;
25817: LD_ADDR_VAR 0 14
25821: PUSH
25822: LD_VAR 0 14
25826: PPUSH
25827: LD_VAR 0 14
25831: PUSH
25832: LD_INT 1
25834: PLUS
25835: PPUSH
25836: LD_INT 3
25838: PPUSH
25839: CALL_OW 2
25843: ST_TO_ADDR
// if missile < 2 then
25844: LD_VAR 0 14
25848: PUSH
25849: LD_INT 2
25851: LESS
25852: IFFALSE 25856
// exit ;
25854: GO 26078
// x := GetX ( enemy ) ;
25856: LD_ADDR_VAR 0 4
25860: PUSH
25861: LD_VAR 0 10
25865: PPUSH
25866: CALL_OW 250
25870: ST_TO_ADDR
// y := GetY ( enemy ) ;
25871: LD_ADDR_VAR 0 5
25875: PUSH
25876: LD_VAR 0 10
25880: PPUSH
25881: CALL_OW 251
25885: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25886: LD_ADDR_VAR 0 6
25890: PUSH
25891: LD_VAR 0 4
25895: PUSH
25896: LD_INT 1
25898: NEG
25899: PPUSH
25900: LD_INT 1
25902: PPUSH
25903: CALL_OW 12
25907: PLUS
25908: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25909: LD_ADDR_VAR 0 7
25913: PUSH
25914: LD_VAR 0 5
25918: PUSH
25919: LD_INT 1
25921: NEG
25922: PPUSH
25923: LD_INT 1
25925: PPUSH
25926: CALL_OW 12
25930: PLUS
25931: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25932: LD_VAR 0 6
25936: PPUSH
25937: LD_VAR 0 7
25941: PPUSH
25942: CALL_OW 488
25946: NOT
25947: IFFALSE 25969
// begin _x := x ;
25949: LD_ADDR_VAR 0 6
25953: PUSH
25954: LD_VAR 0 4
25958: ST_TO_ADDR
// _y := y ;
25959: LD_ADDR_VAR 0 7
25963: PUSH
25964: LD_VAR 0 5
25968: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25969: LD_ADDR_VAR 0 3
25973: PUSH
25974: LD_INT 1
25976: PPUSH
25977: LD_VAR 0 14
25981: PPUSH
25982: CALL_OW 12
25986: ST_TO_ADDR
// case i of 1 :
25987: LD_VAR 0 3
25991: PUSH
25992: LD_INT 1
25994: DOUBLE
25995: EQUAL
25996: IFTRUE 26000
25998: GO 26017
26000: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26001: LD_VAR 0 1
26005: PPUSH
26006: LD_VAR 0 10
26010: PPUSH
26011: CALL_OW 115
26015: GO 26078
26017: LD_INT 2
26019: DOUBLE
26020: EQUAL
26021: IFTRUE 26025
26023: GO 26047
26025: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26026: LD_VAR 0 1
26030: PPUSH
26031: LD_VAR 0 6
26035: PPUSH
26036: LD_VAR 0 7
26040: PPUSH
26041: CALL_OW 153
26045: GO 26078
26047: LD_INT 3
26049: DOUBLE
26050: EQUAL
26051: IFTRUE 26055
26053: GO 26077
26055: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26056: LD_VAR 0 1
26060: PPUSH
26061: LD_VAR 0 6
26065: PPUSH
26066: LD_VAR 0 7
26070: PPUSH
26071: CALL_OW 154
26075: GO 26078
26077: POP
// end ;
26078: LD_VAR 0 2
26082: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26083: LD_INT 0
26085: PPUSH
26086: PPUSH
26087: PPUSH
26088: PPUSH
26089: PPUSH
26090: PPUSH
// if not unit or not building then
26091: LD_VAR 0 1
26095: NOT
26096: PUSH
26097: LD_VAR 0 2
26101: NOT
26102: OR
26103: IFFALSE 26107
// exit ;
26105: GO 26265
// x := GetX ( building ) ;
26107: LD_ADDR_VAR 0 5
26111: PUSH
26112: LD_VAR 0 2
26116: PPUSH
26117: CALL_OW 250
26121: ST_TO_ADDR
// y := GetY ( building ) ;
26122: LD_ADDR_VAR 0 6
26126: PUSH
26127: LD_VAR 0 2
26131: PPUSH
26132: CALL_OW 251
26136: ST_TO_ADDR
// for i = 0 to 5 do
26137: LD_ADDR_VAR 0 4
26141: PUSH
26142: DOUBLE
26143: LD_INT 0
26145: DEC
26146: ST_TO_ADDR
26147: LD_INT 5
26149: PUSH
26150: FOR_TO
26151: IFFALSE 26263
// begin _x := ShiftX ( x , i , 3 ) ;
26153: LD_ADDR_VAR 0 7
26157: PUSH
26158: LD_VAR 0 5
26162: PPUSH
26163: LD_VAR 0 4
26167: PPUSH
26168: LD_INT 3
26170: PPUSH
26171: CALL_OW 272
26175: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26176: LD_ADDR_VAR 0 8
26180: PUSH
26181: LD_VAR 0 6
26185: PPUSH
26186: LD_VAR 0 4
26190: PPUSH
26191: LD_INT 3
26193: PPUSH
26194: CALL_OW 273
26198: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26199: LD_VAR 0 7
26203: PPUSH
26204: LD_VAR 0 8
26208: PPUSH
26209: CALL_OW 488
26213: NOT
26214: IFFALSE 26218
// continue ;
26216: GO 26150
// if HexInfo ( _x , _y ) = 0 then
26218: LD_VAR 0 7
26222: PPUSH
26223: LD_VAR 0 8
26227: PPUSH
26228: CALL_OW 428
26232: PUSH
26233: LD_INT 0
26235: EQUAL
26236: IFFALSE 26261
// begin ComMoveXY ( unit , _x , _y ) ;
26238: LD_VAR 0 1
26242: PPUSH
26243: LD_VAR 0 7
26247: PPUSH
26248: LD_VAR 0 8
26252: PPUSH
26253: CALL_OW 111
// exit ;
26257: POP
26258: POP
26259: GO 26265
// end ; end ;
26261: GO 26150
26263: POP
26264: POP
// end ;
26265: LD_VAR 0 3
26269: RET
// export function ScanBase ( side , base_area ) ; begin
26270: LD_INT 0
26272: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26273: LD_ADDR_VAR 0 3
26277: PUSH
26278: LD_VAR 0 2
26282: PPUSH
26283: LD_INT 81
26285: PUSH
26286: LD_VAR 0 1
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PPUSH
26295: CALL_OW 70
26299: ST_TO_ADDR
// end ;
26300: LD_VAR 0 3
26304: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26305: LD_INT 0
26307: PPUSH
26308: PPUSH
26309: PPUSH
26310: PPUSH
// result := false ;
26311: LD_ADDR_VAR 0 2
26315: PUSH
26316: LD_INT 0
26318: ST_TO_ADDR
// side := GetSide ( unit ) ;
26319: LD_ADDR_VAR 0 3
26323: PUSH
26324: LD_VAR 0 1
26328: PPUSH
26329: CALL_OW 255
26333: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26334: LD_ADDR_VAR 0 4
26338: PUSH
26339: LD_VAR 0 1
26343: PPUSH
26344: CALL_OW 248
26348: ST_TO_ADDR
// case nat of 1 :
26349: LD_VAR 0 4
26353: PUSH
26354: LD_INT 1
26356: DOUBLE
26357: EQUAL
26358: IFTRUE 26362
26360: GO 26373
26362: POP
// tech := tech_lassight ; 2 :
26363: LD_ADDR_VAR 0 5
26367: PUSH
26368: LD_INT 12
26370: ST_TO_ADDR
26371: GO 26412
26373: LD_INT 2
26375: DOUBLE
26376: EQUAL
26377: IFTRUE 26381
26379: GO 26392
26381: POP
// tech := tech_mortar ; 3 :
26382: LD_ADDR_VAR 0 5
26386: PUSH
26387: LD_INT 41
26389: ST_TO_ADDR
26390: GO 26412
26392: LD_INT 3
26394: DOUBLE
26395: EQUAL
26396: IFTRUE 26400
26398: GO 26411
26400: POP
// tech := tech_bazooka ; end ;
26401: LD_ADDR_VAR 0 5
26405: PUSH
26406: LD_INT 44
26408: ST_TO_ADDR
26409: GO 26412
26411: POP
// if Researched ( side , tech ) then
26412: LD_VAR 0 3
26416: PPUSH
26417: LD_VAR 0 5
26421: PPUSH
26422: CALL_OW 325
26426: IFFALSE 26453
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26428: LD_ADDR_VAR 0 2
26432: PUSH
26433: LD_INT 5
26435: PUSH
26436: LD_INT 8
26438: PUSH
26439: LD_INT 9
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: LIST
26446: PUSH
26447: LD_VAR 0 4
26451: ARRAY
26452: ST_TO_ADDR
// end ;
26453: LD_VAR 0 2
26457: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26458: LD_INT 0
26460: PPUSH
26461: PPUSH
26462: PPUSH
// if not mines then
26463: LD_VAR 0 2
26467: NOT
26468: IFFALSE 26472
// exit ;
26470: GO 26616
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26472: LD_ADDR_VAR 0 5
26476: PUSH
26477: LD_INT 81
26479: PUSH
26480: LD_VAR 0 1
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 3
26491: PUSH
26492: LD_INT 21
26494: PUSH
26495: LD_INT 3
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PPUSH
26510: CALL_OW 69
26514: ST_TO_ADDR
// for i in mines do
26515: LD_ADDR_VAR 0 4
26519: PUSH
26520: LD_VAR 0 2
26524: PUSH
26525: FOR_IN
26526: IFFALSE 26614
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26528: LD_VAR 0 4
26532: PUSH
26533: LD_INT 1
26535: ARRAY
26536: PPUSH
26537: LD_VAR 0 4
26541: PUSH
26542: LD_INT 2
26544: ARRAY
26545: PPUSH
26546: CALL_OW 458
26550: NOT
26551: IFFALSE 26555
// continue ;
26553: GO 26525
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26555: LD_VAR 0 4
26559: PUSH
26560: LD_INT 1
26562: ARRAY
26563: PPUSH
26564: LD_VAR 0 4
26568: PUSH
26569: LD_INT 2
26571: ARRAY
26572: PPUSH
26573: CALL_OW 428
26577: PUSH
26578: LD_VAR 0 5
26582: IN
26583: IFFALSE 26612
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26585: LD_VAR 0 4
26589: PUSH
26590: LD_INT 1
26592: ARRAY
26593: PPUSH
26594: LD_VAR 0 4
26598: PUSH
26599: LD_INT 2
26601: ARRAY
26602: PPUSH
26603: LD_VAR 0 1
26607: PPUSH
26608: CALL_OW 456
// end ;
26612: GO 26525
26614: POP
26615: POP
// end ;
26616: LD_VAR 0 3
26620: RET
// export function Count ( array ) ; var i ; begin
26621: LD_INT 0
26623: PPUSH
26624: PPUSH
// result := 0 ;
26625: LD_ADDR_VAR 0 2
26629: PUSH
26630: LD_INT 0
26632: ST_TO_ADDR
// for i in array do
26633: LD_ADDR_VAR 0 3
26637: PUSH
26638: LD_VAR 0 1
26642: PUSH
26643: FOR_IN
26644: IFFALSE 26668
// if i then
26646: LD_VAR 0 3
26650: IFFALSE 26666
// result := result + 1 ;
26652: LD_ADDR_VAR 0 2
26656: PUSH
26657: LD_VAR 0 2
26661: PUSH
26662: LD_INT 1
26664: PLUS
26665: ST_TO_ADDR
26666: GO 26643
26668: POP
26669: POP
// end ;
26670: LD_VAR 0 2
26674: RET
// export function IsEmpty ( building ) ; begin
26675: LD_INT 0
26677: PPUSH
// if not building then
26678: LD_VAR 0 1
26682: NOT
26683: IFFALSE 26687
// exit ;
26685: GO 26730
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26687: LD_ADDR_VAR 0 2
26691: PUSH
26692: LD_VAR 0 1
26696: PUSH
26697: LD_INT 22
26699: PUSH
26700: LD_VAR 0 1
26704: PPUSH
26705: CALL_OW 255
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 58
26716: PUSH
26717: EMPTY
26718: LIST
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PPUSH
26724: CALL_OW 69
26728: IN
26729: ST_TO_ADDR
// end ;
26730: LD_VAR 0 2
26734: RET
// export function IsNotFull ( building ) ; begin
26735: LD_INT 0
26737: PPUSH
// if not building then
26738: LD_VAR 0 1
26742: NOT
26743: IFFALSE 26747
// exit ;
26745: GO 26766
// result := UnitsInside ( building ) < 6 ;
26747: LD_ADDR_VAR 0 2
26751: PUSH
26752: LD_VAR 0 1
26756: PPUSH
26757: CALL_OW 313
26761: PUSH
26762: LD_INT 6
26764: LESS
26765: ST_TO_ADDR
// end ;
26766: LD_VAR 0 2
26770: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26771: LD_INT 0
26773: PPUSH
26774: PPUSH
26775: PPUSH
26776: PPUSH
// tmp := [ ] ;
26777: LD_ADDR_VAR 0 3
26781: PUSH
26782: EMPTY
26783: ST_TO_ADDR
// list := [ ] ;
26784: LD_ADDR_VAR 0 5
26788: PUSH
26789: EMPTY
26790: ST_TO_ADDR
// for i = 16 to 25 do
26791: LD_ADDR_VAR 0 4
26795: PUSH
26796: DOUBLE
26797: LD_INT 16
26799: DEC
26800: ST_TO_ADDR
26801: LD_INT 25
26803: PUSH
26804: FOR_TO
26805: IFFALSE 26878
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26807: LD_ADDR_VAR 0 3
26811: PUSH
26812: LD_VAR 0 3
26816: PUSH
26817: LD_INT 22
26819: PUSH
26820: LD_VAR 0 1
26824: PPUSH
26825: CALL_OW 255
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 91
26836: PUSH
26837: LD_VAR 0 1
26841: PUSH
26842: LD_INT 6
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 30
26852: PUSH
26853: LD_VAR 0 4
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: LIST
26866: PUSH
26867: EMPTY
26868: LIST
26869: PPUSH
26870: CALL_OW 69
26874: ADD
26875: ST_TO_ADDR
26876: GO 26804
26878: POP
26879: POP
// for i = 1 to tmp do
26880: LD_ADDR_VAR 0 4
26884: PUSH
26885: DOUBLE
26886: LD_INT 1
26888: DEC
26889: ST_TO_ADDR
26890: LD_VAR 0 3
26894: PUSH
26895: FOR_TO
26896: IFFALSE 26984
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26898: LD_ADDR_VAR 0 5
26902: PUSH
26903: LD_VAR 0 5
26907: PUSH
26908: LD_VAR 0 3
26912: PUSH
26913: LD_VAR 0 4
26917: ARRAY
26918: PPUSH
26919: CALL_OW 266
26923: PUSH
26924: LD_VAR 0 3
26928: PUSH
26929: LD_VAR 0 4
26933: ARRAY
26934: PPUSH
26935: CALL_OW 250
26939: PUSH
26940: LD_VAR 0 3
26944: PUSH
26945: LD_VAR 0 4
26949: ARRAY
26950: PPUSH
26951: CALL_OW 251
26955: PUSH
26956: LD_VAR 0 3
26960: PUSH
26961: LD_VAR 0 4
26965: ARRAY
26966: PPUSH
26967: CALL_OW 254
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: PUSH
26978: EMPTY
26979: LIST
26980: ADD
26981: ST_TO_ADDR
26982: GO 26895
26984: POP
26985: POP
// result := list ;
26986: LD_ADDR_VAR 0 2
26990: PUSH
26991: LD_VAR 0 5
26995: ST_TO_ADDR
// end ;
26996: LD_VAR 0 2
27000: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27001: LD_INT 0
27003: PPUSH
27004: PPUSH
27005: PPUSH
27006: PPUSH
27007: PPUSH
27008: PPUSH
27009: PPUSH
// if not factory then
27010: LD_VAR 0 1
27014: NOT
27015: IFFALSE 27019
// exit ;
27017: GO 27612
// if control = control_apeman then
27019: LD_VAR 0 4
27023: PUSH
27024: LD_INT 5
27026: EQUAL
27027: IFFALSE 27136
// begin tmp := UnitsInside ( factory ) ;
27029: LD_ADDR_VAR 0 8
27033: PUSH
27034: LD_VAR 0 1
27038: PPUSH
27039: CALL_OW 313
27043: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27044: LD_VAR 0 8
27048: PPUSH
27049: LD_INT 25
27051: PUSH
27052: LD_INT 12
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PPUSH
27059: CALL_OW 72
27063: NOT
27064: IFFALSE 27074
// control := control_manual ;
27066: LD_ADDR_VAR 0 4
27070: PUSH
27071: LD_INT 1
27073: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27074: LD_ADDR_VAR 0 8
27078: PUSH
27079: LD_VAR 0 1
27083: PPUSH
27084: CALL 26771 0 1
27088: ST_TO_ADDR
// if tmp then
27089: LD_VAR 0 8
27093: IFFALSE 27136
// begin for i in tmp do
27095: LD_ADDR_VAR 0 7
27099: PUSH
27100: LD_VAR 0 8
27104: PUSH
27105: FOR_IN
27106: IFFALSE 27134
// if i [ 1 ] = b_ext_radio then
27108: LD_VAR 0 7
27112: PUSH
27113: LD_INT 1
27115: ARRAY
27116: PUSH
27117: LD_INT 22
27119: EQUAL
27120: IFFALSE 27132
// begin control := control_remote ;
27122: LD_ADDR_VAR 0 4
27126: PUSH
27127: LD_INT 2
27129: ST_TO_ADDR
// break ;
27130: GO 27134
// end ;
27132: GO 27105
27134: POP
27135: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27136: LD_VAR 0 1
27140: PPUSH
27141: LD_VAR 0 2
27145: PPUSH
27146: LD_VAR 0 3
27150: PPUSH
27151: LD_VAR 0 4
27155: PPUSH
27156: LD_VAR 0 5
27160: PPUSH
27161: CALL_OW 448
27165: IFFALSE 27200
// begin result := [ chassis , engine , control , weapon ] ;
27167: LD_ADDR_VAR 0 6
27171: PUSH
27172: LD_VAR 0 2
27176: PUSH
27177: LD_VAR 0 3
27181: PUSH
27182: LD_VAR 0 4
27186: PUSH
27187: LD_VAR 0 5
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: ST_TO_ADDR
// exit ;
27198: GO 27612
// end ; _chassis := AvailableChassisList ( factory ) ;
27200: LD_ADDR_VAR 0 9
27204: PUSH
27205: LD_VAR 0 1
27209: PPUSH
27210: CALL_OW 475
27214: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27215: LD_ADDR_VAR 0 11
27219: PUSH
27220: LD_VAR 0 1
27224: PPUSH
27225: CALL_OW 476
27229: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27230: LD_ADDR_VAR 0 12
27234: PUSH
27235: LD_VAR 0 1
27239: PPUSH
27240: CALL_OW 477
27244: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27245: LD_ADDR_VAR 0 10
27249: PUSH
27250: LD_VAR 0 1
27254: PPUSH
27255: CALL_OW 478
27259: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27260: LD_VAR 0 9
27264: NOT
27265: PUSH
27266: LD_VAR 0 11
27270: NOT
27271: OR
27272: PUSH
27273: LD_VAR 0 12
27277: NOT
27278: OR
27279: PUSH
27280: LD_VAR 0 10
27284: NOT
27285: OR
27286: IFFALSE 27321
// begin result := [ chassis , engine , control , weapon ] ;
27288: LD_ADDR_VAR 0 6
27292: PUSH
27293: LD_VAR 0 2
27297: PUSH
27298: LD_VAR 0 3
27302: PUSH
27303: LD_VAR 0 4
27307: PUSH
27308: LD_VAR 0 5
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: ST_TO_ADDR
// exit ;
27319: GO 27612
// end ; if not chassis in _chassis then
27321: LD_VAR 0 2
27325: PUSH
27326: LD_VAR 0 9
27330: IN
27331: NOT
27332: IFFALSE 27358
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27334: LD_ADDR_VAR 0 2
27338: PUSH
27339: LD_VAR 0 9
27343: PUSH
27344: LD_INT 1
27346: PPUSH
27347: LD_VAR 0 9
27351: PPUSH
27352: CALL_OW 12
27356: ARRAY
27357: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27358: LD_VAR 0 2
27362: PPUSH
27363: LD_VAR 0 3
27367: PPUSH
27368: CALL 27617 0 2
27372: NOT
27373: IFFALSE 27432
// repeat engine := _engine [ 1 ] ;
27375: LD_ADDR_VAR 0 3
27379: PUSH
27380: LD_VAR 0 11
27384: PUSH
27385: LD_INT 1
27387: ARRAY
27388: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27389: LD_ADDR_VAR 0 11
27393: PUSH
27394: LD_VAR 0 11
27398: PPUSH
27399: LD_INT 1
27401: PPUSH
27402: CALL_OW 3
27406: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27407: LD_VAR 0 2
27411: PPUSH
27412: LD_VAR 0 3
27416: PPUSH
27417: CALL 27617 0 2
27421: PUSH
27422: LD_VAR 0 11
27426: PUSH
27427: EMPTY
27428: EQUAL
27429: OR
27430: IFFALSE 27375
// if not control in _control then
27432: LD_VAR 0 4
27436: PUSH
27437: LD_VAR 0 12
27441: IN
27442: NOT
27443: IFFALSE 27469
// control := _control [ rand ( 1 , _control ) ] ;
27445: LD_ADDR_VAR 0 4
27449: PUSH
27450: LD_VAR 0 12
27454: PUSH
27455: LD_INT 1
27457: PPUSH
27458: LD_VAR 0 12
27462: PPUSH
27463: CALL_OW 12
27467: ARRAY
27468: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27469: LD_VAR 0 2
27473: PPUSH
27474: LD_VAR 0 5
27478: PPUSH
27479: CALL 27837 0 2
27483: NOT
27484: IFFALSE 27543
// repeat weapon := _weapon [ 1 ] ;
27486: LD_ADDR_VAR 0 5
27490: PUSH
27491: LD_VAR 0 10
27495: PUSH
27496: LD_INT 1
27498: ARRAY
27499: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27500: LD_ADDR_VAR 0 10
27504: PUSH
27505: LD_VAR 0 10
27509: PPUSH
27510: LD_INT 1
27512: PPUSH
27513: CALL_OW 3
27517: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27518: LD_VAR 0 2
27522: PPUSH
27523: LD_VAR 0 5
27527: PPUSH
27528: CALL 27837 0 2
27532: PUSH
27533: LD_VAR 0 10
27537: PUSH
27538: EMPTY
27539: EQUAL
27540: OR
27541: IFFALSE 27486
// result := [ ] ;
27543: LD_ADDR_VAR 0 6
27547: PUSH
27548: EMPTY
27549: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27550: LD_VAR 0 1
27554: PPUSH
27555: LD_VAR 0 2
27559: PPUSH
27560: LD_VAR 0 3
27564: PPUSH
27565: LD_VAR 0 4
27569: PPUSH
27570: LD_VAR 0 5
27574: PPUSH
27575: CALL_OW 448
27579: IFFALSE 27612
// result := [ chassis , engine , control , weapon ] ;
27581: LD_ADDR_VAR 0 6
27585: PUSH
27586: LD_VAR 0 2
27590: PUSH
27591: LD_VAR 0 3
27595: PUSH
27596: LD_VAR 0 4
27600: PUSH
27601: LD_VAR 0 5
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: ST_TO_ADDR
// end ;
27612: LD_VAR 0 6
27616: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27617: LD_INT 0
27619: PPUSH
// if not chassis or not engine then
27620: LD_VAR 0 1
27624: NOT
27625: PUSH
27626: LD_VAR 0 2
27630: NOT
27631: OR
27632: IFFALSE 27636
// exit ;
27634: GO 27832
// case engine of engine_solar :
27636: LD_VAR 0 2
27640: PUSH
27641: LD_INT 2
27643: DOUBLE
27644: EQUAL
27645: IFTRUE 27649
27647: GO 27687
27649: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27650: LD_ADDR_VAR 0 3
27654: PUSH
27655: LD_INT 11
27657: PUSH
27658: LD_INT 12
27660: PUSH
27661: LD_INT 13
27663: PUSH
27664: LD_INT 14
27666: PUSH
27667: LD_INT 1
27669: PUSH
27670: LD_INT 2
27672: PUSH
27673: LD_INT 3
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: ST_TO_ADDR
27685: GO 27816
27687: LD_INT 1
27689: DOUBLE
27690: EQUAL
27691: IFTRUE 27695
27693: GO 27757
27695: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27696: LD_ADDR_VAR 0 3
27700: PUSH
27701: LD_INT 11
27703: PUSH
27704: LD_INT 12
27706: PUSH
27707: LD_INT 13
27709: PUSH
27710: LD_INT 14
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: LD_INT 2
27718: PUSH
27719: LD_INT 3
27721: PUSH
27722: LD_INT 4
27724: PUSH
27725: LD_INT 5
27727: PUSH
27728: LD_INT 21
27730: PUSH
27731: LD_INT 23
27733: PUSH
27734: LD_INT 22
27736: PUSH
27737: LD_INT 24
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: ST_TO_ADDR
27755: GO 27816
27757: LD_INT 3
27759: DOUBLE
27760: EQUAL
27761: IFTRUE 27765
27763: GO 27815
27765: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27766: LD_ADDR_VAR 0 3
27770: PUSH
27771: LD_INT 13
27773: PUSH
27774: LD_INT 14
27776: PUSH
27777: LD_INT 2
27779: PUSH
27780: LD_INT 3
27782: PUSH
27783: LD_INT 4
27785: PUSH
27786: LD_INT 5
27788: PUSH
27789: LD_INT 21
27791: PUSH
27792: LD_INT 22
27794: PUSH
27795: LD_INT 23
27797: PUSH
27798: LD_INT 24
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: ST_TO_ADDR
27813: GO 27816
27815: POP
// result := ( chassis in result ) ;
27816: LD_ADDR_VAR 0 3
27820: PUSH
27821: LD_VAR 0 1
27825: PUSH
27826: LD_VAR 0 3
27830: IN
27831: ST_TO_ADDR
// end ;
27832: LD_VAR 0 3
27836: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27837: LD_INT 0
27839: PPUSH
// if not chassis or not weapon then
27840: LD_VAR 0 1
27844: NOT
27845: PUSH
27846: LD_VAR 0 2
27850: NOT
27851: OR
27852: IFFALSE 27856
// exit ;
27854: GO 28882
// case weapon of us_machine_gun :
27856: LD_VAR 0 2
27860: PUSH
27861: LD_INT 2
27863: DOUBLE
27864: EQUAL
27865: IFTRUE 27869
27867: GO 27899
27869: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27870: LD_ADDR_VAR 0 3
27874: PUSH
27875: LD_INT 1
27877: PUSH
27878: LD_INT 2
27880: PUSH
27881: LD_INT 3
27883: PUSH
27884: LD_INT 4
27886: PUSH
27887: LD_INT 5
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: ST_TO_ADDR
27897: GO 28866
27899: LD_INT 3
27901: DOUBLE
27902: EQUAL
27903: IFTRUE 27907
27905: GO 27937
27907: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27908: LD_ADDR_VAR 0 3
27912: PUSH
27913: LD_INT 1
27915: PUSH
27916: LD_INT 2
27918: PUSH
27919: LD_INT 3
27921: PUSH
27922: LD_INT 4
27924: PUSH
27925: LD_INT 5
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: ST_TO_ADDR
27935: GO 28866
27937: LD_INT 11
27939: DOUBLE
27940: EQUAL
27941: IFTRUE 27945
27943: GO 27975
27945: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27946: LD_ADDR_VAR 0 3
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: LD_INT 2
27956: PUSH
27957: LD_INT 3
27959: PUSH
27960: LD_INT 4
27962: PUSH
27963: LD_INT 5
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: ST_TO_ADDR
27973: GO 28866
27975: LD_INT 4
27977: DOUBLE
27978: EQUAL
27979: IFTRUE 27983
27981: GO 28009
27983: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27984: LD_ADDR_VAR 0 3
27988: PUSH
27989: LD_INT 2
27991: PUSH
27992: LD_INT 3
27994: PUSH
27995: LD_INT 4
27997: PUSH
27998: LD_INT 5
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: ST_TO_ADDR
28007: GO 28866
28009: LD_INT 5
28011: DOUBLE
28012: EQUAL
28013: IFTRUE 28017
28015: GO 28043
28017: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28018: LD_ADDR_VAR 0 3
28022: PUSH
28023: LD_INT 2
28025: PUSH
28026: LD_INT 3
28028: PUSH
28029: LD_INT 4
28031: PUSH
28032: LD_INT 5
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: ST_TO_ADDR
28041: GO 28866
28043: LD_INT 9
28045: DOUBLE
28046: EQUAL
28047: IFTRUE 28051
28049: GO 28077
28051: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28052: LD_ADDR_VAR 0 3
28056: PUSH
28057: LD_INT 2
28059: PUSH
28060: LD_INT 3
28062: PUSH
28063: LD_INT 4
28065: PUSH
28066: LD_INT 5
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: ST_TO_ADDR
28075: GO 28866
28077: LD_INT 7
28079: DOUBLE
28080: EQUAL
28081: IFTRUE 28085
28083: GO 28111
28085: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28086: LD_ADDR_VAR 0 3
28090: PUSH
28091: LD_INT 2
28093: PUSH
28094: LD_INT 3
28096: PUSH
28097: LD_INT 4
28099: PUSH
28100: LD_INT 5
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: ST_TO_ADDR
28109: GO 28866
28111: LD_INT 12
28113: DOUBLE
28114: EQUAL
28115: IFTRUE 28119
28117: GO 28145
28119: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28120: LD_ADDR_VAR 0 3
28124: PUSH
28125: LD_INT 2
28127: PUSH
28128: LD_INT 3
28130: PUSH
28131: LD_INT 4
28133: PUSH
28134: LD_INT 5
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: ST_TO_ADDR
28143: GO 28866
28145: LD_INT 13
28147: DOUBLE
28148: EQUAL
28149: IFTRUE 28153
28151: GO 28179
28153: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28154: LD_ADDR_VAR 0 3
28158: PUSH
28159: LD_INT 2
28161: PUSH
28162: LD_INT 3
28164: PUSH
28165: LD_INT 4
28167: PUSH
28168: LD_INT 5
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: ST_TO_ADDR
28177: GO 28866
28179: LD_INT 14
28181: DOUBLE
28182: EQUAL
28183: IFTRUE 28187
28185: GO 28205
28187: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28188: LD_ADDR_VAR 0 3
28192: PUSH
28193: LD_INT 4
28195: PUSH
28196: LD_INT 5
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: ST_TO_ADDR
28203: GO 28866
28205: LD_INT 6
28207: DOUBLE
28208: EQUAL
28209: IFTRUE 28213
28211: GO 28231
28213: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28214: LD_ADDR_VAR 0 3
28218: PUSH
28219: LD_INT 4
28221: PUSH
28222: LD_INT 5
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: ST_TO_ADDR
28229: GO 28866
28231: LD_INT 10
28233: DOUBLE
28234: EQUAL
28235: IFTRUE 28239
28237: GO 28257
28239: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28240: LD_ADDR_VAR 0 3
28244: PUSH
28245: LD_INT 4
28247: PUSH
28248: LD_INT 5
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: ST_TO_ADDR
28255: GO 28866
28257: LD_INT 22
28259: DOUBLE
28260: EQUAL
28261: IFTRUE 28265
28263: GO 28291
28265: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28266: LD_ADDR_VAR 0 3
28270: PUSH
28271: LD_INT 11
28273: PUSH
28274: LD_INT 12
28276: PUSH
28277: LD_INT 13
28279: PUSH
28280: LD_INT 14
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: ST_TO_ADDR
28289: GO 28866
28291: LD_INT 23
28293: DOUBLE
28294: EQUAL
28295: IFTRUE 28299
28297: GO 28325
28299: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28300: LD_ADDR_VAR 0 3
28304: PUSH
28305: LD_INT 11
28307: PUSH
28308: LD_INT 12
28310: PUSH
28311: LD_INT 13
28313: PUSH
28314: LD_INT 14
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: ST_TO_ADDR
28323: GO 28866
28325: LD_INT 24
28327: DOUBLE
28328: EQUAL
28329: IFTRUE 28333
28331: GO 28359
28333: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28334: LD_ADDR_VAR 0 3
28338: PUSH
28339: LD_INT 11
28341: PUSH
28342: LD_INT 12
28344: PUSH
28345: LD_INT 13
28347: PUSH
28348: LD_INT 14
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: ST_TO_ADDR
28357: GO 28866
28359: LD_INT 30
28361: DOUBLE
28362: EQUAL
28363: IFTRUE 28367
28365: GO 28393
28367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28368: LD_ADDR_VAR 0 3
28372: PUSH
28373: LD_INT 11
28375: PUSH
28376: LD_INT 12
28378: PUSH
28379: LD_INT 13
28381: PUSH
28382: LD_INT 14
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: ST_TO_ADDR
28391: GO 28866
28393: LD_INT 25
28395: DOUBLE
28396: EQUAL
28397: IFTRUE 28401
28399: GO 28419
28401: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28402: LD_ADDR_VAR 0 3
28406: PUSH
28407: LD_INT 13
28409: PUSH
28410: LD_INT 14
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: ST_TO_ADDR
28417: GO 28866
28419: LD_INT 27
28421: DOUBLE
28422: EQUAL
28423: IFTRUE 28427
28425: GO 28445
28427: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28428: LD_ADDR_VAR 0 3
28432: PUSH
28433: LD_INT 13
28435: PUSH
28436: LD_INT 14
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: ST_TO_ADDR
28443: GO 28866
28445: LD_INT 28
28447: DOUBLE
28448: EQUAL
28449: IFTRUE 28453
28451: GO 28471
28453: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28454: LD_ADDR_VAR 0 3
28458: PUSH
28459: LD_INT 13
28461: PUSH
28462: LD_INT 14
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: ST_TO_ADDR
28469: GO 28866
28471: LD_INT 29
28473: DOUBLE
28474: EQUAL
28475: IFTRUE 28479
28477: GO 28497
28479: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28480: LD_ADDR_VAR 0 3
28484: PUSH
28485: LD_INT 13
28487: PUSH
28488: LD_INT 14
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: ST_TO_ADDR
28495: GO 28866
28497: LD_INT 31
28499: DOUBLE
28500: EQUAL
28501: IFTRUE 28505
28503: GO 28523
28505: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28506: LD_ADDR_VAR 0 3
28510: PUSH
28511: LD_INT 13
28513: PUSH
28514: LD_INT 14
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: ST_TO_ADDR
28521: GO 28866
28523: LD_INT 26
28525: DOUBLE
28526: EQUAL
28527: IFTRUE 28531
28529: GO 28549
28531: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28532: LD_ADDR_VAR 0 3
28536: PUSH
28537: LD_INT 13
28539: PUSH
28540: LD_INT 14
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: ST_TO_ADDR
28547: GO 28866
28549: LD_INT 42
28551: DOUBLE
28552: EQUAL
28553: IFTRUE 28557
28555: GO 28583
28557: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28558: LD_ADDR_VAR 0 3
28562: PUSH
28563: LD_INT 21
28565: PUSH
28566: LD_INT 22
28568: PUSH
28569: LD_INT 23
28571: PUSH
28572: LD_INT 24
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: ST_TO_ADDR
28581: GO 28866
28583: LD_INT 43
28585: DOUBLE
28586: EQUAL
28587: IFTRUE 28591
28589: GO 28617
28591: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28592: LD_ADDR_VAR 0 3
28596: PUSH
28597: LD_INT 21
28599: PUSH
28600: LD_INT 22
28602: PUSH
28603: LD_INT 23
28605: PUSH
28606: LD_INT 24
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: ST_TO_ADDR
28615: GO 28866
28617: LD_INT 44
28619: DOUBLE
28620: EQUAL
28621: IFTRUE 28625
28623: GO 28651
28625: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28626: LD_ADDR_VAR 0 3
28630: PUSH
28631: LD_INT 21
28633: PUSH
28634: LD_INT 22
28636: PUSH
28637: LD_INT 23
28639: PUSH
28640: LD_INT 24
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: ST_TO_ADDR
28649: GO 28866
28651: LD_INT 45
28653: DOUBLE
28654: EQUAL
28655: IFTRUE 28659
28657: GO 28685
28659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28660: LD_ADDR_VAR 0 3
28664: PUSH
28665: LD_INT 21
28667: PUSH
28668: LD_INT 22
28670: PUSH
28671: LD_INT 23
28673: PUSH
28674: LD_INT 24
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: ST_TO_ADDR
28683: GO 28866
28685: LD_INT 49
28687: DOUBLE
28688: EQUAL
28689: IFTRUE 28693
28691: GO 28719
28693: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28694: LD_ADDR_VAR 0 3
28698: PUSH
28699: LD_INT 21
28701: PUSH
28702: LD_INT 22
28704: PUSH
28705: LD_INT 23
28707: PUSH
28708: LD_INT 24
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: ST_TO_ADDR
28717: GO 28866
28719: LD_INT 51
28721: DOUBLE
28722: EQUAL
28723: IFTRUE 28727
28725: GO 28753
28727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28728: LD_ADDR_VAR 0 3
28732: PUSH
28733: LD_INT 21
28735: PUSH
28736: LD_INT 22
28738: PUSH
28739: LD_INT 23
28741: PUSH
28742: LD_INT 24
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: ST_TO_ADDR
28751: GO 28866
28753: LD_INT 52
28755: DOUBLE
28756: EQUAL
28757: IFTRUE 28761
28759: GO 28787
28761: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28762: LD_ADDR_VAR 0 3
28766: PUSH
28767: LD_INT 21
28769: PUSH
28770: LD_INT 22
28772: PUSH
28773: LD_INT 23
28775: PUSH
28776: LD_INT 24
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: ST_TO_ADDR
28785: GO 28866
28787: LD_INT 53
28789: DOUBLE
28790: EQUAL
28791: IFTRUE 28795
28793: GO 28813
28795: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28796: LD_ADDR_VAR 0 3
28800: PUSH
28801: LD_INT 23
28803: PUSH
28804: LD_INT 24
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: ST_TO_ADDR
28811: GO 28866
28813: LD_INT 46
28815: DOUBLE
28816: EQUAL
28817: IFTRUE 28821
28819: GO 28839
28821: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28822: LD_ADDR_VAR 0 3
28826: PUSH
28827: LD_INT 23
28829: PUSH
28830: LD_INT 24
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: ST_TO_ADDR
28837: GO 28866
28839: LD_INT 47
28841: DOUBLE
28842: EQUAL
28843: IFTRUE 28847
28845: GO 28865
28847: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28848: LD_ADDR_VAR 0 3
28852: PUSH
28853: LD_INT 23
28855: PUSH
28856: LD_INT 24
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: ST_TO_ADDR
28863: GO 28866
28865: POP
// result := ( chassis in result ) ;
28866: LD_ADDR_VAR 0 3
28870: PUSH
28871: LD_VAR 0 1
28875: PUSH
28876: LD_VAR 0 3
28880: IN
28881: ST_TO_ADDR
// end ;
28882: LD_VAR 0 3
28886: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28887: LD_INT 0
28889: PPUSH
28890: PPUSH
28891: PPUSH
28892: PPUSH
28893: PPUSH
28894: PPUSH
28895: PPUSH
// result := array ;
28896: LD_ADDR_VAR 0 5
28900: PUSH
28901: LD_VAR 0 1
28905: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28906: LD_VAR 0 1
28910: NOT
28911: PUSH
28912: LD_VAR 0 2
28916: NOT
28917: OR
28918: PUSH
28919: LD_VAR 0 3
28923: NOT
28924: OR
28925: PUSH
28926: LD_VAR 0 2
28930: PUSH
28931: LD_VAR 0 1
28935: GREATER
28936: OR
28937: PUSH
28938: LD_VAR 0 3
28942: PUSH
28943: LD_VAR 0 1
28947: GREATER
28948: OR
28949: IFFALSE 28953
// exit ;
28951: GO 29249
// if direction then
28953: LD_VAR 0 4
28957: IFFALSE 29021
// begin d := 1 ;
28959: LD_ADDR_VAR 0 9
28963: PUSH
28964: LD_INT 1
28966: ST_TO_ADDR
// if i_from > i_to then
28967: LD_VAR 0 2
28971: PUSH
28972: LD_VAR 0 3
28976: GREATER
28977: IFFALSE 29003
// length := ( array - i_from ) + i_to else
28979: LD_ADDR_VAR 0 11
28983: PUSH
28984: LD_VAR 0 1
28988: PUSH
28989: LD_VAR 0 2
28993: MINUS
28994: PUSH
28995: LD_VAR 0 3
28999: PLUS
29000: ST_TO_ADDR
29001: GO 29019
// length := i_to - i_from ;
29003: LD_ADDR_VAR 0 11
29007: PUSH
29008: LD_VAR 0 3
29012: PUSH
29013: LD_VAR 0 2
29017: MINUS
29018: ST_TO_ADDR
// end else
29019: GO 29082
// begin d := - 1 ;
29021: LD_ADDR_VAR 0 9
29025: PUSH
29026: LD_INT 1
29028: NEG
29029: ST_TO_ADDR
// if i_from > i_to then
29030: LD_VAR 0 2
29034: PUSH
29035: LD_VAR 0 3
29039: GREATER
29040: IFFALSE 29060
// length := i_from - i_to else
29042: LD_ADDR_VAR 0 11
29046: PUSH
29047: LD_VAR 0 2
29051: PUSH
29052: LD_VAR 0 3
29056: MINUS
29057: ST_TO_ADDR
29058: GO 29082
// length := ( array - i_to ) + i_from ;
29060: LD_ADDR_VAR 0 11
29064: PUSH
29065: LD_VAR 0 1
29069: PUSH
29070: LD_VAR 0 3
29074: MINUS
29075: PUSH
29076: LD_VAR 0 2
29080: PLUS
29081: ST_TO_ADDR
// end ; if not length then
29082: LD_VAR 0 11
29086: NOT
29087: IFFALSE 29091
// exit ;
29089: GO 29249
// tmp := array ;
29091: LD_ADDR_VAR 0 10
29095: PUSH
29096: LD_VAR 0 1
29100: ST_TO_ADDR
// for i = 1 to length do
29101: LD_ADDR_VAR 0 6
29105: PUSH
29106: DOUBLE
29107: LD_INT 1
29109: DEC
29110: ST_TO_ADDR
29111: LD_VAR 0 11
29115: PUSH
29116: FOR_TO
29117: IFFALSE 29237
// begin for j = 1 to array do
29119: LD_ADDR_VAR 0 7
29123: PUSH
29124: DOUBLE
29125: LD_INT 1
29127: DEC
29128: ST_TO_ADDR
29129: LD_VAR 0 1
29133: PUSH
29134: FOR_TO
29135: IFFALSE 29223
// begin k := j + d ;
29137: LD_ADDR_VAR 0 8
29141: PUSH
29142: LD_VAR 0 7
29146: PUSH
29147: LD_VAR 0 9
29151: PLUS
29152: ST_TO_ADDR
// if k > array then
29153: LD_VAR 0 8
29157: PUSH
29158: LD_VAR 0 1
29162: GREATER
29163: IFFALSE 29173
// k := 1 ;
29165: LD_ADDR_VAR 0 8
29169: PUSH
29170: LD_INT 1
29172: ST_TO_ADDR
// if not k then
29173: LD_VAR 0 8
29177: NOT
29178: IFFALSE 29190
// k := array ;
29180: LD_ADDR_VAR 0 8
29184: PUSH
29185: LD_VAR 0 1
29189: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29190: LD_ADDR_VAR 0 10
29194: PUSH
29195: LD_VAR 0 10
29199: PPUSH
29200: LD_VAR 0 8
29204: PPUSH
29205: LD_VAR 0 1
29209: PUSH
29210: LD_VAR 0 7
29214: ARRAY
29215: PPUSH
29216: CALL_OW 1
29220: ST_TO_ADDR
// end ;
29221: GO 29134
29223: POP
29224: POP
// array := tmp ;
29225: LD_ADDR_VAR 0 1
29229: PUSH
29230: LD_VAR 0 10
29234: ST_TO_ADDR
// end ;
29235: GO 29116
29237: POP
29238: POP
// result := array ;
29239: LD_ADDR_VAR 0 5
29243: PUSH
29244: LD_VAR 0 1
29248: ST_TO_ADDR
// end ;
29249: LD_VAR 0 5
29253: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29254: LD_INT 0
29256: PPUSH
29257: PPUSH
// result := 0 ;
29258: LD_ADDR_VAR 0 3
29262: PUSH
29263: LD_INT 0
29265: ST_TO_ADDR
// if not array or not value in array then
29266: LD_VAR 0 1
29270: NOT
29271: PUSH
29272: LD_VAR 0 2
29276: PUSH
29277: LD_VAR 0 1
29281: IN
29282: NOT
29283: OR
29284: IFFALSE 29288
// exit ;
29286: GO 29342
// for i = 1 to array do
29288: LD_ADDR_VAR 0 4
29292: PUSH
29293: DOUBLE
29294: LD_INT 1
29296: DEC
29297: ST_TO_ADDR
29298: LD_VAR 0 1
29302: PUSH
29303: FOR_TO
29304: IFFALSE 29340
// if value = array [ i ] then
29306: LD_VAR 0 2
29310: PUSH
29311: LD_VAR 0 1
29315: PUSH
29316: LD_VAR 0 4
29320: ARRAY
29321: EQUAL
29322: IFFALSE 29338
// begin result := i ;
29324: LD_ADDR_VAR 0 3
29328: PUSH
29329: LD_VAR 0 4
29333: ST_TO_ADDR
// exit ;
29334: POP
29335: POP
29336: GO 29342
// end ;
29338: GO 29303
29340: POP
29341: POP
// end ;
29342: LD_VAR 0 3
29346: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29347: LD_INT 0
29349: PPUSH
// vc_chassis := chassis ;
29350: LD_ADDR_OWVAR 37
29354: PUSH
29355: LD_VAR 0 1
29359: ST_TO_ADDR
// vc_engine := engine ;
29360: LD_ADDR_OWVAR 39
29364: PUSH
29365: LD_VAR 0 2
29369: ST_TO_ADDR
// vc_control := control ;
29370: LD_ADDR_OWVAR 38
29374: PUSH
29375: LD_VAR 0 3
29379: ST_TO_ADDR
// vc_weapon := weapon ;
29380: LD_ADDR_OWVAR 40
29384: PUSH
29385: LD_VAR 0 4
29389: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29390: LD_ADDR_OWVAR 41
29394: PUSH
29395: LD_VAR 0 5
29399: ST_TO_ADDR
// end ;
29400: LD_VAR 0 6
29404: RET
// export function WantPlant ( unit ) ; var task ; begin
29405: LD_INT 0
29407: PPUSH
29408: PPUSH
// result := false ;
29409: LD_ADDR_VAR 0 2
29413: PUSH
29414: LD_INT 0
29416: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29417: LD_ADDR_VAR 0 3
29421: PUSH
29422: LD_VAR 0 1
29426: PPUSH
29427: CALL_OW 437
29431: ST_TO_ADDR
// if task then
29432: LD_VAR 0 3
29436: IFFALSE 29464
// if task [ 1 ] [ 1 ] = p then
29438: LD_VAR 0 3
29442: PUSH
29443: LD_INT 1
29445: ARRAY
29446: PUSH
29447: LD_INT 1
29449: ARRAY
29450: PUSH
29451: LD_STRING p
29453: EQUAL
29454: IFFALSE 29464
// result := true ;
29456: LD_ADDR_VAR 0 2
29460: PUSH
29461: LD_INT 1
29463: ST_TO_ADDR
// end ;
29464: LD_VAR 0 2
29468: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29469: LD_INT 0
29471: PPUSH
29472: PPUSH
29473: PPUSH
29474: PPUSH
// if pos < 1 then
29475: LD_VAR 0 2
29479: PUSH
29480: LD_INT 1
29482: LESS
29483: IFFALSE 29487
// exit ;
29485: GO 29790
// if pos = 1 then
29487: LD_VAR 0 2
29491: PUSH
29492: LD_INT 1
29494: EQUAL
29495: IFFALSE 29528
// result := Replace ( arr , pos [ 1 ] , value ) else
29497: LD_ADDR_VAR 0 4
29501: PUSH
29502: LD_VAR 0 1
29506: PPUSH
29507: LD_VAR 0 2
29511: PUSH
29512: LD_INT 1
29514: ARRAY
29515: PPUSH
29516: LD_VAR 0 3
29520: PPUSH
29521: CALL_OW 1
29525: ST_TO_ADDR
29526: GO 29790
// begin tmp := arr ;
29528: LD_ADDR_VAR 0 6
29532: PUSH
29533: LD_VAR 0 1
29537: ST_TO_ADDR
// s_arr := [ tmp ] ;
29538: LD_ADDR_VAR 0 7
29542: PUSH
29543: LD_VAR 0 6
29547: PUSH
29548: EMPTY
29549: LIST
29550: ST_TO_ADDR
// for i = 1 to pos - 1 do
29551: LD_ADDR_VAR 0 5
29555: PUSH
29556: DOUBLE
29557: LD_INT 1
29559: DEC
29560: ST_TO_ADDR
29561: LD_VAR 0 2
29565: PUSH
29566: LD_INT 1
29568: MINUS
29569: PUSH
29570: FOR_TO
29571: IFFALSE 29616
// begin tmp := tmp [ pos [ i ] ] ;
29573: LD_ADDR_VAR 0 6
29577: PUSH
29578: LD_VAR 0 6
29582: PUSH
29583: LD_VAR 0 2
29587: PUSH
29588: LD_VAR 0 5
29592: ARRAY
29593: ARRAY
29594: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29595: LD_ADDR_VAR 0 7
29599: PUSH
29600: LD_VAR 0 7
29604: PUSH
29605: LD_VAR 0 6
29609: PUSH
29610: EMPTY
29611: LIST
29612: ADD
29613: ST_TO_ADDR
// end ;
29614: GO 29570
29616: POP
29617: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29618: LD_ADDR_VAR 0 6
29622: PUSH
29623: LD_VAR 0 6
29627: PPUSH
29628: LD_VAR 0 2
29632: PUSH
29633: LD_VAR 0 2
29637: ARRAY
29638: PPUSH
29639: LD_VAR 0 3
29643: PPUSH
29644: CALL_OW 1
29648: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29649: LD_ADDR_VAR 0 7
29653: PUSH
29654: LD_VAR 0 7
29658: PPUSH
29659: LD_VAR 0 7
29663: PPUSH
29664: LD_VAR 0 6
29668: PPUSH
29669: CALL_OW 1
29673: ST_TO_ADDR
// for i = s_arr downto 2 do
29674: LD_ADDR_VAR 0 5
29678: PUSH
29679: DOUBLE
29680: LD_VAR 0 7
29684: INC
29685: ST_TO_ADDR
29686: LD_INT 2
29688: PUSH
29689: FOR_DOWNTO
29690: IFFALSE 29774
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29692: LD_ADDR_VAR 0 6
29696: PUSH
29697: LD_VAR 0 7
29701: PUSH
29702: LD_VAR 0 5
29706: PUSH
29707: LD_INT 1
29709: MINUS
29710: ARRAY
29711: PPUSH
29712: LD_VAR 0 2
29716: PUSH
29717: LD_VAR 0 5
29721: PUSH
29722: LD_INT 1
29724: MINUS
29725: ARRAY
29726: PPUSH
29727: LD_VAR 0 7
29731: PUSH
29732: LD_VAR 0 5
29736: ARRAY
29737: PPUSH
29738: CALL_OW 1
29742: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29743: LD_ADDR_VAR 0 7
29747: PUSH
29748: LD_VAR 0 7
29752: PPUSH
29753: LD_VAR 0 5
29757: PUSH
29758: LD_INT 1
29760: MINUS
29761: PPUSH
29762: LD_VAR 0 6
29766: PPUSH
29767: CALL_OW 1
29771: ST_TO_ADDR
// end ;
29772: GO 29689
29774: POP
29775: POP
// result := s_arr [ 1 ] ;
29776: LD_ADDR_VAR 0 4
29780: PUSH
29781: LD_VAR 0 7
29785: PUSH
29786: LD_INT 1
29788: ARRAY
29789: ST_TO_ADDR
// end ; end ;
29790: LD_VAR 0 4
29794: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29795: LD_INT 0
29797: PPUSH
29798: PPUSH
// if not list then
29799: LD_VAR 0 1
29803: NOT
29804: IFFALSE 29808
// exit ;
29806: GO 29899
// i := list [ pos1 ] ;
29808: LD_ADDR_VAR 0 5
29812: PUSH
29813: LD_VAR 0 1
29817: PUSH
29818: LD_VAR 0 2
29822: ARRAY
29823: ST_TO_ADDR
// if not i then
29824: LD_VAR 0 5
29828: NOT
29829: IFFALSE 29833
// exit ;
29831: GO 29899
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29833: LD_ADDR_VAR 0 1
29837: PUSH
29838: LD_VAR 0 1
29842: PPUSH
29843: LD_VAR 0 2
29847: PPUSH
29848: LD_VAR 0 1
29852: PUSH
29853: LD_VAR 0 3
29857: ARRAY
29858: PPUSH
29859: CALL_OW 1
29863: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29864: LD_ADDR_VAR 0 1
29868: PUSH
29869: LD_VAR 0 1
29873: PPUSH
29874: LD_VAR 0 3
29878: PPUSH
29879: LD_VAR 0 5
29883: PPUSH
29884: CALL_OW 1
29888: ST_TO_ADDR
// result := list ;
29889: LD_ADDR_VAR 0 4
29893: PUSH
29894: LD_VAR 0 1
29898: ST_TO_ADDR
// end ;
29899: LD_VAR 0 4
29903: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29904: LD_INT 0
29906: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29907: LD_ADDR_VAR 0 5
29911: PUSH
29912: LD_VAR 0 1
29916: PPUSH
29917: CALL_OW 250
29921: PPUSH
29922: LD_VAR 0 1
29926: PPUSH
29927: CALL_OW 251
29931: PPUSH
29932: LD_VAR 0 2
29936: PPUSH
29937: LD_VAR 0 3
29941: PPUSH
29942: LD_VAR 0 4
29946: PPUSH
29947: CALL 29957 0 5
29951: ST_TO_ADDR
// end ;
29952: LD_VAR 0 5
29956: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29957: LD_INT 0
29959: PPUSH
29960: PPUSH
29961: PPUSH
29962: PPUSH
// if not list then
29963: LD_VAR 0 3
29967: NOT
29968: IFFALSE 29972
// exit ;
29970: GO 30360
// result := [ ] ;
29972: LD_ADDR_VAR 0 6
29976: PUSH
29977: EMPTY
29978: ST_TO_ADDR
// for i in list do
29979: LD_ADDR_VAR 0 7
29983: PUSH
29984: LD_VAR 0 3
29988: PUSH
29989: FOR_IN
29990: IFFALSE 30192
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29992: LD_ADDR_VAR 0 9
29996: PUSH
29997: LD_VAR 0 7
30001: PPUSH
30002: LD_VAR 0 1
30006: PPUSH
30007: LD_VAR 0 2
30011: PPUSH
30012: CALL_OW 297
30016: ST_TO_ADDR
// if not result then
30017: LD_VAR 0 6
30021: NOT
30022: IFFALSE 30048
// result := [ [ i , tmp ] ] else
30024: LD_ADDR_VAR 0 6
30028: PUSH
30029: LD_VAR 0 7
30033: PUSH
30034: LD_VAR 0 9
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: EMPTY
30044: LIST
30045: ST_TO_ADDR
30046: GO 30190
// begin if result [ result ] [ 2 ] < tmp then
30048: LD_VAR 0 6
30052: PUSH
30053: LD_VAR 0 6
30057: ARRAY
30058: PUSH
30059: LD_INT 2
30061: ARRAY
30062: PUSH
30063: LD_VAR 0 9
30067: LESS
30068: IFFALSE 30110
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30070: LD_ADDR_VAR 0 6
30074: PUSH
30075: LD_VAR 0 6
30079: PPUSH
30080: LD_VAR 0 6
30084: PUSH
30085: LD_INT 1
30087: PLUS
30088: PPUSH
30089: LD_VAR 0 7
30093: PUSH
30094: LD_VAR 0 9
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PPUSH
30103: CALL_OW 2
30107: ST_TO_ADDR
30108: GO 30190
// for j = 1 to result do
30110: LD_ADDR_VAR 0 8
30114: PUSH
30115: DOUBLE
30116: LD_INT 1
30118: DEC
30119: ST_TO_ADDR
30120: LD_VAR 0 6
30124: PUSH
30125: FOR_TO
30126: IFFALSE 30188
// begin if tmp < result [ j ] [ 2 ] then
30128: LD_VAR 0 9
30132: PUSH
30133: LD_VAR 0 6
30137: PUSH
30138: LD_VAR 0 8
30142: ARRAY
30143: PUSH
30144: LD_INT 2
30146: ARRAY
30147: LESS
30148: IFFALSE 30186
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30150: LD_ADDR_VAR 0 6
30154: PUSH
30155: LD_VAR 0 6
30159: PPUSH
30160: LD_VAR 0 8
30164: PPUSH
30165: LD_VAR 0 7
30169: PUSH
30170: LD_VAR 0 9
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PPUSH
30179: CALL_OW 2
30183: ST_TO_ADDR
// break ;
30184: GO 30188
// end ; end ;
30186: GO 30125
30188: POP
30189: POP
// end ; end ;
30190: GO 29989
30192: POP
30193: POP
// if result and not asc then
30194: LD_VAR 0 6
30198: PUSH
30199: LD_VAR 0 4
30203: NOT
30204: AND
30205: IFFALSE 30280
// begin tmp := result ;
30207: LD_ADDR_VAR 0 9
30211: PUSH
30212: LD_VAR 0 6
30216: ST_TO_ADDR
// for i = tmp downto 1 do
30217: LD_ADDR_VAR 0 7
30221: PUSH
30222: DOUBLE
30223: LD_VAR 0 9
30227: INC
30228: ST_TO_ADDR
30229: LD_INT 1
30231: PUSH
30232: FOR_DOWNTO
30233: IFFALSE 30278
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30235: LD_ADDR_VAR 0 6
30239: PUSH
30240: LD_VAR 0 6
30244: PPUSH
30245: LD_VAR 0 9
30249: PUSH
30250: LD_VAR 0 7
30254: MINUS
30255: PUSH
30256: LD_INT 1
30258: PLUS
30259: PPUSH
30260: LD_VAR 0 9
30264: PUSH
30265: LD_VAR 0 7
30269: ARRAY
30270: PPUSH
30271: CALL_OW 1
30275: ST_TO_ADDR
30276: GO 30232
30278: POP
30279: POP
// end ; tmp := [ ] ;
30280: LD_ADDR_VAR 0 9
30284: PUSH
30285: EMPTY
30286: ST_TO_ADDR
// if mode then
30287: LD_VAR 0 5
30291: IFFALSE 30360
// begin for i = 1 to result do
30293: LD_ADDR_VAR 0 7
30297: PUSH
30298: DOUBLE
30299: LD_INT 1
30301: DEC
30302: ST_TO_ADDR
30303: LD_VAR 0 6
30307: PUSH
30308: FOR_TO
30309: IFFALSE 30348
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30311: LD_ADDR_VAR 0 9
30315: PUSH
30316: LD_VAR 0 9
30320: PPUSH
30321: LD_VAR 0 7
30325: PPUSH
30326: LD_VAR 0 6
30330: PUSH
30331: LD_VAR 0 7
30335: ARRAY
30336: PUSH
30337: LD_INT 1
30339: ARRAY
30340: PPUSH
30341: CALL_OW 1
30345: ST_TO_ADDR
30346: GO 30308
30348: POP
30349: POP
// result := tmp ;
30350: LD_ADDR_VAR 0 6
30354: PUSH
30355: LD_VAR 0 9
30359: ST_TO_ADDR
// end ; end ;
30360: LD_VAR 0 6
30364: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30365: LD_INT 0
30367: PPUSH
30368: PPUSH
30369: PPUSH
30370: PPUSH
30371: PPUSH
30372: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30373: LD_ADDR_VAR 0 5
30377: PUSH
30378: LD_INT 0
30380: PUSH
30381: LD_INT 0
30383: PUSH
30384: LD_INT 0
30386: PUSH
30387: EMPTY
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: ST_TO_ADDR
// if not x or not y then
30395: LD_VAR 0 2
30399: NOT
30400: PUSH
30401: LD_VAR 0 3
30405: NOT
30406: OR
30407: IFFALSE 30411
// exit ;
30409: GO 32057
// if not range then
30411: LD_VAR 0 4
30415: NOT
30416: IFFALSE 30426
// range := 10 ;
30418: LD_ADDR_VAR 0 4
30422: PUSH
30423: LD_INT 10
30425: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30426: LD_ADDR_VAR 0 8
30430: PUSH
30431: LD_INT 81
30433: PUSH
30434: LD_VAR 0 1
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 92
30445: PUSH
30446: LD_VAR 0 2
30450: PUSH
30451: LD_VAR 0 3
30455: PUSH
30456: LD_VAR 0 4
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 3
30469: PUSH
30470: LD_INT 21
30472: PUSH
30473: LD_INT 3
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: LIST
30488: PPUSH
30489: CALL_OW 69
30493: ST_TO_ADDR
// if not tmp then
30494: LD_VAR 0 8
30498: NOT
30499: IFFALSE 30503
// exit ;
30501: GO 32057
// for i in tmp do
30503: LD_ADDR_VAR 0 6
30507: PUSH
30508: LD_VAR 0 8
30512: PUSH
30513: FOR_IN
30514: IFFALSE 32032
// begin points := [ 0 , 0 , 0 ] ;
30516: LD_ADDR_VAR 0 9
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: LD_INT 0
30526: PUSH
30527: LD_INT 0
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: LIST
30534: ST_TO_ADDR
// bpoints := 1 ;
30535: LD_ADDR_VAR 0 10
30539: PUSH
30540: LD_INT 1
30542: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30543: LD_VAR 0 6
30547: PPUSH
30548: CALL_OW 247
30552: PUSH
30553: LD_INT 1
30555: DOUBLE
30556: EQUAL
30557: IFTRUE 30561
30559: GO 31139
30561: POP
// begin if GetClass ( i ) = 1 then
30562: LD_VAR 0 6
30566: PPUSH
30567: CALL_OW 257
30571: PUSH
30572: LD_INT 1
30574: EQUAL
30575: IFFALSE 30596
// points := [ 10 , 5 , 3 ] ;
30577: LD_ADDR_VAR 0 9
30581: PUSH
30582: LD_INT 10
30584: PUSH
30585: LD_INT 5
30587: PUSH
30588: LD_INT 3
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: LIST
30595: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30596: LD_VAR 0 6
30600: PPUSH
30601: CALL_OW 257
30605: PUSH
30606: LD_INT 2
30608: PUSH
30609: LD_INT 3
30611: PUSH
30612: LD_INT 4
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: IN
30620: IFFALSE 30641
// points := [ 3 , 2 , 1 ] ;
30622: LD_ADDR_VAR 0 9
30626: PUSH
30627: LD_INT 3
30629: PUSH
30630: LD_INT 2
30632: PUSH
30633: LD_INT 1
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30641: LD_VAR 0 6
30645: PPUSH
30646: CALL_OW 257
30650: PUSH
30651: LD_INT 5
30653: EQUAL
30654: IFFALSE 30675
// points := [ 130 , 5 , 2 ] ;
30656: LD_ADDR_VAR 0 9
30660: PUSH
30661: LD_INT 130
30663: PUSH
30664: LD_INT 5
30666: PUSH
30667: LD_INT 2
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: LIST
30674: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30675: LD_VAR 0 6
30679: PPUSH
30680: CALL_OW 257
30684: PUSH
30685: LD_INT 8
30687: EQUAL
30688: IFFALSE 30709
// points := [ 35 , 35 , 30 ] ;
30690: LD_ADDR_VAR 0 9
30694: PUSH
30695: LD_INT 35
30697: PUSH
30698: LD_INT 35
30700: PUSH
30701: LD_INT 30
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: LIST
30708: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30709: LD_VAR 0 6
30713: PPUSH
30714: CALL_OW 257
30718: PUSH
30719: LD_INT 9
30721: EQUAL
30722: IFFALSE 30743
// points := [ 20 , 55 , 40 ] ;
30724: LD_ADDR_VAR 0 9
30728: PUSH
30729: LD_INT 20
30731: PUSH
30732: LD_INT 55
30734: PUSH
30735: LD_INT 40
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30743: LD_VAR 0 6
30747: PPUSH
30748: CALL_OW 257
30752: PUSH
30753: LD_INT 12
30755: PUSH
30756: LD_INT 16
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: IN
30763: IFFALSE 30784
// points := [ 5 , 3 , 2 ] ;
30765: LD_ADDR_VAR 0 9
30769: PUSH
30770: LD_INT 5
30772: PUSH
30773: LD_INT 3
30775: PUSH
30776: LD_INT 2
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30784: LD_VAR 0 6
30788: PPUSH
30789: CALL_OW 257
30793: PUSH
30794: LD_INT 17
30796: EQUAL
30797: IFFALSE 30818
// points := [ 100 , 50 , 75 ] ;
30799: LD_ADDR_VAR 0 9
30803: PUSH
30804: LD_INT 100
30806: PUSH
30807: LD_INT 50
30809: PUSH
30810: LD_INT 75
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: LIST
30817: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30818: LD_VAR 0 6
30822: PPUSH
30823: CALL_OW 257
30827: PUSH
30828: LD_INT 15
30830: EQUAL
30831: IFFALSE 30852
// points := [ 10 , 5 , 3 ] ;
30833: LD_ADDR_VAR 0 9
30837: PUSH
30838: LD_INT 10
30840: PUSH
30841: LD_INT 5
30843: PUSH
30844: LD_INT 3
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: LIST
30851: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30852: LD_VAR 0 6
30856: PPUSH
30857: CALL_OW 257
30861: PUSH
30862: LD_INT 14
30864: EQUAL
30865: IFFALSE 30886
// points := [ 10 , 0 , 0 ] ;
30867: LD_ADDR_VAR 0 9
30871: PUSH
30872: LD_INT 10
30874: PUSH
30875: LD_INT 0
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30886: LD_VAR 0 6
30890: PPUSH
30891: CALL_OW 257
30895: PUSH
30896: LD_INT 11
30898: EQUAL
30899: IFFALSE 30920
// points := [ 30 , 10 , 5 ] ;
30901: LD_ADDR_VAR 0 9
30905: PUSH
30906: LD_INT 30
30908: PUSH
30909: LD_INT 10
30911: PUSH
30912: LD_INT 5
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: LIST
30919: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30920: LD_VAR 0 1
30924: PPUSH
30925: LD_INT 5
30927: PPUSH
30928: CALL_OW 321
30932: PUSH
30933: LD_INT 2
30935: EQUAL
30936: IFFALSE 30953
// bpoints := bpoints * 1.8 ;
30938: LD_ADDR_VAR 0 10
30942: PUSH
30943: LD_VAR 0 10
30947: PUSH
30948: LD_REAL  1.80000000000000E+0000
30951: MUL
30952: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30953: LD_VAR 0 6
30957: PPUSH
30958: CALL_OW 257
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: LD_INT 2
30968: PUSH
30969: LD_INT 3
30971: PUSH
30972: LD_INT 4
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: IN
30981: PUSH
30982: LD_VAR 0 1
30986: PPUSH
30987: LD_INT 51
30989: PPUSH
30990: CALL_OW 321
30994: PUSH
30995: LD_INT 2
30997: EQUAL
30998: AND
30999: IFFALSE 31016
// bpoints := bpoints * 1.2 ;
31001: LD_ADDR_VAR 0 10
31005: PUSH
31006: LD_VAR 0 10
31010: PUSH
31011: LD_REAL  1.20000000000000E+0000
31014: MUL
31015: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31016: LD_VAR 0 6
31020: PPUSH
31021: CALL_OW 257
31025: PUSH
31026: LD_INT 5
31028: PUSH
31029: LD_INT 7
31031: PUSH
31032: LD_INT 9
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: LIST
31039: IN
31040: PUSH
31041: LD_VAR 0 1
31045: PPUSH
31046: LD_INT 52
31048: PPUSH
31049: CALL_OW 321
31053: PUSH
31054: LD_INT 2
31056: EQUAL
31057: AND
31058: IFFALSE 31075
// bpoints := bpoints * 1.5 ;
31060: LD_ADDR_VAR 0 10
31064: PUSH
31065: LD_VAR 0 10
31069: PUSH
31070: LD_REAL  1.50000000000000E+0000
31073: MUL
31074: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31075: LD_VAR 0 1
31079: PPUSH
31080: LD_INT 66
31082: PPUSH
31083: CALL_OW 321
31087: PUSH
31088: LD_INT 2
31090: EQUAL
31091: IFFALSE 31108
// bpoints := bpoints * 1.1 ;
31093: LD_ADDR_VAR 0 10
31097: PUSH
31098: LD_VAR 0 10
31102: PUSH
31103: LD_REAL  1.10000000000000E+0000
31106: MUL
31107: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31108: LD_ADDR_VAR 0 10
31112: PUSH
31113: LD_VAR 0 10
31117: PUSH
31118: LD_VAR 0 6
31122: PPUSH
31123: LD_INT 1
31125: PPUSH
31126: CALL_OW 259
31130: PUSH
31131: LD_REAL  1.15000000000000E+0000
31134: MUL
31135: MUL
31136: ST_TO_ADDR
// end ; unit_vehicle :
31137: GO 31961
31139: LD_INT 2
31141: DOUBLE
31142: EQUAL
31143: IFTRUE 31147
31145: GO 31949
31147: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31148: LD_VAR 0 6
31152: PPUSH
31153: CALL_OW 264
31157: PUSH
31158: LD_INT 2
31160: PUSH
31161: LD_INT 42
31163: PUSH
31164: LD_INT 24
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: LIST
31171: IN
31172: IFFALSE 31193
// points := [ 25 , 5 , 3 ] ;
31174: LD_ADDR_VAR 0 9
31178: PUSH
31179: LD_INT 25
31181: PUSH
31182: LD_INT 5
31184: PUSH
31185: LD_INT 3
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: LIST
31192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31193: LD_VAR 0 6
31197: PPUSH
31198: CALL_OW 264
31202: PUSH
31203: LD_INT 4
31205: PUSH
31206: LD_INT 43
31208: PUSH
31209: LD_INT 25
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: LIST
31216: IN
31217: IFFALSE 31238
// points := [ 40 , 15 , 5 ] ;
31219: LD_ADDR_VAR 0 9
31223: PUSH
31224: LD_INT 40
31226: PUSH
31227: LD_INT 15
31229: PUSH
31230: LD_INT 5
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: LIST
31237: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31238: LD_VAR 0 6
31242: PPUSH
31243: CALL_OW 264
31247: PUSH
31248: LD_INT 3
31250: PUSH
31251: LD_INT 23
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: IN
31258: IFFALSE 31279
// points := [ 7 , 25 , 8 ] ;
31260: LD_ADDR_VAR 0 9
31264: PUSH
31265: LD_INT 7
31267: PUSH
31268: LD_INT 25
31270: PUSH
31271: LD_INT 8
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: LIST
31278: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31279: LD_VAR 0 6
31283: PPUSH
31284: CALL_OW 264
31288: PUSH
31289: LD_INT 5
31291: PUSH
31292: LD_INT 27
31294: PUSH
31295: LD_INT 44
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: IN
31303: IFFALSE 31324
// points := [ 14 , 50 , 16 ] ;
31305: LD_ADDR_VAR 0 9
31309: PUSH
31310: LD_INT 14
31312: PUSH
31313: LD_INT 50
31315: PUSH
31316: LD_INT 16
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: LIST
31323: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31324: LD_VAR 0 6
31328: PPUSH
31329: CALL_OW 264
31333: PUSH
31334: LD_INT 6
31336: PUSH
31337: LD_INT 46
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: IN
31344: IFFALSE 31365
// points := [ 32 , 120 , 70 ] ;
31346: LD_ADDR_VAR 0 9
31350: PUSH
31351: LD_INT 32
31353: PUSH
31354: LD_INT 120
31356: PUSH
31357: LD_INT 70
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
31365: LD_VAR 0 6
31369: PPUSH
31370: CALL_OW 264
31374: PUSH
31375: LD_INT 7
31377: PUSH
31378: LD_INT 28
31380: PUSH
31381: LD_INT 45
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: LIST
31388: IN
31389: IFFALSE 31410
// points := [ 35 , 20 , 45 ] ;
31391: LD_ADDR_VAR 0 9
31395: PUSH
31396: LD_INT 35
31398: PUSH
31399: LD_INT 20
31401: PUSH
31402: LD_INT 45
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31410: LD_VAR 0 6
31414: PPUSH
31415: CALL_OW 264
31419: PUSH
31420: LD_INT 47
31422: PUSH
31423: EMPTY
31424: LIST
31425: IN
31426: IFFALSE 31447
// points := [ 67 , 45 , 75 ] ;
31428: LD_ADDR_VAR 0 9
31432: PUSH
31433: LD_INT 67
31435: PUSH
31436: LD_INT 45
31438: PUSH
31439: LD_INT 75
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: LIST
31446: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31447: LD_VAR 0 6
31451: PPUSH
31452: CALL_OW 264
31456: PUSH
31457: LD_INT 26
31459: PUSH
31460: EMPTY
31461: LIST
31462: IN
31463: IFFALSE 31484
// points := [ 120 , 30 , 80 ] ;
31465: LD_ADDR_VAR 0 9
31469: PUSH
31470: LD_INT 120
31472: PUSH
31473: LD_INT 30
31475: PUSH
31476: LD_INT 80
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: LIST
31483: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31484: LD_VAR 0 6
31488: PPUSH
31489: CALL_OW 264
31493: PUSH
31494: LD_INT 22
31496: PUSH
31497: EMPTY
31498: LIST
31499: IN
31500: IFFALSE 31521
// points := [ 40 , 1 , 1 ] ;
31502: LD_ADDR_VAR 0 9
31506: PUSH
31507: LD_INT 40
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: LIST
31520: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31521: LD_VAR 0 6
31525: PPUSH
31526: CALL_OW 264
31530: PUSH
31531: LD_INT 29
31533: PUSH
31534: EMPTY
31535: LIST
31536: IN
31537: IFFALSE 31558
// points := [ 70 , 200 , 400 ] ;
31539: LD_ADDR_VAR 0 9
31543: PUSH
31544: LD_INT 70
31546: PUSH
31547: LD_INT 200
31549: PUSH
31550: LD_INT 400
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: LIST
31557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31558: LD_VAR 0 6
31562: PPUSH
31563: CALL_OW 264
31567: PUSH
31568: LD_INT 14
31570: PUSH
31571: LD_INT 53
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: IN
31578: IFFALSE 31599
// points := [ 40 , 10 , 20 ] ;
31580: LD_ADDR_VAR 0 9
31584: PUSH
31585: LD_INT 40
31587: PUSH
31588: LD_INT 10
31590: PUSH
31591: LD_INT 20
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31599: LD_VAR 0 6
31603: PPUSH
31604: CALL_OW 264
31608: PUSH
31609: LD_INT 9
31611: PUSH
31612: EMPTY
31613: LIST
31614: IN
31615: IFFALSE 31636
// points := [ 5 , 70 , 20 ] ;
31617: LD_ADDR_VAR 0 9
31621: PUSH
31622: LD_INT 5
31624: PUSH
31625: LD_INT 70
31627: PUSH
31628: LD_INT 20
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: LIST
31635: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31636: LD_VAR 0 6
31640: PPUSH
31641: CALL_OW 264
31645: PUSH
31646: LD_INT 10
31648: PUSH
31649: EMPTY
31650: LIST
31651: IN
31652: IFFALSE 31673
// points := [ 35 , 110 , 70 ] ;
31654: LD_ADDR_VAR 0 9
31658: PUSH
31659: LD_INT 35
31661: PUSH
31662: LD_INT 110
31664: PUSH
31665: LD_INT 70
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: LIST
31672: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31673: LD_VAR 0 6
31677: PPUSH
31678: CALL_OW 265
31682: PUSH
31683: LD_INT 25
31685: EQUAL
31686: IFFALSE 31707
// points := [ 80 , 65 , 100 ] ;
31688: LD_ADDR_VAR 0 9
31692: PUSH
31693: LD_INT 80
31695: PUSH
31696: LD_INT 65
31698: PUSH
31699: LD_INT 100
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: LIST
31706: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31707: LD_VAR 0 6
31711: PPUSH
31712: CALL_OW 263
31716: PUSH
31717: LD_INT 1
31719: EQUAL
31720: IFFALSE 31755
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31722: LD_ADDR_VAR 0 10
31726: PUSH
31727: LD_VAR 0 10
31731: PUSH
31732: LD_VAR 0 6
31736: PPUSH
31737: CALL_OW 311
31741: PPUSH
31742: LD_INT 3
31744: PPUSH
31745: CALL_OW 259
31749: PUSH
31750: LD_INT 4
31752: MUL
31753: MUL
31754: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31755: LD_VAR 0 6
31759: PPUSH
31760: CALL_OW 263
31764: PUSH
31765: LD_INT 2
31767: EQUAL
31768: IFFALSE 31819
// begin j := IsControledBy ( i ) ;
31770: LD_ADDR_VAR 0 7
31774: PUSH
31775: LD_VAR 0 6
31779: PPUSH
31780: CALL_OW 312
31784: ST_TO_ADDR
// if j then
31785: LD_VAR 0 7
31789: IFFALSE 31819
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31791: LD_ADDR_VAR 0 10
31795: PUSH
31796: LD_VAR 0 10
31800: PUSH
31801: LD_VAR 0 7
31805: PPUSH
31806: LD_INT 3
31808: PPUSH
31809: CALL_OW 259
31813: PUSH
31814: LD_INT 3
31816: MUL
31817: MUL
31818: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31819: LD_VAR 0 6
31823: PPUSH
31824: CALL_OW 264
31828: PUSH
31829: LD_INT 5
31831: PUSH
31832: LD_INT 6
31834: PUSH
31835: LD_INT 46
31837: PUSH
31838: LD_INT 44
31840: PUSH
31841: LD_INT 47
31843: PUSH
31844: LD_INT 45
31846: PUSH
31847: LD_INT 28
31849: PUSH
31850: LD_INT 7
31852: PUSH
31853: LD_INT 27
31855: PUSH
31856: LD_INT 29
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: IN
31871: PUSH
31872: LD_VAR 0 1
31876: PPUSH
31877: LD_INT 52
31879: PPUSH
31880: CALL_OW 321
31884: PUSH
31885: LD_INT 2
31887: EQUAL
31888: AND
31889: IFFALSE 31906
// bpoints := bpoints * 1.2 ;
31891: LD_ADDR_VAR 0 10
31895: PUSH
31896: LD_VAR 0 10
31900: PUSH
31901: LD_REAL  1.20000000000000E+0000
31904: MUL
31905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31906: LD_VAR 0 6
31910: PPUSH
31911: CALL_OW 264
31915: PUSH
31916: LD_INT 6
31918: PUSH
31919: LD_INT 46
31921: PUSH
31922: LD_INT 47
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: LIST
31929: IN
31930: IFFALSE 31947
// bpoints := bpoints * 1.2 ;
31932: LD_ADDR_VAR 0 10
31936: PUSH
31937: LD_VAR 0 10
31941: PUSH
31942: LD_REAL  1.20000000000000E+0000
31945: MUL
31946: ST_TO_ADDR
// end ; unit_building :
31947: GO 31961
31949: LD_INT 3
31951: DOUBLE
31952: EQUAL
31953: IFTRUE 31957
31955: GO 31960
31957: POP
// ; end ;
31958: GO 31961
31960: POP
// for j = 1 to 3 do
31961: LD_ADDR_VAR 0 7
31965: PUSH
31966: DOUBLE
31967: LD_INT 1
31969: DEC
31970: ST_TO_ADDR
31971: LD_INT 3
31973: PUSH
31974: FOR_TO
31975: IFFALSE 32028
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31977: LD_ADDR_VAR 0 5
31981: PUSH
31982: LD_VAR 0 5
31986: PPUSH
31987: LD_VAR 0 7
31991: PPUSH
31992: LD_VAR 0 5
31996: PUSH
31997: LD_VAR 0 7
32001: ARRAY
32002: PUSH
32003: LD_VAR 0 9
32007: PUSH
32008: LD_VAR 0 7
32012: ARRAY
32013: PUSH
32014: LD_VAR 0 10
32018: MUL
32019: PLUS
32020: PPUSH
32021: CALL_OW 1
32025: ST_TO_ADDR
32026: GO 31974
32028: POP
32029: POP
// end ;
32030: GO 30513
32032: POP
32033: POP
// result := Replace ( result , 4 , tmp ) ;
32034: LD_ADDR_VAR 0 5
32038: PUSH
32039: LD_VAR 0 5
32043: PPUSH
32044: LD_INT 4
32046: PPUSH
32047: LD_VAR 0 8
32051: PPUSH
32052: CALL_OW 1
32056: ST_TO_ADDR
// end ;
32057: LD_VAR 0 5
32061: RET
// export function DangerAtRange ( unit , range ) ; begin
32062: LD_INT 0
32064: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32065: LD_ADDR_VAR 0 3
32069: PUSH
32070: LD_VAR 0 1
32074: PPUSH
32075: CALL_OW 255
32079: PPUSH
32080: LD_VAR 0 1
32084: PPUSH
32085: CALL_OW 250
32089: PPUSH
32090: LD_VAR 0 1
32094: PPUSH
32095: CALL_OW 251
32099: PPUSH
32100: LD_VAR 0 2
32104: PPUSH
32105: CALL 30365 0 4
32109: ST_TO_ADDR
// end ;
32110: LD_VAR 0 3
32114: RET
// export function DangerInArea ( side , area ) ; begin
32115: LD_INT 0
32117: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32118: LD_ADDR_VAR 0 3
32122: PUSH
32123: LD_VAR 0 2
32127: PPUSH
32128: LD_INT 81
32130: PUSH
32131: LD_VAR 0 1
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PPUSH
32140: CALL_OW 70
32144: ST_TO_ADDR
// end ;
32145: LD_VAR 0 3
32149: RET
// export function IsExtension ( b ) ; begin
32150: LD_INT 0
32152: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32153: LD_ADDR_VAR 0 2
32157: PUSH
32158: LD_VAR 0 1
32162: PUSH
32163: LD_INT 23
32165: PUSH
32166: LD_INT 20
32168: PUSH
32169: LD_INT 22
32171: PUSH
32172: LD_INT 17
32174: PUSH
32175: LD_INT 24
32177: PUSH
32178: LD_INT 21
32180: PUSH
32181: LD_INT 19
32183: PUSH
32184: LD_INT 16
32186: PUSH
32187: LD_INT 25
32189: PUSH
32190: LD_INT 18
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: IN
32205: ST_TO_ADDR
// end ;
32206: LD_VAR 0 2
32210: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32211: LD_INT 0
32213: PPUSH
32214: PPUSH
32215: PPUSH
// result := [ ] ;
32216: LD_ADDR_VAR 0 4
32220: PUSH
32221: EMPTY
32222: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32223: LD_ADDR_VAR 0 5
32227: PUSH
32228: LD_VAR 0 2
32232: PPUSH
32233: LD_INT 21
32235: PUSH
32236: LD_INT 3
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PPUSH
32243: CALL_OW 70
32247: ST_TO_ADDR
// if not tmp then
32248: LD_VAR 0 5
32252: NOT
32253: IFFALSE 32257
// exit ;
32255: GO 32321
// if checkLink then
32257: LD_VAR 0 3
32261: IFFALSE 32311
// begin for i in tmp do
32263: LD_ADDR_VAR 0 6
32267: PUSH
32268: LD_VAR 0 5
32272: PUSH
32273: FOR_IN
32274: IFFALSE 32309
// if GetBase ( i ) <> base then
32276: LD_VAR 0 6
32280: PPUSH
32281: CALL_OW 274
32285: PUSH
32286: LD_VAR 0 1
32290: NONEQUAL
32291: IFFALSE 32307
// ComLinkToBase ( base , i ) ;
32293: LD_VAR 0 1
32297: PPUSH
32298: LD_VAR 0 6
32302: PPUSH
32303: CALL_OW 169
32307: GO 32273
32309: POP
32310: POP
// end ; result := tmp ;
32311: LD_ADDR_VAR 0 4
32315: PUSH
32316: LD_VAR 0 5
32320: ST_TO_ADDR
// end ;
32321: LD_VAR 0 4
32325: RET
// export function ComComplete ( units , b ) ; var i ; begin
32326: LD_INT 0
32328: PPUSH
32329: PPUSH
// if not units then
32330: LD_VAR 0 1
32334: NOT
32335: IFFALSE 32339
// exit ;
32337: GO 32429
// for i in units do
32339: LD_ADDR_VAR 0 4
32343: PUSH
32344: LD_VAR 0 1
32348: PUSH
32349: FOR_IN
32350: IFFALSE 32427
// if BuildingStatus ( b ) = bs_build then
32352: LD_VAR 0 2
32356: PPUSH
32357: CALL_OW 461
32361: PUSH
32362: LD_INT 1
32364: EQUAL
32365: IFFALSE 32425
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32367: LD_VAR 0 4
32371: PPUSH
32372: LD_STRING h
32374: PUSH
32375: LD_VAR 0 2
32379: PPUSH
32380: CALL_OW 250
32384: PUSH
32385: LD_VAR 0 2
32389: PPUSH
32390: CALL_OW 251
32394: PUSH
32395: LD_VAR 0 2
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: LD_INT 0
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: PUSH
32418: EMPTY
32419: LIST
32420: PPUSH
32421: CALL_OW 446
32425: GO 32349
32427: POP
32428: POP
// end ;
32429: LD_VAR 0 3
32433: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32434: LD_INT 0
32436: PPUSH
32437: PPUSH
32438: PPUSH
32439: PPUSH
32440: PPUSH
32441: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
32442: LD_VAR 0 1
32446: NOT
32447: PUSH
32448: LD_VAR 0 1
32452: PPUSH
32453: CALL_OW 263
32457: PUSH
32458: LD_INT 2
32460: EQUAL
32461: NOT
32462: OR
32463: IFFALSE 32467
// exit ;
32465: GO 32783
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32467: LD_ADDR_VAR 0 6
32471: PUSH
32472: LD_INT 22
32474: PUSH
32475: LD_VAR 0 1
32479: PPUSH
32480: CALL_OW 255
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 2
32491: PUSH
32492: LD_INT 30
32494: PUSH
32495: LD_INT 36
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 34
32504: PUSH
32505: LD_INT 31
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: LIST
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PPUSH
32521: CALL_OW 69
32525: ST_TO_ADDR
// if not tmp then
32526: LD_VAR 0 6
32530: NOT
32531: IFFALSE 32535
// exit ;
32533: GO 32783
// result := [ ] ;
32535: LD_ADDR_VAR 0 2
32539: PUSH
32540: EMPTY
32541: ST_TO_ADDR
// for i in tmp do
32542: LD_ADDR_VAR 0 3
32546: PUSH
32547: LD_VAR 0 6
32551: PUSH
32552: FOR_IN
32553: IFFALSE 32624
// begin t := UnitsInside ( i ) ;
32555: LD_ADDR_VAR 0 4
32559: PUSH
32560: LD_VAR 0 3
32564: PPUSH
32565: CALL_OW 313
32569: ST_TO_ADDR
// if t then
32570: LD_VAR 0 4
32574: IFFALSE 32622
// for j in t do
32576: LD_ADDR_VAR 0 7
32580: PUSH
32581: LD_VAR 0 4
32585: PUSH
32586: FOR_IN
32587: IFFALSE 32620
// result := Insert ( result , result + 1 , j ) ;
32589: LD_ADDR_VAR 0 2
32593: PUSH
32594: LD_VAR 0 2
32598: PPUSH
32599: LD_VAR 0 2
32603: PUSH
32604: LD_INT 1
32606: PLUS
32607: PPUSH
32608: LD_VAR 0 7
32612: PPUSH
32613: CALL_OW 2
32617: ST_TO_ADDR
32618: GO 32586
32620: POP
32621: POP
// end ;
32622: GO 32552
32624: POP
32625: POP
// if not result then
32626: LD_VAR 0 2
32630: NOT
32631: IFFALSE 32635
// exit ;
32633: GO 32783
// mech := result [ 1 ] ;
32635: LD_ADDR_VAR 0 5
32639: PUSH
32640: LD_VAR 0 2
32644: PUSH
32645: LD_INT 1
32647: ARRAY
32648: ST_TO_ADDR
// if result > 1 then
32649: LD_VAR 0 2
32653: PUSH
32654: LD_INT 1
32656: GREATER
32657: IFFALSE 32769
// for i = 2 to result do
32659: LD_ADDR_VAR 0 3
32663: PUSH
32664: DOUBLE
32665: LD_INT 2
32667: DEC
32668: ST_TO_ADDR
32669: LD_VAR 0 2
32673: PUSH
32674: FOR_TO
32675: IFFALSE 32767
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32677: LD_ADDR_VAR 0 4
32681: PUSH
32682: LD_VAR 0 2
32686: PUSH
32687: LD_VAR 0 3
32691: ARRAY
32692: PPUSH
32693: LD_INT 3
32695: PPUSH
32696: CALL_OW 259
32700: PUSH
32701: LD_VAR 0 2
32705: PUSH
32706: LD_VAR 0 3
32710: ARRAY
32711: PPUSH
32712: CALL_OW 432
32716: MINUS
32717: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32718: LD_VAR 0 4
32722: PUSH
32723: LD_VAR 0 5
32727: PPUSH
32728: LD_INT 3
32730: PPUSH
32731: CALL_OW 259
32735: PUSH
32736: LD_VAR 0 5
32740: PPUSH
32741: CALL_OW 432
32745: MINUS
32746: GREATEREQUAL
32747: IFFALSE 32765
// mech := result [ i ] ;
32749: LD_ADDR_VAR 0 5
32753: PUSH
32754: LD_VAR 0 2
32758: PUSH
32759: LD_VAR 0 3
32763: ARRAY
32764: ST_TO_ADDR
// end ;
32765: GO 32674
32767: POP
32768: POP
// ComLinkTo ( vehicle , mech ) ;
32769: LD_VAR 0 1
32773: PPUSH
32774: LD_VAR 0 5
32778: PPUSH
32779: CALL_OW 135
// end ;
32783: LD_VAR 0 2
32787: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32788: LD_INT 0
32790: PPUSH
32791: PPUSH
32792: PPUSH
32793: PPUSH
32794: PPUSH
32795: PPUSH
32796: PPUSH
32797: PPUSH
32798: PPUSH
32799: PPUSH
32800: PPUSH
32801: PPUSH
32802: PPUSH
// result := [ ] ;
32803: LD_ADDR_VAR 0 7
32807: PUSH
32808: EMPTY
32809: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32810: LD_VAR 0 1
32814: PPUSH
32815: CALL_OW 266
32819: PUSH
32820: LD_INT 0
32822: PUSH
32823: LD_INT 1
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: IN
32830: NOT
32831: IFFALSE 32835
// exit ;
32833: GO 34469
// if name then
32835: LD_VAR 0 3
32839: IFFALSE 32855
// SetBName ( base_dep , name ) ;
32841: LD_VAR 0 1
32845: PPUSH
32846: LD_VAR 0 3
32850: PPUSH
32851: CALL_OW 500
// base := GetBase ( base_dep ) ;
32855: LD_ADDR_VAR 0 15
32859: PUSH
32860: LD_VAR 0 1
32864: PPUSH
32865: CALL_OW 274
32869: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32870: LD_ADDR_VAR 0 16
32874: PUSH
32875: LD_VAR 0 1
32879: PPUSH
32880: CALL_OW 255
32884: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32885: LD_ADDR_VAR 0 17
32889: PUSH
32890: LD_VAR 0 1
32894: PPUSH
32895: CALL_OW 248
32899: ST_TO_ADDR
// if sources then
32900: LD_VAR 0 5
32904: IFFALSE 32951
// for i = 1 to 3 do
32906: LD_ADDR_VAR 0 8
32910: PUSH
32911: DOUBLE
32912: LD_INT 1
32914: DEC
32915: ST_TO_ADDR
32916: LD_INT 3
32918: PUSH
32919: FOR_TO
32920: IFFALSE 32949
// AddResourceType ( base , i , sources [ i ] ) ;
32922: LD_VAR 0 15
32926: PPUSH
32927: LD_VAR 0 8
32931: PPUSH
32932: LD_VAR 0 5
32936: PUSH
32937: LD_VAR 0 8
32941: ARRAY
32942: PPUSH
32943: CALL_OW 276
32947: GO 32919
32949: POP
32950: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32951: LD_ADDR_VAR 0 18
32955: PUSH
32956: LD_VAR 0 15
32960: PPUSH
32961: LD_VAR 0 2
32965: PPUSH
32966: LD_INT 1
32968: PPUSH
32969: CALL 32211 0 3
32973: ST_TO_ADDR
// InitHc ;
32974: CALL_OW 19
// InitUc ;
32978: CALL_OW 18
// uc_side := side ;
32982: LD_ADDR_OWVAR 20
32986: PUSH
32987: LD_VAR 0 16
32991: ST_TO_ADDR
// uc_nation := nation ;
32992: LD_ADDR_OWVAR 21
32996: PUSH
32997: LD_VAR 0 17
33001: ST_TO_ADDR
// if buildings then
33002: LD_VAR 0 18
33006: IFFALSE 34328
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33008: LD_ADDR_VAR 0 19
33012: PUSH
33013: LD_VAR 0 18
33017: PPUSH
33018: LD_INT 2
33020: PUSH
33021: LD_INT 30
33023: PUSH
33024: LD_INT 29
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 30
33033: PUSH
33034: LD_INT 30
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: LIST
33045: PPUSH
33046: CALL_OW 72
33050: ST_TO_ADDR
// if tmp then
33051: LD_VAR 0 19
33055: IFFALSE 33103
// for i in tmp do
33057: LD_ADDR_VAR 0 8
33061: PUSH
33062: LD_VAR 0 19
33066: PUSH
33067: FOR_IN
33068: IFFALSE 33101
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33070: LD_VAR 0 8
33074: PPUSH
33075: CALL_OW 250
33079: PPUSH
33080: LD_VAR 0 8
33084: PPUSH
33085: CALL_OW 251
33089: PPUSH
33090: LD_VAR 0 16
33094: PPUSH
33095: CALL_OW 441
33099: GO 33067
33101: POP
33102: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33103: LD_VAR 0 18
33107: PPUSH
33108: LD_INT 2
33110: PUSH
33111: LD_INT 30
33113: PUSH
33114: LD_INT 32
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 30
33123: PUSH
33124: LD_INT 33
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: LIST
33135: PPUSH
33136: CALL_OW 72
33140: IFFALSE 33228
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33142: LD_ADDR_VAR 0 8
33146: PUSH
33147: LD_VAR 0 18
33151: PPUSH
33152: LD_INT 2
33154: PUSH
33155: LD_INT 30
33157: PUSH
33158: LD_INT 32
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 30
33167: PUSH
33168: LD_INT 33
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: LIST
33179: PPUSH
33180: CALL_OW 72
33184: PUSH
33185: FOR_IN
33186: IFFALSE 33226
// begin if not GetBWeapon ( i ) then
33188: LD_VAR 0 8
33192: PPUSH
33193: CALL_OW 269
33197: NOT
33198: IFFALSE 33224
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33200: LD_VAR 0 8
33204: PPUSH
33205: LD_VAR 0 8
33209: PPUSH
33210: LD_VAR 0 2
33214: PPUSH
33215: CALL 34474 0 2
33219: PPUSH
33220: CALL_OW 431
// end ;
33224: GO 33185
33226: POP
33227: POP
// end ; for i = 1 to personel do
33228: LD_ADDR_VAR 0 8
33232: PUSH
33233: DOUBLE
33234: LD_INT 1
33236: DEC
33237: ST_TO_ADDR
33238: LD_VAR 0 6
33242: PUSH
33243: FOR_TO
33244: IFFALSE 34308
// begin if i > 4 then
33246: LD_VAR 0 8
33250: PUSH
33251: LD_INT 4
33253: GREATER
33254: IFFALSE 33258
// break ;
33256: GO 34308
// case i of 1 :
33258: LD_VAR 0 8
33262: PUSH
33263: LD_INT 1
33265: DOUBLE
33266: EQUAL
33267: IFTRUE 33271
33269: GO 33351
33271: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33272: LD_ADDR_VAR 0 12
33276: PUSH
33277: LD_VAR 0 18
33281: PPUSH
33282: LD_INT 22
33284: PUSH
33285: LD_VAR 0 16
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 58
33296: PUSH
33297: EMPTY
33298: LIST
33299: PUSH
33300: LD_INT 2
33302: PUSH
33303: LD_INT 30
33305: PUSH
33306: LD_INT 32
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 30
33315: PUSH
33316: LD_INT 4
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 30
33325: PUSH
33326: LD_INT 5
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: LIST
33343: PPUSH
33344: CALL_OW 72
33348: ST_TO_ADDR
33349: GO 33573
33351: LD_INT 2
33353: DOUBLE
33354: EQUAL
33355: IFTRUE 33359
33357: GO 33421
33359: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33360: LD_ADDR_VAR 0 12
33364: PUSH
33365: LD_VAR 0 18
33369: PPUSH
33370: LD_INT 22
33372: PUSH
33373: LD_VAR 0 16
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 2
33384: PUSH
33385: LD_INT 30
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 30
33397: PUSH
33398: LD_INT 1
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: LIST
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PPUSH
33414: CALL_OW 72
33418: ST_TO_ADDR
33419: GO 33573
33421: LD_INT 3
33423: DOUBLE
33424: EQUAL
33425: IFTRUE 33429
33427: GO 33491
33429: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33430: LD_ADDR_VAR 0 12
33434: PUSH
33435: LD_VAR 0 18
33439: PPUSH
33440: LD_INT 22
33442: PUSH
33443: LD_VAR 0 16
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 2
33454: PUSH
33455: LD_INT 30
33457: PUSH
33458: LD_INT 2
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 30
33467: PUSH
33468: LD_INT 3
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PPUSH
33484: CALL_OW 72
33488: ST_TO_ADDR
33489: GO 33573
33491: LD_INT 4
33493: DOUBLE
33494: EQUAL
33495: IFTRUE 33499
33497: GO 33572
33499: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33500: LD_ADDR_VAR 0 12
33504: PUSH
33505: LD_VAR 0 18
33509: PPUSH
33510: LD_INT 22
33512: PUSH
33513: LD_VAR 0 16
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 2
33524: PUSH
33525: LD_INT 30
33527: PUSH
33528: LD_INT 6
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 30
33537: PUSH
33538: LD_INT 7
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 30
33547: PUSH
33548: LD_INT 8
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PPUSH
33565: CALL_OW 72
33569: ST_TO_ADDR
33570: GO 33573
33572: POP
// if i = 1 then
33573: LD_VAR 0 8
33577: PUSH
33578: LD_INT 1
33580: EQUAL
33581: IFFALSE 33692
// begin tmp := [ ] ;
33583: LD_ADDR_VAR 0 19
33587: PUSH
33588: EMPTY
33589: ST_TO_ADDR
// for j in f do
33590: LD_ADDR_VAR 0 9
33594: PUSH
33595: LD_VAR 0 12
33599: PUSH
33600: FOR_IN
33601: IFFALSE 33674
// if GetBType ( j ) = b_bunker then
33603: LD_VAR 0 9
33607: PPUSH
33608: CALL_OW 266
33612: PUSH
33613: LD_INT 32
33615: EQUAL
33616: IFFALSE 33643
// tmp := Insert ( tmp , 1 , j ) else
33618: LD_ADDR_VAR 0 19
33622: PUSH
33623: LD_VAR 0 19
33627: PPUSH
33628: LD_INT 1
33630: PPUSH
33631: LD_VAR 0 9
33635: PPUSH
33636: CALL_OW 2
33640: ST_TO_ADDR
33641: GO 33672
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33643: LD_ADDR_VAR 0 19
33647: PUSH
33648: LD_VAR 0 19
33652: PPUSH
33653: LD_VAR 0 19
33657: PUSH
33658: LD_INT 1
33660: PLUS
33661: PPUSH
33662: LD_VAR 0 9
33666: PPUSH
33667: CALL_OW 2
33671: ST_TO_ADDR
33672: GO 33600
33674: POP
33675: POP
// if tmp then
33676: LD_VAR 0 19
33680: IFFALSE 33692
// f := tmp ;
33682: LD_ADDR_VAR 0 12
33686: PUSH
33687: LD_VAR 0 19
33691: ST_TO_ADDR
// end ; x := personel [ i ] ;
33692: LD_ADDR_VAR 0 13
33696: PUSH
33697: LD_VAR 0 6
33701: PUSH
33702: LD_VAR 0 8
33706: ARRAY
33707: ST_TO_ADDR
// if x = - 1 then
33708: LD_VAR 0 13
33712: PUSH
33713: LD_INT 1
33715: NEG
33716: EQUAL
33717: IFFALSE 33926
// begin for j in f do
33719: LD_ADDR_VAR 0 9
33723: PUSH
33724: LD_VAR 0 12
33728: PUSH
33729: FOR_IN
33730: IFFALSE 33922
// repeat InitHc ;
33732: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33736: LD_VAR 0 9
33740: PPUSH
33741: CALL_OW 266
33745: PUSH
33746: LD_INT 5
33748: EQUAL
33749: IFFALSE 33819
// begin if UnitsInside ( j ) < 3 then
33751: LD_VAR 0 9
33755: PPUSH
33756: CALL_OW 313
33760: PUSH
33761: LD_INT 3
33763: LESS
33764: IFFALSE 33800
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33766: LD_INT 0
33768: PPUSH
33769: LD_INT 5
33771: PUSH
33772: LD_INT 8
33774: PUSH
33775: LD_INT 9
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: LIST
33782: PUSH
33783: LD_VAR 0 17
33787: ARRAY
33788: PPUSH
33789: LD_VAR 0 4
33793: PPUSH
33794: CALL_OW 380
33798: GO 33817
// PrepareHuman ( false , i , skill ) ;
33800: LD_INT 0
33802: PPUSH
33803: LD_VAR 0 8
33807: PPUSH
33808: LD_VAR 0 4
33812: PPUSH
33813: CALL_OW 380
// end else
33817: GO 33836
// PrepareHuman ( false , i , skill ) ;
33819: LD_INT 0
33821: PPUSH
33822: LD_VAR 0 8
33826: PPUSH
33827: LD_VAR 0 4
33831: PPUSH
33832: CALL_OW 380
// un := CreateHuman ;
33836: LD_ADDR_VAR 0 14
33840: PUSH
33841: CALL_OW 44
33845: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33846: LD_ADDR_VAR 0 7
33850: PUSH
33851: LD_VAR 0 7
33855: PPUSH
33856: LD_INT 1
33858: PPUSH
33859: LD_VAR 0 14
33863: PPUSH
33864: CALL_OW 2
33868: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33869: LD_VAR 0 14
33873: PPUSH
33874: LD_VAR 0 9
33878: PPUSH
33879: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33883: LD_VAR 0 9
33887: PPUSH
33888: CALL_OW 313
33892: PUSH
33893: LD_INT 6
33895: EQUAL
33896: PUSH
33897: LD_VAR 0 9
33901: PPUSH
33902: CALL_OW 266
33906: PUSH
33907: LD_INT 32
33909: PUSH
33910: LD_INT 31
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: IN
33917: OR
33918: IFFALSE 33732
33920: GO 33729
33922: POP
33923: POP
// end else
33924: GO 34306
// for j = 1 to x do
33926: LD_ADDR_VAR 0 9
33930: PUSH
33931: DOUBLE
33932: LD_INT 1
33934: DEC
33935: ST_TO_ADDR
33936: LD_VAR 0 13
33940: PUSH
33941: FOR_TO
33942: IFFALSE 34304
// begin InitHc ;
33944: CALL_OW 19
// if not f then
33948: LD_VAR 0 12
33952: NOT
33953: IFFALSE 34042
// begin PrepareHuman ( false , i , skill ) ;
33955: LD_INT 0
33957: PPUSH
33958: LD_VAR 0 8
33962: PPUSH
33963: LD_VAR 0 4
33967: PPUSH
33968: CALL_OW 380
// un := CreateHuman ;
33972: LD_ADDR_VAR 0 14
33976: PUSH
33977: CALL_OW 44
33981: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33982: LD_ADDR_VAR 0 7
33986: PUSH
33987: LD_VAR 0 7
33991: PPUSH
33992: LD_INT 1
33994: PPUSH
33995: LD_VAR 0 14
33999: PPUSH
34000: CALL_OW 2
34004: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34005: LD_VAR 0 14
34009: PPUSH
34010: LD_VAR 0 1
34014: PPUSH
34015: CALL_OW 250
34019: PPUSH
34020: LD_VAR 0 1
34024: PPUSH
34025: CALL_OW 251
34029: PPUSH
34030: LD_INT 10
34032: PPUSH
34033: LD_INT 0
34035: PPUSH
34036: CALL_OW 50
// continue ;
34040: GO 33941
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34042: LD_VAR 0 12
34046: PUSH
34047: LD_INT 1
34049: ARRAY
34050: PPUSH
34051: CALL_OW 313
34055: PUSH
34056: LD_VAR 0 12
34060: PUSH
34061: LD_INT 1
34063: ARRAY
34064: PPUSH
34065: CALL_OW 266
34069: PUSH
34070: LD_INT 32
34072: PUSH
34073: LD_INT 31
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: IN
34080: AND
34081: PUSH
34082: LD_VAR 0 12
34086: PUSH
34087: LD_INT 1
34089: ARRAY
34090: PPUSH
34091: CALL_OW 313
34095: PUSH
34096: LD_INT 6
34098: EQUAL
34099: OR
34100: IFFALSE 34120
// f := Delete ( f , 1 ) ;
34102: LD_ADDR_VAR 0 12
34106: PUSH
34107: LD_VAR 0 12
34111: PPUSH
34112: LD_INT 1
34114: PPUSH
34115: CALL_OW 3
34119: ST_TO_ADDR
// if not f then
34120: LD_VAR 0 12
34124: NOT
34125: IFFALSE 34143
// begin x := x + 2 ;
34127: LD_ADDR_VAR 0 13
34131: PUSH
34132: LD_VAR 0 13
34136: PUSH
34137: LD_INT 2
34139: PLUS
34140: ST_TO_ADDR
// continue ;
34141: GO 33941
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34143: LD_VAR 0 12
34147: PUSH
34148: LD_INT 1
34150: ARRAY
34151: PPUSH
34152: CALL_OW 266
34156: PUSH
34157: LD_INT 5
34159: EQUAL
34160: IFFALSE 34234
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34162: LD_VAR 0 12
34166: PUSH
34167: LD_INT 1
34169: ARRAY
34170: PPUSH
34171: CALL_OW 313
34175: PUSH
34176: LD_INT 3
34178: LESS
34179: IFFALSE 34215
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34181: LD_INT 0
34183: PPUSH
34184: LD_INT 5
34186: PUSH
34187: LD_INT 8
34189: PUSH
34190: LD_INT 9
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: LIST
34197: PUSH
34198: LD_VAR 0 17
34202: ARRAY
34203: PPUSH
34204: LD_VAR 0 4
34208: PPUSH
34209: CALL_OW 380
34213: GO 34232
// PrepareHuman ( false , i , skill ) ;
34215: LD_INT 0
34217: PPUSH
34218: LD_VAR 0 8
34222: PPUSH
34223: LD_VAR 0 4
34227: PPUSH
34228: CALL_OW 380
// end else
34232: GO 34251
// PrepareHuman ( false , i , skill ) ;
34234: LD_INT 0
34236: PPUSH
34237: LD_VAR 0 8
34241: PPUSH
34242: LD_VAR 0 4
34246: PPUSH
34247: CALL_OW 380
// un := CreateHuman ;
34251: LD_ADDR_VAR 0 14
34255: PUSH
34256: CALL_OW 44
34260: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34261: LD_ADDR_VAR 0 7
34265: PUSH
34266: LD_VAR 0 7
34270: PPUSH
34271: LD_INT 1
34273: PPUSH
34274: LD_VAR 0 14
34278: PPUSH
34279: CALL_OW 2
34283: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34284: LD_VAR 0 14
34288: PPUSH
34289: LD_VAR 0 12
34293: PUSH
34294: LD_INT 1
34296: ARRAY
34297: PPUSH
34298: CALL_OW 52
// end ;
34302: GO 33941
34304: POP
34305: POP
// end ;
34306: GO 33243
34308: POP
34309: POP
// result := result ^ buildings ;
34310: LD_ADDR_VAR 0 7
34314: PUSH
34315: LD_VAR 0 7
34319: PUSH
34320: LD_VAR 0 18
34324: ADD
34325: ST_TO_ADDR
// end else
34326: GO 34469
// begin for i = 1 to personel do
34328: LD_ADDR_VAR 0 8
34332: PUSH
34333: DOUBLE
34334: LD_INT 1
34336: DEC
34337: ST_TO_ADDR
34338: LD_VAR 0 6
34342: PUSH
34343: FOR_TO
34344: IFFALSE 34467
// begin if i > 4 then
34346: LD_VAR 0 8
34350: PUSH
34351: LD_INT 4
34353: GREATER
34354: IFFALSE 34358
// break ;
34356: GO 34467
// x := personel [ i ] ;
34358: LD_ADDR_VAR 0 13
34362: PUSH
34363: LD_VAR 0 6
34367: PUSH
34368: LD_VAR 0 8
34372: ARRAY
34373: ST_TO_ADDR
// if x = - 1 then
34374: LD_VAR 0 13
34378: PUSH
34379: LD_INT 1
34381: NEG
34382: EQUAL
34383: IFFALSE 34387
// continue ;
34385: GO 34343
// PrepareHuman ( false , i , skill ) ;
34387: LD_INT 0
34389: PPUSH
34390: LD_VAR 0 8
34394: PPUSH
34395: LD_VAR 0 4
34399: PPUSH
34400: CALL_OW 380
// un := CreateHuman ;
34404: LD_ADDR_VAR 0 14
34408: PUSH
34409: CALL_OW 44
34413: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34414: LD_VAR 0 14
34418: PPUSH
34419: LD_VAR 0 1
34423: PPUSH
34424: CALL_OW 250
34428: PPUSH
34429: LD_VAR 0 1
34433: PPUSH
34434: CALL_OW 251
34438: PPUSH
34439: LD_INT 10
34441: PPUSH
34442: LD_INT 0
34444: PPUSH
34445: CALL_OW 50
// result := result ^ un ;
34449: LD_ADDR_VAR 0 7
34453: PUSH
34454: LD_VAR 0 7
34458: PUSH
34459: LD_VAR 0 14
34463: ADD
34464: ST_TO_ADDR
// end ;
34465: GO 34343
34467: POP
34468: POP
// end ; end ;
34469: LD_VAR 0 7
34473: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34474: LD_INT 0
34476: PPUSH
34477: PPUSH
34478: PPUSH
34479: PPUSH
34480: PPUSH
34481: PPUSH
34482: PPUSH
34483: PPUSH
34484: PPUSH
34485: PPUSH
34486: PPUSH
34487: PPUSH
34488: PPUSH
34489: PPUSH
34490: PPUSH
34491: PPUSH
// result := false ;
34492: LD_ADDR_VAR 0 3
34496: PUSH
34497: LD_INT 0
34499: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34500: LD_VAR 0 1
34504: NOT
34505: PUSH
34506: LD_VAR 0 1
34510: PPUSH
34511: CALL_OW 266
34515: PUSH
34516: LD_INT 32
34518: PUSH
34519: LD_INT 33
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: IN
34526: NOT
34527: OR
34528: IFFALSE 34532
// exit ;
34530: GO 35641
// nat := GetNation ( tower ) ;
34532: LD_ADDR_VAR 0 12
34536: PUSH
34537: LD_VAR 0 1
34541: PPUSH
34542: CALL_OW 248
34546: ST_TO_ADDR
// side := GetSide ( tower ) ;
34547: LD_ADDR_VAR 0 16
34551: PUSH
34552: LD_VAR 0 1
34556: PPUSH
34557: CALL_OW 255
34561: ST_TO_ADDR
// x := GetX ( tower ) ;
34562: LD_ADDR_VAR 0 10
34566: PUSH
34567: LD_VAR 0 1
34571: PPUSH
34572: CALL_OW 250
34576: ST_TO_ADDR
// y := GetY ( tower ) ;
34577: LD_ADDR_VAR 0 11
34581: PUSH
34582: LD_VAR 0 1
34586: PPUSH
34587: CALL_OW 251
34591: ST_TO_ADDR
// if not x or not y then
34592: LD_VAR 0 10
34596: NOT
34597: PUSH
34598: LD_VAR 0 11
34602: NOT
34603: OR
34604: IFFALSE 34608
// exit ;
34606: GO 35641
// weapon := 0 ;
34608: LD_ADDR_VAR 0 18
34612: PUSH
34613: LD_INT 0
34615: ST_TO_ADDR
// fac_list := [ ] ;
34616: LD_ADDR_VAR 0 17
34620: PUSH
34621: EMPTY
34622: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34623: LD_ADDR_VAR 0 6
34627: PUSH
34628: LD_VAR 0 1
34632: PPUSH
34633: CALL_OW 274
34637: PPUSH
34638: LD_VAR 0 2
34642: PPUSH
34643: LD_INT 0
34645: PPUSH
34646: CALL 32211 0 3
34650: PPUSH
34651: LD_INT 30
34653: PUSH
34654: LD_INT 3
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PPUSH
34661: CALL_OW 72
34665: ST_TO_ADDR
// if not factories then
34666: LD_VAR 0 6
34670: NOT
34671: IFFALSE 34675
// exit ;
34673: GO 35641
// for i in factories do
34675: LD_ADDR_VAR 0 8
34679: PUSH
34680: LD_VAR 0 6
34684: PUSH
34685: FOR_IN
34686: IFFALSE 34711
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34688: LD_ADDR_VAR 0 17
34692: PUSH
34693: LD_VAR 0 17
34697: PUSH
34698: LD_VAR 0 8
34702: PPUSH
34703: CALL_OW 478
34707: UNION
34708: ST_TO_ADDR
34709: GO 34685
34711: POP
34712: POP
// if not fac_list then
34713: LD_VAR 0 17
34717: NOT
34718: IFFALSE 34722
// exit ;
34720: GO 35641
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34722: LD_ADDR_VAR 0 5
34726: PUSH
34727: LD_INT 4
34729: PUSH
34730: LD_INT 5
34732: PUSH
34733: LD_INT 9
34735: PUSH
34736: LD_INT 10
34738: PUSH
34739: LD_INT 6
34741: PUSH
34742: LD_INT 7
34744: PUSH
34745: LD_INT 11
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 27
34759: PUSH
34760: LD_INT 28
34762: PUSH
34763: LD_INT 26
34765: PUSH
34766: LD_INT 30
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 43
34777: PUSH
34778: LD_INT 44
34780: PUSH
34781: LD_INT 46
34783: PUSH
34784: LD_INT 45
34786: PUSH
34787: LD_INT 47
34789: PUSH
34790: LD_INT 49
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: LIST
34805: PUSH
34806: LD_VAR 0 12
34810: ARRAY
34811: ST_TO_ADDR
// list := list isect fac_list ;
34812: LD_ADDR_VAR 0 5
34816: PUSH
34817: LD_VAR 0 5
34821: PUSH
34822: LD_VAR 0 17
34826: ISECT
34827: ST_TO_ADDR
// if not list then
34828: LD_VAR 0 5
34832: NOT
34833: IFFALSE 34837
// exit ;
34835: GO 35641
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34837: LD_VAR 0 12
34841: PUSH
34842: LD_INT 3
34844: EQUAL
34845: PUSH
34846: LD_INT 49
34848: PUSH
34849: LD_VAR 0 5
34853: IN
34854: AND
34855: PUSH
34856: LD_INT 31
34858: PPUSH
34859: LD_VAR 0 16
34863: PPUSH
34864: CALL_OW 321
34868: PUSH
34869: LD_INT 2
34871: EQUAL
34872: AND
34873: IFFALSE 34933
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34875: LD_INT 22
34877: PUSH
34878: LD_VAR 0 16
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 35
34889: PUSH
34890: LD_INT 49
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 91
34899: PUSH
34900: LD_VAR 0 1
34904: PUSH
34905: LD_INT 10
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: LIST
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: LIST
34917: PPUSH
34918: CALL_OW 69
34922: NOT
34923: IFFALSE 34933
// weapon := ru_time_lapser ;
34925: LD_ADDR_VAR 0 18
34929: PUSH
34930: LD_INT 49
34932: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34933: LD_VAR 0 12
34937: PUSH
34938: LD_INT 1
34940: PUSH
34941: LD_INT 2
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: IN
34948: PUSH
34949: LD_INT 11
34951: PUSH
34952: LD_VAR 0 5
34956: IN
34957: PUSH
34958: LD_INT 30
34960: PUSH
34961: LD_VAR 0 5
34965: IN
34966: OR
34967: AND
34968: PUSH
34969: LD_INT 6
34971: PPUSH
34972: LD_VAR 0 16
34976: PPUSH
34977: CALL_OW 321
34981: PUSH
34982: LD_INT 2
34984: EQUAL
34985: AND
34986: IFFALSE 35151
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34988: LD_INT 22
34990: PUSH
34991: LD_VAR 0 16
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 2
35002: PUSH
35003: LD_INT 35
35005: PUSH
35006: LD_INT 11
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 35
35015: PUSH
35016: LD_INT 30
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 91
35030: PUSH
35031: LD_VAR 0 1
35035: PUSH
35036: LD_INT 18
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: LIST
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: LIST
35048: PPUSH
35049: CALL_OW 69
35053: NOT
35054: PUSH
35055: LD_INT 22
35057: PUSH
35058: LD_VAR 0 16
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 2
35069: PUSH
35070: LD_INT 30
35072: PUSH
35073: LD_INT 32
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 30
35082: PUSH
35083: LD_INT 33
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 91
35097: PUSH
35098: LD_VAR 0 1
35102: PUSH
35103: LD_INT 12
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: LIST
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: LIST
35115: PUSH
35116: EMPTY
35117: LIST
35118: PPUSH
35119: CALL_OW 69
35123: PUSH
35124: LD_INT 2
35126: GREATER
35127: AND
35128: IFFALSE 35151
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35130: LD_ADDR_VAR 0 18
35134: PUSH
35135: LD_INT 11
35137: PUSH
35138: LD_INT 30
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_VAR 0 12
35149: ARRAY
35150: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35151: LD_VAR 0 18
35155: NOT
35156: PUSH
35157: LD_INT 40
35159: PPUSH
35160: LD_VAR 0 16
35164: PPUSH
35165: CALL_OW 321
35169: PUSH
35170: LD_INT 2
35172: EQUAL
35173: AND
35174: PUSH
35175: LD_INT 7
35177: PUSH
35178: LD_VAR 0 5
35182: IN
35183: PUSH
35184: LD_INT 28
35186: PUSH
35187: LD_VAR 0 5
35191: IN
35192: OR
35193: PUSH
35194: LD_INT 45
35196: PUSH
35197: LD_VAR 0 5
35201: IN
35202: OR
35203: AND
35204: IFFALSE 35458
// begin hex := GetHexInfo ( x , y ) ;
35206: LD_ADDR_VAR 0 4
35210: PUSH
35211: LD_VAR 0 10
35215: PPUSH
35216: LD_VAR 0 11
35220: PPUSH
35221: CALL_OW 546
35225: ST_TO_ADDR
// if hex [ 1 ] then
35226: LD_VAR 0 4
35230: PUSH
35231: LD_INT 1
35233: ARRAY
35234: IFFALSE 35238
// exit ;
35236: GO 35641
// height := hex [ 2 ] ;
35238: LD_ADDR_VAR 0 15
35242: PUSH
35243: LD_VAR 0 4
35247: PUSH
35248: LD_INT 2
35250: ARRAY
35251: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35252: LD_ADDR_VAR 0 14
35256: PUSH
35257: LD_INT 0
35259: PUSH
35260: LD_INT 2
35262: PUSH
35263: LD_INT 3
35265: PUSH
35266: LD_INT 5
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: ST_TO_ADDR
// for i in tmp do
35275: LD_ADDR_VAR 0 8
35279: PUSH
35280: LD_VAR 0 14
35284: PUSH
35285: FOR_IN
35286: IFFALSE 35456
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35288: LD_ADDR_VAR 0 9
35292: PUSH
35293: LD_VAR 0 10
35297: PPUSH
35298: LD_VAR 0 8
35302: PPUSH
35303: LD_INT 5
35305: PPUSH
35306: CALL_OW 272
35310: PUSH
35311: LD_VAR 0 11
35315: PPUSH
35316: LD_VAR 0 8
35320: PPUSH
35321: LD_INT 5
35323: PPUSH
35324: CALL_OW 273
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35333: LD_VAR 0 9
35337: PUSH
35338: LD_INT 1
35340: ARRAY
35341: PPUSH
35342: LD_VAR 0 9
35346: PUSH
35347: LD_INT 2
35349: ARRAY
35350: PPUSH
35351: CALL_OW 488
35355: IFFALSE 35454
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35357: LD_ADDR_VAR 0 4
35361: PUSH
35362: LD_VAR 0 9
35366: PUSH
35367: LD_INT 1
35369: ARRAY
35370: PPUSH
35371: LD_VAR 0 9
35375: PUSH
35376: LD_INT 2
35378: ARRAY
35379: PPUSH
35380: CALL_OW 546
35384: ST_TO_ADDR
// if hex [ 1 ] then
35385: LD_VAR 0 4
35389: PUSH
35390: LD_INT 1
35392: ARRAY
35393: IFFALSE 35397
// continue ;
35395: GO 35285
// h := hex [ 2 ] ;
35397: LD_ADDR_VAR 0 13
35401: PUSH
35402: LD_VAR 0 4
35406: PUSH
35407: LD_INT 2
35409: ARRAY
35410: ST_TO_ADDR
// if h + 7 < height then
35411: LD_VAR 0 13
35415: PUSH
35416: LD_INT 7
35418: PLUS
35419: PUSH
35420: LD_VAR 0 15
35424: LESS
35425: IFFALSE 35454
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35427: LD_ADDR_VAR 0 18
35431: PUSH
35432: LD_INT 7
35434: PUSH
35435: LD_INT 28
35437: PUSH
35438: LD_INT 45
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: LIST
35445: PUSH
35446: LD_VAR 0 12
35450: ARRAY
35451: ST_TO_ADDR
// break ;
35452: GO 35456
// end ; end ; end ;
35454: GO 35285
35456: POP
35457: POP
// end ; if not weapon then
35458: LD_VAR 0 18
35462: NOT
35463: IFFALSE 35523
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35465: LD_ADDR_VAR 0 5
35469: PUSH
35470: LD_VAR 0 5
35474: PUSH
35475: LD_INT 11
35477: PUSH
35478: LD_INT 30
35480: PUSH
35481: LD_INT 49
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: LIST
35488: DIFF
35489: ST_TO_ADDR
// if not list then
35490: LD_VAR 0 5
35494: NOT
35495: IFFALSE 35499
// exit ;
35497: GO 35641
// weapon := list [ rand ( 1 , list ) ] ;
35499: LD_ADDR_VAR 0 18
35503: PUSH
35504: LD_VAR 0 5
35508: PUSH
35509: LD_INT 1
35511: PPUSH
35512: LD_VAR 0 5
35516: PPUSH
35517: CALL_OW 12
35521: ARRAY
35522: ST_TO_ADDR
// end ; if weapon then
35523: LD_VAR 0 18
35527: IFFALSE 35641
// begin tmp := CostOfWeapon ( weapon ) ;
35529: LD_ADDR_VAR 0 14
35533: PUSH
35534: LD_VAR 0 18
35538: PPUSH
35539: CALL_OW 451
35543: ST_TO_ADDR
// j := GetBase ( tower ) ;
35544: LD_ADDR_VAR 0 9
35548: PUSH
35549: LD_VAR 0 1
35553: PPUSH
35554: CALL_OW 274
35558: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35559: LD_VAR 0 9
35563: PPUSH
35564: LD_INT 1
35566: PPUSH
35567: CALL_OW 275
35571: PUSH
35572: LD_VAR 0 14
35576: PUSH
35577: LD_INT 1
35579: ARRAY
35580: GREATEREQUAL
35581: PUSH
35582: LD_VAR 0 9
35586: PPUSH
35587: LD_INT 2
35589: PPUSH
35590: CALL_OW 275
35594: PUSH
35595: LD_VAR 0 14
35599: PUSH
35600: LD_INT 2
35602: ARRAY
35603: GREATEREQUAL
35604: AND
35605: PUSH
35606: LD_VAR 0 9
35610: PPUSH
35611: LD_INT 3
35613: PPUSH
35614: CALL_OW 275
35618: PUSH
35619: LD_VAR 0 14
35623: PUSH
35624: LD_INT 3
35626: ARRAY
35627: GREATEREQUAL
35628: AND
35629: IFFALSE 35641
// result := weapon ;
35631: LD_ADDR_VAR 0 3
35635: PUSH
35636: LD_VAR 0 18
35640: ST_TO_ADDR
// end ; end ;
35641: LD_VAR 0 3
35645: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35646: LD_INT 0
35648: PPUSH
35649: PPUSH
// result := true ;
35650: LD_ADDR_VAR 0 3
35654: PUSH
35655: LD_INT 1
35657: ST_TO_ADDR
// if array1 = array2 then
35658: LD_VAR 0 1
35662: PUSH
35663: LD_VAR 0 2
35667: EQUAL
35668: IFFALSE 35728
// begin for i = 1 to array1 do
35670: LD_ADDR_VAR 0 4
35674: PUSH
35675: DOUBLE
35676: LD_INT 1
35678: DEC
35679: ST_TO_ADDR
35680: LD_VAR 0 1
35684: PUSH
35685: FOR_TO
35686: IFFALSE 35724
// if array1 [ i ] <> array2 [ i ] then
35688: LD_VAR 0 1
35692: PUSH
35693: LD_VAR 0 4
35697: ARRAY
35698: PUSH
35699: LD_VAR 0 2
35703: PUSH
35704: LD_VAR 0 4
35708: ARRAY
35709: NONEQUAL
35710: IFFALSE 35722
// begin result := false ;
35712: LD_ADDR_VAR 0 3
35716: PUSH
35717: LD_INT 0
35719: ST_TO_ADDR
// break ;
35720: GO 35724
// end ;
35722: GO 35685
35724: POP
35725: POP
// end else
35726: GO 35736
// result := false ;
35728: LD_ADDR_VAR 0 3
35732: PUSH
35733: LD_INT 0
35735: ST_TO_ADDR
// end ;
35736: LD_VAR 0 3
35740: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35741: LD_INT 0
35743: PPUSH
35744: PPUSH
// if not array1 or not array2 then
35745: LD_VAR 0 1
35749: NOT
35750: PUSH
35751: LD_VAR 0 2
35755: NOT
35756: OR
35757: IFFALSE 35761
// exit ;
35759: GO 35825
// result := true ;
35761: LD_ADDR_VAR 0 3
35765: PUSH
35766: LD_INT 1
35768: ST_TO_ADDR
// for i = 1 to array1 do
35769: LD_ADDR_VAR 0 4
35773: PUSH
35774: DOUBLE
35775: LD_INT 1
35777: DEC
35778: ST_TO_ADDR
35779: LD_VAR 0 1
35783: PUSH
35784: FOR_TO
35785: IFFALSE 35823
// if array1 [ i ] <> array2 [ i ] then
35787: LD_VAR 0 1
35791: PUSH
35792: LD_VAR 0 4
35796: ARRAY
35797: PUSH
35798: LD_VAR 0 2
35802: PUSH
35803: LD_VAR 0 4
35807: ARRAY
35808: NONEQUAL
35809: IFFALSE 35821
// begin result := false ;
35811: LD_ADDR_VAR 0 3
35815: PUSH
35816: LD_INT 0
35818: ST_TO_ADDR
// break ;
35819: GO 35823
// end ;
35821: GO 35784
35823: POP
35824: POP
// end ;
35825: LD_VAR 0 3
35829: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35830: LD_INT 0
35832: PPUSH
35833: PPUSH
35834: PPUSH
// pom := GetBase ( fac ) ;
35835: LD_ADDR_VAR 0 5
35839: PUSH
35840: LD_VAR 0 1
35844: PPUSH
35845: CALL_OW 274
35849: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35850: LD_ADDR_VAR 0 4
35854: PUSH
35855: LD_VAR 0 2
35859: PUSH
35860: LD_INT 1
35862: ARRAY
35863: PPUSH
35864: LD_VAR 0 2
35868: PUSH
35869: LD_INT 2
35871: ARRAY
35872: PPUSH
35873: LD_VAR 0 2
35877: PUSH
35878: LD_INT 3
35880: ARRAY
35881: PPUSH
35882: LD_VAR 0 2
35886: PUSH
35887: LD_INT 4
35889: ARRAY
35890: PPUSH
35891: CALL_OW 449
35895: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35896: LD_ADDR_VAR 0 3
35900: PUSH
35901: LD_VAR 0 5
35905: PPUSH
35906: LD_INT 1
35908: PPUSH
35909: CALL_OW 275
35913: PUSH
35914: LD_VAR 0 4
35918: PUSH
35919: LD_INT 1
35921: ARRAY
35922: GREATEREQUAL
35923: PUSH
35924: LD_VAR 0 5
35928: PPUSH
35929: LD_INT 2
35931: PPUSH
35932: CALL_OW 275
35936: PUSH
35937: LD_VAR 0 4
35941: PUSH
35942: LD_INT 2
35944: ARRAY
35945: GREATEREQUAL
35946: AND
35947: PUSH
35948: LD_VAR 0 5
35952: PPUSH
35953: LD_INT 3
35955: PPUSH
35956: CALL_OW 275
35960: PUSH
35961: LD_VAR 0 4
35965: PUSH
35966: LD_INT 3
35968: ARRAY
35969: GREATEREQUAL
35970: AND
35971: ST_TO_ADDR
// end ;
35972: LD_VAR 0 3
35976: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35977: LD_INT 0
35979: PPUSH
35980: PPUSH
35981: PPUSH
35982: PPUSH
// pom := GetBase ( building ) ;
35983: LD_ADDR_VAR 0 3
35987: PUSH
35988: LD_VAR 0 1
35992: PPUSH
35993: CALL_OW 274
35997: ST_TO_ADDR
// if not pom then
35998: LD_VAR 0 3
36002: NOT
36003: IFFALSE 36007
// exit ;
36005: GO 36177
// btype := GetBType ( building ) ;
36007: LD_ADDR_VAR 0 5
36011: PUSH
36012: LD_VAR 0 1
36016: PPUSH
36017: CALL_OW 266
36021: ST_TO_ADDR
// if btype = b_armoury then
36022: LD_VAR 0 5
36026: PUSH
36027: LD_INT 4
36029: EQUAL
36030: IFFALSE 36040
// btype := b_barracks ;
36032: LD_ADDR_VAR 0 5
36036: PUSH
36037: LD_INT 5
36039: ST_TO_ADDR
// if btype = b_depot then
36040: LD_VAR 0 5
36044: PUSH
36045: LD_INT 0
36047: EQUAL
36048: IFFALSE 36058
// btype := b_warehouse ;
36050: LD_ADDR_VAR 0 5
36054: PUSH
36055: LD_INT 1
36057: ST_TO_ADDR
// if btype = b_workshop then
36058: LD_VAR 0 5
36062: PUSH
36063: LD_INT 2
36065: EQUAL
36066: IFFALSE 36076
// btype := b_factory ;
36068: LD_ADDR_VAR 0 5
36072: PUSH
36073: LD_INT 3
36075: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36076: LD_ADDR_VAR 0 4
36080: PUSH
36081: LD_VAR 0 5
36085: PPUSH
36086: LD_VAR 0 1
36090: PPUSH
36091: CALL_OW 248
36095: PPUSH
36096: CALL_OW 450
36100: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36101: LD_ADDR_VAR 0 2
36105: PUSH
36106: LD_VAR 0 3
36110: PPUSH
36111: LD_INT 1
36113: PPUSH
36114: CALL_OW 275
36118: PUSH
36119: LD_VAR 0 4
36123: PUSH
36124: LD_INT 1
36126: ARRAY
36127: GREATEREQUAL
36128: PUSH
36129: LD_VAR 0 3
36133: PPUSH
36134: LD_INT 2
36136: PPUSH
36137: CALL_OW 275
36141: PUSH
36142: LD_VAR 0 4
36146: PUSH
36147: LD_INT 2
36149: ARRAY
36150: GREATEREQUAL
36151: AND
36152: PUSH
36153: LD_VAR 0 3
36157: PPUSH
36158: LD_INT 3
36160: PPUSH
36161: CALL_OW 275
36165: PUSH
36166: LD_VAR 0 4
36170: PUSH
36171: LD_INT 3
36173: ARRAY
36174: GREATEREQUAL
36175: AND
36176: ST_TO_ADDR
// end ;
36177: LD_VAR 0 2
36181: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36182: LD_INT 0
36184: PPUSH
36185: PPUSH
36186: PPUSH
// pom := GetBase ( building ) ;
36187: LD_ADDR_VAR 0 4
36191: PUSH
36192: LD_VAR 0 1
36196: PPUSH
36197: CALL_OW 274
36201: ST_TO_ADDR
// if not pom then
36202: LD_VAR 0 4
36206: NOT
36207: IFFALSE 36211
// exit ;
36209: GO 36312
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36211: LD_ADDR_VAR 0 5
36215: PUSH
36216: LD_VAR 0 2
36220: PPUSH
36221: LD_VAR 0 1
36225: PPUSH
36226: CALL_OW 248
36230: PPUSH
36231: CALL_OW 450
36235: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36236: LD_ADDR_VAR 0 3
36240: PUSH
36241: LD_VAR 0 4
36245: PPUSH
36246: LD_INT 1
36248: PPUSH
36249: CALL_OW 275
36253: PUSH
36254: LD_VAR 0 5
36258: PUSH
36259: LD_INT 1
36261: ARRAY
36262: GREATEREQUAL
36263: PUSH
36264: LD_VAR 0 4
36268: PPUSH
36269: LD_INT 2
36271: PPUSH
36272: CALL_OW 275
36276: PUSH
36277: LD_VAR 0 5
36281: PUSH
36282: LD_INT 2
36284: ARRAY
36285: GREATEREQUAL
36286: AND
36287: PUSH
36288: LD_VAR 0 4
36292: PPUSH
36293: LD_INT 3
36295: PPUSH
36296: CALL_OW 275
36300: PUSH
36301: LD_VAR 0 5
36305: PUSH
36306: LD_INT 3
36308: ARRAY
36309: GREATEREQUAL
36310: AND
36311: ST_TO_ADDR
// end ;
36312: LD_VAR 0 3
36316: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36317: LD_INT 0
36319: PPUSH
36320: PPUSH
36321: PPUSH
36322: PPUSH
36323: PPUSH
36324: PPUSH
36325: PPUSH
36326: PPUSH
36327: PPUSH
36328: PPUSH
36329: PPUSH
// result := false ;
36330: LD_ADDR_VAR 0 8
36334: PUSH
36335: LD_INT 0
36337: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36338: LD_VAR 0 5
36342: NOT
36343: PUSH
36344: LD_VAR 0 1
36348: NOT
36349: OR
36350: PUSH
36351: LD_VAR 0 2
36355: NOT
36356: OR
36357: PUSH
36358: LD_VAR 0 3
36362: NOT
36363: OR
36364: IFFALSE 36368
// exit ;
36366: GO 37182
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36368: LD_ADDR_VAR 0 14
36372: PUSH
36373: LD_VAR 0 1
36377: PPUSH
36378: LD_VAR 0 2
36382: PPUSH
36383: LD_VAR 0 3
36387: PPUSH
36388: LD_VAR 0 4
36392: PPUSH
36393: LD_VAR 0 5
36397: PUSH
36398: LD_INT 1
36400: ARRAY
36401: PPUSH
36402: CALL_OW 248
36406: PPUSH
36407: LD_INT 0
36409: PPUSH
36410: CALL 38019 0 6
36414: ST_TO_ADDR
// if not hexes then
36415: LD_VAR 0 14
36419: NOT
36420: IFFALSE 36424
// exit ;
36422: GO 37182
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36424: LD_ADDR_VAR 0 17
36428: PUSH
36429: LD_VAR 0 5
36433: PPUSH
36434: LD_INT 22
36436: PUSH
36437: LD_VAR 0 13
36441: PPUSH
36442: CALL_OW 255
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: PUSH
36454: LD_INT 30
36456: PUSH
36457: LD_INT 0
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 30
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: LIST
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PPUSH
36483: CALL_OW 72
36487: ST_TO_ADDR
// for i = 1 to hexes do
36488: LD_ADDR_VAR 0 9
36492: PUSH
36493: DOUBLE
36494: LD_INT 1
36496: DEC
36497: ST_TO_ADDR
36498: LD_VAR 0 14
36502: PUSH
36503: FOR_TO
36504: IFFALSE 37180
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36506: LD_ADDR_VAR 0 13
36510: PUSH
36511: LD_VAR 0 14
36515: PUSH
36516: LD_VAR 0 9
36520: ARRAY
36521: PUSH
36522: LD_INT 1
36524: ARRAY
36525: PPUSH
36526: LD_VAR 0 14
36530: PUSH
36531: LD_VAR 0 9
36535: ARRAY
36536: PUSH
36537: LD_INT 2
36539: ARRAY
36540: PPUSH
36541: CALL_OW 428
36545: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36546: LD_VAR 0 14
36550: PUSH
36551: LD_VAR 0 9
36555: ARRAY
36556: PUSH
36557: LD_INT 1
36559: ARRAY
36560: PPUSH
36561: LD_VAR 0 14
36565: PUSH
36566: LD_VAR 0 9
36570: ARRAY
36571: PUSH
36572: LD_INT 2
36574: ARRAY
36575: PPUSH
36576: CALL_OW 351
36580: PUSH
36581: LD_VAR 0 14
36585: PUSH
36586: LD_VAR 0 9
36590: ARRAY
36591: PUSH
36592: LD_INT 1
36594: ARRAY
36595: PPUSH
36596: LD_VAR 0 14
36600: PUSH
36601: LD_VAR 0 9
36605: ARRAY
36606: PUSH
36607: LD_INT 2
36609: ARRAY
36610: PPUSH
36611: CALL_OW 488
36615: NOT
36616: OR
36617: PUSH
36618: LD_VAR 0 13
36622: PPUSH
36623: CALL_OW 247
36627: PUSH
36628: LD_INT 3
36630: EQUAL
36631: OR
36632: IFFALSE 36638
// exit ;
36634: POP
36635: POP
36636: GO 37182
// if not tmp then
36638: LD_VAR 0 13
36642: NOT
36643: IFFALSE 36647
// continue ;
36645: GO 36503
// result := true ;
36647: LD_ADDR_VAR 0 8
36651: PUSH
36652: LD_INT 1
36654: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36655: LD_VAR 0 6
36659: PUSH
36660: LD_VAR 0 13
36664: PPUSH
36665: CALL_OW 247
36669: PUSH
36670: LD_INT 2
36672: EQUAL
36673: AND
36674: PUSH
36675: LD_VAR 0 13
36679: PPUSH
36680: CALL_OW 263
36684: PUSH
36685: LD_INT 1
36687: EQUAL
36688: AND
36689: IFFALSE 36853
// begin if IsDrivenBy ( tmp ) then
36691: LD_VAR 0 13
36695: PPUSH
36696: CALL_OW 311
36700: IFFALSE 36704
// continue ;
36702: GO 36503
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36704: LD_VAR 0 6
36708: PPUSH
36709: LD_INT 3
36711: PUSH
36712: LD_INT 60
36714: PUSH
36715: EMPTY
36716: LIST
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 3
36724: PUSH
36725: LD_INT 55
36727: PUSH
36728: EMPTY
36729: LIST
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PPUSH
36739: CALL_OW 72
36743: IFFALSE 36851
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36745: LD_ADDR_VAR 0 18
36749: PUSH
36750: LD_VAR 0 6
36754: PPUSH
36755: LD_INT 3
36757: PUSH
36758: LD_INT 60
36760: PUSH
36761: EMPTY
36762: LIST
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 3
36770: PUSH
36771: LD_INT 55
36773: PUSH
36774: EMPTY
36775: LIST
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PPUSH
36785: CALL_OW 72
36789: PUSH
36790: LD_INT 1
36792: ARRAY
36793: ST_TO_ADDR
// if IsInUnit ( driver ) then
36794: LD_VAR 0 18
36798: PPUSH
36799: CALL_OW 310
36803: IFFALSE 36814
// ComExit ( driver ) ;
36805: LD_VAR 0 18
36809: PPUSH
36810: CALL 61203 0 1
// AddComEnterUnit ( driver , tmp ) ;
36814: LD_VAR 0 18
36818: PPUSH
36819: LD_VAR 0 13
36823: PPUSH
36824: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36828: LD_VAR 0 18
36832: PPUSH
36833: LD_VAR 0 7
36837: PPUSH
36838: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36842: LD_VAR 0 18
36846: PPUSH
36847: CALL_OW 181
// end ; continue ;
36851: GO 36503
// end ; if not cleaners or not tmp in cleaners then
36853: LD_VAR 0 6
36857: NOT
36858: PUSH
36859: LD_VAR 0 13
36863: PUSH
36864: LD_VAR 0 6
36868: IN
36869: NOT
36870: OR
36871: IFFALSE 37178
// begin if dep then
36873: LD_VAR 0 17
36877: IFFALSE 37013
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36879: LD_ADDR_VAR 0 16
36883: PUSH
36884: LD_VAR 0 17
36888: PUSH
36889: LD_INT 1
36891: ARRAY
36892: PPUSH
36893: CALL_OW 250
36897: PPUSH
36898: LD_VAR 0 17
36902: PUSH
36903: LD_INT 1
36905: ARRAY
36906: PPUSH
36907: CALL_OW 254
36911: PPUSH
36912: LD_INT 5
36914: PPUSH
36915: CALL_OW 272
36919: PUSH
36920: LD_VAR 0 17
36924: PUSH
36925: LD_INT 1
36927: ARRAY
36928: PPUSH
36929: CALL_OW 251
36933: PPUSH
36934: LD_VAR 0 17
36938: PUSH
36939: LD_INT 1
36941: ARRAY
36942: PPUSH
36943: CALL_OW 254
36947: PPUSH
36948: LD_INT 5
36950: PPUSH
36951: CALL_OW 273
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36960: LD_VAR 0 16
36964: PUSH
36965: LD_INT 1
36967: ARRAY
36968: PPUSH
36969: LD_VAR 0 16
36973: PUSH
36974: LD_INT 2
36976: ARRAY
36977: PPUSH
36978: CALL_OW 488
36982: IFFALSE 37013
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36984: LD_VAR 0 13
36988: PPUSH
36989: LD_VAR 0 16
36993: PUSH
36994: LD_INT 1
36996: ARRAY
36997: PPUSH
36998: LD_VAR 0 16
37002: PUSH
37003: LD_INT 2
37005: ARRAY
37006: PPUSH
37007: CALL_OW 111
// continue ;
37011: GO 36503
// end ; end ; r := GetDir ( tmp ) ;
37013: LD_ADDR_VAR 0 15
37017: PUSH
37018: LD_VAR 0 13
37022: PPUSH
37023: CALL_OW 254
37027: ST_TO_ADDR
// if r = 5 then
37028: LD_VAR 0 15
37032: PUSH
37033: LD_INT 5
37035: EQUAL
37036: IFFALSE 37046
// r := 0 ;
37038: LD_ADDR_VAR 0 15
37042: PUSH
37043: LD_INT 0
37045: ST_TO_ADDR
// for j = r to 5 do
37046: LD_ADDR_VAR 0 10
37050: PUSH
37051: DOUBLE
37052: LD_VAR 0 15
37056: DEC
37057: ST_TO_ADDR
37058: LD_INT 5
37060: PUSH
37061: FOR_TO
37062: IFFALSE 37176
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37064: LD_ADDR_VAR 0 11
37068: PUSH
37069: LD_VAR 0 13
37073: PPUSH
37074: CALL_OW 250
37078: PPUSH
37079: LD_VAR 0 10
37083: PPUSH
37084: LD_INT 2
37086: PPUSH
37087: CALL_OW 272
37091: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37092: LD_ADDR_VAR 0 12
37096: PUSH
37097: LD_VAR 0 13
37101: PPUSH
37102: CALL_OW 251
37106: PPUSH
37107: LD_VAR 0 10
37111: PPUSH
37112: LD_INT 2
37114: PPUSH
37115: CALL_OW 273
37119: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37120: LD_VAR 0 11
37124: PPUSH
37125: LD_VAR 0 12
37129: PPUSH
37130: CALL_OW 488
37134: PUSH
37135: LD_VAR 0 11
37139: PPUSH
37140: LD_VAR 0 12
37144: PPUSH
37145: CALL_OW 428
37149: NOT
37150: AND
37151: IFFALSE 37174
// begin ComMoveXY ( tmp , _x , _y ) ;
37153: LD_VAR 0 13
37157: PPUSH
37158: LD_VAR 0 11
37162: PPUSH
37163: LD_VAR 0 12
37167: PPUSH
37168: CALL_OW 111
// break ;
37172: GO 37176
// end ; end ;
37174: GO 37061
37176: POP
37177: POP
// end ; end ;
37178: GO 36503
37180: POP
37181: POP
// end ;
37182: LD_VAR 0 8
37186: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
37187: LD_INT 0
37189: PPUSH
37190: PPUSH
37191: PPUSH
37192: PPUSH
37193: PPUSH
37194: PPUSH
37195: PPUSH
37196: PPUSH
37197: PPUSH
37198: PPUSH
// result := false ;
37199: LD_ADDR_VAR 0 6
37203: PUSH
37204: LD_INT 0
37206: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37207: LD_VAR 0 1
37211: NOT
37212: PUSH
37213: LD_VAR 0 1
37217: PPUSH
37218: CALL_OW 266
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: IN
37233: NOT
37234: OR
37235: PUSH
37236: LD_VAR 0 2
37240: NOT
37241: OR
37242: PUSH
37243: LD_VAR 0 5
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: LD_INT 1
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: LD_INT 3
37259: PUSH
37260: LD_INT 4
37262: PUSH
37263: LD_INT 5
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: IN
37274: NOT
37275: OR
37276: PUSH
37277: LD_VAR 0 3
37281: PPUSH
37282: LD_VAR 0 4
37286: PPUSH
37287: CALL_OW 488
37291: NOT
37292: OR
37293: IFFALSE 37297
// exit ;
37295: GO 38014
// pom := GetBase ( depot ) ;
37297: LD_ADDR_VAR 0 10
37301: PUSH
37302: LD_VAR 0 1
37306: PPUSH
37307: CALL_OW 274
37311: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37312: LD_ADDR_VAR 0 11
37316: PUSH
37317: LD_VAR 0 2
37321: PPUSH
37322: LD_VAR 0 1
37326: PPUSH
37327: CALL_OW 248
37331: PPUSH
37332: CALL_OW 450
37336: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37337: LD_VAR 0 10
37341: PPUSH
37342: LD_INT 1
37344: PPUSH
37345: CALL_OW 275
37349: PUSH
37350: LD_VAR 0 11
37354: PUSH
37355: LD_INT 1
37357: ARRAY
37358: GREATEREQUAL
37359: PUSH
37360: LD_VAR 0 10
37364: PPUSH
37365: LD_INT 2
37367: PPUSH
37368: CALL_OW 275
37372: PUSH
37373: LD_VAR 0 11
37377: PUSH
37378: LD_INT 2
37380: ARRAY
37381: GREATEREQUAL
37382: AND
37383: PUSH
37384: LD_VAR 0 10
37388: PPUSH
37389: LD_INT 3
37391: PPUSH
37392: CALL_OW 275
37396: PUSH
37397: LD_VAR 0 11
37401: PUSH
37402: LD_INT 3
37404: ARRAY
37405: GREATEREQUAL
37406: AND
37407: NOT
37408: IFFALSE 37412
// exit ;
37410: GO 38014
// if GetBType ( depot ) = b_depot then
37412: LD_VAR 0 1
37416: PPUSH
37417: CALL_OW 266
37421: PUSH
37422: LD_INT 0
37424: EQUAL
37425: IFFALSE 37437
// dist := 28 else
37427: LD_ADDR_VAR 0 14
37431: PUSH
37432: LD_INT 28
37434: ST_TO_ADDR
37435: GO 37445
// dist := 36 ;
37437: LD_ADDR_VAR 0 14
37441: PUSH
37442: LD_INT 36
37444: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37445: LD_VAR 0 1
37449: PPUSH
37450: LD_VAR 0 3
37454: PPUSH
37455: LD_VAR 0 4
37459: PPUSH
37460: CALL_OW 297
37464: PUSH
37465: LD_VAR 0 14
37469: GREATER
37470: IFFALSE 37474
// exit ;
37472: GO 38014
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37474: LD_ADDR_VAR 0 12
37478: PUSH
37479: LD_VAR 0 2
37483: PPUSH
37484: LD_VAR 0 3
37488: PPUSH
37489: LD_VAR 0 4
37493: PPUSH
37494: LD_VAR 0 5
37498: PPUSH
37499: LD_VAR 0 1
37503: PPUSH
37504: CALL_OW 248
37508: PPUSH
37509: LD_INT 0
37511: PPUSH
37512: CALL 38019 0 6
37516: ST_TO_ADDR
// if not hexes then
37517: LD_VAR 0 12
37521: NOT
37522: IFFALSE 37526
// exit ;
37524: GO 38014
// hex := GetHexInfo ( x , y ) ;
37526: LD_ADDR_VAR 0 15
37530: PUSH
37531: LD_VAR 0 3
37535: PPUSH
37536: LD_VAR 0 4
37540: PPUSH
37541: CALL_OW 546
37545: ST_TO_ADDR
// if hex [ 1 ] then
37546: LD_VAR 0 15
37550: PUSH
37551: LD_INT 1
37553: ARRAY
37554: IFFALSE 37558
// exit ;
37556: GO 38014
// height := hex [ 2 ] ;
37558: LD_ADDR_VAR 0 13
37562: PUSH
37563: LD_VAR 0 15
37567: PUSH
37568: LD_INT 2
37570: ARRAY
37571: ST_TO_ADDR
// for i = 1 to hexes do
37572: LD_ADDR_VAR 0 7
37576: PUSH
37577: DOUBLE
37578: LD_INT 1
37580: DEC
37581: ST_TO_ADDR
37582: LD_VAR 0 12
37586: PUSH
37587: FOR_TO
37588: IFFALSE 37918
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37590: LD_VAR 0 12
37594: PUSH
37595: LD_VAR 0 7
37599: ARRAY
37600: PUSH
37601: LD_INT 1
37603: ARRAY
37604: PPUSH
37605: LD_VAR 0 12
37609: PUSH
37610: LD_VAR 0 7
37614: ARRAY
37615: PUSH
37616: LD_INT 2
37618: ARRAY
37619: PPUSH
37620: CALL_OW 488
37624: NOT
37625: PUSH
37626: LD_VAR 0 12
37630: PUSH
37631: LD_VAR 0 7
37635: ARRAY
37636: PUSH
37637: LD_INT 1
37639: ARRAY
37640: PPUSH
37641: LD_VAR 0 12
37645: PUSH
37646: LD_VAR 0 7
37650: ARRAY
37651: PUSH
37652: LD_INT 2
37654: ARRAY
37655: PPUSH
37656: CALL_OW 428
37660: PUSH
37661: LD_INT 0
37663: GREATER
37664: OR
37665: PUSH
37666: LD_VAR 0 12
37670: PUSH
37671: LD_VAR 0 7
37675: ARRAY
37676: PUSH
37677: LD_INT 1
37679: ARRAY
37680: PPUSH
37681: LD_VAR 0 12
37685: PUSH
37686: LD_VAR 0 7
37690: ARRAY
37691: PUSH
37692: LD_INT 2
37694: ARRAY
37695: PPUSH
37696: CALL_OW 351
37700: OR
37701: IFFALSE 37707
// exit ;
37703: POP
37704: POP
37705: GO 38014
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37707: LD_ADDR_VAR 0 8
37711: PUSH
37712: LD_VAR 0 12
37716: PUSH
37717: LD_VAR 0 7
37721: ARRAY
37722: PUSH
37723: LD_INT 1
37725: ARRAY
37726: PPUSH
37727: LD_VAR 0 12
37731: PUSH
37732: LD_VAR 0 7
37736: ARRAY
37737: PUSH
37738: LD_INT 2
37740: ARRAY
37741: PPUSH
37742: CALL_OW 546
37746: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37747: LD_VAR 0 8
37751: PUSH
37752: LD_INT 1
37754: ARRAY
37755: PUSH
37756: LD_VAR 0 8
37760: PUSH
37761: LD_INT 2
37763: ARRAY
37764: PUSH
37765: LD_VAR 0 13
37769: PUSH
37770: LD_INT 2
37772: PLUS
37773: GREATER
37774: OR
37775: PUSH
37776: LD_VAR 0 8
37780: PUSH
37781: LD_INT 2
37783: ARRAY
37784: PUSH
37785: LD_VAR 0 13
37789: PUSH
37790: LD_INT 2
37792: MINUS
37793: LESS
37794: OR
37795: PUSH
37796: LD_VAR 0 8
37800: PUSH
37801: LD_INT 3
37803: ARRAY
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: LD_INT 8
37810: PUSH
37811: LD_INT 9
37813: PUSH
37814: LD_INT 10
37816: PUSH
37817: LD_INT 11
37819: PUSH
37820: LD_INT 12
37822: PUSH
37823: LD_INT 13
37825: PUSH
37826: LD_INT 16
37828: PUSH
37829: LD_INT 17
37831: PUSH
37832: LD_INT 18
37834: PUSH
37835: LD_INT 19
37837: PUSH
37838: LD_INT 20
37840: PUSH
37841: LD_INT 21
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: IN
37859: NOT
37860: OR
37861: PUSH
37862: LD_VAR 0 8
37866: PUSH
37867: LD_INT 5
37869: ARRAY
37870: NOT
37871: OR
37872: PUSH
37873: LD_VAR 0 8
37877: PUSH
37878: LD_INT 6
37880: ARRAY
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: LD_INT 2
37887: PUSH
37888: LD_INT 7
37890: PUSH
37891: LD_INT 9
37893: PUSH
37894: LD_INT 10
37896: PUSH
37897: LD_INT 11
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: IN
37908: NOT
37909: OR
37910: IFFALSE 37916
// exit ;
37912: POP
37913: POP
37914: GO 38014
// end ;
37916: GO 37587
37918: POP
37919: POP
// side := GetSide ( depot ) ;
37920: LD_ADDR_VAR 0 9
37924: PUSH
37925: LD_VAR 0 1
37929: PPUSH
37930: CALL_OW 255
37934: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37935: LD_VAR 0 9
37939: PPUSH
37940: LD_VAR 0 3
37944: PPUSH
37945: LD_VAR 0 4
37949: PPUSH
37950: LD_INT 20
37952: PPUSH
37953: CALL 30365 0 4
37957: PUSH
37958: LD_INT 4
37960: ARRAY
37961: IFFALSE 37965
// exit ;
37963: GO 38014
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37965: LD_VAR 0 2
37969: PUSH
37970: LD_INT 29
37972: PUSH
37973: LD_INT 30
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: IN
37980: PUSH
37981: LD_VAR 0 3
37985: PPUSH
37986: LD_VAR 0 4
37990: PPUSH
37991: LD_VAR 0 9
37995: PPUSH
37996: CALL_OW 440
38000: NOT
38001: AND
38002: IFFALSE 38006
// exit ;
38004: GO 38014
// result := true ;
38006: LD_ADDR_VAR 0 6
38010: PUSH
38011: LD_INT 1
38013: ST_TO_ADDR
// end ;
38014: LD_VAR 0 6
38018: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38019: LD_INT 0
38021: PPUSH
38022: PPUSH
38023: PPUSH
38024: PPUSH
38025: PPUSH
38026: PPUSH
38027: PPUSH
38028: PPUSH
38029: PPUSH
38030: PPUSH
38031: PPUSH
38032: PPUSH
38033: PPUSH
38034: PPUSH
38035: PPUSH
38036: PPUSH
38037: PPUSH
38038: PPUSH
38039: PPUSH
38040: PPUSH
38041: PPUSH
38042: PPUSH
38043: PPUSH
38044: PPUSH
38045: PPUSH
38046: PPUSH
38047: PPUSH
38048: PPUSH
38049: PPUSH
38050: PPUSH
38051: PPUSH
38052: PPUSH
38053: PPUSH
38054: PPUSH
38055: PPUSH
38056: PPUSH
38057: PPUSH
38058: PPUSH
38059: PPUSH
38060: PPUSH
38061: PPUSH
38062: PPUSH
38063: PPUSH
38064: PPUSH
38065: PPUSH
38066: PPUSH
38067: PPUSH
38068: PPUSH
38069: PPUSH
38070: PPUSH
38071: PPUSH
38072: PPUSH
38073: PPUSH
38074: PPUSH
38075: PPUSH
38076: PPUSH
38077: PPUSH
38078: PPUSH
// result = [ ] ;
38079: LD_ADDR_VAR 0 7
38083: PUSH
38084: EMPTY
38085: ST_TO_ADDR
// temp_list = [ ] ;
38086: LD_ADDR_VAR 0 9
38090: PUSH
38091: EMPTY
38092: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38093: LD_VAR 0 4
38097: PUSH
38098: LD_INT 0
38100: PUSH
38101: LD_INT 1
38103: PUSH
38104: LD_INT 2
38106: PUSH
38107: LD_INT 3
38109: PUSH
38110: LD_INT 4
38112: PUSH
38113: LD_INT 5
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: IN
38124: NOT
38125: PUSH
38126: LD_VAR 0 1
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: IN
38141: PUSH
38142: LD_VAR 0 5
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: LD_INT 2
38152: PUSH
38153: LD_INT 3
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: LIST
38160: IN
38161: NOT
38162: AND
38163: OR
38164: IFFALSE 38168
// exit ;
38166: GO 56559
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38168: LD_VAR 0 1
38172: PUSH
38173: LD_INT 6
38175: PUSH
38176: LD_INT 7
38178: PUSH
38179: LD_INT 8
38181: PUSH
38182: LD_INT 13
38184: PUSH
38185: LD_INT 12
38187: PUSH
38188: LD_INT 15
38190: PUSH
38191: LD_INT 11
38193: PUSH
38194: LD_INT 14
38196: PUSH
38197: LD_INT 10
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: IN
38211: IFFALSE 38221
// btype = b_lab ;
38213: LD_ADDR_VAR 0 1
38217: PUSH
38218: LD_INT 6
38220: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38221: LD_VAR 0 6
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: LD_INT 1
38231: PUSH
38232: LD_INT 2
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: IN
38240: NOT
38241: PUSH
38242: LD_VAR 0 1
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: LD_INT 1
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: LD_INT 3
38258: PUSH
38259: LD_INT 6
38261: PUSH
38262: LD_INT 36
38264: PUSH
38265: LD_INT 4
38267: PUSH
38268: LD_INT 5
38270: PUSH
38271: LD_INT 31
38273: PUSH
38274: LD_INT 32
38276: PUSH
38277: LD_INT 33
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: IN
38293: NOT
38294: PUSH
38295: LD_VAR 0 6
38299: PUSH
38300: LD_INT 1
38302: EQUAL
38303: AND
38304: OR
38305: PUSH
38306: LD_VAR 0 1
38310: PUSH
38311: LD_INT 2
38313: PUSH
38314: LD_INT 3
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: IN
38321: NOT
38322: PUSH
38323: LD_VAR 0 6
38327: PUSH
38328: LD_INT 2
38330: EQUAL
38331: AND
38332: OR
38333: IFFALSE 38343
// mode = 0 ;
38335: LD_ADDR_VAR 0 6
38339: PUSH
38340: LD_INT 0
38342: ST_TO_ADDR
// case mode of 0 :
38343: LD_VAR 0 6
38347: PUSH
38348: LD_INT 0
38350: DOUBLE
38351: EQUAL
38352: IFTRUE 38356
38354: GO 49809
38356: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38357: LD_ADDR_VAR 0 11
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: LD_INT 0
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 1
38395: PUSH
38396: LD_INT 1
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 1
38415: NEG
38416: PUSH
38417: LD_INT 0
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 1
38426: NEG
38427: PUSH
38428: LD_INT 1
38430: NEG
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: LD_INT 2
38442: NEG
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: LD_INT 2
38453: NEG
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 1
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: LD_INT 2
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: LD_INT 2
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: LD_INT 1
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: LD_INT 3
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: LD_INT 3
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 1
38523: NEG
38524: PUSH
38525: LD_INT 2
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38550: LD_ADDR_VAR 0 12
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: LD_INT 0
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: LD_INT 1
38570: NEG
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 1
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 1
38588: PUSH
38589: LD_INT 1
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 0
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 1
38608: NEG
38609: PUSH
38610: LD_INT 0
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 1
38619: NEG
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: LD_INT 1
38634: NEG
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 2
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 2
38652: PUSH
38653: LD_INT 1
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 1
38662: NEG
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 2
38673: NEG
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 2
38684: NEG
38685: PUSH
38686: LD_INT 1
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 2
38696: NEG
38697: PUSH
38698: LD_INT 1
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 3
38707: NEG
38708: PUSH
38709: LD_INT 0
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 3
38718: NEG
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38746: LD_ADDR_VAR 0 13
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 0
38763: PUSH
38764: LD_INT 1
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: LD_INT 0
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: NEG
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: LD_INT 2
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 2
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: LD_INT 2
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 2
38869: NEG
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 2
38881: NEG
38882: PUSH
38883: LD_INT 2
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 2
38893: NEG
38894: PUSH
38895: LD_INT 3
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 3
38905: NEG
38906: PUSH
38907: LD_INT 2
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 3
38917: NEG
38918: PUSH
38919: LD_INT 3
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38945: LD_ADDR_VAR 0 14
38949: PUSH
38950: LD_INT 0
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 1
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: LD_INT 1
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 1
39003: NEG
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: LD_INT 1
39018: NEG
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: LD_INT 2
39030: NEG
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: LD_INT 2
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 2
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: LD_INT 3
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 0
39103: PUSH
39104: LD_INT 3
39106: NEG
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: PUSH
39115: LD_INT 2
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39141: LD_ADDR_VAR 0 15
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: LD_INT 0
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 0
39158: PUSH
39159: LD_INT 1
39161: NEG
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: LD_INT 0
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 1
39210: NEG
39211: PUSH
39212: LD_INT 1
39214: NEG
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: LD_INT 1
39225: NEG
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 2
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 2
39243: PUSH
39244: LD_INT 1
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 2
39264: NEG
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 2
39275: NEG
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 2
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 3
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 3
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39334: LD_ADDR_VAR 0 16
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 1
39403: NEG
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: LD_INT 2
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 2
39427: PUSH
39428: LD_INT 1
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 2
39437: PUSH
39438: LD_INT 2
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 1
39447: PUSH
39448: LD_INT 2
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 2
39457: NEG
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 2
39469: NEG
39470: PUSH
39471: LD_INT 2
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 3
39481: PUSH
39482: LD_INT 2
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 3
39491: PUSH
39492: LD_INT 3
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 2
39501: PUSH
39502: LD_INT 3
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39527: LD_ADDR_VAR 0 17
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 0
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: LD_INT 1
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 1
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 1
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 1
39608: NEG
39609: PUSH
39610: LD_INT 2
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: LD_INT 2
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 2
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: LD_INT 2
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 1
39672: PUSH
39673: LD_INT 2
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: LD_INT 2
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 1
39692: NEG
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 2
39703: NEG
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 2
39714: NEG
39715: PUSH
39716: LD_INT 1
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 2
39726: NEG
39727: PUSH
39728: LD_INT 2
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39757: LD_ADDR_VAR 0 18
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: LD_INT 0
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: LD_INT 1
39777: NEG
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: LD_INT 0
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: LD_INT 0
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: NEG
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 1
39838: NEG
39839: PUSH
39840: LD_INT 2
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: LD_INT 2
39853: NEG
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 2
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 2
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 2
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 2
39956: NEG
39957: PUSH
39958: LD_INT 2
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39987: LD_ADDR_VAR 0 19
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: LD_INT 1
40007: NEG
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: PUSH
40016: LD_INT 0
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: NEG
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 0
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 1
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 2
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 2
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 2
40122: PUSH
40123: LD_INT 2
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: LD_INT 2
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 2
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 2
40163: NEG
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 2
40174: NEG
40175: PUSH
40176: LD_INT 1
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 2
40186: NEG
40187: PUSH
40188: LD_INT 2
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40217: LD_ADDR_VAR 0 20
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 1
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: LD_INT 2
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: LD_INT 2
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 1
40321: PUSH
40322: LD_INT 1
40324: NEG
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 2
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 2
40342: PUSH
40343: LD_INT 1
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 2
40352: PUSH
40353: LD_INT 2
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: LD_INT 2
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: LD_INT 2
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: LD_INT 1
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 2
40404: NEG
40405: PUSH
40406: LD_INT 1
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 2
40416: NEG
40417: PUSH
40418: LD_INT 2
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40447: LD_ADDR_VAR 0 21
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 1
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: LD_INT 1
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: LD_INT 2
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: LD_INT 2
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: LD_INT 1
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 2
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: LD_INT 1
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 2
40582: PUSH
40583: LD_INT 2
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: LD_INT 2
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: LD_INT 2
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 2
40623: NEG
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 2
40634: NEG
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 2
40646: NEG
40647: PUSH
40648: LD_INT 2
40650: NEG
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40677: LD_ADDR_VAR 0 22
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: LD_INT 1
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: LD_INT 1
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: LD_INT 2
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: LD_INT 2
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: LD_INT 1
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 2
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: LD_INT 2
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: LD_INT 2
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 2
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: NEG
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 2
40853: NEG
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 2
40864: NEG
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: LD_INT 2
40880: NEG
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40907: LD_ADDR_VAR 0 23
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: LD_INT 1
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: LD_INT 0
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: LD_INT 2
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 2
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: LD_INT 2
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 2
41083: NEG
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 2
41094: NEG
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: LD_INT 2
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: LD_INT 3
41122: NEG
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 1
41130: NEG
41131: PUSH
41132: LD_INT 3
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: LD_INT 2
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 2
41153: PUSH
41154: LD_INT 1
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41187: LD_ADDR_VAR 0 24
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 1
41245: NEG
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: LD_INT 1
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: NEG
41269: PUSH
41270: LD_INT 2
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 2
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: NEG
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 2
41374: NEG
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: LD_INT 2
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 2
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 2
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 3
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 3
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41463: LD_ADDR_VAR 0 25
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: LD_INT 1
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: LD_INT 1
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: LD_INT 2
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: LD_INT 2
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: PUSH
41599: LD_INT 2
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: LD_INT 2
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: LD_INT 2
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: NEG
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 2
41650: NEG
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 2
41662: NEG
41663: PUSH
41664: LD_INT 2
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 3
41674: PUSH
41675: LD_INT 1
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 3
41684: PUSH
41685: LD_INT 2
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 2
41694: PUSH
41695: LD_INT 3
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: LD_INT 3
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41737: LD_ADDR_VAR 0 26
41741: PUSH
41742: LD_INT 0
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 1
41765: PUSH
41766: LD_INT 0
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: LD_INT 1
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: LD_INT 2
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 2
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 2
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 2
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: LD_INT 2
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: LD_INT 2
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 2
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 2
41913: NEG
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 2
41924: NEG
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: LD_INT 2
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: LD_INT 3
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: LD_INT 3
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 2
41979: NEG
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42013: LD_ADDR_VAR 0 27
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: LD_INT 1
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: LD_INT 2
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 2
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: LD_INT 1
42120: NEG
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 2
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 2
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 0
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: NEG
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 2
42200: NEG
42201: PUSH
42202: LD_INT 1
42204: NEG
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 2
42212: NEG
42213: PUSH
42214: LD_INT 2
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: LD_INT 2
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 3
42246: NEG
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 3
42258: NEG
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42293: LD_ADDR_VAR 0 28
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: LD_INT 1
42366: NEG
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: LD_INT 2
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_INT 2
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 2
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 2
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: LD_INT 2
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: LD_INT 2
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 2
42469: NEG
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 2
42480: NEG
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: LD_INT 2
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 2
42504: NEG
42505: PUSH
42506: LD_INT 3
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: LD_INT 3
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 3
42528: NEG
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 3
42540: NEG
42541: PUSH
42542: LD_INT 2
42544: NEG
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42575: LD_ADDR_VAR 0 29
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 1
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: LD_INT 2
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: LD_INT 2
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 2
42741: NEG
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 2
42753: NEG
42754: PUSH
42755: LD_INT 2
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 2
42765: NEG
42766: PUSH
42767: LD_INT 3
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 2
42777: PUSH
42778: LD_INT 1
42780: NEG
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 3
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: PUSH
42799: LD_INT 3
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: LD_INT 2
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 3
42819: NEG
42820: PUSH
42821: LD_INT 2
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42854: LD_ADDR_VAR 0 30
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: LD_INT 2
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 2
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 2
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 2
42989: PUSH
42990: LD_INT 2
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: LD_INT 2
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 2
43020: NEG
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: LD_INT 3
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 3
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: LD_INT 3
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 2
43086: NEG
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 3
43097: NEG
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43132: LD_ADDR_VAR 0 31
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: LD_INT 2
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: LD_INT 2
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 2
43321: NEG
43322: PUSH
43323: LD_INT 3
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 3
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: LD_INT 3
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 1
43364: NEG
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 3
43375: NEG
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43410: LD_ADDR_VAR 0 32
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 2
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: NEG
43600: PUSH
43601: LD_INT 3
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 3
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 2
43632: PUSH
43633: LD_INT 3
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 2
43642: NEG
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 3
43653: NEG
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43688: LD_ADDR_VAR 0 33
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 2
43843: NEG
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 2
43854: NEG
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 2
43866: NEG
43867: PUSH
43868: LD_INT 2
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 2
43878: NEG
43879: PUSH
43880: LD_INT 3
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 3
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: LD_INT 3
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: LD_INT 2
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 3
43932: NEG
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43967: LD_ADDR_VAR 0 34
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 2
44134: NEG
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 3
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 3
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 2
44191: PUSH
44192: LD_INT 3
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 2
44201: NEG
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 3
44212: NEG
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44247: LD_ADDR_VAR 0 35
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 2
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44359: LD_ADDR_VAR 0 36
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44471: LD_ADDR_VAR 0 37
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44583: LD_ADDR_VAR 0 38
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: LD_INT 1
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 2
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44695: LD_ADDR_VAR 0 39
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: LD_INT 2
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 2
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44807: LD_ADDR_VAR 0 40
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44919: LD_ADDR_VAR 0 41
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 2
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 2
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 2
45074: NEG
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 2
45085: NEG
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: NEG
45110: PUSH
45111: LD_INT 3
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 3
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 3
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 3
45152: PUSH
45153: LD_INT 2
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 3
45162: PUSH
45163: LD_INT 3
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: LD_INT 3
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 3
45193: NEG
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 3
45204: NEG
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 3
45216: NEG
45217: PUSH
45218: LD_INT 2
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 3
45228: NEG
45229: PUSH
45230: LD_INT 3
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45269: LD_ADDR_VAR 0 42
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: LD_INT 2
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 2
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: LD_INT 2
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: LD_INT 3
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: LD_INT 3
45475: NEG
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: LD_INT 3
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: LD_INT 2
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 3
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 3
45515: PUSH
45516: LD_INT 3
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: LD_INT 3
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: LD_INT 3
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 3
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: LD_INT 2
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 3
45566: NEG
45567: PUSH
45568: LD_INT 2
45570: NEG
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 3
45578: NEG
45579: PUSH
45580: LD_INT 3
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45619: LD_ADDR_VAR 0 43
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 2
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 2
45785: NEG
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 2
45796: NEG
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 3
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: LD_INT 3
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 2
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 3
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 3
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 3
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: LD_INT 3
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: NEG
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 3
45915: NEG
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 3
45926: NEG
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45967: LD_ADDR_VAR 0 44
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 2
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 2
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: PUSH
46082: LD_INT 1
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: NEG
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 2
46133: NEG
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: NEG
46158: PUSH
46159: LD_INT 3
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 3
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 3
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 3
46200: PUSH
46201: LD_INT 2
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 3
46210: PUSH
46211: LD_INT 3
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 2
46220: PUSH
46221: LD_INT 3
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 3
46241: NEG
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 3
46252: NEG
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 3
46264: NEG
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 3
46276: NEG
46277: PUSH
46278: LD_INT 3
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46317: LD_ADDR_VAR 0 45
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: LD_INT 2
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: LD_INT 2
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 2
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 2
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: NEG
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 2
46495: NEG
46496: PUSH
46497: LD_INT 2
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 2
46507: NEG
46508: PUSH
46509: LD_INT 3
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: LD_INT 3
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: LD_INT 3
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: LD_INT 2
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 3
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 3
46563: PUSH
46564: LD_INT 3
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: LD_INT 3
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: LD_INT 3
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 3
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 3
46614: NEG
46615: PUSH
46616: LD_INT 2
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 3
46626: NEG
46627: PUSH
46628: LD_INT 3
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46667: LD_ADDR_VAR 0 46
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: LD_INT 2
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 2
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: LD_INT 3
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: LD_INT 3
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 3
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 3
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: LD_INT 3
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: LD_INT 3
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: LD_INT 2
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 3
46963: NEG
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 3
46974: NEG
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47015: LD_ADDR_VAR 0 47
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 2
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: NEG
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47166: LD_ADDR_VAR 0 48
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: LD_INT 1
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: LD_INT 2
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47313: LD_ADDR_VAR 0 49
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 2
47425: PUSH
47426: LD_INT 2
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 2
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47457: LD_ADDR_VAR 0 50
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: LD_INT 2
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: LD_INT 2
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: LD_INT 2
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47601: LD_ADDR_VAR 0 51
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 2
47724: NEG
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47748: LD_ADDR_VAR 0 52
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: LD_INT 2
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 2
47863: NEG
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 2
47875: NEG
47876: PUSH
47877: LD_INT 2
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47899: LD_ADDR_VAR 0 53
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: LD_INT 2
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 2
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 2
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 2
48034: PUSH
48035: LD_INT 2
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: LD_INT 2
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: LD_INT 2
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 2
48098: NEG
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48129: LD_ADDR_VAR 0 54
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 2
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 2
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: LD_INT 2
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: LD_INT 2
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: LD_INT 2
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 2
48316: NEG
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 2
48328: NEG
48329: PUSH
48330: LD_INT 2
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48359: LD_ADDR_VAR 0 55
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 2
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 2
48494: PUSH
48495: LD_INT 2
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: LD_INT 2
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 2
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 2
48558: NEG
48559: PUSH
48560: LD_INT 2
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48589: LD_ADDR_VAR 0 56
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: LD_INT 2
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: LD_INT 2
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: LD_INT 2
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 2
48788: NEG
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48819: LD_ADDR_VAR 0 57
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: LD_INT 2
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: LD_INT 2
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 2
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 2
49018: NEG
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49049: LD_ADDR_VAR 0 58
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: LD_INT 2
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 2
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: NEG
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: LD_INT 2
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49279: LD_ADDR_VAR 0 59
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49367: LD_ADDR_VAR 0 60
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49455: LD_ADDR_VAR 0 61
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49543: LD_ADDR_VAR 0 62
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49631: LD_ADDR_VAR 0 63
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49719: LD_ADDR_VAR 0 64
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: ST_TO_ADDR
// end ; 1 :
49807: GO 55704
49809: LD_INT 1
49811: DOUBLE
49812: EQUAL
49813: IFTRUE 49817
49815: GO 52440
49817: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49818: LD_ADDR_VAR 0 11
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: LD_INT 3
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 3
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: LIST
49861: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49862: LD_ADDR_VAR 0 12
49866: PUSH
49867: LD_INT 2
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 3
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 3
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: LIST
49902: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49903: LD_ADDR_VAR 0 13
49907: PUSH
49908: LD_INT 3
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 3
49920: PUSH
49921: LD_INT 3
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 2
49930: PUSH
49931: LD_INT 3
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: LIST
49942: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49943: LD_ADDR_VAR 0 14
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: LD_INT 3
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: LIST
49983: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49984: LD_ADDR_VAR 0 15
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 3
50002: NEG
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 3
50013: NEG
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: LIST
50027: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50028: LD_ADDR_VAR 0 16
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: LD_INT 3
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 3
50047: NEG
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 3
50059: NEG
50060: PUSH
50061: LD_INT 3
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: LIST
50073: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50074: LD_ADDR_VAR 0 17
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: LD_INT 3
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: LD_INT 3
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: LIST
50117: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50118: LD_ADDR_VAR 0 18
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 3
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 3
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: LIST
50158: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50159: LD_ADDR_VAR 0 19
50163: PUSH
50164: LD_INT 3
50166: PUSH
50167: LD_INT 2
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 3
50176: PUSH
50177: LD_INT 3
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: LD_INT 3
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: LIST
50198: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50199: LD_ADDR_VAR 0 20
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: LD_INT 3
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: LD_INT 3
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: LIST
50239: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50240: LD_ADDR_VAR 0 21
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 3
50258: NEG
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 3
50269: NEG
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: LIST
50283: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50284: LD_ADDR_VAR 0 22
50288: PUSH
50289: LD_INT 2
50291: NEG
50292: PUSH
50293: LD_INT 3
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 3
50303: NEG
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 3
50315: NEG
50316: PUSH
50317: LD_INT 3
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: LIST
50329: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50330: LD_ADDR_VAR 0 23
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 3
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: LD_INT 4
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: LD_INT 3
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: LIST
50373: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50374: LD_ADDR_VAR 0 24
50378: PUSH
50379: LD_INT 3
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 3
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 4
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: LIST
50414: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50415: LD_ADDR_VAR 0 25
50419: PUSH
50420: LD_INT 3
50422: PUSH
50423: LD_INT 3
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 4
50432: PUSH
50433: LD_INT 3
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 3
50442: PUSH
50443: LD_INT 4
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: LIST
50454: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50455: LD_ADDR_VAR 0 26
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: LD_INT 3
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: LD_INT 4
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: LD_INT 3
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: LIST
50495: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50496: LD_ADDR_VAR 0 27
50500: PUSH
50501: LD_INT 3
50503: NEG
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 3
50514: NEG
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 4
50525: NEG
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: LIST
50539: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50540: LD_ADDR_VAR 0 28
50544: PUSH
50545: LD_INT 3
50547: NEG
50548: PUSH
50549: LD_INT 3
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 3
50559: NEG
50560: PUSH
50561: LD_INT 4
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 4
50571: NEG
50572: PUSH
50573: LD_INT 3
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: LIST
50585: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50586: LD_ADDR_VAR 0 29
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: LD_INT 3
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: LD_INT 3
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 2
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: LD_INT 4
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: LD_INT 4
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: LD_INT 3
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 5
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: LD_INT 5
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: LD_INT 4
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: LD_INT 6
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 6
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 5
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50741: LD_ADDR_VAR 0 30
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: LD_INT 1
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 3
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 3
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 3
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 4
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 4
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 4
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 5
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 5
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 5
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 6
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 6
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50884: LD_ADDR_VAR 0 31
50888: PUSH
50889: LD_INT 3
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 3
50901: PUSH
50902: LD_INT 3
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: LD_INT 3
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 4
50921: PUSH
50922: LD_INT 3
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 4
50931: PUSH
50932: LD_INT 4
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: PUSH
50942: LD_INT 4
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 5
50951: PUSH
50952: LD_INT 4
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 5
50961: PUSH
50962: LD_INT 5
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 4
50971: PUSH
50972: LD_INT 5
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 6
50981: PUSH
50982: LD_INT 5
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 6
50991: PUSH
50992: LD_INT 6
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 5
51001: PUSH
51002: LD_INT 6
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51023: LD_ADDR_VAR 0 32
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: LD_INT 3
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 3
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: LD_INT 4
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: LD_INT 4
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: LD_INT 3
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: LD_INT 5
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 5
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: LD_INT 4
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: LD_INT 6
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 6
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: LD_INT 5
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51166: LD_ADDR_VAR 0 33
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 3
51184: NEG
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 3
51195: NEG
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 3
51207: NEG
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 4
51218: NEG
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 4
51229: NEG
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 4
51241: NEG
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 5
51252: NEG
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 5
51263: NEG
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 5
51275: NEG
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 6
51286: NEG
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 6
51297: NEG
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51321: LD_ADDR_VAR 0 34
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: LD_INT 3
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 3
51340: NEG
51341: PUSH
51342: LD_INT 2
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 3
51352: NEG
51353: PUSH
51354: LD_INT 3
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 3
51364: NEG
51365: PUSH
51366: LD_INT 4
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 4
51376: NEG
51377: PUSH
51378: LD_INT 3
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 4
51388: NEG
51389: PUSH
51390: LD_INT 4
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 4
51400: NEG
51401: PUSH
51402: LD_INT 5
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 5
51412: NEG
51413: PUSH
51414: LD_INT 4
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 5
51424: NEG
51425: PUSH
51426: LD_INT 5
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 5
51436: NEG
51437: PUSH
51438: LD_INT 6
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 6
51448: NEG
51449: PUSH
51450: LD_INT 5
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 6
51460: NEG
51461: PUSH
51462: LD_INT 6
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51484: LD_ADDR_VAR 0 41
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: LD_INT 2
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: LD_INT 3
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: LD_INT 2
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: LIST
51527: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51528: LD_ADDR_VAR 0 42
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 3
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: LIST
51568: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51569: LD_ADDR_VAR 0 43
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 2
51596: PUSH
51597: LD_INT 3
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: LIST
51608: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51609: LD_ADDR_VAR 0 44
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: LD_INT 3
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: LD_INT 2
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: LIST
51649: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51650: LD_ADDR_VAR 0 45
51654: PUSH
51655: LD_INT 2
51657: NEG
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: NEG
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: NEG
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: LIST
51693: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51694: LD_ADDR_VAR 0 46
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: LD_INT 2
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: LD_INT 3
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 3
51725: NEG
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: LIST
51739: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51740: LD_ADDR_VAR 0 47
51744: PUSH
51745: LD_INT 2
51747: NEG
51748: PUSH
51749: LD_INT 3
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: LD_INT 3
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51773: LD_ADDR_VAR 0 48
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51804: LD_ADDR_VAR 0 49
51808: PUSH
51809: LD_INT 3
51811: PUSH
51812: LD_INT 1
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 3
51821: PUSH
51822: LD_INT 2
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51833: LD_ADDR_VAR 0 50
51837: PUSH
51838: LD_INT 2
51840: PUSH
51841: LD_INT 3
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: LD_INT 3
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51862: LD_ADDR_VAR 0 51
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: LD_INT 2
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51893: LD_ADDR_VAR 0 52
51897: PUSH
51898: LD_INT 3
51900: NEG
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 3
51912: NEG
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51926: LD_ADDR_VAR 0 53
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: LD_INT 3
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 3
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: LIST
51969: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51970: LD_ADDR_VAR 0 54
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 3
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: LIST
52010: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52011: LD_ADDR_VAR 0 55
52015: PUSH
52016: LD_INT 3
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 3
52028: PUSH
52029: LD_INT 3
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: LD_INT 3
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: LIST
52050: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52051: LD_ADDR_VAR 0 56
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: LD_INT 3
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 3
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: LIST
52091: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52092: LD_ADDR_VAR 0 57
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 3
52110: NEG
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 3
52121: NEG
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: LIST
52135: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52136: LD_ADDR_VAR 0 58
52140: PUSH
52141: LD_INT 2
52143: NEG
52144: PUSH
52145: LD_INT 3
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 3
52155: NEG
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 3
52167: NEG
52168: PUSH
52169: LD_INT 3
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: LIST
52181: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52182: LD_ADDR_VAR 0 59
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: LD_INT 2
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: LD_INT 2
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: LIST
52225: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52226: LD_ADDR_VAR 0 60
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: LIST
52266: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52267: LD_ADDR_VAR 0 61
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: LIST
52306: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52307: LD_ADDR_VAR 0 62
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: LD_INT 2
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: LD_INT 2
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: LIST
52347: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52348: LD_ADDR_VAR 0 63
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52392: LD_ADDR_VAR 0 64
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: LD_INT 2
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 2
52411: NEG
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: LD_INT 2
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: LIST
52437: ST_TO_ADDR
// end ; 2 :
52438: GO 55704
52440: LD_INT 2
52442: DOUBLE
52443: EQUAL
52444: IFTRUE 52448
52446: GO 55703
52448: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52449: LD_ADDR_VAR 0 29
52453: PUSH
52454: LD_INT 4
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 4
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 5
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 5
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 4
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 3
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 3
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 3
52528: PUSH
52529: LD_INT 2
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 5
52539: PUSH
52540: LD_INT 2
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 3
52549: PUSH
52550: LD_INT 3
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 3
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 4
52569: PUSH
52570: LD_INT 3
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 4
52579: PUSH
52580: LD_INT 4
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 3
52589: PUSH
52590: LD_INT 4
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: LD_INT 3
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 2
52609: PUSH
52610: LD_INT 2
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 4
52619: PUSH
52620: LD_INT 2
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: PUSH
52630: LD_INT 4
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 4
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: LD_INT 3
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: LD_INT 4
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: LD_INT 5
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: LD_INT 5
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: LD_INT 4
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: LD_INT 3
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 2
52711: PUSH
52712: LD_INT 5
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 2
52721: NEG
52722: PUSH
52723: LD_INT 3
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 3
52732: NEG
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 3
52743: NEG
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 2
52755: NEG
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: NEG
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 3
52777: NEG
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 4
52788: NEG
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 4
52799: NEG
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 4
52811: NEG
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: LD_INT 2
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 4
52834: NEG
52835: PUSH
52836: LD_INT 4
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 4
52846: NEG
52847: PUSH
52848: LD_INT 5
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 3
52858: NEG
52859: PUSH
52860: LD_INT 4
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 3
52870: NEG
52871: PUSH
52872: LD_INT 3
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 4
52882: NEG
52883: PUSH
52884: LD_INT 3
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 5
52894: NEG
52895: PUSH
52896: LD_INT 4
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 5
52906: NEG
52907: PUSH
52908: LD_INT 5
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 3
52918: NEG
52919: PUSH
52920: LD_INT 5
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 5
52930: NEG
52931: PUSH
52932: LD_INT 3
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52987: LD_ADDR_VAR 0 30
52991: PUSH
52992: LD_INT 4
52994: PUSH
52995: LD_INT 4
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 4
53004: PUSH
53005: LD_INT 3
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 5
53014: PUSH
53015: LD_INT 4
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 5
53024: PUSH
53025: LD_INT 5
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 4
53034: PUSH
53035: LD_INT 5
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 3
53044: PUSH
53045: LD_INT 4
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 3
53054: PUSH
53055: LD_INT 3
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 5
53064: PUSH
53065: LD_INT 3
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 3
53074: PUSH
53075: LD_INT 5
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: LD_INT 3
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 2
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 3
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: LD_INT 4
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: LD_INT 4
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: LD_INT 3
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: LD_INT 2
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: LD_INT 4
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: NEG
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 4
53177: NEG
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 4
53188: NEG
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 3
53200: NEG
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 3
53211: NEG
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 4
53222: NEG
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 5
53233: NEG
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 5
53244: NEG
53245: PUSH
53246: LD_INT 1
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 5
53256: NEG
53257: PUSH
53258: LD_INT 2
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 3
53268: NEG
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 3
53279: NEG
53280: PUSH
53281: LD_INT 3
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 3
53291: NEG
53292: PUSH
53293: LD_INT 4
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: NEG
53304: PUSH
53305: LD_INT 3
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 3
53327: NEG
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 4
53339: NEG
53340: PUSH
53341: LD_INT 3
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 4
53351: NEG
53352: PUSH
53353: LD_INT 4
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: LD_INT 4
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 4
53375: NEG
53376: PUSH
53377: LD_INT 2
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: LD_INT 4
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: LD_INT 5
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 4
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: LD_INT 3
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 3
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 4
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 5
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 2
53466: PUSH
53467: LD_INT 3
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: NEG
53478: PUSH
53479: LD_INT 5
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53534: LD_ADDR_VAR 0 31
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 4
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 3
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: LD_INT 4
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: LD_INT 5
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: LD_INT 5
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 4
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: LD_INT 3
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: PUSH
53614: LD_INT 5
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: LD_INT 3
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 3
53634: NEG
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 3
53645: NEG
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 2
53657: NEG
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 2
53668: NEG
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 3
53679: NEG
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 4
53690: NEG
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 4
53701: NEG
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 4
53713: NEG
53714: PUSH
53715: LD_INT 2
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 2
53725: NEG
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 4
53736: NEG
53737: PUSH
53738: LD_INT 4
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 4
53748: NEG
53749: PUSH
53750: LD_INT 5
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 3
53760: NEG
53761: PUSH
53762: LD_INT 4
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 3
53772: NEG
53773: PUSH
53774: LD_INT 3
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 4
53784: NEG
53785: PUSH
53786: LD_INT 3
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 5
53796: NEG
53797: PUSH
53798: LD_INT 4
53800: NEG
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 5
53808: NEG
53809: PUSH
53810: LD_INT 5
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 3
53820: NEG
53821: PUSH
53822: LD_INT 5
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 5
53832: NEG
53833: PUSH
53834: LD_INT 3
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: LD_INT 3
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 4
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 3
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 2
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: LD_INT 3
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: LD_INT 4
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: LD_INT 4
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 4
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 4
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 5
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 5
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 4
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 3
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 3
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 3
54018: PUSH
54019: LD_INT 2
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 5
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54084: LD_ADDR_VAR 0 32
54088: PUSH
54089: LD_INT 4
54091: NEG
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 4
54102: NEG
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 3
54114: NEG
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 3
54125: NEG
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 4
54136: NEG
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 5
54147: NEG
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 5
54158: NEG
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 5
54170: NEG
54171: PUSH
54172: LD_INT 2
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 3
54182: NEG
54183: PUSH
54184: LD_INT 2
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 3
54193: NEG
54194: PUSH
54195: LD_INT 3
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 3
54205: NEG
54206: PUSH
54207: LD_INT 4
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: LD_INT 3
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 2
54229: NEG
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 3
54241: NEG
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 4
54253: NEG
54254: PUSH
54255: LD_INT 3
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 4
54265: NEG
54266: PUSH
54267: LD_INT 4
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: NEG
54278: PUSH
54279: LD_INT 4
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 4
54289: NEG
54290: PUSH
54291: LD_INT 2
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: LD_INT 4
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 5
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: LD_INT 4
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 3
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 3
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: LD_INT 4
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: LD_INT 5
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: PUSH
54381: LD_INT 3
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: LD_INT 5
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 3
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 3
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 4
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 4
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 3
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 4
54486: PUSH
54487: LD_INT 2
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 4
54496: PUSH
54497: LD_INT 4
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 4
54506: PUSH
54507: LD_INT 3
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 5
54516: PUSH
54517: LD_INT 4
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 5
54526: PUSH
54527: LD_INT 5
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 4
54536: PUSH
54537: LD_INT 5
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 3
54546: PUSH
54547: LD_INT 4
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 3
54556: PUSH
54557: LD_INT 3
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 5
54566: PUSH
54567: LD_INT 3
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 3
54576: PUSH
54577: LD_INT 5
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54631: LD_ADDR_VAR 0 33
54635: PUSH
54636: LD_INT 4
54638: NEG
54639: PUSH
54640: LD_INT 4
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 4
54650: NEG
54651: PUSH
54652: LD_INT 5
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 3
54662: NEG
54663: PUSH
54664: LD_INT 4
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 3
54674: NEG
54675: PUSH
54676: LD_INT 3
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 4
54686: NEG
54687: PUSH
54688: LD_INT 3
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 5
54698: NEG
54699: PUSH
54700: LD_INT 4
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 5
54710: NEG
54711: PUSH
54712: LD_INT 5
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 3
54722: NEG
54723: PUSH
54724: LD_INT 5
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 5
54734: NEG
54735: PUSH
54736: LD_INT 3
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: LD_INT 3
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 4
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 3
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: LD_INT 2
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: LD_INT 3
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: LD_INT 4
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 2
54836: NEG
54837: PUSH
54838: LD_INT 4
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 4
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 4
54858: PUSH
54859: LD_INT 1
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 5
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 5
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 4
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 3
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 3
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 3
54920: PUSH
54921: LD_INT 2
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 5
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 3
54941: PUSH
54942: LD_INT 3
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 3
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 4
54961: PUSH
54962: LD_INT 3
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 4
54971: PUSH
54972: LD_INT 4
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 3
54981: PUSH
54982: LD_INT 4
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: PUSH
54992: LD_INT 3
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 2
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 4
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: LD_INT 4
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: LD_INT 4
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: LD_INT 3
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: LD_INT 4
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: LD_INT 5
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 5
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: LD_INT 4
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: LD_INT 3
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: LD_INT 5
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: NEG
55114: PUSH
55115: LD_INT 3
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55169: LD_ADDR_VAR 0 34
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: LD_INT 4
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: LD_INT 5
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: LD_INT 4
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: LD_INT 3
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: LD_INT 3
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 4
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: LD_INT 5
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: LD_INT 3
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: NEG
55267: PUSH
55268: LD_INT 5
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 3
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 3
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 4
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 4
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 3
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 2
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: LD_INT 2
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 4
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 4
55371: PUSH
55372: LD_INT 4
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 4
55381: PUSH
55382: LD_INT 3
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 5
55391: PUSH
55392: LD_INT 4
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 5
55401: PUSH
55402: LD_INT 5
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 4
55411: PUSH
55412: LD_INT 5
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 3
55421: PUSH
55422: LD_INT 4
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 3
55431: PUSH
55432: LD_INT 3
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 5
55441: PUSH
55442: LD_INT 3
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 3
55451: PUSH
55452: LD_INT 5
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: LD_INT 3
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: LD_INT 3
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: LD_INT 4
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 4
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: LD_INT 3
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: LD_INT 4
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 2
55543: NEG
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 4
55554: NEG
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 4
55565: NEG
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 3
55577: NEG
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 3
55588: NEG
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 4
55599: NEG
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 5
55610: NEG
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 5
55621: NEG
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 5
55633: NEG
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 3
55645: NEG
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: ST_TO_ADDR
// end ; end ;
55701: GO 55704
55703: POP
// case btype of b_depot , b_warehouse :
55704: LD_VAR 0 1
55708: PUSH
55709: LD_INT 0
55711: DOUBLE
55712: EQUAL
55713: IFTRUE 55723
55715: LD_INT 1
55717: DOUBLE
55718: EQUAL
55719: IFTRUE 55723
55721: GO 55924
55723: POP
// case nation of nation_american :
55724: LD_VAR 0 5
55728: PUSH
55729: LD_INT 1
55731: DOUBLE
55732: EQUAL
55733: IFTRUE 55737
55735: GO 55793
55737: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55738: LD_ADDR_VAR 0 9
55742: PUSH
55743: LD_VAR 0 11
55747: PUSH
55748: LD_VAR 0 12
55752: PUSH
55753: LD_VAR 0 13
55757: PUSH
55758: LD_VAR 0 14
55762: PUSH
55763: LD_VAR 0 15
55767: PUSH
55768: LD_VAR 0 16
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: PUSH
55781: LD_VAR 0 4
55785: PUSH
55786: LD_INT 1
55788: PLUS
55789: ARRAY
55790: ST_TO_ADDR
55791: GO 55922
55793: LD_INT 2
55795: DOUBLE
55796: EQUAL
55797: IFTRUE 55801
55799: GO 55857
55801: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55802: LD_ADDR_VAR 0 9
55806: PUSH
55807: LD_VAR 0 17
55811: PUSH
55812: LD_VAR 0 18
55816: PUSH
55817: LD_VAR 0 19
55821: PUSH
55822: LD_VAR 0 20
55826: PUSH
55827: LD_VAR 0 21
55831: PUSH
55832: LD_VAR 0 22
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: PUSH
55845: LD_VAR 0 4
55849: PUSH
55850: LD_INT 1
55852: PLUS
55853: ARRAY
55854: ST_TO_ADDR
55855: GO 55922
55857: LD_INT 3
55859: DOUBLE
55860: EQUAL
55861: IFTRUE 55865
55863: GO 55921
55865: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55866: LD_ADDR_VAR 0 9
55870: PUSH
55871: LD_VAR 0 23
55875: PUSH
55876: LD_VAR 0 24
55880: PUSH
55881: LD_VAR 0 25
55885: PUSH
55886: LD_VAR 0 26
55890: PUSH
55891: LD_VAR 0 27
55895: PUSH
55896: LD_VAR 0 28
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: PUSH
55909: LD_VAR 0 4
55913: PUSH
55914: LD_INT 1
55916: PLUS
55917: ARRAY
55918: ST_TO_ADDR
55919: GO 55922
55921: POP
55922: GO 56477
55924: LD_INT 2
55926: DOUBLE
55927: EQUAL
55928: IFTRUE 55938
55930: LD_INT 3
55932: DOUBLE
55933: EQUAL
55934: IFTRUE 55938
55936: GO 55994
55938: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55939: LD_ADDR_VAR 0 9
55943: PUSH
55944: LD_VAR 0 29
55948: PUSH
55949: LD_VAR 0 30
55953: PUSH
55954: LD_VAR 0 31
55958: PUSH
55959: LD_VAR 0 32
55963: PUSH
55964: LD_VAR 0 33
55968: PUSH
55969: LD_VAR 0 34
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: PUSH
55982: LD_VAR 0 4
55986: PUSH
55987: LD_INT 1
55989: PLUS
55990: ARRAY
55991: ST_TO_ADDR
55992: GO 56477
55994: LD_INT 16
55996: DOUBLE
55997: EQUAL
55998: IFTRUE 56056
56000: LD_INT 17
56002: DOUBLE
56003: EQUAL
56004: IFTRUE 56056
56006: LD_INT 18
56008: DOUBLE
56009: EQUAL
56010: IFTRUE 56056
56012: LD_INT 19
56014: DOUBLE
56015: EQUAL
56016: IFTRUE 56056
56018: LD_INT 22
56020: DOUBLE
56021: EQUAL
56022: IFTRUE 56056
56024: LD_INT 20
56026: DOUBLE
56027: EQUAL
56028: IFTRUE 56056
56030: LD_INT 21
56032: DOUBLE
56033: EQUAL
56034: IFTRUE 56056
56036: LD_INT 23
56038: DOUBLE
56039: EQUAL
56040: IFTRUE 56056
56042: LD_INT 24
56044: DOUBLE
56045: EQUAL
56046: IFTRUE 56056
56048: LD_INT 25
56050: DOUBLE
56051: EQUAL
56052: IFTRUE 56056
56054: GO 56112
56056: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56057: LD_ADDR_VAR 0 9
56061: PUSH
56062: LD_VAR 0 35
56066: PUSH
56067: LD_VAR 0 36
56071: PUSH
56072: LD_VAR 0 37
56076: PUSH
56077: LD_VAR 0 38
56081: PUSH
56082: LD_VAR 0 39
56086: PUSH
56087: LD_VAR 0 40
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: PUSH
56100: LD_VAR 0 4
56104: PUSH
56105: LD_INT 1
56107: PLUS
56108: ARRAY
56109: ST_TO_ADDR
56110: GO 56477
56112: LD_INT 6
56114: DOUBLE
56115: EQUAL
56116: IFTRUE 56168
56118: LD_INT 7
56120: DOUBLE
56121: EQUAL
56122: IFTRUE 56168
56124: LD_INT 8
56126: DOUBLE
56127: EQUAL
56128: IFTRUE 56168
56130: LD_INT 13
56132: DOUBLE
56133: EQUAL
56134: IFTRUE 56168
56136: LD_INT 12
56138: DOUBLE
56139: EQUAL
56140: IFTRUE 56168
56142: LD_INT 15
56144: DOUBLE
56145: EQUAL
56146: IFTRUE 56168
56148: LD_INT 11
56150: DOUBLE
56151: EQUAL
56152: IFTRUE 56168
56154: LD_INT 14
56156: DOUBLE
56157: EQUAL
56158: IFTRUE 56168
56160: LD_INT 10
56162: DOUBLE
56163: EQUAL
56164: IFTRUE 56168
56166: GO 56224
56168: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56169: LD_ADDR_VAR 0 9
56173: PUSH
56174: LD_VAR 0 41
56178: PUSH
56179: LD_VAR 0 42
56183: PUSH
56184: LD_VAR 0 43
56188: PUSH
56189: LD_VAR 0 44
56193: PUSH
56194: LD_VAR 0 45
56198: PUSH
56199: LD_VAR 0 46
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: PUSH
56212: LD_VAR 0 4
56216: PUSH
56217: LD_INT 1
56219: PLUS
56220: ARRAY
56221: ST_TO_ADDR
56222: GO 56477
56224: LD_INT 36
56226: DOUBLE
56227: EQUAL
56228: IFTRUE 56232
56230: GO 56288
56232: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56233: LD_ADDR_VAR 0 9
56237: PUSH
56238: LD_VAR 0 47
56242: PUSH
56243: LD_VAR 0 48
56247: PUSH
56248: LD_VAR 0 49
56252: PUSH
56253: LD_VAR 0 50
56257: PUSH
56258: LD_VAR 0 51
56262: PUSH
56263: LD_VAR 0 52
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: PUSH
56276: LD_VAR 0 4
56280: PUSH
56281: LD_INT 1
56283: PLUS
56284: ARRAY
56285: ST_TO_ADDR
56286: GO 56477
56288: LD_INT 4
56290: DOUBLE
56291: EQUAL
56292: IFTRUE 56314
56294: LD_INT 5
56296: DOUBLE
56297: EQUAL
56298: IFTRUE 56314
56300: LD_INT 34
56302: DOUBLE
56303: EQUAL
56304: IFTRUE 56314
56306: LD_INT 37
56308: DOUBLE
56309: EQUAL
56310: IFTRUE 56314
56312: GO 56370
56314: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56315: LD_ADDR_VAR 0 9
56319: PUSH
56320: LD_VAR 0 53
56324: PUSH
56325: LD_VAR 0 54
56329: PUSH
56330: LD_VAR 0 55
56334: PUSH
56335: LD_VAR 0 56
56339: PUSH
56340: LD_VAR 0 57
56344: PUSH
56345: LD_VAR 0 58
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: PUSH
56358: LD_VAR 0 4
56362: PUSH
56363: LD_INT 1
56365: PLUS
56366: ARRAY
56367: ST_TO_ADDR
56368: GO 56477
56370: LD_INT 31
56372: DOUBLE
56373: EQUAL
56374: IFTRUE 56420
56376: LD_INT 32
56378: DOUBLE
56379: EQUAL
56380: IFTRUE 56420
56382: LD_INT 33
56384: DOUBLE
56385: EQUAL
56386: IFTRUE 56420
56388: LD_INT 27
56390: DOUBLE
56391: EQUAL
56392: IFTRUE 56420
56394: LD_INT 26
56396: DOUBLE
56397: EQUAL
56398: IFTRUE 56420
56400: LD_INT 28
56402: DOUBLE
56403: EQUAL
56404: IFTRUE 56420
56406: LD_INT 29
56408: DOUBLE
56409: EQUAL
56410: IFTRUE 56420
56412: LD_INT 30
56414: DOUBLE
56415: EQUAL
56416: IFTRUE 56420
56418: GO 56476
56420: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56421: LD_ADDR_VAR 0 9
56425: PUSH
56426: LD_VAR 0 59
56430: PUSH
56431: LD_VAR 0 60
56435: PUSH
56436: LD_VAR 0 61
56440: PUSH
56441: LD_VAR 0 62
56445: PUSH
56446: LD_VAR 0 63
56450: PUSH
56451: LD_VAR 0 64
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: PUSH
56464: LD_VAR 0 4
56468: PUSH
56469: LD_INT 1
56471: PLUS
56472: ARRAY
56473: ST_TO_ADDR
56474: GO 56477
56476: POP
// temp_list2 = [ ] ;
56477: LD_ADDR_VAR 0 10
56481: PUSH
56482: EMPTY
56483: ST_TO_ADDR
// for i in temp_list do
56484: LD_ADDR_VAR 0 8
56488: PUSH
56489: LD_VAR 0 9
56493: PUSH
56494: FOR_IN
56495: IFFALSE 56547
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56497: LD_ADDR_VAR 0 10
56501: PUSH
56502: LD_VAR 0 10
56506: PUSH
56507: LD_VAR 0 8
56511: PUSH
56512: LD_INT 1
56514: ARRAY
56515: PUSH
56516: LD_VAR 0 2
56520: PLUS
56521: PUSH
56522: LD_VAR 0 8
56526: PUSH
56527: LD_INT 2
56529: ARRAY
56530: PUSH
56531: LD_VAR 0 3
56535: PLUS
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: EMPTY
56542: LIST
56543: ADD
56544: ST_TO_ADDR
56545: GO 56494
56547: POP
56548: POP
// result = temp_list2 ;
56549: LD_ADDR_VAR 0 7
56553: PUSH
56554: LD_VAR 0 10
56558: ST_TO_ADDR
// end ;
56559: LD_VAR 0 7
56563: RET
// export function EnemyInRange ( unit , dist ) ; begin
56564: LD_INT 0
56566: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56567: LD_ADDR_VAR 0 3
56571: PUSH
56572: LD_VAR 0 1
56576: PPUSH
56577: CALL_OW 255
56581: PPUSH
56582: LD_VAR 0 1
56586: PPUSH
56587: CALL_OW 250
56591: PPUSH
56592: LD_VAR 0 1
56596: PPUSH
56597: CALL_OW 251
56601: PPUSH
56602: LD_VAR 0 2
56606: PPUSH
56607: CALL 30365 0 4
56611: PUSH
56612: LD_INT 4
56614: ARRAY
56615: ST_TO_ADDR
// end ;
56616: LD_VAR 0 3
56620: RET
// export function PlayerSeeMe ( unit ) ; begin
56621: LD_INT 0
56623: PPUSH
// result := See ( your_side , unit ) ;
56624: LD_ADDR_VAR 0 2
56628: PUSH
56629: LD_OWVAR 2
56633: PPUSH
56634: LD_VAR 0 1
56638: PPUSH
56639: CALL_OW 292
56643: ST_TO_ADDR
// end ;
56644: LD_VAR 0 2
56648: RET
// export function ReverseDir ( unit ) ; begin
56649: LD_INT 0
56651: PPUSH
// if not unit then
56652: LD_VAR 0 1
56656: NOT
56657: IFFALSE 56661
// exit ;
56659: GO 56684
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56661: LD_ADDR_VAR 0 2
56665: PUSH
56666: LD_VAR 0 1
56670: PPUSH
56671: CALL_OW 254
56675: PUSH
56676: LD_INT 3
56678: PLUS
56679: PUSH
56680: LD_INT 6
56682: MOD
56683: ST_TO_ADDR
// end ;
56684: LD_VAR 0 2
56688: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56689: LD_INT 0
56691: PPUSH
56692: PPUSH
56693: PPUSH
56694: PPUSH
56695: PPUSH
// if not hexes then
56696: LD_VAR 0 2
56700: NOT
56701: IFFALSE 56705
// exit ;
56703: GO 56853
// dist := 9999 ;
56705: LD_ADDR_VAR 0 5
56709: PUSH
56710: LD_INT 9999
56712: ST_TO_ADDR
// for i = 1 to hexes do
56713: LD_ADDR_VAR 0 4
56717: PUSH
56718: DOUBLE
56719: LD_INT 1
56721: DEC
56722: ST_TO_ADDR
56723: LD_VAR 0 2
56727: PUSH
56728: FOR_TO
56729: IFFALSE 56841
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56731: LD_VAR 0 1
56735: PPUSH
56736: LD_VAR 0 2
56740: PUSH
56741: LD_VAR 0 4
56745: ARRAY
56746: PUSH
56747: LD_INT 1
56749: ARRAY
56750: PPUSH
56751: LD_VAR 0 2
56755: PUSH
56756: LD_VAR 0 4
56760: ARRAY
56761: PUSH
56762: LD_INT 2
56764: ARRAY
56765: PPUSH
56766: CALL_OW 297
56770: PUSH
56771: LD_VAR 0 5
56775: LESS
56776: IFFALSE 56839
// begin hex := hexes [ i ] ;
56778: LD_ADDR_VAR 0 7
56782: PUSH
56783: LD_VAR 0 2
56787: PUSH
56788: LD_VAR 0 4
56792: ARRAY
56793: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56794: LD_ADDR_VAR 0 5
56798: PUSH
56799: LD_VAR 0 1
56803: PPUSH
56804: LD_VAR 0 2
56808: PUSH
56809: LD_VAR 0 4
56813: ARRAY
56814: PUSH
56815: LD_INT 1
56817: ARRAY
56818: PPUSH
56819: LD_VAR 0 2
56823: PUSH
56824: LD_VAR 0 4
56828: ARRAY
56829: PUSH
56830: LD_INT 2
56832: ARRAY
56833: PPUSH
56834: CALL_OW 297
56838: ST_TO_ADDR
// end ; end ;
56839: GO 56728
56841: POP
56842: POP
// result := hex ;
56843: LD_ADDR_VAR 0 3
56847: PUSH
56848: LD_VAR 0 7
56852: ST_TO_ADDR
// end ;
56853: LD_VAR 0 3
56857: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56858: LD_INT 0
56860: PPUSH
56861: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56862: LD_VAR 0 1
56866: NOT
56867: PUSH
56868: LD_VAR 0 1
56872: PUSH
56873: LD_INT 21
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 23
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PPUSH
56897: CALL_OW 69
56901: IN
56902: NOT
56903: OR
56904: IFFALSE 56908
// exit ;
56906: GO 56955
// for i = 1 to 3 do
56908: LD_ADDR_VAR 0 3
56912: PUSH
56913: DOUBLE
56914: LD_INT 1
56916: DEC
56917: ST_TO_ADDR
56918: LD_INT 3
56920: PUSH
56921: FOR_TO
56922: IFFALSE 56953
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56924: LD_VAR 0 1
56928: PPUSH
56929: CALL_OW 250
56933: PPUSH
56934: LD_VAR 0 1
56938: PPUSH
56939: CALL_OW 251
56943: PPUSH
56944: LD_INT 1
56946: PPUSH
56947: CALL_OW 453
56951: GO 56921
56953: POP
56954: POP
// end ;
56955: LD_VAR 0 2
56959: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56960: LD_INT 0
56962: PPUSH
56963: PPUSH
56964: PPUSH
56965: PPUSH
56966: PPUSH
56967: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56968: LD_VAR 0 1
56972: NOT
56973: PUSH
56974: LD_VAR 0 2
56978: NOT
56979: OR
56980: PUSH
56981: LD_VAR 0 1
56985: PPUSH
56986: CALL_OW 314
56990: OR
56991: IFFALSE 56995
// exit ;
56993: GO 57436
// x := GetX ( enemy_unit ) ;
56995: LD_ADDR_VAR 0 7
56999: PUSH
57000: LD_VAR 0 2
57004: PPUSH
57005: CALL_OW 250
57009: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57010: LD_ADDR_VAR 0 8
57014: PUSH
57015: LD_VAR 0 2
57019: PPUSH
57020: CALL_OW 251
57024: ST_TO_ADDR
// if not x or not y then
57025: LD_VAR 0 7
57029: NOT
57030: PUSH
57031: LD_VAR 0 8
57035: NOT
57036: OR
57037: IFFALSE 57041
// exit ;
57039: GO 57436
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57041: LD_ADDR_VAR 0 6
57045: PUSH
57046: LD_VAR 0 7
57050: PPUSH
57051: LD_INT 0
57053: PPUSH
57054: LD_INT 4
57056: PPUSH
57057: CALL_OW 272
57061: PUSH
57062: LD_VAR 0 8
57066: PPUSH
57067: LD_INT 0
57069: PPUSH
57070: LD_INT 4
57072: PPUSH
57073: CALL_OW 273
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_VAR 0 7
57086: PPUSH
57087: LD_INT 1
57089: PPUSH
57090: LD_INT 4
57092: PPUSH
57093: CALL_OW 272
57097: PUSH
57098: LD_VAR 0 8
57102: PPUSH
57103: LD_INT 1
57105: PPUSH
57106: LD_INT 4
57108: PPUSH
57109: CALL_OW 273
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_VAR 0 7
57122: PPUSH
57123: LD_INT 2
57125: PPUSH
57126: LD_INT 4
57128: PPUSH
57129: CALL_OW 272
57133: PUSH
57134: LD_VAR 0 8
57138: PPUSH
57139: LD_INT 2
57141: PPUSH
57142: LD_INT 4
57144: PPUSH
57145: CALL_OW 273
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_VAR 0 7
57158: PPUSH
57159: LD_INT 3
57161: PPUSH
57162: LD_INT 4
57164: PPUSH
57165: CALL_OW 272
57169: PUSH
57170: LD_VAR 0 8
57174: PPUSH
57175: LD_INT 3
57177: PPUSH
57178: LD_INT 4
57180: PPUSH
57181: CALL_OW 273
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_VAR 0 7
57194: PPUSH
57195: LD_INT 4
57197: PPUSH
57198: LD_INT 4
57200: PPUSH
57201: CALL_OW 272
57205: PUSH
57206: LD_VAR 0 8
57210: PPUSH
57211: LD_INT 4
57213: PPUSH
57214: LD_INT 4
57216: PPUSH
57217: CALL_OW 273
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_VAR 0 7
57230: PPUSH
57231: LD_INT 5
57233: PPUSH
57234: LD_INT 4
57236: PPUSH
57237: CALL_OW 272
57241: PUSH
57242: LD_VAR 0 8
57246: PPUSH
57247: LD_INT 5
57249: PPUSH
57250: LD_INT 4
57252: PPUSH
57253: CALL_OW 273
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: ST_TO_ADDR
// for i = tmp downto 1 do
57270: LD_ADDR_VAR 0 4
57274: PUSH
57275: DOUBLE
57276: LD_VAR 0 6
57280: INC
57281: ST_TO_ADDR
57282: LD_INT 1
57284: PUSH
57285: FOR_DOWNTO
57286: IFFALSE 57387
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57288: LD_VAR 0 6
57292: PUSH
57293: LD_VAR 0 4
57297: ARRAY
57298: PUSH
57299: LD_INT 1
57301: ARRAY
57302: PPUSH
57303: LD_VAR 0 6
57307: PUSH
57308: LD_VAR 0 4
57312: ARRAY
57313: PUSH
57314: LD_INT 2
57316: ARRAY
57317: PPUSH
57318: CALL_OW 488
57322: NOT
57323: PUSH
57324: LD_VAR 0 6
57328: PUSH
57329: LD_VAR 0 4
57333: ARRAY
57334: PUSH
57335: LD_INT 1
57337: ARRAY
57338: PPUSH
57339: LD_VAR 0 6
57343: PUSH
57344: LD_VAR 0 4
57348: ARRAY
57349: PUSH
57350: LD_INT 2
57352: ARRAY
57353: PPUSH
57354: CALL_OW 428
57358: PUSH
57359: LD_INT 0
57361: NONEQUAL
57362: OR
57363: IFFALSE 57385
// tmp := Delete ( tmp , i ) ;
57365: LD_ADDR_VAR 0 6
57369: PUSH
57370: LD_VAR 0 6
57374: PPUSH
57375: LD_VAR 0 4
57379: PPUSH
57380: CALL_OW 3
57384: ST_TO_ADDR
57385: GO 57285
57387: POP
57388: POP
// j := GetClosestHex ( unit , tmp ) ;
57389: LD_ADDR_VAR 0 5
57393: PUSH
57394: LD_VAR 0 1
57398: PPUSH
57399: LD_VAR 0 6
57403: PPUSH
57404: CALL 56689 0 2
57408: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57409: LD_VAR 0 1
57413: PPUSH
57414: LD_VAR 0 5
57418: PUSH
57419: LD_INT 1
57421: ARRAY
57422: PPUSH
57423: LD_VAR 0 5
57427: PUSH
57428: LD_INT 2
57430: ARRAY
57431: PPUSH
57432: CALL_OW 111
// end ;
57436: LD_VAR 0 3
57440: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57441: LD_INT 0
57443: PPUSH
57444: PPUSH
57445: PPUSH
// uc_side = 0 ;
57446: LD_ADDR_OWVAR 20
57450: PUSH
57451: LD_INT 0
57453: ST_TO_ADDR
// uc_nation = 0 ;
57454: LD_ADDR_OWVAR 21
57458: PUSH
57459: LD_INT 0
57461: ST_TO_ADDR
// InitHc_All ( ) ;
57462: CALL_OW 584
// InitVc ;
57466: CALL_OW 20
// if mastodonts then
57470: LD_VAR 0 6
57474: IFFALSE 57541
// for i = 1 to mastodonts do
57476: LD_ADDR_VAR 0 11
57480: PUSH
57481: DOUBLE
57482: LD_INT 1
57484: DEC
57485: ST_TO_ADDR
57486: LD_VAR 0 6
57490: PUSH
57491: FOR_TO
57492: IFFALSE 57539
// begin vc_chassis := 31 ;
57494: LD_ADDR_OWVAR 37
57498: PUSH
57499: LD_INT 31
57501: ST_TO_ADDR
// vc_control := control_rider ;
57502: LD_ADDR_OWVAR 38
57506: PUSH
57507: LD_INT 4
57509: ST_TO_ADDR
// animal := CreateVehicle ;
57510: LD_ADDR_VAR 0 12
57514: PUSH
57515: CALL_OW 45
57519: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57520: LD_VAR 0 12
57524: PPUSH
57525: LD_VAR 0 8
57529: PPUSH
57530: LD_INT 0
57532: PPUSH
57533: CALL 59729 0 3
// end ;
57537: GO 57491
57539: POP
57540: POP
// if horses then
57541: LD_VAR 0 5
57545: IFFALSE 57612
// for i = 1 to horses do
57547: LD_ADDR_VAR 0 11
57551: PUSH
57552: DOUBLE
57553: LD_INT 1
57555: DEC
57556: ST_TO_ADDR
57557: LD_VAR 0 5
57561: PUSH
57562: FOR_TO
57563: IFFALSE 57610
// begin hc_class := 21 ;
57565: LD_ADDR_OWVAR 28
57569: PUSH
57570: LD_INT 21
57572: ST_TO_ADDR
// hc_gallery :=  ;
57573: LD_ADDR_OWVAR 33
57577: PUSH
57578: LD_STRING 
57580: ST_TO_ADDR
// animal := CreateHuman ;
57581: LD_ADDR_VAR 0 12
57585: PUSH
57586: CALL_OW 44
57590: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57591: LD_VAR 0 12
57595: PPUSH
57596: LD_VAR 0 8
57600: PPUSH
57601: LD_INT 0
57603: PPUSH
57604: CALL 59729 0 3
// end ;
57608: GO 57562
57610: POP
57611: POP
// if birds then
57612: LD_VAR 0 1
57616: IFFALSE 57683
// for i = 1 to birds do
57618: LD_ADDR_VAR 0 11
57622: PUSH
57623: DOUBLE
57624: LD_INT 1
57626: DEC
57627: ST_TO_ADDR
57628: LD_VAR 0 1
57632: PUSH
57633: FOR_TO
57634: IFFALSE 57681
// begin hc_class = 18 ;
57636: LD_ADDR_OWVAR 28
57640: PUSH
57641: LD_INT 18
57643: ST_TO_ADDR
// hc_gallery =  ;
57644: LD_ADDR_OWVAR 33
57648: PUSH
57649: LD_STRING 
57651: ST_TO_ADDR
// animal := CreateHuman ;
57652: LD_ADDR_VAR 0 12
57656: PUSH
57657: CALL_OW 44
57661: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57662: LD_VAR 0 12
57666: PPUSH
57667: LD_VAR 0 8
57671: PPUSH
57672: LD_INT 0
57674: PPUSH
57675: CALL 59729 0 3
// end ;
57679: GO 57633
57681: POP
57682: POP
// if tigers then
57683: LD_VAR 0 2
57687: IFFALSE 57771
// for i = 1 to tigers do
57689: LD_ADDR_VAR 0 11
57693: PUSH
57694: DOUBLE
57695: LD_INT 1
57697: DEC
57698: ST_TO_ADDR
57699: LD_VAR 0 2
57703: PUSH
57704: FOR_TO
57705: IFFALSE 57769
// begin hc_class = class_tiger ;
57707: LD_ADDR_OWVAR 28
57711: PUSH
57712: LD_INT 14
57714: ST_TO_ADDR
// hc_gallery =  ;
57715: LD_ADDR_OWVAR 33
57719: PUSH
57720: LD_STRING 
57722: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57723: LD_ADDR_OWVAR 35
57727: PUSH
57728: LD_INT 7
57730: NEG
57731: PPUSH
57732: LD_INT 7
57734: PPUSH
57735: CALL_OW 12
57739: ST_TO_ADDR
// animal := CreateHuman ;
57740: LD_ADDR_VAR 0 12
57744: PUSH
57745: CALL_OW 44
57749: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57750: LD_VAR 0 12
57754: PPUSH
57755: LD_VAR 0 8
57759: PPUSH
57760: LD_INT 0
57762: PPUSH
57763: CALL 59729 0 3
// end ;
57767: GO 57704
57769: POP
57770: POP
// if apemans then
57771: LD_VAR 0 3
57775: IFFALSE 57898
// for i = 1 to apemans do
57777: LD_ADDR_VAR 0 11
57781: PUSH
57782: DOUBLE
57783: LD_INT 1
57785: DEC
57786: ST_TO_ADDR
57787: LD_VAR 0 3
57791: PUSH
57792: FOR_TO
57793: IFFALSE 57896
// begin hc_class = class_apeman ;
57795: LD_ADDR_OWVAR 28
57799: PUSH
57800: LD_INT 12
57802: ST_TO_ADDR
// hc_gallery =  ;
57803: LD_ADDR_OWVAR 33
57807: PUSH
57808: LD_STRING 
57810: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
57811: LD_ADDR_OWVAR 35
57815: PUSH
57816: LD_INT 5
57818: NEG
57819: PPUSH
57820: LD_INT 5
57822: PPUSH
57823: CALL_OW 12
57827: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57828: LD_ADDR_OWVAR 31
57832: PUSH
57833: LD_INT 1
57835: PPUSH
57836: LD_INT 3
57838: PPUSH
57839: CALL_OW 12
57843: PUSH
57844: LD_INT 1
57846: PPUSH
57847: LD_INT 3
57849: PPUSH
57850: CALL_OW 12
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: ST_TO_ADDR
// animal := CreateHuman ;
57867: LD_ADDR_VAR 0 12
57871: PUSH
57872: CALL_OW 44
57876: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57877: LD_VAR 0 12
57881: PPUSH
57882: LD_VAR 0 8
57886: PPUSH
57887: LD_INT 0
57889: PPUSH
57890: CALL 59729 0 3
// end ;
57894: GO 57792
57896: POP
57897: POP
// if enchidnas then
57898: LD_VAR 0 4
57902: IFFALSE 57969
// for i = 1 to enchidnas do
57904: LD_ADDR_VAR 0 11
57908: PUSH
57909: DOUBLE
57910: LD_INT 1
57912: DEC
57913: ST_TO_ADDR
57914: LD_VAR 0 4
57918: PUSH
57919: FOR_TO
57920: IFFALSE 57967
// begin hc_class = 13 ;
57922: LD_ADDR_OWVAR 28
57926: PUSH
57927: LD_INT 13
57929: ST_TO_ADDR
// hc_gallery =  ;
57930: LD_ADDR_OWVAR 33
57934: PUSH
57935: LD_STRING 
57937: ST_TO_ADDR
// animal := CreateHuman ;
57938: LD_ADDR_VAR 0 12
57942: PUSH
57943: CALL_OW 44
57947: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57948: LD_VAR 0 12
57952: PPUSH
57953: LD_VAR 0 8
57957: PPUSH
57958: LD_INT 0
57960: PPUSH
57961: CALL 59729 0 3
// end ;
57965: GO 57919
57967: POP
57968: POP
// if fishes then
57969: LD_VAR 0 7
57973: IFFALSE 58040
// for i = 1 to fishes do
57975: LD_ADDR_VAR 0 11
57979: PUSH
57980: DOUBLE
57981: LD_INT 1
57983: DEC
57984: ST_TO_ADDR
57985: LD_VAR 0 7
57989: PUSH
57990: FOR_TO
57991: IFFALSE 58038
// begin hc_class = 20 ;
57993: LD_ADDR_OWVAR 28
57997: PUSH
57998: LD_INT 20
58000: ST_TO_ADDR
// hc_gallery =  ;
58001: LD_ADDR_OWVAR 33
58005: PUSH
58006: LD_STRING 
58008: ST_TO_ADDR
// animal := CreateHuman ;
58009: LD_ADDR_VAR 0 12
58013: PUSH
58014: CALL_OW 44
58018: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58019: LD_VAR 0 12
58023: PPUSH
58024: LD_VAR 0 9
58028: PPUSH
58029: LD_INT 0
58031: PPUSH
58032: CALL 59729 0 3
// end ;
58036: GO 57990
58038: POP
58039: POP
// end ;
58040: LD_VAR 0 10
58044: RET
// export function WantHeal ( sci , unit ) ; begin
58045: LD_INT 0
58047: PPUSH
// if GetTaskList ( sci ) > 0 then
58048: LD_VAR 0 1
58052: PPUSH
58053: CALL_OW 437
58057: PUSH
58058: LD_INT 0
58060: GREATER
58061: IFFALSE 58131
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58063: LD_VAR 0 1
58067: PPUSH
58068: CALL_OW 437
58072: PUSH
58073: LD_INT 1
58075: ARRAY
58076: PUSH
58077: LD_INT 1
58079: ARRAY
58080: PUSH
58081: LD_STRING l
58083: EQUAL
58084: PUSH
58085: LD_VAR 0 1
58089: PPUSH
58090: CALL_OW 437
58094: PUSH
58095: LD_INT 1
58097: ARRAY
58098: PUSH
58099: LD_INT 4
58101: ARRAY
58102: PUSH
58103: LD_VAR 0 2
58107: EQUAL
58108: AND
58109: IFFALSE 58121
// result := true else
58111: LD_ADDR_VAR 0 3
58115: PUSH
58116: LD_INT 1
58118: ST_TO_ADDR
58119: GO 58129
// result := false ;
58121: LD_ADDR_VAR 0 3
58125: PUSH
58126: LD_INT 0
58128: ST_TO_ADDR
// end else
58129: GO 58139
// result := false ;
58131: LD_ADDR_VAR 0 3
58135: PUSH
58136: LD_INT 0
58138: ST_TO_ADDR
// end ;
58139: LD_VAR 0 3
58143: RET
// export function HealTarget ( sci ) ; begin
58144: LD_INT 0
58146: PPUSH
// if not sci then
58147: LD_VAR 0 1
58151: NOT
58152: IFFALSE 58156
// exit ;
58154: GO 58221
// result := 0 ;
58156: LD_ADDR_VAR 0 2
58160: PUSH
58161: LD_INT 0
58163: ST_TO_ADDR
// if GetTaskList ( sci ) then
58164: LD_VAR 0 1
58168: PPUSH
58169: CALL_OW 437
58173: IFFALSE 58221
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58175: LD_VAR 0 1
58179: PPUSH
58180: CALL_OW 437
58184: PUSH
58185: LD_INT 1
58187: ARRAY
58188: PUSH
58189: LD_INT 1
58191: ARRAY
58192: PUSH
58193: LD_STRING l
58195: EQUAL
58196: IFFALSE 58221
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58198: LD_ADDR_VAR 0 2
58202: PUSH
58203: LD_VAR 0 1
58207: PPUSH
58208: CALL_OW 437
58212: PUSH
58213: LD_INT 1
58215: ARRAY
58216: PUSH
58217: LD_INT 4
58219: ARRAY
58220: ST_TO_ADDR
// end ;
58221: LD_VAR 0 2
58225: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58226: LD_INT 0
58228: PPUSH
58229: PPUSH
58230: PPUSH
58231: PPUSH
// if not base_units then
58232: LD_VAR 0 1
58236: NOT
58237: IFFALSE 58241
// exit ;
58239: GO 58328
// result := false ;
58241: LD_ADDR_VAR 0 2
58245: PUSH
58246: LD_INT 0
58248: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58249: LD_ADDR_VAR 0 5
58253: PUSH
58254: LD_VAR 0 1
58258: PPUSH
58259: LD_INT 21
58261: PUSH
58262: LD_INT 3
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PPUSH
58269: CALL_OW 72
58273: ST_TO_ADDR
// if not tmp then
58274: LD_VAR 0 5
58278: NOT
58279: IFFALSE 58283
// exit ;
58281: GO 58328
// for i in tmp do
58283: LD_ADDR_VAR 0 3
58287: PUSH
58288: LD_VAR 0 5
58292: PUSH
58293: FOR_IN
58294: IFFALSE 58326
// begin result := EnemyInRange ( i , 22 ) ;
58296: LD_ADDR_VAR 0 2
58300: PUSH
58301: LD_VAR 0 3
58305: PPUSH
58306: LD_INT 22
58308: PPUSH
58309: CALL 56564 0 2
58313: ST_TO_ADDR
// if result then
58314: LD_VAR 0 2
58318: IFFALSE 58324
// exit ;
58320: POP
58321: POP
58322: GO 58328
// end ;
58324: GO 58293
58326: POP
58327: POP
// end ;
58328: LD_VAR 0 2
58332: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58333: LD_INT 0
58335: PPUSH
58336: PPUSH
// if not units then
58337: LD_VAR 0 1
58341: NOT
58342: IFFALSE 58346
// exit ;
58344: GO 58416
// result := [ ] ;
58346: LD_ADDR_VAR 0 3
58350: PUSH
58351: EMPTY
58352: ST_TO_ADDR
// for i in units do
58353: LD_ADDR_VAR 0 4
58357: PUSH
58358: LD_VAR 0 1
58362: PUSH
58363: FOR_IN
58364: IFFALSE 58414
// if GetTag ( i ) = tag then
58366: LD_VAR 0 4
58370: PPUSH
58371: CALL_OW 110
58375: PUSH
58376: LD_VAR 0 2
58380: EQUAL
58381: IFFALSE 58412
// result := Insert ( result , result + 1 , i ) ;
58383: LD_ADDR_VAR 0 3
58387: PUSH
58388: LD_VAR 0 3
58392: PPUSH
58393: LD_VAR 0 3
58397: PUSH
58398: LD_INT 1
58400: PLUS
58401: PPUSH
58402: LD_VAR 0 4
58406: PPUSH
58407: CALL_OW 2
58411: ST_TO_ADDR
58412: GO 58363
58414: POP
58415: POP
// end ;
58416: LD_VAR 0 3
58420: RET
// export function IsDriver ( un ) ; begin
58421: LD_INT 0
58423: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58424: LD_ADDR_VAR 0 2
58428: PUSH
58429: LD_VAR 0 1
58433: PUSH
58434: LD_INT 55
58436: PUSH
58437: EMPTY
58438: LIST
58439: PPUSH
58440: CALL_OW 69
58444: IN
58445: ST_TO_ADDR
// end ;
58446: LD_VAR 0 2
58450: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58451: LD_INT 0
58453: PPUSH
58454: PPUSH
// list := [ ] ;
58455: LD_ADDR_VAR 0 5
58459: PUSH
58460: EMPTY
58461: ST_TO_ADDR
// case d of 0 :
58462: LD_VAR 0 3
58466: PUSH
58467: LD_INT 0
58469: DOUBLE
58470: EQUAL
58471: IFTRUE 58475
58473: GO 58608
58475: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58476: LD_ADDR_VAR 0 5
58480: PUSH
58481: LD_VAR 0 1
58485: PUSH
58486: LD_INT 4
58488: MINUS
58489: PUSH
58490: LD_VAR 0 2
58494: PUSH
58495: LD_INT 4
58497: MINUS
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: LIST
58506: PUSH
58507: LD_VAR 0 1
58511: PUSH
58512: LD_INT 3
58514: MINUS
58515: PUSH
58516: LD_VAR 0 2
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: LIST
58528: PUSH
58529: LD_VAR 0 1
58533: PUSH
58534: LD_INT 4
58536: PLUS
58537: PUSH
58538: LD_VAR 0 2
58542: PUSH
58543: LD_INT 4
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: LIST
58550: PUSH
58551: LD_VAR 0 1
58555: PUSH
58556: LD_INT 3
58558: PLUS
58559: PUSH
58560: LD_VAR 0 2
58564: PUSH
58565: LD_INT 3
58567: PLUS
58568: PUSH
58569: LD_INT 5
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: LIST
58576: PUSH
58577: LD_VAR 0 1
58581: PUSH
58582: LD_VAR 0 2
58586: PUSH
58587: LD_INT 4
58589: PLUS
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: LIST
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: ST_TO_ADDR
// end ; 1 :
58606: GO 59306
58608: LD_INT 1
58610: DOUBLE
58611: EQUAL
58612: IFTRUE 58616
58614: GO 58749
58616: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58617: LD_ADDR_VAR 0 5
58621: PUSH
58622: LD_VAR 0 1
58626: PUSH
58627: LD_VAR 0 2
58631: PUSH
58632: LD_INT 4
58634: MINUS
58635: PUSH
58636: LD_INT 3
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: LIST
58643: PUSH
58644: LD_VAR 0 1
58648: PUSH
58649: LD_INT 3
58651: MINUS
58652: PUSH
58653: LD_VAR 0 2
58657: PUSH
58658: LD_INT 3
58660: MINUS
58661: PUSH
58662: LD_INT 2
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: LIST
58669: PUSH
58670: LD_VAR 0 1
58674: PUSH
58675: LD_INT 4
58677: MINUS
58678: PUSH
58679: LD_VAR 0 2
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: LIST
58691: PUSH
58692: LD_VAR 0 1
58696: PUSH
58697: LD_VAR 0 2
58701: PUSH
58702: LD_INT 3
58704: PLUS
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: LIST
58713: PUSH
58714: LD_VAR 0 1
58718: PUSH
58719: LD_INT 4
58721: PLUS
58722: PUSH
58723: LD_VAR 0 2
58727: PUSH
58728: LD_INT 4
58730: PLUS
58731: PUSH
58732: LD_INT 5
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: LIST
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: ST_TO_ADDR
// end ; 2 :
58747: GO 59306
58749: LD_INT 2
58751: DOUBLE
58752: EQUAL
58753: IFTRUE 58757
58755: GO 58886
58757: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58758: LD_ADDR_VAR 0 5
58762: PUSH
58763: LD_VAR 0 1
58767: PUSH
58768: LD_VAR 0 2
58772: PUSH
58773: LD_INT 3
58775: MINUS
58776: PUSH
58777: LD_INT 3
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: LIST
58784: PUSH
58785: LD_VAR 0 1
58789: PUSH
58790: LD_INT 4
58792: PLUS
58793: PUSH
58794: LD_VAR 0 2
58798: PUSH
58799: LD_INT 4
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: LIST
58806: PUSH
58807: LD_VAR 0 1
58811: PUSH
58812: LD_VAR 0 2
58816: PUSH
58817: LD_INT 4
58819: PLUS
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: LIST
58828: PUSH
58829: LD_VAR 0 1
58833: PUSH
58834: LD_INT 3
58836: MINUS
58837: PUSH
58838: LD_VAR 0 2
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: LIST
58850: PUSH
58851: LD_VAR 0 1
58855: PUSH
58856: LD_INT 4
58858: MINUS
58859: PUSH
58860: LD_VAR 0 2
58864: PUSH
58865: LD_INT 4
58867: MINUS
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: LIST
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: ST_TO_ADDR
// end ; 3 :
58884: GO 59306
58886: LD_INT 3
58888: DOUBLE
58889: EQUAL
58890: IFTRUE 58894
58892: GO 59027
58894: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58895: LD_ADDR_VAR 0 5
58899: PUSH
58900: LD_VAR 0 1
58904: PUSH
58905: LD_INT 3
58907: PLUS
58908: PUSH
58909: LD_VAR 0 2
58913: PUSH
58914: LD_INT 4
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: LIST
58921: PUSH
58922: LD_VAR 0 1
58926: PUSH
58927: LD_INT 4
58929: PLUS
58930: PUSH
58931: LD_VAR 0 2
58935: PUSH
58936: LD_INT 4
58938: PLUS
58939: PUSH
58940: LD_INT 5
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: LIST
58947: PUSH
58948: LD_VAR 0 1
58952: PUSH
58953: LD_INT 4
58955: MINUS
58956: PUSH
58957: LD_VAR 0 2
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: LIST
58969: PUSH
58970: LD_VAR 0 1
58974: PUSH
58975: LD_VAR 0 2
58979: PUSH
58980: LD_INT 4
58982: MINUS
58983: PUSH
58984: LD_INT 3
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: PUSH
58992: LD_VAR 0 1
58996: PUSH
58997: LD_INT 3
58999: MINUS
59000: PUSH
59001: LD_VAR 0 2
59005: PUSH
59006: LD_INT 3
59008: MINUS
59009: PUSH
59010: LD_INT 2
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: LIST
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: ST_TO_ADDR
// end ; 4 :
59025: GO 59306
59027: LD_INT 4
59029: DOUBLE
59030: EQUAL
59031: IFTRUE 59035
59033: GO 59168
59035: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59036: LD_ADDR_VAR 0 5
59040: PUSH
59041: LD_VAR 0 1
59045: PUSH
59046: LD_VAR 0 2
59050: PUSH
59051: LD_INT 4
59053: PLUS
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: LIST
59062: PUSH
59063: LD_VAR 0 1
59067: PUSH
59068: LD_INT 3
59070: PLUS
59071: PUSH
59072: LD_VAR 0 2
59076: PUSH
59077: LD_INT 3
59079: PLUS
59080: PUSH
59081: LD_INT 5
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: LIST
59088: PUSH
59089: LD_VAR 0 1
59093: PUSH
59094: LD_INT 4
59096: PLUS
59097: PUSH
59098: LD_VAR 0 2
59102: PUSH
59103: LD_INT 4
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: LIST
59110: PUSH
59111: LD_VAR 0 1
59115: PUSH
59116: LD_VAR 0 2
59120: PUSH
59121: LD_INT 3
59123: MINUS
59124: PUSH
59125: LD_INT 3
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: LIST
59132: PUSH
59133: LD_VAR 0 1
59137: PUSH
59138: LD_INT 4
59140: MINUS
59141: PUSH
59142: LD_VAR 0 2
59146: PUSH
59147: LD_INT 4
59149: MINUS
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: LIST
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: ST_TO_ADDR
// end ; 5 :
59166: GO 59306
59168: LD_INT 5
59170: DOUBLE
59171: EQUAL
59172: IFTRUE 59176
59174: GO 59305
59176: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59177: LD_ADDR_VAR 0 5
59181: PUSH
59182: LD_VAR 0 1
59186: PUSH
59187: LD_INT 4
59189: MINUS
59190: PUSH
59191: LD_VAR 0 2
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: LIST
59203: PUSH
59204: LD_VAR 0 1
59208: PUSH
59209: LD_VAR 0 2
59213: PUSH
59214: LD_INT 4
59216: MINUS
59217: PUSH
59218: LD_INT 3
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: LIST
59225: PUSH
59226: LD_VAR 0 1
59230: PUSH
59231: LD_INT 4
59233: PLUS
59234: PUSH
59235: LD_VAR 0 2
59239: PUSH
59240: LD_INT 4
59242: PLUS
59243: PUSH
59244: LD_INT 5
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: LIST
59251: PUSH
59252: LD_VAR 0 1
59256: PUSH
59257: LD_INT 3
59259: PLUS
59260: PUSH
59261: LD_VAR 0 2
59265: PUSH
59266: LD_INT 4
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: LIST
59273: PUSH
59274: LD_VAR 0 1
59278: PUSH
59279: LD_VAR 0 2
59283: PUSH
59284: LD_INT 3
59286: PLUS
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: LIST
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: ST_TO_ADDR
// end ; end ;
59303: GO 59306
59305: POP
// result := list ;
59306: LD_ADDR_VAR 0 4
59310: PUSH
59311: LD_VAR 0 5
59315: ST_TO_ADDR
// end ;
59316: LD_VAR 0 4
59320: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59321: LD_INT 0
59323: PPUSH
59324: PPUSH
59325: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59326: LD_VAR 0 1
59330: NOT
59331: PUSH
59332: LD_VAR 0 2
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: LD_INT 2
59342: PUSH
59343: LD_INT 3
59345: PUSH
59346: LD_INT 4
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: IN
59355: NOT
59356: OR
59357: IFFALSE 59361
// exit ;
59359: GO 59453
// tmp := [ ] ;
59361: LD_ADDR_VAR 0 5
59365: PUSH
59366: EMPTY
59367: ST_TO_ADDR
// for i in units do
59368: LD_ADDR_VAR 0 4
59372: PUSH
59373: LD_VAR 0 1
59377: PUSH
59378: FOR_IN
59379: IFFALSE 59422
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59381: LD_ADDR_VAR 0 5
59385: PUSH
59386: LD_VAR 0 5
59390: PPUSH
59391: LD_VAR 0 5
59395: PUSH
59396: LD_INT 1
59398: PLUS
59399: PPUSH
59400: LD_VAR 0 4
59404: PPUSH
59405: LD_VAR 0 2
59409: PPUSH
59410: CALL_OW 259
59414: PPUSH
59415: CALL_OW 2
59419: ST_TO_ADDR
59420: GO 59378
59422: POP
59423: POP
// if not tmp then
59424: LD_VAR 0 5
59428: NOT
59429: IFFALSE 59433
// exit ;
59431: GO 59453
// result := SortListByListDesc ( units , tmp ) ;
59433: LD_ADDR_VAR 0 3
59437: PUSH
59438: LD_VAR 0 1
59442: PPUSH
59443: LD_VAR 0 5
59447: PPUSH
59448: CALL_OW 77
59452: ST_TO_ADDR
// end ;
59453: LD_VAR 0 3
59457: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59458: LD_INT 0
59460: PPUSH
59461: PPUSH
59462: PPUSH
// result := false ;
59463: LD_ADDR_VAR 0 3
59467: PUSH
59468: LD_INT 0
59470: ST_TO_ADDR
// x := GetX ( building ) ;
59471: LD_ADDR_VAR 0 4
59475: PUSH
59476: LD_VAR 0 2
59480: PPUSH
59481: CALL_OW 250
59485: ST_TO_ADDR
// y := GetY ( building ) ;
59486: LD_ADDR_VAR 0 5
59490: PUSH
59491: LD_VAR 0 2
59495: PPUSH
59496: CALL_OW 251
59500: ST_TO_ADDR
// if not building or not x or not y then
59501: LD_VAR 0 2
59505: NOT
59506: PUSH
59507: LD_VAR 0 4
59511: NOT
59512: OR
59513: PUSH
59514: LD_VAR 0 5
59518: NOT
59519: OR
59520: IFFALSE 59524
// exit ;
59522: GO 59616
// if GetTaskList ( unit ) then
59524: LD_VAR 0 1
59528: PPUSH
59529: CALL_OW 437
59533: IFFALSE 59616
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59535: LD_STRING e
59537: PUSH
59538: LD_VAR 0 1
59542: PPUSH
59543: CALL_OW 437
59547: PUSH
59548: LD_INT 1
59550: ARRAY
59551: PUSH
59552: LD_INT 1
59554: ARRAY
59555: EQUAL
59556: PUSH
59557: LD_VAR 0 4
59561: PUSH
59562: LD_VAR 0 1
59566: PPUSH
59567: CALL_OW 437
59571: PUSH
59572: LD_INT 1
59574: ARRAY
59575: PUSH
59576: LD_INT 2
59578: ARRAY
59579: EQUAL
59580: AND
59581: PUSH
59582: LD_VAR 0 5
59586: PUSH
59587: LD_VAR 0 1
59591: PPUSH
59592: CALL_OW 437
59596: PUSH
59597: LD_INT 1
59599: ARRAY
59600: PUSH
59601: LD_INT 3
59603: ARRAY
59604: EQUAL
59605: AND
59606: IFFALSE 59616
// result := true end ;
59608: LD_ADDR_VAR 0 3
59612: PUSH
59613: LD_INT 1
59615: ST_TO_ADDR
// end ;
59616: LD_VAR 0 3
59620: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59621: LD_INT 0
59623: PPUSH
// result := false ;
59624: LD_ADDR_VAR 0 4
59628: PUSH
59629: LD_INT 0
59631: ST_TO_ADDR
// if GetTaskList ( unit ) then
59632: LD_VAR 0 1
59636: PPUSH
59637: CALL_OW 437
59641: IFFALSE 59724
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59643: LD_STRING M
59645: PUSH
59646: LD_VAR 0 1
59650: PPUSH
59651: CALL_OW 437
59655: PUSH
59656: LD_INT 1
59658: ARRAY
59659: PUSH
59660: LD_INT 1
59662: ARRAY
59663: EQUAL
59664: PUSH
59665: LD_VAR 0 2
59669: PUSH
59670: LD_VAR 0 1
59674: PPUSH
59675: CALL_OW 437
59679: PUSH
59680: LD_INT 1
59682: ARRAY
59683: PUSH
59684: LD_INT 2
59686: ARRAY
59687: EQUAL
59688: AND
59689: PUSH
59690: LD_VAR 0 3
59694: PUSH
59695: LD_VAR 0 1
59699: PPUSH
59700: CALL_OW 437
59704: PUSH
59705: LD_INT 1
59707: ARRAY
59708: PUSH
59709: LD_INT 3
59711: ARRAY
59712: EQUAL
59713: AND
59714: IFFALSE 59724
// result := true ;
59716: LD_ADDR_VAR 0 4
59720: PUSH
59721: LD_INT 1
59723: ST_TO_ADDR
// end ; end ;
59724: LD_VAR 0 4
59728: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59729: LD_INT 0
59731: PPUSH
59732: PPUSH
59733: PPUSH
59734: PPUSH
// if not unit or not area then
59735: LD_VAR 0 1
59739: NOT
59740: PUSH
59741: LD_VAR 0 2
59745: NOT
59746: OR
59747: IFFALSE 59751
// exit ;
59749: GO 59915
// tmp := AreaToList ( area , i ) ;
59751: LD_ADDR_VAR 0 6
59755: PUSH
59756: LD_VAR 0 2
59760: PPUSH
59761: LD_VAR 0 5
59765: PPUSH
59766: CALL_OW 517
59770: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59771: LD_ADDR_VAR 0 5
59775: PUSH
59776: DOUBLE
59777: LD_INT 1
59779: DEC
59780: ST_TO_ADDR
59781: LD_VAR 0 6
59785: PUSH
59786: LD_INT 1
59788: ARRAY
59789: PUSH
59790: FOR_TO
59791: IFFALSE 59913
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59793: LD_ADDR_VAR 0 7
59797: PUSH
59798: LD_VAR 0 6
59802: PUSH
59803: LD_INT 1
59805: ARRAY
59806: PUSH
59807: LD_VAR 0 5
59811: ARRAY
59812: PUSH
59813: LD_VAR 0 6
59817: PUSH
59818: LD_INT 2
59820: ARRAY
59821: PUSH
59822: LD_VAR 0 5
59826: ARRAY
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59832: LD_VAR 0 7
59836: PUSH
59837: LD_INT 1
59839: ARRAY
59840: PPUSH
59841: LD_VAR 0 7
59845: PUSH
59846: LD_INT 2
59848: ARRAY
59849: PPUSH
59850: CALL_OW 428
59854: PUSH
59855: LD_INT 0
59857: EQUAL
59858: IFFALSE 59911
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59860: LD_VAR 0 1
59864: PPUSH
59865: LD_VAR 0 7
59869: PUSH
59870: LD_INT 1
59872: ARRAY
59873: PPUSH
59874: LD_VAR 0 7
59878: PUSH
59879: LD_INT 2
59881: ARRAY
59882: PPUSH
59883: LD_VAR 0 3
59887: PPUSH
59888: CALL_OW 48
// result := IsPlaced ( unit ) ;
59892: LD_ADDR_VAR 0 4
59896: PUSH
59897: LD_VAR 0 1
59901: PPUSH
59902: CALL_OW 305
59906: ST_TO_ADDR
// exit ;
59907: POP
59908: POP
59909: GO 59915
// end ; end ;
59911: GO 59790
59913: POP
59914: POP
// end ;
59915: LD_VAR 0 4
59919: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59920: LD_INT 0
59922: PPUSH
59923: PPUSH
59924: PPUSH
// if not side or side > 8 then
59925: LD_VAR 0 1
59929: NOT
59930: PUSH
59931: LD_VAR 0 1
59935: PUSH
59936: LD_INT 8
59938: GREATER
59939: OR
59940: IFFALSE 59944
// exit ;
59942: GO 60131
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59944: LD_ADDR_VAR 0 4
59948: PUSH
59949: LD_INT 22
59951: PUSH
59952: LD_VAR 0 1
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 21
59963: PUSH
59964: LD_INT 3
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PPUSH
59975: CALL_OW 69
59979: ST_TO_ADDR
// if not tmp then
59980: LD_VAR 0 4
59984: NOT
59985: IFFALSE 59989
// exit ;
59987: GO 60131
// enable_addtolog := true ;
59989: LD_ADDR_OWVAR 81
59993: PUSH
59994: LD_INT 1
59996: ST_TO_ADDR
// AddToLog ( [ ) ;
59997: LD_STRING [
59999: PPUSH
60000: CALL_OW 561
// for i in tmp do
60004: LD_ADDR_VAR 0 3
60008: PUSH
60009: LD_VAR 0 4
60013: PUSH
60014: FOR_IN
60015: IFFALSE 60122
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60017: LD_STRING [
60019: PUSH
60020: LD_VAR 0 3
60024: PPUSH
60025: CALL_OW 266
60029: STR
60030: PUSH
60031: LD_STRING , 
60033: STR
60034: PUSH
60035: LD_VAR 0 3
60039: PPUSH
60040: CALL_OW 250
60044: STR
60045: PUSH
60046: LD_STRING , 
60048: STR
60049: PUSH
60050: LD_VAR 0 3
60054: PPUSH
60055: CALL_OW 251
60059: STR
60060: PUSH
60061: LD_STRING , 
60063: STR
60064: PUSH
60065: LD_VAR 0 3
60069: PPUSH
60070: CALL_OW 254
60074: STR
60075: PUSH
60076: LD_STRING , 
60078: STR
60079: PUSH
60080: LD_VAR 0 3
60084: PPUSH
60085: LD_INT 1
60087: PPUSH
60088: CALL_OW 268
60092: STR
60093: PUSH
60094: LD_STRING , 
60096: STR
60097: PUSH
60098: LD_VAR 0 3
60102: PPUSH
60103: LD_INT 2
60105: PPUSH
60106: CALL_OW 268
60110: STR
60111: PUSH
60112: LD_STRING ],
60114: STR
60115: PPUSH
60116: CALL_OW 561
// end ;
60120: GO 60014
60122: POP
60123: POP
// AddToLog ( ]; ) ;
60124: LD_STRING ];
60126: PPUSH
60127: CALL_OW 561
// end ;
60131: LD_VAR 0 2
60135: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60136: LD_INT 0
60138: PPUSH
60139: PPUSH
60140: PPUSH
60141: PPUSH
60142: PPUSH
// if not area or not rate or not max then
60143: LD_VAR 0 1
60147: NOT
60148: PUSH
60149: LD_VAR 0 2
60153: NOT
60154: OR
60155: PUSH
60156: LD_VAR 0 4
60160: NOT
60161: OR
60162: IFFALSE 60166
// exit ;
60164: GO 60358
// while 1 do
60166: LD_INT 1
60168: IFFALSE 60358
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60170: LD_ADDR_VAR 0 9
60174: PUSH
60175: LD_VAR 0 1
60179: PPUSH
60180: LD_INT 1
60182: PPUSH
60183: CALL_OW 287
60187: PUSH
60188: LD_INT 10
60190: MUL
60191: ST_TO_ADDR
// r := rate / 10 ;
60192: LD_ADDR_VAR 0 7
60196: PUSH
60197: LD_VAR 0 2
60201: PUSH
60202: LD_INT 10
60204: DIVREAL
60205: ST_TO_ADDR
// time := 1 1$00 ;
60206: LD_ADDR_VAR 0 8
60210: PUSH
60211: LD_INT 2100
60213: ST_TO_ADDR
// if amount < min then
60214: LD_VAR 0 9
60218: PUSH
60219: LD_VAR 0 3
60223: LESS
60224: IFFALSE 60242
// r := r * 2 else
60226: LD_ADDR_VAR 0 7
60230: PUSH
60231: LD_VAR 0 7
60235: PUSH
60236: LD_INT 2
60238: MUL
60239: ST_TO_ADDR
60240: GO 60268
// if amount > max then
60242: LD_VAR 0 9
60246: PUSH
60247: LD_VAR 0 4
60251: GREATER
60252: IFFALSE 60268
// r := r / 2 ;
60254: LD_ADDR_VAR 0 7
60258: PUSH
60259: LD_VAR 0 7
60263: PUSH
60264: LD_INT 2
60266: DIVREAL
60267: ST_TO_ADDR
// time := time / r ;
60268: LD_ADDR_VAR 0 8
60272: PUSH
60273: LD_VAR 0 8
60277: PUSH
60278: LD_VAR 0 7
60282: DIVREAL
60283: ST_TO_ADDR
// if time < 0 then
60284: LD_VAR 0 8
60288: PUSH
60289: LD_INT 0
60291: LESS
60292: IFFALSE 60309
// time := time * - 1 ;
60294: LD_ADDR_VAR 0 8
60298: PUSH
60299: LD_VAR 0 8
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: MUL
60308: ST_TO_ADDR
// wait ( time ) ;
60309: LD_VAR 0 8
60313: PPUSH
60314: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60318: LD_INT 35
60320: PPUSH
60321: LD_INT 875
60323: PPUSH
60324: CALL_OW 12
60328: PPUSH
60329: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60333: LD_INT 1
60335: PPUSH
60336: LD_INT 5
60338: PPUSH
60339: CALL_OW 12
60343: PPUSH
60344: LD_VAR 0 1
60348: PPUSH
60349: LD_INT 1
60351: PPUSH
60352: CALL_OW 55
// end ;
60356: GO 60166
// end ;
60358: LD_VAR 0 5
60362: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60363: LD_INT 0
60365: PPUSH
60366: PPUSH
60367: PPUSH
60368: PPUSH
60369: PPUSH
60370: PPUSH
60371: PPUSH
60372: PPUSH
// if not turrets or not factories then
60373: LD_VAR 0 1
60377: NOT
60378: PUSH
60379: LD_VAR 0 2
60383: NOT
60384: OR
60385: IFFALSE 60389
// exit ;
60387: GO 60696
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60389: LD_ADDR_VAR 0 10
60393: PUSH
60394: LD_INT 5
60396: PUSH
60397: LD_INT 6
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 2
60406: PUSH
60407: LD_INT 4
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 3
60416: PUSH
60417: LD_INT 5
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 24
60431: PUSH
60432: LD_INT 25
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 23
60441: PUSH
60442: LD_INT 27
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 42
60455: PUSH
60456: LD_INT 43
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 44
60465: PUSH
60466: LD_INT 46
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 45
60475: PUSH
60476: LD_INT 47
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: LIST
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: LIST
60492: ST_TO_ADDR
// result := [ ] ;
60493: LD_ADDR_VAR 0 3
60497: PUSH
60498: EMPTY
60499: ST_TO_ADDR
// for i in turrets do
60500: LD_ADDR_VAR 0 4
60504: PUSH
60505: LD_VAR 0 1
60509: PUSH
60510: FOR_IN
60511: IFFALSE 60694
// begin nat := GetNation ( i ) ;
60513: LD_ADDR_VAR 0 7
60517: PUSH
60518: LD_VAR 0 4
60522: PPUSH
60523: CALL_OW 248
60527: ST_TO_ADDR
// weapon := 0 ;
60528: LD_ADDR_VAR 0 8
60532: PUSH
60533: LD_INT 0
60535: ST_TO_ADDR
// if not nat then
60536: LD_VAR 0 7
60540: NOT
60541: IFFALSE 60545
// continue ;
60543: GO 60510
// for j in list [ nat ] do
60545: LD_ADDR_VAR 0 5
60549: PUSH
60550: LD_VAR 0 10
60554: PUSH
60555: LD_VAR 0 7
60559: ARRAY
60560: PUSH
60561: FOR_IN
60562: IFFALSE 60603
// if GetBWeapon ( i ) = j [ 1 ] then
60564: LD_VAR 0 4
60568: PPUSH
60569: CALL_OW 269
60573: PUSH
60574: LD_VAR 0 5
60578: PUSH
60579: LD_INT 1
60581: ARRAY
60582: EQUAL
60583: IFFALSE 60601
// begin weapon := j [ 2 ] ;
60585: LD_ADDR_VAR 0 8
60589: PUSH
60590: LD_VAR 0 5
60594: PUSH
60595: LD_INT 2
60597: ARRAY
60598: ST_TO_ADDR
// break ;
60599: GO 60603
// end ;
60601: GO 60561
60603: POP
60604: POP
// if not weapon then
60605: LD_VAR 0 8
60609: NOT
60610: IFFALSE 60614
// continue ;
60612: GO 60510
// for k in factories do
60614: LD_ADDR_VAR 0 6
60618: PUSH
60619: LD_VAR 0 2
60623: PUSH
60624: FOR_IN
60625: IFFALSE 60690
// begin weapons := AvailableWeaponList ( k ) ;
60627: LD_ADDR_VAR 0 9
60631: PUSH
60632: LD_VAR 0 6
60636: PPUSH
60637: CALL_OW 478
60641: ST_TO_ADDR
// if not weapons then
60642: LD_VAR 0 9
60646: NOT
60647: IFFALSE 60651
// continue ;
60649: GO 60624
// if weapon in weapons then
60651: LD_VAR 0 8
60655: PUSH
60656: LD_VAR 0 9
60660: IN
60661: IFFALSE 60688
// begin result := [ i , weapon ] ;
60663: LD_ADDR_VAR 0 3
60667: PUSH
60668: LD_VAR 0 4
60672: PUSH
60673: LD_VAR 0 8
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: ST_TO_ADDR
// exit ;
60682: POP
60683: POP
60684: POP
60685: POP
60686: GO 60696
// end ; end ;
60688: GO 60624
60690: POP
60691: POP
// end ;
60692: GO 60510
60694: POP
60695: POP
// end ;
60696: LD_VAR 0 3
60700: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60701: LD_INT 0
60703: PPUSH
// if not side or side > 8 then
60704: LD_VAR 0 3
60708: NOT
60709: PUSH
60710: LD_VAR 0 3
60714: PUSH
60715: LD_INT 8
60717: GREATER
60718: OR
60719: IFFALSE 60723
// exit ;
60721: GO 60782
// if not range then
60723: LD_VAR 0 4
60727: NOT
60728: IFFALSE 60739
// range := - 12 ;
60730: LD_ADDR_VAR 0 4
60734: PUSH
60735: LD_INT 12
60737: NEG
60738: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60739: LD_VAR 0 1
60743: PPUSH
60744: LD_VAR 0 2
60748: PPUSH
60749: LD_VAR 0 3
60753: PPUSH
60754: LD_VAR 0 4
60758: PPUSH
60759: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60763: LD_VAR 0 1
60767: PPUSH
60768: LD_VAR 0 2
60772: PPUSH
60773: LD_VAR 0 3
60777: PPUSH
60778: CALL_OW 331
// end ;
60782: LD_VAR 0 5
60786: RET
// export function Video ( mode ) ; begin
60787: LD_INT 0
60789: PPUSH
// ingame_video = mode ;
60790: LD_ADDR_OWVAR 52
60794: PUSH
60795: LD_VAR 0 1
60799: ST_TO_ADDR
// interface_hidden = mode ;
60800: LD_ADDR_OWVAR 54
60804: PUSH
60805: LD_VAR 0 1
60809: ST_TO_ADDR
// end ;
60810: LD_VAR 0 2
60814: RET
// export function Join ( array , element ) ; begin
60815: LD_INT 0
60817: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60818: LD_ADDR_VAR 0 3
60822: PUSH
60823: LD_VAR 0 1
60827: PPUSH
60828: LD_VAR 0 1
60832: PUSH
60833: LD_INT 1
60835: PLUS
60836: PPUSH
60837: LD_VAR 0 2
60841: PPUSH
60842: CALL_OW 1
60846: ST_TO_ADDR
// end ;
60847: LD_VAR 0 3
60851: RET
// export function JoinUnion ( array , element ) ; begin
60852: LD_INT 0
60854: PPUSH
// result := array union element ;
60855: LD_ADDR_VAR 0 3
60859: PUSH
60860: LD_VAR 0 1
60864: PUSH
60865: LD_VAR 0 2
60869: UNION
60870: ST_TO_ADDR
// end ;
60871: LD_VAR 0 3
60875: RET
// export function GetBehemoths ( side ) ; begin
60876: LD_INT 0
60878: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60879: LD_ADDR_VAR 0 2
60883: PUSH
60884: LD_INT 22
60886: PUSH
60887: LD_VAR 0 1
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 31
60898: PUSH
60899: LD_INT 25
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PPUSH
60910: CALL_OW 69
60914: ST_TO_ADDR
// end ;
60915: LD_VAR 0 2
60919: RET
// export function Shuffle ( array ) ; var i , index ; begin
60920: LD_INT 0
60922: PPUSH
60923: PPUSH
60924: PPUSH
// result := [ ] ;
60925: LD_ADDR_VAR 0 2
60929: PUSH
60930: EMPTY
60931: ST_TO_ADDR
// if not array then
60932: LD_VAR 0 1
60936: NOT
60937: IFFALSE 60941
// exit ;
60939: GO 61040
// Randomize ;
60941: CALL_OW 10
// for i = array downto 1 do
60945: LD_ADDR_VAR 0 3
60949: PUSH
60950: DOUBLE
60951: LD_VAR 0 1
60955: INC
60956: ST_TO_ADDR
60957: LD_INT 1
60959: PUSH
60960: FOR_DOWNTO
60961: IFFALSE 61038
// begin index := rand ( 1 , array ) ;
60963: LD_ADDR_VAR 0 4
60967: PUSH
60968: LD_INT 1
60970: PPUSH
60971: LD_VAR 0 1
60975: PPUSH
60976: CALL_OW 12
60980: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60981: LD_ADDR_VAR 0 2
60985: PUSH
60986: LD_VAR 0 2
60990: PPUSH
60991: LD_VAR 0 2
60995: PUSH
60996: LD_INT 1
60998: PLUS
60999: PPUSH
61000: LD_VAR 0 1
61004: PUSH
61005: LD_VAR 0 4
61009: ARRAY
61010: PPUSH
61011: CALL_OW 2
61015: ST_TO_ADDR
// array := Delete ( array , index ) ;
61016: LD_ADDR_VAR 0 1
61020: PUSH
61021: LD_VAR 0 1
61025: PPUSH
61026: LD_VAR 0 4
61030: PPUSH
61031: CALL_OW 3
61035: ST_TO_ADDR
// end ;
61036: GO 60960
61038: POP
61039: POP
// end ;
61040: LD_VAR 0 2
61044: RET
// export function GetBaseMaterials ( base ) ; begin
61045: LD_INT 0
61047: PPUSH
// result := [ 0 , 0 , 0 ] ;
61048: LD_ADDR_VAR 0 2
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: LIST
61066: ST_TO_ADDR
// if not base then
61067: LD_VAR 0 1
61071: NOT
61072: IFFALSE 61076
// exit ;
61074: GO 61125
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61076: LD_ADDR_VAR 0 2
61080: PUSH
61081: LD_VAR 0 1
61085: PPUSH
61086: LD_INT 1
61088: PPUSH
61089: CALL_OW 275
61093: PUSH
61094: LD_VAR 0 1
61098: PPUSH
61099: LD_INT 2
61101: PPUSH
61102: CALL_OW 275
61106: PUSH
61107: LD_VAR 0 1
61111: PPUSH
61112: LD_INT 3
61114: PPUSH
61115: CALL_OW 275
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: LIST
61124: ST_TO_ADDR
// end ;
61125: LD_VAR 0 2
61129: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61130: LD_INT 0
61132: PPUSH
61133: PPUSH
// result := array ;
61134: LD_ADDR_VAR 0 3
61138: PUSH
61139: LD_VAR 0 1
61143: ST_TO_ADDR
// if size > 0 then
61144: LD_VAR 0 2
61148: PUSH
61149: LD_INT 0
61151: GREATER
61152: IFFALSE 61198
// for i := array downto size do
61154: LD_ADDR_VAR 0 4
61158: PUSH
61159: DOUBLE
61160: LD_VAR 0 1
61164: INC
61165: ST_TO_ADDR
61166: LD_VAR 0 2
61170: PUSH
61171: FOR_DOWNTO
61172: IFFALSE 61196
// result := Delete ( result , result ) ;
61174: LD_ADDR_VAR 0 3
61178: PUSH
61179: LD_VAR 0 3
61183: PPUSH
61184: LD_VAR 0 3
61188: PPUSH
61189: CALL_OW 3
61193: ST_TO_ADDR
61194: GO 61171
61196: POP
61197: POP
// end ;
61198: LD_VAR 0 3
61202: RET
// export function ComExit ( unit ) ; var tmp ; begin
61203: LD_INT 0
61205: PPUSH
61206: PPUSH
// if not IsInUnit ( unit ) then
61207: LD_VAR 0 1
61211: PPUSH
61212: CALL_OW 310
61216: NOT
61217: IFFALSE 61221
// exit ;
61219: GO 61281
// tmp := IsInUnit ( unit ) ;
61221: LD_ADDR_VAR 0 3
61225: PUSH
61226: LD_VAR 0 1
61230: PPUSH
61231: CALL_OW 310
61235: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61236: LD_VAR 0 3
61240: PPUSH
61241: CALL_OW 247
61245: PUSH
61246: LD_INT 2
61248: EQUAL
61249: IFFALSE 61262
// ComExitVehicle ( unit ) else
61251: LD_VAR 0 1
61255: PPUSH
61256: CALL_OW 121
61260: GO 61271
// ComExitBuilding ( unit ) ;
61262: LD_VAR 0 1
61266: PPUSH
61267: CALL_OW 122
// result := tmp ;
61271: LD_ADDR_VAR 0 2
61275: PUSH
61276: LD_VAR 0 3
61280: ST_TO_ADDR
// end ;
61281: LD_VAR 0 2
61285: RET
// export function ComExitAll ( units ) ; var i ; begin
61286: LD_INT 0
61288: PPUSH
61289: PPUSH
// if not units then
61290: LD_VAR 0 1
61294: NOT
61295: IFFALSE 61299
// exit ;
61297: GO 61325
// for i in units do
61299: LD_ADDR_VAR 0 3
61303: PUSH
61304: LD_VAR 0 1
61308: PUSH
61309: FOR_IN
61310: IFFALSE 61323
// ComExit ( i ) ;
61312: LD_VAR 0 3
61316: PPUSH
61317: CALL 61203 0 1
61321: GO 61309
61323: POP
61324: POP
// end ;
61325: LD_VAR 0 2
61329: RET
// export function ResetHc ; begin
61330: LD_INT 0
61332: PPUSH
// InitHc ;
61333: CALL_OW 19
// hc_importance := 0 ;
61337: LD_ADDR_OWVAR 32
61341: PUSH
61342: LD_INT 0
61344: ST_TO_ADDR
// end ;
61345: LD_VAR 0 1
61349: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61350: LD_INT 0
61352: PPUSH
61353: PPUSH
61354: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61355: LD_ADDR_VAR 0 6
61359: PUSH
61360: LD_VAR 0 1
61364: PUSH
61365: LD_VAR 0 3
61369: PLUS
61370: PUSH
61371: LD_INT 2
61373: DIV
61374: ST_TO_ADDR
// if _x < 0 then
61375: LD_VAR 0 6
61379: PUSH
61380: LD_INT 0
61382: LESS
61383: IFFALSE 61400
// _x := _x * - 1 ;
61385: LD_ADDR_VAR 0 6
61389: PUSH
61390: LD_VAR 0 6
61394: PUSH
61395: LD_INT 1
61397: NEG
61398: MUL
61399: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61400: LD_ADDR_VAR 0 7
61404: PUSH
61405: LD_VAR 0 2
61409: PUSH
61410: LD_VAR 0 4
61414: PLUS
61415: PUSH
61416: LD_INT 2
61418: DIV
61419: ST_TO_ADDR
// if _y < 0 then
61420: LD_VAR 0 7
61424: PUSH
61425: LD_INT 0
61427: LESS
61428: IFFALSE 61445
// _y := _y * - 1 ;
61430: LD_ADDR_VAR 0 7
61434: PUSH
61435: LD_VAR 0 7
61439: PUSH
61440: LD_INT 1
61442: NEG
61443: MUL
61444: ST_TO_ADDR
// result := [ _x , _y ] ;
61445: LD_ADDR_VAR 0 5
61449: PUSH
61450: LD_VAR 0 6
61454: PUSH
61455: LD_VAR 0 7
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: ST_TO_ADDR
// end ;
61464: LD_VAR 0 5
61468: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61469: LD_INT 0
61471: PPUSH
61472: PPUSH
61473: PPUSH
61474: PPUSH
// task := GetTaskList ( unit ) ;
61475: LD_ADDR_VAR 0 7
61479: PUSH
61480: LD_VAR 0 1
61484: PPUSH
61485: CALL_OW 437
61489: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61490: LD_VAR 0 7
61494: NOT
61495: PUSH
61496: LD_VAR 0 1
61500: PPUSH
61501: LD_VAR 0 2
61505: PPUSH
61506: CALL_OW 308
61510: NOT
61511: AND
61512: IFFALSE 61516
// exit ;
61514: GO 61634
// if IsInArea ( unit , area ) then
61516: LD_VAR 0 1
61520: PPUSH
61521: LD_VAR 0 2
61525: PPUSH
61526: CALL_OW 308
61530: IFFALSE 61548
// begin ComMoveToArea ( unit , goAway ) ;
61532: LD_VAR 0 1
61536: PPUSH
61537: LD_VAR 0 3
61541: PPUSH
61542: CALL_OW 113
// exit ;
61546: GO 61634
// end ; if task [ 1 ] [ 1 ] <> M then
61548: LD_VAR 0 7
61552: PUSH
61553: LD_INT 1
61555: ARRAY
61556: PUSH
61557: LD_INT 1
61559: ARRAY
61560: PUSH
61561: LD_STRING M
61563: NONEQUAL
61564: IFFALSE 61568
// exit ;
61566: GO 61634
// x := task [ 1 ] [ 2 ] ;
61568: LD_ADDR_VAR 0 5
61572: PUSH
61573: LD_VAR 0 7
61577: PUSH
61578: LD_INT 1
61580: ARRAY
61581: PUSH
61582: LD_INT 2
61584: ARRAY
61585: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61586: LD_ADDR_VAR 0 6
61590: PUSH
61591: LD_VAR 0 7
61595: PUSH
61596: LD_INT 1
61598: ARRAY
61599: PUSH
61600: LD_INT 3
61602: ARRAY
61603: ST_TO_ADDR
// if InArea ( x , y , area ) then
61604: LD_VAR 0 5
61608: PPUSH
61609: LD_VAR 0 6
61613: PPUSH
61614: LD_VAR 0 2
61618: PPUSH
61619: CALL_OW 309
61623: IFFALSE 61634
// ComStop ( unit ) ;
61625: LD_VAR 0 1
61629: PPUSH
61630: CALL_OW 141
// end ;
61634: LD_VAR 0 4
61638: RET
// export function Abs ( value ) ; begin
61639: LD_INT 0
61641: PPUSH
// result := value ;
61642: LD_ADDR_VAR 0 2
61646: PUSH
61647: LD_VAR 0 1
61651: ST_TO_ADDR
// if value < 0 then
61652: LD_VAR 0 1
61656: PUSH
61657: LD_INT 0
61659: LESS
61660: IFFALSE 61677
// result := value * - 1 ;
61662: LD_ADDR_VAR 0 2
61666: PUSH
61667: LD_VAR 0 1
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: MUL
61676: ST_TO_ADDR
// end ;
61677: LD_VAR 0 2
61681: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61682: LD_INT 0
61684: PPUSH
61685: PPUSH
61686: PPUSH
61687: PPUSH
61688: PPUSH
61689: PPUSH
61690: PPUSH
61691: PPUSH
// if not unit or not building then
61692: LD_VAR 0 1
61696: NOT
61697: PUSH
61698: LD_VAR 0 2
61702: NOT
61703: OR
61704: IFFALSE 61708
// exit ;
61706: GO 61934
// x := GetX ( building ) ;
61708: LD_ADDR_VAR 0 4
61712: PUSH
61713: LD_VAR 0 2
61717: PPUSH
61718: CALL_OW 250
61722: ST_TO_ADDR
// y := GetY ( building ) ;
61723: LD_ADDR_VAR 0 6
61727: PUSH
61728: LD_VAR 0 2
61732: PPUSH
61733: CALL_OW 251
61737: ST_TO_ADDR
// d := GetDir ( building ) ;
61738: LD_ADDR_VAR 0 8
61742: PUSH
61743: LD_VAR 0 2
61747: PPUSH
61748: CALL_OW 254
61752: ST_TO_ADDR
// r := 4 ;
61753: LD_ADDR_VAR 0 9
61757: PUSH
61758: LD_INT 4
61760: ST_TO_ADDR
// for i := 1 to 5 do
61761: LD_ADDR_VAR 0 10
61765: PUSH
61766: DOUBLE
61767: LD_INT 1
61769: DEC
61770: ST_TO_ADDR
61771: LD_INT 5
61773: PUSH
61774: FOR_TO
61775: IFFALSE 61932
// begin _x := ShiftX ( x , d , r + i ) ;
61777: LD_ADDR_VAR 0 5
61781: PUSH
61782: LD_VAR 0 4
61786: PPUSH
61787: LD_VAR 0 8
61791: PPUSH
61792: LD_VAR 0 9
61796: PUSH
61797: LD_VAR 0 10
61801: PLUS
61802: PPUSH
61803: CALL_OW 272
61807: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61808: LD_ADDR_VAR 0 7
61812: PUSH
61813: LD_VAR 0 6
61817: PPUSH
61818: LD_VAR 0 8
61822: PPUSH
61823: LD_VAR 0 9
61827: PUSH
61828: LD_VAR 0 10
61832: PLUS
61833: PPUSH
61834: CALL_OW 273
61838: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61839: LD_VAR 0 5
61843: PPUSH
61844: LD_VAR 0 7
61848: PPUSH
61849: CALL_OW 488
61853: PUSH
61854: LD_VAR 0 5
61858: PPUSH
61859: LD_VAR 0 7
61863: PPUSH
61864: CALL_OW 428
61868: PPUSH
61869: CALL_OW 247
61873: PUSH
61874: LD_INT 3
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: IN
61884: NOT
61885: AND
61886: IFFALSE 61930
// begin ComMoveXY ( unit , _x , _y ) ;
61888: LD_VAR 0 1
61892: PPUSH
61893: LD_VAR 0 5
61897: PPUSH
61898: LD_VAR 0 7
61902: PPUSH
61903: CALL_OW 111
// result := [ _x , _y ] ;
61907: LD_ADDR_VAR 0 3
61911: PUSH
61912: LD_VAR 0 5
61916: PUSH
61917: LD_VAR 0 7
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: ST_TO_ADDR
// exit ;
61926: POP
61927: POP
61928: GO 61934
// end ; end ;
61930: GO 61774
61932: POP
61933: POP
// end ;
61934: LD_VAR 0 3
61938: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61939: LD_INT 0
61941: PPUSH
61942: PPUSH
61943: PPUSH
// result := 0 ;
61944: LD_ADDR_VAR 0 3
61948: PUSH
61949: LD_INT 0
61951: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61952: LD_VAR 0 1
61956: PUSH
61957: LD_INT 0
61959: LESS
61960: PUSH
61961: LD_VAR 0 1
61965: PUSH
61966: LD_INT 8
61968: GREATER
61969: OR
61970: PUSH
61971: LD_VAR 0 2
61975: PUSH
61976: LD_INT 0
61978: LESS
61979: OR
61980: PUSH
61981: LD_VAR 0 2
61985: PUSH
61986: LD_INT 8
61988: GREATER
61989: OR
61990: IFFALSE 61994
// exit ;
61992: GO 62069
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61994: LD_ADDR_VAR 0 4
61998: PUSH
61999: LD_INT 22
62001: PUSH
62002: LD_VAR 0 2
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PPUSH
62011: CALL_OW 69
62015: PUSH
62016: FOR_IN
62017: IFFALSE 62067
// begin un := UnitShoot ( i ) ;
62019: LD_ADDR_VAR 0 5
62023: PUSH
62024: LD_VAR 0 4
62028: PPUSH
62029: CALL_OW 504
62033: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62034: LD_VAR 0 5
62038: PPUSH
62039: CALL_OW 255
62043: PUSH
62044: LD_VAR 0 1
62048: EQUAL
62049: IFFALSE 62065
// begin result := un ;
62051: LD_ADDR_VAR 0 3
62055: PUSH
62056: LD_VAR 0 5
62060: ST_TO_ADDR
// exit ;
62061: POP
62062: POP
62063: GO 62069
// end ; end ;
62065: GO 62016
62067: POP
62068: POP
// end ;
62069: LD_VAR 0 3
62073: RET
// export function GetCargoBay ( units ) ; begin
62074: LD_INT 0
62076: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62077: LD_ADDR_VAR 0 2
62081: PUSH
62082: LD_VAR 0 1
62086: PPUSH
62087: LD_INT 2
62089: PUSH
62090: LD_INT 34
62092: PUSH
62093: LD_INT 12
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 34
62102: PUSH
62103: LD_INT 51
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 34
62112: PUSH
62113: LD_INT 32
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 34
62122: PUSH
62123: LD_EXP 25
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: PPUSH
62139: CALL_OW 72
62143: ST_TO_ADDR
// end ; end_of_file
62144: LD_VAR 0 2
62148: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
62149: LD_VAR 0 1
62153: PUSH
62154: LD_INT 200
62156: DOUBLE
62157: GREATEREQUAL
62158: IFFALSE 62166
62160: LD_INT 299
62162: DOUBLE
62163: LESSEQUAL
62164: IFTRUE 62168
62166: GO 62200
62168: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
62169: LD_VAR 0 1
62173: PPUSH
62174: LD_VAR 0 2
62178: PPUSH
62179: LD_VAR 0 3
62183: PPUSH
62184: LD_VAR 0 4
62188: PPUSH
62189: LD_VAR 0 5
62193: PPUSH
62194: CALL 20640 0 5
62198: GO 62277
62200: LD_INT 300
62202: DOUBLE
62203: GREATEREQUAL
62204: IFFALSE 62212
62206: LD_INT 399
62208: DOUBLE
62209: LESSEQUAL
62210: IFTRUE 62214
62212: GO 62276
62214: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
62215: LD_VAR 0 1
62219: PPUSH
62220: LD_VAR 0 2
62224: PPUSH
62225: LD_VAR 0 3
62229: PPUSH
62230: LD_VAR 0 4
62234: PPUSH
62235: LD_VAR 0 5
62239: PPUSH
62240: LD_VAR 0 6
62244: PPUSH
62245: LD_VAR 0 7
62249: PPUSH
62250: LD_VAR 0 8
62254: PPUSH
62255: LD_VAR 0 9
62259: PPUSH
62260: LD_VAR 0 10
62264: PPUSH
62265: LD_VAR 0 11
62269: PPUSH
62270: CALL 18528 0 11
62274: GO 62277
62276: POP
// end ;
62277: PPOPN 11
62279: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
62280: LD_VAR 0 1
62284: PPUSH
62285: LD_VAR 0 2
62289: PPUSH
62290: LD_VAR 0 3
62294: PPUSH
62295: LD_VAR 0 4
62299: PPUSH
62300: LD_VAR 0 5
62304: PPUSH
62305: CALL 20622 0 5
// end ; end_of_file
62309: PPOPN 5
62311: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
62312: LD_VAR 0 1
62316: PPUSH
62317: LD_VAR 0 2
62321: PPUSH
62322: LD_VAR 0 3
62326: PPUSH
62327: LD_VAR 0 4
62331: PPUSH
62332: LD_VAR 0 5
62336: PPUSH
62337: LD_VAR 0 6
62341: PPUSH
62342: CALL 7336 0 6
// end ;
62346: PPOPN 6
62348: END
