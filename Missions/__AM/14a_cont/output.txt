// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 62223 0 9
// PrepareAmerican ;
  46: CALL 4137 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 923 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 27844 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 27844 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 27844 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 451
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 413
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 411
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: PUSH
 366: LD_VAR 0 3
 370: PPUSH
 371: CALL_OW 258
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: AND
 380: PUSH
 381: LD_VAR 0 3
 385: PPUSH
 386: CALL_OW 248
 390: PUSH
 391: LD_INT 3
 393: EQUAL
 394: AND
 395: IFFALSE 409
// begin RuSci := i ;
 397: LD_ADDR_EXP 17
 401: PUSH
 402: LD_VAR 0 3
 406: ST_TO_ADDR
// break ;
 407: GO 411
// end ;
 409: GO 349
 411: POP
 412: POP
// end ; if not RuSci then
 413: LD_EXP 17
 417: NOT
 418: IFFALSE 451
// begin uc_nation := 3 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 3
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 4
 433: PPUSH
 434: LD_INT 10
 436: PPUSH
 437: CALL_OW 380
// RuSci := CreateHuman ;
 441: LD_ADDR_EXP 17
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 451: LD_ADDR_VAR 0 6
 455: PUSH
 456: LD_STRING 14a_JMMVeh
 458: PPUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 30
 489: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 490: LD_ADDR_VAR 0 7
 494: PUSH
 495: LD_STRING 14a_BurlakVeh
 497: PPUSH
 498: LD_INT 22
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 1
 506: PUSH
 507: LD_INT 51
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 30
 528: ST_TO_ADDR
// uc_direction := 4 ;
 529: LD_ADDR_OWVAR 24
 533: PUSH
 534: LD_INT 4
 536: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 6
 549: ARRAY
 550: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 551: LD_VAR 0 6
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_VAR 0 6
 564: PUSH
 565: LD_INT 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 6
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 6
 582: PUSH
 583: LD_INT 4
 585: ARRAY
 586: PPUSH
 587: LD_INT 60
 589: PPUSH
 590: LD_INT 80
 592: PPUSH
 593: CALL_OW 12
 597: PPUSH
 598: CALL 32684 0 5
// JMMVeh := CreateVehicle ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: CALL_OW 45
 611: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 64451 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 627: LD_VAR 0 6
 631: PUSH
 632: LD_INT 5
 634: ARRAY
 635: PUSH
 636: LD_INT 0
 638: NONEQUAL
 639: IFFALSE 659
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 6
 650: PUSH
 651: LD_INT 5
 653: ARRAY
 654: PPUSH
 655: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 659: LD_EXP 14
 663: PPUSH
 664: LD_VAR 0 4
 668: PPUSH
 669: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 673: LD_ADDR_OWVAR 21
 677: PUSH
 678: LD_VAR 0 7
 682: PUSH
 683: LD_INT 6
 685: ARRAY
 686: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 687: LD_VAR 0 7
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: PPUSH
 696: LD_VAR 0 7
 700: PUSH
 701: LD_INT 2
 703: ARRAY
 704: PPUSH
 705: LD_VAR 0 7
 709: PUSH
 710: LD_INT 3
 712: ARRAY
 713: PPUSH
 714: LD_VAR 0 7
 718: PUSH
 719: LD_INT 4
 721: ARRAY
 722: PPUSH
 723: LD_INT 60
 725: PPUSH
 726: LD_INT 80
 728: PPUSH
 729: CALL_OW 12
 733: PPUSH
 734: CALL 32684 0 5
// BurlakVeh := CreateVehicle ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 748: LD_VAR 0 5
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 64451 0 3
 763: NOT
 764: IFFALSE 784
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 766: LD_VAR 0 5
 770: PPUSH
 771: LD_INT 233
 773: PPUSH
 774: LD_INT 85
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 784: LD_VAR 0 7
 788: PUSH
 789: LD_INT 5
 791: ARRAY
 792: PUSH
 793: LD_INT 0
 795: NONEQUAL
 796: IFFALSE 816
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_VAR 0 7
 807: PUSH
 808: LD_INT 5
 810: ARRAY
 811: PPUSH
 812: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 816: LD_EXP 15
 820: PPUSH
 821: LD_VAR 0 5
 825: PPUSH
 826: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_INT 178
 837: PUSH
 838: LD_INT 91
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 137
 847: PUSH
 848: LD_INT 83
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 157
 857: PUSH
 858: LD_INT 75
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 162
 867: PUSH
 868: LD_INT 67
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 887: LD_INT 4
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 58
// end ; end_of_file
 918: LD_VAR 0 1
 922: RET
// export function Action ; begin
 923: LD_INT 0
 925: PPUSH
// InGameOn ;
 926: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 930: LD_INT 221
 932: PPUSH
 933: LD_INT 80
 935: PPUSH
 936: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 940: LD_EXP 14
 944: PUSH
 945: LD_EXP 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: LD_INT 217
 956: PPUSH
 957: LD_INT 79
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$7 ) ;
 964: LD_INT 245
 966: PPUSH
 967: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 971: LD_EXP 14
 975: PUSH
 976: LD_EXP 15
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 989: LD_EXP 15
 993: PPUSH
 994: LD_STRING D2-Bur-1
 996: PPUSH
 997: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1001: LD_EXP 14
1005: PPUSH
1006: LD_STRING D2-JMM-1
1008: PPUSH
1009: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1013: LD_INT 18
1015: PPUSH
1016: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1020: LD_EXP 15
1024: PPUSH
1025: LD_EXP 14
1029: PPUSH
1030: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1034: LD_EXP 15
1038: PPUSH
1039: LD_STRING D2-Bur-2
1041: PPUSH
1042: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1046: LD_EXP 15
1050: PPUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 2
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: PPUSH
1066: LD_EXP 15
1070: PPUSH
1071: CALL_OW 74
1075: PPUSH
1076: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1080: LD_EXP 14
1084: PPUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 2
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL_OW 69
1099: PPUSH
1100: LD_EXP 14
1104: PPUSH
1105: CALL_OW 74
1109: PPUSH
1110: CALL_OW 120
// wait ( 0 0$1 ) ;
1114: LD_INT 35
1116: PPUSH
1117: CALL_OW 67
// InGameOff ;
1121: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1125: LD_STRING MArtPickup
1127: PPUSH
1128: CALL_OW 337
// end ;
1132: LD_VAR 0 1
1136: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1137: LD_EXP 22
1141: PPUSH
1142: LD_INT 101
1144: PUSH
1145: LD_INT 7
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: PUSH
1157: LD_EXP 8
1161: NOT
1162: AND
1163: IFFALSE 1192
1165: GO 1167
1167: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING D3-Bur-1
1175: PPUSH
1176: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1180: LD_EXP 14
1184: PPUSH
1185: LD_STRING D3-JMM-1
1187: PPUSH
1188: CALL_OW 88
// end ;
1192: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1193: LD_INT 5
1195: PPUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 70
1210: IFFALSE 1545
1212: GO 1214
1214: DISABLE
// begin wait ( 0 0$3 ) ;
1215: LD_INT 105
1217: PPUSH
1218: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1222: LD_INT 139
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 7
1230: PPUSH
1231: LD_INT 20
1233: NEG
1234: PPUSH
1235: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1239: LD_INT 139
1241: PPUSH
1242: LD_INT 43
1244: PPUSH
1245: LD_INT 7
1247: PPUSH
1248: CALL_OW 331
// DialogueOn ;
1252: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1256: LD_EXP 14
1260: PPUSH
1261: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1265: LD_EXP 14
1269: PPUSH
1270: LD_STRING D3a-JMM-1
1272: PPUSH
1273: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1277: LD_EXP 15
1281: PPUSH
1282: LD_STRING D3a-Bur-1
1284: PPUSH
1285: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_STRING D3a-JMM-2
1296: PPUSH
1297: CALL_OW 88
// if Joan then
1301: LD_EXP 16
1305: IFFALSE 1321
// SayRadio ( Joan , D3a-Joan-2 ) else
1307: LD_EXP 16
1311: PPUSH
1312: LD_STRING D3a-Joan-2
1314: PPUSH
1315: CALL_OW 94
1319: GO 1333
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1321: LD_EXP 17
1325: PPUSH
1326: LD_STRING D3a-RSci1-2
1328: PPUSH
1329: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_STRING D3a-Huck-2
1340: PPUSH
1341: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_STRING D3a-Pow-2
1352: PPUSH
1353: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1357: LD_EXP 18
1361: PPUSH
1362: LD_STRING D3a-Huck-3
1364: PPUSH
1365: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1369: LD_EXP 19
1373: PPUSH
1374: LD_STRING D3a-Pow-3
1376: PPUSH
1377: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1381: LD_EXP 18
1385: PPUSH
1386: LD_STRING D3a-Huck-4
1388: PPUSH
1389: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1393: LD_EXP 14
1397: PPUSH
1398: LD_STRING D3a-JMM-4
1400: PPUSH
1401: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1405: LD_EXP 15
1409: PPUSH
1410: LD_STRING D3a-Bur-4
1412: PPUSH
1413: CALL_OW 88
// if Joan then
1417: LD_EXP 16
1421: IFFALSE 1437
// SayRadio ( Joan , D3a-Joan-4 ) else
1423: LD_EXP 16
1427: PPUSH
1428: LD_STRING D3a-Joan-4
1430: PPUSH
1431: CALL_OW 94
1435: GO 1449
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1437: LD_EXP 17
1441: PPUSH
1442: LD_STRING D3a-RSci1-4
1444: PPUSH
1445: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1449: LD_INT 133
1451: PPUSH
1452: LD_INT 43
1454: PPUSH
1455: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1459: LD_INT 10
1461: PPUSH
1462: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1466: LD_EXP 14
1470: PPUSH
1471: LD_STRING D3a-JMM-5
1473: PPUSH
1474: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1478: LD_EXP 15
1482: PPUSH
1483: LD_STRING D3a-Bur-5
1485: PPUSH
1486: CALL_OW 88
// DialogueOff ;
1490: CALL_OW 7
// seenBase := true ;
1494: LD_ADDR_EXP 8
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1502: LD_INT 525
1504: PUSH
1505: LD_INT 420
1507: PUSH
1508: LD_INT 315
1510: PUSH
1511: LD_INT 280
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PPUSH
1526: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1530: LD_EXP 21
1534: PPUSH
1535: LD_INT 142
1537: PPUSH
1538: LD_INT 52
1540: PPUSH
1541: CALL_OW 116
// end ;
1545: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1546: LD_EXP 8
1550: NOT
1551: PUSH
1552: LD_EXP 4
1556: NOT
1557: AND
1558: IFFALSE 1578
1560: GO 1562
1562: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1563: LD_EXP 21
1567: PPUSH
1568: LD_INT 142
1570: PPUSH
1571: LD_INT 52
1573: PPUSH
1574: CALL_OW 116
1578: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// contaminateTime := tick ;
1583: LD_ADDR_EXP 3
1587: PUSH
1588: LD_OWVAR 1
1592: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1593: LD_INT 175
1595: PPUSH
1596: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1600: LD_ADDR_VAR 0 5
1604: PUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 469
1612: ST_TO_ADDR
// if art then
1613: LD_VAR 0 5
1617: IFFALSE 1670
// if art [ 1 ] in [ 157 , 162 ] and art [ 2 ] in [ 75 , 67 ] then
1619: LD_VAR 0 5
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PUSH
1628: LD_INT 157
1630: PUSH
1631: LD_INT 162
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: IN
1638: PUSH
1639: LD_VAR 0 5
1643: PUSH
1644: LD_INT 2
1646: ARRAY
1647: PUSH
1648: LD_INT 75
1650: PUSH
1651: LD_INT 67
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: IN
1658: AND
1659: IFFALSE 1670
// begin YouLost ( Artefact ) ;
1661: LD_STRING Artefact
1663: PPUSH
1664: CALL_OW 104
// exit ;
1668: GO 1826
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1670: LD_EXP 14
1674: PPUSH
1675: CALL_OW 302
1679: PUSH
1680: LD_EXP 15
1684: PPUSH
1685: CALL_OW 302
1689: AND
1690: IFFALSE 1767
// begin DialogueOn ;
1692: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1696: LD_EXP 14
1700: PPUSH
1701: LD_STRING D6a-JMM-1
1703: PPUSH
1704: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1708: LD_EXP 15
1712: PPUSH
1713: LD_STRING D6a-Bur-1
1715: PPUSH
1716: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1720: LD_EXP 14
1724: PPUSH
1725: LD_STRING D6c-JMM-1
1727: PPUSH
1728: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1732: LD_EXP 15
1736: PPUSH
1737: LD_STRING D6c-Bur-1
1739: PPUSH
1740: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1744: LD_EXP 14
1748: PPUSH
1749: LD_STRING D6c-JMM-2
1751: PPUSH
1752: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1756: LD_STRING MBase
1758: PPUSH
1759: CALL_OW 337
// DialogueOff ;
1763: CALL_OW 7
// end ; bombExploded := true ;
1767: LD_ADDR_EXP 4
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1775: LD_INT 6300
1777: PUSH
1778: LD_INT 5250
1780: PUSH
1781: LD_INT 4200
1783: PUSH
1784: LD_INT 3500
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_OWVAR 67
1797: ARRAY
1798: PPUSH
1799: CALL_OW 67
// if IsOk ( JMM ) then
1803: LD_EXP 14
1807: PPUSH
1808: CALL_OW 302
1812: IFFALSE 1826
// Say ( JMM , D8-JMM-1 ) ;
1814: LD_EXP 14
1818: PPUSH
1819: LD_STRING D8-JMM-1
1821: PPUSH
1822: CALL_OW 88
// end ;
1826: LD_VAR 0 4
1830: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1831: LD_EXP 9
1835: PUSH
1836: LD_EXP 7
1840: NOT
1841: AND
1842: PUSH
1843: LD_EXP 4
1847: AND
1848: IFFALSE 1903
1850: GO 1852
1852: DISABLE
// begin enable ;
1853: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1854: LD_INT 9
1856: PPUSH
1857: LD_INT 22
1859: PUSH
1860: LD_INT 7
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: PPUSH
1867: CALL_OW 70
1871: IFFALSE 1889
// stevensTimer := stevensTimer - 0 0$30 else
1873: LD_ADDR_EXP 9
1877: PUSH
1878: LD_EXP 9
1882: PUSH
1883: LD_INT 1050
1885: MINUS
1886: ST_TO_ADDR
1887: GO 1903
// stevensTimer := stevensTimer - 0 0$1 ;
1889: LD_ADDR_EXP 9
1893: PUSH
1894: LD_EXP 9
1898: PUSH
1899: LD_INT 35
1901: MINUS
1902: ST_TO_ADDR
// end ;
1903: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1904: LD_EXP 9
1908: PUSH
1909: LD_INT 0
1911: LESSEQUAL
1912: PUSH
1913: LD_EXP 7
1917: NOT
1918: AND
1919: IFFALSE 2083
1921: GO 1923
1923: DISABLE
1924: LD_INT 0
1926: PPUSH
1927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1928: LD_ADDR_VAR 0 2
1932: PUSH
1933: LD_INT 22
1935: PUSH
1936: LD_INT 1
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 25
1945: PUSH
1946: LD_INT 4
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PPUSH
1957: CALL_OW 69
1961: ST_TO_ADDR
// for i in tmp do
1962: LD_ADDR_VAR 0 1
1966: PUSH
1967: LD_VAR 0 2
1971: PUSH
1972: FOR_IN
1973: IFFALSE 2026
// begin if IsInUnit ( i ) then
1975: LD_VAR 0 1
1979: PPUSH
1980: CALL_OW 310
1984: IFFALSE 1997
// ComExitBuilding ( i ) else
1986: LD_VAR 0 1
1990: PPUSH
1991: CALL_OW 122
1995: GO 2024
// if not HasTask ( i ) then
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 314
2006: NOT
2007: IFFALSE 2024
// ComMoveXY ( i , 29 , 56 ) ;
2009: LD_VAR 0 1
2013: PPUSH
2014: LD_INT 29
2016: PPUSH
2017: LD_INT 56
2019: PPUSH
2020: CALL_OW 111
// end ;
2024: GO 1972
2026: POP
2027: POP
// repeat wait ( 0 0$1 ) ;
2028: LD_INT 35
2030: PPUSH
2031: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2035: LD_INT 8
2037: PPUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 1
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 25
2050: PUSH
2051: LD_INT 4
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PPUSH
2062: CALL_OW 70
2066: IFFALSE 2028
// if planCaptured then
2068: LD_EXP 7
2072: IFFALSE 2076
// exit ;
2074: GO 2083
// YouLost ( Time ) ;
2076: LD_STRING Time
2078: PPUSH
2079: CALL_OW 104
// end ;
2083: PPOPN 2
2085: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2086: LD_INT 22
2088: PUSH
2089: LD_INT 7
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: PUSH
2096: LD_INT 92
2098: PUSH
2099: LD_INT 142
2101: PUSH
2102: LD_INT 52
2104: PUSH
2105: LD_INT 27
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: PPUSH
2118: CALL_OW 69
2122: PUSH
2123: LD_EXP 3
2127: PUSH
2128: LD_INT 6000
2130: PLUS
2131: PUSH
2132: LD_OWVAR 1
2136: GREATER
2137: AND
2138: PUSH
2139: LD_EXP 4
2143: AND
2144: IFFALSE 2199
2146: GO 2148
2148: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2149: LD_EXP 14
2153: PUSH
2154: LD_EXP 15
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: PPUSH
2163: CALL_OW 85
// DialogueOn ;
2167: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2171: LD_EXP 14
2175: PPUSH
2176: LD_STRING D6b-JMM-1
2178: PPUSH
2179: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2183: LD_EXP 15
2187: PPUSH
2188: LD_STRING D6b-Bur-1
2190: PPUSH
2191: CALL_OW 88
// DialogueOff ;
2195: CALL_OW 7
// end ;
2199: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2200: LD_EXP 15
2204: PPUSH
2205: LD_INT 142
2207: PPUSH
2208: LD_INT 52
2210: PPUSH
2211: CALL_OW 297
2215: PUSH
2216: LD_INT 25
2218: LESS
2219: PUSH
2220: LD_EXP 15
2224: PPUSH
2225: CALL_OW 310
2229: PPUSH
2230: LD_INT 142
2232: PPUSH
2233: LD_INT 52
2235: PPUSH
2236: CALL_OW 297
2240: PUSH
2241: LD_INT 25
2243: LESS
2244: OR
2245: PUSH
2246: LD_EXP 15
2250: PPUSH
2251: CALL_OW 256
2255: PUSH
2256: LD_INT 1000
2258: LESS
2259: AND
2260: PUSH
2261: LD_EXP 3
2265: PUSH
2266: LD_INT 6000
2268: PLUS
2269: PUSH
2270: LD_OWVAR 1
2274: GREATER
2275: AND
2276: PUSH
2277: LD_EXP 4
2281: AND
2282: IFFALSE 2315
2284: GO 2286
2286: DISABLE
// begin DialogueOn ;
2287: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2291: LD_EXP 15
2295: PPUSH
2296: LD_STRING D7-Bur-1
2298: PPUSH
2299: CALL_OW 88
// enteredContaminatedArea := true ;
2303: LD_ADDR_EXP 5
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// DialogueOff ;
2311: CALL_OW 7
// end ;
2315: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2316: LD_EXP 14
2320: PPUSH
2321: LD_INT 142
2323: PPUSH
2324: LD_INT 52
2326: PPUSH
2327: CALL_OW 297
2331: PUSH
2332: LD_INT 25
2334: LESS
2335: PUSH
2336: LD_EXP 14
2340: PPUSH
2341: CALL_OW 310
2345: PPUSH
2346: LD_INT 142
2348: PPUSH
2349: LD_INT 52
2351: PPUSH
2352: CALL_OW 297
2356: PUSH
2357: LD_INT 25
2359: LESS
2360: OR
2361: PUSH
2362: LD_EXP 14
2366: PPUSH
2367: CALL_OW 256
2371: PUSH
2372: LD_INT 1000
2374: LESS
2375: AND
2376: PUSH
2377: LD_EXP 3
2381: PUSH
2382: LD_INT 6000
2384: PLUS
2385: PUSH
2386: LD_OWVAR 1
2390: GREATER
2391: AND
2392: PUSH
2393: LD_EXP 4
2397: AND
2398: IFFALSE 2431
2400: GO 2402
2402: DISABLE
// begin DialogueOn ;
2403: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2407: LD_EXP 14
2411: PPUSH
2412: LD_STRING D7-JMM-1
2414: PPUSH
2415: CALL_OW 88
// enteredContaminatedArea := true ;
2419: LD_ADDR_EXP 5
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// DialogueOff ;
2427: CALL_OW 7
// end ;
2431: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2432: LD_EXP 6
2436: PUSH
2437: LD_EXP 14
2441: PPUSH
2442: CALL_OW 302
2446: AND
2447: PUSH
2448: LD_EXP 15
2452: PPUSH
2453: CALL_OW 302
2457: AND
2458: IFFALSE 2527
2460: GO 2462
2462: DISABLE
// begin DialogueOn ;
2463: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2467: LD_EXP 14
2471: PUSH
2472: LD_EXP 15
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: PPUSH
2481: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2485: LD_EXP 14
2489: PPUSH
2490: LD_STRING D4-JMM-1
2492: PPUSH
2493: CALL_OW 88
// if not bombExploded then
2497: LD_EXP 4
2501: NOT
2502: IFFALSE 2516
// Say ( Burlak , D4-Bur-1 ) ;
2504: LD_EXP 15
2508: PPUSH
2509: LD_STRING D4-Bur-1
2511: PPUSH
2512: CALL_OW 88
// DialogueOff ;
2516: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2520: LD_STRING MReturn
2522: PPUSH
2523: CALL_OW 337
// end ;
2527: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2528: LD_EXP 7
2532: NOT
2533: PUSH
2534: LD_INT 22
2536: PUSH
2537: LD_INT 7
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: PUSH
2544: LD_INT 91
2546: PUSH
2547: LD_INT 9
2549: PUSH
2550: LD_INT 6
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: LIST
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PPUSH
2562: CALL_OW 69
2566: AND
2567: IFFALSE 2644
2569: GO 2571
2571: DISABLE
// begin DialogueOn ;
2572: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2576: LD_INT 55
2578: PPUSH
2579: LD_INT 11
2581: PPUSH
2582: LD_INT 7
2584: PPUSH
2585: LD_INT 6
2587: NEG
2588: PPUSH
2589: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2593: LD_INT 55
2595: PPUSH
2596: LD_INT 11
2598: PPUSH
2599: LD_INT 7
2601: PPUSH
2602: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2606: LD_EXP 15
2610: PPUSH
2611: LD_STRING D9-Bur-1
2613: PPUSH
2614: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2618: LD_EXP 14
2622: PPUSH
2623: LD_STRING D9-JMM-1
2625: PPUSH
2626: CALL_OW 88
// DialogueOff ;
2630: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2634: LD_INT 9
2636: PPUSH
2637: LD_INT 7
2639: PPUSH
2640: CALL_OW 235
// end ;
2644: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2645: LD_INT 9
2647: PPUSH
2648: LD_INT 22
2650: PUSH
2651: LD_INT 7
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PPUSH
2658: CALL_OW 70
2662: IFFALSE 2698
2664: GO 2666
2666: DISABLE
// begin wait ( 0 0$07 ) ;
2667: LD_INT 245
2669: PPUSH
2670: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2674: LD_EXP 14
2678: PPUSH
2679: LD_STRING D10b-JMM-1
2681: PPUSH
2682: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2686: LD_EXP 15
2690: PPUSH
2691: LD_STRING D10b-Bur-1
2693: PPUSH
2694: CALL_OW 88
// end ;
2698: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2699: LD_EXP 9
2703: PUSH
2704: LD_INT 22
2706: PUSH
2707: LD_INT 1
2709: PUSH
2710: EMPTY
2711: LIST
2712: LIST
2713: PUSH
2714: LD_INT 25
2716: PUSH
2717: LD_INT 4
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 26
2726: PUSH
2727: LD_INT 1
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: LIST
2738: PPUSH
2739: CALL_OW 69
2743: AND
2744: PUSH
2745: LD_INT 5
2747: PPUSH
2748: CALL_OW 255
2752: PUSH
2753: LD_INT 7
2755: EQUAL
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 25
2769: PUSH
2770: LD_INT 1
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: PUSH
2786: LD_INT 0
2788: EQUAL
2789: OR
2790: AND
2791: IFFALSE 3380
2793: GO 2795
2795: DISABLE
2796: LD_INT 0
2798: PPUSH
// begin case Query ( QKill ) of 1 :
2799: LD_STRING QKill
2801: PPUSH
2802: CALL_OW 97
2806: PUSH
2807: LD_INT 1
2809: DOUBLE
2810: EQUAL
2811: IFTRUE 2815
2813: GO 3368
2815: POP
// begin DialogueOn ;
2816: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2820: LD_EXP 14
2824: PPUSH
2825: LD_STRING D10a-JMM-1
2827: PPUSH
2828: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2832: LD_EXP 15
2836: PPUSH
2837: LD_STRING D10a-Bur-1
2839: PPUSH
2840: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2844: LD_EXP 14
2848: PPUSH
2849: LD_STRING D10a-JMM-2
2851: PPUSH
2852: CALL_OW 88
// if IsOk ( Stevens ) then
2856: LD_EXP 18
2860: PPUSH
2861: CALL_OW 302
2865: IFFALSE 2881
// Say ( Stevens , D10a-Huck-2 ) else
2867: LD_EXP 18
2871: PPUSH
2872: LD_STRING D10a-Huck-2
2874: PPUSH
2875: CALL_OW 88
2879: GO 2932
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2881: LD_INT 22
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 25
2893: PUSH
2894: LD_INT 4
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: LD_INT 26
2903: PUSH
2904: LD_INT 1
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: LIST
2915: PPUSH
2916: CALL_OW 69
2920: PUSH
2921: LD_INT 1
2923: ARRAY
2924: PPUSH
2925: LD_STRING D10a-ASci1-3
2927: PPUSH
2928: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2932: LD_EXP 14
2936: PPUSH
2937: LD_STRING D10a-JMM-4
2939: PPUSH
2940: CALL_OW 88
// if IsOk ( Stevens ) then
2944: LD_EXP 18
2948: PPUSH
2949: CALL_OW 302
2953: IFFALSE 2967
// Say ( Stevens , D10a-Huck-3 ) ;
2955: LD_EXP 18
2959: PPUSH
2960: LD_STRING D10a-Huck-3
2962: PPUSH
2963: CALL_OW 88
// DialogueOff ;
2967: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2971: LD_INT 1
2973: PPUSH
2974: LD_INT 7
2976: PPUSH
2977: LD_INT 1
2979: PPUSH
2980: LD_INT 1
2982: PPUSH
2983: CALL_OW 80
// planCaptured := true ;
2987: LD_ADDR_EXP 7
2991: PUSH
2992: LD_INT 1
2994: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2995: LD_STRING MEnd
2997: PPUSH
2998: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
3002: LD_STRING ACH_DIPLOMACY
3004: PPUSH
3005: CALL_OW 543
// canEnd := true ;
3009: LD_ADDR_EXP 10
3013: PUSH
3014: LD_INT 1
3016: ST_TO_ADDR
// missionTime := tick ;
3017: LD_ADDR_EXP 11
3021: PUSH
3022: LD_OWVAR 1
3026: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3027: LD_INT 35
3029: PPUSH
3030: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3034: LD_INT 22
3036: PUSH
3037: LD_INT 1
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: LD_INT 3
3046: PUSH
3047: LD_INT 50
3049: PUSH
3050: EMPTY
3051: LIST
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PPUSH
3061: CALL_OW 69
3065: IFFALSE 3181
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3067: LD_ADDR_VAR 0 1
3071: PUSH
3072: LD_INT 22
3074: PUSH
3075: LD_INT 1
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 25
3084: PUSH
3085: LD_INT 4
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PPUSH
3096: CALL_OW 69
3100: PUSH
3101: FOR_IN
3102: IFFALSE 3179
// begin if IsInUnit ( i ) then
3104: LD_VAR 0 1
3108: PPUSH
3109: CALL_OW 310
3113: IFFALSE 3126
// ComExitBuilding ( i ) else
3115: LD_VAR 0 1
3119: PPUSH
3120: CALL_OW 122
3124: GO 3177
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3126: LD_VAR 0 1
3130: PPUSH
3131: LD_INT 22
3133: PUSH
3134: LD_INT 1
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: PUSH
3141: LD_INT 3
3143: PUSH
3144: LD_INT 50
3146: PUSH
3147: EMPTY
3148: LIST
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 69
3162: PPUSH
3163: LD_VAR 0 1
3167: PPUSH
3168: CALL_OW 74
3172: PPUSH
3173: CALL_OW 128
// end ;
3177: GO 3101
3179: POP
3180: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3181: LD_INT 22
3183: PUSH
3184: LD_INT 1
3186: PUSH
3187: EMPTY
3188: LIST
3189: LIST
3190: PUSH
3191: LD_INT 3
3193: PUSH
3194: LD_INT 50
3196: PUSH
3197: EMPTY
3198: LIST
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: PPUSH
3208: CALL_OW 69
3212: NOT
3213: IFFALSE 3027
// repeat wait ( 3 ) ;
3215: LD_INT 3
3217: PPUSH
3218: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3222: LD_ADDR_VAR 0 1
3226: PUSH
3227: LD_INT 22
3229: PUSH
3230: LD_INT 1
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: LD_INT 21
3239: PUSH
3240: LD_INT 1
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: PPUSH
3251: CALL_OW 69
3255: PUSH
3256: FOR_IN
3257: IFFALSE 3333
// begin if IsInArea ( i , stevensEscapeArea ) then
3259: LD_VAR 0 1
3263: PPUSH
3264: LD_INT 8
3266: PPUSH
3267: CALL_OW 308
3271: IFFALSE 3284
// begin RemoveUnit ( i ) ;
3273: LD_VAR 0 1
3277: PPUSH
3278: CALL_OW 64
// continue ;
3282: GO 3256
// end ; if IsInUnit ( i ) then
3284: LD_VAR 0 1
3288: PPUSH
3289: CALL_OW 310
3293: IFFALSE 3304
// ComExitBuilding ( i ) ;
3295: LD_VAR 0 1
3299: PPUSH
3300: CALL_OW 122
// if not HasTask ( i ) then
3304: LD_VAR 0 1
3308: PPUSH
3309: CALL_OW 314
3313: NOT
3314: IFFALSE 3331
// ComMoveXY ( i , 28 , 55 ) ;
3316: LD_VAR 0 1
3320: PPUSH
3321: LD_INT 28
3323: PPUSH
3324: LD_INT 55
3326: PPUSH
3327: CALL_OW 111
// end ;
3331: GO 3256
3333: POP
3334: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3335: LD_INT 22
3337: PUSH
3338: LD_INT 1
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PUSH
3345: LD_INT 21
3347: PUSH
3348: LD_INT 1
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 69
3363: NOT
3364: IFFALSE 3215
// end ; 2 :
3366: GO 3380
3368: LD_INT 2
3370: DOUBLE
3371: EQUAL
3372: IFTRUE 3376
3374: GO 3379
3376: POP
// ; end ;
3377: GO 3380
3379: POP
// end ;
3380: PPOPN 1
3382: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3383: LD_EXP 10
3387: IFFALSE 3744
3389: GO 3391
3391: DISABLE
3392: LD_INT 0
3394: PPUSH
3395: PPUSH
3396: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3397: LD_INT 10
3399: PPUSH
3400: LD_INT 1
3402: PPUSH
3403: CALL_OW 424
// if Difficulty < 2 then
3407: LD_OWVAR 67
3411: PUSH
3412: LD_INT 2
3414: LESS
3415: IFFALSE 3419
// exit ;
3417: GO 3744
// uc_side := 4 ;
3419: LD_ADDR_OWVAR 20
3423: PUSH
3424: LD_INT 4
3426: ST_TO_ADDR
// uc_nation := 1 ;
3427: LD_ADDR_OWVAR 21
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// InitHc ;
3435: CALL_OW 19
// tmp := [ ] ;
3439: LD_ADDR_VAR 0 3
3443: PUSH
3444: EMPTY
3445: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3446: LD_INT 0
3448: PPUSH
3449: LD_INT 5
3451: PPUSH
3452: LD_INT 10
3454: PPUSH
3455: CALL_OW 380
// un := CreateHuman ;
3459: LD_ADDR_VAR 0 1
3463: PUSH
3464: CALL_OW 44
3468: ST_TO_ADDR
// tmp := [ un ] ;
3469: LD_ADDR_VAR 0 3
3473: PUSH
3474: LD_VAR 0 1
3478: PUSH
3479: EMPTY
3480: LIST
3481: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3482: LD_VAR 0 1
3486: PPUSH
3487: LD_INT 226
3489: PPUSH
3490: LD_INT 86
3492: PPUSH
3493: LD_INT 0
3495: PPUSH
3496: CALL_OW 48
// ComHold ( un ) ;
3500: LD_VAR 0 1
3504: PPUSH
3505: CALL_OW 140
// for i = 1 to 3 do
3509: LD_ADDR_VAR 0 2
3513: PUSH
3514: DOUBLE
3515: LD_INT 1
3517: DEC
3518: ST_TO_ADDR
3519: LD_INT 3
3521: PUSH
3522: FOR_TO
3523: IFFALSE 3622
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3525: LD_INT 0
3527: PPUSH
3528: LD_INT 1
3530: PPUSH
3531: LD_INT 8
3533: PPUSH
3534: CALL_OW 380
// un := CreateHuman ;
3538: LD_ADDR_VAR 0 1
3542: PUSH
3543: CALL_OW 44
3547: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3548: LD_VAR 0 1
3552: PPUSH
3553: LD_INT 5
3555: PPUSH
3556: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3560: LD_VAR 0 1
3564: PPUSH
3565: LD_INT 215
3567: PUSH
3568: LD_INT 217
3570: PUSH
3571: LD_INT 219
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: LIST
3578: PUSH
3579: LD_VAR 0 2
3583: ARRAY
3584: PPUSH
3585: LD_INT 76
3587: PPUSH
3588: LD_INT 0
3590: PPUSH
3591: CALL_OW 48
// ComCrawl ( un ) ;
3595: LD_VAR 0 1
3599: PPUSH
3600: CALL_OW 137
// tmp := tmp ^ un ;
3604: LD_ADDR_VAR 0 3
3608: PUSH
3609: LD_VAR 0 3
3613: PUSH
3614: LD_VAR 0 1
3618: ADD
3619: ST_TO_ADDR
// end ;
3620: GO 3522
3622: POP
3623: POP
// repeat wait ( 0 0$1 ) ;
3624: LD_INT 35
3626: PPUSH
3627: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3631: LD_VAR 0 3
3635: PPUSH
3636: LD_INT 24
3638: PUSH
3639: LD_INT 1000
3641: PUSH
3642: EMPTY
3643: LIST
3644: LIST
3645: PPUSH
3646: CALL_OW 72
3650: NOT
3651: IFFALSE 3624
// for i in tmp do
3653: LD_ADDR_VAR 0 2
3657: PUSH
3658: LD_VAR 0 3
3662: PUSH
3663: FOR_IN
3664: IFFALSE 3742
// begin wait ( 0 0$1 ) ;
3666: LD_INT 35
3668: PPUSH
3669: CALL_OW 67
// if Crawls ( i ) then
3673: LD_VAR 0 2
3677: PPUSH
3678: CALL_OW 318
3682: IFFALSE 3695
// ComWalk ( i ) else
3684: LD_VAR 0 2
3688: PPUSH
3689: CALL_OW 138
3693: GO 3740
// if GetClass ( i ) = class_sniper then
3695: LD_VAR 0 2
3699: PPUSH
3700: CALL_OW 257
3704: PUSH
3705: LD_INT 5
3707: EQUAL
3708: IFFALSE 3726
// ComAttackSoporific ( i , JMM ) else
3710: LD_VAR 0 2
3714: PPUSH
3715: LD_EXP 14
3719: PPUSH
3720: CALL_OW 166
3724: GO 3740
// ComAttackUnit ( i , JMM ) ;
3726: LD_VAR 0 2
3730: PPUSH
3731: LD_EXP 14
3735: PPUSH
3736: CALL_OW 115
// end ;
3740: GO 3663
3742: POP
3743: POP
// end ;
3744: PPOPN 3
3746: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3747: LD_EXP 7
3751: NOT
3752: PUSH
3753: LD_INT 1
3755: PPUSH
3756: CALL_OW 301
3760: AND
3761: IFFALSE 3773
3763: GO 3765
3765: DISABLE
// YouLost ( Lab ) ;
3766: LD_STRING Lab
3768: PPUSH
3769: CALL_OW 104
3773: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ [ f_not , [ f_empty ] ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3774: LD_INT 10
3776: PPUSH
3777: LD_INT 22
3779: PUSH
3780: LD_INT 7
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: PPUSH
3787: CALL_OW 70
3791: PUSH
3792: LD_INT 2
3794: GREATEREQUAL
3795: PUSH
3796: LD_INT 10
3798: PPUSH
3799: LD_INT 3
3801: PUSH
3802: LD_INT 58
3804: PUSH
3805: EMPTY
3806: LIST
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PUSH
3812: LD_INT 2
3814: PUSH
3815: LD_INT 34
3817: PUSH
3818: LD_INT 12
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 34
3827: PUSH
3828: LD_INT 51
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: LIST
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PPUSH
3844: CALL_OW 70
3848: AND
3849: PUSH
3850: LD_EXP 10
3854: AND
3855: PUSH
3856: LD_EXP 7
3860: AND
3861: PUSH
3862: LD_EXP 6
3866: AND
3867: IFFALSE 4134
3869: GO 3871
3871: DISABLE
3872: LD_INT 0
3874: PPUSH
3875: PPUSH
// begin m1 := false ;
3876: LD_ADDR_VAR 0 1
3880: PUSH
3881: LD_INT 0
3883: ST_TO_ADDR
// m2 := false ;
3884: LD_ADDR_VAR 0 2
3888: PUSH
3889: LD_INT 0
3891: ST_TO_ADDR
// if killCounter = 0 then
3892: LD_EXP 12
3896: PUSH
3897: LD_INT 0
3899: EQUAL
3900: IFFALSE 3909
// SetAchievement ( ACH_PACIFIST ) ;
3902: LD_STRING ACH_PACIFIST
3904: PPUSH
3905: CALL_OW 543
// if tick < 7 7$00 then
3909: LD_OWVAR 1
3913: PUSH
3914: LD_INT 14700
3916: LESS
3917: IFFALSE 3933
// begin wait ( 3 ) ;
3919: LD_INT 3
3921: PPUSH
3922: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3926: LD_STRING ACH_ASPEED_18
3928: PPUSH
3929: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3933: LD_STRING Explosion
3935: PPUSH
3936: LD_INT 1
3938: PPUSH
3939: CALL_OW 101
// if enteredContaminatedArea then
3943: LD_EXP 5
3947: IFFALSE 3969
// begin m1 := true ;
3949: LD_ADDR_VAR 0 1
3953: PUSH
3954: LD_INT 1
3956: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3957: LD_STRING BioHazard
3959: PPUSH
3960: LD_INT 1
3962: PPUSH
3963: CALL_OW 101
// end else
3967: GO 3980
// AddMedal ( BioHazard , - 1 ) ;
3969: LD_STRING BioHazard
3971: PPUSH
3972: LD_INT 1
3974: NEG
3975: PPUSH
3976: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
3980: LD_EXP 11
3984: PUSH
3985: LD_INT 42000
3987: PUSH
3988: LD_INT 31500
3990: PUSH
3991: LD_INT 25200
3993: PUSH
3994: LD_INT 24150
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: PUSH
4003: LD_OWVAR 67
4007: ARRAY
4008: LESSEQUAL
4009: IFFALSE 4031
// begin m2 := true ;
4011: LD_ADDR_VAR 0 2
4015: PUSH
4016: LD_INT 1
4018: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
4019: LD_STRING Speed
4021: PPUSH
4022: LD_INT 1
4024: PPUSH
4025: CALL_OW 101
// end else
4029: GO 4042
// AddMedal ( Speed , - 1 ) ;
4031: LD_STRING Speed
4033: PPUSH
4034: LD_INT 1
4036: NEG
4037: PPUSH
4038: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4042: LD_OWVAR 67
4046: PUSH
4047: LD_INT 3
4049: GREATEREQUAL
4050: PUSH
4051: LD_VAR 0 1
4055: AND
4056: PUSH
4057: LD_VAR 0 2
4061: AND
4062: IFFALSE 4074
// SetAchievementEX ( ACH_AMER , 18 ) ;
4064: LD_STRING ACH_AMER
4066: PPUSH
4067: LD_INT 18
4069: PPUSH
4070: CALL_OW 564
// GiveMedals ( Main ) ;
4074: LD_STRING Main
4076: PPUSH
4077: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4081: LD_EXP 14
4085: PUSH
4086: LD_EXP 15
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PPUSH
4095: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4099: LD_EXP 14
4103: PPUSH
4104: LD_STRING 14a_JMM
4106: PPUSH
4107: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4111: LD_EXP 15
4115: PPUSH
4116: LD_STRING 14a_Burlak
4118: PPUSH
4119: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
4123: LD_STRING enableBioCharacter(BIO_HUGH)
4125: PPUSH
4126: CALL_OW 559
// YouWin ;
4130: CALL_OW 103
// end ; end_of_file
4134: PPOPN 2
4136: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4137: LD_INT 0
4139: PPUSH
4140: PPUSH
4141: PPUSH
4142: PPUSH
// uc_side := 1 ;
4143: LD_ADDR_OWVAR 20
4147: PUSH
4148: LD_INT 1
4150: ST_TO_ADDR
// uc_nation := 1 ;
4151: LD_ADDR_OWVAR 21
4155: PUSH
4156: LD_INT 1
4158: ST_TO_ADDR
// InitHc ;
4159: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 750 ) ;
4163: LD_INT 34
4165: PPUSH
4166: CALL_OW 274
4170: PPUSH
4171: LD_INT 1
4173: PPUSH
4174: LD_INT 750
4176: PPUSH
4177: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4181: LD_INT 34
4183: PPUSH
4184: CALL_OW 274
4188: PPUSH
4189: LD_INT 3
4191: PPUSH
4192: LD_INT 20
4194: PPUSH
4195: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4199: LD_ADDR_EXP 18
4203: PUSH
4204: LD_STRING Stevens
4206: PPUSH
4207: CALL_OW 25
4211: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4212: LD_ADDR_EXP 19
4216: PUSH
4217: LD_STRING Powell
4219: PPUSH
4220: CALL_OW 25
4224: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4225: LD_EXP 18
4229: PPUSH
4230: LD_INT 1
4232: PPUSH
4233: CALL_OW 52
// vehGuard := [ ] ;
4237: LD_ADDR_EXP 23
4241: PUSH
4242: EMPTY
4243: ST_TO_ADDR
// hc_importance := 0 ;
4244: LD_ADDR_OWVAR 32
4248: PUSH
4249: LD_INT 0
4251: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4252: LD_INT 4
4254: PPUSH
4255: LD_INT 3
4257: PPUSH
4258: LD_INT 3
4260: PPUSH
4261: LD_INT 8
4263: PPUSH
4264: LD_INT 100
4266: PPUSH
4267: CALL 32684 0 5
// sibBomb := CreateVehicle ;
4271: LD_ADDR_EXP 21
4275: PUSH
4276: CALL_OW 45
4280: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4281: LD_EXP 21
4285: PPUSH
4286: LD_INT 1
4288: PPUSH
4289: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4293: LD_EXP 21
4297: PPUSH
4298: LD_INT 93
4300: PPUSH
4301: LD_INT 74
4303: PPUSH
4304: LD_INT 0
4306: PPUSH
4307: CALL_OW 48
// guards := [ ] ;
4311: LD_ADDR_EXP 22
4315: PUSH
4316: EMPTY
4317: ST_TO_ADDR
// for i = 1 to 3 do
4318: LD_ADDR_VAR 0 2
4322: PUSH
4323: DOUBLE
4324: LD_INT 1
4326: DEC
4327: ST_TO_ADDR
4328: LD_INT 3
4330: PUSH
4331: FOR_TO
4332: IFFALSE 4428
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4334: LD_INT 0
4336: PPUSH
4337: LD_INT 1
4339: PPUSH
4340: LD_INT 8
4342: PUSH
4343: LD_INT 9
4345: PUSH
4346: LD_INT 10
4348: PUSH
4349: LD_INT 10
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: PUSH
4358: LD_OWVAR 67
4362: ARRAY
4363: PPUSH
4364: CALL_OW 380
// un := CreateHuman ;
4368: LD_ADDR_VAR 0 3
4372: PUSH
4373: CALL_OW 44
4377: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4378: LD_VAR 0 3
4382: PPUSH
4383: LD_INT 2
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: LD_INT 4
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: PUSH
4397: LD_VAR 0 2
4401: ARRAY
4402: PPUSH
4403: LD_INT 0
4405: PPUSH
4406: CALL_OW 49
// guards := guards ^ un ;
4410: LD_ADDR_EXP 22
4414: PUSH
4415: LD_EXP 22
4419: PUSH
4420: LD_VAR 0 3
4424: ADD
4425: ST_TO_ADDR
// end ;
4426: GO 4331
4428: POP
4429: POP
// baseGuards := [ ] ;
4430: LD_ADDR_EXP 20
4434: PUSH
4435: EMPTY
4436: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4437: LD_ADDR_VAR 0 2
4441: PUSH
4442: DOUBLE
4443: LD_INT 1
4445: DEC
4446: ST_TO_ADDR
4447: LD_INT 5
4449: PUSH
4450: LD_INT 6
4452: PUSH
4453: LD_INT 7
4455: PUSH
4456: LD_INT 8
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: PUSH
4465: LD_OWVAR 67
4469: ARRAY
4470: PUSH
4471: FOR_TO
4472: IFFALSE 4622
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4474: LD_INT 0
4476: PPUSH
4477: LD_INT 8
4479: PUSH
4480: LD_INT 9
4482: PUSH
4483: LD_INT 10
4485: PUSH
4486: LD_INT 10
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: PUSH
4495: LD_OWVAR 67
4499: ARRAY
4500: PPUSH
4501: CALL_OW 381
// un := CreateHuman ;
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: CALL_OW 44
4514: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4515: LD_ADDR_EXP 20
4519: PUSH
4520: LD_EXP 20
4524: PUSH
4525: LD_VAR 0 3
4529: ADD
4530: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4531: LD_ADDR_VAR 0 4
4535: PUSH
4536: LD_INT 22
4538: PUSH
4539: LD_INT 1
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PUSH
4546: LD_INT 58
4548: PUSH
4549: EMPTY
4550: LIST
4551: PUSH
4552: LD_INT 30
4554: PUSH
4555: LD_INT 32
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: PPUSH
4567: CALL_OW 69
4571: ST_TO_ADDR
// if tmp then
4572: LD_VAR 0 4
4576: IFFALSE 4608
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4578: LD_VAR 0 3
4582: PPUSH
4583: LD_VAR 0 4
4587: PUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_VAR 0 4
4595: PPUSH
4596: CALL_OW 12
4600: ARRAY
4601: PPUSH
4602: CALL_OW 52
4606: GO 4620
// PlaceHumanInUnit ( un , us_bar ) ;
4608: LD_VAR 0 3
4612: PPUSH
4613: LD_INT 51
4615: PPUSH
4616: CALL_OW 52
// end ;
4620: GO 4471
4622: POP
4623: POP
// if Difficulty > 1 then
4624: LD_OWVAR 67
4628: PUSH
4629: LD_INT 1
4631: GREATER
4632: IFFALSE 4680
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4634: LD_INT 0
4636: PPUSH
4637: LD_INT 5
4639: PPUSH
4640: LD_INT 9
4642: PUSH
4643: LD_INT 10
4645: PUSH
4646: LD_INT 10
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: LIST
4653: PUSH
4654: LD_OWVAR 67
4658: PUSH
4659: LD_INT 1
4661: MINUS
4662: ARRAY
4663: PPUSH
4664: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4668: CALL_OW 44
4672: PPUSH
4673: LD_INT 80
4675: PPUSH
4676: CALL_OW 52
// end ; for i = 1 to 3 do
4680: LD_ADDR_VAR 0 2
4684: PUSH
4685: DOUBLE
4686: LD_INT 1
4688: DEC
4689: ST_TO_ADDR
4690: LD_INT 3
4692: PUSH
4693: FOR_TO
4694: IFFALSE 4720
// begin PrepareMechanic ( false , 9 ) ;
4696: LD_INT 0
4698: PPUSH
4699: LD_INT 9
4701: PPUSH
4702: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4706: CALL_OW 44
4710: PPUSH
4711: LD_INT 43
4713: PPUSH
4714: CALL_OW 52
// end ;
4718: GO 4693
4720: POP
4721: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4722: CALL_OW 44
4726: PPUSH
4727: LD_INT 49
4729: PPUSH
4730: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4734: LD_ADDR_VAR 0 2
4738: PUSH
4739: DOUBLE
4740: LD_INT 1
4742: DEC
4743: ST_TO_ADDR
4744: LD_INT 1
4746: PUSH
4747: LD_OWVAR 67
4751: PLUS
4752: PUSH
4753: FOR_TO
4754: IFFALSE 4801
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4756: LD_INT 0
4758: PPUSH
4759: LD_INT 8
4761: PUSH
4762: LD_INT 9
4764: PUSH
4765: LD_INT 10
4767: PUSH
4768: LD_INT 10
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: PUSH
4777: LD_OWVAR 67
4781: ARRAY
4782: PPUSH
4783: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4787: CALL_OW 44
4791: PPUSH
4792: LD_INT 5
4794: PPUSH
4795: CALL_OW 52
// end ;
4799: GO 4753
4801: POP
4802: POP
// for i = 1 to 3 do
4803: LD_ADDR_VAR 0 2
4807: PUSH
4808: DOUBLE
4809: LD_INT 1
4811: DEC
4812: ST_TO_ADDR
4813: LD_INT 3
4815: PUSH
4816: FOR_TO
4817: IFFALSE 4843
// begin PrepareScientist ( false , 10 ) ;
4819: LD_INT 0
4821: PPUSH
4822: LD_INT 10
4824: PPUSH
4825: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4829: CALL_OW 44
4833: PPUSH
4834: LD_INT 1
4836: PPUSH
4837: CALL_OW 52
// end ;
4841: GO 4816
4843: POP
4844: POP
// end ;
4845: LD_VAR 0 1
4849: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4850: LD_EXP 22
4854: PUSH
4855: LD_EXP 2
4859: NOT
4860: AND
4861: IFFALSE 5047
4863: GO 4865
4865: DISABLE
4866: LD_INT 0
4868: PPUSH
4869: PPUSH
4870: PPUSH
// begin enable ;
4871: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4872: LD_ADDR_VAR 0 3
4876: PUSH
4877: LD_INT 204
4879: PUSH
4880: LD_INT 30
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: LD_INT 165
4889: PUSH
4890: LD_INT 24
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: PUSH
4897: LD_INT 195
4899: PUSH
4900: LD_INT 6
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PUSH
4907: LD_INT 223
4909: PUSH
4910: LD_INT 54
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: LD_INT 214
4919: PUSH
4920: LD_INT 84
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 206
4929: PUSH
4930: LD_INT 71
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: ST_TO_ADDR
// for i in guards do
4945: LD_ADDR_VAR 0 1
4949: PUSH
4950: LD_EXP 22
4954: PUSH
4955: FOR_IN
4956: IFFALSE 5045
// begin if HasTask ( i ) then
4958: LD_VAR 0 1
4962: PPUSH
4963: CALL_OW 314
4967: IFFALSE 4973
// continue else
4969: GO 4955
4971: GO 5043
// begin j := rand ( 1 , 6 ) ;
4973: LD_ADDR_VAR 0 2
4977: PUSH
4978: LD_INT 1
4980: PPUSH
4981: LD_INT 6
4983: PPUSH
4984: CALL_OW 12
4988: ST_TO_ADDR
// if not See ( 7 , i ) then
4989: LD_INT 7
4991: PPUSH
4992: LD_VAR 0 1
4996: PPUSH
4997: CALL_OW 292
5001: NOT
5002: IFFALSE 5043
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
5004: LD_VAR 0 1
5008: PPUSH
5009: LD_VAR 0 3
5013: PUSH
5014: LD_VAR 0 2
5018: ARRAY
5019: PUSH
5020: LD_INT 1
5022: ARRAY
5023: PPUSH
5024: LD_VAR 0 3
5028: PUSH
5029: LD_VAR 0 2
5033: ARRAY
5034: PUSH
5035: LD_INT 2
5037: ARRAY
5038: PPUSH
5039: CALL_OW 114
// end ; end ;
5043: GO 4955
5045: POP
5046: POP
// end ;
5047: PPOPN 3
5049: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5050: LD_EXP 23
5054: PUSH
5055: LD_EXP 7
5059: NOT
5060: AND
5061: IFFALSE 5143
5063: GO 5065
5065: DISABLE
5066: LD_INT 0
5068: PPUSH
// begin enable ;
5069: ENABLE
// for i in vehGuard do
5070: LD_ADDR_VAR 0 1
5074: PUSH
5075: LD_EXP 23
5079: PUSH
5080: FOR_IN
5081: IFFALSE 5141
// if IsOk ( i ) and IsControledBy ( i ) then
5083: LD_VAR 0 1
5087: PPUSH
5088: CALL_OW 302
5092: PUSH
5093: LD_VAR 0 1
5097: PPUSH
5098: CALL_OW 312
5102: AND
5103: IFFALSE 5139
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5105: LD_VAR 0 1
5109: PPUSH
5110: LD_INT 22
5112: PUSH
5113: LD_INT 7
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PPUSH
5120: CALL_OW 69
5124: PPUSH
5125: LD_VAR 0 1
5129: PPUSH
5130: CALL_OW 74
5134: PPUSH
5135: CALL_OW 115
5139: GO 5080
5141: POP
5142: POP
// end ;
5143: PPOPN 1
5145: END
// every 1 1$00 + 3 3$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured and Difficulty > 1 do
5146: LD_EXP 4
5150: PUSH
5151: LD_INT 43
5153: PPUSH
5154: CALL_OW 302
5158: AND
5159: PUSH
5160: LD_EXP 7
5164: NOT
5165: AND
5166: PUSH
5167: LD_OWVAR 67
5171: PUSH
5172: LD_INT 1
5174: GREATER
5175: AND
5176: IFFALSE 5241
5178: GO 5180
5180: DISABLE
// begin enable ;
5181: ENABLE
// if Count ( vehGuard ) < Difficulty then
5182: LD_EXP 23
5186: PPUSH
5187: CALL 29946 0 1
5191: PUSH
5192: LD_OWVAR 67
5196: LESS
5197: IFFALSE 5241
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5199: LD_INT 43
5201: PPUSH
5202: LD_INT 5
5204: PPUSH
5205: LD_INT 3
5207: PPUSH
5208: LD_INT 2
5210: PPUSH
5211: LD_INT 7
5213: PUSH
5214: LD_INT 7
5216: PUSH
5217: LD_INT 9
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: LIST
5224: PUSH
5225: LD_INT 1
5227: PPUSH
5228: LD_INT 3
5230: PPUSH
5231: CALL_OW 12
5235: ARRAY
5236: PPUSH
5237: CALL_OW 125
// end ;
5241: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5242: LD_INT 22
5244: PUSH
5245: LD_INT 1
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: LD_INT 25
5254: PUSH
5255: LD_INT 5
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: LD_INT 50
5264: PUSH
5265: EMPTY
5266: LIST
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: PPUSH
5273: CALL_OW 69
5277: PUSH
5278: LD_EXP 7
5282: NOT
5283: AND
5284: IFFALSE 5513
5286: GO 5288
5288: DISABLE
5289: LD_INT 0
5291: PPUSH
5292: PPUSH
// begin enable ;
5293: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5294: LD_ADDR_VAR 0 1
5298: PUSH
5299: LD_INT 22
5301: PUSH
5302: LD_INT 1
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 25
5311: PUSH
5312: LD_INT 5
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: LD_INT 50
5321: PUSH
5322: EMPTY
5323: LIST
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: LIST
5329: PPUSH
5330: CALL_OW 69
5334: ST_TO_ADDR
// if not tmp then
5335: LD_VAR 0 1
5339: NOT
5340: IFFALSE 5344
// exit ;
5342: GO 5513
// b := IsInUnit ( tmp [ 1 ] ) ;
5344: LD_ADDR_VAR 0 2
5348: PUSH
5349: LD_VAR 0 1
5353: PUSH
5354: LD_INT 1
5356: ARRAY
5357: PPUSH
5358: CALL_OW 310
5362: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5363: LD_VAR 0 2
5367: NOT
5368: PUSH
5369: LD_VAR 0 1
5373: PUSH
5374: LD_INT 1
5376: ARRAY
5377: PPUSH
5378: CALL_OW 314
5382: OR
5383: IFFALSE 5387
// exit ;
5385: GO 5513
// if b = us_bun1 then
5387: LD_VAR 0 2
5391: PUSH
5392: LD_INT 80
5394: EQUAL
5395: IFFALSE 5456
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5397: LD_VAR 0 1
5401: PUSH
5402: LD_INT 1
5404: ARRAY
5405: PPUSH
5406: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5410: LD_VAR 0 1
5414: PUSH
5415: LD_INT 1
5417: ARRAY
5418: PPUSH
5419: LD_INT 27
5421: PPUSH
5422: LD_INT 44
5424: PPUSH
5425: CALL_OW 174
// if IsOk ( us_bun2 ) then
5429: LD_INT 55
5431: PPUSH
5432: CALL_OW 302
5436: IFFALSE 5454
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5438: LD_VAR 0 1
5442: PUSH
5443: LD_INT 1
5445: ARRAY
5446: PPUSH
5447: LD_INT 55
5449: PPUSH
5450: CALL_OW 180
// end else
5454: GO 5513
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5456: LD_VAR 0 1
5460: PUSH
5461: LD_INT 1
5463: ARRAY
5464: PPUSH
5465: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5469: LD_VAR 0 1
5473: PUSH
5474: LD_INT 1
5476: ARRAY
5477: PPUSH
5478: LD_INT 92
5480: PPUSH
5481: LD_INT 51
5483: PPUSH
5484: CALL_OW 174
// if IsOk ( us_bun1 ) then
5488: LD_INT 80
5490: PPUSH
5491: CALL_OW 302
5495: IFFALSE 5513
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5497: LD_VAR 0 1
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PPUSH
5506: LD_INT 80
5508: PPUSH
5509: CALL_OW 180
// end ; end ;
5513: PPOPN 2
5515: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5516: LD_EXP 7
5520: NOT
5521: PUSH
5522: LD_INT 9
5524: PPUSH
5525: LD_INT 22
5527: PUSH
5528: LD_INT 1
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 21
5537: PUSH
5538: LD_INT 3
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 3
5547: PUSH
5548: LD_INT 24
5550: PUSH
5551: LD_INT 1000
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 70
5571: AND
5572: IFFALSE 5983
5574: GO 5576
5576: DISABLE
5577: LD_INT 0
5579: PPUSH
5580: PPUSH
5581: PPUSH
5582: PPUSH
// begin enable ;
5583: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5584: LD_ADDR_VAR 0 2
5588: PUSH
5589: LD_INT 22
5591: PUSH
5592: LD_INT 1
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 25
5601: PUSH
5602: LD_INT 2
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PUSH
5609: LD_INT 24
5611: PUSH
5612: LD_INT 1000
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: LIST
5623: PPUSH
5624: CALL_OW 69
5628: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5629: LD_ADDR_VAR 0 3
5633: PUSH
5634: LD_INT 22
5636: PUSH
5637: LD_INT 1
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: LD_INT 25
5646: PUSH
5647: LD_INT 2
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: LD_INT 3
5656: PUSH
5657: LD_INT 24
5659: PUSH
5660: LD_INT 750
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: LIST
5675: PPUSH
5676: CALL_OW 69
5680: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5681: LD_ADDR_VAR 0 4
5685: PUSH
5686: LD_INT 9
5688: PPUSH
5689: LD_INT 22
5691: PUSH
5692: LD_INT 1
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: LD_INT 21
5701: PUSH
5702: LD_INT 3
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PUSH
5709: LD_INT 3
5711: PUSH
5712: LD_INT 24
5714: PUSH
5715: LD_INT 1000
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: LIST
5730: PPUSH
5731: CALL_OW 70
5735: PUSH
5736: LD_INT 1
5738: DIFF
5739: ST_TO_ADDR
// if not tmp and not tmp2 then
5740: LD_VAR 0 2
5744: NOT
5745: PUSH
5746: LD_VAR 0 3
5750: NOT
5751: AND
5752: IFFALSE 5756
// exit ;
5754: GO 5983
// if tmp and b then
5756: LD_VAR 0 2
5760: PUSH
5761: LD_VAR 0 4
5765: AND
5766: IFFALSE 5896
// for i in tmp do
5768: LD_ADDR_VAR 0 1
5772: PUSH
5773: LD_VAR 0 2
5777: PUSH
5778: FOR_IN
5779: IFFALSE 5894
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5781: LD_VAR 0 1
5785: PPUSH
5786: CALL_OW 110
5790: PUSH
5791: LD_INT 1
5793: EQUAL
5794: PUSH
5795: LD_VAR 0 1
5799: PPUSH
5800: CALL_OW 256
5804: PUSH
5805: LD_INT 1000
5807: LESS
5808: AND
5809: IFFALSE 5815
// continue else
5811: GO 5778
5813: GO 5842
// if GetTag ( i ) = 1 then
5815: LD_VAR 0 1
5819: PPUSH
5820: CALL_OW 110
5824: PUSH
5825: LD_INT 1
5827: EQUAL
5828: IFFALSE 5842
// SetTag ( i , 0 ) ;
5830: LD_VAR 0 1
5834: PPUSH
5835: LD_INT 0
5837: PPUSH
5838: CALL_OW 109
// if IsInUnit ( i ) then
5842: LD_VAR 0 1
5846: PPUSH
5847: CALL_OW 310
5851: IFFALSE 5862
// ComExitBuilding ( i ) ;
5853: LD_VAR 0 1
5857: PPUSH
5858: CALL_OW 122
// if not HasTask ( i ) then
5862: LD_VAR 0 1
5866: PPUSH
5867: CALL_OW 314
5871: NOT
5872: IFFALSE 5892
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5874: LD_VAR 0 1
5878: PPUSH
5879: LD_VAR 0 4
5883: PUSH
5884: LD_INT 1
5886: ARRAY
5887: PPUSH
5888: CALL_OW 190
// end ;
5892: GO 5778
5894: POP
5895: POP
// if tmp2 then
5896: LD_VAR 0 3
5900: IFFALSE 5983
// for i in tmp2 do
5902: LD_ADDR_VAR 0 1
5906: PUSH
5907: LD_VAR 0 3
5911: PUSH
5912: FOR_IN
5913: IFFALSE 5981
// begin if not GetTag ( i ) = 1 then
5915: LD_VAR 0 1
5919: PPUSH
5920: CALL_OW 110
5924: PUSH
5925: LD_INT 1
5927: EQUAL
5928: NOT
5929: IFFALSE 5943
// SetTag ( i , 1 ) ;
5931: LD_VAR 0 1
5935: PPUSH
5936: LD_INT 1
5938: PPUSH
5939: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5943: LD_VAR 0 1
5947: PPUSH
5948: LD_INT 88
5950: PPUSH
5951: LD_INT 75
5953: PPUSH
5954: CALL_OW 297
5958: PUSH
5959: LD_INT 6
5961: GREATER
5962: IFFALSE 5979
// ComMoveXY ( i , 88 , 75 ) ;
5964: LD_VAR 0 1
5968: PPUSH
5969: LD_INT 88
5971: PPUSH
5972: LD_INT 75
5974: PPUSH
5975: CALL_OW 111
// end ;
5979: GO 5912
5981: POP
5982: POP
// end ;
5983: PPOPN 4
5985: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5986: LD_EXP 7
5990: NOT
5991: PUSH
5992: LD_EXP 9
5996: AND
5997: PUSH
5998: LD_INT 9
6000: PPUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 1
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 21
6013: PUSH
6014: LD_INT 1
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: PUSH
6021: LD_INT 3
6023: PUSH
6024: LD_INT 24
6026: PUSH
6027: LD_INT 1000
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: LIST
6042: PPUSH
6043: CALL_OW 70
6047: AND
6048: IFFALSE 6221
6050: GO 6052
6052: DISABLE
6053: LD_INT 0
6055: PPUSH
6056: PPUSH
6057: PPUSH
// begin enable ;
6058: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
6059: LD_ADDR_VAR 0 2
6063: PUSH
6064: LD_INT 22
6066: PUSH
6067: LD_INT 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 4
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PPUSH
6088: CALL_OW 69
6092: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6093: LD_ADDR_VAR 0 3
6097: PUSH
6098: LD_INT 9
6100: PPUSH
6101: LD_INT 22
6103: PUSH
6104: LD_INT 1
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 21
6113: PUSH
6114: LD_INT 1
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: PUSH
6121: LD_INT 3
6123: PUSH
6124: LD_INT 24
6126: PUSH
6127: LD_INT 1000
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: LIST
6142: PPUSH
6143: CALL_OW 70
6147: ST_TO_ADDR
// if not sci or not tmp then
6148: LD_VAR 0 2
6152: NOT
6153: PUSH
6154: LD_VAR 0 3
6158: NOT
6159: OR
6160: IFFALSE 6164
// exit ;
6162: GO 6221
// for i in sci do
6164: LD_ADDR_VAR 0 1
6168: PUSH
6169: LD_VAR 0 2
6173: PUSH
6174: FOR_IN
6175: IFFALSE 6219
// if IsInUnit ( i ) then
6177: LD_VAR 0 1
6181: PPUSH
6182: CALL_OW 310
6186: IFFALSE 6199
// ComExitBuilding ( i ) else
6188: LD_VAR 0 1
6192: PPUSH
6193: CALL_OW 122
6197: GO 6217
// ComHeal ( i , tmp [ 1 ] ) ;
6199: LD_VAR 0 1
6203: PPUSH
6204: LD_VAR 0 3
6208: PUSH
6209: LD_INT 1
6211: ARRAY
6212: PPUSH
6213: CALL_OW 128
6217: GO 6174
6219: POP
6220: POP
// end ;
6221: PPOPN 3
6223: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6224: LD_EXP 7
6228: NOT
6229: PUSH
6230: LD_EXP 9
6234: AND
6235: PUSH
6236: LD_INT 1
6238: PPUSH
6239: CALL_OW 302
6243: AND
6244: PUSH
6245: LD_INT 9
6247: PPUSH
6248: LD_INT 22
6250: PUSH
6251: LD_INT 1
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PUSH
6258: LD_INT 21
6260: PUSH
6261: LD_INT 1
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PUSH
6268: LD_INT 3
6270: PUSH
6271: LD_INT 24
6273: PUSH
6274: LD_INT 1000
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: PPUSH
6290: CALL_OW 70
6294: NOT
6295: AND
6296: PUSH
6297: LD_INT 22
6299: PUSH
6300: LD_INT 1
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: LD_INT 25
6309: PUSH
6310: LD_INT 4
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: PUSH
6317: LD_INT 56
6319: PUSH
6320: EMPTY
6321: LIST
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: LIST
6327: PPUSH
6328: CALL_OW 69
6332: AND
6333: IFFALSE 6426
6335: GO 6337
6337: DISABLE
6338: LD_INT 0
6340: PPUSH
// begin enable ;
6341: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6342: LD_ADDR_VAR 0 1
6346: PUSH
6347: LD_INT 22
6349: PUSH
6350: LD_INT 1
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PUSH
6357: LD_INT 25
6359: PUSH
6360: LD_INT 4
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: LD_INT 56
6369: PUSH
6370: EMPTY
6371: LIST
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: LIST
6377: PPUSH
6378: CALL_OW 69
6382: PUSH
6383: FOR_IN
6384: IFFALSE 6424
// if not GetTag ( i ) and not HasTask ( i ) then
6386: LD_VAR 0 1
6390: PPUSH
6391: CALL_OW 110
6395: NOT
6396: PUSH
6397: LD_VAR 0 1
6401: PPUSH
6402: CALL_OW 314
6406: NOT
6407: AND
6408: IFFALSE 6422
// ComEnterUnit ( i , us_lab ) ;
6410: LD_VAR 0 1
6414: PPUSH
6415: LD_INT 1
6417: PPUSH
6418: CALL_OW 120
6422: GO 6383
6424: POP
6425: POP
// end ;
6426: PPOPN 1
6428: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6429: LD_EXP 7
6433: NOT
6434: PUSH
6435: LD_INT 9
6437: PPUSH
6438: LD_INT 22
6440: PUSH
6441: LD_INT 1
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 21
6450: PUSH
6451: LD_INT 3
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: LD_INT 3
6460: PUSH
6461: LD_INT 24
6463: PUSH
6464: LD_INT 1000
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: PPUSH
6480: CALL_OW 70
6484: NOT
6485: AND
6486: PUSH
6487: LD_INT 22
6489: PUSH
6490: LD_INT 1
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 25
6499: PUSH
6500: LD_INT 2
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 56
6509: PUSH
6510: EMPTY
6511: LIST
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: PPUSH
6518: CALL_OW 69
6522: AND
6523: IFFALSE 6616
6525: GO 6527
6527: DISABLE
6528: LD_INT 0
6530: PPUSH
// begin enable ;
6531: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6532: LD_ADDR_VAR 0 1
6536: PUSH
6537: LD_INT 22
6539: PUSH
6540: LD_INT 1
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 25
6549: PUSH
6550: LD_INT 2
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: LD_INT 56
6559: PUSH
6560: EMPTY
6561: LIST
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: LIST
6567: PPUSH
6568: CALL_OW 69
6572: PUSH
6573: FOR_IN
6574: IFFALSE 6614
// if not HasTask ( i ) and not GetTag ( i ) then
6576: LD_VAR 0 1
6580: PPUSH
6581: CALL_OW 314
6585: NOT
6586: PUSH
6587: LD_VAR 0 1
6591: PPUSH
6592: CALL_OW 110
6596: NOT
6597: AND
6598: IFFALSE 6612
// ComEnterUnit ( i , us_depot ) ;
6600: LD_VAR 0 1
6604: PPUSH
6605: LD_INT 5
6607: PPUSH
6608: CALL_OW 120
6612: GO 6573
6614: POP
6615: POP
// end ;
6616: PPOPN 1
6618: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6619: LD_EXP 9
6623: PUSH
6624: LD_INT 0
6626: LESSEQUAL
6627: PUSH
6628: LD_EXP 18
6632: PPUSH
6633: CALL_OW 301
6637: OR
6638: PUSH
6639: LD_INT 22
6641: PUSH
6642: LD_INT 1
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 25
6651: PUSH
6652: LD_INT 2
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PPUSH
6663: CALL_OW 69
6667: AND
6668: IFFALSE 6709
6670: GO 6672
6672: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6673: LD_INT 22
6675: PUSH
6676: LD_INT 1
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 25
6685: PUSH
6686: LD_INT 2
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PPUSH
6697: CALL_OW 69
6701: PPUSH
6702: LD_INT 1
6704: PPUSH
6705: CALL_OW 167
6709: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6710: LD_EXP 7
6714: NOT
6715: PUSH
6716: LD_INT 7
6718: PPUSH
6719: LD_INT 22
6721: PUSH
6722: LD_INT 7
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PPUSH
6729: CALL_OW 70
6733: AND
6734: IFFALSE 6825
6736: GO 6738
6738: DISABLE
6739: LD_INT 0
6741: PPUSH
// begin wait ( 0 0$2 ) ;
6742: LD_INT 70
6744: PPUSH
6745: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6749: LD_ADDR_VAR 0 1
6753: PUSH
6754: LD_INT 22
6756: PUSH
6757: LD_INT 1
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: PUSH
6764: LD_INT 25
6766: PUSH
6767: LD_INT 1
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PPUSH
6778: CALL_OW 69
6782: PUSH
6783: FOR_IN
6784: IFFALSE 6823
// begin if IsInUnit ( i ) then
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 310
6795: IFFALSE 6806
// ComExitBuilding ( i ) ;
6797: LD_VAR 0 1
6801: PPUSH
6802: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6806: LD_VAR 0 1
6810: PPUSH
6811: LD_INT 92
6813: PPUSH
6814: LD_INT 78
6816: PPUSH
6817: CALL_OW 174
// end ;
6821: GO 6783
6823: POP
6824: POP
// end ; end_of_file
6825: PPOPN 1
6827: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6828: LD_VAR 0 1
6832: PPUSH
6833: LD_VAR 0 2
6837: PPUSH
6838: LD_VAR 0 3
6842: PPUSH
6843: CALL 1579 0 3
6847: PPOPN 3
6849: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6850: LD_EXP 14
6854: PPUSH
6855: CALL_OW 257
6859: PUSH
6860: LD_INT 4
6862: EQUAL
6863: PUSH
6864: LD_EXP 15
6868: PPUSH
6869: CALL_OW 257
6873: PUSH
6874: LD_INT 4
6876: EQUAL
6877: OR
6878: PUSH
6879: LD_INT 22
6881: PUSH
6882: LD_INT 7
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: LD_INT 21
6891: PUSH
6892: LD_INT 3
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PPUSH
6903: CALL_OW 69
6907: OR
6908: IFFALSE 6912
// exit ;
6910: GO 6950
// if un = JMM then
6912: LD_VAR 0 1
6916: PUSH
6917: LD_EXP 14
6921: EQUAL
6922: IFFALSE 6931
// YouLost ( JMM ) ;
6924: LD_STRING JMM
6926: PPUSH
6927: CALL_OW 104
// if un = Burlak then
6931: LD_VAR 0 1
6935: PUSH
6936: LD_EXP 15
6940: EQUAL
6941: IFFALSE 6950
// YouLost ( Burlak ) ;
6943: LD_STRING Burlak
6945: PPUSH
6946: CALL_OW 104
// end ;
6950: PPOPN 1
6952: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6953: LD_VAR 0 1
6957: PPUSH
6958: CALL 23116 0 1
// if un = JMM then
6962: LD_VAR 0 1
6966: PUSH
6967: LD_EXP 14
6971: EQUAL
6972: IFFALSE 6981
// YouLost ( JMM ) ;
6974: LD_STRING JMM
6976: PPUSH
6977: CALL_OW 104
// if un = Burlak then
6981: LD_VAR 0 1
6985: PUSH
6986: LD_EXP 15
6990: EQUAL
6991: IFFALSE 7000
// YouLost ( Burlak ) ;
6993: LD_STRING Burlak
6995: PPUSH
6996: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
7000: LD_VAR 0 1
7004: PUSH
7005: LD_INT 21
7007: PUSH
7008: LD_INT 1
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 23
7017: PUSH
7018: LD_INT 1
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PPUSH
7029: CALL_OW 69
7033: IN
7034: IFFALSE 7050
// killCounter := killCounter + 1 ;
7036: LD_ADDR_EXP 12
7040: PUSH
7041: LD_EXP 12
7045: PUSH
7046: LD_INT 1
7048: PLUS
7049: ST_TO_ADDR
// end ;
7050: PPOPN 1
7052: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
7053: LD_VAR 0 2
7057: PUSH
7058: LD_INT 7
7060: EQUAL
7061: PUSH
7062: LD_VAR 0 1
7066: PUSH
7067: LD_INT 2
7069: PUSH
7070: LD_INT 30
7072: PUSH
7073: LD_INT 31
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 30
7082: PUSH
7083: LD_INT 32
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 30
7092: PUSH
7093: LD_INT 33
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: PPUSH
7106: CALL_OW 69
7110: IN
7111: AND
7112: IFFALSE 7128
// bunkerCounter := bunkerCounter + 1 ;
7114: LD_ADDR_EXP 13
7118: PUSH
7119: LD_EXP 13
7123: PUSH
7124: LD_INT 1
7126: PLUS
7127: ST_TO_ADDR
// end ;
7128: PPOPN 3
7130: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL_OW 255
7140: PUSH
7141: LD_INT 7
7143: EQUAL
7144: IFFALSE 7154
// artifactPickedUp := true ;
7146: LD_ADDR_EXP 6
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// end ;
7154: PPOPN 2
7156: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7157: LD_ADDR_EXP 6
7161: PUSH
7162: LD_INT 0
7164: ST_TO_ADDR
7165: PPOPN 2
7167: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7168: LD_VAR 0 1
7172: PPUSH
7173: LD_VAR 0 2
7177: PPUSH
7178: CALL 23236 0 2
// if GetSide ( vehicle ) <> 1 then
7182: LD_VAR 0 1
7186: PPUSH
7187: CALL_OW 255
7191: PUSH
7192: LD_INT 1
7194: NONEQUAL
7195: IFFALSE 7199
// exit ;
7197: GO 7246
// wait ( 0 0$5 ) ;
7199: LD_INT 175
7201: PPUSH
7202: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7206: LD_VAR 0 1
7210: PPUSH
7211: CALL_OW 263
7215: PUSH
7216: LD_INT 2
7218: EQUAL
7219: IFFALSE 7230
// Connect ( vehicle ) ;
7221: LD_VAR 0 1
7225: PPUSH
7226: CALL 36152 0 1
// vehGuard := vehGuard ^ vehicle ;
7230: LD_ADDR_EXP 23
7234: PUSH
7235: LD_EXP 23
7239: PUSH
7240: LD_VAR 0 1
7244: ADD
7245: ST_TO_ADDR
// end ;
7246: PPOPN 2
7248: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7249: LD_VAR 0 1
7253: PUSH
7254: LD_INT 1
7256: EQUAL
7257: PUSH
7258: LD_EXP 7
7262: NOT
7263: AND
7264: IFFALSE 7299
// begin planCaptured := true ;
7266: LD_ADDR_EXP 7
7270: PUSH
7271: LD_INT 1
7273: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7274: LD_STRING MEnd
7276: PPUSH
7277: CALL_OW 337
// canEnd := true ;
7281: LD_ADDR_EXP 10
7285: PUSH
7286: LD_INT 1
7288: ST_TO_ADDR
// missionTime := tick ;
7289: LD_ADDR_EXP 11
7293: PUSH
7294: LD_OWVAR 1
7298: ST_TO_ADDR
// end ; end ;
7299: PPOPN 3
7301: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7302: LD_VAR 0 1
7306: PPUSH
7307: CALL 23220 0 1
// end ; end_of_file end_of_file
7311: PPOPN 1
7313: END
// export globalGameSaveCounter ; every 0 0$1 do
7314: GO 7316
7316: DISABLE
// begin enable ;
7317: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7318: LD_STRING updateTimer(
7320: PUSH
7321: LD_OWVAR 1
7325: STR
7326: PUSH
7327: LD_STRING );
7329: STR
7330: PPUSH
7331: CALL_OW 559
// end ;
7335: END
// every 0 0$1 do
7336: GO 7338
7338: DISABLE
// begin globalGameSaveCounter := 0 ;
7339: LD_ADDR_EXP 24
7343: PUSH
7344: LD_INT 0
7346: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7347: LD_STRING setGameSaveCounter(0)
7349: PPUSH
7350: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7354: LD_STRING initStreamRollete();
7356: PPUSH
7357: CALL_OW 559
// InitStreamMode ;
7361: CALL 8687 0 0
// DefineStreamItems ( false ) ;
7365: LD_INT 0
7367: PPUSH
7368: CALL 9151 0 1
// end ;
7372: END
// export function SOS_MapStart ( ) ; begin
7373: LD_INT 0
7375: PPUSH
// if streamModeActive then
7376: LD_EXP 25
7380: IFFALSE 7389
// DefineStreamItems ( true ) ;
7382: LD_INT 1
7384: PPUSH
7385: CALL 9151 0 1
// UpdateLuaVariables ( ) ;
7389: CALL 7406 0 0
// UpdateFactoryWaypoints ( ) ;
7393: CALL 22020 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7397: CALL 22277 0 0
// end ;
7401: LD_VAR 0 1
7405: RET
// function UpdateLuaVariables ( ) ; begin
7406: LD_INT 0
7408: PPUSH
// if globalGameSaveCounter then
7409: LD_EXP 24
7413: IFFALSE 7447
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7415: LD_ADDR_EXP 24
7419: PUSH
7420: LD_EXP 24
7424: PPUSH
7425: CALL 66907 0 1
7429: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7430: LD_STRING setGameSaveCounter(
7432: PUSH
7433: LD_EXP 24
7437: STR
7438: PUSH
7439: LD_STRING )
7441: STR
7442: PPUSH
7443: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7447: LD_STRING setGameDifficulty(
7449: PUSH
7450: LD_OWVAR 67
7454: STR
7455: PUSH
7456: LD_STRING )
7458: STR
7459: PPUSH
7460: CALL_OW 559
// end ;
7464: LD_VAR 0 1
7468: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7469: LD_INT 0
7471: PPUSH
// if p2 = stream_mode then
7472: LD_VAR 0 2
7476: PUSH
7477: LD_INT 100
7479: EQUAL
7480: IFFALSE 8483
// begin if not StreamModeActive then
7482: LD_EXP 25
7486: NOT
7487: IFFALSE 7497
// StreamModeActive := true ;
7489: LD_ADDR_EXP 25
7493: PUSH
7494: LD_INT 1
7496: ST_TO_ADDR
// if p3 = 0 then
7497: LD_VAR 0 3
7501: PUSH
7502: LD_INT 0
7504: EQUAL
7505: IFFALSE 7511
// InitStreamMode ;
7507: CALL 8687 0 0
// if p3 = 1 then
7511: LD_VAR 0 3
7515: PUSH
7516: LD_INT 1
7518: EQUAL
7519: IFFALSE 7529
// sRocket := true ;
7521: LD_ADDR_EXP 30
7525: PUSH
7526: LD_INT 1
7528: ST_TO_ADDR
// if p3 = 2 then
7529: LD_VAR 0 3
7533: PUSH
7534: LD_INT 2
7536: EQUAL
7537: IFFALSE 7547
// sSpeed := true ;
7539: LD_ADDR_EXP 29
7543: PUSH
7544: LD_INT 1
7546: ST_TO_ADDR
// if p3 = 3 then
7547: LD_VAR 0 3
7551: PUSH
7552: LD_INT 3
7554: EQUAL
7555: IFFALSE 7565
// sEngine := true ;
7557: LD_ADDR_EXP 31
7561: PUSH
7562: LD_INT 1
7564: ST_TO_ADDR
// if p3 = 4 then
7565: LD_VAR 0 3
7569: PUSH
7570: LD_INT 4
7572: EQUAL
7573: IFFALSE 7583
// sSpec := true ;
7575: LD_ADDR_EXP 28
7579: PUSH
7580: LD_INT 1
7582: ST_TO_ADDR
// if p3 = 5 then
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 5
7590: EQUAL
7591: IFFALSE 7601
// sLevel := true ;
7593: LD_ADDR_EXP 32
7597: PUSH
7598: LD_INT 1
7600: ST_TO_ADDR
// if p3 = 6 then
7601: LD_VAR 0 3
7605: PUSH
7606: LD_INT 6
7608: EQUAL
7609: IFFALSE 7619
// sArmoury := true ;
7611: LD_ADDR_EXP 33
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// if p3 = 7 then
7619: LD_VAR 0 3
7623: PUSH
7624: LD_INT 7
7626: EQUAL
7627: IFFALSE 7637
// sRadar := true ;
7629: LD_ADDR_EXP 34
7633: PUSH
7634: LD_INT 1
7636: ST_TO_ADDR
// if p3 = 8 then
7637: LD_VAR 0 3
7641: PUSH
7642: LD_INT 8
7644: EQUAL
7645: IFFALSE 7655
// sBunker := true ;
7647: LD_ADDR_EXP 35
7651: PUSH
7652: LD_INT 1
7654: ST_TO_ADDR
// if p3 = 9 then
7655: LD_VAR 0 3
7659: PUSH
7660: LD_INT 9
7662: EQUAL
7663: IFFALSE 7673
// sHack := true ;
7665: LD_ADDR_EXP 36
7669: PUSH
7670: LD_INT 1
7672: ST_TO_ADDR
// if p3 = 10 then
7673: LD_VAR 0 3
7677: PUSH
7678: LD_INT 10
7680: EQUAL
7681: IFFALSE 7691
// sFire := true ;
7683: LD_ADDR_EXP 37
7687: PUSH
7688: LD_INT 1
7690: ST_TO_ADDR
// if p3 = 11 then
7691: LD_VAR 0 3
7695: PUSH
7696: LD_INT 11
7698: EQUAL
7699: IFFALSE 7709
// sRefresh := true ;
7701: LD_ADDR_EXP 38
7705: PUSH
7706: LD_INT 1
7708: ST_TO_ADDR
// if p3 = 12 then
7709: LD_VAR 0 3
7713: PUSH
7714: LD_INT 12
7716: EQUAL
7717: IFFALSE 7727
// sExp := true ;
7719: LD_ADDR_EXP 39
7723: PUSH
7724: LD_INT 1
7726: ST_TO_ADDR
// if p3 = 13 then
7727: LD_VAR 0 3
7731: PUSH
7732: LD_INT 13
7734: EQUAL
7735: IFFALSE 7745
// sDepot := true ;
7737: LD_ADDR_EXP 40
7741: PUSH
7742: LD_INT 1
7744: ST_TO_ADDR
// if p3 = 14 then
7745: LD_VAR 0 3
7749: PUSH
7750: LD_INT 14
7752: EQUAL
7753: IFFALSE 7763
// sFlag := true ;
7755: LD_ADDR_EXP 41
7759: PUSH
7760: LD_INT 1
7762: ST_TO_ADDR
// if p3 = 15 then
7763: LD_VAR 0 3
7767: PUSH
7768: LD_INT 15
7770: EQUAL
7771: IFFALSE 7781
// sKamikadze := true ;
7773: LD_ADDR_EXP 49
7777: PUSH
7778: LD_INT 1
7780: ST_TO_ADDR
// if p3 = 16 then
7781: LD_VAR 0 3
7785: PUSH
7786: LD_INT 16
7788: EQUAL
7789: IFFALSE 7799
// sTroll := true ;
7791: LD_ADDR_EXP 50
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// if p3 = 17 then
7799: LD_VAR 0 3
7803: PUSH
7804: LD_INT 17
7806: EQUAL
7807: IFFALSE 7817
// sSlow := true ;
7809: LD_ADDR_EXP 51
7813: PUSH
7814: LD_INT 1
7816: ST_TO_ADDR
// if p3 = 18 then
7817: LD_VAR 0 3
7821: PUSH
7822: LD_INT 18
7824: EQUAL
7825: IFFALSE 7835
// sLack := true ;
7827: LD_ADDR_EXP 52
7831: PUSH
7832: LD_INT 1
7834: ST_TO_ADDR
// if p3 = 19 then
7835: LD_VAR 0 3
7839: PUSH
7840: LD_INT 19
7842: EQUAL
7843: IFFALSE 7853
// sTank := true ;
7845: LD_ADDR_EXP 54
7849: PUSH
7850: LD_INT 1
7852: ST_TO_ADDR
// if p3 = 20 then
7853: LD_VAR 0 3
7857: PUSH
7858: LD_INT 20
7860: EQUAL
7861: IFFALSE 7871
// sRemote := true ;
7863: LD_ADDR_EXP 55
7867: PUSH
7868: LD_INT 1
7870: ST_TO_ADDR
// if p3 = 21 then
7871: LD_VAR 0 3
7875: PUSH
7876: LD_INT 21
7878: EQUAL
7879: IFFALSE 7889
// sPowell := true ;
7881: LD_ADDR_EXP 56
7885: PUSH
7886: LD_INT 1
7888: ST_TO_ADDR
// if p3 = 22 then
7889: LD_VAR 0 3
7893: PUSH
7894: LD_INT 22
7896: EQUAL
7897: IFFALSE 7907
// sTeleport := true ;
7899: LD_ADDR_EXP 59
7903: PUSH
7904: LD_INT 1
7906: ST_TO_ADDR
// if p3 = 23 then
7907: LD_VAR 0 3
7911: PUSH
7912: LD_INT 23
7914: EQUAL
7915: IFFALSE 7925
// sOilTower := true ;
7917: LD_ADDR_EXP 61
7921: PUSH
7922: LD_INT 1
7924: ST_TO_ADDR
// if p3 = 24 then
7925: LD_VAR 0 3
7929: PUSH
7930: LD_INT 24
7932: EQUAL
7933: IFFALSE 7943
// sShovel := true ;
7935: LD_ADDR_EXP 62
7939: PUSH
7940: LD_INT 1
7942: ST_TO_ADDR
// if p3 = 25 then
7943: LD_VAR 0 3
7947: PUSH
7948: LD_INT 25
7950: EQUAL
7951: IFFALSE 7961
// sSheik := true ;
7953: LD_ADDR_EXP 63
7957: PUSH
7958: LD_INT 1
7960: ST_TO_ADDR
// if p3 = 26 then
7961: LD_VAR 0 3
7965: PUSH
7966: LD_INT 26
7968: EQUAL
7969: IFFALSE 7979
// sEarthquake := true ;
7971: LD_ADDR_EXP 65
7975: PUSH
7976: LD_INT 1
7978: ST_TO_ADDR
// if p3 = 27 then
7979: LD_VAR 0 3
7983: PUSH
7984: LD_INT 27
7986: EQUAL
7987: IFFALSE 7997
// sAI := true ;
7989: LD_ADDR_EXP 66
7993: PUSH
7994: LD_INT 1
7996: ST_TO_ADDR
// if p3 = 28 then
7997: LD_VAR 0 3
8001: PUSH
8002: LD_INT 28
8004: EQUAL
8005: IFFALSE 8015
// sCargo := true ;
8007: LD_ADDR_EXP 69
8011: PUSH
8012: LD_INT 1
8014: ST_TO_ADDR
// if p3 = 29 then
8015: LD_VAR 0 3
8019: PUSH
8020: LD_INT 29
8022: EQUAL
8023: IFFALSE 8033
// sDLaser := true ;
8025: LD_ADDR_EXP 70
8029: PUSH
8030: LD_INT 1
8032: ST_TO_ADDR
// if p3 = 30 then
8033: LD_VAR 0 3
8037: PUSH
8038: LD_INT 30
8040: EQUAL
8041: IFFALSE 8051
// sExchange := true ;
8043: LD_ADDR_EXP 71
8047: PUSH
8048: LD_INT 1
8050: ST_TO_ADDR
// if p3 = 31 then
8051: LD_VAR 0 3
8055: PUSH
8056: LD_INT 31
8058: EQUAL
8059: IFFALSE 8069
// sFac := true ;
8061: LD_ADDR_EXP 72
8065: PUSH
8066: LD_INT 1
8068: ST_TO_ADDR
// if p3 = 32 then
8069: LD_VAR 0 3
8073: PUSH
8074: LD_INT 32
8076: EQUAL
8077: IFFALSE 8087
// sPower := true ;
8079: LD_ADDR_EXP 73
8083: PUSH
8084: LD_INT 1
8086: ST_TO_ADDR
// if p3 = 33 then
8087: LD_VAR 0 3
8091: PUSH
8092: LD_INT 33
8094: EQUAL
8095: IFFALSE 8105
// sRandom := true ;
8097: LD_ADDR_EXP 74
8101: PUSH
8102: LD_INT 1
8104: ST_TO_ADDR
// if p3 = 34 then
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 34
8112: EQUAL
8113: IFFALSE 8123
// sShield := true ;
8115: LD_ADDR_EXP 75
8119: PUSH
8120: LD_INT 1
8122: ST_TO_ADDR
// if p3 = 35 then
8123: LD_VAR 0 3
8127: PUSH
8128: LD_INT 35
8130: EQUAL
8131: IFFALSE 8141
// sTime := true ;
8133: LD_ADDR_EXP 76
8137: PUSH
8138: LD_INT 1
8140: ST_TO_ADDR
// if p3 = 36 then
8141: LD_VAR 0 3
8145: PUSH
8146: LD_INT 36
8148: EQUAL
8149: IFFALSE 8159
// sTools := true ;
8151: LD_ADDR_EXP 77
8155: PUSH
8156: LD_INT 1
8158: ST_TO_ADDR
// if p3 = 101 then
8159: LD_VAR 0 3
8163: PUSH
8164: LD_INT 101
8166: EQUAL
8167: IFFALSE 8177
// sSold := true ;
8169: LD_ADDR_EXP 42
8173: PUSH
8174: LD_INT 1
8176: ST_TO_ADDR
// if p3 = 102 then
8177: LD_VAR 0 3
8181: PUSH
8182: LD_INT 102
8184: EQUAL
8185: IFFALSE 8195
// sDiff := true ;
8187: LD_ADDR_EXP 43
8191: PUSH
8192: LD_INT 1
8194: ST_TO_ADDR
// if p3 = 103 then
8195: LD_VAR 0 3
8199: PUSH
8200: LD_INT 103
8202: EQUAL
8203: IFFALSE 8213
// sFog := true ;
8205: LD_ADDR_EXP 46
8209: PUSH
8210: LD_INT 1
8212: ST_TO_ADDR
// if p3 = 104 then
8213: LD_VAR 0 3
8217: PUSH
8218: LD_INT 104
8220: EQUAL
8221: IFFALSE 8231
// sReset := true ;
8223: LD_ADDR_EXP 47
8227: PUSH
8228: LD_INT 1
8230: ST_TO_ADDR
// if p3 = 105 then
8231: LD_VAR 0 3
8235: PUSH
8236: LD_INT 105
8238: EQUAL
8239: IFFALSE 8249
// sSun := true ;
8241: LD_ADDR_EXP 48
8245: PUSH
8246: LD_INT 1
8248: ST_TO_ADDR
// if p3 = 106 then
8249: LD_VAR 0 3
8253: PUSH
8254: LD_INT 106
8256: EQUAL
8257: IFFALSE 8267
// sTiger := true ;
8259: LD_ADDR_EXP 44
8263: PUSH
8264: LD_INT 1
8266: ST_TO_ADDR
// if p3 = 107 then
8267: LD_VAR 0 3
8271: PUSH
8272: LD_INT 107
8274: EQUAL
8275: IFFALSE 8285
// sBomb := true ;
8277: LD_ADDR_EXP 45
8281: PUSH
8282: LD_INT 1
8284: ST_TO_ADDR
// if p3 = 108 then
8285: LD_VAR 0 3
8289: PUSH
8290: LD_INT 108
8292: EQUAL
8293: IFFALSE 8303
// sWound := true ;
8295: LD_ADDR_EXP 53
8299: PUSH
8300: LD_INT 1
8302: ST_TO_ADDR
// if p3 = 109 then
8303: LD_VAR 0 3
8307: PUSH
8308: LD_INT 109
8310: EQUAL
8311: IFFALSE 8321
// sBetray := true ;
8313: LD_ADDR_EXP 57
8317: PUSH
8318: LD_INT 1
8320: ST_TO_ADDR
// if p3 = 110 then
8321: LD_VAR 0 3
8325: PUSH
8326: LD_INT 110
8328: EQUAL
8329: IFFALSE 8339
// sContamin := true ;
8331: LD_ADDR_EXP 58
8335: PUSH
8336: LD_INT 1
8338: ST_TO_ADDR
// if p3 = 111 then
8339: LD_VAR 0 3
8343: PUSH
8344: LD_INT 111
8346: EQUAL
8347: IFFALSE 8357
// sOil := true ;
8349: LD_ADDR_EXP 60
8353: PUSH
8354: LD_INT 1
8356: ST_TO_ADDR
// if p3 = 112 then
8357: LD_VAR 0 3
8361: PUSH
8362: LD_INT 112
8364: EQUAL
8365: IFFALSE 8375
// sStu := true ;
8367: LD_ADDR_EXP 64
8371: PUSH
8372: LD_INT 1
8374: ST_TO_ADDR
// if p3 = 113 then
8375: LD_VAR 0 3
8379: PUSH
8380: LD_INT 113
8382: EQUAL
8383: IFFALSE 8393
// sBazooka := true ;
8385: LD_ADDR_EXP 67
8389: PUSH
8390: LD_INT 1
8392: ST_TO_ADDR
// if p3 = 114 then
8393: LD_VAR 0 3
8397: PUSH
8398: LD_INT 114
8400: EQUAL
8401: IFFALSE 8411
// sMortar := true ;
8403: LD_ADDR_EXP 68
8407: PUSH
8408: LD_INT 1
8410: ST_TO_ADDR
// if p3 = 115 then
8411: LD_VAR 0 3
8415: PUSH
8416: LD_INT 115
8418: EQUAL
8419: IFFALSE 8429
// sRanger := true ;
8421: LD_ADDR_EXP 78
8425: PUSH
8426: LD_INT 1
8428: ST_TO_ADDR
// if p3 = 116 then
8429: LD_VAR 0 3
8433: PUSH
8434: LD_INT 116
8436: EQUAL
8437: IFFALSE 8447
// sComputer := true ;
8439: LD_ADDR_EXP 79
8443: PUSH
8444: LD_INT 1
8446: ST_TO_ADDR
// if p3 = 117 then
8447: LD_VAR 0 3
8451: PUSH
8452: LD_INT 117
8454: EQUAL
8455: IFFALSE 8465
// s30 := true ;
8457: LD_ADDR_EXP 80
8461: PUSH
8462: LD_INT 1
8464: ST_TO_ADDR
// if p3 = 118 then
8465: LD_VAR 0 3
8469: PUSH
8470: LD_INT 118
8472: EQUAL
8473: IFFALSE 8483
// s60 := true ;
8475: LD_ADDR_EXP 81
8479: PUSH
8480: LD_INT 1
8482: ST_TO_ADDR
// end ; if p2 = hack_mode then
8483: LD_VAR 0 2
8487: PUSH
8488: LD_INT 101
8490: EQUAL
8491: IFFALSE 8619
// begin case p3 of 1 :
8493: LD_VAR 0 3
8497: PUSH
8498: LD_INT 1
8500: DOUBLE
8501: EQUAL
8502: IFTRUE 8506
8504: GO 8513
8506: POP
// hHackUnlimitedResources ; 2 :
8507: CALL 20766 0 0
8511: GO 8619
8513: LD_INT 2
8515: DOUBLE
8516: EQUAL
8517: IFTRUE 8521
8519: GO 8528
8521: POP
// hHackSetLevel10 ; 3 :
8522: CALL 20899 0 0
8526: GO 8619
8528: LD_INT 3
8530: DOUBLE
8531: EQUAL
8532: IFTRUE 8536
8534: GO 8543
8536: POP
// hHackSetLevel10YourUnits ; 4 :
8537: CALL 20984 0 0
8541: GO 8619
8543: LD_INT 4
8545: DOUBLE
8546: EQUAL
8547: IFTRUE 8551
8549: GO 8558
8551: POP
// hHackInvincible ; 5 :
8552: CALL 21432 0 0
8556: GO 8619
8558: LD_INT 5
8560: DOUBLE
8561: EQUAL
8562: IFTRUE 8566
8564: GO 8573
8566: POP
// hHackInvisible ; 6 :
8567: CALL 21543 0 0
8571: GO 8619
8573: LD_INT 6
8575: DOUBLE
8576: EQUAL
8577: IFTRUE 8581
8579: GO 8588
8581: POP
// hHackChangeYourSide ; 7 :
8582: CALL 21600 0 0
8586: GO 8619
8588: LD_INT 7
8590: DOUBLE
8591: EQUAL
8592: IFTRUE 8596
8594: GO 8603
8596: POP
// hHackChangeUnitSide ; 8 :
8597: CALL 21642 0 0
8601: GO 8619
8603: LD_INT 8
8605: DOUBLE
8606: EQUAL
8607: IFTRUE 8611
8609: GO 8618
8611: POP
// hHackFog ; end ;
8612: CALL 21743 0 0
8616: GO 8619
8618: POP
// end ; if p2 = game_save_mode then
8619: LD_VAR 0 2
8623: PUSH
8624: LD_INT 102
8626: EQUAL
8627: IFFALSE 8682
// begin if p3 = 1 then
8629: LD_VAR 0 3
8633: PUSH
8634: LD_INT 1
8636: EQUAL
8637: IFFALSE 8649
// globalGameSaveCounter := p4 ;
8639: LD_ADDR_EXP 24
8643: PUSH
8644: LD_VAR 0 4
8648: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8649: LD_VAR 0 3
8653: PUSH
8654: LD_INT 2
8656: EQUAL
8657: PUSH
8658: LD_EXP 24
8662: AND
8663: IFFALSE 8682
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8665: LD_STRING setGameSaveCounter(
8667: PUSH
8668: LD_EXP 24
8672: STR
8673: PUSH
8674: LD_STRING )
8676: STR
8677: PPUSH
8678: CALL_OW 559
// end ; end ;
8682: LD_VAR 0 7
8686: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8687: LD_INT 0
8689: PPUSH
// streamModeActive := false ;
8690: LD_ADDR_EXP 25
8694: PUSH
8695: LD_INT 0
8697: ST_TO_ADDR
// normalCounter := 36 ;
8698: LD_ADDR_EXP 26
8702: PUSH
8703: LD_INT 36
8705: ST_TO_ADDR
// hardcoreCounter := 18 ;
8706: LD_ADDR_EXP 27
8710: PUSH
8711: LD_INT 18
8713: ST_TO_ADDR
// sRocket := false ;
8714: LD_ADDR_EXP 30
8718: PUSH
8719: LD_INT 0
8721: ST_TO_ADDR
// sSpeed := false ;
8722: LD_ADDR_EXP 29
8726: PUSH
8727: LD_INT 0
8729: ST_TO_ADDR
// sEngine := false ;
8730: LD_ADDR_EXP 31
8734: PUSH
8735: LD_INT 0
8737: ST_TO_ADDR
// sSpec := false ;
8738: LD_ADDR_EXP 28
8742: PUSH
8743: LD_INT 0
8745: ST_TO_ADDR
// sLevel := false ;
8746: LD_ADDR_EXP 32
8750: PUSH
8751: LD_INT 0
8753: ST_TO_ADDR
// sArmoury := false ;
8754: LD_ADDR_EXP 33
8758: PUSH
8759: LD_INT 0
8761: ST_TO_ADDR
// sRadar := false ;
8762: LD_ADDR_EXP 34
8766: PUSH
8767: LD_INT 0
8769: ST_TO_ADDR
// sBunker := false ;
8770: LD_ADDR_EXP 35
8774: PUSH
8775: LD_INT 0
8777: ST_TO_ADDR
// sHack := false ;
8778: LD_ADDR_EXP 36
8782: PUSH
8783: LD_INT 0
8785: ST_TO_ADDR
// sFire := false ;
8786: LD_ADDR_EXP 37
8790: PUSH
8791: LD_INT 0
8793: ST_TO_ADDR
// sRefresh := false ;
8794: LD_ADDR_EXP 38
8798: PUSH
8799: LD_INT 0
8801: ST_TO_ADDR
// sExp := false ;
8802: LD_ADDR_EXP 39
8806: PUSH
8807: LD_INT 0
8809: ST_TO_ADDR
// sDepot := false ;
8810: LD_ADDR_EXP 40
8814: PUSH
8815: LD_INT 0
8817: ST_TO_ADDR
// sFlag := false ;
8818: LD_ADDR_EXP 41
8822: PUSH
8823: LD_INT 0
8825: ST_TO_ADDR
// sKamikadze := false ;
8826: LD_ADDR_EXP 49
8830: PUSH
8831: LD_INT 0
8833: ST_TO_ADDR
// sTroll := false ;
8834: LD_ADDR_EXP 50
8838: PUSH
8839: LD_INT 0
8841: ST_TO_ADDR
// sSlow := false ;
8842: LD_ADDR_EXP 51
8846: PUSH
8847: LD_INT 0
8849: ST_TO_ADDR
// sLack := false ;
8850: LD_ADDR_EXP 52
8854: PUSH
8855: LD_INT 0
8857: ST_TO_ADDR
// sTank := false ;
8858: LD_ADDR_EXP 54
8862: PUSH
8863: LD_INT 0
8865: ST_TO_ADDR
// sRemote := false ;
8866: LD_ADDR_EXP 55
8870: PUSH
8871: LD_INT 0
8873: ST_TO_ADDR
// sPowell := false ;
8874: LD_ADDR_EXP 56
8878: PUSH
8879: LD_INT 0
8881: ST_TO_ADDR
// sTeleport := false ;
8882: LD_ADDR_EXP 59
8886: PUSH
8887: LD_INT 0
8889: ST_TO_ADDR
// sOilTower := false ;
8890: LD_ADDR_EXP 61
8894: PUSH
8895: LD_INT 0
8897: ST_TO_ADDR
// sShovel := false ;
8898: LD_ADDR_EXP 62
8902: PUSH
8903: LD_INT 0
8905: ST_TO_ADDR
// sSheik := false ;
8906: LD_ADDR_EXP 63
8910: PUSH
8911: LD_INT 0
8913: ST_TO_ADDR
// sEarthquake := false ;
8914: LD_ADDR_EXP 65
8918: PUSH
8919: LD_INT 0
8921: ST_TO_ADDR
// sAI := false ;
8922: LD_ADDR_EXP 66
8926: PUSH
8927: LD_INT 0
8929: ST_TO_ADDR
// sCargo := false ;
8930: LD_ADDR_EXP 69
8934: PUSH
8935: LD_INT 0
8937: ST_TO_ADDR
// sDLaser := false ;
8938: LD_ADDR_EXP 70
8942: PUSH
8943: LD_INT 0
8945: ST_TO_ADDR
// sExchange := false ;
8946: LD_ADDR_EXP 71
8950: PUSH
8951: LD_INT 0
8953: ST_TO_ADDR
// sFac := false ;
8954: LD_ADDR_EXP 72
8958: PUSH
8959: LD_INT 0
8961: ST_TO_ADDR
// sPower := false ;
8962: LD_ADDR_EXP 73
8966: PUSH
8967: LD_INT 0
8969: ST_TO_ADDR
// sRandom := false ;
8970: LD_ADDR_EXP 74
8974: PUSH
8975: LD_INT 0
8977: ST_TO_ADDR
// sShield := false ;
8978: LD_ADDR_EXP 75
8982: PUSH
8983: LD_INT 0
8985: ST_TO_ADDR
// sTime := false ;
8986: LD_ADDR_EXP 76
8990: PUSH
8991: LD_INT 0
8993: ST_TO_ADDR
// sTools := false ;
8994: LD_ADDR_EXP 77
8998: PUSH
8999: LD_INT 0
9001: ST_TO_ADDR
// sSold := false ;
9002: LD_ADDR_EXP 42
9006: PUSH
9007: LD_INT 0
9009: ST_TO_ADDR
// sDiff := false ;
9010: LD_ADDR_EXP 43
9014: PUSH
9015: LD_INT 0
9017: ST_TO_ADDR
// sFog := false ;
9018: LD_ADDR_EXP 46
9022: PUSH
9023: LD_INT 0
9025: ST_TO_ADDR
// sReset := false ;
9026: LD_ADDR_EXP 47
9030: PUSH
9031: LD_INT 0
9033: ST_TO_ADDR
// sSun := false ;
9034: LD_ADDR_EXP 48
9038: PUSH
9039: LD_INT 0
9041: ST_TO_ADDR
// sTiger := false ;
9042: LD_ADDR_EXP 44
9046: PUSH
9047: LD_INT 0
9049: ST_TO_ADDR
// sBomb := false ;
9050: LD_ADDR_EXP 45
9054: PUSH
9055: LD_INT 0
9057: ST_TO_ADDR
// sWound := false ;
9058: LD_ADDR_EXP 53
9062: PUSH
9063: LD_INT 0
9065: ST_TO_ADDR
// sBetray := false ;
9066: LD_ADDR_EXP 57
9070: PUSH
9071: LD_INT 0
9073: ST_TO_ADDR
// sContamin := false ;
9074: LD_ADDR_EXP 58
9078: PUSH
9079: LD_INT 0
9081: ST_TO_ADDR
// sOil := false ;
9082: LD_ADDR_EXP 60
9086: PUSH
9087: LD_INT 0
9089: ST_TO_ADDR
// sStu := false ;
9090: LD_ADDR_EXP 64
9094: PUSH
9095: LD_INT 0
9097: ST_TO_ADDR
// sBazooka := false ;
9098: LD_ADDR_EXP 67
9102: PUSH
9103: LD_INT 0
9105: ST_TO_ADDR
// sMortar := false ;
9106: LD_ADDR_EXP 68
9110: PUSH
9111: LD_INT 0
9113: ST_TO_ADDR
// sRanger := false ;
9114: LD_ADDR_EXP 78
9118: PUSH
9119: LD_INT 0
9121: ST_TO_ADDR
// sComputer := false ;
9122: LD_ADDR_EXP 79
9126: PUSH
9127: LD_INT 0
9129: ST_TO_ADDR
// s30 := false ;
9130: LD_ADDR_EXP 80
9134: PUSH
9135: LD_INT 0
9137: ST_TO_ADDR
// s60 := false ;
9138: LD_ADDR_EXP 81
9142: PUSH
9143: LD_INT 0
9145: ST_TO_ADDR
// end ;
9146: LD_VAR 0 1
9150: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9151: LD_INT 0
9153: PPUSH
9154: PPUSH
9155: PPUSH
9156: PPUSH
9157: PPUSH
9158: PPUSH
9159: PPUSH
// result := [ ] ;
9160: LD_ADDR_VAR 0 2
9164: PUSH
9165: EMPTY
9166: ST_TO_ADDR
// if campaign_id = 1 then
9167: LD_OWVAR 69
9171: PUSH
9172: LD_INT 1
9174: EQUAL
9175: IFFALSE 12341
// begin case mission_number of 1 :
9177: LD_OWVAR 70
9181: PUSH
9182: LD_INT 1
9184: DOUBLE
9185: EQUAL
9186: IFTRUE 9190
9188: GO 9266
9190: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9191: LD_ADDR_VAR 0 2
9195: PUSH
9196: LD_INT 2
9198: PUSH
9199: LD_INT 4
9201: PUSH
9202: LD_INT 11
9204: PUSH
9205: LD_INT 12
9207: PUSH
9208: LD_INT 15
9210: PUSH
9211: LD_INT 16
9213: PUSH
9214: LD_INT 22
9216: PUSH
9217: LD_INT 23
9219: PUSH
9220: LD_INT 26
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: PUSH
9234: LD_INT 101
9236: PUSH
9237: LD_INT 102
9239: PUSH
9240: LD_INT 106
9242: PUSH
9243: LD_INT 116
9245: PUSH
9246: LD_INT 117
9248: PUSH
9249: LD_INT 118
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: ST_TO_ADDR
9264: GO 12339
9266: LD_INT 2
9268: DOUBLE
9269: EQUAL
9270: IFTRUE 9274
9272: GO 9358
9274: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9275: LD_ADDR_VAR 0 2
9279: PUSH
9280: LD_INT 2
9282: PUSH
9283: LD_INT 4
9285: PUSH
9286: LD_INT 11
9288: PUSH
9289: LD_INT 12
9291: PUSH
9292: LD_INT 15
9294: PUSH
9295: LD_INT 16
9297: PUSH
9298: LD_INT 22
9300: PUSH
9301: LD_INT 23
9303: PUSH
9304: LD_INT 26
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: PUSH
9318: LD_INT 101
9320: PUSH
9321: LD_INT 102
9323: PUSH
9324: LD_INT 105
9326: PUSH
9327: LD_INT 106
9329: PUSH
9330: LD_INT 108
9332: PUSH
9333: LD_INT 116
9335: PUSH
9336: LD_INT 117
9338: PUSH
9339: LD_INT 118
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: ST_TO_ADDR
9356: GO 12339
9358: LD_INT 3
9360: DOUBLE
9361: EQUAL
9362: IFTRUE 9366
9364: GO 9454
9366: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9367: LD_ADDR_VAR 0 2
9371: PUSH
9372: LD_INT 2
9374: PUSH
9375: LD_INT 4
9377: PUSH
9378: LD_INT 5
9380: PUSH
9381: LD_INT 11
9383: PUSH
9384: LD_INT 12
9386: PUSH
9387: LD_INT 15
9389: PUSH
9390: LD_INT 16
9392: PUSH
9393: LD_INT 22
9395: PUSH
9396: LD_INT 26
9398: PUSH
9399: LD_INT 36
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: PUSH
9414: LD_INT 101
9416: PUSH
9417: LD_INT 102
9419: PUSH
9420: LD_INT 105
9422: PUSH
9423: LD_INT 106
9425: PUSH
9426: LD_INT 108
9428: PUSH
9429: LD_INT 116
9431: PUSH
9432: LD_INT 117
9434: PUSH
9435: LD_INT 118
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: ST_TO_ADDR
9452: GO 12339
9454: LD_INT 4
9456: DOUBLE
9457: EQUAL
9458: IFTRUE 9462
9460: GO 9558
9462: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9463: LD_ADDR_VAR 0 2
9467: PUSH
9468: LD_INT 2
9470: PUSH
9471: LD_INT 4
9473: PUSH
9474: LD_INT 5
9476: PUSH
9477: LD_INT 8
9479: PUSH
9480: LD_INT 11
9482: PUSH
9483: LD_INT 12
9485: PUSH
9486: LD_INT 15
9488: PUSH
9489: LD_INT 16
9491: PUSH
9492: LD_INT 22
9494: PUSH
9495: LD_INT 23
9497: PUSH
9498: LD_INT 26
9500: PUSH
9501: LD_INT 36
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: PUSH
9518: LD_INT 101
9520: PUSH
9521: LD_INT 102
9523: PUSH
9524: LD_INT 105
9526: PUSH
9527: LD_INT 106
9529: PUSH
9530: LD_INT 108
9532: PUSH
9533: LD_INT 116
9535: PUSH
9536: LD_INT 117
9538: PUSH
9539: LD_INT 118
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: ST_TO_ADDR
9556: GO 12339
9558: LD_INT 5
9560: DOUBLE
9561: EQUAL
9562: IFTRUE 9566
9564: GO 9678
9566: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9567: LD_ADDR_VAR 0 2
9571: PUSH
9572: LD_INT 2
9574: PUSH
9575: LD_INT 4
9577: PUSH
9578: LD_INT 5
9580: PUSH
9581: LD_INT 6
9583: PUSH
9584: LD_INT 8
9586: PUSH
9587: LD_INT 11
9589: PUSH
9590: LD_INT 12
9592: PUSH
9593: LD_INT 15
9595: PUSH
9596: LD_INT 16
9598: PUSH
9599: LD_INT 22
9601: PUSH
9602: LD_INT 23
9604: PUSH
9605: LD_INT 25
9607: PUSH
9608: LD_INT 26
9610: PUSH
9611: LD_INT 36
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 101
9632: PUSH
9633: LD_INT 102
9635: PUSH
9636: LD_INT 105
9638: PUSH
9639: LD_INT 106
9641: PUSH
9642: LD_INT 108
9644: PUSH
9645: LD_INT 109
9647: PUSH
9648: LD_INT 112
9650: PUSH
9651: LD_INT 116
9653: PUSH
9654: LD_INT 117
9656: PUSH
9657: LD_INT 118
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: ST_TO_ADDR
9676: GO 12339
9678: LD_INT 6
9680: DOUBLE
9681: EQUAL
9682: IFTRUE 9686
9684: GO 9818
9686: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9687: LD_ADDR_VAR 0 2
9691: PUSH
9692: LD_INT 2
9694: PUSH
9695: LD_INT 4
9697: PUSH
9698: LD_INT 5
9700: PUSH
9701: LD_INT 6
9703: PUSH
9704: LD_INT 8
9706: PUSH
9707: LD_INT 11
9709: PUSH
9710: LD_INT 12
9712: PUSH
9713: LD_INT 15
9715: PUSH
9716: LD_INT 16
9718: PUSH
9719: LD_INT 20
9721: PUSH
9722: LD_INT 21
9724: PUSH
9725: LD_INT 22
9727: PUSH
9728: LD_INT 23
9730: PUSH
9731: LD_INT 25
9733: PUSH
9734: LD_INT 26
9736: PUSH
9737: LD_INT 30
9739: PUSH
9740: LD_INT 31
9742: PUSH
9743: LD_INT 32
9745: PUSH
9746: LD_INT 36
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: PUSH
9770: LD_INT 101
9772: PUSH
9773: LD_INT 102
9775: PUSH
9776: LD_INT 105
9778: PUSH
9779: LD_INT 106
9781: PUSH
9782: LD_INT 108
9784: PUSH
9785: LD_INT 109
9787: PUSH
9788: LD_INT 112
9790: PUSH
9791: LD_INT 116
9793: PUSH
9794: LD_INT 117
9796: PUSH
9797: LD_INT 118
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: ST_TO_ADDR
9816: GO 12339
9818: LD_INT 7
9820: DOUBLE
9821: EQUAL
9822: IFTRUE 9826
9824: GO 9938
9826: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9827: LD_ADDR_VAR 0 2
9831: PUSH
9832: LD_INT 2
9834: PUSH
9835: LD_INT 4
9837: PUSH
9838: LD_INT 5
9840: PUSH
9841: LD_INT 7
9843: PUSH
9844: LD_INT 11
9846: PUSH
9847: LD_INT 12
9849: PUSH
9850: LD_INT 15
9852: PUSH
9853: LD_INT 16
9855: PUSH
9856: LD_INT 20
9858: PUSH
9859: LD_INT 21
9861: PUSH
9862: LD_INT 22
9864: PUSH
9865: LD_INT 23
9867: PUSH
9868: LD_INT 25
9870: PUSH
9871: LD_INT 26
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 101
9892: PUSH
9893: LD_INT 102
9895: PUSH
9896: LD_INT 103
9898: PUSH
9899: LD_INT 105
9901: PUSH
9902: LD_INT 106
9904: PUSH
9905: LD_INT 108
9907: PUSH
9908: LD_INT 112
9910: PUSH
9911: LD_INT 116
9913: PUSH
9914: LD_INT 117
9916: PUSH
9917: LD_INT 118
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: ST_TO_ADDR
9936: GO 12339
9938: LD_INT 8
9940: DOUBLE
9941: EQUAL
9942: IFTRUE 9946
9944: GO 10086
9946: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9947: LD_ADDR_VAR 0 2
9951: PUSH
9952: LD_INT 2
9954: PUSH
9955: LD_INT 4
9957: PUSH
9958: LD_INT 5
9960: PUSH
9961: LD_INT 6
9963: PUSH
9964: LD_INT 7
9966: PUSH
9967: LD_INT 8
9969: PUSH
9970: LD_INT 11
9972: PUSH
9973: LD_INT 12
9975: PUSH
9976: LD_INT 15
9978: PUSH
9979: LD_INT 16
9981: PUSH
9982: LD_INT 20
9984: PUSH
9985: LD_INT 21
9987: PUSH
9988: LD_INT 22
9990: PUSH
9991: LD_INT 23
9993: PUSH
9994: LD_INT 25
9996: PUSH
9997: LD_INT 26
9999: PUSH
10000: LD_INT 30
10002: PUSH
10003: LD_INT 31
10005: PUSH
10006: LD_INT 32
10008: PUSH
10009: LD_INT 36
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 101
10036: PUSH
10037: LD_INT 102
10039: PUSH
10040: LD_INT 103
10042: PUSH
10043: LD_INT 105
10045: PUSH
10046: LD_INT 106
10048: PUSH
10049: LD_INT 108
10051: PUSH
10052: LD_INT 109
10054: PUSH
10055: LD_INT 112
10057: PUSH
10058: LD_INT 116
10060: PUSH
10061: LD_INT 117
10063: PUSH
10064: LD_INT 118
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: ST_TO_ADDR
10084: GO 12339
10086: LD_INT 9
10088: DOUBLE
10089: EQUAL
10090: IFTRUE 10094
10092: GO 10242
10094: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10095: LD_ADDR_VAR 0 2
10099: PUSH
10100: LD_INT 2
10102: PUSH
10103: LD_INT 4
10105: PUSH
10106: LD_INT 5
10108: PUSH
10109: LD_INT 6
10111: PUSH
10112: LD_INT 7
10114: PUSH
10115: LD_INT 8
10117: PUSH
10118: LD_INT 11
10120: PUSH
10121: LD_INT 12
10123: PUSH
10124: LD_INT 15
10126: PUSH
10127: LD_INT 16
10129: PUSH
10130: LD_INT 20
10132: PUSH
10133: LD_INT 21
10135: PUSH
10136: LD_INT 22
10138: PUSH
10139: LD_INT 23
10141: PUSH
10142: LD_INT 25
10144: PUSH
10145: LD_INT 26
10147: PUSH
10148: LD_INT 28
10150: PUSH
10151: LD_INT 30
10153: PUSH
10154: LD_INT 31
10156: PUSH
10157: LD_INT 32
10159: PUSH
10160: LD_INT 36
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: PUSH
10186: LD_INT 101
10188: PUSH
10189: LD_INT 102
10191: PUSH
10192: LD_INT 103
10194: PUSH
10195: LD_INT 105
10197: PUSH
10198: LD_INT 106
10200: PUSH
10201: LD_INT 108
10203: PUSH
10204: LD_INT 109
10206: PUSH
10207: LD_INT 112
10209: PUSH
10210: LD_INT 114
10212: PUSH
10213: LD_INT 116
10215: PUSH
10216: LD_INT 117
10218: PUSH
10219: LD_INT 118
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: ST_TO_ADDR
10240: GO 12339
10242: LD_INT 10
10244: DOUBLE
10245: EQUAL
10246: IFTRUE 10250
10248: GO 10446
10250: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10251: LD_ADDR_VAR 0 2
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: LD_INT 4
10261: PUSH
10262: LD_INT 5
10264: PUSH
10265: LD_INT 6
10267: PUSH
10268: LD_INT 7
10270: PUSH
10271: LD_INT 8
10273: PUSH
10274: LD_INT 9
10276: PUSH
10277: LD_INT 10
10279: PUSH
10280: LD_INT 11
10282: PUSH
10283: LD_INT 12
10285: PUSH
10286: LD_INT 13
10288: PUSH
10289: LD_INT 14
10291: PUSH
10292: LD_INT 15
10294: PUSH
10295: LD_INT 16
10297: PUSH
10298: LD_INT 17
10300: PUSH
10301: LD_INT 18
10303: PUSH
10304: LD_INT 19
10306: PUSH
10307: LD_INT 20
10309: PUSH
10310: LD_INT 21
10312: PUSH
10313: LD_INT 22
10315: PUSH
10316: LD_INT 23
10318: PUSH
10319: LD_INT 24
10321: PUSH
10322: LD_INT 25
10324: PUSH
10325: LD_INT 26
10327: PUSH
10328: LD_INT 28
10330: PUSH
10331: LD_INT 30
10333: PUSH
10334: LD_INT 31
10336: PUSH
10337: LD_INT 32
10339: PUSH
10340: LD_INT 36
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 101
10376: PUSH
10377: LD_INT 102
10379: PUSH
10380: LD_INT 103
10382: PUSH
10383: LD_INT 104
10385: PUSH
10386: LD_INT 105
10388: PUSH
10389: LD_INT 106
10391: PUSH
10392: LD_INT 107
10394: PUSH
10395: LD_INT 108
10397: PUSH
10398: LD_INT 109
10400: PUSH
10401: LD_INT 110
10403: PUSH
10404: LD_INT 111
10406: PUSH
10407: LD_INT 112
10409: PUSH
10410: LD_INT 114
10412: PUSH
10413: LD_INT 116
10415: PUSH
10416: LD_INT 117
10418: PUSH
10419: LD_INT 118
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: ST_TO_ADDR
10444: GO 12339
10446: LD_INT 11
10448: DOUBLE
10449: EQUAL
10450: IFTRUE 10454
10452: GO 10658
10454: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10455: LD_ADDR_VAR 0 2
10459: PUSH
10460: LD_INT 2
10462: PUSH
10463: LD_INT 3
10465: PUSH
10466: LD_INT 4
10468: PUSH
10469: LD_INT 5
10471: PUSH
10472: LD_INT 6
10474: PUSH
10475: LD_INT 7
10477: PUSH
10478: LD_INT 8
10480: PUSH
10481: LD_INT 9
10483: PUSH
10484: LD_INT 10
10486: PUSH
10487: LD_INT 11
10489: PUSH
10490: LD_INT 12
10492: PUSH
10493: LD_INT 13
10495: PUSH
10496: LD_INT 14
10498: PUSH
10499: LD_INT 15
10501: PUSH
10502: LD_INT 16
10504: PUSH
10505: LD_INT 17
10507: PUSH
10508: LD_INT 18
10510: PUSH
10511: LD_INT 19
10513: PUSH
10514: LD_INT 20
10516: PUSH
10517: LD_INT 21
10519: PUSH
10520: LD_INT 22
10522: PUSH
10523: LD_INT 23
10525: PUSH
10526: LD_INT 24
10528: PUSH
10529: LD_INT 25
10531: PUSH
10532: LD_INT 26
10534: PUSH
10535: LD_INT 28
10537: PUSH
10538: LD_INT 30
10540: PUSH
10541: LD_INT 31
10543: PUSH
10544: LD_INT 32
10546: PUSH
10547: LD_INT 34
10549: PUSH
10550: LD_INT 36
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 101
10588: PUSH
10589: LD_INT 102
10591: PUSH
10592: LD_INT 103
10594: PUSH
10595: LD_INT 104
10597: PUSH
10598: LD_INT 105
10600: PUSH
10601: LD_INT 106
10603: PUSH
10604: LD_INT 107
10606: PUSH
10607: LD_INT 108
10609: PUSH
10610: LD_INT 109
10612: PUSH
10613: LD_INT 110
10615: PUSH
10616: LD_INT 111
10618: PUSH
10619: LD_INT 112
10621: PUSH
10622: LD_INT 114
10624: PUSH
10625: LD_INT 116
10627: PUSH
10628: LD_INT 117
10630: PUSH
10631: LD_INT 118
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: ST_TO_ADDR
10656: GO 12339
10658: LD_INT 12
10660: DOUBLE
10661: EQUAL
10662: IFTRUE 10666
10664: GO 10886
10666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10667: LD_ADDR_VAR 0 2
10671: PUSH
10672: LD_INT 1
10674: PUSH
10675: LD_INT 2
10677: PUSH
10678: LD_INT 3
10680: PUSH
10681: LD_INT 4
10683: PUSH
10684: LD_INT 5
10686: PUSH
10687: LD_INT 6
10689: PUSH
10690: LD_INT 7
10692: PUSH
10693: LD_INT 8
10695: PUSH
10696: LD_INT 9
10698: PUSH
10699: LD_INT 10
10701: PUSH
10702: LD_INT 11
10704: PUSH
10705: LD_INT 12
10707: PUSH
10708: LD_INT 13
10710: PUSH
10711: LD_INT 14
10713: PUSH
10714: LD_INT 15
10716: PUSH
10717: LD_INT 16
10719: PUSH
10720: LD_INT 17
10722: PUSH
10723: LD_INT 18
10725: PUSH
10726: LD_INT 19
10728: PUSH
10729: LD_INT 20
10731: PUSH
10732: LD_INT 21
10734: PUSH
10735: LD_INT 22
10737: PUSH
10738: LD_INT 23
10740: PUSH
10741: LD_INT 24
10743: PUSH
10744: LD_INT 25
10746: PUSH
10747: LD_INT 26
10749: PUSH
10750: LD_INT 27
10752: PUSH
10753: LD_INT 28
10755: PUSH
10756: LD_INT 30
10758: PUSH
10759: LD_INT 31
10761: PUSH
10762: LD_INT 32
10764: PUSH
10765: LD_INT 33
10767: PUSH
10768: LD_INT 34
10770: PUSH
10771: LD_INT 36
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: PUSH
10810: LD_INT 101
10812: PUSH
10813: LD_INT 102
10815: PUSH
10816: LD_INT 103
10818: PUSH
10819: LD_INT 104
10821: PUSH
10822: LD_INT 105
10824: PUSH
10825: LD_INT 106
10827: PUSH
10828: LD_INT 107
10830: PUSH
10831: LD_INT 108
10833: PUSH
10834: LD_INT 109
10836: PUSH
10837: LD_INT 110
10839: PUSH
10840: LD_INT 111
10842: PUSH
10843: LD_INT 112
10845: PUSH
10846: LD_INT 113
10848: PUSH
10849: LD_INT 114
10851: PUSH
10852: LD_INT 116
10854: PUSH
10855: LD_INT 117
10857: PUSH
10858: LD_INT 118
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: ST_TO_ADDR
10884: GO 12339
10886: LD_INT 13
10888: DOUBLE
10889: EQUAL
10890: IFTRUE 10894
10892: GO 11102
10894: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10895: LD_ADDR_VAR 0 2
10899: PUSH
10900: LD_INT 1
10902: PUSH
10903: LD_INT 2
10905: PUSH
10906: LD_INT 3
10908: PUSH
10909: LD_INT 4
10911: PUSH
10912: LD_INT 5
10914: PUSH
10915: LD_INT 8
10917: PUSH
10918: LD_INT 9
10920: PUSH
10921: LD_INT 10
10923: PUSH
10924: LD_INT 11
10926: PUSH
10927: LD_INT 12
10929: PUSH
10930: LD_INT 14
10932: PUSH
10933: LD_INT 15
10935: PUSH
10936: LD_INT 16
10938: PUSH
10939: LD_INT 17
10941: PUSH
10942: LD_INT 18
10944: PUSH
10945: LD_INT 19
10947: PUSH
10948: LD_INT 20
10950: PUSH
10951: LD_INT 21
10953: PUSH
10954: LD_INT 22
10956: PUSH
10957: LD_INT 23
10959: PUSH
10960: LD_INT 24
10962: PUSH
10963: LD_INT 25
10965: PUSH
10966: LD_INT 26
10968: PUSH
10969: LD_INT 27
10971: PUSH
10972: LD_INT 28
10974: PUSH
10975: LD_INT 30
10977: PUSH
10978: LD_INT 31
10980: PUSH
10981: LD_INT 32
10983: PUSH
10984: LD_INT 33
10986: PUSH
10987: LD_INT 34
10989: PUSH
10990: LD_INT 36
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 101
11028: PUSH
11029: LD_INT 102
11031: PUSH
11032: LD_INT 103
11034: PUSH
11035: LD_INT 104
11037: PUSH
11038: LD_INT 105
11040: PUSH
11041: LD_INT 106
11043: PUSH
11044: LD_INT 107
11046: PUSH
11047: LD_INT 108
11049: PUSH
11050: LD_INT 109
11052: PUSH
11053: LD_INT 110
11055: PUSH
11056: LD_INT 111
11058: PUSH
11059: LD_INT 112
11061: PUSH
11062: LD_INT 113
11064: PUSH
11065: LD_INT 114
11067: PUSH
11068: LD_INT 116
11070: PUSH
11071: LD_INT 117
11073: PUSH
11074: LD_INT 118
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: ST_TO_ADDR
11100: GO 12339
11102: LD_INT 14
11104: DOUBLE
11105: EQUAL
11106: IFTRUE 11110
11108: GO 11334
11110: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11111: LD_ADDR_VAR 0 2
11115: PUSH
11116: LD_INT 1
11118: PUSH
11119: LD_INT 2
11121: PUSH
11122: LD_INT 3
11124: PUSH
11125: LD_INT 4
11127: PUSH
11128: LD_INT 5
11130: PUSH
11131: LD_INT 6
11133: PUSH
11134: LD_INT 7
11136: PUSH
11137: LD_INT 8
11139: PUSH
11140: LD_INT 9
11142: PUSH
11143: LD_INT 10
11145: PUSH
11146: LD_INT 11
11148: PUSH
11149: LD_INT 12
11151: PUSH
11152: LD_INT 13
11154: PUSH
11155: LD_INT 14
11157: PUSH
11158: LD_INT 15
11160: PUSH
11161: LD_INT 16
11163: PUSH
11164: LD_INT 17
11166: PUSH
11167: LD_INT 18
11169: PUSH
11170: LD_INT 19
11172: PUSH
11173: LD_INT 20
11175: PUSH
11176: LD_INT 21
11178: PUSH
11179: LD_INT 22
11181: PUSH
11182: LD_INT 23
11184: PUSH
11185: LD_INT 24
11187: PUSH
11188: LD_INT 25
11190: PUSH
11191: LD_INT 26
11193: PUSH
11194: LD_INT 27
11196: PUSH
11197: LD_INT 28
11199: PUSH
11200: LD_INT 29
11202: PUSH
11203: LD_INT 30
11205: PUSH
11206: LD_INT 31
11208: PUSH
11209: LD_INT 32
11211: PUSH
11212: LD_INT 33
11214: PUSH
11215: LD_INT 34
11217: PUSH
11218: LD_INT 36
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 101
11260: PUSH
11261: LD_INT 102
11263: PUSH
11264: LD_INT 103
11266: PUSH
11267: LD_INT 104
11269: PUSH
11270: LD_INT 105
11272: PUSH
11273: LD_INT 106
11275: PUSH
11276: LD_INT 107
11278: PUSH
11279: LD_INT 108
11281: PUSH
11282: LD_INT 109
11284: PUSH
11285: LD_INT 110
11287: PUSH
11288: LD_INT 111
11290: PUSH
11291: LD_INT 112
11293: PUSH
11294: LD_INT 113
11296: PUSH
11297: LD_INT 114
11299: PUSH
11300: LD_INT 116
11302: PUSH
11303: LD_INT 117
11305: PUSH
11306: LD_INT 118
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: ST_TO_ADDR
11332: GO 12339
11334: LD_INT 15
11336: DOUBLE
11337: EQUAL
11338: IFTRUE 11342
11340: GO 11566
11342: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11343: LD_ADDR_VAR 0 2
11347: PUSH
11348: LD_INT 1
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: LD_INT 3
11356: PUSH
11357: LD_INT 4
11359: PUSH
11360: LD_INT 5
11362: PUSH
11363: LD_INT 6
11365: PUSH
11366: LD_INT 7
11368: PUSH
11369: LD_INT 8
11371: PUSH
11372: LD_INT 9
11374: PUSH
11375: LD_INT 10
11377: PUSH
11378: LD_INT 11
11380: PUSH
11381: LD_INT 12
11383: PUSH
11384: LD_INT 13
11386: PUSH
11387: LD_INT 14
11389: PUSH
11390: LD_INT 15
11392: PUSH
11393: LD_INT 16
11395: PUSH
11396: LD_INT 17
11398: PUSH
11399: LD_INT 18
11401: PUSH
11402: LD_INT 19
11404: PUSH
11405: LD_INT 20
11407: PUSH
11408: LD_INT 21
11410: PUSH
11411: LD_INT 22
11413: PUSH
11414: LD_INT 23
11416: PUSH
11417: LD_INT 24
11419: PUSH
11420: LD_INT 25
11422: PUSH
11423: LD_INT 26
11425: PUSH
11426: LD_INT 27
11428: PUSH
11429: LD_INT 28
11431: PUSH
11432: LD_INT 29
11434: PUSH
11435: LD_INT 30
11437: PUSH
11438: LD_INT 31
11440: PUSH
11441: LD_INT 32
11443: PUSH
11444: LD_INT 33
11446: PUSH
11447: LD_INT 34
11449: PUSH
11450: LD_INT 36
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 101
11492: PUSH
11493: LD_INT 102
11495: PUSH
11496: LD_INT 103
11498: PUSH
11499: LD_INT 104
11501: PUSH
11502: LD_INT 105
11504: PUSH
11505: LD_INT 106
11507: PUSH
11508: LD_INT 107
11510: PUSH
11511: LD_INT 108
11513: PUSH
11514: LD_INT 109
11516: PUSH
11517: LD_INT 110
11519: PUSH
11520: LD_INT 111
11522: PUSH
11523: LD_INT 112
11525: PUSH
11526: LD_INT 113
11528: PUSH
11529: LD_INT 114
11531: PUSH
11532: LD_INT 116
11534: PUSH
11535: LD_INT 117
11537: PUSH
11538: LD_INT 118
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: ST_TO_ADDR
11564: GO 12339
11566: LD_INT 16
11568: DOUBLE
11569: EQUAL
11570: IFTRUE 11574
11572: GO 11710
11574: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11575: LD_ADDR_VAR 0 2
11579: PUSH
11580: LD_INT 2
11582: PUSH
11583: LD_INT 4
11585: PUSH
11586: LD_INT 5
11588: PUSH
11589: LD_INT 7
11591: PUSH
11592: LD_INT 11
11594: PUSH
11595: LD_INT 12
11597: PUSH
11598: LD_INT 15
11600: PUSH
11601: LD_INT 16
11603: PUSH
11604: LD_INT 20
11606: PUSH
11607: LD_INT 21
11609: PUSH
11610: LD_INT 22
11612: PUSH
11613: LD_INT 23
11615: PUSH
11616: LD_INT 25
11618: PUSH
11619: LD_INT 26
11621: PUSH
11622: LD_INT 30
11624: PUSH
11625: LD_INT 31
11627: PUSH
11628: LD_INT 32
11630: PUSH
11631: LD_INT 33
11633: PUSH
11634: LD_INT 34
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 101
11660: PUSH
11661: LD_INT 102
11663: PUSH
11664: LD_INT 103
11666: PUSH
11667: LD_INT 106
11669: PUSH
11670: LD_INT 108
11672: PUSH
11673: LD_INT 112
11675: PUSH
11676: LD_INT 113
11678: PUSH
11679: LD_INT 114
11681: PUSH
11682: LD_INT 116
11684: PUSH
11685: LD_INT 117
11687: PUSH
11688: LD_INT 118
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: ST_TO_ADDR
11708: GO 12339
11710: LD_INT 17
11712: DOUBLE
11713: EQUAL
11714: IFTRUE 11718
11716: GO 11942
11718: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11719: LD_ADDR_VAR 0 2
11723: PUSH
11724: LD_INT 1
11726: PUSH
11727: LD_INT 2
11729: PUSH
11730: LD_INT 3
11732: PUSH
11733: LD_INT 4
11735: PUSH
11736: LD_INT 5
11738: PUSH
11739: LD_INT 6
11741: PUSH
11742: LD_INT 7
11744: PUSH
11745: LD_INT 8
11747: PUSH
11748: LD_INT 9
11750: PUSH
11751: LD_INT 10
11753: PUSH
11754: LD_INT 11
11756: PUSH
11757: LD_INT 12
11759: PUSH
11760: LD_INT 13
11762: PUSH
11763: LD_INT 14
11765: PUSH
11766: LD_INT 15
11768: PUSH
11769: LD_INT 16
11771: PUSH
11772: LD_INT 17
11774: PUSH
11775: LD_INT 18
11777: PUSH
11778: LD_INT 19
11780: PUSH
11781: LD_INT 20
11783: PUSH
11784: LD_INT 21
11786: PUSH
11787: LD_INT 22
11789: PUSH
11790: LD_INT 23
11792: PUSH
11793: LD_INT 24
11795: PUSH
11796: LD_INT 25
11798: PUSH
11799: LD_INT 26
11801: PUSH
11802: LD_INT 27
11804: PUSH
11805: LD_INT 28
11807: PUSH
11808: LD_INT 29
11810: PUSH
11811: LD_INT 30
11813: PUSH
11814: LD_INT 31
11816: PUSH
11817: LD_INT 32
11819: PUSH
11820: LD_INT 33
11822: PUSH
11823: LD_INT 34
11825: PUSH
11826: LD_INT 36
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: PUSH
11866: LD_INT 101
11868: PUSH
11869: LD_INT 102
11871: PUSH
11872: LD_INT 103
11874: PUSH
11875: LD_INT 104
11877: PUSH
11878: LD_INT 105
11880: PUSH
11881: LD_INT 106
11883: PUSH
11884: LD_INT 107
11886: PUSH
11887: LD_INT 108
11889: PUSH
11890: LD_INT 109
11892: PUSH
11893: LD_INT 110
11895: PUSH
11896: LD_INT 111
11898: PUSH
11899: LD_INT 112
11901: PUSH
11902: LD_INT 113
11904: PUSH
11905: LD_INT 114
11907: PUSH
11908: LD_INT 116
11910: PUSH
11911: LD_INT 117
11913: PUSH
11914: LD_INT 118
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: ST_TO_ADDR
11940: GO 12339
11942: LD_INT 18
11944: DOUBLE
11945: EQUAL
11946: IFTRUE 11950
11948: GO 12098
11950: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11951: LD_ADDR_VAR 0 2
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: LD_INT 4
11961: PUSH
11962: LD_INT 5
11964: PUSH
11965: LD_INT 7
11967: PUSH
11968: LD_INT 11
11970: PUSH
11971: LD_INT 12
11973: PUSH
11974: LD_INT 15
11976: PUSH
11977: LD_INT 16
11979: PUSH
11980: LD_INT 20
11982: PUSH
11983: LD_INT 21
11985: PUSH
11986: LD_INT 22
11988: PUSH
11989: LD_INT 23
11991: PUSH
11992: LD_INT 25
11994: PUSH
11995: LD_INT 26
11997: PUSH
11998: LD_INT 30
12000: PUSH
12001: LD_INT 31
12003: PUSH
12004: LD_INT 32
12006: PUSH
12007: LD_INT 33
12009: PUSH
12010: LD_INT 34
12012: PUSH
12013: LD_INT 35
12015: PUSH
12016: LD_INT 36
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 101
12044: PUSH
12045: LD_INT 102
12047: PUSH
12048: LD_INT 103
12050: PUSH
12051: LD_INT 106
12053: PUSH
12054: LD_INT 108
12056: PUSH
12057: LD_INT 112
12059: PUSH
12060: LD_INT 113
12062: PUSH
12063: LD_INT 114
12065: PUSH
12066: LD_INT 115
12068: PUSH
12069: LD_INT 116
12071: PUSH
12072: LD_INT 117
12074: PUSH
12075: LD_INT 118
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: ST_TO_ADDR
12096: GO 12339
12098: LD_INT 19
12100: DOUBLE
12101: EQUAL
12102: IFTRUE 12106
12104: GO 12338
12106: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12107: LD_ADDR_VAR 0 2
12111: PUSH
12112: LD_INT 1
12114: PUSH
12115: LD_INT 2
12117: PUSH
12118: LD_INT 3
12120: PUSH
12121: LD_INT 4
12123: PUSH
12124: LD_INT 5
12126: PUSH
12127: LD_INT 6
12129: PUSH
12130: LD_INT 7
12132: PUSH
12133: LD_INT 8
12135: PUSH
12136: LD_INT 9
12138: PUSH
12139: LD_INT 10
12141: PUSH
12142: LD_INT 11
12144: PUSH
12145: LD_INT 12
12147: PUSH
12148: LD_INT 13
12150: PUSH
12151: LD_INT 14
12153: PUSH
12154: LD_INT 15
12156: PUSH
12157: LD_INT 16
12159: PUSH
12160: LD_INT 17
12162: PUSH
12163: LD_INT 18
12165: PUSH
12166: LD_INT 19
12168: PUSH
12169: LD_INT 20
12171: PUSH
12172: LD_INT 21
12174: PUSH
12175: LD_INT 22
12177: PUSH
12178: LD_INT 23
12180: PUSH
12181: LD_INT 24
12183: PUSH
12184: LD_INT 25
12186: PUSH
12187: LD_INT 26
12189: PUSH
12190: LD_INT 27
12192: PUSH
12193: LD_INT 28
12195: PUSH
12196: LD_INT 29
12198: PUSH
12199: LD_INT 30
12201: PUSH
12202: LD_INT 31
12204: PUSH
12205: LD_INT 32
12207: PUSH
12208: LD_INT 33
12210: PUSH
12211: LD_INT 34
12213: PUSH
12214: LD_INT 35
12216: PUSH
12217: LD_INT 36
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 101
12260: PUSH
12261: LD_INT 102
12263: PUSH
12264: LD_INT 103
12266: PUSH
12267: LD_INT 104
12269: PUSH
12270: LD_INT 105
12272: PUSH
12273: LD_INT 106
12275: PUSH
12276: LD_INT 107
12278: PUSH
12279: LD_INT 108
12281: PUSH
12282: LD_INT 109
12284: PUSH
12285: LD_INT 110
12287: PUSH
12288: LD_INT 111
12290: PUSH
12291: LD_INT 112
12293: PUSH
12294: LD_INT 113
12296: PUSH
12297: LD_INT 114
12299: PUSH
12300: LD_INT 115
12302: PUSH
12303: LD_INT 116
12305: PUSH
12306: LD_INT 117
12308: PUSH
12309: LD_INT 118
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: ST_TO_ADDR
12336: GO 12339
12338: POP
// end else
12339: GO 12570
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12341: LD_ADDR_VAR 0 2
12345: PUSH
12346: LD_INT 1
12348: PUSH
12349: LD_INT 2
12351: PUSH
12352: LD_INT 3
12354: PUSH
12355: LD_INT 4
12357: PUSH
12358: LD_INT 5
12360: PUSH
12361: LD_INT 6
12363: PUSH
12364: LD_INT 7
12366: PUSH
12367: LD_INT 8
12369: PUSH
12370: LD_INT 9
12372: PUSH
12373: LD_INT 10
12375: PUSH
12376: LD_INT 11
12378: PUSH
12379: LD_INT 12
12381: PUSH
12382: LD_INT 13
12384: PUSH
12385: LD_INT 14
12387: PUSH
12388: LD_INT 15
12390: PUSH
12391: LD_INT 16
12393: PUSH
12394: LD_INT 17
12396: PUSH
12397: LD_INT 18
12399: PUSH
12400: LD_INT 19
12402: PUSH
12403: LD_INT 20
12405: PUSH
12406: LD_INT 21
12408: PUSH
12409: LD_INT 22
12411: PUSH
12412: LD_INT 23
12414: PUSH
12415: LD_INT 24
12417: PUSH
12418: LD_INT 25
12420: PUSH
12421: LD_INT 26
12423: PUSH
12424: LD_INT 27
12426: PUSH
12427: LD_INT 28
12429: PUSH
12430: LD_INT 29
12432: PUSH
12433: LD_INT 30
12435: PUSH
12436: LD_INT 31
12438: PUSH
12439: LD_INT 32
12441: PUSH
12442: LD_INT 33
12444: PUSH
12445: LD_INT 34
12447: PUSH
12448: LD_INT 35
12450: PUSH
12451: LD_INT 36
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 101
12494: PUSH
12495: LD_INT 102
12497: PUSH
12498: LD_INT 103
12500: PUSH
12501: LD_INT 104
12503: PUSH
12504: LD_INT 105
12506: PUSH
12507: LD_INT 106
12509: PUSH
12510: LD_INT 107
12512: PUSH
12513: LD_INT 108
12515: PUSH
12516: LD_INT 109
12518: PUSH
12519: LD_INT 110
12521: PUSH
12522: LD_INT 111
12524: PUSH
12525: LD_INT 112
12527: PUSH
12528: LD_INT 113
12530: PUSH
12531: LD_INT 114
12533: PUSH
12534: LD_INT 115
12536: PUSH
12537: LD_INT 116
12539: PUSH
12540: LD_INT 117
12542: PUSH
12543: LD_INT 118
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: ST_TO_ADDR
// if result then
12570: LD_VAR 0 2
12574: IFFALSE 13360
// begin normal :=  ;
12576: LD_ADDR_VAR 0 5
12580: PUSH
12581: LD_STRING 
12583: ST_TO_ADDR
// hardcore :=  ;
12584: LD_ADDR_VAR 0 6
12588: PUSH
12589: LD_STRING 
12591: ST_TO_ADDR
// active :=  ;
12592: LD_ADDR_VAR 0 7
12596: PUSH
12597: LD_STRING 
12599: ST_TO_ADDR
// for i = 1 to normalCounter do
12600: LD_ADDR_VAR 0 8
12604: PUSH
12605: DOUBLE
12606: LD_INT 1
12608: DEC
12609: ST_TO_ADDR
12610: LD_EXP 26
12614: PUSH
12615: FOR_TO
12616: IFFALSE 12717
// begin tmp := 0 ;
12618: LD_ADDR_VAR 0 3
12622: PUSH
12623: LD_STRING 0
12625: ST_TO_ADDR
// if result [ 1 ] then
12626: LD_VAR 0 2
12630: PUSH
12631: LD_INT 1
12633: ARRAY
12634: IFFALSE 12699
// if result [ 1 ] [ 1 ] = i then
12636: LD_VAR 0 2
12640: PUSH
12641: LD_INT 1
12643: ARRAY
12644: PUSH
12645: LD_INT 1
12647: ARRAY
12648: PUSH
12649: LD_VAR 0 8
12653: EQUAL
12654: IFFALSE 12699
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12656: LD_ADDR_VAR 0 2
12660: PUSH
12661: LD_VAR 0 2
12665: PPUSH
12666: LD_INT 1
12668: PPUSH
12669: LD_VAR 0 2
12673: PUSH
12674: LD_INT 1
12676: ARRAY
12677: PPUSH
12678: LD_INT 1
12680: PPUSH
12681: CALL_OW 3
12685: PPUSH
12686: CALL_OW 1
12690: ST_TO_ADDR
// tmp := 1 ;
12691: LD_ADDR_VAR 0 3
12695: PUSH
12696: LD_STRING 1
12698: ST_TO_ADDR
// end ; normal := normal & tmp ;
12699: LD_ADDR_VAR 0 5
12703: PUSH
12704: LD_VAR 0 5
12708: PUSH
12709: LD_VAR 0 3
12713: STR
12714: ST_TO_ADDR
// end ;
12715: GO 12615
12717: POP
12718: POP
// for i = 1 to hardcoreCounter do
12719: LD_ADDR_VAR 0 8
12723: PUSH
12724: DOUBLE
12725: LD_INT 1
12727: DEC
12728: ST_TO_ADDR
12729: LD_EXP 27
12733: PUSH
12734: FOR_TO
12735: IFFALSE 12840
// begin tmp := 0 ;
12737: LD_ADDR_VAR 0 3
12741: PUSH
12742: LD_STRING 0
12744: ST_TO_ADDR
// if result [ 2 ] then
12745: LD_VAR 0 2
12749: PUSH
12750: LD_INT 2
12752: ARRAY
12753: IFFALSE 12822
// if result [ 2 ] [ 1 ] = 100 + i then
12755: LD_VAR 0 2
12759: PUSH
12760: LD_INT 2
12762: ARRAY
12763: PUSH
12764: LD_INT 1
12766: ARRAY
12767: PUSH
12768: LD_INT 100
12770: PUSH
12771: LD_VAR 0 8
12775: PLUS
12776: EQUAL
12777: IFFALSE 12822
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12779: LD_ADDR_VAR 0 2
12783: PUSH
12784: LD_VAR 0 2
12788: PPUSH
12789: LD_INT 2
12791: PPUSH
12792: LD_VAR 0 2
12796: PUSH
12797: LD_INT 2
12799: ARRAY
12800: PPUSH
12801: LD_INT 1
12803: PPUSH
12804: CALL_OW 3
12808: PPUSH
12809: CALL_OW 1
12813: ST_TO_ADDR
// tmp := 1 ;
12814: LD_ADDR_VAR 0 3
12818: PUSH
12819: LD_STRING 1
12821: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12822: LD_ADDR_VAR 0 6
12826: PUSH
12827: LD_VAR 0 6
12831: PUSH
12832: LD_VAR 0 3
12836: STR
12837: ST_TO_ADDR
// end ;
12838: GO 12734
12840: POP
12841: POP
// if isGameLoad then
12842: LD_VAR 0 1
12846: IFFALSE 13321
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12848: LD_ADDR_VAR 0 4
12852: PUSH
12853: LD_EXP 30
12857: PUSH
12858: LD_EXP 29
12862: PUSH
12863: LD_EXP 31
12867: PUSH
12868: LD_EXP 28
12872: PUSH
12873: LD_EXP 32
12877: PUSH
12878: LD_EXP 33
12882: PUSH
12883: LD_EXP 34
12887: PUSH
12888: LD_EXP 35
12892: PUSH
12893: LD_EXP 36
12897: PUSH
12898: LD_EXP 37
12902: PUSH
12903: LD_EXP 38
12907: PUSH
12908: LD_EXP 39
12912: PUSH
12913: LD_EXP 40
12917: PUSH
12918: LD_EXP 41
12922: PUSH
12923: LD_EXP 49
12927: PUSH
12928: LD_EXP 50
12932: PUSH
12933: LD_EXP 51
12937: PUSH
12938: LD_EXP 52
12942: PUSH
12943: LD_EXP 54
12947: PUSH
12948: LD_EXP 55
12952: PUSH
12953: LD_EXP 56
12957: PUSH
12958: LD_EXP 59
12962: PUSH
12963: LD_EXP 61
12967: PUSH
12968: LD_EXP 62
12972: PUSH
12973: LD_EXP 63
12977: PUSH
12978: LD_EXP 65
12982: PUSH
12983: LD_EXP 66
12987: PUSH
12988: LD_EXP 69
12992: PUSH
12993: LD_EXP 70
12997: PUSH
12998: LD_EXP 71
13002: PUSH
13003: LD_EXP 72
13007: PUSH
13008: LD_EXP 73
13012: PUSH
13013: LD_EXP 74
13017: PUSH
13018: LD_EXP 75
13022: PUSH
13023: LD_EXP 76
13027: PUSH
13028: LD_EXP 77
13032: PUSH
13033: LD_EXP 42
13037: PUSH
13038: LD_EXP 43
13042: PUSH
13043: LD_EXP 46
13047: PUSH
13048: LD_EXP 47
13052: PUSH
13053: LD_EXP 48
13057: PUSH
13058: LD_EXP 44
13062: PUSH
13063: LD_EXP 45
13067: PUSH
13068: LD_EXP 53
13072: PUSH
13073: LD_EXP 57
13077: PUSH
13078: LD_EXP 58
13082: PUSH
13083: LD_EXP 60
13087: PUSH
13088: LD_EXP 64
13092: PUSH
13093: LD_EXP 67
13097: PUSH
13098: LD_EXP 68
13102: PUSH
13103: LD_EXP 78
13107: PUSH
13108: LD_EXP 79
13112: PUSH
13113: LD_EXP 80
13117: PUSH
13118: LD_EXP 81
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: ST_TO_ADDR
// tmp :=  ;
13179: LD_ADDR_VAR 0 3
13183: PUSH
13184: LD_STRING 
13186: ST_TO_ADDR
// for i = 1 to normalCounter do
13187: LD_ADDR_VAR 0 8
13191: PUSH
13192: DOUBLE
13193: LD_INT 1
13195: DEC
13196: ST_TO_ADDR
13197: LD_EXP 26
13201: PUSH
13202: FOR_TO
13203: IFFALSE 13239
// begin if flags [ i ] then
13205: LD_VAR 0 4
13209: PUSH
13210: LD_VAR 0 8
13214: ARRAY
13215: IFFALSE 13237
// tmp := tmp & i & ; ;
13217: LD_ADDR_VAR 0 3
13221: PUSH
13222: LD_VAR 0 3
13226: PUSH
13227: LD_VAR 0 8
13231: STR
13232: PUSH
13233: LD_STRING ;
13235: STR
13236: ST_TO_ADDR
// end ;
13237: GO 13202
13239: POP
13240: POP
// for i = 1 to hardcoreCounter do
13241: LD_ADDR_VAR 0 8
13245: PUSH
13246: DOUBLE
13247: LD_INT 1
13249: DEC
13250: ST_TO_ADDR
13251: LD_EXP 27
13255: PUSH
13256: FOR_TO
13257: IFFALSE 13303
// begin if flags [ normalCounter + i ] then
13259: LD_VAR 0 4
13263: PUSH
13264: LD_EXP 26
13268: PUSH
13269: LD_VAR 0 8
13273: PLUS
13274: ARRAY
13275: IFFALSE 13301
// tmp := tmp & ( 100 + i ) & ; ;
13277: LD_ADDR_VAR 0 3
13281: PUSH
13282: LD_VAR 0 3
13286: PUSH
13287: LD_INT 100
13289: PUSH
13290: LD_VAR 0 8
13294: PLUS
13295: STR
13296: PUSH
13297: LD_STRING ;
13299: STR
13300: ST_TO_ADDR
// end ;
13301: GO 13256
13303: POP
13304: POP
// if tmp then
13305: LD_VAR 0 3
13309: IFFALSE 13321
// active := tmp ;
13311: LD_ADDR_VAR 0 7
13315: PUSH
13316: LD_VAR 0 3
13320: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13321: LD_STRING getStreamItemsFromMission("
13323: PUSH
13324: LD_VAR 0 5
13328: STR
13329: PUSH
13330: LD_STRING ","
13332: STR
13333: PUSH
13334: LD_VAR 0 6
13338: STR
13339: PUSH
13340: LD_STRING ","
13342: STR
13343: PUSH
13344: LD_VAR 0 7
13348: STR
13349: PUSH
13350: LD_STRING ")
13352: STR
13353: PPUSH
13354: CALL_OW 559
// end else
13358: GO 13367
// ToLua ( getStreamItemsFromMission("","","") ) ;
13360: LD_STRING getStreamItemsFromMission("","","")
13362: PPUSH
13363: CALL_OW 559
// end ;
13367: LD_VAR 0 2
13371: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13372: LD_EXP 25
13376: PUSH
13377: LD_EXP 30
13381: AND
13382: IFFALSE 13506
13384: GO 13386
13386: DISABLE
13387: LD_INT 0
13389: PPUSH
13390: PPUSH
// begin enable ;
13391: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13392: LD_ADDR_VAR 0 2
13396: PUSH
13397: LD_INT 22
13399: PUSH
13400: LD_OWVAR 2
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 2
13411: PUSH
13412: LD_INT 34
13414: PUSH
13415: LD_INT 7
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 34
13424: PUSH
13425: LD_INT 45
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 34
13434: PUSH
13435: LD_INT 28
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: LD_INT 34
13444: PUSH
13445: LD_INT 47
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PPUSH
13463: CALL_OW 69
13467: ST_TO_ADDR
// if not tmp then
13468: LD_VAR 0 2
13472: NOT
13473: IFFALSE 13477
// exit ;
13475: GO 13506
// for i in tmp do
13477: LD_ADDR_VAR 0 1
13481: PUSH
13482: LD_VAR 0 2
13486: PUSH
13487: FOR_IN
13488: IFFALSE 13504
// begin SetLives ( i , 0 ) ;
13490: LD_VAR 0 1
13494: PPUSH
13495: LD_INT 0
13497: PPUSH
13498: CALL_OW 234
// end ;
13502: GO 13487
13504: POP
13505: POP
// end ;
13506: PPOPN 2
13508: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13509: LD_EXP 25
13513: PUSH
13514: LD_EXP 31
13518: AND
13519: IFFALSE 13603
13521: GO 13523
13523: DISABLE
13524: LD_INT 0
13526: PPUSH
13527: PPUSH
// begin enable ;
13528: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13529: LD_ADDR_VAR 0 2
13533: PUSH
13534: LD_INT 22
13536: PUSH
13537: LD_OWVAR 2
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 32
13548: PUSH
13549: LD_INT 3
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 69
13564: ST_TO_ADDR
// if not tmp then
13565: LD_VAR 0 2
13569: NOT
13570: IFFALSE 13574
// exit ;
13572: GO 13603
// for i in tmp do
13574: LD_ADDR_VAR 0 1
13578: PUSH
13579: LD_VAR 0 2
13583: PUSH
13584: FOR_IN
13585: IFFALSE 13601
// begin SetLives ( i , 0 ) ;
13587: LD_VAR 0 1
13591: PPUSH
13592: LD_INT 0
13594: PPUSH
13595: CALL_OW 234
// end ;
13599: GO 13584
13601: POP
13602: POP
// end ;
13603: PPOPN 2
13605: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13606: LD_EXP 25
13610: PUSH
13611: LD_EXP 28
13615: AND
13616: IFFALSE 13709
13618: GO 13620
13620: DISABLE
13621: LD_INT 0
13623: PPUSH
// begin enable ;
13624: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13625: LD_ADDR_VAR 0 1
13629: PUSH
13630: LD_INT 22
13632: PUSH
13633: LD_OWVAR 2
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: LD_INT 2
13644: PUSH
13645: LD_INT 25
13647: PUSH
13648: LD_INT 5
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 25
13657: PUSH
13658: LD_INT 9
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 25
13667: PUSH
13668: LD_INT 8
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: PUSH
13690: FOR_IN
13691: IFFALSE 13707
// begin SetClass ( i , 1 ) ;
13693: LD_VAR 0 1
13697: PPUSH
13698: LD_INT 1
13700: PPUSH
13701: CALL_OW 336
// end ;
13705: GO 13690
13707: POP
13708: POP
// end ;
13709: PPOPN 1
13711: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13712: LD_EXP 25
13716: PUSH
13717: LD_EXP 29
13721: AND
13722: PUSH
13723: LD_OWVAR 65
13727: PUSH
13728: LD_INT 7
13730: LESS
13731: AND
13732: IFFALSE 13746
13734: GO 13736
13736: DISABLE
// begin enable ;
13737: ENABLE
// game_speed := 7 ;
13738: LD_ADDR_OWVAR 65
13742: PUSH
13743: LD_INT 7
13745: ST_TO_ADDR
// end ;
13746: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13747: LD_EXP 25
13751: PUSH
13752: LD_EXP 32
13756: AND
13757: IFFALSE 13959
13759: GO 13761
13761: DISABLE
13762: LD_INT 0
13764: PPUSH
13765: PPUSH
13766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13767: LD_ADDR_VAR 0 3
13771: PUSH
13772: LD_INT 81
13774: PUSH
13775: LD_OWVAR 2
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 21
13786: PUSH
13787: LD_INT 1
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PPUSH
13798: CALL_OW 69
13802: ST_TO_ADDR
// if not tmp then
13803: LD_VAR 0 3
13807: NOT
13808: IFFALSE 13812
// exit ;
13810: GO 13959
// if tmp > 5 then
13812: LD_VAR 0 3
13816: PUSH
13817: LD_INT 5
13819: GREATER
13820: IFFALSE 13832
// k := 5 else
13822: LD_ADDR_VAR 0 2
13826: PUSH
13827: LD_INT 5
13829: ST_TO_ADDR
13830: GO 13842
// k := tmp ;
13832: LD_ADDR_VAR 0 2
13836: PUSH
13837: LD_VAR 0 3
13841: ST_TO_ADDR
// for i := 1 to k do
13842: LD_ADDR_VAR 0 1
13846: PUSH
13847: DOUBLE
13848: LD_INT 1
13850: DEC
13851: ST_TO_ADDR
13852: LD_VAR 0 2
13856: PUSH
13857: FOR_TO
13858: IFFALSE 13957
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13860: LD_VAR 0 3
13864: PUSH
13865: LD_VAR 0 1
13869: ARRAY
13870: PPUSH
13871: LD_VAR 0 1
13875: PUSH
13876: LD_INT 4
13878: MOD
13879: PUSH
13880: LD_INT 1
13882: PLUS
13883: PPUSH
13884: CALL_OW 259
13888: PUSH
13889: LD_INT 10
13891: LESS
13892: IFFALSE 13955
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13894: LD_VAR 0 3
13898: PUSH
13899: LD_VAR 0 1
13903: ARRAY
13904: PPUSH
13905: LD_VAR 0 1
13909: PUSH
13910: LD_INT 4
13912: MOD
13913: PUSH
13914: LD_INT 1
13916: PLUS
13917: PPUSH
13918: LD_VAR 0 3
13922: PUSH
13923: LD_VAR 0 1
13927: ARRAY
13928: PPUSH
13929: LD_VAR 0 1
13933: PUSH
13934: LD_INT 4
13936: MOD
13937: PUSH
13938: LD_INT 1
13940: PLUS
13941: PPUSH
13942: CALL_OW 259
13946: PUSH
13947: LD_INT 1
13949: PLUS
13950: PPUSH
13951: CALL_OW 237
13955: GO 13857
13957: POP
13958: POP
// end ;
13959: PPOPN 3
13961: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13962: LD_EXP 25
13966: PUSH
13967: LD_EXP 33
13971: AND
13972: IFFALSE 13992
13974: GO 13976
13976: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13977: LD_INT 4
13979: PPUSH
13980: LD_OWVAR 2
13984: PPUSH
13985: LD_INT 0
13987: PPUSH
13988: CALL_OW 324
13992: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13993: LD_EXP 25
13997: PUSH
13998: LD_EXP 62
14002: AND
14003: IFFALSE 14023
14005: GO 14007
14007: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14008: LD_INT 19
14010: PPUSH
14011: LD_OWVAR 2
14015: PPUSH
14016: LD_INT 0
14018: PPUSH
14019: CALL_OW 324
14023: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14024: LD_EXP 25
14028: PUSH
14029: LD_EXP 34
14033: AND
14034: IFFALSE 14136
14036: GO 14038
14038: DISABLE
14039: LD_INT 0
14041: PPUSH
14042: PPUSH
// begin enable ;
14043: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14044: LD_ADDR_VAR 0 2
14048: PUSH
14049: LD_INT 22
14051: PUSH
14052: LD_OWVAR 2
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 2
14063: PUSH
14064: LD_INT 34
14066: PUSH
14067: LD_INT 11
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 34
14076: PUSH
14077: LD_INT 30
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PPUSH
14093: CALL_OW 69
14097: ST_TO_ADDR
// if not tmp then
14098: LD_VAR 0 2
14102: NOT
14103: IFFALSE 14107
// exit ;
14105: GO 14136
// for i in tmp do
14107: LD_ADDR_VAR 0 1
14111: PUSH
14112: LD_VAR 0 2
14116: PUSH
14117: FOR_IN
14118: IFFALSE 14134
// begin SetLives ( i , 0 ) ;
14120: LD_VAR 0 1
14124: PPUSH
14125: LD_INT 0
14127: PPUSH
14128: CALL_OW 234
// end ;
14132: GO 14117
14134: POP
14135: POP
// end ;
14136: PPOPN 2
14138: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14139: LD_EXP 25
14143: PUSH
14144: LD_EXP 35
14148: AND
14149: IFFALSE 14169
14151: GO 14153
14153: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14154: LD_INT 32
14156: PPUSH
14157: LD_OWVAR 2
14161: PPUSH
14162: LD_INT 0
14164: PPUSH
14165: CALL_OW 324
14169: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14170: LD_EXP 25
14174: PUSH
14175: LD_EXP 36
14179: AND
14180: IFFALSE 14361
14182: GO 14184
14184: DISABLE
14185: LD_INT 0
14187: PPUSH
14188: PPUSH
14189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14190: LD_ADDR_VAR 0 2
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_OWVAR 2
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 33
14209: PUSH
14210: LD_INT 3
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PPUSH
14221: CALL_OW 69
14225: ST_TO_ADDR
// if not tmp then
14226: LD_VAR 0 2
14230: NOT
14231: IFFALSE 14235
// exit ;
14233: GO 14361
// side := 0 ;
14235: LD_ADDR_VAR 0 3
14239: PUSH
14240: LD_INT 0
14242: ST_TO_ADDR
// for i := 1 to 8 do
14243: LD_ADDR_VAR 0 1
14247: PUSH
14248: DOUBLE
14249: LD_INT 1
14251: DEC
14252: ST_TO_ADDR
14253: LD_INT 8
14255: PUSH
14256: FOR_TO
14257: IFFALSE 14305
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14259: LD_OWVAR 2
14263: PUSH
14264: LD_VAR 0 1
14268: NONEQUAL
14269: PUSH
14270: LD_OWVAR 2
14274: PPUSH
14275: LD_VAR 0 1
14279: PPUSH
14280: CALL_OW 81
14284: PUSH
14285: LD_INT 2
14287: EQUAL
14288: AND
14289: IFFALSE 14303
// begin side := i ;
14291: LD_ADDR_VAR 0 3
14295: PUSH
14296: LD_VAR 0 1
14300: ST_TO_ADDR
// break ;
14301: GO 14305
// end ;
14303: GO 14256
14305: POP
14306: POP
// if not side then
14307: LD_VAR 0 3
14311: NOT
14312: IFFALSE 14316
// exit ;
14314: GO 14361
// for i := 1 to tmp do
14316: LD_ADDR_VAR 0 1
14320: PUSH
14321: DOUBLE
14322: LD_INT 1
14324: DEC
14325: ST_TO_ADDR
14326: LD_VAR 0 2
14330: PUSH
14331: FOR_TO
14332: IFFALSE 14359
// if Prob ( 60 ) then
14334: LD_INT 60
14336: PPUSH
14337: CALL_OW 13
14341: IFFALSE 14357
// SetSide ( i , side ) ;
14343: LD_VAR 0 1
14347: PPUSH
14348: LD_VAR 0 3
14352: PPUSH
14353: CALL_OW 235
14357: GO 14331
14359: POP
14360: POP
// end ;
14361: PPOPN 3
14363: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14364: LD_EXP 25
14368: PUSH
14369: LD_EXP 38
14373: AND
14374: IFFALSE 14493
14376: GO 14378
14378: DISABLE
14379: LD_INT 0
14381: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14382: LD_ADDR_VAR 0 1
14386: PUSH
14387: LD_INT 22
14389: PUSH
14390: LD_OWVAR 2
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 21
14401: PUSH
14402: LD_INT 1
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 3
14411: PUSH
14412: LD_INT 23
14414: PUSH
14415: LD_INT 0
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: PPUSH
14431: CALL_OW 69
14435: PUSH
14436: FOR_IN
14437: IFFALSE 14491
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14439: LD_VAR 0 1
14443: PPUSH
14444: CALL_OW 257
14448: PUSH
14449: LD_INT 1
14451: PUSH
14452: LD_INT 2
14454: PUSH
14455: LD_INT 3
14457: PUSH
14458: LD_INT 4
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: IN
14467: IFFALSE 14489
// SetClass ( un , rand ( 1 , 4 ) ) ;
14469: LD_VAR 0 1
14473: PPUSH
14474: LD_INT 1
14476: PPUSH
14477: LD_INT 4
14479: PPUSH
14480: CALL_OW 12
14484: PPUSH
14485: CALL_OW 336
14489: GO 14436
14491: POP
14492: POP
// end ;
14493: PPOPN 1
14495: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14496: LD_EXP 25
14500: PUSH
14501: LD_EXP 37
14505: AND
14506: IFFALSE 14585
14508: GO 14510
14510: DISABLE
14511: LD_INT 0
14513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14514: LD_ADDR_VAR 0 1
14518: PUSH
14519: LD_INT 22
14521: PUSH
14522: LD_OWVAR 2
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 21
14533: PUSH
14534: LD_INT 3
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PPUSH
14545: CALL_OW 69
14549: ST_TO_ADDR
// if not tmp then
14550: LD_VAR 0 1
14554: NOT
14555: IFFALSE 14559
// exit ;
14557: GO 14585
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14559: LD_VAR 0 1
14563: PUSH
14564: LD_INT 1
14566: PPUSH
14567: LD_VAR 0 1
14571: PPUSH
14572: CALL_OW 12
14576: ARRAY
14577: PPUSH
14578: LD_INT 100
14580: PPUSH
14581: CALL_OW 234
// end ;
14585: PPOPN 1
14587: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14588: LD_EXP 25
14592: PUSH
14593: LD_EXP 39
14597: AND
14598: IFFALSE 14696
14600: GO 14602
14602: DISABLE
14603: LD_INT 0
14605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14606: LD_ADDR_VAR 0 1
14610: PUSH
14611: LD_INT 22
14613: PUSH
14614: LD_OWVAR 2
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 21
14625: PUSH
14626: LD_INT 1
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PPUSH
14637: CALL_OW 69
14641: ST_TO_ADDR
// if not tmp then
14642: LD_VAR 0 1
14646: NOT
14647: IFFALSE 14651
// exit ;
14649: GO 14696
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14651: LD_VAR 0 1
14655: PUSH
14656: LD_INT 1
14658: PPUSH
14659: LD_VAR 0 1
14663: PPUSH
14664: CALL_OW 12
14668: ARRAY
14669: PPUSH
14670: LD_INT 1
14672: PPUSH
14673: LD_INT 4
14675: PPUSH
14676: CALL_OW 12
14680: PPUSH
14681: LD_INT 3000
14683: PPUSH
14684: LD_INT 9000
14686: PPUSH
14687: CALL_OW 12
14691: PPUSH
14692: CALL_OW 492
// end ;
14696: PPOPN 1
14698: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14699: LD_EXP 25
14703: PUSH
14704: LD_EXP 40
14708: AND
14709: IFFALSE 14729
14711: GO 14713
14713: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14714: LD_INT 1
14716: PPUSH
14717: LD_OWVAR 2
14721: PPUSH
14722: LD_INT 0
14724: PPUSH
14725: CALL_OW 324
14729: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14730: LD_EXP 25
14734: PUSH
14735: LD_EXP 41
14739: AND
14740: IFFALSE 14823
14742: GO 14744
14744: DISABLE
14745: LD_INT 0
14747: PPUSH
14748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14749: LD_ADDR_VAR 0 2
14753: PUSH
14754: LD_INT 22
14756: PUSH
14757: LD_OWVAR 2
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 21
14768: PUSH
14769: LD_INT 3
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PPUSH
14780: CALL_OW 69
14784: ST_TO_ADDR
// if not tmp then
14785: LD_VAR 0 2
14789: NOT
14790: IFFALSE 14794
// exit ;
14792: GO 14823
// for i in tmp do
14794: LD_ADDR_VAR 0 1
14798: PUSH
14799: LD_VAR 0 2
14803: PUSH
14804: FOR_IN
14805: IFFALSE 14821
// SetBLevel ( i , 10 ) ;
14807: LD_VAR 0 1
14811: PPUSH
14812: LD_INT 10
14814: PPUSH
14815: CALL_OW 241
14819: GO 14804
14821: POP
14822: POP
// end ;
14823: PPOPN 2
14825: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14826: LD_EXP 25
14830: PUSH
14831: LD_EXP 42
14835: AND
14836: IFFALSE 14947
14838: GO 14840
14840: DISABLE
14841: LD_INT 0
14843: PPUSH
14844: PPUSH
14845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14846: LD_ADDR_VAR 0 3
14850: PUSH
14851: LD_INT 22
14853: PUSH
14854: LD_OWVAR 2
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 25
14865: PUSH
14866: LD_INT 1
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PPUSH
14877: CALL_OW 69
14881: ST_TO_ADDR
// if not tmp then
14882: LD_VAR 0 3
14886: NOT
14887: IFFALSE 14891
// exit ;
14889: GO 14947
// un := tmp [ rand ( 1 , tmp ) ] ;
14891: LD_ADDR_VAR 0 2
14895: PUSH
14896: LD_VAR 0 3
14900: PUSH
14901: LD_INT 1
14903: PPUSH
14904: LD_VAR 0 3
14908: PPUSH
14909: CALL_OW 12
14913: ARRAY
14914: ST_TO_ADDR
// if Crawls ( un ) then
14915: LD_VAR 0 2
14919: PPUSH
14920: CALL_OW 318
14924: IFFALSE 14935
// ComWalk ( un ) ;
14926: LD_VAR 0 2
14930: PPUSH
14931: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14935: LD_VAR 0 2
14939: PPUSH
14940: LD_INT 5
14942: PPUSH
14943: CALL_OW 336
// end ;
14947: PPOPN 3
14949: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14950: LD_EXP 25
14954: PUSH
14955: LD_EXP 43
14959: AND
14960: PUSH
14961: LD_OWVAR 67
14965: PUSH
14966: LD_INT 4
14968: LESS
14969: AND
14970: IFFALSE 14989
14972: GO 14974
14974: DISABLE
// begin Difficulty := Difficulty + 1 ;
14975: LD_ADDR_OWVAR 67
14979: PUSH
14980: LD_OWVAR 67
14984: PUSH
14985: LD_INT 1
14987: PLUS
14988: ST_TO_ADDR
// end ;
14989: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14990: LD_EXP 25
14994: PUSH
14995: LD_EXP 44
14999: AND
15000: IFFALSE 15103
15002: GO 15004
15004: DISABLE
15005: LD_INT 0
15007: PPUSH
// begin for i := 1 to 5 do
15008: LD_ADDR_VAR 0 1
15012: PUSH
15013: DOUBLE
15014: LD_INT 1
15016: DEC
15017: ST_TO_ADDR
15018: LD_INT 5
15020: PUSH
15021: FOR_TO
15022: IFFALSE 15101
// begin uc_nation := nation_nature ;
15024: LD_ADDR_OWVAR 21
15028: PUSH
15029: LD_INT 0
15031: ST_TO_ADDR
// uc_side := 0 ;
15032: LD_ADDR_OWVAR 20
15036: PUSH
15037: LD_INT 0
15039: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15040: LD_ADDR_OWVAR 29
15044: PUSH
15045: LD_INT 12
15047: PUSH
15048: LD_INT 12
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: ST_TO_ADDR
// hc_agressivity := 20 ;
15055: LD_ADDR_OWVAR 35
15059: PUSH
15060: LD_INT 20
15062: ST_TO_ADDR
// hc_class := class_tiger ;
15063: LD_ADDR_OWVAR 28
15067: PUSH
15068: LD_INT 14
15070: ST_TO_ADDR
// hc_gallery :=  ;
15071: LD_ADDR_OWVAR 33
15075: PUSH
15076: LD_STRING 
15078: ST_TO_ADDR
// hc_name :=  ;
15079: LD_ADDR_OWVAR 26
15083: PUSH
15084: LD_STRING 
15086: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15087: CALL_OW 44
15091: PPUSH
15092: LD_INT 0
15094: PPUSH
15095: CALL_OW 51
// end ;
15099: GO 15021
15101: POP
15102: POP
// end ;
15103: PPOPN 1
15105: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15106: LD_EXP 25
15110: PUSH
15111: LD_EXP 45
15115: AND
15116: IFFALSE 15125
15118: GO 15120
15120: DISABLE
// StreamSibBomb ;
15121: CALL 15126 0 0
15125: END
// export function StreamSibBomb ; var i , x , y ; begin
15126: LD_INT 0
15128: PPUSH
15129: PPUSH
15130: PPUSH
15131: PPUSH
// result := false ;
15132: LD_ADDR_VAR 0 1
15136: PUSH
15137: LD_INT 0
15139: ST_TO_ADDR
// for i := 1 to 16 do
15140: LD_ADDR_VAR 0 2
15144: PUSH
15145: DOUBLE
15146: LD_INT 1
15148: DEC
15149: ST_TO_ADDR
15150: LD_INT 16
15152: PUSH
15153: FOR_TO
15154: IFFALSE 15353
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15156: LD_ADDR_VAR 0 3
15160: PUSH
15161: LD_INT 10
15163: PUSH
15164: LD_INT 20
15166: PUSH
15167: LD_INT 30
15169: PUSH
15170: LD_INT 40
15172: PUSH
15173: LD_INT 50
15175: PUSH
15176: LD_INT 60
15178: PUSH
15179: LD_INT 70
15181: PUSH
15182: LD_INT 80
15184: PUSH
15185: LD_INT 90
15187: PUSH
15188: LD_INT 100
15190: PUSH
15191: LD_INT 110
15193: PUSH
15194: LD_INT 120
15196: PUSH
15197: LD_INT 130
15199: PUSH
15200: LD_INT 140
15202: PUSH
15203: LD_INT 150
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: PUSH
15223: LD_INT 1
15225: PPUSH
15226: LD_INT 15
15228: PPUSH
15229: CALL_OW 12
15233: ARRAY
15234: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15235: LD_ADDR_VAR 0 4
15239: PUSH
15240: LD_INT 10
15242: PUSH
15243: LD_INT 20
15245: PUSH
15246: LD_INT 30
15248: PUSH
15249: LD_INT 40
15251: PUSH
15252: LD_INT 50
15254: PUSH
15255: LD_INT 60
15257: PUSH
15258: LD_INT 70
15260: PUSH
15261: LD_INT 80
15263: PUSH
15264: LD_INT 90
15266: PUSH
15267: LD_INT 100
15269: PUSH
15270: LD_INT 110
15272: PUSH
15273: LD_INT 120
15275: PUSH
15276: LD_INT 130
15278: PUSH
15279: LD_INT 140
15281: PUSH
15282: LD_INT 150
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: PUSH
15302: LD_INT 1
15304: PPUSH
15305: LD_INT 15
15307: PPUSH
15308: CALL_OW 12
15312: ARRAY
15313: ST_TO_ADDR
// if ValidHex ( x , y ) then
15314: LD_VAR 0 3
15318: PPUSH
15319: LD_VAR 0 4
15323: PPUSH
15324: CALL_OW 488
15328: IFFALSE 15351
// begin result := [ x , y ] ;
15330: LD_ADDR_VAR 0 1
15334: PUSH
15335: LD_VAR 0 3
15339: PUSH
15340: LD_VAR 0 4
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: ST_TO_ADDR
// break ;
15349: GO 15353
// end ; end ;
15351: GO 15153
15353: POP
15354: POP
// if result then
15355: LD_VAR 0 1
15359: IFFALSE 15419
// begin ToLua ( playSibBomb() ) ;
15361: LD_STRING playSibBomb()
15363: PPUSH
15364: CALL_OW 559
// wait ( 0 0$14 ) ;
15368: LD_INT 490
15370: PPUSH
15371: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15375: LD_VAR 0 1
15379: PUSH
15380: LD_INT 1
15382: ARRAY
15383: PPUSH
15384: LD_VAR 0 1
15388: PUSH
15389: LD_INT 2
15391: ARRAY
15392: PPUSH
15393: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15397: LD_VAR 0 1
15401: PUSH
15402: LD_INT 1
15404: ARRAY
15405: PPUSH
15406: LD_VAR 0 1
15410: PUSH
15411: LD_INT 2
15413: ARRAY
15414: PPUSH
15415: CALL_OW 429
// end ; end ;
15419: LD_VAR 0 1
15423: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15424: LD_EXP 25
15428: PUSH
15429: LD_EXP 47
15433: AND
15434: IFFALSE 15446
15436: GO 15438
15438: DISABLE
// YouLost (  ) ;
15439: LD_STRING 
15441: PPUSH
15442: CALL_OW 104
15446: END
// every 0 0$1 trigger StreamModeActive and sFog do
15447: LD_EXP 25
15451: PUSH
15452: LD_EXP 46
15456: AND
15457: IFFALSE 15471
15459: GO 15461
15461: DISABLE
// FogOff ( your_side ) ;
15462: LD_OWVAR 2
15466: PPUSH
15467: CALL_OW 344
15471: END
// every 0 0$1 trigger StreamModeActive and sSun do
15472: LD_EXP 25
15476: PUSH
15477: LD_EXP 48
15481: AND
15482: IFFALSE 15510
15484: GO 15486
15486: DISABLE
// begin solar_recharge_percent := 0 ;
15487: LD_ADDR_OWVAR 79
15491: PUSH
15492: LD_INT 0
15494: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15495: LD_INT 10500
15497: PPUSH
15498: CALL_OW 67
// solar_recharge_percent := 100 ;
15502: LD_ADDR_OWVAR 79
15506: PUSH
15507: LD_INT 100
15509: ST_TO_ADDR
// end ;
15510: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15511: LD_EXP 25
15515: PUSH
15516: LD_EXP 49
15520: AND
15521: IFFALSE 15760
15523: GO 15525
15525: DISABLE
15526: LD_INT 0
15528: PPUSH
15529: PPUSH
15530: PPUSH
// begin tmp := [ ] ;
15531: LD_ADDR_VAR 0 3
15535: PUSH
15536: EMPTY
15537: ST_TO_ADDR
// for i := 1 to 6 do
15538: LD_ADDR_VAR 0 1
15542: PUSH
15543: DOUBLE
15544: LD_INT 1
15546: DEC
15547: ST_TO_ADDR
15548: LD_INT 6
15550: PUSH
15551: FOR_TO
15552: IFFALSE 15657
// begin uc_nation := nation_nature ;
15554: LD_ADDR_OWVAR 21
15558: PUSH
15559: LD_INT 0
15561: ST_TO_ADDR
// uc_side := 0 ;
15562: LD_ADDR_OWVAR 20
15566: PUSH
15567: LD_INT 0
15569: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15570: LD_ADDR_OWVAR 29
15574: PUSH
15575: LD_INT 12
15577: PUSH
15578: LD_INT 12
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: ST_TO_ADDR
// hc_agressivity := 20 ;
15585: LD_ADDR_OWVAR 35
15589: PUSH
15590: LD_INT 20
15592: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15593: LD_ADDR_OWVAR 28
15597: PUSH
15598: LD_INT 17
15600: ST_TO_ADDR
// hc_gallery :=  ;
15601: LD_ADDR_OWVAR 33
15605: PUSH
15606: LD_STRING 
15608: ST_TO_ADDR
// hc_name :=  ;
15609: LD_ADDR_OWVAR 26
15613: PUSH
15614: LD_STRING 
15616: ST_TO_ADDR
// un := CreateHuman ;
15617: LD_ADDR_VAR 0 2
15621: PUSH
15622: CALL_OW 44
15626: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15627: LD_VAR 0 2
15631: PPUSH
15632: LD_INT 1
15634: PPUSH
15635: CALL_OW 51
// tmp := tmp ^ un ;
15639: LD_ADDR_VAR 0 3
15643: PUSH
15644: LD_VAR 0 3
15648: PUSH
15649: LD_VAR 0 2
15653: ADD
15654: ST_TO_ADDR
// end ;
15655: GO 15551
15657: POP
15658: POP
// repeat wait ( 0 0$1 ) ;
15659: LD_INT 35
15661: PPUSH
15662: CALL_OW 67
// for un in tmp do
15666: LD_ADDR_VAR 0 2
15670: PUSH
15671: LD_VAR 0 3
15675: PUSH
15676: FOR_IN
15677: IFFALSE 15751
// begin if IsDead ( un ) then
15679: LD_VAR 0 2
15683: PPUSH
15684: CALL_OW 301
15688: IFFALSE 15708
// begin tmp := tmp diff un ;
15690: LD_ADDR_VAR 0 3
15694: PUSH
15695: LD_VAR 0 3
15699: PUSH
15700: LD_VAR 0 2
15704: DIFF
15705: ST_TO_ADDR
// continue ;
15706: GO 15676
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15708: LD_VAR 0 2
15712: PPUSH
15713: LD_INT 3
15715: PUSH
15716: LD_INT 22
15718: PUSH
15719: LD_INT 0
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PPUSH
15730: CALL_OW 69
15734: PPUSH
15735: LD_VAR 0 2
15739: PPUSH
15740: CALL_OW 74
15744: PPUSH
15745: CALL_OW 115
// end ;
15749: GO 15676
15751: POP
15752: POP
// until not tmp ;
15753: LD_VAR 0 3
15757: NOT
15758: IFFALSE 15659
// end ;
15760: PPOPN 3
15762: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15763: LD_EXP 25
15767: PUSH
15768: LD_EXP 50
15772: AND
15773: IFFALSE 15827
15775: GO 15777
15777: DISABLE
// begin ToLua ( displayTroll(); ) ;
15778: LD_STRING displayTroll();
15780: PPUSH
15781: CALL_OW 559
// wait ( 3 3$00 ) ;
15785: LD_INT 6300
15787: PPUSH
15788: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15792: LD_STRING hideTroll();
15794: PPUSH
15795: CALL_OW 559
// wait ( 1 1$00 ) ;
15799: LD_INT 2100
15801: PPUSH
15802: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15806: LD_STRING displayTroll();
15808: PPUSH
15809: CALL_OW 559
// wait ( 1 1$00 ) ;
15813: LD_INT 2100
15815: PPUSH
15816: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15820: LD_STRING hideTroll();
15822: PPUSH
15823: CALL_OW 559
// end ;
15827: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15828: LD_EXP 25
15832: PUSH
15833: LD_EXP 51
15837: AND
15838: IFFALSE 15901
15840: GO 15842
15842: DISABLE
15843: LD_INT 0
15845: PPUSH
// begin p := 0 ;
15846: LD_ADDR_VAR 0 1
15850: PUSH
15851: LD_INT 0
15853: ST_TO_ADDR
// repeat game_speed := 1 ;
15854: LD_ADDR_OWVAR 65
15858: PUSH
15859: LD_INT 1
15861: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15862: LD_INT 35
15864: PPUSH
15865: CALL_OW 67
// p := p + 1 ;
15869: LD_ADDR_VAR 0 1
15873: PUSH
15874: LD_VAR 0 1
15878: PUSH
15879: LD_INT 1
15881: PLUS
15882: ST_TO_ADDR
// until p >= 60 ;
15883: LD_VAR 0 1
15887: PUSH
15888: LD_INT 60
15890: GREATEREQUAL
15891: IFFALSE 15854
// game_speed := 4 ;
15893: LD_ADDR_OWVAR 65
15897: PUSH
15898: LD_INT 4
15900: ST_TO_ADDR
// end ;
15901: PPOPN 1
15903: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15904: LD_EXP 25
15908: PUSH
15909: LD_EXP 52
15913: AND
15914: IFFALSE 16060
15916: GO 15918
15918: DISABLE
15919: LD_INT 0
15921: PPUSH
15922: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15923: LD_ADDR_VAR 0 1
15927: PUSH
15928: LD_INT 22
15930: PUSH
15931: LD_OWVAR 2
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 2
15942: PUSH
15943: LD_INT 30
15945: PUSH
15946: LD_INT 0
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 30
15955: PUSH
15956: LD_INT 1
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PPUSH
15972: CALL_OW 69
15976: ST_TO_ADDR
// if not depot then
15977: LD_VAR 0 1
15981: NOT
15982: IFFALSE 15986
// exit ;
15984: GO 16060
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15986: LD_ADDR_VAR 0 2
15990: PUSH
15991: LD_VAR 0 1
15995: PUSH
15996: LD_INT 1
15998: PPUSH
15999: LD_VAR 0 1
16003: PPUSH
16004: CALL_OW 12
16008: ARRAY
16009: PPUSH
16010: CALL_OW 274
16014: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16015: LD_VAR 0 2
16019: PPUSH
16020: LD_INT 1
16022: PPUSH
16023: LD_INT 0
16025: PPUSH
16026: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16030: LD_VAR 0 2
16034: PPUSH
16035: LD_INT 2
16037: PPUSH
16038: LD_INT 0
16040: PPUSH
16041: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16045: LD_VAR 0 2
16049: PPUSH
16050: LD_INT 3
16052: PPUSH
16053: LD_INT 0
16055: PPUSH
16056: CALL_OW 277
// end ;
16060: PPOPN 2
16062: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16063: LD_EXP 25
16067: PUSH
16068: LD_EXP 53
16072: AND
16073: IFFALSE 16170
16075: GO 16077
16077: DISABLE
16078: LD_INT 0
16080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16081: LD_ADDR_VAR 0 1
16085: PUSH
16086: LD_INT 22
16088: PUSH
16089: LD_OWVAR 2
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 21
16100: PUSH
16101: LD_INT 1
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 3
16110: PUSH
16111: LD_INT 23
16113: PUSH
16114: LD_INT 0
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: LIST
16129: PPUSH
16130: CALL_OW 69
16134: ST_TO_ADDR
// if not tmp then
16135: LD_VAR 0 1
16139: NOT
16140: IFFALSE 16144
// exit ;
16142: GO 16170
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16144: LD_VAR 0 1
16148: PUSH
16149: LD_INT 1
16151: PPUSH
16152: LD_VAR 0 1
16156: PPUSH
16157: CALL_OW 12
16161: ARRAY
16162: PPUSH
16163: LD_INT 200
16165: PPUSH
16166: CALL_OW 234
// end ;
16170: PPOPN 1
16172: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16173: LD_EXP 25
16177: PUSH
16178: LD_EXP 54
16182: AND
16183: IFFALSE 16262
16185: GO 16187
16187: DISABLE
16188: LD_INT 0
16190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16191: LD_ADDR_VAR 0 1
16195: PUSH
16196: LD_INT 22
16198: PUSH
16199: LD_OWVAR 2
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 21
16210: PUSH
16211: LD_INT 2
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PPUSH
16222: CALL_OW 69
16226: ST_TO_ADDR
// if not tmp then
16227: LD_VAR 0 1
16231: NOT
16232: IFFALSE 16236
// exit ;
16234: GO 16262
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16236: LD_VAR 0 1
16240: PUSH
16241: LD_INT 1
16243: PPUSH
16244: LD_VAR 0 1
16248: PPUSH
16249: CALL_OW 12
16253: ARRAY
16254: PPUSH
16255: LD_INT 60
16257: PPUSH
16258: CALL_OW 234
// end ;
16262: PPOPN 1
16264: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16265: LD_EXP 25
16269: PUSH
16270: LD_EXP 55
16274: AND
16275: IFFALSE 16374
16277: GO 16279
16279: DISABLE
16280: LD_INT 0
16282: PPUSH
16283: PPUSH
// begin enable ;
16284: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16285: LD_ADDR_VAR 0 1
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: LD_OWVAR 2
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 61
16304: PUSH
16305: EMPTY
16306: LIST
16307: PUSH
16308: LD_INT 33
16310: PUSH
16311: LD_INT 2
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: LIST
16322: PPUSH
16323: CALL_OW 69
16327: ST_TO_ADDR
// if not tmp then
16328: LD_VAR 0 1
16332: NOT
16333: IFFALSE 16337
// exit ;
16335: GO 16374
// for i in tmp do
16337: LD_ADDR_VAR 0 2
16341: PUSH
16342: LD_VAR 0 1
16346: PUSH
16347: FOR_IN
16348: IFFALSE 16372
// if IsControledBy ( i ) then
16350: LD_VAR 0 2
16354: PPUSH
16355: CALL_OW 312
16359: IFFALSE 16370
// ComUnlink ( i ) ;
16361: LD_VAR 0 2
16365: PPUSH
16366: CALL_OW 136
16370: GO 16347
16372: POP
16373: POP
// end ;
16374: PPOPN 2
16376: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16377: LD_EXP 25
16381: PUSH
16382: LD_EXP 56
16386: AND
16387: IFFALSE 16527
16389: GO 16391
16391: DISABLE
16392: LD_INT 0
16394: PPUSH
16395: PPUSH
// begin ToLua ( displayPowell(); ) ;
16396: LD_STRING displayPowell();
16398: PPUSH
16399: CALL_OW 559
// uc_side := 0 ;
16403: LD_ADDR_OWVAR 20
16407: PUSH
16408: LD_INT 0
16410: ST_TO_ADDR
// uc_nation := 2 ;
16411: LD_ADDR_OWVAR 21
16415: PUSH
16416: LD_INT 2
16418: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16419: LD_ADDR_OWVAR 37
16423: PUSH
16424: LD_INT 14
16426: ST_TO_ADDR
// vc_engine := engine_siberite ;
16427: LD_ADDR_OWVAR 39
16431: PUSH
16432: LD_INT 3
16434: ST_TO_ADDR
// vc_control := control_apeman ;
16435: LD_ADDR_OWVAR 38
16439: PUSH
16440: LD_INT 5
16442: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16443: LD_ADDR_OWVAR 40
16447: PUSH
16448: LD_INT 29
16450: ST_TO_ADDR
// un := CreateVehicle ;
16451: LD_ADDR_VAR 0 2
16455: PUSH
16456: CALL_OW 45
16460: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16461: LD_VAR 0 2
16465: PPUSH
16466: LD_INT 1
16468: PPUSH
16469: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16473: LD_INT 35
16475: PPUSH
16476: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16480: LD_VAR 0 2
16484: PPUSH
16485: LD_INT 22
16487: PUSH
16488: LD_OWVAR 2
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PPUSH
16497: CALL_OW 69
16501: PPUSH
16502: LD_VAR 0 2
16506: PPUSH
16507: CALL_OW 74
16511: PPUSH
16512: CALL_OW 115
// until IsDead ( un ) ;
16516: LD_VAR 0 2
16520: PPUSH
16521: CALL_OW 301
16525: IFFALSE 16473
// end ;
16527: PPOPN 2
16529: END
// every 0 0$1 trigger StreamModeActive and sStu do
16530: LD_EXP 25
16534: PUSH
16535: LD_EXP 64
16539: AND
16540: IFFALSE 16556
16542: GO 16544
16544: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16545: LD_STRING displayStucuk();
16547: PPUSH
16548: CALL_OW 559
// ResetFog ;
16552: CALL_OW 335
// end ;
16556: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16557: LD_EXP 25
16561: PUSH
16562: LD_EXP 57
16566: AND
16567: IFFALSE 16708
16569: GO 16571
16571: DISABLE
16572: LD_INT 0
16574: PPUSH
16575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16576: LD_ADDR_VAR 0 2
16580: PUSH
16581: LD_INT 22
16583: PUSH
16584: LD_OWVAR 2
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 21
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PPUSH
16607: CALL_OW 69
16611: ST_TO_ADDR
// if not tmp then
16612: LD_VAR 0 2
16616: NOT
16617: IFFALSE 16621
// exit ;
16619: GO 16708
// un := tmp [ rand ( 1 , tmp ) ] ;
16621: LD_ADDR_VAR 0 1
16625: PUSH
16626: LD_VAR 0 2
16630: PUSH
16631: LD_INT 1
16633: PPUSH
16634: LD_VAR 0 2
16638: PPUSH
16639: CALL_OW 12
16643: ARRAY
16644: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16645: LD_VAR 0 1
16649: PPUSH
16650: LD_INT 0
16652: PPUSH
16653: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16657: LD_VAR 0 1
16661: PPUSH
16662: LD_OWVAR 3
16666: PUSH
16667: LD_VAR 0 1
16671: DIFF
16672: PPUSH
16673: LD_VAR 0 1
16677: PPUSH
16678: CALL_OW 74
16682: PPUSH
16683: CALL_OW 115
// wait ( 0 0$20 ) ;
16687: LD_INT 700
16689: PPUSH
16690: CALL_OW 67
// SetSide ( un , your_side ) ;
16694: LD_VAR 0 1
16698: PPUSH
16699: LD_OWVAR 2
16703: PPUSH
16704: CALL_OW 235
// end ;
16708: PPOPN 2
16710: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16711: LD_EXP 25
16715: PUSH
16716: LD_EXP 58
16720: AND
16721: IFFALSE 16827
16723: GO 16725
16725: DISABLE
16726: LD_INT 0
16728: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16729: LD_ADDR_VAR 0 1
16733: PUSH
16734: LD_INT 22
16736: PUSH
16737: LD_OWVAR 2
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 2
16748: PUSH
16749: LD_INT 30
16751: PUSH
16752: LD_INT 0
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 30
16761: PUSH
16762: LD_INT 1
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: LIST
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PPUSH
16778: CALL_OW 69
16782: ST_TO_ADDR
// if not depot then
16783: LD_VAR 0 1
16787: NOT
16788: IFFALSE 16792
// exit ;
16790: GO 16827
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16792: LD_VAR 0 1
16796: PUSH
16797: LD_INT 1
16799: ARRAY
16800: PPUSH
16801: CALL_OW 250
16805: PPUSH
16806: LD_VAR 0 1
16810: PUSH
16811: LD_INT 1
16813: ARRAY
16814: PPUSH
16815: CALL_OW 251
16819: PPUSH
16820: LD_INT 70
16822: PPUSH
16823: CALL_OW 495
// end ;
16827: PPOPN 1
16829: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16830: LD_EXP 25
16834: PUSH
16835: LD_EXP 59
16839: AND
16840: IFFALSE 17051
16842: GO 16844
16844: DISABLE
16845: LD_INT 0
16847: PPUSH
16848: PPUSH
16849: PPUSH
16850: PPUSH
16851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16852: LD_ADDR_VAR 0 5
16856: PUSH
16857: LD_INT 22
16859: PUSH
16860: LD_OWVAR 2
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 21
16871: PUSH
16872: LD_INT 1
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PPUSH
16883: CALL_OW 69
16887: ST_TO_ADDR
// if not tmp then
16888: LD_VAR 0 5
16892: NOT
16893: IFFALSE 16897
// exit ;
16895: GO 17051
// for i in tmp do
16897: LD_ADDR_VAR 0 1
16901: PUSH
16902: LD_VAR 0 5
16906: PUSH
16907: FOR_IN
16908: IFFALSE 17049
// begin d := rand ( 0 , 5 ) ;
16910: LD_ADDR_VAR 0 4
16914: PUSH
16915: LD_INT 0
16917: PPUSH
16918: LD_INT 5
16920: PPUSH
16921: CALL_OW 12
16925: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16926: LD_ADDR_VAR 0 2
16930: PUSH
16931: LD_VAR 0 1
16935: PPUSH
16936: CALL_OW 250
16940: PPUSH
16941: LD_VAR 0 4
16945: PPUSH
16946: LD_INT 3
16948: PPUSH
16949: LD_INT 12
16951: PPUSH
16952: CALL_OW 12
16956: PPUSH
16957: CALL_OW 272
16961: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16962: LD_ADDR_VAR 0 3
16966: PUSH
16967: LD_VAR 0 1
16971: PPUSH
16972: CALL_OW 251
16976: PPUSH
16977: LD_VAR 0 4
16981: PPUSH
16982: LD_INT 3
16984: PPUSH
16985: LD_INT 12
16987: PPUSH
16988: CALL_OW 12
16992: PPUSH
16993: CALL_OW 273
16997: ST_TO_ADDR
// if ValidHex ( x , y ) then
16998: LD_VAR 0 2
17002: PPUSH
17003: LD_VAR 0 3
17007: PPUSH
17008: CALL_OW 488
17012: IFFALSE 17047
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17014: LD_VAR 0 1
17018: PPUSH
17019: LD_VAR 0 2
17023: PPUSH
17024: LD_VAR 0 3
17028: PPUSH
17029: LD_INT 3
17031: PPUSH
17032: LD_INT 6
17034: PPUSH
17035: CALL_OW 12
17039: PPUSH
17040: LD_INT 1
17042: PPUSH
17043: CALL_OW 483
// end ;
17047: GO 16907
17049: POP
17050: POP
// end ;
17051: PPOPN 5
17053: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17054: LD_EXP 25
17058: PUSH
17059: LD_EXP 60
17063: AND
17064: IFFALSE 17158
17066: GO 17068
17068: DISABLE
17069: LD_INT 0
17071: PPUSH
17072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17073: LD_ADDR_VAR 0 2
17077: PUSH
17078: LD_INT 22
17080: PUSH
17081: LD_OWVAR 2
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 32
17092: PUSH
17093: LD_INT 1
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 21
17102: PUSH
17103: LD_INT 2
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: LIST
17114: PPUSH
17115: CALL_OW 69
17119: ST_TO_ADDR
// if not tmp then
17120: LD_VAR 0 2
17124: NOT
17125: IFFALSE 17129
// exit ;
17127: GO 17158
// for i in tmp do
17129: LD_ADDR_VAR 0 1
17133: PUSH
17134: LD_VAR 0 2
17138: PUSH
17139: FOR_IN
17140: IFFALSE 17156
// SetFuel ( i , 0 ) ;
17142: LD_VAR 0 1
17146: PPUSH
17147: LD_INT 0
17149: PPUSH
17150: CALL_OW 240
17154: GO 17139
17156: POP
17157: POP
// end ;
17158: PPOPN 2
17160: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17161: LD_EXP 25
17165: PUSH
17166: LD_EXP 61
17170: AND
17171: IFFALSE 17237
17173: GO 17175
17175: DISABLE
17176: LD_INT 0
17178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17179: LD_ADDR_VAR 0 1
17183: PUSH
17184: LD_INT 22
17186: PUSH
17187: LD_OWVAR 2
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 30
17198: PUSH
17199: LD_INT 29
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PPUSH
17210: CALL_OW 69
17214: ST_TO_ADDR
// if not tmp then
17215: LD_VAR 0 1
17219: NOT
17220: IFFALSE 17224
// exit ;
17222: GO 17237
// DestroyUnit ( tmp [ 1 ] ) ;
17224: LD_VAR 0 1
17228: PUSH
17229: LD_INT 1
17231: ARRAY
17232: PPUSH
17233: CALL_OW 65
// end ;
17237: PPOPN 1
17239: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17240: LD_EXP 25
17244: PUSH
17245: LD_EXP 63
17249: AND
17250: IFFALSE 17379
17252: GO 17254
17254: DISABLE
17255: LD_INT 0
17257: PPUSH
// begin uc_side := 0 ;
17258: LD_ADDR_OWVAR 20
17262: PUSH
17263: LD_INT 0
17265: ST_TO_ADDR
// uc_nation := nation_arabian ;
17266: LD_ADDR_OWVAR 21
17270: PUSH
17271: LD_INT 2
17273: ST_TO_ADDR
// hc_gallery :=  ;
17274: LD_ADDR_OWVAR 33
17278: PUSH
17279: LD_STRING 
17281: ST_TO_ADDR
// hc_name :=  ;
17282: LD_ADDR_OWVAR 26
17286: PUSH
17287: LD_STRING 
17289: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17290: LD_INT 1
17292: PPUSH
17293: LD_INT 11
17295: PPUSH
17296: LD_INT 10
17298: PPUSH
17299: CALL_OW 380
// un := CreateHuman ;
17303: LD_ADDR_VAR 0 1
17307: PUSH
17308: CALL_OW 44
17312: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17313: LD_VAR 0 1
17317: PPUSH
17318: LD_INT 1
17320: PPUSH
17321: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17325: LD_INT 35
17327: PPUSH
17328: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17332: LD_VAR 0 1
17336: PPUSH
17337: LD_INT 22
17339: PUSH
17340: LD_OWVAR 2
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PPUSH
17349: CALL_OW 69
17353: PPUSH
17354: LD_VAR 0 1
17358: PPUSH
17359: CALL_OW 74
17363: PPUSH
17364: CALL_OW 115
// until IsDead ( un ) ;
17368: LD_VAR 0 1
17372: PPUSH
17373: CALL_OW 301
17377: IFFALSE 17325
// end ;
17379: PPOPN 1
17381: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17382: LD_EXP 25
17386: PUSH
17387: LD_EXP 65
17391: AND
17392: IFFALSE 17404
17394: GO 17396
17396: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17397: LD_STRING earthquake(getX(game), 0, 32)
17399: PPUSH
17400: CALL_OW 559
17404: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17405: LD_EXP 25
17409: PUSH
17410: LD_EXP 66
17414: AND
17415: IFFALSE 17506
17417: GO 17419
17419: DISABLE
17420: LD_INT 0
17422: PPUSH
// begin enable ;
17423: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17424: LD_ADDR_VAR 0 1
17428: PUSH
17429: LD_INT 22
17431: PUSH
17432: LD_OWVAR 2
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 21
17443: PUSH
17444: LD_INT 2
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 33
17453: PUSH
17454: LD_INT 3
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: PPUSH
17466: CALL_OW 69
17470: ST_TO_ADDR
// if not tmp then
17471: LD_VAR 0 1
17475: NOT
17476: IFFALSE 17480
// exit ;
17478: GO 17506
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17480: LD_VAR 0 1
17484: PUSH
17485: LD_INT 1
17487: PPUSH
17488: LD_VAR 0 1
17492: PPUSH
17493: CALL_OW 12
17497: ARRAY
17498: PPUSH
17499: LD_INT 1
17501: PPUSH
17502: CALL_OW 234
// end ;
17506: PPOPN 1
17508: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17509: LD_EXP 25
17513: PUSH
17514: LD_EXP 67
17518: AND
17519: IFFALSE 17660
17521: GO 17523
17523: DISABLE
17524: LD_INT 0
17526: PPUSH
17527: PPUSH
17528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17529: LD_ADDR_VAR 0 3
17533: PUSH
17534: LD_INT 22
17536: PUSH
17537: LD_OWVAR 2
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 25
17548: PUSH
17549: LD_INT 1
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PPUSH
17560: CALL_OW 69
17564: ST_TO_ADDR
// if not tmp then
17565: LD_VAR 0 3
17569: NOT
17570: IFFALSE 17574
// exit ;
17572: GO 17660
// un := tmp [ rand ( 1 , tmp ) ] ;
17574: LD_ADDR_VAR 0 2
17578: PUSH
17579: LD_VAR 0 3
17583: PUSH
17584: LD_INT 1
17586: PPUSH
17587: LD_VAR 0 3
17591: PPUSH
17592: CALL_OW 12
17596: ARRAY
17597: ST_TO_ADDR
// if Crawls ( un ) then
17598: LD_VAR 0 2
17602: PPUSH
17603: CALL_OW 318
17607: IFFALSE 17618
// ComWalk ( un ) ;
17609: LD_VAR 0 2
17613: PPUSH
17614: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17618: LD_VAR 0 2
17622: PPUSH
17623: LD_INT 9
17625: PPUSH
17626: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17630: LD_INT 28
17632: PPUSH
17633: LD_OWVAR 2
17637: PPUSH
17638: LD_INT 2
17640: PPUSH
17641: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17645: LD_INT 29
17647: PPUSH
17648: LD_OWVAR 2
17652: PPUSH
17653: LD_INT 2
17655: PPUSH
17656: CALL_OW 322
// end ;
17660: PPOPN 3
17662: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17663: LD_EXP 25
17667: PUSH
17668: LD_EXP 68
17672: AND
17673: IFFALSE 17784
17675: GO 17677
17677: DISABLE
17678: LD_INT 0
17680: PPUSH
17681: PPUSH
17682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17683: LD_ADDR_VAR 0 3
17687: PUSH
17688: LD_INT 22
17690: PUSH
17691: LD_OWVAR 2
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 25
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PPUSH
17714: CALL_OW 69
17718: ST_TO_ADDR
// if not tmp then
17719: LD_VAR 0 3
17723: NOT
17724: IFFALSE 17728
// exit ;
17726: GO 17784
// un := tmp [ rand ( 1 , tmp ) ] ;
17728: LD_ADDR_VAR 0 2
17732: PUSH
17733: LD_VAR 0 3
17737: PUSH
17738: LD_INT 1
17740: PPUSH
17741: LD_VAR 0 3
17745: PPUSH
17746: CALL_OW 12
17750: ARRAY
17751: ST_TO_ADDR
// if Crawls ( un ) then
17752: LD_VAR 0 2
17756: PPUSH
17757: CALL_OW 318
17761: IFFALSE 17772
// ComWalk ( un ) ;
17763: LD_VAR 0 2
17767: PPUSH
17768: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17772: LD_VAR 0 2
17776: PPUSH
17777: LD_INT 8
17779: PPUSH
17780: CALL_OW 336
// end ;
17784: PPOPN 3
17786: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17787: LD_EXP 25
17791: PUSH
17792: LD_EXP 69
17796: AND
17797: IFFALSE 17941
17799: GO 17801
17801: DISABLE
17802: LD_INT 0
17804: PPUSH
17805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17806: LD_ADDR_VAR 0 2
17810: PUSH
17811: LD_INT 22
17813: PUSH
17814: LD_OWVAR 2
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 21
17825: PUSH
17826: LD_INT 2
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 2
17835: PUSH
17836: LD_INT 34
17838: PUSH
17839: LD_INT 12
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 34
17848: PUSH
17849: LD_INT 51
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 34
17858: PUSH
17859: LD_INT 32
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: LIST
17876: PPUSH
17877: CALL_OW 69
17881: ST_TO_ADDR
// if not tmp then
17882: LD_VAR 0 2
17886: NOT
17887: IFFALSE 17891
// exit ;
17889: GO 17941
// for i in tmp do
17891: LD_ADDR_VAR 0 1
17895: PUSH
17896: LD_VAR 0 2
17900: PUSH
17901: FOR_IN
17902: IFFALSE 17939
// if GetCargo ( i , mat_artifact ) = 0 then
17904: LD_VAR 0 1
17908: PPUSH
17909: LD_INT 4
17911: PPUSH
17912: CALL_OW 289
17916: PUSH
17917: LD_INT 0
17919: EQUAL
17920: IFFALSE 17937
// SetCargo ( i , mat_siberit , 100 ) ;
17922: LD_VAR 0 1
17926: PPUSH
17927: LD_INT 3
17929: PPUSH
17930: LD_INT 100
17932: PPUSH
17933: CALL_OW 290
17937: GO 17901
17939: POP
17940: POP
// end ;
17941: PPOPN 2
17943: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17944: LD_EXP 25
17948: PUSH
17949: LD_EXP 70
17953: AND
17954: IFFALSE 18137
17956: GO 17958
17958: DISABLE
17959: LD_INT 0
17961: PPUSH
17962: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17963: LD_ADDR_VAR 0 2
17967: PUSH
17968: LD_INT 22
17970: PUSH
17971: LD_OWVAR 2
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PPUSH
17980: CALL_OW 69
17984: ST_TO_ADDR
// if not tmp then
17985: LD_VAR 0 2
17989: NOT
17990: IFFALSE 17994
// exit ;
17992: GO 18137
// for i := 1 to 2 do
17994: LD_ADDR_VAR 0 1
17998: PUSH
17999: DOUBLE
18000: LD_INT 1
18002: DEC
18003: ST_TO_ADDR
18004: LD_INT 2
18006: PUSH
18007: FOR_TO
18008: IFFALSE 18135
// begin uc_side := your_side ;
18010: LD_ADDR_OWVAR 20
18014: PUSH
18015: LD_OWVAR 2
18019: ST_TO_ADDR
// uc_nation := nation_american ;
18020: LD_ADDR_OWVAR 21
18024: PUSH
18025: LD_INT 1
18027: ST_TO_ADDR
// vc_chassis := us_morphling ;
18028: LD_ADDR_OWVAR 37
18032: PUSH
18033: LD_INT 5
18035: ST_TO_ADDR
// vc_engine := engine_siberite ;
18036: LD_ADDR_OWVAR 39
18040: PUSH
18041: LD_INT 3
18043: ST_TO_ADDR
// vc_control := control_computer ;
18044: LD_ADDR_OWVAR 38
18048: PUSH
18049: LD_INT 3
18051: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18052: LD_ADDR_OWVAR 40
18056: PUSH
18057: LD_INT 10
18059: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18060: LD_VAR 0 2
18064: PUSH
18065: LD_INT 1
18067: ARRAY
18068: PPUSH
18069: CALL_OW 310
18073: NOT
18074: IFFALSE 18121
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18076: CALL_OW 45
18080: PPUSH
18081: LD_VAR 0 2
18085: PUSH
18086: LD_INT 1
18088: ARRAY
18089: PPUSH
18090: CALL_OW 250
18094: PPUSH
18095: LD_VAR 0 2
18099: PUSH
18100: LD_INT 1
18102: ARRAY
18103: PPUSH
18104: CALL_OW 251
18108: PPUSH
18109: LD_INT 12
18111: PPUSH
18112: LD_INT 1
18114: PPUSH
18115: CALL_OW 50
18119: GO 18133
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18121: CALL_OW 45
18125: PPUSH
18126: LD_INT 1
18128: PPUSH
18129: CALL_OW 51
// end ;
18133: GO 18007
18135: POP
18136: POP
// end ;
18137: PPOPN 2
18139: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18140: LD_EXP 25
18144: PUSH
18145: LD_EXP 71
18149: AND
18150: IFFALSE 18372
18152: GO 18154
18154: DISABLE
18155: LD_INT 0
18157: PPUSH
18158: PPUSH
18159: PPUSH
18160: PPUSH
18161: PPUSH
18162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18163: LD_ADDR_VAR 0 6
18167: PUSH
18168: LD_INT 22
18170: PUSH
18171: LD_OWVAR 2
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 21
18182: PUSH
18183: LD_INT 1
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 3
18192: PUSH
18193: LD_INT 23
18195: PUSH
18196: LD_INT 0
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: LIST
18211: PPUSH
18212: CALL_OW 69
18216: ST_TO_ADDR
// if not tmp then
18217: LD_VAR 0 6
18221: NOT
18222: IFFALSE 18226
// exit ;
18224: GO 18372
// s1 := rand ( 1 , 4 ) ;
18226: LD_ADDR_VAR 0 2
18230: PUSH
18231: LD_INT 1
18233: PPUSH
18234: LD_INT 4
18236: PPUSH
18237: CALL_OW 12
18241: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18242: LD_ADDR_VAR 0 4
18246: PUSH
18247: LD_VAR 0 6
18251: PUSH
18252: LD_INT 1
18254: ARRAY
18255: PPUSH
18256: LD_VAR 0 2
18260: PPUSH
18261: CALL_OW 259
18265: ST_TO_ADDR
// if s1 = 1 then
18266: LD_VAR 0 2
18270: PUSH
18271: LD_INT 1
18273: EQUAL
18274: IFFALSE 18294
// s2 := rand ( 2 , 4 ) else
18276: LD_ADDR_VAR 0 3
18280: PUSH
18281: LD_INT 2
18283: PPUSH
18284: LD_INT 4
18286: PPUSH
18287: CALL_OW 12
18291: ST_TO_ADDR
18292: GO 18302
// s2 := 1 ;
18294: LD_ADDR_VAR 0 3
18298: PUSH
18299: LD_INT 1
18301: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18302: LD_ADDR_VAR 0 5
18306: PUSH
18307: LD_VAR 0 6
18311: PUSH
18312: LD_INT 1
18314: ARRAY
18315: PPUSH
18316: LD_VAR 0 3
18320: PPUSH
18321: CALL_OW 259
18325: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18326: LD_VAR 0 6
18330: PUSH
18331: LD_INT 1
18333: ARRAY
18334: PPUSH
18335: LD_VAR 0 2
18339: PPUSH
18340: LD_VAR 0 5
18344: PPUSH
18345: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18349: LD_VAR 0 6
18353: PUSH
18354: LD_INT 1
18356: ARRAY
18357: PPUSH
18358: LD_VAR 0 3
18362: PPUSH
18363: LD_VAR 0 4
18367: PPUSH
18368: CALL_OW 237
// end ;
18372: PPOPN 6
18374: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18375: LD_EXP 25
18379: PUSH
18380: LD_EXP 72
18384: AND
18385: IFFALSE 18464
18387: GO 18389
18389: DISABLE
18390: LD_INT 0
18392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18393: LD_ADDR_VAR 0 1
18397: PUSH
18398: LD_INT 22
18400: PUSH
18401: LD_OWVAR 2
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 30
18412: PUSH
18413: LD_INT 3
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PPUSH
18424: CALL_OW 69
18428: ST_TO_ADDR
// if not tmp then
18429: LD_VAR 0 1
18433: NOT
18434: IFFALSE 18438
// exit ;
18436: GO 18464
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18438: LD_VAR 0 1
18442: PUSH
18443: LD_INT 1
18445: PPUSH
18446: LD_VAR 0 1
18450: PPUSH
18451: CALL_OW 12
18455: ARRAY
18456: PPUSH
18457: LD_INT 1
18459: PPUSH
18460: CALL_OW 234
// end ;
18464: PPOPN 1
18466: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18467: LD_EXP 25
18471: PUSH
18472: LD_EXP 73
18476: AND
18477: IFFALSE 18589
18479: GO 18481
18481: DISABLE
18482: LD_INT 0
18484: PPUSH
18485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18486: LD_ADDR_VAR 0 2
18490: PUSH
18491: LD_INT 22
18493: PUSH
18494: LD_OWVAR 2
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 2
18505: PUSH
18506: LD_INT 30
18508: PUSH
18509: LD_INT 27
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 30
18518: PUSH
18519: LD_INT 26
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 30
18528: PUSH
18529: LD_INT 28
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PPUSH
18546: CALL_OW 69
18550: ST_TO_ADDR
// if not tmp then
18551: LD_VAR 0 2
18555: NOT
18556: IFFALSE 18560
// exit ;
18558: GO 18589
// for i in tmp do
18560: LD_ADDR_VAR 0 1
18564: PUSH
18565: LD_VAR 0 2
18569: PUSH
18570: FOR_IN
18571: IFFALSE 18587
// SetLives ( i , 1 ) ;
18573: LD_VAR 0 1
18577: PPUSH
18578: LD_INT 1
18580: PPUSH
18581: CALL_OW 234
18585: GO 18570
18587: POP
18588: POP
// end ;
18589: PPOPN 2
18591: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18592: LD_EXP 25
18596: PUSH
18597: LD_EXP 74
18601: AND
18602: IFFALSE 18889
18604: GO 18606
18606: DISABLE
18607: LD_INT 0
18609: PPUSH
18610: PPUSH
18611: PPUSH
// begin i := rand ( 1 , 7 ) ;
18612: LD_ADDR_VAR 0 1
18616: PUSH
18617: LD_INT 1
18619: PPUSH
18620: LD_INT 7
18622: PPUSH
18623: CALL_OW 12
18627: ST_TO_ADDR
// case i of 1 :
18628: LD_VAR 0 1
18632: PUSH
18633: LD_INT 1
18635: DOUBLE
18636: EQUAL
18637: IFTRUE 18641
18639: GO 18651
18641: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18642: LD_STRING earthquake(getX(game), 0, 32)
18644: PPUSH
18645: CALL_OW 559
18649: GO 18889
18651: LD_INT 2
18653: DOUBLE
18654: EQUAL
18655: IFTRUE 18659
18657: GO 18673
18659: POP
// begin ToLua ( displayStucuk(); ) ;
18660: LD_STRING displayStucuk();
18662: PPUSH
18663: CALL_OW 559
// ResetFog ;
18667: CALL_OW 335
// end ; 3 :
18671: GO 18889
18673: LD_INT 3
18675: DOUBLE
18676: EQUAL
18677: IFTRUE 18681
18679: GO 18785
18681: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18682: LD_ADDR_VAR 0 2
18686: PUSH
18687: LD_INT 22
18689: PUSH
18690: LD_OWVAR 2
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 25
18701: PUSH
18702: LD_INT 1
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PPUSH
18713: CALL_OW 69
18717: ST_TO_ADDR
// if not tmp then
18718: LD_VAR 0 2
18722: NOT
18723: IFFALSE 18727
// exit ;
18725: GO 18889
// un := tmp [ rand ( 1 , tmp ) ] ;
18727: LD_ADDR_VAR 0 3
18731: PUSH
18732: LD_VAR 0 2
18736: PUSH
18737: LD_INT 1
18739: PPUSH
18740: LD_VAR 0 2
18744: PPUSH
18745: CALL_OW 12
18749: ARRAY
18750: ST_TO_ADDR
// if Crawls ( un ) then
18751: LD_VAR 0 3
18755: PPUSH
18756: CALL_OW 318
18760: IFFALSE 18771
// ComWalk ( un ) ;
18762: LD_VAR 0 3
18766: PPUSH
18767: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18771: LD_VAR 0 3
18775: PPUSH
18776: LD_INT 8
18778: PPUSH
18779: CALL_OW 336
// end ; 4 :
18783: GO 18889
18785: LD_INT 4
18787: DOUBLE
18788: EQUAL
18789: IFTRUE 18793
18791: GO 18867
18793: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18794: LD_ADDR_VAR 0 2
18798: PUSH
18799: LD_INT 22
18801: PUSH
18802: LD_OWVAR 2
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 30
18813: PUSH
18814: LD_INT 29
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PPUSH
18825: CALL_OW 69
18829: ST_TO_ADDR
// if not tmp then
18830: LD_VAR 0 2
18834: NOT
18835: IFFALSE 18839
// exit ;
18837: GO 18889
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18839: LD_VAR 0 2
18843: PUSH
18844: LD_INT 1
18846: ARRAY
18847: PPUSH
18848: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18852: LD_VAR 0 2
18856: PUSH
18857: LD_INT 1
18859: ARRAY
18860: PPUSH
18861: CALL_OW 65
// end ; 5 .. 7 :
18865: GO 18889
18867: LD_INT 5
18869: DOUBLE
18870: GREATEREQUAL
18871: IFFALSE 18879
18873: LD_INT 7
18875: DOUBLE
18876: LESSEQUAL
18877: IFTRUE 18881
18879: GO 18888
18881: POP
// StreamSibBomb ; end ;
18882: CALL 15126 0 0
18886: GO 18889
18888: POP
// end ;
18889: PPOPN 3
18891: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18892: LD_EXP 25
18896: PUSH
18897: LD_EXP 75
18901: AND
18902: IFFALSE 19058
18904: GO 18906
18906: DISABLE
18907: LD_INT 0
18909: PPUSH
18910: PPUSH
18911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18912: LD_ADDR_VAR 0 2
18916: PUSH
18917: LD_INT 81
18919: PUSH
18920: LD_OWVAR 2
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 2
18931: PUSH
18932: LD_INT 21
18934: PUSH
18935: LD_INT 1
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 21
18944: PUSH
18945: LD_INT 2
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: LIST
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PPUSH
18961: CALL_OW 69
18965: ST_TO_ADDR
// if not tmp then
18966: LD_VAR 0 2
18970: NOT
18971: IFFALSE 18975
// exit ;
18973: GO 19058
// p := 0 ;
18975: LD_ADDR_VAR 0 3
18979: PUSH
18980: LD_INT 0
18982: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18983: LD_INT 35
18985: PPUSH
18986: CALL_OW 67
// p := p + 1 ;
18990: LD_ADDR_VAR 0 3
18994: PUSH
18995: LD_VAR 0 3
18999: PUSH
19000: LD_INT 1
19002: PLUS
19003: ST_TO_ADDR
// for i in tmp do
19004: LD_ADDR_VAR 0 1
19008: PUSH
19009: LD_VAR 0 2
19013: PUSH
19014: FOR_IN
19015: IFFALSE 19046
// if GetLives ( i ) < 1000 then
19017: LD_VAR 0 1
19021: PPUSH
19022: CALL_OW 256
19026: PUSH
19027: LD_INT 1000
19029: LESS
19030: IFFALSE 19044
// SetLives ( i , 1000 ) ;
19032: LD_VAR 0 1
19036: PPUSH
19037: LD_INT 1000
19039: PPUSH
19040: CALL_OW 234
19044: GO 19014
19046: POP
19047: POP
// until p > 20 ;
19048: LD_VAR 0 3
19052: PUSH
19053: LD_INT 20
19055: GREATER
19056: IFFALSE 18983
// end ;
19058: PPOPN 3
19060: END
// every 0 0$1 trigger StreamModeActive and sTime do
19061: LD_EXP 25
19065: PUSH
19066: LD_EXP 76
19070: AND
19071: IFFALSE 19106
19073: GO 19075
19075: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19076: LD_INT 28
19078: PPUSH
19079: LD_OWVAR 2
19083: PPUSH
19084: LD_INT 2
19086: PPUSH
19087: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19091: LD_INT 30
19093: PPUSH
19094: LD_OWVAR 2
19098: PPUSH
19099: LD_INT 2
19101: PPUSH
19102: CALL_OW 322
// end ;
19106: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19107: LD_EXP 25
19111: PUSH
19112: LD_EXP 77
19116: AND
19117: IFFALSE 19238
19119: GO 19121
19121: DISABLE
19122: LD_INT 0
19124: PPUSH
19125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19126: LD_ADDR_VAR 0 2
19130: PUSH
19131: LD_INT 22
19133: PUSH
19134: LD_OWVAR 2
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 21
19145: PUSH
19146: LD_INT 1
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 3
19155: PUSH
19156: LD_INT 23
19158: PUSH
19159: LD_INT 0
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: LIST
19174: PPUSH
19175: CALL_OW 69
19179: ST_TO_ADDR
// if not tmp then
19180: LD_VAR 0 2
19184: NOT
19185: IFFALSE 19189
// exit ;
19187: GO 19238
// for i in tmp do
19189: LD_ADDR_VAR 0 1
19193: PUSH
19194: LD_VAR 0 2
19198: PUSH
19199: FOR_IN
19200: IFFALSE 19236
// begin if Crawls ( i ) then
19202: LD_VAR 0 1
19206: PPUSH
19207: CALL_OW 318
19211: IFFALSE 19222
// ComWalk ( i ) ;
19213: LD_VAR 0 1
19217: PPUSH
19218: CALL_OW 138
// SetClass ( i , 2 ) ;
19222: LD_VAR 0 1
19226: PPUSH
19227: LD_INT 2
19229: PPUSH
19230: CALL_OW 336
// end ;
19234: GO 19199
19236: POP
19237: POP
// end ;
19238: PPOPN 2
19240: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19241: LD_EXP 25
19245: PUSH
19246: LD_EXP 78
19250: AND
19251: IFFALSE 19539
19253: GO 19255
19255: DISABLE
19256: LD_INT 0
19258: PPUSH
19259: PPUSH
19260: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19261: LD_OWVAR 2
19265: PPUSH
19266: LD_INT 9
19268: PPUSH
19269: LD_INT 1
19271: PPUSH
19272: LD_INT 1
19274: PPUSH
19275: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19279: LD_INT 9
19281: PPUSH
19282: LD_OWVAR 2
19286: PPUSH
19287: CALL_OW 343
// uc_side := 9 ;
19291: LD_ADDR_OWVAR 20
19295: PUSH
19296: LD_INT 9
19298: ST_TO_ADDR
// uc_nation := 2 ;
19299: LD_ADDR_OWVAR 21
19303: PUSH
19304: LD_INT 2
19306: ST_TO_ADDR
// hc_name := Dark Warrior ;
19307: LD_ADDR_OWVAR 26
19311: PUSH
19312: LD_STRING Dark Warrior
19314: ST_TO_ADDR
// hc_gallery :=  ;
19315: LD_ADDR_OWVAR 33
19319: PUSH
19320: LD_STRING 
19322: ST_TO_ADDR
// hc_noskilllimit := true ;
19323: LD_ADDR_OWVAR 76
19327: PUSH
19328: LD_INT 1
19330: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19331: LD_ADDR_OWVAR 31
19335: PUSH
19336: LD_INT 30
19338: PUSH
19339: LD_INT 30
19341: PUSH
19342: LD_INT 30
19344: PUSH
19345: LD_INT 30
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: ST_TO_ADDR
// un := CreateHuman ;
19354: LD_ADDR_VAR 0 3
19358: PUSH
19359: CALL_OW 44
19363: ST_TO_ADDR
// hc_noskilllimit := false ;
19364: LD_ADDR_OWVAR 76
19368: PUSH
19369: LD_INT 0
19371: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19372: LD_VAR 0 3
19376: PPUSH
19377: LD_INT 1
19379: PPUSH
19380: CALL_OW 51
// ToLua ( playRanger() ) ;
19384: LD_STRING playRanger()
19386: PPUSH
19387: CALL_OW 559
// p := 0 ;
19391: LD_ADDR_VAR 0 2
19395: PUSH
19396: LD_INT 0
19398: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19399: LD_INT 35
19401: PPUSH
19402: CALL_OW 67
// p := p + 1 ;
19406: LD_ADDR_VAR 0 2
19410: PUSH
19411: LD_VAR 0 2
19415: PUSH
19416: LD_INT 1
19418: PLUS
19419: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19420: LD_VAR 0 3
19424: PPUSH
19425: CALL_OW 256
19429: PUSH
19430: LD_INT 1000
19432: LESS
19433: IFFALSE 19447
// SetLives ( un , 1000 ) ;
19435: LD_VAR 0 3
19439: PPUSH
19440: LD_INT 1000
19442: PPUSH
19443: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19447: LD_VAR 0 3
19451: PPUSH
19452: LD_INT 81
19454: PUSH
19455: LD_OWVAR 2
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 91
19466: PUSH
19467: LD_VAR 0 3
19471: PUSH
19472: LD_INT 30
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: LIST
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PPUSH
19484: CALL_OW 69
19488: PPUSH
19489: LD_VAR 0 3
19493: PPUSH
19494: CALL_OW 74
19498: PPUSH
19499: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19503: LD_VAR 0 2
19507: PUSH
19508: LD_INT 80
19510: GREATER
19511: PUSH
19512: LD_VAR 0 3
19516: PPUSH
19517: CALL_OW 301
19521: OR
19522: IFFALSE 19399
// if un then
19524: LD_VAR 0 3
19528: IFFALSE 19539
// RemoveUnit ( un ) ;
19530: LD_VAR 0 3
19534: PPUSH
19535: CALL_OW 64
// end ;
19539: PPOPN 3
19541: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19542: LD_EXP 79
19546: IFFALSE 19662
19548: GO 19550
19550: DISABLE
19551: LD_INT 0
19553: PPUSH
19554: PPUSH
19555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19556: LD_ADDR_VAR 0 2
19560: PUSH
19561: LD_INT 81
19563: PUSH
19564: LD_OWVAR 2
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 21
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PPUSH
19587: CALL_OW 69
19591: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19592: LD_STRING playComputer()
19594: PPUSH
19595: CALL_OW 559
// if not tmp then
19599: LD_VAR 0 2
19603: NOT
19604: IFFALSE 19608
// exit ;
19606: GO 19662
// for i in tmp do
19608: LD_ADDR_VAR 0 1
19612: PUSH
19613: LD_VAR 0 2
19617: PUSH
19618: FOR_IN
19619: IFFALSE 19660
// for j := 1 to 4 do
19621: LD_ADDR_VAR 0 3
19625: PUSH
19626: DOUBLE
19627: LD_INT 1
19629: DEC
19630: ST_TO_ADDR
19631: LD_INT 4
19633: PUSH
19634: FOR_TO
19635: IFFALSE 19656
// SetSkill ( i , j , 10 ) ;
19637: LD_VAR 0 1
19641: PPUSH
19642: LD_VAR 0 3
19646: PPUSH
19647: LD_INT 10
19649: PPUSH
19650: CALL_OW 237
19654: GO 19634
19656: POP
19657: POP
19658: GO 19618
19660: POP
19661: POP
// end ;
19662: PPOPN 3
19664: END
// every 0 0$1 trigger s30 do var i , tmp ;
19665: LD_EXP 80
19669: IFFALSE 19738
19671: GO 19673
19673: DISABLE
19674: LD_INT 0
19676: PPUSH
19677: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19678: LD_ADDR_VAR 0 2
19682: PUSH
19683: LD_INT 22
19685: PUSH
19686: LD_OWVAR 2
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PPUSH
19695: CALL_OW 69
19699: ST_TO_ADDR
// if not tmp then
19700: LD_VAR 0 2
19704: NOT
19705: IFFALSE 19709
// exit ;
19707: GO 19738
// for i in tmp do
19709: LD_ADDR_VAR 0 1
19713: PUSH
19714: LD_VAR 0 2
19718: PUSH
19719: FOR_IN
19720: IFFALSE 19736
// SetLives ( i , 300 ) ;
19722: LD_VAR 0 1
19726: PPUSH
19727: LD_INT 300
19729: PPUSH
19730: CALL_OW 234
19734: GO 19719
19736: POP
19737: POP
// end ;
19738: PPOPN 2
19740: END
// every 0 0$1 trigger s60 do var i , tmp ;
19741: LD_EXP 81
19745: IFFALSE 19814
19747: GO 19749
19749: DISABLE
19750: LD_INT 0
19752: PPUSH
19753: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19754: LD_ADDR_VAR 0 2
19758: PUSH
19759: LD_INT 22
19761: PUSH
19762: LD_OWVAR 2
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PPUSH
19771: CALL_OW 69
19775: ST_TO_ADDR
// if not tmp then
19776: LD_VAR 0 2
19780: NOT
19781: IFFALSE 19785
// exit ;
19783: GO 19814
// for i in tmp do
19785: LD_ADDR_VAR 0 1
19789: PUSH
19790: LD_VAR 0 2
19794: PUSH
19795: FOR_IN
19796: IFFALSE 19812
// SetLives ( i , 600 ) ;
19798: LD_VAR 0 1
19802: PPUSH
19803: LD_INT 600
19805: PPUSH
19806: CALL_OW 234
19810: GO 19795
19812: POP
19813: POP
// end ;
19814: PPOPN 2
19816: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19817: LD_INT 0
19819: PPUSH
// case cmd of 301 :
19820: LD_VAR 0 1
19824: PUSH
19825: LD_INT 301
19827: DOUBLE
19828: EQUAL
19829: IFTRUE 19833
19831: GO 19865
19833: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19834: LD_VAR 0 6
19838: PPUSH
19839: LD_VAR 0 7
19843: PPUSH
19844: LD_VAR 0 8
19848: PPUSH
19849: LD_VAR 0 4
19853: PPUSH
19854: LD_VAR 0 5
19858: PPUSH
19859: CALL 21074 0 5
19863: GO 19986
19865: LD_INT 302
19867: DOUBLE
19868: EQUAL
19869: IFTRUE 19873
19871: GO 19910
19873: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19874: LD_VAR 0 6
19878: PPUSH
19879: LD_VAR 0 7
19883: PPUSH
19884: LD_VAR 0 8
19888: PPUSH
19889: LD_VAR 0 9
19893: PPUSH
19894: LD_VAR 0 4
19898: PPUSH
19899: LD_VAR 0 5
19903: PPUSH
19904: CALL 21165 0 6
19908: GO 19986
19910: LD_INT 303
19912: DOUBLE
19913: EQUAL
19914: IFTRUE 19918
19916: GO 19955
19918: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19919: LD_VAR 0 6
19923: PPUSH
19924: LD_VAR 0 7
19928: PPUSH
19929: LD_VAR 0 8
19933: PPUSH
19934: LD_VAR 0 9
19938: PPUSH
19939: LD_VAR 0 4
19943: PPUSH
19944: LD_VAR 0 5
19948: PPUSH
19949: CALL 19991 0 6
19953: GO 19986
19955: LD_INT 304
19957: DOUBLE
19958: EQUAL
19959: IFTRUE 19963
19961: GO 19985
19963: POP
// hHackTeleport ( unit , x , y ) ; end ;
19964: LD_VAR 0 2
19968: PPUSH
19969: LD_VAR 0 4
19973: PPUSH
19974: LD_VAR 0 5
19978: PPUSH
19979: CALL 21758 0 3
19983: GO 19986
19985: POP
// end ;
19986: LD_VAR 0 12
19990: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19991: LD_INT 0
19993: PPUSH
19994: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19995: LD_VAR 0 1
19999: PUSH
20000: LD_INT 1
20002: LESS
20003: PUSH
20004: LD_VAR 0 1
20008: PUSH
20009: LD_INT 3
20011: GREATER
20012: OR
20013: PUSH
20014: LD_VAR 0 5
20018: PPUSH
20019: LD_VAR 0 6
20023: PPUSH
20024: CALL_OW 428
20028: OR
20029: IFFALSE 20033
// exit ;
20031: GO 20761
// uc_side := your_side ;
20033: LD_ADDR_OWVAR 20
20037: PUSH
20038: LD_OWVAR 2
20042: ST_TO_ADDR
// uc_nation := nation ;
20043: LD_ADDR_OWVAR 21
20047: PUSH
20048: LD_VAR 0 1
20052: ST_TO_ADDR
// bc_level = 1 ;
20053: LD_ADDR_OWVAR 43
20057: PUSH
20058: LD_INT 1
20060: ST_TO_ADDR
// case btype of 1 :
20061: LD_VAR 0 2
20065: PUSH
20066: LD_INT 1
20068: DOUBLE
20069: EQUAL
20070: IFTRUE 20074
20072: GO 20085
20074: POP
// bc_type := b_depot ; 2 :
20075: LD_ADDR_OWVAR 42
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
20083: GO 20705
20085: LD_INT 2
20087: DOUBLE
20088: EQUAL
20089: IFTRUE 20093
20091: GO 20104
20093: POP
// bc_type := b_warehouse ; 3 :
20094: LD_ADDR_OWVAR 42
20098: PUSH
20099: LD_INT 1
20101: ST_TO_ADDR
20102: GO 20705
20104: LD_INT 3
20106: DOUBLE
20107: EQUAL
20108: IFTRUE 20112
20110: GO 20123
20112: POP
// bc_type := b_lab ; 4 .. 9 :
20113: LD_ADDR_OWVAR 42
20117: PUSH
20118: LD_INT 6
20120: ST_TO_ADDR
20121: GO 20705
20123: LD_INT 4
20125: DOUBLE
20126: GREATEREQUAL
20127: IFFALSE 20135
20129: LD_INT 9
20131: DOUBLE
20132: LESSEQUAL
20133: IFTRUE 20137
20135: GO 20197
20137: POP
// begin bc_type := b_lab_half ;
20138: LD_ADDR_OWVAR 42
20142: PUSH
20143: LD_INT 7
20145: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20146: LD_ADDR_OWVAR 44
20150: PUSH
20151: LD_INT 10
20153: PUSH
20154: LD_INT 11
20156: PUSH
20157: LD_INT 12
20159: PUSH
20160: LD_INT 15
20162: PUSH
20163: LD_INT 14
20165: PUSH
20166: LD_INT 13
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: PUSH
20177: LD_VAR 0 2
20181: PUSH
20182: LD_INT 3
20184: MINUS
20185: ARRAY
20186: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20187: LD_ADDR_OWVAR 45
20191: PUSH
20192: LD_INT 9
20194: ST_TO_ADDR
// end ; 10 .. 13 :
20195: GO 20705
20197: LD_INT 10
20199: DOUBLE
20200: GREATEREQUAL
20201: IFFALSE 20209
20203: LD_INT 13
20205: DOUBLE
20206: LESSEQUAL
20207: IFTRUE 20211
20209: GO 20288
20211: POP
// begin bc_type := b_lab_full ;
20212: LD_ADDR_OWVAR 42
20216: PUSH
20217: LD_INT 8
20219: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20220: LD_ADDR_OWVAR 44
20224: PUSH
20225: LD_INT 10
20227: PUSH
20228: LD_INT 12
20230: PUSH
20231: LD_INT 14
20233: PUSH
20234: LD_INT 13
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: PUSH
20243: LD_VAR 0 2
20247: PUSH
20248: LD_INT 9
20250: MINUS
20251: ARRAY
20252: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20253: LD_ADDR_OWVAR 45
20257: PUSH
20258: LD_INT 11
20260: PUSH
20261: LD_INT 15
20263: PUSH
20264: LD_INT 12
20266: PUSH
20267: LD_INT 15
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: PUSH
20276: LD_VAR 0 2
20280: PUSH
20281: LD_INT 9
20283: MINUS
20284: ARRAY
20285: ST_TO_ADDR
// end ; 14 :
20286: GO 20705
20288: LD_INT 14
20290: DOUBLE
20291: EQUAL
20292: IFTRUE 20296
20294: GO 20307
20296: POP
// bc_type := b_workshop ; 15 :
20297: LD_ADDR_OWVAR 42
20301: PUSH
20302: LD_INT 2
20304: ST_TO_ADDR
20305: GO 20705
20307: LD_INT 15
20309: DOUBLE
20310: EQUAL
20311: IFTRUE 20315
20313: GO 20326
20315: POP
// bc_type := b_factory ; 16 :
20316: LD_ADDR_OWVAR 42
20320: PUSH
20321: LD_INT 3
20323: ST_TO_ADDR
20324: GO 20705
20326: LD_INT 16
20328: DOUBLE
20329: EQUAL
20330: IFTRUE 20334
20332: GO 20345
20334: POP
// bc_type := b_ext_gun ; 17 :
20335: LD_ADDR_OWVAR 42
20339: PUSH
20340: LD_INT 17
20342: ST_TO_ADDR
20343: GO 20705
20345: LD_INT 17
20347: DOUBLE
20348: EQUAL
20349: IFTRUE 20353
20351: GO 20381
20353: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20354: LD_ADDR_OWVAR 42
20358: PUSH
20359: LD_INT 19
20361: PUSH
20362: LD_INT 23
20364: PUSH
20365: LD_INT 19
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: LIST
20372: PUSH
20373: LD_VAR 0 1
20377: ARRAY
20378: ST_TO_ADDR
20379: GO 20705
20381: LD_INT 18
20383: DOUBLE
20384: EQUAL
20385: IFTRUE 20389
20387: GO 20400
20389: POP
// bc_type := b_ext_radar ; 19 :
20390: LD_ADDR_OWVAR 42
20394: PUSH
20395: LD_INT 20
20397: ST_TO_ADDR
20398: GO 20705
20400: LD_INT 19
20402: DOUBLE
20403: EQUAL
20404: IFTRUE 20408
20406: GO 20419
20408: POP
// bc_type := b_ext_radio ; 20 :
20409: LD_ADDR_OWVAR 42
20413: PUSH
20414: LD_INT 22
20416: ST_TO_ADDR
20417: GO 20705
20419: LD_INT 20
20421: DOUBLE
20422: EQUAL
20423: IFTRUE 20427
20425: GO 20438
20427: POP
// bc_type := b_ext_siberium ; 21 :
20428: LD_ADDR_OWVAR 42
20432: PUSH
20433: LD_INT 21
20435: ST_TO_ADDR
20436: GO 20705
20438: LD_INT 21
20440: DOUBLE
20441: EQUAL
20442: IFTRUE 20446
20444: GO 20457
20446: POP
// bc_type := b_ext_computer ; 22 :
20447: LD_ADDR_OWVAR 42
20451: PUSH
20452: LD_INT 24
20454: ST_TO_ADDR
20455: GO 20705
20457: LD_INT 22
20459: DOUBLE
20460: EQUAL
20461: IFTRUE 20465
20463: GO 20476
20465: POP
// bc_type := b_ext_track ; 23 :
20466: LD_ADDR_OWVAR 42
20470: PUSH
20471: LD_INT 16
20473: ST_TO_ADDR
20474: GO 20705
20476: LD_INT 23
20478: DOUBLE
20479: EQUAL
20480: IFTRUE 20484
20482: GO 20495
20484: POP
// bc_type := b_ext_laser ; 24 :
20485: LD_ADDR_OWVAR 42
20489: PUSH
20490: LD_INT 25
20492: ST_TO_ADDR
20493: GO 20705
20495: LD_INT 24
20497: DOUBLE
20498: EQUAL
20499: IFTRUE 20503
20501: GO 20514
20503: POP
// bc_type := b_control_tower ; 25 :
20504: LD_ADDR_OWVAR 42
20508: PUSH
20509: LD_INT 36
20511: ST_TO_ADDR
20512: GO 20705
20514: LD_INT 25
20516: DOUBLE
20517: EQUAL
20518: IFTRUE 20522
20520: GO 20533
20522: POP
// bc_type := b_breastwork ; 26 :
20523: LD_ADDR_OWVAR 42
20527: PUSH
20528: LD_INT 31
20530: ST_TO_ADDR
20531: GO 20705
20533: LD_INT 26
20535: DOUBLE
20536: EQUAL
20537: IFTRUE 20541
20539: GO 20552
20541: POP
// bc_type := b_bunker ; 27 :
20542: LD_ADDR_OWVAR 42
20546: PUSH
20547: LD_INT 32
20549: ST_TO_ADDR
20550: GO 20705
20552: LD_INT 27
20554: DOUBLE
20555: EQUAL
20556: IFTRUE 20560
20558: GO 20571
20560: POP
// bc_type := b_turret ; 28 :
20561: LD_ADDR_OWVAR 42
20565: PUSH
20566: LD_INT 33
20568: ST_TO_ADDR
20569: GO 20705
20571: LD_INT 28
20573: DOUBLE
20574: EQUAL
20575: IFTRUE 20579
20577: GO 20590
20579: POP
// bc_type := b_armoury ; 29 :
20580: LD_ADDR_OWVAR 42
20584: PUSH
20585: LD_INT 4
20587: ST_TO_ADDR
20588: GO 20705
20590: LD_INT 29
20592: DOUBLE
20593: EQUAL
20594: IFTRUE 20598
20596: GO 20609
20598: POP
// bc_type := b_barracks ; 30 :
20599: LD_ADDR_OWVAR 42
20603: PUSH
20604: LD_INT 5
20606: ST_TO_ADDR
20607: GO 20705
20609: LD_INT 30
20611: DOUBLE
20612: EQUAL
20613: IFTRUE 20617
20615: GO 20628
20617: POP
// bc_type := b_solar_power ; 31 :
20618: LD_ADDR_OWVAR 42
20622: PUSH
20623: LD_INT 27
20625: ST_TO_ADDR
20626: GO 20705
20628: LD_INT 31
20630: DOUBLE
20631: EQUAL
20632: IFTRUE 20636
20634: GO 20647
20636: POP
// bc_type := b_oil_power ; 32 :
20637: LD_ADDR_OWVAR 42
20641: PUSH
20642: LD_INT 26
20644: ST_TO_ADDR
20645: GO 20705
20647: LD_INT 32
20649: DOUBLE
20650: EQUAL
20651: IFTRUE 20655
20653: GO 20666
20655: POP
// bc_type := b_siberite_power ; 33 :
20656: LD_ADDR_OWVAR 42
20660: PUSH
20661: LD_INT 28
20663: ST_TO_ADDR
20664: GO 20705
20666: LD_INT 33
20668: DOUBLE
20669: EQUAL
20670: IFTRUE 20674
20672: GO 20685
20674: POP
// bc_type := b_oil_mine ; 34 :
20675: LD_ADDR_OWVAR 42
20679: PUSH
20680: LD_INT 29
20682: ST_TO_ADDR
20683: GO 20705
20685: LD_INT 34
20687: DOUBLE
20688: EQUAL
20689: IFTRUE 20693
20691: GO 20704
20693: POP
// bc_type := b_siberite_mine ; end ;
20694: LD_ADDR_OWVAR 42
20698: PUSH
20699: LD_INT 30
20701: ST_TO_ADDR
20702: GO 20705
20704: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20705: LD_ADDR_VAR 0 8
20709: PUSH
20710: LD_VAR 0 5
20714: PPUSH
20715: LD_VAR 0 6
20719: PPUSH
20720: LD_VAR 0 3
20724: PPUSH
20725: CALL_OW 47
20729: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20730: LD_OWVAR 42
20734: PUSH
20735: LD_INT 32
20737: PUSH
20738: LD_INT 33
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: IN
20745: IFFALSE 20761
// PlaceWeaponTurret ( b , weapon ) ;
20747: LD_VAR 0 8
20751: PPUSH
20752: LD_VAR 0 4
20756: PPUSH
20757: CALL_OW 431
// end ;
20761: LD_VAR 0 7
20765: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20766: LD_INT 0
20768: PPUSH
20769: PPUSH
20770: PPUSH
20771: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20772: LD_ADDR_VAR 0 4
20776: PUSH
20777: LD_INT 22
20779: PUSH
20780: LD_OWVAR 2
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 2
20791: PUSH
20792: LD_INT 30
20794: PUSH
20795: LD_INT 0
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 30
20804: PUSH
20805: LD_INT 1
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PPUSH
20821: CALL_OW 69
20825: ST_TO_ADDR
// if not tmp then
20826: LD_VAR 0 4
20830: NOT
20831: IFFALSE 20835
// exit ;
20833: GO 20894
// for i in tmp do
20835: LD_ADDR_VAR 0 2
20839: PUSH
20840: LD_VAR 0 4
20844: PUSH
20845: FOR_IN
20846: IFFALSE 20892
// for j = 1 to 3 do
20848: LD_ADDR_VAR 0 3
20852: PUSH
20853: DOUBLE
20854: LD_INT 1
20856: DEC
20857: ST_TO_ADDR
20858: LD_INT 3
20860: PUSH
20861: FOR_TO
20862: IFFALSE 20888
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20864: LD_VAR 0 2
20868: PPUSH
20869: CALL_OW 274
20873: PPUSH
20874: LD_VAR 0 3
20878: PPUSH
20879: LD_INT 99999
20881: PPUSH
20882: CALL_OW 277
20886: GO 20861
20888: POP
20889: POP
20890: GO 20845
20892: POP
20893: POP
// end ;
20894: LD_VAR 0 1
20898: RET
// export function hHackSetLevel10 ; var i , j ; begin
20899: LD_INT 0
20901: PPUSH
20902: PPUSH
20903: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20904: LD_ADDR_VAR 0 2
20908: PUSH
20909: LD_INT 21
20911: PUSH
20912: LD_INT 1
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PPUSH
20919: CALL_OW 69
20923: PUSH
20924: FOR_IN
20925: IFFALSE 20977
// if IsSelected ( i ) then
20927: LD_VAR 0 2
20931: PPUSH
20932: CALL_OW 306
20936: IFFALSE 20975
// begin for j := 1 to 4 do
20938: LD_ADDR_VAR 0 3
20942: PUSH
20943: DOUBLE
20944: LD_INT 1
20946: DEC
20947: ST_TO_ADDR
20948: LD_INT 4
20950: PUSH
20951: FOR_TO
20952: IFFALSE 20973
// SetSkill ( i , j , 10 ) ;
20954: LD_VAR 0 2
20958: PPUSH
20959: LD_VAR 0 3
20963: PPUSH
20964: LD_INT 10
20966: PPUSH
20967: CALL_OW 237
20971: GO 20951
20973: POP
20974: POP
// end ;
20975: GO 20924
20977: POP
20978: POP
// end ;
20979: LD_VAR 0 1
20983: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20984: LD_INT 0
20986: PPUSH
20987: PPUSH
20988: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20989: LD_ADDR_VAR 0 2
20993: PUSH
20994: LD_INT 22
20996: PUSH
20997: LD_OWVAR 2
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 21
21008: PUSH
21009: LD_INT 1
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PPUSH
21020: CALL_OW 69
21024: PUSH
21025: FOR_IN
21026: IFFALSE 21067
// begin for j := 1 to 4 do
21028: LD_ADDR_VAR 0 3
21032: PUSH
21033: DOUBLE
21034: LD_INT 1
21036: DEC
21037: ST_TO_ADDR
21038: LD_INT 4
21040: PUSH
21041: FOR_TO
21042: IFFALSE 21063
// SetSkill ( i , j , 10 ) ;
21044: LD_VAR 0 2
21048: PPUSH
21049: LD_VAR 0 3
21053: PPUSH
21054: LD_INT 10
21056: PPUSH
21057: CALL_OW 237
21061: GO 21041
21063: POP
21064: POP
// end ;
21065: GO 21025
21067: POP
21068: POP
// end ;
21069: LD_VAR 0 1
21073: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21074: LD_INT 0
21076: PPUSH
// uc_side := your_side ;
21077: LD_ADDR_OWVAR 20
21081: PUSH
21082: LD_OWVAR 2
21086: ST_TO_ADDR
// uc_nation := nation ;
21087: LD_ADDR_OWVAR 21
21091: PUSH
21092: LD_VAR 0 1
21096: ST_TO_ADDR
// InitHc ;
21097: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21101: LD_INT 0
21103: PPUSH
21104: LD_VAR 0 2
21108: PPUSH
21109: LD_VAR 0 3
21113: PPUSH
21114: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21118: LD_VAR 0 4
21122: PPUSH
21123: LD_VAR 0 5
21127: PPUSH
21128: CALL_OW 428
21132: PUSH
21133: LD_INT 0
21135: EQUAL
21136: IFFALSE 21160
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21138: CALL_OW 44
21142: PPUSH
21143: LD_VAR 0 4
21147: PPUSH
21148: LD_VAR 0 5
21152: PPUSH
21153: LD_INT 1
21155: PPUSH
21156: CALL_OW 48
// end ;
21160: LD_VAR 0 6
21164: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21165: LD_INT 0
21167: PPUSH
21168: PPUSH
// uc_side := your_side ;
21169: LD_ADDR_OWVAR 20
21173: PUSH
21174: LD_OWVAR 2
21178: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21179: LD_VAR 0 1
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: LD_INT 2
21189: PUSH
21190: LD_INT 3
21192: PUSH
21193: LD_INT 4
21195: PUSH
21196: LD_INT 5
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: IN
21206: IFFALSE 21218
// uc_nation := nation_american else
21208: LD_ADDR_OWVAR 21
21212: PUSH
21213: LD_INT 1
21215: ST_TO_ADDR
21216: GO 21261
// if chassis in [ 11 , 12 , 13 , 14 ] then
21218: LD_VAR 0 1
21222: PUSH
21223: LD_INT 11
21225: PUSH
21226: LD_INT 12
21228: PUSH
21229: LD_INT 13
21231: PUSH
21232: LD_INT 14
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: IN
21241: IFFALSE 21253
// uc_nation := nation_arabian else
21243: LD_ADDR_OWVAR 21
21247: PUSH
21248: LD_INT 2
21250: ST_TO_ADDR
21251: GO 21261
// uc_nation := nation_russian ;
21253: LD_ADDR_OWVAR 21
21257: PUSH
21258: LD_INT 3
21260: ST_TO_ADDR
// vc_chassis := chassis ;
21261: LD_ADDR_OWVAR 37
21265: PUSH
21266: LD_VAR 0 1
21270: ST_TO_ADDR
// vc_engine := engine ;
21271: LD_ADDR_OWVAR 39
21275: PUSH
21276: LD_VAR 0 2
21280: ST_TO_ADDR
// vc_control := control ;
21281: LD_ADDR_OWVAR 38
21285: PUSH
21286: LD_VAR 0 3
21290: ST_TO_ADDR
// vc_weapon := weapon ;
21291: LD_ADDR_OWVAR 40
21295: PUSH
21296: LD_VAR 0 4
21300: ST_TO_ADDR
// un := CreateVehicle ;
21301: LD_ADDR_VAR 0 8
21305: PUSH
21306: CALL_OW 45
21310: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21311: LD_VAR 0 8
21315: PPUSH
21316: LD_INT 0
21318: PPUSH
21319: LD_INT 5
21321: PPUSH
21322: CALL_OW 12
21326: PPUSH
21327: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21331: LD_VAR 0 8
21335: PPUSH
21336: LD_VAR 0 5
21340: PPUSH
21341: LD_VAR 0 6
21345: PPUSH
21346: LD_INT 1
21348: PPUSH
21349: CALL_OW 48
// end ;
21353: LD_VAR 0 7
21357: RET
// export hInvincible ; every 1 do
21358: GO 21360
21360: DISABLE
// hInvincible := [ ] ;
21361: LD_ADDR_EXP 82
21365: PUSH
21366: EMPTY
21367: ST_TO_ADDR
21368: END
// every 10 do var i ;
21369: GO 21371
21371: DISABLE
21372: LD_INT 0
21374: PPUSH
// begin enable ;
21375: ENABLE
// if not hInvincible then
21376: LD_EXP 82
21380: NOT
21381: IFFALSE 21385
// exit ;
21383: GO 21429
// for i in hInvincible do
21385: LD_ADDR_VAR 0 1
21389: PUSH
21390: LD_EXP 82
21394: PUSH
21395: FOR_IN
21396: IFFALSE 21427
// if GetLives ( i ) < 1000 then
21398: LD_VAR 0 1
21402: PPUSH
21403: CALL_OW 256
21407: PUSH
21408: LD_INT 1000
21410: LESS
21411: IFFALSE 21425
// SetLives ( i , 1000 ) ;
21413: LD_VAR 0 1
21417: PPUSH
21418: LD_INT 1000
21420: PPUSH
21421: CALL_OW 234
21425: GO 21395
21427: POP
21428: POP
// end ;
21429: PPOPN 1
21431: END
// export function hHackInvincible ; var i ; begin
21432: LD_INT 0
21434: PPUSH
21435: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21436: LD_ADDR_VAR 0 2
21440: PUSH
21441: LD_INT 2
21443: PUSH
21444: LD_INT 21
21446: PUSH
21447: LD_INT 1
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 21
21456: PUSH
21457: LD_INT 2
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: LIST
21468: PPUSH
21469: CALL_OW 69
21473: PUSH
21474: FOR_IN
21475: IFFALSE 21536
// if IsSelected ( i ) then
21477: LD_VAR 0 2
21481: PPUSH
21482: CALL_OW 306
21486: IFFALSE 21534
// begin if i in hInvincible then
21488: LD_VAR 0 2
21492: PUSH
21493: LD_EXP 82
21497: IN
21498: IFFALSE 21518
// hInvincible := hInvincible diff i else
21500: LD_ADDR_EXP 82
21504: PUSH
21505: LD_EXP 82
21509: PUSH
21510: LD_VAR 0 2
21514: DIFF
21515: ST_TO_ADDR
21516: GO 21534
// hInvincible := hInvincible union i ;
21518: LD_ADDR_EXP 82
21522: PUSH
21523: LD_EXP 82
21527: PUSH
21528: LD_VAR 0 2
21532: UNION
21533: ST_TO_ADDR
// end ;
21534: GO 21474
21536: POP
21537: POP
// end ;
21538: LD_VAR 0 1
21542: RET
// export function hHackInvisible ; var i , j ; begin
21543: LD_INT 0
21545: PPUSH
21546: PPUSH
21547: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21548: LD_ADDR_VAR 0 2
21552: PUSH
21553: LD_INT 21
21555: PUSH
21556: LD_INT 1
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PPUSH
21563: CALL_OW 69
21567: PUSH
21568: FOR_IN
21569: IFFALSE 21593
// if IsSelected ( i ) then
21571: LD_VAR 0 2
21575: PPUSH
21576: CALL_OW 306
21580: IFFALSE 21591
// ComForceInvisible ( i ) ;
21582: LD_VAR 0 2
21586: PPUSH
21587: CALL_OW 496
21591: GO 21568
21593: POP
21594: POP
// end ;
21595: LD_VAR 0 1
21599: RET
// export function hHackChangeYourSide ; begin
21600: LD_INT 0
21602: PPUSH
// if your_side = 8 then
21603: LD_OWVAR 2
21607: PUSH
21608: LD_INT 8
21610: EQUAL
21611: IFFALSE 21623
// your_side := 0 else
21613: LD_ADDR_OWVAR 2
21617: PUSH
21618: LD_INT 0
21620: ST_TO_ADDR
21621: GO 21637
// your_side := your_side + 1 ;
21623: LD_ADDR_OWVAR 2
21627: PUSH
21628: LD_OWVAR 2
21632: PUSH
21633: LD_INT 1
21635: PLUS
21636: ST_TO_ADDR
// end ;
21637: LD_VAR 0 1
21641: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21642: LD_INT 0
21644: PPUSH
21645: PPUSH
21646: PPUSH
// for i in all_units do
21647: LD_ADDR_VAR 0 2
21651: PUSH
21652: LD_OWVAR 3
21656: PUSH
21657: FOR_IN
21658: IFFALSE 21736
// if IsSelected ( i ) then
21660: LD_VAR 0 2
21664: PPUSH
21665: CALL_OW 306
21669: IFFALSE 21734
// begin j := GetSide ( i ) ;
21671: LD_ADDR_VAR 0 3
21675: PUSH
21676: LD_VAR 0 2
21680: PPUSH
21681: CALL_OW 255
21685: ST_TO_ADDR
// if j = 8 then
21686: LD_VAR 0 3
21690: PUSH
21691: LD_INT 8
21693: EQUAL
21694: IFFALSE 21706
// j := 0 else
21696: LD_ADDR_VAR 0 3
21700: PUSH
21701: LD_INT 0
21703: ST_TO_ADDR
21704: GO 21720
// j := j + 1 ;
21706: LD_ADDR_VAR 0 3
21710: PUSH
21711: LD_VAR 0 3
21715: PUSH
21716: LD_INT 1
21718: PLUS
21719: ST_TO_ADDR
// SetSide ( i , j ) ;
21720: LD_VAR 0 2
21724: PPUSH
21725: LD_VAR 0 3
21729: PPUSH
21730: CALL_OW 235
// end ;
21734: GO 21657
21736: POP
21737: POP
// end ;
21738: LD_VAR 0 1
21742: RET
// export function hHackFog ; begin
21743: LD_INT 0
21745: PPUSH
// FogOff ( true ) ;
21746: LD_INT 1
21748: PPUSH
21749: CALL_OW 344
// end ;
21753: LD_VAR 0 1
21757: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21758: LD_INT 0
21760: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21761: LD_VAR 0 1
21765: PPUSH
21766: LD_VAR 0 2
21770: PPUSH
21771: LD_VAR 0 3
21775: PPUSH
21776: LD_INT 1
21778: PPUSH
21779: LD_INT 1
21781: PPUSH
21782: CALL_OW 483
// CenterOnXY ( x , y ) ;
21786: LD_VAR 0 2
21790: PPUSH
21791: LD_VAR 0 3
21795: PPUSH
21796: CALL_OW 84
// end ;
21800: LD_VAR 0 4
21804: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21805: LD_INT 0
21807: PPUSH
21808: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21809: LD_VAR 0 1
21813: NOT
21814: PUSH
21815: LD_VAR 0 2
21819: PPUSH
21820: LD_VAR 0 3
21824: PPUSH
21825: CALL_OW 488
21829: NOT
21830: OR
21831: PUSH
21832: LD_VAR 0 1
21836: PPUSH
21837: CALL_OW 266
21841: PUSH
21842: LD_INT 3
21844: NONEQUAL
21845: PUSH
21846: LD_VAR 0 1
21850: PPUSH
21851: CALL_OW 247
21855: PUSH
21856: LD_INT 1
21858: EQUAL
21859: NOT
21860: AND
21861: OR
21862: IFFALSE 21866
// exit ;
21864: GO 22015
// if GetType ( factory ) = unit_human then
21866: LD_VAR 0 1
21870: PPUSH
21871: CALL_OW 247
21875: PUSH
21876: LD_INT 1
21878: EQUAL
21879: IFFALSE 21896
// factory := IsInUnit ( factory ) ;
21881: LD_ADDR_VAR 0 1
21885: PUSH
21886: LD_VAR 0 1
21890: PPUSH
21891: CALL_OW 310
21895: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21896: LD_VAR 0 1
21900: PPUSH
21901: CALL_OW 266
21905: PUSH
21906: LD_INT 3
21908: NONEQUAL
21909: IFFALSE 21913
// exit ;
21911: GO 22015
// if HexInfo ( x , y ) = factory then
21913: LD_VAR 0 2
21917: PPUSH
21918: LD_VAR 0 3
21922: PPUSH
21923: CALL_OW 428
21927: PUSH
21928: LD_VAR 0 1
21932: EQUAL
21933: IFFALSE 21960
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21935: LD_ADDR_EXP 83
21939: PUSH
21940: LD_EXP 83
21944: PPUSH
21945: LD_VAR 0 1
21949: PPUSH
21950: LD_INT 0
21952: PPUSH
21953: CALL_OW 1
21957: ST_TO_ADDR
21958: GO 22011
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21960: LD_ADDR_EXP 83
21964: PUSH
21965: LD_EXP 83
21969: PPUSH
21970: LD_VAR 0 1
21974: PPUSH
21975: LD_VAR 0 1
21979: PPUSH
21980: CALL_OW 255
21984: PUSH
21985: LD_VAR 0 1
21989: PUSH
21990: LD_VAR 0 2
21994: PUSH
21995: LD_VAR 0 3
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: PPUSH
22006: CALL_OW 1
22010: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22011: CALL 22020 0 0
// end ;
22015: LD_VAR 0 4
22019: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22020: LD_INT 0
22022: PPUSH
22023: PPUSH
22024: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22025: LD_STRING resetFactoryWaypoint();
22027: PPUSH
22028: CALL_OW 559
// if factoryWaypoints then
22032: LD_EXP 83
22036: IFFALSE 22162
// begin list := PrepareArray ( factoryWaypoints ) ;
22038: LD_ADDR_VAR 0 3
22042: PUSH
22043: LD_EXP 83
22047: PPUSH
22048: CALL 69304 0 1
22052: ST_TO_ADDR
// for i := 1 to list do
22053: LD_ADDR_VAR 0 2
22057: PUSH
22058: DOUBLE
22059: LD_INT 1
22061: DEC
22062: ST_TO_ADDR
22063: LD_VAR 0 3
22067: PUSH
22068: FOR_TO
22069: IFFALSE 22160
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22071: LD_STRING setFactoryWaypointXY(
22073: PUSH
22074: LD_VAR 0 3
22078: PUSH
22079: LD_VAR 0 2
22083: ARRAY
22084: PUSH
22085: LD_INT 1
22087: ARRAY
22088: STR
22089: PUSH
22090: LD_STRING ,
22092: STR
22093: PUSH
22094: LD_VAR 0 3
22098: PUSH
22099: LD_VAR 0 2
22103: ARRAY
22104: PUSH
22105: LD_INT 2
22107: ARRAY
22108: STR
22109: PUSH
22110: LD_STRING ,
22112: STR
22113: PUSH
22114: LD_VAR 0 3
22118: PUSH
22119: LD_VAR 0 2
22123: ARRAY
22124: PUSH
22125: LD_INT 3
22127: ARRAY
22128: STR
22129: PUSH
22130: LD_STRING ,
22132: STR
22133: PUSH
22134: LD_VAR 0 3
22138: PUSH
22139: LD_VAR 0 2
22143: ARRAY
22144: PUSH
22145: LD_INT 4
22147: ARRAY
22148: STR
22149: PUSH
22150: LD_STRING )
22152: STR
22153: PPUSH
22154: CALL_OW 559
22158: GO 22068
22160: POP
22161: POP
// end ; end ;
22162: LD_VAR 0 1
22166: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22167: LD_INT 0
22169: PPUSH
// if HexInfo ( x , y ) = warehouse then
22170: LD_VAR 0 2
22174: PPUSH
22175: LD_VAR 0 3
22179: PPUSH
22180: CALL_OW 428
22184: PUSH
22185: LD_VAR 0 1
22189: EQUAL
22190: IFFALSE 22217
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22192: LD_ADDR_EXP 84
22196: PUSH
22197: LD_EXP 84
22201: PPUSH
22202: LD_VAR 0 1
22206: PPUSH
22207: LD_INT 0
22209: PPUSH
22210: CALL_OW 1
22214: ST_TO_ADDR
22215: GO 22268
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22217: LD_ADDR_EXP 84
22221: PUSH
22222: LD_EXP 84
22226: PPUSH
22227: LD_VAR 0 1
22231: PPUSH
22232: LD_VAR 0 1
22236: PPUSH
22237: CALL_OW 255
22241: PUSH
22242: LD_VAR 0 1
22246: PUSH
22247: LD_VAR 0 2
22251: PUSH
22252: LD_VAR 0 3
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: PPUSH
22263: CALL_OW 1
22267: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22268: CALL 22277 0 0
// end ;
22272: LD_VAR 0 4
22276: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22277: LD_INT 0
22279: PPUSH
22280: PPUSH
22281: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22282: LD_STRING resetWarehouseGatheringPoints();
22284: PPUSH
22285: CALL_OW 559
// if warehouseGatheringPoints then
22289: LD_EXP 84
22293: IFFALSE 22419
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22295: LD_ADDR_VAR 0 3
22299: PUSH
22300: LD_EXP 84
22304: PPUSH
22305: CALL 69304 0 1
22309: ST_TO_ADDR
// for i := 1 to list do
22310: LD_ADDR_VAR 0 2
22314: PUSH
22315: DOUBLE
22316: LD_INT 1
22318: DEC
22319: ST_TO_ADDR
22320: LD_VAR 0 3
22324: PUSH
22325: FOR_TO
22326: IFFALSE 22417
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22328: LD_STRING setWarehouseGatheringPointXY(
22330: PUSH
22331: LD_VAR 0 3
22335: PUSH
22336: LD_VAR 0 2
22340: ARRAY
22341: PUSH
22342: LD_INT 1
22344: ARRAY
22345: STR
22346: PUSH
22347: LD_STRING ,
22349: STR
22350: PUSH
22351: LD_VAR 0 3
22355: PUSH
22356: LD_VAR 0 2
22360: ARRAY
22361: PUSH
22362: LD_INT 2
22364: ARRAY
22365: STR
22366: PUSH
22367: LD_STRING ,
22369: STR
22370: PUSH
22371: LD_VAR 0 3
22375: PUSH
22376: LD_VAR 0 2
22380: ARRAY
22381: PUSH
22382: LD_INT 3
22384: ARRAY
22385: STR
22386: PUSH
22387: LD_STRING ,
22389: STR
22390: PUSH
22391: LD_VAR 0 3
22395: PUSH
22396: LD_VAR 0 2
22400: ARRAY
22401: PUSH
22402: LD_INT 4
22404: ARRAY
22405: STR
22406: PUSH
22407: LD_STRING )
22409: STR
22410: PPUSH
22411: CALL_OW 559
22415: GO 22325
22417: POP
22418: POP
// end ; end ;
22419: LD_VAR 0 1
22423: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22424: LD_EXP 84
22428: IFFALSE 23113
22430: GO 22432
22432: DISABLE
22433: LD_INT 0
22435: PPUSH
22436: PPUSH
22437: PPUSH
22438: PPUSH
22439: PPUSH
22440: PPUSH
22441: PPUSH
22442: PPUSH
22443: PPUSH
// begin enable ;
22444: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22445: LD_ADDR_VAR 0 3
22449: PUSH
22450: LD_EXP 84
22454: PPUSH
22455: CALL 69304 0 1
22459: ST_TO_ADDR
// if not list then
22460: LD_VAR 0 3
22464: NOT
22465: IFFALSE 22469
// exit ;
22467: GO 23113
// for i := 1 to list do
22469: LD_ADDR_VAR 0 1
22473: PUSH
22474: DOUBLE
22475: LD_INT 1
22477: DEC
22478: ST_TO_ADDR
22479: LD_VAR 0 3
22483: PUSH
22484: FOR_TO
22485: IFFALSE 23111
// begin depot := list [ i ] [ 2 ] ;
22487: LD_ADDR_VAR 0 8
22491: PUSH
22492: LD_VAR 0 3
22496: PUSH
22497: LD_VAR 0 1
22501: ARRAY
22502: PUSH
22503: LD_INT 2
22505: ARRAY
22506: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22507: LD_ADDR_VAR 0 5
22511: PUSH
22512: LD_VAR 0 3
22516: PUSH
22517: LD_VAR 0 1
22521: ARRAY
22522: PUSH
22523: LD_INT 1
22525: ARRAY
22526: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22527: LD_VAR 0 8
22531: PPUSH
22532: CALL_OW 301
22536: PUSH
22537: LD_VAR 0 5
22541: PUSH
22542: LD_VAR 0 8
22546: PPUSH
22547: CALL_OW 255
22551: NONEQUAL
22552: OR
22553: IFFALSE 22582
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22555: LD_ADDR_EXP 84
22559: PUSH
22560: LD_EXP 84
22564: PPUSH
22565: LD_VAR 0 8
22569: PPUSH
22570: LD_INT 0
22572: PPUSH
22573: CALL_OW 1
22577: ST_TO_ADDR
// exit ;
22578: POP
22579: POP
22580: GO 23113
// end ; x := list [ i ] [ 3 ] ;
22582: LD_ADDR_VAR 0 6
22586: PUSH
22587: LD_VAR 0 3
22591: PUSH
22592: LD_VAR 0 1
22596: ARRAY
22597: PUSH
22598: LD_INT 3
22600: ARRAY
22601: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22602: LD_ADDR_VAR 0 7
22606: PUSH
22607: LD_VAR 0 3
22611: PUSH
22612: LD_VAR 0 1
22616: ARRAY
22617: PUSH
22618: LD_INT 4
22620: ARRAY
22621: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22622: LD_ADDR_VAR 0 9
22626: PUSH
22627: LD_VAR 0 6
22631: PPUSH
22632: LD_VAR 0 7
22636: PPUSH
22637: LD_INT 16
22639: PPUSH
22640: CALL 67892 0 3
22644: ST_TO_ADDR
// if not cratesNearbyPoint then
22645: LD_VAR 0 9
22649: NOT
22650: IFFALSE 22656
// exit ;
22652: POP
22653: POP
22654: GO 23113
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22656: LD_ADDR_VAR 0 4
22660: PUSH
22661: LD_INT 22
22663: PUSH
22664: LD_VAR 0 5
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 3
22675: PUSH
22676: LD_INT 60
22678: PUSH
22679: EMPTY
22680: LIST
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 91
22688: PUSH
22689: LD_VAR 0 8
22693: PUSH
22694: LD_INT 6
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 2
22704: PUSH
22705: LD_INT 25
22707: PUSH
22708: LD_INT 2
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 25
22717: PUSH
22718: LD_INT 16
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: LIST
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: PPUSH
22736: CALL_OW 69
22740: PUSH
22741: LD_VAR 0 8
22745: PPUSH
22746: CALL_OW 313
22750: PPUSH
22751: LD_INT 3
22753: PUSH
22754: LD_INT 60
22756: PUSH
22757: EMPTY
22758: LIST
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 2
22766: PUSH
22767: LD_INT 25
22769: PUSH
22770: LD_INT 2
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 25
22779: PUSH
22780: LD_INT 16
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: LIST
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PPUSH
22796: CALL_OW 72
22800: UNION
22801: ST_TO_ADDR
// if tmp then
22802: LD_VAR 0 4
22806: IFFALSE 22886
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22808: LD_ADDR_VAR 0 4
22812: PUSH
22813: LD_VAR 0 4
22817: PPUSH
22818: LD_INT 3
22820: PPUSH
22821: CALL 65861 0 2
22825: ST_TO_ADDR
// for j in tmp do
22826: LD_ADDR_VAR 0 2
22830: PUSH
22831: LD_VAR 0 4
22835: PUSH
22836: FOR_IN
22837: IFFALSE 22880
// begin if IsInUnit ( j ) then
22839: LD_VAR 0 2
22843: PPUSH
22844: CALL_OW 310
22848: IFFALSE 22859
// ComExit ( j ) ;
22850: LD_VAR 0 2
22854: PPUSH
22855: CALL 65944 0 1
// AddComCollect ( j , x , y ) ;
22859: LD_VAR 0 2
22863: PPUSH
22864: LD_VAR 0 6
22868: PPUSH
22869: LD_VAR 0 7
22873: PPUSH
22874: CALL_OW 177
// end ;
22878: GO 22836
22880: POP
22881: POP
// exit ;
22882: POP
22883: POP
22884: GO 23113
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22886: LD_ADDR_VAR 0 4
22890: PUSH
22891: LD_INT 22
22893: PUSH
22894: LD_VAR 0 5
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 91
22905: PUSH
22906: LD_VAR 0 8
22910: PUSH
22911: LD_INT 8
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 2
22921: PUSH
22922: LD_INT 34
22924: PUSH
22925: LD_INT 12
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 34
22934: PUSH
22935: LD_INT 51
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 34
22944: PUSH
22945: LD_INT 32
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 34
22954: PUSH
22955: LD_INT 89
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: LIST
22973: PPUSH
22974: CALL_OW 69
22978: ST_TO_ADDR
// if tmp then
22979: LD_VAR 0 4
22983: IFFALSE 23109
// begin for j in tmp do
22985: LD_ADDR_VAR 0 2
22989: PUSH
22990: LD_VAR 0 4
22994: PUSH
22995: FOR_IN
22996: IFFALSE 23107
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22998: LD_VAR 0 2
23002: PPUSH
23003: CALL_OW 262
23007: PUSH
23008: LD_INT 3
23010: EQUAL
23011: PUSH
23012: LD_VAR 0 2
23016: PPUSH
23017: CALL_OW 261
23021: PUSH
23022: LD_INT 20
23024: GREATER
23025: OR
23026: PUSH
23027: LD_VAR 0 2
23031: PPUSH
23032: CALL_OW 314
23036: NOT
23037: AND
23038: PUSH
23039: LD_VAR 0 2
23043: PPUSH
23044: CALL_OW 263
23048: PUSH
23049: LD_INT 1
23051: NONEQUAL
23052: PUSH
23053: LD_VAR 0 2
23057: PPUSH
23058: CALL_OW 311
23062: OR
23063: AND
23064: IFFALSE 23105
// begin ComCollect ( j , x , y ) ;
23066: LD_VAR 0 2
23070: PPUSH
23071: LD_VAR 0 6
23075: PPUSH
23076: LD_VAR 0 7
23080: PPUSH
23081: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23085: LD_VAR 0 2
23089: PPUSH
23090: LD_VAR 0 8
23094: PPUSH
23095: CALL_OW 172
// exit ;
23099: POP
23100: POP
23101: POP
23102: POP
23103: GO 23113
// end ;
23105: GO 22995
23107: POP
23108: POP
// end ; end ;
23109: GO 22484
23111: POP
23112: POP
// end ; end_of_file
23113: PPOPN 9
23115: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23116: LD_INT 0
23118: PPUSH
23119: PPUSH
23120: PPUSH
23121: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23122: LD_VAR 0 1
23126: PPUSH
23127: CALL_OW 264
23131: PUSH
23132: LD_INT 91
23134: EQUAL
23135: IFFALSE 23207
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23137: LD_INT 68
23139: PPUSH
23140: LD_VAR 0 1
23144: PPUSH
23145: CALL_OW 255
23149: PPUSH
23150: CALL_OW 321
23154: PUSH
23155: LD_INT 2
23157: EQUAL
23158: IFFALSE 23170
// eff := 70 else
23160: LD_ADDR_VAR 0 4
23164: PUSH
23165: LD_INT 70
23167: ST_TO_ADDR
23168: GO 23178
// eff := 30 ;
23170: LD_ADDR_VAR 0 4
23174: PUSH
23175: LD_INT 30
23177: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23178: LD_VAR 0 1
23182: PPUSH
23183: CALL_OW 250
23187: PPUSH
23188: LD_VAR 0 1
23192: PPUSH
23193: CALL_OW 251
23197: PPUSH
23198: LD_VAR 0 4
23202: PPUSH
23203: CALL_OW 495
// end ; end ;
23207: LD_VAR 0 2
23211: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23212: LD_INT 0
23214: PPUSH
// end ;
23215: LD_VAR 0 4
23219: RET
// export function SOS_Command ( cmd ) ; begin
23220: LD_INT 0
23222: PPUSH
// end ;
23223: LD_VAR 0 2
23227: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23228: LD_INT 0
23230: PPUSH
// end ;
23231: LD_VAR 0 6
23235: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
23236: LD_INT 0
23238: PPUSH
23239: PPUSH
// if not vehicle or not factory then
23240: LD_VAR 0 1
23244: NOT
23245: PUSH
23246: LD_VAR 0 2
23250: NOT
23251: OR
23252: IFFALSE 23256
// exit ;
23254: GO 23487
// if factoryWaypoints >= factory then
23256: LD_EXP 83
23260: PUSH
23261: LD_VAR 0 2
23265: GREATEREQUAL
23266: IFFALSE 23487
// if factoryWaypoints [ factory ] then
23268: LD_EXP 83
23272: PUSH
23273: LD_VAR 0 2
23277: ARRAY
23278: IFFALSE 23487
// begin if GetControl ( vehicle ) = control_manual then
23280: LD_VAR 0 1
23284: PPUSH
23285: CALL_OW 263
23289: PUSH
23290: LD_INT 1
23292: EQUAL
23293: IFFALSE 23374
// begin driver := IsDrivenBy ( vehicle ) ;
23295: LD_ADDR_VAR 0 4
23299: PUSH
23300: LD_VAR 0 1
23304: PPUSH
23305: CALL_OW 311
23309: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23310: LD_VAR 0 4
23314: PPUSH
23315: LD_EXP 83
23319: PUSH
23320: LD_VAR 0 2
23324: ARRAY
23325: PUSH
23326: LD_INT 3
23328: ARRAY
23329: PPUSH
23330: LD_EXP 83
23334: PUSH
23335: LD_VAR 0 2
23339: ARRAY
23340: PUSH
23341: LD_INT 4
23343: ARRAY
23344: PPUSH
23345: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23349: LD_VAR 0 4
23353: PPUSH
23354: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23358: LD_VAR 0 4
23362: PPUSH
23363: LD_VAR 0 2
23367: PPUSH
23368: CALL_OW 180
// end else
23372: GO 23487
// if GetControl ( vehicle ) = control_remote then
23374: LD_VAR 0 1
23378: PPUSH
23379: CALL_OW 263
23383: PUSH
23384: LD_INT 2
23386: EQUAL
23387: IFFALSE 23448
// begin wait ( 0 0$2 ) ;
23389: LD_INT 70
23391: PPUSH
23392: CALL_OW 67
// if Connect ( vehicle ) then
23396: LD_VAR 0 1
23400: PPUSH
23401: CALL 36152 0 1
23405: IFFALSE 23446
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23407: LD_VAR 0 1
23411: PPUSH
23412: LD_EXP 83
23416: PUSH
23417: LD_VAR 0 2
23421: ARRAY
23422: PUSH
23423: LD_INT 3
23425: ARRAY
23426: PPUSH
23427: LD_EXP 83
23431: PUSH
23432: LD_VAR 0 2
23436: ARRAY
23437: PUSH
23438: LD_INT 4
23440: ARRAY
23441: PPUSH
23442: CALL_OW 171
// end else
23446: GO 23487
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23448: LD_VAR 0 1
23452: PPUSH
23453: LD_EXP 83
23457: PUSH
23458: LD_VAR 0 2
23462: ARRAY
23463: PUSH
23464: LD_INT 3
23466: ARRAY
23467: PPUSH
23468: LD_EXP 83
23472: PUSH
23473: LD_VAR 0 2
23477: ARRAY
23478: PUSH
23479: LD_INT 4
23481: ARRAY
23482: PPUSH
23483: CALL_OW 171
// end ; end ;
23487: LD_VAR 0 3
23491: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23492: LD_INT 0
23494: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23495: LD_VAR 0 1
23499: PUSH
23500: LD_INT 250
23502: EQUAL
23503: PUSH
23504: LD_VAR 0 2
23508: PPUSH
23509: CALL_OW 264
23513: PUSH
23514: LD_INT 81
23516: EQUAL
23517: AND
23518: IFFALSE 23539
// MinerPlaceMine ( unit , x , y ) ;
23520: LD_VAR 0 2
23524: PPUSH
23525: LD_VAR 0 4
23529: PPUSH
23530: LD_VAR 0 5
23534: PPUSH
23535: CALL 26363 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23539: LD_VAR 0 1
23543: PUSH
23544: LD_INT 251
23546: EQUAL
23547: PUSH
23548: LD_VAR 0 2
23552: PPUSH
23553: CALL_OW 264
23557: PUSH
23558: LD_INT 81
23560: EQUAL
23561: AND
23562: IFFALSE 23583
// MinerDetonateMine ( unit , x , y ) ;
23564: LD_VAR 0 2
23568: PPUSH
23569: LD_VAR 0 4
23573: PPUSH
23574: LD_VAR 0 5
23578: PPUSH
23579: CALL 26638 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23583: LD_VAR 0 1
23587: PUSH
23588: LD_INT 252
23590: EQUAL
23591: PUSH
23592: LD_VAR 0 2
23596: PPUSH
23597: CALL_OW 264
23601: PUSH
23602: LD_INT 81
23604: EQUAL
23605: AND
23606: IFFALSE 23627
// MinerCreateMinefield ( unit , x , y ) ;
23608: LD_VAR 0 2
23612: PPUSH
23613: LD_VAR 0 4
23617: PPUSH
23618: LD_VAR 0 5
23622: PPUSH
23623: CALL 27055 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23627: LD_VAR 0 1
23631: PUSH
23632: LD_INT 253
23634: EQUAL
23635: PUSH
23636: LD_VAR 0 2
23640: PPUSH
23641: CALL_OW 257
23645: PUSH
23646: LD_INT 5
23648: EQUAL
23649: AND
23650: IFFALSE 23671
// ComBinocular ( unit , x , y ) ;
23652: LD_VAR 0 2
23656: PPUSH
23657: LD_VAR 0 4
23661: PPUSH
23662: LD_VAR 0 5
23666: PPUSH
23667: CALL 27424 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23671: LD_VAR 0 1
23675: PUSH
23676: LD_INT 254
23678: EQUAL
23679: PUSH
23680: LD_VAR 0 2
23684: PPUSH
23685: CALL_OW 264
23689: PUSH
23690: LD_INT 99
23692: EQUAL
23693: AND
23694: PUSH
23695: LD_VAR 0 3
23699: PPUSH
23700: CALL_OW 263
23704: PUSH
23705: LD_INT 3
23707: EQUAL
23708: AND
23709: IFFALSE 23725
// HackDestroyVehicle ( unit , selectedUnit ) ;
23711: LD_VAR 0 2
23715: PPUSH
23716: LD_VAR 0 3
23720: PPUSH
23721: CALL 25727 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23725: LD_VAR 0 1
23729: PUSH
23730: LD_INT 255
23732: EQUAL
23733: PUSH
23734: LD_VAR 0 2
23738: PPUSH
23739: CALL_OW 264
23743: PUSH
23744: LD_INT 14
23746: PUSH
23747: LD_INT 53
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: IN
23754: AND
23755: PUSH
23756: LD_VAR 0 4
23760: PPUSH
23761: LD_VAR 0 5
23765: PPUSH
23766: CALL_OW 488
23770: AND
23771: IFFALSE 23795
// CutTreeXYR ( unit , x , y , 12 ) ;
23773: LD_VAR 0 2
23777: PPUSH
23778: LD_VAR 0 4
23782: PPUSH
23783: LD_VAR 0 5
23787: PPUSH
23788: LD_INT 12
23790: PPUSH
23791: CALL 23890 0 4
// if cmd = 256 then
23795: LD_VAR 0 1
23799: PUSH
23800: LD_INT 256
23802: EQUAL
23803: IFFALSE 23824
// SetFactoryWaypoint ( unit , x , y ) ;
23805: LD_VAR 0 2
23809: PPUSH
23810: LD_VAR 0 4
23814: PPUSH
23815: LD_VAR 0 5
23819: PPUSH
23820: CALL 21805 0 3
// if cmd = 257 then
23824: LD_VAR 0 1
23828: PUSH
23829: LD_INT 257
23831: EQUAL
23832: IFFALSE 23853
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23834: LD_VAR 0 2
23838: PPUSH
23839: LD_VAR 0 4
23843: PPUSH
23844: LD_VAR 0 5
23848: PPUSH
23849: CALL 22167 0 3
// if cmd = 258 then
23853: LD_VAR 0 1
23857: PUSH
23858: LD_INT 258
23860: EQUAL
23861: IFFALSE 23885
// BurnTreeXYR ( unit , x , y , 8 ) ;
23863: LD_VAR 0 2
23867: PPUSH
23868: LD_VAR 0 4
23872: PPUSH
23873: LD_VAR 0 5
23877: PPUSH
23878: LD_INT 8
23880: PPUSH
23881: CALL 24284 0 4
// end ;
23885: LD_VAR 0 6
23889: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23890: LD_INT 0
23892: PPUSH
23893: PPUSH
23894: PPUSH
23895: PPUSH
23896: PPUSH
23897: PPUSH
23898: PPUSH
23899: PPUSH
23900: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
23901: LD_VAR 0 1
23905: PPUSH
23906: CALL_OW 302
23910: NOT
23911: PUSH
23912: LD_VAR 0 2
23916: PPUSH
23917: LD_VAR 0 3
23921: PPUSH
23922: CALL_OW 488
23926: NOT
23927: OR
23928: PUSH
23929: LD_VAR 0 4
23933: NOT
23934: OR
23935: IFFALSE 23939
// exit ;
23937: GO 24279
// list := [ ] ;
23939: LD_ADDR_VAR 0 13
23943: PUSH
23944: EMPTY
23945: ST_TO_ADDR
// if x - r < 0 then
23946: LD_VAR 0 2
23950: PUSH
23951: LD_VAR 0 4
23955: MINUS
23956: PUSH
23957: LD_INT 0
23959: LESS
23960: IFFALSE 23972
// min_x := 0 else
23962: LD_ADDR_VAR 0 7
23966: PUSH
23967: LD_INT 0
23969: ST_TO_ADDR
23970: GO 23988
// min_x := x - r ;
23972: LD_ADDR_VAR 0 7
23976: PUSH
23977: LD_VAR 0 2
23981: PUSH
23982: LD_VAR 0 4
23986: MINUS
23987: ST_TO_ADDR
// if y - r < 0 then
23988: LD_VAR 0 3
23992: PUSH
23993: LD_VAR 0 4
23997: MINUS
23998: PUSH
23999: LD_INT 0
24001: LESS
24002: IFFALSE 24014
// min_y := 0 else
24004: LD_ADDR_VAR 0 8
24008: PUSH
24009: LD_INT 0
24011: ST_TO_ADDR
24012: GO 24030
// min_y := y - r ;
24014: LD_ADDR_VAR 0 8
24018: PUSH
24019: LD_VAR 0 3
24023: PUSH
24024: LD_VAR 0 4
24028: MINUS
24029: ST_TO_ADDR
// max_x := x + r ;
24030: LD_ADDR_VAR 0 9
24034: PUSH
24035: LD_VAR 0 2
24039: PUSH
24040: LD_VAR 0 4
24044: PLUS
24045: ST_TO_ADDR
// max_y := y + r ;
24046: LD_ADDR_VAR 0 10
24050: PUSH
24051: LD_VAR 0 3
24055: PUSH
24056: LD_VAR 0 4
24060: PLUS
24061: ST_TO_ADDR
// for _x = min_x to max_x do
24062: LD_ADDR_VAR 0 11
24066: PUSH
24067: DOUBLE
24068: LD_VAR 0 7
24072: DEC
24073: ST_TO_ADDR
24074: LD_VAR 0 9
24078: PUSH
24079: FOR_TO
24080: IFFALSE 24197
// for _y = min_y to max_y do
24082: LD_ADDR_VAR 0 12
24086: PUSH
24087: DOUBLE
24088: LD_VAR 0 8
24092: DEC
24093: ST_TO_ADDR
24094: LD_VAR 0 10
24098: PUSH
24099: FOR_TO
24100: IFFALSE 24193
// begin if not ValidHex ( _x , _y ) then
24102: LD_VAR 0 11
24106: PPUSH
24107: LD_VAR 0 12
24111: PPUSH
24112: CALL_OW 488
24116: NOT
24117: IFFALSE 24121
// continue ;
24119: GO 24099
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24121: LD_VAR 0 11
24125: PPUSH
24126: LD_VAR 0 12
24130: PPUSH
24131: CALL_OW 351
24135: PUSH
24136: LD_VAR 0 11
24140: PPUSH
24141: LD_VAR 0 12
24145: PPUSH
24146: CALL_OW 554
24150: AND
24151: IFFALSE 24191
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24153: LD_ADDR_VAR 0 13
24157: PUSH
24158: LD_VAR 0 13
24162: PPUSH
24163: LD_VAR 0 13
24167: PUSH
24168: LD_INT 1
24170: PLUS
24171: PPUSH
24172: LD_VAR 0 11
24176: PUSH
24177: LD_VAR 0 12
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PPUSH
24186: CALL_OW 2
24190: ST_TO_ADDR
// end ;
24191: GO 24099
24193: POP
24194: POP
24195: GO 24079
24197: POP
24198: POP
// if not list then
24199: LD_VAR 0 13
24203: NOT
24204: IFFALSE 24208
// exit ;
24206: GO 24279
// for i in list do
24208: LD_ADDR_VAR 0 6
24212: PUSH
24213: LD_VAR 0 13
24217: PUSH
24218: FOR_IN
24219: IFFALSE 24277
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24221: LD_VAR 0 1
24225: PPUSH
24226: LD_STRING M
24228: PUSH
24229: LD_VAR 0 6
24233: PUSH
24234: LD_INT 1
24236: ARRAY
24237: PUSH
24238: LD_VAR 0 6
24242: PUSH
24243: LD_INT 2
24245: ARRAY
24246: PUSH
24247: LD_INT 0
24249: PUSH
24250: LD_INT 0
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: LD_INT 0
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: PUSH
24268: EMPTY
24269: LIST
24270: PPUSH
24271: CALL_OW 447
24275: GO 24218
24277: POP
24278: POP
// end ;
24279: LD_VAR 0 5
24283: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24284: LD_INT 0
24286: PPUSH
24287: PPUSH
24288: PPUSH
24289: PPUSH
24290: PPUSH
24291: PPUSH
24292: PPUSH
24293: PPUSH
24294: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
24295: LD_VAR 0 1
24299: PPUSH
24300: CALL_OW 302
24304: NOT
24305: PUSH
24306: LD_VAR 0 2
24310: PPUSH
24311: LD_VAR 0 3
24315: PPUSH
24316: CALL_OW 488
24320: NOT
24321: OR
24322: PUSH
24323: LD_VAR 0 4
24327: NOT
24328: OR
24329: IFFALSE 24333
// exit ;
24331: GO 24681
// list := [ ] ;
24333: LD_ADDR_VAR 0 13
24337: PUSH
24338: EMPTY
24339: ST_TO_ADDR
// if x - r < 0 then
24340: LD_VAR 0 2
24344: PUSH
24345: LD_VAR 0 4
24349: MINUS
24350: PUSH
24351: LD_INT 0
24353: LESS
24354: IFFALSE 24366
// min_x := 0 else
24356: LD_ADDR_VAR 0 7
24360: PUSH
24361: LD_INT 0
24363: ST_TO_ADDR
24364: GO 24382
// min_x := x - r ;
24366: LD_ADDR_VAR 0 7
24370: PUSH
24371: LD_VAR 0 2
24375: PUSH
24376: LD_VAR 0 4
24380: MINUS
24381: ST_TO_ADDR
// if y - r < 0 then
24382: LD_VAR 0 3
24386: PUSH
24387: LD_VAR 0 4
24391: MINUS
24392: PUSH
24393: LD_INT 0
24395: LESS
24396: IFFALSE 24408
// min_y := 0 else
24398: LD_ADDR_VAR 0 8
24402: PUSH
24403: LD_INT 0
24405: ST_TO_ADDR
24406: GO 24424
// min_y := y - r ;
24408: LD_ADDR_VAR 0 8
24412: PUSH
24413: LD_VAR 0 3
24417: PUSH
24418: LD_VAR 0 4
24422: MINUS
24423: ST_TO_ADDR
// max_x := x + r ;
24424: LD_ADDR_VAR 0 9
24428: PUSH
24429: LD_VAR 0 2
24433: PUSH
24434: LD_VAR 0 4
24438: PLUS
24439: ST_TO_ADDR
// max_y := y + r ;
24440: LD_ADDR_VAR 0 10
24444: PUSH
24445: LD_VAR 0 3
24449: PUSH
24450: LD_VAR 0 4
24454: PLUS
24455: ST_TO_ADDR
// for _x = min_x to max_x do
24456: LD_ADDR_VAR 0 11
24460: PUSH
24461: DOUBLE
24462: LD_VAR 0 7
24466: DEC
24467: ST_TO_ADDR
24468: LD_VAR 0 9
24472: PUSH
24473: FOR_TO
24474: IFFALSE 24591
// for _y = min_y to max_y do
24476: LD_ADDR_VAR 0 12
24480: PUSH
24481: DOUBLE
24482: LD_VAR 0 8
24486: DEC
24487: ST_TO_ADDR
24488: LD_VAR 0 10
24492: PUSH
24493: FOR_TO
24494: IFFALSE 24587
// begin if not ValidHex ( _x , _y ) then
24496: LD_VAR 0 11
24500: PPUSH
24501: LD_VAR 0 12
24505: PPUSH
24506: CALL_OW 488
24510: NOT
24511: IFFALSE 24515
// continue ;
24513: GO 24493
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24515: LD_VAR 0 11
24519: PPUSH
24520: LD_VAR 0 12
24524: PPUSH
24525: CALL_OW 351
24529: PUSH
24530: LD_VAR 0 11
24534: PPUSH
24535: LD_VAR 0 12
24539: PPUSH
24540: CALL_OW 554
24544: AND
24545: IFFALSE 24585
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24547: LD_ADDR_VAR 0 13
24551: PUSH
24552: LD_VAR 0 13
24556: PPUSH
24557: LD_VAR 0 13
24561: PUSH
24562: LD_INT 1
24564: PLUS
24565: PPUSH
24566: LD_VAR 0 11
24570: PUSH
24571: LD_VAR 0 12
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PPUSH
24580: CALL_OW 2
24584: ST_TO_ADDR
// end ;
24585: GO 24493
24587: POP
24588: POP
24589: GO 24473
24591: POP
24592: POP
// if not list then
24593: LD_VAR 0 13
24597: NOT
24598: IFFALSE 24602
// exit ;
24600: GO 24681
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
24602: LD_ADDR_VAR 0 13
24606: PUSH
24607: LD_VAR 0 1
24611: PPUSH
24612: LD_VAR 0 13
24616: PPUSH
24617: LD_INT 1
24619: PPUSH
24620: LD_INT 1
24622: PPUSH
24623: CALL 33294 0 4
24627: ST_TO_ADDR
// ComStop ( flame ) ;
24628: LD_VAR 0 1
24632: PPUSH
24633: CALL_OW 141
// for i in list do
24637: LD_ADDR_VAR 0 6
24641: PUSH
24642: LD_VAR 0 13
24646: PUSH
24647: FOR_IN
24648: IFFALSE 24679
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
24650: LD_VAR 0 1
24654: PPUSH
24655: LD_VAR 0 6
24659: PUSH
24660: LD_INT 1
24662: ARRAY
24663: PPUSH
24664: LD_VAR 0 6
24668: PUSH
24669: LD_INT 2
24671: ARRAY
24672: PPUSH
24673: CALL_OW 176
24677: GO 24647
24679: POP
24680: POP
// end ;
24681: LD_VAR 0 5
24685: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24686: LD_EXP 86
24690: NOT
24691: IFFALSE 24741
24693: GO 24695
24695: DISABLE
// begin initHack := true ;
24696: LD_ADDR_EXP 86
24700: PUSH
24701: LD_INT 1
24703: ST_TO_ADDR
// hackTanks := [ ] ;
24704: LD_ADDR_EXP 87
24708: PUSH
24709: EMPTY
24710: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24711: LD_ADDR_EXP 88
24715: PUSH
24716: EMPTY
24717: ST_TO_ADDR
// hackLimit := 3 ;
24718: LD_ADDR_EXP 89
24722: PUSH
24723: LD_INT 3
24725: ST_TO_ADDR
// hackDist := 12 ;
24726: LD_ADDR_EXP 90
24730: PUSH
24731: LD_INT 12
24733: ST_TO_ADDR
// hackCounter := [ ] ;
24734: LD_ADDR_EXP 91
24738: PUSH
24739: EMPTY
24740: ST_TO_ADDR
// end ;
24741: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24742: LD_EXP 86
24746: PUSH
24747: LD_INT 34
24749: PUSH
24750: LD_INT 99
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PPUSH
24757: CALL_OW 69
24761: AND
24762: IFFALSE 25015
24764: GO 24766
24766: DISABLE
24767: LD_INT 0
24769: PPUSH
24770: PPUSH
// begin enable ;
24771: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24772: LD_ADDR_VAR 0 1
24776: PUSH
24777: LD_INT 34
24779: PUSH
24780: LD_INT 99
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PPUSH
24787: CALL_OW 69
24791: PUSH
24792: FOR_IN
24793: IFFALSE 25013
// begin if not i in hackTanks then
24795: LD_VAR 0 1
24799: PUSH
24800: LD_EXP 87
24804: IN
24805: NOT
24806: IFFALSE 24889
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24808: LD_ADDR_EXP 87
24812: PUSH
24813: LD_EXP 87
24817: PPUSH
24818: LD_EXP 87
24822: PUSH
24823: LD_INT 1
24825: PLUS
24826: PPUSH
24827: LD_VAR 0 1
24831: PPUSH
24832: CALL_OW 1
24836: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24837: LD_ADDR_EXP 88
24841: PUSH
24842: LD_EXP 88
24846: PPUSH
24847: LD_EXP 88
24851: PUSH
24852: LD_INT 1
24854: PLUS
24855: PPUSH
24856: EMPTY
24857: PPUSH
24858: CALL_OW 1
24862: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24863: LD_ADDR_EXP 91
24867: PUSH
24868: LD_EXP 91
24872: PPUSH
24873: LD_EXP 91
24877: PUSH
24878: LD_INT 1
24880: PLUS
24881: PPUSH
24882: EMPTY
24883: PPUSH
24884: CALL_OW 1
24888: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24889: LD_VAR 0 1
24893: PPUSH
24894: CALL_OW 302
24898: NOT
24899: IFFALSE 24912
// begin HackUnlinkAll ( i ) ;
24901: LD_VAR 0 1
24905: PPUSH
24906: CALL 25018 0 1
// continue ;
24910: GO 24792
// end ; HackCheckCapturedStatus ( i ) ;
24912: LD_VAR 0 1
24916: PPUSH
24917: CALL 25461 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24921: LD_ADDR_VAR 0 2
24925: PUSH
24926: LD_INT 81
24928: PUSH
24929: LD_VAR 0 1
24933: PPUSH
24934: CALL_OW 255
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 33
24945: PUSH
24946: LD_INT 3
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 91
24955: PUSH
24956: LD_VAR 0 1
24960: PUSH
24961: LD_EXP 90
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 50
24973: PUSH
24974: EMPTY
24975: LIST
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: PPUSH
24983: CALL_OW 69
24987: ST_TO_ADDR
// if not tmp then
24988: LD_VAR 0 2
24992: NOT
24993: IFFALSE 24997
// continue ;
24995: GO 24792
// HackLink ( i , tmp ) ;
24997: LD_VAR 0 1
25001: PPUSH
25002: LD_VAR 0 2
25006: PPUSH
25007: CALL 25154 0 2
// end ;
25011: GO 24792
25013: POP
25014: POP
// end ;
25015: PPOPN 2
25017: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25018: LD_INT 0
25020: PPUSH
25021: PPUSH
25022: PPUSH
// if not hack in hackTanks then
25023: LD_VAR 0 1
25027: PUSH
25028: LD_EXP 87
25032: IN
25033: NOT
25034: IFFALSE 25038
// exit ;
25036: GO 25149
// index := GetElementIndex ( hackTanks , hack ) ;
25038: LD_ADDR_VAR 0 4
25042: PUSH
25043: LD_EXP 87
25047: PPUSH
25048: LD_VAR 0 1
25052: PPUSH
25053: CALL 32591 0 2
25057: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25058: LD_EXP 88
25062: PUSH
25063: LD_VAR 0 4
25067: ARRAY
25068: IFFALSE 25149
// begin for i in hackTanksCaptured [ index ] do
25070: LD_ADDR_VAR 0 3
25074: PUSH
25075: LD_EXP 88
25079: PUSH
25080: LD_VAR 0 4
25084: ARRAY
25085: PUSH
25086: FOR_IN
25087: IFFALSE 25113
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25089: LD_VAR 0 3
25093: PUSH
25094: LD_INT 1
25096: ARRAY
25097: PPUSH
25098: LD_VAR 0 3
25102: PUSH
25103: LD_INT 2
25105: ARRAY
25106: PPUSH
25107: CALL_OW 235
25111: GO 25086
25113: POP
25114: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25115: LD_ADDR_EXP 88
25119: PUSH
25120: LD_EXP 88
25124: PPUSH
25125: LD_VAR 0 4
25129: PPUSH
25130: EMPTY
25131: PPUSH
25132: CALL_OW 1
25136: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25137: LD_VAR 0 1
25141: PPUSH
25142: LD_INT 0
25144: PPUSH
25145: CALL_OW 505
// end ; end ;
25149: LD_VAR 0 2
25153: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25154: LD_INT 0
25156: PPUSH
25157: PPUSH
25158: PPUSH
// if not hack in hackTanks or not vehicles then
25159: LD_VAR 0 1
25163: PUSH
25164: LD_EXP 87
25168: IN
25169: NOT
25170: PUSH
25171: LD_VAR 0 2
25175: NOT
25176: OR
25177: IFFALSE 25181
// exit ;
25179: GO 25456
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25181: LD_ADDR_VAR 0 2
25185: PUSH
25186: LD_VAR 0 1
25190: PPUSH
25191: LD_VAR 0 2
25195: PPUSH
25196: LD_INT 1
25198: PPUSH
25199: LD_INT 1
25201: PPUSH
25202: CALL 33241 0 4
25206: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25207: LD_ADDR_VAR 0 5
25211: PUSH
25212: LD_EXP 87
25216: PPUSH
25217: LD_VAR 0 1
25221: PPUSH
25222: CALL 32591 0 2
25226: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25227: LD_EXP 88
25231: PUSH
25232: LD_VAR 0 5
25236: ARRAY
25237: PUSH
25238: LD_EXP 89
25242: LESS
25243: IFFALSE 25432
// begin for i := 1 to vehicles do
25245: LD_ADDR_VAR 0 4
25249: PUSH
25250: DOUBLE
25251: LD_INT 1
25253: DEC
25254: ST_TO_ADDR
25255: LD_VAR 0 2
25259: PUSH
25260: FOR_TO
25261: IFFALSE 25430
// begin if hackTanksCaptured [ index ] = hackLimit then
25263: LD_EXP 88
25267: PUSH
25268: LD_VAR 0 5
25272: ARRAY
25273: PUSH
25274: LD_EXP 89
25278: EQUAL
25279: IFFALSE 25283
// break ;
25281: GO 25430
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25283: LD_ADDR_EXP 91
25287: PUSH
25288: LD_EXP 91
25292: PPUSH
25293: LD_VAR 0 5
25297: PPUSH
25298: LD_EXP 91
25302: PUSH
25303: LD_VAR 0 5
25307: ARRAY
25308: PUSH
25309: LD_INT 1
25311: PLUS
25312: PPUSH
25313: CALL_OW 1
25317: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25318: LD_ADDR_EXP 88
25322: PUSH
25323: LD_EXP 88
25327: PPUSH
25328: LD_VAR 0 5
25332: PUSH
25333: LD_EXP 88
25337: PUSH
25338: LD_VAR 0 5
25342: ARRAY
25343: PUSH
25344: LD_INT 1
25346: PLUS
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PPUSH
25352: LD_VAR 0 2
25356: PUSH
25357: LD_VAR 0 4
25361: ARRAY
25362: PUSH
25363: LD_VAR 0 2
25367: PUSH
25368: LD_VAR 0 4
25372: ARRAY
25373: PPUSH
25374: CALL_OW 255
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PPUSH
25383: CALL 32806 0 3
25387: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25388: LD_VAR 0 2
25392: PUSH
25393: LD_VAR 0 4
25397: ARRAY
25398: PPUSH
25399: LD_VAR 0 1
25403: PPUSH
25404: CALL_OW 255
25408: PPUSH
25409: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25413: LD_VAR 0 2
25417: PUSH
25418: LD_VAR 0 4
25422: ARRAY
25423: PPUSH
25424: CALL_OW 141
// end ;
25428: GO 25260
25430: POP
25431: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25432: LD_VAR 0 1
25436: PPUSH
25437: LD_EXP 88
25441: PUSH
25442: LD_VAR 0 5
25446: ARRAY
25447: PUSH
25448: LD_INT 0
25450: PLUS
25451: PPUSH
25452: CALL_OW 505
// end ;
25456: LD_VAR 0 3
25460: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25461: LD_INT 0
25463: PPUSH
25464: PPUSH
25465: PPUSH
25466: PPUSH
// if not hack in hackTanks then
25467: LD_VAR 0 1
25471: PUSH
25472: LD_EXP 87
25476: IN
25477: NOT
25478: IFFALSE 25482
// exit ;
25480: GO 25722
// index := GetElementIndex ( hackTanks , hack ) ;
25482: LD_ADDR_VAR 0 4
25486: PUSH
25487: LD_EXP 87
25491: PPUSH
25492: LD_VAR 0 1
25496: PPUSH
25497: CALL 32591 0 2
25501: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25502: LD_ADDR_VAR 0 3
25506: PUSH
25507: DOUBLE
25508: LD_EXP 88
25512: PUSH
25513: LD_VAR 0 4
25517: ARRAY
25518: INC
25519: ST_TO_ADDR
25520: LD_INT 1
25522: PUSH
25523: FOR_DOWNTO
25524: IFFALSE 25696
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25526: LD_ADDR_VAR 0 5
25530: PUSH
25531: LD_EXP 88
25535: PUSH
25536: LD_VAR 0 4
25540: ARRAY
25541: PUSH
25542: LD_VAR 0 3
25546: ARRAY
25547: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25548: LD_VAR 0 5
25552: PUSH
25553: LD_INT 1
25555: ARRAY
25556: PPUSH
25557: CALL_OW 302
25561: NOT
25562: PUSH
25563: LD_VAR 0 5
25567: PUSH
25568: LD_INT 1
25570: ARRAY
25571: PPUSH
25572: CALL_OW 255
25576: PUSH
25577: LD_VAR 0 1
25581: PPUSH
25582: CALL_OW 255
25586: NONEQUAL
25587: OR
25588: IFFALSE 25694
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25590: LD_VAR 0 5
25594: PUSH
25595: LD_INT 1
25597: ARRAY
25598: PPUSH
25599: CALL_OW 305
25603: PUSH
25604: LD_VAR 0 5
25608: PUSH
25609: LD_INT 1
25611: ARRAY
25612: PPUSH
25613: CALL_OW 255
25617: PUSH
25618: LD_VAR 0 1
25622: PPUSH
25623: CALL_OW 255
25627: EQUAL
25628: AND
25629: IFFALSE 25653
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25631: LD_VAR 0 5
25635: PUSH
25636: LD_INT 1
25638: ARRAY
25639: PPUSH
25640: LD_VAR 0 5
25644: PUSH
25645: LD_INT 2
25647: ARRAY
25648: PPUSH
25649: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25653: LD_ADDR_EXP 88
25657: PUSH
25658: LD_EXP 88
25662: PPUSH
25663: LD_VAR 0 4
25667: PPUSH
25668: LD_EXP 88
25672: PUSH
25673: LD_VAR 0 4
25677: ARRAY
25678: PPUSH
25679: LD_VAR 0 3
25683: PPUSH
25684: CALL_OW 3
25688: PPUSH
25689: CALL_OW 1
25693: ST_TO_ADDR
// end ; end ;
25694: GO 25523
25696: POP
25697: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25698: LD_VAR 0 1
25702: PPUSH
25703: LD_EXP 88
25707: PUSH
25708: LD_VAR 0 4
25712: ARRAY
25713: PUSH
25714: LD_INT 0
25716: PLUS
25717: PPUSH
25718: CALL_OW 505
// end ;
25722: LD_VAR 0 2
25726: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25727: LD_INT 0
25729: PPUSH
25730: PPUSH
25731: PPUSH
25732: PPUSH
// if not hack in hackTanks then
25733: LD_VAR 0 1
25737: PUSH
25738: LD_EXP 87
25742: IN
25743: NOT
25744: IFFALSE 25748
// exit ;
25746: GO 25833
// index := GetElementIndex ( hackTanks , hack ) ;
25748: LD_ADDR_VAR 0 5
25752: PUSH
25753: LD_EXP 87
25757: PPUSH
25758: LD_VAR 0 1
25762: PPUSH
25763: CALL 32591 0 2
25767: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25768: LD_ADDR_VAR 0 4
25772: PUSH
25773: DOUBLE
25774: LD_INT 1
25776: DEC
25777: ST_TO_ADDR
25778: LD_EXP 88
25782: PUSH
25783: LD_VAR 0 5
25787: ARRAY
25788: PUSH
25789: FOR_TO
25790: IFFALSE 25831
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25792: LD_EXP 88
25796: PUSH
25797: LD_VAR 0 5
25801: ARRAY
25802: PUSH
25803: LD_VAR 0 4
25807: ARRAY
25808: PUSH
25809: LD_INT 1
25811: ARRAY
25812: PUSH
25813: LD_VAR 0 2
25817: EQUAL
25818: IFFALSE 25829
// KillUnit ( vehicle ) ;
25820: LD_VAR 0 2
25824: PPUSH
25825: CALL_OW 66
25829: GO 25789
25831: POP
25832: POP
// end ;
25833: LD_VAR 0 3
25837: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25838: LD_EXP 92
25842: NOT
25843: IFFALSE 25878
25845: GO 25847
25847: DISABLE
// begin initMiner := true ;
25848: LD_ADDR_EXP 92
25852: PUSH
25853: LD_INT 1
25855: ST_TO_ADDR
// minersList := [ ] ;
25856: LD_ADDR_EXP 93
25860: PUSH
25861: EMPTY
25862: ST_TO_ADDR
// minerMinesList := [ ] ;
25863: LD_ADDR_EXP 94
25867: PUSH
25868: EMPTY
25869: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25870: LD_ADDR_EXP 95
25874: PUSH
25875: LD_INT 5
25877: ST_TO_ADDR
// end ;
25878: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25879: LD_EXP 92
25883: PUSH
25884: LD_INT 34
25886: PUSH
25887: LD_INT 81
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PPUSH
25894: CALL_OW 69
25898: AND
25899: IFFALSE 26360
25901: GO 25903
25903: DISABLE
25904: LD_INT 0
25906: PPUSH
25907: PPUSH
25908: PPUSH
25909: PPUSH
// begin enable ;
25910: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25911: LD_ADDR_VAR 0 1
25915: PUSH
25916: LD_INT 34
25918: PUSH
25919: LD_INT 81
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PPUSH
25926: CALL_OW 69
25930: PUSH
25931: FOR_IN
25932: IFFALSE 26004
// begin if not i in minersList then
25934: LD_VAR 0 1
25938: PUSH
25939: LD_EXP 93
25943: IN
25944: NOT
25945: IFFALSE 26002
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25947: LD_ADDR_EXP 93
25951: PUSH
25952: LD_EXP 93
25956: PPUSH
25957: LD_EXP 93
25961: PUSH
25962: LD_INT 1
25964: PLUS
25965: PPUSH
25966: LD_VAR 0 1
25970: PPUSH
25971: CALL_OW 1
25975: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25976: LD_ADDR_EXP 94
25980: PUSH
25981: LD_EXP 94
25985: PPUSH
25986: LD_EXP 94
25990: PUSH
25991: LD_INT 1
25993: PLUS
25994: PPUSH
25995: EMPTY
25996: PPUSH
25997: CALL_OW 1
26001: ST_TO_ADDR
// end end ;
26002: GO 25931
26004: POP
26005: POP
// for i := minerMinesList downto 1 do
26006: LD_ADDR_VAR 0 1
26010: PUSH
26011: DOUBLE
26012: LD_EXP 94
26016: INC
26017: ST_TO_ADDR
26018: LD_INT 1
26020: PUSH
26021: FOR_DOWNTO
26022: IFFALSE 26358
// begin if IsLive ( minersList [ i ] ) then
26024: LD_EXP 93
26028: PUSH
26029: LD_VAR 0 1
26033: ARRAY
26034: PPUSH
26035: CALL_OW 300
26039: IFFALSE 26067
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26041: LD_EXP 93
26045: PUSH
26046: LD_VAR 0 1
26050: ARRAY
26051: PPUSH
26052: LD_EXP 94
26056: PUSH
26057: LD_VAR 0 1
26061: ARRAY
26062: PPUSH
26063: CALL_OW 505
// if not minerMinesList [ i ] then
26067: LD_EXP 94
26071: PUSH
26072: LD_VAR 0 1
26076: ARRAY
26077: NOT
26078: IFFALSE 26082
// continue ;
26080: GO 26021
// for j := minerMinesList [ i ] downto 1 do
26082: LD_ADDR_VAR 0 2
26086: PUSH
26087: DOUBLE
26088: LD_EXP 94
26092: PUSH
26093: LD_VAR 0 1
26097: ARRAY
26098: INC
26099: ST_TO_ADDR
26100: LD_INT 1
26102: PUSH
26103: FOR_DOWNTO
26104: IFFALSE 26354
// begin side := GetSide ( minersList [ i ] ) ;
26106: LD_ADDR_VAR 0 3
26110: PUSH
26111: LD_EXP 93
26115: PUSH
26116: LD_VAR 0 1
26120: ARRAY
26121: PPUSH
26122: CALL_OW 255
26126: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26127: LD_ADDR_VAR 0 4
26131: PUSH
26132: LD_EXP 94
26136: PUSH
26137: LD_VAR 0 1
26141: ARRAY
26142: PUSH
26143: LD_VAR 0 2
26147: ARRAY
26148: PUSH
26149: LD_INT 1
26151: ARRAY
26152: PPUSH
26153: LD_EXP 94
26157: PUSH
26158: LD_VAR 0 1
26162: ARRAY
26163: PUSH
26164: LD_VAR 0 2
26168: ARRAY
26169: PUSH
26170: LD_INT 2
26172: ARRAY
26173: PPUSH
26174: CALL_OW 428
26178: ST_TO_ADDR
// if not tmp then
26179: LD_VAR 0 4
26183: NOT
26184: IFFALSE 26188
// continue ;
26186: GO 26103
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26188: LD_VAR 0 4
26192: PUSH
26193: LD_INT 81
26195: PUSH
26196: LD_VAR 0 3
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PPUSH
26205: CALL_OW 69
26209: IN
26210: PUSH
26211: LD_EXP 94
26215: PUSH
26216: LD_VAR 0 1
26220: ARRAY
26221: PUSH
26222: LD_VAR 0 2
26226: ARRAY
26227: PUSH
26228: LD_INT 1
26230: ARRAY
26231: PPUSH
26232: LD_EXP 94
26236: PUSH
26237: LD_VAR 0 1
26241: ARRAY
26242: PUSH
26243: LD_VAR 0 2
26247: ARRAY
26248: PUSH
26249: LD_INT 2
26251: ARRAY
26252: PPUSH
26253: CALL_OW 458
26257: AND
26258: IFFALSE 26352
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26260: LD_EXP 94
26264: PUSH
26265: LD_VAR 0 1
26269: ARRAY
26270: PUSH
26271: LD_VAR 0 2
26275: ARRAY
26276: PUSH
26277: LD_INT 1
26279: ARRAY
26280: PPUSH
26281: LD_EXP 94
26285: PUSH
26286: LD_VAR 0 1
26290: ARRAY
26291: PUSH
26292: LD_VAR 0 2
26296: ARRAY
26297: PUSH
26298: LD_INT 2
26300: ARRAY
26301: PPUSH
26302: LD_VAR 0 3
26306: PPUSH
26307: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26311: LD_ADDR_EXP 94
26315: PUSH
26316: LD_EXP 94
26320: PPUSH
26321: LD_VAR 0 1
26325: PPUSH
26326: LD_EXP 94
26330: PUSH
26331: LD_VAR 0 1
26335: ARRAY
26336: PPUSH
26337: LD_VAR 0 2
26341: PPUSH
26342: CALL_OW 3
26346: PPUSH
26347: CALL_OW 1
26351: ST_TO_ADDR
// end ; end ;
26352: GO 26103
26354: POP
26355: POP
// end ;
26356: GO 26021
26358: POP
26359: POP
// end ;
26360: PPOPN 4
26362: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26363: LD_INT 0
26365: PPUSH
26366: PPUSH
// result := false ;
26367: LD_ADDR_VAR 0 4
26371: PUSH
26372: LD_INT 0
26374: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26375: LD_VAR 0 1
26379: PPUSH
26380: CALL_OW 264
26384: PUSH
26385: LD_INT 81
26387: EQUAL
26388: NOT
26389: IFFALSE 26393
// exit ;
26391: GO 26633
// index := GetElementIndex ( minersList , unit ) ;
26393: LD_ADDR_VAR 0 5
26397: PUSH
26398: LD_EXP 93
26402: PPUSH
26403: LD_VAR 0 1
26407: PPUSH
26408: CALL 32591 0 2
26412: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26413: LD_EXP 94
26417: PUSH
26418: LD_VAR 0 5
26422: ARRAY
26423: PUSH
26424: LD_EXP 95
26428: GREATEREQUAL
26429: IFFALSE 26433
// exit ;
26431: GO 26633
// ComMoveXY ( unit , x , y ) ;
26433: LD_VAR 0 1
26437: PPUSH
26438: LD_VAR 0 2
26442: PPUSH
26443: LD_VAR 0 3
26447: PPUSH
26448: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26452: LD_INT 35
26454: PPUSH
26455: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26459: LD_VAR 0 1
26463: PPUSH
26464: LD_VAR 0 2
26468: PPUSH
26469: LD_VAR 0 3
26473: PPUSH
26474: CALL 64343 0 3
26478: NOT
26479: PUSH
26480: LD_VAR 0 1
26484: PPUSH
26485: CALL_OW 314
26489: AND
26490: IFFALSE 26494
// exit ;
26492: GO 26633
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26494: LD_VAR 0 2
26498: PPUSH
26499: LD_VAR 0 3
26503: PPUSH
26504: CALL_OW 428
26508: PUSH
26509: LD_VAR 0 1
26513: EQUAL
26514: PUSH
26515: LD_VAR 0 1
26519: PPUSH
26520: CALL_OW 314
26524: NOT
26525: AND
26526: IFFALSE 26452
// PlaySoundXY ( x , y , PlantMine ) ;
26528: LD_VAR 0 2
26532: PPUSH
26533: LD_VAR 0 3
26537: PPUSH
26538: LD_STRING PlantMine
26540: PPUSH
26541: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26545: LD_VAR 0 2
26549: PPUSH
26550: LD_VAR 0 3
26554: PPUSH
26555: LD_VAR 0 1
26559: PPUSH
26560: CALL_OW 255
26564: PPUSH
26565: LD_INT 0
26567: PPUSH
26568: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26572: LD_ADDR_EXP 94
26576: PUSH
26577: LD_EXP 94
26581: PPUSH
26582: LD_VAR 0 5
26586: PUSH
26587: LD_EXP 94
26591: PUSH
26592: LD_VAR 0 5
26596: ARRAY
26597: PUSH
26598: LD_INT 1
26600: PLUS
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PPUSH
26606: LD_VAR 0 2
26610: PUSH
26611: LD_VAR 0 3
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PPUSH
26620: CALL 32806 0 3
26624: ST_TO_ADDR
// result := true ;
26625: LD_ADDR_VAR 0 4
26629: PUSH
26630: LD_INT 1
26632: ST_TO_ADDR
// end ;
26633: LD_VAR 0 4
26637: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26638: LD_INT 0
26640: PPUSH
26641: PPUSH
26642: PPUSH
// if not unit in minersList then
26643: LD_VAR 0 1
26647: PUSH
26648: LD_EXP 93
26652: IN
26653: NOT
26654: IFFALSE 26658
// exit ;
26656: GO 27050
// index := GetElementIndex ( minersList , unit ) ;
26658: LD_ADDR_VAR 0 6
26662: PUSH
26663: LD_EXP 93
26667: PPUSH
26668: LD_VAR 0 1
26672: PPUSH
26673: CALL 32591 0 2
26677: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26678: LD_ADDR_VAR 0 5
26682: PUSH
26683: DOUBLE
26684: LD_EXP 94
26688: PUSH
26689: LD_VAR 0 6
26693: ARRAY
26694: INC
26695: ST_TO_ADDR
26696: LD_INT 1
26698: PUSH
26699: FOR_DOWNTO
26700: IFFALSE 26861
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26702: LD_EXP 94
26706: PUSH
26707: LD_VAR 0 6
26711: ARRAY
26712: PUSH
26713: LD_VAR 0 5
26717: ARRAY
26718: PUSH
26719: LD_INT 1
26721: ARRAY
26722: PUSH
26723: LD_VAR 0 2
26727: EQUAL
26728: PUSH
26729: LD_EXP 94
26733: PUSH
26734: LD_VAR 0 6
26738: ARRAY
26739: PUSH
26740: LD_VAR 0 5
26744: ARRAY
26745: PUSH
26746: LD_INT 2
26748: ARRAY
26749: PUSH
26750: LD_VAR 0 3
26754: EQUAL
26755: AND
26756: IFFALSE 26859
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26758: LD_EXP 94
26762: PUSH
26763: LD_VAR 0 6
26767: ARRAY
26768: PUSH
26769: LD_VAR 0 5
26773: ARRAY
26774: PUSH
26775: LD_INT 1
26777: ARRAY
26778: PPUSH
26779: LD_EXP 94
26783: PUSH
26784: LD_VAR 0 6
26788: ARRAY
26789: PUSH
26790: LD_VAR 0 5
26794: ARRAY
26795: PUSH
26796: LD_INT 2
26798: ARRAY
26799: PPUSH
26800: LD_VAR 0 1
26804: PPUSH
26805: CALL_OW 255
26809: PPUSH
26810: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26814: LD_ADDR_EXP 94
26818: PUSH
26819: LD_EXP 94
26823: PPUSH
26824: LD_VAR 0 6
26828: PPUSH
26829: LD_EXP 94
26833: PUSH
26834: LD_VAR 0 6
26838: ARRAY
26839: PPUSH
26840: LD_VAR 0 5
26844: PPUSH
26845: CALL_OW 3
26849: PPUSH
26850: CALL_OW 1
26854: ST_TO_ADDR
// exit ;
26855: POP
26856: POP
26857: GO 27050
// end ; end ;
26859: GO 26699
26861: POP
26862: POP
// for i := minerMinesList [ index ] downto 1 do
26863: LD_ADDR_VAR 0 5
26867: PUSH
26868: DOUBLE
26869: LD_EXP 94
26873: PUSH
26874: LD_VAR 0 6
26878: ARRAY
26879: INC
26880: ST_TO_ADDR
26881: LD_INT 1
26883: PUSH
26884: FOR_DOWNTO
26885: IFFALSE 27048
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26887: LD_EXP 94
26891: PUSH
26892: LD_VAR 0 6
26896: ARRAY
26897: PUSH
26898: LD_VAR 0 5
26902: ARRAY
26903: PUSH
26904: LD_INT 1
26906: ARRAY
26907: PPUSH
26908: LD_EXP 94
26912: PUSH
26913: LD_VAR 0 6
26917: ARRAY
26918: PUSH
26919: LD_VAR 0 5
26923: ARRAY
26924: PUSH
26925: LD_INT 2
26927: ARRAY
26928: PPUSH
26929: LD_VAR 0 2
26933: PPUSH
26934: LD_VAR 0 3
26938: PPUSH
26939: CALL_OW 298
26943: PUSH
26944: LD_INT 6
26946: LESS
26947: IFFALSE 27046
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26949: LD_EXP 94
26953: PUSH
26954: LD_VAR 0 6
26958: ARRAY
26959: PUSH
26960: LD_VAR 0 5
26964: ARRAY
26965: PUSH
26966: LD_INT 1
26968: ARRAY
26969: PPUSH
26970: LD_EXP 94
26974: PUSH
26975: LD_VAR 0 6
26979: ARRAY
26980: PUSH
26981: LD_VAR 0 5
26985: ARRAY
26986: PUSH
26987: LD_INT 2
26989: ARRAY
26990: PPUSH
26991: LD_VAR 0 1
26995: PPUSH
26996: CALL_OW 255
27000: PPUSH
27001: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27005: LD_ADDR_EXP 94
27009: PUSH
27010: LD_EXP 94
27014: PPUSH
27015: LD_VAR 0 6
27019: PPUSH
27020: LD_EXP 94
27024: PUSH
27025: LD_VAR 0 6
27029: ARRAY
27030: PPUSH
27031: LD_VAR 0 5
27035: PPUSH
27036: CALL_OW 3
27040: PPUSH
27041: CALL_OW 1
27045: ST_TO_ADDR
// end ; end ;
27046: GO 26884
27048: POP
27049: POP
// end ;
27050: LD_VAR 0 4
27054: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27055: LD_INT 0
27057: PPUSH
27058: PPUSH
27059: PPUSH
27060: PPUSH
27061: PPUSH
27062: PPUSH
27063: PPUSH
27064: PPUSH
27065: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27066: LD_VAR 0 1
27070: PPUSH
27071: CALL_OW 264
27075: PUSH
27076: LD_INT 81
27078: EQUAL
27079: NOT
27080: PUSH
27081: LD_VAR 0 1
27085: PUSH
27086: LD_EXP 93
27090: IN
27091: NOT
27092: OR
27093: IFFALSE 27097
// exit ;
27095: GO 27419
// index := GetElementIndex ( minersList , unit ) ;
27097: LD_ADDR_VAR 0 6
27101: PUSH
27102: LD_EXP 93
27106: PPUSH
27107: LD_VAR 0 1
27111: PPUSH
27112: CALL 32591 0 2
27116: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27117: LD_ADDR_VAR 0 8
27121: PUSH
27122: LD_EXP 95
27126: PUSH
27127: LD_EXP 94
27131: PUSH
27132: LD_VAR 0 6
27136: ARRAY
27137: MINUS
27138: ST_TO_ADDR
// if not minesFreeAmount then
27139: LD_VAR 0 8
27143: NOT
27144: IFFALSE 27148
// exit ;
27146: GO 27419
// tmp := [ ] ;
27148: LD_ADDR_VAR 0 7
27152: PUSH
27153: EMPTY
27154: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27155: LD_ADDR_VAR 0 5
27159: PUSH
27160: DOUBLE
27161: LD_INT 1
27163: DEC
27164: ST_TO_ADDR
27165: LD_VAR 0 8
27169: PUSH
27170: FOR_TO
27171: IFFALSE 27366
// begin _d := rand ( 0 , 5 ) ;
27173: LD_ADDR_VAR 0 11
27177: PUSH
27178: LD_INT 0
27180: PPUSH
27181: LD_INT 5
27183: PPUSH
27184: CALL_OW 12
27188: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27189: LD_ADDR_VAR 0 12
27193: PUSH
27194: LD_INT 2
27196: PPUSH
27197: LD_INT 6
27199: PPUSH
27200: CALL_OW 12
27204: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27205: LD_ADDR_VAR 0 9
27209: PUSH
27210: LD_VAR 0 2
27214: PPUSH
27215: LD_VAR 0 11
27219: PPUSH
27220: LD_VAR 0 12
27224: PPUSH
27225: CALL_OW 272
27229: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27230: LD_ADDR_VAR 0 10
27234: PUSH
27235: LD_VAR 0 3
27239: PPUSH
27240: LD_VAR 0 11
27244: PPUSH
27245: LD_VAR 0 12
27249: PPUSH
27250: CALL_OW 273
27254: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27255: LD_VAR 0 9
27259: PPUSH
27260: LD_VAR 0 10
27264: PPUSH
27265: CALL_OW 488
27269: PUSH
27270: LD_VAR 0 9
27274: PUSH
27275: LD_VAR 0 10
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_VAR 0 7
27288: IN
27289: NOT
27290: AND
27291: PUSH
27292: LD_VAR 0 9
27296: PPUSH
27297: LD_VAR 0 10
27301: PPUSH
27302: CALL_OW 458
27306: NOT
27307: AND
27308: IFFALSE 27350
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27310: LD_ADDR_VAR 0 7
27314: PUSH
27315: LD_VAR 0 7
27319: PPUSH
27320: LD_VAR 0 7
27324: PUSH
27325: LD_INT 1
27327: PLUS
27328: PPUSH
27329: LD_VAR 0 9
27333: PUSH
27334: LD_VAR 0 10
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PPUSH
27343: CALL_OW 1
27347: ST_TO_ADDR
27348: GO 27364
// i := i - 1 ;
27350: LD_ADDR_VAR 0 5
27354: PUSH
27355: LD_VAR 0 5
27359: PUSH
27360: LD_INT 1
27362: MINUS
27363: ST_TO_ADDR
// end ;
27364: GO 27170
27366: POP
27367: POP
// for i in tmp do
27368: LD_ADDR_VAR 0 5
27372: PUSH
27373: LD_VAR 0 7
27377: PUSH
27378: FOR_IN
27379: IFFALSE 27417
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27381: LD_VAR 0 1
27385: PPUSH
27386: LD_VAR 0 5
27390: PUSH
27391: LD_INT 1
27393: ARRAY
27394: PPUSH
27395: LD_VAR 0 5
27399: PUSH
27400: LD_INT 2
27402: ARRAY
27403: PPUSH
27404: CALL 26363 0 3
27408: NOT
27409: IFFALSE 27415
// exit ;
27411: POP
27412: POP
27413: GO 27419
27415: GO 27378
27417: POP
27418: POP
// end ;
27419: LD_VAR 0 4
27423: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27424: LD_INT 0
27426: PPUSH
27427: PPUSH
27428: PPUSH
27429: PPUSH
27430: PPUSH
27431: PPUSH
27432: PPUSH
// if not GetClass ( unit ) = class_sniper then
27433: LD_VAR 0 1
27437: PPUSH
27438: CALL_OW 257
27442: PUSH
27443: LD_INT 5
27445: EQUAL
27446: NOT
27447: IFFALSE 27451
// exit ;
27449: GO 27839
// dist := 8 ;
27451: LD_ADDR_VAR 0 5
27455: PUSH
27456: LD_INT 8
27458: ST_TO_ADDR
// viewRange := 12 ;
27459: LD_ADDR_VAR 0 7
27463: PUSH
27464: LD_INT 12
27466: ST_TO_ADDR
// side := GetSide ( unit ) ;
27467: LD_ADDR_VAR 0 6
27471: PUSH
27472: LD_VAR 0 1
27476: PPUSH
27477: CALL_OW 255
27481: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27482: LD_INT 61
27484: PPUSH
27485: LD_VAR 0 6
27489: PPUSH
27490: CALL_OW 321
27494: PUSH
27495: LD_INT 2
27497: EQUAL
27498: IFFALSE 27508
// viewRange := 16 ;
27500: LD_ADDR_VAR 0 7
27504: PUSH
27505: LD_INT 16
27507: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27508: LD_VAR 0 1
27512: PPUSH
27513: LD_VAR 0 2
27517: PPUSH
27518: LD_VAR 0 3
27522: PPUSH
27523: CALL_OW 297
27527: PUSH
27528: LD_VAR 0 5
27532: GREATER
27533: IFFALSE 27612
// begin ComMoveXY ( unit , x , y ) ;
27535: LD_VAR 0 1
27539: PPUSH
27540: LD_VAR 0 2
27544: PPUSH
27545: LD_VAR 0 3
27549: PPUSH
27550: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27554: LD_INT 35
27556: PPUSH
27557: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27561: LD_VAR 0 1
27565: PPUSH
27566: LD_VAR 0 2
27570: PPUSH
27571: LD_VAR 0 3
27575: PPUSH
27576: CALL 64343 0 3
27580: NOT
27581: IFFALSE 27585
// exit ;
27583: GO 27839
// until GetDistUnitXY ( unit , x , y ) < dist ;
27585: LD_VAR 0 1
27589: PPUSH
27590: LD_VAR 0 2
27594: PPUSH
27595: LD_VAR 0 3
27599: PPUSH
27600: CALL_OW 297
27604: PUSH
27605: LD_VAR 0 5
27609: LESS
27610: IFFALSE 27554
// end ; ComTurnXY ( unit , x , y ) ;
27612: LD_VAR 0 1
27616: PPUSH
27617: LD_VAR 0 2
27621: PPUSH
27622: LD_VAR 0 3
27626: PPUSH
27627: CALL_OW 118
// wait ( 5 ) ;
27631: LD_INT 5
27633: PPUSH
27634: CALL_OW 67
// _d := GetDir ( unit ) ;
27638: LD_ADDR_VAR 0 10
27642: PUSH
27643: LD_VAR 0 1
27647: PPUSH
27648: CALL_OW 254
27652: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27653: LD_ADDR_VAR 0 8
27657: PUSH
27658: LD_VAR 0 1
27662: PPUSH
27663: CALL_OW 250
27667: PPUSH
27668: LD_VAR 0 10
27672: PPUSH
27673: LD_VAR 0 5
27677: PPUSH
27678: CALL_OW 272
27682: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27683: LD_ADDR_VAR 0 9
27687: PUSH
27688: LD_VAR 0 1
27692: PPUSH
27693: CALL_OW 251
27697: PPUSH
27698: LD_VAR 0 10
27702: PPUSH
27703: LD_VAR 0 5
27707: PPUSH
27708: CALL_OW 273
27712: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27713: LD_VAR 0 8
27717: PPUSH
27718: LD_VAR 0 9
27722: PPUSH
27723: CALL_OW 488
27727: NOT
27728: IFFALSE 27732
// exit ;
27730: GO 27839
// ComAnimCustom ( unit , 1 ) ;
27732: LD_VAR 0 1
27736: PPUSH
27737: LD_INT 1
27739: PPUSH
27740: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27744: LD_VAR 0 8
27748: PPUSH
27749: LD_VAR 0 9
27753: PPUSH
27754: LD_VAR 0 6
27758: PPUSH
27759: LD_VAR 0 7
27763: PPUSH
27764: CALL_OW 330
// repeat wait ( 1 ) ;
27768: LD_INT 1
27770: PPUSH
27771: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27775: LD_VAR 0 1
27779: PPUSH
27780: CALL_OW 316
27784: PUSH
27785: LD_VAR 0 1
27789: PPUSH
27790: CALL_OW 314
27794: OR
27795: PUSH
27796: LD_VAR 0 1
27800: PPUSH
27801: CALL_OW 302
27805: NOT
27806: OR
27807: PUSH
27808: LD_VAR 0 1
27812: PPUSH
27813: CALL_OW 301
27817: OR
27818: IFFALSE 27768
// RemoveSeeing ( _x , _y , side ) ;
27820: LD_VAR 0 8
27824: PPUSH
27825: LD_VAR 0 9
27829: PPUSH
27830: LD_VAR 0 6
27834: PPUSH
27835: CALL_OW 331
// end ; end_of_file
27839: LD_VAR 0 4
27843: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27844: LD_INT 0
27846: PPUSH
27847: PPUSH
// if exist_mode then
27848: LD_VAR 0 2
27852: IFFALSE 27877
// unit := CreateCharacter ( prefix & ident ) else
27854: LD_ADDR_VAR 0 5
27858: PUSH
27859: LD_VAR 0 3
27863: PUSH
27864: LD_VAR 0 1
27868: STR
27869: PPUSH
27870: CALL_OW 34
27874: ST_TO_ADDR
27875: GO 27892
// unit := NewCharacter ( ident ) ;
27877: LD_ADDR_VAR 0 5
27881: PUSH
27882: LD_VAR 0 1
27886: PPUSH
27887: CALL_OW 25
27891: ST_TO_ADDR
// result := unit ;
27892: LD_ADDR_VAR 0 4
27896: PUSH
27897: LD_VAR 0 5
27901: ST_TO_ADDR
// end ;
27902: LD_VAR 0 4
27906: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27907: LD_INT 0
27909: PPUSH
27910: PPUSH
// if not side or not nation then
27911: LD_VAR 0 1
27915: NOT
27916: PUSH
27917: LD_VAR 0 2
27921: NOT
27922: OR
27923: IFFALSE 27927
// exit ;
27925: GO 28695
// case nation of nation_american :
27927: LD_VAR 0 2
27931: PUSH
27932: LD_INT 1
27934: DOUBLE
27935: EQUAL
27936: IFTRUE 27940
27938: GO 28154
27940: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27941: LD_ADDR_VAR 0 4
27945: PUSH
27946: LD_INT 35
27948: PUSH
27949: LD_INT 45
27951: PUSH
27952: LD_INT 46
27954: PUSH
27955: LD_INT 47
27957: PUSH
27958: LD_INT 82
27960: PUSH
27961: LD_INT 83
27963: PUSH
27964: LD_INT 84
27966: PUSH
27967: LD_INT 85
27969: PUSH
27970: LD_INT 86
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: LD_INT 2
27978: PUSH
27979: LD_INT 6
27981: PUSH
27982: LD_INT 15
27984: PUSH
27985: LD_INT 16
27987: PUSH
27988: LD_INT 7
27990: PUSH
27991: LD_INT 12
27993: PUSH
27994: LD_INT 13
27996: PUSH
27997: LD_INT 10
27999: PUSH
28000: LD_INT 14
28002: PUSH
28003: LD_INT 20
28005: PUSH
28006: LD_INT 21
28008: PUSH
28009: LD_INT 22
28011: PUSH
28012: LD_INT 25
28014: PUSH
28015: LD_INT 32
28017: PUSH
28018: LD_INT 27
28020: PUSH
28021: LD_INT 36
28023: PUSH
28024: LD_INT 69
28026: PUSH
28027: LD_INT 39
28029: PUSH
28030: LD_INT 34
28032: PUSH
28033: LD_INT 40
28035: PUSH
28036: LD_INT 48
28038: PUSH
28039: LD_INT 49
28041: PUSH
28042: LD_INT 50
28044: PUSH
28045: LD_INT 51
28047: PUSH
28048: LD_INT 52
28050: PUSH
28051: LD_INT 53
28053: PUSH
28054: LD_INT 54
28056: PUSH
28057: LD_INT 55
28059: PUSH
28060: LD_INT 56
28062: PUSH
28063: LD_INT 57
28065: PUSH
28066: LD_INT 58
28068: PUSH
28069: LD_INT 59
28071: PUSH
28072: LD_INT 60
28074: PUSH
28075: LD_INT 61
28077: PUSH
28078: LD_INT 62
28080: PUSH
28081: LD_INT 80
28083: PUSH
28084: LD_INT 82
28086: PUSH
28087: LD_INT 83
28089: PUSH
28090: LD_INT 84
28092: PUSH
28093: LD_INT 85
28095: PUSH
28096: LD_INT 86
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: ST_TO_ADDR
28152: GO 28619
28154: LD_INT 2
28156: DOUBLE
28157: EQUAL
28158: IFTRUE 28162
28160: GO 28388
28162: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28163: LD_ADDR_VAR 0 4
28167: PUSH
28168: LD_INT 35
28170: PUSH
28171: LD_INT 45
28173: PUSH
28174: LD_INT 46
28176: PUSH
28177: LD_INT 47
28179: PUSH
28180: LD_INT 82
28182: PUSH
28183: LD_INT 83
28185: PUSH
28186: LD_INT 84
28188: PUSH
28189: LD_INT 85
28191: PUSH
28192: LD_INT 87
28194: PUSH
28195: LD_INT 70
28197: PUSH
28198: LD_INT 1
28200: PUSH
28201: LD_INT 11
28203: PUSH
28204: LD_INT 3
28206: PUSH
28207: LD_INT 4
28209: PUSH
28210: LD_INT 5
28212: PUSH
28213: LD_INT 6
28215: PUSH
28216: LD_INT 15
28218: PUSH
28219: LD_INT 18
28221: PUSH
28222: LD_INT 7
28224: PUSH
28225: LD_INT 17
28227: PUSH
28228: LD_INT 8
28230: PUSH
28231: LD_INT 20
28233: PUSH
28234: LD_INT 21
28236: PUSH
28237: LD_INT 22
28239: PUSH
28240: LD_INT 72
28242: PUSH
28243: LD_INT 26
28245: PUSH
28246: LD_INT 69
28248: PUSH
28249: LD_INT 39
28251: PUSH
28252: LD_INT 40
28254: PUSH
28255: LD_INT 41
28257: PUSH
28258: LD_INT 42
28260: PUSH
28261: LD_INT 43
28263: PUSH
28264: LD_INT 48
28266: PUSH
28267: LD_INT 49
28269: PUSH
28270: LD_INT 50
28272: PUSH
28273: LD_INT 51
28275: PUSH
28276: LD_INT 52
28278: PUSH
28279: LD_INT 53
28281: PUSH
28282: LD_INT 54
28284: PUSH
28285: LD_INT 55
28287: PUSH
28288: LD_INT 56
28290: PUSH
28291: LD_INT 60
28293: PUSH
28294: LD_INT 61
28296: PUSH
28297: LD_INT 62
28299: PUSH
28300: LD_INT 66
28302: PUSH
28303: LD_INT 67
28305: PUSH
28306: LD_INT 68
28308: PUSH
28309: LD_INT 81
28311: PUSH
28312: LD_INT 82
28314: PUSH
28315: LD_INT 83
28317: PUSH
28318: LD_INT 84
28320: PUSH
28321: LD_INT 85
28323: PUSH
28324: LD_INT 87
28326: PUSH
28327: LD_INT 88
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: ST_TO_ADDR
28386: GO 28619
28388: LD_INT 3
28390: DOUBLE
28391: EQUAL
28392: IFTRUE 28396
28394: GO 28618
28396: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28397: LD_ADDR_VAR 0 4
28401: PUSH
28402: LD_INT 46
28404: PUSH
28405: LD_INT 47
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: LD_INT 2
28413: PUSH
28414: LD_INT 82
28416: PUSH
28417: LD_INT 83
28419: PUSH
28420: LD_INT 84
28422: PUSH
28423: LD_INT 85
28425: PUSH
28426: LD_INT 86
28428: PUSH
28429: LD_INT 11
28431: PUSH
28432: LD_INT 9
28434: PUSH
28435: LD_INT 20
28437: PUSH
28438: LD_INT 19
28440: PUSH
28441: LD_INT 21
28443: PUSH
28444: LD_INT 24
28446: PUSH
28447: LD_INT 22
28449: PUSH
28450: LD_INT 25
28452: PUSH
28453: LD_INT 28
28455: PUSH
28456: LD_INT 29
28458: PUSH
28459: LD_INT 30
28461: PUSH
28462: LD_INT 31
28464: PUSH
28465: LD_INT 37
28467: PUSH
28468: LD_INT 38
28470: PUSH
28471: LD_INT 32
28473: PUSH
28474: LD_INT 27
28476: PUSH
28477: LD_INT 33
28479: PUSH
28480: LD_INT 69
28482: PUSH
28483: LD_INT 39
28485: PUSH
28486: LD_INT 34
28488: PUSH
28489: LD_INT 40
28491: PUSH
28492: LD_INT 71
28494: PUSH
28495: LD_INT 23
28497: PUSH
28498: LD_INT 44
28500: PUSH
28501: LD_INT 48
28503: PUSH
28504: LD_INT 49
28506: PUSH
28507: LD_INT 50
28509: PUSH
28510: LD_INT 51
28512: PUSH
28513: LD_INT 52
28515: PUSH
28516: LD_INT 53
28518: PUSH
28519: LD_INT 54
28521: PUSH
28522: LD_INT 55
28524: PUSH
28525: LD_INT 56
28527: PUSH
28528: LD_INT 57
28530: PUSH
28531: LD_INT 58
28533: PUSH
28534: LD_INT 59
28536: PUSH
28537: LD_INT 63
28539: PUSH
28540: LD_INT 64
28542: PUSH
28543: LD_INT 65
28545: PUSH
28546: LD_INT 82
28548: PUSH
28549: LD_INT 83
28551: PUSH
28552: LD_INT 84
28554: PUSH
28555: LD_INT 85
28557: PUSH
28558: LD_INT 86
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: ST_TO_ADDR
28616: GO 28619
28618: POP
// if state > - 1 and state < 3 then
28619: LD_VAR 0 3
28623: PUSH
28624: LD_INT 1
28626: NEG
28627: GREATER
28628: PUSH
28629: LD_VAR 0 3
28633: PUSH
28634: LD_INT 3
28636: LESS
28637: AND
28638: IFFALSE 28695
// for i in result do
28640: LD_ADDR_VAR 0 5
28644: PUSH
28645: LD_VAR 0 4
28649: PUSH
28650: FOR_IN
28651: IFFALSE 28693
// if GetTech ( i , side ) <> state then
28653: LD_VAR 0 5
28657: PPUSH
28658: LD_VAR 0 1
28662: PPUSH
28663: CALL_OW 321
28667: PUSH
28668: LD_VAR 0 3
28672: NONEQUAL
28673: IFFALSE 28691
// result := result diff i ;
28675: LD_ADDR_VAR 0 4
28679: PUSH
28680: LD_VAR 0 4
28684: PUSH
28685: LD_VAR 0 5
28689: DIFF
28690: ST_TO_ADDR
28691: GO 28650
28693: POP
28694: POP
// end ;
28695: LD_VAR 0 4
28699: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28700: LD_INT 0
28702: PPUSH
28703: PPUSH
28704: PPUSH
// result := true ;
28705: LD_ADDR_VAR 0 3
28709: PUSH
28710: LD_INT 1
28712: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28713: LD_ADDR_VAR 0 5
28717: PUSH
28718: LD_VAR 0 2
28722: PPUSH
28723: CALL_OW 480
28727: ST_TO_ADDR
// if not tmp then
28728: LD_VAR 0 5
28732: NOT
28733: IFFALSE 28737
// exit ;
28735: GO 28786
// for i in tmp do
28737: LD_ADDR_VAR 0 4
28741: PUSH
28742: LD_VAR 0 5
28746: PUSH
28747: FOR_IN
28748: IFFALSE 28784
// if GetTech ( i , side ) <> state_researched then
28750: LD_VAR 0 4
28754: PPUSH
28755: LD_VAR 0 1
28759: PPUSH
28760: CALL_OW 321
28764: PUSH
28765: LD_INT 2
28767: NONEQUAL
28768: IFFALSE 28782
// begin result := false ;
28770: LD_ADDR_VAR 0 3
28774: PUSH
28775: LD_INT 0
28777: ST_TO_ADDR
// exit ;
28778: POP
28779: POP
28780: GO 28786
// end ;
28782: GO 28747
28784: POP
28785: POP
// end ;
28786: LD_VAR 0 3
28790: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28791: LD_INT 0
28793: PPUSH
28794: PPUSH
28795: PPUSH
28796: PPUSH
28797: PPUSH
28798: PPUSH
28799: PPUSH
28800: PPUSH
28801: PPUSH
28802: PPUSH
28803: PPUSH
28804: PPUSH
28805: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28806: LD_VAR 0 1
28810: NOT
28811: PUSH
28812: LD_VAR 0 1
28816: PPUSH
28817: CALL_OW 257
28821: PUSH
28822: LD_INT 9
28824: NONEQUAL
28825: OR
28826: IFFALSE 28830
// exit ;
28828: GO 29403
// side := GetSide ( unit ) ;
28830: LD_ADDR_VAR 0 9
28834: PUSH
28835: LD_VAR 0 1
28839: PPUSH
28840: CALL_OW 255
28844: ST_TO_ADDR
// tech_space := tech_spacanom ;
28845: LD_ADDR_VAR 0 12
28849: PUSH
28850: LD_INT 29
28852: ST_TO_ADDR
// tech_time := tech_taurad ;
28853: LD_ADDR_VAR 0 13
28857: PUSH
28858: LD_INT 28
28860: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28861: LD_ADDR_VAR 0 11
28865: PUSH
28866: LD_VAR 0 1
28870: PPUSH
28871: CALL_OW 310
28875: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28876: LD_VAR 0 11
28880: PPUSH
28881: CALL_OW 247
28885: PUSH
28886: LD_INT 2
28888: EQUAL
28889: IFFALSE 28893
// exit ;
28891: GO 29403
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28893: LD_ADDR_VAR 0 8
28897: PUSH
28898: LD_INT 81
28900: PUSH
28901: LD_VAR 0 9
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 3
28912: PUSH
28913: LD_INT 21
28915: PUSH
28916: LD_INT 3
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PPUSH
28931: CALL_OW 69
28935: ST_TO_ADDR
// if not tmp then
28936: LD_VAR 0 8
28940: NOT
28941: IFFALSE 28945
// exit ;
28943: GO 29403
// if in_unit then
28945: LD_VAR 0 11
28949: IFFALSE 28973
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28951: LD_ADDR_VAR 0 10
28955: PUSH
28956: LD_VAR 0 8
28960: PPUSH
28961: LD_VAR 0 11
28965: PPUSH
28966: CALL_OW 74
28970: ST_TO_ADDR
28971: GO 28993
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28973: LD_ADDR_VAR 0 10
28977: PUSH
28978: LD_VAR 0 8
28982: PPUSH
28983: LD_VAR 0 1
28987: PPUSH
28988: CALL_OW 74
28992: ST_TO_ADDR
// if not enemy then
28993: LD_VAR 0 10
28997: NOT
28998: IFFALSE 29002
// exit ;
29000: GO 29403
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29002: LD_VAR 0 11
29006: PUSH
29007: LD_VAR 0 11
29011: PPUSH
29012: LD_VAR 0 10
29016: PPUSH
29017: CALL_OW 296
29021: PUSH
29022: LD_INT 13
29024: GREATER
29025: AND
29026: PUSH
29027: LD_VAR 0 1
29031: PPUSH
29032: LD_VAR 0 10
29036: PPUSH
29037: CALL_OW 296
29041: PUSH
29042: LD_INT 12
29044: GREATER
29045: OR
29046: IFFALSE 29050
// exit ;
29048: GO 29403
// missile := [ 1 ] ;
29050: LD_ADDR_VAR 0 14
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: EMPTY
29059: LIST
29060: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29061: LD_VAR 0 9
29065: PPUSH
29066: LD_VAR 0 12
29070: PPUSH
29071: CALL_OW 325
29075: IFFALSE 29104
// missile := Replace ( missile , missile + 1 , 2 ) ;
29077: LD_ADDR_VAR 0 14
29081: PUSH
29082: LD_VAR 0 14
29086: PPUSH
29087: LD_VAR 0 14
29091: PUSH
29092: LD_INT 1
29094: PLUS
29095: PPUSH
29096: LD_INT 2
29098: PPUSH
29099: CALL_OW 1
29103: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29104: LD_VAR 0 9
29108: PPUSH
29109: LD_VAR 0 13
29113: PPUSH
29114: CALL_OW 325
29118: PUSH
29119: LD_VAR 0 10
29123: PPUSH
29124: CALL_OW 255
29128: PPUSH
29129: LD_VAR 0 13
29133: PPUSH
29134: CALL_OW 325
29138: NOT
29139: AND
29140: IFFALSE 29169
// missile := Replace ( missile , missile + 1 , 3 ) ;
29142: LD_ADDR_VAR 0 14
29146: PUSH
29147: LD_VAR 0 14
29151: PPUSH
29152: LD_VAR 0 14
29156: PUSH
29157: LD_INT 1
29159: PLUS
29160: PPUSH
29161: LD_INT 3
29163: PPUSH
29164: CALL_OW 1
29168: ST_TO_ADDR
// if missile < 2 then
29169: LD_VAR 0 14
29173: PUSH
29174: LD_INT 2
29176: LESS
29177: IFFALSE 29181
// exit ;
29179: GO 29403
// x := GetX ( enemy ) ;
29181: LD_ADDR_VAR 0 4
29185: PUSH
29186: LD_VAR 0 10
29190: PPUSH
29191: CALL_OW 250
29195: ST_TO_ADDR
// y := GetY ( enemy ) ;
29196: LD_ADDR_VAR 0 5
29200: PUSH
29201: LD_VAR 0 10
29205: PPUSH
29206: CALL_OW 251
29210: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29211: LD_ADDR_VAR 0 6
29215: PUSH
29216: LD_VAR 0 4
29220: PUSH
29221: LD_INT 1
29223: NEG
29224: PPUSH
29225: LD_INT 1
29227: PPUSH
29228: CALL_OW 12
29232: PLUS
29233: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29234: LD_ADDR_VAR 0 7
29238: PUSH
29239: LD_VAR 0 5
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PPUSH
29248: LD_INT 1
29250: PPUSH
29251: CALL_OW 12
29255: PLUS
29256: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29257: LD_VAR 0 6
29261: PPUSH
29262: LD_VAR 0 7
29266: PPUSH
29267: CALL_OW 488
29271: NOT
29272: IFFALSE 29294
// begin _x := x ;
29274: LD_ADDR_VAR 0 6
29278: PUSH
29279: LD_VAR 0 4
29283: ST_TO_ADDR
// _y := y ;
29284: LD_ADDR_VAR 0 7
29288: PUSH
29289: LD_VAR 0 5
29293: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29294: LD_ADDR_VAR 0 3
29298: PUSH
29299: LD_INT 1
29301: PPUSH
29302: LD_VAR 0 14
29306: PPUSH
29307: CALL_OW 12
29311: ST_TO_ADDR
// case i of 1 :
29312: LD_VAR 0 3
29316: PUSH
29317: LD_INT 1
29319: DOUBLE
29320: EQUAL
29321: IFTRUE 29325
29323: GO 29342
29325: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29326: LD_VAR 0 1
29330: PPUSH
29331: LD_VAR 0 10
29335: PPUSH
29336: CALL_OW 115
29340: GO 29403
29342: LD_INT 2
29344: DOUBLE
29345: EQUAL
29346: IFTRUE 29350
29348: GO 29372
29350: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29351: LD_VAR 0 1
29355: PPUSH
29356: LD_VAR 0 6
29360: PPUSH
29361: LD_VAR 0 7
29365: PPUSH
29366: CALL_OW 153
29370: GO 29403
29372: LD_INT 3
29374: DOUBLE
29375: EQUAL
29376: IFTRUE 29380
29378: GO 29402
29380: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29381: LD_VAR 0 1
29385: PPUSH
29386: LD_VAR 0 6
29390: PPUSH
29391: LD_VAR 0 7
29395: PPUSH
29396: CALL_OW 154
29400: GO 29403
29402: POP
// end ;
29403: LD_VAR 0 2
29407: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29408: LD_INT 0
29410: PPUSH
29411: PPUSH
29412: PPUSH
29413: PPUSH
29414: PPUSH
29415: PPUSH
// if not unit or not building then
29416: LD_VAR 0 1
29420: NOT
29421: PUSH
29422: LD_VAR 0 2
29426: NOT
29427: OR
29428: IFFALSE 29432
// exit ;
29430: GO 29590
// x := GetX ( building ) ;
29432: LD_ADDR_VAR 0 5
29436: PUSH
29437: LD_VAR 0 2
29441: PPUSH
29442: CALL_OW 250
29446: ST_TO_ADDR
// y := GetY ( building ) ;
29447: LD_ADDR_VAR 0 6
29451: PUSH
29452: LD_VAR 0 2
29456: PPUSH
29457: CALL_OW 251
29461: ST_TO_ADDR
// for i = 0 to 5 do
29462: LD_ADDR_VAR 0 4
29466: PUSH
29467: DOUBLE
29468: LD_INT 0
29470: DEC
29471: ST_TO_ADDR
29472: LD_INT 5
29474: PUSH
29475: FOR_TO
29476: IFFALSE 29588
// begin _x := ShiftX ( x , i , 3 ) ;
29478: LD_ADDR_VAR 0 7
29482: PUSH
29483: LD_VAR 0 5
29487: PPUSH
29488: LD_VAR 0 4
29492: PPUSH
29493: LD_INT 3
29495: PPUSH
29496: CALL_OW 272
29500: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29501: LD_ADDR_VAR 0 8
29505: PUSH
29506: LD_VAR 0 6
29510: PPUSH
29511: LD_VAR 0 4
29515: PPUSH
29516: LD_INT 3
29518: PPUSH
29519: CALL_OW 273
29523: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29524: LD_VAR 0 7
29528: PPUSH
29529: LD_VAR 0 8
29533: PPUSH
29534: CALL_OW 488
29538: NOT
29539: IFFALSE 29543
// continue ;
29541: GO 29475
// if HexInfo ( _x , _y ) = 0 then
29543: LD_VAR 0 7
29547: PPUSH
29548: LD_VAR 0 8
29552: PPUSH
29553: CALL_OW 428
29557: PUSH
29558: LD_INT 0
29560: EQUAL
29561: IFFALSE 29586
// begin ComMoveXY ( unit , _x , _y ) ;
29563: LD_VAR 0 1
29567: PPUSH
29568: LD_VAR 0 7
29572: PPUSH
29573: LD_VAR 0 8
29577: PPUSH
29578: CALL_OW 111
// exit ;
29582: POP
29583: POP
29584: GO 29590
// end ; end ;
29586: GO 29475
29588: POP
29589: POP
// end ;
29590: LD_VAR 0 3
29594: RET
// export function ScanBase ( side , base_area ) ; begin
29595: LD_INT 0
29597: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29598: LD_ADDR_VAR 0 3
29602: PUSH
29603: LD_VAR 0 2
29607: PPUSH
29608: LD_INT 81
29610: PUSH
29611: LD_VAR 0 1
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PPUSH
29620: CALL_OW 70
29624: ST_TO_ADDR
// end ;
29625: LD_VAR 0 3
29629: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29630: LD_INT 0
29632: PPUSH
29633: PPUSH
29634: PPUSH
29635: PPUSH
// result := false ;
29636: LD_ADDR_VAR 0 2
29640: PUSH
29641: LD_INT 0
29643: ST_TO_ADDR
// side := GetSide ( unit ) ;
29644: LD_ADDR_VAR 0 3
29648: PUSH
29649: LD_VAR 0 1
29653: PPUSH
29654: CALL_OW 255
29658: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29659: LD_ADDR_VAR 0 4
29663: PUSH
29664: LD_VAR 0 1
29668: PPUSH
29669: CALL_OW 248
29673: ST_TO_ADDR
// case nat of 1 :
29674: LD_VAR 0 4
29678: PUSH
29679: LD_INT 1
29681: DOUBLE
29682: EQUAL
29683: IFTRUE 29687
29685: GO 29698
29687: POP
// tech := tech_lassight ; 2 :
29688: LD_ADDR_VAR 0 5
29692: PUSH
29693: LD_INT 12
29695: ST_TO_ADDR
29696: GO 29737
29698: LD_INT 2
29700: DOUBLE
29701: EQUAL
29702: IFTRUE 29706
29704: GO 29717
29706: POP
// tech := tech_mortar ; 3 :
29707: LD_ADDR_VAR 0 5
29711: PUSH
29712: LD_INT 41
29714: ST_TO_ADDR
29715: GO 29737
29717: LD_INT 3
29719: DOUBLE
29720: EQUAL
29721: IFTRUE 29725
29723: GO 29736
29725: POP
// tech := tech_bazooka ; end ;
29726: LD_ADDR_VAR 0 5
29730: PUSH
29731: LD_INT 44
29733: ST_TO_ADDR
29734: GO 29737
29736: POP
// if Researched ( side , tech ) then
29737: LD_VAR 0 3
29741: PPUSH
29742: LD_VAR 0 5
29746: PPUSH
29747: CALL_OW 325
29751: IFFALSE 29778
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29753: LD_ADDR_VAR 0 2
29757: PUSH
29758: LD_INT 5
29760: PUSH
29761: LD_INT 8
29763: PUSH
29764: LD_INT 9
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: LIST
29771: PUSH
29772: LD_VAR 0 4
29776: ARRAY
29777: ST_TO_ADDR
// end ;
29778: LD_VAR 0 2
29782: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29783: LD_INT 0
29785: PPUSH
29786: PPUSH
29787: PPUSH
// if not mines then
29788: LD_VAR 0 2
29792: NOT
29793: IFFALSE 29797
// exit ;
29795: GO 29941
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29797: LD_ADDR_VAR 0 5
29801: PUSH
29802: LD_INT 81
29804: PUSH
29805: LD_VAR 0 1
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 3
29816: PUSH
29817: LD_INT 21
29819: PUSH
29820: LD_INT 3
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PPUSH
29835: CALL_OW 69
29839: ST_TO_ADDR
// for i in mines do
29840: LD_ADDR_VAR 0 4
29844: PUSH
29845: LD_VAR 0 2
29849: PUSH
29850: FOR_IN
29851: IFFALSE 29939
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29853: LD_VAR 0 4
29857: PUSH
29858: LD_INT 1
29860: ARRAY
29861: PPUSH
29862: LD_VAR 0 4
29866: PUSH
29867: LD_INT 2
29869: ARRAY
29870: PPUSH
29871: CALL_OW 458
29875: NOT
29876: IFFALSE 29880
// continue ;
29878: GO 29850
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29880: LD_VAR 0 4
29884: PUSH
29885: LD_INT 1
29887: ARRAY
29888: PPUSH
29889: LD_VAR 0 4
29893: PUSH
29894: LD_INT 2
29896: ARRAY
29897: PPUSH
29898: CALL_OW 428
29902: PUSH
29903: LD_VAR 0 5
29907: IN
29908: IFFALSE 29937
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29910: LD_VAR 0 4
29914: PUSH
29915: LD_INT 1
29917: ARRAY
29918: PPUSH
29919: LD_VAR 0 4
29923: PUSH
29924: LD_INT 2
29926: ARRAY
29927: PPUSH
29928: LD_VAR 0 1
29932: PPUSH
29933: CALL_OW 456
// end ;
29937: GO 29850
29939: POP
29940: POP
// end ;
29941: LD_VAR 0 3
29945: RET
// export function Count ( array ) ; begin
29946: LD_INT 0
29948: PPUSH
// result := array + 0 ;
29949: LD_ADDR_VAR 0 2
29953: PUSH
29954: LD_VAR 0 1
29958: PUSH
29959: LD_INT 0
29961: PLUS
29962: ST_TO_ADDR
// end ;
29963: LD_VAR 0 2
29967: RET
// export function IsEmpty ( building ) ; begin
29968: LD_INT 0
29970: PPUSH
// if not building then
29971: LD_VAR 0 1
29975: NOT
29976: IFFALSE 29980
// exit ;
29978: GO 30023
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29980: LD_ADDR_VAR 0 2
29984: PUSH
29985: LD_VAR 0 1
29989: PUSH
29990: LD_INT 22
29992: PUSH
29993: LD_VAR 0 1
29997: PPUSH
29998: CALL_OW 255
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 58
30009: PUSH
30010: EMPTY
30011: LIST
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PPUSH
30017: CALL_OW 69
30021: IN
30022: ST_TO_ADDR
// end ;
30023: LD_VAR 0 2
30027: RET
// export function IsNotFull ( building ) ; var places ; begin
30028: LD_INT 0
30030: PPUSH
30031: PPUSH
// if not building then
30032: LD_VAR 0 1
30036: NOT
30037: IFFALSE 30041
// exit ;
30039: GO 30069
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
30041: LD_ADDR_VAR 0 2
30045: PUSH
30046: LD_VAR 0 1
30050: PPUSH
30051: LD_INT 3
30053: PUSH
30054: LD_INT 62
30056: PUSH
30057: EMPTY
30058: LIST
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PPUSH
30064: CALL_OW 72
30068: ST_TO_ADDR
// end ;
30069: LD_VAR 0 2
30073: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30074: LD_INT 0
30076: PPUSH
30077: PPUSH
30078: PPUSH
30079: PPUSH
// tmp := [ ] ;
30080: LD_ADDR_VAR 0 3
30084: PUSH
30085: EMPTY
30086: ST_TO_ADDR
// list := [ ] ;
30087: LD_ADDR_VAR 0 5
30091: PUSH
30092: EMPTY
30093: ST_TO_ADDR
// for i = 16 to 25 do
30094: LD_ADDR_VAR 0 4
30098: PUSH
30099: DOUBLE
30100: LD_INT 16
30102: DEC
30103: ST_TO_ADDR
30104: LD_INT 25
30106: PUSH
30107: FOR_TO
30108: IFFALSE 30181
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30110: LD_ADDR_VAR 0 3
30114: PUSH
30115: LD_VAR 0 3
30119: PUSH
30120: LD_INT 22
30122: PUSH
30123: LD_VAR 0 1
30127: PPUSH
30128: CALL_OW 255
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 91
30139: PUSH
30140: LD_VAR 0 1
30144: PUSH
30145: LD_INT 6
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 30
30155: PUSH
30156: LD_VAR 0 4
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: LIST
30169: PUSH
30170: EMPTY
30171: LIST
30172: PPUSH
30173: CALL_OW 69
30177: ADD
30178: ST_TO_ADDR
30179: GO 30107
30181: POP
30182: POP
// for i = 1 to tmp do
30183: LD_ADDR_VAR 0 4
30187: PUSH
30188: DOUBLE
30189: LD_INT 1
30191: DEC
30192: ST_TO_ADDR
30193: LD_VAR 0 3
30197: PUSH
30198: FOR_TO
30199: IFFALSE 30287
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30201: LD_ADDR_VAR 0 5
30205: PUSH
30206: LD_VAR 0 5
30210: PUSH
30211: LD_VAR 0 3
30215: PUSH
30216: LD_VAR 0 4
30220: ARRAY
30221: PPUSH
30222: CALL_OW 266
30226: PUSH
30227: LD_VAR 0 3
30231: PUSH
30232: LD_VAR 0 4
30236: ARRAY
30237: PPUSH
30238: CALL_OW 250
30242: PUSH
30243: LD_VAR 0 3
30247: PUSH
30248: LD_VAR 0 4
30252: ARRAY
30253: PPUSH
30254: CALL_OW 251
30258: PUSH
30259: LD_VAR 0 3
30263: PUSH
30264: LD_VAR 0 4
30268: ARRAY
30269: PPUSH
30270: CALL_OW 254
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: PUSH
30281: EMPTY
30282: LIST
30283: ADD
30284: ST_TO_ADDR
30285: GO 30198
30287: POP
30288: POP
// result := list ;
30289: LD_ADDR_VAR 0 2
30293: PUSH
30294: LD_VAR 0 5
30298: ST_TO_ADDR
// end ;
30299: LD_VAR 0 2
30303: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30304: LD_INT 0
30306: PPUSH
30307: PPUSH
30308: PPUSH
30309: PPUSH
30310: PPUSH
30311: PPUSH
30312: PPUSH
// if not factory then
30313: LD_VAR 0 1
30317: NOT
30318: IFFALSE 30322
// exit ;
30320: GO 30915
// if control = control_apeman then
30322: LD_VAR 0 4
30326: PUSH
30327: LD_INT 5
30329: EQUAL
30330: IFFALSE 30439
// begin tmp := UnitsInside ( factory ) ;
30332: LD_ADDR_VAR 0 8
30336: PUSH
30337: LD_VAR 0 1
30341: PPUSH
30342: CALL_OW 313
30346: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30347: LD_VAR 0 8
30351: PPUSH
30352: LD_INT 25
30354: PUSH
30355: LD_INT 12
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PPUSH
30362: CALL_OW 72
30366: NOT
30367: IFFALSE 30377
// control := control_manual ;
30369: LD_ADDR_VAR 0 4
30373: PUSH
30374: LD_INT 1
30376: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30377: LD_ADDR_VAR 0 8
30381: PUSH
30382: LD_VAR 0 1
30386: PPUSH
30387: CALL 30074 0 1
30391: ST_TO_ADDR
// if tmp then
30392: LD_VAR 0 8
30396: IFFALSE 30439
// begin for i in tmp do
30398: LD_ADDR_VAR 0 7
30402: PUSH
30403: LD_VAR 0 8
30407: PUSH
30408: FOR_IN
30409: IFFALSE 30437
// if i [ 1 ] = b_ext_radio then
30411: LD_VAR 0 7
30415: PUSH
30416: LD_INT 1
30418: ARRAY
30419: PUSH
30420: LD_INT 22
30422: EQUAL
30423: IFFALSE 30435
// begin control := control_remote ;
30425: LD_ADDR_VAR 0 4
30429: PUSH
30430: LD_INT 2
30432: ST_TO_ADDR
// break ;
30433: GO 30437
// end ;
30435: GO 30408
30437: POP
30438: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30439: LD_VAR 0 1
30443: PPUSH
30444: LD_VAR 0 2
30448: PPUSH
30449: LD_VAR 0 3
30453: PPUSH
30454: LD_VAR 0 4
30458: PPUSH
30459: LD_VAR 0 5
30463: PPUSH
30464: CALL_OW 448
30468: IFFALSE 30503
// begin result := [ chassis , engine , control , weapon ] ;
30470: LD_ADDR_VAR 0 6
30474: PUSH
30475: LD_VAR 0 2
30479: PUSH
30480: LD_VAR 0 3
30484: PUSH
30485: LD_VAR 0 4
30489: PUSH
30490: LD_VAR 0 5
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: ST_TO_ADDR
// exit ;
30501: GO 30915
// end ; _chassis := AvailableChassisList ( factory ) ;
30503: LD_ADDR_VAR 0 9
30507: PUSH
30508: LD_VAR 0 1
30512: PPUSH
30513: CALL_OW 475
30517: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30518: LD_ADDR_VAR 0 11
30522: PUSH
30523: LD_VAR 0 1
30527: PPUSH
30528: CALL_OW 476
30532: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30533: LD_ADDR_VAR 0 12
30537: PUSH
30538: LD_VAR 0 1
30542: PPUSH
30543: CALL_OW 477
30547: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30548: LD_ADDR_VAR 0 10
30552: PUSH
30553: LD_VAR 0 1
30557: PPUSH
30558: CALL_OW 478
30562: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30563: LD_VAR 0 9
30567: NOT
30568: PUSH
30569: LD_VAR 0 11
30573: NOT
30574: OR
30575: PUSH
30576: LD_VAR 0 12
30580: NOT
30581: OR
30582: PUSH
30583: LD_VAR 0 10
30587: NOT
30588: OR
30589: IFFALSE 30624
// begin result := [ chassis , engine , control , weapon ] ;
30591: LD_ADDR_VAR 0 6
30595: PUSH
30596: LD_VAR 0 2
30600: PUSH
30601: LD_VAR 0 3
30605: PUSH
30606: LD_VAR 0 4
30610: PUSH
30611: LD_VAR 0 5
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: ST_TO_ADDR
// exit ;
30622: GO 30915
// end ; if not chassis in _chassis then
30624: LD_VAR 0 2
30628: PUSH
30629: LD_VAR 0 9
30633: IN
30634: NOT
30635: IFFALSE 30661
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30637: LD_ADDR_VAR 0 2
30641: PUSH
30642: LD_VAR 0 9
30646: PUSH
30647: LD_INT 1
30649: PPUSH
30650: LD_VAR 0 9
30654: PPUSH
30655: CALL_OW 12
30659: ARRAY
30660: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30661: LD_VAR 0 2
30665: PPUSH
30666: LD_VAR 0 3
30670: PPUSH
30671: CALL 30920 0 2
30675: NOT
30676: IFFALSE 30735
// repeat engine := _engine [ 1 ] ;
30678: LD_ADDR_VAR 0 3
30682: PUSH
30683: LD_VAR 0 11
30687: PUSH
30688: LD_INT 1
30690: ARRAY
30691: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30692: LD_ADDR_VAR 0 11
30696: PUSH
30697: LD_VAR 0 11
30701: PPUSH
30702: LD_INT 1
30704: PPUSH
30705: CALL_OW 3
30709: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30710: LD_VAR 0 2
30714: PPUSH
30715: LD_VAR 0 3
30719: PPUSH
30720: CALL 30920 0 2
30724: PUSH
30725: LD_VAR 0 11
30729: PUSH
30730: EMPTY
30731: EQUAL
30732: OR
30733: IFFALSE 30678
// if not control in _control then
30735: LD_VAR 0 4
30739: PUSH
30740: LD_VAR 0 12
30744: IN
30745: NOT
30746: IFFALSE 30772
// control := _control [ rand ( 1 , _control ) ] ;
30748: LD_ADDR_VAR 0 4
30752: PUSH
30753: LD_VAR 0 12
30757: PUSH
30758: LD_INT 1
30760: PPUSH
30761: LD_VAR 0 12
30765: PPUSH
30766: CALL_OW 12
30770: ARRAY
30771: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30772: LD_VAR 0 2
30776: PPUSH
30777: LD_VAR 0 5
30781: PPUSH
30782: CALL 31140 0 2
30786: NOT
30787: IFFALSE 30846
// repeat weapon := _weapon [ 1 ] ;
30789: LD_ADDR_VAR 0 5
30793: PUSH
30794: LD_VAR 0 10
30798: PUSH
30799: LD_INT 1
30801: ARRAY
30802: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30803: LD_ADDR_VAR 0 10
30807: PUSH
30808: LD_VAR 0 10
30812: PPUSH
30813: LD_INT 1
30815: PPUSH
30816: CALL_OW 3
30820: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30821: LD_VAR 0 2
30825: PPUSH
30826: LD_VAR 0 5
30830: PPUSH
30831: CALL 31140 0 2
30835: PUSH
30836: LD_VAR 0 10
30840: PUSH
30841: EMPTY
30842: EQUAL
30843: OR
30844: IFFALSE 30789
// result := [ ] ;
30846: LD_ADDR_VAR 0 6
30850: PUSH
30851: EMPTY
30852: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30853: LD_VAR 0 1
30857: PPUSH
30858: LD_VAR 0 2
30862: PPUSH
30863: LD_VAR 0 3
30867: PPUSH
30868: LD_VAR 0 4
30872: PPUSH
30873: LD_VAR 0 5
30877: PPUSH
30878: CALL_OW 448
30882: IFFALSE 30915
// result := [ chassis , engine , control , weapon ] ;
30884: LD_ADDR_VAR 0 6
30888: PUSH
30889: LD_VAR 0 2
30893: PUSH
30894: LD_VAR 0 3
30898: PUSH
30899: LD_VAR 0 4
30903: PUSH
30904: LD_VAR 0 5
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: ST_TO_ADDR
// end ;
30915: LD_VAR 0 6
30919: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30920: LD_INT 0
30922: PPUSH
// if not chassis or not engine then
30923: LD_VAR 0 1
30927: NOT
30928: PUSH
30929: LD_VAR 0 2
30933: NOT
30934: OR
30935: IFFALSE 30939
// exit ;
30937: GO 31135
// case engine of engine_solar :
30939: LD_VAR 0 2
30943: PUSH
30944: LD_INT 2
30946: DOUBLE
30947: EQUAL
30948: IFTRUE 30952
30950: GO 30990
30952: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30953: LD_ADDR_VAR 0 3
30957: PUSH
30958: LD_INT 11
30960: PUSH
30961: LD_INT 12
30963: PUSH
30964: LD_INT 13
30966: PUSH
30967: LD_INT 14
30969: PUSH
30970: LD_INT 1
30972: PUSH
30973: LD_INT 2
30975: PUSH
30976: LD_INT 3
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: ST_TO_ADDR
30988: GO 31119
30990: LD_INT 1
30992: DOUBLE
30993: EQUAL
30994: IFTRUE 30998
30996: GO 31060
30998: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30999: LD_ADDR_VAR 0 3
31003: PUSH
31004: LD_INT 11
31006: PUSH
31007: LD_INT 12
31009: PUSH
31010: LD_INT 13
31012: PUSH
31013: LD_INT 14
31015: PUSH
31016: LD_INT 1
31018: PUSH
31019: LD_INT 2
31021: PUSH
31022: LD_INT 3
31024: PUSH
31025: LD_INT 4
31027: PUSH
31028: LD_INT 5
31030: PUSH
31031: LD_INT 21
31033: PUSH
31034: LD_INT 23
31036: PUSH
31037: LD_INT 22
31039: PUSH
31040: LD_INT 24
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: ST_TO_ADDR
31058: GO 31119
31060: LD_INT 3
31062: DOUBLE
31063: EQUAL
31064: IFTRUE 31068
31066: GO 31118
31068: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31069: LD_ADDR_VAR 0 3
31073: PUSH
31074: LD_INT 13
31076: PUSH
31077: LD_INT 14
31079: PUSH
31080: LD_INT 2
31082: PUSH
31083: LD_INT 3
31085: PUSH
31086: LD_INT 4
31088: PUSH
31089: LD_INT 5
31091: PUSH
31092: LD_INT 21
31094: PUSH
31095: LD_INT 22
31097: PUSH
31098: LD_INT 23
31100: PUSH
31101: LD_INT 24
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: ST_TO_ADDR
31116: GO 31119
31118: POP
// result := ( chassis in result ) ;
31119: LD_ADDR_VAR 0 3
31123: PUSH
31124: LD_VAR 0 1
31128: PUSH
31129: LD_VAR 0 3
31133: IN
31134: ST_TO_ADDR
// end ;
31135: LD_VAR 0 3
31139: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31140: LD_INT 0
31142: PPUSH
// if not chassis or not weapon then
31143: LD_VAR 0 1
31147: NOT
31148: PUSH
31149: LD_VAR 0 2
31153: NOT
31154: OR
31155: IFFALSE 31159
// exit ;
31157: GO 32219
// case weapon of us_machine_gun :
31159: LD_VAR 0 2
31163: PUSH
31164: LD_INT 2
31166: DOUBLE
31167: EQUAL
31168: IFTRUE 31172
31170: GO 31202
31172: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31173: LD_ADDR_VAR 0 3
31177: PUSH
31178: LD_INT 1
31180: PUSH
31181: LD_INT 2
31183: PUSH
31184: LD_INT 3
31186: PUSH
31187: LD_INT 4
31189: PUSH
31190: LD_INT 5
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: ST_TO_ADDR
31200: GO 32203
31202: LD_INT 3
31204: DOUBLE
31205: EQUAL
31206: IFTRUE 31210
31208: GO 31240
31210: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31211: LD_ADDR_VAR 0 3
31215: PUSH
31216: LD_INT 1
31218: PUSH
31219: LD_INT 2
31221: PUSH
31222: LD_INT 3
31224: PUSH
31225: LD_INT 4
31227: PUSH
31228: LD_INT 5
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: ST_TO_ADDR
31238: GO 32203
31240: LD_INT 11
31242: DOUBLE
31243: EQUAL
31244: IFTRUE 31248
31246: GO 31278
31248: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31249: LD_ADDR_VAR 0 3
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: LD_INT 2
31259: PUSH
31260: LD_INT 3
31262: PUSH
31263: LD_INT 4
31265: PUSH
31266: LD_INT 5
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: ST_TO_ADDR
31276: GO 32203
31278: LD_INT 4
31280: DOUBLE
31281: EQUAL
31282: IFTRUE 31286
31284: GO 31312
31286: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31287: LD_ADDR_VAR 0 3
31291: PUSH
31292: LD_INT 2
31294: PUSH
31295: LD_INT 3
31297: PUSH
31298: LD_INT 4
31300: PUSH
31301: LD_INT 5
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: ST_TO_ADDR
31310: GO 32203
31312: LD_INT 5
31314: DOUBLE
31315: EQUAL
31316: IFTRUE 31320
31318: GO 31346
31320: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31321: LD_ADDR_VAR 0 3
31325: PUSH
31326: LD_INT 2
31328: PUSH
31329: LD_INT 3
31331: PUSH
31332: LD_INT 4
31334: PUSH
31335: LD_INT 5
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: ST_TO_ADDR
31344: GO 32203
31346: LD_INT 9
31348: DOUBLE
31349: EQUAL
31350: IFTRUE 31354
31352: GO 31380
31354: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31355: LD_ADDR_VAR 0 3
31359: PUSH
31360: LD_INT 2
31362: PUSH
31363: LD_INT 3
31365: PUSH
31366: LD_INT 4
31368: PUSH
31369: LD_INT 5
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: ST_TO_ADDR
31378: GO 32203
31380: LD_INT 7
31382: DOUBLE
31383: EQUAL
31384: IFTRUE 31388
31386: GO 31414
31388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31389: LD_ADDR_VAR 0 3
31393: PUSH
31394: LD_INT 2
31396: PUSH
31397: LD_INT 3
31399: PUSH
31400: LD_INT 4
31402: PUSH
31403: LD_INT 5
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: ST_TO_ADDR
31412: GO 32203
31414: LD_INT 12
31416: DOUBLE
31417: EQUAL
31418: IFTRUE 31422
31420: GO 31448
31422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31423: LD_ADDR_VAR 0 3
31427: PUSH
31428: LD_INT 2
31430: PUSH
31431: LD_INT 3
31433: PUSH
31434: LD_INT 4
31436: PUSH
31437: LD_INT 5
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: ST_TO_ADDR
31446: GO 32203
31448: LD_INT 13
31450: DOUBLE
31451: EQUAL
31452: IFTRUE 31456
31454: GO 31482
31456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31457: LD_ADDR_VAR 0 3
31461: PUSH
31462: LD_INT 2
31464: PUSH
31465: LD_INT 3
31467: PUSH
31468: LD_INT 4
31470: PUSH
31471: LD_INT 5
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: ST_TO_ADDR
31480: GO 32203
31482: LD_INT 14
31484: DOUBLE
31485: EQUAL
31486: IFTRUE 31490
31488: GO 31508
31490: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31491: LD_ADDR_VAR 0 3
31495: PUSH
31496: LD_INT 4
31498: PUSH
31499: LD_INT 5
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: ST_TO_ADDR
31506: GO 32203
31508: LD_INT 6
31510: DOUBLE
31511: EQUAL
31512: IFTRUE 31516
31514: GO 31534
31516: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31517: LD_ADDR_VAR 0 3
31521: PUSH
31522: LD_INT 4
31524: PUSH
31525: LD_INT 5
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: ST_TO_ADDR
31532: GO 32203
31534: LD_INT 10
31536: DOUBLE
31537: EQUAL
31538: IFTRUE 31542
31540: GO 31560
31542: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31543: LD_ADDR_VAR 0 3
31547: PUSH
31548: LD_INT 4
31550: PUSH
31551: LD_INT 5
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: ST_TO_ADDR
31558: GO 32203
31560: LD_INT 22
31562: DOUBLE
31563: EQUAL
31564: IFTRUE 31568
31566: GO 31594
31568: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31569: LD_ADDR_VAR 0 3
31573: PUSH
31574: LD_INT 11
31576: PUSH
31577: LD_INT 12
31579: PUSH
31580: LD_INT 13
31582: PUSH
31583: LD_INT 14
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: ST_TO_ADDR
31592: GO 32203
31594: LD_INT 23
31596: DOUBLE
31597: EQUAL
31598: IFTRUE 31602
31600: GO 31628
31602: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31603: LD_ADDR_VAR 0 3
31607: PUSH
31608: LD_INT 11
31610: PUSH
31611: LD_INT 12
31613: PUSH
31614: LD_INT 13
31616: PUSH
31617: LD_INT 14
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: ST_TO_ADDR
31626: GO 32203
31628: LD_INT 24
31630: DOUBLE
31631: EQUAL
31632: IFTRUE 31636
31634: GO 31662
31636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31637: LD_ADDR_VAR 0 3
31641: PUSH
31642: LD_INT 11
31644: PUSH
31645: LD_INT 12
31647: PUSH
31648: LD_INT 13
31650: PUSH
31651: LD_INT 14
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: ST_TO_ADDR
31660: GO 32203
31662: LD_INT 30
31664: DOUBLE
31665: EQUAL
31666: IFTRUE 31670
31668: GO 31696
31670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31671: LD_ADDR_VAR 0 3
31675: PUSH
31676: LD_INT 11
31678: PUSH
31679: LD_INT 12
31681: PUSH
31682: LD_INT 13
31684: PUSH
31685: LD_INT 14
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: ST_TO_ADDR
31694: GO 32203
31696: LD_INT 25
31698: DOUBLE
31699: EQUAL
31700: IFTRUE 31704
31702: GO 31722
31704: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31705: LD_ADDR_VAR 0 3
31709: PUSH
31710: LD_INT 13
31712: PUSH
31713: LD_INT 14
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: ST_TO_ADDR
31720: GO 32203
31722: LD_INT 27
31724: DOUBLE
31725: EQUAL
31726: IFTRUE 31730
31728: GO 31748
31730: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31731: LD_ADDR_VAR 0 3
31735: PUSH
31736: LD_INT 13
31738: PUSH
31739: LD_INT 14
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: ST_TO_ADDR
31746: GO 32203
31748: LD_INT 92
31750: DOUBLE
31751: EQUAL
31752: IFTRUE 31756
31754: GO 31782
31756: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31757: LD_ADDR_VAR 0 3
31761: PUSH
31762: LD_INT 11
31764: PUSH
31765: LD_INT 12
31767: PUSH
31768: LD_INT 13
31770: PUSH
31771: LD_INT 14
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: ST_TO_ADDR
31780: GO 32203
31782: LD_INT 28
31784: DOUBLE
31785: EQUAL
31786: IFTRUE 31790
31788: GO 31808
31790: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31791: LD_ADDR_VAR 0 3
31795: PUSH
31796: LD_INT 13
31798: PUSH
31799: LD_INT 14
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: ST_TO_ADDR
31806: GO 32203
31808: LD_INT 29
31810: DOUBLE
31811: EQUAL
31812: IFTRUE 31816
31814: GO 31834
31816: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31817: LD_ADDR_VAR 0 3
31821: PUSH
31822: LD_INT 13
31824: PUSH
31825: LD_INT 14
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: ST_TO_ADDR
31832: GO 32203
31834: LD_INT 31
31836: DOUBLE
31837: EQUAL
31838: IFTRUE 31842
31840: GO 31860
31842: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31843: LD_ADDR_VAR 0 3
31847: PUSH
31848: LD_INT 13
31850: PUSH
31851: LD_INT 14
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: ST_TO_ADDR
31858: GO 32203
31860: LD_INT 26
31862: DOUBLE
31863: EQUAL
31864: IFTRUE 31868
31866: GO 31886
31868: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31869: LD_ADDR_VAR 0 3
31873: PUSH
31874: LD_INT 13
31876: PUSH
31877: LD_INT 14
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: ST_TO_ADDR
31884: GO 32203
31886: LD_INT 42
31888: DOUBLE
31889: EQUAL
31890: IFTRUE 31894
31892: GO 31920
31894: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31895: LD_ADDR_VAR 0 3
31899: PUSH
31900: LD_INT 21
31902: PUSH
31903: LD_INT 22
31905: PUSH
31906: LD_INT 23
31908: PUSH
31909: LD_INT 24
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: ST_TO_ADDR
31918: GO 32203
31920: LD_INT 43
31922: DOUBLE
31923: EQUAL
31924: IFTRUE 31928
31926: GO 31954
31928: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31929: LD_ADDR_VAR 0 3
31933: PUSH
31934: LD_INT 21
31936: PUSH
31937: LD_INT 22
31939: PUSH
31940: LD_INT 23
31942: PUSH
31943: LD_INT 24
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: ST_TO_ADDR
31952: GO 32203
31954: LD_INT 44
31956: DOUBLE
31957: EQUAL
31958: IFTRUE 31962
31960: GO 31988
31962: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31963: LD_ADDR_VAR 0 3
31967: PUSH
31968: LD_INT 21
31970: PUSH
31971: LD_INT 22
31973: PUSH
31974: LD_INT 23
31976: PUSH
31977: LD_INT 24
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: ST_TO_ADDR
31986: GO 32203
31988: LD_INT 45
31990: DOUBLE
31991: EQUAL
31992: IFTRUE 31996
31994: GO 32022
31996: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31997: LD_ADDR_VAR 0 3
32001: PUSH
32002: LD_INT 21
32004: PUSH
32005: LD_INT 22
32007: PUSH
32008: LD_INT 23
32010: PUSH
32011: LD_INT 24
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: ST_TO_ADDR
32020: GO 32203
32022: LD_INT 49
32024: DOUBLE
32025: EQUAL
32026: IFTRUE 32030
32028: GO 32056
32030: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32031: LD_ADDR_VAR 0 3
32035: PUSH
32036: LD_INT 21
32038: PUSH
32039: LD_INT 22
32041: PUSH
32042: LD_INT 23
32044: PUSH
32045: LD_INT 24
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: ST_TO_ADDR
32054: GO 32203
32056: LD_INT 51
32058: DOUBLE
32059: EQUAL
32060: IFTRUE 32064
32062: GO 32090
32064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32065: LD_ADDR_VAR 0 3
32069: PUSH
32070: LD_INT 21
32072: PUSH
32073: LD_INT 22
32075: PUSH
32076: LD_INT 23
32078: PUSH
32079: LD_INT 24
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: ST_TO_ADDR
32088: GO 32203
32090: LD_INT 52
32092: DOUBLE
32093: EQUAL
32094: IFTRUE 32098
32096: GO 32124
32098: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32099: LD_ADDR_VAR 0 3
32103: PUSH
32104: LD_INT 21
32106: PUSH
32107: LD_INT 22
32109: PUSH
32110: LD_INT 23
32112: PUSH
32113: LD_INT 24
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: ST_TO_ADDR
32122: GO 32203
32124: LD_INT 53
32126: DOUBLE
32127: EQUAL
32128: IFTRUE 32132
32130: GO 32150
32132: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32133: LD_ADDR_VAR 0 3
32137: PUSH
32138: LD_INT 23
32140: PUSH
32141: LD_INT 24
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: ST_TO_ADDR
32148: GO 32203
32150: LD_INT 46
32152: DOUBLE
32153: EQUAL
32154: IFTRUE 32158
32156: GO 32176
32158: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32159: LD_ADDR_VAR 0 3
32163: PUSH
32164: LD_INT 23
32166: PUSH
32167: LD_INT 24
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: ST_TO_ADDR
32174: GO 32203
32176: LD_INT 47
32178: DOUBLE
32179: EQUAL
32180: IFTRUE 32184
32182: GO 32202
32184: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32185: LD_ADDR_VAR 0 3
32189: PUSH
32190: LD_INT 23
32192: PUSH
32193: LD_INT 24
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: ST_TO_ADDR
32200: GO 32203
32202: POP
// result := ( chassis in result ) ;
32203: LD_ADDR_VAR 0 3
32207: PUSH
32208: LD_VAR 0 1
32212: PUSH
32213: LD_VAR 0 3
32217: IN
32218: ST_TO_ADDR
// end ;
32219: LD_VAR 0 3
32223: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32224: LD_INT 0
32226: PPUSH
32227: PPUSH
32228: PPUSH
32229: PPUSH
32230: PPUSH
32231: PPUSH
32232: PPUSH
// result := array ;
32233: LD_ADDR_VAR 0 5
32237: PUSH
32238: LD_VAR 0 1
32242: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32243: LD_VAR 0 1
32247: NOT
32248: PUSH
32249: LD_VAR 0 2
32253: NOT
32254: OR
32255: PUSH
32256: LD_VAR 0 3
32260: NOT
32261: OR
32262: PUSH
32263: LD_VAR 0 2
32267: PUSH
32268: LD_VAR 0 1
32272: GREATER
32273: OR
32274: PUSH
32275: LD_VAR 0 3
32279: PUSH
32280: LD_VAR 0 1
32284: GREATER
32285: OR
32286: IFFALSE 32290
// exit ;
32288: GO 32586
// if direction then
32290: LD_VAR 0 4
32294: IFFALSE 32358
// begin d := 1 ;
32296: LD_ADDR_VAR 0 9
32300: PUSH
32301: LD_INT 1
32303: ST_TO_ADDR
// if i_from > i_to then
32304: LD_VAR 0 2
32308: PUSH
32309: LD_VAR 0 3
32313: GREATER
32314: IFFALSE 32340
// length := ( array - i_from ) + i_to else
32316: LD_ADDR_VAR 0 11
32320: PUSH
32321: LD_VAR 0 1
32325: PUSH
32326: LD_VAR 0 2
32330: MINUS
32331: PUSH
32332: LD_VAR 0 3
32336: PLUS
32337: ST_TO_ADDR
32338: GO 32356
// length := i_to - i_from ;
32340: LD_ADDR_VAR 0 11
32344: PUSH
32345: LD_VAR 0 3
32349: PUSH
32350: LD_VAR 0 2
32354: MINUS
32355: ST_TO_ADDR
// end else
32356: GO 32419
// begin d := - 1 ;
32358: LD_ADDR_VAR 0 9
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: ST_TO_ADDR
// if i_from > i_to then
32367: LD_VAR 0 2
32371: PUSH
32372: LD_VAR 0 3
32376: GREATER
32377: IFFALSE 32397
// length := i_from - i_to else
32379: LD_ADDR_VAR 0 11
32383: PUSH
32384: LD_VAR 0 2
32388: PUSH
32389: LD_VAR 0 3
32393: MINUS
32394: ST_TO_ADDR
32395: GO 32419
// length := ( array - i_to ) + i_from ;
32397: LD_ADDR_VAR 0 11
32401: PUSH
32402: LD_VAR 0 1
32406: PUSH
32407: LD_VAR 0 3
32411: MINUS
32412: PUSH
32413: LD_VAR 0 2
32417: PLUS
32418: ST_TO_ADDR
// end ; if not length then
32419: LD_VAR 0 11
32423: NOT
32424: IFFALSE 32428
// exit ;
32426: GO 32586
// tmp := array ;
32428: LD_ADDR_VAR 0 10
32432: PUSH
32433: LD_VAR 0 1
32437: ST_TO_ADDR
// for i = 1 to length do
32438: LD_ADDR_VAR 0 6
32442: PUSH
32443: DOUBLE
32444: LD_INT 1
32446: DEC
32447: ST_TO_ADDR
32448: LD_VAR 0 11
32452: PUSH
32453: FOR_TO
32454: IFFALSE 32574
// begin for j = 1 to array do
32456: LD_ADDR_VAR 0 7
32460: PUSH
32461: DOUBLE
32462: LD_INT 1
32464: DEC
32465: ST_TO_ADDR
32466: LD_VAR 0 1
32470: PUSH
32471: FOR_TO
32472: IFFALSE 32560
// begin k := j + d ;
32474: LD_ADDR_VAR 0 8
32478: PUSH
32479: LD_VAR 0 7
32483: PUSH
32484: LD_VAR 0 9
32488: PLUS
32489: ST_TO_ADDR
// if k > array then
32490: LD_VAR 0 8
32494: PUSH
32495: LD_VAR 0 1
32499: GREATER
32500: IFFALSE 32510
// k := 1 ;
32502: LD_ADDR_VAR 0 8
32506: PUSH
32507: LD_INT 1
32509: ST_TO_ADDR
// if not k then
32510: LD_VAR 0 8
32514: NOT
32515: IFFALSE 32527
// k := array ;
32517: LD_ADDR_VAR 0 8
32521: PUSH
32522: LD_VAR 0 1
32526: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32527: LD_ADDR_VAR 0 10
32531: PUSH
32532: LD_VAR 0 10
32536: PPUSH
32537: LD_VAR 0 8
32541: PPUSH
32542: LD_VAR 0 1
32546: PUSH
32547: LD_VAR 0 7
32551: ARRAY
32552: PPUSH
32553: CALL_OW 1
32557: ST_TO_ADDR
// end ;
32558: GO 32471
32560: POP
32561: POP
// array := tmp ;
32562: LD_ADDR_VAR 0 1
32566: PUSH
32567: LD_VAR 0 10
32571: ST_TO_ADDR
// end ;
32572: GO 32453
32574: POP
32575: POP
// result := array ;
32576: LD_ADDR_VAR 0 5
32580: PUSH
32581: LD_VAR 0 1
32585: ST_TO_ADDR
// end ;
32586: LD_VAR 0 5
32590: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32591: LD_INT 0
32593: PPUSH
32594: PPUSH
// result := 0 ;
32595: LD_ADDR_VAR 0 3
32599: PUSH
32600: LD_INT 0
32602: ST_TO_ADDR
// if not array or not value in array then
32603: LD_VAR 0 1
32607: NOT
32608: PUSH
32609: LD_VAR 0 2
32613: PUSH
32614: LD_VAR 0 1
32618: IN
32619: NOT
32620: OR
32621: IFFALSE 32625
// exit ;
32623: GO 32679
// for i = 1 to array do
32625: LD_ADDR_VAR 0 4
32629: PUSH
32630: DOUBLE
32631: LD_INT 1
32633: DEC
32634: ST_TO_ADDR
32635: LD_VAR 0 1
32639: PUSH
32640: FOR_TO
32641: IFFALSE 32677
// if value = array [ i ] then
32643: LD_VAR 0 2
32647: PUSH
32648: LD_VAR 0 1
32652: PUSH
32653: LD_VAR 0 4
32657: ARRAY
32658: EQUAL
32659: IFFALSE 32675
// begin result := i ;
32661: LD_ADDR_VAR 0 3
32665: PUSH
32666: LD_VAR 0 4
32670: ST_TO_ADDR
// exit ;
32671: POP
32672: POP
32673: GO 32679
// end ;
32675: GO 32640
32677: POP
32678: POP
// end ;
32679: LD_VAR 0 3
32683: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32684: LD_INT 0
32686: PPUSH
// vc_chassis := chassis ;
32687: LD_ADDR_OWVAR 37
32691: PUSH
32692: LD_VAR 0 1
32696: ST_TO_ADDR
// vc_engine := engine ;
32697: LD_ADDR_OWVAR 39
32701: PUSH
32702: LD_VAR 0 2
32706: ST_TO_ADDR
// vc_control := control ;
32707: LD_ADDR_OWVAR 38
32711: PUSH
32712: LD_VAR 0 3
32716: ST_TO_ADDR
// vc_weapon := weapon ;
32717: LD_ADDR_OWVAR 40
32721: PUSH
32722: LD_VAR 0 4
32726: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32727: LD_ADDR_OWVAR 41
32731: PUSH
32732: LD_VAR 0 5
32736: ST_TO_ADDR
// end ;
32737: LD_VAR 0 6
32741: RET
// export function WantPlant ( unit ) ; var task ; begin
32742: LD_INT 0
32744: PPUSH
32745: PPUSH
// result := false ;
32746: LD_ADDR_VAR 0 2
32750: PUSH
32751: LD_INT 0
32753: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32754: LD_ADDR_VAR 0 3
32758: PUSH
32759: LD_VAR 0 1
32763: PPUSH
32764: CALL_OW 437
32768: ST_TO_ADDR
// if task then
32769: LD_VAR 0 3
32773: IFFALSE 32801
// if task [ 1 ] [ 1 ] = p then
32775: LD_VAR 0 3
32779: PUSH
32780: LD_INT 1
32782: ARRAY
32783: PUSH
32784: LD_INT 1
32786: ARRAY
32787: PUSH
32788: LD_STRING p
32790: EQUAL
32791: IFFALSE 32801
// result := true ;
32793: LD_ADDR_VAR 0 2
32797: PUSH
32798: LD_INT 1
32800: ST_TO_ADDR
// end ;
32801: LD_VAR 0 2
32805: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32806: LD_INT 0
32808: PPUSH
32809: PPUSH
32810: PPUSH
32811: PPUSH
// if pos < 1 then
32812: LD_VAR 0 2
32816: PUSH
32817: LD_INT 1
32819: LESS
32820: IFFALSE 32824
// exit ;
32822: GO 33127
// if pos = 1 then
32824: LD_VAR 0 2
32828: PUSH
32829: LD_INT 1
32831: EQUAL
32832: IFFALSE 32865
// result := Replace ( arr , pos [ 1 ] , value ) else
32834: LD_ADDR_VAR 0 4
32838: PUSH
32839: LD_VAR 0 1
32843: PPUSH
32844: LD_VAR 0 2
32848: PUSH
32849: LD_INT 1
32851: ARRAY
32852: PPUSH
32853: LD_VAR 0 3
32857: PPUSH
32858: CALL_OW 1
32862: ST_TO_ADDR
32863: GO 33127
// begin tmp := arr ;
32865: LD_ADDR_VAR 0 6
32869: PUSH
32870: LD_VAR 0 1
32874: ST_TO_ADDR
// s_arr := [ tmp ] ;
32875: LD_ADDR_VAR 0 7
32879: PUSH
32880: LD_VAR 0 6
32884: PUSH
32885: EMPTY
32886: LIST
32887: ST_TO_ADDR
// for i = 1 to pos - 1 do
32888: LD_ADDR_VAR 0 5
32892: PUSH
32893: DOUBLE
32894: LD_INT 1
32896: DEC
32897: ST_TO_ADDR
32898: LD_VAR 0 2
32902: PUSH
32903: LD_INT 1
32905: MINUS
32906: PUSH
32907: FOR_TO
32908: IFFALSE 32953
// begin tmp := tmp [ pos [ i ] ] ;
32910: LD_ADDR_VAR 0 6
32914: PUSH
32915: LD_VAR 0 6
32919: PUSH
32920: LD_VAR 0 2
32924: PUSH
32925: LD_VAR 0 5
32929: ARRAY
32930: ARRAY
32931: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32932: LD_ADDR_VAR 0 7
32936: PUSH
32937: LD_VAR 0 7
32941: PUSH
32942: LD_VAR 0 6
32946: PUSH
32947: EMPTY
32948: LIST
32949: ADD
32950: ST_TO_ADDR
// end ;
32951: GO 32907
32953: POP
32954: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32955: LD_ADDR_VAR 0 6
32959: PUSH
32960: LD_VAR 0 6
32964: PPUSH
32965: LD_VAR 0 2
32969: PUSH
32970: LD_VAR 0 2
32974: ARRAY
32975: PPUSH
32976: LD_VAR 0 3
32980: PPUSH
32981: CALL_OW 1
32985: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32986: LD_ADDR_VAR 0 7
32990: PUSH
32991: LD_VAR 0 7
32995: PPUSH
32996: LD_VAR 0 7
33000: PPUSH
33001: LD_VAR 0 6
33005: PPUSH
33006: CALL_OW 1
33010: ST_TO_ADDR
// for i = s_arr downto 2 do
33011: LD_ADDR_VAR 0 5
33015: PUSH
33016: DOUBLE
33017: LD_VAR 0 7
33021: INC
33022: ST_TO_ADDR
33023: LD_INT 2
33025: PUSH
33026: FOR_DOWNTO
33027: IFFALSE 33111
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33029: LD_ADDR_VAR 0 6
33033: PUSH
33034: LD_VAR 0 7
33038: PUSH
33039: LD_VAR 0 5
33043: PUSH
33044: LD_INT 1
33046: MINUS
33047: ARRAY
33048: PPUSH
33049: LD_VAR 0 2
33053: PUSH
33054: LD_VAR 0 5
33058: PUSH
33059: LD_INT 1
33061: MINUS
33062: ARRAY
33063: PPUSH
33064: LD_VAR 0 7
33068: PUSH
33069: LD_VAR 0 5
33073: ARRAY
33074: PPUSH
33075: CALL_OW 1
33079: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33080: LD_ADDR_VAR 0 7
33084: PUSH
33085: LD_VAR 0 7
33089: PPUSH
33090: LD_VAR 0 5
33094: PUSH
33095: LD_INT 1
33097: MINUS
33098: PPUSH
33099: LD_VAR 0 6
33103: PPUSH
33104: CALL_OW 1
33108: ST_TO_ADDR
// end ;
33109: GO 33026
33111: POP
33112: POP
// result := s_arr [ 1 ] ;
33113: LD_ADDR_VAR 0 4
33117: PUSH
33118: LD_VAR 0 7
33122: PUSH
33123: LD_INT 1
33125: ARRAY
33126: ST_TO_ADDR
// end ; end ;
33127: LD_VAR 0 4
33131: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33132: LD_INT 0
33134: PPUSH
33135: PPUSH
// if not list then
33136: LD_VAR 0 1
33140: NOT
33141: IFFALSE 33145
// exit ;
33143: GO 33236
// i := list [ pos1 ] ;
33145: LD_ADDR_VAR 0 5
33149: PUSH
33150: LD_VAR 0 1
33154: PUSH
33155: LD_VAR 0 2
33159: ARRAY
33160: ST_TO_ADDR
// if not i then
33161: LD_VAR 0 5
33165: NOT
33166: IFFALSE 33170
// exit ;
33168: GO 33236
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33170: LD_ADDR_VAR 0 1
33174: PUSH
33175: LD_VAR 0 1
33179: PPUSH
33180: LD_VAR 0 2
33184: PPUSH
33185: LD_VAR 0 1
33189: PUSH
33190: LD_VAR 0 3
33194: ARRAY
33195: PPUSH
33196: CALL_OW 1
33200: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33201: LD_ADDR_VAR 0 1
33205: PUSH
33206: LD_VAR 0 1
33210: PPUSH
33211: LD_VAR 0 3
33215: PPUSH
33216: LD_VAR 0 5
33220: PPUSH
33221: CALL_OW 1
33225: ST_TO_ADDR
// result := list ;
33226: LD_ADDR_VAR 0 4
33230: PUSH
33231: LD_VAR 0 1
33235: ST_TO_ADDR
// end ;
33236: LD_VAR 0 4
33240: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33241: LD_INT 0
33243: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33244: LD_ADDR_VAR 0 5
33248: PUSH
33249: LD_VAR 0 1
33253: PPUSH
33254: CALL_OW 250
33258: PPUSH
33259: LD_VAR 0 1
33263: PPUSH
33264: CALL_OW 251
33268: PPUSH
33269: LD_VAR 0 2
33273: PPUSH
33274: LD_VAR 0 3
33278: PPUSH
33279: LD_VAR 0 4
33283: PPUSH
33284: CALL 33662 0 5
33288: ST_TO_ADDR
// end ;
33289: LD_VAR 0 5
33293: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33294: LD_INT 0
33296: PPUSH
33297: PPUSH
33298: PPUSH
33299: PPUSH
// if not list or not unit then
33300: LD_VAR 0 2
33304: NOT
33305: PUSH
33306: LD_VAR 0 1
33310: NOT
33311: OR
33312: IFFALSE 33316
// exit ;
33314: GO 33657
// result := [ ] ;
33316: LD_ADDR_VAR 0 5
33320: PUSH
33321: EMPTY
33322: ST_TO_ADDR
// for i in list do
33323: LD_ADDR_VAR 0 6
33327: PUSH
33328: LD_VAR 0 2
33332: PUSH
33333: FOR_IN
33334: IFFALSE 33552
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33336: LD_ADDR_VAR 0 8
33340: PUSH
33341: LD_VAR 0 1
33345: PPUSH
33346: LD_VAR 0 6
33350: PUSH
33351: LD_INT 1
33353: ARRAY
33354: PPUSH
33355: LD_VAR 0 6
33359: PUSH
33360: LD_INT 2
33362: ARRAY
33363: PPUSH
33364: CALL_OW 297
33368: ST_TO_ADDR
// if not Count ( result ) then
33369: LD_VAR 0 5
33373: PPUSH
33374: CALL 29946 0 1
33378: NOT
33379: IFFALSE 33412
// begin result := Join ( result , [ i , tmp ] ) ;
33381: LD_ADDR_VAR 0 5
33385: PUSH
33386: LD_VAR 0 5
33390: PPUSH
33391: LD_VAR 0 6
33395: PUSH
33396: LD_VAR 0 8
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PPUSH
33405: CALL 65546 0 2
33409: ST_TO_ADDR
// continue ;
33410: GO 33333
// end ; if result [ result ] [ 2 ] <= tmp then
33412: LD_VAR 0 5
33416: PUSH
33417: LD_VAR 0 5
33421: ARRAY
33422: PUSH
33423: LD_INT 2
33425: ARRAY
33426: PUSH
33427: LD_VAR 0 8
33431: LESSEQUAL
33432: IFFALSE 33465
// result := Join ( result , [ i , tmp ] ) else
33434: LD_ADDR_VAR 0 5
33438: PUSH
33439: LD_VAR 0 5
33443: PPUSH
33444: LD_VAR 0 6
33448: PUSH
33449: LD_VAR 0 8
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PPUSH
33458: CALL 65546 0 2
33462: ST_TO_ADDR
33463: GO 33550
// begin for j := 1 to Count ( result ) do
33465: LD_ADDR_VAR 0 7
33469: PUSH
33470: DOUBLE
33471: LD_INT 1
33473: DEC
33474: ST_TO_ADDR
33475: LD_VAR 0 5
33479: PPUSH
33480: CALL 29946 0 1
33484: PUSH
33485: FOR_TO
33486: IFFALSE 33548
// begin if tmp < result [ j ] [ 2 ] then
33488: LD_VAR 0 8
33492: PUSH
33493: LD_VAR 0 5
33497: PUSH
33498: LD_VAR 0 7
33502: ARRAY
33503: PUSH
33504: LD_INT 2
33506: ARRAY
33507: LESS
33508: IFFALSE 33546
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33510: LD_ADDR_VAR 0 5
33514: PUSH
33515: LD_VAR 0 5
33519: PPUSH
33520: LD_VAR 0 7
33524: PPUSH
33525: LD_VAR 0 6
33529: PUSH
33530: LD_VAR 0 8
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PPUSH
33539: CALL_OW 2
33543: ST_TO_ADDR
// break ;
33544: GO 33548
// end ; end ;
33546: GO 33485
33548: POP
33549: POP
// end ; end ;
33550: GO 33333
33552: POP
33553: POP
// if result and not asc then
33554: LD_VAR 0 5
33558: PUSH
33559: LD_VAR 0 3
33563: NOT
33564: AND
33565: IFFALSE 33582
// result := ReverseArray ( result ) ;
33567: LD_ADDR_VAR 0 5
33571: PUSH
33572: LD_VAR 0 5
33576: PPUSH
33577: CALL 60822 0 1
33581: ST_TO_ADDR
// tmp := [ ] ;
33582: LD_ADDR_VAR 0 8
33586: PUSH
33587: EMPTY
33588: ST_TO_ADDR
// if mode then
33589: LD_VAR 0 4
33593: IFFALSE 33657
// begin for i := 1 to result do
33595: LD_ADDR_VAR 0 6
33599: PUSH
33600: DOUBLE
33601: LD_INT 1
33603: DEC
33604: ST_TO_ADDR
33605: LD_VAR 0 5
33609: PUSH
33610: FOR_TO
33611: IFFALSE 33645
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33613: LD_ADDR_VAR 0 8
33617: PUSH
33618: LD_VAR 0 8
33622: PPUSH
33623: LD_VAR 0 5
33627: PUSH
33628: LD_VAR 0 6
33632: ARRAY
33633: PUSH
33634: LD_INT 1
33636: ARRAY
33637: PPUSH
33638: CALL 65546 0 2
33642: ST_TO_ADDR
33643: GO 33610
33645: POP
33646: POP
// result := tmp ;
33647: LD_ADDR_VAR 0 5
33651: PUSH
33652: LD_VAR 0 8
33656: ST_TO_ADDR
// end ; end ;
33657: LD_VAR 0 5
33661: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33662: LD_INT 0
33664: PPUSH
33665: PPUSH
33666: PPUSH
33667: PPUSH
// if not list then
33668: LD_VAR 0 3
33672: NOT
33673: IFFALSE 33677
// exit ;
33675: GO 34065
// result := [ ] ;
33677: LD_ADDR_VAR 0 6
33681: PUSH
33682: EMPTY
33683: ST_TO_ADDR
// for i in list do
33684: LD_ADDR_VAR 0 7
33688: PUSH
33689: LD_VAR 0 3
33693: PUSH
33694: FOR_IN
33695: IFFALSE 33897
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33697: LD_ADDR_VAR 0 9
33701: PUSH
33702: LD_VAR 0 7
33706: PPUSH
33707: LD_VAR 0 1
33711: PPUSH
33712: LD_VAR 0 2
33716: PPUSH
33717: CALL_OW 297
33721: ST_TO_ADDR
// if not result then
33722: LD_VAR 0 6
33726: NOT
33727: IFFALSE 33753
// result := [ [ i , tmp ] ] else
33729: LD_ADDR_VAR 0 6
33733: PUSH
33734: LD_VAR 0 7
33738: PUSH
33739: LD_VAR 0 9
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: EMPTY
33749: LIST
33750: ST_TO_ADDR
33751: GO 33895
// begin if result [ result ] [ 2 ] < tmp then
33753: LD_VAR 0 6
33757: PUSH
33758: LD_VAR 0 6
33762: ARRAY
33763: PUSH
33764: LD_INT 2
33766: ARRAY
33767: PUSH
33768: LD_VAR 0 9
33772: LESS
33773: IFFALSE 33815
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33775: LD_ADDR_VAR 0 6
33779: PUSH
33780: LD_VAR 0 6
33784: PPUSH
33785: LD_VAR 0 6
33789: PUSH
33790: LD_INT 1
33792: PLUS
33793: PPUSH
33794: LD_VAR 0 7
33798: PUSH
33799: LD_VAR 0 9
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PPUSH
33808: CALL_OW 2
33812: ST_TO_ADDR
33813: GO 33895
// for j = 1 to result do
33815: LD_ADDR_VAR 0 8
33819: PUSH
33820: DOUBLE
33821: LD_INT 1
33823: DEC
33824: ST_TO_ADDR
33825: LD_VAR 0 6
33829: PUSH
33830: FOR_TO
33831: IFFALSE 33893
// begin if tmp < result [ j ] [ 2 ] then
33833: LD_VAR 0 9
33837: PUSH
33838: LD_VAR 0 6
33842: PUSH
33843: LD_VAR 0 8
33847: ARRAY
33848: PUSH
33849: LD_INT 2
33851: ARRAY
33852: LESS
33853: IFFALSE 33891
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33855: LD_ADDR_VAR 0 6
33859: PUSH
33860: LD_VAR 0 6
33864: PPUSH
33865: LD_VAR 0 8
33869: PPUSH
33870: LD_VAR 0 7
33874: PUSH
33875: LD_VAR 0 9
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PPUSH
33884: CALL_OW 2
33888: ST_TO_ADDR
// break ;
33889: GO 33893
// end ; end ;
33891: GO 33830
33893: POP
33894: POP
// end ; end ;
33895: GO 33694
33897: POP
33898: POP
// if result and not asc then
33899: LD_VAR 0 6
33903: PUSH
33904: LD_VAR 0 4
33908: NOT
33909: AND
33910: IFFALSE 33985
// begin tmp := result ;
33912: LD_ADDR_VAR 0 9
33916: PUSH
33917: LD_VAR 0 6
33921: ST_TO_ADDR
// for i = tmp downto 1 do
33922: LD_ADDR_VAR 0 7
33926: PUSH
33927: DOUBLE
33928: LD_VAR 0 9
33932: INC
33933: ST_TO_ADDR
33934: LD_INT 1
33936: PUSH
33937: FOR_DOWNTO
33938: IFFALSE 33983
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33940: LD_ADDR_VAR 0 6
33944: PUSH
33945: LD_VAR 0 6
33949: PPUSH
33950: LD_VAR 0 9
33954: PUSH
33955: LD_VAR 0 7
33959: MINUS
33960: PUSH
33961: LD_INT 1
33963: PLUS
33964: PPUSH
33965: LD_VAR 0 9
33969: PUSH
33970: LD_VAR 0 7
33974: ARRAY
33975: PPUSH
33976: CALL_OW 1
33980: ST_TO_ADDR
33981: GO 33937
33983: POP
33984: POP
// end ; tmp := [ ] ;
33985: LD_ADDR_VAR 0 9
33989: PUSH
33990: EMPTY
33991: ST_TO_ADDR
// if mode then
33992: LD_VAR 0 5
33996: IFFALSE 34065
// begin for i = 1 to result do
33998: LD_ADDR_VAR 0 7
34002: PUSH
34003: DOUBLE
34004: LD_INT 1
34006: DEC
34007: ST_TO_ADDR
34008: LD_VAR 0 6
34012: PUSH
34013: FOR_TO
34014: IFFALSE 34053
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34016: LD_ADDR_VAR 0 9
34020: PUSH
34021: LD_VAR 0 9
34025: PPUSH
34026: LD_VAR 0 7
34030: PPUSH
34031: LD_VAR 0 6
34035: PUSH
34036: LD_VAR 0 7
34040: ARRAY
34041: PUSH
34042: LD_INT 1
34044: ARRAY
34045: PPUSH
34046: CALL_OW 1
34050: ST_TO_ADDR
34051: GO 34013
34053: POP
34054: POP
// result := tmp ;
34055: LD_ADDR_VAR 0 6
34059: PUSH
34060: LD_VAR 0 9
34064: ST_TO_ADDR
// end ; end ;
34065: LD_VAR 0 6
34069: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34070: LD_INT 0
34072: PPUSH
34073: PPUSH
34074: PPUSH
34075: PPUSH
34076: PPUSH
34077: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34078: LD_ADDR_VAR 0 5
34082: PUSH
34083: LD_INT 0
34085: PUSH
34086: LD_INT 0
34088: PUSH
34089: LD_INT 0
34091: PUSH
34092: EMPTY
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: ST_TO_ADDR
// if not x or not y then
34100: LD_VAR 0 2
34104: NOT
34105: PUSH
34106: LD_VAR 0 3
34110: NOT
34111: OR
34112: IFFALSE 34116
// exit ;
34114: GO 35766
// if not range then
34116: LD_VAR 0 4
34120: NOT
34121: IFFALSE 34131
// range := 10 ;
34123: LD_ADDR_VAR 0 4
34127: PUSH
34128: LD_INT 10
34130: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34131: LD_ADDR_VAR 0 8
34135: PUSH
34136: LD_INT 81
34138: PUSH
34139: LD_VAR 0 1
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 92
34150: PUSH
34151: LD_VAR 0 2
34155: PUSH
34156: LD_VAR 0 3
34160: PUSH
34161: LD_VAR 0 4
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 3
34174: PUSH
34175: LD_INT 21
34177: PUSH
34178: LD_INT 3
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: LIST
34193: PPUSH
34194: CALL_OW 69
34198: ST_TO_ADDR
// if not tmp then
34199: LD_VAR 0 8
34203: NOT
34204: IFFALSE 34208
// exit ;
34206: GO 35766
// for i in tmp do
34208: LD_ADDR_VAR 0 6
34212: PUSH
34213: LD_VAR 0 8
34217: PUSH
34218: FOR_IN
34219: IFFALSE 35741
// begin points := [ 0 , 0 , 0 ] ;
34221: LD_ADDR_VAR 0 9
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: LD_INT 0
34231: PUSH
34232: LD_INT 0
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: LIST
34239: ST_TO_ADDR
// bpoints := 1 ;
34240: LD_ADDR_VAR 0 10
34244: PUSH
34245: LD_INT 1
34247: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34248: LD_VAR 0 6
34252: PPUSH
34253: CALL_OW 247
34257: PUSH
34258: LD_INT 1
34260: DOUBLE
34261: EQUAL
34262: IFTRUE 34266
34264: GO 34844
34266: POP
// begin if GetClass ( i ) = 1 then
34267: LD_VAR 0 6
34271: PPUSH
34272: CALL_OW 257
34276: PUSH
34277: LD_INT 1
34279: EQUAL
34280: IFFALSE 34301
// points := [ 10 , 5 , 3 ] ;
34282: LD_ADDR_VAR 0 9
34286: PUSH
34287: LD_INT 10
34289: PUSH
34290: LD_INT 5
34292: PUSH
34293: LD_INT 3
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: LIST
34300: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34301: LD_VAR 0 6
34305: PPUSH
34306: CALL_OW 257
34310: PUSH
34311: LD_INT 2
34313: PUSH
34314: LD_INT 3
34316: PUSH
34317: LD_INT 4
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: LIST
34324: IN
34325: IFFALSE 34346
// points := [ 3 , 2 , 1 ] ;
34327: LD_ADDR_VAR 0 9
34331: PUSH
34332: LD_INT 3
34334: PUSH
34335: LD_INT 2
34337: PUSH
34338: LD_INT 1
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: LIST
34345: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34346: LD_VAR 0 6
34350: PPUSH
34351: CALL_OW 257
34355: PUSH
34356: LD_INT 5
34358: EQUAL
34359: IFFALSE 34380
// points := [ 130 , 5 , 2 ] ;
34361: LD_ADDR_VAR 0 9
34365: PUSH
34366: LD_INT 130
34368: PUSH
34369: LD_INT 5
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: LIST
34379: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34380: LD_VAR 0 6
34384: PPUSH
34385: CALL_OW 257
34389: PUSH
34390: LD_INT 8
34392: EQUAL
34393: IFFALSE 34414
// points := [ 35 , 35 , 30 ] ;
34395: LD_ADDR_VAR 0 9
34399: PUSH
34400: LD_INT 35
34402: PUSH
34403: LD_INT 35
34405: PUSH
34406: LD_INT 30
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34414: LD_VAR 0 6
34418: PPUSH
34419: CALL_OW 257
34423: PUSH
34424: LD_INT 9
34426: EQUAL
34427: IFFALSE 34448
// points := [ 20 , 55 , 40 ] ;
34429: LD_ADDR_VAR 0 9
34433: PUSH
34434: LD_INT 20
34436: PUSH
34437: LD_INT 55
34439: PUSH
34440: LD_INT 40
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: LIST
34447: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34448: LD_VAR 0 6
34452: PPUSH
34453: CALL_OW 257
34457: PUSH
34458: LD_INT 12
34460: PUSH
34461: LD_INT 16
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: IN
34468: IFFALSE 34489
// points := [ 5 , 3 , 2 ] ;
34470: LD_ADDR_VAR 0 9
34474: PUSH
34475: LD_INT 5
34477: PUSH
34478: LD_INT 3
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: LIST
34488: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34489: LD_VAR 0 6
34493: PPUSH
34494: CALL_OW 257
34498: PUSH
34499: LD_INT 17
34501: EQUAL
34502: IFFALSE 34523
// points := [ 100 , 50 , 75 ] ;
34504: LD_ADDR_VAR 0 9
34508: PUSH
34509: LD_INT 100
34511: PUSH
34512: LD_INT 50
34514: PUSH
34515: LD_INT 75
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: LIST
34522: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34523: LD_VAR 0 6
34527: PPUSH
34528: CALL_OW 257
34532: PUSH
34533: LD_INT 15
34535: EQUAL
34536: IFFALSE 34557
// points := [ 10 , 5 , 3 ] ;
34538: LD_ADDR_VAR 0 9
34542: PUSH
34543: LD_INT 10
34545: PUSH
34546: LD_INT 5
34548: PUSH
34549: LD_INT 3
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: LIST
34556: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34557: LD_VAR 0 6
34561: PPUSH
34562: CALL_OW 257
34566: PUSH
34567: LD_INT 14
34569: EQUAL
34570: IFFALSE 34591
// points := [ 10 , 0 , 0 ] ;
34572: LD_ADDR_VAR 0 9
34576: PUSH
34577: LD_INT 10
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: LIST
34590: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34591: LD_VAR 0 6
34595: PPUSH
34596: CALL_OW 257
34600: PUSH
34601: LD_INT 11
34603: EQUAL
34604: IFFALSE 34625
// points := [ 30 , 10 , 5 ] ;
34606: LD_ADDR_VAR 0 9
34610: PUSH
34611: LD_INT 30
34613: PUSH
34614: LD_INT 10
34616: PUSH
34617: LD_INT 5
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: LIST
34624: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34625: LD_VAR 0 1
34629: PPUSH
34630: LD_INT 5
34632: PPUSH
34633: CALL_OW 321
34637: PUSH
34638: LD_INT 2
34640: EQUAL
34641: IFFALSE 34658
// bpoints := bpoints * 1.8 ;
34643: LD_ADDR_VAR 0 10
34647: PUSH
34648: LD_VAR 0 10
34652: PUSH
34653: LD_REAL  1.80000000000000E+0000
34656: MUL
34657: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34658: LD_VAR 0 6
34662: PPUSH
34663: CALL_OW 257
34667: PUSH
34668: LD_INT 1
34670: PUSH
34671: LD_INT 2
34673: PUSH
34674: LD_INT 3
34676: PUSH
34677: LD_INT 4
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: IN
34686: PUSH
34687: LD_VAR 0 1
34691: PPUSH
34692: LD_INT 51
34694: PPUSH
34695: CALL_OW 321
34699: PUSH
34700: LD_INT 2
34702: EQUAL
34703: AND
34704: IFFALSE 34721
// bpoints := bpoints * 1.2 ;
34706: LD_ADDR_VAR 0 10
34710: PUSH
34711: LD_VAR 0 10
34715: PUSH
34716: LD_REAL  1.20000000000000E+0000
34719: MUL
34720: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34721: LD_VAR 0 6
34725: PPUSH
34726: CALL_OW 257
34730: PUSH
34731: LD_INT 5
34733: PUSH
34734: LD_INT 7
34736: PUSH
34737: LD_INT 9
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: LIST
34744: IN
34745: PUSH
34746: LD_VAR 0 1
34750: PPUSH
34751: LD_INT 52
34753: PPUSH
34754: CALL_OW 321
34758: PUSH
34759: LD_INT 2
34761: EQUAL
34762: AND
34763: IFFALSE 34780
// bpoints := bpoints * 1.5 ;
34765: LD_ADDR_VAR 0 10
34769: PUSH
34770: LD_VAR 0 10
34774: PUSH
34775: LD_REAL  1.50000000000000E+0000
34778: MUL
34779: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34780: LD_VAR 0 1
34784: PPUSH
34785: LD_INT 66
34787: PPUSH
34788: CALL_OW 321
34792: PUSH
34793: LD_INT 2
34795: EQUAL
34796: IFFALSE 34813
// bpoints := bpoints * 1.1 ;
34798: LD_ADDR_VAR 0 10
34802: PUSH
34803: LD_VAR 0 10
34807: PUSH
34808: LD_REAL  1.10000000000000E+0000
34811: MUL
34812: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34813: LD_ADDR_VAR 0 10
34817: PUSH
34818: LD_VAR 0 10
34822: PUSH
34823: LD_VAR 0 6
34827: PPUSH
34828: LD_INT 1
34830: PPUSH
34831: CALL_OW 259
34835: PUSH
34836: LD_REAL  1.15000000000000E+0000
34839: MUL
34840: MUL
34841: ST_TO_ADDR
// end ; unit_vehicle :
34842: GO 35670
34844: LD_INT 2
34846: DOUBLE
34847: EQUAL
34848: IFTRUE 34852
34850: GO 35658
34852: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34853: LD_VAR 0 6
34857: PPUSH
34858: CALL_OW 264
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: LD_INT 42
34868: PUSH
34869: LD_INT 24
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: LIST
34876: IN
34877: IFFALSE 34898
// points := [ 25 , 5 , 3 ] ;
34879: LD_ADDR_VAR 0 9
34883: PUSH
34884: LD_INT 25
34886: PUSH
34887: LD_INT 5
34889: PUSH
34890: LD_INT 3
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: LIST
34897: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34898: LD_VAR 0 6
34902: PPUSH
34903: CALL_OW 264
34907: PUSH
34908: LD_INT 4
34910: PUSH
34911: LD_INT 43
34913: PUSH
34914: LD_INT 25
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: LIST
34921: IN
34922: IFFALSE 34943
// points := [ 40 , 15 , 5 ] ;
34924: LD_ADDR_VAR 0 9
34928: PUSH
34929: LD_INT 40
34931: PUSH
34932: LD_INT 15
34934: PUSH
34935: LD_INT 5
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: LIST
34942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34943: LD_VAR 0 6
34947: PPUSH
34948: CALL_OW 264
34952: PUSH
34953: LD_INT 3
34955: PUSH
34956: LD_INT 23
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: IN
34963: IFFALSE 34984
// points := [ 7 , 25 , 8 ] ;
34965: LD_ADDR_VAR 0 9
34969: PUSH
34970: LD_INT 7
34972: PUSH
34973: LD_INT 25
34975: PUSH
34976: LD_INT 8
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: LIST
34983: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34984: LD_VAR 0 6
34988: PPUSH
34989: CALL_OW 264
34993: PUSH
34994: LD_INT 5
34996: PUSH
34997: LD_INT 27
34999: PUSH
35000: LD_INT 44
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: LIST
35007: IN
35008: IFFALSE 35029
// points := [ 14 , 50 , 16 ] ;
35010: LD_ADDR_VAR 0 9
35014: PUSH
35015: LD_INT 14
35017: PUSH
35018: LD_INT 50
35020: PUSH
35021: LD_INT 16
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: LIST
35028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35029: LD_VAR 0 6
35033: PPUSH
35034: CALL_OW 264
35038: PUSH
35039: LD_INT 6
35041: PUSH
35042: LD_INT 46
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: IN
35049: IFFALSE 35070
// points := [ 32 , 120 , 70 ] ;
35051: LD_ADDR_VAR 0 9
35055: PUSH
35056: LD_INT 32
35058: PUSH
35059: LD_INT 120
35061: PUSH
35062: LD_INT 70
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: LIST
35069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35070: LD_VAR 0 6
35074: PPUSH
35075: CALL_OW 264
35079: PUSH
35080: LD_INT 7
35082: PUSH
35083: LD_INT 28
35085: PUSH
35086: LD_INT 45
35088: PUSH
35089: LD_INT 92
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: IN
35098: IFFALSE 35119
// points := [ 35 , 20 , 45 ] ;
35100: LD_ADDR_VAR 0 9
35104: PUSH
35105: LD_INT 35
35107: PUSH
35108: LD_INT 20
35110: PUSH
35111: LD_INT 45
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: LIST
35118: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35119: LD_VAR 0 6
35123: PPUSH
35124: CALL_OW 264
35128: PUSH
35129: LD_INT 47
35131: PUSH
35132: EMPTY
35133: LIST
35134: IN
35135: IFFALSE 35156
// points := [ 67 , 45 , 75 ] ;
35137: LD_ADDR_VAR 0 9
35141: PUSH
35142: LD_INT 67
35144: PUSH
35145: LD_INT 45
35147: PUSH
35148: LD_INT 75
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: LIST
35155: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35156: LD_VAR 0 6
35160: PPUSH
35161: CALL_OW 264
35165: PUSH
35166: LD_INT 26
35168: PUSH
35169: EMPTY
35170: LIST
35171: IN
35172: IFFALSE 35193
// points := [ 120 , 30 , 80 ] ;
35174: LD_ADDR_VAR 0 9
35178: PUSH
35179: LD_INT 120
35181: PUSH
35182: LD_INT 30
35184: PUSH
35185: LD_INT 80
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: LIST
35192: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35193: LD_VAR 0 6
35197: PPUSH
35198: CALL_OW 264
35202: PUSH
35203: LD_INT 22
35205: PUSH
35206: EMPTY
35207: LIST
35208: IN
35209: IFFALSE 35230
// points := [ 40 , 1 , 1 ] ;
35211: LD_ADDR_VAR 0 9
35215: PUSH
35216: LD_INT 40
35218: PUSH
35219: LD_INT 1
35221: PUSH
35222: LD_INT 1
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: LIST
35229: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35230: LD_VAR 0 6
35234: PPUSH
35235: CALL_OW 264
35239: PUSH
35240: LD_INT 29
35242: PUSH
35243: EMPTY
35244: LIST
35245: IN
35246: IFFALSE 35267
// points := [ 70 , 200 , 400 ] ;
35248: LD_ADDR_VAR 0 9
35252: PUSH
35253: LD_INT 70
35255: PUSH
35256: LD_INT 200
35258: PUSH
35259: LD_INT 400
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: LIST
35266: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35267: LD_VAR 0 6
35271: PPUSH
35272: CALL_OW 264
35276: PUSH
35277: LD_INT 14
35279: PUSH
35280: LD_INT 53
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: IN
35287: IFFALSE 35308
// points := [ 40 , 10 , 20 ] ;
35289: LD_ADDR_VAR 0 9
35293: PUSH
35294: LD_INT 40
35296: PUSH
35297: LD_INT 10
35299: PUSH
35300: LD_INT 20
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: LIST
35307: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35308: LD_VAR 0 6
35312: PPUSH
35313: CALL_OW 264
35317: PUSH
35318: LD_INT 9
35320: PUSH
35321: EMPTY
35322: LIST
35323: IN
35324: IFFALSE 35345
// points := [ 5 , 70 , 20 ] ;
35326: LD_ADDR_VAR 0 9
35330: PUSH
35331: LD_INT 5
35333: PUSH
35334: LD_INT 70
35336: PUSH
35337: LD_INT 20
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: LIST
35344: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35345: LD_VAR 0 6
35349: PPUSH
35350: CALL_OW 264
35354: PUSH
35355: LD_INT 10
35357: PUSH
35358: EMPTY
35359: LIST
35360: IN
35361: IFFALSE 35382
// points := [ 35 , 110 , 70 ] ;
35363: LD_ADDR_VAR 0 9
35367: PUSH
35368: LD_INT 35
35370: PUSH
35371: LD_INT 110
35373: PUSH
35374: LD_INT 70
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: LIST
35381: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35382: LD_VAR 0 6
35386: PPUSH
35387: CALL_OW 265
35391: PUSH
35392: LD_INT 25
35394: EQUAL
35395: IFFALSE 35416
// points := [ 80 , 65 , 100 ] ;
35397: LD_ADDR_VAR 0 9
35401: PUSH
35402: LD_INT 80
35404: PUSH
35405: LD_INT 65
35407: PUSH
35408: LD_INT 100
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: LIST
35415: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35416: LD_VAR 0 6
35420: PPUSH
35421: CALL_OW 263
35425: PUSH
35426: LD_INT 1
35428: EQUAL
35429: IFFALSE 35464
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35431: LD_ADDR_VAR 0 10
35435: PUSH
35436: LD_VAR 0 10
35440: PUSH
35441: LD_VAR 0 6
35445: PPUSH
35446: CALL_OW 311
35450: PPUSH
35451: LD_INT 3
35453: PPUSH
35454: CALL_OW 259
35458: PUSH
35459: LD_INT 4
35461: MUL
35462: MUL
35463: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35464: LD_VAR 0 6
35468: PPUSH
35469: CALL_OW 263
35473: PUSH
35474: LD_INT 2
35476: EQUAL
35477: IFFALSE 35528
// begin j := IsControledBy ( i ) ;
35479: LD_ADDR_VAR 0 7
35483: PUSH
35484: LD_VAR 0 6
35488: PPUSH
35489: CALL_OW 312
35493: ST_TO_ADDR
// if j then
35494: LD_VAR 0 7
35498: IFFALSE 35528
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35500: LD_ADDR_VAR 0 10
35504: PUSH
35505: LD_VAR 0 10
35509: PUSH
35510: LD_VAR 0 7
35514: PPUSH
35515: LD_INT 3
35517: PPUSH
35518: CALL_OW 259
35522: PUSH
35523: LD_INT 3
35525: MUL
35526: MUL
35527: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35528: LD_VAR 0 6
35532: PPUSH
35533: CALL_OW 264
35537: PUSH
35538: LD_INT 5
35540: PUSH
35541: LD_INT 6
35543: PUSH
35544: LD_INT 46
35546: PUSH
35547: LD_INT 44
35549: PUSH
35550: LD_INT 47
35552: PUSH
35553: LD_INT 45
35555: PUSH
35556: LD_INT 28
35558: PUSH
35559: LD_INT 7
35561: PUSH
35562: LD_INT 27
35564: PUSH
35565: LD_INT 29
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: IN
35580: PUSH
35581: LD_VAR 0 1
35585: PPUSH
35586: LD_INT 52
35588: PPUSH
35589: CALL_OW 321
35593: PUSH
35594: LD_INT 2
35596: EQUAL
35597: AND
35598: IFFALSE 35615
// bpoints := bpoints * 1.2 ;
35600: LD_ADDR_VAR 0 10
35604: PUSH
35605: LD_VAR 0 10
35609: PUSH
35610: LD_REAL  1.20000000000000E+0000
35613: MUL
35614: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35615: LD_VAR 0 6
35619: PPUSH
35620: CALL_OW 264
35624: PUSH
35625: LD_INT 6
35627: PUSH
35628: LD_INT 46
35630: PUSH
35631: LD_INT 47
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: LIST
35638: IN
35639: IFFALSE 35656
// bpoints := bpoints * 1.2 ;
35641: LD_ADDR_VAR 0 10
35645: PUSH
35646: LD_VAR 0 10
35650: PUSH
35651: LD_REAL  1.20000000000000E+0000
35654: MUL
35655: ST_TO_ADDR
// end ; unit_building :
35656: GO 35670
35658: LD_INT 3
35660: DOUBLE
35661: EQUAL
35662: IFTRUE 35666
35664: GO 35669
35666: POP
// ; end ;
35667: GO 35670
35669: POP
// for j = 1 to 3 do
35670: LD_ADDR_VAR 0 7
35674: PUSH
35675: DOUBLE
35676: LD_INT 1
35678: DEC
35679: ST_TO_ADDR
35680: LD_INT 3
35682: PUSH
35683: FOR_TO
35684: IFFALSE 35737
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35686: LD_ADDR_VAR 0 5
35690: PUSH
35691: LD_VAR 0 5
35695: PPUSH
35696: LD_VAR 0 7
35700: PPUSH
35701: LD_VAR 0 5
35705: PUSH
35706: LD_VAR 0 7
35710: ARRAY
35711: PUSH
35712: LD_VAR 0 9
35716: PUSH
35717: LD_VAR 0 7
35721: ARRAY
35722: PUSH
35723: LD_VAR 0 10
35727: MUL
35728: PLUS
35729: PPUSH
35730: CALL_OW 1
35734: ST_TO_ADDR
35735: GO 35683
35737: POP
35738: POP
// end ;
35739: GO 34218
35741: POP
35742: POP
// result := Replace ( result , 4 , tmp ) ;
35743: LD_ADDR_VAR 0 5
35747: PUSH
35748: LD_VAR 0 5
35752: PPUSH
35753: LD_INT 4
35755: PPUSH
35756: LD_VAR 0 8
35760: PPUSH
35761: CALL_OW 1
35765: ST_TO_ADDR
// end ;
35766: LD_VAR 0 5
35770: RET
// export function DangerAtRange ( unit , range ) ; begin
35771: LD_INT 0
35773: PPUSH
// if not unit then
35774: LD_VAR 0 1
35778: NOT
35779: IFFALSE 35783
// exit ;
35781: GO 35828
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35783: LD_ADDR_VAR 0 3
35787: PUSH
35788: LD_VAR 0 1
35792: PPUSH
35793: CALL_OW 255
35797: PPUSH
35798: LD_VAR 0 1
35802: PPUSH
35803: CALL_OW 250
35807: PPUSH
35808: LD_VAR 0 1
35812: PPUSH
35813: CALL_OW 251
35817: PPUSH
35818: LD_VAR 0 2
35822: PPUSH
35823: CALL 34070 0 4
35827: ST_TO_ADDR
// end ;
35828: LD_VAR 0 3
35832: RET
// export function DangerInArea ( side , area ) ; begin
35833: LD_INT 0
35835: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35836: LD_ADDR_VAR 0 3
35840: PUSH
35841: LD_VAR 0 2
35845: PPUSH
35846: LD_INT 81
35848: PUSH
35849: LD_VAR 0 1
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PPUSH
35858: CALL_OW 70
35862: ST_TO_ADDR
// end ;
35863: LD_VAR 0 3
35867: RET
// export function IsExtension ( b ) ; begin
35868: LD_INT 0
35870: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35871: LD_ADDR_VAR 0 2
35875: PUSH
35876: LD_VAR 0 1
35880: PUSH
35881: LD_INT 23
35883: PUSH
35884: LD_INT 20
35886: PUSH
35887: LD_INT 22
35889: PUSH
35890: LD_INT 17
35892: PUSH
35893: LD_INT 24
35895: PUSH
35896: LD_INT 21
35898: PUSH
35899: LD_INT 19
35901: PUSH
35902: LD_INT 16
35904: PUSH
35905: LD_INT 25
35907: PUSH
35908: LD_INT 18
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: IN
35923: ST_TO_ADDR
// end ;
35924: LD_VAR 0 2
35928: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35929: LD_INT 0
35931: PPUSH
35932: PPUSH
35933: PPUSH
// result := [ ] ;
35934: LD_ADDR_VAR 0 4
35938: PUSH
35939: EMPTY
35940: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35941: LD_ADDR_VAR 0 5
35945: PUSH
35946: LD_VAR 0 2
35950: PPUSH
35951: LD_INT 21
35953: PUSH
35954: LD_INT 3
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PPUSH
35961: CALL_OW 70
35965: ST_TO_ADDR
// if not tmp then
35966: LD_VAR 0 5
35970: NOT
35971: IFFALSE 35975
// exit ;
35973: GO 36039
// if checkLink then
35975: LD_VAR 0 3
35979: IFFALSE 36029
// begin for i in tmp do
35981: LD_ADDR_VAR 0 6
35985: PUSH
35986: LD_VAR 0 5
35990: PUSH
35991: FOR_IN
35992: IFFALSE 36027
// if GetBase ( i ) <> base then
35994: LD_VAR 0 6
35998: PPUSH
35999: CALL_OW 274
36003: PUSH
36004: LD_VAR 0 1
36008: NONEQUAL
36009: IFFALSE 36025
// ComLinkToBase ( base , i ) ;
36011: LD_VAR 0 1
36015: PPUSH
36016: LD_VAR 0 6
36020: PPUSH
36021: CALL_OW 169
36025: GO 35991
36027: POP
36028: POP
// end ; result := tmp ;
36029: LD_ADDR_VAR 0 4
36033: PUSH
36034: LD_VAR 0 5
36038: ST_TO_ADDR
// end ;
36039: LD_VAR 0 4
36043: RET
// export function ComComplete ( units , b ) ; var i ; begin
36044: LD_INT 0
36046: PPUSH
36047: PPUSH
// if not units then
36048: LD_VAR 0 1
36052: NOT
36053: IFFALSE 36057
// exit ;
36055: GO 36147
// for i in units do
36057: LD_ADDR_VAR 0 4
36061: PUSH
36062: LD_VAR 0 1
36066: PUSH
36067: FOR_IN
36068: IFFALSE 36145
// if BuildingStatus ( b ) = bs_build then
36070: LD_VAR 0 2
36074: PPUSH
36075: CALL_OW 461
36079: PUSH
36080: LD_INT 1
36082: EQUAL
36083: IFFALSE 36143
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36085: LD_VAR 0 4
36089: PPUSH
36090: LD_STRING h
36092: PUSH
36093: LD_VAR 0 2
36097: PPUSH
36098: CALL_OW 250
36102: PUSH
36103: LD_VAR 0 2
36107: PPUSH
36108: CALL_OW 251
36112: PUSH
36113: LD_VAR 0 2
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: PUSH
36136: EMPTY
36137: LIST
36138: PPUSH
36139: CALL_OW 446
36143: GO 36067
36145: POP
36146: POP
// end ;
36147: LD_VAR 0 3
36151: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36152: LD_INT 0
36154: PPUSH
36155: PPUSH
36156: PPUSH
36157: PPUSH
36158: PPUSH
36159: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36160: LD_VAR 0 1
36164: NOT
36165: PUSH
36166: LD_VAR 0 1
36170: PPUSH
36171: CALL_OW 263
36175: PUSH
36176: LD_INT 2
36178: NONEQUAL
36179: OR
36180: IFFALSE 36184
// exit ;
36182: GO 36500
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36184: LD_ADDR_VAR 0 6
36188: PUSH
36189: LD_INT 22
36191: PUSH
36192: LD_VAR 0 1
36196: PPUSH
36197: CALL_OW 255
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 2
36208: PUSH
36209: LD_INT 30
36211: PUSH
36212: LD_INT 36
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 34
36221: PUSH
36222: LD_INT 31
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: LIST
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PPUSH
36238: CALL_OW 69
36242: ST_TO_ADDR
// if not tmp then
36243: LD_VAR 0 6
36247: NOT
36248: IFFALSE 36252
// exit ;
36250: GO 36500
// result := [ ] ;
36252: LD_ADDR_VAR 0 2
36256: PUSH
36257: EMPTY
36258: ST_TO_ADDR
// for i in tmp do
36259: LD_ADDR_VAR 0 3
36263: PUSH
36264: LD_VAR 0 6
36268: PUSH
36269: FOR_IN
36270: IFFALSE 36341
// begin t := UnitsInside ( i ) ;
36272: LD_ADDR_VAR 0 4
36276: PUSH
36277: LD_VAR 0 3
36281: PPUSH
36282: CALL_OW 313
36286: ST_TO_ADDR
// if t then
36287: LD_VAR 0 4
36291: IFFALSE 36339
// for j in t do
36293: LD_ADDR_VAR 0 7
36297: PUSH
36298: LD_VAR 0 4
36302: PUSH
36303: FOR_IN
36304: IFFALSE 36337
// result := Replace ( result , result + 1 , j ) ;
36306: LD_ADDR_VAR 0 2
36310: PUSH
36311: LD_VAR 0 2
36315: PPUSH
36316: LD_VAR 0 2
36320: PUSH
36321: LD_INT 1
36323: PLUS
36324: PPUSH
36325: LD_VAR 0 7
36329: PPUSH
36330: CALL_OW 1
36334: ST_TO_ADDR
36335: GO 36303
36337: POP
36338: POP
// end ;
36339: GO 36269
36341: POP
36342: POP
// if not result then
36343: LD_VAR 0 2
36347: NOT
36348: IFFALSE 36352
// exit ;
36350: GO 36500
// mech := result [ 1 ] ;
36352: LD_ADDR_VAR 0 5
36356: PUSH
36357: LD_VAR 0 2
36361: PUSH
36362: LD_INT 1
36364: ARRAY
36365: ST_TO_ADDR
// if result > 1 then
36366: LD_VAR 0 2
36370: PUSH
36371: LD_INT 1
36373: GREATER
36374: IFFALSE 36486
// begin for i = 2 to result do
36376: LD_ADDR_VAR 0 3
36380: PUSH
36381: DOUBLE
36382: LD_INT 2
36384: DEC
36385: ST_TO_ADDR
36386: LD_VAR 0 2
36390: PUSH
36391: FOR_TO
36392: IFFALSE 36484
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36394: LD_ADDR_VAR 0 4
36398: PUSH
36399: LD_VAR 0 2
36403: PUSH
36404: LD_VAR 0 3
36408: ARRAY
36409: PPUSH
36410: LD_INT 3
36412: PPUSH
36413: CALL_OW 259
36417: PUSH
36418: LD_VAR 0 2
36422: PUSH
36423: LD_VAR 0 3
36427: ARRAY
36428: PPUSH
36429: CALL_OW 432
36433: MINUS
36434: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36435: LD_VAR 0 4
36439: PUSH
36440: LD_VAR 0 5
36444: PPUSH
36445: LD_INT 3
36447: PPUSH
36448: CALL_OW 259
36452: PUSH
36453: LD_VAR 0 5
36457: PPUSH
36458: CALL_OW 432
36462: MINUS
36463: GREATEREQUAL
36464: IFFALSE 36482
// mech := result [ i ] ;
36466: LD_ADDR_VAR 0 5
36470: PUSH
36471: LD_VAR 0 2
36475: PUSH
36476: LD_VAR 0 3
36480: ARRAY
36481: ST_TO_ADDR
// end ;
36482: GO 36391
36484: POP
36485: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36486: LD_VAR 0 1
36490: PPUSH
36491: LD_VAR 0 5
36495: PPUSH
36496: CALL_OW 135
// end ;
36500: LD_VAR 0 2
36504: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36505: LD_INT 0
36507: PPUSH
36508: PPUSH
36509: PPUSH
36510: PPUSH
36511: PPUSH
36512: PPUSH
36513: PPUSH
36514: PPUSH
36515: PPUSH
36516: PPUSH
36517: PPUSH
36518: PPUSH
36519: PPUSH
// result := [ ] ;
36520: LD_ADDR_VAR 0 7
36524: PUSH
36525: EMPTY
36526: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36527: LD_VAR 0 1
36531: PPUSH
36532: CALL_OW 266
36536: PUSH
36537: LD_INT 0
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: IN
36547: NOT
36548: IFFALSE 36552
// exit ;
36550: GO 38186
// if name then
36552: LD_VAR 0 3
36556: IFFALSE 36572
// SetBName ( base_dep , name ) ;
36558: LD_VAR 0 1
36562: PPUSH
36563: LD_VAR 0 3
36567: PPUSH
36568: CALL_OW 500
// base := GetBase ( base_dep ) ;
36572: LD_ADDR_VAR 0 15
36576: PUSH
36577: LD_VAR 0 1
36581: PPUSH
36582: CALL_OW 274
36586: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36587: LD_ADDR_VAR 0 16
36591: PUSH
36592: LD_VAR 0 1
36596: PPUSH
36597: CALL_OW 255
36601: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36602: LD_ADDR_VAR 0 17
36606: PUSH
36607: LD_VAR 0 1
36611: PPUSH
36612: CALL_OW 248
36616: ST_TO_ADDR
// if sources then
36617: LD_VAR 0 5
36621: IFFALSE 36668
// for i = 1 to 3 do
36623: LD_ADDR_VAR 0 8
36627: PUSH
36628: DOUBLE
36629: LD_INT 1
36631: DEC
36632: ST_TO_ADDR
36633: LD_INT 3
36635: PUSH
36636: FOR_TO
36637: IFFALSE 36666
// AddResourceType ( base , i , sources [ i ] ) ;
36639: LD_VAR 0 15
36643: PPUSH
36644: LD_VAR 0 8
36648: PPUSH
36649: LD_VAR 0 5
36653: PUSH
36654: LD_VAR 0 8
36658: ARRAY
36659: PPUSH
36660: CALL_OW 276
36664: GO 36636
36666: POP
36667: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36668: LD_ADDR_VAR 0 18
36672: PUSH
36673: LD_VAR 0 15
36677: PPUSH
36678: LD_VAR 0 2
36682: PPUSH
36683: LD_INT 1
36685: PPUSH
36686: CALL 35929 0 3
36690: ST_TO_ADDR
// InitHc ;
36691: CALL_OW 19
// InitUc ;
36695: CALL_OW 18
// uc_side := side ;
36699: LD_ADDR_OWVAR 20
36703: PUSH
36704: LD_VAR 0 16
36708: ST_TO_ADDR
// uc_nation := nation ;
36709: LD_ADDR_OWVAR 21
36713: PUSH
36714: LD_VAR 0 17
36718: ST_TO_ADDR
// if buildings then
36719: LD_VAR 0 18
36723: IFFALSE 38045
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36725: LD_ADDR_VAR 0 19
36729: PUSH
36730: LD_VAR 0 18
36734: PPUSH
36735: LD_INT 2
36737: PUSH
36738: LD_INT 30
36740: PUSH
36741: LD_INT 29
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 30
36750: PUSH
36751: LD_INT 30
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: LIST
36762: PPUSH
36763: CALL_OW 72
36767: ST_TO_ADDR
// if tmp then
36768: LD_VAR 0 19
36772: IFFALSE 36820
// for i in tmp do
36774: LD_ADDR_VAR 0 8
36778: PUSH
36779: LD_VAR 0 19
36783: PUSH
36784: FOR_IN
36785: IFFALSE 36818
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36787: LD_VAR 0 8
36791: PPUSH
36792: CALL_OW 250
36796: PPUSH
36797: LD_VAR 0 8
36801: PPUSH
36802: CALL_OW 251
36806: PPUSH
36807: LD_VAR 0 16
36811: PPUSH
36812: CALL_OW 441
36816: GO 36784
36818: POP
36819: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36820: LD_VAR 0 18
36824: PPUSH
36825: LD_INT 2
36827: PUSH
36828: LD_INT 30
36830: PUSH
36831: LD_INT 32
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 30
36840: PUSH
36841: LD_INT 33
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: LIST
36852: PPUSH
36853: CALL_OW 72
36857: IFFALSE 36945
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36859: LD_ADDR_VAR 0 8
36863: PUSH
36864: LD_VAR 0 18
36868: PPUSH
36869: LD_INT 2
36871: PUSH
36872: LD_INT 30
36874: PUSH
36875: LD_INT 32
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 30
36884: PUSH
36885: LD_INT 33
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: LIST
36896: PPUSH
36897: CALL_OW 72
36901: PUSH
36902: FOR_IN
36903: IFFALSE 36943
// begin if not GetBWeapon ( i ) then
36905: LD_VAR 0 8
36909: PPUSH
36910: CALL_OW 269
36914: NOT
36915: IFFALSE 36941
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36917: LD_VAR 0 8
36921: PPUSH
36922: LD_VAR 0 8
36926: PPUSH
36927: LD_VAR 0 2
36931: PPUSH
36932: CALL 38191 0 2
36936: PPUSH
36937: CALL_OW 431
// end ;
36941: GO 36902
36943: POP
36944: POP
// end ; for i = 1 to personel do
36945: LD_ADDR_VAR 0 8
36949: PUSH
36950: DOUBLE
36951: LD_INT 1
36953: DEC
36954: ST_TO_ADDR
36955: LD_VAR 0 6
36959: PUSH
36960: FOR_TO
36961: IFFALSE 38025
// begin if i > 4 then
36963: LD_VAR 0 8
36967: PUSH
36968: LD_INT 4
36970: GREATER
36971: IFFALSE 36975
// break ;
36973: GO 38025
// case i of 1 :
36975: LD_VAR 0 8
36979: PUSH
36980: LD_INT 1
36982: DOUBLE
36983: EQUAL
36984: IFTRUE 36988
36986: GO 37068
36988: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36989: LD_ADDR_VAR 0 12
36993: PUSH
36994: LD_VAR 0 18
36998: PPUSH
36999: LD_INT 22
37001: PUSH
37002: LD_VAR 0 16
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 58
37013: PUSH
37014: EMPTY
37015: LIST
37016: PUSH
37017: LD_INT 2
37019: PUSH
37020: LD_INT 30
37022: PUSH
37023: LD_INT 32
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 30
37032: PUSH
37033: LD_INT 4
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 30
37042: PUSH
37043: LD_INT 5
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: LIST
37060: PPUSH
37061: CALL_OW 72
37065: ST_TO_ADDR
37066: GO 37290
37068: LD_INT 2
37070: DOUBLE
37071: EQUAL
37072: IFTRUE 37076
37074: GO 37138
37076: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37077: LD_ADDR_VAR 0 12
37081: PUSH
37082: LD_VAR 0 18
37086: PPUSH
37087: LD_INT 22
37089: PUSH
37090: LD_VAR 0 16
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 2
37101: PUSH
37102: LD_INT 30
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 30
37114: PUSH
37115: LD_INT 1
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: LIST
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PPUSH
37131: CALL_OW 72
37135: ST_TO_ADDR
37136: GO 37290
37138: LD_INT 3
37140: DOUBLE
37141: EQUAL
37142: IFTRUE 37146
37144: GO 37208
37146: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37147: LD_ADDR_VAR 0 12
37151: PUSH
37152: LD_VAR 0 18
37156: PPUSH
37157: LD_INT 22
37159: PUSH
37160: LD_VAR 0 16
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 2
37171: PUSH
37172: LD_INT 30
37174: PUSH
37175: LD_INT 2
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 30
37184: PUSH
37185: LD_INT 3
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: LIST
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PPUSH
37201: CALL_OW 72
37205: ST_TO_ADDR
37206: GO 37290
37208: LD_INT 4
37210: DOUBLE
37211: EQUAL
37212: IFTRUE 37216
37214: GO 37289
37216: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37217: LD_ADDR_VAR 0 12
37221: PUSH
37222: LD_VAR 0 18
37226: PPUSH
37227: LD_INT 22
37229: PUSH
37230: LD_VAR 0 16
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 2
37241: PUSH
37242: LD_INT 30
37244: PUSH
37245: LD_INT 6
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 30
37254: PUSH
37255: LD_INT 7
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 30
37264: PUSH
37265: LD_INT 8
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PPUSH
37282: CALL_OW 72
37286: ST_TO_ADDR
37287: GO 37290
37289: POP
// if i = 1 then
37290: LD_VAR 0 8
37294: PUSH
37295: LD_INT 1
37297: EQUAL
37298: IFFALSE 37409
// begin tmp := [ ] ;
37300: LD_ADDR_VAR 0 19
37304: PUSH
37305: EMPTY
37306: ST_TO_ADDR
// for j in f do
37307: LD_ADDR_VAR 0 9
37311: PUSH
37312: LD_VAR 0 12
37316: PUSH
37317: FOR_IN
37318: IFFALSE 37391
// if GetBType ( j ) = b_bunker then
37320: LD_VAR 0 9
37324: PPUSH
37325: CALL_OW 266
37329: PUSH
37330: LD_INT 32
37332: EQUAL
37333: IFFALSE 37360
// tmp := Insert ( tmp , 1 , j ) else
37335: LD_ADDR_VAR 0 19
37339: PUSH
37340: LD_VAR 0 19
37344: PPUSH
37345: LD_INT 1
37347: PPUSH
37348: LD_VAR 0 9
37352: PPUSH
37353: CALL_OW 2
37357: ST_TO_ADDR
37358: GO 37389
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37360: LD_ADDR_VAR 0 19
37364: PUSH
37365: LD_VAR 0 19
37369: PPUSH
37370: LD_VAR 0 19
37374: PUSH
37375: LD_INT 1
37377: PLUS
37378: PPUSH
37379: LD_VAR 0 9
37383: PPUSH
37384: CALL_OW 2
37388: ST_TO_ADDR
37389: GO 37317
37391: POP
37392: POP
// if tmp then
37393: LD_VAR 0 19
37397: IFFALSE 37409
// f := tmp ;
37399: LD_ADDR_VAR 0 12
37403: PUSH
37404: LD_VAR 0 19
37408: ST_TO_ADDR
// end ; x := personel [ i ] ;
37409: LD_ADDR_VAR 0 13
37413: PUSH
37414: LD_VAR 0 6
37418: PUSH
37419: LD_VAR 0 8
37423: ARRAY
37424: ST_TO_ADDR
// if x = - 1 then
37425: LD_VAR 0 13
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: EQUAL
37434: IFFALSE 37643
// begin for j in f do
37436: LD_ADDR_VAR 0 9
37440: PUSH
37441: LD_VAR 0 12
37445: PUSH
37446: FOR_IN
37447: IFFALSE 37639
// repeat InitHc ;
37449: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37453: LD_VAR 0 9
37457: PPUSH
37458: CALL_OW 266
37462: PUSH
37463: LD_INT 5
37465: EQUAL
37466: IFFALSE 37536
// begin if UnitsInside ( j ) < 3 then
37468: LD_VAR 0 9
37472: PPUSH
37473: CALL_OW 313
37477: PUSH
37478: LD_INT 3
37480: LESS
37481: IFFALSE 37517
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37483: LD_INT 0
37485: PPUSH
37486: LD_INT 5
37488: PUSH
37489: LD_INT 8
37491: PUSH
37492: LD_INT 9
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: LIST
37499: PUSH
37500: LD_VAR 0 17
37504: ARRAY
37505: PPUSH
37506: LD_VAR 0 4
37510: PPUSH
37511: CALL_OW 380
37515: GO 37534
// PrepareHuman ( false , i , skill ) ;
37517: LD_INT 0
37519: PPUSH
37520: LD_VAR 0 8
37524: PPUSH
37525: LD_VAR 0 4
37529: PPUSH
37530: CALL_OW 380
// end else
37534: GO 37553
// PrepareHuman ( false , i , skill ) ;
37536: LD_INT 0
37538: PPUSH
37539: LD_VAR 0 8
37543: PPUSH
37544: LD_VAR 0 4
37548: PPUSH
37549: CALL_OW 380
// un := CreateHuman ;
37553: LD_ADDR_VAR 0 14
37557: PUSH
37558: CALL_OW 44
37562: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37563: LD_ADDR_VAR 0 7
37567: PUSH
37568: LD_VAR 0 7
37572: PPUSH
37573: LD_INT 1
37575: PPUSH
37576: LD_VAR 0 14
37580: PPUSH
37581: CALL_OW 2
37585: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37586: LD_VAR 0 14
37590: PPUSH
37591: LD_VAR 0 9
37595: PPUSH
37596: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37600: LD_VAR 0 9
37604: PPUSH
37605: CALL_OW 313
37609: PUSH
37610: LD_INT 6
37612: EQUAL
37613: PUSH
37614: LD_VAR 0 9
37618: PPUSH
37619: CALL_OW 266
37623: PUSH
37624: LD_INT 32
37626: PUSH
37627: LD_INT 31
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: IN
37634: OR
37635: IFFALSE 37449
37637: GO 37446
37639: POP
37640: POP
// end else
37641: GO 38023
// for j = 1 to x do
37643: LD_ADDR_VAR 0 9
37647: PUSH
37648: DOUBLE
37649: LD_INT 1
37651: DEC
37652: ST_TO_ADDR
37653: LD_VAR 0 13
37657: PUSH
37658: FOR_TO
37659: IFFALSE 38021
// begin InitHc ;
37661: CALL_OW 19
// if not f then
37665: LD_VAR 0 12
37669: NOT
37670: IFFALSE 37759
// begin PrepareHuman ( false , i , skill ) ;
37672: LD_INT 0
37674: PPUSH
37675: LD_VAR 0 8
37679: PPUSH
37680: LD_VAR 0 4
37684: PPUSH
37685: CALL_OW 380
// un := CreateHuman ;
37689: LD_ADDR_VAR 0 14
37693: PUSH
37694: CALL_OW 44
37698: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37699: LD_ADDR_VAR 0 7
37703: PUSH
37704: LD_VAR 0 7
37708: PPUSH
37709: LD_INT 1
37711: PPUSH
37712: LD_VAR 0 14
37716: PPUSH
37717: CALL_OW 2
37721: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37722: LD_VAR 0 14
37726: PPUSH
37727: LD_VAR 0 1
37731: PPUSH
37732: CALL_OW 250
37736: PPUSH
37737: LD_VAR 0 1
37741: PPUSH
37742: CALL_OW 251
37746: PPUSH
37747: LD_INT 10
37749: PPUSH
37750: LD_INT 0
37752: PPUSH
37753: CALL_OW 50
// continue ;
37757: GO 37658
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37759: LD_VAR 0 12
37763: PUSH
37764: LD_INT 1
37766: ARRAY
37767: PPUSH
37768: CALL_OW 313
37772: PUSH
37773: LD_VAR 0 12
37777: PUSH
37778: LD_INT 1
37780: ARRAY
37781: PPUSH
37782: CALL_OW 266
37786: PUSH
37787: LD_INT 32
37789: PUSH
37790: LD_INT 31
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: IN
37797: AND
37798: PUSH
37799: LD_VAR 0 12
37803: PUSH
37804: LD_INT 1
37806: ARRAY
37807: PPUSH
37808: CALL_OW 313
37812: PUSH
37813: LD_INT 6
37815: EQUAL
37816: OR
37817: IFFALSE 37837
// f := Delete ( f , 1 ) ;
37819: LD_ADDR_VAR 0 12
37823: PUSH
37824: LD_VAR 0 12
37828: PPUSH
37829: LD_INT 1
37831: PPUSH
37832: CALL_OW 3
37836: ST_TO_ADDR
// if not f then
37837: LD_VAR 0 12
37841: NOT
37842: IFFALSE 37860
// begin x := x + 2 ;
37844: LD_ADDR_VAR 0 13
37848: PUSH
37849: LD_VAR 0 13
37853: PUSH
37854: LD_INT 2
37856: PLUS
37857: ST_TO_ADDR
// continue ;
37858: GO 37658
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37860: LD_VAR 0 12
37864: PUSH
37865: LD_INT 1
37867: ARRAY
37868: PPUSH
37869: CALL_OW 266
37873: PUSH
37874: LD_INT 5
37876: EQUAL
37877: IFFALSE 37951
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37879: LD_VAR 0 12
37883: PUSH
37884: LD_INT 1
37886: ARRAY
37887: PPUSH
37888: CALL_OW 313
37892: PUSH
37893: LD_INT 3
37895: LESS
37896: IFFALSE 37932
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37898: LD_INT 0
37900: PPUSH
37901: LD_INT 5
37903: PUSH
37904: LD_INT 8
37906: PUSH
37907: LD_INT 9
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: LIST
37914: PUSH
37915: LD_VAR 0 17
37919: ARRAY
37920: PPUSH
37921: LD_VAR 0 4
37925: PPUSH
37926: CALL_OW 380
37930: GO 37949
// PrepareHuman ( false , i , skill ) ;
37932: LD_INT 0
37934: PPUSH
37935: LD_VAR 0 8
37939: PPUSH
37940: LD_VAR 0 4
37944: PPUSH
37945: CALL_OW 380
// end else
37949: GO 37968
// PrepareHuman ( false , i , skill ) ;
37951: LD_INT 0
37953: PPUSH
37954: LD_VAR 0 8
37958: PPUSH
37959: LD_VAR 0 4
37963: PPUSH
37964: CALL_OW 380
// un := CreateHuman ;
37968: LD_ADDR_VAR 0 14
37972: PUSH
37973: CALL_OW 44
37977: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37978: LD_ADDR_VAR 0 7
37982: PUSH
37983: LD_VAR 0 7
37987: PPUSH
37988: LD_INT 1
37990: PPUSH
37991: LD_VAR 0 14
37995: PPUSH
37996: CALL_OW 2
38000: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38001: LD_VAR 0 14
38005: PPUSH
38006: LD_VAR 0 12
38010: PUSH
38011: LD_INT 1
38013: ARRAY
38014: PPUSH
38015: CALL_OW 52
// end ;
38019: GO 37658
38021: POP
38022: POP
// end ;
38023: GO 36960
38025: POP
38026: POP
// result := result ^ buildings ;
38027: LD_ADDR_VAR 0 7
38031: PUSH
38032: LD_VAR 0 7
38036: PUSH
38037: LD_VAR 0 18
38041: ADD
38042: ST_TO_ADDR
// end else
38043: GO 38186
// begin for i = 1 to personel do
38045: LD_ADDR_VAR 0 8
38049: PUSH
38050: DOUBLE
38051: LD_INT 1
38053: DEC
38054: ST_TO_ADDR
38055: LD_VAR 0 6
38059: PUSH
38060: FOR_TO
38061: IFFALSE 38184
// begin if i > 4 then
38063: LD_VAR 0 8
38067: PUSH
38068: LD_INT 4
38070: GREATER
38071: IFFALSE 38075
// break ;
38073: GO 38184
// x := personel [ i ] ;
38075: LD_ADDR_VAR 0 13
38079: PUSH
38080: LD_VAR 0 6
38084: PUSH
38085: LD_VAR 0 8
38089: ARRAY
38090: ST_TO_ADDR
// if x = - 1 then
38091: LD_VAR 0 13
38095: PUSH
38096: LD_INT 1
38098: NEG
38099: EQUAL
38100: IFFALSE 38104
// continue ;
38102: GO 38060
// PrepareHuman ( false , i , skill ) ;
38104: LD_INT 0
38106: PPUSH
38107: LD_VAR 0 8
38111: PPUSH
38112: LD_VAR 0 4
38116: PPUSH
38117: CALL_OW 380
// un := CreateHuman ;
38121: LD_ADDR_VAR 0 14
38125: PUSH
38126: CALL_OW 44
38130: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38131: LD_VAR 0 14
38135: PPUSH
38136: LD_VAR 0 1
38140: PPUSH
38141: CALL_OW 250
38145: PPUSH
38146: LD_VAR 0 1
38150: PPUSH
38151: CALL_OW 251
38155: PPUSH
38156: LD_INT 10
38158: PPUSH
38159: LD_INT 0
38161: PPUSH
38162: CALL_OW 50
// result := result ^ un ;
38166: LD_ADDR_VAR 0 7
38170: PUSH
38171: LD_VAR 0 7
38175: PUSH
38176: LD_VAR 0 14
38180: ADD
38181: ST_TO_ADDR
// end ;
38182: GO 38060
38184: POP
38185: POP
// end ; end ;
38186: LD_VAR 0 7
38190: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38191: LD_INT 0
38193: PPUSH
38194: PPUSH
38195: PPUSH
38196: PPUSH
38197: PPUSH
38198: PPUSH
38199: PPUSH
38200: PPUSH
38201: PPUSH
38202: PPUSH
38203: PPUSH
38204: PPUSH
38205: PPUSH
38206: PPUSH
38207: PPUSH
38208: PPUSH
// result := false ;
38209: LD_ADDR_VAR 0 3
38213: PUSH
38214: LD_INT 0
38216: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38217: LD_VAR 0 1
38221: NOT
38222: PUSH
38223: LD_VAR 0 1
38227: PPUSH
38228: CALL_OW 266
38232: PUSH
38233: LD_INT 32
38235: PUSH
38236: LD_INT 33
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: IN
38243: NOT
38244: OR
38245: IFFALSE 38249
// exit ;
38247: GO 39358
// nat := GetNation ( tower ) ;
38249: LD_ADDR_VAR 0 12
38253: PUSH
38254: LD_VAR 0 1
38258: PPUSH
38259: CALL_OW 248
38263: ST_TO_ADDR
// side := GetSide ( tower ) ;
38264: LD_ADDR_VAR 0 16
38268: PUSH
38269: LD_VAR 0 1
38273: PPUSH
38274: CALL_OW 255
38278: ST_TO_ADDR
// x := GetX ( tower ) ;
38279: LD_ADDR_VAR 0 10
38283: PUSH
38284: LD_VAR 0 1
38288: PPUSH
38289: CALL_OW 250
38293: ST_TO_ADDR
// y := GetY ( tower ) ;
38294: LD_ADDR_VAR 0 11
38298: PUSH
38299: LD_VAR 0 1
38303: PPUSH
38304: CALL_OW 251
38308: ST_TO_ADDR
// if not x or not y then
38309: LD_VAR 0 10
38313: NOT
38314: PUSH
38315: LD_VAR 0 11
38319: NOT
38320: OR
38321: IFFALSE 38325
// exit ;
38323: GO 39358
// weapon := 0 ;
38325: LD_ADDR_VAR 0 18
38329: PUSH
38330: LD_INT 0
38332: ST_TO_ADDR
// fac_list := [ ] ;
38333: LD_ADDR_VAR 0 17
38337: PUSH
38338: EMPTY
38339: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38340: LD_ADDR_VAR 0 6
38344: PUSH
38345: LD_VAR 0 1
38349: PPUSH
38350: CALL_OW 274
38354: PPUSH
38355: LD_VAR 0 2
38359: PPUSH
38360: LD_INT 0
38362: PPUSH
38363: CALL 35929 0 3
38367: PPUSH
38368: LD_INT 30
38370: PUSH
38371: LD_INT 3
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PPUSH
38378: CALL_OW 72
38382: ST_TO_ADDR
// if not factories then
38383: LD_VAR 0 6
38387: NOT
38388: IFFALSE 38392
// exit ;
38390: GO 39358
// for i in factories do
38392: LD_ADDR_VAR 0 8
38396: PUSH
38397: LD_VAR 0 6
38401: PUSH
38402: FOR_IN
38403: IFFALSE 38428
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38405: LD_ADDR_VAR 0 17
38409: PUSH
38410: LD_VAR 0 17
38414: PUSH
38415: LD_VAR 0 8
38419: PPUSH
38420: CALL_OW 478
38424: UNION
38425: ST_TO_ADDR
38426: GO 38402
38428: POP
38429: POP
// if not fac_list then
38430: LD_VAR 0 17
38434: NOT
38435: IFFALSE 38439
// exit ;
38437: GO 39358
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38439: LD_ADDR_VAR 0 5
38443: PUSH
38444: LD_INT 4
38446: PUSH
38447: LD_INT 5
38449: PUSH
38450: LD_INT 9
38452: PUSH
38453: LD_INT 10
38455: PUSH
38456: LD_INT 6
38458: PUSH
38459: LD_INT 7
38461: PUSH
38462: LD_INT 11
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 27
38476: PUSH
38477: LD_INT 28
38479: PUSH
38480: LD_INT 26
38482: PUSH
38483: LD_INT 30
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 43
38494: PUSH
38495: LD_INT 44
38497: PUSH
38498: LD_INT 46
38500: PUSH
38501: LD_INT 45
38503: PUSH
38504: LD_INT 47
38506: PUSH
38507: LD_INT 49
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: LIST
38522: PUSH
38523: LD_VAR 0 12
38527: ARRAY
38528: ST_TO_ADDR
// list := list isect fac_list ;
38529: LD_ADDR_VAR 0 5
38533: PUSH
38534: LD_VAR 0 5
38538: PUSH
38539: LD_VAR 0 17
38543: ISECT
38544: ST_TO_ADDR
// if not list then
38545: LD_VAR 0 5
38549: NOT
38550: IFFALSE 38554
// exit ;
38552: GO 39358
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38554: LD_VAR 0 12
38558: PUSH
38559: LD_INT 3
38561: EQUAL
38562: PUSH
38563: LD_INT 49
38565: PUSH
38566: LD_VAR 0 5
38570: IN
38571: AND
38572: PUSH
38573: LD_INT 31
38575: PPUSH
38576: LD_VAR 0 16
38580: PPUSH
38581: CALL_OW 321
38585: PUSH
38586: LD_INT 2
38588: EQUAL
38589: AND
38590: IFFALSE 38650
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38592: LD_INT 22
38594: PUSH
38595: LD_VAR 0 16
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 35
38606: PUSH
38607: LD_INT 49
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 91
38616: PUSH
38617: LD_VAR 0 1
38621: PUSH
38622: LD_INT 10
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: LIST
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: LIST
38634: PPUSH
38635: CALL_OW 69
38639: NOT
38640: IFFALSE 38650
// weapon := ru_time_lapser ;
38642: LD_ADDR_VAR 0 18
38646: PUSH
38647: LD_INT 49
38649: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38650: LD_VAR 0 12
38654: PUSH
38655: LD_INT 1
38657: PUSH
38658: LD_INT 2
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: IN
38665: PUSH
38666: LD_INT 11
38668: PUSH
38669: LD_VAR 0 5
38673: IN
38674: PUSH
38675: LD_INT 30
38677: PUSH
38678: LD_VAR 0 5
38682: IN
38683: OR
38684: AND
38685: PUSH
38686: LD_INT 6
38688: PPUSH
38689: LD_VAR 0 16
38693: PPUSH
38694: CALL_OW 321
38698: PUSH
38699: LD_INT 2
38701: EQUAL
38702: AND
38703: IFFALSE 38868
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38705: LD_INT 22
38707: PUSH
38708: LD_VAR 0 16
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 2
38719: PUSH
38720: LD_INT 35
38722: PUSH
38723: LD_INT 11
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 35
38732: PUSH
38733: LD_INT 30
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 91
38747: PUSH
38748: LD_VAR 0 1
38752: PUSH
38753: LD_INT 18
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: LIST
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: LIST
38765: PPUSH
38766: CALL_OW 69
38770: NOT
38771: PUSH
38772: LD_INT 22
38774: PUSH
38775: LD_VAR 0 16
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 2
38786: PUSH
38787: LD_INT 30
38789: PUSH
38790: LD_INT 32
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 30
38799: PUSH
38800: LD_INT 33
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 91
38814: PUSH
38815: LD_VAR 0 1
38819: PUSH
38820: LD_INT 12
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: LIST
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: LIST
38832: PUSH
38833: EMPTY
38834: LIST
38835: PPUSH
38836: CALL_OW 69
38840: PUSH
38841: LD_INT 2
38843: GREATER
38844: AND
38845: IFFALSE 38868
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38847: LD_ADDR_VAR 0 18
38851: PUSH
38852: LD_INT 11
38854: PUSH
38855: LD_INT 30
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_VAR 0 12
38866: ARRAY
38867: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38868: LD_VAR 0 18
38872: NOT
38873: PUSH
38874: LD_INT 40
38876: PPUSH
38877: LD_VAR 0 16
38881: PPUSH
38882: CALL_OW 321
38886: PUSH
38887: LD_INT 2
38889: EQUAL
38890: AND
38891: PUSH
38892: LD_INT 7
38894: PUSH
38895: LD_VAR 0 5
38899: IN
38900: PUSH
38901: LD_INT 28
38903: PUSH
38904: LD_VAR 0 5
38908: IN
38909: OR
38910: PUSH
38911: LD_INT 45
38913: PUSH
38914: LD_VAR 0 5
38918: IN
38919: OR
38920: AND
38921: IFFALSE 39175
// begin hex := GetHexInfo ( x , y ) ;
38923: LD_ADDR_VAR 0 4
38927: PUSH
38928: LD_VAR 0 10
38932: PPUSH
38933: LD_VAR 0 11
38937: PPUSH
38938: CALL_OW 546
38942: ST_TO_ADDR
// if hex [ 1 ] then
38943: LD_VAR 0 4
38947: PUSH
38948: LD_INT 1
38950: ARRAY
38951: IFFALSE 38955
// exit ;
38953: GO 39358
// height := hex [ 2 ] ;
38955: LD_ADDR_VAR 0 15
38959: PUSH
38960: LD_VAR 0 4
38964: PUSH
38965: LD_INT 2
38967: ARRAY
38968: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38969: LD_ADDR_VAR 0 14
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: LD_INT 3
38982: PUSH
38983: LD_INT 5
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: ST_TO_ADDR
// for i in tmp do
38992: LD_ADDR_VAR 0 8
38996: PUSH
38997: LD_VAR 0 14
39001: PUSH
39002: FOR_IN
39003: IFFALSE 39173
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39005: LD_ADDR_VAR 0 9
39009: PUSH
39010: LD_VAR 0 10
39014: PPUSH
39015: LD_VAR 0 8
39019: PPUSH
39020: LD_INT 5
39022: PPUSH
39023: CALL_OW 272
39027: PUSH
39028: LD_VAR 0 11
39032: PPUSH
39033: LD_VAR 0 8
39037: PPUSH
39038: LD_INT 5
39040: PPUSH
39041: CALL_OW 273
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39050: LD_VAR 0 9
39054: PUSH
39055: LD_INT 1
39057: ARRAY
39058: PPUSH
39059: LD_VAR 0 9
39063: PUSH
39064: LD_INT 2
39066: ARRAY
39067: PPUSH
39068: CALL_OW 488
39072: IFFALSE 39171
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39074: LD_ADDR_VAR 0 4
39078: PUSH
39079: LD_VAR 0 9
39083: PUSH
39084: LD_INT 1
39086: ARRAY
39087: PPUSH
39088: LD_VAR 0 9
39092: PUSH
39093: LD_INT 2
39095: ARRAY
39096: PPUSH
39097: CALL_OW 546
39101: ST_TO_ADDR
// if hex [ 1 ] then
39102: LD_VAR 0 4
39106: PUSH
39107: LD_INT 1
39109: ARRAY
39110: IFFALSE 39114
// continue ;
39112: GO 39002
// h := hex [ 2 ] ;
39114: LD_ADDR_VAR 0 13
39118: PUSH
39119: LD_VAR 0 4
39123: PUSH
39124: LD_INT 2
39126: ARRAY
39127: ST_TO_ADDR
// if h + 7 < height then
39128: LD_VAR 0 13
39132: PUSH
39133: LD_INT 7
39135: PLUS
39136: PUSH
39137: LD_VAR 0 15
39141: LESS
39142: IFFALSE 39171
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39144: LD_ADDR_VAR 0 18
39148: PUSH
39149: LD_INT 7
39151: PUSH
39152: LD_INT 28
39154: PUSH
39155: LD_INT 45
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: LIST
39162: PUSH
39163: LD_VAR 0 12
39167: ARRAY
39168: ST_TO_ADDR
// break ;
39169: GO 39173
// end ; end ; end ;
39171: GO 39002
39173: POP
39174: POP
// end ; if not weapon then
39175: LD_VAR 0 18
39179: NOT
39180: IFFALSE 39240
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39182: LD_ADDR_VAR 0 5
39186: PUSH
39187: LD_VAR 0 5
39191: PUSH
39192: LD_INT 11
39194: PUSH
39195: LD_INT 30
39197: PUSH
39198: LD_INT 49
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: LIST
39205: DIFF
39206: ST_TO_ADDR
// if not list then
39207: LD_VAR 0 5
39211: NOT
39212: IFFALSE 39216
// exit ;
39214: GO 39358
// weapon := list [ rand ( 1 , list ) ] ;
39216: LD_ADDR_VAR 0 18
39220: PUSH
39221: LD_VAR 0 5
39225: PUSH
39226: LD_INT 1
39228: PPUSH
39229: LD_VAR 0 5
39233: PPUSH
39234: CALL_OW 12
39238: ARRAY
39239: ST_TO_ADDR
// end ; if weapon then
39240: LD_VAR 0 18
39244: IFFALSE 39358
// begin tmp := CostOfWeapon ( weapon ) ;
39246: LD_ADDR_VAR 0 14
39250: PUSH
39251: LD_VAR 0 18
39255: PPUSH
39256: CALL_OW 451
39260: ST_TO_ADDR
// j := GetBase ( tower ) ;
39261: LD_ADDR_VAR 0 9
39265: PUSH
39266: LD_VAR 0 1
39270: PPUSH
39271: CALL_OW 274
39275: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39276: LD_VAR 0 9
39280: PPUSH
39281: LD_INT 1
39283: PPUSH
39284: CALL_OW 275
39288: PUSH
39289: LD_VAR 0 14
39293: PUSH
39294: LD_INT 1
39296: ARRAY
39297: GREATEREQUAL
39298: PUSH
39299: LD_VAR 0 9
39303: PPUSH
39304: LD_INT 2
39306: PPUSH
39307: CALL_OW 275
39311: PUSH
39312: LD_VAR 0 14
39316: PUSH
39317: LD_INT 2
39319: ARRAY
39320: GREATEREQUAL
39321: AND
39322: PUSH
39323: LD_VAR 0 9
39327: PPUSH
39328: LD_INT 3
39330: PPUSH
39331: CALL_OW 275
39335: PUSH
39336: LD_VAR 0 14
39340: PUSH
39341: LD_INT 3
39343: ARRAY
39344: GREATEREQUAL
39345: AND
39346: IFFALSE 39358
// result := weapon ;
39348: LD_ADDR_VAR 0 3
39352: PUSH
39353: LD_VAR 0 18
39357: ST_TO_ADDR
// end ; end ;
39358: LD_VAR 0 3
39362: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39363: LD_INT 0
39365: PPUSH
39366: PPUSH
// result := true ;
39367: LD_ADDR_VAR 0 3
39371: PUSH
39372: LD_INT 1
39374: ST_TO_ADDR
// if array1 = array2 then
39375: LD_VAR 0 1
39379: PUSH
39380: LD_VAR 0 2
39384: EQUAL
39385: IFFALSE 39445
// begin for i = 1 to array1 do
39387: LD_ADDR_VAR 0 4
39391: PUSH
39392: DOUBLE
39393: LD_INT 1
39395: DEC
39396: ST_TO_ADDR
39397: LD_VAR 0 1
39401: PUSH
39402: FOR_TO
39403: IFFALSE 39441
// if array1 [ i ] <> array2 [ i ] then
39405: LD_VAR 0 1
39409: PUSH
39410: LD_VAR 0 4
39414: ARRAY
39415: PUSH
39416: LD_VAR 0 2
39420: PUSH
39421: LD_VAR 0 4
39425: ARRAY
39426: NONEQUAL
39427: IFFALSE 39439
// begin result := false ;
39429: LD_ADDR_VAR 0 3
39433: PUSH
39434: LD_INT 0
39436: ST_TO_ADDR
// break ;
39437: GO 39441
// end ;
39439: GO 39402
39441: POP
39442: POP
// end else
39443: GO 39453
// result := false ;
39445: LD_ADDR_VAR 0 3
39449: PUSH
39450: LD_INT 0
39452: ST_TO_ADDR
// end ;
39453: LD_VAR 0 3
39457: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39458: LD_INT 0
39460: PPUSH
39461: PPUSH
// if not array1 or not array2 then
39462: LD_VAR 0 1
39466: NOT
39467: PUSH
39468: LD_VAR 0 2
39472: NOT
39473: OR
39474: IFFALSE 39478
// exit ;
39476: GO 39542
// result := true ;
39478: LD_ADDR_VAR 0 3
39482: PUSH
39483: LD_INT 1
39485: ST_TO_ADDR
// for i = 1 to array1 do
39486: LD_ADDR_VAR 0 4
39490: PUSH
39491: DOUBLE
39492: LD_INT 1
39494: DEC
39495: ST_TO_ADDR
39496: LD_VAR 0 1
39500: PUSH
39501: FOR_TO
39502: IFFALSE 39540
// if array1 [ i ] <> array2 [ i ] then
39504: LD_VAR 0 1
39508: PUSH
39509: LD_VAR 0 4
39513: ARRAY
39514: PUSH
39515: LD_VAR 0 2
39519: PUSH
39520: LD_VAR 0 4
39524: ARRAY
39525: NONEQUAL
39526: IFFALSE 39538
// begin result := false ;
39528: LD_ADDR_VAR 0 3
39532: PUSH
39533: LD_INT 0
39535: ST_TO_ADDR
// break ;
39536: GO 39540
// end ;
39538: GO 39501
39540: POP
39541: POP
// end ;
39542: LD_VAR 0 3
39546: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39547: LD_INT 0
39549: PPUSH
39550: PPUSH
39551: PPUSH
// pom := GetBase ( fac ) ;
39552: LD_ADDR_VAR 0 5
39556: PUSH
39557: LD_VAR 0 1
39561: PPUSH
39562: CALL_OW 274
39566: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39567: LD_ADDR_VAR 0 4
39571: PUSH
39572: LD_VAR 0 2
39576: PUSH
39577: LD_INT 1
39579: ARRAY
39580: PPUSH
39581: LD_VAR 0 2
39585: PUSH
39586: LD_INT 2
39588: ARRAY
39589: PPUSH
39590: LD_VAR 0 2
39594: PUSH
39595: LD_INT 3
39597: ARRAY
39598: PPUSH
39599: LD_VAR 0 2
39603: PUSH
39604: LD_INT 4
39606: ARRAY
39607: PPUSH
39608: CALL_OW 449
39612: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39613: LD_ADDR_VAR 0 3
39617: PUSH
39618: LD_VAR 0 5
39622: PPUSH
39623: LD_INT 1
39625: PPUSH
39626: CALL_OW 275
39630: PUSH
39631: LD_VAR 0 4
39635: PUSH
39636: LD_INT 1
39638: ARRAY
39639: GREATEREQUAL
39640: PUSH
39641: LD_VAR 0 5
39645: PPUSH
39646: LD_INT 2
39648: PPUSH
39649: CALL_OW 275
39653: PUSH
39654: LD_VAR 0 4
39658: PUSH
39659: LD_INT 2
39661: ARRAY
39662: GREATEREQUAL
39663: AND
39664: PUSH
39665: LD_VAR 0 5
39669: PPUSH
39670: LD_INT 3
39672: PPUSH
39673: CALL_OW 275
39677: PUSH
39678: LD_VAR 0 4
39682: PUSH
39683: LD_INT 3
39685: ARRAY
39686: GREATEREQUAL
39687: AND
39688: ST_TO_ADDR
// end ;
39689: LD_VAR 0 3
39693: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39694: LD_INT 0
39696: PPUSH
39697: PPUSH
39698: PPUSH
39699: PPUSH
// pom := GetBase ( building ) ;
39700: LD_ADDR_VAR 0 3
39704: PUSH
39705: LD_VAR 0 1
39709: PPUSH
39710: CALL_OW 274
39714: ST_TO_ADDR
// if not pom then
39715: LD_VAR 0 3
39719: NOT
39720: IFFALSE 39724
// exit ;
39722: GO 39894
// btype := GetBType ( building ) ;
39724: LD_ADDR_VAR 0 5
39728: PUSH
39729: LD_VAR 0 1
39733: PPUSH
39734: CALL_OW 266
39738: ST_TO_ADDR
// if btype = b_armoury then
39739: LD_VAR 0 5
39743: PUSH
39744: LD_INT 4
39746: EQUAL
39747: IFFALSE 39757
// btype := b_barracks ;
39749: LD_ADDR_VAR 0 5
39753: PUSH
39754: LD_INT 5
39756: ST_TO_ADDR
// if btype = b_depot then
39757: LD_VAR 0 5
39761: PUSH
39762: LD_INT 0
39764: EQUAL
39765: IFFALSE 39775
// btype := b_warehouse ;
39767: LD_ADDR_VAR 0 5
39771: PUSH
39772: LD_INT 1
39774: ST_TO_ADDR
// if btype = b_workshop then
39775: LD_VAR 0 5
39779: PUSH
39780: LD_INT 2
39782: EQUAL
39783: IFFALSE 39793
// btype := b_factory ;
39785: LD_ADDR_VAR 0 5
39789: PUSH
39790: LD_INT 3
39792: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39793: LD_ADDR_VAR 0 4
39797: PUSH
39798: LD_VAR 0 5
39802: PPUSH
39803: LD_VAR 0 1
39807: PPUSH
39808: CALL_OW 248
39812: PPUSH
39813: CALL_OW 450
39817: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39818: LD_ADDR_VAR 0 2
39822: PUSH
39823: LD_VAR 0 3
39827: PPUSH
39828: LD_INT 1
39830: PPUSH
39831: CALL_OW 275
39835: PUSH
39836: LD_VAR 0 4
39840: PUSH
39841: LD_INT 1
39843: ARRAY
39844: GREATEREQUAL
39845: PUSH
39846: LD_VAR 0 3
39850: PPUSH
39851: LD_INT 2
39853: PPUSH
39854: CALL_OW 275
39858: PUSH
39859: LD_VAR 0 4
39863: PUSH
39864: LD_INT 2
39866: ARRAY
39867: GREATEREQUAL
39868: AND
39869: PUSH
39870: LD_VAR 0 3
39874: PPUSH
39875: LD_INT 3
39877: PPUSH
39878: CALL_OW 275
39882: PUSH
39883: LD_VAR 0 4
39887: PUSH
39888: LD_INT 3
39890: ARRAY
39891: GREATEREQUAL
39892: AND
39893: ST_TO_ADDR
// end ;
39894: LD_VAR 0 2
39898: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39899: LD_INT 0
39901: PPUSH
39902: PPUSH
39903: PPUSH
// pom := GetBase ( building ) ;
39904: LD_ADDR_VAR 0 4
39908: PUSH
39909: LD_VAR 0 1
39913: PPUSH
39914: CALL_OW 274
39918: ST_TO_ADDR
// if not pom then
39919: LD_VAR 0 4
39923: NOT
39924: IFFALSE 39928
// exit ;
39926: GO 40029
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39928: LD_ADDR_VAR 0 5
39932: PUSH
39933: LD_VAR 0 2
39937: PPUSH
39938: LD_VAR 0 1
39942: PPUSH
39943: CALL_OW 248
39947: PPUSH
39948: CALL_OW 450
39952: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39953: LD_ADDR_VAR 0 3
39957: PUSH
39958: LD_VAR 0 4
39962: PPUSH
39963: LD_INT 1
39965: PPUSH
39966: CALL_OW 275
39970: PUSH
39971: LD_VAR 0 5
39975: PUSH
39976: LD_INT 1
39978: ARRAY
39979: GREATEREQUAL
39980: PUSH
39981: LD_VAR 0 4
39985: PPUSH
39986: LD_INT 2
39988: PPUSH
39989: CALL_OW 275
39993: PUSH
39994: LD_VAR 0 5
39998: PUSH
39999: LD_INT 2
40001: ARRAY
40002: GREATEREQUAL
40003: AND
40004: PUSH
40005: LD_VAR 0 4
40009: PPUSH
40010: LD_INT 3
40012: PPUSH
40013: CALL_OW 275
40017: PUSH
40018: LD_VAR 0 5
40022: PUSH
40023: LD_INT 3
40025: ARRAY
40026: GREATEREQUAL
40027: AND
40028: ST_TO_ADDR
// end ;
40029: LD_VAR 0 3
40033: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40034: LD_INT 0
40036: PPUSH
40037: PPUSH
40038: PPUSH
40039: PPUSH
40040: PPUSH
40041: PPUSH
40042: PPUSH
40043: PPUSH
40044: PPUSH
40045: PPUSH
40046: PPUSH
// result := false ;
40047: LD_ADDR_VAR 0 8
40051: PUSH
40052: LD_INT 0
40054: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40055: LD_VAR 0 5
40059: NOT
40060: PUSH
40061: LD_VAR 0 1
40065: NOT
40066: OR
40067: PUSH
40068: LD_VAR 0 2
40072: NOT
40073: OR
40074: PUSH
40075: LD_VAR 0 3
40079: NOT
40080: OR
40081: IFFALSE 40085
// exit ;
40083: GO 40899
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40085: LD_ADDR_VAR 0 14
40089: PUSH
40090: LD_VAR 0 1
40094: PPUSH
40095: LD_VAR 0 2
40099: PPUSH
40100: LD_VAR 0 3
40104: PPUSH
40105: LD_VAR 0 4
40109: PPUSH
40110: LD_VAR 0 5
40114: PUSH
40115: LD_INT 1
40117: ARRAY
40118: PPUSH
40119: CALL_OW 248
40123: PPUSH
40124: LD_INT 0
40126: PPUSH
40127: CALL 42152 0 6
40131: ST_TO_ADDR
// if not hexes then
40132: LD_VAR 0 14
40136: NOT
40137: IFFALSE 40141
// exit ;
40139: GO 40899
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40141: LD_ADDR_VAR 0 17
40145: PUSH
40146: LD_VAR 0 5
40150: PPUSH
40151: LD_INT 22
40153: PUSH
40154: LD_VAR 0 13
40158: PPUSH
40159: CALL_OW 255
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 2
40170: PUSH
40171: LD_INT 30
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 30
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: LIST
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PPUSH
40200: CALL_OW 72
40204: ST_TO_ADDR
// for i = 1 to hexes do
40205: LD_ADDR_VAR 0 9
40209: PUSH
40210: DOUBLE
40211: LD_INT 1
40213: DEC
40214: ST_TO_ADDR
40215: LD_VAR 0 14
40219: PUSH
40220: FOR_TO
40221: IFFALSE 40897
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40223: LD_ADDR_VAR 0 13
40227: PUSH
40228: LD_VAR 0 14
40232: PUSH
40233: LD_VAR 0 9
40237: ARRAY
40238: PUSH
40239: LD_INT 1
40241: ARRAY
40242: PPUSH
40243: LD_VAR 0 14
40247: PUSH
40248: LD_VAR 0 9
40252: ARRAY
40253: PUSH
40254: LD_INT 2
40256: ARRAY
40257: PPUSH
40258: CALL_OW 428
40262: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40263: LD_VAR 0 14
40267: PUSH
40268: LD_VAR 0 9
40272: ARRAY
40273: PUSH
40274: LD_INT 1
40276: ARRAY
40277: PPUSH
40278: LD_VAR 0 14
40282: PUSH
40283: LD_VAR 0 9
40287: ARRAY
40288: PUSH
40289: LD_INT 2
40291: ARRAY
40292: PPUSH
40293: CALL_OW 351
40297: PUSH
40298: LD_VAR 0 14
40302: PUSH
40303: LD_VAR 0 9
40307: ARRAY
40308: PUSH
40309: LD_INT 1
40311: ARRAY
40312: PPUSH
40313: LD_VAR 0 14
40317: PUSH
40318: LD_VAR 0 9
40322: ARRAY
40323: PUSH
40324: LD_INT 2
40326: ARRAY
40327: PPUSH
40328: CALL_OW 488
40332: NOT
40333: OR
40334: PUSH
40335: LD_VAR 0 13
40339: PPUSH
40340: CALL_OW 247
40344: PUSH
40345: LD_INT 3
40347: EQUAL
40348: OR
40349: IFFALSE 40355
// exit ;
40351: POP
40352: POP
40353: GO 40899
// if not tmp then
40355: LD_VAR 0 13
40359: NOT
40360: IFFALSE 40364
// continue ;
40362: GO 40220
// result := true ;
40364: LD_ADDR_VAR 0 8
40368: PUSH
40369: LD_INT 1
40371: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40372: LD_VAR 0 6
40376: PUSH
40377: LD_VAR 0 13
40381: PPUSH
40382: CALL_OW 247
40386: PUSH
40387: LD_INT 2
40389: EQUAL
40390: AND
40391: PUSH
40392: LD_VAR 0 13
40396: PPUSH
40397: CALL_OW 263
40401: PUSH
40402: LD_INT 1
40404: EQUAL
40405: AND
40406: IFFALSE 40570
// begin if IsDrivenBy ( tmp ) then
40408: LD_VAR 0 13
40412: PPUSH
40413: CALL_OW 311
40417: IFFALSE 40421
// continue ;
40419: GO 40220
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40421: LD_VAR 0 6
40425: PPUSH
40426: LD_INT 3
40428: PUSH
40429: LD_INT 60
40431: PUSH
40432: EMPTY
40433: LIST
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 3
40441: PUSH
40442: LD_INT 55
40444: PUSH
40445: EMPTY
40446: LIST
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PPUSH
40456: CALL_OW 72
40460: IFFALSE 40568
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40462: LD_ADDR_VAR 0 18
40466: PUSH
40467: LD_VAR 0 6
40471: PPUSH
40472: LD_INT 3
40474: PUSH
40475: LD_INT 60
40477: PUSH
40478: EMPTY
40479: LIST
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 3
40487: PUSH
40488: LD_INT 55
40490: PUSH
40491: EMPTY
40492: LIST
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PPUSH
40502: CALL_OW 72
40506: PUSH
40507: LD_INT 1
40509: ARRAY
40510: ST_TO_ADDR
// if IsInUnit ( driver ) then
40511: LD_VAR 0 18
40515: PPUSH
40516: CALL_OW 310
40520: IFFALSE 40531
// ComExit ( driver ) ;
40522: LD_VAR 0 18
40526: PPUSH
40527: CALL 65944 0 1
// AddComEnterUnit ( driver , tmp ) ;
40531: LD_VAR 0 18
40535: PPUSH
40536: LD_VAR 0 13
40540: PPUSH
40541: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40545: LD_VAR 0 18
40549: PPUSH
40550: LD_VAR 0 7
40554: PPUSH
40555: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40559: LD_VAR 0 18
40563: PPUSH
40564: CALL_OW 181
// end ; continue ;
40568: GO 40220
// end ; if not cleaners or not tmp in cleaners then
40570: LD_VAR 0 6
40574: NOT
40575: PUSH
40576: LD_VAR 0 13
40580: PUSH
40581: LD_VAR 0 6
40585: IN
40586: NOT
40587: OR
40588: IFFALSE 40895
// begin if dep then
40590: LD_VAR 0 17
40594: IFFALSE 40730
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40596: LD_ADDR_VAR 0 16
40600: PUSH
40601: LD_VAR 0 17
40605: PUSH
40606: LD_INT 1
40608: ARRAY
40609: PPUSH
40610: CALL_OW 250
40614: PPUSH
40615: LD_VAR 0 17
40619: PUSH
40620: LD_INT 1
40622: ARRAY
40623: PPUSH
40624: CALL_OW 254
40628: PPUSH
40629: LD_INT 5
40631: PPUSH
40632: CALL_OW 272
40636: PUSH
40637: LD_VAR 0 17
40641: PUSH
40642: LD_INT 1
40644: ARRAY
40645: PPUSH
40646: CALL_OW 251
40650: PPUSH
40651: LD_VAR 0 17
40655: PUSH
40656: LD_INT 1
40658: ARRAY
40659: PPUSH
40660: CALL_OW 254
40664: PPUSH
40665: LD_INT 5
40667: PPUSH
40668: CALL_OW 273
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40677: LD_VAR 0 16
40681: PUSH
40682: LD_INT 1
40684: ARRAY
40685: PPUSH
40686: LD_VAR 0 16
40690: PUSH
40691: LD_INT 2
40693: ARRAY
40694: PPUSH
40695: CALL_OW 488
40699: IFFALSE 40730
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40701: LD_VAR 0 13
40705: PPUSH
40706: LD_VAR 0 16
40710: PUSH
40711: LD_INT 1
40713: ARRAY
40714: PPUSH
40715: LD_VAR 0 16
40719: PUSH
40720: LD_INT 2
40722: ARRAY
40723: PPUSH
40724: CALL_OW 111
// continue ;
40728: GO 40220
// end ; end ; r := GetDir ( tmp ) ;
40730: LD_ADDR_VAR 0 15
40734: PUSH
40735: LD_VAR 0 13
40739: PPUSH
40740: CALL_OW 254
40744: ST_TO_ADDR
// if r = 5 then
40745: LD_VAR 0 15
40749: PUSH
40750: LD_INT 5
40752: EQUAL
40753: IFFALSE 40763
// r := 0 ;
40755: LD_ADDR_VAR 0 15
40759: PUSH
40760: LD_INT 0
40762: ST_TO_ADDR
// for j = r to 5 do
40763: LD_ADDR_VAR 0 10
40767: PUSH
40768: DOUBLE
40769: LD_VAR 0 15
40773: DEC
40774: ST_TO_ADDR
40775: LD_INT 5
40777: PUSH
40778: FOR_TO
40779: IFFALSE 40893
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40781: LD_ADDR_VAR 0 11
40785: PUSH
40786: LD_VAR 0 13
40790: PPUSH
40791: CALL_OW 250
40795: PPUSH
40796: LD_VAR 0 10
40800: PPUSH
40801: LD_INT 2
40803: PPUSH
40804: CALL_OW 272
40808: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40809: LD_ADDR_VAR 0 12
40813: PUSH
40814: LD_VAR 0 13
40818: PPUSH
40819: CALL_OW 251
40823: PPUSH
40824: LD_VAR 0 10
40828: PPUSH
40829: LD_INT 2
40831: PPUSH
40832: CALL_OW 273
40836: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40837: LD_VAR 0 11
40841: PPUSH
40842: LD_VAR 0 12
40846: PPUSH
40847: CALL_OW 488
40851: PUSH
40852: LD_VAR 0 11
40856: PPUSH
40857: LD_VAR 0 12
40861: PPUSH
40862: CALL_OW 428
40866: NOT
40867: AND
40868: IFFALSE 40891
// begin ComMoveXY ( tmp , _x , _y ) ;
40870: LD_VAR 0 13
40874: PPUSH
40875: LD_VAR 0 11
40879: PPUSH
40880: LD_VAR 0 12
40884: PPUSH
40885: CALL_OW 111
// break ;
40889: GO 40893
// end ; end ;
40891: GO 40778
40893: POP
40894: POP
// end ; end ;
40895: GO 40220
40897: POP
40898: POP
// end ;
40899: LD_VAR 0 8
40903: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40904: LD_INT 0
40906: PPUSH
// result := true ;
40907: LD_ADDR_VAR 0 3
40911: PUSH
40912: LD_INT 1
40914: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40915: LD_VAR 0 2
40919: PUSH
40920: LD_INT 24
40922: DOUBLE
40923: EQUAL
40924: IFTRUE 40934
40926: LD_INT 33
40928: DOUBLE
40929: EQUAL
40930: IFTRUE 40934
40932: GO 40959
40934: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40935: LD_ADDR_VAR 0 3
40939: PUSH
40940: LD_INT 32
40942: PPUSH
40943: LD_VAR 0 1
40947: PPUSH
40948: CALL_OW 321
40952: PUSH
40953: LD_INT 2
40955: EQUAL
40956: ST_TO_ADDR
40957: GO 41275
40959: LD_INT 20
40961: DOUBLE
40962: EQUAL
40963: IFTRUE 40967
40965: GO 40992
40967: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40968: LD_ADDR_VAR 0 3
40972: PUSH
40973: LD_INT 6
40975: PPUSH
40976: LD_VAR 0 1
40980: PPUSH
40981: CALL_OW 321
40985: PUSH
40986: LD_INT 2
40988: EQUAL
40989: ST_TO_ADDR
40990: GO 41275
40992: LD_INT 22
40994: DOUBLE
40995: EQUAL
40996: IFTRUE 41006
40998: LD_INT 36
41000: DOUBLE
41001: EQUAL
41002: IFTRUE 41006
41004: GO 41031
41006: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41007: LD_ADDR_VAR 0 3
41011: PUSH
41012: LD_INT 15
41014: PPUSH
41015: LD_VAR 0 1
41019: PPUSH
41020: CALL_OW 321
41024: PUSH
41025: LD_INT 2
41027: EQUAL
41028: ST_TO_ADDR
41029: GO 41275
41031: LD_INT 30
41033: DOUBLE
41034: EQUAL
41035: IFTRUE 41039
41037: GO 41064
41039: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41040: LD_ADDR_VAR 0 3
41044: PUSH
41045: LD_INT 20
41047: PPUSH
41048: LD_VAR 0 1
41052: PPUSH
41053: CALL_OW 321
41057: PUSH
41058: LD_INT 2
41060: EQUAL
41061: ST_TO_ADDR
41062: GO 41275
41064: LD_INT 28
41066: DOUBLE
41067: EQUAL
41068: IFTRUE 41078
41070: LD_INT 21
41072: DOUBLE
41073: EQUAL
41074: IFTRUE 41078
41076: GO 41103
41078: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41079: LD_ADDR_VAR 0 3
41083: PUSH
41084: LD_INT 21
41086: PPUSH
41087: LD_VAR 0 1
41091: PPUSH
41092: CALL_OW 321
41096: PUSH
41097: LD_INT 2
41099: EQUAL
41100: ST_TO_ADDR
41101: GO 41275
41103: LD_INT 16
41105: DOUBLE
41106: EQUAL
41107: IFTRUE 41111
41109: GO 41136
41111: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41112: LD_ADDR_VAR 0 3
41116: PUSH
41117: LD_INT 84
41119: PPUSH
41120: LD_VAR 0 1
41124: PPUSH
41125: CALL_OW 321
41129: PUSH
41130: LD_INT 2
41132: EQUAL
41133: ST_TO_ADDR
41134: GO 41275
41136: LD_INT 19
41138: DOUBLE
41139: EQUAL
41140: IFTRUE 41150
41142: LD_INT 23
41144: DOUBLE
41145: EQUAL
41146: IFTRUE 41150
41148: GO 41175
41150: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41151: LD_ADDR_VAR 0 3
41155: PUSH
41156: LD_INT 83
41158: PPUSH
41159: LD_VAR 0 1
41163: PPUSH
41164: CALL_OW 321
41168: PUSH
41169: LD_INT 2
41171: EQUAL
41172: ST_TO_ADDR
41173: GO 41275
41175: LD_INT 17
41177: DOUBLE
41178: EQUAL
41179: IFTRUE 41183
41181: GO 41208
41183: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41184: LD_ADDR_VAR 0 3
41188: PUSH
41189: LD_INT 39
41191: PPUSH
41192: LD_VAR 0 1
41196: PPUSH
41197: CALL_OW 321
41201: PUSH
41202: LD_INT 2
41204: EQUAL
41205: ST_TO_ADDR
41206: GO 41275
41208: LD_INT 18
41210: DOUBLE
41211: EQUAL
41212: IFTRUE 41216
41214: GO 41241
41216: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41217: LD_ADDR_VAR 0 3
41221: PUSH
41222: LD_INT 40
41224: PPUSH
41225: LD_VAR 0 1
41229: PPUSH
41230: CALL_OW 321
41234: PUSH
41235: LD_INT 2
41237: EQUAL
41238: ST_TO_ADDR
41239: GO 41275
41241: LD_INT 27
41243: DOUBLE
41244: EQUAL
41245: IFTRUE 41249
41247: GO 41274
41249: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41250: LD_ADDR_VAR 0 3
41254: PUSH
41255: LD_INT 35
41257: PPUSH
41258: LD_VAR 0 1
41262: PPUSH
41263: CALL_OW 321
41267: PUSH
41268: LD_INT 2
41270: EQUAL
41271: ST_TO_ADDR
41272: GO 41275
41274: POP
// end ;
41275: LD_VAR 0 3
41279: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41280: LD_INT 0
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
// result := false ;
41293: LD_ADDR_VAR 0 6
41297: PUSH
41298: LD_INT 0
41300: ST_TO_ADDR
// if btype = b_depot then
41301: LD_VAR 0 2
41305: PUSH
41306: LD_INT 0
41308: EQUAL
41309: IFFALSE 41321
// begin result := true ;
41311: LD_ADDR_VAR 0 6
41315: PUSH
41316: LD_INT 1
41318: ST_TO_ADDR
// exit ;
41319: GO 42147
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41321: LD_VAR 0 1
41325: NOT
41326: PUSH
41327: LD_VAR 0 1
41331: PPUSH
41332: CALL_OW 266
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: IN
41347: NOT
41348: OR
41349: PUSH
41350: LD_VAR 0 2
41354: NOT
41355: OR
41356: PUSH
41357: LD_VAR 0 5
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: LD_INT 1
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: LD_INT 3
41373: PUSH
41374: LD_INT 4
41376: PUSH
41377: LD_INT 5
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: IN
41388: NOT
41389: OR
41390: PUSH
41391: LD_VAR 0 3
41395: PPUSH
41396: LD_VAR 0 4
41400: PPUSH
41401: CALL_OW 488
41405: NOT
41406: OR
41407: IFFALSE 41411
// exit ;
41409: GO 42147
// side := GetSide ( depot ) ;
41411: LD_ADDR_VAR 0 9
41415: PUSH
41416: LD_VAR 0 1
41420: PPUSH
41421: CALL_OW 255
41425: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41426: LD_VAR 0 9
41430: PPUSH
41431: LD_VAR 0 2
41435: PPUSH
41436: CALL 40904 0 2
41440: NOT
41441: IFFALSE 41445
// exit ;
41443: GO 42147
// pom := GetBase ( depot ) ;
41445: LD_ADDR_VAR 0 10
41449: PUSH
41450: LD_VAR 0 1
41454: PPUSH
41455: CALL_OW 274
41459: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41460: LD_ADDR_VAR 0 11
41464: PUSH
41465: LD_VAR 0 2
41469: PPUSH
41470: LD_VAR 0 1
41474: PPUSH
41475: CALL_OW 248
41479: PPUSH
41480: CALL_OW 450
41484: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41485: LD_VAR 0 10
41489: PPUSH
41490: LD_INT 1
41492: PPUSH
41493: CALL_OW 275
41497: PUSH
41498: LD_VAR 0 11
41502: PUSH
41503: LD_INT 1
41505: ARRAY
41506: GREATEREQUAL
41507: PUSH
41508: LD_VAR 0 10
41512: PPUSH
41513: LD_INT 2
41515: PPUSH
41516: CALL_OW 275
41520: PUSH
41521: LD_VAR 0 11
41525: PUSH
41526: LD_INT 2
41528: ARRAY
41529: GREATEREQUAL
41530: AND
41531: PUSH
41532: LD_VAR 0 10
41536: PPUSH
41537: LD_INT 3
41539: PPUSH
41540: CALL_OW 275
41544: PUSH
41545: LD_VAR 0 11
41549: PUSH
41550: LD_INT 3
41552: ARRAY
41553: GREATEREQUAL
41554: AND
41555: NOT
41556: IFFALSE 41560
// exit ;
41558: GO 42147
// if GetBType ( depot ) = b_depot then
41560: LD_VAR 0 1
41564: PPUSH
41565: CALL_OW 266
41569: PUSH
41570: LD_INT 0
41572: EQUAL
41573: IFFALSE 41585
// dist := 28 else
41575: LD_ADDR_VAR 0 14
41579: PUSH
41580: LD_INT 28
41582: ST_TO_ADDR
41583: GO 41593
// dist := 36 ;
41585: LD_ADDR_VAR 0 14
41589: PUSH
41590: LD_INT 36
41592: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41593: LD_VAR 0 1
41597: PPUSH
41598: LD_VAR 0 3
41602: PPUSH
41603: LD_VAR 0 4
41607: PPUSH
41608: CALL_OW 297
41612: PUSH
41613: LD_VAR 0 14
41617: GREATER
41618: IFFALSE 41622
// exit ;
41620: GO 42147
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41622: LD_ADDR_VAR 0 12
41626: PUSH
41627: LD_VAR 0 2
41631: PPUSH
41632: LD_VAR 0 3
41636: PPUSH
41637: LD_VAR 0 4
41641: PPUSH
41642: LD_VAR 0 5
41646: PPUSH
41647: LD_VAR 0 1
41651: PPUSH
41652: CALL_OW 248
41656: PPUSH
41657: LD_INT 0
41659: PPUSH
41660: CALL 42152 0 6
41664: ST_TO_ADDR
// if not hexes then
41665: LD_VAR 0 12
41669: NOT
41670: IFFALSE 41674
// exit ;
41672: GO 42147
// hex := GetHexInfo ( x , y ) ;
41674: LD_ADDR_VAR 0 15
41678: PUSH
41679: LD_VAR 0 3
41683: PPUSH
41684: LD_VAR 0 4
41688: PPUSH
41689: CALL_OW 546
41693: ST_TO_ADDR
// if hex [ 1 ] then
41694: LD_VAR 0 15
41698: PUSH
41699: LD_INT 1
41701: ARRAY
41702: IFFALSE 41706
// exit ;
41704: GO 42147
// height := hex [ 2 ] ;
41706: LD_ADDR_VAR 0 13
41710: PUSH
41711: LD_VAR 0 15
41715: PUSH
41716: LD_INT 2
41718: ARRAY
41719: ST_TO_ADDR
// for i = 1 to hexes do
41720: LD_ADDR_VAR 0 7
41724: PUSH
41725: DOUBLE
41726: LD_INT 1
41728: DEC
41729: ST_TO_ADDR
41730: LD_VAR 0 12
41734: PUSH
41735: FOR_TO
41736: IFFALSE 42066
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41738: LD_VAR 0 12
41742: PUSH
41743: LD_VAR 0 7
41747: ARRAY
41748: PUSH
41749: LD_INT 1
41751: ARRAY
41752: PPUSH
41753: LD_VAR 0 12
41757: PUSH
41758: LD_VAR 0 7
41762: ARRAY
41763: PUSH
41764: LD_INT 2
41766: ARRAY
41767: PPUSH
41768: CALL_OW 488
41772: NOT
41773: PUSH
41774: LD_VAR 0 12
41778: PUSH
41779: LD_VAR 0 7
41783: ARRAY
41784: PUSH
41785: LD_INT 1
41787: ARRAY
41788: PPUSH
41789: LD_VAR 0 12
41793: PUSH
41794: LD_VAR 0 7
41798: ARRAY
41799: PUSH
41800: LD_INT 2
41802: ARRAY
41803: PPUSH
41804: CALL_OW 428
41808: PUSH
41809: LD_INT 0
41811: GREATER
41812: OR
41813: PUSH
41814: LD_VAR 0 12
41818: PUSH
41819: LD_VAR 0 7
41823: ARRAY
41824: PUSH
41825: LD_INT 1
41827: ARRAY
41828: PPUSH
41829: LD_VAR 0 12
41833: PUSH
41834: LD_VAR 0 7
41838: ARRAY
41839: PUSH
41840: LD_INT 2
41842: ARRAY
41843: PPUSH
41844: CALL_OW 351
41848: OR
41849: IFFALSE 41855
// exit ;
41851: POP
41852: POP
41853: GO 42147
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41855: LD_ADDR_VAR 0 8
41859: PUSH
41860: LD_VAR 0 12
41864: PUSH
41865: LD_VAR 0 7
41869: ARRAY
41870: PUSH
41871: LD_INT 1
41873: ARRAY
41874: PPUSH
41875: LD_VAR 0 12
41879: PUSH
41880: LD_VAR 0 7
41884: ARRAY
41885: PUSH
41886: LD_INT 2
41888: ARRAY
41889: PPUSH
41890: CALL_OW 546
41894: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41895: LD_VAR 0 8
41899: PUSH
41900: LD_INT 1
41902: ARRAY
41903: PUSH
41904: LD_VAR 0 8
41908: PUSH
41909: LD_INT 2
41911: ARRAY
41912: PUSH
41913: LD_VAR 0 13
41917: PUSH
41918: LD_INT 2
41920: PLUS
41921: GREATER
41922: OR
41923: PUSH
41924: LD_VAR 0 8
41928: PUSH
41929: LD_INT 2
41931: ARRAY
41932: PUSH
41933: LD_VAR 0 13
41937: PUSH
41938: LD_INT 2
41940: MINUS
41941: LESS
41942: OR
41943: PUSH
41944: LD_VAR 0 8
41948: PUSH
41949: LD_INT 3
41951: ARRAY
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 8
41958: PUSH
41959: LD_INT 9
41961: PUSH
41962: LD_INT 10
41964: PUSH
41965: LD_INT 11
41967: PUSH
41968: LD_INT 12
41970: PUSH
41971: LD_INT 13
41973: PUSH
41974: LD_INT 16
41976: PUSH
41977: LD_INT 17
41979: PUSH
41980: LD_INT 18
41982: PUSH
41983: LD_INT 19
41985: PUSH
41986: LD_INT 20
41988: PUSH
41989: LD_INT 21
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: IN
42007: NOT
42008: OR
42009: PUSH
42010: LD_VAR 0 8
42014: PUSH
42015: LD_INT 5
42017: ARRAY
42018: NOT
42019: OR
42020: PUSH
42021: LD_VAR 0 8
42025: PUSH
42026: LD_INT 6
42028: ARRAY
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: LD_INT 7
42038: PUSH
42039: LD_INT 9
42041: PUSH
42042: LD_INT 10
42044: PUSH
42045: LD_INT 11
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: IN
42056: NOT
42057: OR
42058: IFFALSE 42064
// exit ;
42060: POP
42061: POP
42062: GO 42147
// end ;
42064: GO 41735
42066: POP
42067: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42068: LD_VAR 0 9
42072: PPUSH
42073: LD_VAR 0 3
42077: PPUSH
42078: LD_VAR 0 4
42082: PPUSH
42083: LD_INT 20
42085: PPUSH
42086: CALL 34070 0 4
42090: PUSH
42091: LD_INT 4
42093: ARRAY
42094: IFFALSE 42098
// exit ;
42096: GO 42147
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42098: LD_VAR 0 2
42102: PUSH
42103: LD_INT 29
42105: PUSH
42106: LD_INT 30
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: IN
42113: PUSH
42114: LD_VAR 0 3
42118: PPUSH
42119: LD_VAR 0 4
42123: PPUSH
42124: LD_VAR 0 9
42128: PPUSH
42129: CALL_OW 440
42133: NOT
42134: AND
42135: IFFALSE 42139
// exit ;
42137: GO 42147
// result := true ;
42139: LD_ADDR_VAR 0 6
42143: PUSH
42144: LD_INT 1
42146: ST_TO_ADDR
// end ;
42147: LD_VAR 0 6
42151: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42152: LD_INT 0
42154: PPUSH
42155: PPUSH
42156: PPUSH
42157: PPUSH
42158: PPUSH
42159: PPUSH
42160: PPUSH
42161: PPUSH
42162: PPUSH
42163: PPUSH
42164: PPUSH
42165: PPUSH
42166: PPUSH
42167: PPUSH
42168: PPUSH
42169: PPUSH
42170: PPUSH
42171: PPUSH
42172: PPUSH
42173: PPUSH
42174: PPUSH
42175: PPUSH
42176: PPUSH
42177: PPUSH
42178: PPUSH
42179: PPUSH
42180: PPUSH
42181: PPUSH
42182: PPUSH
42183: PPUSH
42184: PPUSH
42185: PPUSH
42186: PPUSH
42187: PPUSH
42188: PPUSH
42189: PPUSH
42190: PPUSH
42191: PPUSH
42192: PPUSH
42193: PPUSH
42194: PPUSH
42195: PPUSH
42196: PPUSH
42197: PPUSH
42198: PPUSH
42199: PPUSH
42200: PPUSH
42201: PPUSH
42202: PPUSH
42203: PPUSH
42204: PPUSH
42205: PPUSH
42206: PPUSH
42207: PPUSH
42208: PPUSH
42209: PPUSH
42210: PPUSH
42211: PPUSH
// result = [ ] ;
42212: LD_ADDR_VAR 0 7
42216: PUSH
42217: EMPTY
42218: ST_TO_ADDR
// temp_list = [ ] ;
42219: LD_ADDR_VAR 0 9
42223: PUSH
42224: EMPTY
42225: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42226: LD_VAR 0 4
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: LD_INT 1
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: LD_INT 3
42242: PUSH
42243: LD_INT 4
42245: PUSH
42246: LD_INT 5
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: IN
42257: NOT
42258: PUSH
42259: LD_VAR 0 1
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: IN
42274: PUSH
42275: LD_VAR 0 5
42279: PUSH
42280: LD_INT 1
42282: PUSH
42283: LD_INT 2
42285: PUSH
42286: LD_INT 3
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: LIST
42293: IN
42294: NOT
42295: AND
42296: OR
42297: IFFALSE 42301
// exit ;
42299: GO 60692
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42301: LD_VAR 0 1
42305: PUSH
42306: LD_INT 6
42308: PUSH
42309: LD_INT 7
42311: PUSH
42312: LD_INT 8
42314: PUSH
42315: LD_INT 13
42317: PUSH
42318: LD_INT 12
42320: PUSH
42321: LD_INT 15
42323: PUSH
42324: LD_INT 11
42326: PUSH
42327: LD_INT 14
42329: PUSH
42330: LD_INT 10
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: IN
42344: IFFALSE 42354
// btype = b_lab ;
42346: LD_ADDR_VAR 0 1
42350: PUSH
42351: LD_INT 6
42353: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42354: LD_VAR 0 6
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: LIST
42372: IN
42373: NOT
42374: PUSH
42375: LD_VAR 0 1
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: LD_INT 2
42388: PUSH
42389: LD_INT 3
42391: PUSH
42392: LD_INT 6
42394: PUSH
42395: LD_INT 36
42397: PUSH
42398: LD_INT 4
42400: PUSH
42401: LD_INT 5
42403: PUSH
42404: LD_INT 31
42406: PUSH
42407: LD_INT 32
42409: PUSH
42410: LD_INT 33
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: IN
42426: NOT
42427: PUSH
42428: LD_VAR 0 6
42432: PUSH
42433: LD_INT 1
42435: EQUAL
42436: AND
42437: OR
42438: PUSH
42439: LD_VAR 0 1
42443: PUSH
42444: LD_INT 2
42446: PUSH
42447: LD_INT 3
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: IN
42454: NOT
42455: PUSH
42456: LD_VAR 0 6
42460: PUSH
42461: LD_INT 2
42463: EQUAL
42464: AND
42465: OR
42466: IFFALSE 42476
// mode = 0 ;
42468: LD_ADDR_VAR 0 6
42472: PUSH
42473: LD_INT 0
42475: ST_TO_ADDR
// case mode of 0 :
42476: LD_VAR 0 6
42480: PUSH
42481: LD_INT 0
42483: DOUBLE
42484: EQUAL
42485: IFTRUE 42489
42487: GO 53942
42489: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42490: LD_ADDR_VAR 0 11
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: LD_INT 2
42575: NEG
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: LD_INT 2
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 3
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: LD_INT 3
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: LD_INT 2
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42683: LD_ADDR_VAR 0 12
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: LD_INT 1
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 1
42752: NEG
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: LD_INT 1
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 2
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 2
42806: NEG
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 2
42817: NEG
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 2
42829: NEG
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 3
42840: NEG
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 3
42851: NEG
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42879: LD_ADDR_VAR 0 13
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 1
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: NEG
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: LD_INT 2
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 2
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 2
42982: PUSH
42983: LD_INT 2
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 2
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 2
43002: NEG
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 2
43014: NEG
43015: PUSH
43016: LD_INT 2
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: NEG
43027: PUSH
43028: LD_INT 3
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 3
43038: NEG
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 3
43050: NEG
43051: PUSH
43052: LD_INT 3
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43078: LD_ADDR_VAR 0 14
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: LD_INT 1
43151: NEG
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: LD_INT 2
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: LD_INT 2
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: LD_INT 2
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: LD_INT 2
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: LD_INT 3
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: LD_INT 3
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: LD_INT 2
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43274: LD_ADDR_VAR 0 15
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: LD_INT 1
43358: NEG
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 2
43397: NEG
43398: PUSH
43399: LD_INT 0
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 2
43408: NEG
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 3
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 3
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43467: LD_ADDR_VAR 0 16
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: NEG
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: LD_INT 2
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 2
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: LD_INT 2
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: LD_INT 2
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 2
43590: NEG
43591: PUSH
43592: LD_INT 1
43594: NEG
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 2
43602: NEG
43603: PUSH
43604: LD_INT 2
43606: NEG
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 3
43614: PUSH
43615: LD_INT 2
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 3
43624: PUSH
43625: LD_INT 3
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: LD_INT 3
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43660: LD_ADDR_VAR 0 17
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: LD_INT 2
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: LD_INT 2
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 2
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: LD_INT 2
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 2
43836: NEG
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 2
43847: NEG
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 2
43859: NEG
43860: PUSH
43861: LD_INT 2
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43890: LD_ADDR_VAR 0 18
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: NEG
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: LD_INT 2
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: LD_INT 2
43986: NEG
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 2
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: LD_INT 2
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: NEG
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 2
44077: NEG
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: NEG
44090: PUSH
44091: LD_INT 2
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44120: LD_ADDR_VAR 0 19
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 1
44189: NEG
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: LD_INT 2
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: LD_INT 2
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 2
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 2
44296: NEG
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44350: LD_ADDR_VAR 0 20
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: LD_INT 1
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: LD_INT 2
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: LD_INT 2
44446: NEG
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: NEG
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 2
44537: NEG
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 2
44549: NEG
44550: PUSH
44551: LD_INT 2
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44580: LD_ADDR_VAR 0 21
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: LD_INT 2
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: LD_INT 2
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44810: LD_ADDR_VAR 0 22
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 2
44986: NEG
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: NEG
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: LD_INT 2
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45040: LD_ADDR_VAR 0 23
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 2
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: LD_INT 2
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: LD_INT 2
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: LD_INT 3
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: LD_INT 3
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45320: LD_ADDR_VAR 0 24
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 2
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 2
45507: NEG
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 2
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 3
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 3
45563: PUSH
45564: LD_INT 2
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45596: LD_ADDR_VAR 0 25
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: LD_INT 2
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: LD_INT 2
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 3
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 3
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: LD_INT 3
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: LD_INT 3
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45870: LD_ADDR_VAR 0 26
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: PUSH
46082: LD_INT 3
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: LD_INT 3
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: LD_INT 2
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 2
46112: NEG
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46146: LD_ADDR_VAR 0 27
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: LD_INT 2
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: LD_INT 2
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 2
46333: NEG
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: LD_INT 2
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 2
46368: NEG
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 3
46379: NEG
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 3
46391: NEG
46392: PUSH
46393: LD_INT 2
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46426: LD_ADDR_VAR 0 28
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: LD_INT 2
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 2
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: LD_INT 2
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: NEG
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: LD_INT 2
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 2
46637: NEG
46638: PUSH
46639: LD_INT 3
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: LD_INT 3
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 3
46661: NEG
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 3
46673: NEG
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46708: LD_ADDR_VAR 0 29
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 2
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 2
46886: NEG
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: LD_INT 3
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 3
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: LD_INT 3
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: LD_INT 2
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 3
46952: NEG
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46987: LD_ADDR_VAR 0 30
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: LD_INT 2
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 2
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 2
47153: NEG
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: NEG
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: LD_INT 3
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 3
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: LD_INT 3
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 3
47230: NEG
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47265: LD_ADDR_VAR 0 31
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 2
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 2
47442: NEG
47443: PUSH
47444: LD_INT 2
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: LD_INT 3
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 3
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: LD_INT 3
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: LD_INT 2
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 3
47508: NEG
47509: PUSH
47510: LD_INT 2
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47543: LD_ADDR_VAR 0 32
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: LD_INT 2
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 2
47709: NEG
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: LD_INT 3
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: LD_INT 2
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 3
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: LD_INT 3
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 2
47775: NEG
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 3
47786: NEG
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47821: LD_ADDR_VAR 0 33
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 2
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 2
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 2
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 2
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 2
47987: NEG
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: NEG
48012: PUSH
48013: LD_INT 3
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 3
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: LD_INT 3
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 3
48065: NEG
48066: PUSH
48067: LD_INT 2
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48100: LD_ADDR_VAR 0 34
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: LD_INT 2
48196: NEG
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 2
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: LD_INT 2
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: LD_INT 1
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 3
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 3
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 3
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 3
48345: NEG
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48380: LD_ADDR_VAR 0 35
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48492: LD_ADDR_VAR 0 36
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: LD_INT 2
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48604: LD_ADDR_VAR 0 37
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48716: LD_ADDR_VAR 0 38
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 2
48807: NEG
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48828: LD_ADDR_VAR 0 39
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: LD_INT 2
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48940: LD_ADDR_VAR 0 40
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49052: LD_ADDR_VAR 0 41
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 2
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: LD_INT 2
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: NEG
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 2
49218: NEG
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 2
49230: NEG
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: NEG
49243: PUSH
49244: LD_INT 3
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 3
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 3
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 3
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 3
49295: PUSH
49296: LD_INT 3
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: PUSH
49306: LD_INT 3
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 3
49326: NEG
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 3
49337: NEG
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 3
49349: NEG
49350: PUSH
49351: LD_INT 2
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 3
49361: NEG
49362: PUSH
49363: LD_INT 3
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49402: LD_ADDR_VAR 0 42
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 2
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 2
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: NEG
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: LD_INT 2
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: LD_INT 3
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: LD_INT 3
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: LD_INT 3
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 3
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 3
49648: PUSH
49649: LD_INT 3
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: LD_INT 3
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: LD_INT 3
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: LD_INT 3
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 3
49699: NEG
49700: PUSH
49701: LD_INT 2
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 3
49711: NEG
49712: PUSH
49713: LD_INT 3
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49752: LD_ADDR_VAR 0 43
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: LD_INT 2
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: LD_INT 2
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 2
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: LD_INT 2
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: LD_INT 3
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: LD_INT 3
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: LD_INT 2
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 2
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 3
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 3
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: LD_INT 3
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: LD_INT 3
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: LD_INT 2
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 3
50048: NEG
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 3
50059: NEG
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50100: LD_ADDR_VAR 0 44
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: LD_INT 2
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: LD_INT 2
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: LD_INT 3
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 3
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 3
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 3
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 3
50343: PUSH
50344: LD_INT 3
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: LD_INT 3
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 3
50374: NEG
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 3
50385: NEG
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 3
50397: NEG
50398: PUSH
50399: LD_INT 2
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 3
50409: NEG
50410: PUSH
50411: LD_INT 3
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50450: LD_ADDR_VAR 0 45
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: LD_INT 2
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 2
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 2
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: LD_INT 2
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: LD_INT 2
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 2
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: NEG
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 2
50628: NEG
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: LD_INT 3
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: LD_INT 3
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: LD_INT 3
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 3
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 3
50696: PUSH
50697: LD_INT 3
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 2
50706: PUSH
50707: LD_INT 3
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: LD_INT 3
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: LD_INT 3
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 3
50747: NEG
50748: PUSH
50749: LD_INT 2
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 3
50759: NEG
50760: PUSH
50761: LD_INT 3
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50800: LD_ADDR_VAR 0 46
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: PUSH
50936: LD_INT 2
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: LD_INT 3
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: LD_INT 3
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: LD_INT 2
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 2
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 3
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 3
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: LD_INT 3
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 3
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: LD_INT 2
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 2
51085: NEG
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 3
51096: NEG
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 3
51107: NEG
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51148: LD_ADDR_VAR 0 47
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 1
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: NEG
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: LD_INT 2
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51299: LD_ADDR_VAR 0 48
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: LD_INT 2
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: LD_INT 2
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 2
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51446: LD_ADDR_VAR 0 49
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 2
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: LD_INT 2
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: LD_INT 2
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51590: LD_ADDR_VAR 0 50
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51734: LD_ADDR_VAR 0 51
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 2
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51881: LD_ADDR_VAR 0 52
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: LD_INT 2
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 2
51996: NEG
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: NEG
52009: PUSH
52010: LD_INT 2
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52032: LD_ADDR_VAR 0 53
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: LD_INT 2
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: LD_INT 2
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 2
52208: NEG
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 2
52219: NEG
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 2
52231: NEG
52232: PUSH
52233: LD_INT 2
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52262: LD_ADDR_VAR 0 54
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: NEG
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: LD_INT 2
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: LD_INT 2
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: LD_INT 2
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: NEG
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 2
52449: NEG
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: LD_INT 2
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52492: LD_ADDR_VAR 0 55
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 2
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 2
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: LD_INT 2
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: PUSH
52638: LD_INT 2
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: LD_INT 2
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: NEG
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 2
52679: NEG
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 2
52691: NEG
52692: PUSH
52693: LD_INT 2
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52722: LD_ADDR_VAR 0 56
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: LD_INT 2
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 2
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 2
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 2
52898: NEG
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 2
52909: NEG
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 2
52921: NEG
52922: PUSH
52923: LD_INT 2
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52952: LD_ADDR_VAR 0 57
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: LD_INT 2
53048: NEG
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 2
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 2
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: LD_INT 2
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: LD_INT 2
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 2
53139: NEG
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53182: LD_ADDR_VAR 0 58
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: LD_INT 2
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 2
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 2
53317: PUSH
53318: LD_INT 2
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: LD_INT 2
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: LD_INT 2
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: NEG
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53412: LD_ADDR_VAR 0 59
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53500: LD_ADDR_VAR 0 60
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53588: LD_ADDR_VAR 0 61
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53676: LD_ADDR_VAR 0 62
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53764: LD_ADDR_VAR 0 63
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53852: LD_ADDR_VAR 0 64
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: ST_TO_ADDR
// end ; 1 :
53940: GO 59837
53942: LD_INT 1
53944: DOUBLE
53945: EQUAL
53946: IFTRUE 53950
53948: GO 56573
53950: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53951: LD_ADDR_VAR 0 11
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 3
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 3
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: LIST
53994: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53995: LD_ADDR_VAR 0 12
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 3
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 3
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: LIST
54035: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54036: LD_ADDR_VAR 0 13
54040: PUSH
54041: LD_INT 3
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 3
54053: PUSH
54054: LD_INT 3
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 2
54063: PUSH
54064: LD_INT 3
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: LIST
54075: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54076: LD_ADDR_VAR 0 14
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: LD_INT 3
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 3
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: LD_INT 2
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: LIST
54116: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54117: LD_ADDR_VAR 0 15
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 3
54135: NEG
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 3
54146: NEG
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: LIST
54160: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54161: LD_ADDR_VAR 0 16
54165: PUSH
54166: LD_INT 2
54168: NEG
54169: PUSH
54170: LD_INT 3
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 3
54180: NEG
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 3
54192: NEG
54193: PUSH
54194: LD_INT 3
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: LIST
54206: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54207: LD_ADDR_VAR 0 17
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: LD_INT 3
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: LD_INT 3
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: LD_INT 2
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: LIST
54250: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54251: LD_ADDR_VAR 0 18
54255: PUSH
54256: LD_INT 2
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 3
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 3
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: LIST
54291: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54292: LD_ADDR_VAR 0 19
54296: PUSH
54297: LD_INT 3
54299: PUSH
54300: LD_INT 2
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 3
54309: PUSH
54310: LD_INT 3
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: PUSH
54320: LD_INT 3
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: LIST
54331: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54332: LD_ADDR_VAR 0 20
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: LD_INT 3
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: LD_INT 3
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: NEG
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: LIST
54372: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54373: LD_ADDR_VAR 0 21
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: LD_INT 1
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 3
54391: NEG
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 3
54402: NEG
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: LIST
54416: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54417: LD_ADDR_VAR 0 22
54421: PUSH
54422: LD_INT 2
54424: NEG
54425: PUSH
54426: LD_INT 3
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 3
54436: NEG
54437: PUSH
54438: LD_INT 2
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 3
54448: NEG
54449: PUSH
54450: LD_INT 3
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: LIST
54462: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54463: LD_ADDR_VAR 0 23
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 3
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: LD_INT 4
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: LD_INT 3
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: LIST
54506: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54507: LD_ADDR_VAR 0 24
54511: PUSH
54512: LD_INT 3
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 3
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 4
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: LIST
54547: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54548: LD_ADDR_VAR 0 25
54552: PUSH
54553: LD_INT 3
54555: PUSH
54556: LD_INT 3
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 4
54565: PUSH
54566: LD_INT 3
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 3
54575: PUSH
54576: LD_INT 4
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: LIST
54587: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54588: LD_ADDR_VAR 0 26
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: LD_INT 3
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: LD_INT 4
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: LD_INT 3
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: LIST
54628: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54629: LD_ADDR_VAR 0 27
54633: PUSH
54634: LD_INT 3
54636: NEG
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 3
54647: NEG
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 4
54658: NEG
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: LIST
54672: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54673: LD_ADDR_VAR 0 28
54677: PUSH
54678: LD_INT 3
54680: NEG
54681: PUSH
54682: LD_INT 3
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 3
54692: NEG
54693: PUSH
54694: LD_INT 4
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 4
54704: NEG
54705: PUSH
54706: LD_INT 3
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: LIST
54718: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54719: LD_ADDR_VAR 0 29
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 3
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: LD_INT 3
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: LD_INT 4
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: LD_INT 4
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: LD_INT 3
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: NEG
54795: PUSH
54796: LD_INT 5
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: LD_INT 5
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: PUSH
54818: LD_INT 4
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: LD_INT 6
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: LD_INT 6
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: LD_INT 5
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54874: LD_ADDR_VAR 0 30
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 3
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 3
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 3
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 4
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 4
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 4
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 5
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 5
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 5
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 6
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 6
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55017: LD_ADDR_VAR 0 31
55021: PUSH
55022: LD_INT 3
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 3
55034: PUSH
55035: LD_INT 3
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: LD_INT 3
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 4
55054: PUSH
55055: LD_INT 3
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 4
55064: PUSH
55065: LD_INT 4
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 3
55074: PUSH
55075: LD_INT 4
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 5
55084: PUSH
55085: LD_INT 4
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 5
55094: PUSH
55095: LD_INT 5
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 4
55104: PUSH
55105: LD_INT 5
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 6
55114: PUSH
55115: LD_INT 5
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 6
55124: PUSH
55125: LD_INT 6
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 5
55134: PUSH
55135: LD_INT 6
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55156: LD_ADDR_VAR 0 32
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: LD_INT 3
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: LD_INT 3
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: LD_INT 4
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 4
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: LD_INT 3
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: LD_INT 5
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: LD_INT 5
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: LD_INT 4
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: LD_INT 6
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: LD_INT 6
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: LD_INT 5
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55299: LD_ADDR_VAR 0 33
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 3
55317: NEG
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 3
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 4
55351: NEG
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 4
55362: NEG
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 4
55374: NEG
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 5
55385: NEG
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 5
55396: NEG
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 5
55408: NEG
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 6
55419: NEG
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 6
55430: NEG
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55454: LD_ADDR_VAR 0 34
55458: PUSH
55459: LD_INT 2
55461: NEG
55462: PUSH
55463: LD_INT 3
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 3
55473: NEG
55474: PUSH
55475: LD_INT 2
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 3
55485: NEG
55486: PUSH
55487: LD_INT 3
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 3
55497: NEG
55498: PUSH
55499: LD_INT 4
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 4
55509: NEG
55510: PUSH
55511: LD_INT 3
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 4
55521: NEG
55522: PUSH
55523: LD_INT 4
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 4
55533: NEG
55534: PUSH
55535: LD_INT 5
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 5
55545: NEG
55546: PUSH
55547: LD_INT 4
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 5
55557: NEG
55558: PUSH
55559: LD_INT 5
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 5
55569: NEG
55570: PUSH
55571: LD_INT 6
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 6
55581: NEG
55582: PUSH
55583: LD_INT 5
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 6
55593: NEG
55594: PUSH
55595: LD_INT 6
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55617: LD_ADDR_VAR 0 41
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: LD_INT 2
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: LD_INT 3
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: LIST
55660: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55661: LD_ADDR_VAR 0 42
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 2
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 3
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: LIST
55701: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55702: LD_ADDR_VAR 0 43
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: LD_INT 2
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 3
55719: PUSH
55720: LD_INT 2
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 2
55729: PUSH
55730: LD_INT 3
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: LIST
55741: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55742: LD_ADDR_VAR 0 44
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: LD_INT 3
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: LD_INT 2
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: LIST
55782: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55783: LD_ADDR_VAR 0 45
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: NEG
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: LIST
55826: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55827: LD_ADDR_VAR 0 46
55831: PUSH
55832: LD_INT 2
55834: NEG
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: NEG
55847: PUSH
55848: LD_INT 3
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 3
55858: NEG
55859: PUSH
55860: LD_INT 2
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: LIST
55872: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55873: LD_ADDR_VAR 0 47
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: LD_INT 3
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: LD_INT 3
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55906: LD_ADDR_VAR 0 48
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55937: LD_ADDR_VAR 0 49
55941: PUSH
55942: LD_INT 3
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 3
55954: PUSH
55955: LD_INT 2
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55966: LD_ADDR_VAR 0 50
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: LD_INT 3
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: LD_INT 3
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55995: LD_ADDR_VAR 0 51
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56026: LD_ADDR_VAR 0 52
56030: PUSH
56031: LD_INT 3
56033: NEG
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 3
56045: NEG
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56059: LD_ADDR_VAR 0 53
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: LD_INT 3
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: LD_INT 3
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: LIST
56102: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56103: LD_ADDR_VAR 0 54
56107: PUSH
56108: LD_INT 2
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 3
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 3
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: LIST
56143: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56144: LD_ADDR_VAR 0 55
56148: PUSH
56149: LD_INT 3
56151: PUSH
56152: LD_INT 2
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 3
56161: PUSH
56162: LD_INT 3
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 2
56171: PUSH
56172: LD_INT 3
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: LIST
56183: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56184: LD_ADDR_VAR 0 56
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: LD_INT 3
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: LIST
56224: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56225: LD_ADDR_VAR 0 57
56229: PUSH
56230: LD_INT 2
56232: NEG
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 3
56243: NEG
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 3
56254: NEG
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: LIST
56268: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56269: LD_ADDR_VAR 0 58
56273: PUSH
56274: LD_INT 2
56276: NEG
56277: PUSH
56278: LD_INT 3
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 3
56288: NEG
56289: PUSH
56290: LD_INT 2
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 3
56300: NEG
56301: PUSH
56302: LD_INT 3
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: LIST
56314: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56315: LD_ADDR_VAR 0 59
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: LIST
56358: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56359: LD_ADDR_VAR 0 60
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: LIST
56399: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56400: LD_ADDR_VAR 0 61
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: LD_INT 2
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: LIST
56439: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56440: LD_ADDR_VAR 0 62
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: LIST
56480: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56481: LD_ADDR_VAR 0 63
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 2
56510: NEG
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: LIST
56524: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56525: LD_ADDR_VAR 0 64
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: LD_INT 2
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 2
56556: NEG
56557: PUSH
56558: LD_INT 2
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: LIST
56570: ST_TO_ADDR
// end ; 2 :
56571: GO 59837
56573: LD_INT 2
56575: DOUBLE
56576: EQUAL
56577: IFTRUE 56581
56579: GO 59836
56581: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56582: LD_ADDR_VAR 0 29
56586: PUSH
56587: LD_INT 4
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 4
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 5
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 5
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 4
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 3
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 3
56661: PUSH
56662: LD_INT 2
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 5
56672: PUSH
56673: LD_INT 2
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 3
56682: PUSH
56683: LD_INT 3
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 3
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 4
56702: PUSH
56703: LD_INT 3
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 4
56712: PUSH
56713: LD_INT 4
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 3
56722: PUSH
56723: LD_INT 4
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: PUSH
56733: LD_INT 3
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 4
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 2
56762: PUSH
56763: LD_INT 4
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: LD_INT 4
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: LD_INT 3
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: LD_INT 4
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: LD_INT 5
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: LD_INT 5
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: LD_INT 4
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: LD_INT 3
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 2
56844: PUSH
56845: LD_INT 5
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: LD_INT 3
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 3
56865: NEG
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 3
56876: NEG
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 3
56910: NEG
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 4
56921: NEG
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 4
56932: NEG
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 4
56944: NEG
56945: PUSH
56946: LD_INT 2
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 4
56967: NEG
56968: PUSH
56969: LD_INT 4
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 4
56979: NEG
56980: PUSH
56981: LD_INT 5
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 3
56991: NEG
56992: PUSH
56993: LD_INT 4
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: LD_INT 3
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 4
57015: NEG
57016: PUSH
57017: LD_INT 3
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 5
57027: NEG
57028: PUSH
57029: LD_INT 4
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 5
57039: NEG
57040: PUSH
57041: LD_INT 5
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 3
57051: NEG
57052: PUSH
57053: LD_INT 5
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 5
57063: NEG
57064: PUSH
57065: LD_INT 3
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57120: LD_ADDR_VAR 0 30
57124: PUSH
57125: LD_INT 4
57127: PUSH
57128: LD_INT 4
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 4
57137: PUSH
57138: LD_INT 3
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 5
57147: PUSH
57148: LD_INT 4
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 5
57157: PUSH
57158: LD_INT 5
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 4
57167: PUSH
57168: LD_INT 5
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 3
57177: PUSH
57178: LD_INT 4
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 3
57187: PUSH
57188: LD_INT 3
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 5
57197: PUSH
57198: LD_INT 3
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 3
57207: PUSH
57208: LD_INT 5
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: LD_INT 3
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: LD_INT 2
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: LD_INT 3
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 4
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 4
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: LD_INT 3
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 2
57289: PUSH
57290: LD_INT 4
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: LD_INT 2
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 4
57310: NEG
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 4
57321: NEG
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 3
57333: NEG
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 3
57344: NEG
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 4
57355: NEG
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 5
57366: NEG
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 5
57377: NEG
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 5
57389: NEG
57390: PUSH
57391: LD_INT 2
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 3
57401: NEG
57402: PUSH
57403: LD_INT 2
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 3
57412: NEG
57413: PUSH
57414: LD_INT 3
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 3
57424: NEG
57425: PUSH
57426: LD_INT 4
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 2
57436: NEG
57437: PUSH
57438: LD_INT 3
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 2
57448: NEG
57449: PUSH
57450: LD_INT 2
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: LD_INT 2
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 4
57472: NEG
57473: PUSH
57474: LD_INT 3
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 4
57484: NEG
57485: PUSH
57486: LD_INT 4
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: LD_INT 4
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 4
57508: NEG
57509: PUSH
57510: LD_INT 2
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: LD_INT 4
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: LD_INT 5
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: LD_INT 4
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: LD_INT 3
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 3
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: LD_INT 4
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: LD_INT 5
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 2
57599: PUSH
57600: LD_INT 3
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: LD_INT 5
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57667: LD_ADDR_VAR 0 31
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: LD_INT 4
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 3
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: LD_INT 4
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: LD_INT 5
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: LD_INT 5
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 1
57724: NEG
57725: PUSH
57726: LD_INT 4
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: LD_INT 3
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: LD_INT 5
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: NEG
57757: PUSH
57758: LD_INT 3
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 3
57767: NEG
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 3
57778: NEG
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 2
57790: NEG
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 3
57812: NEG
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 4
57823: NEG
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 4
57834: NEG
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 4
57846: NEG
57847: PUSH
57848: LD_INT 2
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: LD_INT 2
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 4
57869: NEG
57870: PUSH
57871: LD_INT 4
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 4
57881: NEG
57882: PUSH
57883: LD_INT 5
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 3
57893: NEG
57894: PUSH
57895: LD_INT 4
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 3
57905: NEG
57906: PUSH
57907: LD_INT 3
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 4
57917: NEG
57918: PUSH
57919: LD_INT 3
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 5
57929: NEG
57930: PUSH
57931: LD_INT 4
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 5
57941: NEG
57942: PUSH
57943: LD_INT 5
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 3
57953: NEG
57954: PUSH
57955: LD_INT 5
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 5
57965: NEG
57966: PUSH
57967: LD_INT 3
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: LD_INT 3
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 4
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: LD_INT 2
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: LD_INT 2
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: LD_INT 3
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: LD_INT 4
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 2
58067: NEG
58068: PUSH
58069: LD_INT 4
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 4
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 4
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 5
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 5
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 4
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 3
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 3
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 3
58151: PUSH
58152: LD_INT 2
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 5
58162: PUSH
58163: LD_INT 2
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58217: LD_ADDR_VAR 0 32
58221: PUSH
58222: LD_INT 4
58224: NEG
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 4
58235: NEG
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 3
58247: NEG
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 3
58258: NEG
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 4
58269: NEG
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 5
58280: NEG
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 5
58291: NEG
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 5
58303: NEG
58304: PUSH
58305: LD_INT 2
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 3
58315: NEG
58316: PUSH
58317: LD_INT 2
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 3
58326: NEG
58327: PUSH
58328: LD_INT 3
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 3
58338: NEG
58339: PUSH
58340: LD_INT 4
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 2
58350: NEG
58351: PUSH
58352: LD_INT 3
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 2
58362: NEG
58363: PUSH
58364: LD_INT 2
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 3
58374: NEG
58375: PUSH
58376: LD_INT 2
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 4
58386: NEG
58387: PUSH
58388: LD_INT 3
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 4
58398: NEG
58399: PUSH
58400: LD_INT 4
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: LD_INT 4
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 4
58422: NEG
58423: PUSH
58424: LD_INT 2
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: LD_INT 4
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 5
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: LD_INT 4
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: LD_INT 3
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: LD_INT 3
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: LD_INT 4
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: LD_INT 5
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 2
58513: PUSH
58514: LD_INT 3
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 2
58524: NEG
58525: PUSH
58526: LD_INT 5
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 3
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 4
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 4
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 3
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 2
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 2
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: LD_INT 2
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 4
58619: PUSH
58620: LD_INT 2
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 4
58629: PUSH
58630: LD_INT 4
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 4
58639: PUSH
58640: LD_INT 3
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 5
58649: PUSH
58650: LD_INT 4
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 5
58659: PUSH
58660: LD_INT 5
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 4
58669: PUSH
58670: LD_INT 5
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 3
58679: PUSH
58680: LD_INT 4
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 3
58689: PUSH
58690: LD_INT 3
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 5
58699: PUSH
58700: LD_INT 3
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 3
58709: PUSH
58710: LD_INT 5
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58764: LD_ADDR_VAR 0 33
58768: PUSH
58769: LD_INT 4
58771: NEG
58772: PUSH
58773: LD_INT 4
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 4
58783: NEG
58784: PUSH
58785: LD_INT 5
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 3
58795: NEG
58796: PUSH
58797: LD_INT 4
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 3
58807: NEG
58808: PUSH
58809: LD_INT 3
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 4
58819: NEG
58820: PUSH
58821: LD_INT 3
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 5
58831: NEG
58832: PUSH
58833: LD_INT 4
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 5
58843: NEG
58844: PUSH
58845: LD_INT 5
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 3
58855: NEG
58856: PUSH
58857: LD_INT 5
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 5
58867: NEG
58868: PUSH
58869: LD_INT 3
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: LD_INT 3
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: LD_INT 4
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: LD_INT 3
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: LD_INT 2
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: LD_INT 3
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: LD_INT 4
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 2
58969: NEG
58970: PUSH
58971: LD_INT 4
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 4
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 4
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 5
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 5
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 4
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 3
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 3
59042: PUSH
59043: LD_INT 1
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 3
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 5
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 3
59074: PUSH
59075: LD_INT 3
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 3
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 4
59094: PUSH
59095: LD_INT 3
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 4
59104: PUSH
59105: LD_INT 4
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 3
59114: PUSH
59115: LD_INT 4
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 2
59124: PUSH
59125: LD_INT 3
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 4
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 2
59154: PUSH
59155: LD_INT 4
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: LD_INT 4
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: LD_INT 3
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: LD_INT 4
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: LD_INT 5
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: LD_INT 5
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: LD_INT 4
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: LD_INT 3
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: LD_INT 5
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 2
59246: NEG
59247: PUSH
59248: LD_INT 3
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59302: LD_ADDR_VAR 0 34
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: LD_INT 4
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: LD_INT 5
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: LD_INT 4
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: LD_INT 3
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: LD_INT 3
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 4
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: LD_INT 5
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 2
59388: PUSH
59389: LD_INT 3
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 2
59399: NEG
59400: PUSH
59401: LD_INT 5
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 3
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 3
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 4
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 4
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 3
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 2
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 4
59494: PUSH
59495: LD_INT 2
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 4
59504: PUSH
59505: LD_INT 4
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 4
59514: PUSH
59515: LD_INT 3
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 5
59524: PUSH
59525: LD_INT 4
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 5
59534: PUSH
59535: LD_INT 5
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 4
59544: PUSH
59545: LD_INT 5
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 3
59554: PUSH
59555: LD_INT 4
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 3
59564: PUSH
59565: LD_INT 3
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 5
59574: PUSH
59575: LD_INT 3
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 3
59584: PUSH
59585: LD_INT 5
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: LD_INT 3
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: LD_INT 2
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: LD_INT 3
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: LD_INT 4
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: LD_INT 4
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 1
59644: NEG
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: LD_INT 2
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 2
59666: PUSH
59667: LD_INT 4
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: NEG
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 4
59687: NEG
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 4
59698: NEG
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 3
59710: NEG
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 3
59721: NEG
59722: PUSH
59723: LD_INT 1
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 4
59732: NEG
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 5
59743: NEG
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 5
59754: NEG
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 5
59766: NEG
59767: PUSH
59768: LD_INT 2
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 3
59778: NEG
59779: PUSH
59780: LD_INT 2
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: ST_TO_ADDR
// end ; end ;
59834: GO 59837
59836: POP
// case btype of b_depot , b_warehouse :
59837: LD_VAR 0 1
59841: PUSH
59842: LD_INT 0
59844: DOUBLE
59845: EQUAL
59846: IFTRUE 59856
59848: LD_INT 1
59850: DOUBLE
59851: EQUAL
59852: IFTRUE 59856
59854: GO 60057
59856: POP
// case nation of nation_american :
59857: LD_VAR 0 5
59861: PUSH
59862: LD_INT 1
59864: DOUBLE
59865: EQUAL
59866: IFTRUE 59870
59868: GO 59926
59870: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59871: LD_ADDR_VAR 0 9
59875: PUSH
59876: LD_VAR 0 11
59880: PUSH
59881: LD_VAR 0 12
59885: PUSH
59886: LD_VAR 0 13
59890: PUSH
59891: LD_VAR 0 14
59895: PUSH
59896: LD_VAR 0 15
59900: PUSH
59901: LD_VAR 0 16
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: PUSH
59914: LD_VAR 0 4
59918: PUSH
59919: LD_INT 1
59921: PLUS
59922: ARRAY
59923: ST_TO_ADDR
59924: GO 60055
59926: LD_INT 2
59928: DOUBLE
59929: EQUAL
59930: IFTRUE 59934
59932: GO 59990
59934: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59935: LD_ADDR_VAR 0 9
59939: PUSH
59940: LD_VAR 0 17
59944: PUSH
59945: LD_VAR 0 18
59949: PUSH
59950: LD_VAR 0 19
59954: PUSH
59955: LD_VAR 0 20
59959: PUSH
59960: LD_VAR 0 21
59964: PUSH
59965: LD_VAR 0 22
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: PUSH
59978: LD_VAR 0 4
59982: PUSH
59983: LD_INT 1
59985: PLUS
59986: ARRAY
59987: ST_TO_ADDR
59988: GO 60055
59990: LD_INT 3
59992: DOUBLE
59993: EQUAL
59994: IFTRUE 59998
59996: GO 60054
59998: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59999: LD_ADDR_VAR 0 9
60003: PUSH
60004: LD_VAR 0 23
60008: PUSH
60009: LD_VAR 0 24
60013: PUSH
60014: LD_VAR 0 25
60018: PUSH
60019: LD_VAR 0 26
60023: PUSH
60024: LD_VAR 0 27
60028: PUSH
60029: LD_VAR 0 28
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: PUSH
60042: LD_VAR 0 4
60046: PUSH
60047: LD_INT 1
60049: PLUS
60050: ARRAY
60051: ST_TO_ADDR
60052: GO 60055
60054: POP
60055: GO 60610
60057: LD_INT 2
60059: DOUBLE
60060: EQUAL
60061: IFTRUE 60071
60063: LD_INT 3
60065: DOUBLE
60066: EQUAL
60067: IFTRUE 60071
60069: GO 60127
60071: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60072: LD_ADDR_VAR 0 9
60076: PUSH
60077: LD_VAR 0 29
60081: PUSH
60082: LD_VAR 0 30
60086: PUSH
60087: LD_VAR 0 31
60091: PUSH
60092: LD_VAR 0 32
60096: PUSH
60097: LD_VAR 0 33
60101: PUSH
60102: LD_VAR 0 34
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: PUSH
60115: LD_VAR 0 4
60119: PUSH
60120: LD_INT 1
60122: PLUS
60123: ARRAY
60124: ST_TO_ADDR
60125: GO 60610
60127: LD_INT 16
60129: DOUBLE
60130: EQUAL
60131: IFTRUE 60189
60133: LD_INT 17
60135: DOUBLE
60136: EQUAL
60137: IFTRUE 60189
60139: LD_INT 18
60141: DOUBLE
60142: EQUAL
60143: IFTRUE 60189
60145: LD_INT 19
60147: DOUBLE
60148: EQUAL
60149: IFTRUE 60189
60151: LD_INT 22
60153: DOUBLE
60154: EQUAL
60155: IFTRUE 60189
60157: LD_INT 20
60159: DOUBLE
60160: EQUAL
60161: IFTRUE 60189
60163: LD_INT 21
60165: DOUBLE
60166: EQUAL
60167: IFTRUE 60189
60169: LD_INT 23
60171: DOUBLE
60172: EQUAL
60173: IFTRUE 60189
60175: LD_INT 24
60177: DOUBLE
60178: EQUAL
60179: IFTRUE 60189
60181: LD_INT 25
60183: DOUBLE
60184: EQUAL
60185: IFTRUE 60189
60187: GO 60245
60189: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60190: LD_ADDR_VAR 0 9
60194: PUSH
60195: LD_VAR 0 35
60199: PUSH
60200: LD_VAR 0 36
60204: PUSH
60205: LD_VAR 0 37
60209: PUSH
60210: LD_VAR 0 38
60214: PUSH
60215: LD_VAR 0 39
60219: PUSH
60220: LD_VAR 0 40
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: PUSH
60233: LD_VAR 0 4
60237: PUSH
60238: LD_INT 1
60240: PLUS
60241: ARRAY
60242: ST_TO_ADDR
60243: GO 60610
60245: LD_INT 6
60247: DOUBLE
60248: EQUAL
60249: IFTRUE 60301
60251: LD_INT 7
60253: DOUBLE
60254: EQUAL
60255: IFTRUE 60301
60257: LD_INT 8
60259: DOUBLE
60260: EQUAL
60261: IFTRUE 60301
60263: LD_INT 13
60265: DOUBLE
60266: EQUAL
60267: IFTRUE 60301
60269: LD_INT 12
60271: DOUBLE
60272: EQUAL
60273: IFTRUE 60301
60275: LD_INT 15
60277: DOUBLE
60278: EQUAL
60279: IFTRUE 60301
60281: LD_INT 11
60283: DOUBLE
60284: EQUAL
60285: IFTRUE 60301
60287: LD_INT 14
60289: DOUBLE
60290: EQUAL
60291: IFTRUE 60301
60293: LD_INT 10
60295: DOUBLE
60296: EQUAL
60297: IFTRUE 60301
60299: GO 60357
60301: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60302: LD_ADDR_VAR 0 9
60306: PUSH
60307: LD_VAR 0 41
60311: PUSH
60312: LD_VAR 0 42
60316: PUSH
60317: LD_VAR 0 43
60321: PUSH
60322: LD_VAR 0 44
60326: PUSH
60327: LD_VAR 0 45
60331: PUSH
60332: LD_VAR 0 46
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: PUSH
60345: LD_VAR 0 4
60349: PUSH
60350: LD_INT 1
60352: PLUS
60353: ARRAY
60354: ST_TO_ADDR
60355: GO 60610
60357: LD_INT 36
60359: DOUBLE
60360: EQUAL
60361: IFTRUE 60365
60363: GO 60421
60365: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60366: LD_ADDR_VAR 0 9
60370: PUSH
60371: LD_VAR 0 47
60375: PUSH
60376: LD_VAR 0 48
60380: PUSH
60381: LD_VAR 0 49
60385: PUSH
60386: LD_VAR 0 50
60390: PUSH
60391: LD_VAR 0 51
60395: PUSH
60396: LD_VAR 0 52
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: PUSH
60409: LD_VAR 0 4
60413: PUSH
60414: LD_INT 1
60416: PLUS
60417: ARRAY
60418: ST_TO_ADDR
60419: GO 60610
60421: LD_INT 4
60423: DOUBLE
60424: EQUAL
60425: IFTRUE 60447
60427: LD_INT 5
60429: DOUBLE
60430: EQUAL
60431: IFTRUE 60447
60433: LD_INT 34
60435: DOUBLE
60436: EQUAL
60437: IFTRUE 60447
60439: LD_INT 37
60441: DOUBLE
60442: EQUAL
60443: IFTRUE 60447
60445: GO 60503
60447: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60448: LD_ADDR_VAR 0 9
60452: PUSH
60453: LD_VAR 0 53
60457: PUSH
60458: LD_VAR 0 54
60462: PUSH
60463: LD_VAR 0 55
60467: PUSH
60468: LD_VAR 0 56
60472: PUSH
60473: LD_VAR 0 57
60477: PUSH
60478: LD_VAR 0 58
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: PUSH
60491: LD_VAR 0 4
60495: PUSH
60496: LD_INT 1
60498: PLUS
60499: ARRAY
60500: ST_TO_ADDR
60501: GO 60610
60503: LD_INT 31
60505: DOUBLE
60506: EQUAL
60507: IFTRUE 60553
60509: LD_INT 32
60511: DOUBLE
60512: EQUAL
60513: IFTRUE 60553
60515: LD_INT 33
60517: DOUBLE
60518: EQUAL
60519: IFTRUE 60553
60521: LD_INT 27
60523: DOUBLE
60524: EQUAL
60525: IFTRUE 60553
60527: LD_INT 26
60529: DOUBLE
60530: EQUAL
60531: IFTRUE 60553
60533: LD_INT 28
60535: DOUBLE
60536: EQUAL
60537: IFTRUE 60553
60539: LD_INT 29
60541: DOUBLE
60542: EQUAL
60543: IFTRUE 60553
60545: LD_INT 30
60547: DOUBLE
60548: EQUAL
60549: IFTRUE 60553
60551: GO 60609
60553: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60554: LD_ADDR_VAR 0 9
60558: PUSH
60559: LD_VAR 0 59
60563: PUSH
60564: LD_VAR 0 60
60568: PUSH
60569: LD_VAR 0 61
60573: PUSH
60574: LD_VAR 0 62
60578: PUSH
60579: LD_VAR 0 63
60583: PUSH
60584: LD_VAR 0 64
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: PUSH
60597: LD_VAR 0 4
60601: PUSH
60602: LD_INT 1
60604: PLUS
60605: ARRAY
60606: ST_TO_ADDR
60607: GO 60610
60609: POP
// temp_list2 = [ ] ;
60610: LD_ADDR_VAR 0 10
60614: PUSH
60615: EMPTY
60616: ST_TO_ADDR
// for i in temp_list do
60617: LD_ADDR_VAR 0 8
60621: PUSH
60622: LD_VAR 0 9
60626: PUSH
60627: FOR_IN
60628: IFFALSE 60680
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60630: LD_ADDR_VAR 0 10
60634: PUSH
60635: LD_VAR 0 10
60639: PUSH
60640: LD_VAR 0 8
60644: PUSH
60645: LD_INT 1
60647: ARRAY
60648: PUSH
60649: LD_VAR 0 2
60653: PLUS
60654: PUSH
60655: LD_VAR 0 8
60659: PUSH
60660: LD_INT 2
60662: ARRAY
60663: PUSH
60664: LD_VAR 0 3
60668: PLUS
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: EMPTY
60675: LIST
60676: ADD
60677: ST_TO_ADDR
60678: GO 60627
60680: POP
60681: POP
// result = temp_list2 ;
60682: LD_ADDR_VAR 0 7
60686: PUSH
60687: LD_VAR 0 10
60691: ST_TO_ADDR
// end ;
60692: LD_VAR 0 7
60696: RET
// export function EnemyInRange ( unit , dist ) ; begin
60697: LD_INT 0
60699: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60700: LD_ADDR_VAR 0 3
60704: PUSH
60705: LD_VAR 0 1
60709: PPUSH
60710: CALL_OW 255
60714: PPUSH
60715: LD_VAR 0 1
60719: PPUSH
60720: CALL_OW 250
60724: PPUSH
60725: LD_VAR 0 1
60729: PPUSH
60730: CALL_OW 251
60734: PPUSH
60735: LD_VAR 0 2
60739: PPUSH
60740: CALL 34070 0 4
60744: PUSH
60745: LD_INT 4
60747: ARRAY
60748: ST_TO_ADDR
// end ;
60749: LD_VAR 0 3
60753: RET
// export function PlayerSeeMe ( unit ) ; begin
60754: LD_INT 0
60756: PPUSH
// result := See ( your_side , unit ) ;
60757: LD_ADDR_VAR 0 2
60761: PUSH
60762: LD_OWVAR 2
60766: PPUSH
60767: LD_VAR 0 1
60771: PPUSH
60772: CALL_OW 292
60776: ST_TO_ADDR
// end ;
60777: LD_VAR 0 2
60781: RET
// export function ReverseDir ( unit ) ; begin
60782: LD_INT 0
60784: PPUSH
// if not unit then
60785: LD_VAR 0 1
60789: NOT
60790: IFFALSE 60794
// exit ;
60792: GO 60817
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60794: LD_ADDR_VAR 0 2
60798: PUSH
60799: LD_VAR 0 1
60803: PPUSH
60804: CALL_OW 254
60808: PUSH
60809: LD_INT 3
60811: PLUS
60812: PUSH
60813: LD_INT 6
60815: MOD
60816: ST_TO_ADDR
// end ;
60817: LD_VAR 0 2
60821: RET
// export function ReverseArray ( array ) ; var i ; begin
60822: LD_INT 0
60824: PPUSH
60825: PPUSH
// if not array then
60826: LD_VAR 0 1
60830: NOT
60831: IFFALSE 60835
// exit ;
60833: GO 60890
// result := [ ] ;
60835: LD_ADDR_VAR 0 2
60839: PUSH
60840: EMPTY
60841: ST_TO_ADDR
// for i := array downto 1 do
60842: LD_ADDR_VAR 0 3
60846: PUSH
60847: DOUBLE
60848: LD_VAR 0 1
60852: INC
60853: ST_TO_ADDR
60854: LD_INT 1
60856: PUSH
60857: FOR_DOWNTO
60858: IFFALSE 60888
// result := Join ( result , array [ i ] ) ;
60860: LD_ADDR_VAR 0 2
60864: PUSH
60865: LD_VAR 0 2
60869: PPUSH
60870: LD_VAR 0 1
60874: PUSH
60875: LD_VAR 0 3
60879: ARRAY
60880: PPUSH
60881: CALL 65546 0 2
60885: ST_TO_ADDR
60886: GO 60857
60888: POP
60889: POP
// end ;
60890: LD_VAR 0 2
60894: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60895: LD_INT 0
60897: PPUSH
60898: PPUSH
60899: PPUSH
60900: PPUSH
60901: PPUSH
60902: PPUSH
// if not unit or not hexes then
60903: LD_VAR 0 1
60907: NOT
60908: PUSH
60909: LD_VAR 0 2
60913: NOT
60914: OR
60915: IFFALSE 60919
// exit ;
60917: GO 61042
// dist := 9999 ;
60919: LD_ADDR_VAR 0 5
60923: PUSH
60924: LD_INT 9999
60926: ST_TO_ADDR
// for i = 1 to hexes do
60927: LD_ADDR_VAR 0 4
60931: PUSH
60932: DOUBLE
60933: LD_INT 1
60935: DEC
60936: ST_TO_ADDR
60937: LD_VAR 0 2
60941: PUSH
60942: FOR_TO
60943: IFFALSE 61030
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60945: LD_ADDR_VAR 0 6
60949: PUSH
60950: LD_VAR 0 1
60954: PPUSH
60955: LD_VAR 0 2
60959: PUSH
60960: LD_VAR 0 4
60964: ARRAY
60965: PUSH
60966: LD_INT 1
60968: ARRAY
60969: PPUSH
60970: LD_VAR 0 2
60974: PUSH
60975: LD_VAR 0 4
60979: ARRAY
60980: PUSH
60981: LD_INT 2
60983: ARRAY
60984: PPUSH
60985: CALL_OW 297
60989: ST_TO_ADDR
// if tdist < dist then
60990: LD_VAR 0 6
60994: PUSH
60995: LD_VAR 0 5
60999: LESS
61000: IFFALSE 61028
// begin hex := hexes [ i ] ;
61002: LD_ADDR_VAR 0 8
61006: PUSH
61007: LD_VAR 0 2
61011: PUSH
61012: LD_VAR 0 4
61016: ARRAY
61017: ST_TO_ADDR
// dist := tdist ;
61018: LD_ADDR_VAR 0 5
61022: PUSH
61023: LD_VAR 0 6
61027: ST_TO_ADDR
// end ; end ;
61028: GO 60942
61030: POP
61031: POP
// result := hex ;
61032: LD_ADDR_VAR 0 3
61036: PUSH
61037: LD_VAR 0 8
61041: ST_TO_ADDR
// end ;
61042: LD_VAR 0 3
61046: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61047: LD_INT 0
61049: PPUSH
61050: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61051: LD_VAR 0 1
61055: NOT
61056: PUSH
61057: LD_VAR 0 1
61061: PUSH
61062: LD_INT 21
61064: PUSH
61065: LD_INT 2
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 23
61074: PUSH
61075: LD_INT 2
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PPUSH
61086: CALL_OW 69
61090: IN
61091: NOT
61092: OR
61093: IFFALSE 61097
// exit ;
61095: GO 61144
// for i = 1 to 3 do
61097: LD_ADDR_VAR 0 3
61101: PUSH
61102: DOUBLE
61103: LD_INT 1
61105: DEC
61106: ST_TO_ADDR
61107: LD_INT 3
61109: PUSH
61110: FOR_TO
61111: IFFALSE 61142
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61113: LD_VAR 0 1
61117: PPUSH
61118: CALL_OW 250
61122: PPUSH
61123: LD_VAR 0 1
61127: PPUSH
61128: CALL_OW 251
61132: PPUSH
61133: LD_INT 1
61135: PPUSH
61136: CALL_OW 453
61140: GO 61110
61142: POP
61143: POP
// end ;
61144: LD_VAR 0 2
61148: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61149: LD_INT 0
61151: PPUSH
61152: PPUSH
61153: PPUSH
61154: PPUSH
61155: PPUSH
61156: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61157: LD_VAR 0 1
61161: NOT
61162: PUSH
61163: LD_VAR 0 2
61167: NOT
61168: OR
61169: PUSH
61170: LD_VAR 0 1
61174: PPUSH
61175: CALL_OW 314
61179: OR
61180: IFFALSE 61184
// exit ;
61182: GO 61651
// if GetLives ( i ) < 250 then
61184: LD_VAR 0 4
61188: PPUSH
61189: CALL_OW 256
61193: PUSH
61194: LD_INT 250
61196: LESS
61197: IFFALSE 61210
// begin ComAutodestruct ( i ) ;
61199: LD_VAR 0 4
61203: PPUSH
61204: CALL 61047 0 1
// exit ;
61208: GO 61651
// end ; x := GetX ( enemy_unit ) ;
61210: LD_ADDR_VAR 0 7
61214: PUSH
61215: LD_VAR 0 2
61219: PPUSH
61220: CALL_OW 250
61224: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61225: LD_ADDR_VAR 0 8
61229: PUSH
61230: LD_VAR 0 2
61234: PPUSH
61235: CALL_OW 251
61239: ST_TO_ADDR
// if not x or not y then
61240: LD_VAR 0 7
61244: NOT
61245: PUSH
61246: LD_VAR 0 8
61250: NOT
61251: OR
61252: IFFALSE 61256
// exit ;
61254: GO 61651
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61256: LD_ADDR_VAR 0 6
61260: PUSH
61261: LD_VAR 0 7
61265: PPUSH
61266: LD_INT 0
61268: PPUSH
61269: LD_INT 4
61271: PPUSH
61272: CALL_OW 272
61276: PUSH
61277: LD_VAR 0 8
61281: PPUSH
61282: LD_INT 0
61284: PPUSH
61285: LD_INT 4
61287: PPUSH
61288: CALL_OW 273
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_VAR 0 7
61301: PPUSH
61302: LD_INT 1
61304: PPUSH
61305: LD_INT 4
61307: PPUSH
61308: CALL_OW 272
61312: PUSH
61313: LD_VAR 0 8
61317: PPUSH
61318: LD_INT 1
61320: PPUSH
61321: LD_INT 4
61323: PPUSH
61324: CALL_OW 273
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_VAR 0 7
61337: PPUSH
61338: LD_INT 2
61340: PPUSH
61341: LD_INT 4
61343: PPUSH
61344: CALL_OW 272
61348: PUSH
61349: LD_VAR 0 8
61353: PPUSH
61354: LD_INT 2
61356: PPUSH
61357: LD_INT 4
61359: PPUSH
61360: CALL_OW 273
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_VAR 0 7
61373: PPUSH
61374: LD_INT 3
61376: PPUSH
61377: LD_INT 4
61379: PPUSH
61380: CALL_OW 272
61384: PUSH
61385: LD_VAR 0 8
61389: PPUSH
61390: LD_INT 3
61392: PPUSH
61393: LD_INT 4
61395: PPUSH
61396: CALL_OW 273
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_VAR 0 7
61409: PPUSH
61410: LD_INT 4
61412: PPUSH
61413: LD_INT 4
61415: PPUSH
61416: CALL_OW 272
61420: PUSH
61421: LD_VAR 0 8
61425: PPUSH
61426: LD_INT 4
61428: PPUSH
61429: LD_INT 4
61431: PPUSH
61432: CALL_OW 273
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_VAR 0 7
61445: PPUSH
61446: LD_INT 5
61448: PPUSH
61449: LD_INT 4
61451: PPUSH
61452: CALL_OW 272
61456: PUSH
61457: LD_VAR 0 8
61461: PPUSH
61462: LD_INT 5
61464: PPUSH
61465: LD_INT 4
61467: PPUSH
61468: CALL_OW 273
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: ST_TO_ADDR
// for i = tmp downto 1 do
61485: LD_ADDR_VAR 0 4
61489: PUSH
61490: DOUBLE
61491: LD_VAR 0 6
61495: INC
61496: ST_TO_ADDR
61497: LD_INT 1
61499: PUSH
61500: FOR_DOWNTO
61501: IFFALSE 61602
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61503: LD_VAR 0 6
61507: PUSH
61508: LD_VAR 0 4
61512: ARRAY
61513: PUSH
61514: LD_INT 1
61516: ARRAY
61517: PPUSH
61518: LD_VAR 0 6
61522: PUSH
61523: LD_VAR 0 4
61527: ARRAY
61528: PUSH
61529: LD_INT 2
61531: ARRAY
61532: PPUSH
61533: CALL_OW 488
61537: NOT
61538: PUSH
61539: LD_VAR 0 6
61543: PUSH
61544: LD_VAR 0 4
61548: ARRAY
61549: PUSH
61550: LD_INT 1
61552: ARRAY
61553: PPUSH
61554: LD_VAR 0 6
61558: PUSH
61559: LD_VAR 0 4
61563: ARRAY
61564: PUSH
61565: LD_INT 2
61567: ARRAY
61568: PPUSH
61569: CALL_OW 428
61573: PUSH
61574: LD_INT 0
61576: NONEQUAL
61577: OR
61578: IFFALSE 61600
// tmp := Delete ( tmp , i ) ;
61580: LD_ADDR_VAR 0 6
61584: PUSH
61585: LD_VAR 0 6
61589: PPUSH
61590: LD_VAR 0 4
61594: PPUSH
61595: CALL_OW 3
61599: ST_TO_ADDR
61600: GO 61500
61602: POP
61603: POP
// j := GetClosestHex ( unit , tmp ) ;
61604: LD_ADDR_VAR 0 5
61608: PUSH
61609: LD_VAR 0 1
61613: PPUSH
61614: LD_VAR 0 6
61618: PPUSH
61619: CALL 60895 0 2
61623: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61624: LD_VAR 0 1
61628: PPUSH
61629: LD_VAR 0 5
61633: PUSH
61634: LD_INT 1
61636: ARRAY
61637: PPUSH
61638: LD_VAR 0 5
61642: PUSH
61643: LD_INT 2
61645: ARRAY
61646: PPUSH
61647: CALL_OW 111
// end ;
61651: LD_VAR 0 3
61655: RET
// export function PrepareApemanSoldier ( ) ; begin
61656: LD_INT 0
61658: PPUSH
// uc_nation := 0 ;
61659: LD_ADDR_OWVAR 21
61663: PUSH
61664: LD_INT 0
61666: ST_TO_ADDR
// hc_sex := sex_male ;
61667: LD_ADDR_OWVAR 27
61671: PUSH
61672: LD_INT 1
61674: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61675: LD_ADDR_OWVAR 28
61679: PUSH
61680: LD_INT 15
61682: ST_TO_ADDR
// hc_gallery :=  ;
61683: LD_ADDR_OWVAR 33
61687: PUSH
61688: LD_STRING 
61690: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61691: LD_ADDR_OWVAR 31
61695: PUSH
61696: LD_INT 0
61698: PPUSH
61699: LD_INT 3
61701: PPUSH
61702: CALL_OW 12
61706: PUSH
61707: LD_INT 0
61709: PPUSH
61710: LD_INT 3
61712: PPUSH
61713: CALL_OW 12
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: ST_TO_ADDR
// end ;
61730: LD_VAR 0 1
61734: RET
// export function PrepareApemanEngineer ( ) ; begin
61735: LD_INT 0
61737: PPUSH
// uc_nation := 0 ;
61738: LD_ADDR_OWVAR 21
61742: PUSH
61743: LD_INT 0
61745: ST_TO_ADDR
// hc_sex := sex_male ;
61746: LD_ADDR_OWVAR 27
61750: PUSH
61751: LD_INT 1
61753: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61754: LD_ADDR_OWVAR 28
61758: PUSH
61759: LD_INT 16
61761: ST_TO_ADDR
// hc_gallery :=  ;
61762: LD_ADDR_OWVAR 33
61766: PUSH
61767: LD_STRING 
61769: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61770: LD_ADDR_OWVAR 31
61774: PUSH
61775: LD_INT 0
61777: PPUSH
61778: LD_INT 3
61780: PPUSH
61781: CALL_OW 12
61785: PUSH
61786: LD_INT 0
61788: PPUSH
61789: LD_INT 3
61791: PPUSH
61792: CALL_OW 12
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: ST_TO_ADDR
// end ;
61809: LD_VAR 0 1
61813: RET
// export function PrepareApeman ( agressivity ) ; begin
61814: LD_INT 0
61816: PPUSH
// uc_side := 0 ;
61817: LD_ADDR_OWVAR 20
61821: PUSH
61822: LD_INT 0
61824: ST_TO_ADDR
// uc_nation := 0 ;
61825: LD_ADDR_OWVAR 21
61829: PUSH
61830: LD_INT 0
61832: ST_TO_ADDR
// hc_sex := sex_male ;
61833: LD_ADDR_OWVAR 27
61837: PUSH
61838: LD_INT 1
61840: ST_TO_ADDR
// hc_class := class_apeman ;
61841: LD_ADDR_OWVAR 28
61845: PUSH
61846: LD_INT 12
61848: ST_TO_ADDR
// hc_gallery :=  ;
61849: LD_ADDR_OWVAR 33
61853: PUSH
61854: LD_STRING 
61856: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61857: LD_ADDR_OWVAR 35
61861: PUSH
61862: LD_VAR 0 1
61866: NEG
61867: PPUSH
61868: LD_VAR 0 1
61872: PPUSH
61873: CALL_OW 12
61877: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61878: LD_ADDR_OWVAR 31
61882: PUSH
61883: LD_INT 0
61885: PPUSH
61886: LD_INT 3
61888: PPUSH
61889: CALL_OW 12
61893: PUSH
61894: LD_INT 0
61896: PPUSH
61897: LD_INT 3
61899: PPUSH
61900: CALL_OW 12
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 0
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: ST_TO_ADDR
// end ;
61917: LD_VAR 0 2
61921: RET
// export function PrepareTiger ( agressivity ) ; begin
61922: LD_INT 0
61924: PPUSH
// uc_side := 0 ;
61925: LD_ADDR_OWVAR 20
61929: PUSH
61930: LD_INT 0
61932: ST_TO_ADDR
// uc_nation := 0 ;
61933: LD_ADDR_OWVAR 21
61937: PUSH
61938: LD_INT 0
61940: ST_TO_ADDR
// hc_class := class_tiger ;
61941: LD_ADDR_OWVAR 28
61945: PUSH
61946: LD_INT 14
61948: ST_TO_ADDR
// hc_gallery :=  ;
61949: LD_ADDR_OWVAR 33
61953: PUSH
61954: LD_STRING 
61956: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61957: LD_ADDR_OWVAR 35
61961: PUSH
61962: LD_VAR 0 1
61966: NEG
61967: PPUSH
61968: LD_VAR 0 1
61972: PPUSH
61973: CALL_OW 12
61977: ST_TO_ADDR
// end ;
61978: LD_VAR 0 2
61982: RET
// export function PrepareEnchidna ( ) ; begin
61983: LD_INT 0
61985: PPUSH
// uc_side := 0 ;
61986: LD_ADDR_OWVAR 20
61990: PUSH
61991: LD_INT 0
61993: ST_TO_ADDR
// uc_nation := 0 ;
61994: LD_ADDR_OWVAR 21
61998: PUSH
61999: LD_INT 0
62001: ST_TO_ADDR
// hc_class := class_baggie ;
62002: LD_ADDR_OWVAR 28
62006: PUSH
62007: LD_INT 13
62009: ST_TO_ADDR
// hc_gallery :=  ;
62010: LD_ADDR_OWVAR 33
62014: PUSH
62015: LD_STRING 
62017: ST_TO_ADDR
// end ;
62018: LD_VAR 0 1
62022: RET
// export function PrepareFrog ( ) ; begin
62023: LD_INT 0
62025: PPUSH
// uc_side := 0 ;
62026: LD_ADDR_OWVAR 20
62030: PUSH
62031: LD_INT 0
62033: ST_TO_ADDR
// uc_nation := 0 ;
62034: LD_ADDR_OWVAR 21
62038: PUSH
62039: LD_INT 0
62041: ST_TO_ADDR
// hc_class := class_frog ;
62042: LD_ADDR_OWVAR 28
62046: PUSH
62047: LD_INT 19
62049: ST_TO_ADDR
// hc_gallery :=  ;
62050: LD_ADDR_OWVAR 33
62054: PUSH
62055: LD_STRING 
62057: ST_TO_ADDR
// end ;
62058: LD_VAR 0 1
62062: RET
// export function PrepareFish ( ) ; begin
62063: LD_INT 0
62065: PPUSH
// uc_side := 0 ;
62066: LD_ADDR_OWVAR 20
62070: PUSH
62071: LD_INT 0
62073: ST_TO_ADDR
// uc_nation := 0 ;
62074: LD_ADDR_OWVAR 21
62078: PUSH
62079: LD_INT 0
62081: ST_TO_ADDR
// hc_class := class_fish ;
62082: LD_ADDR_OWVAR 28
62086: PUSH
62087: LD_INT 20
62089: ST_TO_ADDR
// hc_gallery :=  ;
62090: LD_ADDR_OWVAR 33
62094: PUSH
62095: LD_STRING 
62097: ST_TO_ADDR
// end ;
62098: LD_VAR 0 1
62102: RET
// export function PrepareBird ( ) ; begin
62103: LD_INT 0
62105: PPUSH
// uc_side := 0 ;
62106: LD_ADDR_OWVAR 20
62110: PUSH
62111: LD_INT 0
62113: ST_TO_ADDR
// uc_nation := 0 ;
62114: LD_ADDR_OWVAR 21
62118: PUSH
62119: LD_INT 0
62121: ST_TO_ADDR
// hc_class := class_phororhacos ;
62122: LD_ADDR_OWVAR 28
62126: PUSH
62127: LD_INT 18
62129: ST_TO_ADDR
// hc_gallery :=  ;
62130: LD_ADDR_OWVAR 33
62134: PUSH
62135: LD_STRING 
62137: ST_TO_ADDR
// end ;
62138: LD_VAR 0 1
62142: RET
// export function PrepareHorse ( ) ; begin
62143: LD_INT 0
62145: PPUSH
// uc_side := 0 ;
62146: LD_ADDR_OWVAR 20
62150: PUSH
62151: LD_INT 0
62153: ST_TO_ADDR
// uc_nation := 0 ;
62154: LD_ADDR_OWVAR 21
62158: PUSH
62159: LD_INT 0
62161: ST_TO_ADDR
// hc_class := class_horse ;
62162: LD_ADDR_OWVAR 28
62166: PUSH
62167: LD_INT 21
62169: ST_TO_ADDR
// hc_gallery :=  ;
62170: LD_ADDR_OWVAR 33
62174: PUSH
62175: LD_STRING 
62177: ST_TO_ADDR
// end ;
62178: LD_VAR 0 1
62182: RET
// export function PrepareMastodont ( ) ; begin
62183: LD_INT 0
62185: PPUSH
// uc_side := 0 ;
62186: LD_ADDR_OWVAR 20
62190: PUSH
62191: LD_INT 0
62193: ST_TO_ADDR
// uc_nation := 0 ;
62194: LD_ADDR_OWVAR 21
62198: PUSH
62199: LD_INT 0
62201: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62202: LD_ADDR_OWVAR 37
62206: PUSH
62207: LD_INT 31
62209: ST_TO_ADDR
// vc_control := control_rider ;
62210: LD_ADDR_OWVAR 38
62214: PUSH
62215: LD_INT 4
62217: ST_TO_ADDR
// end ;
62218: LD_VAR 0 1
62222: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62223: LD_INT 0
62225: PPUSH
62226: PPUSH
62227: PPUSH
// uc_side = 0 ;
62228: LD_ADDR_OWVAR 20
62232: PUSH
62233: LD_INT 0
62235: ST_TO_ADDR
// uc_nation = 0 ;
62236: LD_ADDR_OWVAR 21
62240: PUSH
62241: LD_INT 0
62243: ST_TO_ADDR
// InitHc_All ( ) ;
62244: CALL_OW 584
// InitVc ;
62248: CALL_OW 20
// if mastodonts then
62252: LD_VAR 0 6
62256: IFFALSE 62323
// for i = 1 to mastodonts do
62258: LD_ADDR_VAR 0 11
62262: PUSH
62263: DOUBLE
62264: LD_INT 1
62266: DEC
62267: ST_TO_ADDR
62268: LD_VAR 0 6
62272: PUSH
62273: FOR_TO
62274: IFFALSE 62321
// begin vc_chassis := 31 ;
62276: LD_ADDR_OWVAR 37
62280: PUSH
62281: LD_INT 31
62283: ST_TO_ADDR
// vc_control := control_rider ;
62284: LD_ADDR_OWVAR 38
62288: PUSH
62289: LD_INT 4
62291: ST_TO_ADDR
// animal := CreateVehicle ;
62292: LD_ADDR_VAR 0 12
62296: PUSH
62297: CALL_OW 45
62301: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62302: LD_VAR 0 12
62306: PPUSH
62307: LD_VAR 0 8
62311: PPUSH
62312: LD_INT 0
62314: PPUSH
62315: CALL 64451 0 3
// end ;
62319: GO 62273
62321: POP
62322: POP
// if horses then
62323: LD_VAR 0 5
62327: IFFALSE 62394
// for i = 1 to horses do
62329: LD_ADDR_VAR 0 11
62333: PUSH
62334: DOUBLE
62335: LD_INT 1
62337: DEC
62338: ST_TO_ADDR
62339: LD_VAR 0 5
62343: PUSH
62344: FOR_TO
62345: IFFALSE 62392
// begin hc_class := 21 ;
62347: LD_ADDR_OWVAR 28
62351: PUSH
62352: LD_INT 21
62354: ST_TO_ADDR
// hc_gallery :=  ;
62355: LD_ADDR_OWVAR 33
62359: PUSH
62360: LD_STRING 
62362: ST_TO_ADDR
// animal := CreateHuman ;
62363: LD_ADDR_VAR 0 12
62367: PUSH
62368: CALL_OW 44
62372: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62373: LD_VAR 0 12
62377: PPUSH
62378: LD_VAR 0 8
62382: PPUSH
62383: LD_INT 0
62385: PPUSH
62386: CALL 64451 0 3
// end ;
62390: GO 62344
62392: POP
62393: POP
// if birds then
62394: LD_VAR 0 1
62398: IFFALSE 62465
// for i = 1 to birds do
62400: LD_ADDR_VAR 0 11
62404: PUSH
62405: DOUBLE
62406: LD_INT 1
62408: DEC
62409: ST_TO_ADDR
62410: LD_VAR 0 1
62414: PUSH
62415: FOR_TO
62416: IFFALSE 62463
// begin hc_class := 18 ;
62418: LD_ADDR_OWVAR 28
62422: PUSH
62423: LD_INT 18
62425: ST_TO_ADDR
// hc_gallery =  ;
62426: LD_ADDR_OWVAR 33
62430: PUSH
62431: LD_STRING 
62433: ST_TO_ADDR
// animal := CreateHuman ;
62434: LD_ADDR_VAR 0 12
62438: PUSH
62439: CALL_OW 44
62443: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62444: LD_VAR 0 12
62448: PPUSH
62449: LD_VAR 0 8
62453: PPUSH
62454: LD_INT 0
62456: PPUSH
62457: CALL 64451 0 3
// end ;
62461: GO 62415
62463: POP
62464: POP
// if tigers then
62465: LD_VAR 0 2
62469: IFFALSE 62553
// for i = 1 to tigers do
62471: LD_ADDR_VAR 0 11
62475: PUSH
62476: DOUBLE
62477: LD_INT 1
62479: DEC
62480: ST_TO_ADDR
62481: LD_VAR 0 2
62485: PUSH
62486: FOR_TO
62487: IFFALSE 62551
// begin hc_class = class_tiger ;
62489: LD_ADDR_OWVAR 28
62493: PUSH
62494: LD_INT 14
62496: ST_TO_ADDR
// hc_gallery =  ;
62497: LD_ADDR_OWVAR 33
62501: PUSH
62502: LD_STRING 
62504: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62505: LD_ADDR_OWVAR 35
62509: PUSH
62510: LD_INT 7
62512: NEG
62513: PPUSH
62514: LD_INT 7
62516: PPUSH
62517: CALL_OW 12
62521: ST_TO_ADDR
// animal := CreateHuman ;
62522: LD_ADDR_VAR 0 12
62526: PUSH
62527: CALL_OW 44
62531: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62532: LD_VAR 0 12
62536: PPUSH
62537: LD_VAR 0 8
62541: PPUSH
62542: LD_INT 0
62544: PPUSH
62545: CALL 64451 0 3
// end ;
62549: GO 62486
62551: POP
62552: POP
// if apemans then
62553: LD_VAR 0 3
62557: IFFALSE 62680
// for i = 1 to apemans do
62559: LD_ADDR_VAR 0 11
62563: PUSH
62564: DOUBLE
62565: LD_INT 1
62567: DEC
62568: ST_TO_ADDR
62569: LD_VAR 0 3
62573: PUSH
62574: FOR_TO
62575: IFFALSE 62678
// begin hc_class = class_apeman ;
62577: LD_ADDR_OWVAR 28
62581: PUSH
62582: LD_INT 12
62584: ST_TO_ADDR
// hc_gallery =  ;
62585: LD_ADDR_OWVAR 33
62589: PUSH
62590: LD_STRING 
62592: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62593: LD_ADDR_OWVAR 35
62597: PUSH
62598: LD_INT 2
62600: NEG
62601: PPUSH
62602: LD_INT 2
62604: PPUSH
62605: CALL_OW 12
62609: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62610: LD_ADDR_OWVAR 31
62614: PUSH
62615: LD_INT 1
62617: PPUSH
62618: LD_INT 3
62620: PPUSH
62621: CALL_OW 12
62625: PUSH
62626: LD_INT 1
62628: PPUSH
62629: LD_INT 3
62631: PPUSH
62632: CALL_OW 12
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: ST_TO_ADDR
// animal := CreateHuman ;
62649: LD_ADDR_VAR 0 12
62653: PUSH
62654: CALL_OW 44
62658: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62659: LD_VAR 0 12
62663: PPUSH
62664: LD_VAR 0 8
62668: PPUSH
62669: LD_INT 0
62671: PPUSH
62672: CALL 64451 0 3
// end ;
62676: GO 62574
62678: POP
62679: POP
// if enchidnas then
62680: LD_VAR 0 4
62684: IFFALSE 62751
// for i = 1 to enchidnas do
62686: LD_ADDR_VAR 0 11
62690: PUSH
62691: DOUBLE
62692: LD_INT 1
62694: DEC
62695: ST_TO_ADDR
62696: LD_VAR 0 4
62700: PUSH
62701: FOR_TO
62702: IFFALSE 62749
// begin hc_class = 13 ;
62704: LD_ADDR_OWVAR 28
62708: PUSH
62709: LD_INT 13
62711: ST_TO_ADDR
// hc_gallery =  ;
62712: LD_ADDR_OWVAR 33
62716: PUSH
62717: LD_STRING 
62719: ST_TO_ADDR
// animal := CreateHuman ;
62720: LD_ADDR_VAR 0 12
62724: PUSH
62725: CALL_OW 44
62729: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62730: LD_VAR 0 12
62734: PPUSH
62735: LD_VAR 0 8
62739: PPUSH
62740: LD_INT 0
62742: PPUSH
62743: CALL 64451 0 3
// end ;
62747: GO 62701
62749: POP
62750: POP
// if fishes then
62751: LD_VAR 0 7
62755: IFFALSE 62822
// for i = 1 to fishes do
62757: LD_ADDR_VAR 0 11
62761: PUSH
62762: DOUBLE
62763: LD_INT 1
62765: DEC
62766: ST_TO_ADDR
62767: LD_VAR 0 7
62771: PUSH
62772: FOR_TO
62773: IFFALSE 62820
// begin hc_class = 20 ;
62775: LD_ADDR_OWVAR 28
62779: PUSH
62780: LD_INT 20
62782: ST_TO_ADDR
// hc_gallery =  ;
62783: LD_ADDR_OWVAR 33
62787: PUSH
62788: LD_STRING 
62790: ST_TO_ADDR
// animal := CreateHuman ;
62791: LD_ADDR_VAR 0 12
62795: PUSH
62796: CALL_OW 44
62800: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62801: LD_VAR 0 12
62805: PPUSH
62806: LD_VAR 0 9
62810: PPUSH
62811: LD_INT 0
62813: PPUSH
62814: CALL 64451 0 3
// end ;
62818: GO 62772
62820: POP
62821: POP
// end ;
62822: LD_VAR 0 10
62826: RET
// export function WantHeal ( sci , unit ) ; begin
62827: LD_INT 0
62829: PPUSH
// if GetTaskList ( sci ) > 0 then
62830: LD_VAR 0 1
62834: PPUSH
62835: CALL_OW 437
62839: PUSH
62840: LD_INT 0
62842: GREATER
62843: IFFALSE 62913
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62845: LD_VAR 0 1
62849: PPUSH
62850: CALL_OW 437
62854: PUSH
62855: LD_INT 1
62857: ARRAY
62858: PUSH
62859: LD_INT 1
62861: ARRAY
62862: PUSH
62863: LD_STRING l
62865: EQUAL
62866: PUSH
62867: LD_VAR 0 1
62871: PPUSH
62872: CALL_OW 437
62876: PUSH
62877: LD_INT 1
62879: ARRAY
62880: PUSH
62881: LD_INT 4
62883: ARRAY
62884: PUSH
62885: LD_VAR 0 2
62889: EQUAL
62890: AND
62891: IFFALSE 62903
// result := true else
62893: LD_ADDR_VAR 0 3
62897: PUSH
62898: LD_INT 1
62900: ST_TO_ADDR
62901: GO 62911
// result := false ;
62903: LD_ADDR_VAR 0 3
62907: PUSH
62908: LD_INT 0
62910: ST_TO_ADDR
// end else
62911: GO 62921
// result := false ;
62913: LD_ADDR_VAR 0 3
62917: PUSH
62918: LD_INT 0
62920: ST_TO_ADDR
// end ;
62921: LD_VAR 0 3
62925: RET
// export function HealTarget ( sci ) ; begin
62926: LD_INT 0
62928: PPUSH
// if not sci then
62929: LD_VAR 0 1
62933: NOT
62934: IFFALSE 62938
// exit ;
62936: GO 63003
// result := 0 ;
62938: LD_ADDR_VAR 0 2
62942: PUSH
62943: LD_INT 0
62945: ST_TO_ADDR
// if GetTaskList ( sci ) then
62946: LD_VAR 0 1
62950: PPUSH
62951: CALL_OW 437
62955: IFFALSE 63003
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62957: LD_VAR 0 1
62961: PPUSH
62962: CALL_OW 437
62966: PUSH
62967: LD_INT 1
62969: ARRAY
62970: PUSH
62971: LD_INT 1
62973: ARRAY
62974: PUSH
62975: LD_STRING l
62977: EQUAL
62978: IFFALSE 63003
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62980: LD_ADDR_VAR 0 2
62984: PUSH
62985: LD_VAR 0 1
62989: PPUSH
62990: CALL_OW 437
62994: PUSH
62995: LD_INT 1
62997: ARRAY
62998: PUSH
62999: LD_INT 4
63001: ARRAY
63002: ST_TO_ADDR
// end ;
63003: LD_VAR 0 2
63007: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63008: LD_INT 0
63010: PPUSH
63011: PPUSH
63012: PPUSH
63013: PPUSH
// if not base_units then
63014: LD_VAR 0 1
63018: NOT
63019: IFFALSE 63023
// exit ;
63021: GO 63110
// result := false ;
63023: LD_ADDR_VAR 0 2
63027: PUSH
63028: LD_INT 0
63030: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63031: LD_ADDR_VAR 0 5
63035: PUSH
63036: LD_VAR 0 1
63040: PPUSH
63041: LD_INT 21
63043: PUSH
63044: LD_INT 3
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PPUSH
63051: CALL_OW 72
63055: ST_TO_ADDR
// if not tmp then
63056: LD_VAR 0 5
63060: NOT
63061: IFFALSE 63065
// exit ;
63063: GO 63110
// for i in tmp do
63065: LD_ADDR_VAR 0 3
63069: PUSH
63070: LD_VAR 0 5
63074: PUSH
63075: FOR_IN
63076: IFFALSE 63108
// begin result := EnemyInRange ( i , 22 ) ;
63078: LD_ADDR_VAR 0 2
63082: PUSH
63083: LD_VAR 0 3
63087: PPUSH
63088: LD_INT 22
63090: PPUSH
63091: CALL 60697 0 2
63095: ST_TO_ADDR
// if result then
63096: LD_VAR 0 2
63100: IFFALSE 63106
// exit ;
63102: POP
63103: POP
63104: GO 63110
// end ;
63106: GO 63075
63108: POP
63109: POP
// end ;
63110: LD_VAR 0 2
63114: RET
// export function FilterByTag ( units , tag ) ; begin
63115: LD_INT 0
63117: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63118: LD_ADDR_VAR 0 3
63122: PUSH
63123: LD_VAR 0 1
63127: PPUSH
63128: LD_INT 120
63130: PUSH
63131: LD_VAR 0 2
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PPUSH
63140: CALL_OW 72
63144: ST_TO_ADDR
// end ;
63145: LD_VAR 0 3
63149: RET
// export function IsDriver ( un ) ; begin
63150: LD_INT 0
63152: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63153: LD_ADDR_VAR 0 2
63157: PUSH
63158: LD_VAR 0 1
63162: PUSH
63163: LD_INT 55
63165: PUSH
63166: EMPTY
63167: LIST
63168: PPUSH
63169: CALL_OW 69
63173: IN
63174: ST_TO_ADDR
// end ;
63175: LD_VAR 0 2
63179: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63180: LD_INT 0
63182: PPUSH
63183: PPUSH
// list := [ ] ;
63184: LD_ADDR_VAR 0 5
63188: PUSH
63189: EMPTY
63190: ST_TO_ADDR
// case d of 0 :
63191: LD_VAR 0 3
63195: PUSH
63196: LD_INT 0
63198: DOUBLE
63199: EQUAL
63200: IFTRUE 63204
63202: GO 63337
63204: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63205: LD_ADDR_VAR 0 5
63209: PUSH
63210: LD_VAR 0 1
63214: PUSH
63215: LD_INT 4
63217: MINUS
63218: PUSH
63219: LD_VAR 0 2
63223: PUSH
63224: LD_INT 4
63226: MINUS
63227: PUSH
63228: LD_INT 2
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: LIST
63235: PUSH
63236: LD_VAR 0 1
63240: PUSH
63241: LD_INT 3
63243: MINUS
63244: PUSH
63245: LD_VAR 0 2
63249: PUSH
63250: LD_INT 1
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: LIST
63257: PUSH
63258: LD_VAR 0 1
63262: PUSH
63263: LD_INT 4
63265: PLUS
63266: PUSH
63267: LD_VAR 0 2
63271: PUSH
63272: LD_INT 4
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: LIST
63279: PUSH
63280: LD_VAR 0 1
63284: PUSH
63285: LD_INT 3
63287: PLUS
63288: PUSH
63289: LD_VAR 0 2
63293: PUSH
63294: LD_INT 3
63296: PLUS
63297: PUSH
63298: LD_INT 5
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: LIST
63305: PUSH
63306: LD_VAR 0 1
63310: PUSH
63311: LD_VAR 0 2
63315: PUSH
63316: LD_INT 4
63318: PLUS
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: LIST
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: ST_TO_ADDR
// end ; 1 :
63335: GO 64035
63337: LD_INT 1
63339: DOUBLE
63340: EQUAL
63341: IFTRUE 63345
63343: GO 63478
63345: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63346: LD_ADDR_VAR 0 5
63350: PUSH
63351: LD_VAR 0 1
63355: PUSH
63356: LD_VAR 0 2
63360: PUSH
63361: LD_INT 4
63363: MINUS
63364: PUSH
63365: LD_INT 3
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: LIST
63372: PUSH
63373: LD_VAR 0 1
63377: PUSH
63378: LD_INT 3
63380: MINUS
63381: PUSH
63382: LD_VAR 0 2
63386: PUSH
63387: LD_INT 3
63389: MINUS
63390: PUSH
63391: LD_INT 2
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: LIST
63398: PUSH
63399: LD_VAR 0 1
63403: PUSH
63404: LD_INT 4
63406: MINUS
63407: PUSH
63408: LD_VAR 0 2
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: LIST
63420: PUSH
63421: LD_VAR 0 1
63425: PUSH
63426: LD_VAR 0 2
63430: PUSH
63431: LD_INT 3
63433: PLUS
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: LIST
63442: PUSH
63443: LD_VAR 0 1
63447: PUSH
63448: LD_INT 4
63450: PLUS
63451: PUSH
63452: LD_VAR 0 2
63456: PUSH
63457: LD_INT 4
63459: PLUS
63460: PUSH
63461: LD_INT 5
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: LIST
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: ST_TO_ADDR
// end ; 2 :
63476: GO 64035
63478: LD_INT 2
63480: DOUBLE
63481: EQUAL
63482: IFTRUE 63486
63484: GO 63615
63486: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63487: LD_ADDR_VAR 0 5
63491: PUSH
63492: LD_VAR 0 1
63496: PUSH
63497: LD_VAR 0 2
63501: PUSH
63502: LD_INT 3
63504: MINUS
63505: PUSH
63506: LD_INT 3
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: LIST
63513: PUSH
63514: LD_VAR 0 1
63518: PUSH
63519: LD_INT 4
63521: PLUS
63522: PUSH
63523: LD_VAR 0 2
63527: PUSH
63528: LD_INT 4
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: LIST
63535: PUSH
63536: LD_VAR 0 1
63540: PUSH
63541: LD_VAR 0 2
63545: PUSH
63546: LD_INT 4
63548: PLUS
63549: PUSH
63550: LD_INT 0
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: LIST
63557: PUSH
63558: LD_VAR 0 1
63562: PUSH
63563: LD_INT 3
63565: MINUS
63566: PUSH
63567: LD_VAR 0 2
63571: PUSH
63572: LD_INT 1
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: LIST
63579: PUSH
63580: LD_VAR 0 1
63584: PUSH
63585: LD_INT 4
63587: MINUS
63588: PUSH
63589: LD_VAR 0 2
63593: PUSH
63594: LD_INT 4
63596: MINUS
63597: PUSH
63598: LD_INT 2
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: LIST
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: ST_TO_ADDR
// end ; 3 :
63613: GO 64035
63615: LD_INT 3
63617: DOUBLE
63618: EQUAL
63619: IFTRUE 63623
63621: GO 63756
63623: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63624: LD_ADDR_VAR 0 5
63628: PUSH
63629: LD_VAR 0 1
63633: PUSH
63634: LD_INT 3
63636: PLUS
63637: PUSH
63638: LD_VAR 0 2
63642: PUSH
63643: LD_INT 4
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: LIST
63650: PUSH
63651: LD_VAR 0 1
63655: PUSH
63656: LD_INT 4
63658: PLUS
63659: PUSH
63660: LD_VAR 0 2
63664: PUSH
63665: LD_INT 4
63667: PLUS
63668: PUSH
63669: LD_INT 5
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: LIST
63676: PUSH
63677: LD_VAR 0 1
63681: PUSH
63682: LD_INT 4
63684: MINUS
63685: PUSH
63686: LD_VAR 0 2
63690: PUSH
63691: LD_INT 1
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: LIST
63698: PUSH
63699: LD_VAR 0 1
63703: PUSH
63704: LD_VAR 0 2
63708: PUSH
63709: LD_INT 4
63711: MINUS
63712: PUSH
63713: LD_INT 3
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: LIST
63720: PUSH
63721: LD_VAR 0 1
63725: PUSH
63726: LD_INT 3
63728: MINUS
63729: PUSH
63730: LD_VAR 0 2
63734: PUSH
63735: LD_INT 3
63737: MINUS
63738: PUSH
63739: LD_INT 2
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: LIST
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: ST_TO_ADDR
// end ; 4 :
63754: GO 64035
63756: LD_INT 4
63758: DOUBLE
63759: EQUAL
63760: IFTRUE 63764
63762: GO 63897
63764: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63765: LD_ADDR_VAR 0 5
63769: PUSH
63770: LD_VAR 0 1
63774: PUSH
63775: LD_VAR 0 2
63779: PUSH
63780: LD_INT 4
63782: PLUS
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: LIST
63791: PUSH
63792: LD_VAR 0 1
63796: PUSH
63797: LD_INT 3
63799: PLUS
63800: PUSH
63801: LD_VAR 0 2
63805: PUSH
63806: LD_INT 3
63808: PLUS
63809: PUSH
63810: LD_INT 5
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: LIST
63817: PUSH
63818: LD_VAR 0 1
63822: PUSH
63823: LD_INT 4
63825: PLUS
63826: PUSH
63827: LD_VAR 0 2
63831: PUSH
63832: LD_INT 4
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: LIST
63839: PUSH
63840: LD_VAR 0 1
63844: PUSH
63845: LD_VAR 0 2
63849: PUSH
63850: LD_INT 3
63852: MINUS
63853: PUSH
63854: LD_INT 3
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: LIST
63861: PUSH
63862: LD_VAR 0 1
63866: PUSH
63867: LD_INT 4
63869: MINUS
63870: PUSH
63871: LD_VAR 0 2
63875: PUSH
63876: LD_INT 4
63878: MINUS
63879: PUSH
63880: LD_INT 2
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: LIST
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: ST_TO_ADDR
// end ; 5 :
63895: GO 64035
63897: LD_INT 5
63899: DOUBLE
63900: EQUAL
63901: IFTRUE 63905
63903: GO 64034
63905: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63906: LD_ADDR_VAR 0 5
63910: PUSH
63911: LD_VAR 0 1
63915: PUSH
63916: LD_INT 4
63918: MINUS
63919: PUSH
63920: LD_VAR 0 2
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: LIST
63932: PUSH
63933: LD_VAR 0 1
63937: PUSH
63938: LD_VAR 0 2
63942: PUSH
63943: LD_INT 4
63945: MINUS
63946: PUSH
63947: LD_INT 3
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: LIST
63954: PUSH
63955: LD_VAR 0 1
63959: PUSH
63960: LD_INT 4
63962: PLUS
63963: PUSH
63964: LD_VAR 0 2
63968: PUSH
63969: LD_INT 4
63971: PLUS
63972: PUSH
63973: LD_INT 5
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: LIST
63980: PUSH
63981: LD_VAR 0 1
63985: PUSH
63986: LD_INT 3
63988: PLUS
63989: PUSH
63990: LD_VAR 0 2
63994: PUSH
63995: LD_INT 4
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: LIST
64002: PUSH
64003: LD_VAR 0 1
64007: PUSH
64008: LD_VAR 0 2
64012: PUSH
64013: LD_INT 3
64015: PLUS
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: LIST
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: ST_TO_ADDR
// end ; end ;
64032: GO 64035
64034: POP
// result := list ;
64035: LD_ADDR_VAR 0 4
64039: PUSH
64040: LD_VAR 0 5
64044: ST_TO_ADDR
// end ;
64045: LD_VAR 0 4
64049: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64050: LD_INT 0
64052: PPUSH
64053: PPUSH
64054: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64055: LD_VAR 0 1
64059: NOT
64060: PUSH
64061: LD_VAR 0 2
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: LD_INT 2
64071: PUSH
64072: LD_INT 3
64074: PUSH
64075: LD_INT 4
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: IN
64084: NOT
64085: OR
64086: IFFALSE 64090
// exit ;
64088: GO 64173
// tmp := [ ] ;
64090: LD_ADDR_VAR 0 5
64094: PUSH
64095: EMPTY
64096: ST_TO_ADDR
// for i in units do
64097: LD_ADDR_VAR 0 4
64101: PUSH
64102: LD_VAR 0 1
64106: PUSH
64107: FOR_IN
64108: IFFALSE 64142
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64110: LD_ADDR_VAR 0 5
64114: PUSH
64115: LD_VAR 0 5
64119: PPUSH
64120: LD_VAR 0 4
64124: PPUSH
64125: LD_VAR 0 2
64129: PPUSH
64130: CALL_OW 259
64134: PPUSH
64135: CALL 65546 0 2
64139: ST_TO_ADDR
64140: GO 64107
64142: POP
64143: POP
// if not tmp then
64144: LD_VAR 0 5
64148: NOT
64149: IFFALSE 64153
// exit ;
64151: GO 64173
// result := SortListByListDesc ( units , tmp ) ;
64153: LD_ADDR_VAR 0 3
64157: PUSH
64158: LD_VAR 0 1
64162: PPUSH
64163: LD_VAR 0 5
64167: PPUSH
64168: CALL_OW 77
64172: ST_TO_ADDR
// end ;
64173: LD_VAR 0 3
64177: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64178: LD_INT 0
64180: PPUSH
64181: PPUSH
64182: PPUSH
// result := false ;
64183: LD_ADDR_VAR 0 3
64187: PUSH
64188: LD_INT 0
64190: ST_TO_ADDR
// if not building then
64191: LD_VAR 0 2
64195: NOT
64196: IFFALSE 64200
// exit ;
64198: GO 64338
// x := GetX ( building ) ;
64200: LD_ADDR_VAR 0 4
64204: PUSH
64205: LD_VAR 0 2
64209: PPUSH
64210: CALL_OW 250
64214: ST_TO_ADDR
// y := GetY ( building ) ;
64215: LD_ADDR_VAR 0 5
64219: PUSH
64220: LD_VAR 0 2
64224: PPUSH
64225: CALL_OW 251
64229: ST_TO_ADDR
// if not x or not y then
64230: LD_VAR 0 4
64234: NOT
64235: PUSH
64236: LD_VAR 0 5
64240: NOT
64241: OR
64242: IFFALSE 64246
// exit ;
64244: GO 64338
// if GetTaskList ( unit ) then
64246: LD_VAR 0 1
64250: PPUSH
64251: CALL_OW 437
64255: IFFALSE 64338
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64257: LD_STRING e
64259: PUSH
64260: LD_VAR 0 1
64264: PPUSH
64265: CALL_OW 437
64269: PUSH
64270: LD_INT 1
64272: ARRAY
64273: PUSH
64274: LD_INT 1
64276: ARRAY
64277: EQUAL
64278: PUSH
64279: LD_VAR 0 4
64283: PUSH
64284: LD_VAR 0 1
64288: PPUSH
64289: CALL_OW 437
64293: PUSH
64294: LD_INT 1
64296: ARRAY
64297: PUSH
64298: LD_INT 2
64300: ARRAY
64301: EQUAL
64302: AND
64303: PUSH
64304: LD_VAR 0 5
64308: PUSH
64309: LD_VAR 0 1
64313: PPUSH
64314: CALL_OW 437
64318: PUSH
64319: LD_INT 1
64321: ARRAY
64322: PUSH
64323: LD_INT 3
64325: ARRAY
64326: EQUAL
64327: AND
64328: IFFALSE 64338
// result := true end ;
64330: LD_ADDR_VAR 0 3
64334: PUSH
64335: LD_INT 1
64337: ST_TO_ADDR
// end ;
64338: LD_VAR 0 3
64342: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64343: LD_INT 0
64345: PPUSH
// result := false ;
64346: LD_ADDR_VAR 0 4
64350: PUSH
64351: LD_INT 0
64353: ST_TO_ADDR
// if GetTaskList ( unit ) then
64354: LD_VAR 0 1
64358: PPUSH
64359: CALL_OW 437
64363: IFFALSE 64446
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64365: LD_STRING M
64367: PUSH
64368: LD_VAR 0 1
64372: PPUSH
64373: CALL_OW 437
64377: PUSH
64378: LD_INT 1
64380: ARRAY
64381: PUSH
64382: LD_INT 1
64384: ARRAY
64385: EQUAL
64386: PUSH
64387: LD_VAR 0 2
64391: PUSH
64392: LD_VAR 0 1
64396: PPUSH
64397: CALL_OW 437
64401: PUSH
64402: LD_INT 1
64404: ARRAY
64405: PUSH
64406: LD_INT 2
64408: ARRAY
64409: EQUAL
64410: AND
64411: PUSH
64412: LD_VAR 0 3
64416: PUSH
64417: LD_VAR 0 1
64421: PPUSH
64422: CALL_OW 437
64426: PUSH
64427: LD_INT 1
64429: ARRAY
64430: PUSH
64431: LD_INT 3
64433: ARRAY
64434: EQUAL
64435: AND
64436: IFFALSE 64446
// result := true ;
64438: LD_ADDR_VAR 0 4
64442: PUSH
64443: LD_INT 1
64445: ST_TO_ADDR
// end ; end ;
64446: LD_VAR 0 4
64450: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64451: LD_INT 0
64453: PPUSH
64454: PPUSH
64455: PPUSH
64456: PPUSH
// if not unit or not area then
64457: LD_VAR 0 1
64461: NOT
64462: PUSH
64463: LD_VAR 0 2
64467: NOT
64468: OR
64469: IFFALSE 64473
// exit ;
64471: GO 64649
// tmp := AreaToList ( area , i ) ;
64473: LD_ADDR_VAR 0 6
64477: PUSH
64478: LD_VAR 0 2
64482: PPUSH
64483: LD_VAR 0 5
64487: PPUSH
64488: CALL_OW 517
64492: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64493: LD_ADDR_VAR 0 5
64497: PUSH
64498: DOUBLE
64499: LD_INT 1
64501: DEC
64502: ST_TO_ADDR
64503: LD_VAR 0 6
64507: PUSH
64508: LD_INT 1
64510: ARRAY
64511: PUSH
64512: FOR_TO
64513: IFFALSE 64647
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64515: LD_ADDR_VAR 0 7
64519: PUSH
64520: LD_VAR 0 6
64524: PUSH
64525: LD_INT 1
64527: ARRAY
64528: PUSH
64529: LD_VAR 0 5
64533: ARRAY
64534: PUSH
64535: LD_VAR 0 6
64539: PUSH
64540: LD_INT 2
64542: ARRAY
64543: PUSH
64544: LD_VAR 0 5
64548: ARRAY
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64554: LD_INT 92
64556: PUSH
64557: LD_VAR 0 7
64561: PUSH
64562: LD_INT 1
64564: ARRAY
64565: PUSH
64566: LD_VAR 0 7
64570: PUSH
64571: LD_INT 2
64573: ARRAY
64574: PUSH
64575: LD_INT 2
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: PPUSH
64584: CALL_OW 69
64588: PUSH
64589: LD_INT 0
64591: EQUAL
64592: IFFALSE 64645
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64594: LD_VAR 0 1
64598: PPUSH
64599: LD_VAR 0 7
64603: PUSH
64604: LD_INT 1
64606: ARRAY
64607: PPUSH
64608: LD_VAR 0 7
64612: PUSH
64613: LD_INT 2
64615: ARRAY
64616: PPUSH
64617: LD_VAR 0 3
64621: PPUSH
64622: CALL_OW 48
// result := IsPlaced ( unit ) ;
64626: LD_ADDR_VAR 0 4
64630: PUSH
64631: LD_VAR 0 1
64635: PPUSH
64636: CALL_OW 305
64640: ST_TO_ADDR
// exit ;
64641: POP
64642: POP
64643: GO 64649
// end ; end ;
64645: GO 64512
64647: POP
64648: POP
// end ;
64649: LD_VAR 0 4
64653: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64654: LD_INT 0
64656: PPUSH
64657: PPUSH
64658: PPUSH
// if not side or side > 8 then
64659: LD_VAR 0 1
64663: NOT
64664: PUSH
64665: LD_VAR 0 1
64669: PUSH
64670: LD_INT 8
64672: GREATER
64673: OR
64674: IFFALSE 64678
// exit ;
64676: GO 64865
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64678: LD_ADDR_VAR 0 4
64682: PUSH
64683: LD_INT 22
64685: PUSH
64686: LD_VAR 0 1
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 21
64697: PUSH
64698: LD_INT 3
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PPUSH
64709: CALL_OW 69
64713: ST_TO_ADDR
// if not tmp then
64714: LD_VAR 0 4
64718: NOT
64719: IFFALSE 64723
// exit ;
64721: GO 64865
// enable_addtolog := true ;
64723: LD_ADDR_OWVAR 81
64727: PUSH
64728: LD_INT 1
64730: ST_TO_ADDR
// AddToLog ( [ ) ;
64731: LD_STRING [
64733: PPUSH
64734: CALL_OW 561
// for i in tmp do
64738: LD_ADDR_VAR 0 3
64742: PUSH
64743: LD_VAR 0 4
64747: PUSH
64748: FOR_IN
64749: IFFALSE 64856
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64751: LD_STRING [
64753: PUSH
64754: LD_VAR 0 3
64758: PPUSH
64759: CALL_OW 266
64763: STR
64764: PUSH
64765: LD_STRING , 
64767: STR
64768: PUSH
64769: LD_VAR 0 3
64773: PPUSH
64774: CALL_OW 250
64778: STR
64779: PUSH
64780: LD_STRING , 
64782: STR
64783: PUSH
64784: LD_VAR 0 3
64788: PPUSH
64789: CALL_OW 251
64793: STR
64794: PUSH
64795: LD_STRING , 
64797: STR
64798: PUSH
64799: LD_VAR 0 3
64803: PPUSH
64804: CALL_OW 254
64808: STR
64809: PUSH
64810: LD_STRING , 
64812: STR
64813: PUSH
64814: LD_VAR 0 3
64818: PPUSH
64819: LD_INT 1
64821: PPUSH
64822: CALL_OW 268
64826: STR
64827: PUSH
64828: LD_STRING , 
64830: STR
64831: PUSH
64832: LD_VAR 0 3
64836: PPUSH
64837: LD_INT 2
64839: PPUSH
64840: CALL_OW 268
64844: STR
64845: PUSH
64846: LD_STRING ],
64848: STR
64849: PPUSH
64850: CALL_OW 561
// end ;
64854: GO 64748
64856: POP
64857: POP
// AddToLog ( ]; ) ;
64858: LD_STRING ];
64860: PPUSH
64861: CALL_OW 561
// end ;
64865: LD_VAR 0 2
64869: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64870: LD_INT 0
64872: PPUSH
64873: PPUSH
64874: PPUSH
64875: PPUSH
64876: PPUSH
// if not area or not rate or not max then
64877: LD_VAR 0 1
64881: NOT
64882: PUSH
64883: LD_VAR 0 2
64887: NOT
64888: OR
64889: PUSH
64890: LD_VAR 0 4
64894: NOT
64895: OR
64896: IFFALSE 64900
// exit ;
64898: GO 65089
// while 1 do
64900: LD_INT 1
64902: IFFALSE 65089
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64904: LD_ADDR_VAR 0 9
64908: PUSH
64909: LD_VAR 0 1
64913: PPUSH
64914: LD_INT 1
64916: PPUSH
64917: CALL_OW 287
64921: PUSH
64922: LD_INT 10
64924: MUL
64925: ST_TO_ADDR
// r := rate / 10 ;
64926: LD_ADDR_VAR 0 7
64930: PUSH
64931: LD_VAR 0 2
64935: PUSH
64936: LD_INT 10
64938: DIVREAL
64939: ST_TO_ADDR
// time := 1 1$00 ;
64940: LD_ADDR_VAR 0 8
64944: PUSH
64945: LD_INT 2100
64947: ST_TO_ADDR
// if amount < min then
64948: LD_VAR 0 9
64952: PUSH
64953: LD_VAR 0 3
64957: LESS
64958: IFFALSE 64976
// r := r * 2 else
64960: LD_ADDR_VAR 0 7
64964: PUSH
64965: LD_VAR 0 7
64969: PUSH
64970: LD_INT 2
64972: MUL
64973: ST_TO_ADDR
64974: GO 65002
// if amount > max then
64976: LD_VAR 0 9
64980: PUSH
64981: LD_VAR 0 4
64985: GREATER
64986: IFFALSE 65002
// r := r / 2 ;
64988: LD_ADDR_VAR 0 7
64992: PUSH
64993: LD_VAR 0 7
64997: PUSH
64998: LD_INT 2
65000: DIVREAL
65001: ST_TO_ADDR
// time := time / r ;
65002: LD_ADDR_VAR 0 8
65006: PUSH
65007: LD_VAR 0 8
65011: PUSH
65012: LD_VAR 0 7
65016: DIVREAL
65017: ST_TO_ADDR
// if time < 0 then
65018: LD_VAR 0 8
65022: PUSH
65023: LD_INT 0
65025: LESS
65026: IFFALSE 65043
// time := time * - 1 ;
65028: LD_ADDR_VAR 0 8
65032: PUSH
65033: LD_VAR 0 8
65037: PUSH
65038: LD_INT 1
65040: NEG
65041: MUL
65042: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65043: LD_VAR 0 8
65047: PUSH
65048: LD_INT 35
65050: PPUSH
65051: LD_INT 875
65053: PPUSH
65054: CALL_OW 12
65058: PLUS
65059: PPUSH
65060: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65064: LD_INT 1
65066: PPUSH
65067: LD_INT 5
65069: PPUSH
65070: CALL_OW 12
65074: PPUSH
65075: LD_VAR 0 1
65079: PPUSH
65080: LD_INT 1
65082: PPUSH
65083: CALL_OW 55
// end ;
65087: GO 64900
// end ;
65089: LD_VAR 0 5
65093: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65094: LD_INT 0
65096: PPUSH
65097: PPUSH
65098: PPUSH
65099: PPUSH
65100: PPUSH
65101: PPUSH
65102: PPUSH
65103: PPUSH
// if not turrets or not factories then
65104: LD_VAR 0 1
65108: NOT
65109: PUSH
65110: LD_VAR 0 2
65114: NOT
65115: OR
65116: IFFALSE 65120
// exit ;
65118: GO 65427
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65120: LD_ADDR_VAR 0 10
65124: PUSH
65125: LD_INT 5
65127: PUSH
65128: LD_INT 6
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 2
65137: PUSH
65138: LD_INT 4
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 3
65147: PUSH
65148: LD_INT 5
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 24
65162: PUSH
65163: LD_INT 25
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 23
65172: PUSH
65173: LD_INT 27
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 42
65186: PUSH
65187: LD_INT 43
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 44
65196: PUSH
65197: LD_INT 46
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 45
65206: PUSH
65207: LD_INT 47
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: LIST
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: LIST
65223: ST_TO_ADDR
// result := [ ] ;
65224: LD_ADDR_VAR 0 3
65228: PUSH
65229: EMPTY
65230: ST_TO_ADDR
// for i in turrets do
65231: LD_ADDR_VAR 0 4
65235: PUSH
65236: LD_VAR 0 1
65240: PUSH
65241: FOR_IN
65242: IFFALSE 65425
// begin nat := GetNation ( i ) ;
65244: LD_ADDR_VAR 0 7
65248: PUSH
65249: LD_VAR 0 4
65253: PPUSH
65254: CALL_OW 248
65258: ST_TO_ADDR
// weapon := 0 ;
65259: LD_ADDR_VAR 0 8
65263: PUSH
65264: LD_INT 0
65266: ST_TO_ADDR
// if not nat then
65267: LD_VAR 0 7
65271: NOT
65272: IFFALSE 65276
// continue ;
65274: GO 65241
// for j in list [ nat ] do
65276: LD_ADDR_VAR 0 5
65280: PUSH
65281: LD_VAR 0 10
65285: PUSH
65286: LD_VAR 0 7
65290: ARRAY
65291: PUSH
65292: FOR_IN
65293: IFFALSE 65334
// if GetBWeapon ( i ) = j [ 1 ] then
65295: LD_VAR 0 4
65299: PPUSH
65300: CALL_OW 269
65304: PUSH
65305: LD_VAR 0 5
65309: PUSH
65310: LD_INT 1
65312: ARRAY
65313: EQUAL
65314: IFFALSE 65332
// begin weapon := j [ 2 ] ;
65316: LD_ADDR_VAR 0 8
65320: PUSH
65321: LD_VAR 0 5
65325: PUSH
65326: LD_INT 2
65328: ARRAY
65329: ST_TO_ADDR
// break ;
65330: GO 65334
// end ;
65332: GO 65292
65334: POP
65335: POP
// if not weapon then
65336: LD_VAR 0 8
65340: NOT
65341: IFFALSE 65345
// continue ;
65343: GO 65241
// for k in factories do
65345: LD_ADDR_VAR 0 6
65349: PUSH
65350: LD_VAR 0 2
65354: PUSH
65355: FOR_IN
65356: IFFALSE 65421
// begin weapons := AvailableWeaponList ( k ) ;
65358: LD_ADDR_VAR 0 9
65362: PUSH
65363: LD_VAR 0 6
65367: PPUSH
65368: CALL_OW 478
65372: ST_TO_ADDR
// if not weapons then
65373: LD_VAR 0 9
65377: NOT
65378: IFFALSE 65382
// continue ;
65380: GO 65355
// if weapon in weapons then
65382: LD_VAR 0 8
65386: PUSH
65387: LD_VAR 0 9
65391: IN
65392: IFFALSE 65419
// begin result := [ i , weapon ] ;
65394: LD_ADDR_VAR 0 3
65398: PUSH
65399: LD_VAR 0 4
65403: PUSH
65404: LD_VAR 0 8
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: ST_TO_ADDR
// exit ;
65413: POP
65414: POP
65415: POP
65416: POP
65417: GO 65427
// end ; end ;
65419: GO 65355
65421: POP
65422: POP
// end ;
65423: GO 65241
65425: POP
65426: POP
// end ;
65427: LD_VAR 0 3
65431: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65432: LD_INT 0
65434: PPUSH
// if not side or side > 8 then
65435: LD_VAR 0 3
65439: NOT
65440: PUSH
65441: LD_VAR 0 3
65445: PUSH
65446: LD_INT 8
65448: GREATER
65449: OR
65450: IFFALSE 65454
// exit ;
65452: GO 65513
// if not range then
65454: LD_VAR 0 4
65458: NOT
65459: IFFALSE 65470
// range := - 12 ;
65461: LD_ADDR_VAR 0 4
65465: PUSH
65466: LD_INT 12
65468: NEG
65469: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65470: LD_VAR 0 1
65474: PPUSH
65475: LD_VAR 0 2
65479: PPUSH
65480: LD_VAR 0 3
65484: PPUSH
65485: LD_VAR 0 4
65489: PPUSH
65490: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65494: LD_VAR 0 1
65498: PPUSH
65499: LD_VAR 0 2
65503: PPUSH
65504: LD_VAR 0 3
65508: PPUSH
65509: CALL_OW 331
// end ;
65513: LD_VAR 0 5
65517: RET
// export function Video ( mode ) ; begin
65518: LD_INT 0
65520: PPUSH
// ingame_video = mode ;
65521: LD_ADDR_OWVAR 52
65525: PUSH
65526: LD_VAR 0 1
65530: ST_TO_ADDR
// interface_hidden = mode ;
65531: LD_ADDR_OWVAR 54
65535: PUSH
65536: LD_VAR 0 1
65540: ST_TO_ADDR
// end ;
65541: LD_VAR 0 2
65545: RET
// export function Join ( array , element ) ; begin
65546: LD_INT 0
65548: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65549: LD_ADDR_VAR 0 3
65553: PUSH
65554: LD_VAR 0 1
65558: PPUSH
65559: LD_VAR 0 1
65563: PUSH
65564: LD_INT 1
65566: PLUS
65567: PPUSH
65568: LD_VAR 0 2
65572: PPUSH
65573: CALL_OW 1
65577: ST_TO_ADDR
// end ;
65578: LD_VAR 0 3
65582: RET
// export function JoinUnion ( array , element ) ; begin
65583: LD_INT 0
65585: PPUSH
// result := array union element ;
65586: LD_ADDR_VAR 0 3
65590: PUSH
65591: LD_VAR 0 1
65595: PUSH
65596: LD_VAR 0 2
65600: UNION
65601: ST_TO_ADDR
// end ;
65602: LD_VAR 0 3
65606: RET
// export function GetBehemoths ( side ) ; begin
65607: LD_INT 0
65609: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65610: LD_ADDR_VAR 0 2
65614: PUSH
65615: LD_INT 22
65617: PUSH
65618: LD_VAR 0 1
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 31
65629: PUSH
65630: LD_INT 25
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PPUSH
65641: CALL_OW 69
65645: ST_TO_ADDR
// end ;
65646: LD_VAR 0 2
65650: RET
// export function Shuffle ( array ) ; var i , index ; begin
65651: LD_INT 0
65653: PPUSH
65654: PPUSH
65655: PPUSH
// result := [ ] ;
65656: LD_ADDR_VAR 0 2
65660: PUSH
65661: EMPTY
65662: ST_TO_ADDR
// if not array then
65663: LD_VAR 0 1
65667: NOT
65668: IFFALSE 65672
// exit ;
65670: GO 65771
// Randomize ;
65672: CALL_OW 10
// for i = array downto 1 do
65676: LD_ADDR_VAR 0 3
65680: PUSH
65681: DOUBLE
65682: LD_VAR 0 1
65686: INC
65687: ST_TO_ADDR
65688: LD_INT 1
65690: PUSH
65691: FOR_DOWNTO
65692: IFFALSE 65769
// begin index := rand ( 1 , array ) ;
65694: LD_ADDR_VAR 0 4
65698: PUSH
65699: LD_INT 1
65701: PPUSH
65702: LD_VAR 0 1
65706: PPUSH
65707: CALL_OW 12
65711: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65712: LD_ADDR_VAR 0 2
65716: PUSH
65717: LD_VAR 0 2
65721: PPUSH
65722: LD_VAR 0 2
65726: PUSH
65727: LD_INT 1
65729: PLUS
65730: PPUSH
65731: LD_VAR 0 1
65735: PUSH
65736: LD_VAR 0 4
65740: ARRAY
65741: PPUSH
65742: CALL_OW 2
65746: ST_TO_ADDR
// array := Delete ( array , index ) ;
65747: LD_ADDR_VAR 0 1
65751: PUSH
65752: LD_VAR 0 1
65756: PPUSH
65757: LD_VAR 0 4
65761: PPUSH
65762: CALL_OW 3
65766: ST_TO_ADDR
// end ;
65767: GO 65691
65769: POP
65770: POP
// end ;
65771: LD_VAR 0 2
65775: RET
// export function GetBaseMaterials ( base ) ; begin
65776: LD_INT 0
65778: PPUSH
// result := [ 0 , 0 , 0 ] ;
65779: LD_ADDR_VAR 0 2
65783: PUSH
65784: LD_INT 0
65786: PUSH
65787: LD_INT 0
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: LIST
65797: ST_TO_ADDR
// if not base then
65798: LD_VAR 0 1
65802: NOT
65803: IFFALSE 65807
// exit ;
65805: GO 65856
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65807: LD_ADDR_VAR 0 2
65811: PUSH
65812: LD_VAR 0 1
65816: PPUSH
65817: LD_INT 1
65819: PPUSH
65820: CALL_OW 275
65824: PUSH
65825: LD_VAR 0 1
65829: PPUSH
65830: LD_INT 2
65832: PPUSH
65833: CALL_OW 275
65837: PUSH
65838: LD_VAR 0 1
65842: PPUSH
65843: LD_INT 3
65845: PPUSH
65846: CALL_OW 275
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: LIST
65855: ST_TO_ADDR
// end ;
65856: LD_VAR 0 2
65860: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65861: LD_INT 0
65863: PPUSH
65864: PPUSH
// result := array ;
65865: LD_ADDR_VAR 0 3
65869: PUSH
65870: LD_VAR 0 1
65874: ST_TO_ADDR
// if size >= result then
65875: LD_VAR 0 2
65879: PUSH
65880: LD_VAR 0 3
65884: GREATEREQUAL
65885: IFFALSE 65889
// exit ;
65887: GO 65939
// if size then
65889: LD_VAR 0 2
65893: IFFALSE 65939
// for i := array downto size do
65895: LD_ADDR_VAR 0 4
65899: PUSH
65900: DOUBLE
65901: LD_VAR 0 1
65905: INC
65906: ST_TO_ADDR
65907: LD_VAR 0 2
65911: PUSH
65912: FOR_DOWNTO
65913: IFFALSE 65937
// result := Delete ( result , result ) ;
65915: LD_ADDR_VAR 0 3
65919: PUSH
65920: LD_VAR 0 3
65924: PPUSH
65925: LD_VAR 0 3
65929: PPUSH
65930: CALL_OW 3
65934: ST_TO_ADDR
65935: GO 65912
65937: POP
65938: POP
// end ;
65939: LD_VAR 0 3
65943: RET
// export function ComExit ( unit ) ; var tmp ; begin
65944: LD_INT 0
65946: PPUSH
65947: PPUSH
// if not IsInUnit ( unit ) then
65948: LD_VAR 0 1
65952: PPUSH
65953: CALL_OW 310
65957: NOT
65958: IFFALSE 65962
// exit ;
65960: GO 66022
// tmp := IsInUnit ( unit ) ;
65962: LD_ADDR_VAR 0 3
65966: PUSH
65967: LD_VAR 0 1
65971: PPUSH
65972: CALL_OW 310
65976: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65977: LD_VAR 0 3
65981: PPUSH
65982: CALL_OW 247
65986: PUSH
65987: LD_INT 2
65989: EQUAL
65990: IFFALSE 66003
// ComExitVehicle ( unit ) else
65992: LD_VAR 0 1
65996: PPUSH
65997: CALL_OW 121
66001: GO 66012
// ComExitBuilding ( unit ) ;
66003: LD_VAR 0 1
66007: PPUSH
66008: CALL_OW 122
// result := tmp ;
66012: LD_ADDR_VAR 0 2
66016: PUSH
66017: LD_VAR 0 3
66021: ST_TO_ADDR
// end ;
66022: LD_VAR 0 2
66026: RET
// export function ComExitAll ( units ) ; var i ; begin
66027: LD_INT 0
66029: PPUSH
66030: PPUSH
// if not units then
66031: LD_VAR 0 1
66035: NOT
66036: IFFALSE 66040
// exit ;
66038: GO 66066
// for i in units do
66040: LD_ADDR_VAR 0 3
66044: PUSH
66045: LD_VAR 0 1
66049: PUSH
66050: FOR_IN
66051: IFFALSE 66064
// ComExit ( i ) ;
66053: LD_VAR 0 3
66057: PPUSH
66058: CALL 65944 0 1
66062: GO 66050
66064: POP
66065: POP
// end ;
66066: LD_VAR 0 2
66070: RET
// export function ResetHc ; begin
66071: LD_INT 0
66073: PPUSH
// InitHc ;
66074: CALL_OW 19
// hc_importance := 0 ;
66078: LD_ADDR_OWVAR 32
66082: PUSH
66083: LD_INT 0
66085: ST_TO_ADDR
// end ;
66086: LD_VAR 0 1
66090: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66091: LD_INT 0
66093: PPUSH
66094: PPUSH
66095: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66096: LD_ADDR_VAR 0 6
66100: PUSH
66101: LD_VAR 0 1
66105: PUSH
66106: LD_VAR 0 3
66110: PLUS
66111: PUSH
66112: LD_INT 2
66114: DIV
66115: ST_TO_ADDR
// if _x < 0 then
66116: LD_VAR 0 6
66120: PUSH
66121: LD_INT 0
66123: LESS
66124: IFFALSE 66141
// _x := _x * - 1 ;
66126: LD_ADDR_VAR 0 6
66130: PUSH
66131: LD_VAR 0 6
66135: PUSH
66136: LD_INT 1
66138: NEG
66139: MUL
66140: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66141: LD_ADDR_VAR 0 7
66145: PUSH
66146: LD_VAR 0 2
66150: PUSH
66151: LD_VAR 0 4
66155: PLUS
66156: PUSH
66157: LD_INT 2
66159: DIV
66160: ST_TO_ADDR
// if _y < 0 then
66161: LD_VAR 0 7
66165: PUSH
66166: LD_INT 0
66168: LESS
66169: IFFALSE 66186
// _y := _y * - 1 ;
66171: LD_ADDR_VAR 0 7
66175: PUSH
66176: LD_VAR 0 7
66180: PUSH
66181: LD_INT 1
66183: NEG
66184: MUL
66185: ST_TO_ADDR
// result := [ _x , _y ] ;
66186: LD_ADDR_VAR 0 5
66190: PUSH
66191: LD_VAR 0 6
66195: PUSH
66196: LD_VAR 0 7
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: ST_TO_ADDR
// end ;
66205: LD_VAR 0 5
66209: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66210: LD_INT 0
66212: PPUSH
66213: PPUSH
66214: PPUSH
66215: PPUSH
// task := GetTaskList ( unit ) ;
66216: LD_ADDR_VAR 0 7
66220: PUSH
66221: LD_VAR 0 1
66225: PPUSH
66226: CALL_OW 437
66230: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66231: LD_VAR 0 7
66235: NOT
66236: PUSH
66237: LD_VAR 0 1
66241: PPUSH
66242: LD_VAR 0 2
66246: PPUSH
66247: CALL_OW 308
66251: NOT
66252: AND
66253: IFFALSE 66257
// exit ;
66255: GO 66375
// if IsInArea ( unit , area ) then
66257: LD_VAR 0 1
66261: PPUSH
66262: LD_VAR 0 2
66266: PPUSH
66267: CALL_OW 308
66271: IFFALSE 66289
// begin ComMoveToArea ( unit , goAway ) ;
66273: LD_VAR 0 1
66277: PPUSH
66278: LD_VAR 0 3
66282: PPUSH
66283: CALL_OW 113
// exit ;
66287: GO 66375
// end ; if task [ 1 ] [ 1 ] <> M then
66289: LD_VAR 0 7
66293: PUSH
66294: LD_INT 1
66296: ARRAY
66297: PUSH
66298: LD_INT 1
66300: ARRAY
66301: PUSH
66302: LD_STRING M
66304: NONEQUAL
66305: IFFALSE 66309
// exit ;
66307: GO 66375
// x := task [ 1 ] [ 2 ] ;
66309: LD_ADDR_VAR 0 5
66313: PUSH
66314: LD_VAR 0 7
66318: PUSH
66319: LD_INT 1
66321: ARRAY
66322: PUSH
66323: LD_INT 2
66325: ARRAY
66326: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66327: LD_ADDR_VAR 0 6
66331: PUSH
66332: LD_VAR 0 7
66336: PUSH
66337: LD_INT 1
66339: ARRAY
66340: PUSH
66341: LD_INT 3
66343: ARRAY
66344: ST_TO_ADDR
// if InArea ( x , y , area ) then
66345: LD_VAR 0 5
66349: PPUSH
66350: LD_VAR 0 6
66354: PPUSH
66355: LD_VAR 0 2
66359: PPUSH
66360: CALL_OW 309
66364: IFFALSE 66375
// ComStop ( unit ) ;
66366: LD_VAR 0 1
66370: PPUSH
66371: CALL_OW 141
// end ;
66375: LD_VAR 0 4
66379: RET
// export function Abs ( value ) ; begin
66380: LD_INT 0
66382: PPUSH
// result := value ;
66383: LD_ADDR_VAR 0 2
66387: PUSH
66388: LD_VAR 0 1
66392: ST_TO_ADDR
// if value < 0 then
66393: LD_VAR 0 1
66397: PUSH
66398: LD_INT 0
66400: LESS
66401: IFFALSE 66418
// result := value * - 1 ;
66403: LD_ADDR_VAR 0 2
66407: PUSH
66408: LD_VAR 0 1
66412: PUSH
66413: LD_INT 1
66415: NEG
66416: MUL
66417: ST_TO_ADDR
// end ;
66418: LD_VAR 0 2
66422: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66423: LD_INT 0
66425: PPUSH
66426: PPUSH
66427: PPUSH
66428: PPUSH
66429: PPUSH
66430: PPUSH
66431: PPUSH
66432: PPUSH
// if not unit or not building then
66433: LD_VAR 0 1
66437: NOT
66438: PUSH
66439: LD_VAR 0 2
66443: NOT
66444: OR
66445: IFFALSE 66449
// exit ;
66447: GO 66675
// x := GetX ( building ) ;
66449: LD_ADDR_VAR 0 4
66453: PUSH
66454: LD_VAR 0 2
66458: PPUSH
66459: CALL_OW 250
66463: ST_TO_ADDR
// y := GetY ( building ) ;
66464: LD_ADDR_VAR 0 6
66468: PUSH
66469: LD_VAR 0 2
66473: PPUSH
66474: CALL_OW 251
66478: ST_TO_ADDR
// d := GetDir ( building ) ;
66479: LD_ADDR_VAR 0 8
66483: PUSH
66484: LD_VAR 0 2
66488: PPUSH
66489: CALL_OW 254
66493: ST_TO_ADDR
// r := 4 ;
66494: LD_ADDR_VAR 0 9
66498: PUSH
66499: LD_INT 4
66501: ST_TO_ADDR
// for i := 1 to 5 do
66502: LD_ADDR_VAR 0 10
66506: PUSH
66507: DOUBLE
66508: LD_INT 1
66510: DEC
66511: ST_TO_ADDR
66512: LD_INT 5
66514: PUSH
66515: FOR_TO
66516: IFFALSE 66673
// begin _x := ShiftX ( x , d , r + i ) ;
66518: LD_ADDR_VAR 0 5
66522: PUSH
66523: LD_VAR 0 4
66527: PPUSH
66528: LD_VAR 0 8
66532: PPUSH
66533: LD_VAR 0 9
66537: PUSH
66538: LD_VAR 0 10
66542: PLUS
66543: PPUSH
66544: CALL_OW 272
66548: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66549: LD_ADDR_VAR 0 7
66553: PUSH
66554: LD_VAR 0 6
66558: PPUSH
66559: LD_VAR 0 8
66563: PPUSH
66564: LD_VAR 0 9
66568: PUSH
66569: LD_VAR 0 10
66573: PLUS
66574: PPUSH
66575: CALL_OW 273
66579: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66580: LD_VAR 0 5
66584: PPUSH
66585: LD_VAR 0 7
66589: PPUSH
66590: CALL_OW 488
66594: PUSH
66595: LD_VAR 0 5
66599: PPUSH
66600: LD_VAR 0 7
66604: PPUSH
66605: CALL_OW 428
66609: PPUSH
66610: CALL_OW 247
66614: PUSH
66615: LD_INT 3
66617: PUSH
66618: LD_INT 2
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: IN
66625: NOT
66626: AND
66627: IFFALSE 66671
// begin ComMoveXY ( unit , _x , _y ) ;
66629: LD_VAR 0 1
66633: PPUSH
66634: LD_VAR 0 5
66638: PPUSH
66639: LD_VAR 0 7
66643: PPUSH
66644: CALL_OW 111
// result := [ _x , _y ] ;
66648: LD_ADDR_VAR 0 3
66652: PUSH
66653: LD_VAR 0 5
66657: PUSH
66658: LD_VAR 0 7
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: ST_TO_ADDR
// exit ;
66667: POP
66668: POP
66669: GO 66675
// end ; end ;
66671: GO 66515
66673: POP
66674: POP
// end ;
66675: LD_VAR 0 3
66679: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66680: LD_INT 0
66682: PPUSH
66683: PPUSH
66684: PPUSH
// result := 0 ;
66685: LD_ADDR_VAR 0 3
66689: PUSH
66690: LD_INT 0
66692: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66693: LD_VAR 0 1
66697: PUSH
66698: LD_INT 0
66700: LESS
66701: PUSH
66702: LD_VAR 0 1
66706: PUSH
66707: LD_INT 8
66709: GREATER
66710: OR
66711: PUSH
66712: LD_VAR 0 2
66716: PUSH
66717: LD_INT 0
66719: LESS
66720: OR
66721: PUSH
66722: LD_VAR 0 2
66726: PUSH
66727: LD_INT 8
66729: GREATER
66730: OR
66731: IFFALSE 66735
// exit ;
66733: GO 66810
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66735: LD_ADDR_VAR 0 4
66739: PUSH
66740: LD_INT 22
66742: PUSH
66743: LD_VAR 0 2
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PPUSH
66752: CALL_OW 69
66756: PUSH
66757: FOR_IN
66758: IFFALSE 66808
// begin un := UnitShoot ( i ) ;
66760: LD_ADDR_VAR 0 5
66764: PUSH
66765: LD_VAR 0 4
66769: PPUSH
66770: CALL_OW 504
66774: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66775: LD_VAR 0 5
66779: PPUSH
66780: CALL_OW 255
66784: PUSH
66785: LD_VAR 0 1
66789: EQUAL
66790: IFFALSE 66806
// begin result := un ;
66792: LD_ADDR_VAR 0 3
66796: PUSH
66797: LD_VAR 0 5
66801: ST_TO_ADDR
// exit ;
66802: POP
66803: POP
66804: GO 66810
// end ; end ;
66806: GO 66757
66808: POP
66809: POP
// end ;
66810: LD_VAR 0 3
66814: RET
// export function GetCargoBay ( units ) ; begin
66815: LD_INT 0
66817: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66818: LD_ADDR_VAR 0 2
66822: PUSH
66823: LD_VAR 0 1
66827: PPUSH
66828: LD_INT 2
66830: PUSH
66831: LD_INT 34
66833: PUSH
66834: LD_INT 12
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 34
66843: PUSH
66844: LD_INT 51
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 34
66853: PUSH
66854: LD_INT 32
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 34
66863: PUSH
66864: LD_INT 89
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: PPUSH
66878: CALL_OW 72
66882: ST_TO_ADDR
// end ;
66883: LD_VAR 0 2
66887: RET
// export function Negate ( value ) ; begin
66888: LD_INT 0
66890: PPUSH
// result := not value ;
66891: LD_ADDR_VAR 0 2
66895: PUSH
66896: LD_VAR 0 1
66900: NOT
66901: ST_TO_ADDR
// end ;
66902: LD_VAR 0 2
66906: RET
// export function Inc ( value ) ; begin
66907: LD_INT 0
66909: PPUSH
// result := value + 1 ;
66910: LD_ADDR_VAR 0 2
66914: PUSH
66915: LD_VAR 0 1
66919: PUSH
66920: LD_INT 1
66922: PLUS
66923: ST_TO_ADDR
// end ;
66924: LD_VAR 0 2
66928: RET
// export function Dec ( value ) ; begin
66929: LD_INT 0
66931: PPUSH
// result := value - 1 ;
66932: LD_ADDR_VAR 0 2
66936: PUSH
66937: LD_VAR 0 1
66941: PUSH
66942: LD_INT 1
66944: MINUS
66945: ST_TO_ADDR
// end ;
66946: LD_VAR 0 2
66950: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66951: LD_INT 0
66953: PPUSH
66954: PPUSH
66955: PPUSH
66956: PPUSH
66957: PPUSH
66958: PPUSH
66959: PPUSH
66960: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66961: LD_VAR 0 1
66965: PPUSH
66966: LD_VAR 0 2
66970: PPUSH
66971: CALL_OW 488
66975: NOT
66976: PUSH
66977: LD_VAR 0 3
66981: PPUSH
66982: LD_VAR 0 4
66986: PPUSH
66987: CALL_OW 488
66991: NOT
66992: OR
66993: IFFALSE 67006
// begin result := - 1 ;
66995: LD_ADDR_VAR 0 5
66999: PUSH
67000: LD_INT 1
67002: NEG
67003: ST_TO_ADDR
// exit ;
67004: GO 67241
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67006: LD_ADDR_VAR 0 12
67010: PUSH
67011: LD_VAR 0 1
67015: PPUSH
67016: LD_VAR 0 2
67020: PPUSH
67021: LD_VAR 0 3
67025: PPUSH
67026: LD_VAR 0 4
67030: PPUSH
67031: CALL 66091 0 4
67035: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67036: LD_ADDR_VAR 0 11
67040: PUSH
67041: LD_VAR 0 1
67045: PPUSH
67046: LD_VAR 0 2
67050: PPUSH
67051: LD_VAR 0 12
67055: PUSH
67056: LD_INT 1
67058: ARRAY
67059: PPUSH
67060: LD_VAR 0 12
67064: PUSH
67065: LD_INT 2
67067: ARRAY
67068: PPUSH
67069: CALL_OW 298
67073: ST_TO_ADDR
// distance := 9999 ;
67074: LD_ADDR_VAR 0 10
67078: PUSH
67079: LD_INT 9999
67081: ST_TO_ADDR
// for i := 0 to 5 do
67082: LD_ADDR_VAR 0 6
67086: PUSH
67087: DOUBLE
67088: LD_INT 0
67090: DEC
67091: ST_TO_ADDR
67092: LD_INT 5
67094: PUSH
67095: FOR_TO
67096: IFFALSE 67239
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67098: LD_ADDR_VAR 0 7
67102: PUSH
67103: LD_VAR 0 1
67107: PPUSH
67108: LD_VAR 0 6
67112: PPUSH
67113: LD_VAR 0 11
67117: PPUSH
67118: CALL_OW 272
67122: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67123: LD_ADDR_VAR 0 8
67127: PUSH
67128: LD_VAR 0 2
67132: PPUSH
67133: LD_VAR 0 6
67137: PPUSH
67138: LD_VAR 0 11
67142: PPUSH
67143: CALL_OW 273
67147: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67148: LD_VAR 0 7
67152: PPUSH
67153: LD_VAR 0 8
67157: PPUSH
67158: CALL_OW 488
67162: NOT
67163: IFFALSE 67167
// continue ;
67165: GO 67095
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67167: LD_ADDR_VAR 0 9
67171: PUSH
67172: LD_VAR 0 12
67176: PUSH
67177: LD_INT 1
67179: ARRAY
67180: PPUSH
67181: LD_VAR 0 12
67185: PUSH
67186: LD_INT 2
67188: ARRAY
67189: PPUSH
67190: LD_VAR 0 7
67194: PPUSH
67195: LD_VAR 0 8
67199: PPUSH
67200: CALL_OW 298
67204: ST_TO_ADDR
// if tmp < distance then
67205: LD_VAR 0 9
67209: PUSH
67210: LD_VAR 0 10
67214: LESS
67215: IFFALSE 67237
// begin result := i ;
67217: LD_ADDR_VAR 0 5
67221: PUSH
67222: LD_VAR 0 6
67226: ST_TO_ADDR
// distance := tmp ;
67227: LD_ADDR_VAR 0 10
67231: PUSH
67232: LD_VAR 0 9
67236: ST_TO_ADDR
// end ; end ;
67237: GO 67095
67239: POP
67240: POP
// end ;
67241: LD_VAR 0 5
67245: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67246: LD_INT 0
67248: PPUSH
67249: PPUSH
// if not driver or not IsInUnit ( driver ) then
67250: LD_VAR 0 1
67254: NOT
67255: PUSH
67256: LD_VAR 0 1
67260: PPUSH
67261: CALL_OW 310
67265: NOT
67266: OR
67267: IFFALSE 67271
// exit ;
67269: GO 67361
// vehicle := IsInUnit ( driver ) ;
67271: LD_ADDR_VAR 0 3
67275: PUSH
67276: LD_VAR 0 1
67280: PPUSH
67281: CALL_OW 310
67285: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67286: LD_VAR 0 1
67290: PPUSH
67291: LD_STRING \
67293: PUSH
67294: LD_INT 0
67296: PUSH
67297: LD_INT 0
67299: PUSH
67300: LD_INT 0
67302: PUSH
67303: LD_INT 0
67305: PUSH
67306: LD_INT 0
67308: PUSH
67309: LD_INT 0
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: PUSH
67321: LD_STRING E
67323: PUSH
67324: LD_INT 0
67326: PUSH
67327: LD_INT 0
67329: PUSH
67330: LD_VAR 0 3
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: LD_INT 0
67340: PUSH
67341: LD_INT 0
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PPUSH
67357: CALL_OW 446
// end ;
67361: LD_VAR 0 2
67365: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67366: LD_INT 0
67368: PPUSH
67369: PPUSH
// if not driver or not IsInUnit ( driver ) then
67370: LD_VAR 0 1
67374: NOT
67375: PUSH
67376: LD_VAR 0 1
67380: PPUSH
67381: CALL_OW 310
67385: NOT
67386: OR
67387: IFFALSE 67391
// exit ;
67389: GO 67481
// vehicle := IsInUnit ( driver ) ;
67391: LD_ADDR_VAR 0 3
67395: PUSH
67396: LD_VAR 0 1
67400: PPUSH
67401: CALL_OW 310
67405: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67406: LD_VAR 0 1
67410: PPUSH
67411: LD_STRING \
67413: PUSH
67414: LD_INT 0
67416: PUSH
67417: LD_INT 0
67419: PUSH
67420: LD_INT 0
67422: PUSH
67423: LD_INT 0
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: LD_INT 0
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: PUSH
67441: LD_STRING E
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: LD_INT 0
67449: PUSH
67450: LD_VAR 0 3
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: LD_INT 0
67460: PUSH
67461: LD_INT 0
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PPUSH
67477: CALL_OW 447
// end ;
67481: LD_VAR 0 2
67485: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67486: LD_INT 0
67488: PPUSH
67489: PPUSH
67490: PPUSH
// tmp := [ ] ;
67491: LD_ADDR_VAR 0 5
67495: PUSH
67496: EMPTY
67497: ST_TO_ADDR
// for i in units do
67498: LD_ADDR_VAR 0 4
67502: PUSH
67503: LD_VAR 0 1
67507: PUSH
67508: FOR_IN
67509: IFFALSE 67547
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67511: LD_ADDR_VAR 0 5
67515: PUSH
67516: LD_VAR 0 5
67520: PPUSH
67521: LD_VAR 0 5
67525: PUSH
67526: LD_INT 1
67528: PLUS
67529: PPUSH
67530: LD_VAR 0 4
67534: PPUSH
67535: CALL_OW 256
67539: PPUSH
67540: CALL_OW 2
67544: ST_TO_ADDR
67545: GO 67508
67547: POP
67548: POP
// if not tmp then
67549: LD_VAR 0 5
67553: NOT
67554: IFFALSE 67558
// exit ;
67556: GO 67606
// if asc then
67558: LD_VAR 0 2
67562: IFFALSE 67586
// result := SortListByListAsc ( units , tmp ) else
67564: LD_ADDR_VAR 0 3
67568: PUSH
67569: LD_VAR 0 1
67573: PPUSH
67574: LD_VAR 0 5
67578: PPUSH
67579: CALL_OW 76
67583: ST_TO_ADDR
67584: GO 67606
// result := SortListByListDesc ( units , tmp ) ;
67586: LD_ADDR_VAR 0 3
67590: PUSH
67591: LD_VAR 0 1
67595: PPUSH
67596: LD_VAR 0 5
67600: PPUSH
67601: CALL_OW 77
67605: ST_TO_ADDR
// end ;
67606: LD_VAR 0 3
67610: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67611: LD_INT 0
67613: PPUSH
67614: PPUSH
// task := GetTaskList ( mech ) ;
67615: LD_ADDR_VAR 0 4
67619: PUSH
67620: LD_VAR 0 1
67624: PPUSH
67625: CALL_OW 437
67629: ST_TO_ADDR
// if not task then
67630: LD_VAR 0 4
67634: NOT
67635: IFFALSE 67639
// exit ;
67637: GO 67681
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67639: LD_ADDR_VAR 0 3
67643: PUSH
67644: LD_VAR 0 4
67648: PUSH
67649: LD_INT 1
67651: ARRAY
67652: PUSH
67653: LD_INT 1
67655: ARRAY
67656: PUSH
67657: LD_STRING r
67659: EQUAL
67660: PUSH
67661: LD_VAR 0 4
67665: PUSH
67666: LD_INT 1
67668: ARRAY
67669: PUSH
67670: LD_INT 4
67672: ARRAY
67673: PUSH
67674: LD_VAR 0 2
67678: EQUAL
67679: AND
67680: ST_TO_ADDR
// end ;
67681: LD_VAR 0 3
67685: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67686: LD_INT 0
67688: PPUSH
// SetDir ( unit , d ) ;
67689: LD_VAR 0 1
67693: PPUSH
67694: LD_VAR 0 4
67698: PPUSH
67699: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67703: LD_VAR 0 1
67707: PPUSH
67708: LD_VAR 0 2
67712: PPUSH
67713: LD_VAR 0 3
67717: PPUSH
67718: LD_VAR 0 5
67722: PPUSH
67723: CALL_OW 48
// end ;
67727: LD_VAR 0 6
67731: RET
// export function ToNaturalNumber ( number ) ; begin
67732: LD_INT 0
67734: PPUSH
// result := number div 1 ;
67735: LD_ADDR_VAR 0 2
67739: PUSH
67740: LD_VAR 0 1
67744: PUSH
67745: LD_INT 1
67747: DIV
67748: ST_TO_ADDR
// if number < 0 then
67749: LD_VAR 0 1
67753: PUSH
67754: LD_INT 0
67756: LESS
67757: IFFALSE 67767
// result := 0 ;
67759: LD_ADDR_VAR 0 2
67763: PUSH
67764: LD_INT 0
67766: ST_TO_ADDR
// end ;
67767: LD_VAR 0 2
67771: RET
// export function SortByClass ( units , class ) ; var un ; begin
67772: LD_INT 0
67774: PPUSH
67775: PPUSH
// if not units or not class then
67776: LD_VAR 0 1
67780: NOT
67781: PUSH
67782: LD_VAR 0 2
67786: NOT
67787: OR
67788: IFFALSE 67792
// exit ;
67790: GO 67887
// result := [ ] ;
67792: LD_ADDR_VAR 0 3
67796: PUSH
67797: EMPTY
67798: ST_TO_ADDR
// for un in units do
67799: LD_ADDR_VAR 0 4
67803: PUSH
67804: LD_VAR 0 1
67808: PUSH
67809: FOR_IN
67810: IFFALSE 67885
// if GetClass ( un ) = class then
67812: LD_VAR 0 4
67816: PPUSH
67817: CALL_OW 257
67821: PUSH
67822: LD_VAR 0 2
67826: EQUAL
67827: IFFALSE 67854
// result := Insert ( result , 1 , un ) else
67829: LD_ADDR_VAR 0 3
67833: PUSH
67834: LD_VAR 0 3
67838: PPUSH
67839: LD_INT 1
67841: PPUSH
67842: LD_VAR 0 4
67846: PPUSH
67847: CALL_OW 2
67851: ST_TO_ADDR
67852: GO 67883
// result := Replace ( result , result + 1 , un ) ;
67854: LD_ADDR_VAR 0 3
67858: PUSH
67859: LD_VAR 0 3
67863: PPUSH
67864: LD_VAR 0 3
67868: PUSH
67869: LD_INT 1
67871: PLUS
67872: PPUSH
67873: LD_VAR 0 4
67877: PPUSH
67878: CALL_OW 1
67882: ST_TO_ADDR
67883: GO 67809
67885: POP
67886: POP
// end ;
67887: LD_VAR 0 3
67891: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67892: LD_INT 0
67894: PPUSH
67895: PPUSH
67896: PPUSH
67897: PPUSH
67898: PPUSH
67899: PPUSH
67900: PPUSH
// result := [ ] ;
67901: LD_ADDR_VAR 0 4
67905: PUSH
67906: EMPTY
67907: ST_TO_ADDR
// if x - r < 0 then
67908: LD_VAR 0 1
67912: PUSH
67913: LD_VAR 0 3
67917: MINUS
67918: PUSH
67919: LD_INT 0
67921: LESS
67922: IFFALSE 67934
// min_x := 0 else
67924: LD_ADDR_VAR 0 8
67928: PUSH
67929: LD_INT 0
67931: ST_TO_ADDR
67932: GO 67950
// min_x := x - r ;
67934: LD_ADDR_VAR 0 8
67938: PUSH
67939: LD_VAR 0 1
67943: PUSH
67944: LD_VAR 0 3
67948: MINUS
67949: ST_TO_ADDR
// if y - r < 0 then
67950: LD_VAR 0 2
67954: PUSH
67955: LD_VAR 0 3
67959: MINUS
67960: PUSH
67961: LD_INT 0
67963: LESS
67964: IFFALSE 67976
// min_y := 0 else
67966: LD_ADDR_VAR 0 7
67970: PUSH
67971: LD_INT 0
67973: ST_TO_ADDR
67974: GO 67992
// min_y := y - r ;
67976: LD_ADDR_VAR 0 7
67980: PUSH
67981: LD_VAR 0 2
67985: PUSH
67986: LD_VAR 0 3
67990: MINUS
67991: ST_TO_ADDR
// max_x := x + r ;
67992: LD_ADDR_VAR 0 9
67996: PUSH
67997: LD_VAR 0 1
68001: PUSH
68002: LD_VAR 0 3
68006: PLUS
68007: ST_TO_ADDR
// max_y := y + r ;
68008: LD_ADDR_VAR 0 10
68012: PUSH
68013: LD_VAR 0 2
68017: PUSH
68018: LD_VAR 0 3
68022: PLUS
68023: ST_TO_ADDR
// for _x = min_x to max_x do
68024: LD_ADDR_VAR 0 5
68028: PUSH
68029: DOUBLE
68030: LD_VAR 0 8
68034: DEC
68035: ST_TO_ADDR
68036: LD_VAR 0 9
68040: PUSH
68041: FOR_TO
68042: IFFALSE 68143
// for _y = min_y to max_y do
68044: LD_ADDR_VAR 0 6
68048: PUSH
68049: DOUBLE
68050: LD_VAR 0 7
68054: DEC
68055: ST_TO_ADDR
68056: LD_VAR 0 10
68060: PUSH
68061: FOR_TO
68062: IFFALSE 68139
// begin if not ValidHex ( _x , _y ) then
68064: LD_VAR 0 5
68068: PPUSH
68069: LD_VAR 0 6
68073: PPUSH
68074: CALL_OW 488
68078: NOT
68079: IFFALSE 68083
// continue ;
68081: GO 68061
// if GetResourceTypeXY ( _x , _y ) then
68083: LD_VAR 0 5
68087: PPUSH
68088: LD_VAR 0 6
68092: PPUSH
68093: CALL_OW 283
68097: IFFALSE 68137
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68099: LD_ADDR_VAR 0 4
68103: PUSH
68104: LD_VAR 0 4
68108: PPUSH
68109: LD_VAR 0 4
68113: PUSH
68114: LD_INT 1
68116: PLUS
68117: PPUSH
68118: LD_VAR 0 5
68122: PUSH
68123: LD_VAR 0 6
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PPUSH
68132: CALL_OW 1
68136: ST_TO_ADDR
// end ;
68137: GO 68061
68139: POP
68140: POP
68141: GO 68041
68143: POP
68144: POP
// end ;
68145: LD_VAR 0 4
68149: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68150: LD_INT 0
68152: PPUSH
68153: PPUSH
68154: PPUSH
68155: PPUSH
68156: PPUSH
68157: PPUSH
68158: PPUSH
68159: PPUSH
// if not units then
68160: LD_VAR 0 1
68164: NOT
68165: IFFALSE 68169
// exit ;
68167: GO 68693
// result := UnitFilter ( units , [ f_ok ] ) ;
68169: LD_ADDR_VAR 0 3
68173: PUSH
68174: LD_VAR 0 1
68178: PPUSH
68179: LD_INT 50
68181: PUSH
68182: EMPTY
68183: LIST
68184: PPUSH
68185: CALL_OW 72
68189: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68190: LD_ADDR_VAR 0 8
68194: PUSH
68195: LD_VAR 0 1
68199: PUSH
68200: LD_INT 1
68202: ARRAY
68203: PPUSH
68204: CALL_OW 255
68208: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68209: LD_ADDR_VAR 0 10
68213: PUSH
68214: LD_INT 29
68216: PUSH
68217: LD_INT 91
68219: PUSH
68220: LD_INT 49
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: LIST
68227: ST_TO_ADDR
// if not result then
68228: LD_VAR 0 3
68232: NOT
68233: IFFALSE 68237
// exit ;
68235: GO 68693
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68237: LD_ADDR_VAR 0 5
68241: PUSH
68242: LD_INT 81
68244: PUSH
68245: LD_VAR 0 8
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PPUSH
68254: CALL_OW 69
68258: ST_TO_ADDR
// for i in result do
68259: LD_ADDR_VAR 0 4
68263: PUSH
68264: LD_VAR 0 3
68268: PUSH
68269: FOR_IN
68270: IFFALSE 68691
// begin tag := GetTag ( i ) + 1 ;
68272: LD_ADDR_VAR 0 9
68276: PUSH
68277: LD_VAR 0 4
68281: PPUSH
68282: CALL_OW 110
68286: PUSH
68287: LD_INT 1
68289: PLUS
68290: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68291: LD_ADDR_VAR 0 7
68295: PUSH
68296: LD_VAR 0 4
68300: PPUSH
68301: CALL_OW 250
68305: PPUSH
68306: LD_VAR 0 4
68310: PPUSH
68311: CALL_OW 251
68315: PPUSH
68316: LD_INT 6
68318: PPUSH
68319: CALL 67892 0 3
68323: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68324: LD_VAR 0 4
68328: PPUSH
68329: CALL_OW 247
68333: PUSH
68334: LD_INT 2
68336: EQUAL
68337: PUSH
68338: LD_VAR 0 7
68342: AND
68343: PUSH
68344: LD_VAR 0 4
68348: PPUSH
68349: CALL_OW 264
68353: PUSH
68354: LD_VAR 0 10
68358: IN
68359: NOT
68360: AND
68361: IFFALSE 68400
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68363: LD_VAR 0 4
68367: PPUSH
68368: LD_VAR 0 7
68372: PUSH
68373: LD_INT 1
68375: ARRAY
68376: PUSH
68377: LD_INT 1
68379: ARRAY
68380: PPUSH
68381: LD_VAR 0 7
68385: PUSH
68386: LD_INT 1
68388: ARRAY
68389: PUSH
68390: LD_INT 2
68392: ARRAY
68393: PPUSH
68394: CALL_OW 116
68398: GO 68689
// if path > tag then
68400: LD_VAR 0 2
68404: PUSH
68405: LD_VAR 0 9
68409: GREATER
68410: IFFALSE 68618
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68412: LD_ADDR_VAR 0 6
68416: PUSH
68417: LD_VAR 0 5
68421: PPUSH
68422: LD_INT 91
68424: PUSH
68425: LD_VAR 0 4
68429: PUSH
68430: LD_INT 8
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: LIST
68437: PPUSH
68438: CALL_OW 72
68442: ST_TO_ADDR
// if nearEnemy then
68443: LD_VAR 0 6
68447: IFFALSE 68516
// begin if GetWeapon ( i ) = ru_time_lapser then
68449: LD_VAR 0 4
68453: PPUSH
68454: CALL_OW 264
68458: PUSH
68459: LD_INT 49
68461: EQUAL
68462: IFFALSE 68490
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68464: LD_VAR 0 4
68468: PPUSH
68469: LD_VAR 0 6
68473: PPUSH
68474: LD_VAR 0 4
68478: PPUSH
68479: CALL_OW 74
68483: PPUSH
68484: CALL_OW 112
68488: GO 68514
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68490: LD_VAR 0 4
68494: PPUSH
68495: LD_VAR 0 6
68499: PPUSH
68500: LD_VAR 0 4
68504: PPUSH
68505: CALL_OW 74
68509: PPUSH
68510: CALL 69618 0 2
// end else
68514: GO 68616
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68516: LD_VAR 0 4
68520: PPUSH
68521: LD_VAR 0 2
68525: PUSH
68526: LD_VAR 0 9
68530: ARRAY
68531: PUSH
68532: LD_INT 1
68534: ARRAY
68535: PPUSH
68536: LD_VAR 0 2
68540: PUSH
68541: LD_VAR 0 9
68545: ARRAY
68546: PUSH
68547: LD_INT 2
68549: ARRAY
68550: PPUSH
68551: CALL_OW 297
68555: PUSH
68556: LD_INT 6
68558: GREATER
68559: IFFALSE 68602
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68561: LD_VAR 0 4
68565: PPUSH
68566: LD_VAR 0 2
68570: PUSH
68571: LD_VAR 0 9
68575: ARRAY
68576: PUSH
68577: LD_INT 1
68579: ARRAY
68580: PPUSH
68581: LD_VAR 0 2
68585: PUSH
68586: LD_VAR 0 9
68590: ARRAY
68591: PUSH
68592: LD_INT 2
68594: ARRAY
68595: PPUSH
68596: CALL_OW 114
68600: GO 68616
// SetTag ( i , tag ) ;
68602: LD_VAR 0 4
68606: PPUSH
68607: LD_VAR 0 9
68611: PPUSH
68612: CALL_OW 109
// end else
68616: GO 68689
// if enemy then
68618: LD_VAR 0 5
68622: IFFALSE 68689
// begin if GetWeapon ( i ) = ru_time_lapser then
68624: LD_VAR 0 4
68628: PPUSH
68629: CALL_OW 264
68633: PUSH
68634: LD_INT 49
68636: EQUAL
68637: IFFALSE 68665
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68639: LD_VAR 0 4
68643: PPUSH
68644: LD_VAR 0 5
68648: PPUSH
68649: LD_VAR 0 4
68653: PPUSH
68654: CALL_OW 74
68658: PPUSH
68659: CALL_OW 112
68663: GO 68689
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68665: LD_VAR 0 4
68669: PPUSH
68670: LD_VAR 0 5
68674: PPUSH
68675: LD_VAR 0 4
68679: PPUSH
68680: CALL_OW 74
68684: PPUSH
68685: CALL 69618 0 2
// end ; end ;
68689: GO 68269
68691: POP
68692: POP
// end ;
68693: LD_VAR 0 3
68697: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68698: LD_INT 0
68700: PPUSH
68701: PPUSH
68702: PPUSH
// if not unit or IsInUnit ( unit ) then
68703: LD_VAR 0 1
68707: NOT
68708: PUSH
68709: LD_VAR 0 1
68713: PPUSH
68714: CALL_OW 310
68718: OR
68719: IFFALSE 68723
// exit ;
68721: GO 68814
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68723: LD_ADDR_VAR 0 4
68727: PUSH
68728: LD_VAR 0 1
68732: PPUSH
68733: CALL_OW 250
68737: PPUSH
68738: LD_VAR 0 2
68742: PPUSH
68743: LD_INT 1
68745: PPUSH
68746: CALL_OW 272
68750: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68751: LD_ADDR_VAR 0 5
68755: PUSH
68756: LD_VAR 0 1
68760: PPUSH
68761: CALL_OW 251
68765: PPUSH
68766: LD_VAR 0 2
68770: PPUSH
68771: LD_INT 1
68773: PPUSH
68774: CALL_OW 273
68778: ST_TO_ADDR
// if ValidHex ( x , y ) then
68779: LD_VAR 0 4
68783: PPUSH
68784: LD_VAR 0 5
68788: PPUSH
68789: CALL_OW 488
68793: IFFALSE 68814
// ComTurnXY ( unit , x , y ) ;
68795: LD_VAR 0 1
68799: PPUSH
68800: LD_VAR 0 4
68804: PPUSH
68805: LD_VAR 0 5
68809: PPUSH
68810: CALL_OW 118
// end ;
68814: LD_VAR 0 3
68818: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68819: LD_INT 0
68821: PPUSH
68822: PPUSH
// result := false ;
68823: LD_ADDR_VAR 0 3
68827: PUSH
68828: LD_INT 0
68830: ST_TO_ADDR
// if not units then
68831: LD_VAR 0 2
68835: NOT
68836: IFFALSE 68840
// exit ;
68838: GO 68885
// for i in units do
68840: LD_ADDR_VAR 0 4
68844: PUSH
68845: LD_VAR 0 2
68849: PUSH
68850: FOR_IN
68851: IFFALSE 68883
// if See ( side , i ) then
68853: LD_VAR 0 1
68857: PPUSH
68858: LD_VAR 0 4
68862: PPUSH
68863: CALL_OW 292
68867: IFFALSE 68881
// begin result := true ;
68869: LD_ADDR_VAR 0 3
68873: PUSH
68874: LD_INT 1
68876: ST_TO_ADDR
// exit ;
68877: POP
68878: POP
68879: GO 68885
// end ;
68881: GO 68850
68883: POP
68884: POP
// end ;
68885: LD_VAR 0 3
68889: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68890: LD_INT 0
68892: PPUSH
68893: PPUSH
68894: PPUSH
68895: PPUSH
// if not unit or not points then
68896: LD_VAR 0 1
68900: NOT
68901: PUSH
68902: LD_VAR 0 2
68906: NOT
68907: OR
68908: IFFALSE 68912
// exit ;
68910: GO 69002
// dist := 99999 ;
68912: LD_ADDR_VAR 0 5
68916: PUSH
68917: LD_INT 99999
68919: ST_TO_ADDR
// for i in points do
68920: LD_ADDR_VAR 0 4
68924: PUSH
68925: LD_VAR 0 2
68929: PUSH
68930: FOR_IN
68931: IFFALSE 69000
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68933: LD_ADDR_VAR 0 6
68937: PUSH
68938: LD_VAR 0 1
68942: PPUSH
68943: LD_VAR 0 4
68947: PUSH
68948: LD_INT 1
68950: ARRAY
68951: PPUSH
68952: LD_VAR 0 4
68956: PUSH
68957: LD_INT 2
68959: ARRAY
68960: PPUSH
68961: CALL_OW 297
68965: ST_TO_ADDR
// if tmpDist < dist then
68966: LD_VAR 0 6
68970: PUSH
68971: LD_VAR 0 5
68975: LESS
68976: IFFALSE 68998
// begin result := i ;
68978: LD_ADDR_VAR 0 3
68982: PUSH
68983: LD_VAR 0 4
68987: ST_TO_ADDR
// dist := tmpDist ;
68988: LD_ADDR_VAR 0 5
68992: PUSH
68993: LD_VAR 0 6
68997: ST_TO_ADDR
// end ; end ;
68998: GO 68930
69000: POP
69001: POP
// end ;
69002: LD_VAR 0 3
69006: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69007: LD_INT 0
69009: PPUSH
// uc_side := side ;
69010: LD_ADDR_OWVAR 20
69014: PUSH
69015: LD_VAR 0 1
69019: ST_TO_ADDR
// uc_nation := 3 ;
69020: LD_ADDR_OWVAR 21
69024: PUSH
69025: LD_INT 3
69027: ST_TO_ADDR
// vc_chassis := 25 ;
69028: LD_ADDR_OWVAR 37
69032: PUSH
69033: LD_INT 25
69035: ST_TO_ADDR
// vc_engine := engine_siberite ;
69036: LD_ADDR_OWVAR 39
69040: PUSH
69041: LD_INT 3
69043: ST_TO_ADDR
// vc_control := control_computer ;
69044: LD_ADDR_OWVAR 38
69048: PUSH
69049: LD_INT 3
69051: ST_TO_ADDR
// vc_weapon := 59 ;
69052: LD_ADDR_OWVAR 40
69056: PUSH
69057: LD_INT 59
69059: ST_TO_ADDR
// result := CreateVehicle ;
69060: LD_ADDR_VAR 0 5
69064: PUSH
69065: CALL_OW 45
69069: ST_TO_ADDR
// SetDir ( result , d ) ;
69070: LD_VAR 0 5
69074: PPUSH
69075: LD_VAR 0 4
69079: PPUSH
69080: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69084: LD_VAR 0 5
69088: PPUSH
69089: LD_VAR 0 2
69093: PPUSH
69094: LD_VAR 0 3
69098: PPUSH
69099: LD_INT 0
69101: PPUSH
69102: CALL_OW 48
// end ;
69106: LD_VAR 0 5
69110: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69111: LD_INT 0
69113: PPUSH
69114: PPUSH
69115: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69116: LD_ADDR_VAR 0 2
69120: PUSH
69121: LD_INT 0
69123: PUSH
69124: LD_INT 0
69126: PUSH
69127: LD_INT 0
69129: PUSH
69130: LD_INT 0
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69139: LD_VAR 0 1
69143: NOT
69144: PUSH
69145: LD_VAR 0 1
69149: PPUSH
69150: CALL_OW 264
69154: PUSH
69155: LD_INT 12
69157: PUSH
69158: LD_INT 51
69160: PUSH
69161: LD_INT 32
69163: PUSH
69164: LD_INT 89
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: IN
69173: NOT
69174: OR
69175: IFFALSE 69179
// exit ;
69177: GO 69277
// for i := 1 to 3 do
69179: LD_ADDR_VAR 0 3
69183: PUSH
69184: DOUBLE
69185: LD_INT 1
69187: DEC
69188: ST_TO_ADDR
69189: LD_INT 3
69191: PUSH
69192: FOR_TO
69193: IFFALSE 69275
// begin tmp := GetCargo ( cargo , i ) ;
69195: LD_ADDR_VAR 0 4
69199: PUSH
69200: LD_VAR 0 1
69204: PPUSH
69205: LD_VAR 0 3
69209: PPUSH
69210: CALL_OW 289
69214: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69215: LD_ADDR_VAR 0 2
69219: PUSH
69220: LD_VAR 0 2
69224: PPUSH
69225: LD_VAR 0 3
69229: PPUSH
69230: LD_VAR 0 4
69234: PPUSH
69235: CALL_OW 1
69239: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69240: LD_ADDR_VAR 0 2
69244: PUSH
69245: LD_VAR 0 2
69249: PPUSH
69250: LD_INT 4
69252: PPUSH
69253: LD_VAR 0 2
69257: PUSH
69258: LD_INT 4
69260: ARRAY
69261: PUSH
69262: LD_VAR 0 4
69266: PLUS
69267: PPUSH
69268: CALL_OW 1
69272: ST_TO_ADDR
// end ;
69273: GO 69192
69275: POP
69276: POP
// end ;
69277: LD_VAR 0 2
69281: RET
// export function Length ( array ) ; begin
69282: LD_INT 0
69284: PPUSH
// result := array + 0 ;
69285: LD_ADDR_VAR 0 2
69289: PUSH
69290: LD_VAR 0 1
69294: PUSH
69295: LD_INT 0
69297: PLUS
69298: ST_TO_ADDR
// end ;
69299: LD_VAR 0 2
69303: RET
// export function PrepareArray ( array ) ; begin
69304: LD_INT 0
69306: PPUSH
// result := array diff 0 ;
69307: LD_ADDR_VAR 0 2
69311: PUSH
69312: LD_VAR 0 1
69316: PUSH
69317: LD_INT 0
69319: DIFF
69320: ST_TO_ADDR
// if not result [ 1 ] then
69321: LD_VAR 0 2
69325: PUSH
69326: LD_INT 1
69328: ARRAY
69329: NOT
69330: IFFALSE 69350
// result := Delete ( result , 1 ) ;
69332: LD_ADDR_VAR 0 2
69336: PUSH
69337: LD_VAR 0 2
69341: PPUSH
69342: LD_INT 1
69344: PPUSH
69345: CALL_OW 3
69349: ST_TO_ADDR
// end ;
69350: LD_VAR 0 2
69354: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69355: LD_INT 0
69357: PPUSH
69358: PPUSH
69359: PPUSH
69360: PPUSH
// sibRocketRange := 25 ;
69361: LD_ADDR_VAR 0 6
69365: PUSH
69366: LD_INT 25
69368: ST_TO_ADDR
// result := false ;
69369: LD_ADDR_VAR 0 4
69373: PUSH
69374: LD_INT 0
69376: ST_TO_ADDR
// for i := 0 to 5 do
69377: LD_ADDR_VAR 0 5
69381: PUSH
69382: DOUBLE
69383: LD_INT 0
69385: DEC
69386: ST_TO_ADDR
69387: LD_INT 5
69389: PUSH
69390: FOR_TO
69391: IFFALSE 69458
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69393: LD_VAR 0 1
69397: PPUSH
69398: LD_VAR 0 5
69402: PPUSH
69403: LD_VAR 0 6
69407: PPUSH
69408: CALL_OW 272
69412: PPUSH
69413: LD_VAR 0 2
69417: PPUSH
69418: LD_VAR 0 5
69422: PPUSH
69423: LD_VAR 0 6
69427: PPUSH
69428: CALL_OW 273
69432: PPUSH
69433: LD_VAR 0 3
69437: PPUSH
69438: CALL_OW 309
69442: IFFALSE 69456
// begin result := true ;
69444: LD_ADDR_VAR 0 4
69448: PUSH
69449: LD_INT 1
69451: ST_TO_ADDR
// exit ;
69452: POP
69453: POP
69454: GO 69460
// end ;
69456: GO 69390
69458: POP
69459: POP
// end ;
69460: LD_VAR 0 4
69464: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69465: LD_INT 0
69467: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69468: LD_VAR 0 1
69472: PPUSH
69473: LD_VAR 0 2
69477: PPUSH
69478: LD_INT 0
69480: PPUSH
69481: LD_INT 0
69483: PPUSH
69484: LD_INT 1
69486: PPUSH
69487: LD_INT 0
69489: PPUSH
69490: CALL_OW 587
// end ;
69494: LD_VAR 0 3
69498: RET
// export function CenterOnNow ( unit ) ; begin
69499: LD_INT 0
69501: PPUSH
// result := IsInUnit ( unit ) ;
69502: LD_ADDR_VAR 0 2
69506: PUSH
69507: LD_VAR 0 1
69511: PPUSH
69512: CALL_OW 310
69516: ST_TO_ADDR
// if not result then
69517: LD_VAR 0 2
69521: NOT
69522: IFFALSE 69534
// result := unit ;
69524: LD_ADDR_VAR 0 2
69528: PUSH
69529: LD_VAR 0 1
69533: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69534: LD_VAR 0 1
69538: PPUSH
69539: CALL_OW 87
// end ;
69543: LD_VAR 0 2
69547: RET
// export function ComMoveHex ( unit , hex ) ; begin
69548: LD_INT 0
69550: PPUSH
// if not hex then
69551: LD_VAR 0 2
69555: NOT
69556: IFFALSE 69560
// exit ;
69558: GO 69613
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69560: LD_VAR 0 2
69564: PUSH
69565: LD_INT 1
69567: ARRAY
69568: PPUSH
69569: LD_VAR 0 2
69573: PUSH
69574: LD_INT 2
69576: ARRAY
69577: PPUSH
69578: CALL_OW 428
69582: IFFALSE 69586
// exit ;
69584: GO 69613
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69586: LD_VAR 0 1
69590: PPUSH
69591: LD_VAR 0 2
69595: PUSH
69596: LD_INT 1
69598: ARRAY
69599: PPUSH
69600: LD_VAR 0 2
69604: PUSH
69605: LD_INT 2
69607: ARRAY
69608: PPUSH
69609: CALL_OW 111
// end ;
69613: LD_VAR 0 3
69617: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69618: LD_INT 0
69620: PPUSH
69621: PPUSH
69622: PPUSH
// if not unit or not enemy then
69623: LD_VAR 0 1
69627: NOT
69628: PUSH
69629: LD_VAR 0 2
69633: NOT
69634: OR
69635: IFFALSE 69639
// exit ;
69637: GO 69763
// x := GetX ( enemy ) ;
69639: LD_ADDR_VAR 0 4
69643: PUSH
69644: LD_VAR 0 2
69648: PPUSH
69649: CALL_OW 250
69653: ST_TO_ADDR
// y := GetY ( enemy ) ;
69654: LD_ADDR_VAR 0 5
69658: PUSH
69659: LD_VAR 0 2
69663: PPUSH
69664: CALL_OW 251
69668: ST_TO_ADDR
// if ValidHex ( x , y ) then
69669: LD_VAR 0 4
69673: PPUSH
69674: LD_VAR 0 5
69678: PPUSH
69679: CALL_OW 488
69683: IFFALSE 69763
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
69685: LD_VAR 0 2
69689: PPUSH
69690: CALL_OW 247
69694: PUSH
69695: LD_INT 3
69697: PUSH
69698: LD_INT 2
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: IN
69705: PUSH
69706: LD_VAR 0 1
69710: PPUSH
69711: CALL_OW 255
69715: PPUSH
69716: LD_VAR 0 2
69720: PPUSH
69721: CALL_OW 292
69725: AND
69726: IFFALSE 69744
// ComAttackUnit ( unit , enemy ) else
69728: LD_VAR 0 1
69732: PPUSH
69733: LD_VAR 0 2
69737: PPUSH
69738: CALL_OW 115
69742: GO 69763
// ComAgressiveMove ( unit , x , y ) ;
69744: LD_VAR 0 1
69748: PPUSH
69749: LD_VAR 0 4
69753: PPUSH
69754: LD_VAR 0 5
69758: PPUSH
69759: CALL_OW 114
// end ; end_of_file
69763: LD_VAR 0 3
69767: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69768: LD_VAR 0 1
69772: PUSH
69773: LD_INT 200
69775: DOUBLE
69776: GREATEREQUAL
69777: IFFALSE 69785
69779: LD_INT 299
69781: DOUBLE
69782: LESSEQUAL
69783: IFTRUE 69787
69785: GO 69819
69787: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69788: LD_VAR 0 1
69792: PPUSH
69793: LD_VAR 0 2
69797: PPUSH
69798: LD_VAR 0 3
69802: PPUSH
69803: LD_VAR 0 4
69807: PPUSH
69808: LD_VAR 0 5
69812: PPUSH
69813: CALL 23492 0 5
69817: GO 69896
69819: LD_INT 300
69821: DOUBLE
69822: GREATEREQUAL
69823: IFFALSE 69831
69825: LD_INT 399
69827: DOUBLE
69828: LESSEQUAL
69829: IFTRUE 69833
69831: GO 69895
69833: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69834: LD_VAR 0 1
69838: PPUSH
69839: LD_VAR 0 2
69843: PPUSH
69844: LD_VAR 0 3
69848: PPUSH
69849: LD_VAR 0 4
69853: PPUSH
69854: LD_VAR 0 5
69858: PPUSH
69859: LD_VAR 0 6
69863: PPUSH
69864: LD_VAR 0 7
69868: PPUSH
69869: LD_VAR 0 8
69873: PPUSH
69874: LD_VAR 0 9
69878: PPUSH
69879: LD_VAR 0 10
69883: PPUSH
69884: LD_VAR 0 11
69888: PPUSH
69889: CALL 19817 0 11
69893: GO 69896
69895: POP
// end ;
69896: PPOPN 11
69898: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69899: LD_VAR 0 1
69903: PPUSH
69904: LD_VAR 0 2
69908: PPUSH
69909: LD_VAR 0 3
69913: PPUSH
69914: LD_VAR 0 4
69918: PPUSH
69919: LD_VAR 0 5
69923: PPUSH
69924: CALL 23228 0 5
// end ; end_of_file
69928: PPOPN 5
69930: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69931: LD_VAR 0 1
69935: PPUSH
69936: LD_VAR 0 2
69940: PPUSH
69941: LD_VAR 0 3
69945: PPUSH
69946: LD_VAR 0 4
69950: PPUSH
69951: LD_VAR 0 5
69955: PPUSH
69956: LD_VAR 0 6
69960: PPUSH
69961: CALL 7469 0 6
// end ;
69965: PPOPN 6
69967: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69968: LD_INT 0
69970: PPUSH
// begin if not units then
69971: LD_VAR 0 1
69975: NOT
69976: IFFALSE 69980
// exit ;
69978: GO 69980
// end ;
69980: PPOPN 7
69982: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69983: CALL 7373 0 0
// end ;
69987: PPOPN 1
69989: END
