// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 52634 0 9
// PrepareAmerican ;
  46: CALL 4072 0 0
// PrepareAlliance ;
  50: CALL 226 0 0
// Action ;
  54: CALL 908 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: EMPTY
 158: LIST
 159: LIST
 160: LIST
 161: PUSH
 162: LD_OWVAR 67
 166: ARRAY
 167: ST_TO_ADDR
// canEnd := false ;
 168: LD_ADDR_EXP 10
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// missionTime := 0 0$00 ;
 176: LD_ADDR_EXP 11
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// killCounter := 0 ;
 184: LD_ADDR_EXP 12
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// bunkerCounter := 0 ;
 192: LD_ADDR_EXP 13
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// end ;
 200: LD_VAR 0 1
 204: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 205: LD_EXP 13
 209: PUSH
 210: LD_INT 3
 212: GREATEREQUAL
 213: IFFALSE 225
 215: GO 217
 217: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 218: LD_STRING ACH_ONEMANARMY
 220: PPUSH
 221: CALL_OW 543
 225: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 226: LD_INT 0
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// uc_side := 7 ;
 235: LD_ADDR_OWVAR 20
 239: PUSH
 240: LD_INT 7
 242: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 243: LD_ADDR_EXP 14
 247: PUSH
 248: LD_STRING JMM
 250: PPUSH
 251: LD_EXP 1
 255: NOT
 256: PPUSH
 257: LD_STRING 14a_
 259: PPUSH
 260: CALL 20019 0 3
 264: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 265: LD_ADDR_EXP 15
 269: PUSH
 270: LD_STRING Burlak
 272: PPUSH
 273: LD_EXP 1
 277: NOT
 278: PPUSH
 279: LD_STRING 14a_
 281: PPUSH
 282: CALL 20019 0 3
 286: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 287: LD_ADDR_EXP 16
 291: PUSH
 292: LD_STRING Joan
 294: PPUSH
 295: LD_EXP 1
 299: NOT
 300: PPUSH
 301: LD_STRING 13a_
 303: PPUSH
 304: CALL 20019 0 3
 308: ST_TO_ADDR
// if not Joan then
 309: LD_EXP 16
 313: NOT
 314: IFFALSE 447
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 316: LD_ADDR_VAR 0 2
 320: PUSH
 321: LD_STRING 13a_others
 323: PPUSH
 324: CALL_OW 31
 328: ST_TO_ADDR
// if tmp then
 329: LD_VAR 0 2
 333: IFFALSE 409
// begin for i in tmp do
 335: LD_ADDR_VAR 0 3
 339: PUSH
 340: LD_VAR 0 2
 344: PUSH
 345: FOR_IN
 346: IFFALSE 407
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 348: LD_VAR 0 3
 352: PPUSH
 353: CALL_OW 257
 357: PUSH
 358: LD_INT 4
 360: EQUAL
 361: PUSH
 362: LD_VAR 0 3
 366: PPUSH
 367: CALL_OW 258
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: PUSH
 377: LD_VAR 0 3
 381: PPUSH
 382: CALL_OW 248
 386: PUSH
 387: LD_INT 3
 389: EQUAL
 390: AND
 391: IFFALSE 405
// begin RuSci := i ;
 393: LD_ADDR_EXP 17
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// break ;
 403: GO 407
// end ;
 405: GO 345
 407: POP
 408: POP
// end ; if not RuSci then
 409: LD_EXP 17
 413: NOT
 414: IFFALSE 447
// begin uc_nation := 3 ;
 416: LD_ADDR_OWVAR 21
 420: PUSH
 421: LD_INT 3
 423: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 424: LD_INT 1
 426: PPUSH
 427: LD_INT 4
 429: PPUSH
 430: LD_INT 10
 432: PPUSH
 433: CALL_OW 380
// RuSci := CreateHuman ;
 437: LD_ADDR_EXP 17
 441: PUSH
 442: CALL_OW 44
 446: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 447: LD_ADDR_VAR 0 6
 451: PUSH
 452: LD_STRING 14a_JMMVeh
 454: PPUSH
 455: LD_INT 5
 457: PUSH
 458: LD_INT 3
 460: PUSH
 461: LD_INT 1
 463: PUSH
 464: LD_INT 7
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: LIST
 478: LIST
 479: LIST
 480: PPUSH
 481: CALL_OW 30
 485: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 486: LD_ADDR_VAR 0 7
 490: PUSH
 491: LD_STRING 14a_BurlakVeh
 493: PPUSH
 494: LD_INT 22
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: LD_INT 1
 502: PUSH
 503: LD_INT 51
 505: PUSH
 506: LD_INT 0
 508: PUSH
 509: LD_INT 3
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: PPUSH
 520: CALL_OW 30
 524: ST_TO_ADDR
// uc_direction := 4 ;
 525: LD_ADDR_OWVAR 24
 529: PUSH
 530: LD_INT 4
 532: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 6
 542: PUSH
 543: LD_INT 6
 545: ARRAY
 546: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 547: LD_VAR 0 6
 551: PUSH
 552: LD_INT 1
 554: ARRAY
 555: PPUSH
 556: LD_VAR 0 6
 560: PUSH
 561: LD_INT 2
 563: ARRAY
 564: PPUSH
 565: LD_VAR 0 6
 569: PUSH
 570: LD_INT 3
 572: ARRAY
 573: PPUSH
 574: LD_VAR 0 6
 578: PUSH
 579: LD_INT 4
 581: ARRAY
 582: PPUSH
 583: LD_INT 60
 585: PPUSH
 586: LD_INT 80
 588: PPUSH
 589: CALL_OW 12
 593: PPUSH
 594: CALL 24843 0 5
// JMMVeh := CreateVehicle ;
 598: LD_ADDR_VAR 0 4
 602: PUSH
 603: CALL_OW 45
 607: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 608: LD_VAR 0 4
 612: PPUSH
 613: LD_INT 1
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL 54803 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 623: LD_VAR 0 6
 627: PUSH
 628: LD_INT 5
 630: ARRAY
 631: PUSH
 632: LD_INT 0
 634: NONEQUAL
 635: IFFALSE 655
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 637: LD_VAR 0 4
 641: PPUSH
 642: LD_VAR 0 6
 646: PUSH
 647: LD_INT 5
 649: ARRAY
 650: PPUSH
 651: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 655: LD_EXP 14
 659: PPUSH
 660: LD_VAR 0 4
 664: PPUSH
 665: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 669: LD_ADDR_OWVAR 21
 673: PUSH
 674: LD_VAR 0 7
 678: PUSH
 679: LD_INT 6
 681: ARRAY
 682: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 683: LD_VAR 0 7
 687: PUSH
 688: LD_INT 1
 690: ARRAY
 691: PPUSH
 692: LD_VAR 0 7
 696: PUSH
 697: LD_INT 2
 699: ARRAY
 700: PPUSH
 701: LD_VAR 0 7
 705: PUSH
 706: LD_INT 3
 708: ARRAY
 709: PPUSH
 710: LD_VAR 0 7
 714: PUSH
 715: LD_INT 4
 717: ARRAY
 718: PPUSH
 719: LD_INT 60
 721: PPUSH
 722: LD_INT 80
 724: PPUSH
 725: CALL_OW 12
 729: PPUSH
 730: CALL 24843 0 5
// BurlakVeh := CreateVehicle ;
 734: LD_ADDR_VAR 0 5
 738: PUSH
 739: CALL_OW 45
 743: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 744: LD_VAR 0 5
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL 54803 0 3
 759: NOT
 760: IFFALSE 780
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 762: LD_VAR 0 5
 766: PPUSH
 767: LD_INT 233
 769: PPUSH
 770: LD_INT 85
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 780: LD_VAR 0 7
 784: PUSH
 785: LD_INT 5
 787: ARRAY
 788: PUSH
 789: LD_INT 0
 791: NONEQUAL
 792: IFFALSE 812
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 794: LD_VAR 0 5
 798: PPUSH
 799: LD_VAR 0 7
 803: PUSH
 804: LD_INT 5
 806: ARRAY
 807: PPUSH
 808: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 812: LD_EXP 15
 816: PPUSH
 817: LD_VAR 0 5
 821: PPUSH
 822: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] ] [ Difficulty ] ;
 826: LD_ADDR_VAR 0 2
 830: PUSH
 831: LD_INT 178
 833: PUSH
 834: LD_INT 91
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 137
 843: PUSH
 844: LD_INT 83
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 157
 853: PUSH
 854: LD_INT 75
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 872: LD_INT 4
 874: PPUSH
 875: LD_INT 4
 877: PPUSH
 878: LD_VAR 0 2
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: PPUSH
 887: LD_VAR 0 2
 891: PUSH
 892: LD_INT 2
 894: ARRAY
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 58
// end ; end_of_file
 903: LD_VAR 0 1
 907: RET
// export function Action ; begin
 908: LD_INT 0
 910: PPUSH
// InGameOn ;
 911: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 915: LD_INT 221
 917: PPUSH
 918: LD_INT 80
 920: PPUSH
 921: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 925: LD_EXP 14
 929: PUSH
 930: LD_EXP 15
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PPUSH
 939: LD_INT 217
 941: PPUSH
 942: LD_INT 79
 944: PPUSH
 945: CALL_OW 111
// wait ( 0 0$7 ) ;
 949: LD_INT 245
 951: PPUSH
 952: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 956: LD_EXP 14
 960: PUSH
 961: LD_EXP 15
 965: PUSH
 966: EMPTY
 967: LIST
 968: LIST
 969: PPUSH
 970: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 974: LD_EXP 15
 978: PPUSH
 979: LD_STRING D2-Bur-1
 981: PPUSH
 982: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
 986: LD_EXP 14
 990: PPUSH
 991: LD_STRING D2-JMM-1
 993: PPUSH
 994: CALL_OW 88
// wait ( 0 0$0.5 ) ;
 998: LD_INT 18
1000: PPUSH
1001: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1005: LD_EXP 15
1009: PPUSH
1010: LD_EXP 14
1014: PPUSH
1015: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1019: LD_EXP 15
1023: PPUSH
1024: LD_STRING D2-Bur-2
1026: PPUSH
1027: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1031: LD_EXP 15
1035: PPUSH
1036: LD_INT 21
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: PPUSH
1051: LD_EXP 15
1055: PPUSH
1056: CALL_OW 74
1060: PPUSH
1061: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1065: LD_EXP 14
1069: PPUSH
1070: LD_INT 21
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PPUSH
1080: CALL_OW 69
1084: PPUSH
1085: LD_EXP 14
1089: PPUSH
1090: CALL_OW 74
1094: PPUSH
1095: CALL_OW 120
// wait ( 0 0$1 ) ;
1099: LD_INT 35
1101: PPUSH
1102: CALL_OW 67
// InGameOff ;
1106: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1110: LD_STRING MArtPickup
1112: PPUSH
1113: CALL_OW 337
// end ;
1117: LD_VAR 0 1
1121: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1122: LD_EXP 22
1126: PPUSH
1127: LD_INT 101
1129: PUSH
1130: LD_INT 7
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 72
1141: PUSH
1142: LD_EXP 8
1146: NOT
1147: AND
1148: IFFALSE 1177
1150: GO 1152
1152: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1153: LD_EXP 15
1157: PPUSH
1158: LD_STRING D3-Bur-1
1160: PPUSH
1161: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1165: LD_EXP 14
1169: PPUSH
1170: LD_STRING D3-JMM-1
1172: PPUSH
1173: CALL_OW 88
// end ;
1177: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1178: LD_INT 5
1180: PPUSH
1181: LD_INT 22
1183: PUSH
1184: LD_INT 7
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PPUSH
1191: CALL_OW 70
1195: IFFALSE 1526
1197: GO 1199
1199: DISABLE
// begin wait ( 0 0$3 ) ;
1200: LD_INT 105
1202: PPUSH
1203: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1207: LD_INT 139
1209: PPUSH
1210: LD_INT 43
1212: PPUSH
1213: LD_INT 7
1215: PPUSH
1216: LD_INT 20
1218: NEG
1219: PPUSH
1220: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1224: LD_INT 139
1226: PPUSH
1227: LD_INT 43
1229: PPUSH
1230: LD_INT 7
1232: PPUSH
1233: CALL_OW 331
// DialogueOn ;
1237: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1241: LD_EXP 14
1245: PPUSH
1246: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1250: LD_EXP 14
1254: PPUSH
1255: LD_STRING D3a-JMM-1
1257: PPUSH
1258: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1262: LD_EXP 15
1266: PPUSH
1267: LD_STRING D3a-Bur-1
1269: PPUSH
1270: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1274: LD_EXP 14
1278: PPUSH
1279: LD_STRING D3a-JMM-2
1281: PPUSH
1282: CALL_OW 88
// if Joan then
1286: LD_EXP 16
1290: IFFALSE 1306
// SayRadio ( Joan , D3a-Joan-2 ) else
1292: LD_EXP 16
1296: PPUSH
1297: LD_STRING D3a-Joan-2
1299: PPUSH
1300: CALL_OW 94
1304: GO 1318
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1306: LD_EXP 17
1310: PPUSH
1311: LD_STRING D3a-RSci1-2
1313: PPUSH
1314: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1318: LD_EXP 18
1322: PPUSH
1323: LD_STRING D3a-Huck-2
1325: PPUSH
1326: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1330: LD_EXP 19
1334: PPUSH
1335: LD_STRING D3a-Pow-2
1337: PPUSH
1338: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1342: LD_EXP 18
1346: PPUSH
1347: LD_STRING D3a-Huck-3
1349: PPUSH
1350: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1354: LD_EXP 19
1358: PPUSH
1359: LD_STRING D3a-Pow-3
1361: PPUSH
1362: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1366: LD_EXP 18
1370: PPUSH
1371: LD_STRING D3a-Huck-4
1373: PPUSH
1374: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1378: LD_EXP 14
1382: PPUSH
1383: LD_STRING D3a-JMM-4
1385: PPUSH
1386: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1390: LD_EXP 15
1394: PPUSH
1395: LD_STRING D3a-Bur-4
1397: PPUSH
1398: CALL_OW 88
// if Joan then
1402: LD_EXP 16
1406: IFFALSE 1422
// SayRadio ( Joan , D3a-Joan-4 ) else
1408: LD_EXP 16
1412: PPUSH
1413: LD_STRING D3a-Joan-4
1415: PPUSH
1416: CALL_OW 94
1420: GO 1434
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1422: LD_EXP 17
1426: PPUSH
1427: LD_STRING D3a-RSci1-4
1429: PPUSH
1430: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1434: LD_INT 133
1436: PPUSH
1437: LD_INT 43
1439: PPUSH
1440: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1444: LD_INT 10
1446: PPUSH
1447: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1451: LD_EXP 14
1455: PPUSH
1456: LD_STRING D3a-JMM-5
1458: PPUSH
1459: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1463: LD_EXP 15
1467: PPUSH
1468: LD_STRING D3a-Bur-5
1470: PPUSH
1471: CALL_OW 88
// DialogueOff ;
1475: CALL_OW 7
// seenBase := true ;
1479: LD_ADDR_EXP 8
1483: PUSH
1484: LD_INT 1
1486: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
1487: LD_INT 525
1489: PUSH
1490: LD_INT 420
1492: PUSH
1493: LD_INT 315
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: LIST
1500: PUSH
1501: LD_OWVAR 67
1505: ARRAY
1506: PPUSH
1507: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1511: LD_EXP 21
1515: PPUSH
1516: LD_INT 142
1518: PPUSH
1519: LD_INT 52
1521: PPUSH
1522: CALL_OW 116
// end ;
1526: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1527: LD_EXP 8
1531: NOT
1532: PUSH
1533: LD_EXP 4
1537: NOT
1538: AND
1539: IFFALSE 1559
1541: GO 1543
1543: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1544: LD_EXP 21
1548: PPUSH
1549: LD_INT 142
1551: PPUSH
1552: LD_INT 52
1554: PPUSH
1555: CALL_OW 116
1559: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1560: LD_INT 0
1562: PPUSH
1563: PPUSH
// contaminateTime := tick ;
1564: LD_ADDR_EXP 3
1568: PUSH
1569: LD_OWVAR 1
1573: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1574: LD_INT 175
1576: PPUSH
1577: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1581: LD_ADDR_VAR 0 5
1585: PUSH
1586: LD_INT 4
1588: PPUSH
1589: CALL_OW 469
1593: ST_TO_ADDR
// if art then
1594: LD_VAR 0 5
1598: IFFALSE 1637
// if art [ 1 ] = 157 and art [ 2 ] = 75 then
1600: LD_VAR 0 5
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PUSH
1609: LD_INT 157
1611: EQUAL
1612: PUSH
1613: LD_VAR 0 5
1617: PUSH
1618: LD_INT 2
1620: ARRAY
1621: PUSH
1622: LD_INT 75
1624: EQUAL
1625: AND
1626: IFFALSE 1637
// begin YouLost ( Artefact ) ;
1628: LD_STRING Artefact
1630: PPUSH
1631: CALL_OW 104
// exit ;
1635: GO 1789
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1637: LD_EXP 14
1641: PPUSH
1642: CALL_OW 302
1646: PUSH
1647: LD_EXP 15
1651: PPUSH
1652: CALL_OW 302
1656: AND
1657: IFFALSE 1734
// begin DialogueOn ;
1659: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1663: LD_EXP 14
1667: PPUSH
1668: LD_STRING D6a-JMM-1
1670: PPUSH
1671: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1675: LD_EXP 15
1679: PPUSH
1680: LD_STRING D6a-Bur-1
1682: PPUSH
1683: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1687: LD_EXP 14
1691: PPUSH
1692: LD_STRING D6c-JMM-1
1694: PPUSH
1695: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1699: LD_EXP 15
1703: PPUSH
1704: LD_STRING D6c-Bur-1
1706: PPUSH
1707: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1711: LD_EXP 14
1715: PPUSH
1716: LD_STRING D6c-JMM-2
1718: PPUSH
1719: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1723: LD_STRING MBase
1725: PPUSH
1726: CALL_OW 337
// DialogueOff ;
1730: CALL_OW 7
// end ; bombExploded := true ;
1734: LD_ADDR_EXP 4
1738: PUSH
1739: LD_INT 1
1741: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ) ;
1742: LD_INT 6300
1744: PUSH
1745: LD_INT 5250
1747: PUSH
1748: LD_INT 4200
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: PUSH
1756: LD_OWVAR 67
1760: ARRAY
1761: PPUSH
1762: CALL_OW 67
// if IsOk ( JMM ) then
1766: LD_EXP 14
1770: PPUSH
1771: CALL_OW 302
1775: IFFALSE 1789
// Say ( JMM , D8-JMM-1 ) ;
1777: LD_EXP 14
1781: PPUSH
1782: LD_STRING D8-JMM-1
1784: PPUSH
1785: CALL_OW 88
// end ;
1789: LD_VAR 0 4
1793: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1794: LD_EXP 9
1798: PUSH
1799: LD_EXP 7
1803: NOT
1804: AND
1805: PUSH
1806: LD_EXP 4
1810: AND
1811: IFFALSE 1866
1813: GO 1815
1815: DISABLE
// begin enable ;
1816: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1817: LD_INT 9
1819: PPUSH
1820: LD_INT 22
1822: PUSH
1823: LD_INT 7
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PPUSH
1830: CALL_OW 70
1834: IFFALSE 1852
// stevensTimer := stevensTimer - 0 0$30 else
1836: LD_ADDR_EXP 9
1840: PUSH
1841: LD_EXP 9
1845: PUSH
1846: LD_INT 1050
1848: MINUS
1849: ST_TO_ADDR
1850: GO 1866
// stevensTimer := stevensTimer - 0 0$1 ;
1852: LD_ADDR_EXP 9
1856: PUSH
1857: LD_EXP 9
1861: PUSH
1862: LD_INT 35
1864: MINUS
1865: ST_TO_ADDR
// end ;
1866: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1867: LD_EXP 9
1871: PUSH
1872: LD_INT 0
1874: LESSEQUAL
1875: PUSH
1876: LD_EXP 7
1880: NOT
1881: AND
1882: IFFALSE 2046
1884: GO 1886
1886: DISABLE
1887: LD_INT 0
1889: PPUSH
1890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1891: LD_ADDR_VAR 0 2
1895: PUSH
1896: LD_INT 22
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 25
1908: PUSH
1909: LD_INT 4
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PPUSH
1920: CALL_OW 69
1924: ST_TO_ADDR
// for i in tmp do
1925: LD_ADDR_VAR 0 1
1929: PUSH
1930: LD_VAR 0 2
1934: PUSH
1935: FOR_IN
1936: IFFALSE 1989
// begin if IsInUnit ( i ) then
1938: LD_VAR 0 1
1942: PPUSH
1943: CALL_OW 310
1947: IFFALSE 1960
// ComExitBuilding ( i ) else
1949: LD_VAR 0 1
1953: PPUSH
1954: CALL_OW 122
1958: GO 1987
// if not HasTask ( i ) then
1960: LD_VAR 0 1
1964: PPUSH
1965: CALL_OW 314
1969: NOT
1970: IFFALSE 1987
// ComMoveXY ( i , 29 , 56 ) ;
1972: LD_VAR 0 1
1976: PPUSH
1977: LD_INT 29
1979: PPUSH
1980: LD_INT 56
1982: PPUSH
1983: CALL_OW 111
// end ;
1987: GO 1935
1989: POP
1990: POP
// repeat wait ( 0 0$1 ) ;
1991: LD_INT 35
1993: PPUSH
1994: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1998: LD_INT 8
2000: PPUSH
2001: LD_INT 22
2003: PUSH
2004: LD_INT 1
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 25
2013: PUSH
2014: LD_INT 4
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PPUSH
2025: CALL_OW 70
2029: IFFALSE 1991
// if planCaptured then
2031: LD_EXP 7
2035: IFFALSE 2039
// exit ;
2037: GO 2046
// YouLost ( Time ) ;
2039: LD_STRING Time
2041: PPUSH
2042: CALL_OW 104
// end ;
2046: PPOPN 2
2048: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2049: LD_INT 22
2051: PUSH
2052: LD_INT 7
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: LD_INT 92
2061: PUSH
2062: LD_INT 142
2064: PUSH
2065: LD_INT 52
2067: PUSH
2068: LD_INT 27
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PPUSH
2081: CALL_OW 69
2085: PUSH
2086: LD_EXP 3
2090: PUSH
2091: LD_INT 6000
2093: PLUS
2094: PUSH
2095: LD_OWVAR 1
2099: GREATER
2100: AND
2101: PUSH
2102: LD_EXP 4
2106: AND
2107: IFFALSE 2162
2109: GO 2111
2111: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2112: LD_EXP 14
2116: PUSH
2117: LD_EXP 15
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PPUSH
2126: CALL_OW 85
// DialogueOn ;
2130: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2134: LD_EXP 14
2138: PPUSH
2139: LD_STRING D6b-JMM-1
2141: PPUSH
2142: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2146: LD_EXP 15
2150: PPUSH
2151: LD_STRING D6b-Bur-1
2153: PPUSH
2154: CALL_OW 88
// DialogueOff ;
2158: CALL_OW 7
// end ;
2162: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2163: LD_EXP 15
2167: PPUSH
2168: LD_INT 142
2170: PPUSH
2171: LD_INT 52
2173: PPUSH
2174: CALL_OW 297
2178: PUSH
2179: LD_INT 25
2181: LESS
2182: PUSH
2183: LD_EXP 15
2187: PPUSH
2188: CALL_OW 310
2192: PPUSH
2193: LD_INT 142
2195: PPUSH
2196: LD_INT 52
2198: PPUSH
2199: CALL_OW 297
2203: PUSH
2204: LD_INT 25
2206: LESS
2207: OR
2208: PUSH
2209: LD_EXP 15
2213: PPUSH
2214: CALL_OW 256
2218: PUSH
2219: LD_INT 1000
2221: LESS
2222: AND
2223: PUSH
2224: LD_EXP 3
2228: PUSH
2229: LD_INT 6000
2231: PLUS
2232: PUSH
2233: LD_OWVAR 1
2237: GREATER
2238: AND
2239: PUSH
2240: LD_EXP 4
2244: AND
2245: IFFALSE 2278
2247: GO 2249
2249: DISABLE
// begin DialogueOn ;
2250: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2254: LD_EXP 15
2258: PPUSH
2259: LD_STRING D7-Bur-1
2261: PPUSH
2262: CALL_OW 88
// enteredContaminatedArea := true ;
2266: LD_ADDR_EXP 5
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// DialogueOff ;
2274: CALL_OW 7
// end ;
2278: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2279: LD_EXP 14
2283: PPUSH
2284: LD_INT 142
2286: PPUSH
2287: LD_INT 52
2289: PPUSH
2290: CALL_OW 297
2294: PUSH
2295: LD_INT 25
2297: LESS
2298: PUSH
2299: LD_EXP 14
2303: PPUSH
2304: CALL_OW 310
2308: PPUSH
2309: LD_INT 142
2311: PPUSH
2312: LD_INT 52
2314: PPUSH
2315: CALL_OW 297
2319: PUSH
2320: LD_INT 25
2322: LESS
2323: OR
2324: PUSH
2325: LD_EXP 14
2329: PPUSH
2330: CALL_OW 256
2334: PUSH
2335: LD_INT 1000
2337: LESS
2338: AND
2339: PUSH
2340: LD_EXP 3
2344: PUSH
2345: LD_INT 6000
2347: PLUS
2348: PUSH
2349: LD_OWVAR 1
2353: GREATER
2354: AND
2355: PUSH
2356: LD_EXP 4
2360: AND
2361: IFFALSE 2394
2363: GO 2365
2365: DISABLE
// begin DialogueOn ;
2366: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2370: LD_EXP 14
2374: PPUSH
2375: LD_STRING D7-JMM-1
2377: PPUSH
2378: CALL_OW 88
// enteredContaminatedArea := true ;
2382: LD_ADDR_EXP 5
2386: PUSH
2387: LD_INT 1
2389: ST_TO_ADDR
// DialogueOff ;
2390: CALL_OW 7
// end ;
2394: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2395: LD_EXP 6
2399: PUSH
2400: LD_EXP 14
2404: PPUSH
2405: CALL_OW 302
2409: AND
2410: PUSH
2411: LD_EXP 15
2415: PPUSH
2416: CALL_OW 302
2420: AND
2421: IFFALSE 2490
2423: GO 2425
2425: DISABLE
// begin DialogueOn ;
2426: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2430: LD_EXP 14
2434: PUSH
2435: LD_EXP 15
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PPUSH
2444: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2448: LD_EXP 14
2452: PPUSH
2453: LD_STRING D4-JMM-1
2455: PPUSH
2456: CALL_OW 88
// if not bombExploded then
2460: LD_EXP 4
2464: NOT
2465: IFFALSE 2479
// Say ( Burlak , D4-Bur-1 ) ;
2467: LD_EXP 15
2471: PPUSH
2472: LD_STRING D4-Bur-1
2474: PPUSH
2475: CALL_OW 88
// DialogueOff ;
2479: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2483: LD_STRING MReturn
2485: PPUSH
2486: CALL_OW 337
// end ;
2490: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2491: LD_EXP 7
2495: NOT
2496: PUSH
2497: LD_INT 22
2499: PUSH
2500: LD_INT 7
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: LD_INT 91
2509: PUSH
2510: LD_INT 9
2512: PUSH
2513: LD_INT 6
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: LIST
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PPUSH
2525: CALL_OW 69
2529: AND
2530: IFFALSE 2607
2532: GO 2534
2534: DISABLE
// begin DialogueOn ;
2535: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2539: LD_INT 55
2541: PPUSH
2542: LD_INT 11
2544: PPUSH
2545: LD_INT 7
2547: PPUSH
2548: LD_INT 6
2550: NEG
2551: PPUSH
2552: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2556: LD_INT 55
2558: PPUSH
2559: LD_INT 11
2561: PPUSH
2562: LD_INT 7
2564: PPUSH
2565: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2569: LD_EXP 15
2573: PPUSH
2574: LD_STRING D9-Bur-1
2576: PPUSH
2577: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2581: LD_EXP 14
2585: PPUSH
2586: LD_STRING D9-JMM-1
2588: PPUSH
2589: CALL_OW 88
// DialogueOff ;
2593: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2597: LD_INT 9
2599: PPUSH
2600: LD_INT 7
2602: PPUSH
2603: CALL_OW 235
// end ;
2607: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2608: LD_INT 9
2610: PPUSH
2611: LD_INT 22
2613: PUSH
2614: LD_INT 7
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PPUSH
2621: CALL_OW 70
2625: IFFALSE 2661
2627: GO 2629
2629: DISABLE
// begin wait ( 0 0$07 ) ;
2630: LD_INT 245
2632: PPUSH
2633: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2637: LD_EXP 14
2641: PPUSH
2642: LD_STRING D10b-JMM-1
2644: PPUSH
2645: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2649: LD_EXP 15
2653: PPUSH
2654: LD_STRING D10b-Bur-1
2656: PPUSH
2657: CALL_OW 88
// end ;
2661: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2662: LD_EXP 9
2666: PUSH
2667: LD_INT 22
2669: PUSH
2670: LD_INT 1
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: LD_INT 25
2679: PUSH
2680: LD_INT 4
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_INT 26
2689: PUSH
2690: LD_INT 1
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: PPUSH
2702: CALL_OW 69
2706: AND
2707: PUSH
2708: LD_INT 5
2710: PPUSH
2711: CALL_OW 255
2715: PUSH
2716: LD_INT 7
2718: EQUAL
2719: PUSH
2720: LD_INT 22
2722: PUSH
2723: LD_INT 1
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 25
2732: PUSH
2733: LD_INT 1
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PPUSH
2744: CALL_OW 69
2748: PUSH
2749: LD_INT 0
2751: EQUAL
2752: OR
2753: AND
2754: IFFALSE 3343
2756: GO 2758
2758: DISABLE
2759: LD_INT 0
2761: PPUSH
// begin case Query ( QKill ) of 1 :
2762: LD_STRING QKill
2764: PPUSH
2765: CALL_OW 97
2769: PUSH
2770: LD_INT 1
2772: DOUBLE
2773: EQUAL
2774: IFTRUE 2778
2776: GO 3331
2778: POP
// begin DialogueOn ;
2779: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2783: LD_EXP 14
2787: PPUSH
2788: LD_STRING D10a-JMM-1
2790: PPUSH
2791: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2795: LD_EXP 15
2799: PPUSH
2800: LD_STRING D10a-Bur-1
2802: PPUSH
2803: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2807: LD_EXP 14
2811: PPUSH
2812: LD_STRING D10a-JMM-2
2814: PPUSH
2815: CALL_OW 88
// if IsOk ( Stevens ) then
2819: LD_EXP 18
2823: PPUSH
2824: CALL_OW 302
2828: IFFALSE 2844
// Say ( Stevens , D10a-Huck-2 ) else
2830: LD_EXP 18
2834: PPUSH
2835: LD_STRING D10a-Huck-2
2837: PPUSH
2838: CALL_OW 88
2842: GO 2895
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2844: LD_INT 22
2846: PUSH
2847: LD_INT 1
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 25
2856: PUSH
2857: LD_INT 4
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: LD_INT 26
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: LIST
2878: PPUSH
2879: CALL_OW 69
2883: PUSH
2884: LD_INT 1
2886: ARRAY
2887: PPUSH
2888: LD_STRING D10a-ASci1-3
2890: PPUSH
2891: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2895: LD_EXP 14
2899: PPUSH
2900: LD_STRING D10a-JMM-4
2902: PPUSH
2903: CALL_OW 88
// if IsOk ( Stevens ) then
2907: LD_EXP 18
2911: PPUSH
2912: CALL_OW 302
2916: IFFALSE 2930
// Say ( Stevens , D10a-Huck-3 ) ;
2918: LD_EXP 18
2922: PPUSH
2923: LD_STRING D10a-Huck-3
2925: PPUSH
2926: CALL_OW 88
// DialogueOff ;
2930: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2934: LD_INT 1
2936: PPUSH
2937: LD_INT 7
2939: PPUSH
2940: LD_INT 1
2942: PPUSH
2943: LD_INT 1
2945: PPUSH
2946: CALL_OW 80
// planCaptured := true ;
2950: LD_ADDR_EXP 7
2954: PUSH
2955: LD_INT 1
2957: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2958: LD_STRING MEnd
2960: PPUSH
2961: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
2965: LD_STRING ACH_DIPLOMACY
2967: PPUSH
2968: CALL_OW 543
// canEnd := true ;
2972: LD_ADDR_EXP 10
2976: PUSH
2977: LD_INT 1
2979: ST_TO_ADDR
// missionTime := tick ;
2980: LD_ADDR_EXP 11
2984: PUSH
2985: LD_OWVAR 1
2989: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2990: LD_INT 35
2992: PPUSH
2993: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
2997: LD_INT 22
2999: PUSH
3000: LD_INT 1
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: LD_INT 3
3009: PUSH
3010: LD_INT 50
3012: PUSH
3013: EMPTY
3014: LIST
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 69
3028: IFFALSE 3144
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3030: LD_ADDR_VAR 0 1
3034: PUSH
3035: LD_INT 22
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: LD_INT 25
3047: PUSH
3048: LD_INT 4
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: PPUSH
3059: CALL_OW 69
3063: PUSH
3064: FOR_IN
3065: IFFALSE 3142
// begin if IsInUnit ( i ) then
3067: LD_VAR 0 1
3071: PPUSH
3072: CALL_OW 310
3076: IFFALSE 3089
// ComExitBuilding ( i ) else
3078: LD_VAR 0 1
3082: PPUSH
3083: CALL_OW 122
3087: GO 3140
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3089: LD_VAR 0 1
3093: PPUSH
3094: LD_INT 22
3096: PUSH
3097: LD_INT 1
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: LD_INT 3
3106: PUSH
3107: LD_INT 50
3109: PUSH
3110: EMPTY
3111: LIST
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PPUSH
3121: CALL_OW 69
3125: PPUSH
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 74
3135: PPUSH
3136: CALL_OW 128
// end ;
3140: GO 3064
3142: POP
3143: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3144: LD_INT 22
3146: PUSH
3147: LD_INT 1
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 3
3156: PUSH
3157: LD_INT 50
3159: PUSH
3160: EMPTY
3161: LIST
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PPUSH
3171: CALL_OW 69
3175: NOT
3176: IFFALSE 2990
// repeat wait ( 3 ) ;
3178: LD_INT 3
3180: PPUSH
3181: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3185: LD_ADDR_VAR 0 1
3189: PUSH
3190: LD_INT 22
3192: PUSH
3193: LD_INT 1
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: PUSH
3200: LD_INT 21
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: PUSH
3219: FOR_IN
3220: IFFALSE 3296
// begin if IsInArea ( i , stevensEscapeArea ) then
3222: LD_VAR 0 1
3226: PPUSH
3227: LD_INT 8
3229: PPUSH
3230: CALL_OW 308
3234: IFFALSE 3247
// begin RemoveUnit ( i ) ;
3236: LD_VAR 0 1
3240: PPUSH
3241: CALL_OW 64
// continue ;
3245: GO 3219
// end ; if IsInUnit ( i ) then
3247: LD_VAR 0 1
3251: PPUSH
3252: CALL_OW 310
3256: IFFALSE 3267
// ComExitBuilding ( i ) ;
3258: LD_VAR 0 1
3262: PPUSH
3263: CALL_OW 122
// if not HasTask ( i ) then
3267: LD_VAR 0 1
3271: PPUSH
3272: CALL_OW 314
3276: NOT
3277: IFFALSE 3294
// ComMoveXY ( i , 28 , 55 ) ;
3279: LD_VAR 0 1
3283: PPUSH
3284: LD_INT 28
3286: PPUSH
3287: LD_INT 55
3289: PPUSH
3290: CALL_OW 111
// end ;
3294: GO 3219
3296: POP
3297: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3298: LD_INT 22
3300: PUSH
3301: LD_INT 1
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 21
3310: PUSH
3311: LD_INT 1
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PPUSH
3322: CALL_OW 69
3326: NOT
3327: IFFALSE 3178
// end ; 2 :
3329: GO 3343
3331: LD_INT 2
3333: DOUBLE
3334: EQUAL
3335: IFTRUE 3339
3337: GO 3342
3339: POP
// ; end ;
3340: GO 3343
3342: POP
// end ;
3343: PPOPN 1
3345: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3346: LD_EXP 10
3350: IFFALSE 3707
3352: GO 3354
3354: DISABLE
3355: LD_INT 0
3357: PPUSH
3358: PPUSH
3359: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3360: LD_INT 10
3362: PPUSH
3363: LD_INT 1
3365: PPUSH
3366: CALL_OW 424
// if Difficulty < 2 then
3370: LD_OWVAR 67
3374: PUSH
3375: LD_INT 2
3377: LESS
3378: IFFALSE 3382
// exit ;
3380: GO 3707
// uc_side := 4 ;
3382: LD_ADDR_OWVAR 20
3386: PUSH
3387: LD_INT 4
3389: ST_TO_ADDR
// uc_nation := 1 ;
3390: LD_ADDR_OWVAR 21
3394: PUSH
3395: LD_INT 1
3397: ST_TO_ADDR
// InitHc ;
3398: CALL_OW 19
// tmp := [ ] ;
3402: LD_ADDR_VAR 0 3
3406: PUSH
3407: EMPTY
3408: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3409: LD_INT 0
3411: PPUSH
3412: LD_INT 5
3414: PPUSH
3415: LD_INT 10
3417: PPUSH
3418: CALL_OW 380
// un := CreateHuman ;
3422: LD_ADDR_VAR 0 1
3426: PUSH
3427: CALL_OW 44
3431: ST_TO_ADDR
// tmp := [ un ] ;
3432: LD_ADDR_VAR 0 3
3436: PUSH
3437: LD_VAR 0 1
3441: PUSH
3442: EMPTY
3443: LIST
3444: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3445: LD_VAR 0 1
3449: PPUSH
3450: LD_INT 226
3452: PPUSH
3453: LD_INT 86
3455: PPUSH
3456: LD_INT 0
3458: PPUSH
3459: CALL_OW 48
// ComHold ( un ) ;
3463: LD_VAR 0 1
3467: PPUSH
3468: CALL_OW 140
// for i = 1 to 3 do
3472: LD_ADDR_VAR 0 2
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_INT 3
3484: PUSH
3485: FOR_TO
3486: IFFALSE 3585
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3488: LD_INT 0
3490: PPUSH
3491: LD_INT 1
3493: PPUSH
3494: LD_INT 8
3496: PPUSH
3497: CALL_OW 380
// un := CreateHuman ;
3501: LD_ADDR_VAR 0 1
3505: PUSH
3506: CALL_OW 44
3510: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3511: LD_VAR 0 1
3515: PPUSH
3516: LD_INT 5
3518: PPUSH
3519: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3523: LD_VAR 0 1
3527: PPUSH
3528: LD_INT 215
3530: PUSH
3531: LD_INT 217
3533: PUSH
3534: LD_INT 219
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_VAR 0 2
3546: ARRAY
3547: PPUSH
3548: LD_INT 76
3550: PPUSH
3551: LD_INT 0
3553: PPUSH
3554: CALL_OW 48
// ComCrawl ( un ) ;
3558: LD_VAR 0 1
3562: PPUSH
3563: CALL_OW 137
// tmp := tmp ^ un ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: LD_VAR 0 3
3576: PUSH
3577: LD_VAR 0 1
3581: ADD
3582: ST_TO_ADDR
// end ;
3583: GO 3485
3585: POP
3586: POP
// repeat wait ( 0 0$1 ) ;
3587: LD_INT 35
3589: PPUSH
3590: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3594: LD_VAR 0 3
3598: PPUSH
3599: LD_INT 24
3601: PUSH
3602: LD_INT 1000
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PPUSH
3609: CALL_OW 72
3613: NOT
3614: IFFALSE 3587
// for i in tmp do
3616: LD_ADDR_VAR 0 2
3620: PUSH
3621: LD_VAR 0 3
3625: PUSH
3626: FOR_IN
3627: IFFALSE 3705
// begin wait ( 0 0$1 ) ;
3629: LD_INT 35
3631: PPUSH
3632: CALL_OW 67
// if Crawls ( i ) then
3636: LD_VAR 0 2
3640: PPUSH
3641: CALL_OW 318
3645: IFFALSE 3658
// ComWalk ( i ) else
3647: LD_VAR 0 2
3651: PPUSH
3652: CALL_OW 138
3656: GO 3703
// if GetClass ( i ) = class_sniper then
3658: LD_VAR 0 2
3662: PPUSH
3663: CALL_OW 257
3667: PUSH
3668: LD_INT 5
3670: EQUAL
3671: IFFALSE 3689
// ComAttackSoporific ( i , JMM ) else
3673: LD_VAR 0 2
3677: PPUSH
3678: LD_EXP 14
3682: PPUSH
3683: CALL_OW 166
3687: GO 3703
// ComAttackUnit ( i , JMM ) ;
3689: LD_VAR 0 2
3693: PPUSH
3694: LD_EXP 14
3698: PPUSH
3699: CALL_OW 115
// end ;
3703: GO 3626
3705: POP
3706: POP
// end ;
3707: PPOPN 3
3709: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3710: LD_EXP 7
3714: NOT
3715: PUSH
3716: LD_INT 1
3718: PPUSH
3719: CALL_OW 301
3723: AND
3724: IFFALSE 3736
3726: GO 3728
3728: DISABLE
// YouLost ( Lab ) ;
3729: LD_STRING Lab
3731: PPUSH
3732: CALL_OW 104
3736: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3737: LD_INT 10
3739: PPUSH
3740: LD_INT 22
3742: PUSH
3743: LD_INT 7
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PPUSH
3750: CALL_OW 70
3754: PUSH
3755: LD_INT 2
3757: GREATEREQUAL
3758: PUSH
3759: LD_INT 10
3761: PPUSH
3762: LD_INT 2
3764: PUSH
3765: LD_INT 34
3767: PUSH
3768: LD_INT 12
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 34
3777: PUSH
3778: LD_INT 51
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: LIST
3789: PPUSH
3790: CALL_OW 70
3794: AND
3795: PUSH
3796: LD_EXP 10
3800: AND
3801: PUSH
3802: LD_EXP 7
3806: AND
3807: PUSH
3808: LD_EXP 6
3812: AND
3813: IFFALSE 4069
3815: GO 3817
3817: DISABLE
3818: LD_INT 0
3820: PPUSH
3821: PPUSH
// begin m1 := false ;
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: LD_INT 0
3829: ST_TO_ADDR
// m2 := false ;
3830: LD_ADDR_VAR 0 2
3834: PUSH
3835: LD_INT 0
3837: ST_TO_ADDR
// if killCounter = 0 then
3838: LD_EXP 12
3842: PUSH
3843: LD_INT 0
3845: EQUAL
3846: IFFALSE 3855
// SetAchievement ( ACH_PACIFIST ) ;
3848: LD_STRING ACH_PACIFIST
3850: PPUSH
3851: CALL_OW 543
// if tick < 7 7$00 then
3855: LD_OWVAR 1
3859: PUSH
3860: LD_INT 14700
3862: LESS
3863: IFFALSE 3879
// begin wait ( 3 ) ;
3865: LD_INT 3
3867: PPUSH
3868: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3872: LD_STRING ACH_ASPEED_18
3874: PPUSH
3875: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3879: LD_STRING Explosion
3881: PPUSH
3882: LD_INT 1
3884: PPUSH
3885: CALL_OW 101
// if enteredContaminatedArea then
3889: LD_EXP 5
3893: IFFALSE 3915
// begin m1 := true ;
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_INT 1
3902: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3903: LD_STRING BioHazard
3905: PPUSH
3906: LD_INT 1
3908: PPUSH
3909: CALL_OW 101
// end else
3913: GO 3926
// AddMedal ( BioHazard , - 1 ) ;
3915: LD_STRING BioHazard
3917: PPUSH
3918: LD_INT 1
3920: NEG
3921: PPUSH
3922: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
3926: LD_EXP 11
3930: PUSH
3931: LD_INT 42000
3933: PUSH
3934: LD_INT 31500
3936: PUSH
3937: LD_INT 25200
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: LIST
3944: PUSH
3945: LD_OWVAR 67
3949: ARRAY
3950: LESSEQUAL
3951: IFFALSE 3973
// begin m2 := true ;
3953: LD_ADDR_VAR 0 2
3957: PUSH
3958: LD_INT 1
3960: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
3961: LD_STRING Speed
3963: PPUSH
3964: LD_INT 1
3966: PPUSH
3967: CALL_OW 101
// end else
3971: GO 3984
// AddMedal ( Speed , - 1 ) ;
3973: LD_STRING Speed
3975: PPUSH
3976: LD_INT 1
3978: NEG
3979: PPUSH
3980: CALL_OW 101
// if Difficulty = 3 and m1 and m2 then
3984: LD_OWVAR 67
3988: PUSH
3989: LD_INT 3
3991: EQUAL
3992: PUSH
3993: LD_VAR 0 1
3997: AND
3998: PUSH
3999: LD_VAR 0 2
4003: AND
4004: IFFALSE 4016
// SetAchievementEX ( ACH_AMER , 18 ) ;
4006: LD_STRING ACH_AMER
4008: PPUSH
4009: LD_INT 18
4011: PPUSH
4012: CALL_OW 564
// GiveMedals ( Main ) ;
4016: LD_STRING Main
4018: PPUSH
4019: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4023: LD_EXP 14
4027: PUSH
4028: LD_EXP 15
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PPUSH
4037: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4041: LD_EXP 14
4045: PPUSH
4046: LD_STRING 14a_JMM
4048: PPUSH
4049: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4053: LD_EXP 15
4057: PPUSH
4058: LD_STRING 14a_Burlak
4060: PPUSH
4061: CALL_OW 38
// YouWin ;
4065: CALL_OW 103
// end ; end_of_file
4069: PPOPN 2
4071: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4072: LD_INT 0
4074: PPUSH
4075: PPUSH
4076: PPUSH
4077: PPUSH
// uc_side := 1 ;
4078: LD_ADDR_OWVAR 20
4082: PUSH
4083: LD_INT 1
4085: ST_TO_ADDR
// uc_nation := 1 ;
4086: LD_ADDR_OWVAR 21
4090: PUSH
4091: LD_INT 1
4093: ST_TO_ADDR
// InitHc ;
4094: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 500 ) ;
4098: LD_INT 34
4100: PPUSH
4101: CALL_OW 274
4105: PPUSH
4106: LD_INT 1
4108: PPUSH
4109: LD_INT 500
4111: PPUSH
4112: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4116: LD_INT 34
4118: PPUSH
4119: CALL_OW 274
4123: PPUSH
4124: LD_INT 3
4126: PPUSH
4127: LD_INT 20
4129: PPUSH
4130: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4134: LD_ADDR_EXP 18
4138: PUSH
4139: LD_STRING Stevens
4141: PPUSH
4142: CALL_OW 25
4146: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4147: LD_ADDR_EXP 19
4151: PUSH
4152: LD_STRING Powell
4154: PPUSH
4155: CALL_OW 25
4159: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4160: LD_EXP 18
4164: PPUSH
4165: LD_INT 1
4167: PPUSH
4168: CALL_OW 52
// vehGuard := [ ] ;
4172: LD_ADDR_EXP 23
4176: PUSH
4177: EMPTY
4178: ST_TO_ADDR
// hc_importance := 0 ;
4179: LD_ADDR_OWVAR 32
4183: PUSH
4184: LD_INT 0
4186: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4187: LD_INT 4
4189: PPUSH
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 3
4195: PPUSH
4196: LD_INT 8
4198: PPUSH
4199: LD_INT 100
4201: PPUSH
4202: CALL 24843 0 5
// sibBomb := CreateVehicle ;
4206: LD_ADDR_EXP 21
4210: PUSH
4211: CALL_OW 45
4215: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4216: LD_EXP 21
4220: PPUSH
4221: LD_INT 1
4223: PPUSH
4224: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4228: LD_EXP 21
4232: PPUSH
4233: LD_INT 93
4235: PPUSH
4236: LD_INT 74
4238: PPUSH
4239: LD_INT 0
4241: PPUSH
4242: CALL_OW 48
// guards := [ ] ;
4246: LD_ADDR_EXP 22
4250: PUSH
4251: EMPTY
4252: ST_TO_ADDR
// for i = 1 to 3 do
4253: LD_ADDR_VAR 0 2
4257: PUSH
4258: DOUBLE
4259: LD_INT 1
4261: DEC
4262: ST_TO_ADDR
4263: LD_INT 3
4265: PUSH
4266: FOR_TO
4267: IFFALSE 4359
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
4269: LD_INT 0
4271: PPUSH
4272: LD_INT 1
4274: PPUSH
4275: LD_INT 8
4277: PUSH
4278: LD_INT 9
4280: PUSH
4281: LD_INT 10
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: LIST
4288: PUSH
4289: LD_OWVAR 67
4293: ARRAY
4294: PPUSH
4295: CALL_OW 380
// un := CreateHuman ;
4299: LD_ADDR_VAR 0 3
4303: PUSH
4304: CALL_OW 44
4308: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4309: LD_VAR 0 3
4313: PPUSH
4314: LD_INT 2
4316: PUSH
4317: LD_INT 3
4319: PUSH
4320: LD_INT 4
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: LIST
4327: PUSH
4328: LD_VAR 0 2
4332: ARRAY
4333: PPUSH
4334: LD_INT 0
4336: PPUSH
4337: CALL_OW 49
// guards := guards ^ un ;
4341: LD_ADDR_EXP 22
4345: PUSH
4346: LD_EXP 22
4350: PUSH
4351: LD_VAR 0 3
4355: ADD
4356: ST_TO_ADDR
// end ;
4357: GO 4266
4359: POP
4360: POP
// baseGuards := [ ] ;
4361: LD_ADDR_EXP 20
4365: PUSH
4366: EMPTY
4367: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
4368: LD_ADDR_VAR 0 2
4372: PUSH
4373: DOUBLE
4374: LD_INT 1
4376: DEC
4377: ST_TO_ADDR
4378: LD_INT 5
4380: PUSH
4381: LD_INT 6
4383: PUSH
4384: LD_INT 7
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: PUSH
4392: LD_OWVAR 67
4396: ARRAY
4397: PUSH
4398: FOR_TO
4399: IFFALSE 4545
// begin PrepareSoldier ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
4401: LD_INT 0
4403: PPUSH
4404: LD_INT 8
4406: PUSH
4407: LD_INT 9
4409: PUSH
4410: LD_INT 10
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: PUSH
4418: LD_OWVAR 67
4422: ARRAY
4423: PPUSH
4424: CALL_OW 381
// un := CreateHuman ;
4428: LD_ADDR_VAR 0 3
4432: PUSH
4433: CALL_OW 44
4437: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4438: LD_ADDR_EXP 20
4442: PUSH
4443: LD_EXP 20
4447: PUSH
4448: LD_VAR 0 3
4452: ADD
4453: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4454: LD_ADDR_VAR 0 4
4458: PUSH
4459: LD_INT 22
4461: PUSH
4462: LD_INT 1
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PUSH
4469: LD_INT 58
4471: PUSH
4472: EMPTY
4473: LIST
4474: PUSH
4475: LD_INT 30
4477: PUSH
4478: LD_INT 32
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: PPUSH
4490: CALL_OW 69
4494: ST_TO_ADDR
// if tmp then
4495: LD_VAR 0 4
4499: IFFALSE 4531
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4501: LD_VAR 0 3
4505: PPUSH
4506: LD_VAR 0 4
4510: PUSH
4511: LD_INT 1
4513: PPUSH
4514: LD_VAR 0 4
4518: PPUSH
4519: CALL_OW 12
4523: ARRAY
4524: PPUSH
4525: CALL_OW 52
4529: GO 4543
// PlaceHumanInUnit ( un , us_bar ) ;
4531: LD_VAR 0 3
4535: PPUSH
4536: LD_INT 51
4538: PPUSH
4539: CALL_OW 52
// end ;
4543: GO 4398
4545: POP
4546: POP
// if Difficulty > 1 then
4547: LD_OWVAR 67
4551: PUSH
4552: LD_INT 1
4554: GREATER
4555: IFFALSE 4599
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 ] [ Difficulty - 1 ] ) ;
4557: LD_INT 0
4559: PPUSH
4560: LD_INT 5
4562: PPUSH
4563: LD_INT 9
4565: PUSH
4566: LD_INT 10
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_OWVAR 67
4577: PUSH
4578: LD_INT 1
4580: MINUS
4581: ARRAY
4582: PPUSH
4583: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4587: CALL_OW 44
4591: PPUSH
4592: LD_INT 80
4594: PPUSH
4595: CALL_OW 52
// end ; for i = 1 to 3 do
4599: LD_ADDR_VAR 0 2
4603: PUSH
4604: DOUBLE
4605: LD_INT 1
4607: DEC
4608: ST_TO_ADDR
4609: LD_INT 3
4611: PUSH
4612: FOR_TO
4613: IFFALSE 4639
// begin PrepareMechanic ( false , 9 ) ;
4615: LD_INT 0
4617: PPUSH
4618: LD_INT 9
4620: PPUSH
4621: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4625: CALL_OW 44
4629: PPUSH
4630: LD_INT 43
4632: PPUSH
4633: CALL_OW 52
// end ;
4637: GO 4612
4639: POP
4640: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4641: CALL_OW 44
4645: PPUSH
4646: LD_INT 49
4648: PPUSH
4649: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4653: LD_ADDR_VAR 0 2
4657: PUSH
4658: DOUBLE
4659: LD_INT 1
4661: DEC
4662: ST_TO_ADDR
4663: LD_INT 1
4665: PUSH
4666: LD_OWVAR 67
4670: PLUS
4671: PUSH
4672: FOR_TO
4673: IFFALSE 4716
// begin PrepareEngineer ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
4675: LD_INT 0
4677: PPUSH
4678: LD_INT 8
4680: PUSH
4681: LD_INT 9
4683: PUSH
4684: LD_INT 10
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: PUSH
4692: LD_OWVAR 67
4696: ARRAY
4697: PPUSH
4698: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4702: CALL_OW 44
4706: PPUSH
4707: LD_INT 5
4709: PPUSH
4710: CALL_OW 52
// end ;
4714: GO 4672
4716: POP
4717: POP
// for i = 1 to 3 do
4718: LD_ADDR_VAR 0 2
4722: PUSH
4723: DOUBLE
4724: LD_INT 1
4726: DEC
4727: ST_TO_ADDR
4728: LD_INT 3
4730: PUSH
4731: FOR_TO
4732: IFFALSE 4758
// begin PrepareScientist ( false , 10 ) ;
4734: LD_INT 0
4736: PPUSH
4737: LD_INT 10
4739: PPUSH
4740: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4744: CALL_OW 44
4748: PPUSH
4749: LD_INT 1
4751: PPUSH
4752: CALL_OW 52
// end ;
4756: GO 4731
4758: POP
4759: POP
// end ;
4760: LD_VAR 0 1
4764: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4765: LD_EXP 22
4769: PUSH
4770: LD_EXP 2
4774: NOT
4775: AND
4776: IFFALSE 4962
4778: GO 4780
4780: DISABLE
4781: LD_INT 0
4783: PPUSH
4784: PPUSH
4785: PPUSH
// begin enable ;
4786: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4787: LD_ADDR_VAR 0 3
4791: PUSH
4792: LD_INT 204
4794: PUSH
4795: LD_INT 30
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 165
4804: PUSH
4805: LD_INT 24
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 195
4814: PUSH
4815: LD_INT 6
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 223
4824: PUSH
4825: LD_INT 54
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 214
4834: PUSH
4835: LD_INT 84
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PUSH
4842: LD_INT 206
4844: PUSH
4845: LD_INT 71
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: ST_TO_ADDR
// for i in guards do
4860: LD_ADDR_VAR 0 1
4864: PUSH
4865: LD_EXP 22
4869: PUSH
4870: FOR_IN
4871: IFFALSE 4960
// begin if HasTask ( i ) then
4873: LD_VAR 0 1
4877: PPUSH
4878: CALL_OW 314
4882: IFFALSE 4888
// continue else
4884: GO 4870
4886: GO 4958
// begin j := rand ( 1 , 6 ) ;
4888: LD_ADDR_VAR 0 2
4892: PUSH
4893: LD_INT 1
4895: PPUSH
4896: LD_INT 6
4898: PPUSH
4899: CALL_OW 12
4903: ST_TO_ADDR
// if not See ( 7 , i ) then
4904: LD_INT 7
4906: PPUSH
4907: LD_VAR 0 1
4911: PPUSH
4912: CALL_OW 292
4916: NOT
4917: IFFALSE 4958
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
4919: LD_VAR 0 1
4923: PPUSH
4924: LD_VAR 0 3
4928: PUSH
4929: LD_VAR 0 2
4933: ARRAY
4934: PUSH
4935: LD_INT 1
4937: ARRAY
4938: PPUSH
4939: LD_VAR 0 3
4943: PUSH
4944: LD_VAR 0 2
4948: ARRAY
4949: PUSH
4950: LD_INT 2
4952: ARRAY
4953: PPUSH
4954: CALL_OW 114
// end ; end ;
4958: GO 4870
4960: POP
4961: POP
// end ;
4962: PPOPN 3
4964: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
4965: LD_EXP 23
4969: PUSH
4970: LD_EXP 7
4974: NOT
4975: AND
4976: IFFALSE 5047
4978: GO 4980
4980: DISABLE
4981: LD_INT 0
4983: PPUSH
// begin enable ;
4984: ENABLE
// for i in vehGuard do
4985: LD_ADDR_VAR 0 1
4989: PUSH
4990: LD_EXP 23
4994: PUSH
4995: FOR_IN
4996: IFFALSE 5045
// if IsOk ( vehGuard ) then
4998: LD_EXP 23
5002: PPUSH
5003: CALL_OW 302
5007: IFFALSE 5043
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5009: LD_VAR 0 1
5013: PPUSH
5014: LD_INT 22
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PPUSH
5024: CALL_OW 69
5028: PPUSH
5029: LD_VAR 0 1
5033: PPUSH
5034: CALL_OW 74
5038: PPUSH
5039: CALL_OW 115
5043: GO 4995
5045: POP
5046: POP
// end ;
5047: PPOPN 1
5049: END
// every 9 9$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured do
5050: LD_EXP 4
5054: PUSH
5055: LD_INT 43
5057: PPUSH
5058: CALL_OW 302
5062: AND
5063: PUSH
5064: LD_EXP 7
5068: NOT
5069: AND
5070: IFFALSE 5118
5072: GO 5074
5074: DISABLE
// begin enable ;
5075: ENABLE
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5076: LD_INT 43
5078: PPUSH
5079: LD_INT 5
5081: PPUSH
5082: LD_INT 3
5084: PPUSH
5085: LD_INT 2
5087: PPUSH
5088: LD_INT 7
5090: PUSH
5091: LD_INT 7
5093: PUSH
5094: LD_INT 9
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: LIST
5101: PUSH
5102: LD_INT 1
5104: PPUSH
5105: LD_INT 3
5107: PPUSH
5108: CALL_OW 12
5112: ARRAY
5113: PPUSH
5114: CALL_OW 125
// end ;
5118: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5119: LD_INT 22
5121: PUSH
5122: LD_INT 1
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: LD_INT 25
5131: PUSH
5132: LD_INT 5
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PUSH
5139: LD_INT 50
5141: PUSH
5142: EMPTY
5143: LIST
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: LIST
5149: PPUSH
5150: CALL_OW 69
5154: PUSH
5155: LD_EXP 7
5159: NOT
5160: AND
5161: IFFALSE 5390
5163: GO 5165
5165: DISABLE
5166: LD_INT 0
5168: PPUSH
5169: PPUSH
// begin enable ;
5170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5171: LD_ADDR_VAR 0 1
5175: PUSH
5176: LD_INT 22
5178: PUSH
5179: LD_INT 1
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 25
5188: PUSH
5189: LD_INT 5
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PUSH
5196: LD_INT 50
5198: PUSH
5199: EMPTY
5200: LIST
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: PPUSH
5207: CALL_OW 69
5211: ST_TO_ADDR
// if not tmp then
5212: LD_VAR 0 1
5216: NOT
5217: IFFALSE 5221
// exit ;
5219: GO 5390
// b := IsInUnit ( tmp [ 1 ] ) ;
5221: LD_ADDR_VAR 0 2
5225: PUSH
5226: LD_VAR 0 1
5230: PUSH
5231: LD_INT 1
5233: ARRAY
5234: PPUSH
5235: CALL_OW 310
5239: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5240: LD_VAR 0 2
5244: NOT
5245: PUSH
5246: LD_VAR 0 1
5250: PUSH
5251: LD_INT 1
5253: ARRAY
5254: PPUSH
5255: CALL_OW 314
5259: OR
5260: IFFALSE 5264
// exit ;
5262: GO 5390
// if b = us_bun1 then
5264: LD_VAR 0 2
5268: PUSH
5269: LD_INT 80
5271: EQUAL
5272: IFFALSE 5333
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5274: LD_VAR 0 1
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PPUSH
5283: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5287: LD_VAR 0 1
5291: PUSH
5292: LD_INT 1
5294: ARRAY
5295: PPUSH
5296: LD_INT 27
5298: PPUSH
5299: LD_INT 44
5301: PPUSH
5302: CALL_OW 174
// if IsOk ( us_bun2 ) then
5306: LD_INT 55
5308: PPUSH
5309: CALL_OW 302
5313: IFFALSE 5331
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5315: LD_VAR 0 1
5319: PUSH
5320: LD_INT 1
5322: ARRAY
5323: PPUSH
5324: LD_INT 55
5326: PPUSH
5327: CALL_OW 180
// end else
5331: GO 5390
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5333: LD_VAR 0 1
5337: PUSH
5338: LD_INT 1
5340: ARRAY
5341: PPUSH
5342: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5346: LD_VAR 0 1
5350: PUSH
5351: LD_INT 1
5353: ARRAY
5354: PPUSH
5355: LD_INT 92
5357: PPUSH
5358: LD_INT 51
5360: PPUSH
5361: CALL_OW 174
// if IsOk ( us_bun1 ) then
5365: LD_INT 80
5367: PPUSH
5368: CALL_OW 302
5372: IFFALSE 5390
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5374: LD_VAR 0 1
5378: PUSH
5379: LD_INT 1
5381: ARRAY
5382: PPUSH
5383: LD_INT 80
5385: PPUSH
5386: CALL_OW 180
// end ; end ;
5390: PPOPN 2
5392: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5393: LD_EXP 7
5397: NOT
5398: PUSH
5399: LD_INT 9
5401: PPUSH
5402: LD_INT 22
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: LD_INT 21
5414: PUSH
5415: LD_INT 3
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PUSH
5422: LD_INT 3
5424: PUSH
5425: LD_INT 24
5427: PUSH
5428: LD_INT 1000
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: PPUSH
5444: CALL_OW 70
5448: AND
5449: IFFALSE 5860
5451: GO 5453
5453: DISABLE
5454: LD_INT 0
5456: PPUSH
5457: PPUSH
5458: PPUSH
5459: PPUSH
// begin enable ;
5460: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5461: LD_ADDR_VAR 0 2
5465: PUSH
5466: LD_INT 22
5468: PUSH
5469: LD_INT 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 25
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 24
5488: PUSH
5489: LD_INT 1000
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: LIST
5500: PPUSH
5501: CALL_OW 69
5505: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5506: LD_ADDR_VAR 0 3
5510: PUSH
5511: LD_INT 22
5513: PUSH
5514: LD_INT 1
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: LD_INT 25
5523: PUSH
5524: LD_INT 2
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 3
5533: PUSH
5534: LD_INT 24
5536: PUSH
5537: LD_INT 750
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: LIST
5552: PPUSH
5553: CALL_OW 69
5557: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5558: LD_ADDR_VAR 0 4
5562: PUSH
5563: LD_INT 9
5565: PPUSH
5566: LD_INT 22
5568: PUSH
5569: LD_INT 1
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: PUSH
5576: LD_INT 21
5578: PUSH
5579: LD_INT 3
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PUSH
5586: LD_INT 3
5588: PUSH
5589: LD_INT 24
5591: PUSH
5592: LD_INT 1000
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: PPUSH
5608: CALL_OW 70
5612: PUSH
5613: LD_INT 1
5615: DIFF
5616: ST_TO_ADDR
// if not tmp and not tmp2 then
5617: LD_VAR 0 2
5621: NOT
5622: PUSH
5623: LD_VAR 0 3
5627: NOT
5628: AND
5629: IFFALSE 5633
// exit ;
5631: GO 5860
// if tmp and b then
5633: LD_VAR 0 2
5637: PUSH
5638: LD_VAR 0 4
5642: AND
5643: IFFALSE 5773
// for i in tmp do
5645: LD_ADDR_VAR 0 1
5649: PUSH
5650: LD_VAR 0 2
5654: PUSH
5655: FOR_IN
5656: IFFALSE 5771
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5658: LD_VAR 0 1
5662: PPUSH
5663: CALL_OW 110
5667: PUSH
5668: LD_INT 1
5670: EQUAL
5671: PUSH
5672: LD_VAR 0 1
5676: PPUSH
5677: CALL_OW 256
5681: PUSH
5682: LD_INT 1000
5684: LESS
5685: AND
5686: IFFALSE 5692
// continue else
5688: GO 5655
5690: GO 5719
// if GetTag ( i ) = 1 then
5692: LD_VAR 0 1
5696: PPUSH
5697: CALL_OW 110
5701: PUSH
5702: LD_INT 1
5704: EQUAL
5705: IFFALSE 5719
// SetTag ( i , 0 ) ;
5707: LD_VAR 0 1
5711: PPUSH
5712: LD_INT 0
5714: PPUSH
5715: CALL_OW 109
// if IsInUnit ( i ) then
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 310
5728: IFFALSE 5739
// ComExitBuilding ( i ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: CALL_OW 122
// if not HasTask ( i ) then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 314
5748: NOT
5749: IFFALSE 5769
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5751: LD_VAR 0 1
5755: PPUSH
5756: LD_VAR 0 4
5760: PUSH
5761: LD_INT 1
5763: ARRAY
5764: PPUSH
5765: CALL_OW 190
// end ;
5769: GO 5655
5771: POP
5772: POP
// if tmp2 then
5773: LD_VAR 0 3
5777: IFFALSE 5860
// for i in tmp2 do
5779: LD_ADDR_VAR 0 1
5783: PUSH
5784: LD_VAR 0 3
5788: PUSH
5789: FOR_IN
5790: IFFALSE 5858
// begin if not GetTag ( i ) = 1 then
5792: LD_VAR 0 1
5796: PPUSH
5797: CALL_OW 110
5801: PUSH
5802: LD_INT 1
5804: EQUAL
5805: NOT
5806: IFFALSE 5820
// SetTag ( i , 1 ) ;
5808: LD_VAR 0 1
5812: PPUSH
5813: LD_INT 1
5815: PPUSH
5816: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5820: LD_VAR 0 1
5824: PPUSH
5825: LD_INT 88
5827: PPUSH
5828: LD_INT 75
5830: PPUSH
5831: CALL_OW 297
5835: PUSH
5836: LD_INT 6
5838: GREATER
5839: IFFALSE 5856
// ComMoveXY ( i , 88 , 75 ) ;
5841: LD_VAR 0 1
5845: PPUSH
5846: LD_INT 88
5848: PPUSH
5849: LD_INT 75
5851: PPUSH
5852: CALL_OW 111
// end ;
5856: GO 5789
5858: POP
5859: POP
// end ;
5860: PPOPN 4
5862: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5863: LD_EXP 7
5867: NOT
5868: PUSH
5869: LD_EXP 9
5873: AND
5874: PUSH
5875: LD_INT 9
5877: PPUSH
5878: LD_INT 22
5880: PUSH
5881: LD_INT 1
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: PUSH
5888: LD_INT 21
5890: PUSH
5891: LD_INT 1
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: LD_INT 24
5903: PUSH
5904: LD_INT 1000
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 70
5924: AND
5925: IFFALSE 6098
5927: GO 5929
5929: DISABLE
5930: LD_INT 0
5932: PPUSH
5933: PPUSH
5934: PPUSH
// begin enable ;
5935: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
5936: LD_ADDR_VAR 0 2
5940: PUSH
5941: LD_INT 22
5943: PUSH
5944: LD_INT 1
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PUSH
5951: LD_INT 25
5953: PUSH
5954: LD_INT 4
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: PPUSH
5965: CALL_OW 69
5969: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5970: LD_ADDR_VAR 0 3
5974: PUSH
5975: LD_INT 9
5977: PPUSH
5978: LD_INT 22
5980: PUSH
5981: LD_INT 1
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: PUSH
5988: LD_INT 21
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 3
6000: PUSH
6001: LD_INT 24
6003: PUSH
6004: LD_INT 1000
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: LIST
6019: PPUSH
6020: CALL_OW 70
6024: ST_TO_ADDR
// if not sci or not tmp then
6025: LD_VAR 0 2
6029: NOT
6030: PUSH
6031: LD_VAR 0 3
6035: NOT
6036: OR
6037: IFFALSE 6041
// exit ;
6039: GO 6098
// for i in sci do
6041: LD_ADDR_VAR 0 1
6045: PUSH
6046: LD_VAR 0 2
6050: PUSH
6051: FOR_IN
6052: IFFALSE 6096
// if IsInUnit ( i ) then
6054: LD_VAR 0 1
6058: PPUSH
6059: CALL_OW 310
6063: IFFALSE 6076
// ComExitBuilding ( i ) else
6065: LD_VAR 0 1
6069: PPUSH
6070: CALL_OW 122
6074: GO 6094
// ComHeal ( i , tmp [ 1 ] ) ;
6076: LD_VAR 0 1
6080: PPUSH
6081: LD_VAR 0 3
6085: PUSH
6086: LD_INT 1
6088: ARRAY
6089: PPUSH
6090: CALL_OW 128
6094: GO 6051
6096: POP
6097: POP
// end ;
6098: PPOPN 3
6100: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6101: LD_EXP 7
6105: NOT
6106: PUSH
6107: LD_EXP 9
6111: AND
6112: PUSH
6113: LD_INT 1
6115: PPUSH
6116: CALL_OW 302
6120: AND
6121: PUSH
6122: LD_INT 9
6124: PPUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 1
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 21
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: LD_INT 3
6147: PUSH
6148: LD_INT 24
6150: PUSH
6151: LD_INT 1000
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 70
6171: NOT
6172: AND
6173: PUSH
6174: LD_INT 22
6176: PUSH
6177: LD_INT 1
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: LD_INT 25
6186: PUSH
6187: LD_INT 4
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 56
6196: PUSH
6197: EMPTY
6198: LIST
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: PPUSH
6205: CALL_OW 69
6209: AND
6210: IFFALSE 6303
6212: GO 6214
6214: DISABLE
6215: LD_INT 0
6217: PPUSH
// begin enable ;
6218: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6219: LD_ADDR_VAR 0 1
6223: PUSH
6224: LD_INT 22
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 25
6236: PUSH
6237: LD_INT 4
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 56
6246: PUSH
6247: EMPTY
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: LIST
6254: PPUSH
6255: CALL_OW 69
6259: PUSH
6260: FOR_IN
6261: IFFALSE 6301
// if not GetTag ( i ) and not HasTask ( i ) then
6263: LD_VAR 0 1
6267: PPUSH
6268: CALL_OW 110
6272: NOT
6273: PUSH
6274: LD_VAR 0 1
6278: PPUSH
6279: CALL_OW 314
6283: NOT
6284: AND
6285: IFFALSE 6299
// ComEnterUnit ( i , us_lab ) ;
6287: LD_VAR 0 1
6291: PPUSH
6292: LD_INT 1
6294: PPUSH
6295: CALL_OW 120
6299: GO 6260
6301: POP
6302: POP
// end ;
6303: PPOPN 1
6305: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6306: LD_EXP 7
6310: NOT
6311: PUSH
6312: LD_INT 9
6314: PPUSH
6315: LD_INT 22
6317: PUSH
6318: LD_INT 1
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: LD_INT 21
6327: PUSH
6328: LD_INT 3
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PUSH
6335: LD_INT 3
6337: PUSH
6338: LD_INT 24
6340: PUSH
6341: LD_INT 1000
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: LIST
6356: PPUSH
6357: CALL_OW 70
6361: NOT
6362: AND
6363: PUSH
6364: LD_INT 22
6366: PUSH
6367: LD_INT 1
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PUSH
6374: LD_INT 25
6376: PUSH
6377: LD_INT 2
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: PUSH
6384: LD_INT 56
6386: PUSH
6387: EMPTY
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: PPUSH
6395: CALL_OW 69
6399: AND
6400: IFFALSE 6493
6402: GO 6404
6404: DISABLE
6405: LD_INT 0
6407: PPUSH
// begin enable ;
6408: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6409: LD_ADDR_VAR 0 1
6413: PUSH
6414: LD_INT 22
6416: PUSH
6417: LD_INT 1
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 2
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 56
6436: PUSH
6437: EMPTY
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: PPUSH
6445: CALL_OW 69
6449: PUSH
6450: FOR_IN
6451: IFFALSE 6491
// if not HasTask ( i ) and not GetTag ( i ) then
6453: LD_VAR 0 1
6457: PPUSH
6458: CALL_OW 314
6462: NOT
6463: PUSH
6464: LD_VAR 0 1
6468: PPUSH
6469: CALL_OW 110
6473: NOT
6474: AND
6475: IFFALSE 6489
// ComEnterUnit ( i , us_depot ) ;
6477: LD_VAR 0 1
6481: PPUSH
6482: LD_INT 5
6484: PPUSH
6485: CALL_OW 120
6489: GO 6450
6491: POP
6492: POP
// end ;
6493: PPOPN 1
6495: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6496: LD_EXP 9
6500: PUSH
6501: LD_INT 0
6503: LESSEQUAL
6504: PUSH
6505: LD_EXP 18
6509: PPUSH
6510: CALL_OW 301
6514: OR
6515: PUSH
6516: LD_INT 22
6518: PUSH
6519: LD_INT 1
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: LD_INT 25
6528: PUSH
6529: LD_INT 2
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PPUSH
6540: CALL_OW 69
6544: AND
6545: IFFALSE 6586
6547: GO 6549
6549: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6550: LD_INT 22
6552: PUSH
6553: LD_INT 1
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: LD_INT 25
6562: PUSH
6563: LD_INT 2
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PPUSH
6574: CALL_OW 69
6578: PPUSH
6579: LD_INT 1
6581: PPUSH
6582: CALL_OW 167
6586: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6587: LD_EXP 7
6591: NOT
6592: PUSH
6593: LD_INT 7
6595: PPUSH
6596: LD_INT 22
6598: PUSH
6599: LD_INT 7
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PPUSH
6606: CALL_OW 70
6610: AND
6611: IFFALSE 6702
6613: GO 6615
6615: DISABLE
6616: LD_INT 0
6618: PPUSH
// begin wait ( 0 0$2 ) ;
6619: LD_INT 70
6621: PPUSH
6622: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6626: LD_ADDR_VAR 0 1
6630: PUSH
6631: LD_INT 22
6633: PUSH
6634: LD_INT 1
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 25
6643: PUSH
6644: LD_INT 1
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PPUSH
6655: CALL_OW 69
6659: PUSH
6660: FOR_IN
6661: IFFALSE 6700
// begin if IsInUnit ( i ) then
6663: LD_VAR 0 1
6667: PPUSH
6668: CALL_OW 310
6672: IFFALSE 6683
// ComExitBuilding ( i ) ;
6674: LD_VAR 0 1
6678: PPUSH
6679: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6683: LD_VAR 0 1
6687: PPUSH
6688: LD_INT 92
6690: PPUSH
6691: LD_INT 78
6693: PPUSH
6694: CALL_OW 174
// end ;
6698: GO 6660
6700: POP
6701: POP
// end ; end_of_file
6702: PPOPN 1
6704: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6705: LD_VAR 0 1
6709: PPUSH
6710: LD_VAR 0 2
6714: PPUSH
6715: LD_VAR 0 3
6719: PPUSH
6720: CALL 1560 0 3
6724: PPOPN 3
6726: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6727: LD_EXP 14
6731: PPUSH
6732: CALL_OW 257
6736: PUSH
6737: LD_INT 4
6739: EQUAL
6740: PUSH
6741: LD_EXP 15
6745: PPUSH
6746: CALL_OW 257
6750: PUSH
6751: LD_INT 4
6753: EQUAL
6754: OR
6755: PUSH
6756: LD_INT 22
6758: PUSH
6759: LD_INT 7
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: LD_INT 21
6768: PUSH
6769: LD_INT 3
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PPUSH
6780: CALL_OW 69
6784: OR
6785: IFFALSE 6789
// exit ;
6787: GO 6827
// if un = JMM then
6789: LD_VAR 0 1
6793: PUSH
6794: LD_EXP 14
6798: EQUAL
6799: IFFALSE 6808
// YouLost ( JMM ) ;
6801: LD_STRING JMM
6803: PPUSH
6804: CALL_OW 104
// if un = Burlak then
6808: LD_VAR 0 1
6812: PUSH
6813: LD_EXP 15
6817: EQUAL
6818: IFFALSE 6827
// YouLost ( Burlak ) ;
6820: LD_STRING Burlak
6822: PPUSH
6823: CALL_OW 104
// end ;
6827: PPOPN 1
6829: END
// on UnitDestroyed ( un ) do begin if un = JMM then
6830: LD_VAR 0 1
6834: PUSH
6835: LD_EXP 14
6839: EQUAL
6840: IFFALSE 6849
// YouLost ( JMM ) ;
6842: LD_STRING JMM
6844: PPUSH
6845: CALL_OW 104
// if un = Burlak then
6849: LD_VAR 0 1
6853: PUSH
6854: LD_EXP 15
6858: EQUAL
6859: IFFALSE 6868
// YouLost ( Burlak ) ;
6861: LD_STRING Burlak
6863: PPUSH
6864: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
6868: LD_VAR 0 1
6872: PUSH
6873: LD_INT 21
6875: PUSH
6876: LD_INT 1
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: LD_INT 23
6885: PUSH
6886: LD_INT 1
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PPUSH
6897: CALL_OW 69
6901: IN
6902: IFFALSE 6918
// killCounter := killCounter + 1 ;
6904: LD_ADDR_EXP 12
6908: PUSH
6909: LD_EXP 12
6913: PUSH
6914: LD_INT 1
6916: PLUS
6917: ST_TO_ADDR
// end ;
6918: PPOPN 1
6920: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6921: LD_VAR 0 2
6925: PUSH
6926: LD_INT 7
6928: EQUAL
6929: PUSH
6930: LD_VAR 0 1
6934: PUSH
6935: LD_INT 2
6937: PUSH
6938: LD_INT 30
6940: PUSH
6941: LD_INT 31
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 30
6950: PUSH
6951: LD_INT 32
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 30
6960: PUSH
6961: LD_INT 33
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: PPUSH
6974: CALL_OW 69
6978: IN
6979: AND
6980: IFFALSE 6996
// bunkerCounter := bunkerCounter + 1 ;
6982: LD_ADDR_EXP 13
6986: PUSH
6987: LD_EXP 13
6991: PUSH
6992: LD_INT 1
6994: PLUS
6995: ST_TO_ADDR
// end ;
6996: PPOPN 3
6998: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 255
7008: PUSH
7009: LD_INT 7
7011: EQUAL
7012: IFFALSE 7022
// artifactPickedUp := true ;
7014: LD_ADDR_EXP 6
7018: PUSH
7019: LD_INT 1
7021: ST_TO_ADDR
// end ;
7022: PPOPN 2
7024: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7025: LD_ADDR_EXP 6
7029: PUSH
7030: LD_INT 0
7032: ST_TO_ADDR
7033: PPOPN 2
7035: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) <> 1 then
7036: LD_VAR 0 1
7040: PPUSH
7041: CALL_OW 255
7045: PUSH
7046: LD_INT 1
7048: NONEQUAL
7049: IFFALSE 7053
// exit ;
7051: GO 7100
// wait ( 0 0$5 ) ;
7053: LD_INT 175
7055: PPUSH
7056: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7060: LD_VAR 0 1
7064: PPUSH
7065: CALL_OW 263
7069: PUSH
7070: LD_INT 2
7072: EQUAL
7073: IFFALSE 7084
// Connect ( vehicle ) ;
7075: LD_VAR 0 1
7079: PPUSH
7080: CALL 27898 0 1
// vehGuard := vehGuard ^ vehicle ;
7084: LD_ADDR_EXP 23
7088: PUSH
7089: LD_EXP 23
7093: PUSH
7094: LD_VAR 0 1
7098: ADD
7099: ST_TO_ADDR
// end ;
7100: PPOPN 2
7102: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7103: LD_VAR 0 1
7107: PUSH
7108: LD_INT 1
7110: EQUAL
7111: PUSH
7112: LD_EXP 7
7116: NOT
7117: AND
7118: IFFALSE 7153
// begin planCaptured := true ;
7120: LD_ADDR_EXP 7
7124: PUSH
7125: LD_INT 1
7127: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7128: LD_STRING MEnd
7130: PPUSH
7131: CALL_OW 337
// canEnd := true ;
7135: LD_ADDR_EXP 10
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// missionTime := tick ;
7143: LD_ADDR_EXP 11
7147: PUSH
7148: LD_OWVAR 1
7152: ST_TO_ADDR
// end ; end ;
7153: PPOPN 3
7155: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7156: LD_VAR 0 1
7160: PPUSH
7161: CALL 18453 0 1
// end ; end_of_file
7165: PPOPN 1
7167: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
7168: LD_INT 0
7170: PPUSH
// ru_radar := 98 ;
7171: LD_ADDR_EXP 24
7175: PUSH
7176: LD_INT 98
7178: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7179: LD_ADDR_EXP 25
7183: PUSH
7184: LD_INT 89
7186: ST_TO_ADDR
// us_hack := 99 ;
7187: LD_ADDR_EXP 26
7191: PUSH
7192: LD_INT 99
7194: ST_TO_ADDR
// us_artillery := 97 ;
7195: LD_ADDR_EXP 27
7199: PUSH
7200: LD_INT 97
7202: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7203: LD_ADDR_EXP 28
7207: PUSH
7208: LD_INT 91
7210: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
7211: LD_ADDR_EXP 29
7215: PUSH
7216: LD_INT 92
7218: ST_TO_ADDR
// tech_Artillery := 80 ;
7219: LD_ADDR_EXP 30
7223: PUSH
7224: LD_INT 80
7226: ST_TO_ADDR
// tech_RadMat := 81 ;
7227: LD_ADDR_EXP 31
7231: PUSH
7232: LD_INT 81
7234: ST_TO_ADDR
// tech_BasicTools := 82 ;
7235: LD_ADDR_EXP 32
7239: PUSH
7240: LD_INT 82
7242: ST_TO_ADDR
// tech_Cargo := 83 ;
7243: LD_ADDR_EXP 33
7247: PUSH
7248: LD_INT 83
7250: ST_TO_ADDR
// tech_Track := 84 ;
7251: LD_ADDR_EXP 34
7255: PUSH
7256: LD_INT 84
7258: ST_TO_ADDR
// tech_Crane := 85 ;
7259: LD_ADDR_EXP 35
7263: PUSH
7264: LD_INT 85
7266: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7267: LD_ADDR_EXP 36
7271: PUSH
7272: LD_INT 86
7274: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7275: LD_ADDR_EXP 37
7279: PUSH
7280: LD_INT 87
7282: ST_TO_ADDR
// end ;
7283: LD_VAR 0 1
7287: RET
// every 1 do
7288: GO 7290
7290: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7291: CALL 7168 0 0
7295: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7296: GO 7298
7298: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7299: LD_STRING initStreamRollete();
7301: PPUSH
7302: CALL_OW 559
// InitStreamMode ;
7306: CALL 7315 0 0
// DefineStreamItems ( ) ;
7310: CALL 7755 0 0
// end ;
7314: END
// function InitStreamMode ; begin
7315: LD_INT 0
7317: PPUSH
// streamModeActive := false ;
7318: LD_ADDR_EXP 38
7322: PUSH
7323: LD_INT 0
7325: ST_TO_ADDR
// normalCounter := 36 ;
7326: LD_ADDR_EXP 39
7330: PUSH
7331: LD_INT 36
7333: ST_TO_ADDR
// hardcoreCounter := 16 ;
7334: LD_ADDR_EXP 40
7338: PUSH
7339: LD_INT 16
7341: ST_TO_ADDR
// sRocket := false ;
7342: LD_ADDR_EXP 43
7346: PUSH
7347: LD_INT 0
7349: ST_TO_ADDR
// sSpeed := false ;
7350: LD_ADDR_EXP 42
7354: PUSH
7355: LD_INT 0
7357: ST_TO_ADDR
// sEngine := false ;
7358: LD_ADDR_EXP 44
7362: PUSH
7363: LD_INT 0
7365: ST_TO_ADDR
// sSpec := false ;
7366: LD_ADDR_EXP 41
7370: PUSH
7371: LD_INT 0
7373: ST_TO_ADDR
// sLevel := false ;
7374: LD_ADDR_EXP 45
7378: PUSH
7379: LD_INT 0
7381: ST_TO_ADDR
// sArmoury := false ;
7382: LD_ADDR_EXP 46
7386: PUSH
7387: LD_INT 0
7389: ST_TO_ADDR
// sRadar := false ;
7390: LD_ADDR_EXP 47
7394: PUSH
7395: LD_INT 0
7397: ST_TO_ADDR
// sBunker := false ;
7398: LD_ADDR_EXP 48
7402: PUSH
7403: LD_INT 0
7405: ST_TO_ADDR
// sHack := false ;
7406: LD_ADDR_EXP 49
7410: PUSH
7411: LD_INT 0
7413: ST_TO_ADDR
// sFire := false ;
7414: LD_ADDR_EXP 50
7418: PUSH
7419: LD_INT 0
7421: ST_TO_ADDR
// sRefresh := false ;
7422: LD_ADDR_EXP 51
7426: PUSH
7427: LD_INT 0
7429: ST_TO_ADDR
// sExp := false ;
7430: LD_ADDR_EXP 52
7434: PUSH
7435: LD_INT 0
7437: ST_TO_ADDR
// sDepot := false ;
7438: LD_ADDR_EXP 53
7442: PUSH
7443: LD_INT 0
7445: ST_TO_ADDR
// sFlag := false ;
7446: LD_ADDR_EXP 54
7450: PUSH
7451: LD_INT 0
7453: ST_TO_ADDR
// sKamikadze := false ;
7454: LD_ADDR_EXP 62
7458: PUSH
7459: LD_INT 0
7461: ST_TO_ADDR
// sTroll := false ;
7462: LD_ADDR_EXP 63
7466: PUSH
7467: LD_INT 0
7469: ST_TO_ADDR
// sSlow := false ;
7470: LD_ADDR_EXP 64
7474: PUSH
7475: LD_INT 0
7477: ST_TO_ADDR
// sLack := false ;
7478: LD_ADDR_EXP 65
7482: PUSH
7483: LD_INT 0
7485: ST_TO_ADDR
// sTank := false ;
7486: LD_ADDR_EXP 67
7490: PUSH
7491: LD_INT 0
7493: ST_TO_ADDR
// sRemote := false ;
7494: LD_ADDR_EXP 68
7498: PUSH
7499: LD_INT 0
7501: ST_TO_ADDR
// sPowell := false ;
7502: LD_ADDR_EXP 69
7506: PUSH
7507: LD_INT 0
7509: ST_TO_ADDR
// sTeleport := false ;
7510: LD_ADDR_EXP 72
7514: PUSH
7515: LD_INT 0
7517: ST_TO_ADDR
// sOilTower := false ;
7518: LD_ADDR_EXP 74
7522: PUSH
7523: LD_INT 0
7525: ST_TO_ADDR
// sShovel := false ;
7526: LD_ADDR_EXP 75
7530: PUSH
7531: LD_INT 0
7533: ST_TO_ADDR
// sSheik := false ;
7534: LD_ADDR_EXP 76
7538: PUSH
7539: LD_INT 0
7541: ST_TO_ADDR
// sEarthquake := false ;
7542: LD_ADDR_EXP 78
7546: PUSH
7547: LD_INT 0
7549: ST_TO_ADDR
// sAI := false ;
7550: LD_ADDR_EXP 79
7554: PUSH
7555: LD_INT 0
7557: ST_TO_ADDR
// sCargo := false ;
7558: LD_ADDR_EXP 82
7562: PUSH
7563: LD_INT 0
7565: ST_TO_ADDR
// sDLaser := false ;
7566: LD_ADDR_EXP 83
7570: PUSH
7571: LD_INT 0
7573: ST_TO_ADDR
// sExchange := false ;
7574: LD_ADDR_EXP 84
7578: PUSH
7579: LD_INT 0
7581: ST_TO_ADDR
// sFac := false ;
7582: LD_ADDR_EXP 85
7586: PUSH
7587: LD_INT 0
7589: ST_TO_ADDR
// sPower := false ;
7590: LD_ADDR_EXP 86
7594: PUSH
7595: LD_INT 0
7597: ST_TO_ADDR
// sRandom := false ;
7598: LD_ADDR_EXP 87
7602: PUSH
7603: LD_INT 0
7605: ST_TO_ADDR
// sShield := false ;
7606: LD_ADDR_EXP 88
7610: PUSH
7611: LD_INT 0
7613: ST_TO_ADDR
// sTime := false ;
7614: LD_ADDR_EXP 89
7618: PUSH
7619: LD_INT 0
7621: ST_TO_ADDR
// sTools := false ;
7622: LD_ADDR_EXP 90
7626: PUSH
7627: LD_INT 0
7629: ST_TO_ADDR
// sSold := false ;
7630: LD_ADDR_EXP 55
7634: PUSH
7635: LD_INT 0
7637: ST_TO_ADDR
// sDiff := false ;
7638: LD_ADDR_EXP 56
7642: PUSH
7643: LD_INT 0
7645: ST_TO_ADDR
// sFog := false ;
7646: LD_ADDR_EXP 59
7650: PUSH
7651: LD_INT 0
7653: ST_TO_ADDR
// sReset := false ;
7654: LD_ADDR_EXP 60
7658: PUSH
7659: LD_INT 0
7661: ST_TO_ADDR
// sSun := false ;
7662: LD_ADDR_EXP 61
7666: PUSH
7667: LD_INT 0
7669: ST_TO_ADDR
// sTiger := false ;
7670: LD_ADDR_EXP 57
7674: PUSH
7675: LD_INT 0
7677: ST_TO_ADDR
// sBomb := false ;
7678: LD_ADDR_EXP 58
7682: PUSH
7683: LD_INT 0
7685: ST_TO_ADDR
// sWound := false ;
7686: LD_ADDR_EXP 66
7690: PUSH
7691: LD_INT 0
7693: ST_TO_ADDR
// sBetray := false ;
7694: LD_ADDR_EXP 70
7698: PUSH
7699: LD_INT 0
7701: ST_TO_ADDR
// sContamin := false ;
7702: LD_ADDR_EXP 71
7706: PUSH
7707: LD_INT 0
7709: ST_TO_ADDR
// sOil := false ;
7710: LD_ADDR_EXP 73
7714: PUSH
7715: LD_INT 0
7717: ST_TO_ADDR
// sStu := false ;
7718: LD_ADDR_EXP 77
7722: PUSH
7723: LD_INT 0
7725: ST_TO_ADDR
// sBazooka := false ;
7726: LD_ADDR_EXP 80
7730: PUSH
7731: LD_INT 0
7733: ST_TO_ADDR
// sMortar := false ;
7734: LD_ADDR_EXP 81
7738: PUSH
7739: LD_INT 0
7741: ST_TO_ADDR
// sRanger := false ;
7742: LD_ADDR_EXP 91
7746: PUSH
7747: LD_INT 0
7749: ST_TO_ADDR
// end ;
7750: LD_VAR 0 1
7754: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
7755: LD_INT 0
7757: PPUSH
7758: PPUSH
7759: PPUSH
7760: PPUSH
7761: PPUSH
// result := [ ] ;
7762: LD_ADDR_VAR 0 1
7766: PUSH
7767: EMPTY
7768: ST_TO_ADDR
// if campaign_id = 1 then
7769: LD_OWVAR 69
7773: PUSH
7774: LD_INT 1
7776: EQUAL
7777: IFFALSE 10715
// begin case mission_number of 1 :
7779: LD_OWVAR 70
7783: PUSH
7784: LD_INT 1
7786: DOUBLE
7787: EQUAL
7788: IFTRUE 7792
7790: GO 7856
7792: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
7793: LD_ADDR_VAR 0 1
7797: PUSH
7798: LD_INT 2
7800: PUSH
7801: LD_INT 4
7803: PUSH
7804: LD_INT 11
7806: PUSH
7807: LD_INT 12
7809: PUSH
7810: LD_INT 15
7812: PUSH
7813: LD_INT 16
7815: PUSH
7816: LD_INT 22
7818: PUSH
7819: LD_INT 23
7821: PUSH
7822: LD_INT 26
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: PUSH
7836: LD_INT 101
7838: PUSH
7839: LD_INT 102
7841: PUSH
7842: LD_INT 106
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: ST_TO_ADDR
7854: GO 10713
7856: LD_INT 2
7858: DOUBLE
7859: EQUAL
7860: IFTRUE 7864
7862: GO 7936
7864: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
7865: LD_ADDR_VAR 0 1
7869: PUSH
7870: LD_INT 2
7872: PUSH
7873: LD_INT 4
7875: PUSH
7876: LD_INT 11
7878: PUSH
7879: LD_INT 12
7881: PUSH
7882: LD_INT 15
7884: PUSH
7885: LD_INT 16
7887: PUSH
7888: LD_INT 22
7890: PUSH
7891: LD_INT 23
7893: PUSH
7894: LD_INT 26
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: PUSH
7908: LD_INT 101
7910: PUSH
7911: LD_INT 102
7913: PUSH
7914: LD_INT 105
7916: PUSH
7917: LD_INT 106
7919: PUSH
7920: LD_INT 108
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: ST_TO_ADDR
7934: GO 10713
7936: LD_INT 3
7938: DOUBLE
7939: EQUAL
7940: IFTRUE 7944
7942: GO 8020
7944: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
7945: LD_ADDR_VAR 0 1
7949: PUSH
7950: LD_INT 2
7952: PUSH
7953: LD_INT 4
7955: PUSH
7956: LD_INT 5
7958: PUSH
7959: LD_INT 11
7961: PUSH
7962: LD_INT 12
7964: PUSH
7965: LD_INT 15
7967: PUSH
7968: LD_INT 16
7970: PUSH
7971: LD_INT 22
7973: PUSH
7974: LD_INT 26
7976: PUSH
7977: LD_INT 36
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: PUSH
7992: LD_INT 101
7994: PUSH
7995: LD_INT 102
7997: PUSH
7998: LD_INT 105
8000: PUSH
8001: LD_INT 106
8003: PUSH
8004: LD_INT 108
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: ST_TO_ADDR
8018: GO 10713
8020: LD_INT 4
8022: DOUBLE
8023: EQUAL
8024: IFTRUE 8028
8026: GO 8112
8028: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8029: LD_ADDR_VAR 0 1
8033: PUSH
8034: LD_INT 2
8036: PUSH
8037: LD_INT 4
8039: PUSH
8040: LD_INT 5
8042: PUSH
8043: LD_INT 8
8045: PUSH
8046: LD_INT 11
8048: PUSH
8049: LD_INT 12
8051: PUSH
8052: LD_INT 15
8054: PUSH
8055: LD_INT 16
8057: PUSH
8058: LD_INT 22
8060: PUSH
8061: LD_INT 23
8063: PUSH
8064: LD_INT 26
8066: PUSH
8067: LD_INT 36
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: PUSH
8084: LD_INT 101
8086: PUSH
8087: LD_INT 102
8089: PUSH
8090: LD_INT 105
8092: PUSH
8093: LD_INT 106
8095: PUSH
8096: LD_INT 108
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: ST_TO_ADDR
8110: GO 10713
8112: LD_INT 5
8114: DOUBLE
8115: EQUAL
8116: IFTRUE 8120
8118: GO 8220
8120: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8121: LD_ADDR_VAR 0 1
8125: PUSH
8126: LD_INT 2
8128: PUSH
8129: LD_INT 4
8131: PUSH
8132: LD_INT 5
8134: PUSH
8135: LD_INT 6
8137: PUSH
8138: LD_INT 8
8140: PUSH
8141: LD_INT 11
8143: PUSH
8144: LD_INT 12
8146: PUSH
8147: LD_INT 15
8149: PUSH
8150: LD_INT 16
8152: PUSH
8153: LD_INT 22
8155: PUSH
8156: LD_INT 23
8158: PUSH
8159: LD_INT 25
8161: PUSH
8162: LD_INT 26
8164: PUSH
8165: LD_INT 36
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: PUSH
8184: LD_INT 101
8186: PUSH
8187: LD_INT 102
8189: PUSH
8190: LD_INT 105
8192: PUSH
8193: LD_INT 106
8195: PUSH
8196: LD_INT 108
8198: PUSH
8199: LD_INT 109
8201: PUSH
8202: LD_INT 112
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: ST_TO_ADDR
8218: GO 10713
8220: LD_INT 6
8222: DOUBLE
8223: EQUAL
8224: IFTRUE 8228
8226: GO 8348
8228: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8229: LD_ADDR_VAR 0 1
8233: PUSH
8234: LD_INT 2
8236: PUSH
8237: LD_INT 4
8239: PUSH
8240: LD_INT 5
8242: PUSH
8243: LD_INT 6
8245: PUSH
8246: LD_INT 8
8248: PUSH
8249: LD_INT 11
8251: PUSH
8252: LD_INT 12
8254: PUSH
8255: LD_INT 15
8257: PUSH
8258: LD_INT 16
8260: PUSH
8261: LD_INT 20
8263: PUSH
8264: LD_INT 21
8266: PUSH
8267: LD_INT 22
8269: PUSH
8270: LD_INT 23
8272: PUSH
8273: LD_INT 25
8275: PUSH
8276: LD_INT 26
8278: PUSH
8279: LD_INT 30
8281: PUSH
8282: LD_INT 31
8284: PUSH
8285: LD_INT 32
8287: PUSH
8288: LD_INT 36
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: PUSH
8312: LD_INT 101
8314: PUSH
8315: LD_INT 102
8317: PUSH
8318: LD_INT 105
8320: PUSH
8321: LD_INT 106
8323: PUSH
8324: LD_INT 108
8326: PUSH
8327: LD_INT 109
8329: PUSH
8330: LD_INT 112
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: ST_TO_ADDR
8346: GO 10713
8348: LD_INT 7
8350: DOUBLE
8351: EQUAL
8352: IFTRUE 8356
8354: GO 8456
8356: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8357: LD_ADDR_VAR 0 1
8361: PUSH
8362: LD_INT 2
8364: PUSH
8365: LD_INT 4
8367: PUSH
8368: LD_INT 5
8370: PUSH
8371: LD_INT 7
8373: PUSH
8374: LD_INT 11
8376: PUSH
8377: LD_INT 12
8379: PUSH
8380: LD_INT 15
8382: PUSH
8383: LD_INT 16
8385: PUSH
8386: LD_INT 20
8388: PUSH
8389: LD_INT 21
8391: PUSH
8392: LD_INT 22
8394: PUSH
8395: LD_INT 23
8397: PUSH
8398: LD_INT 25
8400: PUSH
8401: LD_INT 26
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: PUSH
8420: LD_INT 101
8422: PUSH
8423: LD_INT 102
8425: PUSH
8426: LD_INT 103
8428: PUSH
8429: LD_INT 105
8431: PUSH
8432: LD_INT 106
8434: PUSH
8435: LD_INT 108
8437: PUSH
8438: LD_INT 112
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: ST_TO_ADDR
8454: GO 10713
8456: LD_INT 8
8458: DOUBLE
8459: EQUAL
8460: IFTRUE 8464
8462: GO 8592
8464: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8465: LD_ADDR_VAR 0 1
8469: PUSH
8470: LD_INT 2
8472: PUSH
8473: LD_INT 4
8475: PUSH
8476: LD_INT 5
8478: PUSH
8479: LD_INT 6
8481: PUSH
8482: LD_INT 7
8484: PUSH
8485: LD_INT 8
8487: PUSH
8488: LD_INT 11
8490: PUSH
8491: LD_INT 12
8493: PUSH
8494: LD_INT 15
8496: PUSH
8497: LD_INT 16
8499: PUSH
8500: LD_INT 20
8502: PUSH
8503: LD_INT 21
8505: PUSH
8506: LD_INT 22
8508: PUSH
8509: LD_INT 23
8511: PUSH
8512: LD_INT 25
8514: PUSH
8515: LD_INT 26
8517: PUSH
8518: LD_INT 30
8520: PUSH
8521: LD_INT 31
8523: PUSH
8524: LD_INT 32
8526: PUSH
8527: LD_INT 36
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: PUSH
8552: LD_INT 101
8554: PUSH
8555: LD_INT 102
8557: PUSH
8558: LD_INT 103
8560: PUSH
8561: LD_INT 105
8563: PUSH
8564: LD_INT 106
8566: PUSH
8567: LD_INT 108
8569: PUSH
8570: LD_INT 109
8572: PUSH
8573: LD_INT 112
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: ST_TO_ADDR
8590: GO 10713
8592: LD_INT 9
8594: DOUBLE
8595: EQUAL
8596: IFTRUE 8600
8598: GO 8736
8600: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8601: LD_ADDR_VAR 0 1
8605: PUSH
8606: LD_INT 2
8608: PUSH
8609: LD_INT 4
8611: PUSH
8612: LD_INT 5
8614: PUSH
8615: LD_INT 6
8617: PUSH
8618: LD_INT 7
8620: PUSH
8621: LD_INT 8
8623: PUSH
8624: LD_INT 11
8626: PUSH
8627: LD_INT 12
8629: PUSH
8630: LD_INT 15
8632: PUSH
8633: LD_INT 16
8635: PUSH
8636: LD_INT 20
8638: PUSH
8639: LD_INT 21
8641: PUSH
8642: LD_INT 22
8644: PUSH
8645: LD_INT 23
8647: PUSH
8648: LD_INT 25
8650: PUSH
8651: LD_INT 26
8653: PUSH
8654: LD_INT 28
8656: PUSH
8657: LD_INT 30
8659: PUSH
8660: LD_INT 31
8662: PUSH
8663: LD_INT 32
8665: PUSH
8666: LD_INT 36
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: PUSH
8692: LD_INT 101
8694: PUSH
8695: LD_INT 102
8697: PUSH
8698: LD_INT 103
8700: PUSH
8701: LD_INT 105
8703: PUSH
8704: LD_INT 106
8706: PUSH
8707: LD_INT 108
8709: PUSH
8710: LD_INT 109
8712: PUSH
8713: LD_INT 112
8715: PUSH
8716: LD_INT 114
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: ST_TO_ADDR
8734: GO 10713
8736: LD_INT 10
8738: DOUBLE
8739: EQUAL
8740: IFTRUE 8744
8742: GO 8928
8744: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
8745: LD_ADDR_VAR 0 1
8749: PUSH
8750: LD_INT 2
8752: PUSH
8753: LD_INT 4
8755: PUSH
8756: LD_INT 5
8758: PUSH
8759: LD_INT 6
8761: PUSH
8762: LD_INT 7
8764: PUSH
8765: LD_INT 8
8767: PUSH
8768: LD_INT 9
8770: PUSH
8771: LD_INT 10
8773: PUSH
8774: LD_INT 11
8776: PUSH
8777: LD_INT 12
8779: PUSH
8780: LD_INT 13
8782: PUSH
8783: LD_INT 14
8785: PUSH
8786: LD_INT 15
8788: PUSH
8789: LD_INT 16
8791: PUSH
8792: LD_INT 17
8794: PUSH
8795: LD_INT 18
8797: PUSH
8798: LD_INT 19
8800: PUSH
8801: LD_INT 20
8803: PUSH
8804: LD_INT 21
8806: PUSH
8807: LD_INT 22
8809: PUSH
8810: LD_INT 23
8812: PUSH
8813: LD_INT 24
8815: PUSH
8816: LD_INT 25
8818: PUSH
8819: LD_INT 26
8821: PUSH
8822: LD_INT 28
8824: PUSH
8825: LD_INT 30
8827: PUSH
8828: LD_INT 31
8830: PUSH
8831: LD_INT 32
8833: PUSH
8834: LD_INT 36
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: PUSH
8868: LD_INT 101
8870: PUSH
8871: LD_INT 102
8873: PUSH
8874: LD_INT 103
8876: PUSH
8877: LD_INT 104
8879: PUSH
8880: LD_INT 105
8882: PUSH
8883: LD_INT 106
8885: PUSH
8886: LD_INT 107
8888: PUSH
8889: LD_INT 108
8891: PUSH
8892: LD_INT 109
8894: PUSH
8895: LD_INT 110
8897: PUSH
8898: LD_INT 111
8900: PUSH
8901: LD_INT 112
8903: PUSH
8904: LD_INT 114
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: ST_TO_ADDR
8926: GO 10713
8928: LD_INT 11
8930: DOUBLE
8931: EQUAL
8932: IFTRUE 8936
8934: GO 9128
8936: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
8937: LD_ADDR_VAR 0 1
8941: PUSH
8942: LD_INT 2
8944: PUSH
8945: LD_INT 3
8947: PUSH
8948: LD_INT 4
8950: PUSH
8951: LD_INT 5
8953: PUSH
8954: LD_INT 6
8956: PUSH
8957: LD_INT 7
8959: PUSH
8960: LD_INT 8
8962: PUSH
8963: LD_INT 9
8965: PUSH
8966: LD_INT 10
8968: PUSH
8969: LD_INT 11
8971: PUSH
8972: LD_INT 12
8974: PUSH
8975: LD_INT 13
8977: PUSH
8978: LD_INT 14
8980: PUSH
8981: LD_INT 15
8983: PUSH
8984: LD_INT 16
8986: PUSH
8987: LD_INT 17
8989: PUSH
8990: LD_INT 18
8992: PUSH
8993: LD_INT 19
8995: PUSH
8996: LD_INT 20
8998: PUSH
8999: LD_INT 21
9001: PUSH
9002: LD_INT 22
9004: PUSH
9005: LD_INT 23
9007: PUSH
9008: LD_INT 24
9010: PUSH
9011: LD_INT 25
9013: PUSH
9014: LD_INT 26
9016: PUSH
9017: LD_INT 28
9019: PUSH
9020: LD_INT 30
9022: PUSH
9023: LD_INT 31
9025: PUSH
9026: LD_INT 32
9028: PUSH
9029: LD_INT 34
9031: PUSH
9032: LD_INT 36
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: PUSH
9068: LD_INT 101
9070: PUSH
9071: LD_INT 102
9073: PUSH
9074: LD_INT 103
9076: PUSH
9077: LD_INT 104
9079: PUSH
9080: LD_INT 105
9082: PUSH
9083: LD_INT 106
9085: PUSH
9086: LD_INT 107
9088: PUSH
9089: LD_INT 108
9091: PUSH
9092: LD_INT 109
9094: PUSH
9095: LD_INT 110
9097: PUSH
9098: LD_INT 111
9100: PUSH
9101: LD_INT 112
9103: PUSH
9104: LD_INT 114
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: ST_TO_ADDR
9126: GO 10713
9128: LD_INT 12
9130: DOUBLE
9131: EQUAL
9132: IFTRUE 9136
9134: GO 9344
9136: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9137: LD_ADDR_VAR 0 1
9141: PUSH
9142: LD_INT 1
9144: PUSH
9145: LD_INT 2
9147: PUSH
9148: LD_INT 3
9150: PUSH
9151: LD_INT 4
9153: PUSH
9154: LD_INT 5
9156: PUSH
9157: LD_INT 6
9159: PUSH
9160: LD_INT 7
9162: PUSH
9163: LD_INT 8
9165: PUSH
9166: LD_INT 9
9168: PUSH
9169: LD_INT 10
9171: PUSH
9172: LD_INT 11
9174: PUSH
9175: LD_INT 12
9177: PUSH
9178: LD_INT 13
9180: PUSH
9181: LD_INT 14
9183: PUSH
9184: LD_INT 15
9186: PUSH
9187: LD_INT 16
9189: PUSH
9190: LD_INT 17
9192: PUSH
9193: LD_INT 18
9195: PUSH
9196: LD_INT 19
9198: PUSH
9199: LD_INT 20
9201: PUSH
9202: LD_INT 21
9204: PUSH
9205: LD_INT 22
9207: PUSH
9208: LD_INT 23
9210: PUSH
9211: LD_INT 24
9213: PUSH
9214: LD_INT 25
9216: PUSH
9217: LD_INT 26
9219: PUSH
9220: LD_INT 27
9222: PUSH
9223: LD_INT 28
9225: PUSH
9226: LD_INT 30
9228: PUSH
9229: LD_INT 31
9231: PUSH
9232: LD_INT 32
9234: PUSH
9235: LD_INT 33
9237: PUSH
9238: LD_INT 34
9240: PUSH
9241: LD_INT 36
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: PUSH
9280: LD_INT 101
9282: PUSH
9283: LD_INT 102
9285: PUSH
9286: LD_INT 103
9288: PUSH
9289: LD_INT 104
9291: PUSH
9292: LD_INT 105
9294: PUSH
9295: LD_INT 106
9297: PUSH
9298: LD_INT 107
9300: PUSH
9301: LD_INT 108
9303: PUSH
9304: LD_INT 109
9306: PUSH
9307: LD_INT 110
9309: PUSH
9310: LD_INT 111
9312: PUSH
9313: LD_INT 112
9315: PUSH
9316: LD_INT 113
9318: PUSH
9319: LD_INT 114
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: ST_TO_ADDR
9342: GO 10713
9344: LD_INT 13
9346: DOUBLE
9347: EQUAL
9348: IFTRUE 9352
9350: GO 9548
9352: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9353: LD_ADDR_VAR 0 1
9357: PUSH
9358: LD_INT 1
9360: PUSH
9361: LD_INT 2
9363: PUSH
9364: LD_INT 3
9366: PUSH
9367: LD_INT 4
9369: PUSH
9370: LD_INT 5
9372: PUSH
9373: LD_INT 8
9375: PUSH
9376: LD_INT 9
9378: PUSH
9379: LD_INT 10
9381: PUSH
9382: LD_INT 11
9384: PUSH
9385: LD_INT 12
9387: PUSH
9388: LD_INT 14
9390: PUSH
9391: LD_INT 15
9393: PUSH
9394: LD_INT 16
9396: PUSH
9397: LD_INT 17
9399: PUSH
9400: LD_INT 18
9402: PUSH
9403: LD_INT 19
9405: PUSH
9406: LD_INT 20
9408: PUSH
9409: LD_INT 21
9411: PUSH
9412: LD_INT 22
9414: PUSH
9415: LD_INT 23
9417: PUSH
9418: LD_INT 24
9420: PUSH
9421: LD_INT 25
9423: PUSH
9424: LD_INT 26
9426: PUSH
9427: LD_INT 27
9429: PUSH
9430: LD_INT 28
9432: PUSH
9433: LD_INT 30
9435: PUSH
9436: LD_INT 31
9438: PUSH
9439: LD_INT 32
9441: PUSH
9442: LD_INT 33
9444: PUSH
9445: LD_INT 34
9447: PUSH
9448: LD_INT 36
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: PUSH
9484: LD_INT 101
9486: PUSH
9487: LD_INT 102
9489: PUSH
9490: LD_INT 103
9492: PUSH
9493: LD_INT 104
9495: PUSH
9496: LD_INT 105
9498: PUSH
9499: LD_INT 106
9501: PUSH
9502: LD_INT 107
9504: PUSH
9505: LD_INT 108
9507: PUSH
9508: LD_INT 109
9510: PUSH
9511: LD_INT 110
9513: PUSH
9514: LD_INT 111
9516: PUSH
9517: LD_INT 112
9519: PUSH
9520: LD_INT 113
9522: PUSH
9523: LD_INT 114
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: ST_TO_ADDR
9546: GO 10713
9548: LD_INT 14
9550: DOUBLE
9551: EQUAL
9552: IFTRUE 9556
9554: GO 9768
9556: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9557: LD_ADDR_VAR 0 1
9561: PUSH
9562: LD_INT 1
9564: PUSH
9565: LD_INT 2
9567: PUSH
9568: LD_INT 3
9570: PUSH
9571: LD_INT 4
9573: PUSH
9574: LD_INT 5
9576: PUSH
9577: LD_INT 6
9579: PUSH
9580: LD_INT 7
9582: PUSH
9583: LD_INT 8
9585: PUSH
9586: LD_INT 9
9588: PUSH
9589: LD_INT 10
9591: PUSH
9592: LD_INT 11
9594: PUSH
9595: LD_INT 12
9597: PUSH
9598: LD_INT 13
9600: PUSH
9601: LD_INT 14
9603: PUSH
9604: LD_INT 15
9606: PUSH
9607: LD_INT 16
9609: PUSH
9610: LD_INT 17
9612: PUSH
9613: LD_INT 18
9615: PUSH
9616: LD_INT 19
9618: PUSH
9619: LD_INT 20
9621: PUSH
9622: LD_INT 21
9624: PUSH
9625: LD_INT 22
9627: PUSH
9628: LD_INT 23
9630: PUSH
9631: LD_INT 24
9633: PUSH
9634: LD_INT 25
9636: PUSH
9637: LD_INT 26
9639: PUSH
9640: LD_INT 27
9642: PUSH
9643: LD_INT 28
9645: PUSH
9646: LD_INT 29
9648: PUSH
9649: LD_INT 30
9651: PUSH
9652: LD_INT 31
9654: PUSH
9655: LD_INT 32
9657: PUSH
9658: LD_INT 33
9660: PUSH
9661: LD_INT 34
9663: PUSH
9664: LD_INT 36
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: PUSH
9704: LD_INT 101
9706: PUSH
9707: LD_INT 102
9709: PUSH
9710: LD_INT 103
9712: PUSH
9713: LD_INT 104
9715: PUSH
9716: LD_INT 105
9718: PUSH
9719: LD_INT 106
9721: PUSH
9722: LD_INT 107
9724: PUSH
9725: LD_INT 108
9727: PUSH
9728: LD_INT 109
9730: PUSH
9731: LD_INT 110
9733: PUSH
9734: LD_INT 111
9736: PUSH
9737: LD_INT 112
9739: PUSH
9740: LD_INT 113
9742: PUSH
9743: LD_INT 114
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: ST_TO_ADDR
9766: GO 10713
9768: LD_INT 15
9770: DOUBLE
9771: EQUAL
9772: IFTRUE 9776
9774: GO 9988
9776: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
9777: LD_ADDR_VAR 0 1
9781: PUSH
9782: LD_INT 1
9784: PUSH
9785: LD_INT 2
9787: PUSH
9788: LD_INT 3
9790: PUSH
9791: LD_INT 4
9793: PUSH
9794: LD_INT 5
9796: PUSH
9797: LD_INT 6
9799: PUSH
9800: LD_INT 7
9802: PUSH
9803: LD_INT 8
9805: PUSH
9806: LD_INT 9
9808: PUSH
9809: LD_INT 10
9811: PUSH
9812: LD_INT 11
9814: PUSH
9815: LD_INT 12
9817: PUSH
9818: LD_INT 13
9820: PUSH
9821: LD_INT 14
9823: PUSH
9824: LD_INT 15
9826: PUSH
9827: LD_INT 16
9829: PUSH
9830: LD_INT 17
9832: PUSH
9833: LD_INT 18
9835: PUSH
9836: LD_INT 19
9838: PUSH
9839: LD_INT 20
9841: PUSH
9842: LD_INT 21
9844: PUSH
9845: LD_INT 22
9847: PUSH
9848: LD_INT 23
9850: PUSH
9851: LD_INT 24
9853: PUSH
9854: LD_INT 25
9856: PUSH
9857: LD_INT 26
9859: PUSH
9860: LD_INT 27
9862: PUSH
9863: LD_INT 28
9865: PUSH
9866: LD_INT 29
9868: PUSH
9869: LD_INT 30
9871: PUSH
9872: LD_INT 31
9874: PUSH
9875: LD_INT 32
9877: PUSH
9878: LD_INT 33
9880: PUSH
9881: LD_INT 34
9883: PUSH
9884: LD_INT 36
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 101
9926: PUSH
9927: LD_INT 102
9929: PUSH
9930: LD_INT 103
9932: PUSH
9933: LD_INT 104
9935: PUSH
9936: LD_INT 105
9938: PUSH
9939: LD_INT 106
9941: PUSH
9942: LD_INT 107
9944: PUSH
9945: LD_INT 108
9947: PUSH
9948: LD_INT 109
9950: PUSH
9951: LD_INT 110
9953: PUSH
9954: LD_INT 111
9956: PUSH
9957: LD_INT 112
9959: PUSH
9960: LD_INT 113
9962: PUSH
9963: LD_INT 114
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: ST_TO_ADDR
9986: GO 10713
9988: LD_INT 16
9990: DOUBLE
9991: EQUAL
9992: IFTRUE 9996
9994: GO 10120
9996: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
9997: LD_ADDR_VAR 0 1
10001: PUSH
10002: LD_INT 2
10004: PUSH
10005: LD_INT 4
10007: PUSH
10008: LD_INT 5
10010: PUSH
10011: LD_INT 7
10013: PUSH
10014: LD_INT 11
10016: PUSH
10017: LD_INT 12
10019: PUSH
10020: LD_INT 15
10022: PUSH
10023: LD_INT 16
10025: PUSH
10026: LD_INT 20
10028: PUSH
10029: LD_INT 21
10031: PUSH
10032: LD_INT 22
10034: PUSH
10035: LD_INT 23
10037: PUSH
10038: LD_INT 25
10040: PUSH
10041: LD_INT 26
10043: PUSH
10044: LD_INT 30
10046: PUSH
10047: LD_INT 31
10049: PUSH
10050: LD_INT 32
10052: PUSH
10053: LD_INT 33
10055: PUSH
10056: LD_INT 34
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: PUSH
10080: LD_INT 101
10082: PUSH
10083: LD_INT 102
10085: PUSH
10086: LD_INT 103
10088: PUSH
10089: LD_INT 106
10091: PUSH
10092: LD_INT 108
10094: PUSH
10095: LD_INT 112
10097: PUSH
10098: LD_INT 113
10100: PUSH
10101: LD_INT 114
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: ST_TO_ADDR
10118: GO 10713
10120: LD_INT 17
10122: DOUBLE
10123: EQUAL
10124: IFTRUE 10128
10126: GO 10340
10128: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10129: LD_ADDR_VAR 0 1
10133: PUSH
10134: LD_INT 1
10136: PUSH
10137: LD_INT 2
10139: PUSH
10140: LD_INT 3
10142: PUSH
10143: LD_INT 4
10145: PUSH
10146: LD_INT 5
10148: PUSH
10149: LD_INT 6
10151: PUSH
10152: LD_INT 7
10154: PUSH
10155: LD_INT 8
10157: PUSH
10158: LD_INT 9
10160: PUSH
10161: LD_INT 10
10163: PUSH
10164: LD_INT 11
10166: PUSH
10167: LD_INT 12
10169: PUSH
10170: LD_INT 13
10172: PUSH
10173: LD_INT 14
10175: PUSH
10176: LD_INT 15
10178: PUSH
10179: LD_INT 16
10181: PUSH
10182: LD_INT 17
10184: PUSH
10185: LD_INT 18
10187: PUSH
10188: LD_INT 19
10190: PUSH
10191: LD_INT 20
10193: PUSH
10194: LD_INT 21
10196: PUSH
10197: LD_INT 22
10199: PUSH
10200: LD_INT 23
10202: PUSH
10203: LD_INT 24
10205: PUSH
10206: LD_INT 25
10208: PUSH
10209: LD_INT 26
10211: PUSH
10212: LD_INT 27
10214: PUSH
10215: LD_INT 28
10217: PUSH
10218: LD_INT 29
10220: PUSH
10221: LD_INT 30
10223: PUSH
10224: LD_INT 31
10226: PUSH
10227: LD_INT 32
10229: PUSH
10230: LD_INT 33
10232: PUSH
10233: LD_INT 34
10235: PUSH
10236: LD_INT 36
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 101
10278: PUSH
10279: LD_INT 102
10281: PUSH
10282: LD_INT 103
10284: PUSH
10285: LD_INT 104
10287: PUSH
10288: LD_INT 105
10290: PUSH
10291: LD_INT 106
10293: PUSH
10294: LD_INT 107
10296: PUSH
10297: LD_INT 108
10299: PUSH
10300: LD_INT 109
10302: PUSH
10303: LD_INT 110
10305: PUSH
10306: LD_INT 111
10308: PUSH
10309: LD_INT 112
10311: PUSH
10312: LD_INT 113
10314: PUSH
10315: LD_INT 114
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: ST_TO_ADDR
10338: GO 10713
10340: LD_INT 18
10342: DOUBLE
10343: EQUAL
10344: IFTRUE 10348
10346: GO 10484
10348: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10349: LD_ADDR_VAR 0 1
10353: PUSH
10354: LD_INT 2
10356: PUSH
10357: LD_INT 4
10359: PUSH
10360: LD_INT 5
10362: PUSH
10363: LD_INT 7
10365: PUSH
10366: LD_INT 11
10368: PUSH
10369: LD_INT 12
10371: PUSH
10372: LD_INT 15
10374: PUSH
10375: LD_INT 16
10377: PUSH
10378: LD_INT 20
10380: PUSH
10381: LD_INT 21
10383: PUSH
10384: LD_INT 22
10386: PUSH
10387: LD_INT 23
10389: PUSH
10390: LD_INT 25
10392: PUSH
10393: LD_INT 26
10395: PUSH
10396: LD_INT 30
10398: PUSH
10399: LD_INT 31
10401: PUSH
10402: LD_INT 32
10404: PUSH
10405: LD_INT 33
10407: PUSH
10408: LD_INT 34
10410: PUSH
10411: LD_INT 35
10413: PUSH
10414: LD_INT 36
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: PUSH
10440: LD_INT 101
10442: PUSH
10443: LD_INT 102
10445: PUSH
10446: LD_INT 103
10448: PUSH
10449: LD_INT 106
10451: PUSH
10452: LD_INT 108
10454: PUSH
10455: LD_INT 112
10457: PUSH
10458: LD_INT 113
10460: PUSH
10461: LD_INT 114
10463: PUSH
10464: LD_INT 115
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: ST_TO_ADDR
10482: GO 10713
10484: LD_INT 19
10486: DOUBLE
10487: EQUAL
10488: IFTRUE 10492
10490: GO 10712
10492: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10493: LD_ADDR_VAR 0 1
10497: PUSH
10498: LD_INT 1
10500: PUSH
10501: LD_INT 2
10503: PUSH
10504: LD_INT 3
10506: PUSH
10507: LD_INT 4
10509: PUSH
10510: LD_INT 5
10512: PUSH
10513: LD_INT 6
10515: PUSH
10516: LD_INT 7
10518: PUSH
10519: LD_INT 8
10521: PUSH
10522: LD_INT 9
10524: PUSH
10525: LD_INT 10
10527: PUSH
10528: LD_INT 11
10530: PUSH
10531: LD_INT 12
10533: PUSH
10534: LD_INT 13
10536: PUSH
10537: LD_INT 14
10539: PUSH
10540: LD_INT 15
10542: PUSH
10543: LD_INT 16
10545: PUSH
10546: LD_INT 17
10548: PUSH
10549: LD_INT 18
10551: PUSH
10552: LD_INT 19
10554: PUSH
10555: LD_INT 20
10557: PUSH
10558: LD_INT 21
10560: PUSH
10561: LD_INT 22
10563: PUSH
10564: LD_INT 23
10566: PUSH
10567: LD_INT 24
10569: PUSH
10570: LD_INT 25
10572: PUSH
10573: LD_INT 26
10575: PUSH
10576: LD_INT 27
10578: PUSH
10579: LD_INT 28
10581: PUSH
10582: LD_INT 29
10584: PUSH
10585: LD_INT 30
10587: PUSH
10588: LD_INT 31
10590: PUSH
10591: LD_INT 32
10593: PUSH
10594: LD_INT 33
10596: PUSH
10597: LD_INT 34
10599: PUSH
10600: LD_INT 35
10602: PUSH
10603: LD_INT 36
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 101
10646: PUSH
10647: LD_INT 102
10649: PUSH
10650: LD_INT 103
10652: PUSH
10653: LD_INT 104
10655: PUSH
10656: LD_INT 105
10658: PUSH
10659: LD_INT 106
10661: PUSH
10662: LD_INT 107
10664: PUSH
10665: LD_INT 108
10667: PUSH
10668: LD_INT 109
10670: PUSH
10671: LD_INT 110
10673: PUSH
10674: LD_INT 111
10676: PUSH
10677: LD_INT 112
10679: PUSH
10680: LD_INT 113
10682: PUSH
10683: LD_INT 114
10685: PUSH
10686: LD_INT 115
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: ST_TO_ADDR
10710: GO 10713
10712: POP
// end else
10713: GO 10932
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
10715: LD_ADDR_VAR 0 1
10719: PUSH
10720: LD_INT 1
10722: PUSH
10723: LD_INT 2
10725: PUSH
10726: LD_INT 3
10728: PUSH
10729: LD_INT 4
10731: PUSH
10732: LD_INT 5
10734: PUSH
10735: LD_INT 6
10737: PUSH
10738: LD_INT 7
10740: PUSH
10741: LD_INT 8
10743: PUSH
10744: LD_INT 9
10746: PUSH
10747: LD_INT 10
10749: PUSH
10750: LD_INT 11
10752: PUSH
10753: LD_INT 12
10755: PUSH
10756: LD_INT 13
10758: PUSH
10759: LD_INT 14
10761: PUSH
10762: LD_INT 15
10764: PUSH
10765: LD_INT 16
10767: PUSH
10768: LD_INT 17
10770: PUSH
10771: LD_INT 18
10773: PUSH
10774: LD_INT 19
10776: PUSH
10777: LD_INT 20
10779: PUSH
10780: LD_INT 21
10782: PUSH
10783: LD_INT 22
10785: PUSH
10786: LD_INT 23
10788: PUSH
10789: LD_INT 24
10791: PUSH
10792: LD_INT 25
10794: PUSH
10795: LD_INT 26
10797: PUSH
10798: LD_INT 27
10800: PUSH
10801: LD_INT 28
10803: PUSH
10804: LD_INT 29
10806: PUSH
10807: LD_INT 30
10809: PUSH
10810: LD_INT 31
10812: PUSH
10813: LD_INT 32
10815: PUSH
10816: LD_INT 33
10818: PUSH
10819: LD_INT 34
10821: PUSH
10822: LD_INT 35
10824: PUSH
10825: LD_INT 36
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 101
10868: PUSH
10869: LD_INT 102
10871: PUSH
10872: LD_INT 103
10874: PUSH
10875: LD_INT 104
10877: PUSH
10878: LD_INT 105
10880: PUSH
10881: LD_INT 106
10883: PUSH
10884: LD_INT 107
10886: PUSH
10887: LD_INT 108
10889: PUSH
10890: LD_INT 109
10892: PUSH
10893: LD_INT 110
10895: PUSH
10896: LD_INT 111
10898: PUSH
10899: LD_INT 112
10901: PUSH
10902: LD_INT 113
10904: PUSH
10905: LD_INT 114
10907: PUSH
10908: LD_INT 115
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: ST_TO_ADDR
// if result then
10932: LD_VAR 0 1
10936: IFFALSE 11225
// begin normal :=  ;
10938: LD_ADDR_VAR 0 3
10942: PUSH
10943: LD_STRING 
10945: ST_TO_ADDR
// hardcore :=  ;
10946: LD_ADDR_VAR 0 4
10950: PUSH
10951: LD_STRING 
10953: ST_TO_ADDR
// for i = 1 to normalCounter do
10954: LD_ADDR_VAR 0 5
10958: PUSH
10959: DOUBLE
10960: LD_INT 1
10962: DEC
10963: ST_TO_ADDR
10964: LD_EXP 39
10968: PUSH
10969: FOR_TO
10970: IFFALSE 11071
// begin tmp := 0 ;
10972: LD_ADDR_VAR 0 2
10976: PUSH
10977: LD_STRING 0
10979: ST_TO_ADDR
// if result [ 1 ] then
10980: LD_VAR 0 1
10984: PUSH
10985: LD_INT 1
10987: ARRAY
10988: IFFALSE 11053
// if result [ 1 ] [ 1 ] = i then
10990: LD_VAR 0 1
10994: PUSH
10995: LD_INT 1
10997: ARRAY
10998: PUSH
10999: LD_INT 1
11001: ARRAY
11002: PUSH
11003: LD_VAR 0 5
11007: EQUAL
11008: IFFALSE 11053
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11010: LD_ADDR_VAR 0 1
11014: PUSH
11015: LD_VAR 0 1
11019: PPUSH
11020: LD_INT 1
11022: PPUSH
11023: LD_VAR 0 1
11027: PUSH
11028: LD_INT 1
11030: ARRAY
11031: PPUSH
11032: LD_INT 1
11034: PPUSH
11035: CALL_OW 3
11039: PPUSH
11040: CALL_OW 1
11044: ST_TO_ADDR
// tmp := 1 ;
11045: LD_ADDR_VAR 0 2
11049: PUSH
11050: LD_STRING 1
11052: ST_TO_ADDR
// end ; normal := normal & tmp ;
11053: LD_ADDR_VAR 0 3
11057: PUSH
11058: LD_VAR 0 3
11062: PUSH
11063: LD_VAR 0 2
11067: STR
11068: ST_TO_ADDR
// end ;
11069: GO 10969
11071: POP
11072: POP
// for i = 1 to hardcoreCounter do
11073: LD_ADDR_VAR 0 5
11077: PUSH
11078: DOUBLE
11079: LD_INT 1
11081: DEC
11082: ST_TO_ADDR
11083: LD_EXP 40
11087: PUSH
11088: FOR_TO
11089: IFFALSE 11194
// begin tmp := 0 ;
11091: LD_ADDR_VAR 0 2
11095: PUSH
11096: LD_STRING 0
11098: ST_TO_ADDR
// if result [ 2 ] then
11099: LD_VAR 0 1
11103: PUSH
11104: LD_INT 2
11106: ARRAY
11107: IFFALSE 11176
// if result [ 2 ] [ 1 ] = 100 + i then
11109: LD_VAR 0 1
11113: PUSH
11114: LD_INT 2
11116: ARRAY
11117: PUSH
11118: LD_INT 1
11120: ARRAY
11121: PUSH
11122: LD_INT 100
11124: PUSH
11125: LD_VAR 0 5
11129: PLUS
11130: EQUAL
11131: IFFALSE 11176
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11133: LD_ADDR_VAR 0 1
11137: PUSH
11138: LD_VAR 0 1
11142: PPUSH
11143: LD_INT 2
11145: PPUSH
11146: LD_VAR 0 1
11150: PUSH
11151: LD_INT 2
11153: ARRAY
11154: PPUSH
11155: LD_INT 1
11157: PPUSH
11158: CALL_OW 3
11162: PPUSH
11163: CALL_OW 1
11167: ST_TO_ADDR
// tmp := 1 ;
11168: LD_ADDR_VAR 0 2
11172: PUSH
11173: LD_STRING 1
11175: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11176: LD_ADDR_VAR 0 4
11180: PUSH
11181: LD_VAR 0 4
11185: PUSH
11186: LD_VAR 0 2
11190: STR
11191: ST_TO_ADDR
// end ;
11192: GO 11088
11194: POP
11195: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11196: LD_STRING getStreamItemsFromMission("
11198: PUSH
11199: LD_VAR 0 3
11203: STR
11204: PUSH
11205: LD_STRING ","
11207: STR
11208: PUSH
11209: LD_VAR 0 4
11213: STR
11214: PUSH
11215: LD_STRING ")
11217: STR
11218: PPUSH
11219: CALL_OW 559
// end else
11223: GO 11232
// ToLua ( getStreamItemsFromMission("","") ) ;
11225: LD_STRING getStreamItemsFromMission("","")
11227: PPUSH
11228: CALL_OW 559
// end ;
11232: LD_VAR 0 1
11236: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11237: LD_VAR 0 2
11241: PUSH
11242: LD_INT 100
11244: EQUAL
11245: IFFALSE 12194
// begin if not StreamModeActive then
11247: LD_EXP 38
11251: NOT
11252: IFFALSE 11262
// StreamModeActive := true ;
11254: LD_ADDR_EXP 38
11258: PUSH
11259: LD_INT 1
11261: ST_TO_ADDR
// if p3 = 0 then
11262: LD_VAR 0 3
11266: PUSH
11267: LD_INT 0
11269: EQUAL
11270: IFFALSE 11276
// InitStreamMode ;
11272: CALL 7315 0 0
// if p3 = 1 then
11276: LD_VAR 0 3
11280: PUSH
11281: LD_INT 1
11283: EQUAL
11284: IFFALSE 11294
// sRocket := true ;
11286: LD_ADDR_EXP 43
11290: PUSH
11291: LD_INT 1
11293: ST_TO_ADDR
// if p3 = 2 then
11294: LD_VAR 0 3
11298: PUSH
11299: LD_INT 2
11301: EQUAL
11302: IFFALSE 11312
// sSpeed := true ;
11304: LD_ADDR_EXP 42
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
// if p3 = 3 then
11312: LD_VAR 0 3
11316: PUSH
11317: LD_INT 3
11319: EQUAL
11320: IFFALSE 11330
// sEngine := true ;
11322: LD_ADDR_EXP 44
11326: PUSH
11327: LD_INT 1
11329: ST_TO_ADDR
// if p3 = 4 then
11330: LD_VAR 0 3
11334: PUSH
11335: LD_INT 4
11337: EQUAL
11338: IFFALSE 11348
// sSpec := true ;
11340: LD_ADDR_EXP 41
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// if p3 = 5 then
11348: LD_VAR 0 3
11352: PUSH
11353: LD_INT 5
11355: EQUAL
11356: IFFALSE 11366
// sLevel := true ;
11358: LD_ADDR_EXP 45
11362: PUSH
11363: LD_INT 1
11365: ST_TO_ADDR
// if p3 = 6 then
11366: LD_VAR 0 3
11370: PUSH
11371: LD_INT 6
11373: EQUAL
11374: IFFALSE 11384
// sArmoury := true ;
11376: LD_ADDR_EXP 46
11380: PUSH
11381: LD_INT 1
11383: ST_TO_ADDR
// if p3 = 7 then
11384: LD_VAR 0 3
11388: PUSH
11389: LD_INT 7
11391: EQUAL
11392: IFFALSE 11402
// sRadar := true ;
11394: LD_ADDR_EXP 47
11398: PUSH
11399: LD_INT 1
11401: ST_TO_ADDR
// if p3 = 8 then
11402: LD_VAR 0 3
11406: PUSH
11407: LD_INT 8
11409: EQUAL
11410: IFFALSE 11420
// sBunker := true ;
11412: LD_ADDR_EXP 48
11416: PUSH
11417: LD_INT 1
11419: ST_TO_ADDR
// if p3 = 9 then
11420: LD_VAR 0 3
11424: PUSH
11425: LD_INT 9
11427: EQUAL
11428: IFFALSE 11438
// sHack := true ;
11430: LD_ADDR_EXP 49
11434: PUSH
11435: LD_INT 1
11437: ST_TO_ADDR
// if p3 = 10 then
11438: LD_VAR 0 3
11442: PUSH
11443: LD_INT 10
11445: EQUAL
11446: IFFALSE 11456
// sFire := true ;
11448: LD_ADDR_EXP 50
11452: PUSH
11453: LD_INT 1
11455: ST_TO_ADDR
// if p3 = 11 then
11456: LD_VAR 0 3
11460: PUSH
11461: LD_INT 11
11463: EQUAL
11464: IFFALSE 11474
// sRefresh := true ;
11466: LD_ADDR_EXP 51
11470: PUSH
11471: LD_INT 1
11473: ST_TO_ADDR
// if p3 = 12 then
11474: LD_VAR 0 3
11478: PUSH
11479: LD_INT 12
11481: EQUAL
11482: IFFALSE 11492
// sExp := true ;
11484: LD_ADDR_EXP 52
11488: PUSH
11489: LD_INT 1
11491: ST_TO_ADDR
// if p3 = 13 then
11492: LD_VAR 0 3
11496: PUSH
11497: LD_INT 13
11499: EQUAL
11500: IFFALSE 11510
// sDepot := true ;
11502: LD_ADDR_EXP 53
11506: PUSH
11507: LD_INT 1
11509: ST_TO_ADDR
// if p3 = 14 then
11510: LD_VAR 0 3
11514: PUSH
11515: LD_INT 14
11517: EQUAL
11518: IFFALSE 11528
// sFlag := true ;
11520: LD_ADDR_EXP 54
11524: PUSH
11525: LD_INT 1
11527: ST_TO_ADDR
// if p3 = 15 then
11528: LD_VAR 0 3
11532: PUSH
11533: LD_INT 15
11535: EQUAL
11536: IFFALSE 11546
// sKamikadze := true ;
11538: LD_ADDR_EXP 62
11542: PUSH
11543: LD_INT 1
11545: ST_TO_ADDR
// if p3 = 16 then
11546: LD_VAR 0 3
11550: PUSH
11551: LD_INT 16
11553: EQUAL
11554: IFFALSE 11564
// sTroll := true ;
11556: LD_ADDR_EXP 63
11560: PUSH
11561: LD_INT 1
11563: ST_TO_ADDR
// if p3 = 17 then
11564: LD_VAR 0 3
11568: PUSH
11569: LD_INT 17
11571: EQUAL
11572: IFFALSE 11582
// sSlow := true ;
11574: LD_ADDR_EXP 64
11578: PUSH
11579: LD_INT 1
11581: ST_TO_ADDR
// if p3 = 18 then
11582: LD_VAR 0 3
11586: PUSH
11587: LD_INT 18
11589: EQUAL
11590: IFFALSE 11600
// sLack := true ;
11592: LD_ADDR_EXP 65
11596: PUSH
11597: LD_INT 1
11599: ST_TO_ADDR
// if p3 = 19 then
11600: LD_VAR 0 3
11604: PUSH
11605: LD_INT 19
11607: EQUAL
11608: IFFALSE 11618
// sTank := true ;
11610: LD_ADDR_EXP 67
11614: PUSH
11615: LD_INT 1
11617: ST_TO_ADDR
// if p3 = 20 then
11618: LD_VAR 0 3
11622: PUSH
11623: LD_INT 20
11625: EQUAL
11626: IFFALSE 11636
// sRemote := true ;
11628: LD_ADDR_EXP 68
11632: PUSH
11633: LD_INT 1
11635: ST_TO_ADDR
// if p3 = 21 then
11636: LD_VAR 0 3
11640: PUSH
11641: LD_INT 21
11643: EQUAL
11644: IFFALSE 11654
// sPowell := true ;
11646: LD_ADDR_EXP 69
11650: PUSH
11651: LD_INT 1
11653: ST_TO_ADDR
// if p3 = 22 then
11654: LD_VAR 0 3
11658: PUSH
11659: LD_INT 22
11661: EQUAL
11662: IFFALSE 11672
// sTeleport := true ;
11664: LD_ADDR_EXP 72
11668: PUSH
11669: LD_INT 1
11671: ST_TO_ADDR
// if p3 = 23 then
11672: LD_VAR 0 3
11676: PUSH
11677: LD_INT 23
11679: EQUAL
11680: IFFALSE 11690
// sOilTower := true ;
11682: LD_ADDR_EXP 74
11686: PUSH
11687: LD_INT 1
11689: ST_TO_ADDR
// if p3 = 24 then
11690: LD_VAR 0 3
11694: PUSH
11695: LD_INT 24
11697: EQUAL
11698: IFFALSE 11708
// sShovel := true ;
11700: LD_ADDR_EXP 75
11704: PUSH
11705: LD_INT 1
11707: ST_TO_ADDR
// if p3 = 25 then
11708: LD_VAR 0 3
11712: PUSH
11713: LD_INT 25
11715: EQUAL
11716: IFFALSE 11726
// sSheik := true ;
11718: LD_ADDR_EXP 76
11722: PUSH
11723: LD_INT 1
11725: ST_TO_ADDR
// if p3 = 26 then
11726: LD_VAR 0 3
11730: PUSH
11731: LD_INT 26
11733: EQUAL
11734: IFFALSE 11744
// sEarthquake := true ;
11736: LD_ADDR_EXP 78
11740: PUSH
11741: LD_INT 1
11743: ST_TO_ADDR
// if p3 = 27 then
11744: LD_VAR 0 3
11748: PUSH
11749: LD_INT 27
11751: EQUAL
11752: IFFALSE 11762
// sAI := true ;
11754: LD_ADDR_EXP 79
11758: PUSH
11759: LD_INT 1
11761: ST_TO_ADDR
// if p3 = 28 then
11762: LD_VAR 0 3
11766: PUSH
11767: LD_INT 28
11769: EQUAL
11770: IFFALSE 11780
// sCargo := true ;
11772: LD_ADDR_EXP 82
11776: PUSH
11777: LD_INT 1
11779: ST_TO_ADDR
// if p3 = 29 then
11780: LD_VAR 0 3
11784: PUSH
11785: LD_INT 29
11787: EQUAL
11788: IFFALSE 11798
// sDLaser := true ;
11790: LD_ADDR_EXP 83
11794: PUSH
11795: LD_INT 1
11797: ST_TO_ADDR
// if p3 = 30 then
11798: LD_VAR 0 3
11802: PUSH
11803: LD_INT 30
11805: EQUAL
11806: IFFALSE 11816
// sExchange := true ;
11808: LD_ADDR_EXP 84
11812: PUSH
11813: LD_INT 1
11815: ST_TO_ADDR
// if p3 = 31 then
11816: LD_VAR 0 3
11820: PUSH
11821: LD_INT 31
11823: EQUAL
11824: IFFALSE 11834
// sFac := true ;
11826: LD_ADDR_EXP 85
11830: PUSH
11831: LD_INT 1
11833: ST_TO_ADDR
// if p3 = 32 then
11834: LD_VAR 0 3
11838: PUSH
11839: LD_INT 32
11841: EQUAL
11842: IFFALSE 11852
// sPower := true ;
11844: LD_ADDR_EXP 86
11848: PUSH
11849: LD_INT 1
11851: ST_TO_ADDR
// if p3 = 33 then
11852: LD_VAR 0 3
11856: PUSH
11857: LD_INT 33
11859: EQUAL
11860: IFFALSE 11870
// sRandom := true ;
11862: LD_ADDR_EXP 87
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// if p3 = 34 then
11870: LD_VAR 0 3
11874: PUSH
11875: LD_INT 34
11877: EQUAL
11878: IFFALSE 11888
// sShield := true ;
11880: LD_ADDR_EXP 88
11884: PUSH
11885: LD_INT 1
11887: ST_TO_ADDR
// if p3 = 35 then
11888: LD_VAR 0 3
11892: PUSH
11893: LD_INT 35
11895: EQUAL
11896: IFFALSE 11906
// sTime := true ;
11898: LD_ADDR_EXP 89
11902: PUSH
11903: LD_INT 1
11905: ST_TO_ADDR
// if p3 = 36 then
11906: LD_VAR 0 3
11910: PUSH
11911: LD_INT 36
11913: EQUAL
11914: IFFALSE 11924
// sTools := true ;
11916: LD_ADDR_EXP 90
11920: PUSH
11921: LD_INT 1
11923: ST_TO_ADDR
// if p3 = 101 then
11924: LD_VAR 0 3
11928: PUSH
11929: LD_INT 101
11931: EQUAL
11932: IFFALSE 11942
// sSold := true ;
11934: LD_ADDR_EXP 55
11938: PUSH
11939: LD_INT 1
11941: ST_TO_ADDR
// if p3 = 102 then
11942: LD_VAR 0 3
11946: PUSH
11947: LD_INT 102
11949: EQUAL
11950: IFFALSE 11960
// sDiff := true ;
11952: LD_ADDR_EXP 56
11956: PUSH
11957: LD_INT 1
11959: ST_TO_ADDR
// if p3 = 103 then
11960: LD_VAR 0 3
11964: PUSH
11965: LD_INT 103
11967: EQUAL
11968: IFFALSE 11978
// sFog := true ;
11970: LD_ADDR_EXP 59
11974: PUSH
11975: LD_INT 1
11977: ST_TO_ADDR
// if p3 = 104 then
11978: LD_VAR 0 3
11982: PUSH
11983: LD_INT 104
11985: EQUAL
11986: IFFALSE 11996
// sReset := true ;
11988: LD_ADDR_EXP 60
11992: PUSH
11993: LD_INT 1
11995: ST_TO_ADDR
// if p3 = 105 then
11996: LD_VAR 0 3
12000: PUSH
12001: LD_INT 105
12003: EQUAL
12004: IFFALSE 12014
// sSun := true ;
12006: LD_ADDR_EXP 61
12010: PUSH
12011: LD_INT 1
12013: ST_TO_ADDR
// if p3 = 106 then
12014: LD_VAR 0 3
12018: PUSH
12019: LD_INT 106
12021: EQUAL
12022: IFFALSE 12032
// sTiger := true ;
12024: LD_ADDR_EXP 57
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
// if p3 = 107 then
12032: LD_VAR 0 3
12036: PUSH
12037: LD_INT 107
12039: EQUAL
12040: IFFALSE 12050
// sBomb := true ;
12042: LD_ADDR_EXP 58
12046: PUSH
12047: LD_INT 1
12049: ST_TO_ADDR
// if p3 = 108 then
12050: LD_VAR 0 3
12054: PUSH
12055: LD_INT 108
12057: EQUAL
12058: IFFALSE 12068
// sWound := true ;
12060: LD_ADDR_EXP 66
12064: PUSH
12065: LD_INT 1
12067: ST_TO_ADDR
// if p3 = 109 then
12068: LD_VAR 0 3
12072: PUSH
12073: LD_INT 109
12075: EQUAL
12076: IFFALSE 12086
// sBetray := true ;
12078: LD_ADDR_EXP 70
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// if p3 = 110 then
12086: LD_VAR 0 3
12090: PUSH
12091: LD_INT 110
12093: EQUAL
12094: IFFALSE 12104
// sContamin := true ;
12096: LD_ADDR_EXP 71
12100: PUSH
12101: LD_INT 1
12103: ST_TO_ADDR
// if p3 = 111 then
12104: LD_VAR 0 3
12108: PUSH
12109: LD_INT 111
12111: EQUAL
12112: IFFALSE 12122
// sOil := true ;
12114: LD_ADDR_EXP 73
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// if p3 = 112 then
12122: LD_VAR 0 3
12126: PUSH
12127: LD_INT 112
12129: EQUAL
12130: IFFALSE 12140
// sStu := true ;
12132: LD_ADDR_EXP 77
12136: PUSH
12137: LD_INT 1
12139: ST_TO_ADDR
// if p3 = 113 then
12140: LD_VAR 0 3
12144: PUSH
12145: LD_INT 113
12147: EQUAL
12148: IFFALSE 12158
// sBazooka := true ;
12150: LD_ADDR_EXP 80
12154: PUSH
12155: LD_INT 1
12157: ST_TO_ADDR
// if p3 = 114 then
12158: LD_VAR 0 3
12162: PUSH
12163: LD_INT 114
12165: EQUAL
12166: IFFALSE 12176
// sMortar := true ;
12168: LD_ADDR_EXP 81
12172: PUSH
12173: LD_INT 1
12175: ST_TO_ADDR
// if p3 = 115 then
12176: LD_VAR 0 3
12180: PUSH
12181: LD_INT 115
12183: EQUAL
12184: IFFALSE 12194
// sRanger := true ;
12186: LD_ADDR_EXP 91
12190: PUSH
12191: LD_INT 1
12193: ST_TO_ADDR
// end ; end ;
12194: PPOPN 6
12196: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12197: LD_EXP 38
12201: PUSH
12202: LD_EXP 43
12206: AND
12207: IFFALSE 12331
12209: GO 12211
12211: DISABLE
12212: LD_INT 0
12214: PPUSH
12215: PPUSH
// begin enable ;
12216: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12217: LD_ADDR_VAR 0 2
12221: PUSH
12222: LD_INT 22
12224: PUSH
12225: LD_OWVAR 2
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 2
12236: PUSH
12237: LD_INT 34
12239: PUSH
12240: LD_INT 7
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PUSH
12247: LD_INT 34
12249: PUSH
12250: LD_INT 45
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: PUSH
12257: LD_INT 34
12259: PUSH
12260: LD_INT 28
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 34
12269: PUSH
12270: LD_INT 47
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PPUSH
12288: CALL_OW 69
12292: ST_TO_ADDR
// if not tmp then
12293: LD_VAR 0 2
12297: NOT
12298: IFFALSE 12302
// exit ;
12300: GO 12331
// for i in tmp do
12302: LD_ADDR_VAR 0 1
12306: PUSH
12307: LD_VAR 0 2
12311: PUSH
12312: FOR_IN
12313: IFFALSE 12329
// begin SetLives ( i , 0 ) ;
12315: LD_VAR 0 1
12319: PPUSH
12320: LD_INT 0
12322: PPUSH
12323: CALL_OW 234
// end ;
12327: GO 12312
12329: POP
12330: POP
// end ;
12331: PPOPN 2
12333: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12334: LD_EXP 38
12338: PUSH
12339: LD_EXP 44
12343: AND
12344: IFFALSE 12428
12346: GO 12348
12348: DISABLE
12349: LD_INT 0
12351: PPUSH
12352: PPUSH
// begin enable ;
12353: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12354: LD_ADDR_VAR 0 2
12358: PUSH
12359: LD_INT 22
12361: PUSH
12362: LD_OWVAR 2
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: LD_INT 32
12373: PUSH
12374: LD_INT 3
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PPUSH
12385: CALL_OW 69
12389: ST_TO_ADDR
// if not tmp then
12390: LD_VAR 0 2
12394: NOT
12395: IFFALSE 12399
// exit ;
12397: GO 12428
// for i in tmp do
12399: LD_ADDR_VAR 0 1
12403: PUSH
12404: LD_VAR 0 2
12408: PUSH
12409: FOR_IN
12410: IFFALSE 12426
// begin SetLives ( i , 0 ) ;
12412: LD_VAR 0 1
12416: PPUSH
12417: LD_INT 0
12419: PPUSH
12420: CALL_OW 234
// end ;
12424: GO 12409
12426: POP
12427: POP
// end ;
12428: PPOPN 2
12430: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12431: LD_EXP 38
12435: PUSH
12436: LD_EXP 41
12440: AND
12441: IFFALSE 12534
12443: GO 12445
12445: DISABLE
12446: LD_INT 0
12448: PPUSH
// begin enable ;
12449: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12450: LD_ADDR_VAR 0 1
12454: PUSH
12455: LD_INT 22
12457: PUSH
12458: LD_OWVAR 2
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 2
12469: PUSH
12470: LD_INT 25
12472: PUSH
12473: LD_INT 5
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 25
12482: PUSH
12483: LD_INT 9
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 25
12492: PUSH
12493: LD_INT 8
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PPUSH
12510: CALL_OW 69
12514: PUSH
12515: FOR_IN
12516: IFFALSE 12532
// begin SetClass ( i , 1 ) ;
12518: LD_VAR 0 1
12522: PPUSH
12523: LD_INT 1
12525: PPUSH
12526: CALL_OW 336
// end ;
12530: GO 12515
12532: POP
12533: POP
// end ;
12534: PPOPN 1
12536: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12537: LD_EXP 38
12541: PUSH
12542: LD_EXP 42
12546: AND
12547: PUSH
12548: LD_OWVAR 65
12552: PUSH
12553: LD_INT 7
12555: LESS
12556: AND
12557: IFFALSE 12571
12559: GO 12561
12561: DISABLE
// begin enable ;
12562: ENABLE
// game_speed := 7 ;
12563: LD_ADDR_OWVAR 65
12567: PUSH
12568: LD_INT 7
12570: ST_TO_ADDR
// end ;
12571: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12572: LD_EXP 38
12576: PUSH
12577: LD_EXP 45
12581: AND
12582: IFFALSE 12784
12584: GO 12586
12586: DISABLE
12587: LD_INT 0
12589: PPUSH
12590: PPUSH
12591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12592: LD_ADDR_VAR 0 3
12596: PUSH
12597: LD_INT 81
12599: PUSH
12600: LD_OWVAR 2
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 21
12611: PUSH
12612: LD_INT 1
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PPUSH
12623: CALL_OW 69
12627: ST_TO_ADDR
// if not tmp then
12628: LD_VAR 0 3
12632: NOT
12633: IFFALSE 12637
// exit ;
12635: GO 12784
// if tmp > 5 then
12637: LD_VAR 0 3
12641: PUSH
12642: LD_INT 5
12644: GREATER
12645: IFFALSE 12657
// k := 5 else
12647: LD_ADDR_VAR 0 2
12651: PUSH
12652: LD_INT 5
12654: ST_TO_ADDR
12655: GO 12667
// k := tmp ;
12657: LD_ADDR_VAR 0 2
12661: PUSH
12662: LD_VAR 0 3
12666: ST_TO_ADDR
// for i := 1 to k do
12667: LD_ADDR_VAR 0 1
12671: PUSH
12672: DOUBLE
12673: LD_INT 1
12675: DEC
12676: ST_TO_ADDR
12677: LD_VAR 0 2
12681: PUSH
12682: FOR_TO
12683: IFFALSE 12782
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12685: LD_VAR 0 3
12689: PUSH
12690: LD_VAR 0 1
12694: ARRAY
12695: PPUSH
12696: LD_VAR 0 1
12700: PUSH
12701: LD_INT 4
12703: MOD
12704: PUSH
12705: LD_INT 1
12707: PLUS
12708: PPUSH
12709: CALL_OW 259
12713: PUSH
12714: LD_INT 10
12716: LESS
12717: IFFALSE 12780
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12719: LD_VAR 0 3
12723: PUSH
12724: LD_VAR 0 1
12728: ARRAY
12729: PPUSH
12730: LD_VAR 0 1
12734: PUSH
12735: LD_INT 4
12737: MOD
12738: PUSH
12739: LD_INT 1
12741: PLUS
12742: PPUSH
12743: LD_VAR 0 3
12747: PUSH
12748: LD_VAR 0 1
12752: ARRAY
12753: PPUSH
12754: LD_VAR 0 1
12758: PUSH
12759: LD_INT 4
12761: MOD
12762: PUSH
12763: LD_INT 1
12765: PLUS
12766: PPUSH
12767: CALL_OW 259
12771: PUSH
12772: LD_INT 1
12774: PLUS
12775: PPUSH
12776: CALL_OW 237
12780: GO 12682
12782: POP
12783: POP
// end ;
12784: PPOPN 3
12786: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12787: LD_EXP 38
12791: PUSH
12792: LD_EXP 46
12796: AND
12797: IFFALSE 12817
12799: GO 12801
12801: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12802: LD_INT 4
12804: PPUSH
12805: LD_OWVAR 2
12809: PPUSH
12810: LD_INT 0
12812: PPUSH
12813: CALL_OW 324
12817: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12818: LD_EXP 38
12822: PUSH
12823: LD_EXP 75
12827: AND
12828: IFFALSE 12848
12830: GO 12832
12832: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12833: LD_INT 19
12835: PPUSH
12836: LD_OWVAR 2
12840: PPUSH
12841: LD_INT 0
12843: PPUSH
12844: CALL_OW 324
12848: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12849: LD_EXP 38
12853: PUSH
12854: LD_EXP 47
12858: AND
12859: IFFALSE 12961
12861: GO 12863
12863: DISABLE
12864: LD_INT 0
12866: PPUSH
12867: PPUSH
// begin enable ;
12868: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12869: LD_ADDR_VAR 0 2
12873: PUSH
12874: LD_INT 22
12876: PUSH
12877: LD_OWVAR 2
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: PUSH
12886: LD_INT 2
12888: PUSH
12889: LD_INT 34
12891: PUSH
12892: LD_INT 11
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PUSH
12899: LD_INT 34
12901: PUSH
12902: LD_INT 30
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: LIST
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PPUSH
12918: CALL_OW 69
12922: ST_TO_ADDR
// if not tmp then
12923: LD_VAR 0 2
12927: NOT
12928: IFFALSE 12932
// exit ;
12930: GO 12961
// for i in tmp do
12932: LD_ADDR_VAR 0 1
12936: PUSH
12937: LD_VAR 0 2
12941: PUSH
12942: FOR_IN
12943: IFFALSE 12959
// begin SetLives ( i , 0 ) ;
12945: LD_VAR 0 1
12949: PPUSH
12950: LD_INT 0
12952: PPUSH
12953: CALL_OW 234
// end ;
12957: GO 12942
12959: POP
12960: POP
// end ;
12961: PPOPN 2
12963: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12964: LD_EXP 38
12968: PUSH
12969: LD_EXP 48
12973: AND
12974: IFFALSE 12994
12976: GO 12978
12978: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12979: LD_INT 32
12981: PPUSH
12982: LD_OWVAR 2
12986: PPUSH
12987: LD_INT 0
12989: PPUSH
12990: CALL_OW 324
12994: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12995: LD_EXP 38
12999: PUSH
13000: LD_EXP 49
13004: AND
13005: IFFALSE 13186
13007: GO 13009
13009: DISABLE
13010: LD_INT 0
13012: PPUSH
13013: PPUSH
13014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13015: LD_ADDR_VAR 0 2
13019: PUSH
13020: LD_INT 22
13022: PUSH
13023: LD_OWVAR 2
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 33
13034: PUSH
13035: LD_INT 3
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PPUSH
13046: CALL_OW 69
13050: ST_TO_ADDR
// if not tmp then
13051: LD_VAR 0 2
13055: NOT
13056: IFFALSE 13060
// exit ;
13058: GO 13186
// side := 0 ;
13060: LD_ADDR_VAR 0 3
13064: PUSH
13065: LD_INT 0
13067: ST_TO_ADDR
// for i := 1 to 8 do
13068: LD_ADDR_VAR 0 1
13072: PUSH
13073: DOUBLE
13074: LD_INT 1
13076: DEC
13077: ST_TO_ADDR
13078: LD_INT 8
13080: PUSH
13081: FOR_TO
13082: IFFALSE 13130
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13084: LD_OWVAR 2
13088: PUSH
13089: LD_VAR 0 1
13093: NONEQUAL
13094: PUSH
13095: LD_OWVAR 2
13099: PPUSH
13100: LD_VAR 0 1
13104: PPUSH
13105: CALL_OW 81
13109: PUSH
13110: LD_INT 2
13112: EQUAL
13113: AND
13114: IFFALSE 13128
// begin side := i ;
13116: LD_ADDR_VAR 0 3
13120: PUSH
13121: LD_VAR 0 1
13125: ST_TO_ADDR
// break ;
13126: GO 13130
// end ;
13128: GO 13081
13130: POP
13131: POP
// if not side then
13132: LD_VAR 0 3
13136: NOT
13137: IFFALSE 13141
// exit ;
13139: GO 13186
// for i := 1 to tmp do
13141: LD_ADDR_VAR 0 1
13145: PUSH
13146: DOUBLE
13147: LD_INT 1
13149: DEC
13150: ST_TO_ADDR
13151: LD_VAR 0 2
13155: PUSH
13156: FOR_TO
13157: IFFALSE 13184
// if Prob ( 60 ) then
13159: LD_INT 60
13161: PPUSH
13162: CALL_OW 13
13166: IFFALSE 13182
// SetSide ( i , side ) ;
13168: LD_VAR 0 1
13172: PPUSH
13173: LD_VAR 0 3
13177: PPUSH
13178: CALL_OW 235
13182: GO 13156
13184: POP
13185: POP
// end ;
13186: PPOPN 3
13188: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13189: LD_EXP 38
13193: PUSH
13194: LD_EXP 51
13198: AND
13199: IFFALSE 13318
13201: GO 13203
13203: DISABLE
13204: LD_INT 0
13206: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13207: LD_ADDR_VAR 0 1
13211: PUSH
13212: LD_INT 22
13214: PUSH
13215: LD_OWVAR 2
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: LD_INT 21
13226: PUSH
13227: LD_INT 1
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 3
13236: PUSH
13237: LD_INT 23
13239: PUSH
13240: LD_INT 0
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: LIST
13255: PPUSH
13256: CALL_OW 69
13260: PUSH
13261: FOR_IN
13262: IFFALSE 13316
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13264: LD_VAR 0 1
13268: PPUSH
13269: CALL_OW 257
13273: PUSH
13274: LD_INT 1
13276: PUSH
13277: LD_INT 2
13279: PUSH
13280: LD_INT 3
13282: PUSH
13283: LD_INT 4
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: IN
13292: IFFALSE 13314
// SetClass ( un , rand ( 1 , 4 ) ) ;
13294: LD_VAR 0 1
13298: PPUSH
13299: LD_INT 1
13301: PPUSH
13302: LD_INT 4
13304: PPUSH
13305: CALL_OW 12
13309: PPUSH
13310: CALL_OW 336
13314: GO 13261
13316: POP
13317: POP
// end ;
13318: PPOPN 1
13320: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13321: LD_EXP 38
13325: PUSH
13326: LD_EXP 50
13330: AND
13331: IFFALSE 13410
13333: GO 13335
13335: DISABLE
13336: LD_INT 0
13338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13339: LD_ADDR_VAR 0 1
13343: PUSH
13344: LD_INT 22
13346: PUSH
13347: LD_OWVAR 2
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 21
13358: PUSH
13359: LD_INT 3
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PPUSH
13370: CALL_OW 69
13374: ST_TO_ADDR
// if not tmp then
13375: LD_VAR 0 1
13379: NOT
13380: IFFALSE 13384
// exit ;
13382: GO 13410
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13384: LD_VAR 0 1
13388: PUSH
13389: LD_INT 1
13391: PPUSH
13392: LD_VAR 0 1
13396: PPUSH
13397: CALL_OW 12
13401: ARRAY
13402: PPUSH
13403: LD_INT 100
13405: PPUSH
13406: CALL_OW 234
// end ;
13410: PPOPN 1
13412: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13413: LD_EXP 38
13417: PUSH
13418: LD_EXP 52
13422: AND
13423: IFFALSE 13521
13425: GO 13427
13427: DISABLE
13428: LD_INT 0
13430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13431: LD_ADDR_VAR 0 1
13435: PUSH
13436: LD_INT 22
13438: PUSH
13439: LD_OWVAR 2
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 21
13450: PUSH
13451: LD_INT 1
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PPUSH
13462: CALL_OW 69
13466: ST_TO_ADDR
// if not tmp then
13467: LD_VAR 0 1
13471: NOT
13472: IFFALSE 13476
// exit ;
13474: GO 13521
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13476: LD_VAR 0 1
13480: PUSH
13481: LD_INT 1
13483: PPUSH
13484: LD_VAR 0 1
13488: PPUSH
13489: CALL_OW 12
13493: ARRAY
13494: PPUSH
13495: LD_INT 1
13497: PPUSH
13498: LD_INT 4
13500: PPUSH
13501: CALL_OW 12
13505: PPUSH
13506: LD_INT 3000
13508: PPUSH
13509: LD_INT 9000
13511: PPUSH
13512: CALL_OW 12
13516: PPUSH
13517: CALL_OW 492
// end ;
13521: PPOPN 1
13523: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13524: LD_EXP 38
13528: PUSH
13529: LD_EXP 53
13533: AND
13534: IFFALSE 13554
13536: GO 13538
13538: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13539: LD_INT 1
13541: PPUSH
13542: LD_OWVAR 2
13546: PPUSH
13547: LD_INT 0
13549: PPUSH
13550: CALL_OW 324
13554: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13555: LD_EXP 38
13559: PUSH
13560: LD_EXP 54
13564: AND
13565: IFFALSE 13648
13567: GO 13569
13569: DISABLE
13570: LD_INT 0
13572: PPUSH
13573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13574: LD_ADDR_VAR 0 2
13578: PUSH
13579: LD_INT 22
13581: PUSH
13582: LD_OWVAR 2
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 21
13593: PUSH
13594: LD_INT 3
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PPUSH
13605: CALL_OW 69
13609: ST_TO_ADDR
// if not tmp then
13610: LD_VAR 0 2
13614: NOT
13615: IFFALSE 13619
// exit ;
13617: GO 13648
// for i in tmp do
13619: LD_ADDR_VAR 0 1
13623: PUSH
13624: LD_VAR 0 2
13628: PUSH
13629: FOR_IN
13630: IFFALSE 13646
// SetBLevel ( i , 10 ) ;
13632: LD_VAR 0 1
13636: PPUSH
13637: LD_INT 10
13639: PPUSH
13640: CALL_OW 241
13644: GO 13629
13646: POP
13647: POP
// end ;
13648: PPOPN 2
13650: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13651: LD_EXP 38
13655: PUSH
13656: LD_EXP 55
13660: AND
13661: IFFALSE 13772
13663: GO 13665
13665: DISABLE
13666: LD_INT 0
13668: PPUSH
13669: PPUSH
13670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13671: LD_ADDR_VAR 0 3
13675: PUSH
13676: LD_INT 22
13678: PUSH
13679: LD_OWVAR 2
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 25
13690: PUSH
13691: LD_INT 1
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 69
13706: ST_TO_ADDR
// if not tmp then
13707: LD_VAR 0 3
13711: NOT
13712: IFFALSE 13716
// exit ;
13714: GO 13772
// un := tmp [ rand ( 1 , tmp ) ] ;
13716: LD_ADDR_VAR 0 2
13720: PUSH
13721: LD_VAR 0 3
13725: PUSH
13726: LD_INT 1
13728: PPUSH
13729: LD_VAR 0 3
13733: PPUSH
13734: CALL_OW 12
13738: ARRAY
13739: ST_TO_ADDR
// if Crawls ( un ) then
13740: LD_VAR 0 2
13744: PPUSH
13745: CALL_OW 318
13749: IFFALSE 13760
// ComWalk ( un ) ;
13751: LD_VAR 0 2
13755: PPUSH
13756: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13760: LD_VAR 0 2
13764: PPUSH
13765: LD_INT 5
13767: PPUSH
13768: CALL_OW 336
// end ;
13772: PPOPN 3
13774: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13775: LD_EXP 38
13779: PUSH
13780: LD_EXP 56
13784: AND
13785: PUSH
13786: LD_OWVAR 67
13790: PUSH
13791: LD_INT 3
13793: LESS
13794: AND
13795: IFFALSE 13814
13797: GO 13799
13799: DISABLE
// Difficulty := Difficulty + 1 ;
13800: LD_ADDR_OWVAR 67
13804: PUSH
13805: LD_OWVAR 67
13809: PUSH
13810: LD_INT 1
13812: PLUS
13813: ST_TO_ADDR
13814: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13815: LD_EXP 38
13819: PUSH
13820: LD_EXP 57
13824: AND
13825: IFFALSE 13928
13827: GO 13829
13829: DISABLE
13830: LD_INT 0
13832: PPUSH
// begin for i := 1 to 5 do
13833: LD_ADDR_VAR 0 1
13837: PUSH
13838: DOUBLE
13839: LD_INT 1
13841: DEC
13842: ST_TO_ADDR
13843: LD_INT 5
13845: PUSH
13846: FOR_TO
13847: IFFALSE 13926
// begin uc_nation := nation_nature ;
13849: LD_ADDR_OWVAR 21
13853: PUSH
13854: LD_INT 0
13856: ST_TO_ADDR
// uc_side := 0 ;
13857: LD_ADDR_OWVAR 20
13861: PUSH
13862: LD_INT 0
13864: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13865: LD_ADDR_OWVAR 29
13869: PUSH
13870: LD_INT 12
13872: PUSH
13873: LD_INT 12
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: ST_TO_ADDR
// hc_agressivity := 20 ;
13880: LD_ADDR_OWVAR 35
13884: PUSH
13885: LD_INT 20
13887: ST_TO_ADDR
// hc_class := class_tiger ;
13888: LD_ADDR_OWVAR 28
13892: PUSH
13893: LD_INT 14
13895: ST_TO_ADDR
// hc_gallery :=  ;
13896: LD_ADDR_OWVAR 33
13900: PUSH
13901: LD_STRING 
13903: ST_TO_ADDR
// hc_name :=  ;
13904: LD_ADDR_OWVAR 26
13908: PUSH
13909: LD_STRING 
13911: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13912: CALL_OW 44
13916: PPUSH
13917: LD_INT 0
13919: PPUSH
13920: CALL_OW 51
// end ;
13924: GO 13846
13926: POP
13927: POP
// end ;
13928: PPOPN 1
13930: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13931: LD_EXP 38
13935: PUSH
13936: LD_EXP 58
13940: AND
13941: IFFALSE 13950
13943: GO 13945
13945: DISABLE
// StreamSibBomb ;
13946: CALL 13951 0 0
13950: END
// export function StreamSibBomb ; var i , x , y ; begin
13951: LD_INT 0
13953: PPUSH
13954: PPUSH
13955: PPUSH
13956: PPUSH
// result := false ;
13957: LD_ADDR_VAR 0 1
13961: PUSH
13962: LD_INT 0
13964: ST_TO_ADDR
// for i := 1 to 16 do
13965: LD_ADDR_VAR 0 2
13969: PUSH
13970: DOUBLE
13971: LD_INT 1
13973: DEC
13974: ST_TO_ADDR
13975: LD_INT 16
13977: PUSH
13978: FOR_TO
13979: IFFALSE 14178
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13981: LD_ADDR_VAR 0 3
13985: PUSH
13986: LD_INT 10
13988: PUSH
13989: LD_INT 20
13991: PUSH
13992: LD_INT 30
13994: PUSH
13995: LD_INT 40
13997: PUSH
13998: LD_INT 50
14000: PUSH
14001: LD_INT 60
14003: PUSH
14004: LD_INT 70
14006: PUSH
14007: LD_INT 80
14009: PUSH
14010: LD_INT 90
14012: PUSH
14013: LD_INT 100
14015: PUSH
14016: LD_INT 110
14018: PUSH
14019: LD_INT 120
14021: PUSH
14022: LD_INT 130
14024: PUSH
14025: LD_INT 140
14027: PUSH
14028: LD_INT 150
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: PUSH
14048: LD_INT 1
14050: PPUSH
14051: LD_INT 15
14053: PPUSH
14054: CALL_OW 12
14058: ARRAY
14059: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14060: LD_ADDR_VAR 0 4
14064: PUSH
14065: LD_INT 10
14067: PUSH
14068: LD_INT 20
14070: PUSH
14071: LD_INT 30
14073: PUSH
14074: LD_INT 40
14076: PUSH
14077: LD_INT 50
14079: PUSH
14080: LD_INT 60
14082: PUSH
14083: LD_INT 70
14085: PUSH
14086: LD_INT 80
14088: PUSH
14089: LD_INT 90
14091: PUSH
14092: LD_INT 100
14094: PUSH
14095: LD_INT 110
14097: PUSH
14098: LD_INT 120
14100: PUSH
14101: LD_INT 130
14103: PUSH
14104: LD_INT 140
14106: PUSH
14107: LD_INT 150
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 1
14129: PPUSH
14130: LD_INT 15
14132: PPUSH
14133: CALL_OW 12
14137: ARRAY
14138: ST_TO_ADDR
// if ValidHex ( x , y ) then
14139: LD_VAR 0 3
14143: PPUSH
14144: LD_VAR 0 4
14148: PPUSH
14149: CALL_OW 488
14153: IFFALSE 14176
// begin result := [ x , y ] ;
14155: LD_ADDR_VAR 0 1
14159: PUSH
14160: LD_VAR 0 3
14164: PUSH
14165: LD_VAR 0 4
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: ST_TO_ADDR
// break ;
14174: GO 14178
// end ; end ;
14176: GO 13978
14178: POP
14179: POP
// if result then
14180: LD_VAR 0 1
14184: IFFALSE 14244
// begin ToLua ( playSibBomb() ) ;
14186: LD_STRING playSibBomb()
14188: PPUSH
14189: CALL_OW 559
// wait ( 0 0$14 ) ;
14193: LD_INT 490
14195: PPUSH
14196: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14200: LD_VAR 0 1
14204: PUSH
14205: LD_INT 1
14207: ARRAY
14208: PPUSH
14209: LD_VAR 0 1
14213: PUSH
14214: LD_INT 2
14216: ARRAY
14217: PPUSH
14218: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14222: LD_VAR 0 1
14226: PUSH
14227: LD_INT 1
14229: ARRAY
14230: PPUSH
14231: LD_VAR 0 1
14235: PUSH
14236: LD_INT 2
14238: ARRAY
14239: PPUSH
14240: CALL_OW 429
// end ; end ;
14244: LD_VAR 0 1
14248: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14249: LD_EXP 38
14253: PUSH
14254: LD_EXP 60
14258: AND
14259: IFFALSE 14271
14261: GO 14263
14263: DISABLE
// YouLost (  ) ;
14264: LD_STRING 
14266: PPUSH
14267: CALL_OW 104
14271: END
// every 0 0$1 trigger StreamModeActive and sFog do
14272: LD_EXP 38
14276: PUSH
14277: LD_EXP 59
14281: AND
14282: IFFALSE 14296
14284: GO 14286
14286: DISABLE
// FogOff ( your_side ) ;
14287: LD_OWVAR 2
14291: PPUSH
14292: CALL_OW 344
14296: END
// every 0 0$1 trigger StreamModeActive and sSun do
14297: LD_EXP 38
14301: PUSH
14302: LD_EXP 61
14306: AND
14307: IFFALSE 14335
14309: GO 14311
14311: DISABLE
// begin solar_recharge_percent := 0 ;
14312: LD_ADDR_OWVAR 79
14316: PUSH
14317: LD_INT 0
14319: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14320: LD_INT 10500
14322: PPUSH
14323: CALL_OW 67
// solar_recharge_percent := 100 ;
14327: LD_ADDR_OWVAR 79
14331: PUSH
14332: LD_INT 100
14334: ST_TO_ADDR
// end ;
14335: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14336: LD_EXP 38
14340: PUSH
14341: LD_EXP 62
14345: AND
14346: IFFALSE 14585
14348: GO 14350
14350: DISABLE
14351: LD_INT 0
14353: PPUSH
14354: PPUSH
14355: PPUSH
// begin tmp := [ ] ;
14356: LD_ADDR_VAR 0 3
14360: PUSH
14361: EMPTY
14362: ST_TO_ADDR
// for i := 1 to 6 do
14363: LD_ADDR_VAR 0 1
14367: PUSH
14368: DOUBLE
14369: LD_INT 1
14371: DEC
14372: ST_TO_ADDR
14373: LD_INT 6
14375: PUSH
14376: FOR_TO
14377: IFFALSE 14482
// begin uc_nation := nation_nature ;
14379: LD_ADDR_OWVAR 21
14383: PUSH
14384: LD_INT 0
14386: ST_TO_ADDR
// uc_side := 0 ;
14387: LD_ADDR_OWVAR 20
14391: PUSH
14392: LD_INT 0
14394: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14395: LD_ADDR_OWVAR 29
14399: PUSH
14400: LD_INT 12
14402: PUSH
14403: LD_INT 12
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: ST_TO_ADDR
// hc_agressivity := 20 ;
14410: LD_ADDR_OWVAR 35
14414: PUSH
14415: LD_INT 20
14417: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14418: LD_ADDR_OWVAR 28
14422: PUSH
14423: LD_INT 17
14425: ST_TO_ADDR
// hc_gallery :=  ;
14426: LD_ADDR_OWVAR 33
14430: PUSH
14431: LD_STRING 
14433: ST_TO_ADDR
// hc_name :=  ;
14434: LD_ADDR_OWVAR 26
14438: PUSH
14439: LD_STRING 
14441: ST_TO_ADDR
// un := CreateHuman ;
14442: LD_ADDR_VAR 0 2
14446: PUSH
14447: CALL_OW 44
14451: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14452: LD_VAR 0 2
14456: PPUSH
14457: LD_INT 1
14459: PPUSH
14460: CALL_OW 51
// tmp := tmp ^ un ;
14464: LD_ADDR_VAR 0 3
14468: PUSH
14469: LD_VAR 0 3
14473: PUSH
14474: LD_VAR 0 2
14478: ADD
14479: ST_TO_ADDR
// end ;
14480: GO 14376
14482: POP
14483: POP
// repeat wait ( 0 0$1 ) ;
14484: LD_INT 35
14486: PPUSH
14487: CALL_OW 67
// for un in tmp do
14491: LD_ADDR_VAR 0 2
14495: PUSH
14496: LD_VAR 0 3
14500: PUSH
14501: FOR_IN
14502: IFFALSE 14576
// begin if IsDead ( un ) then
14504: LD_VAR 0 2
14508: PPUSH
14509: CALL_OW 301
14513: IFFALSE 14533
// begin tmp := tmp diff un ;
14515: LD_ADDR_VAR 0 3
14519: PUSH
14520: LD_VAR 0 3
14524: PUSH
14525: LD_VAR 0 2
14529: DIFF
14530: ST_TO_ADDR
// continue ;
14531: GO 14501
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14533: LD_VAR 0 2
14537: PPUSH
14538: LD_INT 3
14540: PUSH
14541: LD_INT 22
14543: PUSH
14544: LD_INT 0
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PPUSH
14555: CALL_OW 69
14559: PPUSH
14560: LD_VAR 0 2
14564: PPUSH
14565: CALL_OW 74
14569: PPUSH
14570: CALL_OW 115
// end ;
14574: GO 14501
14576: POP
14577: POP
// until not tmp ;
14578: LD_VAR 0 3
14582: NOT
14583: IFFALSE 14484
// end ;
14585: PPOPN 3
14587: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14588: LD_EXP 38
14592: PUSH
14593: LD_EXP 63
14597: AND
14598: IFFALSE 14652
14600: GO 14602
14602: DISABLE
// begin ToLua ( displayTroll(); ) ;
14603: LD_STRING displayTroll();
14605: PPUSH
14606: CALL_OW 559
// wait ( 3 3$00 ) ;
14610: LD_INT 6300
14612: PPUSH
14613: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14617: LD_STRING hideTroll();
14619: PPUSH
14620: CALL_OW 559
// wait ( 1 1$00 ) ;
14624: LD_INT 2100
14626: PPUSH
14627: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14631: LD_STRING displayTroll();
14633: PPUSH
14634: CALL_OW 559
// wait ( 1 1$00 ) ;
14638: LD_INT 2100
14640: PPUSH
14641: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14645: LD_STRING hideTroll();
14647: PPUSH
14648: CALL_OW 559
// end ;
14652: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14653: LD_EXP 38
14657: PUSH
14658: LD_EXP 64
14662: AND
14663: IFFALSE 14726
14665: GO 14667
14667: DISABLE
14668: LD_INT 0
14670: PPUSH
// begin p := 0 ;
14671: LD_ADDR_VAR 0 1
14675: PUSH
14676: LD_INT 0
14678: ST_TO_ADDR
// repeat game_speed := 1 ;
14679: LD_ADDR_OWVAR 65
14683: PUSH
14684: LD_INT 1
14686: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14687: LD_INT 35
14689: PPUSH
14690: CALL_OW 67
// p := p + 1 ;
14694: LD_ADDR_VAR 0 1
14698: PUSH
14699: LD_VAR 0 1
14703: PUSH
14704: LD_INT 1
14706: PLUS
14707: ST_TO_ADDR
// until p >= 60 ;
14708: LD_VAR 0 1
14712: PUSH
14713: LD_INT 60
14715: GREATEREQUAL
14716: IFFALSE 14679
// game_speed := 4 ;
14718: LD_ADDR_OWVAR 65
14722: PUSH
14723: LD_INT 4
14725: ST_TO_ADDR
// end ;
14726: PPOPN 1
14728: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14729: LD_EXP 38
14733: PUSH
14734: LD_EXP 65
14738: AND
14739: IFFALSE 14885
14741: GO 14743
14743: DISABLE
14744: LD_INT 0
14746: PPUSH
14747: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14748: LD_ADDR_VAR 0 1
14752: PUSH
14753: LD_INT 22
14755: PUSH
14756: LD_OWVAR 2
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: LD_INT 2
14767: PUSH
14768: LD_INT 30
14770: PUSH
14771: LD_INT 0
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 30
14780: PUSH
14781: LD_INT 1
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: LIST
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PPUSH
14797: CALL_OW 69
14801: ST_TO_ADDR
// if not depot then
14802: LD_VAR 0 1
14806: NOT
14807: IFFALSE 14811
// exit ;
14809: GO 14885
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14811: LD_ADDR_VAR 0 2
14815: PUSH
14816: LD_VAR 0 1
14820: PUSH
14821: LD_INT 1
14823: PPUSH
14824: LD_VAR 0 1
14828: PPUSH
14829: CALL_OW 12
14833: ARRAY
14834: PPUSH
14835: CALL_OW 274
14839: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14840: LD_VAR 0 2
14844: PPUSH
14845: LD_INT 1
14847: PPUSH
14848: LD_INT 0
14850: PPUSH
14851: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14855: LD_VAR 0 2
14859: PPUSH
14860: LD_INT 2
14862: PPUSH
14863: LD_INT 0
14865: PPUSH
14866: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14870: LD_VAR 0 2
14874: PPUSH
14875: LD_INT 3
14877: PPUSH
14878: LD_INT 0
14880: PPUSH
14881: CALL_OW 277
// end ;
14885: PPOPN 2
14887: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14888: LD_EXP 38
14892: PUSH
14893: LD_EXP 66
14897: AND
14898: IFFALSE 14995
14900: GO 14902
14902: DISABLE
14903: LD_INT 0
14905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14906: LD_ADDR_VAR 0 1
14910: PUSH
14911: LD_INT 22
14913: PUSH
14914: LD_OWVAR 2
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 21
14925: PUSH
14926: LD_INT 1
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 3
14935: PUSH
14936: LD_INT 23
14938: PUSH
14939: LD_INT 0
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: LIST
14954: PPUSH
14955: CALL_OW 69
14959: ST_TO_ADDR
// if not tmp then
14960: LD_VAR 0 1
14964: NOT
14965: IFFALSE 14969
// exit ;
14967: GO 14995
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14969: LD_VAR 0 1
14973: PUSH
14974: LD_INT 1
14976: PPUSH
14977: LD_VAR 0 1
14981: PPUSH
14982: CALL_OW 12
14986: ARRAY
14987: PPUSH
14988: LD_INT 200
14990: PPUSH
14991: CALL_OW 234
// end ;
14995: PPOPN 1
14997: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14998: LD_EXP 38
15002: PUSH
15003: LD_EXP 67
15007: AND
15008: IFFALSE 15087
15010: GO 15012
15012: DISABLE
15013: LD_INT 0
15015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15016: LD_ADDR_VAR 0 1
15020: PUSH
15021: LD_INT 22
15023: PUSH
15024: LD_OWVAR 2
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PUSH
15033: LD_INT 21
15035: PUSH
15036: LD_INT 2
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PPUSH
15047: CALL_OW 69
15051: ST_TO_ADDR
// if not tmp then
15052: LD_VAR 0 1
15056: NOT
15057: IFFALSE 15061
// exit ;
15059: GO 15087
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15061: LD_VAR 0 1
15065: PUSH
15066: LD_INT 1
15068: PPUSH
15069: LD_VAR 0 1
15073: PPUSH
15074: CALL_OW 12
15078: ARRAY
15079: PPUSH
15080: LD_INT 60
15082: PPUSH
15083: CALL_OW 234
// end ;
15087: PPOPN 1
15089: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15090: LD_EXP 38
15094: PUSH
15095: LD_EXP 68
15099: AND
15100: IFFALSE 15199
15102: GO 15104
15104: DISABLE
15105: LD_INT 0
15107: PPUSH
15108: PPUSH
// begin enable ;
15109: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15110: LD_ADDR_VAR 0 1
15114: PUSH
15115: LD_INT 22
15117: PUSH
15118: LD_OWVAR 2
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PUSH
15127: LD_INT 61
15129: PUSH
15130: EMPTY
15131: LIST
15132: PUSH
15133: LD_INT 33
15135: PUSH
15136: LD_INT 2
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: EMPTY
15144: LIST
15145: LIST
15146: LIST
15147: PPUSH
15148: CALL_OW 69
15152: ST_TO_ADDR
// if not tmp then
15153: LD_VAR 0 1
15157: NOT
15158: IFFALSE 15162
// exit ;
15160: GO 15199
// for i in tmp do
15162: LD_ADDR_VAR 0 2
15166: PUSH
15167: LD_VAR 0 1
15171: PUSH
15172: FOR_IN
15173: IFFALSE 15197
// if IsControledBy ( i ) then
15175: LD_VAR 0 2
15179: PPUSH
15180: CALL_OW 312
15184: IFFALSE 15195
// ComUnlink ( i ) ;
15186: LD_VAR 0 2
15190: PPUSH
15191: CALL_OW 136
15195: GO 15172
15197: POP
15198: POP
// end ;
15199: PPOPN 2
15201: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15202: LD_EXP 38
15206: PUSH
15207: LD_EXP 69
15211: AND
15212: IFFALSE 15352
15214: GO 15216
15216: DISABLE
15217: LD_INT 0
15219: PPUSH
15220: PPUSH
// begin ToLua ( displayPowell(); ) ;
15221: LD_STRING displayPowell();
15223: PPUSH
15224: CALL_OW 559
// uc_side := 0 ;
15228: LD_ADDR_OWVAR 20
15232: PUSH
15233: LD_INT 0
15235: ST_TO_ADDR
// uc_nation := 2 ;
15236: LD_ADDR_OWVAR 21
15240: PUSH
15241: LD_INT 2
15243: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15244: LD_ADDR_OWVAR 37
15248: PUSH
15249: LD_INT 14
15251: ST_TO_ADDR
// vc_engine := engine_siberite ;
15252: LD_ADDR_OWVAR 39
15256: PUSH
15257: LD_INT 3
15259: ST_TO_ADDR
// vc_control := control_apeman ;
15260: LD_ADDR_OWVAR 38
15264: PUSH
15265: LD_INT 5
15267: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15268: LD_ADDR_OWVAR 40
15272: PUSH
15273: LD_INT 29
15275: ST_TO_ADDR
// un := CreateVehicle ;
15276: LD_ADDR_VAR 0 2
15280: PUSH
15281: CALL_OW 45
15285: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15286: LD_VAR 0 2
15290: PPUSH
15291: LD_INT 1
15293: PPUSH
15294: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15298: LD_INT 35
15300: PPUSH
15301: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15305: LD_VAR 0 2
15309: PPUSH
15310: LD_INT 22
15312: PUSH
15313: LD_OWVAR 2
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PPUSH
15322: CALL_OW 69
15326: PPUSH
15327: LD_VAR 0 2
15331: PPUSH
15332: CALL_OW 74
15336: PPUSH
15337: CALL_OW 115
// until IsDead ( un ) ;
15341: LD_VAR 0 2
15345: PPUSH
15346: CALL_OW 301
15350: IFFALSE 15298
// end ;
15352: PPOPN 2
15354: END
// every 0 0$1 trigger StreamModeActive and sStu do
15355: LD_EXP 38
15359: PUSH
15360: LD_EXP 77
15364: AND
15365: IFFALSE 15381
15367: GO 15369
15369: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15370: LD_STRING displayStucuk();
15372: PPUSH
15373: CALL_OW 559
// ResetFog ;
15377: CALL_OW 335
// end ;
15381: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15382: LD_EXP 38
15386: PUSH
15387: LD_EXP 70
15391: AND
15392: IFFALSE 15533
15394: GO 15396
15396: DISABLE
15397: LD_INT 0
15399: PPUSH
15400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15401: LD_ADDR_VAR 0 2
15405: PUSH
15406: LD_INT 22
15408: PUSH
15409: LD_OWVAR 2
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 21
15420: PUSH
15421: LD_INT 1
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PPUSH
15432: CALL_OW 69
15436: ST_TO_ADDR
// if not tmp then
15437: LD_VAR 0 2
15441: NOT
15442: IFFALSE 15446
// exit ;
15444: GO 15533
// un := tmp [ rand ( 1 , tmp ) ] ;
15446: LD_ADDR_VAR 0 1
15450: PUSH
15451: LD_VAR 0 2
15455: PUSH
15456: LD_INT 1
15458: PPUSH
15459: LD_VAR 0 2
15463: PPUSH
15464: CALL_OW 12
15468: ARRAY
15469: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15470: LD_VAR 0 1
15474: PPUSH
15475: LD_INT 0
15477: PPUSH
15478: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15482: LD_VAR 0 1
15486: PPUSH
15487: LD_OWVAR 3
15491: PUSH
15492: LD_VAR 0 1
15496: DIFF
15497: PPUSH
15498: LD_VAR 0 1
15502: PPUSH
15503: CALL_OW 74
15507: PPUSH
15508: CALL_OW 115
// wait ( 0 0$20 ) ;
15512: LD_INT 700
15514: PPUSH
15515: CALL_OW 67
// SetSide ( un , your_side ) ;
15519: LD_VAR 0 1
15523: PPUSH
15524: LD_OWVAR 2
15528: PPUSH
15529: CALL_OW 235
// end ;
15533: PPOPN 2
15535: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15536: LD_EXP 38
15540: PUSH
15541: LD_EXP 71
15545: AND
15546: IFFALSE 15652
15548: GO 15550
15550: DISABLE
15551: LD_INT 0
15553: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15554: LD_ADDR_VAR 0 1
15558: PUSH
15559: LD_INT 22
15561: PUSH
15562: LD_OWVAR 2
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 2
15573: PUSH
15574: LD_INT 30
15576: PUSH
15577: LD_INT 0
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: LD_INT 30
15586: PUSH
15587: LD_INT 1
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: LIST
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PPUSH
15603: CALL_OW 69
15607: ST_TO_ADDR
// if not depot then
15608: LD_VAR 0 1
15612: NOT
15613: IFFALSE 15617
// exit ;
15615: GO 15652
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15617: LD_VAR 0 1
15621: PUSH
15622: LD_INT 1
15624: ARRAY
15625: PPUSH
15626: CALL_OW 250
15630: PPUSH
15631: LD_VAR 0 1
15635: PUSH
15636: LD_INT 1
15638: ARRAY
15639: PPUSH
15640: CALL_OW 251
15644: PPUSH
15645: LD_INT 70
15647: PPUSH
15648: CALL_OW 495
// end ;
15652: PPOPN 1
15654: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15655: LD_EXP 38
15659: PUSH
15660: LD_EXP 72
15664: AND
15665: IFFALSE 15876
15667: GO 15669
15669: DISABLE
15670: LD_INT 0
15672: PPUSH
15673: PPUSH
15674: PPUSH
15675: PPUSH
15676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15677: LD_ADDR_VAR 0 5
15681: PUSH
15682: LD_INT 22
15684: PUSH
15685: LD_OWVAR 2
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 21
15696: PUSH
15697: LD_INT 1
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PPUSH
15708: CALL_OW 69
15712: ST_TO_ADDR
// if not tmp then
15713: LD_VAR 0 5
15717: NOT
15718: IFFALSE 15722
// exit ;
15720: GO 15876
// for i in tmp do
15722: LD_ADDR_VAR 0 1
15726: PUSH
15727: LD_VAR 0 5
15731: PUSH
15732: FOR_IN
15733: IFFALSE 15874
// begin d := rand ( 0 , 5 ) ;
15735: LD_ADDR_VAR 0 4
15739: PUSH
15740: LD_INT 0
15742: PPUSH
15743: LD_INT 5
15745: PPUSH
15746: CALL_OW 12
15750: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15751: LD_ADDR_VAR 0 2
15755: PUSH
15756: LD_VAR 0 1
15760: PPUSH
15761: CALL_OW 250
15765: PPUSH
15766: LD_VAR 0 4
15770: PPUSH
15771: LD_INT 3
15773: PPUSH
15774: LD_INT 12
15776: PPUSH
15777: CALL_OW 12
15781: PPUSH
15782: CALL_OW 272
15786: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15787: LD_ADDR_VAR 0 3
15791: PUSH
15792: LD_VAR 0 1
15796: PPUSH
15797: CALL_OW 251
15801: PPUSH
15802: LD_VAR 0 4
15806: PPUSH
15807: LD_INT 3
15809: PPUSH
15810: LD_INT 12
15812: PPUSH
15813: CALL_OW 12
15817: PPUSH
15818: CALL_OW 273
15822: ST_TO_ADDR
// if ValidHex ( x , y ) then
15823: LD_VAR 0 2
15827: PPUSH
15828: LD_VAR 0 3
15832: PPUSH
15833: CALL_OW 488
15837: IFFALSE 15872
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15839: LD_VAR 0 1
15843: PPUSH
15844: LD_VAR 0 2
15848: PPUSH
15849: LD_VAR 0 3
15853: PPUSH
15854: LD_INT 3
15856: PPUSH
15857: LD_INT 6
15859: PPUSH
15860: CALL_OW 12
15864: PPUSH
15865: LD_INT 1
15867: PPUSH
15868: CALL_OW 483
// end ;
15872: GO 15732
15874: POP
15875: POP
// end ;
15876: PPOPN 5
15878: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15879: LD_EXP 38
15883: PUSH
15884: LD_EXP 73
15888: AND
15889: IFFALSE 15983
15891: GO 15893
15893: DISABLE
15894: LD_INT 0
15896: PPUSH
15897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15898: LD_ADDR_VAR 0 2
15902: PUSH
15903: LD_INT 22
15905: PUSH
15906: LD_OWVAR 2
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 32
15917: PUSH
15918: LD_INT 1
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 21
15927: PUSH
15928: LD_INT 2
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: PPUSH
15940: CALL_OW 69
15944: ST_TO_ADDR
// if not tmp then
15945: LD_VAR 0 2
15949: NOT
15950: IFFALSE 15954
// exit ;
15952: GO 15983
// for i in tmp do
15954: LD_ADDR_VAR 0 1
15958: PUSH
15959: LD_VAR 0 2
15963: PUSH
15964: FOR_IN
15965: IFFALSE 15981
// SetFuel ( i , 0 ) ;
15967: LD_VAR 0 1
15971: PPUSH
15972: LD_INT 0
15974: PPUSH
15975: CALL_OW 240
15979: GO 15964
15981: POP
15982: POP
// end ;
15983: PPOPN 2
15985: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15986: LD_EXP 38
15990: PUSH
15991: LD_EXP 74
15995: AND
15996: IFFALSE 16062
15998: GO 16000
16000: DISABLE
16001: LD_INT 0
16003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16004: LD_ADDR_VAR 0 1
16008: PUSH
16009: LD_INT 22
16011: PUSH
16012: LD_OWVAR 2
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 30
16023: PUSH
16024: LD_INT 29
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PPUSH
16035: CALL_OW 69
16039: ST_TO_ADDR
// if not tmp then
16040: LD_VAR 0 1
16044: NOT
16045: IFFALSE 16049
// exit ;
16047: GO 16062
// DestroyUnit ( tmp [ 1 ] ) ;
16049: LD_VAR 0 1
16053: PUSH
16054: LD_INT 1
16056: ARRAY
16057: PPUSH
16058: CALL_OW 65
// end ;
16062: PPOPN 1
16064: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16065: LD_EXP 38
16069: PUSH
16070: LD_EXP 76
16074: AND
16075: IFFALSE 16204
16077: GO 16079
16079: DISABLE
16080: LD_INT 0
16082: PPUSH
// begin uc_side := 0 ;
16083: LD_ADDR_OWVAR 20
16087: PUSH
16088: LD_INT 0
16090: ST_TO_ADDR
// uc_nation := nation_arabian ;
16091: LD_ADDR_OWVAR 21
16095: PUSH
16096: LD_INT 2
16098: ST_TO_ADDR
// hc_gallery :=  ;
16099: LD_ADDR_OWVAR 33
16103: PUSH
16104: LD_STRING 
16106: ST_TO_ADDR
// hc_name :=  ;
16107: LD_ADDR_OWVAR 26
16111: PUSH
16112: LD_STRING 
16114: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16115: LD_INT 1
16117: PPUSH
16118: LD_INT 11
16120: PPUSH
16121: LD_INT 10
16123: PPUSH
16124: CALL_OW 380
// un := CreateHuman ;
16128: LD_ADDR_VAR 0 1
16132: PUSH
16133: CALL_OW 44
16137: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16138: LD_VAR 0 1
16142: PPUSH
16143: LD_INT 1
16145: PPUSH
16146: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16150: LD_INT 35
16152: PPUSH
16153: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16157: LD_VAR 0 1
16161: PPUSH
16162: LD_INT 22
16164: PUSH
16165: LD_OWVAR 2
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PPUSH
16174: CALL_OW 69
16178: PPUSH
16179: LD_VAR 0 1
16183: PPUSH
16184: CALL_OW 74
16188: PPUSH
16189: CALL_OW 115
// until IsDead ( un ) ;
16193: LD_VAR 0 1
16197: PPUSH
16198: CALL_OW 301
16202: IFFALSE 16150
// end ;
16204: PPOPN 1
16206: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16207: LD_EXP 38
16211: PUSH
16212: LD_EXP 78
16216: AND
16217: IFFALSE 16229
16219: GO 16221
16221: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16222: LD_STRING earthquake(getX(game), 0, 32)
16224: PPUSH
16225: CALL_OW 559
16229: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16230: LD_EXP 38
16234: PUSH
16235: LD_EXP 79
16239: AND
16240: IFFALSE 16331
16242: GO 16244
16244: DISABLE
16245: LD_INT 0
16247: PPUSH
// begin enable ;
16248: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16249: LD_ADDR_VAR 0 1
16253: PUSH
16254: LD_INT 22
16256: PUSH
16257: LD_OWVAR 2
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 21
16268: PUSH
16269: LD_INT 2
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 33
16278: PUSH
16279: LD_INT 3
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: LIST
16290: PPUSH
16291: CALL_OW 69
16295: ST_TO_ADDR
// if not tmp then
16296: LD_VAR 0 1
16300: NOT
16301: IFFALSE 16305
// exit ;
16303: GO 16331
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16305: LD_VAR 0 1
16309: PUSH
16310: LD_INT 1
16312: PPUSH
16313: LD_VAR 0 1
16317: PPUSH
16318: CALL_OW 12
16322: ARRAY
16323: PPUSH
16324: LD_INT 1
16326: PPUSH
16327: CALL_OW 234
// end ;
16331: PPOPN 1
16333: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16334: LD_EXP 38
16338: PUSH
16339: LD_EXP 80
16343: AND
16344: IFFALSE 16485
16346: GO 16348
16348: DISABLE
16349: LD_INT 0
16351: PPUSH
16352: PPUSH
16353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16354: LD_ADDR_VAR 0 3
16358: PUSH
16359: LD_INT 22
16361: PUSH
16362: LD_OWVAR 2
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: PUSH
16371: LD_INT 25
16373: PUSH
16374: LD_INT 1
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PPUSH
16385: CALL_OW 69
16389: ST_TO_ADDR
// if not tmp then
16390: LD_VAR 0 3
16394: NOT
16395: IFFALSE 16399
// exit ;
16397: GO 16485
// un := tmp [ rand ( 1 , tmp ) ] ;
16399: LD_ADDR_VAR 0 2
16403: PUSH
16404: LD_VAR 0 3
16408: PUSH
16409: LD_INT 1
16411: PPUSH
16412: LD_VAR 0 3
16416: PPUSH
16417: CALL_OW 12
16421: ARRAY
16422: ST_TO_ADDR
// if Crawls ( un ) then
16423: LD_VAR 0 2
16427: PPUSH
16428: CALL_OW 318
16432: IFFALSE 16443
// ComWalk ( un ) ;
16434: LD_VAR 0 2
16438: PPUSH
16439: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16443: LD_VAR 0 2
16447: PPUSH
16448: LD_INT 9
16450: PPUSH
16451: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16455: LD_INT 28
16457: PPUSH
16458: LD_OWVAR 2
16462: PPUSH
16463: LD_INT 2
16465: PPUSH
16466: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16470: LD_INT 29
16472: PPUSH
16473: LD_OWVAR 2
16477: PPUSH
16478: LD_INT 2
16480: PPUSH
16481: CALL_OW 322
// end ;
16485: PPOPN 3
16487: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16488: LD_EXP 38
16492: PUSH
16493: LD_EXP 81
16497: AND
16498: IFFALSE 16609
16500: GO 16502
16502: DISABLE
16503: LD_INT 0
16505: PPUSH
16506: PPUSH
16507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16508: LD_ADDR_VAR 0 3
16512: PUSH
16513: LD_INT 22
16515: PUSH
16516: LD_OWVAR 2
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 25
16527: PUSH
16528: LD_INT 1
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PPUSH
16539: CALL_OW 69
16543: ST_TO_ADDR
// if not tmp then
16544: LD_VAR 0 3
16548: NOT
16549: IFFALSE 16553
// exit ;
16551: GO 16609
// un := tmp [ rand ( 1 , tmp ) ] ;
16553: LD_ADDR_VAR 0 2
16557: PUSH
16558: LD_VAR 0 3
16562: PUSH
16563: LD_INT 1
16565: PPUSH
16566: LD_VAR 0 3
16570: PPUSH
16571: CALL_OW 12
16575: ARRAY
16576: ST_TO_ADDR
// if Crawls ( un ) then
16577: LD_VAR 0 2
16581: PPUSH
16582: CALL_OW 318
16586: IFFALSE 16597
// ComWalk ( un ) ;
16588: LD_VAR 0 2
16592: PPUSH
16593: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16597: LD_VAR 0 2
16601: PPUSH
16602: LD_INT 8
16604: PPUSH
16605: CALL_OW 336
// end ;
16609: PPOPN 3
16611: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16612: LD_EXP 38
16616: PUSH
16617: LD_EXP 82
16621: AND
16622: IFFALSE 16766
16624: GO 16626
16626: DISABLE
16627: LD_INT 0
16629: PPUSH
16630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16631: LD_ADDR_VAR 0 2
16635: PUSH
16636: LD_INT 22
16638: PUSH
16639: LD_OWVAR 2
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: LD_INT 21
16650: PUSH
16651: LD_INT 2
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: LD_INT 2
16660: PUSH
16661: LD_INT 34
16663: PUSH
16664: LD_INT 12
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: LD_INT 34
16673: PUSH
16674: LD_INT 51
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PUSH
16681: LD_INT 34
16683: PUSH
16684: LD_INT 32
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: PPUSH
16702: CALL_OW 69
16706: ST_TO_ADDR
// if not tmp then
16707: LD_VAR 0 2
16711: NOT
16712: IFFALSE 16716
// exit ;
16714: GO 16766
// for i in tmp do
16716: LD_ADDR_VAR 0 1
16720: PUSH
16721: LD_VAR 0 2
16725: PUSH
16726: FOR_IN
16727: IFFALSE 16764
// if GetCargo ( i , mat_artifact ) = 0 then
16729: LD_VAR 0 1
16733: PPUSH
16734: LD_INT 4
16736: PPUSH
16737: CALL_OW 289
16741: PUSH
16742: LD_INT 0
16744: EQUAL
16745: IFFALSE 16762
// SetCargo ( i , mat_siberit , 100 ) ;
16747: LD_VAR 0 1
16751: PPUSH
16752: LD_INT 3
16754: PPUSH
16755: LD_INT 100
16757: PPUSH
16758: CALL_OW 290
16762: GO 16726
16764: POP
16765: POP
// end ;
16766: PPOPN 2
16768: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16769: LD_EXP 38
16773: PUSH
16774: LD_EXP 83
16778: AND
16779: IFFALSE 16962
16781: GO 16783
16783: DISABLE
16784: LD_INT 0
16786: PPUSH
16787: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16788: LD_ADDR_VAR 0 2
16792: PUSH
16793: LD_INT 22
16795: PUSH
16796: LD_OWVAR 2
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: PPUSH
16805: CALL_OW 69
16809: ST_TO_ADDR
// if not tmp then
16810: LD_VAR 0 2
16814: NOT
16815: IFFALSE 16819
// exit ;
16817: GO 16962
// for i := 1 to 2 do
16819: LD_ADDR_VAR 0 1
16823: PUSH
16824: DOUBLE
16825: LD_INT 1
16827: DEC
16828: ST_TO_ADDR
16829: LD_INT 2
16831: PUSH
16832: FOR_TO
16833: IFFALSE 16960
// begin uc_side := your_side ;
16835: LD_ADDR_OWVAR 20
16839: PUSH
16840: LD_OWVAR 2
16844: ST_TO_ADDR
// uc_nation := nation_american ;
16845: LD_ADDR_OWVAR 21
16849: PUSH
16850: LD_INT 1
16852: ST_TO_ADDR
// vc_chassis := us_morphling ;
16853: LD_ADDR_OWVAR 37
16857: PUSH
16858: LD_INT 5
16860: ST_TO_ADDR
// vc_engine := engine_siberite ;
16861: LD_ADDR_OWVAR 39
16865: PUSH
16866: LD_INT 3
16868: ST_TO_ADDR
// vc_control := control_computer ;
16869: LD_ADDR_OWVAR 38
16873: PUSH
16874: LD_INT 3
16876: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16877: LD_ADDR_OWVAR 40
16881: PUSH
16882: LD_INT 10
16884: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16885: LD_VAR 0 2
16889: PUSH
16890: LD_INT 1
16892: ARRAY
16893: PPUSH
16894: CALL_OW 310
16898: NOT
16899: IFFALSE 16946
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16901: CALL_OW 45
16905: PPUSH
16906: LD_VAR 0 2
16910: PUSH
16911: LD_INT 1
16913: ARRAY
16914: PPUSH
16915: CALL_OW 250
16919: PPUSH
16920: LD_VAR 0 2
16924: PUSH
16925: LD_INT 1
16927: ARRAY
16928: PPUSH
16929: CALL_OW 251
16933: PPUSH
16934: LD_INT 12
16936: PPUSH
16937: LD_INT 1
16939: PPUSH
16940: CALL_OW 50
16944: GO 16958
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16946: CALL_OW 45
16950: PPUSH
16951: LD_INT 1
16953: PPUSH
16954: CALL_OW 51
// end ;
16958: GO 16832
16960: POP
16961: POP
// end ;
16962: PPOPN 2
16964: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16965: LD_EXP 38
16969: PUSH
16970: LD_EXP 84
16974: AND
16975: IFFALSE 17197
16977: GO 16979
16979: DISABLE
16980: LD_INT 0
16982: PPUSH
16983: PPUSH
16984: PPUSH
16985: PPUSH
16986: PPUSH
16987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16988: LD_ADDR_VAR 0 6
16992: PUSH
16993: LD_INT 22
16995: PUSH
16996: LD_OWVAR 2
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: LD_INT 21
17007: PUSH
17008: LD_INT 1
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: LD_INT 3
17017: PUSH
17018: LD_INT 23
17020: PUSH
17021: LD_INT 0
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: PPUSH
17037: CALL_OW 69
17041: ST_TO_ADDR
// if not tmp then
17042: LD_VAR 0 6
17046: NOT
17047: IFFALSE 17051
// exit ;
17049: GO 17197
// s1 := rand ( 1 , 4 ) ;
17051: LD_ADDR_VAR 0 2
17055: PUSH
17056: LD_INT 1
17058: PPUSH
17059: LD_INT 4
17061: PPUSH
17062: CALL_OW 12
17066: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17067: LD_ADDR_VAR 0 4
17071: PUSH
17072: LD_VAR 0 6
17076: PUSH
17077: LD_INT 1
17079: ARRAY
17080: PPUSH
17081: LD_VAR 0 2
17085: PPUSH
17086: CALL_OW 259
17090: ST_TO_ADDR
// if s1 = 1 then
17091: LD_VAR 0 2
17095: PUSH
17096: LD_INT 1
17098: EQUAL
17099: IFFALSE 17119
// s2 := rand ( 2 , 4 ) else
17101: LD_ADDR_VAR 0 3
17105: PUSH
17106: LD_INT 2
17108: PPUSH
17109: LD_INT 4
17111: PPUSH
17112: CALL_OW 12
17116: ST_TO_ADDR
17117: GO 17127
// s2 := 1 ;
17119: LD_ADDR_VAR 0 3
17123: PUSH
17124: LD_INT 1
17126: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17127: LD_ADDR_VAR 0 5
17131: PUSH
17132: LD_VAR 0 6
17136: PUSH
17137: LD_INT 1
17139: ARRAY
17140: PPUSH
17141: LD_VAR 0 3
17145: PPUSH
17146: CALL_OW 259
17150: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17151: LD_VAR 0 6
17155: PUSH
17156: LD_INT 1
17158: ARRAY
17159: PPUSH
17160: LD_VAR 0 2
17164: PPUSH
17165: LD_VAR 0 5
17169: PPUSH
17170: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17174: LD_VAR 0 6
17178: PUSH
17179: LD_INT 1
17181: ARRAY
17182: PPUSH
17183: LD_VAR 0 3
17187: PPUSH
17188: LD_VAR 0 4
17192: PPUSH
17193: CALL_OW 237
// end ;
17197: PPOPN 6
17199: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17200: LD_EXP 38
17204: PUSH
17205: LD_EXP 85
17209: AND
17210: IFFALSE 17289
17212: GO 17214
17214: DISABLE
17215: LD_INT 0
17217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17218: LD_ADDR_VAR 0 1
17222: PUSH
17223: LD_INT 22
17225: PUSH
17226: LD_OWVAR 2
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 30
17237: PUSH
17238: LD_INT 3
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PPUSH
17249: CALL_OW 69
17253: ST_TO_ADDR
// if not tmp then
17254: LD_VAR 0 1
17258: NOT
17259: IFFALSE 17263
// exit ;
17261: GO 17289
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17263: LD_VAR 0 1
17267: PUSH
17268: LD_INT 1
17270: PPUSH
17271: LD_VAR 0 1
17275: PPUSH
17276: CALL_OW 12
17280: ARRAY
17281: PPUSH
17282: LD_INT 1
17284: PPUSH
17285: CALL_OW 234
// end ;
17289: PPOPN 1
17291: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17292: LD_EXP 38
17296: PUSH
17297: LD_EXP 86
17301: AND
17302: IFFALSE 17414
17304: GO 17306
17306: DISABLE
17307: LD_INT 0
17309: PPUSH
17310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17311: LD_ADDR_VAR 0 2
17315: PUSH
17316: LD_INT 22
17318: PUSH
17319: LD_OWVAR 2
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 2
17330: PUSH
17331: LD_INT 30
17333: PUSH
17334: LD_INT 27
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: LD_INT 30
17343: PUSH
17344: LD_INT 26
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: LD_INT 30
17353: PUSH
17354: LD_INT 28
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PPUSH
17371: CALL_OW 69
17375: ST_TO_ADDR
// if not tmp then
17376: LD_VAR 0 2
17380: NOT
17381: IFFALSE 17385
// exit ;
17383: GO 17414
// for i in tmp do
17385: LD_ADDR_VAR 0 1
17389: PUSH
17390: LD_VAR 0 2
17394: PUSH
17395: FOR_IN
17396: IFFALSE 17412
// SetLives ( i , 1 ) ;
17398: LD_VAR 0 1
17402: PPUSH
17403: LD_INT 1
17405: PPUSH
17406: CALL_OW 234
17410: GO 17395
17412: POP
17413: POP
// end ;
17414: PPOPN 2
17416: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17417: LD_EXP 38
17421: PUSH
17422: LD_EXP 87
17426: AND
17427: IFFALSE 17701
17429: GO 17431
17431: DISABLE
17432: LD_INT 0
17434: PPUSH
17435: PPUSH
17436: PPUSH
// begin i := rand ( 1 , 7 ) ;
17437: LD_ADDR_VAR 0 1
17441: PUSH
17442: LD_INT 1
17444: PPUSH
17445: LD_INT 7
17447: PPUSH
17448: CALL_OW 12
17452: ST_TO_ADDR
// case i of 1 :
17453: LD_VAR 0 1
17457: PUSH
17458: LD_INT 1
17460: DOUBLE
17461: EQUAL
17462: IFTRUE 17466
17464: GO 17476
17466: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17467: LD_STRING earthquake(getX(game), 0, 32)
17469: PPUSH
17470: CALL_OW 559
17474: GO 17701
17476: LD_INT 2
17478: DOUBLE
17479: EQUAL
17480: IFTRUE 17484
17482: GO 17498
17484: POP
// begin ToLua ( displayStucuk(); ) ;
17485: LD_STRING displayStucuk();
17487: PPUSH
17488: CALL_OW 559
// ResetFog ;
17492: CALL_OW 335
// end ; 3 :
17496: GO 17701
17498: LD_INT 3
17500: DOUBLE
17501: EQUAL
17502: IFTRUE 17506
17504: GO 17610
17506: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17507: LD_ADDR_VAR 0 2
17511: PUSH
17512: LD_INT 22
17514: PUSH
17515: LD_OWVAR 2
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 25
17526: PUSH
17527: LD_INT 1
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PPUSH
17538: CALL_OW 69
17542: ST_TO_ADDR
// if not tmp then
17543: LD_VAR 0 2
17547: NOT
17548: IFFALSE 17552
// exit ;
17550: GO 17701
// un := tmp [ rand ( 1 , tmp ) ] ;
17552: LD_ADDR_VAR 0 3
17556: PUSH
17557: LD_VAR 0 2
17561: PUSH
17562: LD_INT 1
17564: PPUSH
17565: LD_VAR 0 2
17569: PPUSH
17570: CALL_OW 12
17574: ARRAY
17575: ST_TO_ADDR
// if Crawls ( un ) then
17576: LD_VAR 0 3
17580: PPUSH
17581: CALL_OW 318
17585: IFFALSE 17596
// ComWalk ( un ) ;
17587: LD_VAR 0 3
17591: PPUSH
17592: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17596: LD_VAR 0 3
17600: PPUSH
17601: LD_INT 8
17603: PPUSH
17604: CALL_OW 336
// end ; 4 :
17608: GO 17701
17610: LD_INT 4
17612: DOUBLE
17613: EQUAL
17614: IFTRUE 17618
17616: GO 17679
17618: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17619: LD_ADDR_VAR 0 2
17623: PUSH
17624: LD_INT 22
17626: PUSH
17627: LD_OWVAR 2
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 30
17638: PUSH
17639: LD_INT 29
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PPUSH
17650: CALL_OW 69
17654: ST_TO_ADDR
// if not tmp then
17655: LD_VAR 0 2
17659: NOT
17660: IFFALSE 17664
// exit ;
17662: GO 17701
// DestroyUnit ( tmp [ 1 ] ) ;
17664: LD_VAR 0 2
17668: PUSH
17669: LD_INT 1
17671: ARRAY
17672: PPUSH
17673: CALL_OW 65
// end ; 5 .. 7 :
17677: GO 17701
17679: LD_INT 5
17681: DOUBLE
17682: GREATEREQUAL
17683: IFFALSE 17691
17685: LD_INT 7
17687: DOUBLE
17688: LESSEQUAL
17689: IFTRUE 17693
17691: GO 17700
17693: POP
// StreamSibBomb ; end ;
17694: CALL 13951 0 0
17698: GO 17701
17700: POP
// end ;
17701: PPOPN 3
17703: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17704: LD_EXP 38
17708: PUSH
17709: LD_EXP 88
17713: AND
17714: IFFALSE 17870
17716: GO 17718
17718: DISABLE
17719: LD_INT 0
17721: PPUSH
17722: PPUSH
17723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17724: LD_ADDR_VAR 0 2
17728: PUSH
17729: LD_INT 81
17731: PUSH
17732: LD_OWVAR 2
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 2
17743: PUSH
17744: LD_INT 21
17746: PUSH
17747: LD_INT 1
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 21
17756: PUSH
17757: LD_INT 2
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: LIST
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: PPUSH
17773: CALL_OW 69
17777: ST_TO_ADDR
// if not tmp then
17778: LD_VAR 0 2
17782: NOT
17783: IFFALSE 17787
// exit ;
17785: GO 17870
// p := 0 ;
17787: LD_ADDR_VAR 0 3
17791: PUSH
17792: LD_INT 0
17794: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17795: LD_INT 35
17797: PPUSH
17798: CALL_OW 67
// p := p + 1 ;
17802: LD_ADDR_VAR 0 3
17806: PUSH
17807: LD_VAR 0 3
17811: PUSH
17812: LD_INT 1
17814: PLUS
17815: ST_TO_ADDR
// for i in tmp do
17816: LD_ADDR_VAR 0 1
17820: PUSH
17821: LD_VAR 0 2
17825: PUSH
17826: FOR_IN
17827: IFFALSE 17858
// if GetLives ( i ) < 1000 then
17829: LD_VAR 0 1
17833: PPUSH
17834: CALL_OW 256
17838: PUSH
17839: LD_INT 1000
17841: LESS
17842: IFFALSE 17856
// SetLives ( i , 1000 ) ;
17844: LD_VAR 0 1
17848: PPUSH
17849: LD_INT 1000
17851: PPUSH
17852: CALL_OW 234
17856: GO 17826
17858: POP
17859: POP
// until p > 20 ;
17860: LD_VAR 0 3
17864: PUSH
17865: LD_INT 20
17867: GREATER
17868: IFFALSE 17795
// end ;
17870: PPOPN 3
17872: END
// every 0 0$1 trigger StreamModeActive and sTime do
17873: LD_EXP 38
17877: PUSH
17878: LD_EXP 89
17882: AND
17883: IFFALSE 17918
17885: GO 17887
17887: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17888: LD_INT 28
17890: PPUSH
17891: LD_OWVAR 2
17895: PPUSH
17896: LD_INT 2
17898: PPUSH
17899: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17903: LD_INT 30
17905: PPUSH
17906: LD_OWVAR 2
17910: PPUSH
17911: LD_INT 2
17913: PPUSH
17914: CALL_OW 322
// end ;
17918: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17919: LD_EXP 38
17923: PUSH
17924: LD_EXP 90
17928: AND
17929: IFFALSE 18050
17931: GO 17933
17933: DISABLE
17934: LD_INT 0
17936: PPUSH
17937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17938: LD_ADDR_VAR 0 2
17942: PUSH
17943: LD_INT 22
17945: PUSH
17946: LD_OWVAR 2
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 21
17957: PUSH
17958: LD_INT 1
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 3
17967: PUSH
17968: LD_INT 23
17970: PUSH
17971: LD_INT 0
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: LIST
17986: PPUSH
17987: CALL_OW 69
17991: ST_TO_ADDR
// if not tmp then
17992: LD_VAR 0 2
17996: NOT
17997: IFFALSE 18001
// exit ;
17999: GO 18050
// for i in tmp do
18001: LD_ADDR_VAR 0 1
18005: PUSH
18006: LD_VAR 0 2
18010: PUSH
18011: FOR_IN
18012: IFFALSE 18048
// begin if Crawls ( i ) then
18014: LD_VAR 0 1
18018: PPUSH
18019: CALL_OW 318
18023: IFFALSE 18034
// ComWalk ( i ) ;
18025: LD_VAR 0 1
18029: PPUSH
18030: CALL_OW 138
// SetClass ( i , 2 ) ;
18034: LD_VAR 0 1
18038: PPUSH
18039: LD_INT 2
18041: PPUSH
18042: CALL_OW 336
// end ;
18046: GO 18011
18048: POP
18049: POP
// end ;
18050: PPOPN 2
18052: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18053: LD_EXP 38
18057: PUSH
18058: LD_EXP 91
18062: AND
18063: IFFALSE 18344
18065: GO 18067
18067: DISABLE
18068: LD_INT 0
18070: PPUSH
18071: PPUSH
18072: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18073: LD_OWVAR 2
18077: PPUSH
18078: LD_INT 9
18080: PPUSH
18081: LD_INT 1
18083: PPUSH
18084: LD_INT 1
18086: PPUSH
18087: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18091: LD_INT 9
18093: PPUSH
18094: LD_OWVAR 2
18098: PPUSH
18099: CALL_OW 343
// uc_side := 9 ;
18103: LD_ADDR_OWVAR 20
18107: PUSH
18108: LD_INT 9
18110: ST_TO_ADDR
// uc_nation := 2 ;
18111: LD_ADDR_OWVAR 21
18115: PUSH
18116: LD_INT 2
18118: ST_TO_ADDR
// hc_name := Dark Warrior ;
18119: LD_ADDR_OWVAR 26
18123: PUSH
18124: LD_STRING Dark Warrior
18126: ST_TO_ADDR
// hc_gallery :=  ;
18127: LD_ADDR_OWVAR 33
18131: PUSH
18132: LD_STRING 
18134: ST_TO_ADDR
// hc_noskilllimit := true ;
18135: LD_ADDR_OWVAR 76
18139: PUSH
18140: LD_INT 1
18142: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18143: LD_ADDR_OWVAR 31
18147: PUSH
18148: LD_INT 30
18150: PUSH
18151: LD_INT 30
18153: PUSH
18154: LD_INT 30
18156: PUSH
18157: LD_INT 30
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: ST_TO_ADDR
// un := CreateHuman ;
18166: LD_ADDR_VAR 0 3
18170: PUSH
18171: CALL_OW 44
18175: ST_TO_ADDR
// hc_noskilllimit := false ;
18176: LD_ADDR_OWVAR 76
18180: PUSH
18181: LD_INT 0
18183: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18184: LD_VAR 0 3
18188: PPUSH
18189: LD_INT 1
18191: PPUSH
18192: CALL_OW 51
// p := 0 ;
18196: LD_ADDR_VAR 0 2
18200: PUSH
18201: LD_INT 0
18203: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18204: LD_INT 35
18206: PPUSH
18207: CALL_OW 67
// p := p + 1 ;
18211: LD_ADDR_VAR 0 2
18215: PUSH
18216: LD_VAR 0 2
18220: PUSH
18221: LD_INT 1
18223: PLUS
18224: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18225: LD_VAR 0 3
18229: PPUSH
18230: CALL_OW 256
18234: PUSH
18235: LD_INT 1000
18237: LESS
18238: IFFALSE 18252
// SetLives ( un , 1000 ) ;
18240: LD_VAR 0 3
18244: PPUSH
18245: LD_INT 1000
18247: PPUSH
18248: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18252: LD_VAR 0 3
18256: PPUSH
18257: LD_INT 81
18259: PUSH
18260: LD_OWVAR 2
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: LD_INT 91
18271: PUSH
18272: LD_VAR 0 3
18276: PUSH
18277: LD_INT 30
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: LIST
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PPUSH
18289: CALL_OW 69
18293: PPUSH
18294: LD_VAR 0 3
18298: PPUSH
18299: CALL_OW 74
18303: PPUSH
18304: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18308: LD_VAR 0 2
18312: PUSH
18313: LD_INT 60
18315: GREATER
18316: PUSH
18317: LD_VAR 0 3
18321: PPUSH
18322: CALL_OW 301
18326: OR
18327: IFFALSE 18204
// if un then
18329: LD_VAR 0 3
18333: IFFALSE 18344
// RemoveUnit ( un ) ;
18335: LD_VAR 0 3
18339: PPUSH
18340: CALL_OW 64
// end ; end_of_file
18344: PPOPN 3
18346: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18347: LD_INT 0
18349: PPUSH
18350: PPUSH
18351: PPUSH
18352: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18353: LD_VAR 0 1
18357: PPUSH
18358: CALL_OW 264
18362: PUSH
18363: LD_EXP 28
18367: EQUAL
18368: IFFALSE 18440
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18370: LD_INT 68
18372: PPUSH
18373: LD_VAR 0 1
18377: PPUSH
18378: CALL_OW 255
18382: PPUSH
18383: CALL_OW 321
18387: PUSH
18388: LD_INT 2
18390: EQUAL
18391: IFFALSE 18403
// eff := 70 else
18393: LD_ADDR_VAR 0 4
18397: PUSH
18398: LD_INT 70
18400: ST_TO_ADDR
18401: GO 18411
// eff := 30 ;
18403: LD_ADDR_VAR 0 4
18407: PUSH
18408: LD_INT 30
18410: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18411: LD_VAR 0 1
18415: PPUSH
18416: CALL_OW 250
18420: PPUSH
18421: LD_VAR 0 1
18425: PPUSH
18426: CALL_OW 251
18430: PPUSH
18431: LD_VAR 0 4
18435: PPUSH
18436: CALL_OW 495
// end ; end ;
18440: LD_VAR 0 2
18444: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18445: LD_INT 0
18447: PPUSH
// end ;
18448: LD_VAR 0 4
18452: RET
// export function SOS_Command ( cmd ) ; begin
18453: LD_INT 0
18455: PPUSH
// end ;
18456: LD_VAR 0 2
18460: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18461: LD_VAR 0 1
18465: PUSH
18466: LD_INT 254
18468: EQUAL
18469: PUSH
18470: LD_VAR 0 2
18474: PPUSH
18475: CALL_OW 264
18479: PUSH
18480: LD_EXP 26
18484: EQUAL
18485: AND
18486: PUSH
18487: LD_VAR 0 3
18491: PPUSH
18492: CALL_OW 263
18496: PUSH
18497: LD_INT 3
18499: EQUAL
18500: AND
18501: IFFALSE 18512
// DestroyUnit ( selectedUnit ) ;
18503: LD_VAR 0 3
18507: PPUSH
18508: CALL_OW 65
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18512: LD_VAR 0 1
18516: PUSH
18517: LD_INT 255
18519: EQUAL
18520: PUSH
18521: LD_VAR 0 2
18525: PPUSH
18526: CALL_OW 264
18530: PUSH
18531: LD_INT 14
18533: PUSH
18534: LD_INT 53
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: IN
18541: AND
18542: PUSH
18543: LD_VAR 0 4
18547: PPUSH
18548: LD_VAR 0 5
18552: PPUSH
18553: CALL_OW 488
18557: AND
18558: IFFALSE 18582
// CutTreeXYR ( unit , x , y , 12 ) ;
18560: LD_VAR 0 2
18564: PPUSH
18565: LD_VAR 0 4
18569: PPUSH
18570: LD_VAR 0 5
18574: PPUSH
18575: LD_INT 12
18577: PPUSH
18578: CALL 18585 0 4
// end ;
18582: PPOPN 5
18584: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18585: LD_INT 0
18587: PPUSH
18588: PPUSH
18589: PPUSH
18590: PPUSH
18591: PPUSH
18592: PPUSH
18593: PPUSH
18594: PPUSH
18595: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18596: LD_VAR 0 1
18600: NOT
18601: PUSH
18602: LD_VAR 0 2
18606: PPUSH
18607: LD_VAR 0 3
18611: PPUSH
18612: CALL_OW 488
18616: NOT
18617: OR
18618: PUSH
18619: LD_VAR 0 4
18623: NOT
18624: OR
18625: IFFALSE 18629
// exit ;
18627: GO 18969
// list := [ ] ;
18629: LD_ADDR_VAR 0 13
18633: PUSH
18634: EMPTY
18635: ST_TO_ADDR
// if x - r < 0 then
18636: LD_VAR 0 2
18640: PUSH
18641: LD_VAR 0 4
18645: MINUS
18646: PUSH
18647: LD_INT 0
18649: LESS
18650: IFFALSE 18662
// min_x := 0 else
18652: LD_ADDR_VAR 0 7
18656: PUSH
18657: LD_INT 0
18659: ST_TO_ADDR
18660: GO 18678
// min_x := x - r ;
18662: LD_ADDR_VAR 0 7
18666: PUSH
18667: LD_VAR 0 2
18671: PUSH
18672: LD_VAR 0 4
18676: MINUS
18677: ST_TO_ADDR
// if y - r < 0 then
18678: LD_VAR 0 3
18682: PUSH
18683: LD_VAR 0 4
18687: MINUS
18688: PUSH
18689: LD_INT 0
18691: LESS
18692: IFFALSE 18704
// min_y := 0 else
18694: LD_ADDR_VAR 0 8
18698: PUSH
18699: LD_INT 0
18701: ST_TO_ADDR
18702: GO 18720
// min_y := y - r ;
18704: LD_ADDR_VAR 0 8
18708: PUSH
18709: LD_VAR 0 3
18713: PUSH
18714: LD_VAR 0 4
18718: MINUS
18719: ST_TO_ADDR
// max_x := x + r ;
18720: LD_ADDR_VAR 0 9
18724: PUSH
18725: LD_VAR 0 2
18729: PUSH
18730: LD_VAR 0 4
18734: PLUS
18735: ST_TO_ADDR
// max_y := y + r ;
18736: LD_ADDR_VAR 0 10
18740: PUSH
18741: LD_VAR 0 3
18745: PUSH
18746: LD_VAR 0 4
18750: PLUS
18751: ST_TO_ADDR
// for _x = min_x to max_x do
18752: LD_ADDR_VAR 0 11
18756: PUSH
18757: DOUBLE
18758: LD_VAR 0 7
18762: DEC
18763: ST_TO_ADDR
18764: LD_VAR 0 9
18768: PUSH
18769: FOR_TO
18770: IFFALSE 18887
// for _y = min_y to max_y do
18772: LD_ADDR_VAR 0 12
18776: PUSH
18777: DOUBLE
18778: LD_VAR 0 8
18782: DEC
18783: ST_TO_ADDR
18784: LD_VAR 0 10
18788: PUSH
18789: FOR_TO
18790: IFFALSE 18883
// begin if not ValidHex ( _x , _y ) then
18792: LD_VAR 0 11
18796: PPUSH
18797: LD_VAR 0 12
18801: PPUSH
18802: CALL_OW 488
18806: NOT
18807: IFFALSE 18811
// continue ;
18809: GO 18789
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18811: LD_VAR 0 11
18815: PPUSH
18816: LD_VAR 0 12
18820: PPUSH
18821: CALL_OW 351
18825: PUSH
18826: LD_VAR 0 11
18830: PPUSH
18831: LD_VAR 0 12
18835: PPUSH
18836: CALL_OW 554
18840: AND
18841: IFFALSE 18881
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18843: LD_ADDR_VAR 0 13
18847: PUSH
18848: LD_VAR 0 13
18852: PPUSH
18853: LD_VAR 0 13
18857: PUSH
18858: LD_INT 1
18860: PLUS
18861: PPUSH
18862: LD_VAR 0 11
18866: PUSH
18867: LD_VAR 0 12
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PPUSH
18876: CALL_OW 2
18880: ST_TO_ADDR
// end ;
18881: GO 18789
18883: POP
18884: POP
18885: GO 18769
18887: POP
18888: POP
// if not list then
18889: LD_VAR 0 13
18893: NOT
18894: IFFALSE 18898
// exit ;
18896: GO 18969
// for i in list do
18898: LD_ADDR_VAR 0 6
18902: PUSH
18903: LD_VAR 0 13
18907: PUSH
18908: FOR_IN
18909: IFFALSE 18967
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18911: LD_VAR 0 1
18915: PPUSH
18916: LD_STRING M
18918: PUSH
18919: LD_VAR 0 6
18923: PUSH
18924: LD_INT 1
18926: ARRAY
18927: PUSH
18928: LD_VAR 0 6
18932: PUSH
18933: LD_INT 2
18935: ARRAY
18936: PUSH
18937: LD_INT 0
18939: PUSH
18940: LD_INT 0
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: LD_INT 0
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: PUSH
18958: EMPTY
18959: LIST
18960: PPUSH
18961: CALL_OW 447
18965: GO 18908
18967: POP
18968: POP
// end ;
18969: LD_VAR 0 5
18973: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18974: LD_EXP 92
18978: NOT
18979: IFFALSE 19029
18981: GO 18983
18983: DISABLE
// begin initHack := true ;
18984: LD_ADDR_EXP 92
18988: PUSH
18989: LD_INT 1
18991: ST_TO_ADDR
// hackTanks := [ ] ;
18992: LD_ADDR_EXP 93
18996: PUSH
18997: EMPTY
18998: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18999: LD_ADDR_EXP 94
19003: PUSH
19004: EMPTY
19005: ST_TO_ADDR
// hackLimit := 3 ;
19006: LD_ADDR_EXP 95
19010: PUSH
19011: LD_INT 3
19013: ST_TO_ADDR
// hackDist := 12 ;
19014: LD_ADDR_EXP 96
19018: PUSH
19019: LD_INT 12
19021: ST_TO_ADDR
// hackCounter := [ ] ;
19022: LD_ADDR_EXP 97
19026: PUSH
19027: EMPTY
19028: ST_TO_ADDR
// end ;
19029: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19030: LD_EXP 92
19034: PUSH
19035: LD_INT 34
19037: PUSH
19038: LD_EXP 26
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PPUSH
19047: CALL_OW 69
19051: AND
19052: IFFALSE 19307
19054: GO 19056
19056: DISABLE
19057: LD_INT 0
19059: PPUSH
19060: PPUSH
// begin enable ;
19061: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19062: LD_ADDR_VAR 0 1
19066: PUSH
19067: LD_INT 34
19069: PUSH
19070: LD_EXP 26
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PPUSH
19079: CALL_OW 69
19083: PUSH
19084: FOR_IN
19085: IFFALSE 19305
// begin if not i in hackTanks then
19087: LD_VAR 0 1
19091: PUSH
19092: LD_EXP 93
19096: IN
19097: NOT
19098: IFFALSE 19181
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19100: LD_ADDR_EXP 93
19104: PUSH
19105: LD_EXP 93
19109: PPUSH
19110: LD_EXP 93
19114: PUSH
19115: LD_INT 1
19117: PLUS
19118: PPUSH
19119: LD_VAR 0 1
19123: PPUSH
19124: CALL_OW 1
19128: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19129: LD_ADDR_EXP 94
19133: PUSH
19134: LD_EXP 94
19138: PPUSH
19139: LD_EXP 94
19143: PUSH
19144: LD_INT 1
19146: PLUS
19147: PPUSH
19148: EMPTY
19149: PPUSH
19150: CALL_OW 1
19154: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19155: LD_ADDR_EXP 97
19159: PUSH
19160: LD_EXP 97
19164: PPUSH
19165: LD_EXP 97
19169: PUSH
19170: LD_INT 1
19172: PLUS
19173: PPUSH
19174: EMPTY
19175: PPUSH
19176: CALL_OW 1
19180: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19181: LD_VAR 0 1
19185: PPUSH
19186: CALL_OW 302
19190: NOT
19191: IFFALSE 19204
// begin HackUnlinkAll ( i ) ;
19193: LD_VAR 0 1
19197: PPUSH
19198: CALL 19310 0 1
// continue ;
19202: GO 19084
// end ; HackCheckCapturedStatus ( i ) ;
19204: LD_VAR 0 1
19208: PPUSH
19209: CALL 19753 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19213: LD_ADDR_VAR 0 2
19217: PUSH
19218: LD_INT 81
19220: PUSH
19221: LD_VAR 0 1
19225: PPUSH
19226: CALL_OW 255
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 33
19237: PUSH
19238: LD_INT 3
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 91
19247: PUSH
19248: LD_VAR 0 1
19252: PUSH
19253: LD_EXP 96
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 50
19265: PUSH
19266: EMPTY
19267: LIST
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: PPUSH
19275: CALL_OW 69
19279: ST_TO_ADDR
// if not tmp then
19280: LD_VAR 0 2
19284: NOT
19285: IFFALSE 19289
// continue ;
19287: GO 19084
// HackLink ( i , tmp ) ;
19289: LD_VAR 0 1
19293: PPUSH
19294: LD_VAR 0 2
19298: PPUSH
19299: CALL 19446 0 2
// end ;
19303: GO 19084
19305: POP
19306: POP
// end ;
19307: PPOPN 2
19309: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19310: LD_INT 0
19312: PPUSH
19313: PPUSH
19314: PPUSH
// if not hack in hackTanks then
19315: LD_VAR 0 1
19319: PUSH
19320: LD_EXP 93
19324: IN
19325: NOT
19326: IFFALSE 19330
// exit ;
19328: GO 19441
// index := GetElementIndex ( hackTanks , hack ) ;
19330: LD_ADDR_VAR 0 4
19334: PUSH
19335: LD_EXP 93
19339: PPUSH
19340: LD_VAR 0 1
19344: PPUSH
19345: CALL 24750 0 2
19349: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19350: LD_EXP 94
19354: PUSH
19355: LD_VAR 0 4
19359: ARRAY
19360: IFFALSE 19441
// begin for i in hackTanksCaptured [ index ] do
19362: LD_ADDR_VAR 0 3
19366: PUSH
19367: LD_EXP 94
19371: PUSH
19372: LD_VAR 0 4
19376: ARRAY
19377: PUSH
19378: FOR_IN
19379: IFFALSE 19405
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19381: LD_VAR 0 3
19385: PUSH
19386: LD_INT 1
19388: ARRAY
19389: PPUSH
19390: LD_VAR 0 3
19394: PUSH
19395: LD_INT 2
19397: ARRAY
19398: PPUSH
19399: CALL_OW 235
19403: GO 19378
19405: POP
19406: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19407: LD_ADDR_EXP 94
19411: PUSH
19412: LD_EXP 94
19416: PPUSH
19417: LD_VAR 0 4
19421: PPUSH
19422: EMPTY
19423: PPUSH
19424: CALL_OW 1
19428: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19429: LD_VAR 0 1
19433: PPUSH
19434: LD_INT 0
19436: PPUSH
19437: CALL_OW 505
// end ; end ;
19441: LD_VAR 0 2
19445: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19446: LD_INT 0
19448: PPUSH
19449: PPUSH
19450: PPUSH
// if not hack in hackTanks or not vehicles then
19451: LD_VAR 0 1
19455: PUSH
19456: LD_EXP 93
19460: IN
19461: NOT
19462: PUSH
19463: LD_VAR 0 2
19467: NOT
19468: OR
19469: IFFALSE 19473
// exit ;
19471: GO 19748
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19473: LD_ADDR_VAR 0 2
19477: PUSH
19478: LD_VAR 0 1
19482: PPUSH
19483: LD_VAR 0 2
19487: PPUSH
19488: LD_INT 1
19490: PPUSH
19491: LD_INT 1
19493: PPUSH
19494: CALL 25400 0 4
19498: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19499: LD_ADDR_VAR 0 5
19503: PUSH
19504: LD_EXP 93
19508: PPUSH
19509: LD_VAR 0 1
19513: PPUSH
19514: CALL 24750 0 2
19518: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19519: LD_EXP 94
19523: PUSH
19524: LD_VAR 0 5
19528: ARRAY
19529: PUSH
19530: LD_EXP 95
19534: LESS
19535: IFFALSE 19724
// begin for i := 1 to vehicles do
19537: LD_ADDR_VAR 0 4
19541: PUSH
19542: DOUBLE
19543: LD_INT 1
19545: DEC
19546: ST_TO_ADDR
19547: LD_VAR 0 2
19551: PUSH
19552: FOR_TO
19553: IFFALSE 19722
// begin if hackTanksCaptured [ index ] = hackLimit then
19555: LD_EXP 94
19559: PUSH
19560: LD_VAR 0 5
19564: ARRAY
19565: PUSH
19566: LD_EXP 95
19570: EQUAL
19571: IFFALSE 19575
// break ;
19573: GO 19722
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19575: LD_ADDR_EXP 97
19579: PUSH
19580: LD_EXP 97
19584: PPUSH
19585: LD_VAR 0 5
19589: PPUSH
19590: LD_EXP 97
19594: PUSH
19595: LD_VAR 0 5
19599: ARRAY
19600: PUSH
19601: LD_INT 1
19603: PLUS
19604: PPUSH
19605: CALL_OW 1
19609: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19610: LD_ADDR_EXP 94
19614: PUSH
19615: LD_EXP 94
19619: PPUSH
19620: LD_VAR 0 5
19624: PUSH
19625: LD_EXP 94
19629: PUSH
19630: LD_VAR 0 5
19634: ARRAY
19635: PUSH
19636: LD_INT 1
19638: PLUS
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PPUSH
19644: LD_VAR 0 2
19648: PUSH
19649: LD_VAR 0 4
19653: ARRAY
19654: PUSH
19655: LD_VAR 0 2
19659: PUSH
19660: LD_VAR 0 4
19664: ARRAY
19665: PPUSH
19666: CALL_OW 255
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PPUSH
19675: CALL 24965 0 3
19679: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19680: LD_VAR 0 2
19684: PUSH
19685: LD_VAR 0 4
19689: ARRAY
19690: PPUSH
19691: LD_VAR 0 1
19695: PPUSH
19696: CALL_OW 255
19700: PPUSH
19701: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19705: LD_VAR 0 2
19709: PUSH
19710: LD_VAR 0 4
19714: ARRAY
19715: PPUSH
19716: CALL_OW 141
// end ;
19720: GO 19552
19722: POP
19723: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19724: LD_VAR 0 1
19728: PPUSH
19729: LD_EXP 94
19733: PUSH
19734: LD_VAR 0 5
19738: ARRAY
19739: PUSH
19740: LD_INT 0
19742: PLUS
19743: PPUSH
19744: CALL_OW 505
// end ;
19748: LD_VAR 0 3
19752: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19753: LD_INT 0
19755: PPUSH
19756: PPUSH
19757: PPUSH
19758: PPUSH
// if not hack in hackTanks then
19759: LD_VAR 0 1
19763: PUSH
19764: LD_EXP 93
19768: IN
19769: NOT
19770: IFFALSE 19774
// exit ;
19772: GO 20014
// index := GetElementIndex ( hackTanks , hack ) ;
19774: LD_ADDR_VAR 0 4
19778: PUSH
19779: LD_EXP 93
19783: PPUSH
19784: LD_VAR 0 1
19788: PPUSH
19789: CALL 24750 0 2
19793: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19794: LD_ADDR_VAR 0 3
19798: PUSH
19799: DOUBLE
19800: LD_EXP 94
19804: PUSH
19805: LD_VAR 0 4
19809: ARRAY
19810: INC
19811: ST_TO_ADDR
19812: LD_INT 1
19814: PUSH
19815: FOR_DOWNTO
19816: IFFALSE 19988
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19818: LD_ADDR_VAR 0 5
19822: PUSH
19823: LD_EXP 94
19827: PUSH
19828: LD_VAR 0 4
19832: ARRAY
19833: PUSH
19834: LD_VAR 0 3
19838: ARRAY
19839: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19840: LD_VAR 0 5
19844: PUSH
19845: LD_INT 1
19847: ARRAY
19848: PPUSH
19849: CALL_OW 302
19853: NOT
19854: PUSH
19855: LD_VAR 0 5
19859: PUSH
19860: LD_INT 1
19862: ARRAY
19863: PPUSH
19864: CALL_OW 255
19868: PUSH
19869: LD_VAR 0 1
19873: PPUSH
19874: CALL_OW 255
19878: NONEQUAL
19879: OR
19880: IFFALSE 19986
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19882: LD_VAR 0 5
19886: PUSH
19887: LD_INT 1
19889: ARRAY
19890: PPUSH
19891: CALL_OW 305
19895: PUSH
19896: LD_VAR 0 5
19900: PUSH
19901: LD_INT 1
19903: ARRAY
19904: PPUSH
19905: CALL_OW 255
19909: PUSH
19910: LD_VAR 0 1
19914: PPUSH
19915: CALL_OW 255
19919: EQUAL
19920: AND
19921: IFFALSE 19945
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19923: LD_VAR 0 5
19927: PUSH
19928: LD_INT 1
19930: ARRAY
19931: PPUSH
19932: LD_VAR 0 5
19936: PUSH
19937: LD_INT 2
19939: ARRAY
19940: PPUSH
19941: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19945: LD_ADDR_EXP 94
19949: PUSH
19950: LD_EXP 94
19954: PPUSH
19955: LD_VAR 0 4
19959: PPUSH
19960: LD_EXP 94
19964: PUSH
19965: LD_VAR 0 4
19969: ARRAY
19970: PPUSH
19971: LD_VAR 0 3
19975: PPUSH
19976: CALL_OW 3
19980: PPUSH
19981: CALL_OW 1
19985: ST_TO_ADDR
// end ; end ;
19986: GO 19815
19988: POP
19989: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19990: LD_VAR 0 1
19994: PPUSH
19995: LD_EXP 94
19999: PUSH
20000: LD_VAR 0 4
20004: ARRAY
20005: PUSH
20006: LD_INT 0
20008: PLUS
20009: PPUSH
20010: CALL_OW 505
// end ; end_of_file
20014: LD_VAR 0 2
20018: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20019: LD_INT 0
20021: PPUSH
20022: PPUSH
// if exist_mode then
20023: LD_VAR 0 2
20027: IFFALSE 20052
// unit := CreateCharacter ( prefix & ident ) else
20029: LD_ADDR_VAR 0 5
20033: PUSH
20034: LD_VAR 0 3
20038: PUSH
20039: LD_VAR 0 1
20043: STR
20044: PPUSH
20045: CALL_OW 34
20049: ST_TO_ADDR
20050: GO 20067
// unit := NewCharacter ( ident ) ;
20052: LD_ADDR_VAR 0 5
20056: PUSH
20057: LD_VAR 0 1
20061: PPUSH
20062: CALL_OW 25
20066: ST_TO_ADDR
// result := unit ;
20067: LD_ADDR_VAR 0 4
20071: PUSH
20072: LD_VAR 0 5
20076: ST_TO_ADDR
// end ;
20077: LD_VAR 0 4
20081: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20082: LD_INT 0
20084: PPUSH
20085: PPUSH
// if not side or not nation then
20086: LD_VAR 0 1
20090: NOT
20091: PUSH
20092: LD_VAR 0 2
20096: NOT
20097: OR
20098: IFFALSE 20102
// exit ;
20100: GO 20866
// case nation of nation_american :
20102: LD_VAR 0 2
20106: PUSH
20107: LD_INT 1
20109: DOUBLE
20110: EQUAL
20111: IFTRUE 20115
20113: GO 20329
20115: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20116: LD_ADDR_VAR 0 4
20120: PUSH
20121: LD_INT 35
20123: PUSH
20124: LD_INT 45
20126: PUSH
20127: LD_INT 46
20129: PUSH
20130: LD_INT 47
20132: PUSH
20133: LD_INT 82
20135: PUSH
20136: LD_INT 83
20138: PUSH
20139: LD_INT 84
20141: PUSH
20142: LD_INT 85
20144: PUSH
20145: LD_INT 86
20147: PUSH
20148: LD_INT 1
20150: PUSH
20151: LD_INT 2
20153: PUSH
20154: LD_INT 6
20156: PUSH
20157: LD_INT 15
20159: PUSH
20160: LD_INT 16
20162: PUSH
20163: LD_INT 7
20165: PUSH
20166: LD_INT 12
20168: PUSH
20169: LD_INT 13
20171: PUSH
20172: LD_INT 10
20174: PUSH
20175: LD_INT 14
20177: PUSH
20178: LD_INT 20
20180: PUSH
20181: LD_INT 21
20183: PUSH
20184: LD_INT 22
20186: PUSH
20187: LD_INT 25
20189: PUSH
20190: LD_INT 32
20192: PUSH
20193: LD_INT 27
20195: PUSH
20196: LD_INT 36
20198: PUSH
20199: LD_INT 69
20201: PUSH
20202: LD_INT 39
20204: PUSH
20205: LD_INT 34
20207: PUSH
20208: LD_INT 40
20210: PUSH
20211: LD_INT 48
20213: PUSH
20214: LD_INT 49
20216: PUSH
20217: LD_INT 50
20219: PUSH
20220: LD_INT 51
20222: PUSH
20223: LD_INT 52
20225: PUSH
20226: LD_INT 53
20228: PUSH
20229: LD_INT 54
20231: PUSH
20232: LD_INT 55
20234: PUSH
20235: LD_INT 56
20237: PUSH
20238: LD_INT 57
20240: PUSH
20241: LD_INT 58
20243: PUSH
20244: LD_INT 59
20246: PUSH
20247: LD_INT 60
20249: PUSH
20250: LD_INT 61
20252: PUSH
20253: LD_INT 62
20255: PUSH
20256: LD_INT 80
20258: PUSH
20259: LD_INT 82
20261: PUSH
20262: LD_INT 83
20264: PUSH
20265: LD_INT 84
20267: PUSH
20268: LD_INT 85
20270: PUSH
20271: LD_INT 86
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: ST_TO_ADDR
20327: GO 20790
20329: LD_INT 2
20331: DOUBLE
20332: EQUAL
20333: IFTRUE 20337
20335: GO 20559
20337: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
20338: LD_ADDR_VAR 0 4
20342: PUSH
20343: LD_INT 35
20345: PUSH
20346: LD_INT 45
20348: PUSH
20349: LD_INT 46
20351: PUSH
20352: LD_INT 47
20354: PUSH
20355: LD_INT 82
20357: PUSH
20358: LD_INT 83
20360: PUSH
20361: LD_INT 84
20363: PUSH
20364: LD_INT 85
20366: PUSH
20367: LD_INT 87
20369: PUSH
20370: LD_INT 70
20372: PUSH
20373: LD_INT 1
20375: PUSH
20376: LD_INT 11
20378: PUSH
20379: LD_INT 3
20381: PUSH
20382: LD_INT 4
20384: PUSH
20385: LD_INT 5
20387: PUSH
20388: LD_INT 6
20390: PUSH
20391: LD_INT 15
20393: PUSH
20394: LD_INT 18
20396: PUSH
20397: LD_INT 7
20399: PUSH
20400: LD_INT 17
20402: PUSH
20403: LD_INT 8
20405: PUSH
20406: LD_INT 20
20408: PUSH
20409: LD_INT 21
20411: PUSH
20412: LD_INT 22
20414: PUSH
20415: LD_INT 72
20417: PUSH
20418: LD_INT 26
20420: PUSH
20421: LD_INT 69
20423: PUSH
20424: LD_INT 39
20426: PUSH
20427: LD_INT 40
20429: PUSH
20430: LD_INT 41
20432: PUSH
20433: LD_INT 42
20435: PUSH
20436: LD_INT 43
20438: PUSH
20439: LD_INT 48
20441: PUSH
20442: LD_INT 49
20444: PUSH
20445: LD_INT 50
20447: PUSH
20448: LD_INT 51
20450: PUSH
20451: LD_INT 52
20453: PUSH
20454: LD_INT 53
20456: PUSH
20457: LD_INT 54
20459: PUSH
20460: LD_INT 55
20462: PUSH
20463: LD_INT 56
20465: PUSH
20466: LD_INT 60
20468: PUSH
20469: LD_INT 61
20471: PUSH
20472: LD_INT 62
20474: PUSH
20475: LD_INT 66
20477: PUSH
20478: LD_INT 67
20480: PUSH
20481: LD_INT 68
20483: PUSH
20484: LD_INT 81
20486: PUSH
20487: LD_INT 82
20489: PUSH
20490: LD_INT 83
20492: PUSH
20493: LD_INT 84
20495: PUSH
20496: LD_INT 85
20498: PUSH
20499: LD_INT 87
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: ST_TO_ADDR
20557: GO 20790
20559: LD_INT 3
20561: DOUBLE
20562: EQUAL
20563: IFTRUE 20567
20565: GO 20789
20567: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20568: LD_ADDR_VAR 0 4
20572: PUSH
20573: LD_INT 46
20575: PUSH
20576: LD_INT 47
20578: PUSH
20579: LD_INT 1
20581: PUSH
20582: LD_INT 2
20584: PUSH
20585: LD_INT 82
20587: PUSH
20588: LD_INT 83
20590: PUSH
20591: LD_INT 84
20593: PUSH
20594: LD_INT 85
20596: PUSH
20597: LD_INT 86
20599: PUSH
20600: LD_INT 11
20602: PUSH
20603: LD_INT 9
20605: PUSH
20606: LD_INT 20
20608: PUSH
20609: LD_INT 19
20611: PUSH
20612: LD_INT 21
20614: PUSH
20615: LD_INT 24
20617: PUSH
20618: LD_INT 22
20620: PUSH
20621: LD_INT 25
20623: PUSH
20624: LD_INT 28
20626: PUSH
20627: LD_INT 29
20629: PUSH
20630: LD_INT 30
20632: PUSH
20633: LD_INT 31
20635: PUSH
20636: LD_INT 37
20638: PUSH
20639: LD_INT 38
20641: PUSH
20642: LD_INT 32
20644: PUSH
20645: LD_INT 27
20647: PUSH
20648: LD_INT 33
20650: PUSH
20651: LD_INT 69
20653: PUSH
20654: LD_INT 39
20656: PUSH
20657: LD_INT 34
20659: PUSH
20660: LD_INT 40
20662: PUSH
20663: LD_INT 71
20665: PUSH
20666: LD_INT 23
20668: PUSH
20669: LD_INT 44
20671: PUSH
20672: LD_INT 48
20674: PUSH
20675: LD_INT 49
20677: PUSH
20678: LD_INT 50
20680: PUSH
20681: LD_INT 51
20683: PUSH
20684: LD_INT 52
20686: PUSH
20687: LD_INT 53
20689: PUSH
20690: LD_INT 54
20692: PUSH
20693: LD_INT 55
20695: PUSH
20696: LD_INT 56
20698: PUSH
20699: LD_INT 57
20701: PUSH
20702: LD_INT 58
20704: PUSH
20705: LD_INT 59
20707: PUSH
20708: LD_INT 63
20710: PUSH
20711: LD_INT 64
20713: PUSH
20714: LD_INT 65
20716: PUSH
20717: LD_INT 82
20719: PUSH
20720: LD_INT 83
20722: PUSH
20723: LD_INT 84
20725: PUSH
20726: LD_INT 85
20728: PUSH
20729: LD_INT 86
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: ST_TO_ADDR
20787: GO 20790
20789: POP
// if state > - 1 and state < 3 then
20790: LD_VAR 0 3
20794: PUSH
20795: LD_INT 1
20797: NEG
20798: GREATER
20799: PUSH
20800: LD_VAR 0 3
20804: PUSH
20805: LD_INT 3
20807: LESS
20808: AND
20809: IFFALSE 20866
// for i in result do
20811: LD_ADDR_VAR 0 5
20815: PUSH
20816: LD_VAR 0 4
20820: PUSH
20821: FOR_IN
20822: IFFALSE 20864
// if GetTech ( i , side ) <> state then
20824: LD_VAR 0 5
20828: PPUSH
20829: LD_VAR 0 1
20833: PPUSH
20834: CALL_OW 321
20838: PUSH
20839: LD_VAR 0 3
20843: NONEQUAL
20844: IFFALSE 20862
// result := result diff i ;
20846: LD_ADDR_VAR 0 4
20850: PUSH
20851: LD_VAR 0 4
20855: PUSH
20856: LD_VAR 0 5
20860: DIFF
20861: ST_TO_ADDR
20862: GO 20821
20864: POP
20865: POP
// end ;
20866: LD_VAR 0 4
20870: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20871: LD_INT 0
20873: PPUSH
20874: PPUSH
20875: PPUSH
// result := true ;
20876: LD_ADDR_VAR 0 3
20880: PUSH
20881: LD_INT 1
20883: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20884: LD_ADDR_VAR 0 5
20888: PUSH
20889: LD_VAR 0 2
20893: PPUSH
20894: CALL_OW 480
20898: ST_TO_ADDR
// if not tmp then
20899: LD_VAR 0 5
20903: NOT
20904: IFFALSE 20908
// exit ;
20906: GO 20957
// for i in tmp do
20908: LD_ADDR_VAR 0 4
20912: PUSH
20913: LD_VAR 0 5
20917: PUSH
20918: FOR_IN
20919: IFFALSE 20955
// if GetTech ( i , side ) <> state_researched then
20921: LD_VAR 0 4
20925: PPUSH
20926: LD_VAR 0 1
20930: PPUSH
20931: CALL_OW 321
20935: PUSH
20936: LD_INT 2
20938: NONEQUAL
20939: IFFALSE 20953
// begin result := false ;
20941: LD_ADDR_VAR 0 3
20945: PUSH
20946: LD_INT 0
20948: ST_TO_ADDR
// exit ;
20949: POP
20950: POP
20951: GO 20957
// end ;
20953: GO 20918
20955: POP
20956: POP
// end ;
20957: LD_VAR 0 3
20961: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20962: LD_INT 0
20964: PPUSH
20965: PPUSH
20966: PPUSH
20967: PPUSH
20968: PPUSH
20969: PPUSH
20970: PPUSH
20971: PPUSH
20972: PPUSH
20973: PPUSH
20974: PPUSH
20975: PPUSH
20976: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20977: LD_VAR 0 1
20981: NOT
20982: PUSH
20983: LD_VAR 0 1
20987: PPUSH
20988: CALL_OW 257
20992: PUSH
20993: LD_INT 9
20995: NONEQUAL
20996: OR
20997: IFFALSE 21001
// exit ;
20999: GO 21574
// side := GetSide ( unit ) ;
21001: LD_ADDR_VAR 0 9
21005: PUSH
21006: LD_VAR 0 1
21010: PPUSH
21011: CALL_OW 255
21015: ST_TO_ADDR
// tech_space := tech_spacanom ;
21016: LD_ADDR_VAR 0 12
21020: PUSH
21021: LD_INT 29
21023: ST_TO_ADDR
// tech_time := tech_taurad ;
21024: LD_ADDR_VAR 0 13
21028: PUSH
21029: LD_INT 28
21031: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21032: LD_ADDR_VAR 0 11
21036: PUSH
21037: LD_VAR 0 1
21041: PPUSH
21042: CALL_OW 310
21046: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21047: LD_VAR 0 11
21051: PPUSH
21052: CALL_OW 247
21056: PUSH
21057: LD_INT 2
21059: EQUAL
21060: IFFALSE 21064
// exit ;
21062: GO 21574
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21064: LD_ADDR_VAR 0 8
21068: PUSH
21069: LD_INT 81
21071: PUSH
21072: LD_VAR 0 9
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 3
21083: PUSH
21084: LD_INT 21
21086: PUSH
21087: LD_INT 3
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PPUSH
21102: CALL_OW 69
21106: ST_TO_ADDR
// if not tmp then
21107: LD_VAR 0 8
21111: NOT
21112: IFFALSE 21116
// exit ;
21114: GO 21574
// if in_unit then
21116: LD_VAR 0 11
21120: IFFALSE 21144
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21122: LD_ADDR_VAR 0 10
21126: PUSH
21127: LD_VAR 0 8
21131: PPUSH
21132: LD_VAR 0 11
21136: PPUSH
21137: CALL_OW 74
21141: ST_TO_ADDR
21142: GO 21164
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21144: LD_ADDR_VAR 0 10
21148: PUSH
21149: LD_VAR 0 8
21153: PPUSH
21154: LD_VAR 0 1
21158: PPUSH
21159: CALL_OW 74
21163: ST_TO_ADDR
// if not enemy then
21164: LD_VAR 0 10
21168: NOT
21169: IFFALSE 21173
// exit ;
21171: GO 21574
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21173: LD_VAR 0 11
21177: PUSH
21178: LD_VAR 0 11
21182: PPUSH
21183: LD_VAR 0 10
21187: PPUSH
21188: CALL_OW 296
21192: PUSH
21193: LD_INT 13
21195: GREATER
21196: AND
21197: PUSH
21198: LD_VAR 0 1
21202: PPUSH
21203: LD_VAR 0 10
21207: PPUSH
21208: CALL_OW 296
21212: PUSH
21213: LD_INT 12
21215: GREATER
21216: OR
21217: IFFALSE 21221
// exit ;
21219: GO 21574
// missile := [ 1 ] ;
21221: LD_ADDR_VAR 0 14
21225: PUSH
21226: LD_INT 1
21228: PUSH
21229: EMPTY
21230: LIST
21231: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21232: LD_VAR 0 9
21236: PPUSH
21237: LD_VAR 0 12
21241: PPUSH
21242: CALL_OW 325
21246: IFFALSE 21275
// missile := Insert ( missile , missile + 1 , 2 ) ;
21248: LD_ADDR_VAR 0 14
21252: PUSH
21253: LD_VAR 0 14
21257: PPUSH
21258: LD_VAR 0 14
21262: PUSH
21263: LD_INT 1
21265: PLUS
21266: PPUSH
21267: LD_INT 2
21269: PPUSH
21270: CALL_OW 2
21274: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21275: LD_VAR 0 9
21279: PPUSH
21280: LD_VAR 0 13
21284: PPUSH
21285: CALL_OW 325
21289: PUSH
21290: LD_VAR 0 10
21294: PPUSH
21295: CALL_OW 255
21299: PPUSH
21300: LD_VAR 0 13
21304: PPUSH
21305: CALL_OW 325
21309: NOT
21310: AND
21311: IFFALSE 21340
// missile := Insert ( missile , missile + 1 , 3 ) ;
21313: LD_ADDR_VAR 0 14
21317: PUSH
21318: LD_VAR 0 14
21322: PPUSH
21323: LD_VAR 0 14
21327: PUSH
21328: LD_INT 1
21330: PLUS
21331: PPUSH
21332: LD_INT 3
21334: PPUSH
21335: CALL_OW 2
21339: ST_TO_ADDR
// if missile < 2 then
21340: LD_VAR 0 14
21344: PUSH
21345: LD_INT 2
21347: LESS
21348: IFFALSE 21352
// exit ;
21350: GO 21574
// x := GetX ( enemy ) ;
21352: LD_ADDR_VAR 0 4
21356: PUSH
21357: LD_VAR 0 10
21361: PPUSH
21362: CALL_OW 250
21366: ST_TO_ADDR
// y := GetY ( enemy ) ;
21367: LD_ADDR_VAR 0 5
21371: PUSH
21372: LD_VAR 0 10
21376: PPUSH
21377: CALL_OW 251
21381: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21382: LD_ADDR_VAR 0 6
21386: PUSH
21387: LD_VAR 0 4
21391: PUSH
21392: LD_INT 1
21394: NEG
21395: PPUSH
21396: LD_INT 1
21398: PPUSH
21399: CALL_OW 12
21403: PLUS
21404: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21405: LD_ADDR_VAR 0 7
21409: PUSH
21410: LD_VAR 0 5
21414: PUSH
21415: LD_INT 1
21417: NEG
21418: PPUSH
21419: LD_INT 1
21421: PPUSH
21422: CALL_OW 12
21426: PLUS
21427: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21428: LD_VAR 0 6
21432: PPUSH
21433: LD_VAR 0 7
21437: PPUSH
21438: CALL_OW 488
21442: NOT
21443: IFFALSE 21465
// begin _x := x ;
21445: LD_ADDR_VAR 0 6
21449: PUSH
21450: LD_VAR 0 4
21454: ST_TO_ADDR
// _y := y ;
21455: LD_ADDR_VAR 0 7
21459: PUSH
21460: LD_VAR 0 5
21464: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21465: LD_ADDR_VAR 0 3
21469: PUSH
21470: LD_INT 1
21472: PPUSH
21473: LD_VAR 0 14
21477: PPUSH
21478: CALL_OW 12
21482: ST_TO_ADDR
// case i of 1 :
21483: LD_VAR 0 3
21487: PUSH
21488: LD_INT 1
21490: DOUBLE
21491: EQUAL
21492: IFTRUE 21496
21494: GO 21513
21496: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21497: LD_VAR 0 1
21501: PPUSH
21502: LD_VAR 0 10
21506: PPUSH
21507: CALL_OW 115
21511: GO 21574
21513: LD_INT 2
21515: DOUBLE
21516: EQUAL
21517: IFTRUE 21521
21519: GO 21543
21521: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21522: LD_VAR 0 1
21526: PPUSH
21527: LD_VAR 0 6
21531: PPUSH
21532: LD_VAR 0 7
21536: PPUSH
21537: CALL_OW 153
21541: GO 21574
21543: LD_INT 3
21545: DOUBLE
21546: EQUAL
21547: IFTRUE 21551
21549: GO 21573
21551: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21552: LD_VAR 0 1
21556: PPUSH
21557: LD_VAR 0 6
21561: PPUSH
21562: LD_VAR 0 7
21566: PPUSH
21567: CALL_OW 154
21571: GO 21574
21573: POP
// end ;
21574: LD_VAR 0 2
21578: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21579: LD_INT 0
21581: PPUSH
21582: PPUSH
21583: PPUSH
21584: PPUSH
21585: PPUSH
21586: PPUSH
// if not unit or not building then
21587: LD_VAR 0 1
21591: NOT
21592: PUSH
21593: LD_VAR 0 2
21597: NOT
21598: OR
21599: IFFALSE 21603
// exit ;
21601: GO 21761
// x := GetX ( building ) ;
21603: LD_ADDR_VAR 0 5
21607: PUSH
21608: LD_VAR 0 2
21612: PPUSH
21613: CALL_OW 250
21617: ST_TO_ADDR
// y := GetY ( building ) ;
21618: LD_ADDR_VAR 0 6
21622: PUSH
21623: LD_VAR 0 2
21627: PPUSH
21628: CALL_OW 251
21632: ST_TO_ADDR
// for i = 0 to 5 do
21633: LD_ADDR_VAR 0 4
21637: PUSH
21638: DOUBLE
21639: LD_INT 0
21641: DEC
21642: ST_TO_ADDR
21643: LD_INT 5
21645: PUSH
21646: FOR_TO
21647: IFFALSE 21759
// begin _x := ShiftX ( x , i , 3 ) ;
21649: LD_ADDR_VAR 0 7
21653: PUSH
21654: LD_VAR 0 5
21658: PPUSH
21659: LD_VAR 0 4
21663: PPUSH
21664: LD_INT 3
21666: PPUSH
21667: CALL_OW 272
21671: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21672: LD_ADDR_VAR 0 8
21676: PUSH
21677: LD_VAR 0 6
21681: PPUSH
21682: LD_VAR 0 4
21686: PPUSH
21687: LD_INT 3
21689: PPUSH
21690: CALL_OW 273
21694: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21695: LD_VAR 0 7
21699: PPUSH
21700: LD_VAR 0 8
21704: PPUSH
21705: CALL_OW 488
21709: NOT
21710: IFFALSE 21714
// continue ;
21712: GO 21646
// if HexInfo ( _x , _y ) = 0 then
21714: LD_VAR 0 7
21718: PPUSH
21719: LD_VAR 0 8
21723: PPUSH
21724: CALL_OW 428
21728: PUSH
21729: LD_INT 0
21731: EQUAL
21732: IFFALSE 21757
// begin ComMoveXY ( unit , _x , _y ) ;
21734: LD_VAR 0 1
21738: PPUSH
21739: LD_VAR 0 7
21743: PPUSH
21744: LD_VAR 0 8
21748: PPUSH
21749: CALL_OW 111
// exit ;
21753: POP
21754: POP
21755: GO 21761
// end ; end ;
21757: GO 21646
21759: POP
21760: POP
// end ;
21761: LD_VAR 0 3
21765: RET
// export function ScanBase ( side , base_area ) ; begin
21766: LD_INT 0
21768: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21769: LD_ADDR_VAR 0 3
21773: PUSH
21774: LD_VAR 0 2
21778: PPUSH
21779: LD_INT 81
21781: PUSH
21782: LD_VAR 0 1
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PPUSH
21791: CALL_OW 70
21795: ST_TO_ADDR
// end ;
21796: LD_VAR 0 3
21800: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21801: LD_INT 0
21803: PPUSH
21804: PPUSH
21805: PPUSH
21806: PPUSH
// result := false ;
21807: LD_ADDR_VAR 0 2
21811: PUSH
21812: LD_INT 0
21814: ST_TO_ADDR
// side := GetSide ( unit ) ;
21815: LD_ADDR_VAR 0 3
21819: PUSH
21820: LD_VAR 0 1
21824: PPUSH
21825: CALL_OW 255
21829: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21830: LD_ADDR_VAR 0 4
21834: PUSH
21835: LD_VAR 0 1
21839: PPUSH
21840: CALL_OW 248
21844: ST_TO_ADDR
// case nat of 1 :
21845: LD_VAR 0 4
21849: PUSH
21850: LD_INT 1
21852: DOUBLE
21853: EQUAL
21854: IFTRUE 21858
21856: GO 21869
21858: POP
// tech := tech_lassight ; 2 :
21859: LD_ADDR_VAR 0 5
21863: PUSH
21864: LD_INT 12
21866: ST_TO_ADDR
21867: GO 21908
21869: LD_INT 2
21871: DOUBLE
21872: EQUAL
21873: IFTRUE 21877
21875: GO 21888
21877: POP
// tech := tech_mortar ; 3 :
21878: LD_ADDR_VAR 0 5
21882: PUSH
21883: LD_INT 41
21885: ST_TO_ADDR
21886: GO 21908
21888: LD_INT 3
21890: DOUBLE
21891: EQUAL
21892: IFTRUE 21896
21894: GO 21907
21896: POP
// tech := tech_bazooka ; end ;
21897: LD_ADDR_VAR 0 5
21901: PUSH
21902: LD_INT 44
21904: ST_TO_ADDR
21905: GO 21908
21907: POP
// if Researched ( side , tech ) then
21908: LD_VAR 0 3
21912: PPUSH
21913: LD_VAR 0 5
21917: PPUSH
21918: CALL_OW 325
21922: IFFALSE 21949
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21924: LD_ADDR_VAR 0 2
21928: PUSH
21929: LD_INT 5
21931: PUSH
21932: LD_INT 8
21934: PUSH
21935: LD_INT 9
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: LIST
21942: PUSH
21943: LD_VAR 0 4
21947: ARRAY
21948: ST_TO_ADDR
// end ;
21949: LD_VAR 0 2
21953: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21954: LD_INT 0
21956: PPUSH
21957: PPUSH
21958: PPUSH
// if not mines then
21959: LD_VAR 0 2
21963: NOT
21964: IFFALSE 21968
// exit ;
21966: GO 22112
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21968: LD_ADDR_VAR 0 5
21972: PUSH
21973: LD_INT 81
21975: PUSH
21976: LD_VAR 0 1
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 3
21987: PUSH
21988: LD_INT 21
21990: PUSH
21991: LD_INT 3
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PPUSH
22006: CALL_OW 69
22010: ST_TO_ADDR
// for i in mines do
22011: LD_ADDR_VAR 0 4
22015: PUSH
22016: LD_VAR 0 2
22020: PUSH
22021: FOR_IN
22022: IFFALSE 22110
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22024: LD_VAR 0 4
22028: PUSH
22029: LD_INT 1
22031: ARRAY
22032: PPUSH
22033: LD_VAR 0 4
22037: PUSH
22038: LD_INT 2
22040: ARRAY
22041: PPUSH
22042: CALL_OW 458
22046: NOT
22047: IFFALSE 22051
// continue ;
22049: GO 22021
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22051: LD_VAR 0 4
22055: PUSH
22056: LD_INT 1
22058: ARRAY
22059: PPUSH
22060: LD_VAR 0 4
22064: PUSH
22065: LD_INT 2
22067: ARRAY
22068: PPUSH
22069: CALL_OW 428
22073: PUSH
22074: LD_VAR 0 5
22078: IN
22079: IFFALSE 22108
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22081: LD_VAR 0 4
22085: PUSH
22086: LD_INT 1
22088: ARRAY
22089: PPUSH
22090: LD_VAR 0 4
22094: PUSH
22095: LD_INT 2
22097: ARRAY
22098: PPUSH
22099: LD_VAR 0 1
22103: PPUSH
22104: CALL_OW 456
// end ;
22108: GO 22021
22110: POP
22111: POP
// end ;
22112: LD_VAR 0 3
22116: RET
// export function Count ( array ) ; var i ; begin
22117: LD_INT 0
22119: PPUSH
22120: PPUSH
// result := 0 ;
22121: LD_ADDR_VAR 0 2
22125: PUSH
22126: LD_INT 0
22128: ST_TO_ADDR
// for i in array do
22129: LD_ADDR_VAR 0 3
22133: PUSH
22134: LD_VAR 0 1
22138: PUSH
22139: FOR_IN
22140: IFFALSE 22164
// if i then
22142: LD_VAR 0 3
22146: IFFALSE 22162
// result := result + 1 ;
22148: LD_ADDR_VAR 0 2
22152: PUSH
22153: LD_VAR 0 2
22157: PUSH
22158: LD_INT 1
22160: PLUS
22161: ST_TO_ADDR
22162: GO 22139
22164: POP
22165: POP
// end ;
22166: LD_VAR 0 2
22170: RET
// export function IsEmpty ( building ) ; begin
22171: LD_INT 0
22173: PPUSH
// if not building then
22174: LD_VAR 0 1
22178: NOT
22179: IFFALSE 22183
// exit ;
22181: GO 22226
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22183: LD_ADDR_VAR 0 2
22187: PUSH
22188: LD_VAR 0 1
22192: PUSH
22193: LD_INT 22
22195: PUSH
22196: LD_VAR 0 1
22200: PPUSH
22201: CALL_OW 255
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 58
22212: PUSH
22213: EMPTY
22214: LIST
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PPUSH
22220: CALL_OW 69
22224: IN
22225: ST_TO_ADDR
// end ;
22226: LD_VAR 0 2
22230: RET
// export function IsNotFull ( building ) ; begin
22231: LD_INT 0
22233: PPUSH
// if not building then
22234: LD_VAR 0 1
22238: NOT
22239: IFFALSE 22243
// exit ;
22241: GO 22262
// result := UnitsInside ( building ) < 6 ;
22243: LD_ADDR_VAR 0 2
22247: PUSH
22248: LD_VAR 0 1
22252: PPUSH
22253: CALL_OW 313
22257: PUSH
22258: LD_INT 6
22260: LESS
22261: ST_TO_ADDR
// end ;
22262: LD_VAR 0 2
22266: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22267: LD_INT 0
22269: PPUSH
22270: PPUSH
22271: PPUSH
22272: PPUSH
// tmp := [ ] ;
22273: LD_ADDR_VAR 0 3
22277: PUSH
22278: EMPTY
22279: ST_TO_ADDR
// list := [ ] ;
22280: LD_ADDR_VAR 0 5
22284: PUSH
22285: EMPTY
22286: ST_TO_ADDR
// for i = 16 to 25 do
22287: LD_ADDR_VAR 0 4
22291: PUSH
22292: DOUBLE
22293: LD_INT 16
22295: DEC
22296: ST_TO_ADDR
22297: LD_INT 25
22299: PUSH
22300: FOR_TO
22301: IFFALSE 22374
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22303: LD_ADDR_VAR 0 3
22307: PUSH
22308: LD_VAR 0 3
22312: PUSH
22313: LD_INT 22
22315: PUSH
22316: LD_VAR 0 1
22320: PPUSH
22321: CALL_OW 255
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 91
22332: PUSH
22333: LD_VAR 0 1
22337: PUSH
22338: LD_INT 6
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 30
22348: PUSH
22349: LD_VAR 0 4
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: LIST
22362: PUSH
22363: EMPTY
22364: LIST
22365: PPUSH
22366: CALL_OW 69
22370: ADD
22371: ST_TO_ADDR
22372: GO 22300
22374: POP
22375: POP
// for i = 1 to tmp do
22376: LD_ADDR_VAR 0 4
22380: PUSH
22381: DOUBLE
22382: LD_INT 1
22384: DEC
22385: ST_TO_ADDR
22386: LD_VAR 0 3
22390: PUSH
22391: FOR_TO
22392: IFFALSE 22480
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22394: LD_ADDR_VAR 0 5
22398: PUSH
22399: LD_VAR 0 5
22403: PUSH
22404: LD_VAR 0 3
22408: PUSH
22409: LD_VAR 0 4
22413: ARRAY
22414: PPUSH
22415: CALL_OW 266
22419: PUSH
22420: LD_VAR 0 3
22424: PUSH
22425: LD_VAR 0 4
22429: ARRAY
22430: PPUSH
22431: CALL_OW 250
22435: PUSH
22436: LD_VAR 0 3
22440: PUSH
22441: LD_VAR 0 4
22445: ARRAY
22446: PPUSH
22447: CALL_OW 251
22451: PUSH
22452: LD_VAR 0 3
22456: PUSH
22457: LD_VAR 0 4
22461: ARRAY
22462: PPUSH
22463: CALL_OW 254
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: PUSH
22474: EMPTY
22475: LIST
22476: ADD
22477: ST_TO_ADDR
22478: GO 22391
22480: POP
22481: POP
// result := list ;
22482: LD_ADDR_VAR 0 2
22486: PUSH
22487: LD_VAR 0 5
22491: ST_TO_ADDR
// end ;
22492: LD_VAR 0 2
22496: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22497: LD_INT 0
22499: PPUSH
22500: PPUSH
22501: PPUSH
22502: PPUSH
22503: PPUSH
22504: PPUSH
22505: PPUSH
// if not factory then
22506: LD_VAR 0 1
22510: NOT
22511: IFFALSE 22515
// exit ;
22513: GO 23108
// if control = control_apeman then
22515: LD_VAR 0 4
22519: PUSH
22520: LD_INT 5
22522: EQUAL
22523: IFFALSE 22632
// begin tmp := UnitsInside ( factory ) ;
22525: LD_ADDR_VAR 0 8
22529: PUSH
22530: LD_VAR 0 1
22534: PPUSH
22535: CALL_OW 313
22539: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22540: LD_VAR 0 8
22544: PPUSH
22545: LD_INT 25
22547: PUSH
22548: LD_INT 12
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PPUSH
22555: CALL_OW 72
22559: NOT
22560: IFFALSE 22570
// control := control_manual ;
22562: LD_ADDR_VAR 0 4
22566: PUSH
22567: LD_INT 1
22569: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22570: LD_ADDR_VAR 0 8
22574: PUSH
22575: LD_VAR 0 1
22579: PPUSH
22580: CALL 22267 0 1
22584: ST_TO_ADDR
// if tmp then
22585: LD_VAR 0 8
22589: IFFALSE 22632
// begin for i in tmp do
22591: LD_ADDR_VAR 0 7
22595: PUSH
22596: LD_VAR 0 8
22600: PUSH
22601: FOR_IN
22602: IFFALSE 22630
// if i [ 1 ] = b_ext_radio then
22604: LD_VAR 0 7
22608: PUSH
22609: LD_INT 1
22611: ARRAY
22612: PUSH
22613: LD_INT 22
22615: EQUAL
22616: IFFALSE 22628
// begin control := control_remote ;
22618: LD_ADDR_VAR 0 4
22622: PUSH
22623: LD_INT 2
22625: ST_TO_ADDR
// break ;
22626: GO 22630
// end ;
22628: GO 22601
22630: POP
22631: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22632: LD_VAR 0 1
22636: PPUSH
22637: LD_VAR 0 2
22641: PPUSH
22642: LD_VAR 0 3
22646: PPUSH
22647: LD_VAR 0 4
22651: PPUSH
22652: LD_VAR 0 5
22656: PPUSH
22657: CALL_OW 448
22661: IFFALSE 22696
// begin result := [ chassis , engine , control , weapon ] ;
22663: LD_ADDR_VAR 0 6
22667: PUSH
22668: LD_VAR 0 2
22672: PUSH
22673: LD_VAR 0 3
22677: PUSH
22678: LD_VAR 0 4
22682: PUSH
22683: LD_VAR 0 5
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: ST_TO_ADDR
// exit ;
22694: GO 23108
// end ; _chassis := AvailableChassisList ( factory ) ;
22696: LD_ADDR_VAR 0 9
22700: PUSH
22701: LD_VAR 0 1
22705: PPUSH
22706: CALL_OW 475
22710: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22711: LD_ADDR_VAR 0 11
22715: PUSH
22716: LD_VAR 0 1
22720: PPUSH
22721: CALL_OW 476
22725: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22726: LD_ADDR_VAR 0 12
22730: PUSH
22731: LD_VAR 0 1
22735: PPUSH
22736: CALL_OW 477
22740: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22741: LD_ADDR_VAR 0 10
22745: PUSH
22746: LD_VAR 0 1
22750: PPUSH
22751: CALL_OW 478
22755: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22756: LD_VAR 0 9
22760: NOT
22761: PUSH
22762: LD_VAR 0 11
22766: NOT
22767: OR
22768: PUSH
22769: LD_VAR 0 12
22773: NOT
22774: OR
22775: PUSH
22776: LD_VAR 0 10
22780: NOT
22781: OR
22782: IFFALSE 22817
// begin result := [ chassis , engine , control , weapon ] ;
22784: LD_ADDR_VAR 0 6
22788: PUSH
22789: LD_VAR 0 2
22793: PUSH
22794: LD_VAR 0 3
22798: PUSH
22799: LD_VAR 0 4
22803: PUSH
22804: LD_VAR 0 5
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: ST_TO_ADDR
// exit ;
22815: GO 23108
// end ; if not chassis in _chassis then
22817: LD_VAR 0 2
22821: PUSH
22822: LD_VAR 0 9
22826: IN
22827: NOT
22828: IFFALSE 22854
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22830: LD_ADDR_VAR 0 2
22834: PUSH
22835: LD_VAR 0 9
22839: PUSH
22840: LD_INT 1
22842: PPUSH
22843: LD_VAR 0 9
22847: PPUSH
22848: CALL_OW 12
22852: ARRAY
22853: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22854: LD_VAR 0 2
22858: PPUSH
22859: LD_VAR 0 3
22863: PPUSH
22864: CALL 23113 0 2
22868: NOT
22869: IFFALSE 22928
// repeat engine := _engine [ 1 ] ;
22871: LD_ADDR_VAR 0 3
22875: PUSH
22876: LD_VAR 0 11
22880: PUSH
22881: LD_INT 1
22883: ARRAY
22884: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22885: LD_ADDR_VAR 0 11
22889: PUSH
22890: LD_VAR 0 11
22894: PPUSH
22895: LD_INT 1
22897: PPUSH
22898: CALL_OW 3
22902: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22903: LD_VAR 0 2
22907: PPUSH
22908: LD_VAR 0 3
22912: PPUSH
22913: CALL 23113 0 2
22917: PUSH
22918: LD_VAR 0 11
22922: PUSH
22923: EMPTY
22924: EQUAL
22925: OR
22926: IFFALSE 22871
// if not control in _control then
22928: LD_VAR 0 4
22932: PUSH
22933: LD_VAR 0 12
22937: IN
22938: NOT
22939: IFFALSE 22965
// control := _control [ rand ( 1 , _control ) ] ;
22941: LD_ADDR_VAR 0 4
22945: PUSH
22946: LD_VAR 0 12
22950: PUSH
22951: LD_INT 1
22953: PPUSH
22954: LD_VAR 0 12
22958: PPUSH
22959: CALL_OW 12
22963: ARRAY
22964: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22965: LD_VAR 0 2
22969: PPUSH
22970: LD_VAR 0 5
22974: PPUSH
22975: CALL 23333 0 2
22979: NOT
22980: IFFALSE 23039
// repeat weapon := _weapon [ 1 ] ;
22982: LD_ADDR_VAR 0 5
22986: PUSH
22987: LD_VAR 0 10
22991: PUSH
22992: LD_INT 1
22994: ARRAY
22995: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22996: LD_ADDR_VAR 0 10
23000: PUSH
23001: LD_VAR 0 10
23005: PPUSH
23006: LD_INT 1
23008: PPUSH
23009: CALL_OW 3
23013: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23014: LD_VAR 0 2
23018: PPUSH
23019: LD_VAR 0 5
23023: PPUSH
23024: CALL 23333 0 2
23028: PUSH
23029: LD_VAR 0 10
23033: PUSH
23034: EMPTY
23035: EQUAL
23036: OR
23037: IFFALSE 22982
// result := [ ] ;
23039: LD_ADDR_VAR 0 6
23043: PUSH
23044: EMPTY
23045: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23046: LD_VAR 0 1
23050: PPUSH
23051: LD_VAR 0 2
23055: PPUSH
23056: LD_VAR 0 3
23060: PPUSH
23061: LD_VAR 0 4
23065: PPUSH
23066: LD_VAR 0 5
23070: PPUSH
23071: CALL_OW 448
23075: IFFALSE 23108
// result := [ chassis , engine , control , weapon ] ;
23077: LD_ADDR_VAR 0 6
23081: PUSH
23082: LD_VAR 0 2
23086: PUSH
23087: LD_VAR 0 3
23091: PUSH
23092: LD_VAR 0 4
23096: PUSH
23097: LD_VAR 0 5
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: ST_TO_ADDR
// end ;
23108: LD_VAR 0 6
23112: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23113: LD_INT 0
23115: PPUSH
// if not chassis or not engine then
23116: LD_VAR 0 1
23120: NOT
23121: PUSH
23122: LD_VAR 0 2
23126: NOT
23127: OR
23128: IFFALSE 23132
// exit ;
23130: GO 23328
// case engine of engine_solar :
23132: LD_VAR 0 2
23136: PUSH
23137: LD_INT 2
23139: DOUBLE
23140: EQUAL
23141: IFTRUE 23145
23143: GO 23183
23145: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23146: LD_ADDR_VAR 0 3
23150: PUSH
23151: LD_INT 11
23153: PUSH
23154: LD_INT 12
23156: PUSH
23157: LD_INT 13
23159: PUSH
23160: LD_INT 14
23162: PUSH
23163: LD_INT 1
23165: PUSH
23166: LD_INT 2
23168: PUSH
23169: LD_INT 3
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: ST_TO_ADDR
23181: GO 23312
23183: LD_INT 1
23185: DOUBLE
23186: EQUAL
23187: IFTRUE 23191
23189: GO 23253
23191: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23192: LD_ADDR_VAR 0 3
23196: PUSH
23197: LD_INT 11
23199: PUSH
23200: LD_INT 12
23202: PUSH
23203: LD_INT 13
23205: PUSH
23206: LD_INT 14
23208: PUSH
23209: LD_INT 1
23211: PUSH
23212: LD_INT 2
23214: PUSH
23215: LD_INT 3
23217: PUSH
23218: LD_INT 4
23220: PUSH
23221: LD_INT 5
23223: PUSH
23224: LD_INT 21
23226: PUSH
23227: LD_INT 23
23229: PUSH
23230: LD_INT 22
23232: PUSH
23233: LD_INT 24
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: ST_TO_ADDR
23251: GO 23312
23253: LD_INT 3
23255: DOUBLE
23256: EQUAL
23257: IFTRUE 23261
23259: GO 23311
23261: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23262: LD_ADDR_VAR 0 3
23266: PUSH
23267: LD_INT 13
23269: PUSH
23270: LD_INT 14
23272: PUSH
23273: LD_INT 2
23275: PUSH
23276: LD_INT 3
23278: PUSH
23279: LD_INT 4
23281: PUSH
23282: LD_INT 5
23284: PUSH
23285: LD_INT 21
23287: PUSH
23288: LD_INT 22
23290: PUSH
23291: LD_INT 23
23293: PUSH
23294: LD_INT 24
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: ST_TO_ADDR
23309: GO 23312
23311: POP
// result := ( chassis in result ) ;
23312: LD_ADDR_VAR 0 3
23316: PUSH
23317: LD_VAR 0 1
23321: PUSH
23322: LD_VAR 0 3
23326: IN
23327: ST_TO_ADDR
// end ;
23328: LD_VAR 0 3
23332: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23333: LD_INT 0
23335: PPUSH
// if not chassis or not weapon then
23336: LD_VAR 0 1
23340: NOT
23341: PUSH
23342: LD_VAR 0 2
23346: NOT
23347: OR
23348: IFFALSE 23352
// exit ;
23350: GO 24378
// case weapon of us_machine_gun :
23352: LD_VAR 0 2
23356: PUSH
23357: LD_INT 2
23359: DOUBLE
23360: EQUAL
23361: IFTRUE 23365
23363: GO 23395
23365: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23366: LD_ADDR_VAR 0 3
23370: PUSH
23371: LD_INT 1
23373: PUSH
23374: LD_INT 2
23376: PUSH
23377: LD_INT 3
23379: PUSH
23380: LD_INT 4
23382: PUSH
23383: LD_INT 5
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: ST_TO_ADDR
23393: GO 24362
23395: LD_INT 3
23397: DOUBLE
23398: EQUAL
23399: IFTRUE 23403
23401: GO 23433
23403: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23404: LD_ADDR_VAR 0 3
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: LD_INT 2
23414: PUSH
23415: LD_INT 3
23417: PUSH
23418: LD_INT 4
23420: PUSH
23421: LD_INT 5
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: ST_TO_ADDR
23431: GO 24362
23433: LD_INT 11
23435: DOUBLE
23436: EQUAL
23437: IFTRUE 23441
23439: GO 23471
23441: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23442: LD_ADDR_VAR 0 3
23446: PUSH
23447: LD_INT 1
23449: PUSH
23450: LD_INT 2
23452: PUSH
23453: LD_INT 3
23455: PUSH
23456: LD_INT 4
23458: PUSH
23459: LD_INT 5
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: ST_TO_ADDR
23469: GO 24362
23471: LD_INT 4
23473: DOUBLE
23474: EQUAL
23475: IFTRUE 23479
23477: GO 23505
23479: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23480: LD_ADDR_VAR 0 3
23484: PUSH
23485: LD_INT 2
23487: PUSH
23488: LD_INT 3
23490: PUSH
23491: LD_INT 4
23493: PUSH
23494: LD_INT 5
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: ST_TO_ADDR
23503: GO 24362
23505: LD_INT 5
23507: DOUBLE
23508: EQUAL
23509: IFTRUE 23513
23511: GO 23539
23513: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23514: LD_ADDR_VAR 0 3
23518: PUSH
23519: LD_INT 2
23521: PUSH
23522: LD_INT 3
23524: PUSH
23525: LD_INT 4
23527: PUSH
23528: LD_INT 5
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: ST_TO_ADDR
23537: GO 24362
23539: LD_INT 9
23541: DOUBLE
23542: EQUAL
23543: IFTRUE 23547
23545: GO 23573
23547: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23548: LD_ADDR_VAR 0 3
23552: PUSH
23553: LD_INT 2
23555: PUSH
23556: LD_INT 3
23558: PUSH
23559: LD_INT 4
23561: PUSH
23562: LD_INT 5
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: ST_TO_ADDR
23571: GO 24362
23573: LD_INT 7
23575: DOUBLE
23576: EQUAL
23577: IFTRUE 23581
23579: GO 23607
23581: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23582: LD_ADDR_VAR 0 3
23586: PUSH
23587: LD_INT 2
23589: PUSH
23590: LD_INT 3
23592: PUSH
23593: LD_INT 4
23595: PUSH
23596: LD_INT 5
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: ST_TO_ADDR
23605: GO 24362
23607: LD_INT 12
23609: DOUBLE
23610: EQUAL
23611: IFTRUE 23615
23613: GO 23641
23615: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23616: LD_ADDR_VAR 0 3
23620: PUSH
23621: LD_INT 2
23623: PUSH
23624: LD_INT 3
23626: PUSH
23627: LD_INT 4
23629: PUSH
23630: LD_INT 5
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: ST_TO_ADDR
23639: GO 24362
23641: LD_INT 13
23643: DOUBLE
23644: EQUAL
23645: IFTRUE 23649
23647: GO 23675
23649: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23650: LD_ADDR_VAR 0 3
23654: PUSH
23655: LD_INT 2
23657: PUSH
23658: LD_INT 3
23660: PUSH
23661: LD_INT 4
23663: PUSH
23664: LD_INT 5
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: ST_TO_ADDR
23673: GO 24362
23675: LD_INT 14
23677: DOUBLE
23678: EQUAL
23679: IFTRUE 23683
23681: GO 23701
23683: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23684: LD_ADDR_VAR 0 3
23688: PUSH
23689: LD_INT 4
23691: PUSH
23692: LD_INT 5
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: ST_TO_ADDR
23699: GO 24362
23701: LD_INT 6
23703: DOUBLE
23704: EQUAL
23705: IFTRUE 23709
23707: GO 23727
23709: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23710: LD_ADDR_VAR 0 3
23714: PUSH
23715: LD_INT 4
23717: PUSH
23718: LD_INT 5
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: ST_TO_ADDR
23725: GO 24362
23727: LD_INT 10
23729: DOUBLE
23730: EQUAL
23731: IFTRUE 23735
23733: GO 23753
23735: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23736: LD_ADDR_VAR 0 3
23740: PUSH
23741: LD_INT 4
23743: PUSH
23744: LD_INT 5
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: ST_TO_ADDR
23751: GO 24362
23753: LD_INT 22
23755: DOUBLE
23756: EQUAL
23757: IFTRUE 23761
23759: GO 23787
23761: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23762: LD_ADDR_VAR 0 3
23766: PUSH
23767: LD_INT 11
23769: PUSH
23770: LD_INT 12
23772: PUSH
23773: LD_INT 13
23775: PUSH
23776: LD_INT 14
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: ST_TO_ADDR
23785: GO 24362
23787: LD_INT 23
23789: DOUBLE
23790: EQUAL
23791: IFTRUE 23795
23793: GO 23821
23795: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23796: LD_ADDR_VAR 0 3
23800: PUSH
23801: LD_INT 11
23803: PUSH
23804: LD_INT 12
23806: PUSH
23807: LD_INT 13
23809: PUSH
23810: LD_INT 14
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: ST_TO_ADDR
23819: GO 24362
23821: LD_INT 24
23823: DOUBLE
23824: EQUAL
23825: IFTRUE 23829
23827: GO 23855
23829: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23830: LD_ADDR_VAR 0 3
23834: PUSH
23835: LD_INT 11
23837: PUSH
23838: LD_INT 12
23840: PUSH
23841: LD_INT 13
23843: PUSH
23844: LD_INT 14
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: ST_TO_ADDR
23853: GO 24362
23855: LD_INT 30
23857: DOUBLE
23858: EQUAL
23859: IFTRUE 23863
23861: GO 23889
23863: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23864: LD_ADDR_VAR 0 3
23868: PUSH
23869: LD_INT 11
23871: PUSH
23872: LD_INT 12
23874: PUSH
23875: LD_INT 13
23877: PUSH
23878: LD_INT 14
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: ST_TO_ADDR
23887: GO 24362
23889: LD_INT 25
23891: DOUBLE
23892: EQUAL
23893: IFTRUE 23897
23895: GO 23915
23897: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23898: LD_ADDR_VAR 0 3
23902: PUSH
23903: LD_INT 13
23905: PUSH
23906: LD_INT 14
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: ST_TO_ADDR
23913: GO 24362
23915: LD_INT 27
23917: DOUBLE
23918: EQUAL
23919: IFTRUE 23923
23921: GO 23941
23923: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23924: LD_ADDR_VAR 0 3
23928: PUSH
23929: LD_INT 13
23931: PUSH
23932: LD_INT 14
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: ST_TO_ADDR
23939: GO 24362
23941: LD_INT 28
23943: DOUBLE
23944: EQUAL
23945: IFTRUE 23949
23947: GO 23967
23949: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23950: LD_ADDR_VAR 0 3
23954: PUSH
23955: LD_INT 13
23957: PUSH
23958: LD_INT 14
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: ST_TO_ADDR
23965: GO 24362
23967: LD_INT 29
23969: DOUBLE
23970: EQUAL
23971: IFTRUE 23975
23973: GO 23993
23975: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23976: LD_ADDR_VAR 0 3
23980: PUSH
23981: LD_INT 13
23983: PUSH
23984: LD_INT 14
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: ST_TO_ADDR
23991: GO 24362
23993: LD_INT 31
23995: DOUBLE
23996: EQUAL
23997: IFTRUE 24001
23999: GO 24019
24001: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24002: LD_ADDR_VAR 0 3
24006: PUSH
24007: LD_INT 13
24009: PUSH
24010: LD_INT 14
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: ST_TO_ADDR
24017: GO 24362
24019: LD_INT 26
24021: DOUBLE
24022: EQUAL
24023: IFTRUE 24027
24025: GO 24045
24027: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24028: LD_ADDR_VAR 0 3
24032: PUSH
24033: LD_INT 13
24035: PUSH
24036: LD_INT 14
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: ST_TO_ADDR
24043: GO 24362
24045: LD_INT 42
24047: DOUBLE
24048: EQUAL
24049: IFTRUE 24053
24051: GO 24079
24053: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24054: LD_ADDR_VAR 0 3
24058: PUSH
24059: LD_INT 21
24061: PUSH
24062: LD_INT 22
24064: PUSH
24065: LD_INT 23
24067: PUSH
24068: LD_INT 24
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: ST_TO_ADDR
24077: GO 24362
24079: LD_INT 43
24081: DOUBLE
24082: EQUAL
24083: IFTRUE 24087
24085: GO 24113
24087: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24088: LD_ADDR_VAR 0 3
24092: PUSH
24093: LD_INT 21
24095: PUSH
24096: LD_INT 22
24098: PUSH
24099: LD_INT 23
24101: PUSH
24102: LD_INT 24
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: ST_TO_ADDR
24111: GO 24362
24113: LD_INT 44
24115: DOUBLE
24116: EQUAL
24117: IFTRUE 24121
24119: GO 24147
24121: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24122: LD_ADDR_VAR 0 3
24126: PUSH
24127: LD_INT 21
24129: PUSH
24130: LD_INT 22
24132: PUSH
24133: LD_INT 23
24135: PUSH
24136: LD_INT 24
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: ST_TO_ADDR
24145: GO 24362
24147: LD_INT 45
24149: DOUBLE
24150: EQUAL
24151: IFTRUE 24155
24153: GO 24181
24155: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24156: LD_ADDR_VAR 0 3
24160: PUSH
24161: LD_INT 21
24163: PUSH
24164: LD_INT 22
24166: PUSH
24167: LD_INT 23
24169: PUSH
24170: LD_INT 24
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: ST_TO_ADDR
24179: GO 24362
24181: LD_INT 49
24183: DOUBLE
24184: EQUAL
24185: IFTRUE 24189
24187: GO 24215
24189: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24190: LD_ADDR_VAR 0 3
24194: PUSH
24195: LD_INT 21
24197: PUSH
24198: LD_INT 22
24200: PUSH
24201: LD_INT 23
24203: PUSH
24204: LD_INT 24
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: ST_TO_ADDR
24213: GO 24362
24215: LD_INT 51
24217: DOUBLE
24218: EQUAL
24219: IFTRUE 24223
24221: GO 24249
24223: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24224: LD_ADDR_VAR 0 3
24228: PUSH
24229: LD_INT 21
24231: PUSH
24232: LD_INT 22
24234: PUSH
24235: LD_INT 23
24237: PUSH
24238: LD_INT 24
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: ST_TO_ADDR
24247: GO 24362
24249: LD_INT 52
24251: DOUBLE
24252: EQUAL
24253: IFTRUE 24257
24255: GO 24283
24257: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24258: LD_ADDR_VAR 0 3
24262: PUSH
24263: LD_INT 21
24265: PUSH
24266: LD_INT 22
24268: PUSH
24269: LD_INT 23
24271: PUSH
24272: LD_INT 24
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: ST_TO_ADDR
24281: GO 24362
24283: LD_INT 53
24285: DOUBLE
24286: EQUAL
24287: IFTRUE 24291
24289: GO 24309
24291: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24292: LD_ADDR_VAR 0 3
24296: PUSH
24297: LD_INT 23
24299: PUSH
24300: LD_INT 24
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: ST_TO_ADDR
24307: GO 24362
24309: LD_INT 46
24311: DOUBLE
24312: EQUAL
24313: IFTRUE 24317
24315: GO 24335
24317: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24318: LD_ADDR_VAR 0 3
24322: PUSH
24323: LD_INT 23
24325: PUSH
24326: LD_INT 24
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: ST_TO_ADDR
24333: GO 24362
24335: LD_INT 47
24337: DOUBLE
24338: EQUAL
24339: IFTRUE 24343
24341: GO 24361
24343: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24344: LD_ADDR_VAR 0 3
24348: PUSH
24349: LD_INT 23
24351: PUSH
24352: LD_INT 24
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: ST_TO_ADDR
24359: GO 24362
24361: POP
// result := ( chassis in result ) ;
24362: LD_ADDR_VAR 0 3
24366: PUSH
24367: LD_VAR 0 1
24371: PUSH
24372: LD_VAR 0 3
24376: IN
24377: ST_TO_ADDR
// end ;
24378: LD_VAR 0 3
24382: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24383: LD_INT 0
24385: PPUSH
24386: PPUSH
24387: PPUSH
24388: PPUSH
24389: PPUSH
24390: PPUSH
24391: PPUSH
// result := array ;
24392: LD_ADDR_VAR 0 5
24396: PUSH
24397: LD_VAR 0 1
24401: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24402: LD_VAR 0 1
24406: NOT
24407: PUSH
24408: LD_VAR 0 2
24412: NOT
24413: OR
24414: PUSH
24415: LD_VAR 0 3
24419: NOT
24420: OR
24421: PUSH
24422: LD_VAR 0 2
24426: PUSH
24427: LD_VAR 0 1
24431: GREATER
24432: OR
24433: PUSH
24434: LD_VAR 0 3
24438: PUSH
24439: LD_VAR 0 1
24443: GREATER
24444: OR
24445: IFFALSE 24449
// exit ;
24447: GO 24745
// if direction then
24449: LD_VAR 0 4
24453: IFFALSE 24517
// begin d := 1 ;
24455: LD_ADDR_VAR 0 9
24459: PUSH
24460: LD_INT 1
24462: ST_TO_ADDR
// if i_from > i_to then
24463: LD_VAR 0 2
24467: PUSH
24468: LD_VAR 0 3
24472: GREATER
24473: IFFALSE 24499
// length := ( array - i_from ) + i_to else
24475: LD_ADDR_VAR 0 11
24479: PUSH
24480: LD_VAR 0 1
24484: PUSH
24485: LD_VAR 0 2
24489: MINUS
24490: PUSH
24491: LD_VAR 0 3
24495: PLUS
24496: ST_TO_ADDR
24497: GO 24515
// length := i_to - i_from ;
24499: LD_ADDR_VAR 0 11
24503: PUSH
24504: LD_VAR 0 3
24508: PUSH
24509: LD_VAR 0 2
24513: MINUS
24514: ST_TO_ADDR
// end else
24515: GO 24578
// begin d := - 1 ;
24517: LD_ADDR_VAR 0 9
24521: PUSH
24522: LD_INT 1
24524: NEG
24525: ST_TO_ADDR
// if i_from > i_to then
24526: LD_VAR 0 2
24530: PUSH
24531: LD_VAR 0 3
24535: GREATER
24536: IFFALSE 24556
// length := i_from - i_to else
24538: LD_ADDR_VAR 0 11
24542: PUSH
24543: LD_VAR 0 2
24547: PUSH
24548: LD_VAR 0 3
24552: MINUS
24553: ST_TO_ADDR
24554: GO 24578
// length := ( array - i_to ) + i_from ;
24556: LD_ADDR_VAR 0 11
24560: PUSH
24561: LD_VAR 0 1
24565: PUSH
24566: LD_VAR 0 3
24570: MINUS
24571: PUSH
24572: LD_VAR 0 2
24576: PLUS
24577: ST_TO_ADDR
// end ; if not length then
24578: LD_VAR 0 11
24582: NOT
24583: IFFALSE 24587
// exit ;
24585: GO 24745
// tmp := array ;
24587: LD_ADDR_VAR 0 10
24591: PUSH
24592: LD_VAR 0 1
24596: ST_TO_ADDR
// for i = 1 to length do
24597: LD_ADDR_VAR 0 6
24601: PUSH
24602: DOUBLE
24603: LD_INT 1
24605: DEC
24606: ST_TO_ADDR
24607: LD_VAR 0 11
24611: PUSH
24612: FOR_TO
24613: IFFALSE 24733
// begin for j = 1 to array do
24615: LD_ADDR_VAR 0 7
24619: PUSH
24620: DOUBLE
24621: LD_INT 1
24623: DEC
24624: ST_TO_ADDR
24625: LD_VAR 0 1
24629: PUSH
24630: FOR_TO
24631: IFFALSE 24719
// begin k := j + d ;
24633: LD_ADDR_VAR 0 8
24637: PUSH
24638: LD_VAR 0 7
24642: PUSH
24643: LD_VAR 0 9
24647: PLUS
24648: ST_TO_ADDR
// if k > array then
24649: LD_VAR 0 8
24653: PUSH
24654: LD_VAR 0 1
24658: GREATER
24659: IFFALSE 24669
// k := 1 ;
24661: LD_ADDR_VAR 0 8
24665: PUSH
24666: LD_INT 1
24668: ST_TO_ADDR
// if not k then
24669: LD_VAR 0 8
24673: NOT
24674: IFFALSE 24686
// k := array ;
24676: LD_ADDR_VAR 0 8
24680: PUSH
24681: LD_VAR 0 1
24685: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24686: LD_ADDR_VAR 0 10
24690: PUSH
24691: LD_VAR 0 10
24695: PPUSH
24696: LD_VAR 0 8
24700: PPUSH
24701: LD_VAR 0 1
24705: PUSH
24706: LD_VAR 0 7
24710: ARRAY
24711: PPUSH
24712: CALL_OW 1
24716: ST_TO_ADDR
// end ;
24717: GO 24630
24719: POP
24720: POP
// array := tmp ;
24721: LD_ADDR_VAR 0 1
24725: PUSH
24726: LD_VAR 0 10
24730: ST_TO_ADDR
// end ;
24731: GO 24612
24733: POP
24734: POP
// result := array ;
24735: LD_ADDR_VAR 0 5
24739: PUSH
24740: LD_VAR 0 1
24744: ST_TO_ADDR
// end ;
24745: LD_VAR 0 5
24749: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24750: LD_INT 0
24752: PPUSH
24753: PPUSH
// result := 0 ;
24754: LD_ADDR_VAR 0 3
24758: PUSH
24759: LD_INT 0
24761: ST_TO_ADDR
// if not array or not value in array then
24762: LD_VAR 0 1
24766: NOT
24767: PUSH
24768: LD_VAR 0 2
24772: PUSH
24773: LD_VAR 0 1
24777: IN
24778: NOT
24779: OR
24780: IFFALSE 24784
// exit ;
24782: GO 24838
// for i = 1 to array do
24784: LD_ADDR_VAR 0 4
24788: PUSH
24789: DOUBLE
24790: LD_INT 1
24792: DEC
24793: ST_TO_ADDR
24794: LD_VAR 0 1
24798: PUSH
24799: FOR_TO
24800: IFFALSE 24836
// if value = array [ i ] then
24802: LD_VAR 0 2
24806: PUSH
24807: LD_VAR 0 1
24811: PUSH
24812: LD_VAR 0 4
24816: ARRAY
24817: EQUAL
24818: IFFALSE 24834
// begin result := i ;
24820: LD_ADDR_VAR 0 3
24824: PUSH
24825: LD_VAR 0 4
24829: ST_TO_ADDR
// exit ;
24830: POP
24831: POP
24832: GO 24838
// end ;
24834: GO 24799
24836: POP
24837: POP
// end ;
24838: LD_VAR 0 3
24842: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24843: LD_INT 0
24845: PPUSH
// vc_chassis := chassis ;
24846: LD_ADDR_OWVAR 37
24850: PUSH
24851: LD_VAR 0 1
24855: ST_TO_ADDR
// vc_engine := engine ;
24856: LD_ADDR_OWVAR 39
24860: PUSH
24861: LD_VAR 0 2
24865: ST_TO_ADDR
// vc_control := control ;
24866: LD_ADDR_OWVAR 38
24870: PUSH
24871: LD_VAR 0 3
24875: ST_TO_ADDR
// vc_weapon := weapon ;
24876: LD_ADDR_OWVAR 40
24880: PUSH
24881: LD_VAR 0 4
24885: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24886: LD_ADDR_OWVAR 41
24890: PUSH
24891: LD_VAR 0 5
24895: ST_TO_ADDR
// end ;
24896: LD_VAR 0 6
24900: RET
// export function WantPlant ( unit ) ; var task ; begin
24901: LD_INT 0
24903: PPUSH
24904: PPUSH
// result := false ;
24905: LD_ADDR_VAR 0 2
24909: PUSH
24910: LD_INT 0
24912: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24913: LD_ADDR_VAR 0 3
24917: PUSH
24918: LD_VAR 0 1
24922: PPUSH
24923: CALL_OW 437
24927: ST_TO_ADDR
// if task then
24928: LD_VAR 0 3
24932: IFFALSE 24960
// if task [ 1 ] [ 1 ] = p then
24934: LD_VAR 0 3
24938: PUSH
24939: LD_INT 1
24941: ARRAY
24942: PUSH
24943: LD_INT 1
24945: ARRAY
24946: PUSH
24947: LD_STRING p
24949: EQUAL
24950: IFFALSE 24960
// result := true ;
24952: LD_ADDR_VAR 0 2
24956: PUSH
24957: LD_INT 1
24959: ST_TO_ADDR
// end ;
24960: LD_VAR 0 2
24964: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24965: LD_INT 0
24967: PPUSH
24968: PPUSH
24969: PPUSH
24970: PPUSH
// if pos < 1 then
24971: LD_VAR 0 2
24975: PUSH
24976: LD_INT 1
24978: LESS
24979: IFFALSE 24983
// exit ;
24981: GO 25286
// if pos = 1 then
24983: LD_VAR 0 2
24987: PUSH
24988: LD_INT 1
24990: EQUAL
24991: IFFALSE 25024
// result := Replace ( arr , pos [ 1 ] , value ) else
24993: LD_ADDR_VAR 0 4
24997: PUSH
24998: LD_VAR 0 1
25002: PPUSH
25003: LD_VAR 0 2
25007: PUSH
25008: LD_INT 1
25010: ARRAY
25011: PPUSH
25012: LD_VAR 0 3
25016: PPUSH
25017: CALL_OW 1
25021: ST_TO_ADDR
25022: GO 25286
// begin tmp := arr ;
25024: LD_ADDR_VAR 0 6
25028: PUSH
25029: LD_VAR 0 1
25033: ST_TO_ADDR
// s_arr := [ tmp ] ;
25034: LD_ADDR_VAR 0 7
25038: PUSH
25039: LD_VAR 0 6
25043: PUSH
25044: EMPTY
25045: LIST
25046: ST_TO_ADDR
// for i = 1 to pos - 1 do
25047: LD_ADDR_VAR 0 5
25051: PUSH
25052: DOUBLE
25053: LD_INT 1
25055: DEC
25056: ST_TO_ADDR
25057: LD_VAR 0 2
25061: PUSH
25062: LD_INT 1
25064: MINUS
25065: PUSH
25066: FOR_TO
25067: IFFALSE 25112
// begin tmp := tmp [ pos [ i ] ] ;
25069: LD_ADDR_VAR 0 6
25073: PUSH
25074: LD_VAR 0 6
25078: PUSH
25079: LD_VAR 0 2
25083: PUSH
25084: LD_VAR 0 5
25088: ARRAY
25089: ARRAY
25090: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25091: LD_ADDR_VAR 0 7
25095: PUSH
25096: LD_VAR 0 7
25100: PUSH
25101: LD_VAR 0 6
25105: PUSH
25106: EMPTY
25107: LIST
25108: ADD
25109: ST_TO_ADDR
// end ;
25110: GO 25066
25112: POP
25113: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25114: LD_ADDR_VAR 0 6
25118: PUSH
25119: LD_VAR 0 6
25123: PPUSH
25124: LD_VAR 0 2
25128: PUSH
25129: LD_VAR 0 2
25133: ARRAY
25134: PPUSH
25135: LD_VAR 0 3
25139: PPUSH
25140: CALL_OW 1
25144: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25145: LD_ADDR_VAR 0 7
25149: PUSH
25150: LD_VAR 0 7
25154: PPUSH
25155: LD_VAR 0 7
25159: PPUSH
25160: LD_VAR 0 6
25164: PPUSH
25165: CALL_OW 1
25169: ST_TO_ADDR
// for i = s_arr downto 2 do
25170: LD_ADDR_VAR 0 5
25174: PUSH
25175: DOUBLE
25176: LD_VAR 0 7
25180: INC
25181: ST_TO_ADDR
25182: LD_INT 2
25184: PUSH
25185: FOR_DOWNTO
25186: IFFALSE 25270
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25188: LD_ADDR_VAR 0 6
25192: PUSH
25193: LD_VAR 0 7
25197: PUSH
25198: LD_VAR 0 5
25202: PUSH
25203: LD_INT 1
25205: MINUS
25206: ARRAY
25207: PPUSH
25208: LD_VAR 0 2
25212: PUSH
25213: LD_VAR 0 5
25217: PUSH
25218: LD_INT 1
25220: MINUS
25221: ARRAY
25222: PPUSH
25223: LD_VAR 0 7
25227: PUSH
25228: LD_VAR 0 5
25232: ARRAY
25233: PPUSH
25234: CALL_OW 1
25238: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25239: LD_ADDR_VAR 0 7
25243: PUSH
25244: LD_VAR 0 7
25248: PPUSH
25249: LD_VAR 0 5
25253: PUSH
25254: LD_INT 1
25256: MINUS
25257: PPUSH
25258: LD_VAR 0 6
25262: PPUSH
25263: CALL_OW 1
25267: ST_TO_ADDR
// end ;
25268: GO 25185
25270: POP
25271: POP
// result := s_arr [ 1 ] ;
25272: LD_ADDR_VAR 0 4
25276: PUSH
25277: LD_VAR 0 7
25281: PUSH
25282: LD_INT 1
25284: ARRAY
25285: ST_TO_ADDR
// end ; end ;
25286: LD_VAR 0 4
25290: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25291: LD_INT 0
25293: PPUSH
25294: PPUSH
// if not list then
25295: LD_VAR 0 1
25299: NOT
25300: IFFALSE 25304
// exit ;
25302: GO 25395
// i := list [ pos1 ] ;
25304: LD_ADDR_VAR 0 5
25308: PUSH
25309: LD_VAR 0 1
25313: PUSH
25314: LD_VAR 0 2
25318: ARRAY
25319: ST_TO_ADDR
// if not i then
25320: LD_VAR 0 5
25324: NOT
25325: IFFALSE 25329
// exit ;
25327: GO 25395
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25329: LD_ADDR_VAR 0 1
25333: PUSH
25334: LD_VAR 0 1
25338: PPUSH
25339: LD_VAR 0 2
25343: PPUSH
25344: LD_VAR 0 1
25348: PUSH
25349: LD_VAR 0 3
25353: ARRAY
25354: PPUSH
25355: CALL_OW 1
25359: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25360: LD_ADDR_VAR 0 1
25364: PUSH
25365: LD_VAR 0 1
25369: PPUSH
25370: LD_VAR 0 3
25374: PPUSH
25375: LD_VAR 0 5
25379: PPUSH
25380: CALL_OW 1
25384: ST_TO_ADDR
// result := list ;
25385: LD_ADDR_VAR 0 4
25389: PUSH
25390: LD_VAR 0 1
25394: ST_TO_ADDR
// end ;
25395: LD_VAR 0 4
25399: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25400: LD_INT 0
25402: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25403: LD_ADDR_VAR 0 5
25407: PUSH
25408: LD_VAR 0 1
25412: PPUSH
25413: CALL_OW 250
25417: PPUSH
25418: LD_VAR 0 1
25422: PPUSH
25423: CALL_OW 251
25427: PPUSH
25428: LD_VAR 0 2
25432: PPUSH
25433: LD_VAR 0 3
25437: PPUSH
25438: LD_VAR 0 4
25442: PPUSH
25443: CALL 25453 0 5
25447: ST_TO_ADDR
// end ;
25448: LD_VAR 0 5
25452: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25453: LD_INT 0
25455: PPUSH
25456: PPUSH
25457: PPUSH
25458: PPUSH
// if not list then
25459: LD_VAR 0 3
25463: NOT
25464: IFFALSE 25468
// exit ;
25466: GO 25856
// result := [ ] ;
25468: LD_ADDR_VAR 0 6
25472: PUSH
25473: EMPTY
25474: ST_TO_ADDR
// for i in list do
25475: LD_ADDR_VAR 0 7
25479: PUSH
25480: LD_VAR 0 3
25484: PUSH
25485: FOR_IN
25486: IFFALSE 25688
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25488: LD_ADDR_VAR 0 9
25492: PUSH
25493: LD_VAR 0 7
25497: PPUSH
25498: LD_VAR 0 1
25502: PPUSH
25503: LD_VAR 0 2
25507: PPUSH
25508: CALL_OW 297
25512: ST_TO_ADDR
// if not result then
25513: LD_VAR 0 6
25517: NOT
25518: IFFALSE 25544
// result := [ [ i , tmp ] ] else
25520: LD_ADDR_VAR 0 6
25524: PUSH
25525: LD_VAR 0 7
25529: PUSH
25530: LD_VAR 0 9
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: EMPTY
25540: LIST
25541: ST_TO_ADDR
25542: GO 25686
// begin if result [ result ] [ 2 ] < tmp then
25544: LD_VAR 0 6
25548: PUSH
25549: LD_VAR 0 6
25553: ARRAY
25554: PUSH
25555: LD_INT 2
25557: ARRAY
25558: PUSH
25559: LD_VAR 0 9
25563: LESS
25564: IFFALSE 25606
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25566: LD_ADDR_VAR 0 6
25570: PUSH
25571: LD_VAR 0 6
25575: PPUSH
25576: LD_VAR 0 6
25580: PUSH
25581: LD_INT 1
25583: PLUS
25584: PPUSH
25585: LD_VAR 0 7
25589: PUSH
25590: LD_VAR 0 9
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PPUSH
25599: CALL_OW 2
25603: ST_TO_ADDR
25604: GO 25686
// for j = 1 to result do
25606: LD_ADDR_VAR 0 8
25610: PUSH
25611: DOUBLE
25612: LD_INT 1
25614: DEC
25615: ST_TO_ADDR
25616: LD_VAR 0 6
25620: PUSH
25621: FOR_TO
25622: IFFALSE 25684
// begin if tmp < result [ j ] [ 2 ] then
25624: LD_VAR 0 9
25628: PUSH
25629: LD_VAR 0 6
25633: PUSH
25634: LD_VAR 0 8
25638: ARRAY
25639: PUSH
25640: LD_INT 2
25642: ARRAY
25643: LESS
25644: IFFALSE 25682
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25646: LD_ADDR_VAR 0 6
25650: PUSH
25651: LD_VAR 0 6
25655: PPUSH
25656: LD_VAR 0 8
25660: PPUSH
25661: LD_VAR 0 7
25665: PUSH
25666: LD_VAR 0 9
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PPUSH
25675: CALL_OW 2
25679: ST_TO_ADDR
// break ;
25680: GO 25684
// end ; end ;
25682: GO 25621
25684: POP
25685: POP
// end ; end ;
25686: GO 25485
25688: POP
25689: POP
// if result and not asc then
25690: LD_VAR 0 6
25694: PUSH
25695: LD_VAR 0 4
25699: NOT
25700: AND
25701: IFFALSE 25776
// begin tmp := result ;
25703: LD_ADDR_VAR 0 9
25707: PUSH
25708: LD_VAR 0 6
25712: ST_TO_ADDR
// for i = tmp downto 1 do
25713: LD_ADDR_VAR 0 7
25717: PUSH
25718: DOUBLE
25719: LD_VAR 0 9
25723: INC
25724: ST_TO_ADDR
25725: LD_INT 1
25727: PUSH
25728: FOR_DOWNTO
25729: IFFALSE 25774
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25731: LD_ADDR_VAR 0 6
25735: PUSH
25736: LD_VAR 0 6
25740: PPUSH
25741: LD_VAR 0 9
25745: PUSH
25746: LD_VAR 0 7
25750: MINUS
25751: PUSH
25752: LD_INT 1
25754: PLUS
25755: PPUSH
25756: LD_VAR 0 9
25760: PUSH
25761: LD_VAR 0 7
25765: ARRAY
25766: PPUSH
25767: CALL_OW 1
25771: ST_TO_ADDR
25772: GO 25728
25774: POP
25775: POP
// end ; tmp := [ ] ;
25776: LD_ADDR_VAR 0 9
25780: PUSH
25781: EMPTY
25782: ST_TO_ADDR
// if mode then
25783: LD_VAR 0 5
25787: IFFALSE 25856
// begin for i = 1 to result do
25789: LD_ADDR_VAR 0 7
25793: PUSH
25794: DOUBLE
25795: LD_INT 1
25797: DEC
25798: ST_TO_ADDR
25799: LD_VAR 0 6
25803: PUSH
25804: FOR_TO
25805: IFFALSE 25844
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25807: LD_ADDR_VAR 0 9
25811: PUSH
25812: LD_VAR 0 9
25816: PPUSH
25817: LD_VAR 0 7
25821: PPUSH
25822: LD_VAR 0 6
25826: PUSH
25827: LD_VAR 0 7
25831: ARRAY
25832: PUSH
25833: LD_INT 1
25835: ARRAY
25836: PPUSH
25837: CALL_OW 1
25841: ST_TO_ADDR
25842: GO 25804
25844: POP
25845: POP
// result := tmp ;
25846: LD_ADDR_VAR 0 6
25850: PUSH
25851: LD_VAR 0 9
25855: ST_TO_ADDR
// end ; end ;
25856: LD_VAR 0 6
25860: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25861: LD_INT 0
25863: PPUSH
25864: PPUSH
25865: PPUSH
25866: PPUSH
25867: PPUSH
25868: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25869: LD_ADDR_VAR 0 5
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: EMPTY
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: ST_TO_ADDR
// if not x or not y then
25891: LD_VAR 0 2
25895: NOT
25896: PUSH
25897: LD_VAR 0 3
25901: NOT
25902: OR
25903: IFFALSE 25907
// exit ;
25905: GO 27553
// if not range then
25907: LD_VAR 0 4
25911: NOT
25912: IFFALSE 25922
// range := 10 ;
25914: LD_ADDR_VAR 0 4
25918: PUSH
25919: LD_INT 10
25921: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25922: LD_ADDR_VAR 0 8
25926: PUSH
25927: LD_INT 81
25929: PUSH
25930: LD_VAR 0 1
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 92
25941: PUSH
25942: LD_VAR 0 2
25946: PUSH
25947: LD_VAR 0 3
25951: PUSH
25952: LD_VAR 0 4
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 3
25965: PUSH
25966: LD_INT 21
25968: PUSH
25969: LD_INT 3
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: LIST
25984: PPUSH
25985: CALL_OW 69
25989: ST_TO_ADDR
// if not tmp then
25990: LD_VAR 0 8
25994: NOT
25995: IFFALSE 25999
// exit ;
25997: GO 27553
// for i in tmp do
25999: LD_ADDR_VAR 0 6
26003: PUSH
26004: LD_VAR 0 8
26008: PUSH
26009: FOR_IN
26010: IFFALSE 27528
// begin points := [ 0 , 0 , 0 ] ;
26012: LD_ADDR_VAR 0 9
26016: PUSH
26017: LD_INT 0
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: LIST
26030: ST_TO_ADDR
// bpoints := 1 ;
26031: LD_ADDR_VAR 0 10
26035: PUSH
26036: LD_INT 1
26038: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26039: LD_VAR 0 6
26043: PPUSH
26044: CALL_OW 247
26048: PUSH
26049: LD_INT 1
26051: DOUBLE
26052: EQUAL
26053: IFTRUE 26057
26055: GO 26635
26057: POP
// begin if GetClass ( i ) = 1 then
26058: LD_VAR 0 6
26062: PPUSH
26063: CALL_OW 257
26067: PUSH
26068: LD_INT 1
26070: EQUAL
26071: IFFALSE 26092
// points := [ 10 , 5 , 3 ] ;
26073: LD_ADDR_VAR 0 9
26077: PUSH
26078: LD_INT 10
26080: PUSH
26081: LD_INT 5
26083: PUSH
26084: LD_INT 3
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: LIST
26091: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26092: LD_VAR 0 6
26096: PPUSH
26097: CALL_OW 257
26101: PUSH
26102: LD_INT 2
26104: PUSH
26105: LD_INT 3
26107: PUSH
26108: LD_INT 4
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: LIST
26115: IN
26116: IFFALSE 26137
// points := [ 3 , 2 , 1 ] ;
26118: LD_ADDR_VAR 0 9
26122: PUSH
26123: LD_INT 3
26125: PUSH
26126: LD_INT 2
26128: PUSH
26129: LD_INT 1
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: LIST
26136: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26137: LD_VAR 0 6
26141: PPUSH
26142: CALL_OW 257
26146: PUSH
26147: LD_INT 5
26149: EQUAL
26150: IFFALSE 26171
// points := [ 130 , 5 , 2 ] ;
26152: LD_ADDR_VAR 0 9
26156: PUSH
26157: LD_INT 130
26159: PUSH
26160: LD_INT 5
26162: PUSH
26163: LD_INT 2
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: LIST
26170: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26171: LD_VAR 0 6
26175: PPUSH
26176: CALL_OW 257
26180: PUSH
26181: LD_INT 8
26183: EQUAL
26184: IFFALSE 26205
// points := [ 35 , 35 , 30 ] ;
26186: LD_ADDR_VAR 0 9
26190: PUSH
26191: LD_INT 35
26193: PUSH
26194: LD_INT 35
26196: PUSH
26197: LD_INT 30
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: LIST
26204: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26205: LD_VAR 0 6
26209: PPUSH
26210: CALL_OW 257
26214: PUSH
26215: LD_INT 9
26217: EQUAL
26218: IFFALSE 26239
// points := [ 20 , 55 , 40 ] ;
26220: LD_ADDR_VAR 0 9
26224: PUSH
26225: LD_INT 20
26227: PUSH
26228: LD_INT 55
26230: PUSH
26231: LD_INT 40
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: LIST
26238: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26239: LD_VAR 0 6
26243: PPUSH
26244: CALL_OW 257
26248: PUSH
26249: LD_INT 12
26251: PUSH
26252: LD_INT 16
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: IN
26259: IFFALSE 26280
// points := [ 5 , 3 , 2 ] ;
26261: LD_ADDR_VAR 0 9
26265: PUSH
26266: LD_INT 5
26268: PUSH
26269: LD_INT 3
26271: PUSH
26272: LD_INT 2
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: LIST
26279: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26280: LD_VAR 0 6
26284: PPUSH
26285: CALL_OW 257
26289: PUSH
26290: LD_INT 17
26292: EQUAL
26293: IFFALSE 26314
// points := [ 100 , 50 , 75 ] ;
26295: LD_ADDR_VAR 0 9
26299: PUSH
26300: LD_INT 100
26302: PUSH
26303: LD_INT 50
26305: PUSH
26306: LD_INT 75
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: LIST
26313: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26314: LD_VAR 0 6
26318: PPUSH
26319: CALL_OW 257
26323: PUSH
26324: LD_INT 15
26326: EQUAL
26327: IFFALSE 26348
// points := [ 10 , 5 , 3 ] ;
26329: LD_ADDR_VAR 0 9
26333: PUSH
26334: LD_INT 10
26336: PUSH
26337: LD_INT 5
26339: PUSH
26340: LD_INT 3
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: LIST
26347: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26348: LD_VAR 0 6
26352: PPUSH
26353: CALL_OW 257
26357: PUSH
26358: LD_INT 14
26360: EQUAL
26361: IFFALSE 26382
// points := [ 10 , 0 , 0 ] ;
26363: LD_ADDR_VAR 0 9
26367: PUSH
26368: LD_INT 10
26370: PUSH
26371: LD_INT 0
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: LIST
26381: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26382: LD_VAR 0 6
26386: PPUSH
26387: CALL_OW 257
26391: PUSH
26392: LD_INT 11
26394: EQUAL
26395: IFFALSE 26416
// points := [ 30 , 10 , 5 ] ;
26397: LD_ADDR_VAR 0 9
26401: PUSH
26402: LD_INT 30
26404: PUSH
26405: LD_INT 10
26407: PUSH
26408: LD_INT 5
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: LIST
26415: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26416: LD_VAR 0 1
26420: PPUSH
26421: LD_INT 5
26423: PPUSH
26424: CALL_OW 321
26428: PUSH
26429: LD_INT 2
26431: EQUAL
26432: IFFALSE 26449
// bpoints := bpoints * 1.8 ;
26434: LD_ADDR_VAR 0 10
26438: PUSH
26439: LD_VAR 0 10
26443: PUSH
26444: LD_REAL  1.80000000000000E+0000
26447: MUL
26448: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26449: LD_VAR 0 6
26453: PPUSH
26454: CALL_OW 257
26458: PUSH
26459: LD_INT 1
26461: PUSH
26462: LD_INT 2
26464: PUSH
26465: LD_INT 3
26467: PUSH
26468: LD_INT 4
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: IN
26477: PUSH
26478: LD_VAR 0 1
26482: PPUSH
26483: LD_INT 51
26485: PPUSH
26486: CALL_OW 321
26490: PUSH
26491: LD_INT 2
26493: EQUAL
26494: AND
26495: IFFALSE 26512
// bpoints := bpoints * 1.2 ;
26497: LD_ADDR_VAR 0 10
26501: PUSH
26502: LD_VAR 0 10
26506: PUSH
26507: LD_REAL  1.20000000000000E+0000
26510: MUL
26511: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26512: LD_VAR 0 6
26516: PPUSH
26517: CALL_OW 257
26521: PUSH
26522: LD_INT 5
26524: PUSH
26525: LD_INT 7
26527: PUSH
26528: LD_INT 9
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: LIST
26535: IN
26536: PUSH
26537: LD_VAR 0 1
26541: PPUSH
26542: LD_INT 52
26544: PPUSH
26545: CALL_OW 321
26549: PUSH
26550: LD_INT 2
26552: EQUAL
26553: AND
26554: IFFALSE 26571
// bpoints := bpoints * 1.5 ;
26556: LD_ADDR_VAR 0 10
26560: PUSH
26561: LD_VAR 0 10
26565: PUSH
26566: LD_REAL  1.50000000000000E+0000
26569: MUL
26570: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26571: LD_VAR 0 1
26575: PPUSH
26576: LD_INT 66
26578: PPUSH
26579: CALL_OW 321
26583: PUSH
26584: LD_INT 2
26586: EQUAL
26587: IFFALSE 26604
// bpoints := bpoints * 1.1 ;
26589: LD_ADDR_VAR 0 10
26593: PUSH
26594: LD_VAR 0 10
26598: PUSH
26599: LD_REAL  1.10000000000000E+0000
26602: MUL
26603: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26604: LD_ADDR_VAR 0 10
26608: PUSH
26609: LD_VAR 0 10
26613: PUSH
26614: LD_VAR 0 6
26618: PPUSH
26619: LD_INT 1
26621: PPUSH
26622: CALL_OW 259
26626: PUSH
26627: LD_REAL  1.15000000000000E+0000
26630: MUL
26631: MUL
26632: ST_TO_ADDR
// end ; unit_vehicle :
26633: GO 27457
26635: LD_INT 2
26637: DOUBLE
26638: EQUAL
26639: IFTRUE 26643
26641: GO 27445
26643: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26644: LD_VAR 0 6
26648: PPUSH
26649: CALL_OW 264
26653: PUSH
26654: LD_INT 2
26656: PUSH
26657: LD_INT 42
26659: PUSH
26660: LD_INT 24
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: LIST
26667: IN
26668: IFFALSE 26689
// points := [ 25 , 5 , 3 ] ;
26670: LD_ADDR_VAR 0 9
26674: PUSH
26675: LD_INT 25
26677: PUSH
26678: LD_INT 5
26680: PUSH
26681: LD_INT 3
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26689: LD_VAR 0 6
26693: PPUSH
26694: CALL_OW 264
26698: PUSH
26699: LD_INT 4
26701: PUSH
26702: LD_INT 43
26704: PUSH
26705: LD_INT 25
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: LIST
26712: IN
26713: IFFALSE 26734
// points := [ 40 , 15 , 5 ] ;
26715: LD_ADDR_VAR 0 9
26719: PUSH
26720: LD_INT 40
26722: PUSH
26723: LD_INT 15
26725: PUSH
26726: LD_INT 5
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: LIST
26733: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26734: LD_VAR 0 6
26738: PPUSH
26739: CALL_OW 264
26743: PUSH
26744: LD_INT 3
26746: PUSH
26747: LD_INT 23
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: IN
26754: IFFALSE 26775
// points := [ 7 , 25 , 8 ] ;
26756: LD_ADDR_VAR 0 9
26760: PUSH
26761: LD_INT 7
26763: PUSH
26764: LD_INT 25
26766: PUSH
26767: LD_INT 8
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: LIST
26774: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26775: LD_VAR 0 6
26779: PPUSH
26780: CALL_OW 264
26784: PUSH
26785: LD_INT 5
26787: PUSH
26788: LD_INT 27
26790: PUSH
26791: LD_INT 44
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: LIST
26798: IN
26799: IFFALSE 26820
// points := [ 14 , 50 , 16 ] ;
26801: LD_ADDR_VAR 0 9
26805: PUSH
26806: LD_INT 14
26808: PUSH
26809: LD_INT 50
26811: PUSH
26812: LD_INT 16
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: LIST
26819: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26820: LD_VAR 0 6
26824: PPUSH
26825: CALL_OW 264
26829: PUSH
26830: LD_INT 6
26832: PUSH
26833: LD_INT 46
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: IN
26840: IFFALSE 26861
// points := [ 32 , 120 , 70 ] ;
26842: LD_ADDR_VAR 0 9
26846: PUSH
26847: LD_INT 32
26849: PUSH
26850: LD_INT 120
26852: PUSH
26853: LD_INT 70
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: LIST
26860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26861: LD_VAR 0 6
26865: PPUSH
26866: CALL_OW 264
26870: PUSH
26871: LD_INT 7
26873: PUSH
26874: LD_INT 28
26876: PUSH
26877: LD_INT 45
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: LIST
26884: IN
26885: IFFALSE 26906
// points := [ 35 , 20 , 45 ] ;
26887: LD_ADDR_VAR 0 9
26891: PUSH
26892: LD_INT 35
26894: PUSH
26895: LD_INT 20
26897: PUSH
26898: LD_INT 45
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: LIST
26905: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26906: LD_VAR 0 6
26910: PPUSH
26911: CALL_OW 264
26915: PUSH
26916: LD_INT 47
26918: PUSH
26919: EMPTY
26920: LIST
26921: IN
26922: IFFALSE 26943
// points := [ 67 , 45 , 75 ] ;
26924: LD_ADDR_VAR 0 9
26928: PUSH
26929: LD_INT 67
26931: PUSH
26932: LD_INT 45
26934: PUSH
26935: LD_INT 75
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: LIST
26942: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26943: LD_VAR 0 6
26947: PPUSH
26948: CALL_OW 264
26952: PUSH
26953: LD_INT 26
26955: PUSH
26956: EMPTY
26957: LIST
26958: IN
26959: IFFALSE 26980
// points := [ 120 , 30 , 80 ] ;
26961: LD_ADDR_VAR 0 9
26965: PUSH
26966: LD_INT 120
26968: PUSH
26969: LD_INT 30
26971: PUSH
26972: LD_INT 80
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: LIST
26979: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26980: LD_VAR 0 6
26984: PPUSH
26985: CALL_OW 264
26989: PUSH
26990: LD_INT 22
26992: PUSH
26993: EMPTY
26994: LIST
26995: IN
26996: IFFALSE 27017
// points := [ 40 , 1 , 1 ] ;
26998: LD_ADDR_VAR 0 9
27002: PUSH
27003: LD_INT 40
27005: PUSH
27006: LD_INT 1
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: LIST
27016: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27017: LD_VAR 0 6
27021: PPUSH
27022: CALL_OW 264
27026: PUSH
27027: LD_INT 29
27029: PUSH
27030: EMPTY
27031: LIST
27032: IN
27033: IFFALSE 27054
// points := [ 70 , 200 , 400 ] ;
27035: LD_ADDR_VAR 0 9
27039: PUSH
27040: LD_INT 70
27042: PUSH
27043: LD_INT 200
27045: PUSH
27046: LD_INT 400
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: LIST
27053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27054: LD_VAR 0 6
27058: PPUSH
27059: CALL_OW 264
27063: PUSH
27064: LD_INT 14
27066: PUSH
27067: LD_INT 53
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: IN
27074: IFFALSE 27095
// points := [ 40 , 10 , 20 ] ;
27076: LD_ADDR_VAR 0 9
27080: PUSH
27081: LD_INT 40
27083: PUSH
27084: LD_INT 10
27086: PUSH
27087: LD_INT 20
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: LIST
27094: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27095: LD_VAR 0 6
27099: PPUSH
27100: CALL_OW 264
27104: PUSH
27105: LD_INT 9
27107: PUSH
27108: EMPTY
27109: LIST
27110: IN
27111: IFFALSE 27132
// points := [ 5 , 70 , 20 ] ;
27113: LD_ADDR_VAR 0 9
27117: PUSH
27118: LD_INT 5
27120: PUSH
27121: LD_INT 70
27123: PUSH
27124: LD_INT 20
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: LIST
27131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27132: LD_VAR 0 6
27136: PPUSH
27137: CALL_OW 264
27141: PUSH
27142: LD_INT 10
27144: PUSH
27145: EMPTY
27146: LIST
27147: IN
27148: IFFALSE 27169
// points := [ 35 , 110 , 70 ] ;
27150: LD_ADDR_VAR 0 9
27154: PUSH
27155: LD_INT 35
27157: PUSH
27158: LD_INT 110
27160: PUSH
27161: LD_INT 70
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: LIST
27168: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27169: LD_VAR 0 6
27173: PPUSH
27174: CALL_OW 265
27178: PUSH
27179: LD_INT 25
27181: EQUAL
27182: IFFALSE 27203
// points := [ 80 , 65 , 100 ] ;
27184: LD_ADDR_VAR 0 9
27188: PUSH
27189: LD_INT 80
27191: PUSH
27192: LD_INT 65
27194: PUSH
27195: LD_INT 100
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: LIST
27202: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27203: LD_VAR 0 6
27207: PPUSH
27208: CALL_OW 263
27212: PUSH
27213: LD_INT 1
27215: EQUAL
27216: IFFALSE 27251
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27218: LD_ADDR_VAR 0 10
27222: PUSH
27223: LD_VAR 0 10
27227: PUSH
27228: LD_VAR 0 6
27232: PPUSH
27233: CALL_OW 311
27237: PPUSH
27238: LD_INT 3
27240: PPUSH
27241: CALL_OW 259
27245: PUSH
27246: LD_INT 4
27248: MUL
27249: MUL
27250: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27251: LD_VAR 0 6
27255: PPUSH
27256: CALL_OW 263
27260: PUSH
27261: LD_INT 2
27263: EQUAL
27264: IFFALSE 27315
// begin j := IsControledBy ( i ) ;
27266: LD_ADDR_VAR 0 7
27270: PUSH
27271: LD_VAR 0 6
27275: PPUSH
27276: CALL_OW 312
27280: ST_TO_ADDR
// if j then
27281: LD_VAR 0 7
27285: IFFALSE 27315
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27287: LD_ADDR_VAR 0 10
27291: PUSH
27292: LD_VAR 0 10
27296: PUSH
27297: LD_VAR 0 7
27301: PPUSH
27302: LD_INT 3
27304: PPUSH
27305: CALL_OW 259
27309: PUSH
27310: LD_INT 3
27312: MUL
27313: MUL
27314: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27315: LD_VAR 0 6
27319: PPUSH
27320: CALL_OW 264
27324: PUSH
27325: LD_INT 5
27327: PUSH
27328: LD_INT 6
27330: PUSH
27331: LD_INT 46
27333: PUSH
27334: LD_INT 44
27336: PUSH
27337: LD_INT 47
27339: PUSH
27340: LD_INT 45
27342: PUSH
27343: LD_INT 28
27345: PUSH
27346: LD_INT 7
27348: PUSH
27349: LD_INT 27
27351: PUSH
27352: LD_INT 29
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: IN
27367: PUSH
27368: LD_VAR 0 1
27372: PPUSH
27373: LD_INT 52
27375: PPUSH
27376: CALL_OW 321
27380: PUSH
27381: LD_INT 2
27383: EQUAL
27384: AND
27385: IFFALSE 27402
// bpoints := bpoints * 1.2 ;
27387: LD_ADDR_VAR 0 10
27391: PUSH
27392: LD_VAR 0 10
27396: PUSH
27397: LD_REAL  1.20000000000000E+0000
27400: MUL
27401: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27402: LD_VAR 0 6
27406: PPUSH
27407: CALL_OW 264
27411: PUSH
27412: LD_INT 6
27414: PUSH
27415: LD_INT 46
27417: PUSH
27418: LD_INT 47
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: LIST
27425: IN
27426: IFFALSE 27443
// bpoints := bpoints * 1.2 ;
27428: LD_ADDR_VAR 0 10
27432: PUSH
27433: LD_VAR 0 10
27437: PUSH
27438: LD_REAL  1.20000000000000E+0000
27441: MUL
27442: ST_TO_ADDR
// end ; unit_building :
27443: GO 27457
27445: LD_INT 3
27447: DOUBLE
27448: EQUAL
27449: IFTRUE 27453
27451: GO 27456
27453: POP
// ; end ;
27454: GO 27457
27456: POP
// for j = 1 to 3 do
27457: LD_ADDR_VAR 0 7
27461: PUSH
27462: DOUBLE
27463: LD_INT 1
27465: DEC
27466: ST_TO_ADDR
27467: LD_INT 3
27469: PUSH
27470: FOR_TO
27471: IFFALSE 27524
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27473: LD_ADDR_VAR 0 5
27477: PUSH
27478: LD_VAR 0 5
27482: PPUSH
27483: LD_VAR 0 7
27487: PPUSH
27488: LD_VAR 0 5
27492: PUSH
27493: LD_VAR 0 7
27497: ARRAY
27498: PUSH
27499: LD_VAR 0 9
27503: PUSH
27504: LD_VAR 0 7
27508: ARRAY
27509: PUSH
27510: LD_VAR 0 10
27514: MUL
27515: PLUS
27516: PPUSH
27517: CALL_OW 1
27521: ST_TO_ADDR
27522: GO 27470
27524: POP
27525: POP
// end ;
27526: GO 26009
27528: POP
27529: POP
// result := Replace ( result , 4 , tmp ) ;
27530: LD_ADDR_VAR 0 5
27534: PUSH
27535: LD_VAR 0 5
27539: PPUSH
27540: LD_INT 4
27542: PPUSH
27543: LD_VAR 0 8
27547: PPUSH
27548: CALL_OW 1
27552: ST_TO_ADDR
// end ;
27553: LD_VAR 0 5
27557: RET
// export function DangerAtRange ( unit , range ) ; begin
27558: LD_INT 0
27560: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27561: LD_ADDR_VAR 0 3
27565: PUSH
27566: LD_VAR 0 1
27570: PPUSH
27571: CALL_OW 255
27575: PPUSH
27576: LD_VAR 0 1
27580: PPUSH
27581: CALL_OW 250
27585: PPUSH
27586: LD_VAR 0 1
27590: PPUSH
27591: CALL_OW 251
27595: PPUSH
27596: LD_VAR 0 2
27600: PPUSH
27601: CALL 25861 0 4
27605: ST_TO_ADDR
// end ;
27606: LD_VAR 0 3
27610: RET
// export function DangerInArea ( side , area ) ; begin
27611: LD_INT 0
27613: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27614: LD_ADDR_VAR 0 3
27618: PUSH
27619: LD_VAR 0 2
27623: PPUSH
27624: LD_INT 81
27626: PUSH
27627: LD_VAR 0 1
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PPUSH
27636: CALL_OW 70
27640: ST_TO_ADDR
// end ;
27641: LD_VAR 0 3
27645: RET
// export function IsExtension ( b ) ; begin
27646: LD_INT 0
27648: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27649: LD_ADDR_VAR 0 2
27653: PUSH
27654: LD_VAR 0 1
27658: PUSH
27659: LD_INT 23
27661: PUSH
27662: LD_INT 20
27664: PUSH
27665: LD_INT 22
27667: PUSH
27668: LD_INT 17
27670: PUSH
27671: LD_INT 24
27673: PUSH
27674: LD_INT 21
27676: PUSH
27677: LD_INT 19
27679: PUSH
27680: LD_INT 16
27682: PUSH
27683: LD_INT 25
27685: PUSH
27686: LD_INT 18
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: IN
27701: ST_TO_ADDR
// end ;
27702: LD_VAR 0 2
27706: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
27707: LD_INT 0
27709: PPUSH
27710: PPUSH
27711: PPUSH
// result := [ ] ;
27712: LD_ADDR_VAR 0 3
27716: PUSH
27717: EMPTY
27718: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27719: LD_ADDR_VAR 0 4
27723: PUSH
27724: LD_VAR 0 2
27728: PPUSH
27729: LD_INT 21
27731: PUSH
27732: LD_INT 3
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PPUSH
27739: CALL_OW 70
27743: ST_TO_ADDR
// if not tmp then
27744: LD_VAR 0 4
27748: NOT
27749: IFFALSE 27753
// exit ;
27751: GO 27811
// for i in tmp do
27753: LD_ADDR_VAR 0 5
27757: PUSH
27758: LD_VAR 0 4
27762: PUSH
27763: FOR_IN
27764: IFFALSE 27799
// if GetBase ( i ) <> base then
27766: LD_VAR 0 5
27770: PPUSH
27771: CALL_OW 274
27775: PUSH
27776: LD_VAR 0 1
27780: NONEQUAL
27781: IFFALSE 27797
// ComLinkToBase ( base , i ) ;
27783: LD_VAR 0 1
27787: PPUSH
27788: LD_VAR 0 5
27792: PPUSH
27793: CALL_OW 169
27797: GO 27763
27799: POP
27800: POP
// result := tmp ;
27801: LD_ADDR_VAR 0 3
27805: PUSH
27806: LD_VAR 0 4
27810: ST_TO_ADDR
// end ;
27811: LD_VAR 0 3
27815: RET
// export function ComComplete ( unit , b ) ; var i ; begin
27816: LD_INT 0
27818: PPUSH
27819: PPUSH
// if BuildingStatus ( b ) = bs_build then
27820: LD_VAR 0 2
27824: PPUSH
27825: CALL_OW 461
27829: PUSH
27830: LD_INT 1
27832: EQUAL
27833: IFFALSE 27893
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27835: LD_VAR 0 1
27839: PPUSH
27840: LD_STRING h
27842: PUSH
27843: LD_VAR 0 2
27847: PPUSH
27848: CALL_OW 250
27852: PUSH
27853: LD_VAR 0 2
27857: PPUSH
27858: CALL_OW 251
27862: PUSH
27863: LD_VAR 0 2
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: LD_INT 0
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: PUSH
27886: EMPTY
27887: LIST
27888: PPUSH
27889: CALL_OW 446
// end ;
27893: LD_VAR 0 3
27897: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27898: LD_INT 0
27900: PPUSH
27901: PPUSH
27902: PPUSH
27903: PPUSH
27904: PPUSH
27905: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27906: LD_VAR 0 1
27910: NOT
27911: PUSH
27912: LD_VAR 0 1
27916: PPUSH
27917: CALL_OW 263
27921: PUSH
27922: LD_INT 2
27924: EQUAL
27925: NOT
27926: OR
27927: IFFALSE 27931
// exit ;
27929: GO 28247
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27931: LD_ADDR_VAR 0 6
27935: PUSH
27936: LD_INT 22
27938: PUSH
27939: LD_VAR 0 1
27943: PPUSH
27944: CALL_OW 255
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: LD_INT 30
27958: PUSH
27959: LD_INT 36
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 34
27968: PUSH
27969: LD_INT 31
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: LIST
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PPUSH
27985: CALL_OW 69
27989: ST_TO_ADDR
// if not tmp then
27990: LD_VAR 0 6
27994: NOT
27995: IFFALSE 27999
// exit ;
27997: GO 28247
// result := [ ] ;
27999: LD_ADDR_VAR 0 2
28003: PUSH
28004: EMPTY
28005: ST_TO_ADDR
// for i in tmp do
28006: LD_ADDR_VAR 0 3
28010: PUSH
28011: LD_VAR 0 6
28015: PUSH
28016: FOR_IN
28017: IFFALSE 28088
// begin t := UnitsInside ( i ) ;
28019: LD_ADDR_VAR 0 4
28023: PUSH
28024: LD_VAR 0 3
28028: PPUSH
28029: CALL_OW 313
28033: ST_TO_ADDR
// if t then
28034: LD_VAR 0 4
28038: IFFALSE 28086
// for j in t do
28040: LD_ADDR_VAR 0 7
28044: PUSH
28045: LD_VAR 0 4
28049: PUSH
28050: FOR_IN
28051: IFFALSE 28084
// result := Insert ( result , result + 1 , j ) ;
28053: LD_ADDR_VAR 0 2
28057: PUSH
28058: LD_VAR 0 2
28062: PPUSH
28063: LD_VAR 0 2
28067: PUSH
28068: LD_INT 1
28070: PLUS
28071: PPUSH
28072: LD_VAR 0 7
28076: PPUSH
28077: CALL_OW 2
28081: ST_TO_ADDR
28082: GO 28050
28084: POP
28085: POP
// end ;
28086: GO 28016
28088: POP
28089: POP
// if not result then
28090: LD_VAR 0 2
28094: NOT
28095: IFFALSE 28099
// exit ;
28097: GO 28247
// mech := result [ 1 ] ;
28099: LD_ADDR_VAR 0 5
28103: PUSH
28104: LD_VAR 0 2
28108: PUSH
28109: LD_INT 1
28111: ARRAY
28112: ST_TO_ADDR
// if result > 1 then
28113: LD_VAR 0 2
28117: PUSH
28118: LD_INT 1
28120: GREATER
28121: IFFALSE 28233
// for i = 2 to result do
28123: LD_ADDR_VAR 0 3
28127: PUSH
28128: DOUBLE
28129: LD_INT 2
28131: DEC
28132: ST_TO_ADDR
28133: LD_VAR 0 2
28137: PUSH
28138: FOR_TO
28139: IFFALSE 28231
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28141: LD_ADDR_VAR 0 4
28145: PUSH
28146: LD_VAR 0 2
28150: PUSH
28151: LD_VAR 0 3
28155: ARRAY
28156: PPUSH
28157: LD_INT 3
28159: PPUSH
28160: CALL_OW 259
28164: PUSH
28165: LD_VAR 0 2
28169: PUSH
28170: LD_VAR 0 3
28174: ARRAY
28175: PPUSH
28176: CALL_OW 432
28180: MINUS
28181: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28182: LD_VAR 0 4
28186: PUSH
28187: LD_VAR 0 5
28191: PPUSH
28192: LD_INT 3
28194: PPUSH
28195: CALL_OW 259
28199: PUSH
28200: LD_VAR 0 5
28204: PPUSH
28205: CALL_OW 432
28209: MINUS
28210: GREATEREQUAL
28211: IFFALSE 28229
// mech := result [ i ] ;
28213: LD_ADDR_VAR 0 5
28217: PUSH
28218: LD_VAR 0 2
28222: PUSH
28223: LD_VAR 0 3
28227: ARRAY
28228: ST_TO_ADDR
// end ;
28229: GO 28138
28231: POP
28232: POP
// ComLinkTo ( vehicle , mech ) ;
28233: LD_VAR 0 1
28237: PPUSH
28238: LD_VAR 0 5
28242: PPUSH
28243: CALL_OW 135
// end ;
28247: LD_VAR 0 2
28251: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28252: LD_INT 0
28254: PPUSH
28255: PPUSH
28256: PPUSH
28257: PPUSH
28258: PPUSH
28259: PPUSH
28260: PPUSH
28261: PPUSH
28262: PPUSH
28263: PPUSH
28264: PPUSH
28265: PPUSH
28266: PPUSH
// result := [ ] ;
28267: LD_ADDR_VAR 0 7
28271: PUSH
28272: EMPTY
28273: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28274: LD_VAR 0 1
28278: PPUSH
28279: CALL_OW 266
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: LD_INT 1
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: IN
28294: NOT
28295: IFFALSE 28299
// exit ;
28297: GO 29930
// if name then
28299: LD_VAR 0 3
28303: IFFALSE 28319
// SetBName ( base_dep , name ) ;
28305: LD_VAR 0 1
28309: PPUSH
28310: LD_VAR 0 3
28314: PPUSH
28315: CALL_OW 500
// base := GetBase ( base_dep ) ;
28319: LD_ADDR_VAR 0 15
28323: PUSH
28324: LD_VAR 0 1
28328: PPUSH
28329: CALL_OW 274
28333: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28334: LD_ADDR_VAR 0 16
28338: PUSH
28339: LD_VAR 0 1
28343: PPUSH
28344: CALL_OW 255
28348: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28349: LD_ADDR_VAR 0 17
28353: PUSH
28354: LD_VAR 0 1
28358: PPUSH
28359: CALL_OW 248
28363: ST_TO_ADDR
// if sources then
28364: LD_VAR 0 5
28368: IFFALSE 28415
// for i = 1 to 3 do
28370: LD_ADDR_VAR 0 8
28374: PUSH
28375: DOUBLE
28376: LD_INT 1
28378: DEC
28379: ST_TO_ADDR
28380: LD_INT 3
28382: PUSH
28383: FOR_TO
28384: IFFALSE 28413
// AddResourceType ( base , i , sources [ i ] ) ;
28386: LD_VAR 0 15
28390: PPUSH
28391: LD_VAR 0 8
28395: PPUSH
28396: LD_VAR 0 5
28400: PUSH
28401: LD_VAR 0 8
28405: ARRAY
28406: PPUSH
28407: CALL_OW 276
28411: GO 28383
28413: POP
28414: POP
// buildings := GetBaseBuildings ( base , area ) ;
28415: LD_ADDR_VAR 0 18
28419: PUSH
28420: LD_VAR 0 15
28424: PPUSH
28425: LD_VAR 0 2
28429: PPUSH
28430: CALL 27707 0 2
28434: ST_TO_ADDR
// InitHc ;
28435: CALL_OW 19
// InitUc ;
28439: CALL_OW 18
// uc_side := side ;
28443: LD_ADDR_OWVAR 20
28447: PUSH
28448: LD_VAR 0 16
28452: ST_TO_ADDR
// uc_nation := nation ;
28453: LD_ADDR_OWVAR 21
28457: PUSH
28458: LD_VAR 0 17
28462: ST_TO_ADDR
// if buildings then
28463: LD_VAR 0 18
28467: IFFALSE 29789
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28469: LD_ADDR_VAR 0 19
28473: PUSH
28474: LD_VAR 0 18
28478: PPUSH
28479: LD_INT 2
28481: PUSH
28482: LD_INT 30
28484: PUSH
28485: LD_INT 29
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 30
28494: PUSH
28495: LD_INT 30
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: LIST
28506: PPUSH
28507: CALL_OW 72
28511: ST_TO_ADDR
// if tmp then
28512: LD_VAR 0 19
28516: IFFALSE 28564
// for i in tmp do
28518: LD_ADDR_VAR 0 8
28522: PUSH
28523: LD_VAR 0 19
28527: PUSH
28528: FOR_IN
28529: IFFALSE 28562
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28531: LD_VAR 0 8
28535: PPUSH
28536: CALL_OW 250
28540: PPUSH
28541: LD_VAR 0 8
28545: PPUSH
28546: CALL_OW 251
28550: PPUSH
28551: LD_VAR 0 16
28555: PPUSH
28556: CALL_OW 441
28560: GO 28528
28562: POP
28563: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28564: LD_VAR 0 18
28568: PPUSH
28569: LD_INT 2
28571: PUSH
28572: LD_INT 30
28574: PUSH
28575: LD_INT 32
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 30
28584: PUSH
28585: LD_INT 33
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: LIST
28596: PPUSH
28597: CALL_OW 72
28601: IFFALSE 28689
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28603: LD_ADDR_VAR 0 8
28607: PUSH
28608: LD_VAR 0 18
28612: PPUSH
28613: LD_INT 2
28615: PUSH
28616: LD_INT 30
28618: PUSH
28619: LD_INT 32
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 30
28628: PUSH
28629: LD_INT 33
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: LIST
28640: PPUSH
28641: CALL_OW 72
28645: PUSH
28646: FOR_IN
28647: IFFALSE 28687
// begin if not GetBWeapon ( i ) then
28649: LD_VAR 0 8
28653: PPUSH
28654: CALL_OW 269
28658: NOT
28659: IFFALSE 28685
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28661: LD_VAR 0 8
28665: PPUSH
28666: LD_VAR 0 8
28670: PPUSH
28671: LD_VAR 0 2
28675: PPUSH
28676: CALL 29935 0 2
28680: PPUSH
28681: CALL_OW 431
// end ;
28685: GO 28646
28687: POP
28688: POP
// end ; for i = 1 to personel do
28689: LD_ADDR_VAR 0 8
28693: PUSH
28694: DOUBLE
28695: LD_INT 1
28697: DEC
28698: ST_TO_ADDR
28699: LD_VAR 0 6
28703: PUSH
28704: FOR_TO
28705: IFFALSE 29769
// begin if i > 4 then
28707: LD_VAR 0 8
28711: PUSH
28712: LD_INT 4
28714: GREATER
28715: IFFALSE 28719
// break ;
28717: GO 29769
// case i of 1 :
28719: LD_VAR 0 8
28723: PUSH
28724: LD_INT 1
28726: DOUBLE
28727: EQUAL
28728: IFTRUE 28732
28730: GO 28812
28732: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28733: LD_ADDR_VAR 0 12
28737: PUSH
28738: LD_VAR 0 18
28742: PPUSH
28743: LD_INT 22
28745: PUSH
28746: LD_VAR 0 16
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 58
28757: PUSH
28758: EMPTY
28759: LIST
28760: PUSH
28761: LD_INT 2
28763: PUSH
28764: LD_INT 30
28766: PUSH
28767: LD_INT 32
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 30
28776: PUSH
28777: LD_INT 4
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 30
28786: PUSH
28787: LD_INT 5
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: PPUSH
28805: CALL_OW 72
28809: ST_TO_ADDR
28810: GO 29034
28812: LD_INT 2
28814: DOUBLE
28815: EQUAL
28816: IFTRUE 28820
28818: GO 28882
28820: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28821: LD_ADDR_VAR 0 12
28825: PUSH
28826: LD_VAR 0 18
28830: PPUSH
28831: LD_INT 22
28833: PUSH
28834: LD_VAR 0 16
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 2
28845: PUSH
28846: LD_INT 30
28848: PUSH
28849: LD_INT 0
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 30
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: LIST
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PPUSH
28875: CALL_OW 72
28879: ST_TO_ADDR
28880: GO 29034
28882: LD_INT 3
28884: DOUBLE
28885: EQUAL
28886: IFTRUE 28890
28888: GO 28952
28890: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28891: LD_ADDR_VAR 0 12
28895: PUSH
28896: LD_VAR 0 18
28900: PPUSH
28901: LD_INT 22
28903: PUSH
28904: LD_VAR 0 16
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 2
28915: PUSH
28916: LD_INT 30
28918: PUSH
28919: LD_INT 2
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 30
28928: PUSH
28929: LD_INT 3
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: LIST
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PPUSH
28945: CALL_OW 72
28949: ST_TO_ADDR
28950: GO 29034
28952: LD_INT 4
28954: DOUBLE
28955: EQUAL
28956: IFTRUE 28960
28958: GO 29033
28960: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28961: LD_ADDR_VAR 0 12
28965: PUSH
28966: LD_VAR 0 18
28970: PPUSH
28971: LD_INT 22
28973: PUSH
28974: LD_VAR 0 16
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 2
28985: PUSH
28986: LD_INT 30
28988: PUSH
28989: LD_INT 6
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 30
28998: PUSH
28999: LD_INT 7
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 30
29008: PUSH
29009: LD_INT 8
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PPUSH
29026: CALL_OW 72
29030: ST_TO_ADDR
29031: GO 29034
29033: POP
// if i = 1 then
29034: LD_VAR 0 8
29038: PUSH
29039: LD_INT 1
29041: EQUAL
29042: IFFALSE 29153
// begin tmp := [ ] ;
29044: LD_ADDR_VAR 0 19
29048: PUSH
29049: EMPTY
29050: ST_TO_ADDR
// for j in f do
29051: LD_ADDR_VAR 0 9
29055: PUSH
29056: LD_VAR 0 12
29060: PUSH
29061: FOR_IN
29062: IFFALSE 29135
// if GetBType ( j ) = b_bunker then
29064: LD_VAR 0 9
29068: PPUSH
29069: CALL_OW 266
29073: PUSH
29074: LD_INT 32
29076: EQUAL
29077: IFFALSE 29104
// tmp := Insert ( tmp , 1 , j ) else
29079: LD_ADDR_VAR 0 19
29083: PUSH
29084: LD_VAR 0 19
29088: PPUSH
29089: LD_INT 1
29091: PPUSH
29092: LD_VAR 0 9
29096: PPUSH
29097: CALL_OW 2
29101: ST_TO_ADDR
29102: GO 29133
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29104: LD_ADDR_VAR 0 19
29108: PUSH
29109: LD_VAR 0 19
29113: PPUSH
29114: LD_VAR 0 19
29118: PUSH
29119: LD_INT 1
29121: PLUS
29122: PPUSH
29123: LD_VAR 0 9
29127: PPUSH
29128: CALL_OW 2
29132: ST_TO_ADDR
29133: GO 29061
29135: POP
29136: POP
// if tmp then
29137: LD_VAR 0 19
29141: IFFALSE 29153
// f := tmp ;
29143: LD_ADDR_VAR 0 12
29147: PUSH
29148: LD_VAR 0 19
29152: ST_TO_ADDR
// end ; x := personel [ i ] ;
29153: LD_ADDR_VAR 0 13
29157: PUSH
29158: LD_VAR 0 6
29162: PUSH
29163: LD_VAR 0 8
29167: ARRAY
29168: ST_TO_ADDR
// if x = - 1 then
29169: LD_VAR 0 13
29173: PUSH
29174: LD_INT 1
29176: NEG
29177: EQUAL
29178: IFFALSE 29387
// begin for j in f do
29180: LD_ADDR_VAR 0 9
29184: PUSH
29185: LD_VAR 0 12
29189: PUSH
29190: FOR_IN
29191: IFFALSE 29383
// repeat InitHc ;
29193: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29197: LD_VAR 0 9
29201: PPUSH
29202: CALL_OW 266
29206: PUSH
29207: LD_INT 5
29209: EQUAL
29210: IFFALSE 29280
// begin if UnitsInside ( j ) < 3 then
29212: LD_VAR 0 9
29216: PPUSH
29217: CALL_OW 313
29221: PUSH
29222: LD_INT 3
29224: LESS
29225: IFFALSE 29261
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29227: LD_INT 0
29229: PPUSH
29230: LD_INT 5
29232: PUSH
29233: LD_INT 8
29235: PUSH
29236: LD_INT 9
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: PUSH
29244: LD_VAR 0 17
29248: ARRAY
29249: PPUSH
29250: LD_VAR 0 4
29254: PPUSH
29255: CALL_OW 380
29259: GO 29278
// PrepareHuman ( false , i , skill ) ;
29261: LD_INT 0
29263: PPUSH
29264: LD_VAR 0 8
29268: PPUSH
29269: LD_VAR 0 4
29273: PPUSH
29274: CALL_OW 380
// end else
29278: GO 29297
// PrepareHuman ( false , i , skill ) ;
29280: LD_INT 0
29282: PPUSH
29283: LD_VAR 0 8
29287: PPUSH
29288: LD_VAR 0 4
29292: PPUSH
29293: CALL_OW 380
// un := CreateHuman ;
29297: LD_ADDR_VAR 0 14
29301: PUSH
29302: CALL_OW 44
29306: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29307: LD_ADDR_VAR 0 7
29311: PUSH
29312: LD_VAR 0 7
29316: PPUSH
29317: LD_INT 1
29319: PPUSH
29320: LD_VAR 0 14
29324: PPUSH
29325: CALL_OW 2
29329: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29330: LD_VAR 0 14
29334: PPUSH
29335: LD_VAR 0 9
29339: PPUSH
29340: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29344: LD_VAR 0 9
29348: PPUSH
29349: CALL_OW 313
29353: PUSH
29354: LD_INT 6
29356: EQUAL
29357: PUSH
29358: LD_VAR 0 9
29362: PPUSH
29363: CALL_OW 266
29367: PUSH
29368: LD_INT 32
29370: PUSH
29371: LD_INT 31
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: IN
29378: OR
29379: IFFALSE 29193
29381: GO 29190
29383: POP
29384: POP
// end else
29385: GO 29767
// for j = 1 to x do
29387: LD_ADDR_VAR 0 9
29391: PUSH
29392: DOUBLE
29393: LD_INT 1
29395: DEC
29396: ST_TO_ADDR
29397: LD_VAR 0 13
29401: PUSH
29402: FOR_TO
29403: IFFALSE 29765
// begin InitHc ;
29405: CALL_OW 19
// if not f then
29409: LD_VAR 0 12
29413: NOT
29414: IFFALSE 29503
// begin PrepareHuman ( false , i , skill ) ;
29416: LD_INT 0
29418: PPUSH
29419: LD_VAR 0 8
29423: PPUSH
29424: LD_VAR 0 4
29428: PPUSH
29429: CALL_OW 380
// un := CreateHuman ;
29433: LD_ADDR_VAR 0 14
29437: PUSH
29438: CALL_OW 44
29442: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29443: LD_ADDR_VAR 0 7
29447: PUSH
29448: LD_VAR 0 7
29452: PPUSH
29453: LD_INT 1
29455: PPUSH
29456: LD_VAR 0 14
29460: PPUSH
29461: CALL_OW 2
29465: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29466: LD_VAR 0 14
29470: PPUSH
29471: LD_VAR 0 1
29475: PPUSH
29476: CALL_OW 250
29480: PPUSH
29481: LD_VAR 0 1
29485: PPUSH
29486: CALL_OW 251
29490: PPUSH
29491: LD_INT 10
29493: PPUSH
29494: LD_INT 0
29496: PPUSH
29497: CALL_OW 50
// continue ;
29501: GO 29402
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29503: LD_VAR 0 12
29507: PUSH
29508: LD_INT 1
29510: ARRAY
29511: PPUSH
29512: CALL_OW 313
29516: PUSH
29517: LD_VAR 0 12
29521: PUSH
29522: LD_INT 1
29524: ARRAY
29525: PPUSH
29526: CALL_OW 266
29530: PUSH
29531: LD_INT 32
29533: PUSH
29534: LD_INT 31
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: IN
29541: AND
29542: PUSH
29543: LD_VAR 0 12
29547: PUSH
29548: LD_INT 1
29550: ARRAY
29551: PPUSH
29552: CALL_OW 313
29556: PUSH
29557: LD_INT 6
29559: EQUAL
29560: OR
29561: IFFALSE 29581
// f := Delete ( f , 1 ) ;
29563: LD_ADDR_VAR 0 12
29567: PUSH
29568: LD_VAR 0 12
29572: PPUSH
29573: LD_INT 1
29575: PPUSH
29576: CALL_OW 3
29580: ST_TO_ADDR
// if not f then
29581: LD_VAR 0 12
29585: NOT
29586: IFFALSE 29604
// begin x := x + 2 ;
29588: LD_ADDR_VAR 0 13
29592: PUSH
29593: LD_VAR 0 13
29597: PUSH
29598: LD_INT 2
29600: PLUS
29601: ST_TO_ADDR
// continue ;
29602: GO 29402
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29604: LD_VAR 0 12
29608: PUSH
29609: LD_INT 1
29611: ARRAY
29612: PPUSH
29613: CALL_OW 266
29617: PUSH
29618: LD_INT 5
29620: EQUAL
29621: IFFALSE 29695
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29623: LD_VAR 0 12
29627: PUSH
29628: LD_INT 1
29630: ARRAY
29631: PPUSH
29632: CALL_OW 313
29636: PUSH
29637: LD_INT 3
29639: LESS
29640: IFFALSE 29676
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29642: LD_INT 0
29644: PPUSH
29645: LD_INT 5
29647: PUSH
29648: LD_INT 8
29650: PUSH
29651: LD_INT 9
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: LIST
29658: PUSH
29659: LD_VAR 0 17
29663: ARRAY
29664: PPUSH
29665: LD_VAR 0 4
29669: PPUSH
29670: CALL_OW 380
29674: GO 29693
// PrepareHuman ( false , i , skill ) ;
29676: LD_INT 0
29678: PPUSH
29679: LD_VAR 0 8
29683: PPUSH
29684: LD_VAR 0 4
29688: PPUSH
29689: CALL_OW 380
// end else
29693: GO 29712
// PrepareHuman ( false , i , skill ) ;
29695: LD_INT 0
29697: PPUSH
29698: LD_VAR 0 8
29702: PPUSH
29703: LD_VAR 0 4
29707: PPUSH
29708: CALL_OW 380
// un := CreateHuman ;
29712: LD_ADDR_VAR 0 14
29716: PUSH
29717: CALL_OW 44
29721: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29722: LD_ADDR_VAR 0 7
29726: PUSH
29727: LD_VAR 0 7
29731: PPUSH
29732: LD_INT 1
29734: PPUSH
29735: LD_VAR 0 14
29739: PPUSH
29740: CALL_OW 2
29744: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29745: LD_VAR 0 14
29749: PPUSH
29750: LD_VAR 0 12
29754: PUSH
29755: LD_INT 1
29757: ARRAY
29758: PPUSH
29759: CALL_OW 52
// end ;
29763: GO 29402
29765: POP
29766: POP
// end ;
29767: GO 28704
29769: POP
29770: POP
// result := result ^ buildings ;
29771: LD_ADDR_VAR 0 7
29775: PUSH
29776: LD_VAR 0 7
29780: PUSH
29781: LD_VAR 0 18
29785: ADD
29786: ST_TO_ADDR
// end else
29787: GO 29930
// begin for i = 1 to personel do
29789: LD_ADDR_VAR 0 8
29793: PUSH
29794: DOUBLE
29795: LD_INT 1
29797: DEC
29798: ST_TO_ADDR
29799: LD_VAR 0 6
29803: PUSH
29804: FOR_TO
29805: IFFALSE 29928
// begin if i > 4 then
29807: LD_VAR 0 8
29811: PUSH
29812: LD_INT 4
29814: GREATER
29815: IFFALSE 29819
// break ;
29817: GO 29928
// x := personel [ i ] ;
29819: LD_ADDR_VAR 0 13
29823: PUSH
29824: LD_VAR 0 6
29828: PUSH
29829: LD_VAR 0 8
29833: ARRAY
29834: ST_TO_ADDR
// if x = - 1 then
29835: LD_VAR 0 13
29839: PUSH
29840: LD_INT 1
29842: NEG
29843: EQUAL
29844: IFFALSE 29848
// continue ;
29846: GO 29804
// PrepareHuman ( false , i , skill ) ;
29848: LD_INT 0
29850: PPUSH
29851: LD_VAR 0 8
29855: PPUSH
29856: LD_VAR 0 4
29860: PPUSH
29861: CALL_OW 380
// un := CreateHuman ;
29865: LD_ADDR_VAR 0 14
29869: PUSH
29870: CALL_OW 44
29874: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29875: LD_VAR 0 14
29879: PPUSH
29880: LD_VAR 0 1
29884: PPUSH
29885: CALL_OW 250
29889: PPUSH
29890: LD_VAR 0 1
29894: PPUSH
29895: CALL_OW 251
29899: PPUSH
29900: LD_INT 10
29902: PPUSH
29903: LD_INT 0
29905: PPUSH
29906: CALL_OW 50
// result := result ^ un ;
29910: LD_ADDR_VAR 0 7
29914: PUSH
29915: LD_VAR 0 7
29919: PUSH
29920: LD_VAR 0 14
29924: ADD
29925: ST_TO_ADDR
// end ;
29926: GO 29804
29928: POP
29929: POP
// end ; end ;
29930: LD_VAR 0 7
29934: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29935: LD_INT 0
29937: PPUSH
29938: PPUSH
29939: PPUSH
29940: PPUSH
29941: PPUSH
29942: PPUSH
29943: PPUSH
29944: PPUSH
29945: PPUSH
29946: PPUSH
29947: PPUSH
29948: PPUSH
29949: PPUSH
29950: PPUSH
29951: PPUSH
29952: PPUSH
// result := false ;
29953: LD_ADDR_VAR 0 3
29957: PUSH
29958: LD_INT 0
29960: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29961: LD_VAR 0 1
29965: NOT
29966: PUSH
29967: LD_VAR 0 1
29971: PPUSH
29972: CALL_OW 266
29976: PUSH
29977: LD_INT 32
29979: PUSH
29980: LD_INT 33
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: IN
29987: NOT
29988: OR
29989: IFFALSE 29993
// exit ;
29991: GO 31129
// nat := GetNation ( tower ) ;
29993: LD_ADDR_VAR 0 12
29997: PUSH
29998: LD_VAR 0 1
30002: PPUSH
30003: CALL_OW 248
30007: ST_TO_ADDR
// side := GetSide ( tower ) ;
30008: LD_ADDR_VAR 0 16
30012: PUSH
30013: LD_VAR 0 1
30017: PPUSH
30018: CALL_OW 255
30022: ST_TO_ADDR
// x := GetX ( tower ) ;
30023: LD_ADDR_VAR 0 10
30027: PUSH
30028: LD_VAR 0 1
30032: PPUSH
30033: CALL_OW 250
30037: ST_TO_ADDR
// y := GetY ( tower ) ;
30038: LD_ADDR_VAR 0 11
30042: PUSH
30043: LD_VAR 0 1
30047: PPUSH
30048: CALL_OW 251
30052: ST_TO_ADDR
// if not x or not y then
30053: LD_VAR 0 10
30057: NOT
30058: PUSH
30059: LD_VAR 0 11
30063: NOT
30064: OR
30065: IFFALSE 30069
// exit ;
30067: GO 31129
// weapon := 0 ;
30069: LD_ADDR_VAR 0 18
30073: PUSH
30074: LD_INT 0
30076: ST_TO_ADDR
// fac_list := [ ] ;
30077: LD_ADDR_VAR 0 17
30081: PUSH
30082: EMPTY
30083: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
30084: LD_ADDR_VAR 0 6
30088: PUSH
30089: LD_VAR 0 1
30093: PPUSH
30094: CALL_OW 274
30098: PPUSH
30099: LD_VAR 0 2
30103: PPUSH
30104: CALL 27707 0 2
30108: PPUSH
30109: LD_INT 30
30111: PUSH
30112: LD_INT 3
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PPUSH
30119: CALL_OW 72
30123: ST_TO_ADDR
// if not factories then
30124: LD_VAR 0 6
30128: NOT
30129: IFFALSE 30133
// exit ;
30131: GO 31129
// for i in factories do
30133: LD_ADDR_VAR 0 8
30137: PUSH
30138: LD_VAR 0 6
30142: PUSH
30143: FOR_IN
30144: IFFALSE 30169
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30146: LD_ADDR_VAR 0 17
30150: PUSH
30151: LD_VAR 0 17
30155: PUSH
30156: LD_VAR 0 8
30160: PPUSH
30161: CALL_OW 478
30165: UNION
30166: ST_TO_ADDR
30167: GO 30143
30169: POP
30170: POP
// if not fac_list then
30171: LD_VAR 0 17
30175: NOT
30176: IFFALSE 30180
// exit ;
30178: GO 31129
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30180: LD_ADDR_VAR 0 5
30184: PUSH
30185: LD_INT 4
30187: PUSH
30188: LD_INT 5
30190: PUSH
30191: LD_INT 9
30193: PUSH
30194: LD_INT 10
30196: PUSH
30197: LD_INT 6
30199: PUSH
30200: LD_INT 7
30202: PUSH
30203: LD_INT 11
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 27
30217: PUSH
30218: LD_INT 28
30220: PUSH
30221: LD_INT 26
30223: PUSH
30224: LD_INT 30
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 43
30235: PUSH
30236: LD_INT 44
30238: PUSH
30239: LD_INT 46
30241: PUSH
30242: LD_INT 45
30244: PUSH
30245: LD_INT 47
30247: PUSH
30248: LD_INT 49
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: LIST
30263: PUSH
30264: LD_VAR 0 12
30268: ARRAY
30269: ST_TO_ADDR
// for i in list do
30270: LD_ADDR_VAR 0 8
30274: PUSH
30275: LD_VAR 0 5
30279: PUSH
30280: FOR_IN
30281: IFFALSE 30314
// if not i in fac_list then
30283: LD_VAR 0 8
30287: PUSH
30288: LD_VAR 0 17
30292: IN
30293: NOT
30294: IFFALSE 30312
// list := list diff i ;
30296: LD_ADDR_VAR 0 5
30300: PUSH
30301: LD_VAR 0 5
30305: PUSH
30306: LD_VAR 0 8
30310: DIFF
30311: ST_TO_ADDR
30312: GO 30280
30314: POP
30315: POP
// if not list then
30316: LD_VAR 0 5
30320: NOT
30321: IFFALSE 30325
// exit ;
30323: GO 31129
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30325: LD_VAR 0 12
30329: PUSH
30330: LD_INT 3
30332: EQUAL
30333: PUSH
30334: LD_INT 49
30336: PUSH
30337: LD_VAR 0 5
30341: IN
30342: AND
30343: PUSH
30344: LD_INT 31
30346: PPUSH
30347: LD_VAR 0 16
30351: PPUSH
30352: CALL_OW 321
30356: PUSH
30357: LD_INT 2
30359: EQUAL
30360: AND
30361: IFFALSE 30421
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30363: LD_INT 22
30365: PUSH
30366: LD_VAR 0 16
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 35
30377: PUSH
30378: LD_INT 49
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 91
30387: PUSH
30388: LD_VAR 0 1
30392: PUSH
30393: LD_INT 10
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: LIST
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: LIST
30405: PPUSH
30406: CALL_OW 69
30410: NOT
30411: IFFALSE 30421
// weapon := ru_time_lapser ;
30413: LD_ADDR_VAR 0 18
30417: PUSH
30418: LD_INT 49
30420: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30421: LD_VAR 0 12
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: LD_INT 2
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: IN
30436: PUSH
30437: LD_INT 11
30439: PUSH
30440: LD_VAR 0 5
30444: IN
30445: PUSH
30446: LD_INT 30
30448: PUSH
30449: LD_VAR 0 5
30453: IN
30454: OR
30455: AND
30456: PUSH
30457: LD_INT 6
30459: PPUSH
30460: LD_VAR 0 16
30464: PPUSH
30465: CALL_OW 321
30469: PUSH
30470: LD_INT 2
30472: EQUAL
30473: AND
30474: IFFALSE 30639
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30476: LD_INT 22
30478: PUSH
30479: LD_VAR 0 16
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 2
30490: PUSH
30491: LD_INT 35
30493: PUSH
30494: LD_INT 11
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 35
30503: PUSH
30504: LD_INT 30
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 91
30518: PUSH
30519: LD_VAR 0 1
30523: PUSH
30524: LD_INT 18
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: LIST
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: LIST
30536: PPUSH
30537: CALL_OW 69
30541: NOT
30542: PUSH
30543: LD_INT 22
30545: PUSH
30546: LD_VAR 0 16
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 2
30557: PUSH
30558: LD_INT 30
30560: PUSH
30561: LD_INT 32
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 30
30570: PUSH
30571: LD_INT 33
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 91
30585: PUSH
30586: LD_VAR 0 1
30590: PUSH
30591: LD_INT 12
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: LIST
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: LIST
30603: PUSH
30604: EMPTY
30605: LIST
30606: PPUSH
30607: CALL_OW 69
30611: PUSH
30612: LD_INT 2
30614: GREATER
30615: AND
30616: IFFALSE 30639
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30618: LD_ADDR_VAR 0 18
30622: PUSH
30623: LD_INT 11
30625: PUSH
30626: LD_INT 30
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_VAR 0 12
30637: ARRAY
30638: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30639: LD_VAR 0 18
30643: NOT
30644: PUSH
30645: LD_INT 40
30647: PPUSH
30648: LD_VAR 0 16
30652: PPUSH
30653: CALL_OW 321
30657: PUSH
30658: LD_INT 2
30660: EQUAL
30661: AND
30662: PUSH
30663: LD_INT 7
30665: PUSH
30666: LD_VAR 0 5
30670: IN
30671: PUSH
30672: LD_INT 28
30674: PUSH
30675: LD_VAR 0 5
30679: IN
30680: OR
30681: PUSH
30682: LD_INT 45
30684: PUSH
30685: LD_VAR 0 5
30689: IN
30690: OR
30691: AND
30692: IFFALSE 30946
// begin hex := GetHexInfo ( x , y ) ;
30694: LD_ADDR_VAR 0 4
30698: PUSH
30699: LD_VAR 0 10
30703: PPUSH
30704: LD_VAR 0 11
30708: PPUSH
30709: CALL_OW 546
30713: ST_TO_ADDR
// if hex [ 1 ] then
30714: LD_VAR 0 4
30718: PUSH
30719: LD_INT 1
30721: ARRAY
30722: IFFALSE 30726
// exit ;
30724: GO 31129
// height := hex [ 2 ] ;
30726: LD_ADDR_VAR 0 15
30730: PUSH
30731: LD_VAR 0 4
30735: PUSH
30736: LD_INT 2
30738: ARRAY
30739: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30740: LD_ADDR_VAR 0 14
30744: PUSH
30745: LD_INT 0
30747: PUSH
30748: LD_INT 2
30750: PUSH
30751: LD_INT 3
30753: PUSH
30754: LD_INT 5
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: ST_TO_ADDR
// for i in tmp do
30763: LD_ADDR_VAR 0 8
30767: PUSH
30768: LD_VAR 0 14
30772: PUSH
30773: FOR_IN
30774: IFFALSE 30944
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30776: LD_ADDR_VAR 0 9
30780: PUSH
30781: LD_VAR 0 10
30785: PPUSH
30786: LD_VAR 0 8
30790: PPUSH
30791: LD_INT 5
30793: PPUSH
30794: CALL_OW 272
30798: PUSH
30799: LD_VAR 0 11
30803: PPUSH
30804: LD_VAR 0 8
30808: PPUSH
30809: LD_INT 5
30811: PPUSH
30812: CALL_OW 273
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30821: LD_VAR 0 9
30825: PUSH
30826: LD_INT 1
30828: ARRAY
30829: PPUSH
30830: LD_VAR 0 9
30834: PUSH
30835: LD_INT 2
30837: ARRAY
30838: PPUSH
30839: CALL_OW 488
30843: IFFALSE 30942
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30845: LD_ADDR_VAR 0 4
30849: PUSH
30850: LD_VAR 0 9
30854: PUSH
30855: LD_INT 1
30857: ARRAY
30858: PPUSH
30859: LD_VAR 0 9
30863: PUSH
30864: LD_INT 2
30866: ARRAY
30867: PPUSH
30868: CALL_OW 546
30872: ST_TO_ADDR
// if hex [ 1 ] then
30873: LD_VAR 0 4
30877: PUSH
30878: LD_INT 1
30880: ARRAY
30881: IFFALSE 30885
// continue ;
30883: GO 30773
// h := hex [ 2 ] ;
30885: LD_ADDR_VAR 0 13
30889: PUSH
30890: LD_VAR 0 4
30894: PUSH
30895: LD_INT 2
30897: ARRAY
30898: ST_TO_ADDR
// if h + 7 < height then
30899: LD_VAR 0 13
30903: PUSH
30904: LD_INT 7
30906: PLUS
30907: PUSH
30908: LD_VAR 0 15
30912: LESS
30913: IFFALSE 30942
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30915: LD_ADDR_VAR 0 18
30919: PUSH
30920: LD_INT 7
30922: PUSH
30923: LD_INT 28
30925: PUSH
30926: LD_INT 45
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: LIST
30933: PUSH
30934: LD_VAR 0 12
30938: ARRAY
30939: ST_TO_ADDR
// break ;
30940: GO 30944
// end ; end ; end ;
30942: GO 30773
30944: POP
30945: POP
// end ; if not weapon then
30946: LD_VAR 0 18
30950: NOT
30951: IFFALSE 31011
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30953: LD_ADDR_VAR 0 5
30957: PUSH
30958: LD_VAR 0 5
30962: PUSH
30963: LD_INT 11
30965: PUSH
30966: LD_INT 30
30968: PUSH
30969: LD_INT 49
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: LIST
30976: DIFF
30977: ST_TO_ADDR
// if not list then
30978: LD_VAR 0 5
30982: NOT
30983: IFFALSE 30987
// exit ;
30985: GO 31129
// weapon := list [ rand ( 1 , list ) ] ;
30987: LD_ADDR_VAR 0 18
30991: PUSH
30992: LD_VAR 0 5
30996: PUSH
30997: LD_INT 1
30999: PPUSH
31000: LD_VAR 0 5
31004: PPUSH
31005: CALL_OW 12
31009: ARRAY
31010: ST_TO_ADDR
// end ; if weapon then
31011: LD_VAR 0 18
31015: IFFALSE 31129
// begin tmp := CostOfWeapon ( weapon ) ;
31017: LD_ADDR_VAR 0 14
31021: PUSH
31022: LD_VAR 0 18
31026: PPUSH
31027: CALL_OW 451
31031: ST_TO_ADDR
// j := GetBase ( tower ) ;
31032: LD_ADDR_VAR 0 9
31036: PUSH
31037: LD_VAR 0 1
31041: PPUSH
31042: CALL_OW 274
31046: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31047: LD_VAR 0 9
31051: PPUSH
31052: LD_INT 1
31054: PPUSH
31055: CALL_OW 275
31059: PUSH
31060: LD_VAR 0 14
31064: PUSH
31065: LD_INT 1
31067: ARRAY
31068: GREATEREQUAL
31069: PUSH
31070: LD_VAR 0 9
31074: PPUSH
31075: LD_INT 2
31077: PPUSH
31078: CALL_OW 275
31082: PUSH
31083: LD_VAR 0 14
31087: PUSH
31088: LD_INT 2
31090: ARRAY
31091: GREATEREQUAL
31092: AND
31093: PUSH
31094: LD_VAR 0 9
31098: PPUSH
31099: LD_INT 3
31101: PPUSH
31102: CALL_OW 275
31106: PUSH
31107: LD_VAR 0 14
31111: PUSH
31112: LD_INT 3
31114: ARRAY
31115: GREATEREQUAL
31116: AND
31117: IFFALSE 31129
// result := weapon ;
31119: LD_ADDR_VAR 0 3
31123: PUSH
31124: LD_VAR 0 18
31128: ST_TO_ADDR
// end ; end ;
31129: LD_VAR 0 3
31133: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31134: LD_INT 0
31136: PPUSH
31137: PPUSH
// result := true ;
31138: LD_ADDR_VAR 0 3
31142: PUSH
31143: LD_INT 1
31145: ST_TO_ADDR
// if array1 = array2 then
31146: LD_VAR 0 1
31150: PUSH
31151: LD_VAR 0 2
31155: EQUAL
31156: IFFALSE 31216
// begin for i = 1 to array1 do
31158: LD_ADDR_VAR 0 4
31162: PUSH
31163: DOUBLE
31164: LD_INT 1
31166: DEC
31167: ST_TO_ADDR
31168: LD_VAR 0 1
31172: PUSH
31173: FOR_TO
31174: IFFALSE 31212
// if array1 [ i ] <> array2 [ i ] then
31176: LD_VAR 0 1
31180: PUSH
31181: LD_VAR 0 4
31185: ARRAY
31186: PUSH
31187: LD_VAR 0 2
31191: PUSH
31192: LD_VAR 0 4
31196: ARRAY
31197: NONEQUAL
31198: IFFALSE 31210
// begin result := false ;
31200: LD_ADDR_VAR 0 3
31204: PUSH
31205: LD_INT 0
31207: ST_TO_ADDR
// break ;
31208: GO 31212
// end ;
31210: GO 31173
31212: POP
31213: POP
// end else
31214: GO 31224
// result := false ;
31216: LD_ADDR_VAR 0 3
31220: PUSH
31221: LD_INT 0
31223: ST_TO_ADDR
// end ;
31224: LD_VAR 0 3
31228: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31229: LD_INT 0
31231: PPUSH
31232: PPUSH
31233: PPUSH
// pom := GetBase ( fac ) ;
31234: LD_ADDR_VAR 0 5
31238: PUSH
31239: LD_VAR 0 1
31243: PPUSH
31244: CALL_OW 274
31248: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31249: LD_ADDR_VAR 0 4
31253: PUSH
31254: LD_VAR 0 2
31258: PUSH
31259: LD_INT 1
31261: ARRAY
31262: PPUSH
31263: LD_VAR 0 2
31267: PUSH
31268: LD_INT 2
31270: ARRAY
31271: PPUSH
31272: LD_VAR 0 2
31276: PUSH
31277: LD_INT 3
31279: ARRAY
31280: PPUSH
31281: LD_VAR 0 2
31285: PUSH
31286: LD_INT 4
31288: ARRAY
31289: PPUSH
31290: CALL_OW 449
31294: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31295: LD_ADDR_VAR 0 3
31299: PUSH
31300: LD_VAR 0 5
31304: PPUSH
31305: LD_INT 1
31307: PPUSH
31308: CALL_OW 275
31312: PUSH
31313: LD_VAR 0 4
31317: PUSH
31318: LD_INT 1
31320: ARRAY
31321: GREATEREQUAL
31322: PUSH
31323: LD_VAR 0 5
31327: PPUSH
31328: LD_INT 2
31330: PPUSH
31331: CALL_OW 275
31335: PUSH
31336: LD_VAR 0 4
31340: PUSH
31341: LD_INT 2
31343: ARRAY
31344: GREATEREQUAL
31345: AND
31346: PUSH
31347: LD_VAR 0 5
31351: PPUSH
31352: LD_INT 3
31354: PPUSH
31355: CALL_OW 275
31359: PUSH
31360: LD_VAR 0 4
31364: PUSH
31365: LD_INT 3
31367: ARRAY
31368: GREATEREQUAL
31369: AND
31370: ST_TO_ADDR
// end ;
31371: LD_VAR 0 3
31375: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31376: LD_INT 0
31378: PPUSH
31379: PPUSH
31380: PPUSH
31381: PPUSH
// pom := GetBase ( building ) ;
31382: LD_ADDR_VAR 0 3
31386: PUSH
31387: LD_VAR 0 1
31391: PPUSH
31392: CALL_OW 274
31396: ST_TO_ADDR
// if not pom then
31397: LD_VAR 0 3
31401: NOT
31402: IFFALSE 31406
// exit ;
31404: GO 31576
// btype := GetBType ( building ) ;
31406: LD_ADDR_VAR 0 5
31410: PUSH
31411: LD_VAR 0 1
31415: PPUSH
31416: CALL_OW 266
31420: ST_TO_ADDR
// if btype = b_armoury then
31421: LD_VAR 0 5
31425: PUSH
31426: LD_INT 4
31428: EQUAL
31429: IFFALSE 31439
// btype := b_barracks ;
31431: LD_ADDR_VAR 0 5
31435: PUSH
31436: LD_INT 5
31438: ST_TO_ADDR
// if btype = b_depot then
31439: LD_VAR 0 5
31443: PUSH
31444: LD_INT 0
31446: EQUAL
31447: IFFALSE 31457
// btype := b_warehouse ;
31449: LD_ADDR_VAR 0 5
31453: PUSH
31454: LD_INT 1
31456: ST_TO_ADDR
// if btype = b_workshop then
31457: LD_VAR 0 5
31461: PUSH
31462: LD_INT 2
31464: EQUAL
31465: IFFALSE 31475
// btype := b_factory ;
31467: LD_ADDR_VAR 0 5
31471: PUSH
31472: LD_INT 3
31474: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31475: LD_ADDR_VAR 0 4
31479: PUSH
31480: LD_VAR 0 5
31484: PPUSH
31485: LD_VAR 0 1
31489: PPUSH
31490: CALL_OW 248
31494: PPUSH
31495: CALL_OW 450
31499: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31500: LD_ADDR_VAR 0 2
31504: PUSH
31505: LD_VAR 0 3
31509: PPUSH
31510: LD_INT 1
31512: PPUSH
31513: CALL_OW 275
31517: PUSH
31518: LD_VAR 0 4
31522: PUSH
31523: LD_INT 1
31525: ARRAY
31526: GREATEREQUAL
31527: PUSH
31528: LD_VAR 0 3
31532: PPUSH
31533: LD_INT 2
31535: PPUSH
31536: CALL_OW 275
31540: PUSH
31541: LD_VAR 0 4
31545: PUSH
31546: LD_INT 2
31548: ARRAY
31549: GREATEREQUAL
31550: AND
31551: PUSH
31552: LD_VAR 0 3
31556: PPUSH
31557: LD_INT 3
31559: PPUSH
31560: CALL_OW 275
31564: PUSH
31565: LD_VAR 0 4
31569: PUSH
31570: LD_INT 3
31572: ARRAY
31573: GREATEREQUAL
31574: AND
31575: ST_TO_ADDR
// end ;
31576: LD_VAR 0 2
31580: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31581: LD_INT 0
31583: PPUSH
31584: PPUSH
31585: PPUSH
// pom := GetBase ( building ) ;
31586: LD_ADDR_VAR 0 4
31590: PUSH
31591: LD_VAR 0 1
31595: PPUSH
31596: CALL_OW 274
31600: ST_TO_ADDR
// if not pom then
31601: LD_VAR 0 4
31605: NOT
31606: IFFALSE 31610
// exit ;
31608: GO 31711
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31610: LD_ADDR_VAR 0 5
31614: PUSH
31615: LD_VAR 0 2
31619: PPUSH
31620: LD_VAR 0 1
31624: PPUSH
31625: CALL_OW 248
31629: PPUSH
31630: CALL_OW 450
31634: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31635: LD_ADDR_VAR 0 3
31639: PUSH
31640: LD_VAR 0 4
31644: PPUSH
31645: LD_INT 1
31647: PPUSH
31648: CALL_OW 275
31652: PUSH
31653: LD_VAR 0 5
31657: PUSH
31658: LD_INT 1
31660: ARRAY
31661: GREATEREQUAL
31662: PUSH
31663: LD_VAR 0 4
31667: PPUSH
31668: LD_INT 2
31670: PPUSH
31671: CALL_OW 275
31675: PUSH
31676: LD_VAR 0 5
31680: PUSH
31681: LD_INT 2
31683: ARRAY
31684: GREATEREQUAL
31685: AND
31686: PUSH
31687: LD_VAR 0 4
31691: PPUSH
31692: LD_INT 3
31694: PPUSH
31695: CALL_OW 275
31699: PUSH
31700: LD_VAR 0 5
31704: PUSH
31705: LD_INT 3
31707: ARRAY
31708: GREATEREQUAL
31709: AND
31710: ST_TO_ADDR
// end ;
31711: LD_VAR 0 3
31715: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
31716: LD_INT 0
31718: PPUSH
31719: PPUSH
31720: PPUSH
31721: PPUSH
31722: PPUSH
31723: PPUSH
31724: PPUSH
31725: PPUSH
31726: PPUSH
31727: PPUSH
// result := false ;
31728: LD_ADDR_VAR 0 6
31732: PUSH
31733: LD_INT 0
31735: ST_TO_ADDR
// if not base or not btype or not x or not y then
31736: LD_VAR 0 1
31740: NOT
31741: PUSH
31742: LD_VAR 0 2
31746: NOT
31747: OR
31748: PUSH
31749: LD_VAR 0 3
31753: NOT
31754: OR
31755: PUSH
31756: LD_VAR 0 4
31760: NOT
31761: OR
31762: IFFALSE 31766
// exit ;
31764: GO 32375
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
31766: LD_ADDR_VAR 0 12
31770: PUSH
31771: LD_VAR 0 2
31775: PPUSH
31776: LD_VAR 0 3
31780: PPUSH
31781: LD_VAR 0 4
31785: PPUSH
31786: LD_VAR 0 5
31790: PPUSH
31791: LD_VAR 0 1
31795: PUSH
31796: LD_INT 1
31798: ARRAY
31799: PPUSH
31800: CALL_OW 248
31804: PPUSH
31805: LD_INT 0
31807: PPUSH
31808: CALL 33212 0 6
31812: ST_TO_ADDR
// if not hexes then
31813: LD_VAR 0 12
31817: NOT
31818: IFFALSE 31822
// exit ;
31820: GO 32375
// for i = 1 to hexes do
31822: LD_ADDR_VAR 0 7
31826: PUSH
31827: DOUBLE
31828: LD_INT 1
31830: DEC
31831: ST_TO_ADDR
31832: LD_VAR 0 12
31836: PUSH
31837: FOR_TO
31838: IFFALSE 32373
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31840: LD_ADDR_VAR 0 11
31844: PUSH
31845: LD_VAR 0 12
31849: PUSH
31850: LD_VAR 0 7
31854: ARRAY
31855: PUSH
31856: LD_INT 1
31858: ARRAY
31859: PPUSH
31860: LD_VAR 0 12
31864: PUSH
31865: LD_VAR 0 7
31869: ARRAY
31870: PUSH
31871: LD_INT 2
31873: ARRAY
31874: PPUSH
31875: CALL_OW 428
31879: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31880: LD_VAR 0 12
31884: PUSH
31885: LD_VAR 0 7
31889: ARRAY
31890: PUSH
31891: LD_INT 1
31893: ARRAY
31894: PPUSH
31895: LD_VAR 0 12
31899: PUSH
31900: LD_VAR 0 7
31904: ARRAY
31905: PUSH
31906: LD_INT 2
31908: ARRAY
31909: PPUSH
31910: CALL_OW 351
31914: PUSH
31915: LD_VAR 0 12
31919: PUSH
31920: LD_VAR 0 7
31924: ARRAY
31925: PUSH
31926: LD_INT 1
31928: ARRAY
31929: PPUSH
31930: LD_VAR 0 12
31934: PUSH
31935: LD_VAR 0 7
31939: ARRAY
31940: PUSH
31941: LD_INT 2
31943: ARRAY
31944: PPUSH
31945: CALL_OW 488
31949: NOT
31950: OR
31951: PUSH
31952: LD_VAR 0 11
31956: PPUSH
31957: CALL_OW 247
31961: PUSH
31962: LD_INT 3
31964: EQUAL
31965: OR
31966: IFFALSE 31972
// exit ;
31968: POP
31969: POP
31970: GO 32375
// if not tmp or not tmp in base then
31972: LD_VAR 0 11
31976: NOT
31977: PUSH
31978: LD_VAR 0 11
31982: PUSH
31983: LD_VAR 0 1
31987: IN
31988: NOT
31989: OR
31990: IFFALSE 31994
// continue ;
31992: GO 31837
// result := true ;
31994: LD_ADDR_VAR 0 6
31998: PUSH
31999: LD_INT 1
32001: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32002: LD_ADDR_VAR 0 15
32006: PUSH
32007: LD_VAR 0 1
32011: PPUSH
32012: LD_INT 22
32014: PUSH
32015: LD_VAR 0 11
32019: PPUSH
32020: CALL_OW 255
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 2
32031: PUSH
32032: LD_INT 30
32034: PUSH
32035: LD_INT 0
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 30
32044: PUSH
32045: LD_INT 1
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: LIST
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PPUSH
32061: CALL_OW 72
32065: ST_TO_ADDR
// if dep then
32066: LD_VAR 0 15
32070: IFFALSE 32206
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32072: LD_ADDR_VAR 0 14
32076: PUSH
32077: LD_VAR 0 15
32081: PUSH
32082: LD_INT 1
32084: ARRAY
32085: PPUSH
32086: CALL_OW 250
32090: PPUSH
32091: LD_VAR 0 15
32095: PUSH
32096: LD_INT 1
32098: ARRAY
32099: PPUSH
32100: CALL_OW 254
32104: PPUSH
32105: LD_INT 5
32107: PPUSH
32108: CALL_OW 272
32112: PUSH
32113: LD_VAR 0 15
32117: PUSH
32118: LD_INT 1
32120: ARRAY
32121: PPUSH
32122: CALL_OW 251
32126: PPUSH
32127: LD_VAR 0 15
32131: PUSH
32132: LD_INT 1
32134: ARRAY
32135: PPUSH
32136: CALL_OW 254
32140: PPUSH
32141: LD_INT 5
32143: PPUSH
32144: CALL_OW 273
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32153: LD_VAR 0 14
32157: PUSH
32158: LD_INT 1
32160: ARRAY
32161: PPUSH
32162: LD_VAR 0 14
32166: PUSH
32167: LD_INT 2
32169: ARRAY
32170: PPUSH
32171: CALL_OW 488
32175: IFFALSE 32206
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32177: LD_VAR 0 11
32181: PPUSH
32182: LD_VAR 0 14
32186: PUSH
32187: LD_INT 1
32189: ARRAY
32190: PPUSH
32191: LD_VAR 0 14
32195: PUSH
32196: LD_INT 2
32198: ARRAY
32199: PPUSH
32200: CALL_OW 111
// continue ;
32204: GO 31837
// end ; end ; r := GetDir ( tmp ) ;
32206: LD_ADDR_VAR 0 13
32210: PUSH
32211: LD_VAR 0 11
32215: PPUSH
32216: CALL_OW 254
32220: ST_TO_ADDR
// if r = 5 then
32221: LD_VAR 0 13
32225: PUSH
32226: LD_INT 5
32228: EQUAL
32229: IFFALSE 32239
// r := 0 ;
32231: LD_ADDR_VAR 0 13
32235: PUSH
32236: LD_INT 0
32238: ST_TO_ADDR
// for j = r to 5 do
32239: LD_ADDR_VAR 0 8
32243: PUSH
32244: DOUBLE
32245: LD_VAR 0 13
32249: DEC
32250: ST_TO_ADDR
32251: LD_INT 5
32253: PUSH
32254: FOR_TO
32255: IFFALSE 32369
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32257: LD_ADDR_VAR 0 9
32261: PUSH
32262: LD_VAR 0 11
32266: PPUSH
32267: CALL_OW 250
32271: PPUSH
32272: LD_VAR 0 8
32276: PPUSH
32277: LD_INT 2
32279: PPUSH
32280: CALL_OW 272
32284: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32285: LD_ADDR_VAR 0 10
32289: PUSH
32290: LD_VAR 0 11
32294: PPUSH
32295: CALL_OW 251
32299: PPUSH
32300: LD_VAR 0 8
32304: PPUSH
32305: LD_INT 2
32307: PPUSH
32308: CALL_OW 273
32312: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32313: LD_VAR 0 9
32317: PPUSH
32318: LD_VAR 0 10
32322: PPUSH
32323: CALL_OW 488
32327: PUSH
32328: LD_VAR 0 9
32332: PPUSH
32333: LD_VAR 0 10
32337: PPUSH
32338: CALL_OW 428
32342: NOT
32343: AND
32344: IFFALSE 32367
// begin ComMoveXY ( tmp , _x , _y ) ;
32346: LD_VAR 0 11
32350: PPUSH
32351: LD_VAR 0 9
32355: PPUSH
32356: LD_VAR 0 10
32360: PPUSH
32361: CALL_OW 111
// break ;
32365: GO 32369
// end ; end ;
32367: GO 32254
32369: POP
32370: POP
// end ;
32371: GO 31837
32373: POP
32374: POP
// end ;
32375: LD_VAR 0 6
32379: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
32380: LD_INT 0
32382: PPUSH
32383: PPUSH
32384: PPUSH
32385: PPUSH
32386: PPUSH
32387: PPUSH
32388: PPUSH
32389: PPUSH
32390: PPUSH
32391: PPUSH
// result := false ;
32392: LD_ADDR_VAR 0 6
32396: PUSH
32397: LD_INT 0
32399: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32400: LD_VAR 0 1
32404: NOT
32405: PUSH
32406: LD_VAR 0 1
32410: PPUSH
32411: CALL_OW 266
32415: PUSH
32416: LD_INT 0
32418: PUSH
32419: LD_INT 1
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: IN
32426: NOT
32427: OR
32428: PUSH
32429: LD_VAR 0 2
32433: NOT
32434: OR
32435: PUSH
32436: LD_VAR 0 5
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: LD_INT 1
32446: PUSH
32447: LD_INT 2
32449: PUSH
32450: LD_INT 3
32452: PUSH
32453: LD_INT 4
32455: PUSH
32456: LD_INT 5
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: IN
32467: NOT
32468: OR
32469: PUSH
32470: LD_VAR 0 3
32474: PPUSH
32475: LD_VAR 0 4
32479: PPUSH
32480: CALL_OW 488
32484: NOT
32485: OR
32486: IFFALSE 32490
// exit ;
32488: GO 33207
// pom := GetBase ( depot ) ;
32490: LD_ADDR_VAR 0 10
32494: PUSH
32495: LD_VAR 0 1
32499: PPUSH
32500: CALL_OW 274
32504: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32505: LD_ADDR_VAR 0 11
32509: PUSH
32510: LD_VAR 0 2
32514: PPUSH
32515: LD_VAR 0 1
32519: PPUSH
32520: CALL_OW 248
32524: PPUSH
32525: CALL_OW 450
32529: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32530: LD_VAR 0 10
32534: PPUSH
32535: LD_INT 1
32537: PPUSH
32538: CALL_OW 275
32542: PUSH
32543: LD_VAR 0 11
32547: PUSH
32548: LD_INT 1
32550: ARRAY
32551: GREATEREQUAL
32552: PUSH
32553: LD_VAR 0 10
32557: PPUSH
32558: LD_INT 2
32560: PPUSH
32561: CALL_OW 275
32565: PUSH
32566: LD_VAR 0 11
32570: PUSH
32571: LD_INT 2
32573: ARRAY
32574: GREATEREQUAL
32575: AND
32576: PUSH
32577: LD_VAR 0 10
32581: PPUSH
32582: LD_INT 3
32584: PPUSH
32585: CALL_OW 275
32589: PUSH
32590: LD_VAR 0 11
32594: PUSH
32595: LD_INT 3
32597: ARRAY
32598: GREATEREQUAL
32599: AND
32600: NOT
32601: IFFALSE 32605
// exit ;
32603: GO 33207
// if GetBType ( depot ) = b_depot then
32605: LD_VAR 0 1
32609: PPUSH
32610: CALL_OW 266
32614: PUSH
32615: LD_INT 0
32617: EQUAL
32618: IFFALSE 32630
// dist := 28 else
32620: LD_ADDR_VAR 0 14
32624: PUSH
32625: LD_INT 28
32627: ST_TO_ADDR
32628: GO 32638
// dist := 36 ;
32630: LD_ADDR_VAR 0 14
32634: PUSH
32635: LD_INT 36
32637: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32638: LD_VAR 0 1
32642: PPUSH
32643: LD_VAR 0 3
32647: PPUSH
32648: LD_VAR 0 4
32652: PPUSH
32653: CALL_OW 297
32657: PUSH
32658: LD_VAR 0 14
32662: GREATER
32663: IFFALSE 32667
// exit ;
32665: GO 33207
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32667: LD_ADDR_VAR 0 12
32671: PUSH
32672: LD_VAR 0 2
32676: PPUSH
32677: LD_VAR 0 3
32681: PPUSH
32682: LD_VAR 0 4
32686: PPUSH
32687: LD_VAR 0 5
32691: PPUSH
32692: LD_VAR 0 1
32696: PPUSH
32697: CALL_OW 248
32701: PPUSH
32702: LD_INT 0
32704: PPUSH
32705: CALL 33212 0 6
32709: ST_TO_ADDR
// if not hexes then
32710: LD_VAR 0 12
32714: NOT
32715: IFFALSE 32719
// exit ;
32717: GO 33207
// hex := GetHexInfo ( x , y ) ;
32719: LD_ADDR_VAR 0 15
32723: PUSH
32724: LD_VAR 0 3
32728: PPUSH
32729: LD_VAR 0 4
32733: PPUSH
32734: CALL_OW 546
32738: ST_TO_ADDR
// if hex [ 1 ] then
32739: LD_VAR 0 15
32743: PUSH
32744: LD_INT 1
32746: ARRAY
32747: IFFALSE 32751
// exit ;
32749: GO 33207
// height := hex [ 2 ] ;
32751: LD_ADDR_VAR 0 13
32755: PUSH
32756: LD_VAR 0 15
32760: PUSH
32761: LD_INT 2
32763: ARRAY
32764: ST_TO_ADDR
// for i = 1 to hexes do
32765: LD_ADDR_VAR 0 7
32769: PUSH
32770: DOUBLE
32771: LD_INT 1
32773: DEC
32774: ST_TO_ADDR
32775: LD_VAR 0 12
32779: PUSH
32780: FOR_TO
32781: IFFALSE 33111
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32783: LD_VAR 0 12
32787: PUSH
32788: LD_VAR 0 7
32792: ARRAY
32793: PUSH
32794: LD_INT 1
32796: ARRAY
32797: PPUSH
32798: LD_VAR 0 12
32802: PUSH
32803: LD_VAR 0 7
32807: ARRAY
32808: PUSH
32809: LD_INT 2
32811: ARRAY
32812: PPUSH
32813: CALL_OW 488
32817: NOT
32818: PUSH
32819: LD_VAR 0 12
32823: PUSH
32824: LD_VAR 0 7
32828: ARRAY
32829: PUSH
32830: LD_INT 1
32832: ARRAY
32833: PPUSH
32834: LD_VAR 0 12
32838: PUSH
32839: LD_VAR 0 7
32843: ARRAY
32844: PUSH
32845: LD_INT 2
32847: ARRAY
32848: PPUSH
32849: CALL_OW 428
32853: PUSH
32854: LD_INT 0
32856: GREATER
32857: OR
32858: PUSH
32859: LD_VAR 0 12
32863: PUSH
32864: LD_VAR 0 7
32868: ARRAY
32869: PUSH
32870: LD_INT 1
32872: ARRAY
32873: PPUSH
32874: LD_VAR 0 12
32878: PUSH
32879: LD_VAR 0 7
32883: ARRAY
32884: PUSH
32885: LD_INT 2
32887: ARRAY
32888: PPUSH
32889: CALL_OW 351
32893: OR
32894: IFFALSE 32900
// exit ;
32896: POP
32897: POP
32898: GO 33207
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32900: LD_ADDR_VAR 0 8
32904: PUSH
32905: LD_VAR 0 12
32909: PUSH
32910: LD_VAR 0 7
32914: ARRAY
32915: PUSH
32916: LD_INT 1
32918: ARRAY
32919: PPUSH
32920: LD_VAR 0 12
32924: PUSH
32925: LD_VAR 0 7
32929: ARRAY
32930: PUSH
32931: LD_INT 2
32933: ARRAY
32934: PPUSH
32935: CALL_OW 546
32939: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32940: LD_VAR 0 8
32944: PUSH
32945: LD_INT 1
32947: ARRAY
32948: PUSH
32949: LD_VAR 0 8
32953: PUSH
32954: LD_INT 2
32956: ARRAY
32957: PUSH
32958: LD_VAR 0 13
32962: PUSH
32963: LD_INT 2
32965: PLUS
32966: GREATER
32967: OR
32968: PUSH
32969: LD_VAR 0 8
32973: PUSH
32974: LD_INT 2
32976: ARRAY
32977: PUSH
32978: LD_VAR 0 13
32982: PUSH
32983: LD_INT 2
32985: MINUS
32986: LESS
32987: OR
32988: PUSH
32989: LD_VAR 0 8
32993: PUSH
32994: LD_INT 3
32996: ARRAY
32997: PUSH
32998: LD_INT 0
33000: PUSH
33001: LD_INT 8
33003: PUSH
33004: LD_INT 9
33006: PUSH
33007: LD_INT 10
33009: PUSH
33010: LD_INT 11
33012: PUSH
33013: LD_INT 12
33015: PUSH
33016: LD_INT 13
33018: PUSH
33019: LD_INT 16
33021: PUSH
33022: LD_INT 17
33024: PUSH
33025: LD_INT 18
33027: PUSH
33028: LD_INT 19
33030: PUSH
33031: LD_INT 20
33033: PUSH
33034: LD_INT 21
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: IN
33052: NOT
33053: OR
33054: PUSH
33055: LD_VAR 0 8
33059: PUSH
33060: LD_INT 5
33062: ARRAY
33063: NOT
33064: OR
33065: PUSH
33066: LD_VAR 0 8
33070: PUSH
33071: LD_INT 6
33073: ARRAY
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: LD_INT 7
33083: PUSH
33084: LD_INT 9
33086: PUSH
33087: LD_INT 10
33089: PUSH
33090: LD_INT 11
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: IN
33101: NOT
33102: OR
33103: IFFALSE 33109
// exit ;
33105: POP
33106: POP
33107: GO 33207
// end ;
33109: GO 32780
33111: POP
33112: POP
// side := GetSide ( depot ) ;
33113: LD_ADDR_VAR 0 9
33117: PUSH
33118: LD_VAR 0 1
33122: PPUSH
33123: CALL_OW 255
33127: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33128: LD_VAR 0 9
33132: PPUSH
33133: LD_VAR 0 3
33137: PPUSH
33138: LD_VAR 0 4
33142: PPUSH
33143: LD_INT 20
33145: PPUSH
33146: CALL 25861 0 4
33150: PUSH
33151: LD_INT 4
33153: ARRAY
33154: IFFALSE 33158
// exit ;
33156: GO 33207
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33158: LD_VAR 0 2
33162: PUSH
33163: LD_INT 29
33165: PUSH
33166: LD_INT 30
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: IN
33173: PUSH
33174: LD_VAR 0 3
33178: PPUSH
33179: LD_VAR 0 4
33183: PPUSH
33184: LD_VAR 0 9
33188: PPUSH
33189: CALL_OW 440
33193: NOT
33194: AND
33195: IFFALSE 33199
// exit ;
33197: GO 33207
// result := true ;
33199: LD_ADDR_VAR 0 6
33203: PUSH
33204: LD_INT 1
33206: ST_TO_ADDR
// end ;
33207: LD_VAR 0 6
33211: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
33212: LD_INT 0
33214: PPUSH
33215: PPUSH
33216: PPUSH
33217: PPUSH
33218: PPUSH
33219: PPUSH
33220: PPUSH
33221: PPUSH
33222: PPUSH
33223: PPUSH
33224: PPUSH
33225: PPUSH
33226: PPUSH
33227: PPUSH
33228: PPUSH
33229: PPUSH
33230: PPUSH
33231: PPUSH
33232: PPUSH
33233: PPUSH
33234: PPUSH
33235: PPUSH
33236: PPUSH
33237: PPUSH
33238: PPUSH
33239: PPUSH
33240: PPUSH
33241: PPUSH
33242: PPUSH
33243: PPUSH
33244: PPUSH
33245: PPUSH
33246: PPUSH
33247: PPUSH
33248: PPUSH
33249: PPUSH
33250: PPUSH
33251: PPUSH
33252: PPUSH
33253: PPUSH
33254: PPUSH
33255: PPUSH
33256: PPUSH
33257: PPUSH
33258: PPUSH
33259: PPUSH
33260: PPUSH
33261: PPUSH
33262: PPUSH
33263: PPUSH
33264: PPUSH
33265: PPUSH
33266: PPUSH
33267: PPUSH
33268: PPUSH
33269: PPUSH
33270: PPUSH
33271: PPUSH
// result = [ ] ;
33272: LD_ADDR_VAR 0 7
33276: PUSH
33277: EMPTY
33278: ST_TO_ADDR
// temp_list = [ ] ;
33279: LD_ADDR_VAR 0 9
33283: PUSH
33284: EMPTY
33285: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33286: LD_VAR 0 4
33290: PUSH
33291: LD_INT 0
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: LD_INT 2
33299: PUSH
33300: LD_INT 3
33302: PUSH
33303: LD_INT 4
33305: PUSH
33306: LD_INT 5
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: IN
33317: NOT
33318: PUSH
33319: LD_VAR 0 1
33323: PUSH
33324: LD_INT 0
33326: PUSH
33327: LD_INT 1
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: IN
33334: PUSH
33335: LD_VAR 0 5
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: LD_INT 2
33345: PUSH
33346: LD_INT 3
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: LIST
33353: IN
33354: NOT
33355: AND
33356: OR
33357: IFFALSE 33361
// exit ;
33359: GO 51752
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33361: LD_VAR 0 1
33365: PUSH
33366: LD_INT 6
33368: PUSH
33369: LD_INT 7
33371: PUSH
33372: LD_INT 8
33374: PUSH
33375: LD_INT 13
33377: PUSH
33378: LD_INT 12
33380: PUSH
33381: LD_INT 15
33383: PUSH
33384: LD_INT 11
33386: PUSH
33387: LD_INT 14
33389: PUSH
33390: LD_INT 10
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: IN
33404: IFFALSE 33414
// btype = b_lab ;
33406: LD_ADDR_VAR 0 1
33410: PUSH
33411: LD_INT 6
33413: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33414: LD_VAR 0 6
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: LD_INT 1
33424: PUSH
33425: LD_INT 2
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: LIST
33432: IN
33433: NOT
33434: PUSH
33435: LD_VAR 0 1
33439: PUSH
33440: LD_INT 0
33442: PUSH
33443: LD_INT 1
33445: PUSH
33446: LD_INT 2
33448: PUSH
33449: LD_INT 3
33451: PUSH
33452: LD_INT 6
33454: PUSH
33455: LD_INT 36
33457: PUSH
33458: LD_INT 4
33460: PUSH
33461: LD_INT 5
33463: PUSH
33464: LD_INT 31
33466: PUSH
33467: LD_INT 32
33469: PUSH
33470: LD_INT 33
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: IN
33486: NOT
33487: PUSH
33488: LD_VAR 0 6
33492: PUSH
33493: LD_INT 1
33495: EQUAL
33496: AND
33497: OR
33498: PUSH
33499: LD_VAR 0 1
33503: PUSH
33504: LD_INT 2
33506: PUSH
33507: LD_INT 3
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: IN
33514: NOT
33515: PUSH
33516: LD_VAR 0 6
33520: PUSH
33521: LD_INT 2
33523: EQUAL
33524: AND
33525: OR
33526: IFFALSE 33536
// mode = 0 ;
33528: LD_ADDR_VAR 0 6
33532: PUSH
33533: LD_INT 0
33535: ST_TO_ADDR
// case mode of 0 :
33536: LD_VAR 0 6
33540: PUSH
33541: LD_INT 0
33543: DOUBLE
33544: EQUAL
33545: IFTRUE 33549
33547: GO 45002
33549: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33550: LD_ADDR_VAR 0 11
33554: PUSH
33555: LD_INT 0
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: LD_INT 1
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 1
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: LD_INT 1
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: LD_INT 1
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 1
33608: NEG
33609: PUSH
33610: LD_INT 0
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 1
33619: NEG
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 1
33631: NEG
33632: PUSH
33633: LD_INT 2
33635: NEG
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: LD_INT 2
33646: NEG
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: LD_INT 1
33657: NEG
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 1
33665: PUSH
33666: LD_INT 2
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 0
33675: PUSH
33676: LD_INT 2
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: LD_INT 1
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 1
33696: PUSH
33697: LD_INT 3
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: LD_INT 3
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 1
33716: NEG
33717: PUSH
33718: LD_INT 2
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33743: LD_ADDR_VAR 0 12
33747: PUSH
33748: LD_INT 0
33750: PUSH
33751: LD_INT 0
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 0
33760: PUSH
33761: LD_INT 1
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 1
33771: PUSH
33772: LD_INT 0
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 1
33781: PUSH
33782: LD_INT 1
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: LD_INT 1
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: LD_INT 0
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: LD_INT 1
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 1
33824: PUSH
33825: LD_INT 1
33827: NEG
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 2
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 2
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 1
33855: NEG
33856: PUSH
33857: LD_INT 1
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 2
33866: NEG
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 2
33877: NEG
33878: PUSH
33879: LD_INT 1
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 2
33889: NEG
33890: PUSH
33891: LD_INT 1
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 3
33900: NEG
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 3
33911: NEG
33912: PUSH
33913: LD_INT 1
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33939: LD_ADDR_VAR 0 13
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: LD_INT 0
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 0
33956: PUSH
33957: LD_INT 1
33959: NEG
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: PUSH
33968: LD_INT 0
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 1
33977: PUSH
33978: LD_INT 1
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 0
33987: PUSH
33988: LD_INT 1
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: NEG
33998: PUSH
33999: LD_INT 0
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: LD_INT 1
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 1
34020: NEG
34021: PUSH
34022: LD_INT 2
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 1
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 2
34042: PUSH
34043: LD_INT 2
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: LD_INT 2
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 2
34062: NEG
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 2
34074: NEG
34075: PUSH
34076: LD_INT 2
34078: NEG
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 2
34086: NEG
34087: PUSH
34088: LD_INT 3
34090: NEG
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 3
34098: NEG
34099: PUSH
34100: LD_INT 2
34102: NEG
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 3
34110: NEG
34111: PUSH
34112: LD_INT 3
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34138: LD_ADDR_VAR 0 14
34142: PUSH
34143: LD_INT 0
34145: PUSH
34146: LD_INT 0
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: LD_INT 1
34158: NEG
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 1
34166: PUSH
34167: LD_INT 0
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 1
34176: PUSH
34177: LD_INT 1
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 1
34196: NEG
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 1
34207: NEG
34208: PUSH
34209: LD_INT 1
34211: NEG
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 1
34219: NEG
34220: PUSH
34221: LD_INT 2
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 0
34231: PUSH
34232: LD_INT 2
34234: NEG
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 1
34242: PUSH
34243: LD_INT 1
34245: NEG
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 1
34253: PUSH
34254: LD_INT 2
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 0
34263: PUSH
34264: LD_INT 2
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: NEG
34274: PUSH
34275: LD_INT 1
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 1
34284: NEG
34285: PUSH
34286: LD_INT 3
34288: NEG
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: LD_INT 3
34299: NEG
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: LD_INT 2
34310: NEG
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34334: LD_ADDR_VAR 0 15
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 0
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 1
34362: PUSH
34363: LD_INT 0
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: LD_INT 1
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 0
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: NEG
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 1
34403: NEG
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 2
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: LD_INT 1
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 2
34457: NEG
34458: PUSH
34459: LD_INT 0
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 2
34468: NEG
34469: PUSH
34470: LD_INT 1
34472: NEG
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: LD_INT 1
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 3
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 3
34501: PUSH
34502: LD_INT 1
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34527: LD_ADDR_VAR 0 16
34531: PUSH
34532: LD_INT 0
34534: PUSH
34535: LD_INT 0
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: LD_INT 1
34547: NEG
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 1
34555: PUSH
34556: LD_INT 0
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 1
34565: PUSH
34566: LD_INT 1
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 0
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 1
34585: NEG
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 1
34596: NEG
34597: PUSH
34598: LD_INT 1
34600: NEG
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 1
34608: NEG
34609: PUSH
34610: LD_INT 2
34612: NEG
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: PUSH
34641: LD_INT 2
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 2
34650: NEG
34651: PUSH
34652: LD_INT 1
34654: NEG
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 2
34662: NEG
34663: PUSH
34664: LD_INT 2
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 3
34674: PUSH
34675: LD_INT 2
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 3
34684: PUSH
34685: LD_INT 3
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 2
34694: PUSH
34695: LD_INT 3
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34720: LD_ADDR_VAR 0 17
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: LD_INT 0
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: LD_INT 1
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 1
34778: NEG
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 1
34789: NEG
34790: PUSH
34791: LD_INT 1
34793: NEG
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 1
34801: NEG
34802: PUSH
34803: LD_INT 2
34805: NEG
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: LD_INT 2
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: LD_INT 1
34827: NEG
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 2
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 2
34845: PUSH
34846: LD_INT 1
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 2
34855: PUSH
34856: LD_INT 2
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 0
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: NEG
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 2
34896: NEG
34897: PUSH
34898: LD_INT 0
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: LD_INT 1
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 2
34919: NEG
34920: PUSH
34921: LD_INT 2
34923: NEG
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34950: LD_ADDR_VAR 0 18
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: LD_INT 1
34970: NEG
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 1
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 0
34998: PUSH
34999: LD_INT 1
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 1
35008: NEG
35009: PUSH
35010: LD_INT 0
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 1
35019: NEG
35020: PUSH
35021: LD_INT 1
35023: NEG
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: LD_INT 2
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 0
35043: PUSH
35044: LD_INT 2
35046: NEG
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 1
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 2
35065: PUSH
35066: LD_INT 0
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 2
35075: PUSH
35076: LD_INT 1
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 2
35085: PUSH
35086: LD_INT 2
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: LD_INT 2
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 0
35105: PUSH
35106: LD_INT 2
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 2
35126: NEG
35127: PUSH
35128: LD_INT 0
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 2
35137: NEG
35138: PUSH
35139: LD_INT 1
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 2
35149: NEG
35150: PUSH
35151: LD_INT 2
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35180: LD_ADDR_VAR 0 19
35184: PUSH
35185: LD_INT 0
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: PUSH
35219: LD_INT 1
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 0
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 1
35238: NEG
35239: PUSH
35240: LD_INT 0
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 1
35249: NEG
35250: PUSH
35251: LD_INT 1
35253: NEG
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 1
35261: NEG
35262: PUSH
35263: LD_INT 2
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 0
35273: PUSH
35274: LD_INT 2
35276: NEG
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 1
35284: PUSH
35285: LD_INT 1
35287: NEG
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 2
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 2
35315: PUSH
35316: LD_INT 2
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 1
35325: PUSH
35326: LD_INT 2
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: LD_INT 2
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 1
35345: NEG
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 2
35356: NEG
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 2
35367: NEG
35368: PUSH
35369: LD_INT 1
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 2
35379: NEG
35380: PUSH
35381: LD_INT 2
35383: NEG
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35410: LD_ADDR_VAR 0 20
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: LD_INT 1
35430: NEG
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 1
35438: PUSH
35439: LD_INT 0
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: NEG
35469: PUSH
35470: LD_INT 0
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 1
35491: NEG
35492: PUSH
35493: LD_INT 2
35495: NEG
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: LD_INT 2
35506: NEG
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 1
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 2
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: LD_INT 2
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: LD_INT 2
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: NEG
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 2
35597: NEG
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 2
35609: NEG
35610: PUSH
35611: LD_INT 2
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35640: LD_ADDR_VAR 0 21
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: LD_INT 1
35660: NEG
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: LD_INT 1
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 1
35698: NEG
35699: PUSH
35700: LD_INT 0
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 1
35709: NEG
35710: PUSH
35711: LD_INT 1
35713: NEG
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 1
35721: NEG
35722: PUSH
35723: LD_INT 2
35725: NEG
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: LD_INT 2
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 2
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 2
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: LD_INT 2
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: PUSH
35786: LD_INT 2
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 1
35805: NEG
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 2
35816: NEG
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 2
35827: NEG
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 2
35839: NEG
35840: PUSH
35841: LD_INT 2
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35870: LD_ADDR_VAR 0 22
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: LD_INT 1
35890: NEG
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: LD_INT 1
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: NEG
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: NEG
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: NEG
35952: PUSH
35953: LD_INT 2
35955: NEG
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: LD_INT 2
35966: NEG
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 1
35974: PUSH
35975: LD_INT 1
35977: NEG
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 2
35995: PUSH
35996: LD_INT 1
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 2
36005: PUSH
36006: LD_INT 2
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: LD_INT 2
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: LD_INT 2
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: NEG
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 2
36046: NEG
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 2
36057: NEG
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 2
36069: NEG
36070: PUSH
36071: LD_INT 2
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36100: LD_ADDR_VAR 0 23
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 0
36117: PUSH
36118: LD_INT 1
36120: NEG
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: LD_INT 0
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 1
36138: PUSH
36139: LD_INT 1
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 1
36169: NEG
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: LD_INT 2
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 2
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: LD_INT 1
36207: NEG
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 2
36215: PUSH
36216: LD_INT 0
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 2
36225: PUSH
36226: LD_INT 1
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 2
36235: PUSH
36236: LD_INT 2
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: LD_INT 2
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 2
36276: NEG
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 2
36287: NEG
36288: PUSH
36289: LD_INT 1
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 2
36299: NEG
36300: PUSH
36301: LD_INT 2
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 2
36311: NEG
36312: PUSH
36313: LD_INT 3
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: LD_INT 3
36327: NEG
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 1
36335: PUSH
36336: LD_INT 2
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 2
36346: PUSH
36347: LD_INT 1
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36380: LD_ADDR_VAR 0 24
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: LD_INT 0
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 0
36397: PUSH
36398: LD_INT 1
36400: NEG
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 1
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: LD_INT 1
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: LD_INT 1
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 1
36438: NEG
36439: PUSH
36440: LD_INT 0
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 1
36449: NEG
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: LD_INT 2
36465: NEG
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: LD_INT 2
36476: NEG
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 2
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 2
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 2
36515: PUSH
36516: LD_INT 2
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: LD_INT 2
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: LD_INT 2
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: LD_INT 1
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 2
36567: NEG
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 2
36579: NEG
36580: PUSH
36581: LD_INT 2
36583: NEG
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: LD_INT 2
36594: NEG
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 2
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 3
36613: PUSH
36614: LD_INT 1
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 3
36623: PUSH
36624: LD_INT 2
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36656: LD_ADDR_VAR 0 25
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: LD_INT 0
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: LD_INT 1
36676: NEG
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: LD_INT 1
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 1
36725: NEG
36726: PUSH
36727: LD_INT 1
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: LD_INT 2
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: LD_INT 2
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 2
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 2
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 2
36791: PUSH
36792: LD_INT 2
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: LD_INT 2
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: LD_INT 2
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 2
36832: NEG
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 2
36843: NEG
36844: PUSH
36845: LD_INT 1
36847: NEG
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 2
36855: NEG
36856: PUSH
36857: LD_INT 2
36859: NEG
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 3
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 3
36877: PUSH
36878: LD_INT 2
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 2
36887: PUSH
36888: LD_INT 3
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: LD_INT 3
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36930: LD_ADDR_VAR 0 26
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 0
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 1
36968: PUSH
36969: LD_INT 1
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: LD_INT 1
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 1
36988: NEG
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: NEG
37000: PUSH
37001: LD_INT 1
37003: NEG
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 1
37011: NEG
37012: PUSH
37013: LD_INT 2
37015: NEG
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: LD_INT 2
37026: NEG
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: LD_INT 1
37037: NEG
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 2
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 2
37055: PUSH
37056: LD_INT 1
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 2
37065: PUSH
37066: LD_INT 2
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 1
37075: PUSH
37076: LD_INT 2
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: LD_INT 2
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 1
37095: NEG
37096: PUSH
37097: LD_INT 1
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 2
37106: NEG
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 2
37117: NEG
37118: PUSH
37119: LD_INT 1
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 2
37129: NEG
37130: PUSH
37131: LD_INT 2
37133: NEG
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 2
37141: PUSH
37142: LD_INT 3
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: LD_INT 3
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 1
37161: NEG
37162: PUSH
37163: LD_INT 2
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 2
37172: NEG
37173: PUSH
37174: LD_INT 1
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37206: LD_ADDR_VAR 0 27
37210: PUSH
37211: LD_INT 0
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: LD_INT 1
37226: NEG
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 1
37234: PUSH
37235: LD_INT 0
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: LD_INT 1
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 0
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 1
37264: NEG
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 1
37275: NEG
37276: PUSH
37277: LD_INT 1
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: LD_INT 2
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: LD_INT 2
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 1
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 2
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 2
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: LD_INT 2
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: LD_INT 2
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 2
37382: NEG
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 2
37393: NEG
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 2
37405: NEG
37406: PUSH
37407: LD_INT 2
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 1
37417: NEG
37418: PUSH
37419: LD_INT 2
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 2
37428: NEG
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 3
37439: NEG
37440: PUSH
37441: LD_INT 1
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 3
37451: NEG
37452: PUSH
37453: LD_INT 2
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37486: LD_ADDR_VAR 0 28
37490: PUSH
37491: LD_INT 0
37493: PUSH
37494: LD_INT 0
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: LD_INT 1
37506: NEG
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: LD_INT 1
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 1
37544: NEG
37545: PUSH
37546: LD_INT 0
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: NEG
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 1
37567: NEG
37568: PUSH
37569: LD_INT 2
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: LD_INT 2
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 2
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 2
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 2
37621: PUSH
37622: LD_INT 2
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: LD_INT 2
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: LD_INT 2
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: LD_INT 1
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 2
37662: NEG
37663: PUSH
37664: LD_INT 0
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 2
37673: NEG
37674: PUSH
37675: LD_INT 1
37677: NEG
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 2
37685: NEG
37686: PUSH
37687: LD_INT 2
37689: NEG
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 2
37697: NEG
37698: PUSH
37699: LD_INT 3
37701: NEG
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 1
37709: NEG
37710: PUSH
37711: LD_INT 3
37713: NEG
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 3
37721: NEG
37722: PUSH
37723: LD_INT 1
37725: NEG
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 3
37733: NEG
37734: PUSH
37735: LD_INT 2
37737: NEG
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37768: LD_ADDR_VAR 0 29
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: LD_INT 0
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: LD_INT 1
37788: NEG
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 1
37796: PUSH
37797: LD_INT 0
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 1
37806: PUSH
37807: LD_INT 1
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 1
37826: NEG
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 1
37837: NEG
37838: PUSH
37839: LD_INT 1
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 1
37849: NEG
37850: PUSH
37851: LD_INT 2
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: LD_INT 2
37864: NEG
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 1
37872: PUSH
37873: LD_INT 1
37875: NEG
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 2
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 2
37893: PUSH
37894: LD_INT 1
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 1
37903: PUSH
37904: LD_INT 2
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 2
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: NEG
37924: PUSH
37925: LD_INT 1
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 2
37934: NEG
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: NEG
37947: PUSH
37948: LD_INT 2
37950: NEG
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 2
37958: NEG
37959: PUSH
37960: LD_INT 3
37962: NEG
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 2
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 3
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: LD_INT 3
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: LD_INT 2
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 3
38012: NEG
38013: PUSH
38014: LD_INT 2
38016: NEG
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38047: LD_ADDR_VAR 0 30
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: LD_INT 1
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: LD_INT 1
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 0
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: NEG
38117: PUSH
38118: LD_INT 1
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: LD_INT 2
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: LD_INT 2
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 2
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 2
38182: PUSH
38183: LD_INT 2
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: LD_INT 2
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 1
38202: NEG
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: NEG
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 2
38224: NEG
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 1
38236: NEG
38237: PUSH
38238: LD_INT 3
38240: NEG
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: LD_INT 2
38251: NEG
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 3
38259: PUSH
38260: LD_INT 2
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 2
38269: PUSH
38270: LD_INT 3
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 2
38279: NEG
38280: PUSH
38281: LD_INT 1
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 3
38290: NEG
38291: PUSH
38292: LD_INT 1
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38325: LD_ADDR_VAR 0 31
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: LD_INT 0
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 0
38342: PUSH
38343: LD_INT 1
38345: NEG
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 1
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 1
38394: NEG
38395: PUSH
38396: LD_INT 1
38398: NEG
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: LD_INT 2
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 1
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 2
38429: PUSH
38430: LD_INT 0
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 2
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 2
38449: PUSH
38450: LD_INT 2
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: LD_INT 2
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 2
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: LD_INT 1
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 2
38490: NEG
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 2
38502: NEG
38503: PUSH
38504: LD_INT 2
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 2
38514: NEG
38515: PUSH
38516: LD_INT 3
38518: NEG
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 2
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 3
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: LD_INT 3
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 1
38557: NEG
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 3
38568: NEG
38569: PUSH
38570: LD_INT 2
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38603: LD_ADDR_VAR 0 32
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: LD_INT 2
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: LD_INT 2
38699: NEG
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 1
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 2
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 2
38728: PUSH
38729: LD_INT 2
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: LD_INT 2
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: NEG
38759: PUSH
38760: LD_INT 1
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 2
38769: NEG
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 2
38780: NEG
38781: PUSH
38782: LD_INT 1
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: NEG
38793: PUSH
38794: LD_INT 3
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: LD_INT 2
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 3
38815: PUSH
38816: LD_INT 2
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: LD_INT 3
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 2
38835: NEG
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 3
38846: NEG
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38881: LD_ADDR_VAR 0 33
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: LD_INT 1
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 1
38939: NEG
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 1
38962: NEG
38963: PUSH
38964: LD_INT 2
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: LD_INT 1
38977: NEG
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: LD_INT 2
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 2
39036: NEG
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 2
39047: NEG
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: NEG
39060: PUSH
39061: LD_INT 2
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 2
39071: NEG
39072: PUSH
39073: LD_INT 3
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: LD_INT 1
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 3
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: LD_INT 3
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 3
39125: NEG
39126: PUSH
39127: LD_INT 2
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39160: LD_ADDR_VAR 0 34
39164: PUSH
39165: LD_INT 0
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 1
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: LD_INT 1
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 1
39229: NEG
39230: PUSH
39231: LD_INT 1
39233: NEG
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 1
39241: NEG
39242: PUSH
39243: LD_INT 2
39245: NEG
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 0
39253: PUSH
39254: LD_INT 2
39256: NEG
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: LD_INT 1
39267: NEG
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: LD_INT 1
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 2
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: LD_INT 2
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: PUSH
39307: LD_INT 1
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 2
39316: NEG
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 2
39327: NEG
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 2
39339: NEG
39340: PUSH
39341: LD_INT 2
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: LD_INT 3
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 3
39374: PUSH
39375: LD_INT 2
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 2
39384: PUSH
39385: LD_INT 3
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 2
39394: NEG
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 3
39405: NEG
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39440: LD_ADDR_VAR 0 35
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 0
39457: PUSH
39458: LD_INT 1
39460: NEG
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 1
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: LD_INT 1
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 1
39498: NEG
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 1
39509: NEG
39510: PUSH
39511: LD_INT 1
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 2
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 2
39531: NEG
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39552: LD_ADDR_VAR 0 36
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 1
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: LD_INT 1
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 1
39610: NEG
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: LD_INT 1
39625: NEG
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: PUSH
39635: LD_INT 2
39637: NEG
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 1
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39664: LD_ADDR_VAR 0 37
39668: PUSH
39669: LD_INT 0
39671: PUSH
39672: LD_INT 0
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 1
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 0
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: NEG
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: NEG
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39776: LD_ADDR_VAR 0 38
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: LD_INT 0
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 1
39814: PUSH
39815: LD_INT 1
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 1
39834: NEG
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: LD_INT 1
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 2
39857: PUSH
39858: LD_INT 1
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 2
39867: NEG
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39888: LD_ADDR_VAR 0 39
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 0
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: LD_INT 2
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: LD_INT 2
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40000: LD_ADDR_VAR 0 40
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 1
40069: NEG
40070: PUSH
40071: LD_INT 1
40073: NEG
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 1
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40112: LD_ADDR_VAR 0 41
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: LD_INT 1
40132: NEG
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 1
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 1
40193: NEG
40194: PUSH
40195: LD_INT 2
40197: NEG
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 2
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 1
40256: NEG
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 2
40267: NEG
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 2
40278: NEG
40279: PUSH
40280: LD_INT 1
40282: NEG
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 2
40290: NEG
40291: PUSH
40292: LD_INT 2
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 2
40302: NEG
40303: PUSH
40304: LD_INT 3
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 2
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 3
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 3
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 3
40345: PUSH
40346: LD_INT 2
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 3
40355: PUSH
40356: LD_INT 3
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 2
40365: PUSH
40366: LD_INT 3
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 2
40375: NEG
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 3
40386: NEG
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 3
40397: NEG
40398: PUSH
40399: LD_INT 1
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 3
40409: NEG
40410: PUSH
40411: LD_INT 2
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 3
40421: NEG
40422: PUSH
40423: LD_INT 3
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40462: LD_ADDR_VAR 0 42
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: LD_INT 1
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: LD_INT 0
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: LD_INT 2
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: LD_INT 2
40558: NEG
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 2
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: PUSH
40588: LD_INT 2
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: PUSH
40598: LD_INT 2
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 0
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 1
40617: NEG
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 2
40628: NEG
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 2
40640: NEG
40641: PUSH
40642: LD_INT 2
40644: NEG
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 2
40652: NEG
40653: PUSH
40654: LD_INT 3
40656: NEG
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 1
40664: NEG
40665: PUSH
40666: LD_INT 3
40668: NEG
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: LD_INT 3
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 3
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 3
40708: PUSH
40709: LD_INT 3
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: LD_INT 3
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: LD_INT 3
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: LD_INT 3
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: LD_INT 2
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 3
40759: NEG
40760: PUSH
40761: LD_INT 2
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 3
40771: NEG
40772: PUSH
40773: LD_INT 3
40775: NEG
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40812: LD_ADDR_VAR 0 43
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: LD_INT 1
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 1
40893: NEG
40894: PUSH
40895: LD_INT 2
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: LD_INT 2
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 2
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 2
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: LD_INT 2
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: LD_INT 2
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 2
40978: NEG
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 2
40989: NEG
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: LD_INT 3
41005: NEG
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: LD_INT 3
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: LD_INT 2
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 3
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 3
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: LD_INT 3
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: LD_INT 3
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: NEG
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 3
41108: NEG
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 3
41119: NEG
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41160: LD_ADDR_VAR 0 44
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: LD_INT 2
41245: NEG
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 2
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 2
41274: PUSH
41275: LD_INT 1
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: LD_INT 2
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: LD_INT 2
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 2
41315: NEG
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 2
41326: NEG
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 2
41338: NEG
41339: PUSH
41340: LD_INT 2
41342: NEG
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 2
41350: NEG
41351: PUSH
41352: LD_INT 3
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 3
41373: PUSH
41374: LD_INT 0
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 3
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 3
41393: PUSH
41394: LD_INT 2
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 3
41403: PUSH
41404: LD_INT 3
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 2
41413: PUSH
41414: LD_INT 3
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: LD_INT 1
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 3
41434: NEG
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 3
41445: NEG
41446: PUSH
41447: LD_INT 1
41449: NEG
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 3
41457: NEG
41458: PUSH
41459: LD_INT 2
41461: NEG
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 3
41469: NEG
41470: PUSH
41471: LD_INT 3
41473: NEG
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41510: LD_ADDR_VAR 0 45
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 0
41527: PUSH
41528: LD_INT 1
41530: NEG
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: NEG
41592: PUSH
41593: LD_INT 2
41595: NEG
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 2
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: PUSH
41636: LD_INT 2
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: LD_INT 2
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 2
41676: NEG
41677: PUSH
41678: LD_INT 1
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 2
41688: NEG
41689: PUSH
41690: LD_INT 2
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 2
41700: NEG
41701: PUSH
41702: LD_INT 3
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PUSH
41714: LD_INT 3
41716: NEG
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: LD_INT 3
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: LD_INT 2
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 3
41746: PUSH
41747: LD_INT 2
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 3
41756: PUSH
41757: LD_INT 3
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 2
41766: PUSH
41767: LD_INT 3
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: LD_INT 3
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: LD_INT 3
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: LD_INT 2
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 3
41807: NEG
41808: PUSH
41809: LD_INT 2
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 3
41819: NEG
41820: PUSH
41821: LD_INT 3
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41860: LD_ADDR_VAR 0 46
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: LD_INT 2
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 2
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 2
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 1
41995: PUSH
41996: LD_INT 2
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: LD_INT 2
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: LD_INT 1
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 2
42026: NEG
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 2
42037: NEG
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: LD_INT 3
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: LD_INT 3
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: LD_INT 2
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 3
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 3
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: LD_INT 3
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: LD_INT 3
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: LD_INT 2
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 2
42145: NEG
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 3
42156: NEG
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 3
42167: NEG
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42208: LD_ADDR_VAR 0 47
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: LD_INT 2
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: LD_INT 2
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 2
42323: NEG
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 2
42335: NEG
42336: PUSH
42337: LD_INT 2
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42359: LD_ADDR_VAR 0 48
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: LD_INT 1
42432: NEG
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: LD_INT 2
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: LD_INT 2
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 2
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42506: LD_ADDR_VAR 0 49
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: NEG
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 2
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: LD_INT 2
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42650: LD_ADDR_VAR 0 50
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: LD_INT 1
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 2
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 2
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: LD_INT 2
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42794: LD_ADDR_VAR 0 51
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: LD_INT 1
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: LD_INT 1
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 1
42852: NEG
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: LD_INT 2
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: LD_INT 2
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 1
42895: NEG
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 2
42906: NEG
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 2
42917: NEG
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42941: LD_ADDR_VAR 0 52
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: LD_INT 2
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: NEG
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 2
43056: NEG
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: LD_INT 2
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43092: LD_ADDR_VAR 0 53
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: LD_INT 2
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 2
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 2
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 2
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 2
43227: PUSH
43228: LD_INT 2
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: LD_INT 2
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 2
43268: NEG
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 2
43279: NEG
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43322: LD_ADDR_VAR 0 54
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 2
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: LD_INT 2
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 2
43509: NEG
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: LD_INT 2
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43552: LD_ADDR_VAR 0 55
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 1
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: LD_INT 2
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 2
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: LD_INT 2
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: LD_INT 2
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 2
43739: NEG
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 2
43751: NEG
43752: PUSH
43753: LD_INT 2
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43782: LD_ADDR_VAR 0 56
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 2
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: LD_INT 2
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: NEG
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: LD_INT 2
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44012: LD_ADDR_VAR 0 57
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: LD_INT 2
44097: NEG
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: LD_INT 2
44108: NEG
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 2
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: LD_INT 2
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: LD_INT 2
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: LD_INT 2
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 2
44188: NEG
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: NEG
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 2
44211: NEG
44212: PUSH
44213: LD_INT 2
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44242: LD_ADDR_VAR 0 58
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: LD_INT 2
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: LD_INT 2
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 2
44429: NEG
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: LD_INT 2
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44472: LD_ADDR_VAR 0 59
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44560: LD_ADDR_VAR 0 60
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44648: LD_ADDR_VAR 0 61
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44736: LD_ADDR_VAR 0 62
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44824: LD_ADDR_VAR 0 63
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44912: LD_ADDR_VAR 0 64
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: ST_TO_ADDR
// end ; 1 :
45000: GO 50897
45002: LD_INT 1
45004: DOUBLE
45005: EQUAL
45006: IFTRUE 45010
45008: GO 47633
45010: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45011: LD_ADDR_VAR 0 11
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: LD_INT 3
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: LD_INT 3
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: LD_INT 2
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: LIST
45054: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45055: LD_ADDR_VAR 0 12
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 3
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 3
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: LIST
45095: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45096: LD_ADDR_VAR 0 13
45100: PUSH
45101: LD_INT 3
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 3
45113: PUSH
45114: LD_INT 3
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: LD_INT 3
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: LIST
45135: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45136: LD_ADDR_VAR 0 14
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 3
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 3
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: LIST
45176: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45177: LD_ADDR_VAR 0 15
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 3
45195: NEG
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 3
45206: NEG
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: LIST
45220: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45221: LD_ADDR_VAR 0 16
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: LD_INT 3
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 3
45240: NEG
45241: PUSH
45242: LD_INT 2
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 3
45252: NEG
45253: PUSH
45254: LD_INT 3
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: LIST
45266: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45267: LD_ADDR_VAR 0 17
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: LD_INT 3
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: LD_INT 3
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: LD_INT 2
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: LIST
45310: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45311: LD_ADDR_VAR 0 18
45315: PUSH
45316: LD_INT 2
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 3
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 3
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: LIST
45351: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45352: LD_ADDR_VAR 0 19
45356: PUSH
45357: LD_INT 3
45359: PUSH
45360: LD_INT 2
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 3
45369: PUSH
45370: LD_INT 3
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: LD_INT 3
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45392: LD_ADDR_VAR 0 20
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: LD_INT 3
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 3
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: LIST
45432: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45433: LD_ADDR_VAR 0 21
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 3
45451: NEG
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 3
45462: NEG
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: LIST
45476: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45477: LD_ADDR_VAR 0 22
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: LD_INT 3
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 3
45496: NEG
45497: PUSH
45498: LD_INT 2
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 3
45508: NEG
45509: PUSH
45510: LD_INT 3
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: LIST
45522: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45523: LD_ADDR_VAR 0 23
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 3
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 4
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: LD_INT 3
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: LIST
45566: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45567: LD_ADDR_VAR 0 24
45571: PUSH
45572: LD_INT 3
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 3
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 4
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: LIST
45607: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45608: LD_ADDR_VAR 0 25
45612: PUSH
45613: LD_INT 3
45615: PUSH
45616: LD_INT 3
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 4
45625: PUSH
45626: LD_INT 3
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 3
45635: PUSH
45636: LD_INT 4
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: LIST
45647: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45648: LD_ADDR_VAR 0 26
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 3
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: LD_INT 4
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 3
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: LIST
45688: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45689: LD_ADDR_VAR 0 27
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 3
45707: NEG
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 4
45718: NEG
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: LIST
45732: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45733: LD_ADDR_VAR 0 28
45737: PUSH
45738: LD_INT 3
45740: NEG
45741: PUSH
45742: LD_INT 3
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 3
45752: NEG
45753: PUSH
45754: LD_INT 4
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 4
45764: NEG
45765: PUSH
45766: LD_INT 3
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: LIST
45778: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45779: LD_ADDR_VAR 0 29
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 3
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: LD_INT 3
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: LD_INT 4
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 4
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: LD_INT 3
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: LD_INT 5
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 5
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: LD_INT 4
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: LD_INT 6
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: LD_INT 6
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: LD_INT 5
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45934: LD_ADDR_VAR 0 30
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 3
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 3
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 3
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 4
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 4
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 4
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 5
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 5
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 5
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 6
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 6
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46077: LD_ADDR_VAR 0 31
46081: PUSH
46082: LD_INT 3
46084: PUSH
46085: LD_INT 2
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 3
46094: PUSH
46095: LD_INT 3
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 3
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 4
46114: PUSH
46115: LD_INT 3
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 4
46124: PUSH
46125: LD_INT 4
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 3
46134: PUSH
46135: LD_INT 4
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 5
46144: PUSH
46145: LD_INT 4
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 5
46154: PUSH
46155: LD_INT 5
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 4
46164: PUSH
46165: LD_INT 5
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 6
46174: PUSH
46175: LD_INT 5
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 6
46184: PUSH
46185: LD_INT 6
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 5
46194: PUSH
46195: LD_INT 6
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46216: LD_ADDR_VAR 0 32
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: LD_INT 3
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: LD_INT 3
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: NEG
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: LD_INT 4
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: LD_INT 4
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 3
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: LD_INT 5
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: LD_INT 5
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: LD_INT 4
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: LD_INT 6
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: LD_INT 6
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: LD_INT 5
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46359: LD_ADDR_VAR 0 33
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 3
46377: NEG
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 3
46388: NEG
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 3
46400: NEG
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 4
46411: NEG
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 4
46422: NEG
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 4
46434: NEG
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 5
46445: NEG
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 5
46456: NEG
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 5
46468: NEG
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 6
46479: NEG
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 6
46490: NEG
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46514: LD_ADDR_VAR 0 34
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: LD_INT 3
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 3
46533: NEG
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 3
46545: NEG
46546: PUSH
46547: LD_INT 3
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 3
46557: NEG
46558: PUSH
46559: LD_INT 4
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 4
46569: NEG
46570: PUSH
46571: LD_INT 3
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 4
46581: NEG
46582: PUSH
46583: LD_INT 4
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 4
46593: NEG
46594: PUSH
46595: LD_INT 5
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 5
46605: NEG
46606: PUSH
46607: LD_INT 4
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 5
46617: NEG
46618: PUSH
46619: LD_INT 5
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 5
46629: NEG
46630: PUSH
46631: LD_INT 6
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 6
46641: NEG
46642: PUSH
46643: LD_INT 5
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 6
46653: NEG
46654: PUSH
46655: LD_INT 6
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46677: LD_ADDR_VAR 0 41
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: LD_INT 2
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 3
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: LIST
46720: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46721: LD_ADDR_VAR 0 42
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 2
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 3
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: LIST
46761: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46762: LD_ADDR_VAR 0 43
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 3
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: LD_INT 3
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: LIST
46801: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46802: LD_ADDR_VAR 0 44
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: LD_INT 3
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: LIST
46842: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46843: LD_ADDR_VAR 0 45
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 3
46872: NEG
46873: PUSH
46874: LD_INT 1
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46887: LD_ADDR_VAR 0 46
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: LD_INT 3
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 3
46918: NEG
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: LIST
46932: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46933: LD_ADDR_VAR 0 47
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: LD_INT 3
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: LD_INT 3
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46966: LD_ADDR_VAR 0 48
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46997: LD_ADDR_VAR 0 49
47001: PUSH
47002: LD_INT 3
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 3
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47026: LD_ADDR_VAR 0 50
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: LD_INT 3
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: LD_INT 3
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47055: LD_ADDR_VAR 0 51
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 2
47073: NEG
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47086: LD_ADDR_VAR 0 52
47090: PUSH
47091: LD_INT 3
47093: NEG
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 3
47105: NEG
47106: PUSH
47107: LD_INT 2
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47119: LD_ADDR_VAR 0 53
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: LD_INT 3
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: LD_INT 3
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: LD_INT 2
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: LIST
47162: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47163: LD_ADDR_VAR 0 54
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 3
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 3
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: LIST
47203: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47204: LD_ADDR_VAR 0 55
47208: PUSH
47209: LD_INT 3
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 3
47221: PUSH
47222: LD_INT 3
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 2
47231: PUSH
47232: LD_INT 3
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: LIST
47243: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47244: LD_ADDR_VAR 0 56
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: LD_INT 3
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: LD_INT 3
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: LD_INT 2
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: LIST
47284: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47285: LD_ADDR_VAR 0 57
47289: PUSH
47290: LD_INT 2
47292: NEG
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 3
47303: NEG
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 3
47314: NEG
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: LIST
47328: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47329: LD_ADDR_VAR 0 58
47333: PUSH
47334: LD_INT 2
47336: NEG
47337: PUSH
47338: LD_INT 3
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 3
47348: NEG
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 3
47360: NEG
47361: PUSH
47362: LD_INT 3
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: LIST
47374: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47375: LD_ADDR_VAR 0 59
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: LD_INT 2
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: LIST
47418: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47419: LD_ADDR_VAR 0 60
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: LIST
47459: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47460: LD_ADDR_VAR 0 61
47464: PUSH
47465: LD_INT 2
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: LIST
47499: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47500: LD_ADDR_VAR 0 62
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: LD_INT 2
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: LIST
47540: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47541: LD_ADDR_VAR 0 63
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 2
47570: NEG
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: LIST
47584: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47585: LD_ADDR_VAR 0 64
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: LD_INT 2
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: LIST
47630: ST_TO_ADDR
// end ; 2 :
47631: GO 50897
47633: LD_INT 2
47635: DOUBLE
47636: EQUAL
47637: IFTRUE 47641
47639: GO 50896
47641: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47642: LD_ADDR_VAR 0 29
47646: PUSH
47647: LD_INT 4
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 4
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 5
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 5
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 4
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 3
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 3
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 3
47721: PUSH
47722: LD_INT 2
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 5
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 3
47742: PUSH
47743: LD_INT 3
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 3
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 4
47762: PUSH
47763: LD_INT 3
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 4
47772: PUSH
47773: LD_INT 4
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 3
47782: PUSH
47783: LD_INT 4
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: LD_INT 3
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 2
47802: PUSH
47803: LD_INT 2
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 4
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: LD_INT 4
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 4
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 3
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: LD_INT 4
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: LD_INT 5
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: LD_INT 5
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: LD_INT 4
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: LD_INT 3
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: LD_INT 5
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 2
47914: NEG
47915: PUSH
47916: LD_INT 3
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 3
47925: NEG
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 3
47936: NEG
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 2
47948: NEG
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 2
47959: NEG
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 3
47970: NEG
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 4
47981: NEG
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 4
47992: NEG
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 4
48004: NEG
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 2
48016: NEG
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 4
48027: NEG
48028: PUSH
48029: LD_INT 4
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 4
48039: NEG
48040: PUSH
48041: LD_INT 5
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 3
48051: NEG
48052: PUSH
48053: LD_INT 4
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 3
48063: NEG
48064: PUSH
48065: LD_INT 3
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 4
48075: NEG
48076: PUSH
48077: LD_INT 3
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 5
48087: NEG
48088: PUSH
48089: LD_INT 4
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 5
48099: NEG
48100: PUSH
48101: LD_INT 5
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 3
48111: NEG
48112: PUSH
48113: LD_INT 5
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 5
48123: NEG
48124: PUSH
48125: LD_INT 3
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48180: LD_ADDR_VAR 0 30
48184: PUSH
48185: LD_INT 4
48187: PUSH
48188: LD_INT 4
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 4
48197: PUSH
48198: LD_INT 3
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 5
48207: PUSH
48208: LD_INT 4
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 5
48217: PUSH
48218: LD_INT 5
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 4
48227: PUSH
48228: LD_INT 5
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 3
48237: PUSH
48238: LD_INT 4
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 3
48247: PUSH
48248: LD_INT 3
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 5
48257: PUSH
48258: LD_INT 3
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 3
48267: PUSH
48268: LD_INT 5
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: LD_INT 3
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: LD_INT 2
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: LD_INT 3
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: LD_INT 4
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: LD_INT 4
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: LD_INT 3
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: LD_INT 4
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: LD_INT 2
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 4
48370: NEG
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 4
48381: NEG
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 3
48393: NEG
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 3
48404: NEG
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 4
48415: NEG
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 5
48426: NEG
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 5
48437: NEG
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 5
48449: NEG
48450: PUSH
48451: LD_INT 2
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 3
48461: NEG
48462: PUSH
48463: LD_INT 2
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 3
48472: NEG
48473: PUSH
48474: LD_INT 3
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 3
48484: NEG
48485: PUSH
48486: LD_INT 4
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 2
48496: NEG
48497: PUSH
48498: LD_INT 3
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 2
48508: NEG
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 3
48520: NEG
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 4
48532: NEG
48533: PUSH
48534: LD_INT 3
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 4
48544: NEG
48545: PUSH
48546: LD_INT 4
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: NEG
48557: PUSH
48558: LD_INT 4
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 4
48568: NEG
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: LD_INT 4
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: LD_INT 5
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: PUSH
48603: LD_INT 4
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 3
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: LD_INT 3
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: LD_INT 4
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: LD_INT 5
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: LD_INT 3
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 2
48670: NEG
48671: PUSH
48672: LD_INT 5
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48727: LD_ADDR_VAR 0 31
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 4
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 3
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 4
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: LD_INT 5
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 5
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: LD_INT 4
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 3
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: LD_INT 5
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: LD_INT 3
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 3
48827: NEG
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 3
48838: NEG
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 2
48850: NEG
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: NEG
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 3
48872: NEG
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 4
48883: NEG
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 4
48894: NEG
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 4
48906: NEG
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: NEG
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 4
48929: NEG
48930: PUSH
48931: LD_INT 4
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 4
48941: NEG
48942: PUSH
48943: LD_INT 5
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 3
48953: NEG
48954: PUSH
48955: LD_INT 4
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 3
48965: NEG
48966: PUSH
48967: LD_INT 3
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 4
48977: NEG
48978: PUSH
48979: LD_INT 3
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 5
48989: NEG
48990: PUSH
48991: LD_INT 4
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 5
49001: NEG
49002: PUSH
49003: LD_INT 5
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 3
49013: NEG
49014: PUSH
49015: LD_INT 5
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 5
49025: NEG
49026: PUSH
49027: LD_INT 3
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 3
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: LD_INT 4
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 3
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: LD_INT 2
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 2
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: LD_INT 3
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 4
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 2
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: NEG
49128: PUSH
49129: LD_INT 4
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 4
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 4
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 5
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 5
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 4
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 3
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 3
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 3
49211: PUSH
49212: LD_INT 2
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 5
49222: PUSH
49223: LD_INT 2
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49277: LD_ADDR_VAR 0 32
49281: PUSH
49282: LD_INT 4
49284: NEG
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 4
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 3
49307: NEG
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 3
49318: NEG
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 4
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 5
49340: NEG
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 5
49351: NEG
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 5
49363: NEG
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 3
49375: NEG
49376: PUSH
49377: LD_INT 2
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 3
49386: NEG
49387: PUSH
49388: LD_INT 3
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 3
49398: NEG
49399: PUSH
49400: LD_INT 4
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: LD_INT 3
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 3
49434: NEG
49435: PUSH
49436: LD_INT 2
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 4
49446: NEG
49447: PUSH
49448: LD_INT 3
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 4
49458: NEG
49459: PUSH
49460: LD_INT 4
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 2
49470: NEG
49471: PUSH
49472: LD_INT 4
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 4
49482: NEG
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 4
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: LD_INT 5
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: LD_INT 4
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: LD_INT 3
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: LD_INT 3
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: LD_INT 4
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: LD_INT 5
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: LD_INT 3
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 2
49584: NEG
49585: PUSH
49586: LD_INT 5
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 3
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 3
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 4
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 4
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 3
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 4
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 4
49689: PUSH
49690: LD_INT 4
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 4
49699: PUSH
49700: LD_INT 3
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 5
49709: PUSH
49710: LD_INT 4
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 5
49719: PUSH
49720: LD_INT 5
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 4
49729: PUSH
49730: LD_INT 5
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 3
49739: PUSH
49740: LD_INT 4
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 3
49749: PUSH
49750: LD_INT 3
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 5
49759: PUSH
49760: LD_INT 3
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 3
49769: PUSH
49770: LD_INT 5
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49824: LD_ADDR_VAR 0 33
49828: PUSH
49829: LD_INT 4
49831: NEG
49832: PUSH
49833: LD_INT 4
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 4
49843: NEG
49844: PUSH
49845: LD_INT 5
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: NEG
49856: PUSH
49857: LD_INT 4
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 3
49867: NEG
49868: PUSH
49869: LD_INT 3
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 4
49879: NEG
49880: PUSH
49881: LD_INT 3
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 5
49891: NEG
49892: PUSH
49893: LD_INT 4
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 5
49903: NEG
49904: PUSH
49905: LD_INT 5
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 3
49915: NEG
49916: PUSH
49917: LD_INT 5
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 5
49927: NEG
49928: PUSH
49929: LD_INT 3
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 3
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 4
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 3
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: LD_INT 2
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 2
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: LD_INT 3
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: LD_INT 4
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: LD_INT 2
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: LD_INT 4
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 4
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 4
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 5
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 5
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 4
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 3
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 3
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 3
50113: PUSH
50114: LD_INT 2
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 5
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 3
50134: PUSH
50135: LD_INT 3
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 3
50144: PUSH
50145: LD_INT 2
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 4
50154: PUSH
50155: LD_INT 3
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 4
50164: PUSH
50165: LD_INT 4
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 3
50174: PUSH
50175: LD_INT 4
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: PUSH
50185: LD_INT 3
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: LD_INT 2
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 4
50204: PUSH
50205: LD_INT 2
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: LD_INT 4
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 4
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: LD_INT 4
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: LD_INT 5
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 5
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 4
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: LD_INT 3
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 2
50296: PUSH
50297: LD_INT 5
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: LD_INT 3
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50362: LD_ADDR_VAR 0 34
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: LD_INT 4
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: LD_INT 5
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: LD_INT 4
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: LD_INT 3
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: LD_INT 3
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: LD_INT 4
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 5
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: LD_INT 3
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: LD_INT 5
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 3
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 3
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 4
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 4
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 3
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 2
50543: PUSH
50544: LD_INT 2
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 4
50554: PUSH
50555: LD_INT 2
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 4
50564: PUSH
50565: LD_INT 4
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 4
50574: PUSH
50575: LD_INT 3
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 5
50584: PUSH
50585: LD_INT 4
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 5
50594: PUSH
50595: LD_INT 5
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 4
50604: PUSH
50605: LD_INT 5
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 3
50614: PUSH
50615: LD_INT 4
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 3
50624: PUSH
50625: LD_INT 3
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 5
50634: PUSH
50635: LD_INT 3
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 3
50644: PUSH
50645: LD_INT 5
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: LD_INT 3
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: LD_INT 2
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: LD_INT 3
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: LD_INT 4
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 4
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: NEG
50705: PUSH
50706: LD_INT 3
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: NEG
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: LD_INT 4
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 2
50736: NEG
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 4
50747: NEG
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 4
50758: NEG
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 3
50770: NEG
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 3
50781: NEG
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 4
50792: NEG
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 5
50803: NEG
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 5
50814: NEG
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 5
50826: NEG
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 3
50838: NEG
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: ST_TO_ADDR
// end ; end ;
50894: GO 50897
50896: POP
// case btype of b_depot , b_warehouse :
50897: LD_VAR 0 1
50901: PUSH
50902: LD_INT 0
50904: DOUBLE
50905: EQUAL
50906: IFTRUE 50916
50908: LD_INT 1
50910: DOUBLE
50911: EQUAL
50912: IFTRUE 50916
50914: GO 51117
50916: POP
// case nation of nation_american :
50917: LD_VAR 0 5
50921: PUSH
50922: LD_INT 1
50924: DOUBLE
50925: EQUAL
50926: IFTRUE 50930
50928: GO 50986
50930: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
50931: LD_ADDR_VAR 0 9
50935: PUSH
50936: LD_VAR 0 11
50940: PUSH
50941: LD_VAR 0 12
50945: PUSH
50946: LD_VAR 0 13
50950: PUSH
50951: LD_VAR 0 14
50955: PUSH
50956: LD_VAR 0 15
50960: PUSH
50961: LD_VAR 0 16
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: PUSH
50974: LD_VAR 0 4
50978: PUSH
50979: LD_INT 1
50981: PLUS
50982: ARRAY
50983: ST_TO_ADDR
50984: GO 51115
50986: LD_INT 2
50988: DOUBLE
50989: EQUAL
50990: IFTRUE 50994
50992: GO 51050
50994: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
50995: LD_ADDR_VAR 0 9
50999: PUSH
51000: LD_VAR 0 17
51004: PUSH
51005: LD_VAR 0 18
51009: PUSH
51010: LD_VAR 0 19
51014: PUSH
51015: LD_VAR 0 20
51019: PUSH
51020: LD_VAR 0 21
51024: PUSH
51025: LD_VAR 0 22
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: PUSH
51038: LD_VAR 0 4
51042: PUSH
51043: LD_INT 1
51045: PLUS
51046: ARRAY
51047: ST_TO_ADDR
51048: GO 51115
51050: LD_INT 3
51052: DOUBLE
51053: EQUAL
51054: IFTRUE 51058
51056: GO 51114
51058: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51059: LD_ADDR_VAR 0 9
51063: PUSH
51064: LD_VAR 0 23
51068: PUSH
51069: LD_VAR 0 24
51073: PUSH
51074: LD_VAR 0 25
51078: PUSH
51079: LD_VAR 0 26
51083: PUSH
51084: LD_VAR 0 27
51088: PUSH
51089: LD_VAR 0 28
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: PUSH
51102: LD_VAR 0 4
51106: PUSH
51107: LD_INT 1
51109: PLUS
51110: ARRAY
51111: ST_TO_ADDR
51112: GO 51115
51114: POP
51115: GO 51670
51117: LD_INT 2
51119: DOUBLE
51120: EQUAL
51121: IFTRUE 51131
51123: LD_INT 3
51125: DOUBLE
51126: EQUAL
51127: IFTRUE 51131
51129: GO 51187
51131: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51132: LD_ADDR_VAR 0 9
51136: PUSH
51137: LD_VAR 0 29
51141: PUSH
51142: LD_VAR 0 30
51146: PUSH
51147: LD_VAR 0 31
51151: PUSH
51152: LD_VAR 0 32
51156: PUSH
51157: LD_VAR 0 33
51161: PUSH
51162: LD_VAR 0 34
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: PUSH
51175: LD_VAR 0 4
51179: PUSH
51180: LD_INT 1
51182: PLUS
51183: ARRAY
51184: ST_TO_ADDR
51185: GO 51670
51187: LD_INT 16
51189: DOUBLE
51190: EQUAL
51191: IFTRUE 51249
51193: LD_INT 17
51195: DOUBLE
51196: EQUAL
51197: IFTRUE 51249
51199: LD_INT 18
51201: DOUBLE
51202: EQUAL
51203: IFTRUE 51249
51205: LD_INT 19
51207: DOUBLE
51208: EQUAL
51209: IFTRUE 51249
51211: LD_INT 22
51213: DOUBLE
51214: EQUAL
51215: IFTRUE 51249
51217: LD_INT 20
51219: DOUBLE
51220: EQUAL
51221: IFTRUE 51249
51223: LD_INT 21
51225: DOUBLE
51226: EQUAL
51227: IFTRUE 51249
51229: LD_INT 23
51231: DOUBLE
51232: EQUAL
51233: IFTRUE 51249
51235: LD_INT 24
51237: DOUBLE
51238: EQUAL
51239: IFTRUE 51249
51241: LD_INT 25
51243: DOUBLE
51244: EQUAL
51245: IFTRUE 51249
51247: GO 51305
51249: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51250: LD_ADDR_VAR 0 9
51254: PUSH
51255: LD_VAR 0 35
51259: PUSH
51260: LD_VAR 0 36
51264: PUSH
51265: LD_VAR 0 37
51269: PUSH
51270: LD_VAR 0 38
51274: PUSH
51275: LD_VAR 0 39
51279: PUSH
51280: LD_VAR 0 40
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: PUSH
51293: LD_VAR 0 4
51297: PUSH
51298: LD_INT 1
51300: PLUS
51301: ARRAY
51302: ST_TO_ADDR
51303: GO 51670
51305: LD_INT 6
51307: DOUBLE
51308: EQUAL
51309: IFTRUE 51361
51311: LD_INT 7
51313: DOUBLE
51314: EQUAL
51315: IFTRUE 51361
51317: LD_INT 8
51319: DOUBLE
51320: EQUAL
51321: IFTRUE 51361
51323: LD_INT 13
51325: DOUBLE
51326: EQUAL
51327: IFTRUE 51361
51329: LD_INT 12
51331: DOUBLE
51332: EQUAL
51333: IFTRUE 51361
51335: LD_INT 15
51337: DOUBLE
51338: EQUAL
51339: IFTRUE 51361
51341: LD_INT 11
51343: DOUBLE
51344: EQUAL
51345: IFTRUE 51361
51347: LD_INT 14
51349: DOUBLE
51350: EQUAL
51351: IFTRUE 51361
51353: LD_INT 10
51355: DOUBLE
51356: EQUAL
51357: IFTRUE 51361
51359: GO 51417
51361: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
51362: LD_ADDR_VAR 0 9
51366: PUSH
51367: LD_VAR 0 41
51371: PUSH
51372: LD_VAR 0 42
51376: PUSH
51377: LD_VAR 0 43
51381: PUSH
51382: LD_VAR 0 44
51386: PUSH
51387: LD_VAR 0 45
51391: PUSH
51392: LD_VAR 0 46
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: PUSH
51405: LD_VAR 0 4
51409: PUSH
51410: LD_INT 1
51412: PLUS
51413: ARRAY
51414: ST_TO_ADDR
51415: GO 51670
51417: LD_INT 36
51419: DOUBLE
51420: EQUAL
51421: IFTRUE 51425
51423: GO 51481
51425: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51426: LD_ADDR_VAR 0 9
51430: PUSH
51431: LD_VAR 0 47
51435: PUSH
51436: LD_VAR 0 48
51440: PUSH
51441: LD_VAR 0 49
51445: PUSH
51446: LD_VAR 0 50
51450: PUSH
51451: LD_VAR 0 51
51455: PUSH
51456: LD_VAR 0 52
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: PUSH
51469: LD_VAR 0 4
51473: PUSH
51474: LD_INT 1
51476: PLUS
51477: ARRAY
51478: ST_TO_ADDR
51479: GO 51670
51481: LD_INT 4
51483: DOUBLE
51484: EQUAL
51485: IFTRUE 51507
51487: LD_INT 5
51489: DOUBLE
51490: EQUAL
51491: IFTRUE 51507
51493: LD_INT 34
51495: DOUBLE
51496: EQUAL
51497: IFTRUE 51507
51499: LD_INT 37
51501: DOUBLE
51502: EQUAL
51503: IFTRUE 51507
51505: GO 51563
51507: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51508: LD_ADDR_VAR 0 9
51512: PUSH
51513: LD_VAR 0 53
51517: PUSH
51518: LD_VAR 0 54
51522: PUSH
51523: LD_VAR 0 55
51527: PUSH
51528: LD_VAR 0 56
51532: PUSH
51533: LD_VAR 0 57
51537: PUSH
51538: LD_VAR 0 58
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: PUSH
51551: LD_VAR 0 4
51555: PUSH
51556: LD_INT 1
51558: PLUS
51559: ARRAY
51560: ST_TO_ADDR
51561: GO 51670
51563: LD_INT 31
51565: DOUBLE
51566: EQUAL
51567: IFTRUE 51613
51569: LD_INT 32
51571: DOUBLE
51572: EQUAL
51573: IFTRUE 51613
51575: LD_INT 33
51577: DOUBLE
51578: EQUAL
51579: IFTRUE 51613
51581: LD_INT 27
51583: DOUBLE
51584: EQUAL
51585: IFTRUE 51613
51587: LD_INT 26
51589: DOUBLE
51590: EQUAL
51591: IFTRUE 51613
51593: LD_INT 28
51595: DOUBLE
51596: EQUAL
51597: IFTRUE 51613
51599: LD_INT 29
51601: DOUBLE
51602: EQUAL
51603: IFTRUE 51613
51605: LD_INT 30
51607: DOUBLE
51608: EQUAL
51609: IFTRUE 51613
51611: GO 51669
51613: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
51614: LD_ADDR_VAR 0 9
51618: PUSH
51619: LD_VAR 0 59
51623: PUSH
51624: LD_VAR 0 60
51628: PUSH
51629: LD_VAR 0 61
51633: PUSH
51634: LD_VAR 0 62
51638: PUSH
51639: LD_VAR 0 63
51643: PUSH
51644: LD_VAR 0 64
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: PUSH
51657: LD_VAR 0 4
51661: PUSH
51662: LD_INT 1
51664: PLUS
51665: ARRAY
51666: ST_TO_ADDR
51667: GO 51670
51669: POP
// temp_list2 = [ ] ;
51670: LD_ADDR_VAR 0 10
51674: PUSH
51675: EMPTY
51676: ST_TO_ADDR
// for i in temp_list do
51677: LD_ADDR_VAR 0 8
51681: PUSH
51682: LD_VAR 0 9
51686: PUSH
51687: FOR_IN
51688: IFFALSE 51740
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51690: LD_ADDR_VAR 0 10
51694: PUSH
51695: LD_VAR 0 10
51699: PUSH
51700: LD_VAR 0 8
51704: PUSH
51705: LD_INT 1
51707: ARRAY
51708: PUSH
51709: LD_VAR 0 2
51713: PLUS
51714: PUSH
51715: LD_VAR 0 8
51719: PUSH
51720: LD_INT 2
51722: ARRAY
51723: PUSH
51724: LD_VAR 0 3
51728: PLUS
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: EMPTY
51735: LIST
51736: ADD
51737: ST_TO_ADDR
51738: GO 51687
51740: POP
51741: POP
// result = temp_list2 ;
51742: LD_ADDR_VAR 0 7
51746: PUSH
51747: LD_VAR 0 10
51751: ST_TO_ADDR
// end ;
51752: LD_VAR 0 7
51756: RET
// export function EnemyInRange ( unit , dist ) ; begin
51757: LD_INT 0
51759: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51760: LD_ADDR_VAR 0 3
51764: PUSH
51765: LD_VAR 0 1
51769: PPUSH
51770: CALL_OW 255
51774: PPUSH
51775: LD_VAR 0 1
51779: PPUSH
51780: CALL_OW 250
51784: PPUSH
51785: LD_VAR 0 1
51789: PPUSH
51790: CALL_OW 251
51794: PPUSH
51795: LD_VAR 0 2
51799: PPUSH
51800: CALL 25861 0 4
51804: PUSH
51805: LD_INT 4
51807: ARRAY
51808: ST_TO_ADDR
// end ;
51809: LD_VAR 0 3
51813: RET
// export function PlayerSeeMe ( unit ) ; begin
51814: LD_INT 0
51816: PPUSH
// result := See ( your_side , unit ) ;
51817: LD_ADDR_VAR 0 2
51821: PUSH
51822: LD_OWVAR 2
51826: PPUSH
51827: LD_VAR 0 1
51831: PPUSH
51832: CALL_OW 292
51836: ST_TO_ADDR
// end ;
51837: LD_VAR 0 2
51841: RET
// export function ReverseDir ( unit ) ; begin
51842: LD_INT 0
51844: PPUSH
// if not unit then
51845: LD_VAR 0 1
51849: NOT
51850: IFFALSE 51854
// exit ;
51852: GO 51877
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51854: LD_ADDR_VAR 0 2
51858: PUSH
51859: LD_VAR 0 1
51863: PPUSH
51864: CALL_OW 254
51868: PUSH
51869: LD_INT 3
51871: PLUS
51872: PUSH
51873: LD_INT 6
51875: MOD
51876: ST_TO_ADDR
// end ;
51877: LD_VAR 0 2
51881: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51882: LD_INT 0
51884: PPUSH
51885: PPUSH
51886: PPUSH
51887: PPUSH
51888: PPUSH
// if not hexes then
51889: LD_VAR 0 2
51893: NOT
51894: IFFALSE 51898
// exit ;
51896: GO 52046
// dist := 9999 ;
51898: LD_ADDR_VAR 0 5
51902: PUSH
51903: LD_INT 9999
51905: ST_TO_ADDR
// for i = 1 to hexes do
51906: LD_ADDR_VAR 0 4
51910: PUSH
51911: DOUBLE
51912: LD_INT 1
51914: DEC
51915: ST_TO_ADDR
51916: LD_VAR 0 2
51920: PUSH
51921: FOR_TO
51922: IFFALSE 52034
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51924: LD_VAR 0 1
51928: PPUSH
51929: LD_VAR 0 2
51933: PUSH
51934: LD_VAR 0 4
51938: ARRAY
51939: PUSH
51940: LD_INT 1
51942: ARRAY
51943: PPUSH
51944: LD_VAR 0 2
51948: PUSH
51949: LD_VAR 0 4
51953: ARRAY
51954: PUSH
51955: LD_INT 2
51957: ARRAY
51958: PPUSH
51959: CALL_OW 297
51963: PUSH
51964: LD_VAR 0 5
51968: LESS
51969: IFFALSE 52032
// begin hex := hexes [ i ] ;
51971: LD_ADDR_VAR 0 7
51975: PUSH
51976: LD_VAR 0 2
51980: PUSH
51981: LD_VAR 0 4
51985: ARRAY
51986: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51987: LD_ADDR_VAR 0 5
51991: PUSH
51992: LD_VAR 0 1
51996: PPUSH
51997: LD_VAR 0 2
52001: PUSH
52002: LD_VAR 0 4
52006: ARRAY
52007: PUSH
52008: LD_INT 1
52010: ARRAY
52011: PPUSH
52012: LD_VAR 0 2
52016: PUSH
52017: LD_VAR 0 4
52021: ARRAY
52022: PUSH
52023: LD_INT 2
52025: ARRAY
52026: PPUSH
52027: CALL_OW 297
52031: ST_TO_ADDR
// end ; end ;
52032: GO 51921
52034: POP
52035: POP
// result := hex ;
52036: LD_ADDR_VAR 0 3
52040: PUSH
52041: LD_VAR 0 7
52045: ST_TO_ADDR
// end ;
52046: LD_VAR 0 3
52050: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52051: LD_INT 0
52053: PPUSH
52054: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52055: LD_VAR 0 1
52059: NOT
52060: PUSH
52061: LD_VAR 0 1
52065: PUSH
52066: LD_INT 21
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 23
52078: PUSH
52079: LD_INT 2
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PPUSH
52090: CALL_OW 69
52094: IN
52095: NOT
52096: OR
52097: IFFALSE 52101
// exit ;
52099: GO 52148
// for i = 1 to 3 do
52101: LD_ADDR_VAR 0 3
52105: PUSH
52106: DOUBLE
52107: LD_INT 1
52109: DEC
52110: ST_TO_ADDR
52111: LD_INT 3
52113: PUSH
52114: FOR_TO
52115: IFFALSE 52146
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52117: LD_VAR 0 1
52121: PPUSH
52122: CALL_OW 250
52126: PPUSH
52127: LD_VAR 0 1
52131: PPUSH
52132: CALL_OW 251
52136: PPUSH
52137: LD_INT 1
52139: PPUSH
52140: CALL_OW 453
52144: GO 52114
52146: POP
52147: POP
// end ;
52148: LD_VAR 0 2
52152: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52153: LD_INT 0
52155: PPUSH
52156: PPUSH
52157: PPUSH
52158: PPUSH
52159: PPUSH
52160: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52161: LD_VAR 0 1
52165: NOT
52166: PUSH
52167: LD_VAR 0 2
52171: NOT
52172: OR
52173: PUSH
52174: LD_VAR 0 1
52178: PPUSH
52179: CALL_OW 314
52183: OR
52184: IFFALSE 52188
// exit ;
52186: GO 52629
// x := GetX ( enemy_unit ) ;
52188: LD_ADDR_VAR 0 7
52192: PUSH
52193: LD_VAR 0 2
52197: PPUSH
52198: CALL_OW 250
52202: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52203: LD_ADDR_VAR 0 8
52207: PUSH
52208: LD_VAR 0 2
52212: PPUSH
52213: CALL_OW 251
52217: ST_TO_ADDR
// if not x or not y then
52218: LD_VAR 0 7
52222: NOT
52223: PUSH
52224: LD_VAR 0 8
52228: NOT
52229: OR
52230: IFFALSE 52234
// exit ;
52232: GO 52629
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52234: LD_ADDR_VAR 0 6
52238: PUSH
52239: LD_VAR 0 7
52243: PPUSH
52244: LD_INT 0
52246: PPUSH
52247: LD_INT 4
52249: PPUSH
52250: CALL_OW 272
52254: PUSH
52255: LD_VAR 0 8
52259: PPUSH
52260: LD_INT 0
52262: PPUSH
52263: LD_INT 4
52265: PPUSH
52266: CALL_OW 273
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_VAR 0 7
52279: PPUSH
52280: LD_INT 1
52282: PPUSH
52283: LD_INT 4
52285: PPUSH
52286: CALL_OW 272
52290: PUSH
52291: LD_VAR 0 8
52295: PPUSH
52296: LD_INT 1
52298: PPUSH
52299: LD_INT 4
52301: PPUSH
52302: CALL_OW 273
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_VAR 0 7
52315: PPUSH
52316: LD_INT 2
52318: PPUSH
52319: LD_INT 4
52321: PPUSH
52322: CALL_OW 272
52326: PUSH
52327: LD_VAR 0 8
52331: PPUSH
52332: LD_INT 2
52334: PPUSH
52335: LD_INT 4
52337: PPUSH
52338: CALL_OW 273
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_VAR 0 7
52351: PPUSH
52352: LD_INT 3
52354: PPUSH
52355: LD_INT 4
52357: PPUSH
52358: CALL_OW 272
52362: PUSH
52363: LD_VAR 0 8
52367: PPUSH
52368: LD_INT 3
52370: PPUSH
52371: LD_INT 4
52373: PPUSH
52374: CALL_OW 273
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_VAR 0 7
52387: PPUSH
52388: LD_INT 4
52390: PPUSH
52391: LD_INT 4
52393: PPUSH
52394: CALL_OW 272
52398: PUSH
52399: LD_VAR 0 8
52403: PPUSH
52404: LD_INT 4
52406: PPUSH
52407: LD_INT 4
52409: PPUSH
52410: CALL_OW 273
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_VAR 0 7
52423: PPUSH
52424: LD_INT 5
52426: PPUSH
52427: LD_INT 4
52429: PPUSH
52430: CALL_OW 272
52434: PUSH
52435: LD_VAR 0 8
52439: PPUSH
52440: LD_INT 5
52442: PPUSH
52443: LD_INT 4
52445: PPUSH
52446: CALL_OW 273
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: ST_TO_ADDR
// for i = tmp downto 1 do
52463: LD_ADDR_VAR 0 4
52467: PUSH
52468: DOUBLE
52469: LD_VAR 0 6
52473: INC
52474: ST_TO_ADDR
52475: LD_INT 1
52477: PUSH
52478: FOR_DOWNTO
52479: IFFALSE 52580
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52481: LD_VAR 0 6
52485: PUSH
52486: LD_VAR 0 4
52490: ARRAY
52491: PUSH
52492: LD_INT 1
52494: ARRAY
52495: PPUSH
52496: LD_VAR 0 6
52500: PUSH
52501: LD_VAR 0 4
52505: ARRAY
52506: PUSH
52507: LD_INT 2
52509: ARRAY
52510: PPUSH
52511: CALL_OW 488
52515: NOT
52516: PUSH
52517: LD_VAR 0 6
52521: PUSH
52522: LD_VAR 0 4
52526: ARRAY
52527: PUSH
52528: LD_INT 1
52530: ARRAY
52531: PPUSH
52532: LD_VAR 0 6
52536: PUSH
52537: LD_VAR 0 4
52541: ARRAY
52542: PUSH
52543: LD_INT 2
52545: ARRAY
52546: PPUSH
52547: CALL_OW 428
52551: PUSH
52552: LD_INT 0
52554: NONEQUAL
52555: OR
52556: IFFALSE 52578
// tmp := Delete ( tmp , i ) ;
52558: LD_ADDR_VAR 0 6
52562: PUSH
52563: LD_VAR 0 6
52567: PPUSH
52568: LD_VAR 0 4
52572: PPUSH
52573: CALL_OW 3
52577: ST_TO_ADDR
52578: GO 52478
52580: POP
52581: POP
// j := GetClosestHex ( unit , tmp ) ;
52582: LD_ADDR_VAR 0 5
52586: PUSH
52587: LD_VAR 0 1
52591: PPUSH
52592: LD_VAR 0 6
52596: PPUSH
52597: CALL 51882 0 2
52601: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52602: LD_VAR 0 1
52606: PPUSH
52607: LD_VAR 0 5
52611: PUSH
52612: LD_INT 1
52614: ARRAY
52615: PPUSH
52616: LD_VAR 0 5
52620: PUSH
52621: LD_INT 2
52623: ARRAY
52624: PPUSH
52625: CALL_OW 111
// end ;
52629: LD_VAR 0 3
52633: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52634: LD_INT 0
52636: PPUSH
52637: PPUSH
52638: PPUSH
// uc_side = 0 ;
52639: LD_ADDR_OWVAR 20
52643: PUSH
52644: LD_INT 0
52646: ST_TO_ADDR
// uc_nation = 0 ;
52647: LD_ADDR_OWVAR 21
52651: PUSH
52652: LD_INT 0
52654: ST_TO_ADDR
// InitHc ;
52655: CALL_OW 19
// InitVc ;
52659: CALL_OW 20
// if mastodonts then
52663: LD_VAR 0 6
52667: IFFALSE 52734
// for i = 1 to mastodonts do
52669: LD_ADDR_VAR 0 11
52673: PUSH
52674: DOUBLE
52675: LD_INT 1
52677: DEC
52678: ST_TO_ADDR
52679: LD_VAR 0 6
52683: PUSH
52684: FOR_TO
52685: IFFALSE 52732
// begin vc_chassis := 31 ;
52687: LD_ADDR_OWVAR 37
52691: PUSH
52692: LD_INT 31
52694: ST_TO_ADDR
// vc_control := control_rider ;
52695: LD_ADDR_OWVAR 38
52699: PUSH
52700: LD_INT 4
52702: ST_TO_ADDR
// animal := CreateVehicle ;
52703: LD_ADDR_VAR 0 12
52707: PUSH
52708: CALL_OW 45
52712: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52713: LD_VAR 0 12
52717: PPUSH
52718: LD_VAR 0 8
52722: PPUSH
52723: LD_INT 0
52725: PPUSH
52726: CALL 54803 0 3
// end ;
52730: GO 52684
52732: POP
52733: POP
// if horses then
52734: LD_VAR 0 5
52738: IFFALSE 52805
// for i = 1 to horses do
52740: LD_ADDR_VAR 0 11
52744: PUSH
52745: DOUBLE
52746: LD_INT 1
52748: DEC
52749: ST_TO_ADDR
52750: LD_VAR 0 5
52754: PUSH
52755: FOR_TO
52756: IFFALSE 52803
// begin hc_class := 21 ;
52758: LD_ADDR_OWVAR 28
52762: PUSH
52763: LD_INT 21
52765: ST_TO_ADDR
// hc_gallery :=  ;
52766: LD_ADDR_OWVAR 33
52770: PUSH
52771: LD_STRING 
52773: ST_TO_ADDR
// animal := CreateHuman ;
52774: LD_ADDR_VAR 0 12
52778: PUSH
52779: CALL_OW 44
52783: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52784: LD_VAR 0 12
52788: PPUSH
52789: LD_VAR 0 8
52793: PPUSH
52794: LD_INT 0
52796: PPUSH
52797: CALL 54803 0 3
// end ;
52801: GO 52755
52803: POP
52804: POP
// if birds then
52805: LD_VAR 0 1
52809: IFFALSE 52876
// for i = 1 to birds do
52811: LD_ADDR_VAR 0 11
52815: PUSH
52816: DOUBLE
52817: LD_INT 1
52819: DEC
52820: ST_TO_ADDR
52821: LD_VAR 0 1
52825: PUSH
52826: FOR_TO
52827: IFFALSE 52874
// begin hc_class = 18 ;
52829: LD_ADDR_OWVAR 28
52833: PUSH
52834: LD_INT 18
52836: ST_TO_ADDR
// hc_gallery =  ;
52837: LD_ADDR_OWVAR 33
52841: PUSH
52842: LD_STRING 
52844: ST_TO_ADDR
// animal := CreateHuman ;
52845: LD_ADDR_VAR 0 12
52849: PUSH
52850: CALL_OW 44
52854: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52855: LD_VAR 0 12
52859: PPUSH
52860: LD_VAR 0 8
52864: PPUSH
52865: LD_INT 0
52867: PPUSH
52868: CALL 54803 0 3
// end ;
52872: GO 52826
52874: POP
52875: POP
// if tigers then
52876: LD_VAR 0 2
52880: IFFALSE 52964
// for i = 1 to tigers do
52882: LD_ADDR_VAR 0 11
52886: PUSH
52887: DOUBLE
52888: LD_INT 1
52890: DEC
52891: ST_TO_ADDR
52892: LD_VAR 0 2
52896: PUSH
52897: FOR_TO
52898: IFFALSE 52962
// begin hc_class = class_tiger ;
52900: LD_ADDR_OWVAR 28
52904: PUSH
52905: LD_INT 14
52907: ST_TO_ADDR
// hc_gallery =  ;
52908: LD_ADDR_OWVAR 33
52912: PUSH
52913: LD_STRING 
52915: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52916: LD_ADDR_OWVAR 35
52920: PUSH
52921: LD_INT 7
52923: NEG
52924: PPUSH
52925: LD_INT 7
52927: PPUSH
52928: CALL_OW 12
52932: ST_TO_ADDR
// animal := CreateHuman ;
52933: LD_ADDR_VAR 0 12
52937: PUSH
52938: CALL_OW 44
52942: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52943: LD_VAR 0 12
52947: PPUSH
52948: LD_VAR 0 8
52952: PPUSH
52953: LD_INT 0
52955: PPUSH
52956: CALL 54803 0 3
// end ;
52960: GO 52897
52962: POP
52963: POP
// if apemans then
52964: LD_VAR 0 3
52968: IFFALSE 53091
// for i = 1 to apemans do
52970: LD_ADDR_VAR 0 11
52974: PUSH
52975: DOUBLE
52976: LD_INT 1
52978: DEC
52979: ST_TO_ADDR
52980: LD_VAR 0 3
52984: PUSH
52985: FOR_TO
52986: IFFALSE 53089
// begin hc_class = class_apeman ;
52988: LD_ADDR_OWVAR 28
52992: PUSH
52993: LD_INT 12
52995: ST_TO_ADDR
// hc_gallery =  ;
52996: LD_ADDR_OWVAR 33
53000: PUSH
53001: LD_STRING 
53003: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
53004: LD_ADDR_OWVAR 35
53008: PUSH
53009: LD_INT 5
53011: NEG
53012: PPUSH
53013: LD_INT 5
53015: PPUSH
53016: CALL_OW 12
53020: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53021: LD_ADDR_OWVAR 31
53025: PUSH
53026: LD_INT 1
53028: PPUSH
53029: LD_INT 3
53031: PPUSH
53032: CALL_OW 12
53036: PUSH
53037: LD_INT 1
53039: PPUSH
53040: LD_INT 3
53042: PPUSH
53043: CALL_OW 12
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: ST_TO_ADDR
// animal := CreateHuman ;
53060: LD_ADDR_VAR 0 12
53064: PUSH
53065: CALL_OW 44
53069: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53070: LD_VAR 0 12
53074: PPUSH
53075: LD_VAR 0 8
53079: PPUSH
53080: LD_INT 0
53082: PPUSH
53083: CALL 54803 0 3
// end ;
53087: GO 52985
53089: POP
53090: POP
// if enchidnas then
53091: LD_VAR 0 4
53095: IFFALSE 53162
// for i = 1 to enchidnas do
53097: LD_ADDR_VAR 0 11
53101: PUSH
53102: DOUBLE
53103: LD_INT 1
53105: DEC
53106: ST_TO_ADDR
53107: LD_VAR 0 4
53111: PUSH
53112: FOR_TO
53113: IFFALSE 53160
// begin hc_class = 13 ;
53115: LD_ADDR_OWVAR 28
53119: PUSH
53120: LD_INT 13
53122: ST_TO_ADDR
// hc_gallery =  ;
53123: LD_ADDR_OWVAR 33
53127: PUSH
53128: LD_STRING 
53130: ST_TO_ADDR
// animal := CreateHuman ;
53131: LD_ADDR_VAR 0 12
53135: PUSH
53136: CALL_OW 44
53140: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53141: LD_VAR 0 12
53145: PPUSH
53146: LD_VAR 0 8
53150: PPUSH
53151: LD_INT 0
53153: PPUSH
53154: CALL 54803 0 3
// end ;
53158: GO 53112
53160: POP
53161: POP
// if fishes then
53162: LD_VAR 0 7
53166: IFFALSE 53233
// for i = 1 to fishes do
53168: LD_ADDR_VAR 0 11
53172: PUSH
53173: DOUBLE
53174: LD_INT 1
53176: DEC
53177: ST_TO_ADDR
53178: LD_VAR 0 7
53182: PUSH
53183: FOR_TO
53184: IFFALSE 53231
// begin hc_class = 20 ;
53186: LD_ADDR_OWVAR 28
53190: PUSH
53191: LD_INT 20
53193: ST_TO_ADDR
// hc_gallery =  ;
53194: LD_ADDR_OWVAR 33
53198: PUSH
53199: LD_STRING 
53201: ST_TO_ADDR
// animal := CreateHuman ;
53202: LD_ADDR_VAR 0 12
53206: PUSH
53207: CALL_OW 44
53211: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53212: LD_VAR 0 12
53216: PPUSH
53217: LD_VAR 0 9
53221: PPUSH
53222: LD_INT 0
53224: PPUSH
53225: CALL 54803 0 3
// end ;
53229: GO 53183
53231: POP
53232: POP
// end ;
53233: LD_VAR 0 10
53237: RET
// export function WantHeal ( sci , unit ) ; begin
53238: LD_INT 0
53240: PPUSH
// if GetTaskList ( sci ) > 0 then
53241: LD_VAR 0 1
53245: PPUSH
53246: CALL_OW 437
53250: PUSH
53251: LD_INT 0
53253: GREATER
53254: IFFALSE 53324
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53256: LD_VAR 0 1
53260: PPUSH
53261: CALL_OW 437
53265: PUSH
53266: LD_INT 1
53268: ARRAY
53269: PUSH
53270: LD_INT 1
53272: ARRAY
53273: PUSH
53274: LD_STRING l
53276: EQUAL
53277: PUSH
53278: LD_VAR 0 1
53282: PPUSH
53283: CALL_OW 437
53287: PUSH
53288: LD_INT 1
53290: ARRAY
53291: PUSH
53292: LD_INT 4
53294: ARRAY
53295: PUSH
53296: LD_VAR 0 2
53300: EQUAL
53301: AND
53302: IFFALSE 53314
// result := true else
53304: LD_ADDR_VAR 0 3
53308: PUSH
53309: LD_INT 1
53311: ST_TO_ADDR
53312: GO 53322
// result := false ;
53314: LD_ADDR_VAR 0 3
53318: PUSH
53319: LD_INT 0
53321: ST_TO_ADDR
// end else
53322: GO 53332
// result := false ;
53324: LD_ADDR_VAR 0 3
53328: PUSH
53329: LD_INT 0
53331: ST_TO_ADDR
// end ;
53332: LD_VAR 0 3
53336: RET
// export function HealTarget ( sci ) ; begin
53337: LD_INT 0
53339: PPUSH
// if not sci then
53340: LD_VAR 0 1
53344: NOT
53345: IFFALSE 53349
// exit ;
53347: GO 53414
// result := 0 ;
53349: LD_ADDR_VAR 0 2
53353: PUSH
53354: LD_INT 0
53356: ST_TO_ADDR
// if GetTaskList ( sci ) then
53357: LD_VAR 0 1
53361: PPUSH
53362: CALL_OW 437
53366: IFFALSE 53414
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53368: LD_VAR 0 1
53372: PPUSH
53373: CALL_OW 437
53377: PUSH
53378: LD_INT 1
53380: ARRAY
53381: PUSH
53382: LD_INT 1
53384: ARRAY
53385: PUSH
53386: LD_STRING l
53388: EQUAL
53389: IFFALSE 53414
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53391: LD_ADDR_VAR 0 2
53395: PUSH
53396: LD_VAR 0 1
53400: PPUSH
53401: CALL_OW 437
53405: PUSH
53406: LD_INT 1
53408: ARRAY
53409: PUSH
53410: LD_INT 4
53412: ARRAY
53413: ST_TO_ADDR
// end ;
53414: LD_VAR 0 2
53418: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53419: LD_INT 0
53421: PPUSH
53422: PPUSH
53423: PPUSH
53424: PPUSH
// if not base_units then
53425: LD_VAR 0 1
53429: NOT
53430: IFFALSE 53434
// exit ;
53432: GO 53521
// result := false ;
53434: LD_ADDR_VAR 0 2
53438: PUSH
53439: LD_INT 0
53441: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53442: LD_ADDR_VAR 0 5
53446: PUSH
53447: LD_VAR 0 1
53451: PPUSH
53452: LD_INT 21
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PPUSH
53462: CALL_OW 72
53466: ST_TO_ADDR
// if not tmp then
53467: LD_VAR 0 5
53471: NOT
53472: IFFALSE 53476
// exit ;
53474: GO 53521
// for i in tmp do
53476: LD_ADDR_VAR 0 3
53480: PUSH
53481: LD_VAR 0 5
53485: PUSH
53486: FOR_IN
53487: IFFALSE 53519
// begin result := EnemyInRange ( i , 22 ) ;
53489: LD_ADDR_VAR 0 2
53493: PUSH
53494: LD_VAR 0 3
53498: PPUSH
53499: LD_INT 22
53501: PPUSH
53502: CALL 51757 0 2
53506: ST_TO_ADDR
// if result then
53507: LD_VAR 0 2
53511: IFFALSE 53517
// exit ;
53513: POP
53514: POP
53515: GO 53521
// end ;
53517: GO 53486
53519: POP
53520: POP
// end ;
53521: LD_VAR 0 2
53525: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
53526: LD_INT 0
53528: PPUSH
53529: PPUSH
// if not units then
53530: LD_VAR 0 1
53534: NOT
53535: IFFALSE 53539
// exit ;
53537: GO 53609
// result := [ ] ;
53539: LD_ADDR_VAR 0 3
53543: PUSH
53544: EMPTY
53545: ST_TO_ADDR
// for i in units do
53546: LD_ADDR_VAR 0 4
53550: PUSH
53551: LD_VAR 0 1
53555: PUSH
53556: FOR_IN
53557: IFFALSE 53607
// if GetTag ( i ) = tag then
53559: LD_VAR 0 4
53563: PPUSH
53564: CALL_OW 110
53568: PUSH
53569: LD_VAR 0 2
53573: EQUAL
53574: IFFALSE 53605
// result := Insert ( result , result + 1 , i ) ;
53576: LD_ADDR_VAR 0 3
53580: PUSH
53581: LD_VAR 0 3
53585: PPUSH
53586: LD_VAR 0 3
53590: PUSH
53591: LD_INT 1
53593: PLUS
53594: PPUSH
53595: LD_VAR 0 4
53599: PPUSH
53600: CALL_OW 2
53604: ST_TO_ADDR
53605: GO 53556
53607: POP
53608: POP
// end ;
53609: LD_VAR 0 3
53613: RET
// export function IsDriver ( un ) ; begin
53614: LD_INT 0
53616: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53617: LD_ADDR_VAR 0 2
53621: PUSH
53622: LD_VAR 0 1
53626: PUSH
53627: LD_INT 55
53629: PUSH
53630: EMPTY
53631: LIST
53632: PPUSH
53633: CALL_OW 69
53637: IN
53638: ST_TO_ADDR
// end ;
53639: LD_VAR 0 2
53643: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53644: LD_INT 0
53646: PPUSH
53647: PPUSH
// list := [ ] ;
53648: LD_ADDR_VAR 0 5
53652: PUSH
53653: EMPTY
53654: ST_TO_ADDR
// case d of 0 :
53655: LD_VAR 0 3
53659: PUSH
53660: LD_INT 0
53662: DOUBLE
53663: EQUAL
53664: IFTRUE 53668
53666: GO 53801
53668: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53669: LD_ADDR_VAR 0 5
53673: PUSH
53674: LD_VAR 0 1
53678: PUSH
53679: LD_INT 4
53681: MINUS
53682: PUSH
53683: LD_VAR 0 2
53687: PUSH
53688: LD_INT 4
53690: MINUS
53691: PUSH
53692: LD_INT 2
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: LIST
53699: PUSH
53700: LD_VAR 0 1
53704: PUSH
53705: LD_INT 3
53707: MINUS
53708: PUSH
53709: LD_VAR 0 2
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: LIST
53721: PUSH
53722: LD_VAR 0 1
53726: PUSH
53727: LD_INT 4
53729: PLUS
53730: PUSH
53731: LD_VAR 0 2
53735: PUSH
53736: LD_INT 4
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: LIST
53743: PUSH
53744: LD_VAR 0 1
53748: PUSH
53749: LD_INT 3
53751: PLUS
53752: PUSH
53753: LD_VAR 0 2
53757: PUSH
53758: LD_INT 3
53760: PLUS
53761: PUSH
53762: LD_INT 5
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: LIST
53769: PUSH
53770: LD_VAR 0 1
53774: PUSH
53775: LD_VAR 0 2
53779: PUSH
53780: LD_INT 4
53782: PLUS
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: LIST
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: ST_TO_ADDR
// end ; 1 :
53799: GO 54499
53801: LD_INT 1
53803: DOUBLE
53804: EQUAL
53805: IFTRUE 53809
53807: GO 53942
53809: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53810: LD_ADDR_VAR 0 5
53814: PUSH
53815: LD_VAR 0 1
53819: PUSH
53820: LD_VAR 0 2
53824: PUSH
53825: LD_INT 4
53827: MINUS
53828: PUSH
53829: LD_INT 3
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: LIST
53836: PUSH
53837: LD_VAR 0 1
53841: PUSH
53842: LD_INT 3
53844: MINUS
53845: PUSH
53846: LD_VAR 0 2
53850: PUSH
53851: LD_INT 3
53853: MINUS
53854: PUSH
53855: LD_INT 2
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: LIST
53862: PUSH
53863: LD_VAR 0 1
53867: PUSH
53868: LD_INT 4
53870: MINUS
53871: PUSH
53872: LD_VAR 0 2
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: LIST
53884: PUSH
53885: LD_VAR 0 1
53889: PUSH
53890: LD_VAR 0 2
53894: PUSH
53895: LD_INT 3
53897: PLUS
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: LIST
53906: PUSH
53907: LD_VAR 0 1
53911: PUSH
53912: LD_INT 4
53914: PLUS
53915: PUSH
53916: LD_VAR 0 2
53920: PUSH
53921: LD_INT 4
53923: PLUS
53924: PUSH
53925: LD_INT 5
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: LIST
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: ST_TO_ADDR
// end ; 2 :
53940: GO 54499
53942: LD_INT 2
53944: DOUBLE
53945: EQUAL
53946: IFTRUE 53950
53948: GO 54079
53950: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53951: LD_ADDR_VAR 0 5
53955: PUSH
53956: LD_VAR 0 1
53960: PUSH
53961: LD_VAR 0 2
53965: PUSH
53966: LD_INT 3
53968: MINUS
53969: PUSH
53970: LD_INT 3
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: LIST
53977: PUSH
53978: LD_VAR 0 1
53982: PUSH
53983: LD_INT 4
53985: PLUS
53986: PUSH
53987: LD_VAR 0 2
53991: PUSH
53992: LD_INT 4
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: LIST
53999: PUSH
54000: LD_VAR 0 1
54004: PUSH
54005: LD_VAR 0 2
54009: PUSH
54010: LD_INT 4
54012: PLUS
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: LIST
54021: PUSH
54022: LD_VAR 0 1
54026: PUSH
54027: LD_INT 3
54029: MINUS
54030: PUSH
54031: LD_VAR 0 2
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: LIST
54043: PUSH
54044: LD_VAR 0 1
54048: PUSH
54049: LD_INT 4
54051: MINUS
54052: PUSH
54053: LD_VAR 0 2
54057: PUSH
54058: LD_INT 4
54060: MINUS
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: LIST
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: ST_TO_ADDR
// end ; 3 :
54077: GO 54499
54079: LD_INT 3
54081: DOUBLE
54082: EQUAL
54083: IFTRUE 54087
54085: GO 54220
54087: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54088: LD_ADDR_VAR 0 5
54092: PUSH
54093: LD_VAR 0 1
54097: PUSH
54098: LD_INT 3
54100: PLUS
54101: PUSH
54102: LD_VAR 0 2
54106: PUSH
54107: LD_INT 4
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: LIST
54114: PUSH
54115: LD_VAR 0 1
54119: PUSH
54120: LD_INT 4
54122: PLUS
54123: PUSH
54124: LD_VAR 0 2
54128: PUSH
54129: LD_INT 4
54131: PLUS
54132: PUSH
54133: LD_INT 5
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: LIST
54140: PUSH
54141: LD_VAR 0 1
54145: PUSH
54146: LD_INT 4
54148: MINUS
54149: PUSH
54150: LD_VAR 0 2
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: LIST
54162: PUSH
54163: LD_VAR 0 1
54167: PUSH
54168: LD_VAR 0 2
54172: PUSH
54173: LD_INT 4
54175: MINUS
54176: PUSH
54177: LD_INT 3
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: LIST
54184: PUSH
54185: LD_VAR 0 1
54189: PUSH
54190: LD_INT 3
54192: MINUS
54193: PUSH
54194: LD_VAR 0 2
54198: PUSH
54199: LD_INT 3
54201: MINUS
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: LIST
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: ST_TO_ADDR
// end ; 4 :
54218: GO 54499
54220: LD_INT 4
54222: DOUBLE
54223: EQUAL
54224: IFTRUE 54228
54226: GO 54361
54228: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54229: LD_ADDR_VAR 0 5
54233: PUSH
54234: LD_VAR 0 1
54238: PUSH
54239: LD_VAR 0 2
54243: PUSH
54244: LD_INT 4
54246: PLUS
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: LIST
54255: PUSH
54256: LD_VAR 0 1
54260: PUSH
54261: LD_INT 3
54263: PLUS
54264: PUSH
54265: LD_VAR 0 2
54269: PUSH
54270: LD_INT 3
54272: PLUS
54273: PUSH
54274: LD_INT 5
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: LIST
54281: PUSH
54282: LD_VAR 0 1
54286: PUSH
54287: LD_INT 4
54289: PLUS
54290: PUSH
54291: LD_VAR 0 2
54295: PUSH
54296: LD_INT 4
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: LIST
54303: PUSH
54304: LD_VAR 0 1
54308: PUSH
54309: LD_VAR 0 2
54313: PUSH
54314: LD_INT 3
54316: MINUS
54317: PUSH
54318: LD_INT 3
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: LIST
54325: PUSH
54326: LD_VAR 0 1
54330: PUSH
54331: LD_INT 4
54333: MINUS
54334: PUSH
54335: LD_VAR 0 2
54339: PUSH
54340: LD_INT 4
54342: MINUS
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: LIST
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: ST_TO_ADDR
// end ; 5 :
54359: GO 54499
54361: LD_INT 5
54363: DOUBLE
54364: EQUAL
54365: IFTRUE 54369
54367: GO 54498
54369: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54370: LD_ADDR_VAR 0 5
54374: PUSH
54375: LD_VAR 0 1
54379: PUSH
54380: LD_INT 4
54382: MINUS
54383: PUSH
54384: LD_VAR 0 2
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: LIST
54396: PUSH
54397: LD_VAR 0 1
54401: PUSH
54402: LD_VAR 0 2
54406: PUSH
54407: LD_INT 4
54409: MINUS
54410: PUSH
54411: LD_INT 3
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: LIST
54418: PUSH
54419: LD_VAR 0 1
54423: PUSH
54424: LD_INT 4
54426: PLUS
54427: PUSH
54428: LD_VAR 0 2
54432: PUSH
54433: LD_INT 4
54435: PLUS
54436: PUSH
54437: LD_INT 5
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: LIST
54444: PUSH
54445: LD_VAR 0 1
54449: PUSH
54450: LD_INT 3
54452: PLUS
54453: PUSH
54454: LD_VAR 0 2
54458: PUSH
54459: LD_INT 4
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: LIST
54466: PUSH
54467: LD_VAR 0 1
54471: PUSH
54472: LD_VAR 0 2
54476: PUSH
54477: LD_INT 3
54479: PLUS
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: LIST
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: ST_TO_ADDR
// end ; end ;
54496: GO 54499
54498: POP
// result := list ;
54499: LD_ADDR_VAR 0 4
54503: PUSH
54504: LD_VAR 0 5
54508: ST_TO_ADDR
// end ;
54509: LD_VAR 0 4
54513: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54514: LD_INT 0
54516: PPUSH
54517: PPUSH
54518: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54519: LD_VAR 0 1
54523: NOT
54524: PUSH
54525: LD_VAR 0 2
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: LD_INT 4
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: IN
54548: NOT
54549: OR
54550: IFFALSE 54554
// exit ;
54552: GO 54646
// tmp := [ ] ;
54554: LD_ADDR_VAR 0 5
54558: PUSH
54559: EMPTY
54560: ST_TO_ADDR
// for i in units do
54561: LD_ADDR_VAR 0 4
54565: PUSH
54566: LD_VAR 0 1
54570: PUSH
54571: FOR_IN
54572: IFFALSE 54615
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54574: LD_ADDR_VAR 0 5
54578: PUSH
54579: LD_VAR 0 5
54583: PPUSH
54584: LD_VAR 0 5
54588: PUSH
54589: LD_INT 1
54591: PLUS
54592: PPUSH
54593: LD_VAR 0 4
54597: PPUSH
54598: LD_VAR 0 2
54602: PPUSH
54603: CALL_OW 259
54607: PPUSH
54608: CALL_OW 2
54612: ST_TO_ADDR
54613: GO 54571
54615: POP
54616: POP
// if not tmp then
54617: LD_VAR 0 5
54621: NOT
54622: IFFALSE 54626
// exit ;
54624: GO 54646
// result := SortListByListDesc ( units , tmp ) ;
54626: LD_ADDR_VAR 0 3
54630: PUSH
54631: LD_VAR 0 1
54635: PPUSH
54636: LD_VAR 0 5
54640: PPUSH
54641: CALL_OW 77
54645: ST_TO_ADDR
// end ;
54646: LD_VAR 0 3
54650: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54651: LD_INT 0
54653: PPUSH
54654: PPUSH
54655: PPUSH
// x := GetX ( building ) ;
54656: LD_ADDR_VAR 0 4
54660: PUSH
54661: LD_VAR 0 2
54665: PPUSH
54666: CALL_OW 250
54670: ST_TO_ADDR
// y := GetY ( building ) ;
54671: LD_ADDR_VAR 0 5
54675: PUSH
54676: LD_VAR 0 2
54680: PPUSH
54681: CALL_OW 251
54685: ST_TO_ADDR
// if GetTaskList ( unit ) then
54686: LD_VAR 0 1
54690: PPUSH
54691: CALL_OW 437
54695: IFFALSE 54790
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54697: LD_STRING e
54699: PUSH
54700: LD_VAR 0 1
54704: PPUSH
54705: CALL_OW 437
54709: PUSH
54710: LD_INT 1
54712: ARRAY
54713: PUSH
54714: LD_INT 1
54716: ARRAY
54717: EQUAL
54718: PUSH
54719: LD_VAR 0 4
54723: PUSH
54724: LD_VAR 0 1
54728: PPUSH
54729: CALL_OW 437
54733: PUSH
54734: LD_INT 1
54736: ARRAY
54737: PUSH
54738: LD_INT 2
54740: ARRAY
54741: EQUAL
54742: AND
54743: PUSH
54744: LD_VAR 0 5
54748: PUSH
54749: LD_VAR 0 1
54753: PPUSH
54754: CALL_OW 437
54758: PUSH
54759: LD_INT 1
54761: ARRAY
54762: PUSH
54763: LD_INT 3
54765: ARRAY
54766: EQUAL
54767: AND
54768: IFFALSE 54780
// result := true else
54770: LD_ADDR_VAR 0 3
54774: PUSH
54775: LD_INT 1
54777: ST_TO_ADDR
54778: GO 54788
// result := false ;
54780: LD_ADDR_VAR 0 3
54784: PUSH
54785: LD_INT 0
54787: ST_TO_ADDR
// end else
54788: GO 54798
// result := false ;
54790: LD_ADDR_VAR 0 3
54794: PUSH
54795: LD_INT 0
54797: ST_TO_ADDR
// end ;
54798: LD_VAR 0 3
54802: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54803: LD_INT 0
54805: PPUSH
54806: PPUSH
54807: PPUSH
54808: PPUSH
// if not unit or not area then
54809: LD_VAR 0 1
54813: NOT
54814: PUSH
54815: LD_VAR 0 2
54819: NOT
54820: OR
54821: IFFALSE 54825
// exit ;
54823: GO 54989
// tmp := AreaToList ( area , i ) ;
54825: LD_ADDR_VAR 0 6
54829: PUSH
54830: LD_VAR 0 2
54834: PPUSH
54835: LD_VAR 0 5
54839: PPUSH
54840: CALL_OW 517
54844: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54845: LD_ADDR_VAR 0 5
54849: PUSH
54850: DOUBLE
54851: LD_INT 1
54853: DEC
54854: ST_TO_ADDR
54855: LD_VAR 0 6
54859: PUSH
54860: LD_INT 1
54862: ARRAY
54863: PUSH
54864: FOR_TO
54865: IFFALSE 54987
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54867: LD_ADDR_VAR 0 7
54871: PUSH
54872: LD_VAR 0 6
54876: PUSH
54877: LD_INT 1
54879: ARRAY
54880: PUSH
54881: LD_VAR 0 5
54885: ARRAY
54886: PUSH
54887: LD_VAR 0 6
54891: PUSH
54892: LD_INT 2
54894: ARRAY
54895: PUSH
54896: LD_VAR 0 5
54900: ARRAY
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54906: LD_VAR 0 7
54910: PUSH
54911: LD_INT 1
54913: ARRAY
54914: PPUSH
54915: LD_VAR 0 7
54919: PUSH
54920: LD_INT 2
54922: ARRAY
54923: PPUSH
54924: CALL_OW 428
54928: PUSH
54929: LD_INT 0
54931: EQUAL
54932: IFFALSE 54985
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54934: LD_VAR 0 1
54938: PPUSH
54939: LD_VAR 0 7
54943: PUSH
54944: LD_INT 1
54946: ARRAY
54947: PPUSH
54948: LD_VAR 0 7
54952: PUSH
54953: LD_INT 2
54955: ARRAY
54956: PPUSH
54957: LD_VAR 0 3
54961: PPUSH
54962: CALL_OW 48
// result := IsPlaced ( unit ) ;
54966: LD_ADDR_VAR 0 4
54970: PUSH
54971: LD_VAR 0 1
54975: PPUSH
54976: CALL_OW 305
54980: ST_TO_ADDR
// exit ;
54981: POP
54982: POP
54983: GO 54989
// end ; end ;
54985: GO 54864
54987: POP
54988: POP
// end ;
54989: LD_VAR 0 4
54993: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54994: LD_INT 0
54996: PPUSH
54997: PPUSH
54998: PPUSH
// if not side or side > 8 then
54999: LD_VAR 0 1
55003: NOT
55004: PUSH
55005: LD_VAR 0 1
55009: PUSH
55010: LD_INT 8
55012: GREATER
55013: OR
55014: IFFALSE 55018
// exit ;
55016: GO 55205
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55018: LD_ADDR_VAR 0 4
55022: PUSH
55023: LD_INT 22
55025: PUSH
55026: LD_VAR 0 1
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 21
55037: PUSH
55038: LD_INT 3
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PPUSH
55049: CALL_OW 69
55053: ST_TO_ADDR
// if not tmp then
55054: LD_VAR 0 4
55058: NOT
55059: IFFALSE 55063
// exit ;
55061: GO 55205
// enable_addtolog := true ;
55063: LD_ADDR_OWVAR 81
55067: PUSH
55068: LD_INT 1
55070: ST_TO_ADDR
// AddToLog ( [ ) ;
55071: LD_STRING [
55073: PPUSH
55074: CALL_OW 561
// for i in tmp do
55078: LD_ADDR_VAR 0 3
55082: PUSH
55083: LD_VAR 0 4
55087: PUSH
55088: FOR_IN
55089: IFFALSE 55196
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55091: LD_STRING [
55093: PUSH
55094: LD_VAR 0 3
55098: PPUSH
55099: CALL_OW 266
55103: STR
55104: PUSH
55105: LD_STRING , 
55107: STR
55108: PUSH
55109: LD_VAR 0 3
55113: PPUSH
55114: CALL_OW 250
55118: STR
55119: PUSH
55120: LD_STRING , 
55122: STR
55123: PUSH
55124: LD_VAR 0 3
55128: PPUSH
55129: CALL_OW 251
55133: STR
55134: PUSH
55135: LD_STRING , 
55137: STR
55138: PUSH
55139: LD_VAR 0 3
55143: PPUSH
55144: CALL_OW 254
55148: STR
55149: PUSH
55150: LD_STRING , 
55152: STR
55153: PUSH
55154: LD_VAR 0 3
55158: PPUSH
55159: LD_INT 1
55161: PPUSH
55162: CALL_OW 268
55166: STR
55167: PUSH
55168: LD_STRING , 
55170: STR
55171: PUSH
55172: LD_VAR 0 3
55176: PPUSH
55177: LD_INT 2
55179: PPUSH
55180: CALL_OW 268
55184: STR
55185: PUSH
55186: LD_STRING ],
55188: STR
55189: PPUSH
55190: CALL_OW 561
// end ;
55194: GO 55088
55196: POP
55197: POP
// AddToLog ( ]; ) ;
55198: LD_STRING ];
55200: PPUSH
55201: CALL_OW 561
// end ;
55205: LD_VAR 0 2
55209: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55210: LD_INT 0
55212: PPUSH
55213: PPUSH
55214: PPUSH
55215: PPUSH
55216: PPUSH
// if not area or not rate or not max then
55217: LD_VAR 0 1
55221: NOT
55222: PUSH
55223: LD_VAR 0 2
55227: NOT
55228: OR
55229: PUSH
55230: LD_VAR 0 4
55234: NOT
55235: OR
55236: IFFALSE 55240
// exit ;
55238: GO 55432
// while 1 do
55240: LD_INT 1
55242: IFFALSE 55432
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55244: LD_ADDR_VAR 0 9
55248: PUSH
55249: LD_VAR 0 1
55253: PPUSH
55254: LD_INT 1
55256: PPUSH
55257: CALL_OW 287
55261: PUSH
55262: LD_INT 10
55264: MUL
55265: ST_TO_ADDR
// r := rate / 10 ;
55266: LD_ADDR_VAR 0 7
55270: PUSH
55271: LD_VAR 0 2
55275: PUSH
55276: LD_INT 10
55278: DIVREAL
55279: ST_TO_ADDR
// time := 1 1$00 ;
55280: LD_ADDR_VAR 0 8
55284: PUSH
55285: LD_INT 2100
55287: ST_TO_ADDR
// if amount < min then
55288: LD_VAR 0 9
55292: PUSH
55293: LD_VAR 0 3
55297: LESS
55298: IFFALSE 55316
// r := r * 2 else
55300: LD_ADDR_VAR 0 7
55304: PUSH
55305: LD_VAR 0 7
55309: PUSH
55310: LD_INT 2
55312: MUL
55313: ST_TO_ADDR
55314: GO 55342
// if amount > max then
55316: LD_VAR 0 9
55320: PUSH
55321: LD_VAR 0 4
55325: GREATER
55326: IFFALSE 55342
// r := r / 2 ;
55328: LD_ADDR_VAR 0 7
55332: PUSH
55333: LD_VAR 0 7
55337: PUSH
55338: LD_INT 2
55340: DIVREAL
55341: ST_TO_ADDR
// time := time / r ;
55342: LD_ADDR_VAR 0 8
55346: PUSH
55347: LD_VAR 0 8
55351: PUSH
55352: LD_VAR 0 7
55356: DIVREAL
55357: ST_TO_ADDR
// if time < 0 then
55358: LD_VAR 0 8
55362: PUSH
55363: LD_INT 0
55365: LESS
55366: IFFALSE 55383
// time := time * - 1 ;
55368: LD_ADDR_VAR 0 8
55372: PUSH
55373: LD_VAR 0 8
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: MUL
55382: ST_TO_ADDR
// wait ( time ) ;
55383: LD_VAR 0 8
55387: PPUSH
55388: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
55392: LD_INT 35
55394: PPUSH
55395: LD_INT 875
55397: PPUSH
55398: CALL_OW 12
55402: PPUSH
55403: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55407: LD_INT 1
55409: PPUSH
55410: LD_INT 5
55412: PPUSH
55413: CALL_OW 12
55417: PPUSH
55418: LD_VAR 0 1
55422: PPUSH
55423: LD_INT 1
55425: PPUSH
55426: CALL_OW 55
// end ;
55430: GO 55240
// end ;
55432: LD_VAR 0 5
55436: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55437: LD_INT 0
55439: PPUSH
55440: PPUSH
55441: PPUSH
55442: PPUSH
55443: PPUSH
55444: PPUSH
55445: PPUSH
55446: PPUSH
// if not turrets or not factories then
55447: LD_VAR 0 1
55451: NOT
55452: PUSH
55453: LD_VAR 0 2
55457: NOT
55458: OR
55459: IFFALSE 55463
// exit ;
55461: GO 55770
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55463: LD_ADDR_VAR 0 10
55467: PUSH
55468: LD_INT 5
55470: PUSH
55471: LD_INT 6
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: LD_INT 4
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 3
55490: PUSH
55491: LD_INT 5
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 24
55505: PUSH
55506: LD_INT 25
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 23
55515: PUSH
55516: LD_INT 27
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 42
55529: PUSH
55530: LD_INT 43
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 44
55539: PUSH
55540: LD_INT 46
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 45
55549: PUSH
55550: LD_INT 47
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: LIST
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: LIST
55566: ST_TO_ADDR
// result := [ ] ;
55567: LD_ADDR_VAR 0 3
55571: PUSH
55572: EMPTY
55573: ST_TO_ADDR
// for i in turrets do
55574: LD_ADDR_VAR 0 4
55578: PUSH
55579: LD_VAR 0 1
55583: PUSH
55584: FOR_IN
55585: IFFALSE 55768
// begin nat := GetNation ( i ) ;
55587: LD_ADDR_VAR 0 7
55591: PUSH
55592: LD_VAR 0 4
55596: PPUSH
55597: CALL_OW 248
55601: ST_TO_ADDR
// weapon := 0 ;
55602: LD_ADDR_VAR 0 8
55606: PUSH
55607: LD_INT 0
55609: ST_TO_ADDR
// if not nat then
55610: LD_VAR 0 7
55614: NOT
55615: IFFALSE 55619
// continue ;
55617: GO 55584
// for j in list [ nat ] do
55619: LD_ADDR_VAR 0 5
55623: PUSH
55624: LD_VAR 0 10
55628: PUSH
55629: LD_VAR 0 7
55633: ARRAY
55634: PUSH
55635: FOR_IN
55636: IFFALSE 55677
// if GetBWeapon ( i ) = j [ 1 ] then
55638: LD_VAR 0 4
55642: PPUSH
55643: CALL_OW 269
55647: PUSH
55648: LD_VAR 0 5
55652: PUSH
55653: LD_INT 1
55655: ARRAY
55656: EQUAL
55657: IFFALSE 55675
// begin weapon := j [ 2 ] ;
55659: LD_ADDR_VAR 0 8
55663: PUSH
55664: LD_VAR 0 5
55668: PUSH
55669: LD_INT 2
55671: ARRAY
55672: ST_TO_ADDR
// break ;
55673: GO 55677
// end ;
55675: GO 55635
55677: POP
55678: POP
// if not weapon then
55679: LD_VAR 0 8
55683: NOT
55684: IFFALSE 55688
// continue ;
55686: GO 55584
// for k in factories do
55688: LD_ADDR_VAR 0 6
55692: PUSH
55693: LD_VAR 0 2
55697: PUSH
55698: FOR_IN
55699: IFFALSE 55764
// begin weapons := AvailableWeaponList ( k ) ;
55701: LD_ADDR_VAR 0 9
55705: PUSH
55706: LD_VAR 0 6
55710: PPUSH
55711: CALL_OW 478
55715: ST_TO_ADDR
// if not weapons then
55716: LD_VAR 0 9
55720: NOT
55721: IFFALSE 55725
// continue ;
55723: GO 55698
// if weapon in weapons then
55725: LD_VAR 0 8
55729: PUSH
55730: LD_VAR 0 9
55734: IN
55735: IFFALSE 55762
// begin result := [ i , weapon ] ;
55737: LD_ADDR_VAR 0 3
55741: PUSH
55742: LD_VAR 0 4
55746: PUSH
55747: LD_VAR 0 8
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: ST_TO_ADDR
// exit ;
55756: POP
55757: POP
55758: POP
55759: POP
55760: GO 55770
// end ; end ;
55762: GO 55698
55764: POP
55765: POP
// end ;
55766: GO 55584
55768: POP
55769: POP
// end ;
55770: LD_VAR 0 3
55774: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55775: LD_INT 0
55777: PPUSH
// if not side or side > 8 then
55778: LD_VAR 0 3
55782: NOT
55783: PUSH
55784: LD_VAR 0 3
55788: PUSH
55789: LD_INT 8
55791: GREATER
55792: OR
55793: IFFALSE 55797
// exit ;
55795: GO 55856
// if not range then
55797: LD_VAR 0 4
55801: NOT
55802: IFFALSE 55813
// range := - 12 ;
55804: LD_ADDR_VAR 0 4
55808: PUSH
55809: LD_INT 12
55811: NEG
55812: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55813: LD_VAR 0 1
55817: PPUSH
55818: LD_VAR 0 2
55822: PPUSH
55823: LD_VAR 0 3
55827: PPUSH
55828: LD_VAR 0 4
55832: PPUSH
55833: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55837: LD_VAR 0 1
55841: PPUSH
55842: LD_VAR 0 2
55846: PPUSH
55847: LD_VAR 0 3
55851: PPUSH
55852: CALL_OW 331
// end ;
55856: LD_VAR 0 5
55860: RET
// export function Video ( mode ) ; begin
55861: LD_INT 0
55863: PPUSH
// ingame_video = mode ;
55864: LD_ADDR_OWVAR 52
55868: PUSH
55869: LD_VAR 0 1
55873: ST_TO_ADDR
// interface_hidden = mode ;
55874: LD_ADDR_OWVAR 54
55878: PUSH
55879: LD_VAR 0 1
55883: ST_TO_ADDR
// end ;
55884: LD_VAR 0 2
55888: RET
// export function Join ( array , element ) ; begin
55889: LD_INT 0
55891: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55892: LD_ADDR_VAR 0 3
55896: PUSH
55897: LD_VAR 0 1
55901: PPUSH
55902: LD_VAR 0 1
55906: PUSH
55907: LD_INT 1
55909: PLUS
55910: PPUSH
55911: LD_VAR 0 2
55915: PPUSH
55916: CALL_OW 1
55920: ST_TO_ADDR
// end ;
55921: LD_VAR 0 3
55925: RET
// export function JoinUnion ( array , element ) ; begin
55926: LD_INT 0
55928: PPUSH
// result := array union element ;
55929: LD_ADDR_VAR 0 3
55933: PUSH
55934: LD_VAR 0 1
55938: PUSH
55939: LD_VAR 0 2
55943: UNION
55944: ST_TO_ADDR
// end ;
55945: LD_VAR 0 3
55949: RET
// export function GetBehemoths ( side ) ; begin
55950: LD_INT 0
55952: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55953: LD_ADDR_VAR 0 2
55957: PUSH
55958: LD_INT 22
55960: PUSH
55961: LD_VAR 0 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 31
55972: PUSH
55973: LD_INT 25
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PPUSH
55984: CALL_OW 69
55988: ST_TO_ADDR
// end ;
55989: LD_VAR 0 2
55993: RET
// export function Shuffle ( array ) ; var i , index ; begin
55994: LD_INT 0
55996: PPUSH
55997: PPUSH
55998: PPUSH
// result := [ ] ;
55999: LD_ADDR_VAR 0 2
56003: PUSH
56004: EMPTY
56005: ST_TO_ADDR
// if not array then
56006: LD_VAR 0 1
56010: NOT
56011: IFFALSE 56015
// exit ;
56013: GO 56114
// Randomize ;
56015: CALL_OW 10
// for i = array downto 1 do
56019: LD_ADDR_VAR 0 3
56023: PUSH
56024: DOUBLE
56025: LD_VAR 0 1
56029: INC
56030: ST_TO_ADDR
56031: LD_INT 1
56033: PUSH
56034: FOR_DOWNTO
56035: IFFALSE 56112
// begin index := rand ( 1 , array ) ;
56037: LD_ADDR_VAR 0 4
56041: PUSH
56042: LD_INT 1
56044: PPUSH
56045: LD_VAR 0 1
56049: PPUSH
56050: CALL_OW 12
56054: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56055: LD_ADDR_VAR 0 2
56059: PUSH
56060: LD_VAR 0 2
56064: PPUSH
56065: LD_VAR 0 2
56069: PUSH
56070: LD_INT 1
56072: PLUS
56073: PPUSH
56074: LD_VAR 0 1
56078: PUSH
56079: LD_VAR 0 4
56083: ARRAY
56084: PPUSH
56085: CALL_OW 2
56089: ST_TO_ADDR
// array := Delete ( array , index ) ;
56090: LD_ADDR_VAR 0 1
56094: PUSH
56095: LD_VAR 0 1
56099: PPUSH
56100: LD_VAR 0 4
56104: PPUSH
56105: CALL_OW 3
56109: ST_TO_ADDR
// end ;
56110: GO 56034
56112: POP
56113: POP
// end ;
56114: LD_VAR 0 2
56118: RET
// export function GetBaseMaterials ( base ) ; begin
56119: LD_INT 0
56121: PPUSH
// result := [ 0 , 0 , 0 ] ;
56122: LD_ADDR_VAR 0 2
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: LIST
56140: ST_TO_ADDR
// if not base then
56141: LD_VAR 0 1
56145: NOT
56146: IFFALSE 56150
// exit ;
56148: GO 56199
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56150: LD_ADDR_VAR 0 2
56154: PUSH
56155: LD_VAR 0 1
56159: PPUSH
56160: LD_INT 1
56162: PPUSH
56163: CALL_OW 275
56167: PUSH
56168: LD_VAR 0 1
56172: PPUSH
56173: LD_INT 2
56175: PPUSH
56176: CALL_OW 275
56180: PUSH
56181: LD_VAR 0 1
56185: PPUSH
56186: LD_INT 3
56188: PPUSH
56189: CALL_OW 275
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: LIST
56198: ST_TO_ADDR
// end ;
56199: LD_VAR 0 2
56203: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56204: LD_INT 0
56206: PPUSH
56207: PPUSH
// result := array ;
56208: LD_ADDR_VAR 0 3
56212: PUSH
56213: LD_VAR 0 1
56217: ST_TO_ADDR
// if size > 0 then
56218: LD_VAR 0 2
56222: PUSH
56223: LD_INT 0
56225: GREATER
56226: IFFALSE 56272
// for i := array downto size do
56228: LD_ADDR_VAR 0 4
56232: PUSH
56233: DOUBLE
56234: LD_VAR 0 1
56238: INC
56239: ST_TO_ADDR
56240: LD_VAR 0 2
56244: PUSH
56245: FOR_DOWNTO
56246: IFFALSE 56270
// result := Delete ( result , result ) ;
56248: LD_ADDR_VAR 0 3
56252: PUSH
56253: LD_VAR 0 3
56257: PPUSH
56258: LD_VAR 0 3
56262: PPUSH
56263: CALL_OW 3
56267: ST_TO_ADDR
56268: GO 56245
56270: POP
56271: POP
// end ;
56272: LD_VAR 0 3
56276: RET
// export function ComExit ( unit ) ; var tmp ; begin
56277: LD_INT 0
56279: PPUSH
56280: PPUSH
// if not IsInUnit ( unit ) then
56281: LD_VAR 0 1
56285: PPUSH
56286: CALL_OW 310
56290: NOT
56291: IFFALSE 56295
// exit ;
56293: GO 56355
// tmp := IsInUnit ( unit ) ;
56295: LD_ADDR_VAR 0 3
56299: PUSH
56300: LD_VAR 0 1
56304: PPUSH
56305: CALL_OW 310
56309: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56310: LD_VAR 0 3
56314: PPUSH
56315: CALL_OW 247
56319: PUSH
56320: LD_INT 2
56322: EQUAL
56323: IFFALSE 56336
// ComExitVehicle ( unit ) else
56325: LD_VAR 0 1
56329: PPUSH
56330: CALL_OW 121
56334: GO 56345
// ComExitBuilding ( unit ) ;
56336: LD_VAR 0 1
56340: PPUSH
56341: CALL_OW 122
// result := tmp ;
56345: LD_ADDR_VAR 0 2
56349: PUSH
56350: LD_VAR 0 3
56354: ST_TO_ADDR
// end ;
56355: LD_VAR 0 2
56359: RET
// export function ResetHc ; begin
56360: LD_INT 0
56362: PPUSH
// InitHc ;
56363: CALL_OW 19
// hc_importance := 0 ;
56367: LD_ADDR_OWVAR 32
56371: PUSH
56372: LD_INT 0
56374: ST_TO_ADDR
// end ;
56375: LD_VAR 0 1
56379: RET
