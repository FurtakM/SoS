// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 59751 0 9
// PrepareAmerican ;
  46: CALL 4099 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 923 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 26388 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 26388 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 26388 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 451
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 413
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 411
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: PUSH
 366: LD_VAR 0 3
 370: PPUSH
 371: CALL_OW 258
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: AND
 380: PUSH
 381: LD_VAR 0 3
 385: PPUSH
 386: CALL_OW 248
 390: PUSH
 391: LD_INT 3
 393: EQUAL
 394: AND
 395: IFFALSE 409
// begin RuSci := i ;
 397: LD_ADDR_EXP 17
 401: PUSH
 402: LD_VAR 0 3
 406: ST_TO_ADDR
// break ;
 407: GO 411
// end ;
 409: GO 349
 411: POP
 412: POP
// end ; if not RuSci then
 413: LD_EXP 17
 417: NOT
 418: IFFALSE 451
// begin uc_nation := 3 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 3
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 4
 433: PPUSH
 434: LD_INT 10
 436: PPUSH
 437: CALL_OW 380
// RuSci := CreateHuman ;
 441: LD_ADDR_EXP 17
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 451: LD_ADDR_VAR 0 6
 455: PUSH
 456: LD_STRING 14a_JMMVeh
 458: PPUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 30
 489: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 490: LD_ADDR_VAR 0 7
 494: PUSH
 495: LD_STRING 14a_BurlakVeh
 497: PPUSH
 498: LD_INT 22
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 1
 506: PUSH
 507: LD_INT 51
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 30
 528: ST_TO_ADDR
// uc_direction := 4 ;
 529: LD_ADDR_OWVAR 24
 533: PUSH
 534: LD_INT 4
 536: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 6
 549: ARRAY
 550: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 551: LD_VAR 0 6
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_VAR 0 6
 564: PUSH
 565: LD_INT 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 6
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 6
 582: PUSH
 583: LD_INT 4
 585: ARRAY
 586: PPUSH
 587: LD_INT 60
 589: PPUSH
 590: LD_INT 80
 592: PPUSH
 593: CALL_OW 12
 597: PPUSH
 598: CALL 31252 0 5
// JMMVeh := CreateVehicle ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: CALL_OW 45
 611: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 61986 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 627: LD_VAR 0 6
 631: PUSH
 632: LD_INT 5
 634: ARRAY
 635: PUSH
 636: LD_INT 0
 638: NONEQUAL
 639: IFFALSE 659
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 6
 650: PUSH
 651: LD_INT 5
 653: ARRAY
 654: PPUSH
 655: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 659: LD_EXP 14
 663: PPUSH
 664: LD_VAR 0 4
 668: PPUSH
 669: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 673: LD_ADDR_OWVAR 21
 677: PUSH
 678: LD_VAR 0 7
 682: PUSH
 683: LD_INT 6
 685: ARRAY
 686: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 687: LD_VAR 0 7
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: PPUSH
 696: LD_VAR 0 7
 700: PUSH
 701: LD_INT 2
 703: ARRAY
 704: PPUSH
 705: LD_VAR 0 7
 709: PUSH
 710: LD_INT 3
 712: ARRAY
 713: PPUSH
 714: LD_VAR 0 7
 718: PUSH
 719: LD_INT 4
 721: ARRAY
 722: PPUSH
 723: LD_INT 60
 725: PPUSH
 726: LD_INT 80
 728: PPUSH
 729: CALL_OW 12
 733: PPUSH
 734: CALL 31252 0 5
// BurlakVeh := CreateVehicle ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 748: LD_VAR 0 5
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 61986 0 3
 763: NOT
 764: IFFALSE 784
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 766: LD_VAR 0 5
 770: PPUSH
 771: LD_INT 233
 773: PPUSH
 774: LD_INT 85
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 784: LD_VAR 0 7
 788: PUSH
 789: LD_INT 5
 791: ARRAY
 792: PUSH
 793: LD_INT 0
 795: NONEQUAL
 796: IFFALSE 816
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_VAR 0 7
 807: PUSH
 808: LD_INT 5
 810: ARRAY
 811: PPUSH
 812: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 816: LD_EXP 15
 820: PPUSH
 821: LD_VAR 0 5
 825: PPUSH
 826: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_INT 178
 837: PUSH
 838: LD_INT 91
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 137
 847: PUSH
 848: LD_INT 83
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 157
 857: PUSH
 858: LD_INT 75
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 162
 867: PUSH
 868: LD_INT 67
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 887: LD_INT 4
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 58
// end ; end_of_file
 918: LD_VAR 0 1
 922: RET
// export function Action ; begin
 923: LD_INT 0
 925: PPUSH
// InGameOn ;
 926: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 930: LD_INT 221
 932: PPUSH
 933: LD_INT 80
 935: PPUSH
 936: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 940: LD_EXP 14
 944: PUSH
 945: LD_EXP 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: LD_INT 217
 956: PPUSH
 957: LD_INT 79
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$7 ) ;
 964: LD_INT 245
 966: PPUSH
 967: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 971: LD_EXP 14
 975: PUSH
 976: LD_EXP 15
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 989: LD_EXP 15
 993: PPUSH
 994: LD_STRING D2-Bur-1
 996: PPUSH
 997: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1001: LD_EXP 14
1005: PPUSH
1006: LD_STRING D2-JMM-1
1008: PPUSH
1009: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1013: LD_INT 18
1015: PPUSH
1016: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1020: LD_EXP 15
1024: PPUSH
1025: LD_EXP 14
1029: PPUSH
1030: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1034: LD_EXP 15
1038: PPUSH
1039: LD_STRING D2-Bur-2
1041: PPUSH
1042: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1046: LD_EXP 15
1050: PPUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 2
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: PPUSH
1066: LD_EXP 15
1070: PPUSH
1071: CALL_OW 74
1075: PPUSH
1076: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1080: LD_EXP 14
1084: PPUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 2
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL_OW 69
1099: PPUSH
1100: LD_EXP 14
1104: PPUSH
1105: CALL_OW 74
1109: PPUSH
1110: CALL_OW 120
// wait ( 0 0$1 ) ;
1114: LD_INT 35
1116: PPUSH
1117: CALL_OW 67
// InGameOff ;
1121: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1125: LD_STRING MArtPickup
1127: PPUSH
1128: CALL_OW 337
// end ;
1132: LD_VAR 0 1
1136: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1137: LD_EXP 22
1141: PPUSH
1142: LD_INT 101
1144: PUSH
1145: LD_INT 7
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: PUSH
1157: LD_EXP 8
1161: NOT
1162: AND
1163: IFFALSE 1192
1165: GO 1167
1167: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING D3-Bur-1
1175: PPUSH
1176: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1180: LD_EXP 14
1184: PPUSH
1185: LD_STRING D3-JMM-1
1187: PPUSH
1188: CALL_OW 88
// end ;
1192: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1193: LD_INT 5
1195: PPUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 70
1210: IFFALSE 1545
1212: GO 1214
1214: DISABLE
// begin wait ( 0 0$3 ) ;
1215: LD_INT 105
1217: PPUSH
1218: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1222: LD_INT 139
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 7
1230: PPUSH
1231: LD_INT 20
1233: NEG
1234: PPUSH
1235: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1239: LD_INT 139
1241: PPUSH
1242: LD_INT 43
1244: PPUSH
1245: LD_INT 7
1247: PPUSH
1248: CALL_OW 331
// DialogueOn ;
1252: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1256: LD_EXP 14
1260: PPUSH
1261: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1265: LD_EXP 14
1269: PPUSH
1270: LD_STRING D3a-JMM-1
1272: PPUSH
1273: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1277: LD_EXP 15
1281: PPUSH
1282: LD_STRING D3a-Bur-1
1284: PPUSH
1285: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_STRING D3a-JMM-2
1296: PPUSH
1297: CALL_OW 88
// if Joan then
1301: LD_EXP 16
1305: IFFALSE 1321
// SayRadio ( Joan , D3a-Joan-2 ) else
1307: LD_EXP 16
1311: PPUSH
1312: LD_STRING D3a-Joan-2
1314: PPUSH
1315: CALL_OW 94
1319: GO 1333
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1321: LD_EXP 17
1325: PPUSH
1326: LD_STRING D3a-RSci1-2
1328: PPUSH
1329: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_STRING D3a-Huck-2
1340: PPUSH
1341: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_STRING D3a-Pow-2
1352: PPUSH
1353: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1357: LD_EXP 18
1361: PPUSH
1362: LD_STRING D3a-Huck-3
1364: PPUSH
1365: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1369: LD_EXP 19
1373: PPUSH
1374: LD_STRING D3a-Pow-3
1376: PPUSH
1377: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1381: LD_EXP 18
1385: PPUSH
1386: LD_STRING D3a-Huck-4
1388: PPUSH
1389: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1393: LD_EXP 14
1397: PPUSH
1398: LD_STRING D3a-JMM-4
1400: PPUSH
1401: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1405: LD_EXP 15
1409: PPUSH
1410: LD_STRING D3a-Bur-4
1412: PPUSH
1413: CALL_OW 88
// if Joan then
1417: LD_EXP 16
1421: IFFALSE 1437
// SayRadio ( Joan , D3a-Joan-4 ) else
1423: LD_EXP 16
1427: PPUSH
1428: LD_STRING D3a-Joan-4
1430: PPUSH
1431: CALL_OW 94
1435: GO 1449
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1437: LD_EXP 17
1441: PPUSH
1442: LD_STRING D3a-RSci1-4
1444: PPUSH
1445: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1449: LD_INT 133
1451: PPUSH
1452: LD_INT 43
1454: PPUSH
1455: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1459: LD_INT 10
1461: PPUSH
1462: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1466: LD_EXP 14
1470: PPUSH
1471: LD_STRING D3a-JMM-5
1473: PPUSH
1474: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1478: LD_EXP 15
1482: PPUSH
1483: LD_STRING D3a-Bur-5
1485: PPUSH
1486: CALL_OW 88
// DialogueOff ;
1490: CALL_OW 7
// seenBase := true ;
1494: LD_ADDR_EXP 8
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1502: LD_INT 525
1504: PUSH
1505: LD_INT 420
1507: PUSH
1508: LD_INT 315
1510: PUSH
1511: LD_INT 280
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PPUSH
1526: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1530: LD_EXP 21
1534: PPUSH
1535: LD_INT 142
1537: PPUSH
1538: LD_INT 52
1540: PPUSH
1541: CALL_OW 116
// end ;
1545: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1546: LD_EXP 8
1550: NOT
1551: PUSH
1552: LD_EXP 4
1556: NOT
1557: AND
1558: IFFALSE 1578
1560: GO 1562
1562: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1563: LD_EXP 21
1567: PPUSH
1568: LD_INT 142
1570: PPUSH
1571: LD_INT 52
1573: PPUSH
1574: CALL_OW 116
1578: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// contaminateTime := tick ;
1583: LD_ADDR_EXP 3
1587: PUSH
1588: LD_OWVAR 1
1592: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1593: LD_INT 175
1595: PPUSH
1596: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1600: LD_ADDR_VAR 0 5
1604: PUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 469
1612: ST_TO_ADDR
// if art then
1613: LD_VAR 0 5
1617: IFFALSE 1656
// if art [ 1 ] = 157 and art [ 2 ] = 75 then
1619: LD_VAR 0 5
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PUSH
1628: LD_INT 157
1630: EQUAL
1631: PUSH
1632: LD_VAR 0 5
1636: PUSH
1637: LD_INT 2
1639: ARRAY
1640: PUSH
1641: LD_INT 75
1643: EQUAL
1644: AND
1645: IFFALSE 1656
// begin YouLost ( Artefact ) ;
1647: LD_STRING Artefact
1649: PPUSH
1650: CALL_OW 104
// exit ;
1654: GO 1812
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1656: LD_EXP 14
1660: PPUSH
1661: CALL_OW 302
1665: PUSH
1666: LD_EXP 15
1670: PPUSH
1671: CALL_OW 302
1675: AND
1676: IFFALSE 1753
// begin DialogueOn ;
1678: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1682: LD_EXP 14
1686: PPUSH
1687: LD_STRING D6a-JMM-1
1689: PPUSH
1690: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1694: LD_EXP 15
1698: PPUSH
1699: LD_STRING D6a-Bur-1
1701: PPUSH
1702: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1706: LD_EXP 14
1710: PPUSH
1711: LD_STRING D6c-JMM-1
1713: PPUSH
1714: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1718: LD_EXP 15
1722: PPUSH
1723: LD_STRING D6c-Bur-1
1725: PPUSH
1726: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1730: LD_EXP 14
1734: PPUSH
1735: LD_STRING D6c-JMM-2
1737: PPUSH
1738: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1742: LD_STRING MBase
1744: PPUSH
1745: CALL_OW 337
// DialogueOff ;
1749: CALL_OW 7
// end ; bombExploded := true ;
1753: LD_ADDR_EXP 4
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1761: LD_INT 6300
1763: PUSH
1764: LD_INT 5250
1766: PUSH
1767: LD_INT 4200
1769: PUSH
1770: LD_INT 3500
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: LD_OWVAR 67
1783: ARRAY
1784: PPUSH
1785: CALL_OW 67
// if IsOk ( JMM ) then
1789: LD_EXP 14
1793: PPUSH
1794: CALL_OW 302
1798: IFFALSE 1812
// Say ( JMM , D8-JMM-1 ) ;
1800: LD_EXP 14
1804: PPUSH
1805: LD_STRING D8-JMM-1
1807: PPUSH
1808: CALL_OW 88
// end ;
1812: LD_VAR 0 4
1816: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1817: LD_EXP 9
1821: PUSH
1822: LD_EXP 7
1826: NOT
1827: AND
1828: PUSH
1829: LD_EXP 4
1833: AND
1834: IFFALSE 1889
1836: GO 1838
1838: DISABLE
// begin enable ;
1839: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1840: LD_INT 9
1842: PPUSH
1843: LD_INT 22
1845: PUSH
1846: LD_INT 7
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 70
1857: IFFALSE 1875
// stevensTimer := stevensTimer - 0 0$30 else
1859: LD_ADDR_EXP 9
1863: PUSH
1864: LD_EXP 9
1868: PUSH
1869: LD_INT 1050
1871: MINUS
1872: ST_TO_ADDR
1873: GO 1889
// stevensTimer := stevensTimer - 0 0$1 ;
1875: LD_ADDR_EXP 9
1879: PUSH
1880: LD_EXP 9
1884: PUSH
1885: LD_INT 35
1887: MINUS
1888: ST_TO_ADDR
// end ;
1889: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1890: LD_EXP 9
1894: PUSH
1895: LD_INT 0
1897: LESSEQUAL
1898: PUSH
1899: LD_EXP 7
1903: NOT
1904: AND
1905: IFFALSE 2069
1907: GO 1909
1909: DISABLE
1910: LD_INT 0
1912: PPUSH
1913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: LD_INT 22
1921: PUSH
1922: LD_INT 1
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 25
1931: PUSH
1932: LD_INT 4
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PPUSH
1943: CALL_OW 69
1947: ST_TO_ADDR
// for i in tmp do
1948: LD_ADDR_VAR 0 1
1952: PUSH
1953: LD_VAR 0 2
1957: PUSH
1958: FOR_IN
1959: IFFALSE 2012
// begin if IsInUnit ( i ) then
1961: LD_VAR 0 1
1965: PPUSH
1966: CALL_OW 310
1970: IFFALSE 1983
// ComExitBuilding ( i ) else
1972: LD_VAR 0 1
1976: PPUSH
1977: CALL_OW 122
1981: GO 2010
// if not HasTask ( i ) then
1983: LD_VAR 0 1
1987: PPUSH
1988: CALL_OW 314
1992: NOT
1993: IFFALSE 2010
// ComMoveXY ( i , 29 , 56 ) ;
1995: LD_VAR 0 1
1999: PPUSH
2000: LD_INT 29
2002: PPUSH
2003: LD_INT 56
2005: PPUSH
2006: CALL_OW 111
// end ;
2010: GO 1958
2012: POP
2013: POP
// repeat wait ( 0 0$1 ) ;
2014: LD_INT 35
2016: PPUSH
2017: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2021: LD_INT 8
2023: PPUSH
2024: LD_INT 22
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 4
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PPUSH
2048: CALL_OW 70
2052: IFFALSE 2014
// if planCaptured then
2054: LD_EXP 7
2058: IFFALSE 2062
// exit ;
2060: GO 2069
// YouLost ( Time ) ;
2062: LD_STRING Time
2064: PPUSH
2065: CALL_OW 104
// end ;
2069: PPOPN 2
2071: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2072: LD_INT 22
2074: PUSH
2075: LD_INT 7
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 92
2084: PUSH
2085: LD_INT 142
2087: PUSH
2088: LD_INT 52
2090: PUSH
2091: LD_INT 27
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PPUSH
2104: CALL_OW 69
2108: PUSH
2109: LD_EXP 3
2113: PUSH
2114: LD_INT 6000
2116: PLUS
2117: PUSH
2118: LD_OWVAR 1
2122: GREATER
2123: AND
2124: PUSH
2125: LD_EXP 4
2129: AND
2130: IFFALSE 2185
2132: GO 2134
2134: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2135: LD_EXP 14
2139: PUSH
2140: LD_EXP 15
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PPUSH
2149: CALL_OW 85
// DialogueOn ;
2153: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2157: LD_EXP 14
2161: PPUSH
2162: LD_STRING D6b-JMM-1
2164: PPUSH
2165: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2169: LD_EXP 15
2173: PPUSH
2174: LD_STRING D6b-Bur-1
2176: PPUSH
2177: CALL_OW 88
// DialogueOff ;
2181: CALL_OW 7
// end ;
2185: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2186: LD_EXP 15
2190: PPUSH
2191: LD_INT 142
2193: PPUSH
2194: LD_INT 52
2196: PPUSH
2197: CALL_OW 297
2201: PUSH
2202: LD_INT 25
2204: LESS
2205: PUSH
2206: LD_EXP 15
2210: PPUSH
2211: CALL_OW 310
2215: PPUSH
2216: LD_INT 142
2218: PPUSH
2219: LD_INT 52
2221: PPUSH
2222: CALL_OW 297
2226: PUSH
2227: LD_INT 25
2229: LESS
2230: OR
2231: PUSH
2232: LD_EXP 15
2236: PPUSH
2237: CALL_OW 256
2241: PUSH
2242: LD_INT 1000
2244: LESS
2245: AND
2246: PUSH
2247: LD_EXP 3
2251: PUSH
2252: LD_INT 6000
2254: PLUS
2255: PUSH
2256: LD_OWVAR 1
2260: GREATER
2261: AND
2262: PUSH
2263: LD_EXP 4
2267: AND
2268: IFFALSE 2301
2270: GO 2272
2272: DISABLE
// begin DialogueOn ;
2273: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2277: LD_EXP 15
2281: PPUSH
2282: LD_STRING D7-Bur-1
2284: PPUSH
2285: CALL_OW 88
// enteredContaminatedArea := true ;
2289: LD_ADDR_EXP 5
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// DialogueOff ;
2297: CALL_OW 7
// end ;
2301: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2302: LD_EXP 14
2306: PPUSH
2307: LD_INT 142
2309: PPUSH
2310: LD_INT 52
2312: PPUSH
2313: CALL_OW 297
2317: PUSH
2318: LD_INT 25
2320: LESS
2321: PUSH
2322: LD_EXP 14
2326: PPUSH
2327: CALL_OW 310
2331: PPUSH
2332: LD_INT 142
2334: PPUSH
2335: LD_INT 52
2337: PPUSH
2338: CALL_OW 297
2342: PUSH
2343: LD_INT 25
2345: LESS
2346: OR
2347: PUSH
2348: LD_EXP 14
2352: PPUSH
2353: CALL_OW 256
2357: PUSH
2358: LD_INT 1000
2360: LESS
2361: AND
2362: PUSH
2363: LD_EXP 3
2367: PUSH
2368: LD_INT 6000
2370: PLUS
2371: PUSH
2372: LD_OWVAR 1
2376: GREATER
2377: AND
2378: PUSH
2379: LD_EXP 4
2383: AND
2384: IFFALSE 2417
2386: GO 2388
2388: DISABLE
// begin DialogueOn ;
2389: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2393: LD_EXP 14
2397: PPUSH
2398: LD_STRING D7-JMM-1
2400: PPUSH
2401: CALL_OW 88
// enteredContaminatedArea := true ;
2405: LD_ADDR_EXP 5
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// DialogueOff ;
2413: CALL_OW 7
// end ;
2417: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2418: LD_EXP 6
2422: PUSH
2423: LD_EXP 14
2427: PPUSH
2428: CALL_OW 302
2432: AND
2433: PUSH
2434: LD_EXP 15
2438: PPUSH
2439: CALL_OW 302
2443: AND
2444: IFFALSE 2513
2446: GO 2448
2448: DISABLE
// begin DialogueOn ;
2449: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2453: LD_EXP 14
2457: PUSH
2458: LD_EXP 15
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PPUSH
2467: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2471: LD_EXP 14
2475: PPUSH
2476: LD_STRING D4-JMM-1
2478: PPUSH
2479: CALL_OW 88
// if not bombExploded then
2483: LD_EXP 4
2487: NOT
2488: IFFALSE 2502
// Say ( Burlak , D4-Bur-1 ) ;
2490: LD_EXP 15
2494: PPUSH
2495: LD_STRING D4-Bur-1
2497: PPUSH
2498: CALL_OW 88
// DialogueOff ;
2502: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2506: LD_STRING MReturn
2508: PPUSH
2509: CALL_OW 337
// end ;
2513: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2514: LD_EXP 7
2518: NOT
2519: PUSH
2520: LD_INT 22
2522: PUSH
2523: LD_INT 7
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 91
2532: PUSH
2533: LD_INT 9
2535: PUSH
2536: LD_INT 6
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: LIST
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PPUSH
2548: CALL_OW 69
2552: AND
2553: IFFALSE 2630
2555: GO 2557
2557: DISABLE
// begin DialogueOn ;
2558: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2562: LD_INT 55
2564: PPUSH
2565: LD_INT 11
2567: PPUSH
2568: LD_INT 7
2570: PPUSH
2571: LD_INT 6
2573: NEG
2574: PPUSH
2575: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2579: LD_INT 55
2581: PPUSH
2582: LD_INT 11
2584: PPUSH
2585: LD_INT 7
2587: PPUSH
2588: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2592: LD_EXP 15
2596: PPUSH
2597: LD_STRING D9-Bur-1
2599: PPUSH
2600: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2604: LD_EXP 14
2608: PPUSH
2609: LD_STRING D9-JMM-1
2611: PPUSH
2612: CALL_OW 88
// DialogueOff ;
2616: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2620: LD_INT 9
2622: PPUSH
2623: LD_INT 7
2625: PPUSH
2626: CALL_OW 235
// end ;
2630: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2631: LD_INT 9
2633: PPUSH
2634: LD_INT 22
2636: PUSH
2637: LD_INT 7
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: PPUSH
2644: CALL_OW 70
2648: IFFALSE 2684
2650: GO 2652
2652: DISABLE
// begin wait ( 0 0$07 ) ;
2653: LD_INT 245
2655: PPUSH
2656: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2660: LD_EXP 14
2664: PPUSH
2665: LD_STRING D10b-JMM-1
2667: PPUSH
2668: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2672: LD_EXP 15
2676: PPUSH
2677: LD_STRING D10b-Bur-1
2679: PPUSH
2680: CALL_OW 88
// end ;
2684: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2685: LD_EXP 9
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 1
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 25
2702: PUSH
2703: LD_INT 4
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 26
2712: PUSH
2713: LD_INT 1
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: PPUSH
2725: CALL_OW 69
2729: AND
2730: PUSH
2731: LD_INT 5
2733: PPUSH
2734: CALL_OW 255
2738: PUSH
2739: LD_INT 7
2741: EQUAL
2742: PUSH
2743: LD_INT 22
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 25
2755: PUSH
2756: LD_INT 1
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PPUSH
2767: CALL_OW 69
2771: PUSH
2772: LD_INT 0
2774: EQUAL
2775: OR
2776: AND
2777: IFFALSE 3366
2779: GO 2781
2781: DISABLE
2782: LD_INT 0
2784: PPUSH
// begin case Query ( QKill ) of 1 :
2785: LD_STRING QKill
2787: PPUSH
2788: CALL_OW 97
2792: PUSH
2793: LD_INT 1
2795: DOUBLE
2796: EQUAL
2797: IFTRUE 2801
2799: GO 3354
2801: POP
// begin DialogueOn ;
2802: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2806: LD_EXP 14
2810: PPUSH
2811: LD_STRING D10a-JMM-1
2813: PPUSH
2814: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2818: LD_EXP 15
2822: PPUSH
2823: LD_STRING D10a-Bur-1
2825: PPUSH
2826: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2830: LD_EXP 14
2834: PPUSH
2835: LD_STRING D10a-JMM-2
2837: PPUSH
2838: CALL_OW 88
// if IsOk ( Stevens ) then
2842: LD_EXP 18
2846: PPUSH
2847: CALL_OW 302
2851: IFFALSE 2867
// Say ( Stevens , D10a-Huck-2 ) else
2853: LD_EXP 18
2857: PPUSH
2858: LD_STRING D10a-Huck-2
2860: PPUSH
2861: CALL_OW 88
2865: GO 2918
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2867: LD_INT 22
2869: PUSH
2870: LD_INT 1
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 25
2879: PUSH
2880: LD_INT 4
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PUSH
2887: LD_INT 26
2889: PUSH
2890: LD_INT 1
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 69
2906: PUSH
2907: LD_INT 1
2909: ARRAY
2910: PPUSH
2911: LD_STRING D10a-ASci1-3
2913: PPUSH
2914: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2918: LD_EXP 14
2922: PPUSH
2923: LD_STRING D10a-JMM-4
2925: PPUSH
2926: CALL_OW 88
// if IsOk ( Stevens ) then
2930: LD_EXP 18
2934: PPUSH
2935: CALL_OW 302
2939: IFFALSE 2953
// Say ( Stevens , D10a-Huck-3 ) ;
2941: LD_EXP 18
2945: PPUSH
2946: LD_STRING D10a-Huck-3
2948: PPUSH
2949: CALL_OW 88
// DialogueOff ;
2953: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2957: LD_INT 1
2959: PPUSH
2960: LD_INT 7
2962: PPUSH
2963: LD_INT 1
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: CALL_OW 80
// planCaptured := true ;
2973: LD_ADDR_EXP 7
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2981: LD_STRING MEnd
2983: PPUSH
2984: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
2988: LD_STRING ACH_DIPLOMACY
2990: PPUSH
2991: CALL_OW 543
// canEnd := true ;
2995: LD_ADDR_EXP 10
2999: PUSH
3000: LD_INT 1
3002: ST_TO_ADDR
// missionTime := tick ;
3003: LD_ADDR_EXP 11
3007: PUSH
3008: LD_OWVAR 1
3012: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3013: LD_INT 35
3015: PPUSH
3016: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 3
3032: PUSH
3033: LD_INT 50
3035: PUSH
3036: EMPTY
3037: LIST
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PPUSH
3047: CALL_OW 69
3051: IFFALSE 3167
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3053: LD_ADDR_VAR 0 1
3057: PUSH
3058: LD_INT 22
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 25
3070: PUSH
3071: LD_INT 4
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 69
3086: PUSH
3087: FOR_IN
3088: IFFALSE 3165
// begin if IsInUnit ( i ) then
3090: LD_VAR 0 1
3094: PPUSH
3095: CALL_OW 310
3099: IFFALSE 3112
// ComExitBuilding ( i ) else
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 122
3110: GO 3163
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 22
3119: PUSH
3120: LD_INT 1
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 50
3132: PUSH
3133: EMPTY
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 128
// end ;
3163: GO 3087
3165: POP
3166: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3167: LD_INT 22
3169: PUSH
3170: LD_INT 1
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 3
3179: PUSH
3180: LD_INT 50
3182: PUSH
3183: EMPTY
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: PPUSH
3194: CALL_OW 69
3198: NOT
3199: IFFALSE 3013
// repeat wait ( 3 ) ;
3201: LD_INT 3
3203: PPUSH
3204: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 1
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 21
3225: PUSH
3226: LD_INT 1
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PPUSH
3237: CALL_OW 69
3241: PUSH
3242: FOR_IN
3243: IFFALSE 3319
// begin if IsInArea ( i , stevensEscapeArea ) then
3245: LD_VAR 0 1
3249: PPUSH
3250: LD_INT 8
3252: PPUSH
3253: CALL_OW 308
3257: IFFALSE 3270
// begin RemoveUnit ( i ) ;
3259: LD_VAR 0 1
3263: PPUSH
3264: CALL_OW 64
// continue ;
3268: GO 3242
// end ; if IsInUnit ( i ) then
3270: LD_VAR 0 1
3274: PPUSH
3275: CALL_OW 310
3279: IFFALSE 3290
// ComExitBuilding ( i ) ;
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 122
// if not HasTask ( i ) then
3290: LD_VAR 0 1
3294: PPUSH
3295: CALL_OW 314
3299: NOT
3300: IFFALSE 3317
// ComMoveXY ( i , 28 , 55 ) ;
3302: LD_VAR 0 1
3306: PPUSH
3307: LD_INT 28
3309: PPUSH
3310: LD_INT 55
3312: PPUSH
3313: CALL_OW 111
// end ;
3317: GO 3242
3319: POP
3320: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3321: LD_INT 22
3323: PUSH
3324: LD_INT 1
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 21
3333: PUSH
3334: LD_INT 1
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 69
3349: NOT
3350: IFFALSE 3201
// end ; 2 :
3352: GO 3366
3354: LD_INT 2
3356: DOUBLE
3357: EQUAL
3358: IFTRUE 3362
3360: GO 3365
3362: POP
// ; end ;
3363: GO 3366
3365: POP
// end ;
3366: PPOPN 1
3368: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3369: LD_EXP 10
3373: IFFALSE 3730
3375: GO 3377
3377: DISABLE
3378: LD_INT 0
3380: PPUSH
3381: PPUSH
3382: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3383: LD_INT 10
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: CALL_OW 424
// if Difficulty < 2 then
3393: LD_OWVAR 67
3397: PUSH
3398: LD_INT 2
3400: LESS
3401: IFFALSE 3405
// exit ;
3403: GO 3730
// uc_side := 4 ;
3405: LD_ADDR_OWVAR 20
3409: PUSH
3410: LD_INT 4
3412: ST_TO_ADDR
// uc_nation := 1 ;
3413: LD_ADDR_OWVAR 21
3417: PUSH
3418: LD_INT 1
3420: ST_TO_ADDR
// InitHc ;
3421: CALL_OW 19
// tmp := [ ] ;
3425: LD_ADDR_VAR 0 3
3429: PUSH
3430: EMPTY
3431: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3432: LD_INT 0
3434: PPUSH
3435: LD_INT 5
3437: PPUSH
3438: LD_INT 10
3440: PPUSH
3441: CALL_OW 380
// un := CreateHuman ;
3445: LD_ADDR_VAR 0 1
3449: PUSH
3450: CALL_OW 44
3454: ST_TO_ADDR
// tmp := [ un ] ;
3455: LD_ADDR_VAR 0 3
3459: PUSH
3460: LD_VAR 0 1
3464: PUSH
3465: EMPTY
3466: LIST
3467: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3468: LD_VAR 0 1
3472: PPUSH
3473: LD_INT 226
3475: PPUSH
3476: LD_INT 86
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL_OW 48
// ComHold ( un ) ;
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 140
// for i = 1 to 3 do
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: DOUBLE
3501: LD_INT 1
3503: DEC
3504: ST_TO_ADDR
3505: LD_INT 3
3507: PUSH
3508: FOR_TO
3509: IFFALSE 3608
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3511: LD_INT 0
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: LD_INT 8
3519: PPUSH
3520: CALL_OW 380
// un := CreateHuman ;
3524: LD_ADDR_VAR 0 1
3528: PUSH
3529: CALL_OW 44
3533: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3534: LD_VAR 0 1
3538: PPUSH
3539: LD_INT 5
3541: PPUSH
3542: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_INT 215
3553: PUSH
3554: LD_INT 217
3556: PUSH
3557: LD_INT 219
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: LD_VAR 0 2
3569: ARRAY
3570: PPUSH
3571: LD_INT 76
3573: PPUSH
3574: LD_INT 0
3576: PPUSH
3577: CALL_OW 48
// ComCrawl ( un ) ;
3581: LD_VAR 0 1
3585: PPUSH
3586: CALL_OW 137
// tmp := tmp ^ un ;
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: LD_VAR 0 3
3599: PUSH
3600: LD_VAR 0 1
3604: ADD
3605: ST_TO_ADDR
// end ;
3606: GO 3508
3608: POP
3609: POP
// repeat wait ( 0 0$1 ) ;
3610: LD_INT 35
3612: PPUSH
3613: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3617: LD_VAR 0 3
3621: PPUSH
3622: LD_INT 24
3624: PUSH
3625: LD_INT 1000
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: PPUSH
3632: CALL_OW 72
3636: NOT
3637: IFFALSE 3610
// for i in tmp do
3639: LD_ADDR_VAR 0 2
3643: PUSH
3644: LD_VAR 0 3
3648: PUSH
3649: FOR_IN
3650: IFFALSE 3728
// begin wait ( 0 0$1 ) ;
3652: LD_INT 35
3654: PPUSH
3655: CALL_OW 67
// if Crawls ( i ) then
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 318
3668: IFFALSE 3681
// ComWalk ( i ) else
3670: LD_VAR 0 2
3674: PPUSH
3675: CALL_OW 138
3679: GO 3726
// if GetClass ( i ) = class_sniper then
3681: LD_VAR 0 2
3685: PPUSH
3686: CALL_OW 257
3690: PUSH
3691: LD_INT 5
3693: EQUAL
3694: IFFALSE 3712
// ComAttackSoporific ( i , JMM ) else
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_EXP 14
3705: PPUSH
3706: CALL_OW 166
3710: GO 3726
// ComAttackUnit ( i , JMM ) ;
3712: LD_VAR 0 2
3716: PPUSH
3717: LD_EXP 14
3721: PPUSH
3722: CALL_OW 115
// end ;
3726: GO 3649
3728: POP
3729: POP
// end ;
3730: PPOPN 3
3732: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3733: LD_EXP 7
3737: NOT
3738: PUSH
3739: LD_INT 1
3741: PPUSH
3742: CALL_OW 301
3746: AND
3747: IFFALSE 3759
3749: GO 3751
3751: DISABLE
// YouLost ( Lab ) ;
3752: LD_STRING Lab
3754: PPUSH
3755: CALL_OW 104
3759: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3760: LD_INT 10
3762: PPUSH
3763: LD_INT 22
3765: PUSH
3766: LD_INT 7
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PPUSH
3773: CALL_OW 70
3777: PUSH
3778: LD_INT 2
3780: GREATEREQUAL
3781: PUSH
3782: LD_INT 10
3784: PPUSH
3785: LD_INT 2
3787: PUSH
3788: LD_INT 34
3790: PUSH
3791: LD_INT 12
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 34
3800: PUSH
3801: LD_INT 51
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: LIST
3812: PPUSH
3813: CALL_OW 70
3817: AND
3818: PUSH
3819: LD_EXP 10
3823: AND
3824: PUSH
3825: LD_EXP 7
3829: AND
3830: PUSH
3831: LD_EXP 6
3835: AND
3836: IFFALSE 4096
3838: GO 3840
3840: DISABLE
3841: LD_INT 0
3843: PPUSH
3844: PPUSH
// begin m1 := false ;
3845: LD_ADDR_VAR 0 1
3849: PUSH
3850: LD_INT 0
3852: ST_TO_ADDR
// m2 := false ;
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: LD_INT 0
3860: ST_TO_ADDR
// if killCounter = 0 then
3861: LD_EXP 12
3865: PUSH
3866: LD_INT 0
3868: EQUAL
3869: IFFALSE 3878
// SetAchievement ( ACH_PACIFIST ) ;
3871: LD_STRING ACH_PACIFIST
3873: PPUSH
3874: CALL_OW 543
// if tick < 7 7$00 then
3878: LD_OWVAR 1
3882: PUSH
3883: LD_INT 14700
3885: LESS
3886: IFFALSE 3902
// begin wait ( 3 ) ;
3888: LD_INT 3
3890: PPUSH
3891: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3895: LD_STRING ACH_ASPEED_18
3897: PPUSH
3898: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3902: LD_STRING Explosion
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL_OW 101
// if enteredContaminatedArea then
3912: LD_EXP 5
3916: IFFALSE 3938
// begin m1 := true ;
3918: LD_ADDR_VAR 0 1
3922: PUSH
3923: LD_INT 1
3925: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3926: LD_STRING BioHazard
3928: PPUSH
3929: LD_INT 1
3931: PPUSH
3932: CALL_OW 101
// end else
3936: GO 3949
// AddMedal ( BioHazard , - 1 ) ;
3938: LD_STRING BioHazard
3940: PPUSH
3941: LD_INT 1
3943: NEG
3944: PPUSH
3945: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
3949: LD_EXP 11
3953: PUSH
3954: LD_INT 42000
3956: PUSH
3957: LD_INT 31500
3959: PUSH
3960: LD_INT 25200
3962: PUSH
3963: LD_INT 24150
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: PUSH
3972: LD_OWVAR 67
3976: ARRAY
3977: LESSEQUAL
3978: IFFALSE 4000
// begin m2 := true ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
3988: LD_STRING Speed
3990: PPUSH
3991: LD_INT 1
3993: PPUSH
3994: CALL_OW 101
// end else
3998: GO 4011
// AddMedal ( Speed , - 1 ) ;
4000: LD_STRING Speed
4002: PPUSH
4003: LD_INT 1
4005: NEG
4006: PPUSH
4007: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4011: LD_OWVAR 67
4015: PUSH
4016: LD_INT 3
4018: GREATEREQUAL
4019: PUSH
4020: LD_VAR 0 1
4024: AND
4025: PUSH
4026: LD_VAR 0 2
4030: AND
4031: IFFALSE 4043
// SetAchievementEX ( ACH_AMER , 18 ) ;
4033: LD_STRING ACH_AMER
4035: PPUSH
4036: LD_INT 18
4038: PPUSH
4039: CALL_OW 564
// GiveMedals ( Main ) ;
4043: LD_STRING Main
4045: PPUSH
4046: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4050: LD_EXP 14
4054: PUSH
4055: LD_EXP 15
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PPUSH
4064: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4068: LD_EXP 14
4072: PPUSH
4073: LD_STRING 14a_JMM
4075: PPUSH
4076: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4080: LD_EXP 15
4084: PPUSH
4085: LD_STRING 14a_Burlak
4087: PPUSH
4088: CALL_OW 38
// YouWin ;
4092: CALL_OW 103
// end ; end_of_file
4096: PPOPN 2
4098: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4099: LD_INT 0
4101: PPUSH
4102: PPUSH
4103: PPUSH
4104: PPUSH
// uc_side := 1 ;
4105: LD_ADDR_OWVAR 20
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// uc_nation := 1 ;
4113: LD_ADDR_OWVAR 21
4117: PUSH
4118: LD_INT 1
4120: ST_TO_ADDR
// InitHc ;
4121: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 500 ) ;
4125: LD_INT 34
4127: PPUSH
4128: CALL_OW 274
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 500
4138: PPUSH
4139: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4143: LD_INT 34
4145: PPUSH
4146: CALL_OW 274
4150: PPUSH
4151: LD_INT 3
4153: PPUSH
4154: LD_INT 20
4156: PPUSH
4157: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4161: LD_ADDR_EXP 18
4165: PUSH
4166: LD_STRING Stevens
4168: PPUSH
4169: CALL_OW 25
4173: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4174: LD_ADDR_EXP 19
4178: PUSH
4179: LD_STRING Powell
4181: PPUSH
4182: CALL_OW 25
4186: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4187: LD_EXP 18
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: CALL_OW 52
// vehGuard := [ ] ;
4199: LD_ADDR_EXP 23
4203: PUSH
4204: EMPTY
4205: ST_TO_ADDR
// hc_importance := 0 ;
4206: LD_ADDR_OWVAR 32
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4214: LD_INT 4
4216: PPUSH
4217: LD_INT 3
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 8
4225: PPUSH
4226: LD_INT 100
4228: PPUSH
4229: CALL 31252 0 5
// sibBomb := CreateVehicle ;
4233: LD_ADDR_EXP 21
4237: PUSH
4238: CALL_OW 45
4242: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4243: LD_EXP 21
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4255: LD_EXP 21
4259: PPUSH
4260: LD_INT 93
4262: PPUSH
4263: LD_INT 74
4265: PPUSH
4266: LD_INT 0
4268: PPUSH
4269: CALL_OW 48
// guards := [ ] ;
4273: LD_ADDR_EXP 22
4277: PUSH
4278: EMPTY
4279: ST_TO_ADDR
// for i = 1 to 3 do
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: DOUBLE
4286: LD_INT 1
4288: DEC
4289: ST_TO_ADDR
4290: LD_INT 3
4292: PUSH
4293: FOR_TO
4294: IFFALSE 4390
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4296: LD_INT 0
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 8
4304: PUSH
4305: LD_INT 9
4307: PUSH
4308: LD_INT 10
4310: PUSH
4311: LD_INT 10
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: PUSH
4320: LD_OWVAR 67
4324: ARRAY
4325: PPUSH
4326: CALL_OW 380
// un := CreateHuman ;
4330: LD_ADDR_VAR 0 3
4334: PUSH
4335: CALL_OW 44
4339: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4340: LD_VAR 0 3
4344: PPUSH
4345: LD_INT 2
4347: PUSH
4348: LD_INT 3
4350: PUSH
4351: LD_INT 4
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: PUSH
4359: LD_VAR 0 2
4363: ARRAY
4364: PPUSH
4365: LD_INT 0
4367: PPUSH
4368: CALL_OW 49
// guards := guards ^ un ;
4372: LD_ADDR_EXP 22
4376: PUSH
4377: LD_EXP 22
4381: PUSH
4382: LD_VAR 0 3
4386: ADD
4387: ST_TO_ADDR
// end ;
4388: GO 4293
4390: POP
4391: POP
// baseGuards := [ ] ;
4392: LD_ADDR_EXP 20
4396: PUSH
4397: EMPTY
4398: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4399: LD_ADDR_VAR 0 2
4403: PUSH
4404: DOUBLE
4405: LD_INT 1
4407: DEC
4408: ST_TO_ADDR
4409: LD_INT 5
4411: PUSH
4412: LD_INT 6
4414: PUSH
4415: LD_INT 7
4417: PUSH
4418: LD_INT 8
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4584
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 8
4441: PUSH
4442: LD_INT 9
4444: PUSH
4445: LD_INT 10
4447: PUSH
4448: LD_INT 10
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PPUSH
4463: CALL_OW 381
// un := CreateHuman ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: CALL_OW 44
4476: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4477: LD_ADDR_EXP 20
4481: PUSH
4482: LD_EXP 20
4486: PUSH
4487: LD_VAR 0 3
4491: ADD
4492: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4493: LD_ADDR_VAR 0 4
4497: PUSH
4498: LD_INT 22
4500: PUSH
4501: LD_INT 1
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: PUSH
4508: LD_INT 58
4510: PUSH
4511: EMPTY
4512: LIST
4513: PUSH
4514: LD_INT 30
4516: PUSH
4517: LD_INT 32
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 69
4533: ST_TO_ADDR
// if tmp then
4534: LD_VAR 0 4
4538: IFFALSE 4570
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4540: LD_VAR 0 3
4544: PPUSH
4545: LD_VAR 0 4
4549: PUSH
4550: LD_INT 1
4552: PPUSH
4553: LD_VAR 0 4
4557: PPUSH
4558: CALL_OW 12
4562: ARRAY
4563: PPUSH
4564: CALL_OW 52
4568: GO 4582
// PlaceHumanInUnit ( un , us_bar ) ;
4570: LD_VAR 0 3
4574: PPUSH
4575: LD_INT 51
4577: PPUSH
4578: CALL_OW 52
// end ;
4582: GO 4433
4584: POP
4585: POP
// if Difficulty > 1 then
4586: LD_OWVAR 67
4590: PUSH
4591: LD_INT 1
4593: GREATER
4594: IFFALSE 4642
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4596: LD_INT 0
4598: PPUSH
4599: LD_INT 5
4601: PPUSH
4602: LD_INT 9
4604: PUSH
4605: LD_INT 10
4607: PUSH
4608: LD_INT 10
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: PUSH
4616: LD_OWVAR 67
4620: PUSH
4621: LD_INT 1
4623: MINUS
4624: ARRAY
4625: PPUSH
4626: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4630: CALL_OW 44
4634: PPUSH
4635: LD_INT 80
4637: PPUSH
4638: CALL_OW 52
// end ; for i = 1 to 3 do
4642: LD_ADDR_VAR 0 2
4646: PUSH
4647: DOUBLE
4648: LD_INT 1
4650: DEC
4651: ST_TO_ADDR
4652: LD_INT 3
4654: PUSH
4655: FOR_TO
4656: IFFALSE 4682
// begin PrepareMechanic ( false , 9 ) ;
4658: LD_INT 0
4660: PPUSH
4661: LD_INT 9
4663: PPUSH
4664: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4668: CALL_OW 44
4672: PPUSH
4673: LD_INT 43
4675: PPUSH
4676: CALL_OW 52
// end ;
4680: GO 4655
4682: POP
4683: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4684: CALL_OW 44
4688: PPUSH
4689: LD_INT 49
4691: PPUSH
4692: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: DOUBLE
4702: LD_INT 1
4704: DEC
4705: ST_TO_ADDR
4706: LD_INT 1
4708: PUSH
4709: LD_OWVAR 67
4713: PLUS
4714: PUSH
4715: FOR_TO
4716: IFFALSE 4763
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4718: LD_INT 0
4720: PPUSH
4721: LD_INT 8
4723: PUSH
4724: LD_INT 9
4726: PUSH
4727: LD_INT 10
4729: PUSH
4730: LD_INT 10
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: PUSH
4739: LD_OWVAR 67
4743: ARRAY
4744: PPUSH
4745: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4749: CALL_OW 44
4753: PPUSH
4754: LD_INT 5
4756: PPUSH
4757: CALL_OW 52
// end ;
4761: GO 4715
4763: POP
4764: POP
// for i = 1 to 3 do
4765: LD_ADDR_VAR 0 2
4769: PUSH
4770: DOUBLE
4771: LD_INT 1
4773: DEC
4774: ST_TO_ADDR
4775: LD_INT 3
4777: PUSH
4778: FOR_TO
4779: IFFALSE 4805
// begin PrepareScientist ( false , 10 ) ;
4781: LD_INT 0
4783: PPUSH
4784: LD_INT 10
4786: PPUSH
4787: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4791: CALL_OW 44
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: CALL_OW 52
// end ;
4803: GO 4778
4805: POP
4806: POP
// end ;
4807: LD_VAR 0 1
4811: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4812: LD_EXP 22
4816: PUSH
4817: LD_EXP 2
4821: NOT
4822: AND
4823: IFFALSE 5009
4825: GO 4827
4827: DISABLE
4828: LD_INT 0
4830: PPUSH
4831: PPUSH
4832: PPUSH
// begin enable ;
4833: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4834: LD_ADDR_VAR 0 3
4838: PUSH
4839: LD_INT 204
4841: PUSH
4842: LD_INT 30
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 165
4851: PUSH
4852: LD_INT 24
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 195
4861: PUSH
4862: LD_INT 6
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 223
4871: PUSH
4872: LD_INT 54
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: LD_INT 214
4881: PUSH
4882: LD_INT 84
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 206
4891: PUSH
4892: LD_INT 71
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: ST_TO_ADDR
// for i in guards do
4907: LD_ADDR_VAR 0 1
4911: PUSH
4912: LD_EXP 22
4916: PUSH
4917: FOR_IN
4918: IFFALSE 5007
// begin if HasTask ( i ) then
4920: LD_VAR 0 1
4924: PPUSH
4925: CALL_OW 314
4929: IFFALSE 4935
// continue else
4931: GO 4917
4933: GO 5005
// begin j := rand ( 1 , 6 ) ;
4935: LD_ADDR_VAR 0 2
4939: PUSH
4940: LD_INT 1
4942: PPUSH
4943: LD_INT 6
4945: PPUSH
4946: CALL_OW 12
4950: ST_TO_ADDR
// if not See ( 7 , i ) then
4951: LD_INT 7
4953: PPUSH
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 292
4963: NOT
4964: IFFALSE 5005
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
4966: LD_VAR 0 1
4970: PPUSH
4971: LD_VAR 0 3
4975: PUSH
4976: LD_VAR 0 2
4980: ARRAY
4981: PUSH
4982: LD_INT 1
4984: ARRAY
4985: PPUSH
4986: LD_VAR 0 3
4990: PUSH
4991: LD_VAR 0 2
4995: ARRAY
4996: PUSH
4997: LD_INT 2
4999: ARRAY
5000: PPUSH
5001: CALL_OW 114
// end ; end ;
5005: GO 4917
5007: POP
5008: POP
// end ;
5009: PPOPN 3
5011: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5012: LD_EXP 23
5016: PUSH
5017: LD_EXP 7
5021: NOT
5022: AND
5023: IFFALSE 5094
5025: GO 5027
5027: DISABLE
5028: LD_INT 0
5030: PPUSH
// begin enable ;
5031: ENABLE
// for i in vehGuard do
5032: LD_ADDR_VAR 0 1
5036: PUSH
5037: LD_EXP 23
5041: PUSH
5042: FOR_IN
5043: IFFALSE 5092
// if IsOk ( vehGuard ) then
5045: LD_EXP 23
5049: PPUSH
5050: CALL_OW 302
5054: IFFALSE 5090
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5056: LD_VAR 0 1
5060: PPUSH
5061: LD_INT 22
5063: PUSH
5064: LD_INT 7
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PPUSH
5071: CALL_OW 69
5075: PPUSH
5076: LD_VAR 0 1
5080: PPUSH
5081: CALL_OW 74
5085: PPUSH
5086: CALL_OW 115
5090: GO 5042
5092: POP
5093: POP
// end ;
5094: PPOPN 1
5096: END
// every 9 9$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured do
5097: LD_EXP 4
5101: PUSH
5102: LD_INT 43
5104: PPUSH
5105: CALL_OW 302
5109: AND
5110: PUSH
5111: LD_EXP 7
5115: NOT
5116: AND
5117: IFFALSE 5165
5119: GO 5121
5121: DISABLE
// begin enable ;
5122: ENABLE
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5123: LD_INT 43
5125: PPUSH
5126: LD_INT 5
5128: PPUSH
5129: LD_INT 3
5131: PPUSH
5132: LD_INT 2
5134: PPUSH
5135: LD_INT 7
5137: PUSH
5138: LD_INT 7
5140: PUSH
5141: LD_INT 9
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 1
5151: PPUSH
5152: LD_INT 3
5154: PPUSH
5155: CALL_OW 12
5159: ARRAY
5160: PPUSH
5161: CALL_OW 125
// end ;
5165: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5166: LD_INT 22
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 25
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 50
5188: PUSH
5189: EMPTY
5190: LIST
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: LIST
5196: PPUSH
5197: CALL_OW 69
5201: PUSH
5202: LD_EXP 7
5206: NOT
5207: AND
5208: IFFALSE 5437
5210: GO 5212
5212: DISABLE
5213: LD_INT 0
5215: PPUSH
5216: PPUSH
// begin enable ;
5217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5218: LD_ADDR_VAR 0 1
5222: PUSH
5223: LD_INT 22
5225: PUSH
5226: LD_INT 1
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 25
5235: PUSH
5236: LD_INT 5
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PUSH
5243: LD_INT 50
5245: PUSH
5246: EMPTY
5247: LIST
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 69
5258: ST_TO_ADDR
// if not tmp then
5259: LD_VAR 0 1
5263: NOT
5264: IFFALSE 5268
// exit ;
5266: GO 5437
// b := IsInUnit ( tmp [ 1 ] ) ;
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_VAR 0 1
5277: PUSH
5278: LD_INT 1
5280: ARRAY
5281: PPUSH
5282: CALL_OW 310
5286: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5287: LD_VAR 0 2
5291: NOT
5292: PUSH
5293: LD_VAR 0 1
5297: PUSH
5298: LD_INT 1
5300: ARRAY
5301: PPUSH
5302: CALL_OW 314
5306: OR
5307: IFFALSE 5311
// exit ;
5309: GO 5437
// if b = us_bun1 then
5311: LD_VAR 0 2
5315: PUSH
5316: LD_INT 80
5318: EQUAL
5319: IFFALSE 5380
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5321: LD_VAR 0 1
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5334: LD_VAR 0 1
5338: PUSH
5339: LD_INT 1
5341: ARRAY
5342: PPUSH
5343: LD_INT 27
5345: PPUSH
5346: LD_INT 44
5348: PPUSH
5349: CALL_OW 174
// if IsOk ( us_bun2 ) then
5353: LD_INT 55
5355: PPUSH
5356: CALL_OW 302
5360: IFFALSE 5378
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5362: LD_VAR 0 1
5366: PUSH
5367: LD_INT 1
5369: ARRAY
5370: PPUSH
5371: LD_INT 55
5373: PPUSH
5374: CALL_OW 180
// end else
5378: GO 5437
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5380: LD_VAR 0 1
5384: PUSH
5385: LD_INT 1
5387: ARRAY
5388: PPUSH
5389: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: LD_INT 92
5404: PPUSH
5405: LD_INT 51
5407: PPUSH
5408: CALL_OW 174
// if IsOk ( us_bun1 ) then
5412: LD_INT 80
5414: PPUSH
5415: CALL_OW 302
5419: IFFALSE 5437
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5421: LD_VAR 0 1
5425: PUSH
5426: LD_INT 1
5428: ARRAY
5429: PPUSH
5430: LD_INT 80
5432: PPUSH
5433: CALL_OW 180
// end ; end ;
5437: PPOPN 2
5439: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5440: LD_EXP 7
5444: NOT
5445: PUSH
5446: LD_INT 9
5448: PPUSH
5449: LD_INT 22
5451: PUSH
5452: LD_INT 1
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PUSH
5459: LD_INT 21
5461: PUSH
5462: LD_INT 3
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PUSH
5469: LD_INT 3
5471: PUSH
5472: LD_INT 24
5474: PUSH
5475: LD_INT 1000
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: PPUSH
5491: CALL_OW 70
5495: AND
5496: IFFALSE 5907
5498: GO 5500
5500: DISABLE
5501: LD_INT 0
5503: PPUSH
5504: PPUSH
5505: PPUSH
5506: PPUSH
// begin enable ;
5507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: LD_INT 22
5515: PUSH
5516: LD_INT 1
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 25
5525: PUSH
5526: LD_INT 2
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: LD_INT 24
5535: PUSH
5536: LD_INT 1000
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: LIST
5547: PPUSH
5548: CALL_OW 69
5552: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5553: LD_ADDR_VAR 0 3
5557: PUSH
5558: LD_INT 22
5560: PUSH
5561: LD_INT 1
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 25
5570: PUSH
5571: LD_INT 2
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 3
5580: PUSH
5581: LD_INT 24
5583: PUSH
5584: LD_INT 750
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: PPUSH
5600: CALL_OW 69
5604: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5605: LD_ADDR_VAR 0 4
5609: PUSH
5610: LD_INT 9
5612: PPUSH
5613: LD_INT 22
5615: PUSH
5616: LD_INT 1
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 21
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 3
5635: PUSH
5636: LD_INT 24
5638: PUSH
5639: LD_INT 1000
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: LIST
5654: PPUSH
5655: CALL_OW 70
5659: PUSH
5660: LD_INT 1
5662: DIFF
5663: ST_TO_ADDR
// if not tmp and not tmp2 then
5664: LD_VAR 0 2
5668: NOT
5669: PUSH
5670: LD_VAR 0 3
5674: NOT
5675: AND
5676: IFFALSE 5680
// exit ;
5678: GO 5907
// if tmp and b then
5680: LD_VAR 0 2
5684: PUSH
5685: LD_VAR 0 4
5689: AND
5690: IFFALSE 5820
// for i in tmp do
5692: LD_ADDR_VAR 0 1
5696: PUSH
5697: LD_VAR 0 2
5701: PUSH
5702: FOR_IN
5703: IFFALSE 5818
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: PUSH
5715: LD_INT 1
5717: EQUAL
5718: PUSH
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 256
5728: PUSH
5729: LD_INT 1000
5731: LESS
5732: AND
5733: IFFALSE 5739
// continue else
5735: GO 5702
5737: GO 5766
// if GetTag ( i ) = 1 then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 110
5748: PUSH
5749: LD_INT 1
5751: EQUAL
5752: IFFALSE 5766
// SetTag ( i , 0 ) ;
5754: LD_VAR 0 1
5758: PPUSH
5759: LD_INT 0
5761: PPUSH
5762: CALL_OW 109
// if IsInUnit ( i ) then
5766: LD_VAR 0 1
5770: PPUSH
5771: CALL_OW 310
5775: IFFALSE 5786
// ComExitBuilding ( i ) ;
5777: LD_VAR 0 1
5781: PPUSH
5782: CALL_OW 122
// if not HasTask ( i ) then
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 314
5795: NOT
5796: IFFALSE 5816
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_VAR 0 4
5807: PUSH
5808: LD_INT 1
5810: ARRAY
5811: PPUSH
5812: CALL_OW 190
// end ;
5816: GO 5702
5818: POP
5819: POP
// if tmp2 then
5820: LD_VAR 0 3
5824: IFFALSE 5907
// for i in tmp2 do
5826: LD_ADDR_VAR 0 1
5830: PUSH
5831: LD_VAR 0 3
5835: PUSH
5836: FOR_IN
5837: IFFALSE 5905
// begin if not GetTag ( i ) = 1 then
5839: LD_VAR 0 1
5843: PPUSH
5844: CALL_OW 110
5848: PUSH
5849: LD_INT 1
5851: EQUAL
5852: NOT
5853: IFFALSE 5867
// SetTag ( i , 1 ) ;
5855: LD_VAR 0 1
5859: PPUSH
5860: LD_INT 1
5862: PPUSH
5863: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5867: LD_VAR 0 1
5871: PPUSH
5872: LD_INT 88
5874: PPUSH
5875: LD_INT 75
5877: PPUSH
5878: CALL_OW 297
5882: PUSH
5883: LD_INT 6
5885: GREATER
5886: IFFALSE 5903
// ComMoveXY ( i , 88 , 75 ) ;
5888: LD_VAR 0 1
5892: PPUSH
5893: LD_INT 88
5895: PPUSH
5896: LD_INT 75
5898: PPUSH
5899: CALL_OW 111
// end ;
5903: GO 5836
5905: POP
5906: POP
// end ;
5907: PPOPN 4
5909: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5910: LD_EXP 7
5914: NOT
5915: PUSH
5916: LD_EXP 9
5920: AND
5921: PUSH
5922: LD_INT 9
5924: PPUSH
5925: LD_INT 22
5927: PUSH
5928: LD_INT 1
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 21
5937: PUSH
5938: LD_INT 1
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 3
5947: PUSH
5948: LD_INT 24
5950: PUSH
5951: LD_INT 1000
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: PPUSH
5967: CALL_OW 70
5971: AND
5972: IFFALSE 6145
5974: GO 5976
5976: DISABLE
5977: LD_INT 0
5979: PPUSH
5980: PPUSH
5981: PPUSH
// begin enable ;
5982: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
5983: LD_ADDR_VAR 0 2
5987: PUSH
5988: LD_INT 22
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 25
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 69
6016: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6017: LD_ADDR_VAR 0 3
6021: PUSH
6022: LD_INT 9
6024: PPUSH
6025: LD_INT 22
6027: PUSH
6028: LD_INT 1
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 21
6037: PUSH
6038: LD_INT 1
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 3
6047: PUSH
6048: LD_INT 24
6050: PUSH
6051: LD_INT 1000
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: PPUSH
6067: CALL_OW 70
6071: ST_TO_ADDR
// if not sci or not tmp then
6072: LD_VAR 0 2
6076: NOT
6077: PUSH
6078: LD_VAR 0 3
6082: NOT
6083: OR
6084: IFFALSE 6088
// exit ;
6086: GO 6145
// for i in sci do
6088: LD_ADDR_VAR 0 1
6092: PUSH
6093: LD_VAR 0 2
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6143
// if IsInUnit ( i ) then
6101: LD_VAR 0 1
6105: PPUSH
6106: CALL_OW 310
6110: IFFALSE 6123
// ComExitBuilding ( i ) else
6112: LD_VAR 0 1
6116: PPUSH
6117: CALL_OW 122
6121: GO 6141
// ComHeal ( i , tmp [ 1 ] ) ;
6123: LD_VAR 0 1
6127: PPUSH
6128: LD_VAR 0 3
6132: PUSH
6133: LD_INT 1
6135: ARRAY
6136: PPUSH
6137: CALL_OW 128
6141: GO 6098
6143: POP
6144: POP
// end ;
6145: PPOPN 3
6147: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6148: LD_EXP 7
6152: NOT
6153: PUSH
6154: LD_EXP 9
6158: AND
6159: PUSH
6160: LD_INT 1
6162: PPUSH
6163: CALL_OW 302
6167: AND
6168: PUSH
6169: LD_INT 9
6171: PPUSH
6172: LD_INT 22
6174: PUSH
6175: LD_INT 1
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 21
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: LD_INT 3
6194: PUSH
6195: LD_INT 24
6197: PUSH
6198: LD_INT 1000
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 70
6218: NOT
6219: AND
6220: PUSH
6221: LD_INT 22
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 25
6233: PUSH
6234: LD_INT 4
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 56
6243: PUSH
6244: EMPTY
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 69
6256: AND
6257: IFFALSE 6350
6259: GO 6261
6261: DISABLE
6262: LD_INT 0
6264: PPUSH
// begin enable ;
6265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6266: LD_ADDR_VAR 0 1
6270: PUSH
6271: LD_INT 22
6273: PUSH
6274: LD_INT 1
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 25
6283: PUSH
6284: LD_INT 4
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 56
6293: PUSH
6294: EMPTY
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: PPUSH
6302: CALL_OW 69
6306: PUSH
6307: FOR_IN
6308: IFFALSE 6348
// if not GetTag ( i ) and not HasTask ( i ) then
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL_OW 110
6319: NOT
6320: PUSH
6321: LD_VAR 0 1
6325: PPUSH
6326: CALL_OW 314
6330: NOT
6331: AND
6332: IFFALSE 6346
// ComEnterUnit ( i , us_lab ) ;
6334: LD_VAR 0 1
6338: PPUSH
6339: LD_INT 1
6341: PPUSH
6342: CALL_OW 120
6346: GO 6307
6348: POP
6349: POP
// end ;
6350: PPOPN 1
6352: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6353: LD_EXP 7
6357: NOT
6358: PUSH
6359: LD_INT 9
6361: PPUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 1
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 3
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: LD_INT 24
6387: PUSH
6388: LD_INT 1000
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 70
6408: NOT
6409: AND
6410: PUSH
6411: LD_INT 22
6413: PUSH
6414: LD_INT 1
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 25
6423: PUSH
6424: LD_INT 2
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 56
6433: PUSH
6434: EMPTY
6435: LIST
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: PPUSH
6442: CALL_OW 69
6446: AND
6447: IFFALSE 6540
6449: GO 6451
6451: DISABLE
6452: LD_INT 0
6454: PPUSH
// begin enable ;
6455: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6456: LD_ADDR_VAR 0 1
6460: PUSH
6461: LD_INT 22
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 56
6483: PUSH
6484: EMPTY
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 69
6496: PUSH
6497: FOR_IN
6498: IFFALSE 6538
// if not HasTask ( i ) and not GetTag ( i ) then
6500: LD_VAR 0 1
6504: PPUSH
6505: CALL_OW 314
6509: NOT
6510: PUSH
6511: LD_VAR 0 1
6515: PPUSH
6516: CALL_OW 110
6520: NOT
6521: AND
6522: IFFALSE 6536
// ComEnterUnit ( i , us_depot ) ;
6524: LD_VAR 0 1
6528: PPUSH
6529: LD_INT 5
6531: PPUSH
6532: CALL_OW 120
6536: GO 6497
6538: POP
6539: POP
// end ;
6540: PPOPN 1
6542: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6543: LD_EXP 9
6547: PUSH
6548: LD_INT 0
6550: LESSEQUAL
6551: PUSH
6552: LD_EXP 18
6556: PPUSH
6557: CALL_OW 301
6561: OR
6562: PUSH
6563: LD_INT 22
6565: PUSH
6566: LD_INT 1
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 25
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PPUSH
6587: CALL_OW 69
6591: AND
6592: IFFALSE 6633
6594: GO 6596
6596: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6597: LD_INT 22
6599: PUSH
6600: LD_INT 1
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 25
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PPUSH
6626: LD_INT 1
6628: PPUSH
6629: CALL_OW 167
6633: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6634: LD_EXP 7
6638: NOT
6639: PUSH
6640: LD_INT 7
6642: PPUSH
6643: LD_INT 22
6645: PUSH
6646: LD_INT 7
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 70
6657: AND
6658: IFFALSE 6749
6660: GO 6662
6662: DISABLE
6663: LD_INT 0
6665: PPUSH
// begin wait ( 0 0$2 ) ;
6666: LD_INT 70
6668: PPUSH
6669: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6673: LD_ADDR_VAR 0 1
6677: PUSH
6678: LD_INT 22
6680: PUSH
6681: LD_INT 1
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: LD_INT 25
6690: PUSH
6691: LD_INT 1
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PPUSH
6702: CALL_OW 69
6706: PUSH
6707: FOR_IN
6708: IFFALSE 6747
// begin if IsInUnit ( i ) then
6710: LD_VAR 0 1
6714: PPUSH
6715: CALL_OW 310
6719: IFFALSE 6730
// ComExitBuilding ( i ) ;
6721: LD_VAR 0 1
6725: PPUSH
6726: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6730: LD_VAR 0 1
6734: PPUSH
6735: LD_INT 92
6737: PPUSH
6738: LD_INT 78
6740: PPUSH
6741: CALL_OW 174
// end ;
6745: GO 6707
6747: POP
6748: POP
// end ; end_of_file
6749: PPOPN 1
6751: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6752: LD_VAR 0 1
6756: PPUSH
6757: LD_VAR 0 2
6761: PPUSH
6762: LD_VAR 0 3
6766: PPUSH
6767: CALL 1579 0 3
6771: PPOPN 3
6773: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6774: LD_EXP 14
6778: PPUSH
6779: CALL_OW 257
6783: PUSH
6784: LD_INT 4
6786: EQUAL
6787: PUSH
6788: LD_EXP 15
6792: PPUSH
6793: CALL_OW 257
6797: PUSH
6798: LD_INT 4
6800: EQUAL
6801: OR
6802: PUSH
6803: LD_INT 22
6805: PUSH
6806: LD_INT 7
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 21
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 69
6831: OR
6832: IFFALSE 6836
// exit ;
6834: GO 6874
// if un = JMM then
6836: LD_VAR 0 1
6840: PUSH
6841: LD_EXP 14
6845: EQUAL
6846: IFFALSE 6855
// YouLost ( JMM ) ;
6848: LD_STRING JMM
6850: PPUSH
6851: CALL_OW 104
// if un = Burlak then
6855: LD_VAR 0 1
6859: PUSH
6860: LD_EXP 15
6864: EQUAL
6865: IFFALSE 6874
// YouLost ( Burlak ) ;
6867: LD_STRING Burlak
6869: PPUSH
6870: CALL_OW 104
// end ;
6874: PPOPN 1
6876: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6877: LD_VAR 0 1
6881: PPUSH
6882: CALL 21748 0 1
// if un = JMM then
6886: LD_VAR 0 1
6890: PUSH
6891: LD_EXP 14
6895: EQUAL
6896: IFFALSE 6905
// YouLost ( JMM ) ;
6898: LD_STRING JMM
6900: PPUSH
6901: CALL_OW 104
// if un = Burlak then
6905: LD_VAR 0 1
6909: PUSH
6910: LD_EXP 15
6914: EQUAL
6915: IFFALSE 6924
// YouLost ( Burlak ) ;
6917: LD_STRING Burlak
6919: PPUSH
6920: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
6924: LD_VAR 0 1
6928: PUSH
6929: LD_INT 21
6931: PUSH
6932: LD_INT 1
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 23
6941: PUSH
6942: LD_INT 1
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: IN
6958: IFFALSE 6974
// killCounter := killCounter + 1 ;
6960: LD_ADDR_EXP 12
6964: PUSH
6965: LD_EXP 12
6969: PUSH
6970: LD_INT 1
6972: PLUS
6973: ST_TO_ADDR
// end ;
6974: PPOPN 1
6976: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6977: LD_VAR 0 2
6981: PUSH
6982: LD_INT 7
6984: EQUAL
6985: PUSH
6986: LD_VAR 0 1
6990: PUSH
6991: LD_INT 2
6993: PUSH
6994: LD_INT 30
6996: PUSH
6997: LD_INT 31
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 30
7006: PUSH
7007: LD_INT 32
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 30
7016: PUSH
7017: LD_INT 33
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: PPUSH
7030: CALL_OW 69
7034: IN
7035: AND
7036: IFFALSE 7052
// bunkerCounter := bunkerCounter + 1 ;
7038: LD_ADDR_EXP 13
7042: PUSH
7043: LD_EXP 13
7047: PUSH
7048: LD_INT 1
7050: PLUS
7051: ST_TO_ADDR
// end ;
7052: PPOPN 3
7054: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7055: LD_VAR 0 1
7059: PPUSH
7060: CALL_OW 255
7064: PUSH
7065: LD_INT 7
7067: EQUAL
7068: IFFALSE 7078
// artifactPickedUp := true ;
7070: LD_ADDR_EXP 6
7074: PUSH
7075: LD_INT 1
7077: ST_TO_ADDR
// end ;
7078: PPOPN 2
7080: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7081: LD_ADDR_EXP 6
7085: PUSH
7086: LD_INT 0
7088: ST_TO_ADDR
7089: PPOPN 2
7091: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7092: LD_VAR 0 1
7096: PPUSH
7097: LD_VAR 0 2
7101: PPUSH
7102: CALL 21870 0 2
// if GetSide ( vehicle ) <> 1 then
7106: LD_VAR 0 1
7110: PPUSH
7111: CALL_OW 255
7115: PUSH
7116: LD_INT 1
7118: NONEQUAL
7119: IFFALSE 7123
// exit ;
7121: GO 7170
// wait ( 0 0$5 ) ;
7123: LD_INT 175
7125: PPUSH
7126: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7130: LD_VAR 0 1
7134: PPUSH
7135: CALL_OW 263
7139: PUSH
7140: LD_INT 2
7142: EQUAL
7143: IFFALSE 7154
// Connect ( vehicle ) ;
7145: LD_VAR 0 1
7149: PPUSH
7150: CALL 34345 0 1
// vehGuard := vehGuard ^ vehicle ;
7154: LD_ADDR_EXP 23
7158: PUSH
7159: LD_EXP 23
7163: PUSH
7164: LD_VAR 0 1
7168: ADD
7169: ST_TO_ADDR
// end ;
7170: PPOPN 2
7172: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7173: LD_VAR 0 1
7177: PUSH
7178: LD_INT 1
7180: EQUAL
7181: PUSH
7182: LD_EXP 7
7186: NOT
7187: AND
7188: IFFALSE 7223
// begin planCaptured := true ;
7190: LD_ADDR_EXP 7
7194: PUSH
7195: LD_INT 1
7197: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7198: LD_STRING MEnd
7200: PPUSH
7201: CALL_OW 337
// canEnd := true ;
7205: LD_ADDR_EXP 10
7209: PUSH
7210: LD_INT 1
7212: ST_TO_ADDR
// missionTime := tick ;
7213: LD_ADDR_EXP 11
7217: PUSH
7218: LD_OWVAR 1
7222: ST_TO_ADDR
// end ; end ;
7223: PPOPN 3
7225: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7226: LD_VAR 0 1
7230: PPUSH
7231: CALL 21854 0 1
// end ; end_of_file
7235: PPOPN 1
7237: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7238: LD_INT 0
7240: PPUSH
// ar_miner := 81 ;
7241: LD_ADDR_EXP 31
7245: PUSH
7246: LD_INT 81
7248: ST_TO_ADDR
// ar_crane := 88 ;
7249: LD_ADDR_EXP 30
7253: PUSH
7254: LD_INT 88
7256: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7257: LD_ADDR_EXP 25
7261: PUSH
7262: LD_INT 89
7264: ST_TO_ADDR
// us_hack := 99 ;
7265: LD_ADDR_EXP 26
7269: PUSH
7270: LD_INT 99
7272: ST_TO_ADDR
// us_artillery := 97 ;
7273: LD_ADDR_EXP 27
7277: PUSH
7278: LD_INT 97
7280: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7281: LD_ADDR_EXP 28
7285: PUSH
7286: LD_INT 91
7288: ST_TO_ADDR
// ar_mortar := 92 ;
7289: LD_ADDR_EXP 29
7293: PUSH
7294: LD_INT 92
7296: ST_TO_ADDR
// ru_flamethrower := 93 ;
7297: LD_ADDR_EXP 32
7301: PUSH
7302: LD_INT 93
7304: ST_TO_ADDR
// ru_radar := 98 ;
7305: LD_ADDR_EXP 24
7309: PUSH
7310: LD_INT 98
7312: ST_TO_ADDR
// tech_Artillery := 80 ;
7313: LD_ADDR_EXP 33
7317: PUSH
7318: LD_INT 80
7320: ST_TO_ADDR
// tech_RadMat := 81 ;
7321: LD_ADDR_EXP 34
7325: PUSH
7326: LD_INT 81
7328: ST_TO_ADDR
// tech_BasicTools := 82 ;
7329: LD_ADDR_EXP 35
7333: PUSH
7334: LD_INT 82
7336: ST_TO_ADDR
// tech_Cargo := 83 ;
7337: LD_ADDR_EXP 36
7341: PUSH
7342: LD_INT 83
7344: ST_TO_ADDR
// tech_Track := 84 ;
7345: LD_ADDR_EXP 37
7349: PUSH
7350: LD_INT 84
7352: ST_TO_ADDR
// tech_Crane := 85 ;
7353: LD_ADDR_EXP 38
7357: PUSH
7358: LD_INT 85
7360: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7361: LD_ADDR_EXP 39
7365: PUSH
7366: LD_INT 86
7368: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7369: LD_ADDR_EXP 40
7373: PUSH
7374: LD_INT 87
7376: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
7377: LD_ADDR_EXP 41
7381: PUSH
7382: LD_INT 88
7384: ST_TO_ADDR
// class_mastodont := 31 ;
7385: LD_ADDR_EXP 42
7389: PUSH
7390: LD_INT 31
7392: ST_TO_ADDR
// class_horse := 21 ;
7393: LD_ADDR_EXP 43
7397: PUSH
7398: LD_INT 21
7400: ST_TO_ADDR
// end ;
7401: LD_VAR 0 1
7405: RET
// every 1 do
7406: GO 7408
7408: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7409: CALL 7238 0 0
7413: END
// every 0 0$1 do
7414: GO 7416
7416: DISABLE
// begin enable ;
7417: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7418: LD_STRING updateTimer(
7420: PUSH
7421: LD_OWVAR 1
7425: STR
7426: PUSH
7427: LD_STRING );
7429: STR
7430: PPUSH
7431: CALL_OW 559
// end ;
7435: END
// export function SOS_MapStart ( ) ; begin
7436: LD_INT 0
7438: PPUSH
// if streamModeActive then
7439: LD_EXP 44
7443: IFFALSE 7452
// DefineStreamItems ( true ) ;
7445: LD_INT 1
7447: PPUSH
7448: CALL 9102 0 1
// UpdateFactoryWaypoints ( ) ;
7452: CALL 22686 0 0
// end ;
7456: LD_VAR 0 1
7460: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7461: LD_INT 0
7463: PPUSH
// if p2 = 100 then
7464: LD_VAR 0 2
7468: PUSH
7469: LD_INT 100
7471: EQUAL
7472: IFFALSE 8475
// begin if not StreamModeActive then
7474: LD_EXP 44
7478: NOT
7479: IFFALSE 7489
// StreamModeActive := true ;
7481: LD_ADDR_EXP 44
7485: PUSH
7486: LD_INT 1
7488: ST_TO_ADDR
// if p3 = 0 then
7489: LD_VAR 0 3
7493: PUSH
7494: LD_INT 0
7496: EQUAL
7497: IFFALSE 7503
// InitStreamMode ;
7499: CALL 8638 0 0
// if p3 = 1 then
7503: LD_VAR 0 3
7507: PUSH
7508: LD_INT 1
7510: EQUAL
7511: IFFALSE 7521
// sRocket := true ;
7513: LD_ADDR_EXP 49
7517: PUSH
7518: LD_INT 1
7520: ST_TO_ADDR
// if p3 = 2 then
7521: LD_VAR 0 3
7525: PUSH
7526: LD_INT 2
7528: EQUAL
7529: IFFALSE 7539
// sSpeed := true ;
7531: LD_ADDR_EXP 48
7535: PUSH
7536: LD_INT 1
7538: ST_TO_ADDR
// if p3 = 3 then
7539: LD_VAR 0 3
7543: PUSH
7544: LD_INT 3
7546: EQUAL
7547: IFFALSE 7557
// sEngine := true ;
7549: LD_ADDR_EXP 50
7553: PUSH
7554: LD_INT 1
7556: ST_TO_ADDR
// if p3 = 4 then
7557: LD_VAR 0 3
7561: PUSH
7562: LD_INT 4
7564: EQUAL
7565: IFFALSE 7575
// sSpec := true ;
7567: LD_ADDR_EXP 47
7571: PUSH
7572: LD_INT 1
7574: ST_TO_ADDR
// if p3 = 5 then
7575: LD_VAR 0 3
7579: PUSH
7580: LD_INT 5
7582: EQUAL
7583: IFFALSE 7593
// sLevel := true ;
7585: LD_ADDR_EXP 51
7589: PUSH
7590: LD_INT 1
7592: ST_TO_ADDR
// if p3 = 6 then
7593: LD_VAR 0 3
7597: PUSH
7598: LD_INT 6
7600: EQUAL
7601: IFFALSE 7611
// sArmoury := true ;
7603: LD_ADDR_EXP 52
7607: PUSH
7608: LD_INT 1
7610: ST_TO_ADDR
// if p3 = 7 then
7611: LD_VAR 0 3
7615: PUSH
7616: LD_INT 7
7618: EQUAL
7619: IFFALSE 7629
// sRadar := true ;
7621: LD_ADDR_EXP 53
7625: PUSH
7626: LD_INT 1
7628: ST_TO_ADDR
// if p3 = 8 then
7629: LD_VAR 0 3
7633: PUSH
7634: LD_INT 8
7636: EQUAL
7637: IFFALSE 7647
// sBunker := true ;
7639: LD_ADDR_EXP 54
7643: PUSH
7644: LD_INT 1
7646: ST_TO_ADDR
// if p3 = 9 then
7647: LD_VAR 0 3
7651: PUSH
7652: LD_INT 9
7654: EQUAL
7655: IFFALSE 7665
// sHack := true ;
7657: LD_ADDR_EXP 55
7661: PUSH
7662: LD_INT 1
7664: ST_TO_ADDR
// if p3 = 10 then
7665: LD_VAR 0 3
7669: PUSH
7670: LD_INT 10
7672: EQUAL
7673: IFFALSE 7683
// sFire := true ;
7675: LD_ADDR_EXP 56
7679: PUSH
7680: LD_INT 1
7682: ST_TO_ADDR
// if p3 = 11 then
7683: LD_VAR 0 3
7687: PUSH
7688: LD_INT 11
7690: EQUAL
7691: IFFALSE 7701
// sRefresh := true ;
7693: LD_ADDR_EXP 57
7697: PUSH
7698: LD_INT 1
7700: ST_TO_ADDR
// if p3 = 12 then
7701: LD_VAR 0 3
7705: PUSH
7706: LD_INT 12
7708: EQUAL
7709: IFFALSE 7719
// sExp := true ;
7711: LD_ADDR_EXP 58
7715: PUSH
7716: LD_INT 1
7718: ST_TO_ADDR
// if p3 = 13 then
7719: LD_VAR 0 3
7723: PUSH
7724: LD_INT 13
7726: EQUAL
7727: IFFALSE 7737
// sDepot := true ;
7729: LD_ADDR_EXP 59
7733: PUSH
7734: LD_INT 1
7736: ST_TO_ADDR
// if p3 = 14 then
7737: LD_VAR 0 3
7741: PUSH
7742: LD_INT 14
7744: EQUAL
7745: IFFALSE 7755
// sFlag := true ;
7747: LD_ADDR_EXP 60
7751: PUSH
7752: LD_INT 1
7754: ST_TO_ADDR
// if p3 = 15 then
7755: LD_VAR 0 3
7759: PUSH
7760: LD_INT 15
7762: EQUAL
7763: IFFALSE 7773
// sKamikadze := true ;
7765: LD_ADDR_EXP 68
7769: PUSH
7770: LD_INT 1
7772: ST_TO_ADDR
// if p3 = 16 then
7773: LD_VAR 0 3
7777: PUSH
7778: LD_INT 16
7780: EQUAL
7781: IFFALSE 7791
// sTroll := true ;
7783: LD_ADDR_EXP 69
7787: PUSH
7788: LD_INT 1
7790: ST_TO_ADDR
// if p3 = 17 then
7791: LD_VAR 0 3
7795: PUSH
7796: LD_INT 17
7798: EQUAL
7799: IFFALSE 7809
// sSlow := true ;
7801: LD_ADDR_EXP 70
7805: PUSH
7806: LD_INT 1
7808: ST_TO_ADDR
// if p3 = 18 then
7809: LD_VAR 0 3
7813: PUSH
7814: LD_INT 18
7816: EQUAL
7817: IFFALSE 7827
// sLack := true ;
7819: LD_ADDR_EXP 71
7823: PUSH
7824: LD_INT 1
7826: ST_TO_ADDR
// if p3 = 19 then
7827: LD_VAR 0 3
7831: PUSH
7832: LD_INT 19
7834: EQUAL
7835: IFFALSE 7845
// sTank := true ;
7837: LD_ADDR_EXP 73
7841: PUSH
7842: LD_INT 1
7844: ST_TO_ADDR
// if p3 = 20 then
7845: LD_VAR 0 3
7849: PUSH
7850: LD_INT 20
7852: EQUAL
7853: IFFALSE 7863
// sRemote := true ;
7855: LD_ADDR_EXP 74
7859: PUSH
7860: LD_INT 1
7862: ST_TO_ADDR
// if p3 = 21 then
7863: LD_VAR 0 3
7867: PUSH
7868: LD_INT 21
7870: EQUAL
7871: IFFALSE 7881
// sPowell := true ;
7873: LD_ADDR_EXP 75
7877: PUSH
7878: LD_INT 1
7880: ST_TO_ADDR
// if p3 = 22 then
7881: LD_VAR 0 3
7885: PUSH
7886: LD_INT 22
7888: EQUAL
7889: IFFALSE 7899
// sTeleport := true ;
7891: LD_ADDR_EXP 78
7895: PUSH
7896: LD_INT 1
7898: ST_TO_ADDR
// if p3 = 23 then
7899: LD_VAR 0 3
7903: PUSH
7904: LD_INT 23
7906: EQUAL
7907: IFFALSE 7917
// sOilTower := true ;
7909: LD_ADDR_EXP 80
7913: PUSH
7914: LD_INT 1
7916: ST_TO_ADDR
// if p3 = 24 then
7917: LD_VAR 0 3
7921: PUSH
7922: LD_INT 24
7924: EQUAL
7925: IFFALSE 7935
// sShovel := true ;
7927: LD_ADDR_EXP 81
7931: PUSH
7932: LD_INT 1
7934: ST_TO_ADDR
// if p3 = 25 then
7935: LD_VAR 0 3
7939: PUSH
7940: LD_INT 25
7942: EQUAL
7943: IFFALSE 7953
// sSheik := true ;
7945: LD_ADDR_EXP 82
7949: PUSH
7950: LD_INT 1
7952: ST_TO_ADDR
// if p3 = 26 then
7953: LD_VAR 0 3
7957: PUSH
7958: LD_INT 26
7960: EQUAL
7961: IFFALSE 7971
// sEarthquake := true ;
7963: LD_ADDR_EXP 84
7967: PUSH
7968: LD_INT 1
7970: ST_TO_ADDR
// if p3 = 27 then
7971: LD_VAR 0 3
7975: PUSH
7976: LD_INT 27
7978: EQUAL
7979: IFFALSE 7989
// sAI := true ;
7981: LD_ADDR_EXP 85
7985: PUSH
7986: LD_INT 1
7988: ST_TO_ADDR
// if p3 = 28 then
7989: LD_VAR 0 3
7993: PUSH
7994: LD_INT 28
7996: EQUAL
7997: IFFALSE 8007
// sCargo := true ;
7999: LD_ADDR_EXP 88
8003: PUSH
8004: LD_INT 1
8006: ST_TO_ADDR
// if p3 = 29 then
8007: LD_VAR 0 3
8011: PUSH
8012: LD_INT 29
8014: EQUAL
8015: IFFALSE 8025
// sDLaser := true ;
8017: LD_ADDR_EXP 89
8021: PUSH
8022: LD_INT 1
8024: ST_TO_ADDR
// if p3 = 30 then
8025: LD_VAR 0 3
8029: PUSH
8030: LD_INT 30
8032: EQUAL
8033: IFFALSE 8043
// sExchange := true ;
8035: LD_ADDR_EXP 90
8039: PUSH
8040: LD_INT 1
8042: ST_TO_ADDR
// if p3 = 31 then
8043: LD_VAR 0 3
8047: PUSH
8048: LD_INT 31
8050: EQUAL
8051: IFFALSE 8061
// sFac := true ;
8053: LD_ADDR_EXP 91
8057: PUSH
8058: LD_INT 1
8060: ST_TO_ADDR
// if p3 = 32 then
8061: LD_VAR 0 3
8065: PUSH
8066: LD_INT 32
8068: EQUAL
8069: IFFALSE 8079
// sPower := true ;
8071: LD_ADDR_EXP 92
8075: PUSH
8076: LD_INT 1
8078: ST_TO_ADDR
// if p3 = 33 then
8079: LD_VAR 0 3
8083: PUSH
8084: LD_INT 33
8086: EQUAL
8087: IFFALSE 8097
// sRandom := true ;
8089: LD_ADDR_EXP 93
8093: PUSH
8094: LD_INT 1
8096: ST_TO_ADDR
// if p3 = 34 then
8097: LD_VAR 0 3
8101: PUSH
8102: LD_INT 34
8104: EQUAL
8105: IFFALSE 8115
// sShield := true ;
8107: LD_ADDR_EXP 94
8111: PUSH
8112: LD_INT 1
8114: ST_TO_ADDR
// if p3 = 35 then
8115: LD_VAR 0 3
8119: PUSH
8120: LD_INT 35
8122: EQUAL
8123: IFFALSE 8133
// sTime := true ;
8125: LD_ADDR_EXP 95
8129: PUSH
8130: LD_INT 1
8132: ST_TO_ADDR
// if p3 = 36 then
8133: LD_VAR 0 3
8137: PUSH
8138: LD_INT 36
8140: EQUAL
8141: IFFALSE 8151
// sTools := true ;
8143: LD_ADDR_EXP 96
8147: PUSH
8148: LD_INT 1
8150: ST_TO_ADDR
// if p3 = 101 then
8151: LD_VAR 0 3
8155: PUSH
8156: LD_INT 101
8158: EQUAL
8159: IFFALSE 8169
// sSold := true ;
8161: LD_ADDR_EXP 61
8165: PUSH
8166: LD_INT 1
8168: ST_TO_ADDR
// if p3 = 102 then
8169: LD_VAR 0 3
8173: PUSH
8174: LD_INT 102
8176: EQUAL
8177: IFFALSE 8187
// sDiff := true ;
8179: LD_ADDR_EXP 62
8183: PUSH
8184: LD_INT 1
8186: ST_TO_ADDR
// if p3 = 103 then
8187: LD_VAR 0 3
8191: PUSH
8192: LD_INT 103
8194: EQUAL
8195: IFFALSE 8205
// sFog := true ;
8197: LD_ADDR_EXP 65
8201: PUSH
8202: LD_INT 1
8204: ST_TO_ADDR
// if p3 = 104 then
8205: LD_VAR 0 3
8209: PUSH
8210: LD_INT 104
8212: EQUAL
8213: IFFALSE 8223
// sReset := true ;
8215: LD_ADDR_EXP 66
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// if p3 = 105 then
8223: LD_VAR 0 3
8227: PUSH
8228: LD_INT 105
8230: EQUAL
8231: IFFALSE 8241
// sSun := true ;
8233: LD_ADDR_EXP 67
8237: PUSH
8238: LD_INT 1
8240: ST_TO_ADDR
// if p3 = 106 then
8241: LD_VAR 0 3
8245: PUSH
8246: LD_INT 106
8248: EQUAL
8249: IFFALSE 8259
// sTiger := true ;
8251: LD_ADDR_EXP 63
8255: PUSH
8256: LD_INT 1
8258: ST_TO_ADDR
// if p3 = 107 then
8259: LD_VAR 0 3
8263: PUSH
8264: LD_INT 107
8266: EQUAL
8267: IFFALSE 8277
// sBomb := true ;
8269: LD_ADDR_EXP 64
8273: PUSH
8274: LD_INT 1
8276: ST_TO_ADDR
// if p3 = 108 then
8277: LD_VAR 0 3
8281: PUSH
8282: LD_INT 108
8284: EQUAL
8285: IFFALSE 8295
// sWound := true ;
8287: LD_ADDR_EXP 72
8291: PUSH
8292: LD_INT 1
8294: ST_TO_ADDR
// if p3 = 109 then
8295: LD_VAR 0 3
8299: PUSH
8300: LD_INT 109
8302: EQUAL
8303: IFFALSE 8313
// sBetray := true ;
8305: LD_ADDR_EXP 76
8309: PUSH
8310: LD_INT 1
8312: ST_TO_ADDR
// if p3 = 110 then
8313: LD_VAR 0 3
8317: PUSH
8318: LD_INT 110
8320: EQUAL
8321: IFFALSE 8331
// sContamin := true ;
8323: LD_ADDR_EXP 77
8327: PUSH
8328: LD_INT 1
8330: ST_TO_ADDR
// if p3 = 111 then
8331: LD_VAR 0 3
8335: PUSH
8336: LD_INT 111
8338: EQUAL
8339: IFFALSE 8349
// sOil := true ;
8341: LD_ADDR_EXP 79
8345: PUSH
8346: LD_INT 1
8348: ST_TO_ADDR
// if p3 = 112 then
8349: LD_VAR 0 3
8353: PUSH
8354: LD_INT 112
8356: EQUAL
8357: IFFALSE 8367
// sStu := true ;
8359: LD_ADDR_EXP 83
8363: PUSH
8364: LD_INT 1
8366: ST_TO_ADDR
// if p3 = 113 then
8367: LD_VAR 0 3
8371: PUSH
8372: LD_INT 113
8374: EQUAL
8375: IFFALSE 8385
// sBazooka := true ;
8377: LD_ADDR_EXP 86
8381: PUSH
8382: LD_INT 1
8384: ST_TO_ADDR
// if p3 = 114 then
8385: LD_VAR 0 3
8389: PUSH
8390: LD_INT 114
8392: EQUAL
8393: IFFALSE 8403
// sMortar := true ;
8395: LD_ADDR_EXP 87
8399: PUSH
8400: LD_INT 1
8402: ST_TO_ADDR
// if p3 = 115 then
8403: LD_VAR 0 3
8407: PUSH
8408: LD_INT 115
8410: EQUAL
8411: IFFALSE 8421
// sRanger := true ;
8413: LD_ADDR_EXP 97
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// if p3 = 116 then
8421: LD_VAR 0 3
8425: PUSH
8426: LD_INT 116
8428: EQUAL
8429: IFFALSE 8439
// sComputer := true ;
8431: LD_ADDR_EXP 98
8435: PUSH
8436: LD_INT 1
8438: ST_TO_ADDR
// if p3 = 117 then
8439: LD_VAR 0 3
8443: PUSH
8444: LD_INT 117
8446: EQUAL
8447: IFFALSE 8457
// s30 := true ;
8449: LD_ADDR_EXP 99
8453: PUSH
8454: LD_INT 1
8456: ST_TO_ADDR
// if p3 = 118 then
8457: LD_VAR 0 3
8461: PUSH
8462: LD_INT 118
8464: EQUAL
8465: IFFALSE 8475
// s60 := true ;
8467: LD_ADDR_EXP 100
8471: PUSH
8472: LD_INT 1
8474: ST_TO_ADDR
// end ; if p2 = 101 then
8475: LD_VAR 0 2
8479: PUSH
8480: LD_INT 101
8482: EQUAL
8483: IFFALSE 8611
// begin case p3 of 1 :
8485: LD_VAR 0 3
8489: PUSH
8490: LD_INT 1
8492: DOUBLE
8493: EQUAL
8494: IFTRUE 8498
8496: GO 8505
8498: POP
// hHackUnlimitedResources ; 2 :
8499: CALL 20709 0 0
8503: GO 8611
8505: LD_INT 2
8507: DOUBLE
8508: EQUAL
8509: IFTRUE 8513
8511: GO 8520
8513: POP
// hHackSetLevel10 ; 3 :
8514: CALL 20842 0 0
8518: GO 8611
8520: LD_INT 3
8522: DOUBLE
8523: EQUAL
8524: IFTRUE 8528
8526: GO 8535
8528: POP
// hHackSetLevel10YourUnits ; 4 :
8529: CALL 20927 0 0
8533: GO 8611
8535: LD_INT 4
8537: DOUBLE
8538: EQUAL
8539: IFTRUE 8543
8541: GO 8550
8543: POP
// hHackInvincible ; 5 :
8544: CALL 21375 0 0
8548: GO 8611
8550: LD_INT 5
8552: DOUBLE
8553: EQUAL
8554: IFTRUE 8558
8556: GO 8565
8558: POP
// hHackInvisible ; 6 :
8559: CALL 21486 0 0
8563: GO 8611
8565: LD_INT 6
8567: DOUBLE
8568: EQUAL
8569: IFTRUE 8573
8571: GO 8580
8573: POP
// hHackChangeYourSide ; 7 :
8574: CALL 21543 0 0
8578: GO 8611
8580: LD_INT 7
8582: DOUBLE
8583: EQUAL
8584: IFTRUE 8588
8586: GO 8595
8588: POP
// hHackChangeUnitSide ; 8 :
8589: CALL 21585 0 0
8593: GO 8611
8595: LD_INT 8
8597: DOUBLE
8598: EQUAL
8599: IFTRUE 8603
8601: GO 8610
8603: POP
// hHackFog ; end ;
8604: CALL 21686 0 0
8608: GO 8611
8610: POP
// end ; end ;
8611: LD_VAR 0 7
8615: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8616: GO 8618
8618: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8619: LD_STRING initStreamRollete();
8621: PPUSH
8622: CALL_OW 559
// InitStreamMode ;
8626: CALL 8638 0 0
// DefineStreamItems ( false ) ;
8630: LD_INT 0
8632: PPUSH
8633: CALL 9102 0 1
// end ;
8637: END
// function InitStreamMode ; begin
8638: LD_INT 0
8640: PPUSH
// streamModeActive := false ;
8641: LD_ADDR_EXP 44
8645: PUSH
8646: LD_INT 0
8648: ST_TO_ADDR
// normalCounter := 36 ;
8649: LD_ADDR_EXP 45
8653: PUSH
8654: LD_INT 36
8656: ST_TO_ADDR
// hardcoreCounter := 18 ;
8657: LD_ADDR_EXP 46
8661: PUSH
8662: LD_INT 18
8664: ST_TO_ADDR
// sRocket := false ;
8665: LD_ADDR_EXP 49
8669: PUSH
8670: LD_INT 0
8672: ST_TO_ADDR
// sSpeed := false ;
8673: LD_ADDR_EXP 48
8677: PUSH
8678: LD_INT 0
8680: ST_TO_ADDR
// sEngine := false ;
8681: LD_ADDR_EXP 50
8685: PUSH
8686: LD_INT 0
8688: ST_TO_ADDR
// sSpec := false ;
8689: LD_ADDR_EXP 47
8693: PUSH
8694: LD_INT 0
8696: ST_TO_ADDR
// sLevel := false ;
8697: LD_ADDR_EXP 51
8701: PUSH
8702: LD_INT 0
8704: ST_TO_ADDR
// sArmoury := false ;
8705: LD_ADDR_EXP 52
8709: PUSH
8710: LD_INT 0
8712: ST_TO_ADDR
// sRadar := false ;
8713: LD_ADDR_EXP 53
8717: PUSH
8718: LD_INT 0
8720: ST_TO_ADDR
// sBunker := false ;
8721: LD_ADDR_EXP 54
8725: PUSH
8726: LD_INT 0
8728: ST_TO_ADDR
// sHack := false ;
8729: LD_ADDR_EXP 55
8733: PUSH
8734: LD_INT 0
8736: ST_TO_ADDR
// sFire := false ;
8737: LD_ADDR_EXP 56
8741: PUSH
8742: LD_INT 0
8744: ST_TO_ADDR
// sRefresh := false ;
8745: LD_ADDR_EXP 57
8749: PUSH
8750: LD_INT 0
8752: ST_TO_ADDR
// sExp := false ;
8753: LD_ADDR_EXP 58
8757: PUSH
8758: LD_INT 0
8760: ST_TO_ADDR
// sDepot := false ;
8761: LD_ADDR_EXP 59
8765: PUSH
8766: LD_INT 0
8768: ST_TO_ADDR
// sFlag := false ;
8769: LD_ADDR_EXP 60
8773: PUSH
8774: LD_INT 0
8776: ST_TO_ADDR
// sKamikadze := false ;
8777: LD_ADDR_EXP 68
8781: PUSH
8782: LD_INT 0
8784: ST_TO_ADDR
// sTroll := false ;
8785: LD_ADDR_EXP 69
8789: PUSH
8790: LD_INT 0
8792: ST_TO_ADDR
// sSlow := false ;
8793: LD_ADDR_EXP 70
8797: PUSH
8798: LD_INT 0
8800: ST_TO_ADDR
// sLack := false ;
8801: LD_ADDR_EXP 71
8805: PUSH
8806: LD_INT 0
8808: ST_TO_ADDR
// sTank := false ;
8809: LD_ADDR_EXP 73
8813: PUSH
8814: LD_INT 0
8816: ST_TO_ADDR
// sRemote := false ;
8817: LD_ADDR_EXP 74
8821: PUSH
8822: LD_INT 0
8824: ST_TO_ADDR
// sPowell := false ;
8825: LD_ADDR_EXP 75
8829: PUSH
8830: LD_INT 0
8832: ST_TO_ADDR
// sTeleport := false ;
8833: LD_ADDR_EXP 78
8837: PUSH
8838: LD_INT 0
8840: ST_TO_ADDR
// sOilTower := false ;
8841: LD_ADDR_EXP 80
8845: PUSH
8846: LD_INT 0
8848: ST_TO_ADDR
// sShovel := false ;
8849: LD_ADDR_EXP 81
8853: PUSH
8854: LD_INT 0
8856: ST_TO_ADDR
// sSheik := false ;
8857: LD_ADDR_EXP 82
8861: PUSH
8862: LD_INT 0
8864: ST_TO_ADDR
// sEarthquake := false ;
8865: LD_ADDR_EXP 84
8869: PUSH
8870: LD_INT 0
8872: ST_TO_ADDR
// sAI := false ;
8873: LD_ADDR_EXP 85
8877: PUSH
8878: LD_INT 0
8880: ST_TO_ADDR
// sCargo := false ;
8881: LD_ADDR_EXP 88
8885: PUSH
8886: LD_INT 0
8888: ST_TO_ADDR
// sDLaser := false ;
8889: LD_ADDR_EXP 89
8893: PUSH
8894: LD_INT 0
8896: ST_TO_ADDR
// sExchange := false ;
8897: LD_ADDR_EXP 90
8901: PUSH
8902: LD_INT 0
8904: ST_TO_ADDR
// sFac := false ;
8905: LD_ADDR_EXP 91
8909: PUSH
8910: LD_INT 0
8912: ST_TO_ADDR
// sPower := false ;
8913: LD_ADDR_EXP 92
8917: PUSH
8918: LD_INT 0
8920: ST_TO_ADDR
// sRandom := false ;
8921: LD_ADDR_EXP 93
8925: PUSH
8926: LD_INT 0
8928: ST_TO_ADDR
// sShield := false ;
8929: LD_ADDR_EXP 94
8933: PUSH
8934: LD_INT 0
8936: ST_TO_ADDR
// sTime := false ;
8937: LD_ADDR_EXP 95
8941: PUSH
8942: LD_INT 0
8944: ST_TO_ADDR
// sTools := false ;
8945: LD_ADDR_EXP 96
8949: PUSH
8950: LD_INT 0
8952: ST_TO_ADDR
// sSold := false ;
8953: LD_ADDR_EXP 61
8957: PUSH
8958: LD_INT 0
8960: ST_TO_ADDR
// sDiff := false ;
8961: LD_ADDR_EXP 62
8965: PUSH
8966: LD_INT 0
8968: ST_TO_ADDR
// sFog := false ;
8969: LD_ADDR_EXP 65
8973: PUSH
8974: LD_INT 0
8976: ST_TO_ADDR
// sReset := false ;
8977: LD_ADDR_EXP 66
8981: PUSH
8982: LD_INT 0
8984: ST_TO_ADDR
// sSun := false ;
8985: LD_ADDR_EXP 67
8989: PUSH
8990: LD_INT 0
8992: ST_TO_ADDR
// sTiger := false ;
8993: LD_ADDR_EXP 63
8997: PUSH
8998: LD_INT 0
9000: ST_TO_ADDR
// sBomb := false ;
9001: LD_ADDR_EXP 64
9005: PUSH
9006: LD_INT 0
9008: ST_TO_ADDR
// sWound := false ;
9009: LD_ADDR_EXP 72
9013: PUSH
9014: LD_INT 0
9016: ST_TO_ADDR
// sBetray := false ;
9017: LD_ADDR_EXP 76
9021: PUSH
9022: LD_INT 0
9024: ST_TO_ADDR
// sContamin := false ;
9025: LD_ADDR_EXP 77
9029: PUSH
9030: LD_INT 0
9032: ST_TO_ADDR
// sOil := false ;
9033: LD_ADDR_EXP 79
9037: PUSH
9038: LD_INT 0
9040: ST_TO_ADDR
// sStu := false ;
9041: LD_ADDR_EXP 83
9045: PUSH
9046: LD_INT 0
9048: ST_TO_ADDR
// sBazooka := false ;
9049: LD_ADDR_EXP 86
9053: PUSH
9054: LD_INT 0
9056: ST_TO_ADDR
// sMortar := false ;
9057: LD_ADDR_EXP 87
9061: PUSH
9062: LD_INT 0
9064: ST_TO_ADDR
// sRanger := false ;
9065: LD_ADDR_EXP 97
9069: PUSH
9070: LD_INT 0
9072: ST_TO_ADDR
// sComputer := false ;
9073: LD_ADDR_EXP 98
9077: PUSH
9078: LD_INT 0
9080: ST_TO_ADDR
// s30 := false ;
9081: LD_ADDR_EXP 99
9085: PUSH
9086: LD_INT 0
9088: ST_TO_ADDR
// s60 := false ;
9089: LD_ADDR_EXP 100
9093: PUSH
9094: LD_INT 0
9096: ST_TO_ADDR
// end ;
9097: LD_VAR 0 1
9101: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9102: LD_INT 0
9104: PPUSH
9105: PPUSH
9106: PPUSH
9107: PPUSH
9108: PPUSH
9109: PPUSH
9110: PPUSH
// result := [ ] ;
9111: LD_ADDR_VAR 0 2
9115: PUSH
9116: EMPTY
9117: ST_TO_ADDR
// if campaign_id = 1 then
9118: LD_OWVAR 69
9122: PUSH
9123: LD_INT 1
9125: EQUAL
9126: IFFALSE 12292
// begin case mission_number of 1 :
9128: LD_OWVAR 70
9132: PUSH
9133: LD_INT 1
9135: DOUBLE
9136: EQUAL
9137: IFTRUE 9141
9139: GO 9217
9141: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9142: LD_ADDR_VAR 0 2
9146: PUSH
9147: LD_INT 2
9149: PUSH
9150: LD_INT 4
9152: PUSH
9153: LD_INT 11
9155: PUSH
9156: LD_INT 12
9158: PUSH
9159: LD_INT 15
9161: PUSH
9162: LD_INT 16
9164: PUSH
9165: LD_INT 22
9167: PUSH
9168: LD_INT 23
9170: PUSH
9171: LD_INT 26
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 101
9187: PUSH
9188: LD_INT 102
9190: PUSH
9191: LD_INT 106
9193: PUSH
9194: LD_INT 116
9196: PUSH
9197: LD_INT 117
9199: PUSH
9200: LD_INT 118
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: ST_TO_ADDR
9215: GO 12290
9217: LD_INT 2
9219: DOUBLE
9220: EQUAL
9221: IFTRUE 9225
9223: GO 9309
9225: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9226: LD_ADDR_VAR 0 2
9230: PUSH
9231: LD_INT 2
9233: PUSH
9234: LD_INT 4
9236: PUSH
9237: LD_INT 11
9239: PUSH
9240: LD_INT 12
9242: PUSH
9243: LD_INT 15
9245: PUSH
9246: LD_INT 16
9248: PUSH
9249: LD_INT 22
9251: PUSH
9252: LD_INT 23
9254: PUSH
9255: LD_INT 26
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 101
9271: PUSH
9272: LD_INT 102
9274: PUSH
9275: LD_INT 105
9277: PUSH
9278: LD_INT 106
9280: PUSH
9281: LD_INT 108
9283: PUSH
9284: LD_INT 116
9286: PUSH
9287: LD_INT 117
9289: PUSH
9290: LD_INT 118
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: ST_TO_ADDR
9307: GO 12290
9309: LD_INT 3
9311: DOUBLE
9312: EQUAL
9313: IFTRUE 9317
9315: GO 9405
9317: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9318: LD_ADDR_VAR 0 2
9322: PUSH
9323: LD_INT 2
9325: PUSH
9326: LD_INT 4
9328: PUSH
9329: LD_INT 5
9331: PUSH
9332: LD_INT 11
9334: PUSH
9335: LD_INT 12
9337: PUSH
9338: LD_INT 15
9340: PUSH
9341: LD_INT 16
9343: PUSH
9344: LD_INT 22
9346: PUSH
9347: LD_INT 26
9349: PUSH
9350: LD_INT 36
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: PUSH
9365: LD_INT 101
9367: PUSH
9368: LD_INT 102
9370: PUSH
9371: LD_INT 105
9373: PUSH
9374: LD_INT 106
9376: PUSH
9377: LD_INT 108
9379: PUSH
9380: LD_INT 116
9382: PUSH
9383: LD_INT 117
9385: PUSH
9386: LD_INT 118
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: ST_TO_ADDR
9403: GO 12290
9405: LD_INT 4
9407: DOUBLE
9408: EQUAL
9409: IFTRUE 9413
9411: GO 9509
9413: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9414: LD_ADDR_VAR 0 2
9418: PUSH
9419: LD_INT 2
9421: PUSH
9422: LD_INT 4
9424: PUSH
9425: LD_INT 5
9427: PUSH
9428: LD_INT 8
9430: PUSH
9431: LD_INT 11
9433: PUSH
9434: LD_INT 12
9436: PUSH
9437: LD_INT 15
9439: PUSH
9440: LD_INT 16
9442: PUSH
9443: LD_INT 22
9445: PUSH
9446: LD_INT 23
9448: PUSH
9449: LD_INT 26
9451: PUSH
9452: LD_INT 36
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 101
9471: PUSH
9472: LD_INT 102
9474: PUSH
9475: LD_INT 105
9477: PUSH
9478: LD_INT 106
9480: PUSH
9481: LD_INT 108
9483: PUSH
9484: LD_INT 116
9486: PUSH
9487: LD_INT 117
9489: PUSH
9490: LD_INT 118
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: ST_TO_ADDR
9507: GO 12290
9509: LD_INT 5
9511: DOUBLE
9512: EQUAL
9513: IFTRUE 9517
9515: GO 9629
9517: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9518: LD_ADDR_VAR 0 2
9522: PUSH
9523: LD_INT 2
9525: PUSH
9526: LD_INT 4
9528: PUSH
9529: LD_INT 5
9531: PUSH
9532: LD_INT 6
9534: PUSH
9535: LD_INT 8
9537: PUSH
9538: LD_INT 11
9540: PUSH
9541: LD_INT 12
9543: PUSH
9544: LD_INT 15
9546: PUSH
9547: LD_INT 16
9549: PUSH
9550: LD_INT 22
9552: PUSH
9553: LD_INT 23
9555: PUSH
9556: LD_INT 25
9558: PUSH
9559: LD_INT 26
9561: PUSH
9562: LD_INT 36
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: PUSH
9581: LD_INT 101
9583: PUSH
9584: LD_INT 102
9586: PUSH
9587: LD_INT 105
9589: PUSH
9590: LD_INT 106
9592: PUSH
9593: LD_INT 108
9595: PUSH
9596: LD_INT 109
9598: PUSH
9599: LD_INT 112
9601: PUSH
9602: LD_INT 116
9604: PUSH
9605: LD_INT 117
9607: PUSH
9608: LD_INT 118
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: ST_TO_ADDR
9627: GO 12290
9629: LD_INT 6
9631: DOUBLE
9632: EQUAL
9633: IFTRUE 9637
9635: GO 9769
9637: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9638: LD_ADDR_VAR 0 2
9642: PUSH
9643: LD_INT 2
9645: PUSH
9646: LD_INT 4
9648: PUSH
9649: LD_INT 5
9651: PUSH
9652: LD_INT 6
9654: PUSH
9655: LD_INT 8
9657: PUSH
9658: LD_INT 11
9660: PUSH
9661: LD_INT 12
9663: PUSH
9664: LD_INT 15
9666: PUSH
9667: LD_INT 16
9669: PUSH
9670: LD_INT 20
9672: PUSH
9673: LD_INT 21
9675: PUSH
9676: LD_INT 22
9678: PUSH
9679: LD_INT 23
9681: PUSH
9682: LD_INT 25
9684: PUSH
9685: LD_INT 26
9687: PUSH
9688: LD_INT 30
9690: PUSH
9691: LD_INT 31
9693: PUSH
9694: LD_INT 32
9696: PUSH
9697: LD_INT 36
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: PUSH
9721: LD_INT 101
9723: PUSH
9724: LD_INT 102
9726: PUSH
9727: LD_INT 105
9729: PUSH
9730: LD_INT 106
9732: PUSH
9733: LD_INT 108
9735: PUSH
9736: LD_INT 109
9738: PUSH
9739: LD_INT 112
9741: PUSH
9742: LD_INT 116
9744: PUSH
9745: LD_INT 117
9747: PUSH
9748: LD_INT 118
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: ST_TO_ADDR
9767: GO 12290
9769: LD_INT 7
9771: DOUBLE
9772: EQUAL
9773: IFTRUE 9777
9775: GO 9889
9777: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9778: LD_ADDR_VAR 0 2
9782: PUSH
9783: LD_INT 2
9785: PUSH
9786: LD_INT 4
9788: PUSH
9789: LD_INT 5
9791: PUSH
9792: LD_INT 7
9794: PUSH
9795: LD_INT 11
9797: PUSH
9798: LD_INT 12
9800: PUSH
9801: LD_INT 15
9803: PUSH
9804: LD_INT 16
9806: PUSH
9807: LD_INT 20
9809: PUSH
9810: LD_INT 21
9812: PUSH
9813: LD_INT 22
9815: PUSH
9816: LD_INT 23
9818: PUSH
9819: LD_INT 25
9821: PUSH
9822: LD_INT 26
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 101
9843: PUSH
9844: LD_INT 102
9846: PUSH
9847: LD_INT 103
9849: PUSH
9850: LD_INT 105
9852: PUSH
9853: LD_INT 106
9855: PUSH
9856: LD_INT 108
9858: PUSH
9859: LD_INT 112
9861: PUSH
9862: LD_INT 116
9864: PUSH
9865: LD_INT 117
9867: PUSH
9868: LD_INT 118
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: ST_TO_ADDR
9887: GO 12290
9889: LD_INT 8
9891: DOUBLE
9892: EQUAL
9893: IFTRUE 9897
9895: GO 10037
9897: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9898: LD_ADDR_VAR 0 2
9902: PUSH
9903: LD_INT 2
9905: PUSH
9906: LD_INT 4
9908: PUSH
9909: LD_INT 5
9911: PUSH
9912: LD_INT 6
9914: PUSH
9915: LD_INT 7
9917: PUSH
9918: LD_INT 8
9920: PUSH
9921: LD_INT 11
9923: PUSH
9924: LD_INT 12
9926: PUSH
9927: LD_INT 15
9929: PUSH
9930: LD_INT 16
9932: PUSH
9933: LD_INT 20
9935: PUSH
9936: LD_INT 21
9938: PUSH
9939: LD_INT 22
9941: PUSH
9942: LD_INT 23
9944: PUSH
9945: LD_INT 25
9947: PUSH
9948: LD_INT 26
9950: PUSH
9951: LD_INT 30
9953: PUSH
9954: LD_INT 31
9956: PUSH
9957: LD_INT 32
9959: PUSH
9960: LD_INT 36
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: PUSH
9985: LD_INT 101
9987: PUSH
9988: LD_INT 102
9990: PUSH
9991: LD_INT 103
9993: PUSH
9994: LD_INT 105
9996: PUSH
9997: LD_INT 106
9999: PUSH
10000: LD_INT 108
10002: PUSH
10003: LD_INT 109
10005: PUSH
10006: LD_INT 112
10008: PUSH
10009: LD_INT 116
10011: PUSH
10012: LD_INT 117
10014: PUSH
10015: LD_INT 118
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: ST_TO_ADDR
10035: GO 12290
10037: LD_INT 9
10039: DOUBLE
10040: EQUAL
10041: IFTRUE 10045
10043: GO 10193
10045: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10046: LD_ADDR_VAR 0 2
10050: PUSH
10051: LD_INT 2
10053: PUSH
10054: LD_INT 4
10056: PUSH
10057: LD_INT 5
10059: PUSH
10060: LD_INT 6
10062: PUSH
10063: LD_INT 7
10065: PUSH
10066: LD_INT 8
10068: PUSH
10069: LD_INT 11
10071: PUSH
10072: LD_INT 12
10074: PUSH
10075: LD_INT 15
10077: PUSH
10078: LD_INT 16
10080: PUSH
10081: LD_INT 20
10083: PUSH
10084: LD_INT 21
10086: PUSH
10087: LD_INT 22
10089: PUSH
10090: LD_INT 23
10092: PUSH
10093: LD_INT 25
10095: PUSH
10096: LD_INT 26
10098: PUSH
10099: LD_INT 28
10101: PUSH
10102: LD_INT 30
10104: PUSH
10105: LD_INT 31
10107: PUSH
10108: LD_INT 32
10110: PUSH
10111: LD_INT 36
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: PUSH
10137: LD_INT 101
10139: PUSH
10140: LD_INT 102
10142: PUSH
10143: LD_INT 103
10145: PUSH
10146: LD_INT 105
10148: PUSH
10149: LD_INT 106
10151: PUSH
10152: LD_INT 108
10154: PUSH
10155: LD_INT 109
10157: PUSH
10158: LD_INT 112
10160: PUSH
10161: LD_INT 114
10163: PUSH
10164: LD_INT 116
10166: PUSH
10167: LD_INT 117
10169: PUSH
10170: LD_INT 118
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: ST_TO_ADDR
10191: GO 12290
10193: LD_INT 10
10195: DOUBLE
10196: EQUAL
10197: IFTRUE 10201
10199: GO 10397
10201: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10202: LD_ADDR_VAR 0 2
10206: PUSH
10207: LD_INT 2
10209: PUSH
10210: LD_INT 4
10212: PUSH
10213: LD_INT 5
10215: PUSH
10216: LD_INT 6
10218: PUSH
10219: LD_INT 7
10221: PUSH
10222: LD_INT 8
10224: PUSH
10225: LD_INT 9
10227: PUSH
10228: LD_INT 10
10230: PUSH
10231: LD_INT 11
10233: PUSH
10234: LD_INT 12
10236: PUSH
10237: LD_INT 13
10239: PUSH
10240: LD_INT 14
10242: PUSH
10243: LD_INT 15
10245: PUSH
10246: LD_INT 16
10248: PUSH
10249: LD_INT 17
10251: PUSH
10252: LD_INT 18
10254: PUSH
10255: LD_INT 19
10257: PUSH
10258: LD_INT 20
10260: PUSH
10261: LD_INT 21
10263: PUSH
10264: LD_INT 22
10266: PUSH
10267: LD_INT 23
10269: PUSH
10270: LD_INT 24
10272: PUSH
10273: LD_INT 25
10275: PUSH
10276: LD_INT 26
10278: PUSH
10279: LD_INT 28
10281: PUSH
10282: LD_INT 30
10284: PUSH
10285: LD_INT 31
10287: PUSH
10288: LD_INT 32
10290: PUSH
10291: LD_INT 36
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 101
10327: PUSH
10328: LD_INT 102
10330: PUSH
10331: LD_INT 103
10333: PUSH
10334: LD_INT 104
10336: PUSH
10337: LD_INT 105
10339: PUSH
10340: LD_INT 106
10342: PUSH
10343: LD_INT 107
10345: PUSH
10346: LD_INT 108
10348: PUSH
10349: LD_INT 109
10351: PUSH
10352: LD_INT 110
10354: PUSH
10355: LD_INT 111
10357: PUSH
10358: LD_INT 112
10360: PUSH
10361: LD_INT 114
10363: PUSH
10364: LD_INT 116
10366: PUSH
10367: LD_INT 117
10369: PUSH
10370: LD_INT 118
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: ST_TO_ADDR
10395: GO 12290
10397: LD_INT 11
10399: DOUBLE
10400: EQUAL
10401: IFTRUE 10405
10403: GO 10609
10405: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10406: LD_ADDR_VAR 0 2
10410: PUSH
10411: LD_INT 2
10413: PUSH
10414: LD_INT 3
10416: PUSH
10417: LD_INT 4
10419: PUSH
10420: LD_INT 5
10422: PUSH
10423: LD_INT 6
10425: PUSH
10426: LD_INT 7
10428: PUSH
10429: LD_INT 8
10431: PUSH
10432: LD_INT 9
10434: PUSH
10435: LD_INT 10
10437: PUSH
10438: LD_INT 11
10440: PUSH
10441: LD_INT 12
10443: PUSH
10444: LD_INT 13
10446: PUSH
10447: LD_INT 14
10449: PUSH
10450: LD_INT 15
10452: PUSH
10453: LD_INT 16
10455: PUSH
10456: LD_INT 17
10458: PUSH
10459: LD_INT 18
10461: PUSH
10462: LD_INT 19
10464: PUSH
10465: LD_INT 20
10467: PUSH
10468: LD_INT 21
10470: PUSH
10471: LD_INT 22
10473: PUSH
10474: LD_INT 23
10476: PUSH
10477: LD_INT 24
10479: PUSH
10480: LD_INT 25
10482: PUSH
10483: LD_INT 26
10485: PUSH
10486: LD_INT 28
10488: PUSH
10489: LD_INT 30
10491: PUSH
10492: LD_INT 31
10494: PUSH
10495: LD_INT 32
10497: PUSH
10498: LD_INT 34
10500: PUSH
10501: LD_INT 36
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: PUSH
10537: LD_INT 101
10539: PUSH
10540: LD_INT 102
10542: PUSH
10543: LD_INT 103
10545: PUSH
10546: LD_INT 104
10548: PUSH
10549: LD_INT 105
10551: PUSH
10552: LD_INT 106
10554: PUSH
10555: LD_INT 107
10557: PUSH
10558: LD_INT 108
10560: PUSH
10561: LD_INT 109
10563: PUSH
10564: LD_INT 110
10566: PUSH
10567: LD_INT 111
10569: PUSH
10570: LD_INT 112
10572: PUSH
10573: LD_INT 114
10575: PUSH
10576: LD_INT 116
10578: PUSH
10579: LD_INT 117
10581: PUSH
10582: LD_INT 118
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: ST_TO_ADDR
10607: GO 12290
10609: LD_INT 12
10611: DOUBLE
10612: EQUAL
10613: IFTRUE 10617
10615: GO 10837
10617: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10618: LD_ADDR_VAR 0 2
10622: PUSH
10623: LD_INT 1
10625: PUSH
10626: LD_INT 2
10628: PUSH
10629: LD_INT 3
10631: PUSH
10632: LD_INT 4
10634: PUSH
10635: LD_INT 5
10637: PUSH
10638: LD_INT 6
10640: PUSH
10641: LD_INT 7
10643: PUSH
10644: LD_INT 8
10646: PUSH
10647: LD_INT 9
10649: PUSH
10650: LD_INT 10
10652: PUSH
10653: LD_INT 11
10655: PUSH
10656: LD_INT 12
10658: PUSH
10659: LD_INT 13
10661: PUSH
10662: LD_INT 14
10664: PUSH
10665: LD_INT 15
10667: PUSH
10668: LD_INT 16
10670: PUSH
10671: LD_INT 17
10673: PUSH
10674: LD_INT 18
10676: PUSH
10677: LD_INT 19
10679: PUSH
10680: LD_INT 20
10682: PUSH
10683: LD_INT 21
10685: PUSH
10686: LD_INT 22
10688: PUSH
10689: LD_INT 23
10691: PUSH
10692: LD_INT 24
10694: PUSH
10695: LD_INT 25
10697: PUSH
10698: LD_INT 26
10700: PUSH
10701: LD_INT 27
10703: PUSH
10704: LD_INT 28
10706: PUSH
10707: LD_INT 30
10709: PUSH
10710: LD_INT 31
10712: PUSH
10713: LD_INT 32
10715: PUSH
10716: LD_INT 33
10718: PUSH
10719: LD_INT 34
10721: PUSH
10722: LD_INT 36
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 101
10763: PUSH
10764: LD_INT 102
10766: PUSH
10767: LD_INT 103
10769: PUSH
10770: LD_INT 104
10772: PUSH
10773: LD_INT 105
10775: PUSH
10776: LD_INT 106
10778: PUSH
10779: LD_INT 107
10781: PUSH
10782: LD_INT 108
10784: PUSH
10785: LD_INT 109
10787: PUSH
10788: LD_INT 110
10790: PUSH
10791: LD_INT 111
10793: PUSH
10794: LD_INT 112
10796: PUSH
10797: LD_INT 113
10799: PUSH
10800: LD_INT 114
10802: PUSH
10803: LD_INT 116
10805: PUSH
10806: LD_INT 117
10808: PUSH
10809: LD_INT 118
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: ST_TO_ADDR
10835: GO 12290
10837: LD_INT 13
10839: DOUBLE
10840: EQUAL
10841: IFTRUE 10845
10843: GO 11053
10845: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10846: LD_ADDR_VAR 0 2
10850: PUSH
10851: LD_INT 1
10853: PUSH
10854: LD_INT 2
10856: PUSH
10857: LD_INT 3
10859: PUSH
10860: LD_INT 4
10862: PUSH
10863: LD_INT 5
10865: PUSH
10866: LD_INT 8
10868: PUSH
10869: LD_INT 9
10871: PUSH
10872: LD_INT 10
10874: PUSH
10875: LD_INT 11
10877: PUSH
10878: LD_INT 12
10880: PUSH
10881: LD_INT 14
10883: PUSH
10884: LD_INT 15
10886: PUSH
10887: LD_INT 16
10889: PUSH
10890: LD_INT 17
10892: PUSH
10893: LD_INT 18
10895: PUSH
10896: LD_INT 19
10898: PUSH
10899: LD_INT 20
10901: PUSH
10902: LD_INT 21
10904: PUSH
10905: LD_INT 22
10907: PUSH
10908: LD_INT 23
10910: PUSH
10911: LD_INT 24
10913: PUSH
10914: LD_INT 25
10916: PUSH
10917: LD_INT 26
10919: PUSH
10920: LD_INT 27
10922: PUSH
10923: LD_INT 28
10925: PUSH
10926: LD_INT 30
10928: PUSH
10929: LD_INT 31
10931: PUSH
10932: LD_INT 32
10934: PUSH
10935: LD_INT 33
10937: PUSH
10938: LD_INT 34
10940: PUSH
10941: LD_INT 36
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 101
10979: PUSH
10980: LD_INT 102
10982: PUSH
10983: LD_INT 103
10985: PUSH
10986: LD_INT 104
10988: PUSH
10989: LD_INT 105
10991: PUSH
10992: LD_INT 106
10994: PUSH
10995: LD_INT 107
10997: PUSH
10998: LD_INT 108
11000: PUSH
11001: LD_INT 109
11003: PUSH
11004: LD_INT 110
11006: PUSH
11007: LD_INT 111
11009: PUSH
11010: LD_INT 112
11012: PUSH
11013: LD_INT 113
11015: PUSH
11016: LD_INT 114
11018: PUSH
11019: LD_INT 116
11021: PUSH
11022: LD_INT 117
11024: PUSH
11025: LD_INT 118
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: ST_TO_ADDR
11051: GO 12290
11053: LD_INT 14
11055: DOUBLE
11056: EQUAL
11057: IFTRUE 11061
11059: GO 11285
11061: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11062: LD_ADDR_VAR 0 2
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: LD_INT 2
11072: PUSH
11073: LD_INT 3
11075: PUSH
11076: LD_INT 4
11078: PUSH
11079: LD_INT 5
11081: PUSH
11082: LD_INT 6
11084: PUSH
11085: LD_INT 7
11087: PUSH
11088: LD_INT 8
11090: PUSH
11091: LD_INT 9
11093: PUSH
11094: LD_INT 10
11096: PUSH
11097: LD_INT 11
11099: PUSH
11100: LD_INT 12
11102: PUSH
11103: LD_INT 13
11105: PUSH
11106: LD_INT 14
11108: PUSH
11109: LD_INT 15
11111: PUSH
11112: LD_INT 16
11114: PUSH
11115: LD_INT 17
11117: PUSH
11118: LD_INT 18
11120: PUSH
11121: LD_INT 19
11123: PUSH
11124: LD_INT 20
11126: PUSH
11127: LD_INT 21
11129: PUSH
11130: LD_INT 22
11132: PUSH
11133: LD_INT 23
11135: PUSH
11136: LD_INT 24
11138: PUSH
11139: LD_INT 25
11141: PUSH
11142: LD_INT 26
11144: PUSH
11145: LD_INT 27
11147: PUSH
11148: LD_INT 28
11150: PUSH
11151: LD_INT 29
11153: PUSH
11154: LD_INT 30
11156: PUSH
11157: LD_INT 31
11159: PUSH
11160: LD_INT 32
11162: PUSH
11163: LD_INT 33
11165: PUSH
11166: LD_INT 34
11168: PUSH
11169: LD_INT 36
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 101
11211: PUSH
11212: LD_INT 102
11214: PUSH
11215: LD_INT 103
11217: PUSH
11218: LD_INT 104
11220: PUSH
11221: LD_INT 105
11223: PUSH
11224: LD_INT 106
11226: PUSH
11227: LD_INT 107
11229: PUSH
11230: LD_INT 108
11232: PUSH
11233: LD_INT 109
11235: PUSH
11236: LD_INT 110
11238: PUSH
11239: LD_INT 111
11241: PUSH
11242: LD_INT 112
11244: PUSH
11245: LD_INT 113
11247: PUSH
11248: LD_INT 114
11250: PUSH
11251: LD_INT 116
11253: PUSH
11254: LD_INT 117
11256: PUSH
11257: LD_INT 118
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: ST_TO_ADDR
11283: GO 12290
11285: LD_INT 15
11287: DOUBLE
11288: EQUAL
11289: IFTRUE 11293
11291: GO 11517
11293: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11294: LD_ADDR_VAR 0 2
11298: PUSH
11299: LD_INT 1
11301: PUSH
11302: LD_INT 2
11304: PUSH
11305: LD_INT 3
11307: PUSH
11308: LD_INT 4
11310: PUSH
11311: LD_INT 5
11313: PUSH
11314: LD_INT 6
11316: PUSH
11317: LD_INT 7
11319: PUSH
11320: LD_INT 8
11322: PUSH
11323: LD_INT 9
11325: PUSH
11326: LD_INT 10
11328: PUSH
11329: LD_INT 11
11331: PUSH
11332: LD_INT 12
11334: PUSH
11335: LD_INT 13
11337: PUSH
11338: LD_INT 14
11340: PUSH
11341: LD_INT 15
11343: PUSH
11344: LD_INT 16
11346: PUSH
11347: LD_INT 17
11349: PUSH
11350: LD_INT 18
11352: PUSH
11353: LD_INT 19
11355: PUSH
11356: LD_INT 20
11358: PUSH
11359: LD_INT 21
11361: PUSH
11362: LD_INT 22
11364: PUSH
11365: LD_INT 23
11367: PUSH
11368: LD_INT 24
11370: PUSH
11371: LD_INT 25
11373: PUSH
11374: LD_INT 26
11376: PUSH
11377: LD_INT 27
11379: PUSH
11380: LD_INT 28
11382: PUSH
11383: LD_INT 29
11385: PUSH
11386: LD_INT 30
11388: PUSH
11389: LD_INT 31
11391: PUSH
11392: LD_INT 32
11394: PUSH
11395: LD_INT 33
11397: PUSH
11398: LD_INT 34
11400: PUSH
11401: LD_INT 36
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: PUSH
11441: LD_INT 101
11443: PUSH
11444: LD_INT 102
11446: PUSH
11447: LD_INT 103
11449: PUSH
11450: LD_INT 104
11452: PUSH
11453: LD_INT 105
11455: PUSH
11456: LD_INT 106
11458: PUSH
11459: LD_INT 107
11461: PUSH
11462: LD_INT 108
11464: PUSH
11465: LD_INT 109
11467: PUSH
11468: LD_INT 110
11470: PUSH
11471: LD_INT 111
11473: PUSH
11474: LD_INT 112
11476: PUSH
11477: LD_INT 113
11479: PUSH
11480: LD_INT 114
11482: PUSH
11483: LD_INT 116
11485: PUSH
11486: LD_INT 117
11488: PUSH
11489: LD_INT 118
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: ST_TO_ADDR
11515: GO 12290
11517: LD_INT 16
11519: DOUBLE
11520: EQUAL
11521: IFTRUE 11525
11523: GO 11661
11525: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11526: LD_ADDR_VAR 0 2
11530: PUSH
11531: LD_INT 2
11533: PUSH
11534: LD_INT 4
11536: PUSH
11537: LD_INT 5
11539: PUSH
11540: LD_INT 7
11542: PUSH
11543: LD_INT 11
11545: PUSH
11546: LD_INT 12
11548: PUSH
11549: LD_INT 15
11551: PUSH
11552: LD_INT 16
11554: PUSH
11555: LD_INT 20
11557: PUSH
11558: LD_INT 21
11560: PUSH
11561: LD_INT 22
11563: PUSH
11564: LD_INT 23
11566: PUSH
11567: LD_INT 25
11569: PUSH
11570: LD_INT 26
11572: PUSH
11573: LD_INT 30
11575: PUSH
11576: LD_INT 31
11578: PUSH
11579: LD_INT 32
11581: PUSH
11582: LD_INT 33
11584: PUSH
11585: LD_INT 34
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 101
11611: PUSH
11612: LD_INT 102
11614: PUSH
11615: LD_INT 103
11617: PUSH
11618: LD_INT 106
11620: PUSH
11621: LD_INT 108
11623: PUSH
11624: LD_INT 112
11626: PUSH
11627: LD_INT 113
11629: PUSH
11630: LD_INT 114
11632: PUSH
11633: LD_INT 116
11635: PUSH
11636: LD_INT 117
11638: PUSH
11639: LD_INT 118
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: ST_TO_ADDR
11659: GO 12290
11661: LD_INT 17
11663: DOUBLE
11664: EQUAL
11665: IFTRUE 11669
11667: GO 11893
11669: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11670: LD_ADDR_VAR 0 2
11674: PUSH
11675: LD_INT 1
11677: PUSH
11678: LD_INT 2
11680: PUSH
11681: LD_INT 3
11683: PUSH
11684: LD_INT 4
11686: PUSH
11687: LD_INT 5
11689: PUSH
11690: LD_INT 6
11692: PUSH
11693: LD_INT 7
11695: PUSH
11696: LD_INT 8
11698: PUSH
11699: LD_INT 9
11701: PUSH
11702: LD_INT 10
11704: PUSH
11705: LD_INT 11
11707: PUSH
11708: LD_INT 12
11710: PUSH
11711: LD_INT 13
11713: PUSH
11714: LD_INT 14
11716: PUSH
11717: LD_INT 15
11719: PUSH
11720: LD_INT 16
11722: PUSH
11723: LD_INT 17
11725: PUSH
11726: LD_INT 18
11728: PUSH
11729: LD_INT 19
11731: PUSH
11732: LD_INT 20
11734: PUSH
11735: LD_INT 21
11737: PUSH
11738: LD_INT 22
11740: PUSH
11741: LD_INT 23
11743: PUSH
11744: LD_INT 24
11746: PUSH
11747: LD_INT 25
11749: PUSH
11750: LD_INT 26
11752: PUSH
11753: LD_INT 27
11755: PUSH
11756: LD_INT 28
11758: PUSH
11759: LD_INT 29
11761: PUSH
11762: LD_INT 30
11764: PUSH
11765: LD_INT 31
11767: PUSH
11768: LD_INT 32
11770: PUSH
11771: LD_INT 33
11773: PUSH
11774: LD_INT 34
11776: PUSH
11777: LD_INT 36
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 101
11819: PUSH
11820: LD_INT 102
11822: PUSH
11823: LD_INT 103
11825: PUSH
11826: LD_INT 104
11828: PUSH
11829: LD_INT 105
11831: PUSH
11832: LD_INT 106
11834: PUSH
11835: LD_INT 107
11837: PUSH
11838: LD_INT 108
11840: PUSH
11841: LD_INT 109
11843: PUSH
11844: LD_INT 110
11846: PUSH
11847: LD_INT 111
11849: PUSH
11850: LD_INT 112
11852: PUSH
11853: LD_INT 113
11855: PUSH
11856: LD_INT 114
11858: PUSH
11859: LD_INT 116
11861: PUSH
11862: LD_INT 117
11864: PUSH
11865: LD_INT 118
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: ST_TO_ADDR
11891: GO 12290
11893: LD_INT 18
11895: DOUBLE
11896: EQUAL
11897: IFTRUE 11901
11899: GO 12049
11901: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11902: LD_ADDR_VAR 0 2
11906: PUSH
11907: LD_INT 2
11909: PUSH
11910: LD_INT 4
11912: PUSH
11913: LD_INT 5
11915: PUSH
11916: LD_INT 7
11918: PUSH
11919: LD_INT 11
11921: PUSH
11922: LD_INT 12
11924: PUSH
11925: LD_INT 15
11927: PUSH
11928: LD_INT 16
11930: PUSH
11931: LD_INT 20
11933: PUSH
11934: LD_INT 21
11936: PUSH
11937: LD_INT 22
11939: PUSH
11940: LD_INT 23
11942: PUSH
11943: LD_INT 25
11945: PUSH
11946: LD_INT 26
11948: PUSH
11949: LD_INT 30
11951: PUSH
11952: LD_INT 31
11954: PUSH
11955: LD_INT 32
11957: PUSH
11958: LD_INT 33
11960: PUSH
11961: LD_INT 34
11963: PUSH
11964: LD_INT 35
11966: PUSH
11967: LD_INT 36
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: PUSH
11993: LD_INT 101
11995: PUSH
11996: LD_INT 102
11998: PUSH
11999: LD_INT 103
12001: PUSH
12002: LD_INT 106
12004: PUSH
12005: LD_INT 108
12007: PUSH
12008: LD_INT 112
12010: PUSH
12011: LD_INT 113
12013: PUSH
12014: LD_INT 114
12016: PUSH
12017: LD_INT 115
12019: PUSH
12020: LD_INT 116
12022: PUSH
12023: LD_INT 117
12025: PUSH
12026: LD_INT 118
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: ST_TO_ADDR
12047: GO 12290
12049: LD_INT 19
12051: DOUBLE
12052: EQUAL
12053: IFTRUE 12057
12055: GO 12289
12057: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12058: LD_ADDR_VAR 0 2
12062: PUSH
12063: LD_INT 1
12065: PUSH
12066: LD_INT 2
12068: PUSH
12069: LD_INT 3
12071: PUSH
12072: LD_INT 4
12074: PUSH
12075: LD_INT 5
12077: PUSH
12078: LD_INT 6
12080: PUSH
12081: LD_INT 7
12083: PUSH
12084: LD_INT 8
12086: PUSH
12087: LD_INT 9
12089: PUSH
12090: LD_INT 10
12092: PUSH
12093: LD_INT 11
12095: PUSH
12096: LD_INT 12
12098: PUSH
12099: LD_INT 13
12101: PUSH
12102: LD_INT 14
12104: PUSH
12105: LD_INT 15
12107: PUSH
12108: LD_INT 16
12110: PUSH
12111: LD_INT 17
12113: PUSH
12114: LD_INT 18
12116: PUSH
12117: LD_INT 19
12119: PUSH
12120: LD_INT 20
12122: PUSH
12123: LD_INT 21
12125: PUSH
12126: LD_INT 22
12128: PUSH
12129: LD_INT 23
12131: PUSH
12132: LD_INT 24
12134: PUSH
12135: LD_INT 25
12137: PUSH
12138: LD_INT 26
12140: PUSH
12141: LD_INT 27
12143: PUSH
12144: LD_INT 28
12146: PUSH
12147: LD_INT 29
12149: PUSH
12150: LD_INT 30
12152: PUSH
12153: LD_INT 31
12155: PUSH
12156: LD_INT 32
12158: PUSH
12159: LD_INT 33
12161: PUSH
12162: LD_INT 34
12164: PUSH
12165: LD_INT 35
12167: PUSH
12168: LD_INT 36
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: PUSH
12209: LD_INT 101
12211: PUSH
12212: LD_INT 102
12214: PUSH
12215: LD_INT 103
12217: PUSH
12218: LD_INT 104
12220: PUSH
12221: LD_INT 105
12223: PUSH
12224: LD_INT 106
12226: PUSH
12227: LD_INT 107
12229: PUSH
12230: LD_INT 108
12232: PUSH
12233: LD_INT 109
12235: PUSH
12236: LD_INT 110
12238: PUSH
12239: LD_INT 111
12241: PUSH
12242: LD_INT 112
12244: PUSH
12245: LD_INT 113
12247: PUSH
12248: LD_INT 114
12250: PUSH
12251: LD_INT 115
12253: PUSH
12254: LD_INT 116
12256: PUSH
12257: LD_INT 117
12259: PUSH
12260: LD_INT 118
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: ST_TO_ADDR
12287: GO 12290
12289: POP
// end else
12290: GO 12521
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12292: LD_ADDR_VAR 0 2
12296: PUSH
12297: LD_INT 1
12299: PUSH
12300: LD_INT 2
12302: PUSH
12303: LD_INT 3
12305: PUSH
12306: LD_INT 4
12308: PUSH
12309: LD_INT 5
12311: PUSH
12312: LD_INT 6
12314: PUSH
12315: LD_INT 7
12317: PUSH
12318: LD_INT 8
12320: PUSH
12321: LD_INT 9
12323: PUSH
12324: LD_INT 10
12326: PUSH
12327: LD_INT 11
12329: PUSH
12330: LD_INT 12
12332: PUSH
12333: LD_INT 13
12335: PUSH
12336: LD_INT 14
12338: PUSH
12339: LD_INT 15
12341: PUSH
12342: LD_INT 16
12344: PUSH
12345: LD_INT 17
12347: PUSH
12348: LD_INT 18
12350: PUSH
12351: LD_INT 19
12353: PUSH
12354: LD_INT 20
12356: PUSH
12357: LD_INT 21
12359: PUSH
12360: LD_INT 22
12362: PUSH
12363: LD_INT 23
12365: PUSH
12366: LD_INT 24
12368: PUSH
12369: LD_INT 25
12371: PUSH
12372: LD_INT 26
12374: PUSH
12375: LD_INT 27
12377: PUSH
12378: LD_INT 28
12380: PUSH
12381: LD_INT 29
12383: PUSH
12384: LD_INT 30
12386: PUSH
12387: LD_INT 31
12389: PUSH
12390: LD_INT 32
12392: PUSH
12393: LD_INT 33
12395: PUSH
12396: LD_INT 34
12398: PUSH
12399: LD_INT 35
12401: PUSH
12402: LD_INT 36
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: PUSH
12443: LD_INT 101
12445: PUSH
12446: LD_INT 102
12448: PUSH
12449: LD_INT 103
12451: PUSH
12452: LD_INT 104
12454: PUSH
12455: LD_INT 105
12457: PUSH
12458: LD_INT 106
12460: PUSH
12461: LD_INT 107
12463: PUSH
12464: LD_INT 108
12466: PUSH
12467: LD_INT 109
12469: PUSH
12470: LD_INT 110
12472: PUSH
12473: LD_INT 111
12475: PUSH
12476: LD_INT 112
12478: PUSH
12479: LD_INT 113
12481: PUSH
12482: LD_INT 114
12484: PUSH
12485: LD_INT 115
12487: PUSH
12488: LD_INT 116
12490: PUSH
12491: LD_INT 117
12493: PUSH
12494: LD_INT 118
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: ST_TO_ADDR
// if result then
12521: LD_VAR 0 2
12525: IFFALSE 13311
// begin normal :=  ;
12527: LD_ADDR_VAR 0 5
12531: PUSH
12532: LD_STRING 
12534: ST_TO_ADDR
// hardcore :=  ;
12535: LD_ADDR_VAR 0 6
12539: PUSH
12540: LD_STRING 
12542: ST_TO_ADDR
// active :=  ;
12543: LD_ADDR_VAR 0 7
12547: PUSH
12548: LD_STRING 
12550: ST_TO_ADDR
// for i = 1 to normalCounter do
12551: LD_ADDR_VAR 0 8
12555: PUSH
12556: DOUBLE
12557: LD_INT 1
12559: DEC
12560: ST_TO_ADDR
12561: LD_EXP 45
12565: PUSH
12566: FOR_TO
12567: IFFALSE 12668
// begin tmp := 0 ;
12569: LD_ADDR_VAR 0 3
12573: PUSH
12574: LD_STRING 0
12576: ST_TO_ADDR
// if result [ 1 ] then
12577: LD_VAR 0 2
12581: PUSH
12582: LD_INT 1
12584: ARRAY
12585: IFFALSE 12650
// if result [ 1 ] [ 1 ] = i then
12587: LD_VAR 0 2
12591: PUSH
12592: LD_INT 1
12594: ARRAY
12595: PUSH
12596: LD_INT 1
12598: ARRAY
12599: PUSH
12600: LD_VAR 0 8
12604: EQUAL
12605: IFFALSE 12650
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12607: LD_ADDR_VAR 0 2
12611: PUSH
12612: LD_VAR 0 2
12616: PPUSH
12617: LD_INT 1
12619: PPUSH
12620: LD_VAR 0 2
12624: PUSH
12625: LD_INT 1
12627: ARRAY
12628: PPUSH
12629: LD_INT 1
12631: PPUSH
12632: CALL_OW 3
12636: PPUSH
12637: CALL_OW 1
12641: ST_TO_ADDR
// tmp := 1 ;
12642: LD_ADDR_VAR 0 3
12646: PUSH
12647: LD_STRING 1
12649: ST_TO_ADDR
// end ; normal := normal & tmp ;
12650: LD_ADDR_VAR 0 5
12654: PUSH
12655: LD_VAR 0 5
12659: PUSH
12660: LD_VAR 0 3
12664: STR
12665: ST_TO_ADDR
// end ;
12666: GO 12566
12668: POP
12669: POP
// for i = 1 to hardcoreCounter do
12670: LD_ADDR_VAR 0 8
12674: PUSH
12675: DOUBLE
12676: LD_INT 1
12678: DEC
12679: ST_TO_ADDR
12680: LD_EXP 46
12684: PUSH
12685: FOR_TO
12686: IFFALSE 12791
// begin tmp := 0 ;
12688: LD_ADDR_VAR 0 3
12692: PUSH
12693: LD_STRING 0
12695: ST_TO_ADDR
// if result [ 2 ] then
12696: LD_VAR 0 2
12700: PUSH
12701: LD_INT 2
12703: ARRAY
12704: IFFALSE 12773
// if result [ 2 ] [ 1 ] = 100 + i then
12706: LD_VAR 0 2
12710: PUSH
12711: LD_INT 2
12713: ARRAY
12714: PUSH
12715: LD_INT 1
12717: ARRAY
12718: PUSH
12719: LD_INT 100
12721: PUSH
12722: LD_VAR 0 8
12726: PLUS
12727: EQUAL
12728: IFFALSE 12773
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12730: LD_ADDR_VAR 0 2
12734: PUSH
12735: LD_VAR 0 2
12739: PPUSH
12740: LD_INT 2
12742: PPUSH
12743: LD_VAR 0 2
12747: PUSH
12748: LD_INT 2
12750: ARRAY
12751: PPUSH
12752: LD_INT 1
12754: PPUSH
12755: CALL_OW 3
12759: PPUSH
12760: CALL_OW 1
12764: ST_TO_ADDR
// tmp := 1 ;
12765: LD_ADDR_VAR 0 3
12769: PUSH
12770: LD_STRING 1
12772: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12773: LD_ADDR_VAR 0 6
12777: PUSH
12778: LD_VAR 0 6
12782: PUSH
12783: LD_VAR 0 3
12787: STR
12788: ST_TO_ADDR
// end ;
12789: GO 12685
12791: POP
12792: POP
// if isGameLoad then
12793: LD_VAR 0 1
12797: IFFALSE 13272
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12799: LD_ADDR_VAR 0 4
12803: PUSH
12804: LD_EXP 49
12808: PUSH
12809: LD_EXP 48
12813: PUSH
12814: LD_EXP 50
12818: PUSH
12819: LD_EXP 47
12823: PUSH
12824: LD_EXP 51
12828: PUSH
12829: LD_EXP 52
12833: PUSH
12834: LD_EXP 53
12838: PUSH
12839: LD_EXP 54
12843: PUSH
12844: LD_EXP 55
12848: PUSH
12849: LD_EXP 56
12853: PUSH
12854: LD_EXP 57
12858: PUSH
12859: LD_EXP 58
12863: PUSH
12864: LD_EXP 59
12868: PUSH
12869: LD_EXP 60
12873: PUSH
12874: LD_EXP 68
12878: PUSH
12879: LD_EXP 69
12883: PUSH
12884: LD_EXP 70
12888: PUSH
12889: LD_EXP 71
12893: PUSH
12894: LD_EXP 73
12898: PUSH
12899: LD_EXP 74
12903: PUSH
12904: LD_EXP 75
12908: PUSH
12909: LD_EXP 78
12913: PUSH
12914: LD_EXP 80
12918: PUSH
12919: LD_EXP 81
12923: PUSH
12924: LD_EXP 82
12928: PUSH
12929: LD_EXP 84
12933: PUSH
12934: LD_EXP 85
12938: PUSH
12939: LD_EXP 88
12943: PUSH
12944: LD_EXP 89
12948: PUSH
12949: LD_EXP 90
12953: PUSH
12954: LD_EXP 91
12958: PUSH
12959: LD_EXP 92
12963: PUSH
12964: LD_EXP 93
12968: PUSH
12969: LD_EXP 94
12973: PUSH
12974: LD_EXP 95
12978: PUSH
12979: LD_EXP 96
12983: PUSH
12984: LD_EXP 61
12988: PUSH
12989: LD_EXP 62
12993: PUSH
12994: LD_EXP 65
12998: PUSH
12999: LD_EXP 66
13003: PUSH
13004: LD_EXP 67
13008: PUSH
13009: LD_EXP 63
13013: PUSH
13014: LD_EXP 64
13018: PUSH
13019: LD_EXP 72
13023: PUSH
13024: LD_EXP 76
13028: PUSH
13029: LD_EXP 77
13033: PUSH
13034: LD_EXP 79
13038: PUSH
13039: LD_EXP 83
13043: PUSH
13044: LD_EXP 86
13048: PUSH
13049: LD_EXP 87
13053: PUSH
13054: LD_EXP 97
13058: PUSH
13059: LD_EXP 98
13063: PUSH
13064: LD_EXP 99
13068: PUSH
13069: LD_EXP 100
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: ST_TO_ADDR
// tmp :=  ;
13130: LD_ADDR_VAR 0 3
13134: PUSH
13135: LD_STRING 
13137: ST_TO_ADDR
// for i = 1 to normalCounter do
13138: LD_ADDR_VAR 0 8
13142: PUSH
13143: DOUBLE
13144: LD_INT 1
13146: DEC
13147: ST_TO_ADDR
13148: LD_EXP 45
13152: PUSH
13153: FOR_TO
13154: IFFALSE 13190
// begin if flags [ i ] then
13156: LD_VAR 0 4
13160: PUSH
13161: LD_VAR 0 8
13165: ARRAY
13166: IFFALSE 13188
// tmp := tmp & i & ; ;
13168: LD_ADDR_VAR 0 3
13172: PUSH
13173: LD_VAR 0 3
13177: PUSH
13178: LD_VAR 0 8
13182: STR
13183: PUSH
13184: LD_STRING ;
13186: STR
13187: ST_TO_ADDR
// end ;
13188: GO 13153
13190: POP
13191: POP
// for i = 1 to hardcoreCounter do
13192: LD_ADDR_VAR 0 8
13196: PUSH
13197: DOUBLE
13198: LD_INT 1
13200: DEC
13201: ST_TO_ADDR
13202: LD_EXP 46
13206: PUSH
13207: FOR_TO
13208: IFFALSE 13254
// begin if flags [ normalCounter + i ] then
13210: LD_VAR 0 4
13214: PUSH
13215: LD_EXP 45
13219: PUSH
13220: LD_VAR 0 8
13224: PLUS
13225: ARRAY
13226: IFFALSE 13252
// tmp := tmp & ( 100 + i ) & ; ;
13228: LD_ADDR_VAR 0 3
13232: PUSH
13233: LD_VAR 0 3
13237: PUSH
13238: LD_INT 100
13240: PUSH
13241: LD_VAR 0 8
13245: PLUS
13246: STR
13247: PUSH
13248: LD_STRING ;
13250: STR
13251: ST_TO_ADDR
// end ;
13252: GO 13207
13254: POP
13255: POP
// if tmp then
13256: LD_VAR 0 3
13260: IFFALSE 13272
// active := tmp ;
13262: LD_ADDR_VAR 0 7
13266: PUSH
13267: LD_VAR 0 3
13271: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13272: LD_STRING getStreamItemsFromMission("
13274: PUSH
13275: LD_VAR 0 5
13279: STR
13280: PUSH
13281: LD_STRING ","
13283: STR
13284: PUSH
13285: LD_VAR 0 6
13289: STR
13290: PUSH
13291: LD_STRING ","
13293: STR
13294: PUSH
13295: LD_VAR 0 7
13299: STR
13300: PUSH
13301: LD_STRING ")
13303: STR
13304: PPUSH
13305: CALL_OW 559
// end else
13309: GO 13318
// ToLua ( getStreamItemsFromMission("","","") ) ;
13311: LD_STRING getStreamItemsFromMission("","","")
13313: PPUSH
13314: CALL_OW 559
// end ;
13318: LD_VAR 0 2
13322: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13323: LD_EXP 44
13327: PUSH
13328: LD_EXP 49
13332: AND
13333: IFFALSE 13457
13335: GO 13337
13337: DISABLE
13338: LD_INT 0
13340: PPUSH
13341: PPUSH
// begin enable ;
13342: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13343: LD_ADDR_VAR 0 2
13347: PUSH
13348: LD_INT 22
13350: PUSH
13351: LD_OWVAR 2
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: PUSH
13360: LD_INT 2
13362: PUSH
13363: LD_INT 34
13365: PUSH
13366: LD_INT 7
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PUSH
13373: LD_INT 34
13375: PUSH
13376: LD_INT 45
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 34
13385: PUSH
13386: LD_INT 28
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: PUSH
13393: LD_INT 34
13395: PUSH
13396: LD_INT 47
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PPUSH
13414: CALL_OW 69
13418: ST_TO_ADDR
// if not tmp then
13419: LD_VAR 0 2
13423: NOT
13424: IFFALSE 13428
// exit ;
13426: GO 13457
// for i in tmp do
13428: LD_ADDR_VAR 0 1
13432: PUSH
13433: LD_VAR 0 2
13437: PUSH
13438: FOR_IN
13439: IFFALSE 13455
// begin SetLives ( i , 0 ) ;
13441: LD_VAR 0 1
13445: PPUSH
13446: LD_INT 0
13448: PPUSH
13449: CALL_OW 234
// end ;
13453: GO 13438
13455: POP
13456: POP
// end ;
13457: PPOPN 2
13459: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13460: LD_EXP 44
13464: PUSH
13465: LD_EXP 50
13469: AND
13470: IFFALSE 13554
13472: GO 13474
13474: DISABLE
13475: LD_INT 0
13477: PPUSH
13478: PPUSH
// begin enable ;
13479: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13480: LD_ADDR_VAR 0 2
13484: PUSH
13485: LD_INT 22
13487: PUSH
13488: LD_OWVAR 2
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 32
13499: PUSH
13500: LD_INT 3
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PPUSH
13511: CALL_OW 69
13515: ST_TO_ADDR
// if not tmp then
13516: LD_VAR 0 2
13520: NOT
13521: IFFALSE 13525
// exit ;
13523: GO 13554
// for i in tmp do
13525: LD_ADDR_VAR 0 1
13529: PUSH
13530: LD_VAR 0 2
13534: PUSH
13535: FOR_IN
13536: IFFALSE 13552
// begin SetLives ( i , 0 ) ;
13538: LD_VAR 0 1
13542: PPUSH
13543: LD_INT 0
13545: PPUSH
13546: CALL_OW 234
// end ;
13550: GO 13535
13552: POP
13553: POP
// end ;
13554: PPOPN 2
13556: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13557: LD_EXP 44
13561: PUSH
13562: LD_EXP 47
13566: AND
13567: IFFALSE 13660
13569: GO 13571
13571: DISABLE
13572: LD_INT 0
13574: PPUSH
// begin enable ;
13575: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13576: LD_ADDR_VAR 0 1
13580: PUSH
13581: LD_INT 22
13583: PUSH
13584: LD_OWVAR 2
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: LD_INT 2
13595: PUSH
13596: LD_INT 25
13598: PUSH
13599: LD_INT 5
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 25
13608: PUSH
13609: LD_INT 9
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 25
13618: PUSH
13619: LD_INT 8
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PPUSH
13636: CALL_OW 69
13640: PUSH
13641: FOR_IN
13642: IFFALSE 13658
// begin SetClass ( i , 1 ) ;
13644: LD_VAR 0 1
13648: PPUSH
13649: LD_INT 1
13651: PPUSH
13652: CALL_OW 336
// end ;
13656: GO 13641
13658: POP
13659: POP
// end ;
13660: PPOPN 1
13662: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13663: LD_EXP 44
13667: PUSH
13668: LD_EXP 48
13672: AND
13673: PUSH
13674: LD_OWVAR 65
13678: PUSH
13679: LD_INT 7
13681: LESS
13682: AND
13683: IFFALSE 13697
13685: GO 13687
13687: DISABLE
// begin enable ;
13688: ENABLE
// game_speed := 7 ;
13689: LD_ADDR_OWVAR 65
13693: PUSH
13694: LD_INT 7
13696: ST_TO_ADDR
// end ;
13697: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13698: LD_EXP 44
13702: PUSH
13703: LD_EXP 51
13707: AND
13708: IFFALSE 13910
13710: GO 13712
13712: DISABLE
13713: LD_INT 0
13715: PPUSH
13716: PPUSH
13717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13718: LD_ADDR_VAR 0 3
13722: PUSH
13723: LD_INT 81
13725: PUSH
13726: LD_OWVAR 2
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 21
13737: PUSH
13738: LD_INT 1
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PPUSH
13749: CALL_OW 69
13753: ST_TO_ADDR
// if not tmp then
13754: LD_VAR 0 3
13758: NOT
13759: IFFALSE 13763
// exit ;
13761: GO 13910
// if tmp > 5 then
13763: LD_VAR 0 3
13767: PUSH
13768: LD_INT 5
13770: GREATER
13771: IFFALSE 13783
// k := 5 else
13773: LD_ADDR_VAR 0 2
13777: PUSH
13778: LD_INT 5
13780: ST_TO_ADDR
13781: GO 13793
// k := tmp ;
13783: LD_ADDR_VAR 0 2
13787: PUSH
13788: LD_VAR 0 3
13792: ST_TO_ADDR
// for i := 1 to k do
13793: LD_ADDR_VAR 0 1
13797: PUSH
13798: DOUBLE
13799: LD_INT 1
13801: DEC
13802: ST_TO_ADDR
13803: LD_VAR 0 2
13807: PUSH
13808: FOR_TO
13809: IFFALSE 13908
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13811: LD_VAR 0 3
13815: PUSH
13816: LD_VAR 0 1
13820: ARRAY
13821: PPUSH
13822: LD_VAR 0 1
13826: PUSH
13827: LD_INT 4
13829: MOD
13830: PUSH
13831: LD_INT 1
13833: PLUS
13834: PPUSH
13835: CALL_OW 259
13839: PUSH
13840: LD_INT 10
13842: LESS
13843: IFFALSE 13906
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13845: LD_VAR 0 3
13849: PUSH
13850: LD_VAR 0 1
13854: ARRAY
13855: PPUSH
13856: LD_VAR 0 1
13860: PUSH
13861: LD_INT 4
13863: MOD
13864: PUSH
13865: LD_INT 1
13867: PLUS
13868: PPUSH
13869: LD_VAR 0 3
13873: PUSH
13874: LD_VAR 0 1
13878: ARRAY
13879: PPUSH
13880: LD_VAR 0 1
13884: PUSH
13885: LD_INT 4
13887: MOD
13888: PUSH
13889: LD_INT 1
13891: PLUS
13892: PPUSH
13893: CALL_OW 259
13897: PUSH
13898: LD_INT 1
13900: PLUS
13901: PPUSH
13902: CALL_OW 237
13906: GO 13808
13908: POP
13909: POP
// end ;
13910: PPOPN 3
13912: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13913: LD_EXP 44
13917: PUSH
13918: LD_EXP 52
13922: AND
13923: IFFALSE 13943
13925: GO 13927
13927: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13928: LD_INT 4
13930: PPUSH
13931: LD_OWVAR 2
13935: PPUSH
13936: LD_INT 0
13938: PPUSH
13939: CALL_OW 324
13943: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13944: LD_EXP 44
13948: PUSH
13949: LD_EXP 81
13953: AND
13954: IFFALSE 13974
13956: GO 13958
13958: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13959: LD_INT 19
13961: PPUSH
13962: LD_OWVAR 2
13966: PPUSH
13967: LD_INT 0
13969: PPUSH
13970: CALL_OW 324
13974: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13975: LD_EXP 44
13979: PUSH
13980: LD_EXP 53
13984: AND
13985: IFFALSE 14087
13987: GO 13989
13989: DISABLE
13990: LD_INT 0
13992: PPUSH
13993: PPUSH
// begin enable ;
13994: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13995: LD_ADDR_VAR 0 2
13999: PUSH
14000: LD_INT 22
14002: PUSH
14003: LD_OWVAR 2
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 2
14014: PUSH
14015: LD_INT 34
14017: PUSH
14018: LD_INT 11
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: LD_INT 34
14027: PUSH
14028: LD_INT 30
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PPUSH
14044: CALL_OW 69
14048: ST_TO_ADDR
// if not tmp then
14049: LD_VAR 0 2
14053: NOT
14054: IFFALSE 14058
// exit ;
14056: GO 14087
// for i in tmp do
14058: LD_ADDR_VAR 0 1
14062: PUSH
14063: LD_VAR 0 2
14067: PUSH
14068: FOR_IN
14069: IFFALSE 14085
// begin SetLives ( i , 0 ) ;
14071: LD_VAR 0 1
14075: PPUSH
14076: LD_INT 0
14078: PPUSH
14079: CALL_OW 234
// end ;
14083: GO 14068
14085: POP
14086: POP
// end ;
14087: PPOPN 2
14089: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14090: LD_EXP 44
14094: PUSH
14095: LD_EXP 54
14099: AND
14100: IFFALSE 14120
14102: GO 14104
14104: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14105: LD_INT 32
14107: PPUSH
14108: LD_OWVAR 2
14112: PPUSH
14113: LD_INT 0
14115: PPUSH
14116: CALL_OW 324
14120: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14121: LD_EXP 44
14125: PUSH
14126: LD_EXP 55
14130: AND
14131: IFFALSE 14312
14133: GO 14135
14135: DISABLE
14136: LD_INT 0
14138: PPUSH
14139: PPUSH
14140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14141: LD_ADDR_VAR 0 2
14145: PUSH
14146: LD_INT 22
14148: PUSH
14149: LD_OWVAR 2
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: LD_INT 33
14160: PUSH
14161: LD_INT 3
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PPUSH
14172: CALL_OW 69
14176: ST_TO_ADDR
// if not tmp then
14177: LD_VAR 0 2
14181: NOT
14182: IFFALSE 14186
// exit ;
14184: GO 14312
// side := 0 ;
14186: LD_ADDR_VAR 0 3
14190: PUSH
14191: LD_INT 0
14193: ST_TO_ADDR
// for i := 1 to 8 do
14194: LD_ADDR_VAR 0 1
14198: PUSH
14199: DOUBLE
14200: LD_INT 1
14202: DEC
14203: ST_TO_ADDR
14204: LD_INT 8
14206: PUSH
14207: FOR_TO
14208: IFFALSE 14256
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14210: LD_OWVAR 2
14214: PUSH
14215: LD_VAR 0 1
14219: NONEQUAL
14220: PUSH
14221: LD_OWVAR 2
14225: PPUSH
14226: LD_VAR 0 1
14230: PPUSH
14231: CALL_OW 81
14235: PUSH
14236: LD_INT 2
14238: EQUAL
14239: AND
14240: IFFALSE 14254
// begin side := i ;
14242: LD_ADDR_VAR 0 3
14246: PUSH
14247: LD_VAR 0 1
14251: ST_TO_ADDR
// break ;
14252: GO 14256
// end ;
14254: GO 14207
14256: POP
14257: POP
// if not side then
14258: LD_VAR 0 3
14262: NOT
14263: IFFALSE 14267
// exit ;
14265: GO 14312
// for i := 1 to tmp do
14267: LD_ADDR_VAR 0 1
14271: PUSH
14272: DOUBLE
14273: LD_INT 1
14275: DEC
14276: ST_TO_ADDR
14277: LD_VAR 0 2
14281: PUSH
14282: FOR_TO
14283: IFFALSE 14310
// if Prob ( 60 ) then
14285: LD_INT 60
14287: PPUSH
14288: CALL_OW 13
14292: IFFALSE 14308
// SetSide ( i , side ) ;
14294: LD_VAR 0 1
14298: PPUSH
14299: LD_VAR 0 3
14303: PPUSH
14304: CALL_OW 235
14308: GO 14282
14310: POP
14311: POP
// end ;
14312: PPOPN 3
14314: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14315: LD_EXP 44
14319: PUSH
14320: LD_EXP 57
14324: AND
14325: IFFALSE 14444
14327: GO 14329
14329: DISABLE
14330: LD_INT 0
14332: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14333: LD_ADDR_VAR 0 1
14337: PUSH
14338: LD_INT 22
14340: PUSH
14341: LD_OWVAR 2
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 21
14352: PUSH
14353: LD_INT 1
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 3
14362: PUSH
14363: LD_INT 23
14365: PUSH
14366: LD_INT 0
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: PPUSH
14382: CALL_OW 69
14386: PUSH
14387: FOR_IN
14388: IFFALSE 14442
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 257
14399: PUSH
14400: LD_INT 1
14402: PUSH
14403: LD_INT 2
14405: PUSH
14406: LD_INT 3
14408: PUSH
14409: LD_INT 4
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: IN
14418: IFFALSE 14440
// SetClass ( un , rand ( 1 , 4 ) ) ;
14420: LD_VAR 0 1
14424: PPUSH
14425: LD_INT 1
14427: PPUSH
14428: LD_INT 4
14430: PPUSH
14431: CALL_OW 12
14435: PPUSH
14436: CALL_OW 336
14440: GO 14387
14442: POP
14443: POP
// end ;
14444: PPOPN 1
14446: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14447: LD_EXP 44
14451: PUSH
14452: LD_EXP 56
14456: AND
14457: IFFALSE 14536
14459: GO 14461
14461: DISABLE
14462: LD_INT 0
14464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14465: LD_ADDR_VAR 0 1
14469: PUSH
14470: LD_INT 22
14472: PUSH
14473: LD_OWVAR 2
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PUSH
14482: LD_INT 21
14484: PUSH
14485: LD_INT 3
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PPUSH
14496: CALL_OW 69
14500: ST_TO_ADDR
// if not tmp then
14501: LD_VAR 0 1
14505: NOT
14506: IFFALSE 14510
// exit ;
14508: GO 14536
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14510: LD_VAR 0 1
14514: PUSH
14515: LD_INT 1
14517: PPUSH
14518: LD_VAR 0 1
14522: PPUSH
14523: CALL_OW 12
14527: ARRAY
14528: PPUSH
14529: LD_INT 100
14531: PPUSH
14532: CALL_OW 234
// end ;
14536: PPOPN 1
14538: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14539: LD_EXP 44
14543: PUSH
14544: LD_EXP 58
14548: AND
14549: IFFALSE 14647
14551: GO 14553
14553: DISABLE
14554: LD_INT 0
14556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14557: LD_ADDR_VAR 0 1
14561: PUSH
14562: LD_INT 22
14564: PUSH
14565: LD_OWVAR 2
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PUSH
14574: LD_INT 21
14576: PUSH
14577: LD_INT 1
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PPUSH
14588: CALL_OW 69
14592: ST_TO_ADDR
// if not tmp then
14593: LD_VAR 0 1
14597: NOT
14598: IFFALSE 14602
// exit ;
14600: GO 14647
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14602: LD_VAR 0 1
14606: PUSH
14607: LD_INT 1
14609: PPUSH
14610: LD_VAR 0 1
14614: PPUSH
14615: CALL_OW 12
14619: ARRAY
14620: PPUSH
14621: LD_INT 1
14623: PPUSH
14624: LD_INT 4
14626: PPUSH
14627: CALL_OW 12
14631: PPUSH
14632: LD_INT 3000
14634: PPUSH
14635: LD_INT 9000
14637: PPUSH
14638: CALL_OW 12
14642: PPUSH
14643: CALL_OW 492
// end ;
14647: PPOPN 1
14649: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14650: LD_EXP 44
14654: PUSH
14655: LD_EXP 59
14659: AND
14660: IFFALSE 14680
14662: GO 14664
14664: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14665: LD_INT 1
14667: PPUSH
14668: LD_OWVAR 2
14672: PPUSH
14673: LD_INT 0
14675: PPUSH
14676: CALL_OW 324
14680: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14681: LD_EXP 44
14685: PUSH
14686: LD_EXP 60
14690: AND
14691: IFFALSE 14774
14693: GO 14695
14695: DISABLE
14696: LD_INT 0
14698: PPUSH
14699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14700: LD_ADDR_VAR 0 2
14704: PUSH
14705: LD_INT 22
14707: PUSH
14708: LD_OWVAR 2
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: LD_INT 21
14719: PUSH
14720: LD_INT 3
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PPUSH
14731: CALL_OW 69
14735: ST_TO_ADDR
// if not tmp then
14736: LD_VAR 0 2
14740: NOT
14741: IFFALSE 14745
// exit ;
14743: GO 14774
// for i in tmp do
14745: LD_ADDR_VAR 0 1
14749: PUSH
14750: LD_VAR 0 2
14754: PUSH
14755: FOR_IN
14756: IFFALSE 14772
// SetBLevel ( i , 10 ) ;
14758: LD_VAR 0 1
14762: PPUSH
14763: LD_INT 10
14765: PPUSH
14766: CALL_OW 241
14770: GO 14755
14772: POP
14773: POP
// end ;
14774: PPOPN 2
14776: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14777: LD_EXP 44
14781: PUSH
14782: LD_EXP 61
14786: AND
14787: IFFALSE 14898
14789: GO 14791
14791: DISABLE
14792: LD_INT 0
14794: PPUSH
14795: PPUSH
14796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14797: LD_ADDR_VAR 0 3
14801: PUSH
14802: LD_INT 22
14804: PUSH
14805: LD_OWVAR 2
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: LD_INT 25
14816: PUSH
14817: LD_INT 1
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PPUSH
14828: CALL_OW 69
14832: ST_TO_ADDR
// if not tmp then
14833: LD_VAR 0 3
14837: NOT
14838: IFFALSE 14842
// exit ;
14840: GO 14898
// un := tmp [ rand ( 1 , tmp ) ] ;
14842: LD_ADDR_VAR 0 2
14846: PUSH
14847: LD_VAR 0 3
14851: PUSH
14852: LD_INT 1
14854: PPUSH
14855: LD_VAR 0 3
14859: PPUSH
14860: CALL_OW 12
14864: ARRAY
14865: ST_TO_ADDR
// if Crawls ( un ) then
14866: LD_VAR 0 2
14870: PPUSH
14871: CALL_OW 318
14875: IFFALSE 14886
// ComWalk ( un ) ;
14877: LD_VAR 0 2
14881: PPUSH
14882: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14886: LD_VAR 0 2
14890: PPUSH
14891: LD_INT 5
14893: PPUSH
14894: CALL_OW 336
// end ;
14898: PPOPN 3
14900: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14901: LD_EXP 44
14905: PUSH
14906: LD_EXP 62
14910: AND
14911: PUSH
14912: LD_OWVAR 67
14916: PUSH
14917: LD_INT 4
14919: LESS
14920: AND
14921: IFFALSE 14940
14923: GO 14925
14925: DISABLE
// begin Difficulty := Difficulty + 1 ;
14926: LD_ADDR_OWVAR 67
14930: PUSH
14931: LD_OWVAR 67
14935: PUSH
14936: LD_INT 1
14938: PLUS
14939: ST_TO_ADDR
// end ;
14940: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14941: LD_EXP 44
14945: PUSH
14946: LD_EXP 63
14950: AND
14951: IFFALSE 15054
14953: GO 14955
14955: DISABLE
14956: LD_INT 0
14958: PPUSH
// begin for i := 1 to 5 do
14959: LD_ADDR_VAR 0 1
14963: PUSH
14964: DOUBLE
14965: LD_INT 1
14967: DEC
14968: ST_TO_ADDR
14969: LD_INT 5
14971: PUSH
14972: FOR_TO
14973: IFFALSE 15052
// begin uc_nation := nation_nature ;
14975: LD_ADDR_OWVAR 21
14979: PUSH
14980: LD_INT 0
14982: ST_TO_ADDR
// uc_side := 0 ;
14983: LD_ADDR_OWVAR 20
14987: PUSH
14988: LD_INT 0
14990: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14991: LD_ADDR_OWVAR 29
14995: PUSH
14996: LD_INT 12
14998: PUSH
14999: LD_INT 12
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: ST_TO_ADDR
// hc_agressivity := 20 ;
15006: LD_ADDR_OWVAR 35
15010: PUSH
15011: LD_INT 20
15013: ST_TO_ADDR
// hc_class := class_tiger ;
15014: LD_ADDR_OWVAR 28
15018: PUSH
15019: LD_INT 14
15021: ST_TO_ADDR
// hc_gallery :=  ;
15022: LD_ADDR_OWVAR 33
15026: PUSH
15027: LD_STRING 
15029: ST_TO_ADDR
// hc_name :=  ;
15030: LD_ADDR_OWVAR 26
15034: PUSH
15035: LD_STRING 
15037: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15038: CALL_OW 44
15042: PPUSH
15043: LD_INT 0
15045: PPUSH
15046: CALL_OW 51
// end ;
15050: GO 14972
15052: POP
15053: POP
// end ;
15054: PPOPN 1
15056: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15057: LD_EXP 44
15061: PUSH
15062: LD_EXP 64
15066: AND
15067: IFFALSE 15076
15069: GO 15071
15071: DISABLE
// StreamSibBomb ;
15072: CALL 15077 0 0
15076: END
// export function StreamSibBomb ; var i , x , y ; begin
15077: LD_INT 0
15079: PPUSH
15080: PPUSH
15081: PPUSH
15082: PPUSH
// result := false ;
15083: LD_ADDR_VAR 0 1
15087: PUSH
15088: LD_INT 0
15090: ST_TO_ADDR
// for i := 1 to 16 do
15091: LD_ADDR_VAR 0 2
15095: PUSH
15096: DOUBLE
15097: LD_INT 1
15099: DEC
15100: ST_TO_ADDR
15101: LD_INT 16
15103: PUSH
15104: FOR_TO
15105: IFFALSE 15304
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15107: LD_ADDR_VAR 0 3
15111: PUSH
15112: LD_INT 10
15114: PUSH
15115: LD_INT 20
15117: PUSH
15118: LD_INT 30
15120: PUSH
15121: LD_INT 40
15123: PUSH
15124: LD_INT 50
15126: PUSH
15127: LD_INT 60
15129: PUSH
15130: LD_INT 70
15132: PUSH
15133: LD_INT 80
15135: PUSH
15136: LD_INT 90
15138: PUSH
15139: LD_INT 100
15141: PUSH
15142: LD_INT 110
15144: PUSH
15145: LD_INT 120
15147: PUSH
15148: LD_INT 130
15150: PUSH
15151: LD_INT 140
15153: PUSH
15154: LD_INT 150
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 1
15176: PPUSH
15177: LD_INT 15
15179: PPUSH
15180: CALL_OW 12
15184: ARRAY
15185: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15186: LD_ADDR_VAR 0 4
15190: PUSH
15191: LD_INT 10
15193: PUSH
15194: LD_INT 20
15196: PUSH
15197: LD_INT 30
15199: PUSH
15200: LD_INT 40
15202: PUSH
15203: LD_INT 50
15205: PUSH
15206: LD_INT 60
15208: PUSH
15209: LD_INT 70
15211: PUSH
15212: LD_INT 80
15214: PUSH
15215: LD_INT 90
15217: PUSH
15218: LD_INT 100
15220: PUSH
15221: LD_INT 110
15223: PUSH
15224: LD_INT 120
15226: PUSH
15227: LD_INT 130
15229: PUSH
15230: LD_INT 140
15232: PUSH
15233: LD_INT 150
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: PUSH
15253: LD_INT 1
15255: PPUSH
15256: LD_INT 15
15258: PPUSH
15259: CALL_OW 12
15263: ARRAY
15264: ST_TO_ADDR
// if ValidHex ( x , y ) then
15265: LD_VAR 0 3
15269: PPUSH
15270: LD_VAR 0 4
15274: PPUSH
15275: CALL_OW 488
15279: IFFALSE 15302
// begin result := [ x , y ] ;
15281: LD_ADDR_VAR 0 1
15285: PUSH
15286: LD_VAR 0 3
15290: PUSH
15291: LD_VAR 0 4
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: ST_TO_ADDR
// break ;
15300: GO 15304
// end ; end ;
15302: GO 15104
15304: POP
15305: POP
// if result then
15306: LD_VAR 0 1
15310: IFFALSE 15370
// begin ToLua ( playSibBomb() ) ;
15312: LD_STRING playSibBomb()
15314: PPUSH
15315: CALL_OW 559
// wait ( 0 0$14 ) ;
15319: LD_INT 490
15321: PPUSH
15322: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15326: LD_VAR 0 1
15330: PUSH
15331: LD_INT 1
15333: ARRAY
15334: PPUSH
15335: LD_VAR 0 1
15339: PUSH
15340: LD_INT 2
15342: ARRAY
15343: PPUSH
15344: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15348: LD_VAR 0 1
15352: PUSH
15353: LD_INT 1
15355: ARRAY
15356: PPUSH
15357: LD_VAR 0 1
15361: PUSH
15362: LD_INT 2
15364: ARRAY
15365: PPUSH
15366: CALL_OW 429
// end ; end ;
15370: LD_VAR 0 1
15374: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15375: LD_EXP 44
15379: PUSH
15380: LD_EXP 66
15384: AND
15385: IFFALSE 15397
15387: GO 15389
15389: DISABLE
// YouLost (  ) ;
15390: LD_STRING 
15392: PPUSH
15393: CALL_OW 104
15397: END
// every 0 0$1 trigger StreamModeActive and sFog do
15398: LD_EXP 44
15402: PUSH
15403: LD_EXP 65
15407: AND
15408: IFFALSE 15422
15410: GO 15412
15412: DISABLE
// FogOff ( your_side ) ;
15413: LD_OWVAR 2
15417: PPUSH
15418: CALL_OW 344
15422: END
// every 0 0$1 trigger StreamModeActive and sSun do
15423: LD_EXP 44
15427: PUSH
15428: LD_EXP 67
15432: AND
15433: IFFALSE 15461
15435: GO 15437
15437: DISABLE
// begin solar_recharge_percent := 0 ;
15438: LD_ADDR_OWVAR 79
15442: PUSH
15443: LD_INT 0
15445: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15446: LD_INT 10500
15448: PPUSH
15449: CALL_OW 67
// solar_recharge_percent := 100 ;
15453: LD_ADDR_OWVAR 79
15457: PUSH
15458: LD_INT 100
15460: ST_TO_ADDR
// end ;
15461: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15462: LD_EXP 44
15466: PUSH
15467: LD_EXP 68
15471: AND
15472: IFFALSE 15711
15474: GO 15476
15476: DISABLE
15477: LD_INT 0
15479: PPUSH
15480: PPUSH
15481: PPUSH
// begin tmp := [ ] ;
15482: LD_ADDR_VAR 0 3
15486: PUSH
15487: EMPTY
15488: ST_TO_ADDR
// for i := 1 to 6 do
15489: LD_ADDR_VAR 0 1
15493: PUSH
15494: DOUBLE
15495: LD_INT 1
15497: DEC
15498: ST_TO_ADDR
15499: LD_INT 6
15501: PUSH
15502: FOR_TO
15503: IFFALSE 15608
// begin uc_nation := nation_nature ;
15505: LD_ADDR_OWVAR 21
15509: PUSH
15510: LD_INT 0
15512: ST_TO_ADDR
// uc_side := 0 ;
15513: LD_ADDR_OWVAR 20
15517: PUSH
15518: LD_INT 0
15520: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15521: LD_ADDR_OWVAR 29
15525: PUSH
15526: LD_INT 12
15528: PUSH
15529: LD_INT 12
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: ST_TO_ADDR
// hc_agressivity := 20 ;
15536: LD_ADDR_OWVAR 35
15540: PUSH
15541: LD_INT 20
15543: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15544: LD_ADDR_OWVAR 28
15548: PUSH
15549: LD_INT 17
15551: ST_TO_ADDR
// hc_gallery :=  ;
15552: LD_ADDR_OWVAR 33
15556: PUSH
15557: LD_STRING 
15559: ST_TO_ADDR
// hc_name :=  ;
15560: LD_ADDR_OWVAR 26
15564: PUSH
15565: LD_STRING 
15567: ST_TO_ADDR
// un := CreateHuman ;
15568: LD_ADDR_VAR 0 2
15572: PUSH
15573: CALL_OW 44
15577: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15578: LD_VAR 0 2
15582: PPUSH
15583: LD_INT 1
15585: PPUSH
15586: CALL_OW 51
// tmp := tmp ^ un ;
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: LD_VAR 0 3
15599: PUSH
15600: LD_VAR 0 2
15604: ADD
15605: ST_TO_ADDR
// end ;
15606: GO 15502
15608: POP
15609: POP
// repeat wait ( 0 0$1 ) ;
15610: LD_INT 35
15612: PPUSH
15613: CALL_OW 67
// for un in tmp do
15617: LD_ADDR_VAR 0 2
15621: PUSH
15622: LD_VAR 0 3
15626: PUSH
15627: FOR_IN
15628: IFFALSE 15702
// begin if IsDead ( un ) then
15630: LD_VAR 0 2
15634: PPUSH
15635: CALL_OW 301
15639: IFFALSE 15659
// begin tmp := tmp diff un ;
15641: LD_ADDR_VAR 0 3
15645: PUSH
15646: LD_VAR 0 3
15650: PUSH
15651: LD_VAR 0 2
15655: DIFF
15656: ST_TO_ADDR
// continue ;
15657: GO 15627
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15659: LD_VAR 0 2
15663: PPUSH
15664: LD_INT 3
15666: PUSH
15667: LD_INT 22
15669: PUSH
15670: LD_INT 0
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PPUSH
15681: CALL_OW 69
15685: PPUSH
15686: LD_VAR 0 2
15690: PPUSH
15691: CALL_OW 74
15695: PPUSH
15696: CALL_OW 115
// end ;
15700: GO 15627
15702: POP
15703: POP
// until not tmp ;
15704: LD_VAR 0 3
15708: NOT
15709: IFFALSE 15610
// end ;
15711: PPOPN 3
15713: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15714: LD_EXP 44
15718: PUSH
15719: LD_EXP 69
15723: AND
15724: IFFALSE 15778
15726: GO 15728
15728: DISABLE
// begin ToLua ( displayTroll(); ) ;
15729: LD_STRING displayTroll();
15731: PPUSH
15732: CALL_OW 559
// wait ( 3 3$00 ) ;
15736: LD_INT 6300
15738: PPUSH
15739: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15743: LD_STRING hideTroll();
15745: PPUSH
15746: CALL_OW 559
// wait ( 1 1$00 ) ;
15750: LD_INT 2100
15752: PPUSH
15753: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15757: LD_STRING displayTroll();
15759: PPUSH
15760: CALL_OW 559
// wait ( 1 1$00 ) ;
15764: LD_INT 2100
15766: PPUSH
15767: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15771: LD_STRING hideTroll();
15773: PPUSH
15774: CALL_OW 559
// end ;
15778: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15779: LD_EXP 44
15783: PUSH
15784: LD_EXP 70
15788: AND
15789: IFFALSE 15852
15791: GO 15793
15793: DISABLE
15794: LD_INT 0
15796: PPUSH
// begin p := 0 ;
15797: LD_ADDR_VAR 0 1
15801: PUSH
15802: LD_INT 0
15804: ST_TO_ADDR
// repeat game_speed := 1 ;
15805: LD_ADDR_OWVAR 65
15809: PUSH
15810: LD_INT 1
15812: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15813: LD_INT 35
15815: PPUSH
15816: CALL_OW 67
// p := p + 1 ;
15820: LD_ADDR_VAR 0 1
15824: PUSH
15825: LD_VAR 0 1
15829: PUSH
15830: LD_INT 1
15832: PLUS
15833: ST_TO_ADDR
// until p >= 60 ;
15834: LD_VAR 0 1
15838: PUSH
15839: LD_INT 60
15841: GREATEREQUAL
15842: IFFALSE 15805
// game_speed := 4 ;
15844: LD_ADDR_OWVAR 65
15848: PUSH
15849: LD_INT 4
15851: ST_TO_ADDR
// end ;
15852: PPOPN 1
15854: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15855: LD_EXP 44
15859: PUSH
15860: LD_EXP 71
15864: AND
15865: IFFALSE 16011
15867: GO 15869
15869: DISABLE
15870: LD_INT 0
15872: PPUSH
15873: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15874: LD_ADDR_VAR 0 1
15878: PUSH
15879: LD_INT 22
15881: PUSH
15882: LD_OWVAR 2
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 2
15893: PUSH
15894: LD_INT 30
15896: PUSH
15897: LD_INT 0
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 30
15906: PUSH
15907: LD_INT 1
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: LIST
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PPUSH
15923: CALL_OW 69
15927: ST_TO_ADDR
// if not depot then
15928: LD_VAR 0 1
15932: NOT
15933: IFFALSE 15937
// exit ;
15935: GO 16011
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15937: LD_ADDR_VAR 0 2
15941: PUSH
15942: LD_VAR 0 1
15946: PUSH
15947: LD_INT 1
15949: PPUSH
15950: LD_VAR 0 1
15954: PPUSH
15955: CALL_OW 12
15959: ARRAY
15960: PPUSH
15961: CALL_OW 274
15965: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15966: LD_VAR 0 2
15970: PPUSH
15971: LD_INT 1
15973: PPUSH
15974: LD_INT 0
15976: PPUSH
15977: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15981: LD_VAR 0 2
15985: PPUSH
15986: LD_INT 2
15988: PPUSH
15989: LD_INT 0
15991: PPUSH
15992: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15996: LD_VAR 0 2
16000: PPUSH
16001: LD_INT 3
16003: PPUSH
16004: LD_INT 0
16006: PPUSH
16007: CALL_OW 277
// end ;
16011: PPOPN 2
16013: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16014: LD_EXP 44
16018: PUSH
16019: LD_EXP 72
16023: AND
16024: IFFALSE 16121
16026: GO 16028
16028: DISABLE
16029: LD_INT 0
16031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16032: LD_ADDR_VAR 0 1
16036: PUSH
16037: LD_INT 22
16039: PUSH
16040: LD_OWVAR 2
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: PUSH
16049: LD_INT 21
16051: PUSH
16052: LD_INT 1
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: LD_INT 3
16061: PUSH
16062: LD_INT 23
16064: PUSH
16065: LD_INT 0
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: LIST
16080: PPUSH
16081: CALL_OW 69
16085: ST_TO_ADDR
// if not tmp then
16086: LD_VAR 0 1
16090: NOT
16091: IFFALSE 16095
// exit ;
16093: GO 16121
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16095: LD_VAR 0 1
16099: PUSH
16100: LD_INT 1
16102: PPUSH
16103: LD_VAR 0 1
16107: PPUSH
16108: CALL_OW 12
16112: ARRAY
16113: PPUSH
16114: LD_INT 200
16116: PPUSH
16117: CALL_OW 234
// end ;
16121: PPOPN 1
16123: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16124: LD_EXP 44
16128: PUSH
16129: LD_EXP 73
16133: AND
16134: IFFALSE 16213
16136: GO 16138
16138: DISABLE
16139: LD_INT 0
16141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16142: LD_ADDR_VAR 0 1
16146: PUSH
16147: LD_INT 22
16149: PUSH
16150: LD_OWVAR 2
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 21
16161: PUSH
16162: LD_INT 2
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PPUSH
16173: CALL_OW 69
16177: ST_TO_ADDR
// if not tmp then
16178: LD_VAR 0 1
16182: NOT
16183: IFFALSE 16187
// exit ;
16185: GO 16213
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16187: LD_VAR 0 1
16191: PUSH
16192: LD_INT 1
16194: PPUSH
16195: LD_VAR 0 1
16199: PPUSH
16200: CALL_OW 12
16204: ARRAY
16205: PPUSH
16206: LD_INT 60
16208: PPUSH
16209: CALL_OW 234
// end ;
16213: PPOPN 1
16215: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16216: LD_EXP 44
16220: PUSH
16221: LD_EXP 74
16225: AND
16226: IFFALSE 16325
16228: GO 16230
16230: DISABLE
16231: LD_INT 0
16233: PPUSH
16234: PPUSH
// begin enable ;
16235: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16236: LD_ADDR_VAR 0 1
16240: PUSH
16241: LD_INT 22
16243: PUSH
16244: LD_OWVAR 2
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PUSH
16253: LD_INT 61
16255: PUSH
16256: EMPTY
16257: LIST
16258: PUSH
16259: LD_INT 33
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: LIST
16273: PPUSH
16274: CALL_OW 69
16278: ST_TO_ADDR
// if not tmp then
16279: LD_VAR 0 1
16283: NOT
16284: IFFALSE 16288
// exit ;
16286: GO 16325
// for i in tmp do
16288: LD_ADDR_VAR 0 2
16292: PUSH
16293: LD_VAR 0 1
16297: PUSH
16298: FOR_IN
16299: IFFALSE 16323
// if IsControledBy ( i ) then
16301: LD_VAR 0 2
16305: PPUSH
16306: CALL_OW 312
16310: IFFALSE 16321
// ComUnlink ( i ) ;
16312: LD_VAR 0 2
16316: PPUSH
16317: CALL_OW 136
16321: GO 16298
16323: POP
16324: POP
// end ;
16325: PPOPN 2
16327: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16328: LD_EXP 44
16332: PUSH
16333: LD_EXP 75
16337: AND
16338: IFFALSE 16478
16340: GO 16342
16342: DISABLE
16343: LD_INT 0
16345: PPUSH
16346: PPUSH
// begin ToLua ( displayPowell(); ) ;
16347: LD_STRING displayPowell();
16349: PPUSH
16350: CALL_OW 559
// uc_side := 0 ;
16354: LD_ADDR_OWVAR 20
16358: PUSH
16359: LD_INT 0
16361: ST_TO_ADDR
// uc_nation := 2 ;
16362: LD_ADDR_OWVAR 21
16366: PUSH
16367: LD_INT 2
16369: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16370: LD_ADDR_OWVAR 37
16374: PUSH
16375: LD_INT 14
16377: ST_TO_ADDR
// vc_engine := engine_siberite ;
16378: LD_ADDR_OWVAR 39
16382: PUSH
16383: LD_INT 3
16385: ST_TO_ADDR
// vc_control := control_apeman ;
16386: LD_ADDR_OWVAR 38
16390: PUSH
16391: LD_INT 5
16393: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16394: LD_ADDR_OWVAR 40
16398: PUSH
16399: LD_INT 29
16401: ST_TO_ADDR
// un := CreateVehicle ;
16402: LD_ADDR_VAR 0 2
16406: PUSH
16407: CALL_OW 45
16411: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16412: LD_VAR 0 2
16416: PPUSH
16417: LD_INT 1
16419: PPUSH
16420: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16424: LD_INT 35
16426: PPUSH
16427: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16431: LD_VAR 0 2
16435: PPUSH
16436: LD_INT 22
16438: PUSH
16439: LD_OWVAR 2
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PPUSH
16448: CALL_OW 69
16452: PPUSH
16453: LD_VAR 0 2
16457: PPUSH
16458: CALL_OW 74
16462: PPUSH
16463: CALL_OW 115
// until IsDead ( un ) ;
16467: LD_VAR 0 2
16471: PPUSH
16472: CALL_OW 301
16476: IFFALSE 16424
// end ;
16478: PPOPN 2
16480: END
// every 0 0$1 trigger StreamModeActive and sStu do
16481: LD_EXP 44
16485: PUSH
16486: LD_EXP 83
16490: AND
16491: IFFALSE 16507
16493: GO 16495
16495: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16496: LD_STRING displayStucuk();
16498: PPUSH
16499: CALL_OW 559
// ResetFog ;
16503: CALL_OW 335
// end ;
16507: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16508: LD_EXP 44
16512: PUSH
16513: LD_EXP 76
16517: AND
16518: IFFALSE 16659
16520: GO 16522
16522: DISABLE
16523: LD_INT 0
16525: PPUSH
16526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16527: LD_ADDR_VAR 0 2
16531: PUSH
16532: LD_INT 22
16534: PUSH
16535: LD_OWVAR 2
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 21
16546: PUSH
16547: LD_INT 1
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PPUSH
16558: CALL_OW 69
16562: ST_TO_ADDR
// if not tmp then
16563: LD_VAR 0 2
16567: NOT
16568: IFFALSE 16572
// exit ;
16570: GO 16659
// un := tmp [ rand ( 1 , tmp ) ] ;
16572: LD_ADDR_VAR 0 1
16576: PUSH
16577: LD_VAR 0 2
16581: PUSH
16582: LD_INT 1
16584: PPUSH
16585: LD_VAR 0 2
16589: PPUSH
16590: CALL_OW 12
16594: ARRAY
16595: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16596: LD_VAR 0 1
16600: PPUSH
16601: LD_INT 0
16603: PPUSH
16604: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16608: LD_VAR 0 1
16612: PPUSH
16613: LD_OWVAR 3
16617: PUSH
16618: LD_VAR 0 1
16622: DIFF
16623: PPUSH
16624: LD_VAR 0 1
16628: PPUSH
16629: CALL_OW 74
16633: PPUSH
16634: CALL_OW 115
// wait ( 0 0$20 ) ;
16638: LD_INT 700
16640: PPUSH
16641: CALL_OW 67
// SetSide ( un , your_side ) ;
16645: LD_VAR 0 1
16649: PPUSH
16650: LD_OWVAR 2
16654: PPUSH
16655: CALL_OW 235
// end ;
16659: PPOPN 2
16661: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16662: LD_EXP 44
16666: PUSH
16667: LD_EXP 77
16671: AND
16672: IFFALSE 16778
16674: GO 16676
16676: DISABLE
16677: LD_INT 0
16679: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16680: LD_ADDR_VAR 0 1
16684: PUSH
16685: LD_INT 22
16687: PUSH
16688: LD_OWVAR 2
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 2
16699: PUSH
16700: LD_INT 30
16702: PUSH
16703: LD_INT 0
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 30
16712: PUSH
16713: LD_INT 1
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: LIST
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: PPUSH
16729: CALL_OW 69
16733: ST_TO_ADDR
// if not depot then
16734: LD_VAR 0 1
16738: NOT
16739: IFFALSE 16743
// exit ;
16741: GO 16778
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16743: LD_VAR 0 1
16747: PUSH
16748: LD_INT 1
16750: ARRAY
16751: PPUSH
16752: CALL_OW 250
16756: PPUSH
16757: LD_VAR 0 1
16761: PUSH
16762: LD_INT 1
16764: ARRAY
16765: PPUSH
16766: CALL_OW 251
16770: PPUSH
16771: LD_INT 70
16773: PPUSH
16774: CALL_OW 495
// end ;
16778: PPOPN 1
16780: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16781: LD_EXP 44
16785: PUSH
16786: LD_EXP 78
16790: AND
16791: IFFALSE 17002
16793: GO 16795
16795: DISABLE
16796: LD_INT 0
16798: PPUSH
16799: PPUSH
16800: PPUSH
16801: PPUSH
16802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16803: LD_ADDR_VAR 0 5
16807: PUSH
16808: LD_INT 22
16810: PUSH
16811: LD_OWVAR 2
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 21
16822: PUSH
16823: LD_INT 1
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PPUSH
16834: CALL_OW 69
16838: ST_TO_ADDR
// if not tmp then
16839: LD_VAR 0 5
16843: NOT
16844: IFFALSE 16848
// exit ;
16846: GO 17002
// for i in tmp do
16848: LD_ADDR_VAR 0 1
16852: PUSH
16853: LD_VAR 0 5
16857: PUSH
16858: FOR_IN
16859: IFFALSE 17000
// begin d := rand ( 0 , 5 ) ;
16861: LD_ADDR_VAR 0 4
16865: PUSH
16866: LD_INT 0
16868: PPUSH
16869: LD_INT 5
16871: PPUSH
16872: CALL_OW 12
16876: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16877: LD_ADDR_VAR 0 2
16881: PUSH
16882: LD_VAR 0 1
16886: PPUSH
16887: CALL_OW 250
16891: PPUSH
16892: LD_VAR 0 4
16896: PPUSH
16897: LD_INT 3
16899: PPUSH
16900: LD_INT 12
16902: PPUSH
16903: CALL_OW 12
16907: PPUSH
16908: CALL_OW 272
16912: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16913: LD_ADDR_VAR 0 3
16917: PUSH
16918: LD_VAR 0 1
16922: PPUSH
16923: CALL_OW 251
16927: PPUSH
16928: LD_VAR 0 4
16932: PPUSH
16933: LD_INT 3
16935: PPUSH
16936: LD_INT 12
16938: PPUSH
16939: CALL_OW 12
16943: PPUSH
16944: CALL_OW 273
16948: ST_TO_ADDR
// if ValidHex ( x , y ) then
16949: LD_VAR 0 2
16953: PPUSH
16954: LD_VAR 0 3
16958: PPUSH
16959: CALL_OW 488
16963: IFFALSE 16998
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16965: LD_VAR 0 1
16969: PPUSH
16970: LD_VAR 0 2
16974: PPUSH
16975: LD_VAR 0 3
16979: PPUSH
16980: LD_INT 3
16982: PPUSH
16983: LD_INT 6
16985: PPUSH
16986: CALL_OW 12
16990: PPUSH
16991: LD_INT 1
16993: PPUSH
16994: CALL_OW 483
// end ;
16998: GO 16858
17000: POP
17001: POP
// end ;
17002: PPOPN 5
17004: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17005: LD_EXP 44
17009: PUSH
17010: LD_EXP 79
17014: AND
17015: IFFALSE 17109
17017: GO 17019
17019: DISABLE
17020: LD_INT 0
17022: PPUSH
17023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17024: LD_ADDR_VAR 0 2
17028: PUSH
17029: LD_INT 22
17031: PUSH
17032: LD_OWVAR 2
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 32
17043: PUSH
17044: LD_INT 1
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 21
17053: PUSH
17054: LD_INT 2
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: LIST
17065: PPUSH
17066: CALL_OW 69
17070: ST_TO_ADDR
// if not tmp then
17071: LD_VAR 0 2
17075: NOT
17076: IFFALSE 17080
// exit ;
17078: GO 17109
// for i in tmp do
17080: LD_ADDR_VAR 0 1
17084: PUSH
17085: LD_VAR 0 2
17089: PUSH
17090: FOR_IN
17091: IFFALSE 17107
// SetFuel ( i , 0 ) ;
17093: LD_VAR 0 1
17097: PPUSH
17098: LD_INT 0
17100: PPUSH
17101: CALL_OW 240
17105: GO 17090
17107: POP
17108: POP
// end ;
17109: PPOPN 2
17111: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17112: LD_EXP 44
17116: PUSH
17117: LD_EXP 80
17121: AND
17122: IFFALSE 17188
17124: GO 17126
17126: DISABLE
17127: LD_INT 0
17129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17130: LD_ADDR_VAR 0 1
17134: PUSH
17135: LD_INT 22
17137: PUSH
17138: LD_OWVAR 2
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 30
17149: PUSH
17150: LD_INT 29
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PPUSH
17161: CALL_OW 69
17165: ST_TO_ADDR
// if not tmp then
17166: LD_VAR 0 1
17170: NOT
17171: IFFALSE 17175
// exit ;
17173: GO 17188
// DestroyUnit ( tmp [ 1 ] ) ;
17175: LD_VAR 0 1
17179: PUSH
17180: LD_INT 1
17182: ARRAY
17183: PPUSH
17184: CALL_OW 65
// end ;
17188: PPOPN 1
17190: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17191: LD_EXP 44
17195: PUSH
17196: LD_EXP 82
17200: AND
17201: IFFALSE 17330
17203: GO 17205
17205: DISABLE
17206: LD_INT 0
17208: PPUSH
// begin uc_side := 0 ;
17209: LD_ADDR_OWVAR 20
17213: PUSH
17214: LD_INT 0
17216: ST_TO_ADDR
// uc_nation := nation_arabian ;
17217: LD_ADDR_OWVAR 21
17221: PUSH
17222: LD_INT 2
17224: ST_TO_ADDR
// hc_gallery :=  ;
17225: LD_ADDR_OWVAR 33
17229: PUSH
17230: LD_STRING 
17232: ST_TO_ADDR
// hc_name :=  ;
17233: LD_ADDR_OWVAR 26
17237: PUSH
17238: LD_STRING 
17240: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17241: LD_INT 1
17243: PPUSH
17244: LD_INT 11
17246: PPUSH
17247: LD_INT 10
17249: PPUSH
17250: CALL_OW 380
// un := CreateHuman ;
17254: LD_ADDR_VAR 0 1
17258: PUSH
17259: CALL_OW 44
17263: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17264: LD_VAR 0 1
17268: PPUSH
17269: LD_INT 1
17271: PPUSH
17272: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17276: LD_INT 35
17278: PPUSH
17279: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17283: LD_VAR 0 1
17287: PPUSH
17288: LD_INT 22
17290: PUSH
17291: LD_OWVAR 2
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PPUSH
17300: CALL_OW 69
17304: PPUSH
17305: LD_VAR 0 1
17309: PPUSH
17310: CALL_OW 74
17314: PPUSH
17315: CALL_OW 115
// until IsDead ( un ) ;
17319: LD_VAR 0 1
17323: PPUSH
17324: CALL_OW 301
17328: IFFALSE 17276
// end ;
17330: PPOPN 1
17332: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17333: LD_EXP 44
17337: PUSH
17338: LD_EXP 84
17342: AND
17343: IFFALSE 17355
17345: GO 17347
17347: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17348: LD_STRING earthquake(getX(game), 0, 32)
17350: PPUSH
17351: CALL_OW 559
17355: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17356: LD_EXP 44
17360: PUSH
17361: LD_EXP 85
17365: AND
17366: IFFALSE 17457
17368: GO 17370
17370: DISABLE
17371: LD_INT 0
17373: PPUSH
// begin enable ;
17374: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17375: LD_ADDR_VAR 0 1
17379: PUSH
17380: LD_INT 22
17382: PUSH
17383: LD_OWVAR 2
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 21
17394: PUSH
17395: LD_INT 2
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 33
17404: PUSH
17405: LD_INT 3
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: LIST
17416: PPUSH
17417: CALL_OW 69
17421: ST_TO_ADDR
// if not tmp then
17422: LD_VAR 0 1
17426: NOT
17427: IFFALSE 17431
// exit ;
17429: GO 17457
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17431: LD_VAR 0 1
17435: PUSH
17436: LD_INT 1
17438: PPUSH
17439: LD_VAR 0 1
17443: PPUSH
17444: CALL_OW 12
17448: ARRAY
17449: PPUSH
17450: LD_INT 1
17452: PPUSH
17453: CALL_OW 234
// end ;
17457: PPOPN 1
17459: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17460: LD_EXP 44
17464: PUSH
17465: LD_EXP 86
17469: AND
17470: IFFALSE 17611
17472: GO 17474
17474: DISABLE
17475: LD_INT 0
17477: PPUSH
17478: PPUSH
17479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17480: LD_ADDR_VAR 0 3
17484: PUSH
17485: LD_INT 22
17487: PUSH
17488: LD_OWVAR 2
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 25
17499: PUSH
17500: LD_INT 1
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PPUSH
17511: CALL_OW 69
17515: ST_TO_ADDR
// if not tmp then
17516: LD_VAR 0 3
17520: NOT
17521: IFFALSE 17525
// exit ;
17523: GO 17611
// un := tmp [ rand ( 1 , tmp ) ] ;
17525: LD_ADDR_VAR 0 2
17529: PUSH
17530: LD_VAR 0 3
17534: PUSH
17535: LD_INT 1
17537: PPUSH
17538: LD_VAR 0 3
17542: PPUSH
17543: CALL_OW 12
17547: ARRAY
17548: ST_TO_ADDR
// if Crawls ( un ) then
17549: LD_VAR 0 2
17553: PPUSH
17554: CALL_OW 318
17558: IFFALSE 17569
// ComWalk ( un ) ;
17560: LD_VAR 0 2
17564: PPUSH
17565: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17569: LD_VAR 0 2
17573: PPUSH
17574: LD_INT 9
17576: PPUSH
17577: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17581: LD_INT 28
17583: PPUSH
17584: LD_OWVAR 2
17588: PPUSH
17589: LD_INT 2
17591: PPUSH
17592: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17596: LD_INT 29
17598: PPUSH
17599: LD_OWVAR 2
17603: PPUSH
17604: LD_INT 2
17606: PPUSH
17607: CALL_OW 322
// end ;
17611: PPOPN 3
17613: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17614: LD_EXP 44
17618: PUSH
17619: LD_EXP 87
17623: AND
17624: IFFALSE 17735
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
17632: PPUSH
17633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17634: LD_ADDR_VAR 0 3
17638: PUSH
17639: LD_INT 22
17641: PUSH
17642: LD_OWVAR 2
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 25
17653: PUSH
17654: LD_INT 1
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PPUSH
17665: CALL_OW 69
17669: ST_TO_ADDR
// if not tmp then
17670: LD_VAR 0 3
17674: NOT
17675: IFFALSE 17679
// exit ;
17677: GO 17735
// un := tmp [ rand ( 1 , tmp ) ] ;
17679: LD_ADDR_VAR 0 2
17683: PUSH
17684: LD_VAR 0 3
17688: PUSH
17689: LD_INT 1
17691: PPUSH
17692: LD_VAR 0 3
17696: PPUSH
17697: CALL_OW 12
17701: ARRAY
17702: ST_TO_ADDR
// if Crawls ( un ) then
17703: LD_VAR 0 2
17707: PPUSH
17708: CALL_OW 318
17712: IFFALSE 17723
// ComWalk ( un ) ;
17714: LD_VAR 0 2
17718: PPUSH
17719: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17723: LD_VAR 0 2
17727: PPUSH
17728: LD_INT 8
17730: PPUSH
17731: CALL_OW 336
// end ;
17735: PPOPN 3
17737: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17738: LD_EXP 44
17742: PUSH
17743: LD_EXP 88
17747: AND
17748: IFFALSE 17892
17750: GO 17752
17752: DISABLE
17753: LD_INT 0
17755: PPUSH
17756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17757: LD_ADDR_VAR 0 2
17761: PUSH
17762: LD_INT 22
17764: PUSH
17765: LD_OWVAR 2
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 21
17776: PUSH
17777: LD_INT 2
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 2
17786: PUSH
17787: LD_INT 34
17789: PUSH
17790: LD_INT 12
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 34
17799: PUSH
17800: LD_INT 51
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 34
17809: PUSH
17810: LD_INT 32
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: LIST
17827: PPUSH
17828: CALL_OW 69
17832: ST_TO_ADDR
// if not tmp then
17833: LD_VAR 0 2
17837: NOT
17838: IFFALSE 17842
// exit ;
17840: GO 17892
// for i in tmp do
17842: LD_ADDR_VAR 0 1
17846: PUSH
17847: LD_VAR 0 2
17851: PUSH
17852: FOR_IN
17853: IFFALSE 17890
// if GetCargo ( i , mat_artifact ) = 0 then
17855: LD_VAR 0 1
17859: PPUSH
17860: LD_INT 4
17862: PPUSH
17863: CALL_OW 289
17867: PUSH
17868: LD_INT 0
17870: EQUAL
17871: IFFALSE 17888
// SetCargo ( i , mat_siberit , 100 ) ;
17873: LD_VAR 0 1
17877: PPUSH
17878: LD_INT 3
17880: PPUSH
17881: LD_INT 100
17883: PPUSH
17884: CALL_OW 290
17888: GO 17852
17890: POP
17891: POP
// end ;
17892: PPOPN 2
17894: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17895: LD_EXP 44
17899: PUSH
17900: LD_EXP 89
17904: AND
17905: IFFALSE 18088
17907: GO 17909
17909: DISABLE
17910: LD_INT 0
17912: PPUSH
17913: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17914: LD_ADDR_VAR 0 2
17918: PUSH
17919: LD_INT 22
17921: PUSH
17922: LD_OWVAR 2
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PPUSH
17931: CALL_OW 69
17935: ST_TO_ADDR
// if not tmp then
17936: LD_VAR 0 2
17940: NOT
17941: IFFALSE 17945
// exit ;
17943: GO 18088
// for i := 1 to 2 do
17945: LD_ADDR_VAR 0 1
17949: PUSH
17950: DOUBLE
17951: LD_INT 1
17953: DEC
17954: ST_TO_ADDR
17955: LD_INT 2
17957: PUSH
17958: FOR_TO
17959: IFFALSE 18086
// begin uc_side := your_side ;
17961: LD_ADDR_OWVAR 20
17965: PUSH
17966: LD_OWVAR 2
17970: ST_TO_ADDR
// uc_nation := nation_american ;
17971: LD_ADDR_OWVAR 21
17975: PUSH
17976: LD_INT 1
17978: ST_TO_ADDR
// vc_chassis := us_morphling ;
17979: LD_ADDR_OWVAR 37
17983: PUSH
17984: LD_INT 5
17986: ST_TO_ADDR
// vc_engine := engine_siberite ;
17987: LD_ADDR_OWVAR 39
17991: PUSH
17992: LD_INT 3
17994: ST_TO_ADDR
// vc_control := control_computer ;
17995: LD_ADDR_OWVAR 38
17999: PUSH
18000: LD_INT 3
18002: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18003: LD_ADDR_OWVAR 40
18007: PUSH
18008: LD_INT 10
18010: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18011: LD_VAR 0 2
18015: PUSH
18016: LD_INT 1
18018: ARRAY
18019: PPUSH
18020: CALL_OW 310
18024: NOT
18025: IFFALSE 18072
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18027: CALL_OW 45
18031: PPUSH
18032: LD_VAR 0 2
18036: PUSH
18037: LD_INT 1
18039: ARRAY
18040: PPUSH
18041: CALL_OW 250
18045: PPUSH
18046: LD_VAR 0 2
18050: PUSH
18051: LD_INT 1
18053: ARRAY
18054: PPUSH
18055: CALL_OW 251
18059: PPUSH
18060: LD_INT 12
18062: PPUSH
18063: LD_INT 1
18065: PPUSH
18066: CALL_OW 50
18070: GO 18084
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18072: CALL_OW 45
18076: PPUSH
18077: LD_INT 1
18079: PPUSH
18080: CALL_OW 51
// end ;
18084: GO 17958
18086: POP
18087: POP
// end ;
18088: PPOPN 2
18090: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18091: LD_EXP 44
18095: PUSH
18096: LD_EXP 90
18100: AND
18101: IFFALSE 18323
18103: GO 18105
18105: DISABLE
18106: LD_INT 0
18108: PPUSH
18109: PPUSH
18110: PPUSH
18111: PPUSH
18112: PPUSH
18113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18114: LD_ADDR_VAR 0 6
18118: PUSH
18119: LD_INT 22
18121: PUSH
18122: LD_OWVAR 2
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 21
18133: PUSH
18134: LD_INT 1
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 3
18143: PUSH
18144: LD_INT 23
18146: PUSH
18147: LD_INT 0
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: LIST
18162: PPUSH
18163: CALL_OW 69
18167: ST_TO_ADDR
// if not tmp then
18168: LD_VAR 0 6
18172: NOT
18173: IFFALSE 18177
// exit ;
18175: GO 18323
// s1 := rand ( 1 , 4 ) ;
18177: LD_ADDR_VAR 0 2
18181: PUSH
18182: LD_INT 1
18184: PPUSH
18185: LD_INT 4
18187: PPUSH
18188: CALL_OW 12
18192: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18193: LD_ADDR_VAR 0 4
18197: PUSH
18198: LD_VAR 0 6
18202: PUSH
18203: LD_INT 1
18205: ARRAY
18206: PPUSH
18207: LD_VAR 0 2
18211: PPUSH
18212: CALL_OW 259
18216: ST_TO_ADDR
// if s1 = 1 then
18217: LD_VAR 0 2
18221: PUSH
18222: LD_INT 1
18224: EQUAL
18225: IFFALSE 18245
// s2 := rand ( 2 , 4 ) else
18227: LD_ADDR_VAR 0 3
18231: PUSH
18232: LD_INT 2
18234: PPUSH
18235: LD_INT 4
18237: PPUSH
18238: CALL_OW 12
18242: ST_TO_ADDR
18243: GO 18253
// s2 := 1 ;
18245: LD_ADDR_VAR 0 3
18249: PUSH
18250: LD_INT 1
18252: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18253: LD_ADDR_VAR 0 5
18257: PUSH
18258: LD_VAR 0 6
18262: PUSH
18263: LD_INT 1
18265: ARRAY
18266: PPUSH
18267: LD_VAR 0 3
18271: PPUSH
18272: CALL_OW 259
18276: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18277: LD_VAR 0 6
18281: PUSH
18282: LD_INT 1
18284: ARRAY
18285: PPUSH
18286: LD_VAR 0 2
18290: PPUSH
18291: LD_VAR 0 5
18295: PPUSH
18296: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18300: LD_VAR 0 6
18304: PUSH
18305: LD_INT 1
18307: ARRAY
18308: PPUSH
18309: LD_VAR 0 3
18313: PPUSH
18314: LD_VAR 0 4
18318: PPUSH
18319: CALL_OW 237
// end ;
18323: PPOPN 6
18325: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18326: LD_EXP 44
18330: PUSH
18331: LD_EXP 91
18335: AND
18336: IFFALSE 18415
18338: GO 18340
18340: DISABLE
18341: LD_INT 0
18343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18344: LD_ADDR_VAR 0 1
18348: PUSH
18349: LD_INT 22
18351: PUSH
18352: LD_OWVAR 2
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 30
18363: PUSH
18364: LD_INT 3
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PPUSH
18375: CALL_OW 69
18379: ST_TO_ADDR
// if not tmp then
18380: LD_VAR 0 1
18384: NOT
18385: IFFALSE 18389
// exit ;
18387: GO 18415
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18389: LD_VAR 0 1
18393: PUSH
18394: LD_INT 1
18396: PPUSH
18397: LD_VAR 0 1
18401: PPUSH
18402: CALL_OW 12
18406: ARRAY
18407: PPUSH
18408: LD_INT 1
18410: PPUSH
18411: CALL_OW 234
// end ;
18415: PPOPN 1
18417: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18418: LD_EXP 44
18422: PUSH
18423: LD_EXP 92
18427: AND
18428: IFFALSE 18540
18430: GO 18432
18432: DISABLE
18433: LD_INT 0
18435: PPUSH
18436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18437: LD_ADDR_VAR 0 2
18441: PUSH
18442: LD_INT 22
18444: PUSH
18445: LD_OWVAR 2
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 2
18456: PUSH
18457: LD_INT 30
18459: PUSH
18460: LD_INT 27
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 30
18469: PUSH
18470: LD_INT 26
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 30
18479: PUSH
18480: LD_INT 28
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PPUSH
18497: CALL_OW 69
18501: ST_TO_ADDR
// if not tmp then
18502: LD_VAR 0 2
18506: NOT
18507: IFFALSE 18511
// exit ;
18509: GO 18540
// for i in tmp do
18511: LD_ADDR_VAR 0 1
18515: PUSH
18516: LD_VAR 0 2
18520: PUSH
18521: FOR_IN
18522: IFFALSE 18538
// SetLives ( i , 1 ) ;
18524: LD_VAR 0 1
18528: PPUSH
18529: LD_INT 1
18531: PPUSH
18532: CALL_OW 234
18536: GO 18521
18538: POP
18539: POP
// end ;
18540: PPOPN 2
18542: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18543: LD_EXP 44
18547: PUSH
18548: LD_EXP 93
18552: AND
18553: IFFALSE 18840
18555: GO 18557
18557: DISABLE
18558: LD_INT 0
18560: PPUSH
18561: PPUSH
18562: PPUSH
// begin i := rand ( 1 , 7 ) ;
18563: LD_ADDR_VAR 0 1
18567: PUSH
18568: LD_INT 1
18570: PPUSH
18571: LD_INT 7
18573: PPUSH
18574: CALL_OW 12
18578: ST_TO_ADDR
// case i of 1 :
18579: LD_VAR 0 1
18583: PUSH
18584: LD_INT 1
18586: DOUBLE
18587: EQUAL
18588: IFTRUE 18592
18590: GO 18602
18592: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18593: LD_STRING earthquake(getX(game), 0, 32)
18595: PPUSH
18596: CALL_OW 559
18600: GO 18840
18602: LD_INT 2
18604: DOUBLE
18605: EQUAL
18606: IFTRUE 18610
18608: GO 18624
18610: POP
// begin ToLua ( displayStucuk(); ) ;
18611: LD_STRING displayStucuk();
18613: PPUSH
18614: CALL_OW 559
// ResetFog ;
18618: CALL_OW 335
// end ; 3 :
18622: GO 18840
18624: LD_INT 3
18626: DOUBLE
18627: EQUAL
18628: IFTRUE 18632
18630: GO 18736
18632: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18633: LD_ADDR_VAR 0 2
18637: PUSH
18638: LD_INT 22
18640: PUSH
18641: LD_OWVAR 2
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 25
18652: PUSH
18653: LD_INT 1
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PPUSH
18664: CALL_OW 69
18668: ST_TO_ADDR
// if not tmp then
18669: LD_VAR 0 2
18673: NOT
18674: IFFALSE 18678
// exit ;
18676: GO 18840
// un := tmp [ rand ( 1 , tmp ) ] ;
18678: LD_ADDR_VAR 0 3
18682: PUSH
18683: LD_VAR 0 2
18687: PUSH
18688: LD_INT 1
18690: PPUSH
18691: LD_VAR 0 2
18695: PPUSH
18696: CALL_OW 12
18700: ARRAY
18701: ST_TO_ADDR
// if Crawls ( un ) then
18702: LD_VAR 0 3
18706: PPUSH
18707: CALL_OW 318
18711: IFFALSE 18722
// ComWalk ( un ) ;
18713: LD_VAR 0 3
18717: PPUSH
18718: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18722: LD_VAR 0 3
18726: PPUSH
18727: LD_INT 8
18729: PPUSH
18730: CALL_OW 336
// end ; 4 :
18734: GO 18840
18736: LD_INT 4
18738: DOUBLE
18739: EQUAL
18740: IFTRUE 18744
18742: GO 18818
18744: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18745: LD_ADDR_VAR 0 2
18749: PUSH
18750: LD_INT 22
18752: PUSH
18753: LD_OWVAR 2
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 30
18764: PUSH
18765: LD_INT 29
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PPUSH
18776: CALL_OW 69
18780: ST_TO_ADDR
// if not tmp then
18781: LD_VAR 0 2
18785: NOT
18786: IFFALSE 18790
// exit ;
18788: GO 18840
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18790: LD_VAR 0 2
18794: PUSH
18795: LD_INT 1
18797: ARRAY
18798: PPUSH
18799: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18803: LD_VAR 0 2
18807: PUSH
18808: LD_INT 1
18810: ARRAY
18811: PPUSH
18812: CALL_OW 65
// end ; 5 .. 7 :
18816: GO 18840
18818: LD_INT 5
18820: DOUBLE
18821: GREATEREQUAL
18822: IFFALSE 18830
18824: LD_INT 7
18826: DOUBLE
18827: LESSEQUAL
18828: IFTRUE 18832
18830: GO 18839
18832: POP
// StreamSibBomb ; end ;
18833: CALL 15077 0 0
18837: GO 18840
18839: POP
// end ;
18840: PPOPN 3
18842: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18843: LD_EXP 44
18847: PUSH
18848: LD_EXP 94
18852: AND
18853: IFFALSE 19009
18855: GO 18857
18857: DISABLE
18858: LD_INT 0
18860: PPUSH
18861: PPUSH
18862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18863: LD_ADDR_VAR 0 2
18867: PUSH
18868: LD_INT 81
18870: PUSH
18871: LD_OWVAR 2
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 2
18882: PUSH
18883: LD_INT 21
18885: PUSH
18886: LD_INT 1
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 21
18895: PUSH
18896: LD_INT 2
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: LIST
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PPUSH
18912: CALL_OW 69
18916: ST_TO_ADDR
// if not tmp then
18917: LD_VAR 0 2
18921: NOT
18922: IFFALSE 18926
// exit ;
18924: GO 19009
// p := 0 ;
18926: LD_ADDR_VAR 0 3
18930: PUSH
18931: LD_INT 0
18933: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18934: LD_INT 35
18936: PPUSH
18937: CALL_OW 67
// p := p + 1 ;
18941: LD_ADDR_VAR 0 3
18945: PUSH
18946: LD_VAR 0 3
18950: PUSH
18951: LD_INT 1
18953: PLUS
18954: ST_TO_ADDR
// for i in tmp do
18955: LD_ADDR_VAR 0 1
18959: PUSH
18960: LD_VAR 0 2
18964: PUSH
18965: FOR_IN
18966: IFFALSE 18997
// if GetLives ( i ) < 1000 then
18968: LD_VAR 0 1
18972: PPUSH
18973: CALL_OW 256
18977: PUSH
18978: LD_INT 1000
18980: LESS
18981: IFFALSE 18995
// SetLives ( i , 1000 ) ;
18983: LD_VAR 0 1
18987: PPUSH
18988: LD_INT 1000
18990: PPUSH
18991: CALL_OW 234
18995: GO 18965
18997: POP
18998: POP
// until p > 20 ;
18999: LD_VAR 0 3
19003: PUSH
19004: LD_INT 20
19006: GREATER
19007: IFFALSE 18934
// end ;
19009: PPOPN 3
19011: END
// every 0 0$1 trigger StreamModeActive and sTime do
19012: LD_EXP 44
19016: PUSH
19017: LD_EXP 95
19021: AND
19022: IFFALSE 19057
19024: GO 19026
19026: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19027: LD_INT 28
19029: PPUSH
19030: LD_OWVAR 2
19034: PPUSH
19035: LD_INT 2
19037: PPUSH
19038: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19042: LD_INT 30
19044: PPUSH
19045: LD_OWVAR 2
19049: PPUSH
19050: LD_INT 2
19052: PPUSH
19053: CALL_OW 322
// end ;
19057: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19058: LD_EXP 44
19062: PUSH
19063: LD_EXP 96
19067: AND
19068: IFFALSE 19189
19070: GO 19072
19072: DISABLE
19073: LD_INT 0
19075: PPUSH
19076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19077: LD_ADDR_VAR 0 2
19081: PUSH
19082: LD_INT 22
19084: PUSH
19085: LD_OWVAR 2
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 21
19096: PUSH
19097: LD_INT 1
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 3
19106: PUSH
19107: LD_INT 23
19109: PUSH
19110: LD_INT 0
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: PPUSH
19126: CALL_OW 69
19130: ST_TO_ADDR
// if not tmp then
19131: LD_VAR 0 2
19135: NOT
19136: IFFALSE 19140
// exit ;
19138: GO 19189
// for i in tmp do
19140: LD_ADDR_VAR 0 1
19144: PUSH
19145: LD_VAR 0 2
19149: PUSH
19150: FOR_IN
19151: IFFALSE 19187
// begin if Crawls ( i ) then
19153: LD_VAR 0 1
19157: PPUSH
19158: CALL_OW 318
19162: IFFALSE 19173
// ComWalk ( i ) ;
19164: LD_VAR 0 1
19168: PPUSH
19169: CALL_OW 138
// SetClass ( i , 2 ) ;
19173: LD_VAR 0 1
19177: PPUSH
19178: LD_INT 2
19180: PPUSH
19181: CALL_OW 336
// end ;
19185: GO 19150
19187: POP
19188: POP
// end ;
19189: PPOPN 2
19191: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19192: LD_EXP 44
19196: PUSH
19197: LD_EXP 97
19201: AND
19202: IFFALSE 19490
19204: GO 19206
19206: DISABLE
19207: LD_INT 0
19209: PPUSH
19210: PPUSH
19211: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19212: LD_OWVAR 2
19216: PPUSH
19217: LD_INT 9
19219: PPUSH
19220: LD_INT 1
19222: PPUSH
19223: LD_INT 1
19225: PPUSH
19226: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19230: LD_INT 9
19232: PPUSH
19233: LD_OWVAR 2
19237: PPUSH
19238: CALL_OW 343
// uc_side := 9 ;
19242: LD_ADDR_OWVAR 20
19246: PUSH
19247: LD_INT 9
19249: ST_TO_ADDR
// uc_nation := 2 ;
19250: LD_ADDR_OWVAR 21
19254: PUSH
19255: LD_INT 2
19257: ST_TO_ADDR
// hc_name := Dark Warrior ;
19258: LD_ADDR_OWVAR 26
19262: PUSH
19263: LD_STRING Dark Warrior
19265: ST_TO_ADDR
// hc_gallery :=  ;
19266: LD_ADDR_OWVAR 33
19270: PUSH
19271: LD_STRING 
19273: ST_TO_ADDR
// hc_noskilllimit := true ;
19274: LD_ADDR_OWVAR 76
19278: PUSH
19279: LD_INT 1
19281: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19282: LD_ADDR_OWVAR 31
19286: PUSH
19287: LD_INT 30
19289: PUSH
19290: LD_INT 30
19292: PUSH
19293: LD_INT 30
19295: PUSH
19296: LD_INT 30
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: ST_TO_ADDR
// un := CreateHuman ;
19305: LD_ADDR_VAR 0 3
19309: PUSH
19310: CALL_OW 44
19314: ST_TO_ADDR
// hc_noskilllimit := false ;
19315: LD_ADDR_OWVAR 76
19319: PUSH
19320: LD_INT 0
19322: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19323: LD_VAR 0 3
19327: PPUSH
19328: LD_INT 1
19330: PPUSH
19331: CALL_OW 51
// ToLua ( playRanger() ) ;
19335: LD_STRING playRanger()
19337: PPUSH
19338: CALL_OW 559
// p := 0 ;
19342: LD_ADDR_VAR 0 2
19346: PUSH
19347: LD_INT 0
19349: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19350: LD_INT 35
19352: PPUSH
19353: CALL_OW 67
// p := p + 1 ;
19357: LD_ADDR_VAR 0 2
19361: PUSH
19362: LD_VAR 0 2
19366: PUSH
19367: LD_INT 1
19369: PLUS
19370: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19371: LD_VAR 0 3
19375: PPUSH
19376: CALL_OW 256
19380: PUSH
19381: LD_INT 1000
19383: LESS
19384: IFFALSE 19398
// SetLives ( un , 1000 ) ;
19386: LD_VAR 0 3
19390: PPUSH
19391: LD_INT 1000
19393: PPUSH
19394: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19398: LD_VAR 0 3
19402: PPUSH
19403: LD_INT 81
19405: PUSH
19406: LD_OWVAR 2
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 91
19417: PUSH
19418: LD_VAR 0 3
19422: PUSH
19423: LD_INT 30
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: LIST
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PPUSH
19435: CALL_OW 69
19439: PPUSH
19440: LD_VAR 0 3
19444: PPUSH
19445: CALL_OW 74
19449: PPUSH
19450: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19454: LD_VAR 0 2
19458: PUSH
19459: LD_INT 80
19461: GREATER
19462: PUSH
19463: LD_VAR 0 3
19467: PPUSH
19468: CALL_OW 301
19472: OR
19473: IFFALSE 19350
// if un then
19475: LD_VAR 0 3
19479: IFFALSE 19490
// RemoveUnit ( un ) ;
19481: LD_VAR 0 3
19485: PPUSH
19486: CALL_OW 64
// end ;
19490: PPOPN 3
19492: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19493: LD_EXP 98
19497: IFFALSE 19613
19499: GO 19501
19501: DISABLE
19502: LD_INT 0
19504: PPUSH
19505: PPUSH
19506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19507: LD_ADDR_VAR 0 2
19511: PUSH
19512: LD_INT 81
19514: PUSH
19515: LD_OWVAR 2
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 21
19526: PUSH
19527: LD_INT 1
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PPUSH
19538: CALL_OW 69
19542: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19543: LD_STRING playComputer()
19545: PPUSH
19546: CALL_OW 559
// if not tmp then
19550: LD_VAR 0 2
19554: NOT
19555: IFFALSE 19559
// exit ;
19557: GO 19613
// for i in tmp do
19559: LD_ADDR_VAR 0 1
19563: PUSH
19564: LD_VAR 0 2
19568: PUSH
19569: FOR_IN
19570: IFFALSE 19611
// for j := 1 to 4 do
19572: LD_ADDR_VAR 0 3
19576: PUSH
19577: DOUBLE
19578: LD_INT 1
19580: DEC
19581: ST_TO_ADDR
19582: LD_INT 4
19584: PUSH
19585: FOR_TO
19586: IFFALSE 19607
// SetSkill ( i , j , 10 ) ;
19588: LD_VAR 0 1
19592: PPUSH
19593: LD_VAR 0 3
19597: PPUSH
19598: LD_INT 10
19600: PPUSH
19601: CALL_OW 237
19605: GO 19585
19607: POP
19608: POP
19609: GO 19569
19611: POP
19612: POP
// end ;
19613: PPOPN 3
19615: END
// every 0 0$1 trigger s30 do var i , tmp ;
19616: LD_EXP 99
19620: IFFALSE 19689
19622: GO 19624
19624: DISABLE
19625: LD_INT 0
19627: PPUSH
19628: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19629: LD_ADDR_VAR 0 2
19633: PUSH
19634: LD_INT 22
19636: PUSH
19637: LD_OWVAR 2
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PPUSH
19646: CALL_OW 69
19650: ST_TO_ADDR
// if not tmp then
19651: LD_VAR 0 2
19655: NOT
19656: IFFALSE 19660
// exit ;
19658: GO 19689
// for i in tmp do
19660: LD_ADDR_VAR 0 1
19664: PUSH
19665: LD_VAR 0 2
19669: PUSH
19670: FOR_IN
19671: IFFALSE 19687
// SetLives ( i , 300 ) ;
19673: LD_VAR 0 1
19677: PPUSH
19678: LD_INT 300
19680: PPUSH
19681: CALL_OW 234
19685: GO 19670
19687: POP
19688: POP
// end ;
19689: PPOPN 2
19691: END
// every 0 0$1 trigger s60 do var i , tmp ;
19692: LD_EXP 100
19696: IFFALSE 19765
19698: GO 19700
19700: DISABLE
19701: LD_INT 0
19703: PPUSH
19704: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19705: LD_ADDR_VAR 0 2
19709: PUSH
19710: LD_INT 22
19712: PUSH
19713: LD_OWVAR 2
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PPUSH
19722: CALL_OW 69
19726: ST_TO_ADDR
// if not tmp then
19727: LD_VAR 0 2
19731: NOT
19732: IFFALSE 19736
// exit ;
19734: GO 19765
// for i in tmp do
19736: LD_ADDR_VAR 0 1
19740: PUSH
19741: LD_VAR 0 2
19745: PUSH
19746: FOR_IN
19747: IFFALSE 19763
// SetLives ( i , 600 ) ;
19749: LD_VAR 0 1
19753: PPUSH
19754: LD_INT 600
19756: PPUSH
19757: CALL_OW 234
19761: GO 19746
19763: POP
19764: POP
// end ;
19765: PPOPN 2
19767: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19768: LD_INT 0
19770: PPUSH
// case cmd of 301 :
19771: LD_VAR 0 1
19775: PUSH
19776: LD_INT 301
19778: DOUBLE
19779: EQUAL
19780: IFTRUE 19784
19782: GO 19816
19784: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19785: LD_VAR 0 6
19789: PPUSH
19790: LD_VAR 0 7
19794: PPUSH
19795: LD_VAR 0 8
19799: PPUSH
19800: LD_VAR 0 4
19804: PPUSH
19805: LD_VAR 0 5
19809: PPUSH
19810: CALL 21017 0 5
19814: GO 19937
19816: LD_INT 302
19818: DOUBLE
19819: EQUAL
19820: IFTRUE 19824
19822: GO 19861
19824: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19825: LD_VAR 0 6
19829: PPUSH
19830: LD_VAR 0 7
19834: PPUSH
19835: LD_VAR 0 8
19839: PPUSH
19840: LD_VAR 0 9
19844: PPUSH
19845: LD_VAR 0 4
19849: PPUSH
19850: LD_VAR 0 5
19854: PPUSH
19855: CALL 21108 0 6
19859: GO 19937
19861: LD_INT 303
19863: DOUBLE
19864: EQUAL
19865: IFTRUE 19869
19867: GO 19906
19869: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19870: LD_VAR 0 6
19874: PPUSH
19875: LD_VAR 0 7
19879: PPUSH
19880: LD_VAR 0 8
19884: PPUSH
19885: LD_VAR 0 9
19889: PPUSH
19890: LD_VAR 0 4
19894: PPUSH
19895: LD_VAR 0 5
19899: PPUSH
19900: CALL 19942 0 6
19904: GO 19937
19906: LD_INT 304
19908: DOUBLE
19909: EQUAL
19910: IFTRUE 19914
19912: GO 19936
19914: POP
// hHackTeleport ( unit , x , y ) ; end ;
19915: LD_VAR 0 2
19919: PPUSH
19920: LD_VAR 0 4
19924: PPUSH
19925: LD_VAR 0 5
19929: PPUSH
19930: CALL 21701 0 3
19934: GO 19937
19936: POP
// end ;
19937: LD_VAR 0 12
19941: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19942: LD_INT 0
19944: PPUSH
19945: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19946: LD_VAR 0 1
19950: PUSH
19951: LD_INT 1
19953: LESS
19954: PUSH
19955: LD_VAR 0 1
19959: PUSH
19960: LD_INT 3
19962: GREATER
19963: OR
19964: PUSH
19965: LD_VAR 0 5
19969: PPUSH
19970: LD_VAR 0 6
19974: PPUSH
19975: CALL_OW 428
19979: OR
19980: IFFALSE 19984
// exit ;
19982: GO 20704
// uc_side := your_side ;
19984: LD_ADDR_OWVAR 20
19988: PUSH
19989: LD_OWVAR 2
19993: ST_TO_ADDR
// uc_nation := nation ;
19994: LD_ADDR_OWVAR 21
19998: PUSH
19999: LD_VAR 0 1
20003: ST_TO_ADDR
// bc_level = 1 ;
20004: LD_ADDR_OWVAR 43
20008: PUSH
20009: LD_INT 1
20011: ST_TO_ADDR
// case btype of 1 :
20012: LD_VAR 0 2
20016: PUSH
20017: LD_INT 1
20019: DOUBLE
20020: EQUAL
20021: IFTRUE 20025
20023: GO 20036
20025: POP
// bc_type := b_depot ; 2 :
20026: LD_ADDR_OWVAR 42
20030: PUSH
20031: LD_INT 0
20033: ST_TO_ADDR
20034: GO 20648
20036: LD_INT 2
20038: DOUBLE
20039: EQUAL
20040: IFTRUE 20044
20042: GO 20055
20044: POP
// bc_type := b_warehouse ; 3 :
20045: LD_ADDR_OWVAR 42
20049: PUSH
20050: LD_INT 1
20052: ST_TO_ADDR
20053: GO 20648
20055: LD_INT 3
20057: DOUBLE
20058: EQUAL
20059: IFTRUE 20063
20061: GO 20074
20063: POP
// bc_type := b_lab ; 4 .. 9 :
20064: LD_ADDR_OWVAR 42
20068: PUSH
20069: LD_INT 6
20071: ST_TO_ADDR
20072: GO 20648
20074: LD_INT 4
20076: DOUBLE
20077: GREATEREQUAL
20078: IFFALSE 20086
20080: LD_INT 9
20082: DOUBLE
20083: LESSEQUAL
20084: IFTRUE 20088
20086: GO 20140
20088: POP
// begin bc_type := b_lab_half ;
20089: LD_ADDR_OWVAR 42
20093: PUSH
20094: LD_INT 7
20096: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20097: LD_ADDR_OWVAR 44
20101: PUSH
20102: LD_INT 10
20104: PUSH
20105: LD_INT 11
20107: PUSH
20108: LD_INT 12
20110: PUSH
20111: LD_INT 15
20113: PUSH
20114: LD_INT 14
20116: PUSH
20117: LD_INT 13
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: PUSH
20128: LD_VAR 0 2
20132: PUSH
20133: LD_INT 3
20135: MINUS
20136: ARRAY
20137: ST_TO_ADDR
// end ; 10 .. 13 :
20138: GO 20648
20140: LD_INT 10
20142: DOUBLE
20143: GREATEREQUAL
20144: IFFALSE 20152
20146: LD_INT 13
20148: DOUBLE
20149: LESSEQUAL
20150: IFTRUE 20154
20152: GO 20231
20154: POP
// begin bc_type := b_lab_full ;
20155: LD_ADDR_OWVAR 42
20159: PUSH
20160: LD_INT 8
20162: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20163: LD_ADDR_OWVAR 44
20167: PUSH
20168: LD_INT 10
20170: PUSH
20171: LD_INT 12
20173: PUSH
20174: LD_INT 14
20176: PUSH
20177: LD_INT 13
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: PUSH
20186: LD_VAR 0 2
20190: PUSH
20191: LD_INT 9
20193: MINUS
20194: ARRAY
20195: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20196: LD_ADDR_OWVAR 45
20200: PUSH
20201: LD_INT 11
20203: PUSH
20204: LD_INT 15
20206: PUSH
20207: LD_INT 12
20209: PUSH
20210: LD_INT 15
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: PUSH
20219: LD_VAR 0 2
20223: PUSH
20224: LD_INT 9
20226: MINUS
20227: ARRAY
20228: ST_TO_ADDR
// end ; 14 :
20229: GO 20648
20231: LD_INT 14
20233: DOUBLE
20234: EQUAL
20235: IFTRUE 20239
20237: GO 20250
20239: POP
// bc_type := b_workshop ; 15 :
20240: LD_ADDR_OWVAR 42
20244: PUSH
20245: LD_INT 2
20247: ST_TO_ADDR
20248: GO 20648
20250: LD_INT 15
20252: DOUBLE
20253: EQUAL
20254: IFTRUE 20258
20256: GO 20269
20258: POP
// bc_type := b_factory ; 16 :
20259: LD_ADDR_OWVAR 42
20263: PUSH
20264: LD_INT 3
20266: ST_TO_ADDR
20267: GO 20648
20269: LD_INT 16
20271: DOUBLE
20272: EQUAL
20273: IFTRUE 20277
20275: GO 20288
20277: POP
// bc_type := b_ext_gun ; 17 :
20278: LD_ADDR_OWVAR 42
20282: PUSH
20283: LD_INT 17
20285: ST_TO_ADDR
20286: GO 20648
20288: LD_INT 17
20290: DOUBLE
20291: EQUAL
20292: IFTRUE 20296
20294: GO 20324
20296: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20297: LD_ADDR_OWVAR 42
20301: PUSH
20302: LD_INT 19
20304: PUSH
20305: LD_INT 23
20307: PUSH
20308: LD_INT 19
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: LIST
20315: PUSH
20316: LD_VAR 0 1
20320: ARRAY
20321: ST_TO_ADDR
20322: GO 20648
20324: LD_INT 18
20326: DOUBLE
20327: EQUAL
20328: IFTRUE 20332
20330: GO 20343
20332: POP
// bc_type := b_ext_radar ; 19 :
20333: LD_ADDR_OWVAR 42
20337: PUSH
20338: LD_INT 20
20340: ST_TO_ADDR
20341: GO 20648
20343: LD_INT 19
20345: DOUBLE
20346: EQUAL
20347: IFTRUE 20351
20349: GO 20362
20351: POP
// bc_type := b_ext_radio ; 20 :
20352: LD_ADDR_OWVAR 42
20356: PUSH
20357: LD_INT 22
20359: ST_TO_ADDR
20360: GO 20648
20362: LD_INT 20
20364: DOUBLE
20365: EQUAL
20366: IFTRUE 20370
20368: GO 20381
20370: POP
// bc_type := b_ext_siberium ; 21 :
20371: LD_ADDR_OWVAR 42
20375: PUSH
20376: LD_INT 21
20378: ST_TO_ADDR
20379: GO 20648
20381: LD_INT 21
20383: DOUBLE
20384: EQUAL
20385: IFTRUE 20389
20387: GO 20400
20389: POP
// bc_type := b_ext_computer ; 22 :
20390: LD_ADDR_OWVAR 42
20394: PUSH
20395: LD_INT 24
20397: ST_TO_ADDR
20398: GO 20648
20400: LD_INT 22
20402: DOUBLE
20403: EQUAL
20404: IFTRUE 20408
20406: GO 20419
20408: POP
// bc_type := b_ext_track ; 23 :
20409: LD_ADDR_OWVAR 42
20413: PUSH
20414: LD_INT 16
20416: ST_TO_ADDR
20417: GO 20648
20419: LD_INT 23
20421: DOUBLE
20422: EQUAL
20423: IFTRUE 20427
20425: GO 20438
20427: POP
// bc_type := b_ext_laser ; 24 :
20428: LD_ADDR_OWVAR 42
20432: PUSH
20433: LD_INT 25
20435: ST_TO_ADDR
20436: GO 20648
20438: LD_INT 24
20440: DOUBLE
20441: EQUAL
20442: IFTRUE 20446
20444: GO 20457
20446: POP
// bc_type := b_control_tower ; 25 :
20447: LD_ADDR_OWVAR 42
20451: PUSH
20452: LD_INT 36
20454: ST_TO_ADDR
20455: GO 20648
20457: LD_INT 25
20459: DOUBLE
20460: EQUAL
20461: IFTRUE 20465
20463: GO 20476
20465: POP
// bc_type := b_breastwork ; 26 :
20466: LD_ADDR_OWVAR 42
20470: PUSH
20471: LD_INT 31
20473: ST_TO_ADDR
20474: GO 20648
20476: LD_INT 26
20478: DOUBLE
20479: EQUAL
20480: IFTRUE 20484
20482: GO 20495
20484: POP
// bc_type := b_bunker ; 27 :
20485: LD_ADDR_OWVAR 42
20489: PUSH
20490: LD_INT 32
20492: ST_TO_ADDR
20493: GO 20648
20495: LD_INT 27
20497: DOUBLE
20498: EQUAL
20499: IFTRUE 20503
20501: GO 20514
20503: POP
// bc_type := b_turret ; 28 :
20504: LD_ADDR_OWVAR 42
20508: PUSH
20509: LD_INT 33
20511: ST_TO_ADDR
20512: GO 20648
20514: LD_INT 28
20516: DOUBLE
20517: EQUAL
20518: IFTRUE 20522
20520: GO 20533
20522: POP
// bc_type := b_armoury ; 29 :
20523: LD_ADDR_OWVAR 42
20527: PUSH
20528: LD_INT 4
20530: ST_TO_ADDR
20531: GO 20648
20533: LD_INT 29
20535: DOUBLE
20536: EQUAL
20537: IFTRUE 20541
20539: GO 20552
20541: POP
// bc_type := b_barracks ; 30 :
20542: LD_ADDR_OWVAR 42
20546: PUSH
20547: LD_INT 5
20549: ST_TO_ADDR
20550: GO 20648
20552: LD_INT 30
20554: DOUBLE
20555: EQUAL
20556: IFTRUE 20560
20558: GO 20571
20560: POP
// bc_type := b_solar_power ; 31 :
20561: LD_ADDR_OWVAR 42
20565: PUSH
20566: LD_INT 27
20568: ST_TO_ADDR
20569: GO 20648
20571: LD_INT 31
20573: DOUBLE
20574: EQUAL
20575: IFTRUE 20579
20577: GO 20590
20579: POP
// bc_type := b_oil_power ; 32 :
20580: LD_ADDR_OWVAR 42
20584: PUSH
20585: LD_INT 26
20587: ST_TO_ADDR
20588: GO 20648
20590: LD_INT 32
20592: DOUBLE
20593: EQUAL
20594: IFTRUE 20598
20596: GO 20609
20598: POP
// bc_type := b_siberite_power ; 33 :
20599: LD_ADDR_OWVAR 42
20603: PUSH
20604: LD_INT 28
20606: ST_TO_ADDR
20607: GO 20648
20609: LD_INT 33
20611: DOUBLE
20612: EQUAL
20613: IFTRUE 20617
20615: GO 20628
20617: POP
// bc_type := b_oil_mine ; 34 :
20618: LD_ADDR_OWVAR 42
20622: PUSH
20623: LD_INT 29
20625: ST_TO_ADDR
20626: GO 20648
20628: LD_INT 34
20630: DOUBLE
20631: EQUAL
20632: IFTRUE 20636
20634: GO 20647
20636: POP
// bc_type := b_siberite_mine ; end ;
20637: LD_ADDR_OWVAR 42
20641: PUSH
20642: LD_INT 30
20644: ST_TO_ADDR
20645: GO 20648
20647: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20648: LD_ADDR_VAR 0 8
20652: PUSH
20653: LD_VAR 0 5
20657: PPUSH
20658: LD_VAR 0 6
20662: PPUSH
20663: LD_VAR 0 3
20667: PPUSH
20668: CALL_OW 47
20672: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20673: LD_OWVAR 42
20677: PUSH
20678: LD_INT 32
20680: PUSH
20681: LD_INT 33
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: IN
20688: IFFALSE 20704
// PlaceWeaponTurret ( b , weapon ) ;
20690: LD_VAR 0 8
20694: PPUSH
20695: LD_VAR 0 4
20699: PPUSH
20700: CALL_OW 431
// end ;
20704: LD_VAR 0 7
20708: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20709: LD_INT 0
20711: PPUSH
20712: PPUSH
20713: PPUSH
20714: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20715: LD_ADDR_VAR 0 4
20719: PUSH
20720: LD_INT 22
20722: PUSH
20723: LD_OWVAR 2
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 2
20734: PUSH
20735: LD_INT 30
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 30
20747: PUSH
20748: LD_INT 1
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: LIST
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PPUSH
20764: CALL_OW 69
20768: ST_TO_ADDR
// if not tmp then
20769: LD_VAR 0 4
20773: NOT
20774: IFFALSE 20778
// exit ;
20776: GO 20837
// for i in tmp do
20778: LD_ADDR_VAR 0 2
20782: PUSH
20783: LD_VAR 0 4
20787: PUSH
20788: FOR_IN
20789: IFFALSE 20835
// for j = 1 to 3 do
20791: LD_ADDR_VAR 0 3
20795: PUSH
20796: DOUBLE
20797: LD_INT 1
20799: DEC
20800: ST_TO_ADDR
20801: LD_INT 3
20803: PUSH
20804: FOR_TO
20805: IFFALSE 20831
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20807: LD_VAR 0 2
20811: PPUSH
20812: CALL_OW 274
20816: PPUSH
20817: LD_VAR 0 3
20821: PPUSH
20822: LD_INT 99999
20824: PPUSH
20825: CALL_OW 277
20829: GO 20804
20831: POP
20832: POP
20833: GO 20788
20835: POP
20836: POP
// end ;
20837: LD_VAR 0 1
20841: RET
// export function hHackSetLevel10 ; var i , j ; begin
20842: LD_INT 0
20844: PPUSH
20845: PPUSH
20846: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20847: LD_ADDR_VAR 0 2
20851: PUSH
20852: LD_INT 21
20854: PUSH
20855: LD_INT 1
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PPUSH
20862: CALL_OW 69
20866: PUSH
20867: FOR_IN
20868: IFFALSE 20920
// if IsSelected ( i ) then
20870: LD_VAR 0 2
20874: PPUSH
20875: CALL_OW 306
20879: IFFALSE 20918
// begin for j := 1 to 4 do
20881: LD_ADDR_VAR 0 3
20885: PUSH
20886: DOUBLE
20887: LD_INT 1
20889: DEC
20890: ST_TO_ADDR
20891: LD_INT 4
20893: PUSH
20894: FOR_TO
20895: IFFALSE 20916
// SetSkill ( i , j , 10 ) ;
20897: LD_VAR 0 2
20901: PPUSH
20902: LD_VAR 0 3
20906: PPUSH
20907: LD_INT 10
20909: PPUSH
20910: CALL_OW 237
20914: GO 20894
20916: POP
20917: POP
// end ;
20918: GO 20867
20920: POP
20921: POP
// end ;
20922: LD_VAR 0 1
20926: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20927: LD_INT 0
20929: PPUSH
20930: PPUSH
20931: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20932: LD_ADDR_VAR 0 2
20936: PUSH
20937: LD_INT 22
20939: PUSH
20940: LD_OWVAR 2
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 21
20951: PUSH
20952: LD_INT 1
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PPUSH
20963: CALL_OW 69
20967: PUSH
20968: FOR_IN
20969: IFFALSE 21010
// begin for j := 1 to 4 do
20971: LD_ADDR_VAR 0 3
20975: PUSH
20976: DOUBLE
20977: LD_INT 1
20979: DEC
20980: ST_TO_ADDR
20981: LD_INT 4
20983: PUSH
20984: FOR_TO
20985: IFFALSE 21006
// SetSkill ( i , j , 10 ) ;
20987: LD_VAR 0 2
20991: PPUSH
20992: LD_VAR 0 3
20996: PPUSH
20997: LD_INT 10
20999: PPUSH
21000: CALL_OW 237
21004: GO 20984
21006: POP
21007: POP
// end ;
21008: GO 20968
21010: POP
21011: POP
// end ;
21012: LD_VAR 0 1
21016: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21017: LD_INT 0
21019: PPUSH
// uc_side := your_side ;
21020: LD_ADDR_OWVAR 20
21024: PUSH
21025: LD_OWVAR 2
21029: ST_TO_ADDR
// uc_nation := nation ;
21030: LD_ADDR_OWVAR 21
21034: PUSH
21035: LD_VAR 0 1
21039: ST_TO_ADDR
// InitHc ;
21040: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21044: LD_INT 0
21046: PPUSH
21047: LD_VAR 0 2
21051: PPUSH
21052: LD_VAR 0 3
21056: PPUSH
21057: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21061: LD_VAR 0 4
21065: PPUSH
21066: LD_VAR 0 5
21070: PPUSH
21071: CALL_OW 428
21075: PUSH
21076: LD_INT 0
21078: EQUAL
21079: IFFALSE 21103
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21081: CALL_OW 44
21085: PPUSH
21086: LD_VAR 0 4
21090: PPUSH
21091: LD_VAR 0 5
21095: PPUSH
21096: LD_INT 1
21098: PPUSH
21099: CALL_OW 48
// end ;
21103: LD_VAR 0 6
21107: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21108: LD_INT 0
21110: PPUSH
21111: PPUSH
// uc_side := your_side ;
21112: LD_ADDR_OWVAR 20
21116: PUSH
21117: LD_OWVAR 2
21121: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21122: LD_VAR 0 1
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: LD_INT 2
21132: PUSH
21133: LD_INT 3
21135: PUSH
21136: LD_INT 4
21138: PUSH
21139: LD_INT 5
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: IN
21149: IFFALSE 21161
// uc_nation := nation_american else
21151: LD_ADDR_OWVAR 21
21155: PUSH
21156: LD_INT 1
21158: ST_TO_ADDR
21159: GO 21204
// if chassis in [ 11 , 12 , 13 , 14 ] then
21161: LD_VAR 0 1
21165: PUSH
21166: LD_INT 11
21168: PUSH
21169: LD_INT 12
21171: PUSH
21172: LD_INT 13
21174: PUSH
21175: LD_INT 14
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: IN
21184: IFFALSE 21196
// uc_nation := nation_arabian else
21186: LD_ADDR_OWVAR 21
21190: PUSH
21191: LD_INT 2
21193: ST_TO_ADDR
21194: GO 21204
// uc_nation := nation_russian ;
21196: LD_ADDR_OWVAR 21
21200: PUSH
21201: LD_INT 3
21203: ST_TO_ADDR
// vc_chassis := chassis ;
21204: LD_ADDR_OWVAR 37
21208: PUSH
21209: LD_VAR 0 1
21213: ST_TO_ADDR
// vc_engine := engine ;
21214: LD_ADDR_OWVAR 39
21218: PUSH
21219: LD_VAR 0 2
21223: ST_TO_ADDR
// vc_control := control ;
21224: LD_ADDR_OWVAR 38
21228: PUSH
21229: LD_VAR 0 3
21233: ST_TO_ADDR
// vc_weapon := weapon ;
21234: LD_ADDR_OWVAR 40
21238: PUSH
21239: LD_VAR 0 4
21243: ST_TO_ADDR
// un := CreateVehicle ;
21244: LD_ADDR_VAR 0 8
21248: PUSH
21249: CALL_OW 45
21253: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21254: LD_VAR 0 8
21258: PPUSH
21259: LD_INT 0
21261: PPUSH
21262: LD_INT 5
21264: PPUSH
21265: CALL_OW 12
21269: PPUSH
21270: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21274: LD_VAR 0 8
21278: PPUSH
21279: LD_VAR 0 5
21283: PPUSH
21284: LD_VAR 0 6
21288: PPUSH
21289: LD_INT 1
21291: PPUSH
21292: CALL_OW 48
// end ;
21296: LD_VAR 0 7
21300: RET
// export hInvincible ; every 1 do
21301: GO 21303
21303: DISABLE
// hInvincible := [ ] ;
21304: LD_ADDR_EXP 101
21308: PUSH
21309: EMPTY
21310: ST_TO_ADDR
21311: END
// every 10 do var i ;
21312: GO 21314
21314: DISABLE
21315: LD_INT 0
21317: PPUSH
// begin enable ;
21318: ENABLE
// if not hInvincible then
21319: LD_EXP 101
21323: NOT
21324: IFFALSE 21328
// exit ;
21326: GO 21372
// for i in hInvincible do
21328: LD_ADDR_VAR 0 1
21332: PUSH
21333: LD_EXP 101
21337: PUSH
21338: FOR_IN
21339: IFFALSE 21370
// if GetLives ( i ) < 1000 then
21341: LD_VAR 0 1
21345: PPUSH
21346: CALL_OW 256
21350: PUSH
21351: LD_INT 1000
21353: LESS
21354: IFFALSE 21368
// SetLives ( i , 1000 ) ;
21356: LD_VAR 0 1
21360: PPUSH
21361: LD_INT 1000
21363: PPUSH
21364: CALL_OW 234
21368: GO 21338
21370: POP
21371: POP
// end ;
21372: PPOPN 1
21374: END
// export function hHackInvincible ; var i ; begin
21375: LD_INT 0
21377: PPUSH
21378: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21379: LD_ADDR_VAR 0 2
21383: PUSH
21384: LD_INT 2
21386: PUSH
21387: LD_INT 21
21389: PUSH
21390: LD_INT 1
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 21
21399: PUSH
21400: LD_INT 2
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: LIST
21411: PPUSH
21412: CALL_OW 69
21416: PUSH
21417: FOR_IN
21418: IFFALSE 21479
// if IsSelected ( i ) then
21420: LD_VAR 0 2
21424: PPUSH
21425: CALL_OW 306
21429: IFFALSE 21477
// begin if i in hInvincible then
21431: LD_VAR 0 2
21435: PUSH
21436: LD_EXP 101
21440: IN
21441: IFFALSE 21461
// hInvincible := hInvincible diff i else
21443: LD_ADDR_EXP 101
21447: PUSH
21448: LD_EXP 101
21452: PUSH
21453: LD_VAR 0 2
21457: DIFF
21458: ST_TO_ADDR
21459: GO 21477
// hInvincible := hInvincible union i ;
21461: LD_ADDR_EXP 101
21465: PUSH
21466: LD_EXP 101
21470: PUSH
21471: LD_VAR 0 2
21475: UNION
21476: ST_TO_ADDR
// end ;
21477: GO 21417
21479: POP
21480: POP
// end ;
21481: LD_VAR 0 1
21485: RET
// export function hHackInvisible ; var i , j ; begin
21486: LD_INT 0
21488: PPUSH
21489: PPUSH
21490: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21491: LD_ADDR_VAR 0 2
21495: PUSH
21496: LD_INT 21
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PPUSH
21506: CALL_OW 69
21510: PUSH
21511: FOR_IN
21512: IFFALSE 21536
// if IsSelected ( i ) then
21514: LD_VAR 0 2
21518: PPUSH
21519: CALL_OW 306
21523: IFFALSE 21534
// ComForceInvisible ( i ) ;
21525: LD_VAR 0 2
21529: PPUSH
21530: CALL_OW 496
21534: GO 21511
21536: POP
21537: POP
// end ;
21538: LD_VAR 0 1
21542: RET
// export function hHackChangeYourSide ; begin
21543: LD_INT 0
21545: PPUSH
// if your_side = 8 then
21546: LD_OWVAR 2
21550: PUSH
21551: LD_INT 8
21553: EQUAL
21554: IFFALSE 21566
// your_side := 0 else
21556: LD_ADDR_OWVAR 2
21560: PUSH
21561: LD_INT 0
21563: ST_TO_ADDR
21564: GO 21580
// your_side := your_side + 1 ;
21566: LD_ADDR_OWVAR 2
21570: PUSH
21571: LD_OWVAR 2
21575: PUSH
21576: LD_INT 1
21578: PLUS
21579: ST_TO_ADDR
// end ;
21580: LD_VAR 0 1
21584: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21585: LD_INT 0
21587: PPUSH
21588: PPUSH
21589: PPUSH
// for i in all_units do
21590: LD_ADDR_VAR 0 2
21594: PUSH
21595: LD_OWVAR 3
21599: PUSH
21600: FOR_IN
21601: IFFALSE 21679
// if IsSelected ( i ) then
21603: LD_VAR 0 2
21607: PPUSH
21608: CALL_OW 306
21612: IFFALSE 21677
// begin j := GetSide ( i ) ;
21614: LD_ADDR_VAR 0 3
21618: PUSH
21619: LD_VAR 0 2
21623: PPUSH
21624: CALL_OW 255
21628: ST_TO_ADDR
// if j = 8 then
21629: LD_VAR 0 3
21633: PUSH
21634: LD_INT 8
21636: EQUAL
21637: IFFALSE 21649
// j := 0 else
21639: LD_ADDR_VAR 0 3
21643: PUSH
21644: LD_INT 0
21646: ST_TO_ADDR
21647: GO 21663
// j := j + 1 ;
21649: LD_ADDR_VAR 0 3
21653: PUSH
21654: LD_VAR 0 3
21658: PUSH
21659: LD_INT 1
21661: PLUS
21662: ST_TO_ADDR
// SetSide ( i , j ) ;
21663: LD_VAR 0 2
21667: PPUSH
21668: LD_VAR 0 3
21672: PPUSH
21673: CALL_OW 235
// end ;
21677: GO 21600
21679: POP
21680: POP
// end ;
21681: LD_VAR 0 1
21685: RET
// export function hHackFog ; begin
21686: LD_INT 0
21688: PPUSH
// FogOff ( true ) ;
21689: LD_INT 1
21691: PPUSH
21692: CALL_OW 344
// end ;
21696: LD_VAR 0 1
21700: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21701: LD_INT 0
21703: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21704: LD_VAR 0 1
21708: PPUSH
21709: LD_VAR 0 2
21713: PPUSH
21714: LD_VAR 0 3
21718: PPUSH
21719: LD_INT 1
21721: PPUSH
21722: LD_INT 1
21724: PPUSH
21725: CALL_OW 483
// CenterOnXY ( x , y ) ;
21729: LD_VAR 0 2
21733: PPUSH
21734: LD_VAR 0 3
21738: PPUSH
21739: CALL_OW 84
// end ; end_of_file
21743: LD_VAR 0 4
21747: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21748: LD_INT 0
21750: PPUSH
21751: PPUSH
21752: PPUSH
21753: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21754: LD_VAR 0 1
21758: PPUSH
21759: CALL_OW 264
21763: PUSH
21764: LD_EXP 28
21768: EQUAL
21769: IFFALSE 21841
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21771: LD_INT 68
21773: PPUSH
21774: LD_VAR 0 1
21778: PPUSH
21779: CALL_OW 255
21783: PPUSH
21784: CALL_OW 321
21788: PUSH
21789: LD_INT 2
21791: EQUAL
21792: IFFALSE 21804
// eff := 70 else
21794: LD_ADDR_VAR 0 4
21798: PUSH
21799: LD_INT 70
21801: ST_TO_ADDR
21802: GO 21812
// eff := 30 ;
21804: LD_ADDR_VAR 0 4
21808: PUSH
21809: LD_INT 30
21811: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21812: LD_VAR 0 1
21816: PPUSH
21817: CALL_OW 250
21821: PPUSH
21822: LD_VAR 0 1
21826: PPUSH
21827: CALL_OW 251
21831: PPUSH
21832: LD_VAR 0 4
21836: PPUSH
21837: CALL_OW 495
// end ; end ;
21841: LD_VAR 0 2
21845: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21846: LD_INT 0
21848: PPUSH
// end ;
21849: LD_VAR 0 4
21853: RET
// export function SOS_Command ( cmd ) ; begin
21854: LD_INT 0
21856: PPUSH
// end ;
21857: LD_VAR 0 2
21861: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21862: LD_INT 0
21864: PPUSH
// end ;
21865: LD_VAR 0 6
21869: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21870: LD_INT 0
21872: PPUSH
21873: PPUSH
// if not vehicle or not factory then
21874: LD_VAR 0 1
21878: NOT
21879: PUSH
21880: LD_VAR 0 2
21884: NOT
21885: OR
21886: IFFALSE 21890
// exit ;
21888: GO 22121
// if factoryWaypoints >= factory then
21890: LD_EXP 102
21894: PUSH
21895: LD_VAR 0 2
21899: GREATEREQUAL
21900: IFFALSE 22121
// if factoryWaypoints [ factory ] then
21902: LD_EXP 102
21906: PUSH
21907: LD_VAR 0 2
21911: ARRAY
21912: IFFALSE 22121
// begin if GetControl ( vehicle ) = control_manual then
21914: LD_VAR 0 1
21918: PPUSH
21919: CALL_OW 263
21923: PUSH
21924: LD_INT 1
21926: EQUAL
21927: IFFALSE 22008
// begin driver := IsDrivenBy ( vehicle ) ;
21929: LD_ADDR_VAR 0 4
21933: PUSH
21934: LD_VAR 0 1
21938: PPUSH
21939: CALL_OW 311
21943: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21944: LD_VAR 0 4
21948: PPUSH
21949: LD_EXP 102
21953: PUSH
21954: LD_VAR 0 2
21958: ARRAY
21959: PUSH
21960: LD_INT 3
21962: ARRAY
21963: PPUSH
21964: LD_EXP 102
21968: PUSH
21969: LD_VAR 0 2
21973: ARRAY
21974: PUSH
21975: LD_INT 4
21977: ARRAY
21978: PPUSH
21979: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21983: LD_VAR 0 4
21987: PPUSH
21988: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21992: LD_VAR 0 4
21996: PPUSH
21997: LD_VAR 0 2
22001: PPUSH
22002: CALL_OW 180
// end else
22006: GO 22121
// if GetControl ( vehicle ) = control_remote then
22008: LD_VAR 0 1
22012: PPUSH
22013: CALL_OW 263
22017: PUSH
22018: LD_INT 2
22020: EQUAL
22021: IFFALSE 22082
// begin wait ( 0 0$2 ) ;
22023: LD_INT 70
22025: PPUSH
22026: CALL_OW 67
// if Connect ( vehicle ) then
22030: LD_VAR 0 1
22034: PPUSH
22035: CALL 34345 0 1
22039: IFFALSE 22080
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22041: LD_VAR 0 1
22045: PPUSH
22046: LD_EXP 102
22050: PUSH
22051: LD_VAR 0 2
22055: ARRAY
22056: PUSH
22057: LD_INT 3
22059: ARRAY
22060: PPUSH
22061: LD_EXP 102
22065: PUSH
22066: LD_VAR 0 2
22070: ARRAY
22071: PUSH
22072: LD_INT 4
22074: ARRAY
22075: PPUSH
22076: CALL_OW 171
// end else
22080: GO 22121
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22082: LD_VAR 0 1
22086: PPUSH
22087: LD_EXP 102
22091: PUSH
22092: LD_VAR 0 2
22096: ARRAY
22097: PUSH
22098: LD_INT 3
22100: ARRAY
22101: PPUSH
22102: LD_EXP 102
22106: PUSH
22107: LD_VAR 0 2
22111: ARRAY
22112: PUSH
22113: LD_INT 4
22115: ARRAY
22116: PPUSH
22117: CALL_OW 171
// end ; end ;
22121: LD_VAR 0 3
22125: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22126: LD_INT 0
22128: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22129: LD_VAR 0 1
22133: PUSH
22134: LD_INT 250
22136: EQUAL
22137: PUSH
22138: LD_VAR 0 2
22142: PPUSH
22143: CALL_OW 264
22147: PUSH
22148: LD_EXP 31
22152: EQUAL
22153: AND
22154: IFFALSE 22175
// MinerPlaceMine ( unit , x , y ) ;
22156: LD_VAR 0 2
22160: PPUSH
22161: LD_VAR 0 4
22165: PPUSH
22166: LD_VAR 0 5
22170: PPUSH
22171: CALL 24903 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22175: LD_VAR 0 1
22179: PUSH
22180: LD_INT 251
22182: EQUAL
22183: PUSH
22184: LD_VAR 0 2
22188: PPUSH
22189: CALL_OW 264
22193: PUSH
22194: LD_EXP 31
22198: EQUAL
22199: AND
22200: IFFALSE 22221
// MinerDetonateMine ( unit , x , y ) ;
22202: LD_VAR 0 2
22206: PPUSH
22207: LD_VAR 0 4
22211: PPUSH
22212: LD_VAR 0 5
22216: PPUSH
22217: CALL 25180 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22221: LD_VAR 0 1
22225: PUSH
22226: LD_INT 252
22228: EQUAL
22229: PUSH
22230: LD_VAR 0 2
22234: PPUSH
22235: CALL_OW 264
22239: PUSH
22240: LD_EXP 31
22244: EQUAL
22245: AND
22246: IFFALSE 22267
// MinerCreateMinefield ( unit , x , y ) ;
22248: LD_VAR 0 2
22252: PPUSH
22253: LD_VAR 0 4
22257: PPUSH
22258: LD_VAR 0 5
22262: PPUSH
22263: CALL 25597 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22267: LD_VAR 0 1
22271: PUSH
22272: LD_INT 253
22274: EQUAL
22275: PUSH
22276: LD_VAR 0 2
22280: PPUSH
22281: CALL_OW 257
22285: PUSH
22286: LD_INT 5
22288: EQUAL
22289: AND
22290: IFFALSE 22311
// ComBinocular ( unit , x , y ) ;
22292: LD_VAR 0 2
22296: PPUSH
22297: LD_VAR 0 4
22301: PPUSH
22302: LD_VAR 0 5
22306: PPUSH
22307: CALL 25968 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22311: LD_VAR 0 1
22315: PUSH
22316: LD_INT 254
22318: EQUAL
22319: PUSH
22320: LD_VAR 0 2
22324: PPUSH
22325: CALL_OW 264
22329: PUSH
22330: LD_EXP 26
22334: EQUAL
22335: AND
22336: PUSH
22337: LD_VAR 0 3
22341: PPUSH
22342: CALL_OW 263
22346: PUSH
22347: LD_INT 3
22349: EQUAL
22350: AND
22351: IFFALSE 22367
// HackDestroyVehicle ( unit , selectedUnit ) ;
22353: LD_VAR 0 2
22357: PPUSH
22358: LD_VAR 0 3
22362: PPUSH
22363: CALL 24263 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22367: LD_VAR 0 1
22371: PUSH
22372: LD_INT 255
22374: EQUAL
22375: PUSH
22376: LD_VAR 0 2
22380: PPUSH
22381: CALL_OW 264
22385: PUSH
22386: LD_INT 14
22388: PUSH
22389: LD_INT 53
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: IN
22396: AND
22397: PUSH
22398: LD_VAR 0 4
22402: PPUSH
22403: LD_VAR 0 5
22407: PPUSH
22408: CALL_OW 488
22412: AND
22413: IFFALSE 22437
// CutTreeXYR ( unit , x , y , 12 ) ;
22415: LD_VAR 0 2
22419: PPUSH
22420: LD_VAR 0 4
22424: PPUSH
22425: LD_VAR 0 5
22429: PPUSH
22430: LD_INT 12
22432: PPUSH
22433: CALL 22829 0 4
// if cmd = 256 then
22437: LD_VAR 0 1
22441: PUSH
22442: LD_INT 256
22444: EQUAL
22445: IFFALSE 22466
// SetFactoryWaypoint ( unit , x , y ) ;
22447: LD_VAR 0 2
22451: PPUSH
22452: LD_VAR 0 4
22456: PPUSH
22457: LD_VAR 0 5
22461: PPUSH
22462: CALL 22471 0 3
// end ;
22466: LD_VAR 0 6
22470: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22471: LD_INT 0
22473: PPUSH
22474: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22475: LD_VAR 0 1
22479: NOT
22480: PUSH
22481: LD_VAR 0 2
22485: PPUSH
22486: LD_VAR 0 3
22490: PPUSH
22491: CALL_OW 488
22495: NOT
22496: OR
22497: PUSH
22498: LD_VAR 0 1
22502: PPUSH
22503: CALL_OW 266
22507: PUSH
22508: LD_INT 3
22510: NONEQUAL
22511: PUSH
22512: LD_VAR 0 1
22516: PPUSH
22517: CALL_OW 247
22521: PUSH
22522: LD_INT 1
22524: EQUAL
22525: NOT
22526: AND
22527: OR
22528: IFFALSE 22532
// exit ;
22530: GO 22681
// if GetType ( factory ) = unit_human then
22532: LD_VAR 0 1
22536: PPUSH
22537: CALL_OW 247
22541: PUSH
22542: LD_INT 1
22544: EQUAL
22545: IFFALSE 22562
// factory := IsInUnit ( factory ) ;
22547: LD_ADDR_VAR 0 1
22551: PUSH
22552: LD_VAR 0 1
22556: PPUSH
22557: CALL_OW 310
22561: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22562: LD_VAR 0 1
22566: PPUSH
22567: CALL_OW 266
22571: PUSH
22572: LD_INT 3
22574: NONEQUAL
22575: IFFALSE 22579
// exit ;
22577: GO 22681
// if HexInfo ( x , y ) = factory then
22579: LD_VAR 0 2
22583: PPUSH
22584: LD_VAR 0 3
22588: PPUSH
22589: CALL_OW 428
22593: PUSH
22594: LD_VAR 0 1
22598: EQUAL
22599: IFFALSE 22626
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22601: LD_ADDR_EXP 102
22605: PUSH
22606: LD_EXP 102
22610: PPUSH
22611: LD_VAR 0 1
22615: PPUSH
22616: LD_INT 0
22618: PPUSH
22619: CALL_OW 1
22623: ST_TO_ADDR
22624: GO 22677
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22626: LD_ADDR_EXP 102
22630: PUSH
22631: LD_EXP 102
22635: PPUSH
22636: LD_VAR 0 1
22640: PPUSH
22641: LD_VAR 0 1
22645: PPUSH
22646: CALL_OW 255
22650: PUSH
22651: LD_VAR 0 1
22655: PUSH
22656: LD_VAR 0 2
22660: PUSH
22661: LD_VAR 0 3
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: PPUSH
22672: CALL_OW 1
22676: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22677: CALL 22686 0 0
// end ;
22681: LD_VAR 0 4
22685: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
22686: LD_INT 0
22688: PPUSH
22689: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22690: LD_STRING resetFactoryWaypoint();
22692: PPUSH
22693: CALL_OW 559
// if factoryWaypoints then
22697: LD_EXP 102
22701: IFFALSE 22824
// begin for i := 1 to factoryWaypoints do
22703: LD_ADDR_VAR 0 2
22707: PUSH
22708: DOUBLE
22709: LD_INT 1
22711: DEC
22712: ST_TO_ADDR
22713: LD_EXP 102
22717: PUSH
22718: FOR_TO
22719: IFFALSE 22822
// if factoryWaypoints [ i ] then
22721: LD_EXP 102
22725: PUSH
22726: LD_VAR 0 2
22730: ARRAY
22731: IFFALSE 22820
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
22733: LD_STRING setFactoryWaypointXY(
22735: PUSH
22736: LD_EXP 102
22740: PUSH
22741: LD_VAR 0 2
22745: ARRAY
22746: PUSH
22747: LD_INT 1
22749: ARRAY
22750: STR
22751: PUSH
22752: LD_STRING ,
22754: STR
22755: PUSH
22756: LD_EXP 102
22760: PUSH
22761: LD_VAR 0 2
22765: ARRAY
22766: PUSH
22767: LD_INT 2
22769: ARRAY
22770: STR
22771: PUSH
22772: LD_STRING ,
22774: STR
22775: PUSH
22776: LD_EXP 102
22780: PUSH
22781: LD_VAR 0 2
22785: ARRAY
22786: PUSH
22787: LD_INT 3
22789: ARRAY
22790: STR
22791: PUSH
22792: LD_STRING ,
22794: STR
22795: PUSH
22796: LD_EXP 102
22800: PUSH
22801: LD_VAR 0 2
22805: ARRAY
22806: PUSH
22807: LD_INT 4
22809: ARRAY
22810: STR
22811: PUSH
22812: LD_STRING )
22814: STR
22815: PPUSH
22816: CALL_OW 559
22820: GO 22718
22822: POP
22823: POP
// end ; end ;
22824: LD_VAR 0 1
22828: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22829: LD_INT 0
22831: PPUSH
22832: PPUSH
22833: PPUSH
22834: PPUSH
22835: PPUSH
22836: PPUSH
22837: PPUSH
22838: PPUSH
22839: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22840: LD_VAR 0 1
22844: NOT
22845: PUSH
22846: LD_VAR 0 2
22850: PPUSH
22851: LD_VAR 0 3
22855: PPUSH
22856: CALL_OW 488
22860: NOT
22861: OR
22862: PUSH
22863: LD_VAR 0 4
22867: NOT
22868: OR
22869: IFFALSE 22873
// exit ;
22871: GO 23213
// list := [ ] ;
22873: LD_ADDR_VAR 0 13
22877: PUSH
22878: EMPTY
22879: ST_TO_ADDR
// if x - r < 0 then
22880: LD_VAR 0 2
22884: PUSH
22885: LD_VAR 0 4
22889: MINUS
22890: PUSH
22891: LD_INT 0
22893: LESS
22894: IFFALSE 22906
// min_x := 0 else
22896: LD_ADDR_VAR 0 7
22900: PUSH
22901: LD_INT 0
22903: ST_TO_ADDR
22904: GO 22922
// min_x := x - r ;
22906: LD_ADDR_VAR 0 7
22910: PUSH
22911: LD_VAR 0 2
22915: PUSH
22916: LD_VAR 0 4
22920: MINUS
22921: ST_TO_ADDR
// if y - r < 0 then
22922: LD_VAR 0 3
22926: PUSH
22927: LD_VAR 0 4
22931: MINUS
22932: PUSH
22933: LD_INT 0
22935: LESS
22936: IFFALSE 22948
// min_y := 0 else
22938: LD_ADDR_VAR 0 8
22942: PUSH
22943: LD_INT 0
22945: ST_TO_ADDR
22946: GO 22964
// min_y := y - r ;
22948: LD_ADDR_VAR 0 8
22952: PUSH
22953: LD_VAR 0 3
22957: PUSH
22958: LD_VAR 0 4
22962: MINUS
22963: ST_TO_ADDR
// max_x := x + r ;
22964: LD_ADDR_VAR 0 9
22968: PUSH
22969: LD_VAR 0 2
22973: PUSH
22974: LD_VAR 0 4
22978: PLUS
22979: ST_TO_ADDR
// max_y := y + r ;
22980: LD_ADDR_VAR 0 10
22984: PUSH
22985: LD_VAR 0 3
22989: PUSH
22990: LD_VAR 0 4
22994: PLUS
22995: ST_TO_ADDR
// for _x = min_x to max_x do
22996: LD_ADDR_VAR 0 11
23000: PUSH
23001: DOUBLE
23002: LD_VAR 0 7
23006: DEC
23007: ST_TO_ADDR
23008: LD_VAR 0 9
23012: PUSH
23013: FOR_TO
23014: IFFALSE 23131
// for _y = min_y to max_y do
23016: LD_ADDR_VAR 0 12
23020: PUSH
23021: DOUBLE
23022: LD_VAR 0 8
23026: DEC
23027: ST_TO_ADDR
23028: LD_VAR 0 10
23032: PUSH
23033: FOR_TO
23034: IFFALSE 23127
// begin if not ValidHex ( _x , _y ) then
23036: LD_VAR 0 11
23040: PPUSH
23041: LD_VAR 0 12
23045: PPUSH
23046: CALL_OW 488
23050: NOT
23051: IFFALSE 23055
// continue ;
23053: GO 23033
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23055: LD_VAR 0 11
23059: PPUSH
23060: LD_VAR 0 12
23064: PPUSH
23065: CALL_OW 351
23069: PUSH
23070: LD_VAR 0 11
23074: PPUSH
23075: LD_VAR 0 12
23079: PPUSH
23080: CALL_OW 554
23084: AND
23085: IFFALSE 23125
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23087: LD_ADDR_VAR 0 13
23091: PUSH
23092: LD_VAR 0 13
23096: PPUSH
23097: LD_VAR 0 13
23101: PUSH
23102: LD_INT 1
23104: PLUS
23105: PPUSH
23106: LD_VAR 0 11
23110: PUSH
23111: LD_VAR 0 12
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PPUSH
23120: CALL_OW 2
23124: ST_TO_ADDR
// end ;
23125: GO 23033
23127: POP
23128: POP
23129: GO 23013
23131: POP
23132: POP
// if not list then
23133: LD_VAR 0 13
23137: NOT
23138: IFFALSE 23142
// exit ;
23140: GO 23213
// for i in list do
23142: LD_ADDR_VAR 0 6
23146: PUSH
23147: LD_VAR 0 13
23151: PUSH
23152: FOR_IN
23153: IFFALSE 23211
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23155: LD_VAR 0 1
23159: PPUSH
23160: LD_STRING M
23162: PUSH
23163: LD_VAR 0 6
23167: PUSH
23168: LD_INT 1
23170: ARRAY
23171: PUSH
23172: LD_VAR 0 6
23176: PUSH
23177: LD_INT 2
23179: ARRAY
23180: PUSH
23181: LD_INT 0
23183: PUSH
23184: LD_INT 0
23186: PUSH
23187: LD_INT 0
23189: PUSH
23190: LD_INT 0
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: PUSH
23202: EMPTY
23203: LIST
23204: PPUSH
23205: CALL_OW 447
23209: GO 23152
23211: POP
23212: POP
// end ;
23213: LD_VAR 0 5
23217: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23218: LD_EXP 103
23222: NOT
23223: IFFALSE 23273
23225: GO 23227
23227: DISABLE
// begin initHack := true ;
23228: LD_ADDR_EXP 103
23232: PUSH
23233: LD_INT 1
23235: ST_TO_ADDR
// hackTanks := [ ] ;
23236: LD_ADDR_EXP 104
23240: PUSH
23241: EMPTY
23242: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23243: LD_ADDR_EXP 105
23247: PUSH
23248: EMPTY
23249: ST_TO_ADDR
// hackLimit := 3 ;
23250: LD_ADDR_EXP 106
23254: PUSH
23255: LD_INT 3
23257: ST_TO_ADDR
// hackDist := 12 ;
23258: LD_ADDR_EXP 107
23262: PUSH
23263: LD_INT 12
23265: ST_TO_ADDR
// hackCounter := [ ] ;
23266: LD_ADDR_EXP 108
23270: PUSH
23271: EMPTY
23272: ST_TO_ADDR
// end ;
23273: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23274: LD_EXP 103
23278: PUSH
23279: LD_INT 34
23281: PUSH
23282: LD_EXP 26
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PPUSH
23291: CALL_OW 69
23295: AND
23296: IFFALSE 23551
23298: GO 23300
23300: DISABLE
23301: LD_INT 0
23303: PPUSH
23304: PPUSH
// begin enable ;
23305: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23306: LD_ADDR_VAR 0 1
23310: PUSH
23311: LD_INT 34
23313: PUSH
23314: LD_EXP 26
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PPUSH
23323: CALL_OW 69
23327: PUSH
23328: FOR_IN
23329: IFFALSE 23549
// begin if not i in hackTanks then
23331: LD_VAR 0 1
23335: PUSH
23336: LD_EXP 104
23340: IN
23341: NOT
23342: IFFALSE 23425
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23344: LD_ADDR_EXP 104
23348: PUSH
23349: LD_EXP 104
23353: PPUSH
23354: LD_EXP 104
23358: PUSH
23359: LD_INT 1
23361: PLUS
23362: PPUSH
23363: LD_VAR 0 1
23367: PPUSH
23368: CALL_OW 1
23372: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23373: LD_ADDR_EXP 105
23377: PUSH
23378: LD_EXP 105
23382: PPUSH
23383: LD_EXP 105
23387: PUSH
23388: LD_INT 1
23390: PLUS
23391: PPUSH
23392: EMPTY
23393: PPUSH
23394: CALL_OW 1
23398: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23399: LD_ADDR_EXP 108
23403: PUSH
23404: LD_EXP 108
23408: PPUSH
23409: LD_EXP 108
23413: PUSH
23414: LD_INT 1
23416: PLUS
23417: PPUSH
23418: EMPTY
23419: PPUSH
23420: CALL_OW 1
23424: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23425: LD_VAR 0 1
23429: PPUSH
23430: CALL_OW 302
23434: NOT
23435: IFFALSE 23448
// begin HackUnlinkAll ( i ) ;
23437: LD_VAR 0 1
23441: PPUSH
23442: CALL 23554 0 1
// continue ;
23446: GO 23328
// end ; HackCheckCapturedStatus ( i ) ;
23448: LD_VAR 0 1
23452: PPUSH
23453: CALL 23997 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23457: LD_ADDR_VAR 0 2
23461: PUSH
23462: LD_INT 81
23464: PUSH
23465: LD_VAR 0 1
23469: PPUSH
23470: CALL_OW 255
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 33
23481: PUSH
23482: LD_INT 3
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 91
23491: PUSH
23492: LD_VAR 0 1
23496: PUSH
23497: LD_EXP 107
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 50
23509: PUSH
23510: EMPTY
23511: LIST
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: PPUSH
23519: CALL_OW 69
23523: ST_TO_ADDR
// if not tmp then
23524: LD_VAR 0 2
23528: NOT
23529: IFFALSE 23533
// continue ;
23531: GO 23328
// HackLink ( i , tmp ) ;
23533: LD_VAR 0 1
23537: PPUSH
23538: LD_VAR 0 2
23542: PPUSH
23543: CALL 23690 0 2
// end ;
23547: GO 23328
23549: POP
23550: POP
// end ;
23551: PPOPN 2
23553: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23554: LD_INT 0
23556: PPUSH
23557: PPUSH
23558: PPUSH
// if not hack in hackTanks then
23559: LD_VAR 0 1
23563: PUSH
23564: LD_EXP 104
23568: IN
23569: NOT
23570: IFFALSE 23574
// exit ;
23572: GO 23685
// index := GetElementIndex ( hackTanks , hack ) ;
23574: LD_ADDR_VAR 0 4
23578: PUSH
23579: LD_EXP 104
23583: PPUSH
23584: LD_VAR 0 1
23588: PPUSH
23589: CALL 31159 0 2
23593: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23594: LD_EXP 105
23598: PUSH
23599: LD_VAR 0 4
23603: ARRAY
23604: IFFALSE 23685
// begin for i in hackTanksCaptured [ index ] do
23606: LD_ADDR_VAR 0 3
23610: PUSH
23611: LD_EXP 105
23615: PUSH
23616: LD_VAR 0 4
23620: ARRAY
23621: PUSH
23622: FOR_IN
23623: IFFALSE 23649
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23625: LD_VAR 0 3
23629: PUSH
23630: LD_INT 1
23632: ARRAY
23633: PPUSH
23634: LD_VAR 0 3
23638: PUSH
23639: LD_INT 2
23641: ARRAY
23642: PPUSH
23643: CALL_OW 235
23647: GO 23622
23649: POP
23650: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23651: LD_ADDR_EXP 105
23655: PUSH
23656: LD_EXP 105
23660: PPUSH
23661: LD_VAR 0 4
23665: PPUSH
23666: EMPTY
23667: PPUSH
23668: CALL_OW 1
23672: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23673: LD_VAR 0 1
23677: PPUSH
23678: LD_INT 0
23680: PPUSH
23681: CALL_OW 505
// end ; end ;
23685: LD_VAR 0 2
23689: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23690: LD_INT 0
23692: PPUSH
23693: PPUSH
23694: PPUSH
// if not hack in hackTanks or not vehicles then
23695: LD_VAR 0 1
23699: PUSH
23700: LD_EXP 104
23704: IN
23705: NOT
23706: PUSH
23707: LD_VAR 0 2
23711: NOT
23712: OR
23713: IFFALSE 23717
// exit ;
23715: GO 23992
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23717: LD_ADDR_VAR 0 2
23721: PUSH
23722: LD_VAR 0 1
23726: PPUSH
23727: LD_VAR 0 2
23731: PPUSH
23732: LD_INT 1
23734: PPUSH
23735: LD_INT 1
23737: PPUSH
23738: CALL 31809 0 4
23742: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23743: LD_ADDR_VAR 0 5
23747: PUSH
23748: LD_EXP 104
23752: PPUSH
23753: LD_VAR 0 1
23757: PPUSH
23758: CALL 31159 0 2
23762: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23763: LD_EXP 105
23767: PUSH
23768: LD_VAR 0 5
23772: ARRAY
23773: PUSH
23774: LD_EXP 106
23778: LESS
23779: IFFALSE 23968
// begin for i := 1 to vehicles do
23781: LD_ADDR_VAR 0 4
23785: PUSH
23786: DOUBLE
23787: LD_INT 1
23789: DEC
23790: ST_TO_ADDR
23791: LD_VAR 0 2
23795: PUSH
23796: FOR_TO
23797: IFFALSE 23966
// begin if hackTanksCaptured [ index ] = hackLimit then
23799: LD_EXP 105
23803: PUSH
23804: LD_VAR 0 5
23808: ARRAY
23809: PUSH
23810: LD_EXP 106
23814: EQUAL
23815: IFFALSE 23819
// break ;
23817: GO 23966
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23819: LD_ADDR_EXP 108
23823: PUSH
23824: LD_EXP 108
23828: PPUSH
23829: LD_VAR 0 5
23833: PPUSH
23834: LD_EXP 108
23838: PUSH
23839: LD_VAR 0 5
23843: ARRAY
23844: PUSH
23845: LD_INT 1
23847: PLUS
23848: PPUSH
23849: CALL_OW 1
23853: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23854: LD_ADDR_EXP 105
23858: PUSH
23859: LD_EXP 105
23863: PPUSH
23864: LD_VAR 0 5
23868: PUSH
23869: LD_EXP 105
23873: PUSH
23874: LD_VAR 0 5
23878: ARRAY
23879: PUSH
23880: LD_INT 1
23882: PLUS
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PPUSH
23888: LD_VAR 0 2
23892: PUSH
23893: LD_VAR 0 4
23897: ARRAY
23898: PUSH
23899: LD_VAR 0 2
23903: PUSH
23904: LD_VAR 0 4
23908: ARRAY
23909: PPUSH
23910: CALL_OW 255
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PPUSH
23919: CALL 31374 0 3
23923: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23924: LD_VAR 0 2
23928: PUSH
23929: LD_VAR 0 4
23933: ARRAY
23934: PPUSH
23935: LD_VAR 0 1
23939: PPUSH
23940: CALL_OW 255
23944: PPUSH
23945: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23949: LD_VAR 0 2
23953: PUSH
23954: LD_VAR 0 4
23958: ARRAY
23959: PPUSH
23960: CALL_OW 141
// end ;
23964: GO 23796
23966: POP
23967: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23968: LD_VAR 0 1
23972: PPUSH
23973: LD_EXP 105
23977: PUSH
23978: LD_VAR 0 5
23982: ARRAY
23983: PUSH
23984: LD_INT 0
23986: PLUS
23987: PPUSH
23988: CALL_OW 505
// end ;
23992: LD_VAR 0 3
23996: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23997: LD_INT 0
23999: PPUSH
24000: PPUSH
24001: PPUSH
24002: PPUSH
// if not hack in hackTanks then
24003: LD_VAR 0 1
24007: PUSH
24008: LD_EXP 104
24012: IN
24013: NOT
24014: IFFALSE 24018
// exit ;
24016: GO 24258
// index := GetElementIndex ( hackTanks , hack ) ;
24018: LD_ADDR_VAR 0 4
24022: PUSH
24023: LD_EXP 104
24027: PPUSH
24028: LD_VAR 0 1
24032: PPUSH
24033: CALL 31159 0 2
24037: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24038: LD_ADDR_VAR 0 3
24042: PUSH
24043: DOUBLE
24044: LD_EXP 105
24048: PUSH
24049: LD_VAR 0 4
24053: ARRAY
24054: INC
24055: ST_TO_ADDR
24056: LD_INT 1
24058: PUSH
24059: FOR_DOWNTO
24060: IFFALSE 24232
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24062: LD_ADDR_VAR 0 5
24066: PUSH
24067: LD_EXP 105
24071: PUSH
24072: LD_VAR 0 4
24076: ARRAY
24077: PUSH
24078: LD_VAR 0 3
24082: ARRAY
24083: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24084: LD_VAR 0 5
24088: PUSH
24089: LD_INT 1
24091: ARRAY
24092: PPUSH
24093: CALL_OW 302
24097: NOT
24098: PUSH
24099: LD_VAR 0 5
24103: PUSH
24104: LD_INT 1
24106: ARRAY
24107: PPUSH
24108: CALL_OW 255
24112: PUSH
24113: LD_VAR 0 1
24117: PPUSH
24118: CALL_OW 255
24122: NONEQUAL
24123: OR
24124: IFFALSE 24230
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24126: LD_VAR 0 5
24130: PUSH
24131: LD_INT 1
24133: ARRAY
24134: PPUSH
24135: CALL_OW 305
24139: PUSH
24140: LD_VAR 0 5
24144: PUSH
24145: LD_INT 1
24147: ARRAY
24148: PPUSH
24149: CALL_OW 255
24153: PUSH
24154: LD_VAR 0 1
24158: PPUSH
24159: CALL_OW 255
24163: EQUAL
24164: AND
24165: IFFALSE 24189
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24167: LD_VAR 0 5
24171: PUSH
24172: LD_INT 1
24174: ARRAY
24175: PPUSH
24176: LD_VAR 0 5
24180: PUSH
24181: LD_INT 2
24183: ARRAY
24184: PPUSH
24185: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24189: LD_ADDR_EXP 105
24193: PUSH
24194: LD_EXP 105
24198: PPUSH
24199: LD_VAR 0 4
24203: PPUSH
24204: LD_EXP 105
24208: PUSH
24209: LD_VAR 0 4
24213: ARRAY
24214: PPUSH
24215: LD_VAR 0 3
24219: PPUSH
24220: CALL_OW 3
24224: PPUSH
24225: CALL_OW 1
24229: ST_TO_ADDR
// end ; end ;
24230: GO 24059
24232: POP
24233: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24234: LD_VAR 0 1
24238: PPUSH
24239: LD_EXP 105
24243: PUSH
24244: LD_VAR 0 4
24248: ARRAY
24249: PUSH
24250: LD_INT 0
24252: PLUS
24253: PPUSH
24254: CALL_OW 505
// end ;
24258: LD_VAR 0 2
24262: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24263: LD_INT 0
24265: PPUSH
24266: PPUSH
24267: PPUSH
24268: PPUSH
// if not hack in hackTanks then
24269: LD_VAR 0 1
24273: PUSH
24274: LD_EXP 104
24278: IN
24279: NOT
24280: IFFALSE 24284
// exit ;
24282: GO 24369
// index := GetElementIndex ( hackTanks , hack ) ;
24284: LD_ADDR_VAR 0 5
24288: PUSH
24289: LD_EXP 104
24293: PPUSH
24294: LD_VAR 0 1
24298: PPUSH
24299: CALL 31159 0 2
24303: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24304: LD_ADDR_VAR 0 4
24308: PUSH
24309: DOUBLE
24310: LD_INT 1
24312: DEC
24313: ST_TO_ADDR
24314: LD_EXP 105
24318: PUSH
24319: LD_VAR 0 5
24323: ARRAY
24324: PUSH
24325: FOR_TO
24326: IFFALSE 24367
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24328: LD_EXP 105
24332: PUSH
24333: LD_VAR 0 5
24337: ARRAY
24338: PUSH
24339: LD_VAR 0 4
24343: ARRAY
24344: PUSH
24345: LD_INT 1
24347: ARRAY
24348: PUSH
24349: LD_VAR 0 2
24353: EQUAL
24354: IFFALSE 24365
// KillUnit ( vehicle ) ;
24356: LD_VAR 0 2
24360: PPUSH
24361: CALL_OW 66
24365: GO 24325
24367: POP
24368: POP
// end ;
24369: LD_VAR 0 3
24373: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24374: LD_EXP 109
24378: NOT
24379: IFFALSE 24414
24381: GO 24383
24383: DISABLE
// begin initMiner := true ;
24384: LD_ADDR_EXP 109
24388: PUSH
24389: LD_INT 1
24391: ST_TO_ADDR
// minersList := [ ] ;
24392: LD_ADDR_EXP 110
24396: PUSH
24397: EMPTY
24398: ST_TO_ADDR
// minerMinesList := [ ] ;
24399: LD_ADDR_EXP 111
24403: PUSH
24404: EMPTY
24405: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24406: LD_ADDR_EXP 112
24410: PUSH
24411: LD_INT 5
24413: ST_TO_ADDR
// end ;
24414: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24415: LD_EXP 109
24419: PUSH
24420: LD_INT 34
24422: PUSH
24423: LD_EXP 31
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PPUSH
24432: CALL_OW 69
24436: AND
24437: IFFALSE 24900
24439: GO 24441
24441: DISABLE
24442: LD_INT 0
24444: PPUSH
24445: PPUSH
24446: PPUSH
24447: PPUSH
// begin enable ;
24448: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24449: LD_ADDR_VAR 0 1
24453: PUSH
24454: LD_INT 34
24456: PUSH
24457: LD_EXP 31
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PPUSH
24466: CALL_OW 69
24470: PUSH
24471: FOR_IN
24472: IFFALSE 24544
// begin if not i in minersList then
24474: LD_VAR 0 1
24478: PUSH
24479: LD_EXP 110
24483: IN
24484: NOT
24485: IFFALSE 24542
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24487: LD_ADDR_EXP 110
24491: PUSH
24492: LD_EXP 110
24496: PPUSH
24497: LD_EXP 110
24501: PUSH
24502: LD_INT 1
24504: PLUS
24505: PPUSH
24506: LD_VAR 0 1
24510: PPUSH
24511: CALL_OW 1
24515: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24516: LD_ADDR_EXP 111
24520: PUSH
24521: LD_EXP 111
24525: PPUSH
24526: LD_EXP 111
24530: PUSH
24531: LD_INT 1
24533: PLUS
24534: PPUSH
24535: EMPTY
24536: PPUSH
24537: CALL_OW 1
24541: ST_TO_ADDR
// end end ;
24542: GO 24471
24544: POP
24545: POP
// for i := minerMinesList downto 1 do
24546: LD_ADDR_VAR 0 1
24550: PUSH
24551: DOUBLE
24552: LD_EXP 111
24556: INC
24557: ST_TO_ADDR
24558: LD_INT 1
24560: PUSH
24561: FOR_DOWNTO
24562: IFFALSE 24898
// begin if IsLive ( minersList [ i ] ) then
24564: LD_EXP 110
24568: PUSH
24569: LD_VAR 0 1
24573: ARRAY
24574: PPUSH
24575: CALL_OW 300
24579: IFFALSE 24607
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24581: LD_EXP 110
24585: PUSH
24586: LD_VAR 0 1
24590: ARRAY
24591: PPUSH
24592: LD_EXP 111
24596: PUSH
24597: LD_VAR 0 1
24601: ARRAY
24602: PPUSH
24603: CALL_OW 505
// if not minerMinesList [ i ] then
24607: LD_EXP 111
24611: PUSH
24612: LD_VAR 0 1
24616: ARRAY
24617: NOT
24618: IFFALSE 24622
// continue ;
24620: GO 24561
// for j := minerMinesList [ i ] downto 1 do
24622: LD_ADDR_VAR 0 2
24626: PUSH
24627: DOUBLE
24628: LD_EXP 111
24632: PUSH
24633: LD_VAR 0 1
24637: ARRAY
24638: INC
24639: ST_TO_ADDR
24640: LD_INT 1
24642: PUSH
24643: FOR_DOWNTO
24644: IFFALSE 24894
// begin side := GetSide ( minersList [ i ] ) ;
24646: LD_ADDR_VAR 0 3
24650: PUSH
24651: LD_EXP 110
24655: PUSH
24656: LD_VAR 0 1
24660: ARRAY
24661: PPUSH
24662: CALL_OW 255
24666: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24667: LD_ADDR_VAR 0 4
24671: PUSH
24672: LD_EXP 111
24676: PUSH
24677: LD_VAR 0 1
24681: ARRAY
24682: PUSH
24683: LD_VAR 0 2
24687: ARRAY
24688: PUSH
24689: LD_INT 1
24691: ARRAY
24692: PPUSH
24693: LD_EXP 111
24697: PUSH
24698: LD_VAR 0 1
24702: ARRAY
24703: PUSH
24704: LD_VAR 0 2
24708: ARRAY
24709: PUSH
24710: LD_INT 2
24712: ARRAY
24713: PPUSH
24714: CALL_OW 428
24718: ST_TO_ADDR
// if not tmp then
24719: LD_VAR 0 4
24723: NOT
24724: IFFALSE 24728
// continue ;
24726: GO 24643
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24728: LD_VAR 0 4
24732: PUSH
24733: LD_INT 81
24735: PUSH
24736: LD_VAR 0 3
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PPUSH
24745: CALL_OW 69
24749: IN
24750: PUSH
24751: LD_EXP 111
24755: PUSH
24756: LD_VAR 0 1
24760: ARRAY
24761: PUSH
24762: LD_VAR 0 2
24766: ARRAY
24767: PUSH
24768: LD_INT 1
24770: ARRAY
24771: PPUSH
24772: LD_EXP 111
24776: PUSH
24777: LD_VAR 0 1
24781: ARRAY
24782: PUSH
24783: LD_VAR 0 2
24787: ARRAY
24788: PUSH
24789: LD_INT 2
24791: ARRAY
24792: PPUSH
24793: CALL_OW 458
24797: AND
24798: IFFALSE 24892
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24800: LD_EXP 111
24804: PUSH
24805: LD_VAR 0 1
24809: ARRAY
24810: PUSH
24811: LD_VAR 0 2
24815: ARRAY
24816: PUSH
24817: LD_INT 1
24819: ARRAY
24820: PPUSH
24821: LD_EXP 111
24825: PUSH
24826: LD_VAR 0 1
24830: ARRAY
24831: PUSH
24832: LD_VAR 0 2
24836: ARRAY
24837: PUSH
24838: LD_INT 2
24840: ARRAY
24841: PPUSH
24842: LD_VAR 0 3
24846: PPUSH
24847: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24851: LD_ADDR_EXP 111
24855: PUSH
24856: LD_EXP 111
24860: PPUSH
24861: LD_VAR 0 1
24865: PPUSH
24866: LD_EXP 111
24870: PUSH
24871: LD_VAR 0 1
24875: ARRAY
24876: PPUSH
24877: LD_VAR 0 2
24881: PPUSH
24882: CALL_OW 3
24886: PPUSH
24887: CALL_OW 1
24891: ST_TO_ADDR
// end ; end ;
24892: GO 24643
24894: POP
24895: POP
// end ;
24896: GO 24561
24898: POP
24899: POP
// end ;
24900: PPOPN 4
24902: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24903: LD_INT 0
24905: PPUSH
24906: PPUSH
// result := false ;
24907: LD_ADDR_VAR 0 4
24911: PUSH
24912: LD_INT 0
24914: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24915: LD_VAR 0 1
24919: PPUSH
24920: CALL_OW 264
24924: PUSH
24925: LD_EXP 31
24929: EQUAL
24930: NOT
24931: IFFALSE 24935
// exit ;
24933: GO 25175
// index := GetElementIndex ( minersList , unit ) ;
24935: LD_ADDR_VAR 0 5
24939: PUSH
24940: LD_EXP 110
24944: PPUSH
24945: LD_VAR 0 1
24949: PPUSH
24950: CALL 31159 0 2
24954: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24955: LD_EXP 111
24959: PUSH
24960: LD_VAR 0 5
24964: ARRAY
24965: PUSH
24966: LD_EXP 112
24970: GREATEREQUAL
24971: IFFALSE 24975
// exit ;
24973: GO 25175
// ComMoveXY ( unit , x , y ) ;
24975: LD_VAR 0 1
24979: PPUSH
24980: LD_VAR 0 2
24984: PPUSH
24985: LD_VAR 0 3
24989: PPUSH
24990: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24994: LD_INT 35
24996: PPUSH
24997: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25001: LD_VAR 0 1
25005: PPUSH
25006: LD_VAR 0 2
25010: PPUSH
25011: LD_VAR 0 3
25015: PPUSH
25016: CALL 61878 0 3
25020: NOT
25021: PUSH
25022: LD_VAR 0 1
25026: PPUSH
25027: CALL_OW 314
25031: AND
25032: IFFALSE 25036
// exit ;
25034: GO 25175
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25036: LD_VAR 0 2
25040: PPUSH
25041: LD_VAR 0 3
25045: PPUSH
25046: CALL_OW 428
25050: PUSH
25051: LD_VAR 0 1
25055: EQUAL
25056: PUSH
25057: LD_VAR 0 1
25061: PPUSH
25062: CALL_OW 314
25066: NOT
25067: AND
25068: IFFALSE 24994
// PlaySoundXY ( x , y , PlantMine ) ;
25070: LD_VAR 0 2
25074: PPUSH
25075: LD_VAR 0 3
25079: PPUSH
25080: LD_STRING PlantMine
25082: PPUSH
25083: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25087: LD_VAR 0 2
25091: PPUSH
25092: LD_VAR 0 3
25096: PPUSH
25097: LD_VAR 0 1
25101: PPUSH
25102: CALL_OW 255
25106: PPUSH
25107: LD_INT 0
25109: PPUSH
25110: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25114: LD_ADDR_EXP 111
25118: PUSH
25119: LD_EXP 111
25123: PPUSH
25124: LD_VAR 0 5
25128: PUSH
25129: LD_EXP 111
25133: PUSH
25134: LD_VAR 0 5
25138: ARRAY
25139: PUSH
25140: LD_INT 1
25142: PLUS
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PPUSH
25148: LD_VAR 0 2
25152: PUSH
25153: LD_VAR 0 3
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PPUSH
25162: CALL 31374 0 3
25166: ST_TO_ADDR
// result := true ;
25167: LD_ADDR_VAR 0 4
25171: PUSH
25172: LD_INT 1
25174: ST_TO_ADDR
// end ;
25175: LD_VAR 0 4
25179: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25180: LD_INT 0
25182: PPUSH
25183: PPUSH
25184: PPUSH
// if not unit in minersList then
25185: LD_VAR 0 1
25189: PUSH
25190: LD_EXP 110
25194: IN
25195: NOT
25196: IFFALSE 25200
// exit ;
25198: GO 25592
// index := GetElementIndex ( minersList , unit ) ;
25200: LD_ADDR_VAR 0 6
25204: PUSH
25205: LD_EXP 110
25209: PPUSH
25210: LD_VAR 0 1
25214: PPUSH
25215: CALL 31159 0 2
25219: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25220: LD_ADDR_VAR 0 5
25224: PUSH
25225: DOUBLE
25226: LD_EXP 111
25230: PUSH
25231: LD_VAR 0 6
25235: ARRAY
25236: INC
25237: ST_TO_ADDR
25238: LD_INT 1
25240: PUSH
25241: FOR_DOWNTO
25242: IFFALSE 25403
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25244: LD_EXP 111
25248: PUSH
25249: LD_VAR 0 6
25253: ARRAY
25254: PUSH
25255: LD_VAR 0 5
25259: ARRAY
25260: PUSH
25261: LD_INT 1
25263: ARRAY
25264: PUSH
25265: LD_VAR 0 2
25269: EQUAL
25270: PUSH
25271: LD_EXP 111
25275: PUSH
25276: LD_VAR 0 6
25280: ARRAY
25281: PUSH
25282: LD_VAR 0 5
25286: ARRAY
25287: PUSH
25288: LD_INT 2
25290: ARRAY
25291: PUSH
25292: LD_VAR 0 3
25296: EQUAL
25297: AND
25298: IFFALSE 25401
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25300: LD_EXP 111
25304: PUSH
25305: LD_VAR 0 6
25309: ARRAY
25310: PUSH
25311: LD_VAR 0 5
25315: ARRAY
25316: PUSH
25317: LD_INT 1
25319: ARRAY
25320: PPUSH
25321: LD_EXP 111
25325: PUSH
25326: LD_VAR 0 6
25330: ARRAY
25331: PUSH
25332: LD_VAR 0 5
25336: ARRAY
25337: PUSH
25338: LD_INT 2
25340: ARRAY
25341: PPUSH
25342: LD_VAR 0 1
25346: PPUSH
25347: CALL_OW 255
25351: PPUSH
25352: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25356: LD_ADDR_EXP 111
25360: PUSH
25361: LD_EXP 111
25365: PPUSH
25366: LD_VAR 0 6
25370: PPUSH
25371: LD_EXP 111
25375: PUSH
25376: LD_VAR 0 6
25380: ARRAY
25381: PPUSH
25382: LD_VAR 0 5
25386: PPUSH
25387: CALL_OW 3
25391: PPUSH
25392: CALL_OW 1
25396: ST_TO_ADDR
// exit ;
25397: POP
25398: POP
25399: GO 25592
// end ; end ;
25401: GO 25241
25403: POP
25404: POP
// for i := minerMinesList [ index ] downto 1 do
25405: LD_ADDR_VAR 0 5
25409: PUSH
25410: DOUBLE
25411: LD_EXP 111
25415: PUSH
25416: LD_VAR 0 6
25420: ARRAY
25421: INC
25422: ST_TO_ADDR
25423: LD_INT 1
25425: PUSH
25426: FOR_DOWNTO
25427: IFFALSE 25590
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25429: LD_EXP 111
25433: PUSH
25434: LD_VAR 0 6
25438: ARRAY
25439: PUSH
25440: LD_VAR 0 5
25444: ARRAY
25445: PUSH
25446: LD_INT 1
25448: ARRAY
25449: PPUSH
25450: LD_EXP 111
25454: PUSH
25455: LD_VAR 0 6
25459: ARRAY
25460: PUSH
25461: LD_VAR 0 5
25465: ARRAY
25466: PUSH
25467: LD_INT 2
25469: ARRAY
25470: PPUSH
25471: LD_VAR 0 2
25475: PPUSH
25476: LD_VAR 0 3
25480: PPUSH
25481: CALL_OW 298
25485: PUSH
25486: LD_INT 6
25488: LESS
25489: IFFALSE 25588
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25491: LD_EXP 111
25495: PUSH
25496: LD_VAR 0 6
25500: ARRAY
25501: PUSH
25502: LD_VAR 0 5
25506: ARRAY
25507: PUSH
25508: LD_INT 1
25510: ARRAY
25511: PPUSH
25512: LD_EXP 111
25516: PUSH
25517: LD_VAR 0 6
25521: ARRAY
25522: PUSH
25523: LD_VAR 0 5
25527: ARRAY
25528: PUSH
25529: LD_INT 2
25531: ARRAY
25532: PPUSH
25533: LD_VAR 0 1
25537: PPUSH
25538: CALL_OW 255
25542: PPUSH
25543: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25547: LD_ADDR_EXP 111
25551: PUSH
25552: LD_EXP 111
25556: PPUSH
25557: LD_VAR 0 6
25561: PPUSH
25562: LD_EXP 111
25566: PUSH
25567: LD_VAR 0 6
25571: ARRAY
25572: PPUSH
25573: LD_VAR 0 5
25577: PPUSH
25578: CALL_OW 3
25582: PPUSH
25583: CALL_OW 1
25587: ST_TO_ADDR
// end ; end ;
25588: GO 25426
25590: POP
25591: POP
// end ;
25592: LD_VAR 0 4
25596: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25597: LD_INT 0
25599: PPUSH
25600: PPUSH
25601: PPUSH
25602: PPUSH
25603: PPUSH
25604: PPUSH
25605: PPUSH
25606: PPUSH
25607: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25608: LD_VAR 0 1
25612: PPUSH
25613: CALL_OW 264
25617: PUSH
25618: LD_EXP 31
25622: EQUAL
25623: NOT
25624: PUSH
25625: LD_VAR 0 1
25629: PUSH
25630: LD_EXP 110
25634: IN
25635: NOT
25636: OR
25637: IFFALSE 25641
// exit ;
25639: GO 25963
// index := GetElementIndex ( minersList , unit ) ;
25641: LD_ADDR_VAR 0 6
25645: PUSH
25646: LD_EXP 110
25650: PPUSH
25651: LD_VAR 0 1
25655: PPUSH
25656: CALL 31159 0 2
25660: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25661: LD_ADDR_VAR 0 8
25665: PUSH
25666: LD_EXP 112
25670: PUSH
25671: LD_EXP 111
25675: PUSH
25676: LD_VAR 0 6
25680: ARRAY
25681: MINUS
25682: ST_TO_ADDR
// if not minesFreeAmount then
25683: LD_VAR 0 8
25687: NOT
25688: IFFALSE 25692
// exit ;
25690: GO 25963
// tmp := [ ] ;
25692: LD_ADDR_VAR 0 7
25696: PUSH
25697: EMPTY
25698: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25699: LD_ADDR_VAR 0 5
25703: PUSH
25704: DOUBLE
25705: LD_INT 1
25707: DEC
25708: ST_TO_ADDR
25709: LD_VAR 0 8
25713: PUSH
25714: FOR_TO
25715: IFFALSE 25910
// begin _d := rand ( 0 , 5 ) ;
25717: LD_ADDR_VAR 0 11
25721: PUSH
25722: LD_INT 0
25724: PPUSH
25725: LD_INT 5
25727: PPUSH
25728: CALL_OW 12
25732: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25733: LD_ADDR_VAR 0 12
25737: PUSH
25738: LD_INT 2
25740: PPUSH
25741: LD_INT 6
25743: PPUSH
25744: CALL_OW 12
25748: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25749: LD_ADDR_VAR 0 9
25753: PUSH
25754: LD_VAR 0 2
25758: PPUSH
25759: LD_VAR 0 11
25763: PPUSH
25764: LD_VAR 0 12
25768: PPUSH
25769: CALL_OW 272
25773: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25774: LD_ADDR_VAR 0 10
25778: PUSH
25779: LD_VAR 0 3
25783: PPUSH
25784: LD_VAR 0 11
25788: PPUSH
25789: LD_VAR 0 12
25793: PPUSH
25794: CALL_OW 273
25798: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25799: LD_VAR 0 9
25803: PPUSH
25804: LD_VAR 0 10
25808: PPUSH
25809: CALL_OW 488
25813: PUSH
25814: LD_VAR 0 9
25818: PUSH
25819: LD_VAR 0 10
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_VAR 0 7
25832: IN
25833: NOT
25834: AND
25835: PUSH
25836: LD_VAR 0 9
25840: PPUSH
25841: LD_VAR 0 10
25845: PPUSH
25846: CALL_OW 458
25850: NOT
25851: AND
25852: IFFALSE 25894
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25854: LD_ADDR_VAR 0 7
25858: PUSH
25859: LD_VAR 0 7
25863: PPUSH
25864: LD_VAR 0 7
25868: PUSH
25869: LD_INT 1
25871: PLUS
25872: PPUSH
25873: LD_VAR 0 9
25877: PUSH
25878: LD_VAR 0 10
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PPUSH
25887: CALL_OW 1
25891: ST_TO_ADDR
25892: GO 25908
// i := i - 1 ;
25894: LD_ADDR_VAR 0 5
25898: PUSH
25899: LD_VAR 0 5
25903: PUSH
25904: LD_INT 1
25906: MINUS
25907: ST_TO_ADDR
// end ;
25908: GO 25714
25910: POP
25911: POP
// for i in tmp do
25912: LD_ADDR_VAR 0 5
25916: PUSH
25917: LD_VAR 0 7
25921: PUSH
25922: FOR_IN
25923: IFFALSE 25961
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25925: LD_VAR 0 1
25929: PPUSH
25930: LD_VAR 0 5
25934: PUSH
25935: LD_INT 1
25937: ARRAY
25938: PPUSH
25939: LD_VAR 0 5
25943: PUSH
25944: LD_INT 2
25946: ARRAY
25947: PPUSH
25948: CALL 24903 0 3
25952: NOT
25953: IFFALSE 25959
// exit ;
25955: POP
25956: POP
25957: GO 25963
25959: GO 25922
25961: POP
25962: POP
// end ;
25963: LD_VAR 0 4
25967: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25968: LD_INT 0
25970: PPUSH
25971: PPUSH
25972: PPUSH
25973: PPUSH
25974: PPUSH
25975: PPUSH
25976: PPUSH
// if not GetClass ( unit ) = class_sniper then
25977: LD_VAR 0 1
25981: PPUSH
25982: CALL_OW 257
25986: PUSH
25987: LD_INT 5
25989: EQUAL
25990: NOT
25991: IFFALSE 25995
// exit ;
25993: GO 26383
// dist := 8 ;
25995: LD_ADDR_VAR 0 5
25999: PUSH
26000: LD_INT 8
26002: ST_TO_ADDR
// viewRange := 12 ;
26003: LD_ADDR_VAR 0 7
26007: PUSH
26008: LD_INT 12
26010: ST_TO_ADDR
// side := GetSide ( unit ) ;
26011: LD_ADDR_VAR 0 6
26015: PUSH
26016: LD_VAR 0 1
26020: PPUSH
26021: CALL_OW 255
26025: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26026: LD_INT 61
26028: PPUSH
26029: LD_VAR 0 6
26033: PPUSH
26034: CALL_OW 321
26038: PUSH
26039: LD_INT 2
26041: EQUAL
26042: IFFALSE 26052
// viewRange := 16 ;
26044: LD_ADDR_VAR 0 7
26048: PUSH
26049: LD_INT 16
26051: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26052: LD_VAR 0 1
26056: PPUSH
26057: LD_VAR 0 2
26061: PPUSH
26062: LD_VAR 0 3
26066: PPUSH
26067: CALL_OW 297
26071: PUSH
26072: LD_VAR 0 5
26076: GREATER
26077: IFFALSE 26156
// begin ComMoveXY ( unit , x , y ) ;
26079: LD_VAR 0 1
26083: PPUSH
26084: LD_VAR 0 2
26088: PPUSH
26089: LD_VAR 0 3
26093: PPUSH
26094: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26098: LD_INT 35
26100: PPUSH
26101: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26105: LD_VAR 0 1
26109: PPUSH
26110: LD_VAR 0 2
26114: PPUSH
26115: LD_VAR 0 3
26119: PPUSH
26120: CALL 61878 0 3
26124: NOT
26125: IFFALSE 26129
// exit ;
26127: GO 26383
// until GetDistUnitXY ( unit , x , y ) < dist ;
26129: LD_VAR 0 1
26133: PPUSH
26134: LD_VAR 0 2
26138: PPUSH
26139: LD_VAR 0 3
26143: PPUSH
26144: CALL_OW 297
26148: PUSH
26149: LD_VAR 0 5
26153: LESS
26154: IFFALSE 26098
// end ; ComTurnXY ( unit , x , y ) ;
26156: LD_VAR 0 1
26160: PPUSH
26161: LD_VAR 0 2
26165: PPUSH
26166: LD_VAR 0 3
26170: PPUSH
26171: CALL_OW 118
// wait ( 5 ) ;
26175: LD_INT 5
26177: PPUSH
26178: CALL_OW 67
// _d := GetDir ( unit ) ;
26182: LD_ADDR_VAR 0 10
26186: PUSH
26187: LD_VAR 0 1
26191: PPUSH
26192: CALL_OW 254
26196: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26197: LD_ADDR_VAR 0 8
26201: PUSH
26202: LD_VAR 0 1
26206: PPUSH
26207: CALL_OW 250
26211: PPUSH
26212: LD_VAR 0 10
26216: PPUSH
26217: LD_VAR 0 5
26221: PPUSH
26222: CALL_OW 272
26226: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26227: LD_ADDR_VAR 0 9
26231: PUSH
26232: LD_VAR 0 1
26236: PPUSH
26237: CALL_OW 251
26241: PPUSH
26242: LD_VAR 0 10
26246: PPUSH
26247: LD_VAR 0 5
26251: PPUSH
26252: CALL_OW 273
26256: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26257: LD_VAR 0 8
26261: PPUSH
26262: LD_VAR 0 9
26266: PPUSH
26267: CALL_OW 488
26271: NOT
26272: IFFALSE 26276
// exit ;
26274: GO 26383
// ComAnimCustom ( unit , 1 ) ;
26276: LD_VAR 0 1
26280: PPUSH
26281: LD_INT 1
26283: PPUSH
26284: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26288: LD_VAR 0 8
26292: PPUSH
26293: LD_VAR 0 9
26297: PPUSH
26298: LD_VAR 0 6
26302: PPUSH
26303: LD_VAR 0 7
26307: PPUSH
26308: CALL_OW 330
// repeat wait ( 1 ) ;
26312: LD_INT 1
26314: PPUSH
26315: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26319: LD_VAR 0 1
26323: PPUSH
26324: CALL_OW 316
26328: PUSH
26329: LD_VAR 0 1
26333: PPUSH
26334: CALL_OW 314
26338: OR
26339: PUSH
26340: LD_VAR 0 1
26344: PPUSH
26345: CALL_OW 302
26349: NOT
26350: OR
26351: PUSH
26352: LD_VAR 0 1
26356: PPUSH
26357: CALL_OW 301
26361: OR
26362: IFFALSE 26312
// RemoveSeeing ( _x , _y , side ) ;
26364: LD_VAR 0 8
26368: PPUSH
26369: LD_VAR 0 9
26373: PPUSH
26374: LD_VAR 0 6
26378: PPUSH
26379: CALL_OW 331
// end ; end_of_file
26383: LD_VAR 0 4
26387: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26388: LD_INT 0
26390: PPUSH
26391: PPUSH
// if exist_mode then
26392: LD_VAR 0 2
26396: IFFALSE 26421
// unit := CreateCharacter ( prefix & ident ) else
26398: LD_ADDR_VAR 0 5
26402: PUSH
26403: LD_VAR 0 3
26407: PUSH
26408: LD_VAR 0 1
26412: STR
26413: PPUSH
26414: CALL_OW 34
26418: ST_TO_ADDR
26419: GO 26436
// unit := NewCharacter ( ident ) ;
26421: LD_ADDR_VAR 0 5
26425: PUSH
26426: LD_VAR 0 1
26430: PPUSH
26431: CALL_OW 25
26435: ST_TO_ADDR
// result := unit ;
26436: LD_ADDR_VAR 0 4
26440: PUSH
26441: LD_VAR 0 5
26445: ST_TO_ADDR
// end ;
26446: LD_VAR 0 4
26450: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26451: LD_INT 0
26453: PPUSH
26454: PPUSH
// if not side or not nation then
26455: LD_VAR 0 1
26459: NOT
26460: PUSH
26461: LD_VAR 0 2
26465: NOT
26466: OR
26467: IFFALSE 26471
// exit ;
26469: GO 27239
// case nation of nation_american :
26471: LD_VAR 0 2
26475: PUSH
26476: LD_INT 1
26478: DOUBLE
26479: EQUAL
26480: IFTRUE 26484
26482: GO 26698
26484: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26485: LD_ADDR_VAR 0 4
26489: PUSH
26490: LD_INT 35
26492: PUSH
26493: LD_INT 45
26495: PUSH
26496: LD_INT 46
26498: PUSH
26499: LD_INT 47
26501: PUSH
26502: LD_INT 82
26504: PUSH
26505: LD_INT 83
26507: PUSH
26508: LD_INT 84
26510: PUSH
26511: LD_INT 85
26513: PUSH
26514: LD_INT 86
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: LD_INT 6
26525: PUSH
26526: LD_INT 15
26528: PUSH
26529: LD_INT 16
26531: PUSH
26532: LD_INT 7
26534: PUSH
26535: LD_INT 12
26537: PUSH
26538: LD_INT 13
26540: PUSH
26541: LD_INT 10
26543: PUSH
26544: LD_INT 14
26546: PUSH
26547: LD_INT 20
26549: PUSH
26550: LD_INT 21
26552: PUSH
26553: LD_INT 22
26555: PUSH
26556: LD_INT 25
26558: PUSH
26559: LD_INT 32
26561: PUSH
26562: LD_INT 27
26564: PUSH
26565: LD_INT 36
26567: PUSH
26568: LD_INT 69
26570: PUSH
26571: LD_INT 39
26573: PUSH
26574: LD_INT 34
26576: PUSH
26577: LD_INT 40
26579: PUSH
26580: LD_INT 48
26582: PUSH
26583: LD_INT 49
26585: PUSH
26586: LD_INT 50
26588: PUSH
26589: LD_INT 51
26591: PUSH
26592: LD_INT 52
26594: PUSH
26595: LD_INT 53
26597: PUSH
26598: LD_INT 54
26600: PUSH
26601: LD_INT 55
26603: PUSH
26604: LD_INT 56
26606: PUSH
26607: LD_INT 57
26609: PUSH
26610: LD_INT 58
26612: PUSH
26613: LD_INT 59
26615: PUSH
26616: LD_INT 60
26618: PUSH
26619: LD_INT 61
26621: PUSH
26622: LD_INT 62
26624: PUSH
26625: LD_INT 80
26627: PUSH
26628: LD_INT 82
26630: PUSH
26631: LD_INT 83
26633: PUSH
26634: LD_INT 84
26636: PUSH
26637: LD_INT 85
26639: PUSH
26640: LD_INT 86
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: ST_TO_ADDR
26696: GO 27163
26698: LD_INT 2
26700: DOUBLE
26701: EQUAL
26702: IFTRUE 26706
26704: GO 26932
26706: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26707: LD_ADDR_VAR 0 4
26711: PUSH
26712: LD_INT 35
26714: PUSH
26715: LD_INT 45
26717: PUSH
26718: LD_INT 46
26720: PUSH
26721: LD_INT 47
26723: PUSH
26724: LD_INT 82
26726: PUSH
26727: LD_INT 83
26729: PUSH
26730: LD_INT 84
26732: PUSH
26733: LD_INT 85
26735: PUSH
26736: LD_INT 87
26738: PUSH
26739: LD_INT 70
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: LD_INT 11
26747: PUSH
26748: LD_INT 3
26750: PUSH
26751: LD_INT 4
26753: PUSH
26754: LD_INT 5
26756: PUSH
26757: LD_INT 6
26759: PUSH
26760: LD_INT 15
26762: PUSH
26763: LD_INT 18
26765: PUSH
26766: LD_INT 7
26768: PUSH
26769: LD_INT 17
26771: PUSH
26772: LD_INT 8
26774: PUSH
26775: LD_INT 20
26777: PUSH
26778: LD_INT 21
26780: PUSH
26781: LD_INT 22
26783: PUSH
26784: LD_INT 72
26786: PUSH
26787: LD_INT 26
26789: PUSH
26790: LD_INT 69
26792: PUSH
26793: LD_INT 39
26795: PUSH
26796: LD_INT 40
26798: PUSH
26799: LD_INT 41
26801: PUSH
26802: LD_INT 42
26804: PUSH
26805: LD_INT 43
26807: PUSH
26808: LD_INT 48
26810: PUSH
26811: LD_INT 49
26813: PUSH
26814: LD_INT 50
26816: PUSH
26817: LD_INT 51
26819: PUSH
26820: LD_INT 52
26822: PUSH
26823: LD_INT 53
26825: PUSH
26826: LD_INT 54
26828: PUSH
26829: LD_INT 55
26831: PUSH
26832: LD_INT 56
26834: PUSH
26835: LD_INT 60
26837: PUSH
26838: LD_INT 61
26840: PUSH
26841: LD_INT 62
26843: PUSH
26844: LD_INT 66
26846: PUSH
26847: LD_INT 67
26849: PUSH
26850: LD_INT 68
26852: PUSH
26853: LD_INT 81
26855: PUSH
26856: LD_INT 82
26858: PUSH
26859: LD_INT 83
26861: PUSH
26862: LD_INT 84
26864: PUSH
26865: LD_INT 85
26867: PUSH
26868: LD_INT 87
26870: PUSH
26871: LD_INT 88
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: ST_TO_ADDR
26930: GO 27163
26932: LD_INT 3
26934: DOUBLE
26935: EQUAL
26936: IFTRUE 26940
26938: GO 27162
26940: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26941: LD_ADDR_VAR 0 4
26945: PUSH
26946: LD_INT 46
26948: PUSH
26949: LD_INT 47
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: LD_INT 2
26957: PUSH
26958: LD_INT 82
26960: PUSH
26961: LD_INT 83
26963: PUSH
26964: LD_INT 84
26966: PUSH
26967: LD_INT 85
26969: PUSH
26970: LD_INT 86
26972: PUSH
26973: LD_INT 11
26975: PUSH
26976: LD_INT 9
26978: PUSH
26979: LD_INT 20
26981: PUSH
26982: LD_INT 19
26984: PUSH
26985: LD_INT 21
26987: PUSH
26988: LD_INT 24
26990: PUSH
26991: LD_INT 22
26993: PUSH
26994: LD_INT 25
26996: PUSH
26997: LD_INT 28
26999: PUSH
27000: LD_INT 29
27002: PUSH
27003: LD_INT 30
27005: PUSH
27006: LD_INT 31
27008: PUSH
27009: LD_INT 37
27011: PUSH
27012: LD_INT 38
27014: PUSH
27015: LD_INT 32
27017: PUSH
27018: LD_INT 27
27020: PUSH
27021: LD_INT 33
27023: PUSH
27024: LD_INT 69
27026: PUSH
27027: LD_INT 39
27029: PUSH
27030: LD_INT 34
27032: PUSH
27033: LD_INT 40
27035: PUSH
27036: LD_INT 71
27038: PUSH
27039: LD_INT 23
27041: PUSH
27042: LD_INT 44
27044: PUSH
27045: LD_INT 48
27047: PUSH
27048: LD_INT 49
27050: PUSH
27051: LD_INT 50
27053: PUSH
27054: LD_INT 51
27056: PUSH
27057: LD_INT 52
27059: PUSH
27060: LD_INT 53
27062: PUSH
27063: LD_INT 54
27065: PUSH
27066: LD_INT 55
27068: PUSH
27069: LD_INT 56
27071: PUSH
27072: LD_INT 57
27074: PUSH
27075: LD_INT 58
27077: PUSH
27078: LD_INT 59
27080: PUSH
27081: LD_INT 63
27083: PUSH
27084: LD_INT 64
27086: PUSH
27087: LD_INT 65
27089: PUSH
27090: LD_INT 82
27092: PUSH
27093: LD_INT 83
27095: PUSH
27096: LD_INT 84
27098: PUSH
27099: LD_INT 85
27101: PUSH
27102: LD_INT 86
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: ST_TO_ADDR
27160: GO 27163
27162: POP
// if state > - 1 and state < 3 then
27163: LD_VAR 0 3
27167: PUSH
27168: LD_INT 1
27170: NEG
27171: GREATER
27172: PUSH
27173: LD_VAR 0 3
27177: PUSH
27178: LD_INT 3
27180: LESS
27181: AND
27182: IFFALSE 27239
// for i in result do
27184: LD_ADDR_VAR 0 5
27188: PUSH
27189: LD_VAR 0 4
27193: PUSH
27194: FOR_IN
27195: IFFALSE 27237
// if GetTech ( i , side ) <> state then
27197: LD_VAR 0 5
27201: PPUSH
27202: LD_VAR 0 1
27206: PPUSH
27207: CALL_OW 321
27211: PUSH
27212: LD_VAR 0 3
27216: NONEQUAL
27217: IFFALSE 27235
// result := result diff i ;
27219: LD_ADDR_VAR 0 4
27223: PUSH
27224: LD_VAR 0 4
27228: PUSH
27229: LD_VAR 0 5
27233: DIFF
27234: ST_TO_ADDR
27235: GO 27194
27237: POP
27238: POP
// end ;
27239: LD_VAR 0 4
27243: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27244: LD_INT 0
27246: PPUSH
27247: PPUSH
27248: PPUSH
// result := true ;
27249: LD_ADDR_VAR 0 3
27253: PUSH
27254: LD_INT 1
27256: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27257: LD_ADDR_VAR 0 5
27261: PUSH
27262: LD_VAR 0 2
27266: PPUSH
27267: CALL_OW 480
27271: ST_TO_ADDR
// if not tmp then
27272: LD_VAR 0 5
27276: NOT
27277: IFFALSE 27281
// exit ;
27279: GO 27330
// for i in tmp do
27281: LD_ADDR_VAR 0 4
27285: PUSH
27286: LD_VAR 0 5
27290: PUSH
27291: FOR_IN
27292: IFFALSE 27328
// if GetTech ( i , side ) <> state_researched then
27294: LD_VAR 0 4
27298: PPUSH
27299: LD_VAR 0 1
27303: PPUSH
27304: CALL_OW 321
27308: PUSH
27309: LD_INT 2
27311: NONEQUAL
27312: IFFALSE 27326
// begin result := false ;
27314: LD_ADDR_VAR 0 3
27318: PUSH
27319: LD_INT 0
27321: ST_TO_ADDR
// exit ;
27322: POP
27323: POP
27324: GO 27330
// end ;
27326: GO 27291
27328: POP
27329: POP
// end ;
27330: LD_VAR 0 3
27334: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27335: LD_INT 0
27337: PPUSH
27338: PPUSH
27339: PPUSH
27340: PPUSH
27341: PPUSH
27342: PPUSH
27343: PPUSH
27344: PPUSH
27345: PPUSH
27346: PPUSH
27347: PPUSH
27348: PPUSH
27349: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27350: LD_VAR 0 1
27354: NOT
27355: PUSH
27356: LD_VAR 0 1
27360: PPUSH
27361: CALL_OW 257
27365: PUSH
27366: LD_INT 9
27368: NONEQUAL
27369: OR
27370: IFFALSE 27374
// exit ;
27372: GO 27947
// side := GetSide ( unit ) ;
27374: LD_ADDR_VAR 0 9
27378: PUSH
27379: LD_VAR 0 1
27383: PPUSH
27384: CALL_OW 255
27388: ST_TO_ADDR
// tech_space := tech_spacanom ;
27389: LD_ADDR_VAR 0 12
27393: PUSH
27394: LD_INT 29
27396: ST_TO_ADDR
// tech_time := tech_taurad ;
27397: LD_ADDR_VAR 0 13
27401: PUSH
27402: LD_INT 28
27404: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27405: LD_ADDR_VAR 0 11
27409: PUSH
27410: LD_VAR 0 1
27414: PPUSH
27415: CALL_OW 310
27419: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27420: LD_VAR 0 11
27424: PPUSH
27425: CALL_OW 247
27429: PUSH
27430: LD_INT 2
27432: EQUAL
27433: IFFALSE 27437
// exit ;
27435: GO 27947
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27437: LD_ADDR_VAR 0 8
27441: PUSH
27442: LD_INT 81
27444: PUSH
27445: LD_VAR 0 9
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 3
27456: PUSH
27457: LD_INT 21
27459: PUSH
27460: LD_INT 3
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PPUSH
27475: CALL_OW 69
27479: ST_TO_ADDR
// if not tmp then
27480: LD_VAR 0 8
27484: NOT
27485: IFFALSE 27489
// exit ;
27487: GO 27947
// if in_unit then
27489: LD_VAR 0 11
27493: IFFALSE 27517
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27495: LD_ADDR_VAR 0 10
27499: PUSH
27500: LD_VAR 0 8
27504: PPUSH
27505: LD_VAR 0 11
27509: PPUSH
27510: CALL_OW 74
27514: ST_TO_ADDR
27515: GO 27537
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27517: LD_ADDR_VAR 0 10
27521: PUSH
27522: LD_VAR 0 8
27526: PPUSH
27527: LD_VAR 0 1
27531: PPUSH
27532: CALL_OW 74
27536: ST_TO_ADDR
// if not enemy then
27537: LD_VAR 0 10
27541: NOT
27542: IFFALSE 27546
// exit ;
27544: GO 27947
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27546: LD_VAR 0 11
27550: PUSH
27551: LD_VAR 0 11
27555: PPUSH
27556: LD_VAR 0 10
27560: PPUSH
27561: CALL_OW 296
27565: PUSH
27566: LD_INT 13
27568: GREATER
27569: AND
27570: PUSH
27571: LD_VAR 0 1
27575: PPUSH
27576: LD_VAR 0 10
27580: PPUSH
27581: CALL_OW 296
27585: PUSH
27586: LD_INT 12
27588: GREATER
27589: OR
27590: IFFALSE 27594
// exit ;
27592: GO 27947
// missile := [ 1 ] ;
27594: LD_ADDR_VAR 0 14
27598: PUSH
27599: LD_INT 1
27601: PUSH
27602: EMPTY
27603: LIST
27604: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27605: LD_VAR 0 9
27609: PPUSH
27610: LD_VAR 0 12
27614: PPUSH
27615: CALL_OW 325
27619: IFFALSE 27648
// missile := Replace ( missile , missile + 1 , 2 ) ;
27621: LD_ADDR_VAR 0 14
27625: PUSH
27626: LD_VAR 0 14
27630: PPUSH
27631: LD_VAR 0 14
27635: PUSH
27636: LD_INT 1
27638: PLUS
27639: PPUSH
27640: LD_INT 2
27642: PPUSH
27643: CALL_OW 1
27647: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27648: LD_VAR 0 9
27652: PPUSH
27653: LD_VAR 0 13
27657: PPUSH
27658: CALL_OW 325
27662: PUSH
27663: LD_VAR 0 10
27667: PPUSH
27668: CALL_OW 255
27672: PPUSH
27673: LD_VAR 0 13
27677: PPUSH
27678: CALL_OW 325
27682: NOT
27683: AND
27684: IFFALSE 27713
// missile := Replace ( missile , missile + 1 , 3 ) ;
27686: LD_ADDR_VAR 0 14
27690: PUSH
27691: LD_VAR 0 14
27695: PPUSH
27696: LD_VAR 0 14
27700: PUSH
27701: LD_INT 1
27703: PLUS
27704: PPUSH
27705: LD_INT 3
27707: PPUSH
27708: CALL_OW 1
27712: ST_TO_ADDR
// if missile < 2 then
27713: LD_VAR 0 14
27717: PUSH
27718: LD_INT 2
27720: LESS
27721: IFFALSE 27725
// exit ;
27723: GO 27947
// x := GetX ( enemy ) ;
27725: LD_ADDR_VAR 0 4
27729: PUSH
27730: LD_VAR 0 10
27734: PPUSH
27735: CALL_OW 250
27739: ST_TO_ADDR
// y := GetY ( enemy ) ;
27740: LD_ADDR_VAR 0 5
27744: PUSH
27745: LD_VAR 0 10
27749: PPUSH
27750: CALL_OW 251
27754: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27755: LD_ADDR_VAR 0 6
27759: PUSH
27760: LD_VAR 0 4
27764: PUSH
27765: LD_INT 1
27767: NEG
27768: PPUSH
27769: LD_INT 1
27771: PPUSH
27772: CALL_OW 12
27776: PLUS
27777: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27778: LD_ADDR_VAR 0 7
27782: PUSH
27783: LD_VAR 0 5
27787: PUSH
27788: LD_INT 1
27790: NEG
27791: PPUSH
27792: LD_INT 1
27794: PPUSH
27795: CALL_OW 12
27799: PLUS
27800: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27801: LD_VAR 0 6
27805: PPUSH
27806: LD_VAR 0 7
27810: PPUSH
27811: CALL_OW 488
27815: NOT
27816: IFFALSE 27838
// begin _x := x ;
27818: LD_ADDR_VAR 0 6
27822: PUSH
27823: LD_VAR 0 4
27827: ST_TO_ADDR
// _y := y ;
27828: LD_ADDR_VAR 0 7
27832: PUSH
27833: LD_VAR 0 5
27837: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27838: LD_ADDR_VAR 0 3
27842: PUSH
27843: LD_INT 1
27845: PPUSH
27846: LD_VAR 0 14
27850: PPUSH
27851: CALL_OW 12
27855: ST_TO_ADDR
// case i of 1 :
27856: LD_VAR 0 3
27860: PUSH
27861: LD_INT 1
27863: DOUBLE
27864: EQUAL
27865: IFTRUE 27869
27867: GO 27886
27869: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27870: LD_VAR 0 1
27874: PPUSH
27875: LD_VAR 0 10
27879: PPUSH
27880: CALL_OW 115
27884: GO 27947
27886: LD_INT 2
27888: DOUBLE
27889: EQUAL
27890: IFTRUE 27894
27892: GO 27916
27894: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27895: LD_VAR 0 1
27899: PPUSH
27900: LD_VAR 0 6
27904: PPUSH
27905: LD_VAR 0 7
27909: PPUSH
27910: CALL_OW 153
27914: GO 27947
27916: LD_INT 3
27918: DOUBLE
27919: EQUAL
27920: IFTRUE 27924
27922: GO 27946
27924: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27925: LD_VAR 0 1
27929: PPUSH
27930: LD_VAR 0 6
27934: PPUSH
27935: LD_VAR 0 7
27939: PPUSH
27940: CALL_OW 154
27944: GO 27947
27946: POP
// end ;
27947: LD_VAR 0 2
27951: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27952: LD_INT 0
27954: PPUSH
27955: PPUSH
27956: PPUSH
27957: PPUSH
27958: PPUSH
27959: PPUSH
// if not unit or not building then
27960: LD_VAR 0 1
27964: NOT
27965: PUSH
27966: LD_VAR 0 2
27970: NOT
27971: OR
27972: IFFALSE 27976
// exit ;
27974: GO 28134
// x := GetX ( building ) ;
27976: LD_ADDR_VAR 0 5
27980: PUSH
27981: LD_VAR 0 2
27985: PPUSH
27986: CALL_OW 250
27990: ST_TO_ADDR
// y := GetY ( building ) ;
27991: LD_ADDR_VAR 0 6
27995: PUSH
27996: LD_VAR 0 2
28000: PPUSH
28001: CALL_OW 251
28005: ST_TO_ADDR
// for i = 0 to 5 do
28006: LD_ADDR_VAR 0 4
28010: PUSH
28011: DOUBLE
28012: LD_INT 0
28014: DEC
28015: ST_TO_ADDR
28016: LD_INT 5
28018: PUSH
28019: FOR_TO
28020: IFFALSE 28132
// begin _x := ShiftX ( x , i , 3 ) ;
28022: LD_ADDR_VAR 0 7
28026: PUSH
28027: LD_VAR 0 5
28031: PPUSH
28032: LD_VAR 0 4
28036: PPUSH
28037: LD_INT 3
28039: PPUSH
28040: CALL_OW 272
28044: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28045: LD_ADDR_VAR 0 8
28049: PUSH
28050: LD_VAR 0 6
28054: PPUSH
28055: LD_VAR 0 4
28059: PPUSH
28060: LD_INT 3
28062: PPUSH
28063: CALL_OW 273
28067: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28068: LD_VAR 0 7
28072: PPUSH
28073: LD_VAR 0 8
28077: PPUSH
28078: CALL_OW 488
28082: NOT
28083: IFFALSE 28087
// continue ;
28085: GO 28019
// if HexInfo ( _x , _y ) = 0 then
28087: LD_VAR 0 7
28091: PPUSH
28092: LD_VAR 0 8
28096: PPUSH
28097: CALL_OW 428
28101: PUSH
28102: LD_INT 0
28104: EQUAL
28105: IFFALSE 28130
// begin ComMoveXY ( unit , _x , _y ) ;
28107: LD_VAR 0 1
28111: PPUSH
28112: LD_VAR 0 7
28116: PPUSH
28117: LD_VAR 0 8
28121: PPUSH
28122: CALL_OW 111
// exit ;
28126: POP
28127: POP
28128: GO 28134
// end ; end ;
28130: GO 28019
28132: POP
28133: POP
// end ;
28134: LD_VAR 0 3
28138: RET
// export function ScanBase ( side , base_area ) ; begin
28139: LD_INT 0
28141: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28142: LD_ADDR_VAR 0 3
28146: PUSH
28147: LD_VAR 0 2
28151: PPUSH
28152: LD_INT 81
28154: PUSH
28155: LD_VAR 0 1
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PPUSH
28164: CALL_OW 70
28168: ST_TO_ADDR
// end ;
28169: LD_VAR 0 3
28173: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28174: LD_INT 0
28176: PPUSH
28177: PPUSH
28178: PPUSH
28179: PPUSH
// result := false ;
28180: LD_ADDR_VAR 0 2
28184: PUSH
28185: LD_INT 0
28187: ST_TO_ADDR
// side := GetSide ( unit ) ;
28188: LD_ADDR_VAR 0 3
28192: PUSH
28193: LD_VAR 0 1
28197: PPUSH
28198: CALL_OW 255
28202: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28203: LD_ADDR_VAR 0 4
28207: PUSH
28208: LD_VAR 0 1
28212: PPUSH
28213: CALL_OW 248
28217: ST_TO_ADDR
// case nat of 1 :
28218: LD_VAR 0 4
28222: PUSH
28223: LD_INT 1
28225: DOUBLE
28226: EQUAL
28227: IFTRUE 28231
28229: GO 28242
28231: POP
// tech := tech_lassight ; 2 :
28232: LD_ADDR_VAR 0 5
28236: PUSH
28237: LD_INT 12
28239: ST_TO_ADDR
28240: GO 28281
28242: LD_INT 2
28244: DOUBLE
28245: EQUAL
28246: IFTRUE 28250
28248: GO 28261
28250: POP
// tech := tech_mortar ; 3 :
28251: LD_ADDR_VAR 0 5
28255: PUSH
28256: LD_INT 41
28258: ST_TO_ADDR
28259: GO 28281
28261: LD_INT 3
28263: DOUBLE
28264: EQUAL
28265: IFTRUE 28269
28267: GO 28280
28269: POP
// tech := tech_bazooka ; end ;
28270: LD_ADDR_VAR 0 5
28274: PUSH
28275: LD_INT 44
28277: ST_TO_ADDR
28278: GO 28281
28280: POP
// if Researched ( side , tech ) then
28281: LD_VAR 0 3
28285: PPUSH
28286: LD_VAR 0 5
28290: PPUSH
28291: CALL_OW 325
28295: IFFALSE 28322
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28297: LD_ADDR_VAR 0 2
28301: PUSH
28302: LD_INT 5
28304: PUSH
28305: LD_INT 8
28307: PUSH
28308: LD_INT 9
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: LIST
28315: PUSH
28316: LD_VAR 0 4
28320: ARRAY
28321: ST_TO_ADDR
// end ;
28322: LD_VAR 0 2
28326: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28327: LD_INT 0
28329: PPUSH
28330: PPUSH
28331: PPUSH
// if not mines then
28332: LD_VAR 0 2
28336: NOT
28337: IFFALSE 28341
// exit ;
28339: GO 28485
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28341: LD_ADDR_VAR 0 5
28345: PUSH
28346: LD_INT 81
28348: PUSH
28349: LD_VAR 0 1
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 3
28360: PUSH
28361: LD_INT 21
28363: PUSH
28364: LD_INT 3
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PPUSH
28379: CALL_OW 69
28383: ST_TO_ADDR
// for i in mines do
28384: LD_ADDR_VAR 0 4
28388: PUSH
28389: LD_VAR 0 2
28393: PUSH
28394: FOR_IN
28395: IFFALSE 28483
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28397: LD_VAR 0 4
28401: PUSH
28402: LD_INT 1
28404: ARRAY
28405: PPUSH
28406: LD_VAR 0 4
28410: PUSH
28411: LD_INT 2
28413: ARRAY
28414: PPUSH
28415: CALL_OW 458
28419: NOT
28420: IFFALSE 28424
// continue ;
28422: GO 28394
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28424: LD_VAR 0 4
28428: PUSH
28429: LD_INT 1
28431: ARRAY
28432: PPUSH
28433: LD_VAR 0 4
28437: PUSH
28438: LD_INT 2
28440: ARRAY
28441: PPUSH
28442: CALL_OW 428
28446: PUSH
28447: LD_VAR 0 5
28451: IN
28452: IFFALSE 28481
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28454: LD_VAR 0 4
28458: PUSH
28459: LD_INT 1
28461: ARRAY
28462: PPUSH
28463: LD_VAR 0 4
28467: PUSH
28468: LD_INT 2
28470: ARRAY
28471: PPUSH
28472: LD_VAR 0 1
28476: PPUSH
28477: CALL_OW 456
// end ;
28481: GO 28394
28483: POP
28484: POP
// end ;
28485: LD_VAR 0 3
28489: RET
// export function Count ( array ) ; var i ; begin
28490: LD_INT 0
28492: PPUSH
28493: PPUSH
// result := 0 ;
28494: LD_ADDR_VAR 0 2
28498: PUSH
28499: LD_INT 0
28501: ST_TO_ADDR
// for i in array do
28502: LD_ADDR_VAR 0 3
28506: PUSH
28507: LD_VAR 0 1
28511: PUSH
28512: FOR_IN
28513: IFFALSE 28537
// if i then
28515: LD_VAR 0 3
28519: IFFALSE 28535
// result := result + 1 ;
28521: LD_ADDR_VAR 0 2
28525: PUSH
28526: LD_VAR 0 2
28530: PUSH
28531: LD_INT 1
28533: PLUS
28534: ST_TO_ADDR
28535: GO 28512
28537: POP
28538: POP
// end ;
28539: LD_VAR 0 2
28543: RET
// export function IsEmpty ( building ) ; begin
28544: LD_INT 0
28546: PPUSH
// if not building then
28547: LD_VAR 0 1
28551: NOT
28552: IFFALSE 28556
// exit ;
28554: GO 28599
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28556: LD_ADDR_VAR 0 2
28560: PUSH
28561: LD_VAR 0 1
28565: PUSH
28566: LD_INT 22
28568: PUSH
28569: LD_VAR 0 1
28573: PPUSH
28574: CALL_OW 255
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 58
28585: PUSH
28586: EMPTY
28587: LIST
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PPUSH
28593: CALL_OW 69
28597: IN
28598: ST_TO_ADDR
// end ;
28599: LD_VAR 0 2
28603: RET
// export function IsNotFull ( building ) ; begin
28604: LD_INT 0
28606: PPUSH
// if not building then
28607: LD_VAR 0 1
28611: NOT
28612: IFFALSE 28616
// exit ;
28614: GO 28635
// result := UnitsInside ( building ) < 6 ;
28616: LD_ADDR_VAR 0 2
28620: PUSH
28621: LD_VAR 0 1
28625: PPUSH
28626: CALL_OW 313
28630: PUSH
28631: LD_INT 6
28633: LESS
28634: ST_TO_ADDR
// end ;
28635: LD_VAR 0 2
28639: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28640: LD_INT 0
28642: PPUSH
28643: PPUSH
28644: PPUSH
28645: PPUSH
// tmp := [ ] ;
28646: LD_ADDR_VAR 0 3
28650: PUSH
28651: EMPTY
28652: ST_TO_ADDR
// list := [ ] ;
28653: LD_ADDR_VAR 0 5
28657: PUSH
28658: EMPTY
28659: ST_TO_ADDR
// for i = 16 to 25 do
28660: LD_ADDR_VAR 0 4
28664: PUSH
28665: DOUBLE
28666: LD_INT 16
28668: DEC
28669: ST_TO_ADDR
28670: LD_INT 25
28672: PUSH
28673: FOR_TO
28674: IFFALSE 28747
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28676: LD_ADDR_VAR 0 3
28680: PUSH
28681: LD_VAR 0 3
28685: PUSH
28686: LD_INT 22
28688: PUSH
28689: LD_VAR 0 1
28693: PPUSH
28694: CALL_OW 255
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 91
28705: PUSH
28706: LD_VAR 0 1
28710: PUSH
28711: LD_INT 6
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 30
28721: PUSH
28722: LD_VAR 0 4
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: LIST
28735: PUSH
28736: EMPTY
28737: LIST
28738: PPUSH
28739: CALL_OW 69
28743: ADD
28744: ST_TO_ADDR
28745: GO 28673
28747: POP
28748: POP
// for i = 1 to tmp do
28749: LD_ADDR_VAR 0 4
28753: PUSH
28754: DOUBLE
28755: LD_INT 1
28757: DEC
28758: ST_TO_ADDR
28759: LD_VAR 0 3
28763: PUSH
28764: FOR_TO
28765: IFFALSE 28853
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28767: LD_ADDR_VAR 0 5
28771: PUSH
28772: LD_VAR 0 5
28776: PUSH
28777: LD_VAR 0 3
28781: PUSH
28782: LD_VAR 0 4
28786: ARRAY
28787: PPUSH
28788: CALL_OW 266
28792: PUSH
28793: LD_VAR 0 3
28797: PUSH
28798: LD_VAR 0 4
28802: ARRAY
28803: PPUSH
28804: CALL_OW 250
28808: PUSH
28809: LD_VAR 0 3
28813: PUSH
28814: LD_VAR 0 4
28818: ARRAY
28819: PPUSH
28820: CALL_OW 251
28824: PUSH
28825: LD_VAR 0 3
28829: PUSH
28830: LD_VAR 0 4
28834: ARRAY
28835: PPUSH
28836: CALL_OW 254
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: PUSH
28847: EMPTY
28848: LIST
28849: ADD
28850: ST_TO_ADDR
28851: GO 28764
28853: POP
28854: POP
// result := list ;
28855: LD_ADDR_VAR 0 2
28859: PUSH
28860: LD_VAR 0 5
28864: ST_TO_ADDR
// end ;
28865: LD_VAR 0 2
28869: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28870: LD_INT 0
28872: PPUSH
28873: PPUSH
28874: PPUSH
28875: PPUSH
28876: PPUSH
28877: PPUSH
28878: PPUSH
// if not factory then
28879: LD_VAR 0 1
28883: NOT
28884: IFFALSE 28888
// exit ;
28886: GO 29481
// if control = control_apeman then
28888: LD_VAR 0 4
28892: PUSH
28893: LD_INT 5
28895: EQUAL
28896: IFFALSE 29005
// begin tmp := UnitsInside ( factory ) ;
28898: LD_ADDR_VAR 0 8
28902: PUSH
28903: LD_VAR 0 1
28907: PPUSH
28908: CALL_OW 313
28912: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28913: LD_VAR 0 8
28917: PPUSH
28918: LD_INT 25
28920: PUSH
28921: LD_INT 12
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PPUSH
28928: CALL_OW 72
28932: NOT
28933: IFFALSE 28943
// control := control_manual ;
28935: LD_ADDR_VAR 0 4
28939: PUSH
28940: LD_INT 1
28942: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28943: LD_ADDR_VAR 0 8
28947: PUSH
28948: LD_VAR 0 1
28952: PPUSH
28953: CALL 28640 0 1
28957: ST_TO_ADDR
// if tmp then
28958: LD_VAR 0 8
28962: IFFALSE 29005
// begin for i in tmp do
28964: LD_ADDR_VAR 0 7
28968: PUSH
28969: LD_VAR 0 8
28973: PUSH
28974: FOR_IN
28975: IFFALSE 29003
// if i [ 1 ] = b_ext_radio then
28977: LD_VAR 0 7
28981: PUSH
28982: LD_INT 1
28984: ARRAY
28985: PUSH
28986: LD_INT 22
28988: EQUAL
28989: IFFALSE 29001
// begin control := control_remote ;
28991: LD_ADDR_VAR 0 4
28995: PUSH
28996: LD_INT 2
28998: ST_TO_ADDR
// break ;
28999: GO 29003
// end ;
29001: GO 28974
29003: POP
29004: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29005: LD_VAR 0 1
29009: PPUSH
29010: LD_VAR 0 2
29014: PPUSH
29015: LD_VAR 0 3
29019: PPUSH
29020: LD_VAR 0 4
29024: PPUSH
29025: LD_VAR 0 5
29029: PPUSH
29030: CALL_OW 448
29034: IFFALSE 29069
// begin result := [ chassis , engine , control , weapon ] ;
29036: LD_ADDR_VAR 0 6
29040: PUSH
29041: LD_VAR 0 2
29045: PUSH
29046: LD_VAR 0 3
29050: PUSH
29051: LD_VAR 0 4
29055: PUSH
29056: LD_VAR 0 5
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: ST_TO_ADDR
// exit ;
29067: GO 29481
// end ; _chassis := AvailableChassisList ( factory ) ;
29069: LD_ADDR_VAR 0 9
29073: PUSH
29074: LD_VAR 0 1
29078: PPUSH
29079: CALL_OW 475
29083: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29084: LD_ADDR_VAR 0 11
29088: PUSH
29089: LD_VAR 0 1
29093: PPUSH
29094: CALL_OW 476
29098: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29099: LD_ADDR_VAR 0 12
29103: PUSH
29104: LD_VAR 0 1
29108: PPUSH
29109: CALL_OW 477
29113: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29114: LD_ADDR_VAR 0 10
29118: PUSH
29119: LD_VAR 0 1
29123: PPUSH
29124: CALL_OW 478
29128: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29129: LD_VAR 0 9
29133: NOT
29134: PUSH
29135: LD_VAR 0 11
29139: NOT
29140: OR
29141: PUSH
29142: LD_VAR 0 12
29146: NOT
29147: OR
29148: PUSH
29149: LD_VAR 0 10
29153: NOT
29154: OR
29155: IFFALSE 29190
// begin result := [ chassis , engine , control , weapon ] ;
29157: LD_ADDR_VAR 0 6
29161: PUSH
29162: LD_VAR 0 2
29166: PUSH
29167: LD_VAR 0 3
29171: PUSH
29172: LD_VAR 0 4
29176: PUSH
29177: LD_VAR 0 5
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: ST_TO_ADDR
// exit ;
29188: GO 29481
// end ; if not chassis in _chassis then
29190: LD_VAR 0 2
29194: PUSH
29195: LD_VAR 0 9
29199: IN
29200: NOT
29201: IFFALSE 29227
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29203: LD_ADDR_VAR 0 2
29207: PUSH
29208: LD_VAR 0 9
29212: PUSH
29213: LD_INT 1
29215: PPUSH
29216: LD_VAR 0 9
29220: PPUSH
29221: CALL_OW 12
29225: ARRAY
29226: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29227: LD_VAR 0 2
29231: PPUSH
29232: LD_VAR 0 3
29236: PPUSH
29237: CALL 29486 0 2
29241: NOT
29242: IFFALSE 29301
// repeat engine := _engine [ 1 ] ;
29244: LD_ADDR_VAR 0 3
29248: PUSH
29249: LD_VAR 0 11
29253: PUSH
29254: LD_INT 1
29256: ARRAY
29257: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29258: LD_ADDR_VAR 0 11
29262: PUSH
29263: LD_VAR 0 11
29267: PPUSH
29268: LD_INT 1
29270: PPUSH
29271: CALL_OW 3
29275: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29276: LD_VAR 0 2
29280: PPUSH
29281: LD_VAR 0 3
29285: PPUSH
29286: CALL 29486 0 2
29290: PUSH
29291: LD_VAR 0 11
29295: PUSH
29296: EMPTY
29297: EQUAL
29298: OR
29299: IFFALSE 29244
// if not control in _control then
29301: LD_VAR 0 4
29305: PUSH
29306: LD_VAR 0 12
29310: IN
29311: NOT
29312: IFFALSE 29338
// control := _control [ rand ( 1 , _control ) ] ;
29314: LD_ADDR_VAR 0 4
29318: PUSH
29319: LD_VAR 0 12
29323: PUSH
29324: LD_INT 1
29326: PPUSH
29327: LD_VAR 0 12
29331: PPUSH
29332: CALL_OW 12
29336: ARRAY
29337: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29338: LD_VAR 0 2
29342: PPUSH
29343: LD_VAR 0 5
29347: PPUSH
29348: CALL 29706 0 2
29352: NOT
29353: IFFALSE 29412
// repeat weapon := _weapon [ 1 ] ;
29355: LD_ADDR_VAR 0 5
29359: PUSH
29360: LD_VAR 0 10
29364: PUSH
29365: LD_INT 1
29367: ARRAY
29368: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29369: LD_ADDR_VAR 0 10
29373: PUSH
29374: LD_VAR 0 10
29378: PPUSH
29379: LD_INT 1
29381: PPUSH
29382: CALL_OW 3
29386: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29387: LD_VAR 0 2
29391: PPUSH
29392: LD_VAR 0 5
29396: PPUSH
29397: CALL 29706 0 2
29401: PUSH
29402: LD_VAR 0 10
29406: PUSH
29407: EMPTY
29408: EQUAL
29409: OR
29410: IFFALSE 29355
// result := [ ] ;
29412: LD_ADDR_VAR 0 6
29416: PUSH
29417: EMPTY
29418: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29419: LD_VAR 0 1
29423: PPUSH
29424: LD_VAR 0 2
29428: PPUSH
29429: LD_VAR 0 3
29433: PPUSH
29434: LD_VAR 0 4
29438: PPUSH
29439: LD_VAR 0 5
29443: PPUSH
29444: CALL_OW 448
29448: IFFALSE 29481
// result := [ chassis , engine , control , weapon ] ;
29450: LD_ADDR_VAR 0 6
29454: PUSH
29455: LD_VAR 0 2
29459: PUSH
29460: LD_VAR 0 3
29464: PUSH
29465: LD_VAR 0 4
29469: PUSH
29470: LD_VAR 0 5
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: ST_TO_ADDR
// end ;
29481: LD_VAR 0 6
29485: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29486: LD_INT 0
29488: PPUSH
// if not chassis or not engine then
29489: LD_VAR 0 1
29493: NOT
29494: PUSH
29495: LD_VAR 0 2
29499: NOT
29500: OR
29501: IFFALSE 29505
// exit ;
29503: GO 29701
// case engine of engine_solar :
29505: LD_VAR 0 2
29509: PUSH
29510: LD_INT 2
29512: DOUBLE
29513: EQUAL
29514: IFTRUE 29518
29516: GO 29556
29518: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29519: LD_ADDR_VAR 0 3
29523: PUSH
29524: LD_INT 11
29526: PUSH
29527: LD_INT 12
29529: PUSH
29530: LD_INT 13
29532: PUSH
29533: LD_INT 14
29535: PUSH
29536: LD_INT 1
29538: PUSH
29539: LD_INT 2
29541: PUSH
29542: LD_INT 3
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: ST_TO_ADDR
29554: GO 29685
29556: LD_INT 1
29558: DOUBLE
29559: EQUAL
29560: IFTRUE 29564
29562: GO 29626
29564: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29565: LD_ADDR_VAR 0 3
29569: PUSH
29570: LD_INT 11
29572: PUSH
29573: LD_INT 12
29575: PUSH
29576: LD_INT 13
29578: PUSH
29579: LD_INT 14
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: LD_INT 2
29587: PUSH
29588: LD_INT 3
29590: PUSH
29591: LD_INT 4
29593: PUSH
29594: LD_INT 5
29596: PUSH
29597: LD_INT 21
29599: PUSH
29600: LD_INT 23
29602: PUSH
29603: LD_INT 22
29605: PUSH
29606: LD_INT 24
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: ST_TO_ADDR
29624: GO 29685
29626: LD_INT 3
29628: DOUBLE
29629: EQUAL
29630: IFTRUE 29634
29632: GO 29684
29634: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29635: LD_ADDR_VAR 0 3
29639: PUSH
29640: LD_INT 13
29642: PUSH
29643: LD_INT 14
29645: PUSH
29646: LD_INT 2
29648: PUSH
29649: LD_INT 3
29651: PUSH
29652: LD_INT 4
29654: PUSH
29655: LD_INT 5
29657: PUSH
29658: LD_INT 21
29660: PUSH
29661: LD_INT 22
29663: PUSH
29664: LD_INT 23
29666: PUSH
29667: LD_INT 24
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: ST_TO_ADDR
29682: GO 29685
29684: POP
// result := ( chassis in result ) ;
29685: LD_ADDR_VAR 0 3
29689: PUSH
29690: LD_VAR 0 1
29694: PUSH
29695: LD_VAR 0 3
29699: IN
29700: ST_TO_ADDR
// end ;
29701: LD_VAR 0 3
29705: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29706: LD_INT 0
29708: PPUSH
// if not chassis or not weapon then
29709: LD_VAR 0 1
29713: NOT
29714: PUSH
29715: LD_VAR 0 2
29719: NOT
29720: OR
29721: IFFALSE 29725
// exit ;
29723: GO 30787
// case weapon of us_machine_gun :
29725: LD_VAR 0 2
29729: PUSH
29730: LD_INT 2
29732: DOUBLE
29733: EQUAL
29734: IFTRUE 29738
29736: GO 29768
29738: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29739: LD_ADDR_VAR 0 3
29743: PUSH
29744: LD_INT 1
29746: PUSH
29747: LD_INT 2
29749: PUSH
29750: LD_INT 3
29752: PUSH
29753: LD_INT 4
29755: PUSH
29756: LD_INT 5
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: ST_TO_ADDR
29766: GO 30771
29768: LD_INT 3
29770: DOUBLE
29771: EQUAL
29772: IFTRUE 29776
29774: GO 29806
29776: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29777: LD_ADDR_VAR 0 3
29781: PUSH
29782: LD_INT 1
29784: PUSH
29785: LD_INT 2
29787: PUSH
29788: LD_INT 3
29790: PUSH
29791: LD_INT 4
29793: PUSH
29794: LD_INT 5
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: ST_TO_ADDR
29804: GO 30771
29806: LD_INT 11
29808: DOUBLE
29809: EQUAL
29810: IFTRUE 29814
29812: GO 29844
29814: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29815: LD_ADDR_VAR 0 3
29819: PUSH
29820: LD_INT 1
29822: PUSH
29823: LD_INT 2
29825: PUSH
29826: LD_INT 3
29828: PUSH
29829: LD_INT 4
29831: PUSH
29832: LD_INT 5
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: ST_TO_ADDR
29842: GO 30771
29844: LD_INT 4
29846: DOUBLE
29847: EQUAL
29848: IFTRUE 29852
29850: GO 29878
29852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29853: LD_ADDR_VAR 0 3
29857: PUSH
29858: LD_INT 2
29860: PUSH
29861: LD_INT 3
29863: PUSH
29864: LD_INT 4
29866: PUSH
29867: LD_INT 5
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: ST_TO_ADDR
29876: GO 30771
29878: LD_INT 5
29880: DOUBLE
29881: EQUAL
29882: IFTRUE 29886
29884: GO 29912
29886: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29887: LD_ADDR_VAR 0 3
29891: PUSH
29892: LD_INT 2
29894: PUSH
29895: LD_INT 3
29897: PUSH
29898: LD_INT 4
29900: PUSH
29901: LD_INT 5
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: ST_TO_ADDR
29910: GO 30771
29912: LD_INT 9
29914: DOUBLE
29915: EQUAL
29916: IFTRUE 29920
29918: GO 29946
29920: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29921: LD_ADDR_VAR 0 3
29925: PUSH
29926: LD_INT 2
29928: PUSH
29929: LD_INT 3
29931: PUSH
29932: LD_INT 4
29934: PUSH
29935: LD_INT 5
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: ST_TO_ADDR
29944: GO 30771
29946: LD_INT 7
29948: DOUBLE
29949: EQUAL
29950: IFTRUE 29954
29952: GO 29980
29954: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29955: LD_ADDR_VAR 0 3
29959: PUSH
29960: LD_INT 2
29962: PUSH
29963: LD_INT 3
29965: PUSH
29966: LD_INT 4
29968: PUSH
29969: LD_INT 5
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: ST_TO_ADDR
29978: GO 30771
29980: LD_INT 12
29982: DOUBLE
29983: EQUAL
29984: IFTRUE 29988
29986: GO 30014
29988: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29989: LD_ADDR_VAR 0 3
29993: PUSH
29994: LD_INT 2
29996: PUSH
29997: LD_INT 3
29999: PUSH
30000: LD_INT 4
30002: PUSH
30003: LD_INT 5
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: ST_TO_ADDR
30012: GO 30771
30014: LD_INT 13
30016: DOUBLE
30017: EQUAL
30018: IFTRUE 30022
30020: GO 30048
30022: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30023: LD_ADDR_VAR 0 3
30027: PUSH
30028: LD_INT 2
30030: PUSH
30031: LD_INT 3
30033: PUSH
30034: LD_INT 4
30036: PUSH
30037: LD_INT 5
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: ST_TO_ADDR
30046: GO 30771
30048: LD_INT 14
30050: DOUBLE
30051: EQUAL
30052: IFTRUE 30056
30054: GO 30074
30056: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30057: LD_ADDR_VAR 0 3
30061: PUSH
30062: LD_INT 4
30064: PUSH
30065: LD_INT 5
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: ST_TO_ADDR
30072: GO 30771
30074: LD_INT 6
30076: DOUBLE
30077: EQUAL
30078: IFTRUE 30082
30080: GO 30100
30082: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30083: LD_ADDR_VAR 0 3
30087: PUSH
30088: LD_INT 4
30090: PUSH
30091: LD_INT 5
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: ST_TO_ADDR
30098: GO 30771
30100: LD_INT 10
30102: DOUBLE
30103: EQUAL
30104: IFTRUE 30108
30106: GO 30126
30108: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30109: LD_ADDR_VAR 0 3
30113: PUSH
30114: LD_INT 4
30116: PUSH
30117: LD_INT 5
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: ST_TO_ADDR
30124: GO 30771
30126: LD_INT 22
30128: DOUBLE
30129: EQUAL
30130: IFTRUE 30134
30132: GO 30160
30134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30135: LD_ADDR_VAR 0 3
30139: PUSH
30140: LD_INT 11
30142: PUSH
30143: LD_INT 12
30145: PUSH
30146: LD_INT 13
30148: PUSH
30149: LD_INT 14
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: ST_TO_ADDR
30158: GO 30771
30160: LD_INT 23
30162: DOUBLE
30163: EQUAL
30164: IFTRUE 30168
30166: GO 30194
30168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30169: LD_ADDR_VAR 0 3
30173: PUSH
30174: LD_INT 11
30176: PUSH
30177: LD_INT 12
30179: PUSH
30180: LD_INT 13
30182: PUSH
30183: LD_INT 14
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: ST_TO_ADDR
30192: GO 30771
30194: LD_INT 24
30196: DOUBLE
30197: EQUAL
30198: IFTRUE 30202
30200: GO 30228
30202: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30203: LD_ADDR_VAR 0 3
30207: PUSH
30208: LD_INT 11
30210: PUSH
30211: LD_INT 12
30213: PUSH
30214: LD_INT 13
30216: PUSH
30217: LD_INT 14
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: ST_TO_ADDR
30226: GO 30771
30228: LD_INT 30
30230: DOUBLE
30231: EQUAL
30232: IFTRUE 30236
30234: GO 30262
30236: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30237: LD_ADDR_VAR 0 3
30241: PUSH
30242: LD_INT 11
30244: PUSH
30245: LD_INT 12
30247: PUSH
30248: LD_INT 13
30250: PUSH
30251: LD_INT 14
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: ST_TO_ADDR
30260: GO 30771
30262: LD_INT 25
30264: DOUBLE
30265: EQUAL
30266: IFTRUE 30270
30268: GO 30288
30270: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30271: LD_ADDR_VAR 0 3
30275: PUSH
30276: LD_INT 13
30278: PUSH
30279: LD_INT 14
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: ST_TO_ADDR
30286: GO 30771
30288: LD_INT 27
30290: DOUBLE
30291: EQUAL
30292: IFTRUE 30296
30294: GO 30314
30296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30297: LD_ADDR_VAR 0 3
30301: PUSH
30302: LD_INT 13
30304: PUSH
30305: LD_INT 14
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: ST_TO_ADDR
30312: GO 30771
30314: LD_EXP 29
30318: DOUBLE
30319: EQUAL
30320: IFTRUE 30324
30322: GO 30350
30324: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30325: LD_ADDR_VAR 0 3
30329: PUSH
30330: LD_INT 11
30332: PUSH
30333: LD_INT 12
30335: PUSH
30336: LD_INT 13
30338: PUSH
30339: LD_INT 14
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: ST_TO_ADDR
30348: GO 30771
30350: LD_INT 28
30352: DOUBLE
30353: EQUAL
30354: IFTRUE 30358
30356: GO 30376
30358: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30359: LD_ADDR_VAR 0 3
30363: PUSH
30364: LD_INT 13
30366: PUSH
30367: LD_INT 14
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: ST_TO_ADDR
30374: GO 30771
30376: LD_INT 29
30378: DOUBLE
30379: EQUAL
30380: IFTRUE 30384
30382: GO 30402
30384: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30385: LD_ADDR_VAR 0 3
30389: PUSH
30390: LD_INT 13
30392: PUSH
30393: LD_INT 14
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: ST_TO_ADDR
30400: GO 30771
30402: LD_INT 31
30404: DOUBLE
30405: EQUAL
30406: IFTRUE 30410
30408: GO 30428
30410: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30411: LD_ADDR_VAR 0 3
30415: PUSH
30416: LD_INT 13
30418: PUSH
30419: LD_INT 14
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: ST_TO_ADDR
30426: GO 30771
30428: LD_INT 26
30430: DOUBLE
30431: EQUAL
30432: IFTRUE 30436
30434: GO 30454
30436: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30437: LD_ADDR_VAR 0 3
30441: PUSH
30442: LD_INT 13
30444: PUSH
30445: LD_INT 14
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: ST_TO_ADDR
30452: GO 30771
30454: LD_INT 42
30456: DOUBLE
30457: EQUAL
30458: IFTRUE 30462
30460: GO 30488
30462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30463: LD_ADDR_VAR 0 3
30467: PUSH
30468: LD_INT 21
30470: PUSH
30471: LD_INT 22
30473: PUSH
30474: LD_INT 23
30476: PUSH
30477: LD_INT 24
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: ST_TO_ADDR
30486: GO 30771
30488: LD_INT 43
30490: DOUBLE
30491: EQUAL
30492: IFTRUE 30496
30494: GO 30522
30496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30497: LD_ADDR_VAR 0 3
30501: PUSH
30502: LD_INT 21
30504: PUSH
30505: LD_INT 22
30507: PUSH
30508: LD_INT 23
30510: PUSH
30511: LD_INT 24
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: ST_TO_ADDR
30520: GO 30771
30522: LD_INT 44
30524: DOUBLE
30525: EQUAL
30526: IFTRUE 30530
30528: GO 30556
30530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30531: LD_ADDR_VAR 0 3
30535: PUSH
30536: LD_INT 21
30538: PUSH
30539: LD_INT 22
30541: PUSH
30542: LD_INT 23
30544: PUSH
30545: LD_INT 24
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: ST_TO_ADDR
30554: GO 30771
30556: LD_INT 45
30558: DOUBLE
30559: EQUAL
30560: IFTRUE 30564
30562: GO 30590
30564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30565: LD_ADDR_VAR 0 3
30569: PUSH
30570: LD_INT 21
30572: PUSH
30573: LD_INT 22
30575: PUSH
30576: LD_INT 23
30578: PUSH
30579: LD_INT 24
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: ST_TO_ADDR
30588: GO 30771
30590: LD_INT 49
30592: DOUBLE
30593: EQUAL
30594: IFTRUE 30598
30596: GO 30624
30598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30599: LD_ADDR_VAR 0 3
30603: PUSH
30604: LD_INT 21
30606: PUSH
30607: LD_INT 22
30609: PUSH
30610: LD_INT 23
30612: PUSH
30613: LD_INT 24
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: ST_TO_ADDR
30622: GO 30771
30624: LD_INT 51
30626: DOUBLE
30627: EQUAL
30628: IFTRUE 30632
30630: GO 30658
30632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30633: LD_ADDR_VAR 0 3
30637: PUSH
30638: LD_INT 21
30640: PUSH
30641: LD_INT 22
30643: PUSH
30644: LD_INT 23
30646: PUSH
30647: LD_INT 24
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: ST_TO_ADDR
30656: GO 30771
30658: LD_INT 52
30660: DOUBLE
30661: EQUAL
30662: IFTRUE 30666
30664: GO 30692
30666: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30667: LD_ADDR_VAR 0 3
30671: PUSH
30672: LD_INT 21
30674: PUSH
30675: LD_INT 22
30677: PUSH
30678: LD_INT 23
30680: PUSH
30681: LD_INT 24
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: ST_TO_ADDR
30690: GO 30771
30692: LD_INT 53
30694: DOUBLE
30695: EQUAL
30696: IFTRUE 30700
30698: GO 30718
30700: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30701: LD_ADDR_VAR 0 3
30705: PUSH
30706: LD_INT 23
30708: PUSH
30709: LD_INT 24
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: ST_TO_ADDR
30716: GO 30771
30718: LD_INT 46
30720: DOUBLE
30721: EQUAL
30722: IFTRUE 30726
30724: GO 30744
30726: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30727: LD_ADDR_VAR 0 3
30731: PUSH
30732: LD_INT 23
30734: PUSH
30735: LD_INT 24
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: ST_TO_ADDR
30742: GO 30771
30744: LD_INT 47
30746: DOUBLE
30747: EQUAL
30748: IFTRUE 30752
30750: GO 30770
30752: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30753: LD_ADDR_VAR 0 3
30757: PUSH
30758: LD_INT 23
30760: PUSH
30761: LD_INT 24
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: ST_TO_ADDR
30768: GO 30771
30770: POP
// result := ( chassis in result ) ;
30771: LD_ADDR_VAR 0 3
30775: PUSH
30776: LD_VAR 0 1
30780: PUSH
30781: LD_VAR 0 3
30785: IN
30786: ST_TO_ADDR
// end ;
30787: LD_VAR 0 3
30791: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30792: LD_INT 0
30794: PPUSH
30795: PPUSH
30796: PPUSH
30797: PPUSH
30798: PPUSH
30799: PPUSH
30800: PPUSH
// result := array ;
30801: LD_ADDR_VAR 0 5
30805: PUSH
30806: LD_VAR 0 1
30810: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30811: LD_VAR 0 1
30815: NOT
30816: PUSH
30817: LD_VAR 0 2
30821: NOT
30822: OR
30823: PUSH
30824: LD_VAR 0 3
30828: NOT
30829: OR
30830: PUSH
30831: LD_VAR 0 2
30835: PUSH
30836: LD_VAR 0 1
30840: GREATER
30841: OR
30842: PUSH
30843: LD_VAR 0 3
30847: PUSH
30848: LD_VAR 0 1
30852: GREATER
30853: OR
30854: IFFALSE 30858
// exit ;
30856: GO 31154
// if direction then
30858: LD_VAR 0 4
30862: IFFALSE 30926
// begin d := 1 ;
30864: LD_ADDR_VAR 0 9
30868: PUSH
30869: LD_INT 1
30871: ST_TO_ADDR
// if i_from > i_to then
30872: LD_VAR 0 2
30876: PUSH
30877: LD_VAR 0 3
30881: GREATER
30882: IFFALSE 30908
// length := ( array - i_from ) + i_to else
30884: LD_ADDR_VAR 0 11
30888: PUSH
30889: LD_VAR 0 1
30893: PUSH
30894: LD_VAR 0 2
30898: MINUS
30899: PUSH
30900: LD_VAR 0 3
30904: PLUS
30905: ST_TO_ADDR
30906: GO 30924
// length := i_to - i_from ;
30908: LD_ADDR_VAR 0 11
30912: PUSH
30913: LD_VAR 0 3
30917: PUSH
30918: LD_VAR 0 2
30922: MINUS
30923: ST_TO_ADDR
// end else
30924: GO 30987
// begin d := - 1 ;
30926: LD_ADDR_VAR 0 9
30930: PUSH
30931: LD_INT 1
30933: NEG
30934: ST_TO_ADDR
// if i_from > i_to then
30935: LD_VAR 0 2
30939: PUSH
30940: LD_VAR 0 3
30944: GREATER
30945: IFFALSE 30965
// length := i_from - i_to else
30947: LD_ADDR_VAR 0 11
30951: PUSH
30952: LD_VAR 0 2
30956: PUSH
30957: LD_VAR 0 3
30961: MINUS
30962: ST_TO_ADDR
30963: GO 30987
// length := ( array - i_to ) + i_from ;
30965: LD_ADDR_VAR 0 11
30969: PUSH
30970: LD_VAR 0 1
30974: PUSH
30975: LD_VAR 0 3
30979: MINUS
30980: PUSH
30981: LD_VAR 0 2
30985: PLUS
30986: ST_TO_ADDR
// end ; if not length then
30987: LD_VAR 0 11
30991: NOT
30992: IFFALSE 30996
// exit ;
30994: GO 31154
// tmp := array ;
30996: LD_ADDR_VAR 0 10
31000: PUSH
31001: LD_VAR 0 1
31005: ST_TO_ADDR
// for i = 1 to length do
31006: LD_ADDR_VAR 0 6
31010: PUSH
31011: DOUBLE
31012: LD_INT 1
31014: DEC
31015: ST_TO_ADDR
31016: LD_VAR 0 11
31020: PUSH
31021: FOR_TO
31022: IFFALSE 31142
// begin for j = 1 to array do
31024: LD_ADDR_VAR 0 7
31028: PUSH
31029: DOUBLE
31030: LD_INT 1
31032: DEC
31033: ST_TO_ADDR
31034: LD_VAR 0 1
31038: PUSH
31039: FOR_TO
31040: IFFALSE 31128
// begin k := j + d ;
31042: LD_ADDR_VAR 0 8
31046: PUSH
31047: LD_VAR 0 7
31051: PUSH
31052: LD_VAR 0 9
31056: PLUS
31057: ST_TO_ADDR
// if k > array then
31058: LD_VAR 0 8
31062: PUSH
31063: LD_VAR 0 1
31067: GREATER
31068: IFFALSE 31078
// k := 1 ;
31070: LD_ADDR_VAR 0 8
31074: PUSH
31075: LD_INT 1
31077: ST_TO_ADDR
// if not k then
31078: LD_VAR 0 8
31082: NOT
31083: IFFALSE 31095
// k := array ;
31085: LD_ADDR_VAR 0 8
31089: PUSH
31090: LD_VAR 0 1
31094: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31095: LD_ADDR_VAR 0 10
31099: PUSH
31100: LD_VAR 0 10
31104: PPUSH
31105: LD_VAR 0 8
31109: PPUSH
31110: LD_VAR 0 1
31114: PUSH
31115: LD_VAR 0 7
31119: ARRAY
31120: PPUSH
31121: CALL_OW 1
31125: ST_TO_ADDR
// end ;
31126: GO 31039
31128: POP
31129: POP
// array := tmp ;
31130: LD_ADDR_VAR 0 1
31134: PUSH
31135: LD_VAR 0 10
31139: ST_TO_ADDR
// end ;
31140: GO 31021
31142: POP
31143: POP
// result := array ;
31144: LD_ADDR_VAR 0 5
31148: PUSH
31149: LD_VAR 0 1
31153: ST_TO_ADDR
// end ;
31154: LD_VAR 0 5
31158: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31159: LD_INT 0
31161: PPUSH
31162: PPUSH
// result := 0 ;
31163: LD_ADDR_VAR 0 3
31167: PUSH
31168: LD_INT 0
31170: ST_TO_ADDR
// if not array or not value in array then
31171: LD_VAR 0 1
31175: NOT
31176: PUSH
31177: LD_VAR 0 2
31181: PUSH
31182: LD_VAR 0 1
31186: IN
31187: NOT
31188: OR
31189: IFFALSE 31193
// exit ;
31191: GO 31247
// for i = 1 to array do
31193: LD_ADDR_VAR 0 4
31197: PUSH
31198: DOUBLE
31199: LD_INT 1
31201: DEC
31202: ST_TO_ADDR
31203: LD_VAR 0 1
31207: PUSH
31208: FOR_TO
31209: IFFALSE 31245
// if value = array [ i ] then
31211: LD_VAR 0 2
31215: PUSH
31216: LD_VAR 0 1
31220: PUSH
31221: LD_VAR 0 4
31225: ARRAY
31226: EQUAL
31227: IFFALSE 31243
// begin result := i ;
31229: LD_ADDR_VAR 0 3
31233: PUSH
31234: LD_VAR 0 4
31238: ST_TO_ADDR
// exit ;
31239: POP
31240: POP
31241: GO 31247
// end ;
31243: GO 31208
31245: POP
31246: POP
// end ;
31247: LD_VAR 0 3
31251: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31252: LD_INT 0
31254: PPUSH
// vc_chassis := chassis ;
31255: LD_ADDR_OWVAR 37
31259: PUSH
31260: LD_VAR 0 1
31264: ST_TO_ADDR
// vc_engine := engine ;
31265: LD_ADDR_OWVAR 39
31269: PUSH
31270: LD_VAR 0 2
31274: ST_TO_ADDR
// vc_control := control ;
31275: LD_ADDR_OWVAR 38
31279: PUSH
31280: LD_VAR 0 3
31284: ST_TO_ADDR
// vc_weapon := weapon ;
31285: LD_ADDR_OWVAR 40
31289: PUSH
31290: LD_VAR 0 4
31294: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31295: LD_ADDR_OWVAR 41
31299: PUSH
31300: LD_VAR 0 5
31304: ST_TO_ADDR
// end ;
31305: LD_VAR 0 6
31309: RET
// export function WantPlant ( unit ) ; var task ; begin
31310: LD_INT 0
31312: PPUSH
31313: PPUSH
// result := false ;
31314: LD_ADDR_VAR 0 2
31318: PUSH
31319: LD_INT 0
31321: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31322: LD_ADDR_VAR 0 3
31326: PUSH
31327: LD_VAR 0 1
31331: PPUSH
31332: CALL_OW 437
31336: ST_TO_ADDR
// if task then
31337: LD_VAR 0 3
31341: IFFALSE 31369
// if task [ 1 ] [ 1 ] = p then
31343: LD_VAR 0 3
31347: PUSH
31348: LD_INT 1
31350: ARRAY
31351: PUSH
31352: LD_INT 1
31354: ARRAY
31355: PUSH
31356: LD_STRING p
31358: EQUAL
31359: IFFALSE 31369
// result := true ;
31361: LD_ADDR_VAR 0 2
31365: PUSH
31366: LD_INT 1
31368: ST_TO_ADDR
// end ;
31369: LD_VAR 0 2
31373: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31374: LD_INT 0
31376: PPUSH
31377: PPUSH
31378: PPUSH
31379: PPUSH
// if pos < 1 then
31380: LD_VAR 0 2
31384: PUSH
31385: LD_INT 1
31387: LESS
31388: IFFALSE 31392
// exit ;
31390: GO 31695
// if pos = 1 then
31392: LD_VAR 0 2
31396: PUSH
31397: LD_INT 1
31399: EQUAL
31400: IFFALSE 31433
// result := Replace ( arr , pos [ 1 ] , value ) else
31402: LD_ADDR_VAR 0 4
31406: PUSH
31407: LD_VAR 0 1
31411: PPUSH
31412: LD_VAR 0 2
31416: PUSH
31417: LD_INT 1
31419: ARRAY
31420: PPUSH
31421: LD_VAR 0 3
31425: PPUSH
31426: CALL_OW 1
31430: ST_TO_ADDR
31431: GO 31695
// begin tmp := arr ;
31433: LD_ADDR_VAR 0 6
31437: PUSH
31438: LD_VAR 0 1
31442: ST_TO_ADDR
// s_arr := [ tmp ] ;
31443: LD_ADDR_VAR 0 7
31447: PUSH
31448: LD_VAR 0 6
31452: PUSH
31453: EMPTY
31454: LIST
31455: ST_TO_ADDR
// for i = 1 to pos - 1 do
31456: LD_ADDR_VAR 0 5
31460: PUSH
31461: DOUBLE
31462: LD_INT 1
31464: DEC
31465: ST_TO_ADDR
31466: LD_VAR 0 2
31470: PUSH
31471: LD_INT 1
31473: MINUS
31474: PUSH
31475: FOR_TO
31476: IFFALSE 31521
// begin tmp := tmp [ pos [ i ] ] ;
31478: LD_ADDR_VAR 0 6
31482: PUSH
31483: LD_VAR 0 6
31487: PUSH
31488: LD_VAR 0 2
31492: PUSH
31493: LD_VAR 0 5
31497: ARRAY
31498: ARRAY
31499: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31500: LD_ADDR_VAR 0 7
31504: PUSH
31505: LD_VAR 0 7
31509: PUSH
31510: LD_VAR 0 6
31514: PUSH
31515: EMPTY
31516: LIST
31517: ADD
31518: ST_TO_ADDR
// end ;
31519: GO 31475
31521: POP
31522: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31523: LD_ADDR_VAR 0 6
31527: PUSH
31528: LD_VAR 0 6
31532: PPUSH
31533: LD_VAR 0 2
31537: PUSH
31538: LD_VAR 0 2
31542: ARRAY
31543: PPUSH
31544: LD_VAR 0 3
31548: PPUSH
31549: CALL_OW 1
31553: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31554: LD_ADDR_VAR 0 7
31558: PUSH
31559: LD_VAR 0 7
31563: PPUSH
31564: LD_VAR 0 7
31568: PPUSH
31569: LD_VAR 0 6
31573: PPUSH
31574: CALL_OW 1
31578: ST_TO_ADDR
// for i = s_arr downto 2 do
31579: LD_ADDR_VAR 0 5
31583: PUSH
31584: DOUBLE
31585: LD_VAR 0 7
31589: INC
31590: ST_TO_ADDR
31591: LD_INT 2
31593: PUSH
31594: FOR_DOWNTO
31595: IFFALSE 31679
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31597: LD_ADDR_VAR 0 6
31601: PUSH
31602: LD_VAR 0 7
31606: PUSH
31607: LD_VAR 0 5
31611: PUSH
31612: LD_INT 1
31614: MINUS
31615: ARRAY
31616: PPUSH
31617: LD_VAR 0 2
31621: PUSH
31622: LD_VAR 0 5
31626: PUSH
31627: LD_INT 1
31629: MINUS
31630: ARRAY
31631: PPUSH
31632: LD_VAR 0 7
31636: PUSH
31637: LD_VAR 0 5
31641: ARRAY
31642: PPUSH
31643: CALL_OW 1
31647: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31648: LD_ADDR_VAR 0 7
31652: PUSH
31653: LD_VAR 0 7
31657: PPUSH
31658: LD_VAR 0 5
31662: PUSH
31663: LD_INT 1
31665: MINUS
31666: PPUSH
31667: LD_VAR 0 6
31671: PPUSH
31672: CALL_OW 1
31676: ST_TO_ADDR
// end ;
31677: GO 31594
31679: POP
31680: POP
// result := s_arr [ 1 ] ;
31681: LD_ADDR_VAR 0 4
31685: PUSH
31686: LD_VAR 0 7
31690: PUSH
31691: LD_INT 1
31693: ARRAY
31694: ST_TO_ADDR
// end ; end ;
31695: LD_VAR 0 4
31699: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31700: LD_INT 0
31702: PPUSH
31703: PPUSH
// if not list then
31704: LD_VAR 0 1
31708: NOT
31709: IFFALSE 31713
// exit ;
31711: GO 31804
// i := list [ pos1 ] ;
31713: LD_ADDR_VAR 0 5
31717: PUSH
31718: LD_VAR 0 1
31722: PUSH
31723: LD_VAR 0 2
31727: ARRAY
31728: ST_TO_ADDR
// if not i then
31729: LD_VAR 0 5
31733: NOT
31734: IFFALSE 31738
// exit ;
31736: GO 31804
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31738: LD_ADDR_VAR 0 1
31742: PUSH
31743: LD_VAR 0 1
31747: PPUSH
31748: LD_VAR 0 2
31752: PPUSH
31753: LD_VAR 0 1
31757: PUSH
31758: LD_VAR 0 3
31762: ARRAY
31763: PPUSH
31764: CALL_OW 1
31768: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31769: LD_ADDR_VAR 0 1
31773: PUSH
31774: LD_VAR 0 1
31778: PPUSH
31779: LD_VAR 0 3
31783: PPUSH
31784: LD_VAR 0 5
31788: PPUSH
31789: CALL_OW 1
31793: ST_TO_ADDR
// result := list ;
31794: LD_ADDR_VAR 0 4
31798: PUSH
31799: LD_VAR 0 1
31803: ST_TO_ADDR
// end ;
31804: LD_VAR 0 4
31808: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31809: LD_INT 0
31811: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31812: LD_ADDR_VAR 0 5
31816: PUSH
31817: LD_VAR 0 1
31821: PPUSH
31822: CALL_OW 250
31826: PPUSH
31827: LD_VAR 0 1
31831: PPUSH
31832: CALL_OW 251
31836: PPUSH
31837: LD_VAR 0 2
31841: PPUSH
31842: LD_VAR 0 3
31846: PPUSH
31847: LD_VAR 0 4
31851: PPUSH
31852: CALL 31862 0 5
31856: ST_TO_ADDR
// end ;
31857: LD_VAR 0 5
31861: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31862: LD_INT 0
31864: PPUSH
31865: PPUSH
31866: PPUSH
31867: PPUSH
// if not list then
31868: LD_VAR 0 3
31872: NOT
31873: IFFALSE 31877
// exit ;
31875: GO 32265
// result := [ ] ;
31877: LD_ADDR_VAR 0 6
31881: PUSH
31882: EMPTY
31883: ST_TO_ADDR
// for i in list do
31884: LD_ADDR_VAR 0 7
31888: PUSH
31889: LD_VAR 0 3
31893: PUSH
31894: FOR_IN
31895: IFFALSE 32097
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31897: LD_ADDR_VAR 0 9
31901: PUSH
31902: LD_VAR 0 7
31906: PPUSH
31907: LD_VAR 0 1
31911: PPUSH
31912: LD_VAR 0 2
31916: PPUSH
31917: CALL_OW 297
31921: ST_TO_ADDR
// if not result then
31922: LD_VAR 0 6
31926: NOT
31927: IFFALSE 31953
// result := [ [ i , tmp ] ] else
31929: LD_ADDR_VAR 0 6
31933: PUSH
31934: LD_VAR 0 7
31938: PUSH
31939: LD_VAR 0 9
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: EMPTY
31949: LIST
31950: ST_TO_ADDR
31951: GO 32095
// begin if result [ result ] [ 2 ] < tmp then
31953: LD_VAR 0 6
31957: PUSH
31958: LD_VAR 0 6
31962: ARRAY
31963: PUSH
31964: LD_INT 2
31966: ARRAY
31967: PUSH
31968: LD_VAR 0 9
31972: LESS
31973: IFFALSE 32015
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31975: LD_ADDR_VAR 0 6
31979: PUSH
31980: LD_VAR 0 6
31984: PPUSH
31985: LD_VAR 0 6
31989: PUSH
31990: LD_INT 1
31992: PLUS
31993: PPUSH
31994: LD_VAR 0 7
31998: PUSH
31999: LD_VAR 0 9
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PPUSH
32008: CALL_OW 2
32012: ST_TO_ADDR
32013: GO 32095
// for j = 1 to result do
32015: LD_ADDR_VAR 0 8
32019: PUSH
32020: DOUBLE
32021: LD_INT 1
32023: DEC
32024: ST_TO_ADDR
32025: LD_VAR 0 6
32029: PUSH
32030: FOR_TO
32031: IFFALSE 32093
// begin if tmp < result [ j ] [ 2 ] then
32033: LD_VAR 0 9
32037: PUSH
32038: LD_VAR 0 6
32042: PUSH
32043: LD_VAR 0 8
32047: ARRAY
32048: PUSH
32049: LD_INT 2
32051: ARRAY
32052: LESS
32053: IFFALSE 32091
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32055: LD_ADDR_VAR 0 6
32059: PUSH
32060: LD_VAR 0 6
32064: PPUSH
32065: LD_VAR 0 8
32069: PPUSH
32070: LD_VAR 0 7
32074: PUSH
32075: LD_VAR 0 9
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PPUSH
32084: CALL_OW 2
32088: ST_TO_ADDR
// break ;
32089: GO 32093
// end ; end ;
32091: GO 32030
32093: POP
32094: POP
// end ; end ;
32095: GO 31894
32097: POP
32098: POP
// if result and not asc then
32099: LD_VAR 0 6
32103: PUSH
32104: LD_VAR 0 4
32108: NOT
32109: AND
32110: IFFALSE 32185
// begin tmp := result ;
32112: LD_ADDR_VAR 0 9
32116: PUSH
32117: LD_VAR 0 6
32121: ST_TO_ADDR
// for i = tmp downto 1 do
32122: LD_ADDR_VAR 0 7
32126: PUSH
32127: DOUBLE
32128: LD_VAR 0 9
32132: INC
32133: ST_TO_ADDR
32134: LD_INT 1
32136: PUSH
32137: FOR_DOWNTO
32138: IFFALSE 32183
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32140: LD_ADDR_VAR 0 6
32144: PUSH
32145: LD_VAR 0 6
32149: PPUSH
32150: LD_VAR 0 9
32154: PUSH
32155: LD_VAR 0 7
32159: MINUS
32160: PUSH
32161: LD_INT 1
32163: PLUS
32164: PPUSH
32165: LD_VAR 0 9
32169: PUSH
32170: LD_VAR 0 7
32174: ARRAY
32175: PPUSH
32176: CALL_OW 1
32180: ST_TO_ADDR
32181: GO 32137
32183: POP
32184: POP
// end ; tmp := [ ] ;
32185: LD_ADDR_VAR 0 9
32189: PUSH
32190: EMPTY
32191: ST_TO_ADDR
// if mode then
32192: LD_VAR 0 5
32196: IFFALSE 32265
// begin for i = 1 to result do
32198: LD_ADDR_VAR 0 7
32202: PUSH
32203: DOUBLE
32204: LD_INT 1
32206: DEC
32207: ST_TO_ADDR
32208: LD_VAR 0 6
32212: PUSH
32213: FOR_TO
32214: IFFALSE 32253
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32216: LD_ADDR_VAR 0 9
32220: PUSH
32221: LD_VAR 0 9
32225: PPUSH
32226: LD_VAR 0 7
32230: PPUSH
32231: LD_VAR 0 6
32235: PUSH
32236: LD_VAR 0 7
32240: ARRAY
32241: PUSH
32242: LD_INT 1
32244: ARRAY
32245: PPUSH
32246: CALL_OW 1
32250: ST_TO_ADDR
32251: GO 32213
32253: POP
32254: POP
// result := tmp ;
32255: LD_ADDR_VAR 0 6
32259: PUSH
32260: LD_VAR 0 9
32264: ST_TO_ADDR
// end ; end ;
32265: LD_VAR 0 6
32269: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32270: LD_INT 0
32272: PPUSH
32273: PPUSH
32274: PPUSH
32275: PPUSH
32276: PPUSH
32277: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32278: LD_ADDR_VAR 0 5
32282: PUSH
32283: LD_INT 0
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: LD_INT 0
32291: PUSH
32292: EMPTY
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: ST_TO_ADDR
// if not x or not y then
32300: LD_VAR 0 2
32304: NOT
32305: PUSH
32306: LD_VAR 0 3
32310: NOT
32311: OR
32312: IFFALSE 32316
// exit ;
32314: GO 33968
// if not range then
32316: LD_VAR 0 4
32320: NOT
32321: IFFALSE 32331
// range := 10 ;
32323: LD_ADDR_VAR 0 4
32327: PUSH
32328: LD_INT 10
32330: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32331: LD_ADDR_VAR 0 8
32335: PUSH
32336: LD_INT 81
32338: PUSH
32339: LD_VAR 0 1
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 92
32350: PUSH
32351: LD_VAR 0 2
32355: PUSH
32356: LD_VAR 0 3
32360: PUSH
32361: LD_VAR 0 4
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 3
32374: PUSH
32375: LD_INT 21
32377: PUSH
32378: LD_INT 3
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: LIST
32393: PPUSH
32394: CALL_OW 69
32398: ST_TO_ADDR
// if not tmp then
32399: LD_VAR 0 8
32403: NOT
32404: IFFALSE 32408
// exit ;
32406: GO 33968
// for i in tmp do
32408: LD_ADDR_VAR 0 6
32412: PUSH
32413: LD_VAR 0 8
32417: PUSH
32418: FOR_IN
32419: IFFALSE 33943
// begin points := [ 0 , 0 , 0 ] ;
32421: LD_ADDR_VAR 0 9
32425: PUSH
32426: LD_INT 0
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: LD_INT 0
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: LIST
32439: ST_TO_ADDR
// bpoints := 1 ;
32440: LD_ADDR_VAR 0 10
32444: PUSH
32445: LD_INT 1
32447: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32448: LD_VAR 0 6
32452: PPUSH
32453: CALL_OW 247
32457: PUSH
32458: LD_INT 1
32460: DOUBLE
32461: EQUAL
32462: IFTRUE 32466
32464: GO 33044
32466: POP
// begin if GetClass ( i ) = 1 then
32467: LD_VAR 0 6
32471: PPUSH
32472: CALL_OW 257
32476: PUSH
32477: LD_INT 1
32479: EQUAL
32480: IFFALSE 32501
// points := [ 10 , 5 , 3 ] ;
32482: LD_ADDR_VAR 0 9
32486: PUSH
32487: LD_INT 10
32489: PUSH
32490: LD_INT 5
32492: PUSH
32493: LD_INT 3
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: LIST
32500: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32501: LD_VAR 0 6
32505: PPUSH
32506: CALL_OW 257
32510: PUSH
32511: LD_INT 2
32513: PUSH
32514: LD_INT 3
32516: PUSH
32517: LD_INT 4
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: LIST
32524: IN
32525: IFFALSE 32546
// points := [ 3 , 2 , 1 ] ;
32527: LD_ADDR_VAR 0 9
32531: PUSH
32532: LD_INT 3
32534: PUSH
32535: LD_INT 2
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: LIST
32545: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32546: LD_VAR 0 6
32550: PPUSH
32551: CALL_OW 257
32555: PUSH
32556: LD_INT 5
32558: EQUAL
32559: IFFALSE 32580
// points := [ 130 , 5 , 2 ] ;
32561: LD_ADDR_VAR 0 9
32565: PUSH
32566: LD_INT 130
32568: PUSH
32569: LD_INT 5
32571: PUSH
32572: LD_INT 2
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: LIST
32579: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32580: LD_VAR 0 6
32584: PPUSH
32585: CALL_OW 257
32589: PUSH
32590: LD_INT 8
32592: EQUAL
32593: IFFALSE 32614
// points := [ 35 , 35 , 30 ] ;
32595: LD_ADDR_VAR 0 9
32599: PUSH
32600: LD_INT 35
32602: PUSH
32603: LD_INT 35
32605: PUSH
32606: LD_INT 30
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: LIST
32613: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32614: LD_VAR 0 6
32618: PPUSH
32619: CALL_OW 257
32623: PUSH
32624: LD_INT 9
32626: EQUAL
32627: IFFALSE 32648
// points := [ 20 , 55 , 40 ] ;
32629: LD_ADDR_VAR 0 9
32633: PUSH
32634: LD_INT 20
32636: PUSH
32637: LD_INT 55
32639: PUSH
32640: LD_INT 40
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: LIST
32647: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32648: LD_VAR 0 6
32652: PPUSH
32653: CALL_OW 257
32657: PUSH
32658: LD_INT 12
32660: PUSH
32661: LD_INT 16
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: IN
32668: IFFALSE 32689
// points := [ 5 , 3 , 2 ] ;
32670: LD_ADDR_VAR 0 9
32674: PUSH
32675: LD_INT 5
32677: PUSH
32678: LD_INT 3
32680: PUSH
32681: LD_INT 2
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32689: LD_VAR 0 6
32693: PPUSH
32694: CALL_OW 257
32698: PUSH
32699: LD_INT 17
32701: EQUAL
32702: IFFALSE 32723
// points := [ 100 , 50 , 75 ] ;
32704: LD_ADDR_VAR 0 9
32708: PUSH
32709: LD_INT 100
32711: PUSH
32712: LD_INT 50
32714: PUSH
32715: LD_INT 75
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: LIST
32722: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32723: LD_VAR 0 6
32727: PPUSH
32728: CALL_OW 257
32732: PUSH
32733: LD_INT 15
32735: EQUAL
32736: IFFALSE 32757
// points := [ 10 , 5 , 3 ] ;
32738: LD_ADDR_VAR 0 9
32742: PUSH
32743: LD_INT 10
32745: PUSH
32746: LD_INT 5
32748: PUSH
32749: LD_INT 3
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: LIST
32756: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32757: LD_VAR 0 6
32761: PPUSH
32762: CALL_OW 257
32766: PUSH
32767: LD_INT 14
32769: EQUAL
32770: IFFALSE 32791
// points := [ 10 , 0 , 0 ] ;
32772: LD_ADDR_VAR 0 9
32776: PUSH
32777: LD_INT 10
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: LIST
32790: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32791: LD_VAR 0 6
32795: PPUSH
32796: CALL_OW 257
32800: PUSH
32801: LD_INT 11
32803: EQUAL
32804: IFFALSE 32825
// points := [ 30 , 10 , 5 ] ;
32806: LD_ADDR_VAR 0 9
32810: PUSH
32811: LD_INT 30
32813: PUSH
32814: LD_INT 10
32816: PUSH
32817: LD_INT 5
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32825: LD_VAR 0 1
32829: PPUSH
32830: LD_INT 5
32832: PPUSH
32833: CALL_OW 321
32837: PUSH
32838: LD_INT 2
32840: EQUAL
32841: IFFALSE 32858
// bpoints := bpoints * 1.8 ;
32843: LD_ADDR_VAR 0 10
32847: PUSH
32848: LD_VAR 0 10
32852: PUSH
32853: LD_REAL  1.80000000000000E+0000
32856: MUL
32857: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32858: LD_VAR 0 6
32862: PPUSH
32863: CALL_OW 257
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: LD_INT 2
32873: PUSH
32874: LD_INT 3
32876: PUSH
32877: LD_INT 4
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: IN
32886: PUSH
32887: LD_VAR 0 1
32891: PPUSH
32892: LD_INT 51
32894: PPUSH
32895: CALL_OW 321
32899: PUSH
32900: LD_INT 2
32902: EQUAL
32903: AND
32904: IFFALSE 32921
// bpoints := bpoints * 1.2 ;
32906: LD_ADDR_VAR 0 10
32910: PUSH
32911: LD_VAR 0 10
32915: PUSH
32916: LD_REAL  1.20000000000000E+0000
32919: MUL
32920: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32921: LD_VAR 0 6
32925: PPUSH
32926: CALL_OW 257
32930: PUSH
32931: LD_INT 5
32933: PUSH
32934: LD_INT 7
32936: PUSH
32937: LD_INT 9
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: LIST
32944: IN
32945: PUSH
32946: LD_VAR 0 1
32950: PPUSH
32951: LD_INT 52
32953: PPUSH
32954: CALL_OW 321
32958: PUSH
32959: LD_INT 2
32961: EQUAL
32962: AND
32963: IFFALSE 32980
// bpoints := bpoints * 1.5 ;
32965: LD_ADDR_VAR 0 10
32969: PUSH
32970: LD_VAR 0 10
32974: PUSH
32975: LD_REAL  1.50000000000000E+0000
32978: MUL
32979: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32980: LD_VAR 0 1
32984: PPUSH
32985: LD_INT 66
32987: PPUSH
32988: CALL_OW 321
32992: PUSH
32993: LD_INT 2
32995: EQUAL
32996: IFFALSE 33013
// bpoints := bpoints * 1.1 ;
32998: LD_ADDR_VAR 0 10
33002: PUSH
33003: LD_VAR 0 10
33007: PUSH
33008: LD_REAL  1.10000000000000E+0000
33011: MUL
33012: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33013: LD_ADDR_VAR 0 10
33017: PUSH
33018: LD_VAR 0 10
33022: PUSH
33023: LD_VAR 0 6
33027: PPUSH
33028: LD_INT 1
33030: PPUSH
33031: CALL_OW 259
33035: PUSH
33036: LD_REAL  1.15000000000000E+0000
33039: MUL
33040: MUL
33041: ST_TO_ADDR
// end ; unit_vehicle :
33042: GO 33872
33044: LD_INT 2
33046: DOUBLE
33047: EQUAL
33048: IFTRUE 33052
33050: GO 33860
33052: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33053: LD_VAR 0 6
33057: PPUSH
33058: CALL_OW 264
33062: PUSH
33063: LD_INT 2
33065: PUSH
33066: LD_INT 42
33068: PUSH
33069: LD_INT 24
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: LIST
33076: IN
33077: IFFALSE 33098
// points := [ 25 , 5 , 3 ] ;
33079: LD_ADDR_VAR 0 9
33083: PUSH
33084: LD_INT 25
33086: PUSH
33087: LD_INT 5
33089: PUSH
33090: LD_INT 3
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: LIST
33097: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33098: LD_VAR 0 6
33102: PPUSH
33103: CALL_OW 264
33107: PUSH
33108: LD_INT 4
33110: PUSH
33111: LD_INT 43
33113: PUSH
33114: LD_INT 25
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: LIST
33121: IN
33122: IFFALSE 33143
// points := [ 40 , 15 , 5 ] ;
33124: LD_ADDR_VAR 0 9
33128: PUSH
33129: LD_INT 40
33131: PUSH
33132: LD_INT 15
33134: PUSH
33135: LD_INT 5
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: LIST
33142: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33143: LD_VAR 0 6
33147: PPUSH
33148: CALL_OW 264
33152: PUSH
33153: LD_INT 3
33155: PUSH
33156: LD_INT 23
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: IN
33163: IFFALSE 33184
// points := [ 7 , 25 , 8 ] ;
33165: LD_ADDR_VAR 0 9
33169: PUSH
33170: LD_INT 7
33172: PUSH
33173: LD_INT 25
33175: PUSH
33176: LD_INT 8
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: LIST
33183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33184: LD_VAR 0 6
33188: PPUSH
33189: CALL_OW 264
33193: PUSH
33194: LD_INT 5
33196: PUSH
33197: LD_INT 27
33199: PUSH
33200: LD_INT 44
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: LIST
33207: IN
33208: IFFALSE 33229
// points := [ 14 , 50 , 16 ] ;
33210: LD_ADDR_VAR 0 9
33214: PUSH
33215: LD_INT 14
33217: PUSH
33218: LD_INT 50
33220: PUSH
33221: LD_INT 16
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: LIST
33228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33229: LD_VAR 0 6
33233: PPUSH
33234: CALL_OW 264
33238: PUSH
33239: LD_INT 6
33241: PUSH
33242: LD_INT 46
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: IN
33249: IFFALSE 33270
// points := [ 32 , 120 , 70 ] ;
33251: LD_ADDR_VAR 0 9
33255: PUSH
33256: LD_INT 32
33258: PUSH
33259: LD_INT 120
33261: PUSH
33262: LD_INT 70
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: LIST
33269: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33270: LD_VAR 0 6
33274: PPUSH
33275: CALL_OW 264
33279: PUSH
33280: LD_INT 7
33282: PUSH
33283: LD_INT 28
33285: PUSH
33286: LD_INT 45
33288: PUSH
33289: LD_EXP 29
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: IN
33300: IFFALSE 33321
// points := [ 35 , 20 , 45 ] ;
33302: LD_ADDR_VAR 0 9
33306: PUSH
33307: LD_INT 35
33309: PUSH
33310: LD_INT 20
33312: PUSH
33313: LD_INT 45
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: LIST
33320: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33321: LD_VAR 0 6
33325: PPUSH
33326: CALL_OW 264
33330: PUSH
33331: LD_INT 47
33333: PUSH
33334: EMPTY
33335: LIST
33336: IN
33337: IFFALSE 33358
// points := [ 67 , 45 , 75 ] ;
33339: LD_ADDR_VAR 0 9
33343: PUSH
33344: LD_INT 67
33346: PUSH
33347: LD_INT 45
33349: PUSH
33350: LD_INT 75
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: LIST
33357: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33358: LD_VAR 0 6
33362: PPUSH
33363: CALL_OW 264
33367: PUSH
33368: LD_INT 26
33370: PUSH
33371: EMPTY
33372: LIST
33373: IN
33374: IFFALSE 33395
// points := [ 120 , 30 , 80 ] ;
33376: LD_ADDR_VAR 0 9
33380: PUSH
33381: LD_INT 120
33383: PUSH
33384: LD_INT 30
33386: PUSH
33387: LD_INT 80
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: LIST
33394: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33395: LD_VAR 0 6
33399: PPUSH
33400: CALL_OW 264
33404: PUSH
33405: LD_INT 22
33407: PUSH
33408: EMPTY
33409: LIST
33410: IN
33411: IFFALSE 33432
// points := [ 40 , 1 , 1 ] ;
33413: LD_ADDR_VAR 0 9
33417: PUSH
33418: LD_INT 40
33420: PUSH
33421: LD_INT 1
33423: PUSH
33424: LD_INT 1
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: LIST
33431: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33432: LD_VAR 0 6
33436: PPUSH
33437: CALL_OW 264
33441: PUSH
33442: LD_INT 29
33444: PUSH
33445: EMPTY
33446: LIST
33447: IN
33448: IFFALSE 33469
// points := [ 70 , 200 , 400 ] ;
33450: LD_ADDR_VAR 0 9
33454: PUSH
33455: LD_INT 70
33457: PUSH
33458: LD_INT 200
33460: PUSH
33461: LD_INT 400
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: LIST
33468: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33469: LD_VAR 0 6
33473: PPUSH
33474: CALL_OW 264
33478: PUSH
33479: LD_INT 14
33481: PUSH
33482: LD_INT 53
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: IN
33489: IFFALSE 33510
// points := [ 40 , 10 , 20 ] ;
33491: LD_ADDR_VAR 0 9
33495: PUSH
33496: LD_INT 40
33498: PUSH
33499: LD_INT 10
33501: PUSH
33502: LD_INT 20
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33510: LD_VAR 0 6
33514: PPUSH
33515: CALL_OW 264
33519: PUSH
33520: LD_INT 9
33522: PUSH
33523: EMPTY
33524: LIST
33525: IN
33526: IFFALSE 33547
// points := [ 5 , 70 , 20 ] ;
33528: LD_ADDR_VAR 0 9
33532: PUSH
33533: LD_INT 5
33535: PUSH
33536: LD_INT 70
33538: PUSH
33539: LD_INT 20
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: LIST
33546: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33547: LD_VAR 0 6
33551: PPUSH
33552: CALL_OW 264
33556: PUSH
33557: LD_INT 10
33559: PUSH
33560: EMPTY
33561: LIST
33562: IN
33563: IFFALSE 33584
// points := [ 35 , 110 , 70 ] ;
33565: LD_ADDR_VAR 0 9
33569: PUSH
33570: LD_INT 35
33572: PUSH
33573: LD_INT 110
33575: PUSH
33576: LD_INT 70
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: LIST
33583: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33584: LD_VAR 0 6
33588: PPUSH
33589: CALL_OW 265
33593: PUSH
33594: LD_INT 25
33596: EQUAL
33597: IFFALSE 33618
// points := [ 80 , 65 , 100 ] ;
33599: LD_ADDR_VAR 0 9
33603: PUSH
33604: LD_INT 80
33606: PUSH
33607: LD_INT 65
33609: PUSH
33610: LD_INT 100
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: LIST
33617: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33618: LD_VAR 0 6
33622: PPUSH
33623: CALL_OW 263
33627: PUSH
33628: LD_INT 1
33630: EQUAL
33631: IFFALSE 33666
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33633: LD_ADDR_VAR 0 10
33637: PUSH
33638: LD_VAR 0 10
33642: PUSH
33643: LD_VAR 0 6
33647: PPUSH
33648: CALL_OW 311
33652: PPUSH
33653: LD_INT 3
33655: PPUSH
33656: CALL_OW 259
33660: PUSH
33661: LD_INT 4
33663: MUL
33664: MUL
33665: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33666: LD_VAR 0 6
33670: PPUSH
33671: CALL_OW 263
33675: PUSH
33676: LD_INT 2
33678: EQUAL
33679: IFFALSE 33730
// begin j := IsControledBy ( i ) ;
33681: LD_ADDR_VAR 0 7
33685: PUSH
33686: LD_VAR 0 6
33690: PPUSH
33691: CALL_OW 312
33695: ST_TO_ADDR
// if j then
33696: LD_VAR 0 7
33700: IFFALSE 33730
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33702: LD_ADDR_VAR 0 10
33706: PUSH
33707: LD_VAR 0 10
33711: PUSH
33712: LD_VAR 0 7
33716: PPUSH
33717: LD_INT 3
33719: PPUSH
33720: CALL_OW 259
33724: PUSH
33725: LD_INT 3
33727: MUL
33728: MUL
33729: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33730: LD_VAR 0 6
33734: PPUSH
33735: CALL_OW 264
33739: PUSH
33740: LD_INT 5
33742: PUSH
33743: LD_INT 6
33745: PUSH
33746: LD_INT 46
33748: PUSH
33749: LD_INT 44
33751: PUSH
33752: LD_INT 47
33754: PUSH
33755: LD_INT 45
33757: PUSH
33758: LD_INT 28
33760: PUSH
33761: LD_INT 7
33763: PUSH
33764: LD_INT 27
33766: PUSH
33767: LD_INT 29
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: IN
33782: PUSH
33783: LD_VAR 0 1
33787: PPUSH
33788: LD_INT 52
33790: PPUSH
33791: CALL_OW 321
33795: PUSH
33796: LD_INT 2
33798: EQUAL
33799: AND
33800: IFFALSE 33817
// bpoints := bpoints * 1.2 ;
33802: LD_ADDR_VAR 0 10
33806: PUSH
33807: LD_VAR 0 10
33811: PUSH
33812: LD_REAL  1.20000000000000E+0000
33815: MUL
33816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33817: LD_VAR 0 6
33821: PPUSH
33822: CALL_OW 264
33826: PUSH
33827: LD_INT 6
33829: PUSH
33830: LD_INT 46
33832: PUSH
33833: LD_INT 47
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: LIST
33840: IN
33841: IFFALSE 33858
// bpoints := bpoints * 1.2 ;
33843: LD_ADDR_VAR 0 10
33847: PUSH
33848: LD_VAR 0 10
33852: PUSH
33853: LD_REAL  1.20000000000000E+0000
33856: MUL
33857: ST_TO_ADDR
// end ; unit_building :
33858: GO 33872
33860: LD_INT 3
33862: DOUBLE
33863: EQUAL
33864: IFTRUE 33868
33866: GO 33871
33868: POP
// ; end ;
33869: GO 33872
33871: POP
// for j = 1 to 3 do
33872: LD_ADDR_VAR 0 7
33876: PUSH
33877: DOUBLE
33878: LD_INT 1
33880: DEC
33881: ST_TO_ADDR
33882: LD_INT 3
33884: PUSH
33885: FOR_TO
33886: IFFALSE 33939
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33888: LD_ADDR_VAR 0 5
33892: PUSH
33893: LD_VAR 0 5
33897: PPUSH
33898: LD_VAR 0 7
33902: PPUSH
33903: LD_VAR 0 5
33907: PUSH
33908: LD_VAR 0 7
33912: ARRAY
33913: PUSH
33914: LD_VAR 0 9
33918: PUSH
33919: LD_VAR 0 7
33923: ARRAY
33924: PUSH
33925: LD_VAR 0 10
33929: MUL
33930: PLUS
33931: PPUSH
33932: CALL_OW 1
33936: ST_TO_ADDR
33937: GO 33885
33939: POP
33940: POP
// end ;
33941: GO 32418
33943: POP
33944: POP
// result := Replace ( result , 4 , tmp ) ;
33945: LD_ADDR_VAR 0 5
33949: PUSH
33950: LD_VAR 0 5
33954: PPUSH
33955: LD_INT 4
33957: PPUSH
33958: LD_VAR 0 8
33962: PPUSH
33963: CALL_OW 1
33967: ST_TO_ADDR
// end ;
33968: LD_VAR 0 5
33972: RET
// export function DangerAtRange ( unit , range ) ; begin
33973: LD_INT 0
33975: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33976: LD_ADDR_VAR 0 3
33980: PUSH
33981: LD_VAR 0 1
33985: PPUSH
33986: CALL_OW 255
33990: PPUSH
33991: LD_VAR 0 1
33995: PPUSH
33996: CALL_OW 250
34000: PPUSH
34001: LD_VAR 0 1
34005: PPUSH
34006: CALL_OW 251
34010: PPUSH
34011: LD_VAR 0 2
34015: PPUSH
34016: CALL 32270 0 4
34020: ST_TO_ADDR
// end ;
34021: LD_VAR 0 3
34025: RET
// export function DangerInArea ( side , area ) ; begin
34026: LD_INT 0
34028: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34029: LD_ADDR_VAR 0 3
34033: PUSH
34034: LD_VAR 0 2
34038: PPUSH
34039: LD_INT 81
34041: PUSH
34042: LD_VAR 0 1
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PPUSH
34051: CALL_OW 70
34055: ST_TO_ADDR
// end ;
34056: LD_VAR 0 3
34060: RET
// export function IsExtension ( b ) ; begin
34061: LD_INT 0
34063: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34064: LD_ADDR_VAR 0 2
34068: PUSH
34069: LD_VAR 0 1
34073: PUSH
34074: LD_INT 23
34076: PUSH
34077: LD_INT 20
34079: PUSH
34080: LD_INT 22
34082: PUSH
34083: LD_INT 17
34085: PUSH
34086: LD_INT 24
34088: PUSH
34089: LD_INT 21
34091: PUSH
34092: LD_INT 19
34094: PUSH
34095: LD_INT 16
34097: PUSH
34098: LD_INT 25
34100: PUSH
34101: LD_INT 18
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: IN
34116: ST_TO_ADDR
// end ;
34117: LD_VAR 0 2
34121: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34122: LD_INT 0
34124: PPUSH
34125: PPUSH
34126: PPUSH
// result := [ ] ;
34127: LD_ADDR_VAR 0 4
34131: PUSH
34132: EMPTY
34133: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34134: LD_ADDR_VAR 0 5
34138: PUSH
34139: LD_VAR 0 2
34143: PPUSH
34144: LD_INT 21
34146: PUSH
34147: LD_INT 3
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PPUSH
34154: CALL_OW 70
34158: ST_TO_ADDR
// if not tmp then
34159: LD_VAR 0 5
34163: NOT
34164: IFFALSE 34168
// exit ;
34166: GO 34232
// if checkLink then
34168: LD_VAR 0 3
34172: IFFALSE 34222
// begin for i in tmp do
34174: LD_ADDR_VAR 0 6
34178: PUSH
34179: LD_VAR 0 5
34183: PUSH
34184: FOR_IN
34185: IFFALSE 34220
// if GetBase ( i ) <> base then
34187: LD_VAR 0 6
34191: PPUSH
34192: CALL_OW 274
34196: PUSH
34197: LD_VAR 0 1
34201: NONEQUAL
34202: IFFALSE 34218
// ComLinkToBase ( base , i ) ;
34204: LD_VAR 0 1
34208: PPUSH
34209: LD_VAR 0 6
34213: PPUSH
34214: CALL_OW 169
34218: GO 34184
34220: POP
34221: POP
// end ; result := tmp ;
34222: LD_ADDR_VAR 0 4
34226: PUSH
34227: LD_VAR 0 5
34231: ST_TO_ADDR
// end ;
34232: LD_VAR 0 4
34236: RET
// export function ComComplete ( units , b ) ; var i ; begin
34237: LD_INT 0
34239: PPUSH
34240: PPUSH
// if not units then
34241: LD_VAR 0 1
34245: NOT
34246: IFFALSE 34250
// exit ;
34248: GO 34340
// for i in units do
34250: LD_ADDR_VAR 0 4
34254: PUSH
34255: LD_VAR 0 1
34259: PUSH
34260: FOR_IN
34261: IFFALSE 34338
// if BuildingStatus ( b ) = bs_build then
34263: LD_VAR 0 2
34267: PPUSH
34268: CALL_OW 461
34272: PUSH
34273: LD_INT 1
34275: EQUAL
34276: IFFALSE 34336
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34278: LD_VAR 0 4
34282: PPUSH
34283: LD_STRING h
34285: PUSH
34286: LD_VAR 0 2
34290: PPUSH
34291: CALL_OW 250
34295: PUSH
34296: LD_VAR 0 2
34300: PPUSH
34301: CALL_OW 251
34305: PUSH
34306: LD_VAR 0 2
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: LD_INT 0
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: PUSH
34329: EMPTY
34330: LIST
34331: PPUSH
34332: CALL_OW 446
34336: GO 34260
34338: POP
34339: POP
// end ;
34340: LD_VAR 0 3
34344: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34345: LD_INT 0
34347: PPUSH
34348: PPUSH
34349: PPUSH
34350: PPUSH
34351: PPUSH
34352: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34353: LD_VAR 0 1
34357: NOT
34358: PUSH
34359: LD_VAR 0 1
34363: PPUSH
34364: CALL_OW 263
34368: PUSH
34369: LD_INT 2
34371: NONEQUAL
34372: OR
34373: IFFALSE 34377
// exit ;
34375: GO 34693
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34377: LD_ADDR_VAR 0 6
34381: PUSH
34382: LD_INT 22
34384: PUSH
34385: LD_VAR 0 1
34389: PPUSH
34390: CALL_OW 255
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 2
34401: PUSH
34402: LD_INT 30
34404: PUSH
34405: LD_INT 36
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 34
34414: PUSH
34415: LD_INT 31
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: LIST
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PPUSH
34431: CALL_OW 69
34435: ST_TO_ADDR
// if not tmp then
34436: LD_VAR 0 6
34440: NOT
34441: IFFALSE 34445
// exit ;
34443: GO 34693
// result := [ ] ;
34445: LD_ADDR_VAR 0 2
34449: PUSH
34450: EMPTY
34451: ST_TO_ADDR
// for i in tmp do
34452: LD_ADDR_VAR 0 3
34456: PUSH
34457: LD_VAR 0 6
34461: PUSH
34462: FOR_IN
34463: IFFALSE 34534
// begin t := UnitsInside ( i ) ;
34465: LD_ADDR_VAR 0 4
34469: PUSH
34470: LD_VAR 0 3
34474: PPUSH
34475: CALL_OW 313
34479: ST_TO_ADDR
// if t then
34480: LD_VAR 0 4
34484: IFFALSE 34532
// for j in t do
34486: LD_ADDR_VAR 0 7
34490: PUSH
34491: LD_VAR 0 4
34495: PUSH
34496: FOR_IN
34497: IFFALSE 34530
// result := Replace ( result , result + 1 , j ) ;
34499: LD_ADDR_VAR 0 2
34503: PUSH
34504: LD_VAR 0 2
34508: PPUSH
34509: LD_VAR 0 2
34513: PUSH
34514: LD_INT 1
34516: PLUS
34517: PPUSH
34518: LD_VAR 0 7
34522: PPUSH
34523: CALL_OW 1
34527: ST_TO_ADDR
34528: GO 34496
34530: POP
34531: POP
// end ;
34532: GO 34462
34534: POP
34535: POP
// if not result then
34536: LD_VAR 0 2
34540: NOT
34541: IFFALSE 34545
// exit ;
34543: GO 34693
// mech := result [ 1 ] ;
34545: LD_ADDR_VAR 0 5
34549: PUSH
34550: LD_VAR 0 2
34554: PUSH
34555: LD_INT 1
34557: ARRAY
34558: ST_TO_ADDR
// if result > 1 then
34559: LD_VAR 0 2
34563: PUSH
34564: LD_INT 1
34566: GREATER
34567: IFFALSE 34679
// begin for i = 2 to result do
34569: LD_ADDR_VAR 0 3
34573: PUSH
34574: DOUBLE
34575: LD_INT 2
34577: DEC
34578: ST_TO_ADDR
34579: LD_VAR 0 2
34583: PUSH
34584: FOR_TO
34585: IFFALSE 34677
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34587: LD_ADDR_VAR 0 4
34591: PUSH
34592: LD_VAR 0 2
34596: PUSH
34597: LD_VAR 0 3
34601: ARRAY
34602: PPUSH
34603: LD_INT 3
34605: PPUSH
34606: CALL_OW 259
34610: PUSH
34611: LD_VAR 0 2
34615: PUSH
34616: LD_VAR 0 3
34620: ARRAY
34621: PPUSH
34622: CALL_OW 432
34626: MINUS
34627: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34628: LD_VAR 0 4
34632: PUSH
34633: LD_VAR 0 5
34637: PPUSH
34638: LD_INT 3
34640: PPUSH
34641: CALL_OW 259
34645: PUSH
34646: LD_VAR 0 5
34650: PPUSH
34651: CALL_OW 432
34655: MINUS
34656: GREATEREQUAL
34657: IFFALSE 34675
// mech := result [ i ] ;
34659: LD_ADDR_VAR 0 5
34663: PUSH
34664: LD_VAR 0 2
34668: PUSH
34669: LD_VAR 0 3
34673: ARRAY
34674: ST_TO_ADDR
// end ;
34675: GO 34584
34677: POP
34678: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34679: LD_VAR 0 1
34683: PPUSH
34684: LD_VAR 0 5
34688: PPUSH
34689: CALL_OW 135
// end ;
34693: LD_VAR 0 2
34697: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34698: LD_INT 0
34700: PPUSH
34701: PPUSH
34702: PPUSH
34703: PPUSH
34704: PPUSH
34705: PPUSH
34706: PPUSH
34707: PPUSH
34708: PPUSH
34709: PPUSH
34710: PPUSH
34711: PPUSH
34712: PPUSH
// result := [ ] ;
34713: LD_ADDR_VAR 0 7
34717: PUSH
34718: EMPTY
34719: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34720: LD_VAR 0 1
34724: PPUSH
34725: CALL_OW 266
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 1
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: IN
34740: NOT
34741: IFFALSE 34745
// exit ;
34743: GO 36379
// if name then
34745: LD_VAR 0 3
34749: IFFALSE 34765
// SetBName ( base_dep , name ) ;
34751: LD_VAR 0 1
34755: PPUSH
34756: LD_VAR 0 3
34760: PPUSH
34761: CALL_OW 500
// base := GetBase ( base_dep ) ;
34765: LD_ADDR_VAR 0 15
34769: PUSH
34770: LD_VAR 0 1
34774: PPUSH
34775: CALL_OW 274
34779: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34780: LD_ADDR_VAR 0 16
34784: PUSH
34785: LD_VAR 0 1
34789: PPUSH
34790: CALL_OW 255
34794: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34795: LD_ADDR_VAR 0 17
34799: PUSH
34800: LD_VAR 0 1
34804: PPUSH
34805: CALL_OW 248
34809: ST_TO_ADDR
// if sources then
34810: LD_VAR 0 5
34814: IFFALSE 34861
// for i = 1 to 3 do
34816: LD_ADDR_VAR 0 8
34820: PUSH
34821: DOUBLE
34822: LD_INT 1
34824: DEC
34825: ST_TO_ADDR
34826: LD_INT 3
34828: PUSH
34829: FOR_TO
34830: IFFALSE 34859
// AddResourceType ( base , i , sources [ i ] ) ;
34832: LD_VAR 0 15
34836: PPUSH
34837: LD_VAR 0 8
34841: PPUSH
34842: LD_VAR 0 5
34846: PUSH
34847: LD_VAR 0 8
34851: ARRAY
34852: PPUSH
34853: CALL_OW 276
34857: GO 34829
34859: POP
34860: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34861: LD_ADDR_VAR 0 18
34865: PUSH
34866: LD_VAR 0 15
34870: PPUSH
34871: LD_VAR 0 2
34875: PPUSH
34876: LD_INT 1
34878: PPUSH
34879: CALL 34122 0 3
34883: ST_TO_ADDR
// InitHc ;
34884: CALL_OW 19
// InitUc ;
34888: CALL_OW 18
// uc_side := side ;
34892: LD_ADDR_OWVAR 20
34896: PUSH
34897: LD_VAR 0 16
34901: ST_TO_ADDR
// uc_nation := nation ;
34902: LD_ADDR_OWVAR 21
34906: PUSH
34907: LD_VAR 0 17
34911: ST_TO_ADDR
// if buildings then
34912: LD_VAR 0 18
34916: IFFALSE 36238
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34918: LD_ADDR_VAR 0 19
34922: PUSH
34923: LD_VAR 0 18
34927: PPUSH
34928: LD_INT 2
34930: PUSH
34931: LD_INT 30
34933: PUSH
34934: LD_INT 29
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 30
34943: PUSH
34944: LD_INT 30
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: LIST
34955: PPUSH
34956: CALL_OW 72
34960: ST_TO_ADDR
// if tmp then
34961: LD_VAR 0 19
34965: IFFALSE 35013
// for i in tmp do
34967: LD_ADDR_VAR 0 8
34971: PUSH
34972: LD_VAR 0 19
34976: PUSH
34977: FOR_IN
34978: IFFALSE 35011
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34980: LD_VAR 0 8
34984: PPUSH
34985: CALL_OW 250
34989: PPUSH
34990: LD_VAR 0 8
34994: PPUSH
34995: CALL_OW 251
34999: PPUSH
35000: LD_VAR 0 16
35004: PPUSH
35005: CALL_OW 441
35009: GO 34977
35011: POP
35012: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35013: LD_VAR 0 18
35017: PPUSH
35018: LD_INT 2
35020: PUSH
35021: LD_INT 30
35023: PUSH
35024: LD_INT 32
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 30
35033: PUSH
35034: LD_INT 33
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: LIST
35045: PPUSH
35046: CALL_OW 72
35050: IFFALSE 35138
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35052: LD_ADDR_VAR 0 8
35056: PUSH
35057: LD_VAR 0 18
35061: PPUSH
35062: LD_INT 2
35064: PUSH
35065: LD_INT 30
35067: PUSH
35068: LD_INT 32
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 30
35077: PUSH
35078: LD_INT 33
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: LIST
35089: PPUSH
35090: CALL_OW 72
35094: PUSH
35095: FOR_IN
35096: IFFALSE 35136
// begin if not GetBWeapon ( i ) then
35098: LD_VAR 0 8
35102: PPUSH
35103: CALL_OW 269
35107: NOT
35108: IFFALSE 35134
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35110: LD_VAR 0 8
35114: PPUSH
35115: LD_VAR 0 8
35119: PPUSH
35120: LD_VAR 0 2
35124: PPUSH
35125: CALL 36384 0 2
35129: PPUSH
35130: CALL_OW 431
// end ;
35134: GO 35095
35136: POP
35137: POP
// end ; for i = 1 to personel do
35138: LD_ADDR_VAR 0 8
35142: PUSH
35143: DOUBLE
35144: LD_INT 1
35146: DEC
35147: ST_TO_ADDR
35148: LD_VAR 0 6
35152: PUSH
35153: FOR_TO
35154: IFFALSE 36218
// begin if i > 4 then
35156: LD_VAR 0 8
35160: PUSH
35161: LD_INT 4
35163: GREATER
35164: IFFALSE 35168
// break ;
35166: GO 36218
// case i of 1 :
35168: LD_VAR 0 8
35172: PUSH
35173: LD_INT 1
35175: DOUBLE
35176: EQUAL
35177: IFTRUE 35181
35179: GO 35261
35181: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35182: LD_ADDR_VAR 0 12
35186: PUSH
35187: LD_VAR 0 18
35191: PPUSH
35192: LD_INT 22
35194: PUSH
35195: LD_VAR 0 16
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 58
35206: PUSH
35207: EMPTY
35208: LIST
35209: PUSH
35210: LD_INT 2
35212: PUSH
35213: LD_INT 30
35215: PUSH
35216: LD_INT 32
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 30
35225: PUSH
35226: LD_INT 4
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 30
35235: PUSH
35236: LD_INT 5
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: LIST
35253: PPUSH
35254: CALL_OW 72
35258: ST_TO_ADDR
35259: GO 35483
35261: LD_INT 2
35263: DOUBLE
35264: EQUAL
35265: IFTRUE 35269
35267: GO 35331
35269: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35270: LD_ADDR_VAR 0 12
35274: PUSH
35275: LD_VAR 0 18
35279: PPUSH
35280: LD_INT 22
35282: PUSH
35283: LD_VAR 0 16
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 2
35294: PUSH
35295: LD_INT 30
35297: PUSH
35298: LD_INT 0
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 30
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PPUSH
35324: CALL_OW 72
35328: ST_TO_ADDR
35329: GO 35483
35331: LD_INT 3
35333: DOUBLE
35334: EQUAL
35335: IFTRUE 35339
35337: GO 35401
35339: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35340: LD_ADDR_VAR 0 12
35344: PUSH
35345: LD_VAR 0 18
35349: PPUSH
35350: LD_INT 22
35352: PUSH
35353: LD_VAR 0 16
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 2
35364: PUSH
35365: LD_INT 30
35367: PUSH
35368: LD_INT 2
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 30
35377: PUSH
35378: LD_INT 3
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: LIST
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PPUSH
35394: CALL_OW 72
35398: ST_TO_ADDR
35399: GO 35483
35401: LD_INT 4
35403: DOUBLE
35404: EQUAL
35405: IFTRUE 35409
35407: GO 35482
35409: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35410: LD_ADDR_VAR 0 12
35414: PUSH
35415: LD_VAR 0 18
35419: PPUSH
35420: LD_INT 22
35422: PUSH
35423: LD_VAR 0 16
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 2
35434: PUSH
35435: LD_INT 30
35437: PUSH
35438: LD_INT 6
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 30
35447: PUSH
35448: LD_INT 7
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 30
35457: PUSH
35458: LD_INT 8
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PPUSH
35475: CALL_OW 72
35479: ST_TO_ADDR
35480: GO 35483
35482: POP
// if i = 1 then
35483: LD_VAR 0 8
35487: PUSH
35488: LD_INT 1
35490: EQUAL
35491: IFFALSE 35602
// begin tmp := [ ] ;
35493: LD_ADDR_VAR 0 19
35497: PUSH
35498: EMPTY
35499: ST_TO_ADDR
// for j in f do
35500: LD_ADDR_VAR 0 9
35504: PUSH
35505: LD_VAR 0 12
35509: PUSH
35510: FOR_IN
35511: IFFALSE 35584
// if GetBType ( j ) = b_bunker then
35513: LD_VAR 0 9
35517: PPUSH
35518: CALL_OW 266
35522: PUSH
35523: LD_INT 32
35525: EQUAL
35526: IFFALSE 35553
// tmp := Insert ( tmp , 1 , j ) else
35528: LD_ADDR_VAR 0 19
35532: PUSH
35533: LD_VAR 0 19
35537: PPUSH
35538: LD_INT 1
35540: PPUSH
35541: LD_VAR 0 9
35545: PPUSH
35546: CALL_OW 2
35550: ST_TO_ADDR
35551: GO 35582
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35553: LD_ADDR_VAR 0 19
35557: PUSH
35558: LD_VAR 0 19
35562: PPUSH
35563: LD_VAR 0 19
35567: PUSH
35568: LD_INT 1
35570: PLUS
35571: PPUSH
35572: LD_VAR 0 9
35576: PPUSH
35577: CALL_OW 2
35581: ST_TO_ADDR
35582: GO 35510
35584: POP
35585: POP
// if tmp then
35586: LD_VAR 0 19
35590: IFFALSE 35602
// f := tmp ;
35592: LD_ADDR_VAR 0 12
35596: PUSH
35597: LD_VAR 0 19
35601: ST_TO_ADDR
// end ; x := personel [ i ] ;
35602: LD_ADDR_VAR 0 13
35606: PUSH
35607: LD_VAR 0 6
35611: PUSH
35612: LD_VAR 0 8
35616: ARRAY
35617: ST_TO_ADDR
// if x = - 1 then
35618: LD_VAR 0 13
35622: PUSH
35623: LD_INT 1
35625: NEG
35626: EQUAL
35627: IFFALSE 35836
// begin for j in f do
35629: LD_ADDR_VAR 0 9
35633: PUSH
35634: LD_VAR 0 12
35638: PUSH
35639: FOR_IN
35640: IFFALSE 35832
// repeat InitHc ;
35642: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35646: LD_VAR 0 9
35650: PPUSH
35651: CALL_OW 266
35655: PUSH
35656: LD_INT 5
35658: EQUAL
35659: IFFALSE 35729
// begin if UnitsInside ( j ) < 3 then
35661: LD_VAR 0 9
35665: PPUSH
35666: CALL_OW 313
35670: PUSH
35671: LD_INT 3
35673: LESS
35674: IFFALSE 35710
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35676: LD_INT 0
35678: PPUSH
35679: LD_INT 5
35681: PUSH
35682: LD_INT 8
35684: PUSH
35685: LD_INT 9
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: LIST
35692: PUSH
35693: LD_VAR 0 17
35697: ARRAY
35698: PPUSH
35699: LD_VAR 0 4
35703: PPUSH
35704: CALL_OW 380
35708: GO 35727
// PrepareHuman ( false , i , skill ) ;
35710: LD_INT 0
35712: PPUSH
35713: LD_VAR 0 8
35717: PPUSH
35718: LD_VAR 0 4
35722: PPUSH
35723: CALL_OW 380
// end else
35727: GO 35746
// PrepareHuman ( false , i , skill ) ;
35729: LD_INT 0
35731: PPUSH
35732: LD_VAR 0 8
35736: PPUSH
35737: LD_VAR 0 4
35741: PPUSH
35742: CALL_OW 380
// un := CreateHuman ;
35746: LD_ADDR_VAR 0 14
35750: PUSH
35751: CALL_OW 44
35755: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35756: LD_ADDR_VAR 0 7
35760: PUSH
35761: LD_VAR 0 7
35765: PPUSH
35766: LD_INT 1
35768: PPUSH
35769: LD_VAR 0 14
35773: PPUSH
35774: CALL_OW 2
35778: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35779: LD_VAR 0 14
35783: PPUSH
35784: LD_VAR 0 9
35788: PPUSH
35789: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35793: LD_VAR 0 9
35797: PPUSH
35798: CALL_OW 313
35802: PUSH
35803: LD_INT 6
35805: EQUAL
35806: PUSH
35807: LD_VAR 0 9
35811: PPUSH
35812: CALL_OW 266
35816: PUSH
35817: LD_INT 32
35819: PUSH
35820: LD_INT 31
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: IN
35827: OR
35828: IFFALSE 35642
35830: GO 35639
35832: POP
35833: POP
// end else
35834: GO 36216
// for j = 1 to x do
35836: LD_ADDR_VAR 0 9
35840: PUSH
35841: DOUBLE
35842: LD_INT 1
35844: DEC
35845: ST_TO_ADDR
35846: LD_VAR 0 13
35850: PUSH
35851: FOR_TO
35852: IFFALSE 36214
// begin InitHc ;
35854: CALL_OW 19
// if not f then
35858: LD_VAR 0 12
35862: NOT
35863: IFFALSE 35952
// begin PrepareHuman ( false , i , skill ) ;
35865: LD_INT 0
35867: PPUSH
35868: LD_VAR 0 8
35872: PPUSH
35873: LD_VAR 0 4
35877: PPUSH
35878: CALL_OW 380
// un := CreateHuman ;
35882: LD_ADDR_VAR 0 14
35886: PUSH
35887: CALL_OW 44
35891: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35892: LD_ADDR_VAR 0 7
35896: PUSH
35897: LD_VAR 0 7
35901: PPUSH
35902: LD_INT 1
35904: PPUSH
35905: LD_VAR 0 14
35909: PPUSH
35910: CALL_OW 2
35914: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35915: LD_VAR 0 14
35919: PPUSH
35920: LD_VAR 0 1
35924: PPUSH
35925: CALL_OW 250
35929: PPUSH
35930: LD_VAR 0 1
35934: PPUSH
35935: CALL_OW 251
35939: PPUSH
35940: LD_INT 10
35942: PPUSH
35943: LD_INT 0
35945: PPUSH
35946: CALL_OW 50
// continue ;
35950: GO 35851
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35952: LD_VAR 0 12
35956: PUSH
35957: LD_INT 1
35959: ARRAY
35960: PPUSH
35961: CALL_OW 313
35965: PUSH
35966: LD_VAR 0 12
35970: PUSH
35971: LD_INT 1
35973: ARRAY
35974: PPUSH
35975: CALL_OW 266
35979: PUSH
35980: LD_INT 32
35982: PUSH
35983: LD_INT 31
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: IN
35990: AND
35991: PUSH
35992: LD_VAR 0 12
35996: PUSH
35997: LD_INT 1
35999: ARRAY
36000: PPUSH
36001: CALL_OW 313
36005: PUSH
36006: LD_INT 6
36008: EQUAL
36009: OR
36010: IFFALSE 36030
// f := Delete ( f , 1 ) ;
36012: LD_ADDR_VAR 0 12
36016: PUSH
36017: LD_VAR 0 12
36021: PPUSH
36022: LD_INT 1
36024: PPUSH
36025: CALL_OW 3
36029: ST_TO_ADDR
// if not f then
36030: LD_VAR 0 12
36034: NOT
36035: IFFALSE 36053
// begin x := x + 2 ;
36037: LD_ADDR_VAR 0 13
36041: PUSH
36042: LD_VAR 0 13
36046: PUSH
36047: LD_INT 2
36049: PLUS
36050: ST_TO_ADDR
// continue ;
36051: GO 35851
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36053: LD_VAR 0 12
36057: PUSH
36058: LD_INT 1
36060: ARRAY
36061: PPUSH
36062: CALL_OW 266
36066: PUSH
36067: LD_INT 5
36069: EQUAL
36070: IFFALSE 36144
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36072: LD_VAR 0 12
36076: PUSH
36077: LD_INT 1
36079: ARRAY
36080: PPUSH
36081: CALL_OW 313
36085: PUSH
36086: LD_INT 3
36088: LESS
36089: IFFALSE 36125
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36091: LD_INT 0
36093: PPUSH
36094: LD_INT 5
36096: PUSH
36097: LD_INT 8
36099: PUSH
36100: LD_INT 9
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: LIST
36107: PUSH
36108: LD_VAR 0 17
36112: ARRAY
36113: PPUSH
36114: LD_VAR 0 4
36118: PPUSH
36119: CALL_OW 380
36123: GO 36142
// PrepareHuman ( false , i , skill ) ;
36125: LD_INT 0
36127: PPUSH
36128: LD_VAR 0 8
36132: PPUSH
36133: LD_VAR 0 4
36137: PPUSH
36138: CALL_OW 380
// end else
36142: GO 36161
// PrepareHuman ( false , i , skill ) ;
36144: LD_INT 0
36146: PPUSH
36147: LD_VAR 0 8
36151: PPUSH
36152: LD_VAR 0 4
36156: PPUSH
36157: CALL_OW 380
// un := CreateHuman ;
36161: LD_ADDR_VAR 0 14
36165: PUSH
36166: CALL_OW 44
36170: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36171: LD_ADDR_VAR 0 7
36175: PUSH
36176: LD_VAR 0 7
36180: PPUSH
36181: LD_INT 1
36183: PPUSH
36184: LD_VAR 0 14
36188: PPUSH
36189: CALL_OW 2
36193: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36194: LD_VAR 0 14
36198: PPUSH
36199: LD_VAR 0 12
36203: PUSH
36204: LD_INT 1
36206: ARRAY
36207: PPUSH
36208: CALL_OW 52
// end ;
36212: GO 35851
36214: POP
36215: POP
// end ;
36216: GO 35153
36218: POP
36219: POP
// result := result ^ buildings ;
36220: LD_ADDR_VAR 0 7
36224: PUSH
36225: LD_VAR 0 7
36229: PUSH
36230: LD_VAR 0 18
36234: ADD
36235: ST_TO_ADDR
// end else
36236: GO 36379
// begin for i = 1 to personel do
36238: LD_ADDR_VAR 0 8
36242: PUSH
36243: DOUBLE
36244: LD_INT 1
36246: DEC
36247: ST_TO_ADDR
36248: LD_VAR 0 6
36252: PUSH
36253: FOR_TO
36254: IFFALSE 36377
// begin if i > 4 then
36256: LD_VAR 0 8
36260: PUSH
36261: LD_INT 4
36263: GREATER
36264: IFFALSE 36268
// break ;
36266: GO 36377
// x := personel [ i ] ;
36268: LD_ADDR_VAR 0 13
36272: PUSH
36273: LD_VAR 0 6
36277: PUSH
36278: LD_VAR 0 8
36282: ARRAY
36283: ST_TO_ADDR
// if x = - 1 then
36284: LD_VAR 0 13
36288: PUSH
36289: LD_INT 1
36291: NEG
36292: EQUAL
36293: IFFALSE 36297
// continue ;
36295: GO 36253
// PrepareHuman ( false , i , skill ) ;
36297: LD_INT 0
36299: PPUSH
36300: LD_VAR 0 8
36304: PPUSH
36305: LD_VAR 0 4
36309: PPUSH
36310: CALL_OW 380
// un := CreateHuman ;
36314: LD_ADDR_VAR 0 14
36318: PUSH
36319: CALL_OW 44
36323: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36324: LD_VAR 0 14
36328: PPUSH
36329: LD_VAR 0 1
36333: PPUSH
36334: CALL_OW 250
36338: PPUSH
36339: LD_VAR 0 1
36343: PPUSH
36344: CALL_OW 251
36348: PPUSH
36349: LD_INT 10
36351: PPUSH
36352: LD_INT 0
36354: PPUSH
36355: CALL_OW 50
// result := result ^ un ;
36359: LD_ADDR_VAR 0 7
36363: PUSH
36364: LD_VAR 0 7
36368: PUSH
36369: LD_VAR 0 14
36373: ADD
36374: ST_TO_ADDR
// end ;
36375: GO 36253
36377: POP
36378: POP
// end ; end ;
36379: LD_VAR 0 7
36383: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36384: LD_INT 0
36386: PPUSH
36387: PPUSH
36388: PPUSH
36389: PPUSH
36390: PPUSH
36391: PPUSH
36392: PPUSH
36393: PPUSH
36394: PPUSH
36395: PPUSH
36396: PPUSH
36397: PPUSH
36398: PPUSH
36399: PPUSH
36400: PPUSH
36401: PPUSH
// result := false ;
36402: LD_ADDR_VAR 0 3
36406: PUSH
36407: LD_INT 0
36409: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36410: LD_VAR 0 1
36414: NOT
36415: PUSH
36416: LD_VAR 0 1
36420: PPUSH
36421: CALL_OW 266
36425: PUSH
36426: LD_INT 32
36428: PUSH
36429: LD_INT 33
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: IN
36436: NOT
36437: OR
36438: IFFALSE 36442
// exit ;
36440: GO 37551
// nat := GetNation ( tower ) ;
36442: LD_ADDR_VAR 0 12
36446: PUSH
36447: LD_VAR 0 1
36451: PPUSH
36452: CALL_OW 248
36456: ST_TO_ADDR
// side := GetSide ( tower ) ;
36457: LD_ADDR_VAR 0 16
36461: PUSH
36462: LD_VAR 0 1
36466: PPUSH
36467: CALL_OW 255
36471: ST_TO_ADDR
// x := GetX ( tower ) ;
36472: LD_ADDR_VAR 0 10
36476: PUSH
36477: LD_VAR 0 1
36481: PPUSH
36482: CALL_OW 250
36486: ST_TO_ADDR
// y := GetY ( tower ) ;
36487: LD_ADDR_VAR 0 11
36491: PUSH
36492: LD_VAR 0 1
36496: PPUSH
36497: CALL_OW 251
36501: ST_TO_ADDR
// if not x or not y then
36502: LD_VAR 0 10
36506: NOT
36507: PUSH
36508: LD_VAR 0 11
36512: NOT
36513: OR
36514: IFFALSE 36518
// exit ;
36516: GO 37551
// weapon := 0 ;
36518: LD_ADDR_VAR 0 18
36522: PUSH
36523: LD_INT 0
36525: ST_TO_ADDR
// fac_list := [ ] ;
36526: LD_ADDR_VAR 0 17
36530: PUSH
36531: EMPTY
36532: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36533: LD_ADDR_VAR 0 6
36537: PUSH
36538: LD_VAR 0 1
36542: PPUSH
36543: CALL_OW 274
36547: PPUSH
36548: LD_VAR 0 2
36552: PPUSH
36553: LD_INT 0
36555: PPUSH
36556: CALL 34122 0 3
36560: PPUSH
36561: LD_INT 30
36563: PUSH
36564: LD_INT 3
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PPUSH
36571: CALL_OW 72
36575: ST_TO_ADDR
// if not factories then
36576: LD_VAR 0 6
36580: NOT
36581: IFFALSE 36585
// exit ;
36583: GO 37551
// for i in factories do
36585: LD_ADDR_VAR 0 8
36589: PUSH
36590: LD_VAR 0 6
36594: PUSH
36595: FOR_IN
36596: IFFALSE 36621
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36598: LD_ADDR_VAR 0 17
36602: PUSH
36603: LD_VAR 0 17
36607: PUSH
36608: LD_VAR 0 8
36612: PPUSH
36613: CALL_OW 478
36617: UNION
36618: ST_TO_ADDR
36619: GO 36595
36621: POP
36622: POP
// if not fac_list then
36623: LD_VAR 0 17
36627: NOT
36628: IFFALSE 36632
// exit ;
36630: GO 37551
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36632: LD_ADDR_VAR 0 5
36636: PUSH
36637: LD_INT 4
36639: PUSH
36640: LD_INT 5
36642: PUSH
36643: LD_INT 9
36645: PUSH
36646: LD_INT 10
36648: PUSH
36649: LD_INT 6
36651: PUSH
36652: LD_INT 7
36654: PUSH
36655: LD_INT 11
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 27
36669: PUSH
36670: LD_INT 28
36672: PUSH
36673: LD_INT 26
36675: PUSH
36676: LD_INT 30
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 43
36687: PUSH
36688: LD_INT 44
36690: PUSH
36691: LD_INT 46
36693: PUSH
36694: LD_INT 45
36696: PUSH
36697: LD_INT 47
36699: PUSH
36700: LD_INT 49
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: LIST
36715: PUSH
36716: LD_VAR 0 12
36720: ARRAY
36721: ST_TO_ADDR
// list := list isect fac_list ;
36722: LD_ADDR_VAR 0 5
36726: PUSH
36727: LD_VAR 0 5
36731: PUSH
36732: LD_VAR 0 17
36736: ISECT
36737: ST_TO_ADDR
// if not list then
36738: LD_VAR 0 5
36742: NOT
36743: IFFALSE 36747
// exit ;
36745: GO 37551
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36747: LD_VAR 0 12
36751: PUSH
36752: LD_INT 3
36754: EQUAL
36755: PUSH
36756: LD_INT 49
36758: PUSH
36759: LD_VAR 0 5
36763: IN
36764: AND
36765: PUSH
36766: LD_INT 31
36768: PPUSH
36769: LD_VAR 0 16
36773: PPUSH
36774: CALL_OW 321
36778: PUSH
36779: LD_INT 2
36781: EQUAL
36782: AND
36783: IFFALSE 36843
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36785: LD_INT 22
36787: PUSH
36788: LD_VAR 0 16
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 35
36799: PUSH
36800: LD_INT 49
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 91
36809: PUSH
36810: LD_VAR 0 1
36814: PUSH
36815: LD_INT 10
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: LIST
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: LIST
36827: PPUSH
36828: CALL_OW 69
36832: NOT
36833: IFFALSE 36843
// weapon := ru_time_lapser ;
36835: LD_ADDR_VAR 0 18
36839: PUSH
36840: LD_INT 49
36842: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36843: LD_VAR 0 12
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: IN
36858: PUSH
36859: LD_INT 11
36861: PUSH
36862: LD_VAR 0 5
36866: IN
36867: PUSH
36868: LD_INT 30
36870: PUSH
36871: LD_VAR 0 5
36875: IN
36876: OR
36877: AND
36878: PUSH
36879: LD_INT 6
36881: PPUSH
36882: LD_VAR 0 16
36886: PPUSH
36887: CALL_OW 321
36891: PUSH
36892: LD_INT 2
36894: EQUAL
36895: AND
36896: IFFALSE 37061
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36898: LD_INT 22
36900: PUSH
36901: LD_VAR 0 16
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 2
36912: PUSH
36913: LD_INT 35
36915: PUSH
36916: LD_INT 11
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 35
36925: PUSH
36926: LD_INT 30
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 91
36940: PUSH
36941: LD_VAR 0 1
36945: PUSH
36946: LD_INT 18
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: LIST
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: LIST
36958: PPUSH
36959: CALL_OW 69
36963: NOT
36964: PUSH
36965: LD_INT 22
36967: PUSH
36968: LD_VAR 0 16
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 2
36979: PUSH
36980: LD_INT 30
36982: PUSH
36983: LD_INT 32
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 30
36992: PUSH
36993: LD_INT 33
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 91
37007: PUSH
37008: LD_VAR 0 1
37012: PUSH
37013: LD_INT 12
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: LIST
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: LIST
37025: PUSH
37026: EMPTY
37027: LIST
37028: PPUSH
37029: CALL_OW 69
37033: PUSH
37034: LD_INT 2
37036: GREATER
37037: AND
37038: IFFALSE 37061
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37040: LD_ADDR_VAR 0 18
37044: PUSH
37045: LD_INT 11
37047: PUSH
37048: LD_INT 30
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_VAR 0 12
37059: ARRAY
37060: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37061: LD_VAR 0 18
37065: NOT
37066: PUSH
37067: LD_INT 40
37069: PPUSH
37070: LD_VAR 0 16
37074: PPUSH
37075: CALL_OW 321
37079: PUSH
37080: LD_INT 2
37082: EQUAL
37083: AND
37084: PUSH
37085: LD_INT 7
37087: PUSH
37088: LD_VAR 0 5
37092: IN
37093: PUSH
37094: LD_INT 28
37096: PUSH
37097: LD_VAR 0 5
37101: IN
37102: OR
37103: PUSH
37104: LD_INT 45
37106: PUSH
37107: LD_VAR 0 5
37111: IN
37112: OR
37113: AND
37114: IFFALSE 37368
// begin hex := GetHexInfo ( x , y ) ;
37116: LD_ADDR_VAR 0 4
37120: PUSH
37121: LD_VAR 0 10
37125: PPUSH
37126: LD_VAR 0 11
37130: PPUSH
37131: CALL_OW 546
37135: ST_TO_ADDR
// if hex [ 1 ] then
37136: LD_VAR 0 4
37140: PUSH
37141: LD_INT 1
37143: ARRAY
37144: IFFALSE 37148
// exit ;
37146: GO 37551
// height := hex [ 2 ] ;
37148: LD_ADDR_VAR 0 15
37152: PUSH
37153: LD_VAR 0 4
37157: PUSH
37158: LD_INT 2
37160: ARRAY
37161: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37162: LD_ADDR_VAR 0 14
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: LD_INT 3
37175: PUSH
37176: LD_INT 5
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: ST_TO_ADDR
// for i in tmp do
37185: LD_ADDR_VAR 0 8
37189: PUSH
37190: LD_VAR 0 14
37194: PUSH
37195: FOR_IN
37196: IFFALSE 37366
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37198: LD_ADDR_VAR 0 9
37202: PUSH
37203: LD_VAR 0 10
37207: PPUSH
37208: LD_VAR 0 8
37212: PPUSH
37213: LD_INT 5
37215: PPUSH
37216: CALL_OW 272
37220: PUSH
37221: LD_VAR 0 11
37225: PPUSH
37226: LD_VAR 0 8
37230: PPUSH
37231: LD_INT 5
37233: PPUSH
37234: CALL_OW 273
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37243: LD_VAR 0 9
37247: PUSH
37248: LD_INT 1
37250: ARRAY
37251: PPUSH
37252: LD_VAR 0 9
37256: PUSH
37257: LD_INT 2
37259: ARRAY
37260: PPUSH
37261: CALL_OW 488
37265: IFFALSE 37364
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37267: LD_ADDR_VAR 0 4
37271: PUSH
37272: LD_VAR 0 9
37276: PUSH
37277: LD_INT 1
37279: ARRAY
37280: PPUSH
37281: LD_VAR 0 9
37285: PUSH
37286: LD_INT 2
37288: ARRAY
37289: PPUSH
37290: CALL_OW 546
37294: ST_TO_ADDR
// if hex [ 1 ] then
37295: LD_VAR 0 4
37299: PUSH
37300: LD_INT 1
37302: ARRAY
37303: IFFALSE 37307
// continue ;
37305: GO 37195
// h := hex [ 2 ] ;
37307: LD_ADDR_VAR 0 13
37311: PUSH
37312: LD_VAR 0 4
37316: PUSH
37317: LD_INT 2
37319: ARRAY
37320: ST_TO_ADDR
// if h + 7 < height then
37321: LD_VAR 0 13
37325: PUSH
37326: LD_INT 7
37328: PLUS
37329: PUSH
37330: LD_VAR 0 15
37334: LESS
37335: IFFALSE 37364
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37337: LD_ADDR_VAR 0 18
37341: PUSH
37342: LD_INT 7
37344: PUSH
37345: LD_INT 28
37347: PUSH
37348: LD_INT 45
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: LIST
37355: PUSH
37356: LD_VAR 0 12
37360: ARRAY
37361: ST_TO_ADDR
// break ;
37362: GO 37366
// end ; end ; end ;
37364: GO 37195
37366: POP
37367: POP
// end ; if not weapon then
37368: LD_VAR 0 18
37372: NOT
37373: IFFALSE 37433
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37375: LD_ADDR_VAR 0 5
37379: PUSH
37380: LD_VAR 0 5
37384: PUSH
37385: LD_INT 11
37387: PUSH
37388: LD_INT 30
37390: PUSH
37391: LD_INT 49
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: LIST
37398: DIFF
37399: ST_TO_ADDR
// if not list then
37400: LD_VAR 0 5
37404: NOT
37405: IFFALSE 37409
// exit ;
37407: GO 37551
// weapon := list [ rand ( 1 , list ) ] ;
37409: LD_ADDR_VAR 0 18
37413: PUSH
37414: LD_VAR 0 5
37418: PUSH
37419: LD_INT 1
37421: PPUSH
37422: LD_VAR 0 5
37426: PPUSH
37427: CALL_OW 12
37431: ARRAY
37432: ST_TO_ADDR
// end ; if weapon then
37433: LD_VAR 0 18
37437: IFFALSE 37551
// begin tmp := CostOfWeapon ( weapon ) ;
37439: LD_ADDR_VAR 0 14
37443: PUSH
37444: LD_VAR 0 18
37448: PPUSH
37449: CALL_OW 451
37453: ST_TO_ADDR
// j := GetBase ( tower ) ;
37454: LD_ADDR_VAR 0 9
37458: PUSH
37459: LD_VAR 0 1
37463: PPUSH
37464: CALL_OW 274
37468: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37469: LD_VAR 0 9
37473: PPUSH
37474: LD_INT 1
37476: PPUSH
37477: CALL_OW 275
37481: PUSH
37482: LD_VAR 0 14
37486: PUSH
37487: LD_INT 1
37489: ARRAY
37490: GREATEREQUAL
37491: PUSH
37492: LD_VAR 0 9
37496: PPUSH
37497: LD_INT 2
37499: PPUSH
37500: CALL_OW 275
37504: PUSH
37505: LD_VAR 0 14
37509: PUSH
37510: LD_INT 2
37512: ARRAY
37513: GREATEREQUAL
37514: AND
37515: PUSH
37516: LD_VAR 0 9
37520: PPUSH
37521: LD_INT 3
37523: PPUSH
37524: CALL_OW 275
37528: PUSH
37529: LD_VAR 0 14
37533: PUSH
37534: LD_INT 3
37536: ARRAY
37537: GREATEREQUAL
37538: AND
37539: IFFALSE 37551
// result := weapon ;
37541: LD_ADDR_VAR 0 3
37545: PUSH
37546: LD_VAR 0 18
37550: ST_TO_ADDR
// end ; end ;
37551: LD_VAR 0 3
37555: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37556: LD_INT 0
37558: PPUSH
37559: PPUSH
// result := true ;
37560: LD_ADDR_VAR 0 3
37564: PUSH
37565: LD_INT 1
37567: ST_TO_ADDR
// if array1 = array2 then
37568: LD_VAR 0 1
37572: PUSH
37573: LD_VAR 0 2
37577: EQUAL
37578: IFFALSE 37638
// begin for i = 1 to array1 do
37580: LD_ADDR_VAR 0 4
37584: PUSH
37585: DOUBLE
37586: LD_INT 1
37588: DEC
37589: ST_TO_ADDR
37590: LD_VAR 0 1
37594: PUSH
37595: FOR_TO
37596: IFFALSE 37634
// if array1 [ i ] <> array2 [ i ] then
37598: LD_VAR 0 1
37602: PUSH
37603: LD_VAR 0 4
37607: ARRAY
37608: PUSH
37609: LD_VAR 0 2
37613: PUSH
37614: LD_VAR 0 4
37618: ARRAY
37619: NONEQUAL
37620: IFFALSE 37632
// begin result := false ;
37622: LD_ADDR_VAR 0 3
37626: PUSH
37627: LD_INT 0
37629: ST_TO_ADDR
// break ;
37630: GO 37634
// end ;
37632: GO 37595
37634: POP
37635: POP
// end else
37636: GO 37646
// result := false ;
37638: LD_ADDR_VAR 0 3
37642: PUSH
37643: LD_INT 0
37645: ST_TO_ADDR
// end ;
37646: LD_VAR 0 3
37650: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37651: LD_INT 0
37653: PPUSH
37654: PPUSH
// if not array1 or not array2 then
37655: LD_VAR 0 1
37659: NOT
37660: PUSH
37661: LD_VAR 0 2
37665: NOT
37666: OR
37667: IFFALSE 37671
// exit ;
37669: GO 37735
// result := true ;
37671: LD_ADDR_VAR 0 3
37675: PUSH
37676: LD_INT 1
37678: ST_TO_ADDR
// for i = 1 to array1 do
37679: LD_ADDR_VAR 0 4
37683: PUSH
37684: DOUBLE
37685: LD_INT 1
37687: DEC
37688: ST_TO_ADDR
37689: LD_VAR 0 1
37693: PUSH
37694: FOR_TO
37695: IFFALSE 37733
// if array1 [ i ] <> array2 [ i ] then
37697: LD_VAR 0 1
37701: PUSH
37702: LD_VAR 0 4
37706: ARRAY
37707: PUSH
37708: LD_VAR 0 2
37712: PUSH
37713: LD_VAR 0 4
37717: ARRAY
37718: NONEQUAL
37719: IFFALSE 37731
// begin result := false ;
37721: LD_ADDR_VAR 0 3
37725: PUSH
37726: LD_INT 0
37728: ST_TO_ADDR
// break ;
37729: GO 37733
// end ;
37731: GO 37694
37733: POP
37734: POP
// end ;
37735: LD_VAR 0 3
37739: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37740: LD_INT 0
37742: PPUSH
37743: PPUSH
37744: PPUSH
// pom := GetBase ( fac ) ;
37745: LD_ADDR_VAR 0 5
37749: PUSH
37750: LD_VAR 0 1
37754: PPUSH
37755: CALL_OW 274
37759: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37760: LD_ADDR_VAR 0 4
37764: PUSH
37765: LD_VAR 0 2
37769: PUSH
37770: LD_INT 1
37772: ARRAY
37773: PPUSH
37774: LD_VAR 0 2
37778: PUSH
37779: LD_INT 2
37781: ARRAY
37782: PPUSH
37783: LD_VAR 0 2
37787: PUSH
37788: LD_INT 3
37790: ARRAY
37791: PPUSH
37792: LD_VAR 0 2
37796: PUSH
37797: LD_INT 4
37799: ARRAY
37800: PPUSH
37801: CALL_OW 449
37805: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37806: LD_ADDR_VAR 0 3
37810: PUSH
37811: LD_VAR 0 5
37815: PPUSH
37816: LD_INT 1
37818: PPUSH
37819: CALL_OW 275
37823: PUSH
37824: LD_VAR 0 4
37828: PUSH
37829: LD_INT 1
37831: ARRAY
37832: GREATEREQUAL
37833: PUSH
37834: LD_VAR 0 5
37838: PPUSH
37839: LD_INT 2
37841: PPUSH
37842: CALL_OW 275
37846: PUSH
37847: LD_VAR 0 4
37851: PUSH
37852: LD_INT 2
37854: ARRAY
37855: GREATEREQUAL
37856: AND
37857: PUSH
37858: LD_VAR 0 5
37862: PPUSH
37863: LD_INT 3
37865: PPUSH
37866: CALL_OW 275
37870: PUSH
37871: LD_VAR 0 4
37875: PUSH
37876: LD_INT 3
37878: ARRAY
37879: GREATEREQUAL
37880: AND
37881: ST_TO_ADDR
// end ;
37882: LD_VAR 0 3
37886: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37887: LD_INT 0
37889: PPUSH
37890: PPUSH
37891: PPUSH
37892: PPUSH
// pom := GetBase ( building ) ;
37893: LD_ADDR_VAR 0 3
37897: PUSH
37898: LD_VAR 0 1
37902: PPUSH
37903: CALL_OW 274
37907: ST_TO_ADDR
// if not pom then
37908: LD_VAR 0 3
37912: NOT
37913: IFFALSE 37917
// exit ;
37915: GO 38087
// btype := GetBType ( building ) ;
37917: LD_ADDR_VAR 0 5
37921: PUSH
37922: LD_VAR 0 1
37926: PPUSH
37927: CALL_OW 266
37931: ST_TO_ADDR
// if btype = b_armoury then
37932: LD_VAR 0 5
37936: PUSH
37937: LD_INT 4
37939: EQUAL
37940: IFFALSE 37950
// btype := b_barracks ;
37942: LD_ADDR_VAR 0 5
37946: PUSH
37947: LD_INT 5
37949: ST_TO_ADDR
// if btype = b_depot then
37950: LD_VAR 0 5
37954: PUSH
37955: LD_INT 0
37957: EQUAL
37958: IFFALSE 37968
// btype := b_warehouse ;
37960: LD_ADDR_VAR 0 5
37964: PUSH
37965: LD_INT 1
37967: ST_TO_ADDR
// if btype = b_workshop then
37968: LD_VAR 0 5
37972: PUSH
37973: LD_INT 2
37975: EQUAL
37976: IFFALSE 37986
// btype := b_factory ;
37978: LD_ADDR_VAR 0 5
37982: PUSH
37983: LD_INT 3
37985: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37986: LD_ADDR_VAR 0 4
37990: PUSH
37991: LD_VAR 0 5
37995: PPUSH
37996: LD_VAR 0 1
38000: PPUSH
38001: CALL_OW 248
38005: PPUSH
38006: CALL_OW 450
38010: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38011: LD_ADDR_VAR 0 2
38015: PUSH
38016: LD_VAR 0 3
38020: PPUSH
38021: LD_INT 1
38023: PPUSH
38024: CALL_OW 275
38028: PUSH
38029: LD_VAR 0 4
38033: PUSH
38034: LD_INT 1
38036: ARRAY
38037: GREATEREQUAL
38038: PUSH
38039: LD_VAR 0 3
38043: PPUSH
38044: LD_INT 2
38046: PPUSH
38047: CALL_OW 275
38051: PUSH
38052: LD_VAR 0 4
38056: PUSH
38057: LD_INT 2
38059: ARRAY
38060: GREATEREQUAL
38061: AND
38062: PUSH
38063: LD_VAR 0 3
38067: PPUSH
38068: LD_INT 3
38070: PPUSH
38071: CALL_OW 275
38075: PUSH
38076: LD_VAR 0 4
38080: PUSH
38081: LD_INT 3
38083: ARRAY
38084: GREATEREQUAL
38085: AND
38086: ST_TO_ADDR
// end ;
38087: LD_VAR 0 2
38091: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38092: LD_INT 0
38094: PPUSH
38095: PPUSH
38096: PPUSH
// pom := GetBase ( building ) ;
38097: LD_ADDR_VAR 0 4
38101: PUSH
38102: LD_VAR 0 1
38106: PPUSH
38107: CALL_OW 274
38111: ST_TO_ADDR
// if not pom then
38112: LD_VAR 0 4
38116: NOT
38117: IFFALSE 38121
// exit ;
38119: GO 38222
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38121: LD_ADDR_VAR 0 5
38125: PUSH
38126: LD_VAR 0 2
38130: PPUSH
38131: LD_VAR 0 1
38135: PPUSH
38136: CALL_OW 248
38140: PPUSH
38141: CALL_OW 450
38145: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38146: LD_ADDR_VAR 0 3
38150: PUSH
38151: LD_VAR 0 4
38155: PPUSH
38156: LD_INT 1
38158: PPUSH
38159: CALL_OW 275
38163: PUSH
38164: LD_VAR 0 5
38168: PUSH
38169: LD_INT 1
38171: ARRAY
38172: GREATEREQUAL
38173: PUSH
38174: LD_VAR 0 4
38178: PPUSH
38179: LD_INT 2
38181: PPUSH
38182: CALL_OW 275
38186: PUSH
38187: LD_VAR 0 5
38191: PUSH
38192: LD_INT 2
38194: ARRAY
38195: GREATEREQUAL
38196: AND
38197: PUSH
38198: LD_VAR 0 4
38202: PPUSH
38203: LD_INT 3
38205: PPUSH
38206: CALL_OW 275
38210: PUSH
38211: LD_VAR 0 5
38215: PUSH
38216: LD_INT 3
38218: ARRAY
38219: GREATEREQUAL
38220: AND
38221: ST_TO_ADDR
// end ;
38222: LD_VAR 0 3
38226: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38227: LD_INT 0
38229: PPUSH
38230: PPUSH
38231: PPUSH
38232: PPUSH
38233: PPUSH
38234: PPUSH
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
38239: PPUSH
// result := false ;
38240: LD_ADDR_VAR 0 8
38244: PUSH
38245: LD_INT 0
38247: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38248: LD_VAR 0 5
38252: NOT
38253: PUSH
38254: LD_VAR 0 1
38258: NOT
38259: OR
38260: PUSH
38261: LD_VAR 0 2
38265: NOT
38266: OR
38267: PUSH
38268: LD_VAR 0 3
38272: NOT
38273: OR
38274: IFFALSE 38278
// exit ;
38276: GO 39092
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38278: LD_ADDR_VAR 0 14
38282: PUSH
38283: LD_VAR 0 1
38287: PPUSH
38288: LD_VAR 0 2
38292: PPUSH
38293: LD_VAR 0 3
38297: PPUSH
38298: LD_VAR 0 4
38302: PPUSH
38303: LD_VAR 0 5
38307: PUSH
38308: LD_INT 1
38310: ARRAY
38311: PPUSH
38312: CALL_OW 248
38316: PPUSH
38317: LD_INT 0
38319: PPUSH
38320: CALL 40329 0 6
38324: ST_TO_ADDR
// if not hexes then
38325: LD_VAR 0 14
38329: NOT
38330: IFFALSE 38334
// exit ;
38332: GO 39092
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38334: LD_ADDR_VAR 0 17
38338: PUSH
38339: LD_VAR 0 5
38343: PPUSH
38344: LD_INT 22
38346: PUSH
38347: LD_VAR 0 13
38351: PPUSH
38352: CALL_OW 255
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 2
38363: PUSH
38364: LD_INT 30
38366: PUSH
38367: LD_INT 0
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 30
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: LIST
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PPUSH
38393: CALL_OW 72
38397: ST_TO_ADDR
// for i = 1 to hexes do
38398: LD_ADDR_VAR 0 9
38402: PUSH
38403: DOUBLE
38404: LD_INT 1
38406: DEC
38407: ST_TO_ADDR
38408: LD_VAR 0 14
38412: PUSH
38413: FOR_TO
38414: IFFALSE 39090
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38416: LD_ADDR_VAR 0 13
38420: PUSH
38421: LD_VAR 0 14
38425: PUSH
38426: LD_VAR 0 9
38430: ARRAY
38431: PUSH
38432: LD_INT 1
38434: ARRAY
38435: PPUSH
38436: LD_VAR 0 14
38440: PUSH
38441: LD_VAR 0 9
38445: ARRAY
38446: PUSH
38447: LD_INT 2
38449: ARRAY
38450: PPUSH
38451: CALL_OW 428
38455: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38456: LD_VAR 0 14
38460: PUSH
38461: LD_VAR 0 9
38465: ARRAY
38466: PUSH
38467: LD_INT 1
38469: ARRAY
38470: PPUSH
38471: LD_VAR 0 14
38475: PUSH
38476: LD_VAR 0 9
38480: ARRAY
38481: PUSH
38482: LD_INT 2
38484: ARRAY
38485: PPUSH
38486: CALL_OW 351
38490: PUSH
38491: LD_VAR 0 14
38495: PUSH
38496: LD_VAR 0 9
38500: ARRAY
38501: PUSH
38502: LD_INT 1
38504: ARRAY
38505: PPUSH
38506: LD_VAR 0 14
38510: PUSH
38511: LD_VAR 0 9
38515: ARRAY
38516: PUSH
38517: LD_INT 2
38519: ARRAY
38520: PPUSH
38521: CALL_OW 488
38525: NOT
38526: OR
38527: PUSH
38528: LD_VAR 0 13
38532: PPUSH
38533: CALL_OW 247
38537: PUSH
38538: LD_INT 3
38540: EQUAL
38541: OR
38542: IFFALSE 38548
// exit ;
38544: POP
38545: POP
38546: GO 39092
// if not tmp then
38548: LD_VAR 0 13
38552: NOT
38553: IFFALSE 38557
// continue ;
38555: GO 38413
// result := true ;
38557: LD_ADDR_VAR 0 8
38561: PUSH
38562: LD_INT 1
38564: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38565: LD_VAR 0 6
38569: PUSH
38570: LD_VAR 0 13
38574: PPUSH
38575: CALL_OW 247
38579: PUSH
38580: LD_INT 2
38582: EQUAL
38583: AND
38584: PUSH
38585: LD_VAR 0 13
38589: PPUSH
38590: CALL_OW 263
38594: PUSH
38595: LD_INT 1
38597: EQUAL
38598: AND
38599: IFFALSE 38763
// begin if IsDrivenBy ( tmp ) then
38601: LD_VAR 0 13
38605: PPUSH
38606: CALL_OW 311
38610: IFFALSE 38614
// continue ;
38612: GO 38413
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38614: LD_VAR 0 6
38618: PPUSH
38619: LD_INT 3
38621: PUSH
38622: LD_INT 60
38624: PUSH
38625: EMPTY
38626: LIST
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 3
38634: PUSH
38635: LD_INT 55
38637: PUSH
38638: EMPTY
38639: LIST
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PPUSH
38649: CALL_OW 72
38653: IFFALSE 38761
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38655: LD_ADDR_VAR 0 18
38659: PUSH
38660: LD_VAR 0 6
38664: PPUSH
38665: LD_INT 3
38667: PUSH
38668: LD_INT 60
38670: PUSH
38671: EMPTY
38672: LIST
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 3
38680: PUSH
38681: LD_INT 55
38683: PUSH
38684: EMPTY
38685: LIST
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PPUSH
38695: CALL_OW 72
38699: PUSH
38700: LD_INT 1
38702: ARRAY
38703: ST_TO_ADDR
// if IsInUnit ( driver ) then
38704: LD_VAR 0 18
38708: PPUSH
38709: CALL_OW 310
38713: IFFALSE 38724
// ComExit ( driver ) ;
38715: LD_VAR 0 18
38719: PPUSH
38720: CALL 63457 0 1
// AddComEnterUnit ( driver , tmp ) ;
38724: LD_VAR 0 18
38728: PPUSH
38729: LD_VAR 0 13
38733: PPUSH
38734: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38738: LD_VAR 0 18
38742: PPUSH
38743: LD_VAR 0 7
38747: PPUSH
38748: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38752: LD_VAR 0 18
38756: PPUSH
38757: CALL_OW 181
// end ; continue ;
38761: GO 38413
// end ; if not cleaners or not tmp in cleaners then
38763: LD_VAR 0 6
38767: NOT
38768: PUSH
38769: LD_VAR 0 13
38773: PUSH
38774: LD_VAR 0 6
38778: IN
38779: NOT
38780: OR
38781: IFFALSE 39088
// begin if dep then
38783: LD_VAR 0 17
38787: IFFALSE 38923
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38789: LD_ADDR_VAR 0 16
38793: PUSH
38794: LD_VAR 0 17
38798: PUSH
38799: LD_INT 1
38801: ARRAY
38802: PPUSH
38803: CALL_OW 250
38807: PPUSH
38808: LD_VAR 0 17
38812: PUSH
38813: LD_INT 1
38815: ARRAY
38816: PPUSH
38817: CALL_OW 254
38821: PPUSH
38822: LD_INT 5
38824: PPUSH
38825: CALL_OW 272
38829: PUSH
38830: LD_VAR 0 17
38834: PUSH
38835: LD_INT 1
38837: ARRAY
38838: PPUSH
38839: CALL_OW 251
38843: PPUSH
38844: LD_VAR 0 17
38848: PUSH
38849: LD_INT 1
38851: ARRAY
38852: PPUSH
38853: CALL_OW 254
38857: PPUSH
38858: LD_INT 5
38860: PPUSH
38861: CALL_OW 273
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38870: LD_VAR 0 16
38874: PUSH
38875: LD_INT 1
38877: ARRAY
38878: PPUSH
38879: LD_VAR 0 16
38883: PUSH
38884: LD_INT 2
38886: ARRAY
38887: PPUSH
38888: CALL_OW 488
38892: IFFALSE 38923
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38894: LD_VAR 0 13
38898: PPUSH
38899: LD_VAR 0 16
38903: PUSH
38904: LD_INT 1
38906: ARRAY
38907: PPUSH
38908: LD_VAR 0 16
38912: PUSH
38913: LD_INT 2
38915: ARRAY
38916: PPUSH
38917: CALL_OW 111
// continue ;
38921: GO 38413
// end ; end ; r := GetDir ( tmp ) ;
38923: LD_ADDR_VAR 0 15
38927: PUSH
38928: LD_VAR 0 13
38932: PPUSH
38933: CALL_OW 254
38937: ST_TO_ADDR
// if r = 5 then
38938: LD_VAR 0 15
38942: PUSH
38943: LD_INT 5
38945: EQUAL
38946: IFFALSE 38956
// r := 0 ;
38948: LD_ADDR_VAR 0 15
38952: PUSH
38953: LD_INT 0
38955: ST_TO_ADDR
// for j = r to 5 do
38956: LD_ADDR_VAR 0 10
38960: PUSH
38961: DOUBLE
38962: LD_VAR 0 15
38966: DEC
38967: ST_TO_ADDR
38968: LD_INT 5
38970: PUSH
38971: FOR_TO
38972: IFFALSE 39086
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38974: LD_ADDR_VAR 0 11
38978: PUSH
38979: LD_VAR 0 13
38983: PPUSH
38984: CALL_OW 250
38988: PPUSH
38989: LD_VAR 0 10
38993: PPUSH
38994: LD_INT 2
38996: PPUSH
38997: CALL_OW 272
39001: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39002: LD_ADDR_VAR 0 12
39006: PUSH
39007: LD_VAR 0 13
39011: PPUSH
39012: CALL_OW 251
39016: PPUSH
39017: LD_VAR 0 10
39021: PPUSH
39022: LD_INT 2
39024: PPUSH
39025: CALL_OW 273
39029: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39030: LD_VAR 0 11
39034: PPUSH
39035: LD_VAR 0 12
39039: PPUSH
39040: CALL_OW 488
39044: PUSH
39045: LD_VAR 0 11
39049: PPUSH
39050: LD_VAR 0 12
39054: PPUSH
39055: CALL_OW 428
39059: NOT
39060: AND
39061: IFFALSE 39084
// begin ComMoveXY ( tmp , _x , _y ) ;
39063: LD_VAR 0 13
39067: PPUSH
39068: LD_VAR 0 11
39072: PPUSH
39073: LD_VAR 0 12
39077: PPUSH
39078: CALL_OW 111
// break ;
39082: GO 39086
// end ; end ;
39084: GO 38971
39086: POP
39087: POP
// end ; end ;
39088: GO 38413
39090: POP
39091: POP
// end ;
39092: LD_VAR 0 8
39096: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39097: LD_INT 0
39099: PPUSH
// result := true ;
39100: LD_ADDR_VAR 0 3
39104: PUSH
39105: LD_INT 1
39107: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39108: LD_VAR 0 2
39112: PUSH
39113: LD_INT 24
39115: DOUBLE
39116: EQUAL
39117: IFTRUE 39127
39119: LD_INT 33
39121: DOUBLE
39122: EQUAL
39123: IFTRUE 39127
39125: GO 39152
39127: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39128: LD_ADDR_VAR 0 3
39132: PUSH
39133: LD_INT 32
39135: PPUSH
39136: LD_VAR 0 1
39140: PPUSH
39141: CALL_OW 321
39145: PUSH
39146: LD_INT 2
39148: EQUAL
39149: ST_TO_ADDR
39150: GO 39472
39152: LD_INT 20
39154: DOUBLE
39155: EQUAL
39156: IFTRUE 39160
39158: GO 39185
39160: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39161: LD_ADDR_VAR 0 3
39165: PUSH
39166: LD_INT 6
39168: PPUSH
39169: LD_VAR 0 1
39173: PPUSH
39174: CALL_OW 321
39178: PUSH
39179: LD_INT 2
39181: EQUAL
39182: ST_TO_ADDR
39183: GO 39472
39185: LD_INT 22
39187: DOUBLE
39188: EQUAL
39189: IFTRUE 39199
39191: LD_INT 36
39193: DOUBLE
39194: EQUAL
39195: IFTRUE 39199
39197: GO 39224
39199: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39200: LD_ADDR_VAR 0 3
39204: PUSH
39205: LD_INT 15
39207: PPUSH
39208: LD_VAR 0 1
39212: PPUSH
39213: CALL_OW 321
39217: PUSH
39218: LD_INT 2
39220: EQUAL
39221: ST_TO_ADDR
39222: GO 39472
39224: LD_INT 30
39226: DOUBLE
39227: EQUAL
39228: IFTRUE 39232
39230: GO 39257
39232: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39233: LD_ADDR_VAR 0 3
39237: PUSH
39238: LD_INT 20
39240: PPUSH
39241: LD_VAR 0 1
39245: PPUSH
39246: CALL_OW 321
39250: PUSH
39251: LD_INT 2
39253: EQUAL
39254: ST_TO_ADDR
39255: GO 39472
39257: LD_INT 28
39259: DOUBLE
39260: EQUAL
39261: IFTRUE 39271
39263: LD_INT 21
39265: DOUBLE
39266: EQUAL
39267: IFTRUE 39271
39269: GO 39296
39271: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39272: LD_ADDR_VAR 0 3
39276: PUSH
39277: LD_INT 21
39279: PPUSH
39280: LD_VAR 0 1
39284: PPUSH
39285: CALL_OW 321
39289: PUSH
39290: LD_INT 2
39292: EQUAL
39293: ST_TO_ADDR
39294: GO 39472
39296: LD_INT 16
39298: DOUBLE
39299: EQUAL
39300: IFTRUE 39304
39302: GO 39331
39304: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39305: LD_ADDR_VAR 0 3
39309: PUSH
39310: LD_EXP 37
39314: PPUSH
39315: LD_VAR 0 1
39319: PPUSH
39320: CALL_OW 321
39324: PUSH
39325: LD_INT 2
39327: EQUAL
39328: ST_TO_ADDR
39329: GO 39472
39331: LD_INT 19
39333: DOUBLE
39334: EQUAL
39335: IFTRUE 39345
39337: LD_INT 23
39339: DOUBLE
39340: EQUAL
39341: IFTRUE 39345
39343: GO 39372
39345: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39346: LD_ADDR_VAR 0 3
39350: PUSH
39351: LD_EXP 36
39355: PPUSH
39356: LD_VAR 0 1
39360: PPUSH
39361: CALL_OW 321
39365: PUSH
39366: LD_INT 2
39368: EQUAL
39369: ST_TO_ADDR
39370: GO 39472
39372: LD_INT 17
39374: DOUBLE
39375: EQUAL
39376: IFTRUE 39380
39378: GO 39405
39380: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39381: LD_ADDR_VAR 0 3
39385: PUSH
39386: LD_INT 39
39388: PPUSH
39389: LD_VAR 0 1
39393: PPUSH
39394: CALL_OW 321
39398: PUSH
39399: LD_INT 2
39401: EQUAL
39402: ST_TO_ADDR
39403: GO 39472
39405: LD_INT 18
39407: DOUBLE
39408: EQUAL
39409: IFTRUE 39413
39411: GO 39438
39413: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39414: LD_ADDR_VAR 0 3
39418: PUSH
39419: LD_INT 40
39421: PPUSH
39422: LD_VAR 0 1
39426: PPUSH
39427: CALL_OW 321
39431: PUSH
39432: LD_INT 2
39434: EQUAL
39435: ST_TO_ADDR
39436: GO 39472
39438: LD_INT 27
39440: DOUBLE
39441: EQUAL
39442: IFTRUE 39446
39444: GO 39471
39446: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39447: LD_ADDR_VAR 0 3
39451: PUSH
39452: LD_INT 35
39454: PPUSH
39455: LD_VAR 0 1
39459: PPUSH
39460: CALL_OW 321
39464: PUSH
39465: LD_INT 2
39467: EQUAL
39468: ST_TO_ADDR
39469: GO 39472
39471: POP
// end ;
39472: LD_VAR 0 3
39476: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39477: LD_INT 0
39479: PPUSH
39480: PPUSH
39481: PPUSH
39482: PPUSH
39483: PPUSH
39484: PPUSH
39485: PPUSH
39486: PPUSH
39487: PPUSH
39488: PPUSH
39489: PPUSH
// result := false ;
39490: LD_ADDR_VAR 0 6
39494: PUSH
39495: LD_INT 0
39497: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39498: LD_VAR 0 1
39502: NOT
39503: PUSH
39504: LD_VAR 0 1
39508: PPUSH
39509: CALL_OW 266
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: IN
39524: NOT
39525: OR
39526: PUSH
39527: LD_VAR 0 2
39531: NOT
39532: OR
39533: PUSH
39534: LD_VAR 0 5
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: LD_INT 2
39547: PUSH
39548: LD_INT 3
39550: PUSH
39551: LD_INT 4
39553: PUSH
39554: LD_INT 5
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: IN
39565: NOT
39566: OR
39567: PUSH
39568: LD_VAR 0 3
39572: PPUSH
39573: LD_VAR 0 4
39577: PPUSH
39578: CALL_OW 488
39582: NOT
39583: OR
39584: IFFALSE 39588
// exit ;
39586: GO 40324
// side := GetSide ( depot ) ;
39588: LD_ADDR_VAR 0 9
39592: PUSH
39593: LD_VAR 0 1
39597: PPUSH
39598: CALL_OW 255
39602: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39603: LD_VAR 0 9
39607: PPUSH
39608: LD_VAR 0 2
39612: PPUSH
39613: CALL 39097 0 2
39617: NOT
39618: IFFALSE 39622
// exit ;
39620: GO 40324
// pom := GetBase ( depot ) ;
39622: LD_ADDR_VAR 0 10
39626: PUSH
39627: LD_VAR 0 1
39631: PPUSH
39632: CALL_OW 274
39636: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39637: LD_ADDR_VAR 0 11
39641: PUSH
39642: LD_VAR 0 2
39646: PPUSH
39647: LD_VAR 0 1
39651: PPUSH
39652: CALL_OW 248
39656: PPUSH
39657: CALL_OW 450
39661: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39662: LD_VAR 0 10
39666: PPUSH
39667: LD_INT 1
39669: PPUSH
39670: CALL_OW 275
39674: PUSH
39675: LD_VAR 0 11
39679: PUSH
39680: LD_INT 1
39682: ARRAY
39683: GREATEREQUAL
39684: PUSH
39685: LD_VAR 0 10
39689: PPUSH
39690: LD_INT 2
39692: PPUSH
39693: CALL_OW 275
39697: PUSH
39698: LD_VAR 0 11
39702: PUSH
39703: LD_INT 2
39705: ARRAY
39706: GREATEREQUAL
39707: AND
39708: PUSH
39709: LD_VAR 0 10
39713: PPUSH
39714: LD_INT 3
39716: PPUSH
39717: CALL_OW 275
39721: PUSH
39722: LD_VAR 0 11
39726: PUSH
39727: LD_INT 3
39729: ARRAY
39730: GREATEREQUAL
39731: AND
39732: NOT
39733: IFFALSE 39737
// exit ;
39735: GO 40324
// if GetBType ( depot ) = b_depot then
39737: LD_VAR 0 1
39741: PPUSH
39742: CALL_OW 266
39746: PUSH
39747: LD_INT 0
39749: EQUAL
39750: IFFALSE 39762
// dist := 28 else
39752: LD_ADDR_VAR 0 14
39756: PUSH
39757: LD_INT 28
39759: ST_TO_ADDR
39760: GO 39770
// dist := 36 ;
39762: LD_ADDR_VAR 0 14
39766: PUSH
39767: LD_INT 36
39769: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39770: LD_VAR 0 1
39774: PPUSH
39775: LD_VAR 0 3
39779: PPUSH
39780: LD_VAR 0 4
39784: PPUSH
39785: CALL_OW 297
39789: PUSH
39790: LD_VAR 0 14
39794: GREATER
39795: IFFALSE 39799
// exit ;
39797: GO 40324
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39799: LD_ADDR_VAR 0 12
39803: PUSH
39804: LD_VAR 0 2
39808: PPUSH
39809: LD_VAR 0 3
39813: PPUSH
39814: LD_VAR 0 4
39818: PPUSH
39819: LD_VAR 0 5
39823: PPUSH
39824: LD_VAR 0 1
39828: PPUSH
39829: CALL_OW 248
39833: PPUSH
39834: LD_INT 0
39836: PPUSH
39837: CALL 40329 0 6
39841: ST_TO_ADDR
// if not hexes then
39842: LD_VAR 0 12
39846: NOT
39847: IFFALSE 39851
// exit ;
39849: GO 40324
// hex := GetHexInfo ( x , y ) ;
39851: LD_ADDR_VAR 0 15
39855: PUSH
39856: LD_VAR 0 3
39860: PPUSH
39861: LD_VAR 0 4
39865: PPUSH
39866: CALL_OW 546
39870: ST_TO_ADDR
// if hex [ 1 ] then
39871: LD_VAR 0 15
39875: PUSH
39876: LD_INT 1
39878: ARRAY
39879: IFFALSE 39883
// exit ;
39881: GO 40324
// height := hex [ 2 ] ;
39883: LD_ADDR_VAR 0 13
39887: PUSH
39888: LD_VAR 0 15
39892: PUSH
39893: LD_INT 2
39895: ARRAY
39896: ST_TO_ADDR
// for i = 1 to hexes do
39897: LD_ADDR_VAR 0 7
39901: PUSH
39902: DOUBLE
39903: LD_INT 1
39905: DEC
39906: ST_TO_ADDR
39907: LD_VAR 0 12
39911: PUSH
39912: FOR_TO
39913: IFFALSE 40243
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39915: LD_VAR 0 12
39919: PUSH
39920: LD_VAR 0 7
39924: ARRAY
39925: PUSH
39926: LD_INT 1
39928: ARRAY
39929: PPUSH
39930: LD_VAR 0 12
39934: PUSH
39935: LD_VAR 0 7
39939: ARRAY
39940: PUSH
39941: LD_INT 2
39943: ARRAY
39944: PPUSH
39945: CALL_OW 488
39949: NOT
39950: PUSH
39951: LD_VAR 0 12
39955: PUSH
39956: LD_VAR 0 7
39960: ARRAY
39961: PUSH
39962: LD_INT 1
39964: ARRAY
39965: PPUSH
39966: LD_VAR 0 12
39970: PUSH
39971: LD_VAR 0 7
39975: ARRAY
39976: PUSH
39977: LD_INT 2
39979: ARRAY
39980: PPUSH
39981: CALL_OW 428
39985: PUSH
39986: LD_INT 0
39988: GREATER
39989: OR
39990: PUSH
39991: LD_VAR 0 12
39995: PUSH
39996: LD_VAR 0 7
40000: ARRAY
40001: PUSH
40002: LD_INT 1
40004: ARRAY
40005: PPUSH
40006: LD_VAR 0 12
40010: PUSH
40011: LD_VAR 0 7
40015: ARRAY
40016: PUSH
40017: LD_INT 2
40019: ARRAY
40020: PPUSH
40021: CALL_OW 351
40025: OR
40026: IFFALSE 40032
// exit ;
40028: POP
40029: POP
40030: GO 40324
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40032: LD_ADDR_VAR 0 8
40036: PUSH
40037: LD_VAR 0 12
40041: PUSH
40042: LD_VAR 0 7
40046: ARRAY
40047: PUSH
40048: LD_INT 1
40050: ARRAY
40051: PPUSH
40052: LD_VAR 0 12
40056: PUSH
40057: LD_VAR 0 7
40061: ARRAY
40062: PUSH
40063: LD_INT 2
40065: ARRAY
40066: PPUSH
40067: CALL_OW 546
40071: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40072: LD_VAR 0 8
40076: PUSH
40077: LD_INT 1
40079: ARRAY
40080: PUSH
40081: LD_VAR 0 8
40085: PUSH
40086: LD_INT 2
40088: ARRAY
40089: PUSH
40090: LD_VAR 0 13
40094: PUSH
40095: LD_INT 2
40097: PLUS
40098: GREATER
40099: OR
40100: PUSH
40101: LD_VAR 0 8
40105: PUSH
40106: LD_INT 2
40108: ARRAY
40109: PUSH
40110: LD_VAR 0 13
40114: PUSH
40115: LD_INT 2
40117: MINUS
40118: LESS
40119: OR
40120: PUSH
40121: LD_VAR 0 8
40125: PUSH
40126: LD_INT 3
40128: ARRAY
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 8
40135: PUSH
40136: LD_INT 9
40138: PUSH
40139: LD_INT 10
40141: PUSH
40142: LD_INT 11
40144: PUSH
40145: LD_INT 12
40147: PUSH
40148: LD_INT 13
40150: PUSH
40151: LD_INT 16
40153: PUSH
40154: LD_INT 17
40156: PUSH
40157: LD_INT 18
40159: PUSH
40160: LD_INT 19
40162: PUSH
40163: LD_INT 20
40165: PUSH
40166: LD_INT 21
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: IN
40184: NOT
40185: OR
40186: PUSH
40187: LD_VAR 0 8
40191: PUSH
40192: LD_INT 5
40194: ARRAY
40195: NOT
40196: OR
40197: PUSH
40198: LD_VAR 0 8
40202: PUSH
40203: LD_INT 6
40205: ARRAY
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: LD_INT 7
40215: PUSH
40216: LD_INT 9
40218: PUSH
40219: LD_INT 10
40221: PUSH
40222: LD_INT 11
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: IN
40233: NOT
40234: OR
40235: IFFALSE 40241
// exit ;
40237: POP
40238: POP
40239: GO 40324
// end ;
40241: GO 39912
40243: POP
40244: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40245: LD_VAR 0 9
40249: PPUSH
40250: LD_VAR 0 3
40254: PPUSH
40255: LD_VAR 0 4
40259: PPUSH
40260: LD_INT 20
40262: PPUSH
40263: CALL 32270 0 4
40267: PUSH
40268: LD_INT 4
40270: ARRAY
40271: IFFALSE 40275
// exit ;
40273: GO 40324
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40275: LD_VAR 0 2
40279: PUSH
40280: LD_INT 29
40282: PUSH
40283: LD_INT 30
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: IN
40290: PUSH
40291: LD_VAR 0 3
40295: PPUSH
40296: LD_VAR 0 4
40300: PPUSH
40301: LD_VAR 0 9
40305: PPUSH
40306: CALL_OW 440
40310: NOT
40311: AND
40312: IFFALSE 40316
// exit ;
40314: GO 40324
// result := true ;
40316: LD_ADDR_VAR 0 6
40320: PUSH
40321: LD_INT 1
40323: ST_TO_ADDR
// end ;
40324: LD_VAR 0 6
40328: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40329: LD_INT 0
40331: PPUSH
40332: PPUSH
40333: PPUSH
40334: PPUSH
40335: PPUSH
40336: PPUSH
40337: PPUSH
40338: PPUSH
40339: PPUSH
40340: PPUSH
40341: PPUSH
40342: PPUSH
40343: PPUSH
40344: PPUSH
40345: PPUSH
40346: PPUSH
40347: PPUSH
40348: PPUSH
40349: PPUSH
40350: PPUSH
40351: PPUSH
40352: PPUSH
40353: PPUSH
40354: PPUSH
40355: PPUSH
40356: PPUSH
40357: PPUSH
40358: PPUSH
40359: PPUSH
40360: PPUSH
40361: PPUSH
40362: PPUSH
40363: PPUSH
40364: PPUSH
40365: PPUSH
40366: PPUSH
40367: PPUSH
40368: PPUSH
40369: PPUSH
40370: PPUSH
40371: PPUSH
40372: PPUSH
40373: PPUSH
40374: PPUSH
40375: PPUSH
40376: PPUSH
40377: PPUSH
40378: PPUSH
40379: PPUSH
40380: PPUSH
40381: PPUSH
40382: PPUSH
40383: PPUSH
40384: PPUSH
40385: PPUSH
40386: PPUSH
40387: PPUSH
40388: PPUSH
// result = [ ] ;
40389: LD_ADDR_VAR 0 7
40393: PUSH
40394: EMPTY
40395: ST_TO_ADDR
// temp_list = [ ] ;
40396: LD_ADDR_VAR 0 9
40400: PUSH
40401: EMPTY
40402: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40403: LD_VAR 0 4
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: LD_INT 3
40419: PUSH
40420: LD_INT 4
40422: PUSH
40423: LD_INT 5
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: IN
40434: NOT
40435: PUSH
40436: LD_VAR 0 1
40440: PUSH
40441: LD_INT 0
40443: PUSH
40444: LD_INT 1
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: IN
40451: PUSH
40452: LD_VAR 0 5
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: LD_INT 2
40462: PUSH
40463: LD_INT 3
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: IN
40471: NOT
40472: AND
40473: OR
40474: IFFALSE 40478
// exit ;
40476: GO 58869
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40478: LD_VAR 0 1
40482: PUSH
40483: LD_INT 6
40485: PUSH
40486: LD_INT 7
40488: PUSH
40489: LD_INT 8
40491: PUSH
40492: LD_INT 13
40494: PUSH
40495: LD_INT 12
40497: PUSH
40498: LD_INT 15
40500: PUSH
40501: LD_INT 11
40503: PUSH
40504: LD_INT 14
40506: PUSH
40507: LD_INT 10
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: IN
40521: IFFALSE 40531
// btype = b_lab ;
40523: LD_ADDR_VAR 0 1
40527: PUSH
40528: LD_INT 6
40530: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40531: LD_VAR 0 6
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: LD_INT 2
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: LIST
40549: IN
40550: NOT
40551: PUSH
40552: LD_VAR 0 1
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: LD_INT 1
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: LD_INT 3
40568: PUSH
40569: LD_INT 6
40571: PUSH
40572: LD_INT 36
40574: PUSH
40575: LD_INT 4
40577: PUSH
40578: LD_INT 5
40580: PUSH
40581: LD_INT 31
40583: PUSH
40584: LD_INT 32
40586: PUSH
40587: LD_INT 33
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: IN
40603: NOT
40604: PUSH
40605: LD_VAR 0 6
40609: PUSH
40610: LD_INT 1
40612: EQUAL
40613: AND
40614: OR
40615: PUSH
40616: LD_VAR 0 1
40620: PUSH
40621: LD_INT 2
40623: PUSH
40624: LD_INT 3
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: IN
40631: NOT
40632: PUSH
40633: LD_VAR 0 6
40637: PUSH
40638: LD_INT 2
40640: EQUAL
40641: AND
40642: OR
40643: IFFALSE 40653
// mode = 0 ;
40645: LD_ADDR_VAR 0 6
40649: PUSH
40650: LD_INT 0
40652: ST_TO_ADDR
// case mode of 0 :
40653: LD_VAR 0 6
40657: PUSH
40658: LD_INT 0
40660: DOUBLE
40661: EQUAL
40662: IFTRUE 40666
40664: GO 52119
40666: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40667: LD_ADDR_VAR 0 11
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: LD_INT 0
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: LD_INT 2
40752: NEG
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: LD_INT 2
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: PUSH
40772: LD_INT 1
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: LD_INT 2
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: LD_INT 2
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 1
40802: NEG
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 1
40813: PUSH
40814: LD_INT 3
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: LD_INT 3
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40860: LD_ADDR_VAR 0 12
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 1
40880: NEG
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: LD_INT 1
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 1
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: LD_INT 1
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 2
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 2
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: LD_INT 1
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 2
40983: NEG
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 2
40994: NEG
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: NEG
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 3
41017: NEG
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 3
41028: NEG
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41056: LD_ADDR_VAR 0 13
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: LD_INT 1
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: LD_INT 1
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 1
41114: NEG
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 1
41137: NEG
41138: PUSH
41139: LD_INT 2
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 2
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 2
41159: PUSH
41160: LD_INT 2
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: LD_INT 2
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 2
41179: NEG
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 2
41191: NEG
41192: PUSH
41193: LD_INT 2
41195: NEG
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 2
41203: NEG
41204: PUSH
41205: LD_INT 3
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 3
41215: NEG
41216: PUSH
41217: LD_INT 2
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 3
41227: NEG
41228: PUSH
41229: LD_INT 3
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41255: LD_ADDR_VAR 0 14
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: LD_INT 1
41275: NEG
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 1
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 1
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: NEG
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: LD_INT 2
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: LD_INT 2
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: PUSH
41371: LD_INT 2
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: LD_INT 2
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: NEG
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: LD_INT 3
41405: NEG
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: LD_INT 3
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: LD_INT 2
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41451: LD_ADDR_VAR 0 15
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: LD_INT 1
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 2
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 2
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 2
41574: NEG
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 2
41585: NEG
41586: PUSH
41587: LD_INT 1
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 3
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 3
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41644: LD_ADDR_VAR 0 16
41648: PUSH
41649: LD_INT 0
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: LD_INT 0
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: LD_INT 2
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 2
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 2
41747: PUSH
41748: LD_INT 2
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: LD_INT 2
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 2
41767: NEG
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 2
41779: NEG
41780: PUSH
41781: LD_INT 2
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 3
41791: PUSH
41792: LD_INT 2
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 3
41801: PUSH
41802: LD_INT 3
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 2
41811: PUSH
41812: LD_INT 3
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41837: LD_ADDR_VAR 0 17
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: LD_INT 2
41922: NEG
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 2
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 2
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: LD_INT 2
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: LD_INT 2
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: LD_INT 2
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 2
42013: NEG
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 2
42024: NEG
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 2
42036: NEG
42037: PUSH
42038: LD_INT 2
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42067: LD_ADDR_VAR 0 18
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 1
42125: NEG
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 1
42136: NEG
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: LD_INT 2
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: LD_INT 2
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 2
42182: PUSH
42183: LD_INT 0
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 2
42192: PUSH
42193: LD_INT 1
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 2
42202: PUSH
42203: LD_INT 2
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 1
42212: PUSH
42213: LD_INT 2
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: LD_INT 2
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: LD_INT 1
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 2
42243: NEG
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 2
42254: NEG
42255: PUSH
42256: LD_INT 1
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: LD_INT 2
42270: NEG
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42297: LD_ADDR_VAR 0 19
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: LD_INT 1
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 1
42366: NEG
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: LD_INT 2
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: LD_INT 2
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 2
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 2
42422: PUSH
42423: LD_INT 1
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 2
42432: PUSH
42433: LD_INT 2
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 1
42442: PUSH
42443: LD_INT 2
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: LD_INT 2
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 2
42473: NEG
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 2
42484: NEG
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 2
42496: NEG
42497: PUSH
42498: LD_INT 2
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42527: LD_ADDR_VAR 0 20
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 1
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 1
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: NEG
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: LD_INT 2
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: LD_INT 2
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: PUSH
42663: LD_INT 2
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: LD_INT 2
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: LD_INT 2
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 2
42703: NEG
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 2
42714: NEG
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 2
42726: NEG
42727: PUSH
42728: LD_INT 2
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42757: LD_ADDR_VAR 0 21
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: LD_INT 1
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: LD_INT 2
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 1
42861: PUSH
42862: LD_INT 1
42864: NEG
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 2
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: LD_INT 2
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 1
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: LD_INT 2
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 2
42933: NEG
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 2
42944: NEG
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: LD_INT 2
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42987: LD_ADDR_VAR 0 22
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: LD_INT 2
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: LD_INT 2
43083: NEG
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 2
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 2
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: LD_INT 2
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: LD_INT 2
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 2
43163: NEG
43164: PUSH
43165: LD_INT 0
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 2
43174: NEG
43175: PUSH
43176: LD_INT 1
43178: NEG
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 2
43186: NEG
43187: PUSH
43188: LD_INT 2
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43217: LD_ADDR_VAR 0 23
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: LD_INT 0
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 2
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 2
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: LD_INT 2
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 2
43393: NEG
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 2
43404: NEG
43405: PUSH
43406: LD_INT 1
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: LD_INT 2
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: LD_INT 3
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: LD_INT 3
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: LD_INT 2
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43497: LD_ADDR_VAR 0 24
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: NEG
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: LD_INT 2
43582: NEG
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: LD_INT 2
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 2
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 2
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: LD_INT 2
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: LD_INT 2
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 2
43673: NEG
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 2
43684: NEG
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 2
43696: NEG
43697: PUSH
43698: LD_INT 2
43700: NEG
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: LD_INT 2
43711: NEG
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 2
43719: PUSH
43720: LD_INT 1
43722: NEG
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 3
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 3
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43773: LD_ADDR_VAR 0 25
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: LD_INT 2
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 2
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 2
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 2
43908: PUSH
43909: LD_INT 2
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: LD_INT 2
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: LD_INT 2
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 2
43949: NEG
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 2
43960: NEG
43961: PUSH
43962: LD_INT 1
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 2
43972: NEG
43973: PUSH
43974: LD_INT 2
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 3
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 3
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 2
44004: PUSH
44005: LD_INT 3
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: LD_INT 3
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44047: LD_ADDR_VAR 0 26
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: LD_INT 2
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 2
44172: PUSH
44173: LD_INT 1
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: NEG
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 2
44234: NEG
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 2
44246: NEG
44247: PUSH
44248: LD_INT 2
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: LD_INT 3
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: PUSH
44269: LD_INT 3
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 2
44289: NEG
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44323: LD_ADDR_VAR 0 27
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: NEG
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: LD_INT 2
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: LD_INT 2
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: LD_INT 1
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: NEG
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: LD_INT 2
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: LD_INT 2
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 3
44556: NEG
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 3
44568: NEG
44569: PUSH
44570: LD_INT 2
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44603: LD_ADDR_VAR 0 28
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: LD_INT 2
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: NEG
44815: PUSH
44816: LD_INT 3
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: LD_INT 3
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 3
44838: NEG
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 3
44850: NEG
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44885: LD_ADDR_VAR 0 29
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: NEG
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: LD_INT 3
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 2
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 3
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: LD_INT 3
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 3
45129: NEG
45130: PUSH
45131: LD_INT 2
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45164: LD_ADDR_VAR 0 30
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: LD_INT 2
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: LD_INT 2
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: LD_INT 2
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: LD_INT 3
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 3
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: LD_INT 3
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 2
45396: NEG
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 3
45407: NEG
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45442: LD_ADDR_VAR 0 31
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: LD_INT 2
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 2
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 2
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 2
45566: PUSH
45567: LD_INT 2
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: LD_INT 2
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 2
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 2
45607: NEG
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: NEG
45632: PUSH
45633: LD_INT 3
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 3
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: LD_INT 3
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 3
45685: NEG
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45720: LD_ADDR_VAR 0 32
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: LD_INT 2
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 2
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 2
45886: NEG
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 2
45897: NEG
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: LD_INT 3
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: LD_INT 2
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 3
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 2
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 3
45963: NEG
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45998: LD_ADDR_VAR 0 33
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 2
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: LD_INT 3
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 3
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 3
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 2
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 3
46242: NEG
46243: PUSH
46244: LD_INT 2
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46277: LD_ADDR_VAR 0 34
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: LD_INT 2
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 2
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: LD_INT 2
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: NEG
46457: PUSH
46458: LD_INT 2
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: LD_INT 3
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 2
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 3
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: LD_INT 3
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 2
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 3
46522: NEG
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46557: LD_ADDR_VAR 0 35
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 2
46648: NEG
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46669: LD_ADDR_VAR 0 36
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46781: LD_ADDR_VAR 0 37
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46893: LD_ADDR_VAR 0 38
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: NEG
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47005: LD_ADDR_VAR 0 39
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47117: LD_ADDR_VAR 0 40
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47229: LD_ADDR_VAR 0 41
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: LD_INT 2
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 2
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 2
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 2
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 2
47384: NEG
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: LD_INT 2
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 2
47419: NEG
47420: PUSH
47421: LD_INT 3
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 3
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 3
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 3
47462: PUSH
47463: LD_INT 2
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 3
47472: PUSH
47473: LD_INT 3
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 2
47482: PUSH
47483: LD_INT 3
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 3
47503: NEG
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 3
47514: NEG
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 3
47526: NEG
47527: PUSH
47528: LD_INT 2
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 3
47538: NEG
47539: PUSH
47540: LD_INT 3
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47579: LD_ADDR_VAR 0 42
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: LD_INT 2
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: NEG
47770: PUSH
47771: LD_INT 3
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 3
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 3
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 2
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 3
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 3
47825: PUSH
47826: LD_INT 3
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: LD_INT 3
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 3
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 3
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 3
47876: NEG
47877: PUSH
47878: LD_INT 2
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 3
47888: NEG
47889: PUSH
47890: LD_INT 3
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47929: LD_ADDR_VAR 0 43
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: LD_INT 2
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: LD_INT 2
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 2
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 2
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: LD_INT 2
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 2
48106: NEG
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 3
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 3
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: LD_INT 2
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 3
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 3
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: LD_INT 3
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: LD_INT 3
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 3
48225: NEG
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 3
48236: NEG
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48277: LD_ADDR_VAR 0 44
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: LD_INT 2
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 2
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 2
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: NEG
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: NEG
48444: PUSH
48445: LD_INT 1
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: LD_INT 3
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 3
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 3
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 3
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 3
48520: PUSH
48521: LD_INT 3
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: PUSH
48531: LD_INT 3
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 2
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 3
48551: NEG
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 3
48562: NEG
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 3
48574: NEG
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 3
48586: NEG
48587: PUSH
48588: LD_INT 3
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48627: LD_ADDR_VAR 0 45
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: LD_INT 2
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 2
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: LD_INT 2
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: NEG
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: LD_INT 3
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: LD_INT 3
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 3
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 3
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 3
48873: PUSH
48874: LD_INT 3
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 2
48883: PUSH
48884: LD_INT 3
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: LD_INT 3
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: LD_INT 3
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 3
48924: NEG
48925: PUSH
48926: LD_INT 2
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 3
48936: NEG
48937: PUSH
48938: LD_INT 3
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48977: LD_ADDR_VAR 0 46
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: LD_INT 2
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 2
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 2
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: LD_INT 2
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: LD_INT 2
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: NEG
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 2
49143: NEG
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: NEG
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 3
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 3
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 2
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 3
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 3
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: LD_INT 3
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: LD_INT 3
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 3
49273: NEG
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 3
49284: NEG
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49325: LD_ADDR_VAR 0 47
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 2
49452: NEG
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49476: LD_ADDR_VAR 0 48
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 2
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49623: LD_ADDR_VAR 0 49
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: LD_INT 0
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 2
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 2
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49767: LD_ADDR_VAR 0 50
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: LD_INT 2
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: LD_INT 1
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49911: LD_ADDR_VAR 0 51
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50058: LD_ADDR_VAR 0 52
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 1
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: LD_INT 2
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 2
50185: NEG
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50209: LD_ADDR_VAR 0 53
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: LD_INT 2
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 2
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 2
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 2
50385: NEG
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 2
50396: NEG
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50439: LD_ADDR_VAR 0 54
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: LD_INT 2
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: LD_INT 2
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 2
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 2
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: LD_INT 2
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: NEG
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: LD_INT 2
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50669: LD_ADDR_VAR 0 55
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: LD_INT 1
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: LD_INT 2
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 2
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 2
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 2
50804: PUSH
50805: LD_INT 2
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: LD_INT 2
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50899: LD_ADDR_VAR 0 56
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 2
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: PUSH
51035: LD_INT 2
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 2
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 2
51086: NEG
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: LD_INT 2
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51129: LD_ADDR_VAR 0 57
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: NEG
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: LD_INT 2
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51359: LD_ADDR_VAR 0 58
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: LD_INT 2
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: LD_INT 2
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51589: LD_ADDR_VAR 0 59
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: LD_INT 1
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51677: LD_ADDR_VAR 0 60
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51765: LD_ADDR_VAR 0 61
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51853: LD_ADDR_VAR 0 62
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51941: LD_ADDR_VAR 0 63
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52029: LD_ADDR_VAR 0 64
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: ST_TO_ADDR
// end ; 1 :
52117: GO 58014
52119: LD_INT 1
52121: DOUBLE
52122: EQUAL
52123: IFTRUE 52127
52125: GO 54750
52127: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52128: LD_ADDR_VAR 0 11
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: LD_INT 3
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: LD_INT 3
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: LD_INT 2
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: LIST
52171: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52172: LD_ADDR_VAR 0 12
52176: PUSH
52177: LD_INT 2
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 3
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: LIST
52212: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52213: LD_ADDR_VAR 0 13
52217: PUSH
52218: LD_INT 3
52220: PUSH
52221: LD_INT 2
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 3
52230: PUSH
52231: LD_INT 3
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: LD_INT 3
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: LIST
52252: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52253: LD_ADDR_VAR 0 14
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: LD_INT 3
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 3
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52294: LD_ADDR_VAR 0 15
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 3
52312: NEG
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 3
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: LIST
52337: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52338: LD_ADDR_VAR 0 16
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: LD_INT 3
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 3
52357: NEG
52358: PUSH
52359: LD_INT 2
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 3
52369: NEG
52370: PUSH
52371: LD_INT 3
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: LIST
52383: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52384: LD_ADDR_VAR 0 17
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 3
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 3
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: LD_INT 2
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: LIST
52427: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52428: LD_ADDR_VAR 0 18
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 3
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 3
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: LIST
52468: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52469: LD_ADDR_VAR 0 19
52473: PUSH
52474: LD_INT 3
52476: PUSH
52477: LD_INT 2
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 3
52486: PUSH
52487: LD_INT 3
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: PUSH
52497: LD_INT 3
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: LIST
52508: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52509: LD_ADDR_VAR 0 20
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: LD_INT 3
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: LD_INT 3
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: LIST
52549: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52550: LD_ADDR_VAR 0 21
52554: PUSH
52555: LD_INT 2
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 3
52568: NEG
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 3
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: LIST
52593: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52594: LD_ADDR_VAR 0 22
52598: PUSH
52599: LD_INT 2
52601: NEG
52602: PUSH
52603: LD_INT 3
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 3
52613: NEG
52614: PUSH
52615: LD_INT 2
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 3
52625: NEG
52626: PUSH
52627: LD_INT 3
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: LIST
52639: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52640: LD_ADDR_VAR 0 23
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: LD_INT 3
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: LD_INT 4
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: LD_INT 3
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: LIST
52683: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52684: LD_ADDR_VAR 0 24
52688: PUSH
52689: LD_INT 3
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 3
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 4
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: LIST
52724: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52725: LD_ADDR_VAR 0 25
52729: PUSH
52730: LD_INT 3
52732: PUSH
52733: LD_INT 3
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 4
52742: PUSH
52743: LD_INT 3
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 3
52752: PUSH
52753: LD_INT 4
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: LIST
52764: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52765: LD_ADDR_VAR 0 26
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 3
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: LD_INT 4
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: LD_INT 3
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: LIST
52805: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52806: LD_ADDR_VAR 0 27
52810: PUSH
52811: LD_INT 3
52813: NEG
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 3
52824: NEG
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 4
52835: NEG
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: LIST
52849: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52850: LD_ADDR_VAR 0 28
52854: PUSH
52855: LD_INT 3
52857: NEG
52858: PUSH
52859: LD_INT 3
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 3
52869: NEG
52870: PUSH
52871: LD_INT 4
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 4
52881: NEG
52882: PUSH
52883: LD_INT 3
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: LIST
52895: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52896: LD_ADDR_VAR 0 29
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: LD_INT 3
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 3
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 2
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: LD_INT 4
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: LD_INT 4
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: LD_INT 3
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 5
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: LD_INT 5
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: LD_INT 4
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: LD_INT 6
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: LD_INT 6
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: LD_INT 5
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53051: LD_ADDR_VAR 0 30
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 3
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 3
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 3
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 4
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 4
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 4
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 5
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 5
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 5
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 6
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 6
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53194: LD_ADDR_VAR 0 31
53198: PUSH
53199: LD_INT 3
53201: PUSH
53202: LD_INT 2
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 3
53211: PUSH
53212: LD_INT 3
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 2
53221: PUSH
53222: LD_INT 3
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 4
53231: PUSH
53232: LD_INT 3
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 4
53241: PUSH
53242: LD_INT 4
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 3
53251: PUSH
53252: LD_INT 4
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 5
53261: PUSH
53262: LD_INT 4
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 5
53271: PUSH
53272: LD_INT 5
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 4
53281: PUSH
53282: LD_INT 5
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 6
53291: PUSH
53292: LD_INT 5
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 6
53301: PUSH
53302: LD_INT 6
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 5
53311: PUSH
53312: LD_INT 6
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53333: LD_ADDR_VAR 0 32
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 3
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 3
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: LD_INT 2
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: LD_INT 4
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 4
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: LD_INT 3
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: LD_INT 5
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 5
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: LD_INT 4
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: LD_INT 6
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 6
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 5
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53476: LD_ADDR_VAR 0 33
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 3
53494: NEG
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 3
53505: NEG
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 3
53517: NEG
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 4
53528: NEG
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 4
53539: NEG
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 4
53551: NEG
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 5
53562: NEG
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 5
53573: NEG
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 5
53585: NEG
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 6
53596: NEG
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 6
53607: NEG
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53631: LD_ADDR_VAR 0 34
53635: PUSH
53636: LD_INT 2
53638: NEG
53639: PUSH
53640: LD_INT 3
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 3
53650: NEG
53651: PUSH
53652: LD_INT 2
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 3
53662: NEG
53663: PUSH
53664: LD_INT 3
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 3
53674: NEG
53675: PUSH
53676: LD_INT 4
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 4
53686: NEG
53687: PUSH
53688: LD_INT 3
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 4
53698: NEG
53699: PUSH
53700: LD_INT 4
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 4
53710: NEG
53711: PUSH
53712: LD_INT 5
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 5
53722: NEG
53723: PUSH
53724: LD_INT 4
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 5
53734: NEG
53735: PUSH
53736: LD_INT 5
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 5
53746: NEG
53747: PUSH
53748: LD_INT 6
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 6
53758: NEG
53759: PUSH
53760: LD_INT 5
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 6
53770: NEG
53771: PUSH
53772: LD_INT 6
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53794: LD_ADDR_VAR 0 41
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: LD_INT 3
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: LD_INT 2
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: LIST
53837: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53838: LD_ADDR_VAR 0 42
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 2
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 3
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: LIST
53878: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53879: LD_ADDR_VAR 0 43
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: LD_INT 2
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 3
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: LD_INT 3
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: LIST
53918: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53919: LD_ADDR_VAR 0 44
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: LD_INT 3
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: LIST
53959: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53960: LD_ADDR_VAR 0 45
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 3
53989: NEG
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: LIST
54003: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54004: LD_ADDR_VAR 0 46
54008: PUSH
54009: LD_INT 2
54011: NEG
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: LD_INT 3
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 3
54035: NEG
54036: PUSH
54037: LD_INT 2
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: LIST
54049: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54050: LD_ADDR_VAR 0 47
54054: PUSH
54055: LD_INT 2
54057: NEG
54058: PUSH
54059: LD_INT 3
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 3
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54083: LD_ADDR_VAR 0 48
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54114: LD_ADDR_VAR 0 49
54118: PUSH
54119: LD_INT 3
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 3
54131: PUSH
54132: LD_INT 2
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54143: LD_ADDR_VAR 0 50
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: LD_INT 3
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: LD_INT 3
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54172: LD_ADDR_VAR 0 51
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 2
54190: NEG
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54203: LD_ADDR_VAR 0 52
54207: PUSH
54208: LD_INT 3
54210: NEG
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 3
54222: NEG
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54236: LD_ADDR_VAR 0 53
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: LD_INT 3
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 3
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 2
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: LIST
54279: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54280: LD_ADDR_VAR 0 54
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 3
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 3
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: LIST
54320: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54321: LD_ADDR_VAR 0 55
54325: PUSH
54326: LD_INT 3
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 3
54338: PUSH
54339: LD_INT 3
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: LD_INT 3
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: LIST
54360: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54361: LD_ADDR_VAR 0 56
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 3
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: LD_INT 3
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: LIST
54401: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54402: LD_ADDR_VAR 0 57
54406: PUSH
54407: LD_INT 2
54409: NEG
54410: PUSH
54411: LD_INT 1
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 3
54420: NEG
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 3
54431: NEG
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: LIST
54445: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54446: LD_ADDR_VAR 0 58
54450: PUSH
54451: LD_INT 2
54453: NEG
54454: PUSH
54455: LD_INT 3
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 3
54465: NEG
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 3
54477: NEG
54478: PUSH
54479: LD_INT 3
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54492: LD_ADDR_VAR 0 59
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: LIST
54535: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54536: LD_ADDR_VAR 0 60
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 2
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: LIST
54576: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54577: LD_ADDR_VAR 0 61
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: LD_INT 2
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: LD_INT 2
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: LIST
54616: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54617: LD_ADDR_VAR 0 62
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 2
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: LIST
54657: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54658: LD_ADDR_VAR 0 63
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: LIST
54701: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54702: LD_ADDR_VAR 0 64
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 2
54733: NEG
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: LIST
54747: ST_TO_ADDR
// end ; 2 :
54748: GO 58014
54750: LD_INT 2
54752: DOUBLE
54753: EQUAL
54754: IFTRUE 54758
54756: GO 58013
54758: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54759: LD_ADDR_VAR 0 29
54763: PUSH
54764: LD_INT 4
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 4
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 5
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 5
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 4
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 3
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 3
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 3
54838: PUSH
54839: LD_INT 2
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 5
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 3
54859: PUSH
54860: LD_INT 3
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 3
54869: PUSH
54870: LD_INT 2
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 4
54879: PUSH
54880: LD_INT 3
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 4
54889: PUSH
54890: LD_INT 4
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 3
54899: PUSH
54900: LD_INT 4
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 2
54909: PUSH
54910: LD_INT 3
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: LD_INT 2
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 4
54929: PUSH
54930: LD_INT 2
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: LD_INT 4
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 4
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 3
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: LD_INT 4
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: LD_INT 5
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: LD_INT 5
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: LD_INT 4
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 3
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: LD_INT 5
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: LD_INT 3
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 3
55042: NEG
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 3
55053: NEG
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 2
55076: NEG
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 3
55087: NEG
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 4
55098: NEG
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 4
55109: NEG
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 4
55121: NEG
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 2
55133: NEG
55134: PUSH
55135: LD_INT 2
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 4
55144: NEG
55145: PUSH
55146: LD_INT 4
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 4
55156: NEG
55157: PUSH
55158: LD_INT 5
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 3
55168: NEG
55169: PUSH
55170: LD_INT 4
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 3
55180: NEG
55181: PUSH
55182: LD_INT 3
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 4
55192: NEG
55193: PUSH
55194: LD_INT 3
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 5
55204: NEG
55205: PUSH
55206: LD_INT 4
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 5
55216: NEG
55217: PUSH
55218: LD_INT 5
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 3
55228: NEG
55229: PUSH
55230: LD_INT 5
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 5
55240: NEG
55241: PUSH
55242: LD_INT 3
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55297: LD_ADDR_VAR 0 30
55301: PUSH
55302: LD_INT 4
55304: PUSH
55305: LD_INT 4
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 4
55314: PUSH
55315: LD_INT 3
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 5
55324: PUSH
55325: LD_INT 4
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 5
55334: PUSH
55335: LD_INT 5
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 4
55344: PUSH
55345: LD_INT 5
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 3
55354: PUSH
55355: LD_INT 4
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 3
55364: PUSH
55365: LD_INT 3
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 5
55374: PUSH
55375: LD_INT 3
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 3
55384: PUSH
55385: LD_INT 5
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 3
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: LD_INT 3
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: LD_INT 4
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 4
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: LD_INT 3
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: NEG
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 2
55466: PUSH
55467: LD_INT 4
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 4
55487: NEG
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 4
55498: NEG
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 3
55510: NEG
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 3
55521: NEG
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 4
55532: NEG
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 5
55543: NEG
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 5
55554: NEG
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 5
55566: NEG
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 3
55578: NEG
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 3
55589: NEG
55590: PUSH
55591: LD_INT 3
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 3
55601: NEG
55602: PUSH
55603: LD_INT 4
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: LD_INT 3
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 2
55625: NEG
55626: PUSH
55627: LD_INT 2
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 3
55637: NEG
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 4
55649: NEG
55650: PUSH
55651: LD_INT 3
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 4
55661: NEG
55662: PUSH
55663: LD_INT 4
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 2
55673: NEG
55674: PUSH
55675: LD_INT 4
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 4
55685: NEG
55686: PUSH
55687: LD_INT 2
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 4
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: LD_INT 5
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: LD_INT 4
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: LD_INT 3
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: LD_INT 3
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: LD_INT 4
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: LD_INT 5
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: LD_INT 3
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 2
55787: NEG
55788: PUSH
55789: LD_INT 5
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55844: LD_ADDR_VAR 0 31
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 4
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: LD_INT 3
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: LD_INT 4
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 5
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: LD_INT 5
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 4
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 3
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: LD_INT 5
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 2
55933: NEG
55934: PUSH
55935: LD_INT 3
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 3
55944: NEG
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 3
55955: NEG
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 2
55967: NEG
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: NEG
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 3
55989: NEG
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 4
56000: NEG
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 4
56011: NEG
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 4
56023: NEG
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 4
56046: NEG
56047: PUSH
56048: LD_INT 4
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 4
56058: NEG
56059: PUSH
56060: LD_INT 5
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 3
56070: NEG
56071: PUSH
56072: LD_INT 4
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 3
56082: NEG
56083: PUSH
56084: LD_INT 3
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 4
56094: NEG
56095: PUSH
56096: LD_INT 3
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 5
56106: NEG
56107: PUSH
56108: LD_INT 4
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 5
56118: NEG
56119: PUSH
56120: LD_INT 5
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 3
56130: NEG
56131: PUSH
56132: LD_INT 5
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 5
56142: NEG
56143: PUSH
56144: LD_INT 3
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 3
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 4
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: LD_INT 3
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 3
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: LD_INT 4
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 2
56233: PUSH
56234: LD_INT 2
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: LD_INT 4
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 4
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 4
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 5
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 5
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 4
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 3
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 3
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 3
56328: PUSH
56329: LD_INT 2
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 5
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56394: LD_ADDR_VAR 0 32
56398: PUSH
56399: LD_INT 4
56401: NEG
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 4
56412: NEG
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 3
56424: NEG
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 3
56435: NEG
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 4
56446: NEG
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 5
56457: NEG
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 5
56468: NEG
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 5
56480: NEG
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 3
56492: NEG
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 3
56503: NEG
56504: PUSH
56505: LD_INT 3
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: LD_INT 4
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 2
56527: NEG
56528: PUSH
56529: LD_INT 3
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: LD_INT 2
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 3
56551: NEG
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 4
56563: NEG
56564: PUSH
56565: LD_INT 3
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 4
56575: NEG
56576: PUSH
56577: LD_INT 4
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: LD_INT 4
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 4
56599: NEG
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: LD_INT 4
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 5
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: LD_INT 4
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 3
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: LD_INT 3
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: LD_INT 4
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: LD_INT 5
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: LD_INT 3
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 2
56701: NEG
56702: PUSH
56703: LD_INT 5
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 3
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 3
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 4
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 4
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 2
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 2
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 2
56785: PUSH
56786: LD_INT 2
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 4
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 4
56806: PUSH
56807: LD_INT 4
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 4
56816: PUSH
56817: LD_INT 3
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 5
56826: PUSH
56827: LD_INT 4
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 5
56836: PUSH
56837: LD_INT 5
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 4
56846: PUSH
56847: LD_INT 5
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 3
56856: PUSH
56857: LD_INT 4
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 3
56866: PUSH
56867: LD_INT 3
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 5
56876: PUSH
56877: LD_INT 3
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 3
56886: PUSH
56887: LD_INT 5
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56941: LD_ADDR_VAR 0 33
56945: PUSH
56946: LD_INT 4
56948: NEG
56949: PUSH
56950: LD_INT 4
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 4
56960: NEG
56961: PUSH
56962: LD_INT 5
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 3
56972: NEG
56973: PUSH
56974: LD_INT 4
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 3
56984: NEG
56985: PUSH
56986: LD_INT 3
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 4
56996: NEG
56997: PUSH
56998: LD_INT 3
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 5
57008: NEG
57009: PUSH
57010: LD_INT 4
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 5
57020: NEG
57021: PUSH
57022: LD_INT 5
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 3
57032: NEG
57033: PUSH
57034: LD_INT 5
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 5
57044: NEG
57045: PUSH
57046: LD_INT 3
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 3
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: LD_INT 4
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: LD_INT 3
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: LD_INT 3
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: LD_INT 4
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: LD_INT 4
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 4
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 4
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 5
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 5
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 4
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 3
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 3
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 3
57230: PUSH
57231: LD_INT 2
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 5
57241: PUSH
57242: LD_INT 2
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 3
57251: PUSH
57252: LD_INT 3
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 3
57261: PUSH
57262: LD_INT 2
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 4
57271: PUSH
57272: LD_INT 3
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 4
57281: PUSH
57282: LD_INT 4
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 3
57291: PUSH
57292: LD_INT 4
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 2
57301: PUSH
57302: LD_INT 3
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 2
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 4
57321: PUSH
57322: LD_INT 2
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: LD_INT 4
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: LD_INT 4
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: LD_INT 4
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: LD_INT 5
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: LD_INT 5
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: PUSH
57393: LD_INT 4
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: LD_INT 3
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: LD_INT 5
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: NEG
57424: PUSH
57425: LD_INT 3
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57479: LD_ADDR_VAR 0 34
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: LD_INT 4
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: LD_INT 5
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: LD_INT 4
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: LD_INT 3
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: LD_INT 3
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: LD_INT 4
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: LD_INT 5
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 2
57565: PUSH
57566: LD_INT 3
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 2
57576: NEG
57577: PUSH
57578: LD_INT 5
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 3
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 3
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 4
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 4
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 3
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 2
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 2
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 2
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 4
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 4
57681: PUSH
57682: LD_INT 4
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 4
57691: PUSH
57692: LD_INT 3
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 5
57701: PUSH
57702: LD_INT 4
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 5
57711: PUSH
57712: LD_INT 5
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 4
57721: PUSH
57722: LD_INT 5
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 3
57731: PUSH
57732: LD_INT 4
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 3
57741: PUSH
57742: LD_INT 3
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 5
57751: PUSH
57752: LD_INT 3
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 3
57761: PUSH
57762: LD_INT 5
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 3
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: LD_INT 3
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 4
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: LD_INT 4
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: LD_INT 3
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 1
57832: NEG
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: PUSH
57844: LD_INT 4
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 4
57864: NEG
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 4
57875: NEG
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 3
57887: NEG
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 3
57898: NEG
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 4
57909: NEG
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 5
57920: NEG
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 5
57931: NEG
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 5
57943: NEG
57944: PUSH
57945: LD_INT 2
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 3
57955: NEG
57956: PUSH
57957: LD_INT 2
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: ST_TO_ADDR
// end ; end ;
58011: GO 58014
58013: POP
// case btype of b_depot , b_warehouse :
58014: LD_VAR 0 1
58018: PUSH
58019: LD_INT 0
58021: DOUBLE
58022: EQUAL
58023: IFTRUE 58033
58025: LD_INT 1
58027: DOUBLE
58028: EQUAL
58029: IFTRUE 58033
58031: GO 58234
58033: POP
// case nation of nation_american :
58034: LD_VAR 0 5
58038: PUSH
58039: LD_INT 1
58041: DOUBLE
58042: EQUAL
58043: IFTRUE 58047
58045: GO 58103
58047: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58048: LD_ADDR_VAR 0 9
58052: PUSH
58053: LD_VAR 0 11
58057: PUSH
58058: LD_VAR 0 12
58062: PUSH
58063: LD_VAR 0 13
58067: PUSH
58068: LD_VAR 0 14
58072: PUSH
58073: LD_VAR 0 15
58077: PUSH
58078: LD_VAR 0 16
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: PUSH
58091: LD_VAR 0 4
58095: PUSH
58096: LD_INT 1
58098: PLUS
58099: ARRAY
58100: ST_TO_ADDR
58101: GO 58232
58103: LD_INT 2
58105: DOUBLE
58106: EQUAL
58107: IFTRUE 58111
58109: GO 58167
58111: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58112: LD_ADDR_VAR 0 9
58116: PUSH
58117: LD_VAR 0 17
58121: PUSH
58122: LD_VAR 0 18
58126: PUSH
58127: LD_VAR 0 19
58131: PUSH
58132: LD_VAR 0 20
58136: PUSH
58137: LD_VAR 0 21
58141: PUSH
58142: LD_VAR 0 22
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: PUSH
58155: LD_VAR 0 4
58159: PUSH
58160: LD_INT 1
58162: PLUS
58163: ARRAY
58164: ST_TO_ADDR
58165: GO 58232
58167: LD_INT 3
58169: DOUBLE
58170: EQUAL
58171: IFTRUE 58175
58173: GO 58231
58175: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58176: LD_ADDR_VAR 0 9
58180: PUSH
58181: LD_VAR 0 23
58185: PUSH
58186: LD_VAR 0 24
58190: PUSH
58191: LD_VAR 0 25
58195: PUSH
58196: LD_VAR 0 26
58200: PUSH
58201: LD_VAR 0 27
58205: PUSH
58206: LD_VAR 0 28
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: PUSH
58219: LD_VAR 0 4
58223: PUSH
58224: LD_INT 1
58226: PLUS
58227: ARRAY
58228: ST_TO_ADDR
58229: GO 58232
58231: POP
58232: GO 58787
58234: LD_INT 2
58236: DOUBLE
58237: EQUAL
58238: IFTRUE 58248
58240: LD_INT 3
58242: DOUBLE
58243: EQUAL
58244: IFTRUE 58248
58246: GO 58304
58248: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58249: LD_ADDR_VAR 0 9
58253: PUSH
58254: LD_VAR 0 29
58258: PUSH
58259: LD_VAR 0 30
58263: PUSH
58264: LD_VAR 0 31
58268: PUSH
58269: LD_VAR 0 32
58273: PUSH
58274: LD_VAR 0 33
58278: PUSH
58279: LD_VAR 0 34
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: PUSH
58292: LD_VAR 0 4
58296: PUSH
58297: LD_INT 1
58299: PLUS
58300: ARRAY
58301: ST_TO_ADDR
58302: GO 58787
58304: LD_INT 16
58306: DOUBLE
58307: EQUAL
58308: IFTRUE 58366
58310: LD_INT 17
58312: DOUBLE
58313: EQUAL
58314: IFTRUE 58366
58316: LD_INT 18
58318: DOUBLE
58319: EQUAL
58320: IFTRUE 58366
58322: LD_INT 19
58324: DOUBLE
58325: EQUAL
58326: IFTRUE 58366
58328: LD_INT 22
58330: DOUBLE
58331: EQUAL
58332: IFTRUE 58366
58334: LD_INT 20
58336: DOUBLE
58337: EQUAL
58338: IFTRUE 58366
58340: LD_INT 21
58342: DOUBLE
58343: EQUAL
58344: IFTRUE 58366
58346: LD_INT 23
58348: DOUBLE
58349: EQUAL
58350: IFTRUE 58366
58352: LD_INT 24
58354: DOUBLE
58355: EQUAL
58356: IFTRUE 58366
58358: LD_INT 25
58360: DOUBLE
58361: EQUAL
58362: IFTRUE 58366
58364: GO 58422
58366: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58367: LD_ADDR_VAR 0 9
58371: PUSH
58372: LD_VAR 0 35
58376: PUSH
58377: LD_VAR 0 36
58381: PUSH
58382: LD_VAR 0 37
58386: PUSH
58387: LD_VAR 0 38
58391: PUSH
58392: LD_VAR 0 39
58396: PUSH
58397: LD_VAR 0 40
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: PUSH
58410: LD_VAR 0 4
58414: PUSH
58415: LD_INT 1
58417: PLUS
58418: ARRAY
58419: ST_TO_ADDR
58420: GO 58787
58422: LD_INT 6
58424: DOUBLE
58425: EQUAL
58426: IFTRUE 58478
58428: LD_INT 7
58430: DOUBLE
58431: EQUAL
58432: IFTRUE 58478
58434: LD_INT 8
58436: DOUBLE
58437: EQUAL
58438: IFTRUE 58478
58440: LD_INT 13
58442: DOUBLE
58443: EQUAL
58444: IFTRUE 58478
58446: LD_INT 12
58448: DOUBLE
58449: EQUAL
58450: IFTRUE 58478
58452: LD_INT 15
58454: DOUBLE
58455: EQUAL
58456: IFTRUE 58478
58458: LD_INT 11
58460: DOUBLE
58461: EQUAL
58462: IFTRUE 58478
58464: LD_INT 14
58466: DOUBLE
58467: EQUAL
58468: IFTRUE 58478
58470: LD_INT 10
58472: DOUBLE
58473: EQUAL
58474: IFTRUE 58478
58476: GO 58534
58478: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58479: LD_ADDR_VAR 0 9
58483: PUSH
58484: LD_VAR 0 41
58488: PUSH
58489: LD_VAR 0 42
58493: PUSH
58494: LD_VAR 0 43
58498: PUSH
58499: LD_VAR 0 44
58503: PUSH
58504: LD_VAR 0 45
58508: PUSH
58509: LD_VAR 0 46
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: PUSH
58522: LD_VAR 0 4
58526: PUSH
58527: LD_INT 1
58529: PLUS
58530: ARRAY
58531: ST_TO_ADDR
58532: GO 58787
58534: LD_INT 36
58536: DOUBLE
58537: EQUAL
58538: IFTRUE 58542
58540: GO 58598
58542: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58543: LD_ADDR_VAR 0 9
58547: PUSH
58548: LD_VAR 0 47
58552: PUSH
58553: LD_VAR 0 48
58557: PUSH
58558: LD_VAR 0 49
58562: PUSH
58563: LD_VAR 0 50
58567: PUSH
58568: LD_VAR 0 51
58572: PUSH
58573: LD_VAR 0 52
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: PUSH
58586: LD_VAR 0 4
58590: PUSH
58591: LD_INT 1
58593: PLUS
58594: ARRAY
58595: ST_TO_ADDR
58596: GO 58787
58598: LD_INT 4
58600: DOUBLE
58601: EQUAL
58602: IFTRUE 58624
58604: LD_INT 5
58606: DOUBLE
58607: EQUAL
58608: IFTRUE 58624
58610: LD_INT 34
58612: DOUBLE
58613: EQUAL
58614: IFTRUE 58624
58616: LD_INT 37
58618: DOUBLE
58619: EQUAL
58620: IFTRUE 58624
58622: GO 58680
58624: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58625: LD_ADDR_VAR 0 9
58629: PUSH
58630: LD_VAR 0 53
58634: PUSH
58635: LD_VAR 0 54
58639: PUSH
58640: LD_VAR 0 55
58644: PUSH
58645: LD_VAR 0 56
58649: PUSH
58650: LD_VAR 0 57
58654: PUSH
58655: LD_VAR 0 58
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: PUSH
58668: LD_VAR 0 4
58672: PUSH
58673: LD_INT 1
58675: PLUS
58676: ARRAY
58677: ST_TO_ADDR
58678: GO 58787
58680: LD_INT 31
58682: DOUBLE
58683: EQUAL
58684: IFTRUE 58730
58686: LD_INT 32
58688: DOUBLE
58689: EQUAL
58690: IFTRUE 58730
58692: LD_INT 33
58694: DOUBLE
58695: EQUAL
58696: IFTRUE 58730
58698: LD_INT 27
58700: DOUBLE
58701: EQUAL
58702: IFTRUE 58730
58704: LD_INT 26
58706: DOUBLE
58707: EQUAL
58708: IFTRUE 58730
58710: LD_INT 28
58712: DOUBLE
58713: EQUAL
58714: IFTRUE 58730
58716: LD_INT 29
58718: DOUBLE
58719: EQUAL
58720: IFTRUE 58730
58722: LD_INT 30
58724: DOUBLE
58725: EQUAL
58726: IFTRUE 58730
58728: GO 58786
58730: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58731: LD_ADDR_VAR 0 9
58735: PUSH
58736: LD_VAR 0 59
58740: PUSH
58741: LD_VAR 0 60
58745: PUSH
58746: LD_VAR 0 61
58750: PUSH
58751: LD_VAR 0 62
58755: PUSH
58756: LD_VAR 0 63
58760: PUSH
58761: LD_VAR 0 64
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: PUSH
58774: LD_VAR 0 4
58778: PUSH
58779: LD_INT 1
58781: PLUS
58782: ARRAY
58783: ST_TO_ADDR
58784: GO 58787
58786: POP
// temp_list2 = [ ] ;
58787: LD_ADDR_VAR 0 10
58791: PUSH
58792: EMPTY
58793: ST_TO_ADDR
// for i in temp_list do
58794: LD_ADDR_VAR 0 8
58798: PUSH
58799: LD_VAR 0 9
58803: PUSH
58804: FOR_IN
58805: IFFALSE 58857
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58807: LD_ADDR_VAR 0 10
58811: PUSH
58812: LD_VAR 0 10
58816: PUSH
58817: LD_VAR 0 8
58821: PUSH
58822: LD_INT 1
58824: ARRAY
58825: PUSH
58826: LD_VAR 0 2
58830: PLUS
58831: PUSH
58832: LD_VAR 0 8
58836: PUSH
58837: LD_INT 2
58839: ARRAY
58840: PUSH
58841: LD_VAR 0 3
58845: PLUS
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: EMPTY
58852: LIST
58853: ADD
58854: ST_TO_ADDR
58855: GO 58804
58857: POP
58858: POP
// result = temp_list2 ;
58859: LD_ADDR_VAR 0 7
58863: PUSH
58864: LD_VAR 0 10
58868: ST_TO_ADDR
// end ;
58869: LD_VAR 0 7
58873: RET
// export function EnemyInRange ( unit , dist ) ; begin
58874: LD_INT 0
58876: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58877: LD_ADDR_VAR 0 3
58881: PUSH
58882: LD_VAR 0 1
58886: PPUSH
58887: CALL_OW 255
58891: PPUSH
58892: LD_VAR 0 1
58896: PPUSH
58897: CALL_OW 250
58901: PPUSH
58902: LD_VAR 0 1
58906: PPUSH
58907: CALL_OW 251
58911: PPUSH
58912: LD_VAR 0 2
58916: PPUSH
58917: CALL 32270 0 4
58921: PUSH
58922: LD_INT 4
58924: ARRAY
58925: ST_TO_ADDR
// end ;
58926: LD_VAR 0 3
58930: RET
// export function PlayerSeeMe ( unit ) ; begin
58931: LD_INT 0
58933: PPUSH
// result := See ( your_side , unit ) ;
58934: LD_ADDR_VAR 0 2
58938: PUSH
58939: LD_OWVAR 2
58943: PPUSH
58944: LD_VAR 0 1
58948: PPUSH
58949: CALL_OW 292
58953: ST_TO_ADDR
// end ;
58954: LD_VAR 0 2
58958: RET
// export function ReverseDir ( unit ) ; begin
58959: LD_INT 0
58961: PPUSH
// if not unit then
58962: LD_VAR 0 1
58966: NOT
58967: IFFALSE 58971
// exit ;
58969: GO 58994
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58971: LD_ADDR_VAR 0 2
58975: PUSH
58976: LD_VAR 0 1
58980: PPUSH
58981: CALL_OW 254
58985: PUSH
58986: LD_INT 3
58988: PLUS
58989: PUSH
58990: LD_INT 6
58992: MOD
58993: ST_TO_ADDR
// end ;
58994: LD_VAR 0 2
58998: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58999: LD_INT 0
59001: PPUSH
59002: PPUSH
59003: PPUSH
59004: PPUSH
59005: PPUSH
// if not hexes then
59006: LD_VAR 0 2
59010: NOT
59011: IFFALSE 59015
// exit ;
59013: GO 59163
// dist := 9999 ;
59015: LD_ADDR_VAR 0 5
59019: PUSH
59020: LD_INT 9999
59022: ST_TO_ADDR
// for i = 1 to hexes do
59023: LD_ADDR_VAR 0 4
59027: PUSH
59028: DOUBLE
59029: LD_INT 1
59031: DEC
59032: ST_TO_ADDR
59033: LD_VAR 0 2
59037: PUSH
59038: FOR_TO
59039: IFFALSE 59151
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59041: LD_VAR 0 1
59045: PPUSH
59046: LD_VAR 0 2
59050: PUSH
59051: LD_VAR 0 4
59055: ARRAY
59056: PUSH
59057: LD_INT 1
59059: ARRAY
59060: PPUSH
59061: LD_VAR 0 2
59065: PUSH
59066: LD_VAR 0 4
59070: ARRAY
59071: PUSH
59072: LD_INT 2
59074: ARRAY
59075: PPUSH
59076: CALL_OW 297
59080: PUSH
59081: LD_VAR 0 5
59085: LESS
59086: IFFALSE 59149
// begin hex := hexes [ i ] ;
59088: LD_ADDR_VAR 0 7
59092: PUSH
59093: LD_VAR 0 2
59097: PUSH
59098: LD_VAR 0 4
59102: ARRAY
59103: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59104: LD_ADDR_VAR 0 5
59108: PUSH
59109: LD_VAR 0 1
59113: PPUSH
59114: LD_VAR 0 2
59118: PUSH
59119: LD_VAR 0 4
59123: ARRAY
59124: PUSH
59125: LD_INT 1
59127: ARRAY
59128: PPUSH
59129: LD_VAR 0 2
59133: PUSH
59134: LD_VAR 0 4
59138: ARRAY
59139: PUSH
59140: LD_INT 2
59142: ARRAY
59143: PPUSH
59144: CALL_OW 297
59148: ST_TO_ADDR
// end ; end ;
59149: GO 59038
59151: POP
59152: POP
// result := hex ;
59153: LD_ADDR_VAR 0 3
59157: PUSH
59158: LD_VAR 0 7
59162: ST_TO_ADDR
// end ;
59163: LD_VAR 0 3
59167: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59168: LD_INT 0
59170: PPUSH
59171: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59172: LD_VAR 0 1
59176: NOT
59177: PUSH
59178: LD_VAR 0 1
59182: PUSH
59183: LD_INT 21
59185: PUSH
59186: LD_INT 2
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 23
59195: PUSH
59196: LD_INT 2
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PPUSH
59207: CALL_OW 69
59211: IN
59212: NOT
59213: OR
59214: IFFALSE 59218
// exit ;
59216: GO 59265
// for i = 1 to 3 do
59218: LD_ADDR_VAR 0 3
59222: PUSH
59223: DOUBLE
59224: LD_INT 1
59226: DEC
59227: ST_TO_ADDR
59228: LD_INT 3
59230: PUSH
59231: FOR_TO
59232: IFFALSE 59263
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59234: LD_VAR 0 1
59238: PPUSH
59239: CALL_OW 250
59243: PPUSH
59244: LD_VAR 0 1
59248: PPUSH
59249: CALL_OW 251
59253: PPUSH
59254: LD_INT 1
59256: PPUSH
59257: CALL_OW 453
59261: GO 59231
59263: POP
59264: POP
// end ;
59265: LD_VAR 0 2
59269: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59270: LD_INT 0
59272: PPUSH
59273: PPUSH
59274: PPUSH
59275: PPUSH
59276: PPUSH
59277: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59278: LD_VAR 0 1
59282: NOT
59283: PUSH
59284: LD_VAR 0 2
59288: NOT
59289: OR
59290: PUSH
59291: LD_VAR 0 1
59295: PPUSH
59296: CALL_OW 314
59300: OR
59301: IFFALSE 59305
// exit ;
59303: GO 59746
// x := GetX ( enemy_unit ) ;
59305: LD_ADDR_VAR 0 7
59309: PUSH
59310: LD_VAR 0 2
59314: PPUSH
59315: CALL_OW 250
59319: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59320: LD_ADDR_VAR 0 8
59324: PUSH
59325: LD_VAR 0 2
59329: PPUSH
59330: CALL_OW 251
59334: ST_TO_ADDR
// if not x or not y then
59335: LD_VAR 0 7
59339: NOT
59340: PUSH
59341: LD_VAR 0 8
59345: NOT
59346: OR
59347: IFFALSE 59351
// exit ;
59349: GO 59746
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59351: LD_ADDR_VAR 0 6
59355: PUSH
59356: LD_VAR 0 7
59360: PPUSH
59361: LD_INT 0
59363: PPUSH
59364: LD_INT 4
59366: PPUSH
59367: CALL_OW 272
59371: PUSH
59372: LD_VAR 0 8
59376: PPUSH
59377: LD_INT 0
59379: PPUSH
59380: LD_INT 4
59382: PPUSH
59383: CALL_OW 273
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_VAR 0 7
59396: PPUSH
59397: LD_INT 1
59399: PPUSH
59400: LD_INT 4
59402: PPUSH
59403: CALL_OW 272
59407: PUSH
59408: LD_VAR 0 8
59412: PPUSH
59413: LD_INT 1
59415: PPUSH
59416: LD_INT 4
59418: PPUSH
59419: CALL_OW 273
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_VAR 0 7
59432: PPUSH
59433: LD_INT 2
59435: PPUSH
59436: LD_INT 4
59438: PPUSH
59439: CALL_OW 272
59443: PUSH
59444: LD_VAR 0 8
59448: PPUSH
59449: LD_INT 2
59451: PPUSH
59452: LD_INT 4
59454: PPUSH
59455: CALL_OW 273
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_VAR 0 7
59468: PPUSH
59469: LD_INT 3
59471: PPUSH
59472: LD_INT 4
59474: PPUSH
59475: CALL_OW 272
59479: PUSH
59480: LD_VAR 0 8
59484: PPUSH
59485: LD_INT 3
59487: PPUSH
59488: LD_INT 4
59490: PPUSH
59491: CALL_OW 273
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_VAR 0 7
59504: PPUSH
59505: LD_INT 4
59507: PPUSH
59508: LD_INT 4
59510: PPUSH
59511: CALL_OW 272
59515: PUSH
59516: LD_VAR 0 8
59520: PPUSH
59521: LD_INT 4
59523: PPUSH
59524: LD_INT 4
59526: PPUSH
59527: CALL_OW 273
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_VAR 0 7
59540: PPUSH
59541: LD_INT 5
59543: PPUSH
59544: LD_INT 4
59546: PPUSH
59547: CALL_OW 272
59551: PUSH
59552: LD_VAR 0 8
59556: PPUSH
59557: LD_INT 5
59559: PPUSH
59560: LD_INT 4
59562: PPUSH
59563: CALL_OW 273
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: ST_TO_ADDR
// for i = tmp downto 1 do
59580: LD_ADDR_VAR 0 4
59584: PUSH
59585: DOUBLE
59586: LD_VAR 0 6
59590: INC
59591: ST_TO_ADDR
59592: LD_INT 1
59594: PUSH
59595: FOR_DOWNTO
59596: IFFALSE 59697
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59598: LD_VAR 0 6
59602: PUSH
59603: LD_VAR 0 4
59607: ARRAY
59608: PUSH
59609: LD_INT 1
59611: ARRAY
59612: PPUSH
59613: LD_VAR 0 6
59617: PUSH
59618: LD_VAR 0 4
59622: ARRAY
59623: PUSH
59624: LD_INT 2
59626: ARRAY
59627: PPUSH
59628: CALL_OW 488
59632: NOT
59633: PUSH
59634: LD_VAR 0 6
59638: PUSH
59639: LD_VAR 0 4
59643: ARRAY
59644: PUSH
59645: LD_INT 1
59647: ARRAY
59648: PPUSH
59649: LD_VAR 0 6
59653: PUSH
59654: LD_VAR 0 4
59658: ARRAY
59659: PUSH
59660: LD_INT 2
59662: ARRAY
59663: PPUSH
59664: CALL_OW 428
59668: PUSH
59669: LD_INT 0
59671: NONEQUAL
59672: OR
59673: IFFALSE 59695
// tmp := Delete ( tmp , i ) ;
59675: LD_ADDR_VAR 0 6
59679: PUSH
59680: LD_VAR 0 6
59684: PPUSH
59685: LD_VAR 0 4
59689: PPUSH
59690: CALL_OW 3
59694: ST_TO_ADDR
59695: GO 59595
59697: POP
59698: POP
// j := GetClosestHex ( unit , tmp ) ;
59699: LD_ADDR_VAR 0 5
59703: PUSH
59704: LD_VAR 0 1
59708: PPUSH
59709: LD_VAR 0 6
59713: PPUSH
59714: CALL 58999 0 2
59718: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59719: LD_VAR 0 1
59723: PPUSH
59724: LD_VAR 0 5
59728: PUSH
59729: LD_INT 1
59731: ARRAY
59732: PPUSH
59733: LD_VAR 0 5
59737: PUSH
59738: LD_INT 2
59740: ARRAY
59741: PPUSH
59742: CALL_OW 111
// end ;
59746: LD_VAR 0 3
59750: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59751: LD_INT 0
59753: PPUSH
59754: PPUSH
59755: PPUSH
// uc_side = 0 ;
59756: LD_ADDR_OWVAR 20
59760: PUSH
59761: LD_INT 0
59763: ST_TO_ADDR
// uc_nation = 0 ;
59764: LD_ADDR_OWVAR 21
59768: PUSH
59769: LD_INT 0
59771: ST_TO_ADDR
// InitHc_All ( ) ;
59772: CALL_OW 584
// InitVc ;
59776: CALL_OW 20
// if mastodonts then
59780: LD_VAR 0 6
59784: IFFALSE 59851
// for i = 1 to mastodonts do
59786: LD_ADDR_VAR 0 11
59790: PUSH
59791: DOUBLE
59792: LD_INT 1
59794: DEC
59795: ST_TO_ADDR
59796: LD_VAR 0 6
59800: PUSH
59801: FOR_TO
59802: IFFALSE 59849
// begin vc_chassis := 31 ;
59804: LD_ADDR_OWVAR 37
59808: PUSH
59809: LD_INT 31
59811: ST_TO_ADDR
// vc_control := control_rider ;
59812: LD_ADDR_OWVAR 38
59816: PUSH
59817: LD_INT 4
59819: ST_TO_ADDR
// animal := CreateVehicle ;
59820: LD_ADDR_VAR 0 12
59824: PUSH
59825: CALL_OW 45
59829: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59830: LD_VAR 0 12
59834: PPUSH
59835: LD_VAR 0 8
59839: PPUSH
59840: LD_INT 0
59842: PPUSH
59843: CALL 61986 0 3
// end ;
59847: GO 59801
59849: POP
59850: POP
// if horses then
59851: LD_VAR 0 5
59855: IFFALSE 59922
// for i = 1 to horses do
59857: LD_ADDR_VAR 0 11
59861: PUSH
59862: DOUBLE
59863: LD_INT 1
59865: DEC
59866: ST_TO_ADDR
59867: LD_VAR 0 5
59871: PUSH
59872: FOR_TO
59873: IFFALSE 59920
// begin hc_class := 21 ;
59875: LD_ADDR_OWVAR 28
59879: PUSH
59880: LD_INT 21
59882: ST_TO_ADDR
// hc_gallery :=  ;
59883: LD_ADDR_OWVAR 33
59887: PUSH
59888: LD_STRING 
59890: ST_TO_ADDR
// animal := CreateHuman ;
59891: LD_ADDR_VAR 0 12
59895: PUSH
59896: CALL_OW 44
59900: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59901: LD_VAR 0 12
59905: PPUSH
59906: LD_VAR 0 8
59910: PPUSH
59911: LD_INT 0
59913: PPUSH
59914: CALL 61986 0 3
// end ;
59918: GO 59872
59920: POP
59921: POP
// if birds then
59922: LD_VAR 0 1
59926: IFFALSE 59993
// for i = 1 to birds do
59928: LD_ADDR_VAR 0 11
59932: PUSH
59933: DOUBLE
59934: LD_INT 1
59936: DEC
59937: ST_TO_ADDR
59938: LD_VAR 0 1
59942: PUSH
59943: FOR_TO
59944: IFFALSE 59991
// begin hc_class = 18 ;
59946: LD_ADDR_OWVAR 28
59950: PUSH
59951: LD_INT 18
59953: ST_TO_ADDR
// hc_gallery =  ;
59954: LD_ADDR_OWVAR 33
59958: PUSH
59959: LD_STRING 
59961: ST_TO_ADDR
// animal := CreateHuman ;
59962: LD_ADDR_VAR 0 12
59966: PUSH
59967: CALL_OW 44
59971: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59972: LD_VAR 0 12
59976: PPUSH
59977: LD_VAR 0 8
59981: PPUSH
59982: LD_INT 0
59984: PPUSH
59985: CALL 61986 0 3
// end ;
59989: GO 59943
59991: POP
59992: POP
// if tigers then
59993: LD_VAR 0 2
59997: IFFALSE 60081
// for i = 1 to tigers do
59999: LD_ADDR_VAR 0 11
60003: PUSH
60004: DOUBLE
60005: LD_INT 1
60007: DEC
60008: ST_TO_ADDR
60009: LD_VAR 0 2
60013: PUSH
60014: FOR_TO
60015: IFFALSE 60079
// begin hc_class = class_tiger ;
60017: LD_ADDR_OWVAR 28
60021: PUSH
60022: LD_INT 14
60024: ST_TO_ADDR
// hc_gallery =  ;
60025: LD_ADDR_OWVAR 33
60029: PUSH
60030: LD_STRING 
60032: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60033: LD_ADDR_OWVAR 35
60037: PUSH
60038: LD_INT 7
60040: NEG
60041: PPUSH
60042: LD_INT 7
60044: PPUSH
60045: CALL_OW 12
60049: ST_TO_ADDR
// animal := CreateHuman ;
60050: LD_ADDR_VAR 0 12
60054: PUSH
60055: CALL_OW 44
60059: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60060: LD_VAR 0 12
60064: PPUSH
60065: LD_VAR 0 8
60069: PPUSH
60070: LD_INT 0
60072: PPUSH
60073: CALL 61986 0 3
// end ;
60077: GO 60014
60079: POP
60080: POP
// if apemans then
60081: LD_VAR 0 3
60085: IFFALSE 60208
// for i = 1 to apemans do
60087: LD_ADDR_VAR 0 11
60091: PUSH
60092: DOUBLE
60093: LD_INT 1
60095: DEC
60096: ST_TO_ADDR
60097: LD_VAR 0 3
60101: PUSH
60102: FOR_TO
60103: IFFALSE 60206
// begin hc_class = class_apeman ;
60105: LD_ADDR_OWVAR 28
60109: PUSH
60110: LD_INT 12
60112: ST_TO_ADDR
// hc_gallery =  ;
60113: LD_ADDR_OWVAR 33
60117: PUSH
60118: LD_STRING 
60120: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60121: LD_ADDR_OWVAR 35
60125: PUSH
60126: LD_INT 2
60128: NEG
60129: PPUSH
60130: LD_INT 2
60132: PPUSH
60133: CALL_OW 12
60137: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60138: LD_ADDR_OWVAR 31
60142: PUSH
60143: LD_INT 1
60145: PPUSH
60146: LD_INT 3
60148: PPUSH
60149: CALL_OW 12
60153: PUSH
60154: LD_INT 1
60156: PPUSH
60157: LD_INT 3
60159: PPUSH
60160: CALL_OW 12
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: ST_TO_ADDR
// animal := CreateHuman ;
60177: LD_ADDR_VAR 0 12
60181: PUSH
60182: CALL_OW 44
60186: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60187: LD_VAR 0 12
60191: PPUSH
60192: LD_VAR 0 8
60196: PPUSH
60197: LD_INT 0
60199: PPUSH
60200: CALL 61986 0 3
// end ;
60204: GO 60102
60206: POP
60207: POP
// if enchidnas then
60208: LD_VAR 0 4
60212: IFFALSE 60279
// for i = 1 to enchidnas do
60214: LD_ADDR_VAR 0 11
60218: PUSH
60219: DOUBLE
60220: LD_INT 1
60222: DEC
60223: ST_TO_ADDR
60224: LD_VAR 0 4
60228: PUSH
60229: FOR_TO
60230: IFFALSE 60277
// begin hc_class = 13 ;
60232: LD_ADDR_OWVAR 28
60236: PUSH
60237: LD_INT 13
60239: ST_TO_ADDR
// hc_gallery =  ;
60240: LD_ADDR_OWVAR 33
60244: PUSH
60245: LD_STRING 
60247: ST_TO_ADDR
// animal := CreateHuman ;
60248: LD_ADDR_VAR 0 12
60252: PUSH
60253: CALL_OW 44
60257: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60258: LD_VAR 0 12
60262: PPUSH
60263: LD_VAR 0 8
60267: PPUSH
60268: LD_INT 0
60270: PPUSH
60271: CALL 61986 0 3
// end ;
60275: GO 60229
60277: POP
60278: POP
// if fishes then
60279: LD_VAR 0 7
60283: IFFALSE 60350
// for i = 1 to fishes do
60285: LD_ADDR_VAR 0 11
60289: PUSH
60290: DOUBLE
60291: LD_INT 1
60293: DEC
60294: ST_TO_ADDR
60295: LD_VAR 0 7
60299: PUSH
60300: FOR_TO
60301: IFFALSE 60348
// begin hc_class = 20 ;
60303: LD_ADDR_OWVAR 28
60307: PUSH
60308: LD_INT 20
60310: ST_TO_ADDR
// hc_gallery =  ;
60311: LD_ADDR_OWVAR 33
60315: PUSH
60316: LD_STRING 
60318: ST_TO_ADDR
// animal := CreateHuman ;
60319: LD_ADDR_VAR 0 12
60323: PUSH
60324: CALL_OW 44
60328: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60329: LD_VAR 0 12
60333: PPUSH
60334: LD_VAR 0 9
60338: PPUSH
60339: LD_INT 0
60341: PPUSH
60342: CALL 61986 0 3
// end ;
60346: GO 60300
60348: POP
60349: POP
// end ;
60350: LD_VAR 0 10
60354: RET
// export function WantHeal ( sci , unit ) ; begin
60355: LD_INT 0
60357: PPUSH
// if GetTaskList ( sci ) > 0 then
60358: LD_VAR 0 1
60362: PPUSH
60363: CALL_OW 437
60367: PUSH
60368: LD_INT 0
60370: GREATER
60371: IFFALSE 60441
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60373: LD_VAR 0 1
60377: PPUSH
60378: CALL_OW 437
60382: PUSH
60383: LD_INT 1
60385: ARRAY
60386: PUSH
60387: LD_INT 1
60389: ARRAY
60390: PUSH
60391: LD_STRING l
60393: EQUAL
60394: PUSH
60395: LD_VAR 0 1
60399: PPUSH
60400: CALL_OW 437
60404: PUSH
60405: LD_INT 1
60407: ARRAY
60408: PUSH
60409: LD_INT 4
60411: ARRAY
60412: PUSH
60413: LD_VAR 0 2
60417: EQUAL
60418: AND
60419: IFFALSE 60431
// result := true else
60421: LD_ADDR_VAR 0 3
60425: PUSH
60426: LD_INT 1
60428: ST_TO_ADDR
60429: GO 60439
// result := false ;
60431: LD_ADDR_VAR 0 3
60435: PUSH
60436: LD_INT 0
60438: ST_TO_ADDR
// end else
60439: GO 60449
// result := false ;
60441: LD_ADDR_VAR 0 3
60445: PUSH
60446: LD_INT 0
60448: ST_TO_ADDR
// end ;
60449: LD_VAR 0 3
60453: RET
// export function HealTarget ( sci ) ; begin
60454: LD_INT 0
60456: PPUSH
// if not sci then
60457: LD_VAR 0 1
60461: NOT
60462: IFFALSE 60466
// exit ;
60464: GO 60531
// result := 0 ;
60466: LD_ADDR_VAR 0 2
60470: PUSH
60471: LD_INT 0
60473: ST_TO_ADDR
// if GetTaskList ( sci ) then
60474: LD_VAR 0 1
60478: PPUSH
60479: CALL_OW 437
60483: IFFALSE 60531
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60485: LD_VAR 0 1
60489: PPUSH
60490: CALL_OW 437
60494: PUSH
60495: LD_INT 1
60497: ARRAY
60498: PUSH
60499: LD_INT 1
60501: ARRAY
60502: PUSH
60503: LD_STRING l
60505: EQUAL
60506: IFFALSE 60531
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60508: LD_ADDR_VAR 0 2
60512: PUSH
60513: LD_VAR 0 1
60517: PPUSH
60518: CALL_OW 437
60522: PUSH
60523: LD_INT 1
60525: ARRAY
60526: PUSH
60527: LD_INT 4
60529: ARRAY
60530: ST_TO_ADDR
// end ;
60531: LD_VAR 0 2
60535: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60536: LD_INT 0
60538: PPUSH
60539: PPUSH
60540: PPUSH
60541: PPUSH
// if not base_units then
60542: LD_VAR 0 1
60546: NOT
60547: IFFALSE 60551
// exit ;
60549: GO 60638
// result := false ;
60551: LD_ADDR_VAR 0 2
60555: PUSH
60556: LD_INT 0
60558: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60559: LD_ADDR_VAR 0 5
60563: PUSH
60564: LD_VAR 0 1
60568: PPUSH
60569: LD_INT 21
60571: PUSH
60572: LD_INT 3
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PPUSH
60579: CALL_OW 72
60583: ST_TO_ADDR
// if not tmp then
60584: LD_VAR 0 5
60588: NOT
60589: IFFALSE 60593
// exit ;
60591: GO 60638
// for i in tmp do
60593: LD_ADDR_VAR 0 3
60597: PUSH
60598: LD_VAR 0 5
60602: PUSH
60603: FOR_IN
60604: IFFALSE 60636
// begin result := EnemyInRange ( i , 22 ) ;
60606: LD_ADDR_VAR 0 2
60610: PUSH
60611: LD_VAR 0 3
60615: PPUSH
60616: LD_INT 22
60618: PPUSH
60619: CALL 58874 0 2
60623: ST_TO_ADDR
// if result then
60624: LD_VAR 0 2
60628: IFFALSE 60634
// exit ;
60630: POP
60631: POP
60632: GO 60638
// end ;
60634: GO 60603
60636: POP
60637: POP
// end ;
60638: LD_VAR 0 2
60642: RET
// export function FilterByTag ( units , tag ) ; begin
60643: LD_INT 0
60645: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60646: LD_ADDR_VAR 0 3
60650: PUSH
60651: LD_VAR 0 1
60655: PPUSH
60656: LD_INT 120
60658: PUSH
60659: LD_VAR 0 2
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PPUSH
60668: CALL_OW 72
60672: ST_TO_ADDR
// end ;
60673: LD_VAR 0 3
60677: RET
// export function IsDriver ( un ) ; begin
60678: LD_INT 0
60680: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60681: LD_ADDR_VAR 0 2
60685: PUSH
60686: LD_VAR 0 1
60690: PUSH
60691: LD_INT 55
60693: PUSH
60694: EMPTY
60695: LIST
60696: PPUSH
60697: CALL_OW 69
60701: IN
60702: ST_TO_ADDR
// end ;
60703: LD_VAR 0 2
60707: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60708: LD_INT 0
60710: PPUSH
60711: PPUSH
// list := [ ] ;
60712: LD_ADDR_VAR 0 5
60716: PUSH
60717: EMPTY
60718: ST_TO_ADDR
// case d of 0 :
60719: LD_VAR 0 3
60723: PUSH
60724: LD_INT 0
60726: DOUBLE
60727: EQUAL
60728: IFTRUE 60732
60730: GO 60865
60732: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60733: LD_ADDR_VAR 0 5
60737: PUSH
60738: LD_VAR 0 1
60742: PUSH
60743: LD_INT 4
60745: MINUS
60746: PUSH
60747: LD_VAR 0 2
60751: PUSH
60752: LD_INT 4
60754: MINUS
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: LIST
60763: PUSH
60764: LD_VAR 0 1
60768: PUSH
60769: LD_INT 3
60771: MINUS
60772: PUSH
60773: LD_VAR 0 2
60777: PUSH
60778: LD_INT 1
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: LIST
60785: PUSH
60786: LD_VAR 0 1
60790: PUSH
60791: LD_INT 4
60793: PLUS
60794: PUSH
60795: LD_VAR 0 2
60799: PUSH
60800: LD_INT 4
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: LIST
60807: PUSH
60808: LD_VAR 0 1
60812: PUSH
60813: LD_INT 3
60815: PLUS
60816: PUSH
60817: LD_VAR 0 2
60821: PUSH
60822: LD_INT 3
60824: PLUS
60825: PUSH
60826: LD_INT 5
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: LIST
60833: PUSH
60834: LD_VAR 0 1
60838: PUSH
60839: LD_VAR 0 2
60843: PUSH
60844: LD_INT 4
60846: PLUS
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: LIST
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: ST_TO_ADDR
// end ; 1 :
60863: GO 61563
60865: LD_INT 1
60867: DOUBLE
60868: EQUAL
60869: IFTRUE 60873
60871: GO 61006
60873: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60874: LD_ADDR_VAR 0 5
60878: PUSH
60879: LD_VAR 0 1
60883: PUSH
60884: LD_VAR 0 2
60888: PUSH
60889: LD_INT 4
60891: MINUS
60892: PUSH
60893: LD_INT 3
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: LIST
60900: PUSH
60901: LD_VAR 0 1
60905: PUSH
60906: LD_INT 3
60908: MINUS
60909: PUSH
60910: LD_VAR 0 2
60914: PUSH
60915: LD_INT 3
60917: MINUS
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: LIST
60926: PUSH
60927: LD_VAR 0 1
60931: PUSH
60932: LD_INT 4
60934: MINUS
60935: PUSH
60936: LD_VAR 0 2
60940: PUSH
60941: LD_INT 1
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: LIST
60948: PUSH
60949: LD_VAR 0 1
60953: PUSH
60954: LD_VAR 0 2
60958: PUSH
60959: LD_INT 3
60961: PLUS
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: LIST
60970: PUSH
60971: LD_VAR 0 1
60975: PUSH
60976: LD_INT 4
60978: PLUS
60979: PUSH
60980: LD_VAR 0 2
60984: PUSH
60985: LD_INT 4
60987: PLUS
60988: PUSH
60989: LD_INT 5
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: LIST
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: ST_TO_ADDR
// end ; 2 :
61004: GO 61563
61006: LD_INT 2
61008: DOUBLE
61009: EQUAL
61010: IFTRUE 61014
61012: GO 61143
61014: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61015: LD_ADDR_VAR 0 5
61019: PUSH
61020: LD_VAR 0 1
61024: PUSH
61025: LD_VAR 0 2
61029: PUSH
61030: LD_INT 3
61032: MINUS
61033: PUSH
61034: LD_INT 3
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: LIST
61041: PUSH
61042: LD_VAR 0 1
61046: PUSH
61047: LD_INT 4
61049: PLUS
61050: PUSH
61051: LD_VAR 0 2
61055: PUSH
61056: LD_INT 4
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: LIST
61063: PUSH
61064: LD_VAR 0 1
61068: PUSH
61069: LD_VAR 0 2
61073: PUSH
61074: LD_INT 4
61076: PLUS
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: LIST
61085: PUSH
61086: LD_VAR 0 1
61090: PUSH
61091: LD_INT 3
61093: MINUS
61094: PUSH
61095: LD_VAR 0 2
61099: PUSH
61100: LD_INT 1
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: LIST
61107: PUSH
61108: LD_VAR 0 1
61112: PUSH
61113: LD_INT 4
61115: MINUS
61116: PUSH
61117: LD_VAR 0 2
61121: PUSH
61122: LD_INT 4
61124: MINUS
61125: PUSH
61126: LD_INT 2
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: LIST
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: ST_TO_ADDR
// end ; 3 :
61141: GO 61563
61143: LD_INT 3
61145: DOUBLE
61146: EQUAL
61147: IFTRUE 61151
61149: GO 61284
61151: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61152: LD_ADDR_VAR 0 5
61156: PUSH
61157: LD_VAR 0 1
61161: PUSH
61162: LD_INT 3
61164: PLUS
61165: PUSH
61166: LD_VAR 0 2
61170: PUSH
61171: LD_INT 4
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: LIST
61178: PUSH
61179: LD_VAR 0 1
61183: PUSH
61184: LD_INT 4
61186: PLUS
61187: PUSH
61188: LD_VAR 0 2
61192: PUSH
61193: LD_INT 4
61195: PLUS
61196: PUSH
61197: LD_INT 5
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: LIST
61204: PUSH
61205: LD_VAR 0 1
61209: PUSH
61210: LD_INT 4
61212: MINUS
61213: PUSH
61214: LD_VAR 0 2
61218: PUSH
61219: LD_INT 1
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: LIST
61226: PUSH
61227: LD_VAR 0 1
61231: PUSH
61232: LD_VAR 0 2
61236: PUSH
61237: LD_INT 4
61239: MINUS
61240: PUSH
61241: LD_INT 3
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: LIST
61248: PUSH
61249: LD_VAR 0 1
61253: PUSH
61254: LD_INT 3
61256: MINUS
61257: PUSH
61258: LD_VAR 0 2
61262: PUSH
61263: LD_INT 3
61265: MINUS
61266: PUSH
61267: LD_INT 2
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: LIST
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: ST_TO_ADDR
// end ; 4 :
61282: GO 61563
61284: LD_INT 4
61286: DOUBLE
61287: EQUAL
61288: IFTRUE 61292
61290: GO 61425
61292: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61293: LD_ADDR_VAR 0 5
61297: PUSH
61298: LD_VAR 0 1
61302: PUSH
61303: LD_VAR 0 2
61307: PUSH
61308: LD_INT 4
61310: PLUS
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: LIST
61319: PUSH
61320: LD_VAR 0 1
61324: PUSH
61325: LD_INT 3
61327: PLUS
61328: PUSH
61329: LD_VAR 0 2
61333: PUSH
61334: LD_INT 3
61336: PLUS
61337: PUSH
61338: LD_INT 5
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: LIST
61345: PUSH
61346: LD_VAR 0 1
61350: PUSH
61351: LD_INT 4
61353: PLUS
61354: PUSH
61355: LD_VAR 0 2
61359: PUSH
61360: LD_INT 4
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: LIST
61367: PUSH
61368: LD_VAR 0 1
61372: PUSH
61373: LD_VAR 0 2
61377: PUSH
61378: LD_INT 3
61380: MINUS
61381: PUSH
61382: LD_INT 3
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: LIST
61389: PUSH
61390: LD_VAR 0 1
61394: PUSH
61395: LD_INT 4
61397: MINUS
61398: PUSH
61399: LD_VAR 0 2
61403: PUSH
61404: LD_INT 4
61406: MINUS
61407: PUSH
61408: LD_INT 2
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: LIST
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: ST_TO_ADDR
// end ; 5 :
61423: GO 61563
61425: LD_INT 5
61427: DOUBLE
61428: EQUAL
61429: IFTRUE 61433
61431: GO 61562
61433: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61434: LD_ADDR_VAR 0 5
61438: PUSH
61439: LD_VAR 0 1
61443: PUSH
61444: LD_INT 4
61446: MINUS
61447: PUSH
61448: LD_VAR 0 2
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: LIST
61460: PUSH
61461: LD_VAR 0 1
61465: PUSH
61466: LD_VAR 0 2
61470: PUSH
61471: LD_INT 4
61473: MINUS
61474: PUSH
61475: LD_INT 3
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: LIST
61482: PUSH
61483: LD_VAR 0 1
61487: PUSH
61488: LD_INT 4
61490: PLUS
61491: PUSH
61492: LD_VAR 0 2
61496: PUSH
61497: LD_INT 4
61499: PLUS
61500: PUSH
61501: LD_INT 5
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: LIST
61508: PUSH
61509: LD_VAR 0 1
61513: PUSH
61514: LD_INT 3
61516: PLUS
61517: PUSH
61518: LD_VAR 0 2
61522: PUSH
61523: LD_INT 4
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: LIST
61530: PUSH
61531: LD_VAR 0 1
61535: PUSH
61536: LD_VAR 0 2
61540: PUSH
61541: LD_INT 3
61543: PLUS
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: LIST
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: ST_TO_ADDR
// end ; end ;
61560: GO 61563
61562: POP
// result := list ;
61563: LD_ADDR_VAR 0 4
61567: PUSH
61568: LD_VAR 0 5
61572: ST_TO_ADDR
// end ;
61573: LD_VAR 0 4
61577: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61578: LD_INT 0
61580: PPUSH
61581: PPUSH
61582: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61583: LD_VAR 0 1
61587: NOT
61588: PUSH
61589: LD_VAR 0 2
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: LD_INT 2
61599: PUSH
61600: LD_INT 3
61602: PUSH
61603: LD_INT 4
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: IN
61612: NOT
61613: OR
61614: IFFALSE 61618
// exit ;
61616: GO 61710
// tmp := [ ] ;
61618: LD_ADDR_VAR 0 5
61622: PUSH
61623: EMPTY
61624: ST_TO_ADDR
// for i in units do
61625: LD_ADDR_VAR 0 4
61629: PUSH
61630: LD_VAR 0 1
61634: PUSH
61635: FOR_IN
61636: IFFALSE 61679
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61638: LD_ADDR_VAR 0 5
61642: PUSH
61643: LD_VAR 0 5
61647: PPUSH
61648: LD_VAR 0 5
61652: PUSH
61653: LD_INT 1
61655: PLUS
61656: PPUSH
61657: LD_VAR 0 4
61661: PPUSH
61662: LD_VAR 0 2
61666: PPUSH
61667: CALL_OW 259
61671: PPUSH
61672: CALL_OW 2
61676: ST_TO_ADDR
61677: GO 61635
61679: POP
61680: POP
// if not tmp then
61681: LD_VAR 0 5
61685: NOT
61686: IFFALSE 61690
// exit ;
61688: GO 61710
// result := SortListByListDesc ( units , tmp ) ;
61690: LD_ADDR_VAR 0 3
61694: PUSH
61695: LD_VAR 0 1
61699: PPUSH
61700: LD_VAR 0 5
61704: PPUSH
61705: CALL_OW 77
61709: ST_TO_ADDR
// end ;
61710: LD_VAR 0 3
61714: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61715: LD_INT 0
61717: PPUSH
61718: PPUSH
61719: PPUSH
// result := false ;
61720: LD_ADDR_VAR 0 3
61724: PUSH
61725: LD_INT 0
61727: ST_TO_ADDR
// x := GetX ( building ) ;
61728: LD_ADDR_VAR 0 4
61732: PUSH
61733: LD_VAR 0 2
61737: PPUSH
61738: CALL_OW 250
61742: ST_TO_ADDR
// y := GetY ( building ) ;
61743: LD_ADDR_VAR 0 5
61747: PUSH
61748: LD_VAR 0 2
61752: PPUSH
61753: CALL_OW 251
61757: ST_TO_ADDR
// if not building or not x or not y then
61758: LD_VAR 0 2
61762: NOT
61763: PUSH
61764: LD_VAR 0 4
61768: NOT
61769: OR
61770: PUSH
61771: LD_VAR 0 5
61775: NOT
61776: OR
61777: IFFALSE 61781
// exit ;
61779: GO 61873
// if GetTaskList ( unit ) then
61781: LD_VAR 0 1
61785: PPUSH
61786: CALL_OW 437
61790: IFFALSE 61873
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61792: LD_STRING e
61794: PUSH
61795: LD_VAR 0 1
61799: PPUSH
61800: CALL_OW 437
61804: PUSH
61805: LD_INT 1
61807: ARRAY
61808: PUSH
61809: LD_INT 1
61811: ARRAY
61812: EQUAL
61813: PUSH
61814: LD_VAR 0 4
61818: PUSH
61819: LD_VAR 0 1
61823: PPUSH
61824: CALL_OW 437
61828: PUSH
61829: LD_INT 1
61831: ARRAY
61832: PUSH
61833: LD_INT 2
61835: ARRAY
61836: EQUAL
61837: AND
61838: PUSH
61839: LD_VAR 0 5
61843: PUSH
61844: LD_VAR 0 1
61848: PPUSH
61849: CALL_OW 437
61853: PUSH
61854: LD_INT 1
61856: ARRAY
61857: PUSH
61858: LD_INT 3
61860: ARRAY
61861: EQUAL
61862: AND
61863: IFFALSE 61873
// result := true end ;
61865: LD_ADDR_VAR 0 3
61869: PUSH
61870: LD_INT 1
61872: ST_TO_ADDR
// end ;
61873: LD_VAR 0 3
61877: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61878: LD_INT 0
61880: PPUSH
// result := false ;
61881: LD_ADDR_VAR 0 4
61885: PUSH
61886: LD_INT 0
61888: ST_TO_ADDR
// if GetTaskList ( unit ) then
61889: LD_VAR 0 1
61893: PPUSH
61894: CALL_OW 437
61898: IFFALSE 61981
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61900: LD_STRING M
61902: PUSH
61903: LD_VAR 0 1
61907: PPUSH
61908: CALL_OW 437
61912: PUSH
61913: LD_INT 1
61915: ARRAY
61916: PUSH
61917: LD_INT 1
61919: ARRAY
61920: EQUAL
61921: PUSH
61922: LD_VAR 0 2
61926: PUSH
61927: LD_VAR 0 1
61931: PPUSH
61932: CALL_OW 437
61936: PUSH
61937: LD_INT 1
61939: ARRAY
61940: PUSH
61941: LD_INT 2
61943: ARRAY
61944: EQUAL
61945: AND
61946: PUSH
61947: LD_VAR 0 3
61951: PUSH
61952: LD_VAR 0 1
61956: PPUSH
61957: CALL_OW 437
61961: PUSH
61962: LD_INT 1
61964: ARRAY
61965: PUSH
61966: LD_INT 3
61968: ARRAY
61969: EQUAL
61970: AND
61971: IFFALSE 61981
// result := true ;
61973: LD_ADDR_VAR 0 4
61977: PUSH
61978: LD_INT 1
61980: ST_TO_ADDR
// end ; end ;
61981: LD_VAR 0 4
61985: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61986: LD_INT 0
61988: PPUSH
61989: PPUSH
61990: PPUSH
61991: PPUSH
// if not unit or not area then
61992: LD_VAR 0 1
61996: NOT
61997: PUSH
61998: LD_VAR 0 2
62002: NOT
62003: OR
62004: IFFALSE 62008
// exit ;
62006: GO 62172
// tmp := AreaToList ( area , i ) ;
62008: LD_ADDR_VAR 0 6
62012: PUSH
62013: LD_VAR 0 2
62017: PPUSH
62018: LD_VAR 0 5
62022: PPUSH
62023: CALL_OW 517
62027: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62028: LD_ADDR_VAR 0 5
62032: PUSH
62033: DOUBLE
62034: LD_INT 1
62036: DEC
62037: ST_TO_ADDR
62038: LD_VAR 0 6
62042: PUSH
62043: LD_INT 1
62045: ARRAY
62046: PUSH
62047: FOR_TO
62048: IFFALSE 62170
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62050: LD_ADDR_VAR 0 7
62054: PUSH
62055: LD_VAR 0 6
62059: PUSH
62060: LD_INT 1
62062: ARRAY
62063: PUSH
62064: LD_VAR 0 5
62068: ARRAY
62069: PUSH
62070: LD_VAR 0 6
62074: PUSH
62075: LD_INT 2
62077: ARRAY
62078: PUSH
62079: LD_VAR 0 5
62083: ARRAY
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62089: LD_VAR 0 7
62093: PUSH
62094: LD_INT 1
62096: ARRAY
62097: PPUSH
62098: LD_VAR 0 7
62102: PUSH
62103: LD_INT 2
62105: ARRAY
62106: PPUSH
62107: CALL_OW 428
62111: PUSH
62112: LD_INT 0
62114: EQUAL
62115: IFFALSE 62168
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62117: LD_VAR 0 1
62121: PPUSH
62122: LD_VAR 0 7
62126: PUSH
62127: LD_INT 1
62129: ARRAY
62130: PPUSH
62131: LD_VAR 0 7
62135: PUSH
62136: LD_INT 2
62138: ARRAY
62139: PPUSH
62140: LD_VAR 0 3
62144: PPUSH
62145: CALL_OW 48
// result := IsPlaced ( unit ) ;
62149: LD_ADDR_VAR 0 4
62153: PUSH
62154: LD_VAR 0 1
62158: PPUSH
62159: CALL_OW 305
62163: ST_TO_ADDR
// exit ;
62164: POP
62165: POP
62166: GO 62172
// end ; end ;
62168: GO 62047
62170: POP
62171: POP
// end ;
62172: LD_VAR 0 4
62176: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62177: LD_INT 0
62179: PPUSH
62180: PPUSH
62181: PPUSH
// if not side or side > 8 then
62182: LD_VAR 0 1
62186: NOT
62187: PUSH
62188: LD_VAR 0 1
62192: PUSH
62193: LD_INT 8
62195: GREATER
62196: OR
62197: IFFALSE 62201
// exit ;
62199: GO 62388
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62201: LD_ADDR_VAR 0 4
62205: PUSH
62206: LD_INT 22
62208: PUSH
62209: LD_VAR 0 1
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 21
62220: PUSH
62221: LD_INT 3
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PPUSH
62232: CALL_OW 69
62236: ST_TO_ADDR
// if not tmp then
62237: LD_VAR 0 4
62241: NOT
62242: IFFALSE 62246
// exit ;
62244: GO 62388
// enable_addtolog := true ;
62246: LD_ADDR_OWVAR 81
62250: PUSH
62251: LD_INT 1
62253: ST_TO_ADDR
// AddToLog ( [ ) ;
62254: LD_STRING [
62256: PPUSH
62257: CALL_OW 561
// for i in tmp do
62261: LD_ADDR_VAR 0 3
62265: PUSH
62266: LD_VAR 0 4
62270: PUSH
62271: FOR_IN
62272: IFFALSE 62379
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62274: LD_STRING [
62276: PUSH
62277: LD_VAR 0 3
62281: PPUSH
62282: CALL_OW 266
62286: STR
62287: PUSH
62288: LD_STRING , 
62290: STR
62291: PUSH
62292: LD_VAR 0 3
62296: PPUSH
62297: CALL_OW 250
62301: STR
62302: PUSH
62303: LD_STRING , 
62305: STR
62306: PUSH
62307: LD_VAR 0 3
62311: PPUSH
62312: CALL_OW 251
62316: STR
62317: PUSH
62318: LD_STRING , 
62320: STR
62321: PUSH
62322: LD_VAR 0 3
62326: PPUSH
62327: CALL_OW 254
62331: STR
62332: PUSH
62333: LD_STRING , 
62335: STR
62336: PUSH
62337: LD_VAR 0 3
62341: PPUSH
62342: LD_INT 1
62344: PPUSH
62345: CALL_OW 268
62349: STR
62350: PUSH
62351: LD_STRING , 
62353: STR
62354: PUSH
62355: LD_VAR 0 3
62359: PPUSH
62360: LD_INT 2
62362: PPUSH
62363: CALL_OW 268
62367: STR
62368: PUSH
62369: LD_STRING ],
62371: STR
62372: PPUSH
62373: CALL_OW 561
// end ;
62377: GO 62271
62379: POP
62380: POP
// AddToLog ( ]; ) ;
62381: LD_STRING ];
62383: PPUSH
62384: CALL_OW 561
// end ;
62388: LD_VAR 0 2
62392: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62393: LD_INT 0
62395: PPUSH
62396: PPUSH
62397: PPUSH
62398: PPUSH
62399: PPUSH
// if not area or not rate or not max then
62400: LD_VAR 0 1
62404: NOT
62405: PUSH
62406: LD_VAR 0 2
62410: NOT
62411: OR
62412: PUSH
62413: LD_VAR 0 4
62417: NOT
62418: OR
62419: IFFALSE 62423
// exit ;
62421: GO 62612
// while 1 do
62423: LD_INT 1
62425: IFFALSE 62612
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62427: LD_ADDR_VAR 0 9
62431: PUSH
62432: LD_VAR 0 1
62436: PPUSH
62437: LD_INT 1
62439: PPUSH
62440: CALL_OW 287
62444: PUSH
62445: LD_INT 10
62447: MUL
62448: ST_TO_ADDR
// r := rate / 10 ;
62449: LD_ADDR_VAR 0 7
62453: PUSH
62454: LD_VAR 0 2
62458: PUSH
62459: LD_INT 10
62461: DIVREAL
62462: ST_TO_ADDR
// time := 1 1$00 ;
62463: LD_ADDR_VAR 0 8
62467: PUSH
62468: LD_INT 2100
62470: ST_TO_ADDR
// if amount < min then
62471: LD_VAR 0 9
62475: PUSH
62476: LD_VAR 0 3
62480: LESS
62481: IFFALSE 62499
// r := r * 2 else
62483: LD_ADDR_VAR 0 7
62487: PUSH
62488: LD_VAR 0 7
62492: PUSH
62493: LD_INT 2
62495: MUL
62496: ST_TO_ADDR
62497: GO 62525
// if amount > max then
62499: LD_VAR 0 9
62503: PUSH
62504: LD_VAR 0 4
62508: GREATER
62509: IFFALSE 62525
// r := r / 2 ;
62511: LD_ADDR_VAR 0 7
62515: PUSH
62516: LD_VAR 0 7
62520: PUSH
62521: LD_INT 2
62523: DIVREAL
62524: ST_TO_ADDR
// time := time / r ;
62525: LD_ADDR_VAR 0 8
62529: PUSH
62530: LD_VAR 0 8
62534: PUSH
62535: LD_VAR 0 7
62539: DIVREAL
62540: ST_TO_ADDR
// if time < 0 then
62541: LD_VAR 0 8
62545: PUSH
62546: LD_INT 0
62548: LESS
62549: IFFALSE 62566
// time := time * - 1 ;
62551: LD_ADDR_VAR 0 8
62555: PUSH
62556: LD_VAR 0 8
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: MUL
62565: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62566: LD_VAR 0 8
62570: PUSH
62571: LD_INT 35
62573: PPUSH
62574: LD_INT 875
62576: PPUSH
62577: CALL_OW 12
62581: PLUS
62582: PPUSH
62583: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62587: LD_INT 1
62589: PPUSH
62590: LD_INT 5
62592: PPUSH
62593: CALL_OW 12
62597: PPUSH
62598: LD_VAR 0 1
62602: PPUSH
62603: LD_INT 1
62605: PPUSH
62606: CALL_OW 55
// end ;
62610: GO 62423
// end ;
62612: LD_VAR 0 5
62616: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62617: LD_INT 0
62619: PPUSH
62620: PPUSH
62621: PPUSH
62622: PPUSH
62623: PPUSH
62624: PPUSH
62625: PPUSH
62626: PPUSH
// if not turrets or not factories then
62627: LD_VAR 0 1
62631: NOT
62632: PUSH
62633: LD_VAR 0 2
62637: NOT
62638: OR
62639: IFFALSE 62643
// exit ;
62641: GO 62950
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62643: LD_ADDR_VAR 0 10
62647: PUSH
62648: LD_INT 5
62650: PUSH
62651: LD_INT 6
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 2
62660: PUSH
62661: LD_INT 4
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 3
62670: PUSH
62671: LD_INT 5
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 24
62685: PUSH
62686: LD_INT 25
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 23
62695: PUSH
62696: LD_INT 27
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 42
62709: PUSH
62710: LD_INT 43
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 44
62719: PUSH
62720: LD_INT 46
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 45
62729: PUSH
62730: LD_INT 47
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: LIST
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: LIST
62746: ST_TO_ADDR
// result := [ ] ;
62747: LD_ADDR_VAR 0 3
62751: PUSH
62752: EMPTY
62753: ST_TO_ADDR
// for i in turrets do
62754: LD_ADDR_VAR 0 4
62758: PUSH
62759: LD_VAR 0 1
62763: PUSH
62764: FOR_IN
62765: IFFALSE 62948
// begin nat := GetNation ( i ) ;
62767: LD_ADDR_VAR 0 7
62771: PUSH
62772: LD_VAR 0 4
62776: PPUSH
62777: CALL_OW 248
62781: ST_TO_ADDR
// weapon := 0 ;
62782: LD_ADDR_VAR 0 8
62786: PUSH
62787: LD_INT 0
62789: ST_TO_ADDR
// if not nat then
62790: LD_VAR 0 7
62794: NOT
62795: IFFALSE 62799
// continue ;
62797: GO 62764
// for j in list [ nat ] do
62799: LD_ADDR_VAR 0 5
62803: PUSH
62804: LD_VAR 0 10
62808: PUSH
62809: LD_VAR 0 7
62813: ARRAY
62814: PUSH
62815: FOR_IN
62816: IFFALSE 62857
// if GetBWeapon ( i ) = j [ 1 ] then
62818: LD_VAR 0 4
62822: PPUSH
62823: CALL_OW 269
62827: PUSH
62828: LD_VAR 0 5
62832: PUSH
62833: LD_INT 1
62835: ARRAY
62836: EQUAL
62837: IFFALSE 62855
// begin weapon := j [ 2 ] ;
62839: LD_ADDR_VAR 0 8
62843: PUSH
62844: LD_VAR 0 5
62848: PUSH
62849: LD_INT 2
62851: ARRAY
62852: ST_TO_ADDR
// break ;
62853: GO 62857
// end ;
62855: GO 62815
62857: POP
62858: POP
// if not weapon then
62859: LD_VAR 0 8
62863: NOT
62864: IFFALSE 62868
// continue ;
62866: GO 62764
// for k in factories do
62868: LD_ADDR_VAR 0 6
62872: PUSH
62873: LD_VAR 0 2
62877: PUSH
62878: FOR_IN
62879: IFFALSE 62944
// begin weapons := AvailableWeaponList ( k ) ;
62881: LD_ADDR_VAR 0 9
62885: PUSH
62886: LD_VAR 0 6
62890: PPUSH
62891: CALL_OW 478
62895: ST_TO_ADDR
// if not weapons then
62896: LD_VAR 0 9
62900: NOT
62901: IFFALSE 62905
// continue ;
62903: GO 62878
// if weapon in weapons then
62905: LD_VAR 0 8
62909: PUSH
62910: LD_VAR 0 9
62914: IN
62915: IFFALSE 62942
// begin result := [ i , weapon ] ;
62917: LD_ADDR_VAR 0 3
62921: PUSH
62922: LD_VAR 0 4
62926: PUSH
62927: LD_VAR 0 8
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: ST_TO_ADDR
// exit ;
62936: POP
62937: POP
62938: POP
62939: POP
62940: GO 62950
// end ; end ;
62942: GO 62878
62944: POP
62945: POP
// end ;
62946: GO 62764
62948: POP
62949: POP
// end ;
62950: LD_VAR 0 3
62954: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62955: LD_INT 0
62957: PPUSH
// if not side or side > 8 then
62958: LD_VAR 0 3
62962: NOT
62963: PUSH
62964: LD_VAR 0 3
62968: PUSH
62969: LD_INT 8
62971: GREATER
62972: OR
62973: IFFALSE 62977
// exit ;
62975: GO 63036
// if not range then
62977: LD_VAR 0 4
62981: NOT
62982: IFFALSE 62993
// range := - 12 ;
62984: LD_ADDR_VAR 0 4
62988: PUSH
62989: LD_INT 12
62991: NEG
62992: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62993: LD_VAR 0 1
62997: PPUSH
62998: LD_VAR 0 2
63002: PPUSH
63003: LD_VAR 0 3
63007: PPUSH
63008: LD_VAR 0 4
63012: PPUSH
63013: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63017: LD_VAR 0 1
63021: PPUSH
63022: LD_VAR 0 2
63026: PPUSH
63027: LD_VAR 0 3
63031: PPUSH
63032: CALL_OW 331
// end ;
63036: LD_VAR 0 5
63040: RET
// export function Video ( mode ) ; begin
63041: LD_INT 0
63043: PPUSH
// ingame_video = mode ;
63044: LD_ADDR_OWVAR 52
63048: PUSH
63049: LD_VAR 0 1
63053: ST_TO_ADDR
// interface_hidden = mode ;
63054: LD_ADDR_OWVAR 54
63058: PUSH
63059: LD_VAR 0 1
63063: ST_TO_ADDR
// end ;
63064: LD_VAR 0 2
63068: RET
// export function Join ( array , element ) ; begin
63069: LD_INT 0
63071: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63072: LD_ADDR_VAR 0 3
63076: PUSH
63077: LD_VAR 0 1
63081: PPUSH
63082: LD_VAR 0 1
63086: PUSH
63087: LD_INT 1
63089: PLUS
63090: PPUSH
63091: LD_VAR 0 2
63095: PPUSH
63096: CALL_OW 1
63100: ST_TO_ADDR
// end ;
63101: LD_VAR 0 3
63105: RET
// export function JoinUnion ( array , element ) ; begin
63106: LD_INT 0
63108: PPUSH
// result := array union element ;
63109: LD_ADDR_VAR 0 3
63113: PUSH
63114: LD_VAR 0 1
63118: PUSH
63119: LD_VAR 0 2
63123: UNION
63124: ST_TO_ADDR
// end ;
63125: LD_VAR 0 3
63129: RET
// export function GetBehemoths ( side ) ; begin
63130: LD_INT 0
63132: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63133: LD_ADDR_VAR 0 2
63137: PUSH
63138: LD_INT 22
63140: PUSH
63141: LD_VAR 0 1
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 31
63152: PUSH
63153: LD_INT 25
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PPUSH
63164: CALL_OW 69
63168: ST_TO_ADDR
// end ;
63169: LD_VAR 0 2
63173: RET
// export function Shuffle ( array ) ; var i , index ; begin
63174: LD_INT 0
63176: PPUSH
63177: PPUSH
63178: PPUSH
// result := [ ] ;
63179: LD_ADDR_VAR 0 2
63183: PUSH
63184: EMPTY
63185: ST_TO_ADDR
// if not array then
63186: LD_VAR 0 1
63190: NOT
63191: IFFALSE 63195
// exit ;
63193: GO 63294
// Randomize ;
63195: CALL_OW 10
// for i = array downto 1 do
63199: LD_ADDR_VAR 0 3
63203: PUSH
63204: DOUBLE
63205: LD_VAR 0 1
63209: INC
63210: ST_TO_ADDR
63211: LD_INT 1
63213: PUSH
63214: FOR_DOWNTO
63215: IFFALSE 63292
// begin index := rand ( 1 , array ) ;
63217: LD_ADDR_VAR 0 4
63221: PUSH
63222: LD_INT 1
63224: PPUSH
63225: LD_VAR 0 1
63229: PPUSH
63230: CALL_OW 12
63234: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63235: LD_ADDR_VAR 0 2
63239: PUSH
63240: LD_VAR 0 2
63244: PPUSH
63245: LD_VAR 0 2
63249: PUSH
63250: LD_INT 1
63252: PLUS
63253: PPUSH
63254: LD_VAR 0 1
63258: PUSH
63259: LD_VAR 0 4
63263: ARRAY
63264: PPUSH
63265: CALL_OW 2
63269: ST_TO_ADDR
// array := Delete ( array , index ) ;
63270: LD_ADDR_VAR 0 1
63274: PUSH
63275: LD_VAR 0 1
63279: PPUSH
63280: LD_VAR 0 4
63284: PPUSH
63285: CALL_OW 3
63289: ST_TO_ADDR
// end ;
63290: GO 63214
63292: POP
63293: POP
// end ;
63294: LD_VAR 0 2
63298: RET
// export function GetBaseMaterials ( base ) ; begin
63299: LD_INT 0
63301: PPUSH
// result := [ 0 , 0 , 0 ] ;
63302: LD_ADDR_VAR 0 2
63306: PUSH
63307: LD_INT 0
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: LIST
63320: ST_TO_ADDR
// if not base then
63321: LD_VAR 0 1
63325: NOT
63326: IFFALSE 63330
// exit ;
63328: GO 63379
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63330: LD_ADDR_VAR 0 2
63334: PUSH
63335: LD_VAR 0 1
63339: PPUSH
63340: LD_INT 1
63342: PPUSH
63343: CALL_OW 275
63347: PUSH
63348: LD_VAR 0 1
63352: PPUSH
63353: LD_INT 2
63355: PPUSH
63356: CALL_OW 275
63360: PUSH
63361: LD_VAR 0 1
63365: PPUSH
63366: LD_INT 3
63368: PPUSH
63369: CALL_OW 275
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: LIST
63378: ST_TO_ADDR
// end ;
63379: LD_VAR 0 2
63383: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63384: LD_INT 0
63386: PPUSH
63387: PPUSH
// result := array ;
63388: LD_ADDR_VAR 0 3
63392: PUSH
63393: LD_VAR 0 1
63397: ST_TO_ADDR
// if size > 0 then
63398: LD_VAR 0 2
63402: PUSH
63403: LD_INT 0
63405: GREATER
63406: IFFALSE 63452
// for i := array downto size do
63408: LD_ADDR_VAR 0 4
63412: PUSH
63413: DOUBLE
63414: LD_VAR 0 1
63418: INC
63419: ST_TO_ADDR
63420: LD_VAR 0 2
63424: PUSH
63425: FOR_DOWNTO
63426: IFFALSE 63450
// result := Delete ( result , result ) ;
63428: LD_ADDR_VAR 0 3
63432: PUSH
63433: LD_VAR 0 3
63437: PPUSH
63438: LD_VAR 0 3
63442: PPUSH
63443: CALL_OW 3
63447: ST_TO_ADDR
63448: GO 63425
63450: POP
63451: POP
// end ;
63452: LD_VAR 0 3
63456: RET
// export function ComExit ( unit ) ; var tmp ; begin
63457: LD_INT 0
63459: PPUSH
63460: PPUSH
// if not IsInUnit ( unit ) then
63461: LD_VAR 0 1
63465: PPUSH
63466: CALL_OW 310
63470: NOT
63471: IFFALSE 63475
// exit ;
63473: GO 63535
// tmp := IsInUnit ( unit ) ;
63475: LD_ADDR_VAR 0 3
63479: PUSH
63480: LD_VAR 0 1
63484: PPUSH
63485: CALL_OW 310
63489: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63490: LD_VAR 0 3
63494: PPUSH
63495: CALL_OW 247
63499: PUSH
63500: LD_INT 2
63502: EQUAL
63503: IFFALSE 63516
// ComExitVehicle ( unit ) else
63505: LD_VAR 0 1
63509: PPUSH
63510: CALL_OW 121
63514: GO 63525
// ComExitBuilding ( unit ) ;
63516: LD_VAR 0 1
63520: PPUSH
63521: CALL_OW 122
// result := tmp ;
63525: LD_ADDR_VAR 0 2
63529: PUSH
63530: LD_VAR 0 3
63534: ST_TO_ADDR
// end ;
63535: LD_VAR 0 2
63539: RET
// export function ComExitAll ( units ) ; var i ; begin
63540: LD_INT 0
63542: PPUSH
63543: PPUSH
// if not units then
63544: LD_VAR 0 1
63548: NOT
63549: IFFALSE 63553
// exit ;
63551: GO 63579
// for i in units do
63553: LD_ADDR_VAR 0 3
63557: PUSH
63558: LD_VAR 0 1
63562: PUSH
63563: FOR_IN
63564: IFFALSE 63577
// ComExit ( i ) ;
63566: LD_VAR 0 3
63570: PPUSH
63571: CALL 63457 0 1
63575: GO 63563
63577: POP
63578: POP
// end ;
63579: LD_VAR 0 2
63583: RET
// export function ResetHc ; begin
63584: LD_INT 0
63586: PPUSH
// InitHc ;
63587: CALL_OW 19
// hc_importance := 0 ;
63591: LD_ADDR_OWVAR 32
63595: PUSH
63596: LD_INT 0
63598: ST_TO_ADDR
// end ;
63599: LD_VAR 0 1
63603: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63604: LD_INT 0
63606: PPUSH
63607: PPUSH
63608: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63609: LD_ADDR_VAR 0 6
63613: PUSH
63614: LD_VAR 0 1
63618: PUSH
63619: LD_VAR 0 3
63623: PLUS
63624: PUSH
63625: LD_INT 2
63627: DIV
63628: ST_TO_ADDR
// if _x < 0 then
63629: LD_VAR 0 6
63633: PUSH
63634: LD_INT 0
63636: LESS
63637: IFFALSE 63654
// _x := _x * - 1 ;
63639: LD_ADDR_VAR 0 6
63643: PUSH
63644: LD_VAR 0 6
63648: PUSH
63649: LD_INT 1
63651: NEG
63652: MUL
63653: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63654: LD_ADDR_VAR 0 7
63658: PUSH
63659: LD_VAR 0 2
63663: PUSH
63664: LD_VAR 0 4
63668: PLUS
63669: PUSH
63670: LD_INT 2
63672: DIV
63673: ST_TO_ADDR
// if _y < 0 then
63674: LD_VAR 0 7
63678: PUSH
63679: LD_INT 0
63681: LESS
63682: IFFALSE 63699
// _y := _y * - 1 ;
63684: LD_ADDR_VAR 0 7
63688: PUSH
63689: LD_VAR 0 7
63693: PUSH
63694: LD_INT 1
63696: NEG
63697: MUL
63698: ST_TO_ADDR
// result := [ _x , _y ] ;
63699: LD_ADDR_VAR 0 5
63703: PUSH
63704: LD_VAR 0 6
63708: PUSH
63709: LD_VAR 0 7
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: ST_TO_ADDR
// end ;
63718: LD_VAR 0 5
63722: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63723: LD_INT 0
63725: PPUSH
63726: PPUSH
63727: PPUSH
63728: PPUSH
// task := GetTaskList ( unit ) ;
63729: LD_ADDR_VAR 0 7
63733: PUSH
63734: LD_VAR 0 1
63738: PPUSH
63739: CALL_OW 437
63743: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63744: LD_VAR 0 7
63748: NOT
63749: PUSH
63750: LD_VAR 0 1
63754: PPUSH
63755: LD_VAR 0 2
63759: PPUSH
63760: CALL_OW 308
63764: NOT
63765: AND
63766: IFFALSE 63770
// exit ;
63768: GO 63888
// if IsInArea ( unit , area ) then
63770: LD_VAR 0 1
63774: PPUSH
63775: LD_VAR 0 2
63779: PPUSH
63780: CALL_OW 308
63784: IFFALSE 63802
// begin ComMoveToArea ( unit , goAway ) ;
63786: LD_VAR 0 1
63790: PPUSH
63791: LD_VAR 0 3
63795: PPUSH
63796: CALL_OW 113
// exit ;
63800: GO 63888
// end ; if task [ 1 ] [ 1 ] <> M then
63802: LD_VAR 0 7
63806: PUSH
63807: LD_INT 1
63809: ARRAY
63810: PUSH
63811: LD_INT 1
63813: ARRAY
63814: PUSH
63815: LD_STRING M
63817: NONEQUAL
63818: IFFALSE 63822
// exit ;
63820: GO 63888
// x := task [ 1 ] [ 2 ] ;
63822: LD_ADDR_VAR 0 5
63826: PUSH
63827: LD_VAR 0 7
63831: PUSH
63832: LD_INT 1
63834: ARRAY
63835: PUSH
63836: LD_INT 2
63838: ARRAY
63839: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63840: LD_ADDR_VAR 0 6
63844: PUSH
63845: LD_VAR 0 7
63849: PUSH
63850: LD_INT 1
63852: ARRAY
63853: PUSH
63854: LD_INT 3
63856: ARRAY
63857: ST_TO_ADDR
// if InArea ( x , y , area ) then
63858: LD_VAR 0 5
63862: PPUSH
63863: LD_VAR 0 6
63867: PPUSH
63868: LD_VAR 0 2
63872: PPUSH
63873: CALL_OW 309
63877: IFFALSE 63888
// ComStop ( unit ) ;
63879: LD_VAR 0 1
63883: PPUSH
63884: CALL_OW 141
// end ;
63888: LD_VAR 0 4
63892: RET
// export function Abs ( value ) ; begin
63893: LD_INT 0
63895: PPUSH
// result := value ;
63896: LD_ADDR_VAR 0 2
63900: PUSH
63901: LD_VAR 0 1
63905: ST_TO_ADDR
// if value < 0 then
63906: LD_VAR 0 1
63910: PUSH
63911: LD_INT 0
63913: LESS
63914: IFFALSE 63931
// result := value * - 1 ;
63916: LD_ADDR_VAR 0 2
63920: PUSH
63921: LD_VAR 0 1
63925: PUSH
63926: LD_INT 1
63928: NEG
63929: MUL
63930: ST_TO_ADDR
// end ;
63931: LD_VAR 0 2
63935: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63936: LD_INT 0
63938: PPUSH
63939: PPUSH
63940: PPUSH
63941: PPUSH
63942: PPUSH
63943: PPUSH
63944: PPUSH
63945: PPUSH
// if not unit or not building then
63946: LD_VAR 0 1
63950: NOT
63951: PUSH
63952: LD_VAR 0 2
63956: NOT
63957: OR
63958: IFFALSE 63962
// exit ;
63960: GO 64188
// x := GetX ( building ) ;
63962: LD_ADDR_VAR 0 4
63966: PUSH
63967: LD_VAR 0 2
63971: PPUSH
63972: CALL_OW 250
63976: ST_TO_ADDR
// y := GetY ( building ) ;
63977: LD_ADDR_VAR 0 6
63981: PUSH
63982: LD_VAR 0 2
63986: PPUSH
63987: CALL_OW 251
63991: ST_TO_ADDR
// d := GetDir ( building ) ;
63992: LD_ADDR_VAR 0 8
63996: PUSH
63997: LD_VAR 0 2
64001: PPUSH
64002: CALL_OW 254
64006: ST_TO_ADDR
// r := 4 ;
64007: LD_ADDR_VAR 0 9
64011: PUSH
64012: LD_INT 4
64014: ST_TO_ADDR
// for i := 1 to 5 do
64015: LD_ADDR_VAR 0 10
64019: PUSH
64020: DOUBLE
64021: LD_INT 1
64023: DEC
64024: ST_TO_ADDR
64025: LD_INT 5
64027: PUSH
64028: FOR_TO
64029: IFFALSE 64186
// begin _x := ShiftX ( x , d , r + i ) ;
64031: LD_ADDR_VAR 0 5
64035: PUSH
64036: LD_VAR 0 4
64040: PPUSH
64041: LD_VAR 0 8
64045: PPUSH
64046: LD_VAR 0 9
64050: PUSH
64051: LD_VAR 0 10
64055: PLUS
64056: PPUSH
64057: CALL_OW 272
64061: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64062: LD_ADDR_VAR 0 7
64066: PUSH
64067: LD_VAR 0 6
64071: PPUSH
64072: LD_VAR 0 8
64076: PPUSH
64077: LD_VAR 0 9
64081: PUSH
64082: LD_VAR 0 10
64086: PLUS
64087: PPUSH
64088: CALL_OW 273
64092: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64093: LD_VAR 0 5
64097: PPUSH
64098: LD_VAR 0 7
64102: PPUSH
64103: CALL_OW 488
64107: PUSH
64108: LD_VAR 0 5
64112: PPUSH
64113: LD_VAR 0 7
64117: PPUSH
64118: CALL_OW 428
64122: PPUSH
64123: CALL_OW 247
64127: PUSH
64128: LD_INT 3
64130: PUSH
64131: LD_INT 2
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: IN
64138: NOT
64139: AND
64140: IFFALSE 64184
// begin ComMoveXY ( unit , _x , _y ) ;
64142: LD_VAR 0 1
64146: PPUSH
64147: LD_VAR 0 5
64151: PPUSH
64152: LD_VAR 0 7
64156: PPUSH
64157: CALL_OW 111
// result := [ _x , _y ] ;
64161: LD_ADDR_VAR 0 3
64165: PUSH
64166: LD_VAR 0 5
64170: PUSH
64171: LD_VAR 0 7
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: ST_TO_ADDR
// exit ;
64180: POP
64181: POP
64182: GO 64188
// end ; end ;
64184: GO 64028
64186: POP
64187: POP
// end ;
64188: LD_VAR 0 3
64192: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64193: LD_INT 0
64195: PPUSH
64196: PPUSH
64197: PPUSH
// result := 0 ;
64198: LD_ADDR_VAR 0 3
64202: PUSH
64203: LD_INT 0
64205: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64206: LD_VAR 0 1
64210: PUSH
64211: LD_INT 0
64213: LESS
64214: PUSH
64215: LD_VAR 0 1
64219: PUSH
64220: LD_INT 8
64222: GREATER
64223: OR
64224: PUSH
64225: LD_VAR 0 2
64229: PUSH
64230: LD_INT 0
64232: LESS
64233: OR
64234: PUSH
64235: LD_VAR 0 2
64239: PUSH
64240: LD_INT 8
64242: GREATER
64243: OR
64244: IFFALSE 64248
// exit ;
64246: GO 64323
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64248: LD_ADDR_VAR 0 4
64252: PUSH
64253: LD_INT 22
64255: PUSH
64256: LD_VAR 0 2
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PPUSH
64265: CALL_OW 69
64269: PUSH
64270: FOR_IN
64271: IFFALSE 64321
// begin un := UnitShoot ( i ) ;
64273: LD_ADDR_VAR 0 5
64277: PUSH
64278: LD_VAR 0 4
64282: PPUSH
64283: CALL_OW 504
64287: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64288: LD_VAR 0 5
64292: PPUSH
64293: CALL_OW 255
64297: PUSH
64298: LD_VAR 0 1
64302: EQUAL
64303: IFFALSE 64319
// begin result := un ;
64305: LD_ADDR_VAR 0 3
64309: PUSH
64310: LD_VAR 0 5
64314: ST_TO_ADDR
// exit ;
64315: POP
64316: POP
64317: GO 64323
// end ; end ;
64319: GO 64270
64321: POP
64322: POP
// end ;
64323: LD_VAR 0 3
64327: RET
// export function GetCargoBay ( units ) ; begin
64328: LD_INT 0
64330: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64331: LD_ADDR_VAR 0 2
64335: PUSH
64336: LD_VAR 0 1
64340: PPUSH
64341: LD_INT 2
64343: PUSH
64344: LD_INT 34
64346: PUSH
64347: LD_INT 12
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 34
64356: PUSH
64357: LD_INT 51
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 34
64366: PUSH
64367: LD_INT 32
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 34
64376: PUSH
64377: LD_EXP 25
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: PPUSH
64393: CALL_OW 72
64397: ST_TO_ADDR
// end ;
64398: LD_VAR 0 2
64402: RET
// export function Negate ( value ) ; begin
64403: LD_INT 0
64405: PPUSH
// result := not value ;
64406: LD_ADDR_VAR 0 2
64410: PUSH
64411: LD_VAR 0 1
64415: NOT
64416: ST_TO_ADDR
// end ;
64417: LD_VAR 0 2
64421: RET
// export function Inc ( value ) ; begin
64422: LD_INT 0
64424: PPUSH
// result := value + 1 ;
64425: LD_ADDR_VAR 0 2
64429: PUSH
64430: LD_VAR 0 1
64434: PUSH
64435: LD_INT 1
64437: PLUS
64438: ST_TO_ADDR
// end ;
64439: LD_VAR 0 2
64443: RET
// export function Dec ( value ) ; begin
64444: LD_INT 0
64446: PPUSH
// result := value - 1 ;
64447: LD_ADDR_VAR 0 2
64451: PUSH
64452: LD_VAR 0 1
64456: PUSH
64457: LD_INT 1
64459: MINUS
64460: ST_TO_ADDR
// end ;
64461: LD_VAR 0 2
64465: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64466: LD_INT 0
64468: PPUSH
64469: PPUSH
64470: PPUSH
64471: PPUSH
64472: PPUSH
64473: PPUSH
64474: PPUSH
64475: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64476: LD_VAR 0 1
64480: PPUSH
64481: LD_VAR 0 2
64485: PPUSH
64486: CALL_OW 488
64490: NOT
64491: PUSH
64492: LD_VAR 0 3
64496: PPUSH
64497: LD_VAR 0 4
64501: PPUSH
64502: CALL_OW 488
64506: NOT
64507: OR
64508: IFFALSE 64521
// begin result := - 1 ;
64510: LD_ADDR_VAR 0 5
64514: PUSH
64515: LD_INT 1
64517: NEG
64518: ST_TO_ADDR
// exit ;
64519: GO 64756
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64521: LD_ADDR_VAR 0 12
64525: PUSH
64526: LD_VAR 0 1
64530: PPUSH
64531: LD_VAR 0 2
64535: PPUSH
64536: LD_VAR 0 3
64540: PPUSH
64541: LD_VAR 0 4
64545: PPUSH
64546: CALL 63604 0 4
64550: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64551: LD_ADDR_VAR 0 11
64555: PUSH
64556: LD_VAR 0 1
64560: PPUSH
64561: LD_VAR 0 2
64565: PPUSH
64566: LD_VAR 0 12
64570: PUSH
64571: LD_INT 1
64573: ARRAY
64574: PPUSH
64575: LD_VAR 0 12
64579: PUSH
64580: LD_INT 2
64582: ARRAY
64583: PPUSH
64584: CALL_OW 298
64588: ST_TO_ADDR
// distance := 9999 ;
64589: LD_ADDR_VAR 0 10
64593: PUSH
64594: LD_INT 9999
64596: ST_TO_ADDR
// for i := 0 to 5 do
64597: LD_ADDR_VAR 0 6
64601: PUSH
64602: DOUBLE
64603: LD_INT 0
64605: DEC
64606: ST_TO_ADDR
64607: LD_INT 5
64609: PUSH
64610: FOR_TO
64611: IFFALSE 64754
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64613: LD_ADDR_VAR 0 7
64617: PUSH
64618: LD_VAR 0 1
64622: PPUSH
64623: LD_VAR 0 6
64627: PPUSH
64628: LD_VAR 0 11
64632: PPUSH
64633: CALL_OW 272
64637: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64638: LD_ADDR_VAR 0 8
64642: PUSH
64643: LD_VAR 0 2
64647: PPUSH
64648: LD_VAR 0 6
64652: PPUSH
64653: LD_VAR 0 11
64657: PPUSH
64658: CALL_OW 273
64662: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64663: LD_VAR 0 7
64667: PPUSH
64668: LD_VAR 0 8
64672: PPUSH
64673: CALL_OW 488
64677: NOT
64678: IFFALSE 64682
// continue ;
64680: GO 64610
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64682: LD_ADDR_VAR 0 9
64686: PUSH
64687: LD_VAR 0 12
64691: PUSH
64692: LD_INT 1
64694: ARRAY
64695: PPUSH
64696: LD_VAR 0 12
64700: PUSH
64701: LD_INT 2
64703: ARRAY
64704: PPUSH
64705: LD_VAR 0 7
64709: PPUSH
64710: LD_VAR 0 8
64714: PPUSH
64715: CALL_OW 298
64719: ST_TO_ADDR
// if tmp < distance then
64720: LD_VAR 0 9
64724: PUSH
64725: LD_VAR 0 10
64729: LESS
64730: IFFALSE 64752
// begin result := i ;
64732: LD_ADDR_VAR 0 5
64736: PUSH
64737: LD_VAR 0 6
64741: ST_TO_ADDR
// distance := tmp ;
64742: LD_ADDR_VAR 0 10
64746: PUSH
64747: LD_VAR 0 9
64751: ST_TO_ADDR
// end ; end ;
64752: GO 64610
64754: POP
64755: POP
// end ;
64756: LD_VAR 0 5
64760: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64761: LD_INT 0
64763: PPUSH
64764: PPUSH
// if not driver or not IsInUnit ( driver ) then
64765: LD_VAR 0 1
64769: NOT
64770: PUSH
64771: LD_VAR 0 1
64775: PPUSH
64776: CALL_OW 310
64780: NOT
64781: OR
64782: IFFALSE 64786
// exit ;
64784: GO 64876
// vehicle := IsInUnit ( driver ) ;
64786: LD_ADDR_VAR 0 3
64790: PUSH
64791: LD_VAR 0 1
64795: PPUSH
64796: CALL_OW 310
64800: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64801: LD_VAR 0 1
64805: PPUSH
64806: LD_STRING \
64808: PUSH
64809: LD_INT 0
64811: PUSH
64812: LD_INT 0
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: LD_INT 0
64820: PUSH
64821: LD_INT 0
64823: PUSH
64824: LD_INT 0
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: PUSH
64836: LD_STRING E
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: LD_VAR 0 3
64849: PUSH
64850: LD_INT 0
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PPUSH
64872: CALL_OW 446
// end ;
64876: LD_VAR 0 2
64880: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64881: LD_INT 0
64883: PPUSH
64884: PPUSH
// if not driver or not IsInUnit ( driver ) then
64885: LD_VAR 0 1
64889: NOT
64890: PUSH
64891: LD_VAR 0 1
64895: PPUSH
64896: CALL_OW 310
64900: NOT
64901: OR
64902: IFFALSE 64906
// exit ;
64904: GO 64996
// vehicle := IsInUnit ( driver ) ;
64906: LD_ADDR_VAR 0 3
64910: PUSH
64911: LD_VAR 0 1
64915: PPUSH
64916: CALL_OW 310
64920: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64921: LD_VAR 0 1
64925: PPUSH
64926: LD_STRING \
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: LD_INT 0
64937: PUSH
64938: LD_INT 0
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: PUSH
64956: LD_STRING E
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: LD_VAR 0 3
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: LD_INT 0
64975: PUSH
64976: LD_INT 0
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PPUSH
64992: CALL_OW 447
// end ;
64996: LD_VAR 0 2
65000: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65001: LD_INT 0
65003: PPUSH
65004: PPUSH
65005: PPUSH
// tmp := [ ] ;
65006: LD_ADDR_VAR 0 5
65010: PUSH
65011: EMPTY
65012: ST_TO_ADDR
// for i in units do
65013: LD_ADDR_VAR 0 4
65017: PUSH
65018: LD_VAR 0 1
65022: PUSH
65023: FOR_IN
65024: IFFALSE 65062
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65026: LD_ADDR_VAR 0 5
65030: PUSH
65031: LD_VAR 0 5
65035: PPUSH
65036: LD_VAR 0 5
65040: PUSH
65041: LD_INT 1
65043: PLUS
65044: PPUSH
65045: LD_VAR 0 4
65049: PPUSH
65050: CALL_OW 256
65054: PPUSH
65055: CALL_OW 2
65059: ST_TO_ADDR
65060: GO 65023
65062: POP
65063: POP
// if not tmp then
65064: LD_VAR 0 5
65068: NOT
65069: IFFALSE 65073
// exit ;
65071: GO 65121
// if asc then
65073: LD_VAR 0 2
65077: IFFALSE 65101
// result := SortListByListAsc ( units , tmp ) else
65079: LD_ADDR_VAR 0 3
65083: PUSH
65084: LD_VAR 0 1
65088: PPUSH
65089: LD_VAR 0 5
65093: PPUSH
65094: CALL_OW 76
65098: ST_TO_ADDR
65099: GO 65121
// result := SortListByListDesc ( units , tmp ) ;
65101: LD_ADDR_VAR 0 3
65105: PUSH
65106: LD_VAR 0 1
65110: PPUSH
65111: LD_VAR 0 5
65115: PPUSH
65116: CALL_OW 77
65120: ST_TO_ADDR
// end ;
65121: LD_VAR 0 3
65125: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65126: LD_INT 0
65128: PPUSH
65129: PPUSH
// task := GetTaskList ( mech ) ;
65130: LD_ADDR_VAR 0 4
65134: PUSH
65135: LD_VAR 0 1
65139: PPUSH
65140: CALL_OW 437
65144: ST_TO_ADDR
// if not task then
65145: LD_VAR 0 4
65149: NOT
65150: IFFALSE 65154
// exit ;
65152: GO 65196
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65154: LD_ADDR_VAR 0 3
65158: PUSH
65159: LD_VAR 0 4
65163: PUSH
65164: LD_INT 1
65166: ARRAY
65167: PUSH
65168: LD_INT 1
65170: ARRAY
65171: PUSH
65172: LD_STRING r
65174: EQUAL
65175: PUSH
65176: LD_VAR 0 4
65180: PUSH
65181: LD_INT 1
65183: ARRAY
65184: PUSH
65185: LD_INT 4
65187: ARRAY
65188: PUSH
65189: LD_VAR 0 2
65193: EQUAL
65194: AND
65195: ST_TO_ADDR
// end ;
65196: LD_VAR 0 3
65200: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65201: LD_INT 0
65203: PPUSH
// SetDir ( unit , d ) ;
65204: LD_VAR 0 1
65208: PPUSH
65209: LD_VAR 0 4
65213: PPUSH
65214: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65218: LD_VAR 0 1
65222: PPUSH
65223: LD_VAR 0 2
65227: PPUSH
65228: LD_VAR 0 3
65232: PPUSH
65233: LD_VAR 0 5
65237: PPUSH
65238: CALL_OW 48
// end ;
65242: LD_VAR 0 6
65246: RET
// export function ToNaturalNumber ( number ) ; begin
65247: LD_INT 0
65249: PPUSH
// result := number div 1 ;
65250: LD_ADDR_VAR 0 2
65254: PUSH
65255: LD_VAR 0 1
65259: PUSH
65260: LD_INT 1
65262: DIV
65263: ST_TO_ADDR
// if number < 0 then
65264: LD_VAR 0 1
65268: PUSH
65269: LD_INT 0
65271: LESS
65272: IFFALSE 65282
// result := 0 ;
65274: LD_ADDR_VAR 0 2
65278: PUSH
65279: LD_INT 0
65281: ST_TO_ADDR
// end ;
65282: LD_VAR 0 2
65286: RET
// export function SortByClass ( units , class ) ; var un ; begin
65287: LD_INT 0
65289: PPUSH
65290: PPUSH
// if not units or not class then
65291: LD_VAR 0 1
65295: NOT
65296: PUSH
65297: LD_VAR 0 2
65301: NOT
65302: OR
65303: IFFALSE 65307
// exit ;
65305: GO 65402
// result := [ ] ;
65307: LD_ADDR_VAR 0 3
65311: PUSH
65312: EMPTY
65313: ST_TO_ADDR
// for un in units do
65314: LD_ADDR_VAR 0 4
65318: PUSH
65319: LD_VAR 0 1
65323: PUSH
65324: FOR_IN
65325: IFFALSE 65400
// if GetClass ( un ) = class then
65327: LD_VAR 0 4
65331: PPUSH
65332: CALL_OW 257
65336: PUSH
65337: LD_VAR 0 2
65341: EQUAL
65342: IFFALSE 65369
// result := Insert ( result , 1 , un ) else
65344: LD_ADDR_VAR 0 3
65348: PUSH
65349: LD_VAR 0 3
65353: PPUSH
65354: LD_INT 1
65356: PPUSH
65357: LD_VAR 0 4
65361: PPUSH
65362: CALL_OW 2
65366: ST_TO_ADDR
65367: GO 65398
// result := Replace ( result , result + 1 , un ) ;
65369: LD_ADDR_VAR 0 3
65373: PUSH
65374: LD_VAR 0 3
65378: PPUSH
65379: LD_VAR 0 3
65383: PUSH
65384: LD_INT 1
65386: PLUS
65387: PPUSH
65388: LD_VAR 0 4
65392: PPUSH
65393: CALL_OW 1
65397: ST_TO_ADDR
65398: GO 65324
65400: POP
65401: POP
// end ;
65402: LD_VAR 0 3
65406: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65407: LD_INT 0
65409: PPUSH
65410: PPUSH
65411: PPUSH
65412: PPUSH
65413: PPUSH
65414: PPUSH
65415: PPUSH
// result := [ ] ;
65416: LD_ADDR_VAR 0 4
65420: PUSH
65421: EMPTY
65422: ST_TO_ADDR
// if x - r < 0 then
65423: LD_VAR 0 1
65427: PUSH
65428: LD_VAR 0 3
65432: MINUS
65433: PUSH
65434: LD_INT 0
65436: LESS
65437: IFFALSE 65449
// min_x := 0 else
65439: LD_ADDR_VAR 0 8
65443: PUSH
65444: LD_INT 0
65446: ST_TO_ADDR
65447: GO 65465
// min_x := x - r ;
65449: LD_ADDR_VAR 0 8
65453: PUSH
65454: LD_VAR 0 1
65458: PUSH
65459: LD_VAR 0 3
65463: MINUS
65464: ST_TO_ADDR
// if y - r < 0 then
65465: LD_VAR 0 2
65469: PUSH
65470: LD_VAR 0 3
65474: MINUS
65475: PUSH
65476: LD_INT 0
65478: LESS
65479: IFFALSE 65491
// min_y := 0 else
65481: LD_ADDR_VAR 0 7
65485: PUSH
65486: LD_INT 0
65488: ST_TO_ADDR
65489: GO 65507
// min_y := y - r ;
65491: LD_ADDR_VAR 0 7
65495: PUSH
65496: LD_VAR 0 2
65500: PUSH
65501: LD_VAR 0 3
65505: MINUS
65506: ST_TO_ADDR
// max_x := x + r ;
65507: LD_ADDR_VAR 0 9
65511: PUSH
65512: LD_VAR 0 1
65516: PUSH
65517: LD_VAR 0 3
65521: PLUS
65522: ST_TO_ADDR
// max_y := y + r ;
65523: LD_ADDR_VAR 0 10
65527: PUSH
65528: LD_VAR 0 2
65532: PUSH
65533: LD_VAR 0 3
65537: PLUS
65538: ST_TO_ADDR
// for _x = min_x to max_x do
65539: LD_ADDR_VAR 0 5
65543: PUSH
65544: DOUBLE
65545: LD_VAR 0 8
65549: DEC
65550: ST_TO_ADDR
65551: LD_VAR 0 9
65555: PUSH
65556: FOR_TO
65557: IFFALSE 65658
// for _y = min_y to max_y do
65559: LD_ADDR_VAR 0 6
65563: PUSH
65564: DOUBLE
65565: LD_VAR 0 7
65569: DEC
65570: ST_TO_ADDR
65571: LD_VAR 0 10
65575: PUSH
65576: FOR_TO
65577: IFFALSE 65654
// begin if not ValidHex ( _x , _y ) then
65579: LD_VAR 0 5
65583: PPUSH
65584: LD_VAR 0 6
65588: PPUSH
65589: CALL_OW 488
65593: NOT
65594: IFFALSE 65598
// continue ;
65596: GO 65576
// if GetResourceTypeXY ( _x , _y ) then
65598: LD_VAR 0 5
65602: PPUSH
65603: LD_VAR 0 6
65607: PPUSH
65608: CALL_OW 283
65612: IFFALSE 65652
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65614: LD_ADDR_VAR 0 4
65618: PUSH
65619: LD_VAR 0 4
65623: PPUSH
65624: LD_VAR 0 4
65628: PUSH
65629: LD_INT 1
65631: PLUS
65632: PPUSH
65633: LD_VAR 0 5
65637: PUSH
65638: LD_VAR 0 6
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PPUSH
65647: CALL_OW 1
65651: ST_TO_ADDR
// end ;
65652: GO 65576
65654: POP
65655: POP
65656: GO 65556
65658: POP
65659: POP
// end ;
65660: LD_VAR 0 4
65664: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65665: LD_INT 0
65667: PPUSH
65668: PPUSH
65669: PPUSH
65670: PPUSH
65671: PPUSH
65672: PPUSH
65673: PPUSH
65674: PPUSH
// if not units then
65675: LD_VAR 0 1
65679: NOT
65680: IFFALSE 65684
// exit ;
65682: GO 66195
// result := UnitFilter ( units , [ f_ok ] ) ;
65684: LD_ADDR_VAR 0 3
65688: PUSH
65689: LD_VAR 0 1
65693: PPUSH
65694: LD_INT 50
65696: PUSH
65697: EMPTY
65698: LIST
65699: PPUSH
65700: CALL_OW 72
65704: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65705: LD_ADDR_VAR 0 8
65709: PUSH
65710: LD_VAR 0 1
65714: PUSH
65715: LD_INT 1
65717: ARRAY
65718: PPUSH
65719: CALL_OW 255
65723: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65724: LD_ADDR_VAR 0 10
65728: PUSH
65729: LD_INT 29
65731: PUSH
65732: LD_EXP 28
65736: PUSH
65737: LD_INT 49
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: LIST
65744: ST_TO_ADDR
// if not result then
65745: LD_VAR 0 3
65749: NOT
65750: IFFALSE 65754
// exit ;
65752: GO 66195
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65754: LD_ADDR_VAR 0 5
65758: PUSH
65759: LD_INT 81
65761: PUSH
65762: LD_VAR 0 8
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PPUSH
65771: CALL_OW 69
65775: ST_TO_ADDR
// for i in result do
65776: LD_ADDR_VAR 0 4
65780: PUSH
65781: LD_VAR 0 3
65785: PUSH
65786: FOR_IN
65787: IFFALSE 66193
// begin tag := GetTag ( i ) + 1 ;
65789: LD_ADDR_VAR 0 9
65793: PUSH
65794: LD_VAR 0 4
65798: PPUSH
65799: CALL_OW 110
65803: PUSH
65804: LD_INT 1
65806: PLUS
65807: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65808: LD_ADDR_VAR 0 7
65812: PUSH
65813: LD_VAR 0 4
65817: PPUSH
65818: CALL_OW 250
65822: PPUSH
65823: LD_VAR 0 4
65827: PPUSH
65828: CALL_OW 251
65832: PPUSH
65833: LD_INT 6
65835: PPUSH
65836: CALL 65407 0 3
65840: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65841: LD_VAR 0 7
65845: PUSH
65846: LD_VAR 0 4
65850: PPUSH
65851: CALL_OW 264
65855: PUSH
65856: LD_VAR 0 10
65860: IN
65861: NOT
65862: AND
65863: IFFALSE 65902
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65865: LD_VAR 0 4
65869: PPUSH
65870: LD_VAR 0 7
65874: PUSH
65875: LD_INT 1
65877: ARRAY
65878: PUSH
65879: LD_INT 1
65881: ARRAY
65882: PPUSH
65883: LD_VAR 0 7
65887: PUSH
65888: LD_INT 1
65890: ARRAY
65891: PUSH
65892: LD_INT 2
65894: ARRAY
65895: PPUSH
65896: CALL_OW 116
65900: GO 66191
// if path > tag then
65902: LD_VAR 0 2
65906: PUSH
65907: LD_VAR 0 9
65911: GREATER
65912: IFFALSE 66120
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
65914: LD_ADDR_VAR 0 6
65918: PUSH
65919: LD_VAR 0 5
65923: PPUSH
65924: LD_INT 91
65926: PUSH
65927: LD_VAR 0 4
65931: PUSH
65932: LD_INT 12
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: LIST
65939: PPUSH
65940: CALL_OW 72
65944: ST_TO_ADDR
// if nearEnemy then
65945: LD_VAR 0 6
65949: IFFALSE 66018
// begin if GetWeapon ( i ) = ru_time_lapser then
65951: LD_VAR 0 4
65955: PPUSH
65956: CALL_OW 264
65960: PUSH
65961: LD_INT 49
65963: EQUAL
65964: IFFALSE 65992
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65966: LD_VAR 0 4
65970: PPUSH
65971: LD_VAR 0 6
65975: PPUSH
65976: LD_VAR 0 4
65980: PPUSH
65981: CALL_OW 74
65985: PPUSH
65986: CALL_OW 112
65990: GO 66016
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65992: LD_VAR 0 4
65996: PPUSH
65997: LD_VAR 0 6
66001: PPUSH
66002: LD_VAR 0 4
66006: PPUSH
66007: CALL_OW 74
66011: PPUSH
66012: CALL_OW 115
// end else
66016: GO 66118
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66018: LD_VAR 0 4
66022: PPUSH
66023: LD_VAR 0 2
66027: PUSH
66028: LD_VAR 0 9
66032: ARRAY
66033: PUSH
66034: LD_INT 1
66036: ARRAY
66037: PPUSH
66038: LD_VAR 0 2
66042: PUSH
66043: LD_VAR 0 9
66047: ARRAY
66048: PUSH
66049: LD_INT 2
66051: ARRAY
66052: PPUSH
66053: CALL_OW 297
66057: PUSH
66058: LD_INT 6
66060: GREATER
66061: IFFALSE 66104
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66063: LD_VAR 0 4
66067: PPUSH
66068: LD_VAR 0 2
66072: PUSH
66073: LD_VAR 0 9
66077: ARRAY
66078: PUSH
66079: LD_INT 1
66081: ARRAY
66082: PPUSH
66083: LD_VAR 0 2
66087: PUSH
66088: LD_VAR 0 9
66092: ARRAY
66093: PUSH
66094: LD_INT 2
66096: ARRAY
66097: PPUSH
66098: CALL_OW 114
66102: GO 66118
// SetTag ( i , tag ) ;
66104: LD_VAR 0 4
66108: PPUSH
66109: LD_VAR 0 9
66113: PPUSH
66114: CALL_OW 109
// end else
66118: GO 66191
// if enemy then
66120: LD_VAR 0 5
66124: IFFALSE 66191
// begin if GetWeapon ( i ) = ru_time_lapser then
66126: LD_VAR 0 4
66130: PPUSH
66131: CALL_OW 264
66135: PUSH
66136: LD_INT 49
66138: EQUAL
66139: IFFALSE 66167
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66141: LD_VAR 0 4
66145: PPUSH
66146: LD_VAR 0 5
66150: PPUSH
66151: LD_VAR 0 4
66155: PPUSH
66156: CALL_OW 74
66160: PPUSH
66161: CALL_OW 112
66165: GO 66191
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66167: LD_VAR 0 4
66171: PPUSH
66172: LD_VAR 0 5
66176: PPUSH
66177: LD_VAR 0 4
66181: PPUSH
66182: CALL_OW 74
66186: PPUSH
66187: CALL_OW 115
// end ; end ;
66191: GO 65786
66193: POP
66194: POP
// end ;
66195: LD_VAR 0 3
66199: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66200: LD_INT 0
66202: PPUSH
66203: PPUSH
66204: PPUSH
// if not unit or IsInUnit ( unit ) then
66205: LD_VAR 0 1
66209: NOT
66210: PUSH
66211: LD_VAR 0 1
66215: PPUSH
66216: CALL_OW 310
66220: OR
66221: IFFALSE 66225
// exit ;
66223: GO 66316
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66225: LD_ADDR_VAR 0 4
66229: PUSH
66230: LD_VAR 0 1
66234: PPUSH
66235: CALL_OW 250
66239: PPUSH
66240: LD_VAR 0 2
66244: PPUSH
66245: LD_INT 1
66247: PPUSH
66248: CALL_OW 272
66252: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66253: LD_ADDR_VAR 0 5
66257: PUSH
66258: LD_VAR 0 1
66262: PPUSH
66263: CALL_OW 251
66267: PPUSH
66268: LD_VAR 0 2
66272: PPUSH
66273: LD_INT 1
66275: PPUSH
66276: CALL_OW 273
66280: ST_TO_ADDR
// if ValidHex ( x , y ) then
66281: LD_VAR 0 4
66285: PPUSH
66286: LD_VAR 0 5
66290: PPUSH
66291: CALL_OW 488
66295: IFFALSE 66316
// ComTurnXY ( unit , x , y ) ;
66297: LD_VAR 0 1
66301: PPUSH
66302: LD_VAR 0 4
66306: PPUSH
66307: LD_VAR 0 5
66311: PPUSH
66312: CALL_OW 118
// end ;
66316: LD_VAR 0 3
66320: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66321: LD_INT 0
66323: PPUSH
66324: PPUSH
// result := false ;
66325: LD_ADDR_VAR 0 3
66329: PUSH
66330: LD_INT 0
66332: ST_TO_ADDR
// if not units then
66333: LD_VAR 0 2
66337: NOT
66338: IFFALSE 66342
// exit ;
66340: GO 66387
// for i in units do
66342: LD_ADDR_VAR 0 4
66346: PUSH
66347: LD_VAR 0 2
66351: PUSH
66352: FOR_IN
66353: IFFALSE 66385
// if See ( side , i ) then
66355: LD_VAR 0 1
66359: PPUSH
66360: LD_VAR 0 4
66364: PPUSH
66365: CALL_OW 292
66369: IFFALSE 66383
// begin result := true ;
66371: LD_ADDR_VAR 0 3
66375: PUSH
66376: LD_INT 1
66378: ST_TO_ADDR
// exit ;
66379: POP
66380: POP
66381: GO 66387
// end ;
66383: GO 66352
66385: POP
66386: POP
// end ;
66387: LD_VAR 0 3
66391: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66392: LD_INT 0
66394: PPUSH
66395: PPUSH
66396: PPUSH
66397: PPUSH
// if not unit or not points then
66398: LD_VAR 0 1
66402: NOT
66403: PUSH
66404: LD_VAR 0 2
66408: NOT
66409: OR
66410: IFFALSE 66414
// exit ;
66412: GO 66504
// dist := 99999 ;
66414: LD_ADDR_VAR 0 5
66418: PUSH
66419: LD_INT 99999
66421: ST_TO_ADDR
// for i in points do
66422: LD_ADDR_VAR 0 4
66426: PUSH
66427: LD_VAR 0 2
66431: PUSH
66432: FOR_IN
66433: IFFALSE 66502
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66435: LD_ADDR_VAR 0 6
66439: PUSH
66440: LD_VAR 0 1
66444: PPUSH
66445: LD_VAR 0 4
66449: PUSH
66450: LD_INT 1
66452: ARRAY
66453: PPUSH
66454: LD_VAR 0 4
66458: PUSH
66459: LD_INT 2
66461: ARRAY
66462: PPUSH
66463: CALL_OW 297
66467: ST_TO_ADDR
// if tmpDist < dist then
66468: LD_VAR 0 6
66472: PUSH
66473: LD_VAR 0 5
66477: LESS
66478: IFFALSE 66500
// begin result := i ;
66480: LD_ADDR_VAR 0 3
66484: PUSH
66485: LD_VAR 0 4
66489: ST_TO_ADDR
// dist := tmpDist ;
66490: LD_ADDR_VAR 0 5
66494: PUSH
66495: LD_VAR 0 6
66499: ST_TO_ADDR
// end ; end ;
66500: GO 66432
66502: POP
66503: POP
// end ;
66504: LD_VAR 0 3
66508: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66509: LD_INT 0
66511: PPUSH
// uc_side := side ;
66512: LD_ADDR_OWVAR 20
66516: PUSH
66517: LD_VAR 0 1
66521: ST_TO_ADDR
// uc_nation := 3 ;
66522: LD_ADDR_OWVAR 21
66526: PUSH
66527: LD_INT 3
66529: ST_TO_ADDR
// vc_chassis := 25 ;
66530: LD_ADDR_OWVAR 37
66534: PUSH
66535: LD_INT 25
66537: ST_TO_ADDR
// vc_engine := engine_siberite ;
66538: LD_ADDR_OWVAR 39
66542: PUSH
66543: LD_INT 3
66545: ST_TO_ADDR
// vc_control := control_computer ;
66546: LD_ADDR_OWVAR 38
66550: PUSH
66551: LD_INT 3
66553: ST_TO_ADDR
// vc_weapon := 59 ;
66554: LD_ADDR_OWVAR 40
66558: PUSH
66559: LD_INT 59
66561: ST_TO_ADDR
// result := CreateVehicle ;
66562: LD_ADDR_VAR 0 5
66566: PUSH
66567: CALL_OW 45
66571: ST_TO_ADDR
// SetDir ( result , d ) ;
66572: LD_VAR 0 5
66576: PPUSH
66577: LD_VAR 0 4
66581: PPUSH
66582: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66586: LD_VAR 0 5
66590: PPUSH
66591: LD_VAR 0 2
66595: PPUSH
66596: LD_VAR 0 3
66600: PPUSH
66601: LD_INT 0
66603: PPUSH
66604: CALL_OW 48
// end ;
66608: LD_VAR 0 5
66612: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66613: LD_INT 0
66615: PPUSH
66616: PPUSH
66617: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66618: LD_ADDR_VAR 0 2
66622: PUSH
66623: LD_INT 0
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: LD_INT 0
66631: PUSH
66632: LD_INT 0
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66641: LD_VAR 0 1
66645: NOT
66646: PUSH
66647: LD_VAR 0 1
66651: PPUSH
66652: CALL_OW 264
66656: PUSH
66657: LD_INT 12
66659: PUSH
66660: LD_INT 51
66662: PUSH
66663: LD_INT 32
66665: PUSH
66666: LD_EXP 25
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: IN
66677: NOT
66678: OR
66679: IFFALSE 66683
// exit ;
66681: GO 66781
// for i := 1 to 3 do
66683: LD_ADDR_VAR 0 3
66687: PUSH
66688: DOUBLE
66689: LD_INT 1
66691: DEC
66692: ST_TO_ADDR
66693: LD_INT 3
66695: PUSH
66696: FOR_TO
66697: IFFALSE 66779
// begin tmp := GetCargo ( cargo , i ) ;
66699: LD_ADDR_VAR 0 4
66703: PUSH
66704: LD_VAR 0 1
66708: PPUSH
66709: LD_VAR 0 3
66713: PPUSH
66714: CALL_OW 289
66718: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66719: LD_ADDR_VAR 0 2
66723: PUSH
66724: LD_VAR 0 2
66728: PPUSH
66729: LD_VAR 0 3
66733: PPUSH
66734: LD_VAR 0 4
66738: PPUSH
66739: CALL_OW 1
66743: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66744: LD_ADDR_VAR 0 2
66748: PUSH
66749: LD_VAR 0 2
66753: PPUSH
66754: LD_INT 4
66756: PPUSH
66757: LD_VAR 0 2
66761: PUSH
66762: LD_INT 4
66764: ARRAY
66765: PUSH
66766: LD_VAR 0 4
66770: PLUS
66771: PPUSH
66772: CALL_OW 1
66776: ST_TO_ADDR
// end ;
66777: GO 66696
66779: POP
66780: POP
// end ; end_of_file
66781: LD_VAR 0 2
66785: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66786: LD_VAR 0 1
66790: PUSH
66791: LD_INT 200
66793: DOUBLE
66794: GREATEREQUAL
66795: IFFALSE 66803
66797: LD_INT 299
66799: DOUBLE
66800: LESSEQUAL
66801: IFTRUE 66805
66803: GO 66837
66805: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66806: LD_VAR 0 1
66810: PPUSH
66811: LD_VAR 0 2
66815: PPUSH
66816: LD_VAR 0 3
66820: PPUSH
66821: LD_VAR 0 4
66825: PPUSH
66826: LD_VAR 0 5
66830: PPUSH
66831: CALL 22126 0 5
66835: GO 66914
66837: LD_INT 300
66839: DOUBLE
66840: GREATEREQUAL
66841: IFFALSE 66849
66843: LD_INT 399
66845: DOUBLE
66846: LESSEQUAL
66847: IFTRUE 66851
66849: GO 66913
66851: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66852: LD_VAR 0 1
66856: PPUSH
66857: LD_VAR 0 2
66861: PPUSH
66862: LD_VAR 0 3
66866: PPUSH
66867: LD_VAR 0 4
66871: PPUSH
66872: LD_VAR 0 5
66876: PPUSH
66877: LD_VAR 0 6
66881: PPUSH
66882: LD_VAR 0 7
66886: PPUSH
66887: LD_VAR 0 8
66891: PPUSH
66892: LD_VAR 0 9
66896: PPUSH
66897: LD_VAR 0 10
66901: PPUSH
66902: LD_VAR 0 11
66906: PPUSH
66907: CALL 19768 0 11
66911: GO 66914
66913: POP
// end ;
66914: PPOPN 11
66916: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66917: LD_VAR 0 1
66921: PPUSH
66922: LD_VAR 0 2
66926: PPUSH
66927: LD_VAR 0 3
66931: PPUSH
66932: LD_VAR 0 4
66936: PPUSH
66937: LD_VAR 0 5
66941: PPUSH
66942: CALL 21862 0 5
// end ; end_of_file
66946: PPOPN 5
66948: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66949: LD_VAR 0 1
66953: PPUSH
66954: LD_VAR 0 2
66958: PPUSH
66959: LD_VAR 0 3
66963: PPUSH
66964: LD_VAR 0 4
66968: PPUSH
66969: LD_VAR 0 5
66973: PPUSH
66974: LD_VAR 0 6
66978: PPUSH
66979: CALL 7461 0 6
// end ;
66983: PPOPN 6
66985: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66986: CALL 7436 0 0
// end ;
66990: PPOPN 1
66992: END
