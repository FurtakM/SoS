// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 65081 0 9
// PrepareAmerican ;
  46: CALL 4378 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 927 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 30230 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 30230 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnitForce ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 30314 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 455
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 417
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 415
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: IFFALSE 382
 367: PUSH
 368: LD_VAR 0 3
 372: PPUSH
 373: CALL_OW 258
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: AND
 382: IFFALSE 399
 384: PUSH
 385: LD_VAR 0 3
 389: PPUSH
 390: CALL_OW 248
 394: PUSH
 395: LD_INT 3
 397: EQUAL
 398: AND
 399: IFFALSE 413
// begin RuSci := i ;
 401: LD_ADDR_EXP 17
 405: PUSH
 406: LD_VAR 0 3
 410: ST_TO_ADDR
// break ;
 411: GO 415
// end ;
 413: GO 349
 415: POP
 416: POP
// end ; if not RuSci then
 417: LD_EXP 17
 421: NOT
 422: IFFALSE 455
// begin uc_nation := 3 ;
 424: LD_ADDR_OWVAR 21
 428: PUSH
 429: LD_INT 3
 431: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 432: LD_INT 1
 434: PPUSH
 435: LD_INT 4
 437: PPUSH
 438: LD_INT 10
 440: PPUSH
 441: CALL_OW 380
// RuSci := CreateHuman ;
 445: LD_ADDR_EXP 17
 449: PUSH
 450: CALL_OW 44
 454: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 455: LD_ADDR_VAR 0 6
 459: PUSH
 460: LD_STRING 14a_JMMVeh
 462: PPUSH
 463: LD_INT 5
 465: PUSH
 466: LD_INT 3
 468: PUSH
 469: LD_INT 1
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: PPUSH
 489: CALL_OW 30
 493: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 494: LD_ADDR_VAR 0 7
 498: PUSH
 499: LD_STRING 14a_BurlakVeh
 501: PPUSH
 502: LD_INT 22
 504: PUSH
 505: LD_INT 3
 507: PUSH
 508: LD_INT 1
 510: PUSH
 511: LD_INT 51
 513: PUSH
 514: LD_INT 0
 516: PUSH
 517: LD_INT 3
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: PPUSH
 528: CALL_OW 30
 532: ST_TO_ADDR
// uc_direction := 4 ;
 533: LD_ADDR_OWVAR 24
 537: PUSH
 538: LD_INT 4
 540: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 541: LD_ADDR_OWVAR 21
 545: PUSH
 546: LD_VAR 0 6
 550: PUSH
 551: LD_INT 6
 553: ARRAY
 554: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 555: LD_VAR 0 6
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_VAR 0 6
 568: PUSH
 569: LD_INT 2
 571: ARRAY
 572: PPUSH
 573: LD_VAR 0 6
 577: PUSH
 578: LD_INT 3
 580: ARRAY
 581: PPUSH
 582: LD_VAR 0 6
 586: PUSH
 587: LD_INT 4
 589: ARRAY
 590: PPUSH
 591: LD_INT 60
 593: PPUSH
 594: LD_INT 80
 596: PPUSH
 597: CALL_OW 12
 601: PPUSH
 602: CALL 35250 0 5
// JMMVeh := CreateVehicle ;
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: CALL_OW 45
 615: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 616: LD_VAR 0 4
 620: PPUSH
 621: LD_INT 1
 623: PPUSH
 624: LD_INT 0
 626: PPUSH
 627: CALL 67323 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 631: LD_VAR 0 6
 635: PUSH
 636: LD_INT 5
 638: ARRAY
 639: PUSH
 640: LD_INT 0
 642: NONEQUAL
 643: IFFALSE 663
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 645: LD_VAR 0 4
 649: PPUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 5
 657: ARRAY
 658: PPUSH
 659: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 663: LD_EXP 14
 667: PPUSH
 668: LD_VAR 0 4
 672: PPUSH
 673: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 677: LD_ADDR_OWVAR 21
 681: PUSH
 682: LD_VAR 0 7
 686: PUSH
 687: LD_INT 6
 689: ARRAY
 690: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 691: LD_VAR 0 7
 695: PUSH
 696: LD_INT 1
 698: ARRAY
 699: PPUSH
 700: LD_VAR 0 7
 704: PUSH
 705: LD_INT 2
 707: ARRAY
 708: PPUSH
 709: LD_VAR 0 7
 713: PUSH
 714: LD_INT 3
 716: ARRAY
 717: PPUSH
 718: LD_VAR 0 7
 722: PUSH
 723: LD_INT 4
 725: ARRAY
 726: PPUSH
 727: LD_INT 60
 729: PPUSH
 730: LD_INT 80
 732: PPUSH
 733: CALL_OW 12
 737: PPUSH
 738: CALL 35250 0 5
// BurlakVeh := CreateVehicle ;
 742: LD_ADDR_VAR 0 5
 746: PUSH
 747: CALL_OW 45
 751: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 752: LD_VAR 0 5
 756: PPUSH
 757: LD_INT 1
 759: PPUSH
 760: LD_INT 0
 762: PPUSH
 763: CALL 67323 0 3
 767: NOT
 768: IFFALSE 788
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 770: LD_VAR 0 5
 774: PPUSH
 775: LD_INT 233
 777: PPUSH
 778: LD_INT 85
 780: PPUSH
 781: LD_INT 0
 783: PPUSH
 784: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 788: LD_VAR 0 7
 792: PUSH
 793: LD_INT 5
 795: ARRAY
 796: PUSH
 797: LD_INT 0
 799: NONEQUAL
 800: IFFALSE 820
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 802: LD_VAR 0 5
 806: PPUSH
 807: LD_VAR 0 7
 811: PUSH
 812: LD_INT 5
 814: ARRAY
 815: PPUSH
 816: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 820: LD_EXP 15
 824: PPUSH
 825: LD_VAR 0 5
 829: PPUSH
 830: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 834: LD_ADDR_VAR 0 2
 838: PUSH
 839: LD_INT 178
 841: PUSH
 842: LD_INT 91
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 137
 851: PUSH
 852: LD_INT 83
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 157
 861: PUSH
 862: LD_INT 75
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: LD_INT 162
 871: PUSH
 872: LD_INT 67
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: PUSH
 885: LD_OWVAR 67
 889: ARRAY
 890: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 891: LD_INT 4
 893: PPUSH
 894: LD_INT 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: PPUSH
 906: LD_VAR 0 2
 910: PUSH
 911: LD_INT 2
 913: ARRAY
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 58
// end ; end_of_file
 922: LD_VAR 0 1
 926: RET
// export function Action ; begin
 927: LD_INT 0
 929: PPUSH
// InGameOn ;
 930: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 934: LD_INT 221
 936: PPUSH
 937: LD_INT 80
 939: PPUSH
 940: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 944: LD_EXP 14
 948: PUSH
 949: LD_EXP 15
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PPUSH
 958: LD_INT 217
 960: PPUSH
 961: LD_INT 79
 963: PPUSH
 964: CALL_OW 111
// wait ( 0 0$7 ) ;
 968: LD_INT 245
 970: PPUSH
 971: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 975: LD_EXP 14
 979: PUSH
 980: LD_EXP 15
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PPUSH
 989: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 993: LD_EXP 15
 997: PPUSH
 998: LD_STRING D2-Bur-1
1000: PPUSH
1001: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1005: LD_EXP 14
1009: PPUSH
1010: LD_STRING D2-JMM-1
1012: PPUSH
1013: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1017: LD_INT 18
1019: PPUSH
1020: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1024: LD_EXP 15
1028: PPUSH
1029: LD_EXP 14
1033: PPUSH
1034: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1038: LD_EXP 15
1042: PPUSH
1043: LD_STRING D2-Bur-2
1045: PPUSH
1046: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1050: LD_EXP 15
1054: PPUSH
1055: LD_INT 21
1057: PUSH
1058: LD_INT 2
1060: PUSH
1061: EMPTY
1062: LIST
1063: LIST
1064: PPUSH
1065: CALL_OW 69
1069: PPUSH
1070: LD_EXP 15
1074: PPUSH
1075: CALL_OW 74
1079: PPUSH
1080: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1084: LD_EXP 14
1088: PPUSH
1089: LD_INT 21
1091: PUSH
1092: LD_INT 2
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: PPUSH
1099: CALL_OW 69
1103: PPUSH
1104: LD_EXP 14
1108: PPUSH
1109: CALL_OW 74
1113: PPUSH
1114: CALL_OW 120
// wait ( 0 0$1 ) ;
1118: LD_INT 35
1120: PPUSH
1121: CALL_OW 67
// InGameOff ;
1125: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1129: LD_STRING MArtPickup
1131: PPUSH
1132: CALL_OW 337
// end ;
1136: LD_VAR 0 1
1140: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1141: LD_EXP 22
1145: PPUSH
1146: LD_INT 101
1148: PUSH
1149: LD_INT 7
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PPUSH
1156: CALL_OW 72
1160: IFFALSE 1169
1162: PUSH
1163: LD_EXP 8
1167: NOT
1168: AND
1169: IFFALSE 1198
1171: GO 1173
1173: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1174: LD_EXP 15
1178: PPUSH
1179: LD_STRING D3-Bur-1
1181: PPUSH
1182: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1186: LD_EXP 14
1190: PPUSH
1191: LD_STRING D3-JMM-1
1193: PPUSH
1194: CALL_OW 88
// end ;
1198: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1199: LD_INT 5
1201: PPUSH
1202: LD_INT 22
1204: PUSH
1205: LD_INT 7
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PPUSH
1212: CALL_OW 70
1216: IFFALSE 1625
1218: GO 1220
1220: DISABLE
// begin wait ( 0 0$3 ) ;
1221: LD_INT 105
1223: PPUSH
1224: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1228: LD_INT 139
1230: PPUSH
1231: LD_INT 43
1233: PPUSH
1234: LD_INT 7
1236: PPUSH
1237: LD_INT 20
1239: NEG
1240: PPUSH
1241: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1245: LD_INT 139
1247: PPUSH
1248: LD_INT 43
1250: PPUSH
1251: LD_INT 7
1253: PPUSH
1254: CALL_OW 331
// DialogueOn ;
1258: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1262: LD_EXP 14
1266: PPUSH
1267: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1271: LD_EXP 14
1275: PPUSH
1276: LD_STRING D3a-JMM-1
1278: PPUSH
1279: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1283: LD_EXP 15
1287: PPUSH
1288: LD_STRING D3a-Bur-1
1290: PPUSH
1291: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1295: LD_EXP 14
1299: PPUSH
1300: LD_STRING D3a-JMM-2
1302: PPUSH
1303: CALL_OW 88
// if Joan then
1307: LD_EXP 16
1311: IFFALSE 1327
// SayRadio ( Joan , D3a-Joan-2 ) else
1313: LD_EXP 16
1317: PPUSH
1318: LD_STRING D3a-Joan-2
1320: PPUSH
1321: CALL_OW 94
1325: GO 1339
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1327: LD_EXP 17
1331: PPUSH
1332: LD_STRING D3a-RSci1-2
1334: PPUSH
1335: CALL_OW 94
// if LoadVariable ( 12a_PowellKilled , false ) then
1339: LD_STRING 12a_PowellKilled
1341: PPUSH
1342: LD_INT 0
1344: PPUSH
1345: CALL_OW 30
1349: IFFALSE 1413
// begin SayRadio ( Stevens , D3a-Huck-2a ) ;
1351: LD_EXP 18
1355: PPUSH
1356: LD_STRING D3a-Huck-2a
1358: PPUSH
1359: CALL_OW 94
// SayRadioNoFaceNoName ( Powell , D3a-Pow-2 ) ;
1363: LD_EXP 19
1367: PPUSH
1368: LD_STRING D3a-Pow-2
1370: PPUSH
1371: CALL 72675 0 2
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1375: LD_EXP 18
1379: PPUSH
1380: LD_STRING D3a-Huck-3
1382: PPUSH
1383: CALL_OW 94
// SayRadioNoFaceNoName ( Powell , D3a-Pow-3 ) ;
1387: LD_EXP 19
1391: PPUSH
1392: LD_STRING D3a-Pow-3
1394: PPUSH
1395: CALL 72675 0 2
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1399: LD_EXP 18
1403: PPUSH
1404: LD_STRING D3a-Huck-4
1406: PPUSH
1407: CALL_OW 94
// end else
1411: GO 1473
// begin SayRadio ( Stevens , D3a-Huck-2 ) ;
1413: LD_EXP 18
1417: PPUSH
1418: LD_STRING D3a-Huck-2
1420: PPUSH
1421: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1425: LD_EXP 19
1429: PPUSH
1430: LD_STRING D3a-Pow-2
1432: PPUSH
1433: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1437: LD_EXP 18
1441: PPUSH
1442: LD_STRING D3a-Huck-3
1444: PPUSH
1445: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1449: LD_EXP 19
1453: PPUSH
1454: LD_STRING D3a-Pow-3
1456: PPUSH
1457: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1461: LD_EXP 18
1465: PPUSH
1466: LD_STRING D3a-Huck-4
1468: PPUSH
1469: CALL_OW 94
// end ; Say ( JMM , D3a-JMM-4 ) ;
1473: LD_EXP 14
1477: PPUSH
1478: LD_STRING D3a-JMM-4
1480: PPUSH
1481: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1485: LD_EXP 15
1489: PPUSH
1490: LD_STRING D3a-Bur-4
1492: PPUSH
1493: CALL_OW 88
// if Joan then
1497: LD_EXP 16
1501: IFFALSE 1517
// SayRadio ( Joan , D3a-Joan-4 ) else
1503: LD_EXP 16
1507: PPUSH
1508: LD_STRING D3a-Joan-4
1510: PPUSH
1511: CALL_OW 94
1515: GO 1529
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1517: LD_EXP 17
1521: PPUSH
1522: LD_STRING D3a-RSci1-4
1524: PPUSH
1525: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1529: LD_INT 133
1531: PPUSH
1532: LD_INT 43
1534: PPUSH
1535: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1539: LD_INT 10
1541: PPUSH
1542: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1546: LD_EXP 14
1550: PPUSH
1551: LD_STRING D3a-JMM-5
1553: PPUSH
1554: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1558: LD_EXP 15
1562: PPUSH
1563: LD_STRING D3a-Bur-5
1565: PPUSH
1566: CALL_OW 88
// DialogueOff ;
1570: CALL_OW 7
// seenBase := true ;
1574: LD_ADDR_EXP 8
1578: PUSH
1579: LD_INT 1
1581: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1582: LD_INT 525
1584: PUSH
1585: LD_INT 420
1587: PUSH
1588: LD_INT 315
1590: PUSH
1591: LD_INT 280
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: PUSH
1600: LD_OWVAR 67
1604: ARRAY
1605: PPUSH
1606: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1610: LD_EXP 21
1614: PPUSH
1615: LD_INT 142
1617: PPUSH
1618: LD_INT 52
1620: PPUSH
1621: CALL_OW 116
// end ;
1625: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1626: LD_EXP 8
1630: NOT
1631: IFFALSE 1640
1633: PUSH
1634: LD_EXP 4
1638: NOT
1639: AND
1640: IFFALSE 1660
1642: GO 1644
1644: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1645: LD_EXP 21
1649: PPUSH
1650: LD_INT 142
1652: PPUSH
1653: LD_INT 52
1655: PPUSH
1656: CALL_OW 116
1660: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1661: LD_INT 0
1663: PPUSH
1664: PPUSH
// contaminateTime := tick ;
1665: LD_ADDR_EXP 3
1669: PUSH
1670: LD_OWVAR 1
1674: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1675: LD_INT 175
1677: PPUSH
1678: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1682: LD_ADDR_VAR 0 5
1686: PUSH
1687: LD_INT 4
1689: PPUSH
1690: CALL_OW 469
1694: ST_TO_ADDR
// if art then
1695: LD_VAR 0 5
1699: IFFALSE 1754
// if art [ 1 ] in [ 157 , 162 ] and art [ 2 ] in [ 75 , 67 ] then
1701: LD_VAR 0 5
1705: PUSH
1706: LD_INT 1
1708: ARRAY
1709: PUSH
1710: LD_INT 157
1712: PUSH
1713: LD_INT 162
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: IN
1720: IFFALSE 1743
1722: PUSH
1723: LD_VAR 0 5
1727: PUSH
1728: LD_INT 2
1730: ARRAY
1731: PUSH
1732: LD_INT 75
1734: PUSH
1735: LD_INT 67
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: IN
1742: AND
1743: IFFALSE 1754
// begin YouLost ( Artefact ) ;
1745: LD_STRING Artefact
1747: PPUSH
1748: CALL_OW 104
// exit ;
1752: GO 1933
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1754: LD_EXP 14
1758: PPUSH
1759: CALL_OW 302
1763: IFFALSE 1776
1765: PUSH
1766: LD_EXP 15
1770: PPUSH
1771: CALL_OW 302
1775: AND
1776: IFFALSE 1866
// begin DialogueOn ;
1778: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1782: LD_EXP 14
1786: PPUSH
1787: LD_STRING D6a-JMM-1
1789: PPUSH
1790: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1794: LD_EXP 15
1798: PPUSH
1799: LD_STRING D6a-Bur-1
1801: PPUSH
1802: CALL_OW 88
// if not LoadVariable ( 12a_PowellKilled , false ) then
1806: LD_STRING 12a_PowellKilled
1808: PPUSH
1809: LD_INT 0
1811: PPUSH
1812: CALL_OW 30
1816: NOT
1817: IFFALSE 1855
// begin Say ( JMM , D6c-JMM-1 ) ;
1819: LD_EXP 14
1823: PPUSH
1824: LD_STRING D6c-JMM-1
1826: PPUSH
1827: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1831: LD_EXP 15
1835: PPUSH
1836: LD_STRING D6c-Bur-1
1838: PPUSH
1839: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1843: LD_EXP 14
1847: PPUSH
1848: LD_STRING D6c-JMM-2
1850: PPUSH
1851: CALL_OW 88
// end ; ChangeMissionObjectives ( MBase ) ;
1855: LD_STRING MBase
1857: PPUSH
1858: CALL_OW 337
// DialogueOff ;
1862: CALL_OW 7
// end ; bombExploded := true ;
1866: LD_ADDR_EXP 4
1870: PUSH
1871: LD_INT 1
1873: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1874: LD_INT 6300
1876: PUSH
1877: LD_INT 5250
1879: PUSH
1880: LD_INT 4200
1882: PUSH
1883: LD_INT 3500
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: PUSH
1892: LD_OWVAR 67
1896: ARRAY
1897: PPUSH
1898: CALL_OW 67
// if planCaptured then
1902: LD_EXP 7
1906: IFFALSE 1910
// exit ;
1908: GO 1933
// if IsOk ( JMM ) then
1910: LD_EXP 14
1914: PPUSH
1915: CALL_OW 302
1919: IFFALSE 1933
// Say ( JMM , D8-JMM-1 ) ;
1921: LD_EXP 14
1925: PPUSH
1926: LD_STRING D8-JMM-1
1928: PPUSH
1929: CALL_OW 88
// end ;
1933: LD_VAR 0 4
1937: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1938: LD_EXP 9
1942: IFFALSE 1951
1944: PUSH
1945: LD_EXP 7
1949: NOT
1950: AND
1951: IFFALSE 1959
1953: PUSH
1954: LD_EXP 4
1958: AND
1959: IFFALSE 2014
1961: GO 1963
1963: DISABLE
// begin enable ;
1964: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1965: LD_INT 9
1967: PPUSH
1968: LD_INT 22
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PPUSH
1978: CALL_OW 70
1982: IFFALSE 2000
// stevensTimer := stevensTimer - 0 0$30 else
1984: LD_ADDR_EXP 9
1988: PUSH
1989: LD_EXP 9
1993: PUSH
1994: LD_INT 1050
1996: MINUS
1997: ST_TO_ADDR
1998: GO 2014
// stevensTimer := stevensTimer - 0 0$1 ;
2000: LD_ADDR_EXP 9
2004: PUSH
2005: LD_EXP 9
2009: PUSH
2010: LD_INT 35
2012: MINUS
2013: ST_TO_ADDR
// end ;
2014: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
2015: LD_EXP 9
2019: PUSH
2020: LD_INT 0
2022: LESSEQUAL
2023: IFFALSE 2032
2025: PUSH
2026: LD_EXP 7
2030: NOT
2031: AND
2032: IFFALSE 2196
2034: GO 2036
2036: DISABLE
2037: LD_INT 0
2039: PPUSH
2040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2041: LD_ADDR_VAR 0 2
2045: PUSH
2046: LD_INT 22
2048: PUSH
2049: LD_INT 1
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: PUSH
2056: LD_INT 25
2058: PUSH
2059: LD_INT 4
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL_OW 69
2074: ST_TO_ADDR
// for i in tmp do
2075: LD_ADDR_VAR 0 1
2079: PUSH
2080: LD_VAR 0 2
2084: PUSH
2085: FOR_IN
2086: IFFALSE 2139
// begin if IsInUnit ( i ) then
2088: LD_VAR 0 1
2092: PPUSH
2093: CALL_OW 310
2097: IFFALSE 2110
// ComExitBuilding ( i ) else
2099: LD_VAR 0 1
2103: PPUSH
2104: CALL_OW 122
2108: GO 2137
// if not HasTask ( i ) then
2110: LD_VAR 0 1
2114: PPUSH
2115: CALL_OW 314
2119: NOT
2120: IFFALSE 2137
// ComMoveXY ( i , 29 , 56 ) ;
2122: LD_VAR 0 1
2126: PPUSH
2127: LD_INT 29
2129: PPUSH
2130: LD_INT 56
2132: PPUSH
2133: CALL_OW 111
// end ;
2137: GO 2085
2139: POP
2140: POP
// repeat wait ( 0 0$1 ) ;
2141: LD_INT 35
2143: PPUSH
2144: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2148: LD_INT 8
2150: PPUSH
2151: LD_INT 22
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: PUSH
2161: LD_INT 25
2163: PUSH
2164: LD_INT 4
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PPUSH
2175: CALL_OW 70
2179: IFFALSE 2141
// if planCaptured then
2181: LD_EXP 7
2185: IFFALSE 2189
// exit ;
2187: GO 2196
// YouLost ( Time ) ;
2189: LD_STRING Time
2191: PPUSH
2192: CALL_OW 104
// end ;
2196: PPOPN 2
2198: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2199: LD_INT 22
2201: PUSH
2202: LD_INT 7
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 92
2211: PUSH
2212: LD_INT 142
2214: PUSH
2215: LD_INT 52
2217: PUSH
2218: LD_INT 27
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: PPUSH
2231: CALL_OW 69
2235: IFFALSE 2253
2237: PUSH
2238: LD_EXP 3
2242: PUSH
2243: LD_INT 6000
2245: PLUS
2246: PUSH
2247: LD_OWVAR 1
2251: GREATER
2252: AND
2253: IFFALSE 2261
2255: PUSH
2256: LD_EXP 4
2260: AND
2261: IFFALSE 2316
2263: GO 2265
2265: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2266: LD_EXP 14
2270: PUSH
2271: LD_EXP 15
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PPUSH
2280: CALL_OW 85
// DialogueOn ;
2284: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2288: LD_EXP 14
2292: PPUSH
2293: LD_STRING D6b-JMM-1
2295: PPUSH
2296: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2300: LD_EXP 15
2304: PPUSH
2305: LD_STRING D6b-Bur-1
2307: PPUSH
2308: CALL_OW 88
// DialogueOff ;
2312: CALL_OW 7
// end ;
2316: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2317: LD_EXP 15
2321: PPUSH
2322: LD_INT 142
2324: PPUSH
2325: LD_INT 52
2327: PPUSH
2328: CALL_OW 297
2332: PUSH
2333: LD_INT 25
2335: LESS
2336: IFTRUE 2364
2338: PUSH
2339: LD_EXP 15
2343: PPUSH
2344: CALL_OW 310
2348: PPUSH
2349: LD_INT 142
2351: PPUSH
2352: LD_INT 52
2354: PPUSH
2355: CALL_OW 297
2359: PUSH
2360: LD_INT 25
2362: LESS
2363: OR
2364: IFFALSE 2381
2366: PUSH
2367: LD_EXP 15
2371: PPUSH
2372: CALL_OW 256
2376: PUSH
2377: LD_INT 1000
2379: LESS
2380: AND
2381: IFFALSE 2399
2383: PUSH
2384: LD_EXP 3
2388: PUSH
2389: LD_INT 6000
2391: PLUS
2392: PUSH
2393: LD_OWVAR 1
2397: GREATER
2398: AND
2399: IFFALSE 2407
2401: PUSH
2402: LD_EXP 4
2406: AND
2407: IFFALSE 2440
2409: GO 2411
2411: DISABLE
// begin DialogueOn ;
2412: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2416: LD_EXP 15
2420: PPUSH
2421: LD_STRING D7-Bur-1
2423: PPUSH
2424: CALL_OW 88
// enteredContaminatedArea := true ;
2428: LD_ADDR_EXP 5
2432: PUSH
2433: LD_INT 1
2435: ST_TO_ADDR
// DialogueOff ;
2436: CALL_OW 7
// end ;
2440: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2441: LD_EXP 14
2445: PPUSH
2446: LD_INT 142
2448: PPUSH
2449: LD_INT 52
2451: PPUSH
2452: CALL_OW 297
2456: PUSH
2457: LD_INT 25
2459: LESS
2460: IFTRUE 2488
2462: PUSH
2463: LD_EXP 14
2467: PPUSH
2468: CALL_OW 310
2472: PPUSH
2473: LD_INT 142
2475: PPUSH
2476: LD_INT 52
2478: PPUSH
2479: CALL_OW 297
2483: PUSH
2484: LD_INT 25
2486: LESS
2487: OR
2488: IFFALSE 2505
2490: PUSH
2491: LD_EXP 14
2495: PPUSH
2496: CALL_OW 256
2500: PUSH
2501: LD_INT 1000
2503: LESS
2504: AND
2505: IFFALSE 2523
2507: PUSH
2508: LD_EXP 3
2512: PUSH
2513: LD_INT 6000
2515: PLUS
2516: PUSH
2517: LD_OWVAR 1
2521: GREATER
2522: AND
2523: IFFALSE 2531
2525: PUSH
2526: LD_EXP 4
2530: AND
2531: IFFALSE 2564
2533: GO 2535
2535: DISABLE
// begin DialogueOn ;
2536: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2540: LD_EXP 14
2544: PPUSH
2545: LD_STRING D7-JMM-1
2547: PPUSH
2548: CALL_OW 88
// enteredContaminatedArea := true ;
2552: LD_ADDR_EXP 5
2556: PUSH
2557: LD_INT 1
2559: ST_TO_ADDR
// DialogueOff ;
2560: CALL_OW 7
// end ;
2564: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2565: LD_EXP 6
2569: IFFALSE 2582
2571: PUSH
2572: LD_EXP 14
2576: PPUSH
2577: CALL_OW 302
2581: AND
2582: IFFALSE 2595
2584: PUSH
2585: LD_EXP 15
2589: PPUSH
2590: CALL_OW 302
2594: AND
2595: IFFALSE 2664
2597: GO 2599
2599: DISABLE
// begin DialogueOn ;
2600: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2604: LD_EXP 14
2608: PUSH
2609: LD_EXP 15
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: PPUSH
2618: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2622: LD_EXP 14
2626: PPUSH
2627: LD_STRING D4-JMM-1
2629: PPUSH
2630: CALL_OW 88
// if not bombExploded then
2634: LD_EXP 4
2638: NOT
2639: IFFALSE 2653
// Say ( Burlak , D4-Bur-1 ) ;
2641: LD_EXP 15
2645: PPUSH
2646: LD_STRING D4-Bur-1
2648: PPUSH
2649: CALL_OW 88
// DialogueOff ;
2653: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2657: LD_STRING MReturn
2659: PPUSH
2660: CALL_OW 337
// end ;
2664: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2665: LD_EXP 7
2669: NOT
2670: IFFALSE 2706
2672: PUSH
2673: LD_INT 22
2675: PUSH
2676: LD_INT 7
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: LD_INT 91
2685: PUSH
2686: LD_INT 9
2688: PUSH
2689: LD_INT 6
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: LIST
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PPUSH
2701: CALL_OW 69
2705: AND
2706: IFFALSE 2783
2708: GO 2710
2710: DISABLE
// begin DialogueOn ;
2711: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2715: LD_INT 55
2717: PPUSH
2718: LD_INT 11
2720: PPUSH
2721: LD_INT 7
2723: PPUSH
2724: LD_INT 6
2726: NEG
2727: PPUSH
2728: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2732: LD_INT 55
2734: PPUSH
2735: LD_INT 11
2737: PPUSH
2738: LD_INT 7
2740: PPUSH
2741: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2745: LD_EXP 15
2749: PPUSH
2750: LD_STRING D9-Bur-1
2752: PPUSH
2753: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2757: LD_EXP 14
2761: PPUSH
2762: LD_STRING D9-JMM-1
2764: PPUSH
2765: CALL_OW 88
// DialogueOff ;
2769: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2773: LD_INT 9
2775: PPUSH
2776: LD_INT 7
2778: PPUSH
2779: CALL_OW 235
// end ;
2783: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2784: LD_INT 9
2786: PPUSH
2787: LD_INT 22
2789: PUSH
2790: LD_INT 7
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PPUSH
2797: CALL_OW 70
2801: IFFALSE 2837
2803: GO 2805
2805: DISABLE
// begin wait ( 0 0$07 ) ;
2806: LD_INT 245
2808: PPUSH
2809: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2813: LD_EXP 14
2817: PPUSH
2818: LD_STRING D10b-JMM-1
2820: PPUSH
2821: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2825: LD_EXP 15
2829: PPUSH
2830: LD_STRING D10b-Bur-1
2832: PPUSH
2833: CALL_OW 88
// end ;
2837: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2838: LD_EXP 9
2842: IFFALSE 2885
2844: PUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 25
2857: PUSH
2858: LD_INT 4
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: LD_INT 26
2867: PUSH
2868: LD_INT 1
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: AND
2885: IFFALSE 2936
2887: PUSH
2888: LD_INT 5
2890: PPUSH
2891: CALL_OW 255
2895: PUSH
2896: LD_INT 7
2898: EQUAL
2899: IFTRUE 2935
2901: PUSH
2902: LD_INT 22
2904: PUSH
2905: LD_INT 1
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 25
2914: PUSH
2915: LD_INT 1
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: PPUSH
2926: CALL_OW 69
2930: PUSH
2931: LD_INT 0
2933: EQUAL
2934: OR
2935: AND
2936: IFFALSE 3607
2938: GO 2940
2940: DISABLE
2941: LD_INT 0
2943: PPUSH
// begin case Query ( QKill ) of 1 :
2944: LD_STRING QKill
2946: PPUSH
2947: CALL_OW 97
2951: PUSH
2952: LD_INT 1
2954: DOUBLE
2955: EQUAL
2956: IFTRUE 2960
2958: GO 3595
2960: POP
// begin DialogueOn ;
2961: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2965: LD_EXP 14
2969: PPUSH
2970: LD_STRING D10a-JMM-1
2972: PPUSH
2973: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2977: LD_EXP 15
2981: PPUSH
2982: LD_STRING D10a-Bur-1
2984: PPUSH
2985: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2989: LD_EXP 14
2993: PPUSH
2994: LD_STRING D10a-JMM-2
2996: PPUSH
2997: CALL_OW 88
// if IsOk ( Stevens ) then
3001: LD_EXP 18
3005: PPUSH
3006: CALL_OW 302
3010: IFFALSE 3026
// Say ( Stevens , D10a-Huck-2 ) else
3012: LD_EXP 18
3016: PPUSH
3017: LD_STRING D10a-Huck-2
3019: PPUSH
3020: CALL_OW 88
3024: GO 3159
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) then
3026: LD_INT 22
3028: PUSH
3029: LD_INT 1
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PUSH
3036: LD_INT 25
3038: PUSH
3039: LD_INT 4
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PUSH
3046: LD_INT 26
3048: PUSH
3049: LD_INT 1
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: LIST
3060: PPUSH
3061: CALL_OW 69
3065: NOT
3066: IFFALSE 3108
// begin uc_side := 1 ;
3068: LD_ADDR_OWVAR 20
3072: PUSH
3073: LD_INT 1
3075: ST_TO_ADDR
// uc_nation := 1 ;
3076: LD_ADDR_OWVAR 21
3080: PUSH
3081: LD_INT 1
3083: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
3084: LD_INT 1
3086: PPUSH
3087: LD_INT 10
3089: PPUSH
3090: CALL_OW 384
// Say ( CreateHuman , D10a-ASci1-3 ) ;
3094: CALL_OW 44
3098: PPUSH
3099: LD_STRING D10a-ASci1-3
3101: PPUSH
3102: CALL_OW 88
// end else
3106: GO 3159
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
3108: LD_INT 22
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 25
3120: PUSH
3121: LD_INT 4
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 26
3130: PUSH
3131: LD_INT 1
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PPUSH
3143: CALL_OW 69
3147: PUSH
3148: LD_INT 1
3150: ARRAY
3151: PPUSH
3152: LD_STRING D10a-ASci1-3
3154: PPUSH
3155: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
3159: LD_EXP 14
3163: PPUSH
3164: LD_STRING D10a-JMM-4
3166: PPUSH
3167: CALL_OW 88
// if IsOk ( Stevens ) then
3171: LD_EXP 18
3175: PPUSH
3176: CALL_OW 302
3180: IFFALSE 3194
// Say ( Stevens , D10a-Huck-3 ) ;
3182: LD_EXP 18
3186: PPUSH
3187: LD_STRING D10a-Huck-3
3189: PPUSH
3190: CALL_OW 88
// DialogueOff ;
3194: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
3198: LD_INT 1
3200: PPUSH
3201: LD_INT 7
3203: PPUSH
3204: LD_INT 1
3206: PPUSH
3207: LD_INT 1
3209: PPUSH
3210: CALL_OW 80
// planCaptured := true ;
3214: LD_ADDR_EXP 7
3218: PUSH
3219: LD_INT 1
3221: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
3222: LD_STRING MEnd
3224: PPUSH
3225: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
3229: LD_STRING ACH_DIPLOMACY
3231: PPUSH
3232: CALL_OW 543
// canEnd := true ;
3236: LD_ADDR_EXP 10
3240: PUSH
3241: LD_INT 1
3243: ST_TO_ADDR
// missionTime := tick ;
3244: LD_ADDR_EXP 11
3248: PUSH
3249: LD_OWVAR 1
3253: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3254: LD_INT 35
3256: PPUSH
3257: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3261: LD_INT 22
3263: PUSH
3264: LD_INT 1
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 3
3273: PUSH
3274: LD_INT 50
3276: PUSH
3277: EMPTY
3278: LIST
3279: PUSH
3280: EMPTY
3281: LIST
3282: LIST
3283: PUSH
3284: EMPTY
3285: LIST
3286: LIST
3287: PPUSH
3288: CALL_OW 69
3292: IFFALSE 3408
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3294: LD_ADDR_VAR 0 1
3298: PUSH
3299: LD_INT 22
3301: PUSH
3302: LD_INT 1
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: LD_INT 25
3311: PUSH
3312: LD_INT 4
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PPUSH
3323: CALL_OW 69
3327: PUSH
3328: FOR_IN
3329: IFFALSE 3406
// begin if IsInUnit ( i ) then
3331: LD_VAR 0 1
3335: PPUSH
3336: CALL_OW 310
3340: IFFALSE 3353
// ComExitBuilding ( i ) else
3342: LD_VAR 0 1
3346: PPUSH
3347: CALL_OW 122
3351: GO 3404
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3353: LD_VAR 0 1
3357: PPUSH
3358: LD_INT 22
3360: PUSH
3361: LD_INT 1
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: PUSH
3368: LD_INT 3
3370: PUSH
3371: LD_INT 50
3373: PUSH
3374: EMPTY
3375: LIST
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PPUSH
3385: CALL_OW 69
3389: PPUSH
3390: LD_VAR 0 1
3394: PPUSH
3395: CALL_OW 74
3399: PPUSH
3400: CALL_OW 128
// end ;
3404: GO 3328
3406: POP
3407: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3408: LD_INT 22
3410: PUSH
3411: LD_INT 1
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: LD_INT 3
3420: PUSH
3421: LD_INT 50
3423: PUSH
3424: EMPTY
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PPUSH
3435: CALL_OW 69
3439: NOT
3440: IFFALSE 3254
// repeat wait ( 3 ) ;
3442: LD_INT 3
3444: PPUSH
3445: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3449: LD_ADDR_VAR 0 1
3453: PUSH
3454: LD_INT 22
3456: PUSH
3457: LD_INT 1
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: PUSH
3464: LD_INT 21
3466: PUSH
3467: LD_INT 1
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: PPUSH
3478: CALL_OW 69
3482: PUSH
3483: FOR_IN
3484: IFFALSE 3560
// begin if IsInArea ( i , stevensEscapeArea ) then
3486: LD_VAR 0 1
3490: PPUSH
3491: LD_INT 8
3493: PPUSH
3494: CALL_OW 308
3498: IFFALSE 3511
// begin RemoveUnit ( i ) ;
3500: LD_VAR 0 1
3504: PPUSH
3505: CALL_OW 64
// continue ;
3509: GO 3483
// end ; if IsInUnit ( i ) then
3511: LD_VAR 0 1
3515: PPUSH
3516: CALL_OW 310
3520: IFFALSE 3531
// ComExitBuilding ( i ) ;
3522: LD_VAR 0 1
3526: PPUSH
3527: CALL_OW 122
// if not HasTask ( i ) then
3531: LD_VAR 0 1
3535: PPUSH
3536: CALL_OW 314
3540: NOT
3541: IFFALSE 3558
// ComMoveXY ( i , 28 , 55 ) ;
3543: LD_VAR 0 1
3547: PPUSH
3548: LD_INT 28
3550: PPUSH
3551: LD_INT 55
3553: PPUSH
3554: CALL_OW 111
// end ;
3558: GO 3483
3560: POP
3561: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3562: LD_INT 22
3564: PUSH
3565: LD_INT 1
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: PUSH
3572: LD_INT 21
3574: PUSH
3575: LD_INT 1
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PPUSH
3586: CALL_OW 69
3590: NOT
3591: IFFALSE 3442
// end ; 2 :
3593: GO 3607
3595: LD_INT 2
3597: DOUBLE
3598: EQUAL
3599: IFTRUE 3603
3601: GO 3606
3603: POP
// ; end ;
3604: GO 3607
3606: POP
// end ;
3607: PPOPN 1
3609: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3610: LD_EXP 10
3614: IFFALSE 3971
3616: GO 3618
3618: DISABLE
3619: LD_INT 0
3621: PPUSH
3622: PPUSH
3623: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3624: LD_INT 10
3626: PPUSH
3627: LD_INT 1
3629: PPUSH
3630: CALL_OW 424
// if Difficulty < 2 then
3634: LD_OWVAR 67
3638: PUSH
3639: LD_INT 2
3641: LESS
3642: IFFALSE 3646
// exit ;
3644: GO 3971
// uc_side := 4 ;
3646: LD_ADDR_OWVAR 20
3650: PUSH
3651: LD_INT 4
3653: ST_TO_ADDR
// uc_nation := 1 ;
3654: LD_ADDR_OWVAR 21
3658: PUSH
3659: LD_INT 1
3661: ST_TO_ADDR
// InitHc ;
3662: CALL_OW 19
// tmp := [ ] ;
3666: LD_ADDR_VAR 0 3
3670: PUSH
3671: EMPTY
3672: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3673: LD_INT 0
3675: PPUSH
3676: LD_INT 5
3678: PPUSH
3679: LD_INT 10
3681: PPUSH
3682: CALL_OW 380
// un := CreateHuman ;
3686: LD_ADDR_VAR 0 1
3690: PUSH
3691: CALL_OW 44
3695: ST_TO_ADDR
// tmp := [ un ] ;
3696: LD_ADDR_VAR 0 3
3700: PUSH
3701: LD_VAR 0 1
3705: PUSH
3706: EMPTY
3707: LIST
3708: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3709: LD_VAR 0 1
3713: PPUSH
3714: LD_INT 226
3716: PPUSH
3717: LD_INT 86
3719: PPUSH
3720: LD_INT 0
3722: PPUSH
3723: CALL_OW 48
// ComHold ( un ) ;
3727: LD_VAR 0 1
3731: PPUSH
3732: CALL_OW 140
// for i = 1 to 3 do
3736: LD_ADDR_VAR 0 2
3740: PUSH
3741: DOUBLE
3742: LD_INT 1
3744: DEC
3745: ST_TO_ADDR
3746: LD_INT 3
3748: PUSH
3749: FOR_TO
3750: IFFALSE 3849
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3752: LD_INT 0
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_INT 8
3760: PPUSH
3761: CALL_OW 380
// un := CreateHuman ;
3765: LD_ADDR_VAR 0 1
3769: PUSH
3770: CALL_OW 44
3774: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3775: LD_VAR 0 1
3779: PPUSH
3780: LD_INT 5
3782: PPUSH
3783: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3787: LD_VAR 0 1
3791: PPUSH
3792: LD_INT 215
3794: PUSH
3795: LD_INT 217
3797: PUSH
3798: LD_INT 219
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: PUSH
3806: LD_VAR 0 2
3810: ARRAY
3811: PPUSH
3812: LD_INT 76
3814: PPUSH
3815: LD_INT 0
3817: PPUSH
3818: CALL_OW 48
// ComCrawl ( un ) ;
3822: LD_VAR 0 1
3826: PPUSH
3827: CALL_OW 137
// tmp := tmp ^ un ;
3831: LD_ADDR_VAR 0 3
3835: PUSH
3836: LD_VAR 0 3
3840: PUSH
3841: LD_VAR 0 1
3845: ADD
3846: ST_TO_ADDR
// end ;
3847: GO 3749
3849: POP
3850: POP
// repeat wait ( 0 0$1 ) ;
3851: LD_INT 35
3853: PPUSH
3854: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3858: LD_VAR 0 3
3862: PPUSH
3863: LD_INT 24
3865: PUSH
3866: LD_INT 1000
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: PPUSH
3873: CALL_OW 72
3877: NOT
3878: IFFALSE 3851
// for i in tmp do
3880: LD_ADDR_VAR 0 2
3884: PUSH
3885: LD_VAR 0 3
3889: PUSH
3890: FOR_IN
3891: IFFALSE 3969
// begin wait ( 0 0$1 ) ;
3893: LD_INT 35
3895: PPUSH
3896: CALL_OW 67
// if Crawls ( i ) then
3900: LD_VAR 0 2
3904: PPUSH
3905: CALL_OW 318
3909: IFFALSE 3922
// ComWalk ( i ) else
3911: LD_VAR 0 2
3915: PPUSH
3916: CALL_OW 138
3920: GO 3967
// if GetClass ( i ) = class_sniper then
3922: LD_VAR 0 2
3926: PPUSH
3927: CALL_OW 257
3931: PUSH
3932: LD_INT 5
3934: EQUAL
3935: IFFALSE 3953
// ComAttackSoporific ( i , JMM ) else
3937: LD_VAR 0 2
3941: PPUSH
3942: LD_EXP 14
3946: PPUSH
3947: CALL_OW 166
3951: GO 3967
// ComAttackUnit ( i , JMM ) ;
3953: LD_VAR 0 2
3957: PPUSH
3958: LD_EXP 14
3962: PPUSH
3963: CALL_OW 115
// end ;
3967: GO 3890
3969: POP
3970: POP
// end ;
3971: PPOPN 3
3973: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3974: LD_EXP 7
3978: NOT
3979: IFFALSE 3990
3981: PUSH
3982: LD_INT 1
3984: PPUSH
3985: CALL_OW 301
3989: AND
3990: IFFALSE 4002
3992: GO 3994
3994: DISABLE
// YouLost ( Lab ) ;
3995: LD_STRING Lab
3997: PPUSH
3998: CALL_OW 104
4002: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ [ f_not , [ f_empty ] ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
4003: LD_INT 10
4005: PPUSH
4006: LD_INT 22
4008: PUSH
4009: LD_INT 7
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PPUSH
4016: CALL_OW 70
4020: PUSH
4021: LD_INT 2
4023: GREATEREQUAL
4024: IFFALSE 4080
4026: PUSH
4027: LD_INT 10
4029: PPUSH
4030: LD_INT 3
4032: PUSH
4033: LD_INT 58
4035: PUSH
4036: EMPTY
4037: LIST
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 2
4045: PUSH
4046: LD_INT 34
4048: PUSH
4049: LD_INT 12
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: PUSH
4056: LD_INT 34
4058: PUSH
4059: LD_INT 51
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: LIST
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PPUSH
4075: CALL_OW 70
4079: AND
4080: IFFALSE 4088
4082: PUSH
4083: LD_EXP 10
4087: AND
4088: IFFALSE 4096
4090: PUSH
4091: LD_EXP 7
4095: AND
4096: IFFALSE 4104
4098: PUSH
4099: LD_EXP 6
4103: AND
4104: IFFALSE 4375
4106: GO 4108
4108: DISABLE
4109: LD_INT 0
4111: PPUSH
4112: PPUSH
// begin m1 := false ;
4113: LD_ADDR_VAR 0 1
4117: PUSH
4118: LD_INT 0
4120: ST_TO_ADDR
// m2 := false ;
4121: LD_ADDR_VAR 0 2
4125: PUSH
4126: LD_INT 0
4128: ST_TO_ADDR
// if killCounter = 0 then
4129: LD_EXP 12
4133: PUSH
4134: LD_INT 0
4136: EQUAL
4137: IFFALSE 4146
// SetAchievement ( ACH_PACIFIST ) ;
4139: LD_STRING ACH_PACIFIST
4141: PPUSH
4142: CALL_OW 543
// if tick < 7 7$00 then
4146: LD_OWVAR 1
4150: PUSH
4151: LD_INT 14700
4153: LESS
4154: IFFALSE 4170
// begin wait ( 3 ) ;
4156: LD_INT 3
4158: PPUSH
4159: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
4163: LD_STRING ACH_ASPEED_18
4165: PPUSH
4166: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
4170: LD_STRING Explosion
4172: PPUSH
4173: LD_INT 1
4175: PPUSH
4176: CALL_OW 101
// if enteredContaminatedArea then
4180: LD_EXP 5
4184: IFFALSE 4206
// begin m1 := true ;
4186: LD_ADDR_VAR 0 1
4190: PUSH
4191: LD_INT 1
4193: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
4194: LD_STRING BioHazard
4196: PPUSH
4197: LD_INT 1
4199: PPUSH
4200: CALL_OW 101
// end else
4204: GO 4217
// AddMedal ( BioHazard , - 1 ) ;
4206: LD_STRING BioHazard
4208: PPUSH
4209: LD_INT 1
4211: NEG
4212: PPUSH
4213: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
4217: LD_EXP 11
4221: PUSH
4222: LD_INT 42000
4224: PUSH
4225: LD_INT 31500
4227: PUSH
4228: LD_INT 25200
4230: PUSH
4231: LD_INT 24150
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: PUSH
4240: LD_OWVAR 67
4244: ARRAY
4245: LESSEQUAL
4246: IFFALSE 4268
// begin m2 := true ;
4248: LD_ADDR_VAR 0 2
4252: PUSH
4253: LD_INT 1
4255: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
4256: LD_STRING Speed
4258: PPUSH
4259: LD_INT 1
4261: PPUSH
4262: CALL_OW 101
// end else
4266: GO 4279
// AddMedal ( Speed , - 1 ) ;
4268: LD_STRING Speed
4270: PPUSH
4271: LD_INT 1
4273: NEG
4274: PPUSH
4275: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4279: LD_OWVAR 67
4283: PUSH
4284: LD_INT 3
4286: GREATEREQUAL
4287: IFFALSE 4295
4289: PUSH
4290: LD_VAR 0 1
4294: AND
4295: IFFALSE 4303
4297: PUSH
4298: LD_VAR 0 2
4302: AND
4303: IFFALSE 4315
// SetAchievementEX ( ACH_AMER , 18 ) ;
4305: LD_STRING ACH_AMER
4307: PPUSH
4308: LD_INT 18
4310: PPUSH
4311: CALL_OW 564
// GiveMedals ( Main ) ;
4315: LD_STRING Main
4317: PPUSH
4318: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4322: LD_EXP 14
4326: PUSH
4327: LD_EXP 15
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PPUSH
4336: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4340: LD_EXP 14
4344: PPUSH
4345: LD_STRING 14a_JMM
4347: PPUSH
4348: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4352: LD_EXP 15
4356: PPUSH
4357: LD_STRING 14a_Burlak
4359: PPUSH
4360: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
4364: LD_STRING enableBioCharacter(BIO_HUGH)
4366: PPUSH
4367: CALL_OW 559
// YouWin ;
4371: CALL_OW 103
// end ; end_of_file
4375: PPOPN 2
4377: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4378: LD_INT 0
4380: PPUSH
4381: PPUSH
4382: PPUSH
4383: PPUSH
// uc_side := 1 ;
4384: LD_ADDR_OWVAR 20
4388: PUSH
4389: LD_INT 1
4391: ST_TO_ADDR
// uc_nation := 1 ;
4392: LD_ADDR_OWVAR 21
4396: PUSH
4397: LD_INT 1
4399: ST_TO_ADDR
// InitHc ;
4400: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 750 ) ;
4404: LD_INT 34
4406: PPUSH
4407: CALL_OW 274
4411: PPUSH
4412: LD_INT 1
4414: PPUSH
4415: LD_INT 750
4417: PPUSH
4418: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4422: LD_INT 34
4424: PPUSH
4425: CALL_OW 274
4429: PPUSH
4430: LD_INT 3
4432: PPUSH
4433: LD_INT 20
4435: PPUSH
4436: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4440: LD_ADDR_EXP 18
4444: PUSH
4445: LD_STRING Stevens
4447: PPUSH
4448: CALL_OW 25
4452: ST_TO_ADDR
// if LoadVariable ( 12a_PowellKilled , false ) then
4453: LD_STRING 12a_PowellKilled
4455: PPUSH
4456: LD_INT 0
4458: PPUSH
4459: CALL_OW 30
4463: IFFALSE 4490
// begin PrepareHuman ( sex_male , class_soldier , 10 ) ;
4465: LD_INT 1
4467: PPUSH
4468: LD_INT 1
4470: PPUSH
4471: LD_INT 10
4473: PPUSH
4474: CALL_OW 380
// Powell := CreateHuman ;
4478: LD_ADDR_EXP 19
4482: PUSH
4483: CALL_OW 44
4487: ST_TO_ADDR
// end else
4488: GO 4503
// Powell := NewCharacter ( Powell ) ;
4490: LD_ADDR_EXP 19
4494: PUSH
4495: LD_STRING Powell
4497: PPUSH
4498: CALL_OW 25
4502: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4503: LD_EXP 18
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: CALL_OW 52
// vehGuard := [ ] ;
4515: LD_ADDR_EXP 23
4519: PUSH
4520: EMPTY
4521: ST_TO_ADDR
// hc_importance := 0 ;
4522: LD_ADDR_OWVAR 32
4526: PUSH
4527: LD_INT 0
4529: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4530: LD_INT 4
4532: PPUSH
4533: LD_INT 3
4535: PPUSH
4536: LD_INT 3
4538: PPUSH
4539: LD_INT 8
4541: PPUSH
4542: LD_INT 100
4544: PPUSH
4545: CALL 35250 0 5
// sibBomb := CreateVehicle ;
4549: LD_ADDR_EXP 21
4553: PUSH
4554: CALL_OW 45
4558: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4559: LD_EXP 21
4563: PPUSH
4564: LD_INT 1
4566: PPUSH
4567: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4571: LD_EXP 21
4575: PPUSH
4576: LD_INT 93
4578: PPUSH
4579: LD_INT 74
4581: PPUSH
4582: LD_INT 0
4584: PPUSH
4585: CALL_OW 48
// guards := [ ] ;
4589: LD_ADDR_EXP 22
4593: PUSH
4594: EMPTY
4595: ST_TO_ADDR
// for i = 1 to 3 do
4596: LD_ADDR_VAR 0 2
4600: PUSH
4601: DOUBLE
4602: LD_INT 1
4604: DEC
4605: ST_TO_ADDR
4606: LD_INT 3
4608: PUSH
4609: FOR_TO
4610: IFFALSE 4706
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4612: LD_INT 0
4614: PPUSH
4615: LD_INT 1
4617: PPUSH
4618: LD_INT 8
4620: PUSH
4621: LD_INT 9
4623: PUSH
4624: LD_INT 10
4626: PUSH
4627: LD_INT 10
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: PUSH
4636: LD_OWVAR 67
4640: ARRAY
4641: PPUSH
4642: CALL_OW 380
// un := CreateHuman ;
4646: LD_ADDR_VAR 0 3
4650: PUSH
4651: CALL_OW 44
4655: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4656: LD_VAR 0 3
4660: PPUSH
4661: LD_INT 2
4663: PUSH
4664: LD_INT 3
4666: PUSH
4667: LD_INT 4
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: LIST
4674: PUSH
4675: LD_VAR 0 2
4679: ARRAY
4680: PPUSH
4681: LD_INT 0
4683: PPUSH
4684: CALL_OW 49
// guards := guards ^ un ;
4688: LD_ADDR_EXP 22
4692: PUSH
4693: LD_EXP 22
4697: PUSH
4698: LD_VAR 0 3
4702: ADD
4703: ST_TO_ADDR
// end ;
4704: GO 4609
4706: POP
4707: POP
// baseGuards := [ ] ;
4708: LD_ADDR_EXP 20
4712: PUSH
4713: EMPTY
4714: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4715: LD_ADDR_VAR 0 2
4719: PUSH
4720: DOUBLE
4721: LD_INT 1
4723: DEC
4724: ST_TO_ADDR
4725: LD_INT 5
4727: PUSH
4728: LD_INT 6
4730: PUSH
4731: LD_INT 7
4733: PUSH
4734: LD_INT 8
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: PUSH
4743: LD_OWVAR 67
4747: ARRAY
4748: PUSH
4749: FOR_TO
4750: IFFALSE 4900
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4752: LD_INT 0
4754: PPUSH
4755: LD_INT 8
4757: PUSH
4758: LD_INT 9
4760: PUSH
4761: LD_INT 10
4763: PUSH
4764: LD_INT 10
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: PUSH
4773: LD_OWVAR 67
4777: ARRAY
4778: PPUSH
4779: CALL_OW 381
// un := CreateHuman ;
4783: LD_ADDR_VAR 0 3
4787: PUSH
4788: CALL_OW 44
4792: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4793: LD_ADDR_EXP 20
4797: PUSH
4798: LD_EXP 20
4802: PUSH
4803: LD_VAR 0 3
4807: ADD
4808: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4809: LD_ADDR_VAR 0 4
4813: PUSH
4814: LD_INT 22
4816: PUSH
4817: LD_INT 1
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PUSH
4824: LD_INT 58
4826: PUSH
4827: EMPTY
4828: LIST
4829: PUSH
4830: LD_INT 30
4832: PUSH
4833: LD_INT 32
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: LIST
4844: PPUSH
4845: CALL_OW 69
4849: ST_TO_ADDR
// if tmp then
4850: LD_VAR 0 4
4854: IFFALSE 4886
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4856: LD_VAR 0 3
4860: PPUSH
4861: LD_VAR 0 4
4865: PUSH
4866: LD_INT 1
4868: PPUSH
4869: LD_VAR 0 4
4873: PPUSH
4874: CALL_OW 12
4878: ARRAY
4879: PPUSH
4880: CALL_OW 52
4884: GO 4898
// PlaceHumanInUnit ( un , us_bar ) ;
4886: LD_VAR 0 3
4890: PPUSH
4891: LD_INT 51
4893: PPUSH
4894: CALL_OW 52
// end ;
4898: GO 4749
4900: POP
4901: POP
// if Difficulty > 1 then
4902: LD_OWVAR 67
4906: PUSH
4907: LD_INT 1
4909: GREATER
4910: IFFALSE 4958
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4912: LD_INT 0
4914: PPUSH
4915: LD_INT 5
4917: PPUSH
4918: LD_INT 9
4920: PUSH
4921: LD_INT 10
4923: PUSH
4924: LD_INT 10
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: LIST
4931: PUSH
4932: LD_OWVAR 67
4936: PUSH
4937: LD_INT 1
4939: MINUS
4940: ARRAY
4941: PPUSH
4942: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4946: CALL_OW 44
4950: PPUSH
4951: LD_INT 80
4953: PPUSH
4954: CALL_OW 52
// end ; for i = 1 to 3 do
4958: LD_ADDR_VAR 0 2
4962: PUSH
4963: DOUBLE
4964: LD_INT 1
4966: DEC
4967: ST_TO_ADDR
4968: LD_INT 3
4970: PUSH
4971: FOR_TO
4972: IFFALSE 4998
// begin PrepareMechanic ( false , 9 ) ;
4974: LD_INT 0
4976: PPUSH
4977: LD_INT 9
4979: PPUSH
4980: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4984: CALL_OW 44
4988: PPUSH
4989: LD_INT 43
4991: PPUSH
4992: CALL_OW 52
// end ;
4996: GO 4971
4998: POP
4999: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
5000: CALL_OW 44
5004: PPUSH
5005: LD_INT 49
5007: PPUSH
5008: CALL_OW 52
// for i = 1 to 1 + Difficulty do
5012: LD_ADDR_VAR 0 2
5016: PUSH
5017: DOUBLE
5018: LD_INT 1
5020: DEC
5021: ST_TO_ADDR
5022: LD_INT 1
5024: PUSH
5025: LD_OWVAR 67
5029: PLUS
5030: PUSH
5031: FOR_TO
5032: IFFALSE 5079
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
5034: LD_INT 0
5036: PPUSH
5037: LD_INT 8
5039: PUSH
5040: LD_INT 9
5042: PUSH
5043: LD_INT 10
5045: PUSH
5046: LD_INT 10
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: PUSH
5055: LD_OWVAR 67
5059: ARRAY
5060: PPUSH
5061: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
5065: CALL_OW 44
5069: PPUSH
5070: LD_INT 5
5072: PPUSH
5073: CALL_OW 52
// end ;
5077: GO 5031
5079: POP
5080: POP
// for i = 1 to 3 do
5081: LD_ADDR_VAR 0 2
5085: PUSH
5086: DOUBLE
5087: LD_INT 1
5089: DEC
5090: ST_TO_ADDR
5091: LD_INT 3
5093: PUSH
5094: FOR_TO
5095: IFFALSE 5121
// begin PrepareScientist ( false , 10 ) ;
5097: LD_INT 0
5099: PPUSH
5100: LD_INT 10
5102: PPUSH
5103: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
5107: CALL_OW 44
5111: PPUSH
5112: LD_INT 1
5114: PPUSH
5115: CALL_OW 52
// end ;
5119: GO 5094
5121: POP
5122: POP
// end ;
5123: LD_VAR 0 1
5127: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
5128: LD_EXP 22
5132: IFFALSE 5141
5134: PUSH
5135: LD_EXP 2
5139: NOT
5140: AND
5141: IFFALSE 5327
5143: GO 5145
5145: DISABLE
5146: LD_INT 0
5148: PPUSH
5149: PPUSH
5150: PPUSH
// begin enable ;
5151: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
5152: LD_ADDR_VAR 0 3
5156: PUSH
5157: LD_INT 204
5159: PUSH
5160: LD_INT 30
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: LD_INT 165
5169: PUSH
5170: LD_INT 24
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 195
5179: PUSH
5180: LD_INT 6
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 223
5189: PUSH
5190: LD_INT 54
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: PUSH
5197: LD_INT 214
5199: PUSH
5200: LD_INT 84
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: PUSH
5207: LD_INT 206
5209: PUSH
5210: LD_INT 71
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: ST_TO_ADDR
// for i in guards do
5225: LD_ADDR_VAR 0 1
5229: PUSH
5230: LD_EXP 22
5234: PUSH
5235: FOR_IN
5236: IFFALSE 5325
// begin if HasTask ( i ) then
5238: LD_VAR 0 1
5242: PPUSH
5243: CALL_OW 314
5247: IFFALSE 5253
// continue else
5249: GO 5235
5251: GO 5323
// begin j := rand ( 1 , 6 ) ;
5253: LD_ADDR_VAR 0 2
5257: PUSH
5258: LD_INT 1
5260: PPUSH
5261: LD_INT 6
5263: PPUSH
5264: CALL_OW 12
5268: ST_TO_ADDR
// if not See ( 7 , i ) then
5269: LD_INT 7
5271: PPUSH
5272: LD_VAR 0 1
5276: PPUSH
5277: CALL_OW 292
5281: NOT
5282: IFFALSE 5323
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
5284: LD_VAR 0 1
5288: PPUSH
5289: LD_VAR 0 3
5293: PUSH
5294: LD_VAR 0 2
5298: ARRAY
5299: PUSH
5300: LD_INT 1
5302: ARRAY
5303: PPUSH
5304: LD_VAR 0 3
5308: PUSH
5309: LD_VAR 0 2
5313: ARRAY
5314: PUSH
5315: LD_INT 2
5317: ARRAY
5318: PPUSH
5319: CALL_OW 114
// end ; end ;
5323: GO 5235
5325: POP
5326: POP
// end ;
5327: PPOPN 3
5329: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5330: LD_EXP 23
5334: IFFALSE 5343
5336: PUSH
5337: LD_EXP 7
5341: NOT
5342: AND
5343: IFFALSE 5427
5345: GO 5347
5347: DISABLE
5348: LD_INT 0
5350: PPUSH
// begin enable ;
5351: ENABLE
// for i in vehGuard do
5352: LD_ADDR_VAR 0 1
5356: PUSH
5357: LD_EXP 23
5361: PUSH
5362: FOR_IN
5363: IFFALSE 5425
// if IsOk ( i ) and IsControledBy ( i ) then
5365: LD_VAR 0 1
5369: PPUSH
5370: CALL_OW 302
5374: IFFALSE 5387
5376: PUSH
5377: LD_VAR 0 1
5381: PPUSH
5382: CALL_OW 312
5386: AND
5387: IFFALSE 5423
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5389: LD_VAR 0 1
5393: PPUSH
5394: LD_INT 22
5396: PUSH
5397: LD_INT 7
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: PPUSH
5404: CALL_OW 69
5408: PPUSH
5409: LD_VAR 0 1
5413: PPUSH
5414: CALL_OW 74
5418: PPUSH
5419: CALL_OW 115
5423: GO 5362
5425: POP
5426: POP
// end ;
5427: PPOPN 1
5429: END
// every 1 1$00 + 3 3$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured and Difficulty > 1 do
5430: LD_EXP 4
5434: IFFALSE 5445
5436: PUSH
5437: LD_INT 43
5439: PPUSH
5440: CALL_OW 302
5444: AND
5445: IFFALSE 5454
5447: PUSH
5448: LD_EXP 7
5452: NOT
5453: AND
5454: IFFALSE 5466
5456: PUSH
5457: LD_OWVAR 67
5461: PUSH
5462: LD_INT 1
5464: GREATER
5465: AND
5466: IFFALSE 5531
5468: GO 5470
5470: DISABLE
// begin enable ;
5471: ENABLE
// if Count ( vehGuard ) < Difficulty then
5472: LD_EXP 23
5476: PPUSH
5477: CALL 32454 0 1
5481: PUSH
5482: LD_OWVAR 67
5486: LESS
5487: IFFALSE 5531
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5489: LD_INT 43
5491: PPUSH
5492: LD_INT 5
5494: PPUSH
5495: LD_INT 3
5497: PPUSH
5498: LD_INT 2
5500: PPUSH
5501: LD_INT 7
5503: PUSH
5504: LD_INT 7
5506: PUSH
5507: LD_INT 9
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: PUSH
5515: LD_INT 1
5517: PPUSH
5518: LD_INT 3
5520: PPUSH
5521: CALL_OW 12
5525: ARRAY
5526: PPUSH
5527: CALL_OW 125
// end ;
5531: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5532: LD_INT 22
5534: PUSH
5535: LD_INT 1
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PUSH
5542: LD_INT 25
5544: PUSH
5545: LD_INT 5
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: PUSH
5552: LD_INT 50
5554: PUSH
5555: EMPTY
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: LIST
5562: PPUSH
5563: CALL_OW 69
5567: IFFALSE 5576
5569: PUSH
5570: LD_EXP 7
5574: NOT
5575: AND
5576: IFFALSE 5807
5578: GO 5580
5580: DISABLE
5581: LD_INT 0
5583: PPUSH
5584: PPUSH
// begin enable ;
5585: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5586: LD_ADDR_VAR 0 1
5590: PUSH
5591: LD_INT 22
5593: PUSH
5594: LD_INT 1
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: PUSH
5601: LD_INT 25
5603: PUSH
5604: LD_INT 5
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PUSH
5611: LD_INT 50
5613: PUSH
5614: EMPTY
5615: LIST
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: LIST
5621: PPUSH
5622: CALL_OW 69
5626: ST_TO_ADDR
// if not tmp then
5627: LD_VAR 0 1
5631: NOT
5632: IFFALSE 5636
// exit ;
5634: GO 5807
// b := IsInUnit ( tmp [ 1 ] ) ;
5636: LD_ADDR_VAR 0 2
5640: PUSH
5641: LD_VAR 0 1
5645: PUSH
5646: LD_INT 1
5648: ARRAY
5649: PPUSH
5650: CALL_OW 310
5654: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5655: LD_VAR 0 2
5659: NOT
5660: IFTRUE 5677
5662: PUSH
5663: LD_VAR 0 1
5667: PUSH
5668: LD_INT 1
5670: ARRAY
5671: PPUSH
5672: CALL_OW 314
5676: OR
5677: IFFALSE 5681
// exit ;
5679: GO 5807
// if b = us_bun1 then
5681: LD_VAR 0 2
5685: PUSH
5686: LD_INT 80
5688: EQUAL
5689: IFFALSE 5750
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5691: LD_VAR 0 1
5695: PUSH
5696: LD_INT 1
5698: ARRAY
5699: PPUSH
5700: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5704: LD_VAR 0 1
5708: PUSH
5709: LD_INT 1
5711: ARRAY
5712: PPUSH
5713: LD_INT 27
5715: PPUSH
5716: LD_INT 44
5718: PPUSH
5719: CALL_OW 174
// if IsOk ( us_bun2 ) then
5723: LD_INT 55
5725: PPUSH
5726: CALL_OW 302
5730: IFFALSE 5748
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5732: LD_VAR 0 1
5736: PUSH
5737: LD_INT 1
5739: ARRAY
5740: PPUSH
5741: LD_INT 55
5743: PPUSH
5744: CALL_OW 180
// end else
5748: GO 5807
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5750: LD_VAR 0 1
5754: PUSH
5755: LD_INT 1
5757: ARRAY
5758: PPUSH
5759: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5763: LD_VAR 0 1
5767: PUSH
5768: LD_INT 1
5770: ARRAY
5771: PPUSH
5772: LD_INT 92
5774: PPUSH
5775: LD_INT 51
5777: PPUSH
5778: CALL_OW 174
// if IsOk ( us_bun1 ) then
5782: LD_INT 80
5784: PPUSH
5785: CALL_OW 302
5789: IFFALSE 5807
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5791: LD_VAR 0 1
5795: PUSH
5796: LD_INT 1
5798: ARRAY
5799: PPUSH
5800: LD_INT 80
5802: PPUSH
5803: CALL_OW 180
// end ; end ;
5807: PPOPN 2
5809: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5810: LD_EXP 7
5814: NOT
5815: IFFALSE 5868
5817: PUSH
5818: LD_INT 9
5820: PPUSH
5821: LD_INT 22
5823: PUSH
5824: LD_INT 1
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: PUSH
5831: LD_INT 21
5833: PUSH
5834: LD_INT 3
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: PUSH
5841: LD_INT 3
5843: PUSH
5844: LD_INT 24
5846: PUSH
5847: LD_INT 1000
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: LIST
5862: PPUSH
5863: CALL_OW 70
5867: AND
5868: IFFALSE 6285
5870: GO 5872
5872: DISABLE
5873: LD_INT 0
5875: PPUSH
5876: PPUSH
5877: PPUSH
5878: PPUSH
// begin enable ;
5879: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5880: LD_ADDR_VAR 0 2
5884: PUSH
5885: LD_INT 22
5887: PUSH
5888: LD_INT 1
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PUSH
5895: LD_INT 25
5897: PUSH
5898: LD_INT 2
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: PUSH
5905: LD_INT 24
5907: PUSH
5908: LD_INT 1000
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 69
5924: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5925: LD_ADDR_VAR 0 3
5929: PUSH
5930: LD_INT 22
5932: PUSH
5933: LD_INT 1
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: PUSH
5940: LD_INT 25
5942: PUSH
5943: LD_INT 2
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: PUSH
5950: LD_INT 3
5952: PUSH
5953: LD_INT 24
5955: PUSH
5956: LD_INT 750
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: LIST
5971: PPUSH
5972: CALL_OW 69
5976: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5977: LD_ADDR_VAR 0 4
5981: PUSH
5982: LD_INT 9
5984: PPUSH
5985: LD_INT 22
5987: PUSH
5988: LD_INT 1
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: LD_INT 21
5997: PUSH
5998: LD_INT 3
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PUSH
6005: LD_INT 3
6007: PUSH
6008: LD_INT 24
6010: PUSH
6011: LD_INT 1000
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: LIST
6026: PPUSH
6027: CALL_OW 70
6031: PUSH
6032: LD_INT 1
6034: DIFF
6035: ST_TO_ADDR
// if not tmp and not tmp2 then
6036: LD_VAR 0 2
6040: NOT
6041: IFFALSE 6050
6043: PUSH
6044: LD_VAR 0 3
6048: NOT
6049: AND
6050: IFFALSE 6054
// exit ;
6052: GO 6285
// if tmp and b then
6054: LD_VAR 0 2
6058: IFFALSE 6066
6060: PUSH
6061: LD_VAR 0 4
6065: AND
6066: IFFALSE 6198
// for i in tmp do
6068: LD_ADDR_VAR 0 1
6072: PUSH
6073: LD_VAR 0 2
6077: PUSH
6078: FOR_IN
6079: IFFALSE 6196
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
6081: LD_VAR 0 1
6085: PPUSH
6086: CALL_OW 110
6090: PUSH
6091: LD_INT 1
6093: EQUAL
6094: IFFALSE 6111
6096: PUSH
6097: LD_VAR 0 1
6101: PPUSH
6102: CALL_OW 256
6106: PUSH
6107: LD_INT 1000
6109: LESS
6110: AND
6111: IFFALSE 6117
// continue else
6113: GO 6078
6115: GO 6144
// if GetTag ( i ) = 1 then
6117: LD_VAR 0 1
6121: PPUSH
6122: CALL_OW 110
6126: PUSH
6127: LD_INT 1
6129: EQUAL
6130: IFFALSE 6144
// SetTag ( i , 0 ) ;
6132: LD_VAR 0 1
6136: PPUSH
6137: LD_INT 0
6139: PPUSH
6140: CALL_OW 109
// if IsInUnit ( i ) then
6144: LD_VAR 0 1
6148: PPUSH
6149: CALL_OW 310
6153: IFFALSE 6164
// ComExitBuilding ( i ) ;
6155: LD_VAR 0 1
6159: PPUSH
6160: CALL_OW 122
// if not HasTask ( i ) then
6164: LD_VAR 0 1
6168: PPUSH
6169: CALL_OW 314
6173: NOT
6174: IFFALSE 6194
// AddComRepairBuilding ( i , b [ 1 ] ) ;
6176: LD_VAR 0 1
6180: PPUSH
6181: LD_VAR 0 4
6185: PUSH
6186: LD_INT 1
6188: ARRAY
6189: PPUSH
6190: CALL_OW 190
// end ;
6194: GO 6078
6196: POP
6197: POP
// if tmp2 then
6198: LD_VAR 0 3
6202: IFFALSE 6285
// for i in tmp2 do
6204: LD_ADDR_VAR 0 1
6208: PUSH
6209: LD_VAR 0 3
6213: PUSH
6214: FOR_IN
6215: IFFALSE 6283
// begin if not GetTag ( i ) = 1 then
6217: LD_VAR 0 1
6221: PPUSH
6222: CALL_OW 110
6226: PUSH
6227: LD_INT 1
6229: EQUAL
6230: NOT
6231: IFFALSE 6245
// SetTag ( i , 1 ) ;
6233: LD_VAR 0 1
6237: PPUSH
6238: LD_INT 1
6240: PPUSH
6241: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
6245: LD_VAR 0 1
6249: PPUSH
6250: LD_INT 88
6252: PPUSH
6253: LD_INT 75
6255: PPUSH
6256: CALL_OW 297
6260: PUSH
6261: LD_INT 6
6263: GREATER
6264: IFFALSE 6281
// ComMoveXY ( i , 88 , 75 ) ;
6266: LD_VAR 0 1
6270: PPUSH
6271: LD_INT 88
6273: PPUSH
6274: LD_INT 75
6276: PPUSH
6277: CALL_OW 111
// end ;
6281: GO 6214
6283: POP
6284: POP
// end ;
6285: PPOPN 4
6287: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
6288: LD_EXP 7
6292: NOT
6293: IFFALSE 6301
6295: PUSH
6296: LD_EXP 9
6300: AND
6301: IFFALSE 6354
6303: PUSH
6304: LD_INT 9
6306: PPUSH
6307: LD_INT 22
6309: PUSH
6310: LD_INT 1
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: PUSH
6317: LD_INT 21
6319: PUSH
6320: LD_INT 1
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: PUSH
6327: LD_INT 3
6329: PUSH
6330: LD_INT 24
6332: PUSH
6333: LD_INT 1000
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: PPUSH
6349: CALL_OW 70
6353: AND
6354: IFFALSE 6529
6356: GO 6358
6358: DISABLE
6359: LD_INT 0
6361: PPUSH
6362: PPUSH
6363: PPUSH
// begin enable ;
6364: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
6365: LD_ADDR_VAR 0 2
6369: PUSH
6370: LD_INT 22
6372: PUSH
6373: LD_INT 1
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 25
6382: PUSH
6383: LD_INT 4
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PPUSH
6394: CALL_OW 69
6398: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6399: LD_ADDR_VAR 0 3
6403: PUSH
6404: LD_INT 9
6406: PPUSH
6407: LD_INT 22
6409: PUSH
6410: LD_INT 1
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: PUSH
6417: LD_INT 21
6419: PUSH
6420: LD_INT 1
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: PUSH
6427: LD_INT 3
6429: PUSH
6430: LD_INT 24
6432: PUSH
6433: LD_INT 1000
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: LIST
6448: PPUSH
6449: CALL_OW 70
6453: ST_TO_ADDR
// if not sci or not tmp then
6454: LD_VAR 0 2
6458: NOT
6459: IFTRUE 6468
6461: PUSH
6462: LD_VAR 0 3
6466: NOT
6467: OR
6468: IFFALSE 6472
// exit ;
6470: GO 6529
// for i in sci do
6472: LD_ADDR_VAR 0 1
6476: PUSH
6477: LD_VAR 0 2
6481: PUSH
6482: FOR_IN
6483: IFFALSE 6527
// if IsInUnit ( i ) then
6485: LD_VAR 0 1
6489: PPUSH
6490: CALL_OW 310
6494: IFFALSE 6507
// ComExitBuilding ( i ) else
6496: LD_VAR 0 1
6500: PPUSH
6501: CALL_OW 122
6505: GO 6525
// ComHeal ( i , tmp [ 1 ] ) ;
6507: LD_VAR 0 1
6511: PPUSH
6512: LD_VAR 0 3
6516: PUSH
6517: LD_INT 1
6519: ARRAY
6520: PPUSH
6521: CALL_OW 128
6525: GO 6482
6527: POP
6528: POP
// end ;
6529: PPOPN 3
6531: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6532: LD_EXP 7
6536: NOT
6537: IFFALSE 6545
6539: PUSH
6540: LD_EXP 9
6544: AND
6545: IFFALSE 6556
6547: PUSH
6548: LD_INT 1
6550: PPUSH
6551: CALL_OW 302
6555: AND
6556: IFFALSE 6610
6558: PUSH
6559: LD_INT 9
6561: PPUSH
6562: LD_INT 22
6564: PUSH
6565: LD_INT 1
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 21
6574: PUSH
6575: LD_INT 1
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: LD_INT 24
6587: PUSH
6588: LD_INT 1000
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: PPUSH
6604: CALL_OW 70
6608: NOT
6609: AND
6610: IFFALSE 6649
6612: PUSH
6613: LD_INT 22
6615: PUSH
6616: LD_INT 1
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PUSH
6623: LD_INT 25
6625: PUSH
6626: LD_INT 4
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 56
6635: PUSH
6636: EMPTY
6637: LIST
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 69
6648: AND
6649: IFFALSE 6744
6651: GO 6653
6653: DISABLE
6654: LD_INT 0
6656: PPUSH
// begin enable ;
6657: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6658: LD_ADDR_VAR 0 1
6662: PUSH
6663: LD_INT 22
6665: PUSH
6666: LD_INT 1
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: LD_INT 25
6675: PUSH
6676: LD_INT 4
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 56
6685: PUSH
6686: EMPTY
6687: LIST
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: PPUSH
6694: CALL_OW 69
6698: PUSH
6699: FOR_IN
6700: IFFALSE 6742
// if not GetTag ( i ) and not HasTask ( i ) then
6702: LD_VAR 0 1
6706: PPUSH
6707: CALL_OW 110
6711: NOT
6712: IFFALSE 6726
6714: PUSH
6715: LD_VAR 0 1
6719: PPUSH
6720: CALL_OW 314
6724: NOT
6725: AND
6726: IFFALSE 6740
// ComEnterUnit ( i , us_lab ) ;
6728: LD_VAR 0 1
6732: PPUSH
6733: LD_INT 1
6735: PPUSH
6736: CALL_OW 120
6740: GO 6699
6742: POP
6743: POP
// end ;
6744: PPOPN 1
6746: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6747: LD_EXP 7
6751: NOT
6752: IFFALSE 6806
6754: PUSH
6755: LD_INT 9
6757: PPUSH
6758: LD_INT 22
6760: PUSH
6761: LD_INT 1
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: LD_INT 21
6770: PUSH
6771: LD_INT 3
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 3
6780: PUSH
6781: LD_INT 24
6783: PUSH
6784: LD_INT 1000
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: LIST
6799: PPUSH
6800: CALL_OW 70
6804: NOT
6805: AND
6806: IFFALSE 6845
6808: PUSH
6809: LD_INT 22
6811: PUSH
6812: LD_INT 1
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: LD_INT 25
6821: PUSH
6822: LD_INT 2
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: LD_INT 56
6831: PUSH
6832: EMPTY
6833: LIST
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: LIST
6839: PPUSH
6840: CALL_OW 69
6844: AND
6845: IFFALSE 6940
6847: GO 6849
6849: DISABLE
6850: LD_INT 0
6852: PPUSH
// begin enable ;
6853: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6854: LD_ADDR_VAR 0 1
6858: PUSH
6859: LD_INT 22
6861: PUSH
6862: LD_INT 1
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: LD_INT 25
6871: PUSH
6872: LD_INT 2
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 56
6881: PUSH
6882: EMPTY
6883: LIST
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: LIST
6889: PPUSH
6890: CALL_OW 69
6894: PUSH
6895: FOR_IN
6896: IFFALSE 6938
// if not HasTask ( i ) and not GetTag ( i ) then
6898: LD_VAR 0 1
6902: PPUSH
6903: CALL_OW 314
6907: NOT
6908: IFFALSE 6922
6910: PUSH
6911: LD_VAR 0 1
6915: PPUSH
6916: CALL_OW 110
6920: NOT
6921: AND
6922: IFFALSE 6936
// ComEnterUnit ( i , us_depot ) ;
6924: LD_VAR 0 1
6928: PPUSH
6929: LD_INT 5
6931: PPUSH
6932: CALL_OW 120
6936: GO 6895
6938: POP
6939: POP
// end ;
6940: PPOPN 1
6942: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6943: LD_EXP 9
6947: PUSH
6948: LD_INT 0
6950: LESSEQUAL
6951: IFTRUE 6964
6953: PUSH
6954: LD_EXP 18
6958: PPUSH
6959: CALL_OW 301
6963: OR
6964: IFFALSE 6996
6966: PUSH
6967: LD_INT 22
6969: PUSH
6970: LD_INT 1
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 25
6979: PUSH
6980: LD_INT 2
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PPUSH
6991: CALL_OW 69
6995: AND
6996: IFFALSE 7037
6998: GO 7000
7000: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
7001: LD_INT 22
7003: PUSH
7004: LD_INT 1
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 25
7013: PUSH
7014: LD_INT 2
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PPUSH
7025: CALL_OW 69
7029: PPUSH
7030: LD_INT 1
7032: PPUSH
7033: CALL_OW 167
7037: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
7038: LD_EXP 7
7042: NOT
7043: IFFALSE 7064
7045: PUSH
7046: LD_INT 7
7048: PPUSH
7049: LD_INT 22
7051: PUSH
7052: LD_INT 7
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PPUSH
7059: CALL_OW 70
7063: AND
7064: IFFALSE 7173
7066: GO 7068
7068: DISABLE
7069: LD_INT 0
7071: PPUSH
// begin wait ( 0 0$2 ) ;
7072: LD_INT 70
7074: PPUSH
7075: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] ] ) do
7079: LD_ADDR_VAR 0 1
7083: PUSH
7084: LD_INT 22
7086: PUSH
7087: LD_INT 1
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: LD_INT 2
7096: PUSH
7097: LD_INT 25
7099: PUSH
7100: LD_INT 1
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 25
7109: PUSH
7110: LD_INT 5
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: LIST
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PPUSH
7126: CALL_OW 69
7130: PUSH
7131: FOR_IN
7132: IFFALSE 7171
// begin if IsInUnit ( i ) then
7134: LD_VAR 0 1
7138: PPUSH
7139: CALL_OW 310
7143: IFFALSE 7154
// ComExitBuilding ( i ) ;
7145: LD_VAR 0 1
7149: PPUSH
7150: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
7154: LD_VAR 0 1
7158: PPUSH
7159: LD_INT 92
7161: PPUSH
7162: LD_INT 78
7164: PPUSH
7165: CALL_OW 174
// end ;
7169: GO 7131
7171: POP
7172: POP
// end ; end_of_file
7173: PPOPN 1
7175: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
7176: LD_VAR 0 1
7180: PPUSH
7181: LD_VAR 0 2
7185: PPUSH
7186: LD_VAR 0 3
7190: PPUSH
7191: CALL 1661 0 3
7195: PPOPN 3
7197: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
7198: LD_EXP 14
7202: PPUSH
7203: CALL_OW 257
7207: PUSH
7208: LD_INT 4
7210: EQUAL
7211: IFTRUE 7228
7213: PUSH
7214: LD_EXP 15
7218: PPUSH
7219: CALL_OW 257
7223: PUSH
7224: LD_INT 4
7226: EQUAL
7227: OR
7228: IFTRUE 7260
7230: PUSH
7231: LD_INT 22
7233: PUSH
7234: LD_INT 7
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 21
7243: PUSH
7244: LD_INT 3
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PPUSH
7255: CALL_OW 69
7259: OR
7260: IFFALSE 7264
// exit ;
7262: GO 7302
// if un = JMM then
7264: LD_VAR 0 1
7268: PUSH
7269: LD_EXP 14
7273: EQUAL
7274: IFFALSE 7283
// YouLost ( JMM ) ;
7276: LD_STRING JMM
7278: PPUSH
7279: CALL_OW 104
// if un = Burlak then
7283: LD_VAR 0 1
7287: PUSH
7288: LD_EXP 15
7292: EQUAL
7293: IFFALSE 7302
// YouLost ( Burlak ) ;
7295: LD_STRING Burlak
7297: PPUSH
7298: CALL_OW 104
// end ;
7302: PPOPN 1
7304: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7305: LD_VAR 0 1
7309: PPUSH
7310: CALL 23756 0 1
// if un = JMM then
7314: LD_VAR 0 1
7318: PUSH
7319: LD_EXP 14
7323: EQUAL
7324: IFFALSE 7333
// YouLost ( JMM ) ;
7326: LD_STRING JMM
7328: PPUSH
7329: CALL_OW 104
// if un = Burlak then
7333: LD_VAR 0 1
7337: PUSH
7338: LD_EXP 15
7342: EQUAL
7343: IFFALSE 7352
// YouLost ( Burlak ) ;
7345: LD_STRING Burlak
7347: PPUSH
7348: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
7352: LD_VAR 0 1
7356: PUSH
7357: LD_INT 21
7359: PUSH
7360: LD_INT 1
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: LD_INT 23
7369: PUSH
7370: LD_INT 1
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PPUSH
7381: CALL_OW 69
7385: IN
7386: IFFALSE 7402
// killCounter := killCounter + 1 ;
7388: LD_ADDR_EXP 12
7392: PUSH
7393: LD_EXP 12
7397: PUSH
7398: LD_INT 1
7400: PLUS
7401: ST_TO_ADDR
// end ;
7402: PPOPN 1
7404: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
7405: LD_VAR 0 2
7409: PUSH
7410: LD_INT 7
7412: EQUAL
7413: IFFALSE 7466
7415: PUSH
7416: LD_VAR 0 1
7420: PUSH
7421: LD_INT 2
7423: PUSH
7424: LD_INT 30
7426: PUSH
7427: LD_INT 31
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PUSH
7434: LD_INT 30
7436: PUSH
7437: LD_INT 32
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PUSH
7444: LD_INT 30
7446: PUSH
7447: LD_INT 33
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: PPUSH
7460: CALL_OW 69
7464: IN
7465: AND
7466: IFFALSE 7482
// bunkerCounter := bunkerCounter + 1 ;
7468: LD_ADDR_EXP 13
7472: PUSH
7473: LD_EXP 13
7477: PUSH
7478: LD_INT 1
7480: PLUS
7481: ST_TO_ADDR
// end ;
7482: PPOPN 3
7484: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7485: LD_VAR 0 1
7489: PPUSH
7490: CALL_OW 255
7494: PUSH
7495: LD_INT 7
7497: EQUAL
7498: IFFALSE 7508
// artifactPickedUp := true ;
7500: LD_ADDR_EXP 6
7504: PUSH
7505: LD_INT 1
7507: ST_TO_ADDR
// end ;
7508: PPOPN 2
7510: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7511: LD_ADDR_EXP 6
7515: PUSH
7516: LD_INT 0
7518: ST_TO_ADDR
7519: PPOPN 2
7521: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7522: LD_VAR 0 1
7526: PPUSH
7527: LD_VAR 0 2
7531: PPUSH
7532: CALL 23814 0 2
// if GetSide ( vehicle ) <> 1 then
7536: LD_VAR 0 1
7540: PPUSH
7541: CALL_OW 255
7545: PUSH
7546: LD_INT 1
7548: NONEQUAL
7549: IFFALSE 7553
// exit ;
7551: GO 7600
// wait ( 0 0$5 ) ;
7553: LD_INT 175
7555: PPUSH
7556: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7560: LD_VAR 0 1
7564: PPUSH
7565: CALL_OW 263
7569: PUSH
7570: LD_INT 2
7572: EQUAL
7573: IFFALSE 7584
// Connect ( vehicle ) ;
7575: LD_VAR 0 1
7579: PPUSH
7580: CALL 38732 0 1
// vehGuard := vehGuard ^ vehicle ;
7584: LD_ADDR_EXP 23
7588: PUSH
7589: LD_EXP 23
7593: PUSH
7594: LD_VAR 0 1
7598: ADD
7599: ST_TO_ADDR
// end ;
7600: PPOPN 2
7602: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7603: LD_VAR 0 1
7607: PUSH
7608: LD_INT 1
7610: EQUAL
7611: IFFALSE 7620
7613: PUSH
7614: LD_EXP 7
7618: NOT
7619: AND
7620: IFFALSE 7655
// begin planCaptured := true ;
7622: LD_ADDR_EXP 7
7626: PUSH
7627: LD_INT 1
7629: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7630: LD_STRING MEnd
7632: PPUSH
7633: CALL_OW 337
// canEnd := true ;
7637: LD_ADDR_EXP 10
7641: PUSH
7642: LD_INT 1
7644: ST_TO_ADDR
// missionTime := tick ;
7645: LD_ADDR_EXP 11
7649: PUSH
7650: LD_OWVAR 1
7654: ST_TO_ADDR
// end ; end ;
7655: PPOPN 3
7657: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7658: LD_VAR 0 1
7662: PPUSH
7663: CALL 23798 0 1
// end ; end_of_file end_of_file
7667: PPOPN 1
7669: END
// export globalGameSaveCounter ; every 0 0$1 do
7670: GO 7672
7672: DISABLE
// begin enable ;
7673: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7674: LD_STRING updateTimer(
7676: PUSH
7677: LD_OWVAR 1
7681: STR
7682: PUSH
7683: LD_STRING );
7685: STR
7686: PPUSH
7687: CALL_OW 559
// end ;
7691: END
// every 0 0$1 do
7692: GO 7694
7694: DISABLE
// begin globalGameSaveCounter := 0 ;
7695: LD_ADDR_EXP 24
7699: PUSH
7700: LD_INT 0
7702: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7703: LD_STRING setGameSaveCounter(0)
7705: PPUSH
7706: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7710: LD_STRING initStreamRollete();
7712: PPUSH
7713: CALL_OW 559
// InitStreamMode ;
7717: CALL 9069 0 0
// DefineStreamItems ( false ) ;
7721: LD_INT 0
7723: PPUSH
7724: CALL 9533 0 1
// end ;
7728: END
// export function SOS_MapStart ( ) ; begin
7729: LD_INT 0
7731: PPUSH
// if streamModeActive then
7732: LD_EXP 25
7736: IFFALSE 7745
// DefineStreamItems ( true ) ;
7738: LD_INT 1
7740: PPUSH
7741: CALL 9533 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
7745: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
7747: PPUSH
7748: CALL_OW 559
// UpdateLuaVariables ( ) ;
7752: CALL 7769 0 0
// UpdateFactoryWaypoints ( ) ;
7756: CALL 22655 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7760: CALL 22907 0 0
// end ;
7764: LD_VAR 0 1
7768: RET
// function UpdateLuaVariables ( ) ; begin
7769: LD_INT 0
7771: PPUSH
// if globalGameSaveCounter then
7772: LD_EXP 24
7776: IFFALSE 7810
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7778: LD_ADDR_EXP 24
7782: PUSH
7783: LD_EXP 24
7787: PPUSH
7788: CALL 69803 0 1
7792: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7793: LD_STRING setGameSaveCounter(
7795: PUSH
7796: LD_EXP 24
7800: STR
7801: PUSH
7802: LD_STRING )
7804: STR
7805: PPUSH
7806: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7810: LD_STRING setGameDifficulty(
7812: PUSH
7813: LD_OWVAR 67
7817: STR
7818: PUSH
7819: LD_STRING )
7821: STR
7822: PPUSH
7823: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7827: LD_STRING displayDifficulty(
7829: PUSH
7830: LD_OWVAR 67
7834: STR
7835: PUSH
7836: LD_STRING )
7838: STR
7839: PPUSH
7840: CALL_OW 559
// end ;
7844: LD_VAR 0 1
7848: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7849: LD_INT 0
7851: PPUSH
// if p2 = stream_mode then
7852: LD_VAR 0 2
7856: PUSH
7857: LD_INT 100
7859: EQUAL
7860: IFFALSE 8863
// begin if not StreamModeActive then
7862: LD_EXP 25
7866: NOT
7867: IFFALSE 7877
// StreamModeActive := true ;
7869: LD_ADDR_EXP 25
7873: PUSH
7874: LD_INT 1
7876: ST_TO_ADDR
// if p3 = 0 then
7877: LD_VAR 0 3
7881: PUSH
7882: LD_INT 0
7884: EQUAL
7885: IFFALSE 7891
// InitStreamMode ;
7887: CALL 9069 0 0
// if p3 = 1 then
7891: LD_VAR 0 3
7895: PUSH
7896: LD_INT 1
7898: EQUAL
7899: IFFALSE 7909
// sRocket := true ;
7901: LD_ADDR_EXP 30
7905: PUSH
7906: LD_INT 1
7908: ST_TO_ADDR
// if p3 = 2 then
7909: LD_VAR 0 3
7913: PUSH
7914: LD_INT 2
7916: EQUAL
7917: IFFALSE 7927
// sSpeed := true ;
7919: LD_ADDR_EXP 29
7923: PUSH
7924: LD_INT 1
7926: ST_TO_ADDR
// if p3 = 3 then
7927: LD_VAR 0 3
7931: PUSH
7932: LD_INT 3
7934: EQUAL
7935: IFFALSE 7945
// sEngine := true ;
7937: LD_ADDR_EXP 31
7941: PUSH
7942: LD_INT 1
7944: ST_TO_ADDR
// if p3 = 4 then
7945: LD_VAR 0 3
7949: PUSH
7950: LD_INT 4
7952: EQUAL
7953: IFFALSE 7963
// sSpec := true ;
7955: LD_ADDR_EXP 28
7959: PUSH
7960: LD_INT 1
7962: ST_TO_ADDR
// if p3 = 5 then
7963: LD_VAR 0 3
7967: PUSH
7968: LD_INT 5
7970: EQUAL
7971: IFFALSE 7981
// sLevel := true ;
7973: LD_ADDR_EXP 32
7977: PUSH
7978: LD_INT 1
7980: ST_TO_ADDR
// if p3 = 6 then
7981: LD_VAR 0 3
7985: PUSH
7986: LD_INT 6
7988: EQUAL
7989: IFFALSE 7999
// sArmoury := true ;
7991: LD_ADDR_EXP 33
7995: PUSH
7996: LD_INT 1
7998: ST_TO_ADDR
// if p3 = 7 then
7999: LD_VAR 0 3
8003: PUSH
8004: LD_INT 7
8006: EQUAL
8007: IFFALSE 8017
// sRadar := true ;
8009: LD_ADDR_EXP 34
8013: PUSH
8014: LD_INT 1
8016: ST_TO_ADDR
// if p3 = 8 then
8017: LD_VAR 0 3
8021: PUSH
8022: LD_INT 8
8024: EQUAL
8025: IFFALSE 8035
// sBunker := true ;
8027: LD_ADDR_EXP 35
8031: PUSH
8032: LD_INT 1
8034: ST_TO_ADDR
// if p3 = 9 then
8035: LD_VAR 0 3
8039: PUSH
8040: LD_INT 9
8042: EQUAL
8043: IFFALSE 8053
// sHack := true ;
8045: LD_ADDR_EXP 36
8049: PUSH
8050: LD_INT 1
8052: ST_TO_ADDR
// if p3 = 10 then
8053: LD_VAR 0 3
8057: PUSH
8058: LD_INT 10
8060: EQUAL
8061: IFFALSE 8071
// sFire := true ;
8063: LD_ADDR_EXP 37
8067: PUSH
8068: LD_INT 1
8070: ST_TO_ADDR
// if p3 = 11 then
8071: LD_VAR 0 3
8075: PUSH
8076: LD_INT 11
8078: EQUAL
8079: IFFALSE 8089
// sRefresh := true ;
8081: LD_ADDR_EXP 38
8085: PUSH
8086: LD_INT 1
8088: ST_TO_ADDR
// if p3 = 12 then
8089: LD_VAR 0 3
8093: PUSH
8094: LD_INT 12
8096: EQUAL
8097: IFFALSE 8107
// sExp := true ;
8099: LD_ADDR_EXP 39
8103: PUSH
8104: LD_INT 1
8106: ST_TO_ADDR
// if p3 = 13 then
8107: LD_VAR 0 3
8111: PUSH
8112: LD_INT 13
8114: EQUAL
8115: IFFALSE 8125
// sDepot := true ;
8117: LD_ADDR_EXP 40
8121: PUSH
8122: LD_INT 1
8124: ST_TO_ADDR
// if p3 = 14 then
8125: LD_VAR 0 3
8129: PUSH
8130: LD_INT 14
8132: EQUAL
8133: IFFALSE 8143
// sFlag := true ;
8135: LD_ADDR_EXP 41
8139: PUSH
8140: LD_INT 1
8142: ST_TO_ADDR
// if p3 = 15 then
8143: LD_VAR 0 3
8147: PUSH
8148: LD_INT 15
8150: EQUAL
8151: IFFALSE 8161
// sKamikadze := true ;
8153: LD_ADDR_EXP 49
8157: PUSH
8158: LD_INT 1
8160: ST_TO_ADDR
// if p3 = 16 then
8161: LD_VAR 0 3
8165: PUSH
8166: LD_INT 16
8168: EQUAL
8169: IFFALSE 8179
// sTroll := true ;
8171: LD_ADDR_EXP 50
8175: PUSH
8176: LD_INT 1
8178: ST_TO_ADDR
// if p3 = 17 then
8179: LD_VAR 0 3
8183: PUSH
8184: LD_INT 17
8186: EQUAL
8187: IFFALSE 8197
// sSlow := true ;
8189: LD_ADDR_EXP 51
8193: PUSH
8194: LD_INT 1
8196: ST_TO_ADDR
// if p3 = 18 then
8197: LD_VAR 0 3
8201: PUSH
8202: LD_INT 18
8204: EQUAL
8205: IFFALSE 8215
// sLack := true ;
8207: LD_ADDR_EXP 52
8211: PUSH
8212: LD_INT 1
8214: ST_TO_ADDR
// if p3 = 19 then
8215: LD_VAR 0 3
8219: PUSH
8220: LD_INT 19
8222: EQUAL
8223: IFFALSE 8233
// sTank := true ;
8225: LD_ADDR_EXP 54
8229: PUSH
8230: LD_INT 1
8232: ST_TO_ADDR
// if p3 = 20 then
8233: LD_VAR 0 3
8237: PUSH
8238: LD_INT 20
8240: EQUAL
8241: IFFALSE 8251
// sRemote := true ;
8243: LD_ADDR_EXP 55
8247: PUSH
8248: LD_INT 1
8250: ST_TO_ADDR
// if p3 = 21 then
8251: LD_VAR 0 3
8255: PUSH
8256: LD_INT 21
8258: EQUAL
8259: IFFALSE 8269
// sPowell := true ;
8261: LD_ADDR_EXP 56
8265: PUSH
8266: LD_INT 1
8268: ST_TO_ADDR
// if p3 = 22 then
8269: LD_VAR 0 3
8273: PUSH
8274: LD_INT 22
8276: EQUAL
8277: IFFALSE 8287
// sTeleport := true ;
8279: LD_ADDR_EXP 59
8283: PUSH
8284: LD_INT 1
8286: ST_TO_ADDR
// if p3 = 23 then
8287: LD_VAR 0 3
8291: PUSH
8292: LD_INT 23
8294: EQUAL
8295: IFFALSE 8305
// sOilTower := true ;
8297: LD_ADDR_EXP 61
8301: PUSH
8302: LD_INT 1
8304: ST_TO_ADDR
// if p3 = 24 then
8305: LD_VAR 0 3
8309: PUSH
8310: LD_INT 24
8312: EQUAL
8313: IFFALSE 8323
// sShovel := true ;
8315: LD_ADDR_EXP 62
8319: PUSH
8320: LD_INT 1
8322: ST_TO_ADDR
// if p3 = 25 then
8323: LD_VAR 0 3
8327: PUSH
8328: LD_INT 25
8330: EQUAL
8331: IFFALSE 8341
// sSheik := true ;
8333: LD_ADDR_EXP 63
8337: PUSH
8338: LD_INT 1
8340: ST_TO_ADDR
// if p3 = 26 then
8341: LD_VAR 0 3
8345: PUSH
8346: LD_INT 26
8348: EQUAL
8349: IFFALSE 8359
// sEarthquake := true ;
8351: LD_ADDR_EXP 65
8355: PUSH
8356: LD_INT 1
8358: ST_TO_ADDR
// if p3 = 27 then
8359: LD_VAR 0 3
8363: PUSH
8364: LD_INT 27
8366: EQUAL
8367: IFFALSE 8377
// sAI := true ;
8369: LD_ADDR_EXP 66
8373: PUSH
8374: LD_INT 1
8376: ST_TO_ADDR
// if p3 = 28 then
8377: LD_VAR 0 3
8381: PUSH
8382: LD_INT 28
8384: EQUAL
8385: IFFALSE 8395
// sCargo := true ;
8387: LD_ADDR_EXP 69
8391: PUSH
8392: LD_INT 1
8394: ST_TO_ADDR
// if p3 = 29 then
8395: LD_VAR 0 3
8399: PUSH
8400: LD_INT 29
8402: EQUAL
8403: IFFALSE 8413
// sDLaser := true ;
8405: LD_ADDR_EXP 70
8409: PUSH
8410: LD_INT 1
8412: ST_TO_ADDR
// if p3 = 30 then
8413: LD_VAR 0 3
8417: PUSH
8418: LD_INT 30
8420: EQUAL
8421: IFFALSE 8431
// sExchange := true ;
8423: LD_ADDR_EXP 71
8427: PUSH
8428: LD_INT 1
8430: ST_TO_ADDR
// if p3 = 31 then
8431: LD_VAR 0 3
8435: PUSH
8436: LD_INT 31
8438: EQUAL
8439: IFFALSE 8449
// sFac := true ;
8441: LD_ADDR_EXP 72
8445: PUSH
8446: LD_INT 1
8448: ST_TO_ADDR
// if p3 = 32 then
8449: LD_VAR 0 3
8453: PUSH
8454: LD_INT 32
8456: EQUAL
8457: IFFALSE 8467
// sPower := true ;
8459: LD_ADDR_EXP 73
8463: PUSH
8464: LD_INT 1
8466: ST_TO_ADDR
// if p3 = 33 then
8467: LD_VAR 0 3
8471: PUSH
8472: LD_INT 33
8474: EQUAL
8475: IFFALSE 8485
// sRandom := true ;
8477: LD_ADDR_EXP 74
8481: PUSH
8482: LD_INT 1
8484: ST_TO_ADDR
// if p3 = 34 then
8485: LD_VAR 0 3
8489: PUSH
8490: LD_INT 34
8492: EQUAL
8493: IFFALSE 8503
// sShield := true ;
8495: LD_ADDR_EXP 75
8499: PUSH
8500: LD_INT 1
8502: ST_TO_ADDR
// if p3 = 35 then
8503: LD_VAR 0 3
8507: PUSH
8508: LD_INT 35
8510: EQUAL
8511: IFFALSE 8521
// sTime := true ;
8513: LD_ADDR_EXP 76
8517: PUSH
8518: LD_INT 1
8520: ST_TO_ADDR
// if p3 = 36 then
8521: LD_VAR 0 3
8525: PUSH
8526: LD_INT 36
8528: EQUAL
8529: IFFALSE 8539
// sTools := true ;
8531: LD_ADDR_EXP 77
8535: PUSH
8536: LD_INT 1
8538: ST_TO_ADDR
// if p3 = 101 then
8539: LD_VAR 0 3
8543: PUSH
8544: LD_INT 101
8546: EQUAL
8547: IFFALSE 8557
// sSold := true ;
8549: LD_ADDR_EXP 42
8553: PUSH
8554: LD_INT 1
8556: ST_TO_ADDR
// if p3 = 102 then
8557: LD_VAR 0 3
8561: PUSH
8562: LD_INT 102
8564: EQUAL
8565: IFFALSE 8575
// sDiff := true ;
8567: LD_ADDR_EXP 43
8571: PUSH
8572: LD_INT 1
8574: ST_TO_ADDR
// if p3 = 103 then
8575: LD_VAR 0 3
8579: PUSH
8580: LD_INT 103
8582: EQUAL
8583: IFFALSE 8593
// sFog := true ;
8585: LD_ADDR_EXP 46
8589: PUSH
8590: LD_INT 1
8592: ST_TO_ADDR
// if p3 = 104 then
8593: LD_VAR 0 3
8597: PUSH
8598: LD_INT 104
8600: EQUAL
8601: IFFALSE 8611
// sReset := true ;
8603: LD_ADDR_EXP 47
8607: PUSH
8608: LD_INT 1
8610: ST_TO_ADDR
// if p3 = 105 then
8611: LD_VAR 0 3
8615: PUSH
8616: LD_INT 105
8618: EQUAL
8619: IFFALSE 8629
// sSun := true ;
8621: LD_ADDR_EXP 48
8625: PUSH
8626: LD_INT 1
8628: ST_TO_ADDR
// if p3 = 106 then
8629: LD_VAR 0 3
8633: PUSH
8634: LD_INT 106
8636: EQUAL
8637: IFFALSE 8647
// sTiger := true ;
8639: LD_ADDR_EXP 44
8643: PUSH
8644: LD_INT 1
8646: ST_TO_ADDR
// if p3 = 107 then
8647: LD_VAR 0 3
8651: PUSH
8652: LD_INT 107
8654: EQUAL
8655: IFFALSE 8665
// sBomb := true ;
8657: LD_ADDR_EXP 45
8661: PUSH
8662: LD_INT 1
8664: ST_TO_ADDR
// if p3 = 108 then
8665: LD_VAR 0 3
8669: PUSH
8670: LD_INT 108
8672: EQUAL
8673: IFFALSE 8683
// sWound := true ;
8675: LD_ADDR_EXP 53
8679: PUSH
8680: LD_INT 1
8682: ST_TO_ADDR
// if p3 = 109 then
8683: LD_VAR 0 3
8687: PUSH
8688: LD_INT 109
8690: EQUAL
8691: IFFALSE 8701
// sBetray := true ;
8693: LD_ADDR_EXP 57
8697: PUSH
8698: LD_INT 1
8700: ST_TO_ADDR
// if p3 = 110 then
8701: LD_VAR 0 3
8705: PUSH
8706: LD_INT 110
8708: EQUAL
8709: IFFALSE 8719
// sContamin := true ;
8711: LD_ADDR_EXP 58
8715: PUSH
8716: LD_INT 1
8718: ST_TO_ADDR
// if p3 = 111 then
8719: LD_VAR 0 3
8723: PUSH
8724: LD_INT 111
8726: EQUAL
8727: IFFALSE 8737
// sOil := true ;
8729: LD_ADDR_EXP 60
8733: PUSH
8734: LD_INT 1
8736: ST_TO_ADDR
// if p3 = 112 then
8737: LD_VAR 0 3
8741: PUSH
8742: LD_INT 112
8744: EQUAL
8745: IFFALSE 8755
// sStu := true ;
8747: LD_ADDR_EXP 64
8751: PUSH
8752: LD_INT 1
8754: ST_TO_ADDR
// if p3 = 113 then
8755: LD_VAR 0 3
8759: PUSH
8760: LD_INT 113
8762: EQUAL
8763: IFFALSE 8773
// sBazooka := true ;
8765: LD_ADDR_EXP 67
8769: PUSH
8770: LD_INT 1
8772: ST_TO_ADDR
// if p3 = 114 then
8773: LD_VAR 0 3
8777: PUSH
8778: LD_INT 114
8780: EQUAL
8781: IFFALSE 8791
// sMortar := true ;
8783: LD_ADDR_EXP 68
8787: PUSH
8788: LD_INT 1
8790: ST_TO_ADDR
// if p3 = 115 then
8791: LD_VAR 0 3
8795: PUSH
8796: LD_INT 115
8798: EQUAL
8799: IFFALSE 8809
// sRanger := true ;
8801: LD_ADDR_EXP 78
8805: PUSH
8806: LD_INT 1
8808: ST_TO_ADDR
// if p3 = 116 then
8809: LD_VAR 0 3
8813: PUSH
8814: LD_INT 116
8816: EQUAL
8817: IFFALSE 8827
// sComputer := true ;
8819: LD_ADDR_EXP 79
8823: PUSH
8824: LD_INT 1
8826: ST_TO_ADDR
// if p3 = 117 then
8827: LD_VAR 0 3
8831: PUSH
8832: LD_INT 117
8834: EQUAL
8835: IFFALSE 8845
// s30 := true ;
8837: LD_ADDR_EXP 80
8841: PUSH
8842: LD_INT 1
8844: ST_TO_ADDR
// if p3 = 118 then
8845: LD_VAR 0 3
8849: PUSH
8850: LD_INT 118
8852: EQUAL
8853: IFFALSE 8863
// s60 := true ;
8855: LD_ADDR_EXP 81
8859: PUSH
8860: LD_INT 1
8862: ST_TO_ADDR
// end ; if p2 = hack_mode then
8863: LD_VAR 0 2
8867: PUSH
8868: LD_INT 101
8870: EQUAL
8871: IFFALSE 8999
// begin case p3 of 1 :
8873: LD_VAR 0 3
8877: PUSH
8878: LD_INT 1
8880: DOUBLE
8881: EQUAL
8882: IFTRUE 8886
8884: GO 8893
8886: POP
// hHackUnlimitedResources ; 2 :
8887: CALL 21262 0 0
8891: GO 8999
8893: LD_INT 2
8895: DOUBLE
8896: EQUAL
8897: IFTRUE 8901
8899: GO 8908
8901: POP
// hHackSetLevel10 ; 3 :
8902: CALL 21395 0 0
8906: GO 8999
8908: LD_INT 3
8910: DOUBLE
8911: EQUAL
8912: IFTRUE 8916
8914: GO 8923
8916: POP
// hHackSetLevel10YourUnits ; 4 :
8917: CALL 21480 0 0
8921: GO 8999
8923: LD_INT 4
8925: DOUBLE
8926: EQUAL
8927: IFTRUE 8931
8929: GO 8938
8931: POP
// hHackInvincible ; 5 :
8932: CALL 21928 0 0
8936: GO 8999
8938: LD_INT 5
8940: DOUBLE
8941: EQUAL
8942: IFTRUE 8946
8944: GO 8953
8946: POP
// hHackInvisible ; 6 :
8947: CALL 22039 0 0
8951: GO 8999
8953: LD_INT 6
8955: DOUBLE
8956: EQUAL
8957: IFTRUE 8961
8959: GO 8968
8961: POP
// hHackChangeYourSide ; 7 :
8962: CALL 22096 0 0
8966: GO 8999
8968: LD_INT 7
8970: DOUBLE
8971: EQUAL
8972: IFTRUE 8976
8974: GO 8983
8976: POP
// hHackChangeUnitSide ; 8 :
8977: CALL 22138 0 0
8981: GO 8999
8983: LD_INT 8
8985: DOUBLE
8986: EQUAL
8987: IFTRUE 8991
8989: GO 8998
8991: POP
// hHackFog ; end ;
8992: CALL 22239 0 0
8996: GO 8999
8998: POP
// end ; if p2 = game_save_mode then
8999: LD_VAR 0 2
9003: PUSH
9004: LD_INT 102
9006: EQUAL
9007: IFFALSE 9064
// begin if p3 = 1 then
9009: LD_VAR 0 3
9013: PUSH
9014: LD_INT 1
9016: EQUAL
9017: IFFALSE 9029
// globalGameSaveCounter := p4 ;
9019: LD_ADDR_EXP 24
9023: PUSH
9024: LD_VAR 0 4
9028: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
9029: LD_VAR 0 3
9033: PUSH
9034: LD_INT 2
9036: EQUAL
9037: IFFALSE 9045
9039: PUSH
9040: LD_EXP 24
9044: AND
9045: IFFALSE 9064
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9047: LD_STRING setGameSaveCounter(
9049: PUSH
9050: LD_EXP 24
9054: STR
9055: PUSH
9056: LD_STRING )
9058: STR
9059: PPUSH
9060: CALL_OW 559
// end ; end ;
9064: LD_VAR 0 7
9068: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
9069: LD_INT 0
9071: PPUSH
// streamModeActive := false ;
9072: LD_ADDR_EXP 25
9076: PUSH
9077: LD_INT 0
9079: ST_TO_ADDR
// normalCounter := 36 ;
9080: LD_ADDR_EXP 26
9084: PUSH
9085: LD_INT 36
9087: ST_TO_ADDR
// hardcoreCounter := 18 ;
9088: LD_ADDR_EXP 27
9092: PUSH
9093: LD_INT 18
9095: ST_TO_ADDR
// sRocket := false ;
9096: LD_ADDR_EXP 30
9100: PUSH
9101: LD_INT 0
9103: ST_TO_ADDR
// sSpeed := false ;
9104: LD_ADDR_EXP 29
9108: PUSH
9109: LD_INT 0
9111: ST_TO_ADDR
// sEngine := false ;
9112: LD_ADDR_EXP 31
9116: PUSH
9117: LD_INT 0
9119: ST_TO_ADDR
// sSpec := false ;
9120: LD_ADDR_EXP 28
9124: PUSH
9125: LD_INT 0
9127: ST_TO_ADDR
// sLevel := false ;
9128: LD_ADDR_EXP 32
9132: PUSH
9133: LD_INT 0
9135: ST_TO_ADDR
// sArmoury := false ;
9136: LD_ADDR_EXP 33
9140: PUSH
9141: LD_INT 0
9143: ST_TO_ADDR
// sRadar := false ;
9144: LD_ADDR_EXP 34
9148: PUSH
9149: LD_INT 0
9151: ST_TO_ADDR
// sBunker := false ;
9152: LD_ADDR_EXP 35
9156: PUSH
9157: LD_INT 0
9159: ST_TO_ADDR
// sHack := false ;
9160: LD_ADDR_EXP 36
9164: PUSH
9165: LD_INT 0
9167: ST_TO_ADDR
// sFire := false ;
9168: LD_ADDR_EXP 37
9172: PUSH
9173: LD_INT 0
9175: ST_TO_ADDR
// sRefresh := false ;
9176: LD_ADDR_EXP 38
9180: PUSH
9181: LD_INT 0
9183: ST_TO_ADDR
// sExp := false ;
9184: LD_ADDR_EXP 39
9188: PUSH
9189: LD_INT 0
9191: ST_TO_ADDR
// sDepot := false ;
9192: LD_ADDR_EXP 40
9196: PUSH
9197: LD_INT 0
9199: ST_TO_ADDR
// sFlag := false ;
9200: LD_ADDR_EXP 41
9204: PUSH
9205: LD_INT 0
9207: ST_TO_ADDR
// sKamikadze := false ;
9208: LD_ADDR_EXP 49
9212: PUSH
9213: LD_INT 0
9215: ST_TO_ADDR
// sTroll := false ;
9216: LD_ADDR_EXP 50
9220: PUSH
9221: LD_INT 0
9223: ST_TO_ADDR
// sSlow := false ;
9224: LD_ADDR_EXP 51
9228: PUSH
9229: LD_INT 0
9231: ST_TO_ADDR
// sLack := false ;
9232: LD_ADDR_EXP 52
9236: PUSH
9237: LD_INT 0
9239: ST_TO_ADDR
// sTank := false ;
9240: LD_ADDR_EXP 54
9244: PUSH
9245: LD_INT 0
9247: ST_TO_ADDR
// sRemote := false ;
9248: LD_ADDR_EXP 55
9252: PUSH
9253: LD_INT 0
9255: ST_TO_ADDR
// sPowell := false ;
9256: LD_ADDR_EXP 56
9260: PUSH
9261: LD_INT 0
9263: ST_TO_ADDR
// sTeleport := false ;
9264: LD_ADDR_EXP 59
9268: PUSH
9269: LD_INT 0
9271: ST_TO_ADDR
// sOilTower := false ;
9272: LD_ADDR_EXP 61
9276: PUSH
9277: LD_INT 0
9279: ST_TO_ADDR
// sShovel := false ;
9280: LD_ADDR_EXP 62
9284: PUSH
9285: LD_INT 0
9287: ST_TO_ADDR
// sSheik := false ;
9288: LD_ADDR_EXP 63
9292: PUSH
9293: LD_INT 0
9295: ST_TO_ADDR
// sEarthquake := false ;
9296: LD_ADDR_EXP 65
9300: PUSH
9301: LD_INT 0
9303: ST_TO_ADDR
// sAI := false ;
9304: LD_ADDR_EXP 66
9308: PUSH
9309: LD_INT 0
9311: ST_TO_ADDR
// sCargo := false ;
9312: LD_ADDR_EXP 69
9316: PUSH
9317: LD_INT 0
9319: ST_TO_ADDR
// sDLaser := false ;
9320: LD_ADDR_EXP 70
9324: PUSH
9325: LD_INT 0
9327: ST_TO_ADDR
// sExchange := false ;
9328: LD_ADDR_EXP 71
9332: PUSH
9333: LD_INT 0
9335: ST_TO_ADDR
// sFac := false ;
9336: LD_ADDR_EXP 72
9340: PUSH
9341: LD_INT 0
9343: ST_TO_ADDR
// sPower := false ;
9344: LD_ADDR_EXP 73
9348: PUSH
9349: LD_INT 0
9351: ST_TO_ADDR
// sRandom := false ;
9352: LD_ADDR_EXP 74
9356: PUSH
9357: LD_INT 0
9359: ST_TO_ADDR
// sShield := false ;
9360: LD_ADDR_EXP 75
9364: PUSH
9365: LD_INT 0
9367: ST_TO_ADDR
// sTime := false ;
9368: LD_ADDR_EXP 76
9372: PUSH
9373: LD_INT 0
9375: ST_TO_ADDR
// sTools := false ;
9376: LD_ADDR_EXP 77
9380: PUSH
9381: LD_INT 0
9383: ST_TO_ADDR
// sSold := false ;
9384: LD_ADDR_EXP 42
9388: PUSH
9389: LD_INT 0
9391: ST_TO_ADDR
// sDiff := false ;
9392: LD_ADDR_EXP 43
9396: PUSH
9397: LD_INT 0
9399: ST_TO_ADDR
// sFog := false ;
9400: LD_ADDR_EXP 46
9404: PUSH
9405: LD_INT 0
9407: ST_TO_ADDR
// sReset := false ;
9408: LD_ADDR_EXP 47
9412: PUSH
9413: LD_INT 0
9415: ST_TO_ADDR
// sSun := false ;
9416: LD_ADDR_EXP 48
9420: PUSH
9421: LD_INT 0
9423: ST_TO_ADDR
// sTiger := false ;
9424: LD_ADDR_EXP 44
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
// sBomb := false ;
9432: LD_ADDR_EXP 45
9436: PUSH
9437: LD_INT 0
9439: ST_TO_ADDR
// sWound := false ;
9440: LD_ADDR_EXP 53
9444: PUSH
9445: LD_INT 0
9447: ST_TO_ADDR
// sBetray := false ;
9448: LD_ADDR_EXP 57
9452: PUSH
9453: LD_INT 0
9455: ST_TO_ADDR
// sContamin := false ;
9456: LD_ADDR_EXP 58
9460: PUSH
9461: LD_INT 0
9463: ST_TO_ADDR
// sOil := false ;
9464: LD_ADDR_EXP 60
9468: PUSH
9469: LD_INT 0
9471: ST_TO_ADDR
// sStu := false ;
9472: LD_ADDR_EXP 64
9476: PUSH
9477: LD_INT 0
9479: ST_TO_ADDR
// sBazooka := false ;
9480: LD_ADDR_EXP 67
9484: PUSH
9485: LD_INT 0
9487: ST_TO_ADDR
// sMortar := false ;
9488: LD_ADDR_EXP 68
9492: PUSH
9493: LD_INT 0
9495: ST_TO_ADDR
// sRanger := false ;
9496: LD_ADDR_EXP 78
9500: PUSH
9501: LD_INT 0
9503: ST_TO_ADDR
// sComputer := false ;
9504: LD_ADDR_EXP 79
9508: PUSH
9509: LD_INT 0
9511: ST_TO_ADDR
// s30 := false ;
9512: LD_ADDR_EXP 80
9516: PUSH
9517: LD_INT 0
9519: ST_TO_ADDR
// s60 := false ;
9520: LD_ADDR_EXP 81
9524: PUSH
9525: LD_INT 0
9527: ST_TO_ADDR
// end ;
9528: LD_VAR 0 1
9532: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9533: LD_INT 0
9535: PPUSH
9536: PPUSH
9537: PPUSH
9538: PPUSH
9539: PPUSH
9540: PPUSH
9541: PPUSH
// result := [ ] ;
9542: LD_ADDR_VAR 0 2
9546: PUSH
9547: EMPTY
9548: ST_TO_ADDR
// if campaign_id = 1 then
9549: LD_OWVAR 69
9553: PUSH
9554: LD_INT 1
9556: EQUAL
9557: IFFALSE 12723
// begin case mission_number of 1 :
9559: LD_OWVAR 70
9563: PUSH
9564: LD_INT 1
9566: DOUBLE
9567: EQUAL
9568: IFTRUE 9572
9570: GO 9648
9572: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9573: LD_ADDR_VAR 0 2
9577: PUSH
9578: LD_INT 2
9580: PUSH
9581: LD_INT 4
9583: PUSH
9584: LD_INT 11
9586: PUSH
9587: LD_INT 12
9589: PUSH
9590: LD_INT 15
9592: PUSH
9593: LD_INT 16
9595: PUSH
9596: LD_INT 22
9598: PUSH
9599: LD_INT 23
9601: PUSH
9602: LD_INT 26
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 101
9618: PUSH
9619: LD_INT 102
9621: PUSH
9622: LD_INT 106
9624: PUSH
9625: LD_INT 116
9627: PUSH
9628: LD_INT 117
9630: PUSH
9631: LD_INT 118
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: ST_TO_ADDR
9646: GO 12721
9648: LD_INT 2
9650: DOUBLE
9651: EQUAL
9652: IFTRUE 9656
9654: GO 9740
9656: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9657: LD_ADDR_VAR 0 2
9661: PUSH
9662: LD_INT 2
9664: PUSH
9665: LD_INT 4
9667: PUSH
9668: LD_INT 11
9670: PUSH
9671: LD_INT 12
9673: PUSH
9674: LD_INT 15
9676: PUSH
9677: LD_INT 16
9679: PUSH
9680: LD_INT 22
9682: PUSH
9683: LD_INT 23
9685: PUSH
9686: LD_INT 26
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 101
9702: PUSH
9703: LD_INT 102
9705: PUSH
9706: LD_INT 105
9708: PUSH
9709: LD_INT 106
9711: PUSH
9712: LD_INT 108
9714: PUSH
9715: LD_INT 116
9717: PUSH
9718: LD_INT 117
9720: PUSH
9721: LD_INT 118
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: ST_TO_ADDR
9738: GO 12721
9740: LD_INT 3
9742: DOUBLE
9743: EQUAL
9744: IFTRUE 9748
9746: GO 9836
9748: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9749: LD_ADDR_VAR 0 2
9753: PUSH
9754: LD_INT 2
9756: PUSH
9757: LD_INT 4
9759: PUSH
9760: LD_INT 5
9762: PUSH
9763: LD_INT 11
9765: PUSH
9766: LD_INT 12
9768: PUSH
9769: LD_INT 15
9771: PUSH
9772: LD_INT 16
9774: PUSH
9775: LD_INT 22
9777: PUSH
9778: LD_INT 26
9780: PUSH
9781: LD_INT 36
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: PUSH
9796: LD_INT 101
9798: PUSH
9799: LD_INT 102
9801: PUSH
9802: LD_INT 105
9804: PUSH
9805: LD_INT 106
9807: PUSH
9808: LD_INT 108
9810: PUSH
9811: LD_INT 116
9813: PUSH
9814: LD_INT 117
9816: PUSH
9817: LD_INT 118
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: ST_TO_ADDR
9834: GO 12721
9836: LD_INT 4
9838: DOUBLE
9839: EQUAL
9840: IFTRUE 9844
9842: GO 9940
9844: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9845: LD_ADDR_VAR 0 2
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: LD_INT 4
9855: PUSH
9856: LD_INT 5
9858: PUSH
9859: LD_INT 8
9861: PUSH
9862: LD_INT 11
9864: PUSH
9865: LD_INT 12
9867: PUSH
9868: LD_INT 15
9870: PUSH
9871: LD_INT 16
9873: PUSH
9874: LD_INT 22
9876: PUSH
9877: LD_INT 23
9879: PUSH
9880: LD_INT 26
9882: PUSH
9883: LD_INT 36
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: PUSH
9900: LD_INT 101
9902: PUSH
9903: LD_INT 102
9905: PUSH
9906: LD_INT 105
9908: PUSH
9909: LD_INT 106
9911: PUSH
9912: LD_INT 108
9914: PUSH
9915: LD_INT 116
9917: PUSH
9918: LD_INT 117
9920: PUSH
9921: LD_INT 118
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: ST_TO_ADDR
9938: GO 12721
9940: LD_INT 5
9942: DOUBLE
9943: EQUAL
9944: IFTRUE 9948
9946: GO 10060
9948: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9949: LD_ADDR_VAR 0 2
9953: PUSH
9954: LD_INT 2
9956: PUSH
9957: LD_INT 4
9959: PUSH
9960: LD_INT 5
9962: PUSH
9963: LD_INT 6
9965: PUSH
9966: LD_INT 8
9968: PUSH
9969: LD_INT 11
9971: PUSH
9972: LD_INT 12
9974: PUSH
9975: LD_INT 15
9977: PUSH
9978: LD_INT 16
9980: PUSH
9981: LD_INT 22
9983: PUSH
9984: LD_INT 23
9986: PUSH
9987: LD_INT 25
9989: PUSH
9990: LD_INT 26
9992: PUSH
9993: LD_INT 36
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 101
10014: PUSH
10015: LD_INT 102
10017: PUSH
10018: LD_INT 105
10020: PUSH
10021: LD_INT 106
10023: PUSH
10024: LD_INT 108
10026: PUSH
10027: LD_INT 109
10029: PUSH
10030: LD_INT 112
10032: PUSH
10033: LD_INT 116
10035: PUSH
10036: LD_INT 117
10038: PUSH
10039: LD_INT 118
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: ST_TO_ADDR
10058: GO 12721
10060: LD_INT 6
10062: DOUBLE
10063: EQUAL
10064: IFTRUE 10068
10066: GO 10200
10068: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10069: LD_ADDR_VAR 0 2
10073: PUSH
10074: LD_INT 2
10076: PUSH
10077: LD_INT 4
10079: PUSH
10080: LD_INT 5
10082: PUSH
10083: LD_INT 6
10085: PUSH
10086: LD_INT 8
10088: PUSH
10089: LD_INT 11
10091: PUSH
10092: LD_INT 12
10094: PUSH
10095: LD_INT 15
10097: PUSH
10098: LD_INT 16
10100: PUSH
10101: LD_INT 20
10103: PUSH
10104: LD_INT 21
10106: PUSH
10107: LD_INT 22
10109: PUSH
10110: LD_INT 23
10112: PUSH
10113: LD_INT 25
10115: PUSH
10116: LD_INT 26
10118: PUSH
10119: LD_INT 30
10121: PUSH
10122: LD_INT 31
10124: PUSH
10125: LD_INT 32
10127: PUSH
10128: LD_INT 36
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: PUSH
10152: LD_INT 101
10154: PUSH
10155: LD_INT 102
10157: PUSH
10158: LD_INT 105
10160: PUSH
10161: LD_INT 106
10163: PUSH
10164: LD_INT 108
10166: PUSH
10167: LD_INT 109
10169: PUSH
10170: LD_INT 112
10172: PUSH
10173: LD_INT 116
10175: PUSH
10176: LD_INT 117
10178: PUSH
10179: LD_INT 118
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: ST_TO_ADDR
10198: GO 12721
10200: LD_INT 7
10202: DOUBLE
10203: EQUAL
10204: IFTRUE 10208
10206: GO 10320
10208: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10209: LD_ADDR_VAR 0 2
10213: PUSH
10214: LD_INT 2
10216: PUSH
10217: LD_INT 4
10219: PUSH
10220: LD_INT 5
10222: PUSH
10223: LD_INT 7
10225: PUSH
10226: LD_INT 11
10228: PUSH
10229: LD_INT 12
10231: PUSH
10232: LD_INT 15
10234: PUSH
10235: LD_INT 16
10237: PUSH
10238: LD_INT 20
10240: PUSH
10241: LD_INT 21
10243: PUSH
10244: LD_INT 22
10246: PUSH
10247: LD_INT 23
10249: PUSH
10250: LD_INT 25
10252: PUSH
10253: LD_INT 26
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: PUSH
10272: LD_INT 101
10274: PUSH
10275: LD_INT 102
10277: PUSH
10278: LD_INT 103
10280: PUSH
10281: LD_INT 105
10283: PUSH
10284: LD_INT 106
10286: PUSH
10287: LD_INT 108
10289: PUSH
10290: LD_INT 112
10292: PUSH
10293: LD_INT 116
10295: PUSH
10296: LD_INT 117
10298: PUSH
10299: LD_INT 118
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: ST_TO_ADDR
10318: GO 12721
10320: LD_INT 8
10322: DOUBLE
10323: EQUAL
10324: IFTRUE 10328
10326: GO 10468
10328: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10329: LD_ADDR_VAR 0 2
10333: PUSH
10334: LD_INT 2
10336: PUSH
10337: LD_INT 4
10339: PUSH
10340: LD_INT 5
10342: PUSH
10343: LD_INT 6
10345: PUSH
10346: LD_INT 7
10348: PUSH
10349: LD_INT 8
10351: PUSH
10352: LD_INT 11
10354: PUSH
10355: LD_INT 12
10357: PUSH
10358: LD_INT 15
10360: PUSH
10361: LD_INT 16
10363: PUSH
10364: LD_INT 20
10366: PUSH
10367: LD_INT 21
10369: PUSH
10370: LD_INT 22
10372: PUSH
10373: LD_INT 23
10375: PUSH
10376: LD_INT 25
10378: PUSH
10379: LD_INT 26
10381: PUSH
10382: LD_INT 30
10384: PUSH
10385: LD_INT 31
10387: PUSH
10388: LD_INT 32
10390: PUSH
10391: LD_INT 36
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: PUSH
10416: LD_INT 101
10418: PUSH
10419: LD_INT 102
10421: PUSH
10422: LD_INT 103
10424: PUSH
10425: LD_INT 105
10427: PUSH
10428: LD_INT 106
10430: PUSH
10431: LD_INT 108
10433: PUSH
10434: LD_INT 109
10436: PUSH
10437: LD_INT 112
10439: PUSH
10440: LD_INT 116
10442: PUSH
10443: LD_INT 117
10445: PUSH
10446: LD_INT 118
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: ST_TO_ADDR
10466: GO 12721
10468: LD_INT 9
10470: DOUBLE
10471: EQUAL
10472: IFTRUE 10476
10474: GO 10624
10476: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10477: LD_ADDR_VAR 0 2
10481: PUSH
10482: LD_INT 2
10484: PUSH
10485: LD_INT 4
10487: PUSH
10488: LD_INT 5
10490: PUSH
10491: LD_INT 6
10493: PUSH
10494: LD_INT 7
10496: PUSH
10497: LD_INT 8
10499: PUSH
10500: LD_INT 11
10502: PUSH
10503: LD_INT 12
10505: PUSH
10506: LD_INT 15
10508: PUSH
10509: LD_INT 16
10511: PUSH
10512: LD_INT 20
10514: PUSH
10515: LD_INT 21
10517: PUSH
10518: LD_INT 22
10520: PUSH
10521: LD_INT 23
10523: PUSH
10524: LD_INT 25
10526: PUSH
10527: LD_INT 26
10529: PUSH
10530: LD_INT 28
10532: PUSH
10533: LD_INT 30
10535: PUSH
10536: LD_INT 31
10538: PUSH
10539: LD_INT 32
10541: PUSH
10542: LD_INT 36
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: LD_INT 101
10570: PUSH
10571: LD_INT 102
10573: PUSH
10574: LD_INT 103
10576: PUSH
10577: LD_INT 105
10579: PUSH
10580: LD_INT 106
10582: PUSH
10583: LD_INT 108
10585: PUSH
10586: LD_INT 109
10588: PUSH
10589: LD_INT 112
10591: PUSH
10592: LD_INT 114
10594: PUSH
10595: LD_INT 116
10597: PUSH
10598: LD_INT 117
10600: PUSH
10601: LD_INT 118
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: ST_TO_ADDR
10622: GO 12721
10624: LD_INT 10
10626: DOUBLE
10627: EQUAL
10628: IFTRUE 10632
10630: GO 10828
10632: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10633: LD_ADDR_VAR 0 2
10637: PUSH
10638: LD_INT 2
10640: PUSH
10641: LD_INT 4
10643: PUSH
10644: LD_INT 5
10646: PUSH
10647: LD_INT 6
10649: PUSH
10650: LD_INT 7
10652: PUSH
10653: LD_INT 8
10655: PUSH
10656: LD_INT 9
10658: PUSH
10659: LD_INT 10
10661: PUSH
10662: LD_INT 11
10664: PUSH
10665: LD_INT 12
10667: PUSH
10668: LD_INT 13
10670: PUSH
10671: LD_INT 14
10673: PUSH
10674: LD_INT 15
10676: PUSH
10677: LD_INT 16
10679: PUSH
10680: LD_INT 17
10682: PUSH
10683: LD_INT 18
10685: PUSH
10686: LD_INT 19
10688: PUSH
10689: LD_INT 20
10691: PUSH
10692: LD_INT 21
10694: PUSH
10695: LD_INT 22
10697: PUSH
10698: LD_INT 23
10700: PUSH
10701: LD_INT 24
10703: PUSH
10704: LD_INT 25
10706: PUSH
10707: LD_INT 26
10709: PUSH
10710: LD_INT 28
10712: PUSH
10713: LD_INT 30
10715: PUSH
10716: LD_INT 31
10718: PUSH
10719: LD_INT 32
10721: PUSH
10722: LD_INT 36
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: PUSH
10756: LD_INT 101
10758: PUSH
10759: LD_INT 102
10761: PUSH
10762: LD_INT 103
10764: PUSH
10765: LD_INT 104
10767: PUSH
10768: LD_INT 105
10770: PUSH
10771: LD_INT 106
10773: PUSH
10774: LD_INT 107
10776: PUSH
10777: LD_INT 108
10779: PUSH
10780: LD_INT 109
10782: PUSH
10783: LD_INT 110
10785: PUSH
10786: LD_INT 111
10788: PUSH
10789: LD_INT 112
10791: PUSH
10792: LD_INT 114
10794: PUSH
10795: LD_INT 116
10797: PUSH
10798: LD_INT 117
10800: PUSH
10801: LD_INT 118
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: ST_TO_ADDR
10826: GO 12721
10828: LD_INT 11
10830: DOUBLE
10831: EQUAL
10832: IFTRUE 10836
10834: GO 11040
10836: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10837: LD_ADDR_VAR 0 2
10841: PUSH
10842: LD_INT 2
10844: PUSH
10845: LD_INT 3
10847: PUSH
10848: LD_INT 4
10850: PUSH
10851: LD_INT 5
10853: PUSH
10854: LD_INT 6
10856: PUSH
10857: LD_INT 7
10859: PUSH
10860: LD_INT 8
10862: PUSH
10863: LD_INT 9
10865: PUSH
10866: LD_INT 10
10868: PUSH
10869: LD_INT 11
10871: PUSH
10872: LD_INT 12
10874: PUSH
10875: LD_INT 13
10877: PUSH
10878: LD_INT 14
10880: PUSH
10881: LD_INT 15
10883: PUSH
10884: LD_INT 16
10886: PUSH
10887: LD_INT 17
10889: PUSH
10890: LD_INT 18
10892: PUSH
10893: LD_INT 19
10895: PUSH
10896: LD_INT 20
10898: PUSH
10899: LD_INT 21
10901: PUSH
10902: LD_INT 22
10904: PUSH
10905: LD_INT 23
10907: PUSH
10908: LD_INT 24
10910: PUSH
10911: LD_INT 25
10913: PUSH
10914: LD_INT 26
10916: PUSH
10917: LD_INT 28
10919: PUSH
10920: LD_INT 30
10922: PUSH
10923: LD_INT 31
10925: PUSH
10926: LD_INT 32
10928: PUSH
10929: LD_INT 34
10931: PUSH
10932: LD_INT 36
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: PUSH
10968: LD_INT 101
10970: PUSH
10971: LD_INT 102
10973: PUSH
10974: LD_INT 103
10976: PUSH
10977: LD_INT 104
10979: PUSH
10980: LD_INT 105
10982: PUSH
10983: LD_INT 106
10985: PUSH
10986: LD_INT 107
10988: PUSH
10989: LD_INT 108
10991: PUSH
10992: LD_INT 109
10994: PUSH
10995: LD_INT 110
10997: PUSH
10998: LD_INT 111
11000: PUSH
11001: LD_INT 112
11003: PUSH
11004: LD_INT 114
11006: PUSH
11007: LD_INT 116
11009: PUSH
11010: LD_INT 117
11012: PUSH
11013: LD_INT 118
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: ST_TO_ADDR
11038: GO 12721
11040: LD_INT 12
11042: DOUBLE
11043: EQUAL
11044: IFTRUE 11048
11046: GO 11268
11048: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11049: LD_ADDR_VAR 0 2
11053: PUSH
11054: LD_INT 1
11056: PUSH
11057: LD_INT 2
11059: PUSH
11060: LD_INT 3
11062: PUSH
11063: LD_INT 4
11065: PUSH
11066: LD_INT 5
11068: PUSH
11069: LD_INT 6
11071: PUSH
11072: LD_INT 7
11074: PUSH
11075: LD_INT 8
11077: PUSH
11078: LD_INT 9
11080: PUSH
11081: LD_INT 10
11083: PUSH
11084: LD_INT 11
11086: PUSH
11087: LD_INT 12
11089: PUSH
11090: LD_INT 13
11092: PUSH
11093: LD_INT 14
11095: PUSH
11096: LD_INT 15
11098: PUSH
11099: LD_INT 16
11101: PUSH
11102: LD_INT 17
11104: PUSH
11105: LD_INT 18
11107: PUSH
11108: LD_INT 19
11110: PUSH
11111: LD_INT 20
11113: PUSH
11114: LD_INT 21
11116: PUSH
11117: LD_INT 22
11119: PUSH
11120: LD_INT 23
11122: PUSH
11123: LD_INT 24
11125: PUSH
11126: LD_INT 25
11128: PUSH
11129: LD_INT 26
11131: PUSH
11132: LD_INT 27
11134: PUSH
11135: LD_INT 28
11137: PUSH
11138: LD_INT 30
11140: PUSH
11141: LD_INT 31
11143: PUSH
11144: LD_INT 32
11146: PUSH
11147: LD_INT 33
11149: PUSH
11150: LD_INT 34
11152: PUSH
11153: LD_INT 36
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 101
11194: PUSH
11195: LD_INT 102
11197: PUSH
11198: LD_INT 103
11200: PUSH
11201: LD_INT 104
11203: PUSH
11204: LD_INT 105
11206: PUSH
11207: LD_INT 106
11209: PUSH
11210: LD_INT 107
11212: PUSH
11213: LD_INT 108
11215: PUSH
11216: LD_INT 109
11218: PUSH
11219: LD_INT 110
11221: PUSH
11222: LD_INT 111
11224: PUSH
11225: LD_INT 112
11227: PUSH
11228: LD_INT 113
11230: PUSH
11231: LD_INT 114
11233: PUSH
11234: LD_INT 116
11236: PUSH
11237: LD_INT 117
11239: PUSH
11240: LD_INT 118
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: ST_TO_ADDR
11266: GO 12721
11268: LD_INT 13
11270: DOUBLE
11271: EQUAL
11272: IFTRUE 11276
11274: GO 11484
11276: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11277: LD_ADDR_VAR 0 2
11281: PUSH
11282: LD_INT 1
11284: PUSH
11285: LD_INT 2
11287: PUSH
11288: LD_INT 3
11290: PUSH
11291: LD_INT 4
11293: PUSH
11294: LD_INT 5
11296: PUSH
11297: LD_INT 8
11299: PUSH
11300: LD_INT 9
11302: PUSH
11303: LD_INT 10
11305: PUSH
11306: LD_INT 11
11308: PUSH
11309: LD_INT 12
11311: PUSH
11312: LD_INT 14
11314: PUSH
11315: LD_INT 15
11317: PUSH
11318: LD_INT 16
11320: PUSH
11321: LD_INT 17
11323: PUSH
11324: LD_INT 18
11326: PUSH
11327: LD_INT 19
11329: PUSH
11330: LD_INT 20
11332: PUSH
11333: LD_INT 21
11335: PUSH
11336: LD_INT 22
11338: PUSH
11339: LD_INT 23
11341: PUSH
11342: LD_INT 24
11344: PUSH
11345: LD_INT 25
11347: PUSH
11348: LD_INT 26
11350: PUSH
11351: LD_INT 27
11353: PUSH
11354: LD_INT 28
11356: PUSH
11357: LD_INT 30
11359: PUSH
11360: LD_INT 31
11362: PUSH
11363: LD_INT 32
11365: PUSH
11366: LD_INT 33
11368: PUSH
11369: LD_INT 34
11371: PUSH
11372: LD_INT 36
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: PUSH
11408: LD_INT 101
11410: PUSH
11411: LD_INT 102
11413: PUSH
11414: LD_INT 103
11416: PUSH
11417: LD_INT 104
11419: PUSH
11420: LD_INT 105
11422: PUSH
11423: LD_INT 106
11425: PUSH
11426: LD_INT 107
11428: PUSH
11429: LD_INT 108
11431: PUSH
11432: LD_INT 109
11434: PUSH
11435: LD_INT 110
11437: PUSH
11438: LD_INT 111
11440: PUSH
11441: LD_INT 112
11443: PUSH
11444: LD_INT 113
11446: PUSH
11447: LD_INT 114
11449: PUSH
11450: LD_INT 116
11452: PUSH
11453: LD_INT 117
11455: PUSH
11456: LD_INT 118
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: ST_TO_ADDR
11482: GO 12721
11484: LD_INT 14
11486: DOUBLE
11487: EQUAL
11488: IFTRUE 11492
11490: GO 11716
11492: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11493: LD_ADDR_VAR 0 2
11497: PUSH
11498: LD_INT 1
11500: PUSH
11501: LD_INT 2
11503: PUSH
11504: LD_INT 3
11506: PUSH
11507: LD_INT 4
11509: PUSH
11510: LD_INT 5
11512: PUSH
11513: LD_INT 6
11515: PUSH
11516: LD_INT 7
11518: PUSH
11519: LD_INT 8
11521: PUSH
11522: LD_INT 9
11524: PUSH
11525: LD_INT 10
11527: PUSH
11528: LD_INT 11
11530: PUSH
11531: LD_INT 12
11533: PUSH
11534: LD_INT 13
11536: PUSH
11537: LD_INT 14
11539: PUSH
11540: LD_INT 15
11542: PUSH
11543: LD_INT 16
11545: PUSH
11546: LD_INT 17
11548: PUSH
11549: LD_INT 18
11551: PUSH
11552: LD_INT 19
11554: PUSH
11555: LD_INT 20
11557: PUSH
11558: LD_INT 21
11560: PUSH
11561: LD_INT 22
11563: PUSH
11564: LD_INT 23
11566: PUSH
11567: LD_INT 24
11569: PUSH
11570: LD_INT 25
11572: PUSH
11573: LD_INT 26
11575: PUSH
11576: LD_INT 27
11578: PUSH
11579: LD_INT 28
11581: PUSH
11582: LD_INT 29
11584: PUSH
11585: LD_INT 30
11587: PUSH
11588: LD_INT 31
11590: PUSH
11591: LD_INT 32
11593: PUSH
11594: LD_INT 33
11596: PUSH
11597: LD_INT 34
11599: PUSH
11600: LD_INT 36
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 101
11642: PUSH
11643: LD_INT 102
11645: PUSH
11646: LD_INT 103
11648: PUSH
11649: LD_INT 104
11651: PUSH
11652: LD_INT 105
11654: PUSH
11655: LD_INT 106
11657: PUSH
11658: LD_INT 107
11660: PUSH
11661: LD_INT 108
11663: PUSH
11664: LD_INT 109
11666: PUSH
11667: LD_INT 110
11669: PUSH
11670: LD_INT 111
11672: PUSH
11673: LD_INT 112
11675: PUSH
11676: LD_INT 113
11678: PUSH
11679: LD_INT 114
11681: PUSH
11682: LD_INT 116
11684: PUSH
11685: LD_INT 117
11687: PUSH
11688: LD_INT 118
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: ST_TO_ADDR
11714: GO 12721
11716: LD_INT 15
11718: DOUBLE
11719: EQUAL
11720: IFTRUE 11724
11722: GO 11948
11724: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11725: LD_ADDR_VAR 0 2
11729: PUSH
11730: LD_INT 1
11732: PUSH
11733: LD_INT 2
11735: PUSH
11736: LD_INT 3
11738: PUSH
11739: LD_INT 4
11741: PUSH
11742: LD_INT 5
11744: PUSH
11745: LD_INT 6
11747: PUSH
11748: LD_INT 7
11750: PUSH
11751: LD_INT 8
11753: PUSH
11754: LD_INT 9
11756: PUSH
11757: LD_INT 10
11759: PUSH
11760: LD_INT 11
11762: PUSH
11763: LD_INT 12
11765: PUSH
11766: LD_INT 13
11768: PUSH
11769: LD_INT 14
11771: PUSH
11772: LD_INT 15
11774: PUSH
11775: LD_INT 16
11777: PUSH
11778: LD_INT 17
11780: PUSH
11781: LD_INT 18
11783: PUSH
11784: LD_INT 19
11786: PUSH
11787: LD_INT 20
11789: PUSH
11790: LD_INT 21
11792: PUSH
11793: LD_INT 22
11795: PUSH
11796: LD_INT 23
11798: PUSH
11799: LD_INT 24
11801: PUSH
11802: LD_INT 25
11804: PUSH
11805: LD_INT 26
11807: PUSH
11808: LD_INT 27
11810: PUSH
11811: LD_INT 28
11813: PUSH
11814: LD_INT 29
11816: PUSH
11817: LD_INT 30
11819: PUSH
11820: LD_INT 31
11822: PUSH
11823: LD_INT 32
11825: PUSH
11826: LD_INT 33
11828: PUSH
11829: LD_INT 34
11831: PUSH
11832: LD_INT 36
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: PUSH
11872: LD_INT 101
11874: PUSH
11875: LD_INT 102
11877: PUSH
11878: LD_INT 103
11880: PUSH
11881: LD_INT 104
11883: PUSH
11884: LD_INT 105
11886: PUSH
11887: LD_INT 106
11889: PUSH
11890: LD_INT 107
11892: PUSH
11893: LD_INT 108
11895: PUSH
11896: LD_INT 109
11898: PUSH
11899: LD_INT 110
11901: PUSH
11902: LD_INT 111
11904: PUSH
11905: LD_INT 112
11907: PUSH
11908: LD_INT 113
11910: PUSH
11911: LD_INT 114
11913: PUSH
11914: LD_INT 116
11916: PUSH
11917: LD_INT 117
11919: PUSH
11920: LD_INT 118
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: ST_TO_ADDR
11946: GO 12721
11948: LD_INT 16
11950: DOUBLE
11951: EQUAL
11952: IFTRUE 11956
11954: GO 12092
11956: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11957: LD_ADDR_VAR 0 2
11961: PUSH
11962: LD_INT 2
11964: PUSH
11965: LD_INT 4
11967: PUSH
11968: LD_INT 5
11970: PUSH
11971: LD_INT 7
11973: PUSH
11974: LD_INT 11
11976: PUSH
11977: LD_INT 12
11979: PUSH
11980: LD_INT 15
11982: PUSH
11983: LD_INT 16
11985: PUSH
11986: LD_INT 20
11988: PUSH
11989: LD_INT 21
11991: PUSH
11992: LD_INT 22
11994: PUSH
11995: LD_INT 23
11997: PUSH
11998: LD_INT 25
12000: PUSH
12001: LD_INT 26
12003: PUSH
12004: LD_INT 30
12006: PUSH
12007: LD_INT 31
12009: PUSH
12010: LD_INT 32
12012: PUSH
12013: LD_INT 33
12015: PUSH
12016: LD_INT 34
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 101
12042: PUSH
12043: LD_INT 102
12045: PUSH
12046: LD_INT 103
12048: PUSH
12049: LD_INT 106
12051: PUSH
12052: LD_INT 108
12054: PUSH
12055: LD_INT 112
12057: PUSH
12058: LD_INT 113
12060: PUSH
12061: LD_INT 114
12063: PUSH
12064: LD_INT 116
12066: PUSH
12067: LD_INT 117
12069: PUSH
12070: LD_INT 118
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: ST_TO_ADDR
12090: GO 12721
12092: LD_INT 17
12094: DOUBLE
12095: EQUAL
12096: IFTRUE 12100
12098: GO 12324
12100: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12101: LD_ADDR_VAR 0 2
12105: PUSH
12106: LD_INT 1
12108: PUSH
12109: LD_INT 2
12111: PUSH
12112: LD_INT 3
12114: PUSH
12115: LD_INT 4
12117: PUSH
12118: LD_INT 5
12120: PUSH
12121: LD_INT 6
12123: PUSH
12124: LD_INT 7
12126: PUSH
12127: LD_INT 8
12129: PUSH
12130: LD_INT 9
12132: PUSH
12133: LD_INT 10
12135: PUSH
12136: LD_INT 11
12138: PUSH
12139: LD_INT 12
12141: PUSH
12142: LD_INT 13
12144: PUSH
12145: LD_INT 14
12147: PUSH
12148: LD_INT 15
12150: PUSH
12151: LD_INT 16
12153: PUSH
12154: LD_INT 17
12156: PUSH
12157: LD_INT 18
12159: PUSH
12160: LD_INT 19
12162: PUSH
12163: LD_INT 20
12165: PUSH
12166: LD_INT 21
12168: PUSH
12169: LD_INT 22
12171: PUSH
12172: LD_INT 23
12174: PUSH
12175: LD_INT 24
12177: PUSH
12178: LD_INT 25
12180: PUSH
12181: LD_INT 26
12183: PUSH
12184: LD_INT 27
12186: PUSH
12187: LD_INT 28
12189: PUSH
12190: LD_INT 29
12192: PUSH
12193: LD_INT 30
12195: PUSH
12196: LD_INT 31
12198: PUSH
12199: LD_INT 32
12201: PUSH
12202: LD_INT 33
12204: PUSH
12205: LD_INT 34
12207: PUSH
12208: LD_INT 36
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: PUSH
12248: LD_INT 101
12250: PUSH
12251: LD_INT 102
12253: PUSH
12254: LD_INT 103
12256: PUSH
12257: LD_INT 104
12259: PUSH
12260: LD_INT 105
12262: PUSH
12263: LD_INT 106
12265: PUSH
12266: LD_INT 107
12268: PUSH
12269: LD_INT 108
12271: PUSH
12272: LD_INT 109
12274: PUSH
12275: LD_INT 110
12277: PUSH
12278: LD_INT 111
12280: PUSH
12281: LD_INT 112
12283: PUSH
12284: LD_INT 113
12286: PUSH
12287: LD_INT 114
12289: PUSH
12290: LD_INT 116
12292: PUSH
12293: LD_INT 117
12295: PUSH
12296: LD_INT 118
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: ST_TO_ADDR
12322: GO 12721
12324: LD_INT 18
12326: DOUBLE
12327: EQUAL
12328: IFTRUE 12332
12330: GO 12480
12332: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12333: LD_ADDR_VAR 0 2
12337: PUSH
12338: LD_INT 2
12340: PUSH
12341: LD_INT 4
12343: PUSH
12344: LD_INT 5
12346: PUSH
12347: LD_INT 7
12349: PUSH
12350: LD_INT 11
12352: PUSH
12353: LD_INT 12
12355: PUSH
12356: LD_INT 15
12358: PUSH
12359: LD_INT 16
12361: PUSH
12362: LD_INT 20
12364: PUSH
12365: LD_INT 21
12367: PUSH
12368: LD_INT 22
12370: PUSH
12371: LD_INT 23
12373: PUSH
12374: LD_INT 25
12376: PUSH
12377: LD_INT 26
12379: PUSH
12380: LD_INT 30
12382: PUSH
12383: LD_INT 31
12385: PUSH
12386: LD_INT 32
12388: PUSH
12389: LD_INT 33
12391: PUSH
12392: LD_INT 34
12394: PUSH
12395: LD_INT 35
12397: PUSH
12398: LD_INT 36
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 101
12426: PUSH
12427: LD_INT 102
12429: PUSH
12430: LD_INT 103
12432: PUSH
12433: LD_INT 106
12435: PUSH
12436: LD_INT 108
12438: PUSH
12439: LD_INT 112
12441: PUSH
12442: LD_INT 113
12444: PUSH
12445: LD_INT 114
12447: PUSH
12448: LD_INT 115
12450: PUSH
12451: LD_INT 116
12453: PUSH
12454: LD_INT 117
12456: PUSH
12457: LD_INT 118
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: ST_TO_ADDR
12478: GO 12721
12480: LD_INT 19
12482: DOUBLE
12483: EQUAL
12484: IFTRUE 12488
12486: GO 12720
12488: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12489: LD_ADDR_VAR 0 2
12493: PUSH
12494: LD_INT 1
12496: PUSH
12497: LD_INT 2
12499: PUSH
12500: LD_INT 3
12502: PUSH
12503: LD_INT 4
12505: PUSH
12506: LD_INT 5
12508: PUSH
12509: LD_INT 6
12511: PUSH
12512: LD_INT 7
12514: PUSH
12515: LD_INT 8
12517: PUSH
12518: LD_INT 9
12520: PUSH
12521: LD_INT 10
12523: PUSH
12524: LD_INT 11
12526: PUSH
12527: LD_INT 12
12529: PUSH
12530: LD_INT 13
12532: PUSH
12533: LD_INT 14
12535: PUSH
12536: LD_INT 15
12538: PUSH
12539: LD_INT 16
12541: PUSH
12542: LD_INT 17
12544: PUSH
12545: LD_INT 18
12547: PUSH
12548: LD_INT 19
12550: PUSH
12551: LD_INT 20
12553: PUSH
12554: LD_INT 21
12556: PUSH
12557: LD_INT 22
12559: PUSH
12560: LD_INT 23
12562: PUSH
12563: LD_INT 24
12565: PUSH
12566: LD_INT 25
12568: PUSH
12569: LD_INT 26
12571: PUSH
12572: LD_INT 27
12574: PUSH
12575: LD_INT 28
12577: PUSH
12578: LD_INT 29
12580: PUSH
12581: LD_INT 30
12583: PUSH
12584: LD_INT 31
12586: PUSH
12587: LD_INT 32
12589: PUSH
12590: LD_INT 33
12592: PUSH
12593: LD_INT 34
12595: PUSH
12596: LD_INT 35
12598: PUSH
12599: LD_INT 36
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 101
12642: PUSH
12643: LD_INT 102
12645: PUSH
12646: LD_INT 103
12648: PUSH
12649: LD_INT 104
12651: PUSH
12652: LD_INT 105
12654: PUSH
12655: LD_INT 106
12657: PUSH
12658: LD_INT 107
12660: PUSH
12661: LD_INT 108
12663: PUSH
12664: LD_INT 109
12666: PUSH
12667: LD_INT 110
12669: PUSH
12670: LD_INT 111
12672: PUSH
12673: LD_INT 112
12675: PUSH
12676: LD_INT 113
12678: PUSH
12679: LD_INT 114
12681: PUSH
12682: LD_INT 115
12684: PUSH
12685: LD_INT 116
12687: PUSH
12688: LD_INT 117
12690: PUSH
12691: LD_INT 118
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: ST_TO_ADDR
12718: GO 12721
12720: POP
// end else
12721: GO 12952
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12723: LD_ADDR_VAR 0 2
12727: PUSH
12728: LD_INT 1
12730: PUSH
12731: LD_INT 2
12733: PUSH
12734: LD_INT 3
12736: PUSH
12737: LD_INT 4
12739: PUSH
12740: LD_INT 5
12742: PUSH
12743: LD_INT 6
12745: PUSH
12746: LD_INT 7
12748: PUSH
12749: LD_INT 8
12751: PUSH
12752: LD_INT 9
12754: PUSH
12755: LD_INT 10
12757: PUSH
12758: LD_INT 11
12760: PUSH
12761: LD_INT 12
12763: PUSH
12764: LD_INT 13
12766: PUSH
12767: LD_INT 14
12769: PUSH
12770: LD_INT 15
12772: PUSH
12773: LD_INT 16
12775: PUSH
12776: LD_INT 17
12778: PUSH
12779: LD_INT 18
12781: PUSH
12782: LD_INT 19
12784: PUSH
12785: LD_INT 20
12787: PUSH
12788: LD_INT 21
12790: PUSH
12791: LD_INT 22
12793: PUSH
12794: LD_INT 23
12796: PUSH
12797: LD_INT 24
12799: PUSH
12800: LD_INT 25
12802: PUSH
12803: LD_INT 26
12805: PUSH
12806: LD_INT 27
12808: PUSH
12809: LD_INT 28
12811: PUSH
12812: LD_INT 29
12814: PUSH
12815: LD_INT 30
12817: PUSH
12818: LD_INT 31
12820: PUSH
12821: LD_INT 32
12823: PUSH
12824: LD_INT 33
12826: PUSH
12827: LD_INT 34
12829: PUSH
12830: LD_INT 35
12832: PUSH
12833: LD_INT 36
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 101
12876: PUSH
12877: LD_INT 102
12879: PUSH
12880: LD_INT 103
12882: PUSH
12883: LD_INT 104
12885: PUSH
12886: LD_INT 105
12888: PUSH
12889: LD_INT 106
12891: PUSH
12892: LD_INT 107
12894: PUSH
12895: LD_INT 108
12897: PUSH
12898: LD_INT 109
12900: PUSH
12901: LD_INT 110
12903: PUSH
12904: LD_INT 111
12906: PUSH
12907: LD_INT 112
12909: PUSH
12910: LD_INT 113
12912: PUSH
12913: LD_INT 114
12915: PUSH
12916: LD_INT 115
12918: PUSH
12919: LD_INT 116
12921: PUSH
12922: LD_INT 117
12924: PUSH
12925: LD_INT 118
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: ST_TO_ADDR
// if result then
12952: LD_VAR 0 2
12956: IFFALSE 13742
// begin normal :=  ;
12958: LD_ADDR_VAR 0 5
12962: PUSH
12963: LD_STRING 
12965: ST_TO_ADDR
// hardcore :=  ;
12966: LD_ADDR_VAR 0 6
12970: PUSH
12971: LD_STRING 
12973: ST_TO_ADDR
// active :=  ;
12974: LD_ADDR_VAR 0 7
12978: PUSH
12979: LD_STRING 
12981: ST_TO_ADDR
// for i = 1 to normalCounter do
12982: LD_ADDR_VAR 0 8
12986: PUSH
12987: DOUBLE
12988: LD_INT 1
12990: DEC
12991: ST_TO_ADDR
12992: LD_EXP 26
12996: PUSH
12997: FOR_TO
12998: IFFALSE 13099
// begin tmp := 0 ;
13000: LD_ADDR_VAR 0 3
13004: PUSH
13005: LD_STRING 0
13007: ST_TO_ADDR
// if result [ 1 ] then
13008: LD_VAR 0 2
13012: PUSH
13013: LD_INT 1
13015: ARRAY
13016: IFFALSE 13081
// if result [ 1 ] [ 1 ] = i then
13018: LD_VAR 0 2
13022: PUSH
13023: LD_INT 1
13025: ARRAY
13026: PUSH
13027: LD_INT 1
13029: ARRAY
13030: PUSH
13031: LD_VAR 0 8
13035: EQUAL
13036: IFFALSE 13081
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13038: LD_ADDR_VAR 0 2
13042: PUSH
13043: LD_VAR 0 2
13047: PPUSH
13048: LD_INT 1
13050: PPUSH
13051: LD_VAR 0 2
13055: PUSH
13056: LD_INT 1
13058: ARRAY
13059: PPUSH
13060: LD_INT 1
13062: PPUSH
13063: CALL_OW 3
13067: PPUSH
13068: CALL_OW 1
13072: ST_TO_ADDR
// tmp := 1 ;
13073: LD_ADDR_VAR 0 3
13077: PUSH
13078: LD_STRING 1
13080: ST_TO_ADDR
// end ; normal := normal & tmp ;
13081: LD_ADDR_VAR 0 5
13085: PUSH
13086: LD_VAR 0 5
13090: PUSH
13091: LD_VAR 0 3
13095: STR
13096: ST_TO_ADDR
// end ;
13097: GO 12997
13099: POP
13100: POP
// for i = 1 to hardcoreCounter do
13101: LD_ADDR_VAR 0 8
13105: PUSH
13106: DOUBLE
13107: LD_INT 1
13109: DEC
13110: ST_TO_ADDR
13111: LD_EXP 27
13115: PUSH
13116: FOR_TO
13117: IFFALSE 13222
// begin tmp := 0 ;
13119: LD_ADDR_VAR 0 3
13123: PUSH
13124: LD_STRING 0
13126: ST_TO_ADDR
// if result [ 2 ] then
13127: LD_VAR 0 2
13131: PUSH
13132: LD_INT 2
13134: ARRAY
13135: IFFALSE 13204
// if result [ 2 ] [ 1 ] = 100 + i then
13137: LD_VAR 0 2
13141: PUSH
13142: LD_INT 2
13144: ARRAY
13145: PUSH
13146: LD_INT 1
13148: ARRAY
13149: PUSH
13150: LD_INT 100
13152: PUSH
13153: LD_VAR 0 8
13157: PLUS
13158: EQUAL
13159: IFFALSE 13204
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13161: LD_ADDR_VAR 0 2
13165: PUSH
13166: LD_VAR 0 2
13170: PPUSH
13171: LD_INT 2
13173: PPUSH
13174: LD_VAR 0 2
13178: PUSH
13179: LD_INT 2
13181: ARRAY
13182: PPUSH
13183: LD_INT 1
13185: PPUSH
13186: CALL_OW 3
13190: PPUSH
13191: CALL_OW 1
13195: ST_TO_ADDR
// tmp := 1 ;
13196: LD_ADDR_VAR 0 3
13200: PUSH
13201: LD_STRING 1
13203: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13204: LD_ADDR_VAR 0 6
13208: PUSH
13209: LD_VAR 0 6
13213: PUSH
13214: LD_VAR 0 3
13218: STR
13219: ST_TO_ADDR
// end ;
13220: GO 13116
13222: POP
13223: POP
// if isGameLoad then
13224: LD_VAR 0 1
13228: IFFALSE 13703
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13230: LD_ADDR_VAR 0 4
13234: PUSH
13235: LD_EXP 30
13239: PUSH
13240: LD_EXP 29
13244: PUSH
13245: LD_EXP 31
13249: PUSH
13250: LD_EXP 28
13254: PUSH
13255: LD_EXP 32
13259: PUSH
13260: LD_EXP 33
13264: PUSH
13265: LD_EXP 34
13269: PUSH
13270: LD_EXP 35
13274: PUSH
13275: LD_EXP 36
13279: PUSH
13280: LD_EXP 37
13284: PUSH
13285: LD_EXP 38
13289: PUSH
13290: LD_EXP 39
13294: PUSH
13295: LD_EXP 40
13299: PUSH
13300: LD_EXP 41
13304: PUSH
13305: LD_EXP 49
13309: PUSH
13310: LD_EXP 50
13314: PUSH
13315: LD_EXP 51
13319: PUSH
13320: LD_EXP 52
13324: PUSH
13325: LD_EXP 54
13329: PUSH
13330: LD_EXP 55
13334: PUSH
13335: LD_EXP 56
13339: PUSH
13340: LD_EXP 59
13344: PUSH
13345: LD_EXP 61
13349: PUSH
13350: LD_EXP 62
13354: PUSH
13355: LD_EXP 63
13359: PUSH
13360: LD_EXP 65
13364: PUSH
13365: LD_EXP 66
13369: PUSH
13370: LD_EXP 69
13374: PUSH
13375: LD_EXP 70
13379: PUSH
13380: LD_EXP 71
13384: PUSH
13385: LD_EXP 72
13389: PUSH
13390: LD_EXP 73
13394: PUSH
13395: LD_EXP 74
13399: PUSH
13400: LD_EXP 75
13404: PUSH
13405: LD_EXP 76
13409: PUSH
13410: LD_EXP 77
13414: PUSH
13415: LD_EXP 42
13419: PUSH
13420: LD_EXP 43
13424: PUSH
13425: LD_EXP 46
13429: PUSH
13430: LD_EXP 47
13434: PUSH
13435: LD_EXP 48
13439: PUSH
13440: LD_EXP 44
13444: PUSH
13445: LD_EXP 45
13449: PUSH
13450: LD_EXP 53
13454: PUSH
13455: LD_EXP 57
13459: PUSH
13460: LD_EXP 58
13464: PUSH
13465: LD_EXP 60
13469: PUSH
13470: LD_EXP 64
13474: PUSH
13475: LD_EXP 67
13479: PUSH
13480: LD_EXP 68
13484: PUSH
13485: LD_EXP 78
13489: PUSH
13490: LD_EXP 79
13494: PUSH
13495: LD_EXP 80
13499: PUSH
13500: LD_EXP 81
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: ST_TO_ADDR
// tmp :=  ;
13561: LD_ADDR_VAR 0 3
13565: PUSH
13566: LD_STRING 
13568: ST_TO_ADDR
// for i = 1 to normalCounter do
13569: LD_ADDR_VAR 0 8
13573: PUSH
13574: DOUBLE
13575: LD_INT 1
13577: DEC
13578: ST_TO_ADDR
13579: LD_EXP 26
13583: PUSH
13584: FOR_TO
13585: IFFALSE 13621
// begin if flags [ i ] then
13587: LD_VAR 0 4
13591: PUSH
13592: LD_VAR 0 8
13596: ARRAY
13597: IFFALSE 13619
// tmp := tmp & i & ; ;
13599: LD_ADDR_VAR 0 3
13603: PUSH
13604: LD_VAR 0 3
13608: PUSH
13609: LD_VAR 0 8
13613: STR
13614: PUSH
13615: LD_STRING ;
13617: STR
13618: ST_TO_ADDR
// end ;
13619: GO 13584
13621: POP
13622: POP
// for i = 1 to hardcoreCounter do
13623: LD_ADDR_VAR 0 8
13627: PUSH
13628: DOUBLE
13629: LD_INT 1
13631: DEC
13632: ST_TO_ADDR
13633: LD_EXP 27
13637: PUSH
13638: FOR_TO
13639: IFFALSE 13685
// begin if flags [ normalCounter + i ] then
13641: LD_VAR 0 4
13645: PUSH
13646: LD_EXP 26
13650: PUSH
13651: LD_VAR 0 8
13655: PLUS
13656: ARRAY
13657: IFFALSE 13683
// tmp := tmp & ( 100 + i ) & ; ;
13659: LD_ADDR_VAR 0 3
13663: PUSH
13664: LD_VAR 0 3
13668: PUSH
13669: LD_INT 100
13671: PUSH
13672: LD_VAR 0 8
13676: PLUS
13677: STR
13678: PUSH
13679: LD_STRING ;
13681: STR
13682: ST_TO_ADDR
// end ;
13683: GO 13638
13685: POP
13686: POP
// if tmp then
13687: LD_VAR 0 3
13691: IFFALSE 13703
// active := tmp ;
13693: LD_ADDR_VAR 0 7
13697: PUSH
13698: LD_VAR 0 3
13702: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13703: LD_STRING getStreamItemsFromMission("
13705: PUSH
13706: LD_VAR 0 5
13710: STR
13711: PUSH
13712: LD_STRING ","
13714: STR
13715: PUSH
13716: LD_VAR 0 6
13720: STR
13721: PUSH
13722: LD_STRING ","
13724: STR
13725: PUSH
13726: LD_VAR 0 7
13730: STR
13731: PUSH
13732: LD_STRING ")
13734: STR
13735: PPUSH
13736: CALL_OW 559
// end else
13740: GO 13749
// ToLua ( getStreamItemsFromMission("","","") ) ;
13742: LD_STRING getStreamItemsFromMission("","","")
13744: PPUSH
13745: CALL_OW 559
// end ;
13749: LD_VAR 0 2
13753: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13754: LD_EXP 25
13758: IFFALSE 13766
13760: PUSH
13761: LD_EXP 30
13765: AND
13766: IFFALSE 13890
13768: GO 13770
13770: DISABLE
13771: LD_INT 0
13773: PPUSH
13774: PPUSH
// begin enable ;
13775: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13776: LD_ADDR_VAR 0 2
13780: PUSH
13781: LD_INT 22
13783: PUSH
13784: LD_OWVAR 2
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 2
13795: PUSH
13796: LD_INT 34
13798: PUSH
13799: LD_INT 7
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: LD_INT 34
13808: PUSH
13809: LD_INT 45
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PUSH
13816: LD_INT 34
13818: PUSH
13819: LD_INT 28
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: LD_INT 34
13828: PUSH
13829: LD_INT 47
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PPUSH
13847: CALL_OW 69
13851: ST_TO_ADDR
// if not tmp then
13852: LD_VAR 0 2
13856: NOT
13857: IFFALSE 13861
// exit ;
13859: GO 13890
// for i in tmp do
13861: LD_ADDR_VAR 0 1
13865: PUSH
13866: LD_VAR 0 2
13870: PUSH
13871: FOR_IN
13872: IFFALSE 13888
// begin SetLives ( i , 0 ) ;
13874: LD_VAR 0 1
13878: PPUSH
13879: LD_INT 0
13881: PPUSH
13882: CALL_OW 234
// end ;
13886: GO 13871
13888: POP
13889: POP
// end ;
13890: PPOPN 2
13892: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13893: LD_EXP 25
13897: IFFALSE 13905
13899: PUSH
13900: LD_EXP 31
13904: AND
13905: IFFALSE 13989
13907: GO 13909
13909: DISABLE
13910: LD_INT 0
13912: PPUSH
13913: PPUSH
// begin enable ;
13914: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13915: LD_ADDR_VAR 0 2
13919: PUSH
13920: LD_INT 22
13922: PUSH
13923: LD_OWVAR 2
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: PUSH
13932: LD_INT 32
13934: PUSH
13935: LD_INT 3
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PPUSH
13946: CALL_OW 69
13950: ST_TO_ADDR
// if not tmp then
13951: LD_VAR 0 2
13955: NOT
13956: IFFALSE 13960
// exit ;
13958: GO 13989
// for i in tmp do
13960: LD_ADDR_VAR 0 1
13964: PUSH
13965: LD_VAR 0 2
13969: PUSH
13970: FOR_IN
13971: IFFALSE 13987
// begin SetLives ( i , 0 ) ;
13973: LD_VAR 0 1
13977: PPUSH
13978: LD_INT 0
13980: PPUSH
13981: CALL_OW 234
// end ;
13985: GO 13970
13987: POP
13988: POP
// end ;
13989: PPOPN 2
13991: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13992: LD_EXP 25
13996: IFFALSE 14004
13998: PUSH
13999: LD_EXP 28
14003: AND
14004: IFFALSE 14097
14006: GO 14008
14008: DISABLE
14009: LD_INT 0
14011: PPUSH
// begin enable ;
14012: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14013: LD_ADDR_VAR 0 1
14017: PUSH
14018: LD_INT 22
14020: PUSH
14021: LD_OWVAR 2
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 2
14032: PUSH
14033: LD_INT 25
14035: PUSH
14036: LD_INT 5
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 25
14045: PUSH
14046: LD_INT 9
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PUSH
14053: LD_INT 25
14055: PUSH
14056: LD_INT 8
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PPUSH
14073: CALL_OW 69
14077: PUSH
14078: FOR_IN
14079: IFFALSE 14095
// begin SetClass ( i , 1 ) ;
14081: LD_VAR 0 1
14085: PPUSH
14086: LD_INT 1
14088: PPUSH
14089: CALL_OW 336
// end ;
14093: GO 14078
14095: POP
14096: POP
// end ;
14097: PPOPN 1
14099: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14100: LD_EXP 25
14104: IFFALSE 14112
14106: PUSH
14107: LD_EXP 29
14111: AND
14112: IFFALSE 14124
14114: PUSH
14115: LD_OWVAR 65
14119: PUSH
14120: LD_INT 7
14122: LESS
14123: AND
14124: IFFALSE 14138
14126: GO 14128
14128: DISABLE
// begin enable ;
14129: ENABLE
// game_speed := 7 ;
14130: LD_ADDR_OWVAR 65
14134: PUSH
14135: LD_INT 7
14137: ST_TO_ADDR
// end ;
14138: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14139: LD_EXP 25
14143: IFFALSE 14151
14145: PUSH
14146: LD_EXP 32
14150: AND
14151: IFFALSE 14353
14153: GO 14155
14155: DISABLE
14156: LD_INT 0
14158: PPUSH
14159: PPUSH
14160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14161: LD_ADDR_VAR 0 3
14165: PUSH
14166: LD_INT 81
14168: PUSH
14169: LD_OWVAR 2
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PUSH
14178: LD_INT 21
14180: PUSH
14181: LD_INT 1
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PPUSH
14192: CALL_OW 69
14196: ST_TO_ADDR
// if not tmp then
14197: LD_VAR 0 3
14201: NOT
14202: IFFALSE 14206
// exit ;
14204: GO 14353
// if tmp > 5 then
14206: LD_VAR 0 3
14210: PUSH
14211: LD_INT 5
14213: GREATER
14214: IFFALSE 14226
// k := 5 else
14216: LD_ADDR_VAR 0 2
14220: PUSH
14221: LD_INT 5
14223: ST_TO_ADDR
14224: GO 14236
// k := tmp ;
14226: LD_ADDR_VAR 0 2
14230: PUSH
14231: LD_VAR 0 3
14235: ST_TO_ADDR
// for i := 1 to k do
14236: LD_ADDR_VAR 0 1
14240: PUSH
14241: DOUBLE
14242: LD_INT 1
14244: DEC
14245: ST_TO_ADDR
14246: LD_VAR 0 2
14250: PUSH
14251: FOR_TO
14252: IFFALSE 14351
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14254: LD_VAR 0 3
14258: PUSH
14259: LD_VAR 0 1
14263: ARRAY
14264: PPUSH
14265: LD_VAR 0 1
14269: PUSH
14270: LD_INT 4
14272: MOD
14273: PUSH
14274: LD_INT 1
14276: PLUS
14277: PPUSH
14278: CALL_OW 259
14282: PUSH
14283: LD_INT 10
14285: LESS
14286: IFFALSE 14349
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14288: LD_VAR 0 3
14292: PUSH
14293: LD_VAR 0 1
14297: ARRAY
14298: PPUSH
14299: LD_VAR 0 1
14303: PUSH
14304: LD_INT 4
14306: MOD
14307: PUSH
14308: LD_INT 1
14310: PLUS
14311: PPUSH
14312: LD_VAR 0 3
14316: PUSH
14317: LD_VAR 0 1
14321: ARRAY
14322: PPUSH
14323: LD_VAR 0 1
14327: PUSH
14328: LD_INT 4
14330: MOD
14331: PUSH
14332: LD_INT 1
14334: PLUS
14335: PPUSH
14336: CALL_OW 259
14340: PUSH
14341: LD_INT 1
14343: PLUS
14344: PPUSH
14345: CALL_OW 237
14349: GO 14251
14351: POP
14352: POP
// end ;
14353: PPOPN 3
14355: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14356: LD_EXP 25
14360: IFFALSE 14368
14362: PUSH
14363: LD_EXP 33
14367: AND
14368: IFFALSE 14388
14370: GO 14372
14372: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14373: LD_INT 4
14375: PPUSH
14376: LD_OWVAR 2
14380: PPUSH
14381: LD_INT 0
14383: PPUSH
14384: CALL_OW 324
14388: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14389: LD_EXP 25
14393: IFFALSE 14401
14395: PUSH
14396: LD_EXP 62
14400: AND
14401: IFFALSE 14421
14403: GO 14405
14405: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14406: LD_INT 19
14408: PPUSH
14409: LD_OWVAR 2
14413: PPUSH
14414: LD_INT 0
14416: PPUSH
14417: CALL_OW 324
14421: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14422: LD_EXP 25
14426: IFFALSE 14434
14428: PUSH
14429: LD_EXP 34
14433: AND
14434: IFFALSE 14536
14436: GO 14438
14438: DISABLE
14439: LD_INT 0
14441: PPUSH
14442: PPUSH
// begin enable ;
14443: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14444: LD_ADDR_VAR 0 2
14448: PUSH
14449: LD_INT 22
14451: PUSH
14452: LD_OWVAR 2
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: LD_INT 34
14466: PUSH
14467: LD_INT 11
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 34
14476: PUSH
14477: LD_INT 30
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: LIST
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PPUSH
14493: CALL_OW 69
14497: ST_TO_ADDR
// if not tmp then
14498: LD_VAR 0 2
14502: NOT
14503: IFFALSE 14507
// exit ;
14505: GO 14536
// for i in tmp do
14507: LD_ADDR_VAR 0 1
14511: PUSH
14512: LD_VAR 0 2
14516: PUSH
14517: FOR_IN
14518: IFFALSE 14534
// begin SetLives ( i , 0 ) ;
14520: LD_VAR 0 1
14524: PPUSH
14525: LD_INT 0
14527: PPUSH
14528: CALL_OW 234
// end ;
14532: GO 14517
14534: POP
14535: POP
// end ;
14536: PPOPN 2
14538: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14539: LD_EXP 25
14543: IFFALSE 14551
14545: PUSH
14546: LD_EXP 35
14550: AND
14551: IFFALSE 14571
14553: GO 14555
14555: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14556: LD_INT 32
14558: PPUSH
14559: LD_OWVAR 2
14563: PPUSH
14564: LD_INT 0
14566: PPUSH
14567: CALL_OW 324
14571: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14572: LD_EXP 25
14576: IFFALSE 14584
14578: PUSH
14579: LD_EXP 36
14583: AND
14584: IFFALSE 14767
14586: GO 14588
14588: DISABLE
14589: LD_INT 0
14591: PPUSH
14592: PPUSH
14593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14594: LD_ADDR_VAR 0 2
14598: PUSH
14599: LD_INT 22
14601: PUSH
14602: LD_OWVAR 2
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PUSH
14611: LD_INT 33
14613: PUSH
14614: LD_INT 3
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PPUSH
14625: CALL_OW 69
14629: ST_TO_ADDR
// if not tmp then
14630: LD_VAR 0 2
14634: NOT
14635: IFFALSE 14639
// exit ;
14637: GO 14767
// side := 0 ;
14639: LD_ADDR_VAR 0 3
14643: PUSH
14644: LD_INT 0
14646: ST_TO_ADDR
// for i := 1 to 8 do
14647: LD_ADDR_VAR 0 1
14651: PUSH
14652: DOUBLE
14653: LD_INT 1
14655: DEC
14656: ST_TO_ADDR
14657: LD_INT 8
14659: PUSH
14660: FOR_TO
14661: IFFALSE 14711
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14663: LD_OWVAR 2
14667: PUSH
14668: LD_VAR 0 1
14672: NONEQUAL
14673: IFFALSE 14695
14675: PUSH
14676: LD_OWVAR 2
14680: PPUSH
14681: LD_VAR 0 1
14685: PPUSH
14686: CALL_OW 81
14690: PUSH
14691: LD_INT 2
14693: EQUAL
14694: AND
14695: IFFALSE 14709
// begin side := i ;
14697: LD_ADDR_VAR 0 3
14701: PUSH
14702: LD_VAR 0 1
14706: ST_TO_ADDR
// break ;
14707: GO 14711
// end ;
14709: GO 14660
14711: POP
14712: POP
// if not side then
14713: LD_VAR 0 3
14717: NOT
14718: IFFALSE 14722
// exit ;
14720: GO 14767
// for i := 1 to tmp do
14722: LD_ADDR_VAR 0 1
14726: PUSH
14727: DOUBLE
14728: LD_INT 1
14730: DEC
14731: ST_TO_ADDR
14732: LD_VAR 0 2
14736: PUSH
14737: FOR_TO
14738: IFFALSE 14765
// if Prob ( 60 ) then
14740: LD_INT 60
14742: PPUSH
14743: CALL_OW 13
14747: IFFALSE 14763
// SetSide ( i , side ) ;
14749: LD_VAR 0 1
14753: PPUSH
14754: LD_VAR 0 3
14758: PPUSH
14759: CALL_OW 235
14763: GO 14737
14765: POP
14766: POP
// end ;
14767: PPOPN 3
14769: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14770: LD_EXP 25
14774: IFFALSE 14782
14776: PUSH
14777: LD_EXP 38
14781: AND
14782: IFFALSE 14901
14784: GO 14786
14786: DISABLE
14787: LD_INT 0
14789: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14790: LD_ADDR_VAR 0 1
14794: PUSH
14795: LD_INT 22
14797: PUSH
14798: LD_OWVAR 2
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 21
14809: PUSH
14810: LD_INT 1
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 3
14819: PUSH
14820: LD_INT 23
14822: PUSH
14823: LD_INT 0
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: LIST
14838: PPUSH
14839: CALL_OW 69
14843: PUSH
14844: FOR_IN
14845: IFFALSE 14899
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14847: LD_VAR 0 1
14851: PPUSH
14852: CALL_OW 257
14856: PUSH
14857: LD_INT 1
14859: PUSH
14860: LD_INT 2
14862: PUSH
14863: LD_INT 3
14865: PUSH
14866: LD_INT 4
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: IN
14875: IFFALSE 14897
// SetClass ( un , rand ( 1 , 4 ) ) ;
14877: LD_VAR 0 1
14881: PPUSH
14882: LD_INT 1
14884: PPUSH
14885: LD_INT 4
14887: PPUSH
14888: CALL_OW 12
14892: PPUSH
14893: CALL_OW 336
14897: GO 14844
14899: POP
14900: POP
// end ;
14901: PPOPN 1
14903: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14904: LD_EXP 25
14908: IFFALSE 14916
14910: PUSH
14911: LD_EXP 37
14915: AND
14916: IFFALSE 14995
14918: GO 14920
14920: DISABLE
14921: LD_INT 0
14923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14924: LD_ADDR_VAR 0 1
14928: PUSH
14929: LD_INT 22
14931: PUSH
14932: LD_OWVAR 2
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: LD_INT 21
14943: PUSH
14944: LD_INT 3
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PPUSH
14955: CALL_OW 69
14959: ST_TO_ADDR
// if not tmp then
14960: LD_VAR 0 1
14964: NOT
14965: IFFALSE 14969
// exit ;
14967: GO 14995
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14969: LD_VAR 0 1
14973: PUSH
14974: LD_INT 1
14976: PPUSH
14977: LD_VAR 0 1
14981: PPUSH
14982: CALL_OW 12
14986: ARRAY
14987: PPUSH
14988: LD_INT 100
14990: PPUSH
14991: CALL_OW 234
// end ;
14995: PPOPN 1
14997: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14998: LD_EXP 25
15002: IFFALSE 15010
15004: PUSH
15005: LD_EXP 39
15009: AND
15010: IFFALSE 15108
15012: GO 15014
15014: DISABLE
15015: LD_INT 0
15017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15018: LD_ADDR_VAR 0 1
15022: PUSH
15023: LD_INT 22
15025: PUSH
15026: LD_OWVAR 2
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: LD_INT 21
15037: PUSH
15038: LD_INT 1
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PPUSH
15049: CALL_OW 69
15053: ST_TO_ADDR
// if not tmp then
15054: LD_VAR 0 1
15058: NOT
15059: IFFALSE 15063
// exit ;
15061: GO 15108
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15063: LD_VAR 0 1
15067: PUSH
15068: LD_INT 1
15070: PPUSH
15071: LD_VAR 0 1
15075: PPUSH
15076: CALL_OW 12
15080: ARRAY
15081: PPUSH
15082: LD_INT 1
15084: PPUSH
15085: LD_INT 4
15087: PPUSH
15088: CALL_OW 12
15092: PPUSH
15093: LD_INT 3000
15095: PPUSH
15096: LD_INT 9000
15098: PPUSH
15099: CALL_OW 12
15103: PPUSH
15104: CALL_OW 492
// end ;
15108: PPOPN 1
15110: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15111: LD_EXP 25
15115: IFFALSE 15123
15117: PUSH
15118: LD_EXP 40
15122: AND
15123: IFFALSE 15143
15125: GO 15127
15127: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15128: LD_INT 1
15130: PPUSH
15131: LD_OWVAR 2
15135: PPUSH
15136: LD_INT 0
15138: PPUSH
15139: CALL_OW 324
15143: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15144: LD_EXP 25
15148: IFFALSE 15156
15150: PUSH
15151: LD_EXP 41
15155: AND
15156: IFFALSE 15239
15158: GO 15160
15160: DISABLE
15161: LD_INT 0
15163: PPUSH
15164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15165: LD_ADDR_VAR 0 2
15169: PUSH
15170: LD_INT 22
15172: PUSH
15173: LD_OWVAR 2
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: LD_INT 21
15184: PUSH
15185: LD_INT 3
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: PPUSH
15196: CALL_OW 69
15200: ST_TO_ADDR
// if not tmp then
15201: LD_VAR 0 2
15205: NOT
15206: IFFALSE 15210
// exit ;
15208: GO 15239
// for i in tmp do
15210: LD_ADDR_VAR 0 1
15214: PUSH
15215: LD_VAR 0 2
15219: PUSH
15220: FOR_IN
15221: IFFALSE 15237
// SetBLevel ( i , 10 ) ;
15223: LD_VAR 0 1
15227: PPUSH
15228: LD_INT 10
15230: PPUSH
15231: CALL_OW 241
15235: GO 15220
15237: POP
15238: POP
// end ;
15239: PPOPN 2
15241: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15242: LD_EXP 25
15246: IFFALSE 15254
15248: PUSH
15249: LD_EXP 42
15253: AND
15254: IFFALSE 15365
15256: GO 15258
15258: DISABLE
15259: LD_INT 0
15261: PPUSH
15262: PPUSH
15263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15264: LD_ADDR_VAR 0 3
15268: PUSH
15269: LD_INT 22
15271: PUSH
15272: LD_OWVAR 2
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PUSH
15281: LD_INT 25
15283: PUSH
15284: LD_INT 1
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PPUSH
15295: CALL_OW 69
15299: ST_TO_ADDR
// if not tmp then
15300: LD_VAR 0 3
15304: NOT
15305: IFFALSE 15309
// exit ;
15307: GO 15365
// un := tmp [ rand ( 1 , tmp ) ] ;
15309: LD_ADDR_VAR 0 2
15313: PUSH
15314: LD_VAR 0 3
15318: PUSH
15319: LD_INT 1
15321: PPUSH
15322: LD_VAR 0 3
15326: PPUSH
15327: CALL_OW 12
15331: ARRAY
15332: ST_TO_ADDR
// if Crawls ( un ) then
15333: LD_VAR 0 2
15337: PPUSH
15338: CALL_OW 318
15342: IFFALSE 15353
// ComWalk ( un ) ;
15344: LD_VAR 0 2
15348: PPUSH
15349: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15353: LD_VAR 0 2
15357: PPUSH
15358: LD_INT 5
15360: PPUSH
15361: CALL_OW 336
// end ;
15365: PPOPN 3
15367: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15368: LD_EXP 25
15372: IFFALSE 15380
15374: PUSH
15375: LD_EXP 43
15379: AND
15380: IFFALSE 15392
15382: PUSH
15383: LD_OWVAR 67
15387: PUSH
15388: LD_INT 4
15390: LESS
15391: AND
15392: IFFALSE 15411
15394: GO 15396
15396: DISABLE
// begin Difficulty := Difficulty + 1 ;
15397: LD_ADDR_OWVAR 67
15401: PUSH
15402: LD_OWVAR 67
15406: PUSH
15407: LD_INT 1
15409: PLUS
15410: ST_TO_ADDR
// end ;
15411: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15412: LD_EXP 25
15416: IFFALSE 15424
15418: PUSH
15419: LD_EXP 44
15423: AND
15424: IFFALSE 15527
15426: GO 15428
15428: DISABLE
15429: LD_INT 0
15431: PPUSH
// begin for i := 1 to 5 do
15432: LD_ADDR_VAR 0 1
15436: PUSH
15437: DOUBLE
15438: LD_INT 1
15440: DEC
15441: ST_TO_ADDR
15442: LD_INT 5
15444: PUSH
15445: FOR_TO
15446: IFFALSE 15525
// begin uc_nation := nation_nature ;
15448: LD_ADDR_OWVAR 21
15452: PUSH
15453: LD_INT 0
15455: ST_TO_ADDR
// uc_side := 0 ;
15456: LD_ADDR_OWVAR 20
15460: PUSH
15461: LD_INT 0
15463: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15464: LD_ADDR_OWVAR 29
15468: PUSH
15469: LD_INT 12
15471: PUSH
15472: LD_INT 12
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: ST_TO_ADDR
// hc_agressivity := 20 ;
15479: LD_ADDR_OWVAR 35
15483: PUSH
15484: LD_INT 20
15486: ST_TO_ADDR
// hc_class := class_tiger ;
15487: LD_ADDR_OWVAR 28
15491: PUSH
15492: LD_INT 14
15494: ST_TO_ADDR
// hc_gallery :=  ;
15495: LD_ADDR_OWVAR 33
15499: PUSH
15500: LD_STRING 
15502: ST_TO_ADDR
// hc_name :=  ;
15503: LD_ADDR_OWVAR 26
15507: PUSH
15508: LD_STRING 
15510: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15511: CALL_OW 44
15515: PPUSH
15516: LD_INT 0
15518: PPUSH
15519: CALL_OW 51
// end ;
15523: GO 15445
15525: POP
15526: POP
// end ;
15527: PPOPN 1
15529: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15530: LD_EXP 25
15534: IFFALSE 15542
15536: PUSH
15537: LD_EXP 45
15541: AND
15542: IFFALSE 15551
15544: GO 15546
15546: DISABLE
// StreamSibBomb ;
15547: CALL 15552 0 0
15551: END
// export function StreamSibBomb ; var i , x , y ; begin
15552: LD_INT 0
15554: PPUSH
15555: PPUSH
15556: PPUSH
15557: PPUSH
// result := false ;
15558: LD_ADDR_VAR 0 1
15562: PUSH
15563: LD_INT 0
15565: ST_TO_ADDR
// for i := 1 to 16 do
15566: LD_ADDR_VAR 0 2
15570: PUSH
15571: DOUBLE
15572: LD_INT 1
15574: DEC
15575: ST_TO_ADDR
15576: LD_INT 16
15578: PUSH
15579: FOR_TO
15580: IFFALSE 15779
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15582: LD_ADDR_VAR 0 3
15586: PUSH
15587: LD_INT 10
15589: PUSH
15590: LD_INT 20
15592: PUSH
15593: LD_INT 30
15595: PUSH
15596: LD_INT 40
15598: PUSH
15599: LD_INT 50
15601: PUSH
15602: LD_INT 60
15604: PUSH
15605: LD_INT 70
15607: PUSH
15608: LD_INT 80
15610: PUSH
15611: LD_INT 90
15613: PUSH
15614: LD_INT 100
15616: PUSH
15617: LD_INT 110
15619: PUSH
15620: LD_INT 120
15622: PUSH
15623: LD_INT 130
15625: PUSH
15626: LD_INT 140
15628: PUSH
15629: LD_INT 150
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 1
15651: PPUSH
15652: LD_INT 15
15654: PPUSH
15655: CALL_OW 12
15659: ARRAY
15660: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15661: LD_ADDR_VAR 0 4
15665: PUSH
15666: LD_INT 10
15668: PUSH
15669: LD_INT 20
15671: PUSH
15672: LD_INT 30
15674: PUSH
15675: LD_INT 40
15677: PUSH
15678: LD_INT 50
15680: PUSH
15681: LD_INT 60
15683: PUSH
15684: LD_INT 70
15686: PUSH
15687: LD_INT 80
15689: PUSH
15690: LD_INT 90
15692: PUSH
15693: LD_INT 100
15695: PUSH
15696: LD_INT 110
15698: PUSH
15699: LD_INT 120
15701: PUSH
15702: LD_INT 130
15704: PUSH
15705: LD_INT 140
15707: PUSH
15708: LD_INT 150
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 1
15730: PPUSH
15731: LD_INT 15
15733: PPUSH
15734: CALL_OW 12
15738: ARRAY
15739: ST_TO_ADDR
// if ValidHex ( x , y ) then
15740: LD_VAR 0 3
15744: PPUSH
15745: LD_VAR 0 4
15749: PPUSH
15750: CALL_OW 488
15754: IFFALSE 15777
// begin result := [ x , y ] ;
15756: LD_ADDR_VAR 0 1
15760: PUSH
15761: LD_VAR 0 3
15765: PUSH
15766: LD_VAR 0 4
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: ST_TO_ADDR
// break ;
15775: GO 15779
// end ; end ;
15777: GO 15579
15779: POP
15780: POP
// if result then
15781: LD_VAR 0 1
15785: IFFALSE 15845
// begin ToLua ( playSibBomb() ) ;
15787: LD_STRING playSibBomb()
15789: PPUSH
15790: CALL_OW 559
// wait ( 0 0$14 ) ;
15794: LD_INT 490
15796: PPUSH
15797: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15801: LD_VAR 0 1
15805: PUSH
15806: LD_INT 1
15808: ARRAY
15809: PPUSH
15810: LD_VAR 0 1
15814: PUSH
15815: LD_INT 2
15817: ARRAY
15818: PPUSH
15819: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15823: LD_VAR 0 1
15827: PUSH
15828: LD_INT 1
15830: ARRAY
15831: PPUSH
15832: LD_VAR 0 1
15836: PUSH
15837: LD_INT 2
15839: ARRAY
15840: PPUSH
15841: CALL_OW 429
// end ; end ;
15845: LD_VAR 0 1
15849: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15850: LD_EXP 25
15854: IFFALSE 15862
15856: PUSH
15857: LD_EXP 47
15861: AND
15862: IFFALSE 15874
15864: GO 15866
15866: DISABLE
// YouLost (  ) ;
15867: LD_STRING 
15869: PPUSH
15870: CALL_OW 104
15874: END
// every 0 0$1 trigger StreamModeActive and sFog do
15875: LD_EXP 25
15879: IFFALSE 15887
15881: PUSH
15882: LD_EXP 46
15886: AND
15887: IFFALSE 15901
15889: GO 15891
15891: DISABLE
// FogOff ( your_side ) ;
15892: LD_OWVAR 2
15896: PPUSH
15897: CALL_OW 344
15901: END
// every 0 0$1 trigger StreamModeActive and sSun do
15902: LD_EXP 25
15906: IFFALSE 15914
15908: PUSH
15909: LD_EXP 48
15913: AND
15914: IFFALSE 15942
15916: GO 15918
15918: DISABLE
// begin solar_recharge_percent := 0 ;
15919: LD_ADDR_OWVAR 79
15923: PUSH
15924: LD_INT 0
15926: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15927: LD_INT 10500
15929: PPUSH
15930: CALL_OW 67
// solar_recharge_percent := 100 ;
15934: LD_ADDR_OWVAR 79
15938: PUSH
15939: LD_INT 100
15941: ST_TO_ADDR
// end ;
15942: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15943: LD_EXP 25
15947: IFFALSE 15955
15949: PUSH
15950: LD_EXP 49
15954: AND
15955: IFFALSE 16194
15957: GO 15959
15959: DISABLE
15960: LD_INT 0
15962: PPUSH
15963: PPUSH
15964: PPUSH
// begin tmp := [ ] ;
15965: LD_ADDR_VAR 0 3
15969: PUSH
15970: EMPTY
15971: ST_TO_ADDR
// for i := 1 to 6 do
15972: LD_ADDR_VAR 0 1
15976: PUSH
15977: DOUBLE
15978: LD_INT 1
15980: DEC
15981: ST_TO_ADDR
15982: LD_INT 6
15984: PUSH
15985: FOR_TO
15986: IFFALSE 16091
// begin uc_nation := nation_nature ;
15988: LD_ADDR_OWVAR 21
15992: PUSH
15993: LD_INT 0
15995: ST_TO_ADDR
// uc_side := 0 ;
15996: LD_ADDR_OWVAR 20
16000: PUSH
16001: LD_INT 0
16003: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16004: LD_ADDR_OWVAR 29
16008: PUSH
16009: LD_INT 12
16011: PUSH
16012: LD_INT 12
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: ST_TO_ADDR
// hc_agressivity := 20 ;
16019: LD_ADDR_OWVAR 35
16023: PUSH
16024: LD_INT 20
16026: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16027: LD_ADDR_OWVAR 28
16031: PUSH
16032: LD_INT 17
16034: ST_TO_ADDR
// hc_gallery :=  ;
16035: LD_ADDR_OWVAR 33
16039: PUSH
16040: LD_STRING 
16042: ST_TO_ADDR
// hc_name :=  ;
16043: LD_ADDR_OWVAR 26
16047: PUSH
16048: LD_STRING 
16050: ST_TO_ADDR
// un := CreateHuman ;
16051: LD_ADDR_VAR 0 2
16055: PUSH
16056: CALL_OW 44
16060: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16061: LD_VAR 0 2
16065: PPUSH
16066: LD_INT 1
16068: PPUSH
16069: CALL_OW 51
// tmp := tmp ^ un ;
16073: LD_ADDR_VAR 0 3
16077: PUSH
16078: LD_VAR 0 3
16082: PUSH
16083: LD_VAR 0 2
16087: ADD
16088: ST_TO_ADDR
// end ;
16089: GO 15985
16091: POP
16092: POP
// repeat wait ( 0 0$1 ) ;
16093: LD_INT 35
16095: PPUSH
16096: CALL_OW 67
// for un in tmp do
16100: LD_ADDR_VAR 0 2
16104: PUSH
16105: LD_VAR 0 3
16109: PUSH
16110: FOR_IN
16111: IFFALSE 16185
// begin if IsDead ( un ) then
16113: LD_VAR 0 2
16117: PPUSH
16118: CALL_OW 301
16122: IFFALSE 16142
// begin tmp := tmp diff un ;
16124: LD_ADDR_VAR 0 3
16128: PUSH
16129: LD_VAR 0 3
16133: PUSH
16134: LD_VAR 0 2
16138: DIFF
16139: ST_TO_ADDR
// continue ;
16140: GO 16110
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16142: LD_VAR 0 2
16146: PPUSH
16147: LD_INT 3
16149: PUSH
16150: LD_INT 22
16152: PUSH
16153: LD_INT 0
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PPUSH
16164: CALL_OW 69
16168: PPUSH
16169: LD_VAR 0 2
16173: PPUSH
16174: CALL_OW 74
16178: PPUSH
16179: CALL_OW 115
// end ;
16183: GO 16110
16185: POP
16186: POP
// until not tmp ;
16187: LD_VAR 0 3
16191: NOT
16192: IFFALSE 16093
// end ;
16194: PPOPN 3
16196: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16197: LD_EXP 25
16201: IFFALSE 16209
16203: PUSH
16204: LD_EXP 50
16208: AND
16209: IFFALSE 16263
16211: GO 16213
16213: DISABLE
// begin ToLua ( displayTroll(); ) ;
16214: LD_STRING displayTroll();
16216: PPUSH
16217: CALL_OW 559
// wait ( 3 3$00 ) ;
16221: LD_INT 6300
16223: PPUSH
16224: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16228: LD_STRING hideTroll();
16230: PPUSH
16231: CALL_OW 559
// wait ( 1 1$00 ) ;
16235: LD_INT 2100
16237: PPUSH
16238: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16242: LD_STRING displayTroll();
16244: PPUSH
16245: CALL_OW 559
// wait ( 1 1$00 ) ;
16249: LD_INT 2100
16251: PPUSH
16252: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16256: LD_STRING hideTroll();
16258: PPUSH
16259: CALL_OW 559
// end ;
16263: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16264: LD_EXP 25
16268: IFFALSE 16276
16270: PUSH
16271: LD_EXP 51
16275: AND
16276: IFFALSE 16339
16278: GO 16280
16280: DISABLE
16281: LD_INT 0
16283: PPUSH
// begin p := 0 ;
16284: LD_ADDR_VAR 0 1
16288: PUSH
16289: LD_INT 0
16291: ST_TO_ADDR
// repeat game_speed := 1 ;
16292: LD_ADDR_OWVAR 65
16296: PUSH
16297: LD_INT 1
16299: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16300: LD_INT 35
16302: PPUSH
16303: CALL_OW 67
// p := p + 1 ;
16307: LD_ADDR_VAR 0 1
16311: PUSH
16312: LD_VAR 0 1
16316: PUSH
16317: LD_INT 1
16319: PLUS
16320: ST_TO_ADDR
// until p >= 60 ;
16321: LD_VAR 0 1
16325: PUSH
16326: LD_INT 60
16328: GREATEREQUAL
16329: IFFALSE 16292
// game_speed := 4 ;
16331: LD_ADDR_OWVAR 65
16335: PUSH
16336: LD_INT 4
16338: ST_TO_ADDR
// end ;
16339: PPOPN 1
16341: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16342: LD_EXP 25
16346: IFFALSE 16354
16348: PUSH
16349: LD_EXP 52
16353: AND
16354: IFFALSE 16500
16356: GO 16358
16358: DISABLE
16359: LD_INT 0
16361: PPUSH
16362: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16363: LD_ADDR_VAR 0 1
16367: PUSH
16368: LD_INT 22
16370: PUSH
16371: LD_OWVAR 2
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 2
16382: PUSH
16383: LD_INT 30
16385: PUSH
16386: LD_INT 0
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PUSH
16393: LD_INT 30
16395: PUSH
16396: LD_INT 1
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: LIST
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PPUSH
16412: CALL_OW 69
16416: ST_TO_ADDR
// if not depot then
16417: LD_VAR 0 1
16421: NOT
16422: IFFALSE 16426
// exit ;
16424: GO 16500
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16426: LD_ADDR_VAR 0 2
16430: PUSH
16431: LD_VAR 0 1
16435: PUSH
16436: LD_INT 1
16438: PPUSH
16439: LD_VAR 0 1
16443: PPUSH
16444: CALL_OW 12
16448: ARRAY
16449: PPUSH
16450: CALL_OW 274
16454: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16455: LD_VAR 0 2
16459: PPUSH
16460: LD_INT 1
16462: PPUSH
16463: LD_INT 0
16465: PPUSH
16466: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16470: LD_VAR 0 2
16474: PPUSH
16475: LD_INT 2
16477: PPUSH
16478: LD_INT 0
16480: PPUSH
16481: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16485: LD_VAR 0 2
16489: PPUSH
16490: LD_INT 3
16492: PPUSH
16493: LD_INT 0
16495: PPUSH
16496: CALL_OW 277
// end ;
16500: PPOPN 2
16502: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16503: LD_EXP 25
16507: IFFALSE 16515
16509: PUSH
16510: LD_EXP 53
16514: AND
16515: IFFALSE 16612
16517: GO 16519
16519: DISABLE
16520: LD_INT 0
16522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16523: LD_ADDR_VAR 0 1
16527: PUSH
16528: LD_INT 22
16530: PUSH
16531: LD_OWVAR 2
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 21
16542: PUSH
16543: LD_INT 1
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 3
16552: PUSH
16553: LD_INT 23
16555: PUSH
16556: LD_INT 0
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: LIST
16571: PPUSH
16572: CALL_OW 69
16576: ST_TO_ADDR
// if not tmp then
16577: LD_VAR 0 1
16581: NOT
16582: IFFALSE 16586
// exit ;
16584: GO 16612
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16586: LD_VAR 0 1
16590: PUSH
16591: LD_INT 1
16593: PPUSH
16594: LD_VAR 0 1
16598: PPUSH
16599: CALL_OW 12
16603: ARRAY
16604: PPUSH
16605: LD_INT 200
16607: PPUSH
16608: CALL_OW 234
// end ;
16612: PPOPN 1
16614: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16615: LD_EXP 25
16619: IFFALSE 16627
16621: PUSH
16622: LD_EXP 54
16626: AND
16627: IFFALSE 16706
16629: GO 16631
16631: DISABLE
16632: LD_INT 0
16634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16635: LD_ADDR_VAR 0 1
16639: PUSH
16640: LD_INT 22
16642: PUSH
16643: LD_OWVAR 2
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 21
16654: PUSH
16655: LD_INT 2
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PPUSH
16666: CALL_OW 69
16670: ST_TO_ADDR
// if not tmp then
16671: LD_VAR 0 1
16675: NOT
16676: IFFALSE 16680
// exit ;
16678: GO 16706
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16680: LD_VAR 0 1
16684: PUSH
16685: LD_INT 1
16687: PPUSH
16688: LD_VAR 0 1
16692: PPUSH
16693: CALL_OW 12
16697: ARRAY
16698: PPUSH
16699: LD_INT 60
16701: PPUSH
16702: CALL_OW 234
// end ;
16706: PPOPN 1
16708: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16709: LD_EXP 25
16713: IFFALSE 16721
16715: PUSH
16716: LD_EXP 55
16720: AND
16721: IFFALSE 16820
16723: GO 16725
16725: DISABLE
16726: LD_INT 0
16728: PPUSH
16729: PPUSH
// begin enable ;
16730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16731: LD_ADDR_VAR 0 1
16735: PUSH
16736: LD_INT 22
16738: PUSH
16739: LD_OWVAR 2
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 61
16750: PUSH
16751: EMPTY
16752: LIST
16753: PUSH
16754: LD_INT 33
16756: PUSH
16757: LD_INT 2
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: LIST
16768: PPUSH
16769: CALL_OW 69
16773: ST_TO_ADDR
// if not tmp then
16774: LD_VAR 0 1
16778: NOT
16779: IFFALSE 16783
// exit ;
16781: GO 16820
// for i in tmp do
16783: LD_ADDR_VAR 0 2
16787: PUSH
16788: LD_VAR 0 1
16792: PUSH
16793: FOR_IN
16794: IFFALSE 16818
// if IsControledBy ( i ) then
16796: LD_VAR 0 2
16800: PPUSH
16801: CALL_OW 312
16805: IFFALSE 16816
// ComUnlink ( i ) ;
16807: LD_VAR 0 2
16811: PPUSH
16812: CALL_OW 136
16816: GO 16793
16818: POP
16819: POP
// end ;
16820: PPOPN 2
16822: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16823: LD_EXP 25
16827: IFFALSE 16835
16829: PUSH
16830: LD_EXP 56
16834: AND
16835: IFFALSE 16975
16837: GO 16839
16839: DISABLE
16840: LD_INT 0
16842: PPUSH
16843: PPUSH
// begin ToLua ( displayPowell(); ) ;
16844: LD_STRING displayPowell();
16846: PPUSH
16847: CALL_OW 559
// uc_side := 0 ;
16851: LD_ADDR_OWVAR 20
16855: PUSH
16856: LD_INT 0
16858: ST_TO_ADDR
// uc_nation := 2 ;
16859: LD_ADDR_OWVAR 21
16863: PUSH
16864: LD_INT 2
16866: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16867: LD_ADDR_OWVAR 37
16871: PUSH
16872: LD_INT 14
16874: ST_TO_ADDR
// vc_engine := engine_siberite ;
16875: LD_ADDR_OWVAR 39
16879: PUSH
16880: LD_INT 3
16882: ST_TO_ADDR
// vc_control := control_apeman ;
16883: LD_ADDR_OWVAR 38
16887: PUSH
16888: LD_INT 5
16890: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16891: LD_ADDR_OWVAR 40
16895: PUSH
16896: LD_INT 29
16898: ST_TO_ADDR
// un := CreateVehicle ;
16899: LD_ADDR_VAR 0 2
16903: PUSH
16904: CALL_OW 45
16908: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16909: LD_VAR 0 2
16913: PPUSH
16914: LD_INT 1
16916: PPUSH
16917: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16921: LD_INT 35
16923: PPUSH
16924: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16928: LD_VAR 0 2
16932: PPUSH
16933: LD_INT 22
16935: PUSH
16936: LD_OWVAR 2
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PPUSH
16945: CALL_OW 69
16949: PPUSH
16950: LD_VAR 0 2
16954: PPUSH
16955: CALL_OW 74
16959: PPUSH
16960: CALL_OW 115
// until IsDead ( un ) ;
16964: LD_VAR 0 2
16968: PPUSH
16969: CALL_OW 301
16973: IFFALSE 16921
// end ;
16975: PPOPN 2
16977: END
// every 0 0$1 trigger StreamModeActive and sStu do
16978: LD_EXP 25
16982: IFFALSE 16990
16984: PUSH
16985: LD_EXP 64
16989: AND
16990: IFFALSE 17006
16992: GO 16994
16994: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16995: LD_STRING displayStucuk();
16997: PPUSH
16998: CALL_OW 559
// ResetFog ;
17002: CALL_OW 335
// end ;
17006: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17007: LD_EXP 25
17011: IFFALSE 17019
17013: PUSH
17014: LD_EXP 57
17018: AND
17019: IFFALSE 17160
17021: GO 17023
17023: DISABLE
17024: LD_INT 0
17026: PPUSH
17027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17028: LD_ADDR_VAR 0 2
17032: PUSH
17033: LD_INT 22
17035: PUSH
17036: LD_OWVAR 2
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 21
17047: PUSH
17048: LD_INT 1
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: PPUSH
17059: CALL_OW 69
17063: ST_TO_ADDR
// if not tmp then
17064: LD_VAR 0 2
17068: NOT
17069: IFFALSE 17073
// exit ;
17071: GO 17160
// un := tmp [ rand ( 1 , tmp ) ] ;
17073: LD_ADDR_VAR 0 1
17077: PUSH
17078: LD_VAR 0 2
17082: PUSH
17083: LD_INT 1
17085: PPUSH
17086: LD_VAR 0 2
17090: PPUSH
17091: CALL_OW 12
17095: ARRAY
17096: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17097: LD_VAR 0 1
17101: PPUSH
17102: LD_INT 0
17104: PPUSH
17105: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17109: LD_VAR 0 1
17113: PPUSH
17114: LD_OWVAR 3
17118: PUSH
17119: LD_VAR 0 1
17123: DIFF
17124: PPUSH
17125: LD_VAR 0 1
17129: PPUSH
17130: CALL_OW 74
17134: PPUSH
17135: CALL_OW 115
// wait ( 0 0$20 ) ;
17139: LD_INT 700
17141: PPUSH
17142: CALL_OW 67
// SetSide ( un , your_side ) ;
17146: LD_VAR 0 1
17150: PPUSH
17151: LD_OWVAR 2
17155: PPUSH
17156: CALL_OW 235
// end ;
17160: PPOPN 2
17162: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17163: LD_EXP 25
17167: IFFALSE 17175
17169: PUSH
17170: LD_EXP 58
17174: AND
17175: IFFALSE 17281
17177: GO 17179
17179: DISABLE
17180: LD_INT 0
17182: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17183: LD_ADDR_VAR 0 1
17187: PUSH
17188: LD_INT 22
17190: PUSH
17191: LD_OWVAR 2
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: LD_INT 2
17202: PUSH
17203: LD_INT 30
17205: PUSH
17206: LD_INT 0
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 30
17215: PUSH
17216: LD_INT 1
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: LIST
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PPUSH
17232: CALL_OW 69
17236: ST_TO_ADDR
// if not depot then
17237: LD_VAR 0 1
17241: NOT
17242: IFFALSE 17246
// exit ;
17244: GO 17281
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17246: LD_VAR 0 1
17250: PUSH
17251: LD_INT 1
17253: ARRAY
17254: PPUSH
17255: CALL_OW 250
17259: PPUSH
17260: LD_VAR 0 1
17264: PUSH
17265: LD_INT 1
17267: ARRAY
17268: PPUSH
17269: CALL_OW 251
17273: PPUSH
17274: LD_INT 70
17276: PPUSH
17277: CALL_OW 495
// end ;
17281: PPOPN 1
17283: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17284: LD_EXP 25
17288: IFFALSE 17296
17290: PUSH
17291: LD_EXP 59
17295: AND
17296: IFFALSE 17507
17298: GO 17300
17300: DISABLE
17301: LD_INT 0
17303: PPUSH
17304: PPUSH
17305: PPUSH
17306: PPUSH
17307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17308: LD_ADDR_VAR 0 5
17312: PUSH
17313: LD_INT 22
17315: PUSH
17316: LD_OWVAR 2
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 21
17327: PUSH
17328: LD_INT 1
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PPUSH
17339: CALL_OW 69
17343: ST_TO_ADDR
// if not tmp then
17344: LD_VAR 0 5
17348: NOT
17349: IFFALSE 17353
// exit ;
17351: GO 17507
// for i in tmp do
17353: LD_ADDR_VAR 0 1
17357: PUSH
17358: LD_VAR 0 5
17362: PUSH
17363: FOR_IN
17364: IFFALSE 17505
// begin d := rand ( 0 , 5 ) ;
17366: LD_ADDR_VAR 0 4
17370: PUSH
17371: LD_INT 0
17373: PPUSH
17374: LD_INT 5
17376: PPUSH
17377: CALL_OW 12
17381: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17382: LD_ADDR_VAR 0 2
17386: PUSH
17387: LD_VAR 0 1
17391: PPUSH
17392: CALL_OW 250
17396: PPUSH
17397: LD_VAR 0 4
17401: PPUSH
17402: LD_INT 3
17404: PPUSH
17405: LD_INT 12
17407: PPUSH
17408: CALL_OW 12
17412: PPUSH
17413: CALL_OW 272
17417: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17418: LD_ADDR_VAR 0 3
17422: PUSH
17423: LD_VAR 0 1
17427: PPUSH
17428: CALL_OW 251
17432: PPUSH
17433: LD_VAR 0 4
17437: PPUSH
17438: LD_INT 3
17440: PPUSH
17441: LD_INT 12
17443: PPUSH
17444: CALL_OW 12
17448: PPUSH
17449: CALL_OW 273
17453: ST_TO_ADDR
// if ValidHex ( x , y ) then
17454: LD_VAR 0 2
17458: PPUSH
17459: LD_VAR 0 3
17463: PPUSH
17464: CALL_OW 488
17468: IFFALSE 17503
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17470: LD_VAR 0 1
17474: PPUSH
17475: LD_VAR 0 2
17479: PPUSH
17480: LD_VAR 0 3
17484: PPUSH
17485: LD_INT 3
17487: PPUSH
17488: LD_INT 6
17490: PPUSH
17491: CALL_OW 12
17495: PPUSH
17496: LD_INT 1
17498: PPUSH
17499: CALL_OW 483
// end ;
17503: GO 17363
17505: POP
17506: POP
// end ;
17507: PPOPN 5
17509: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17510: LD_EXP 25
17514: IFFALSE 17522
17516: PUSH
17517: LD_EXP 60
17521: AND
17522: IFFALSE 17616
17524: GO 17526
17526: DISABLE
17527: LD_INT 0
17529: PPUSH
17530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17531: LD_ADDR_VAR 0 2
17535: PUSH
17536: LD_INT 22
17538: PUSH
17539: LD_OWVAR 2
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 32
17550: PUSH
17551: LD_INT 1
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 21
17560: PUSH
17561: LD_INT 2
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: LIST
17572: PPUSH
17573: CALL_OW 69
17577: ST_TO_ADDR
// if not tmp then
17578: LD_VAR 0 2
17582: NOT
17583: IFFALSE 17587
// exit ;
17585: GO 17616
// for i in tmp do
17587: LD_ADDR_VAR 0 1
17591: PUSH
17592: LD_VAR 0 2
17596: PUSH
17597: FOR_IN
17598: IFFALSE 17614
// SetFuel ( i , 0 ) ;
17600: LD_VAR 0 1
17604: PPUSH
17605: LD_INT 0
17607: PPUSH
17608: CALL_OW 240
17612: GO 17597
17614: POP
17615: POP
// end ;
17616: PPOPN 2
17618: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17619: LD_EXP 25
17623: IFFALSE 17631
17625: PUSH
17626: LD_EXP 61
17630: AND
17631: IFFALSE 17697
17633: GO 17635
17635: DISABLE
17636: LD_INT 0
17638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17639: LD_ADDR_VAR 0 1
17643: PUSH
17644: LD_INT 22
17646: PUSH
17647: LD_OWVAR 2
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 30
17658: PUSH
17659: LD_INT 29
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PPUSH
17670: CALL_OW 69
17674: ST_TO_ADDR
// if not tmp then
17675: LD_VAR 0 1
17679: NOT
17680: IFFALSE 17684
// exit ;
17682: GO 17697
// DestroyUnit ( tmp [ 1 ] ) ;
17684: LD_VAR 0 1
17688: PUSH
17689: LD_INT 1
17691: ARRAY
17692: PPUSH
17693: CALL_OW 65
// end ;
17697: PPOPN 1
17699: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17700: LD_EXP 25
17704: IFFALSE 17712
17706: PUSH
17707: LD_EXP 63
17711: AND
17712: IFFALSE 17841
17714: GO 17716
17716: DISABLE
17717: LD_INT 0
17719: PPUSH
// begin uc_side := 0 ;
17720: LD_ADDR_OWVAR 20
17724: PUSH
17725: LD_INT 0
17727: ST_TO_ADDR
// uc_nation := nation_arabian ;
17728: LD_ADDR_OWVAR 21
17732: PUSH
17733: LD_INT 2
17735: ST_TO_ADDR
// hc_gallery :=  ;
17736: LD_ADDR_OWVAR 33
17740: PUSH
17741: LD_STRING 
17743: ST_TO_ADDR
// hc_name :=  ;
17744: LD_ADDR_OWVAR 26
17748: PUSH
17749: LD_STRING 
17751: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17752: LD_INT 1
17754: PPUSH
17755: LD_INT 11
17757: PPUSH
17758: LD_INT 10
17760: PPUSH
17761: CALL_OW 380
// un := CreateHuman ;
17765: LD_ADDR_VAR 0 1
17769: PUSH
17770: CALL_OW 44
17774: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17775: LD_VAR 0 1
17779: PPUSH
17780: LD_INT 1
17782: PPUSH
17783: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17787: LD_INT 35
17789: PPUSH
17790: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17794: LD_VAR 0 1
17798: PPUSH
17799: LD_INT 22
17801: PUSH
17802: LD_OWVAR 2
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PPUSH
17811: CALL_OW 69
17815: PPUSH
17816: LD_VAR 0 1
17820: PPUSH
17821: CALL_OW 74
17825: PPUSH
17826: CALL_OW 115
// until IsDead ( un ) ;
17830: LD_VAR 0 1
17834: PPUSH
17835: CALL_OW 301
17839: IFFALSE 17787
// end ;
17841: PPOPN 1
17843: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17844: LD_EXP 25
17848: IFFALSE 17856
17850: PUSH
17851: LD_EXP 65
17855: AND
17856: IFFALSE 17868
17858: GO 17860
17860: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17861: LD_STRING earthquake(getX(game), 0, 32)
17863: PPUSH
17864: CALL_OW 559
17868: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17869: LD_EXP 25
17873: IFFALSE 17881
17875: PUSH
17876: LD_EXP 66
17880: AND
17881: IFFALSE 17972
17883: GO 17885
17885: DISABLE
17886: LD_INT 0
17888: PPUSH
// begin enable ;
17889: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17890: LD_ADDR_VAR 0 1
17894: PUSH
17895: LD_INT 22
17897: PUSH
17898: LD_OWVAR 2
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 21
17909: PUSH
17910: LD_INT 2
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 33
17919: PUSH
17920: LD_INT 3
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: LIST
17931: PPUSH
17932: CALL_OW 69
17936: ST_TO_ADDR
// if not tmp then
17937: LD_VAR 0 1
17941: NOT
17942: IFFALSE 17946
// exit ;
17944: GO 17972
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17946: LD_VAR 0 1
17950: PUSH
17951: LD_INT 1
17953: PPUSH
17954: LD_VAR 0 1
17958: PPUSH
17959: CALL_OW 12
17963: ARRAY
17964: PPUSH
17965: LD_INT 1
17967: PPUSH
17968: CALL_OW 234
// end ;
17972: PPOPN 1
17974: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17975: LD_EXP 25
17979: IFFALSE 17987
17981: PUSH
17982: LD_EXP 67
17986: AND
17987: IFFALSE 18128
17989: GO 17991
17991: DISABLE
17992: LD_INT 0
17994: PPUSH
17995: PPUSH
17996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17997: LD_ADDR_VAR 0 3
18001: PUSH
18002: LD_INT 22
18004: PUSH
18005: LD_OWVAR 2
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 25
18016: PUSH
18017: LD_INT 1
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PPUSH
18028: CALL_OW 69
18032: ST_TO_ADDR
// if not tmp then
18033: LD_VAR 0 3
18037: NOT
18038: IFFALSE 18042
// exit ;
18040: GO 18128
// un := tmp [ rand ( 1 , tmp ) ] ;
18042: LD_ADDR_VAR 0 2
18046: PUSH
18047: LD_VAR 0 3
18051: PUSH
18052: LD_INT 1
18054: PPUSH
18055: LD_VAR 0 3
18059: PPUSH
18060: CALL_OW 12
18064: ARRAY
18065: ST_TO_ADDR
// if Crawls ( un ) then
18066: LD_VAR 0 2
18070: PPUSH
18071: CALL_OW 318
18075: IFFALSE 18086
// ComWalk ( un ) ;
18077: LD_VAR 0 2
18081: PPUSH
18082: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18086: LD_VAR 0 2
18090: PPUSH
18091: LD_INT 9
18093: PPUSH
18094: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18098: LD_INT 28
18100: PPUSH
18101: LD_OWVAR 2
18105: PPUSH
18106: LD_INT 2
18108: PPUSH
18109: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18113: LD_INT 29
18115: PPUSH
18116: LD_OWVAR 2
18120: PPUSH
18121: LD_INT 2
18123: PPUSH
18124: CALL_OW 322
// end ;
18128: PPOPN 3
18130: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18131: LD_EXP 25
18135: IFFALSE 18143
18137: PUSH
18138: LD_EXP 68
18142: AND
18143: IFFALSE 18254
18145: GO 18147
18147: DISABLE
18148: LD_INT 0
18150: PPUSH
18151: PPUSH
18152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18153: LD_ADDR_VAR 0 3
18157: PUSH
18158: LD_INT 22
18160: PUSH
18161: LD_OWVAR 2
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 25
18172: PUSH
18173: LD_INT 1
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PPUSH
18184: CALL_OW 69
18188: ST_TO_ADDR
// if not tmp then
18189: LD_VAR 0 3
18193: NOT
18194: IFFALSE 18198
// exit ;
18196: GO 18254
// un := tmp [ rand ( 1 , tmp ) ] ;
18198: LD_ADDR_VAR 0 2
18202: PUSH
18203: LD_VAR 0 3
18207: PUSH
18208: LD_INT 1
18210: PPUSH
18211: LD_VAR 0 3
18215: PPUSH
18216: CALL_OW 12
18220: ARRAY
18221: ST_TO_ADDR
// if Crawls ( un ) then
18222: LD_VAR 0 2
18226: PPUSH
18227: CALL_OW 318
18231: IFFALSE 18242
// ComWalk ( un ) ;
18233: LD_VAR 0 2
18237: PPUSH
18238: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18242: LD_VAR 0 2
18246: PPUSH
18247: LD_INT 8
18249: PPUSH
18250: CALL_OW 336
// end ;
18254: PPOPN 3
18256: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18257: LD_EXP 25
18261: IFFALSE 18269
18263: PUSH
18264: LD_EXP 69
18268: AND
18269: IFFALSE 18413
18271: GO 18273
18273: DISABLE
18274: LD_INT 0
18276: PPUSH
18277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18278: LD_ADDR_VAR 0 2
18282: PUSH
18283: LD_INT 22
18285: PUSH
18286: LD_OWVAR 2
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 21
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 2
18307: PUSH
18308: LD_INT 34
18310: PUSH
18311: LD_INT 12
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 34
18320: PUSH
18321: LD_INT 51
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 34
18330: PUSH
18331: LD_INT 32
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: LIST
18348: PPUSH
18349: CALL_OW 69
18353: ST_TO_ADDR
// if not tmp then
18354: LD_VAR 0 2
18358: NOT
18359: IFFALSE 18363
// exit ;
18361: GO 18413
// for i in tmp do
18363: LD_ADDR_VAR 0 1
18367: PUSH
18368: LD_VAR 0 2
18372: PUSH
18373: FOR_IN
18374: IFFALSE 18411
// if GetCargo ( i , mat_artifact ) = 0 then
18376: LD_VAR 0 1
18380: PPUSH
18381: LD_INT 4
18383: PPUSH
18384: CALL_OW 289
18388: PUSH
18389: LD_INT 0
18391: EQUAL
18392: IFFALSE 18409
// SetCargo ( i , mat_siberit , 100 ) ;
18394: LD_VAR 0 1
18398: PPUSH
18399: LD_INT 3
18401: PPUSH
18402: LD_INT 100
18404: PPUSH
18405: CALL_OW 290
18409: GO 18373
18411: POP
18412: POP
// end ;
18413: PPOPN 2
18415: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18416: LD_EXP 25
18420: IFFALSE 18428
18422: PUSH
18423: LD_EXP 70
18427: AND
18428: IFFALSE 18611
18430: GO 18432
18432: DISABLE
18433: LD_INT 0
18435: PPUSH
18436: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18437: LD_ADDR_VAR 0 2
18441: PUSH
18442: LD_INT 22
18444: PUSH
18445: LD_OWVAR 2
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PPUSH
18454: CALL_OW 69
18458: ST_TO_ADDR
// if not tmp then
18459: LD_VAR 0 2
18463: NOT
18464: IFFALSE 18468
// exit ;
18466: GO 18611
// for i := 1 to 2 do
18468: LD_ADDR_VAR 0 1
18472: PUSH
18473: DOUBLE
18474: LD_INT 1
18476: DEC
18477: ST_TO_ADDR
18478: LD_INT 2
18480: PUSH
18481: FOR_TO
18482: IFFALSE 18609
// begin uc_side := your_side ;
18484: LD_ADDR_OWVAR 20
18488: PUSH
18489: LD_OWVAR 2
18493: ST_TO_ADDR
// uc_nation := nation_american ;
18494: LD_ADDR_OWVAR 21
18498: PUSH
18499: LD_INT 1
18501: ST_TO_ADDR
// vc_chassis := us_morphling ;
18502: LD_ADDR_OWVAR 37
18506: PUSH
18507: LD_INT 5
18509: ST_TO_ADDR
// vc_engine := engine_siberite ;
18510: LD_ADDR_OWVAR 39
18514: PUSH
18515: LD_INT 3
18517: ST_TO_ADDR
// vc_control := control_computer ;
18518: LD_ADDR_OWVAR 38
18522: PUSH
18523: LD_INT 3
18525: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18526: LD_ADDR_OWVAR 40
18530: PUSH
18531: LD_INT 10
18533: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18534: LD_VAR 0 2
18538: PUSH
18539: LD_INT 1
18541: ARRAY
18542: PPUSH
18543: CALL_OW 310
18547: NOT
18548: IFFALSE 18595
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18550: CALL_OW 45
18554: PPUSH
18555: LD_VAR 0 2
18559: PUSH
18560: LD_INT 1
18562: ARRAY
18563: PPUSH
18564: CALL_OW 250
18568: PPUSH
18569: LD_VAR 0 2
18573: PUSH
18574: LD_INT 1
18576: ARRAY
18577: PPUSH
18578: CALL_OW 251
18582: PPUSH
18583: LD_INT 12
18585: PPUSH
18586: LD_INT 1
18588: PPUSH
18589: CALL_OW 50
18593: GO 18607
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18595: CALL_OW 45
18599: PPUSH
18600: LD_INT 1
18602: PPUSH
18603: CALL_OW 51
// end ;
18607: GO 18481
18609: POP
18610: POP
// end ;
18611: PPOPN 2
18613: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18614: LD_EXP 25
18618: IFFALSE 18626
18620: PUSH
18621: LD_EXP 71
18625: AND
18626: IFFALSE 18848
18628: GO 18630
18630: DISABLE
18631: LD_INT 0
18633: PPUSH
18634: PPUSH
18635: PPUSH
18636: PPUSH
18637: PPUSH
18638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18639: LD_ADDR_VAR 0 6
18643: PUSH
18644: LD_INT 22
18646: PUSH
18647: LD_OWVAR 2
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 21
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 3
18668: PUSH
18669: LD_INT 23
18671: PUSH
18672: LD_INT 0
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: LIST
18687: PPUSH
18688: CALL_OW 69
18692: ST_TO_ADDR
// if not tmp then
18693: LD_VAR 0 6
18697: NOT
18698: IFFALSE 18702
// exit ;
18700: GO 18848
// s1 := rand ( 1 , 4 ) ;
18702: LD_ADDR_VAR 0 2
18706: PUSH
18707: LD_INT 1
18709: PPUSH
18710: LD_INT 4
18712: PPUSH
18713: CALL_OW 12
18717: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18718: LD_ADDR_VAR 0 4
18722: PUSH
18723: LD_VAR 0 6
18727: PUSH
18728: LD_INT 1
18730: ARRAY
18731: PPUSH
18732: LD_VAR 0 2
18736: PPUSH
18737: CALL_OW 259
18741: ST_TO_ADDR
// if s1 = 1 then
18742: LD_VAR 0 2
18746: PUSH
18747: LD_INT 1
18749: EQUAL
18750: IFFALSE 18770
// s2 := rand ( 2 , 4 ) else
18752: LD_ADDR_VAR 0 3
18756: PUSH
18757: LD_INT 2
18759: PPUSH
18760: LD_INT 4
18762: PPUSH
18763: CALL_OW 12
18767: ST_TO_ADDR
18768: GO 18778
// s2 := 1 ;
18770: LD_ADDR_VAR 0 3
18774: PUSH
18775: LD_INT 1
18777: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18778: LD_ADDR_VAR 0 5
18782: PUSH
18783: LD_VAR 0 6
18787: PUSH
18788: LD_INT 1
18790: ARRAY
18791: PPUSH
18792: LD_VAR 0 3
18796: PPUSH
18797: CALL_OW 259
18801: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18802: LD_VAR 0 6
18806: PUSH
18807: LD_INT 1
18809: ARRAY
18810: PPUSH
18811: LD_VAR 0 2
18815: PPUSH
18816: LD_VAR 0 5
18820: PPUSH
18821: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18825: LD_VAR 0 6
18829: PUSH
18830: LD_INT 1
18832: ARRAY
18833: PPUSH
18834: LD_VAR 0 3
18838: PPUSH
18839: LD_VAR 0 4
18843: PPUSH
18844: CALL_OW 237
// end ;
18848: PPOPN 6
18850: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18851: LD_EXP 25
18855: IFFALSE 18863
18857: PUSH
18858: LD_EXP 72
18862: AND
18863: IFFALSE 18942
18865: GO 18867
18867: DISABLE
18868: LD_INT 0
18870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18871: LD_ADDR_VAR 0 1
18875: PUSH
18876: LD_INT 22
18878: PUSH
18879: LD_OWVAR 2
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 30
18890: PUSH
18891: LD_INT 3
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PPUSH
18902: CALL_OW 69
18906: ST_TO_ADDR
// if not tmp then
18907: LD_VAR 0 1
18911: NOT
18912: IFFALSE 18916
// exit ;
18914: GO 18942
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18916: LD_VAR 0 1
18920: PUSH
18921: LD_INT 1
18923: PPUSH
18924: LD_VAR 0 1
18928: PPUSH
18929: CALL_OW 12
18933: ARRAY
18934: PPUSH
18935: LD_INT 1
18937: PPUSH
18938: CALL_OW 234
// end ;
18942: PPOPN 1
18944: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18945: LD_EXP 25
18949: IFFALSE 18957
18951: PUSH
18952: LD_EXP 73
18956: AND
18957: IFFALSE 19069
18959: GO 18961
18961: DISABLE
18962: LD_INT 0
18964: PPUSH
18965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18966: LD_ADDR_VAR 0 2
18970: PUSH
18971: LD_INT 22
18973: PUSH
18974: LD_OWVAR 2
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 2
18985: PUSH
18986: LD_INT 30
18988: PUSH
18989: LD_INT 27
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 30
18998: PUSH
18999: LD_INT 26
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 30
19008: PUSH
19009: LD_INT 28
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PPUSH
19026: CALL_OW 69
19030: ST_TO_ADDR
// if not tmp then
19031: LD_VAR 0 2
19035: NOT
19036: IFFALSE 19040
// exit ;
19038: GO 19069
// for i in tmp do
19040: LD_ADDR_VAR 0 1
19044: PUSH
19045: LD_VAR 0 2
19049: PUSH
19050: FOR_IN
19051: IFFALSE 19067
// SetLives ( i , 1 ) ;
19053: LD_VAR 0 1
19057: PPUSH
19058: LD_INT 1
19060: PPUSH
19061: CALL_OW 234
19065: GO 19050
19067: POP
19068: POP
// end ;
19069: PPOPN 2
19071: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19072: LD_EXP 25
19076: IFFALSE 19084
19078: PUSH
19079: LD_EXP 74
19083: AND
19084: IFFALSE 19371
19086: GO 19088
19088: DISABLE
19089: LD_INT 0
19091: PPUSH
19092: PPUSH
19093: PPUSH
// begin i := rand ( 1 , 7 ) ;
19094: LD_ADDR_VAR 0 1
19098: PUSH
19099: LD_INT 1
19101: PPUSH
19102: LD_INT 7
19104: PPUSH
19105: CALL_OW 12
19109: ST_TO_ADDR
// case i of 1 :
19110: LD_VAR 0 1
19114: PUSH
19115: LD_INT 1
19117: DOUBLE
19118: EQUAL
19119: IFTRUE 19123
19121: GO 19133
19123: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19124: LD_STRING earthquake(getX(game), 0, 32)
19126: PPUSH
19127: CALL_OW 559
19131: GO 19371
19133: LD_INT 2
19135: DOUBLE
19136: EQUAL
19137: IFTRUE 19141
19139: GO 19155
19141: POP
// begin ToLua ( displayStucuk(); ) ;
19142: LD_STRING displayStucuk();
19144: PPUSH
19145: CALL_OW 559
// ResetFog ;
19149: CALL_OW 335
// end ; 3 :
19153: GO 19371
19155: LD_INT 3
19157: DOUBLE
19158: EQUAL
19159: IFTRUE 19163
19161: GO 19267
19163: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19164: LD_ADDR_VAR 0 2
19168: PUSH
19169: LD_INT 22
19171: PUSH
19172: LD_OWVAR 2
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 25
19183: PUSH
19184: LD_INT 1
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PPUSH
19195: CALL_OW 69
19199: ST_TO_ADDR
// if not tmp then
19200: LD_VAR 0 2
19204: NOT
19205: IFFALSE 19209
// exit ;
19207: GO 19371
// un := tmp [ rand ( 1 , tmp ) ] ;
19209: LD_ADDR_VAR 0 3
19213: PUSH
19214: LD_VAR 0 2
19218: PUSH
19219: LD_INT 1
19221: PPUSH
19222: LD_VAR 0 2
19226: PPUSH
19227: CALL_OW 12
19231: ARRAY
19232: ST_TO_ADDR
// if Crawls ( un ) then
19233: LD_VAR 0 3
19237: PPUSH
19238: CALL_OW 318
19242: IFFALSE 19253
// ComWalk ( un ) ;
19244: LD_VAR 0 3
19248: PPUSH
19249: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19253: LD_VAR 0 3
19257: PPUSH
19258: LD_INT 8
19260: PPUSH
19261: CALL_OW 336
// end ; 4 :
19265: GO 19371
19267: LD_INT 4
19269: DOUBLE
19270: EQUAL
19271: IFTRUE 19275
19273: GO 19349
19275: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19276: LD_ADDR_VAR 0 2
19280: PUSH
19281: LD_INT 22
19283: PUSH
19284: LD_OWVAR 2
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 30
19295: PUSH
19296: LD_INT 29
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PPUSH
19307: CALL_OW 69
19311: ST_TO_ADDR
// if not tmp then
19312: LD_VAR 0 2
19316: NOT
19317: IFFALSE 19321
// exit ;
19319: GO 19371
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19321: LD_VAR 0 2
19325: PUSH
19326: LD_INT 1
19328: ARRAY
19329: PPUSH
19330: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19334: LD_VAR 0 2
19338: PUSH
19339: LD_INT 1
19341: ARRAY
19342: PPUSH
19343: CALL_OW 65
// end ; 5 .. 7 :
19347: GO 19371
19349: LD_INT 5
19351: DOUBLE
19352: GREATEREQUAL
19353: IFFALSE 19361
19355: LD_INT 7
19357: DOUBLE
19358: LESSEQUAL
19359: IFTRUE 19363
19361: GO 19370
19363: POP
// StreamSibBomb ; end ;
19364: CALL 15552 0 0
19368: GO 19371
19370: POP
// end ;
19371: PPOPN 3
19373: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19374: LD_EXP 25
19378: IFFALSE 19386
19380: PUSH
19381: LD_EXP 75
19385: AND
19386: IFFALSE 19542
19388: GO 19390
19390: DISABLE
19391: LD_INT 0
19393: PPUSH
19394: PPUSH
19395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19396: LD_ADDR_VAR 0 2
19400: PUSH
19401: LD_INT 81
19403: PUSH
19404: LD_OWVAR 2
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 2
19415: PUSH
19416: LD_INT 21
19418: PUSH
19419: LD_INT 1
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 21
19428: PUSH
19429: LD_INT 2
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: LIST
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PPUSH
19445: CALL_OW 69
19449: ST_TO_ADDR
// if not tmp then
19450: LD_VAR 0 2
19454: NOT
19455: IFFALSE 19459
// exit ;
19457: GO 19542
// p := 0 ;
19459: LD_ADDR_VAR 0 3
19463: PUSH
19464: LD_INT 0
19466: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19467: LD_INT 35
19469: PPUSH
19470: CALL_OW 67
// p := p + 1 ;
19474: LD_ADDR_VAR 0 3
19478: PUSH
19479: LD_VAR 0 3
19483: PUSH
19484: LD_INT 1
19486: PLUS
19487: ST_TO_ADDR
// for i in tmp do
19488: LD_ADDR_VAR 0 1
19492: PUSH
19493: LD_VAR 0 2
19497: PUSH
19498: FOR_IN
19499: IFFALSE 19530
// if GetLives ( i ) < 1000 then
19501: LD_VAR 0 1
19505: PPUSH
19506: CALL_OW 256
19510: PUSH
19511: LD_INT 1000
19513: LESS
19514: IFFALSE 19528
// SetLives ( i , 1000 ) ;
19516: LD_VAR 0 1
19520: PPUSH
19521: LD_INT 1000
19523: PPUSH
19524: CALL_OW 234
19528: GO 19498
19530: POP
19531: POP
// until p > 20 ;
19532: LD_VAR 0 3
19536: PUSH
19537: LD_INT 20
19539: GREATER
19540: IFFALSE 19467
// end ;
19542: PPOPN 3
19544: END
// every 0 0$1 trigger StreamModeActive and sTime do
19545: LD_EXP 25
19549: IFFALSE 19557
19551: PUSH
19552: LD_EXP 76
19556: AND
19557: IFFALSE 19592
19559: GO 19561
19561: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19562: LD_INT 28
19564: PPUSH
19565: LD_OWVAR 2
19569: PPUSH
19570: LD_INT 2
19572: PPUSH
19573: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19577: LD_INT 30
19579: PPUSH
19580: LD_OWVAR 2
19584: PPUSH
19585: LD_INT 2
19587: PPUSH
19588: CALL_OW 322
// end ;
19592: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19593: LD_EXP 25
19597: IFFALSE 19605
19599: PUSH
19600: LD_EXP 77
19604: AND
19605: IFFALSE 19726
19607: GO 19609
19609: DISABLE
19610: LD_INT 0
19612: PPUSH
19613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19614: LD_ADDR_VAR 0 2
19618: PUSH
19619: LD_INT 22
19621: PUSH
19622: LD_OWVAR 2
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 21
19633: PUSH
19634: LD_INT 1
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 3
19643: PUSH
19644: LD_INT 23
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: LIST
19662: PPUSH
19663: CALL_OW 69
19667: ST_TO_ADDR
// if not tmp then
19668: LD_VAR 0 2
19672: NOT
19673: IFFALSE 19677
// exit ;
19675: GO 19726
// for i in tmp do
19677: LD_ADDR_VAR 0 1
19681: PUSH
19682: LD_VAR 0 2
19686: PUSH
19687: FOR_IN
19688: IFFALSE 19724
// begin if Crawls ( i ) then
19690: LD_VAR 0 1
19694: PPUSH
19695: CALL_OW 318
19699: IFFALSE 19710
// ComWalk ( i ) ;
19701: LD_VAR 0 1
19705: PPUSH
19706: CALL_OW 138
// SetClass ( i , 2 ) ;
19710: LD_VAR 0 1
19714: PPUSH
19715: LD_INT 2
19717: PPUSH
19718: CALL_OW 336
// end ;
19722: GO 19687
19724: POP
19725: POP
// end ;
19726: PPOPN 2
19728: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19729: LD_EXP 25
19733: IFFALSE 19741
19735: PUSH
19736: LD_EXP 78
19740: AND
19741: IFFALSE 20031
19743: GO 19745
19745: DISABLE
19746: LD_INT 0
19748: PPUSH
19749: PPUSH
19750: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19751: LD_OWVAR 2
19755: PPUSH
19756: LD_INT 9
19758: PPUSH
19759: LD_INT 1
19761: PPUSH
19762: LD_INT 1
19764: PPUSH
19765: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19769: LD_INT 9
19771: PPUSH
19772: LD_OWVAR 2
19776: PPUSH
19777: CALL_OW 343
// uc_side := 9 ;
19781: LD_ADDR_OWVAR 20
19785: PUSH
19786: LD_INT 9
19788: ST_TO_ADDR
// uc_nation := 2 ;
19789: LD_ADDR_OWVAR 21
19793: PUSH
19794: LD_INT 2
19796: ST_TO_ADDR
// hc_name := Dark Warrior ;
19797: LD_ADDR_OWVAR 26
19801: PUSH
19802: LD_STRING Dark Warrior
19804: ST_TO_ADDR
// hc_gallery :=  ;
19805: LD_ADDR_OWVAR 33
19809: PUSH
19810: LD_STRING 
19812: ST_TO_ADDR
// hc_noskilllimit := true ;
19813: LD_ADDR_OWVAR 76
19817: PUSH
19818: LD_INT 1
19820: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19821: LD_ADDR_OWVAR 31
19825: PUSH
19826: LD_INT 30
19828: PUSH
19829: LD_INT 30
19831: PUSH
19832: LD_INT 30
19834: PUSH
19835: LD_INT 30
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: ST_TO_ADDR
// un := CreateHuman ;
19844: LD_ADDR_VAR 0 3
19848: PUSH
19849: CALL_OW 44
19853: ST_TO_ADDR
// hc_noskilllimit := false ;
19854: LD_ADDR_OWVAR 76
19858: PUSH
19859: LD_INT 0
19861: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19862: LD_VAR 0 3
19866: PPUSH
19867: LD_INT 1
19869: PPUSH
19870: CALL_OW 51
// ToLua ( playRanger() ) ;
19874: LD_STRING playRanger()
19876: PPUSH
19877: CALL_OW 559
// p := 0 ;
19881: LD_ADDR_VAR 0 2
19885: PUSH
19886: LD_INT 0
19888: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19889: LD_INT 35
19891: PPUSH
19892: CALL_OW 67
// p := p + 1 ;
19896: LD_ADDR_VAR 0 2
19900: PUSH
19901: LD_VAR 0 2
19905: PUSH
19906: LD_INT 1
19908: PLUS
19909: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19910: LD_VAR 0 3
19914: PPUSH
19915: CALL_OW 256
19919: PUSH
19920: LD_INT 1000
19922: LESS
19923: IFFALSE 19937
// SetLives ( un , 1000 ) ;
19925: LD_VAR 0 3
19929: PPUSH
19930: LD_INT 1000
19932: PPUSH
19933: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19937: LD_VAR 0 3
19941: PPUSH
19942: LD_INT 81
19944: PUSH
19945: LD_OWVAR 2
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 91
19956: PUSH
19957: LD_VAR 0 3
19961: PUSH
19962: LD_INT 30
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: LIST
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PPUSH
19974: CALL_OW 69
19978: PPUSH
19979: LD_VAR 0 3
19983: PPUSH
19984: CALL_OW 74
19988: PPUSH
19989: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19993: LD_VAR 0 2
19997: PUSH
19998: LD_INT 80
20000: GREATER
20001: IFTRUE 20014
20003: PUSH
20004: LD_VAR 0 3
20008: PPUSH
20009: CALL_OW 301
20013: OR
20014: IFFALSE 19889
// if un then
20016: LD_VAR 0 3
20020: IFFALSE 20031
// RemoveUnit ( un ) ;
20022: LD_VAR 0 3
20026: PPUSH
20027: CALL_OW 64
// end ;
20031: PPOPN 3
20033: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20034: LD_EXP 79
20038: IFFALSE 20154
20040: GO 20042
20042: DISABLE
20043: LD_INT 0
20045: PPUSH
20046: PPUSH
20047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20048: LD_ADDR_VAR 0 2
20052: PUSH
20053: LD_INT 81
20055: PUSH
20056: LD_OWVAR 2
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 21
20067: PUSH
20068: LD_INT 1
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PPUSH
20079: CALL_OW 69
20083: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20084: LD_STRING playComputer()
20086: PPUSH
20087: CALL_OW 559
// if not tmp then
20091: LD_VAR 0 2
20095: NOT
20096: IFFALSE 20100
// exit ;
20098: GO 20154
// for i in tmp do
20100: LD_ADDR_VAR 0 1
20104: PUSH
20105: LD_VAR 0 2
20109: PUSH
20110: FOR_IN
20111: IFFALSE 20152
// for j := 1 to 4 do
20113: LD_ADDR_VAR 0 3
20117: PUSH
20118: DOUBLE
20119: LD_INT 1
20121: DEC
20122: ST_TO_ADDR
20123: LD_INT 4
20125: PUSH
20126: FOR_TO
20127: IFFALSE 20148
// SetSkill ( i , j , 10 ) ;
20129: LD_VAR 0 1
20133: PPUSH
20134: LD_VAR 0 3
20138: PPUSH
20139: LD_INT 10
20141: PPUSH
20142: CALL_OW 237
20146: GO 20126
20148: POP
20149: POP
20150: GO 20110
20152: POP
20153: POP
// end ;
20154: PPOPN 3
20156: END
// every 0 0$1 trigger s30 do var i , tmp ;
20157: LD_EXP 80
20161: IFFALSE 20230
20163: GO 20165
20165: DISABLE
20166: LD_INT 0
20168: PPUSH
20169: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20170: LD_ADDR_VAR 0 2
20174: PUSH
20175: LD_INT 22
20177: PUSH
20178: LD_OWVAR 2
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PPUSH
20187: CALL_OW 69
20191: ST_TO_ADDR
// if not tmp then
20192: LD_VAR 0 2
20196: NOT
20197: IFFALSE 20201
// exit ;
20199: GO 20230
// for i in tmp do
20201: LD_ADDR_VAR 0 1
20205: PUSH
20206: LD_VAR 0 2
20210: PUSH
20211: FOR_IN
20212: IFFALSE 20228
// SetLives ( i , 300 ) ;
20214: LD_VAR 0 1
20218: PPUSH
20219: LD_INT 300
20221: PPUSH
20222: CALL_OW 234
20226: GO 20211
20228: POP
20229: POP
// end ;
20230: PPOPN 2
20232: END
// every 0 0$1 trigger s60 do var i , tmp ;
20233: LD_EXP 81
20237: IFFALSE 20306
20239: GO 20241
20241: DISABLE
20242: LD_INT 0
20244: PPUSH
20245: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20246: LD_ADDR_VAR 0 2
20250: PUSH
20251: LD_INT 22
20253: PUSH
20254: LD_OWVAR 2
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PPUSH
20263: CALL_OW 69
20267: ST_TO_ADDR
// if not tmp then
20268: LD_VAR 0 2
20272: NOT
20273: IFFALSE 20277
// exit ;
20275: GO 20306
// for i in tmp do
20277: LD_ADDR_VAR 0 1
20281: PUSH
20282: LD_VAR 0 2
20286: PUSH
20287: FOR_IN
20288: IFFALSE 20304
// SetLives ( i , 600 ) ;
20290: LD_VAR 0 1
20294: PPUSH
20295: LD_INT 600
20297: PPUSH
20298: CALL_OW 234
20302: GO 20287
20304: POP
20305: POP
// end ;
20306: PPOPN 2
20308: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20309: LD_INT 0
20311: PPUSH
// case cmd of 301 :
20312: LD_VAR 0 1
20316: PUSH
20317: LD_INT 301
20319: DOUBLE
20320: EQUAL
20321: IFTRUE 20325
20323: GO 20357
20325: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20326: LD_VAR 0 6
20330: PPUSH
20331: LD_VAR 0 7
20335: PPUSH
20336: LD_VAR 0 8
20340: PPUSH
20341: LD_VAR 0 4
20345: PPUSH
20346: LD_VAR 0 5
20350: PPUSH
20351: CALL 21570 0 5
20355: GO 20478
20357: LD_INT 302
20359: DOUBLE
20360: EQUAL
20361: IFTRUE 20365
20363: GO 20402
20365: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20366: LD_VAR 0 6
20370: PPUSH
20371: LD_VAR 0 7
20375: PPUSH
20376: LD_VAR 0 8
20380: PPUSH
20381: LD_VAR 0 9
20385: PPUSH
20386: LD_VAR 0 4
20390: PPUSH
20391: LD_VAR 0 5
20395: PPUSH
20396: CALL 21661 0 6
20400: GO 20478
20402: LD_INT 303
20404: DOUBLE
20405: EQUAL
20406: IFTRUE 20410
20408: GO 20447
20410: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20411: LD_VAR 0 6
20415: PPUSH
20416: LD_VAR 0 7
20420: PPUSH
20421: LD_VAR 0 8
20425: PPUSH
20426: LD_VAR 0 9
20430: PPUSH
20431: LD_VAR 0 4
20435: PPUSH
20436: LD_VAR 0 5
20440: PPUSH
20441: CALL 20483 0 6
20445: GO 20478
20447: LD_INT 304
20449: DOUBLE
20450: EQUAL
20451: IFTRUE 20455
20453: GO 20477
20455: POP
// hHackTeleport ( unit , x , y ) ; end ;
20456: LD_VAR 0 2
20460: PPUSH
20461: LD_VAR 0 4
20465: PPUSH
20466: LD_VAR 0 5
20470: PPUSH
20471: CALL 22254 0 3
20475: GO 20478
20477: POP
// end ;
20478: LD_VAR 0 12
20482: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20483: LD_INT 0
20485: PPUSH
20486: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20487: LD_VAR 0 1
20491: PUSH
20492: LD_INT 1
20494: LESS
20495: IFTRUE 20507
20497: PUSH
20498: LD_VAR 0 1
20502: PUSH
20503: LD_INT 3
20505: GREATER
20506: OR
20507: IFTRUE 20525
20509: PUSH
20510: LD_VAR 0 5
20514: PPUSH
20515: LD_VAR 0 6
20519: PPUSH
20520: CALL_OW 428
20524: OR
20525: IFFALSE 20529
// exit ;
20527: GO 21257
// uc_side := your_side ;
20529: LD_ADDR_OWVAR 20
20533: PUSH
20534: LD_OWVAR 2
20538: ST_TO_ADDR
// uc_nation := nation ;
20539: LD_ADDR_OWVAR 21
20543: PUSH
20544: LD_VAR 0 1
20548: ST_TO_ADDR
// bc_level = 1 ;
20549: LD_ADDR_OWVAR 43
20553: PUSH
20554: LD_INT 1
20556: ST_TO_ADDR
// case btype of 1 :
20557: LD_VAR 0 2
20561: PUSH
20562: LD_INT 1
20564: DOUBLE
20565: EQUAL
20566: IFTRUE 20570
20568: GO 20581
20570: POP
// bc_type := b_depot ; 2 :
20571: LD_ADDR_OWVAR 42
20575: PUSH
20576: LD_INT 0
20578: ST_TO_ADDR
20579: GO 21201
20581: LD_INT 2
20583: DOUBLE
20584: EQUAL
20585: IFTRUE 20589
20587: GO 20600
20589: POP
// bc_type := b_warehouse ; 3 :
20590: LD_ADDR_OWVAR 42
20594: PUSH
20595: LD_INT 1
20597: ST_TO_ADDR
20598: GO 21201
20600: LD_INT 3
20602: DOUBLE
20603: EQUAL
20604: IFTRUE 20608
20606: GO 20619
20608: POP
// bc_type := b_lab ; 4 .. 9 :
20609: LD_ADDR_OWVAR 42
20613: PUSH
20614: LD_INT 6
20616: ST_TO_ADDR
20617: GO 21201
20619: LD_INT 4
20621: DOUBLE
20622: GREATEREQUAL
20623: IFFALSE 20631
20625: LD_INT 9
20627: DOUBLE
20628: LESSEQUAL
20629: IFTRUE 20633
20631: GO 20693
20633: POP
// begin bc_type := b_lab_half ;
20634: LD_ADDR_OWVAR 42
20638: PUSH
20639: LD_INT 7
20641: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20642: LD_ADDR_OWVAR 44
20646: PUSH
20647: LD_INT 10
20649: PUSH
20650: LD_INT 11
20652: PUSH
20653: LD_INT 12
20655: PUSH
20656: LD_INT 15
20658: PUSH
20659: LD_INT 14
20661: PUSH
20662: LD_INT 13
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: PUSH
20673: LD_VAR 0 2
20677: PUSH
20678: LD_INT 3
20680: MINUS
20681: ARRAY
20682: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20683: LD_ADDR_OWVAR 45
20687: PUSH
20688: LD_INT 9
20690: ST_TO_ADDR
// end ; 10 .. 13 :
20691: GO 21201
20693: LD_INT 10
20695: DOUBLE
20696: GREATEREQUAL
20697: IFFALSE 20705
20699: LD_INT 13
20701: DOUBLE
20702: LESSEQUAL
20703: IFTRUE 20707
20705: GO 20784
20707: POP
// begin bc_type := b_lab_full ;
20708: LD_ADDR_OWVAR 42
20712: PUSH
20713: LD_INT 8
20715: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20716: LD_ADDR_OWVAR 44
20720: PUSH
20721: LD_INT 10
20723: PUSH
20724: LD_INT 12
20726: PUSH
20727: LD_INT 14
20729: PUSH
20730: LD_INT 13
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: PUSH
20739: LD_VAR 0 2
20743: PUSH
20744: LD_INT 9
20746: MINUS
20747: ARRAY
20748: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20749: LD_ADDR_OWVAR 45
20753: PUSH
20754: LD_INT 11
20756: PUSH
20757: LD_INT 15
20759: PUSH
20760: LD_INT 12
20762: PUSH
20763: LD_INT 15
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: PUSH
20772: LD_VAR 0 2
20776: PUSH
20777: LD_INT 9
20779: MINUS
20780: ARRAY
20781: ST_TO_ADDR
// end ; 14 :
20782: GO 21201
20784: LD_INT 14
20786: DOUBLE
20787: EQUAL
20788: IFTRUE 20792
20790: GO 20803
20792: POP
// bc_type := b_workshop ; 15 :
20793: LD_ADDR_OWVAR 42
20797: PUSH
20798: LD_INT 2
20800: ST_TO_ADDR
20801: GO 21201
20803: LD_INT 15
20805: DOUBLE
20806: EQUAL
20807: IFTRUE 20811
20809: GO 20822
20811: POP
// bc_type := b_factory ; 16 :
20812: LD_ADDR_OWVAR 42
20816: PUSH
20817: LD_INT 3
20819: ST_TO_ADDR
20820: GO 21201
20822: LD_INT 16
20824: DOUBLE
20825: EQUAL
20826: IFTRUE 20830
20828: GO 20841
20830: POP
// bc_type := b_ext_gun ; 17 :
20831: LD_ADDR_OWVAR 42
20835: PUSH
20836: LD_INT 17
20838: ST_TO_ADDR
20839: GO 21201
20841: LD_INT 17
20843: DOUBLE
20844: EQUAL
20845: IFTRUE 20849
20847: GO 20877
20849: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20850: LD_ADDR_OWVAR 42
20854: PUSH
20855: LD_INT 19
20857: PUSH
20858: LD_INT 23
20860: PUSH
20861: LD_INT 19
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: LIST
20868: PUSH
20869: LD_VAR 0 1
20873: ARRAY
20874: ST_TO_ADDR
20875: GO 21201
20877: LD_INT 18
20879: DOUBLE
20880: EQUAL
20881: IFTRUE 20885
20883: GO 20896
20885: POP
// bc_type := b_ext_radar ; 19 :
20886: LD_ADDR_OWVAR 42
20890: PUSH
20891: LD_INT 20
20893: ST_TO_ADDR
20894: GO 21201
20896: LD_INT 19
20898: DOUBLE
20899: EQUAL
20900: IFTRUE 20904
20902: GO 20915
20904: POP
// bc_type := b_ext_radio ; 20 :
20905: LD_ADDR_OWVAR 42
20909: PUSH
20910: LD_INT 22
20912: ST_TO_ADDR
20913: GO 21201
20915: LD_INT 20
20917: DOUBLE
20918: EQUAL
20919: IFTRUE 20923
20921: GO 20934
20923: POP
// bc_type := b_ext_siberium ; 21 :
20924: LD_ADDR_OWVAR 42
20928: PUSH
20929: LD_INT 21
20931: ST_TO_ADDR
20932: GO 21201
20934: LD_INT 21
20936: DOUBLE
20937: EQUAL
20938: IFTRUE 20942
20940: GO 20953
20942: POP
// bc_type := b_ext_computer ; 22 :
20943: LD_ADDR_OWVAR 42
20947: PUSH
20948: LD_INT 24
20950: ST_TO_ADDR
20951: GO 21201
20953: LD_INT 22
20955: DOUBLE
20956: EQUAL
20957: IFTRUE 20961
20959: GO 20972
20961: POP
// bc_type := b_ext_track ; 23 :
20962: LD_ADDR_OWVAR 42
20966: PUSH
20967: LD_INT 16
20969: ST_TO_ADDR
20970: GO 21201
20972: LD_INT 23
20974: DOUBLE
20975: EQUAL
20976: IFTRUE 20980
20978: GO 20991
20980: POP
// bc_type := b_ext_laser ; 24 :
20981: LD_ADDR_OWVAR 42
20985: PUSH
20986: LD_INT 25
20988: ST_TO_ADDR
20989: GO 21201
20991: LD_INT 24
20993: DOUBLE
20994: EQUAL
20995: IFTRUE 20999
20997: GO 21010
20999: POP
// bc_type := b_control_tower ; 25 :
21000: LD_ADDR_OWVAR 42
21004: PUSH
21005: LD_INT 36
21007: ST_TO_ADDR
21008: GO 21201
21010: LD_INT 25
21012: DOUBLE
21013: EQUAL
21014: IFTRUE 21018
21016: GO 21029
21018: POP
// bc_type := b_breastwork ; 26 :
21019: LD_ADDR_OWVAR 42
21023: PUSH
21024: LD_INT 31
21026: ST_TO_ADDR
21027: GO 21201
21029: LD_INT 26
21031: DOUBLE
21032: EQUAL
21033: IFTRUE 21037
21035: GO 21048
21037: POP
// bc_type := b_bunker ; 27 :
21038: LD_ADDR_OWVAR 42
21042: PUSH
21043: LD_INT 32
21045: ST_TO_ADDR
21046: GO 21201
21048: LD_INT 27
21050: DOUBLE
21051: EQUAL
21052: IFTRUE 21056
21054: GO 21067
21056: POP
// bc_type := b_turret ; 28 :
21057: LD_ADDR_OWVAR 42
21061: PUSH
21062: LD_INT 33
21064: ST_TO_ADDR
21065: GO 21201
21067: LD_INT 28
21069: DOUBLE
21070: EQUAL
21071: IFTRUE 21075
21073: GO 21086
21075: POP
// bc_type := b_armoury ; 29 :
21076: LD_ADDR_OWVAR 42
21080: PUSH
21081: LD_INT 4
21083: ST_TO_ADDR
21084: GO 21201
21086: LD_INT 29
21088: DOUBLE
21089: EQUAL
21090: IFTRUE 21094
21092: GO 21105
21094: POP
// bc_type := b_barracks ; 30 :
21095: LD_ADDR_OWVAR 42
21099: PUSH
21100: LD_INT 5
21102: ST_TO_ADDR
21103: GO 21201
21105: LD_INT 30
21107: DOUBLE
21108: EQUAL
21109: IFTRUE 21113
21111: GO 21124
21113: POP
// bc_type := b_solar_power ; 31 :
21114: LD_ADDR_OWVAR 42
21118: PUSH
21119: LD_INT 27
21121: ST_TO_ADDR
21122: GO 21201
21124: LD_INT 31
21126: DOUBLE
21127: EQUAL
21128: IFTRUE 21132
21130: GO 21143
21132: POP
// bc_type := b_oil_power ; 32 :
21133: LD_ADDR_OWVAR 42
21137: PUSH
21138: LD_INT 26
21140: ST_TO_ADDR
21141: GO 21201
21143: LD_INT 32
21145: DOUBLE
21146: EQUAL
21147: IFTRUE 21151
21149: GO 21162
21151: POP
// bc_type := b_siberite_power ; 33 :
21152: LD_ADDR_OWVAR 42
21156: PUSH
21157: LD_INT 28
21159: ST_TO_ADDR
21160: GO 21201
21162: LD_INT 33
21164: DOUBLE
21165: EQUAL
21166: IFTRUE 21170
21168: GO 21181
21170: POP
// bc_type := b_oil_mine ; 34 :
21171: LD_ADDR_OWVAR 42
21175: PUSH
21176: LD_INT 29
21178: ST_TO_ADDR
21179: GO 21201
21181: LD_INT 34
21183: DOUBLE
21184: EQUAL
21185: IFTRUE 21189
21187: GO 21200
21189: POP
// bc_type := b_siberite_mine ; end ;
21190: LD_ADDR_OWVAR 42
21194: PUSH
21195: LD_INT 30
21197: ST_TO_ADDR
21198: GO 21201
21200: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21201: LD_ADDR_VAR 0 8
21205: PUSH
21206: LD_VAR 0 5
21210: PPUSH
21211: LD_VAR 0 6
21215: PPUSH
21216: LD_VAR 0 3
21220: PPUSH
21221: CALL_OW 47
21225: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21226: LD_OWVAR 42
21230: PUSH
21231: LD_INT 32
21233: PUSH
21234: LD_INT 33
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: IN
21241: IFFALSE 21257
// PlaceWeaponTurret ( b , weapon ) ;
21243: LD_VAR 0 8
21247: PPUSH
21248: LD_VAR 0 4
21252: PPUSH
21253: CALL_OW 431
// end ;
21257: LD_VAR 0 7
21261: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21262: LD_INT 0
21264: PPUSH
21265: PPUSH
21266: PPUSH
21267: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21268: LD_ADDR_VAR 0 4
21272: PUSH
21273: LD_INT 22
21275: PUSH
21276: LD_OWVAR 2
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 2
21287: PUSH
21288: LD_INT 30
21290: PUSH
21291: LD_INT 0
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 30
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: LIST
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PPUSH
21317: CALL_OW 69
21321: ST_TO_ADDR
// if not tmp then
21322: LD_VAR 0 4
21326: NOT
21327: IFFALSE 21331
// exit ;
21329: GO 21390
// for i in tmp do
21331: LD_ADDR_VAR 0 2
21335: PUSH
21336: LD_VAR 0 4
21340: PUSH
21341: FOR_IN
21342: IFFALSE 21388
// for j = 1 to 3 do
21344: LD_ADDR_VAR 0 3
21348: PUSH
21349: DOUBLE
21350: LD_INT 1
21352: DEC
21353: ST_TO_ADDR
21354: LD_INT 3
21356: PUSH
21357: FOR_TO
21358: IFFALSE 21384
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21360: LD_VAR 0 2
21364: PPUSH
21365: CALL_OW 274
21369: PPUSH
21370: LD_VAR 0 3
21374: PPUSH
21375: LD_INT 99999
21377: PPUSH
21378: CALL_OW 277
21382: GO 21357
21384: POP
21385: POP
21386: GO 21341
21388: POP
21389: POP
// end ;
21390: LD_VAR 0 1
21394: RET
// export function hHackSetLevel10 ; var i , j ; begin
21395: LD_INT 0
21397: PPUSH
21398: PPUSH
21399: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21400: LD_ADDR_VAR 0 2
21404: PUSH
21405: LD_INT 21
21407: PUSH
21408: LD_INT 1
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PPUSH
21415: CALL_OW 69
21419: PUSH
21420: FOR_IN
21421: IFFALSE 21473
// if IsSelected ( i ) then
21423: LD_VAR 0 2
21427: PPUSH
21428: CALL_OW 306
21432: IFFALSE 21471
// begin for j := 1 to 4 do
21434: LD_ADDR_VAR 0 3
21438: PUSH
21439: DOUBLE
21440: LD_INT 1
21442: DEC
21443: ST_TO_ADDR
21444: LD_INT 4
21446: PUSH
21447: FOR_TO
21448: IFFALSE 21469
// SetSkill ( i , j , 10 ) ;
21450: LD_VAR 0 2
21454: PPUSH
21455: LD_VAR 0 3
21459: PPUSH
21460: LD_INT 10
21462: PPUSH
21463: CALL_OW 237
21467: GO 21447
21469: POP
21470: POP
// end ;
21471: GO 21420
21473: POP
21474: POP
// end ;
21475: LD_VAR 0 1
21479: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21480: LD_INT 0
21482: PPUSH
21483: PPUSH
21484: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21485: LD_ADDR_VAR 0 2
21489: PUSH
21490: LD_INT 22
21492: PUSH
21493: LD_OWVAR 2
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 21
21504: PUSH
21505: LD_INT 1
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PPUSH
21516: CALL_OW 69
21520: PUSH
21521: FOR_IN
21522: IFFALSE 21563
// begin for j := 1 to 4 do
21524: LD_ADDR_VAR 0 3
21528: PUSH
21529: DOUBLE
21530: LD_INT 1
21532: DEC
21533: ST_TO_ADDR
21534: LD_INT 4
21536: PUSH
21537: FOR_TO
21538: IFFALSE 21559
// SetSkill ( i , j , 10 ) ;
21540: LD_VAR 0 2
21544: PPUSH
21545: LD_VAR 0 3
21549: PPUSH
21550: LD_INT 10
21552: PPUSH
21553: CALL_OW 237
21557: GO 21537
21559: POP
21560: POP
// end ;
21561: GO 21521
21563: POP
21564: POP
// end ;
21565: LD_VAR 0 1
21569: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21570: LD_INT 0
21572: PPUSH
// uc_side := your_side ;
21573: LD_ADDR_OWVAR 20
21577: PUSH
21578: LD_OWVAR 2
21582: ST_TO_ADDR
// uc_nation := nation ;
21583: LD_ADDR_OWVAR 21
21587: PUSH
21588: LD_VAR 0 1
21592: ST_TO_ADDR
// InitHc ;
21593: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21597: LD_INT 0
21599: PPUSH
21600: LD_VAR 0 2
21604: PPUSH
21605: LD_VAR 0 3
21609: PPUSH
21610: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21614: LD_VAR 0 4
21618: PPUSH
21619: LD_VAR 0 5
21623: PPUSH
21624: CALL_OW 428
21628: PUSH
21629: LD_INT 0
21631: EQUAL
21632: IFFALSE 21656
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21634: CALL_OW 44
21638: PPUSH
21639: LD_VAR 0 4
21643: PPUSH
21644: LD_VAR 0 5
21648: PPUSH
21649: LD_INT 1
21651: PPUSH
21652: CALL_OW 48
// end ;
21656: LD_VAR 0 6
21660: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21661: LD_INT 0
21663: PPUSH
21664: PPUSH
// uc_side := your_side ;
21665: LD_ADDR_OWVAR 20
21669: PUSH
21670: LD_OWVAR 2
21674: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21675: LD_VAR 0 1
21679: PUSH
21680: LD_INT 1
21682: PUSH
21683: LD_INT 2
21685: PUSH
21686: LD_INT 3
21688: PUSH
21689: LD_INT 4
21691: PUSH
21692: LD_INT 5
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: IN
21702: IFFALSE 21714
// uc_nation := nation_american else
21704: LD_ADDR_OWVAR 21
21708: PUSH
21709: LD_INT 1
21711: ST_TO_ADDR
21712: GO 21757
// if chassis in [ 11 , 12 , 13 , 14 ] then
21714: LD_VAR 0 1
21718: PUSH
21719: LD_INT 11
21721: PUSH
21722: LD_INT 12
21724: PUSH
21725: LD_INT 13
21727: PUSH
21728: LD_INT 14
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: IN
21737: IFFALSE 21749
// uc_nation := nation_arabian else
21739: LD_ADDR_OWVAR 21
21743: PUSH
21744: LD_INT 2
21746: ST_TO_ADDR
21747: GO 21757
// uc_nation := nation_russian ;
21749: LD_ADDR_OWVAR 21
21753: PUSH
21754: LD_INT 3
21756: ST_TO_ADDR
// vc_chassis := chassis ;
21757: LD_ADDR_OWVAR 37
21761: PUSH
21762: LD_VAR 0 1
21766: ST_TO_ADDR
// vc_engine := engine ;
21767: LD_ADDR_OWVAR 39
21771: PUSH
21772: LD_VAR 0 2
21776: ST_TO_ADDR
// vc_control := control ;
21777: LD_ADDR_OWVAR 38
21781: PUSH
21782: LD_VAR 0 3
21786: ST_TO_ADDR
// vc_weapon := weapon ;
21787: LD_ADDR_OWVAR 40
21791: PUSH
21792: LD_VAR 0 4
21796: ST_TO_ADDR
// un := CreateVehicle ;
21797: LD_ADDR_VAR 0 8
21801: PUSH
21802: CALL_OW 45
21806: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21807: LD_VAR 0 8
21811: PPUSH
21812: LD_INT 0
21814: PPUSH
21815: LD_INT 5
21817: PPUSH
21818: CALL_OW 12
21822: PPUSH
21823: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21827: LD_VAR 0 8
21831: PPUSH
21832: LD_VAR 0 5
21836: PPUSH
21837: LD_VAR 0 6
21841: PPUSH
21842: LD_INT 1
21844: PPUSH
21845: CALL_OW 48
// end ;
21849: LD_VAR 0 7
21853: RET
// export hInvincible ; every 1 do
21854: GO 21856
21856: DISABLE
// hInvincible := [ ] ;
21857: LD_ADDR_EXP 82
21861: PUSH
21862: EMPTY
21863: ST_TO_ADDR
21864: END
// every 10 do var i ;
21865: GO 21867
21867: DISABLE
21868: LD_INT 0
21870: PPUSH
// begin enable ;
21871: ENABLE
// if not hInvincible then
21872: LD_EXP 82
21876: NOT
21877: IFFALSE 21881
// exit ;
21879: GO 21925
// for i in hInvincible do
21881: LD_ADDR_VAR 0 1
21885: PUSH
21886: LD_EXP 82
21890: PUSH
21891: FOR_IN
21892: IFFALSE 21923
// if GetLives ( i ) < 1000 then
21894: LD_VAR 0 1
21898: PPUSH
21899: CALL_OW 256
21903: PUSH
21904: LD_INT 1000
21906: LESS
21907: IFFALSE 21921
// SetLives ( i , 1000 ) ;
21909: LD_VAR 0 1
21913: PPUSH
21914: LD_INT 1000
21916: PPUSH
21917: CALL_OW 234
21921: GO 21891
21923: POP
21924: POP
// end ;
21925: PPOPN 1
21927: END
// export function hHackInvincible ; var i ; begin
21928: LD_INT 0
21930: PPUSH
21931: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21932: LD_ADDR_VAR 0 2
21936: PUSH
21937: LD_INT 2
21939: PUSH
21940: LD_INT 21
21942: PUSH
21943: LD_INT 1
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 21
21952: PUSH
21953: LD_INT 2
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: LIST
21964: PPUSH
21965: CALL_OW 69
21969: PUSH
21970: FOR_IN
21971: IFFALSE 22032
// if IsSelected ( i ) then
21973: LD_VAR 0 2
21977: PPUSH
21978: CALL_OW 306
21982: IFFALSE 22030
// begin if i in hInvincible then
21984: LD_VAR 0 2
21988: PUSH
21989: LD_EXP 82
21993: IN
21994: IFFALSE 22014
// hInvincible := hInvincible diff i else
21996: LD_ADDR_EXP 82
22000: PUSH
22001: LD_EXP 82
22005: PUSH
22006: LD_VAR 0 2
22010: DIFF
22011: ST_TO_ADDR
22012: GO 22030
// hInvincible := hInvincible union i ;
22014: LD_ADDR_EXP 82
22018: PUSH
22019: LD_EXP 82
22023: PUSH
22024: LD_VAR 0 2
22028: UNION
22029: ST_TO_ADDR
// end ;
22030: GO 21970
22032: POP
22033: POP
// end ;
22034: LD_VAR 0 1
22038: RET
// export function hHackInvisible ; var i , j ; begin
22039: LD_INT 0
22041: PPUSH
22042: PPUSH
22043: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22044: LD_ADDR_VAR 0 2
22048: PUSH
22049: LD_INT 21
22051: PUSH
22052: LD_INT 1
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PPUSH
22059: CALL_OW 69
22063: PUSH
22064: FOR_IN
22065: IFFALSE 22089
// if IsSelected ( i ) then
22067: LD_VAR 0 2
22071: PPUSH
22072: CALL_OW 306
22076: IFFALSE 22087
// ComForceInvisible ( i ) ;
22078: LD_VAR 0 2
22082: PPUSH
22083: CALL_OW 496
22087: GO 22064
22089: POP
22090: POP
// end ;
22091: LD_VAR 0 1
22095: RET
// export function hHackChangeYourSide ; begin
22096: LD_INT 0
22098: PPUSH
// if your_side = 8 then
22099: LD_OWVAR 2
22103: PUSH
22104: LD_INT 8
22106: EQUAL
22107: IFFALSE 22119
// your_side := 0 else
22109: LD_ADDR_OWVAR 2
22113: PUSH
22114: LD_INT 0
22116: ST_TO_ADDR
22117: GO 22133
// your_side := your_side + 1 ;
22119: LD_ADDR_OWVAR 2
22123: PUSH
22124: LD_OWVAR 2
22128: PUSH
22129: LD_INT 1
22131: PLUS
22132: ST_TO_ADDR
// end ;
22133: LD_VAR 0 1
22137: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22138: LD_INT 0
22140: PPUSH
22141: PPUSH
22142: PPUSH
// for i in all_units do
22143: LD_ADDR_VAR 0 2
22147: PUSH
22148: LD_OWVAR 3
22152: PUSH
22153: FOR_IN
22154: IFFALSE 22232
// if IsSelected ( i ) then
22156: LD_VAR 0 2
22160: PPUSH
22161: CALL_OW 306
22165: IFFALSE 22230
// begin j := GetSide ( i ) ;
22167: LD_ADDR_VAR 0 3
22171: PUSH
22172: LD_VAR 0 2
22176: PPUSH
22177: CALL_OW 255
22181: ST_TO_ADDR
// if j = 8 then
22182: LD_VAR 0 3
22186: PUSH
22187: LD_INT 8
22189: EQUAL
22190: IFFALSE 22202
// j := 0 else
22192: LD_ADDR_VAR 0 3
22196: PUSH
22197: LD_INT 0
22199: ST_TO_ADDR
22200: GO 22216
// j := j + 1 ;
22202: LD_ADDR_VAR 0 3
22206: PUSH
22207: LD_VAR 0 3
22211: PUSH
22212: LD_INT 1
22214: PLUS
22215: ST_TO_ADDR
// SetSide ( i , j ) ;
22216: LD_VAR 0 2
22220: PPUSH
22221: LD_VAR 0 3
22225: PPUSH
22226: CALL_OW 235
// end ;
22230: GO 22153
22232: POP
22233: POP
// end ;
22234: LD_VAR 0 1
22238: RET
// export function hHackFog ; begin
22239: LD_INT 0
22241: PPUSH
// FogOff ( true ) ;
22242: LD_INT 1
22244: PPUSH
22245: CALL_OW 344
// end ;
22249: LD_VAR 0 1
22253: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22254: LD_INT 0
22256: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22257: LD_VAR 0 1
22261: PPUSH
22262: LD_VAR 0 2
22266: PPUSH
22267: LD_VAR 0 3
22271: PPUSH
22272: LD_INT 1
22274: PPUSH
22275: LD_INT 1
22277: PPUSH
22278: CALL_OW 483
// CenterOnXY ( x , y ) ;
22282: LD_VAR 0 2
22286: PPUSH
22287: LD_VAR 0 3
22291: PPUSH
22292: CALL_OW 84
// end ;
22296: LD_VAR 0 4
22300: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22301: LD_INT 0
22303: PPUSH
22304: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22305: LD_VAR 0 1
22309: NOT
22310: IFTRUE 22329
22312: PUSH
22313: LD_VAR 0 2
22317: PPUSH
22318: LD_VAR 0 3
22322: PPUSH
22323: CALL_OW 488
22327: NOT
22328: OR
22329: IFTRUE 22364
22331: PUSH
22332: LD_VAR 0 1
22336: PPUSH
22337: CALL_OW 266
22341: PUSH
22342: LD_INT 3
22344: NONEQUAL
22345: IFFALSE 22363
22347: PUSH
22348: LD_VAR 0 1
22352: PPUSH
22353: CALL_OW 247
22357: PUSH
22358: LD_INT 1
22360: EQUAL
22361: NOT
22362: AND
22363: OR
22364: IFFALSE 22368
// exit ;
22366: GO 22650
// if GetType ( factory ) = unit_human then
22368: LD_VAR 0 1
22372: PPUSH
22373: CALL_OW 247
22377: PUSH
22378: LD_INT 1
22380: EQUAL
22381: IFFALSE 22398
// factory := IsInUnit ( factory ) ;
22383: LD_ADDR_VAR 0 1
22387: PUSH
22388: LD_VAR 0 1
22392: PPUSH
22393: CALL_OW 310
22397: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22398: LD_VAR 0 1
22402: PPUSH
22403: CALL_OW 266
22407: PUSH
22408: LD_INT 3
22410: NONEQUAL
22411: IFFALSE 22415
// exit ;
22413: GO 22650
// for i := 1 to Count ( factoryWaypoints ) do
22415: LD_ADDR_VAR 0 5
22419: PUSH
22420: DOUBLE
22421: LD_INT 1
22423: DEC
22424: ST_TO_ADDR
22425: LD_EXP 83
22429: PPUSH
22430: CALL 32454 0 1
22434: PUSH
22435: FOR_TO
22436: IFFALSE 22598
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
22438: LD_VAR 0 2
22442: PPUSH
22443: LD_VAR 0 3
22447: PPUSH
22448: CALL_OW 428
22452: PUSH
22453: LD_EXP 83
22457: PUSH
22458: LD_VAR 0 5
22462: ARRAY
22463: PUSH
22464: LD_INT 2
22466: ARRAY
22467: EQUAL
22468: IFFALSE 22500
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22470: LD_ADDR_EXP 83
22474: PUSH
22475: LD_EXP 83
22479: PPUSH
22480: LD_VAR 0 5
22484: PPUSH
22485: CALL_OW 3
22489: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22490: CALL 22655 0 0
// exit ;
22494: POP
22495: POP
22496: GO 22650
// end else
22498: GO 22596
// if factory = factoryWaypoints [ i ] [ 2 ] then
22500: LD_VAR 0 1
22504: PUSH
22505: LD_EXP 83
22509: PUSH
22510: LD_VAR 0 5
22514: ARRAY
22515: PUSH
22516: LD_INT 2
22518: ARRAY
22519: EQUAL
22520: IFFALSE 22596
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22522: LD_ADDR_EXP 83
22526: PUSH
22527: LD_EXP 83
22531: PPUSH
22532: LD_VAR 0 5
22536: PPUSH
22537: CALL_OW 3
22541: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22542: LD_ADDR_EXP 83
22546: PUSH
22547: LD_EXP 83
22551: PPUSH
22552: LD_VAR 0 1
22556: PPUSH
22557: CALL_OW 255
22561: PUSH
22562: LD_VAR 0 1
22566: PUSH
22567: LD_VAR 0 2
22571: PUSH
22572: LD_VAR 0 3
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: PPUSH
22583: CALL 68430 0 2
22587: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22588: CALL 22655 0 0
// exit ;
22592: POP
22593: POP
22594: GO 22650
// end ; end ;
22596: GO 22435
22598: POP
22599: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22600: LD_ADDR_EXP 83
22604: PUSH
22605: LD_EXP 83
22609: PPUSH
22610: LD_VAR 0 1
22614: PPUSH
22615: CALL_OW 255
22619: PUSH
22620: LD_VAR 0 1
22624: PUSH
22625: LD_VAR 0 2
22629: PUSH
22630: LD_VAR 0 3
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: PPUSH
22641: CALL 68430 0 2
22645: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22646: CALL 22655 0 0
// end ;
22650: LD_VAR 0 4
22654: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22655: LD_INT 0
22657: PPUSH
22658: PPUSH
22659: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22660: LD_STRING resetFactoryWaypoint();
22662: PPUSH
22663: CALL_OW 559
// if factoryWaypoints then
22667: LD_EXP 83
22671: IFFALSE 22792
// begin list := factoryWaypoints ;
22673: LD_ADDR_VAR 0 3
22677: PUSH
22678: LD_EXP 83
22682: ST_TO_ADDR
// for i := 1 to list do
22683: LD_ADDR_VAR 0 2
22687: PUSH
22688: DOUBLE
22689: LD_INT 1
22691: DEC
22692: ST_TO_ADDR
22693: LD_VAR 0 3
22697: PUSH
22698: FOR_TO
22699: IFFALSE 22790
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22701: LD_STRING setFactoryWaypointXY(
22703: PUSH
22704: LD_VAR 0 3
22708: PUSH
22709: LD_VAR 0 2
22713: ARRAY
22714: PUSH
22715: LD_INT 1
22717: ARRAY
22718: STR
22719: PUSH
22720: LD_STRING ,
22722: STR
22723: PUSH
22724: LD_VAR 0 3
22728: PUSH
22729: LD_VAR 0 2
22733: ARRAY
22734: PUSH
22735: LD_INT 2
22737: ARRAY
22738: STR
22739: PUSH
22740: LD_STRING ,
22742: STR
22743: PUSH
22744: LD_VAR 0 3
22748: PUSH
22749: LD_VAR 0 2
22753: ARRAY
22754: PUSH
22755: LD_INT 3
22757: ARRAY
22758: STR
22759: PUSH
22760: LD_STRING ,
22762: STR
22763: PUSH
22764: LD_VAR 0 3
22768: PUSH
22769: LD_VAR 0 2
22773: ARRAY
22774: PUSH
22775: LD_INT 4
22777: ARRAY
22778: STR
22779: PUSH
22780: LD_STRING )
22782: STR
22783: PPUSH
22784: CALL_OW 559
22788: GO 22698
22790: POP
22791: POP
// end ; end ;
22792: LD_VAR 0 1
22796: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22797: LD_INT 0
22799: PPUSH
// if HexInfo ( x , y ) = warehouse then
22800: LD_VAR 0 2
22804: PPUSH
22805: LD_VAR 0 3
22809: PPUSH
22810: CALL_OW 428
22814: PUSH
22815: LD_VAR 0 1
22819: EQUAL
22820: IFFALSE 22847
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22822: LD_ADDR_EXP 85
22826: PUSH
22827: LD_EXP 85
22831: PPUSH
22832: LD_VAR 0 1
22836: PPUSH
22837: LD_INT 0
22839: PPUSH
22840: CALL_OW 1
22844: ST_TO_ADDR
22845: GO 22898
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22847: LD_ADDR_EXP 85
22851: PUSH
22852: LD_EXP 85
22856: PPUSH
22857: LD_VAR 0 1
22861: PPUSH
22862: LD_VAR 0 1
22866: PPUSH
22867: CALL_OW 255
22871: PUSH
22872: LD_VAR 0 1
22876: PUSH
22877: LD_VAR 0 2
22881: PUSH
22882: LD_VAR 0 3
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: PPUSH
22893: CALL_OW 1
22897: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22898: CALL 22907 0 0
// end ;
22902: LD_VAR 0 4
22906: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22907: LD_INT 0
22909: PPUSH
22910: PPUSH
22911: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22912: LD_STRING resetWarehouseGatheringPoints();
22914: PPUSH
22915: CALL_OW 559
// if warehouseGatheringPoints then
22919: LD_EXP 85
22923: IFFALSE 23049
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22925: LD_ADDR_VAR 0 3
22929: PUSH
22930: LD_EXP 85
22934: PPUSH
22935: CALL 72364 0 1
22939: ST_TO_ADDR
// for i := 1 to list do
22940: LD_ADDR_VAR 0 2
22944: PUSH
22945: DOUBLE
22946: LD_INT 1
22948: DEC
22949: ST_TO_ADDR
22950: LD_VAR 0 3
22954: PUSH
22955: FOR_TO
22956: IFFALSE 23047
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22958: LD_STRING setWarehouseGatheringPointXY(
22960: PUSH
22961: LD_VAR 0 3
22965: PUSH
22966: LD_VAR 0 2
22970: ARRAY
22971: PUSH
22972: LD_INT 1
22974: ARRAY
22975: STR
22976: PUSH
22977: LD_STRING ,
22979: STR
22980: PUSH
22981: LD_VAR 0 3
22985: PUSH
22986: LD_VAR 0 2
22990: ARRAY
22991: PUSH
22992: LD_INT 2
22994: ARRAY
22995: STR
22996: PUSH
22997: LD_STRING ,
22999: STR
23000: PUSH
23001: LD_VAR 0 3
23005: PUSH
23006: LD_VAR 0 2
23010: ARRAY
23011: PUSH
23012: LD_INT 3
23014: ARRAY
23015: STR
23016: PUSH
23017: LD_STRING ,
23019: STR
23020: PUSH
23021: LD_VAR 0 3
23025: PUSH
23026: LD_VAR 0 2
23030: ARRAY
23031: PUSH
23032: LD_INT 4
23034: ARRAY
23035: STR
23036: PUSH
23037: LD_STRING )
23039: STR
23040: PPUSH
23041: CALL_OW 559
23045: GO 22955
23047: POP
23048: POP
// end ; end ;
23049: LD_VAR 0 1
23053: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23054: LD_EXP 85
23058: IFFALSE 23753
23060: GO 23062
23062: DISABLE
23063: LD_INT 0
23065: PPUSH
23066: PPUSH
23067: PPUSH
23068: PPUSH
23069: PPUSH
23070: PPUSH
23071: PPUSH
23072: PPUSH
23073: PPUSH
// begin enable ;
23074: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23075: LD_ADDR_VAR 0 3
23079: PUSH
23080: LD_EXP 85
23084: PPUSH
23085: CALL 72364 0 1
23089: ST_TO_ADDR
// if not list then
23090: LD_VAR 0 3
23094: NOT
23095: IFFALSE 23099
// exit ;
23097: GO 23753
// for i := 1 to list do
23099: LD_ADDR_VAR 0 1
23103: PUSH
23104: DOUBLE
23105: LD_INT 1
23107: DEC
23108: ST_TO_ADDR
23109: LD_VAR 0 3
23113: PUSH
23114: FOR_TO
23115: IFFALSE 23751
// begin depot := list [ i ] [ 2 ] ;
23117: LD_ADDR_VAR 0 8
23121: PUSH
23122: LD_VAR 0 3
23126: PUSH
23127: LD_VAR 0 1
23131: ARRAY
23132: PUSH
23133: LD_INT 2
23135: ARRAY
23136: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23137: LD_ADDR_VAR 0 5
23141: PUSH
23142: LD_VAR 0 3
23146: PUSH
23147: LD_VAR 0 1
23151: ARRAY
23152: PUSH
23153: LD_INT 1
23155: ARRAY
23156: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23157: LD_VAR 0 8
23161: PPUSH
23162: CALL_OW 301
23166: IFTRUE 23185
23168: PUSH
23169: LD_VAR 0 5
23173: PUSH
23174: LD_VAR 0 8
23178: PPUSH
23179: CALL_OW 255
23183: NONEQUAL
23184: OR
23185: IFFALSE 23214
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23187: LD_ADDR_EXP 85
23191: PUSH
23192: LD_EXP 85
23196: PPUSH
23197: LD_VAR 0 8
23201: PPUSH
23202: LD_INT 0
23204: PPUSH
23205: CALL_OW 1
23209: ST_TO_ADDR
// exit ;
23210: POP
23211: POP
23212: GO 23753
// end ; x := list [ i ] [ 3 ] ;
23214: LD_ADDR_VAR 0 6
23218: PUSH
23219: LD_VAR 0 3
23223: PUSH
23224: LD_VAR 0 1
23228: ARRAY
23229: PUSH
23230: LD_INT 3
23232: ARRAY
23233: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23234: LD_ADDR_VAR 0 7
23238: PUSH
23239: LD_VAR 0 3
23243: PUSH
23244: LD_VAR 0 1
23248: ARRAY
23249: PUSH
23250: LD_INT 4
23252: ARRAY
23253: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23254: LD_ADDR_VAR 0 9
23258: PUSH
23259: LD_VAR 0 6
23263: PPUSH
23264: LD_VAR 0 7
23268: PPUSH
23269: LD_INT 16
23271: PPUSH
23272: CALL 70938 0 3
23276: ST_TO_ADDR
// if not cratesNearbyPoint then
23277: LD_VAR 0 9
23281: NOT
23282: IFFALSE 23288
// exit ;
23284: POP
23285: POP
23286: GO 23753
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23288: LD_ADDR_VAR 0 4
23292: PUSH
23293: LD_INT 22
23295: PUSH
23296: LD_VAR 0 5
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 3
23307: PUSH
23308: LD_INT 60
23310: PUSH
23311: EMPTY
23312: LIST
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 91
23320: PUSH
23321: LD_VAR 0 8
23325: PUSH
23326: LD_INT 6
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 2
23336: PUSH
23337: LD_INT 25
23339: PUSH
23340: LD_INT 2
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 25
23349: PUSH
23350: LD_INT 16
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: LIST
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: PPUSH
23368: CALL_OW 69
23372: PUSH
23373: LD_VAR 0 8
23377: PPUSH
23378: CALL_OW 313
23382: PPUSH
23383: LD_INT 3
23385: PUSH
23386: LD_INT 60
23388: PUSH
23389: EMPTY
23390: LIST
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 2
23398: PUSH
23399: LD_INT 25
23401: PUSH
23402: LD_INT 2
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 25
23411: PUSH
23412: LD_INT 16
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: LIST
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PPUSH
23428: CALL_OW 72
23432: UNION
23433: ST_TO_ADDR
// if tmp then
23434: LD_VAR 0 4
23438: IFFALSE 23518
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23440: LD_ADDR_VAR 0 4
23444: PUSH
23445: LD_VAR 0 4
23449: PPUSH
23450: LD_INT 3
23452: PPUSH
23453: CALL 68745 0 2
23457: ST_TO_ADDR
// for j in tmp do
23458: LD_ADDR_VAR 0 2
23462: PUSH
23463: LD_VAR 0 4
23467: PUSH
23468: FOR_IN
23469: IFFALSE 23512
// begin if IsInUnit ( j ) then
23471: LD_VAR 0 2
23475: PPUSH
23476: CALL_OW 310
23480: IFFALSE 23491
// ComExit ( j ) ;
23482: LD_VAR 0 2
23486: PPUSH
23487: CALL 68828 0 1
// AddComCollect ( j , x , y ) ;
23491: LD_VAR 0 2
23495: PPUSH
23496: LD_VAR 0 6
23500: PPUSH
23501: LD_VAR 0 7
23505: PPUSH
23506: CALL_OW 177
// end ;
23510: GO 23468
23512: POP
23513: POP
// exit ;
23514: POP
23515: POP
23516: GO 23753
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23518: LD_ADDR_VAR 0 4
23522: PUSH
23523: LD_INT 22
23525: PUSH
23526: LD_VAR 0 5
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 91
23537: PUSH
23538: LD_VAR 0 8
23542: PUSH
23543: LD_INT 8
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 2
23553: PUSH
23554: LD_INT 34
23556: PUSH
23557: LD_INT 12
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 34
23566: PUSH
23567: LD_INT 51
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 34
23576: PUSH
23577: LD_INT 32
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 34
23586: PUSH
23587: LD_INT 89
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: LIST
23605: PPUSH
23606: CALL_OW 69
23610: ST_TO_ADDR
// if tmp then
23611: LD_VAR 0 4
23615: IFFALSE 23749
// begin for j in tmp do
23617: LD_ADDR_VAR 0 2
23621: PUSH
23622: LD_VAR 0 4
23626: PUSH
23627: FOR_IN
23628: IFFALSE 23747
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23630: LD_VAR 0 2
23634: PPUSH
23635: CALL_OW 262
23639: PUSH
23640: LD_INT 3
23642: EQUAL
23643: IFTRUE 23660
23645: PUSH
23646: LD_VAR 0 2
23650: PPUSH
23651: CALL_OW 261
23655: PUSH
23656: LD_INT 20
23658: GREATER
23659: OR
23660: IFFALSE 23674
23662: PUSH
23663: LD_VAR 0 2
23667: PPUSH
23668: CALL_OW 314
23672: NOT
23673: AND
23674: IFFALSE 23704
23676: PUSH
23677: LD_VAR 0 2
23681: PPUSH
23682: CALL_OW 263
23686: PUSH
23687: LD_INT 1
23689: NONEQUAL
23690: IFTRUE 23703
23692: PUSH
23693: LD_VAR 0 2
23697: PPUSH
23698: CALL_OW 311
23702: OR
23703: AND
23704: IFFALSE 23745
// begin ComCollect ( j , x , y ) ;
23706: LD_VAR 0 2
23710: PPUSH
23711: LD_VAR 0 6
23715: PPUSH
23716: LD_VAR 0 7
23720: PPUSH
23721: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23725: LD_VAR 0 2
23729: PPUSH
23730: LD_VAR 0 8
23734: PPUSH
23735: CALL_OW 172
// exit ;
23739: POP
23740: POP
23741: POP
23742: POP
23743: GO 23753
// end ;
23745: GO 23627
23747: POP
23748: POP
// end ; end ;
23749: GO 23114
23751: POP
23752: POP
// end ; end_of_file
23753: PPOPN 9
23755: END
// export function SOS_UnitDestroyed ( un ) ; begin
23756: LD_INT 0
23758: PPUSH
// ComRadiation ( un ) ;
23759: LD_VAR 0 1
23763: PPUSH
23764: CALL 24926 0 1
// end ;
23768: LD_VAR 0 2
23772: RET
// export function SOS_UnitKamikazed ( un ) ; begin
23773: LD_INT 0
23775: PPUSH
// ComRadiation ( un ) ;
23776: LD_VAR 0 1
23780: PPUSH
23781: CALL 24926 0 1
// end ;
23785: LD_VAR 0 2
23789: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23790: LD_INT 0
23792: PPUSH
// end ;
23793: LD_VAR 0 4
23797: RET
// export function SOS_Command ( cmd ) ; begin
23798: LD_INT 0
23800: PPUSH
// end ;
23801: LD_VAR 0 2
23805: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23806: LD_INT 0
23808: PPUSH
// end ;
23809: LD_VAR 0 6
23813: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
23814: LD_INT 0
23816: PPUSH
23817: PPUSH
23818: PPUSH
23819: PPUSH
23820: PPUSH
// if not vehicle or not factory then
23821: LD_VAR 0 1
23825: NOT
23826: IFTRUE 23835
23828: PUSH
23829: LD_VAR 0 2
23833: NOT
23834: OR
23835: IFFALSE 23839
// exit ;
23837: GO 24501
// weapon := GetWeapon ( vehicle ) ;
23839: LD_ADDR_VAR 0 7
23843: PUSH
23844: LD_VAR 0 1
23848: PPUSH
23849: CALL_OW 264
23853: ST_TO_ADDR
// if weapon = ar_miner then
23854: LD_VAR 0 7
23858: PUSH
23859: LD_INT 81
23861: EQUAL
23862: IFFALSE 23919
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
23864: LD_ADDR_EXP 94
23868: PUSH
23869: LD_EXP 94
23873: PPUSH
23874: LD_EXP 94
23878: PUSH
23879: LD_INT 1
23881: PLUS
23882: PPUSH
23883: LD_VAR 0 1
23887: PPUSH
23888: CALL_OW 1
23892: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23893: LD_ADDR_EXP 95
23897: PUSH
23898: LD_EXP 95
23902: PPUSH
23903: LD_EXP 95
23907: PUSH
23908: LD_INT 1
23910: PLUS
23911: PPUSH
23912: EMPTY
23913: PPUSH
23914: CALL_OW 1
23918: ST_TO_ADDR
// end ; if not factoryWaypoints then
23919: LD_EXP 83
23923: NOT
23924: IFFALSE 23928
// exit ;
23926: GO 24501
// for i := 1 to Count ( factoryWaypoints ) do
23928: LD_ADDR_VAR 0 4
23932: PUSH
23933: DOUBLE
23934: LD_INT 1
23936: DEC
23937: ST_TO_ADDR
23938: LD_EXP 83
23942: PPUSH
23943: CALL 32454 0 1
23947: PUSH
23948: FOR_TO
23949: IFFALSE 24499
// if factoryWaypoints [ i ] [ 2 ] = factory then
23951: LD_EXP 83
23955: PUSH
23956: LD_VAR 0 4
23960: ARRAY
23961: PUSH
23962: LD_INT 2
23964: ARRAY
23965: PUSH
23966: LD_VAR 0 2
23970: EQUAL
23971: IFFALSE 24497
// begin if GetControl ( vehicle ) = control_manual then
23973: LD_VAR 0 1
23977: PPUSH
23978: CALL_OW 263
23982: PUSH
23983: LD_INT 1
23985: EQUAL
23986: IFFALSE 24350
// begin driver := IsDrivenBy ( vehicle ) ;
23988: LD_ADDR_VAR 0 5
23992: PUSH
23993: LD_VAR 0 1
23997: PPUSH
23998: CALL_OW 311
24002: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
24003: LD_VAR 0 5
24007: PUSH
24008: LD_EXP 84
24012: IN
24013: IFTRUE 24027
24015: PUSH
24016: LD_VAR 0 1
24020: PUSH
24021: LD_EXP 84
24025: IN
24026: OR
24027: IFFALSE 24033
// exit ;
24029: POP
24030: POP
24031: GO 24501
// if not HasTask ( driver ) then
24033: LD_VAR 0 5
24037: PPUSH
24038: CALL_OW 314
24042: NOT
24043: IFFALSE 24348
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
24045: LD_ADDR_EXP 84
24049: PUSH
24050: LD_EXP 84
24054: PPUSH
24055: LD_VAR 0 5
24059: PPUSH
24060: CALL 68430 0 2
24064: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
24065: LD_ADDR_EXP 84
24069: PUSH
24070: LD_EXP 84
24074: PPUSH
24075: LD_VAR 0 1
24079: PPUSH
24080: CALL 68430 0 2
24084: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24085: LD_ADDR_VAR 0 6
24089: PUSH
24090: LD_EXP 83
24094: PUSH
24095: LD_VAR 0 4
24099: ARRAY
24100: PUSH
24101: LD_INT 3
24103: ARRAY
24104: PPUSH
24105: LD_EXP 83
24109: PUSH
24110: LD_VAR 0 4
24114: ARRAY
24115: PUSH
24116: LD_INT 4
24118: ARRAY
24119: PPUSH
24120: CALL_OW 428
24124: ST_TO_ADDR
// if hex then
24125: LD_VAR 0 6
24129: IFFALSE 24147
// ComMoveUnit ( driver , hex ) else
24131: LD_VAR 0 5
24135: PPUSH
24136: LD_VAR 0 6
24140: PPUSH
24141: CALL_OW 112
24145: GO 24231
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
24147: LD_VAR 0 1
24151: PPUSH
24152: LD_EXP 83
24156: PUSH
24157: LD_VAR 0 4
24161: ARRAY
24162: PUSH
24163: LD_INT 3
24165: ARRAY
24166: PPUSH
24167: LD_EXP 83
24171: PUSH
24172: LD_VAR 0 4
24176: ARRAY
24177: PUSH
24178: LD_INT 4
24180: ARRAY
24181: PPUSH
24182: CALL_OW 297
24186: PUSH
24187: LD_INT 0
24189: GREATER
24190: IFFALSE 24231
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24192: LD_VAR 0 5
24196: PPUSH
24197: LD_EXP 83
24201: PUSH
24202: LD_VAR 0 4
24206: ARRAY
24207: PUSH
24208: LD_INT 3
24210: ARRAY
24211: PPUSH
24212: LD_EXP 83
24216: PUSH
24217: LD_VAR 0 4
24221: ARRAY
24222: PUSH
24223: LD_INT 4
24225: ARRAY
24226: PPUSH
24227: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24231: LD_VAR 0 5
24235: PPUSH
24236: CALL_OW 181
// if Multiplayer then
24240: LD_OWVAR 4
24244: IFFALSE 24293
// begin repeat wait ( 10 ) ;
24246: LD_INT 10
24248: PPUSH
24249: CALL_OW 67
// until not IsInUnit ( driver ) ;
24253: LD_VAR 0 5
24257: PPUSH
24258: CALL_OW 310
24262: NOT
24263: IFFALSE 24246
// if not HasTask ( driver ) then
24265: LD_VAR 0 5
24269: PPUSH
24270: CALL_OW 314
24274: NOT
24275: IFFALSE 24291
// ComEnterUnit ( driver , factory ) ;
24277: LD_VAR 0 5
24281: PPUSH
24282: LD_VAR 0 2
24286: PPUSH
24287: CALL_OW 120
// end else
24291: GO 24307
// AddComEnterUnit ( driver , factory ) ;
24293: LD_VAR 0 5
24297: PPUSH
24298: LD_VAR 0 2
24302: PPUSH
24303: CALL_OW 180
// wait ( 0 0$1 ) ;
24307: LD_INT 35
24309: PPUSH
24310: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
24314: LD_ADDR_EXP 84
24318: PUSH
24319: LD_EXP 84
24323: PUSH
24324: LD_VAR 0 5
24328: DIFF
24329: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
24330: LD_ADDR_EXP 84
24334: PUSH
24335: LD_EXP 84
24339: PUSH
24340: LD_VAR 0 1
24344: DIFF
24345: ST_TO_ADDR
// break ;
24346: GO 24499
// end ; end else
24348: GO 24497
// if GetControl ( vehicle ) = control_remote then
24350: LD_VAR 0 1
24354: PPUSH
24355: CALL_OW 263
24359: PUSH
24360: LD_INT 2
24362: EQUAL
24363: IFFALSE 24449
// begin wait ( 0 0$2 ) ;
24365: LD_INT 70
24367: PPUSH
24368: CALL_OW 67
// repeat wait ( 10 ) ;
24372: LD_INT 10
24374: PPUSH
24375: CALL_OW 67
// Connect ( vehicle ) ;
24379: LD_VAR 0 1
24383: PPUSH
24384: CALL 38732 0 1
// until IsControledBy ( vehicle ) ;
24388: LD_VAR 0 1
24392: PPUSH
24393: CALL_OW 312
24397: IFFALSE 24372
// wait ( 10 ) ;
24399: LD_INT 10
24401: PPUSH
24402: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24406: LD_VAR 0 1
24410: PPUSH
24411: LD_EXP 83
24415: PUSH
24416: LD_VAR 0 4
24420: ARRAY
24421: PUSH
24422: LD_INT 3
24424: ARRAY
24425: PPUSH
24426: LD_EXP 83
24430: PUSH
24431: LD_VAR 0 4
24435: ARRAY
24436: PUSH
24437: LD_INT 4
24439: ARRAY
24440: PPUSH
24441: CALL_OW 111
// break ;
24445: GO 24499
// end else
24447: GO 24497
// begin wait ( 0 0$3 ) ;
24449: LD_INT 105
24451: PPUSH
24452: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24456: LD_VAR 0 1
24460: PPUSH
24461: LD_EXP 83
24465: PUSH
24466: LD_VAR 0 4
24470: ARRAY
24471: PUSH
24472: LD_INT 3
24474: ARRAY
24475: PPUSH
24476: LD_EXP 83
24480: PUSH
24481: LD_VAR 0 4
24485: ARRAY
24486: PUSH
24487: LD_INT 4
24489: ARRAY
24490: PPUSH
24491: CALL_OW 111
// break ;
24495: GO 24499
// end ; end ;
24497: GO 23948
24499: POP
24500: POP
// end ;
24501: LD_VAR 0 3
24505: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24506: LD_INT 0
24508: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24509: LD_VAR 0 1
24513: PUSH
24514: LD_INT 250
24516: EQUAL
24517: IFFALSE 24534
24519: PUSH
24520: LD_VAR 0 2
24524: PPUSH
24525: CALL_OW 264
24529: PUSH
24530: LD_INT 81
24532: EQUAL
24533: AND
24534: IFFALSE 24555
// MinerPlaceMine ( unit , x , y ) ;
24536: LD_VAR 0 2
24540: PPUSH
24541: LD_VAR 0 4
24545: PPUSH
24546: LD_VAR 0 5
24550: PPUSH
24551: CALL 27901 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24555: LD_VAR 0 1
24559: PUSH
24560: LD_INT 251
24562: EQUAL
24563: IFFALSE 24580
24565: PUSH
24566: LD_VAR 0 2
24570: PPUSH
24571: CALL_OW 264
24575: PUSH
24576: LD_INT 81
24578: EQUAL
24579: AND
24580: IFFALSE 24601
// MinerDetonateMine ( unit , x , y ) ;
24582: LD_VAR 0 2
24586: PPUSH
24587: LD_VAR 0 4
24591: PPUSH
24592: LD_VAR 0 5
24596: PPUSH
24597: CALL 28308 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24601: LD_VAR 0 1
24605: PUSH
24606: LD_INT 252
24608: EQUAL
24609: IFFALSE 24626
24611: PUSH
24612: LD_VAR 0 2
24616: PPUSH
24617: CALL_OW 264
24621: PUSH
24622: LD_INT 81
24624: EQUAL
24625: AND
24626: IFFALSE 24647
// MinerCreateMinefield ( unit , x , y ) ;
24628: LD_VAR 0 2
24632: PPUSH
24633: LD_VAR 0 4
24637: PPUSH
24638: LD_VAR 0 5
24642: PPUSH
24643: CALL 28540 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24647: LD_VAR 0 1
24651: PUSH
24652: LD_INT 253
24654: EQUAL
24655: IFFALSE 24672
24657: PUSH
24658: LD_VAR 0 2
24662: PPUSH
24663: CALL_OW 257
24667: PUSH
24668: LD_INT 5
24670: EQUAL
24671: AND
24672: IFFALSE 24693
// ComBinocular ( unit , x , y ) ;
24674: LD_VAR 0 2
24678: PPUSH
24679: LD_VAR 0 4
24683: PPUSH
24684: LD_VAR 0 5
24688: PPUSH
24689: CALL 28915 0 3
// if selectedUnit then
24693: LD_VAR 0 3
24697: IFFALSE 24757
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24699: LD_VAR 0 1
24703: PUSH
24704: LD_INT 254
24706: EQUAL
24707: IFFALSE 24724
24709: PUSH
24710: LD_VAR 0 2
24714: PPUSH
24715: CALL_OW 264
24719: PUSH
24720: LD_INT 99
24722: EQUAL
24723: AND
24724: IFFALSE 24741
24726: PUSH
24727: LD_VAR 0 3
24731: PPUSH
24732: CALL_OW 263
24736: PUSH
24737: LD_INT 3
24739: EQUAL
24740: AND
24741: IFFALSE 24757
// HackDestroyVehicle ( unit , selectedUnit ) ;
24743: LD_VAR 0 2
24747: PPUSH
24748: LD_VAR 0 3
24752: PPUSH
24753: CALL 27091 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24757: LD_VAR 0 1
24761: PUSH
24762: LD_INT 255
24764: EQUAL
24765: IFFALSE 24789
24767: PUSH
24768: LD_VAR 0 2
24772: PPUSH
24773: CALL_OW 264
24777: PUSH
24778: LD_INT 14
24780: PUSH
24781: LD_INT 53
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: IN
24788: AND
24789: IFFALSE 24807
24791: PUSH
24792: LD_VAR 0 4
24796: PPUSH
24797: LD_VAR 0 5
24801: PPUSH
24802: CALL_OW 488
24806: AND
24807: IFFALSE 24831
// CutTreeXYR ( unit , x , y , 12 ) ;
24809: LD_VAR 0 2
24813: PPUSH
24814: LD_VAR 0 4
24818: PPUSH
24819: LD_VAR 0 5
24823: PPUSH
24824: LD_INT 12
24826: PPUSH
24827: CALL 25022 0 4
// if cmd = 256 then
24831: LD_VAR 0 1
24835: PUSH
24836: LD_INT 256
24838: EQUAL
24839: IFFALSE 24860
// SetFactoryWaypoint ( unit , x , y ) ;
24841: LD_VAR 0 2
24845: PPUSH
24846: LD_VAR 0 4
24850: PPUSH
24851: LD_VAR 0 5
24855: PPUSH
24856: CALL 22301 0 3
// if cmd = 257 then
24860: LD_VAR 0 1
24864: PUSH
24865: LD_INT 257
24867: EQUAL
24868: IFFALSE 24889
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24870: LD_VAR 0 2
24874: PPUSH
24875: LD_VAR 0 4
24879: PPUSH
24880: LD_VAR 0 5
24884: PPUSH
24885: CALL 22797 0 3
// if cmd = 258 then
24889: LD_VAR 0 1
24893: PUSH
24894: LD_INT 258
24896: EQUAL
24897: IFFALSE 24921
// BurnTreeXYR ( unit , x , y , 8 ) ;
24899: LD_VAR 0 2
24903: PPUSH
24904: LD_VAR 0 4
24908: PPUSH
24909: LD_VAR 0 5
24913: PPUSH
24914: LD_INT 8
24916: PPUSH
24917: CALL 25444 0 4
// end ;
24921: LD_VAR 0 6
24925: RET
// export function ComRadiation ( un ) ; var eff ; begin
24926: LD_INT 0
24928: PPUSH
24929: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
24930: LD_VAR 0 1
24934: PPUSH
24935: CALL_OW 264
24939: PUSH
24940: LD_INT 91
24942: NONEQUAL
24943: IFFALSE 24947
// exit ;
24945: GO 25017
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24947: LD_INT 68
24949: PPUSH
24950: LD_VAR 0 1
24954: PPUSH
24955: CALL_OW 255
24959: PPUSH
24960: CALL_OW 321
24964: PUSH
24965: LD_INT 2
24967: EQUAL
24968: IFFALSE 24980
// eff := 50 else
24970: LD_ADDR_VAR 0 3
24974: PUSH
24975: LD_INT 50
24977: ST_TO_ADDR
24978: GO 24988
// eff := 25 ;
24980: LD_ADDR_VAR 0 3
24984: PUSH
24985: LD_INT 25
24987: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24988: LD_VAR 0 1
24992: PPUSH
24993: CALL_OW 250
24997: PPUSH
24998: LD_VAR 0 1
25002: PPUSH
25003: CALL_OW 251
25007: PPUSH
25008: LD_VAR 0 3
25012: PPUSH
25013: CALL_OW 495
// end ;
25017: LD_VAR 0 2
25021: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25022: LD_INT 0
25024: PPUSH
25025: PPUSH
25026: PPUSH
25027: PPUSH
25028: PPUSH
25029: PPUSH
25030: PPUSH
25031: PPUSH
25032: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
25033: LD_VAR 0 1
25037: PPUSH
25038: CALL_OW 302
25042: NOT
25043: IFTRUE 25062
25045: PUSH
25046: LD_VAR 0 2
25050: PPUSH
25051: LD_VAR 0 3
25055: PPUSH
25056: CALL_OW 488
25060: NOT
25061: OR
25062: IFTRUE 25071
25064: PUSH
25065: LD_VAR 0 4
25069: NOT
25070: OR
25071: IFFALSE 25075
// exit ;
25073: GO 25439
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
25075: LD_VAR 0 1
25079: PPUSH
25080: CALL_OW 437
25084: PPUSH
25085: CALL 32454 0 1
25089: PUSH
25090: LD_INT 10
25092: GREATER
25093: IFFALSE 25097
// exit ;
25095: GO 25439
// list := [ ] ;
25097: LD_ADDR_VAR 0 13
25101: PUSH
25102: EMPTY
25103: ST_TO_ADDR
// if x - r < 0 then
25104: LD_VAR 0 2
25108: PUSH
25109: LD_VAR 0 4
25113: MINUS
25114: PUSH
25115: LD_INT 0
25117: LESS
25118: IFFALSE 25130
// min_x := 0 else
25120: LD_ADDR_VAR 0 7
25124: PUSH
25125: LD_INT 0
25127: ST_TO_ADDR
25128: GO 25146
// min_x := x - r ;
25130: LD_ADDR_VAR 0 7
25134: PUSH
25135: LD_VAR 0 2
25139: PUSH
25140: LD_VAR 0 4
25144: MINUS
25145: ST_TO_ADDR
// if y - r < 0 then
25146: LD_VAR 0 3
25150: PUSH
25151: LD_VAR 0 4
25155: MINUS
25156: PUSH
25157: LD_INT 0
25159: LESS
25160: IFFALSE 25172
// min_y := 0 else
25162: LD_ADDR_VAR 0 8
25166: PUSH
25167: LD_INT 0
25169: ST_TO_ADDR
25170: GO 25188
// min_y := y - r ;
25172: LD_ADDR_VAR 0 8
25176: PUSH
25177: LD_VAR 0 3
25181: PUSH
25182: LD_VAR 0 4
25186: MINUS
25187: ST_TO_ADDR
// max_x := x + r ;
25188: LD_ADDR_VAR 0 9
25192: PUSH
25193: LD_VAR 0 2
25197: PUSH
25198: LD_VAR 0 4
25202: PLUS
25203: ST_TO_ADDR
// max_y := y + r ;
25204: LD_ADDR_VAR 0 10
25208: PUSH
25209: LD_VAR 0 3
25213: PUSH
25214: LD_VAR 0 4
25218: PLUS
25219: ST_TO_ADDR
// for _x = min_x to max_x do
25220: LD_ADDR_VAR 0 11
25224: PUSH
25225: DOUBLE
25226: LD_VAR 0 7
25230: DEC
25231: ST_TO_ADDR
25232: LD_VAR 0 9
25236: PUSH
25237: FOR_TO
25238: IFFALSE 25357
// for _y = min_y to max_y do
25240: LD_ADDR_VAR 0 12
25244: PUSH
25245: DOUBLE
25246: LD_VAR 0 8
25250: DEC
25251: ST_TO_ADDR
25252: LD_VAR 0 10
25256: PUSH
25257: FOR_TO
25258: IFFALSE 25353
// begin if not ValidHex ( _x , _y ) then
25260: LD_VAR 0 11
25264: PPUSH
25265: LD_VAR 0 12
25269: PPUSH
25270: CALL_OW 488
25274: NOT
25275: IFFALSE 25279
// continue ;
25277: GO 25257
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25279: LD_VAR 0 11
25283: PPUSH
25284: LD_VAR 0 12
25288: PPUSH
25289: CALL_OW 351
25293: IFFALSE 25311
25295: PUSH
25296: LD_VAR 0 11
25300: PPUSH
25301: LD_VAR 0 12
25305: PPUSH
25306: CALL_OW 554
25310: AND
25311: IFFALSE 25351
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25313: LD_ADDR_VAR 0 13
25317: PUSH
25318: LD_VAR 0 13
25322: PPUSH
25323: LD_VAR 0 13
25327: PUSH
25328: LD_INT 1
25330: PLUS
25331: PPUSH
25332: LD_VAR 0 11
25336: PUSH
25337: LD_VAR 0 12
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PPUSH
25346: CALL_OW 2
25350: ST_TO_ADDR
// end ;
25351: GO 25257
25353: POP
25354: POP
25355: GO 25237
25357: POP
25358: POP
// if not list then
25359: LD_VAR 0 13
25363: NOT
25364: IFFALSE 25368
// exit ;
25366: GO 25439
// for i in list do
25368: LD_ADDR_VAR 0 6
25372: PUSH
25373: LD_VAR 0 13
25377: PUSH
25378: FOR_IN
25379: IFFALSE 25437
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25381: LD_VAR 0 1
25385: PPUSH
25386: LD_STRING M
25388: PUSH
25389: LD_VAR 0 6
25393: PUSH
25394: LD_INT 1
25396: ARRAY
25397: PUSH
25398: LD_VAR 0 6
25402: PUSH
25403: LD_INT 2
25405: ARRAY
25406: PUSH
25407: LD_INT 0
25409: PUSH
25410: LD_INT 0
25412: PUSH
25413: LD_INT 0
25415: PUSH
25416: LD_INT 0
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: PUSH
25428: EMPTY
25429: LIST
25430: PPUSH
25431: CALL_OW 447
25435: GO 25378
25437: POP
25438: POP
// end ;
25439: LD_VAR 0 5
25443: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
25444: LD_INT 0
25446: PPUSH
25447: PPUSH
25448: PPUSH
25449: PPUSH
25450: PPUSH
25451: PPUSH
25452: PPUSH
25453: PPUSH
25454: PPUSH
25455: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
25456: LD_VAR 0 1
25460: PPUSH
25461: CALL_OW 302
25465: NOT
25466: IFTRUE 25485
25468: PUSH
25469: LD_VAR 0 2
25473: PPUSH
25474: LD_VAR 0 3
25478: PPUSH
25479: CALL_OW 488
25483: NOT
25484: OR
25485: IFTRUE 25494
25487: PUSH
25488: LD_VAR 0 4
25492: NOT
25493: OR
25494: IFFALSE 25498
// exit ;
25496: GO 26037
// if Count ( GetTaskList ( flame ) ) > 10 then
25498: LD_VAR 0 1
25502: PPUSH
25503: CALL_OW 437
25507: PPUSH
25508: CALL 32454 0 1
25512: PUSH
25513: LD_INT 10
25515: GREATER
25516: IFFALSE 25520
// exit ;
25518: GO 26037
// list := [ ] ;
25520: LD_ADDR_VAR 0 13
25524: PUSH
25525: EMPTY
25526: ST_TO_ADDR
// if x - r < 0 then
25527: LD_VAR 0 2
25531: PUSH
25532: LD_VAR 0 4
25536: MINUS
25537: PUSH
25538: LD_INT 0
25540: LESS
25541: IFFALSE 25553
// min_x := 0 else
25543: LD_ADDR_VAR 0 7
25547: PUSH
25548: LD_INT 0
25550: ST_TO_ADDR
25551: GO 25569
// min_x := x - r ;
25553: LD_ADDR_VAR 0 7
25557: PUSH
25558: LD_VAR 0 2
25562: PUSH
25563: LD_VAR 0 4
25567: MINUS
25568: ST_TO_ADDR
// if y - r < 0 then
25569: LD_VAR 0 3
25573: PUSH
25574: LD_VAR 0 4
25578: MINUS
25579: PUSH
25580: LD_INT 0
25582: LESS
25583: IFFALSE 25595
// min_y := 0 else
25585: LD_ADDR_VAR 0 8
25589: PUSH
25590: LD_INT 0
25592: ST_TO_ADDR
25593: GO 25611
// min_y := y - r ;
25595: LD_ADDR_VAR 0 8
25599: PUSH
25600: LD_VAR 0 3
25604: PUSH
25605: LD_VAR 0 4
25609: MINUS
25610: ST_TO_ADDR
// max_x := x + r ;
25611: LD_ADDR_VAR 0 9
25615: PUSH
25616: LD_VAR 0 2
25620: PUSH
25621: LD_VAR 0 4
25625: PLUS
25626: ST_TO_ADDR
// max_y := y + r ;
25627: LD_ADDR_VAR 0 10
25631: PUSH
25632: LD_VAR 0 3
25636: PUSH
25637: LD_VAR 0 4
25641: PLUS
25642: ST_TO_ADDR
// for _x = min_x to max_x do
25643: LD_ADDR_VAR 0 11
25647: PUSH
25648: DOUBLE
25649: LD_VAR 0 7
25653: DEC
25654: ST_TO_ADDR
25655: LD_VAR 0 9
25659: PUSH
25660: FOR_TO
25661: IFFALSE 25780
// for _y = min_y to max_y do
25663: LD_ADDR_VAR 0 12
25667: PUSH
25668: DOUBLE
25669: LD_VAR 0 8
25673: DEC
25674: ST_TO_ADDR
25675: LD_VAR 0 10
25679: PUSH
25680: FOR_TO
25681: IFFALSE 25776
// begin if not ValidHex ( _x , _y ) then
25683: LD_VAR 0 11
25687: PPUSH
25688: LD_VAR 0 12
25692: PPUSH
25693: CALL_OW 488
25697: NOT
25698: IFFALSE 25702
// continue ;
25700: GO 25680
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25702: LD_VAR 0 11
25706: PPUSH
25707: LD_VAR 0 12
25711: PPUSH
25712: CALL_OW 351
25716: IFFALSE 25734
25718: PUSH
25719: LD_VAR 0 11
25723: PPUSH
25724: LD_VAR 0 12
25728: PPUSH
25729: CALL_OW 554
25733: AND
25734: IFFALSE 25774
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25736: LD_ADDR_VAR 0 13
25740: PUSH
25741: LD_VAR 0 13
25745: PPUSH
25746: LD_VAR 0 13
25750: PUSH
25751: LD_INT 1
25753: PLUS
25754: PPUSH
25755: LD_VAR 0 11
25759: PUSH
25760: LD_VAR 0 12
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PPUSH
25769: CALL_OW 2
25773: ST_TO_ADDR
// end ;
25774: GO 25680
25776: POP
25777: POP
25778: GO 25660
25780: POP
25781: POP
// if not list then
25782: LD_VAR 0 13
25786: NOT
25787: IFFALSE 25791
// exit ;
25789: GO 26037
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
25791: LD_ADDR_VAR 0 13
25795: PUSH
25796: LD_VAR 0 1
25800: PPUSH
25801: LD_VAR 0 13
25805: PPUSH
25806: LD_INT 1
25808: PPUSH
25809: LD_INT 1
25811: PPUSH
25812: CALL 35860 0 4
25816: ST_TO_ADDR
// ComStop ( flame ) ;
25817: LD_VAR 0 1
25821: PPUSH
25822: CALL_OW 141
// for i in list do
25826: LD_ADDR_VAR 0 6
25830: PUSH
25831: LD_VAR 0 13
25835: PUSH
25836: FOR_IN
25837: IFFALSE 25868
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
25839: LD_VAR 0 1
25843: PPUSH
25844: LD_VAR 0 6
25848: PUSH
25849: LD_INT 1
25851: ARRAY
25852: PPUSH
25853: LD_VAR 0 6
25857: PUSH
25858: LD_INT 2
25860: ARRAY
25861: PPUSH
25862: CALL_OW 176
25866: GO 25836
25868: POP
25869: POP
// repeat wait ( 0 0$1 ) ;
25870: LD_INT 35
25872: PPUSH
25873: CALL_OW 67
// task := GetTaskList ( flame ) ;
25877: LD_ADDR_VAR 0 14
25881: PUSH
25882: LD_VAR 0 1
25886: PPUSH
25887: CALL_OW 437
25891: ST_TO_ADDR
// if not task then
25892: LD_VAR 0 14
25896: NOT
25897: IFFALSE 25901
// exit ;
25899: GO 26037
// if task [ 1 ] [ 1 ] <> | then
25901: LD_VAR 0 14
25905: PUSH
25906: LD_INT 1
25908: ARRAY
25909: PUSH
25910: LD_INT 1
25912: ARRAY
25913: PUSH
25914: LD_STRING |
25916: NONEQUAL
25917: IFFALSE 25921
// exit ;
25919: GO 26037
// _x := task [ 1 ] [ 2 ] ;
25921: LD_ADDR_VAR 0 11
25925: PUSH
25926: LD_VAR 0 14
25930: PUSH
25931: LD_INT 1
25933: ARRAY
25934: PUSH
25935: LD_INT 2
25937: ARRAY
25938: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
25939: LD_ADDR_VAR 0 12
25943: PUSH
25944: LD_VAR 0 14
25948: PUSH
25949: LD_INT 1
25951: ARRAY
25952: PUSH
25953: LD_INT 3
25955: ARRAY
25956: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
25957: LD_VAR 0 11
25961: PPUSH
25962: LD_VAR 0 12
25966: PPUSH
25967: CALL_OW 351
25971: NOT
25972: IFTRUE 25991
25974: PUSH
25975: LD_VAR 0 11
25979: PPUSH
25980: LD_VAR 0 12
25984: PPUSH
25985: CALL_OW 554
25989: NOT
25990: OR
25991: IFFALSE 26025
// begin task := Delete ( task , 1 ) ;
25993: LD_ADDR_VAR 0 14
25997: PUSH
25998: LD_VAR 0 14
26002: PPUSH
26003: LD_INT 1
26005: PPUSH
26006: CALL_OW 3
26010: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
26011: LD_VAR 0 1
26015: PPUSH
26016: LD_VAR 0 14
26020: PPUSH
26021: CALL_OW 446
// end ; until not HasTask ( flame ) ;
26025: LD_VAR 0 1
26029: PPUSH
26030: CALL_OW 314
26034: NOT
26035: IFFALSE 25870
// end ;
26037: LD_VAR 0 5
26041: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26042: LD_EXP 87
26046: NOT
26047: IFFALSE 26097
26049: GO 26051
26051: DISABLE
// begin initHack := true ;
26052: LD_ADDR_EXP 87
26056: PUSH
26057: LD_INT 1
26059: ST_TO_ADDR
// hackTanks := [ ] ;
26060: LD_ADDR_EXP 88
26064: PUSH
26065: EMPTY
26066: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26067: LD_ADDR_EXP 89
26071: PUSH
26072: EMPTY
26073: ST_TO_ADDR
// hackLimit := 3 ;
26074: LD_ADDR_EXP 90
26078: PUSH
26079: LD_INT 3
26081: ST_TO_ADDR
// hackDist := 12 ;
26082: LD_ADDR_EXP 91
26086: PUSH
26087: LD_INT 12
26089: ST_TO_ADDR
// hackCounter := [ ] ;
26090: LD_ADDR_EXP 92
26094: PUSH
26095: EMPTY
26096: ST_TO_ADDR
// end ;
26097: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26098: LD_EXP 87
26102: IFFALSE 26120
26104: PUSH
26105: LD_INT 34
26107: PUSH
26108: LD_INT 99
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PPUSH
26115: CALL_OW 69
26119: AND
26120: IFFALSE 26373
26122: GO 26124
26124: DISABLE
26125: LD_INT 0
26127: PPUSH
26128: PPUSH
// begin enable ;
26129: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26130: LD_ADDR_VAR 0 1
26134: PUSH
26135: LD_INT 34
26137: PUSH
26138: LD_INT 99
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PPUSH
26145: CALL_OW 69
26149: PUSH
26150: FOR_IN
26151: IFFALSE 26371
// begin if not i in hackTanks then
26153: LD_VAR 0 1
26157: PUSH
26158: LD_EXP 88
26162: IN
26163: NOT
26164: IFFALSE 26247
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26166: LD_ADDR_EXP 88
26170: PUSH
26171: LD_EXP 88
26175: PPUSH
26176: LD_EXP 88
26180: PUSH
26181: LD_INT 1
26183: PLUS
26184: PPUSH
26185: LD_VAR 0 1
26189: PPUSH
26190: CALL_OW 1
26194: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26195: LD_ADDR_EXP 89
26199: PUSH
26200: LD_EXP 89
26204: PPUSH
26205: LD_EXP 89
26209: PUSH
26210: LD_INT 1
26212: PLUS
26213: PPUSH
26214: EMPTY
26215: PPUSH
26216: CALL_OW 1
26220: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26221: LD_ADDR_EXP 92
26225: PUSH
26226: LD_EXP 92
26230: PPUSH
26231: LD_EXP 92
26235: PUSH
26236: LD_INT 1
26238: PLUS
26239: PPUSH
26240: EMPTY
26241: PPUSH
26242: CALL_OW 1
26246: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26247: LD_VAR 0 1
26251: PPUSH
26252: CALL_OW 302
26256: NOT
26257: IFFALSE 26270
// begin HackUnlinkAll ( i ) ;
26259: LD_VAR 0 1
26263: PPUSH
26264: CALL 26376 0 1
// continue ;
26268: GO 26150
// end ; HackCheckCapturedStatus ( i ) ;
26270: LD_VAR 0 1
26274: PPUSH
26275: CALL 26821 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26279: LD_ADDR_VAR 0 2
26283: PUSH
26284: LD_INT 81
26286: PUSH
26287: LD_VAR 0 1
26291: PPUSH
26292: CALL_OW 255
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 33
26303: PUSH
26304: LD_INT 3
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 91
26313: PUSH
26314: LD_VAR 0 1
26318: PUSH
26319: LD_EXP 91
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 50
26331: PUSH
26332: EMPTY
26333: LIST
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: PPUSH
26341: CALL_OW 69
26345: ST_TO_ADDR
// if not tmp then
26346: LD_VAR 0 2
26350: NOT
26351: IFFALSE 26355
// continue ;
26353: GO 26150
// HackLink ( i , tmp ) ;
26355: LD_VAR 0 1
26359: PPUSH
26360: LD_VAR 0 2
26364: PPUSH
26365: CALL 26512 0 2
// end ;
26369: GO 26150
26371: POP
26372: POP
// end ;
26373: PPOPN 2
26375: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26376: LD_INT 0
26378: PPUSH
26379: PPUSH
26380: PPUSH
// if not hack in hackTanks then
26381: LD_VAR 0 1
26385: PUSH
26386: LD_EXP 88
26390: IN
26391: NOT
26392: IFFALSE 26396
// exit ;
26394: GO 26507
// index := GetElementIndex ( hackTanks , hack ) ;
26396: LD_ADDR_VAR 0 4
26400: PUSH
26401: LD_EXP 88
26405: PPUSH
26406: LD_VAR 0 1
26410: PPUSH
26411: CALL 35155 0 2
26415: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26416: LD_EXP 89
26420: PUSH
26421: LD_VAR 0 4
26425: ARRAY
26426: IFFALSE 26507
// begin for i in hackTanksCaptured [ index ] do
26428: LD_ADDR_VAR 0 3
26432: PUSH
26433: LD_EXP 89
26437: PUSH
26438: LD_VAR 0 4
26442: ARRAY
26443: PUSH
26444: FOR_IN
26445: IFFALSE 26471
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26447: LD_VAR 0 3
26451: PUSH
26452: LD_INT 1
26454: ARRAY
26455: PPUSH
26456: LD_VAR 0 3
26460: PUSH
26461: LD_INT 2
26463: ARRAY
26464: PPUSH
26465: CALL_OW 235
26469: GO 26444
26471: POP
26472: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26473: LD_ADDR_EXP 89
26477: PUSH
26478: LD_EXP 89
26482: PPUSH
26483: LD_VAR 0 4
26487: PPUSH
26488: EMPTY
26489: PPUSH
26490: CALL_OW 1
26494: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26495: LD_VAR 0 1
26499: PPUSH
26500: LD_INT 0
26502: PPUSH
26503: CALL_OW 505
// end ; end ;
26507: LD_VAR 0 2
26511: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26512: LD_INT 0
26514: PPUSH
26515: PPUSH
26516: PPUSH
// if not hack in hackTanks or not vehicles then
26517: LD_VAR 0 1
26521: PUSH
26522: LD_EXP 88
26526: IN
26527: NOT
26528: IFTRUE 26537
26530: PUSH
26531: LD_VAR 0 2
26535: NOT
26536: OR
26537: IFFALSE 26541
// exit ;
26539: GO 26816
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26541: LD_ADDR_VAR 0 2
26545: PUSH
26546: LD_VAR 0 1
26550: PPUSH
26551: LD_VAR 0 2
26555: PPUSH
26556: LD_INT 1
26558: PPUSH
26559: LD_INT 1
26561: PPUSH
26562: CALL 35807 0 4
26566: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26567: LD_ADDR_VAR 0 5
26571: PUSH
26572: LD_EXP 88
26576: PPUSH
26577: LD_VAR 0 1
26581: PPUSH
26582: CALL 35155 0 2
26586: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26587: LD_EXP 89
26591: PUSH
26592: LD_VAR 0 5
26596: ARRAY
26597: PUSH
26598: LD_EXP 90
26602: LESS
26603: IFFALSE 26792
// begin for i := 1 to vehicles do
26605: LD_ADDR_VAR 0 4
26609: PUSH
26610: DOUBLE
26611: LD_INT 1
26613: DEC
26614: ST_TO_ADDR
26615: LD_VAR 0 2
26619: PUSH
26620: FOR_TO
26621: IFFALSE 26790
// begin if hackTanksCaptured [ index ] = hackLimit then
26623: LD_EXP 89
26627: PUSH
26628: LD_VAR 0 5
26632: ARRAY
26633: PUSH
26634: LD_EXP 90
26638: EQUAL
26639: IFFALSE 26643
// break ;
26641: GO 26790
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26643: LD_ADDR_EXP 92
26647: PUSH
26648: LD_EXP 92
26652: PPUSH
26653: LD_VAR 0 5
26657: PPUSH
26658: LD_EXP 92
26662: PUSH
26663: LD_VAR 0 5
26667: ARRAY
26668: PUSH
26669: LD_INT 1
26671: PLUS
26672: PPUSH
26673: CALL_OW 1
26677: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26678: LD_ADDR_EXP 89
26682: PUSH
26683: LD_EXP 89
26687: PPUSH
26688: LD_VAR 0 5
26692: PUSH
26693: LD_EXP 89
26697: PUSH
26698: LD_VAR 0 5
26702: ARRAY
26703: PUSH
26704: LD_INT 1
26706: PLUS
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PPUSH
26712: LD_VAR 0 2
26716: PUSH
26717: LD_VAR 0 4
26721: ARRAY
26722: PUSH
26723: LD_VAR 0 2
26727: PUSH
26728: LD_VAR 0 4
26732: ARRAY
26733: PPUSH
26734: CALL_OW 255
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PPUSH
26743: CALL 35372 0 3
26747: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26748: LD_VAR 0 2
26752: PUSH
26753: LD_VAR 0 4
26757: ARRAY
26758: PPUSH
26759: LD_VAR 0 1
26763: PPUSH
26764: CALL_OW 255
26768: PPUSH
26769: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26773: LD_VAR 0 2
26777: PUSH
26778: LD_VAR 0 4
26782: ARRAY
26783: PPUSH
26784: CALL_OW 141
// end ;
26788: GO 26620
26790: POP
26791: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26792: LD_VAR 0 1
26796: PPUSH
26797: LD_EXP 89
26801: PUSH
26802: LD_VAR 0 5
26806: ARRAY
26807: PUSH
26808: LD_INT 0
26810: PLUS
26811: PPUSH
26812: CALL_OW 505
// end ;
26816: LD_VAR 0 3
26820: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26821: LD_INT 0
26823: PPUSH
26824: PPUSH
26825: PPUSH
26826: PPUSH
// if not hack in hackTanks then
26827: LD_VAR 0 1
26831: PUSH
26832: LD_EXP 88
26836: IN
26837: NOT
26838: IFFALSE 26842
// exit ;
26840: GO 27086
// index := GetElementIndex ( hackTanks , hack ) ;
26842: LD_ADDR_VAR 0 4
26846: PUSH
26847: LD_EXP 88
26851: PPUSH
26852: LD_VAR 0 1
26856: PPUSH
26857: CALL 35155 0 2
26861: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26862: LD_ADDR_VAR 0 3
26866: PUSH
26867: DOUBLE
26868: LD_EXP 89
26872: PUSH
26873: LD_VAR 0 4
26877: ARRAY
26878: INC
26879: ST_TO_ADDR
26880: LD_INT 1
26882: PUSH
26883: FOR_DOWNTO
26884: IFFALSE 27060
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26886: LD_ADDR_VAR 0 5
26890: PUSH
26891: LD_EXP 89
26895: PUSH
26896: LD_VAR 0 4
26900: ARRAY
26901: PUSH
26902: LD_VAR 0 3
26906: ARRAY
26907: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26908: LD_VAR 0 5
26912: PUSH
26913: LD_INT 1
26915: ARRAY
26916: PPUSH
26917: CALL_OW 302
26921: NOT
26922: IFTRUE 26950
26924: PUSH
26925: LD_VAR 0 5
26929: PUSH
26930: LD_INT 1
26932: ARRAY
26933: PPUSH
26934: CALL_OW 255
26938: PUSH
26939: LD_VAR 0 1
26943: PPUSH
26944: CALL_OW 255
26948: NONEQUAL
26949: OR
26950: IFFALSE 27058
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26952: LD_VAR 0 5
26956: PUSH
26957: LD_INT 1
26959: ARRAY
26960: PPUSH
26961: CALL_OW 305
26965: IFFALSE 26993
26967: PUSH
26968: LD_VAR 0 5
26972: PUSH
26973: LD_INT 1
26975: ARRAY
26976: PPUSH
26977: CALL_OW 255
26981: PUSH
26982: LD_VAR 0 1
26986: PPUSH
26987: CALL_OW 255
26991: EQUAL
26992: AND
26993: IFFALSE 27017
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26995: LD_VAR 0 5
26999: PUSH
27000: LD_INT 1
27002: ARRAY
27003: PPUSH
27004: LD_VAR 0 5
27008: PUSH
27009: LD_INT 2
27011: ARRAY
27012: PPUSH
27013: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27017: LD_ADDR_EXP 89
27021: PUSH
27022: LD_EXP 89
27026: PPUSH
27027: LD_VAR 0 4
27031: PPUSH
27032: LD_EXP 89
27036: PUSH
27037: LD_VAR 0 4
27041: ARRAY
27042: PPUSH
27043: LD_VAR 0 3
27047: PPUSH
27048: CALL_OW 3
27052: PPUSH
27053: CALL_OW 1
27057: ST_TO_ADDR
// end ; end ;
27058: GO 26883
27060: POP
27061: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27062: LD_VAR 0 1
27066: PPUSH
27067: LD_EXP 89
27071: PUSH
27072: LD_VAR 0 4
27076: ARRAY
27077: PUSH
27078: LD_INT 0
27080: PLUS
27081: PPUSH
27082: CALL_OW 505
// end ;
27086: LD_VAR 0 2
27090: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27091: LD_INT 0
27093: PPUSH
27094: PPUSH
27095: PPUSH
27096: PPUSH
// if not hack in hackTanks then
27097: LD_VAR 0 1
27101: PUSH
27102: LD_EXP 88
27106: IN
27107: NOT
27108: IFFALSE 27112
// exit ;
27110: GO 27197
// index := GetElementIndex ( hackTanks , hack ) ;
27112: LD_ADDR_VAR 0 5
27116: PUSH
27117: LD_EXP 88
27121: PPUSH
27122: LD_VAR 0 1
27126: PPUSH
27127: CALL 35155 0 2
27131: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27132: LD_ADDR_VAR 0 4
27136: PUSH
27137: DOUBLE
27138: LD_INT 1
27140: DEC
27141: ST_TO_ADDR
27142: LD_EXP 89
27146: PUSH
27147: LD_VAR 0 5
27151: ARRAY
27152: PUSH
27153: FOR_TO
27154: IFFALSE 27195
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27156: LD_EXP 89
27160: PUSH
27161: LD_VAR 0 5
27165: ARRAY
27166: PUSH
27167: LD_VAR 0 4
27171: ARRAY
27172: PUSH
27173: LD_INT 1
27175: ARRAY
27176: PUSH
27177: LD_VAR 0 2
27181: EQUAL
27182: IFFALSE 27193
// KillUnit ( vehicle ) ;
27184: LD_VAR 0 2
27188: PPUSH
27189: CALL_OW 66
27193: GO 27153
27195: POP
27196: POP
// end ;
27197: LD_VAR 0 3
27201: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
27202: LD_EXP 93
27206: NOT
27207: IFFALSE 27340
27209: GO 27211
27211: DISABLE
27212: LD_INT 0
27214: PPUSH
// begin initMiner := true ;
27215: LD_ADDR_EXP 93
27219: PUSH
27220: LD_INT 1
27222: ST_TO_ADDR
// minersList := [ ] ;
27223: LD_ADDR_EXP 94
27227: PUSH
27228: EMPTY
27229: ST_TO_ADDR
// minerMinesList := [ ] ;
27230: LD_ADDR_EXP 95
27234: PUSH
27235: EMPTY
27236: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
27237: LD_ADDR_EXP 96
27241: PUSH
27242: LD_INT 10
27244: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27245: LD_ADDR_VAR 0 1
27249: PUSH
27250: LD_INT 34
27252: PUSH
27253: LD_INT 81
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PPUSH
27260: CALL_OW 69
27264: PUSH
27265: FOR_IN
27266: IFFALSE 27338
// begin if not i in minersList then
27268: LD_VAR 0 1
27272: PUSH
27273: LD_EXP 94
27277: IN
27278: NOT
27279: IFFALSE 27336
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27281: LD_ADDR_EXP 94
27285: PUSH
27286: LD_EXP 94
27290: PPUSH
27291: LD_EXP 94
27295: PUSH
27296: LD_INT 1
27298: PLUS
27299: PPUSH
27300: LD_VAR 0 1
27304: PPUSH
27305: CALL_OW 1
27309: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27310: LD_ADDR_EXP 95
27314: PUSH
27315: LD_EXP 95
27319: PPUSH
27320: LD_EXP 95
27324: PUSH
27325: LD_INT 1
27327: PLUS
27328: PPUSH
27329: EMPTY
27330: PPUSH
27331: CALL_OW 1
27335: ST_TO_ADDR
// end end ;
27336: GO 27265
27338: POP
27339: POP
// end ;
27340: PPOPN 1
27342: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
27343: LD_EXP 93
27347: IFFALSE 27378
27349: PUSH
27350: LD_EXP 95
27354: PPUSH
27355: CALL 32454 0 1
27359: IFTRUE 27377
27361: PUSH
27362: LD_INT 34
27364: PUSH
27365: LD_INT 81
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PPUSH
27372: CALL_OW 69
27376: OR
27377: AND
27378: IFFALSE 27898
27380: GO 27382
27382: DISABLE
27383: LD_INT 0
27385: PPUSH
27386: PPUSH
27387: PPUSH
27388: PPUSH
// begin enable ;
27389: ENABLE
// for i := minerMinesList downto 1 do
27390: LD_ADDR_VAR 0 1
27394: PUSH
27395: DOUBLE
27396: LD_EXP 95
27400: INC
27401: ST_TO_ADDR
27402: LD_INT 1
27404: PUSH
27405: FOR_DOWNTO
27406: IFFALSE 27896
// begin side := GetSide ( minersList [ i ] ) ;
27408: LD_ADDR_VAR 0 3
27412: PUSH
27413: LD_EXP 94
27417: PUSH
27418: LD_VAR 0 1
27422: ARRAY
27423: PPUSH
27424: CALL_OW 255
27428: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
27429: LD_EXP 94
27433: PUSH
27434: LD_VAR 0 1
27438: ARRAY
27439: PPUSH
27440: CALL_OW 300
27444: IFFALSE 27465
27446: PUSH
27447: LD_VAR 0 3
27451: PUSH
27452: LD_OWVAR 2
27456: PUSH
27457: LD_INT 9
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: IN
27464: AND
27465: IFFALSE 27498
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
27467: LD_EXP 94
27471: PUSH
27472: LD_VAR 0 1
27476: ARRAY
27477: PPUSH
27478: LD_EXP 95
27482: PUSH
27483: LD_VAR 0 1
27487: ARRAY
27488: PPUSH
27489: CALL 32454 0 1
27493: PPUSH
27494: CALL_OW 505
// if not minerMinesList [ i ] then
27498: LD_EXP 95
27502: PUSH
27503: LD_VAR 0 1
27507: ARRAY
27508: NOT
27509: IFFALSE 27513
// continue ;
27511: GO 27405
// for j := minerMinesList [ i ] downto 1 do
27513: LD_ADDR_VAR 0 2
27517: PUSH
27518: DOUBLE
27519: LD_EXP 95
27523: PUSH
27524: LD_VAR 0 1
27528: ARRAY
27529: INC
27530: ST_TO_ADDR
27531: LD_INT 1
27533: PUSH
27534: FOR_DOWNTO
27535: IFFALSE 27892
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
27537: LD_EXP 94
27541: PUSH
27542: LD_VAR 0 1
27546: ARRAY
27547: PPUSH
27548: CALL_OW 301
27552: IFTRUE 27572
27554: PUSH
27555: LD_EXP 94
27559: PUSH
27560: LD_VAR 0 1
27564: ARRAY
27565: PPUSH
27566: CALL_OW 305
27570: NOT
27571: OR
27572: IFFALSE 27663
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27574: LD_EXP 95
27578: PUSH
27579: LD_VAR 0 1
27583: ARRAY
27584: PUSH
27585: LD_VAR 0 2
27589: ARRAY
27590: PUSH
27591: LD_INT 1
27593: ARRAY
27594: PPUSH
27595: LD_EXP 95
27599: PUSH
27600: LD_VAR 0 1
27604: ARRAY
27605: PUSH
27606: LD_VAR 0 2
27610: ARRAY
27611: PUSH
27612: LD_INT 2
27614: ARRAY
27615: PPUSH
27616: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27620: LD_ADDR_EXP 95
27624: PUSH
27625: LD_EXP 95
27629: PPUSH
27630: LD_VAR 0 1
27634: PPUSH
27635: LD_EXP 95
27639: PUSH
27640: LD_VAR 0 1
27644: ARRAY
27645: PPUSH
27646: LD_VAR 0 2
27650: PPUSH
27651: CALL_OW 3
27655: PPUSH
27656: CALL_OW 1
27660: ST_TO_ADDR
// continue ;
27661: GO 27534
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27663: LD_ADDR_VAR 0 4
27667: PUSH
27668: LD_EXP 95
27672: PUSH
27673: LD_VAR 0 1
27677: ARRAY
27678: PUSH
27679: LD_VAR 0 2
27683: ARRAY
27684: PUSH
27685: LD_INT 1
27687: ARRAY
27688: PPUSH
27689: LD_EXP 95
27693: PUSH
27694: LD_VAR 0 1
27698: ARRAY
27699: PUSH
27700: LD_VAR 0 2
27704: ARRAY
27705: PUSH
27706: LD_INT 2
27708: ARRAY
27709: PPUSH
27710: CALL_OW 428
27714: ST_TO_ADDR
// if not tmp then
27715: LD_VAR 0 4
27719: NOT
27720: IFFALSE 27724
// continue ;
27722: GO 27534
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27724: LD_VAR 0 4
27728: PUSH
27729: LD_INT 81
27731: PUSH
27732: LD_VAR 0 3
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PPUSH
27741: CALL_OW 69
27745: IN
27746: IFFALSE 27796
27748: PUSH
27749: LD_EXP 95
27753: PUSH
27754: LD_VAR 0 1
27758: ARRAY
27759: PUSH
27760: LD_VAR 0 2
27764: ARRAY
27765: PUSH
27766: LD_INT 1
27768: ARRAY
27769: PPUSH
27770: LD_EXP 95
27774: PUSH
27775: LD_VAR 0 1
27779: ARRAY
27780: PUSH
27781: LD_VAR 0 2
27785: ARRAY
27786: PUSH
27787: LD_INT 2
27789: ARRAY
27790: PPUSH
27791: CALL_OW 458
27795: AND
27796: IFFALSE 27890
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27798: LD_EXP 95
27802: PUSH
27803: LD_VAR 0 1
27807: ARRAY
27808: PUSH
27809: LD_VAR 0 2
27813: ARRAY
27814: PUSH
27815: LD_INT 1
27817: ARRAY
27818: PPUSH
27819: LD_EXP 95
27823: PUSH
27824: LD_VAR 0 1
27828: ARRAY
27829: PUSH
27830: LD_VAR 0 2
27834: ARRAY
27835: PUSH
27836: LD_INT 2
27838: ARRAY
27839: PPUSH
27840: LD_VAR 0 3
27844: PPUSH
27845: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27849: LD_ADDR_EXP 95
27853: PUSH
27854: LD_EXP 95
27858: PPUSH
27859: LD_VAR 0 1
27863: PPUSH
27864: LD_EXP 95
27868: PUSH
27869: LD_VAR 0 1
27873: ARRAY
27874: PPUSH
27875: LD_VAR 0 2
27879: PPUSH
27880: CALL_OW 3
27884: PPUSH
27885: CALL_OW 1
27889: ST_TO_ADDR
// end ; end ;
27890: GO 27534
27892: POP
27893: POP
// end ;
27894: GO 27405
27896: POP
27897: POP
// end ;
27898: PPOPN 4
27900: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
27901: LD_INT 0
27903: PPUSH
27904: PPUSH
27905: PPUSH
27906: PPUSH
// result := false ;
27907: LD_ADDR_VAR 0 4
27911: PUSH
27912: LD_INT 0
27914: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27915: LD_VAR 0 1
27919: PPUSH
27920: CALL_OW 264
27924: PUSH
27925: LD_INT 81
27927: EQUAL
27928: NOT
27929: IFFALSE 27933
// exit ;
27931: GO 28303
// side := GetSide ( unit ) ;
27933: LD_ADDR_VAR 0 6
27937: PUSH
27938: LD_VAR 0 1
27942: PPUSH
27943: CALL_OW 255
27947: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
27948: LD_ADDR_VAR 0 5
27952: PUSH
27953: LD_EXP 94
27957: PPUSH
27958: LD_VAR 0 1
27962: PPUSH
27963: CALL 35155 0 2
27967: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27968: LD_EXP 95
27972: PUSH
27973: LD_VAR 0 5
27977: ARRAY
27978: PUSH
27979: LD_EXP 96
27983: GREATEREQUAL
27984: IFFALSE 27988
// exit ;
27986: GO 28303
// ComMoveXY ( unit , x , y ) ;
27988: LD_VAR 0 1
27992: PPUSH
27993: LD_VAR 0 2
27997: PPUSH
27998: LD_VAR 0 3
28002: PPUSH
28003: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28007: LD_INT 35
28009: PPUSH
28010: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28014: LD_VAR 0 1
28018: PPUSH
28019: LD_VAR 0 2
28023: PPUSH
28024: LD_VAR 0 3
28028: PPUSH
28029: CALL 67211 0 3
28033: NOT
28034: IFFALSE 28047
28036: PUSH
28037: LD_VAR 0 1
28041: PPUSH
28042: CALL_OW 314
28046: AND
28047: IFFALSE 28051
// exit ;
28049: GO 28303
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28051: LD_VAR 0 2
28055: PPUSH
28056: LD_VAR 0 3
28060: PPUSH
28061: CALL_OW 428
28065: PUSH
28066: LD_VAR 0 1
28070: EQUAL
28071: IFFALSE 28085
28073: PUSH
28074: LD_VAR 0 1
28078: PPUSH
28079: CALL_OW 314
28083: NOT
28084: AND
28085: IFFALSE 28007
// if MineAtPos ( x , y ) then
28087: LD_VAR 0 2
28091: PPUSH
28092: LD_VAR 0 3
28096: PPUSH
28097: CALL_OW 458
28101: IFFALSE 28105
// exit ;
28103: GO 28303
// if your_side = side then
28105: LD_OWVAR 2
28109: PUSH
28110: LD_VAR 0 6
28114: EQUAL
28115: IFFALSE 28134
// PlaySoundXY ( x , y , PlantMine ) ;
28117: LD_VAR 0 2
28121: PPUSH
28122: LD_VAR 0 3
28126: PPUSH
28127: LD_STRING PlantMine
28129: PPUSH
28130: CALL_OW 366
// repeat wait ( 1 ) ;
28134: LD_INT 1
28136: PPUSH
28137: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
28141: LD_VAR 0 2
28145: PPUSH
28146: LD_VAR 0 3
28150: PPUSH
28151: LD_VAR 0 6
28155: PPUSH
28156: LD_INT 0
28158: PPUSH
28159: CALL_OW 454
28163: IFFALSE 28134
// if MineAtPos ( x , y ) then
28165: LD_VAR 0 2
28169: PPUSH
28170: LD_VAR 0 3
28174: PPUSH
28175: CALL_OW 458
28179: IFFALSE 28295
// begin for i in minerMinesList [ index ] do
28181: LD_ADDR_VAR 0 7
28185: PUSH
28186: LD_EXP 95
28190: PUSH
28191: LD_VAR 0 5
28195: ARRAY
28196: PUSH
28197: FOR_IN
28198: IFFALSE 28240
// if i [ 1 ] = x and i [ 2 ] = y then
28200: LD_VAR 0 7
28204: PUSH
28205: LD_INT 1
28207: ARRAY
28208: PUSH
28209: LD_VAR 0 2
28213: EQUAL
28214: IFFALSE 28232
28216: PUSH
28217: LD_VAR 0 7
28221: PUSH
28222: LD_INT 2
28224: ARRAY
28225: PUSH
28226: LD_VAR 0 3
28230: EQUAL
28231: AND
28232: IFFALSE 28238
// exit ;
28234: POP
28235: POP
28236: GO 28303
28238: GO 28197
28240: POP
28241: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28242: LD_ADDR_EXP 95
28246: PUSH
28247: LD_EXP 95
28251: PPUSH
28252: LD_VAR 0 5
28256: PUSH
28257: LD_EXP 95
28261: PUSH
28262: LD_VAR 0 5
28266: ARRAY
28267: PUSH
28268: LD_INT 1
28270: PLUS
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PPUSH
28276: LD_VAR 0 2
28280: PUSH
28281: LD_VAR 0 3
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PPUSH
28290: CALL 35372 0 3
28294: ST_TO_ADDR
// end ; result := true ;
28295: LD_ADDR_VAR 0 4
28299: PUSH
28300: LD_INT 1
28302: ST_TO_ADDR
// end ;
28303: LD_VAR 0 4
28307: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28308: LD_INT 0
28310: PPUSH
28311: PPUSH
28312: PPUSH
// if not unit in minersList then
28313: LD_VAR 0 1
28317: PUSH
28318: LD_EXP 94
28322: IN
28323: NOT
28324: IFFALSE 28328
// exit ;
28326: GO 28535
// index := GetElementIndex ( minersList , unit ) ;
28328: LD_ADDR_VAR 0 6
28332: PUSH
28333: LD_EXP 94
28337: PPUSH
28338: LD_VAR 0 1
28342: PPUSH
28343: CALL 35155 0 2
28347: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28348: LD_ADDR_VAR 0 5
28352: PUSH
28353: DOUBLE
28354: LD_EXP 95
28358: PUSH
28359: LD_VAR 0 6
28363: ARRAY
28364: INC
28365: ST_TO_ADDR
28366: LD_INT 1
28368: PUSH
28369: FOR_DOWNTO
28370: IFFALSE 28533
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28372: LD_EXP 95
28376: PUSH
28377: LD_VAR 0 6
28381: ARRAY
28382: PUSH
28383: LD_VAR 0 5
28387: ARRAY
28388: PUSH
28389: LD_INT 1
28391: ARRAY
28392: PPUSH
28393: LD_EXP 95
28397: PUSH
28398: LD_VAR 0 6
28402: ARRAY
28403: PUSH
28404: LD_VAR 0 5
28408: ARRAY
28409: PUSH
28410: LD_INT 2
28412: ARRAY
28413: PPUSH
28414: LD_VAR 0 2
28418: PPUSH
28419: LD_VAR 0 3
28423: PPUSH
28424: CALL_OW 298
28428: PUSH
28429: LD_INT 6
28431: LESS
28432: IFFALSE 28531
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28434: LD_EXP 95
28438: PUSH
28439: LD_VAR 0 6
28443: ARRAY
28444: PUSH
28445: LD_VAR 0 5
28449: ARRAY
28450: PUSH
28451: LD_INT 1
28453: ARRAY
28454: PPUSH
28455: LD_EXP 95
28459: PUSH
28460: LD_VAR 0 6
28464: ARRAY
28465: PUSH
28466: LD_VAR 0 5
28470: ARRAY
28471: PUSH
28472: LD_INT 2
28474: ARRAY
28475: PPUSH
28476: LD_VAR 0 1
28480: PPUSH
28481: CALL_OW 255
28485: PPUSH
28486: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28490: LD_ADDR_EXP 95
28494: PUSH
28495: LD_EXP 95
28499: PPUSH
28500: LD_VAR 0 6
28504: PPUSH
28505: LD_EXP 95
28509: PUSH
28510: LD_VAR 0 6
28514: ARRAY
28515: PPUSH
28516: LD_VAR 0 5
28520: PPUSH
28521: CALL_OW 3
28525: PPUSH
28526: CALL_OW 1
28530: ST_TO_ADDR
// end ; end ;
28531: GO 28369
28533: POP
28534: POP
// end ;
28535: LD_VAR 0 4
28539: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28540: LD_INT 0
28542: PPUSH
28543: PPUSH
28544: PPUSH
28545: PPUSH
28546: PPUSH
28547: PPUSH
28548: PPUSH
28549: PPUSH
28550: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28551: LD_VAR 0 1
28555: PPUSH
28556: CALL_OW 264
28560: PUSH
28561: LD_INT 81
28563: EQUAL
28564: NOT
28565: IFTRUE 28580
28567: PUSH
28568: LD_VAR 0 1
28572: PUSH
28573: LD_EXP 94
28577: IN
28578: NOT
28579: OR
28580: IFFALSE 28584
// exit ;
28582: GO 28910
// index := GetElementIndex ( minersList , unit ) ;
28584: LD_ADDR_VAR 0 6
28588: PUSH
28589: LD_EXP 94
28593: PPUSH
28594: LD_VAR 0 1
28598: PPUSH
28599: CALL 35155 0 2
28603: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28604: LD_ADDR_VAR 0 8
28608: PUSH
28609: LD_EXP 96
28613: PUSH
28614: LD_EXP 95
28618: PUSH
28619: LD_VAR 0 6
28623: ARRAY
28624: MINUS
28625: ST_TO_ADDR
// if not minesFreeAmount then
28626: LD_VAR 0 8
28630: NOT
28631: IFFALSE 28635
// exit ;
28633: GO 28910
// tmp := [ ] ;
28635: LD_ADDR_VAR 0 7
28639: PUSH
28640: EMPTY
28641: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28642: LD_ADDR_VAR 0 5
28646: PUSH
28647: DOUBLE
28648: LD_INT 1
28650: DEC
28651: ST_TO_ADDR
28652: LD_VAR 0 8
28656: PUSH
28657: FOR_TO
28658: IFFALSE 28857
// begin _d := rand ( 0 , 5 ) ;
28660: LD_ADDR_VAR 0 11
28664: PUSH
28665: LD_INT 0
28667: PPUSH
28668: LD_INT 5
28670: PPUSH
28671: CALL_OW 12
28675: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28676: LD_ADDR_VAR 0 12
28680: PUSH
28681: LD_INT 2
28683: PPUSH
28684: LD_INT 6
28686: PPUSH
28687: CALL_OW 12
28691: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28692: LD_ADDR_VAR 0 9
28696: PUSH
28697: LD_VAR 0 2
28701: PPUSH
28702: LD_VAR 0 11
28706: PPUSH
28707: LD_VAR 0 12
28711: PPUSH
28712: CALL_OW 272
28716: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28717: LD_ADDR_VAR 0 10
28721: PUSH
28722: LD_VAR 0 3
28726: PPUSH
28727: LD_VAR 0 11
28731: PPUSH
28732: LD_VAR 0 12
28736: PPUSH
28737: CALL_OW 273
28741: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28742: LD_VAR 0 9
28746: PPUSH
28747: LD_VAR 0 10
28751: PPUSH
28752: CALL_OW 488
28756: IFFALSE 28780
28758: PUSH
28759: LD_VAR 0 9
28763: PUSH
28764: LD_VAR 0 10
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_VAR 0 7
28777: IN
28778: NOT
28779: AND
28780: IFFALSE 28799
28782: PUSH
28783: LD_VAR 0 9
28787: PPUSH
28788: LD_VAR 0 10
28792: PPUSH
28793: CALL_OW 458
28797: NOT
28798: AND
28799: IFFALSE 28841
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28801: LD_ADDR_VAR 0 7
28805: PUSH
28806: LD_VAR 0 7
28810: PPUSH
28811: LD_VAR 0 7
28815: PUSH
28816: LD_INT 1
28818: PLUS
28819: PPUSH
28820: LD_VAR 0 9
28824: PUSH
28825: LD_VAR 0 10
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PPUSH
28834: CALL_OW 1
28838: ST_TO_ADDR
28839: GO 28855
// i := i - 1 ;
28841: LD_ADDR_VAR 0 5
28845: PUSH
28846: LD_VAR 0 5
28850: PUSH
28851: LD_INT 1
28853: MINUS
28854: ST_TO_ADDR
// end ;
28855: GO 28657
28857: POP
28858: POP
// for i in tmp do
28859: LD_ADDR_VAR 0 5
28863: PUSH
28864: LD_VAR 0 7
28868: PUSH
28869: FOR_IN
28870: IFFALSE 28908
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28872: LD_VAR 0 1
28876: PPUSH
28877: LD_VAR 0 5
28881: PUSH
28882: LD_INT 1
28884: ARRAY
28885: PPUSH
28886: LD_VAR 0 5
28890: PUSH
28891: LD_INT 2
28893: ARRAY
28894: PPUSH
28895: CALL 27901 0 3
28899: NOT
28900: IFFALSE 28906
// exit ;
28902: POP
28903: POP
28904: GO 28910
28906: GO 28869
28908: POP
28909: POP
// end ;
28910: LD_VAR 0 4
28914: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
28915: LD_INT 0
28917: PPUSH
28918: PPUSH
28919: PPUSH
28920: PPUSH
28921: PPUSH
28922: PPUSH
28923: PPUSH
28924: PPUSH
28925: PPUSH
// if GetClass ( unit ) <> class_sniper then
28926: LD_VAR 0 1
28930: PPUSH
28931: CALL_OW 257
28935: PUSH
28936: LD_INT 5
28938: NONEQUAL
28939: IFFALSE 28943
// exit ;
28941: GO 29413
// dist := 8 ;
28943: LD_ADDR_VAR 0 5
28947: PUSH
28948: LD_INT 8
28950: ST_TO_ADDR
// viewRange := 12 ;
28951: LD_ADDR_VAR 0 8
28955: PUSH
28956: LD_INT 12
28958: ST_TO_ADDR
// side := GetSide ( unit ) ;
28959: LD_ADDR_VAR 0 6
28963: PUSH
28964: LD_VAR 0 1
28968: PPUSH
28969: CALL_OW 255
28973: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28974: LD_INT 61
28976: PPUSH
28977: LD_VAR 0 6
28981: PPUSH
28982: CALL_OW 321
28986: PUSH
28987: LD_INT 2
28989: EQUAL
28990: IFFALSE 29000
// viewRange := 16 ;
28992: LD_ADDR_VAR 0 8
28996: PUSH
28997: LD_INT 16
28999: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29000: LD_VAR 0 1
29004: PPUSH
29005: LD_VAR 0 2
29009: PPUSH
29010: LD_VAR 0 3
29014: PPUSH
29015: CALL_OW 297
29019: PUSH
29020: LD_VAR 0 5
29024: GREATER
29025: IFFALSE 29104
// begin ComMoveXY ( unit , x , y ) ;
29027: LD_VAR 0 1
29031: PPUSH
29032: LD_VAR 0 2
29036: PPUSH
29037: LD_VAR 0 3
29041: PPUSH
29042: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29046: LD_INT 35
29048: PPUSH
29049: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29053: LD_VAR 0 1
29057: PPUSH
29058: LD_VAR 0 2
29062: PPUSH
29063: LD_VAR 0 3
29067: PPUSH
29068: CALL 67211 0 3
29072: NOT
29073: IFFALSE 29077
// exit ;
29075: GO 29413
// until GetDistUnitXY ( unit , x , y ) < dist ;
29077: LD_VAR 0 1
29081: PPUSH
29082: LD_VAR 0 2
29086: PPUSH
29087: LD_VAR 0 3
29091: PPUSH
29092: CALL_OW 297
29096: PUSH
29097: LD_VAR 0 5
29101: LESS
29102: IFFALSE 29046
// end ; ComTurnXY ( unit , x , y ) ;
29104: LD_VAR 0 1
29108: PPUSH
29109: LD_VAR 0 2
29113: PPUSH
29114: LD_VAR 0 3
29118: PPUSH
29119: CALL_OW 118
// repeat if Multiplayer then
29123: LD_OWVAR 4
29127: IFFALSE 29138
// wait ( 35 ) else
29129: LD_INT 35
29131: PPUSH
29132: CALL_OW 67
29136: GO 29145
// wait ( 5 ) ;
29138: LD_INT 5
29140: PPUSH
29141: CALL_OW 67
// _d := GetDir ( unit ) ;
29145: LD_ADDR_VAR 0 11
29149: PUSH
29150: LD_VAR 0 1
29154: PPUSH
29155: CALL_OW 254
29159: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
29160: LD_ADDR_VAR 0 7
29164: PUSH
29165: LD_VAR 0 1
29169: PPUSH
29170: CALL_OW 250
29174: PPUSH
29175: LD_VAR 0 1
29179: PPUSH
29180: CALL_OW 251
29184: PPUSH
29185: LD_VAR 0 2
29189: PPUSH
29190: LD_VAR 0 3
29194: PPUSH
29195: CALL 69847 0 4
29199: ST_TO_ADDR
// until dir = _d ;
29200: LD_VAR 0 7
29204: PUSH
29205: LD_VAR 0 11
29209: EQUAL
29210: IFFALSE 29123
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
29212: LD_ADDR_VAR 0 9
29216: PUSH
29217: LD_VAR 0 1
29221: PPUSH
29222: CALL_OW 250
29226: PPUSH
29227: LD_VAR 0 7
29231: PPUSH
29232: LD_VAR 0 5
29236: PPUSH
29237: CALL_OW 272
29241: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
29242: LD_ADDR_VAR 0 10
29246: PUSH
29247: LD_VAR 0 1
29251: PPUSH
29252: CALL_OW 251
29256: PPUSH
29257: LD_VAR 0 7
29261: PPUSH
29262: LD_VAR 0 5
29266: PPUSH
29267: CALL_OW 273
29271: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29272: LD_VAR 0 9
29276: PPUSH
29277: LD_VAR 0 10
29281: PPUSH
29282: CALL_OW 488
29286: NOT
29287: IFFALSE 29291
// exit ;
29289: GO 29413
// ComAnimCustom ( unit , 1 ) ;
29291: LD_VAR 0 1
29295: PPUSH
29296: LD_INT 1
29298: PPUSH
29299: CALL_OW 592
// p := 0 ;
29303: LD_ADDR_VAR 0 12
29307: PUSH
29308: LD_INT 0
29310: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29311: LD_VAR 0 9
29315: PPUSH
29316: LD_VAR 0 10
29320: PPUSH
29321: LD_VAR 0 6
29325: PPUSH
29326: LD_VAR 0 8
29330: PPUSH
29331: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
29335: LD_INT 35
29337: PPUSH
29338: CALL_OW 67
// p := Inc ( p ) ;
29342: LD_ADDR_VAR 0 12
29346: PUSH
29347: LD_VAR 0 12
29351: PPUSH
29352: CALL 69803 0 1
29356: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
29357: LD_VAR 0 12
29361: PUSH
29362: LD_INT 3
29364: EQUAL
29365: IFTRUE 29379
29367: PUSH
29368: LD_VAR 0 1
29372: PPUSH
29373: CALL_OW 302
29377: NOT
29378: OR
29379: IFTRUE 29392
29381: PUSH
29382: LD_VAR 0 1
29386: PPUSH
29387: CALL_OW 301
29391: OR
29392: IFFALSE 29335
// RemoveSeeing ( _x , _y , side ) ;
29394: LD_VAR 0 9
29398: PPUSH
29399: LD_VAR 0 10
29403: PPUSH
29404: LD_VAR 0 6
29408: PPUSH
29409: CALL_OW 331
// end ;
29413: LD_VAR 0 4
29417: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
29418: LD_INT 0
29420: PPUSH
29421: PPUSH
29422: PPUSH
29423: PPUSH
29424: PPUSH
29425: PPUSH
29426: PPUSH
29427: PPUSH
29428: PPUSH
29429: PPUSH
29430: PPUSH
// if not unit then
29431: LD_VAR 0 1
29435: NOT
29436: IFFALSE 29440
// exit ;
29438: GO 29711
// side := GetSide ( unit ) ;
29440: LD_ADDR_VAR 0 3
29444: PUSH
29445: LD_VAR 0 1
29449: PPUSH
29450: CALL_OW 255
29454: ST_TO_ADDR
// x := GetX ( unit ) ;
29455: LD_ADDR_VAR 0 5
29459: PUSH
29460: LD_VAR 0 1
29464: PPUSH
29465: CALL_OW 250
29469: ST_TO_ADDR
// y := GetY ( unit ) ;
29470: LD_ADDR_VAR 0 6
29474: PUSH
29475: LD_VAR 0 1
29479: PPUSH
29480: CALL_OW 251
29484: ST_TO_ADDR
// r := 8 ;
29485: LD_ADDR_VAR 0 4
29489: PUSH
29490: LD_INT 8
29492: ST_TO_ADDR
// if x - r < 0 then
29493: LD_VAR 0 5
29497: PUSH
29498: LD_VAR 0 4
29502: MINUS
29503: PUSH
29504: LD_INT 0
29506: LESS
29507: IFFALSE 29519
// min_x := 0 else
29509: LD_ADDR_VAR 0 7
29513: PUSH
29514: LD_INT 0
29516: ST_TO_ADDR
29517: GO 29535
// min_x := x - r ;
29519: LD_ADDR_VAR 0 7
29523: PUSH
29524: LD_VAR 0 5
29528: PUSH
29529: LD_VAR 0 4
29533: MINUS
29534: ST_TO_ADDR
// if y - r < 0 then
29535: LD_VAR 0 6
29539: PUSH
29540: LD_VAR 0 4
29544: MINUS
29545: PUSH
29546: LD_INT 0
29548: LESS
29549: IFFALSE 29561
// min_y := 0 else
29551: LD_ADDR_VAR 0 8
29555: PUSH
29556: LD_INT 0
29558: ST_TO_ADDR
29559: GO 29577
// min_y := y - r ;
29561: LD_ADDR_VAR 0 8
29565: PUSH
29566: LD_VAR 0 6
29570: PUSH
29571: LD_VAR 0 4
29575: MINUS
29576: ST_TO_ADDR
// max_x := x + r ;
29577: LD_ADDR_VAR 0 9
29581: PUSH
29582: LD_VAR 0 5
29586: PUSH
29587: LD_VAR 0 4
29591: PLUS
29592: ST_TO_ADDR
// max_y := y + r ;
29593: LD_ADDR_VAR 0 10
29597: PUSH
29598: LD_VAR 0 6
29602: PUSH
29603: LD_VAR 0 4
29607: PLUS
29608: ST_TO_ADDR
// for _x = min_x to max_x do
29609: LD_ADDR_VAR 0 11
29613: PUSH
29614: DOUBLE
29615: LD_VAR 0 7
29619: DEC
29620: ST_TO_ADDR
29621: LD_VAR 0 9
29625: PUSH
29626: FOR_TO
29627: IFFALSE 29709
// for _y = min_y to max_y do
29629: LD_ADDR_VAR 0 12
29633: PUSH
29634: DOUBLE
29635: LD_VAR 0 8
29639: DEC
29640: ST_TO_ADDR
29641: LD_VAR 0 10
29645: PUSH
29646: FOR_TO
29647: IFFALSE 29705
// begin if not ValidHex ( _x , _y ) then
29649: LD_VAR 0 11
29653: PPUSH
29654: LD_VAR 0 12
29658: PPUSH
29659: CALL_OW 488
29663: NOT
29664: IFFALSE 29668
// continue ;
29666: GO 29646
// if MineAtPos ( _x , _y ) then
29668: LD_VAR 0 11
29672: PPUSH
29673: LD_VAR 0 12
29677: PPUSH
29678: CALL_OW 458
29682: IFFALSE 29703
// ViewMineAtPos ( _x , _y , side ) ;
29684: LD_VAR 0 11
29688: PPUSH
29689: LD_VAR 0 12
29693: PPUSH
29694: LD_VAR 0 3
29698: PPUSH
29699: CALL_OW 457
// end ;
29703: GO 29646
29705: POP
29706: POP
29707: GO 29626
29709: POP
29710: POP
// end ;
29711: LD_VAR 0 2
29715: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
29716: LD_INT 0
29718: PPUSH
29719: PPUSH
29720: PPUSH
29721: PPUSH
29722: PPUSH
29723: PPUSH
29724: PPUSH
// if not units then
29725: LD_VAR 0 1
29729: NOT
29730: IFFALSE 29734
// exit ;
29732: GO 30198
// scaners := [ ] ;
29734: LD_ADDR_VAR 0 6
29738: PUSH
29739: EMPTY
29740: ST_TO_ADDR
// for i in units do
29741: LD_ADDR_VAR 0 3
29745: PUSH
29746: LD_VAR 0 1
29750: PUSH
29751: FOR_IN
29752: IFFALSE 29909
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
29754: LD_VAR 0 3
29758: PPUSH
29759: CALL_OW 264
29763: PUSH
29764: LD_INT 11
29766: NONEQUAL
29767: IFTRUE 29781
29769: PUSH
29770: LD_VAR 0 3
29774: PPUSH
29775: CALL_OW 302
29779: NOT
29780: OR
29781: IFTRUE 29798
29783: PUSH
29784: LD_VAR 0 3
29788: PPUSH
29789: CALL_OW 110
29793: PUSH
29794: LD_INT 502
29796: EQUAL
29797: OR
29798: IFFALSE 29802
// continue ;
29800: GO 29751
// ComStop ( i ) ;
29802: LD_VAR 0 3
29806: PPUSH
29807: CALL_OW 141
// x := GetX ( i ) ;
29811: LD_ADDR_VAR 0 4
29815: PUSH
29816: LD_VAR 0 3
29820: PPUSH
29821: CALL_OW 250
29825: ST_TO_ADDR
// y := GetY ( i ) ;
29826: LD_ADDR_VAR 0 5
29830: PUSH
29831: LD_VAR 0 3
29835: PPUSH
29836: CALL_OW 251
29840: ST_TO_ADDR
// if GetSide ( i ) = your_side then
29841: LD_VAR 0 3
29845: PPUSH
29846: CALL_OW 255
29850: PUSH
29851: LD_OWVAR 2
29855: EQUAL
29856: IFFALSE 29875
// PlaySoundXY ( x , y , mineDetector ) ;
29858: LD_VAR 0 4
29862: PPUSH
29863: LD_VAR 0 5
29867: PPUSH
29868: LD_STRING mineDetector
29870: PPUSH
29871: CALL_OW 366
// scaners := Join ( scaners , i ) ;
29875: LD_ADDR_VAR 0 6
29879: PUSH
29880: LD_VAR 0 6
29884: PPUSH
29885: LD_VAR 0 3
29889: PPUSH
29890: CALL 68430 0 2
29894: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
29895: LD_VAR 0 3
29899: PPUSH
29900: LD_INT 502
29902: PPUSH
29903: CALL_OW 109
// end ;
29907: GO 29751
29909: POP
29910: POP
// if not scaners then
29911: LD_VAR 0 6
29915: NOT
29916: IFFALSE 29920
// exit ;
29918: GO 30198
// wait ( 3 ) ;
29920: LD_INT 3
29922: PPUSH
29923: CALL_OW 67
// timer := 6 ;
29927: LD_ADDR_VAR 0 7
29931: PUSH
29932: LD_INT 6
29934: ST_TO_ADDR
// repeat for i in scaners do
29935: LD_ADDR_VAR 0 3
29939: PUSH
29940: LD_VAR 0 6
29944: PUSH
29945: FOR_IN
29946: IFFALSE 30096
// begin side := GetSide ( i ) ;
29948: LD_ADDR_VAR 0 8
29952: PUSH
29953: LD_VAR 0 3
29957: PPUSH
29958: CALL_OW 255
29962: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
29963: LD_VAR 0 3
29967: PPUSH
29968: CALL_OW 302
29972: NOT
29973: IFTRUE 29986
29975: PUSH
29976: LD_VAR 0 3
29980: PPUSH
29981: CALL_OW 314
29985: OR
29986: IFTRUE 30017
29988: PUSH
29989: LD_VAR 0 3
29993: PPUSH
29994: CALL_OW 263
29998: PUSH
29999: LD_INT 1
30001: EQUAL
30002: IFFALSE 30016
30004: PUSH
30005: LD_VAR 0 3
30009: PPUSH
30010: CALL_OW 311
30014: NOT
30015: AND
30016: OR
30017: IFFALSE 30061
// begin SetUnitDisplayNumber ( i , 0 ) ;
30019: LD_VAR 0 3
30023: PPUSH
30024: LD_INT 0
30026: PPUSH
30027: CALL_OW 505
// SetTag ( i , 0 ) ;
30031: LD_VAR 0 3
30035: PPUSH
30036: LD_INT 0
30038: PPUSH
30039: CALL_OW 109
// scaners := scaners diff i ;
30043: LD_ADDR_VAR 0 6
30047: PUSH
30048: LD_VAR 0 6
30052: PUSH
30053: LD_VAR 0 3
30057: DIFF
30058: ST_TO_ADDR
// continue ;
30059: GO 29945
// end ; if side in [ your_side , 9 ] then
30061: LD_VAR 0 8
30065: PUSH
30066: LD_OWVAR 2
30070: PUSH
30071: LD_INT 9
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: IN
30078: IFFALSE 30094
// SetUnitDisplayNumber ( i , timer ) ;
30080: LD_VAR 0 3
30084: PPUSH
30085: LD_VAR 0 7
30089: PPUSH
30090: CALL_OW 505
// end ;
30094: GO 29945
30096: POP
30097: POP
// if not scaners then
30098: LD_VAR 0 6
30102: NOT
30103: IFFALSE 30107
// exit ;
30105: GO 30198
// timer := Dec ( timer ) ;
30107: LD_ADDR_VAR 0 7
30111: PUSH
30112: LD_VAR 0 7
30116: PPUSH
30117: CALL 69825 0 1
30121: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30122: LD_INT 35
30124: PPUSH
30125: CALL_OW 67
// until timer = 0 ;
30129: LD_VAR 0 7
30133: PUSH
30134: LD_INT 0
30136: EQUAL
30137: IFFALSE 29935
// if not scaners then
30139: LD_VAR 0 6
30143: NOT
30144: IFFALSE 30148
// exit ;
30146: GO 30198
// for i in scaners do
30148: LD_ADDR_VAR 0 3
30152: PUSH
30153: LD_VAR 0 6
30157: PUSH
30158: FOR_IN
30159: IFFALSE 30196
// begin SetUnitDisplayNumber ( i , 0 ) ;
30161: LD_VAR 0 3
30165: PPUSH
30166: LD_INT 0
30168: PPUSH
30169: CALL_OW 505
// SetTag ( i , 0 ) ;
30173: LD_VAR 0 3
30177: PPUSH
30178: LD_INT 0
30180: PPUSH
30181: CALL_OW 109
// RevealDetectorMine ( i ) ;
30185: LD_VAR 0 3
30189: PPUSH
30190: CALL 29418 0 1
// end ;
30194: GO 30158
30196: POP
30197: POP
// end ;
30198: LD_VAR 0 2
30202: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
30203: LD_INT 0
30205: PPUSH
// if p1 = mine_detector_mode then
30206: LD_VAR 0 2
30210: PUSH
30211: LD_INT 103
30213: EQUAL
30214: IFFALSE 30225
// DetectMine ( units ) ;
30216: LD_VAR 0 1
30220: PPUSH
30221: CALL 29716 0 1
// end ; end_of_file
30225: LD_VAR 0 7
30229: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30230: LD_INT 0
30232: PPUSH
30233: PPUSH
// if exist_mode then
30234: LD_VAR 0 2
30238: IFFALSE 30284
// begin unit := CreateCharacter ( prefix & ident ) ;
30240: LD_ADDR_VAR 0 5
30244: PUSH
30245: LD_VAR 0 3
30249: PUSH
30250: LD_VAR 0 1
30254: STR
30255: PPUSH
30256: CALL_OW 34
30260: ST_TO_ADDR
// if unit then
30261: LD_VAR 0 5
30265: IFFALSE 30282
// DeleteCharacters ( prefix & ident ) ;
30267: LD_VAR 0 3
30271: PUSH
30272: LD_VAR 0 1
30276: STR
30277: PPUSH
30278: CALL_OW 40
// end else
30282: GO 30299
// unit := NewCharacter ( ident ) ;
30284: LD_ADDR_VAR 0 5
30288: PUSH
30289: LD_VAR 0 1
30293: PPUSH
30294: CALL_OW 25
30298: ST_TO_ADDR
// result := unit ;
30299: LD_ADDR_VAR 0 4
30303: PUSH
30304: LD_VAR 0 5
30308: ST_TO_ADDR
// end ;
30309: LD_VAR 0 4
30313: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
30314: LD_INT 0
30316: PPUSH
30317: PPUSH
// if exist_mode then
30318: LD_VAR 0 2
30322: IFFALSE 30347
// unit := CreateCharacter ( prefix & ident ) else
30324: LD_ADDR_VAR 0 5
30328: PUSH
30329: LD_VAR 0 3
30333: PUSH
30334: LD_VAR 0 1
30338: STR
30339: PPUSH
30340: CALL_OW 34
30344: ST_TO_ADDR
30345: GO 30362
// unit := NewCharacter ( ident ) ;
30347: LD_ADDR_VAR 0 5
30351: PUSH
30352: LD_VAR 0 1
30356: PPUSH
30357: CALL_OW 25
30361: ST_TO_ADDR
// result := unit ;
30362: LD_ADDR_VAR 0 4
30366: PUSH
30367: LD_VAR 0 5
30371: ST_TO_ADDR
// end ;
30372: LD_VAR 0 4
30376: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30377: LD_INT 0
30379: PPUSH
30380: PPUSH
// if not side or not nation then
30381: LD_VAR 0 1
30385: NOT
30386: IFTRUE 30395
30388: PUSH
30389: LD_VAR 0 2
30393: NOT
30394: OR
30395: IFFALSE 30399
// exit ;
30397: GO 31193
// case nation of nation_american :
30399: LD_VAR 0 2
30403: PUSH
30404: LD_INT 1
30406: DOUBLE
30407: EQUAL
30408: IFTRUE 30412
30410: GO 30634
30412: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
30413: LD_ADDR_VAR 0 4
30417: PUSH
30418: LD_INT 35
30420: PUSH
30421: LD_INT 45
30423: PUSH
30424: LD_INT 46
30426: PUSH
30427: LD_INT 47
30429: PUSH
30430: LD_INT 82
30432: PUSH
30433: LD_INT 83
30435: PUSH
30436: LD_INT 84
30438: PUSH
30439: LD_INT 85
30441: PUSH
30442: LD_INT 86
30444: PUSH
30445: LD_INT 1
30447: PUSH
30448: LD_INT 2
30450: PUSH
30451: LD_INT 6
30453: PUSH
30454: LD_INT 15
30456: PUSH
30457: LD_INT 16
30459: PUSH
30460: LD_INT 7
30462: PUSH
30463: LD_INT 12
30465: PUSH
30466: LD_INT 13
30468: PUSH
30469: LD_INT 10
30471: PUSH
30472: LD_INT 14
30474: PUSH
30475: LD_INT 20
30477: PUSH
30478: LD_INT 21
30480: PUSH
30481: LD_INT 22
30483: PUSH
30484: LD_INT 25
30486: PUSH
30487: LD_INT 32
30489: PUSH
30490: LD_INT 27
30492: PUSH
30493: LD_INT 36
30495: PUSH
30496: LD_INT 69
30498: PUSH
30499: LD_INT 39
30501: PUSH
30502: LD_INT 34
30504: PUSH
30505: LD_INT 40
30507: PUSH
30508: LD_INT 48
30510: PUSH
30511: LD_INT 49
30513: PUSH
30514: LD_INT 50
30516: PUSH
30517: LD_INT 51
30519: PUSH
30520: LD_INT 52
30522: PUSH
30523: LD_INT 53
30525: PUSH
30526: LD_INT 54
30528: PUSH
30529: LD_INT 55
30531: PUSH
30532: LD_INT 56
30534: PUSH
30535: LD_INT 57
30537: PUSH
30538: LD_INT 58
30540: PUSH
30541: LD_INT 59
30543: PUSH
30544: LD_INT 60
30546: PUSH
30547: LD_INT 61
30549: PUSH
30550: LD_INT 62
30552: PUSH
30553: LD_INT 80
30555: PUSH
30556: LD_INT 82
30558: PUSH
30559: LD_INT 83
30561: PUSH
30562: LD_INT 84
30564: PUSH
30565: LD_INT 85
30567: PUSH
30568: LD_INT 86
30570: PUSH
30571: LD_INT 90
30573: PUSH
30574: LD_INT 93
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: ST_TO_ADDR
30632: GO 31115
30634: LD_INT 2
30636: DOUBLE
30637: EQUAL
30638: IFTRUE 30642
30640: GO 30876
30642: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
30643: LD_ADDR_VAR 0 4
30647: PUSH
30648: LD_INT 35
30650: PUSH
30651: LD_INT 45
30653: PUSH
30654: LD_INT 46
30656: PUSH
30657: LD_INT 47
30659: PUSH
30660: LD_INT 82
30662: PUSH
30663: LD_INT 83
30665: PUSH
30666: LD_INT 84
30668: PUSH
30669: LD_INT 85
30671: PUSH
30672: LD_INT 87
30674: PUSH
30675: LD_INT 70
30677: PUSH
30678: LD_INT 1
30680: PUSH
30681: LD_INT 11
30683: PUSH
30684: LD_INT 3
30686: PUSH
30687: LD_INT 4
30689: PUSH
30690: LD_INT 5
30692: PUSH
30693: LD_INT 6
30695: PUSH
30696: LD_INT 15
30698: PUSH
30699: LD_INT 18
30701: PUSH
30702: LD_INT 7
30704: PUSH
30705: LD_INT 17
30707: PUSH
30708: LD_INT 8
30710: PUSH
30711: LD_INT 20
30713: PUSH
30714: LD_INT 21
30716: PUSH
30717: LD_INT 22
30719: PUSH
30720: LD_INT 72
30722: PUSH
30723: LD_INT 26
30725: PUSH
30726: LD_INT 69
30728: PUSH
30729: LD_INT 39
30731: PUSH
30732: LD_INT 40
30734: PUSH
30735: LD_INT 41
30737: PUSH
30738: LD_INT 42
30740: PUSH
30741: LD_INT 43
30743: PUSH
30744: LD_INT 48
30746: PUSH
30747: LD_INT 49
30749: PUSH
30750: LD_INT 50
30752: PUSH
30753: LD_INT 51
30755: PUSH
30756: LD_INT 52
30758: PUSH
30759: LD_INT 53
30761: PUSH
30762: LD_INT 54
30764: PUSH
30765: LD_INT 55
30767: PUSH
30768: LD_INT 56
30770: PUSH
30771: LD_INT 60
30773: PUSH
30774: LD_INT 61
30776: PUSH
30777: LD_INT 62
30779: PUSH
30780: LD_INT 66
30782: PUSH
30783: LD_INT 67
30785: PUSH
30786: LD_INT 68
30788: PUSH
30789: LD_INT 81
30791: PUSH
30792: LD_INT 82
30794: PUSH
30795: LD_INT 83
30797: PUSH
30798: LD_INT 84
30800: PUSH
30801: LD_INT 85
30803: PUSH
30804: LD_INT 87
30806: PUSH
30807: LD_INT 88
30809: PUSH
30810: LD_INT 92
30812: PUSH
30813: LD_INT 94
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: ST_TO_ADDR
30874: GO 31115
30876: LD_INT 3
30878: DOUBLE
30879: EQUAL
30880: IFTRUE 30884
30882: GO 31114
30884: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
30885: LD_ADDR_VAR 0 4
30889: PUSH
30890: LD_INT 46
30892: PUSH
30893: LD_INT 47
30895: PUSH
30896: LD_INT 1
30898: PUSH
30899: LD_INT 2
30901: PUSH
30902: LD_INT 82
30904: PUSH
30905: LD_INT 83
30907: PUSH
30908: LD_INT 84
30910: PUSH
30911: LD_INT 85
30913: PUSH
30914: LD_INT 86
30916: PUSH
30917: LD_INT 11
30919: PUSH
30920: LD_INT 9
30922: PUSH
30923: LD_INT 20
30925: PUSH
30926: LD_INT 19
30928: PUSH
30929: LD_INT 21
30931: PUSH
30932: LD_INT 24
30934: PUSH
30935: LD_INT 22
30937: PUSH
30938: LD_INT 25
30940: PUSH
30941: LD_INT 28
30943: PUSH
30944: LD_INT 29
30946: PUSH
30947: LD_INT 30
30949: PUSH
30950: LD_INT 31
30952: PUSH
30953: LD_INT 37
30955: PUSH
30956: LD_INT 38
30958: PUSH
30959: LD_INT 32
30961: PUSH
30962: LD_INT 27
30964: PUSH
30965: LD_INT 33
30967: PUSH
30968: LD_INT 69
30970: PUSH
30971: LD_INT 39
30973: PUSH
30974: LD_INT 34
30976: PUSH
30977: LD_INT 40
30979: PUSH
30980: LD_INT 71
30982: PUSH
30983: LD_INT 23
30985: PUSH
30986: LD_INT 44
30988: PUSH
30989: LD_INT 48
30991: PUSH
30992: LD_INT 49
30994: PUSH
30995: LD_INT 50
30997: PUSH
30998: LD_INT 51
31000: PUSH
31001: LD_INT 52
31003: PUSH
31004: LD_INT 53
31006: PUSH
31007: LD_INT 54
31009: PUSH
31010: LD_INT 55
31012: PUSH
31013: LD_INT 56
31015: PUSH
31016: LD_INT 57
31018: PUSH
31019: LD_INT 58
31021: PUSH
31022: LD_INT 59
31024: PUSH
31025: LD_INT 63
31027: PUSH
31028: LD_INT 64
31030: PUSH
31031: LD_INT 65
31033: PUSH
31034: LD_INT 82
31036: PUSH
31037: LD_INT 83
31039: PUSH
31040: LD_INT 84
31042: PUSH
31043: LD_INT 85
31045: PUSH
31046: LD_INT 86
31048: PUSH
31049: LD_INT 89
31051: PUSH
31052: LD_INT 91
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: ST_TO_ADDR
31112: GO 31115
31114: POP
// if state > - 1 and state < 3 then
31115: LD_VAR 0 3
31119: PUSH
31120: LD_INT 1
31122: NEG
31123: GREATER
31124: IFFALSE 31136
31126: PUSH
31127: LD_VAR 0 3
31131: PUSH
31132: LD_INT 3
31134: LESS
31135: AND
31136: IFFALSE 31193
// for i in result do
31138: LD_ADDR_VAR 0 5
31142: PUSH
31143: LD_VAR 0 4
31147: PUSH
31148: FOR_IN
31149: IFFALSE 31191
// if GetTech ( i , side ) <> state then
31151: LD_VAR 0 5
31155: PPUSH
31156: LD_VAR 0 1
31160: PPUSH
31161: CALL_OW 321
31165: PUSH
31166: LD_VAR 0 3
31170: NONEQUAL
31171: IFFALSE 31189
// result := result diff i ;
31173: LD_ADDR_VAR 0 4
31177: PUSH
31178: LD_VAR 0 4
31182: PUSH
31183: LD_VAR 0 5
31187: DIFF
31188: ST_TO_ADDR
31189: GO 31148
31191: POP
31192: POP
// end ;
31193: LD_VAR 0 4
31197: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31198: LD_INT 0
31200: PPUSH
31201: PPUSH
31202: PPUSH
// result := true ;
31203: LD_ADDR_VAR 0 3
31207: PUSH
31208: LD_INT 1
31210: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31211: LD_ADDR_VAR 0 5
31215: PUSH
31216: LD_VAR 0 2
31220: PPUSH
31221: CALL_OW 480
31225: ST_TO_ADDR
// if not tmp then
31226: LD_VAR 0 5
31230: NOT
31231: IFFALSE 31235
// exit ;
31233: GO 31284
// for i in tmp do
31235: LD_ADDR_VAR 0 4
31239: PUSH
31240: LD_VAR 0 5
31244: PUSH
31245: FOR_IN
31246: IFFALSE 31282
// if GetTech ( i , side ) <> state_researched then
31248: LD_VAR 0 4
31252: PPUSH
31253: LD_VAR 0 1
31257: PPUSH
31258: CALL_OW 321
31262: PUSH
31263: LD_INT 2
31265: NONEQUAL
31266: IFFALSE 31280
// begin result := false ;
31268: LD_ADDR_VAR 0 3
31272: PUSH
31273: LD_INT 0
31275: ST_TO_ADDR
// exit ;
31276: POP
31277: POP
31278: GO 31284
// end ;
31280: GO 31245
31282: POP
31283: POP
// end ;
31284: LD_VAR 0 3
31288: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31289: LD_INT 0
31291: PPUSH
31292: PPUSH
31293: PPUSH
31294: PPUSH
31295: PPUSH
31296: PPUSH
31297: PPUSH
31298: PPUSH
31299: PPUSH
31300: PPUSH
31301: PPUSH
31302: PPUSH
31303: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31304: LD_VAR 0 1
31308: NOT
31309: IFTRUE 31326
31311: PUSH
31312: LD_VAR 0 1
31316: PPUSH
31317: CALL_OW 257
31321: PUSH
31322: LD_INT 9
31324: NONEQUAL
31325: OR
31326: IFFALSE 31330
// exit ;
31328: GO 31909
// side := GetSide ( unit ) ;
31330: LD_ADDR_VAR 0 9
31334: PUSH
31335: LD_VAR 0 1
31339: PPUSH
31340: CALL_OW 255
31344: ST_TO_ADDR
// tech_space := tech_spacanom ;
31345: LD_ADDR_VAR 0 12
31349: PUSH
31350: LD_INT 29
31352: ST_TO_ADDR
// tech_time := tech_taurad ;
31353: LD_ADDR_VAR 0 13
31357: PUSH
31358: LD_INT 28
31360: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31361: LD_ADDR_VAR 0 11
31365: PUSH
31366: LD_VAR 0 1
31370: PPUSH
31371: CALL_OW 310
31375: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31376: LD_VAR 0 11
31380: PPUSH
31381: CALL_OW 247
31385: PUSH
31386: LD_INT 2
31388: EQUAL
31389: IFFALSE 31393
// exit ;
31391: GO 31909
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31393: LD_ADDR_VAR 0 8
31397: PUSH
31398: LD_INT 81
31400: PUSH
31401: LD_VAR 0 9
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 3
31412: PUSH
31413: LD_INT 21
31415: PUSH
31416: LD_INT 3
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PPUSH
31431: CALL_OW 69
31435: ST_TO_ADDR
// if not tmp then
31436: LD_VAR 0 8
31440: NOT
31441: IFFALSE 31445
// exit ;
31443: GO 31909
// if in_unit then
31445: LD_VAR 0 11
31449: IFFALSE 31473
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31451: LD_ADDR_VAR 0 10
31455: PUSH
31456: LD_VAR 0 8
31460: PPUSH
31461: LD_VAR 0 11
31465: PPUSH
31466: CALL_OW 74
31470: ST_TO_ADDR
31471: GO 31493
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31473: LD_ADDR_VAR 0 10
31477: PUSH
31478: LD_VAR 0 8
31482: PPUSH
31483: LD_VAR 0 1
31487: PPUSH
31488: CALL_OW 74
31492: ST_TO_ADDR
// if not enemy then
31493: LD_VAR 0 10
31497: NOT
31498: IFFALSE 31502
// exit ;
31500: GO 31909
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31502: LD_VAR 0 11
31506: IFFALSE 31528
31508: PUSH
31509: LD_VAR 0 11
31513: PPUSH
31514: LD_VAR 0 10
31518: PPUSH
31519: CALL_OW 296
31523: PUSH
31524: LD_INT 13
31526: GREATER
31527: AND
31528: IFTRUE 31550
31530: PUSH
31531: LD_VAR 0 1
31535: PPUSH
31536: LD_VAR 0 10
31540: PPUSH
31541: CALL_OW 296
31545: PUSH
31546: LD_INT 12
31548: GREATER
31549: OR
31550: IFFALSE 31554
// exit ;
31552: GO 31909
// missile := [ 1 ] ;
31554: LD_ADDR_VAR 0 14
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: EMPTY
31563: LIST
31564: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31565: LD_VAR 0 9
31569: PPUSH
31570: LD_VAR 0 12
31574: PPUSH
31575: CALL_OW 325
31579: IFFALSE 31608
// missile := Replace ( missile , missile + 1 , 2 ) ;
31581: LD_ADDR_VAR 0 14
31585: PUSH
31586: LD_VAR 0 14
31590: PPUSH
31591: LD_VAR 0 14
31595: PUSH
31596: LD_INT 1
31598: PLUS
31599: PPUSH
31600: LD_INT 2
31602: PPUSH
31603: CALL_OW 1
31607: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31608: LD_VAR 0 9
31612: PPUSH
31613: LD_VAR 0 13
31617: PPUSH
31618: CALL_OW 325
31622: IFFALSE 31646
31624: PUSH
31625: LD_VAR 0 10
31629: PPUSH
31630: CALL_OW 255
31634: PPUSH
31635: LD_VAR 0 13
31639: PPUSH
31640: CALL_OW 325
31644: NOT
31645: AND
31646: IFFALSE 31675
// missile := Replace ( missile , missile + 1 , 3 ) ;
31648: LD_ADDR_VAR 0 14
31652: PUSH
31653: LD_VAR 0 14
31657: PPUSH
31658: LD_VAR 0 14
31662: PUSH
31663: LD_INT 1
31665: PLUS
31666: PPUSH
31667: LD_INT 3
31669: PPUSH
31670: CALL_OW 1
31674: ST_TO_ADDR
// if missile < 2 then
31675: LD_VAR 0 14
31679: PUSH
31680: LD_INT 2
31682: LESS
31683: IFFALSE 31687
// exit ;
31685: GO 31909
// x := GetX ( enemy ) ;
31687: LD_ADDR_VAR 0 4
31691: PUSH
31692: LD_VAR 0 10
31696: PPUSH
31697: CALL_OW 250
31701: ST_TO_ADDR
// y := GetY ( enemy ) ;
31702: LD_ADDR_VAR 0 5
31706: PUSH
31707: LD_VAR 0 10
31711: PPUSH
31712: CALL_OW 251
31716: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31717: LD_ADDR_VAR 0 6
31721: PUSH
31722: LD_VAR 0 4
31726: PUSH
31727: LD_INT 1
31729: NEG
31730: PPUSH
31731: LD_INT 1
31733: PPUSH
31734: CALL_OW 12
31738: PLUS
31739: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31740: LD_ADDR_VAR 0 7
31744: PUSH
31745: LD_VAR 0 5
31749: PUSH
31750: LD_INT 1
31752: NEG
31753: PPUSH
31754: LD_INT 1
31756: PPUSH
31757: CALL_OW 12
31761: PLUS
31762: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31763: LD_VAR 0 6
31767: PPUSH
31768: LD_VAR 0 7
31772: PPUSH
31773: CALL_OW 488
31777: NOT
31778: IFFALSE 31800
// begin _x := x ;
31780: LD_ADDR_VAR 0 6
31784: PUSH
31785: LD_VAR 0 4
31789: ST_TO_ADDR
// _y := y ;
31790: LD_ADDR_VAR 0 7
31794: PUSH
31795: LD_VAR 0 5
31799: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31800: LD_ADDR_VAR 0 3
31804: PUSH
31805: LD_INT 1
31807: PPUSH
31808: LD_VAR 0 14
31812: PPUSH
31813: CALL_OW 12
31817: ST_TO_ADDR
// case i of 1 :
31818: LD_VAR 0 3
31822: PUSH
31823: LD_INT 1
31825: DOUBLE
31826: EQUAL
31827: IFTRUE 31831
31829: GO 31848
31831: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31832: LD_VAR 0 1
31836: PPUSH
31837: LD_VAR 0 10
31841: PPUSH
31842: CALL_OW 115
31846: GO 31909
31848: LD_INT 2
31850: DOUBLE
31851: EQUAL
31852: IFTRUE 31856
31854: GO 31878
31856: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31857: LD_VAR 0 1
31861: PPUSH
31862: LD_VAR 0 6
31866: PPUSH
31867: LD_VAR 0 7
31871: PPUSH
31872: CALL_OW 153
31876: GO 31909
31878: LD_INT 3
31880: DOUBLE
31881: EQUAL
31882: IFTRUE 31886
31884: GO 31908
31886: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31887: LD_VAR 0 1
31891: PPUSH
31892: LD_VAR 0 6
31896: PPUSH
31897: LD_VAR 0 7
31901: PPUSH
31902: CALL_OW 154
31906: GO 31909
31908: POP
// end ;
31909: LD_VAR 0 2
31913: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31914: LD_INT 0
31916: PPUSH
31917: PPUSH
31918: PPUSH
31919: PPUSH
31920: PPUSH
31921: PPUSH
// if not unit or not building then
31922: LD_VAR 0 1
31926: NOT
31927: IFTRUE 31936
31929: PUSH
31930: LD_VAR 0 2
31934: NOT
31935: OR
31936: IFFALSE 31940
// exit ;
31938: GO 32098
// x := GetX ( building ) ;
31940: LD_ADDR_VAR 0 5
31944: PUSH
31945: LD_VAR 0 2
31949: PPUSH
31950: CALL_OW 250
31954: ST_TO_ADDR
// y := GetY ( building ) ;
31955: LD_ADDR_VAR 0 6
31959: PUSH
31960: LD_VAR 0 2
31964: PPUSH
31965: CALL_OW 251
31969: ST_TO_ADDR
// for i := 0 to 5 do
31970: LD_ADDR_VAR 0 4
31974: PUSH
31975: DOUBLE
31976: LD_INT 0
31978: DEC
31979: ST_TO_ADDR
31980: LD_INT 5
31982: PUSH
31983: FOR_TO
31984: IFFALSE 32096
// begin _x := ShiftX ( x , i , 3 ) ;
31986: LD_ADDR_VAR 0 7
31990: PUSH
31991: LD_VAR 0 5
31995: PPUSH
31996: LD_VAR 0 4
32000: PPUSH
32001: LD_INT 3
32003: PPUSH
32004: CALL_OW 272
32008: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32009: LD_ADDR_VAR 0 8
32013: PUSH
32014: LD_VAR 0 6
32018: PPUSH
32019: LD_VAR 0 4
32023: PPUSH
32024: LD_INT 3
32026: PPUSH
32027: CALL_OW 273
32031: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32032: LD_VAR 0 7
32036: PPUSH
32037: LD_VAR 0 8
32041: PPUSH
32042: CALL_OW 488
32046: NOT
32047: IFFALSE 32051
// continue ;
32049: GO 31983
// if HexInfo ( _x , _y ) = 0 then
32051: LD_VAR 0 7
32055: PPUSH
32056: LD_VAR 0 8
32060: PPUSH
32061: CALL_OW 428
32065: PUSH
32066: LD_INT 0
32068: EQUAL
32069: IFFALSE 32094
// begin ComMoveXY ( unit , _x , _y ) ;
32071: LD_VAR 0 1
32075: PPUSH
32076: LD_VAR 0 7
32080: PPUSH
32081: LD_VAR 0 8
32085: PPUSH
32086: CALL_OW 111
// exit ;
32090: POP
32091: POP
32092: GO 32098
// end ; end ;
32094: GO 31983
32096: POP
32097: POP
// end ;
32098: LD_VAR 0 3
32102: RET
// export function ScanBase ( side , base_area ) ; begin
32103: LD_INT 0
32105: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32106: LD_ADDR_VAR 0 3
32110: PUSH
32111: LD_VAR 0 2
32115: PPUSH
32116: LD_INT 81
32118: PUSH
32119: LD_VAR 0 1
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PPUSH
32128: CALL_OW 70
32132: ST_TO_ADDR
// end ;
32133: LD_VAR 0 3
32137: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32138: LD_INT 0
32140: PPUSH
32141: PPUSH
32142: PPUSH
32143: PPUSH
// result := false ;
32144: LD_ADDR_VAR 0 2
32148: PUSH
32149: LD_INT 0
32151: ST_TO_ADDR
// side := GetSide ( unit ) ;
32152: LD_ADDR_VAR 0 3
32156: PUSH
32157: LD_VAR 0 1
32161: PPUSH
32162: CALL_OW 255
32166: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32167: LD_ADDR_VAR 0 4
32171: PUSH
32172: LD_VAR 0 1
32176: PPUSH
32177: CALL_OW 248
32181: ST_TO_ADDR
// case nat of 1 :
32182: LD_VAR 0 4
32186: PUSH
32187: LD_INT 1
32189: DOUBLE
32190: EQUAL
32191: IFTRUE 32195
32193: GO 32206
32195: POP
// tech := tech_lassight ; 2 :
32196: LD_ADDR_VAR 0 5
32200: PUSH
32201: LD_INT 12
32203: ST_TO_ADDR
32204: GO 32245
32206: LD_INT 2
32208: DOUBLE
32209: EQUAL
32210: IFTRUE 32214
32212: GO 32225
32214: POP
// tech := tech_mortar ; 3 :
32215: LD_ADDR_VAR 0 5
32219: PUSH
32220: LD_INT 41
32222: ST_TO_ADDR
32223: GO 32245
32225: LD_INT 3
32227: DOUBLE
32228: EQUAL
32229: IFTRUE 32233
32231: GO 32244
32233: POP
// tech := tech_bazooka ; end ;
32234: LD_ADDR_VAR 0 5
32238: PUSH
32239: LD_INT 44
32241: ST_TO_ADDR
32242: GO 32245
32244: POP
// if Researched ( side , tech ) then
32245: LD_VAR 0 3
32249: PPUSH
32250: LD_VAR 0 5
32254: PPUSH
32255: CALL_OW 325
32259: IFFALSE 32286
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32261: LD_ADDR_VAR 0 2
32265: PUSH
32266: LD_INT 5
32268: PUSH
32269: LD_INT 8
32271: PUSH
32272: LD_INT 9
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: LIST
32279: PUSH
32280: LD_VAR 0 4
32284: ARRAY
32285: ST_TO_ADDR
// end ;
32286: LD_VAR 0 2
32290: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32291: LD_INT 0
32293: PPUSH
32294: PPUSH
32295: PPUSH
// if not mines then
32296: LD_VAR 0 2
32300: NOT
32301: IFFALSE 32305
// exit ;
32303: GO 32449
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32305: LD_ADDR_VAR 0 5
32309: PUSH
32310: LD_INT 81
32312: PUSH
32313: LD_VAR 0 1
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 3
32324: PUSH
32325: LD_INT 21
32327: PUSH
32328: LD_INT 3
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PPUSH
32343: CALL_OW 69
32347: ST_TO_ADDR
// for i in mines do
32348: LD_ADDR_VAR 0 4
32352: PUSH
32353: LD_VAR 0 2
32357: PUSH
32358: FOR_IN
32359: IFFALSE 32447
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32361: LD_VAR 0 4
32365: PUSH
32366: LD_INT 1
32368: ARRAY
32369: PPUSH
32370: LD_VAR 0 4
32374: PUSH
32375: LD_INT 2
32377: ARRAY
32378: PPUSH
32379: CALL_OW 458
32383: NOT
32384: IFFALSE 32388
// continue ;
32386: GO 32358
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32388: LD_VAR 0 4
32392: PUSH
32393: LD_INT 1
32395: ARRAY
32396: PPUSH
32397: LD_VAR 0 4
32401: PUSH
32402: LD_INT 2
32404: ARRAY
32405: PPUSH
32406: CALL_OW 428
32410: PUSH
32411: LD_VAR 0 5
32415: IN
32416: IFFALSE 32445
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32418: LD_VAR 0 4
32422: PUSH
32423: LD_INT 1
32425: ARRAY
32426: PPUSH
32427: LD_VAR 0 4
32431: PUSH
32432: LD_INT 2
32434: ARRAY
32435: PPUSH
32436: LD_VAR 0 1
32440: PPUSH
32441: CALL_OW 456
// end ;
32445: GO 32358
32447: POP
32448: POP
// end ;
32449: LD_VAR 0 3
32453: RET
// export function Count ( array ) ; begin
32454: LD_INT 0
32456: PPUSH
// result := array + 0 ;
32457: LD_ADDR_VAR 0 2
32461: PUSH
32462: LD_VAR 0 1
32466: PUSH
32467: LD_INT 0
32469: PLUS
32470: ST_TO_ADDR
// end ;
32471: LD_VAR 0 2
32475: RET
// export function IsEmpty ( building ) ; begin
32476: LD_INT 0
32478: PPUSH
// if not building then
32479: LD_VAR 0 1
32483: NOT
32484: IFFALSE 32488
// exit ;
32486: GO 32531
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32488: LD_ADDR_VAR 0 2
32492: PUSH
32493: LD_VAR 0 1
32497: PUSH
32498: LD_INT 22
32500: PUSH
32501: LD_VAR 0 1
32505: PPUSH
32506: CALL_OW 255
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 58
32517: PUSH
32518: EMPTY
32519: LIST
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PPUSH
32525: CALL_OW 69
32529: IN
32530: ST_TO_ADDR
// end ;
32531: LD_VAR 0 2
32535: RET
// export function IsNotFull ( building ) ; var places ; begin
32536: LD_INT 0
32538: PPUSH
32539: PPUSH
// if not building then
32540: LD_VAR 0 1
32544: NOT
32545: IFFALSE 32549
// exit ;
32547: GO 32577
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32549: LD_ADDR_VAR 0 2
32553: PUSH
32554: LD_VAR 0 1
32558: PPUSH
32559: LD_INT 3
32561: PUSH
32562: LD_INT 62
32564: PUSH
32565: EMPTY
32566: LIST
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PPUSH
32572: CALL_OW 72
32576: ST_TO_ADDR
// end ;
32577: LD_VAR 0 2
32581: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32582: LD_INT 0
32584: PPUSH
32585: PPUSH
32586: PPUSH
32587: PPUSH
// tmp := [ ] ;
32588: LD_ADDR_VAR 0 3
32592: PUSH
32593: EMPTY
32594: ST_TO_ADDR
// list := [ ] ;
32595: LD_ADDR_VAR 0 5
32599: PUSH
32600: EMPTY
32601: ST_TO_ADDR
// for i = 16 to 25 do
32602: LD_ADDR_VAR 0 4
32606: PUSH
32607: DOUBLE
32608: LD_INT 16
32610: DEC
32611: ST_TO_ADDR
32612: LD_INT 25
32614: PUSH
32615: FOR_TO
32616: IFFALSE 32689
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32618: LD_ADDR_VAR 0 3
32622: PUSH
32623: LD_VAR 0 3
32627: PUSH
32628: LD_INT 22
32630: PUSH
32631: LD_VAR 0 1
32635: PPUSH
32636: CALL_OW 255
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 91
32647: PUSH
32648: LD_VAR 0 1
32652: PUSH
32653: LD_INT 6
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 30
32663: PUSH
32664: LD_VAR 0 4
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: LIST
32677: PUSH
32678: EMPTY
32679: LIST
32680: PPUSH
32681: CALL_OW 69
32685: ADD
32686: ST_TO_ADDR
32687: GO 32615
32689: POP
32690: POP
// for i = 1 to tmp do
32691: LD_ADDR_VAR 0 4
32695: PUSH
32696: DOUBLE
32697: LD_INT 1
32699: DEC
32700: ST_TO_ADDR
32701: LD_VAR 0 3
32705: PUSH
32706: FOR_TO
32707: IFFALSE 32795
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32709: LD_ADDR_VAR 0 5
32713: PUSH
32714: LD_VAR 0 5
32718: PUSH
32719: LD_VAR 0 3
32723: PUSH
32724: LD_VAR 0 4
32728: ARRAY
32729: PPUSH
32730: CALL_OW 266
32734: PUSH
32735: LD_VAR 0 3
32739: PUSH
32740: LD_VAR 0 4
32744: ARRAY
32745: PPUSH
32746: CALL_OW 250
32750: PUSH
32751: LD_VAR 0 3
32755: PUSH
32756: LD_VAR 0 4
32760: ARRAY
32761: PPUSH
32762: CALL_OW 251
32766: PUSH
32767: LD_VAR 0 3
32771: PUSH
32772: LD_VAR 0 4
32776: ARRAY
32777: PPUSH
32778: CALL_OW 254
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: PUSH
32789: EMPTY
32790: LIST
32791: ADD
32792: ST_TO_ADDR
32793: GO 32706
32795: POP
32796: POP
// result := list ;
32797: LD_ADDR_VAR 0 2
32801: PUSH
32802: LD_VAR 0 5
32806: ST_TO_ADDR
// end ;
32807: LD_VAR 0 2
32811: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32812: LD_INT 0
32814: PPUSH
32815: PPUSH
32816: PPUSH
32817: PPUSH
32818: PPUSH
32819: PPUSH
32820: PPUSH
// if not factory then
32821: LD_VAR 0 1
32825: NOT
32826: IFFALSE 32830
// exit ;
32828: GO 33433
// if control = control_apeman then
32830: LD_VAR 0 4
32834: PUSH
32835: LD_INT 5
32837: EQUAL
32838: IFFALSE 32947
// begin tmp := UnitsInside ( factory ) ;
32840: LD_ADDR_VAR 0 8
32844: PUSH
32845: LD_VAR 0 1
32849: PPUSH
32850: CALL_OW 313
32854: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32855: LD_VAR 0 8
32859: PPUSH
32860: LD_INT 25
32862: PUSH
32863: LD_INT 12
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PPUSH
32870: CALL_OW 72
32874: NOT
32875: IFFALSE 32885
// control := control_manual ;
32877: LD_ADDR_VAR 0 4
32881: PUSH
32882: LD_INT 1
32884: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32885: LD_ADDR_VAR 0 8
32889: PUSH
32890: LD_VAR 0 1
32894: PPUSH
32895: CALL 32582 0 1
32899: ST_TO_ADDR
// if tmp then
32900: LD_VAR 0 8
32904: IFFALSE 32947
// begin for i in tmp do
32906: LD_ADDR_VAR 0 7
32910: PUSH
32911: LD_VAR 0 8
32915: PUSH
32916: FOR_IN
32917: IFFALSE 32945
// if i [ 1 ] = b_ext_radio then
32919: LD_VAR 0 7
32923: PUSH
32924: LD_INT 1
32926: ARRAY
32927: PUSH
32928: LD_INT 22
32930: EQUAL
32931: IFFALSE 32943
// begin control := control_remote ;
32933: LD_ADDR_VAR 0 4
32937: PUSH
32938: LD_INT 2
32940: ST_TO_ADDR
// break ;
32941: GO 32945
// end ;
32943: GO 32916
32945: POP
32946: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32947: LD_VAR 0 1
32951: PPUSH
32952: LD_VAR 0 2
32956: PPUSH
32957: LD_VAR 0 3
32961: PPUSH
32962: LD_VAR 0 4
32966: PPUSH
32967: LD_VAR 0 5
32971: PPUSH
32972: CALL_OW 448
32976: IFFALSE 33011
// begin result := [ chassis , engine , control , weapon ] ;
32978: LD_ADDR_VAR 0 6
32982: PUSH
32983: LD_VAR 0 2
32987: PUSH
32988: LD_VAR 0 3
32992: PUSH
32993: LD_VAR 0 4
32997: PUSH
32998: LD_VAR 0 5
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: ST_TO_ADDR
// exit ;
33009: GO 33433
// end ; _chassis := AvailableChassisList ( factory ) ;
33011: LD_ADDR_VAR 0 9
33015: PUSH
33016: LD_VAR 0 1
33020: PPUSH
33021: CALL_OW 475
33025: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33026: LD_ADDR_VAR 0 11
33030: PUSH
33031: LD_VAR 0 1
33035: PPUSH
33036: CALL_OW 476
33040: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33041: LD_ADDR_VAR 0 12
33045: PUSH
33046: LD_VAR 0 1
33050: PPUSH
33051: CALL_OW 477
33055: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33056: LD_ADDR_VAR 0 10
33060: PUSH
33061: LD_VAR 0 1
33065: PPUSH
33066: CALL_OW 478
33070: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33071: LD_VAR 0 9
33075: NOT
33076: IFTRUE 33085
33078: PUSH
33079: LD_VAR 0 11
33083: NOT
33084: OR
33085: IFTRUE 33094
33087: PUSH
33088: LD_VAR 0 12
33092: NOT
33093: OR
33094: IFTRUE 33103
33096: PUSH
33097: LD_VAR 0 10
33101: NOT
33102: OR
33103: IFFALSE 33138
// begin result := [ chassis , engine , control , weapon ] ;
33105: LD_ADDR_VAR 0 6
33109: PUSH
33110: LD_VAR 0 2
33114: PUSH
33115: LD_VAR 0 3
33119: PUSH
33120: LD_VAR 0 4
33124: PUSH
33125: LD_VAR 0 5
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: ST_TO_ADDR
// exit ;
33136: GO 33433
// end ; if not chassis in _chassis then
33138: LD_VAR 0 2
33142: PUSH
33143: LD_VAR 0 9
33147: IN
33148: NOT
33149: IFFALSE 33175
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33151: LD_ADDR_VAR 0 2
33155: PUSH
33156: LD_VAR 0 9
33160: PUSH
33161: LD_INT 1
33163: PPUSH
33164: LD_VAR 0 9
33168: PPUSH
33169: CALL_OW 12
33173: ARRAY
33174: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33175: LD_VAR 0 2
33179: PPUSH
33180: LD_VAR 0 3
33184: PPUSH
33185: CALL 33438 0 2
33189: NOT
33190: IFFALSE 33251
// repeat engine := _engine [ 1 ] ;
33192: LD_ADDR_VAR 0 3
33196: PUSH
33197: LD_VAR 0 11
33201: PUSH
33202: LD_INT 1
33204: ARRAY
33205: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33206: LD_ADDR_VAR 0 11
33210: PUSH
33211: LD_VAR 0 11
33215: PPUSH
33216: LD_INT 1
33218: PPUSH
33219: CALL_OW 3
33223: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33224: LD_VAR 0 2
33228: PPUSH
33229: LD_VAR 0 3
33233: PPUSH
33234: CALL 33438 0 2
33238: IFTRUE 33249
33240: PUSH
33241: LD_VAR 0 11
33245: PUSH
33246: EMPTY
33247: EQUAL
33248: OR
33249: IFFALSE 33192
// if not control in _control then
33251: LD_VAR 0 4
33255: PUSH
33256: LD_VAR 0 12
33260: IN
33261: NOT
33262: IFFALSE 33288
// control := _control [ rand ( 1 , _control ) ] ;
33264: LD_ADDR_VAR 0 4
33268: PUSH
33269: LD_VAR 0 12
33273: PUSH
33274: LD_INT 1
33276: PPUSH
33277: LD_VAR 0 12
33281: PPUSH
33282: CALL_OW 12
33286: ARRAY
33287: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33288: LD_VAR 0 2
33292: PPUSH
33293: LD_VAR 0 5
33297: PPUSH
33298: CALL 33660 0 2
33302: NOT
33303: IFFALSE 33364
// repeat weapon := _weapon [ 1 ] ;
33305: LD_ADDR_VAR 0 5
33309: PUSH
33310: LD_VAR 0 10
33314: PUSH
33315: LD_INT 1
33317: ARRAY
33318: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33319: LD_ADDR_VAR 0 10
33323: PUSH
33324: LD_VAR 0 10
33328: PPUSH
33329: LD_INT 1
33331: PPUSH
33332: CALL_OW 3
33336: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33337: LD_VAR 0 2
33341: PPUSH
33342: LD_VAR 0 5
33346: PPUSH
33347: CALL 33660 0 2
33351: IFTRUE 33362
33353: PUSH
33354: LD_VAR 0 10
33358: PUSH
33359: EMPTY
33360: EQUAL
33361: OR
33362: IFFALSE 33305
// result := [ ] ;
33364: LD_ADDR_VAR 0 6
33368: PUSH
33369: EMPTY
33370: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33371: LD_VAR 0 1
33375: PPUSH
33376: LD_VAR 0 2
33380: PPUSH
33381: LD_VAR 0 3
33385: PPUSH
33386: LD_VAR 0 4
33390: PPUSH
33391: LD_VAR 0 5
33395: PPUSH
33396: CALL_OW 448
33400: IFFALSE 33433
// result := [ chassis , engine , control , weapon ] ;
33402: LD_ADDR_VAR 0 6
33406: PUSH
33407: LD_VAR 0 2
33411: PUSH
33412: LD_VAR 0 3
33416: PUSH
33417: LD_VAR 0 4
33421: PUSH
33422: LD_VAR 0 5
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: ST_TO_ADDR
// end ;
33433: LD_VAR 0 6
33437: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33438: LD_INT 0
33440: PPUSH
// if not chassis or not engine then
33441: LD_VAR 0 1
33445: NOT
33446: IFTRUE 33455
33448: PUSH
33449: LD_VAR 0 2
33453: NOT
33454: OR
33455: IFFALSE 33459
// exit ;
33457: GO 33655
// case engine of engine_solar :
33459: LD_VAR 0 2
33463: PUSH
33464: LD_INT 2
33466: DOUBLE
33467: EQUAL
33468: IFTRUE 33472
33470: GO 33510
33472: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33473: LD_ADDR_VAR 0 3
33477: PUSH
33478: LD_INT 11
33480: PUSH
33481: LD_INT 12
33483: PUSH
33484: LD_INT 13
33486: PUSH
33487: LD_INT 14
33489: PUSH
33490: LD_INT 1
33492: PUSH
33493: LD_INT 2
33495: PUSH
33496: LD_INT 3
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: ST_TO_ADDR
33508: GO 33639
33510: LD_INT 1
33512: DOUBLE
33513: EQUAL
33514: IFTRUE 33518
33516: GO 33580
33518: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33519: LD_ADDR_VAR 0 3
33523: PUSH
33524: LD_INT 11
33526: PUSH
33527: LD_INT 12
33529: PUSH
33530: LD_INT 13
33532: PUSH
33533: LD_INT 14
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: LD_INT 2
33541: PUSH
33542: LD_INT 3
33544: PUSH
33545: LD_INT 4
33547: PUSH
33548: LD_INT 5
33550: PUSH
33551: LD_INT 21
33553: PUSH
33554: LD_INT 23
33556: PUSH
33557: LD_INT 22
33559: PUSH
33560: LD_INT 24
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: ST_TO_ADDR
33578: GO 33639
33580: LD_INT 3
33582: DOUBLE
33583: EQUAL
33584: IFTRUE 33588
33586: GO 33638
33588: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33589: LD_ADDR_VAR 0 3
33593: PUSH
33594: LD_INT 13
33596: PUSH
33597: LD_INT 14
33599: PUSH
33600: LD_INT 2
33602: PUSH
33603: LD_INT 3
33605: PUSH
33606: LD_INT 4
33608: PUSH
33609: LD_INT 5
33611: PUSH
33612: LD_INT 21
33614: PUSH
33615: LD_INT 22
33617: PUSH
33618: LD_INT 23
33620: PUSH
33621: LD_INT 24
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: ST_TO_ADDR
33636: GO 33639
33638: POP
// result := ( chassis in result ) ;
33639: LD_ADDR_VAR 0 3
33643: PUSH
33644: LD_VAR 0 1
33648: PUSH
33649: LD_VAR 0 3
33653: IN
33654: ST_TO_ADDR
// end ;
33655: LD_VAR 0 3
33659: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33660: LD_INT 0
33662: PPUSH
// if not chassis or not weapon then
33663: LD_VAR 0 1
33667: NOT
33668: IFTRUE 33677
33670: PUSH
33671: LD_VAR 0 2
33675: NOT
33676: OR
33677: IFFALSE 33681
// exit ;
33679: GO 34775
// case weapon of us_machine_gun :
33681: LD_VAR 0 2
33685: PUSH
33686: LD_INT 2
33688: DOUBLE
33689: EQUAL
33690: IFTRUE 33694
33692: GO 33724
33694: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33695: LD_ADDR_VAR 0 3
33699: PUSH
33700: LD_INT 1
33702: PUSH
33703: LD_INT 2
33705: PUSH
33706: LD_INT 3
33708: PUSH
33709: LD_INT 4
33711: PUSH
33712: LD_INT 5
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: ST_TO_ADDR
33722: GO 34759
33724: LD_INT 3
33726: DOUBLE
33727: EQUAL
33728: IFTRUE 33732
33730: GO 33762
33732: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33733: LD_ADDR_VAR 0 3
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: LD_INT 2
33743: PUSH
33744: LD_INT 3
33746: PUSH
33747: LD_INT 4
33749: PUSH
33750: LD_INT 5
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: ST_TO_ADDR
33760: GO 34759
33762: LD_INT 11
33764: DOUBLE
33765: EQUAL
33766: IFTRUE 33770
33768: GO 33800
33770: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33771: LD_ADDR_VAR 0 3
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: LD_INT 2
33781: PUSH
33782: LD_INT 3
33784: PUSH
33785: LD_INT 4
33787: PUSH
33788: LD_INT 5
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: ST_TO_ADDR
33798: GO 34759
33800: LD_INT 4
33802: DOUBLE
33803: EQUAL
33804: IFTRUE 33808
33806: GO 33834
33808: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33809: LD_ADDR_VAR 0 3
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: LD_INT 3
33819: PUSH
33820: LD_INT 4
33822: PUSH
33823: LD_INT 5
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: ST_TO_ADDR
33832: GO 34759
33834: LD_INT 5
33836: DOUBLE
33837: EQUAL
33838: IFTRUE 33842
33840: GO 33868
33842: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33843: LD_ADDR_VAR 0 3
33847: PUSH
33848: LD_INT 2
33850: PUSH
33851: LD_INT 3
33853: PUSH
33854: LD_INT 4
33856: PUSH
33857: LD_INT 5
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: ST_TO_ADDR
33866: GO 34759
33868: LD_INT 9
33870: DOUBLE
33871: EQUAL
33872: IFTRUE 33876
33874: GO 33902
33876: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33877: LD_ADDR_VAR 0 3
33881: PUSH
33882: LD_INT 2
33884: PUSH
33885: LD_INT 3
33887: PUSH
33888: LD_INT 4
33890: PUSH
33891: LD_INT 5
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: ST_TO_ADDR
33900: GO 34759
33902: LD_INT 7
33904: DOUBLE
33905: EQUAL
33906: IFTRUE 33910
33908: GO 33936
33910: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33911: LD_ADDR_VAR 0 3
33915: PUSH
33916: LD_INT 2
33918: PUSH
33919: LD_INT 3
33921: PUSH
33922: LD_INT 4
33924: PUSH
33925: LD_INT 5
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: ST_TO_ADDR
33934: GO 34759
33936: LD_INT 12
33938: DOUBLE
33939: EQUAL
33940: IFTRUE 33944
33942: GO 33970
33944: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33945: LD_ADDR_VAR 0 3
33949: PUSH
33950: LD_INT 2
33952: PUSH
33953: LD_INT 3
33955: PUSH
33956: LD_INT 4
33958: PUSH
33959: LD_INT 5
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: ST_TO_ADDR
33968: GO 34759
33970: LD_INT 13
33972: DOUBLE
33973: EQUAL
33974: IFTRUE 33978
33976: GO 34004
33978: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33979: LD_ADDR_VAR 0 3
33983: PUSH
33984: LD_INT 2
33986: PUSH
33987: LD_INT 3
33989: PUSH
33990: LD_INT 4
33992: PUSH
33993: LD_INT 5
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: ST_TO_ADDR
34002: GO 34759
34004: LD_INT 14
34006: DOUBLE
34007: EQUAL
34008: IFTRUE 34012
34010: GO 34030
34012: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34013: LD_ADDR_VAR 0 3
34017: PUSH
34018: LD_INT 4
34020: PUSH
34021: LD_INT 5
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: ST_TO_ADDR
34028: GO 34759
34030: LD_INT 6
34032: DOUBLE
34033: EQUAL
34034: IFTRUE 34038
34036: GO 34056
34038: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34039: LD_ADDR_VAR 0 3
34043: PUSH
34044: LD_INT 4
34046: PUSH
34047: LD_INT 5
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: ST_TO_ADDR
34054: GO 34759
34056: LD_INT 10
34058: DOUBLE
34059: EQUAL
34060: IFTRUE 34064
34062: GO 34082
34064: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34065: LD_ADDR_VAR 0 3
34069: PUSH
34070: LD_INT 4
34072: PUSH
34073: LD_INT 5
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: ST_TO_ADDR
34080: GO 34759
34082: LD_INT 22
34084: DOUBLE
34085: EQUAL
34086: IFTRUE 34090
34088: GO 34116
34090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34091: LD_ADDR_VAR 0 3
34095: PUSH
34096: LD_INT 11
34098: PUSH
34099: LD_INT 12
34101: PUSH
34102: LD_INT 13
34104: PUSH
34105: LD_INT 14
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: ST_TO_ADDR
34114: GO 34759
34116: LD_INT 23
34118: DOUBLE
34119: EQUAL
34120: IFTRUE 34124
34122: GO 34150
34124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34125: LD_ADDR_VAR 0 3
34129: PUSH
34130: LD_INT 11
34132: PUSH
34133: LD_INT 12
34135: PUSH
34136: LD_INT 13
34138: PUSH
34139: LD_INT 14
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: ST_TO_ADDR
34148: GO 34759
34150: LD_INT 24
34152: DOUBLE
34153: EQUAL
34154: IFTRUE 34158
34156: GO 34184
34158: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34159: LD_ADDR_VAR 0 3
34163: PUSH
34164: LD_INT 11
34166: PUSH
34167: LD_INT 12
34169: PUSH
34170: LD_INT 13
34172: PUSH
34173: LD_INT 14
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: ST_TO_ADDR
34182: GO 34759
34184: LD_INT 30
34186: DOUBLE
34187: EQUAL
34188: IFTRUE 34192
34190: GO 34218
34192: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34193: LD_ADDR_VAR 0 3
34197: PUSH
34198: LD_INT 11
34200: PUSH
34201: LD_INT 12
34203: PUSH
34204: LD_INT 13
34206: PUSH
34207: LD_INT 14
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: ST_TO_ADDR
34216: GO 34759
34218: LD_INT 25
34220: DOUBLE
34221: EQUAL
34222: IFTRUE 34226
34224: GO 34244
34226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34227: LD_ADDR_VAR 0 3
34231: PUSH
34232: LD_INT 13
34234: PUSH
34235: LD_INT 14
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: ST_TO_ADDR
34242: GO 34759
34244: LD_INT 27
34246: DOUBLE
34247: EQUAL
34248: IFTRUE 34252
34250: GO 34270
34252: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34253: LD_ADDR_VAR 0 3
34257: PUSH
34258: LD_INT 13
34260: PUSH
34261: LD_INT 14
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: ST_TO_ADDR
34268: GO 34759
34270: LD_INT 92
34272: DOUBLE
34273: EQUAL
34274: IFTRUE 34278
34276: GO 34304
34278: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34279: LD_ADDR_VAR 0 3
34283: PUSH
34284: LD_INT 11
34286: PUSH
34287: LD_INT 12
34289: PUSH
34290: LD_INT 13
34292: PUSH
34293: LD_INT 14
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: ST_TO_ADDR
34302: GO 34759
34304: LD_INT 28
34306: DOUBLE
34307: EQUAL
34308: IFTRUE 34312
34310: GO 34330
34312: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34313: LD_ADDR_VAR 0 3
34317: PUSH
34318: LD_INT 13
34320: PUSH
34321: LD_INT 14
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: ST_TO_ADDR
34328: GO 34759
34330: LD_INT 29
34332: DOUBLE
34333: EQUAL
34334: IFTRUE 34338
34336: GO 34356
34338: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34339: LD_ADDR_VAR 0 3
34343: PUSH
34344: LD_INT 13
34346: PUSH
34347: LD_INT 14
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: ST_TO_ADDR
34354: GO 34759
34356: LD_INT 31
34358: DOUBLE
34359: EQUAL
34360: IFTRUE 34364
34362: GO 34382
34364: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34365: LD_ADDR_VAR 0 3
34369: PUSH
34370: LD_INT 13
34372: PUSH
34373: LD_INT 14
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: ST_TO_ADDR
34380: GO 34759
34382: LD_INT 26
34384: DOUBLE
34385: EQUAL
34386: IFTRUE 34390
34388: GO 34408
34390: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34391: LD_ADDR_VAR 0 3
34395: PUSH
34396: LD_INT 13
34398: PUSH
34399: LD_INT 14
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: ST_TO_ADDR
34406: GO 34759
34408: LD_INT 42
34410: DOUBLE
34411: EQUAL
34412: IFTRUE 34416
34414: GO 34442
34416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34417: LD_ADDR_VAR 0 3
34421: PUSH
34422: LD_INT 21
34424: PUSH
34425: LD_INT 22
34427: PUSH
34428: LD_INT 23
34430: PUSH
34431: LD_INT 24
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: ST_TO_ADDR
34440: GO 34759
34442: LD_INT 43
34444: DOUBLE
34445: EQUAL
34446: IFTRUE 34450
34448: GO 34476
34450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34451: LD_ADDR_VAR 0 3
34455: PUSH
34456: LD_INT 21
34458: PUSH
34459: LD_INT 22
34461: PUSH
34462: LD_INT 23
34464: PUSH
34465: LD_INT 24
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: ST_TO_ADDR
34474: GO 34759
34476: LD_INT 44
34478: DOUBLE
34479: EQUAL
34480: IFTRUE 34484
34482: GO 34510
34484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34485: LD_ADDR_VAR 0 3
34489: PUSH
34490: LD_INT 21
34492: PUSH
34493: LD_INT 22
34495: PUSH
34496: LD_INT 23
34498: PUSH
34499: LD_INT 24
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: ST_TO_ADDR
34508: GO 34759
34510: LD_INT 45
34512: DOUBLE
34513: EQUAL
34514: IFTRUE 34518
34516: GO 34544
34518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34519: LD_ADDR_VAR 0 3
34523: PUSH
34524: LD_INT 21
34526: PUSH
34527: LD_INT 22
34529: PUSH
34530: LD_INT 23
34532: PUSH
34533: LD_INT 24
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: ST_TO_ADDR
34542: GO 34759
34544: LD_INT 49
34546: DOUBLE
34547: EQUAL
34548: IFTRUE 34552
34550: GO 34578
34552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34553: LD_ADDR_VAR 0 3
34557: PUSH
34558: LD_INT 21
34560: PUSH
34561: LD_INT 22
34563: PUSH
34564: LD_INT 23
34566: PUSH
34567: LD_INT 24
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: ST_TO_ADDR
34576: GO 34759
34578: LD_INT 51
34580: DOUBLE
34581: EQUAL
34582: IFTRUE 34586
34584: GO 34612
34586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34587: LD_ADDR_VAR 0 3
34591: PUSH
34592: LD_INT 21
34594: PUSH
34595: LD_INT 22
34597: PUSH
34598: LD_INT 23
34600: PUSH
34601: LD_INT 24
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: ST_TO_ADDR
34610: GO 34759
34612: LD_INT 52
34614: DOUBLE
34615: EQUAL
34616: IFTRUE 34620
34618: GO 34646
34620: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34621: LD_ADDR_VAR 0 3
34625: PUSH
34626: LD_INT 21
34628: PUSH
34629: LD_INT 22
34631: PUSH
34632: LD_INT 23
34634: PUSH
34635: LD_INT 24
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: ST_TO_ADDR
34644: GO 34759
34646: LD_INT 53
34648: DOUBLE
34649: EQUAL
34650: IFTRUE 34654
34652: GO 34672
34654: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34655: LD_ADDR_VAR 0 3
34659: PUSH
34660: LD_INT 23
34662: PUSH
34663: LD_INT 24
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: ST_TO_ADDR
34670: GO 34759
34672: LD_INT 46
34674: DOUBLE
34675: EQUAL
34676: IFTRUE 34680
34678: GO 34698
34680: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34681: LD_ADDR_VAR 0 3
34685: PUSH
34686: LD_INT 23
34688: PUSH
34689: LD_INT 24
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: ST_TO_ADDR
34696: GO 34759
34698: LD_INT 47
34700: DOUBLE
34701: EQUAL
34702: IFTRUE 34706
34704: GO 34724
34706: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
34707: LD_ADDR_VAR 0 3
34711: PUSH
34712: LD_INT 23
34714: PUSH
34715: LD_INT 24
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: ST_TO_ADDR
34722: GO 34759
34724: LD_INT 98
34726: DOUBLE
34727: EQUAL
34728: IFTRUE 34732
34730: GO 34758
34732: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34733: LD_ADDR_VAR 0 3
34737: PUSH
34738: LD_INT 21
34740: PUSH
34741: LD_INT 22
34743: PUSH
34744: LD_INT 23
34746: PUSH
34747: LD_INT 24
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: ST_TO_ADDR
34756: GO 34759
34758: POP
// result := ( chassis in result ) ;
34759: LD_ADDR_VAR 0 3
34763: PUSH
34764: LD_VAR 0 1
34768: PUSH
34769: LD_VAR 0 3
34773: IN
34774: ST_TO_ADDR
// end ;
34775: LD_VAR 0 3
34779: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34780: LD_INT 0
34782: PPUSH
34783: PPUSH
34784: PPUSH
34785: PPUSH
34786: PPUSH
34787: PPUSH
34788: PPUSH
// result := array ;
34789: LD_ADDR_VAR 0 5
34793: PUSH
34794: LD_VAR 0 1
34798: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34799: LD_VAR 0 1
34803: NOT
34804: IFTRUE 34813
34806: PUSH
34807: LD_VAR 0 2
34811: NOT
34812: OR
34813: IFTRUE 34822
34815: PUSH
34816: LD_VAR 0 3
34820: NOT
34821: OR
34822: IFTRUE 34836
34824: PUSH
34825: LD_VAR 0 2
34829: PUSH
34830: LD_VAR 0 1
34834: GREATER
34835: OR
34836: IFTRUE 34850
34838: PUSH
34839: LD_VAR 0 3
34843: PUSH
34844: LD_VAR 0 1
34848: GREATER
34849: OR
34850: IFFALSE 34854
// exit ;
34852: GO 35150
// if direction then
34854: LD_VAR 0 4
34858: IFFALSE 34922
// begin d := 1 ;
34860: LD_ADDR_VAR 0 9
34864: PUSH
34865: LD_INT 1
34867: ST_TO_ADDR
// if i_from > i_to then
34868: LD_VAR 0 2
34872: PUSH
34873: LD_VAR 0 3
34877: GREATER
34878: IFFALSE 34904
// length := ( array - i_from ) + i_to else
34880: LD_ADDR_VAR 0 11
34884: PUSH
34885: LD_VAR 0 1
34889: PUSH
34890: LD_VAR 0 2
34894: MINUS
34895: PUSH
34896: LD_VAR 0 3
34900: PLUS
34901: ST_TO_ADDR
34902: GO 34920
// length := i_to - i_from ;
34904: LD_ADDR_VAR 0 11
34908: PUSH
34909: LD_VAR 0 3
34913: PUSH
34914: LD_VAR 0 2
34918: MINUS
34919: ST_TO_ADDR
// end else
34920: GO 34983
// begin d := - 1 ;
34922: LD_ADDR_VAR 0 9
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: ST_TO_ADDR
// if i_from > i_to then
34931: LD_VAR 0 2
34935: PUSH
34936: LD_VAR 0 3
34940: GREATER
34941: IFFALSE 34961
// length := i_from - i_to else
34943: LD_ADDR_VAR 0 11
34947: PUSH
34948: LD_VAR 0 2
34952: PUSH
34953: LD_VAR 0 3
34957: MINUS
34958: ST_TO_ADDR
34959: GO 34983
// length := ( array - i_to ) + i_from ;
34961: LD_ADDR_VAR 0 11
34965: PUSH
34966: LD_VAR 0 1
34970: PUSH
34971: LD_VAR 0 3
34975: MINUS
34976: PUSH
34977: LD_VAR 0 2
34981: PLUS
34982: ST_TO_ADDR
// end ; if not length then
34983: LD_VAR 0 11
34987: NOT
34988: IFFALSE 34992
// exit ;
34990: GO 35150
// tmp := array ;
34992: LD_ADDR_VAR 0 10
34996: PUSH
34997: LD_VAR 0 1
35001: ST_TO_ADDR
// for i = 1 to length do
35002: LD_ADDR_VAR 0 6
35006: PUSH
35007: DOUBLE
35008: LD_INT 1
35010: DEC
35011: ST_TO_ADDR
35012: LD_VAR 0 11
35016: PUSH
35017: FOR_TO
35018: IFFALSE 35138
// begin for j = 1 to array do
35020: LD_ADDR_VAR 0 7
35024: PUSH
35025: DOUBLE
35026: LD_INT 1
35028: DEC
35029: ST_TO_ADDR
35030: LD_VAR 0 1
35034: PUSH
35035: FOR_TO
35036: IFFALSE 35124
// begin k := j + d ;
35038: LD_ADDR_VAR 0 8
35042: PUSH
35043: LD_VAR 0 7
35047: PUSH
35048: LD_VAR 0 9
35052: PLUS
35053: ST_TO_ADDR
// if k > array then
35054: LD_VAR 0 8
35058: PUSH
35059: LD_VAR 0 1
35063: GREATER
35064: IFFALSE 35074
// k := 1 ;
35066: LD_ADDR_VAR 0 8
35070: PUSH
35071: LD_INT 1
35073: ST_TO_ADDR
// if not k then
35074: LD_VAR 0 8
35078: NOT
35079: IFFALSE 35091
// k := array ;
35081: LD_ADDR_VAR 0 8
35085: PUSH
35086: LD_VAR 0 1
35090: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35091: LD_ADDR_VAR 0 10
35095: PUSH
35096: LD_VAR 0 10
35100: PPUSH
35101: LD_VAR 0 8
35105: PPUSH
35106: LD_VAR 0 1
35110: PUSH
35111: LD_VAR 0 7
35115: ARRAY
35116: PPUSH
35117: CALL_OW 1
35121: ST_TO_ADDR
// end ;
35122: GO 35035
35124: POP
35125: POP
// array := tmp ;
35126: LD_ADDR_VAR 0 1
35130: PUSH
35131: LD_VAR 0 10
35135: ST_TO_ADDR
// end ;
35136: GO 35017
35138: POP
35139: POP
// result := array ;
35140: LD_ADDR_VAR 0 5
35144: PUSH
35145: LD_VAR 0 1
35149: ST_TO_ADDR
// end ;
35150: LD_VAR 0 5
35154: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35155: LD_INT 0
35157: PPUSH
35158: PPUSH
// result := 0 ;
35159: LD_ADDR_VAR 0 3
35163: PUSH
35164: LD_INT 0
35166: ST_TO_ADDR
// if not array or not value in array then
35167: LD_VAR 0 1
35171: NOT
35172: IFTRUE 35187
35174: PUSH
35175: LD_VAR 0 2
35179: PUSH
35180: LD_VAR 0 1
35184: IN
35185: NOT
35186: OR
35187: IFFALSE 35191
// exit ;
35189: GO 35245
// for i = 1 to array do
35191: LD_ADDR_VAR 0 4
35195: PUSH
35196: DOUBLE
35197: LD_INT 1
35199: DEC
35200: ST_TO_ADDR
35201: LD_VAR 0 1
35205: PUSH
35206: FOR_TO
35207: IFFALSE 35243
// if value = array [ i ] then
35209: LD_VAR 0 2
35213: PUSH
35214: LD_VAR 0 1
35218: PUSH
35219: LD_VAR 0 4
35223: ARRAY
35224: EQUAL
35225: IFFALSE 35241
// begin result := i ;
35227: LD_ADDR_VAR 0 3
35231: PUSH
35232: LD_VAR 0 4
35236: ST_TO_ADDR
// exit ;
35237: POP
35238: POP
35239: GO 35245
// end ;
35241: GO 35206
35243: POP
35244: POP
// end ;
35245: LD_VAR 0 3
35249: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35250: LD_INT 0
35252: PPUSH
// vc_chassis := chassis ;
35253: LD_ADDR_OWVAR 37
35257: PUSH
35258: LD_VAR 0 1
35262: ST_TO_ADDR
// vc_engine := engine ;
35263: LD_ADDR_OWVAR 39
35267: PUSH
35268: LD_VAR 0 2
35272: ST_TO_ADDR
// vc_control := control ;
35273: LD_ADDR_OWVAR 38
35277: PUSH
35278: LD_VAR 0 3
35282: ST_TO_ADDR
// vc_weapon := weapon ;
35283: LD_ADDR_OWVAR 40
35287: PUSH
35288: LD_VAR 0 4
35292: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35293: LD_ADDR_OWVAR 41
35297: PUSH
35298: LD_VAR 0 5
35302: ST_TO_ADDR
// end ;
35303: LD_VAR 0 6
35307: RET
// export function WantPlant ( unit ) ; var task ; begin
35308: LD_INT 0
35310: PPUSH
35311: PPUSH
// result := false ;
35312: LD_ADDR_VAR 0 2
35316: PUSH
35317: LD_INT 0
35319: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35320: LD_ADDR_VAR 0 3
35324: PUSH
35325: LD_VAR 0 1
35329: PPUSH
35330: CALL_OW 437
35334: ST_TO_ADDR
// if task then
35335: LD_VAR 0 3
35339: IFFALSE 35367
// if task [ 1 ] [ 1 ] = p then
35341: LD_VAR 0 3
35345: PUSH
35346: LD_INT 1
35348: ARRAY
35349: PUSH
35350: LD_INT 1
35352: ARRAY
35353: PUSH
35354: LD_STRING p
35356: EQUAL
35357: IFFALSE 35367
// result := true ;
35359: LD_ADDR_VAR 0 2
35363: PUSH
35364: LD_INT 1
35366: ST_TO_ADDR
// end ;
35367: LD_VAR 0 2
35371: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35372: LD_INT 0
35374: PPUSH
35375: PPUSH
35376: PPUSH
35377: PPUSH
// if pos < 1 then
35378: LD_VAR 0 2
35382: PUSH
35383: LD_INT 1
35385: LESS
35386: IFFALSE 35390
// exit ;
35388: GO 35693
// if pos = 1 then
35390: LD_VAR 0 2
35394: PUSH
35395: LD_INT 1
35397: EQUAL
35398: IFFALSE 35431
// result := Replace ( arr , pos [ 1 ] , value ) else
35400: LD_ADDR_VAR 0 4
35404: PUSH
35405: LD_VAR 0 1
35409: PPUSH
35410: LD_VAR 0 2
35414: PUSH
35415: LD_INT 1
35417: ARRAY
35418: PPUSH
35419: LD_VAR 0 3
35423: PPUSH
35424: CALL_OW 1
35428: ST_TO_ADDR
35429: GO 35693
// begin tmp := arr ;
35431: LD_ADDR_VAR 0 6
35435: PUSH
35436: LD_VAR 0 1
35440: ST_TO_ADDR
// s_arr := [ tmp ] ;
35441: LD_ADDR_VAR 0 7
35445: PUSH
35446: LD_VAR 0 6
35450: PUSH
35451: EMPTY
35452: LIST
35453: ST_TO_ADDR
// for i = 1 to pos - 1 do
35454: LD_ADDR_VAR 0 5
35458: PUSH
35459: DOUBLE
35460: LD_INT 1
35462: DEC
35463: ST_TO_ADDR
35464: LD_VAR 0 2
35468: PUSH
35469: LD_INT 1
35471: MINUS
35472: PUSH
35473: FOR_TO
35474: IFFALSE 35519
// begin tmp := tmp [ pos [ i ] ] ;
35476: LD_ADDR_VAR 0 6
35480: PUSH
35481: LD_VAR 0 6
35485: PUSH
35486: LD_VAR 0 2
35490: PUSH
35491: LD_VAR 0 5
35495: ARRAY
35496: ARRAY
35497: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35498: LD_ADDR_VAR 0 7
35502: PUSH
35503: LD_VAR 0 7
35507: PUSH
35508: LD_VAR 0 6
35512: PUSH
35513: EMPTY
35514: LIST
35515: ADD
35516: ST_TO_ADDR
// end ;
35517: GO 35473
35519: POP
35520: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35521: LD_ADDR_VAR 0 6
35525: PUSH
35526: LD_VAR 0 6
35530: PPUSH
35531: LD_VAR 0 2
35535: PUSH
35536: LD_VAR 0 2
35540: ARRAY
35541: PPUSH
35542: LD_VAR 0 3
35546: PPUSH
35547: CALL_OW 1
35551: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35552: LD_ADDR_VAR 0 7
35556: PUSH
35557: LD_VAR 0 7
35561: PPUSH
35562: LD_VAR 0 7
35566: PPUSH
35567: LD_VAR 0 6
35571: PPUSH
35572: CALL_OW 1
35576: ST_TO_ADDR
// for i = s_arr downto 2 do
35577: LD_ADDR_VAR 0 5
35581: PUSH
35582: DOUBLE
35583: LD_VAR 0 7
35587: INC
35588: ST_TO_ADDR
35589: LD_INT 2
35591: PUSH
35592: FOR_DOWNTO
35593: IFFALSE 35677
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35595: LD_ADDR_VAR 0 6
35599: PUSH
35600: LD_VAR 0 7
35604: PUSH
35605: LD_VAR 0 5
35609: PUSH
35610: LD_INT 1
35612: MINUS
35613: ARRAY
35614: PPUSH
35615: LD_VAR 0 2
35619: PUSH
35620: LD_VAR 0 5
35624: PUSH
35625: LD_INT 1
35627: MINUS
35628: ARRAY
35629: PPUSH
35630: LD_VAR 0 7
35634: PUSH
35635: LD_VAR 0 5
35639: ARRAY
35640: PPUSH
35641: CALL_OW 1
35645: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35646: LD_ADDR_VAR 0 7
35650: PUSH
35651: LD_VAR 0 7
35655: PPUSH
35656: LD_VAR 0 5
35660: PUSH
35661: LD_INT 1
35663: MINUS
35664: PPUSH
35665: LD_VAR 0 6
35669: PPUSH
35670: CALL_OW 1
35674: ST_TO_ADDR
// end ;
35675: GO 35592
35677: POP
35678: POP
// result := s_arr [ 1 ] ;
35679: LD_ADDR_VAR 0 4
35683: PUSH
35684: LD_VAR 0 7
35688: PUSH
35689: LD_INT 1
35691: ARRAY
35692: ST_TO_ADDR
// end ; end ;
35693: LD_VAR 0 4
35697: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35698: LD_INT 0
35700: PPUSH
35701: PPUSH
// if not list then
35702: LD_VAR 0 1
35706: NOT
35707: IFFALSE 35711
// exit ;
35709: GO 35802
// i := list [ pos1 ] ;
35711: LD_ADDR_VAR 0 5
35715: PUSH
35716: LD_VAR 0 1
35720: PUSH
35721: LD_VAR 0 2
35725: ARRAY
35726: ST_TO_ADDR
// if not i then
35727: LD_VAR 0 5
35731: NOT
35732: IFFALSE 35736
// exit ;
35734: GO 35802
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35736: LD_ADDR_VAR 0 1
35740: PUSH
35741: LD_VAR 0 1
35745: PPUSH
35746: LD_VAR 0 2
35750: PPUSH
35751: LD_VAR 0 1
35755: PUSH
35756: LD_VAR 0 3
35760: ARRAY
35761: PPUSH
35762: CALL_OW 1
35766: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35767: LD_ADDR_VAR 0 1
35771: PUSH
35772: LD_VAR 0 1
35776: PPUSH
35777: LD_VAR 0 3
35781: PPUSH
35782: LD_VAR 0 5
35786: PPUSH
35787: CALL_OW 1
35791: ST_TO_ADDR
// result := list ;
35792: LD_ADDR_VAR 0 4
35796: PUSH
35797: LD_VAR 0 1
35801: ST_TO_ADDR
// end ;
35802: LD_VAR 0 4
35806: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35807: LD_INT 0
35809: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35810: LD_ADDR_VAR 0 5
35814: PUSH
35815: LD_VAR 0 1
35819: PPUSH
35820: CALL_OW 250
35824: PPUSH
35825: LD_VAR 0 1
35829: PPUSH
35830: CALL_OW 251
35834: PPUSH
35835: LD_VAR 0 2
35839: PPUSH
35840: LD_VAR 0 3
35844: PPUSH
35845: LD_VAR 0 4
35849: PPUSH
35850: CALL 36232 0 5
35854: ST_TO_ADDR
// end ;
35855: LD_VAR 0 5
35859: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35860: LD_INT 0
35862: PPUSH
35863: PPUSH
35864: PPUSH
35865: PPUSH
// if not list or not unit then
35866: LD_VAR 0 2
35870: NOT
35871: IFTRUE 35880
35873: PUSH
35874: LD_VAR 0 1
35878: NOT
35879: OR
35880: IFFALSE 35884
// exit ;
35882: GO 36227
// result := [ ] ;
35884: LD_ADDR_VAR 0 5
35888: PUSH
35889: EMPTY
35890: ST_TO_ADDR
// for i in list do
35891: LD_ADDR_VAR 0 6
35895: PUSH
35896: LD_VAR 0 2
35900: PUSH
35901: FOR_IN
35902: IFFALSE 36120
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35904: LD_ADDR_VAR 0 8
35908: PUSH
35909: LD_VAR 0 1
35913: PPUSH
35914: LD_VAR 0 6
35918: PUSH
35919: LD_INT 1
35921: ARRAY
35922: PPUSH
35923: LD_VAR 0 6
35927: PUSH
35928: LD_INT 2
35930: ARRAY
35931: PPUSH
35932: CALL_OW 297
35936: ST_TO_ADDR
// if not Count ( result ) then
35937: LD_VAR 0 5
35941: PPUSH
35942: CALL 32454 0 1
35946: NOT
35947: IFFALSE 35980
// begin result := Join ( result , [ i , tmp ] ) ;
35949: LD_ADDR_VAR 0 5
35953: PUSH
35954: LD_VAR 0 5
35958: PPUSH
35959: LD_VAR 0 6
35963: PUSH
35964: LD_VAR 0 8
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PPUSH
35973: CALL 68430 0 2
35977: ST_TO_ADDR
// continue ;
35978: GO 35901
// end ; if result [ result ] [ 2 ] <= tmp then
35980: LD_VAR 0 5
35984: PUSH
35985: LD_VAR 0 5
35989: ARRAY
35990: PUSH
35991: LD_INT 2
35993: ARRAY
35994: PUSH
35995: LD_VAR 0 8
35999: LESSEQUAL
36000: IFFALSE 36033
// result := Join ( result , [ i , tmp ] ) else
36002: LD_ADDR_VAR 0 5
36006: PUSH
36007: LD_VAR 0 5
36011: PPUSH
36012: LD_VAR 0 6
36016: PUSH
36017: LD_VAR 0 8
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PPUSH
36026: CALL 68430 0 2
36030: ST_TO_ADDR
36031: GO 36118
// begin for j := 1 to Count ( result ) do
36033: LD_ADDR_VAR 0 7
36037: PUSH
36038: DOUBLE
36039: LD_INT 1
36041: DEC
36042: ST_TO_ADDR
36043: LD_VAR 0 5
36047: PPUSH
36048: CALL 32454 0 1
36052: PUSH
36053: FOR_TO
36054: IFFALSE 36116
// begin if tmp < result [ j ] [ 2 ] then
36056: LD_VAR 0 8
36060: PUSH
36061: LD_VAR 0 5
36065: PUSH
36066: LD_VAR 0 7
36070: ARRAY
36071: PUSH
36072: LD_INT 2
36074: ARRAY
36075: LESS
36076: IFFALSE 36114
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36078: LD_ADDR_VAR 0 5
36082: PUSH
36083: LD_VAR 0 5
36087: PPUSH
36088: LD_VAR 0 7
36092: PPUSH
36093: LD_VAR 0 6
36097: PUSH
36098: LD_VAR 0 8
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PPUSH
36107: CALL_OW 2
36111: ST_TO_ADDR
// break ;
36112: GO 36116
// end ; end ;
36114: GO 36053
36116: POP
36117: POP
// end ; end ;
36118: GO 35901
36120: POP
36121: POP
// if result and not asc then
36122: LD_VAR 0 5
36126: IFFALSE 36135
36128: PUSH
36129: LD_VAR 0 3
36133: NOT
36134: AND
36135: IFFALSE 36152
// result := ReverseArray ( result ) ;
36137: LD_ADDR_VAR 0 5
36141: PUSH
36142: LD_VAR 0 5
36146: PPUSH
36147: CALL 63510 0 1
36151: ST_TO_ADDR
// tmp := [ ] ;
36152: LD_ADDR_VAR 0 8
36156: PUSH
36157: EMPTY
36158: ST_TO_ADDR
// if mode then
36159: LD_VAR 0 4
36163: IFFALSE 36227
// begin for i := 1 to result do
36165: LD_ADDR_VAR 0 6
36169: PUSH
36170: DOUBLE
36171: LD_INT 1
36173: DEC
36174: ST_TO_ADDR
36175: LD_VAR 0 5
36179: PUSH
36180: FOR_TO
36181: IFFALSE 36215
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36183: LD_ADDR_VAR 0 8
36187: PUSH
36188: LD_VAR 0 8
36192: PPUSH
36193: LD_VAR 0 5
36197: PUSH
36198: LD_VAR 0 6
36202: ARRAY
36203: PUSH
36204: LD_INT 1
36206: ARRAY
36207: PPUSH
36208: CALL 68430 0 2
36212: ST_TO_ADDR
36213: GO 36180
36215: POP
36216: POP
// result := tmp ;
36217: LD_ADDR_VAR 0 5
36221: PUSH
36222: LD_VAR 0 8
36226: ST_TO_ADDR
// end ; end ;
36227: LD_VAR 0 5
36231: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36232: LD_INT 0
36234: PPUSH
36235: PPUSH
36236: PPUSH
36237: PPUSH
// if not list then
36238: LD_VAR 0 3
36242: NOT
36243: IFFALSE 36247
// exit ;
36245: GO 36637
// result := [ ] ;
36247: LD_ADDR_VAR 0 6
36251: PUSH
36252: EMPTY
36253: ST_TO_ADDR
// for i in list do
36254: LD_ADDR_VAR 0 7
36258: PUSH
36259: LD_VAR 0 3
36263: PUSH
36264: FOR_IN
36265: IFFALSE 36467
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36267: LD_ADDR_VAR 0 9
36271: PUSH
36272: LD_VAR 0 7
36276: PPUSH
36277: LD_VAR 0 1
36281: PPUSH
36282: LD_VAR 0 2
36286: PPUSH
36287: CALL_OW 297
36291: ST_TO_ADDR
// if not result then
36292: LD_VAR 0 6
36296: NOT
36297: IFFALSE 36323
// result := [ [ i , tmp ] ] else
36299: LD_ADDR_VAR 0 6
36303: PUSH
36304: LD_VAR 0 7
36308: PUSH
36309: LD_VAR 0 9
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: EMPTY
36319: LIST
36320: ST_TO_ADDR
36321: GO 36465
// begin if result [ result ] [ 2 ] <= tmp then
36323: LD_VAR 0 6
36327: PUSH
36328: LD_VAR 0 6
36332: ARRAY
36333: PUSH
36334: LD_INT 2
36336: ARRAY
36337: PUSH
36338: LD_VAR 0 9
36342: LESSEQUAL
36343: IFFALSE 36385
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36345: LD_ADDR_VAR 0 6
36349: PUSH
36350: LD_VAR 0 6
36354: PPUSH
36355: LD_VAR 0 6
36359: PUSH
36360: LD_INT 1
36362: PLUS
36363: PPUSH
36364: LD_VAR 0 7
36368: PUSH
36369: LD_VAR 0 9
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PPUSH
36378: CALL_OW 2
36382: ST_TO_ADDR
36383: GO 36465
// for j := 1 to result do
36385: LD_ADDR_VAR 0 8
36389: PUSH
36390: DOUBLE
36391: LD_INT 1
36393: DEC
36394: ST_TO_ADDR
36395: LD_VAR 0 6
36399: PUSH
36400: FOR_TO
36401: IFFALSE 36463
// begin if tmp < result [ j ] [ 2 ] then
36403: LD_VAR 0 9
36407: PUSH
36408: LD_VAR 0 6
36412: PUSH
36413: LD_VAR 0 8
36417: ARRAY
36418: PUSH
36419: LD_INT 2
36421: ARRAY
36422: LESS
36423: IFFALSE 36461
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36425: LD_ADDR_VAR 0 6
36429: PUSH
36430: LD_VAR 0 6
36434: PPUSH
36435: LD_VAR 0 8
36439: PPUSH
36440: LD_VAR 0 7
36444: PUSH
36445: LD_VAR 0 9
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PPUSH
36454: CALL_OW 2
36458: ST_TO_ADDR
// break ;
36459: GO 36463
// end ; end ;
36461: GO 36400
36463: POP
36464: POP
// end ; end ;
36465: GO 36264
36467: POP
36468: POP
// if result and not asc then
36469: LD_VAR 0 6
36473: IFFALSE 36482
36475: PUSH
36476: LD_VAR 0 4
36480: NOT
36481: AND
36482: IFFALSE 36557
// begin tmp := result ;
36484: LD_ADDR_VAR 0 9
36488: PUSH
36489: LD_VAR 0 6
36493: ST_TO_ADDR
// for i = tmp downto 1 do
36494: LD_ADDR_VAR 0 7
36498: PUSH
36499: DOUBLE
36500: LD_VAR 0 9
36504: INC
36505: ST_TO_ADDR
36506: LD_INT 1
36508: PUSH
36509: FOR_DOWNTO
36510: IFFALSE 36555
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36512: LD_ADDR_VAR 0 6
36516: PUSH
36517: LD_VAR 0 6
36521: PPUSH
36522: LD_VAR 0 9
36526: PUSH
36527: LD_VAR 0 7
36531: MINUS
36532: PUSH
36533: LD_INT 1
36535: PLUS
36536: PPUSH
36537: LD_VAR 0 9
36541: PUSH
36542: LD_VAR 0 7
36546: ARRAY
36547: PPUSH
36548: CALL_OW 1
36552: ST_TO_ADDR
36553: GO 36509
36555: POP
36556: POP
// end ; tmp := [ ] ;
36557: LD_ADDR_VAR 0 9
36561: PUSH
36562: EMPTY
36563: ST_TO_ADDR
// if mode then
36564: LD_VAR 0 5
36568: IFFALSE 36637
// begin for i = 1 to result do
36570: LD_ADDR_VAR 0 7
36574: PUSH
36575: DOUBLE
36576: LD_INT 1
36578: DEC
36579: ST_TO_ADDR
36580: LD_VAR 0 6
36584: PUSH
36585: FOR_TO
36586: IFFALSE 36625
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36588: LD_ADDR_VAR 0 9
36592: PUSH
36593: LD_VAR 0 9
36597: PPUSH
36598: LD_VAR 0 7
36602: PPUSH
36603: LD_VAR 0 6
36607: PUSH
36608: LD_VAR 0 7
36612: ARRAY
36613: PUSH
36614: LD_INT 1
36616: ARRAY
36617: PPUSH
36618: CALL_OW 1
36622: ST_TO_ADDR
36623: GO 36585
36625: POP
36626: POP
// result := tmp ;
36627: LD_ADDR_VAR 0 6
36631: PUSH
36632: LD_VAR 0 9
36636: ST_TO_ADDR
// end ; end ;
36637: LD_VAR 0 6
36641: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36642: LD_INT 0
36644: PPUSH
36645: PPUSH
36646: PPUSH
36647: PPUSH
36648: PPUSH
36649: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36650: LD_ADDR_VAR 0 5
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: EMPTY
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: ST_TO_ADDR
// if not x or not y then
36672: LD_VAR 0 2
36676: NOT
36677: IFTRUE 36686
36679: PUSH
36680: LD_VAR 0 3
36684: NOT
36685: OR
36686: IFFALSE 36690
// exit ;
36688: GO 38346
// if not range then
36690: LD_VAR 0 4
36694: NOT
36695: IFFALSE 36705
// range := 10 ;
36697: LD_ADDR_VAR 0 4
36701: PUSH
36702: LD_INT 10
36704: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36705: LD_ADDR_VAR 0 8
36709: PUSH
36710: LD_INT 81
36712: PUSH
36713: LD_VAR 0 1
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 92
36724: PUSH
36725: LD_VAR 0 2
36729: PUSH
36730: LD_VAR 0 3
36734: PUSH
36735: LD_VAR 0 4
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 3
36748: PUSH
36749: LD_INT 21
36751: PUSH
36752: LD_INT 3
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: LIST
36767: PPUSH
36768: CALL_OW 69
36772: ST_TO_ADDR
// if not tmp then
36773: LD_VAR 0 8
36777: NOT
36778: IFFALSE 36782
// exit ;
36780: GO 38346
// for i in tmp do
36782: LD_ADDR_VAR 0 6
36786: PUSH
36787: LD_VAR 0 8
36791: PUSH
36792: FOR_IN
36793: IFFALSE 38321
// begin points := [ 0 , 0 , 0 ] ;
36795: LD_ADDR_VAR 0 9
36799: PUSH
36800: LD_INT 0
36802: PUSH
36803: LD_INT 0
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: LIST
36813: ST_TO_ADDR
// bpoints := 1 ;
36814: LD_ADDR_VAR 0 10
36818: PUSH
36819: LD_INT 1
36821: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36822: LD_VAR 0 6
36826: PPUSH
36827: CALL_OW 247
36831: PUSH
36832: LD_INT 1
36834: DOUBLE
36835: EQUAL
36836: IFTRUE 36840
36838: GO 37422
36840: POP
// begin if GetClass ( i ) = 1 then
36841: LD_VAR 0 6
36845: PPUSH
36846: CALL_OW 257
36850: PUSH
36851: LD_INT 1
36853: EQUAL
36854: IFFALSE 36875
// points := [ 10 , 5 , 3 ] ;
36856: LD_ADDR_VAR 0 9
36860: PUSH
36861: LD_INT 10
36863: PUSH
36864: LD_INT 5
36866: PUSH
36867: LD_INT 3
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: LIST
36874: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36875: LD_VAR 0 6
36879: PPUSH
36880: CALL_OW 257
36884: PUSH
36885: LD_INT 2
36887: PUSH
36888: LD_INT 3
36890: PUSH
36891: LD_INT 4
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: LIST
36898: IN
36899: IFFALSE 36920
// points := [ 3 , 2 , 1 ] ;
36901: LD_ADDR_VAR 0 9
36905: PUSH
36906: LD_INT 3
36908: PUSH
36909: LD_INT 2
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: LIST
36919: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36920: LD_VAR 0 6
36924: PPUSH
36925: CALL_OW 257
36929: PUSH
36930: LD_INT 5
36932: EQUAL
36933: IFFALSE 36954
// points := [ 130 , 5 , 2 ] ;
36935: LD_ADDR_VAR 0 9
36939: PUSH
36940: LD_INT 130
36942: PUSH
36943: LD_INT 5
36945: PUSH
36946: LD_INT 2
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: LIST
36953: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36954: LD_VAR 0 6
36958: PPUSH
36959: CALL_OW 257
36963: PUSH
36964: LD_INT 8
36966: EQUAL
36967: IFFALSE 36988
// points := [ 35 , 35 , 30 ] ;
36969: LD_ADDR_VAR 0 9
36973: PUSH
36974: LD_INT 35
36976: PUSH
36977: LD_INT 35
36979: PUSH
36980: LD_INT 30
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: LIST
36987: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36988: LD_VAR 0 6
36992: PPUSH
36993: CALL_OW 257
36997: PUSH
36998: LD_INT 9
37000: EQUAL
37001: IFFALSE 37022
// points := [ 20 , 55 , 40 ] ;
37003: LD_ADDR_VAR 0 9
37007: PUSH
37008: LD_INT 20
37010: PUSH
37011: LD_INT 55
37013: PUSH
37014: LD_INT 40
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37022: LD_VAR 0 6
37026: PPUSH
37027: CALL_OW 257
37031: PUSH
37032: LD_INT 12
37034: PUSH
37035: LD_INT 16
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: IN
37042: IFFALSE 37063
// points := [ 5 , 3 , 2 ] ;
37044: LD_ADDR_VAR 0 9
37048: PUSH
37049: LD_INT 5
37051: PUSH
37052: LD_INT 3
37054: PUSH
37055: LD_INT 2
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: LIST
37062: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37063: LD_VAR 0 6
37067: PPUSH
37068: CALL_OW 257
37072: PUSH
37073: LD_INT 17
37075: EQUAL
37076: IFFALSE 37097
// points := [ 100 , 50 , 75 ] ;
37078: LD_ADDR_VAR 0 9
37082: PUSH
37083: LD_INT 100
37085: PUSH
37086: LD_INT 50
37088: PUSH
37089: LD_INT 75
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: LIST
37096: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37097: LD_VAR 0 6
37101: PPUSH
37102: CALL_OW 257
37106: PUSH
37107: LD_INT 15
37109: EQUAL
37110: IFFALSE 37131
// points := [ 10 , 5 , 3 ] ;
37112: LD_ADDR_VAR 0 9
37116: PUSH
37117: LD_INT 10
37119: PUSH
37120: LD_INT 5
37122: PUSH
37123: LD_INT 3
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: LIST
37130: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37131: LD_VAR 0 6
37135: PPUSH
37136: CALL_OW 257
37140: PUSH
37141: LD_INT 14
37143: EQUAL
37144: IFFALSE 37165
// points := [ 10 , 0 , 0 ] ;
37146: LD_ADDR_VAR 0 9
37150: PUSH
37151: LD_INT 10
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: LIST
37164: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37165: LD_VAR 0 6
37169: PPUSH
37170: CALL_OW 257
37174: PUSH
37175: LD_INT 11
37177: EQUAL
37178: IFFALSE 37199
// points := [ 30 , 10 , 5 ] ;
37180: LD_ADDR_VAR 0 9
37184: PUSH
37185: LD_INT 30
37187: PUSH
37188: LD_INT 10
37190: PUSH
37191: LD_INT 5
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: LIST
37198: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37199: LD_VAR 0 1
37203: PPUSH
37204: LD_INT 5
37206: PPUSH
37207: CALL_OW 321
37211: PUSH
37212: LD_INT 2
37214: EQUAL
37215: IFFALSE 37232
// bpoints := bpoints * 1.8 ;
37217: LD_ADDR_VAR 0 10
37221: PUSH
37222: LD_VAR 0 10
37226: PUSH
37227: LD_REAL  1.80000000000000E+0000
37230: MUL
37231: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37232: LD_VAR 0 6
37236: PPUSH
37237: CALL_OW 257
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: LD_INT 2
37247: PUSH
37248: LD_INT 3
37250: PUSH
37251: LD_INT 4
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: IN
37260: IFFALSE 37280
37262: PUSH
37263: LD_VAR 0 1
37267: PPUSH
37268: LD_INT 51
37270: PPUSH
37271: CALL_OW 321
37275: PUSH
37276: LD_INT 2
37278: EQUAL
37279: AND
37280: IFFALSE 37297
// bpoints := bpoints * 1.2 ;
37282: LD_ADDR_VAR 0 10
37286: PUSH
37287: LD_VAR 0 10
37291: PUSH
37292: LD_REAL  1.20000000000000E+0000
37295: MUL
37296: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37297: LD_VAR 0 6
37301: PPUSH
37302: CALL_OW 257
37306: PUSH
37307: LD_INT 5
37309: PUSH
37310: LD_INT 7
37312: PUSH
37313: LD_INT 9
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: LIST
37320: IN
37321: IFFALSE 37341
37323: PUSH
37324: LD_VAR 0 1
37328: PPUSH
37329: LD_INT 52
37331: PPUSH
37332: CALL_OW 321
37336: PUSH
37337: LD_INT 2
37339: EQUAL
37340: AND
37341: IFFALSE 37358
// bpoints := bpoints * 1.5 ;
37343: LD_ADDR_VAR 0 10
37347: PUSH
37348: LD_VAR 0 10
37352: PUSH
37353: LD_REAL  1.50000000000000E+0000
37356: MUL
37357: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37358: LD_VAR 0 1
37362: PPUSH
37363: LD_INT 66
37365: PPUSH
37366: CALL_OW 321
37370: PUSH
37371: LD_INT 2
37373: EQUAL
37374: IFFALSE 37391
// bpoints := bpoints * 1.1 ;
37376: LD_ADDR_VAR 0 10
37380: PUSH
37381: LD_VAR 0 10
37385: PUSH
37386: LD_REAL  1.10000000000000E+0000
37389: MUL
37390: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37391: LD_ADDR_VAR 0 10
37395: PUSH
37396: LD_VAR 0 10
37400: PUSH
37401: LD_VAR 0 6
37405: PPUSH
37406: LD_INT 1
37408: PPUSH
37409: CALL_OW 259
37413: PUSH
37414: LD_REAL  1.15000000000000E+0000
37417: MUL
37418: MUL
37419: ST_TO_ADDR
// end ; unit_vehicle :
37420: GO 38250
37422: LD_INT 2
37424: DOUBLE
37425: EQUAL
37426: IFTRUE 37430
37428: GO 38238
37430: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37431: LD_VAR 0 6
37435: PPUSH
37436: CALL_OW 264
37440: PUSH
37441: LD_INT 2
37443: PUSH
37444: LD_INT 42
37446: PUSH
37447: LD_INT 24
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: LIST
37454: IN
37455: IFFALSE 37476
// points := [ 25 , 5 , 3 ] ;
37457: LD_ADDR_VAR 0 9
37461: PUSH
37462: LD_INT 25
37464: PUSH
37465: LD_INT 5
37467: PUSH
37468: LD_INT 3
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: LIST
37475: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37476: LD_VAR 0 6
37480: PPUSH
37481: CALL_OW 264
37485: PUSH
37486: LD_INT 4
37488: PUSH
37489: LD_INT 43
37491: PUSH
37492: LD_INT 25
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: LIST
37499: IN
37500: IFFALSE 37521
// points := [ 40 , 15 , 5 ] ;
37502: LD_ADDR_VAR 0 9
37506: PUSH
37507: LD_INT 40
37509: PUSH
37510: LD_INT 15
37512: PUSH
37513: LD_INT 5
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37521: LD_VAR 0 6
37525: PPUSH
37526: CALL_OW 264
37530: PUSH
37531: LD_INT 3
37533: PUSH
37534: LD_INT 23
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: IN
37541: IFFALSE 37562
// points := [ 7 , 25 , 8 ] ;
37543: LD_ADDR_VAR 0 9
37547: PUSH
37548: LD_INT 7
37550: PUSH
37551: LD_INT 25
37553: PUSH
37554: LD_INT 8
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: LIST
37561: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37562: LD_VAR 0 6
37566: PPUSH
37567: CALL_OW 264
37571: PUSH
37572: LD_INT 5
37574: PUSH
37575: LD_INT 27
37577: PUSH
37578: LD_INT 44
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: LIST
37585: IN
37586: IFFALSE 37607
// points := [ 14 , 50 , 16 ] ;
37588: LD_ADDR_VAR 0 9
37592: PUSH
37593: LD_INT 14
37595: PUSH
37596: LD_INT 50
37598: PUSH
37599: LD_INT 16
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: LIST
37606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37607: LD_VAR 0 6
37611: PPUSH
37612: CALL_OW 264
37616: PUSH
37617: LD_INT 6
37619: PUSH
37620: LD_INT 46
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: IN
37627: IFFALSE 37648
// points := [ 32 , 120 , 70 ] ;
37629: LD_ADDR_VAR 0 9
37633: PUSH
37634: LD_INT 32
37636: PUSH
37637: LD_INT 120
37639: PUSH
37640: LD_INT 70
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: LIST
37647: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37648: LD_VAR 0 6
37652: PPUSH
37653: CALL_OW 264
37657: PUSH
37658: LD_INT 7
37660: PUSH
37661: LD_INT 28
37663: PUSH
37664: LD_INT 45
37666: PUSH
37667: LD_INT 92
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: IN
37676: IFFALSE 37697
// points := [ 35 , 20 , 45 ] ;
37678: LD_ADDR_VAR 0 9
37682: PUSH
37683: LD_INT 35
37685: PUSH
37686: LD_INT 20
37688: PUSH
37689: LD_INT 45
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: LIST
37696: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37697: LD_VAR 0 6
37701: PPUSH
37702: CALL_OW 264
37706: PUSH
37707: LD_INT 47
37709: PUSH
37710: EMPTY
37711: LIST
37712: IN
37713: IFFALSE 37734
// points := [ 67 , 45 , 75 ] ;
37715: LD_ADDR_VAR 0 9
37719: PUSH
37720: LD_INT 67
37722: PUSH
37723: LD_INT 45
37725: PUSH
37726: LD_INT 75
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: LIST
37733: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37734: LD_VAR 0 6
37738: PPUSH
37739: CALL_OW 264
37743: PUSH
37744: LD_INT 26
37746: PUSH
37747: EMPTY
37748: LIST
37749: IN
37750: IFFALSE 37771
// points := [ 120 , 30 , 80 ] ;
37752: LD_ADDR_VAR 0 9
37756: PUSH
37757: LD_INT 120
37759: PUSH
37760: LD_INT 30
37762: PUSH
37763: LD_INT 80
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37771: LD_VAR 0 6
37775: PPUSH
37776: CALL_OW 264
37780: PUSH
37781: LD_INT 22
37783: PUSH
37784: EMPTY
37785: LIST
37786: IN
37787: IFFALSE 37808
// points := [ 40 , 1 , 1 ] ;
37789: LD_ADDR_VAR 0 9
37793: PUSH
37794: LD_INT 40
37796: PUSH
37797: LD_INT 1
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: LIST
37807: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37808: LD_VAR 0 6
37812: PPUSH
37813: CALL_OW 264
37817: PUSH
37818: LD_INT 29
37820: PUSH
37821: EMPTY
37822: LIST
37823: IN
37824: IFFALSE 37845
// points := [ 70 , 200 , 400 ] ;
37826: LD_ADDR_VAR 0 9
37830: PUSH
37831: LD_INT 70
37833: PUSH
37834: LD_INT 200
37836: PUSH
37837: LD_INT 400
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: LIST
37844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37845: LD_VAR 0 6
37849: PPUSH
37850: CALL_OW 264
37854: PUSH
37855: LD_INT 14
37857: PUSH
37858: LD_INT 53
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: IN
37865: IFFALSE 37886
// points := [ 40 , 10 , 20 ] ;
37867: LD_ADDR_VAR 0 9
37871: PUSH
37872: LD_INT 40
37874: PUSH
37875: LD_INT 10
37877: PUSH
37878: LD_INT 20
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: LIST
37885: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37886: LD_VAR 0 6
37890: PPUSH
37891: CALL_OW 264
37895: PUSH
37896: LD_INT 9
37898: PUSH
37899: EMPTY
37900: LIST
37901: IN
37902: IFFALSE 37923
// points := [ 5 , 70 , 20 ] ;
37904: LD_ADDR_VAR 0 9
37908: PUSH
37909: LD_INT 5
37911: PUSH
37912: LD_INT 70
37914: PUSH
37915: LD_INT 20
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: LIST
37922: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37923: LD_VAR 0 6
37927: PPUSH
37928: CALL_OW 264
37932: PUSH
37933: LD_INT 10
37935: PUSH
37936: EMPTY
37937: LIST
37938: IN
37939: IFFALSE 37960
// points := [ 35 , 110 , 70 ] ;
37941: LD_ADDR_VAR 0 9
37945: PUSH
37946: LD_INT 35
37948: PUSH
37949: LD_INT 110
37951: PUSH
37952: LD_INT 70
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: LIST
37959: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37960: LD_VAR 0 6
37964: PPUSH
37965: CALL_OW 265
37969: PUSH
37970: LD_INT 25
37972: EQUAL
37973: IFFALSE 37994
// points := [ 80 , 65 , 100 ] ;
37975: LD_ADDR_VAR 0 9
37979: PUSH
37980: LD_INT 80
37982: PUSH
37983: LD_INT 65
37985: PUSH
37986: LD_INT 100
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: LIST
37993: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37994: LD_VAR 0 6
37998: PPUSH
37999: CALL_OW 263
38003: PUSH
38004: LD_INT 1
38006: EQUAL
38007: IFFALSE 38042
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38009: LD_ADDR_VAR 0 10
38013: PUSH
38014: LD_VAR 0 10
38018: PUSH
38019: LD_VAR 0 6
38023: PPUSH
38024: CALL_OW 311
38028: PPUSH
38029: LD_INT 3
38031: PPUSH
38032: CALL_OW 259
38036: PUSH
38037: LD_INT 4
38039: MUL
38040: MUL
38041: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38042: LD_VAR 0 6
38046: PPUSH
38047: CALL_OW 263
38051: PUSH
38052: LD_INT 2
38054: EQUAL
38055: IFFALSE 38106
// begin j := IsControledBy ( i ) ;
38057: LD_ADDR_VAR 0 7
38061: PUSH
38062: LD_VAR 0 6
38066: PPUSH
38067: CALL_OW 312
38071: ST_TO_ADDR
// if j then
38072: LD_VAR 0 7
38076: IFFALSE 38106
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38078: LD_ADDR_VAR 0 10
38082: PUSH
38083: LD_VAR 0 10
38087: PUSH
38088: LD_VAR 0 7
38092: PPUSH
38093: LD_INT 3
38095: PPUSH
38096: CALL_OW 259
38100: PUSH
38101: LD_INT 3
38103: MUL
38104: MUL
38105: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38106: LD_VAR 0 6
38110: PPUSH
38111: CALL_OW 264
38115: PUSH
38116: LD_INT 5
38118: PUSH
38119: LD_INT 6
38121: PUSH
38122: LD_INT 46
38124: PUSH
38125: LD_INT 44
38127: PUSH
38128: LD_INT 47
38130: PUSH
38131: LD_INT 45
38133: PUSH
38134: LD_INT 28
38136: PUSH
38137: LD_INT 7
38139: PUSH
38140: LD_INT 27
38142: PUSH
38143: LD_INT 29
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: IN
38158: IFFALSE 38178
38160: PUSH
38161: LD_VAR 0 1
38165: PPUSH
38166: LD_INT 52
38168: PPUSH
38169: CALL_OW 321
38173: PUSH
38174: LD_INT 2
38176: EQUAL
38177: AND
38178: IFFALSE 38195
// bpoints := bpoints * 1.2 ;
38180: LD_ADDR_VAR 0 10
38184: PUSH
38185: LD_VAR 0 10
38189: PUSH
38190: LD_REAL  1.20000000000000E+0000
38193: MUL
38194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38195: LD_VAR 0 6
38199: PPUSH
38200: CALL_OW 264
38204: PUSH
38205: LD_INT 6
38207: PUSH
38208: LD_INT 46
38210: PUSH
38211: LD_INT 47
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: LIST
38218: IN
38219: IFFALSE 38236
// bpoints := bpoints * 1.2 ;
38221: LD_ADDR_VAR 0 10
38225: PUSH
38226: LD_VAR 0 10
38230: PUSH
38231: LD_REAL  1.20000000000000E+0000
38234: MUL
38235: ST_TO_ADDR
// end ; unit_building :
38236: GO 38250
38238: LD_INT 3
38240: DOUBLE
38241: EQUAL
38242: IFTRUE 38246
38244: GO 38249
38246: POP
// ; end ;
38247: GO 38250
38249: POP
// for j = 1 to 3 do
38250: LD_ADDR_VAR 0 7
38254: PUSH
38255: DOUBLE
38256: LD_INT 1
38258: DEC
38259: ST_TO_ADDR
38260: LD_INT 3
38262: PUSH
38263: FOR_TO
38264: IFFALSE 38317
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38266: LD_ADDR_VAR 0 5
38270: PUSH
38271: LD_VAR 0 5
38275: PPUSH
38276: LD_VAR 0 7
38280: PPUSH
38281: LD_VAR 0 5
38285: PUSH
38286: LD_VAR 0 7
38290: ARRAY
38291: PUSH
38292: LD_VAR 0 9
38296: PUSH
38297: LD_VAR 0 7
38301: ARRAY
38302: PUSH
38303: LD_VAR 0 10
38307: MUL
38308: PLUS
38309: PPUSH
38310: CALL_OW 1
38314: ST_TO_ADDR
38315: GO 38263
38317: POP
38318: POP
// end ;
38319: GO 36792
38321: POP
38322: POP
// result := Replace ( result , 4 , tmp ) ;
38323: LD_ADDR_VAR 0 5
38327: PUSH
38328: LD_VAR 0 5
38332: PPUSH
38333: LD_INT 4
38335: PPUSH
38336: LD_VAR 0 8
38340: PPUSH
38341: CALL_OW 1
38345: ST_TO_ADDR
// end ;
38346: LD_VAR 0 5
38350: RET
// export function DangerAtRange ( unit , range ) ; begin
38351: LD_INT 0
38353: PPUSH
// if not unit then
38354: LD_VAR 0 1
38358: NOT
38359: IFFALSE 38363
// exit ;
38361: GO 38408
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38363: LD_ADDR_VAR 0 3
38367: PUSH
38368: LD_VAR 0 1
38372: PPUSH
38373: CALL_OW 255
38377: PPUSH
38378: LD_VAR 0 1
38382: PPUSH
38383: CALL_OW 250
38387: PPUSH
38388: LD_VAR 0 1
38392: PPUSH
38393: CALL_OW 251
38397: PPUSH
38398: LD_VAR 0 2
38402: PPUSH
38403: CALL 36642 0 4
38407: ST_TO_ADDR
// end ;
38408: LD_VAR 0 3
38412: RET
// export function DangerInArea ( side , area ) ; begin
38413: LD_INT 0
38415: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38416: LD_ADDR_VAR 0 3
38420: PUSH
38421: LD_VAR 0 2
38425: PPUSH
38426: LD_INT 81
38428: PUSH
38429: LD_VAR 0 1
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PPUSH
38438: CALL_OW 70
38442: ST_TO_ADDR
// end ;
38443: LD_VAR 0 3
38447: RET
// export function IsExtension ( b ) ; begin
38448: LD_INT 0
38450: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38451: LD_ADDR_VAR 0 2
38455: PUSH
38456: LD_VAR 0 1
38460: PUSH
38461: LD_INT 23
38463: PUSH
38464: LD_INT 20
38466: PUSH
38467: LD_INT 22
38469: PUSH
38470: LD_INT 17
38472: PUSH
38473: LD_INT 24
38475: PUSH
38476: LD_INT 21
38478: PUSH
38479: LD_INT 19
38481: PUSH
38482: LD_INT 16
38484: PUSH
38485: LD_INT 25
38487: PUSH
38488: LD_INT 18
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: IN
38503: ST_TO_ADDR
// end ;
38504: LD_VAR 0 2
38508: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38509: LD_INT 0
38511: PPUSH
38512: PPUSH
38513: PPUSH
// result := [ ] ;
38514: LD_ADDR_VAR 0 4
38518: PUSH
38519: EMPTY
38520: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38521: LD_ADDR_VAR 0 5
38525: PUSH
38526: LD_VAR 0 2
38530: PPUSH
38531: LD_INT 21
38533: PUSH
38534: LD_INT 3
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PPUSH
38541: CALL_OW 70
38545: ST_TO_ADDR
// if not tmp then
38546: LD_VAR 0 5
38550: NOT
38551: IFFALSE 38555
// exit ;
38553: GO 38619
// if checkLink then
38555: LD_VAR 0 3
38559: IFFALSE 38609
// begin for i in tmp do
38561: LD_ADDR_VAR 0 6
38565: PUSH
38566: LD_VAR 0 5
38570: PUSH
38571: FOR_IN
38572: IFFALSE 38607
// if GetBase ( i ) <> base then
38574: LD_VAR 0 6
38578: PPUSH
38579: CALL_OW 274
38583: PUSH
38584: LD_VAR 0 1
38588: NONEQUAL
38589: IFFALSE 38605
// ComLinkToBase ( base , i ) ;
38591: LD_VAR 0 1
38595: PPUSH
38596: LD_VAR 0 6
38600: PPUSH
38601: CALL_OW 169
38605: GO 38571
38607: POP
38608: POP
// end ; result := tmp ;
38609: LD_ADDR_VAR 0 4
38613: PUSH
38614: LD_VAR 0 5
38618: ST_TO_ADDR
// end ;
38619: LD_VAR 0 4
38623: RET
// export function ComComplete ( units , b ) ; var i ; begin
38624: LD_INT 0
38626: PPUSH
38627: PPUSH
// if not units then
38628: LD_VAR 0 1
38632: NOT
38633: IFFALSE 38637
// exit ;
38635: GO 38727
// for i in units do
38637: LD_ADDR_VAR 0 4
38641: PUSH
38642: LD_VAR 0 1
38646: PUSH
38647: FOR_IN
38648: IFFALSE 38725
// if BuildingStatus ( b ) = bs_build then
38650: LD_VAR 0 2
38654: PPUSH
38655: CALL_OW 461
38659: PUSH
38660: LD_INT 1
38662: EQUAL
38663: IFFALSE 38723
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38665: LD_VAR 0 4
38669: PPUSH
38670: LD_STRING h
38672: PUSH
38673: LD_VAR 0 2
38677: PPUSH
38678: CALL_OW 250
38682: PUSH
38683: LD_VAR 0 2
38687: PPUSH
38688: CALL_OW 251
38692: PUSH
38693: LD_VAR 0 2
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: LD_INT 0
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: PUSH
38716: EMPTY
38717: LIST
38718: PPUSH
38719: CALL_OW 446
38723: GO 38647
38725: POP
38726: POP
// end ;
38727: LD_VAR 0 3
38731: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38732: LD_INT 0
38734: PPUSH
38735: PPUSH
38736: PPUSH
38737: PPUSH
38738: PPUSH
38739: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38740: LD_VAR 0 1
38744: NOT
38745: IFTRUE 38762
38747: PUSH
38748: LD_VAR 0 1
38752: PPUSH
38753: CALL_OW 263
38757: PUSH
38758: LD_INT 2
38760: NONEQUAL
38761: OR
38762: IFFALSE 38766
// exit ;
38764: GO 39082
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38766: LD_ADDR_VAR 0 6
38770: PUSH
38771: LD_INT 22
38773: PUSH
38774: LD_VAR 0 1
38778: PPUSH
38779: CALL_OW 255
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 2
38790: PUSH
38791: LD_INT 30
38793: PUSH
38794: LD_INT 36
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 34
38803: PUSH
38804: LD_INT 31
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: LIST
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PPUSH
38820: CALL_OW 69
38824: ST_TO_ADDR
// if not tmp then
38825: LD_VAR 0 6
38829: NOT
38830: IFFALSE 38834
// exit ;
38832: GO 39082
// result := [ ] ;
38834: LD_ADDR_VAR 0 2
38838: PUSH
38839: EMPTY
38840: ST_TO_ADDR
// for i in tmp do
38841: LD_ADDR_VAR 0 3
38845: PUSH
38846: LD_VAR 0 6
38850: PUSH
38851: FOR_IN
38852: IFFALSE 38923
// begin t := UnitsInside ( i ) ;
38854: LD_ADDR_VAR 0 4
38858: PUSH
38859: LD_VAR 0 3
38863: PPUSH
38864: CALL_OW 313
38868: ST_TO_ADDR
// if t then
38869: LD_VAR 0 4
38873: IFFALSE 38921
// for j in t do
38875: LD_ADDR_VAR 0 7
38879: PUSH
38880: LD_VAR 0 4
38884: PUSH
38885: FOR_IN
38886: IFFALSE 38919
// result := Replace ( result , result + 1 , j ) ;
38888: LD_ADDR_VAR 0 2
38892: PUSH
38893: LD_VAR 0 2
38897: PPUSH
38898: LD_VAR 0 2
38902: PUSH
38903: LD_INT 1
38905: PLUS
38906: PPUSH
38907: LD_VAR 0 7
38911: PPUSH
38912: CALL_OW 1
38916: ST_TO_ADDR
38917: GO 38885
38919: POP
38920: POP
// end ;
38921: GO 38851
38923: POP
38924: POP
// if not result then
38925: LD_VAR 0 2
38929: NOT
38930: IFFALSE 38934
// exit ;
38932: GO 39082
// mech := result [ 1 ] ;
38934: LD_ADDR_VAR 0 5
38938: PUSH
38939: LD_VAR 0 2
38943: PUSH
38944: LD_INT 1
38946: ARRAY
38947: ST_TO_ADDR
// if result > 1 then
38948: LD_VAR 0 2
38952: PUSH
38953: LD_INT 1
38955: GREATER
38956: IFFALSE 39068
// begin for i = 2 to result do
38958: LD_ADDR_VAR 0 3
38962: PUSH
38963: DOUBLE
38964: LD_INT 2
38966: DEC
38967: ST_TO_ADDR
38968: LD_VAR 0 2
38972: PUSH
38973: FOR_TO
38974: IFFALSE 39066
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38976: LD_ADDR_VAR 0 4
38980: PUSH
38981: LD_VAR 0 2
38985: PUSH
38986: LD_VAR 0 3
38990: ARRAY
38991: PPUSH
38992: LD_INT 3
38994: PPUSH
38995: CALL_OW 259
38999: PUSH
39000: LD_VAR 0 2
39004: PUSH
39005: LD_VAR 0 3
39009: ARRAY
39010: PPUSH
39011: CALL_OW 432
39015: MINUS
39016: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39017: LD_VAR 0 4
39021: PUSH
39022: LD_VAR 0 5
39026: PPUSH
39027: LD_INT 3
39029: PPUSH
39030: CALL_OW 259
39034: PUSH
39035: LD_VAR 0 5
39039: PPUSH
39040: CALL_OW 432
39044: MINUS
39045: GREATEREQUAL
39046: IFFALSE 39064
// mech := result [ i ] ;
39048: LD_ADDR_VAR 0 5
39052: PUSH
39053: LD_VAR 0 2
39057: PUSH
39058: LD_VAR 0 3
39062: ARRAY
39063: ST_TO_ADDR
// end ;
39064: GO 38973
39066: POP
39067: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39068: LD_VAR 0 1
39072: PPUSH
39073: LD_VAR 0 5
39077: PPUSH
39078: CALL_OW 135
// end ;
39082: LD_VAR 0 2
39086: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39087: LD_INT 0
39089: PPUSH
39090: PPUSH
39091: PPUSH
39092: PPUSH
39093: PPUSH
39094: PPUSH
39095: PPUSH
39096: PPUSH
39097: PPUSH
39098: PPUSH
39099: PPUSH
39100: PPUSH
39101: PPUSH
// result := [ ] ;
39102: LD_ADDR_VAR 0 7
39106: PUSH
39107: EMPTY
39108: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39109: LD_VAR 0 1
39113: PPUSH
39114: CALL_OW 266
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: LD_INT 1
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: IN
39129: NOT
39130: IFFALSE 39134
// exit ;
39132: GO 40774
// if name then
39134: LD_VAR 0 3
39138: IFFALSE 39154
// SetBName ( base_dep , name ) ;
39140: LD_VAR 0 1
39144: PPUSH
39145: LD_VAR 0 3
39149: PPUSH
39150: CALL_OW 500
// base := GetBase ( base_dep ) ;
39154: LD_ADDR_VAR 0 15
39158: PUSH
39159: LD_VAR 0 1
39163: PPUSH
39164: CALL_OW 274
39168: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39169: LD_ADDR_VAR 0 16
39173: PUSH
39174: LD_VAR 0 1
39178: PPUSH
39179: CALL_OW 255
39183: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39184: LD_ADDR_VAR 0 17
39188: PUSH
39189: LD_VAR 0 1
39193: PPUSH
39194: CALL_OW 248
39198: ST_TO_ADDR
// if sources then
39199: LD_VAR 0 5
39203: IFFALSE 39250
// for i = 1 to 3 do
39205: LD_ADDR_VAR 0 8
39209: PUSH
39210: DOUBLE
39211: LD_INT 1
39213: DEC
39214: ST_TO_ADDR
39215: LD_INT 3
39217: PUSH
39218: FOR_TO
39219: IFFALSE 39248
// AddResourceType ( base , i , sources [ i ] ) ;
39221: LD_VAR 0 15
39225: PPUSH
39226: LD_VAR 0 8
39230: PPUSH
39231: LD_VAR 0 5
39235: PUSH
39236: LD_VAR 0 8
39240: ARRAY
39241: PPUSH
39242: CALL_OW 276
39246: GO 39218
39248: POP
39249: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39250: LD_ADDR_VAR 0 18
39254: PUSH
39255: LD_VAR 0 15
39259: PPUSH
39260: LD_VAR 0 2
39264: PPUSH
39265: LD_INT 1
39267: PPUSH
39268: CALL 38509 0 3
39272: ST_TO_ADDR
// InitHc ;
39273: CALL_OW 19
// InitUc ;
39277: CALL_OW 18
// uc_side := side ;
39281: LD_ADDR_OWVAR 20
39285: PUSH
39286: LD_VAR 0 16
39290: ST_TO_ADDR
// uc_nation := nation ;
39291: LD_ADDR_OWVAR 21
39295: PUSH
39296: LD_VAR 0 17
39300: ST_TO_ADDR
// if buildings then
39301: LD_VAR 0 18
39305: IFFALSE 40633
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39307: LD_ADDR_VAR 0 19
39311: PUSH
39312: LD_VAR 0 18
39316: PPUSH
39317: LD_INT 2
39319: PUSH
39320: LD_INT 30
39322: PUSH
39323: LD_INT 29
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 30
39332: PUSH
39333: LD_INT 30
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: LIST
39344: PPUSH
39345: CALL_OW 72
39349: ST_TO_ADDR
// if tmp then
39350: LD_VAR 0 19
39354: IFFALSE 39402
// for i in tmp do
39356: LD_ADDR_VAR 0 8
39360: PUSH
39361: LD_VAR 0 19
39365: PUSH
39366: FOR_IN
39367: IFFALSE 39400
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39369: LD_VAR 0 8
39373: PPUSH
39374: CALL_OW 250
39378: PPUSH
39379: LD_VAR 0 8
39383: PPUSH
39384: CALL_OW 251
39388: PPUSH
39389: LD_VAR 0 16
39393: PPUSH
39394: CALL_OW 441
39398: GO 39366
39400: POP
39401: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39402: LD_VAR 0 18
39406: PPUSH
39407: LD_INT 2
39409: PUSH
39410: LD_INT 30
39412: PUSH
39413: LD_INT 32
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 30
39422: PUSH
39423: LD_INT 33
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: LIST
39434: PPUSH
39435: CALL_OW 72
39439: IFFALSE 39527
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39441: LD_ADDR_VAR 0 8
39445: PUSH
39446: LD_VAR 0 18
39450: PPUSH
39451: LD_INT 2
39453: PUSH
39454: LD_INT 30
39456: PUSH
39457: LD_INT 32
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 30
39466: PUSH
39467: LD_INT 33
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: PPUSH
39479: CALL_OW 72
39483: PUSH
39484: FOR_IN
39485: IFFALSE 39525
// begin if not GetBWeapon ( i ) then
39487: LD_VAR 0 8
39491: PPUSH
39492: CALL_OW 269
39496: NOT
39497: IFFALSE 39523
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39499: LD_VAR 0 8
39503: PPUSH
39504: LD_VAR 0 8
39508: PPUSH
39509: LD_VAR 0 2
39513: PPUSH
39514: CALL 40779 0 2
39518: PPUSH
39519: CALL_OW 431
// end ;
39523: GO 39484
39525: POP
39526: POP
// end ; for i = 1 to personel do
39527: LD_ADDR_VAR 0 8
39531: PUSH
39532: DOUBLE
39533: LD_INT 1
39535: DEC
39536: ST_TO_ADDR
39537: LD_VAR 0 6
39541: PUSH
39542: FOR_TO
39543: IFFALSE 40613
// begin if i > 4 then
39545: LD_VAR 0 8
39549: PUSH
39550: LD_INT 4
39552: GREATER
39553: IFFALSE 39557
// break ;
39555: GO 40613
// case i of 1 :
39557: LD_VAR 0 8
39561: PUSH
39562: LD_INT 1
39564: DOUBLE
39565: EQUAL
39566: IFTRUE 39570
39568: GO 39650
39570: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39571: LD_ADDR_VAR 0 12
39575: PUSH
39576: LD_VAR 0 18
39580: PPUSH
39581: LD_INT 22
39583: PUSH
39584: LD_VAR 0 16
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 58
39595: PUSH
39596: EMPTY
39597: LIST
39598: PUSH
39599: LD_INT 2
39601: PUSH
39602: LD_INT 30
39604: PUSH
39605: LD_INT 32
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 30
39614: PUSH
39615: LD_INT 4
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 30
39624: PUSH
39625: LD_INT 5
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: LIST
39642: PPUSH
39643: CALL_OW 72
39647: ST_TO_ADDR
39648: GO 39872
39650: LD_INT 2
39652: DOUBLE
39653: EQUAL
39654: IFTRUE 39658
39656: GO 39720
39658: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39659: LD_ADDR_VAR 0 12
39663: PUSH
39664: LD_VAR 0 18
39668: PPUSH
39669: LD_INT 22
39671: PUSH
39672: LD_VAR 0 16
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: LD_INT 30
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 30
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: LIST
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PPUSH
39713: CALL_OW 72
39717: ST_TO_ADDR
39718: GO 39872
39720: LD_INT 3
39722: DOUBLE
39723: EQUAL
39724: IFTRUE 39728
39726: GO 39790
39728: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39729: LD_ADDR_VAR 0 12
39733: PUSH
39734: LD_VAR 0 18
39738: PPUSH
39739: LD_INT 22
39741: PUSH
39742: LD_VAR 0 16
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: LD_INT 30
39756: PUSH
39757: LD_INT 2
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 30
39766: PUSH
39767: LD_INT 3
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: LIST
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PPUSH
39783: CALL_OW 72
39787: ST_TO_ADDR
39788: GO 39872
39790: LD_INT 4
39792: DOUBLE
39793: EQUAL
39794: IFTRUE 39798
39796: GO 39871
39798: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39799: LD_ADDR_VAR 0 12
39803: PUSH
39804: LD_VAR 0 18
39808: PPUSH
39809: LD_INT 22
39811: PUSH
39812: LD_VAR 0 16
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 2
39823: PUSH
39824: LD_INT 30
39826: PUSH
39827: LD_INT 6
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 30
39836: PUSH
39837: LD_INT 7
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 30
39846: PUSH
39847: LD_INT 8
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PPUSH
39864: CALL_OW 72
39868: ST_TO_ADDR
39869: GO 39872
39871: POP
// if i = 1 then
39872: LD_VAR 0 8
39876: PUSH
39877: LD_INT 1
39879: EQUAL
39880: IFFALSE 39991
// begin tmp := [ ] ;
39882: LD_ADDR_VAR 0 19
39886: PUSH
39887: EMPTY
39888: ST_TO_ADDR
// for j in f do
39889: LD_ADDR_VAR 0 9
39893: PUSH
39894: LD_VAR 0 12
39898: PUSH
39899: FOR_IN
39900: IFFALSE 39973
// if GetBType ( j ) = b_bunker then
39902: LD_VAR 0 9
39906: PPUSH
39907: CALL_OW 266
39911: PUSH
39912: LD_INT 32
39914: EQUAL
39915: IFFALSE 39942
// tmp := Insert ( tmp , 1 , j ) else
39917: LD_ADDR_VAR 0 19
39921: PUSH
39922: LD_VAR 0 19
39926: PPUSH
39927: LD_INT 1
39929: PPUSH
39930: LD_VAR 0 9
39934: PPUSH
39935: CALL_OW 2
39939: ST_TO_ADDR
39940: GO 39971
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39942: LD_ADDR_VAR 0 19
39946: PUSH
39947: LD_VAR 0 19
39951: PPUSH
39952: LD_VAR 0 19
39956: PUSH
39957: LD_INT 1
39959: PLUS
39960: PPUSH
39961: LD_VAR 0 9
39965: PPUSH
39966: CALL_OW 2
39970: ST_TO_ADDR
39971: GO 39899
39973: POP
39974: POP
// if tmp then
39975: LD_VAR 0 19
39979: IFFALSE 39991
// f := tmp ;
39981: LD_ADDR_VAR 0 12
39985: PUSH
39986: LD_VAR 0 19
39990: ST_TO_ADDR
// end ; x := personel [ i ] ;
39991: LD_ADDR_VAR 0 13
39995: PUSH
39996: LD_VAR 0 6
40000: PUSH
40001: LD_VAR 0 8
40005: ARRAY
40006: ST_TO_ADDR
// if x = - 1 then
40007: LD_VAR 0 13
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: EQUAL
40016: IFFALSE 40227
// begin for j in f do
40018: LD_ADDR_VAR 0 9
40022: PUSH
40023: LD_VAR 0 12
40027: PUSH
40028: FOR_IN
40029: IFFALSE 40223
// repeat InitHc ;
40031: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40035: LD_VAR 0 9
40039: PPUSH
40040: CALL_OW 266
40044: PUSH
40045: LD_INT 5
40047: EQUAL
40048: IFFALSE 40118
// begin if UnitsInside ( j ) < 3 then
40050: LD_VAR 0 9
40054: PPUSH
40055: CALL_OW 313
40059: PUSH
40060: LD_INT 3
40062: LESS
40063: IFFALSE 40099
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40065: LD_INT 0
40067: PPUSH
40068: LD_INT 5
40070: PUSH
40071: LD_INT 8
40073: PUSH
40074: LD_INT 9
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: LIST
40081: PUSH
40082: LD_VAR 0 17
40086: ARRAY
40087: PPUSH
40088: LD_VAR 0 4
40092: PPUSH
40093: CALL_OW 380
40097: GO 40116
// PrepareHuman ( false , i , skill ) ;
40099: LD_INT 0
40101: PPUSH
40102: LD_VAR 0 8
40106: PPUSH
40107: LD_VAR 0 4
40111: PPUSH
40112: CALL_OW 380
// end else
40116: GO 40135
// PrepareHuman ( false , i , skill ) ;
40118: LD_INT 0
40120: PPUSH
40121: LD_VAR 0 8
40125: PPUSH
40126: LD_VAR 0 4
40130: PPUSH
40131: CALL_OW 380
// un := CreateHuman ;
40135: LD_ADDR_VAR 0 14
40139: PUSH
40140: CALL_OW 44
40144: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40145: LD_ADDR_VAR 0 7
40149: PUSH
40150: LD_VAR 0 7
40154: PPUSH
40155: LD_INT 1
40157: PPUSH
40158: LD_VAR 0 14
40162: PPUSH
40163: CALL_OW 2
40167: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40168: LD_VAR 0 14
40172: PPUSH
40173: LD_VAR 0 9
40177: PPUSH
40178: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40182: LD_VAR 0 9
40186: PPUSH
40187: CALL_OW 313
40191: PUSH
40192: LD_INT 6
40194: EQUAL
40195: IFTRUE 40219
40197: PUSH
40198: LD_VAR 0 9
40202: PPUSH
40203: CALL_OW 266
40207: PUSH
40208: LD_INT 32
40210: PUSH
40211: LD_INT 31
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: IN
40218: OR
40219: IFFALSE 40031
40221: GO 40028
40223: POP
40224: POP
// end else
40225: GO 40611
// for j = 1 to x do
40227: LD_ADDR_VAR 0 9
40231: PUSH
40232: DOUBLE
40233: LD_INT 1
40235: DEC
40236: ST_TO_ADDR
40237: LD_VAR 0 13
40241: PUSH
40242: FOR_TO
40243: IFFALSE 40609
// begin InitHc ;
40245: CALL_OW 19
// if not f then
40249: LD_VAR 0 12
40253: NOT
40254: IFFALSE 40343
// begin PrepareHuman ( false , i , skill ) ;
40256: LD_INT 0
40258: PPUSH
40259: LD_VAR 0 8
40263: PPUSH
40264: LD_VAR 0 4
40268: PPUSH
40269: CALL_OW 380
// un := CreateHuman ;
40273: LD_ADDR_VAR 0 14
40277: PUSH
40278: CALL_OW 44
40282: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40283: LD_ADDR_VAR 0 7
40287: PUSH
40288: LD_VAR 0 7
40292: PPUSH
40293: LD_INT 1
40295: PPUSH
40296: LD_VAR 0 14
40300: PPUSH
40301: CALL_OW 2
40305: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40306: LD_VAR 0 14
40310: PPUSH
40311: LD_VAR 0 1
40315: PPUSH
40316: CALL_OW 250
40320: PPUSH
40321: LD_VAR 0 1
40325: PPUSH
40326: CALL_OW 251
40330: PPUSH
40331: LD_INT 10
40333: PPUSH
40334: LD_INT 0
40336: PPUSH
40337: CALL_OW 50
// continue ;
40341: GO 40242
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40343: LD_VAR 0 12
40347: PUSH
40348: LD_INT 1
40350: ARRAY
40351: PPUSH
40352: CALL_OW 313
40356: IFFALSE 40384
40358: PUSH
40359: LD_VAR 0 12
40363: PUSH
40364: LD_INT 1
40366: ARRAY
40367: PPUSH
40368: CALL_OW 266
40372: PUSH
40373: LD_INT 32
40375: PUSH
40376: LD_INT 31
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: IN
40383: AND
40384: IFTRUE 40405
40386: PUSH
40387: LD_VAR 0 12
40391: PUSH
40392: LD_INT 1
40394: ARRAY
40395: PPUSH
40396: CALL_OW 313
40400: PUSH
40401: LD_INT 6
40403: EQUAL
40404: OR
40405: IFFALSE 40425
// f := Delete ( f , 1 ) ;
40407: LD_ADDR_VAR 0 12
40411: PUSH
40412: LD_VAR 0 12
40416: PPUSH
40417: LD_INT 1
40419: PPUSH
40420: CALL_OW 3
40424: ST_TO_ADDR
// if not f then
40425: LD_VAR 0 12
40429: NOT
40430: IFFALSE 40448
// begin x := x + 2 ;
40432: LD_ADDR_VAR 0 13
40436: PUSH
40437: LD_VAR 0 13
40441: PUSH
40442: LD_INT 2
40444: PLUS
40445: ST_TO_ADDR
// continue ;
40446: GO 40242
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40448: LD_VAR 0 12
40452: PUSH
40453: LD_INT 1
40455: ARRAY
40456: PPUSH
40457: CALL_OW 266
40461: PUSH
40462: LD_INT 5
40464: EQUAL
40465: IFFALSE 40539
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40467: LD_VAR 0 12
40471: PUSH
40472: LD_INT 1
40474: ARRAY
40475: PPUSH
40476: CALL_OW 313
40480: PUSH
40481: LD_INT 3
40483: LESS
40484: IFFALSE 40520
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40486: LD_INT 0
40488: PPUSH
40489: LD_INT 5
40491: PUSH
40492: LD_INT 8
40494: PUSH
40495: LD_INT 9
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: LIST
40502: PUSH
40503: LD_VAR 0 17
40507: ARRAY
40508: PPUSH
40509: LD_VAR 0 4
40513: PPUSH
40514: CALL_OW 380
40518: GO 40537
// PrepareHuman ( false , i , skill ) ;
40520: LD_INT 0
40522: PPUSH
40523: LD_VAR 0 8
40527: PPUSH
40528: LD_VAR 0 4
40532: PPUSH
40533: CALL_OW 380
// end else
40537: GO 40556
// PrepareHuman ( false , i , skill ) ;
40539: LD_INT 0
40541: PPUSH
40542: LD_VAR 0 8
40546: PPUSH
40547: LD_VAR 0 4
40551: PPUSH
40552: CALL_OW 380
// un := CreateHuman ;
40556: LD_ADDR_VAR 0 14
40560: PUSH
40561: CALL_OW 44
40565: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40566: LD_ADDR_VAR 0 7
40570: PUSH
40571: LD_VAR 0 7
40575: PPUSH
40576: LD_INT 1
40578: PPUSH
40579: LD_VAR 0 14
40583: PPUSH
40584: CALL_OW 2
40588: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40589: LD_VAR 0 14
40593: PPUSH
40594: LD_VAR 0 12
40598: PUSH
40599: LD_INT 1
40601: ARRAY
40602: PPUSH
40603: CALL_OW 52
// end ;
40607: GO 40242
40609: POP
40610: POP
// end ;
40611: GO 39542
40613: POP
40614: POP
// result := result ^ buildings ;
40615: LD_ADDR_VAR 0 7
40619: PUSH
40620: LD_VAR 0 7
40624: PUSH
40625: LD_VAR 0 18
40629: ADD
40630: ST_TO_ADDR
// end else
40631: GO 40774
// begin for i = 1 to personel do
40633: LD_ADDR_VAR 0 8
40637: PUSH
40638: DOUBLE
40639: LD_INT 1
40641: DEC
40642: ST_TO_ADDR
40643: LD_VAR 0 6
40647: PUSH
40648: FOR_TO
40649: IFFALSE 40772
// begin if i > 4 then
40651: LD_VAR 0 8
40655: PUSH
40656: LD_INT 4
40658: GREATER
40659: IFFALSE 40663
// break ;
40661: GO 40772
// x := personel [ i ] ;
40663: LD_ADDR_VAR 0 13
40667: PUSH
40668: LD_VAR 0 6
40672: PUSH
40673: LD_VAR 0 8
40677: ARRAY
40678: ST_TO_ADDR
// if x = - 1 then
40679: LD_VAR 0 13
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: EQUAL
40688: IFFALSE 40692
// continue ;
40690: GO 40648
// PrepareHuman ( false , i , skill ) ;
40692: LD_INT 0
40694: PPUSH
40695: LD_VAR 0 8
40699: PPUSH
40700: LD_VAR 0 4
40704: PPUSH
40705: CALL_OW 380
// un := CreateHuman ;
40709: LD_ADDR_VAR 0 14
40713: PUSH
40714: CALL_OW 44
40718: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40719: LD_VAR 0 14
40723: PPUSH
40724: LD_VAR 0 1
40728: PPUSH
40729: CALL_OW 250
40733: PPUSH
40734: LD_VAR 0 1
40738: PPUSH
40739: CALL_OW 251
40743: PPUSH
40744: LD_INT 10
40746: PPUSH
40747: LD_INT 0
40749: PPUSH
40750: CALL_OW 50
// result := result ^ un ;
40754: LD_ADDR_VAR 0 7
40758: PUSH
40759: LD_VAR 0 7
40763: PUSH
40764: LD_VAR 0 14
40768: ADD
40769: ST_TO_ADDR
// end ;
40770: GO 40648
40772: POP
40773: POP
// end ; end ;
40774: LD_VAR 0 7
40778: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40779: LD_INT 0
40781: PPUSH
40782: PPUSH
40783: PPUSH
40784: PPUSH
40785: PPUSH
40786: PPUSH
40787: PPUSH
40788: PPUSH
40789: PPUSH
40790: PPUSH
40791: PPUSH
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
// result := false ;
40797: LD_ADDR_VAR 0 3
40801: PUSH
40802: LD_INT 0
40804: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40805: LD_VAR 0 1
40809: NOT
40810: IFTRUE 40835
40812: PUSH
40813: LD_VAR 0 1
40817: PPUSH
40818: CALL_OW 266
40822: PUSH
40823: LD_INT 32
40825: PUSH
40826: LD_INT 33
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: IN
40833: NOT
40834: OR
40835: IFFALSE 40839
// exit ;
40837: GO 41974
// nat := GetNation ( tower ) ;
40839: LD_ADDR_VAR 0 12
40843: PUSH
40844: LD_VAR 0 1
40848: PPUSH
40849: CALL_OW 248
40853: ST_TO_ADDR
// side := GetSide ( tower ) ;
40854: LD_ADDR_VAR 0 16
40858: PUSH
40859: LD_VAR 0 1
40863: PPUSH
40864: CALL_OW 255
40868: ST_TO_ADDR
// x := GetX ( tower ) ;
40869: LD_ADDR_VAR 0 10
40873: PUSH
40874: LD_VAR 0 1
40878: PPUSH
40879: CALL_OW 250
40883: ST_TO_ADDR
// y := GetY ( tower ) ;
40884: LD_ADDR_VAR 0 11
40888: PUSH
40889: LD_VAR 0 1
40893: PPUSH
40894: CALL_OW 251
40898: ST_TO_ADDR
// if not x or not y then
40899: LD_VAR 0 10
40903: NOT
40904: IFTRUE 40913
40906: PUSH
40907: LD_VAR 0 11
40911: NOT
40912: OR
40913: IFFALSE 40917
// exit ;
40915: GO 41974
// weapon := 0 ;
40917: LD_ADDR_VAR 0 18
40921: PUSH
40922: LD_INT 0
40924: ST_TO_ADDR
// fac_list := [ ] ;
40925: LD_ADDR_VAR 0 17
40929: PUSH
40930: EMPTY
40931: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40932: LD_ADDR_VAR 0 6
40936: PUSH
40937: LD_VAR 0 1
40941: PPUSH
40942: CALL_OW 274
40946: PPUSH
40947: LD_VAR 0 2
40951: PPUSH
40952: LD_INT 0
40954: PPUSH
40955: CALL 38509 0 3
40959: PPUSH
40960: LD_INT 30
40962: PUSH
40963: LD_INT 3
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PPUSH
40970: CALL_OW 72
40974: ST_TO_ADDR
// if not factories then
40975: LD_VAR 0 6
40979: NOT
40980: IFFALSE 40984
// exit ;
40982: GO 41974
// for i in factories do
40984: LD_ADDR_VAR 0 8
40988: PUSH
40989: LD_VAR 0 6
40993: PUSH
40994: FOR_IN
40995: IFFALSE 41020
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40997: LD_ADDR_VAR 0 17
41001: PUSH
41002: LD_VAR 0 17
41006: PUSH
41007: LD_VAR 0 8
41011: PPUSH
41012: CALL_OW 478
41016: UNION
41017: ST_TO_ADDR
41018: GO 40994
41020: POP
41021: POP
// if not fac_list then
41022: LD_VAR 0 17
41026: NOT
41027: IFFALSE 41031
// exit ;
41029: GO 41974
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41031: LD_ADDR_VAR 0 5
41035: PUSH
41036: LD_INT 4
41038: PUSH
41039: LD_INT 5
41041: PUSH
41042: LD_INT 9
41044: PUSH
41045: LD_INT 10
41047: PUSH
41048: LD_INT 6
41050: PUSH
41051: LD_INT 7
41053: PUSH
41054: LD_INT 11
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 27
41068: PUSH
41069: LD_INT 28
41071: PUSH
41072: LD_INT 26
41074: PUSH
41075: LD_INT 30
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 43
41086: PUSH
41087: LD_INT 44
41089: PUSH
41090: LD_INT 46
41092: PUSH
41093: LD_INT 45
41095: PUSH
41096: LD_INT 47
41098: PUSH
41099: LD_INT 49
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: LIST
41114: PUSH
41115: LD_VAR 0 12
41119: ARRAY
41120: ST_TO_ADDR
// list := list isect fac_list ;
41121: LD_ADDR_VAR 0 5
41125: PUSH
41126: LD_VAR 0 5
41130: PUSH
41131: LD_VAR 0 17
41135: ISECT
41136: ST_TO_ADDR
// if not list then
41137: LD_VAR 0 5
41141: NOT
41142: IFFALSE 41146
// exit ;
41144: GO 41974
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41146: LD_VAR 0 12
41150: PUSH
41151: LD_INT 3
41153: EQUAL
41154: IFFALSE 41166
41156: PUSH
41157: LD_INT 49
41159: PUSH
41160: LD_VAR 0 5
41164: IN
41165: AND
41166: IFFALSE 41186
41168: PUSH
41169: LD_INT 31
41171: PPUSH
41172: LD_VAR 0 16
41176: PPUSH
41177: CALL_OW 321
41181: PUSH
41182: LD_INT 2
41184: EQUAL
41185: AND
41186: IFFALSE 41246
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41188: LD_INT 22
41190: PUSH
41191: LD_VAR 0 16
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 35
41202: PUSH
41203: LD_INT 49
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 91
41212: PUSH
41213: LD_VAR 0 1
41217: PUSH
41218: LD_INT 10
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: LIST
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: LIST
41230: PPUSH
41231: CALL_OW 69
41235: NOT
41236: IFFALSE 41246
// weapon := ru_time_lapser ;
41238: LD_ADDR_VAR 0 18
41242: PUSH
41243: LD_INT 49
41245: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41246: LD_VAR 0 12
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: LD_INT 2
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: IN
41261: IFFALSE 41285
41263: PUSH
41264: LD_INT 11
41266: PUSH
41267: LD_VAR 0 5
41271: IN
41272: IFTRUE 41284
41274: PUSH
41275: LD_INT 30
41277: PUSH
41278: LD_VAR 0 5
41282: IN
41283: OR
41284: AND
41285: IFFALSE 41305
41287: PUSH
41288: LD_INT 6
41290: PPUSH
41291: LD_VAR 0 16
41295: PPUSH
41296: CALL_OW 321
41300: PUSH
41301: LD_INT 2
41303: EQUAL
41304: AND
41305: IFFALSE 41472
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41307: LD_INT 22
41309: PUSH
41310: LD_VAR 0 16
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: LD_INT 35
41324: PUSH
41325: LD_INT 11
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 35
41334: PUSH
41335: LD_INT 30
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 91
41349: PUSH
41350: LD_VAR 0 1
41354: PUSH
41355: LD_INT 18
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: LIST
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: LIST
41367: PPUSH
41368: CALL_OW 69
41372: NOT
41373: IFFALSE 41449
41375: PUSH
41376: LD_INT 22
41378: PUSH
41379: LD_VAR 0 16
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 2
41390: PUSH
41391: LD_INT 30
41393: PUSH
41394: LD_INT 32
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 30
41403: PUSH
41404: LD_INT 33
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 91
41418: PUSH
41419: LD_VAR 0 1
41423: PUSH
41424: LD_INT 12
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: LIST
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: LIST
41436: PUSH
41437: EMPTY
41438: LIST
41439: PPUSH
41440: CALL_OW 69
41444: PUSH
41445: LD_INT 2
41447: GREATER
41448: AND
41449: IFFALSE 41472
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41451: LD_ADDR_VAR 0 18
41455: PUSH
41456: LD_INT 11
41458: PUSH
41459: LD_INT 30
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_VAR 0 12
41470: ARRAY
41471: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41472: LD_VAR 0 18
41476: NOT
41477: IFFALSE 41497
41479: PUSH
41480: LD_INT 40
41482: PPUSH
41483: LD_VAR 0 16
41487: PPUSH
41488: CALL_OW 321
41492: PUSH
41493: LD_INT 2
41495: EQUAL
41496: AND
41497: IFFALSE 41533
41499: PUSH
41500: LD_INT 7
41502: PUSH
41503: LD_VAR 0 5
41507: IN
41508: IFTRUE 41520
41510: PUSH
41511: LD_INT 28
41513: PUSH
41514: LD_VAR 0 5
41518: IN
41519: OR
41520: IFTRUE 41532
41522: PUSH
41523: LD_INT 45
41525: PUSH
41526: LD_VAR 0 5
41530: IN
41531: OR
41532: AND
41533: IFFALSE 41787
// begin hex := GetHexInfo ( x , y ) ;
41535: LD_ADDR_VAR 0 4
41539: PUSH
41540: LD_VAR 0 10
41544: PPUSH
41545: LD_VAR 0 11
41549: PPUSH
41550: CALL_OW 546
41554: ST_TO_ADDR
// if hex [ 1 ] then
41555: LD_VAR 0 4
41559: PUSH
41560: LD_INT 1
41562: ARRAY
41563: IFFALSE 41567
// exit ;
41565: GO 41974
// height := hex [ 2 ] ;
41567: LD_ADDR_VAR 0 15
41571: PUSH
41572: LD_VAR 0 4
41576: PUSH
41577: LD_INT 2
41579: ARRAY
41580: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41581: LD_ADDR_VAR 0 14
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 2
41591: PUSH
41592: LD_INT 3
41594: PUSH
41595: LD_INT 5
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: ST_TO_ADDR
// for i in tmp do
41604: LD_ADDR_VAR 0 8
41608: PUSH
41609: LD_VAR 0 14
41613: PUSH
41614: FOR_IN
41615: IFFALSE 41785
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41617: LD_ADDR_VAR 0 9
41621: PUSH
41622: LD_VAR 0 10
41626: PPUSH
41627: LD_VAR 0 8
41631: PPUSH
41632: LD_INT 5
41634: PPUSH
41635: CALL_OW 272
41639: PUSH
41640: LD_VAR 0 11
41644: PPUSH
41645: LD_VAR 0 8
41649: PPUSH
41650: LD_INT 5
41652: PPUSH
41653: CALL_OW 273
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41662: LD_VAR 0 9
41666: PUSH
41667: LD_INT 1
41669: ARRAY
41670: PPUSH
41671: LD_VAR 0 9
41675: PUSH
41676: LD_INT 2
41678: ARRAY
41679: PPUSH
41680: CALL_OW 488
41684: IFFALSE 41783
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41686: LD_ADDR_VAR 0 4
41690: PUSH
41691: LD_VAR 0 9
41695: PUSH
41696: LD_INT 1
41698: ARRAY
41699: PPUSH
41700: LD_VAR 0 9
41704: PUSH
41705: LD_INT 2
41707: ARRAY
41708: PPUSH
41709: CALL_OW 546
41713: ST_TO_ADDR
// if hex [ 1 ] then
41714: LD_VAR 0 4
41718: PUSH
41719: LD_INT 1
41721: ARRAY
41722: IFFALSE 41726
// continue ;
41724: GO 41614
// h := hex [ 2 ] ;
41726: LD_ADDR_VAR 0 13
41730: PUSH
41731: LD_VAR 0 4
41735: PUSH
41736: LD_INT 2
41738: ARRAY
41739: ST_TO_ADDR
// if h + 7 < height then
41740: LD_VAR 0 13
41744: PUSH
41745: LD_INT 7
41747: PLUS
41748: PUSH
41749: LD_VAR 0 15
41753: LESS
41754: IFFALSE 41783
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41756: LD_ADDR_VAR 0 18
41760: PUSH
41761: LD_INT 7
41763: PUSH
41764: LD_INT 28
41766: PUSH
41767: LD_INT 45
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: LIST
41774: PUSH
41775: LD_VAR 0 12
41779: ARRAY
41780: ST_TO_ADDR
// break ;
41781: GO 41785
// end ; end ; end ;
41783: GO 41614
41785: POP
41786: POP
// end ; if not weapon then
41787: LD_VAR 0 18
41791: NOT
41792: IFFALSE 41852
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41794: LD_ADDR_VAR 0 5
41798: PUSH
41799: LD_VAR 0 5
41803: PUSH
41804: LD_INT 11
41806: PUSH
41807: LD_INT 30
41809: PUSH
41810: LD_INT 49
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: LIST
41817: DIFF
41818: ST_TO_ADDR
// if not list then
41819: LD_VAR 0 5
41823: NOT
41824: IFFALSE 41828
// exit ;
41826: GO 41974
// weapon := list [ rand ( 1 , list ) ] ;
41828: LD_ADDR_VAR 0 18
41832: PUSH
41833: LD_VAR 0 5
41837: PUSH
41838: LD_INT 1
41840: PPUSH
41841: LD_VAR 0 5
41845: PPUSH
41846: CALL_OW 12
41850: ARRAY
41851: ST_TO_ADDR
// end ; if weapon then
41852: LD_VAR 0 18
41856: IFFALSE 41974
// begin tmp := CostOfWeapon ( weapon ) ;
41858: LD_ADDR_VAR 0 14
41862: PUSH
41863: LD_VAR 0 18
41867: PPUSH
41868: CALL_OW 451
41872: ST_TO_ADDR
// j := GetBase ( tower ) ;
41873: LD_ADDR_VAR 0 9
41877: PUSH
41878: LD_VAR 0 1
41882: PPUSH
41883: CALL_OW 274
41887: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41888: LD_VAR 0 9
41892: PPUSH
41893: LD_INT 1
41895: PPUSH
41896: CALL_OW 275
41900: PUSH
41901: LD_VAR 0 14
41905: PUSH
41906: LD_INT 1
41908: ARRAY
41909: GREATEREQUAL
41910: IFFALSE 41936
41912: PUSH
41913: LD_VAR 0 9
41917: PPUSH
41918: LD_INT 2
41920: PPUSH
41921: CALL_OW 275
41925: PUSH
41926: LD_VAR 0 14
41930: PUSH
41931: LD_INT 2
41933: ARRAY
41934: GREATEREQUAL
41935: AND
41936: IFFALSE 41962
41938: PUSH
41939: LD_VAR 0 9
41943: PPUSH
41944: LD_INT 3
41946: PPUSH
41947: CALL_OW 275
41951: PUSH
41952: LD_VAR 0 14
41956: PUSH
41957: LD_INT 3
41959: ARRAY
41960: GREATEREQUAL
41961: AND
41962: IFFALSE 41974
// result := weapon ;
41964: LD_ADDR_VAR 0 3
41968: PUSH
41969: LD_VAR 0 18
41973: ST_TO_ADDR
// end ; end ;
41974: LD_VAR 0 3
41978: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41979: LD_INT 0
41981: PPUSH
41982: PPUSH
// result := true ;
41983: LD_ADDR_VAR 0 3
41987: PUSH
41988: LD_INT 1
41990: ST_TO_ADDR
// if array1 = array2 then
41991: LD_VAR 0 1
41995: PUSH
41996: LD_VAR 0 2
42000: EQUAL
42001: IFFALSE 42061
// begin for i = 1 to array1 do
42003: LD_ADDR_VAR 0 4
42007: PUSH
42008: DOUBLE
42009: LD_INT 1
42011: DEC
42012: ST_TO_ADDR
42013: LD_VAR 0 1
42017: PUSH
42018: FOR_TO
42019: IFFALSE 42057
// if array1 [ i ] <> array2 [ i ] then
42021: LD_VAR 0 1
42025: PUSH
42026: LD_VAR 0 4
42030: ARRAY
42031: PUSH
42032: LD_VAR 0 2
42036: PUSH
42037: LD_VAR 0 4
42041: ARRAY
42042: NONEQUAL
42043: IFFALSE 42055
// begin result := false ;
42045: LD_ADDR_VAR 0 3
42049: PUSH
42050: LD_INT 0
42052: ST_TO_ADDR
// break ;
42053: GO 42057
// end ;
42055: GO 42018
42057: POP
42058: POP
// end else
42059: GO 42069
// result := false ;
42061: LD_ADDR_VAR 0 3
42065: PUSH
42066: LD_INT 0
42068: ST_TO_ADDR
// end ;
42069: LD_VAR 0 3
42073: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42074: LD_INT 0
42076: PPUSH
42077: PPUSH
// if not array1 or not array2 then
42078: LD_VAR 0 1
42082: NOT
42083: IFTRUE 42092
42085: PUSH
42086: LD_VAR 0 2
42090: NOT
42091: OR
42092: IFFALSE 42096
// exit ;
42094: GO 42160
// result := true ;
42096: LD_ADDR_VAR 0 3
42100: PUSH
42101: LD_INT 1
42103: ST_TO_ADDR
// for i = 1 to array1 do
42104: LD_ADDR_VAR 0 4
42108: PUSH
42109: DOUBLE
42110: LD_INT 1
42112: DEC
42113: ST_TO_ADDR
42114: LD_VAR 0 1
42118: PUSH
42119: FOR_TO
42120: IFFALSE 42158
// if array1 [ i ] <> array2 [ i ] then
42122: LD_VAR 0 1
42126: PUSH
42127: LD_VAR 0 4
42131: ARRAY
42132: PUSH
42133: LD_VAR 0 2
42137: PUSH
42138: LD_VAR 0 4
42142: ARRAY
42143: NONEQUAL
42144: IFFALSE 42156
// begin result := false ;
42146: LD_ADDR_VAR 0 3
42150: PUSH
42151: LD_INT 0
42153: ST_TO_ADDR
// break ;
42154: GO 42158
// end ;
42156: GO 42119
42158: POP
42159: POP
// end ;
42160: LD_VAR 0 3
42164: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42165: LD_INT 0
42167: PPUSH
42168: PPUSH
42169: PPUSH
// pom := GetBase ( fac ) ;
42170: LD_ADDR_VAR 0 5
42174: PUSH
42175: LD_VAR 0 1
42179: PPUSH
42180: CALL_OW 274
42184: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42185: LD_ADDR_VAR 0 4
42189: PUSH
42190: LD_VAR 0 2
42194: PUSH
42195: LD_INT 1
42197: ARRAY
42198: PPUSH
42199: LD_VAR 0 2
42203: PUSH
42204: LD_INT 2
42206: ARRAY
42207: PPUSH
42208: LD_VAR 0 2
42212: PUSH
42213: LD_INT 3
42215: ARRAY
42216: PPUSH
42217: LD_VAR 0 2
42221: PUSH
42222: LD_INT 4
42224: ARRAY
42225: PPUSH
42226: CALL_OW 449
42230: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42231: LD_ADDR_VAR 0 3
42235: PUSH
42236: LD_VAR 0 5
42240: PPUSH
42241: LD_INT 1
42243: PPUSH
42244: CALL_OW 275
42248: PUSH
42249: LD_VAR 0 4
42253: PUSH
42254: LD_INT 1
42256: ARRAY
42257: GREATEREQUAL
42258: IFFALSE 42284
42260: PUSH
42261: LD_VAR 0 5
42265: PPUSH
42266: LD_INT 2
42268: PPUSH
42269: CALL_OW 275
42273: PUSH
42274: LD_VAR 0 4
42278: PUSH
42279: LD_INT 2
42281: ARRAY
42282: GREATEREQUAL
42283: AND
42284: IFFALSE 42310
42286: PUSH
42287: LD_VAR 0 5
42291: PPUSH
42292: LD_INT 3
42294: PPUSH
42295: CALL_OW 275
42299: PUSH
42300: LD_VAR 0 4
42304: PUSH
42305: LD_INT 3
42307: ARRAY
42308: GREATEREQUAL
42309: AND
42310: ST_TO_ADDR
// end ;
42311: LD_VAR 0 3
42315: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42316: LD_INT 0
42318: PPUSH
42319: PPUSH
42320: PPUSH
42321: PPUSH
// pom := GetBase ( building ) ;
42322: LD_ADDR_VAR 0 3
42326: PUSH
42327: LD_VAR 0 1
42331: PPUSH
42332: CALL_OW 274
42336: ST_TO_ADDR
// if not pom then
42337: LD_VAR 0 3
42341: NOT
42342: IFFALSE 42346
// exit ;
42344: GO 42520
// btype := GetBType ( building ) ;
42346: LD_ADDR_VAR 0 5
42350: PUSH
42351: LD_VAR 0 1
42355: PPUSH
42356: CALL_OW 266
42360: ST_TO_ADDR
// if btype = b_armoury then
42361: LD_VAR 0 5
42365: PUSH
42366: LD_INT 4
42368: EQUAL
42369: IFFALSE 42379
// btype := b_barracks ;
42371: LD_ADDR_VAR 0 5
42375: PUSH
42376: LD_INT 5
42378: ST_TO_ADDR
// if btype = b_depot then
42379: LD_VAR 0 5
42383: PUSH
42384: LD_INT 0
42386: EQUAL
42387: IFFALSE 42397
// btype := b_warehouse ;
42389: LD_ADDR_VAR 0 5
42393: PUSH
42394: LD_INT 1
42396: ST_TO_ADDR
// if btype = b_workshop then
42397: LD_VAR 0 5
42401: PUSH
42402: LD_INT 2
42404: EQUAL
42405: IFFALSE 42415
// btype := b_factory ;
42407: LD_ADDR_VAR 0 5
42411: PUSH
42412: LD_INT 3
42414: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42415: LD_ADDR_VAR 0 4
42419: PUSH
42420: LD_VAR 0 5
42424: PPUSH
42425: LD_VAR 0 1
42429: PPUSH
42430: CALL_OW 248
42434: PPUSH
42435: CALL_OW 450
42439: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42440: LD_ADDR_VAR 0 2
42444: PUSH
42445: LD_VAR 0 3
42449: PPUSH
42450: LD_INT 1
42452: PPUSH
42453: CALL_OW 275
42457: PUSH
42458: LD_VAR 0 4
42462: PUSH
42463: LD_INT 1
42465: ARRAY
42466: GREATEREQUAL
42467: IFFALSE 42493
42469: PUSH
42470: LD_VAR 0 3
42474: PPUSH
42475: LD_INT 2
42477: PPUSH
42478: CALL_OW 275
42482: PUSH
42483: LD_VAR 0 4
42487: PUSH
42488: LD_INT 2
42490: ARRAY
42491: GREATEREQUAL
42492: AND
42493: IFFALSE 42519
42495: PUSH
42496: LD_VAR 0 3
42500: PPUSH
42501: LD_INT 3
42503: PPUSH
42504: CALL_OW 275
42508: PUSH
42509: LD_VAR 0 4
42513: PUSH
42514: LD_INT 3
42516: ARRAY
42517: GREATEREQUAL
42518: AND
42519: ST_TO_ADDR
// end ;
42520: LD_VAR 0 2
42524: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42525: LD_INT 0
42527: PPUSH
42528: PPUSH
42529: PPUSH
// pom := GetBase ( building ) ;
42530: LD_ADDR_VAR 0 4
42534: PUSH
42535: LD_VAR 0 1
42539: PPUSH
42540: CALL_OW 274
42544: ST_TO_ADDR
// if not pom then
42545: LD_VAR 0 4
42549: NOT
42550: IFFALSE 42554
// exit ;
42552: GO 42659
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42554: LD_ADDR_VAR 0 5
42558: PUSH
42559: LD_VAR 0 2
42563: PPUSH
42564: LD_VAR 0 1
42568: PPUSH
42569: CALL_OW 248
42573: PPUSH
42574: CALL_OW 450
42578: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42579: LD_ADDR_VAR 0 3
42583: PUSH
42584: LD_VAR 0 4
42588: PPUSH
42589: LD_INT 1
42591: PPUSH
42592: CALL_OW 275
42596: PUSH
42597: LD_VAR 0 5
42601: PUSH
42602: LD_INT 1
42604: ARRAY
42605: GREATEREQUAL
42606: IFFALSE 42632
42608: PUSH
42609: LD_VAR 0 4
42613: PPUSH
42614: LD_INT 2
42616: PPUSH
42617: CALL_OW 275
42621: PUSH
42622: LD_VAR 0 5
42626: PUSH
42627: LD_INT 2
42629: ARRAY
42630: GREATEREQUAL
42631: AND
42632: IFFALSE 42658
42634: PUSH
42635: LD_VAR 0 4
42639: PPUSH
42640: LD_INT 3
42642: PPUSH
42643: CALL_OW 275
42647: PUSH
42648: LD_VAR 0 5
42652: PUSH
42653: LD_INT 3
42655: ARRAY
42656: GREATEREQUAL
42657: AND
42658: ST_TO_ADDR
// end ;
42659: LD_VAR 0 3
42663: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42664: LD_INT 0
42666: PPUSH
42667: PPUSH
42668: PPUSH
42669: PPUSH
42670: PPUSH
42671: PPUSH
42672: PPUSH
42673: PPUSH
42674: PPUSH
42675: PPUSH
42676: PPUSH
// result := false ;
42677: LD_ADDR_VAR 0 8
42681: PUSH
42682: LD_INT 0
42684: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42685: LD_VAR 0 5
42689: NOT
42690: IFTRUE 42699
42692: PUSH
42693: LD_VAR 0 1
42697: NOT
42698: OR
42699: IFTRUE 42708
42701: PUSH
42702: LD_VAR 0 2
42706: NOT
42707: OR
42708: IFTRUE 42717
42710: PUSH
42711: LD_VAR 0 3
42715: NOT
42716: OR
42717: IFFALSE 42721
// exit ;
42719: GO 43547
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42721: LD_ADDR_VAR 0 14
42725: PUSH
42726: LD_VAR 0 1
42730: PPUSH
42731: LD_VAR 0 2
42735: PPUSH
42736: LD_VAR 0 3
42740: PPUSH
42741: LD_VAR 0 4
42745: PPUSH
42746: LD_VAR 0 5
42750: PUSH
42751: LD_INT 1
42753: ARRAY
42754: PPUSH
42755: CALL_OW 248
42759: PPUSH
42760: LD_INT 0
42762: PPUSH
42763: CALL 44828 0 6
42767: ST_TO_ADDR
// if not hexes then
42768: LD_VAR 0 14
42772: NOT
42773: IFFALSE 42777
// exit ;
42775: GO 43547
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42777: LD_ADDR_VAR 0 17
42781: PUSH
42782: LD_VAR 0 5
42786: PPUSH
42787: LD_INT 22
42789: PUSH
42790: LD_VAR 0 13
42794: PPUSH
42795: CALL_OW 255
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: LD_INT 30
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 30
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: LIST
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PPUSH
42836: CALL_OW 72
42840: ST_TO_ADDR
// for i = 1 to hexes do
42841: LD_ADDR_VAR 0 9
42845: PUSH
42846: DOUBLE
42847: LD_INT 1
42849: DEC
42850: ST_TO_ADDR
42851: LD_VAR 0 14
42855: PUSH
42856: FOR_TO
42857: IFFALSE 43545
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42859: LD_ADDR_VAR 0 13
42863: PUSH
42864: LD_VAR 0 14
42868: PUSH
42869: LD_VAR 0 9
42873: ARRAY
42874: PUSH
42875: LD_INT 1
42877: ARRAY
42878: PPUSH
42879: LD_VAR 0 14
42883: PUSH
42884: LD_VAR 0 9
42888: ARRAY
42889: PUSH
42890: LD_INT 2
42892: ARRAY
42893: PPUSH
42894: CALL_OW 428
42898: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42899: LD_VAR 0 14
42903: PUSH
42904: LD_VAR 0 9
42908: ARRAY
42909: PUSH
42910: LD_INT 1
42912: ARRAY
42913: PPUSH
42914: LD_VAR 0 14
42918: PUSH
42919: LD_VAR 0 9
42923: ARRAY
42924: PUSH
42925: LD_INT 2
42927: ARRAY
42928: PPUSH
42929: CALL_OW 351
42933: IFTRUE 42972
42935: PUSH
42936: LD_VAR 0 14
42940: PUSH
42941: LD_VAR 0 9
42945: ARRAY
42946: PUSH
42947: LD_INT 1
42949: ARRAY
42950: PPUSH
42951: LD_VAR 0 14
42955: PUSH
42956: LD_VAR 0 9
42960: ARRAY
42961: PUSH
42962: LD_INT 2
42964: ARRAY
42965: PPUSH
42966: CALL_OW 488
42970: NOT
42971: OR
42972: IFTRUE 42989
42974: PUSH
42975: LD_VAR 0 13
42979: PPUSH
42980: CALL_OW 247
42984: PUSH
42985: LD_INT 3
42987: EQUAL
42988: OR
42989: IFFALSE 42995
// exit ;
42991: POP
42992: POP
42993: GO 43547
// if not tmp then
42995: LD_VAR 0 13
42999: NOT
43000: IFFALSE 43004
// continue ;
43002: GO 42856
// result := true ;
43004: LD_ADDR_VAR 0 8
43008: PUSH
43009: LD_INT 1
43011: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43012: LD_VAR 0 6
43016: IFFALSE 43033
43018: PUSH
43019: LD_VAR 0 13
43023: PPUSH
43024: CALL_OW 247
43028: PUSH
43029: LD_INT 2
43031: EQUAL
43032: AND
43033: IFFALSE 43050
43035: PUSH
43036: LD_VAR 0 13
43040: PPUSH
43041: CALL_OW 263
43045: PUSH
43046: LD_INT 1
43048: EQUAL
43049: AND
43050: IFFALSE 43214
// begin if IsDrivenBy ( tmp ) then
43052: LD_VAR 0 13
43056: PPUSH
43057: CALL_OW 311
43061: IFFALSE 43065
// continue ;
43063: GO 42856
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43065: LD_VAR 0 6
43069: PPUSH
43070: LD_INT 3
43072: PUSH
43073: LD_INT 60
43075: PUSH
43076: EMPTY
43077: LIST
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 3
43085: PUSH
43086: LD_INT 55
43088: PUSH
43089: EMPTY
43090: LIST
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PPUSH
43100: CALL_OW 72
43104: IFFALSE 43212
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43106: LD_ADDR_VAR 0 18
43110: PUSH
43111: LD_VAR 0 6
43115: PPUSH
43116: LD_INT 3
43118: PUSH
43119: LD_INT 60
43121: PUSH
43122: EMPTY
43123: LIST
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 3
43131: PUSH
43132: LD_INT 55
43134: PUSH
43135: EMPTY
43136: LIST
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PPUSH
43146: CALL_OW 72
43150: PUSH
43151: LD_INT 1
43153: ARRAY
43154: ST_TO_ADDR
// if IsInUnit ( driver ) then
43155: LD_VAR 0 18
43159: PPUSH
43160: CALL_OW 310
43164: IFFALSE 43175
// ComExit ( driver ) ;
43166: LD_VAR 0 18
43170: PPUSH
43171: CALL 68828 0 1
// AddComEnterUnit ( driver , tmp ) ;
43175: LD_VAR 0 18
43179: PPUSH
43180: LD_VAR 0 13
43184: PPUSH
43185: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43189: LD_VAR 0 18
43193: PPUSH
43194: LD_VAR 0 7
43198: PPUSH
43199: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43203: LD_VAR 0 18
43207: PPUSH
43208: CALL_OW 181
// end ; continue ;
43212: GO 42856
// end ; if not cleaners or not tmp in cleaners then
43214: LD_VAR 0 6
43218: NOT
43219: IFTRUE 43234
43221: PUSH
43222: LD_VAR 0 13
43226: PUSH
43227: LD_VAR 0 6
43231: IN
43232: NOT
43233: OR
43234: IFFALSE 43543
// begin if dep then
43236: LD_VAR 0 17
43240: IFFALSE 43376
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43242: LD_ADDR_VAR 0 16
43246: PUSH
43247: LD_VAR 0 17
43251: PUSH
43252: LD_INT 1
43254: ARRAY
43255: PPUSH
43256: CALL_OW 250
43260: PPUSH
43261: LD_VAR 0 17
43265: PUSH
43266: LD_INT 1
43268: ARRAY
43269: PPUSH
43270: CALL_OW 254
43274: PPUSH
43275: LD_INT 5
43277: PPUSH
43278: CALL_OW 272
43282: PUSH
43283: LD_VAR 0 17
43287: PUSH
43288: LD_INT 1
43290: ARRAY
43291: PPUSH
43292: CALL_OW 251
43296: PPUSH
43297: LD_VAR 0 17
43301: PUSH
43302: LD_INT 1
43304: ARRAY
43305: PPUSH
43306: CALL_OW 254
43310: PPUSH
43311: LD_INT 5
43313: PPUSH
43314: CALL_OW 273
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43323: LD_VAR 0 16
43327: PUSH
43328: LD_INT 1
43330: ARRAY
43331: PPUSH
43332: LD_VAR 0 16
43336: PUSH
43337: LD_INT 2
43339: ARRAY
43340: PPUSH
43341: CALL_OW 488
43345: IFFALSE 43376
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43347: LD_VAR 0 13
43351: PPUSH
43352: LD_VAR 0 16
43356: PUSH
43357: LD_INT 1
43359: ARRAY
43360: PPUSH
43361: LD_VAR 0 16
43365: PUSH
43366: LD_INT 2
43368: ARRAY
43369: PPUSH
43370: CALL_OW 111
// continue ;
43374: GO 42856
// end ; end ; r := GetDir ( tmp ) ;
43376: LD_ADDR_VAR 0 15
43380: PUSH
43381: LD_VAR 0 13
43385: PPUSH
43386: CALL_OW 254
43390: ST_TO_ADDR
// if r = 5 then
43391: LD_VAR 0 15
43395: PUSH
43396: LD_INT 5
43398: EQUAL
43399: IFFALSE 43409
// r := 0 ;
43401: LD_ADDR_VAR 0 15
43405: PUSH
43406: LD_INT 0
43408: ST_TO_ADDR
// for j = r to 5 do
43409: LD_ADDR_VAR 0 10
43413: PUSH
43414: DOUBLE
43415: LD_VAR 0 15
43419: DEC
43420: ST_TO_ADDR
43421: LD_INT 5
43423: PUSH
43424: FOR_TO
43425: IFFALSE 43541
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43427: LD_ADDR_VAR 0 11
43431: PUSH
43432: LD_VAR 0 13
43436: PPUSH
43437: CALL_OW 250
43441: PPUSH
43442: LD_VAR 0 10
43446: PPUSH
43447: LD_INT 2
43449: PPUSH
43450: CALL_OW 272
43454: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43455: LD_ADDR_VAR 0 12
43459: PUSH
43460: LD_VAR 0 13
43464: PPUSH
43465: CALL_OW 251
43469: PPUSH
43470: LD_VAR 0 10
43474: PPUSH
43475: LD_INT 2
43477: PPUSH
43478: CALL_OW 273
43482: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43483: LD_VAR 0 11
43487: PPUSH
43488: LD_VAR 0 12
43492: PPUSH
43493: CALL_OW 488
43497: IFFALSE 43516
43499: PUSH
43500: LD_VAR 0 11
43504: PPUSH
43505: LD_VAR 0 12
43509: PPUSH
43510: CALL_OW 428
43514: NOT
43515: AND
43516: IFFALSE 43539
// begin ComMoveXY ( tmp , _x , _y ) ;
43518: LD_VAR 0 13
43522: PPUSH
43523: LD_VAR 0 11
43527: PPUSH
43528: LD_VAR 0 12
43532: PPUSH
43533: CALL_OW 111
// break ;
43537: GO 43541
// end ; end ;
43539: GO 43424
43541: POP
43542: POP
// end ; end ;
43543: GO 42856
43545: POP
43546: POP
// end ;
43547: LD_VAR 0 8
43551: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43552: LD_INT 0
43554: PPUSH
// result := true ;
43555: LD_ADDR_VAR 0 3
43559: PUSH
43560: LD_INT 1
43562: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43563: LD_VAR 0 2
43567: PUSH
43568: LD_INT 24
43570: DOUBLE
43571: EQUAL
43572: IFTRUE 43582
43574: LD_INT 33
43576: DOUBLE
43577: EQUAL
43578: IFTRUE 43582
43580: GO 43607
43582: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43583: LD_ADDR_VAR 0 3
43587: PUSH
43588: LD_INT 32
43590: PPUSH
43591: LD_VAR 0 1
43595: PPUSH
43596: CALL_OW 321
43600: PUSH
43601: LD_INT 2
43603: EQUAL
43604: ST_TO_ADDR
43605: GO 43923
43607: LD_INT 20
43609: DOUBLE
43610: EQUAL
43611: IFTRUE 43615
43613: GO 43640
43615: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43616: LD_ADDR_VAR 0 3
43620: PUSH
43621: LD_INT 6
43623: PPUSH
43624: LD_VAR 0 1
43628: PPUSH
43629: CALL_OW 321
43633: PUSH
43634: LD_INT 2
43636: EQUAL
43637: ST_TO_ADDR
43638: GO 43923
43640: LD_INT 22
43642: DOUBLE
43643: EQUAL
43644: IFTRUE 43654
43646: LD_INT 36
43648: DOUBLE
43649: EQUAL
43650: IFTRUE 43654
43652: GO 43679
43654: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43655: LD_ADDR_VAR 0 3
43659: PUSH
43660: LD_INT 15
43662: PPUSH
43663: LD_VAR 0 1
43667: PPUSH
43668: CALL_OW 321
43672: PUSH
43673: LD_INT 2
43675: EQUAL
43676: ST_TO_ADDR
43677: GO 43923
43679: LD_INT 30
43681: DOUBLE
43682: EQUAL
43683: IFTRUE 43687
43685: GO 43712
43687: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43688: LD_ADDR_VAR 0 3
43692: PUSH
43693: LD_INT 20
43695: PPUSH
43696: LD_VAR 0 1
43700: PPUSH
43701: CALL_OW 321
43705: PUSH
43706: LD_INT 2
43708: EQUAL
43709: ST_TO_ADDR
43710: GO 43923
43712: LD_INT 28
43714: DOUBLE
43715: EQUAL
43716: IFTRUE 43726
43718: LD_INT 21
43720: DOUBLE
43721: EQUAL
43722: IFTRUE 43726
43724: GO 43751
43726: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43727: LD_ADDR_VAR 0 3
43731: PUSH
43732: LD_INT 21
43734: PPUSH
43735: LD_VAR 0 1
43739: PPUSH
43740: CALL_OW 321
43744: PUSH
43745: LD_INT 2
43747: EQUAL
43748: ST_TO_ADDR
43749: GO 43923
43751: LD_INT 16
43753: DOUBLE
43754: EQUAL
43755: IFTRUE 43759
43757: GO 43784
43759: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43760: LD_ADDR_VAR 0 3
43764: PUSH
43765: LD_INT 84
43767: PPUSH
43768: LD_VAR 0 1
43772: PPUSH
43773: CALL_OW 321
43777: PUSH
43778: LD_INT 2
43780: EQUAL
43781: ST_TO_ADDR
43782: GO 43923
43784: LD_INT 19
43786: DOUBLE
43787: EQUAL
43788: IFTRUE 43798
43790: LD_INT 23
43792: DOUBLE
43793: EQUAL
43794: IFTRUE 43798
43796: GO 43823
43798: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43799: LD_ADDR_VAR 0 3
43803: PUSH
43804: LD_INT 83
43806: PPUSH
43807: LD_VAR 0 1
43811: PPUSH
43812: CALL_OW 321
43816: PUSH
43817: LD_INT 2
43819: EQUAL
43820: ST_TO_ADDR
43821: GO 43923
43823: LD_INT 17
43825: DOUBLE
43826: EQUAL
43827: IFTRUE 43831
43829: GO 43856
43831: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43832: LD_ADDR_VAR 0 3
43836: PUSH
43837: LD_INT 39
43839: PPUSH
43840: LD_VAR 0 1
43844: PPUSH
43845: CALL_OW 321
43849: PUSH
43850: LD_INT 2
43852: EQUAL
43853: ST_TO_ADDR
43854: GO 43923
43856: LD_INT 18
43858: DOUBLE
43859: EQUAL
43860: IFTRUE 43864
43862: GO 43889
43864: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43865: LD_ADDR_VAR 0 3
43869: PUSH
43870: LD_INT 40
43872: PPUSH
43873: LD_VAR 0 1
43877: PPUSH
43878: CALL_OW 321
43882: PUSH
43883: LD_INT 2
43885: EQUAL
43886: ST_TO_ADDR
43887: GO 43923
43889: LD_INT 27
43891: DOUBLE
43892: EQUAL
43893: IFTRUE 43897
43895: GO 43922
43897: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43898: LD_ADDR_VAR 0 3
43902: PUSH
43903: LD_INT 35
43905: PPUSH
43906: LD_VAR 0 1
43910: PPUSH
43911: CALL_OW 321
43915: PUSH
43916: LD_INT 2
43918: EQUAL
43919: ST_TO_ADDR
43920: GO 43923
43922: POP
// end ;
43923: LD_VAR 0 3
43927: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43928: LD_INT 0
43930: PPUSH
43931: PPUSH
43932: PPUSH
43933: PPUSH
43934: PPUSH
43935: PPUSH
43936: PPUSH
43937: PPUSH
43938: PPUSH
43939: PPUSH
43940: PPUSH
// result := false ;
43941: LD_ADDR_VAR 0 6
43945: PUSH
43946: LD_INT 0
43948: ST_TO_ADDR
// if btype = b_depot then
43949: LD_VAR 0 2
43953: PUSH
43954: LD_INT 0
43956: EQUAL
43957: IFFALSE 43969
// begin result := true ;
43959: LD_ADDR_VAR 0 6
43963: PUSH
43964: LD_INT 1
43966: ST_TO_ADDR
// exit ;
43967: GO 44823
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43969: LD_VAR 0 1
43973: NOT
43974: IFTRUE 43999
43976: PUSH
43977: LD_VAR 0 1
43981: PPUSH
43982: CALL_OW 266
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: IN
43997: NOT
43998: OR
43999: IFTRUE 44008
44001: PUSH
44002: LD_VAR 0 2
44006: NOT
44007: OR
44008: IFTRUE 44044
44010: PUSH
44011: LD_VAR 0 5
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: LD_INT 2
44024: PUSH
44025: LD_INT 3
44027: PUSH
44028: LD_INT 4
44030: PUSH
44031: LD_INT 5
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: IN
44042: NOT
44043: OR
44044: IFTRUE 44063
44046: PUSH
44047: LD_VAR 0 3
44051: PPUSH
44052: LD_VAR 0 4
44056: PPUSH
44057: CALL_OW 488
44061: NOT
44062: OR
44063: IFFALSE 44067
// exit ;
44065: GO 44823
// side := GetSide ( depot ) ;
44067: LD_ADDR_VAR 0 9
44071: PUSH
44072: LD_VAR 0 1
44076: PPUSH
44077: CALL_OW 255
44081: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44082: LD_VAR 0 9
44086: PPUSH
44087: LD_VAR 0 2
44091: PPUSH
44092: CALL 43552 0 2
44096: NOT
44097: IFFALSE 44101
// exit ;
44099: GO 44823
// pom := GetBase ( depot ) ;
44101: LD_ADDR_VAR 0 10
44105: PUSH
44106: LD_VAR 0 1
44110: PPUSH
44111: CALL_OW 274
44115: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44116: LD_ADDR_VAR 0 11
44120: PUSH
44121: LD_VAR 0 2
44125: PPUSH
44126: LD_VAR 0 1
44130: PPUSH
44131: CALL_OW 248
44135: PPUSH
44136: CALL_OW 450
44140: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44141: LD_VAR 0 10
44145: PPUSH
44146: LD_INT 1
44148: PPUSH
44149: CALL_OW 275
44153: PUSH
44154: LD_VAR 0 11
44158: PUSH
44159: LD_INT 1
44161: ARRAY
44162: GREATEREQUAL
44163: IFFALSE 44189
44165: PUSH
44166: LD_VAR 0 10
44170: PPUSH
44171: LD_INT 2
44173: PPUSH
44174: CALL_OW 275
44178: PUSH
44179: LD_VAR 0 11
44183: PUSH
44184: LD_INT 2
44186: ARRAY
44187: GREATEREQUAL
44188: AND
44189: IFFALSE 44215
44191: PUSH
44192: LD_VAR 0 10
44196: PPUSH
44197: LD_INT 3
44199: PPUSH
44200: CALL_OW 275
44204: PUSH
44205: LD_VAR 0 11
44209: PUSH
44210: LD_INT 3
44212: ARRAY
44213: GREATEREQUAL
44214: AND
44215: NOT
44216: IFFALSE 44220
// exit ;
44218: GO 44823
// if GetBType ( depot ) = b_depot then
44220: LD_VAR 0 1
44224: PPUSH
44225: CALL_OW 266
44229: PUSH
44230: LD_INT 0
44232: EQUAL
44233: IFFALSE 44245
// dist := 28 else
44235: LD_ADDR_VAR 0 14
44239: PUSH
44240: LD_INT 28
44242: ST_TO_ADDR
44243: GO 44253
// dist := 36 ;
44245: LD_ADDR_VAR 0 14
44249: PUSH
44250: LD_INT 36
44252: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44253: LD_VAR 0 1
44257: PPUSH
44258: LD_VAR 0 3
44262: PPUSH
44263: LD_VAR 0 4
44267: PPUSH
44268: CALL_OW 297
44272: PUSH
44273: LD_VAR 0 14
44277: GREATER
44278: IFFALSE 44282
// exit ;
44280: GO 44823
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44282: LD_ADDR_VAR 0 12
44286: PUSH
44287: LD_VAR 0 2
44291: PPUSH
44292: LD_VAR 0 3
44296: PPUSH
44297: LD_VAR 0 4
44301: PPUSH
44302: LD_VAR 0 5
44306: PPUSH
44307: LD_VAR 0 1
44311: PPUSH
44312: CALL_OW 248
44316: PPUSH
44317: LD_INT 0
44319: PPUSH
44320: CALL 44828 0 6
44324: ST_TO_ADDR
// if not hexes then
44325: LD_VAR 0 12
44329: NOT
44330: IFFALSE 44334
// exit ;
44332: GO 44823
// hex := GetHexInfo ( x , y ) ;
44334: LD_ADDR_VAR 0 15
44338: PUSH
44339: LD_VAR 0 3
44343: PPUSH
44344: LD_VAR 0 4
44348: PPUSH
44349: CALL_OW 546
44353: ST_TO_ADDR
// if hex [ 1 ] then
44354: LD_VAR 0 15
44358: PUSH
44359: LD_INT 1
44361: ARRAY
44362: IFFALSE 44366
// exit ;
44364: GO 44823
// height := hex [ 2 ] ;
44366: LD_ADDR_VAR 0 13
44370: PUSH
44371: LD_VAR 0 15
44375: PUSH
44376: LD_INT 2
44378: ARRAY
44379: ST_TO_ADDR
// for i = 1 to hexes do
44380: LD_ADDR_VAR 0 7
44384: PUSH
44385: DOUBLE
44386: LD_INT 1
44388: DEC
44389: ST_TO_ADDR
44390: LD_VAR 0 12
44394: PUSH
44395: FOR_TO
44396: IFFALSE 44740
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44398: LD_VAR 0 12
44402: PUSH
44403: LD_VAR 0 7
44407: ARRAY
44408: PUSH
44409: LD_INT 1
44411: ARRAY
44412: PPUSH
44413: LD_VAR 0 12
44417: PUSH
44418: LD_VAR 0 7
44422: ARRAY
44423: PUSH
44424: LD_INT 2
44426: ARRAY
44427: PPUSH
44428: CALL_OW 488
44432: NOT
44433: IFTRUE 44475
44435: PUSH
44436: LD_VAR 0 12
44440: PUSH
44441: LD_VAR 0 7
44445: ARRAY
44446: PUSH
44447: LD_INT 1
44449: ARRAY
44450: PPUSH
44451: LD_VAR 0 12
44455: PUSH
44456: LD_VAR 0 7
44460: ARRAY
44461: PUSH
44462: LD_INT 2
44464: ARRAY
44465: PPUSH
44466: CALL_OW 428
44470: PUSH
44471: LD_INT 0
44473: GREATER
44474: OR
44475: IFTRUE 44513
44477: PUSH
44478: LD_VAR 0 12
44482: PUSH
44483: LD_VAR 0 7
44487: ARRAY
44488: PUSH
44489: LD_INT 1
44491: ARRAY
44492: PPUSH
44493: LD_VAR 0 12
44497: PUSH
44498: LD_VAR 0 7
44502: ARRAY
44503: PUSH
44504: LD_INT 2
44506: ARRAY
44507: PPUSH
44508: CALL_OW 351
44512: OR
44513: IFFALSE 44519
// exit ;
44515: POP
44516: POP
44517: GO 44823
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44519: LD_ADDR_VAR 0 8
44523: PUSH
44524: LD_VAR 0 12
44528: PUSH
44529: LD_VAR 0 7
44533: ARRAY
44534: PUSH
44535: LD_INT 1
44537: ARRAY
44538: PPUSH
44539: LD_VAR 0 12
44543: PUSH
44544: LD_VAR 0 7
44548: ARRAY
44549: PUSH
44550: LD_INT 2
44552: ARRAY
44553: PPUSH
44554: CALL_OW 546
44558: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44559: LD_VAR 0 8
44563: PUSH
44564: LD_INT 1
44566: ARRAY
44567: IFTRUE 44589
44569: PUSH
44570: LD_VAR 0 8
44574: PUSH
44575: LD_INT 2
44577: ARRAY
44578: PUSH
44579: LD_VAR 0 13
44583: PUSH
44584: LD_INT 2
44586: PLUS
44587: GREATER
44588: OR
44589: IFTRUE 44611
44591: PUSH
44592: LD_VAR 0 8
44596: PUSH
44597: LD_INT 2
44599: ARRAY
44600: PUSH
44601: LD_VAR 0 13
44605: PUSH
44606: LD_INT 2
44608: MINUS
44609: LESS
44610: OR
44611: IFTRUE 44679
44613: PUSH
44614: LD_VAR 0 8
44618: PUSH
44619: LD_INT 3
44621: ARRAY
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 8
44628: PUSH
44629: LD_INT 9
44631: PUSH
44632: LD_INT 10
44634: PUSH
44635: LD_INT 11
44637: PUSH
44638: LD_INT 12
44640: PUSH
44641: LD_INT 13
44643: PUSH
44644: LD_INT 16
44646: PUSH
44647: LD_INT 17
44649: PUSH
44650: LD_INT 18
44652: PUSH
44653: LD_INT 19
44655: PUSH
44656: LD_INT 20
44658: PUSH
44659: LD_INT 21
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: IN
44677: NOT
44678: OR
44679: IFTRUE 44692
44681: PUSH
44682: LD_VAR 0 8
44686: PUSH
44687: LD_INT 5
44689: ARRAY
44690: NOT
44691: OR
44692: IFTRUE 44732
44694: PUSH
44695: LD_VAR 0 8
44699: PUSH
44700: LD_INT 6
44702: ARRAY
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 2
44709: PUSH
44710: LD_INT 7
44712: PUSH
44713: LD_INT 9
44715: PUSH
44716: LD_INT 10
44718: PUSH
44719: LD_INT 11
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: IN
44730: NOT
44731: OR
44732: IFFALSE 44738
// exit ;
44734: POP
44735: POP
44736: GO 44823
// end ;
44738: GO 44395
44740: POP
44741: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44742: LD_VAR 0 9
44746: PPUSH
44747: LD_VAR 0 3
44751: PPUSH
44752: LD_VAR 0 4
44756: PPUSH
44757: LD_INT 20
44759: PPUSH
44760: CALL 36642 0 4
44764: PUSH
44765: LD_INT 4
44767: ARRAY
44768: IFFALSE 44772
// exit ;
44770: GO 44823
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44772: LD_VAR 0 2
44776: PUSH
44777: LD_INT 29
44779: PUSH
44780: LD_INT 30
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: IN
44787: IFFALSE 44811
44789: PUSH
44790: LD_VAR 0 3
44794: PPUSH
44795: LD_VAR 0 4
44799: PPUSH
44800: LD_VAR 0 9
44804: PPUSH
44805: CALL_OW 440
44809: NOT
44810: AND
44811: IFFALSE 44815
// exit ;
44813: GO 44823
// result := true ;
44815: LD_ADDR_VAR 0 6
44819: PUSH
44820: LD_INT 1
44822: ST_TO_ADDR
// end ;
44823: LD_VAR 0 6
44827: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44828: LD_INT 0
44830: PPUSH
44831: PPUSH
44832: PPUSH
44833: PPUSH
44834: PPUSH
44835: PPUSH
44836: PPUSH
44837: PPUSH
44838: PPUSH
44839: PPUSH
44840: PPUSH
44841: PPUSH
44842: PPUSH
44843: PPUSH
44844: PPUSH
44845: PPUSH
44846: PPUSH
44847: PPUSH
44848: PPUSH
44849: PPUSH
44850: PPUSH
44851: PPUSH
44852: PPUSH
44853: PPUSH
44854: PPUSH
44855: PPUSH
44856: PPUSH
44857: PPUSH
44858: PPUSH
44859: PPUSH
44860: PPUSH
44861: PPUSH
44862: PPUSH
44863: PPUSH
44864: PPUSH
44865: PPUSH
44866: PPUSH
44867: PPUSH
44868: PPUSH
44869: PPUSH
44870: PPUSH
44871: PPUSH
44872: PPUSH
44873: PPUSH
44874: PPUSH
44875: PPUSH
44876: PPUSH
44877: PPUSH
44878: PPUSH
44879: PPUSH
44880: PPUSH
44881: PPUSH
44882: PPUSH
44883: PPUSH
44884: PPUSH
44885: PPUSH
44886: PPUSH
44887: PPUSH
// result = [ ] ;
44888: LD_ADDR_VAR 0 7
44892: PUSH
44893: EMPTY
44894: ST_TO_ADDR
// temp_list = [ ] ;
44895: LD_ADDR_VAR 0 9
44899: PUSH
44900: EMPTY
44901: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44902: LD_VAR 0 4
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: LD_INT 3
44918: PUSH
44919: LD_INT 4
44921: PUSH
44922: LD_INT 5
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: IN
44933: NOT
44934: IFTRUE 44977
44936: PUSH
44937: LD_VAR 0 1
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: IN
44952: IFFALSE 44976
44954: PUSH
44955: LD_VAR 0 5
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 2
44965: PUSH
44966: LD_INT 3
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: IN
44974: NOT
44975: AND
44976: OR
44977: IFFALSE 44981
// exit ;
44979: GO 63380
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44981: LD_VAR 0 1
44985: PUSH
44986: LD_INT 6
44988: PUSH
44989: LD_INT 7
44991: PUSH
44992: LD_INT 8
44994: PUSH
44995: LD_INT 13
44997: PUSH
44998: LD_INT 12
45000: PUSH
45001: LD_INT 15
45003: PUSH
45004: LD_INT 11
45006: PUSH
45007: LD_INT 14
45009: PUSH
45010: LD_INT 10
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: IN
45024: IFFALSE 45034
// btype = b_lab ;
45026: LD_ADDR_VAR 0 1
45030: PUSH
45031: LD_INT 6
45033: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45034: LD_VAR 0 6
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 2
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: LIST
45052: IN
45053: NOT
45054: IFTRUE 45122
45056: PUSH
45057: LD_VAR 0 1
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: LD_INT 2
45070: PUSH
45071: LD_INT 3
45073: PUSH
45074: LD_INT 6
45076: PUSH
45077: LD_INT 36
45079: PUSH
45080: LD_INT 4
45082: PUSH
45083: LD_INT 5
45085: PUSH
45086: LD_INT 31
45088: PUSH
45089: LD_INT 32
45091: PUSH
45092: LD_INT 33
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: IN
45108: NOT
45109: IFFALSE 45121
45111: PUSH
45112: LD_VAR 0 6
45116: PUSH
45117: LD_INT 1
45119: EQUAL
45120: AND
45121: OR
45122: IFTRUE 45154
45124: PUSH
45125: LD_VAR 0 1
45129: PUSH
45130: LD_INT 2
45132: PUSH
45133: LD_INT 3
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: IN
45140: NOT
45141: IFFALSE 45153
45143: PUSH
45144: LD_VAR 0 6
45148: PUSH
45149: LD_INT 2
45151: EQUAL
45152: AND
45153: OR
45154: IFFALSE 45164
// mode = 0 ;
45156: LD_ADDR_VAR 0 6
45160: PUSH
45161: LD_INT 0
45163: ST_TO_ADDR
// case mode of 0 :
45164: LD_VAR 0 6
45168: PUSH
45169: LD_INT 0
45171: DOUBLE
45172: EQUAL
45173: IFTRUE 45177
45175: GO 56630
45177: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45178: LD_ADDR_VAR 0 11
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 2
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: LD_INT 3
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 3
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: LD_INT 2
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45371: LD_ADDR_VAR 0 12
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: LD_INT 1
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 2
45505: NEG
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 2
45517: NEG
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 3
45528: NEG
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 3
45539: NEG
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45567: LD_ADDR_VAR 0 13
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: LD_INT 3
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 3
45726: NEG
45727: PUSH
45728: LD_INT 2
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 3
45738: NEG
45739: PUSH
45740: LD_INT 3
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45766: LD_ADDR_VAR 0 14
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: LD_INT 2
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: LD_INT 2
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: LD_INT 3
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: LD_INT 3
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45962: LD_ADDR_VAR 0 15
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 2
46096: NEG
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 3
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 3
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46155: LD_ADDR_VAR 0 16
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: LD_INT 1
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 2
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: LD_INT 2
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 3
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 3
46312: PUSH
46313: LD_INT 3
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: LD_INT 3
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46348: LD_ADDR_VAR 0 17
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 2
46547: NEG
46548: PUSH
46549: LD_INT 2
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46578: LD_ADDR_VAR 0 18
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 2
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: LD_INT 2
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: NEG
46778: PUSH
46779: LD_INT 2
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46808: LD_ADDR_VAR 0 19
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: LD_INT 2
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: NEG
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47038: LD_ADDR_VAR 0 20
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: LD_INT 2
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: LD_INT 2
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47268: LD_ADDR_VAR 0 21
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: LD_INT 2
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 2
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: NEG
47468: PUSH
47469: LD_INT 2
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47498: LD_ADDR_VAR 0 22
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: LD_INT 2
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 2
47674: NEG
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: NEG
47698: PUSH
47699: LD_INT 2
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47728: LD_ADDR_VAR 0 23
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: LD_INT 2
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: LD_INT 2
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 2
47904: NEG
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: NEG
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 2
47939: NEG
47940: PUSH
47941: LD_INT 3
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: LD_INT 3
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: LD_INT 2
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48008: LD_ADDR_VAR 0 24
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: LD_INT 2
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 2
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 2
48143: PUSH
48144: LD_INT 2
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 2
48195: NEG
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 2
48207: NEG
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 3
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 3
48251: PUSH
48252: LD_INT 2
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48284: LD_ADDR_VAR 0 25
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 3
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 3
48505: PUSH
48506: LD_INT 2
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: LD_INT 3
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 3
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48558: LD_ADDR_VAR 0 26
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: LD_INT 2
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: LD_INT 2
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: LD_INT 3
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: LD_INT 3
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: LD_INT 2
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48834: LD_ADDR_VAR 0 27
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: LD_INT 2
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: NEG
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 3
49067: NEG
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 3
49079: NEG
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49114: LD_ADDR_VAR 0 28
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: LD_INT 2
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: LD_INT 2
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: LD_INT 2
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 2
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: LD_INT 3
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 3
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 3
49349: NEG
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 3
49361: NEG
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49396: LD_ADDR_VAR 0 29
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 2
49574: NEG
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 2
49586: NEG
49587: PUSH
49588: LD_INT 3
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 2
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 3
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: LD_INT 3
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 3
49640: NEG
49641: PUSH
49642: LD_INT 2
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49675: LD_ADDR_VAR 0 30
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: LD_INT 1
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: LD_INT 2
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: LD_INT 2
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: LD_INT 3
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 3
49887: PUSH
49888: LD_INT 2
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: LD_INT 3
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 3
49918: NEG
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49953: LD_ADDR_VAR 0 31
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 2
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 2
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 3
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 3
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 3
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: LD_INT 2
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 3
50196: NEG
50197: PUSH
50198: LD_INT 2
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50231: LD_ADDR_VAR 0 32
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: LD_INT 3
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: LD_INT 2
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 3
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 2
50453: PUSH
50454: LD_INT 3
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: NEG
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 3
50474: NEG
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50509: LD_ADDR_VAR 0 33
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: LD_INT 2
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 2
50664: NEG
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 2
50687: NEG
50688: PUSH
50689: LD_INT 2
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: LD_INT 3
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 3
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: LD_INT 3
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: LD_INT 2
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 3
50753: NEG
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50788: LD_ADDR_VAR 0 34
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: LD_INT 2
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 2
50955: NEG
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 2
50967: NEG
50968: PUSH
50969: LD_INT 2
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: LD_INT 3
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: LD_INT 2
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 3
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 2
51012: PUSH
51013: LD_INT 3
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 3
51033: NEG
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51068: LD_ADDR_VAR 0 35
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51180: LD_ADDR_VAR 0 36
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: LD_INT 2
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 2
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51292: LD_ADDR_VAR 0 37
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51404: LD_ADDR_VAR 0 38
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51516: LD_ADDR_VAR 0 39
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: LD_INT 2
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51628: LD_ADDR_VAR 0 40
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51740: LD_ADDR_VAR 0 41
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 2
51895: NEG
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: NEG
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 2
51930: NEG
51931: PUSH
51932: LD_INT 3
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 3
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 3
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 3
51973: PUSH
51974: LD_INT 2
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 3
51983: PUSH
51984: LD_INT 3
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 2
51993: PUSH
51994: LD_INT 3
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 2
52003: NEG
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 3
52014: NEG
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 3
52025: NEG
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 3
52037: NEG
52038: PUSH
52039: LD_INT 2
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 3
52049: NEG
52050: PUSH
52051: LD_INT 3
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52090: LD_ADDR_VAR 0 42
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 2
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 2
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: LD_INT 2
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: LD_INT 3
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: LD_INT 3
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 3
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 3
52326: PUSH
52327: LD_INT 2
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 3
52336: PUSH
52337: LD_INT 3
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: LD_INT 3
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: LD_INT 3
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 3
52387: NEG
52388: PUSH
52389: LD_INT 2
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 3
52399: NEG
52400: PUSH
52401: LD_INT 3
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52440: LD_ADDR_VAR 0 43
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: LD_INT 2
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 2
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 2
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: LD_INT 2
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 2
52617: NEG
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: LD_INT 3
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 3
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 3
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 3
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: LD_INT 3
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: LD_INT 3
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: LD_INT 2
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 2
52725: NEG
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 3
52736: NEG
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 3
52747: NEG
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52788: LD_ADDR_VAR 0 44
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 2
52943: NEG
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 2
52954: NEG
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: LD_INT 2
52970: NEG
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 2
52978: NEG
52979: PUSH
52980: LD_INT 3
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 3
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 3
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 3
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 3
53031: PUSH
53032: LD_INT 3
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 2
53041: PUSH
53042: LD_INT 3
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 3
53062: NEG
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 3
53073: NEG
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 3
53085: NEG
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 3
53097: NEG
53098: PUSH
53099: LD_INT 3
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53138: LD_ADDR_VAR 0 45
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: LD_INT 2
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: NEG
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 2
53316: NEG
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: NEG
53329: PUSH
53330: LD_INT 3
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: LD_INT 3
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: LD_INT 3
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 3
53374: PUSH
53375: LD_INT 2
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: LD_INT 3
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: LD_INT 3
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: LD_INT 3
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: LD_INT 3
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: LD_INT 2
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 3
53435: NEG
53436: PUSH
53437: LD_INT 2
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 3
53447: NEG
53448: PUSH
53449: LD_INT 3
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53488: LD_ADDR_VAR 0 46
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: LD_INT 2
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: LD_INT 2
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: LD_INT 2
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 2
53654: NEG
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: LD_INT 3
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: LD_INT 3
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 2
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 3
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 3
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 3
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 3
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 3
53784: NEG
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 3
53795: NEG
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53836: LD_ADDR_VAR 0 47
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: LD_INT 2
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 2
53951: NEG
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: NEG
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53987: LD_ADDR_VAR 0 48
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 2
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54134: LD_ADDR_VAR 0 49
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: LD_INT 2
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54278: LD_ADDR_VAR 0 50
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 2
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: LD_INT 2
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: LD_INT 2
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54422: LD_ADDR_VAR 0 51
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: LD_INT 2
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: LD_INT 2
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: NEG
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54569: LD_ADDR_VAR 0 52
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 2
54673: NEG
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: LD_INT 2
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54720: LD_ADDR_VAR 0 53
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: LD_INT 2
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: LD_INT 2
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 2
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 2
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: LD_INT 2
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54950: LD_ADDR_VAR 0 54
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 2
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55180: LD_ADDR_VAR 0 55
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: LD_INT 2
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: LD_INT 2
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: NEG
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: NEG
55380: PUSH
55381: LD_INT 2
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55410: LD_ADDR_VAR 0 56
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: LD_INT 2
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 2
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 2
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: LD_INT 2
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55640: LD_ADDR_VAR 0 57
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 2
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: LD_INT 2
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: NEG
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55870: LD_ADDR_VAR 0 58
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 2
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: LD_INT 2
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: LD_INT 2
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56100: LD_ADDR_VAR 0 59
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56188: LD_ADDR_VAR 0 60
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56276: LD_ADDR_VAR 0 61
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56364: LD_ADDR_VAR 0 62
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56452: LD_ADDR_VAR 0 63
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56540: LD_ADDR_VAR 0 64
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: ST_TO_ADDR
// end ; 1 :
56628: GO 62525
56630: LD_INT 1
56632: DOUBLE
56633: EQUAL
56634: IFTRUE 56638
56636: GO 59261
56638: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56639: LD_ADDR_VAR 0 11
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: LD_INT 3
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: LD_INT 2
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: LIST
56682: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56683: LD_ADDR_VAR 0 12
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 3
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: LIST
56723: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56724: LD_ADDR_VAR 0 13
56728: PUSH
56729: LD_INT 3
56731: PUSH
56732: LD_INT 2
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 3
56741: PUSH
56742: LD_INT 3
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 2
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: LIST
56763: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56764: LD_ADDR_VAR 0 14
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: LD_INT 3
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: LD_INT 2
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: LIST
56804: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56805: LD_ADDR_VAR 0 15
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 3
56823: NEG
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 3
56834: NEG
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: LIST
56848: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56849: LD_ADDR_VAR 0 16
56853: PUSH
56854: LD_INT 2
56856: NEG
56857: PUSH
56858: LD_INT 3
56860: NEG
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 3
56868: NEG
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 3
56880: NEG
56881: PUSH
56882: LD_INT 3
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: LIST
56894: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56895: LD_ADDR_VAR 0 17
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: LD_INT 3
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 3
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: LD_INT 2
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: LIST
56938: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56939: LD_ADDR_VAR 0 18
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 3
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 3
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: LIST
56979: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56980: LD_ADDR_VAR 0 19
56984: PUSH
56985: LD_INT 3
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 3
56997: PUSH
56998: LD_INT 3
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: LD_INT 3
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: LIST
57019: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57020: LD_ADDR_VAR 0 20
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: LD_INT 3
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: LD_INT 3
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 1
57047: NEG
57048: PUSH
57049: LD_INT 2
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: LIST
57060: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57061: LD_ADDR_VAR 0 21
57065: PUSH
57066: LD_INT 2
57068: NEG
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 3
57079: NEG
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 3
57090: NEG
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: LIST
57104: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57105: LD_ADDR_VAR 0 22
57109: PUSH
57110: LD_INT 2
57112: NEG
57113: PUSH
57114: LD_INT 3
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 3
57124: NEG
57125: PUSH
57126: LD_INT 2
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 3
57136: NEG
57137: PUSH
57138: LD_INT 3
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: LIST
57150: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57151: LD_ADDR_VAR 0 23
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: LD_INT 3
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: LD_INT 4
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: LD_INT 3
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: LIST
57194: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57195: LD_ADDR_VAR 0 24
57199: PUSH
57200: LD_INT 3
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 3
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 4
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: LIST
57235: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57236: LD_ADDR_VAR 0 25
57240: PUSH
57241: LD_INT 3
57243: PUSH
57244: LD_INT 3
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 4
57253: PUSH
57254: LD_INT 3
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 3
57263: PUSH
57264: LD_INT 4
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: LIST
57275: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57276: LD_ADDR_VAR 0 26
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: LD_INT 3
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: LD_INT 4
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: LD_INT 3
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: LIST
57316: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57317: LD_ADDR_VAR 0 27
57321: PUSH
57322: LD_INT 3
57324: NEG
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 3
57335: NEG
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 4
57346: NEG
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: LIST
57360: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57361: LD_ADDR_VAR 0 28
57365: PUSH
57366: LD_INT 3
57368: NEG
57369: PUSH
57370: LD_INT 3
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 3
57380: NEG
57381: PUSH
57382: LD_INT 4
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 4
57392: NEG
57393: PUSH
57394: LD_INT 3
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: LIST
57406: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57407: LD_ADDR_VAR 0 29
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: LD_INT 3
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: LD_INT 3
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: LD_INT 2
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 1
57448: NEG
57449: PUSH
57450: LD_INT 4
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 4
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: LD_INT 3
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: LD_INT 5
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: LD_INT 5
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: LD_INT 4
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: LD_INT 6
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: LD_INT 6
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: LD_INT 5
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57562: LD_ADDR_VAR 0 30
57566: PUSH
57567: LD_INT 2
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 3
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 3
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 4
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 4
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 4
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 5
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 5
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 5
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 6
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 6
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57705: LD_ADDR_VAR 0 31
57709: PUSH
57710: LD_INT 3
57712: PUSH
57713: LD_INT 2
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 3
57722: PUSH
57723: LD_INT 3
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: LD_INT 3
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 4
57742: PUSH
57743: LD_INT 3
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 4
57752: PUSH
57753: LD_INT 4
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 3
57762: PUSH
57763: LD_INT 4
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 5
57772: PUSH
57773: LD_INT 4
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 5
57782: PUSH
57783: LD_INT 5
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 4
57792: PUSH
57793: LD_INT 5
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 6
57802: PUSH
57803: LD_INT 5
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 6
57812: PUSH
57813: LD_INT 6
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 5
57822: PUSH
57823: LD_INT 6
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57844: LD_ADDR_VAR 0 32
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: LD_INT 3
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: LD_INT 3
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: LD_INT 4
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: LD_INT 4
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: LD_INT 3
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: LD_INT 5
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: LD_INT 5
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: LD_INT 4
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: LD_INT 6
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: LD_INT 6
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: LD_INT 5
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57987: LD_ADDR_VAR 0 33
57991: PUSH
57992: LD_INT 2
57994: NEG
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 3
58005: NEG
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 3
58016: NEG
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 3
58028: NEG
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 4
58039: NEG
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 4
58050: NEG
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 4
58062: NEG
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 5
58073: NEG
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 5
58084: NEG
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 5
58096: NEG
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 6
58107: NEG
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 6
58118: NEG
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58142: LD_ADDR_VAR 0 34
58146: PUSH
58147: LD_INT 2
58149: NEG
58150: PUSH
58151: LD_INT 3
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 3
58161: NEG
58162: PUSH
58163: LD_INT 2
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 3
58173: NEG
58174: PUSH
58175: LD_INT 3
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 3
58185: NEG
58186: PUSH
58187: LD_INT 4
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 4
58197: NEG
58198: PUSH
58199: LD_INT 3
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 4
58209: NEG
58210: PUSH
58211: LD_INT 4
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 4
58221: NEG
58222: PUSH
58223: LD_INT 5
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 5
58233: NEG
58234: PUSH
58235: LD_INT 4
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 5
58245: NEG
58246: PUSH
58247: LD_INT 5
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 5
58257: NEG
58258: PUSH
58259: LD_INT 6
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 6
58269: NEG
58270: PUSH
58271: LD_INT 5
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 6
58281: NEG
58282: PUSH
58283: LD_INT 6
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58305: LD_ADDR_VAR 0 41
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: LD_INT 2
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: LD_INT 3
58327: NEG
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: LD_INT 2
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: LIST
58348: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58349: LD_ADDR_VAR 0 42
58353: PUSH
58354: LD_INT 2
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 3
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: LIST
58389: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58390: LD_ADDR_VAR 0 43
58394: PUSH
58395: LD_INT 2
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 3
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: LD_INT 3
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: LIST
58429: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58430: LD_ADDR_VAR 0 44
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: LD_INT 2
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: LD_INT 3
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: NEG
58458: PUSH
58459: LD_INT 2
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: LIST
58470: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58471: LD_ADDR_VAR 0 45
58475: PUSH
58476: LD_INT 2
58478: NEG
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 3
58500: NEG
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: LIST
58514: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58515: LD_ADDR_VAR 0 46
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: LD_INT 2
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: NEG
58535: PUSH
58536: LD_INT 3
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 3
58546: NEG
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: LIST
58560: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58561: LD_ADDR_VAR 0 47
58565: PUSH
58566: LD_INT 2
58568: NEG
58569: PUSH
58570: LD_INT 3
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: LD_INT 3
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58594: LD_ADDR_VAR 0 48
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: LD_INT 2
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 2
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58625: LD_ADDR_VAR 0 49
58629: PUSH
58630: LD_INT 3
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 3
58642: PUSH
58643: LD_INT 2
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58654: LD_ADDR_VAR 0 50
58658: PUSH
58659: LD_INT 2
58661: PUSH
58662: LD_INT 3
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 1
58671: PUSH
58672: LD_INT 3
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58683: LD_ADDR_VAR 0 51
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: LD_INT 2
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 2
58701: NEG
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58714: LD_ADDR_VAR 0 52
58718: PUSH
58719: LD_INT 3
58721: NEG
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 3
58733: NEG
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58747: LD_ADDR_VAR 0 53
58751: PUSH
58752: LD_INT 1
58754: NEG
58755: PUSH
58756: LD_INT 3
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: LD_INT 3
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 1
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: LIST
58790: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58791: LD_ADDR_VAR 0 54
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 3
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: LIST
58831: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58832: LD_ADDR_VAR 0 55
58836: PUSH
58837: LD_INT 3
58839: PUSH
58840: LD_INT 2
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 3
58849: PUSH
58850: LD_INT 3
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: LIST
58871: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58872: LD_ADDR_VAR 0 56
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: LD_INT 3
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: LD_INT 3
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 2
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: LIST
58912: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58913: LD_ADDR_VAR 0 57
58917: PUSH
58918: LD_INT 2
58920: NEG
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 3
58931: NEG
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 3
58942: NEG
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: LIST
58956: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58957: LD_ADDR_VAR 0 58
58961: PUSH
58962: LD_INT 2
58964: NEG
58965: PUSH
58966: LD_INT 3
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 3
58976: NEG
58977: PUSH
58978: LD_INT 2
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 3
58988: NEG
58989: PUSH
58990: LD_INT 3
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: LIST
59002: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59003: LD_ADDR_VAR 0 59
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: LD_INT 2
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: LD_INT 2
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: LIST
59046: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59047: LD_ADDR_VAR 0 60
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 2
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: LIST
59087: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59088: LD_ADDR_VAR 0 61
59092: PUSH
59093: LD_INT 2
59095: PUSH
59096: LD_INT 1
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: LD_INT 2
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: LD_INT 2
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: LIST
59127: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59128: LD_ADDR_VAR 0 62
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: LD_INT 2
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: LD_INT 2
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: LIST
59168: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59169: LD_ADDR_VAR 0 63
59173: PUSH
59174: LD_INT 1
59176: NEG
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 2
59187: NEG
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 2
59198: NEG
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: LIST
59212: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59213: LD_ADDR_VAR 0 64
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: LD_INT 2
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 2
59232: NEG
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 2
59244: NEG
59245: PUSH
59246: LD_INT 2
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: LIST
59258: ST_TO_ADDR
// end ; 2 :
59259: GO 62525
59261: LD_INT 2
59263: DOUBLE
59264: EQUAL
59265: IFTRUE 59269
59267: GO 62524
59269: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59270: LD_ADDR_VAR 0 29
59274: PUSH
59275: LD_INT 4
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 4
59287: PUSH
59288: LD_INT 1
59290: NEG
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 5
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 5
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 4
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 3
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 3
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 3
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 5
59360: PUSH
59361: LD_INT 2
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 3
59370: PUSH
59371: LD_INT 3
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 3
59380: PUSH
59381: LD_INT 2
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 4
59390: PUSH
59391: LD_INT 3
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 4
59400: PUSH
59401: LD_INT 4
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 3
59410: PUSH
59411: LD_INT 4
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 2
59420: PUSH
59421: LD_INT 3
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 2
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 4
59440: PUSH
59441: LD_INT 2
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 2
59450: PUSH
59451: LD_INT 4
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: LD_INT 4
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_INT 3
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: PUSH
59481: LD_INT 4
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: LD_INT 5
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: LD_INT 5
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: LD_INT 4
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: LD_INT 3
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 2
59532: PUSH
59533: LD_INT 5
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: NEG
59543: PUSH
59544: LD_INT 3
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 3
59553: NEG
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 3
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 2
59576: NEG
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 2
59587: NEG
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 3
59598: NEG
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 4
59609: NEG
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 4
59620: NEG
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 4
59632: NEG
59633: PUSH
59634: LD_INT 2
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 2
59644: NEG
59645: PUSH
59646: LD_INT 2
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 4
59655: NEG
59656: PUSH
59657: LD_INT 4
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 4
59667: NEG
59668: PUSH
59669: LD_INT 5
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 3
59679: NEG
59680: PUSH
59681: LD_INT 4
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 3
59691: NEG
59692: PUSH
59693: LD_INT 3
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 4
59703: NEG
59704: PUSH
59705: LD_INT 3
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 5
59715: NEG
59716: PUSH
59717: LD_INT 4
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 5
59727: NEG
59728: PUSH
59729: LD_INT 5
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 3
59739: NEG
59740: PUSH
59741: LD_INT 5
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 5
59751: NEG
59752: PUSH
59753: LD_INT 3
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59808: LD_ADDR_VAR 0 30
59812: PUSH
59813: LD_INT 4
59815: PUSH
59816: LD_INT 4
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 4
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 5
59835: PUSH
59836: LD_INT 4
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 5
59845: PUSH
59846: LD_INT 5
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 4
59855: PUSH
59856: LD_INT 5
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 3
59865: PUSH
59866: LD_INT 4
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 3
59875: PUSH
59876: LD_INT 3
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 5
59885: PUSH
59886: LD_INT 3
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 3
59895: PUSH
59896: LD_INT 5
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: LD_INT 3
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: LD_INT 2
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: LD_INT 3
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: LD_INT 4
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: LD_INT 4
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: LD_INT 3
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: LD_INT 2
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: LD_INT 4
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 2
59987: NEG
59988: PUSH
59989: LD_INT 2
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 4
59998: NEG
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 4
60009: NEG
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 3
60021: NEG
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 3
60032: NEG
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 4
60043: NEG
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 5
60054: NEG
60055: PUSH
60056: LD_INT 0
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 5
60065: NEG
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 5
60077: NEG
60078: PUSH
60079: LD_INT 2
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 3
60089: NEG
60090: PUSH
60091: LD_INT 2
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 3
60100: NEG
60101: PUSH
60102: LD_INT 3
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 3
60112: NEG
60113: PUSH
60114: LD_INT 4
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: LD_INT 3
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 2
60136: NEG
60137: PUSH
60138: LD_INT 2
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 3
60148: NEG
60149: PUSH
60150: LD_INT 2
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 4
60160: NEG
60161: PUSH
60162: LD_INT 3
60164: NEG
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 4
60172: NEG
60173: PUSH
60174: LD_INT 4
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 2
60184: NEG
60185: PUSH
60186: LD_INT 4
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 4
60196: NEG
60197: PUSH
60198: LD_INT 2
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: LD_INT 4
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: LD_INT 5
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: LD_INT 4
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: LD_INT 3
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: LD_INT 3
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 1
60263: NEG
60264: PUSH
60265: LD_INT 4
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: LD_INT 5
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: LD_INT 3
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 2
60298: NEG
60299: PUSH
60300: LD_INT 5
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60355: LD_ADDR_VAR 0 31
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: LD_INT 4
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 0
60372: PUSH
60373: LD_INT 3
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 1
60382: PUSH
60383: LD_INT 4
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: LD_INT 5
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: LD_INT 5
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: LD_INT 4
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: NEG
60424: PUSH
60425: LD_INT 3
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 2
60434: PUSH
60435: LD_INT 5
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: LD_INT 3
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 3
60455: NEG
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 3
60466: NEG
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 2
60478: NEG
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 2
60489: NEG
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 3
60500: NEG
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 4
60511: NEG
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 4
60522: NEG
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 4
60534: NEG
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 2
60546: NEG
60547: PUSH
60548: LD_INT 2
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 4
60557: NEG
60558: PUSH
60559: LD_INT 4
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 4
60569: NEG
60570: PUSH
60571: LD_INT 5
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 3
60581: NEG
60582: PUSH
60583: LD_INT 4
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 3
60593: NEG
60594: PUSH
60595: LD_INT 3
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 4
60605: NEG
60606: PUSH
60607: LD_INT 3
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 5
60617: NEG
60618: PUSH
60619: LD_INT 4
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 5
60629: NEG
60630: PUSH
60631: LD_INT 5
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 3
60641: NEG
60642: PUSH
60643: LD_INT 5
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 5
60653: NEG
60654: PUSH
60655: LD_INT 3
60657: NEG
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: LD_INT 3
60668: NEG
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 4
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: LD_INT 3
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: LD_INT 2
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: LD_INT 2
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 1
60720: NEG
60721: PUSH
60722: LD_INT 3
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: LD_INT 4
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 2
60744: PUSH
60745: LD_INT 2
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 2
60755: NEG
60756: PUSH
60757: LD_INT 4
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 4
60767: PUSH
60768: LD_INT 0
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 4
60777: PUSH
60778: LD_INT 1
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 5
60788: PUSH
60789: LD_INT 0
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 5
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 4
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 3
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 3
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 3
60839: PUSH
60840: LD_INT 2
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 5
60850: PUSH
60851: LD_INT 2
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60905: LD_ADDR_VAR 0 32
60909: PUSH
60910: LD_INT 4
60912: NEG
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 4
60923: NEG
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 3
60935: NEG
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 3
60946: NEG
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 4
60957: NEG
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 5
60968: NEG
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 5
60979: NEG
60980: PUSH
60981: LD_INT 1
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 5
60991: NEG
60992: PUSH
60993: LD_INT 2
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 3
61003: NEG
61004: PUSH
61005: LD_INT 2
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 3
61014: NEG
61015: PUSH
61016: LD_INT 3
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 3
61026: NEG
61027: PUSH
61028: LD_INT 4
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 2
61038: NEG
61039: PUSH
61040: LD_INT 3
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 2
61050: NEG
61051: PUSH
61052: LD_INT 2
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 3
61062: NEG
61063: PUSH
61064: LD_INT 2
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 4
61074: NEG
61075: PUSH
61076: LD_INT 3
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 4
61086: NEG
61087: PUSH
61088: LD_INT 4
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 2
61098: NEG
61099: PUSH
61100: LD_INT 4
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 4
61110: NEG
61111: PUSH
61112: LD_INT 2
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: LD_INT 4
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: LD_INT 5
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: LD_INT 4
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: PUSH
61156: LD_INT 3
61158: NEG
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 0
61166: PUSH
61167: LD_INT 3
61169: NEG
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: LD_INT 4
61181: NEG
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: NEG
61190: PUSH
61191: LD_INT 5
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: LD_INT 3
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 2
61212: NEG
61213: PUSH
61214: LD_INT 5
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 3
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 3
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 4
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 4
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 3
61265: PUSH
61266: LD_INT 1
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 2
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 2
61296: PUSH
61297: LD_INT 2
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 4
61307: PUSH
61308: LD_INT 2
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 4
61317: PUSH
61318: LD_INT 4
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 4
61327: PUSH
61328: LD_INT 3
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 5
61337: PUSH
61338: LD_INT 4
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 5
61347: PUSH
61348: LD_INT 5
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 4
61357: PUSH
61358: LD_INT 5
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 3
61367: PUSH
61368: LD_INT 4
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 3
61377: PUSH
61378: LD_INT 3
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 5
61387: PUSH
61388: LD_INT 3
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 3
61397: PUSH
61398: LD_INT 5
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61452: LD_ADDR_VAR 0 33
61456: PUSH
61457: LD_INT 4
61459: NEG
61460: PUSH
61461: LD_INT 4
61463: NEG
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 4
61471: NEG
61472: PUSH
61473: LD_INT 5
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 3
61483: NEG
61484: PUSH
61485: LD_INT 4
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 3
61495: NEG
61496: PUSH
61497: LD_INT 3
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 4
61507: NEG
61508: PUSH
61509: LD_INT 3
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 5
61519: NEG
61520: PUSH
61521: LD_INT 4
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 5
61531: NEG
61532: PUSH
61533: LD_INT 5
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 3
61543: NEG
61544: PUSH
61545: LD_INT 5
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 5
61555: NEG
61556: PUSH
61557: LD_INT 3
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: LD_INT 3
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: LD_INT 4
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: LD_INT 3
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: LD_INT 2
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 0
61611: PUSH
61612: LD_INT 2
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: PUSH
61624: LD_INT 3
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: LD_INT 4
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 2
61646: PUSH
61647: LD_INT 2
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 2
61657: NEG
61658: PUSH
61659: LD_INT 4
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 4
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 4
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 5
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 5
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 4
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 3
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 3
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 3
61741: PUSH
61742: LD_INT 2
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 5
61752: PUSH
61753: LD_INT 2
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 3
61762: PUSH
61763: LD_INT 3
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 3
61772: PUSH
61773: LD_INT 2
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 4
61782: PUSH
61783: LD_INT 3
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 4
61792: PUSH
61793: LD_INT 4
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 3
61802: PUSH
61803: LD_INT 4
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 2
61812: PUSH
61813: LD_INT 3
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 2
61822: PUSH
61823: LD_INT 2
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 4
61832: PUSH
61833: LD_INT 2
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 2
61842: PUSH
61843: LD_INT 4
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: LD_INT 4
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: LD_INT 3
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: LD_INT 4
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 1
61882: PUSH
61883: LD_INT 5
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: LD_INT 5
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 1
61902: NEG
61903: PUSH
61904: LD_INT 4
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 1
61913: NEG
61914: PUSH
61915: LD_INT 3
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 2
61924: PUSH
61925: LD_INT 5
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 2
61934: NEG
61935: PUSH
61936: LD_INT 3
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61990: LD_ADDR_VAR 0 34
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: LD_INT 4
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 0
62008: PUSH
62009: LD_INT 5
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: LD_INT 4
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 1
62030: PUSH
62031: LD_INT 3
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: LD_INT 3
62044: NEG
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 1
62052: NEG
62053: PUSH
62054: LD_INT 4
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: LD_INT 5
62068: NEG
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 2
62076: PUSH
62077: LD_INT 3
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 2
62087: NEG
62088: PUSH
62089: LD_INT 5
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 3
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 3
62109: PUSH
62110: LD_INT 1
62112: NEG
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 4
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 4
62130: PUSH
62131: LD_INT 1
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 3
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 2
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 2
62160: PUSH
62161: LD_INT 1
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 2
62171: PUSH
62172: LD_INT 2
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 4
62182: PUSH
62183: LD_INT 2
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 4
62192: PUSH
62193: LD_INT 4
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 4
62202: PUSH
62203: LD_INT 3
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 5
62212: PUSH
62213: LD_INT 4
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 5
62222: PUSH
62223: LD_INT 5
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 4
62232: PUSH
62233: LD_INT 5
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 3
62242: PUSH
62243: LD_INT 4
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 3
62252: PUSH
62253: LD_INT 3
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 5
62262: PUSH
62263: LD_INT 3
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 3
62272: PUSH
62273: LD_INT 5
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: LD_INT 3
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 0
62292: PUSH
62293: LD_INT 2
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 1
62302: PUSH
62303: LD_INT 3
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 1
62312: PUSH
62313: LD_INT 4
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 0
62322: PUSH
62323: LD_INT 4
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: LD_INT 3
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: LD_INT 2
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 2
62354: PUSH
62355: LD_INT 4
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 2
62364: NEG
62365: PUSH
62366: LD_INT 2
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 4
62375: NEG
62376: PUSH
62377: LD_INT 0
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 4
62386: NEG
62387: PUSH
62388: LD_INT 1
62390: NEG
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 3
62398: NEG
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 3
62409: NEG
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 4
62420: NEG
62421: PUSH
62422: LD_INT 1
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 5
62431: NEG
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 5
62442: NEG
62443: PUSH
62444: LD_INT 1
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 5
62454: NEG
62455: PUSH
62456: LD_INT 2
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 3
62466: NEG
62467: PUSH
62468: LD_INT 2
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: ST_TO_ADDR
// end ; end ;
62522: GO 62525
62524: POP
// case btype of b_depot , b_warehouse :
62525: LD_VAR 0 1
62529: PUSH
62530: LD_INT 0
62532: DOUBLE
62533: EQUAL
62534: IFTRUE 62544
62536: LD_INT 1
62538: DOUBLE
62539: EQUAL
62540: IFTRUE 62544
62542: GO 62745
62544: POP
// case nation of nation_american :
62545: LD_VAR 0 5
62549: PUSH
62550: LD_INT 1
62552: DOUBLE
62553: EQUAL
62554: IFTRUE 62558
62556: GO 62614
62558: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62559: LD_ADDR_VAR 0 9
62563: PUSH
62564: LD_VAR 0 11
62568: PUSH
62569: LD_VAR 0 12
62573: PUSH
62574: LD_VAR 0 13
62578: PUSH
62579: LD_VAR 0 14
62583: PUSH
62584: LD_VAR 0 15
62588: PUSH
62589: LD_VAR 0 16
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: PUSH
62602: LD_VAR 0 4
62606: PUSH
62607: LD_INT 1
62609: PLUS
62610: ARRAY
62611: ST_TO_ADDR
62612: GO 62743
62614: LD_INT 2
62616: DOUBLE
62617: EQUAL
62618: IFTRUE 62622
62620: GO 62678
62622: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62623: LD_ADDR_VAR 0 9
62627: PUSH
62628: LD_VAR 0 17
62632: PUSH
62633: LD_VAR 0 18
62637: PUSH
62638: LD_VAR 0 19
62642: PUSH
62643: LD_VAR 0 20
62647: PUSH
62648: LD_VAR 0 21
62652: PUSH
62653: LD_VAR 0 22
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: PUSH
62666: LD_VAR 0 4
62670: PUSH
62671: LD_INT 1
62673: PLUS
62674: ARRAY
62675: ST_TO_ADDR
62676: GO 62743
62678: LD_INT 3
62680: DOUBLE
62681: EQUAL
62682: IFTRUE 62686
62684: GO 62742
62686: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62687: LD_ADDR_VAR 0 9
62691: PUSH
62692: LD_VAR 0 23
62696: PUSH
62697: LD_VAR 0 24
62701: PUSH
62702: LD_VAR 0 25
62706: PUSH
62707: LD_VAR 0 26
62711: PUSH
62712: LD_VAR 0 27
62716: PUSH
62717: LD_VAR 0 28
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: PUSH
62730: LD_VAR 0 4
62734: PUSH
62735: LD_INT 1
62737: PLUS
62738: ARRAY
62739: ST_TO_ADDR
62740: GO 62743
62742: POP
62743: GO 63298
62745: LD_INT 2
62747: DOUBLE
62748: EQUAL
62749: IFTRUE 62759
62751: LD_INT 3
62753: DOUBLE
62754: EQUAL
62755: IFTRUE 62759
62757: GO 62815
62759: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62760: LD_ADDR_VAR 0 9
62764: PUSH
62765: LD_VAR 0 29
62769: PUSH
62770: LD_VAR 0 30
62774: PUSH
62775: LD_VAR 0 31
62779: PUSH
62780: LD_VAR 0 32
62784: PUSH
62785: LD_VAR 0 33
62789: PUSH
62790: LD_VAR 0 34
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: PUSH
62803: LD_VAR 0 4
62807: PUSH
62808: LD_INT 1
62810: PLUS
62811: ARRAY
62812: ST_TO_ADDR
62813: GO 63298
62815: LD_INT 16
62817: DOUBLE
62818: EQUAL
62819: IFTRUE 62877
62821: LD_INT 17
62823: DOUBLE
62824: EQUAL
62825: IFTRUE 62877
62827: LD_INT 18
62829: DOUBLE
62830: EQUAL
62831: IFTRUE 62877
62833: LD_INT 19
62835: DOUBLE
62836: EQUAL
62837: IFTRUE 62877
62839: LD_INT 22
62841: DOUBLE
62842: EQUAL
62843: IFTRUE 62877
62845: LD_INT 20
62847: DOUBLE
62848: EQUAL
62849: IFTRUE 62877
62851: LD_INT 21
62853: DOUBLE
62854: EQUAL
62855: IFTRUE 62877
62857: LD_INT 23
62859: DOUBLE
62860: EQUAL
62861: IFTRUE 62877
62863: LD_INT 24
62865: DOUBLE
62866: EQUAL
62867: IFTRUE 62877
62869: LD_INT 25
62871: DOUBLE
62872: EQUAL
62873: IFTRUE 62877
62875: GO 62933
62877: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62878: LD_ADDR_VAR 0 9
62882: PUSH
62883: LD_VAR 0 35
62887: PUSH
62888: LD_VAR 0 36
62892: PUSH
62893: LD_VAR 0 37
62897: PUSH
62898: LD_VAR 0 38
62902: PUSH
62903: LD_VAR 0 39
62907: PUSH
62908: LD_VAR 0 40
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: PUSH
62921: LD_VAR 0 4
62925: PUSH
62926: LD_INT 1
62928: PLUS
62929: ARRAY
62930: ST_TO_ADDR
62931: GO 63298
62933: LD_INT 6
62935: DOUBLE
62936: EQUAL
62937: IFTRUE 62989
62939: LD_INT 7
62941: DOUBLE
62942: EQUAL
62943: IFTRUE 62989
62945: LD_INT 8
62947: DOUBLE
62948: EQUAL
62949: IFTRUE 62989
62951: LD_INT 13
62953: DOUBLE
62954: EQUAL
62955: IFTRUE 62989
62957: LD_INT 12
62959: DOUBLE
62960: EQUAL
62961: IFTRUE 62989
62963: LD_INT 15
62965: DOUBLE
62966: EQUAL
62967: IFTRUE 62989
62969: LD_INT 11
62971: DOUBLE
62972: EQUAL
62973: IFTRUE 62989
62975: LD_INT 14
62977: DOUBLE
62978: EQUAL
62979: IFTRUE 62989
62981: LD_INT 10
62983: DOUBLE
62984: EQUAL
62985: IFTRUE 62989
62987: GO 63045
62989: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62990: LD_ADDR_VAR 0 9
62994: PUSH
62995: LD_VAR 0 41
62999: PUSH
63000: LD_VAR 0 42
63004: PUSH
63005: LD_VAR 0 43
63009: PUSH
63010: LD_VAR 0 44
63014: PUSH
63015: LD_VAR 0 45
63019: PUSH
63020: LD_VAR 0 46
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: PUSH
63033: LD_VAR 0 4
63037: PUSH
63038: LD_INT 1
63040: PLUS
63041: ARRAY
63042: ST_TO_ADDR
63043: GO 63298
63045: LD_INT 36
63047: DOUBLE
63048: EQUAL
63049: IFTRUE 63053
63051: GO 63109
63053: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63054: LD_ADDR_VAR 0 9
63058: PUSH
63059: LD_VAR 0 47
63063: PUSH
63064: LD_VAR 0 48
63068: PUSH
63069: LD_VAR 0 49
63073: PUSH
63074: LD_VAR 0 50
63078: PUSH
63079: LD_VAR 0 51
63083: PUSH
63084: LD_VAR 0 52
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: PUSH
63097: LD_VAR 0 4
63101: PUSH
63102: LD_INT 1
63104: PLUS
63105: ARRAY
63106: ST_TO_ADDR
63107: GO 63298
63109: LD_INT 4
63111: DOUBLE
63112: EQUAL
63113: IFTRUE 63135
63115: LD_INT 5
63117: DOUBLE
63118: EQUAL
63119: IFTRUE 63135
63121: LD_INT 34
63123: DOUBLE
63124: EQUAL
63125: IFTRUE 63135
63127: LD_INT 37
63129: DOUBLE
63130: EQUAL
63131: IFTRUE 63135
63133: GO 63191
63135: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63136: LD_ADDR_VAR 0 9
63140: PUSH
63141: LD_VAR 0 53
63145: PUSH
63146: LD_VAR 0 54
63150: PUSH
63151: LD_VAR 0 55
63155: PUSH
63156: LD_VAR 0 56
63160: PUSH
63161: LD_VAR 0 57
63165: PUSH
63166: LD_VAR 0 58
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: PUSH
63179: LD_VAR 0 4
63183: PUSH
63184: LD_INT 1
63186: PLUS
63187: ARRAY
63188: ST_TO_ADDR
63189: GO 63298
63191: LD_INT 31
63193: DOUBLE
63194: EQUAL
63195: IFTRUE 63241
63197: LD_INT 32
63199: DOUBLE
63200: EQUAL
63201: IFTRUE 63241
63203: LD_INT 33
63205: DOUBLE
63206: EQUAL
63207: IFTRUE 63241
63209: LD_INT 27
63211: DOUBLE
63212: EQUAL
63213: IFTRUE 63241
63215: LD_INT 26
63217: DOUBLE
63218: EQUAL
63219: IFTRUE 63241
63221: LD_INT 28
63223: DOUBLE
63224: EQUAL
63225: IFTRUE 63241
63227: LD_INT 29
63229: DOUBLE
63230: EQUAL
63231: IFTRUE 63241
63233: LD_INT 30
63235: DOUBLE
63236: EQUAL
63237: IFTRUE 63241
63239: GO 63297
63241: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63242: LD_ADDR_VAR 0 9
63246: PUSH
63247: LD_VAR 0 59
63251: PUSH
63252: LD_VAR 0 60
63256: PUSH
63257: LD_VAR 0 61
63261: PUSH
63262: LD_VAR 0 62
63266: PUSH
63267: LD_VAR 0 63
63271: PUSH
63272: LD_VAR 0 64
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: PUSH
63285: LD_VAR 0 4
63289: PUSH
63290: LD_INT 1
63292: PLUS
63293: ARRAY
63294: ST_TO_ADDR
63295: GO 63298
63297: POP
// temp_list2 = [ ] ;
63298: LD_ADDR_VAR 0 10
63302: PUSH
63303: EMPTY
63304: ST_TO_ADDR
// for i in temp_list do
63305: LD_ADDR_VAR 0 8
63309: PUSH
63310: LD_VAR 0 9
63314: PUSH
63315: FOR_IN
63316: IFFALSE 63368
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63318: LD_ADDR_VAR 0 10
63322: PUSH
63323: LD_VAR 0 10
63327: PUSH
63328: LD_VAR 0 8
63332: PUSH
63333: LD_INT 1
63335: ARRAY
63336: PUSH
63337: LD_VAR 0 2
63341: PLUS
63342: PUSH
63343: LD_VAR 0 8
63347: PUSH
63348: LD_INT 2
63350: ARRAY
63351: PUSH
63352: LD_VAR 0 3
63356: PLUS
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: EMPTY
63363: LIST
63364: ADD
63365: ST_TO_ADDR
63366: GO 63315
63368: POP
63369: POP
// result = temp_list2 ;
63370: LD_ADDR_VAR 0 7
63374: PUSH
63375: LD_VAR 0 10
63379: ST_TO_ADDR
// end ;
63380: LD_VAR 0 7
63384: RET
// export function EnemyInRange ( unit , dist ) ; begin
63385: LD_INT 0
63387: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63388: LD_ADDR_VAR 0 3
63392: PUSH
63393: LD_VAR 0 1
63397: PPUSH
63398: CALL_OW 255
63402: PPUSH
63403: LD_VAR 0 1
63407: PPUSH
63408: CALL_OW 250
63412: PPUSH
63413: LD_VAR 0 1
63417: PPUSH
63418: CALL_OW 251
63422: PPUSH
63423: LD_VAR 0 2
63427: PPUSH
63428: CALL 36642 0 4
63432: PUSH
63433: LD_INT 4
63435: ARRAY
63436: ST_TO_ADDR
// end ;
63437: LD_VAR 0 3
63441: RET
// export function PlayerSeeMe ( unit ) ; begin
63442: LD_INT 0
63444: PPUSH
// result := See ( your_side , unit ) ;
63445: LD_ADDR_VAR 0 2
63449: PUSH
63450: LD_OWVAR 2
63454: PPUSH
63455: LD_VAR 0 1
63459: PPUSH
63460: CALL_OW 292
63464: ST_TO_ADDR
// end ;
63465: LD_VAR 0 2
63469: RET
// export function ReverseDir ( unit ) ; begin
63470: LD_INT 0
63472: PPUSH
// if not unit then
63473: LD_VAR 0 1
63477: NOT
63478: IFFALSE 63482
// exit ;
63480: GO 63505
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63482: LD_ADDR_VAR 0 2
63486: PUSH
63487: LD_VAR 0 1
63491: PPUSH
63492: CALL_OW 254
63496: PUSH
63497: LD_INT 3
63499: PLUS
63500: PUSH
63501: LD_INT 6
63503: MOD
63504: ST_TO_ADDR
// end ;
63505: LD_VAR 0 2
63509: RET
// export function ReverseArray ( array ) ; var i ; begin
63510: LD_INT 0
63512: PPUSH
63513: PPUSH
// if not array then
63514: LD_VAR 0 1
63518: NOT
63519: IFFALSE 63523
// exit ;
63521: GO 63578
// result := [ ] ;
63523: LD_ADDR_VAR 0 2
63527: PUSH
63528: EMPTY
63529: ST_TO_ADDR
// for i := array downto 1 do
63530: LD_ADDR_VAR 0 3
63534: PUSH
63535: DOUBLE
63536: LD_VAR 0 1
63540: INC
63541: ST_TO_ADDR
63542: LD_INT 1
63544: PUSH
63545: FOR_DOWNTO
63546: IFFALSE 63576
// result := Join ( result , array [ i ] ) ;
63548: LD_ADDR_VAR 0 2
63552: PUSH
63553: LD_VAR 0 2
63557: PPUSH
63558: LD_VAR 0 1
63562: PUSH
63563: LD_VAR 0 3
63567: ARRAY
63568: PPUSH
63569: CALL 68430 0 2
63573: ST_TO_ADDR
63574: GO 63545
63576: POP
63577: POP
// end ;
63578: LD_VAR 0 2
63582: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63583: LD_INT 0
63585: PPUSH
63586: PPUSH
63587: PPUSH
63588: PPUSH
63589: PPUSH
63590: PPUSH
// if not unit or not hexes then
63591: LD_VAR 0 1
63595: NOT
63596: IFTRUE 63605
63598: PUSH
63599: LD_VAR 0 2
63603: NOT
63604: OR
63605: IFFALSE 63609
// exit ;
63607: GO 63732
// dist := 9999 ;
63609: LD_ADDR_VAR 0 5
63613: PUSH
63614: LD_INT 9999
63616: ST_TO_ADDR
// for i = 1 to hexes do
63617: LD_ADDR_VAR 0 4
63621: PUSH
63622: DOUBLE
63623: LD_INT 1
63625: DEC
63626: ST_TO_ADDR
63627: LD_VAR 0 2
63631: PUSH
63632: FOR_TO
63633: IFFALSE 63720
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63635: LD_ADDR_VAR 0 6
63639: PUSH
63640: LD_VAR 0 1
63644: PPUSH
63645: LD_VAR 0 2
63649: PUSH
63650: LD_VAR 0 4
63654: ARRAY
63655: PUSH
63656: LD_INT 1
63658: ARRAY
63659: PPUSH
63660: LD_VAR 0 2
63664: PUSH
63665: LD_VAR 0 4
63669: ARRAY
63670: PUSH
63671: LD_INT 2
63673: ARRAY
63674: PPUSH
63675: CALL_OW 297
63679: ST_TO_ADDR
// if tdist < dist then
63680: LD_VAR 0 6
63684: PUSH
63685: LD_VAR 0 5
63689: LESS
63690: IFFALSE 63718
// begin hex := hexes [ i ] ;
63692: LD_ADDR_VAR 0 8
63696: PUSH
63697: LD_VAR 0 2
63701: PUSH
63702: LD_VAR 0 4
63706: ARRAY
63707: ST_TO_ADDR
// dist := tdist ;
63708: LD_ADDR_VAR 0 5
63712: PUSH
63713: LD_VAR 0 6
63717: ST_TO_ADDR
// end ; end ;
63718: GO 63632
63720: POP
63721: POP
// result := hex ;
63722: LD_ADDR_VAR 0 3
63726: PUSH
63727: LD_VAR 0 8
63731: ST_TO_ADDR
// end ;
63732: LD_VAR 0 3
63736: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63737: LD_INT 0
63739: PPUSH
63740: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63741: LD_VAR 0 1
63745: NOT
63746: IFTRUE 63785
63748: PUSH
63749: LD_VAR 0 1
63753: PUSH
63754: LD_INT 21
63756: PUSH
63757: LD_INT 2
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 23
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PPUSH
63778: CALL_OW 69
63782: IN
63783: NOT
63784: OR
63785: IFFALSE 63789
// exit ;
63787: GO 63836
// for i = 1 to 3 do
63789: LD_ADDR_VAR 0 3
63793: PUSH
63794: DOUBLE
63795: LD_INT 1
63797: DEC
63798: ST_TO_ADDR
63799: LD_INT 3
63801: PUSH
63802: FOR_TO
63803: IFFALSE 63834
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63805: LD_VAR 0 1
63809: PPUSH
63810: CALL_OW 250
63814: PPUSH
63815: LD_VAR 0 1
63819: PPUSH
63820: CALL_OW 251
63824: PPUSH
63825: LD_INT 1
63827: PPUSH
63828: CALL_OW 453
63832: GO 63802
63834: POP
63835: POP
// end ;
63836: LD_VAR 0 2
63840: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63841: LD_INT 0
63843: PPUSH
63844: PPUSH
63845: PPUSH
63846: PPUSH
63847: PPUSH
63848: PPUSH
// if not unit or not enemy_unit then
63849: LD_VAR 0 1
63853: NOT
63854: IFTRUE 63863
63856: PUSH
63857: LD_VAR 0 2
63861: NOT
63862: OR
63863: IFFALSE 63867
// exit ;
63865: GO 64348
// if GetLives ( i ) < 250 then
63867: LD_VAR 0 4
63871: PPUSH
63872: CALL_OW 256
63876: PUSH
63877: LD_INT 250
63879: LESS
63880: IFFALSE 63893
// begin ComAutodestruct ( i ) ;
63882: LD_VAR 0 4
63886: PPUSH
63887: CALL 63737 0 1
// exit ;
63891: GO 64348
// end ; x := GetX ( enemy_unit ) ;
63893: LD_ADDR_VAR 0 7
63897: PUSH
63898: LD_VAR 0 2
63902: PPUSH
63903: CALL_OW 250
63907: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63908: LD_ADDR_VAR 0 8
63912: PUSH
63913: LD_VAR 0 2
63917: PPUSH
63918: CALL_OW 251
63922: ST_TO_ADDR
// if not x or not y then
63923: LD_VAR 0 7
63927: NOT
63928: IFTRUE 63937
63930: PUSH
63931: LD_VAR 0 8
63935: NOT
63936: OR
63937: IFFALSE 63941
// exit ;
63939: GO 64348
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63941: LD_ADDR_VAR 0 6
63945: PUSH
63946: LD_VAR 0 7
63950: PPUSH
63951: LD_INT 0
63953: PPUSH
63954: LD_INT 4
63956: PPUSH
63957: CALL_OW 272
63961: PUSH
63962: LD_VAR 0 8
63966: PPUSH
63967: LD_INT 0
63969: PPUSH
63970: LD_INT 4
63972: PPUSH
63973: CALL_OW 273
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_VAR 0 7
63986: PPUSH
63987: LD_INT 1
63989: PPUSH
63990: LD_INT 4
63992: PPUSH
63993: CALL_OW 272
63997: PUSH
63998: LD_VAR 0 8
64002: PPUSH
64003: LD_INT 1
64005: PPUSH
64006: LD_INT 4
64008: PPUSH
64009: CALL_OW 273
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_VAR 0 7
64022: PPUSH
64023: LD_INT 2
64025: PPUSH
64026: LD_INT 4
64028: PPUSH
64029: CALL_OW 272
64033: PUSH
64034: LD_VAR 0 8
64038: PPUSH
64039: LD_INT 2
64041: PPUSH
64042: LD_INT 4
64044: PPUSH
64045: CALL_OW 273
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_VAR 0 7
64058: PPUSH
64059: LD_INT 3
64061: PPUSH
64062: LD_INT 4
64064: PPUSH
64065: CALL_OW 272
64069: PUSH
64070: LD_VAR 0 8
64074: PPUSH
64075: LD_INT 3
64077: PPUSH
64078: LD_INT 4
64080: PPUSH
64081: CALL_OW 273
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_VAR 0 7
64094: PPUSH
64095: LD_INT 4
64097: PPUSH
64098: LD_INT 4
64100: PPUSH
64101: CALL_OW 272
64105: PUSH
64106: LD_VAR 0 8
64110: PPUSH
64111: LD_INT 4
64113: PPUSH
64114: LD_INT 4
64116: PPUSH
64117: CALL_OW 273
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_VAR 0 7
64130: PPUSH
64131: LD_INT 5
64133: PPUSH
64134: LD_INT 4
64136: PPUSH
64137: CALL_OW 272
64141: PUSH
64142: LD_VAR 0 8
64146: PPUSH
64147: LD_INT 5
64149: PPUSH
64150: LD_INT 4
64152: PPUSH
64153: CALL_OW 273
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: ST_TO_ADDR
// for i = tmp downto 1 do
64170: LD_ADDR_VAR 0 4
64174: PUSH
64175: DOUBLE
64176: LD_VAR 0 6
64180: INC
64181: ST_TO_ADDR
64182: LD_INT 1
64184: PUSH
64185: FOR_DOWNTO
64186: IFFALSE 64289
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64188: LD_VAR 0 6
64192: PUSH
64193: LD_VAR 0 4
64197: ARRAY
64198: PUSH
64199: LD_INT 1
64201: ARRAY
64202: PPUSH
64203: LD_VAR 0 6
64207: PUSH
64208: LD_VAR 0 4
64212: ARRAY
64213: PUSH
64214: LD_INT 2
64216: ARRAY
64217: PPUSH
64218: CALL_OW 488
64222: NOT
64223: IFTRUE 64265
64225: PUSH
64226: LD_VAR 0 6
64230: PUSH
64231: LD_VAR 0 4
64235: ARRAY
64236: PUSH
64237: LD_INT 1
64239: ARRAY
64240: PPUSH
64241: LD_VAR 0 6
64245: PUSH
64246: LD_VAR 0 4
64250: ARRAY
64251: PUSH
64252: LD_INT 2
64254: ARRAY
64255: PPUSH
64256: CALL_OW 428
64260: PUSH
64261: LD_INT 0
64263: NONEQUAL
64264: OR
64265: IFFALSE 64287
// tmp := Delete ( tmp , i ) ;
64267: LD_ADDR_VAR 0 6
64271: PUSH
64272: LD_VAR 0 6
64276: PPUSH
64277: LD_VAR 0 4
64281: PPUSH
64282: CALL_OW 3
64286: ST_TO_ADDR
64287: GO 64185
64289: POP
64290: POP
// j := GetClosestHex ( unit , tmp ) ;
64291: LD_ADDR_VAR 0 5
64295: PUSH
64296: LD_VAR 0 1
64300: PPUSH
64301: LD_VAR 0 6
64305: PPUSH
64306: CALL 63583 0 2
64310: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64311: LD_VAR 0 1
64315: PPUSH
64316: LD_VAR 0 5
64320: PUSH
64321: LD_INT 1
64323: ARRAY
64324: PPUSH
64325: LD_VAR 0 5
64329: PUSH
64330: LD_INT 2
64332: ARRAY
64333: PPUSH
64334: CALL_OW 111
// result := j ;
64338: LD_ADDR_VAR 0 3
64342: PUSH
64343: LD_VAR 0 5
64347: ST_TO_ADDR
// end ;
64348: LD_VAR 0 3
64352: RET
// export function PrepareApemanSoldier ( ) ; begin
64353: LD_INT 0
64355: PPUSH
// uc_nation := 0 ;
64356: LD_ADDR_OWVAR 21
64360: PUSH
64361: LD_INT 0
64363: ST_TO_ADDR
// hc_sex := sex_male ;
64364: LD_ADDR_OWVAR 27
64368: PUSH
64369: LD_INT 1
64371: ST_TO_ADDR
// hc_name :=  ;
64372: LD_ADDR_OWVAR 26
64376: PUSH
64377: LD_STRING 
64379: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64380: LD_ADDR_OWVAR 28
64384: PUSH
64385: LD_INT 15
64387: ST_TO_ADDR
// hc_gallery :=  ;
64388: LD_ADDR_OWVAR 33
64392: PUSH
64393: LD_STRING 
64395: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64396: LD_ADDR_OWVAR 31
64400: PUSH
64401: LD_INT 0
64403: PPUSH
64404: LD_INT 3
64406: PPUSH
64407: CALL_OW 12
64411: PUSH
64412: LD_INT 0
64414: PPUSH
64415: LD_INT 3
64417: PPUSH
64418: CALL_OW 12
64422: PUSH
64423: LD_INT 0
64425: PUSH
64426: LD_INT 0
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64435: LD_ADDR_OWVAR 29
64439: PUSH
64440: LD_INT 10
64442: PUSH
64443: LD_INT 12
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: ST_TO_ADDR
// end ;
64450: LD_VAR 0 1
64454: RET
// export function PrepareApemanEngineer ( ) ; begin
64455: LD_INT 0
64457: PPUSH
// uc_nation := 0 ;
64458: LD_ADDR_OWVAR 21
64462: PUSH
64463: LD_INT 0
64465: ST_TO_ADDR
// hc_sex := sex_male ;
64466: LD_ADDR_OWVAR 27
64470: PUSH
64471: LD_INT 1
64473: ST_TO_ADDR
// hc_name :=  ;
64474: LD_ADDR_OWVAR 26
64478: PUSH
64479: LD_STRING 
64481: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64482: LD_ADDR_OWVAR 28
64486: PUSH
64487: LD_INT 16
64489: ST_TO_ADDR
// hc_gallery :=  ;
64490: LD_ADDR_OWVAR 33
64494: PUSH
64495: LD_STRING 
64497: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64498: LD_ADDR_OWVAR 31
64502: PUSH
64503: LD_INT 0
64505: PPUSH
64506: LD_INT 3
64508: PPUSH
64509: CALL_OW 12
64513: PUSH
64514: LD_INT 0
64516: PPUSH
64517: LD_INT 3
64519: PPUSH
64520: CALL_OW 12
64524: PUSH
64525: LD_INT 0
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64537: LD_ADDR_OWVAR 29
64541: PUSH
64542: LD_INT 10
64544: PUSH
64545: LD_INT 12
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: ST_TO_ADDR
// end ;
64552: LD_VAR 0 1
64556: RET
// export function PrepareApeman ( agressivity ) ; begin
64557: LD_INT 0
64559: PPUSH
// uc_side := 0 ;
64560: LD_ADDR_OWVAR 20
64564: PUSH
64565: LD_INT 0
64567: ST_TO_ADDR
// uc_nation := 0 ;
64568: LD_ADDR_OWVAR 21
64572: PUSH
64573: LD_INT 0
64575: ST_TO_ADDR
// hc_sex := sex_male ;
64576: LD_ADDR_OWVAR 27
64580: PUSH
64581: LD_INT 1
64583: ST_TO_ADDR
// hc_class := class_apeman ;
64584: LD_ADDR_OWVAR 28
64588: PUSH
64589: LD_INT 12
64591: ST_TO_ADDR
// hc_gallery :=  ;
64592: LD_ADDR_OWVAR 33
64596: PUSH
64597: LD_STRING 
64599: ST_TO_ADDR
// hc_name :=  ;
64600: LD_ADDR_OWVAR 26
64604: PUSH
64605: LD_STRING 
64607: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64608: LD_ADDR_OWVAR 29
64612: PUSH
64613: LD_INT 10
64615: PUSH
64616: LD_INT 12
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: ST_TO_ADDR
// if agressivity = 0 then
64623: LD_VAR 0 1
64627: PUSH
64628: LD_INT 0
64630: EQUAL
64631: IFFALSE 64643
// hc_agressivity := 0 else
64633: LD_ADDR_OWVAR 35
64637: PUSH
64638: LD_INT 0
64640: ST_TO_ADDR
64641: GO 64664
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64643: LD_ADDR_OWVAR 35
64647: PUSH
64648: LD_VAR 0 1
64652: NEG
64653: PPUSH
64654: LD_VAR 0 1
64658: PPUSH
64659: CALL_OW 12
64663: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64664: LD_ADDR_OWVAR 31
64668: PUSH
64669: LD_INT 0
64671: PPUSH
64672: LD_INT 3
64674: PPUSH
64675: CALL_OW 12
64679: PUSH
64680: LD_INT 0
64682: PPUSH
64683: LD_INT 3
64685: PPUSH
64686: CALL_OW 12
64690: PUSH
64691: LD_INT 0
64693: PUSH
64694: LD_INT 0
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: ST_TO_ADDR
// end ;
64703: LD_VAR 0 2
64707: RET
// export function PrepareTiger ( agressivity ) ; begin
64708: LD_INT 0
64710: PPUSH
// uc_side := 0 ;
64711: LD_ADDR_OWVAR 20
64715: PUSH
64716: LD_INT 0
64718: ST_TO_ADDR
// uc_nation := 0 ;
64719: LD_ADDR_OWVAR 21
64723: PUSH
64724: LD_INT 0
64726: ST_TO_ADDR
// InitHc ;
64727: CALL_OW 19
// hc_class := class_tiger ;
64731: LD_ADDR_OWVAR 28
64735: PUSH
64736: LD_INT 14
64738: ST_TO_ADDR
// hc_gallery :=  ;
64739: LD_ADDR_OWVAR 33
64743: PUSH
64744: LD_STRING 
64746: ST_TO_ADDR
// hc_name :=  ;
64747: LD_ADDR_OWVAR 26
64751: PUSH
64752: LD_STRING 
64754: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64755: LD_ADDR_OWVAR 35
64759: PUSH
64760: LD_VAR 0 1
64764: NEG
64765: PPUSH
64766: LD_VAR 0 1
64770: PPUSH
64771: CALL_OW 12
64775: ST_TO_ADDR
// end ;
64776: LD_VAR 0 2
64780: RET
// export function PrepareEnchidna ( ) ; begin
64781: LD_INT 0
64783: PPUSH
// uc_side := 0 ;
64784: LD_ADDR_OWVAR 20
64788: PUSH
64789: LD_INT 0
64791: ST_TO_ADDR
// uc_nation := 0 ;
64792: LD_ADDR_OWVAR 21
64796: PUSH
64797: LD_INT 0
64799: ST_TO_ADDR
// InitHc ;
64800: CALL_OW 19
// hc_class := class_baggie ;
64804: LD_ADDR_OWVAR 28
64808: PUSH
64809: LD_INT 13
64811: ST_TO_ADDR
// hc_gallery :=  ;
64812: LD_ADDR_OWVAR 33
64816: PUSH
64817: LD_STRING 
64819: ST_TO_ADDR
// hc_name :=  ;
64820: LD_ADDR_OWVAR 26
64824: PUSH
64825: LD_STRING 
64827: ST_TO_ADDR
// end ;
64828: LD_VAR 0 1
64832: RET
// export function PrepareFrog ( ) ; begin
64833: LD_INT 0
64835: PPUSH
// uc_side := 0 ;
64836: LD_ADDR_OWVAR 20
64840: PUSH
64841: LD_INT 0
64843: ST_TO_ADDR
// uc_nation := 0 ;
64844: LD_ADDR_OWVAR 21
64848: PUSH
64849: LD_INT 0
64851: ST_TO_ADDR
// InitHc ;
64852: CALL_OW 19
// hc_class := class_frog ;
64856: LD_ADDR_OWVAR 28
64860: PUSH
64861: LD_INT 19
64863: ST_TO_ADDR
// hc_gallery :=  ;
64864: LD_ADDR_OWVAR 33
64868: PUSH
64869: LD_STRING 
64871: ST_TO_ADDR
// hc_name :=  ;
64872: LD_ADDR_OWVAR 26
64876: PUSH
64877: LD_STRING 
64879: ST_TO_ADDR
// end ;
64880: LD_VAR 0 1
64884: RET
// export function PrepareFish ( ) ; begin
64885: LD_INT 0
64887: PPUSH
// uc_side := 0 ;
64888: LD_ADDR_OWVAR 20
64892: PUSH
64893: LD_INT 0
64895: ST_TO_ADDR
// uc_nation := 0 ;
64896: LD_ADDR_OWVAR 21
64900: PUSH
64901: LD_INT 0
64903: ST_TO_ADDR
// InitHc ;
64904: CALL_OW 19
// hc_class := class_fish ;
64908: LD_ADDR_OWVAR 28
64912: PUSH
64913: LD_INT 20
64915: ST_TO_ADDR
// hc_gallery :=  ;
64916: LD_ADDR_OWVAR 33
64920: PUSH
64921: LD_STRING 
64923: ST_TO_ADDR
// hc_name :=  ;
64924: LD_ADDR_OWVAR 26
64928: PUSH
64929: LD_STRING 
64931: ST_TO_ADDR
// end ;
64932: LD_VAR 0 1
64936: RET
// export function PrepareBird ( ) ; begin
64937: LD_INT 0
64939: PPUSH
// uc_side := 0 ;
64940: LD_ADDR_OWVAR 20
64944: PUSH
64945: LD_INT 0
64947: ST_TO_ADDR
// uc_nation := 0 ;
64948: LD_ADDR_OWVAR 21
64952: PUSH
64953: LD_INT 0
64955: ST_TO_ADDR
// InitHc ;
64956: CALL_OW 19
// hc_class := class_phororhacos ;
64960: LD_ADDR_OWVAR 28
64964: PUSH
64965: LD_INT 18
64967: ST_TO_ADDR
// hc_gallery :=  ;
64968: LD_ADDR_OWVAR 33
64972: PUSH
64973: LD_STRING 
64975: ST_TO_ADDR
// hc_name :=  ;
64976: LD_ADDR_OWVAR 26
64980: PUSH
64981: LD_STRING 
64983: ST_TO_ADDR
// end ;
64984: LD_VAR 0 1
64988: RET
// export function PrepareHorse ( ) ; begin
64989: LD_INT 0
64991: PPUSH
// uc_side := 0 ;
64992: LD_ADDR_OWVAR 20
64996: PUSH
64997: LD_INT 0
64999: ST_TO_ADDR
// uc_nation := 0 ;
65000: LD_ADDR_OWVAR 21
65004: PUSH
65005: LD_INT 0
65007: ST_TO_ADDR
// InitHc ;
65008: CALL_OW 19
// hc_class := class_horse ;
65012: LD_ADDR_OWVAR 28
65016: PUSH
65017: LD_INT 21
65019: ST_TO_ADDR
// hc_gallery :=  ;
65020: LD_ADDR_OWVAR 33
65024: PUSH
65025: LD_STRING 
65027: ST_TO_ADDR
// hc_name :=  ;
65028: LD_ADDR_OWVAR 26
65032: PUSH
65033: LD_STRING 
65035: ST_TO_ADDR
// end ;
65036: LD_VAR 0 1
65040: RET
// export function PrepareMastodont ( ) ; begin
65041: LD_INT 0
65043: PPUSH
// uc_side := 0 ;
65044: LD_ADDR_OWVAR 20
65048: PUSH
65049: LD_INT 0
65051: ST_TO_ADDR
// uc_nation := 0 ;
65052: LD_ADDR_OWVAR 21
65056: PUSH
65057: LD_INT 0
65059: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65060: LD_ADDR_OWVAR 37
65064: PUSH
65065: LD_INT 31
65067: ST_TO_ADDR
// vc_control := control_rider ;
65068: LD_ADDR_OWVAR 38
65072: PUSH
65073: LD_INT 4
65075: ST_TO_ADDR
// end ;
65076: LD_VAR 0 1
65080: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65081: LD_INT 0
65083: PPUSH
65084: PPUSH
65085: PPUSH
// uc_side = 0 ;
65086: LD_ADDR_OWVAR 20
65090: PUSH
65091: LD_INT 0
65093: ST_TO_ADDR
// uc_nation = 0 ;
65094: LD_ADDR_OWVAR 21
65098: PUSH
65099: LD_INT 0
65101: ST_TO_ADDR
// InitHc_All ( ) ;
65102: CALL_OW 584
// InitVc ;
65106: CALL_OW 20
// if mastodonts then
65110: LD_VAR 0 6
65114: IFFALSE 65181
// for i = 1 to mastodonts do
65116: LD_ADDR_VAR 0 11
65120: PUSH
65121: DOUBLE
65122: LD_INT 1
65124: DEC
65125: ST_TO_ADDR
65126: LD_VAR 0 6
65130: PUSH
65131: FOR_TO
65132: IFFALSE 65179
// begin vc_chassis := 31 ;
65134: LD_ADDR_OWVAR 37
65138: PUSH
65139: LD_INT 31
65141: ST_TO_ADDR
// vc_control := control_rider ;
65142: LD_ADDR_OWVAR 38
65146: PUSH
65147: LD_INT 4
65149: ST_TO_ADDR
// animal := CreateVehicle ;
65150: LD_ADDR_VAR 0 12
65154: PUSH
65155: CALL_OW 45
65159: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65160: LD_VAR 0 12
65164: PPUSH
65165: LD_VAR 0 8
65169: PPUSH
65170: LD_INT 0
65172: PPUSH
65173: CALL 67323 0 3
// end ;
65177: GO 65131
65179: POP
65180: POP
// if horses then
65181: LD_VAR 0 5
65185: IFFALSE 65252
// for i = 1 to horses do
65187: LD_ADDR_VAR 0 11
65191: PUSH
65192: DOUBLE
65193: LD_INT 1
65195: DEC
65196: ST_TO_ADDR
65197: LD_VAR 0 5
65201: PUSH
65202: FOR_TO
65203: IFFALSE 65250
// begin hc_class := 21 ;
65205: LD_ADDR_OWVAR 28
65209: PUSH
65210: LD_INT 21
65212: ST_TO_ADDR
// hc_gallery :=  ;
65213: LD_ADDR_OWVAR 33
65217: PUSH
65218: LD_STRING 
65220: ST_TO_ADDR
// animal := CreateHuman ;
65221: LD_ADDR_VAR 0 12
65225: PUSH
65226: CALL_OW 44
65230: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65231: LD_VAR 0 12
65235: PPUSH
65236: LD_VAR 0 8
65240: PPUSH
65241: LD_INT 0
65243: PPUSH
65244: CALL 67323 0 3
// end ;
65248: GO 65202
65250: POP
65251: POP
// if birds then
65252: LD_VAR 0 1
65256: IFFALSE 65323
// for i = 1 to birds do
65258: LD_ADDR_VAR 0 11
65262: PUSH
65263: DOUBLE
65264: LD_INT 1
65266: DEC
65267: ST_TO_ADDR
65268: LD_VAR 0 1
65272: PUSH
65273: FOR_TO
65274: IFFALSE 65321
// begin hc_class := 18 ;
65276: LD_ADDR_OWVAR 28
65280: PUSH
65281: LD_INT 18
65283: ST_TO_ADDR
// hc_gallery =  ;
65284: LD_ADDR_OWVAR 33
65288: PUSH
65289: LD_STRING 
65291: ST_TO_ADDR
// animal := CreateHuman ;
65292: LD_ADDR_VAR 0 12
65296: PUSH
65297: CALL_OW 44
65301: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65302: LD_VAR 0 12
65306: PPUSH
65307: LD_VAR 0 8
65311: PPUSH
65312: LD_INT 0
65314: PPUSH
65315: CALL 67323 0 3
// end ;
65319: GO 65273
65321: POP
65322: POP
// if tigers then
65323: LD_VAR 0 2
65327: IFFALSE 65411
// for i = 1 to tigers do
65329: LD_ADDR_VAR 0 11
65333: PUSH
65334: DOUBLE
65335: LD_INT 1
65337: DEC
65338: ST_TO_ADDR
65339: LD_VAR 0 2
65343: PUSH
65344: FOR_TO
65345: IFFALSE 65409
// begin hc_class = class_tiger ;
65347: LD_ADDR_OWVAR 28
65351: PUSH
65352: LD_INT 14
65354: ST_TO_ADDR
// hc_gallery =  ;
65355: LD_ADDR_OWVAR 33
65359: PUSH
65360: LD_STRING 
65362: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65363: LD_ADDR_OWVAR 35
65367: PUSH
65368: LD_INT 7
65370: NEG
65371: PPUSH
65372: LD_INT 7
65374: PPUSH
65375: CALL_OW 12
65379: ST_TO_ADDR
// animal := CreateHuman ;
65380: LD_ADDR_VAR 0 12
65384: PUSH
65385: CALL_OW 44
65389: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65390: LD_VAR 0 12
65394: PPUSH
65395: LD_VAR 0 8
65399: PPUSH
65400: LD_INT 0
65402: PPUSH
65403: CALL 67323 0 3
// end ;
65407: GO 65344
65409: POP
65410: POP
// if apemans then
65411: LD_VAR 0 3
65415: IFFALSE 65538
// for i = 1 to apemans do
65417: LD_ADDR_VAR 0 11
65421: PUSH
65422: DOUBLE
65423: LD_INT 1
65425: DEC
65426: ST_TO_ADDR
65427: LD_VAR 0 3
65431: PUSH
65432: FOR_TO
65433: IFFALSE 65536
// begin hc_class = class_apeman ;
65435: LD_ADDR_OWVAR 28
65439: PUSH
65440: LD_INT 12
65442: ST_TO_ADDR
// hc_gallery =  ;
65443: LD_ADDR_OWVAR 33
65447: PUSH
65448: LD_STRING 
65450: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65451: LD_ADDR_OWVAR 35
65455: PUSH
65456: LD_INT 2
65458: NEG
65459: PPUSH
65460: LD_INT 2
65462: PPUSH
65463: CALL_OW 12
65467: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65468: LD_ADDR_OWVAR 31
65472: PUSH
65473: LD_INT 1
65475: PPUSH
65476: LD_INT 3
65478: PPUSH
65479: CALL_OW 12
65483: PUSH
65484: LD_INT 1
65486: PPUSH
65487: LD_INT 3
65489: PPUSH
65490: CALL_OW 12
65494: PUSH
65495: LD_INT 0
65497: PUSH
65498: LD_INT 0
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: ST_TO_ADDR
// animal := CreateHuman ;
65507: LD_ADDR_VAR 0 12
65511: PUSH
65512: CALL_OW 44
65516: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65517: LD_VAR 0 12
65521: PPUSH
65522: LD_VAR 0 8
65526: PPUSH
65527: LD_INT 0
65529: PPUSH
65530: CALL 67323 0 3
// end ;
65534: GO 65432
65536: POP
65537: POP
// if enchidnas then
65538: LD_VAR 0 4
65542: IFFALSE 65609
// for i = 1 to enchidnas do
65544: LD_ADDR_VAR 0 11
65548: PUSH
65549: DOUBLE
65550: LD_INT 1
65552: DEC
65553: ST_TO_ADDR
65554: LD_VAR 0 4
65558: PUSH
65559: FOR_TO
65560: IFFALSE 65607
// begin hc_class = 13 ;
65562: LD_ADDR_OWVAR 28
65566: PUSH
65567: LD_INT 13
65569: ST_TO_ADDR
// hc_gallery =  ;
65570: LD_ADDR_OWVAR 33
65574: PUSH
65575: LD_STRING 
65577: ST_TO_ADDR
// animal := CreateHuman ;
65578: LD_ADDR_VAR 0 12
65582: PUSH
65583: CALL_OW 44
65587: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65588: LD_VAR 0 12
65592: PPUSH
65593: LD_VAR 0 8
65597: PPUSH
65598: LD_INT 0
65600: PPUSH
65601: CALL 67323 0 3
// end ;
65605: GO 65559
65607: POP
65608: POP
// if fishes then
65609: LD_VAR 0 7
65613: IFFALSE 65680
// for i = 1 to fishes do
65615: LD_ADDR_VAR 0 11
65619: PUSH
65620: DOUBLE
65621: LD_INT 1
65623: DEC
65624: ST_TO_ADDR
65625: LD_VAR 0 7
65629: PUSH
65630: FOR_TO
65631: IFFALSE 65678
// begin hc_class = 20 ;
65633: LD_ADDR_OWVAR 28
65637: PUSH
65638: LD_INT 20
65640: ST_TO_ADDR
// hc_gallery =  ;
65641: LD_ADDR_OWVAR 33
65645: PUSH
65646: LD_STRING 
65648: ST_TO_ADDR
// animal := CreateHuman ;
65649: LD_ADDR_VAR 0 12
65653: PUSH
65654: CALL_OW 44
65658: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65659: LD_VAR 0 12
65663: PPUSH
65664: LD_VAR 0 9
65668: PPUSH
65669: LD_INT 0
65671: PPUSH
65672: CALL 67323 0 3
// end ;
65676: GO 65630
65678: POP
65679: POP
// end ;
65680: LD_VAR 0 10
65684: RET
// export function WantHeal ( sci , unit ) ; begin
65685: LD_INT 0
65687: PPUSH
// if GetTaskList ( sci ) > 0 then
65688: LD_VAR 0 1
65692: PPUSH
65693: CALL_OW 437
65697: PUSH
65698: LD_INT 0
65700: GREATER
65701: IFFALSE 65773
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65703: LD_VAR 0 1
65707: PPUSH
65708: CALL_OW 437
65712: PUSH
65713: LD_INT 1
65715: ARRAY
65716: PUSH
65717: LD_INT 1
65719: ARRAY
65720: PUSH
65721: LD_STRING l
65723: EQUAL
65724: IFFALSE 65751
65726: PUSH
65727: LD_VAR 0 1
65731: PPUSH
65732: CALL_OW 437
65736: PUSH
65737: LD_INT 1
65739: ARRAY
65740: PUSH
65741: LD_INT 4
65743: ARRAY
65744: PUSH
65745: LD_VAR 0 2
65749: EQUAL
65750: AND
65751: IFFALSE 65763
// result := true else
65753: LD_ADDR_VAR 0 3
65757: PUSH
65758: LD_INT 1
65760: ST_TO_ADDR
65761: GO 65771
// result := false ;
65763: LD_ADDR_VAR 0 3
65767: PUSH
65768: LD_INT 0
65770: ST_TO_ADDR
// end else
65771: GO 65781
// result := false ;
65773: LD_ADDR_VAR 0 3
65777: PUSH
65778: LD_INT 0
65780: ST_TO_ADDR
// end ;
65781: LD_VAR 0 3
65785: RET
// export function HealTarget ( sci ) ; begin
65786: LD_INT 0
65788: PPUSH
// if not sci then
65789: LD_VAR 0 1
65793: NOT
65794: IFFALSE 65798
// exit ;
65796: GO 65863
// result := 0 ;
65798: LD_ADDR_VAR 0 2
65802: PUSH
65803: LD_INT 0
65805: ST_TO_ADDR
// if GetTaskList ( sci ) then
65806: LD_VAR 0 1
65810: PPUSH
65811: CALL_OW 437
65815: IFFALSE 65863
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65817: LD_VAR 0 1
65821: PPUSH
65822: CALL_OW 437
65826: PUSH
65827: LD_INT 1
65829: ARRAY
65830: PUSH
65831: LD_INT 1
65833: ARRAY
65834: PUSH
65835: LD_STRING l
65837: EQUAL
65838: IFFALSE 65863
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65840: LD_ADDR_VAR 0 2
65844: PUSH
65845: LD_VAR 0 1
65849: PPUSH
65850: CALL_OW 437
65854: PUSH
65855: LD_INT 1
65857: ARRAY
65858: PUSH
65859: LD_INT 4
65861: ARRAY
65862: ST_TO_ADDR
// end ;
65863: LD_VAR 0 2
65867: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65868: LD_INT 0
65870: PPUSH
65871: PPUSH
65872: PPUSH
65873: PPUSH
// if not base_units then
65874: LD_VAR 0 1
65878: NOT
65879: IFFALSE 65883
// exit ;
65881: GO 65970
// result := false ;
65883: LD_ADDR_VAR 0 2
65887: PUSH
65888: LD_INT 0
65890: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65891: LD_ADDR_VAR 0 5
65895: PUSH
65896: LD_VAR 0 1
65900: PPUSH
65901: LD_INT 21
65903: PUSH
65904: LD_INT 3
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PPUSH
65911: CALL_OW 72
65915: ST_TO_ADDR
// if not tmp then
65916: LD_VAR 0 5
65920: NOT
65921: IFFALSE 65925
// exit ;
65923: GO 65970
// for i in tmp do
65925: LD_ADDR_VAR 0 3
65929: PUSH
65930: LD_VAR 0 5
65934: PUSH
65935: FOR_IN
65936: IFFALSE 65968
// begin result := EnemyInRange ( i , 22 ) ;
65938: LD_ADDR_VAR 0 2
65942: PUSH
65943: LD_VAR 0 3
65947: PPUSH
65948: LD_INT 22
65950: PPUSH
65951: CALL 63385 0 2
65955: ST_TO_ADDR
// if result then
65956: LD_VAR 0 2
65960: IFFALSE 65966
// exit ;
65962: POP
65963: POP
65964: GO 65970
// end ;
65966: GO 65935
65968: POP
65969: POP
// end ;
65970: LD_VAR 0 2
65974: RET
// export function FilterByTag ( units , tag ) ; begin
65975: LD_INT 0
65977: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65978: LD_ADDR_VAR 0 3
65982: PUSH
65983: LD_VAR 0 1
65987: PPUSH
65988: LD_INT 120
65990: PUSH
65991: LD_VAR 0 2
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PPUSH
66000: CALL_OW 72
66004: ST_TO_ADDR
// end ;
66005: LD_VAR 0 3
66009: RET
// export function IsDriver ( un ) ; begin
66010: LD_INT 0
66012: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66013: LD_ADDR_VAR 0 2
66017: PUSH
66018: LD_VAR 0 1
66022: PUSH
66023: LD_INT 55
66025: PUSH
66026: EMPTY
66027: LIST
66028: PPUSH
66029: CALL_OW 69
66033: IN
66034: ST_TO_ADDR
// end ;
66035: LD_VAR 0 2
66039: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66040: LD_INT 0
66042: PPUSH
66043: PPUSH
// list := [ ] ;
66044: LD_ADDR_VAR 0 5
66048: PUSH
66049: EMPTY
66050: ST_TO_ADDR
// case d of 0 :
66051: LD_VAR 0 3
66055: PUSH
66056: LD_INT 0
66058: DOUBLE
66059: EQUAL
66060: IFTRUE 66064
66062: GO 66197
66064: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66065: LD_ADDR_VAR 0 5
66069: PUSH
66070: LD_VAR 0 1
66074: PUSH
66075: LD_INT 4
66077: MINUS
66078: PUSH
66079: LD_VAR 0 2
66083: PUSH
66084: LD_INT 4
66086: MINUS
66087: PUSH
66088: LD_INT 2
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: LIST
66095: PUSH
66096: LD_VAR 0 1
66100: PUSH
66101: LD_INT 3
66103: MINUS
66104: PUSH
66105: LD_VAR 0 2
66109: PUSH
66110: LD_INT 1
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: LIST
66117: PUSH
66118: LD_VAR 0 1
66122: PUSH
66123: LD_INT 4
66125: PLUS
66126: PUSH
66127: LD_VAR 0 2
66131: PUSH
66132: LD_INT 4
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: LIST
66139: PUSH
66140: LD_VAR 0 1
66144: PUSH
66145: LD_INT 3
66147: PLUS
66148: PUSH
66149: LD_VAR 0 2
66153: PUSH
66154: LD_INT 3
66156: PLUS
66157: PUSH
66158: LD_INT 5
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: LIST
66165: PUSH
66166: LD_VAR 0 1
66170: PUSH
66171: LD_VAR 0 2
66175: PUSH
66176: LD_INT 4
66178: PLUS
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: LIST
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: ST_TO_ADDR
// end ; 1 :
66195: GO 66895
66197: LD_INT 1
66199: DOUBLE
66200: EQUAL
66201: IFTRUE 66205
66203: GO 66338
66205: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66206: LD_ADDR_VAR 0 5
66210: PUSH
66211: LD_VAR 0 1
66215: PUSH
66216: LD_VAR 0 2
66220: PUSH
66221: LD_INT 4
66223: MINUS
66224: PUSH
66225: LD_INT 3
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: LIST
66232: PUSH
66233: LD_VAR 0 1
66237: PUSH
66238: LD_INT 3
66240: MINUS
66241: PUSH
66242: LD_VAR 0 2
66246: PUSH
66247: LD_INT 3
66249: MINUS
66250: PUSH
66251: LD_INT 2
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: LIST
66258: PUSH
66259: LD_VAR 0 1
66263: PUSH
66264: LD_INT 4
66266: MINUS
66267: PUSH
66268: LD_VAR 0 2
66272: PUSH
66273: LD_INT 1
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: LIST
66280: PUSH
66281: LD_VAR 0 1
66285: PUSH
66286: LD_VAR 0 2
66290: PUSH
66291: LD_INT 3
66293: PLUS
66294: PUSH
66295: LD_INT 0
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: LIST
66302: PUSH
66303: LD_VAR 0 1
66307: PUSH
66308: LD_INT 4
66310: PLUS
66311: PUSH
66312: LD_VAR 0 2
66316: PUSH
66317: LD_INT 4
66319: PLUS
66320: PUSH
66321: LD_INT 5
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: LIST
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: ST_TO_ADDR
// end ; 2 :
66336: GO 66895
66338: LD_INT 2
66340: DOUBLE
66341: EQUAL
66342: IFTRUE 66346
66344: GO 66475
66346: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66347: LD_ADDR_VAR 0 5
66351: PUSH
66352: LD_VAR 0 1
66356: PUSH
66357: LD_VAR 0 2
66361: PUSH
66362: LD_INT 3
66364: MINUS
66365: PUSH
66366: LD_INT 3
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: LIST
66373: PUSH
66374: LD_VAR 0 1
66378: PUSH
66379: LD_INT 4
66381: PLUS
66382: PUSH
66383: LD_VAR 0 2
66387: PUSH
66388: LD_INT 4
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: LIST
66395: PUSH
66396: LD_VAR 0 1
66400: PUSH
66401: LD_VAR 0 2
66405: PUSH
66406: LD_INT 4
66408: PLUS
66409: PUSH
66410: LD_INT 0
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: LIST
66417: PUSH
66418: LD_VAR 0 1
66422: PUSH
66423: LD_INT 3
66425: MINUS
66426: PUSH
66427: LD_VAR 0 2
66431: PUSH
66432: LD_INT 1
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: LIST
66439: PUSH
66440: LD_VAR 0 1
66444: PUSH
66445: LD_INT 4
66447: MINUS
66448: PUSH
66449: LD_VAR 0 2
66453: PUSH
66454: LD_INT 4
66456: MINUS
66457: PUSH
66458: LD_INT 2
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: LIST
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: ST_TO_ADDR
// end ; 3 :
66473: GO 66895
66475: LD_INT 3
66477: DOUBLE
66478: EQUAL
66479: IFTRUE 66483
66481: GO 66616
66483: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66484: LD_ADDR_VAR 0 5
66488: PUSH
66489: LD_VAR 0 1
66493: PUSH
66494: LD_INT 3
66496: PLUS
66497: PUSH
66498: LD_VAR 0 2
66502: PUSH
66503: LD_INT 4
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: LIST
66510: PUSH
66511: LD_VAR 0 1
66515: PUSH
66516: LD_INT 4
66518: PLUS
66519: PUSH
66520: LD_VAR 0 2
66524: PUSH
66525: LD_INT 4
66527: PLUS
66528: PUSH
66529: LD_INT 5
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: LIST
66536: PUSH
66537: LD_VAR 0 1
66541: PUSH
66542: LD_INT 4
66544: MINUS
66545: PUSH
66546: LD_VAR 0 2
66550: PUSH
66551: LD_INT 1
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: LIST
66558: PUSH
66559: LD_VAR 0 1
66563: PUSH
66564: LD_VAR 0 2
66568: PUSH
66569: LD_INT 4
66571: MINUS
66572: PUSH
66573: LD_INT 3
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: LIST
66580: PUSH
66581: LD_VAR 0 1
66585: PUSH
66586: LD_INT 3
66588: MINUS
66589: PUSH
66590: LD_VAR 0 2
66594: PUSH
66595: LD_INT 3
66597: MINUS
66598: PUSH
66599: LD_INT 2
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: LIST
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: ST_TO_ADDR
// end ; 4 :
66614: GO 66895
66616: LD_INT 4
66618: DOUBLE
66619: EQUAL
66620: IFTRUE 66624
66622: GO 66757
66624: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66625: LD_ADDR_VAR 0 5
66629: PUSH
66630: LD_VAR 0 1
66634: PUSH
66635: LD_VAR 0 2
66639: PUSH
66640: LD_INT 4
66642: PLUS
66643: PUSH
66644: LD_INT 0
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: LIST
66651: PUSH
66652: LD_VAR 0 1
66656: PUSH
66657: LD_INT 3
66659: PLUS
66660: PUSH
66661: LD_VAR 0 2
66665: PUSH
66666: LD_INT 3
66668: PLUS
66669: PUSH
66670: LD_INT 5
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: LIST
66677: PUSH
66678: LD_VAR 0 1
66682: PUSH
66683: LD_INT 4
66685: PLUS
66686: PUSH
66687: LD_VAR 0 2
66691: PUSH
66692: LD_INT 4
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: LIST
66699: PUSH
66700: LD_VAR 0 1
66704: PUSH
66705: LD_VAR 0 2
66709: PUSH
66710: LD_INT 3
66712: MINUS
66713: PUSH
66714: LD_INT 3
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: LIST
66721: PUSH
66722: LD_VAR 0 1
66726: PUSH
66727: LD_INT 4
66729: MINUS
66730: PUSH
66731: LD_VAR 0 2
66735: PUSH
66736: LD_INT 4
66738: MINUS
66739: PUSH
66740: LD_INT 2
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: LIST
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: ST_TO_ADDR
// end ; 5 :
66755: GO 66895
66757: LD_INT 5
66759: DOUBLE
66760: EQUAL
66761: IFTRUE 66765
66763: GO 66894
66765: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66766: LD_ADDR_VAR 0 5
66770: PUSH
66771: LD_VAR 0 1
66775: PUSH
66776: LD_INT 4
66778: MINUS
66779: PUSH
66780: LD_VAR 0 2
66784: PUSH
66785: LD_INT 1
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: LIST
66792: PUSH
66793: LD_VAR 0 1
66797: PUSH
66798: LD_VAR 0 2
66802: PUSH
66803: LD_INT 4
66805: MINUS
66806: PUSH
66807: LD_INT 3
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: LIST
66814: PUSH
66815: LD_VAR 0 1
66819: PUSH
66820: LD_INT 4
66822: PLUS
66823: PUSH
66824: LD_VAR 0 2
66828: PUSH
66829: LD_INT 4
66831: PLUS
66832: PUSH
66833: LD_INT 5
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: LIST
66840: PUSH
66841: LD_VAR 0 1
66845: PUSH
66846: LD_INT 3
66848: PLUS
66849: PUSH
66850: LD_VAR 0 2
66854: PUSH
66855: LD_INT 4
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: LIST
66862: PUSH
66863: LD_VAR 0 1
66867: PUSH
66868: LD_VAR 0 2
66872: PUSH
66873: LD_INT 3
66875: PLUS
66876: PUSH
66877: LD_INT 0
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: LIST
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: ST_TO_ADDR
// end ; end ;
66892: GO 66895
66894: POP
// result := list ;
66895: LD_ADDR_VAR 0 4
66899: PUSH
66900: LD_VAR 0 5
66904: ST_TO_ADDR
// end ;
66905: LD_VAR 0 4
66909: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66910: LD_INT 0
66912: PPUSH
66913: PPUSH
66914: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66915: LD_VAR 0 1
66919: NOT
66920: IFTRUE 66948
66922: PUSH
66923: LD_VAR 0 2
66927: PUSH
66928: LD_INT 1
66930: PUSH
66931: LD_INT 2
66933: PUSH
66934: LD_INT 3
66936: PUSH
66937: LD_INT 4
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: IN
66946: NOT
66947: OR
66948: IFFALSE 66952
// exit ;
66950: GO 67035
// tmp := [ ] ;
66952: LD_ADDR_VAR 0 5
66956: PUSH
66957: EMPTY
66958: ST_TO_ADDR
// for i in units do
66959: LD_ADDR_VAR 0 4
66963: PUSH
66964: LD_VAR 0 1
66968: PUSH
66969: FOR_IN
66970: IFFALSE 67004
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66972: LD_ADDR_VAR 0 5
66976: PUSH
66977: LD_VAR 0 5
66981: PPUSH
66982: LD_VAR 0 4
66986: PPUSH
66987: LD_VAR 0 2
66991: PPUSH
66992: CALL_OW 259
66996: PPUSH
66997: CALL 68430 0 2
67001: ST_TO_ADDR
67002: GO 66969
67004: POP
67005: POP
// if not tmp then
67006: LD_VAR 0 5
67010: NOT
67011: IFFALSE 67015
// exit ;
67013: GO 67035
// result := SortListByListDesc ( units , tmp ) ;
67015: LD_ADDR_VAR 0 3
67019: PUSH
67020: LD_VAR 0 1
67024: PPUSH
67025: LD_VAR 0 5
67029: PPUSH
67030: CALL_OW 77
67034: ST_TO_ADDR
// end ;
67035: LD_VAR 0 3
67039: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67040: LD_INT 0
67042: PPUSH
67043: PPUSH
67044: PPUSH
// result := false ;
67045: LD_ADDR_VAR 0 3
67049: PUSH
67050: LD_INT 0
67052: ST_TO_ADDR
// if not building then
67053: LD_VAR 0 2
67057: NOT
67058: IFFALSE 67062
// exit ;
67060: GO 67206
// x := GetX ( building ) ;
67062: LD_ADDR_VAR 0 4
67066: PUSH
67067: LD_VAR 0 2
67071: PPUSH
67072: CALL_OW 250
67076: ST_TO_ADDR
// y := GetY ( building ) ;
67077: LD_ADDR_VAR 0 5
67081: PUSH
67082: LD_VAR 0 2
67086: PPUSH
67087: CALL_OW 251
67091: ST_TO_ADDR
// if not x or not y then
67092: LD_VAR 0 4
67096: NOT
67097: IFTRUE 67106
67099: PUSH
67100: LD_VAR 0 5
67104: NOT
67105: OR
67106: IFFALSE 67110
// exit ;
67108: GO 67206
// if GetTaskList ( unit ) then
67110: LD_VAR 0 1
67114: PPUSH
67115: CALL_OW 437
67119: IFFALSE 67206
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67121: LD_STRING e
67123: PUSH
67124: LD_VAR 0 1
67128: PPUSH
67129: CALL_OW 437
67133: PUSH
67134: LD_INT 1
67136: ARRAY
67137: PUSH
67138: LD_INT 1
67140: ARRAY
67141: EQUAL
67142: IFFALSE 67169
67144: PUSH
67145: LD_VAR 0 4
67149: PUSH
67150: LD_VAR 0 1
67154: PPUSH
67155: CALL_OW 437
67159: PUSH
67160: LD_INT 1
67162: ARRAY
67163: PUSH
67164: LD_INT 2
67166: ARRAY
67167: EQUAL
67168: AND
67169: IFFALSE 67196
67171: PUSH
67172: LD_VAR 0 5
67176: PUSH
67177: LD_VAR 0 1
67181: PPUSH
67182: CALL_OW 437
67186: PUSH
67187: LD_INT 1
67189: ARRAY
67190: PUSH
67191: LD_INT 3
67193: ARRAY
67194: EQUAL
67195: AND
67196: IFFALSE 67206
// result := true end ;
67198: LD_ADDR_VAR 0 3
67202: PUSH
67203: LD_INT 1
67205: ST_TO_ADDR
// end ;
67206: LD_VAR 0 3
67210: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67211: LD_INT 0
67213: PPUSH
// result := false ;
67214: LD_ADDR_VAR 0 4
67218: PUSH
67219: LD_INT 0
67221: ST_TO_ADDR
// if GetTaskList ( unit ) then
67222: LD_VAR 0 1
67226: PPUSH
67227: CALL_OW 437
67231: IFFALSE 67318
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67233: LD_STRING M
67235: PUSH
67236: LD_VAR 0 1
67240: PPUSH
67241: CALL_OW 437
67245: PUSH
67246: LD_INT 1
67248: ARRAY
67249: PUSH
67250: LD_INT 1
67252: ARRAY
67253: EQUAL
67254: IFFALSE 67281
67256: PUSH
67257: LD_VAR 0 2
67261: PUSH
67262: LD_VAR 0 1
67266: PPUSH
67267: CALL_OW 437
67271: PUSH
67272: LD_INT 1
67274: ARRAY
67275: PUSH
67276: LD_INT 2
67278: ARRAY
67279: EQUAL
67280: AND
67281: IFFALSE 67308
67283: PUSH
67284: LD_VAR 0 3
67288: PUSH
67289: LD_VAR 0 1
67293: PPUSH
67294: CALL_OW 437
67298: PUSH
67299: LD_INT 1
67301: ARRAY
67302: PUSH
67303: LD_INT 3
67305: ARRAY
67306: EQUAL
67307: AND
67308: IFFALSE 67318
// result := true ;
67310: LD_ADDR_VAR 0 4
67314: PUSH
67315: LD_INT 1
67317: ST_TO_ADDR
// end ; end ;
67318: LD_VAR 0 4
67322: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67323: LD_INT 0
67325: PPUSH
67326: PPUSH
67327: PPUSH
67328: PPUSH
// if not unit or not area then
67329: LD_VAR 0 1
67333: NOT
67334: IFTRUE 67343
67336: PUSH
67337: LD_VAR 0 2
67341: NOT
67342: OR
67343: IFFALSE 67347
// exit ;
67345: GO 67523
// tmp := AreaToList ( area , i ) ;
67347: LD_ADDR_VAR 0 6
67351: PUSH
67352: LD_VAR 0 2
67356: PPUSH
67357: LD_VAR 0 5
67361: PPUSH
67362: CALL_OW 517
67366: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67367: LD_ADDR_VAR 0 5
67371: PUSH
67372: DOUBLE
67373: LD_INT 1
67375: DEC
67376: ST_TO_ADDR
67377: LD_VAR 0 6
67381: PUSH
67382: LD_INT 1
67384: ARRAY
67385: PUSH
67386: FOR_TO
67387: IFFALSE 67521
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67389: LD_ADDR_VAR 0 7
67393: PUSH
67394: LD_VAR 0 6
67398: PUSH
67399: LD_INT 1
67401: ARRAY
67402: PUSH
67403: LD_VAR 0 5
67407: ARRAY
67408: PUSH
67409: LD_VAR 0 6
67413: PUSH
67414: LD_INT 2
67416: ARRAY
67417: PUSH
67418: LD_VAR 0 5
67422: ARRAY
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67428: LD_INT 92
67430: PUSH
67431: LD_VAR 0 7
67435: PUSH
67436: LD_INT 1
67438: ARRAY
67439: PUSH
67440: LD_VAR 0 7
67444: PUSH
67445: LD_INT 2
67447: ARRAY
67448: PUSH
67449: LD_INT 2
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: PPUSH
67458: CALL_OW 69
67462: PUSH
67463: LD_INT 0
67465: EQUAL
67466: IFFALSE 67519
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67468: LD_VAR 0 1
67472: PPUSH
67473: LD_VAR 0 7
67477: PUSH
67478: LD_INT 1
67480: ARRAY
67481: PPUSH
67482: LD_VAR 0 7
67486: PUSH
67487: LD_INT 2
67489: ARRAY
67490: PPUSH
67491: LD_VAR 0 3
67495: PPUSH
67496: CALL_OW 48
// result := IsPlaced ( unit ) ;
67500: LD_ADDR_VAR 0 4
67504: PUSH
67505: LD_VAR 0 1
67509: PPUSH
67510: CALL_OW 305
67514: ST_TO_ADDR
// exit ;
67515: POP
67516: POP
67517: GO 67523
// end ; end ;
67519: GO 67386
67521: POP
67522: POP
// end ;
67523: LD_VAR 0 4
67527: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67528: LD_INT 0
67530: PPUSH
67531: PPUSH
67532: PPUSH
// if not side or side > 8 then
67533: LD_VAR 0 1
67537: NOT
67538: IFTRUE 67550
67540: PUSH
67541: LD_VAR 0 1
67545: PUSH
67546: LD_INT 8
67548: GREATER
67549: OR
67550: IFFALSE 67554
// exit ;
67552: GO 67741
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67554: LD_ADDR_VAR 0 4
67558: PUSH
67559: LD_INT 22
67561: PUSH
67562: LD_VAR 0 1
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 21
67573: PUSH
67574: LD_INT 3
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PPUSH
67585: CALL_OW 69
67589: ST_TO_ADDR
// if not tmp then
67590: LD_VAR 0 4
67594: NOT
67595: IFFALSE 67599
// exit ;
67597: GO 67741
// enable_addtolog := true ;
67599: LD_ADDR_OWVAR 81
67603: PUSH
67604: LD_INT 1
67606: ST_TO_ADDR
// AddToLog ( [ ) ;
67607: LD_STRING [
67609: PPUSH
67610: CALL_OW 561
// for i in tmp do
67614: LD_ADDR_VAR 0 3
67618: PUSH
67619: LD_VAR 0 4
67623: PUSH
67624: FOR_IN
67625: IFFALSE 67732
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67627: LD_STRING [
67629: PUSH
67630: LD_VAR 0 3
67634: PPUSH
67635: CALL_OW 266
67639: STR
67640: PUSH
67641: LD_STRING , 
67643: STR
67644: PUSH
67645: LD_VAR 0 3
67649: PPUSH
67650: CALL_OW 250
67654: STR
67655: PUSH
67656: LD_STRING , 
67658: STR
67659: PUSH
67660: LD_VAR 0 3
67664: PPUSH
67665: CALL_OW 251
67669: STR
67670: PUSH
67671: LD_STRING , 
67673: STR
67674: PUSH
67675: LD_VAR 0 3
67679: PPUSH
67680: CALL_OW 254
67684: STR
67685: PUSH
67686: LD_STRING , 
67688: STR
67689: PUSH
67690: LD_VAR 0 3
67694: PPUSH
67695: LD_INT 1
67697: PPUSH
67698: CALL_OW 268
67702: STR
67703: PUSH
67704: LD_STRING , 
67706: STR
67707: PUSH
67708: LD_VAR 0 3
67712: PPUSH
67713: LD_INT 2
67715: PPUSH
67716: CALL_OW 268
67720: STR
67721: PUSH
67722: LD_STRING ],
67724: STR
67725: PPUSH
67726: CALL_OW 561
// end ;
67730: GO 67624
67732: POP
67733: POP
// AddToLog ( ]; ) ;
67734: LD_STRING ];
67736: PPUSH
67737: CALL_OW 561
// end ;
67741: LD_VAR 0 2
67745: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67746: LD_INT 0
67748: PPUSH
67749: PPUSH
67750: PPUSH
67751: PPUSH
67752: PPUSH
// if not area or not rate or not max then
67753: LD_VAR 0 1
67757: NOT
67758: IFTRUE 67767
67760: PUSH
67761: LD_VAR 0 2
67765: NOT
67766: OR
67767: IFTRUE 67776
67769: PUSH
67770: LD_VAR 0 4
67774: NOT
67775: OR
67776: IFFALSE 67780
// exit ;
67778: GO 67969
// while 1 do
67780: LD_INT 1
67782: IFFALSE 67969
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67784: LD_ADDR_VAR 0 9
67788: PUSH
67789: LD_VAR 0 1
67793: PPUSH
67794: LD_INT 1
67796: PPUSH
67797: CALL_OW 287
67801: PUSH
67802: LD_INT 10
67804: MUL
67805: ST_TO_ADDR
// r := rate / 10 ;
67806: LD_ADDR_VAR 0 7
67810: PUSH
67811: LD_VAR 0 2
67815: PUSH
67816: LD_INT 10
67818: DIVREAL
67819: ST_TO_ADDR
// time := 1 1$00 ;
67820: LD_ADDR_VAR 0 8
67824: PUSH
67825: LD_INT 2100
67827: ST_TO_ADDR
// if amount < min then
67828: LD_VAR 0 9
67832: PUSH
67833: LD_VAR 0 3
67837: LESS
67838: IFFALSE 67856
// r := r * 2 else
67840: LD_ADDR_VAR 0 7
67844: PUSH
67845: LD_VAR 0 7
67849: PUSH
67850: LD_INT 2
67852: MUL
67853: ST_TO_ADDR
67854: GO 67882
// if amount > max then
67856: LD_VAR 0 9
67860: PUSH
67861: LD_VAR 0 4
67865: GREATER
67866: IFFALSE 67882
// r := r / 2 ;
67868: LD_ADDR_VAR 0 7
67872: PUSH
67873: LD_VAR 0 7
67877: PUSH
67878: LD_INT 2
67880: DIVREAL
67881: ST_TO_ADDR
// time := time / r ;
67882: LD_ADDR_VAR 0 8
67886: PUSH
67887: LD_VAR 0 8
67891: PUSH
67892: LD_VAR 0 7
67896: DIVREAL
67897: ST_TO_ADDR
// if time < 0 then
67898: LD_VAR 0 8
67902: PUSH
67903: LD_INT 0
67905: LESS
67906: IFFALSE 67923
// time := time * - 1 ;
67908: LD_ADDR_VAR 0 8
67912: PUSH
67913: LD_VAR 0 8
67917: PUSH
67918: LD_INT 1
67920: NEG
67921: MUL
67922: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67923: LD_VAR 0 8
67927: PUSH
67928: LD_INT 35
67930: PPUSH
67931: LD_INT 875
67933: PPUSH
67934: CALL_OW 12
67938: PLUS
67939: PPUSH
67940: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67944: LD_INT 1
67946: PPUSH
67947: LD_INT 5
67949: PPUSH
67950: CALL_OW 12
67954: PPUSH
67955: LD_VAR 0 1
67959: PPUSH
67960: LD_INT 1
67962: PPUSH
67963: CALL_OW 55
// end ;
67967: GO 67780
// end ;
67969: LD_VAR 0 5
67973: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67974: LD_INT 0
67976: PPUSH
67977: PPUSH
67978: PPUSH
67979: PPUSH
67980: PPUSH
67981: PPUSH
67982: PPUSH
67983: PPUSH
// if not turrets or not factories then
67984: LD_VAR 0 1
67988: NOT
67989: IFTRUE 67998
67991: PUSH
67992: LD_VAR 0 2
67996: NOT
67997: OR
67998: IFFALSE 68002
// exit ;
68000: GO 68309
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68002: LD_ADDR_VAR 0 10
68006: PUSH
68007: LD_INT 5
68009: PUSH
68010: LD_INT 6
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 2
68019: PUSH
68020: LD_INT 4
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 3
68029: PUSH
68030: LD_INT 5
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 24
68044: PUSH
68045: LD_INT 25
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 23
68054: PUSH
68055: LD_INT 27
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 42
68068: PUSH
68069: LD_INT 43
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 44
68078: PUSH
68079: LD_INT 46
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 45
68088: PUSH
68089: LD_INT 47
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: LIST
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: LIST
68105: ST_TO_ADDR
// result := [ ] ;
68106: LD_ADDR_VAR 0 3
68110: PUSH
68111: EMPTY
68112: ST_TO_ADDR
// for i in turrets do
68113: LD_ADDR_VAR 0 4
68117: PUSH
68118: LD_VAR 0 1
68122: PUSH
68123: FOR_IN
68124: IFFALSE 68307
// begin nat := GetNation ( i ) ;
68126: LD_ADDR_VAR 0 7
68130: PUSH
68131: LD_VAR 0 4
68135: PPUSH
68136: CALL_OW 248
68140: ST_TO_ADDR
// weapon := 0 ;
68141: LD_ADDR_VAR 0 8
68145: PUSH
68146: LD_INT 0
68148: ST_TO_ADDR
// if not nat then
68149: LD_VAR 0 7
68153: NOT
68154: IFFALSE 68158
// continue ;
68156: GO 68123
// for j in list [ nat ] do
68158: LD_ADDR_VAR 0 5
68162: PUSH
68163: LD_VAR 0 10
68167: PUSH
68168: LD_VAR 0 7
68172: ARRAY
68173: PUSH
68174: FOR_IN
68175: IFFALSE 68216
// if GetBWeapon ( i ) = j [ 1 ] then
68177: LD_VAR 0 4
68181: PPUSH
68182: CALL_OW 269
68186: PUSH
68187: LD_VAR 0 5
68191: PUSH
68192: LD_INT 1
68194: ARRAY
68195: EQUAL
68196: IFFALSE 68214
// begin weapon := j [ 2 ] ;
68198: LD_ADDR_VAR 0 8
68202: PUSH
68203: LD_VAR 0 5
68207: PUSH
68208: LD_INT 2
68210: ARRAY
68211: ST_TO_ADDR
// break ;
68212: GO 68216
// end ;
68214: GO 68174
68216: POP
68217: POP
// if not weapon then
68218: LD_VAR 0 8
68222: NOT
68223: IFFALSE 68227
// continue ;
68225: GO 68123
// for k in factories do
68227: LD_ADDR_VAR 0 6
68231: PUSH
68232: LD_VAR 0 2
68236: PUSH
68237: FOR_IN
68238: IFFALSE 68303
// begin weapons := AvailableWeaponList ( k ) ;
68240: LD_ADDR_VAR 0 9
68244: PUSH
68245: LD_VAR 0 6
68249: PPUSH
68250: CALL_OW 478
68254: ST_TO_ADDR
// if not weapons then
68255: LD_VAR 0 9
68259: NOT
68260: IFFALSE 68264
// continue ;
68262: GO 68237
// if weapon in weapons then
68264: LD_VAR 0 8
68268: PUSH
68269: LD_VAR 0 9
68273: IN
68274: IFFALSE 68301
// begin result := [ i , weapon ] ;
68276: LD_ADDR_VAR 0 3
68280: PUSH
68281: LD_VAR 0 4
68285: PUSH
68286: LD_VAR 0 8
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: ST_TO_ADDR
// exit ;
68295: POP
68296: POP
68297: POP
68298: POP
68299: GO 68309
// end ; end ;
68301: GO 68237
68303: POP
68304: POP
// end ;
68305: GO 68123
68307: POP
68308: POP
// end ;
68309: LD_VAR 0 3
68313: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68314: LD_INT 0
68316: PPUSH
// if not side or side > 8 then
68317: LD_VAR 0 3
68321: NOT
68322: IFTRUE 68334
68324: PUSH
68325: LD_VAR 0 3
68329: PUSH
68330: LD_INT 8
68332: GREATER
68333: OR
68334: IFFALSE 68338
// exit ;
68336: GO 68397
// if not range then
68338: LD_VAR 0 4
68342: NOT
68343: IFFALSE 68354
// range := - 12 ;
68345: LD_ADDR_VAR 0 4
68349: PUSH
68350: LD_INT 12
68352: NEG
68353: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68354: LD_VAR 0 1
68358: PPUSH
68359: LD_VAR 0 2
68363: PPUSH
68364: LD_VAR 0 3
68368: PPUSH
68369: LD_VAR 0 4
68373: PPUSH
68374: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68378: LD_VAR 0 1
68382: PPUSH
68383: LD_VAR 0 2
68387: PPUSH
68388: LD_VAR 0 3
68392: PPUSH
68393: CALL_OW 331
// end ;
68397: LD_VAR 0 5
68401: RET
// export function Video ( mode ) ; begin
68402: LD_INT 0
68404: PPUSH
// ingame_video = mode ;
68405: LD_ADDR_OWVAR 52
68409: PUSH
68410: LD_VAR 0 1
68414: ST_TO_ADDR
// interface_hidden = mode ;
68415: LD_ADDR_OWVAR 54
68419: PUSH
68420: LD_VAR 0 1
68424: ST_TO_ADDR
// end ;
68425: LD_VAR 0 2
68429: RET
// export function Join ( array , element ) ; begin
68430: LD_INT 0
68432: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68433: LD_ADDR_VAR 0 3
68437: PUSH
68438: LD_VAR 0 1
68442: PPUSH
68443: LD_VAR 0 1
68447: PUSH
68448: LD_INT 1
68450: PLUS
68451: PPUSH
68452: LD_VAR 0 2
68456: PPUSH
68457: CALL_OW 1
68461: ST_TO_ADDR
// end ;
68462: LD_VAR 0 3
68466: RET
// export function JoinUnion ( array , element ) ; begin
68467: LD_INT 0
68469: PPUSH
// result := array union element ;
68470: LD_ADDR_VAR 0 3
68474: PUSH
68475: LD_VAR 0 1
68479: PUSH
68480: LD_VAR 0 2
68484: UNION
68485: ST_TO_ADDR
// end ;
68486: LD_VAR 0 3
68490: RET
// export function GetBehemoths ( side ) ; begin
68491: LD_INT 0
68493: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68494: LD_ADDR_VAR 0 2
68498: PUSH
68499: LD_INT 22
68501: PUSH
68502: LD_VAR 0 1
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 31
68513: PUSH
68514: LD_INT 25
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PPUSH
68525: CALL_OW 69
68529: ST_TO_ADDR
// end ;
68530: LD_VAR 0 2
68534: RET
// export function Shuffle ( array ) ; var i , index ; begin
68535: LD_INT 0
68537: PPUSH
68538: PPUSH
68539: PPUSH
// result := [ ] ;
68540: LD_ADDR_VAR 0 2
68544: PUSH
68545: EMPTY
68546: ST_TO_ADDR
// if not array then
68547: LD_VAR 0 1
68551: NOT
68552: IFFALSE 68556
// exit ;
68554: GO 68655
// Randomize ;
68556: CALL_OW 10
// for i = array downto 1 do
68560: LD_ADDR_VAR 0 3
68564: PUSH
68565: DOUBLE
68566: LD_VAR 0 1
68570: INC
68571: ST_TO_ADDR
68572: LD_INT 1
68574: PUSH
68575: FOR_DOWNTO
68576: IFFALSE 68653
// begin index := rand ( 1 , array ) ;
68578: LD_ADDR_VAR 0 4
68582: PUSH
68583: LD_INT 1
68585: PPUSH
68586: LD_VAR 0 1
68590: PPUSH
68591: CALL_OW 12
68595: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68596: LD_ADDR_VAR 0 2
68600: PUSH
68601: LD_VAR 0 2
68605: PPUSH
68606: LD_VAR 0 2
68610: PUSH
68611: LD_INT 1
68613: PLUS
68614: PPUSH
68615: LD_VAR 0 1
68619: PUSH
68620: LD_VAR 0 4
68624: ARRAY
68625: PPUSH
68626: CALL_OW 2
68630: ST_TO_ADDR
// array := Delete ( array , index ) ;
68631: LD_ADDR_VAR 0 1
68635: PUSH
68636: LD_VAR 0 1
68640: PPUSH
68641: LD_VAR 0 4
68645: PPUSH
68646: CALL_OW 3
68650: ST_TO_ADDR
// end ;
68651: GO 68575
68653: POP
68654: POP
// end ;
68655: LD_VAR 0 2
68659: RET
// export function GetBaseMaterials ( base ) ; begin
68660: LD_INT 0
68662: PPUSH
// result := [ 0 , 0 , 0 ] ;
68663: LD_ADDR_VAR 0 2
68667: PUSH
68668: LD_INT 0
68670: PUSH
68671: LD_INT 0
68673: PUSH
68674: LD_INT 0
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: LIST
68681: ST_TO_ADDR
// if not base then
68682: LD_VAR 0 1
68686: NOT
68687: IFFALSE 68691
// exit ;
68689: GO 68740
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68691: LD_ADDR_VAR 0 2
68695: PUSH
68696: LD_VAR 0 1
68700: PPUSH
68701: LD_INT 1
68703: PPUSH
68704: CALL_OW 275
68708: PUSH
68709: LD_VAR 0 1
68713: PPUSH
68714: LD_INT 2
68716: PPUSH
68717: CALL_OW 275
68721: PUSH
68722: LD_VAR 0 1
68726: PPUSH
68727: LD_INT 3
68729: PPUSH
68730: CALL_OW 275
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: LIST
68739: ST_TO_ADDR
// end ;
68740: LD_VAR 0 2
68744: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68745: LD_INT 0
68747: PPUSH
68748: PPUSH
// result := array ;
68749: LD_ADDR_VAR 0 3
68753: PUSH
68754: LD_VAR 0 1
68758: ST_TO_ADDR
// if size >= result then
68759: LD_VAR 0 2
68763: PUSH
68764: LD_VAR 0 3
68768: GREATEREQUAL
68769: IFFALSE 68773
// exit ;
68771: GO 68823
// if size then
68773: LD_VAR 0 2
68777: IFFALSE 68823
// for i := array downto size do
68779: LD_ADDR_VAR 0 4
68783: PUSH
68784: DOUBLE
68785: LD_VAR 0 1
68789: INC
68790: ST_TO_ADDR
68791: LD_VAR 0 2
68795: PUSH
68796: FOR_DOWNTO
68797: IFFALSE 68821
// result := Delete ( result , result ) ;
68799: LD_ADDR_VAR 0 3
68803: PUSH
68804: LD_VAR 0 3
68808: PPUSH
68809: LD_VAR 0 3
68813: PPUSH
68814: CALL_OW 3
68818: ST_TO_ADDR
68819: GO 68796
68821: POP
68822: POP
// end ;
68823: LD_VAR 0 3
68827: RET
// export function ComExit ( unit ) ; var tmp ; begin
68828: LD_INT 0
68830: PPUSH
68831: PPUSH
// if not IsInUnit ( unit ) then
68832: LD_VAR 0 1
68836: PPUSH
68837: CALL_OW 310
68841: NOT
68842: IFFALSE 68846
// exit ;
68844: GO 68906
// tmp := IsInUnit ( unit ) ;
68846: LD_ADDR_VAR 0 3
68850: PUSH
68851: LD_VAR 0 1
68855: PPUSH
68856: CALL_OW 310
68860: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68861: LD_VAR 0 3
68865: PPUSH
68866: CALL_OW 247
68870: PUSH
68871: LD_INT 2
68873: EQUAL
68874: IFFALSE 68887
// ComExitVehicle ( unit ) else
68876: LD_VAR 0 1
68880: PPUSH
68881: CALL_OW 121
68885: GO 68896
// ComExitBuilding ( unit ) ;
68887: LD_VAR 0 1
68891: PPUSH
68892: CALL_OW 122
// result := tmp ;
68896: LD_ADDR_VAR 0 2
68900: PUSH
68901: LD_VAR 0 3
68905: ST_TO_ADDR
// end ;
68906: LD_VAR 0 2
68910: RET
// export function ComExitAll ( units ) ; var i ; begin
68911: LD_INT 0
68913: PPUSH
68914: PPUSH
// if not units then
68915: LD_VAR 0 1
68919: NOT
68920: IFFALSE 68924
// exit ;
68922: GO 68950
// for i in units do
68924: LD_ADDR_VAR 0 3
68928: PUSH
68929: LD_VAR 0 1
68933: PUSH
68934: FOR_IN
68935: IFFALSE 68948
// ComExit ( i ) ;
68937: LD_VAR 0 3
68941: PPUSH
68942: CALL 68828 0 1
68946: GO 68934
68948: POP
68949: POP
// end ;
68950: LD_VAR 0 2
68954: RET
// export function ResetHc ; begin
68955: LD_INT 0
68957: PPUSH
// InitHc ;
68958: CALL_OW 19
// hc_importance := 0 ;
68962: LD_ADDR_OWVAR 32
68966: PUSH
68967: LD_INT 0
68969: ST_TO_ADDR
// end ;
68970: LD_VAR 0 1
68974: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68975: LD_INT 0
68977: PPUSH
68978: PPUSH
68979: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68980: LD_ADDR_VAR 0 6
68984: PUSH
68985: LD_VAR 0 1
68989: PUSH
68990: LD_VAR 0 3
68994: PLUS
68995: PUSH
68996: LD_INT 2
68998: DIV
68999: ST_TO_ADDR
// if _x < 0 then
69000: LD_VAR 0 6
69004: PUSH
69005: LD_INT 0
69007: LESS
69008: IFFALSE 69025
// _x := _x * - 1 ;
69010: LD_ADDR_VAR 0 6
69014: PUSH
69015: LD_VAR 0 6
69019: PUSH
69020: LD_INT 1
69022: NEG
69023: MUL
69024: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69025: LD_ADDR_VAR 0 7
69029: PUSH
69030: LD_VAR 0 2
69034: PUSH
69035: LD_VAR 0 4
69039: PLUS
69040: PUSH
69041: LD_INT 2
69043: DIV
69044: ST_TO_ADDR
// if _y < 0 then
69045: LD_VAR 0 7
69049: PUSH
69050: LD_INT 0
69052: LESS
69053: IFFALSE 69070
// _y := _y * - 1 ;
69055: LD_ADDR_VAR 0 7
69059: PUSH
69060: LD_VAR 0 7
69064: PUSH
69065: LD_INT 1
69067: NEG
69068: MUL
69069: ST_TO_ADDR
// result := [ _x , _y ] ;
69070: LD_ADDR_VAR 0 5
69074: PUSH
69075: LD_VAR 0 6
69079: PUSH
69080: LD_VAR 0 7
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: ST_TO_ADDR
// end ;
69089: LD_VAR 0 5
69093: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69094: LD_INT 0
69096: PPUSH
69097: PPUSH
69098: PPUSH
69099: PPUSH
// task := GetTaskList ( unit ) ;
69100: LD_ADDR_VAR 0 7
69104: PUSH
69105: LD_VAR 0 1
69109: PPUSH
69110: CALL_OW 437
69114: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69115: LD_VAR 0 7
69119: NOT
69120: IFFALSE 69139
69122: PUSH
69123: LD_VAR 0 1
69127: PPUSH
69128: LD_VAR 0 2
69132: PPUSH
69133: CALL_OW 308
69137: NOT
69138: AND
69139: IFFALSE 69143
// exit ;
69141: GO 69261
// if IsInArea ( unit , area ) then
69143: LD_VAR 0 1
69147: PPUSH
69148: LD_VAR 0 2
69152: PPUSH
69153: CALL_OW 308
69157: IFFALSE 69175
// begin ComMoveToArea ( unit , goAway ) ;
69159: LD_VAR 0 1
69163: PPUSH
69164: LD_VAR 0 3
69168: PPUSH
69169: CALL_OW 113
// exit ;
69173: GO 69261
// end ; if task [ 1 ] [ 1 ] <> M then
69175: LD_VAR 0 7
69179: PUSH
69180: LD_INT 1
69182: ARRAY
69183: PUSH
69184: LD_INT 1
69186: ARRAY
69187: PUSH
69188: LD_STRING M
69190: NONEQUAL
69191: IFFALSE 69195
// exit ;
69193: GO 69261
// x := task [ 1 ] [ 2 ] ;
69195: LD_ADDR_VAR 0 5
69199: PUSH
69200: LD_VAR 0 7
69204: PUSH
69205: LD_INT 1
69207: ARRAY
69208: PUSH
69209: LD_INT 2
69211: ARRAY
69212: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69213: LD_ADDR_VAR 0 6
69217: PUSH
69218: LD_VAR 0 7
69222: PUSH
69223: LD_INT 1
69225: ARRAY
69226: PUSH
69227: LD_INT 3
69229: ARRAY
69230: ST_TO_ADDR
// if InArea ( x , y , area ) then
69231: LD_VAR 0 5
69235: PPUSH
69236: LD_VAR 0 6
69240: PPUSH
69241: LD_VAR 0 2
69245: PPUSH
69246: CALL_OW 309
69250: IFFALSE 69261
// ComStop ( unit ) ;
69252: LD_VAR 0 1
69256: PPUSH
69257: CALL_OW 141
// end ;
69261: LD_VAR 0 4
69265: RET
// export function Abs ( value ) ; begin
69266: LD_INT 0
69268: PPUSH
// result := value ;
69269: LD_ADDR_VAR 0 2
69273: PUSH
69274: LD_VAR 0 1
69278: ST_TO_ADDR
// if value < 0 then
69279: LD_VAR 0 1
69283: PUSH
69284: LD_INT 0
69286: LESS
69287: IFFALSE 69304
// result := value * - 1 ;
69289: LD_ADDR_VAR 0 2
69293: PUSH
69294: LD_VAR 0 1
69298: PUSH
69299: LD_INT 1
69301: NEG
69302: MUL
69303: ST_TO_ADDR
// end ;
69304: LD_VAR 0 2
69308: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69309: LD_INT 0
69311: PPUSH
69312: PPUSH
69313: PPUSH
69314: PPUSH
69315: PPUSH
69316: PPUSH
69317: PPUSH
69318: PPUSH
// if not unit or not building then
69319: LD_VAR 0 1
69323: NOT
69324: IFTRUE 69333
69326: PUSH
69327: LD_VAR 0 2
69331: NOT
69332: OR
69333: IFFALSE 69337
// exit ;
69335: GO 69565
// x := GetX ( building ) ;
69337: LD_ADDR_VAR 0 4
69341: PUSH
69342: LD_VAR 0 2
69346: PPUSH
69347: CALL_OW 250
69351: ST_TO_ADDR
// y := GetY ( building ) ;
69352: LD_ADDR_VAR 0 6
69356: PUSH
69357: LD_VAR 0 2
69361: PPUSH
69362: CALL_OW 251
69366: ST_TO_ADDR
// d := GetDir ( building ) ;
69367: LD_ADDR_VAR 0 8
69371: PUSH
69372: LD_VAR 0 2
69376: PPUSH
69377: CALL_OW 254
69381: ST_TO_ADDR
// r := 4 ;
69382: LD_ADDR_VAR 0 9
69386: PUSH
69387: LD_INT 4
69389: ST_TO_ADDR
// for i := 1 to 5 do
69390: LD_ADDR_VAR 0 10
69394: PUSH
69395: DOUBLE
69396: LD_INT 1
69398: DEC
69399: ST_TO_ADDR
69400: LD_INT 5
69402: PUSH
69403: FOR_TO
69404: IFFALSE 69563
// begin _x := ShiftX ( x , d , r + i ) ;
69406: LD_ADDR_VAR 0 5
69410: PUSH
69411: LD_VAR 0 4
69415: PPUSH
69416: LD_VAR 0 8
69420: PPUSH
69421: LD_VAR 0 9
69425: PUSH
69426: LD_VAR 0 10
69430: PLUS
69431: PPUSH
69432: CALL_OW 272
69436: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69437: LD_ADDR_VAR 0 7
69441: PUSH
69442: LD_VAR 0 6
69446: PPUSH
69447: LD_VAR 0 8
69451: PPUSH
69452: LD_VAR 0 9
69456: PUSH
69457: LD_VAR 0 10
69461: PLUS
69462: PPUSH
69463: CALL_OW 273
69467: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69468: LD_VAR 0 5
69472: PPUSH
69473: LD_VAR 0 7
69477: PPUSH
69478: CALL_OW 488
69482: IFFALSE 69517
69484: PUSH
69485: LD_VAR 0 5
69489: PPUSH
69490: LD_VAR 0 7
69494: PPUSH
69495: CALL_OW 428
69499: PPUSH
69500: CALL_OW 247
69504: PUSH
69505: LD_INT 3
69507: PUSH
69508: LD_INT 2
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: IN
69515: NOT
69516: AND
69517: IFFALSE 69561
// begin ComMoveXY ( unit , _x , _y ) ;
69519: LD_VAR 0 1
69523: PPUSH
69524: LD_VAR 0 5
69528: PPUSH
69529: LD_VAR 0 7
69533: PPUSH
69534: CALL_OW 111
// result := [ _x , _y ] ;
69538: LD_ADDR_VAR 0 3
69542: PUSH
69543: LD_VAR 0 5
69547: PUSH
69548: LD_VAR 0 7
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: ST_TO_ADDR
// exit ;
69557: POP
69558: POP
69559: GO 69565
// end ; end ;
69561: GO 69403
69563: POP
69564: POP
// end ;
69565: LD_VAR 0 3
69569: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69570: LD_INT 0
69572: PPUSH
69573: PPUSH
69574: PPUSH
// result := 0 ;
69575: LD_ADDR_VAR 0 3
69579: PUSH
69580: LD_INT 0
69582: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69583: LD_VAR 0 1
69587: PUSH
69588: LD_INT 0
69590: LESS
69591: IFTRUE 69603
69593: PUSH
69594: LD_VAR 0 1
69598: PUSH
69599: LD_INT 8
69601: GREATER
69602: OR
69603: IFTRUE 69615
69605: PUSH
69606: LD_VAR 0 2
69610: PUSH
69611: LD_INT 0
69613: LESS
69614: OR
69615: IFTRUE 69627
69617: PUSH
69618: LD_VAR 0 2
69622: PUSH
69623: LD_INT 8
69625: GREATER
69626: OR
69627: IFFALSE 69631
// exit ;
69629: GO 69706
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69631: LD_ADDR_VAR 0 4
69635: PUSH
69636: LD_INT 22
69638: PUSH
69639: LD_VAR 0 2
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PPUSH
69648: CALL_OW 69
69652: PUSH
69653: FOR_IN
69654: IFFALSE 69704
// begin un := UnitShoot ( i ) ;
69656: LD_ADDR_VAR 0 5
69660: PUSH
69661: LD_VAR 0 4
69665: PPUSH
69666: CALL_OW 504
69670: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69671: LD_VAR 0 5
69675: PPUSH
69676: CALL_OW 255
69680: PUSH
69681: LD_VAR 0 1
69685: EQUAL
69686: IFFALSE 69702
// begin result := un ;
69688: LD_ADDR_VAR 0 3
69692: PUSH
69693: LD_VAR 0 5
69697: ST_TO_ADDR
// exit ;
69698: POP
69699: POP
69700: GO 69706
// end ; end ;
69702: GO 69653
69704: POP
69705: POP
// end ;
69706: LD_VAR 0 3
69710: RET
// export function GetCargoBay ( units ) ; begin
69711: LD_INT 0
69713: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69714: LD_ADDR_VAR 0 2
69718: PUSH
69719: LD_VAR 0 1
69723: PPUSH
69724: LD_INT 2
69726: PUSH
69727: LD_INT 34
69729: PUSH
69730: LD_INT 12
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 34
69739: PUSH
69740: LD_INT 51
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 34
69749: PUSH
69750: LD_INT 32
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 34
69759: PUSH
69760: LD_INT 89
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: PPUSH
69774: CALL_OW 72
69778: ST_TO_ADDR
// end ;
69779: LD_VAR 0 2
69783: RET
// export function Negate ( value ) ; begin
69784: LD_INT 0
69786: PPUSH
// result := not value ;
69787: LD_ADDR_VAR 0 2
69791: PUSH
69792: LD_VAR 0 1
69796: NOT
69797: ST_TO_ADDR
// end ;
69798: LD_VAR 0 2
69802: RET
// export function Inc ( value ) ; begin
69803: LD_INT 0
69805: PPUSH
// result := value + 1 ;
69806: LD_ADDR_VAR 0 2
69810: PUSH
69811: LD_VAR 0 1
69815: PUSH
69816: LD_INT 1
69818: PLUS
69819: ST_TO_ADDR
// end ;
69820: LD_VAR 0 2
69824: RET
// export function Dec ( value ) ; begin
69825: LD_INT 0
69827: PPUSH
// result := value - 1 ;
69828: LD_ADDR_VAR 0 2
69832: PUSH
69833: LD_VAR 0 1
69837: PUSH
69838: LD_INT 1
69840: MINUS
69841: ST_TO_ADDR
// end ;
69842: LD_VAR 0 2
69846: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69847: LD_INT 0
69849: PPUSH
69850: PPUSH
69851: PPUSH
69852: PPUSH
69853: PPUSH
69854: PPUSH
69855: PPUSH
69856: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69857: LD_VAR 0 1
69861: PPUSH
69862: LD_VAR 0 2
69866: PPUSH
69867: CALL_OW 488
69871: NOT
69872: IFTRUE 69891
69874: PUSH
69875: LD_VAR 0 3
69879: PPUSH
69880: LD_VAR 0 4
69884: PPUSH
69885: CALL_OW 488
69889: NOT
69890: OR
69891: IFFALSE 69904
// begin result := - 1 ;
69893: LD_ADDR_VAR 0 5
69897: PUSH
69898: LD_INT 1
69900: NEG
69901: ST_TO_ADDR
// exit ;
69902: GO 70139
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69904: LD_ADDR_VAR 0 12
69908: PUSH
69909: LD_VAR 0 1
69913: PPUSH
69914: LD_VAR 0 2
69918: PPUSH
69919: LD_VAR 0 3
69923: PPUSH
69924: LD_VAR 0 4
69928: PPUSH
69929: CALL 68975 0 4
69933: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69934: LD_ADDR_VAR 0 11
69938: PUSH
69939: LD_VAR 0 1
69943: PPUSH
69944: LD_VAR 0 2
69948: PPUSH
69949: LD_VAR 0 12
69953: PUSH
69954: LD_INT 1
69956: ARRAY
69957: PPUSH
69958: LD_VAR 0 12
69962: PUSH
69963: LD_INT 2
69965: ARRAY
69966: PPUSH
69967: CALL_OW 298
69971: ST_TO_ADDR
// distance := 9999 ;
69972: LD_ADDR_VAR 0 10
69976: PUSH
69977: LD_INT 9999
69979: ST_TO_ADDR
// for i := 0 to 5 do
69980: LD_ADDR_VAR 0 6
69984: PUSH
69985: DOUBLE
69986: LD_INT 0
69988: DEC
69989: ST_TO_ADDR
69990: LD_INT 5
69992: PUSH
69993: FOR_TO
69994: IFFALSE 70137
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69996: LD_ADDR_VAR 0 7
70000: PUSH
70001: LD_VAR 0 1
70005: PPUSH
70006: LD_VAR 0 6
70010: PPUSH
70011: LD_VAR 0 11
70015: PPUSH
70016: CALL_OW 272
70020: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70021: LD_ADDR_VAR 0 8
70025: PUSH
70026: LD_VAR 0 2
70030: PPUSH
70031: LD_VAR 0 6
70035: PPUSH
70036: LD_VAR 0 11
70040: PPUSH
70041: CALL_OW 273
70045: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70046: LD_VAR 0 7
70050: PPUSH
70051: LD_VAR 0 8
70055: PPUSH
70056: CALL_OW 488
70060: NOT
70061: IFFALSE 70065
// continue ;
70063: GO 69993
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70065: LD_ADDR_VAR 0 9
70069: PUSH
70070: LD_VAR 0 12
70074: PUSH
70075: LD_INT 1
70077: ARRAY
70078: PPUSH
70079: LD_VAR 0 12
70083: PUSH
70084: LD_INT 2
70086: ARRAY
70087: PPUSH
70088: LD_VAR 0 7
70092: PPUSH
70093: LD_VAR 0 8
70097: PPUSH
70098: CALL_OW 298
70102: ST_TO_ADDR
// if tmp < distance then
70103: LD_VAR 0 9
70107: PUSH
70108: LD_VAR 0 10
70112: LESS
70113: IFFALSE 70135
// begin result := i ;
70115: LD_ADDR_VAR 0 5
70119: PUSH
70120: LD_VAR 0 6
70124: ST_TO_ADDR
// distance := tmp ;
70125: LD_ADDR_VAR 0 10
70129: PUSH
70130: LD_VAR 0 9
70134: ST_TO_ADDR
// end ; end ;
70135: GO 69993
70137: POP
70138: POP
// end ;
70139: LD_VAR 0 5
70143: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70144: LD_INT 0
70146: PPUSH
70147: PPUSH
// if not driver or not IsInUnit ( driver ) then
70148: LD_VAR 0 1
70152: NOT
70153: IFTRUE 70167
70155: PUSH
70156: LD_VAR 0 1
70160: PPUSH
70161: CALL_OW 310
70165: NOT
70166: OR
70167: IFFALSE 70171
// exit ;
70169: GO 70261
// vehicle := IsInUnit ( driver ) ;
70171: LD_ADDR_VAR 0 3
70175: PUSH
70176: LD_VAR 0 1
70180: PPUSH
70181: CALL_OW 310
70185: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70186: LD_VAR 0 1
70190: PPUSH
70191: LD_STRING \
70193: PUSH
70194: LD_INT 0
70196: PUSH
70197: LD_INT 0
70199: PUSH
70200: LD_INT 0
70202: PUSH
70203: LD_INT 0
70205: PUSH
70206: LD_INT 0
70208: PUSH
70209: LD_INT 0
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: PUSH
70221: LD_STRING E
70223: PUSH
70224: LD_INT 0
70226: PUSH
70227: LD_INT 0
70229: PUSH
70230: LD_VAR 0 3
70234: PUSH
70235: LD_INT 0
70237: PUSH
70238: LD_INT 0
70240: PUSH
70241: LD_INT 0
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PPUSH
70257: CALL_OW 446
// end ;
70261: LD_VAR 0 2
70265: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70266: LD_INT 0
70268: PPUSH
70269: PPUSH
// if not driver or not IsInUnit ( driver ) then
70270: LD_VAR 0 1
70274: NOT
70275: IFTRUE 70289
70277: PUSH
70278: LD_VAR 0 1
70282: PPUSH
70283: CALL_OW 310
70287: NOT
70288: OR
70289: IFFALSE 70293
// exit ;
70291: GO 70383
// vehicle := IsInUnit ( driver ) ;
70293: LD_ADDR_VAR 0 3
70297: PUSH
70298: LD_VAR 0 1
70302: PPUSH
70303: CALL_OW 310
70307: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70308: LD_VAR 0 1
70312: PPUSH
70313: LD_STRING \
70315: PUSH
70316: LD_INT 0
70318: PUSH
70319: LD_INT 0
70321: PUSH
70322: LD_INT 0
70324: PUSH
70325: LD_INT 0
70327: PUSH
70328: LD_INT 0
70330: PUSH
70331: LD_INT 0
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: PUSH
70343: LD_STRING E
70345: PUSH
70346: LD_INT 0
70348: PUSH
70349: LD_INT 0
70351: PUSH
70352: LD_VAR 0 3
70356: PUSH
70357: LD_INT 0
70359: PUSH
70360: LD_INT 0
70362: PUSH
70363: LD_INT 0
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PPUSH
70379: CALL_OW 447
// end ;
70383: LD_VAR 0 2
70387: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70388: LD_INT 0
70390: PPUSH
70391: PPUSH
70392: PPUSH
// tmp := [ ] ;
70393: LD_ADDR_VAR 0 5
70397: PUSH
70398: EMPTY
70399: ST_TO_ADDR
// for i in units do
70400: LD_ADDR_VAR 0 4
70404: PUSH
70405: LD_VAR 0 1
70409: PUSH
70410: FOR_IN
70411: IFFALSE 70449
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70413: LD_ADDR_VAR 0 5
70417: PUSH
70418: LD_VAR 0 5
70422: PPUSH
70423: LD_VAR 0 5
70427: PUSH
70428: LD_INT 1
70430: PLUS
70431: PPUSH
70432: LD_VAR 0 4
70436: PPUSH
70437: CALL_OW 256
70441: PPUSH
70442: CALL_OW 2
70446: ST_TO_ADDR
70447: GO 70410
70449: POP
70450: POP
// if not tmp then
70451: LD_VAR 0 5
70455: NOT
70456: IFFALSE 70460
// exit ;
70458: GO 70508
// if asc then
70460: LD_VAR 0 2
70464: IFFALSE 70488
// result := SortListByListAsc ( units , tmp ) else
70466: LD_ADDR_VAR 0 3
70470: PUSH
70471: LD_VAR 0 1
70475: PPUSH
70476: LD_VAR 0 5
70480: PPUSH
70481: CALL_OW 76
70485: ST_TO_ADDR
70486: GO 70508
// result := SortListByListDesc ( units , tmp ) ;
70488: LD_ADDR_VAR 0 3
70492: PUSH
70493: LD_VAR 0 1
70497: PPUSH
70498: LD_VAR 0 5
70502: PPUSH
70503: CALL_OW 77
70507: ST_TO_ADDR
// end ;
70508: LD_VAR 0 3
70512: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70513: LD_INT 0
70515: PPUSH
70516: PPUSH
// task := GetTaskList ( mech ) ;
70517: LD_ADDR_VAR 0 4
70521: PUSH
70522: LD_VAR 0 1
70526: PPUSH
70527: CALL_OW 437
70531: ST_TO_ADDR
// if not task then
70532: LD_VAR 0 4
70536: NOT
70537: IFFALSE 70541
// exit ;
70539: GO 70585
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70541: LD_ADDR_VAR 0 3
70545: PUSH
70546: LD_VAR 0 4
70550: PUSH
70551: LD_INT 1
70553: ARRAY
70554: PUSH
70555: LD_INT 1
70557: ARRAY
70558: PUSH
70559: LD_STRING r
70561: EQUAL
70562: IFFALSE 70584
70564: PUSH
70565: LD_VAR 0 4
70569: PUSH
70570: LD_INT 1
70572: ARRAY
70573: PUSH
70574: LD_INT 4
70576: ARRAY
70577: PUSH
70578: LD_VAR 0 2
70582: EQUAL
70583: AND
70584: ST_TO_ADDR
// end ;
70585: LD_VAR 0 3
70589: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70590: LD_INT 0
70592: PPUSH
// SetDir ( unit , d ) ;
70593: LD_VAR 0 1
70597: PPUSH
70598: LD_VAR 0 4
70602: PPUSH
70603: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
70607: LD_ADDR_VAR 0 6
70611: PUSH
70612: LD_VAR 0 1
70616: PPUSH
70617: LD_VAR 0 2
70621: PPUSH
70622: LD_VAR 0 3
70626: PPUSH
70627: LD_VAR 0 5
70631: PPUSH
70632: CALL_OW 48
70636: ST_TO_ADDR
// end ;
70637: LD_VAR 0 6
70641: RET
// export function ToNaturalNumber ( number ) ; begin
70642: LD_INT 0
70644: PPUSH
// result := number div 1 ;
70645: LD_ADDR_VAR 0 2
70649: PUSH
70650: LD_VAR 0 1
70654: PUSH
70655: LD_INT 1
70657: DIV
70658: ST_TO_ADDR
// if number < 0 then
70659: LD_VAR 0 1
70663: PUSH
70664: LD_INT 0
70666: LESS
70667: IFFALSE 70677
// result := 0 ;
70669: LD_ADDR_VAR 0 2
70673: PUSH
70674: LD_INT 0
70676: ST_TO_ADDR
// end ;
70677: LD_VAR 0 2
70681: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
70682: LD_INT 0
70684: PPUSH
70685: PPUSH
70686: PPUSH
// if not buildings then
70687: LD_VAR 0 1
70691: NOT
70692: IFFALSE 70696
// exit ;
70694: GO 70811
// tmp := [ ] ;
70696: LD_ADDR_VAR 0 5
70700: PUSH
70701: EMPTY
70702: ST_TO_ADDR
// for b in buildings do
70703: LD_ADDR_VAR 0 4
70707: PUSH
70708: LD_VAR 0 1
70712: PUSH
70713: FOR_IN
70714: IFFALSE 70752
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
70716: LD_ADDR_VAR 0 5
70720: PUSH
70721: LD_VAR 0 5
70725: PPUSH
70726: LD_VAR 0 5
70730: PUSH
70731: LD_INT 1
70733: PLUS
70734: PPUSH
70735: LD_VAR 0 4
70739: PPUSH
70740: CALL_OW 266
70744: PPUSH
70745: CALL_OW 1
70749: ST_TO_ADDR
70750: GO 70713
70752: POP
70753: POP
// if not tmp then
70754: LD_VAR 0 5
70758: NOT
70759: IFFALSE 70763
// exit ;
70761: GO 70811
// if asc then
70763: LD_VAR 0 2
70767: IFFALSE 70791
// result := SortListByListAsc ( buildings , tmp ) else
70769: LD_ADDR_VAR 0 3
70773: PUSH
70774: LD_VAR 0 1
70778: PPUSH
70779: LD_VAR 0 5
70783: PPUSH
70784: CALL_OW 76
70788: ST_TO_ADDR
70789: GO 70811
// result := SortListByListDesc ( buildings , tmp ) ;
70791: LD_ADDR_VAR 0 3
70795: PUSH
70796: LD_VAR 0 1
70800: PPUSH
70801: LD_VAR 0 5
70805: PPUSH
70806: CALL_OW 77
70810: ST_TO_ADDR
// end ;
70811: LD_VAR 0 3
70815: RET
// export function SortByClass ( units , class ) ; var un ; begin
70816: LD_INT 0
70818: PPUSH
70819: PPUSH
// if not units or not class then
70820: LD_VAR 0 1
70824: NOT
70825: IFTRUE 70834
70827: PUSH
70828: LD_VAR 0 2
70832: NOT
70833: OR
70834: IFFALSE 70838
// exit ;
70836: GO 70933
// result := [ ] ;
70838: LD_ADDR_VAR 0 3
70842: PUSH
70843: EMPTY
70844: ST_TO_ADDR
// for un in units do
70845: LD_ADDR_VAR 0 4
70849: PUSH
70850: LD_VAR 0 1
70854: PUSH
70855: FOR_IN
70856: IFFALSE 70931
// if GetClass ( un ) = class then
70858: LD_VAR 0 4
70862: PPUSH
70863: CALL_OW 257
70867: PUSH
70868: LD_VAR 0 2
70872: EQUAL
70873: IFFALSE 70900
// result := Insert ( result , 1 , un ) else
70875: LD_ADDR_VAR 0 3
70879: PUSH
70880: LD_VAR 0 3
70884: PPUSH
70885: LD_INT 1
70887: PPUSH
70888: LD_VAR 0 4
70892: PPUSH
70893: CALL_OW 2
70897: ST_TO_ADDR
70898: GO 70929
// result := Replace ( result , result + 1 , un ) ;
70900: LD_ADDR_VAR 0 3
70904: PUSH
70905: LD_VAR 0 3
70909: PPUSH
70910: LD_VAR 0 3
70914: PUSH
70915: LD_INT 1
70917: PLUS
70918: PPUSH
70919: LD_VAR 0 4
70923: PPUSH
70924: CALL_OW 1
70928: ST_TO_ADDR
70929: GO 70855
70931: POP
70932: POP
// end ;
70933: LD_VAR 0 3
70937: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70938: LD_INT 0
70940: PPUSH
70941: PPUSH
70942: PPUSH
70943: PPUSH
70944: PPUSH
70945: PPUSH
70946: PPUSH
// result := [ ] ;
70947: LD_ADDR_VAR 0 4
70951: PUSH
70952: EMPTY
70953: ST_TO_ADDR
// if x - r < 0 then
70954: LD_VAR 0 1
70958: PUSH
70959: LD_VAR 0 3
70963: MINUS
70964: PUSH
70965: LD_INT 0
70967: LESS
70968: IFFALSE 70980
// min_x := 0 else
70970: LD_ADDR_VAR 0 8
70974: PUSH
70975: LD_INT 0
70977: ST_TO_ADDR
70978: GO 70996
// min_x := x - r ;
70980: LD_ADDR_VAR 0 8
70984: PUSH
70985: LD_VAR 0 1
70989: PUSH
70990: LD_VAR 0 3
70994: MINUS
70995: ST_TO_ADDR
// if y - r < 0 then
70996: LD_VAR 0 2
71000: PUSH
71001: LD_VAR 0 3
71005: MINUS
71006: PUSH
71007: LD_INT 0
71009: LESS
71010: IFFALSE 71022
// min_y := 0 else
71012: LD_ADDR_VAR 0 7
71016: PUSH
71017: LD_INT 0
71019: ST_TO_ADDR
71020: GO 71038
// min_y := y - r ;
71022: LD_ADDR_VAR 0 7
71026: PUSH
71027: LD_VAR 0 2
71031: PUSH
71032: LD_VAR 0 3
71036: MINUS
71037: ST_TO_ADDR
// max_x := x + r ;
71038: LD_ADDR_VAR 0 9
71042: PUSH
71043: LD_VAR 0 1
71047: PUSH
71048: LD_VAR 0 3
71052: PLUS
71053: ST_TO_ADDR
// max_y := y + r ;
71054: LD_ADDR_VAR 0 10
71058: PUSH
71059: LD_VAR 0 2
71063: PUSH
71064: LD_VAR 0 3
71068: PLUS
71069: ST_TO_ADDR
// for _x = min_x to max_x do
71070: LD_ADDR_VAR 0 5
71074: PUSH
71075: DOUBLE
71076: LD_VAR 0 8
71080: DEC
71081: ST_TO_ADDR
71082: LD_VAR 0 9
71086: PUSH
71087: FOR_TO
71088: IFFALSE 71189
// for _y = min_y to max_y do
71090: LD_ADDR_VAR 0 6
71094: PUSH
71095: DOUBLE
71096: LD_VAR 0 7
71100: DEC
71101: ST_TO_ADDR
71102: LD_VAR 0 10
71106: PUSH
71107: FOR_TO
71108: IFFALSE 71185
// begin if not ValidHex ( _x , _y ) then
71110: LD_VAR 0 5
71114: PPUSH
71115: LD_VAR 0 6
71119: PPUSH
71120: CALL_OW 488
71124: NOT
71125: IFFALSE 71129
// continue ;
71127: GO 71107
// if GetResourceTypeXY ( _x , _y ) then
71129: LD_VAR 0 5
71133: PPUSH
71134: LD_VAR 0 6
71138: PPUSH
71139: CALL_OW 283
71143: IFFALSE 71183
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71145: LD_ADDR_VAR 0 4
71149: PUSH
71150: LD_VAR 0 4
71154: PPUSH
71155: LD_VAR 0 4
71159: PUSH
71160: LD_INT 1
71162: PLUS
71163: PPUSH
71164: LD_VAR 0 5
71168: PUSH
71169: LD_VAR 0 6
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: PPUSH
71178: CALL_OW 1
71182: ST_TO_ADDR
// end ;
71183: GO 71107
71185: POP
71186: POP
71187: GO 71087
71189: POP
71190: POP
// end ;
71191: LD_VAR 0 4
71195: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71196: LD_INT 0
71198: PPUSH
71199: PPUSH
71200: PPUSH
71201: PPUSH
71202: PPUSH
71203: PPUSH
71204: PPUSH
71205: PPUSH
// if not units then
71206: LD_VAR 0 1
71210: NOT
71211: IFFALSE 71215
// exit ;
71213: GO 71747
// result := UnitFilter ( units , [ f_ok ] ) ;
71215: LD_ADDR_VAR 0 3
71219: PUSH
71220: LD_VAR 0 1
71224: PPUSH
71225: LD_INT 50
71227: PUSH
71228: EMPTY
71229: LIST
71230: PPUSH
71231: CALL_OW 72
71235: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71236: LD_ADDR_VAR 0 8
71240: PUSH
71241: LD_VAR 0 1
71245: PUSH
71246: LD_INT 1
71248: ARRAY
71249: PPUSH
71250: CALL_OW 255
71254: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71255: LD_ADDR_VAR 0 10
71259: PUSH
71260: LD_INT 29
71262: PUSH
71263: LD_INT 91
71265: PUSH
71266: LD_INT 49
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: LIST
71273: ST_TO_ADDR
// if not result then
71274: LD_VAR 0 3
71278: NOT
71279: IFFALSE 71283
// exit ;
71281: GO 71747
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71283: LD_ADDR_VAR 0 5
71287: PUSH
71288: LD_INT 81
71290: PUSH
71291: LD_VAR 0 8
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PPUSH
71300: CALL_OW 69
71304: ST_TO_ADDR
// for i in result do
71305: LD_ADDR_VAR 0 4
71309: PUSH
71310: LD_VAR 0 3
71314: PUSH
71315: FOR_IN
71316: IFFALSE 71745
// begin tag := GetTag ( i ) + 1 ;
71318: LD_ADDR_VAR 0 9
71322: PUSH
71323: LD_VAR 0 4
71327: PPUSH
71328: CALL_OW 110
71332: PUSH
71333: LD_INT 1
71335: PLUS
71336: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
71337: LD_ADDR_VAR 0 7
71341: PUSH
71342: LD_VAR 0 4
71346: PPUSH
71347: CALL_OW 250
71351: PPUSH
71352: LD_VAR 0 4
71356: PPUSH
71357: CALL_OW 251
71361: PPUSH
71362: LD_INT 4
71364: PPUSH
71365: CALL 70938 0 3
71369: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
71370: LD_VAR 0 4
71374: PPUSH
71375: CALL_OW 247
71379: PUSH
71380: LD_INT 2
71382: EQUAL
71383: IFFALSE 71395
71385: PUSH
71386: LD_VAR 0 7
71390: PUSH
71391: LD_INT 2
71393: GREATER
71394: AND
71395: IFFALSE 71415
71397: PUSH
71398: LD_VAR 0 4
71402: PPUSH
71403: CALL_OW 264
71407: PUSH
71408: LD_VAR 0 10
71412: IN
71413: NOT
71414: AND
71415: IFFALSE 71454
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71417: LD_VAR 0 4
71421: PPUSH
71422: LD_VAR 0 7
71426: PUSH
71427: LD_INT 1
71429: ARRAY
71430: PUSH
71431: LD_INT 1
71433: ARRAY
71434: PPUSH
71435: LD_VAR 0 7
71439: PUSH
71440: LD_INT 1
71442: ARRAY
71443: PUSH
71444: LD_INT 2
71446: ARRAY
71447: PPUSH
71448: CALL_OW 116
71452: GO 71743
// if path > tag then
71454: LD_VAR 0 2
71458: PUSH
71459: LD_VAR 0 9
71463: GREATER
71464: IFFALSE 71672
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71466: LD_ADDR_VAR 0 6
71470: PUSH
71471: LD_VAR 0 5
71475: PPUSH
71476: LD_INT 91
71478: PUSH
71479: LD_VAR 0 4
71483: PUSH
71484: LD_INT 8
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: LIST
71491: PPUSH
71492: CALL_OW 72
71496: ST_TO_ADDR
// if nearEnemy then
71497: LD_VAR 0 6
71501: IFFALSE 71570
// begin if GetWeapon ( i ) = ru_time_lapser then
71503: LD_VAR 0 4
71507: PPUSH
71508: CALL_OW 264
71512: PUSH
71513: LD_INT 49
71515: EQUAL
71516: IFFALSE 71544
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71518: LD_VAR 0 4
71522: PPUSH
71523: LD_VAR 0 6
71527: PPUSH
71528: LD_VAR 0 4
71532: PPUSH
71533: CALL_OW 74
71537: PPUSH
71538: CALL_OW 112
71542: GO 71568
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71544: LD_VAR 0 4
71548: PPUSH
71549: LD_VAR 0 6
71553: PPUSH
71554: LD_VAR 0 4
71558: PPUSH
71559: CALL_OW 74
71563: PPUSH
71564: CALL 72828 0 2
// end else
71568: GO 71670
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71570: LD_VAR 0 4
71574: PPUSH
71575: LD_VAR 0 2
71579: PUSH
71580: LD_VAR 0 9
71584: ARRAY
71585: PUSH
71586: LD_INT 1
71588: ARRAY
71589: PPUSH
71590: LD_VAR 0 2
71594: PUSH
71595: LD_VAR 0 9
71599: ARRAY
71600: PUSH
71601: LD_INT 2
71603: ARRAY
71604: PPUSH
71605: CALL_OW 297
71609: PUSH
71610: LD_INT 6
71612: GREATER
71613: IFFALSE 71656
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71615: LD_VAR 0 4
71619: PPUSH
71620: LD_VAR 0 2
71624: PUSH
71625: LD_VAR 0 9
71629: ARRAY
71630: PUSH
71631: LD_INT 1
71633: ARRAY
71634: PPUSH
71635: LD_VAR 0 2
71639: PUSH
71640: LD_VAR 0 9
71644: ARRAY
71645: PUSH
71646: LD_INT 2
71648: ARRAY
71649: PPUSH
71650: CALL_OW 114
71654: GO 71670
// SetTag ( i , tag ) ;
71656: LD_VAR 0 4
71660: PPUSH
71661: LD_VAR 0 9
71665: PPUSH
71666: CALL_OW 109
// end else
71670: GO 71743
// if enemy then
71672: LD_VAR 0 5
71676: IFFALSE 71743
// begin if GetWeapon ( i ) = ru_time_lapser then
71678: LD_VAR 0 4
71682: PPUSH
71683: CALL_OW 264
71687: PUSH
71688: LD_INT 49
71690: EQUAL
71691: IFFALSE 71719
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71693: LD_VAR 0 4
71697: PPUSH
71698: LD_VAR 0 5
71702: PPUSH
71703: LD_VAR 0 4
71707: PPUSH
71708: CALL_OW 74
71712: PPUSH
71713: CALL_OW 112
71717: GO 71743
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71719: LD_VAR 0 4
71723: PPUSH
71724: LD_VAR 0 5
71728: PPUSH
71729: LD_VAR 0 4
71733: PPUSH
71734: CALL_OW 74
71738: PPUSH
71739: CALL 72828 0 2
// end ; end ;
71743: GO 71315
71745: POP
71746: POP
// end ;
71747: LD_VAR 0 3
71751: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71752: LD_INT 0
71754: PPUSH
71755: PPUSH
71756: PPUSH
// if not unit or IsInUnit ( unit ) then
71757: LD_VAR 0 1
71761: NOT
71762: IFTRUE 71775
71764: PUSH
71765: LD_VAR 0 1
71769: PPUSH
71770: CALL_OW 310
71774: OR
71775: IFFALSE 71779
// exit ;
71777: GO 71870
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71779: LD_ADDR_VAR 0 4
71783: PUSH
71784: LD_VAR 0 1
71788: PPUSH
71789: CALL_OW 250
71793: PPUSH
71794: LD_VAR 0 2
71798: PPUSH
71799: LD_INT 1
71801: PPUSH
71802: CALL_OW 272
71806: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71807: LD_ADDR_VAR 0 5
71811: PUSH
71812: LD_VAR 0 1
71816: PPUSH
71817: CALL_OW 251
71821: PPUSH
71822: LD_VAR 0 2
71826: PPUSH
71827: LD_INT 1
71829: PPUSH
71830: CALL_OW 273
71834: ST_TO_ADDR
// if ValidHex ( x , y ) then
71835: LD_VAR 0 4
71839: PPUSH
71840: LD_VAR 0 5
71844: PPUSH
71845: CALL_OW 488
71849: IFFALSE 71870
// ComTurnXY ( unit , x , y ) ;
71851: LD_VAR 0 1
71855: PPUSH
71856: LD_VAR 0 4
71860: PPUSH
71861: LD_VAR 0 5
71865: PPUSH
71866: CALL_OW 118
// end ;
71870: LD_VAR 0 3
71874: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71875: LD_INT 0
71877: PPUSH
71878: PPUSH
// result := false ;
71879: LD_ADDR_VAR 0 3
71883: PUSH
71884: LD_INT 0
71886: ST_TO_ADDR
// if not units then
71887: LD_VAR 0 2
71891: NOT
71892: IFFALSE 71896
// exit ;
71894: GO 71941
// for i in units do
71896: LD_ADDR_VAR 0 4
71900: PUSH
71901: LD_VAR 0 2
71905: PUSH
71906: FOR_IN
71907: IFFALSE 71939
// if See ( side , i ) then
71909: LD_VAR 0 1
71913: PPUSH
71914: LD_VAR 0 4
71918: PPUSH
71919: CALL_OW 292
71923: IFFALSE 71937
// begin result := true ;
71925: LD_ADDR_VAR 0 3
71929: PUSH
71930: LD_INT 1
71932: ST_TO_ADDR
// exit ;
71933: POP
71934: POP
71935: GO 71941
// end ;
71937: GO 71906
71939: POP
71940: POP
// end ;
71941: LD_VAR 0 3
71945: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71946: LD_INT 0
71948: PPUSH
71949: PPUSH
71950: PPUSH
71951: PPUSH
// if not unit or not points then
71952: LD_VAR 0 1
71956: NOT
71957: IFTRUE 71966
71959: PUSH
71960: LD_VAR 0 2
71964: NOT
71965: OR
71966: IFFALSE 71970
// exit ;
71968: GO 72060
// dist := 99999 ;
71970: LD_ADDR_VAR 0 5
71974: PUSH
71975: LD_INT 99999
71977: ST_TO_ADDR
// for i in points do
71978: LD_ADDR_VAR 0 4
71982: PUSH
71983: LD_VAR 0 2
71987: PUSH
71988: FOR_IN
71989: IFFALSE 72058
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71991: LD_ADDR_VAR 0 6
71995: PUSH
71996: LD_VAR 0 1
72000: PPUSH
72001: LD_VAR 0 4
72005: PUSH
72006: LD_INT 1
72008: ARRAY
72009: PPUSH
72010: LD_VAR 0 4
72014: PUSH
72015: LD_INT 2
72017: ARRAY
72018: PPUSH
72019: CALL_OW 297
72023: ST_TO_ADDR
// if tmpDist < dist then
72024: LD_VAR 0 6
72028: PUSH
72029: LD_VAR 0 5
72033: LESS
72034: IFFALSE 72056
// begin result := i ;
72036: LD_ADDR_VAR 0 3
72040: PUSH
72041: LD_VAR 0 4
72045: ST_TO_ADDR
// dist := tmpDist ;
72046: LD_ADDR_VAR 0 5
72050: PUSH
72051: LD_VAR 0 6
72055: ST_TO_ADDR
// end ; end ;
72056: GO 71988
72058: POP
72059: POP
// end ;
72060: LD_VAR 0 3
72064: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72065: LD_INT 0
72067: PPUSH
// uc_side := side ;
72068: LD_ADDR_OWVAR 20
72072: PUSH
72073: LD_VAR 0 1
72077: ST_TO_ADDR
// uc_nation := 3 ;
72078: LD_ADDR_OWVAR 21
72082: PUSH
72083: LD_INT 3
72085: ST_TO_ADDR
// vc_chassis := 25 ;
72086: LD_ADDR_OWVAR 37
72090: PUSH
72091: LD_INT 25
72093: ST_TO_ADDR
// vc_engine := engine_siberite ;
72094: LD_ADDR_OWVAR 39
72098: PUSH
72099: LD_INT 3
72101: ST_TO_ADDR
// vc_control := control_computer ;
72102: LD_ADDR_OWVAR 38
72106: PUSH
72107: LD_INT 3
72109: ST_TO_ADDR
// vc_weapon := 59 ;
72110: LD_ADDR_OWVAR 40
72114: PUSH
72115: LD_INT 59
72117: ST_TO_ADDR
// result := CreateVehicle ;
72118: LD_ADDR_VAR 0 5
72122: PUSH
72123: CALL_OW 45
72127: ST_TO_ADDR
// SetDir ( result , d ) ;
72128: LD_VAR 0 5
72132: PPUSH
72133: LD_VAR 0 4
72137: PPUSH
72138: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72142: LD_VAR 0 5
72146: PPUSH
72147: LD_VAR 0 2
72151: PPUSH
72152: LD_VAR 0 3
72156: PPUSH
72157: LD_INT 0
72159: PPUSH
72160: CALL_OW 48
// end ;
72164: LD_VAR 0 5
72168: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72169: LD_INT 0
72171: PPUSH
72172: PPUSH
72173: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72174: LD_ADDR_VAR 0 2
72178: PUSH
72179: LD_INT 0
72181: PUSH
72182: LD_INT 0
72184: PUSH
72185: LD_INT 0
72187: PUSH
72188: LD_INT 0
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72197: LD_VAR 0 1
72201: NOT
72202: IFTRUE 72235
72204: PUSH
72205: LD_VAR 0 1
72209: PPUSH
72210: CALL_OW 264
72214: PUSH
72215: LD_INT 12
72217: PUSH
72218: LD_INT 51
72220: PUSH
72221: LD_INT 32
72223: PUSH
72224: LD_INT 89
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: IN
72233: NOT
72234: OR
72235: IFFALSE 72239
// exit ;
72237: GO 72337
// for i := 1 to 3 do
72239: LD_ADDR_VAR 0 3
72243: PUSH
72244: DOUBLE
72245: LD_INT 1
72247: DEC
72248: ST_TO_ADDR
72249: LD_INT 3
72251: PUSH
72252: FOR_TO
72253: IFFALSE 72335
// begin tmp := GetCargo ( cargo , i ) ;
72255: LD_ADDR_VAR 0 4
72259: PUSH
72260: LD_VAR 0 1
72264: PPUSH
72265: LD_VAR 0 3
72269: PPUSH
72270: CALL_OW 289
72274: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72275: LD_ADDR_VAR 0 2
72279: PUSH
72280: LD_VAR 0 2
72284: PPUSH
72285: LD_VAR 0 3
72289: PPUSH
72290: LD_VAR 0 4
72294: PPUSH
72295: CALL_OW 1
72299: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72300: LD_ADDR_VAR 0 2
72304: PUSH
72305: LD_VAR 0 2
72309: PPUSH
72310: LD_INT 4
72312: PPUSH
72313: LD_VAR 0 2
72317: PUSH
72318: LD_INT 4
72320: ARRAY
72321: PUSH
72322: LD_VAR 0 4
72326: PLUS
72327: PPUSH
72328: CALL_OW 1
72332: ST_TO_ADDR
// end ;
72333: GO 72252
72335: POP
72336: POP
// end ;
72337: LD_VAR 0 2
72341: RET
// export function Length ( array ) ; begin
72342: LD_INT 0
72344: PPUSH
// result := array + 0 ;
72345: LD_ADDR_VAR 0 2
72349: PUSH
72350: LD_VAR 0 1
72354: PUSH
72355: LD_INT 0
72357: PLUS
72358: ST_TO_ADDR
// end ;
72359: LD_VAR 0 2
72363: RET
// export function PrepareArray ( array ) ; begin
72364: LD_INT 0
72366: PPUSH
// result := array diff 0 ;
72367: LD_ADDR_VAR 0 2
72371: PUSH
72372: LD_VAR 0 1
72376: PUSH
72377: LD_INT 0
72379: DIFF
72380: ST_TO_ADDR
// if not result [ 1 ] then
72381: LD_VAR 0 2
72385: PUSH
72386: LD_INT 1
72388: ARRAY
72389: NOT
72390: IFFALSE 72410
// result := Delete ( result , 1 ) ;
72392: LD_ADDR_VAR 0 2
72396: PUSH
72397: LD_VAR 0 2
72401: PPUSH
72402: LD_INT 1
72404: PPUSH
72405: CALL_OW 3
72409: ST_TO_ADDR
// end ;
72410: LD_VAR 0 2
72414: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72415: LD_INT 0
72417: PPUSH
72418: PPUSH
72419: PPUSH
72420: PPUSH
// sibRocketRange := 25 ;
72421: LD_ADDR_VAR 0 6
72425: PUSH
72426: LD_INT 25
72428: ST_TO_ADDR
// result := false ;
72429: LD_ADDR_VAR 0 4
72433: PUSH
72434: LD_INT 0
72436: ST_TO_ADDR
// for i := 0 to 5 do
72437: LD_ADDR_VAR 0 5
72441: PUSH
72442: DOUBLE
72443: LD_INT 0
72445: DEC
72446: ST_TO_ADDR
72447: LD_INT 5
72449: PUSH
72450: FOR_TO
72451: IFFALSE 72518
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72453: LD_VAR 0 1
72457: PPUSH
72458: LD_VAR 0 5
72462: PPUSH
72463: LD_VAR 0 6
72467: PPUSH
72468: CALL_OW 272
72472: PPUSH
72473: LD_VAR 0 2
72477: PPUSH
72478: LD_VAR 0 5
72482: PPUSH
72483: LD_VAR 0 6
72487: PPUSH
72488: CALL_OW 273
72492: PPUSH
72493: LD_VAR 0 3
72497: PPUSH
72498: CALL_OW 309
72502: IFFALSE 72516
// begin result := true ;
72504: LD_ADDR_VAR 0 4
72508: PUSH
72509: LD_INT 1
72511: ST_TO_ADDR
// exit ;
72512: POP
72513: POP
72514: GO 72520
// end ;
72516: GO 72450
72518: POP
72519: POP
// end ;
72520: LD_VAR 0 4
72524: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
72525: LD_INT 0
72527: PPUSH
72528: PPUSH
72529: PPUSH
// if btype = b_depot then
72530: LD_VAR 0 2
72534: PUSH
72535: LD_INT 0
72537: EQUAL
72538: IFFALSE 72550
// begin result := true ;
72540: LD_ADDR_VAR 0 3
72544: PUSH
72545: LD_INT 1
72547: ST_TO_ADDR
// exit ;
72548: GO 72670
// end ; pom := GetBase ( depot ) ;
72550: LD_ADDR_VAR 0 4
72554: PUSH
72555: LD_VAR 0 1
72559: PPUSH
72560: CALL_OW 274
72564: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
72565: LD_ADDR_VAR 0 5
72569: PUSH
72570: LD_VAR 0 2
72574: PPUSH
72575: LD_VAR 0 1
72579: PPUSH
72580: CALL_OW 248
72584: PPUSH
72585: CALL_OW 450
72589: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72590: LD_ADDR_VAR 0 3
72594: PUSH
72595: LD_VAR 0 4
72599: PPUSH
72600: LD_INT 1
72602: PPUSH
72603: CALL_OW 275
72607: PUSH
72608: LD_VAR 0 5
72612: PUSH
72613: LD_INT 1
72615: ARRAY
72616: GREATEREQUAL
72617: IFFALSE 72643
72619: PUSH
72620: LD_VAR 0 4
72624: PPUSH
72625: LD_INT 2
72627: PPUSH
72628: CALL_OW 275
72632: PUSH
72633: LD_VAR 0 5
72637: PUSH
72638: LD_INT 2
72640: ARRAY
72641: GREATEREQUAL
72642: AND
72643: IFFALSE 72669
72645: PUSH
72646: LD_VAR 0 4
72650: PPUSH
72651: LD_INT 3
72653: PPUSH
72654: CALL_OW 275
72658: PUSH
72659: LD_VAR 0 5
72663: PUSH
72664: LD_INT 3
72666: ARRAY
72667: GREATEREQUAL
72668: AND
72669: ST_TO_ADDR
// end ;
72670: LD_VAR 0 3
72674: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72675: LD_INT 0
72677: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72678: LD_VAR 0 1
72682: PPUSH
72683: LD_VAR 0 2
72687: PPUSH
72688: LD_INT 0
72690: PPUSH
72691: LD_INT 0
72693: PPUSH
72694: LD_INT 1
72696: PPUSH
72697: LD_INT 0
72699: PPUSH
72700: CALL_OW 587
// end ;
72704: LD_VAR 0 3
72708: RET
// export function CenterOnNow ( unit ) ; begin
72709: LD_INT 0
72711: PPUSH
// result := IsInUnit ( unit ) ;
72712: LD_ADDR_VAR 0 2
72716: PUSH
72717: LD_VAR 0 1
72721: PPUSH
72722: CALL_OW 310
72726: ST_TO_ADDR
// if not result then
72727: LD_VAR 0 2
72731: NOT
72732: IFFALSE 72744
// result := unit ;
72734: LD_ADDR_VAR 0 2
72738: PUSH
72739: LD_VAR 0 1
72743: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72744: LD_VAR 0 1
72748: PPUSH
72749: CALL_OW 87
// end ;
72753: LD_VAR 0 2
72757: RET
// export function ComMoveHex ( unit , hex ) ; begin
72758: LD_INT 0
72760: PPUSH
// if not hex then
72761: LD_VAR 0 2
72765: NOT
72766: IFFALSE 72770
// exit ;
72768: GO 72823
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72770: LD_VAR 0 2
72774: PUSH
72775: LD_INT 1
72777: ARRAY
72778: PPUSH
72779: LD_VAR 0 2
72783: PUSH
72784: LD_INT 2
72786: ARRAY
72787: PPUSH
72788: CALL_OW 428
72792: IFFALSE 72796
// exit ;
72794: GO 72823
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72796: LD_VAR 0 1
72800: PPUSH
72801: LD_VAR 0 2
72805: PUSH
72806: LD_INT 1
72808: ARRAY
72809: PPUSH
72810: LD_VAR 0 2
72814: PUSH
72815: LD_INT 2
72817: ARRAY
72818: PPUSH
72819: CALL_OW 111
// end ;
72823: LD_VAR 0 3
72827: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72828: LD_INT 0
72830: PPUSH
72831: PPUSH
72832: PPUSH
// if not unit or not enemy then
72833: LD_VAR 0 1
72837: NOT
72838: IFTRUE 72847
72840: PUSH
72841: LD_VAR 0 2
72845: NOT
72846: OR
72847: IFFALSE 72851
// exit ;
72849: GO 72977
// x := GetX ( enemy ) ;
72851: LD_ADDR_VAR 0 4
72855: PUSH
72856: LD_VAR 0 2
72860: PPUSH
72861: CALL_OW 250
72865: ST_TO_ADDR
// y := GetY ( enemy ) ;
72866: LD_ADDR_VAR 0 5
72870: PUSH
72871: LD_VAR 0 2
72875: PPUSH
72876: CALL_OW 251
72880: ST_TO_ADDR
// if ValidHex ( x , y ) then
72881: LD_VAR 0 4
72885: PPUSH
72886: LD_VAR 0 5
72890: PPUSH
72891: CALL_OW 488
72895: IFFALSE 72977
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72897: LD_VAR 0 2
72901: PPUSH
72902: CALL_OW 247
72906: PUSH
72907: LD_INT 3
72909: PUSH
72910: LD_INT 2
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: IN
72917: IFTRUE 72940
72919: PUSH
72920: LD_VAR 0 1
72924: PPUSH
72925: CALL_OW 255
72929: PPUSH
72930: LD_VAR 0 2
72934: PPUSH
72935: CALL_OW 292
72939: OR
72940: IFFALSE 72958
// ComAttackUnit ( unit , enemy ) else
72942: LD_VAR 0 1
72946: PPUSH
72947: LD_VAR 0 2
72951: PPUSH
72952: CALL_OW 115
72956: GO 72977
// ComAgressiveMove ( unit , x , y ) ;
72958: LD_VAR 0 1
72962: PPUSH
72963: LD_VAR 0 4
72967: PPUSH
72968: LD_VAR 0 5
72972: PPUSH
72973: CALL_OW 114
// end ;
72977: LD_VAR 0 3
72981: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72982: LD_INT 0
72984: PPUSH
72985: PPUSH
72986: PPUSH
// list := AreaToList ( area , 0 ) ;
72987: LD_ADDR_VAR 0 5
72991: PUSH
72992: LD_VAR 0 1
72996: PPUSH
72997: LD_INT 0
72999: PPUSH
73000: CALL_OW 517
73004: ST_TO_ADDR
// if not list then
73005: LD_VAR 0 5
73009: NOT
73010: IFFALSE 73014
// exit ;
73012: GO 73144
// if all then
73014: LD_VAR 0 2
73018: IFFALSE 73106
// begin for i := 1 to list [ 1 ] do
73020: LD_ADDR_VAR 0 4
73024: PUSH
73025: DOUBLE
73026: LD_INT 1
73028: DEC
73029: ST_TO_ADDR
73030: LD_VAR 0 5
73034: PUSH
73035: LD_INT 1
73037: ARRAY
73038: PUSH
73039: FOR_TO
73040: IFFALSE 73102
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73042: LD_ADDR_VAR 0 3
73046: PUSH
73047: LD_VAR 0 3
73051: PPUSH
73052: LD_VAR 0 3
73056: PUSH
73057: LD_INT 1
73059: PLUS
73060: PPUSH
73061: LD_VAR 0 5
73065: PUSH
73066: LD_INT 1
73068: ARRAY
73069: PUSH
73070: LD_VAR 0 4
73074: ARRAY
73075: PUSH
73076: LD_VAR 0 5
73080: PUSH
73081: LD_INT 2
73083: ARRAY
73084: PUSH
73085: LD_VAR 0 4
73089: ARRAY
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: PPUSH
73095: CALL_OW 1
73099: ST_TO_ADDR
73100: GO 73039
73102: POP
73103: POP
// exit ;
73104: GO 73144
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73106: LD_ADDR_VAR 0 3
73110: PUSH
73111: LD_VAR 0 5
73115: PUSH
73116: LD_INT 1
73118: ARRAY
73119: PUSH
73120: LD_INT 1
73122: ARRAY
73123: PUSH
73124: LD_VAR 0 5
73128: PUSH
73129: LD_INT 2
73131: ARRAY
73132: PUSH
73133: LD_INT 1
73135: ARRAY
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PUSH
73141: EMPTY
73142: LIST
73143: ST_TO_ADDR
// end ;
73144: LD_VAR 0 3
73148: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73149: LD_INT 0
73151: PPUSH
73152: PPUSH
// list := AreaToList ( area , 0 ) ;
73153: LD_ADDR_VAR 0 4
73157: PUSH
73158: LD_VAR 0 1
73162: PPUSH
73163: LD_INT 0
73165: PPUSH
73166: CALL_OW 517
73170: ST_TO_ADDR
// if not list then
73171: LD_VAR 0 4
73175: NOT
73176: IFFALSE 73180
// exit ;
73178: GO 73221
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73180: LD_ADDR_VAR 0 3
73184: PUSH
73185: LD_VAR 0 4
73189: PUSH
73190: LD_INT 1
73192: ARRAY
73193: PUSH
73194: LD_INT 1
73196: ARRAY
73197: PUSH
73198: LD_VAR 0 4
73202: PUSH
73203: LD_INT 2
73205: ARRAY
73206: PUSH
73207: LD_INT 1
73209: ARRAY
73210: PUSH
73211: LD_VAR 0 2
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: LIST
73220: ST_TO_ADDR
// end ;
73221: LD_VAR 0 3
73225: RET
// export function First ( array ) ; begin
73226: LD_INT 0
73228: PPUSH
// if not array then
73229: LD_VAR 0 1
73233: NOT
73234: IFFALSE 73238
// exit ;
73236: GO 73252
// result := array [ 1 ] ;
73238: LD_ADDR_VAR 0 2
73242: PUSH
73243: LD_VAR 0 1
73247: PUSH
73248: LD_INT 1
73250: ARRAY
73251: ST_TO_ADDR
// end ;
73252: LD_VAR 0 2
73256: RET
// export function Last ( array ) ; begin
73257: LD_INT 0
73259: PPUSH
// if not array then
73260: LD_VAR 0 1
73264: NOT
73265: IFFALSE 73269
// exit ;
73267: GO 73285
// result := array [ array ] ;
73269: LD_ADDR_VAR 0 2
73273: PUSH
73274: LD_VAR 0 1
73278: PUSH
73279: LD_VAR 0 1
73283: ARRAY
73284: ST_TO_ADDR
// end ;
73285: LD_VAR 0 2
73289: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73290: LD_INT 0
73292: PPUSH
73293: PPUSH
// result := [ ] ;
73294: LD_ADDR_VAR 0 5
73298: PUSH
73299: EMPTY
73300: ST_TO_ADDR
// if not array then
73301: LD_VAR 0 1
73305: NOT
73306: IFFALSE 73310
// exit ;
73308: GO 73422
// for i := 1 to array do
73310: LD_ADDR_VAR 0 6
73314: PUSH
73315: DOUBLE
73316: LD_INT 1
73318: DEC
73319: ST_TO_ADDR
73320: LD_VAR 0 1
73324: PUSH
73325: FOR_TO
73326: IFFALSE 73420
// if array [ i ] [ index ] = value then
73328: LD_VAR 0 1
73332: PUSH
73333: LD_VAR 0 6
73337: ARRAY
73338: PUSH
73339: LD_VAR 0 2
73343: ARRAY
73344: PUSH
73345: LD_VAR 0 3
73349: EQUAL
73350: IFFALSE 73418
// begin if indexColumn then
73352: LD_VAR 0 4
73356: IFFALSE 73392
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73358: LD_ADDR_VAR 0 5
73362: PUSH
73363: LD_VAR 0 5
73367: PPUSH
73368: LD_VAR 0 1
73372: PUSH
73373: LD_VAR 0 6
73377: ARRAY
73378: PUSH
73379: LD_VAR 0 4
73383: ARRAY
73384: PPUSH
73385: CALL 68430 0 2
73389: ST_TO_ADDR
73390: GO 73418
// result := Join ( result , array [ i ] ) ;
73392: LD_ADDR_VAR 0 5
73396: PUSH
73397: LD_VAR 0 5
73401: PPUSH
73402: LD_VAR 0 1
73406: PUSH
73407: LD_VAR 0 6
73411: ARRAY
73412: PPUSH
73413: CALL 68430 0 2
73417: ST_TO_ADDR
// end ;
73418: GO 73325
73420: POP
73421: POP
// end ;
73422: LD_VAR 0 5
73426: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73427: LD_INT 0
73429: PPUSH
// if not vehicles or not parkingPoint then
73430: LD_VAR 0 1
73434: NOT
73435: IFTRUE 73444
73437: PUSH
73438: LD_VAR 0 2
73442: NOT
73443: OR
73444: IFFALSE 73448
// exit ;
73446: GO 73546
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73448: LD_ADDR_VAR 0 1
73452: PUSH
73453: LD_VAR 0 1
73457: PPUSH
73458: LD_INT 50
73460: PUSH
73461: EMPTY
73462: LIST
73463: PUSH
73464: LD_INT 3
73466: PUSH
73467: LD_INT 92
73469: PUSH
73470: LD_VAR 0 2
73474: PUSH
73475: LD_INT 1
73477: ARRAY
73478: PUSH
73479: LD_VAR 0 2
73483: PUSH
73484: LD_INT 2
73486: ARRAY
73487: PUSH
73488: LD_INT 8
73490: PUSH
73491: EMPTY
73492: LIST
73493: LIST
73494: LIST
73495: LIST
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: PUSH
73501: EMPTY
73502: LIST
73503: LIST
73504: PPUSH
73505: CALL_OW 72
73509: ST_TO_ADDR
// if not vehicles then
73510: LD_VAR 0 1
73514: NOT
73515: IFFALSE 73519
// exit ;
73517: GO 73546
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
73519: LD_VAR 0 1
73523: PPUSH
73524: LD_VAR 0 2
73528: PUSH
73529: LD_INT 1
73531: ARRAY
73532: PPUSH
73533: LD_VAR 0 2
73537: PUSH
73538: LD_INT 2
73540: ARRAY
73541: PPUSH
73542: CALL_OW 111
// end ;
73546: LD_VAR 0 3
73550: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
73551: LD_INT 0
73553: PPUSH
73554: PPUSH
73555: PPUSH
// if not side or not area then
73556: LD_VAR 0 1
73560: NOT
73561: IFTRUE 73570
73563: PUSH
73564: LD_VAR 0 2
73568: NOT
73569: OR
73570: IFFALSE 73574
// exit ;
73572: GO 73693
// tmp := AreaToList ( area , 0 ) ;
73574: LD_ADDR_VAR 0 5
73578: PUSH
73579: LD_VAR 0 2
73583: PPUSH
73584: LD_INT 0
73586: PPUSH
73587: CALL_OW 517
73591: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73592: LD_ADDR_VAR 0 4
73596: PUSH
73597: DOUBLE
73598: LD_INT 1
73600: DEC
73601: ST_TO_ADDR
73602: LD_VAR 0 5
73606: PUSH
73607: LD_INT 1
73609: ARRAY
73610: PUSH
73611: FOR_TO
73612: IFFALSE 73691
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
73614: LD_VAR 0 5
73618: PUSH
73619: LD_INT 1
73621: ARRAY
73622: PUSH
73623: LD_VAR 0 4
73627: ARRAY
73628: PPUSH
73629: LD_VAR 0 5
73633: PUSH
73634: LD_INT 2
73636: ARRAY
73637: PUSH
73638: LD_VAR 0 4
73642: ARRAY
73643: PPUSH
73644: CALL_OW 351
73648: IFFALSE 73689
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73650: LD_VAR 0 5
73654: PUSH
73655: LD_INT 1
73657: ARRAY
73658: PUSH
73659: LD_VAR 0 4
73663: ARRAY
73664: PPUSH
73665: LD_VAR 0 5
73669: PUSH
73670: LD_INT 2
73672: ARRAY
73673: PUSH
73674: LD_VAR 0 4
73678: ARRAY
73679: PPUSH
73680: LD_VAR 0 1
73684: PPUSH
73685: CALL_OW 244
// end ;
73689: GO 73611
73691: POP
73692: POP
// end ;
73693: LD_VAR 0 3
73697: RET
// export function UniqueArray ( array ) ; var i ; begin
73698: LD_INT 0
73700: PPUSH
73701: PPUSH
// result := [ ] ;
73702: LD_ADDR_VAR 0 2
73706: PUSH
73707: EMPTY
73708: ST_TO_ADDR
// if not array then
73709: LD_VAR 0 1
73713: NOT
73714: IFFALSE 73718
// exit ;
73716: GO 73779
// for i := 1 to array do
73718: LD_ADDR_VAR 0 3
73722: PUSH
73723: DOUBLE
73724: LD_INT 1
73726: DEC
73727: ST_TO_ADDR
73728: LD_VAR 0 1
73732: PUSH
73733: FOR_TO
73734: IFFALSE 73777
// if not array [ i ] in result then
73736: LD_VAR 0 1
73740: PUSH
73741: LD_VAR 0 3
73745: ARRAY
73746: PUSH
73747: LD_VAR 0 2
73751: IN
73752: NOT
73753: IFFALSE 73775
// result := Join ( result , i ) ;
73755: LD_ADDR_VAR 0 2
73759: PUSH
73760: LD_VAR 0 2
73764: PPUSH
73765: LD_VAR 0 3
73769: PPUSH
73770: CALL 68430 0 2
73774: ST_TO_ADDR
73775: GO 73733
73777: POP
73778: POP
// end ; end_of_file
73779: LD_VAR 0 2
73783: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73784: LD_VAR 0 1
73788: PUSH
73789: LD_INT 200
73791: DOUBLE
73792: GREATEREQUAL
73793: IFFALSE 73801
73795: LD_INT 299
73797: DOUBLE
73798: LESSEQUAL
73799: IFTRUE 73803
73801: GO 73835
73803: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73804: LD_VAR 0 1
73808: PPUSH
73809: LD_VAR 0 2
73813: PPUSH
73814: LD_VAR 0 3
73818: PPUSH
73819: LD_VAR 0 4
73823: PPUSH
73824: LD_VAR 0 5
73828: PPUSH
73829: CALL 24506 0 5
73833: GO 73912
73835: LD_INT 300
73837: DOUBLE
73838: GREATEREQUAL
73839: IFFALSE 73847
73841: LD_INT 399
73843: DOUBLE
73844: LESSEQUAL
73845: IFTRUE 73849
73847: GO 73911
73849: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73850: LD_VAR 0 1
73854: PPUSH
73855: LD_VAR 0 2
73859: PPUSH
73860: LD_VAR 0 3
73864: PPUSH
73865: LD_VAR 0 4
73869: PPUSH
73870: LD_VAR 0 5
73874: PPUSH
73875: LD_VAR 0 6
73879: PPUSH
73880: LD_VAR 0 7
73884: PPUSH
73885: LD_VAR 0 8
73889: PPUSH
73890: LD_VAR 0 9
73894: PPUSH
73895: LD_VAR 0 10
73899: PPUSH
73900: LD_VAR 0 11
73904: PPUSH
73905: CALL 20309 0 11
73909: GO 73912
73911: POP
// end ;
73912: PPOPN 11
73914: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73915: LD_VAR 0 1
73919: PPUSH
73920: LD_VAR 0 2
73924: PPUSH
73925: LD_VAR 0 3
73929: PPUSH
73930: LD_VAR 0 4
73934: PPUSH
73935: LD_VAR 0 5
73939: PPUSH
73940: CALL 23806 0 5
// end ; end_of_file
73944: PPOPN 5
73946: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73947: LD_VAR 0 1
73951: PPUSH
73952: LD_VAR 0 2
73956: PPUSH
73957: LD_VAR 0 3
73961: PPUSH
73962: LD_VAR 0 4
73966: PPUSH
73967: LD_VAR 0 5
73971: PPUSH
73972: LD_VAR 0 6
73976: PPUSH
73977: CALL 7849 0 6
// end ;
73981: PPOPN 6
73983: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73984: LD_INT 0
73986: PPUSH
// begin if not units then
73987: LD_VAR 0 1
73991: NOT
73992: IFFALSE 73996
// exit ;
73994: GO 74030
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
73996: LD_VAR 0 1
74000: PPUSH
74001: LD_VAR 0 2
74005: PPUSH
74006: LD_VAR 0 3
74010: PPUSH
74011: LD_VAR 0 4
74015: PPUSH
74016: LD_VAR 0 5
74020: PPUSH
74021: LD_VAR 0 6
74025: PPUSH
74026: CALL 30203 0 6
// end ;
74030: PPOPN 7
74032: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74033: CALL 7729 0 0
// end ;
74037: PPOPN 1
74039: END
