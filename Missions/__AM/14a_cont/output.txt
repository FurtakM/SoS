// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 61443 0 9
// PrepareAmerican ;
  46: CALL 4099 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 923 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 27360 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 27360 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 27360 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 451
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 413
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 411
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: PUSH
 366: LD_VAR 0 3
 370: PPUSH
 371: CALL_OW 258
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: AND
 380: PUSH
 381: LD_VAR 0 3
 385: PPUSH
 386: CALL_OW 248
 390: PUSH
 391: LD_INT 3
 393: EQUAL
 394: AND
 395: IFFALSE 409
// begin RuSci := i ;
 397: LD_ADDR_EXP 17
 401: PUSH
 402: LD_VAR 0 3
 406: ST_TO_ADDR
// break ;
 407: GO 411
// end ;
 409: GO 349
 411: POP
 412: POP
// end ; if not RuSci then
 413: LD_EXP 17
 417: NOT
 418: IFFALSE 451
// begin uc_nation := 3 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 3
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 4
 433: PPUSH
 434: LD_INT 10
 436: PPUSH
 437: CALL_OW 380
// RuSci := CreateHuman ;
 441: LD_ADDR_EXP 17
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 451: LD_ADDR_VAR 0 6
 455: PUSH
 456: LD_STRING 14a_JMMVeh
 458: PPUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 30
 489: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 490: LD_ADDR_VAR 0 7
 494: PUSH
 495: LD_STRING 14a_BurlakVeh
 497: PPUSH
 498: LD_INT 22
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 1
 506: PUSH
 507: LD_INT 51
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 30
 528: ST_TO_ADDR
// uc_direction := 4 ;
 529: LD_ADDR_OWVAR 24
 533: PUSH
 534: LD_INT 4
 536: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 6
 549: ARRAY
 550: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 551: LD_VAR 0 6
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_VAR 0 6
 564: PUSH
 565: LD_INT 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 6
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 6
 582: PUSH
 583: LD_INT 4
 585: ARRAY
 586: PPUSH
 587: LD_INT 60
 589: PPUSH
 590: LD_INT 80
 592: PPUSH
 593: CALL_OW 12
 597: PPUSH
 598: CALL 32377 0 5
// JMMVeh := CreateVehicle ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: CALL_OW 45
 611: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 63678 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 627: LD_VAR 0 6
 631: PUSH
 632: LD_INT 5
 634: ARRAY
 635: PUSH
 636: LD_INT 0
 638: NONEQUAL
 639: IFFALSE 659
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 6
 650: PUSH
 651: LD_INT 5
 653: ARRAY
 654: PPUSH
 655: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 659: LD_EXP 14
 663: PPUSH
 664: LD_VAR 0 4
 668: PPUSH
 669: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 673: LD_ADDR_OWVAR 21
 677: PUSH
 678: LD_VAR 0 7
 682: PUSH
 683: LD_INT 6
 685: ARRAY
 686: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 687: LD_VAR 0 7
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: PPUSH
 696: LD_VAR 0 7
 700: PUSH
 701: LD_INT 2
 703: ARRAY
 704: PPUSH
 705: LD_VAR 0 7
 709: PUSH
 710: LD_INT 3
 712: ARRAY
 713: PPUSH
 714: LD_VAR 0 7
 718: PUSH
 719: LD_INT 4
 721: ARRAY
 722: PPUSH
 723: LD_INT 60
 725: PPUSH
 726: LD_INT 80
 728: PPUSH
 729: CALL_OW 12
 733: PPUSH
 734: CALL 32377 0 5
// BurlakVeh := CreateVehicle ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 748: LD_VAR 0 5
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 63678 0 3
 763: NOT
 764: IFFALSE 784
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 766: LD_VAR 0 5
 770: PPUSH
 771: LD_INT 233
 773: PPUSH
 774: LD_INT 85
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 784: LD_VAR 0 7
 788: PUSH
 789: LD_INT 5
 791: ARRAY
 792: PUSH
 793: LD_INT 0
 795: NONEQUAL
 796: IFFALSE 816
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_VAR 0 7
 807: PUSH
 808: LD_INT 5
 810: ARRAY
 811: PPUSH
 812: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 816: LD_EXP 15
 820: PPUSH
 821: LD_VAR 0 5
 825: PPUSH
 826: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_INT 178
 837: PUSH
 838: LD_INT 91
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 137
 847: PUSH
 848: LD_INT 83
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 157
 857: PUSH
 858: LD_INT 75
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 162
 867: PUSH
 868: LD_INT 67
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 887: LD_INT 4
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 58
// end ; end_of_file
 918: LD_VAR 0 1
 922: RET
// export function Action ; begin
 923: LD_INT 0
 925: PPUSH
// InGameOn ;
 926: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 930: LD_INT 221
 932: PPUSH
 933: LD_INT 80
 935: PPUSH
 936: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 940: LD_EXP 14
 944: PUSH
 945: LD_EXP 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: LD_INT 217
 956: PPUSH
 957: LD_INT 79
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$7 ) ;
 964: LD_INT 245
 966: PPUSH
 967: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 971: LD_EXP 14
 975: PUSH
 976: LD_EXP 15
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 989: LD_EXP 15
 993: PPUSH
 994: LD_STRING D2-Bur-1
 996: PPUSH
 997: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1001: LD_EXP 14
1005: PPUSH
1006: LD_STRING D2-JMM-1
1008: PPUSH
1009: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1013: LD_INT 18
1015: PPUSH
1016: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1020: LD_EXP 15
1024: PPUSH
1025: LD_EXP 14
1029: PPUSH
1030: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1034: LD_EXP 15
1038: PPUSH
1039: LD_STRING D2-Bur-2
1041: PPUSH
1042: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1046: LD_EXP 15
1050: PPUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 2
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: PPUSH
1066: LD_EXP 15
1070: PPUSH
1071: CALL_OW 74
1075: PPUSH
1076: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1080: LD_EXP 14
1084: PPUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 2
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL_OW 69
1099: PPUSH
1100: LD_EXP 14
1104: PPUSH
1105: CALL_OW 74
1109: PPUSH
1110: CALL_OW 120
// wait ( 0 0$1 ) ;
1114: LD_INT 35
1116: PPUSH
1117: CALL_OW 67
// InGameOff ;
1121: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1125: LD_STRING MArtPickup
1127: PPUSH
1128: CALL_OW 337
// end ;
1132: LD_VAR 0 1
1136: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1137: LD_EXP 22
1141: PPUSH
1142: LD_INT 101
1144: PUSH
1145: LD_INT 7
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: PUSH
1157: LD_EXP 8
1161: NOT
1162: AND
1163: IFFALSE 1192
1165: GO 1167
1167: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING D3-Bur-1
1175: PPUSH
1176: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1180: LD_EXP 14
1184: PPUSH
1185: LD_STRING D3-JMM-1
1187: PPUSH
1188: CALL_OW 88
// end ;
1192: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1193: LD_INT 5
1195: PPUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 70
1210: IFFALSE 1545
1212: GO 1214
1214: DISABLE
// begin wait ( 0 0$3 ) ;
1215: LD_INT 105
1217: PPUSH
1218: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1222: LD_INT 139
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 7
1230: PPUSH
1231: LD_INT 20
1233: NEG
1234: PPUSH
1235: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1239: LD_INT 139
1241: PPUSH
1242: LD_INT 43
1244: PPUSH
1245: LD_INT 7
1247: PPUSH
1248: CALL_OW 331
// DialogueOn ;
1252: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1256: LD_EXP 14
1260: PPUSH
1261: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1265: LD_EXP 14
1269: PPUSH
1270: LD_STRING D3a-JMM-1
1272: PPUSH
1273: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1277: LD_EXP 15
1281: PPUSH
1282: LD_STRING D3a-Bur-1
1284: PPUSH
1285: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_STRING D3a-JMM-2
1296: PPUSH
1297: CALL_OW 88
// if Joan then
1301: LD_EXP 16
1305: IFFALSE 1321
// SayRadio ( Joan , D3a-Joan-2 ) else
1307: LD_EXP 16
1311: PPUSH
1312: LD_STRING D3a-Joan-2
1314: PPUSH
1315: CALL_OW 94
1319: GO 1333
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1321: LD_EXP 17
1325: PPUSH
1326: LD_STRING D3a-RSci1-2
1328: PPUSH
1329: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_STRING D3a-Huck-2
1340: PPUSH
1341: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_STRING D3a-Pow-2
1352: PPUSH
1353: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1357: LD_EXP 18
1361: PPUSH
1362: LD_STRING D3a-Huck-3
1364: PPUSH
1365: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1369: LD_EXP 19
1373: PPUSH
1374: LD_STRING D3a-Pow-3
1376: PPUSH
1377: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1381: LD_EXP 18
1385: PPUSH
1386: LD_STRING D3a-Huck-4
1388: PPUSH
1389: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1393: LD_EXP 14
1397: PPUSH
1398: LD_STRING D3a-JMM-4
1400: PPUSH
1401: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1405: LD_EXP 15
1409: PPUSH
1410: LD_STRING D3a-Bur-4
1412: PPUSH
1413: CALL_OW 88
// if Joan then
1417: LD_EXP 16
1421: IFFALSE 1437
// SayRadio ( Joan , D3a-Joan-4 ) else
1423: LD_EXP 16
1427: PPUSH
1428: LD_STRING D3a-Joan-4
1430: PPUSH
1431: CALL_OW 94
1435: GO 1449
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1437: LD_EXP 17
1441: PPUSH
1442: LD_STRING D3a-RSci1-4
1444: PPUSH
1445: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1449: LD_INT 133
1451: PPUSH
1452: LD_INT 43
1454: PPUSH
1455: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1459: LD_INT 10
1461: PPUSH
1462: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1466: LD_EXP 14
1470: PPUSH
1471: LD_STRING D3a-JMM-5
1473: PPUSH
1474: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1478: LD_EXP 15
1482: PPUSH
1483: LD_STRING D3a-Bur-5
1485: PPUSH
1486: CALL_OW 88
// DialogueOff ;
1490: CALL_OW 7
// seenBase := true ;
1494: LD_ADDR_EXP 8
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1502: LD_INT 525
1504: PUSH
1505: LD_INT 420
1507: PUSH
1508: LD_INT 315
1510: PUSH
1511: LD_INT 280
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PPUSH
1526: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1530: LD_EXP 21
1534: PPUSH
1535: LD_INT 142
1537: PPUSH
1538: LD_INT 52
1540: PPUSH
1541: CALL_OW 116
// end ;
1545: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1546: LD_EXP 8
1550: NOT
1551: PUSH
1552: LD_EXP 4
1556: NOT
1557: AND
1558: IFFALSE 1578
1560: GO 1562
1562: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1563: LD_EXP 21
1567: PPUSH
1568: LD_INT 142
1570: PPUSH
1571: LD_INT 52
1573: PPUSH
1574: CALL_OW 116
1578: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// contaminateTime := tick ;
1583: LD_ADDR_EXP 3
1587: PUSH
1588: LD_OWVAR 1
1592: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1593: LD_INT 175
1595: PPUSH
1596: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1600: LD_ADDR_VAR 0 5
1604: PUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 469
1612: ST_TO_ADDR
// if art then
1613: LD_VAR 0 5
1617: IFFALSE 1656
// if art [ 1 ] = 157 and art [ 2 ] = 75 then
1619: LD_VAR 0 5
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PUSH
1628: LD_INT 157
1630: EQUAL
1631: PUSH
1632: LD_VAR 0 5
1636: PUSH
1637: LD_INT 2
1639: ARRAY
1640: PUSH
1641: LD_INT 75
1643: EQUAL
1644: AND
1645: IFFALSE 1656
// begin YouLost ( Artefact ) ;
1647: LD_STRING Artefact
1649: PPUSH
1650: CALL_OW 104
// exit ;
1654: GO 1812
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1656: LD_EXP 14
1660: PPUSH
1661: CALL_OW 302
1665: PUSH
1666: LD_EXP 15
1670: PPUSH
1671: CALL_OW 302
1675: AND
1676: IFFALSE 1753
// begin DialogueOn ;
1678: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1682: LD_EXP 14
1686: PPUSH
1687: LD_STRING D6a-JMM-1
1689: PPUSH
1690: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1694: LD_EXP 15
1698: PPUSH
1699: LD_STRING D6a-Bur-1
1701: PPUSH
1702: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1706: LD_EXP 14
1710: PPUSH
1711: LD_STRING D6c-JMM-1
1713: PPUSH
1714: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1718: LD_EXP 15
1722: PPUSH
1723: LD_STRING D6c-Bur-1
1725: PPUSH
1726: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1730: LD_EXP 14
1734: PPUSH
1735: LD_STRING D6c-JMM-2
1737: PPUSH
1738: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1742: LD_STRING MBase
1744: PPUSH
1745: CALL_OW 337
// DialogueOff ;
1749: CALL_OW 7
// end ; bombExploded := true ;
1753: LD_ADDR_EXP 4
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1761: LD_INT 6300
1763: PUSH
1764: LD_INT 5250
1766: PUSH
1767: LD_INT 4200
1769: PUSH
1770: LD_INT 3500
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: LD_OWVAR 67
1783: ARRAY
1784: PPUSH
1785: CALL_OW 67
// if IsOk ( JMM ) then
1789: LD_EXP 14
1793: PPUSH
1794: CALL_OW 302
1798: IFFALSE 1812
// Say ( JMM , D8-JMM-1 ) ;
1800: LD_EXP 14
1804: PPUSH
1805: LD_STRING D8-JMM-1
1807: PPUSH
1808: CALL_OW 88
// end ;
1812: LD_VAR 0 4
1816: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1817: LD_EXP 9
1821: PUSH
1822: LD_EXP 7
1826: NOT
1827: AND
1828: PUSH
1829: LD_EXP 4
1833: AND
1834: IFFALSE 1889
1836: GO 1838
1838: DISABLE
// begin enable ;
1839: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1840: LD_INT 9
1842: PPUSH
1843: LD_INT 22
1845: PUSH
1846: LD_INT 7
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 70
1857: IFFALSE 1875
// stevensTimer := stevensTimer - 0 0$30 else
1859: LD_ADDR_EXP 9
1863: PUSH
1864: LD_EXP 9
1868: PUSH
1869: LD_INT 1050
1871: MINUS
1872: ST_TO_ADDR
1873: GO 1889
// stevensTimer := stevensTimer - 0 0$1 ;
1875: LD_ADDR_EXP 9
1879: PUSH
1880: LD_EXP 9
1884: PUSH
1885: LD_INT 35
1887: MINUS
1888: ST_TO_ADDR
// end ;
1889: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1890: LD_EXP 9
1894: PUSH
1895: LD_INT 0
1897: LESSEQUAL
1898: PUSH
1899: LD_EXP 7
1903: NOT
1904: AND
1905: IFFALSE 2069
1907: GO 1909
1909: DISABLE
1910: LD_INT 0
1912: PPUSH
1913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: LD_INT 22
1921: PUSH
1922: LD_INT 1
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 25
1931: PUSH
1932: LD_INT 4
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PPUSH
1943: CALL_OW 69
1947: ST_TO_ADDR
// for i in tmp do
1948: LD_ADDR_VAR 0 1
1952: PUSH
1953: LD_VAR 0 2
1957: PUSH
1958: FOR_IN
1959: IFFALSE 2012
// begin if IsInUnit ( i ) then
1961: LD_VAR 0 1
1965: PPUSH
1966: CALL_OW 310
1970: IFFALSE 1983
// ComExitBuilding ( i ) else
1972: LD_VAR 0 1
1976: PPUSH
1977: CALL_OW 122
1981: GO 2010
// if not HasTask ( i ) then
1983: LD_VAR 0 1
1987: PPUSH
1988: CALL_OW 314
1992: NOT
1993: IFFALSE 2010
// ComMoveXY ( i , 29 , 56 ) ;
1995: LD_VAR 0 1
1999: PPUSH
2000: LD_INT 29
2002: PPUSH
2003: LD_INT 56
2005: PPUSH
2006: CALL_OW 111
// end ;
2010: GO 1958
2012: POP
2013: POP
// repeat wait ( 0 0$1 ) ;
2014: LD_INT 35
2016: PPUSH
2017: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2021: LD_INT 8
2023: PPUSH
2024: LD_INT 22
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 4
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PPUSH
2048: CALL_OW 70
2052: IFFALSE 2014
// if planCaptured then
2054: LD_EXP 7
2058: IFFALSE 2062
// exit ;
2060: GO 2069
// YouLost ( Time ) ;
2062: LD_STRING Time
2064: PPUSH
2065: CALL_OW 104
// end ;
2069: PPOPN 2
2071: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2072: LD_INT 22
2074: PUSH
2075: LD_INT 7
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 92
2084: PUSH
2085: LD_INT 142
2087: PUSH
2088: LD_INT 52
2090: PUSH
2091: LD_INT 27
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PPUSH
2104: CALL_OW 69
2108: PUSH
2109: LD_EXP 3
2113: PUSH
2114: LD_INT 6000
2116: PLUS
2117: PUSH
2118: LD_OWVAR 1
2122: GREATER
2123: AND
2124: PUSH
2125: LD_EXP 4
2129: AND
2130: IFFALSE 2185
2132: GO 2134
2134: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2135: LD_EXP 14
2139: PUSH
2140: LD_EXP 15
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PPUSH
2149: CALL_OW 85
// DialogueOn ;
2153: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2157: LD_EXP 14
2161: PPUSH
2162: LD_STRING D6b-JMM-1
2164: PPUSH
2165: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2169: LD_EXP 15
2173: PPUSH
2174: LD_STRING D6b-Bur-1
2176: PPUSH
2177: CALL_OW 88
// DialogueOff ;
2181: CALL_OW 7
// end ;
2185: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2186: LD_EXP 15
2190: PPUSH
2191: LD_INT 142
2193: PPUSH
2194: LD_INT 52
2196: PPUSH
2197: CALL_OW 297
2201: PUSH
2202: LD_INT 25
2204: LESS
2205: PUSH
2206: LD_EXP 15
2210: PPUSH
2211: CALL_OW 310
2215: PPUSH
2216: LD_INT 142
2218: PPUSH
2219: LD_INT 52
2221: PPUSH
2222: CALL_OW 297
2226: PUSH
2227: LD_INT 25
2229: LESS
2230: OR
2231: PUSH
2232: LD_EXP 15
2236: PPUSH
2237: CALL_OW 256
2241: PUSH
2242: LD_INT 1000
2244: LESS
2245: AND
2246: PUSH
2247: LD_EXP 3
2251: PUSH
2252: LD_INT 6000
2254: PLUS
2255: PUSH
2256: LD_OWVAR 1
2260: GREATER
2261: AND
2262: PUSH
2263: LD_EXP 4
2267: AND
2268: IFFALSE 2301
2270: GO 2272
2272: DISABLE
// begin DialogueOn ;
2273: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2277: LD_EXP 15
2281: PPUSH
2282: LD_STRING D7-Bur-1
2284: PPUSH
2285: CALL_OW 88
// enteredContaminatedArea := true ;
2289: LD_ADDR_EXP 5
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// DialogueOff ;
2297: CALL_OW 7
// end ;
2301: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2302: LD_EXP 14
2306: PPUSH
2307: LD_INT 142
2309: PPUSH
2310: LD_INT 52
2312: PPUSH
2313: CALL_OW 297
2317: PUSH
2318: LD_INT 25
2320: LESS
2321: PUSH
2322: LD_EXP 14
2326: PPUSH
2327: CALL_OW 310
2331: PPUSH
2332: LD_INT 142
2334: PPUSH
2335: LD_INT 52
2337: PPUSH
2338: CALL_OW 297
2342: PUSH
2343: LD_INT 25
2345: LESS
2346: OR
2347: PUSH
2348: LD_EXP 14
2352: PPUSH
2353: CALL_OW 256
2357: PUSH
2358: LD_INT 1000
2360: LESS
2361: AND
2362: PUSH
2363: LD_EXP 3
2367: PUSH
2368: LD_INT 6000
2370: PLUS
2371: PUSH
2372: LD_OWVAR 1
2376: GREATER
2377: AND
2378: PUSH
2379: LD_EXP 4
2383: AND
2384: IFFALSE 2417
2386: GO 2388
2388: DISABLE
// begin DialogueOn ;
2389: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2393: LD_EXP 14
2397: PPUSH
2398: LD_STRING D7-JMM-1
2400: PPUSH
2401: CALL_OW 88
// enteredContaminatedArea := true ;
2405: LD_ADDR_EXP 5
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// DialogueOff ;
2413: CALL_OW 7
// end ;
2417: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2418: LD_EXP 6
2422: PUSH
2423: LD_EXP 14
2427: PPUSH
2428: CALL_OW 302
2432: AND
2433: PUSH
2434: LD_EXP 15
2438: PPUSH
2439: CALL_OW 302
2443: AND
2444: IFFALSE 2513
2446: GO 2448
2448: DISABLE
// begin DialogueOn ;
2449: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2453: LD_EXP 14
2457: PUSH
2458: LD_EXP 15
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PPUSH
2467: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2471: LD_EXP 14
2475: PPUSH
2476: LD_STRING D4-JMM-1
2478: PPUSH
2479: CALL_OW 88
// if not bombExploded then
2483: LD_EXP 4
2487: NOT
2488: IFFALSE 2502
// Say ( Burlak , D4-Bur-1 ) ;
2490: LD_EXP 15
2494: PPUSH
2495: LD_STRING D4-Bur-1
2497: PPUSH
2498: CALL_OW 88
// DialogueOff ;
2502: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2506: LD_STRING MReturn
2508: PPUSH
2509: CALL_OW 337
// end ;
2513: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2514: LD_EXP 7
2518: NOT
2519: PUSH
2520: LD_INT 22
2522: PUSH
2523: LD_INT 7
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 91
2532: PUSH
2533: LD_INT 9
2535: PUSH
2536: LD_INT 6
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: LIST
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PPUSH
2548: CALL_OW 69
2552: AND
2553: IFFALSE 2630
2555: GO 2557
2557: DISABLE
// begin DialogueOn ;
2558: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2562: LD_INT 55
2564: PPUSH
2565: LD_INT 11
2567: PPUSH
2568: LD_INT 7
2570: PPUSH
2571: LD_INT 6
2573: NEG
2574: PPUSH
2575: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2579: LD_INT 55
2581: PPUSH
2582: LD_INT 11
2584: PPUSH
2585: LD_INT 7
2587: PPUSH
2588: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2592: LD_EXP 15
2596: PPUSH
2597: LD_STRING D9-Bur-1
2599: PPUSH
2600: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2604: LD_EXP 14
2608: PPUSH
2609: LD_STRING D9-JMM-1
2611: PPUSH
2612: CALL_OW 88
// DialogueOff ;
2616: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2620: LD_INT 9
2622: PPUSH
2623: LD_INT 7
2625: PPUSH
2626: CALL_OW 235
// end ;
2630: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2631: LD_INT 9
2633: PPUSH
2634: LD_INT 22
2636: PUSH
2637: LD_INT 7
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: PPUSH
2644: CALL_OW 70
2648: IFFALSE 2684
2650: GO 2652
2652: DISABLE
// begin wait ( 0 0$07 ) ;
2653: LD_INT 245
2655: PPUSH
2656: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2660: LD_EXP 14
2664: PPUSH
2665: LD_STRING D10b-JMM-1
2667: PPUSH
2668: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2672: LD_EXP 15
2676: PPUSH
2677: LD_STRING D10b-Bur-1
2679: PPUSH
2680: CALL_OW 88
// end ;
2684: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2685: LD_EXP 9
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 1
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 25
2702: PUSH
2703: LD_INT 4
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 26
2712: PUSH
2713: LD_INT 1
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: PPUSH
2725: CALL_OW 69
2729: AND
2730: PUSH
2731: LD_INT 5
2733: PPUSH
2734: CALL_OW 255
2738: PUSH
2739: LD_INT 7
2741: EQUAL
2742: PUSH
2743: LD_INT 22
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 25
2755: PUSH
2756: LD_INT 1
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PPUSH
2767: CALL_OW 69
2771: PUSH
2772: LD_INT 0
2774: EQUAL
2775: OR
2776: AND
2777: IFFALSE 3366
2779: GO 2781
2781: DISABLE
2782: LD_INT 0
2784: PPUSH
// begin case Query ( QKill ) of 1 :
2785: LD_STRING QKill
2787: PPUSH
2788: CALL_OW 97
2792: PUSH
2793: LD_INT 1
2795: DOUBLE
2796: EQUAL
2797: IFTRUE 2801
2799: GO 3354
2801: POP
// begin DialogueOn ;
2802: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2806: LD_EXP 14
2810: PPUSH
2811: LD_STRING D10a-JMM-1
2813: PPUSH
2814: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2818: LD_EXP 15
2822: PPUSH
2823: LD_STRING D10a-Bur-1
2825: PPUSH
2826: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2830: LD_EXP 14
2834: PPUSH
2835: LD_STRING D10a-JMM-2
2837: PPUSH
2838: CALL_OW 88
// if IsOk ( Stevens ) then
2842: LD_EXP 18
2846: PPUSH
2847: CALL_OW 302
2851: IFFALSE 2867
// Say ( Stevens , D10a-Huck-2 ) else
2853: LD_EXP 18
2857: PPUSH
2858: LD_STRING D10a-Huck-2
2860: PPUSH
2861: CALL_OW 88
2865: GO 2918
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2867: LD_INT 22
2869: PUSH
2870: LD_INT 1
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 25
2879: PUSH
2880: LD_INT 4
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PUSH
2887: LD_INT 26
2889: PUSH
2890: LD_INT 1
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 69
2906: PUSH
2907: LD_INT 1
2909: ARRAY
2910: PPUSH
2911: LD_STRING D10a-ASci1-3
2913: PPUSH
2914: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2918: LD_EXP 14
2922: PPUSH
2923: LD_STRING D10a-JMM-4
2925: PPUSH
2926: CALL_OW 88
// if IsOk ( Stevens ) then
2930: LD_EXP 18
2934: PPUSH
2935: CALL_OW 302
2939: IFFALSE 2953
// Say ( Stevens , D10a-Huck-3 ) ;
2941: LD_EXP 18
2945: PPUSH
2946: LD_STRING D10a-Huck-3
2948: PPUSH
2949: CALL_OW 88
// DialogueOff ;
2953: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2957: LD_INT 1
2959: PPUSH
2960: LD_INT 7
2962: PPUSH
2963: LD_INT 1
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: CALL_OW 80
// planCaptured := true ;
2973: LD_ADDR_EXP 7
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2981: LD_STRING MEnd
2983: PPUSH
2984: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
2988: LD_STRING ACH_DIPLOMACY
2990: PPUSH
2991: CALL_OW 543
// canEnd := true ;
2995: LD_ADDR_EXP 10
2999: PUSH
3000: LD_INT 1
3002: ST_TO_ADDR
// missionTime := tick ;
3003: LD_ADDR_EXP 11
3007: PUSH
3008: LD_OWVAR 1
3012: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3013: LD_INT 35
3015: PPUSH
3016: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 3
3032: PUSH
3033: LD_INT 50
3035: PUSH
3036: EMPTY
3037: LIST
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PPUSH
3047: CALL_OW 69
3051: IFFALSE 3167
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3053: LD_ADDR_VAR 0 1
3057: PUSH
3058: LD_INT 22
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 25
3070: PUSH
3071: LD_INT 4
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 69
3086: PUSH
3087: FOR_IN
3088: IFFALSE 3165
// begin if IsInUnit ( i ) then
3090: LD_VAR 0 1
3094: PPUSH
3095: CALL_OW 310
3099: IFFALSE 3112
// ComExitBuilding ( i ) else
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 122
3110: GO 3163
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 22
3119: PUSH
3120: LD_INT 1
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 50
3132: PUSH
3133: EMPTY
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 128
// end ;
3163: GO 3087
3165: POP
3166: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3167: LD_INT 22
3169: PUSH
3170: LD_INT 1
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 3
3179: PUSH
3180: LD_INT 50
3182: PUSH
3183: EMPTY
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: PPUSH
3194: CALL_OW 69
3198: NOT
3199: IFFALSE 3013
// repeat wait ( 3 ) ;
3201: LD_INT 3
3203: PPUSH
3204: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 1
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 21
3225: PUSH
3226: LD_INT 1
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PPUSH
3237: CALL_OW 69
3241: PUSH
3242: FOR_IN
3243: IFFALSE 3319
// begin if IsInArea ( i , stevensEscapeArea ) then
3245: LD_VAR 0 1
3249: PPUSH
3250: LD_INT 8
3252: PPUSH
3253: CALL_OW 308
3257: IFFALSE 3270
// begin RemoveUnit ( i ) ;
3259: LD_VAR 0 1
3263: PPUSH
3264: CALL_OW 64
// continue ;
3268: GO 3242
// end ; if IsInUnit ( i ) then
3270: LD_VAR 0 1
3274: PPUSH
3275: CALL_OW 310
3279: IFFALSE 3290
// ComExitBuilding ( i ) ;
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 122
// if not HasTask ( i ) then
3290: LD_VAR 0 1
3294: PPUSH
3295: CALL_OW 314
3299: NOT
3300: IFFALSE 3317
// ComMoveXY ( i , 28 , 55 ) ;
3302: LD_VAR 0 1
3306: PPUSH
3307: LD_INT 28
3309: PPUSH
3310: LD_INT 55
3312: PPUSH
3313: CALL_OW 111
// end ;
3317: GO 3242
3319: POP
3320: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3321: LD_INT 22
3323: PUSH
3324: LD_INT 1
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 21
3333: PUSH
3334: LD_INT 1
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 69
3349: NOT
3350: IFFALSE 3201
// end ; 2 :
3352: GO 3366
3354: LD_INT 2
3356: DOUBLE
3357: EQUAL
3358: IFTRUE 3362
3360: GO 3365
3362: POP
// ; end ;
3363: GO 3366
3365: POP
// end ;
3366: PPOPN 1
3368: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3369: LD_EXP 10
3373: IFFALSE 3730
3375: GO 3377
3377: DISABLE
3378: LD_INT 0
3380: PPUSH
3381: PPUSH
3382: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3383: LD_INT 10
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: CALL_OW 424
// if Difficulty < 2 then
3393: LD_OWVAR 67
3397: PUSH
3398: LD_INT 2
3400: LESS
3401: IFFALSE 3405
// exit ;
3403: GO 3730
// uc_side := 4 ;
3405: LD_ADDR_OWVAR 20
3409: PUSH
3410: LD_INT 4
3412: ST_TO_ADDR
// uc_nation := 1 ;
3413: LD_ADDR_OWVAR 21
3417: PUSH
3418: LD_INT 1
3420: ST_TO_ADDR
// InitHc ;
3421: CALL_OW 19
// tmp := [ ] ;
3425: LD_ADDR_VAR 0 3
3429: PUSH
3430: EMPTY
3431: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3432: LD_INT 0
3434: PPUSH
3435: LD_INT 5
3437: PPUSH
3438: LD_INT 10
3440: PPUSH
3441: CALL_OW 380
// un := CreateHuman ;
3445: LD_ADDR_VAR 0 1
3449: PUSH
3450: CALL_OW 44
3454: ST_TO_ADDR
// tmp := [ un ] ;
3455: LD_ADDR_VAR 0 3
3459: PUSH
3460: LD_VAR 0 1
3464: PUSH
3465: EMPTY
3466: LIST
3467: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3468: LD_VAR 0 1
3472: PPUSH
3473: LD_INT 226
3475: PPUSH
3476: LD_INT 86
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL_OW 48
// ComHold ( un ) ;
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 140
// for i = 1 to 3 do
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: DOUBLE
3501: LD_INT 1
3503: DEC
3504: ST_TO_ADDR
3505: LD_INT 3
3507: PUSH
3508: FOR_TO
3509: IFFALSE 3608
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3511: LD_INT 0
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: LD_INT 8
3519: PPUSH
3520: CALL_OW 380
// un := CreateHuman ;
3524: LD_ADDR_VAR 0 1
3528: PUSH
3529: CALL_OW 44
3533: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3534: LD_VAR 0 1
3538: PPUSH
3539: LD_INT 5
3541: PPUSH
3542: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_INT 215
3553: PUSH
3554: LD_INT 217
3556: PUSH
3557: LD_INT 219
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: LD_VAR 0 2
3569: ARRAY
3570: PPUSH
3571: LD_INT 76
3573: PPUSH
3574: LD_INT 0
3576: PPUSH
3577: CALL_OW 48
// ComCrawl ( un ) ;
3581: LD_VAR 0 1
3585: PPUSH
3586: CALL_OW 137
// tmp := tmp ^ un ;
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: LD_VAR 0 3
3599: PUSH
3600: LD_VAR 0 1
3604: ADD
3605: ST_TO_ADDR
// end ;
3606: GO 3508
3608: POP
3609: POP
// repeat wait ( 0 0$1 ) ;
3610: LD_INT 35
3612: PPUSH
3613: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3617: LD_VAR 0 3
3621: PPUSH
3622: LD_INT 24
3624: PUSH
3625: LD_INT 1000
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: PPUSH
3632: CALL_OW 72
3636: NOT
3637: IFFALSE 3610
// for i in tmp do
3639: LD_ADDR_VAR 0 2
3643: PUSH
3644: LD_VAR 0 3
3648: PUSH
3649: FOR_IN
3650: IFFALSE 3728
// begin wait ( 0 0$1 ) ;
3652: LD_INT 35
3654: PPUSH
3655: CALL_OW 67
// if Crawls ( i ) then
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 318
3668: IFFALSE 3681
// ComWalk ( i ) else
3670: LD_VAR 0 2
3674: PPUSH
3675: CALL_OW 138
3679: GO 3726
// if GetClass ( i ) = class_sniper then
3681: LD_VAR 0 2
3685: PPUSH
3686: CALL_OW 257
3690: PUSH
3691: LD_INT 5
3693: EQUAL
3694: IFFALSE 3712
// ComAttackSoporific ( i , JMM ) else
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_EXP 14
3705: PPUSH
3706: CALL_OW 166
3710: GO 3726
// ComAttackUnit ( i , JMM ) ;
3712: LD_VAR 0 2
3716: PPUSH
3717: LD_EXP 14
3721: PPUSH
3722: CALL_OW 115
// end ;
3726: GO 3649
3728: POP
3729: POP
// end ;
3730: PPOPN 3
3732: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3733: LD_EXP 7
3737: NOT
3738: PUSH
3739: LD_INT 1
3741: PPUSH
3742: CALL_OW 301
3746: AND
3747: IFFALSE 3759
3749: GO 3751
3751: DISABLE
// YouLost ( Lab ) ;
3752: LD_STRING Lab
3754: PPUSH
3755: CALL_OW 104
3759: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3760: LD_INT 10
3762: PPUSH
3763: LD_INT 22
3765: PUSH
3766: LD_INT 7
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PPUSH
3773: CALL_OW 70
3777: PUSH
3778: LD_INT 2
3780: GREATEREQUAL
3781: PUSH
3782: LD_INT 10
3784: PPUSH
3785: LD_INT 2
3787: PUSH
3788: LD_INT 34
3790: PUSH
3791: LD_INT 12
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 34
3800: PUSH
3801: LD_INT 51
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: LIST
3812: PPUSH
3813: CALL_OW 70
3817: AND
3818: PUSH
3819: LD_EXP 10
3823: AND
3824: PUSH
3825: LD_EXP 7
3829: AND
3830: PUSH
3831: LD_EXP 6
3835: AND
3836: IFFALSE 4096
3838: GO 3840
3840: DISABLE
3841: LD_INT 0
3843: PPUSH
3844: PPUSH
// begin m1 := false ;
3845: LD_ADDR_VAR 0 1
3849: PUSH
3850: LD_INT 0
3852: ST_TO_ADDR
// m2 := false ;
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: LD_INT 0
3860: ST_TO_ADDR
// if killCounter = 0 then
3861: LD_EXP 12
3865: PUSH
3866: LD_INT 0
3868: EQUAL
3869: IFFALSE 3878
// SetAchievement ( ACH_PACIFIST ) ;
3871: LD_STRING ACH_PACIFIST
3873: PPUSH
3874: CALL_OW 543
// if tick < 7 7$00 then
3878: LD_OWVAR 1
3882: PUSH
3883: LD_INT 14700
3885: LESS
3886: IFFALSE 3902
// begin wait ( 3 ) ;
3888: LD_INT 3
3890: PPUSH
3891: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3895: LD_STRING ACH_ASPEED_18
3897: PPUSH
3898: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3902: LD_STRING Explosion
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL_OW 101
// if enteredContaminatedArea then
3912: LD_EXP 5
3916: IFFALSE 3938
// begin m1 := true ;
3918: LD_ADDR_VAR 0 1
3922: PUSH
3923: LD_INT 1
3925: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3926: LD_STRING BioHazard
3928: PPUSH
3929: LD_INT 1
3931: PPUSH
3932: CALL_OW 101
// end else
3936: GO 3949
// AddMedal ( BioHazard , - 1 ) ;
3938: LD_STRING BioHazard
3940: PPUSH
3941: LD_INT 1
3943: NEG
3944: PPUSH
3945: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
3949: LD_EXP 11
3953: PUSH
3954: LD_INT 42000
3956: PUSH
3957: LD_INT 31500
3959: PUSH
3960: LD_INT 25200
3962: PUSH
3963: LD_INT 24150
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: PUSH
3972: LD_OWVAR 67
3976: ARRAY
3977: LESSEQUAL
3978: IFFALSE 4000
// begin m2 := true ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
3988: LD_STRING Speed
3990: PPUSH
3991: LD_INT 1
3993: PPUSH
3994: CALL_OW 101
// end else
3998: GO 4011
// AddMedal ( Speed , - 1 ) ;
4000: LD_STRING Speed
4002: PPUSH
4003: LD_INT 1
4005: NEG
4006: PPUSH
4007: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4011: LD_OWVAR 67
4015: PUSH
4016: LD_INT 3
4018: GREATEREQUAL
4019: PUSH
4020: LD_VAR 0 1
4024: AND
4025: PUSH
4026: LD_VAR 0 2
4030: AND
4031: IFFALSE 4043
// SetAchievementEX ( ACH_AMER , 18 ) ;
4033: LD_STRING ACH_AMER
4035: PPUSH
4036: LD_INT 18
4038: PPUSH
4039: CALL_OW 564
// GiveMedals ( Main ) ;
4043: LD_STRING Main
4045: PPUSH
4046: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4050: LD_EXP 14
4054: PUSH
4055: LD_EXP 15
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PPUSH
4064: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4068: LD_EXP 14
4072: PPUSH
4073: LD_STRING 14a_JMM
4075: PPUSH
4076: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4080: LD_EXP 15
4084: PPUSH
4085: LD_STRING 14a_Burlak
4087: PPUSH
4088: CALL_OW 38
// YouWin ;
4092: CALL_OW 103
// end ; end_of_file
4096: PPOPN 2
4098: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4099: LD_INT 0
4101: PPUSH
4102: PPUSH
4103: PPUSH
4104: PPUSH
// uc_side := 1 ;
4105: LD_ADDR_OWVAR 20
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// uc_nation := 1 ;
4113: LD_ADDR_OWVAR 21
4117: PUSH
4118: LD_INT 1
4120: ST_TO_ADDR
// InitHc ;
4121: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 500 ) ;
4125: LD_INT 34
4127: PPUSH
4128: CALL_OW 274
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 500
4138: PPUSH
4139: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4143: LD_INT 34
4145: PPUSH
4146: CALL_OW 274
4150: PPUSH
4151: LD_INT 3
4153: PPUSH
4154: LD_INT 20
4156: PPUSH
4157: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4161: LD_ADDR_EXP 18
4165: PUSH
4166: LD_STRING Stevens
4168: PPUSH
4169: CALL_OW 25
4173: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4174: LD_ADDR_EXP 19
4178: PUSH
4179: LD_STRING Powell
4181: PPUSH
4182: CALL_OW 25
4186: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4187: LD_EXP 18
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: CALL_OW 52
// vehGuard := [ ] ;
4199: LD_ADDR_EXP 23
4203: PUSH
4204: EMPTY
4205: ST_TO_ADDR
// hc_importance := 0 ;
4206: LD_ADDR_OWVAR 32
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4214: LD_INT 4
4216: PPUSH
4217: LD_INT 3
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 8
4225: PPUSH
4226: LD_INT 100
4228: PPUSH
4229: CALL 32377 0 5
// sibBomb := CreateVehicle ;
4233: LD_ADDR_EXP 21
4237: PUSH
4238: CALL_OW 45
4242: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4243: LD_EXP 21
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4255: LD_EXP 21
4259: PPUSH
4260: LD_INT 93
4262: PPUSH
4263: LD_INT 74
4265: PPUSH
4266: LD_INT 0
4268: PPUSH
4269: CALL_OW 48
// guards := [ ] ;
4273: LD_ADDR_EXP 22
4277: PUSH
4278: EMPTY
4279: ST_TO_ADDR
// for i = 1 to 3 do
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: DOUBLE
4286: LD_INT 1
4288: DEC
4289: ST_TO_ADDR
4290: LD_INT 3
4292: PUSH
4293: FOR_TO
4294: IFFALSE 4390
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4296: LD_INT 0
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 8
4304: PUSH
4305: LD_INT 9
4307: PUSH
4308: LD_INT 10
4310: PUSH
4311: LD_INT 10
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: PUSH
4320: LD_OWVAR 67
4324: ARRAY
4325: PPUSH
4326: CALL_OW 380
// un := CreateHuman ;
4330: LD_ADDR_VAR 0 3
4334: PUSH
4335: CALL_OW 44
4339: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4340: LD_VAR 0 3
4344: PPUSH
4345: LD_INT 2
4347: PUSH
4348: LD_INT 3
4350: PUSH
4351: LD_INT 4
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: PUSH
4359: LD_VAR 0 2
4363: ARRAY
4364: PPUSH
4365: LD_INT 0
4367: PPUSH
4368: CALL_OW 49
// guards := guards ^ un ;
4372: LD_ADDR_EXP 22
4376: PUSH
4377: LD_EXP 22
4381: PUSH
4382: LD_VAR 0 3
4386: ADD
4387: ST_TO_ADDR
// end ;
4388: GO 4293
4390: POP
4391: POP
// baseGuards := [ ] ;
4392: LD_ADDR_EXP 20
4396: PUSH
4397: EMPTY
4398: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4399: LD_ADDR_VAR 0 2
4403: PUSH
4404: DOUBLE
4405: LD_INT 1
4407: DEC
4408: ST_TO_ADDR
4409: LD_INT 5
4411: PUSH
4412: LD_INT 6
4414: PUSH
4415: LD_INT 7
4417: PUSH
4418: LD_INT 8
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4584
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 8
4441: PUSH
4442: LD_INT 9
4444: PUSH
4445: LD_INT 10
4447: PUSH
4448: LD_INT 10
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PPUSH
4463: CALL_OW 381
// un := CreateHuman ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: CALL_OW 44
4476: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4477: LD_ADDR_EXP 20
4481: PUSH
4482: LD_EXP 20
4486: PUSH
4487: LD_VAR 0 3
4491: ADD
4492: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4493: LD_ADDR_VAR 0 4
4497: PUSH
4498: LD_INT 22
4500: PUSH
4501: LD_INT 1
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: PUSH
4508: LD_INT 58
4510: PUSH
4511: EMPTY
4512: LIST
4513: PUSH
4514: LD_INT 30
4516: PUSH
4517: LD_INT 32
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 69
4533: ST_TO_ADDR
// if tmp then
4534: LD_VAR 0 4
4538: IFFALSE 4570
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4540: LD_VAR 0 3
4544: PPUSH
4545: LD_VAR 0 4
4549: PUSH
4550: LD_INT 1
4552: PPUSH
4553: LD_VAR 0 4
4557: PPUSH
4558: CALL_OW 12
4562: ARRAY
4563: PPUSH
4564: CALL_OW 52
4568: GO 4582
// PlaceHumanInUnit ( un , us_bar ) ;
4570: LD_VAR 0 3
4574: PPUSH
4575: LD_INT 51
4577: PPUSH
4578: CALL_OW 52
// end ;
4582: GO 4433
4584: POP
4585: POP
// if Difficulty > 1 then
4586: LD_OWVAR 67
4590: PUSH
4591: LD_INT 1
4593: GREATER
4594: IFFALSE 4642
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4596: LD_INT 0
4598: PPUSH
4599: LD_INT 5
4601: PPUSH
4602: LD_INT 9
4604: PUSH
4605: LD_INT 10
4607: PUSH
4608: LD_INT 10
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: PUSH
4616: LD_OWVAR 67
4620: PUSH
4621: LD_INT 1
4623: MINUS
4624: ARRAY
4625: PPUSH
4626: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4630: CALL_OW 44
4634: PPUSH
4635: LD_INT 80
4637: PPUSH
4638: CALL_OW 52
// end ; for i = 1 to 3 do
4642: LD_ADDR_VAR 0 2
4646: PUSH
4647: DOUBLE
4648: LD_INT 1
4650: DEC
4651: ST_TO_ADDR
4652: LD_INT 3
4654: PUSH
4655: FOR_TO
4656: IFFALSE 4682
// begin PrepareMechanic ( false , 9 ) ;
4658: LD_INT 0
4660: PPUSH
4661: LD_INT 9
4663: PPUSH
4664: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4668: CALL_OW 44
4672: PPUSH
4673: LD_INT 43
4675: PPUSH
4676: CALL_OW 52
// end ;
4680: GO 4655
4682: POP
4683: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4684: CALL_OW 44
4688: PPUSH
4689: LD_INT 49
4691: PPUSH
4692: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: DOUBLE
4702: LD_INT 1
4704: DEC
4705: ST_TO_ADDR
4706: LD_INT 1
4708: PUSH
4709: LD_OWVAR 67
4713: PLUS
4714: PUSH
4715: FOR_TO
4716: IFFALSE 4763
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4718: LD_INT 0
4720: PPUSH
4721: LD_INT 8
4723: PUSH
4724: LD_INT 9
4726: PUSH
4727: LD_INT 10
4729: PUSH
4730: LD_INT 10
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: PUSH
4739: LD_OWVAR 67
4743: ARRAY
4744: PPUSH
4745: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4749: CALL_OW 44
4753: PPUSH
4754: LD_INT 5
4756: PPUSH
4757: CALL_OW 52
// end ;
4761: GO 4715
4763: POP
4764: POP
// for i = 1 to 3 do
4765: LD_ADDR_VAR 0 2
4769: PUSH
4770: DOUBLE
4771: LD_INT 1
4773: DEC
4774: ST_TO_ADDR
4775: LD_INT 3
4777: PUSH
4778: FOR_TO
4779: IFFALSE 4805
// begin PrepareScientist ( false , 10 ) ;
4781: LD_INT 0
4783: PPUSH
4784: LD_INT 10
4786: PPUSH
4787: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4791: CALL_OW 44
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: CALL_OW 52
// end ;
4803: GO 4778
4805: POP
4806: POP
// end ;
4807: LD_VAR 0 1
4811: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4812: LD_EXP 22
4816: PUSH
4817: LD_EXP 2
4821: NOT
4822: AND
4823: IFFALSE 5009
4825: GO 4827
4827: DISABLE
4828: LD_INT 0
4830: PPUSH
4831: PPUSH
4832: PPUSH
// begin enable ;
4833: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4834: LD_ADDR_VAR 0 3
4838: PUSH
4839: LD_INT 204
4841: PUSH
4842: LD_INT 30
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 165
4851: PUSH
4852: LD_INT 24
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 195
4861: PUSH
4862: LD_INT 6
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 223
4871: PUSH
4872: LD_INT 54
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: LD_INT 214
4881: PUSH
4882: LD_INT 84
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 206
4891: PUSH
4892: LD_INT 71
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: ST_TO_ADDR
// for i in guards do
4907: LD_ADDR_VAR 0 1
4911: PUSH
4912: LD_EXP 22
4916: PUSH
4917: FOR_IN
4918: IFFALSE 5007
// begin if HasTask ( i ) then
4920: LD_VAR 0 1
4924: PPUSH
4925: CALL_OW 314
4929: IFFALSE 4935
// continue else
4931: GO 4917
4933: GO 5005
// begin j := rand ( 1 , 6 ) ;
4935: LD_ADDR_VAR 0 2
4939: PUSH
4940: LD_INT 1
4942: PPUSH
4943: LD_INT 6
4945: PPUSH
4946: CALL_OW 12
4950: ST_TO_ADDR
// if not See ( 7 , i ) then
4951: LD_INT 7
4953: PPUSH
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 292
4963: NOT
4964: IFFALSE 5005
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
4966: LD_VAR 0 1
4970: PPUSH
4971: LD_VAR 0 3
4975: PUSH
4976: LD_VAR 0 2
4980: ARRAY
4981: PUSH
4982: LD_INT 1
4984: ARRAY
4985: PPUSH
4986: LD_VAR 0 3
4990: PUSH
4991: LD_VAR 0 2
4995: ARRAY
4996: PUSH
4997: LD_INT 2
4999: ARRAY
5000: PPUSH
5001: CALL_OW 114
// end ; end ;
5005: GO 4917
5007: POP
5008: POP
// end ;
5009: PPOPN 3
5011: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5012: LD_EXP 23
5016: PUSH
5017: LD_EXP 7
5021: NOT
5022: AND
5023: IFFALSE 5094
5025: GO 5027
5027: DISABLE
5028: LD_INT 0
5030: PPUSH
// begin enable ;
5031: ENABLE
// for i in vehGuard do
5032: LD_ADDR_VAR 0 1
5036: PUSH
5037: LD_EXP 23
5041: PUSH
5042: FOR_IN
5043: IFFALSE 5092
// if IsOk ( vehGuard ) then
5045: LD_EXP 23
5049: PPUSH
5050: CALL_OW 302
5054: IFFALSE 5090
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5056: LD_VAR 0 1
5060: PPUSH
5061: LD_INT 22
5063: PUSH
5064: LD_INT 7
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PPUSH
5071: CALL_OW 69
5075: PPUSH
5076: LD_VAR 0 1
5080: PPUSH
5081: CALL_OW 74
5085: PPUSH
5086: CALL_OW 115
5090: GO 5042
5092: POP
5093: POP
// end ;
5094: PPOPN 1
5096: END
// every 9 9$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured do
5097: LD_EXP 4
5101: PUSH
5102: LD_INT 43
5104: PPUSH
5105: CALL_OW 302
5109: AND
5110: PUSH
5111: LD_EXP 7
5115: NOT
5116: AND
5117: IFFALSE 5165
5119: GO 5121
5121: DISABLE
// begin enable ;
5122: ENABLE
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5123: LD_INT 43
5125: PPUSH
5126: LD_INT 5
5128: PPUSH
5129: LD_INT 3
5131: PPUSH
5132: LD_INT 2
5134: PPUSH
5135: LD_INT 7
5137: PUSH
5138: LD_INT 7
5140: PUSH
5141: LD_INT 9
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 1
5151: PPUSH
5152: LD_INT 3
5154: PPUSH
5155: CALL_OW 12
5159: ARRAY
5160: PPUSH
5161: CALL_OW 125
// end ;
5165: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5166: LD_INT 22
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 25
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 50
5188: PUSH
5189: EMPTY
5190: LIST
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: LIST
5196: PPUSH
5197: CALL_OW 69
5201: PUSH
5202: LD_EXP 7
5206: NOT
5207: AND
5208: IFFALSE 5437
5210: GO 5212
5212: DISABLE
5213: LD_INT 0
5215: PPUSH
5216: PPUSH
// begin enable ;
5217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5218: LD_ADDR_VAR 0 1
5222: PUSH
5223: LD_INT 22
5225: PUSH
5226: LD_INT 1
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 25
5235: PUSH
5236: LD_INT 5
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PUSH
5243: LD_INT 50
5245: PUSH
5246: EMPTY
5247: LIST
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 69
5258: ST_TO_ADDR
// if not tmp then
5259: LD_VAR 0 1
5263: NOT
5264: IFFALSE 5268
// exit ;
5266: GO 5437
// b := IsInUnit ( tmp [ 1 ] ) ;
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_VAR 0 1
5277: PUSH
5278: LD_INT 1
5280: ARRAY
5281: PPUSH
5282: CALL_OW 310
5286: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5287: LD_VAR 0 2
5291: NOT
5292: PUSH
5293: LD_VAR 0 1
5297: PUSH
5298: LD_INT 1
5300: ARRAY
5301: PPUSH
5302: CALL_OW 314
5306: OR
5307: IFFALSE 5311
// exit ;
5309: GO 5437
// if b = us_bun1 then
5311: LD_VAR 0 2
5315: PUSH
5316: LD_INT 80
5318: EQUAL
5319: IFFALSE 5380
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5321: LD_VAR 0 1
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5334: LD_VAR 0 1
5338: PUSH
5339: LD_INT 1
5341: ARRAY
5342: PPUSH
5343: LD_INT 27
5345: PPUSH
5346: LD_INT 44
5348: PPUSH
5349: CALL_OW 174
// if IsOk ( us_bun2 ) then
5353: LD_INT 55
5355: PPUSH
5356: CALL_OW 302
5360: IFFALSE 5378
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5362: LD_VAR 0 1
5366: PUSH
5367: LD_INT 1
5369: ARRAY
5370: PPUSH
5371: LD_INT 55
5373: PPUSH
5374: CALL_OW 180
// end else
5378: GO 5437
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5380: LD_VAR 0 1
5384: PUSH
5385: LD_INT 1
5387: ARRAY
5388: PPUSH
5389: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: LD_INT 92
5404: PPUSH
5405: LD_INT 51
5407: PPUSH
5408: CALL_OW 174
// if IsOk ( us_bun1 ) then
5412: LD_INT 80
5414: PPUSH
5415: CALL_OW 302
5419: IFFALSE 5437
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5421: LD_VAR 0 1
5425: PUSH
5426: LD_INT 1
5428: ARRAY
5429: PPUSH
5430: LD_INT 80
5432: PPUSH
5433: CALL_OW 180
// end ; end ;
5437: PPOPN 2
5439: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5440: LD_EXP 7
5444: NOT
5445: PUSH
5446: LD_INT 9
5448: PPUSH
5449: LD_INT 22
5451: PUSH
5452: LD_INT 1
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PUSH
5459: LD_INT 21
5461: PUSH
5462: LD_INT 3
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PUSH
5469: LD_INT 3
5471: PUSH
5472: LD_INT 24
5474: PUSH
5475: LD_INT 1000
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: PPUSH
5491: CALL_OW 70
5495: AND
5496: IFFALSE 5907
5498: GO 5500
5500: DISABLE
5501: LD_INT 0
5503: PPUSH
5504: PPUSH
5505: PPUSH
5506: PPUSH
// begin enable ;
5507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: LD_INT 22
5515: PUSH
5516: LD_INT 1
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 25
5525: PUSH
5526: LD_INT 2
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: LD_INT 24
5535: PUSH
5536: LD_INT 1000
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: LIST
5547: PPUSH
5548: CALL_OW 69
5552: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5553: LD_ADDR_VAR 0 3
5557: PUSH
5558: LD_INT 22
5560: PUSH
5561: LD_INT 1
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 25
5570: PUSH
5571: LD_INT 2
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 3
5580: PUSH
5581: LD_INT 24
5583: PUSH
5584: LD_INT 750
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: PPUSH
5600: CALL_OW 69
5604: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5605: LD_ADDR_VAR 0 4
5609: PUSH
5610: LD_INT 9
5612: PPUSH
5613: LD_INT 22
5615: PUSH
5616: LD_INT 1
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 21
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 3
5635: PUSH
5636: LD_INT 24
5638: PUSH
5639: LD_INT 1000
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: LIST
5654: PPUSH
5655: CALL_OW 70
5659: PUSH
5660: LD_INT 1
5662: DIFF
5663: ST_TO_ADDR
// if not tmp and not tmp2 then
5664: LD_VAR 0 2
5668: NOT
5669: PUSH
5670: LD_VAR 0 3
5674: NOT
5675: AND
5676: IFFALSE 5680
// exit ;
5678: GO 5907
// if tmp and b then
5680: LD_VAR 0 2
5684: PUSH
5685: LD_VAR 0 4
5689: AND
5690: IFFALSE 5820
// for i in tmp do
5692: LD_ADDR_VAR 0 1
5696: PUSH
5697: LD_VAR 0 2
5701: PUSH
5702: FOR_IN
5703: IFFALSE 5818
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: PUSH
5715: LD_INT 1
5717: EQUAL
5718: PUSH
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 256
5728: PUSH
5729: LD_INT 1000
5731: LESS
5732: AND
5733: IFFALSE 5739
// continue else
5735: GO 5702
5737: GO 5766
// if GetTag ( i ) = 1 then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 110
5748: PUSH
5749: LD_INT 1
5751: EQUAL
5752: IFFALSE 5766
// SetTag ( i , 0 ) ;
5754: LD_VAR 0 1
5758: PPUSH
5759: LD_INT 0
5761: PPUSH
5762: CALL_OW 109
// if IsInUnit ( i ) then
5766: LD_VAR 0 1
5770: PPUSH
5771: CALL_OW 310
5775: IFFALSE 5786
// ComExitBuilding ( i ) ;
5777: LD_VAR 0 1
5781: PPUSH
5782: CALL_OW 122
// if not HasTask ( i ) then
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 314
5795: NOT
5796: IFFALSE 5816
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_VAR 0 4
5807: PUSH
5808: LD_INT 1
5810: ARRAY
5811: PPUSH
5812: CALL_OW 190
// end ;
5816: GO 5702
5818: POP
5819: POP
// if tmp2 then
5820: LD_VAR 0 3
5824: IFFALSE 5907
// for i in tmp2 do
5826: LD_ADDR_VAR 0 1
5830: PUSH
5831: LD_VAR 0 3
5835: PUSH
5836: FOR_IN
5837: IFFALSE 5905
// begin if not GetTag ( i ) = 1 then
5839: LD_VAR 0 1
5843: PPUSH
5844: CALL_OW 110
5848: PUSH
5849: LD_INT 1
5851: EQUAL
5852: NOT
5853: IFFALSE 5867
// SetTag ( i , 1 ) ;
5855: LD_VAR 0 1
5859: PPUSH
5860: LD_INT 1
5862: PPUSH
5863: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5867: LD_VAR 0 1
5871: PPUSH
5872: LD_INT 88
5874: PPUSH
5875: LD_INT 75
5877: PPUSH
5878: CALL_OW 297
5882: PUSH
5883: LD_INT 6
5885: GREATER
5886: IFFALSE 5903
// ComMoveXY ( i , 88 , 75 ) ;
5888: LD_VAR 0 1
5892: PPUSH
5893: LD_INT 88
5895: PPUSH
5896: LD_INT 75
5898: PPUSH
5899: CALL_OW 111
// end ;
5903: GO 5836
5905: POP
5906: POP
// end ;
5907: PPOPN 4
5909: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5910: LD_EXP 7
5914: NOT
5915: PUSH
5916: LD_EXP 9
5920: AND
5921: PUSH
5922: LD_INT 9
5924: PPUSH
5925: LD_INT 22
5927: PUSH
5928: LD_INT 1
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 21
5937: PUSH
5938: LD_INT 1
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 3
5947: PUSH
5948: LD_INT 24
5950: PUSH
5951: LD_INT 1000
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: PPUSH
5967: CALL_OW 70
5971: AND
5972: IFFALSE 6145
5974: GO 5976
5976: DISABLE
5977: LD_INT 0
5979: PPUSH
5980: PPUSH
5981: PPUSH
// begin enable ;
5982: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
5983: LD_ADDR_VAR 0 2
5987: PUSH
5988: LD_INT 22
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 25
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 69
6016: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6017: LD_ADDR_VAR 0 3
6021: PUSH
6022: LD_INT 9
6024: PPUSH
6025: LD_INT 22
6027: PUSH
6028: LD_INT 1
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 21
6037: PUSH
6038: LD_INT 1
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 3
6047: PUSH
6048: LD_INT 24
6050: PUSH
6051: LD_INT 1000
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: PPUSH
6067: CALL_OW 70
6071: ST_TO_ADDR
// if not sci or not tmp then
6072: LD_VAR 0 2
6076: NOT
6077: PUSH
6078: LD_VAR 0 3
6082: NOT
6083: OR
6084: IFFALSE 6088
// exit ;
6086: GO 6145
// for i in sci do
6088: LD_ADDR_VAR 0 1
6092: PUSH
6093: LD_VAR 0 2
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6143
// if IsInUnit ( i ) then
6101: LD_VAR 0 1
6105: PPUSH
6106: CALL_OW 310
6110: IFFALSE 6123
// ComExitBuilding ( i ) else
6112: LD_VAR 0 1
6116: PPUSH
6117: CALL_OW 122
6121: GO 6141
// ComHeal ( i , tmp [ 1 ] ) ;
6123: LD_VAR 0 1
6127: PPUSH
6128: LD_VAR 0 3
6132: PUSH
6133: LD_INT 1
6135: ARRAY
6136: PPUSH
6137: CALL_OW 128
6141: GO 6098
6143: POP
6144: POP
// end ;
6145: PPOPN 3
6147: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6148: LD_EXP 7
6152: NOT
6153: PUSH
6154: LD_EXP 9
6158: AND
6159: PUSH
6160: LD_INT 1
6162: PPUSH
6163: CALL_OW 302
6167: AND
6168: PUSH
6169: LD_INT 9
6171: PPUSH
6172: LD_INT 22
6174: PUSH
6175: LD_INT 1
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 21
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: LD_INT 3
6194: PUSH
6195: LD_INT 24
6197: PUSH
6198: LD_INT 1000
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 70
6218: NOT
6219: AND
6220: PUSH
6221: LD_INT 22
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 25
6233: PUSH
6234: LD_INT 4
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 56
6243: PUSH
6244: EMPTY
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 69
6256: AND
6257: IFFALSE 6350
6259: GO 6261
6261: DISABLE
6262: LD_INT 0
6264: PPUSH
// begin enable ;
6265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6266: LD_ADDR_VAR 0 1
6270: PUSH
6271: LD_INT 22
6273: PUSH
6274: LD_INT 1
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 25
6283: PUSH
6284: LD_INT 4
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 56
6293: PUSH
6294: EMPTY
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: PPUSH
6302: CALL_OW 69
6306: PUSH
6307: FOR_IN
6308: IFFALSE 6348
// if not GetTag ( i ) and not HasTask ( i ) then
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL_OW 110
6319: NOT
6320: PUSH
6321: LD_VAR 0 1
6325: PPUSH
6326: CALL_OW 314
6330: NOT
6331: AND
6332: IFFALSE 6346
// ComEnterUnit ( i , us_lab ) ;
6334: LD_VAR 0 1
6338: PPUSH
6339: LD_INT 1
6341: PPUSH
6342: CALL_OW 120
6346: GO 6307
6348: POP
6349: POP
// end ;
6350: PPOPN 1
6352: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6353: LD_EXP 7
6357: NOT
6358: PUSH
6359: LD_INT 9
6361: PPUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 1
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 3
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: LD_INT 24
6387: PUSH
6388: LD_INT 1000
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 70
6408: NOT
6409: AND
6410: PUSH
6411: LD_INT 22
6413: PUSH
6414: LD_INT 1
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 25
6423: PUSH
6424: LD_INT 2
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 56
6433: PUSH
6434: EMPTY
6435: LIST
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: PPUSH
6442: CALL_OW 69
6446: AND
6447: IFFALSE 6540
6449: GO 6451
6451: DISABLE
6452: LD_INT 0
6454: PPUSH
// begin enable ;
6455: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6456: LD_ADDR_VAR 0 1
6460: PUSH
6461: LD_INT 22
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 56
6483: PUSH
6484: EMPTY
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 69
6496: PUSH
6497: FOR_IN
6498: IFFALSE 6538
// if not HasTask ( i ) and not GetTag ( i ) then
6500: LD_VAR 0 1
6504: PPUSH
6505: CALL_OW 314
6509: NOT
6510: PUSH
6511: LD_VAR 0 1
6515: PPUSH
6516: CALL_OW 110
6520: NOT
6521: AND
6522: IFFALSE 6536
// ComEnterUnit ( i , us_depot ) ;
6524: LD_VAR 0 1
6528: PPUSH
6529: LD_INT 5
6531: PPUSH
6532: CALL_OW 120
6536: GO 6497
6538: POP
6539: POP
// end ;
6540: PPOPN 1
6542: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6543: LD_EXP 9
6547: PUSH
6548: LD_INT 0
6550: LESSEQUAL
6551: PUSH
6552: LD_EXP 18
6556: PPUSH
6557: CALL_OW 301
6561: OR
6562: PUSH
6563: LD_INT 22
6565: PUSH
6566: LD_INT 1
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 25
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PPUSH
6587: CALL_OW 69
6591: AND
6592: IFFALSE 6633
6594: GO 6596
6596: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6597: LD_INT 22
6599: PUSH
6600: LD_INT 1
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 25
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PPUSH
6626: LD_INT 1
6628: PPUSH
6629: CALL_OW 167
6633: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6634: LD_EXP 7
6638: NOT
6639: PUSH
6640: LD_INT 7
6642: PPUSH
6643: LD_INT 22
6645: PUSH
6646: LD_INT 7
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 70
6657: AND
6658: IFFALSE 6749
6660: GO 6662
6662: DISABLE
6663: LD_INT 0
6665: PPUSH
// begin wait ( 0 0$2 ) ;
6666: LD_INT 70
6668: PPUSH
6669: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6673: LD_ADDR_VAR 0 1
6677: PUSH
6678: LD_INT 22
6680: PUSH
6681: LD_INT 1
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: LD_INT 25
6690: PUSH
6691: LD_INT 1
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PPUSH
6702: CALL_OW 69
6706: PUSH
6707: FOR_IN
6708: IFFALSE 6747
// begin if IsInUnit ( i ) then
6710: LD_VAR 0 1
6714: PPUSH
6715: CALL_OW 310
6719: IFFALSE 6730
// ComExitBuilding ( i ) ;
6721: LD_VAR 0 1
6725: PPUSH
6726: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6730: LD_VAR 0 1
6734: PPUSH
6735: LD_INT 92
6737: PPUSH
6738: LD_INT 78
6740: PPUSH
6741: CALL_OW 174
// end ;
6745: GO 6707
6747: POP
6748: POP
// end ; end_of_file
6749: PPOPN 1
6751: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6752: LD_VAR 0 1
6756: PPUSH
6757: LD_VAR 0 2
6761: PPUSH
6762: LD_VAR 0 3
6766: PPUSH
6767: CALL 1579 0 3
6771: PPOPN 3
6773: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6774: LD_EXP 14
6778: PPUSH
6779: CALL_OW 257
6783: PUSH
6784: LD_INT 4
6786: EQUAL
6787: PUSH
6788: LD_EXP 15
6792: PPUSH
6793: CALL_OW 257
6797: PUSH
6798: LD_INT 4
6800: EQUAL
6801: OR
6802: PUSH
6803: LD_INT 22
6805: PUSH
6806: LD_INT 7
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 21
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 69
6831: OR
6832: IFFALSE 6836
// exit ;
6834: GO 6874
// if un = JMM then
6836: LD_VAR 0 1
6840: PUSH
6841: LD_EXP 14
6845: EQUAL
6846: IFFALSE 6855
// YouLost ( JMM ) ;
6848: LD_STRING JMM
6850: PPUSH
6851: CALL_OW 104
// if un = Burlak then
6855: LD_VAR 0 1
6859: PUSH
6860: LD_EXP 15
6864: EQUAL
6865: IFFALSE 6874
// YouLost ( Burlak ) ;
6867: LD_STRING Burlak
6869: PPUSH
6870: CALL_OW 104
// end ;
6874: PPOPN 1
6876: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6877: LD_VAR 0 1
6881: PPUSH
6882: CALL 23049 0 1
// if un = JMM then
6886: LD_VAR 0 1
6890: PUSH
6891: LD_EXP 14
6895: EQUAL
6896: IFFALSE 6905
// YouLost ( JMM ) ;
6898: LD_STRING JMM
6900: PPUSH
6901: CALL_OW 104
// if un = Burlak then
6905: LD_VAR 0 1
6909: PUSH
6910: LD_EXP 15
6914: EQUAL
6915: IFFALSE 6924
// YouLost ( Burlak ) ;
6917: LD_STRING Burlak
6919: PPUSH
6920: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
6924: LD_VAR 0 1
6928: PUSH
6929: LD_INT 21
6931: PUSH
6932: LD_INT 1
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 23
6941: PUSH
6942: LD_INT 1
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: IN
6958: IFFALSE 6974
// killCounter := killCounter + 1 ;
6960: LD_ADDR_EXP 12
6964: PUSH
6965: LD_EXP 12
6969: PUSH
6970: LD_INT 1
6972: PLUS
6973: ST_TO_ADDR
// end ;
6974: PPOPN 1
6976: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6977: LD_VAR 0 2
6981: PUSH
6982: LD_INT 7
6984: EQUAL
6985: PUSH
6986: LD_VAR 0 1
6990: PUSH
6991: LD_INT 2
6993: PUSH
6994: LD_INT 30
6996: PUSH
6997: LD_INT 31
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 30
7006: PUSH
7007: LD_INT 32
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 30
7016: PUSH
7017: LD_INT 33
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: PPUSH
7030: CALL_OW 69
7034: IN
7035: AND
7036: IFFALSE 7052
// bunkerCounter := bunkerCounter + 1 ;
7038: LD_ADDR_EXP 13
7042: PUSH
7043: LD_EXP 13
7047: PUSH
7048: LD_INT 1
7050: PLUS
7051: ST_TO_ADDR
// end ;
7052: PPOPN 3
7054: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7055: LD_VAR 0 1
7059: PPUSH
7060: CALL_OW 255
7064: PUSH
7065: LD_INT 7
7067: EQUAL
7068: IFFALSE 7078
// artifactPickedUp := true ;
7070: LD_ADDR_EXP 6
7074: PUSH
7075: LD_INT 1
7077: ST_TO_ADDR
// end ;
7078: PPOPN 2
7080: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7081: LD_ADDR_EXP 6
7085: PUSH
7086: LD_INT 0
7088: ST_TO_ADDR
7089: PPOPN 2
7091: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7092: LD_VAR 0 1
7096: PPUSH
7097: LD_VAR 0 2
7101: PPUSH
7102: CALL 23171 0 2
// if GetSide ( vehicle ) <> 1 then
7106: LD_VAR 0 1
7110: PPUSH
7111: CALL_OW 255
7115: PUSH
7116: LD_INT 1
7118: NONEQUAL
7119: IFFALSE 7123
// exit ;
7121: GO 7170
// wait ( 0 0$5 ) ;
7123: LD_INT 175
7125: PPUSH
7126: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7130: LD_VAR 0 1
7134: PPUSH
7135: CALL_OW 263
7139: PUSH
7140: LD_INT 2
7142: EQUAL
7143: IFFALSE 7154
// Connect ( vehicle ) ;
7145: LD_VAR 0 1
7149: PPUSH
7150: CALL 35470 0 1
// vehGuard := vehGuard ^ vehicle ;
7154: LD_ADDR_EXP 23
7158: PUSH
7159: LD_EXP 23
7163: PUSH
7164: LD_VAR 0 1
7168: ADD
7169: ST_TO_ADDR
// end ;
7170: PPOPN 2
7172: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7173: LD_VAR 0 1
7177: PUSH
7178: LD_INT 1
7180: EQUAL
7181: PUSH
7182: LD_EXP 7
7186: NOT
7187: AND
7188: IFFALSE 7223
// begin planCaptured := true ;
7190: LD_ADDR_EXP 7
7194: PUSH
7195: LD_INT 1
7197: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7198: LD_STRING MEnd
7200: PPUSH
7201: CALL_OW 337
// canEnd := true ;
7205: LD_ADDR_EXP 10
7209: PUSH
7210: LD_INT 1
7212: ST_TO_ADDR
// missionTime := tick ;
7213: LD_ADDR_EXP 11
7217: PUSH
7218: LD_OWVAR 1
7222: ST_TO_ADDR
// end ; end ;
7223: PPOPN 3
7225: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7226: LD_VAR 0 1
7230: PPUSH
7231: CALL 23155 0 1
// end ; end_of_file
7235: PPOPN 1
7237: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
7238: LD_INT 0
7240: PPUSH
// ar_miner := 81 ;
7241: LD_ADDR_EXP 31
7245: PUSH
7246: LD_INT 81
7248: ST_TO_ADDR
// ar_crane := 88 ;
7249: LD_ADDR_EXP 30
7253: PUSH
7254: LD_INT 88
7256: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7257: LD_ADDR_EXP 25
7261: PUSH
7262: LD_INT 89
7264: ST_TO_ADDR
// us_hack := 99 ;
7265: LD_ADDR_EXP 26
7269: PUSH
7270: LD_INT 99
7272: ST_TO_ADDR
// us_artillery := 97 ;
7273: LD_ADDR_EXP 27
7277: PUSH
7278: LD_INT 97
7280: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7281: LD_ADDR_EXP 28
7285: PUSH
7286: LD_INT 91
7288: ST_TO_ADDR
// ar_mortar := 92 ;
7289: LD_ADDR_EXP 29
7293: PUSH
7294: LD_INT 92
7296: ST_TO_ADDR
// ru_flamethrower := 93 ;
7297: LD_ADDR_EXP 32
7301: PUSH
7302: LD_INT 93
7304: ST_TO_ADDR
// ru_radar := 98 ;
7305: LD_ADDR_EXP 24
7309: PUSH
7310: LD_INT 98
7312: ST_TO_ADDR
// tech_Artillery := 80 ;
7313: LD_ADDR_EXP 33
7317: PUSH
7318: LD_INT 80
7320: ST_TO_ADDR
// tech_RadMat := 81 ;
7321: LD_ADDR_EXP 34
7325: PUSH
7326: LD_INT 81
7328: ST_TO_ADDR
// tech_BasicTools := 82 ;
7329: LD_ADDR_EXP 35
7333: PUSH
7334: LD_INT 82
7336: ST_TO_ADDR
// tech_Cargo := 83 ;
7337: LD_ADDR_EXP 36
7341: PUSH
7342: LD_INT 83
7344: ST_TO_ADDR
// tech_Track := 84 ;
7345: LD_ADDR_EXP 37
7349: PUSH
7350: LD_INT 84
7352: ST_TO_ADDR
// tech_Crane := 85 ;
7353: LD_ADDR_EXP 38
7357: PUSH
7358: LD_INT 85
7360: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7361: LD_ADDR_EXP 39
7365: PUSH
7366: LD_INT 86
7368: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7369: LD_ADDR_EXP 40
7373: PUSH
7374: LD_INT 87
7376: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
7377: LD_ADDR_EXP 41
7381: PUSH
7382: LD_INT 88
7384: ST_TO_ADDR
// end ;
7385: LD_VAR 0 1
7389: RET
// every 1 do
7390: GO 7392
7392: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7393: CALL 7238 0 0
7397: END
// every 0 0$1 do
7398: GO 7400
7400: DISABLE
// begin enable ;
7401: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7402: LD_STRING updateTimer(
7404: PUSH
7405: LD_OWVAR 1
7409: STR
7410: PUSH
7411: LD_STRING );
7413: STR
7414: PPUSH
7415: CALL_OW 559
// end ;
7419: END
// export function SOS_MapStart ( ) ; begin
7420: LD_INT 0
7422: PPUSH
// if streamModeActive then
7423: LD_EXP 42
7427: IFFALSE 7436
// DefineStreamItems ( true ) ;
7429: LD_INT 1
7431: PPUSH
7432: CALL 9090 0 1
// UpdateFactoryWaypoints ( ) ;
7436: CALL 21951 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7440: CALL 22208 0 0
// end ;
7444: LD_VAR 0 1
7448: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7449: LD_INT 0
7451: PPUSH
// if p2 = 100 then
7452: LD_VAR 0 2
7456: PUSH
7457: LD_INT 100
7459: EQUAL
7460: IFFALSE 8463
// begin if not StreamModeActive then
7462: LD_EXP 42
7466: NOT
7467: IFFALSE 7477
// StreamModeActive := true ;
7469: LD_ADDR_EXP 42
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// if p3 = 0 then
7477: LD_VAR 0 3
7481: PUSH
7482: LD_INT 0
7484: EQUAL
7485: IFFALSE 7491
// InitStreamMode ;
7487: CALL 8626 0 0
// if p3 = 1 then
7491: LD_VAR 0 3
7495: PUSH
7496: LD_INT 1
7498: EQUAL
7499: IFFALSE 7509
// sRocket := true ;
7501: LD_ADDR_EXP 47
7505: PUSH
7506: LD_INT 1
7508: ST_TO_ADDR
// if p3 = 2 then
7509: LD_VAR 0 3
7513: PUSH
7514: LD_INT 2
7516: EQUAL
7517: IFFALSE 7527
// sSpeed := true ;
7519: LD_ADDR_EXP 46
7523: PUSH
7524: LD_INT 1
7526: ST_TO_ADDR
// if p3 = 3 then
7527: LD_VAR 0 3
7531: PUSH
7532: LD_INT 3
7534: EQUAL
7535: IFFALSE 7545
// sEngine := true ;
7537: LD_ADDR_EXP 48
7541: PUSH
7542: LD_INT 1
7544: ST_TO_ADDR
// if p3 = 4 then
7545: LD_VAR 0 3
7549: PUSH
7550: LD_INT 4
7552: EQUAL
7553: IFFALSE 7563
// sSpec := true ;
7555: LD_ADDR_EXP 45
7559: PUSH
7560: LD_INT 1
7562: ST_TO_ADDR
// if p3 = 5 then
7563: LD_VAR 0 3
7567: PUSH
7568: LD_INT 5
7570: EQUAL
7571: IFFALSE 7581
// sLevel := true ;
7573: LD_ADDR_EXP 49
7577: PUSH
7578: LD_INT 1
7580: ST_TO_ADDR
// if p3 = 6 then
7581: LD_VAR 0 3
7585: PUSH
7586: LD_INT 6
7588: EQUAL
7589: IFFALSE 7599
// sArmoury := true ;
7591: LD_ADDR_EXP 50
7595: PUSH
7596: LD_INT 1
7598: ST_TO_ADDR
// if p3 = 7 then
7599: LD_VAR 0 3
7603: PUSH
7604: LD_INT 7
7606: EQUAL
7607: IFFALSE 7617
// sRadar := true ;
7609: LD_ADDR_EXP 51
7613: PUSH
7614: LD_INT 1
7616: ST_TO_ADDR
// if p3 = 8 then
7617: LD_VAR 0 3
7621: PUSH
7622: LD_INT 8
7624: EQUAL
7625: IFFALSE 7635
// sBunker := true ;
7627: LD_ADDR_EXP 52
7631: PUSH
7632: LD_INT 1
7634: ST_TO_ADDR
// if p3 = 9 then
7635: LD_VAR 0 3
7639: PUSH
7640: LD_INT 9
7642: EQUAL
7643: IFFALSE 7653
// sHack := true ;
7645: LD_ADDR_EXP 53
7649: PUSH
7650: LD_INT 1
7652: ST_TO_ADDR
// if p3 = 10 then
7653: LD_VAR 0 3
7657: PUSH
7658: LD_INT 10
7660: EQUAL
7661: IFFALSE 7671
// sFire := true ;
7663: LD_ADDR_EXP 54
7667: PUSH
7668: LD_INT 1
7670: ST_TO_ADDR
// if p3 = 11 then
7671: LD_VAR 0 3
7675: PUSH
7676: LD_INT 11
7678: EQUAL
7679: IFFALSE 7689
// sRefresh := true ;
7681: LD_ADDR_EXP 55
7685: PUSH
7686: LD_INT 1
7688: ST_TO_ADDR
// if p3 = 12 then
7689: LD_VAR 0 3
7693: PUSH
7694: LD_INT 12
7696: EQUAL
7697: IFFALSE 7707
// sExp := true ;
7699: LD_ADDR_EXP 56
7703: PUSH
7704: LD_INT 1
7706: ST_TO_ADDR
// if p3 = 13 then
7707: LD_VAR 0 3
7711: PUSH
7712: LD_INT 13
7714: EQUAL
7715: IFFALSE 7725
// sDepot := true ;
7717: LD_ADDR_EXP 57
7721: PUSH
7722: LD_INT 1
7724: ST_TO_ADDR
// if p3 = 14 then
7725: LD_VAR 0 3
7729: PUSH
7730: LD_INT 14
7732: EQUAL
7733: IFFALSE 7743
// sFlag := true ;
7735: LD_ADDR_EXP 58
7739: PUSH
7740: LD_INT 1
7742: ST_TO_ADDR
// if p3 = 15 then
7743: LD_VAR 0 3
7747: PUSH
7748: LD_INT 15
7750: EQUAL
7751: IFFALSE 7761
// sKamikadze := true ;
7753: LD_ADDR_EXP 66
7757: PUSH
7758: LD_INT 1
7760: ST_TO_ADDR
// if p3 = 16 then
7761: LD_VAR 0 3
7765: PUSH
7766: LD_INT 16
7768: EQUAL
7769: IFFALSE 7779
// sTroll := true ;
7771: LD_ADDR_EXP 67
7775: PUSH
7776: LD_INT 1
7778: ST_TO_ADDR
// if p3 = 17 then
7779: LD_VAR 0 3
7783: PUSH
7784: LD_INT 17
7786: EQUAL
7787: IFFALSE 7797
// sSlow := true ;
7789: LD_ADDR_EXP 68
7793: PUSH
7794: LD_INT 1
7796: ST_TO_ADDR
// if p3 = 18 then
7797: LD_VAR 0 3
7801: PUSH
7802: LD_INT 18
7804: EQUAL
7805: IFFALSE 7815
// sLack := true ;
7807: LD_ADDR_EXP 69
7811: PUSH
7812: LD_INT 1
7814: ST_TO_ADDR
// if p3 = 19 then
7815: LD_VAR 0 3
7819: PUSH
7820: LD_INT 19
7822: EQUAL
7823: IFFALSE 7833
// sTank := true ;
7825: LD_ADDR_EXP 71
7829: PUSH
7830: LD_INT 1
7832: ST_TO_ADDR
// if p3 = 20 then
7833: LD_VAR 0 3
7837: PUSH
7838: LD_INT 20
7840: EQUAL
7841: IFFALSE 7851
// sRemote := true ;
7843: LD_ADDR_EXP 72
7847: PUSH
7848: LD_INT 1
7850: ST_TO_ADDR
// if p3 = 21 then
7851: LD_VAR 0 3
7855: PUSH
7856: LD_INT 21
7858: EQUAL
7859: IFFALSE 7869
// sPowell := true ;
7861: LD_ADDR_EXP 73
7865: PUSH
7866: LD_INT 1
7868: ST_TO_ADDR
// if p3 = 22 then
7869: LD_VAR 0 3
7873: PUSH
7874: LD_INT 22
7876: EQUAL
7877: IFFALSE 7887
// sTeleport := true ;
7879: LD_ADDR_EXP 76
7883: PUSH
7884: LD_INT 1
7886: ST_TO_ADDR
// if p3 = 23 then
7887: LD_VAR 0 3
7891: PUSH
7892: LD_INT 23
7894: EQUAL
7895: IFFALSE 7905
// sOilTower := true ;
7897: LD_ADDR_EXP 78
7901: PUSH
7902: LD_INT 1
7904: ST_TO_ADDR
// if p3 = 24 then
7905: LD_VAR 0 3
7909: PUSH
7910: LD_INT 24
7912: EQUAL
7913: IFFALSE 7923
// sShovel := true ;
7915: LD_ADDR_EXP 79
7919: PUSH
7920: LD_INT 1
7922: ST_TO_ADDR
// if p3 = 25 then
7923: LD_VAR 0 3
7927: PUSH
7928: LD_INT 25
7930: EQUAL
7931: IFFALSE 7941
// sSheik := true ;
7933: LD_ADDR_EXP 80
7937: PUSH
7938: LD_INT 1
7940: ST_TO_ADDR
// if p3 = 26 then
7941: LD_VAR 0 3
7945: PUSH
7946: LD_INT 26
7948: EQUAL
7949: IFFALSE 7959
// sEarthquake := true ;
7951: LD_ADDR_EXP 82
7955: PUSH
7956: LD_INT 1
7958: ST_TO_ADDR
// if p3 = 27 then
7959: LD_VAR 0 3
7963: PUSH
7964: LD_INT 27
7966: EQUAL
7967: IFFALSE 7977
// sAI := true ;
7969: LD_ADDR_EXP 83
7973: PUSH
7974: LD_INT 1
7976: ST_TO_ADDR
// if p3 = 28 then
7977: LD_VAR 0 3
7981: PUSH
7982: LD_INT 28
7984: EQUAL
7985: IFFALSE 7995
// sCargo := true ;
7987: LD_ADDR_EXP 86
7991: PUSH
7992: LD_INT 1
7994: ST_TO_ADDR
// if p3 = 29 then
7995: LD_VAR 0 3
7999: PUSH
8000: LD_INT 29
8002: EQUAL
8003: IFFALSE 8013
// sDLaser := true ;
8005: LD_ADDR_EXP 87
8009: PUSH
8010: LD_INT 1
8012: ST_TO_ADDR
// if p3 = 30 then
8013: LD_VAR 0 3
8017: PUSH
8018: LD_INT 30
8020: EQUAL
8021: IFFALSE 8031
// sExchange := true ;
8023: LD_ADDR_EXP 88
8027: PUSH
8028: LD_INT 1
8030: ST_TO_ADDR
// if p3 = 31 then
8031: LD_VAR 0 3
8035: PUSH
8036: LD_INT 31
8038: EQUAL
8039: IFFALSE 8049
// sFac := true ;
8041: LD_ADDR_EXP 89
8045: PUSH
8046: LD_INT 1
8048: ST_TO_ADDR
// if p3 = 32 then
8049: LD_VAR 0 3
8053: PUSH
8054: LD_INT 32
8056: EQUAL
8057: IFFALSE 8067
// sPower := true ;
8059: LD_ADDR_EXP 90
8063: PUSH
8064: LD_INT 1
8066: ST_TO_ADDR
// if p3 = 33 then
8067: LD_VAR 0 3
8071: PUSH
8072: LD_INT 33
8074: EQUAL
8075: IFFALSE 8085
// sRandom := true ;
8077: LD_ADDR_EXP 91
8081: PUSH
8082: LD_INT 1
8084: ST_TO_ADDR
// if p3 = 34 then
8085: LD_VAR 0 3
8089: PUSH
8090: LD_INT 34
8092: EQUAL
8093: IFFALSE 8103
// sShield := true ;
8095: LD_ADDR_EXP 92
8099: PUSH
8100: LD_INT 1
8102: ST_TO_ADDR
// if p3 = 35 then
8103: LD_VAR 0 3
8107: PUSH
8108: LD_INT 35
8110: EQUAL
8111: IFFALSE 8121
// sTime := true ;
8113: LD_ADDR_EXP 93
8117: PUSH
8118: LD_INT 1
8120: ST_TO_ADDR
// if p3 = 36 then
8121: LD_VAR 0 3
8125: PUSH
8126: LD_INT 36
8128: EQUAL
8129: IFFALSE 8139
// sTools := true ;
8131: LD_ADDR_EXP 94
8135: PUSH
8136: LD_INT 1
8138: ST_TO_ADDR
// if p3 = 101 then
8139: LD_VAR 0 3
8143: PUSH
8144: LD_INT 101
8146: EQUAL
8147: IFFALSE 8157
// sSold := true ;
8149: LD_ADDR_EXP 59
8153: PUSH
8154: LD_INT 1
8156: ST_TO_ADDR
// if p3 = 102 then
8157: LD_VAR 0 3
8161: PUSH
8162: LD_INT 102
8164: EQUAL
8165: IFFALSE 8175
// sDiff := true ;
8167: LD_ADDR_EXP 60
8171: PUSH
8172: LD_INT 1
8174: ST_TO_ADDR
// if p3 = 103 then
8175: LD_VAR 0 3
8179: PUSH
8180: LD_INT 103
8182: EQUAL
8183: IFFALSE 8193
// sFog := true ;
8185: LD_ADDR_EXP 63
8189: PUSH
8190: LD_INT 1
8192: ST_TO_ADDR
// if p3 = 104 then
8193: LD_VAR 0 3
8197: PUSH
8198: LD_INT 104
8200: EQUAL
8201: IFFALSE 8211
// sReset := true ;
8203: LD_ADDR_EXP 64
8207: PUSH
8208: LD_INT 1
8210: ST_TO_ADDR
// if p3 = 105 then
8211: LD_VAR 0 3
8215: PUSH
8216: LD_INT 105
8218: EQUAL
8219: IFFALSE 8229
// sSun := true ;
8221: LD_ADDR_EXP 65
8225: PUSH
8226: LD_INT 1
8228: ST_TO_ADDR
// if p3 = 106 then
8229: LD_VAR 0 3
8233: PUSH
8234: LD_INT 106
8236: EQUAL
8237: IFFALSE 8247
// sTiger := true ;
8239: LD_ADDR_EXP 61
8243: PUSH
8244: LD_INT 1
8246: ST_TO_ADDR
// if p3 = 107 then
8247: LD_VAR 0 3
8251: PUSH
8252: LD_INT 107
8254: EQUAL
8255: IFFALSE 8265
// sBomb := true ;
8257: LD_ADDR_EXP 62
8261: PUSH
8262: LD_INT 1
8264: ST_TO_ADDR
// if p3 = 108 then
8265: LD_VAR 0 3
8269: PUSH
8270: LD_INT 108
8272: EQUAL
8273: IFFALSE 8283
// sWound := true ;
8275: LD_ADDR_EXP 70
8279: PUSH
8280: LD_INT 1
8282: ST_TO_ADDR
// if p3 = 109 then
8283: LD_VAR 0 3
8287: PUSH
8288: LD_INT 109
8290: EQUAL
8291: IFFALSE 8301
// sBetray := true ;
8293: LD_ADDR_EXP 74
8297: PUSH
8298: LD_INT 1
8300: ST_TO_ADDR
// if p3 = 110 then
8301: LD_VAR 0 3
8305: PUSH
8306: LD_INT 110
8308: EQUAL
8309: IFFALSE 8319
// sContamin := true ;
8311: LD_ADDR_EXP 75
8315: PUSH
8316: LD_INT 1
8318: ST_TO_ADDR
// if p3 = 111 then
8319: LD_VAR 0 3
8323: PUSH
8324: LD_INT 111
8326: EQUAL
8327: IFFALSE 8337
// sOil := true ;
8329: LD_ADDR_EXP 77
8333: PUSH
8334: LD_INT 1
8336: ST_TO_ADDR
// if p3 = 112 then
8337: LD_VAR 0 3
8341: PUSH
8342: LD_INT 112
8344: EQUAL
8345: IFFALSE 8355
// sStu := true ;
8347: LD_ADDR_EXP 81
8351: PUSH
8352: LD_INT 1
8354: ST_TO_ADDR
// if p3 = 113 then
8355: LD_VAR 0 3
8359: PUSH
8360: LD_INT 113
8362: EQUAL
8363: IFFALSE 8373
// sBazooka := true ;
8365: LD_ADDR_EXP 84
8369: PUSH
8370: LD_INT 1
8372: ST_TO_ADDR
// if p3 = 114 then
8373: LD_VAR 0 3
8377: PUSH
8378: LD_INT 114
8380: EQUAL
8381: IFFALSE 8391
// sMortar := true ;
8383: LD_ADDR_EXP 85
8387: PUSH
8388: LD_INT 1
8390: ST_TO_ADDR
// if p3 = 115 then
8391: LD_VAR 0 3
8395: PUSH
8396: LD_INT 115
8398: EQUAL
8399: IFFALSE 8409
// sRanger := true ;
8401: LD_ADDR_EXP 95
8405: PUSH
8406: LD_INT 1
8408: ST_TO_ADDR
// if p3 = 116 then
8409: LD_VAR 0 3
8413: PUSH
8414: LD_INT 116
8416: EQUAL
8417: IFFALSE 8427
// sComputer := true ;
8419: LD_ADDR_EXP 96
8423: PUSH
8424: LD_INT 1
8426: ST_TO_ADDR
// if p3 = 117 then
8427: LD_VAR 0 3
8431: PUSH
8432: LD_INT 117
8434: EQUAL
8435: IFFALSE 8445
// s30 := true ;
8437: LD_ADDR_EXP 97
8441: PUSH
8442: LD_INT 1
8444: ST_TO_ADDR
// if p3 = 118 then
8445: LD_VAR 0 3
8449: PUSH
8450: LD_INT 118
8452: EQUAL
8453: IFFALSE 8463
// s60 := true ;
8455: LD_ADDR_EXP 98
8459: PUSH
8460: LD_INT 1
8462: ST_TO_ADDR
// end ; if p2 = 101 then
8463: LD_VAR 0 2
8467: PUSH
8468: LD_INT 101
8470: EQUAL
8471: IFFALSE 8599
// begin case p3 of 1 :
8473: LD_VAR 0 3
8477: PUSH
8478: LD_INT 1
8480: DOUBLE
8481: EQUAL
8482: IFTRUE 8486
8484: GO 8493
8486: POP
// hHackUnlimitedResources ; 2 :
8487: CALL 20697 0 0
8491: GO 8599
8493: LD_INT 2
8495: DOUBLE
8496: EQUAL
8497: IFTRUE 8501
8499: GO 8508
8501: POP
// hHackSetLevel10 ; 3 :
8502: CALL 20830 0 0
8506: GO 8599
8508: LD_INT 3
8510: DOUBLE
8511: EQUAL
8512: IFTRUE 8516
8514: GO 8523
8516: POP
// hHackSetLevel10YourUnits ; 4 :
8517: CALL 20915 0 0
8521: GO 8599
8523: LD_INT 4
8525: DOUBLE
8526: EQUAL
8527: IFTRUE 8531
8529: GO 8538
8531: POP
// hHackInvincible ; 5 :
8532: CALL 21363 0 0
8536: GO 8599
8538: LD_INT 5
8540: DOUBLE
8541: EQUAL
8542: IFTRUE 8546
8544: GO 8553
8546: POP
// hHackInvisible ; 6 :
8547: CALL 21474 0 0
8551: GO 8599
8553: LD_INT 6
8555: DOUBLE
8556: EQUAL
8557: IFTRUE 8561
8559: GO 8568
8561: POP
// hHackChangeYourSide ; 7 :
8562: CALL 21531 0 0
8566: GO 8599
8568: LD_INT 7
8570: DOUBLE
8571: EQUAL
8572: IFTRUE 8576
8574: GO 8583
8576: POP
// hHackChangeUnitSide ; 8 :
8577: CALL 21573 0 0
8581: GO 8599
8583: LD_INT 8
8585: DOUBLE
8586: EQUAL
8587: IFTRUE 8591
8589: GO 8598
8591: POP
// hHackFog ; end ;
8592: CALL 21674 0 0
8596: GO 8599
8598: POP
// end ; end ;
8599: LD_VAR 0 7
8603: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8604: GO 8606
8606: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8607: LD_STRING initStreamRollete();
8609: PPUSH
8610: CALL_OW 559
// InitStreamMode ;
8614: CALL 8626 0 0
// DefineStreamItems ( false ) ;
8618: LD_INT 0
8620: PPUSH
8621: CALL 9090 0 1
// end ;
8625: END
// function InitStreamMode ; begin
8626: LD_INT 0
8628: PPUSH
// streamModeActive := false ;
8629: LD_ADDR_EXP 42
8633: PUSH
8634: LD_INT 0
8636: ST_TO_ADDR
// normalCounter := 36 ;
8637: LD_ADDR_EXP 43
8641: PUSH
8642: LD_INT 36
8644: ST_TO_ADDR
// hardcoreCounter := 18 ;
8645: LD_ADDR_EXP 44
8649: PUSH
8650: LD_INT 18
8652: ST_TO_ADDR
// sRocket := false ;
8653: LD_ADDR_EXP 47
8657: PUSH
8658: LD_INT 0
8660: ST_TO_ADDR
// sSpeed := false ;
8661: LD_ADDR_EXP 46
8665: PUSH
8666: LD_INT 0
8668: ST_TO_ADDR
// sEngine := false ;
8669: LD_ADDR_EXP 48
8673: PUSH
8674: LD_INT 0
8676: ST_TO_ADDR
// sSpec := false ;
8677: LD_ADDR_EXP 45
8681: PUSH
8682: LD_INT 0
8684: ST_TO_ADDR
// sLevel := false ;
8685: LD_ADDR_EXP 49
8689: PUSH
8690: LD_INT 0
8692: ST_TO_ADDR
// sArmoury := false ;
8693: LD_ADDR_EXP 50
8697: PUSH
8698: LD_INT 0
8700: ST_TO_ADDR
// sRadar := false ;
8701: LD_ADDR_EXP 51
8705: PUSH
8706: LD_INT 0
8708: ST_TO_ADDR
// sBunker := false ;
8709: LD_ADDR_EXP 52
8713: PUSH
8714: LD_INT 0
8716: ST_TO_ADDR
// sHack := false ;
8717: LD_ADDR_EXP 53
8721: PUSH
8722: LD_INT 0
8724: ST_TO_ADDR
// sFire := false ;
8725: LD_ADDR_EXP 54
8729: PUSH
8730: LD_INT 0
8732: ST_TO_ADDR
// sRefresh := false ;
8733: LD_ADDR_EXP 55
8737: PUSH
8738: LD_INT 0
8740: ST_TO_ADDR
// sExp := false ;
8741: LD_ADDR_EXP 56
8745: PUSH
8746: LD_INT 0
8748: ST_TO_ADDR
// sDepot := false ;
8749: LD_ADDR_EXP 57
8753: PUSH
8754: LD_INT 0
8756: ST_TO_ADDR
// sFlag := false ;
8757: LD_ADDR_EXP 58
8761: PUSH
8762: LD_INT 0
8764: ST_TO_ADDR
// sKamikadze := false ;
8765: LD_ADDR_EXP 66
8769: PUSH
8770: LD_INT 0
8772: ST_TO_ADDR
// sTroll := false ;
8773: LD_ADDR_EXP 67
8777: PUSH
8778: LD_INT 0
8780: ST_TO_ADDR
// sSlow := false ;
8781: LD_ADDR_EXP 68
8785: PUSH
8786: LD_INT 0
8788: ST_TO_ADDR
// sLack := false ;
8789: LD_ADDR_EXP 69
8793: PUSH
8794: LD_INT 0
8796: ST_TO_ADDR
// sTank := false ;
8797: LD_ADDR_EXP 71
8801: PUSH
8802: LD_INT 0
8804: ST_TO_ADDR
// sRemote := false ;
8805: LD_ADDR_EXP 72
8809: PUSH
8810: LD_INT 0
8812: ST_TO_ADDR
// sPowell := false ;
8813: LD_ADDR_EXP 73
8817: PUSH
8818: LD_INT 0
8820: ST_TO_ADDR
// sTeleport := false ;
8821: LD_ADDR_EXP 76
8825: PUSH
8826: LD_INT 0
8828: ST_TO_ADDR
// sOilTower := false ;
8829: LD_ADDR_EXP 78
8833: PUSH
8834: LD_INT 0
8836: ST_TO_ADDR
// sShovel := false ;
8837: LD_ADDR_EXP 79
8841: PUSH
8842: LD_INT 0
8844: ST_TO_ADDR
// sSheik := false ;
8845: LD_ADDR_EXP 80
8849: PUSH
8850: LD_INT 0
8852: ST_TO_ADDR
// sEarthquake := false ;
8853: LD_ADDR_EXP 82
8857: PUSH
8858: LD_INT 0
8860: ST_TO_ADDR
// sAI := false ;
8861: LD_ADDR_EXP 83
8865: PUSH
8866: LD_INT 0
8868: ST_TO_ADDR
// sCargo := false ;
8869: LD_ADDR_EXP 86
8873: PUSH
8874: LD_INT 0
8876: ST_TO_ADDR
// sDLaser := false ;
8877: LD_ADDR_EXP 87
8881: PUSH
8882: LD_INT 0
8884: ST_TO_ADDR
// sExchange := false ;
8885: LD_ADDR_EXP 88
8889: PUSH
8890: LD_INT 0
8892: ST_TO_ADDR
// sFac := false ;
8893: LD_ADDR_EXP 89
8897: PUSH
8898: LD_INT 0
8900: ST_TO_ADDR
// sPower := false ;
8901: LD_ADDR_EXP 90
8905: PUSH
8906: LD_INT 0
8908: ST_TO_ADDR
// sRandom := false ;
8909: LD_ADDR_EXP 91
8913: PUSH
8914: LD_INT 0
8916: ST_TO_ADDR
// sShield := false ;
8917: LD_ADDR_EXP 92
8921: PUSH
8922: LD_INT 0
8924: ST_TO_ADDR
// sTime := false ;
8925: LD_ADDR_EXP 93
8929: PUSH
8930: LD_INT 0
8932: ST_TO_ADDR
// sTools := false ;
8933: LD_ADDR_EXP 94
8937: PUSH
8938: LD_INT 0
8940: ST_TO_ADDR
// sSold := false ;
8941: LD_ADDR_EXP 59
8945: PUSH
8946: LD_INT 0
8948: ST_TO_ADDR
// sDiff := false ;
8949: LD_ADDR_EXP 60
8953: PUSH
8954: LD_INT 0
8956: ST_TO_ADDR
// sFog := false ;
8957: LD_ADDR_EXP 63
8961: PUSH
8962: LD_INT 0
8964: ST_TO_ADDR
// sReset := false ;
8965: LD_ADDR_EXP 64
8969: PUSH
8970: LD_INT 0
8972: ST_TO_ADDR
// sSun := false ;
8973: LD_ADDR_EXP 65
8977: PUSH
8978: LD_INT 0
8980: ST_TO_ADDR
// sTiger := false ;
8981: LD_ADDR_EXP 61
8985: PUSH
8986: LD_INT 0
8988: ST_TO_ADDR
// sBomb := false ;
8989: LD_ADDR_EXP 62
8993: PUSH
8994: LD_INT 0
8996: ST_TO_ADDR
// sWound := false ;
8997: LD_ADDR_EXP 70
9001: PUSH
9002: LD_INT 0
9004: ST_TO_ADDR
// sBetray := false ;
9005: LD_ADDR_EXP 74
9009: PUSH
9010: LD_INT 0
9012: ST_TO_ADDR
// sContamin := false ;
9013: LD_ADDR_EXP 75
9017: PUSH
9018: LD_INT 0
9020: ST_TO_ADDR
// sOil := false ;
9021: LD_ADDR_EXP 77
9025: PUSH
9026: LD_INT 0
9028: ST_TO_ADDR
// sStu := false ;
9029: LD_ADDR_EXP 81
9033: PUSH
9034: LD_INT 0
9036: ST_TO_ADDR
// sBazooka := false ;
9037: LD_ADDR_EXP 84
9041: PUSH
9042: LD_INT 0
9044: ST_TO_ADDR
// sMortar := false ;
9045: LD_ADDR_EXP 85
9049: PUSH
9050: LD_INT 0
9052: ST_TO_ADDR
// sRanger := false ;
9053: LD_ADDR_EXP 95
9057: PUSH
9058: LD_INT 0
9060: ST_TO_ADDR
// sComputer := false ;
9061: LD_ADDR_EXP 96
9065: PUSH
9066: LD_INT 0
9068: ST_TO_ADDR
// s30 := false ;
9069: LD_ADDR_EXP 97
9073: PUSH
9074: LD_INT 0
9076: ST_TO_ADDR
// s60 := false ;
9077: LD_ADDR_EXP 98
9081: PUSH
9082: LD_INT 0
9084: ST_TO_ADDR
// end ;
9085: LD_VAR 0 1
9089: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9090: LD_INT 0
9092: PPUSH
9093: PPUSH
9094: PPUSH
9095: PPUSH
9096: PPUSH
9097: PPUSH
9098: PPUSH
// result := [ ] ;
9099: LD_ADDR_VAR 0 2
9103: PUSH
9104: EMPTY
9105: ST_TO_ADDR
// if campaign_id = 1 then
9106: LD_OWVAR 69
9110: PUSH
9111: LD_INT 1
9113: EQUAL
9114: IFFALSE 12280
// begin case mission_number of 1 :
9116: LD_OWVAR 70
9120: PUSH
9121: LD_INT 1
9123: DOUBLE
9124: EQUAL
9125: IFTRUE 9129
9127: GO 9205
9129: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9130: LD_ADDR_VAR 0 2
9134: PUSH
9135: LD_INT 2
9137: PUSH
9138: LD_INT 4
9140: PUSH
9141: LD_INT 11
9143: PUSH
9144: LD_INT 12
9146: PUSH
9147: LD_INT 15
9149: PUSH
9150: LD_INT 16
9152: PUSH
9153: LD_INT 22
9155: PUSH
9156: LD_INT 23
9158: PUSH
9159: LD_INT 26
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: PUSH
9173: LD_INT 101
9175: PUSH
9176: LD_INT 102
9178: PUSH
9179: LD_INT 106
9181: PUSH
9182: LD_INT 116
9184: PUSH
9185: LD_INT 117
9187: PUSH
9188: LD_INT 118
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: ST_TO_ADDR
9203: GO 12278
9205: LD_INT 2
9207: DOUBLE
9208: EQUAL
9209: IFTRUE 9213
9211: GO 9297
9213: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9214: LD_ADDR_VAR 0 2
9218: PUSH
9219: LD_INT 2
9221: PUSH
9222: LD_INT 4
9224: PUSH
9225: LD_INT 11
9227: PUSH
9228: LD_INT 12
9230: PUSH
9231: LD_INT 15
9233: PUSH
9234: LD_INT 16
9236: PUSH
9237: LD_INT 22
9239: PUSH
9240: LD_INT 23
9242: PUSH
9243: LD_INT 26
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 101
9259: PUSH
9260: LD_INT 102
9262: PUSH
9263: LD_INT 105
9265: PUSH
9266: LD_INT 106
9268: PUSH
9269: LD_INT 108
9271: PUSH
9272: LD_INT 116
9274: PUSH
9275: LD_INT 117
9277: PUSH
9278: LD_INT 118
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: ST_TO_ADDR
9295: GO 12278
9297: LD_INT 3
9299: DOUBLE
9300: EQUAL
9301: IFTRUE 9305
9303: GO 9393
9305: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9306: LD_ADDR_VAR 0 2
9310: PUSH
9311: LD_INT 2
9313: PUSH
9314: LD_INT 4
9316: PUSH
9317: LD_INT 5
9319: PUSH
9320: LD_INT 11
9322: PUSH
9323: LD_INT 12
9325: PUSH
9326: LD_INT 15
9328: PUSH
9329: LD_INT 16
9331: PUSH
9332: LD_INT 22
9334: PUSH
9335: LD_INT 26
9337: PUSH
9338: LD_INT 36
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: PUSH
9353: LD_INT 101
9355: PUSH
9356: LD_INT 102
9358: PUSH
9359: LD_INT 105
9361: PUSH
9362: LD_INT 106
9364: PUSH
9365: LD_INT 108
9367: PUSH
9368: LD_INT 116
9370: PUSH
9371: LD_INT 117
9373: PUSH
9374: LD_INT 118
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: ST_TO_ADDR
9391: GO 12278
9393: LD_INT 4
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9497
9401: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9402: LD_ADDR_VAR 0 2
9406: PUSH
9407: LD_INT 2
9409: PUSH
9410: LD_INT 4
9412: PUSH
9413: LD_INT 5
9415: PUSH
9416: LD_INT 8
9418: PUSH
9419: LD_INT 11
9421: PUSH
9422: LD_INT 12
9424: PUSH
9425: LD_INT 15
9427: PUSH
9428: LD_INT 16
9430: PUSH
9431: LD_INT 22
9433: PUSH
9434: LD_INT 23
9436: PUSH
9437: LD_INT 26
9439: PUSH
9440: LD_INT 36
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: PUSH
9457: LD_INT 101
9459: PUSH
9460: LD_INT 102
9462: PUSH
9463: LD_INT 105
9465: PUSH
9466: LD_INT 106
9468: PUSH
9469: LD_INT 108
9471: PUSH
9472: LD_INT 116
9474: PUSH
9475: LD_INT 117
9477: PUSH
9478: LD_INT 118
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: ST_TO_ADDR
9495: GO 12278
9497: LD_INT 5
9499: DOUBLE
9500: EQUAL
9501: IFTRUE 9505
9503: GO 9617
9505: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9506: LD_ADDR_VAR 0 2
9510: PUSH
9511: LD_INT 2
9513: PUSH
9514: LD_INT 4
9516: PUSH
9517: LD_INT 5
9519: PUSH
9520: LD_INT 6
9522: PUSH
9523: LD_INT 8
9525: PUSH
9526: LD_INT 11
9528: PUSH
9529: LD_INT 12
9531: PUSH
9532: LD_INT 15
9534: PUSH
9535: LD_INT 16
9537: PUSH
9538: LD_INT 22
9540: PUSH
9541: LD_INT 23
9543: PUSH
9544: LD_INT 25
9546: PUSH
9547: LD_INT 26
9549: PUSH
9550: LD_INT 36
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: PUSH
9569: LD_INT 101
9571: PUSH
9572: LD_INT 102
9574: PUSH
9575: LD_INT 105
9577: PUSH
9578: LD_INT 106
9580: PUSH
9581: LD_INT 108
9583: PUSH
9584: LD_INT 109
9586: PUSH
9587: LD_INT 112
9589: PUSH
9590: LD_INT 116
9592: PUSH
9593: LD_INT 117
9595: PUSH
9596: LD_INT 118
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: ST_TO_ADDR
9615: GO 12278
9617: LD_INT 6
9619: DOUBLE
9620: EQUAL
9621: IFTRUE 9625
9623: GO 9757
9625: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9626: LD_ADDR_VAR 0 2
9630: PUSH
9631: LD_INT 2
9633: PUSH
9634: LD_INT 4
9636: PUSH
9637: LD_INT 5
9639: PUSH
9640: LD_INT 6
9642: PUSH
9643: LD_INT 8
9645: PUSH
9646: LD_INT 11
9648: PUSH
9649: LD_INT 12
9651: PUSH
9652: LD_INT 15
9654: PUSH
9655: LD_INT 16
9657: PUSH
9658: LD_INT 20
9660: PUSH
9661: LD_INT 21
9663: PUSH
9664: LD_INT 22
9666: PUSH
9667: LD_INT 23
9669: PUSH
9670: LD_INT 25
9672: PUSH
9673: LD_INT 26
9675: PUSH
9676: LD_INT 30
9678: PUSH
9679: LD_INT 31
9681: PUSH
9682: LD_INT 32
9684: PUSH
9685: LD_INT 36
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: PUSH
9709: LD_INT 101
9711: PUSH
9712: LD_INT 102
9714: PUSH
9715: LD_INT 105
9717: PUSH
9718: LD_INT 106
9720: PUSH
9721: LD_INT 108
9723: PUSH
9724: LD_INT 109
9726: PUSH
9727: LD_INT 112
9729: PUSH
9730: LD_INT 116
9732: PUSH
9733: LD_INT 117
9735: PUSH
9736: LD_INT 118
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: ST_TO_ADDR
9755: GO 12278
9757: LD_INT 7
9759: DOUBLE
9760: EQUAL
9761: IFTRUE 9765
9763: GO 9877
9765: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9766: LD_ADDR_VAR 0 2
9770: PUSH
9771: LD_INT 2
9773: PUSH
9774: LD_INT 4
9776: PUSH
9777: LD_INT 5
9779: PUSH
9780: LD_INT 7
9782: PUSH
9783: LD_INT 11
9785: PUSH
9786: LD_INT 12
9788: PUSH
9789: LD_INT 15
9791: PUSH
9792: LD_INT 16
9794: PUSH
9795: LD_INT 20
9797: PUSH
9798: LD_INT 21
9800: PUSH
9801: LD_INT 22
9803: PUSH
9804: LD_INT 23
9806: PUSH
9807: LD_INT 25
9809: PUSH
9810: LD_INT 26
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: PUSH
9829: LD_INT 101
9831: PUSH
9832: LD_INT 102
9834: PUSH
9835: LD_INT 103
9837: PUSH
9838: LD_INT 105
9840: PUSH
9841: LD_INT 106
9843: PUSH
9844: LD_INT 108
9846: PUSH
9847: LD_INT 112
9849: PUSH
9850: LD_INT 116
9852: PUSH
9853: LD_INT 117
9855: PUSH
9856: LD_INT 118
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: ST_TO_ADDR
9875: GO 12278
9877: LD_INT 8
9879: DOUBLE
9880: EQUAL
9881: IFTRUE 9885
9883: GO 10025
9885: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9886: LD_ADDR_VAR 0 2
9890: PUSH
9891: LD_INT 2
9893: PUSH
9894: LD_INT 4
9896: PUSH
9897: LD_INT 5
9899: PUSH
9900: LD_INT 6
9902: PUSH
9903: LD_INT 7
9905: PUSH
9906: LD_INT 8
9908: PUSH
9909: LD_INT 11
9911: PUSH
9912: LD_INT 12
9914: PUSH
9915: LD_INT 15
9917: PUSH
9918: LD_INT 16
9920: PUSH
9921: LD_INT 20
9923: PUSH
9924: LD_INT 21
9926: PUSH
9927: LD_INT 22
9929: PUSH
9930: LD_INT 23
9932: PUSH
9933: LD_INT 25
9935: PUSH
9936: LD_INT 26
9938: PUSH
9939: LD_INT 30
9941: PUSH
9942: LD_INT 31
9944: PUSH
9945: LD_INT 32
9947: PUSH
9948: LD_INT 36
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: PUSH
9973: LD_INT 101
9975: PUSH
9976: LD_INT 102
9978: PUSH
9979: LD_INT 103
9981: PUSH
9982: LD_INT 105
9984: PUSH
9985: LD_INT 106
9987: PUSH
9988: LD_INT 108
9990: PUSH
9991: LD_INT 109
9993: PUSH
9994: LD_INT 112
9996: PUSH
9997: LD_INT 116
9999: PUSH
10000: LD_INT 117
10002: PUSH
10003: LD_INT 118
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: ST_TO_ADDR
10023: GO 12278
10025: LD_INT 9
10027: DOUBLE
10028: EQUAL
10029: IFTRUE 10033
10031: GO 10181
10033: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10034: LD_ADDR_VAR 0 2
10038: PUSH
10039: LD_INT 2
10041: PUSH
10042: LD_INT 4
10044: PUSH
10045: LD_INT 5
10047: PUSH
10048: LD_INT 6
10050: PUSH
10051: LD_INT 7
10053: PUSH
10054: LD_INT 8
10056: PUSH
10057: LD_INT 11
10059: PUSH
10060: LD_INT 12
10062: PUSH
10063: LD_INT 15
10065: PUSH
10066: LD_INT 16
10068: PUSH
10069: LD_INT 20
10071: PUSH
10072: LD_INT 21
10074: PUSH
10075: LD_INT 22
10077: PUSH
10078: LD_INT 23
10080: PUSH
10081: LD_INT 25
10083: PUSH
10084: LD_INT 26
10086: PUSH
10087: LD_INT 28
10089: PUSH
10090: LD_INT 30
10092: PUSH
10093: LD_INT 31
10095: PUSH
10096: LD_INT 32
10098: PUSH
10099: LD_INT 36
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: PUSH
10125: LD_INT 101
10127: PUSH
10128: LD_INT 102
10130: PUSH
10131: LD_INT 103
10133: PUSH
10134: LD_INT 105
10136: PUSH
10137: LD_INT 106
10139: PUSH
10140: LD_INT 108
10142: PUSH
10143: LD_INT 109
10145: PUSH
10146: LD_INT 112
10148: PUSH
10149: LD_INT 114
10151: PUSH
10152: LD_INT 116
10154: PUSH
10155: LD_INT 117
10157: PUSH
10158: LD_INT 118
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: ST_TO_ADDR
10179: GO 12278
10181: LD_INT 10
10183: DOUBLE
10184: EQUAL
10185: IFTRUE 10189
10187: GO 10385
10189: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10190: LD_ADDR_VAR 0 2
10194: PUSH
10195: LD_INT 2
10197: PUSH
10198: LD_INT 4
10200: PUSH
10201: LD_INT 5
10203: PUSH
10204: LD_INT 6
10206: PUSH
10207: LD_INT 7
10209: PUSH
10210: LD_INT 8
10212: PUSH
10213: LD_INT 9
10215: PUSH
10216: LD_INT 10
10218: PUSH
10219: LD_INT 11
10221: PUSH
10222: LD_INT 12
10224: PUSH
10225: LD_INT 13
10227: PUSH
10228: LD_INT 14
10230: PUSH
10231: LD_INT 15
10233: PUSH
10234: LD_INT 16
10236: PUSH
10237: LD_INT 17
10239: PUSH
10240: LD_INT 18
10242: PUSH
10243: LD_INT 19
10245: PUSH
10246: LD_INT 20
10248: PUSH
10249: LD_INT 21
10251: PUSH
10252: LD_INT 22
10254: PUSH
10255: LD_INT 23
10257: PUSH
10258: LD_INT 24
10260: PUSH
10261: LD_INT 25
10263: PUSH
10264: LD_INT 26
10266: PUSH
10267: LD_INT 28
10269: PUSH
10270: LD_INT 30
10272: PUSH
10273: LD_INT 31
10275: PUSH
10276: LD_INT 32
10278: PUSH
10279: LD_INT 36
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 101
10315: PUSH
10316: LD_INT 102
10318: PUSH
10319: LD_INT 103
10321: PUSH
10322: LD_INT 104
10324: PUSH
10325: LD_INT 105
10327: PUSH
10328: LD_INT 106
10330: PUSH
10331: LD_INT 107
10333: PUSH
10334: LD_INT 108
10336: PUSH
10337: LD_INT 109
10339: PUSH
10340: LD_INT 110
10342: PUSH
10343: LD_INT 111
10345: PUSH
10346: LD_INT 112
10348: PUSH
10349: LD_INT 114
10351: PUSH
10352: LD_INT 116
10354: PUSH
10355: LD_INT 117
10357: PUSH
10358: LD_INT 118
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: ST_TO_ADDR
10383: GO 12278
10385: LD_INT 11
10387: DOUBLE
10388: EQUAL
10389: IFTRUE 10393
10391: GO 10597
10393: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10394: LD_ADDR_VAR 0 2
10398: PUSH
10399: LD_INT 2
10401: PUSH
10402: LD_INT 3
10404: PUSH
10405: LD_INT 4
10407: PUSH
10408: LD_INT 5
10410: PUSH
10411: LD_INT 6
10413: PUSH
10414: LD_INT 7
10416: PUSH
10417: LD_INT 8
10419: PUSH
10420: LD_INT 9
10422: PUSH
10423: LD_INT 10
10425: PUSH
10426: LD_INT 11
10428: PUSH
10429: LD_INT 12
10431: PUSH
10432: LD_INT 13
10434: PUSH
10435: LD_INT 14
10437: PUSH
10438: LD_INT 15
10440: PUSH
10441: LD_INT 16
10443: PUSH
10444: LD_INT 17
10446: PUSH
10447: LD_INT 18
10449: PUSH
10450: LD_INT 19
10452: PUSH
10453: LD_INT 20
10455: PUSH
10456: LD_INT 21
10458: PUSH
10459: LD_INT 22
10461: PUSH
10462: LD_INT 23
10464: PUSH
10465: LD_INT 24
10467: PUSH
10468: LD_INT 25
10470: PUSH
10471: LD_INT 26
10473: PUSH
10474: LD_INT 28
10476: PUSH
10477: LD_INT 30
10479: PUSH
10480: LD_INT 31
10482: PUSH
10483: LD_INT 32
10485: PUSH
10486: LD_INT 34
10488: PUSH
10489: LD_INT 36
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 101
10527: PUSH
10528: LD_INT 102
10530: PUSH
10531: LD_INT 103
10533: PUSH
10534: LD_INT 104
10536: PUSH
10537: LD_INT 105
10539: PUSH
10540: LD_INT 106
10542: PUSH
10543: LD_INT 107
10545: PUSH
10546: LD_INT 108
10548: PUSH
10549: LD_INT 109
10551: PUSH
10552: LD_INT 110
10554: PUSH
10555: LD_INT 111
10557: PUSH
10558: LD_INT 112
10560: PUSH
10561: LD_INT 114
10563: PUSH
10564: LD_INT 116
10566: PUSH
10567: LD_INT 117
10569: PUSH
10570: LD_INT 118
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: ST_TO_ADDR
10595: GO 12278
10597: LD_INT 12
10599: DOUBLE
10600: EQUAL
10601: IFTRUE 10605
10603: GO 10825
10605: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10606: LD_ADDR_VAR 0 2
10610: PUSH
10611: LD_INT 1
10613: PUSH
10614: LD_INT 2
10616: PUSH
10617: LD_INT 3
10619: PUSH
10620: LD_INT 4
10622: PUSH
10623: LD_INT 5
10625: PUSH
10626: LD_INT 6
10628: PUSH
10629: LD_INT 7
10631: PUSH
10632: LD_INT 8
10634: PUSH
10635: LD_INT 9
10637: PUSH
10638: LD_INT 10
10640: PUSH
10641: LD_INT 11
10643: PUSH
10644: LD_INT 12
10646: PUSH
10647: LD_INT 13
10649: PUSH
10650: LD_INT 14
10652: PUSH
10653: LD_INT 15
10655: PUSH
10656: LD_INT 16
10658: PUSH
10659: LD_INT 17
10661: PUSH
10662: LD_INT 18
10664: PUSH
10665: LD_INT 19
10667: PUSH
10668: LD_INT 20
10670: PUSH
10671: LD_INT 21
10673: PUSH
10674: LD_INT 22
10676: PUSH
10677: LD_INT 23
10679: PUSH
10680: LD_INT 24
10682: PUSH
10683: LD_INT 25
10685: PUSH
10686: LD_INT 26
10688: PUSH
10689: LD_INT 27
10691: PUSH
10692: LD_INT 28
10694: PUSH
10695: LD_INT 30
10697: PUSH
10698: LD_INT 31
10700: PUSH
10701: LD_INT 32
10703: PUSH
10704: LD_INT 33
10706: PUSH
10707: LD_INT 34
10709: PUSH
10710: LD_INT 36
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 101
10751: PUSH
10752: LD_INT 102
10754: PUSH
10755: LD_INT 103
10757: PUSH
10758: LD_INT 104
10760: PUSH
10761: LD_INT 105
10763: PUSH
10764: LD_INT 106
10766: PUSH
10767: LD_INT 107
10769: PUSH
10770: LD_INT 108
10772: PUSH
10773: LD_INT 109
10775: PUSH
10776: LD_INT 110
10778: PUSH
10779: LD_INT 111
10781: PUSH
10782: LD_INT 112
10784: PUSH
10785: LD_INT 113
10787: PUSH
10788: LD_INT 114
10790: PUSH
10791: LD_INT 116
10793: PUSH
10794: LD_INT 117
10796: PUSH
10797: LD_INT 118
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: ST_TO_ADDR
10823: GO 12278
10825: LD_INT 13
10827: DOUBLE
10828: EQUAL
10829: IFTRUE 10833
10831: GO 11041
10833: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10834: LD_ADDR_VAR 0 2
10838: PUSH
10839: LD_INT 1
10841: PUSH
10842: LD_INT 2
10844: PUSH
10845: LD_INT 3
10847: PUSH
10848: LD_INT 4
10850: PUSH
10851: LD_INT 5
10853: PUSH
10854: LD_INT 8
10856: PUSH
10857: LD_INT 9
10859: PUSH
10860: LD_INT 10
10862: PUSH
10863: LD_INT 11
10865: PUSH
10866: LD_INT 12
10868: PUSH
10869: LD_INT 14
10871: PUSH
10872: LD_INT 15
10874: PUSH
10875: LD_INT 16
10877: PUSH
10878: LD_INT 17
10880: PUSH
10881: LD_INT 18
10883: PUSH
10884: LD_INT 19
10886: PUSH
10887: LD_INT 20
10889: PUSH
10890: LD_INT 21
10892: PUSH
10893: LD_INT 22
10895: PUSH
10896: LD_INT 23
10898: PUSH
10899: LD_INT 24
10901: PUSH
10902: LD_INT 25
10904: PUSH
10905: LD_INT 26
10907: PUSH
10908: LD_INT 27
10910: PUSH
10911: LD_INT 28
10913: PUSH
10914: LD_INT 30
10916: PUSH
10917: LD_INT 31
10919: PUSH
10920: LD_INT 32
10922: PUSH
10923: LD_INT 33
10925: PUSH
10926: LD_INT 34
10928: PUSH
10929: LD_INT 36
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: PUSH
10965: LD_INT 101
10967: PUSH
10968: LD_INT 102
10970: PUSH
10971: LD_INT 103
10973: PUSH
10974: LD_INT 104
10976: PUSH
10977: LD_INT 105
10979: PUSH
10980: LD_INT 106
10982: PUSH
10983: LD_INT 107
10985: PUSH
10986: LD_INT 108
10988: PUSH
10989: LD_INT 109
10991: PUSH
10992: LD_INT 110
10994: PUSH
10995: LD_INT 111
10997: PUSH
10998: LD_INT 112
11000: PUSH
11001: LD_INT 113
11003: PUSH
11004: LD_INT 114
11006: PUSH
11007: LD_INT 116
11009: PUSH
11010: LD_INT 117
11012: PUSH
11013: LD_INT 118
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: ST_TO_ADDR
11039: GO 12278
11041: LD_INT 14
11043: DOUBLE
11044: EQUAL
11045: IFTRUE 11049
11047: GO 11273
11049: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11050: LD_ADDR_VAR 0 2
11054: PUSH
11055: LD_INT 1
11057: PUSH
11058: LD_INT 2
11060: PUSH
11061: LD_INT 3
11063: PUSH
11064: LD_INT 4
11066: PUSH
11067: LD_INT 5
11069: PUSH
11070: LD_INT 6
11072: PUSH
11073: LD_INT 7
11075: PUSH
11076: LD_INT 8
11078: PUSH
11079: LD_INT 9
11081: PUSH
11082: LD_INT 10
11084: PUSH
11085: LD_INT 11
11087: PUSH
11088: LD_INT 12
11090: PUSH
11091: LD_INT 13
11093: PUSH
11094: LD_INT 14
11096: PUSH
11097: LD_INT 15
11099: PUSH
11100: LD_INT 16
11102: PUSH
11103: LD_INT 17
11105: PUSH
11106: LD_INT 18
11108: PUSH
11109: LD_INT 19
11111: PUSH
11112: LD_INT 20
11114: PUSH
11115: LD_INT 21
11117: PUSH
11118: LD_INT 22
11120: PUSH
11121: LD_INT 23
11123: PUSH
11124: LD_INT 24
11126: PUSH
11127: LD_INT 25
11129: PUSH
11130: LD_INT 26
11132: PUSH
11133: LD_INT 27
11135: PUSH
11136: LD_INT 28
11138: PUSH
11139: LD_INT 29
11141: PUSH
11142: LD_INT 30
11144: PUSH
11145: LD_INT 31
11147: PUSH
11148: LD_INT 32
11150: PUSH
11151: LD_INT 33
11153: PUSH
11154: LD_INT 34
11156: PUSH
11157: LD_INT 36
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 101
11199: PUSH
11200: LD_INT 102
11202: PUSH
11203: LD_INT 103
11205: PUSH
11206: LD_INT 104
11208: PUSH
11209: LD_INT 105
11211: PUSH
11212: LD_INT 106
11214: PUSH
11215: LD_INT 107
11217: PUSH
11218: LD_INT 108
11220: PUSH
11221: LD_INT 109
11223: PUSH
11224: LD_INT 110
11226: PUSH
11227: LD_INT 111
11229: PUSH
11230: LD_INT 112
11232: PUSH
11233: LD_INT 113
11235: PUSH
11236: LD_INT 114
11238: PUSH
11239: LD_INT 116
11241: PUSH
11242: LD_INT 117
11244: PUSH
11245: LD_INT 118
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: ST_TO_ADDR
11271: GO 12278
11273: LD_INT 15
11275: DOUBLE
11276: EQUAL
11277: IFTRUE 11281
11279: GO 11505
11281: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11282: LD_ADDR_VAR 0 2
11286: PUSH
11287: LD_INT 1
11289: PUSH
11290: LD_INT 2
11292: PUSH
11293: LD_INT 3
11295: PUSH
11296: LD_INT 4
11298: PUSH
11299: LD_INT 5
11301: PUSH
11302: LD_INT 6
11304: PUSH
11305: LD_INT 7
11307: PUSH
11308: LD_INT 8
11310: PUSH
11311: LD_INT 9
11313: PUSH
11314: LD_INT 10
11316: PUSH
11317: LD_INT 11
11319: PUSH
11320: LD_INT 12
11322: PUSH
11323: LD_INT 13
11325: PUSH
11326: LD_INT 14
11328: PUSH
11329: LD_INT 15
11331: PUSH
11332: LD_INT 16
11334: PUSH
11335: LD_INT 17
11337: PUSH
11338: LD_INT 18
11340: PUSH
11341: LD_INT 19
11343: PUSH
11344: LD_INT 20
11346: PUSH
11347: LD_INT 21
11349: PUSH
11350: LD_INT 22
11352: PUSH
11353: LD_INT 23
11355: PUSH
11356: LD_INT 24
11358: PUSH
11359: LD_INT 25
11361: PUSH
11362: LD_INT 26
11364: PUSH
11365: LD_INT 27
11367: PUSH
11368: LD_INT 28
11370: PUSH
11371: LD_INT 29
11373: PUSH
11374: LD_INT 30
11376: PUSH
11377: LD_INT 31
11379: PUSH
11380: LD_INT 32
11382: PUSH
11383: LD_INT 33
11385: PUSH
11386: LD_INT 34
11388: PUSH
11389: LD_INT 36
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 101
11431: PUSH
11432: LD_INT 102
11434: PUSH
11435: LD_INT 103
11437: PUSH
11438: LD_INT 104
11440: PUSH
11441: LD_INT 105
11443: PUSH
11444: LD_INT 106
11446: PUSH
11447: LD_INT 107
11449: PUSH
11450: LD_INT 108
11452: PUSH
11453: LD_INT 109
11455: PUSH
11456: LD_INT 110
11458: PUSH
11459: LD_INT 111
11461: PUSH
11462: LD_INT 112
11464: PUSH
11465: LD_INT 113
11467: PUSH
11468: LD_INT 114
11470: PUSH
11471: LD_INT 116
11473: PUSH
11474: LD_INT 117
11476: PUSH
11477: LD_INT 118
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: ST_TO_ADDR
11503: GO 12278
11505: LD_INT 16
11507: DOUBLE
11508: EQUAL
11509: IFTRUE 11513
11511: GO 11649
11513: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11514: LD_ADDR_VAR 0 2
11518: PUSH
11519: LD_INT 2
11521: PUSH
11522: LD_INT 4
11524: PUSH
11525: LD_INT 5
11527: PUSH
11528: LD_INT 7
11530: PUSH
11531: LD_INT 11
11533: PUSH
11534: LD_INT 12
11536: PUSH
11537: LD_INT 15
11539: PUSH
11540: LD_INT 16
11542: PUSH
11543: LD_INT 20
11545: PUSH
11546: LD_INT 21
11548: PUSH
11549: LD_INT 22
11551: PUSH
11552: LD_INT 23
11554: PUSH
11555: LD_INT 25
11557: PUSH
11558: LD_INT 26
11560: PUSH
11561: LD_INT 30
11563: PUSH
11564: LD_INT 31
11566: PUSH
11567: LD_INT 32
11569: PUSH
11570: LD_INT 33
11572: PUSH
11573: LD_INT 34
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 101
11599: PUSH
11600: LD_INT 102
11602: PUSH
11603: LD_INT 103
11605: PUSH
11606: LD_INT 106
11608: PUSH
11609: LD_INT 108
11611: PUSH
11612: LD_INT 112
11614: PUSH
11615: LD_INT 113
11617: PUSH
11618: LD_INT 114
11620: PUSH
11621: LD_INT 116
11623: PUSH
11624: LD_INT 117
11626: PUSH
11627: LD_INT 118
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: ST_TO_ADDR
11647: GO 12278
11649: LD_INT 17
11651: DOUBLE
11652: EQUAL
11653: IFTRUE 11657
11655: GO 11881
11657: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11658: LD_ADDR_VAR 0 2
11662: PUSH
11663: LD_INT 1
11665: PUSH
11666: LD_INT 2
11668: PUSH
11669: LD_INT 3
11671: PUSH
11672: LD_INT 4
11674: PUSH
11675: LD_INT 5
11677: PUSH
11678: LD_INT 6
11680: PUSH
11681: LD_INT 7
11683: PUSH
11684: LD_INT 8
11686: PUSH
11687: LD_INT 9
11689: PUSH
11690: LD_INT 10
11692: PUSH
11693: LD_INT 11
11695: PUSH
11696: LD_INT 12
11698: PUSH
11699: LD_INT 13
11701: PUSH
11702: LD_INT 14
11704: PUSH
11705: LD_INT 15
11707: PUSH
11708: LD_INT 16
11710: PUSH
11711: LD_INT 17
11713: PUSH
11714: LD_INT 18
11716: PUSH
11717: LD_INT 19
11719: PUSH
11720: LD_INT 20
11722: PUSH
11723: LD_INT 21
11725: PUSH
11726: LD_INT 22
11728: PUSH
11729: LD_INT 23
11731: PUSH
11732: LD_INT 24
11734: PUSH
11735: LD_INT 25
11737: PUSH
11738: LD_INT 26
11740: PUSH
11741: LD_INT 27
11743: PUSH
11744: LD_INT 28
11746: PUSH
11747: LD_INT 29
11749: PUSH
11750: LD_INT 30
11752: PUSH
11753: LD_INT 31
11755: PUSH
11756: LD_INT 32
11758: PUSH
11759: LD_INT 33
11761: PUSH
11762: LD_INT 34
11764: PUSH
11765: LD_INT 36
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: PUSH
11805: LD_INT 101
11807: PUSH
11808: LD_INT 102
11810: PUSH
11811: LD_INT 103
11813: PUSH
11814: LD_INT 104
11816: PUSH
11817: LD_INT 105
11819: PUSH
11820: LD_INT 106
11822: PUSH
11823: LD_INT 107
11825: PUSH
11826: LD_INT 108
11828: PUSH
11829: LD_INT 109
11831: PUSH
11832: LD_INT 110
11834: PUSH
11835: LD_INT 111
11837: PUSH
11838: LD_INT 112
11840: PUSH
11841: LD_INT 113
11843: PUSH
11844: LD_INT 114
11846: PUSH
11847: LD_INT 116
11849: PUSH
11850: LD_INT 117
11852: PUSH
11853: LD_INT 118
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: ST_TO_ADDR
11879: GO 12278
11881: LD_INT 18
11883: DOUBLE
11884: EQUAL
11885: IFTRUE 11889
11887: GO 12037
11889: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11890: LD_ADDR_VAR 0 2
11894: PUSH
11895: LD_INT 2
11897: PUSH
11898: LD_INT 4
11900: PUSH
11901: LD_INT 5
11903: PUSH
11904: LD_INT 7
11906: PUSH
11907: LD_INT 11
11909: PUSH
11910: LD_INT 12
11912: PUSH
11913: LD_INT 15
11915: PUSH
11916: LD_INT 16
11918: PUSH
11919: LD_INT 20
11921: PUSH
11922: LD_INT 21
11924: PUSH
11925: LD_INT 22
11927: PUSH
11928: LD_INT 23
11930: PUSH
11931: LD_INT 25
11933: PUSH
11934: LD_INT 26
11936: PUSH
11937: LD_INT 30
11939: PUSH
11940: LD_INT 31
11942: PUSH
11943: LD_INT 32
11945: PUSH
11946: LD_INT 33
11948: PUSH
11949: LD_INT 34
11951: PUSH
11952: LD_INT 35
11954: PUSH
11955: LD_INT 36
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: PUSH
11981: LD_INT 101
11983: PUSH
11984: LD_INT 102
11986: PUSH
11987: LD_INT 103
11989: PUSH
11990: LD_INT 106
11992: PUSH
11993: LD_INT 108
11995: PUSH
11996: LD_INT 112
11998: PUSH
11999: LD_INT 113
12001: PUSH
12002: LD_INT 114
12004: PUSH
12005: LD_INT 115
12007: PUSH
12008: LD_INT 116
12010: PUSH
12011: LD_INT 117
12013: PUSH
12014: LD_INT 118
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: ST_TO_ADDR
12035: GO 12278
12037: LD_INT 19
12039: DOUBLE
12040: EQUAL
12041: IFTRUE 12045
12043: GO 12277
12045: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12046: LD_ADDR_VAR 0 2
12050: PUSH
12051: LD_INT 1
12053: PUSH
12054: LD_INT 2
12056: PUSH
12057: LD_INT 3
12059: PUSH
12060: LD_INT 4
12062: PUSH
12063: LD_INT 5
12065: PUSH
12066: LD_INT 6
12068: PUSH
12069: LD_INT 7
12071: PUSH
12072: LD_INT 8
12074: PUSH
12075: LD_INT 9
12077: PUSH
12078: LD_INT 10
12080: PUSH
12081: LD_INT 11
12083: PUSH
12084: LD_INT 12
12086: PUSH
12087: LD_INT 13
12089: PUSH
12090: LD_INT 14
12092: PUSH
12093: LD_INT 15
12095: PUSH
12096: LD_INT 16
12098: PUSH
12099: LD_INT 17
12101: PUSH
12102: LD_INT 18
12104: PUSH
12105: LD_INT 19
12107: PUSH
12108: LD_INT 20
12110: PUSH
12111: LD_INT 21
12113: PUSH
12114: LD_INT 22
12116: PUSH
12117: LD_INT 23
12119: PUSH
12120: LD_INT 24
12122: PUSH
12123: LD_INT 25
12125: PUSH
12126: LD_INT 26
12128: PUSH
12129: LD_INT 27
12131: PUSH
12132: LD_INT 28
12134: PUSH
12135: LD_INT 29
12137: PUSH
12138: LD_INT 30
12140: PUSH
12141: LD_INT 31
12143: PUSH
12144: LD_INT 32
12146: PUSH
12147: LD_INT 33
12149: PUSH
12150: LD_INT 34
12152: PUSH
12153: LD_INT 35
12155: PUSH
12156: LD_INT 36
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: PUSH
12197: LD_INT 101
12199: PUSH
12200: LD_INT 102
12202: PUSH
12203: LD_INT 103
12205: PUSH
12206: LD_INT 104
12208: PUSH
12209: LD_INT 105
12211: PUSH
12212: LD_INT 106
12214: PUSH
12215: LD_INT 107
12217: PUSH
12218: LD_INT 108
12220: PUSH
12221: LD_INT 109
12223: PUSH
12224: LD_INT 110
12226: PUSH
12227: LD_INT 111
12229: PUSH
12230: LD_INT 112
12232: PUSH
12233: LD_INT 113
12235: PUSH
12236: LD_INT 114
12238: PUSH
12239: LD_INT 115
12241: PUSH
12242: LD_INT 116
12244: PUSH
12245: LD_INT 117
12247: PUSH
12248: LD_INT 118
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: ST_TO_ADDR
12275: GO 12278
12277: POP
// end else
12278: GO 12509
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12280: LD_ADDR_VAR 0 2
12284: PUSH
12285: LD_INT 1
12287: PUSH
12288: LD_INT 2
12290: PUSH
12291: LD_INT 3
12293: PUSH
12294: LD_INT 4
12296: PUSH
12297: LD_INT 5
12299: PUSH
12300: LD_INT 6
12302: PUSH
12303: LD_INT 7
12305: PUSH
12306: LD_INT 8
12308: PUSH
12309: LD_INT 9
12311: PUSH
12312: LD_INT 10
12314: PUSH
12315: LD_INT 11
12317: PUSH
12318: LD_INT 12
12320: PUSH
12321: LD_INT 13
12323: PUSH
12324: LD_INT 14
12326: PUSH
12327: LD_INT 15
12329: PUSH
12330: LD_INT 16
12332: PUSH
12333: LD_INT 17
12335: PUSH
12336: LD_INT 18
12338: PUSH
12339: LD_INT 19
12341: PUSH
12342: LD_INT 20
12344: PUSH
12345: LD_INT 21
12347: PUSH
12348: LD_INT 22
12350: PUSH
12351: LD_INT 23
12353: PUSH
12354: LD_INT 24
12356: PUSH
12357: LD_INT 25
12359: PUSH
12360: LD_INT 26
12362: PUSH
12363: LD_INT 27
12365: PUSH
12366: LD_INT 28
12368: PUSH
12369: LD_INT 29
12371: PUSH
12372: LD_INT 30
12374: PUSH
12375: LD_INT 31
12377: PUSH
12378: LD_INT 32
12380: PUSH
12381: LD_INT 33
12383: PUSH
12384: LD_INT 34
12386: PUSH
12387: LD_INT 35
12389: PUSH
12390: LD_INT 36
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 101
12433: PUSH
12434: LD_INT 102
12436: PUSH
12437: LD_INT 103
12439: PUSH
12440: LD_INT 104
12442: PUSH
12443: LD_INT 105
12445: PUSH
12446: LD_INT 106
12448: PUSH
12449: LD_INT 107
12451: PUSH
12452: LD_INT 108
12454: PUSH
12455: LD_INT 109
12457: PUSH
12458: LD_INT 110
12460: PUSH
12461: LD_INT 111
12463: PUSH
12464: LD_INT 112
12466: PUSH
12467: LD_INT 113
12469: PUSH
12470: LD_INT 114
12472: PUSH
12473: LD_INT 115
12475: PUSH
12476: LD_INT 116
12478: PUSH
12479: LD_INT 117
12481: PUSH
12482: LD_INT 118
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: ST_TO_ADDR
// if result then
12509: LD_VAR 0 2
12513: IFFALSE 13299
// begin normal :=  ;
12515: LD_ADDR_VAR 0 5
12519: PUSH
12520: LD_STRING 
12522: ST_TO_ADDR
// hardcore :=  ;
12523: LD_ADDR_VAR 0 6
12527: PUSH
12528: LD_STRING 
12530: ST_TO_ADDR
// active :=  ;
12531: LD_ADDR_VAR 0 7
12535: PUSH
12536: LD_STRING 
12538: ST_TO_ADDR
// for i = 1 to normalCounter do
12539: LD_ADDR_VAR 0 8
12543: PUSH
12544: DOUBLE
12545: LD_INT 1
12547: DEC
12548: ST_TO_ADDR
12549: LD_EXP 43
12553: PUSH
12554: FOR_TO
12555: IFFALSE 12656
// begin tmp := 0 ;
12557: LD_ADDR_VAR 0 3
12561: PUSH
12562: LD_STRING 0
12564: ST_TO_ADDR
// if result [ 1 ] then
12565: LD_VAR 0 2
12569: PUSH
12570: LD_INT 1
12572: ARRAY
12573: IFFALSE 12638
// if result [ 1 ] [ 1 ] = i then
12575: LD_VAR 0 2
12579: PUSH
12580: LD_INT 1
12582: ARRAY
12583: PUSH
12584: LD_INT 1
12586: ARRAY
12587: PUSH
12588: LD_VAR 0 8
12592: EQUAL
12593: IFFALSE 12638
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12595: LD_ADDR_VAR 0 2
12599: PUSH
12600: LD_VAR 0 2
12604: PPUSH
12605: LD_INT 1
12607: PPUSH
12608: LD_VAR 0 2
12612: PUSH
12613: LD_INT 1
12615: ARRAY
12616: PPUSH
12617: LD_INT 1
12619: PPUSH
12620: CALL_OW 3
12624: PPUSH
12625: CALL_OW 1
12629: ST_TO_ADDR
// tmp := 1 ;
12630: LD_ADDR_VAR 0 3
12634: PUSH
12635: LD_STRING 1
12637: ST_TO_ADDR
// end ; normal := normal & tmp ;
12638: LD_ADDR_VAR 0 5
12642: PUSH
12643: LD_VAR 0 5
12647: PUSH
12648: LD_VAR 0 3
12652: STR
12653: ST_TO_ADDR
// end ;
12654: GO 12554
12656: POP
12657: POP
// for i = 1 to hardcoreCounter do
12658: LD_ADDR_VAR 0 8
12662: PUSH
12663: DOUBLE
12664: LD_INT 1
12666: DEC
12667: ST_TO_ADDR
12668: LD_EXP 44
12672: PUSH
12673: FOR_TO
12674: IFFALSE 12779
// begin tmp := 0 ;
12676: LD_ADDR_VAR 0 3
12680: PUSH
12681: LD_STRING 0
12683: ST_TO_ADDR
// if result [ 2 ] then
12684: LD_VAR 0 2
12688: PUSH
12689: LD_INT 2
12691: ARRAY
12692: IFFALSE 12761
// if result [ 2 ] [ 1 ] = 100 + i then
12694: LD_VAR 0 2
12698: PUSH
12699: LD_INT 2
12701: ARRAY
12702: PUSH
12703: LD_INT 1
12705: ARRAY
12706: PUSH
12707: LD_INT 100
12709: PUSH
12710: LD_VAR 0 8
12714: PLUS
12715: EQUAL
12716: IFFALSE 12761
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12718: LD_ADDR_VAR 0 2
12722: PUSH
12723: LD_VAR 0 2
12727: PPUSH
12728: LD_INT 2
12730: PPUSH
12731: LD_VAR 0 2
12735: PUSH
12736: LD_INT 2
12738: ARRAY
12739: PPUSH
12740: LD_INT 1
12742: PPUSH
12743: CALL_OW 3
12747: PPUSH
12748: CALL_OW 1
12752: ST_TO_ADDR
// tmp := 1 ;
12753: LD_ADDR_VAR 0 3
12757: PUSH
12758: LD_STRING 1
12760: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12761: LD_ADDR_VAR 0 6
12765: PUSH
12766: LD_VAR 0 6
12770: PUSH
12771: LD_VAR 0 3
12775: STR
12776: ST_TO_ADDR
// end ;
12777: GO 12673
12779: POP
12780: POP
// if isGameLoad then
12781: LD_VAR 0 1
12785: IFFALSE 13260
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12787: LD_ADDR_VAR 0 4
12791: PUSH
12792: LD_EXP 47
12796: PUSH
12797: LD_EXP 46
12801: PUSH
12802: LD_EXP 48
12806: PUSH
12807: LD_EXP 45
12811: PUSH
12812: LD_EXP 49
12816: PUSH
12817: LD_EXP 50
12821: PUSH
12822: LD_EXP 51
12826: PUSH
12827: LD_EXP 52
12831: PUSH
12832: LD_EXP 53
12836: PUSH
12837: LD_EXP 54
12841: PUSH
12842: LD_EXP 55
12846: PUSH
12847: LD_EXP 56
12851: PUSH
12852: LD_EXP 57
12856: PUSH
12857: LD_EXP 58
12861: PUSH
12862: LD_EXP 66
12866: PUSH
12867: LD_EXP 67
12871: PUSH
12872: LD_EXP 68
12876: PUSH
12877: LD_EXP 69
12881: PUSH
12882: LD_EXP 71
12886: PUSH
12887: LD_EXP 72
12891: PUSH
12892: LD_EXP 73
12896: PUSH
12897: LD_EXP 76
12901: PUSH
12902: LD_EXP 78
12906: PUSH
12907: LD_EXP 79
12911: PUSH
12912: LD_EXP 80
12916: PUSH
12917: LD_EXP 82
12921: PUSH
12922: LD_EXP 83
12926: PUSH
12927: LD_EXP 86
12931: PUSH
12932: LD_EXP 87
12936: PUSH
12937: LD_EXP 88
12941: PUSH
12942: LD_EXP 89
12946: PUSH
12947: LD_EXP 90
12951: PUSH
12952: LD_EXP 91
12956: PUSH
12957: LD_EXP 92
12961: PUSH
12962: LD_EXP 93
12966: PUSH
12967: LD_EXP 94
12971: PUSH
12972: LD_EXP 59
12976: PUSH
12977: LD_EXP 60
12981: PUSH
12982: LD_EXP 63
12986: PUSH
12987: LD_EXP 64
12991: PUSH
12992: LD_EXP 65
12996: PUSH
12997: LD_EXP 61
13001: PUSH
13002: LD_EXP 62
13006: PUSH
13007: LD_EXP 70
13011: PUSH
13012: LD_EXP 74
13016: PUSH
13017: LD_EXP 75
13021: PUSH
13022: LD_EXP 77
13026: PUSH
13027: LD_EXP 81
13031: PUSH
13032: LD_EXP 84
13036: PUSH
13037: LD_EXP 85
13041: PUSH
13042: LD_EXP 95
13046: PUSH
13047: LD_EXP 96
13051: PUSH
13052: LD_EXP 97
13056: PUSH
13057: LD_EXP 98
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: ST_TO_ADDR
// tmp :=  ;
13118: LD_ADDR_VAR 0 3
13122: PUSH
13123: LD_STRING 
13125: ST_TO_ADDR
// for i = 1 to normalCounter do
13126: LD_ADDR_VAR 0 8
13130: PUSH
13131: DOUBLE
13132: LD_INT 1
13134: DEC
13135: ST_TO_ADDR
13136: LD_EXP 43
13140: PUSH
13141: FOR_TO
13142: IFFALSE 13178
// begin if flags [ i ] then
13144: LD_VAR 0 4
13148: PUSH
13149: LD_VAR 0 8
13153: ARRAY
13154: IFFALSE 13176
// tmp := tmp & i & ; ;
13156: LD_ADDR_VAR 0 3
13160: PUSH
13161: LD_VAR 0 3
13165: PUSH
13166: LD_VAR 0 8
13170: STR
13171: PUSH
13172: LD_STRING ;
13174: STR
13175: ST_TO_ADDR
// end ;
13176: GO 13141
13178: POP
13179: POP
// for i = 1 to hardcoreCounter do
13180: LD_ADDR_VAR 0 8
13184: PUSH
13185: DOUBLE
13186: LD_INT 1
13188: DEC
13189: ST_TO_ADDR
13190: LD_EXP 44
13194: PUSH
13195: FOR_TO
13196: IFFALSE 13242
// begin if flags [ normalCounter + i ] then
13198: LD_VAR 0 4
13202: PUSH
13203: LD_EXP 43
13207: PUSH
13208: LD_VAR 0 8
13212: PLUS
13213: ARRAY
13214: IFFALSE 13240
// tmp := tmp & ( 100 + i ) & ; ;
13216: LD_ADDR_VAR 0 3
13220: PUSH
13221: LD_VAR 0 3
13225: PUSH
13226: LD_INT 100
13228: PUSH
13229: LD_VAR 0 8
13233: PLUS
13234: STR
13235: PUSH
13236: LD_STRING ;
13238: STR
13239: ST_TO_ADDR
// end ;
13240: GO 13195
13242: POP
13243: POP
// if tmp then
13244: LD_VAR 0 3
13248: IFFALSE 13260
// active := tmp ;
13250: LD_ADDR_VAR 0 7
13254: PUSH
13255: LD_VAR 0 3
13259: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13260: LD_STRING getStreamItemsFromMission("
13262: PUSH
13263: LD_VAR 0 5
13267: STR
13268: PUSH
13269: LD_STRING ","
13271: STR
13272: PUSH
13273: LD_VAR 0 6
13277: STR
13278: PUSH
13279: LD_STRING ","
13281: STR
13282: PUSH
13283: LD_VAR 0 7
13287: STR
13288: PUSH
13289: LD_STRING ")
13291: STR
13292: PPUSH
13293: CALL_OW 559
// end else
13297: GO 13306
// ToLua ( getStreamItemsFromMission("","","") ) ;
13299: LD_STRING getStreamItemsFromMission("","","")
13301: PPUSH
13302: CALL_OW 559
// end ;
13306: LD_VAR 0 2
13310: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13311: LD_EXP 42
13315: PUSH
13316: LD_EXP 47
13320: AND
13321: IFFALSE 13445
13323: GO 13325
13325: DISABLE
13326: LD_INT 0
13328: PPUSH
13329: PPUSH
// begin enable ;
13330: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13331: LD_ADDR_VAR 0 2
13335: PUSH
13336: LD_INT 22
13338: PUSH
13339: LD_OWVAR 2
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 2
13350: PUSH
13351: LD_INT 34
13353: PUSH
13354: LD_INT 7
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 34
13363: PUSH
13364: LD_INT 45
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 34
13373: PUSH
13374: LD_INT 28
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: LD_INT 34
13383: PUSH
13384: LD_INT 47
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PPUSH
13402: CALL_OW 69
13406: ST_TO_ADDR
// if not tmp then
13407: LD_VAR 0 2
13411: NOT
13412: IFFALSE 13416
// exit ;
13414: GO 13445
// for i in tmp do
13416: LD_ADDR_VAR 0 1
13420: PUSH
13421: LD_VAR 0 2
13425: PUSH
13426: FOR_IN
13427: IFFALSE 13443
// begin SetLives ( i , 0 ) ;
13429: LD_VAR 0 1
13433: PPUSH
13434: LD_INT 0
13436: PPUSH
13437: CALL_OW 234
// end ;
13441: GO 13426
13443: POP
13444: POP
// end ;
13445: PPOPN 2
13447: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13448: LD_EXP 42
13452: PUSH
13453: LD_EXP 48
13457: AND
13458: IFFALSE 13542
13460: GO 13462
13462: DISABLE
13463: LD_INT 0
13465: PPUSH
13466: PPUSH
// begin enable ;
13467: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13468: LD_ADDR_VAR 0 2
13472: PUSH
13473: LD_INT 22
13475: PUSH
13476: LD_OWVAR 2
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PUSH
13485: LD_INT 32
13487: PUSH
13488: LD_INT 3
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PPUSH
13499: CALL_OW 69
13503: ST_TO_ADDR
// if not tmp then
13504: LD_VAR 0 2
13508: NOT
13509: IFFALSE 13513
// exit ;
13511: GO 13542
// for i in tmp do
13513: LD_ADDR_VAR 0 1
13517: PUSH
13518: LD_VAR 0 2
13522: PUSH
13523: FOR_IN
13524: IFFALSE 13540
// begin SetLives ( i , 0 ) ;
13526: LD_VAR 0 1
13530: PPUSH
13531: LD_INT 0
13533: PPUSH
13534: CALL_OW 234
// end ;
13538: GO 13523
13540: POP
13541: POP
// end ;
13542: PPOPN 2
13544: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13545: LD_EXP 42
13549: PUSH
13550: LD_EXP 45
13554: AND
13555: IFFALSE 13648
13557: GO 13559
13559: DISABLE
13560: LD_INT 0
13562: PPUSH
// begin enable ;
13563: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13564: LD_ADDR_VAR 0 1
13568: PUSH
13569: LD_INT 22
13571: PUSH
13572: LD_OWVAR 2
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: LD_INT 2
13583: PUSH
13584: LD_INT 25
13586: PUSH
13587: LD_INT 5
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 25
13596: PUSH
13597: LD_INT 9
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 25
13606: PUSH
13607: LD_INT 8
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PPUSH
13624: CALL_OW 69
13628: PUSH
13629: FOR_IN
13630: IFFALSE 13646
// begin SetClass ( i , 1 ) ;
13632: LD_VAR 0 1
13636: PPUSH
13637: LD_INT 1
13639: PPUSH
13640: CALL_OW 336
// end ;
13644: GO 13629
13646: POP
13647: POP
// end ;
13648: PPOPN 1
13650: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13651: LD_EXP 42
13655: PUSH
13656: LD_EXP 46
13660: AND
13661: PUSH
13662: LD_OWVAR 65
13666: PUSH
13667: LD_INT 7
13669: LESS
13670: AND
13671: IFFALSE 13685
13673: GO 13675
13675: DISABLE
// begin enable ;
13676: ENABLE
// game_speed := 7 ;
13677: LD_ADDR_OWVAR 65
13681: PUSH
13682: LD_INT 7
13684: ST_TO_ADDR
// end ;
13685: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13686: LD_EXP 42
13690: PUSH
13691: LD_EXP 49
13695: AND
13696: IFFALSE 13898
13698: GO 13700
13700: DISABLE
13701: LD_INT 0
13703: PPUSH
13704: PPUSH
13705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13706: LD_ADDR_VAR 0 3
13710: PUSH
13711: LD_INT 81
13713: PUSH
13714: LD_OWVAR 2
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 21
13725: PUSH
13726: LD_INT 1
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: PPUSH
13737: CALL_OW 69
13741: ST_TO_ADDR
// if not tmp then
13742: LD_VAR 0 3
13746: NOT
13747: IFFALSE 13751
// exit ;
13749: GO 13898
// if tmp > 5 then
13751: LD_VAR 0 3
13755: PUSH
13756: LD_INT 5
13758: GREATER
13759: IFFALSE 13771
// k := 5 else
13761: LD_ADDR_VAR 0 2
13765: PUSH
13766: LD_INT 5
13768: ST_TO_ADDR
13769: GO 13781
// k := tmp ;
13771: LD_ADDR_VAR 0 2
13775: PUSH
13776: LD_VAR 0 3
13780: ST_TO_ADDR
// for i := 1 to k do
13781: LD_ADDR_VAR 0 1
13785: PUSH
13786: DOUBLE
13787: LD_INT 1
13789: DEC
13790: ST_TO_ADDR
13791: LD_VAR 0 2
13795: PUSH
13796: FOR_TO
13797: IFFALSE 13896
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13799: LD_VAR 0 3
13803: PUSH
13804: LD_VAR 0 1
13808: ARRAY
13809: PPUSH
13810: LD_VAR 0 1
13814: PUSH
13815: LD_INT 4
13817: MOD
13818: PUSH
13819: LD_INT 1
13821: PLUS
13822: PPUSH
13823: CALL_OW 259
13827: PUSH
13828: LD_INT 10
13830: LESS
13831: IFFALSE 13894
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13833: LD_VAR 0 3
13837: PUSH
13838: LD_VAR 0 1
13842: ARRAY
13843: PPUSH
13844: LD_VAR 0 1
13848: PUSH
13849: LD_INT 4
13851: MOD
13852: PUSH
13853: LD_INT 1
13855: PLUS
13856: PPUSH
13857: LD_VAR 0 3
13861: PUSH
13862: LD_VAR 0 1
13866: ARRAY
13867: PPUSH
13868: LD_VAR 0 1
13872: PUSH
13873: LD_INT 4
13875: MOD
13876: PUSH
13877: LD_INT 1
13879: PLUS
13880: PPUSH
13881: CALL_OW 259
13885: PUSH
13886: LD_INT 1
13888: PLUS
13889: PPUSH
13890: CALL_OW 237
13894: GO 13796
13896: POP
13897: POP
// end ;
13898: PPOPN 3
13900: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13901: LD_EXP 42
13905: PUSH
13906: LD_EXP 50
13910: AND
13911: IFFALSE 13931
13913: GO 13915
13915: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13916: LD_INT 4
13918: PPUSH
13919: LD_OWVAR 2
13923: PPUSH
13924: LD_INT 0
13926: PPUSH
13927: CALL_OW 324
13931: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13932: LD_EXP 42
13936: PUSH
13937: LD_EXP 79
13941: AND
13942: IFFALSE 13962
13944: GO 13946
13946: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13947: LD_INT 19
13949: PPUSH
13950: LD_OWVAR 2
13954: PPUSH
13955: LD_INT 0
13957: PPUSH
13958: CALL_OW 324
13962: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13963: LD_EXP 42
13967: PUSH
13968: LD_EXP 51
13972: AND
13973: IFFALSE 14075
13975: GO 13977
13977: DISABLE
13978: LD_INT 0
13980: PPUSH
13981: PPUSH
// begin enable ;
13982: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13983: LD_ADDR_VAR 0 2
13987: PUSH
13988: LD_INT 22
13990: PUSH
13991: LD_OWVAR 2
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 2
14002: PUSH
14003: LD_INT 34
14005: PUSH
14006: LD_INT 11
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PUSH
14013: LD_INT 34
14015: PUSH
14016: LD_INT 30
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: LIST
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PPUSH
14032: CALL_OW 69
14036: ST_TO_ADDR
// if not tmp then
14037: LD_VAR 0 2
14041: NOT
14042: IFFALSE 14046
// exit ;
14044: GO 14075
// for i in tmp do
14046: LD_ADDR_VAR 0 1
14050: PUSH
14051: LD_VAR 0 2
14055: PUSH
14056: FOR_IN
14057: IFFALSE 14073
// begin SetLives ( i , 0 ) ;
14059: LD_VAR 0 1
14063: PPUSH
14064: LD_INT 0
14066: PPUSH
14067: CALL_OW 234
// end ;
14071: GO 14056
14073: POP
14074: POP
// end ;
14075: PPOPN 2
14077: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14078: LD_EXP 42
14082: PUSH
14083: LD_EXP 52
14087: AND
14088: IFFALSE 14108
14090: GO 14092
14092: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14093: LD_INT 32
14095: PPUSH
14096: LD_OWVAR 2
14100: PPUSH
14101: LD_INT 0
14103: PPUSH
14104: CALL_OW 324
14108: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14109: LD_EXP 42
14113: PUSH
14114: LD_EXP 53
14118: AND
14119: IFFALSE 14300
14121: GO 14123
14123: DISABLE
14124: LD_INT 0
14126: PPUSH
14127: PPUSH
14128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14129: LD_ADDR_VAR 0 2
14133: PUSH
14134: LD_INT 22
14136: PUSH
14137: LD_OWVAR 2
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: LD_INT 33
14148: PUSH
14149: LD_INT 3
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PPUSH
14160: CALL_OW 69
14164: ST_TO_ADDR
// if not tmp then
14165: LD_VAR 0 2
14169: NOT
14170: IFFALSE 14174
// exit ;
14172: GO 14300
// side := 0 ;
14174: LD_ADDR_VAR 0 3
14178: PUSH
14179: LD_INT 0
14181: ST_TO_ADDR
// for i := 1 to 8 do
14182: LD_ADDR_VAR 0 1
14186: PUSH
14187: DOUBLE
14188: LD_INT 1
14190: DEC
14191: ST_TO_ADDR
14192: LD_INT 8
14194: PUSH
14195: FOR_TO
14196: IFFALSE 14244
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14198: LD_OWVAR 2
14202: PUSH
14203: LD_VAR 0 1
14207: NONEQUAL
14208: PUSH
14209: LD_OWVAR 2
14213: PPUSH
14214: LD_VAR 0 1
14218: PPUSH
14219: CALL_OW 81
14223: PUSH
14224: LD_INT 2
14226: EQUAL
14227: AND
14228: IFFALSE 14242
// begin side := i ;
14230: LD_ADDR_VAR 0 3
14234: PUSH
14235: LD_VAR 0 1
14239: ST_TO_ADDR
// break ;
14240: GO 14244
// end ;
14242: GO 14195
14244: POP
14245: POP
// if not side then
14246: LD_VAR 0 3
14250: NOT
14251: IFFALSE 14255
// exit ;
14253: GO 14300
// for i := 1 to tmp do
14255: LD_ADDR_VAR 0 1
14259: PUSH
14260: DOUBLE
14261: LD_INT 1
14263: DEC
14264: ST_TO_ADDR
14265: LD_VAR 0 2
14269: PUSH
14270: FOR_TO
14271: IFFALSE 14298
// if Prob ( 60 ) then
14273: LD_INT 60
14275: PPUSH
14276: CALL_OW 13
14280: IFFALSE 14296
// SetSide ( i , side ) ;
14282: LD_VAR 0 1
14286: PPUSH
14287: LD_VAR 0 3
14291: PPUSH
14292: CALL_OW 235
14296: GO 14270
14298: POP
14299: POP
// end ;
14300: PPOPN 3
14302: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14303: LD_EXP 42
14307: PUSH
14308: LD_EXP 55
14312: AND
14313: IFFALSE 14432
14315: GO 14317
14317: DISABLE
14318: LD_INT 0
14320: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14321: LD_ADDR_VAR 0 1
14325: PUSH
14326: LD_INT 22
14328: PUSH
14329: LD_OWVAR 2
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 21
14340: PUSH
14341: LD_INT 1
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 3
14350: PUSH
14351: LD_INT 23
14353: PUSH
14354: LD_INT 0
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: LIST
14369: PPUSH
14370: CALL_OW 69
14374: PUSH
14375: FOR_IN
14376: IFFALSE 14430
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14378: LD_VAR 0 1
14382: PPUSH
14383: CALL_OW 257
14387: PUSH
14388: LD_INT 1
14390: PUSH
14391: LD_INT 2
14393: PUSH
14394: LD_INT 3
14396: PUSH
14397: LD_INT 4
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: IN
14406: IFFALSE 14428
// SetClass ( un , rand ( 1 , 4 ) ) ;
14408: LD_VAR 0 1
14412: PPUSH
14413: LD_INT 1
14415: PPUSH
14416: LD_INT 4
14418: PPUSH
14419: CALL_OW 12
14423: PPUSH
14424: CALL_OW 336
14428: GO 14375
14430: POP
14431: POP
// end ;
14432: PPOPN 1
14434: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14435: LD_EXP 42
14439: PUSH
14440: LD_EXP 54
14444: AND
14445: IFFALSE 14524
14447: GO 14449
14449: DISABLE
14450: LD_INT 0
14452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14453: LD_ADDR_VAR 0 1
14457: PUSH
14458: LD_INT 22
14460: PUSH
14461: LD_OWVAR 2
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: PUSH
14470: LD_INT 21
14472: PUSH
14473: LD_INT 3
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PPUSH
14484: CALL_OW 69
14488: ST_TO_ADDR
// if not tmp then
14489: LD_VAR 0 1
14493: NOT
14494: IFFALSE 14498
// exit ;
14496: GO 14524
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14498: LD_VAR 0 1
14502: PUSH
14503: LD_INT 1
14505: PPUSH
14506: LD_VAR 0 1
14510: PPUSH
14511: CALL_OW 12
14515: ARRAY
14516: PPUSH
14517: LD_INT 100
14519: PPUSH
14520: CALL_OW 234
// end ;
14524: PPOPN 1
14526: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14527: LD_EXP 42
14531: PUSH
14532: LD_EXP 56
14536: AND
14537: IFFALSE 14635
14539: GO 14541
14541: DISABLE
14542: LD_INT 0
14544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14545: LD_ADDR_VAR 0 1
14549: PUSH
14550: LD_INT 22
14552: PUSH
14553: LD_OWVAR 2
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: PUSH
14562: LD_INT 21
14564: PUSH
14565: LD_INT 1
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PPUSH
14576: CALL_OW 69
14580: ST_TO_ADDR
// if not tmp then
14581: LD_VAR 0 1
14585: NOT
14586: IFFALSE 14590
// exit ;
14588: GO 14635
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14590: LD_VAR 0 1
14594: PUSH
14595: LD_INT 1
14597: PPUSH
14598: LD_VAR 0 1
14602: PPUSH
14603: CALL_OW 12
14607: ARRAY
14608: PPUSH
14609: LD_INT 1
14611: PPUSH
14612: LD_INT 4
14614: PPUSH
14615: CALL_OW 12
14619: PPUSH
14620: LD_INT 3000
14622: PPUSH
14623: LD_INT 9000
14625: PPUSH
14626: CALL_OW 12
14630: PPUSH
14631: CALL_OW 492
// end ;
14635: PPOPN 1
14637: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14638: LD_EXP 42
14642: PUSH
14643: LD_EXP 57
14647: AND
14648: IFFALSE 14668
14650: GO 14652
14652: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14653: LD_INT 1
14655: PPUSH
14656: LD_OWVAR 2
14660: PPUSH
14661: LD_INT 0
14663: PPUSH
14664: CALL_OW 324
14668: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14669: LD_EXP 42
14673: PUSH
14674: LD_EXP 58
14678: AND
14679: IFFALSE 14762
14681: GO 14683
14683: DISABLE
14684: LD_INT 0
14686: PPUSH
14687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14688: LD_ADDR_VAR 0 2
14692: PUSH
14693: LD_INT 22
14695: PUSH
14696: LD_OWVAR 2
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PUSH
14705: LD_INT 21
14707: PUSH
14708: LD_INT 3
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PPUSH
14719: CALL_OW 69
14723: ST_TO_ADDR
// if not tmp then
14724: LD_VAR 0 2
14728: NOT
14729: IFFALSE 14733
// exit ;
14731: GO 14762
// for i in tmp do
14733: LD_ADDR_VAR 0 1
14737: PUSH
14738: LD_VAR 0 2
14742: PUSH
14743: FOR_IN
14744: IFFALSE 14760
// SetBLevel ( i , 10 ) ;
14746: LD_VAR 0 1
14750: PPUSH
14751: LD_INT 10
14753: PPUSH
14754: CALL_OW 241
14758: GO 14743
14760: POP
14761: POP
// end ;
14762: PPOPN 2
14764: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14765: LD_EXP 42
14769: PUSH
14770: LD_EXP 59
14774: AND
14775: IFFALSE 14886
14777: GO 14779
14779: DISABLE
14780: LD_INT 0
14782: PPUSH
14783: PPUSH
14784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14785: LD_ADDR_VAR 0 3
14789: PUSH
14790: LD_INT 22
14792: PUSH
14793: LD_OWVAR 2
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: LD_INT 25
14804: PUSH
14805: LD_INT 1
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PPUSH
14816: CALL_OW 69
14820: ST_TO_ADDR
// if not tmp then
14821: LD_VAR 0 3
14825: NOT
14826: IFFALSE 14830
// exit ;
14828: GO 14886
// un := tmp [ rand ( 1 , tmp ) ] ;
14830: LD_ADDR_VAR 0 2
14834: PUSH
14835: LD_VAR 0 3
14839: PUSH
14840: LD_INT 1
14842: PPUSH
14843: LD_VAR 0 3
14847: PPUSH
14848: CALL_OW 12
14852: ARRAY
14853: ST_TO_ADDR
// if Crawls ( un ) then
14854: LD_VAR 0 2
14858: PPUSH
14859: CALL_OW 318
14863: IFFALSE 14874
// ComWalk ( un ) ;
14865: LD_VAR 0 2
14869: PPUSH
14870: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14874: LD_VAR 0 2
14878: PPUSH
14879: LD_INT 5
14881: PPUSH
14882: CALL_OW 336
// end ;
14886: PPOPN 3
14888: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14889: LD_EXP 42
14893: PUSH
14894: LD_EXP 60
14898: AND
14899: PUSH
14900: LD_OWVAR 67
14904: PUSH
14905: LD_INT 4
14907: LESS
14908: AND
14909: IFFALSE 14928
14911: GO 14913
14913: DISABLE
// begin Difficulty := Difficulty + 1 ;
14914: LD_ADDR_OWVAR 67
14918: PUSH
14919: LD_OWVAR 67
14923: PUSH
14924: LD_INT 1
14926: PLUS
14927: ST_TO_ADDR
// end ;
14928: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14929: LD_EXP 42
14933: PUSH
14934: LD_EXP 61
14938: AND
14939: IFFALSE 15042
14941: GO 14943
14943: DISABLE
14944: LD_INT 0
14946: PPUSH
// begin for i := 1 to 5 do
14947: LD_ADDR_VAR 0 1
14951: PUSH
14952: DOUBLE
14953: LD_INT 1
14955: DEC
14956: ST_TO_ADDR
14957: LD_INT 5
14959: PUSH
14960: FOR_TO
14961: IFFALSE 15040
// begin uc_nation := nation_nature ;
14963: LD_ADDR_OWVAR 21
14967: PUSH
14968: LD_INT 0
14970: ST_TO_ADDR
// uc_side := 0 ;
14971: LD_ADDR_OWVAR 20
14975: PUSH
14976: LD_INT 0
14978: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14979: LD_ADDR_OWVAR 29
14983: PUSH
14984: LD_INT 12
14986: PUSH
14987: LD_INT 12
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: ST_TO_ADDR
// hc_agressivity := 20 ;
14994: LD_ADDR_OWVAR 35
14998: PUSH
14999: LD_INT 20
15001: ST_TO_ADDR
// hc_class := class_tiger ;
15002: LD_ADDR_OWVAR 28
15006: PUSH
15007: LD_INT 14
15009: ST_TO_ADDR
// hc_gallery :=  ;
15010: LD_ADDR_OWVAR 33
15014: PUSH
15015: LD_STRING 
15017: ST_TO_ADDR
// hc_name :=  ;
15018: LD_ADDR_OWVAR 26
15022: PUSH
15023: LD_STRING 
15025: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15026: CALL_OW 44
15030: PPUSH
15031: LD_INT 0
15033: PPUSH
15034: CALL_OW 51
// end ;
15038: GO 14960
15040: POP
15041: POP
// end ;
15042: PPOPN 1
15044: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15045: LD_EXP 42
15049: PUSH
15050: LD_EXP 62
15054: AND
15055: IFFALSE 15064
15057: GO 15059
15059: DISABLE
// StreamSibBomb ;
15060: CALL 15065 0 0
15064: END
// export function StreamSibBomb ; var i , x , y ; begin
15065: LD_INT 0
15067: PPUSH
15068: PPUSH
15069: PPUSH
15070: PPUSH
// result := false ;
15071: LD_ADDR_VAR 0 1
15075: PUSH
15076: LD_INT 0
15078: ST_TO_ADDR
// for i := 1 to 16 do
15079: LD_ADDR_VAR 0 2
15083: PUSH
15084: DOUBLE
15085: LD_INT 1
15087: DEC
15088: ST_TO_ADDR
15089: LD_INT 16
15091: PUSH
15092: FOR_TO
15093: IFFALSE 15292
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15095: LD_ADDR_VAR 0 3
15099: PUSH
15100: LD_INT 10
15102: PUSH
15103: LD_INT 20
15105: PUSH
15106: LD_INT 30
15108: PUSH
15109: LD_INT 40
15111: PUSH
15112: LD_INT 50
15114: PUSH
15115: LD_INT 60
15117: PUSH
15118: LD_INT 70
15120: PUSH
15121: LD_INT 80
15123: PUSH
15124: LD_INT 90
15126: PUSH
15127: LD_INT 100
15129: PUSH
15130: LD_INT 110
15132: PUSH
15133: LD_INT 120
15135: PUSH
15136: LD_INT 130
15138: PUSH
15139: LD_INT 140
15141: PUSH
15142: LD_INT 150
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: PUSH
15162: LD_INT 1
15164: PPUSH
15165: LD_INT 15
15167: PPUSH
15168: CALL_OW 12
15172: ARRAY
15173: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15174: LD_ADDR_VAR 0 4
15178: PUSH
15179: LD_INT 10
15181: PUSH
15182: LD_INT 20
15184: PUSH
15185: LD_INT 30
15187: PUSH
15188: LD_INT 40
15190: PUSH
15191: LD_INT 50
15193: PUSH
15194: LD_INT 60
15196: PUSH
15197: LD_INT 70
15199: PUSH
15200: LD_INT 80
15202: PUSH
15203: LD_INT 90
15205: PUSH
15206: LD_INT 100
15208: PUSH
15209: LD_INT 110
15211: PUSH
15212: LD_INT 120
15214: PUSH
15215: LD_INT 130
15217: PUSH
15218: LD_INT 140
15220: PUSH
15221: LD_INT 150
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: PUSH
15241: LD_INT 1
15243: PPUSH
15244: LD_INT 15
15246: PPUSH
15247: CALL_OW 12
15251: ARRAY
15252: ST_TO_ADDR
// if ValidHex ( x , y ) then
15253: LD_VAR 0 3
15257: PPUSH
15258: LD_VAR 0 4
15262: PPUSH
15263: CALL_OW 488
15267: IFFALSE 15290
// begin result := [ x , y ] ;
15269: LD_ADDR_VAR 0 1
15273: PUSH
15274: LD_VAR 0 3
15278: PUSH
15279: LD_VAR 0 4
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: ST_TO_ADDR
// break ;
15288: GO 15292
// end ; end ;
15290: GO 15092
15292: POP
15293: POP
// if result then
15294: LD_VAR 0 1
15298: IFFALSE 15358
// begin ToLua ( playSibBomb() ) ;
15300: LD_STRING playSibBomb()
15302: PPUSH
15303: CALL_OW 559
// wait ( 0 0$14 ) ;
15307: LD_INT 490
15309: PPUSH
15310: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15314: LD_VAR 0 1
15318: PUSH
15319: LD_INT 1
15321: ARRAY
15322: PPUSH
15323: LD_VAR 0 1
15327: PUSH
15328: LD_INT 2
15330: ARRAY
15331: PPUSH
15332: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15336: LD_VAR 0 1
15340: PUSH
15341: LD_INT 1
15343: ARRAY
15344: PPUSH
15345: LD_VAR 0 1
15349: PUSH
15350: LD_INT 2
15352: ARRAY
15353: PPUSH
15354: CALL_OW 429
// end ; end ;
15358: LD_VAR 0 1
15362: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15363: LD_EXP 42
15367: PUSH
15368: LD_EXP 64
15372: AND
15373: IFFALSE 15385
15375: GO 15377
15377: DISABLE
// YouLost (  ) ;
15378: LD_STRING 
15380: PPUSH
15381: CALL_OW 104
15385: END
// every 0 0$1 trigger StreamModeActive and sFog do
15386: LD_EXP 42
15390: PUSH
15391: LD_EXP 63
15395: AND
15396: IFFALSE 15410
15398: GO 15400
15400: DISABLE
// FogOff ( your_side ) ;
15401: LD_OWVAR 2
15405: PPUSH
15406: CALL_OW 344
15410: END
// every 0 0$1 trigger StreamModeActive and sSun do
15411: LD_EXP 42
15415: PUSH
15416: LD_EXP 65
15420: AND
15421: IFFALSE 15449
15423: GO 15425
15425: DISABLE
// begin solar_recharge_percent := 0 ;
15426: LD_ADDR_OWVAR 79
15430: PUSH
15431: LD_INT 0
15433: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15434: LD_INT 10500
15436: PPUSH
15437: CALL_OW 67
// solar_recharge_percent := 100 ;
15441: LD_ADDR_OWVAR 79
15445: PUSH
15446: LD_INT 100
15448: ST_TO_ADDR
// end ;
15449: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15450: LD_EXP 42
15454: PUSH
15455: LD_EXP 66
15459: AND
15460: IFFALSE 15699
15462: GO 15464
15464: DISABLE
15465: LD_INT 0
15467: PPUSH
15468: PPUSH
15469: PPUSH
// begin tmp := [ ] ;
15470: LD_ADDR_VAR 0 3
15474: PUSH
15475: EMPTY
15476: ST_TO_ADDR
// for i := 1 to 6 do
15477: LD_ADDR_VAR 0 1
15481: PUSH
15482: DOUBLE
15483: LD_INT 1
15485: DEC
15486: ST_TO_ADDR
15487: LD_INT 6
15489: PUSH
15490: FOR_TO
15491: IFFALSE 15596
// begin uc_nation := nation_nature ;
15493: LD_ADDR_OWVAR 21
15497: PUSH
15498: LD_INT 0
15500: ST_TO_ADDR
// uc_side := 0 ;
15501: LD_ADDR_OWVAR 20
15505: PUSH
15506: LD_INT 0
15508: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15509: LD_ADDR_OWVAR 29
15513: PUSH
15514: LD_INT 12
15516: PUSH
15517: LD_INT 12
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: ST_TO_ADDR
// hc_agressivity := 20 ;
15524: LD_ADDR_OWVAR 35
15528: PUSH
15529: LD_INT 20
15531: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15532: LD_ADDR_OWVAR 28
15536: PUSH
15537: LD_INT 17
15539: ST_TO_ADDR
// hc_gallery :=  ;
15540: LD_ADDR_OWVAR 33
15544: PUSH
15545: LD_STRING 
15547: ST_TO_ADDR
// hc_name :=  ;
15548: LD_ADDR_OWVAR 26
15552: PUSH
15553: LD_STRING 
15555: ST_TO_ADDR
// un := CreateHuman ;
15556: LD_ADDR_VAR 0 2
15560: PUSH
15561: CALL_OW 44
15565: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15566: LD_VAR 0 2
15570: PPUSH
15571: LD_INT 1
15573: PPUSH
15574: CALL_OW 51
// tmp := tmp ^ un ;
15578: LD_ADDR_VAR 0 3
15582: PUSH
15583: LD_VAR 0 3
15587: PUSH
15588: LD_VAR 0 2
15592: ADD
15593: ST_TO_ADDR
// end ;
15594: GO 15490
15596: POP
15597: POP
// repeat wait ( 0 0$1 ) ;
15598: LD_INT 35
15600: PPUSH
15601: CALL_OW 67
// for un in tmp do
15605: LD_ADDR_VAR 0 2
15609: PUSH
15610: LD_VAR 0 3
15614: PUSH
15615: FOR_IN
15616: IFFALSE 15690
// begin if IsDead ( un ) then
15618: LD_VAR 0 2
15622: PPUSH
15623: CALL_OW 301
15627: IFFALSE 15647
// begin tmp := tmp diff un ;
15629: LD_ADDR_VAR 0 3
15633: PUSH
15634: LD_VAR 0 3
15638: PUSH
15639: LD_VAR 0 2
15643: DIFF
15644: ST_TO_ADDR
// continue ;
15645: GO 15615
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15647: LD_VAR 0 2
15651: PPUSH
15652: LD_INT 3
15654: PUSH
15655: LD_INT 22
15657: PUSH
15658: LD_INT 0
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PPUSH
15669: CALL_OW 69
15673: PPUSH
15674: LD_VAR 0 2
15678: PPUSH
15679: CALL_OW 74
15683: PPUSH
15684: CALL_OW 115
// end ;
15688: GO 15615
15690: POP
15691: POP
// until not tmp ;
15692: LD_VAR 0 3
15696: NOT
15697: IFFALSE 15598
// end ;
15699: PPOPN 3
15701: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15702: LD_EXP 42
15706: PUSH
15707: LD_EXP 67
15711: AND
15712: IFFALSE 15766
15714: GO 15716
15716: DISABLE
// begin ToLua ( displayTroll(); ) ;
15717: LD_STRING displayTroll();
15719: PPUSH
15720: CALL_OW 559
// wait ( 3 3$00 ) ;
15724: LD_INT 6300
15726: PPUSH
15727: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15731: LD_STRING hideTroll();
15733: PPUSH
15734: CALL_OW 559
// wait ( 1 1$00 ) ;
15738: LD_INT 2100
15740: PPUSH
15741: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15745: LD_STRING displayTroll();
15747: PPUSH
15748: CALL_OW 559
// wait ( 1 1$00 ) ;
15752: LD_INT 2100
15754: PPUSH
15755: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15759: LD_STRING hideTroll();
15761: PPUSH
15762: CALL_OW 559
// end ;
15766: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15767: LD_EXP 42
15771: PUSH
15772: LD_EXP 68
15776: AND
15777: IFFALSE 15840
15779: GO 15781
15781: DISABLE
15782: LD_INT 0
15784: PPUSH
// begin p := 0 ;
15785: LD_ADDR_VAR 0 1
15789: PUSH
15790: LD_INT 0
15792: ST_TO_ADDR
// repeat game_speed := 1 ;
15793: LD_ADDR_OWVAR 65
15797: PUSH
15798: LD_INT 1
15800: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15801: LD_INT 35
15803: PPUSH
15804: CALL_OW 67
// p := p + 1 ;
15808: LD_ADDR_VAR 0 1
15812: PUSH
15813: LD_VAR 0 1
15817: PUSH
15818: LD_INT 1
15820: PLUS
15821: ST_TO_ADDR
// until p >= 60 ;
15822: LD_VAR 0 1
15826: PUSH
15827: LD_INT 60
15829: GREATEREQUAL
15830: IFFALSE 15793
// game_speed := 4 ;
15832: LD_ADDR_OWVAR 65
15836: PUSH
15837: LD_INT 4
15839: ST_TO_ADDR
// end ;
15840: PPOPN 1
15842: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15843: LD_EXP 42
15847: PUSH
15848: LD_EXP 69
15852: AND
15853: IFFALSE 15999
15855: GO 15857
15857: DISABLE
15858: LD_INT 0
15860: PPUSH
15861: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15862: LD_ADDR_VAR 0 1
15866: PUSH
15867: LD_INT 22
15869: PUSH
15870: LD_OWVAR 2
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: LD_INT 2
15881: PUSH
15882: LD_INT 30
15884: PUSH
15885: LD_INT 0
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PUSH
15892: LD_INT 30
15894: PUSH
15895: LD_INT 1
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: LIST
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PPUSH
15911: CALL_OW 69
15915: ST_TO_ADDR
// if not depot then
15916: LD_VAR 0 1
15920: NOT
15921: IFFALSE 15925
// exit ;
15923: GO 15999
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15925: LD_ADDR_VAR 0 2
15929: PUSH
15930: LD_VAR 0 1
15934: PUSH
15935: LD_INT 1
15937: PPUSH
15938: LD_VAR 0 1
15942: PPUSH
15943: CALL_OW 12
15947: ARRAY
15948: PPUSH
15949: CALL_OW 274
15953: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15954: LD_VAR 0 2
15958: PPUSH
15959: LD_INT 1
15961: PPUSH
15962: LD_INT 0
15964: PPUSH
15965: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15969: LD_VAR 0 2
15973: PPUSH
15974: LD_INT 2
15976: PPUSH
15977: LD_INT 0
15979: PPUSH
15980: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15984: LD_VAR 0 2
15988: PPUSH
15989: LD_INT 3
15991: PPUSH
15992: LD_INT 0
15994: PPUSH
15995: CALL_OW 277
// end ;
15999: PPOPN 2
16001: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16002: LD_EXP 42
16006: PUSH
16007: LD_EXP 70
16011: AND
16012: IFFALSE 16109
16014: GO 16016
16016: DISABLE
16017: LD_INT 0
16019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16020: LD_ADDR_VAR 0 1
16024: PUSH
16025: LD_INT 22
16027: PUSH
16028: LD_OWVAR 2
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 21
16039: PUSH
16040: LD_INT 1
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 3
16049: PUSH
16050: LD_INT 23
16052: PUSH
16053: LD_INT 0
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: LIST
16068: PPUSH
16069: CALL_OW 69
16073: ST_TO_ADDR
// if not tmp then
16074: LD_VAR 0 1
16078: NOT
16079: IFFALSE 16083
// exit ;
16081: GO 16109
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16083: LD_VAR 0 1
16087: PUSH
16088: LD_INT 1
16090: PPUSH
16091: LD_VAR 0 1
16095: PPUSH
16096: CALL_OW 12
16100: ARRAY
16101: PPUSH
16102: LD_INT 200
16104: PPUSH
16105: CALL_OW 234
// end ;
16109: PPOPN 1
16111: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16112: LD_EXP 42
16116: PUSH
16117: LD_EXP 71
16121: AND
16122: IFFALSE 16201
16124: GO 16126
16126: DISABLE
16127: LD_INT 0
16129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16130: LD_ADDR_VAR 0 1
16134: PUSH
16135: LD_INT 22
16137: PUSH
16138: LD_OWVAR 2
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 21
16149: PUSH
16150: LD_INT 2
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PPUSH
16161: CALL_OW 69
16165: ST_TO_ADDR
// if not tmp then
16166: LD_VAR 0 1
16170: NOT
16171: IFFALSE 16175
// exit ;
16173: GO 16201
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16175: LD_VAR 0 1
16179: PUSH
16180: LD_INT 1
16182: PPUSH
16183: LD_VAR 0 1
16187: PPUSH
16188: CALL_OW 12
16192: ARRAY
16193: PPUSH
16194: LD_INT 60
16196: PPUSH
16197: CALL_OW 234
// end ;
16201: PPOPN 1
16203: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16204: LD_EXP 42
16208: PUSH
16209: LD_EXP 72
16213: AND
16214: IFFALSE 16313
16216: GO 16218
16218: DISABLE
16219: LD_INT 0
16221: PPUSH
16222: PPUSH
// begin enable ;
16223: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16224: LD_ADDR_VAR 0 1
16228: PUSH
16229: LD_INT 22
16231: PUSH
16232: LD_OWVAR 2
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PUSH
16241: LD_INT 61
16243: PUSH
16244: EMPTY
16245: LIST
16246: PUSH
16247: LD_INT 33
16249: PUSH
16250: LD_INT 2
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: LIST
16261: PPUSH
16262: CALL_OW 69
16266: ST_TO_ADDR
// if not tmp then
16267: LD_VAR 0 1
16271: NOT
16272: IFFALSE 16276
// exit ;
16274: GO 16313
// for i in tmp do
16276: LD_ADDR_VAR 0 2
16280: PUSH
16281: LD_VAR 0 1
16285: PUSH
16286: FOR_IN
16287: IFFALSE 16311
// if IsControledBy ( i ) then
16289: LD_VAR 0 2
16293: PPUSH
16294: CALL_OW 312
16298: IFFALSE 16309
// ComUnlink ( i ) ;
16300: LD_VAR 0 2
16304: PPUSH
16305: CALL_OW 136
16309: GO 16286
16311: POP
16312: POP
// end ;
16313: PPOPN 2
16315: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16316: LD_EXP 42
16320: PUSH
16321: LD_EXP 73
16325: AND
16326: IFFALSE 16466
16328: GO 16330
16330: DISABLE
16331: LD_INT 0
16333: PPUSH
16334: PPUSH
// begin ToLua ( displayPowell(); ) ;
16335: LD_STRING displayPowell();
16337: PPUSH
16338: CALL_OW 559
// uc_side := 0 ;
16342: LD_ADDR_OWVAR 20
16346: PUSH
16347: LD_INT 0
16349: ST_TO_ADDR
// uc_nation := 2 ;
16350: LD_ADDR_OWVAR 21
16354: PUSH
16355: LD_INT 2
16357: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16358: LD_ADDR_OWVAR 37
16362: PUSH
16363: LD_INT 14
16365: ST_TO_ADDR
// vc_engine := engine_siberite ;
16366: LD_ADDR_OWVAR 39
16370: PUSH
16371: LD_INT 3
16373: ST_TO_ADDR
// vc_control := control_apeman ;
16374: LD_ADDR_OWVAR 38
16378: PUSH
16379: LD_INT 5
16381: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16382: LD_ADDR_OWVAR 40
16386: PUSH
16387: LD_INT 29
16389: ST_TO_ADDR
// un := CreateVehicle ;
16390: LD_ADDR_VAR 0 2
16394: PUSH
16395: CALL_OW 45
16399: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16400: LD_VAR 0 2
16404: PPUSH
16405: LD_INT 1
16407: PPUSH
16408: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16412: LD_INT 35
16414: PPUSH
16415: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16419: LD_VAR 0 2
16423: PPUSH
16424: LD_INT 22
16426: PUSH
16427: LD_OWVAR 2
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PPUSH
16436: CALL_OW 69
16440: PPUSH
16441: LD_VAR 0 2
16445: PPUSH
16446: CALL_OW 74
16450: PPUSH
16451: CALL_OW 115
// until IsDead ( un ) ;
16455: LD_VAR 0 2
16459: PPUSH
16460: CALL_OW 301
16464: IFFALSE 16412
// end ;
16466: PPOPN 2
16468: END
// every 0 0$1 trigger StreamModeActive and sStu do
16469: LD_EXP 42
16473: PUSH
16474: LD_EXP 81
16478: AND
16479: IFFALSE 16495
16481: GO 16483
16483: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16484: LD_STRING displayStucuk();
16486: PPUSH
16487: CALL_OW 559
// ResetFog ;
16491: CALL_OW 335
// end ;
16495: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16496: LD_EXP 42
16500: PUSH
16501: LD_EXP 74
16505: AND
16506: IFFALSE 16647
16508: GO 16510
16510: DISABLE
16511: LD_INT 0
16513: PPUSH
16514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16515: LD_ADDR_VAR 0 2
16519: PUSH
16520: LD_INT 22
16522: PUSH
16523: LD_OWVAR 2
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 21
16534: PUSH
16535: LD_INT 1
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PPUSH
16546: CALL_OW 69
16550: ST_TO_ADDR
// if not tmp then
16551: LD_VAR 0 2
16555: NOT
16556: IFFALSE 16560
// exit ;
16558: GO 16647
// un := tmp [ rand ( 1 , tmp ) ] ;
16560: LD_ADDR_VAR 0 1
16564: PUSH
16565: LD_VAR 0 2
16569: PUSH
16570: LD_INT 1
16572: PPUSH
16573: LD_VAR 0 2
16577: PPUSH
16578: CALL_OW 12
16582: ARRAY
16583: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16584: LD_VAR 0 1
16588: PPUSH
16589: LD_INT 0
16591: PPUSH
16592: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16596: LD_VAR 0 1
16600: PPUSH
16601: LD_OWVAR 3
16605: PUSH
16606: LD_VAR 0 1
16610: DIFF
16611: PPUSH
16612: LD_VAR 0 1
16616: PPUSH
16617: CALL_OW 74
16621: PPUSH
16622: CALL_OW 115
// wait ( 0 0$20 ) ;
16626: LD_INT 700
16628: PPUSH
16629: CALL_OW 67
// SetSide ( un , your_side ) ;
16633: LD_VAR 0 1
16637: PPUSH
16638: LD_OWVAR 2
16642: PPUSH
16643: CALL_OW 235
// end ;
16647: PPOPN 2
16649: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16650: LD_EXP 42
16654: PUSH
16655: LD_EXP 75
16659: AND
16660: IFFALSE 16766
16662: GO 16664
16664: DISABLE
16665: LD_INT 0
16667: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16668: LD_ADDR_VAR 0 1
16672: PUSH
16673: LD_INT 22
16675: PUSH
16676: LD_OWVAR 2
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: LD_INT 2
16687: PUSH
16688: LD_INT 30
16690: PUSH
16691: LD_INT 0
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: LD_INT 30
16700: PUSH
16701: LD_INT 1
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: LIST
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PPUSH
16717: CALL_OW 69
16721: ST_TO_ADDR
// if not depot then
16722: LD_VAR 0 1
16726: NOT
16727: IFFALSE 16731
// exit ;
16729: GO 16766
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16731: LD_VAR 0 1
16735: PUSH
16736: LD_INT 1
16738: ARRAY
16739: PPUSH
16740: CALL_OW 250
16744: PPUSH
16745: LD_VAR 0 1
16749: PUSH
16750: LD_INT 1
16752: ARRAY
16753: PPUSH
16754: CALL_OW 251
16758: PPUSH
16759: LD_INT 70
16761: PPUSH
16762: CALL_OW 495
// end ;
16766: PPOPN 1
16768: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16769: LD_EXP 42
16773: PUSH
16774: LD_EXP 76
16778: AND
16779: IFFALSE 16990
16781: GO 16783
16783: DISABLE
16784: LD_INT 0
16786: PPUSH
16787: PPUSH
16788: PPUSH
16789: PPUSH
16790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16791: LD_ADDR_VAR 0 5
16795: PUSH
16796: LD_INT 22
16798: PUSH
16799: LD_OWVAR 2
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: LD_INT 21
16810: PUSH
16811: LD_INT 1
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PPUSH
16822: CALL_OW 69
16826: ST_TO_ADDR
// if not tmp then
16827: LD_VAR 0 5
16831: NOT
16832: IFFALSE 16836
// exit ;
16834: GO 16990
// for i in tmp do
16836: LD_ADDR_VAR 0 1
16840: PUSH
16841: LD_VAR 0 5
16845: PUSH
16846: FOR_IN
16847: IFFALSE 16988
// begin d := rand ( 0 , 5 ) ;
16849: LD_ADDR_VAR 0 4
16853: PUSH
16854: LD_INT 0
16856: PPUSH
16857: LD_INT 5
16859: PPUSH
16860: CALL_OW 12
16864: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16865: LD_ADDR_VAR 0 2
16869: PUSH
16870: LD_VAR 0 1
16874: PPUSH
16875: CALL_OW 250
16879: PPUSH
16880: LD_VAR 0 4
16884: PPUSH
16885: LD_INT 3
16887: PPUSH
16888: LD_INT 12
16890: PPUSH
16891: CALL_OW 12
16895: PPUSH
16896: CALL_OW 272
16900: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16901: LD_ADDR_VAR 0 3
16905: PUSH
16906: LD_VAR 0 1
16910: PPUSH
16911: CALL_OW 251
16915: PPUSH
16916: LD_VAR 0 4
16920: PPUSH
16921: LD_INT 3
16923: PPUSH
16924: LD_INT 12
16926: PPUSH
16927: CALL_OW 12
16931: PPUSH
16932: CALL_OW 273
16936: ST_TO_ADDR
// if ValidHex ( x , y ) then
16937: LD_VAR 0 2
16941: PPUSH
16942: LD_VAR 0 3
16946: PPUSH
16947: CALL_OW 488
16951: IFFALSE 16986
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16953: LD_VAR 0 1
16957: PPUSH
16958: LD_VAR 0 2
16962: PPUSH
16963: LD_VAR 0 3
16967: PPUSH
16968: LD_INT 3
16970: PPUSH
16971: LD_INT 6
16973: PPUSH
16974: CALL_OW 12
16978: PPUSH
16979: LD_INT 1
16981: PPUSH
16982: CALL_OW 483
// end ;
16986: GO 16846
16988: POP
16989: POP
// end ;
16990: PPOPN 5
16992: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16993: LD_EXP 42
16997: PUSH
16998: LD_EXP 77
17002: AND
17003: IFFALSE 17097
17005: GO 17007
17007: DISABLE
17008: LD_INT 0
17010: PPUSH
17011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17012: LD_ADDR_VAR 0 2
17016: PUSH
17017: LD_INT 22
17019: PUSH
17020: LD_OWVAR 2
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PUSH
17029: LD_INT 32
17031: PUSH
17032: LD_INT 1
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PUSH
17039: LD_INT 21
17041: PUSH
17042: LD_INT 2
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: LIST
17053: PPUSH
17054: CALL_OW 69
17058: ST_TO_ADDR
// if not tmp then
17059: LD_VAR 0 2
17063: NOT
17064: IFFALSE 17068
// exit ;
17066: GO 17097
// for i in tmp do
17068: LD_ADDR_VAR 0 1
17072: PUSH
17073: LD_VAR 0 2
17077: PUSH
17078: FOR_IN
17079: IFFALSE 17095
// SetFuel ( i , 0 ) ;
17081: LD_VAR 0 1
17085: PPUSH
17086: LD_INT 0
17088: PPUSH
17089: CALL_OW 240
17093: GO 17078
17095: POP
17096: POP
// end ;
17097: PPOPN 2
17099: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17100: LD_EXP 42
17104: PUSH
17105: LD_EXP 78
17109: AND
17110: IFFALSE 17176
17112: GO 17114
17114: DISABLE
17115: LD_INT 0
17117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17118: LD_ADDR_VAR 0 1
17122: PUSH
17123: LD_INT 22
17125: PUSH
17126: LD_OWVAR 2
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 30
17137: PUSH
17138: LD_INT 29
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PPUSH
17149: CALL_OW 69
17153: ST_TO_ADDR
// if not tmp then
17154: LD_VAR 0 1
17158: NOT
17159: IFFALSE 17163
// exit ;
17161: GO 17176
// DestroyUnit ( tmp [ 1 ] ) ;
17163: LD_VAR 0 1
17167: PUSH
17168: LD_INT 1
17170: ARRAY
17171: PPUSH
17172: CALL_OW 65
// end ;
17176: PPOPN 1
17178: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17179: LD_EXP 42
17183: PUSH
17184: LD_EXP 80
17188: AND
17189: IFFALSE 17318
17191: GO 17193
17193: DISABLE
17194: LD_INT 0
17196: PPUSH
// begin uc_side := 0 ;
17197: LD_ADDR_OWVAR 20
17201: PUSH
17202: LD_INT 0
17204: ST_TO_ADDR
// uc_nation := nation_arabian ;
17205: LD_ADDR_OWVAR 21
17209: PUSH
17210: LD_INT 2
17212: ST_TO_ADDR
// hc_gallery :=  ;
17213: LD_ADDR_OWVAR 33
17217: PUSH
17218: LD_STRING 
17220: ST_TO_ADDR
// hc_name :=  ;
17221: LD_ADDR_OWVAR 26
17225: PUSH
17226: LD_STRING 
17228: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17229: LD_INT 1
17231: PPUSH
17232: LD_INT 11
17234: PPUSH
17235: LD_INT 10
17237: PPUSH
17238: CALL_OW 380
// un := CreateHuman ;
17242: LD_ADDR_VAR 0 1
17246: PUSH
17247: CALL_OW 44
17251: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17252: LD_VAR 0 1
17256: PPUSH
17257: LD_INT 1
17259: PPUSH
17260: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17264: LD_INT 35
17266: PPUSH
17267: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17271: LD_VAR 0 1
17275: PPUSH
17276: LD_INT 22
17278: PUSH
17279: LD_OWVAR 2
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PPUSH
17288: CALL_OW 69
17292: PPUSH
17293: LD_VAR 0 1
17297: PPUSH
17298: CALL_OW 74
17302: PPUSH
17303: CALL_OW 115
// until IsDead ( un ) ;
17307: LD_VAR 0 1
17311: PPUSH
17312: CALL_OW 301
17316: IFFALSE 17264
// end ;
17318: PPOPN 1
17320: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17321: LD_EXP 42
17325: PUSH
17326: LD_EXP 82
17330: AND
17331: IFFALSE 17343
17333: GO 17335
17335: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17336: LD_STRING earthquake(getX(game), 0, 32)
17338: PPUSH
17339: CALL_OW 559
17343: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17344: LD_EXP 42
17348: PUSH
17349: LD_EXP 83
17353: AND
17354: IFFALSE 17445
17356: GO 17358
17358: DISABLE
17359: LD_INT 0
17361: PPUSH
// begin enable ;
17362: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17363: LD_ADDR_VAR 0 1
17367: PUSH
17368: LD_INT 22
17370: PUSH
17371: LD_OWVAR 2
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 21
17382: PUSH
17383: LD_INT 2
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: LD_INT 33
17392: PUSH
17393: LD_INT 3
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: LIST
17404: PPUSH
17405: CALL_OW 69
17409: ST_TO_ADDR
// if not tmp then
17410: LD_VAR 0 1
17414: NOT
17415: IFFALSE 17419
// exit ;
17417: GO 17445
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17419: LD_VAR 0 1
17423: PUSH
17424: LD_INT 1
17426: PPUSH
17427: LD_VAR 0 1
17431: PPUSH
17432: CALL_OW 12
17436: ARRAY
17437: PPUSH
17438: LD_INT 1
17440: PPUSH
17441: CALL_OW 234
// end ;
17445: PPOPN 1
17447: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17448: LD_EXP 42
17452: PUSH
17453: LD_EXP 84
17457: AND
17458: IFFALSE 17599
17460: GO 17462
17462: DISABLE
17463: LD_INT 0
17465: PPUSH
17466: PPUSH
17467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17468: LD_ADDR_VAR 0 3
17472: PUSH
17473: LD_INT 22
17475: PUSH
17476: LD_OWVAR 2
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 25
17487: PUSH
17488: LD_INT 1
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PPUSH
17499: CALL_OW 69
17503: ST_TO_ADDR
// if not tmp then
17504: LD_VAR 0 3
17508: NOT
17509: IFFALSE 17513
// exit ;
17511: GO 17599
// un := tmp [ rand ( 1 , tmp ) ] ;
17513: LD_ADDR_VAR 0 2
17517: PUSH
17518: LD_VAR 0 3
17522: PUSH
17523: LD_INT 1
17525: PPUSH
17526: LD_VAR 0 3
17530: PPUSH
17531: CALL_OW 12
17535: ARRAY
17536: ST_TO_ADDR
// if Crawls ( un ) then
17537: LD_VAR 0 2
17541: PPUSH
17542: CALL_OW 318
17546: IFFALSE 17557
// ComWalk ( un ) ;
17548: LD_VAR 0 2
17552: PPUSH
17553: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17557: LD_VAR 0 2
17561: PPUSH
17562: LD_INT 9
17564: PPUSH
17565: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17569: LD_INT 28
17571: PPUSH
17572: LD_OWVAR 2
17576: PPUSH
17577: LD_INT 2
17579: PPUSH
17580: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17584: LD_INT 29
17586: PPUSH
17587: LD_OWVAR 2
17591: PPUSH
17592: LD_INT 2
17594: PPUSH
17595: CALL_OW 322
// end ;
17599: PPOPN 3
17601: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17602: LD_EXP 42
17606: PUSH
17607: LD_EXP 85
17611: AND
17612: IFFALSE 17723
17614: GO 17616
17616: DISABLE
17617: LD_INT 0
17619: PPUSH
17620: PPUSH
17621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17622: LD_ADDR_VAR 0 3
17626: PUSH
17627: LD_INT 22
17629: PUSH
17630: LD_OWVAR 2
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 25
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PPUSH
17653: CALL_OW 69
17657: ST_TO_ADDR
// if not tmp then
17658: LD_VAR 0 3
17662: NOT
17663: IFFALSE 17667
// exit ;
17665: GO 17723
// un := tmp [ rand ( 1 , tmp ) ] ;
17667: LD_ADDR_VAR 0 2
17671: PUSH
17672: LD_VAR 0 3
17676: PUSH
17677: LD_INT 1
17679: PPUSH
17680: LD_VAR 0 3
17684: PPUSH
17685: CALL_OW 12
17689: ARRAY
17690: ST_TO_ADDR
// if Crawls ( un ) then
17691: LD_VAR 0 2
17695: PPUSH
17696: CALL_OW 318
17700: IFFALSE 17711
// ComWalk ( un ) ;
17702: LD_VAR 0 2
17706: PPUSH
17707: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17711: LD_VAR 0 2
17715: PPUSH
17716: LD_INT 8
17718: PPUSH
17719: CALL_OW 336
// end ;
17723: PPOPN 3
17725: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17726: LD_EXP 42
17730: PUSH
17731: LD_EXP 86
17735: AND
17736: IFFALSE 17880
17738: GO 17740
17740: DISABLE
17741: LD_INT 0
17743: PPUSH
17744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17745: LD_ADDR_VAR 0 2
17749: PUSH
17750: LD_INT 22
17752: PUSH
17753: LD_OWVAR 2
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 21
17764: PUSH
17765: LD_INT 2
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 2
17774: PUSH
17775: LD_INT 34
17777: PUSH
17778: LD_INT 12
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 34
17787: PUSH
17788: LD_INT 51
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: LD_INT 34
17797: PUSH
17798: LD_INT 32
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: LIST
17815: PPUSH
17816: CALL_OW 69
17820: ST_TO_ADDR
// if not tmp then
17821: LD_VAR 0 2
17825: NOT
17826: IFFALSE 17830
// exit ;
17828: GO 17880
// for i in tmp do
17830: LD_ADDR_VAR 0 1
17834: PUSH
17835: LD_VAR 0 2
17839: PUSH
17840: FOR_IN
17841: IFFALSE 17878
// if GetCargo ( i , mat_artifact ) = 0 then
17843: LD_VAR 0 1
17847: PPUSH
17848: LD_INT 4
17850: PPUSH
17851: CALL_OW 289
17855: PUSH
17856: LD_INT 0
17858: EQUAL
17859: IFFALSE 17876
// SetCargo ( i , mat_siberit , 100 ) ;
17861: LD_VAR 0 1
17865: PPUSH
17866: LD_INT 3
17868: PPUSH
17869: LD_INT 100
17871: PPUSH
17872: CALL_OW 290
17876: GO 17840
17878: POP
17879: POP
// end ;
17880: PPOPN 2
17882: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17883: LD_EXP 42
17887: PUSH
17888: LD_EXP 87
17892: AND
17893: IFFALSE 18076
17895: GO 17897
17897: DISABLE
17898: LD_INT 0
17900: PPUSH
17901: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17902: LD_ADDR_VAR 0 2
17906: PUSH
17907: LD_INT 22
17909: PUSH
17910: LD_OWVAR 2
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PPUSH
17919: CALL_OW 69
17923: ST_TO_ADDR
// if not tmp then
17924: LD_VAR 0 2
17928: NOT
17929: IFFALSE 17933
// exit ;
17931: GO 18076
// for i := 1 to 2 do
17933: LD_ADDR_VAR 0 1
17937: PUSH
17938: DOUBLE
17939: LD_INT 1
17941: DEC
17942: ST_TO_ADDR
17943: LD_INT 2
17945: PUSH
17946: FOR_TO
17947: IFFALSE 18074
// begin uc_side := your_side ;
17949: LD_ADDR_OWVAR 20
17953: PUSH
17954: LD_OWVAR 2
17958: ST_TO_ADDR
// uc_nation := nation_american ;
17959: LD_ADDR_OWVAR 21
17963: PUSH
17964: LD_INT 1
17966: ST_TO_ADDR
// vc_chassis := us_morphling ;
17967: LD_ADDR_OWVAR 37
17971: PUSH
17972: LD_INT 5
17974: ST_TO_ADDR
// vc_engine := engine_siberite ;
17975: LD_ADDR_OWVAR 39
17979: PUSH
17980: LD_INT 3
17982: ST_TO_ADDR
// vc_control := control_computer ;
17983: LD_ADDR_OWVAR 38
17987: PUSH
17988: LD_INT 3
17990: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17991: LD_ADDR_OWVAR 40
17995: PUSH
17996: LD_INT 10
17998: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17999: LD_VAR 0 2
18003: PUSH
18004: LD_INT 1
18006: ARRAY
18007: PPUSH
18008: CALL_OW 310
18012: NOT
18013: IFFALSE 18060
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18015: CALL_OW 45
18019: PPUSH
18020: LD_VAR 0 2
18024: PUSH
18025: LD_INT 1
18027: ARRAY
18028: PPUSH
18029: CALL_OW 250
18033: PPUSH
18034: LD_VAR 0 2
18038: PUSH
18039: LD_INT 1
18041: ARRAY
18042: PPUSH
18043: CALL_OW 251
18047: PPUSH
18048: LD_INT 12
18050: PPUSH
18051: LD_INT 1
18053: PPUSH
18054: CALL_OW 50
18058: GO 18072
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18060: CALL_OW 45
18064: PPUSH
18065: LD_INT 1
18067: PPUSH
18068: CALL_OW 51
// end ;
18072: GO 17946
18074: POP
18075: POP
// end ;
18076: PPOPN 2
18078: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18079: LD_EXP 42
18083: PUSH
18084: LD_EXP 88
18088: AND
18089: IFFALSE 18311
18091: GO 18093
18093: DISABLE
18094: LD_INT 0
18096: PPUSH
18097: PPUSH
18098: PPUSH
18099: PPUSH
18100: PPUSH
18101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18102: LD_ADDR_VAR 0 6
18106: PUSH
18107: LD_INT 22
18109: PUSH
18110: LD_OWVAR 2
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 21
18121: PUSH
18122: LD_INT 1
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 3
18131: PUSH
18132: LD_INT 23
18134: PUSH
18135: LD_INT 0
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: LIST
18150: PPUSH
18151: CALL_OW 69
18155: ST_TO_ADDR
// if not tmp then
18156: LD_VAR 0 6
18160: NOT
18161: IFFALSE 18165
// exit ;
18163: GO 18311
// s1 := rand ( 1 , 4 ) ;
18165: LD_ADDR_VAR 0 2
18169: PUSH
18170: LD_INT 1
18172: PPUSH
18173: LD_INT 4
18175: PPUSH
18176: CALL_OW 12
18180: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18181: LD_ADDR_VAR 0 4
18185: PUSH
18186: LD_VAR 0 6
18190: PUSH
18191: LD_INT 1
18193: ARRAY
18194: PPUSH
18195: LD_VAR 0 2
18199: PPUSH
18200: CALL_OW 259
18204: ST_TO_ADDR
// if s1 = 1 then
18205: LD_VAR 0 2
18209: PUSH
18210: LD_INT 1
18212: EQUAL
18213: IFFALSE 18233
// s2 := rand ( 2 , 4 ) else
18215: LD_ADDR_VAR 0 3
18219: PUSH
18220: LD_INT 2
18222: PPUSH
18223: LD_INT 4
18225: PPUSH
18226: CALL_OW 12
18230: ST_TO_ADDR
18231: GO 18241
// s2 := 1 ;
18233: LD_ADDR_VAR 0 3
18237: PUSH
18238: LD_INT 1
18240: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18241: LD_ADDR_VAR 0 5
18245: PUSH
18246: LD_VAR 0 6
18250: PUSH
18251: LD_INT 1
18253: ARRAY
18254: PPUSH
18255: LD_VAR 0 3
18259: PPUSH
18260: CALL_OW 259
18264: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18265: LD_VAR 0 6
18269: PUSH
18270: LD_INT 1
18272: ARRAY
18273: PPUSH
18274: LD_VAR 0 2
18278: PPUSH
18279: LD_VAR 0 5
18283: PPUSH
18284: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18288: LD_VAR 0 6
18292: PUSH
18293: LD_INT 1
18295: ARRAY
18296: PPUSH
18297: LD_VAR 0 3
18301: PPUSH
18302: LD_VAR 0 4
18306: PPUSH
18307: CALL_OW 237
// end ;
18311: PPOPN 6
18313: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18314: LD_EXP 42
18318: PUSH
18319: LD_EXP 89
18323: AND
18324: IFFALSE 18403
18326: GO 18328
18328: DISABLE
18329: LD_INT 0
18331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18332: LD_ADDR_VAR 0 1
18336: PUSH
18337: LD_INT 22
18339: PUSH
18340: LD_OWVAR 2
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 30
18351: PUSH
18352: LD_INT 3
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PPUSH
18363: CALL_OW 69
18367: ST_TO_ADDR
// if not tmp then
18368: LD_VAR 0 1
18372: NOT
18373: IFFALSE 18377
// exit ;
18375: GO 18403
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18377: LD_VAR 0 1
18381: PUSH
18382: LD_INT 1
18384: PPUSH
18385: LD_VAR 0 1
18389: PPUSH
18390: CALL_OW 12
18394: ARRAY
18395: PPUSH
18396: LD_INT 1
18398: PPUSH
18399: CALL_OW 234
// end ;
18403: PPOPN 1
18405: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18406: LD_EXP 42
18410: PUSH
18411: LD_EXP 90
18415: AND
18416: IFFALSE 18528
18418: GO 18420
18420: DISABLE
18421: LD_INT 0
18423: PPUSH
18424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18425: LD_ADDR_VAR 0 2
18429: PUSH
18430: LD_INT 22
18432: PUSH
18433: LD_OWVAR 2
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 2
18444: PUSH
18445: LD_INT 30
18447: PUSH
18448: LD_INT 27
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 30
18457: PUSH
18458: LD_INT 26
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 30
18467: PUSH
18468: LD_INT 28
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PPUSH
18485: CALL_OW 69
18489: ST_TO_ADDR
// if not tmp then
18490: LD_VAR 0 2
18494: NOT
18495: IFFALSE 18499
// exit ;
18497: GO 18528
// for i in tmp do
18499: LD_ADDR_VAR 0 1
18503: PUSH
18504: LD_VAR 0 2
18508: PUSH
18509: FOR_IN
18510: IFFALSE 18526
// SetLives ( i , 1 ) ;
18512: LD_VAR 0 1
18516: PPUSH
18517: LD_INT 1
18519: PPUSH
18520: CALL_OW 234
18524: GO 18509
18526: POP
18527: POP
// end ;
18528: PPOPN 2
18530: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18531: LD_EXP 42
18535: PUSH
18536: LD_EXP 91
18540: AND
18541: IFFALSE 18828
18543: GO 18545
18545: DISABLE
18546: LD_INT 0
18548: PPUSH
18549: PPUSH
18550: PPUSH
// begin i := rand ( 1 , 7 ) ;
18551: LD_ADDR_VAR 0 1
18555: PUSH
18556: LD_INT 1
18558: PPUSH
18559: LD_INT 7
18561: PPUSH
18562: CALL_OW 12
18566: ST_TO_ADDR
// case i of 1 :
18567: LD_VAR 0 1
18571: PUSH
18572: LD_INT 1
18574: DOUBLE
18575: EQUAL
18576: IFTRUE 18580
18578: GO 18590
18580: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18581: LD_STRING earthquake(getX(game), 0, 32)
18583: PPUSH
18584: CALL_OW 559
18588: GO 18828
18590: LD_INT 2
18592: DOUBLE
18593: EQUAL
18594: IFTRUE 18598
18596: GO 18612
18598: POP
// begin ToLua ( displayStucuk(); ) ;
18599: LD_STRING displayStucuk();
18601: PPUSH
18602: CALL_OW 559
// ResetFog ;
18606: CALL_OW 335
// end ; 3 :
18610: GO 18828
18612: LD_INT 3
18614: DOUBLE
18615: EQUAL
18616: IFTRUE 18620
18618: GO 18724
18620: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18621: LD_ADDR_VAR 0 2
18625: PUSH
18626: LD_INT 22
18628: PUSH
18629: LD_OWVAR 2
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 25
18640: PUSH
18641: LD_INT 1
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PPUSH
18652: CALL_OW 69
18656: ST_TO_ADDR
// if not tmp then
18657: LD_VAR 0 2
18661: NOT
18662: IFFALSE 18666
// exit ;
18664: GO 18828
// un := tmp [ rand ( 1 , tmp ) ] ;
18666: LD_ADDR_VAR 0 3
18670: PUSH
18671: LD_VAR 0 2
18675: PUSH
18676: LD_INT 1
18678: PPUSH
18679: LD_VAR 0 2
18683: PPUSH
18684: CALL_OW 12
18688: ARRAY
18689: ST_TO_ADDR
// if Crawls ( un ) then
18690: LD_VAR 0 3
18694: PPUSH
18695: CALL_OW 318
18699: IFFALSE 18710
// ComWalk ( un ) ;
18701: LD_VAR 0 3
18705: PPUSH
18706: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18710: LD_VAR 0 3
18714: PPUSH
18715: LD_INT 8
18717: PPUSH
18718: CALL_OW 336
// end ; 4 :
18722: GO 18828
18724: LD_INT 4
18726: DOUBLE
18727: EQUAL
18728: IFTRUE 18732
18730: GO 18806
18732: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18733: LD_ADDR_VAR 0 2
18737: PUSH
18738: LD_INT 22
18740: PUSH
18741: LD_OWVAR 2
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 30
18752: PUSH
18753: LD_INT 29
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PPUSH
18764: CALL_OW 69
18768: ST_TO_ADDR
// if not tmp then
18769: LD_VAR 0 2
18773: NOT
18774: IFFALSE 18778
// exit ;
18776: GO 18828
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18778: LD_VAR 0 2
18782: PUSH
18783: LD_INT 1
18785: ARRAY
18786: PPUSH
18787: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18791: LD_VAR 0 2
18795: PUSH
18796: LD_INT 1
18798: ARRAY
18799: PPUSH
18800: CALL_OW 65
// end ; 5 .. 7 :
18804: GO 18828
18806: LD_INT 5
18808: DOUBLE
18809: GREATEREQUAL
18810: IFFALSE 18818
18812: LD_INT 7
18814: DOUBLE
18815: LESSEQUAL
18816: IFTRUE 18820
18818: GO 18827
18820: POP
// StreamSibBomb ; end ;
18821: CALL 15065 0 0
18825: GO 18828
18827: POP
// end ;
18828: PPOPN 3
18830: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18831: LD_EXP 42
18835: PUSH
18836: LD_EXP 92
18840: AND
18841: IFFALSE 18997
18843: GO 18845
18845: DISABLE
18846: LD_INT 0
18848: PPUSH
18849: PPUSH
18850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18851: LD_ADDR_VAR 0 2
18855: PUSH
18856: LD_INT 81
18858: PUSH
18859: LD_OWVAR 2
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 2
18870: PUSH
18871: LD_INT 21
18873: PUSH
18874: LD_INT 1
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 21
18883: PUSH
18884: LD_INT 2
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: LIST
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PPUSH
18900: CALL_OW 69
18904: ST_TO_ADDR
// if not tmp then
18905: LD_VAR 0 2
18909: NOT
18910: IFFALSE 18914
// exit ;
18912: GO 18997
// p := 0 ;
18914: LD_ADDR_VAR 0 3
18918: PUSH
18919: LD_INT 0
18921: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18922: LD_INT 35
18924: PPUSH
18925: CALL_OW 67
// p := p + 1 ;
18929: LD_ADDR_VAR 0 3
18933: PUSH
18934: LD_VAR 0 3
18938: PUSH
18939: LD_INT 1
18941: PLUS
18942: ST_TO_ADDR
// for i in tmp do
18943: LD_ADDR_VAR 0 1
18947: PUSH
18948: LD_VAR 0 2
18952: PUSH
18953: FOR_IN
18954: IFFALSE 18985
// if GetLives ( i ) < 1000 then
18956: LD_VAR 0 1
18960: PPUSH
18961: CALL_OW 256
18965: PUSH
18966: LD_INT 1000
18968: LESS
18969: IFFALSE 18983
// SetLives ( i , 1000 ) ;
18971: LD_VAR 0 1
18975: PPUSH
18976: LD_INT 1000
18978: PPUSH
18979: CALL_OW 234
18983: GO 18953
18985: POP
18986: POP
// until p > 20 ;
18987: LD_VAR 0 3
18991: PUSH
18992: LD_INT 20
18994: GREATER
18995: IFFALSE 18922
// end ;
18997: PPOPN 3
18999: END
// every 0 0$1 trigger StreamModeActive and sTime do
19000: LD_EXP 42
19004: PUSH
19005: LD_EXP 93
19009: AND
19010: IFFALSE 19045
19012: GO 19014
19014: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19015: LD_INT 28
19017: PPUSH
19018: LD_OWVAR 2
19022: PPUSH
19023: LD_INT 2
19025: PPUSH
19026: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19030: LD_INT 30
19032: PPUSH
19033: LD_OWVAR 2
19037: PPUSH
19038: LD_INT 2
19040: PPUSH
19041: CALL_OW 322
// end ;
19045: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19046: LD_EXP 42
19050: PUSH
19051: LD_EXP 94
19055: AND
19056: IFFALSE 19177
19058: GO 19060
19060: DISABLE
19061: LD_INT 0
19063: PPUSH
19064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19065: LD_ADDR_VAR 0 2
19069: PUSH
19070: LD_INT 22
19072: PUSH
19073: LD_OWVAR 2
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 21
19084: PUSH
19085: LD_INT 1
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 3
19094: PUSH
19095: LD_INT 23
19097: PUSH
19098: LD_INT 0
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: LIST
19113: PPUSH
19114: CALL_OW 69
19118: ST_TO_ADDR
// if not tmp then
19119: LD_VAR 0 2
19123: NOT
19124: IFFALSE 19128
// exit ;
19126: GO 19177
// for i in tmp do
19128: LD_ADDR_VAR 0 1
19132: PUSH
19133: LD_VAR 0 2
19137: PUSH
19138: FOR_IN
19139: IFFALSE 19175
// begin if Crawls ( i ) then
19141: LD_VAR 0 1
19145: PPUSH
19146: CALL_OW 318
19150: IFFALSE 19161
// ComWalk ( i ) ;
19152: LD_VAR 0 1
19156: PPUSH
19157: CALL_OW 138
// SetClass ( i , 2 ) ;
19161: LD_VAR 0 1
19165: PPUSH
19166: LD_INT 2
19168: PPUSH
19169: CALL_OW 336
// end ;
19173: GO 19138
19175: POP
19176: POP
// end ;
19177: PPOPN 2
19179: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19180: LD_EXP 42
19184: PUSH
19185: LD_EXP 95
19189: AND
19190: IFFALSE 19478
19192: GO 19194
19194: DISABLE
19195: LD_INT 0
19197: PPUSH
19198: PPUSH
19199: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19200: LD_OWVAR 2
19204: PPUSH
19205: LD_INT 9
19207: PPUSH
19208: LD_INT 1
19210: PPUSH
19211: LD_INT 1
19213: PPUSH
19214: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19218: LD_INT 9
19220: PPUSH
19221: LD_OWVAR 2
19225: PPUSH
19226: CALL_OW 343
// uc_side := 9 ;
19230: LD_ADDR_OWVAR 20
19234: PUSH
19235: LD_INT 9
19237: ST_TO_ADDR
// uc_nation := 2 ;
19238: LD_ADDR_OWVAR 21
19242: PUSH
19243: LD_INT 2
19245: ST_TO_ADDR
// hc_name := Dark Warrior ;
19246: LD_ADDR_OWVAR 26
19250: PUSH
19251: LD_STRING Dark Warrior
19253: ST_TO_ADDR
// hc_gallery :=  ;
19254: LD_ADDR_OWVAR 33
19258: PUSH
19259: LD_STRING 
19261: ST_TO_ADDR
// hc_noskilllimit := true ;
19262: LD_ADDR_OWVAR 76
19266: PUSH
19267: LD_INT 1
19269: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19270: LD_ADDR_OWVAR 31
19274: PUSH
19275: LD_INT 30
19277: PUSH
19278: LD_INT 30
19280: PUSH
19281: LD_INT 30
19283: PUSH
19284: LD_INT 30
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: ST_TO_ADDR
// un := CreateHuman ;
19293: LD_ADDR_VAR 0 3
19297: PUSH
19298: CALL_OW 44
19302: ST_TO_ADDR
// hc_noskilllimit := false ;
19303: LD_ADDR_OWVAR 76
19307: PUSH
19308: LD_INT 0
19310: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19311: LD_VAR 0 3
19315: PPUSH
19316: LD_INT 1
19318: PPUSH
19319: CALL_OW 51
// ToLua ( playRanger() ) ;
19323: LD_STRING playRanger()
19325: PPUSH
19326: CALL_OW 559
// p := 0 ;
19330: LD_ADDR_VAR 0 2
19334: PUSH
19335: LD_INT 0
19337: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19338: LD_INT 35
19340: PPUSH
19341: CALL_OW 67
// p := p + 1 ;
19345: LD_ADDR_VAR 0 2
19349: PUSH
19350: LD_VAR 0 2
19354: PUSH
19355: LD_INT 1
19357: PLUS
19358: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19359: LD_VAR 0 3
19363: PPUSH
19364: CALL_OW 256
19368: PUSH
19369: LD_INT 1000
19371: LESS
19372: IFFALSE 19386
// SetLives ( un , 1000 ) ;
19374: LD_VAR 0 3
19378: PPUSH
19379: LD_INT 1000
19381: PPUSH
19382: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19386: LD_VAR 0 3
19390: PPUSH
19391: LD_INT 81
19393: PUSH
19394: LD_OWVAR 2
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 91
19405: PUSH
19406: LD_VAR 0 3
19410: PUSH
19411: LD_INT 30
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: LIST
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PPUSH
19423: CALL_OW 69
19427: PPUSH
19428: LD_VAR 0 3
19432: PPUSH
19433: CALL_OW 74
19437: PPUSH
19438: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19442: LD_VAR 0 2
19446: PUSH
19447: LD_INT 80
19449: GREATER
19450: PUSH
19451: LD_VAR 0 3
19455: PPUSH
19456: CALL_OW 301
19460: OR
19461: IFFALSE 19338
// if un then
19463: LD_VAR 0 3
19467: IFFALSE 19478
// RemoveUnit ( un ) ;
19469: LD_VAR 0 3
19473: PPUSH
19474: CALL_OW 64
// end ;
19478: PPOPN 3
19480: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19481: LD_EXP 96
19485: IFFALSE 19601
19487: GO 19489
19489: DISABLE
19490: LD_INT 0
19492: PPUSH
19493: PPUSH
19494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19495: LD_ADDR_VAR 0 2
19499: PUSH
19500: LD_INT 81
19502: PUSH
19503: LD_OWVAR 2
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 21
19514: PUSH
19515: LD_INT 1
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PPUSH
19526: CALL_OW 69
19530: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19531: LD_STRING playComputer()
19533: PPUSH
19534: CALL_OW 559
// if not tmp then
19538: LD_VAR 0 2
19542: NOT
19543: IFFALSE 19547
// exit ;
19545: GO 19601
// for i in tmp do
19547: LD_ADDR_VAR 0 1
19551: PUSH
19552: LD_VAR 0 2
19556: PUSH
19557: FOR_IN
19558: IFFALSE 19599
// for j := 1 to 4 do
19560: LD_ADDR_VAR 0 3
19564: PUSH
19565: DOUBLE
19566: LD_INT 1
19568: DEC
19569: ST_TO_ADDR
19570: LD_INT 4
19572: PUSH
19573: FOR_TO
19574: IFFALSE 19595
// SetSkill ( i , j , 10 ) ;
19576: LD_VAR 0 1
19580: PPUSH
19581: LD_VAR 0 3
19585: PPUSH
19586: LD_INT 10
19588: PPUSH
19589: CALL_OW 237
19593: GO 19573
19595: POP
19596: POP
19597: GO 19557
19599: POP
19600: POP
// end ;
19601: PPOPN 3
19603: END
// every 0 0$1 trigger s30 do var i , tmp ;
19604: LD_EXP 97
19608: IFFALSE 19677
19610: GO 19612
19612: DISABLE
19613: LD_INT 0
19615: PPUSH
19616: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19617: LD_ADDR_VAR 0 2
19621: PUSH
19622: LD_INT 22
19624: PUSH
19625: LD_OWVAR 2
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PPUSH
19634: CALL_OW 69
19638: ST_TO_ADDR
// if not tmp then
19639: LD_VAR 0 2
19643: NOT
19644: IFFALSE 19648
// exit ;
19646: GO 19677
// for i in tmp do
19648: LD_ADDR_VAR 0 1
19652: PUSH
19653: LD_VAR 0 2
19657: PUSH
19658: FOR_IN
19659: IFFALSE 19675
// SetLives ( i , 300 ) ;
19661: LD_VAR 0 1
19665: PPUSH
19666: LD_INT 300
19668: PPUSH
19669: CALL_OW 234
19673: GO 19658
19675: POP
19676: POP
// end ;
19677: PPOPN 2
19679: END
// every 0 0$1 trigger s60 do var i , tmp ;
19680: LD_EXP 98
19684: IFFALSE 19753
19686: GO 19688
19688: DISABLE
19689: LD_INT 0
19691: PPUSH
19692: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19693: LD_ADDR_VAR 0 2
19697: PUSH
19698: LD_INT 22
19700: PUSH
19701: LD_OWVAR 2
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PPUSH
19710: CALL_OW 69
19714: ST_TO_ADDR
// if not tmp then
19715: LD_VAR 0 2
19719: NOT
19720: IFFALSE 19724
// exit ;
19722: GO 19753
// for i in tmp do
19724: LD_ADDR_VAR 0 1
19728: PUSH
19729: LD_VAR 0 2
19733: PUSH
19734: FOR_IN
19735: IFFALSE 19751
// SetLives ( i , 600 ) ;
19737: LD_VAR 0 1
19741: PPUSH
19742: LD_INT 600
19744: PPUSH
19745: CALL_OW 234
19749: GO 19734
19751: POP
19752: POP
// end ;
19753: PPOPN 2
19755: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19756: LD_INT 0
19758: PPUSH
// case cmd of 301 :
19759: LD_VAR 0 1
19763: PUSH
19764: LD_INT 301
19766: DOUBLE
19767: EQUAL
19768: IFTRUE 19772
19770: GO 19804
19772: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19773: LD_VAR 0 6
19777: PPUSH
19778: LD_VAR 0 7
19782: PPUSH
19783: LD_VAR 0 8
19787: PPUSH
19788: LD_VAR 0 4
19792: PPUSH
19793: LD_VAR 0 5
19797: PPUSH
19798: CALL 21005 0 5
19802: GO 19925
19804: LD_INT 302
19806: DOUBLE
19807: EQUAL
19808: IFTRUE 19812
19810: GO 19849
19812: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19813: LD_VAR 0 6
19817: PPUSH
19818: LD_VAR 0 7
19822: PPUSH
19823: LD_VAR 0 8
19827: PPUSH
19828: LD_VAR 0 9
19832: PPUSH
19833: LD_VAR 0 4
19837: PPUSH
19838: LD_VAR 0 5
19842: PPUSH
19843: CALL 21096 0 6
19847: GO 19925
19849: LD_INT 303
19851: DOUBLE
19852: EQUAL
19853: IFTRUE 19857
19855: GO 19894
19857: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19858: LD_VAR 0 6
19862: PPUSH
19863: LD_VAR 0 7
19867: PPUSH
19868: LD_VAR 0 8
19872: PPUSH
19873: LD_VAR 0 9
19877: PPUSH
19878: LD_VAR 0 4
19882: PPUSH
19883: LD_VAR 0 5
19887: PPUSH
19888: CALL 19930 0 6
19892: GO 19925
19894: LD_INT 304
19896: DOUBLE
19897: EQUAL
19898: IFTRUE 19902
19900: GO 19924
19902: POP
// hHackTeleport ( unit , x , y ) ; end ;
19903: LD_VAR 0 2
19907: PPUSH
19908: LD_VAR 0 4
19912: PPUSH
19913: LD_VAR 0 5
19917: PPUSH
19918: CALL 21689 0 3
19922: GO 19925
19924: POP
// end ;
19925: LD_VAR 0 12
19929: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19930: LD_INT 0
19932: PPUSH
19933: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19934: LD_VAR 0 1
19938: PUSH
19939: LD_INT 1
19941: LESS
19942: PUSH
19943: LD_VAR 0 1
19947: PUSH
19948: LD_INT 3
19950: GREATER
19951: OR
19952: PUSH
19953: LD_VAR 0 5
19957: PPUSH
19958: LD_VAR 0 6
19962: PPUSH
19963: CALL_OW 428
19967: OR
19968: IFFALSE 19972
// exit ;
19970: GO 20692
// uc_side := your_side ;
19972: LD_ADDR_OWVAR 20
19976: PUSH
19977: LD_OWVAR 2
19981: ST_TO_ADDR
// uc_nation := nation ;
19982: LD_ADDR_OWVAR 21
19986: PUSH
19987: LD_VAR 0 1
19991: ST_TO_ADDR
// bc_level = 1 ;
19992: LD_ADDR_OWVAR 43
19996: PUSH
19997: LD_INT 1
19999: ST_TO_ADDR
// case btype of 1 :
20000: LD_VAR 0 2
20004: PUSH
20005: LD_INT 1
20007: DOUBLE
20008: EQUAL
20009: IFTRUE 20013
20011: GO 20024
20013: POP
// bc_type := b_depot ; 2 :
20014: LD_ADDR_OWVAR 42
20018: PUSH
20019: LD_INT 0
20021: ST_TO_ADDR
20022: GO 20636
20024: LD_INT 2
20026: DOUBLE
20027: EQUAL
20028: IFTRUE 20032
20030: GO 20043
20032: POP
// bc_type := b_warehouse ; 3 :
20033: LD_ADDR_OWVAR 42
20037: PUSH
20038: LD_INT 1
20040: ST_TO_ADDR
20041: GO 20636
20043: LD_INT 3
20045: DOUBLE
20046: EQUAL
20047: IFTRUE 20051
20049: GO 20062
20051: POP
// bc_type := b_lab ; 4 .. 9 :
20052: LD_ADDR_OWVAR 42
20056: PUSH
20057: LD_INT 6
20059: ST_TO_ADDR
20060: GO 20636
20062: LD_INT 4
20064: DOUBLE
20065: GREATEREQUAL
20066: IFFALSE 20074
20068: LD_INT 9
20070: DOUBLE
20071: LESSEQUAL
20072: IFTRUE 20076
20074: GO 20128
20076: POP
// begin bc_type := b_lab_half ;
20077: LD_ADDR_OWVAR 42
20081: PUSH
20082: LD_INT 7
20084: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20085: LD_ADDR_OWVAR 44
20089: PUSH
20090: LD_INT 10
20092: PUSH
20093: LD_INT 11
20095: PUSH
20096: LD_INT 12
20098: PUSH
20099: LD_INT 15
20101: PUSH
20102: LD_INT 14
20104: PUSH
20105: LD_INT 13
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: PUSH
20116: LD_VAR 0 2
20120: PUSH
20121: LD_INT 3
20123: MINUS
20124: ARRAY
20125: ST_TO_ADDR
// end ; 10 .. 13 :
20126: GO 20636
20128: LD_INT 10
20130: DOUBLE
20131: GREATEREQUAL
20132: IFFALSE 20140
20134: LD_INT 13
20136: DOUBLE
20137: LESSEQUAL
20138: IFTRUE 20142
20140: GO 20219
20142: POP
// begin bc_type := b_lab_full ;
20143: LD_ADDR_OWVAR 42
20147: PUSH
20148: LD_INT 8
20150: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20151: LD_ADDR_OWVAR 44
20155: PUSH
20156: LD_INT 10
20158: PUSH
20159: LD_INT 12
20161: PUSH
20162: LD_INT 14
20164: PUSH
20165: LD_INT 13
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: PUSH
20174: LD_VAR 0 2
20178: PUSH
20179: LD_INT 9
20181: MINUS
20182: ARRAY
20183: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20184: LD_ADDR_OWVAR 45
20188: PUSH
20189: LD_INT 11
20191: PUSH
20192: LD_INT 15
20194: PUSH
20195: LD_INT 12
20197: PUSH
20198: LD_INT 15
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: PUSH
20207: LD_VAR 0 2
20211: PUSH
20212: LD_INT 9
20214: MINUS
20215: ARRAY
20216: ST_TO_ADDR
// end ; 14 :
20217: GO 20636
20219: LD_INT 14
20221: DOUBLE
20222: EQUAL
20223: IFTRUE 20227
20225: GO 20238
20227: POP
// bc_type := b_workshop ; 15 :
20228: LD_ADDR_OWVAR 42
20232: PUSH
20233: LD_INT 2
20235: ST_TO_ADDR
20236: GO 20636
20238: LD_INT 15
20240: DOUBLE
20241: EQUAL
20242: IFTRUE 20246
20244: GO 20257
20246: POP
// bc_type := b_factory ; 16 :
20247: LD_ADDR_OWVAR 42
20251: PUSH
20252: LD_INT 3
20254: ST_TO_ADDR
20255: GO 20636
20257: LD_INT 16
20259: DOUBLE
20260: EQUAL
20261: IFTRUE 20265
20263: GO 20276
20265: POP
// bc_type := b_ext_gun ; 17 :
20266: LD_ADDR_OWVAR 42
20270: PUSH
20271: LD_INT 17
20273: ST_TO_ADDR
20274: GO 20636
20276: LD_INT 17
20278: DOUBLE
20279: EQUAL
20280: IFTRUE 20284
20282: GO 20312
20284: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20285: LD_ADDR_OWVAR 42
20289: PUSH
20290: LD_INT 19
20292: PUSH
20293: LD_INT 23
20295: PUSH
20296: LD_INT 19
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: LIST
20303: PUSH
20304: LD_VAR 0 1
20308: ARRAY
20309: ST_TO_ADDR
20310: GO 20636
20312: LD_INT 18
20314: DOUBLE
20315: EQUAL
20316: IFTRUE 20320
20318: GO 20331
20320: POP
// bc_type := b_ext_radar ; 19 :
20321: LD_ADDR_OWVAR 42
20325: PUSH
20326: LD_INT 20
20328: ST_TO_ADDR
20329: GO 20636
20331: LD_INT 19
20333: DOUBLE
20334: EQUAL
20335: IFTRUE 20339
20337: GO 20350
20339: POP
// bc_type := b_ext_radio ; 20 :
20340: LD_ADDR_OWVAR 42
20344: PUSH
20345: LD_INT 22
20347: ST_TO_ADDR
20348: GO 20636
20350: LD_INT 20
20352: DOUBLE
20353: EQUAL
20354: IFTRUE 20358
20356: GO 20369
20358: POP
// bc_type := b_ext_siberium ; 21 :
20359: LD_ADDR_OWVAR 42
20363: PUSH
20364: LD_INT 21
20366: ST_TO_ADDR
20367: GO 20636
20369: LD_INT 21
20371: DOUBLE
20372: EQUAL
20373: IFTRUE 20377
20375: GO 20388
20377: POP
// bc_type := b_ext_computer ; 22 :
20378: LD_ADDR_OWVAR 42
20382: PUSH
20383: LD_INT 24
20385: ST_TO_ADDR
20386: GO 20636
20388: LD_INT 22
20390: DOUBLE
20391: EQUAL
20392: IFTRUE 20396
20394: GO 20407
20396: POP
// bc_type := b_ext_track ; 23 :
20397: LD_ADDR_OWVAR 42
20401: PUSH
20402: LD_INT 16
20404: ST_TO_ADDR
20405: GO 20636
20407: LD_INT 23
20409: DOUBLE
20410: EQUAL
20411: IFTRUE 20415
20413: GO 20426
20415: POP
// bc_type := b_ext_laser ; 24 :
20416: LD_ADDR_OWVAR 42
20420: PUSH
20421: LD_INT 25
20423: ST_TO_ADDR
20424: GO 20636
20426: LD_INT 24
20428: DOUBLE
20429: EQUAL
20430: IFTRUE 20434
20432: GO 20445
20434: POP
// bc_type := b_control_tower ; 25 :
20435: LD_ADDR_OWVAR 42
20439: PUSH
20440: LD_INT 36
20442: ST_TO_ADDR
20443: GO 20636
20445: LD_INT 25
20447: DOUBLE
20448: EQUAL
20449: IFTRUE 20453
20451: GO 20464
20453: POP
// bc_type := b_breastwork ; 26 :
20454: LD_ADDR_OWVAR 42
20458: PUSH
20459: LD_INT 31
20461: ST_TO_ADDR
20462: GO 20636
20464: LD_INT 26
20466: DOUBLE
20467: EQUAL
20468: IFTRUE 20472
20470: GO 20483
20472: POP
// bc_type := b_bunker ; 27 :
20473: LD_ADDR_OWVAR 42
20477: PUSH
20478: LD_INT 32
20480: ST_TO_ADDR
20481: GO 20636
20483: LD_INT 27
20485: DOUBLE
20486: EQUAL
20487: IFTRUE 20491
20489: GO 20502
20491: POP
// bc_type := b_turret ; 28 :
20492: LD_ADDR_OWVAR 42
20496: PUSH
20497: LD_INT 33
20499: ST_TO_ADDR
20500: GO 20636
20502: LD_INT 28
20504: DOUBLE
20505: EQUAL
20506: IFTRUE 20510
20508: GO 20521
20510: POP
// bc_type := b_armoury ; 29 :
20511: LD_ADDR_OWVAR 42
20515: PUSH
20516: LD_INT 4
20518: ST_TO_ADDR
20519: GO 20636
20521: LD_INT 29
20523: DOUBLE
20524: EQUAL
20525: IFTRUE 20529
20527: GO 20540
20529: POP
// bc_type := b_barracks ; 30 :
20530: LD_ADDR_OWVAR 42
20534: PUSH
20535: LD_INT 5
20537: ST_TO_ADDR
20538: GO 20636
20540: LD_INT 30
20542: DOUBLE
20543: EQUAL
20544: IFTRUE 20548
20546: GO 20559
20548: POP
// bc_type := b_solar_power ; 31 :
20549: LD_ADDR_OWVAR 42
20553: PUSH
20554: LD_INT 27
20556: ST_TO_ADDR
20557: GO 20636
20559: LD_INT 31
20561: DOUBLE
20562: EQUAL
20563: IFTRUE 20567
20565: GO 20578
20567: POP
// bc_type := b_oil_power ; 32 :
20568: LD_ADDR_OWVAR 42
20572: PUSH
20573: LD_INT 26
20575: ST_TO_ADDR
20576: GO 20636
20578: LD_INT 32
20580: DOUBLE
20581: EQUAL
20582: IFTRUE 20586
20584: GO 20597
20586: POP
// bc_type := b_siberite_power ; 33 :
20587: LD_ADDR_OWVAR 42
20591: PUSH
20592: LD_INT 28
20594: ST_TO_ADDR
20595: GO 20636
20597: LD_INT 33
20599: DOUBLE
20600: EQUAL
20601: IFTRUE 20605
20603: GO 20616
20605: POP
// bc_type := b_oil_mine ; 34 :
20606: LD_ADDR_OWVAR 42
20610: PUSH
20611: LD_INT 29
20613: ST_TO_ADDR
20614: GO 20636
20616: LD_INT 34
20618: DOUBLE
20619: EQUAL
20620: IFTRUE 20624
20622: GO 20635
20624: POP
// bc_type := b_siberite_mine ; end ;
20625: LD_ADDR_OWVAR 42
20629: PUSH
20630: LD_INT 30
20632: ST_TO_ADDR
20633: GO 20636
20635: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20636: LD_ADDR_VAR 0 8
20640: PUSH
20641: LD_VAR 0 5
20645: PPUSH
20646: LD_VAR 0 6
20650: PPUSH
20651: LD_VAR 0 3
20655: PPUSH
20656: CALL_OW 47
20660: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20661: LD_OWVAR 42
20665: PUSH
20666: LD_INT 32
20668: PUSH
20669: LD_INT 33
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: IN
20676: IFFALSE 20692
// PlaceWeaponTurret ( b , weapon ) ;
20678: LD_VAR 0 8
20682: PPUSH
20683: LD_VAR 0 4
20687: PPUSH
20688: CALL_OW 431
// end ;
20692: LD_VAR 0 7
20696: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20697: LD_INT 0
20699: PPUSH
20700: PPUSH
20701: PPUSH
20702: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20703: LD_ADDR_VAR 0 4
20707: PUSH
20708: LD_INT 22
20710: PUSH
20711: LD_OWVAR 2
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 2
20722: PUSH
20723: LD_INT 30
20725: PUSH
20726: LD_INT 0
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 30
20735: PUSH
20736: LD_INT 1
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PPUSH
20752: CALL_OW 69
20756: ST_TO_ADDR
// if not tmp then
20757: LD_VAR 0 4
20761: NOT
20762: IFFALSE 20766
// exit ;
20764: GO 20825
// for i in tmp do
20766: LD_ADDR_VAR 0 2
20770: PUSH
20771: LD_VAR 0 4
20775: PUSH
20776: FOR_IN
20777: IFFALSE 20823
// for j = 1 to 3 do
20779: LD_ADDR_VAR 0 3
20783: PUSH
20784: DOUBLE
20785: LD_INT 1
20787: DEC
20788: ST_TO_ADDR
20789: LD_INT 3
20791: PUSH
20792: FOR_TO
20793: IFFALSE 20819
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20795: LD_VAR 0 2
20799: PPUSH
20800: CALL_OW 274
20804: PPUSH
20805: LD_VAR 0 3
20809: PPUSH
20810: LD_INT 99999
20812: PPUSH
20813: CALL_OW 277
20817: GO 20792
20819: POP
20820: POP
20821: GO 20776
20823: POP
20824: POP
// end ;
20825: LD_VAR 0 1
20829: RET
// export function hHackSetLevel10 ; var i , j ; begin
20830: LD_INT 0
20832: PPUSH
20833: PPUSH
20834: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20835: LD_ADDR_VAR 0 2
20839: PUSH
20840: LD_INT 21
20842: PUSH
20843: LD_INT 1
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PPUSH
20850: CALL_OW 69
20854: PUSH
20855: FOR_IN
20856: IFFALSE 20908
// if IsSelected ( i ) then
20858: LD_VAR 0 2
20862: PPUSH
20863: CALL_OW 306
20867: IFFALSE 20906
// begin for j := 1 to 4 do
20869: LD_ADDR_VAR 0 3
20873: PUSH
20874: DOUBLE
20875: LD_INT 1
20877: DEC
20878: ST_TO_ADDR
20879: LD_INT 4
20881: PUSH
20882: FOR_TO
20883: IFFALSE 20904
// SetSkill ( i , j , 10 ) ;
20885: LD_VAR 0 2
20889: PPUSH
20890: LD_VAR 0 3
20894: PPUSH
20895: LD_INT 10
20897: PPUSH
20898: CALL_OW 237
20902: GO 20882
20904: POP
20905: POP
// end ;
20906: GO 20855
20908: POP
20909: POP
// end ;
20910: LD_VAR 0 1
20914: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20915: LD_INT 0
20917: PPUSH
20918: PPUSH
20919: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20920: LD_ADDR_VAR 0 2
20924: PUSH
20925: LD_INT 22
20927: PUSH
20928: LD_OWVAR 2
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 21
20939: PUSH
20940: LD_INT 1
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PPUSH
20951: CALL_OW 69
20955: PUSH
20956: FOR_IN
20957: IFFALSE 20998
// begin for j := 1 to 4 do
20959: LD_ADDR_VAR 0 3
20963: PUSH
20964: DOUBLE
20965: LD_INT 1
20967: DEC
20968: ST_TO_ADDR
20969: LD_INT 4
20971: PUSH
20972: FOR_TO
20973: IFFALSE 20994
// SetSkill ( i , j , 10 ) ;
20975: LD_VAR 0 2
20979: PPUSH
20980: LD_VAR 0 3
20984: PPUSH
20985: LD_INT 10
20987: PPUSH
20988: CALL_OW 237
20992: GO 20972
20994: POP
20995: POP
// end ;
20996: GO 20956
20998: POP
20999: POP
// end ;
21000: LD_VAR 0 1
21004: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21005: LD_INT 0
21007: PPUSH
// uc_side := your_side ;
21008: LD_ADDR_OWVAR 20
21012: PUSH
21013: LD_OWVAR 2
21017: ST_TO_ADDR
// uc_nation := nation ;
21018: LD_ADDR_OWVAR 21
21022: PUSH
21023: LD_VAR 0 1
21027: ST_TO_ADDR
// InitHc ;
21028: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21032: LD_INT 0
21034: PPUSH
21035: LD_VAR 0 2
21039: PPUSH
21040: LD_VAR 0 3
21044: PPUSH
21045: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21049: LD_VAR 0 4
21053: PPUSH
21054: LD_VAR 0 5
21058: PPUSH
21059: CALL_OW 428
21063: PUSH
21064: LD_INT 0
21066: EQUAL
21067: IFFALSE 21091
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21069: CALL_OW 44
21073: PPUSH
21074: LD_VAR 0 4
21078: PPUSH
21079: LD_VAR 0 5
21083: PPUSH
21084: LD_INT 1
21086: PPUSH
21087: CALL_OW 48
// end ;
21091: LD_VAR 0 6
21095: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21096: LD_INT 0
21098: PPUSH
21099: PPUSH
// uc_side := your_side ;
21100: LD_ADDR_OWVAR 20
21104: PUSH
21105: LD_OWVAR 2
21109: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21110: LD_VAR 0 1
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: LD_INT 2
21120: PUSH
21121: LD_INT 3
21123: PUSH
21124: LD_INT 4
21126: PUSH
21127: LD_INT 5
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: IN
21137: IFFALSE 21149
// uc_nation := nation_american else
21139: LD_ADDR_OWVAR 21
21143: PUSH
21144: LD_INT 1
21146: ST_TO_ADDR
21147: GO 21192
// if chassis in [ 11 , 12 , 13 , 14 ] then
21149: LD_VAR 0 1
21153: PUSH
21154: LD_INT 11
21156: PUSH
21157: LD_INT 12
21159: PUSH
21160: LD_INT 13
21162: PUSH
21163: LD_INT 14
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: IN
21172: IFFALSE 21184
// uc_nation := nation_arabian else
21174: LD_ADDR_OWVAR 21
21178: PUSH
21179: LD_INT 2
21181: ST_TO_ADDR
21182: GO 21192
// uc_nation := nation_russian ;
21184: LD_ADDR_OWVAR 21
21188: PUSH
21189: LD_INT 3
21191: ST_TO_ADDR
// vc_chassis := chassis ;
21192: LD_ADDR_OWVAR 37
21196: PUSH
21197: LD_VAR 0 1
21201: ST_TO_ADDR
// vc_engine := engine ;
21202: LD_ADDR_OWVAR 39
21206: PUSH
21207: LD_VAR 0 2
21211: ST_TO_ADDR
// vc_control := control ;
21212: LD_ADDR_OWVAR 38
21216: PUSH
21217: LD_VAR 0 3
21221: ST_TO_ADDR
// vc_weapon := weapon ;
21222: LD_ADDR_OWVAR 40
21226: PUSH
21227: LD_VAR 0 4
21231: ST_TO_ADDR
// un := CreateVehicle ;
21232: LD_ADDR_VAR 0 8
21236: PUSH
21237: CALL_OW 45
21241: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21242: LD_VAR 0 8
21246: PPUSH
21247: LD_INT 0
21249: PPUSH
21250: LD_INT 5
21252: PPUSH
21253: CALL_OW 12
21257: PPUSH
21258: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21262: LD_VAR 0 8
21266: PPUSH
21267: LD_VAR 0 5
21271: PPUSH
21272: LD_VAR 0 6
21276: PPUSH
21277: LD_INT 1
21279: PPUSH
21280: CALL_OW 48
// end ;
21284: LD_VAR 0 7
21288: RET
// export hInvincible ; every 1 do
21289: GO 21291
21291: DISABLE
// hInvincible := [ ] ;
21292: LD_ADDR_EXP 99
21296: PUSH
21297: EMPTY
21298: ST_TO_ADDR
21299: END
// every 10 do var i ;
21300: GO 21302
21302: DISABLE
21303: LD_INT 0
21305: PPUSH
// begin enable ;
21306: ENABLE
// if not hInvincible then
21307: LD_EXP 99
21311: NOT
21312: IFFALSE 21316
// exit ;
21314: GO 21360
// for i in hInvincible do
21316: LD_ADDR_VAR 0 1
21320: PUSH
21321: LD_EXP 99
21325: PUSH
21326: FOR_IN
21327: IFFALSE 21358
// if GetLives ( i ) < 1000 then
21329: LD_VAR 0 1
21333: PPUSH
21334: CALL_OW 256
21338: PUSH
21339: LD_INT 1000
21341: LESS
21342: IFFALSE 21356
// SetLives ( i , 1000 ) ;
21344: LD_VAR 0 1
21348: PPUSH
21349: LD_INT 1000
21351: PPUSH
21352: CALL_OW 234
21356: GO 21326
21358: POP
21359: POP
// end ;
21360: PPOPN 1
21362: END
// export function hHackInvincible ; var i ; begin
21363: LD_INT 0
21365: PPUSH
21366: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21367: LD_ADDR_VAR 0 2
21371: PUSH
21372: LD_INT 2
21374: PUSH
21375: LD_INT 21
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 21
21387: PUSH
21388: LD_INT 2
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: LIST
21399: PPUSH
21400: CALL_OW 69
21404: PUSH
21405: FOR_IN
21406: IFFALSE 21467
// if IsSelected ( i ) then
21408: LD_VAR 0 2
21412: PPUSH
21413: CALL_OW 306
21417: IFFALSE 21465
// begin if i in hInvincible then
21419: LD_VAR 0 2
21423: PUSH
21424: LD_EXP 99
21428: IN
21429: IFFALSE 21449
// hInvincible := hInvincible diff i else
21431: LD_ADDR_EXP 99
21435: PUSH
21436: LD_EXP 99
21440: PUSH
21441: LD_VAR 0 2
21445: DIFF
21446: ST_TO_ADDR
21447: GO 21465
// hInvincible := hInvincible union i ;
21449: LD_ADDR_EXP 99
21453: PUSH
21454: LD_EXP 99
21458: PUSH
21459: LD_VAR 0 2
21463: UNION
21464: ST_TO_ADDR
// end ;
21465: GO 21405
21467: POP
21468: POP
// end ;
21469: LD_VAR 0 1
21473: RET
// export function hHackInvisible ; var i , j ; begin
21474: LD_INT 0
21476: PPUSH
21477: PPUSH
21478: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21479: LD_ADDR_VAR 0 2
21483: PUSH
21484: LD_INT 21
21486: PUSH
21487: LD_INT 1
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PPUSH
21494: CALL_OW 69
21498: PUSH
21499: FOR_IN
21500: IFFALSE 21524
// if IsSelected ( i ) then
21502: LD_VAR 0 2
21506: PPUSH
21507: CALL_OW 306
21511: IFFALSE 21522
// ComForceInvisible ( i ) ;
21513: LD_VAR 0 2
21517: PPUSH
21518: CALL_OW 496
21522: GO 21499
21524: POP
21525: POP
// end ;
21526: LD_VAR 0 1
21530: RET
// export function hHackChangeYourSide ; begin
21531: LD_INT 0
21533: PPUSH
// if your_side = 8 then
21534: LD_OWVAR 2
21538: PUSH
21539: LD_INT 8
21541: EQUAL
21542: IFFALSE 21554
// your_side := 0 else
21544: LD_ADDR_OWVAR 2
21548: PUSH
21549: LD_INT 0
21551: ST_TO_ADDR
21552: GO 21568
// your_side := your_side + 1 ;
21554: LD_ADDR_OWVAR 2
21558: PUSH
21559: LD_OWVAR 2
21563: PUSH
21564: LD_INT 1
21566: PLUS
21567: ST_TO_ADDR
// end ;
21568: LD_VAR 0 1
21572: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21573: LD_INT 0
21575: PPUSH
21576: PPUSH
21577: PPUSH
// for i in all_units do
21578: LD_ADDR_VAR 0 2
21582: PUSH
21583: LD_OWVAR 3
21587: PUSH
21588: FOR_IN
21589: IFFALSE 21667
// if IsSelected ( i ) then
21591: LD_VAR 0 2
21595: PPUSH
21596: CALL_OW 306
21600: IFFALSE 21665
// begin j := GetSide ( i ) ;
21602: LD_ADDR_VAR 0 3
21606: PUSH
21607: LD_VAR 0 2
21611: PPUSH
21612: CALL_OW 255
21616: ST_TO_ADDR
// if j = 8 then
21617: LD_VAR 0 3
21621: PUSH
21622: LD_INT 8
21624: EQUAL
21625: IFFALSE 21637
// j := 0 else
21627: LD_ADDR_VAR 0 3
21631: PUSH
21632: LD_INT 0
21634: ST_TO_ADDR
21635: GO 21651
// j := j + 1 ;
21637: LD_ADDR_VAR 0 3
21641: PUSH
21642: LD_VAR 0 3
21646: PUSH
21647: LD_INT 1
21649: PLUS
21650: ST_TO_ADDR
// SetSide ( i , j ) ;
21651: LD_VAR 0 2
21655: PPUSH
21656: LD_VAR 0 3
21660: PPUSH
21661: CALL_OW 235
// end ;
21665: GO 21588
21667: POP
21668: POP
// end ;
21669: LD_VAR 0 1
21673: RET
// export function hHackFog ; begin
21674: LD_INT 0
21676: PPUSH
// FogOff ( true ) ;
21677: LD_INT 1
21679: PPUSH
21680: CALL_OW 344
// end ;
21684: LD_VAR 0 1
21688: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21689: LD_INT 0
21691: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21692: LD_VAR 0 1
21696: PPUSH
21697: LD_VAR 0 2
21701: PPUSH
21702: LD_VAR 0 3
21706: PPUSH
21707: LD_INT 1
21709: PPUSH
21710: LD_INT 1
21712: PPUSH
21713: CALL_OW 483
// CenterOnXY ( x , y ) ;
21717: LD_VAR 0 2
21721: PPUSH
21722: LD_VAR 0 3
21726: PPUSH
21727: CALL_OW 84
// end ;
21731: LD_VAR 0 4
21735: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21736: LD_INT 0
21738: PPUSH
21739: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21740: LD_VAR 0 1
21744: NOT
21745: PUSH
21746: LD_VAR 0 2
21750: PPUSH
21751: LD_VAR 0 3
21755: PPUSH
21756: CALL_OW 488
21760: NOT
21761: OR
21762: PUSH
21763: LD_VAR 0 1
21767: PPUSH
21768: CALL_OW 266
21772: PUSH
21773: LD_INT 3
21775: NONEQUAL
21776: PUSH
21777: LD_VAR 0 1
21781: PPUSH
21782: CALL_OW 247
21786: PUSH
21787: LD_INT 1
21789: EQUAL
21790: NOT
21791: AND
21792: OR
21793: IFFALSE 21797
// exit ;
21795: GO 21946
// if GetType ( factory ) = unit_human then
21797: LD_VAR 0 1
21801: PPUSH
21802: CALL_OW 247
21806: PUSH
21807: LD_INT 1
21809: EQUAL
21810: IFFALSE 21827
// factory := IsInUnit ( factory ) ;
21812: LD_ADDR_VAR 0 1
21816: PUSH
21817: LD_VAR 0 1
21821: PPUSH
21822: CALL_OW 310
21826: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21827: LD_VAR 0 1
21831: PPUSH
21832: CALL_OW 266
21836: PUSH
21837: LD_INT 3
21839: NONEQUAL
21840: IFFALSE 21844
// exit ;
21842: GO 21946
// if HexInfo ( x , y ) = factory then
21844: LD_VAR 0 2
21848: PPUSH
21849: LD_VAR 0 3
21853: PPUSH
21854: CALL_OW 428
21858: PUSH
21859: LD_VAR 0 1
21863: EQUAL
21864: IFFALSE 21891
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21866: LD_ADDR_EXP 100
21870: PUSH
21871: LD_EXP 100
21875: PPUSH
21876: LD_VAR 0 1
21880: PPUSH
21881: LD_INT 0
21883: PPUSH
21884: CALL_OW 1
21888: ST_TO_ADDR
21889: GO 21942
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21891: LD_ADDR_EXP 100
21895: PUSH
21896: LD_EXP 100
21900: PPUSH
21901: LD_VAR 0 1
21905: PPUSH
21906: LD_VAR 0 1
21910: PPUSH
21911: CALL_OW 255
21915: PUSH
21916: LD_VAR 0 1
21920: PUSH
21921: LD_VAR 0 2
21925: PUSH
21926: LD_VAR 0 3
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: PPUSH
21937: CALL_OW 1
21941: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21942: CALL 21951 0 0
// end ;
21946: LD_VAR 0 4
21950: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21951: LD_INT 0
21953: PPUSH
21954: PPUSH
21955: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21956: LD_STRING resetFactoryWaypoint();
21958: PPUSH
21959: CALL_OW 559
// if factoryWaypoints then
21963: LD_EXP 100
21967: IFFALSE 22093
// begin list := PrepareArray ( factoryWaypoints ) ;
21969: LD_ADDR_VAR 0 3
21973: PUSH
21974: LD_EXP 100
21978: PPUSH
21979: CALL 68525 0 1
21983: ST_TO_ADDR
// for i := 1 to list do
21984: LD_ADDR_VAR 0 2
21988: PUSH
21989: DOUBLE
21990: LD_INT 1
21992: DEC
21993: ST_TO_ADDR
21994: LD_VAR 0 3
21998: PUSH
21999: FOR_TO
22000: IFFALSE 22091
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22002: LD_STRING setFactoryWaypointXY(
22004: PUSH
22005: LD_VAR 0 3
22009: PUSH
22010: LD_VAR 0 2
22014: ARRAY
22015: PUSH
22016: LD_INT 1
22018: ARRAY
22019: STR
22020: PUSH
22021: LD_STRING ,
22023: STR
22024: PUSH
22025: LD_VAR 0 3
22029: PUSH
22030: LD_VAR 0 2
22034: ARRAY
22035: PUSH
22036: LD_INT 2
22038: ARRAY
22039: STR
22040: PUSH
22041: LD_STRING ,
22043: STR
22044: PUSH
22045: LD_VAR 0 3
22049: PUSH
22050: LD_VAR 0 2
22054: ARRAY
22055: PUSH
22056: LD_INT 3
22058: ARRAY
22059: STR
22060: PUSH
22061: LD_STRING ,
22063: STR
22064: PUSH
22065: LD_VAR 0 3
22069: PUSH
22070: LD_VAR 0 2
22074: ARRAY
22075: PUSH
22076: LD_INT 4
22078: ARRAY
22079: STR
22080: PUSH
22081: LD_STRING )
22083: STR
22084: PPUSH
22085: CALL_OW 559
22089: GO 21999
22091: POP
22092: POP
// end ; end ;
22093: LD_VAR 0 1
22097: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22098: LD_INT 0
22100: PPUSH
// if HexInfo ( x , y ) = warehouse then
22101: LD_VAR 0 2
22105: PPUSH
22106: LD_VAR 0 3
22110: PPUSH
22111: CALL_OW 428
22115: PUSH
22116: LD_VAR 0 1
22120: EQUAL
22121: IFFALSE 22148
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22123: LD_ADDR_EXP 101
22127: PUSH
22128: LD_EXP 101
22132: PPUSH
22133: LD_VAR 0 1
22137: PPUSH
22138: LD_INT 0
22140: PPUSH
22141: CALL_OW 1
22145: ST_TO_ADDR
22146: GO 22199
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22148: LD_ADDR_EXP 101
22152: PUSH
22153: LD_EXP 101
22157: PPUSH
22158: LD_VAR 0 1
22162: PPUSH
22163: LD_VAR 0 1
22167: PPUSH
22168: CALL_OW 255
22172: PUSH
22173: LD_VAR 0 1
22177: PUSH
22178: LD_VAR 0 2
22182: PUSH
22183: LD_VAR 0 3
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: PPUSH
22194: CALL_OW 1
22198: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22199: CALL 22208 0 0
// end ;
22203: LD_VAR 0 4
22207: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22208: LD_INT 0
22210: PPUSH
22211: PPUSH
22212: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22213: LD_STRING resetWarehouseGatheringPoints();
22215: PPUSH
22216: CALL_OW 559
// if warehouseGatheringPoints then
22220: LD_EXP 101
22224: IFFALSE 22350
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22226: LD_ADDR_VAR 0 3
22230: PUSH
22231: LD_EXP 101
22235: PPUSH
22236: CALL 68525 0 1
22240: ST_TO_ADDR
// for i := 1 to list do
22241: LD_ADDR_VAR 0 2
22245: PUSH
22246: DOUBLE
22247: LD_INT 1
22249: DEC
22250: ST_TO_ADDR
22251: LD_VAR 0 3
22255: PUSH
22256: FOR_TO
22257: IFFALSE 22348
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22259: LD_STRING setWarehouseGatheringPointXY(
22261: PUSH
22262: LD_VAR 0 3
22266: PUSH
22267: LD_VAR 0 2
22271: ARRAY
22272: PUSH
22273: LD_INT 1
22275: ARRAY
22276: STR
22277: PUSH
22278: LD_STRING ,
22280: STR
22281: PUSH
22282: LD_VAR 0 3
22286: PUSH
22287: LD_VAR 0 2
22291: ARRAY
22292: PUSH
22293: LD_INT 2
22295: ARRAY
22296: STR
22297: PUSH
22298: LD_STRING ,
22300: STR
22301: PUSH
22302: LD_VAR 0 3
22306: PUSH
22307: LD_VAR 0 2
22311: ARRAY
22312: PUSH
22313: LD_INT 3
22315: ARRAY
22316: STR
22317: PUSH
22318: LD_STRING ,
22320: STR
22321: PUSH
22322: LD_VAR 0 3
22326: PUSH
22327: LD_VAR 0 2
22331: ARRAY
22332: PUSH
22333: LD_INT 4
22335: ARRAY
22336: STR
22337: PUSH
22338: LD_STRING )
22340: STR
22341: PPUSH
22342: CALL_OW 559
22346: GO 22256
22348: POP
22349: POP
// end ; end ;
22350: LD_VAR 0 1
22354: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22355: LD_EXP 101
22359: IFFALSE 23046
22361: GO 22363
22363: DISABLE
22364: LD_INT 0
22366: PPUSH
22367: PPUSH
22368: PPUSH
22369: PPUSH
22370: PPUSH
22371: PPUSH
22372: PPUSH
22373: PPUSH
22374: PPUSH
// begin enable ;
22375: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22376: LD_ADDR_VAR 0 3
22380: PUSH
22381: LD_EXP 101
22385: PPUSH
22386: CALL 68525 0 1
22390: ST_TO_ADDR
// if not list then
22391: LD_VAR 0 3
22395: NOT
22396: IFFALSE 22400
// exit ;
22398: GO 23046
// for i := 1 to list do
22400: LD_ADDR_VAR 0 1
22404: PUSH
22405: DOUBLE
22406: LD_INT 1
22408: DEC
22409: ST_TO_ADDR
22410: LD_VAR 0 3
22414: PUSH
22415: FOR_TO
22416: IFFALSE 23044
// begin depot := list [ i ] [ 2 ] ;
22418: LD_ADDR_VAR 0 8
22422: PUSH
22423: LD_VAR 0 3
22427: PUSH
22428: LD_VAR 0 1
22432: ARRAY
22433: PUSH
22434: LD_INT 2
22436: ARRAY
22437: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22438: LD_ADDR_VAR 0 5
22442: PUSH
22443: LD_VAR 0 3
22447: PUSH
22448: LD_VAR 0 1
22452: ARRAY
22453: PUSH
22454: LD_INT 1
22456: ARRAY
22457: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22458: LD_VAR 0 8
22462: PPUSH
22463: CALL_OW 301
22467: PUSH
22468: LD_VAR 0 5
22472: PUSH
22473: LD_VAR 0 8
22477: PPUSH
22478: CALL_OW 255
22482: NONEQUAL
22483: OR
22484: IFFALSE 22513
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22486: LD_ADDR_EXP 101
22490: PUSH
22491: LD_EXP 101
22495: PPUSH
22496: LD_VAR 0 8
22500: PPUSH
22501: LD_INT 0
22503: PPUSH
22504: CALL_OW 1
22508: ST_TO_ADDR
// exit ;
22509: POP
22510: POP
22511: GO 23046
// end ; x := list [ i ] [ 3 ] ;
22513: LD_ADDR_VAR 0 6
22517: PUSH
22518: LD_VAR 0 3
22522: PUSH
22523: LD_VAR 0 1
22527: ARRAY
22528: PUSH
22529: LD_INT 3
22531: ARRAY
22532: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22533: LD_ADDR_VAR 0 7
22537: PUSH
22538: LD_VAR 0 3
22542: PUSH
22543: LD_VAR 0 1
22547: ARRAY
22548: PUSH
22549: LD_INT 4
22551: ARRAY
22552: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22553: LD_ADDR_VAR 0 9
22557: PUSH
22558: LD_VAR 0 6
22562: PPUSH
22563: LD_VAR 0 7
22567: PPUSH
22568: LD_INT 16
22570: PPUSH
22571: CALL 67109 0 3
22575: ST_TO_ADDR
// if not cratesNearbyPoint then
22576: LD_VAR 0 9
22580: NOT
22581: IFFALSE 22587
// exit ;
22583: POP
22584: POP
22585: GO 23046
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22587: LD_ADDR_VAR 0 4
22591: PUSH
22592: LD_INT 22
22594: PUSH
22595: LD_VAR 0 5
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 3
22606: PUSH
22607: LD_INT 60
22609: PUSH
22610: EMPTY
22611: LIST
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 91
22619: PUSH
22620: LD_VAR 0 8
22624: PUSH
22625: LD_INT 6
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 2
22635: PUSH
22636: LD_INT 25
22638: PUSH
22639: LD_INT 2
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 25
22648: PUSH
22649: LD_INT 16
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: LIST
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: PPUSH
22667: CALL_OW 69
22671: PUSH
22672: LD_VAR 0 8
22676: PPUSH
22677: CALL_OW 313
22681: PPUSH
22682: LD_INT 3
22684: PUSH
22685: LD_INT 60
22687: PUSH
22688: EMPTY
22689: LIST
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 2
22697: PUSH
22698: LD_INT 25
22700: PUSH
22701: LD_INT 2
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 25
22710: PUSH
22711: LD_INT 16
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: LIST
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PPUSH
22727: CALL_OW 72
22731: UNION
22732: ST_TO_ADDR
// if tmp then
22733: LD_VAR 0 4
22737: IFFALSE 22817
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22739: LD_ADDR_VAR 0 4
22743: PUSH
22744: LD_VAR 0 4
22748: PPUSH
22749: LD_INT 3
22751: PPUSH
22752: CALL 65076 0 2
22756: ST_TO_ADDR
// for j in tmp do
22757: LD_ADDR_VAR 0 2
22761: PUSH
22762: LD_VAR 0 4
22766: PUSH
22767: FOR_IN
22768: IFFALSE 22811
// begin if IsInUnit ( j ) then
22770: LD_VAR 0 2
22774: PPUSH
22775: CALL_OW 310
22779: IFFALSE 22790
// ComExit ( j ) ;
22781: LD_VAR 0 2
22785: PPUSH
22786: CALL 65159 0 1
// AddComCollect ( j , x , y ) ;
22790: LD_VAR 0 2
22794: PPUSH
22795: LD_VAR 0 6
22799: PPUSH
22800: LD_VAR 0 7
22804: PPUSH
22805: CALL_OW 177
// end ;
22809: GO 22767
22811: POP
22812: POP
// exit ;
22813: POP
22814: POP
22815: GO 23046
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22817: LD_ADDR_VAR 0 4
22821: PUSH
22822: LD_INT 22
22824: PUSH
22825: LD_VAR 0 5
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 91
22836: PUSH
22837: LD_VAR 0 8
22841: PUSH
22842: LD_INT 8
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 2
22852: PUSH
22853: LD_INT 34
22855: PUSH
22856: LD_INT 12
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 34
22865: PUSH
22866: LD_INT 51
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 34
22875: PUSH
22876: LD_INT 32
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 34
22885: PUSH
22886: LD_EXP 25
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: LIST
22906: PPUSH
22907: CALL_OW 69
22911: ST_TO_ADDR
// if tmp then
22912: LD_VAR 0 4
22916: IFFALSE 23042
// begin for j in tmp do
22918: LD_ADDR_VAR 0 2
22922: PUSH
22923: LD_VAR 0 4
22927: PUSH
22928: FOR_IN
22929: IFFALSE 23040
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22931: LD_VAR 0 2
22935: PPUSH
22936: CALL_OW 262
22940: PUSH
22941: LD_INT 3
22943: EQUAL
22944: PUSH
22945: LD_VAR 0 2
22949: PPUSH
22950: CALL_OW 261
22954: PUSH
22955: LD_INT 20
22957: GREATER
22958: OR
22959: PUSH
22960: LD_VAR 0 2
22964: PPUSH
22965: CALL_OW 314
22969: NOT
22970: AND
22971: PUSH
22972: LD_VAR 0 2
22976: PPUSH
22977: CALL_OW 263
22981: PUSH
22982: LD_INT 1
22984: NONEQUAL
22985: PUSH
22986: LD_VAR 0 2
22990: PPUSH
22991: CALL_OW 311
22995: OR
22996: AND
22997: IFFALSE 23038
// begin ComCollect ( j , x , y ) ;
22999: LD_VAR 0 2
23003: PPUSH
23004: LD_VAR 0 6
23008: PPUSH
23009: LD_VAR 0 7
23013: PPUSH
23014: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23018: LD_VAR 0 2
23022: PPUSH
23023: LD_VAR 0 8
23027: PPUSH
23028: CALL_OW 172
// exit ;
23032: POP
23033: POP
23034: POP
23035: POP
23036: GO 23046
// end ;
23038: GO 22928
23040: POP
23041: POP
// end ; end ;
23042: GO 22415
23044: POP
23045: POP
// end ; end_of_file
23046: PPOPN 9
23048: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23049: LD_INT 0
23051: PPUSH
23052: PPUSH
23053: PPUSH
23054: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23055: LD_VAR 0 1
23059: PPUSH
23060: CALL_OW 264
23064: PUSH
23065: LD_EXP 28
23069: EQUAL
23070: IFFALSE 23142
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23072: LD_INT 68
23074: PPUSH
23075: LD_VAR 0 1
23079: PPUSH
23080: CALL_OW 255
23084: PPUSH
23085: CALL_OW 321
23089: PUSH
23090: LD_INT 2
23092: EQUAL
23093: IFFALSE 23105
// eff := 70 else
23095: LD_ADDR_VAR 0 4
23099: PUSH
23100: LD_INT 70
23102: ST_TO_ADDR
23103: GO 23113
// eff := 30 ;
23105: LD_ADDR_VAR 0 4
23109: PUSH
23110: LD_INT 30
23112: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23113: LD_VAR 0 1
23117: PPUSH
23118: CALL_OW 250
23122: PPUSH
23123: LD_VAR 0 1
23127: PPUSH
23128: CALL_OW 251
23132: PPUSH
23133: LD_VAR 0 4
23137: PPUSH
23138: CALL_OW 495
// end ; end ;
23142: LD_VAR 0 2
23146: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23147: LD_INT 0
23149: PPUSH
// end ;
23150: LD_VAR 0 4
23154: RET
// export function SOS_Command ( cmd ) ; begin
23155: LD_INT 0
23157: PPUSH
// end ;
23158: LD_VAR 0 2
23162: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23163: LD_INT 0
23165: PPUSH
// end ;
23166: LD_VAR 0 6
23170: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
23171: LD_INT 0
23173: PPUSH
23174: PPUSH
// if not vehicle or not factory then
23175: LD_VAR 0 1
23179: NOT
23180: PUSH
23181: LD_VAR 0 2
23185: NOT
23186: OR
23187: IFFALSE 23191
// exit ;
23189: GO 23422
// if factoryWaypoints >= factory then
23191: LD_EXP 100
23195: PUSH
23196: LD_VAR 0 2
23200: GREATEREQUAL
23201: IFFALSE 23422
// if factoryWaypoints [ factory ] then
23203: LD_EXP 100
23207: PUSH
23208: LD_VAR 0 2
23212: ARRAY
23213: IFFALSE 23422
// begin if GetControl ( vehicle ) = control_manual then
23215: LD_VAR 0 1
23219: PPUSH
23220: CALL_OW 263
23224: PUSH
23225: LD_INT 1
23227: EQUAL
23228: IFFALSE 23309
// begin driver := IsDrivenBy ( vehicle ) ;
23230: LD_ADDR_VAR 0 4
23234: PUSH
23235: LD_VAR 0 1
23239: PPUSH
23240: CALL_OW 311
23244: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23245: LD_VAR 0 4
23249: PPUSH
23250: LD_EXP 100
23254: PUSH
23255: LD_VAR 0 2
23259: ARRAY
23260: PUSH
23261: LD_INT 3
23263: ARRAY
23264: PPUSH
23265: LD_EXP 100
23269: PUSH
23270: LD_VAR 0 2
23274: ARRAY
23275: PUSH
23276: LD_INT 4
23278: ARRAY
23279: PPUSH
23280: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23284: LD_VAR 0 4
23288: PPUSH
23289: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23293: LD_VAR 0 4
23297: PPUSH
23298: LD_VAR 0 2
23302: PPUSH
23303: CALL_OW 180
// end else
23307: GO 23422
// if GetControl ( vehicle ) = control_remote then
23309: LD_VAR 0 1
23313: PPUSH
23314: CALL_OW 263
23318: PUSH
23319: LD_INT 2
23321: EQUAL
23322: IFFALSE 23383
// begin wait ( 0 0$2 ) ;
23324: LD_INT 70
23326: PPUSH
23327: CALL_OW 67
// if Connect ( vehicle ) then
23331: LD_VAR 0 1
23335: PPUSH
23336: CALL 35470 0 1
23340: IFFALSE 23381
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23342: LD_VAR 0 1
23346: PPUSH
23347: LD_EXP 100
23351: PUSH
23352: LD_VAR 0 2
23356: ARRAY
23357: PUSH
23358: LD_INT 3
23360: ARRAY
23361: PPUSH
23362: LD_EXP 100
23366: PUSH
23367: LD_VAR 0 2
23371: ARRAY
23372: PUSH
23373: LD_INT 4
23375: ARRAY
23376: PPUSH
23377: CALL_OW 171
// end else
23381: GO 23422
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23383: LD_VAR 0 1
23387: PPUSH
23388: LD_EXP 100
23392: PUSH
23393: LD_VAR 0 2
23397: ARRAY
23398: PUSH
23399: LD_INT 3
23401: ARRAY
23402: PPUSH
23403: LD_EXP 100
23407: PUSH
23408: LD_VAR 0 2
23412: ARRAY
23413: PUSH
23414: LD_INT 4
23416: ARRAY
23417: PPUSH
23418: CALL_OW 171
// end ; end ;
23422: LD_VAR 0 3
23426: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23427: LD_INT 0
23429: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23430: LD_VAR 0 1
23434: PUSH
23435: LD_INT 250
23437: EQUAL
23438: PUSH
23439: LD_VAR 0 2
23443: PPUSH
23444: CALL_OW 264
23448: PUSH
23449: LD_EXP 31
23453: EQUAL
23454: AND
23455: IFFALSE 23476
// MinerPlaceMine ( unit , x , y ) ;
23457: LD_VAR 0 2
23461: PPUSH
23462: LD_VAR 0 4
23466: PPUSH
23467: LD_VAR 0 5
23471: PPUSH
23472: CALL 25875 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23476: LD_VAR 0 1
23480: PUSH
23481: LD_INT 251
23483: EQUAL
23484: PUSH
23485: LD_VAR 0 2
23489: PPUSH
23490: CALL_OW 264
23494: PUSH
23495: LD_EXP 31
23499: EQUAL
23500: AND
23501: IFFALSE 23522
// MinerDetonateMine ( unit , x , y ) ;
23503: LD_VAR 0 2
23507: PPUSH
23508: LD_VAR 0 4
23512: PPUSH
23513: LD_VAR 0 5
23517: PPUSH
23518: CALL 26152 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23522: LD_VAR 0 1
23526: PUSH
23527: LD_INT 252
23529: EQUAL
23530: PUSH
23531: LD_VAR 0 2
23535: PPUSH
23536: CALL_OW 264
23540: PUSH
23541: LD_EXP 31
23545: EQUAL
23546: AND
23547: IFFALSE 23568
// MinerCreateMinefield ( unit , x , y ) ;
23549: LD_VAR 0 2
23553: PPUSH
23554: LD_VAR 0 4
23558: PPUSH
23559: LD_VAR 0 5
23563: PPUSH
23564: CALL 26569 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23568: LD_VAR 0 1
23572: PUSH
23573: LD_INT 253
23575: EQUAL
23576: PUSH
23577: LD_VAR 0 2
23581: PPUSH
23582: CALL_OW 257
23586: PUSH
23587: LD_INT 5
23589: EQUAL
23590: AND
23591: IFFALSE 23612
// ComBinocular ( unit , x , y ) ;
23593: LD_VAR 0 2
23597: PPUSH
23598: LD_VAR 0 4
23602: PPUSH
23603: LD_VAR 0 5
23607: PPUSH
23608: CALL 26940 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23612: LD_VAR 0 1
23616: PUSH
23617: LD_INT 254
23619: EQUAL
23620: PUSH
23621: LD_VAR 0 2
23625: PPUSH
23626: CALL_OW 264
23630: PUSH
23631: LD_EXP 26
23635: EQUAL
23636: AND
23637: PUSH
23638: LD_VAR 0 3
23642: PPUSH
23643: CALL_OW 263
23647: PUSH
23648: LD_INT 3
23650: EQUAL
23651: AND
23652: IFFALSE 23668
// HackDestroyVehicle ( unit , selectedUnit ) ;
23654: LD_VAR 0 2
23658: PPUSH
23659: LD_VAR 0 3
23663: PPUSH
23664: CALL 25235 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23668: LD_VAR 0 1
23672: PUSH
23673: LD_INT 255
23675: EQUAL
23676: PUSH
23677: LD_VAR 0 2
23681: PPUSH
23682: CALL_OW 264
23686: PUSH
23687: LD_INT 14
23689: PUSH
23690: LD_INT 53
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: IN
23697: AND
23698: PUSH
23699: LD_VAR 0 4
23703: PPUSH
23704: LD_VAR 0 5
23708: PPUSH
23709: CALL_OW 488
23713: AND
23714: IFFALSE 23738
// CutTreeXYR ( unit , x , y , 12 ) ;
23716: LD_VAR 0 2
23720: PPUSH
23721: LD_VAR 0 4
23725: PPUSH
23726: LD_VAR 0 5
23730: PPUSH
23731: LD_INT 12
23733: PPUSH
23734: CALL 23801 0 4
// if cmd = 256 then
23738: LD_VAR 0 1
23742: PUSH
23743: LD_INT 256
23745: EQUAL
23746: IFFALSE 23767
// SetFactoryWaypoint ( unit , x , y ) ;
23748: LD_VAR 0 2
23752: PPUSH
23753: LD_VAR 0 4
23757: PPUSH
23758: LD_VAR 0 5
23762: PPUSH
23763: CALL 21736 0 3
// if cmd = 257 then
23767: LD_VAR 0 1
23771: PUSH
23772: LD_INT 257
23774: EQUAL
23775: IFFALSE 23796
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23777: LD_VAR 0 2
23781: PPUSH
23782: LD_VAR 0 4
23786: PPUSH
23787: LD_VAR 0 5
23791: PPUSH
23792: CALL 22098 0 3
// end ;
23796: LD_VAR 0 6
23800: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23801: LD_INT 0
23803: PPUSH
23804: PPUSH
23805: PPUSH
23806: PPUSH
23807: PPUSH
23808: PPUSH
23809: PPUSH
23810: PPUSH
23811: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23812: LD_VAR 0 1
23816: NOT
23817: PUSH
23818: LD_VAR 0 2
23822: PPUSH
23823: LD_VAR 0 3
23827: PPUSH
23828: CALL_OW 488
23832: NOT
23833: OR
23834: PUSH
23835: LD_VAR 0 4
23839: NOT
23840: OR
23841: IFFALSE 23845
// exit ;
23843: GO 24185
// list := [ ] ;
23845: LD_ADDR_VAR 0 13
23849: PUSH
23850: EMPTY
23851: ST_TO_ADDR
// if x - r < 0 then
23852: LD_VAR 0 2
23856: PUSH
23857: LD_VAR 0 4
23861: MINUS
23862: PUSH
23863: LD_INT 0
23865: LESS
23866: IFFALSE 23878
// min_x := 0 else
23868: LD_ADDR_VAR 0 7
23872: PUSH
23873: LD_INT 0
23875: ST_TO_ADDR
23876: GO 23894
// min_x := x - r ;
23878: LD_ADDR_VAR 0 7
23882: PUSH
23883: LD_VAR 0 2
23887: PUSH
23888: LD_VAR 0 4
23892: MINUS
23893: ST_TO_ADDR
// if y - r < 0 then
23894: LD_VAR 0 3
23898: PUSH
23899: LD_VAR 0 4
23903: MINUS
23904: PUSH
23905: LD_INT 0
23907: LESS
23908: IFFALSE 23920
// min_y := 0 else
23910: LD_ADDR_VAR 0 8
23914: PUSH
23915: LD_INT 0
23917: ST_TO_ADDR
23918: GO 23936
// min_y := y - r ;
23920: LD_ADDR_VAR 0 8
23924: PUSH
23925: LD_VAR 0 3
23929: PUSH
23930: LD_VAR 0 4
23934: MINUS
23935: ST_TO_ADDR
// max_x := x + r ;
23936: LD_ADDR_VAR 0 9
23940: PUSH
23941: LD_VAR 0 2
23945: PUSH
23946: LD_VAR 0 4
23950: PLUS
23951: ST_TO_ADDR
// max_y := y + r ;
23952: LD_ADDR_VAR 0 10
23956: PUSH
23957: LD_VAR 0 3
23961: PUSH
23962: LD_VAR 0 4
23966: PLUS
23967: ST_TO_ADDR
// for _x = min_x to max_x do
23968: LD_ADDR_VAR 0 11
23972: PUSH
23973: DOUBLE
23974: LD_VAR 0 7
23978: DEC
23979: ST_TO_ADDR
23980: LD_VAR 0 9
23984: PUSH
23985: FOR_TO
23986: IFFALSE 24103
// for _y = min_y to max_y do
23988: LD_ADDR_VAR 0 12
23992: PUSH
23993: DOUBLE
23994: LD_VAR 0 8
23998: DEC
23999: ST_TO_ADDR
24000: LD_VAR 0 10
24004: PUSH
24005: FOR_TO
24006: IFFALSE 24099
// begin if not ValidHex ( _x , _y ) then
24008: LD_VAR 0 11
24012: PPUSH
24013: LD_VAR 0 12
24017: PPUSH
24018: CALL_OW 488
24022: NOT
24023: IFFALSE 24027
// continue ;
24025: GO 24005
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24027: LD_VAR 0 11
24031: PPUSH
24032: LD_VAR 0 12
24036: PPUSH
24037: CALL_OW 351
24041: PUSH
24042: LD_VAR 0 11
24046: PPUSH
24047: LD_VAR 0 12
24051: PPUSH
24052: CALL_OW 554
24056: AND
24057: IFFALSE 24097
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24059: LD_ADDR_VAR 0 13
24063: PUSH
24064: LD_VAR 0 13
24068: PPUSH
24069: LD_VAR 0 13
24073: PUSH
24074: LD_INT 1
24076: PLUS
24077: PPUSH
24078: LD_VAR 0 11
24082: PUSH
24083: LD_VAR 0 12
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PPUSH
24092: CALL_OW 2
24096: ST_TO_ADDR
// end ;
24097: GO 24005
24099: POP
24100: POP
24101: GO 23985
24103: POP
24104: POP
// if not list then
24105: LD_VAR 0 13
24109: NOT
24110: IFFALSE 24114
// exit ;
24112: GO 24185
// for i in list do
24114: LD_ADDR_VAR 0 6
24118: PUSH
24119: LD_VAR 0 13
24123: PUSH
24124: FOR_IN
24125: IFFALSE 24183
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24127: LD_VAR 0 1
24131: PPUSH
24132: LD_STRING M
24134: PUSH
24135: LD_VAR 0 6
24139: PUSH
24140: LD_INT 1
24142: ARRAY
24143: PUSH
24144: LD_VAR 0 6
24148: PUSH
24149: LD_INT 2
24151: ARRAY
24152: PUSH
24153: LD_INT 0
24155: PUSH
24156: LD_INT 0
24158: PUSH
24159: LD_INT 0
24161: PUSH
24162: LD_INT 0
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: PUSH
24174: EMPTY
24175: LIST
24176: PPUSH
24177: CALL_OW 447
24181: GO 24124
24183: POP
24184: POP
// end ;
24185: LD_VAR 0 5
24189: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24190: LD_EXP 103
24194: NOT
24195: IFFALSE 24245
24197: GO 24199
24199: DISABLE
// begin initHack := true ;
24200: LD_ADDR_EXP 103
24204: PUSH
24205: LD_INT 1
24207: ST_TO_ADDR
// hackTanks := [ ] ;
24208: LD_ADDR_EXP 104
24212: PUSH
24213: EMPTY
24214: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24215: LD_ADDR_EXP 105
24219: PUSH
24220: EMPTY
24221: ST_TO_ADDR
// hackLimit := 3 ;
24222: LD_ADDR_EXP 106
24226: PUSH
24227: LD_INT 3
24229: ST_TO_ADDR
// hackDist := 12 ;
24230: LD_ADDR_EXP 107
24234: PUSH
24235: LD_INT 12
24237: ST_TO_ADDR
// hackCounter := [ ] ;
24238: LD_ADDR_EXP 108
24242: PUSH
24243: EMPTY
24244: ST_TO_ADDR
// end ;
24245: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24246: LD_EXP 103
24250: PUSH
24251: LD_INT 34
24253: PUSH
24254: LD_EXP 26
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PPUSH
24263: CALL_OW 69
24267: AND
24268: IFFALSE 24523
24270: GO 24272
24272: DISABLE
24273: LD_INT 0
24275: PPUSH
24276: PPUSH
// begin enable ;
24277: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24278: LD_ADDR_VAR 0 1
24282: PUSH
24283: LD_INT 34
24285: PUSH
24286: LD_EXP 26
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PPUSH
24295: CALL_OW 69
24299: PUSH
24300: FOR_IN
24301: IFFALSE 24521
// begin if not i in hackTanks then
24303: LD_VAR 0 1
24307: PUSH
24308: LD_EXP 104
24312: IN
24313: NOT
24314: IFFALSE 24397
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24316: LD_ADDR_EXP 104
24320: PUSH
24321: LD_EXP 104
24325: PPUSH
24326: LD_EXP 104
24330: PUSH
24331: LD_INT 1
24333: PLUS
24334: PPUSH
24335: LD_VAR 0 1
24339: PPUSH
24340: CALL_OW 1
24344: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24345: LD_ADDR_EXP 105
24349: PUSH
24350: LD_EXP 105
24354: PPUSH
24355: LD_EXP 105
24359: PUSH
24360: LD_INT 1
24362: PLUS
24363: PPUSH
24364: EMPTY
24365: PPUSH
24366: CALL_OW 1
24370: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24371: LD_ADDR_EXP 108
24375: PUSH
24376: LD_EXP 108
24380: PPUSH
24381: LD_EXP 108
24385: PUSH
24386: LD_INT 1
24388: PLUS
24389: PPUSH
24390: EMPTY
24391: PPUSH
24392: CALL_OW 1
24396: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24397: LD_VAR 0 1
24401: PPUSH
24402: CALL_OW 302
24406: NOT
24407: IFFALSE 24420
// begin HackUnlinkAll ( i ) ;
24409: LD_VAR 0 1
24413: PPUSH
24414: CALL 24526 0 1
// continue ;
24418: GO 24300
// end ; HackCheckCapturedStatus ( i ) ;
24420: LD_VAR 0 1
24424: PPUSH
24425: CALL 24969 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24429: LD_ADDR_VAR 0 2
24433: PUSH
24434: LD_INT 81
24436: PUSH
24437: LD_VAR 0 1
24441: PPUSH
24442: CALL_OW 255
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 33
24453: PUSH
24454: LD_INT 3
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 91
24463: PUSH
24464: LD_VAR 0 1
24468: PUSH
24469: LD_EXP 107
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 50
24481: PUSH
24482: EMPTY
24483: LIST
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: PPUSH
24491: CALL_OW 69
24495: ST_TO_ADDR
// if not tmp then
24496: LD_VAR 0 2
24500: NOT
24501: IFFALSE 24505
// continue ;
24503: GO 24300
// HackLink ( i , tmp ) ;
24505: LD_VAR 0 1
24509: PPUSH
24510: LD_VAR 0 2
24514: PPUSH
24515: CALL 24662 0 2
// end ;
24519: GO 24300
24521: POP
24522: POP
// end ;
24523: PPOPN 2
24525: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24526: LD_INT 0
24528: PPUSH
24529: PPUSH
24530: PPUSH
// if not hack in hackTanks then
24531: LD_VAR 0 1
24535: PUSH
24536: LD_EXP 104
24540: IN
24541: NOT
24542: IFFALSE 24546
// exit ;
24544: GO 24657
// index := GetElementIndex ( hackTanks , hack ) ;
24546: LD_ADDR_VAR 0 4
24550: PUSH
24551: LD_EXP 104
24555: PPUSH
24556: LD_VAR 0 1
24560: PPUSH
24561: CALL 32284 0 2
24565: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24566: LD_EXP 105
24570: PUSH
24571: LD_VAR 0 4
24575: ARRAY
24576: IFFALSE 24657
// begin for i in hackTanksCaptured [ index ] do
24578: LD_ADDR_VAR 0 3
24582: PUSH
24583: LD_EXP 105
24587: PUSH
24588: LD_VAR 0 4
24592: ARRAY
24593: PUSH
24594: FOR_IN
24595: IFFALSE 24621
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24597: LD_VAR 0 3
24601: PUSH
24602: LD_INT 1
24604: ARRAY
24605: PPUSH
24606: LD_VAR 0 3
24610: PUSH
24611: LD_INT 2
24613: ARRAY
24614: PPUSH
24615: CALL_OW 235
24619: GO 24594
24621: POP
24622: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24623: LD_ADDR_EXP 105
24627: PUSH
24628: LD_EXP 105
24632: PPUSH
24633: LD_VAR 0 4
24637: PPUSH
24638: EMPTY
24639: PPUSH
24640: CALL_OW 1
24644: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24645: LD_VAR 0 1
24649: PPUSH
24650: LD_INT 0
24652: PPUSH
24653: CALL_OW 505
// end ; end ;
24657: LD_VAR 0 2
24661: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24662: LD_INT 0
24664: PPUSH
24665: PPUSH
24666: PPUSH
// if not hack in hackTanks or not vehicles then
24667: LD_VAR 0 1
24671: PUSH
24672: LD_EXP 104
24676: IN
24677: NOT
24678: PUSH
24679: LD_VAR 0 2
24683: NOT
24684: OR
24685: IFFALSE 24689
// exit ;
24687: GO 24964
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24689: LD_ADDR_VAR 0 2
24693: PUSH
24694: LD_VAR 0 1
24698: PPUSH
24699: LD_VAR 0 2
24703: PPUSH
24704: LD_INT 1
24706: PPUSH
24707: LD_INT 1
24709: PPUSH
24710: CALL 32934 0 4
24714: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24715: LD_ADDR_VAR 0 5
24719: PUSH
24720: LD_EXP 104
24724: PPUSH
24725: LD_VAR 0 1
24729: PPUSH
24730: CALL 32284 0 2
24734: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24735: LD_EXP 105
24739: PUSH
24740: LD_VAR 0 5
24744: ARRAY
24745: PUSH
24746: LD_EXP 106
24750: LESS
24751: IFFALSE 24940
// begin for i := 1 to vehicles do
24753: LD_ADDR_VAR 0 4
24757: PUSH
24758: DOUBLE
24759: LD_INT 1
24761: DEC
24762: ST_TO_ADDR
24763: LD_VAR 0 2
24767: PUSH
24768: FOR_TO
24769: IFFALSE 24938
// begin if hackTanksCaptured [ index ] = hackLimit then
24771: LD_EXP 105
24775: PUSH
24776: LD_VAR 0 5
24780: ARRAY
24781: PUSH
24782: LD_EXP 106
24786: EQUAL
24787: IFFALSE 24791
// break ;
24789: GO 24938
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24791: LD_ADDR_EXP 108
24795: PUSH
24796: LD_EXP 108
24800: PPUSH
24801: LD_VAR 0 5
24805: PPUSH
24806: LD_EXP 108
24810: PUSH
24811: LD_VAR 0 5
24815: ARRAY
24816: PUSH
24817: LD_INT 1
24819: PLUS
24820: PPUSH
24821: CALL_OW 1
24825: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24826: LD_ADDR_EXP 105
24830: PUSH
24831: LD_EXP 105
24835: PPUSH
24836: LD_VAR 0 5
24840: PUSH
24841: LD_EXP 105
24845: PUSH
24846: LD_VAR 0 5
24850: ARRAY
24851: PUSH
24852: LD_INT 1
24854: PLUS
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PPUSH
24860: LD_VAR 0 2
24864: PUSH
24865: LD_VAR 0 4
24869: ARRAY
24870: PUSH
24871: LD_VAR 0 2
24875: PUSH
24876: LD_VAR 0 4
24880: ARRAY
24881: PPUSH
24882: CALL_OW 255
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PPUSH
24891: CALL 32499 0 3
24895: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24896: LD_VAR 0 2
24900: PUSH
24901: LD_VAR 0 4
24905: ARRAY
24906: PPUSH
24907: LD_VAR 0 1
24911: PPUSH
24912: CALL_OW 255
24916: PPUSH
24917: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24921: LD_VAR 0 2
24925: PUSH
24926: LD_VAR 0 4
24930: ARRAY
24931: PPUSH
24932: CALL_OW 141
// end ;
24936: GO 24768
24938: POP
24939: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24940: LD_VAR 0 1
24944: PPUSH
24945: LD_EXP 105
24949: PUSH
24950: LD_VAR 0 5
24954: ARRAY
24955: PUSH
24956: LD_INT 0
24958: PLUS
24959: PPUSH
24960: CALL_OW 505
// end ;
24964: LD_VAR 0 3
24968: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24969: LD_INT 0
24971: PPUSH
24972: PPUSH
24973: PPUSH
24974: PPUSH
// if not hack in hackTanks then
24975: LD_VAR 0 1
24979: PUSH
24980: LD_EXP 104
24984: IN
24985: NOT
24986: IFFALSE 24990
// exit ;
24988: GO 25230
// index := GetElementIndex ( hackTanks , hack ) ;
24990: LD_ADDR_VAR 0 4
24994: PUSH
24995: LD_EXP 104
24999: PPUSH
25000: LD_VAR 0 1
25004: PPUSH
25005: CALL 32284 0 2
25009: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25010: LD_ADDR_VAR 0 3
25014: PUSH
25015: DOUBLE
25016: LD_EXP 105
25020: PUSH
25021: LD_VAR 0 4
25025: ARRAY
25026: INC
25027: ST_TO_ADDR
25028: LD_INT 1
25030: PUSH
25031: FOR_DOWNTO
25032: IFFALSE 25204
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25034: LD_ADDR_VAR 0 5
25038: PUSH
25039: LD_EXP 105
25043: PUSH
25044: LD_VAR 0 4
25048: ARRAY
25049: PUSH
25050: LD_VAR 0 3
25054: ARRAY
25055: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25056: LD_VAR 0 5
25060: PUSH
25061: LD_INT 1
25063: ARRAY
25064: PPUSH
25065: CALL_OW 302
25069: NOT
25070: PUSH
25071: LD_VAR 0 5
25075: PUSH
25076: LD_INT 1
25078: ARRAY
25079: PPUSH
25080: CALL_OW 255
25084: PUSH
25085: LD_VAR 0 1
25089: PPUSH
25090: CALL_OW 255
25094: NONEQUAL
25095: OR
25096: IFFALSE 25202
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25098: LD_VAR 0 5
25102: PUSH
25103: LD_INT 1
25105: ARRAY
25106: PPUSH
25107: CALL_OW 305
25111: PUSH
25112: LD_VAR 0 5
25116: PUSH
25117: LD_INT 1
25119: ARRAY
25120: PPUSH
25121: CALL_OW 255
25125: PUSH
25126: LD_VAR 0 1
25130: PPUSH
25131: CALL_OW 255
25135: EQUAL
25136: AND
25137: IFFALSE 25161
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25139: LD_VAR 0 5
25143: PUSH
25144: LD_INT 1
25146: ARRAY
25147: PPUSH
25148: LD_VAR 0 5
25152: PUSH
25153: LD_INT 2
25155: ARRAY
25156: PPUSH
25157: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25161: LD_ADDR_EXP 105
25165: PUSH
25166: LD_EXP 105
25170: PPUSH
25171: LD_VAR 0 4
25175: PPUSH
25176: LD_EXP 105
25180: PUSH
25181: LD_VAR 0 4
25185: ARRAY
25186: PPUSH
25187: LD_VAR 0 3
25191: PPUSH
25192: CALL_OW 3
25196: PPUSH
25197: CALL_OW 1
25201: ST_TO_ADDR
// end ; end ;
25202: GO 25031
25204: POP
25205: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25206: LD_VAR 0 1
25210: PPUSH
25211: LD_EXP 105
25215: PUSH
25216: LD_VAR 0 4
25220: ARRAY
25221: PUSH
25222: LD_INT 0
25224: PLUS
25225: PPUSH
25226: CALL_OW 505
// end ;
25230: LD_VAR 0 2
25234: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25235: LD_INT 0
25237: PPUSH
25238: PPUSH
25239: PPUSH
25240: PPUSH
// if not hack in hackTanks then
25241: LD_VAR 0 1
25245: PUSH
25246: LD_EXP 104
25250: IN
25251: NOT
25252: IFFALSE 25256
// exit ;
25254: GO 25341
// index := GetElementIndex ( hackTanks , hack ) ;
25256: LD_ADDR_VAR 0 5
25260: PUSH
25261: LD_EXP 104
25265: PPUSH
25266: LD_VAR 0 1
25270: PPUSH
25271: CALL 32284 0 2
25275: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25276: LD_ADDR_VAR 0 4
25280: PUSH
25281: DOUBLE
25282: LD_INT 1
25284: DEC
25285: ST_TO_ADDR
25286: LD_EXP 105
25290: PUSH
25291: LD_VAR 0 5
25295: ARRAY
25296: PUSH
25297: FOR_TO
25298: IFFALSE 25339
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25300: LD_EXP 105
25304: PUSH
25305: LD_VAR 0 5
25309: ARRAY
25310: PUSH
25311: LD_VAR 0 4
25315: ARRAY
25316: PUSH
25317: LD_INT 1
25319: ARRAY
25320: PUSH
25321: LD_VAR 0 2
25325: EQUAL
25326: IFFALSE 25337
// KillUnit ( vehicle ) ;
25328: LD_VAR 0 2
25332: PPUSH
25333: CALL_OW 66
25337: GO 25297
25339: POP
25340: POP
// end ;
25341: LD_VAR 0 3
25345: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25346: LD_EXP 109
25350: NOT
25351: IFFALSE 25386
25353: GO 25355
25355: DISABLE
// begin initMiner := true ;
25356: LD_ADDR_EXP 109
25360: PUSH
25361: LD_INT 1
25363: ST_TO_ADDR
// minersList := [ ] ;
25364: LD_ADDR_EXP 110
25368: PUSH
25369: EMPTY
25370: ST_TO_ADDR
// minerMinesList := [ ] ;
25371: LD_ADDR_EXP 111
25375: PUSH
25376: EMPTY
25377: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25378: LD_ADDR_EXP 112
25382: PUSH
25383: LD_INT 5
25385: ST_TO_ADDR
// end ;
25386: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25387: LD_EXP 109
25391: PUSH
25392: LD_INT 34
25394: PUSH
25395: LD_EXP 31
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PPUSH
25404: CALL_OW 69
25408: AND
25409: IFFALSE 25872
25411: GO 25413
25413: DISABLE
25414: LD_INT 0
25416: PPUSH
25417: PPUSH
25418: PPUSH
25419: PPUSH
// begin enable ;
25420: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25421: LD_ADDR_VAR 0 1
25425: PUSH
25426: LD_INT 34
25428: PUSH
25429: LD_EXP 31
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PPUSH
25438: CALL_OW 69
25442: PUSH
25443: FOR_IN
25444: IFFALSE 25516
// begin if not i in minersList then
25446: LD_VAR 0 1
25450: PUSH
25451: LD_EXP 110
25455: IN
25456: NOT
25457: IFFALSE 25514
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25459: LD_ADDR_EXP 110
25463: PUSH
25464: LD_EXP 110
25468: PPUSH
25469: LD_EXP 110
25473: PUSH
25474: LD_INT 1
25476: PLUS
25477: PPUSH
25478: LD_VAR 0 1
25482: PPUSH
25483: CALL_OW 1
25487: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25488: LD_ADDR_EXP 111
25492: PUSH
25493: LD_EXP 111
25497: PPUSH
25498: LD_EXP 111
25502: PUSH
25503: LD_INT 1
25505: PLUS
25506: PPUSH
25507: EMPTY
25508: PPUSH
25509: CALL_OW 1
25513: ST_TO_ADDR
// end end ;
25514: GO 25443
25516: POP
25517: POP
// for i := minerMinesList downto 1 do
25518: LD_ADDR_VAR 0 1
25522: PUSH
25523: DOUBLE
25524: LD_EXP 111
25528: INC
25529: ST_TO_ADDR
25530: LD_INT 1
25532: PUSH
25533: FOR_DOWNTO
25534: IFFALSE 25870
// begin if IsLive ( minersList [ i ] ) then
25536: LD_EXP 110
25540: PUSH
25541: LD_VAR 0 1
25545: ARRAY
25546: PPUSH
25547: CALL_OW 300
25551: IFFALSE 25579
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25553: LD_EXP 110
25557: PUSH
25558: LD_VAR 0 1
25562: ARRAY
25563: PPUSH
25564: LD_EXP 111
25568: PUSH
25569: LD_VAR 0 1
25573: ARRAY
25574: PPUSH
25575: CALL_OW 505
// if not minerMinesList [ i ] then
25579: LD_EXP 111
25583: PUSH
25584: LD_VAR 0 1
25588: ARRAY
25589: NOT
25590: IFFALSE 25594
// continue ;
25592: GO 25533
// for j := minerMinesList [ i ] downto 1 do
25594: LD_ADDR_VAR 0 2
25598: PUSH
25599: DOUBLE
25600: LD_EXP 111
25604: PUSH
25605: LD_VAR 0 1
25609: ARRAY
25610: INC
25611: ST_TO_ADDR
25612: LD_INT 1
25614: PUSH
25615: FOR_DOWNTO
25616: IFFALSE 25866
// begin side := GetSide ( minersList [ i ] ) ;
25618: LD_ADDR_VAR 0 3
25622: PUSH
25623: LD_EXP 110
25627: PUSH
25628: LD_VAR 0 1
25632: ARRAY
25633: PPUSH
25634: CALL_OW 255
25638: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25639: LD_ADDR_VAR 0 4
25643: PUSH
25644: LD_EXP 111
25648: PUSH
25649: LD_VAR 0 1
25653: ARRAY
25654: PUSH
25655: LD_VAR 0 2
25659: ARRAY
25660: PUSH
25661: LD_INT 1
25663: ARRAY
25664: PPUSH
25665: LD_EXP 111
25669: PUSH
25670: LD_VAR 0 1
25674: ARRAY
25675: PUSH
25676: LD_VAR 0 2
25680: ARRAY
25681: PUSH
25682: LD_INT 2
25684: ARRAY
25685: PPUSH
25686: CALL_OW 428
25690: ST_TO_ADDR
// if not tmp then
25691: LD_VAR 0 4
25695: NOT
25696: IFFALSE 25700
// continue ;
25698: GO 25615
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25700: LD_VAR 0 4
25704: PUSH
25705: LD_INT 81
25707: PUSH
25708: LD_VAR 0 3
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PPUSH
25717: CALL_OW 69
25721: IN
25722: PUSH
25723: LD_EXP 111
25727: PUSH
25728: LD_VAR 0 1
25732: ARRAY
25733: PUSH
25734: LD_VAR 0 2
25738: ARRAY
25739: PUSH
25740: LD_INT 1
25742: ARRAY
25743: PPUSH
25744: LD_EXP 111
25748: PUSH
25749: LD_VAR 0 1
25753: ARRAY
25754: PUSH
25755: LD_VAR 0 2
25759: ARRAY
25760: PUSH
25761: LD_INT 2
25763: ARRAY
25764: PPUSH
25765: CALL_OW 458
25769: AND
25770: IFFALSE 25864
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25772: LD_EXP 111
25776: PUSH
25777: LD_VAR 0 1
25781: ARRAY
25782: PUSH
25783: LD_VAR 0 2
25787: ARRAY
25788: PUSH
25789: LD_INT 1
25791: ARRAY
25792: PPUSH
25793: LD_EXP 111
25797: PUSH
25798: LD_VAR 0 1
25802: ARRAY
25803: PUSH
25804: LD_VAR 0 2
25808: ARRAY
25809: PUSH
25810: LD_INT 2
25812: ARRAY
25813: PPUSH
25814: LD_VAR 0 3
25818: PPUSH
25819: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25823: LD_ADDR_EXP 111
25827: PUSH
25828: LD_EXP 111
25832: PPUSH
25833: LD_VAR 0 1
25837: PPUSH
25838: LD_EXP 111
25842: PUSH
25843: LD_VAR 0 1
25847: ARRAY
25848: PPUSH
25849: LD_VAR 0 2
25853: PPUSH
25854: CALL_OW 3
25858: PPUSH
25859: CALL_OW 1
25863: ST_TO_ADDR
// end ; end ;
25864: GO 25615
25866: POP
25867: POP
// end ;
25868: GO 25533
25870: POP
25871: POP
// end ;
25872: PPOPN 4
25874: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25875: LD_INT 0
25877: PPUSH
25878: PPUSH
// result := false ;
25879: LD_ADDR_VAR 0 4
25883: PUSH
25884: LD_INT 0
25886: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25887: LD_VAR 0 1
25891: PPUSH
25892: CALL_OW 264
25896: PUSH
25897: LD_EXP 31
25901: EQUAL
25902: NOT
25903: IFFALSE 25907
// exit ;
25905: GO 26147
// index := GetElementIndex ( minersList , unit ) ;
25907: LD_ADDR_VAR 0 5
25911: PUSH
25912: LD_EXP 110
25916: PPUSH
25917: LD_VAR 0 1
25921: PPUSH
25922: CALL 32284 0 2
25926: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25927: LD_EXP 111
25931: PUSH
25932: LD_VAR 0 5
25936: ARRAY
25937: PUSH
25938: LD_EXP 112
25942: GREATEREQUAL
25943: IFFALSE 25947
// exit ;
25945: GO 26147
// ComMoveXY ( unit , x , y ) ;
25947: LD_VAR 0 1
25951: PPUSH
25952: LD_VAR 0 2
25956: PPUSH
25957: LD_VAR 0 3
25961: PPUSH
25962: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25966: LD_INT 35
25968: PPUSH
25969: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25973: LD_VAR 0 1
25977: PPUSH
25978: LD_VAR 0 2
25982: PPUSH
25983: LD_VAR 0 3
25987: PPUSH
25988: CALL 63570 0 3
25992: NOT
25993: PUSH
25994: LD_VAR 0 1
25998: PPUSH
25999: CALL_OW 314
26003: AND
26004: IFFALSE 26008
// exit ;
26006: GO 26147
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26008: LD_VAR 0 2
26012: PPUSH
26013: LD_VAR 0 3
26017: PPUSH
26018: CALL_OW 428
26022: PUSH
26023: LD_VAR 0 1
26027: EQUAL
26028: PUSH
26029: LD_VAR 0 1
26033: PPUSH
26034: CALL_OW 314
26038: NOT
26039: AND
26040: IFFALSE 25966
// PlaySoundXY ( x , y , PlantMine ) ;
26042: LD_VAR 0 2
26046: PPUSH
26047: LD_VAR 0 3
26051: PPUSH
26052: LD_STRING PlantMine
26054: PPUSH
26055: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26059: LD_VAR 0 2
26063: PPUSH
26064: LD_VAR 0 3
26068: PPUSH
26069: LD_VAR 0 1
26073: PPUSH
26074: CALL_OW 255
26078: PPUSH
26079: LD_INT 0
26081: PPUSH
26082: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26086: LD_ADDR_EXP 111
26090: PUSH
26091: LD_EXP 111
26095: PPUSH
26096: LD_VAR 0 5
26100: PUSH
26101: LD_EXP 111
26105: PUSH
26106: LD_VAR 0 5
26110: ARRAY
26111: PUSH
26112: LD_INT 1
26114: PLUS
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PPUSH
26120: LD_VAR 0 2
26124: PUSH
26125: LD_VAR 0 3
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PPUSH
26134: CALL 32499 0 3
26138: ST_TO_ADDR
// result := true ;
26139: LD_ADDR_VAR 0 4
26143: PUSH
26144: LD_INT 1
26146: ST_TO_ADDR
// end ;
26147: LD_VAR 0 4
26151: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26152: LD_INT 0
26154: PPUSH
26155: PPUSH
26156: PPUSH
// if not unit in minersList then
26157: LD_VAR 0 1
26161: PUSH
26162: LD_EXP 110
26166: IN
26167: NOT
26168: IFFALSE 26172
// exit ;
26170: GO 26564
// index := GetElementIndex ( minersList , unit ) ;
26172: LD_ADDR_VAR 0 6
26176: PUSH
26177: LD_EXP 110
26181: PPUSH
26182: LD_VAR 0 1
26186: PPUSH
26187: CALL 32284 0 2
26191: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26192: LD_ADDR_VAR 0 5
26196: PUSH
26197: DOUBLE
26198: LD_EXP 111
26202: PUSH
26203: LD_VAR 0 6
26207: ARRAY
26208: INC
26209: ST_TO_ADDR
26210: LD_INT 1
26212: PUSH
26213: FOR_DOWNTO
26214: IFFALSE 26375
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26216: LD_EXP 111
26220: PUSH
26221: LD_VAR 0 6
26225: ARRAY
26226: PUSH
26227: LD_VAR 0 5
26231: ARRAY
26232: PUSH
26233: LD_INT 1
26235: ARRAY
26236: PUSH
26237: LD_VAR 0 2
26241: EQUAL
26242: PUSH
26243: LD_EXP 111
26247: PUSH
26248: LD_VAR 0 6
26252: ARRAY
26253: PUSH
26254: LD_VAR 0 5
26258: ARRAY
26259: PUSH
26260: LD_INT 2
26262: ARRAY
26263: PUSH
26264: LD_VAR 0 3
26268: EQUAL
26269: AND
26270: IFFALSE 26373
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26272: LD_EXP 111
26276: PUSH
26277: LD_VAR 0 6
26281: ARRAY
26282: PUSH
26283: LD_VAR 0 5
26287: ARRAY
26288: PUSH
26289: LD_INT 1
26291: ARRAY
26292: PPUSH
26293: LD_EXP 111
26297: PUSH
26298: LD_VAR 0 6
26302: ARRAY
26303: PUSH
26304: LD_VAR 0 5
26308: ARRAY
26309: PUSH
26310: LD_INT 2
26312: ARRAY
26313: PPUSH
26314: LD_VAR 0 1
26318: PPUSH
26319: CALL_OW 255
26323: PPUSH
26324: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26328: LD_ADDR_EXP 111
26332: PUSH
26333: LD_EXP 111
26337: PPUSH
26338: LD_VAR 0 6
26342: PPUSH
26343: LD_EXP 111
26347: PUSH
26348: LD_VAR 0 6
26352: ARRAY
26353: PPUSH
26354: LD_VAR 0 5
26358: PPUSH
26359: CALL_OW 3
26363: PPUSH
26364: CALL_OW 1
26368: ST_TO_ADDR
// exit ;
26369: POP
26370: POP
26371: GO 26564
// end ; end ;
26373: GO 26213
26375: POP
26376: POP
// for i := minerMinesList [ index ] downto 1 do
26377: LD_ADDR_VAR 0 5
26381: PUSH
26382: DOUBLE
26383: LD_EXP 111
26387: PUSH
26388: LD_VAR 0 6
26392: ARRAY
26393: INC
26394: ST_TO_ADDR
26395: LD_INT 1
26397: PUSH
26398: FOR_DOWNTO
26399: IFFALSE 26562
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26401: LD_EXP 111
26405: PUSH
26406: LD_VAR 0 6
26410: ARRAY
26411: PUSH
26412: LD_VAR 0 5
26416: ARRAY
26417: PUSH
26418: LD_INT 1
26420: ARRAY
26421: PPUSH
26422: LD_EXP 111
26426: PUSH
26427: LD_VAR 0 6
26431: ARRAY
26432: PUSH
26433: LD_VAR 0 5
26437: ARRAY
26438: PUSH
26439: LD_INT 2
26441: ARRAY
26442: PPUSH
26443: LD_VAR 0 2
26447: PPUSH
26448: LD_VAR 0 3
26452: PPUSH
26453: CALL_OW 298
26457: PUSH
26458: LD_INT 6
26460: LESS
26461: IFFALSE 26560
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26463: LD_EXP 111
26467: PUSH
26468: LD_VAR 0 6
26472: ARRAY
26473: PUSH
26474: LD_VAR 0 5
26478: ARRAY
26479: PUSH
26480: LD_INT 1
26482: ARRAY
26483: PPUSH
26484: LD_EXP 111
26488: PUSH
26489: LD_VAR 0 6
26493: ARRAY
26494: PUSH
26495: LD_VAR 0 5
26499: ARRAY
26500: PUSH
26501: LD_INT 2
26503: ARRAY
26504: PPUSH
26505: LD_VAR 0 1
26509: PPUSH
26510: CALL_OW 255
26514: PPUSH
26515: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26519: LD_ADDR_EXP 111
26523: PUSH
26524: LD_EXP 111
26528: PPUSH
26529: LD_VAR 0 6
26533: PPUSH
26534: LD_EXP 111
26538: PUSH
26539: LD_VAR 0 6
26543: ARRAY
26544: PPUSH
26545: LD_VAR 0 5
26549: PPUSH
26550: CALL_OW 3
26554: PPUSH
26555: CALL_OW 1
26559: ST_TO_ADDR
// end ; end ;
26560: GO 26398
26562: POP
26563: POP
// end ;
26564: LD_VAR 0 4
26568: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26569: LD_INT 0
26571: PPUSH
26572: PPUSH
26573: PPUSH
26574: PPUSH
26575: PPUSH
26576: PPUSH
26577: PPUSH
26578: PPUSH
26579: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26580: LD_VAR 0 1
26584: PPUSH
26585: CALL_OW 264
26589: PUSH
26590: LD_EXP 31
26594: EQUAL
26595: NOT
26596: PUSH
26597: LD_VAR 0 1
26601: PUSH
26602: LD_EXP 110
26606: IN
26607: NOT
26608: OR
26609: IFFALSE 26613
// exit ;
26611: GO 26935
// index := GetElementIndex ( minersList , unit ) ;
26613: LD_ADDR_VAR 0 6
26617: PUSH
26618: LD_EXP 110
26622: PPUSH
26623: LD_VAR 0 1
26627: PPUSH
26628: CALL 32284 0 2
26632: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26633: LD_ADDR_VAR 0 8
26637: PUSH
26638: LD_EXP 112
26642: PUSH
26643: LD_EXP 111
26647: PUSH
26648: LD_VAR 0 6
26652: ARRAY
26653: MINUS
26654: ST_TO_ADDR
// if not minesFreeAmount then
26655: LD_VAR 0 8
26659: NOT
26660: IFFALSE 26664
// exit ;
26662: GO 26935
// tmp := [ ] ;
26664: LD_ADDR_VAR 0 7
26668: PUSH
26669: EMPTY
26670: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26671: LD_ADDR_VAR 0 5
26675: PUSH
26676: DOUBLE
26677: LD_INT 1
26679: DEC
26680: ST_TO_ADDR
26681: LD_VAR 0 8
26685: PUSH
26686: FOR_TO
26687: IFFALSE 26882
// begin _d := rand ( 0 , 5 ) ;
26689: LD_ADDR_VAR 0 11
26693: PUSH
26694: LD_INT 0
26696: PPUSH
26697: LD_INT 5
26699: PPUSH
26700: CALL_OW 12
26704: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26705: LD_ADDR_VAR 0 12
26709: PUSH
26710: LD_INT 2
26712: PPUSH
26713: LD_INT 6
26715: PPUSH
26716: CALL_OW 12
26720: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26721: LD_ADDR_VAR 0 9
26725: PUSH
26726: LD_VAR 0 2
26730: PPUSH
26731: LD_VAR 0 11
26735: PPUSH
26736: LD_VAR 0 12
26740: PPUSH
26741: CALL_OW 272
26745: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26746: LD_ADDR_VAR 0 10
26750: PUSH
26751: LD_VAR 0 3
26755: PPUSH
26756: LD_VAR 0 11
26760: PPUSH
26761: LD_VAR 0 12
26765: PPUSH
26766: CALL_OW 273
26770: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26771: LD_VAR 0 9
26775: PPUSH
26776: LD_VAR 0 10
26780: PPUSH
26781: CALL_OW 488
26785: PUSH
26786: LD_VAR 0 9
26790: PUSH
26791: LD_VAR 0 10
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_VAR 0 7
26804: IN
26805: NOT
26806: AND
26807: PUSH
26808: LD_VAR 0 9
26812: PPUSH
26813: LD_VAR 0 10
26817: PPUSH
26818: CALL_OW 458
26822: NOT
26823: AND
26824: IFFALSE 26866
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26826: LD_ADDR_VAR 0 7
26830: PUSH
26831: LD_VAR 0 7
26835: PPUSH
26836: LD_VAR 0 7
26840: PUSH
26841: LD_INT 1
26843: PLUS
26844: PPUSH
26845: LD_VAR 0 9
26849: PUSH
26850: LD_VAR 0 10
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PPUSH
26859: CALL_OW 1
26863: ST_TO_ADDR
26864: GO 26880
// i := i - 1 ;
26866: LD_ADDR_VAR 0 5
26870: PUSH
26871: LD_VAR 0 5
26875: PUSH
26876: LD_INT 1
26878: MINUS
26879: ST_TO_ADDR
// end ;
26880: GO 26686
26882: POP
26883: POP
// for i in tmp do
26884: LD_ADDR_VAR 0 5
26888: PUSH
26889: LD_VAR 0 7
26893: PUSH
26894: FOR_IN
26895: IFFALSE 26933
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26897: LD_VAR 0 1
26901: PPUSH
26902: LD_VAR 0 5
26906: PUSH
26907: LD_INT 1
26909: ARRAY
26910: PPUSH
26911: LD_VAR 0 5
26915: PUSH
26916: LD_INT 2
26918: ARRAY
26919: PPUSH
26920: CALL 25875 0 3
26924: NOT
26925: IFFALSE 26931
// exit ;
26927: POP
26928: POP
26929: GO 26935
26931: GO 26894
26933: POP
26934: POP
// end ;
26935: LD_VAR 0 4
26939: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26940: LD_INT 0
26942: PPUSH
26943: PPUSH
26944: PPUSH
26945: PPUSH
26946: PPUSH
26947: PPUSH
26948: PPUSH
// if not GetClass ( unit ) = class_sniper then
26949: LD_VAR 0 1
26953: PPUSH
26954: CALL_OW 257
26958: PUSH
26959: LD_INT 5
26961: EQUAL
26962: NOT
26963: IFFALSE 26967
// exit ;
26965: GO 27355
// dist := 8 ;
26967: LD_ADDR_VAR 0 5
26971: PUSH
26972: LD_INT 8
26974: ST_TO_ADDR
// viewRange := 12 ;
26975: LD_ADDR_VAR 0 7
26979: PUSH
26980: LD_INT 12
26982: ST_TO_ADDR
// side := GetSide ( unit ) ;
26983: LD_ADDR_VAR 0 6
26987: PUSH
26988: LD_VAR 0 1
26992: PPUSH
26993: CALL_OW 255
26997: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26998: LD_INT 61
27000: PPUSH
27001: LD_VAR 0 6
27005: PPUSH
27006: CALL_OW 321
27010: PUSH
27011: LD_INT 2
27013: EQUAL
27014: IFFALSE 27024
// viewRange := 16 ;
27016: LD_ADDR_VAR 0 7
27020: PUSH
27021: LD_INT 16
27023: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27024: LD_VAR 0 1
27028: PPUSH
27029: LD_VAR 0 2
27033: PPUSH
27034: LD_VAR 0 3
27038: PPUSH
27039: CALL_OW 297
27043: PUSH
27044: LD_VAR 0 5
27048: GREATER
27049: IFFALSE 27128
// begin ComMoveXY ( unit , x , y ) ;
27051: LD_VAR 0 1
27055: PPUSH
27056: LD_VAR 0 2
27060: PPUSH
27061: LD_VAR 0 3
27065: PPUSH
27066: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27070: LD_INT 35
27072: PPUSH
27073: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27077: LD_VAR 0 1
27081: PPUSH
27082: LD_VAR 0 2
27086: PPUSH
27087: LD_VAR 0 3
27091: PPUSH
27092: CALL 63570 0 3
27096: NOT
27097: IFFALSE 27101
// exit ;
27099: GO 27355
// until GetDistUnitXY ( unit , x , y ) < dist ;
27101: LD_VAR 0 1
27105: PPUSH
27106: LD_VAR 0 2
27110: PPUSH
27111: LD_VAR 0 3
27115: PPUSH
27116: CALL_OW 297
27120: PUSH
27121: LD_VAR 0 5
27125: LESS
27126: IFFALSE 27070
// end ; ComTurnXY ( unit , x , y ) ;
27128: LD_VAR 0 1
27132: PPUSH
27133: LD_VAR 0 2
27137: PPUSH
27138: LD_VAR 0 3
27142: PPUSH
27143: CALL_OW 118
// wait ( 5 ) ;
27147: LD_INT 5
27149: PPUSH
27150: CALL_OW 67
// _d := GetDir ( unit ) ;
27154: LD_ADDR_VAR 0 10
27158: PUSH
27159: LD_VAR 0 1
27163: PPUSH
27164: CALL_OW 254
27168: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27169: LD_ADDR_VAR 0 8
27173: PUSH
27174: LD_VAR 0 1
27178: PPUSH
27179: CALL_OW 250
27183: PPUSH
27184: LD_VAR 0 10
27188: PPUSH
27189: LD_VAR 0 5
27193: PPUSH
27194: CALL_OW 272
27198: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27199: LD_ADDR_VAR 0 9
27203: PUSH
27204: LD_VAR 0 1
27208: PPUSH
27209: CALL_OW 251
27213: PPUSH
27214: LD_VAR 0 10
27218: PPUSH
27219: LD_VAR 0 5
27223: PPUSH
27224: CALL_OW 273
27228: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27229: LD_VAR 0 8
27233: PPUSH
27234: LD_VAR 0 9
27238: PPUSH
27239: CALL_OW 488
27243: NOT
27244: IFFALSE 27248
// exit ;
27246: GO 27355
// ComAnimCustom ( unit , 1 ) ;
27248: LD_VAR 0 1
27252: PPUSH
27253: LD_INT 1
27255: PPUSH
27256: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27260: LD_VAR 0 8
27264: PPUSH
27265: LD_VAR 0 9
27269: PPUSH
27270: LD_VAR 0 6
27274: PPUSH
27275: LD_VAR 0 7
27279: PPUSH
27280: CALL_OW 330
// repeat wait ( 1 ) ;
27284: LD_INT 1
27286: PPUSH
27287: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27291: LD_VAR 0 1
27295: PPUSH
27296: CALL_OW 316
27300: PUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: CALL_OW 314
27310: OR
27311: PUSH
27312: LD_VAR 0 1
27316: PPUSH
27317: CALL_OW 302
27321: NOT
27322: OR
27323: PUSH
27324: LD_VAR 0 1
27328: PPUSH
27329: CALL_OW 301
27333: OR
27334: IFFALSE 27284
// RemoveSeeing ( _x , _y , side ) ;
27336: LD_VAR 0 8
27340: PPUSH
27341: LD_VAR 0 9
27345: PPUSH
27346: LD_VAR 0 6
27350: PPUSH
27351: CALL_OW 331
// end ; end_of_file
27355: LD_VAR 0 4
27359: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27360: LD_INT 0
27362: PPUSH
27363: PPUSH
// if exist_mode then
27364: LD_VAR 0 2
27368: IFFALSE 27393
// unit := CreateCharacter ( prefix & ident ) else
27370: LD_ADDR_VAR 0 5
27374: PUSH
27375: LD_VAR 0 3
27379: PUSH
27380: LD_VAR 0 1
27384: STR
27385: PPUSH
27386: CALL_OW 34
27390: ST_TO_ADDR
27391: GO 27408
// unit := NewCharacter ( ident ) ;
27393: LD_ADDR_VAR 0 5
27397: PUSH
27398: LD_VAR 0 1
27402: PPUSH
27403: CALL_OW 25
27407: ST_TO_ADDR
// result := unit ;
27408: LD_ADDR_VAR 0 4
27412: PUSH
27413: LD_VAR 0 5
27417: ST_TO_ADDR
// end ;
27418: LD_VAR 0 4
27422: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27423: LD_INT 0
27425: PPUSH
27426: PPUSH
// if not side or not nation then
27427: LD_VAR 0 1
27431: NOT
27432: PUSH
27433: LD_VAR 0 2
27437: NOT
27438: OR
27439: IFFALSE 27443
// exit ;
27441: GO 28211
// case nation of nation_american :
27443: LD_VAR 0 2
27447: PUSH
27448: LD_INT 1
27450: DOUBLE
27451: EQUAL
27452: IFTRUE 27456
27454: GO 27670
27456: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27457: LD_ADDR_VAR 0 4
27461: PUSH
27462: LD_INT 35
27464: PUSH
27465: LD_INT 45
27467: PUSH
27468: LD_INT 46
27470: PUSH
27471: LD_INT 47
27473: PUSH
27474: LD_INT 82
27476: PUSH
27477: LD_INT 83
27479: PUSH
27480: LD_INT 84
27482: PUSH
27483: LD_INT 85
27485: PUSH
27486: LD_INT 86
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: LD_INT 2
27494: PUSH
27495: LD_INT 6
27497: PUSH
27498: LD_INT 15
27500: PUSH
27501: LD_INT 16
27503: PUSH
27504: LD_INT 7
27506: PUSH
27507: LD_INT 12
27509: PUSH
27510: LD_INT 13
27512: PUSH
27513: LD_INT 10
27515: PUSH
27516: LD_INT 14
27518: PUSH
27519: LD_INT 20
27521: PUSH
27522: LD_INT 21
27524: PUSH
27525: LD_INT 22
27527: PUSH
27528: LD_INT 25
27530: PUSH
27531: LD_INT 32
27533: PUSH
27534: LD_INT 27
27536: PUSH
27537: LD_INT 36
27539: PUSH
27540: LD_INT 69
27542: PUSH
27543: LD_INT 39
27545: PUSH
27546: LD_INT 34
27548: PUSH
27549: LD_INT 40
27551: PUSH
27552: LD_INT 48
27554: PUSH
27555: LD_INT 49
27557: PUSH
27558: LD_INT 50
27560: PUSH
27561: LD_INT 51
27563: PUSH
27564: LD_INT 52
27566: PUSH
27567: LD_INT 53
27569: PUSH
27570: LD_INT 54
27572: PUSH
27573: LD_INT 55
27575: PUSH
27576: LD_INT 56
27578: PUSH
27579: LD_INT 57
27581: PUSH
27582: LD_INT 58
27584: PUSH
27585: LD_INT 59
27587: PUSH
27588: LD_INT 60
27590: PUSH
27591: LD_INT 61
27593: PUSH
27594: LD_INT 62
27596: PUSH
27597: LD_INT 80
27599: PUSH
27600: LD_INT 82
27602: PUSH
27603: LD_INT 83
27605: PUSH
27606: LD_INT 84
27608: PUSH
27609: LD_INT 85
27611: PUSH
27612: LD_INT 86
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: ST_TO_ADDR
27668: GO 28135
27670: LD_INT 2
27672: DOUBLE
27673: EQUAL
27674: IFTRUE 27678
27676: GO 27904
27678: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27679: LD_ADDR_VAR 0 4
27683: PUSH
27684: LD_INT 35
27686: PUSH
27687: LD_INT 45
27689: PUSH
27690: LD_INT 46
27692: PUSH
27693: LD_INT 47
27695: PUSH
27696: LD_INT 82
27698: PUSH
27699: LD_INT 83
27701: PUSH
27702: LD_INT 84
27704: PUSH
27705: LD_INT 85
27707: PUSH
27708: LD_INT 87
27710: PUSH
27711: LD_INT 70
27713: PUSH
27714: LD_INT 1
27716: PUSH
27717: LD_INT 11
27719: PUSH
27720: LD_INT 3
27722: PUSH
27723: LD_INT 4
27725: PUSH
27726: LD_INT 5
27728: PUSH
27729: LD_INT 6
27731: PUSH
27732: LD_INT 15
27734: PUSH
27735: LD_INT 18
27737: PUSH
27738: LD_INT 7
27740: PUSH
27741: LD_INT 17
27743: PUSH
27744: LD_INT 8
27746: PUSH
27747: LD_INT 20
27749: PUSH
27750: LD_INT 21
27752: PUSH
27753: LD_INT 22
27755: PUSH
27756: LD_INT 72
27758: PUSH
27759: LD_INT 26
27761: PUSH
27762: LD_INT 69
27764: PUSH
27765: LD_INT 39
27767: PUSH
27768: LD_INT 40
27770: PUSH
27771: LD_INT 41
27773: PUSH
27774: LD_INT 42
27776: PUSH
27777: LD_INT 43
27779: PUSH
27780: LD_INT 48
27782: PUSH
27783: LD_INT 49
27785: PUSH
27786: LD_INT 50
27788: PUSH
27789: LD_INT 51
27791: PUSH
27792: LD_INT 52
27794: PUSH
27795: LD_INT 53
27797: PUSH
27798: LD_INT 54
27800: PUSH
27801: LD_INT 55
27803: PUSH
27804: LD_INT 56
27806: PUSH
27807: LD_INT 60
27809: PUSH
27810: LD_INT 61
27812: PUSH
27813: LD_INT 62
27815: PUSH
27816: LD_INT 66
27818: PUSH
27819: LD_INT 67
27821: PUSH
27822: LD_INT 68
27824: PUSH
27825: LD_INT 81
27827: PUSH
27828: LD_INT 82
27830: PUSH
27831: LD_INT 83
27833: PUSH
27834: LD_INT 84
27836: PUSH
27837: LD_INT 85
27839: PUSH
27840: LD_INT 87
27842: PUSH
27843: LD_INT 88
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: ST_TO_ADDR
27902: GO 28135
27904: LD_INT 3
27906: DOUBLE
27907: EQUAL
27908: IFTRUE 27912
27910: GO 28134
27912: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27913: LD_ADDR_VAR 0 4
27917: PUSH
27918: LD_INT 46
27920: PUSH
27921: LD_INT 47
27923: PUSH
27924: LD_INT 1
27926: PUSH
27927: LD_INT 2
27929: PUSH
27930: LD_INT 82
27932: PUSH
27933: LD_INT 83
27935: PUSH
27936: LD_INT 84
27938: PUSH
27939: LD_INT 85
27941: PUSH
27942: LD_INT 86
27944: PUSH
27945: LD_INT 11
27947: PUSH
27948: LD_INT 9
27950: PUSH
27951: LD_INT 20
27953: PUSH
27954: LD_INT 19
27956: PUSH
27957: LD_INT 21
27959: PUSH
27960: LD_INT 24
27962: PUSH
27963: LD_INT 22
27965: PUSH
27966: LD_INT 25
27968: PUSH
27969: LD_INT 28
27971: PUSH
27972: LD_INT 29
27974: PUSH
27975: LD_INT 30
27977: PUSH
27978: LD_INT 31
27980: PUSH
27981: LD_INT 37
27983: PUSH
27984: LD_INT 38
27986: PUSH
27987: LD_INT 32
27989: PUSH
27990: LD_INT 27
27992: PUSH
27993: LD_INT 33
27995: PUSH
27996: LD_INT 69
27998: PUSH
27999: LD_INT 39
28001: PUSH
28002: LD_INT 34
28004: PUSH
28005: LD_INT 40
28007: PUSH
28008: LD_INT 71
28010: PUSH
28011: LD_INT 23
28013: PUSH
28014: LD_INT 44
28016: PUSH
28017: LD_INT 48
28019: PUSH
28020: LD_INT 49
28022: PUSH
28023: LD_INT 50
28025: PUSH
28026: LD_INT 51
28028: PUSH
28029: LD_INT 52
28031: PUSH
28032: LD_INT 53
28034: PUSH
28035: LD_INT 54
28037: PUSH
28038: LD_INT 55
28040: PUSH
28041: LD_INT 56
28043: PUSH
28044: LD_INT 57
28046: PUSH
28047: LD_INT 58
28049: PUSH
28050: LD_INT 59
28052: PUSH
28053: LD_INT 63
28055: PUSH
28056: LD_INT 64
28058: PUSH
28059: LD_INT 65
28061: PUSH
28062: LD_INT 82
28064: PUSH
28065: LD_INT 83
28067: PUSH
28068: LD_INT 84
28070: PUSH
28071: LD_INT 85
28073: PUSH
28074: LD_INT 86
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: ST_TO_ADDR
28132: GO 28135
28134: POP
// if state > - 1 and state < 3 then
28135: LD_VAR 0 3
28139: PUSH
28140: LD_INT 1
28142: NEG
28143: GREATER
28144: PUSH
28145: LD_VAR 0 3
28149: PUSH
28150: LD_INT 3
28152: LESS
28153: AND
28154: IFFALSE 28211
// for i in result do
28156: LD_ADDR_VAR 0 5
28160: PUSH
28161: LD_VAR 0 4
28165: PUSH
28166: FOR_IN
28167: IFFALSE 28209
// if GetTech ( i , side ) <> state then
28169: LD_VAR 0 5
28173: PPUSH
28174: LD_VAR 0 1
28178: PPUSH
28179: CALL_OW 321
28183: PUSH
28184: LD_VAR 0 3
28188: NONEQUAL
28189: IFFALSE 28207
// result := result diff i ;
28191: LD_ADDR_VAR 0 4
28195: PUSH
28196: LD_VAR 0 4
28200: PUSH
28201: LD_VAR 0 5
28205: DIFF
28206: ST_TO_ADDR
28207: GO 28166
28209: POP
28210: POP
// end ;
28211: LD_VAR 0 4
28215: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28216: LD_INT 0
28218: PPUSH
28219: PPUSH
28220: PPUSH
// result := true ;
28221: LD_ADDR_VAR 0 3
28225: PUSH
28226: LD_INT 1
28228: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28229: LD_ADDR_VAR 0 5
28233: PUSH
28234: LD_VAR 0 2
28238: PPUSH
28239: CALL_OW 480
28243: ST_TO_ADDR
// if not tmp then
28244: LD_VAR 0 5
28248: NOT
28249: IFFALSE 28253
// exit ;
28251: GO 28302
// for i in tmp do
28253: LD_ADDR_VAR 0 4
28257: PUSH
28258: LD_VAR 0 5
28262: PUSH
28263: FOR_IN
28264: IFFALSE 28300
// if GetTech ( i , side ) <> state_researched then
28266: LD_VAR 0 4
28270: PPUSH
28271: LD_VAR 0 1
28275: PPUSH
28276: CALL_OW 321
28280: PUSH
28281: LD_INT 2
28283: NONEQUAL
28284: IFFALSE 28298
// begin result := false ;
28286: LD_ADDR_VAR 0 3
28290: PUSH
28291: LD_INT 0
28293: ST_TO_ADDR
// exit ;
28294: POP
28295: POP
28296: GO 28302
// end ;
28298: GO 28263
28300: POP
28301: POP
// end ;
28302: LD_VAR 0 3
28306: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28307: LD_INT 0
28309: PPUSH
28310: PPUSH
28311: PPUSH
28312: PPUSH
28313: PPUSH
28314: PPUSH
28315: PPUSH
28316: PPUSH
28317: PPUSH
28318: PPUSH
28319: PPUSH
28320: PPUSH
28321: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28322: LD_VAR 0 1
28326: NOT
28327: PUSH
28328: LD_VAR 0 1
28332: PPUSH
28333: CALL_OW 257
28337: PUSH
28338: LD_INT 9
28340: NONEQUAL
28341: OR
28342: IFFALSE 28346
// exit ;
28344: GO 28919
// side := GetSide ( unit ) ;
28346: LD_ADDR_VAR 0 9
28350: PUSH
28351: LD_VAR 0 1
28355: PPUSH
28356: CALL_OW 255
28360: ST_TO_ADDR
// tech_space := tech_spacanom ;
28361: LD_ADDR_VAR 0 12
28365: PUSH
28366: LD_INT 29
28368: ST_TO_ADDR
// tech_time := tech_taurad ;
28369: LD_ADDR_VAR 0 13
28373: PUSH
28374: LD_INT 28
28376: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28377: LD_ADDR_VAR 0 11
28381: PUSH
28382: LD_VAR 0 1
28386: PPUSH
28387: CALL_OW 310
28391: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28392: LD_VAR 0 11
28396: PPUSH
28397: CALL_OW 247
28401: PUSH
28402: LD_INT 2
28404: EQUAL
28405: IFFALSE 28409
// exit ;
28407: GO 28919
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28409: LD_ADDR_VAR 0 8
28413: PUSH
28414: LD_INT 81
28416: PUSH
28417: LD_VAR 0 9
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 3
28428: PUSH
28429: LD_INT 21
28431: PUSH
28432: LD_INT 3
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PPUSH
28447: CALL_OW 69
28451: ST_TO_ADDR
// if not tmp then
28452: LD_VAR 0 8
28456: NOT
28457: IFFALSE 28461
// exit ;
28459: GO 28919
// if in_unit then
28461: LD_VAR 0 11
28465: IFFALSE 28489
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28467: LD_ADDR_VAR 0 10
28471: PUSH
28472: LD_VAR 0 8
28476: PPUSH
28477: LD_VAR 0 11
28481: PPUSH
28482: CALL_OW 74
28486: ST_TO_ADDR
28487: GO 28509
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28489: LD_ADDR_VAR 0 10
28493: PUSH
28494: LD_VAR 0 8
28498: PPUSH
28499: LD_VAR 0 1
28503: PPUSH
28504: CALL_OW 74
28508: ST_TO_ADDR
// if not enemy then
28509: LD_VAR 0 10
28513: NOT
28514: IFFALSE 28518
// exit ;
28516: GO 28919
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28518: LD_VAR 0 11
28522: PUSH
28523: LD_VAR 0 11
28527: PPUSH
28528: LD_VAR 0 10
28532: PPUSH
28533: CALL_OW 296
28537: PUSH
28538: LD_INT 13
28540: GREATER
28541: AND
28542: PUSH
28543: LD_VAR 0 1
28547: PPUSH
28548: LD_VAR 0 10
28552: PPUSH
28553: CALL_OW 296
28557: PUSH
28558: LD_INT 12
28560: GREATER
28561: OR
28562: IFFALSE 28566
// exit ;
28564: GO 28919
// missile := [ 1 ] ;
28566: LD_ADDR_VAR 0 14
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: EMPTY
28575: LIST
28576: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28577: LD_VAR 0 9
28581: PPUSH
28582: LD_VAR 0 12
28586: PPUSH
28587: CALL_OW 325
28591: IFFALSE 28620
// missile := Replace ( missile , missile + 1 , 2 ) ;
28593: LD_ADDR_VAR 0 14
28597: PUSH
28598: LD_VAR 0 14
28602: PPUSH
28603: LD_VAR 0 14
28607: PUSH
28608: LD_INT 1
28610: PLUS
28611: PPUSH
28612: LD_INT 2
28614: PPUSH
28615: CALL_OW 1
28619: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28620: LD_VAR 0 9
28624: PPUSH
28625: LD_VAR 0 13
28629: PPUSH
28630: CALL_OW 325
28634: PUSH
28635: LD_VAR 0 10
28639: PPUSH
28640: CALL_OW 255
28644: PPUSH
28645: LD_VAR 0 13
28649: PPUSH
28650: CALL_OW 325
28654: NOT
28655: AND
28656: IFFALSE 28685
// missile := Replace ( missile , missile + 1 , 3 ) ;
28658: LD_ADDR_VAR 0 14
28662: PUSH
28663: LD_VAR 0 14
28667: PPUSH
28668: LD_VAR 0 14
28672: PUSH
28673: LD_INT 1
28675: PLUS
28676: PPUSH
28677: LD_INT 3
28679: PPUSH
28680: CALL_OW 1
28684: ST_TO_ADDR
// if missile < 2 then
28685: LD_VAR 0 14
28689: PUSH
28690: LD_INT 2
28692: LESS
28693: IFFALSE 28697
// exit ;
28695: GO 28919
// x := GetX ( enemy ) ;
28697: LD_ADDR_VAR 0 4
28701: PUSH
28702: LD_VAR 0 10
28706: PPUSH
28707: CALL_OW 250
28711: ST_TO_ADDR
// y := GetY ( enemy ) ;
28712: LD_ADDR_VAR 0 5
28716: PUSH
28717: LD_VAR 0 10
28721: PPUSH
28722: CALL_OW 251
28726: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28727: LD_ADDR_VAR 0 6
28731: PUSH
28732: LD_VAR 0 4
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PPUSH
28741: LD_INT 1
28743: PPUSH
28744: CALL_OW 12
28748: PLUS
28749: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28750: LD_ADDR_VAR 0 7
28754: PUSH
28755: LD_VAR 0 5
28759: PUSH
28760: LD_INT 1
28762: NEG
28763: PPUSH
28764: LD_INT 1
28766: PPUSH
28767: CALL_OW 12
28771: PLUS
28772: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28773: LD_VAR 0 6
28777: PPUSH
28778: LD_VAR 0 7
28782: PPUSH
28783: CALL_OW 488
28787: NOT
28788: IFFALSE 28810
// begin _x := x ;
28790: LD_ADDR_VAR 0 6
28794: PUSH
28795: LD_VAR 0 4
28799: ST_TO_ADDR
// _y := y ;
28800: LD_ADDR_VAR 0 7
28804: PUSH
28805: LD_VAR 0 5
28809: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28810: LD_ADDR_VAR 0 3
28814: PUSH
28815: LD_INT 1
28817: PPUSH
28818: LD_VAR 0 14
28822: PPUSH
28823: CALL_OW 12
28827: ST_TO_ADDR
// case i of 1 :
28828: LD_VAR 0 3
28832: PUSH
28833: LD_INT 1
28835: DOUBLE
28836: EQUAL
28837: IFTRUE 28841
28839: GO 28858
28841: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28842: LD_VAR 0 1
28846: PPUSH
28847: LD_VAR 0 10
28851: PPUSH
28852: CALL_OW 115
28856: GO 28919
28858: LD_INT 2
28860: DOUBLE
28861: EQUAL
28862: IFTRUE 28866
28864: GO 28888
28866: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28867: LD_VAR 0 1
28871: PPUSH
28872: LD_VAR 0 6
28876: PPUSH
28877: LD_VAR 0 7
28881: PPUSH
28882: CALL_OW 153
28886: GO 28919
28888: LD_INT 3
28890: DOUBLE
28891: EQUAL
28892: IFTRUE 28896
28894: GO 28918
28896: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28897: LD_VAR 0 1
28901: PPUSH
28902: LD_VAR 0 6
28906: PPUSH
28907: LD_VAR 0 7
28911: PPUSH
28912: CALL_OW 154
28916: GO 28919
28918: POP
// end ;
28919: LD_VAR 0 2
28923: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28924: LD_INT 0
28926: PPUSH
28927: PPUSH
28928: PPUSH
28929: PPUSH
28930: PPUSH
28931: PPUSH
// if not unit or not building then
28932: LD_VAR 0 1
28936: NOT
28937: PUSH
28938: LD_VAR 0 2
28942: NOT
28943: OR
28944: IFFALSE 28948
// exit ;
28946: GO 29106
// x := GetX ( building ) ;
28948: LD_ADDR_VAR 0 5
28952: PUSH
28953: LD_VAR 0 2
28957: PPUSH
28958: CALL_OW 250
28962: ST_TO_ADDR
// y := GetY ( building ) ;
28963: LD_ADDR_VAR 0 6
28967: PUSH
28968: LD_VAR 0 2
28972: PPUSH
28973: CALL_OW 251
28977: ST_TO_ADDR
// for i = 0 to 5 do
28978: LD_ADDR_VAR 0 4
28982: PUSH
28983: DOUBLE
28984: LD_INT 0
28986: DEC
28987: ST_TO_ADDR
28988: LD_INT 5
28990: PUSH
28991: FOR_TO
28992: IFFALSE 29104
// begin _x := ShiftX ( x , i , 3 ) ;
28994: LD_ADDR_VAR 0 7
28998: PUSH
28999: LD_VAR 0 5
29003: PPUSH
29004: LD_VAR 0 4
29008: PPUSH
29009: LD_INT 3
29011: PPUSH
29012: CALL_OW 272
29016: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29017: LD_ADDR_VAR 0 8
29021: PUSH
29022: LD_VAR 0 6
29026: PPUSH
29027: LD_VAR 0 4
29031: PPUSH
29032: LD_INT 3
29034: PPUSH
29035: CALL_OW 273
29039: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29040: LD_VAR 0 7
29044: PPUSH
29045: LD_VAR 0 8
29049: PPUSH
29050: CALL_OW 488
29054: NOT
29055: IFFALSE 29059
// continue ;
29057: GO 28991
// if HexInfo ( _x , _y ) = 0 then
29059: LD_VAR 0 7
29063: PPUSH
29064: LD_VAR 0 8
29068: PPUSH
29069: CALL_OW 428
29073: PUSH
29074: LD_INT 0
29076: EQUAL
29077: IFFALSE 29102
// begin ComMoveXY ( unit , _x , _y ) ;
29079: LD_VAR 0 1
29083: PPUSH
29084: LD_VAR 0 7
29088: PPUSH
29089: LD_VAR 0 8
29093: PPUSH
29094: CALL_OW 111
// exit ;
29098: POP
29099: POP
29100: GO 29106
// end ; end ;
29102: GO 28991
29104: POP
29105: POP
// end ;
29106: LD_VAR 0 3
29110: RET
// export function ScanBase ( side , base_area ) ; begin
29111: LD_INT 0
29113: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29114: LD_ADDR_VAR 0 3
29118: PUSH
29119: LD_VAR 0 2
29123: PPUSH
29124: LD_INT 81
29126: PUSH
29127: LD_VAR 0 1
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PPUSH
29136: CALL_OW 70
29140: ST_TO_ADDR
// end ;
29141: LD_VAR 0 3
29145: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29146: LD_INT 0
29148: PPUSH
29149: PPUSH
29150: PPUSH
29151: PPUSH
// result := false ;
29152: LD_ADDR_VAR 0 2
29156: PUSH
29157: LD_INT 0
29159: ST_TO_ADDR
// side := GetSide ( unit ) ;
29160: LD_ADDR_VAR 0 3
29164: PUSH
29165: LD_VAR 0 1
29169: PPUSH
29170: CALL_OW 255
29174: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29175: LD_ADDR_VAR 0 4
29179: PUSH
29180: LD_VAR 0 1
29184: PPUSH
29185: CALL_OW 248
29189: ST_TO_ADDR
// case nat of 1 :
29190: LD_VAR 0 4
29194: PUSH
29195: LD_INT 1
29197: DOUBLE
29198: EQUAL
29199: IFTRUE 29203
29201: GO 29214
29203: POP
// tech := tech_lassight ; 2 :
29204: LD_ADDR_VAR 0 5
29208: PUSH
29209: LD_INT 12
29211: ST_TO_ADDR
29212: GO 29253
29214: LD_INT 2
29216: DOUBLE
29217: EQUAL
29218: IFTRUE 29222
29220: GO 29233
29222: POP
// tech := tech_mortar ; 3 :
29223: LD_ADDR_VAR 0 5
29227: PUSH
29228: LD_INT 41
29230: ST_TO_ADDR
29231: GO 29253
29233: LD_INT 3
29235: DOUBLE
29236: EQUAL
29237: IFTRUE 29241
29239: GO 29252
29241: POP
// tech := tech_bazooka ; end ;
29242: LD_ADDR_VAR 0 5
29246: PUSH
29247: LD_INT 44
29249: ST_TO_ADDR
29250: GO 29253
29252: POP
// if Researched ( side , tech ) then
29253: LD_VAR 0 3
29257: PPUSH
29258: LD_VAR 0 5
29262: PPUSH
29263: CALL_OW 325
29267: IFFALSE 29294
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29269: LD_ADDR_VAR 0 2
29273: PUSH
29274: LD_INT 5
29276: PUSH
29277: LD_INT 8
29279: PUSH
29280: LD_INT 9
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: LIST
29287: PUSH
29288: LD_VAR 0 4
29292: ARRAY
29293: ST_TO_ADDR
// end ;
29294: LD_VAR 0 2
29298: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29299: LD_INT 0
29301: PPUSH
29302: PPUSH
29303: PPUSH
// if not mines then
29304: LD_VAR 0 2
29308: NOT
29309: IFFALSE 29313
// exit ;
29311: GO 29457
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29313: LD_ADDR_VAR 0 5
29317: PUSH
29318: LD_INT 81
29320: PUSH
29321: LD_VAR 0 1
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 3
29332: PUSH
29333: LD_INT 21
29335: PUSH
29336: LD_INT 3
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PPUSH
29351: CALL_OW 69
29355: ST_TO_ADDR
// for i in mines do
29356: LD_ADDR_VAR 0 4
29360: PUSH
29361: LD_VAR 0 2
29365: PUSH
29366: FOR_IN
29367: IFFALSE 29455
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29369: LD_VAR 0 4
29373: PUSH
29374: LD_INT 1
29376: ARRAY
29377: PPUSH
29378: LD_VAR 0 4
29382: PUSH
29383: LD_INT 2
29385: ARRAY
29386: PPUSH
29387: CALL_OW 458
29391: NOT
29392: IFFALSE 29396
// continue ;
29394: GO 29366
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29396: LD_VAR 0 4
29400: PUSH
29401: LD_INT 1
29403: ARRAY
29404: PPUSH
29405: LD_VAR 0 4
29409: PUSH
29410: LD_INT 2
29412: ARRAY
29413: PPUSH
29414: CALL_OW 428
29418: PUSH
29419: LD_VAR 0 5
29423: IN
29424: IFFALSE 29453
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29426: LD_VAR 0 4
29430: PUSH
29431: LD_INT 1
29433: ARRAY
29434: PPUSH
29435: LD_VAR 0 4
29439: PUSH
29440: LD_INT 2
29442: ARRAY
29443: PPUSH
29444: LD_VAR 0 1
29448: PPUSH
29449: CALL_OW 456
// end ;
29453: GO 29366
29455: POP
29456: POP
// end ;
29457: LD_VAR 0 3
29461: RET
// export function Count ( array ) ; var i ; begin
29462: LD_INT 0
29464: PPUSH
29465: PPUSH
// result := 0 ;
29466: LD_ADDR_VAR 0 2
29470: PUSH
29471: LD_INT 0
29473: ST_TO_ADDR
// for i in array do
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: LD_VAR 0 1
29483: PUSH
29484: FOR_IN
29485: IFFALSE 29509
// if i then
29487: LD_VAR 0 3
29491: IFFALSE 29507
// result := result + 1 ;
29493: LD_ADDR_VAR 0 2
29497: PUSH
29498: LD_VAR 0 2
29502: PUSH
29503: LD_INT 1
29505: PLUS
29506: ST_TO_ADDR
29507: GO 29484
29509: POP
29510: POP
// end ;
29511: LD_VAR 0 2
29515: RET
// export function IsEmpty ( building ) ; begin
29516: LD_INT 0
29518: PPUSH
// if not building then
29519: LD_VAR 0 1
29523: NOT
29524: IFFALSE 29528
// exit ;
29526: GO 29571
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29528: LD_ADDR_VAR 0 2
29532: PUSH
29533: LD_VAR 0 1
29537: PUSH
29538: LD_INT 22
29540: PUSH
29541: LD_VAR 0 1
29545: PPUSH
29546: CALL_OW 255
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 58
29557: PUSH
29558: EMPTY
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PPUSH
29565: CALL_OW 69
29569: IN
29570: ST_TO_ADDR
// end ;
29571: LD_VAR 0 2
29575: RET
// export function IsNotFull ( building ) ; var places ; begin
29576: LD_INT 0
29578: PPUSH
29579: PPUSH
// if not building then
29580: LD_VAR 0 1
29584: NOT
29585: IFFALSE 29589
// exit ;
29587: GO 29760
// result := false ;
29589: LD_ADDR_VAR 0 2
29593: PUSH
29594: LD_INT 0
29596: ST_TO_ADDR
// places := 0 ;
29597: LD_ADDR_VAR 0 3
29601: PUSH
29602: LD_INT 0
29604: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
29605: LD_VAR 0 1
29609: PPUSH
29610: CALL_OW 266
29614: PUSH
29615: LD_INT 0
29617: DOUBLE
29618: EQUAL
29619: IFTRUE 29677
29621: LD_INT 1
29623: DOUBLE
29624: EQUAL
29625: IFTRUE 29677
29627: LD_INT 6
29629: DOUBLE
29630: EQUAL
29631: IFTRUE 29677
29633: LD_INT 7
29635: DOUBLE
29636: EQUAL
29637: IFTRUE 29677
29639: LD_INT 8
29641: DOUBLE
29642: EQUAL
29643: IFTRUE 29677
29645: LD_INT 4
29647: DOUBLE
29648: EQUAL
29649: IFTRUE 29677
29651: LD_INT 5
29653: DOUBLE
29654: EQUAL
29655: IFTRUE 29677
29657: LD_INT 2
29659: DOUBLE
29660: EQUAL
29661: IFTRUE 29677
29663: LD_INT 3
29665: DOUBLE
29666: EQUAL
29667: IFTRUE 29677
29669: LD_INT 35
29671: DOUBLE
29672: EQUAL
29673: IFTRUE 29677
29675: GO 29688
29677: POP
// places := 6 ; b_bunker , b_breastwork :
29678: LD_ADDR_VAR 0 3
29682: PUSH
29683: LD_INT 6
29685: ST_TO_ADDR
29686: GO 29733
29688: LD_INT 32
29690: DOUBLE
29691: EQUAL
29692: IFTRUE 29702
29694: LD_INT 31
29696: DOUBLE
29697: EQUAL
29698: IFTRUE 29702
29700: GO 29713
29702: POP
// places := 1 ; b_control_tower :
29703: LD_ADDR_VAR 0 3
29707: PUSH
29708: LD_INT 1
29710: ST_TO_ADDR
29711: GO 29733
29713: LD_INT 36
29715: DOUBLE
29716: EQUAL
29717: IFTRUE 29721
29719: GO 29732
29721: POP
// places := 3 ; end ;
29722: LD_ADDR_VAR 0 3
29726: PUSH
29727: LD_INT 3
29729: ST_TO_ADDR
29730: GO 29733
29732: POP
// if places then
29733: LD_VAR 0 3
29737: IFFALSE 29760
// result := UnitsInside ( building ) < places ;
29739: LD_ADDR_VAR 0 2
29743: PUSH
29744: LD_VAR 0 1
29748: PPUSH
29749: CALL_OW 313
29753: PUSH
29754: LD_VAR 0 3
29758: LESS
29759: ST_TO_ADDR
// end ;
29760: LD_VAR 0 2
29764: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29765: LD_INT 0
29767: PPUSH
29768: PPUSH
29769: PPUSH
29770: PPUSH
// tmp := [ ] ;
29771: LD_ADDR_VAR 0 3
29775: PUSH
29776: EMPTY
29777: ST_TO_ADDR
// list := [ ] ;
29778: LD_ADDR_VAR 0 5
29782: PUSH
29783: EMPTY
29784: ST_TO_ADDR
// for i = 16 to 25 do
29785: LD_ADDR_VAR 0 4
29789: PUSH
29790: DOUBLE
29791: LD_INT 16
29793: DEC
29794: ST_TO_ADDR
29795: LD_INT 25
29797: PUSH
29798: FOR_TO
29799: IFFALSE 29872
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29801: LD_ADDR_VAR 0 3
29805: PUSH
29806: LD_VAR 0 3
29810: PUSH
29811: LD_INT 22
29813: PUSH
29814: LD_VAR 0 1
29818: PPUSH
29819: CALL_OW 255
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 91
29830: PUSH
29831: LD_VAR 0 1
29835: PUSH
29836: LD_INT 6
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 30
29846: PUSH
29847: LD_VAR 0 4
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: LIST
29860: PUSH
29861: EMPTY
29862: LIST
29863: PPUSH
29864: CALL_OW 69
29868: ADD
29869: ST_TO_ADDR
29870: GO 29798
29872: POP
29873: POP
// for i = 1 to tmp do
29874: LD_ADDR_VAR 0 4
29878: PUSH
29879: DOUBLE
29880: LD_INT 1
29882: DEC
29883: ST_TO_ADDR
29884: LD_VAR 0 3
29888: PUSH
29889: FOR_TO
29890: IFFALSE 29978
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29892: LD_ADDR_VAR 0 5
29896: PUSH
29897: LD_VAR 0 5
29901: PUSH
29902: LD_VAR 0 3
29906: PUSH
29907: LD_VAR 0 4
29911: ARRAY
29912: PPUSH
29913: CALL_OW 266
29917: PUSH
29918: LD_VAR 0 3
29922: PUSH
29923: LD_VAR 0 4
29927: ARRAY
29928: PPUSH
29929: CALL_OW 250
29933: PUSH
29934: LD_VAR 0 3
29938: PUSH
29939: LD_VAR 0 4
29943: ARRAY
29944: PPUSH
29945: CALL_OW 251
29949: PUSH
29950: LD_VAR 0 3
29954: PUSH
29955: LD_VAR 0 4
29959: ARRAY
29960: PPUSH
29961: CALL_OW 254
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: PUSH
29972: EMPTY
29973: LIST
29974: ADD
29975: ST_TO_ADDR
29976: GO 29889
29978: POP
29979: POP
// result := list ;
29980: LD_ADDR_VAR 0 2
29984: PUSH
29985: LD_VAR 0 5
29989: ST_TO_ADDR
// end ;
29990: LD_VAR 0 2
29994: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29995: LD_INT 0
29997: PPUSH
29998: PPUSH
29999: PPUSH
30000: PPUSH
30001: PPUSH
30002: PPUSH
30003: PPUSH
// if not factory then
30004: LD_VAR 0 1
30008: NOT
30009: IFFALSE 30013
// exit ;
30011: GO 30606
// if control = control_apeman then
30013: LD_VAR 0 4
30017: PUSH
30018: LD_INT 5
30020: EQUAL
30021: IFFALSE 30130
// begin tmp := UnitsInside ( factory ) ;
30023: LD_ADDR_VAR 0 8
30027: PUSH
30028: LD_VAR 0 1
30032: PPUSH
30033: CALL_OW 313
30037: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30038: LD_VAR 0 8
30042: PPUSH
30043: LD_INT 25
30045: PUSH
30046: LD_INT 12
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PPUSH
30053: CALL_OW 72
30057: NOT
30058: IFFALSE 30068
// control := control_manual ;
30060: LD_ADDR_VAR 0 4
30064: PUSH
30065: LD_INT 1
30067: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30068: LD_ADDR_VAR 0 8
30072: PUSH
30073: LD_VAR 0 1
30077: PPUSH
30078: CALL 29765 0 1
30082: ST_TO_ADDR
// if tmp then
30083: LD_VAR 0 8
30087: IFFALSE 30130
// begin for i in tmp do
30089: LD_ADDR_VAR 0 7
30093: PUSH
30094: LD_VAR 0 8
30098: PUSH
30099: FOR_IN
30100: IFFALSE 30128
// if i [ 1 ] = b_ext_radio then
30102: LD_VAR 0 7
30106: PUSH
30107: LD_INT 1
30109: ARRAY
30110: PUSH
30111: LD_INT 22
30113: EQUAL
30114: IFFALSE 30126
// begin control := control_remote ;
30116: LD_ADDR_VAR 0 4
30120: PUSH
30121: LD_INT 2
30123: ST_TO_ADDR
// break ;
30124: GO 30128
// end ;
30126: GO 30099
30128: POP
30129: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30130: LD_VAR 0 1
30134: PPUSH
30135: LD_VAR 0 2
30139: PPUSH
30140: LD_VAR 0 3
30144: PPUSH
30145: LD_VAR 0 4
30149: PPUSH
30150: LD_VAR 0 5
30154: PPUSH
30155: CALL_OW 448
30159: IFFALSE 30194
// begin result := [ chassis , engine , control , weapon ] ;
30161: LD_ADDR_VAR 0 6
30165: PUSH
30166: LD_VAR 0 2
30170: PUSH
30171: LD_VAR 0 3
30175: PUSH
30176: LD_VAR 0 4
30180: PUSH
30181: LD_VAR 0 5
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: ST_TO_ADDR
// exit ;
30192: GO 30606
// end ; _chassis := AvailableChassisList ( factory ) ;
30194: LD_ADDR_VAR 0 9
30198: PUSH
30199: LD_VAR 0 1
30203: PPUSH
30204: CALL_OW 475
30208: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30209: LD_ADDR_VAR 0 11
30213: PUSH
30214: LD_VAR 0 1
30218: PPUSH
30219: CALL_OW 476
30223: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30224: LD_ADDR_VAR 0 12
30228: PUSH
30229: LD_VAR 0 1
30233: PPUSH
30234: CALL_OW 477
30238: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30239: LD_ADDR_VAR 0 10
30243: PUSH
30244: LD_VAR 0 1
30248: PPUSH
30249: CALL_OW 478
30253: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30254: LD_VAR 0 9
30258: NOT
30259: PUSH
30260: LD_VAR 0 11
30264: NOT
30265: OR
30266: PUSH
30267: LD_VAR 0 12
30271: NOT
30272: OR
30273: PUSH
30274: LD_VAR 0 10
30278: NOT
30279: OR
30280: IFFALSE 30315
// begin result := [ chassis , engine , control , weapon ] ;
30282: LD_ADDR_VAR 0 6
30286: PUSH
30287: LD_VAR 0 2
30291: PUSH
30292: LD_VAR 0 3
30296: PUSH
30297: LD_VAR 0 4
30301: PUSH
30302: LD_VAR 0 5
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: ST_TO_ADDR
// exit ;
30313: GO 30606
// end ; if not chassis in _chassis then
30315: LD_VAR 0 2
30319: PUSH
30320: LD_VAR 0 9
30324: IN
30325: NOT
30326: IFFALSE 30352
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30328: LD_ADDR_VAR 0 2
30332: PUSH
30333: LD_VAR 0 9
30337: PUSH
30338: LD_INT 1
30340: PPUSH
30341: LD_VAR 0 9
30345: PPUSH
30346: CALL_OW 12
30350: ARRAY
30351: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30352: LD_VAR 0 2
30356: PPUSH
30357: LD_VAR 0 3
30361: PPUSH
30362: CALL 30611 0 2
30366: NOT
30367: IFFALSE 30426
// repeat engine := _engine [ 1 ] ;
30369: LD_ADDR_VAR 0 3
30373: PUSH
30374: LD_VAR 0 11
30378: PUSH
30379: LD_INT 1
30381: ARRAY
30382: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30383: LD_ADDR_VAR 0 11
30387: PUSH
30388: LD_VAR 0 11
30392: PPUSH
30393: LD_INT 1
30395: PPUSH
30396: CALL_OW 3
30400: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30401: LD_VAR 0 2
30405: PPUSH
30406: LD_VAR 0 3
30410: PPUSH
30411: CALL 30611 0 2
30415: PUSH
30416: LD_VAR 0 11
30420: PUSH
30421: EMPTY
30422: EQUAL
30423: OR
30424: IFFALSE 30369
// if not control in _control then
30426: LD_VAR 0 4
30430: PUSH
30431: LD_VAR 0 12
30435: IN
30436: NOT
30437: IFFALSE 30463
// control := _control [ rand ( 1 , _control ) ] ;
30439: LD_ADDR_VAR 0 4
30443: PUSH
30444: LD_VAR 0 12
30448: PUSH
30449: LD_INT 1
30451: PPUSH
30452: LD_VAR 0 12
30456: PPUSH
30457: CALL_OW 12
30461: ARRAY
30462: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30463: LD_VAR 0 2
30467: PPUSH
30468: LD_VAR 0 5
30472: PPUSH
30473: CALL 30831 0 2
30477: NOT
30478: IFFALSE 30537
// repeat weapon := _weapon [ 1 ] ;
30480: LD_ADDR_VAR 0 5
30484: PUSH
30485: LD_VAR 0 10
30489: PUSH
30490: LD_INT 1
30492: ARRAY
30493: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30494: LD_ADDR_VAR 0 10
30498: PUSH
30499: LD_VAR 0 10
30503: PPUSH
30504: LD_INT 1
30506: PPUSH
30507: CALL_OW 3
30511: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30512: LD_VAR 0 2
30516: PPUSH
30517: LD_VAR 0 5
30521: PPUSH
30522: CALL 30831 0 2
30526: PUSH
30527: LD_VAR 0 10
30531: PUSH
30532: EMPTY
30533: EQUAL
30534: OR
30535: IFFALSE 30480
// result := [ ] ;
30537: LD_ADDR_VAR 0 6
30541: PUSH
30542: EMPTY
30543: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30544: LD_VAR 0 1
30548: PPUSH
30549: LD_VAR 0 2
30553: PPUSH
30554: LD_VAR 0 3
30558: PPUSH
30559: LD_VAR 0 4
30563: PPUSH
30564: LD_VAR 0 5
30568: PPUSH
30569: CALL_OW 448
30573: IFFALSE 30606
// result := [ chassis , engine , control , weapon ] ;
30575: LD_ADDR_VAR 0 6
30579: PUSH
30580: LD_VAR 0 2
30584: PUSH
30585: LD_VAR 0 3
30589: PUSH
30590: LD_VAR 0 4
30594: PUSH
30595: LD_VAR 0 5
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: ST_TO_ADDR
// end ;
30606: LD_VAR 0 6
30610: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30611: LD_INT 0
30613: PPUSH
// if not chassis or not engine then
30614: LD_VAR 0 1
30618: NOT
30619: PUSH
30620: LD_VAR 0 2
30624: NOT
30625: OR
30626: IFFALSE 30630
// exit ;
30628: GO 30826
// case engine of engine_solar :
30630: LD_VAR 0 2
30634: PUSH
30635: LD_INT 2
30637: DOUBLE
30638: EQUAL
30639: IFTRUE 30643
30641: GO 30681
30643: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30644: LD_ADDR_VAR 0 3
30648: PUSH
30649: LD_INT 11
30651: PUSH
30652: LD_INT 12
30654: PUSH
30655: LD_INT 13
30657: PUSH
30658: LD_INT 14
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: LD_INT 2
30666: PUSH
30667: LD_INT 3
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: ST_TO_ADDR
30679: GO 30810
30681: LD_INT 1
30683: DOUBLE
30684: EQUAL
30685: IFTRUE 30689
30687: GO 30751
30689: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30690: LD_ADDR_VAR 0 3
30694: PUSH
30695: LD_INT 11
30697: PUSH
30698: LD_INT 12
30700: PUSH
30701: LD_INT 13
30703: PUSH
30704: LD_INT 14
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: LD_INT 2
30712: PUSH
30713: LD_INT 3
30715: PUSH
30716: LD_INT 4
30718: PUSH
30719: LD_INT 5
30721: PUSH
30722: LD_INT 21
30724: PUSH
30725: LD_INT 23
30727: PUSH
30728: LD_INT 22
30730: PUSH
30731: LD_INT 24
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: ST_TO_ADDR
30749: GO 30810
30751: LD_INT 3
30753: DOUBLE
30754: EQUAL
30755: IFTRUE 30759
30757: GO 30809
30759: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30760: LD_ADDR_VAR 0 3
30764: PUSH
30765: LD_INT 13
30767: PUSH
30768: LD_INT 14
30770: PUSH
30771: LD_INT 2
30773: PUSH
30774: LD_INT 3
30776: PUSH
30777: LD_INT 4
30779: PUSH
30780: LD_INT 5
30782: PUSH
30783: LD_INT 21
30785: PUSH
30786: LD_INT 22
30788: PUSH
30789: LD_INT 23
30791: PUSH
30792: LD_INT 24
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: ST_TO_ADDR
30807: GO 30810
30809: POP
// result := ( chassis in result ) ;
30810: LD_ADDR_VAR 0 3
30814: PUSH
30815: LD_VAR 0 1
30819: PUSH
30820: LD_VAR 0 3
30824: IN
30825: ST_TO_ADDR
// end ;
30826: LD_VAR 0 3
30830: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30831: LD_INT 0
30833: PPUSH
// if not chassis or not weapon then
30834: LD_VAR 0 1
30838: NOT
30839: PUSH
30840: LD_VAR 0 2
30844: NOT
30845: OR
30846: IFFALSE 30850
// exit ;
30848: GO 31912
// case weapon of us_machine_gun :
30850: LD_VAR 0 2
30854: PUSH
30855: LD_INT 2
30857: DOUBLE
30858: EQUAL
30859: IFTRUE 30863
30861: GO 30893
30863: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30864: LD_ADDR_VAR 0 3
30868: PUSH
30869: LD_INT 1
30871: PUSH
30872: LD_INT 2
30874: PUSH
30875: LD_INT 3
30877: PUSH
30878: LD_INT 4
30880: PUSH
30881: LD_INT 5
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: ST_TO_ADDR
30891: GO 31896
30893: LD_INT 3
30895: DOUBLE
30896: EQUAL
30897: IFTRUE 30901
30899: GO 30931
30901: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30902: LD_ADDR_VAR 0 3
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: LD_INT 2
30912: PUSH
30913: LD_INT 3
30915: PUSH
30916: LD_INT 4
30918: PUSH
30919: LD_INT 5
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: ST_TO_ADDR
30929: GO 31896
30931: LD_INT 11
30933: DOUBLE
30934: EQUAL
30935: IFTRUE 30939
30937: GO 30969
30939: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30940: LD_ADDR_VAR 0 3
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: LD_INT 2
30950: PUSH
30951: LD_INT 3
30953: PUSH
30954: LD_INT 4
30956: PUSH
30957: LD_INT 5
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: ST_TO_ADDR
30967: GO 31896
30969: LD_INT 4
30971: DOUBLE
30972: EQUAL
30973: IFTRUE 30977
30975: GO 31003
30977: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30978: LD_ADDR_VAR 0 3
30982: PUSH
30983: LD_INT 2
30985: PUSH
30986: LD_INT 3
30988: PUSH
30989: LD_INT 4
30991: PUSH
30992: LD_INT 5
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: ST_TO_ADDR
31001: GO 31896
31003: LD_INT 5
31005: DOUBLE
31006: EQUAL
31007: IFTRUE 31011
31009: GO 31037
31011: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31012: LD_ADDR_VAR 0 3
31016: PUSH
31017: LD_INT 2
31019: PUSH
31020: LD_INT 3
31022: PUSH
31023: LD_INT 4
31025: PUSH
31026: LD_INT 5
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: ST_TO_ADDR
31035: GO 31896
31037: LD_INT 9
31039: DOUBLE
31040: EQUAL
31041: IFTRUE 31045
31043: GO 31071
31045: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31046: LD_ADDR_VAR 0 3
31050: PUSH
31051: LD_INT 2
31053: PUSH
31054: LD_INT 3
31056: PUSH
31057: LD_INT 4
31059: PUSH
31060: LD_INT 5
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: ST_TO_ADDR
31069: GO 31896
31071: LD_INT 7
31073: DOUBLE
31074: EQUAL
31075: IFTRUE 31079
31077: GO 31105
31079: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31080: LD_ADDR_VAR 0 3
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: LD_INT 3
31090: PUSH
31091: LD_INT 4
31093: PUSH
31094: LD_INT 5
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: ST_TO_ADDR
31103: GO 31896
31105: LD_INT 12
31107: DOUBLE
31108: EQUAL
31109: IFTRUE 31113
31111: GO 31139
31113: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31114: LD_ADDR_VAR 0 3
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: LD_INT 3
31124: PUSH
31125: LD_INT 4
31127: PUSH
31128: LD_INT 5
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: ST_TO_ADDR
31137: GO 31896
31139: LD_INT 13
31141: DOUBLE
31142: EQUAL
31143: IFTRUE 31147
31145: GO 31173
31147: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31148: LD_ADDR_VAR 0 3
31152: PUSH
31153: LD_INT 2
31155: PUSH
31156: LD_INT 3
31158: PUSH
31159: LD_INT 4
31161: PUSH
31162: LD_INT 5
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: ST_TO_ADDR
31171: GO 31896
31173: LD_INT 14
31175: DOUBLE
31176: EQUAL
31177: IFTRUE 31181
31179: GO 31199
31181: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31182: LD_ADDR_VAR 0 3
31186: PUSH
31187: LD_INT 4
31189: PUSH
31190: LD_INT 5
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: ST_TO_ADDR
31197: GO 31896
31199: LD_INT 6
31201: DOUBLE
31202: EQUAL
31203: IFTRUE 31207
31205: GO 31225
31207: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31208: LD_ADDR_VAR 0 3
31212: PUSH
31213: LD_INT 4
31215: PUSH
31216: LD_INT 5
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: ST_TO_ADDR
31223: GO 31896
31225: LD_INT 10
31227: DOUBLE
31228: EQUAL
31229: IFTRUE 31233
31231: GO 31251
31233: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31234: LD_ADDR_VAR 0 3
31238: PUSH
31239: LD_INT 4
31241: PUSH
31242: LD_INT 5
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: ST_TO_ADDR
31249: GO 31896
31251: LD_INT 22
31253: DOUBLE
31254: EQUAL
31255: IFTRUE 31259
31257: GO 31285
31259: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31260: LD_ADDR_VAR 0 3
31264: PUSH
31265: LD_INT 11
31267: PUSH
31268: LD_INT 12
31270: PUSH
31271: LD_INT 13
31273: PUSH
31274: LD_INT 14
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: ST_TO_ADDR
31283: GO 31896
31285: LD_INT 23
31287: DOUBLE
31288: EQUAL
31289: IFTRUE 31293
31291: GO 31319
31293: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31294: LD_ADDR_VAR 0 3
31298: PUSH
31299: LD_INT 11
31301: PUSH
31302: LD_INT 12
31304: PUSH
31305: LD_INT 13
31307: PUSH
31308: LD_INT 14
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: ST_TO_ADDR
31317: GO 31896
31319: LD_INT 24
31321: DOUBLE
31322: EQUAL
31323: IFTRUE 31327
31325: GO 31353
31327: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31328: LD_ADDR_VAR 0 3
31332: PUSH
31333: LD_INT 11
31335: PUSH
31336: LD_INT 12
31338: PUSH
31339: LD_INT 13
31341: PUSH
31342: LD_INT 14
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: ST_TO_ADDR
31351: GO 31896
31353: LD_INT 30
31355: DOUBLE
31356: EQUAL
31357: IFTRUE 31361
31359: GO 31387
31361: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31362: LD_ADDR_VAR 0 3
31366: PUSH
31367: LD_INT 11
31369: PUSH
31370: LD_INT 12
31372: PUSH
31373: LD_INT 13
31375: PUSH
31376: LD_INT 14
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: ST_TO_ADDR
31385: GO 31896
31387: LD_INT 25
31389: DOUBLE
31390: EQUAL
31391: IFTRUE 31395
31393: GO 31413
31395: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31396: LD_ADDR_VAR 0 3
31400: PUSH
31401: LD_INT 13
31403: PUSH
31404: LD_INT 14
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: ST_TO_ADDR
31411: GO 31896
31413: LD_INT 27
31415: DOUBLE
31416: EQUAL
31417: IFTRUE 31421
31419: GO 31439
31421: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31422: LD_ADDR_VAR 0 3
31426: PUSH
31427: LD_INT 13
31429: PUSH
31430: LD_INT 14
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: ST_TO_ADDR
31437: GO 31896
31439: LD_EXP 29
31443: DOUBLE
31444: EQUAL
31445: IFTRUE 31449
31447: GO 31475
31449: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31450: LD_ADDR_VAR 0 3
31454: PUSH
31455: LD_INT 11
31457: PUSH
31458: LD_INT 12
31460: PUSH
31461: LD_INT 13
31463: PUSH
31464: LD_INT 14
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: ST_TO_ADDR
31473: GO 31896
31475: LD_INT 28
31477: DOUBLE
31478: EQUAL
31479: IFTRUE 31483
31481: GO 31501
31483: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31484: LD_ADDR_VAR 0 3
31488: PUSH
31489: LD_INT 13
31491: PUSH
31492: LD_INT 14
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: ST_TO_ADDR
31499: GO 31896
31501: LD_INT 29
31503: DOUBLE
31504: EQUAL
31505: IFTRUE 31509
31507: GO 31527
31509: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31510: LD_ADDR_VAR 0 3
31514: PUSH
31515: LD_INT 13
31517: PUSH
31518: LD_INT 14
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: ST_TO_ADDR
31525: GO 31896
31527: LD_INT 31
31529: DOUBLE
31530: EQUAL
31531: IFTRUE 31535
31533: GO 31553
31535: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31536: LD_ADDR_VAR 0 3
31540: PUSH
31541: LD_INT 13
31543: PUSH
31544: LD_INT 14
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: ST_TO_ADDR
31551: GO 31896
31553: LD_INT 26
31555: DOUBLE
31556: EQUAL
31557: IFTRUE 31561
31559: GO 31579
31561: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31562: LD_ADDR_VAR 0 3
31566: PUSH
31567: LD_INT 13
31569: PUSH
31570: LD_INT 14
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: ST_TO_ADDR
31577: GO 31896
31579: LD_INT 42
31581: DOUBLE
31582: EQUAL
31583: IFTRUE 31587
31585: GO 31613
31587: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31588: LD_ADDR_VAR 0 3
31592: PUSH
31593: LD_INT 21
31595: PUSH
31596: LD_INT 22
31598: PUSH
31599: LD_INT 23
31601: PUSH
31602: LD_INT 24
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: ST_TO_ADDR
31611: GO 31896
31613: LD_INT 43
31615: DOUBLE
31616: EQUAL
31617: IFTRUE 31621
31619: GO 31647
31621: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31622: LD_ADDR_VAR 0 3
31626: PUSH
31627: LD_INT 21
31629: PUSH
31630: LD_INT 22
31632: PUSH
31633: LD_INT 23
31635: PUSH
31636: LD_INT 24
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: ST_TO_ADDR
31645: GO 31896
31647: LD_INT 44
31649: DOUBLE
31650: EQUAL
31651: IFTRUE 31655
31653: GO 31681
31655: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31656: LD_ADDR_VAR 0 3
31660: PUSH
31661: LD_INT 21
31663: PUSH
31664: LD_INT 22
31666: PUSH
31667: LD_INT 23
31669: PUSH
31670: LD_INT 24
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: ST_TO_ADDR
31679: GO 31896
31681: LD_INT 45
31683: DOUBLE
31684: EQUAL
31685: IFTRUE 31689
31687: GO 31715
31689: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31690: LD_ADDR_VAR 0 3
31694: PUSH
31695: LD_INT 21
31697: PUSH
31698: LD_INT 22
31700: PUSH
31701: LD_INT 23
31703: PUSH
31704: LD_INT 24
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: ST_TO_ADDR
31713: GO 31896
31715: LD_INT 49
31717: DOUBLE
31718: EQUAL
31719: IFTRUE 31723
31721: GO 31749
31723: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31724: LD_ADDR_VAR 0 3
31728: PUSH
31729: LD_INT 21
31731: PUSH
31732: LD_INT 22
31734: PUSH
31735: LD_INT 23
31737: PUSH
31738: LD_INT 24
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: ST_TO_ADDR
31747: GO 31896
31749: LD_INT 51
31751: DOUBLE
31752: EQUAL
31753: IFTRUE 31757
31755: GO 31783
31757: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31758: LD_ADDR_VAR 0 3
31762: PUSH
31763: LD_INT 21
31765: PUSH
31766: LD_INT 22
31768: PUSH
31769: LD_INT 23
31771: PUSH
31772: LD_INT 24
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: ST_TO_ADDR
31781: GO 31896
31783: LD_INT 52
31785: DOUBLE
31786: EQUAL
31787: IFTRUE 31791
31789: GO 31817
31791: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31792: LD_ADDR_VAR 0 3
31796: PUSH
31797: LD_INT 21
31799: PUSH
31800: LD_INT 22
31802: PUSH
31803: LD_INT 23
31805: PUSH
31806: LD_INT 24
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: ST_TO_ADDR
31815: GO 31896
31817: LD_INT 53
31819: DOUBLE
31820: EQUAL
31821: IFTRUE 31825
31823: GO 31843
31825: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31826: LD_ADDR_VAR 0 3
31830: PUSH
31831: LD_INT 23
31833: PUSH
31834: LD_INT 24
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: ST_TO_ADDR
31841: GO 31896
31843: LD_INT 46
31845: DOUBLE
31846: EQUAL
31847: IFTRUE 31851
31849: GO 31869
31851: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31852: LD_ADDR_VAR 0 3
31856: PUSH
31857: LD_INT 23
31859: PUSH
31860: LD_INT 24
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: ST_TO_ADDR
31867: GO 31896
31869: LD_INT 47
31871: DOUBLE
31872: EQUAL
31873: IFTRUE 31877
31875: GO 31895
31877: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31878: LD_ADDR_VAR 0 3
31882: PUSH
31883: LD_INT 23
31885: PUSH
31886: LD_INT 24
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: ST_TO_ADDR
31893: GO 31896
31895: POP
// result := ( chassis in result ) ;
31896: LD_ADDR_VAR 0 3
31900: PUSH
31901: LD_VAR 0 1
31905: PUSH
31906: LD_VAR 0 3
31910: IN
31911: ST_TO_ADDR
// end ;
31912: LD_VAR 0 3
31916: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31917: LD_INT 0
31919: PPUSH
31920: PPUSH
31921: PPUSH
31922: PPUSH
31923: PPUSH
31924: PPUSH
31925: PPUSH
// result := array ;
31926: LD_ADDR_VAR 0 5
31930: PUSH
31931: LD_VAR 0 1
31935: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31936: LD_VAR 0 1
31940: NOT
31941: PUSH
31942: LD_VAR 0 2
31946: NOT
31947: OR
31948: PUSH
31949: LD_VAR 0 3
31953: NOT
31954: OR
31955: PUSH
31956: LD_VAR 0 2
31960: PUSH
31961: LD_VAR 0 1
31965: GREATER
31966: OR
31967: PUSH
31968: LD_VAR 0 3
31972: PUSH
31973: LD_VAR 0 1
31977: GREATER
31978: OR
31979: IFFALSE 31983
// exit ;
31981: GO 32279
// if direction then
31983: LD_VAR 0 4
31987: IFFALSE 32051
// begin d := 1 ;
31989: LD_ADDR_VAR 0 9
31993: PUSH
31994: LD_INT 1
31996: ST_TO_ADDR
// if i_from > i_to then
31997: LD_VAR 0 2
32001: PUSH
32002: LD_VAR 0 3
32006: GREATER
32007: IFFALSE 32033
// length := ( array - i_from ) + i_to else
32009: LD_ADDR_VAR 0 11
32013: PUSH
32014: LD_VAR 0 1
32018: PUSH
32019: LD_VAR 0 2
32023: MINUS
32024: PUSH
32025: LD_VAR 0 3
32029: PLUS
32030: ST_TO_ADDR
32031: GO 32049
// length := i_to - i_from ;
32033: LD_ADDR_VAR 0 11
32037: PUSH
32038: LD_VAR 0 3
32042: PUSH
32043: LD_VAR 0 2
32047: MINUS
32048: ST_TO_ADDR
// end else
32049: GO 32112
// begin d := - 1 ;
32051: LD_ADDR_VAR 0 9
32055: PUSH
32056: LD_INT 1
32058: NEG
32059: ST_TO_ADDR
// if i_from > i_to then
32060: LD_VAR 0 2
32064: PUSH
32065: LD_VAR 0 3
32069: GREATER
32070: IFFALSE 32090
// length := i_from - i_to else
32072: LD_ADDR_VAR 0 11
32076: PUSH
32077: LD_VAR 0 2
32081: PUSH
32082: LD_VAR 0 3
32086: MINUS
32087: ST_TO_ADDR
32088: GO 32112
// length := ( array - i_to ) + i_from ;
32090: LD_ADDR_VAR 0 11
32094: PUSH
32095: LD_VAR 0 1
32099: PUSH
32100: LD_VAR 0 3
32104: MINUS
32105: PUSH
32106: LD_VAR 0 2
32110: PLUS
32111: ST_TO_ADDR
// end ; if not length then
32112: LD_VAR 0 11
32116: NOT
32117: IFFALSE 32121
// exit ;
32119: GO 32279
// tmp := array ;
32121: LD_ADDR_VAR 0 10
32125: PUSH
32126: LD_VAR 0 1
32130: ST_TO_ADDR
// for i = 1 to length do
32131: LD_ADDR_VAR 0 6
32135: PUSH
32136: DOUBLE
32137: LD_INT 1
32139: DEC
32140: ST_TO_ADDR
32141: LD_VAR 0 11
32145: PUSH
32146: FOR_TO
32147: IFFALSE 32267
// begin for j = 1 to array do
32149: LD_ADDR_VAR 0 7
32153: PUSH
32154: DOUBLE
32155: LD_INT 1
32157: DEC
32158: ST_TO_ADDR
32159: LD_VAR 0 1
32163: PUSH
32164: FOR_TO
32165: IFFALSE 32253
// begin k := j + d ;
32167: LD_ADDR_VAR 0 8
32171: PUSH
32172: LD_VAR 0 7
32176: PUSH
32177: LD_VAR 0 9
32181: PLUS
32182: ST_TO_ADDR
// if k > array then
32183: LD_VAR 0 8
32187: PUSH
32188: LD_VAR 0 1
32192: GREATER
32193: IFFALSE 32203
// k := 1 ;
32195: LD_ADDR_VAR 0 8
32199: PUSH
32200: LD_INT 1
32202: ST_TO_ADDR
// if not k then
32203: LD_VAR 0 8
32207: NOT
32208: IFFALSE 32220
// k := array ;
32210: LD_ADDR_VAR 0 8
32214: PUSH
32215: LD_VAR 0 1
32219: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32220: LD_ADDR_VAR 0 10
32224: PUSH
32225: LD_VAR 0 10
32229: PPUSH
32230: LD_VAR 0 8
32234: PPUSH
32235: LD_VAR 0 1
32239: PUSH
32240: LD_VAR 0 7
32244: ARRAY
32245: PPUSH
32246: CALL_OW 1
32250: ST_TO_ADDR
// end ;
32251: GO 32164
32253: POP
32254: POP
// array := tmp ;
32255: LD_ADDR_VAR 0 1
32259: PUSH
32260: LD_VAR 0 10
32264: ST_TO_ADDR
// end ;
32265: GO 32146
32267: POP
32268: POP
// result := array ;
32269: LD_ADDR_VAR 0 5
32273: PUSH
32274: LD_VAR 0 1
32278: ST_TO_ADDR
// end ;
32279: LD_VAR 0 5
32283: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32284: LD_INT 0
32286: PPUSH
32287: PPUSH
// result := 0 ;
32288: LD_ADDR_VAR 0 3
32292: PUSH
32293: LD_INT 0
32295: ST_TO_ADDR
// if not array or not value in array then
32296: LD_VAR 0 1
32300: NOT
32301: PUSH
32302: LD_VAR 0 2
32306: PUSH
32307: LD_VAR 0 1
32311: IN
32312: NOT
32313: OR
32314: IFFALSE 32318
// exit ;
32316: GO 32372
// for i = 1 to array do
32318: LD_ADDR_VAR 0 4
32322: PUSH
32323: DOUBLE
32324: LD_INT 1
32326: DEC
32327: ST_TO_ADDR
32328: LD_VAR 0 1
32332: PUSH
32333: FOR_TO
32334: IFFALSE 32370
// if value = array [ i ] then
32336: LD_VAR 0 2
32340: PUSH
32341: LD_VAR 0 1
32345: PUSH
32346: LD_VAR 0 4
32350: ARRAY
32351: EQUAL
32352: IFFALSE 32368
// begin result := i ;
32354: LD_ADDR_VAR 0 3
32358: PUSH
32359: LD_VAR 0 4
32363: ST_TO_ADDR
// exit ;
32364: POP
32365: POP
32366: GO 32372
// end ;
32368: GO 32333
32370: POP
32371: POP
// end ;
32372: LD_VAR 0 3
32376: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32377: LD_INT 0
32379: PPUSH
// vc_chassis := chassis ;
32380: LD_ADDR_OWVAR 37
32384: PUSH
32385: LD_VAR 0 1
32389: ST_TO_ADDR
// vc_engine := engine ;
32390: LD_ADDR_OWVAR 39
32394: PUSH
32395: LD_VAR 0 2
32399: ST_TO_ADDR
// vc_control := control ;
32400: LD_ADDR_OWVAR 38
32404: PUSH
32405: LD_VAR 0 3
32409: ST_TO_ADDR
// vc_weapon := weapon ;
32410: LD_ADDR_OWVAR 40
32414: PUSH
32415: LD_VAR 0 4
32419: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32420: LD_ADDR_OWVAR 41
32424: PUSH
32425: LD_VAR 0 5
32429: ST_TO_ADDR
// end ;
32430: LD_VAR 0 6
32434: RET
// export function WantPlant ( unit ) ; var task ; begin
32435: LD_INT 0
32437: PPUSH
32438: PPUSH
// result := false ;
32439: LD_ADDR_VAR 0 2
32443: PUSH
32444: LD_INT 0
32446: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32447: LD_ADDR_VAR 0 3
32451: PUSH
32452: LD_VAR 0 1
32456: PPUSH
32457: CALL_OW 437
32461: ST_TO_ADDR
// if task then
32462: LD_VAR 0 3
32466: IFFALSE 32494
// if task [ 1 ] [ 1 ] = p then
32468: LD_VAR 0 3
32472: PUSH
32473: LD_INT 1
32475: ARRAY
32476: PUSH
32477: LD_INT 1
32479: ARRAY
32480: PUSH
32481: LD_STRING p
32483: EQUAL
32484: IFFALSE 32494
// result := true ;
32486: LD_ADDR_VAR 0 2
32490: PUSH
32491: LD_INT 1
32493: ST_TO_ADDR
// end ;
32494: LD_VAR 0 2
32498: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32499: LD_INT 0
32501: PPUSH
32502: PPUSH
32503: PPUSH
32504: PPUSH
// if pos < 1 then
32505: LD_VAR 0 2
32509: PUSH
32510: LD_INT 1
32512: LESS
32513: IFFALSE 32517
// exit ;
32515: GO 32820
// if pos = 1 then
32517: LD_VAR 0 2
32521: PUSH
32522: LD_INT 1
32524: EQUAL
32525: IFFALSE 32558
// result := Replace ( arr , pos [ 1 ] , value ) else
32527: LD_ADDR_VAR 0 4
32531: PUSH
32532: LD_VAR 0 1
32536: PPUSH
32537: LD_VAR 0 2
32541: PUSH
32542: LD_INT 1
32544: ARRAY
32545: PPUSH
32546: LD_VAR 0 3
32550: PPUSH
32551: CALL_OW 1
32555: ST_TO_ADDR
32556: GO 32820
// begin tmp := arr ;
32558: LD_ADDR_VAR 0 6
32562: PUSH
32563: LD_VAR 0 1
32567: ST_TO_ADDR
// s_arr := [ tmp ] ;
32568: LD_ADDR_VAR 0 7
32572: PUSH
32573: LD_VAR 0 6
32577: PUSH
32578: EMPTY
32579: LIST
32580: ST_TO_ADDR
// for i = 1 to pos - 1 do
32581: LD_ADDR_VAR 0 5
32585: PUSH
32586: DOUBLE
32587: LD_INT 1
32589: DEC
32590: ST_TO_ADDR
32591: LD_VAR 0 2
32595: PUSH
32596: LD_INT 1
32598: MINUS
32599: PUSH
32600: FOR_TO
32601: IFFALSE 32646
// begin tmp := tmp [ pos [ i ] ] ;
32603: LD_ADDR_VAR 0 6
32607: PUSH
32608: LD_VAR 0 6
32612: PUSH
32613: LD_VAR 0 2
32617: PUSH
32618: LD_VAR 0 5
32622: ARRAY
32623: ARRAY
32624: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32625: LD_ADDR_VAR 0 7
32629: PUSH
32630: LD_VAR 0 7
32634: PUSH
32635: LD_VAR 0 6
32639: PUSH
32640: EMPTY
32641: LIST
32642: ADD
32643: ST_TO_ADDR
// end ;
32644: GO 32600
32646: POP
32647: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32648: LD_ADDR_VAR 0 6
32652: PUSH
32653: LD_VAR 0 6
32657: PPUSH
32658: LD_VAR 0 2
32662: PUSH
32663: LD_VAR 0 2
32667: ARRAY
32668: PPUSH
32669: LD_VAR 0 3
32673: PPUSH
32674: CALL_OW 1
32678: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32679: LD_ADDR_VAR 0 7
32683: PUSH
32684: LD_VAR 0 7
32688: PPUSH
32689: LD_VAR 0 7
32693: PPUSH
32694: LD_VAR 0 6
32698: PPUSH
32699: CALL_OW 1
32703: ST_TO_ADDR
// for i = s_arr downto 2 do
32704: LD_ADDR_VAR 0 5
32708: PUSH
32709: DOUBLE
32710: LD_VAR 0 7
32714: INC
32715: ST_TO_ADDR
32716: LD_INT 2
32718: PUSH
32719: FOR_DOWNTO
32720: IFFALSE 32804
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32722: LD_ADDR_VAR 0 6
32726: PUSH
32727: LD_VAR 0 7
32731: PUSH
32732: LD_VAR 0 5
32736: PUSH
32737: LD_INT 1
32739: MINUS
32740: ARRAY
32741: PPUSH
32742: LD_VAR 0 2
32746: PUSH
32747: LD_VAR 0 5
32751: PUSH
32752: LD_INT 1
32754: MINUS
32755: ARRAY
32756: PPUSH
32757: LD_VAR 0 7
32761: PUSH
32762: LD_VAR 0 5
32766: ARRAY
32767: PPUSH
32768: CALL_OW 1
32772: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32773: LD_ADDR_VAR 0 7
32777: PUSH
32778: LD_VAR 0 7
32782: PPUSH
32783: LD_VAR 0 5
32787: PUSH
32788: LD_INT 1
32790: MINUS
32791: PPUSH
32792: LD_VAR 0 6
32796: PPUSH
32797: CALL_OW 1
32801: ST_TO_ADDR
// end ;
32802: GO 32719
32804: POP
32805: POP
// result := s_arr [ 1 ] ;
32806: LD_ADDR_VAR 0 4
32810: PUSH
32811: LD_VAR 0 7
32815: PUSH
32816: LD_INT 1
32818: ARRAY
32819: ST_TO_ADDR
// end ; end ;
32820: LD_VAR 0 4
32824: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32825: LD_INT 0
32827: PPUSH
32828: PPUSH
// if not list then
32829: LD_VAR 0 1
32833: NOT
32834: IFFALSE 32838
// exit ;
32836: GO 32929
// i := list [ pos1 ] ;
32838: LD_ADDR_VAR 0 5
32842: PUSH
32843: LD_VAR 0 1
32847: PUSH
32848: LD_VAR 0 2
32852: ARRAY
32853: ST_TO_ADDR
// if not i then
32854: LD_VAR 0 5
32858: NOT
32859: IFFALSE 32863
// exit ;
32861: GO 32929
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32863: LD_ADDR_VAR 0 1
32867: PUSH
32868: LD_VAR 0 1
32872: PPUSH
32873: LD_VAR 0 2
32877: PPUSH
32878: LD_VAR 0 1
32882: PUSH
32883: LD_VAR 0 3
32887: ARRAY
32888: PPUSH
32889: CALL_OW 1
32893: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32894: LD_ADDR_VAR 0 1
32898: PUSH
32899: LD_VAR 0 1
32903: PPUSH
32904: LD_VAR 0 3
32908: PPUSH
32909: LD_VAR 0 5
32913: PPUSH
32914: CALL_OW 1
32918: ST_TO_ADDR
// result := list ;
32919: LD_ADDR_VAR 0 4
32923: PUSH
32924: LD_VAR 0 1
32928: ST_TO_ADDR
// end ;
32929: LD_VAR 0 4
32933: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32934: LD_INT 0
32936: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32937: LD_ADDR_VAR 0 5
32941: PUSH
32942: LD_VAR 0 1
32946: PPUSH
32947: CALL_OW 250
32951: PPUSH
32952: LD_VAR 0 1
32956: PPUSH
32957: CALL_OW 251
32961: PPUSH
32962: LD_VAR 0 2
32966: PPUSH
32967: LD_VAR 0 3
32971: PPUSH
32972: LD_VAR 0 4
32976: PPUSH
32977: CALL 32987 0 5
32981: ST_TO_ADDR
// end ;
32982: LD_VAR 0 5
32986: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32987: LD_INT 0
32989: PPUSH
32990: PPUSH
32991: PPUSH
32992: PPUSH
// if not list then
32993: LD_VAR 0 3
32997: NOT
32998: IFFALSE 33002
// exit ;
33000: GO 33390
// result := [ ] ;
33002: LD_ADDR_VAR 0 6
33006: PUSH
33007: EMPTY
33008: ST_TO_ADDR
// for i in list do
33009: LD_ADDR_VAR 0 7
33013: PUSH
33014: LD_VAR 0 3
33018: PUSH
33019: FOR_IN
33020: IFFALSE 33222
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33022: LD_ADDR_VAR 0 9
33026: PUSH
33027: LD_VAR 0 7
33031: PPUSH
33032: LD_VAR 0 1
33036: PPUSH
33037: LD_VAR 0 2
33041: PPUSH
33042: CALL_OW 297
33046: ST_TO_ADDR
// if not result then
33047: LD_VAR 0 6
33051: NOT
33052: IFFALSE 33078
// result := [ [ i , tmp ] ] else
33054: LD_ADDR_VAR 0 6
33058: PUSH
33059: LD_VAR 0 7
33063: PUSH
33064: LD_VAR 0 9
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: EMPTY
33074: LIST
33075: ST_TO_ADDR
33076: GO 33220
// begin if result [ result ] [ 2 ] < tmp then
33078: LD_VAR 0 6
33082: PUSH
33083: LD_VAR 0 6
33087: ARRAY
33088: PUSH
33089: LD_INT 2
33091: ARRAY
33092: PUSH
33093: LD_VAR 0 9
33097: LESS
33098: IFFALSE 33140
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33100: LD_ADDR_VAR 0 6
33104: PUSH
33105: LD_VAR 0 6
33109: PPUSH
33110: LD_VAR 0 6
33114: PUSH
33115: LD_INT 1
33117: PLUS
33118: PPUSH
33119: LD_VAR 0 7
33123: PUSH
33124: LD_VAR 0 9
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PPUSH
33133: CALL_OW 2
33137: ST_TO_ADDR
33138: GO 33220
// for j = 1 to result do
33140: LD_ADDR_VAR 0 8
33144: PUSH
33145: DOUBLE
33146: LD_INT 1
33148: DEC
33149: ST_TO_ADDR
33150: LD_VAR 0 6
33154: PUSH
33155: FOR_TO
33156: IFFALSE 33218
// begin if tmp < result [ j ] [ 2 ] then
33158: LD_VAR 0 9
33162: PUSH
33163: LD_VAR 0 6
33167: PUSH
33168: LD_VAR 0 8
33172: ARRAY
33173: PUSH
33174: LD_INT 2
33176: ARRAY
33177: LESS
33178: IFFALSE 33216
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33180: LD_ADDR_VAR 0 6
33184: PUSH
33185: LD_VAR 0 6
33189: PPUSH
33190: LD_VAR 0 8
33194: PPUSH
33195: LD_VAR 0 7
33199: PUSH
33200: LD_VAR 0 9
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PPUSH
33209: CALL_OW 2
33213: ST_TO_ADDR
// break ;
33214: GO 33218
// end ; end ;
33216: GO 33155
33218: POP
33219: POP
// end ; end ;
33220: GO 33019
33222: POP
33223: POP
// if result and not asc then
33224: LD_VAR 0 6
33228: PUSH
33229: LD_VAR 0 4
33233: NOT
33234: AND
33235: IFFALSE 33310
// begin tmp := result ;
33237: LD_ADDR_VAR 0 9
33241: PUSH
33242: LD_VAR 0 6
33246: ST_TO_ADDR
// for i = tmp downto 1 do
33247: LD_ADDR_VAR 0 7
33251: PUSH
33252: DOUBLE
33253: LD_VAR 0 9
33257: INC
33258: ST_TO_ADDR
33259: LD_INT 1
33261: PUSH
33262: FOR_DOWNTO
33263: IFFALSE 33308
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33265: LD_ADDR_VAR 0 6
33269: PUSH
33270: LD_VAR 0 6
33274: PPUSH
33275: LD_VAR 0 9
33279: PUSH
33280: LD_VAR 0 7
33284: MINUS
33285: PUSH
33286: LD_INT 1
33288: PLUS
33289: PPUSH
33290: LD_VAR 0 9
33294: PUSH
33295: LD_VAR 0 7
33299: ARRAY
33300: PPUSH
33301: CALL_OW 1
33305: ST_TO_ADDR
33306: GO 33262
33308: POP
33309: POP
// end ; tmp := [ ] ;
33310: LD_ADDR_VAR 0 9
33314: PUSH
33315: EMPTY
33316: ST_TO_ADDR
// if mode then
33317: LD_VAR 0 5
33321: IFFALSE 33390
// begin for i = 1 to result do
33323: LD_ADDR_VAR 0 7
33327: PUSH
33328: DOUBLE
33329: LD_INT 1
33331: DEC
33332: ST_TO_ADDR
33333: LD_VAR 0 6
33337: PUSH
33338: FOR_TO
33339: IFFALSE 33378
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33341: LD_ADDR_VAR 0 9
33345: PUSH
33346: LD_VAR 0 9
33350: PPUSH
33351: LD_VAR 0 7
33355: PPUSH
33356: LD_VAR 0 6
33360: PUSH
33361: LD_VAR 0 7
33365: ARRAY
33366: PUSH
33367: LD_INT 1
33369: ARRAY
33370: PPUSH
33371: CALL_OW 1
33375: ST_TO_ADDR
33376: GO 33338
33378: POP
33379: POP
// result := tmp ;
33380: LD_ADDR_VAR 0 6
33384: PUSH
33385: LD_VAR 0 9
33389: ST_TO_ADDR
// end ; end ;
33390: LD_VAR 0 6
33394: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33395: LD_INT 0
33397: PPUSH
33398: PPUSH
33399: PPUSH
33400: PPUSH
33401: PPUSH
33402: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33403: LD_ADDR_VAR 0 5
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: LD_INT 0
33416: PUSH
33417: EMPTY
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: ST_TO_ADDR
// if not x or not y then
33425: LD_VAR 0 2
33429: NOT
33430: PUSH
33431: LD_VAR 0 3
33435: NOT
33436: OR
33437: IFFALSE 33441
// exit ;
33439: GO 35093
// if not range then
33441: LD_VAR 0 4
33445: NOT
33446: IFFALSE 33456
// range := 10 ;
33448: LD_ADDR_VAR 0 4
33452: PUSH
33453: LD_INT 10
33455: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33456: LD_ADDR_VAR 0 8
33460: PUSH
33461: LD_INT 81
33463: PUSH
33464: LD_VAR 0 1
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 92
33475: PUSH
33476: LD_VAR 0 2
33480: PUSH
33481: LD_VAR 0 3
33485: PUSH
33486: LD_VAR 0 4
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 3
33499: PUSH
33500: LD_INT 21
33502: PUSH
33503: LD_INT 3
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: LIST
33518: PPUSH
33519: CALL_OW 69
33523: ST_TO_ADDR
// if not tmp then
33524: LD_VAR 0 8
33528: NOT
33529: IFFALSE 33533
// exit ;
33531: GO 35093
// for i in tmp do
33533: LD_ADDR_VAR 0 6
33537: PUSH
33538: LD_VAR 0 8
33542: PUSH
33543: FOR_IN
33544: IFFALSE 35068
// begin points := [ 0 , 0 , 0 ] ;
33546: LD_ADDR_VAR 0 9
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: LIST
33564: ST_TO_ADDR
// bpoints := 1 ;
33565: LD_ADDR_VAR 0 10
33569: PUSH
33570: LD_INT 1
33572: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33573: LD_VAR 0 6
33577: PPUSH
33578: CALL_OW 247
33582: PUSH
33583: LD_INT 1
33585: DOUBLE
33586: EQUAL
33587: IFTRUE 33591
33589: GO 34169
33591: POP
// begin if GetClass ( i ) = 1 then
33592: LD_VAR 0 6
33596: PPUSH
33597: CALL_OW 257
33601: PUSH
33602: LD_INT 1
33604: EQUAL
33605: IFFALSE 33626
// points := [ 10 , 5 , 3 ] ;
33607: LD_ADDR_VAR 0 9
33611: PUSH
33612: LD_INT 10
33614: PUSH
33615: LD_INT 5
33617: PUSH
33618: LD_INT 3
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: LIST
33625: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33626: LD_VAR 0 6
33630: PPUSH
33631: CALL_OW 257
33635: PUSH
33636: LD_INT 2
33638: PUSH
33639: LD_INT 3
33641: PUSH
33642: LD_INT 4
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: LIST
33649: IN
33650: IFFALSE 33671
// points := [ 3 , 2 , 1 ] ;
33652: LD_ADDR_VAR 0 9
33656: PUSH
33657: LD_INT 3
33659: PUSH
33660: LD_INT 2
33662: PUSH
33663: LD_INT 1
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: LIST
33670: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33671: LD_VAR 0 6
33675: PPUSH
33676: CALL_OW 257
33680: PUSH
33681: LD_INT 5
33683: EQUAL
33684: IFFALSE 33705
// points := [ 130 , 5 , 2 ] ;
33686: LD_ADDR_VAR 0 9
33690: PUSH
33691: LD_INT 130
33693: PUSH
33694: LD_INT 5
33696: PUSH
33697: LD_INT 2
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33705: LD_VAR 0 6
33709: PPUSH
33710: CALL_OW 257
33714: PUSH
33715: LD_INT 8
33717: EQUAL
33718: IFFALSE 33739
// points := [ 35 , 35 , 30 ] ;
33720: LD_ADDR_VAR 0 9
33724: PUSH
33725: LD_INT 35
33727: PUSH
33728: LD_INT 35
33730: PUSH
33731: LD_INT 30
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: LIST
33738: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33739: LD_VAR 0 6
33743: PPUSH
33744: CALL_OW 257
33748: PUSH
33749: LD_INT 9
33751: EQUAL
33752: IFFALSE 33773
// points := [ 20 , 55 , 40 ] ;
33754: LD_ADDR_VAR 0 9
33758: PUSH
33759: LD_INT 20
33761: PUSH
33762: LD_INT 55
33764: PUSH
33765: LD_INT 40
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: LIST
33772: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33773: LD_VAR 0 6
33777: PPUSH
33778: CALL_OW 257
33782: PUSH
33783: LD_INT 12
33785: PUSH
33786: LD_INT 16
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: IN
33793: IFFALSE 33814
// points := [ 5 , 3 , 2 ] ;
33795: LD_ADDR_VAR 0 9
33799: PUSH
33800: LD_INT 5
33802: PUSH
33803: LD_INT 3
33805: PUSH
33806: LD_INT 2
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: LIST
33813: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33814: LD_VAR 0 6
33818: PPUSH
33819: CALL_OW 257
33823: PUSH
33824: LD_INT 17
33826: EQUAL
33827: IFFALSE 33848
// points := [ 100 , 50 , 75 ] ;
33829: LD_ADDR_VAR 0 9
33833: PUSH
33834: LD_INT 100
33836: PUSH
33837: LD_INT 50
33839: PUSH
33840: LD_INT 75
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: LIST
33847: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33848: LD_VAR 0 6
33852: PPUSH
33853: CALL_OW 257
33857: PUSH
33858: LD_INT 15
33860: EQUAL
33861: IFFALSE 33882
// points := [ 10 , 5 , 3 ] ;
33863: LD_ADDR_VAR 0 9
33867: PUSH
33868: LD_INT 10
33870: PUSH
33871: LD_INT 5
33873: PUSH
33874: LD_INT 3
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: LIST
33881: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33882: LD_VAR 0 6
33886: PPUSH
33887: CALL_OW 257
33891: PUSH
33892: LD_INT 14
33894: EQUAL
33895: IFFALSE 33916
// points := [ 10 , 0 , 0 ] ;
33897: LD_ADDR_VAR 0 9
33901: PUSH
33902: LD_INT 10
33904: PUSH
33905: LD_INT 0
33907: PUSH
33908: LD_INT 0
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: LIST
33915: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33916: LD_VAR 0 6
33920: PPUSH
33921: CALL_OW 257
33925: PUSH
33926: LD_INT 11
33928: EQUAL
33929: IFFALSE 33950
// points := [ 30 , 10 , 5 ] ;
33931: LD_ADDR_VAR 0 9
33935: PUSH
33936: LD_INT 30
33938: PUSH
33939: LD_INT 10
33941: PUSH
33942: LD_INT 5
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: LIST
33949: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33950: LD_VAR 0 1
33954: PPUSH
33955: LD_INT 5
33957: PPUSH
33958: CALL_OW 321
33962: PUSH
33963: LD_INT 2
33965: EQUAL
33966: IFFALSE 33983
// bpoints := bpoints * 1.8 ;
33968: LD_ADDR_VAR 0 10
33972: PUSH
33973: LD_VAR 0 10
33977: PUSH
33978: LD_REAL  1.80000000000000E+0000
33981: MUL
33982: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33983: LD_VAR 0 6
33987: PPUSH
33988: CALL_OW 257
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: LD_INT 2
33998: PUSH
33999: LD_INT 3
34001: PUSH
34002: LD_INT 4
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: IN
34011: PUSH
34012: LD_VAR 0 1
34016: PPUSH
34017: LD_INT 51
34019: PPUSH
34020: CALL_OW 321
34024: PUSH
34025: LD_INT 2
34027: EQUAL
34028: AND
34029: IFFALSE 34046
// bpoints := bpoints * 1.2 ;
34031: LD_ADDR_VAR 0 10
34035: PUSH
34036: LD_VAR 0 10
34040: PUSH
34041: LD_REAL  1.20000000000000E+0000
34044: MUL
34045: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34046: LD_VAR 0 6
34050: PPUSH
34051: CALL_OW 257
34055: PUSH
34056: LD_INT 5
34058: PUSH
34059: LD_INT 7
34061: PUSH
34062: LD_INT 9
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: LIST
34069: IN
34070: PUSH
34071: LD_VAR 0 1
34075: PPUSH
34076: LD_INT 52
34078: PPUSH
34079: CALL_OW 321
34083: PUSH
34084: LD_INT 2
34086: EQUAL
34087: AND
34088: IFFALSE 34105
// bpoints := bpoints * 1.5 ;
34090: LD_ADDR_VAR 0 10
34094: PUSH
34095: LD_VAR 0 10
34099: PUSH
34100: LD_REAL  1.50000000000000E+0000
34103: MUL
34104: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34105: LD_VAR 0 1
34109: PPUSH
34110: LD_INT 66
34112: PPUSH
34113: CALL_OW 321
34117: PUSH
34118: LD_INT 2
34120: EQUAL
34121: IFFALSE 34138
// bpoints := bpoints * 1.1 ;
34123: LD_ADDR_VAR 0 10
34127: PUSH
34128: LD_VAR 0 10
34132: PUSH
34133: LD_REAL  1.10000000000000E+0000
34136: MUL
34137: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34138: LD_ADDR_VAR 0 10
34142: PUSH
34143: LD_VAR 0 10
34147: PUSH
34148: LD_VAR 0 6
34152: PPUSH
34153: LD_INT 1
34155: PPUSH
34156: CALL_OW 259
34160: PUSH
34161: LD_REAL  1.15000000000000E+0000
34164: MUL
34165: MUL
34166: ST_TO_ADDR
// end ; unit_vehicle :
34167: GO 34997
34169: LD_INT 2
34171: DOUBLE
34172: EQUAL
34173: IFTRUE 34177
34175: GO 34985
34177: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34178: LD_VAR 0 6
34182: PPUSH
34183: CALL_OW 264
34187: PUSH
34188: LD_INT 2
34190: PUSH
34191: LD_INT 42
34193: PUSH
34194: LD_INT 24
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: LIST
34201: IN
34202: IFFALSE 34223
// points := [ 25 , 5 , 3 ] ;
34204: LD_ADDR_VAR 0 9
34208: PUSH
34209: LD_INT 25
34211: PUSH
34212: LD_INT 5
34214: PUSH
34215: LD_INT 3
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: LIST
34222: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34223: LD_VAR 0 6
34227: PPUSH
34228: CALL_OW 264
34232: PUSH
34233: LD_INT 4
34235: PUSH
34236: LD_INT 43
34238: PUSH
34239: LD_INT 25
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: LIST
34246: IN
34247: IFFALSE 34268
// points := [ 40 , 15 , 5 ] ;
34249: LD_ADDR_VAR 0 9
34253: PUSH
34254: LD_INT 40
34256: PUSH
34257: LD_INT 15
34259: PUSH
34260: LD_INT 5
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: LIST
34267: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34268: LD_VAR 0 6
34272: PPUSH
34273: CALL_OW 264
34277: PUSH
34278: LD_INT 3
34280: PUSH
34281: LD_INT 23
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: IN
34288: IFFALSE 34309
// points := [ 7 , 25 , 8 ] ;
34290: LD_ADDR_VAR 0 9
34294: PUSH
34295: LD_INT 7
34297: PUSH
34298: LD_INT 25
34300: PUSH
34301: LD_INT 8
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: LIST
34308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34309: LD_VAR 0 6
34313: PPUSH
34314: CALL_OW 264
34318: PUSH
34319: LD_INT 5
34321: PUSH
34322: LD_INT 27
34324: PUSH
34325: LD_INT 44
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: LIST
34332: IN
34333: IFFALSE 34354
// points := [ 14 , 50 , 16 ] ;
34335: LD_ADDR_VAR 0 9
34339: PUSH
34340: LD_INT 14
34342: PUSH
34343: LD_INT 50
34345: PUSH
34346: LD_INT 16
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: LIST
34353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34354: LD_VAR 0 6
34358: PPUSH
34359: CALL_OW 264
34363: PUSH
34364: LD_INT 6
34366: PUSH
34367: LD_INT 46
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: IN
34374: IFFALSE 34395
// points := [ 32 , 120 , 70 ] ;
34376: LD_ADDR_VAR 0 9
34380: PUSH
34381: LD_INT 32
34383: PUSH
34384: LD_INT 120
34386: PUSH
34387: LD_INT 70
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: LIST
34394: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34395: LD_VAR 0 6
34399: PPUSH
34400: CALL_OW 264
34404: PUSH
34405: LD_INT 7
34407: PUSH
34408: LD_INT 28
34410: PUSH
34411: LD_INT 45
34413: PUSH
34414: LD_EXP 29
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: IN
34425: IFFALSE 34446
// points := [ 35 , 20 , 45 ] ;
34427: LD_ADDR_VAR 0 9
34431: PUSH
34432: LD_INT 35
34434: PUSH
34435: LD_INT 20
34437: PUSH
34438: LD_INT 45
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: LIST
34445: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34446: LD_VAR 0 6
34450: PPUSH
34451: CALL_OW 264
34455: PUSH
34456: LD_INT 47
34458: PUSH
34459: EMPTY
34460: LIST
34461: IN
34462: IFFALSE 34483
// points := [ 67 , 45 , 75 ] ;
34464: LD_ADDR_VAR 0 9
34468: PUSH
34469: LD_INT 67
34471: PUSH
34472: LD_INT 45
34474: PUSH
34475: LD_INT 75
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: LIST
34482: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34483: LD_VAR 0 6
34487: PPUSH
34488: CALL_OW 264
34492: PUSH
34493: LD_INT 26
34495: PUSH
34496: EMPTY
34497: LIST
34498: IN
34499: IFFALSE 34520
// points := [ 120 , 30 , 80 ] ;
34501: LD_ADDR_VAR 0 9
34505: PUSH
34506: LD_INT 120
34508: PUSH
34509: LD_INT 30
34511: PUSH
34512: LD_INT 80
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: LIST
34519: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34520: LD_VAR 0 6
34524: PPUSH
34525: CALL_OW 264
34529: PUSH
34530: LD_INT 22
34532: PUSH
34533: EMPTY
34534: LIST
34535: IN
34536: IFFALSE 34557
// points := [ 40 , 1 , 1 ] ;
34538: LD_ADDR_VAR 0 9
34542: PUSH
34543: LD_INT 40
34545: PUSH
34546: LD_INT 1
34548: PUSH
34549: LD_INT 1
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: LIST
34556: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34557: LD_VAR 0 6
34561: PPUSH
34562: CALL_OW 264
34566: PUSH
34567: LD_INT 29
34569: PUSH
34570: EMPTY
34571: LIST
34572: IN
34573: IFFALSE 34594
// points := [ 70 , 200 , 400 ] ;
34575: LD_ADDR_VAR 0 9
34579: PUSH
34580: LD_INT 70
34582: PUSH
34583: LD_INT 200
34585: PUSH
34586: LD_INT 400
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: LIST
34593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34594: LD_VAR 0 6
34598: PPUSH
34599: CALL_OW 264
34603: PUSH
34604: LD_INT 14
34606: PUSH
34607: LD_INT 53
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: IN
34614: IFFALSE 34635
// points := [ 40 , 10 , 20 ] ;
34616: LD_ADDR_VAR 0 9
34620: PUSH
34621: LD_INT 40
34623: PUSH
34624: LD_INT 10
34626: PUSH
34627: LD_INT 20
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: LIST
34634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34635: LD_VAR 0 6
34639: PPUSH
34640: CALL_OW 264
34644: PUSH
34645: LD_INT 9
34647: PUSH
34648: EMPTY
34649: LIST
34650: IN
34651: IFFALSE 34672
// points := [ 5 , 70 , 20 ] ;
34653: LD_ADDR_VAR 0 9
34657: PUSH
34658: LD_INT 5
34660: PUSH
34661: LD_INT 70
34663: PUSH
34664: LD_INT 20
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: LIST
34671: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34672: LD_VAR 0 6
34676: PPUSH
34677: CALL_OW 264
34681: PUSH
34682: LD_INT 10
34684: PUSH
34685: EMPTY
34686: LIST
34687: IN
34688: IFFALSE 34709
// points := [ 35 , 110 , 70 ] ;
34690: LD_ADDR_VAR 0 9
34694: PUSH
34695: LD_INT 35
34697: PUSH
34698: LD_INT 110
34700: PUSH
34701: LD_INT 70
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: LIST
34708: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34709: LD_VAR 0 6
34713: PPUSH
34714: CALL_OW 265
34718: PUSH
34719: LD_INT 25
34721: EQUAL
34722: IFFALSE 34743
// points := [ 80 , 65 , 100 ] ;
34724: LD_ADDR_VAR 0 9
34728: PUSH
34729: LD_INT 80
34731: PUSH
34732: LD_INT 65
34734: PUSH
34735: LD_INT 100
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: LIST
34742: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34743: LD_VAR 0 6
34747: PPUSH
34748: CALL_OW 263
34752: PUSH
34753: LD_INT 1
34755: EQUAL
34756: IFFALSE 34791
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34758: LD_ADDR_VAR 0 10
34762: PUSH
34763: LD_VAR 0 10
34767: PUSH
34768: LD_VAR 0 6
34772: PPUSH
34773: CALL_OW 311
34777: PPUSH
34778: LD_INT 3
34780: PPUSH
34781: CALL_OW 259
34785: PUSH
34786: LD_INT 4
34788: MUL
34789: MUL
34790: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34791: LD_VAR 0 6
34795: PPUSH
34796: CALL_OW 263
34800: PUSH
34801: LD_INT 2
34803: EQUAL
34804: IFFALSE 34855
// begin j := IsControledBy ( i ) ;
34806: LD_ADDR_VAR 0 7
34810: PUSH
34811: LD_VAR 0 6
34815: PPUSH
34816: CALL_OW 312
34820: ST_TO_ADDR
// if j then
34821: LD_VAR 0 7
34825: IFFALSE 34855
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34827: LD_ADDR_VAR 0 10
34831: PUSH
34832: LD_VAR 0 10
34836: PUSH
34837: LD_VAR 0 7
34841: PPUSH
34842: LD_INT 3
34844: PPUSH
34845: CALL_OW 259
34849: PUSH
34850: LD_INT 3
34852: MUL
34853: MUL
34854: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34855: LD_VAR 0 6
34859: PPUSH
34860: CALL_OW 264
34864: PUSH
34865: LD_INT 5
34867: PUSH
34868: LD_INT 6
34870: PUSH
34871: LD_INT 46
34873: PUSH
34874: LD_INT 44
34876: PUSH
34877: LD_INT 47
34879: PUSH
34880: LD_INT 45
34882: PUSH
34883: LD_INT 28
34885: PUSH
34886: LD_INT 7
34888: PUSH
34889: LD_INT 27
34891: PUSH
34892: LD_INT 29
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: IN
34907: PUSH
34908: LD_VAR 0 1
34912: PPUSH
34913: LD_INT 52
34915: PPUSH
34916: CALL_OW 321
34920: PUSH
34921: LD_INT 2
34923: EQUAL
34924: AND
34925: IFFALSE 34942
// bpoints := bpoints * 1.2 ;
34927: LD_ADDR_VAR 0 10
34931: PUSH
34932: LD_VAR 0 10
34936: PUSH
34937: LD_REAL  1.20000000000000E+0000
34940: MUL
34941: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34942: LD_VAR 0 6
34946: PPUSH
34947: CALL_OW 264
34951: PUSH
34952: LD_INT 6
34954: PUSH
34955: LD_INT 46
34957: PUSH
34958: LD_INT 47
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: LIST
34965: IN
34966: IFFALSE 34983
// bpoints := bpoints * 1.2 ;
34968: LD_ADDR_VAR 0 10
34972: PUSH
34973: LD_VAR 0 10
34977: PUSH
34978: LD_REAL  1.20000000000000E+0000
34981: MUL
34982: ST_TO_ADDR
// end ; unit_building :
34983: GO 34997
34985: LD_INT 3
34987: DOUBLE
34988: EQUAL
34989: IFTRUE 34993
34991: GO 34996
34993: POP
// ; end ;
34994: GO 34997
34996: POP
// for j = 1 to 3 do
34997: LD_ADDR_VAR 0 7
35001: PUSH
35002: DOUBLE
35003: LD_INT 1
35005: DEC
35006: ST_TO_ADDR
35007: LD_INT 3
35009: PUSH
35010: FOR_TO
35011: IFFALSE 35064
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35013: LD_ADDR_VAR 0 5
35017: PUSH
35018: LD_VAR 0 5
35022: PPUSH
35023: LD_VAR 0 7
35027: PPUSH
35028: LD_VAR 0 5
35032: PUSH
35033: LD_VAR 0 7
35037: ARRAY
35038: PUSH
35039: LD_VAR 0 9
35043: PUSH
35044: LD_VAR 0 7
35048: ARRAY
35049: PUSH
35050: LD_VAR 0 10
35054: MUL
35055: PLUS
35056: PPUSH
35057: CALL_OW 1
35061: ST_TO_ADDR
35062: GO 35010
35064: POP
35065: POP
// end ;
35066: GO 33543
35068: POP
35069: POP
// result := Replace ( result , 4 , tmp ) ;
35070: LD_ADDR_VAR 0 5
35074: PUSH
35075: LD_VAR 0 5
35079: PPUSH
35080: LD_INT 4
35082: PPUSH
35083: LD_VAR 0 8
35087: PPUSH
35088: CALL_OW 1
35092: ST_TO_ADDR
// end ;
35093: LD_VAR 0 5
35097: RET
// export function DangerAtRange ( unit , range ) ; begin
35098: LD_INT 0
35100: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35101: LD_ADDR_VAR 0 3
35105: PUSH
35106: LD_VAR 0 1
35110: PPUSH
35111: CALL_OW 255
35115: PPUSH
35116: LD_VAR 0 1
35120: PPUSH
35121: CALL_OW 250
35125: PPUSH
35126: LD_VAR 0 1
35130: PPUSH
35131: CALL_OW 251
35135: PPUSH
35136: LD_VAR 0 2
35140: PPUSH
35141: CALL 33395 0 4
35145: ST_TO_ADDR
// end ;
35146: LD_VAR 0 3
35150: RET
// export function DangerInArea ( side , area ) ; begin
35151: LD_INT 0
35153: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35154: LD_ADDR_VAR 0 3
35158: PUSH
35159: LD_VAR 0 2
35163: PPUSH
35164: LD_INT 81
35166: PUSH
35167: LD_VAR 0 1
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PPUSH
35176: CALL_OW 70
35180: ST_TO_ADDR
// end ;
35181: LD_VAR 0 3
35185: RET
// export function IsExtension ( b ) ; begin
35186: LD_INT 0
35188: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35189: LD_ADDR_VAR 0 2
35193: PUSH
35194: LD_VAR 0 1
35198: PUSH
35199: LD_INT 23
35201: PUSH
35202: LD_INT 20
35204: PUSH
35205: LD_INT 22
35207: PUSH
35208: LD_INT 17
35210: PUSH
35211: LD_INT 24
35213: PUSH
35214: LD_INT 21
35216: PUSH
35217: LD_INT 19
35219: PUSH
35220: LD_INT 16
35222: PUSH
35223: LD_INT 25
35225: PUSH
35226: LD_INT 18
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: IN
35241: ST_TO_ADDR
// end ;
35242: LD_VAR 0 2
35246: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35247: LD_INT 0
35249: PPUSH
35250: PPUSH
35251: PPUSH
// result := [ ] ;
35252: LD_ADDR_VAR 0 4
35256: PUSH
35257: EMPTY
35258: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35259: LD_ADDR_VAR 0 5
35263: PUSH
35264: LD_VAR 0 2
35268: PPUSH
35269: LD_INT 21
35271: PUSH
35272: LD_INT 3
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PPUSH
35279: CALL_OW 70
35283: ST_TO_ADDR
// if not tmp then
35284: LD_VAR 0 5
35288: NOT
35289: IFFALSE 35293
// exit ;
35291: GO 35357
// if checkLink then
35293: LD_VAR 0 3
35297: IFFALSE 35347
// begin for i in tmp do
35299: LD_ADDR_VAR 0 6
35303: PUSH
35304: LD_VAR 0 5
35308: PUSH
35309: FOR_IN
35310: IFFALSE 35345
// if GetBase ( i ) <> base then
35312: LD_VAR 0 6
35316: PPUSH
35317: CALL_OW 274
35321: PUSH
35322: LD_VAR 0 1
35326: NONEQUAL
35327: IFFALSE 35343
// ComLinkToBase ( base , i ) ;
35329: LD_VAR 0 1
35333: PPUSH
35334: LD_VAR 0 6
35338: PPUSH
35339: CALL_OW 169
35343: GO 35309
35345: POP
35346: POP
// end ; result := tmp ;
35347: LD_ADDR_VAR 0 4
35351: PUSH
35352: LD_VAR 0 5
35356: ST_TO_ADDR
// end ;
35357: LD_VAR 0 4
35361: RET
// export function ComComplete ( units , b ) ; var i ; begin
35362: LD_INT 0
35364: PPUSH
35365: PPUSH
// if not units then
35366: LD_VAR 0 1
35370: NOT
35371: IFFALSE 35375
// exit ;
35373: GO 35465
// for i in units do
35375: LD_ADDR_VAR 0 4
35379: PUSH
35380: LD_VAR 0 1
35384: PUSH
35385: FOR_IN
35386: IFFALSE 35463
// if BuildingStatus ( b ) = bs_build then
35388: LD_VAR 0 2
35392: PPUSH
35393: CALL_OW 461
35397: PUSH
35398: LD_INT 1
35400: EQUAL
35401: IFFALSE 35461
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35403: LD_VAR 0 4
35407: PPUSH
35408: LD_STRING h
35410: PUSH
35411: LD_VAR 0 2
35415: PPUSH
35416: CALL_OW 250
35420: PUSH
35421: LD_VAR 0 2
35425: PPUSH
35426: CALL_OW 251
35430: PUSH
35431: LD_VAR 0 2
35435: PUSH
35436: LD_INT 0
35438: PUSH
35439: LD_INT 0
35441: PUSH
35442: LD_INT 0
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: PUSH
35454: EMPTY
35455: LIST
35456: PPUSH
35457: CALL_OW 446
35461: GO 35385
35463: POP
35464: POP
// end ;
35465: LD_VAR 0 3
35469: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35470: LD_INT 0
35472: PPUSH
35473: PPUSH
35474: PPUSH
35475: PPUSH
35476: PPUSH
35477: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35478: LD_VAR 0 1
35482: NOT
35483: PUSH
35484: LD_VAR 0 1
35488: PPUSH
35489: CALL_OW 263
35493: PUSH
35494: LD_INT 2
35496: NONEQUAL
35497: OR
35498: IFFALSE 35502
// exit ;
35500: GO 35818
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35502: LD_ADDR_VAR 0 6
35506: PUSH
35507: LD_INT 22
35509: PUSH
35510: LD_VAR 0 1
35514: PPUSH
35515: CALL_OW 255
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 2
35526: PUSH
35527: LD_INT 30
35529: PUSH
35530: LD_INT 36
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 34
35539: PUSH
35540: LD_INT 31
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: LIST
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PPUSH
35556: CALL_OW 69
35560: ST_TO_ADDR
// if not tmp then
35561: LD_VAR 0 6
35565: NOT
35566: IFFALSE 35570
// exit ;
35568: GO 35818
// result := [ ] ;
35570: LD_ADDR_VAR 0 2
35574: PUSH
35575: EMPTY
35576: ST_TO_ADDR
// for i in tmp do
35577: LD_ADDR_VAR 0 3
35581: PUSH
35582: LD_VAR 0 6
35586: PUSH
35587: FOR_IN
35588: IFFALSE 35659
// begin t := UnitsInside ( i ) ;
35590: LD_ADDR_VAR 0 4
35594: PUSH
35595: LD_VAR 0 3
35599: PPUSH
35600: CALL_OW 313
35604: ST_TO_ADDR
// if t then
35605: LD_VAR 0 4
35609: IFFALSE 35657
// for j in t do
35611: LD_ADDR_VAR 0 7
35615: PUSH
35616: LD_VAR 0 4
35620: PUSH
35621: FOR_IN
35622: IFFALSE 35655
// result := Replace ( result , result + 1 , j ) ;
35624: LD_ADDR_VAR 0 2
35628: PUSH
35629: LD_VAR 0 2
35633: PPUSH
35634: LD_VAR 0 2
35638: PUSH
35639: LD_INT 1
35641: PLUS
35642: PPUSH
35643: LD_VAR 0 7
35647: PPUSH
35648: CALL_OW 1
35652: ST_TO_ADDR
35653: GO 35621
35655: POP
35656: POP
// end ;
35657: GO 35587
35659: POP
35660: POP
// if not result then
35661: LD_VAR 0 2
35665: NOT
35666: IFFALSE 35670
// exit ;
35668: GO 35818
// mech := result [ 1 ] ;
35670: LD_ADDR_VAR 0 5
35674: PUSH
35675: LD_VAR 0 2
35679: PUSH
35680: LD_INT 1
35682: ARRAY
35683: ST_TO_ADDR
// if result > 1 then
35684: LD_VAR 0 2
35688: PUSH
35689: LD_INT 1
35691: GREATER
35692: IFFALSE 35804
// begin for i = 2 to result do
35694: LD_ADDR_VAR 0 3
35698: PUSH
35699: DOUBLE
35700: LD_INT 2
35702: DEC
35703: ST_TO_ADDR
35704: LD_VAR 0 2
35708: PUSH
35709: FOR_TO
35710: IFFALSE 35802
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35712: LD_ADDR_VAR 0 4
35716: PUSH
35717: LD_VAR 0 2
35721: PUSH
35722: LD_VAR 0 3
35726: ARRAY
35727: PPUSH
35728: LD_INT 3
35730: PPUSH
35731: CALL_OW 259
35735: PUSH
35736: LD_VAR 0 2
35740: PUSH
35741: LD_VAR 0 3
35745: ARRAY
35746: PPUSH
35747: CALL_OW 432
35751: MINUS
35752: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35753: LD_VAR 0 4
35757: PUSH
35758: LD_VAR 0 5
35762: PPUSH
35763: LD_INT 3
35765: PPUSH
35766: CALL_OW 259
35770: PUSH
35771: LD_VAR 0 5
35775: PPUSH
35776: CALL_OW 432
35780: MINUS
35781: GREATEREQUAL
35782: IFFALSE 35800
// mech := result [ i ] ;
35784: LD_ADDR_VAR 0 5
35788: PUSH
35789: LD_VAR 0 2
35793: PUSH
35794: LD_VAR 0 3
35798: ARRAY
35799: ST_TO_ADDR
// end ;
35800: GO 35709
35802: POP
35803: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35804: LD_VAR 0 1
35808: PPUSH
35809: LD_VAR 0 5
35813: PPUSH
35814: CALL_OW 135
// end ;
35818: LD_VAR 0 2
35822: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35823: LD_INT 0
35825: PPUSH
35826: PPUSH
35827: PPUSH
35828: PPUSH
35829: PPUSH
35830: PPUSH
35831: PPUSH
35832: PPUSH
35833: PPUSH
35834: PPUSH
35835: PPUSH
35836: PPUSH
35837: PPUSH
// result := [ ] ;
35838: LD_ADDR_VAR 0 7
35842: PUSH
35843: EMPTY
35844: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35845: LD_VAR 0 1
35849: PPUSH
35850: CALL_OW 266
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: LD_INT 1
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: IN
35865: NOT
35866: IFFALSE 35870
// exit ;
35868: GO 37504
// if name then
35870: LD_VAR 0 3
35874: IFFALSE 35890
// SetBName ( base_dep , name ) ;
35876: LD_VAR 0 1
35880: PPUSH
35881: LD_VAR 0 3
35885: PPUSH
35886: CALL_OW 500
// base := GetBase ( base_dep ) ;
35890: LD_ADDR_VAR 0 15
35894: PUSH
35895: LD_VAR 0 1
35899: PPUSH
35900: CALL_OW 274
35904: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35905: LD_ADDR_VAR 0 16
35909: PUSH
35910: LD_VAR 0 1
35914: PPUSH
35915: CALL_OW 255
35919: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35920: LD_ADDR_VAR 0 17
35924: PUSH
35925: LD_VAR 0 1
35929: PPUSH
35930: CALL_OW 248
35934: ST_TO_ADDR
// if sources then
35935: LD_VAR 0 5
35939: IFFALSE 35986
// for i = 1 to 3 do
35941: LD_ADDR_VAR 0 8
35945: PUSH
35946: DOUBLE
35947: LD_INT 1
35949: DEC
35950: ST_TO_ADDR
35951: LD_INT 3
35953: PUSH
35954: FOR_TO
35955: IFFALSE 35984
// AddResourceType ( base , i , sources [ i ] ) ;
35957: LD_VAR 0 15
35961: PPUSH
35962: LD_VAR 0 8
35966: PPUSH
35967: LD_VAR 0 5
35971: PUSH
35972: LD_VAR 0 8
35976: ARRAY
35977: PPUSH
35978: CALL_OW 276
35982: GO 35954
35984: POP
35985: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35986: LD_ADDR_VAR 0 18
35990: PUSH
35991: LD_VAR 0 15
35995: PPUSH
35996: LD_VAR 0 2
36000: PPUSH
36001: LD_INT 1
36003: PPUSH
36004: CALL 35247 0 3
36008: ST_TO_ADDR
// InitHc ;
36009: CALL_OW 19
// InitUc ;
36013: CALL_OW 18
// uc_side := side ;
36017: LD_ADDR_OWVAR 20
36021: PUSH
36022: LD_VAR 0 16
36026: ST_TO_ADDR
// uc_nation := nation ;
36027: LD_ADDR_OWVAR 21
36031: PUSH
36032: LD_VAR 0 17
36036: ST_TO_ADDR
// if buildings then
36037: LD_VAR 0 18
36041: IFFALSE 37363
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36043: LD_ADDR_VAR 0 19
36047: PUSH
36048: LD_VAR 0 18
36052: PPUSH
36053: LD_INT 2
36055: PUSH
36056: LD_INT 30
36058: PUSH
36059: LD_INT 29
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 30
36068: PUSH
36069: LD_INT 30
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: LIST
36080: PPUSH
36081: CALL_OW 72
36085: ST_TO_ADDR
// if tmp then
36086: LD_VAR 0 19
36090: IFFALSE 36138
// for i in tmp do
36092: LD_ADDR_VAR 0 8
36096: PUSH
36097: LD_VAR 0 19
36101: PUSH
36102: FOR_IN
36103: IFFALSE 36136
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36105: LD_VAR 0 8
36109: PPUSH
36110: CALL_OW 250
36114: PPUSH
36115: LD_VAR 0 8
36119: PPUSH
36120: CALL_OW 251
36124: PPUSH
36125: LD_VAR 0 16
36129: PPUSH
36130: CALL_OW 441
36134: GO 36102
36136: POP
36137: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36138: LD_VAR 0 18
36142: PPUSH
36143: LD_INT 2
36145: PUSH
36146: LD_INT 30
36148: PUSH
36149: LD_INT 32
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 30
36158: PUSH
36159: LD_INT 33
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: LIST
36170: PPUSH
36171: CALL_OW 72
36175: IFFALSE 36263
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36177: LD_ADDR_VAR 0 8
36181: PUSH
36182: LD_VAR 0 18
36186: PPUSH
36187: LD_INT 2
36189: PUSH
36190: LD_INT 30
36192: PUSH
36193: LD_INT 32
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 30
36202: PUSH
36203: LD_INT 33
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: LIST
36214: PPUSH
36215: CALL_OW 72
36219: PUSH
36220: FOR_IN
36221: IFFALSE 36261
// begin if not GetBWeapon ( i ) then
36223: LD_VAR 0 8
36227: PPUSH
36228: CALL_OW 269
36232: NOT
36233: IFFALSE 36259
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36235: LD_VAR 0 8
36239: PPUSH
36240: LD_VAR 0 8
36244: PPUSH
36245: LD_VAR 0 2
36249: PPUSH
36250: CALL 37509 0 2
36254: PPUSH
36255: CALL_OW 431
// end ;
36259: GO 36220
36261: POP
36262: POP
// end ; for i = 1 to personel do
36263: LD_ADDR_VAR 0 8
36267: PUSH
36268: DOUBLE
36269: LD_INT 1
36271: DEC
36272: ST_TO_ADDR
36273: LD_VAR 0 6
36277: PUSH
36278: FOR_TO
36279: IFFALSE 37343
// begin if i > 4 then
36281: LD_VAR 0 8
36285: PUSH
36286: LD_INT 4
36288: GREATER
36289: IFFALSE 36293
// break ;
36291: GO 37343
// case i of 1 :
36293: LD_VAR 0 8
36297: PUSH
36298: LD_INT 1
36300: DOUBLE
36301: EQUAL
36302: IFTRUE 36306
36304: GO 36386
36306: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36307: LD_ADDR_VAR 0 12
36311: PUSH
36312: LD_VAR 0 18
36316: PPUSH
36317: LD_INT 22
36319: PUSH
36320: LD_VAR 0 16
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 58
36331: PUSH
36332: EMPTY
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: PUSH
36338: LD_INT 30
36340: PUSH
36341: LD_INT 32
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 30
36350: PUSH
36351: LD_INT 4
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 30
36360: PUSH
36361: LD_INT 5
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: LIST
36378: PPUSH
36379: CALL_OW 72
36383: ST_TO_ADDR
36384: GO 36608
36386: LD_INT 2
36388: DOUBLE
36389: EQUAL
36390: IFTRUE 36394
36392: GO 36456
36394: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36395: LD_ADDR_VAR 0 12
36399: PUSH
36400: LD_VAR 0 18
36404: PPUSH
36405: LD_INT 22
36407: PUSH
36408: LD_VAR 0 16
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 2
36419: PUSH
36420: LD_INT 30
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 30
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: LIST
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PPUSH
36449: CALL_OW 72
36453: ST_TO_ADDR
36454: GO 36608
36456: LD_INT 3
36458: DOUBLE
36459: EQUAL
36460: IFTRUE 36464
36462: GO 36526
36464: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36465: LD_ADDR_VAR 0 12
36469: PUSH
36470: LD_VAR 0 18
36474: PPUSH
36475: LD_INT 22
36477: PUSH
36478: LD_VAR 0 16
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 2
36489: PUSH
36490: LD_INT 30
36492: PUSH
36493: LD_INT 2
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 30
36502: PUSH
36503: LD_INT 3
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PPUSH
36519: CALL_OW 72
36523: ST_TO_ADDR
36524: GO 36608
36526: LD_INT 4
36528: DOUBLE
36529: EQUAL
36530: IFTRUE 36534
36532: GO 36607
36534: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36535: LD_ADDR_VAR 0 12
36539: PUSH
36540: LD_VAR 0 18
36544: PPUSH
36545: LD_INT 22
36547: PUSH
36548: LD_VAR 0 16
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 2
36559: PUSH
36560: LD_INT 30
36562: PUSH
36563: LD_INT 6
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 30
36572: PUSH
36573: LD_INT 7
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 30
36582: PUSH
36583: LD_INT 8
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PPUSH
36600: CALL_OW 72
36604: ST_TO_ADDR
36605: GO 36608
36607: POP
// if i = 1 then
36608: LD_VAR 0 8
36612: PUSH
36613: LD_INT 1
36615: EQUAL
36616: IFFALSE 36727
// begin tmp := [ ] ;
36618: LD_ADDR_VAR 0 19
36622: PUSH
36623: EMPTY
36624: ST_TO_ADDR
// for j in f do
36625: LD_ADDR_VAR 0 9
36629: PUSH
36630: LD_VAR 0 12
36634: PUSH
36635: FOR_IN
36636: IFFALSE 36709
// if GetBType ( j ) = b_bunker then
36638: LD_VAR 0 9
36642: PPUSH
36643: CALL_OW 266
36647: PUSH
36648: LD_INT 32
36650: EQUAL
36651: IFFALSE 36678
// tmp := Insert ( tmp , 1 , j ) else
36653: LD_ADDR_VAR 0 19
36657: PUSH
36658: LD_VAR 0 19
36662: PPUSH
36663: LD_INT 1
36665: PPUSH
36666: LD_VAR 0 9
36670: PPUSH
36671: CALL_OW 2
36675: ST_TO_ADDR
36676: GO 36707
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36678: LD_ADDR_VAR 0 19
36682: PUSH
36683: LD_VAR 0 19
36687: PPUSH
36688: LD_VAR 0 19
36692: PUSH
36693: LD_INT 1
36695: PLUS
36696: PPUSH
36697: LD_VAR 0 9
36701: PPUSH
36702: CALL_OW 2
36706: ST_TO_ADDR
36707: GO 36635
36709: POP
36710: POP
// if tmp then
36711: LD_VAR 0 19
36715: IFFALSE 36727
// f := tmp ;
36717: LD_ADDR_VAR 0 12
36721: PUSH
36722: LD_VAR 0 19
36726: ST_TO_ADDR
// end ; x := personel [ i ] ;
36727: LD_ADDR_VAR 0 13
36731: PUSH
36732: LD_VAR 0 6
36736: PUSH
36737: LD_VAR 0 8
36741: ARRAY
36742: ST_TO_ADDR
// if x = - 1 then
36743: LD_VAR 0 13
36747: PUSH
36748: LD_INT 1
36750: NEG
36751: EQUAL
36752: IFFALSE 36961
// begin for j in f do
36754: LD_ADDR_VAR 0 9
36758: PUSH
36759: LD_VAR 0 12
36763: PUSH
36764: FOR_IN
36765: IFFALSE 36957
// repeat InitHc ;
36767: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36771: LD_VAR 0 9
36775: PPUSH
36776: CALL_OW 266
36780: PUSH
36781: LD_INT 5
36783: EQUAL
36784: IFFALSE 36854
// begin if UnitsInside ( j ) < 3 then
36786: LD_VAR 0 9
36790: PPUSH
36791: CALL_OW 313
36795: PUSH
36796: LD_INT 3
36798: LESS
36799: IFFALSE 36835
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36801: LD_INT 0
36803: PPUSH
36804: LD_INT 5
36806: PUSH
36807: LD_INT 8
36809: PUSH
36810: LD_INT 9
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: LIST
36817: PUSH
36818: LD_VAR 0 17
36822: ARRAY
36823: PPUSH
36824: LD_VAR 0 4
36828: PPUSH
36829: CALL_OW 380
36833: GO 36852
// PrepareHuman ( false , i , skill ) ;
36835: LD_INT 0
36837: PPUSH
36838: LD_VAR 0 8
36842: PPUSH
36843: LD_VAR 0 4
36847: PPUSH
36848: CALL_OW 380
// end else
36852: GO 36871
// PrepareHuman ( false , i , skill ) ;
36854: LD_INT 0
36856: PPUSH
36857: LD_VAR 0 8
36861: PPUSH
36862: LD_VAR 0 4
36866: PPUSH
36867: CALL_OW 380
// un := CreateHuman ;
36871: LD_ADDR_VAR 0 14
36875: PUSH
36876: CALL_OW 44
36880: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36881: LD_ADDR_VAR 0 7
36885: PUSH
36886: LD_VAR 0 7
36890: PPUSH
36891: LD_INT 1
36893: PPUSH
36894: LD_VAR 0 14
36898: PPUSH
36899: CALL_OW 2
36903: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36904: LD_VAR 0 14
36908: PPUSH
36909: LD_VAR 0 9
36913: PPUSH
36914: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36918: LD_VAR 0 9
36922: PPUSH
36923: CALL_OW 313
36927: PUSH
36928: LD_INT 6
36930: EQUAL
36931: PUSH
36932: LD_VAR 0 9
36936: PPUSH
36937: CALL_OW 266
36941: PUSH
36942: LD_INT 32
36944: PUSH
36945: LD_INT 31
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: IN
36952: OR
36953: IFFALSE 36767
36955: GO 36764
36957: POP
36958: POP
// end else
36959: GO 37341
// for j = 1 to x do
36961: LD_ADDR_VAR 0 9
36965: PUSH
36966: DOUBLE
36967: LD_INT 1
36969: DEC
36970: ST_TO_ADDR
36971: LD_VAR 0 13
36975: PUSH
36976: FOR_TO
36977: IFFALSE 37339
// begin InitHc ;
36979: CALL_OW 19
// if not f then
36983: LD_VAR 0 12
36987: NOT
36988: IFFALSE 37077
// begin PrepareHuman ( false , i , skill ) ;
36990: LD_INT 0
36992: PPUSH
36993: LD_VAR 0 8
36997: PPUSH
36998: LD_VAR 0 4
37002: PPUSH
37003: CALL_OW 380
// un := CreateHuman ;
37007: LD_ADDR_VAR 0 14
37011: PUSH
37012: CALL_OW 44
37016: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37017: LD_ADDR_VAR 0 7
37021: PUSH
37022: LD_VAR 0 7
37026: PPUSH
37027: LD_INT 1
37029: PPUSH
37030: LD_VAR 0 14
37034: PPUSH
37035: CALL_OW 2
37039: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37040: LD_VAR 0 14
37044: PPUSH
37045: LD_VAR 0 1
37049: PPUSH
37050: CALL_OW 250
37054: PPUSH
37055: LD_VAR 0 1
37059: PPUSH
37060: CALL_OW 251
37064: PPUSH
37065: LD_INT 10
37067: PPUSH
37068: LD_INT 0
37070: PPUSH
37071: CALL_OW 50
// continue ;
37075: GO 36976
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37077: LD_VAR 0 12
37081: PUSH
37082: LD_INT 1
37084: ARRAY
37085: PPUSH
37086: CALL_OW 313
37090: PUSH
37091: LD_VAR 0 12
37095: PUSH
37096: LD_INT 1
37098: ARRAY
37099: PPUSH
37100: CALL_OW 266
37104: PUSH
37105: LD_INT 32
37107: PUSH
37108: LD_INT 31
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: IN
37115: AND
37116: PUSH
37117: LD_VAR 0 12
37121: PUSH
37122: LD_INT 1
37124: ARRAY
37125: PPUSH
37126: CALL_OW 313
37130: PUSH
37131: LD_INT 6
37133: EQUAL
37134: OR
37135: IFFALSE 37155
// f := Delete ( f , 1 ) ;
37137: LD_ADDR_VAR 0 12
37141: PUSH
37142: LD_VAR 0 12
37146: PPUSH
37147: LD_INT 1
37149: PPUSH
37150: CALL_OW 3
37154: ST_TO_ADDR
// if not f then
37155: LD_VAR 0 12
37159: NOT
37160: IFFALSE 37178
// begin x := x + 2 ;
37162: LD_ADDR_VAR 0 13
37166: PUSH
37167: LD_VAR 0 13
37171: PUSH
37172: LD_INT 2
37174: PLUS
37175: ST_TO_ADDR
// continue ;
37176: GO 36976
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37178: LD_VAR 0 12
37182: PUSH
37183: LD_INT 1
37185: ARRAY
37186: PPUSH
37187: CALL_OW 266
37191: PUSH
37192: LD_INT 5
37194: EQUAL
37195: IFFALSE 37269
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37197: LD_VAR 0 12
37201: PUSH
37202: LD_INT 1
37204: ARRAY
37205: PPUSH
37206: CALL_OW 313
37210: PUSH
37211: LD_INT 3
37213: LESS
37214: IFFALSE 37250
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37216: LD_INT 0
37218: PPUSH
37219: LD_INT 5
37221: PUSH
37222: LD_INT 8
37224: PUSH
37225: LD_INT 9
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: LIST
37232: PUSH
37233: LD_VAR 0 17
37237: ARRAY
37238: PPUSH
37239: LD_VAR 0 4
37243: PPUSH
37244: CALL_OW 380
37248: GO 37267
// PrepareHuman ( false , i , skill ) ;
37250: LD_INT 0
37252: PPUSH
37253: LD_VAR 0 8
37257: PPUSH
37258: LD_VAR 0 4
37262: PPUSH
37263: CALL_OW 380
// end else
37267: GO 37286
// PrepareHuman ( false , i , skill ) ;
37269: LD_INT 0
37271: PPUSH
37272: LD_VAR 0 8
37276: PPUSH
37277: LD_VAR 0 4
37281: PPUSH
37282: CALL_OW 380
// un := CreateHuman ;
37286: LD_ADDR_VAR 0 14
37290: PUSH
37291: CALL_OW 44
37295: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37296: LD_ADDR_VAR 0 7
37300: PUSH
37301: LD_VAR 0 7
37305: PPUSH
37306: LD_INT 1
37308: PPUSH
37309: LD_VAR 0 14
37313: PPUSH
37314: CALL_OW 2
37318: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37319: LD_VAR 0 14
37323: PPUSH
37324: LD_VAR 0 12
37328: PUSH
37329: LD_INT 1
37331: ARRAY
37332: PPUSH
37333: CALL_OW 52
// end ;
37337: GO 36976
37339: POP
37340: POP
// end ;
37341: GO 36278
37343: POP
37344: POP
// result := result ^ buildings ;
37345: LD_ADDR_VAR 0 7
37349: PUSH
37350: LD_VAR 0 7
37354: PUSH
37355: LD_VAR 0 18
37359: ADD
37360: ST_TO_ADDR
// end else
37361: GO 37504
// begin for i = 1 to personel do
37363: LD_ADDR_VAR 0 8
37367: PUSH
37368: DOUBLE
37369: LD_INT 1
37371: DEC
37372: ST_TO_ADDR
37373: LD_VAR 0 6
37377: PUSH
37378: FOR_TO
37379: IFFALSE 37502
// begin if i > 4 then
37381: LD_VAR 0 8
37385: PUSH
37386: LD_INT 4
37388: GREATER
37389: IFFALSE 37393
// break ;
37391: GO 37502
// x := personel [ i ] ;
37393: LD_ADDR_VAR 0 13
37397: PUSH
37398: LD_VAR 0 6
37402: PUSH
37403: LD_VAR 0 8
37407: ARRAY
37408: ST_TO_ADDR
// if x = - 1 then
37409: LD_VAR 0 13
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: EQUAL
37418: IFFALSE 37422
// continue ;
37420: GO 37378
// PrepareHuman ( false , i , skill ) ;
37422: LD_INT 0
37424: PPUSH
37425: LD_VAR 0 8
37429: PPUSH
37430: LD_VAR 0 4
37434: PPUSH
37435: CALL_OW 380
// un := CreateHuman ;
37439: LD_ADDR_VAR 0 14
37443: PUSH
37444: CALL_OW 44
37448: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37449: LD_VAR 0 14
37453: PPUSH
37454: LD_VAR 0 1
37458: PPUSH
37459: CALL_OW 250
37463: PPUSH
37464: LD_VAR 0 1
37468: PPUSH
37469: CALL_OW 251
37473: PPUSH
37474: LD_INT 10
37476: PPUSH
37477: LD_INT 0
37479: PPUSH
37480: CALL_OW 50
// result := result ^ un ;
37484: LD_ADDR_VAR 0 7
37488: PUSH
37489: LD_VAR 0 7
37493: PUSH
37494: LD_VAR 0 14
37498: ADD
37499: ST_TO_ADDR
// end ;
37500: GO 37378
37502: POP
37503: POP
// end ; end ;
37504: LD_VAR 0 7
37508: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37509: LD_INT 0
37511: PPUSH
37512: PPUSH
37513: PPUSH
37514: PPUSH
37515: PPUSH
37516: PPUSH
37517: PPUSH
37518: PPUSH
37519: PPUSH
37520: PPUSH
37521: PPUSH
37522: PPUSH
37523: PPUSH
37524: PPUSH
37525: PPUSH
37526: PPUSH
// result := false ;
37527: LD_ADDR_VAR 0 3
37531: PUSH
37532: LD_INT 0
37534: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37535: LD_VAR 0 1
37539: NOT
37540: PUSH
37541: LD_VAR 0 1
37545: PPUSH
37546: CALL_OW 266
37550: PUSH
37551: LD_INT 32
37553: PUSH
37554: LD_INT 33
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: IN
37561: NOT
37562: OR
37563: IFFALSE 37567
// exit ;
37565: GO 38676
// nat := GetNation ( tower ) ;
37567: LD_ADDR_VAR 0 12
37571: PUSH
37572: LD_VAR 0 1
37576: PPUSH
37577: CALL_OW 248
37581: ST_TO_ADDR
// side := GetSide ( tower ) ;
37582: LD_ADDR_VAR 0 16
37586: PUSH
37587: LD_VAR 0 1
37591: PPUSH
37592: CALL_OW 255
37596: ST_TO_ADDR
// x := GetX ( tower ) ;
37597: LD_ADDR_VAR 0 10
37601: PUSH
37602: LD_VAR 0 1
37606: PPUSH
37607: CALL_OW 250
37611: ST_TO_ADDR
// y := GetY ( tower ) ;
37612: LD_ADDR_VAR 0 11
37616: PUSH
37617: LD_VAR 0 1
37621: PPUSH
37622: CALL_OW 251
37626: ST_TO_ADDR
// if not x or not y then
37627: LD_VAR 0 10
37631: NOT
37632: PUSH
37633: LD_VAR 0 11
37637: NOT
37638: OR
37639: IFFALSE 37643
// exit ;
37641: GO 38676
// weapon := 0 ;
37643: LD_ADDR_VAR 0 18
37647: PUSH
37648: LD_INT 0
37650: ST_TO_ADDR
// fac_list := [ ] ;
37651: LD_ADDR_VAR 0 17
37655: PUSH
37656: EMPTY
37657: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37658: LD_ADDR_VAR 0 6
37662: PUSH
37663: LD_VAR 0 1
37667: PPUSH
37668: CALL_OW 274
37672: PPUSH
37673: LD_VAR 0 2
37677: PPUSH
37678: LD_INT 0
37680: PPUSH
37681: CALL 35247 0 3
37685: PPUSH
37686: LD_INT 30
37688: PUSH
37689: LD_INT 3
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PPUSH
37696: CALL_OW 72
37700: ST_TO_ADDR
// if not factories then
37701: LD_VAR 0 6
37705: NOT
37706: IFFALSE 37710
// exit ;
37708: GO 38676
// for i in factories do
37710: LD_ADDR_VAR 0 8
37714: PUSH
37715: LD_VAR 0 6
37719: PUSH
37720: FOR_IN
37721: IFFALSE 37746
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37723: LD_ADDR_VAR 0 17
37727: PUSH
37728: LD_VAR 0 17
37732: PUSH
37733: LD_VAR 0 8
37737: PPUSH
37738: CALL_OW 478
37742: UNION
37743: ST_TO_ADDR
37744: GO 37720
37746: POP
37747: POP
// if not fac_list then
37748: LD_VAR 0 17
37752: NOT
37753: IFFALSE 37757
// exit ;
37755: GO 38676
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37757: LD_ADDR_VAR 0 5
37761: PUSH
37762: LD_INT 4
37764: PUSH
37765: LD_INT 5
37767: PUSH
37768: LD_INT 9
37770: PUSH
37771: LD_INT 10
37773: PUSH
37774: LD_INT 6
37776: PUSH
37777: LD_INT 7
37779: PUSH
37780: LD_INT 11
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 27
37794: PUSH
37795: LD_INT 28
37797: PUSH
37798: LD_INT 26
37800: PUSH
37801: LD_INT 30
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 43
37812: PUSH
37813: LD_INT 44
37815: PUSH
37816: LD_INT 46
37818: PUSH
37819: LD_INT 45
37821: PUSH
37822: LD_INT 47
37824: PUSH
37825: LD_INT 49
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: LIST
37840: PUSH
37841: LD_VAR 0 12
37845: ARRAY
37846: ST_TO_ADDR
// list := list isect fac_list ;
37847: LD_ADDR_VAR 0 5
37851: PUSH
37852: LD_VAR 0 5
37856: PUSH
37857: LD_VAR 0 17
37861: ISECT
37862: ST_TO_ADDR
// if not list then
37863: LD_VAR 0 5
37867: NOT
37868: IFFALSE 37872
// exit ;
37870: GO 38676
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37872: LD_VAR 0 12
37876: PUSH
37877: LD_INT 3
37879: EQUAL
37880: PUSH
37881: LD_INT 49
37883: PUSH
37884: LD_VAR 0 5
37888: IN
37889: AND
37890: PUSH
37891: LD_INT 31
37893: PPUSH
37894: LD_VAR 0 16
37898: PPUSH
37899: CALL_OW 321
37903: PUSH
37904: LD_INT 2
37906: EQUAL
37907: AND
37908: IFFALSE 37968
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37910: LD_INT 22
37912: PUSH
37913: LD_VAR 0 16
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 35
37924: PUSH
37925: LD_INT 49
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 91
37934: PUSH
37935: LD_VAR 0 1
37939: PUSH
37940: LD_INT 10
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: LIST
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: LIST
37952: PPUSH
37953: CALL_OW 69
37957: NOT
37958: IFFALSE 37968
// weapon := ru_time_lapser ;
37960: LD_ADDR_VAR 0 18
37964: PUSH
37965: LD_INT 49
37967: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37968: LD_VAR 0 12
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: LD_INT 2
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: IN
37983: PUSH
37984: LD_INT 11
37986: PUSH
37987: LD_VAR 0 5
37991: IN
37992: PUSH
37993: LD_INT 30
37995: PUSH
37996: LD_VAR 0 5
38000: IN
38001: OR
38002: AND
38003: PUSH
38004: LD_INT 6
38006: PPUSH
38007: LD_VAR 0 16
38011: PPUSH
38012: CALL_OW 321
38016: PUSH
38017: LD_INT 2
38019: EQUAL
38020: AND
38021: IFFALSE 38186
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38023: LD_INT 22
38025: PUSH
38026: LD_VAR 0 16
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 2
38037: PUSH
38038: LD_INT 35
38040: PUSH
38041: LD_INT 11
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 35
38050: PUSH
38051: LD_INT 30
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 91
38065: PUSH
38066: LD_VAR 0 1
38070: PUSH
38071: LD_INT 18
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: LIST
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: LIST
38083: PPUSH
38084: CALL_OW 69
38088: NOT
38089: PUSH
38090: LD_INT 22
38092: PUSH
38093: LD_VAR 0 16
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 2
38104: PUSH
38105: LD_INT 30
38107: PUSH
38108: LD_INT 32
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 30
38117: PUSH
38118: LD_INT 33
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 91
38132: PUSH
38133: LD_VAR 0 1
38137: PUSH
38138: LD_INT 12
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: LIST
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: LIST
38150: PUSH
38151: EMPTY
38152: LIST
38153: PPUSH
38154: CALL_OW 69
38158: PUSH
38159: LD_INT 2
38161: GREATER
38162: AND
38163: IFFALSE 38186
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38165: LD_ADDR_VAR 0 18
38169: PUSH
38170: LD_INT 11
38172: PUSH
38173: LD_INT 30
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_VAR 0 12
38184: ARRAY
38185: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38186: LD_VAR 0 18
38190: NOT
38191: PUSH
38192: LD_INT 40
38194: PPUSH
38195: LD_VAR 0 16
38199: PPUSH
38200: CALL_OW 321
38204: PUSH
38205: LD_INT 2
38207: EQUAL
38208: AND
38209: PUSH
38210: LD_INT 7
38212: PUSH
38213: LD_VAR 0 5
38217: IN
38218: PUSH
38219: LD_INT 28
38221: PUSH
38222: LD_VAR 0 5
38226: IN
38227: OR
38228: PUSH
38229: LD_INT 45
38231: PUSH
38232: LD_VAR 0 5
38236: IN
38237: OR
38238: AND
38239: IFFALSE 38493
// begin hex := GetHexInfo ( x , y ) ;
38241: LD_ADDR_VAR 0 4
38245: PUSH
38246: LD_VAR 0 10
38250: PPUSH
38251: LD_VAR 0 11
38255: PPUSH
38256: CALL_OW 546
38260: ST_TO_ADDR
// if hex [ 1 ] then
38261: LD_VAR 0 4
38265: PUSH
38266: LD_INT 1
38268: ARRAY
38269: IFFALSE 38273
// exit ;
38271: GO 38676
// height := hex [ 2 ] ;
38273: LD_ADDR_VAR 0 15
38277: PUSH
38278: LD_VAR 0 4
38282: PUSH
38283: LD_INT 2
38285: ARRAY
38286: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38287: LD_ADDR_VAR 0 14
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: LD_INT 2
38297: PUSH
38298: LD_INT 3
38300: PUSH
38301: LD_INT 5
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: ST_TO_ADDR
// for i in tmp do
38310: LD_ADDR_VAR 0 8
38314: PUSH
38315: LD_VAR 0 14
38319: PUSH
38320: FOR_IN
38321: IFFALSE 38491
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38323: LD_ADDR_VAR 0 9
38327: PUSH
38328: LD_VAR 0 10
38332: PPUSH
38333: LD_VAR 0 8
38337: PPUSH
38338: LD_INT 5
38340: PPUSH
38341: CALL_OW 272
38345: PUSH
38346: LD_VAR 0 11
38350: PPUSH
38351: LD_VAR 0 8
38355: PPUSH
38356: LD_INT 5
38358: PPUSH
38359: CALL_OW 273
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38368: LD_VAR 0 9
38372: PUSH
38373: LD_INT 1
38375: ARRAY
38376: PPUSH
38377: LD_VAR 0 9
38381: PUSH
38382: LD_INT 2
38384: ARRAY
38385: PPUSH
38386: CALL_OW 488
38390: IFFALSE 38489
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38392: LD_ADDR_VAR 0 4
38396: PUSH
38397: LD_VAR 0 9
38401: PUSH
38402: LD_INT 1
38404: ARRAY
38405: PPUSH
38406: LD_VAR 0 9
38410: PUSH
38411: LD_INT 2
38413: ARRAY
38414: PPUSH
38415: CALL_OW 546
38419: ST_TO_ADDR
// if hex [ 1 ] then
38420: LD_VAR 0 4
38424: PUSH
38425: LD_INT 1
38427: ARRAY
38428: IFFALSE 38432
// continue ;
38430: GO 38320
// h := hex [ 2 ] ;
38432: LD_ADDR_VAR 0 13
38436: PUSH
38437: LD_VAR 0 4
38441: PUSH
38442: LD_INT 2
38444: ARRAY
38445: ST_TO_ADDR
// if h + 7 < height then
38446: LD_VAR 0 13
38450: PUSH
38451: LD_INT 7
38453: PLUS
38454: PUSH
38455: LD_VAR 0 15
38459: LESS
38460: IFFALSE 38489
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38462: LD_ADDR_VAR 0 18
38466: PUSH
38467: LD_INT 7
38469: PUSH
38470: LD_INT 28
38472: PUSH
38473: LD_INT 45
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: LIST
38480: PUSH
38481: LD_VAR 0 12
38485: ARRAY
38486: ST_TO_ADDR
// break ;
38487: GO 38491
// end ; end ; end ;
38489: GO 38320
38491: POP
38492: POP
// end ; if not weapon then
38493: LD_VAR 0 18
38497: NOT
38498: IFFALSE 38558
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38500: LD_ADDR_VAR 0 5
38504: PUSH
38505: LD_VAR 0 5
38509: PUSH
38510: LD_INT 11
38512: PUSH
38513: LD_INT 30
38515: PUSH
38516: LD_INT 49
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: LIST
38523: DIFF
38524: ST_TO_ADDR
// if not list then
38525: LD_VAR 0 5
38529: NOT
38530: IFFALSE 38534
// exit ;
38532: GO 38676
// weapon := list [ rand ( 1 , list ) ] ;
38534: LD_ADDR_VAR 0 18
38538: PUSH
38539: LD_VAR 0 5
38543: PUSH
38544: LD_INT 1
38546: PPUSH
38547: LD_VAR 0 5
38551: PPUSH
38552: CALL_OW 12
38556: ARRAY
38557: ST_TO_ADDR
// end ; if weapon then
38558: LD_VAR 0 18
38562: IFFALSE 38676
// begin tmp := CostOfWeapon ( weapon ) ;
38564: LD_ADDR_VAR 0 14
38568: PUSH
38569: LD_VAR 0 18
38573: PPUSH
38574: CALL_OW 451
38578: ST_TO_ADDR
// j := GetBase ( tower ) ;
38579: LD_ADDR_VAR 0 9
38583: PUSH
38584: LD_VAR 0 1
38588: PPUSH
38589: CALL_OW 274
38593: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38594: LD_VAR 0 9
38598: PPUSH
38599: LD_INT 1
38601: PPUSH
38602: CALL_OW 275
38606: PUSH
38607: LD_VAR 0 14
38611: PUSH
38612: LD_INT 1
38614: ARRAY
38615: GREATEREQUAL
38616: PUSH
38617: LD_VAR 0 9
38621: PPUSH
38622: LD_INT 2
38624: PPUSH
38625: CALL_OW 275
38629: PUSH
38630: LD_VAR 0 14
38634: PUSH
38635: LD_INT 2
38637: ARRAY
38638: GREATEREQUAL
38639: AND
38640: PUSH
38641: LD_VAR 0 9
38645: PPUSH
38646: LD_INT 3
38648: PPUSH
38649: CALL_OW 275
38653: PUSH
38654: LD_VAR 0 14
38658: PUSH
38659: LD_INT 3
38661: ARRAY
38662: GREATEREQUAL
38663: AND
38664: IFFALSE 38676
// result := weapon ;
38666: LD_ADDR_VAR 0 3
38670: PUSH
38671: LD_VAR 0 18
38675: ST_TO_ADDR
// end ; end ;
38676: LD_VAR 0 3
38680: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38681: LD_INT 0
38683: PPUSH
38684: PPUSH
// result := true ;
38685: LD_ADDR_VAR 0 3
38689: PUSH
38690: LD_INT 1
38692: ST_TO_ADDR
// if array1 = array2 then
38693: LD_VAR 0 1
38697: PUSH
38698: LD_VAR 0 2
38702: EQUAL
38703: IFFALSE 38763
// begin for i = 1 to array1 do
38705: LD_ADDR_VAR 0 4
38709: PUSH
38710: DOUBLE
38711: LD_INT 1
38713: DEC
38714: ST_TO_ADDR
38715: LD_VAR 0 1
38719: PUSH
38720: FOR_TO
38721: IFFALSE 38759
// if array1 [ i ] <> array2 [ i ] then
38723: LD_VAR 0 1
38727: PUSH
38728: LD_VAR 0 4
38732: ARRAY
38733: PUSH
38734: LD_VAR 0 2
38738: PUSH
38739: LD_VAR 0 4
38743: ARRAY
38744: NONEQUAL
38745: IFFALSE 38757
// begin result := false ;
38747: LD_ADDR_VAR 0 3
38751: PUSH
38752: LD_INT 0
38754: ST_TO_ADDR
// break ;
38755: GO 38759
// end ;
38757: GO 38720
38759: POP
38760: POP
// end else
38761: GO 38771
// result := false ;
38763: LD_ADDR_VAR 0 3
38767: PUSH
38768: LD_INT 0
38770: ST_TO_ADDR
// end ;
38771: LD_VAR 0 3
38775: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38776: LD_INT 0
38778: PPUSH
38779: PPUSH
// if not array1 or not array2 then
38780: LD_VAR 0 1
38784: NOT
38785: PUSH
38786: LD_VAR 0 2
38790: NOT
38791: OR
38792: IFFALSE 38796
// exit ;
38794: GO 38860
// result := true ;
38796: LD_ADDR_VAR 0 3
38800: PUSH
38801: LD_INT 1
38803: ST_TO_ADDR
// for i = 1 to array1 do
38804: LD_ADDR_VAR 0 4
38808: PUSH
38809: DOUBLE
38810: LD_INT 1
38812: DEC
38813: ST_TO_ADDR
38814: LD_VAR 0 1
38818: PUSH
38819: FOR_TO
38820: IFFALSE 38858
// if array1 [ i ] <> array2 [ i ] then
38822: LD_VAR 0 1
38826: PUSH
38827: LD_VAR 0 4
38831: ARRAY
38832: PUSH
38833: LD_VAR 0 2
38837: PUSH
38838: LD_VAR 0 4
38842: ARRAY
38843: NONEQUAL
38844: IFFALSE 38856
// begin result := false ;
38846: LD_ADDR_VAR 0 3
38850: PUSH
38851: LD_INT 0
38853: ST_TO_ADDR
// break ;
38854: GO 38858
// end ;
38856: GO 38819
38858: POP
38859: POP
// end ;
38860: LD_VAR 0 3
38864: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38865: LD_INT 0
38867: PPUSH
38868: PPUSH
38869: PPUSH
// pom := GetBase ( fac ) ;
38870: LD_ADDR_VAR 0 5
38874: PUSH
38875: LD_VAR 0 1
38879: PPUSH
38880: CALL_OW 274
38884: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38885: LD_ADDR_VAR 0 4
38889: PUSH
38890: LD_VAR 0 2
38894: PUSH
38895: LD_INT 1
38897: ARRAY
38898: PPUSH
38899: LD_VAR 0 2
38903: PUSH
38904: LD_INT 2
38906: ARRAY
38907: PPUSH
38908: LD_VAR 0 2
38912: PUSH
38913: LD_INT 3
38915: ARRAY
38916: PPUSH
38917: LD_VAR 0 2
38921: PUSH
38922: LD_INT 4
38924: ARRAY
38925: PPUSH
38926: CALL_OW 449
38930: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38931: LD_ADDR_VAR 0 3
38935: PUSH
38936: LD_VAR 0 5
38940: PPUSH
38941: LD_INT 1
38943: PPUSH
38944: CALL_OW 275
38948: PUSH
38949: LD_VAR 0 4
38953: PUSH
38954: LD_INT 1
38956: ARRAY
38957: GREATEREQUAL
38958: PUSH
38959: LD_VAR 0 5
38963: PPUSH
38964: LD_INT 2
38966: PPUSH
38967: CALL_OW 275
38971: PUSH
38972: LD_VAR 0 4
38976: PUSH
38977: LD_INT 2
38979: ARRAY
38980: GREATEREQUAL
38981: AND
38982: PUSH
38983: LD_VAR 0 5
38987: PPUSH
38988: LD_INT 3
38990: PPUSH
38991: CALL_OW 275
38995: PUSH
38996: LD_VAR 0 4
39000: PUSH
39001: LD_INT 3
39003: ARRAY
39004: GREATEREQUAL
39005: AND
39006: ST_TO_ADDR
// end ;
39007: LD_VAR 0 3
39011: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39012: LD_INT 0
39014: PPUSH
39015: PPUSH
39016: PPUSH
39017: PPUSH
// pom := GetBase ( building ) ;
39018: LD_ADDR_VAR 0 3
39022: PUSH
39023: LD_VAR 0 1
39027: PPUSH
39028: CALL_OW 274
39032: ST_TO_ADDR
// if not pom then
39033: LD_VAR 0 3
39037: NOT
39038: IFFALSE 39042
// exit ;
39040: GO 39212
// btype := GetBType ( building ) ;
39042: LD_ADDR_VAR 0 5
39046: PUSH
39047: LD_VAR 0 1
39051: PPUSH
39052: CALL_OW 266
39056: ST_TO_ADDR
// if btype = b_armoury then
39057: LD_VAR 0 5
39061: PUSH
39062: LD_INT 4
39064: EQUAL
39065: IFFALSE 39075
// btype := b_barracks ;
39067: LD_ADDR_VAR 0 5
39071: PUSH
39072: LD_INT 5
39074: ST_TO_ADDR
// if btype = b_depot then
39075: LD_VAR 0 5
39079: PUSH
39080: LD_INT 0
39082: EQUAL
39083: IFFALSE 39093
// btype := b_warehouse ;
39085: LD_ADDR_VAR 0 5
39089: PUSH
39090: LD_INT 1
39092: ST_TO_ADDR
// if btype = b_workshop then
39093: LD_VAR 0 5
39097: PUSH
39098: LD_INT 2
39100: EQUAL
39101: IFFALSE 39111
// btype := b_factory ;
39103: LD_ADDR_VAR 0 5
39107: PUSH
39108: LD_INT 3
39110: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39111: LD_ADDR_VAR 0 4
39115: PUSH
39116: LD_VAR 0 5
39120: PPUSH
39121: LD_VAR 0 1
39125: PPUSH
39126: CALL_OW 248
39130: PPUSH
39131: CALL_OW 450
39135: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39136: LD_ADDR_VAR 0 2
39140: PUSH
39141: LD_VAR 0 3
39145: PPUSH
39146: LD_INT 1
39148: PPUSH
39149: CALL_OW 275
39153: PUSH
39154: LD_VAR 0 4
39158: PUSH
39159: LD_INT 1
39161: ARRAY
39162: GREATEREQUAL
39163: PUSH
39164: LD_VAR 0 3
39168: PPUSH
39169: LD_INT 2
39171: PPUSH
39172: CALL_OW 275
39176: PUSH
39177: LD_VAR 0 4
39181: PUSH
39182: LD_INT 2
39184: ARRAY
39185: GREATEREQUAL
39186: AND
39187: PUSH
39188: LD_VAR 0 3
39192: PPUSH
39193: LD_INT 3
39195: PPUSH
39196: CALL_OW 275
39200: PUSH
39201: LD_VAR 0 4
39205: PUSH
39206: LD_INT 3
39208: ARRAY
39209: GREATEREQUAL
39210: AND
39211: ST_TO_ADDR
// end ;
39212: LD_VAR 0 2
39216: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39217: LD_INT 0
39219: PPUSH
39220: PPUSH
39221: PPUSH
// pom := GetBase ( building ) ;
39222: LD_ADDR_VAR 0 4
39226: PUSH
39227: LD_VAR 0 1
39231: PPUSH
39232: CALL_OW 274
39236: ST_TO_ADDR
// if not pom then
39237: LD_VAR 0 4
39241: NOT
39242: IFFALSE 39246
// exit ;
39244: GO 39347
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39246: LD_ADDR_VAR 0 5
39250: PUSH
39251: LD_VAR 0 2
39255: PPUSH
39256: LD_VAR 0 1
39260: PPUSH
39261: CALL_OW 248
39265: PPUSH
39266: CALL_OW 450
39270: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39271: LD_ADDR_VAR 0 3
39275: PUSH
39276: LD_VAR 0 4
39280: PPUSH
39281: LD_INT 1
39283: PPUSH
39284: CALL_OW 275
39288: PUSH
39289: LD_VAR 0 5
39293: PUSH
39294: LD_INT 1
39296: ARRAY
39297: GREATEREQUAL
39298: PUSH
39299: LD_VAR 0 4
39303: PPUSH
39304: LD_INT 2
39306: PPUSH
39307: CALL_OW 275
39311: PUSH
39312: LD_VAR 0 5
39316: PUSH
39317: LD_INT 2
39319: ARRAY
39320: GREATEREQUAL
39321: AND
39322: PUSH
39323: LD_VAR 0 4
39327: PPUSH
39328: LD_INT 3
39330: PPUSH
39331: CALL_OW 275
39335: PUSH
39336: LD_VAR 0 5
39340: PUSH
39341: LD_INT 3
39343: ARRAY
39344: GREATEREQUAL
39345: AND
39346: ST_TO_ADDR
// end ;
39347: LD_VAR 0 3
39351: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39352: LD_INT 0
39354: PPUSH
39355: PPUSH
39356: PPUSH
39357: PPUSH
39358: PPUSH
39359: PPUSH
39360: PPUSH
39361: PPUSH
39362: PPUSH
39363: PPUSH
39364: PPUSH
// result := false ;
39365: LD_ADDR_VAR 0 8
39369: PUSH
39370: LD_INT 0
39372: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39373: LD_VAR 0 5
39377: NOT
39378: PUSH
39379: LD_VAR 0 1
39383: NOT
39384: OR
39385: PUSH
39386: LD_VAR 0 2
39390: NOT
39391: OR
39392: PUSH
39393: LD_VAR 0 3
39397: NOT
39398: OR
39399: IFFALSE 39403
// exit ;
39401: GO 40217
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39403: LD_ADDR_VAR 0 14
39407: PUSH
39408: LD_VAR 0 1
39412: PPUSH
39413: LD_VAR 0 2
39417: PPUSH
39418: LD_VAR 0 3
39422: PPUSH
39423: LD_VAR 0 4
39427: PPUSH
39428: LD_VAR 0 5
39432: PUSH
39433: LD_INT 1
39435: ARRAY
39436: PPUSH
39437: CALL_OW 248
39441: PPUSH
39442: LD_INT 0
39444: PPUSH
39445: CALL 41454 0 6
39449: ST_TO_ADDR
// if not hexes then
39450: LD_VAR 0 14
39454: NOT
39455: IFFALSE 39459
// exit ;
39457: GO 40217
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39459: LD_ADDR_VAR 0 17
39463: PUSH
39464: LD_VAR 0 5
39468: PPUSH
39469: LD_INT 22
39471: PUSH
39472: LD_VAR 0 13
39476: PPUSH
39477: CALL_OW 255
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 2
39488: PUSH
39489: LD_INT 30
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 30
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: LIST
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PPUSH
39518: CALL_OW 72
39522: ST_TO_ADDR
// for i = 1 to hexes do
39523: LD_ADDR_VAR 0 9
39527: PUSH
39528: DOUBLE
39529: LD_INT 1
39531: DEC
39532: ST_TO_ADDR
39533: LD_VAR 0 14
39537: PUSH
39538: FOR_TO
39539: IFFALSE 40215
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39541: LD_ADDR_VAR 0 13
39545: PUSH
39546: LD_VAR 0 14
39550: PUSH
39551: LD_VAR 0 9
39555: ARRAY
39556: PUSH
39557: LD_INT 1
39559: ARRAY
39560: PPUSH
39561: LD_VAR 0 14
39565: PUSH
39566: LD_VAR 0 9
39570: ARRAY
39571: PUSH
39572: LD_INT 2
39574: ARRAY
39575: PPUSH
39576: CALL_OW 428
39580: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39581: LD_VAR 0 14
39585: PUSH
39586: LD_VAR 0 9
39590: ARRAY
39591: PUSH
39592: LD_INT 1
39594: ARRAY
39595: PPUSH
39596: LD_VAR 0 14
39600: PUSH
39601: LD_VAR 0 9
39605: ARRAY
39606: PUSH
39607: LD_INT 2
39609: ARRAY
39610: PPUSH
39611: CALL_OW 351
39615: PUSH
39616: LD_VAR 0 14
39620: PUSH
39621: LD_VAR 0 9
39625: ARRAY
39626: PUSH
39627: LD_INT 1
39629: ARRAY
39630: PPUSH
39631: LD_VAR 0 14
39635: PUSH
39636: LD_VAR 0 9
39640: ARRAY
39641: PUSH
39642: LD_INT 2
39644: ARRAY
39645: PPUSH
39646: CALL_OW 488
39650: NOT
39651: OR
39652: PUSH
39653: LD_VAR 0 13
39657: PPUSH
39658: CALL_OW 247
39662: PUSH
39663: LD_INT 3
39665: EQUAL
39666: OR
39667: IFFALSE 39673
// exit ;
39669: POP
39670: POP
39671: GO 40217
// if not tmp then
39673: LD_VAR 0 13
39677: NOT
39678: IFFALSE 39682
// continue ;
39680: GO 39538
// result := true ;
39682: LD_ADDR_VAR 0 8
39686: PUSH
39687: LD_INT 1
39689: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39690: LD_VAR 0 6
39694: PUSH
39695: LD_VAR 0 13
39699: PPUSH
39700: CALL_OW 247
39704: PUSH
39705: LD_INT 2
39707: EQUAL
39708: AND
39709: PUSH
39710: LD_VAR 0 13
39714: PPUSH
39715: CALL_OW 263
39719: PUSH
39720: LD_INT 1
39722: EQUAL
39723: AND
39724: IFFALSE 39888
// begin if IsDrivenBy ( tmp ) then
39726: LD_VAR 0 13
39730: PPUSH
39731: CALL_OW 311
39735: IFFALSE 39739
// continue ;
39737: GO 39538
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39739: LD_VAR 0 6
39743: PPUSH
39744: LD_INT 3
39746: PUSH
39747: LD_INT 60
39749: PUSH
39750: EMPTY
39751: LIST
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 3
39759: PUSH
39760: LD_INT 55
39762: PUSH
39763: EMPTY
39764: LIST
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PPUSH
39774: CALL_OW 72
39778: IFFALSE 39886
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39780: LD_ADDR_VAR 0 18
39784: PUSH
39785: LD_VAR 0 6
39789: PPUSH
39790: LD_INT 3
39792: PUSH
39793: LD_INT 60
39795: PUSH
39796: EMPTY
39797: LIST
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 3
39805: PUSH
39806: LD_INT 55
39808: PUSH
39809: EMPTY
39810: LIST
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PPUSH
39820: CALL_OW 72
39824: PUSH
39825: LD_INT 1
39827: ARRAY
39828: ST_TO_ADDR
// if IsInUnit ( driver ) then
39829: LD_VAR 0 18
39833: PPUSH
39834: CALL_OW 310
39838: IFFALSE 39849
// ComExit ( driver ) ;
39840: LD_VAR 0 18
39844: PPUSH
39845: CALL 65159 0 1
// AddComEnterUnit ( driver , tmp ) ;
39849: LD_VAR 0 18
39853: PPUSH
39854: LD_VAR 0 13
39858: PPUSH
39859: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39863: LD_VAR 0 18
39867: PPUSH
39868: LD_VAR 0 7
39872: PPUSH
39873: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39877: LD_VAR 0 18
39881: PPUSH
39882: CALL_OW 181
// end ; continue ;
39886: GO 39538
// end ; if not cleaners or not tmp in cleaners then
39888: LD_VAR 0 6
39892: NOT
39893: PUSH
39894: LD_VAR 0 13
39898: PUSH
39899: LD_VAR 0 6
39903: IN
39904: NOT
39905: OR
39906: IFFALSE 40213
// begin if dep then
39908: LD_VAR 0 17
39912: IFFALSE 40048
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39914: LD_ADDR_VAR 0 16
39918: PUSH
39919: LD_VAR 0 17
39923: PUSH
39924: LD_INT 1
39926: ARRAY
39927: PPUSH
39928: CALL_OW 250
39932: PPUSH
39933: LD_VAR 0 17
39937: PUSH
39938: LD_INT 1
39940: ARRAY
39941: PPUSH
39942: CALL_OW 254
39946: PPUSH
39947: LD_INT 5
39949: PPUSH
39950: CALL_OW 272
39954: PUSH
39955: LD_VAR 0 17
39959: PUSH
39960: LD_INT 1
39962: ARRAY
39963: PPUSH
39964: CALL_OW 251
39968: PPUSH
39969: LD_VAR 0 17
39973: PUSH
39974: LD_INT 1
39976: ARRAY
39977: PPUSH
39978: CALL_OW 254
39982: PPUSH
39983: LD_INT 5
39985: PPUSH
39986: CALL_OW 273
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39995: LD_VAR 0 16
39999: PUSH
40000: LD_INT 1
40002: ARRAY
40003: PPUSH
40004: LD_VAR 0 16
40008: PUSH
40009: LD_INT 2
40011: ARRAY
40012: PPUSH
40013: CALL_OW 488
40017: IFFALSE 40048
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40019: LD_VAR 0 13
40023: PPUSH
40024: LD_VAR 0 16
40028: PUSH
40029: LD_INT 1
40031: ARRAY
40032: PPUSH
40033: LD_VAR 0 16
40037: PUSH
40038: LD_INT 2
40040: ARRAY
40041: PPUSH
40042: CALL_OW 111
// continue ;
40046: GO 39538
// end ; end ; r := GetDir ( tmp ) ;
40048: LD_ADDR_VAR 0 15
40052: PUSH
40053: LD_VAR 0 13
40057: PPUSH
40058: CALL_OW 254
40062: ST_TO_ADDR
// if r = 5 then
40063: LD_VAR 0 15
40067: PUSH
40068: LD_INT 5
40070: EQUAL
40071: IFFALSE 40081
// r := 0 ;
40073: LD_ADDR_VAR 0 15
40077: PUSH
40078: LD_INT 0
40080: ST_TO_ADDR
// for j = r to 5 do
40081: LD_ADDR_VAR 0 10
40085: PUSH
40086: DOUBLE
40087: LD_VAR 0 15
40091: DEC
40092: ST_TO_ADDR
40093: LD_INT 5
40095: PUSH
40096: FOR_TO
40097: IFFALSE 40211
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40099: LD_ADDR_VAR 0 11
40103: PUSH
40104: LD_VAR 0 13
40108: PPUSH
40109: CALL_OW 250
40113: PPUSH
40114: LD_VAR 0 10
40118: PPUSH
40119: LD_INT 2
40121: PPUSH
40122: CALL_OW 272
40126: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40127: LD_ADDR_VAR 0 12
40131: PUSH
40132: LD_VAR 0 13
40136: PPUSH
40137: CALL_OW 251
40141: PPUSH
40142: LD_VAR 0 10
40146: PPUSH
40147: LD_INT 2
40149: PPUSH
40150: CALL_OW 273
40154: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40155: LD_VAR 0 11
40159: PPUSH
40160: LD_VAR 0 12
40164: PPUSH
40165: CALL_OW 488
40169: PUSH
40170: LD_VAR 0 11
40174: PPUSH
40175: LD_VAR 0 12
40179: PPUSH
40180: CALL_OW 428
40184: NOT
40185: AND
40186: IFFALSE 40209
// begin ComMoveXY ( tmp , _x , _y ) ;
40188: LD_VAR 0 13
40192: PPUSH
40193: LD_VAR 0 11
40197: PPUSH
40198: LD_VAR 0 12
40202: PPUSH
40203: CALL_OW 111
// break ;
40207: GO 40211
// end ; end ;
40209: GO 40096
40211: POP
40212: POP
// end ; end ;
40213: GO 39538
40215: POP
40216: POP
// end ;
40217: LD_VAR 0 8
40221: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40222: LD_INT 0
40224: PPUSH
// result := true ;
40225: LD_ADDR_VAR 0 3
40229: PUSH
40230: LD_INT 1
40232: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40233: LD_VAR 0 2
40237: PUSH
40238: LD_INT 24
40240: DOUBLE
40241: EQUAL
40242: IFTRUE 40252
40244: LD_INT 33
40246: DOUBLE
40247: EQUAL
40248: IFTRUE 40252
40250: GO 40277
40252: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40253: LD_ADDR_VAR 0 3
40257: PUSH
40258: LD_INT 32
40260: PPUSH
40261: LD_VAR 0 1
40265: PPUSH
40266: CALL_OW 321
40270: PUSH
40271: LD_INT 2
40273: EQUAL
40274: ST_TO_ADDR
40275: GO 40597
40277: LD_INT 20
40279: DOUBLE
40280: EQUAL
40281: IFTRUE 40285
40283: GO 40310
40285: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40286: LD_ADDR_VAR 0 3
40290: PUSH
40291: LD_INT 6
40293: PPUSH
40294: LD_VAR 0 1
40298: PPUSH
40299: CALL_OW 321
40303: PUSH
40304: LD_INT 2
40306: EQUAL
40307: ST_TO_ADDR
40308: GO 40597
40310: LD_INT 22
40312: DOUBLE
40313: EQUAL
40314: IFTRUE 40324
40316: LD_INT 36
40318: DOUBLE
40319: EQUAL
40320: IFTRUE 40324
40322: GO 40349
40324: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40325: LD_ADDR_VAR 0 3
40329: PUSH
40330: LD_INT 15
40332: PPUSH
40333: LD_VAR 0 1
40337: PPUSH
40338: CALL_OW 321
40342: PUSH
40343: LD_INT 2
40345: EQUAL
40346: ST_TO_ADDR
40347: GO 40597
40349: LD_INT 30
40351: DOUBLE
40352: EQUAL
40353: IFTRUE 40357
40355: GO 40382
40357: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40358: LD_ADDR_VAR 0 3
40362: PUSH
40363: LD_INT 20
40365: PPUSH
40366: LD_VAR 0 1
40370: PPUSH
40371: CALL_OW 321
40375: PUSH
40376: LD_INT 2
40378: EQUAL
40379: ST_TO_ADDR
40380: GO 40597
40382: LD_INT 28
40384: DOUBLE
40385: EQUAL
40386: IFTRUE 40396
40388: LD_INT 21
40390: DOUBLE
40391: EQUAL
40392: IFTRUE 40396
40394: GO 40421
40396: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40397: LD_ADDR_VAR 0 3
40401: PUSH
40402: LD_INT 21
40404: PPUSH
40405: LD_VAR 0 1
40409: PPUSH
40410: CALL_OW 321
40414: PUSH
40415: LD_INT 2
40417: EQUAL
40418: ST_TO_ADDR
40419: GO 40597
40421: LD_INT 16
40423: DOUBLE
40424: EQUAL
40425: IFTRUE 40429
40427: GO 40456
40429: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40430: LD_ADDR_VAR 0 3
40434: PUSH
40435: LD_EXP 37
40439: PPUSH
40440: LD_VAR 0 1
40444: PPUSH
40445: CALL_OW 321
40449: PUSH
40450: LD_INT 2
40452: EQUAL
40453: ST_TO_ADDR
40454: GO 40597
40456: LD_INT 19
40458: DOUBLE
40459: EQUAL
40460: IFTRUE 40470
40462: LD_INT 23
40464: DOUBLE
40465: EQUAL
40466: IFTRUE 40470
40468: GO 40497
40470: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40471: LD_ADDR_VAR 0 3
40475: PUSH
40476: LD_EXP 36
40480: PPUSH
40481: LD_VAR 0 1
40485: PPUSH
40486: CALL_OW 321
40490: PUSH
40491: LD_INT 2
40493: EQUAL
40494: ST_TO_ADDR
40495: GO 40597
40497: LD_INT 17
40499: DOUBLE
40500: EQUAL
40501: IFTRUE 40505
40503: GO 40530
40505: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40506: LD_ADDR_VAR 0 3
40510: PUSH
40511: LD_INT 39
40513: PPUSH
40514: LD_VAR 0 1
40518: PPUSH
40519: CALL_OW 321
40523: PUSH
40524: LD_INT 2
40526: EQUAL
40527: ST_TO_ADDR
40528: GO 40597
40530: LD_INT 18
40532: DOUBLE
40533: EQUAL
40534: IFTRUE 40538
40536: GO 40563
40538: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40539: LD_ADDR_VAR 0 3
40543: PUSH
40544: LD_INT 40
40546: PPUSH
40547: LD_VAR 0 1
40551: PPUSH
40552: CALL_OW 321
40556: PUSH
40557: LD_INT 2
40559: EQUAL
40560: ST_TO_ADDR
40561: GO 40597
40563: LD_INT 27
40565: DOUBLE
40566: EQUAL
40567: IFTRUE 40571
40569: GO 40596
40571: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40572: LD_ADDR_VAR 0 3
40576: PUSH
40577: LD_INT 35
40579: PPUSH
40580: LD_VAR 0 1
40584: PPUSH
40585: CALL_OW 321
40589: PUSH
40590: LD_INT 2
40592: EQUAL
40593: ST_TO_ADDR
40594: GO 40597
40596: POP
// end ;
40597: LD_VAR 0 3
40601: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40602: LD_INT 0
40604: PPUSH
40605: PPUSH
40606: PPUSH
40607: PPUSH
40608: PPUSH
40609: PPUSH
40610: PPUSH
40611: PPUSH
40612: PPUSH
40613: PPUSH
40614: PPUSH
// result := false ;
40615: LD_ADDR_VAR 0 6
40619: PUSH
40620: LD_INT 0
40622: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40623: LD_VAR 0 1
40627: NOT
40628: PUSH
40629: LD_VAR 0 1
40633: PPUSH
40634: CALL_OW 266
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: IN
40649: NOT
40650: OR
40651: PUSH
40652: LD_VAR 0 2
40656: NOT
40657: OR
40658: PUSH
40659: LD_VAR 0 5
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: LD_INT 2
40672: PUSH
40673: LD_INT 3
40675: PUSH
40676: LD_INT 4
40678: PUSH
40679: LD_INT 5
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: IN
40690: NOT
40691: OR
40692: PUSH
40693: LD_VAR 0 3
40697: PPUSH
40698: LD_VAR 0 4
40702: PPUSH
40703: CALL_OW 488
40707: NOT
40708: OR
40709: IFFALSE 40713
// exit ;
40711: GO 41449
// side := GetSide ( depot ) ;
40713: LD_ADDR_VAR 0 9
40717: PUSH
40718: LD_VAR 0 1
40722: PPUSH
40723: CALL_OW 255
40727: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40728: LD_VAR 0 9
40732: PPUSH
40733: LD_VAR 0 2
40737: PPUSH
40738: CALL 40222 0 2
40742: NOT
40743: IFFALSE 40747
// exit ;
40745: GO 41449
// pom := GetBase ( depot ) ;
40747: LD_ADDR_VAR 0 10
40751: PUSH
40752: LD_VAR 0 1
40756: PPUSH
40757: CALL_OW 274
40761: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40762: LD_ADDR_VAR 0 11
40766: PUSH
40767: LD_VAR 0 2
40771: PPUSH
40772: LD_VAR 0 1
40776: PPUSH
40777: CALL_OW 248
40781: PPUSH
40782: CALL_OW 450
40786: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40787: LD_VAR 0 10
40791: PPUSH
40792: LD_INT 1
40794: PPUSH
40795: CALL_OW 275
40799: PUSH
40800: LD_VAR 0 11
40804: PUSH
40805: LD_INT 1
40807: ARRAY
40808: GREATEREQUAL
40809: PUSH
40810: LD_VAR 0 10
40814: PPUSH
40815: LD_INT 2
40817: PPUSH
40818: CALL_OW 275
40822: PUSH
40823: LD_VAR 0 11
40827: PUSH
40828: LD_INT 2
40830: ARRAY
40831: GREATEREQUAL
40832: AND
40833: PUSH
40834: LD_VAR 0 10
40838: PPUSH
40839: LD_INT 3
40841: PPUSH
40842: CALL_OW 275
40846: PUSH
40847: LD_VAR 0 11
40851: PUSH
40852: LD_INT 3
40854: ARRAY
40855: GREATEREQUAL
40856: AND
40857: NOT
40858: IFFALSE 40862
// exit ;
40860: GO 41449
// if GetBType ( depot ) = b_depot then
40862: LD_VAR 0 1
40866: PPUSH
40867: CALL_OW 266
40871: PUSH
40872: LD_INT 0
40874: EQUAL
40875: IFFALSE 40887
// dist := 28 else
40877: LD_ADDR_VAR 0 14
40881: PUSH
40882: LD_INT 28
40884: ST_TO_ADDR
40885: GO 40895
// dist := 36 ;
40887: LD_ADDR_VAR 0 14
40891: PUSH
40892: LD_INT 36
40894: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40895: LD_VAR 0 1
40899: PPUSH
40900: LD_VAR 0 3
40904: PPUSH
40905: LD_VAR 0 4
40909: PPUSH
40910: CALL_OW 297
40914: PUSH
40915: LD_VAR 0 14
40919: GREATER
40920: IFFALSE 40924
// exit ;
40922: GO 41449
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40924: LD_ADDR_VAR 0 12
40928: PUSH
40929: LD_VAR 0 2
40933: PPUSH
40934: LD_VAR 0 3
40938: PPUSH
40939: LD_VAR 0 4
40943: PPUSH
40944: LD_VAR 0 5
40948: PPUSH
40949: LD_VAR 0 1
40953: PPUSH
40954: CALL_OW 248
40958: PPUSH
40959: LD_INT 0
40961: PPUSH
40962: CALL 41454 0 6
40966: ST_TO_ADDR
// if not hexes then
40967: LD_VAR 0 12
40971: NOT
40972: IFFALSE 40976
// exit ;
40974: GO 41449
// hex := GetHexInfo ( x , y ) ;
40976: LD_ADDR_VAR 0 15
40980: PUSH
40981: LD_VAR 0 3
40985: PPUSH
40986: LD_VAR 0 4
40990: PPUSH
40991: CALL_OW 546
40995: ST_TO_ADDR
// if hex [ 1 ] then
40996: LD_VAR 0 15
41000: PUSH
41001: LD_INT 1
41003: ARRAY
41004: IFFALSE 41008
// exit ;
41006: GO 41449
// height := hex [ 2 ] ;
41008: LD_ADDR_VAR 0 13
41012: PUSH
41013: LD_VAR 0 15
41017: PUSH
41018: LD_INT 2
41020: ARRAY
41021: ST_TO_ADDR
// for i = 1 to hexes do
41022: LD_ADDR_VAR 0 7
41026: PUSH
41027: DOUBLE
41028: LD_INT 1
41030: DEC
41031: ST_TO_ADDR
41032: LD_VAR 0 12
41036: PUSH
41037: FOR_TO
41038: IFFALSE 41368
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41040: LD_VAR 0 12
41044: PUSH
41045: LD_VAR 0 7
41049: ARRAY
41050: PUSH
41051: LD_INT 1
41053: ARRAY
41054: PPUSH
41055: LD_VAR 0 12
41059: PUSH
41060: LD_VAR 0 7
41064: ARRAY
41065: PUSH
41066: LD_INT 2
41068: ARRAY
41069: PPUSH
41070: CALL_OW 488
41074: NOT
41075: PUSH
41076: LD_VAR 0 12
41080: PUSH
41081: LD_VAR 0 7
41085: ARRAY
41086: PUSH
41087: LD_INT 1
41089: ARRAY
41090: PPUSH
41091: LD_VAR 0 12
41095: PUSH
41096: LD_VAR 0 7
41100: ARRAY
41101: PUSH
41102: LD_INT 2
41104: ARRAY
41105: PPUSH
41106: CALL_OW 428
41110: PUSH
41111: LD_INT 0
41113: GREATER
41114: OR
41115: PUSH
41116: LD_VAR 0 12
41120: PUSH
41121: LD_VAR 0 7
41125: ARRAY
41126: PUSH
41127: LD_INT 1
41129: ARRAY
41130: PPUSH
41131: LD_VAR 0 12
41135: PUSH
41136: LD_VAR 0 7
41140: ARRAY
41141: PUSH
41142: LD_INT 2
41144: ARRAY
41145: PPUSH
41146: CALL_OW 351
41150: OR
41151: IFFALSE 41157
// exit ;
41153: POP
41154: POP
41155: GO 41449
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41157: LD_ADDR_VAR 0 8
41161: PUSH
41162: LD_VAR 0 12
41166: PUSH
41167: LD_VAR 0 7
41171: ARRAY
41172: PUSH
41173: LD_INT 1
41175: ARRAY
41176: PPUSH
41177: LD_VAR 0 12
41181: PUSH
41182: LD_VAR 0 7
41186: ARRAY
41187: PUSH
41188: LD_INT 2
41190: ARRAY
41191: PPUSH
41192: CALL_OW 546
41196: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41197: LD_VAR 0 8
41201: PUSH
41202: LD_INT 1
41204: ARRAY
41205: PUSH
41206: LD_VAR 0 8
41210: PUSH
41211: LD_INT 2
41213: ARRAY
41214: PUSH
41215: LD_VAR 0 13
41219: PUSH
41220: LD_INT 2
41222: PLUS
41223: GREATER
41224: OR
41225: PUSH
41226: LD_VAR 0 8
41230: PUSH
41231: LD_INT 2
41233: ARRAY
41234: PUSH
41235: LD_VAR 0 13
41239: PUSH
41240: LD_INT 2
41242: MINUS
41243: LESS
41244: OR
41245: PUSH
41246: LD_VAR 0 8
41250: PUSH
41251: LD_INT 3
41253: ARRAY
41254: PUSH
41255: LD_INT 0
41257: PUSH
41258: LD_INT 8
41260: PUSH
41261: LD_INT 9
41263: PUSH
41264: LD_INT 10
41266: PUSH
41267: LD_INT 11
41269: PUSH
41270: LD_INT 12
41272: PUSH
41273: LD_INT 13
41275: PUSH
41276: LD_INT 16
41278: PUSH
41279: LD_INT 17
41281: PUSH
41282: LD_INT 18
41284: PUSH
41285: LD_INT 19
41287: PUSH
41288: LD_INT 20
41290: PUSH
41291: LD_INT 21
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: IN
41309: NOT
41310: OR
41311: PUSH
41312: LD_VAR 0 8
41316: PUSH
41317: LD_INT 5
41319: ARRAY
41320: NOT
41321: OR
41322: PUSH
41323: LD_VAR 0 8
41327: PUSH
41328: LD_INT 6
41330: ARRAY
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: LD_INT 7
41340: PUSH
41341: LD_INT 9
41343: PUSH
41344: LD_INT 10
41346: PUSH
41347: LD_INT 11
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: IN
41358: NOT
41359: OR
41360: IFFALSE 41366
// exit ;
41362: POP
41363: POP
41364: GO 41449
// end ;
41366: GO 41037
41368: POP
41369: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41370: LD_VAR 0 9
41374: PPUSH
41375: LD_VAR 0 3
41379: PPUSH
41380: LD_VAR 0 4
41384: PPUSH
41385: LD_INT 20
41387: PPUSH
41388: CALL 33395 0 4
41392: PUSH
41393: LD_INT 4
41395: ARRAY
41396: IFFALSE 41400
// exit ;
41398: GO 41449
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41400: LD_VAR 0 2
41404: PUSH
41405: LD_INT 29
41407: PUSH
41408: LD_INT 30
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: IN
41415: PUSH
41416: LD_VAR 0 3
41420: PPUSH
41421: LD_VAR 0 4
41425: PPUSH
41426: LD_VAR 0 9
41430: PPUSH
41431: CALL_OW 440
41435: NOT
41436: AND
41437: IFFALSE 41441
// exit ;
41439: GO 41449
// result := true ;
41441: LD_ADDR_VAR 0 6
41445: PUSH
41446: LD_INT 1
41448: ST_TO_ADDR
// end ;
41449: LD_VAR 0 6
41453: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41454: LD_INT 0
41456: PPUSH
41457: PPUSH
41458: PPUSH
41459: PPUSH
41460: PPUSH
41461: PPUSH
41462: PPUSH
41463: PPUSH
41464: PPUSH
41465: PPUSH
41466: PPUSH
41467: PPUSH
41468: PPUSH
41469: PPUSH
41470: PPUSH
41471: PPUSH
41472: PPUSH
41473: PPUSH
41474: PPUSH
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
41480: PPUSH
41481: PPUSH
41482: PPUSH
41483: PPUSH
41484: PPUSH
41485: PPUSH
41486: PPUSH
41487: PPUSH
41488: PPUSH
41489: PPUSH
41490: PPUSH
41491: PPUSH
41492: PPUSH
41493: PPUSH
41494: PPUSH
41495: PPUSH
41496: PPUSH
41497: PPUSH
41498: PPUSH
41499: PPUSH
41500: PPUSH
41501: PPUSH
41502: PPUSH
41503: PPUSH
41504: PPUSH
41505: PPUSH
41506: PPUSH
41507: PPUSH
41508: PPUSH
41509: PPUSH
41510: PPUSH
41511: PPUSH
41512: PPUSH
41513: PPUSH
// result = [ ] ;
41514: LD_ADDR_VAR 0 7
41518: PUSH
41519: EMPTY
41520: ST_TO_ADDR
// temp_list = [ ] ;
41521: LD_ADDR_VAR 0 9
41525: PUSH
41526: EMPTY
41527: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41528: LD_VAR 0 4
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: LD_INT 2
41541: PUSH
41542: LD_INT 3
41544: PUSH
41545: LD_INT 4
41547: PUSH
41548: LD_INT 5
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: IN
41559: NOT
41560: PUSH
41561: LD_VAR 0 1
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: IN
41576: PUSH
41577: LD_VAR 0 5
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: LD_INT 2
41587: PUSH
41588: LD_INT 3
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: LIST
41595: IN
41596: NOT
41597: AND
41598: OR
41599: IFFALSE 41603
// exit ;
41601: GO 59994
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41603: LD_VAR 0 1
41607: PUSH
41608: LD_INT 6
41610: PUSH
41611: LD_INT 7
41613: PUSH
41614: LD_INT 8
41616: PUSH
41617: LD_INT 13
41619: PUSH
41620: LD_INT 12
41622: PUSH
41623: LD_INT 15
41625: PUSH
41626: LD_INT 11
41628: PUSH
41629: LD_INT 14
41631: PUSH
41632: LD_INT 10
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: IN
41646: IFFALSE 41656
// btype = b_lab ;
41648: LD_ADDR_VAR 0 1
41652: PUSH
41653: LD_INT 6
41655: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41656: LD_VAR 0 6
41660: PUSH
41661: LD_INT 0
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: LD_INT 2
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: LIST
41674: IN
41675: NOT
41676: PUSH
41677: LD_VAR 0 1
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: LD_INT 3
41693: PUSH
41694: LD_INT 6
41696: PUSH
41697: LD_INT 36
41699: PUSH
41700: LD_INT 4
41702: PUSH
41703: LD_INT 5
41705: PUSH
41706: LD_INT 31
41708: PUSH
41709: LD_INT 32
41711: PUSH
41712: LD_INT 33
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: IN
41728: NOT
41729: PUSH
41730: LD_VAR 0 6
41734: PUSH
41735: LD_INT 1
41737: EQUAL
41738: AND
41739: OR
41740: PUSH
41741: LD_VAR 0 1
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: LD_INT 3
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: IN
41756: NOT
41757: PUSH
41758: LD_VAR 0 6
41762: PUSH
41763: LD_INT 2
41765: EQUAL
41766: AND
41767: OR
41768: IFFALSE 41778
// mode = 0 ;
41770: LD_ADDR_VAR 0 6
41774: PUSH
41775: LD_INT 0
41777: ST_TO_ADDR
// case mode of 0 :
41778: LD_VAR 0 6
41782: PUSH
41783: LD_INT 0
41785: DOUBLE
41786: EQUAL
41787: IFTRUE 41791
41789: GO 53244
41791: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41792: LD_ADDR_VAR 0 11
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 1
41850: NEG
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: NEG
41862: PUSH
41863: LD_INT 1
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: LD_INT 2
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: LD_INT 2
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: LD_INT 3
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: LD_INT 3
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: LD_INT 2
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41985: LD_ADDR_VAR 0 12
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 1
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 2
42077: PUSH
42078: LD_INT 0
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 2
42087: PUSH
42088: LD_INT 1
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 2
42108: NEG
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 2
42119: NEG
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 2
42131: NEG
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 3
42142: NEG
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 3
42153: NEG
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42181: LD_ADDR_VAR 0 13
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 2
42274: PUSH
42275: LD_INT 1
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 2
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 2
42304: NEG
42305: PUSH
42306: LD_INT 1
42308: NEG
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 2
42316: NEG
42317: PUSH
42318: LD_INT 2
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: LD_INT 3
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 3
42340: NEG
42341: PUSH
42342: LD_INT 2
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 3
42352: NEG
42353: PUSH
42354: LD_INT 3
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42380: LD_ADDR_VAR 0 14
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 1
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: NEG
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: LD_INT 1
42453: NEG
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: LD_INT 2
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 2
42476: NEG
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 2
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: LD_INT 3
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: LD_INT 3
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: LD_INT 2
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42576: LD_ADDR_VAR 0 15
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: LD_INT 1
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: LD_INT 1
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: LD_INT 1
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 2
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 2
42678: PUSH
42679: LD_INT 1
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 2
42699: NEG
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 2
42710: NEG
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 3
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 3
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42769: LD_ADDR_VAR 0 16
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: NEG
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: LD_INT 2
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: LD_INT 2
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 2
42892: NEG
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 2
42904: NEG
42905: PUSH
42906: LD_INT 2
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 3
42916: PUSH
42917: LD_INT 2
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 3
42926: PUSH
42927: LD_INT 3
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 2
42936: PUSH
42937: LD_INT 3
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42962: LD_ADDR_VAR 0 17
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: LD_INT 2
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 2
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: PUSH
43098: LD_INT 2
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: LD_INT 2
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: LD_INT 2
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 2
43138: NEG
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 2
43149: NEG
43150: PUSH
43151: LD_INT 1
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 2
43161: NEG
43162: PUSH
43163: LD_INT 2
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43192: LD_ADDR_VAR 0 18
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: LD_INT 1
43265: NEG
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: LD_INT 2
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: LD_INT 2
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 2
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 2
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: LD_INT 2
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 2
43368: NEG
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: LD_INT 1
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 2
43391: NEG
43392: PUSH
43393: LD_INT 2
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43422: LD_ADDR_VAR 0 19
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: NEG
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: LD_INT 2
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: LD_INT 1
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 2
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 2
43557: PUSH
43558: LD_INT 2
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 2
43598: NEG
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 2
43609: NEG
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 2
43621: NEG
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43652: LD_ADDR_VAR 0 20
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: LD_INT 2
43737: NEG
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: LD_INT 2
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 2
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 2
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 2
43839: NEG
43840: PUSH
43841: LD_INT 1
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 2
43851: NEG
43852: PUSH
43853: LD_INT 2
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43882: LD_ADDR_VAR 0 21
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: LD_INT 2
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 2
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: LD_INT 2
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 2
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 2
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: NEG
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 2
44069: NEG
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 2
44081: NEG
44082: PUSH
44083: LD_INT 2
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44112: LD_ADDR_VAR 0 22
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: LD_INT 2
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: LD_INT 2
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 2
44288: NEG
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: NEG
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 2
44311: NEG
44312: PUSH
44313: LD_INT 2
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44342: LD_ADDR_VAR 0 23
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: LD_INT 2
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 2
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 2
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: LD_INT 2
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: LD_INT 2
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: NEG
44554: PUSH
44555: LD_INT 3
44557: NEG
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: LD_INT 3
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: LD_INT 2
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44622: LD_ADDR_VAR 0 24
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: LD_INT 1
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 2
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: NEG
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: NEG
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 2
44821: NEG
44822: PUSH
44823: LD_INT 2
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: LD_INT 2
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 3
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 3
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44898: LD_ADDR_VAR 0 25
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: NEG
44980: PUSH
44981: LD_INT 2
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 2
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 2
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: LD_INT 2
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 2
45074: NEG
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 2
45085: NEG
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 3
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 3
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 2
45129: PUSH
45130: LD_INT 3
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: LD_INT 3
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45172: LD_ADDR_VAR 0 26
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: LD_INT 2
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 2
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 2
45307: PUSH
45308: LD_INT 2
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: LD_INT 2
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: LD_INT 2
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 2
45348: NEG
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 2
45359: NEG
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 2
45371: NEG
45372: PUSH
45373: LD_INT 2
45375: NEG
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 2
45383: PUSH
45384: LD_INT 3
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: LD_INT 3
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: NEG
45415: PUSH
45416: LD_INT 1
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45448: LD_ADDR_VAR 0 27
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: LD_INT 2
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 2
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: LD_INT 2
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 3
45681: NEG
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 3
45693: NEG
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45728: LD_ADDR_VAR 0 28
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: LD_INT 2
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 2
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 2
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 2
45863: PUSH
45864: LD_INT 2
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: NEG
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: LD_INT 3
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: LD_INT 3
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 3
45963: NEG
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 3
45975: NEG
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46010: LD_ADDR_VAR 0 29
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: LD_INT 2
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 2
46200: NEG
46201: PUSH
46202: LD_INT 3
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 3
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 3
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: NEG
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 3
46254: NEG
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46289: LD_ADDR_VAR 0 30
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: NEG
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: LD_INT 2
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: LD_INT 2
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 2
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 2
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 2
46455: NEG
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: NEG
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: LD_INT 3
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 3
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 2
46511: PUSH
46512: LD_INT 3
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 3
46532: NEG
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46567: LD_ADDR_VAR 0 31
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: LD_INT 2
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: LD_INT 2
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: LD_INT 2
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: NEG
46757: PUSH
46758: LD_INT 3
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 3
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: LD_INT 3
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 3
46810: NEG
46811: PUSH
46812: LD_INT 2
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46845: LD_ADDR_VAR 0 32
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: LD_INT 2
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: LD_INT 2
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 2
46970: PUSH
46971: LD_INT 2
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: LD_INT 2
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 2
47022: NEG
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: LD_INT 3
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: LD_INT 2
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 3
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: LD_INT 3
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 3
47088: NEG
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47123: LD_ADDR_VAR 0 33
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: LD_INT 2
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 2
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: NEG
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: NEG
47314: PUSH
47315: LD_INT 3
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 3
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: LD_INT 3
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: LD_INT 2
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 3
47367: NEG
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47402: LD_ADDR_VAR 0 34
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: LD_INT 2
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: LD_INT 2
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 2
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 2
47558: NEG
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 2
47569: NEG
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: LD_INT 3
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 3
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: LD_INT 3
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 3
47647: NEG
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47682: LD_ADDR_VAR 0 35
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47794: LD_ADDR_VAR 0 36
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: LD_INT 2
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47906: LD_ADDR_VAR 0 37
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48018: LD_ADDR_VAR 0 38
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 2
48109: NEG
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48130: LD_ADDR_VAR 0 39
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 2
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48242: LD_ADDR_VAR 0 40
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48354: LD_ADDR_VAR 0 41
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: LD_INT 2
48439: NEG
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: LD_INT 2
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 2
48520: NEG
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: NEG
48545: PUSH
48546: LD_INT 3
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 3
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 3
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 3
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 3
48597: PUSH
48598: LD_INT 3
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: PUSH
48608: LD_INT 3
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: NEG
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 3
48628: NEG
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 3
48639: NEG
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 3
48651: NEG
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 3
48663: NEG
48664: PUSH
48665: LD_INT 3
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48704: LD_ADDR_VAR 0 42
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: LD_INT 2
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 2
48894: NEG
48895: PUSH
48896: LD_INT 3
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: LD_INT 3
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 3
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 3
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 3
48950: PUSH
48951: LD_INT 3
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: PUSH
48961: LD_INT 3
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: LD_INT 3
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 3
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 3
49001: NEG
49002: PUSH
49003: LD_INT 2
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 3
49013: NEG
49014: PUSH
49015: LD_INT 3
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49054: LD_ADDR_VAR 0 43
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: LD_INT 2
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 2
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 2
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: LD_INT 2
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 3
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: LD_INT 3
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 3
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 3
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: LD_INT 3
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: LD_INT 3
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 3
49350: NEG
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 3
49361: NEG
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49402: LD_ADDR_VAR 0 44
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: LD_INT 2
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: NEG
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: LD_INT 2
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: LD_INT 3
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 2
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 3
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 3
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 3
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 3
49645: PUSH
49646: LD_INT 3
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: LD_INT 3
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: NEG
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 3
49676: NEG
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 3
49687: NEG
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 3
49699: NEG
49700: PUSH
49701: LD_INT 2
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 3
49711: NEG
49712: PUSH
49713: LD_INT 3
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49752: LD_ADDR_VAR 0 45
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: LD_INT 2
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: LD_INT 2
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 2
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: LD_INT 2
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 2
49930: NEG
49931: PUSH
49932: LD_INT 2
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: LD_INT 3
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: LD_INT 3
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 3
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 3
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 3
49998: PUSH
49999: LD_INT 3
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: LD_INT 3
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: LD_INT 3
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 3
50049: NEG
50050: PUSH
50051: LD_INT 2
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 3
50061: NEG
50062: PUSH
50063: LD_INT 3
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50102: LD_ADDR_VAR 0 46
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: LD_INT 2
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 2
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 2
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: LD_INT 2
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: LD_INT 2
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 2
50268: NEG
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: NEG
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 3
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 3
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 3
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 3
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 3
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: LD_INT 3
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 2
50387: NEG
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 3
50398: NEG
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 3
50409: NEG
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50450: LD_ADDR_VAR 0 47
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: LD_INT 2
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 2
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 2
50565: NEG
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: LD_INT 2
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50601: LD_ADDR_VAR 0 48
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 2
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50748: LD_ADDR_VAR 0 49
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50892: LD_ADDR_VAR 0 50
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: LD_INT 2
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51036: LD_ADDR_VAR 0 51
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: LD_INT 2
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 2
51148: NEG
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51183: LD_ADDR_VAR 0 52
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: NEG
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 2
51298: NEG
51299: PUSH
51300: LD_INT 1
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 2
51310: NEG
51311: PUSH
51312: LD_INT 2
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51334: LD_ADDR_VAR 0 53
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: LD_INT 2
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 2
51469: PUSH
51470: LD_INT 2
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: LD_INT 2
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 2
51521: NEG
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 2
51533: NEG
51534: PUSH
51535: LD_INT 2
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51564: LD_ADDR_VAR 0 54
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: LD_INT 2
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 2
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 2
51751: NEG
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 2
51763: NEG
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51794: LD_ADDR_VAR 0 55
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: LD_INT 2
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: LD_INT 2
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: LD_INT 2
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: NEG
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 2
51993: NEG
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52024: LD_ADDR_VAR 0 56
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: LD_INT 2
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 2
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: NEG
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 2
52223: NEG
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52254: LD_ADDR_VAR 0 57
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: LD_INT 2
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: LD_INT 2
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52484: LD_ADDR_VAR 0 58
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 2
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: LD_INT 2
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: LD_INT 2
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 2
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52714: LD_ADDR_VAR 0 59
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52802: LD_ADDR_VAR 0 60
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52890: LD_ADDR_VAR 0 61
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52978: LD_ADDR_VAR 0 62
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53066: LD_ADDR_VAR 0 63
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53154: LD_ADDR_VAR 0 64
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: ST_TO_ADDR
// end ; 1 :
53242: GO 59139
53244: LD_INT 1
53246: DOUBLE
53247: EQUAL
53248: IFTRUE 53252
53250: GO 55875
53252: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53253: LD_ADDR_VAR 0 11
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: LD_INT 3
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 3
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 2
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: LIST
53296: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53297: LD_ADDR_VAR 0 12
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 3
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 3
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: LIST
53337: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53338: LD_ADDR_VAR 0 13
53342: PUSH
53343: LD_INT 3
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 3
53355: PUSH
53356: LD_INT 3
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: LD_INT 3
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: LIST
53377: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53378: LD_ADDR_VAR 0 14
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 3
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: LD_INT 3
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: LD_INT 2
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: LIST
53418: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53419: LD_ADDR_VAR 0 15
53423: PUSH
53424: LD_INT 2
53426: NEG
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 3
53437: NEG
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 3
53448: NEG
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53463: LD_ADDR_VAR 0 16
53467: PUSH
53468: LD_INT 2
53470: NEG
53471: PUSH
53472: LD_INT 3
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 3
53482: NEG
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 3
53494: NEG
53495: PUSH
53496: LD_INT 3
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: LIST
53508: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53509: LD_ADDR_VAR 0 17
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 3
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 3
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: LIST
53552: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53553: LD_ADDR_VAR 0 18
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 3
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 3
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: LIST
53593: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53594: LD_ADDR_VAR 0 19
53598: PUSH
53599: LD_INT 3
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 3
53611: PUSH
53612: LD_INT 3
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: LD_INT 3
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: LIST
53633: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53634: LD_ADDR_VAR 0 20
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: LD_INT 3
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 3
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: LIST
53674: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53675: LD_ADDR_VAR 0 21
53679: PUSH
53680: LD_INT 2
53682: NEG
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 3
53693: NEG
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 3
53704: NEG
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: LIST
53718: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53719: LD_ADDR_VAR 0 22
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: LD_INT 3
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 3
53738: NEG
53739: PUSH
53740: LD_INT 2
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 3
53750: NEG
53751: PUSH
53752: LD_INT 3
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: LIST
53764: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53765: LD_ADDR_VAR 0 23
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: LD_INT 3
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: LD_INT 4
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: LD_INT 3
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: LIST
53808: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53809: LD_ADDR_VAR 0 24
53813: PUSH
53814: LD_INT 3
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 3
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 4
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: LIST
53849: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53850: LD_ADDR_VAR 0 25
53854: PUSH
53855: LD_INT 3
53857: PUSH
53858: LD_INT 3
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 4
53867: PUSH
53868: LD_INT 3
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 3
53877: PUSH
53878: LD_INT 4
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: LIST
53889: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53890: LD_ADDR_VAR 0 26
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: LD_INT 3
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: LD_INT 4
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: LD_INT 3
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53931: LD_ADDR_VAR 0 27
53935: PUSH
53936: LD_INT 3
53938: NEG
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 3
53949: NEG
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 4
53960: NEG
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: LIST
53974: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53975: LD_ADDR_VAR 0 28
53979: PUSH
53980: LD_INT 3
53982: NEG
53983: PUSH
53984: LD_INT 3
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 3
53994: NEG
53995: PUSH
53996: LD_INT 4
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 4
54006: NEG
54007: PUSH
54008: LD_INT 3
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: LIST
54020: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54021: LD_ADDR_VAR 0 29
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: LD_INT 3
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: LD_INT 3
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: NEG
54063: PUSH
54064: LD_INT 4
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: LD_INT 4
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: LD_INT 3
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: LD_INT 5
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: LD_INT 5
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: LD_INT 4
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: LD_INT 6
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: LD_INT 6
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 5
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54176: LD_ADDR_VAR 0 30
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 3
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 3
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 3
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 4
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 4
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 4
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 5
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 5
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 5
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 6
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 6
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54319: LD_ADDR_VAR 0 31
54323: PUSH
54324: LD_INT 3
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 3
54336: PUSH
54337: LD_INT 3
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: LD_INT 3
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 4
54356: PUSH
54357: LD_INT 3
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 4
54366: PUSH
54367: LD_INT 4
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 3
54376: PUSH
54377: LD_INT 4
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 5
54386: PUSH
54387: LD_INT 4
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 5
54396: PUSH
54397: LD_INT 5
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 4
54406: PUSH
54407: LD_INT 5
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 6
54416: PUSH
54417: LD_INT 5
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 6
54426: PUSH
54427: LD_INT 6
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 5
54436: PUSH
54437: LD_INT 6
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54458: LD_ADDR_VAR 0 32
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: LD_INT 3
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: LD_INT 3
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: LD_INT 2
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: LD_INT 4
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: LD_INT 4
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: LD_INT 3
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: LD_INT 5
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: LD_INT 5
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: LD_INT 4
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: LD_INT 6
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: LD_INT 6
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: LD_INT 5
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54601: LD_ADDR_VAR 0 33
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 3
54619: NEG
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 3
54630: NEG
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 3
54642: NEG
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 4
54653: NEG
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 4
54664: NEG
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 4
54676: NEG
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 5
54687: NEG
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 5
54698: NEG
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 5
54710: NEG
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 6
54721: NEG
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 6
54732: NEG
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54756: LD_ADDR_VAR 0 34
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: LD_INT 3
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 3
54775: NEG
54776: PUSH
54777: LD_INT 2
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 3
54787: NEG
54788: PUSH
54789: LD_INT 3
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 3
54799: NEG
54800: PUSH
54801: LD_INT 4
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 4
54811: NEG
54812: PUSH
54813: LD_INT 3
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 4
54823: NEG
54824: PUSH
54825: LD_INT 4
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 4
54835: NEG
54836: PUSH
54837: LD_INT 5
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 5
54847: NEG
54848: PUSH
54849: LD_INT 4
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 5
54859: NEG
54860: PUSH
54861: LD_INT 5
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 5
54871: NEG
54872: PUSH
54873: LD_INT 6
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 6
54883: NEG
54884: PUSH
54885: LD_INT 5
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 6
54895: NEG
54896: PUSH
54897: LD_INT 6
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54919: LD_ADDR_VAR 0 41
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: LD_INT 2
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 3
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: LIST
54962: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54963: LD_ADDR_VAR 0 42
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 3
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: LIST
55003: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55004: LD_ADDR_VAR 0 43
55008: PUSH
55009: LD_INT 2
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 3
55021: PUSH
55022: LD_INT 2
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: LD_INT 3
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: LIST
55043: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55044: LD_ADDR_VAR 0 44
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: LD_INT 3
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: LIST
55084: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55085: LD_ADDR_VAR 0 45
55089: PUSH
55090: LD_INT 2
55092: NEG
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 3
55114: NEG
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: LIST
55128: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55129: LD_ADDR_VAR 0 46
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 2
55148: NEG
55149: PUSH
55150: LD_INT 3
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 3
55160: NEG
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: LIST
55174: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55175: LD_ADDR_VAR 0 47
55179: PUSH
55180: LD_INT 2
55182: NEG
55183: PUSH
55184: LD_INT 3
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: LD_INT 3
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55208: LD_ADDR_VAR 0 48
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 2
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55239: LD_ADDR_VAR 0 49
55243: PUSH
55244: LD_INT 3
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 3
55256: PUSH
55257: LD_INT 2
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55268: LD_ADDR_VAR 0 50
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: LD_INT 3
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: LD_INT 3
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55297: LD_ADDR_VAR 0 51
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: NEG
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55328: LD_ADDR_VAR 0 52
55332: PUSH
55333: LD_INT 3
55335: NEG
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 3
55347: NEG
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55361: LD_ADDR_VAR 0 53
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: LD_INT 3
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 3
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 2
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: LIST
55404: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55405: LD_ADDR_VAR 0 54
55409: PUSH
55410: LD_INT 2
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 3
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 3
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: LIST
55445: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55446: LD_ADDR_VAR 0 55
55450: PUSH
55451: LD_INT 3
55453: PUSH
55454: LD_INT 2
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 3
55463: PUSH
55464: LD_INT 3
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: LD_INT 3
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: LIST
55485: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55486: LD_ADDR_VAR 0 56
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 3
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 3
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 2
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: LIST
55526: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55527: LD_ADDR_VAR 0 57
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 3
55545: NEG
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 3
55556: NEG
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: LIST
55570: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55571: LD_ADDR_VAR 0 58
55575: PUSH
55576: LD_INT 2
55578: NEG
55579: PUSH
55580: LD_INT 3
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 3
55590: NEG
55591: PUSH
55592: LD_INT 2
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 3
55602: NEG
55603: PUSH
55604: LD_INT 3
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: LIST
55616: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55617: LD_ADDR_VAR 0 59
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: LD_INT 2
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: LD_INT 2
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: LIST
55660: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55661: LD_ADDR_VAR 0 60
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: LIST
55701: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55702: LD_ADDR_VAR 0 61
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: LD_INT 2
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: LD_INT 2
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: LIST
55741: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55742: LD_ADDR_VAR 0 62
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: LIST
55782: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55783: LD_ADDR_VAR 0 63
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 2
55812: NEG
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: LIST
55826: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55827: LD_ADDR_VAR 0 64
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: NEG
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 2
55858: NEG
55859: PUSH
55860: LD_INT 2
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: LIST
55872: ST_TO_ADDR
// end ; 2 :
55873: GO 59139
55875: LD_INT 2
55877: DOUBLE
55878: EQUAL
55879: IFTRUE 55883
55881: GO 59138
55883: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55884: LD_ADDR_VAR 0 29
55888: PUSH
55889: LD_INT 4
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 4
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 5
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 5
55922: PUSH
55923: LD_INT 1
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 4
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 3
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 3
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 5
55974: PUSH
55975: LD_INT 2
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 3
55984: PUSH
55985: LD_INT 3
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 3
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 4
56004: PUSH
56005: LD_INT 3
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 4
56014: PUSH
56015: LD_INT 4
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 3
56024: PUSH
56025: LD_INT 4
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: LD_INT 3
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: LD_INT 2
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 4
56054: PUSH
56055: LD_INT 2
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: LD_INT 4
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 4
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: LD_INT 3
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: LD_INT 4
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: LD_INT 5
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 5
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: LD_INT 4
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: LD_INT 3
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: LD_INT 5
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 2
56156: NEG
56157: PUSH
56158: LD_INT 3
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 3
56167: NEG
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 3
56178: NEG
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 3
56212: NEG
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 4
56223: NEG
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 4
56234: NEG
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 4
56246: NEG
56247: PUSH
56248: LD_INT 2
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: LD_INT 2
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 4
56269: NEG
56270: PUSH
56271: LD_INT 4
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 4
56281: NEG
56282: PUSH
56283: LD_INT 5
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 3
56293: NEG
56294: PUSH
56295: LD_INT 4
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 3
56305: NEG
56306: PUSH
56307: LD_INT 3
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 4
56317: NEG
56318: PUSH
56319: LD_INT 3
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 5
56329: NEG
56330: PUSH
56331: LD_INT 4
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 5
56341: NEG
56342: PUSH
56343: LD_INT 5
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 3
56353: NEG
56354: PUSH
56355: LD_INT 5
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 5
56365: NEG
56366: PUSH
56367: LD_INT 3
56369: NEG
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56422: LD_ADDR_VAR 0 30
56426: PUSH
56427: LD_INT 4
56429: PUSH
56430: LD_INT 4
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 4
56439: PUSH
56440: LD_INT 3
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 5
56449: PUSH
56450: LD_INT 4
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 5
56459: PUSH
56460: LD_INT 5
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 4
56469: PUSH
56470: LD_INT 5
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 3
56479: PUSH
56480: LD_INT 4
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 3
56489: PUSH
56490: LD_INT 3
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 5
56499: PUSH
56500: LD_INT 3
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 3
56509: PUSH
56510: LD_INT 5
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 3
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: LD_INT 3
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: LD_INT 4
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 4
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: LD_INT 3
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: LD_INT 4
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 4
56612: NEG
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 4
56623: NEG
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 3
56635: NEG
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 3
56646: NEG
56647: PUSH
56648: LD_INT 1
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 4
56657: NEG
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 5
56668: NEG
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 5
56679: NEG
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 5
56691: NEG
56692: PUSH
56693: LD_INT 2
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 3
56703: NEG
56704: PUSH
56705: LD_INT 2
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 3
56714: NEG
56715: PUSH
56716: LD_INT 3
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 3
56726: NEG
56727: PUSH
56728: LD_INT 4
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 2
56738: NEG
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 2
56750: NEG
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 3
56762: NEG
56763: PUSH
56764: LD_INT 2
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 4
56774: NEG
56775: PUSH
56776: LD_INT 3
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 4
56786: NEG
56787: PUSH
56788: LD_INT 4
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 2
56798: NEG
56799: PUSH
56800: LD_INT 4
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 4
56810: NEG
56811: PUSH
56812: LD_INT 2
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 4
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 5
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: LD_INT 4
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: LD_INT 3
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 3
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: LD_INT 4
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: LD_INT 5
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: LD_INT 3
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: LD_INT 5
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56969: LD_ADDR_VAR 0 31
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 4
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 3
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: LD_INT 4
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: LD_INT 5
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: LD_INT 5
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: LD_INT 4
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: LD_INT 3
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 2
57048: PUSH
57049: LD_INT 5
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 2
57058: NEG
57059: PUSH
57060: LD_INT 3
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 3
57069: NEG
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 3
57080: NEG
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 3
57114: NEG
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 4
57125: NEG
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 4
57136: NEG
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 4
57148: NEG
57149: PUSH
57150: LD_INT 2
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 2
57160: NEG
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 4
57171: NEG
57172: PUSH
57173: LD_INT 4
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 4
57183: NEG
57184: PUSH
57185: LD_INT 5
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 3
57195: NEG
57196: PUSH
57197: LD_INT 4
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 3
57207: NEG
57208: PUSH
57209: LD_INT 3
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 4
57219: NEG
57220: PUSH
57221: LD_INT 3
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 5
57231: NEG
57232: PUSH
57233: LD_INT 4
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 5
57243: NEG
57244: PUSH
57245: LD_INT 5
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 3
57255: NEG
57256: PUSH
57257: LD_INT 5
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 5
57267: NEG
57268: PUSH
57269: LD_INT 3
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: LD_INT 3
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: LD_INT 4
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: LD_INT 3
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 2
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: LD_INT 3
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: LD_INT 4
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 2
57358: PUSH
57359: LD_INT 2
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 2
57369: NEG
57370: PUSH
57371: LD_INT 4
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 4
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 4
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 5
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 5
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 4
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 3
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 3
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 3
57453: PUSH
57454: LD_INT 2
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 5
57464: PUSH
57465: LD_INT 2
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57519: LD_ADDR_VAR 0 32
57523: PUSH
57524: LD_INT 4
57526: NEG
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 4
57537: NEG
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 3
57549: NEG
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 3
57560: NEG
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 4
57571: NEG
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 5
57582: NEG
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 5
57593: NEG
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 5
57605: NEG
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 3
57617: NEG
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 3
57628: NEG
57629: PUSH
57630: LD_INT 3
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 3
57640: NEG
57641: PUSH
57642: LD_INT 4
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: LD_INT 3
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: LD_INT 2
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 3
57676: NEG
57677: PUSH
57678: LD_INT 2
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 4
57688: NEG
57689: PUSH
57690: LD_INT 3
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 4
57700: NEG
57701: PUSH
57702: LD_INT 4
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: NEG
57713: PUSH
57714: LD_INT 4
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 4
57724: NEG
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: LD_INT 4
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: LD_INT 5
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: LD_INT 4
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: LD_INT 3
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 3
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: LD_INT 4
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: LD_INT 5
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: LD_INT 3
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 2
57826: NEG
57827: PUSH
57828: LD_INT 5
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 3
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 3
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 4
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 4
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 3
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 2
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 2
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 4
57921: PUSH
57922: LD_INT 2
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 4
57931: PUSH
57932: LD_INT 4
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 4
57941: PUSH
57942: LD_INT 3
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 5
57951: PUSH
57952: LD_INT 4
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 5
57961: PUSH
57962: LD_INT 5
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 4
57971: PUSH
57972: LD_INT 5
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 3
57981: PUSH
57982: LD_INT 4
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 3
57991: PUSH
57992: LD_INT 3
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 5
58001: PUSH
58002: LD_INT 3
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 3
58011: PUSH
58012: LD_INT 5
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58066: LD_ADDR_VAR 0 33
58070: PUSH
58071: LD_INT 4
58073: NEG
58074: PUSH
58075: LD_INT 4
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 4
58085: NEG
58086: PUSH
58087: LD_INT 5
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 3
58097: NEG
58098: PUSH
58099: LD_INT 4
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: NEG
58110: PUSH
58111: LD_INT 3
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 4
58121: NEG
58122: PUSH
58123: LD_INT 3
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 5
58133: NEG
58134: PUSH
58135: LD_INT 4
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 5
58145: NEG
58146: PUSH
58147: LD_INT 5
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 3
58157: NEG
58158: PUSH
58159: LD_INT 5
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 5
58169: NEG
58170: PUSH
58171: LD_INT 3
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: LD_INT 3
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: LD_INT 4
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: LD_INT 3
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: LD_INT 2
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: LD_INT 2
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 3
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: LD_INT 4
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 2
58260: PUSH
58261: LD_INT 2
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 2
58271: NEG
58272: PUSH
58273: LD_INT 4
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 4
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 4
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 5
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 5
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 4
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 3
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 3
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 3
58355: PUSH
58356: LD_INT 2
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 5
58366: PUSH
58367: LD_INT 2
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 3
58376: PUSH
58377: LD_INT 3
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 3
58386: PUSH
58387: LD_INT 2
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 4
58396: PUSH
58397: LD_INT 3
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 4
58406: PUSH
58407: LD_INT 4
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 3
58416: PUSH
58417: LD_INT 4
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 2
58426: PUSH
58427: LD_INT 3
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 2
58436: PUSH
58437: LD_INT 2
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 4
58446: PUSH
58447: LD_INT 2
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: LD_INT 4
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: LD_INT 4
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 3
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: LD_INT 4
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: LD_INT 5
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: LD_INT 5
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: LD_INT 4
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: LD_INT 3
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: LD_INT 5
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 2
58548: NEG
58549: PUSH
58550: LD_INT 3
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58604: LD_ADDR_VAR 0 34
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: LD_INT 4
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: LD_INT 5
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: LD_INT 4
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: LD_INT 3
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: LD_INT 3
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: LD_INT 4
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: LD_INT 5
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 2
58690: PUSH
58691: LD_INT 3
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 2
58701: NEG
58702: PUSH
58703: LD_INT 5
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 3
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 3
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 4
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 4
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 3
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 2
58785: PUSH
58786: LD_INT 2
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 4
58796: PUSH
58797: LD_INT 2
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 4
58806: PUSH
58807: LD_INT 4
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 4
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 5
58826: PUSH
58827: LD_INT 4
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 5
58836: PUSH
58837: LD_INT 5
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 4
58846: PUSH
58847: LD_INT 5
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 3
58856: PUSH
58857: LD_INT 4
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 3
58866: PUSH
58867: LD_INT 3
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 5
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 3
58886: PUSH
58887: LD_INT 5
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: LD_INT 3
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: LD_INT 2
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: PUSH
58917: LD_INT 3
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: LD_INT 4
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: LD_INT 4
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: LD_INT 3
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 2
58968: PUSH
58969: LD_INT 4
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 2
58978: NEG
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 4
58989: NEG
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 4
59000: NEG
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 3
59012: NEG
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 3
59023: NEG
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 4
59034: NEG
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 5
59045: NEG
59046: PUSH
59047: LD_INT 0
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 5
59056: NEG
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 5
59068: NEG
59069: PUSH
59070: LD_INT 2
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 3
59080: NEG
59081: PUSH
59082: LD_INT 2
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: ST_TO_ADDR
// end ; end ;
59136: GO 59139
59138: POP
// case btype of b_depot , b_warehouse :
59139: LD_VAR 0 1
59143: PUSH
59144: LD_INT 0
59146: DOUBLE
59147: EQUAL
59148: IFTRUE 59158
59150: LD_INT 1
59152: DOUBLE
59153: EQUAL
59154: IFTRUE 59158
59156: GO 59359
59158: POP
// case nation of nation_american :
59159: LD_VAR 0 5
59163: PUSH
59164: LD_INT 1
59166: DOUBLE
59167: EQUAL
59168: IFTRUE 59172
59170: GO 59228
59172: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59173: LD_ADDR_VAR 0 9
59177: PUSH
59178: LD_VAR 0 11
59182: PUSH
59183: LD_VAR 0 12
59187: PUSH
59188: LD_VAR 0 13
59192: PUSH
59193: LD_VAR 0 14
59197: PUSH
59198: LD_VAR 0 15
59202: PUSH
59203: LD_VAR 0 16
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: PUSH
59216: LD_VAR 0 4
59220: PUSH
59221: LD_INT 1
59223: PLUS
59224: ARRAY
59225: ST_TO_ADDR
59226: GO 59357
59228: LD_INT 2
59230: DOUBLE
59231: EQUAL
59232: IFTRUE 59236
59234: GO 59292
59236: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59237: LD_ADDR_VAR 0 9
59241: PUSH
59242: LD_VAR 0 17
59246: PUSH
59247: LD_VAR 0 18
59251: PUSH
59252: LD_VAR 0 19
59256: PUSH
59257: LD_VAR 0 20
59261: PUSH
59262: LD_VAR 0 21
59266: PUSH
59267: LD_VAR 0 22
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: PUSH
59280: LD_VAR 0 4
59284: PUSH
59285: LD_INT 1
59287: PLUS
59288: ARRAY
59289: ST_TO_ADDR
59290: GO 59357
59292: LD_INT 3
59294: DOUBLE
59295: EQUAL
59296: IFTRUE 59300
59298: GO 59356
59300: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59301: LD_ADDR_VAR 0 9
59305: PUSH
59306: LD_VAR 0 23
59310: PUSH
59311: LD_VAR 0 24
59315: PUSH
59316: LD_VAR 0 25
59320: PUSH
59321: LD_VAR 0 26
59325: PUSH
59326: LD_VAR 0 27
59330: PUSH
59331: LD_VAR 0 28
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: PUSH
59344: LD_VAR 0 4
59348: PUSH
59349: LD_INT 1
59351: PLUS
59352: ARRAY
59353: ST_TO_ADDR
59354: GO 59357
59356: POP
59357: GO 59912
59359: LD_INT 2
59361: DOUBLE
59362: EQUAL
59363: IFTRUE 59373
59365: LD_INT 3
59367: DOUBLE
59368: EQUAL
59369: IFTRUE 59373
59371: GO 59429
59373: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59374: LD_ADDR_VAR 0 9
59378: PUSH
59379: LD_VAR 0 29
59383: PUSH
59384: LD_VAR 0 30
59388: PUSH
59389: LD_VAR 0 31
59393: PUSH
59394: LD_VAR 0 32
59398: PUSH
59399: LD_VAR 0 33
59403: PUSH
59404: LD_VAR 0 34
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: PUSH
59417: LD_VAR 0 4
59421: PUSH
59422: LD_INT 1
59424: PLUS
59425: ARRAY
59426: ST_TO_ADDR
59427: GO 59912
59429: LD_INT 16
59431: DOUBLE
59432: EQUAL
59433: IFTRUE 59491
59435: LD_INT 17
59437: DOUBLE
59438: EQUAL
59439: IFTRUE 59491
59441: LD_INT 18
59443: DOUBLE
59444: EQUAL
59445: IFTRUE 59491
59447: LD_INT 19
59449: DOUBLE
59450: EQUAL
59451: IFTRUE 59491
59453: LD_INT 22
59455: DOUBLE
59456: EQUAL
59457: IFTRUE 59491
59459: LD_INT 20
59461: DOUBLE
59462: EQUAL
59463: IFTRUE 59491
59465: LD_INT 21
59467: DOUBLE
59468: EQUAL
59469: IFTRUE 59491
59471: LD_INT 23
59473: DOUBLE
59474: EQUAL
59475: IFTRUE 59491
59477: LD_INT 24
59479: DOUBLE
59480: EQUAL
59481: IFTRUE 59491
59483: LD_INT 25
59485: DOUBLE
59486: EQUAL
59487: IFTRUE 59491
59489: GO 59547
59491: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59492: LD_ADDR_VAR 0 9
59496: PUSH
59497: LD_VAR 0 35
59501: PUSH
59502: LD_VAR 0 36
59506: PUSH
59507: LD_VAR 0 37
59511: PUSH
59512: LD_VAR 0 38
59516: PUSH
59517: LD_VAR 0 39
59521: PUSH
59522: LD_VAR 0 40
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: PUSH
59535: LD_VAR 0 4
59539: PUSH
59540: LD_INT 1
59542: PLUS
59543: ARRAY
59544: ST_TO_ADDR
59545: GO 59912
59547: LD_INT 6
59549: DOUBLE
59550: EQUAL
59551: IFTRUE 59603
59553: LD_INT 7
59555: DOUBLE
59556: EQUAL
59557: IFTRUE 59603
59559: LD_INT 8
59561: DOUBLE
59562: EQUAL
59563: IFTRUE 59603
59565: LD_INT 13
59567: DOUBLE
59568: EQUAL
59569: IFTRUE 59603
59571: LD_INT 12
59573: DOUBLE
59574: EQUAL
59575: IFTRUE 59603
59577: LD_INT 15
59579: DOUBLE
59580: EQUAL
59581: IFTRUE 59603
59583: LD_INT 11
59585: DOUBLE
59586: EQUAL
59587: IFTRUE 59603
59589: LD_INT 14
59591: DOUBLE
59592: EQUAL
59593: IFTRUE 59603
59595: LD_INT 10
59597: DOUBLE
59598: EQUAL
59599: IFTRUE 59603
59601: GO 59659
59603: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59604: LD_ADDR_VAR 0 9
59608: PUSH
59609: LD_VAR 0 41
59613: PUSH
59614: LD_VAR 0 42
59618: PUSH
59619: LD_VAR 0 43
59623: PUSH
59624: LD_VAR 0 44
59628: PUSH
59629: LD_VAR 0 45
59633: PUSH
59634: LD_VAR 0 46
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: PUSH
59647: LD_VAR 0 4
59651: PUSH
59652: LD_INT 1
59654: PLUS
59655: ARRAY
59656: ST_TO_ADDR
59657: GO 59912
59659: LD_INT 36
59661: DOUBLE
59662: EQUAL
59663: IFTRUE 59667
59665: GO 59723
59667: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59668: LD_ADDR_VAR 0 9
59672: PUSH
59673: LD_VAR 0 47
59677: PUSH
59678: LD_VAR 0 48
59682: PUSH
59683: LD_VAR 0 49
59687: PUSH
59688: LD_VAR 0 50
59692: PUSH
59693: LD_VAR 0 51
59697: PUSH
59698: LD_VAR 0 52
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: PUSH
59711: LD_VAR 0 4
59715: PUSH
59716: LD_INT 1
59718: PLUS
59719: ARRAY
59720: ST_TO_ADDR
59721: GO 59912
59723: LD_INT 4
59725: DOUBLE
59726: EQUAL
59727: IFTRUE 59749
59729: LD_INT 5
59731: DOUBLE
59732: EQUAL
59733: IFTRUE 59749
59735: LD_INT 34
59737: DOUBLE
59738: EQUAL
59739: IFTRUE 59749
59741: LD_INT 37
59743: DOUBLE
59744: EQUAL
59745: IFTRUE 59749
59747: GO 59805
59749: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59750: LD_ADDR_VAR 0 9
59754: PUSH
59755: LD_VAR 0 53
59759: PUSH
59760: LD_VAR 0 54
59764: PUSH
59765: LD_VAR 0 55
59769: PUSH
59770: LD_VAR 0 56
59774: PUSH
59775: LD_VAR 0 57
59779: PUSH
59780: LD_VAR 0 58
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: PUSH
59793: LD_VAR 0 4
59797: PUSH
59798: LD_INT 1
59800: PLUS
59801: ARRAY
59802: ST_TO_ADDR
59803: GO 59912
59805: LD_INT 31
59807: DOUBLE
59808: EQUAL
59809: IFTRUE 59855
59811: LD_INT 32
59813: DOUBLE
59814: EQUAL
59815: IFTRUE 59855
59817: LD_INT 33
59819: DOUBLE
59820: EQUAL
59821: IFTRUE 59855
59823: LD_INT 27
59825: DOUBLE
59826: EQUAL
59827: IFTRUE 59855
59829: LD_INT 26
59831: DOUBLE
59832: EQUAL
59833: IFTRUE 59855
59835: LD_INT 28
59837: DOUBLE
59838: EQUAL
59839: IFTRUE 59855
59841: LD_INT 29
59843: DOUBLE
59844: EQUAL
59845: IFTRUE 59855
59847: LD_INT 30
59849: DOUBLE
59850: EQUAL
59851: IFTRUE 59855
59853: GO 59911
59855: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59856: LD_ADDR_VAR 0 9
59860: PUSH
59861: LD_VAR 0 59
59865: PUSH
59866: LD_VAR 0 60
59870: PUSH
59871: LD_VAR 0 61
59875: PUSH
59876: LD_VAR 0 62
59880: PUSH
59881: LD_VAR 0 63
59885: PUSH
59886: LD_VAR 0 64
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: PUSH
59899: LD_VAR 0 4
59903: PUSH
59904: LD_INT 1
59906: PLUS
59907: ARRAY
59908: ST_TO_ADDR
59909: GO 59912
59911: POP
// temp_list2 = [ ] ;
59912: LD_ADDR_VAR 0 10
59916: PUSH
59917: EMPTY
59918: ST_TO_ADDR
// for i in temp_list do
59919: LD_ADDR_VAR 0 8
59923: PUSH
59924: LD_VAR 0 9
59928: PUSH
59929: FOR_IN
59930: IFFALSE 59982
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59932: LD_ADDR_VAR 0 10
59936: PUSH
59937: LD_VAR 0 10
59941: PUSH
59942: LD_VAR 0 8
59946: PUSH
59947: LD_INT 1
59949: ARRAY
59950: PUSH
59951: LD_VAR 0 2
59955: PLUS
59956: PUSH
59957: LD_VAR 0 8
59961: PUSH
59962: LD_INT 2
59964: ARRAY
59965: PUSH
59966: LD_VAR 0 3
59970: PLUS
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: EMPTY
59977: LIST
59978: ADD
59979: ST_TO_ADDR
59980: GO 59929
59982: POP
59983: POP
// result = temp_list2 ;
59984: LD_ADDR_VAR 0 7
59988: PUSH
59989: LD_VAR 0 10
59993: ST_TO_ADDR
// end ;
59994: LD_VAR 0 7
59998: RET
// export function EnemyInRange ( unit , dist ) ; begin
59999: LD_INT 0
60001: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60002: LD_ADDR_VAR 0 3
60006: PUSH
60007: LD_VAR 0 1
60011: PPUSH
60012: CALL_OW 255
60016: PPUSH
60017: LD_VAR 0 1
60021: PPUSH
60022: CALL_OW 250
60026: PPUSH
60027: LD_VAR 0 1
60031: PPUSH
60032: CALL_OW 251
60036: PPUSH
60037: LD_VAR 0 2
60041: PPUSH
60042: CALL 33395 0 4
60046: PUSH
60047: LD_INT 4
60049: ARRAY
60050: ST_TO_ADDR
// end ;
60051: LD_VAR 0 3
60055: RET
// export function PlayerSeeMe ( unit ) ; begin
60056: LD_INT 0
60058: PPUSH
// result := See ( your_side , unit ) ;
60059: LD_ADDR_VAR 0 2
60063: PUSH
60064: LD_OWVAR 2
60068: PPUSH
60069: LD_VAR 0 1
60073: PPUSH
60074: CALL_OW 292
60078: ST_TO_ADDR
// end ;
60079: LD_VAR 0 2
60083: RET
// export function ReverseDir ( unit ) ; begin
60084: LD_INT 0
60086: PPUSH
// if not unit then
60087: LD_VAR 0 1
60091: NOT
60092: IFFALSE 60096
// exit ;
60094: GO 60119
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60096: LD_ADDR_VAR 0 2
60100: PUSH
60101: LD_VAR 0 1
60105: PPUSH
60106: CALL_OW 254
60110: PUSH
60111: LD_INT 3
60113: PLUS
60114: PUSH
60115: LD_INT 6
60117: MOD
60118: ST_TO_ADDR
// end ;
60119: LD_VAR 0 2
60123: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60124: LD_INT 0
60126: PPUSH
60127: PPUSH
60128: PPUSH
60129: PPUSH
60130: PPUSH
// if not hexes then
60131: LD_VAR 0 2
60135: NOT
60136: IFFALSE 60140
// exit ;
60138: GO 60288
// dist := 9999 ;
60140: LD_ADDR_VAR 0 5
60144: PUSH
60145: LD_INT 9999
60147: ST_TO_ADDR
// for i = 1 to hexes do
60148: LD_ADDR_VAR 0 4
60152: PUSH
60153: DOUBLE
60154: LD_INT 1
60156: DEC
60157: ST_TO_ADDR
60158: LD_VAR 0 2
60162: PUSH
60163: FOR_TO
60164: IFFALSE 60276
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60166: LD_VAR 0 1
60170: PPUSH
60171: LD_VAR 0 2
60175: PUSH
60176: LD_VAR 0 4
60180: ARRAY
60181: PUSH
60182: LD_INT 1
60184: ARRAY
60185: PPUSH
60186: LD_VAR 0 2
60190: PUSH
60191: LD_VAR 0 4
60195: ARRAY
60196: PUSH
60197: LD_INT 2
60199: ARRAY
60200: PPUSH
60201: CALL_OW 297
60205: PUSH
60206: LD_VAR 0 5
60210: LESS
60211: IFFALSE 60274
// begin hex := hexes [ i ] ;
60213: LD_ADDR_VAR 0 7
60217: PUSH
60218: LD_VAR 0 2
60222: PUSH
60223: LD_VAR 0 4
60227: ARRAY
60228: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60229: LD_ADDR_VAR 0 5
60233: PUSH
60234: LD_VAR 0 1
60238: PPUSH
60239: LD_VAR 0 2
60243: PUSH
60244: LD_VAR 0 4
60248: ARRAY
60249: PUSH
60250: LD_INT 1
60252: ARRAY
60253: PPUSH
60254: LD_VAR 0 2
60258: PUSH
60259: LD_VAR 0 4
60263: ARRAY
60264: PUSH
60265: LD_INT 2
60267: ARRAY
60268: PPUSH
60269: CALL_OW 297
60273: ST_TO_ADDR
// end ; end ;
60274: GO 60163
60276: POP
60277: POP
// result := hex ;
60278: LD_ADDR_VAR 0 3
60282: PUSH
60283: LD_VAR 0 7
60287: ST_TO_ADDR
// end ;
60288: LD_VAR 0 3
60292: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60293: LD_INT 0
60295: PPUSH
60296: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60297: LD_VAR 0 1
60301: NOT
60302: PUSH
60303: LD_VAR 0 1
60307: PUSH
60308: LD_INT 21
60310: PUSH
60311: LD_INT 2
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 23
60320: PUSH
60321: LD_INT 2
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PPUSH
60332: CALL_OW 69
60336: IN
60337: NOT
60338: OR
60339: IFFALSE 60343
// exit ;
60341: GO 60390
// for i = 1 to 3 do
60343: LD_ADDR_VAR 0 3
60347: PUSH
60348: DOUBLE
60349: LD_INT 1
60351: DEC
60352: ST_TO_ADDR
60353: LD_INT 3
60355: PUSH
60356: FOR_TO
60357: IFFALSE 60388
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60359: LD_VAR 0 1
60363: PPUSH
60364: CALL_OW 250
60368: PPUSH
60369: LD_VAR 0 1
60373: PPUSH
60374: CALL_OW 251
60378: PPUSH
60379: LD_INT 1
60381: PPUSH
60382: CALL_OW 453
60386: GO 60356
60388: POP
60389: POP
// end ;
60390: LD_VAR 0 2
60394: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60395: LD_INT 0
60397: PPUSH
60398: PPUSH
60399: PPUSH
60400: PPUSH
60401: PPUSH
60402: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60403: LD_VAR 0 1
60407: NOT
60408: PUSH
60409: LD_VAR 0 2
60413: NOT
60414: OR
60415: PUSH
60416: LD_VAR 0 1
60420: PPUSH
60421: CALL_OW 314
60425: OR
60426: IFFALSE 60430
// exit ;
60428: GO 60871
// x := GetX ( enemy_unit ) ;
60430: LD_ADDR_VAR 0 7
60434: PUSH
60435: LD_VAR 0 2
60439: PPUSH
60440: CALL_OW 250
60444: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60445: LD_ADDR_VAR 0 8
60449: PUSH
60450: LD_VAR 0 2
60454: PPUSH
60455: CALL_OW 251
60459: ST_TO_ADDR
// if not x or not y then
60460: LD_VAR 0 7
60464: NOT
60465: PUSH
60466: LD_VAR 0 8
60470: NOT
60471: OR
60472: IFFALSE 60476
// exit ;
60474: GO 60871
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60476: LD_ADDR_VAR 0 6
60480: PUSH
60481: LD_VAR 0 7
60485: PPUSH
60486: LD_INT 0
60488: PPUSH
60489: LD_INT 4
60491: PPUSH
60492: CALL_OW 272
60496: PUSH
60497: LD_VAR 0 8
60501: PPUSH
60502: LD_INT 0
60504: PPUSH
60505: LD_INT 4
60507: PPUSH
60508: CALL_OW 273
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_VAR 0 7
60521: PPUSH
60522: LD_INT 1
60524: PPUSH
60525: LD_INT 4
60527: PPUSH
60528: CALL_OW 272
60532: PUSH
60533: LD_VAR 0 8
60537: PPUSH
60538: LD_INT 1
60540: PPUSH
60541: LD_INT 4
60543: PPUSH
60544: CALL_OW 273
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_VAR 0 7
60557: PPUSH
60558: LD_INT 2
60560: PPUSH
60561: LD_INT 4
60563: PPUSH
60564: CALL_OW 272
60568: PUSH
60569: LD_VAR 0 8
60573: PPUSH
60574: LD_INT 2
60576: PPUSH
60577: LD_INT 4
60579: PPUSH
60580: CALL_OW 273
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_VAR 0 7
60593: PPUSH
60594: LD_INT 3
60596: PPUSH
60597: LD_INT 4
60599: PPUSH
60600: CALL_OW 272
60604: PUSH
60605: LD_VAR 0 8
60609: PPUSH
60610: LD_INT 3
60612: PPUSH
60613: LD_INT 4
60615: PPUSH
60616: CALL_OW 273
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_VAR 0 7
60629: PPUSH
60630: LD_INT 4
60632: PPUSH
60633: LD_INT 4
60635: PPUSH
60636: CALL_OW 272
60640: PUSH
60641: LD_VAR 0 8
60645: PPUSH
60646: LD_INT 4
60648: PPUSH
60649: LD_INT 4
60651: PPUSH
60652: CALL_OW 273
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_VAR 0 7
60665: PPUSH
60666: LD_INT 5
60668: PPUSH
60669: LD_INT 4
60671: PPUSH
60672: CALL_OW 272
60676: PUSH
60677: LD_VAR 0 8
60681: PPUSH
60682: LD_INT 5
60684: PPUSH
60685: LD_INT 4
60687: PPUSH
60688: CALL_OW 273
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: ST_TO_ADDR
// for i = tmp downto 1 do
60705: LD_ADDR_VAR 0 4
60709: PUSH
60710: DOUBLE
60711: LD_VAR 0 6
60715: INC
60716: ST_TO_ADDR
60717: LD_INT 1
60719: PUSH
60720: FOR_DOWNTO
60721: IFFALSE 60822
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60723: LD_VAR 0 6
60727: PUSH
60728: LD_VAR 0 4
60732: ARRAY
60733: PUSH
60734: LD_INT 1
60736: ARRAY
60737: PPUSH
60738: LD_VAR 0 6
60742: PUSH
60743: LD_VAR 0 4
60747: ARRAY
60748: PUSH
60749: LD_INT 2
60751: ARRAY
60752: PPUSH
60753: CALL_OW 488
60757: NOT
60758: PUSH
60759: LD_VAR 0 6
60763: PUSH
60764: LD_VAR 0 4
60768: ARRAY
60769: PUSH
60770: LD_INT 1
60772: ARRAY
60773: PPUSH
60774: LD_VAR 0 6
60778: PUSH
60779: LD_VAR 0 4
60783: ARRAY
60784: PUSH
60785: LD_INT 2
60787: ARRAY
60788: PPUSH
60789: CALL_OW 428
60793: PUSH
60794: LD_INT 0
60796: NONEQUAL
60797: OR
60798: IFFALSE 60820
// tmp := Delete ( tmp , i ) ;
60800: LD_ADDR_VAR 0 6
60804: PUSH
60805: LD_VAR 0 6
60809: PPUSH
60810: LD_VAR 0 4
60814: PPUSH
60815: CALL_OW 3
60819: ST_TO_ADDR
60820: GO 60720
60822: POP
60823: POP
// j := GetClosestHex ( unit , tmp ) ;
60824: LD_ADDR_VAR 0 5
60828: PUSH
60829: LD_VAR 0 1
60833: PPUSH
60834: LD_VAR 0 6
60838: PPUSH
60839: CALL 60124 0 2
60843: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60844: LD_VAR 0 1
60848: PPUSH
60849: LD_VAR 0 5
60853: PUSH
60854: LD_INT 1
60856: ARRAY
60857: PPUSH
60858: LD_VAR 0 5
60862: PUSH
60863: LD_INT 2
60865: ARRAY
60866: PPUSH
60867: CALL_OW 111
// end ;
60871: LD_VAR 0 3
60875: RET
// export function PrepareApemanSoldier ( ) ; begin
60876: LD_INT 0
60878: PPUSH
// uc_nation := 0 ;
60879: LD_ADDR_OWVAR 21
60883: PUSH
60884: LD_INT 0
60886: ST_TO_ADDR
// hc_sex := sex_male ;
60887: LD_ADDR_OWVAR 27
60891: PUSH
60892: LD_INT 1
60894: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60895: LD_ADDR_OWVAR 28
60899: PUSH
60900: LD_INT 15
60902: ST_TO_ADDR
// hc_gallery :=  ;
60903: LD_ADDR_OWVAR 33
60907: PUSH
60908: LD_STRING 
60910: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60911: LD_ADDR_OWVAR 31
60915: PUSH
60916: LD_INT 0
60918: PPUSH
60919: LD_INT 3
60921: PPUSH
60922: CALL_OW 12
60926: PUSH
60927: LD_INT 0
60929: PPUSH
60930: LD_INT 3
60932: PPUSH
60933: CALL_OW 12
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: ST_TO_ADDR
// end ;
60950: LD_VAR 0 1
60954: RET
// export function PrepareApemanEngineer ( ) ; begin
60955: LD_INT 0
60957: PPUSH
// uc_nation := 0 ;
60958: LD_ADDR_OWVAR 21
60962: PUSH
60963: LD_INT 0
60965: ST_TO_ADDR
// hc_sex := sex_male ;
60966: LD_ADDR_OWVAR 27
60970: PUSH
60971: LD_INT 1
60973: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60974: LD_ADDR_OWVAR 28
60978: PUSH
60979: LD_INT 16
60981: ST_TO_ADDR
// hc_gallery :=  ;
60982: LD_ADDR_OWVAR 33
60986: PUSH
60987: LD_STRING 
60989: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60990: LD_ADDR_OWVAR 31
60994: PUSH
60995: LD_INT 0
60997: PPUSH
60998: LD_INT 3
61000: PPUSH
61001: CALL_OW 12
61005: PUSH
61006: LD_INT 0
61008: PPUSH
61009: LD_INT 3
61011: PPUSH
61012: CALL_OW 12
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: ST_TO_ADDR
// end ;
61029: LD_VAR 0 1
61033: RET
// export function PrepareApeman ( agressivity ) ; begin
61034: LD_INT 0
61036: PPUSH
// uc_side := 0 ;
61037: LD_ADDR_OWVAR 20
61041: PUSH
61042: LD_INT 0
61044: ST_TO_ADDR
// uc_nation := 0 ;
61045: LD_ADDR_OWVAR 21
61049: PUSH
61050: LD_INT 0
61052: ST_TO_ADDR
// hc_sex := sex_male ;
61053: LD_ADDR_OWVAR 27
61057: PUSH
61058: LD_INT 1
61060: ST_TO_ADDR
// hc_class := class_apeman ;
61061: LD_ADDR_OWVAR 28
61065: PUSH
61066: LD_INT 12
61068: ST_TO_ADDR
// hc_gallery :=  ;
61069: LD_ADDR_OWVAR 33
61073: PUSH
61074: LD_STRING 
61076: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61077: LD_ADDR_OWVAR 35
61081: PUSH
61082: LD_VAR 0 1
61086: NEG
61087: PPUSH
61088: LD_VAR 0 1
61092: PPUSH
61093: CALL_OW 12
61097: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61098: LD_ADDR_OWVAR 31
61102: PUSH
61103: LD_INT 0
61105: PPUSH
61106: LD_INT 3
61108: PPUSH
61109: CALL_OW 12
61113: PUSH
61114: LD_INT 0
61116: PPUSH
61117: LD_INT 3
61119: PPUSH
61120: CALL_OW 12
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: ST_TO_ADDR
// end ;
61137: LD_VAR 0 2
61141: RET
// export function PrepareTiger ( agressivity ) ; begin
61142: LD_INT 0
61144: PPUSH
// uc_side := 0 ;
61145: LD_ADDR_OWVAR 20
61149: PUSH
61150: LD_INT 0
61152: ST_TO_ADDR
// uc_nation := 0 ;
61153: LD_ADDR_OWVAR 21
61157: PUSH
61158: LD_INT 0
61160: ST_TO_ADDR
// hc_class := class_tiger ;
61161: LD_ADDR_OWVAR 28
61165: PUSH
61166: LD_INT 14
61168: ST_TO_ADDR
// hc_gallery :=  ;
61169: LD_ADDR_OWVAR 33
61173: PUSH
61174: LD_STRING 
61176: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61177: LD_ADDR_OWVAR 35
61181: PUSH
61182: LD_VAR 0 1
61186: NEG
61187: PPUSH
61188: LD_VAR 0 1
61192: PPUSH
61193: CALL_OW 12
61197: ST_TO_ADDR
// end ;
61198: LD_VAR 0 2
61202: RET
// export function PrepareEnchidna ( ) ; begin
61203: LD_INT 0
61205: PPUSH
// uc_side := 0 ;
61206: LD_ADDR_OWVAR 20
61210: PUSH
61211: LD_INT 0
61213: ST_TO_ADDR
// uc_nation := 0 ;
61214: LD_ADDR_OWVAR 21
61218: PUSH
61219: LD_INT 0
61221: ST_TO_ADDR
// hc_class := class_baggie ;
61222: LD_ADDR_OWVAR 28
61226: PUSH
61227: LD_INT 13
61229: ST_TO_ADDR
// hc_gallery :=  ;
61230: LD_ADDR_OWVAR 33
61234: PUSH
61235: LD_STRING 
61237: ST_TO_ADDR
// end ;
61238: LD_VAR 0 1
61242: RET
// export function PrepareFrog ( ) ; begin
61243: LD_INT 0
61245: PPUSH
// uc_side := 0 ;
61246: LD_ADDR_OWVAR 20
61250: PUSH
61251: LD_INT 0
61253: ST_TO_ADDR
// uc_nation := 0 ;
61254: LD_ADDR_OWVAR 21
61258: PUSH
61259: LD_INT 0
61261: ST_TO_ADDR
// hc_class := class_frog ;
61262: LD_ADDR_OWVAR 28
61266: PUSH
61267: LD_INT 19
61269: ST_TO_ADDR
// hc_gallery :=  ;
61270: LD_ADDR_OWVAR 33
61274: PUSH
61275: LD_STRING 
61277: ST_TO_ADDR
// end ;
61278: LD_VAR 0 1
61282: RET
// export function PrepareFish ( ) ; begin
61283: LD_INT 0
61285: PPUSH
// uc_side := 0 ;
61286: LD_ADDR_OWVAR 20
61290: PUSH
61291: LD_INT 0
61293: ST_TO_ADDR
// uc_nation := 0 ;
61294: LD_ADDR_OWVAR 21
61298: PUSH
61299: LD_INT 0
61301: ST_TO_ADDR
// hc_class := class_fish ;
61302: LD_ADDR_OWVAR 28
61306: PUSH
61307: LD_INT 20
61309: ST_TO_ADDR
// hc_gallery :=  ;
61310: LD_ADDR_OWVAR 33
61314: PUSH
61315: LD_STRING 
61317: ST_TO_ADDR
// end ;
61318: LD_VAR 0 1
61322: RET
// export function PrepareBird ( ) ; begin
61323: LD_INT 0
61325: PPUSH
// uc_side := 0 ;
61326: LD_ADDR_OWVAR 20
61330: PUSH
61331: LD_INT 0
61333: ST_TO_ADDR
// uc_nation := 0 ;
61334: LD_ADDR_OWVAR 21
61338: PUSH
61339: LD_INT 0
61341: ST_TO_ADDR
// hc_class := class_phororhacos ;
61342: LD_ADDR_OWVAR 28
61346: PUSH
61347: LD_INT 18
61349: ST_TO_ADDR
// hc_gallery :=  ;
61350: LD_ADDR_OWVAR 33
61354: PUSH
61355: LD_STRING 
61357: ST_TO_ADDR
// end ;
61358: LD_VAR 0 1
61362: RET
// export function PrepareHorse ( ) ; begin
61363: LD_INT 0
61365: PPUSH
// uc_side := 0 ;
61366: LD_ADDR_OWVAR 20
61370: PUSH
61371: LD_INT 0
61373: ST_TO_ADDR
// uc_nation := 0 ;
61374: LD_ADDR_OWVAR 21
61378: PUSH
61379: LD_INT 0
61381: ST_TO_ADDR
// hc_class := class_horse ;
61382: LD_ADDR_OWVAR 28
61386: PUSH
61387: LD_INT 21
61389: ST_TO_ADDR
// hc_gallery :=  ;
61390: LD_ADDR_OWVAR 33
61394: PUSH
61395: LD_STRING 
61397: ST_TO_ADDR
// end ;
61398: LD_VAR 0 1
61402: RET
// export function PrepareMastodont ( ) ; begin
61403: LD_INT 0
61405: PPUSH
// uc_side := 0 ;
61406: LD_ADDR_OWVAR 20
61410: PUSH
61411: LD_INT 0
61413: ST_TO_ADDR
// uc_nation := 0 ;
61414: LD_ADDR_OWVAR 21
61418: PUSH
61419: LD_INT 0
61421: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61422: LD_ADDR_OWVAR 37
61426: PUSH
61427: LD_INT 31
61429: ST_TO_ADDR
// vc_control := control_rider ;
61430: LD_ADDR_OWVAR 38
61434: PUSH
61435: LD_INT 4
61437: ST_TO_ADDR
// end ;
61438: LD_VAR 0 1
61442: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61443: LD_INT 0
61445: PPUSH
61446: PPUSH
61447: PPUSH
// uc_side = 0 ;
61448: LD_ADDR_OWVAR 20
61452: PUSH
61453: LD_INT 0
61455: ST_TO_ADDR
// uc_nation = 0 ;
61456: LD_ADDR_OWVAR 21
61460: PUSH
61461: LD_INT 0
61463: ST_TO_ADDR
// InitHc_All ( ) ;
61464: CALL_OW 584
// InitVc ;
61468: CALL_OW 20
// if mastodonts then
61472: LD_VAR 0 6
61476: IFFALSE 61543
// for i = 1 to mastodonts do
61478: LD_ADDR_VAR 0 11
61482: PUSH
61483: DOUBLE
61484: LD_INT 1
61486: DEC
61487: ST_TO_ADDR
61488: LD_VAR 0 6
61492: PUSH
61493: FOR_TO
61494: IFFALSE 61541
// begin vc_chassis := 31 ;
61496: LD_ADDR_OWVAR 37
61500: PUSH
61501: LD_INT 31
61503: ST_TO_ADDR
// vc_control := control_rider ;
61504: LD_ADDR_OWVAR 38
61508: PUSH
61509: LD_INT 4
61511: ST_TO_ADDR
// animal := CreateVehicle ;
61512: LD_ADDR_VAR 0 12
61516: PUSH
61517: CALL_OW 45
61521: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61522: LD_VAR 0 12
61526: PPUSH
61527: LD_VAR 0 8
61531: PPUSH
61532: LD_INT 0
61534: PPUSH
61535: CALL 63678 0 3
// end ;
61539: GO 61493
61541: POP
61542: POP
// if horses then
61543: LD_VAR 0 5
61547: IFFALSE 61614
// for i = 1 to horses do
61549: LD_ADDR_VAR 0 11
61553: PUSH
61554: DOUBLE
61555: LD_INT 1
61557: DEC
61558: ST_TO_ADDR
61559: LD_VAR 0 5
61563: PUSH
61564: FOR_TO
61565: IFFALSE 61612
// begin hc_class := 21 ;
61567: LD_ADDR_OWVAR 28
61571: PUSH
61572: LD_INT 21
61574: ST_TO_ADDR
// hc_gallery :=  ;
61575: LD_ADDR_OWVAR 33
61579: PUSH
61580: LD_STRING 
61582: ST_TO_ADDR
// animal := CreateHuman ;
61583: LD_ADDR_VAR 0 12
61587: PUSH
61588: CALL_OW 44
61592: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61593: LD_VAR 0 12
61597: PPUSH
61598: LD_VAR 0 8
61602: PPUSH
61603: LD_INT 0
61605: PPUSH
61606: CALL 63678 0 3
// end ;
61610: GO 61564
61612: POP
61613: POP
// if birds then
61614: LD_VAR 0 1
61618: IFFALSE 61685
// for i = 1 to birds do
61620: LD_ADDR_VAR 0 11
61624: PUSH
61625: DOUBLE
61626: LD_INT 1
61628: DEC
61629: ST_TO_ADDR
61630: LD_VAR 0 1
61634: PUSH
61635: FOR_TO
61636: IFFALSE 61683
// begin hc_class = 18 ;
61638: LD_ADDR_OWVAR 28
61642: PUSH
61643: LD_INT 18
61645: ST_TO_ADDR
// hc_gallery =  ;
61646: LD_ADDR_OWVAR 33
61650: PUSH
61651: LD_STRING 
61653: ST_TO_ADDR
// animal := CreateHuman ;
61654: LD_ADDR_VAR 0 12
61658: PUSH
61659: CALL_OW 44
61663: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61664: LD_VAR 0 12
61668: PPUSH
61669: LD_VAR 0 8
61673: PPUSH
61674: LD_INT 0
61676: PPUSH
61677: CALL 63678 0 3
// end ;
61681: GO 61635
61683: POP
61684: POP
// if tigers then
61685: LD_VAR 0 2
61689: IFFALSE 61773
// for i = 1 to tigers do
61691: LD_ADDR_VAR 0 11
61695: PUSH
61696: DOUBLE
61697: LD_INT 1
61699: DEC
61700: ST_TO_ADDR
61701: LD_VAR 0 2
61705: PUSH
61706: FOR_TO
61707: IFFALSE 61771
// begin hc_class = class_tiger ;
61709: LD_ADDR_OWVAR 28
61713: PUSH
61714: LD_INT 14
61716: ST_TO_ADDR
// hc_gallery =  ;
61717: LD_ADDR_OWVAR 33
61721: PUSH
61722: LD_STRING 
61724: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61725: LD_ADDR_OWVAR 35
61729: PUSH
61730: LD_INT 7
61732: NEG
61733: PPUSH
61734: LD_INT 7
61736: PPUSH
61737: CALL_OW 12
61741: ST_TO_ADDR
// animal := CreateHuman ;
61742: LD_ADDR_VAR 0 12
61746: PUSH
61747: CALL_OW 44
61751: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61752: LD_VAR 0 12
61756: PPUSH
61757: LD_VAR 0 8
61761: PPUSH
61762: LD_INT 0
61764: PPUSH
61765: CALL 63678 0 3
// end ;
61769: GO 61706
61771: POP
61772: POP
// if apemans then
61773: LD_VAR 0 3
61777: IFFALSE 61900
// for i = 1 to apemans do
61779: LD_ADDR_VAR 0 11
61783: PUSH
61784: DOUBLE
61785: LD_INT 1
61787: DEC
61788: ST_TO_ADDR
61789: LD_VAR 0 3
61793: PUSH
61794: FOR_TO
61795: IFFALSE 61898
// begin hc_class = class_apeman ;
61797: LD_ADDR_OWVAR 28
61801: PUSH
61802: LD_INT 12
61804: ST_TO_ADDR
// hc_gallery =  ;
61805: LD_ADDR_OWVAR 33
61809: PUSH
61810: LD_STRING 
61812: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61813: LD_ADDR_OWVAR 35
61817: PUSH
61818: LD_INT 2
61820: NEG
61821: PPUSH
61822: LD_INT 2
61824: PPUSH
61825: CALL_OW 12
61829: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61830: LD_ADDR_OWVAR 31
61834: PUSH
61835: LD_INT 1
61837: PPUSH
61838: LD_INT 3
61840: PPUSH
61841: CALL_OW 12
61845: PUSH
61846: LD_INT 1
61848: PPUSH
61849: LD_INT 3
61851: PPUSH
61852: CALL_OW 12
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: ST_TO_ADDR
// animal := CreateHuman ;
61869: LD_ADDR_VAR 0 12
61873: PUSH
61874: CALL_OW 44
61878: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61879: LD_VAR 0 12
61883: PPUSH
61884: LD_VAR 0 8
61888: PPUSH
61889: LD_INT 0
61891: PPUSH
61892: CALL 63678 0 3
// end ;
61896: GO 61794
61898: POP
61899: POP
// if enchidnas then
61900: LD_VAR 0 4
61904: IFFALSE 61971
// for i = 1 to enchidnas do
61906: LD_ADDR_VAR 0 11
61910: PUSH
61911: DOUBLE
61912: LD_INT 1
61914: DEC
61915: ST_TO_ADDR
61916: LD_VAR 0 4
61920: PUSH
61921: FOR_TO
61922: IFFALSE 61969
// begin hc_class = 13 ;
61924: LD_ADDR_OWVAR 28
61928: PUSH
61929: LD_INT 13
61931: ST_TO_ADDR
// hc_gallery =  ;
61932: LD_ADDR_OWVAR 33
61936: PUSH
61937: LD_STRING 
61939: ST_TO_ADDR
// animal := CreateHuman ;
61940: LD_ADDR_VAR 0 12
61944: PUSH
61945: CALL_OW 44
61949: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61950: LD_VAR 0 12
61954: PPUSH
61955: LD_VAR 0 8
61959: PPUSH
61960: LD_INT 0
61962: PPUSH
61963: CALL 63678 0 3
// end ;
61967: GO 61921
61969: POP
61970: POP
// if fishes then
61971: LD_VAR 0 7
61975: IFFALSE 62042
// for i = 1 to fishes do
61977: LD_ADDR_VAR 0 11
61981: PUSH
61982: DOUBLE
61983: LD_INT 1
61985: DEC
61986: ST_TO_ADDR
61987: LD_VAR 0 7
61991: PUSH
61992: FOR_TO
61993: IFFALSE 62040
// begin hc_class = 20 ;
61995: LD_ADDR_OWVAR 28
61999: PUSH
62000: LD_INT 20
62002: ST_TO_ADDR
// hc_gallery =  ;
62003: LD_ADDR_OWVAR 33
62007: PUSH
62008: LD_STRING 
62010: ST_TO_ADDR
// animal := CreateHuman ;
62011: LD_ADDR_VAR 0 12
62015: PUSH
62016: CALL_OW 44
62020: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62021: LD_VAR 0 12
62025: PPUSH
62026: LD_VAR 0 9
62030: PPUSH
62031: LD_INT 0
62033: PPUSH
62034: CALL 63678 0 3
// end ;
62038: GO 61992
62040: POP
62041: POP
// end ;
62042: LD_VAR 0 10
62046: RET
// export function WantHeal ( sci , unit ) ; begin
62047: LD_INT 0
62049: PPUSH
// if GetTaskList ( sci ) > 0 then
62050: LD_VAR 0 1
62054: PPUSH
62055: CALL_OW 437
62059: PUSH
62060: LD_INT 0
62062: GREATER
62063: IFFALSE 62133
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62065: LD_VAR 0 1
62069: PPUSH
62070: CALL_OW 437
62074: PUSH
62075: LD_INT 1
62077: ARRAY
62078: PUSH
62079: LD_INT 1
62081: ARRAY
62082: PUSH
62083: LD_STRING l
62085: EQUAL
62086: PUSH
62087: LD_VAR 0 1
62091: PPUSH
62092: CALL_OW 437
62096: PUSH
62097: LD_INT 1
62099: ARRAY
62100: PUSH
62101: LD_INT 4
62103: ARRAY
62104: PUSH
62105: LD_VAR 0 2
62109: EQUAL
62110: AND
62111: IFFALSE 62123
// result := true else
62113: LD_ADDR_VAR 0 3
62117: PUSH
62118: LD_INT 1
62120: ST_TO_ADDR
62121: GO 62131
// result := false ;
62123: LD_ADDR_VAR 0 3
62127: PUSH
62128: LD_INT 0
62130: ST_TO_ADDR
// end else
62131: GO 62141
// result := false ;
62133: LD_ADDR_VAR 0 3
62137: PUSH
62138: LD_INT 0
62140: ST_TO_ADDR
// end ;
62141: LD_VAR 0 3
62145: RET
// export function HealTarget ( sci ) ; begin
62146: LD_INT 0
62148: PPUSH
// if not sci then
62149: LD_VAR 0 1
62153: NOT
62154: IFFALSE 62158
// exit ;
62156: GO 62223
// result := 0 ;
62158: LD_ADDR_VAR 0 2
62162: PUSH
62163: LD_INT 0
62165: ST_TO_ADDR
// if GetTaskList ( sci ) then
62166: LD_VAR 0 1
62170: PPUSH
62171: CALL_OW 437
62175: IFFALSE 62223
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62177: LD_VAR 0 1
62181: PPUSH
62182: CALL_OW 437
62186: PUSH
62187: LD_INT 1
62189: ARRAY
62190: PUSH
62191: LD_INT 1
62193: ARRAY
62194: PUSH
62195: LD_STRING l
62197: EQUAL
62198: IFFALSE 62223
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62200: LD_ADDR_VAR 0 2
62204: PUSH
62205: LD_VAR 0 1
62209: PPUSH
62210: CALL_OW 437
62214: PUSH
62215: LD_INT 1
62217: ARRAY
62218: PUSH
62219: LD_INT 4
62221: ARRAY
62222: ST_TO_ADDR
// end ;
62223: LD_VAR 0 2
62227: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62228: LD_INT 0
62230: PPUSH
62231: PPUSH
62232: PPUSH
62233: PPUSH
// if not base_units then
62234: LD_VAR 0 1
62238: NOT
62239: IFFALSE 62243
// exit ;
62241: GO 62330
// result := false ;
62243: LD_ADDR_VAR 0 2
62247: PUSH
62248: LD_INT 0
62250: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62251: LD_ADDR_VAR 0 5
62255: PUSH
62256: LD_VAR 0 1
62260: PPUSH
62261: LD_INT 21
62263: PUSH
62264: LD_INT 3
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PPUSH
62271: CALL_OW 72
62275: ST_TO_ADDR
// if not tmp then
62276: LD_VAR 0 5
62280: NOT
62281: IFFALSE 62285
// exit ;
62283: GO 62330
// for i in tmp do
62285: LD_ADDR_VAR 0 3
62289: PUSH
62290: LD_VAR 0 5
62294: PUSH
62295: FOR_IN
62296: IFFALSE 62328
// begin result := EnemyInRange ( i , 22 ) ;
62298: LD_ADDR_VAR 0 2
62302: PUSH
62303: LD_VAR 0 3
62307: PPUSH
62308: LD_INT 22
62310: PPUSH
62311: CALL 59999 0 2
62315: ST_TO_ADDR
// if result then
62316: LD_VAR 0 2
62320: IFFALSE 62326
// exit ;
62322: POP
62323: POP
62324: GO 62330
// end ;
62326: GO 62295
62328: POP
62329: POP
// end ;
62330: LD_VAR 0 2
62334: RET
// export function FilterByTag ( units , tag ) ; begin
62335: LD_INT 0
62337: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62338: LD_ADDR_VAR 0 3
62342: PUSH
62343: LD_VAR 0 1
62347: PPUSH
62348: LD_INT 120
62350: PUSH
62351: LD_VAR 0 2
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PPUSH
62360: CALL_OW 72
62364: ST_TO_ADDR
// end ;
62365: LD_VAR 0 3
62369: RET
// export function IsDriver ( un ) ; begin
62370: LD_INT 0
62372: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62373: LD_ADDR_VAR 0 2
62377: PUSH
62378: LD_VAR 0 1
62382: PUSH
62383: LD_INT 55
62385: PUSH
62386: EMPTY
62387: LIST
62388: PPUSH
62389: CALL_OW 69
62393: IN
62394: ST_TO_ADDR
// end ;
62395: LD_VAR 0 2
62399: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62400: LD_INT 0
62402: PPUSH
62403: PPUSH
// list := [ ] ;
62404: LD_ADDR_VAR 0 5
62408: PUSH
62409: EMPTY
62410: ST_TO_ADDR
// case d of 0 :
62411: LD_VAR 0 3
62415: PUSH
62416: LD_INT 0
62418: DOUBLE
62419: EQUAL
62420: IFTRUE 62424
62422: GO 62557
62424: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62425: LD_ADDR_VAR 0 5
62429: PUSH
62430: LD_VAR 0 1
62434: PUSH
62435: LD_INT 4
62437: MINUS
62438: PUSH
62439: LD_VAR 0 2
62443: PUSH
62444: LD_INT 4
62446: MINUS
62447: PUSH
62448: LD_INT 2
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: LIST
62455: PUSH
62456: LD_VAR 0 1
62460: PUSH
62461: LD_INT 3
62463: MINUS
62464: PUSH
62465: LD_VAR 0 2
62469: PUSH
62470: LD_INT 1
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: LIST
62477: PUSH
62478: LD_VAR 0 1
62482: PUSH
62483: LD_INT 4
62485: PLUS
62486: PUSH
62487: LD_VAR 0 2
62491: PUSH
62492: LD_INT 4
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: LIST
62499: PUSH
62500: LD_VAR 0 1
62504: PUSH
62505: LD_INT 3
62507: PLUS
62508: PUSH
62509: LD_VAR 0 2
62513: PUSH
62514: LD_INT 3
62516: PLUS
62517: PUSH
62518: LD_INT 5
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: LIST
62525: PUSH
62526: LD_VAR 0 1
62530: PUSH
62531: LD_VAR 0 2
62535: PUSH
62536: LD_INT 4
62538: PLUS
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: LIST
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: ST_TO_ADDR
// end ; 1 :
62555: GO 63255
62557: LD_INT 1
62559: DOUBLE
62560: EQUAL
62561: IFTRUE 62565
62563: GO 62698
62565: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62566: LD_ADDR_VAR 0 5
62570: PUSH
62571: LD_VAR 0 1
62575: PUSH
62576: LD_VAR 0 2
62580: PUSH
62581: LD_INT 4
62583: MINUS
62584: PUSH
62585: LD_INT 3
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: LIST
62592: PUSH
62593: LD_VAR 0 1
62597: PUSH
62598: LD_INT 3
62600: MINUS
62601: PUSH
62602: LD_VAR 0 2
62606: PUSH
62607: LD_INT 3
62609: MINUS
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: LIST
62618: PUSH
62619: LD_VAR 0 1
62623: PUSH
62624: LD_INT 4
62626: MINUS
62627: PUSH
62628: LD_VAR 0 2
62632: PUSH
62633: LD_INT 1
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: LIST
62640: PUSH
62641: LD_VAR 0 1
62645: PUSH
62646: LD_VAR 0 2
62650: PUSH
62651: LD_INT 3
62653: PLUS
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: LIST
62662: PUSH
62663: LD_VAR 0 1
62667: PUSH
62668: LD_INT 4
62670: PLUS
62671: PUSH
62672: LD_VAR 0 2
62676: PUSH
62677: LD_INT 4
62679: PLUS
62680: PUSH
62681: LD_INT 5
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: LIST
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: ST_TO_ADDR
// end ; 2 :
62696: GO 63255
62698: LD_INT 2
62700: DOUBLE
62701: EQUAL
62702: IFTRUE 62706
62704: GO 62835
62706: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62707: LD_ADDR_VAR 0 5
62711: PUSH
62712: LD_VAR 0 1
62716: PUSH
62717: LD_VAR 0 2
62721: PUSH
62722: LD_INT 3
62724: MINUS
62725: PUSH
62726: LD_INT 3
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: LIST
62733: PUSH
62734: LD_VAR 0 1
62738: PUSH
62739: LD_INT 4
62741: PLUS
62742: PUSH
62743: LD_VAR 0 2
62747: PUSH
62748: LD_INT 4
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: LIST
62755: PUSH
62756: LD_VAR 0 1
62760: PUSH
62761: LD_VAR 0 2
62765: PUSH
62766: LD_INT 4
62768: PLUS
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: LIST
62777: PUSH
62778: LD_VAR 0 1
62782: PUSH
62783: LD_INT 3
62785: MINUS
62786: PUSH
62787: LD_VAR 0 2
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: LIST
62799: PUSH
62800: LD_VAR 0 1
62804: PUSH
62805: LD_INT 4
62807: MINUS
62808: PUSH
62809: LD_VAR 0 2
62813: PUSH
62814: LD_INT 4
62816: MINUS
62817: PUSH
62818: LD_INT 2
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: LIST
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: ST_TO_ADDR
// end ; 3 :
62833: GO 63255
62835: LD_INT 3
62837: DOUBLE
62838: EQUAL
62839: IFTRUE 62843
62841: GO 62976
62843: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62844: LD_ADDR_VAR 0 5
62848: PUSH
62849: LD_VAR 0 1
62853: PUSH
62854: LD_INT 3
62856: PLUS
62857: PUSH
62858: LD_VAR 0 2
62862: PUSH
62863: LD_INT 4
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: LIST
62870: PUSH
62871: LD_VAR 0 1
62875: PUSH
62876: LD_INT 4
62878: PLUS
62879: PUSH
62880: LD_VAR 0 2
62884: PUSH
62885: LD_INT 4
62887: PLUS
62888: PUSH
62889: LD_INT 5
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: LIST
62896: PUSH
62897: LD_VAR 0 1
62901: PUSH
62902: LD_INT 4
62904: MINUS
62905: PUSH
62906: LD_VAR 0 2
62910: PUSH
62911: LD_INT 1
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: LIST
62918: PUSH
62919: LD_VAR 0 1
62923: PUSH
62924: LD_VAR 0 2
62928: PUSH
62929: LD_INT 4
62931: MINUS
62932: PUSH
62933: LD_INT 3
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: LIST
62940: PUSH
62941: LD_VAR 0 1
62945: PUSH
62946: LD_INT 3
62948: MINUS
62949: PUSH
62950: LD_VAR 0 2
62954: PUSH
62955: LD_INT 3
62957: MINUS
62958: PUSH
62959: LD_INT 2
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: LIST
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: ST_TO_ADDR
// end ; 4 :
62974: GO 63255
62976: LD_INT 4
62978: DOUBLE
62979: EQUAL
62980: IFTRUE 62984
62982: GO 63117
62984: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62985: LD_ADDR_VAR 0 5
62989: PUSH
62990: LD_VAR 0 1
62994: PUSH
62995: LD_VAR 0 2
62999: PUSH
63000: LD_INT 4
63002: PLUS
63003: PUSH
63004: LD_INT 0
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: LIST
63011: PUSH
63012: LD_VAR 0 1
63016: PUSH
63017: LD_INT 3
63019: PLUS
63020: PUSH
63021: LD_VAR 0 2
63025: PUSH
63026: LD_INT 3
63028: PLUS
63029: PUSH
63030: LD_INT 5
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: LIST
63037: PUSH
63038: LD_VAR 0 1
63042: PUSH
63043: LD_INT 4
63045: PLUS
63046: PUSH
63047: LD_VAR 0 2
63051: PUSH
63052: LD_INT 4
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: LIST
63059: PUSH
63060: LD_VAR 0 1
63064: PUSH
63065: LD_VAR 0 2
63069: PUSH
63070: LD_INT 3
63072: MINUS
63073: PUSH
63074: LD_INT 3
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: LIST
63081: PUSH
63082: LD_VAR 0 1
63086: PUSH
63087: LD_INT 4
63089: MINUS
63090: PUSH
63091: LD_VAR 0 2
63095: PUSH
63096: LD_INT 4
63098: MINUS
63099: PUSH
63100: LD_INT 2
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: LIST
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: ST_TO_ADDR
// end ; 5 :
63115: GO 63255
63117: LD_INT 5
63119: DOUBLE
63120: EQUAL
63121: IFTRUE 63125
63123: GO 63254
63125: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63126: LD_ADDR_VAR 0 5
63130: PUSH
63131: LD_VAR 0 1
63135: PUSH
63136: LD_INT 4
63138: MINUS
63139: PUSH
63140: LD_VAR 0 2
63144: PUSH
63145: LD_INT 1
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: LIST
63152: PUSH
63153: LD_VAR 0 1
63157: PUSH
63158: LD_VAR 0 2
63162: PUSH
63163: LD_INT 4
63165: MINUS
63166: PUSH
63167: LD_INT 3
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: LIST
63174: PUSH
63175: LD_VAR 0 1
63179: PUSH
63180: LD_INT 4
63182: PLUS
63183: PUSH
63184: LD_VAR 0 2
63188: PUSH
63189: LD_INT 4
63191: PLUS
63192: PUSH
63193: LD_INT 5
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: LIST
63200: PUSH
63201: LD_VAR 0 1
63205: PUSH
63206: LD_INT 3
63208: PLUS
63209: PUSH
63210: LD_VAR 0 2
63214: PUSH
63215: LD_INT 4
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: LIST
63222: PUSH
63223: LD_VAR 0 1
63227: PUSH
63228: LD_VAR 0 2
63232: PUSH
63233: LD_INT 3
63235: PLUS
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: LIST
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: ST_TO_ADDR
// end ; end ;
63252: GO 63255
63254: POP
// result := list ;
63255: LD_ADDR_VAR 0 4
63259: PUSH
63260: LD_VAR 0 5
63264: ST_TO_ADDR
// end ;
63265: LD_VAR 0 4
63269: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63270: LD_INT 0
63272: PPUSH
63273: PPUSH
63274: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63275: LD_VAR 0 1
63279: NOT
63280: PUSH
63281: LD_VAR 0 2
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: LD_INT 2
63291: PUSH
63292: LD_INT 3
63294: PUSH
63295: LD_INT 4
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: IN
63304: NOT
63305: OR
63306: IFFALSE 63310
// exit ;
63308: GO 63402
// tmp := [ ] ;
63310: LD_ADDR_VAR 0 5
63314: PUSH
63315: EMPTY
63316: ST_TO_ADDR
// for i in units do
63317: LD_ADDR_VAR 0 4
63321: PUSH
63322: LD_VAR 0 1
63326: PUSH
63327: FOR_IN
63328: IFFALSE 63371
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63330: LD_ADDR_VAR 0 5
63334: PUSH
63335: LD_VAR 0 5
63339: PPUSH
63340: LD_VAR 0 5
63344: PUSH
63345: LD_INT 1
63347: PLUS
63348: PPUSH
63349: LD_VAR 0 4
63353: PPUSH
63354: LD_VAR 0 2
63358: PPUSH
63359: CALL_OW 259
63363: PPUSH
63364: CALL_OW 2
63368: ST_TO_ADDR
63369: GO 63327
63371: POP
63372: POP
// if not tmp then
63373: LD_VAR 0 5
63377: NOT
63378: IFFALSE 63382
// exit ;
63380: GO 63402
// result := SortListByListDesc ( units , tmp ) ;
63382: LD_ADDR_VAR 0 3
63386: PUSH
63387: LD_VAR 0 1
63391: PPUSH
63392: LD_VAR 0 5
63396: PPUSH
63397: CALL_OW 77
63401: ST_TO_ADDR
// end ;
63402: LD_VAR 0 3
63406: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63407: LD_INT 0
63409: PPUSH
63410: PPUSH
63411: PPUSH
// result := false ;
63412: LD_ADDR_VAR 0 3
63416: PUSH
63417: LD_INT 0
63419: ST_TO_ADDR
// x := GetX ( building ) ;
63420: LD_ADDR_VAR 0 4
63424: PUSH
63425: LD_VAR 0 2
63429: PPUSH
63430: CALL_OW 250
63434: ST_TO_ADDR
// y := GetY ( building ) ;
63435: LD_ADDR_VAR 0 5
63439: PUSH
63440: LD_VAR 0 2
63444: PPUSH
63445: CALL_OW 251
63449: ST_TO_ADDR
// if not building or not x or not y then
63450: LD_VAR 0 2
63454: NOT
63455: PUSH
63456: LD_VAR 0 4
63460: NOT
63461: OR
63462: PUSH
63463: LD_VAR 0 5
63467: NOT
63468: OR
63469: IFFALSE 63473
// exit ;
63471: GO 63565
// if GetTaskList ( unit ) then
63473: LD_VAR 0 1
63477: PPUSH
63478: CALL_OW 437
63482: IFFALSE 63565
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63484: LD_STRING e
63486: PUSH
63487: LD_VAR 0 1
63491: PPUSH
63492: CALL_OW 437
63496: PUSH
63497: LD_INT 1
63499: ARRAY
63500: PUSH
63501: LD_INT 1
63503: ARRAY
63504: EQUAL
63505: PUSH
63506: LD_VAR 0 4
63510: PUSH
63511: LD_VAR 0 1
63515: PPUSH
63516: CALL_OW 437
63520: PUSH
63521: LD_INT 1
63523: ARRAY
63524: PUSH
63525: LD_INT 2
63527: ARRAY
63528: EQUAL
63529: AND
63530: PUSH
63531: LD_VAR 0 5
63535: PUSH
63536: LD_VAR 0 1
63540: PPUSH
63541: CALL_OW 437
63545: PUSH
63546: LD_INT 1
63548: ARRAY
63549: PUSH
63550: LD_INT 3
63552: ARRAY
63553: EQUAL
63554: AND
63555: IFFALSE 63565
// result := true end ;
63557: LD_ADDR_VAR 0 3
63561: PUSH
63562: LD_INT 1
63564: ST_TO_ADDR
// end ;
63565: LD_VAR 0 3
63569: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63570: LD_INT 0
63572: PPUSH
// result := false ;
63573: LD_ADDR_VAR 0 4
63577: PUSH
63578: LD_INT 0
63580: ST_TO_ADDR
// if GetTaskList ( unit ) then
63581: LD_VAR 0 1
63585: PPUSH
63586: CALL_OW 437
63590: IFFALSE 63673
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63592: LD_STRING M
63594: PUSH
63595: LD_VAR 0 1
63599: PPUSH
63600: CALL_OW 437
63604: PUSH
63605: LD_INT 1
63607: ARRAY
63608: PUSH
63609: LD_INT 1
63611: ARRAY
63612: EQUAL
63613: PUSH
63614: LD_VAR 0 2
63618: PUSH
63619: LD_VAR 0 1
63623: PPUSH
63624: CALL_OW 437
63628: PUSH
63629: LD_INT 1
63631: ARRAY
63632: PUSH
63633: LD_INT 2
63635: ARRAY
63636: EQUAL
63637: AND
63638: PUSH
63639: LD_VAR 0 3
63643: PUSH
63644: LD_VAR 0 1
63648: PPUSH
63649: CALL_OW 437
63653: PUSH
63654: LD_INT 1
63656: ARRAY
63657: PUSH
63658: LD_INT 3
63660: ARRAY
63661: EQUAL
63662: AND
63663: IFFALSE 63673
// result := true ;
63665: LD_ADDR_VAR 0 4
63669: PUSH
63670: LD_INT 1
63672: ST_TO_ADDR
// end ; end ;
63673: LD_VAR 0 4
63677: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63678: LD_INT 0
63680: PPUSH
63681: PPUSH
63682: PPUSH
63683: PPUSH
// if not unit or not area then
63684: LD_VAR 0 1
63688: NOT
63689: PUSH
63690: LD_VAR 0 2
63694: NOT
63695: OR
63696: IFFALSE 63700
// exit ;
63698: GO 63864
// tmp := AreaToList ( area , i ) ;
63700: LD_ADDR_VAR 0 6
63704: PUSH
63705: LD_VAR 0 2
63709: PPUSH
63710: LD_VAR 0 5
63714: PPUSH
63715: CALL_OW 517
63719: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63720: LD_ADDR_VAR 0 5
63724: PUSH
63725: DOUBLE
63726: LD_INT 1
63728: DEC
63729: ST_TO_ADDR
63730: LD_VAR 0 6
63734: PUSH
63735: LD_INT 1
63737: ARRAY
63738: PUSH
63739: FOR_TO
63740: IFFALSE 63862
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63742: LD_ADDR_VAR 0 7
63746: PUSH
63747: LD_VAR 0 6
63751: PUSH
63752: LD_INT 1
63754: ARRAY
63755: PUSH
63756: LD_VAR 0 5
63760: ARRAY
63761: PUSH
63762: LD_VAR 0 6
63766: PUSH
63767: LD_INT 2
63769: ARRAY
63770: PUSH
63771: LD_VAR 0 5
63775: ARRAY
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63781: LD_VAR 0 7
63785: PUSH
63786: LD_INT 1
63788: ARRAY
63789: PPUSH
63790: LD_VAR 0 7
63794: PUSH
63795: LD_INT 2
63797: ARRAY
63798: PPUSH
63799: CALL_OW 428
63803: PUSH
63804: LD_INT 0
63806: EQUAL
63807: IFFALSE 63860
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63809: LD_VAR 0 1
63813: PPUSH
63814: LD_VAR 0 7
63818: PUSH
63819: LD_INT 1
63821: ARRAY
63822: PPUSH
63823: LD_VAR 0 7
63827: PUSH
63828: LD_INT 2
63830: ARRAY
63831: PPUSH
63832: LD_VAR 0 3
63836: PPUSH
63837: CALL_OW 48
// result := IsPlaced ( unit ) ;
63841: LD_ADDR_VAR 0 4
63845: PUSH
63846: LD_VAR 0 1
63850: PPUSH
63851: CALL_OW 305
63855: ST_TO_ADDR
// exit ;
63856: POP
63857: POP
63858: GO 63864
// end ; end ;
63860: GO 63739
63862: POP
63863: POP
// end ;
63864: LD_VAR 0 4
63868: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63869: LD_INT 0
63871: PPUSH
63872: PPUSH
63873: PPUSH
// if not side or side > 8 then
63874: LD_VAR 0 1
63878: NOT
63879: PUSH
63880: LD_VAR 0 1
63884: PUSH
63885: LD_INT 8
63887: GREATER
63888: OR
63889: IFFALSE 63893
// exit ;
63891: GO 64080
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63893: LD_ADDR_VAR 0 4
63897: PUSH
63898: LD_INT 22
63900: PUSH
63901: LD_VAR 0 1
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 21
63912: PUSH
63913: LD_INT 3
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PPUSH
63924: CALL_OW 69
63928: ST_TO_ADDR
// if not tmp then
63929: LD_VAR 0 4
63933: NOT
63934: IFFALSE 63938
// exit ;
63936: GO 64080
// enable_addtolog := true ;
63938: LD_ADDR_OWVAR 81
63942: PUSH
63943: LD_INT 1
63945: ST_TO_ADDR
// AddToLog ( [ ) ;
63946: LD_STRING [
63948: PPUSH
63949: CALL_OW 561
// for i in tmp do
63953: LD_ADDR_VAR 0 3
63957: PUSH
63958: LD_VAR 0 4
63962: PUSH
63963: FOR_IN
63964: IFFALSE 64071
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63966: LD_STRING [
63968: PUSH
63969: LD_VAR 0 3
63973: PPUSH
63974: CALL_OW 266
63978: STR
63979: PUSH
63980: LD_STRING , 
63982: STR
63983: PUSH
63984: LD_VAR 0 3
63988: PPUSH
63989: CALL_OW 250
63993: STR
63994: PUSH
63995: LD_STRING , 
63997: STR
63998: PUSH
63999: LD_VAR 0 3
64003: PPUSH
64004: CALL_OW 251
64008: STR
64009: PUSH
64010: LD_STRING , 
64012: STR
64013: PUSH
64014: LD_VAR 0 3
64018: PPUSH
64019: CALL_OW 254
64023: STR
64024: PUSH
64025: LD_STRING , 
64027: STR
64028: PUSH
64029: LD_VAR 0 3
64033: PPUSH
64034: LD_INT 1
64036: PPUSH
64037: CALL_OW 268
64041: STR
64042: PUSH
64043: LD_STRING , 
64045: STR
64046: PUSH
64047: LD_VAR 0 3
64051: PPUSH
64052: LD_INT 2
64054: PPUSH
64055: CALL_OW 268
64059: STR
64060: PUSH
64061: LD_STRING ],
64063: STR
64064: PPUSH
64065: CALL_OW 561
// end ;
64069: GO 63963
64071: POP
64072: POP
// AddToLog ( ]; ) ;
64073: LD_STRING ];
64075: PPUSH
64076: CALL_OW 561
// end ;
64080: LD_VAR 0 2
64084: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64085: LD_INT 0
64087: PPUSH
64088: PPUSH
64089: PPUSH
64090: PPUSH
64091: PPUSH
// if not area or not rate or not max then
64092: LD_VAR 0 1
64096: NOT
64097: PUSH
64098: LD_VAR 0 2
64102: NOT
64103: OR
64104: PUSH
64105: LD_VAR 0 4
64109: NOT
64110: OR
64111: IFFALSE 64115
// exit ;
64113: GO 64304
// while 1 do
64115: LD_INT 1
64117: IFFALSE 64304
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64119: LD_ADDR_VAR 0 9
64123: PUSH
64124: LD_VAR 0 1
64128: PPUSH
64129: LD_INT 1
64131: PPUSH
64132: CALL_OW 287
64136: PUSH
64137: LD_INT 10
64139: MUL
64140: ST_TO_ADDR
// r := rate / 10 ;
64141: LD_ADDR_VAR 0 7
64145: PUSH
64146: LD_VAR 0 2
64150: PUSH
64151: LD_INT 10
64153: DIVREAL
64154: ST_TO_ADDR
// time := 1 1$00 ;
64155: LD_ADDR_VAR 0 8
64159: PUSH
64160: LD_INT 2100
64162: ST_TO_ADDR
// if amount < min then
64163: LD_VAR 0 9
64167: PUSH
64168: LD_VAR 0 3
64172: LESS
64173: IFFALSE 64191
// r := r * 2 else
64175: LD_ADDR_VAR 0 7
64179: PUSH
64180: LD_VAR 0 7
64184: PUSH
64185: LD_INT 2
64187: MUL
64188: ST_TO_ADDR
64189: GO 64217
// if amount > max then
64191: LD_VAR 0 9
64195: PUSH
64196: LD_VAR 0 4
64200: GREATER
64201: IFFALSE 64217
// r := r / 2 ;
64203: LD_ADDR_VAR 0 7
64207: PUSH
64208: LD_VAR 0 7
64212: PUSH
64213: LD_INT 2
64215: DIVREAL
64216: ST_TO_ADDR
// time := time / r ;
64217: LD_ADDR_VAR 0 8
64221: PUSH
64222: LD_VAR 0 8
64226: PUSH
64227: LD_VAR 0 7
64231: DIVREAL
64232: ST_TO_ADDR
// if time < 0 then
64233: LD_VAR 0 8
64237: PUSH
64238: LD_INT 0
64240: LESS
64241: IFFALSE 64258
// time := time * - 1 ;
64243: LD_ADDR_VAR 0 8
64247: PUSH
64248: LD_VAR 0 8
64252: PUSH
64253: LD_INT 1
64255: NEG
64256: MUL
64257: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64258: LD_VAR 0 8
64262: PUSH
64263: LD_INT 35
64265: PPUSH
64266: LD_INT 875
64268: PPUSH
64269: CALL_OW 12
64273: PLUS
64274: PPUSH
64275: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64279: LD_INT 1
64281: PPUSH
64282: LD_INT 5
64284: PPUSH
64285: CALL_OW 12
64289: PPUSH
64290: LD_VAR 0 1
64294: PPUSH
64295: LD_INT 1
64297: PPUSH
64298: CALL_OW 55
// end ;
64302: GO 64115
// end ;
64304: LD_VAR 0 5
64308: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64309: LD_INT 0
64311: PPUSH
64312: PPUSH
64313: PPUSH
64314: PPUSH
64315: PPUSH
64316: PPUSH
64317: PPUSH
64318: PPUSH
// if not turrets or not factories then
64319: LD_VAR 0 1
64323: NOT
64324: PUSH
64325: LD_VAR 0 2
64329: NOT
64330: OR
64331: IFFALSE 64335
// exit ;
64333: GO 64642
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64335: LD_ADDR_VAR 0 10
64339: PUSH
64340: LD_INT 5
64342: PUSH
64343: LD_INT 6
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 2
64352: PUSH
64353: LD_INT 4
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 3
64362: PUSH
64363: LD_INT 5
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 24
64377: PUSH
64378: LD_INT 25
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 23
64387: PUSH
64388: LD_INT 27
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 42
64401: PUSH
64402: LD_INT 43
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 44
64411: PUSH
64412: LD_INT 46
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 45
64421: PUSH
64422: LD_INT 47
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: LIST
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: LIST
64438: ST_TO_ADDR
// result := [ ] ;
64439: LD_ADDR_VAR 0 3
64443: PUSH
64444: EMPTY
64445: ST_TO_ADDR
// for i in turrets do
64446: LD_ADDR_VAR 0 4
64450: PUSH
64451: LD_VAR 0 1
64455: PUSH
64456: FOR_IN
64457: IFFALSE 64640
// begin nat := GetNation ( i ) ;
64459: LD_ADDR_VAR 0 7
64463: PUSH
64464: LD_VAR 0 4
64468: PPUSH
64469: CALL_OW 248
64473: ST_TO_ADDR
// weapon := 0 ;
64474: LD_ADDR_VAR 0 8
64478: PUSH
64479: LD_INT 0
64481: ST_TO_ADDR
// if not nat then
64482: LD_VAR 0 7
64486: NOT
64487: IFFALSE 64491
// continue ;
64489: GO 64456
// for j in list [ nat ] do
64491: LD_ADDR_VAR 0 5
64495: PUSH
64496: LD_VAR 0 10
64500: PUSH
64501: LD_VAR 0 7
64505: ARRAY
64506: PUSH
64507: FOR_IN
64508: IFFALSE 64549
// if GetBWeapon ( i ) = j [ 1 ] then
64510: LD_VAR 0 4
64514: PPUSH
64515: CALL_OW 269
64519: PUSH
64520: LD_VAR 0 5
64524: PUSH
64525: LD_INT 1
64527: ARRAY
64528: EQUAL
64529: IFFALSE 64547
// begin weapon := j [ 2 ] ;
64531: LD_ADDR_VAR 0 8
64535: PUSH
64536: LD_VAR 0 5
64540: PUSH
64541: LD_INT 2
64543: ARRAY
64544: ST_TO_ADDR
// break ;
64545: GO 64549
// end ;
64547: GO 64507
64549: POP
64550: POP
// if not weapon then
64551: LD_VAR 0 8
64555: NOT
64556: IFFALSE 64560
// continue ;
64558: GO 64456
// for k in factories do
64560: LD_ADDR_VAR 0 6
64564: PUSH
64565: LD_VAR 0 2
64569: PUSH
64570: FOR_IN
64571: IFFALSE 64636
// begin weapons := AvailableWeaponList ( k ) ;
64573: LD_ADDR_VAR 0 9
64577: PUSH
64578: LD_VAR 0 6
64582: PPUSH
64583: CALL_OW 478
64587: ST_TO_ADDR
// if not weapons then
64588: LD_VAR 0 9
64592: NOT
64593: IFFALSE 64597
// continue ;
64595: GO 64570
// if weapon in weapons then
64597: LD_VAR 0 8
64601: PUSH
64602: LD_VAR 0 9
64606: IN
64607: IFFALSE 64634
// begin result := [ i , weapon ] ;
64609: LD_ADDR_VAR 0 3
64613: PUSH
64614: LD_VAR 0 4
64618: PUSH
64619: LD_VAR 0 8
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: ST_TO_ADDR
// exit ;
64628: POP
64629: POP
64630: POP
64631: POP
64632: GO 64642
// end ; end ;
64634: GO 64570
64636: POP
64637: POP
// end ;
64638: GO 64456
64640: POP
64641: POP
// end ;
64642: LD_VAR 0 3
64646: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64647: LD_INT 0
64649: PPUSH
// if not side or side > 8 then
64650: LD_VAR 0 3
64654: NOT
64655: PUSH
64656: LD_VAR 0 3
64660: PUSH
64661: LD_INT 8
64663: GREATER
64664: OR
64665: IFFALSE 64669
// exit ;
64667: GO 64728
// if not range then
64669: LD_VAR 0 4
64673: NOT
64674: IFFALSE 64685
// range := - 12 ;
64676: LD_ADDR_VAR 0 4
64680: PUSH
64681: LD_INT 12
64683: NEG
64684: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64685: LD_VAR 0 1
64689: PPUSH
64690: LD_VAR 0 2
64694: PPUSH
64695: LD_VAR 0 3
64699: PPUSH
64700: LD_VAR 0 4
64704: PPUSH
64705: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64709: LD_VAR 0 1
64713: PPUSH
64714: LD_VAR 0 2
64718: PPUSH
64719: LD_VAR 0 3
64723: PPUSH
64724: CALL_OW 331
// end ;
64728: LD_VAR 0 5
64732: RET
// export function Video ( mode ) ; begin
64733: LD_INT 0
64735: PPUSH
// ingame_video = mode ;
64736: LD_ADDR_OWVAR 52
64740: PUSH
64741: LD_VAR 0 1
64745: ST_TO_ADDR
// interface_hidden = mode ;
64746: LD_ADDR_OWVAR 54
64750: PUSH
64751: LD_VAR 0 1
64755: ST_TO_ADDR
// end ;
64756: LD_VAR 0 2
64760: RET
// export function Join ( array , element ) ; begin
64761: LD_INT 0
64763: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64764: LD_ADDR_VAR 0 3
64768: PUSH
64769: LD_VAR 0 1
64773: PPUSH
64774: LD_VAR 0 1
64778: PUSH
64779: LD_INT 1
64781: PLUS
64782: PPUSH
64783: LD_VAR 0 2
64787: PPUSH
64788: CALL_OW 1
64792: ST_TO_ADDR
// end ;
64793: LD_VAR 0 3
64797: RET
// export function JoinUnion ( array , element ) ; begin
64798: LD_INT 0
64800: PPUSH
// result := array union element ;
64801: LD_ADDR_VAR 0 3
64805: PUSH
64806: LD_VAR 0 1
64810: PUSH
64811: LD_VAR 0 2
64815: UNION
64816: ST_TO_ADDR
// end ;
64817: LD_VAR 0 3
64821: RET
// export function GetBehemoths ( side ) ; begin
64822: LD_INT 0
64824: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64825: LD_ADDR_VAR 0 2
64829: PUSH
64830: LD_INT 22
64832: PUSH
64833: LD_VAR 0 1
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 31
64844: PUSH
64845: LD_INT 25
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PPUSH
64856: CALL_OW 69
64860: ST_TO_ADDR
// end ;
64861: LD_VAR 0 2
64865: RET
// export function Shuffle ( array ) ; var i , index ; begin
64866: LD_INT 0
64868: PPUSH
64869: PPUSH
64870: PPUSH
// result := [ ] ;
64871: LD_ADDR_VAR 0 2
64875: PUSH
64876: EMPTY
64877: ST_TO_ADDR
// if not array then
64878: LD_VAR 0 1
64882: NOT
64883: IFFALSE 64887
// exit ;
64885: GO 64986
// Randomize ;
64887: CALL_OW 10
// for i = array downto 1 do
64891: LD_ADDR_VAR 0 3
64895: PUSH
64896: DOUBLE
64897: LD_VAR 0 1
64901: INC
64902: ST_TO_ADDR
64903: LD_INT 1
64905: PUSH
64906: FOR_DOWNTO
64907: IFFALSE 64984
// begin index := rand ( 1 , array ) ;
64909: LD_ADDR_VAR 0 4
64913: PUSH
64914: LD_INT 1
64916: PPUSH
64917: LD_VAR 0 1
64921: PPUSH
64922: CALL_OW 12
64926: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64927: LD_ADDR_VAR 0 2
64931: PUSH
64932: LD_VAR 0 2
64936: PPUSH
64937: LD_VAR 0 2
64941: PUSH
64942: LD_INT 1
64944: PLUS
64945: PPUSH
64946: LD_VAR 0 1
64950: PUSH
64951: LD_VAR 0 4
64955: ARRAY
64956: PPUSH
64957: CALL_OW 2
64961: ST_TO_ADDR
// array := Delete ( array , index ) ;
64962: LD_ADDR_VAR 0 1
64966: PUSH
64967: LD_VAR 0 1
64971: PPUSH
64972: LD_VAR 0 4
64976: PPUSH
64977: CALL_OW 3
64981: ST_TO_ADDR
// end ;
64982: GO 64906
64984: POP
64985: POP
// end ;
64986: LD_VAR 0 2
64990: RET
// export function GetBaseMaterials ( base ) ; begin
64991: LD_INT 0
64993: PPUSH
// result := [ 0 , 0 , 0 ] ;
64994: LD_ADDR_VAR 0 2
64998: PUSH
64999: LD_INT 0
65001: PUSH
65002: LD_INT 0
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: LIST
65012: ST_TO_ADDR
// if not base then
65013: LD_VAR 0 1
65017: NOT
65018: IFFALSE 65022
// exit ;
65020: GO 65071
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65022: LD_ADDR_VAR 0 2
65026: PUSH
65027: LD_VAR 0 1
65031: PPUSH
65032: LD_INT 1
65034: PPUSH
65035: CALL_OW 275
65039: PUSH
65040: LD_VAR 0 1
65044: PPUSH
65045: LD_INT 2
65047: PPUSH
65048: CALL_OW 275
65052: PUSH
65053: LD_VAR 0 1
65057: PPUSH
65058: LD_INT 3
65060: PPUSH
65061: CALL_OW 275
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: LIST
65070: ST_TO_ADDR
// end ;
65071: LD_VAR 0 2
65075: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65076: LD_INT 0
65078: PPUSH
65079: PPUSH
// result := array ;
65080: LD_ADDR_VAR 0 3
65084: PUSH
65085: LD_VAR 0 1
65089: ST_TO_ADDR
// if size >= result then
65090: LD_VAR 0 2
65094: PUSH
65095: LD_VAR 0 3
65099: GREATEREQUAL
65100: IFFALSE 65104
// exit ;
65102: GO 65154
// if size then
65104: LD_VAR 0 2
65108: IFFALSE 65154
// for i := array downto size do
65110: LD_ADDR_VAR 0 4
65114: PUSH
65115: DOUBLE
65116: LD_VAR 0 1
65120: INC
65121: ST_TO_ADDR
65122: LD_VAR 0 2
65126: PUSH
65127: FOR_DOWNTO
65128: IFFALSE 65152
// result := Delete ( result , result ) ;
65130: LD_ADDR_VAR 0 3
65134: PUSH
65135: LD_VAR 0 3
65139: PPUSH
65140: LD_VAR 0 3
65144: PPUSH
65145: CALL_OW 3
65149: ST_TO_ADDR
65150: GO 65127
65152: POP
65153: POP
// end ;
65154: LD_VAR 0 3
65158: RET
// export function ComExit ( unit ) ; var tmp ; begin
65159: LD_INT 0
65161: PPUSH
65162: PPUSH
// if not IsInUnit ( unit ) then
65163: LD_VAR 0 1
65167: PPUSH
65168: CALL_OW 310
65172: NOT
65173: IFFALSE 65177
// exit ;
65175: GO 65237
// tmp := IsInUnit ( unit ) ;
65177: LD_ADDR_VAR 0 3
65181: PUSH
65182: LD_VAR 0 1
65186: PPUSH
65187: CALL_OW 310
65191: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65192: LD_VAR 0 3
65196: PPUSH
65197: CALL_OW 247
65201: PUSH
65202: LD_INT 2
65204: EQUAL
65205: IFFALSE 65218
// ComExitVehicle ( unit ) else
65207: LD_VAR 0 1
65211: PPUSH
65212: CALL_OW 121
65216: GO 65227
// ComExitBuilding ( unit ) ;
65218: LD_VAR 0 1
65222: PPUSH
65223: CALL_OW 122
// result := tmp ;
65227: LD_ADDR_VAR 0 2
65231: PUSH
65232: LD_VAR 0 3
65236: ST_TO_ADDR
// end ;
65237: LD_VAR 0 2
65241: RET
// export function ComExitAll ( units ) ; var i ; begin
65242: LD_INT 0
65244: PPUSH
65245: PPUSH
// if not units then
65246: LD_VAR 0 1
65250: NOT
65251: IFFALSE 65255
// exit ;
65253: GO 65281
// for i in units do
65255: LD_ADDR_VAR 0 3
65259: PUSH
65260: LD_VAR 0 1
65264: PUSH
65265: FOR_IN
65266: IFFALSE 65279
// ComExit ( i ) ;
65268: LD_VAR 0 3
65272: PPUSH
65273: CALL 65159 0 1
65277: GO 65265
65279: POP
65280: POP
// end ;
65281: LD_VAR 0 2
65285: RET
// export function ResetHc ; begin
65286: LD_INT 0
65288: PPUSH
// InitHc ;
65289: CALL_OW 19
// hc_importance := 0 ;
65293: LD_ADDR_OWVAR 32
65297: PUSH
65298: LD_INT 0
65300: ST_TO_ADDR
// end ;
65301: LD_VAR 0 1
65305: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65306: LD_INT 0
65308: PPUSH
65309: PPUSH
65310: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65311: LD_ADDR_VAR 0 6
65315: PUSH
65316: LD_VAR 0 1
65320: PUSH
65321: LD_VAR 0 3
65325: PLUS
65326: PUSH
65327: LD_INT 2
65329: DIV
65330: ST_TO_ADDR
// if _x < 0 then
65331: LD_VAR 0 6
65335: PUSH
65336: LD_INT 0
65338: LESS
65339: IFFALSE 65356
// _x := _x * - 1 ;
65341: LD_ADDR_VAR 0 6
65345: PUSH
65346: LD_VAR 0 6
65350: PUSH
65351: LD_INT 1
65353: NEG
65354: MUL
65355: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65356: LD_ADDR_VAR 0 7
65360: PUSH
65361: LD_VAR 0 2
65365: PUSH
65366: LD_VAR 0 4
65370: PLUS
65371: PUSH
65372: LD_INT 2
65374: DIV
65375: ST_TO_ADDR
// if _y < 0 then
65376: LD_VAR 0 7
65380: PUSH
65381: LD_INT 0
65383: LESS
65384: IFFALSE 65401
// _y := _y * - 1 ;
65386: LD_ADDR_VAR 0 7
65390: PUSH
65391: LD_VAR 0 7
65395: PUSH
65396: LD_INT 1
65398: NEG
65399: MUL
65400: ST_TO_ADDR
// result := [ _x , _y ] ;
65401: LD_ADDR_VAR 0 5
65405: PUSH
65406: LD_VAR 0 6
65410: PUSH
65411: LD_VAR 0 7
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: ST_TO_ADDR
// end ;
65420: LD_VAR 0 5
65424: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65425: LD_INT 0
65427: PPUSH
65428: PPUSH
65429: PPUSH
65430: PPUSH
// task := GetTaskList ( unit ) ;
65431: LD_ADDR_VAR 0 7
65435: PUSH
65436: LD_VAR 0 1
65440: PPUSH
65441: CALL_OW 437
65445: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65446: LD_VAR 0 7
65450: NOT
65451: PUSH
65452: LD_VAR 0 1
65456: PPUSH
65457: LD_VAR 0 2
65461: PPUSH
65462: CALL_OW 308
65466: NOT
65467: AND
65468: IFFALSE 65472
// exit ;
65470: GO 65590
// if IsInArea ( unit , area ) then
65472: LD_VAR 0 1
65476: PPUSH
65477: LD_VAR 0 2
65481: PPUSH
65482: CALL_OW 308
65486: IFFALSE 65504
// begin ComMoveToArea ( unit , goAway ) ;
65488: LD_VAR 0 1
65492: PPUSH
65493: LD_VAR 0 3
65497: PPUSH
65498: CALL_OW 113
// exit ;
65502: GO 65590
// end ; if task [ 1 ] [ 1 ] <> M then
65504: LD_VAR 0 7
65508: PUSH
65509: LD_INT 1
65511: ARRAY
65512: PUSH
65513: LD_INT 1
65515: ARRAY
65516: PUSH
65517: LD_STRING M
65519: NONEQUAL
65520: IFFALSE 65524
// exit ;
65522: GO 65590
// x := task [ 1 ] [ 2 ] ;
65524: LD_ADDR_VAR 0 5
65528: PUSH
65529: LD_VAR 0 7
65533: PUSH
65534: LD_INT 1
65536: ARRAY
65537: PUSH
65538: LD_INT 2
65540: ARRAY
65541: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65542: LD_ADDR_VAR 0 6
65546: PUSH
65547: LD_VAR 0 7
65551: PUSH
65552: LD_INT 1
65554: ARRAY
65555: PUSH
65556: LD_INT 3
65558: ARRAY
65559: ST_TO_ADDR
// if InArea ( x , y , area ) then
65560: LD_VAR 0 5
65564: PPUSH
65565: LD_VAR 0 6
65569: PPUSH
65570: LD_VAR 0 2
65574: PPUSH
65575: CALL_OW 309
65579: IFFALSE 65590
// ComStop ( unit ) ;
65581: LD_VAR 0 1
65585: PPUSH
65586: CALL_OW 141
// end ;
65590: LD_VAR 0 4
65594: RET
// export function Abs ( value ) ; begin
65595: LD_INT 0
65597: PPUSH
// result := value ;
65598: LD_ADDR_VAR 0 2
65602: PUSH
65603: LD_VAR 0 1
65607: ST_TO_ADDR
// if value < 0 then
65608: LD_VAR 0 1
65612: PUSH
65613: LD_INT 0
65615: LESS
65616: IFFALSE 65633
// result := value * - 1 ;
65618: LD_ADDR_VAR 0 2
65622: PUSH
65623: LD_VAR 0 1
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: MUL
65632: ST_TO_ADDR
// end ;
65633: LD_VAR 0 2
65637: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65638: LD_INT 0
65640: PPUSH
65641: PPUSH
65642: PPUSH
65643: PPUSH
65644: PPUSH
65645: PPUSH
65646: PPUSH
65647: PPUSH
// if not unit or not building then
65648: LD_VAR 0 1
65652: NOT
65653: PUSH
65654: LD_VAR 0 2
65658: NOT
65659: OR
65660: IFFALSE 65664
// exit ;
65662: GO 65890
// x := GetX ( building ) ;
65664: LD_ADDR_VAR 0 4
65668: PUSH
65669: LD_VAR 0 2
65673: PPUSH
65674: CALL_OW 250
65678: ST_TO_ADDR
// y := GetY ( building ) ;
65679: LD_ADDR_VAR 0 6
65683: PUSH
65684: LD_VAR 0 2
65688: PPUSH
65689: CALL_OW 251
65693: ST_TO_ADDR
// d := GetDir ( building ) ;
65694: LD_ADDR_VAR 0 8
65698: PUSH
65699: LD_VAR 0 2
65703: PPUSH
65704: CALL_OW 254
65708: ST_TO_ADDR
// r := 4 ;
65709: LD_ADDR_VAR 0 9
65713: PUSH
65714: LD_INT 4
65716: ST_TO_ADDR
// for i := 1 to 5 do
65717: LD_ADDR_VAR 0 10
65721: PUSH
65722: DOUBLE
65723: LD_INT 1
65725: DEC
65726: ST_TO_ADDR
65727: LD_INT 5
65729: PUSH
65730: FOR_TO
65731: IFFALSE 65888
// begin _x := ShiftX ( x , d , r + i ) ;
65733: LD_ADDR_VAR 0 5
65737: PUSH
65738: LD_VAR 0 4
65742: PPUSH
65743: LD_VAR 0 8
65747: PPUSH
65748: LD_VAR 0 9
65752: PUSH
65753: LD_VAR 0 10
65757: PLUS
65758: PPUSH
65759: CALL_OW 272
65763: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65764: LD_ADDR_VAR 0 7
65768: PUSH
65769: LD_VAR 0 6
65773: PPUSH
65774: LD_VAR 0 8
65778: PPUSH
65779: LD_VAR 0 9
65783: PUSH
65784: LD_VAR 0 10
65788: PLUS
65789: PPUSH
65790: CALL_OW 273
65794: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65795: LD_VAR 0 5
65799: PPUSH
65800: LD_VAR 0 7
65804: PPUSH
65805: CALL_OW 488
65809: PUSH
65810: LD_VAR 0 5
65814: PPUSH
65815: LD_VAR 0 7
65819: PPUSH
65820: CALL_OW 428
65824: PPUSH
65825: CALL_OW 247
65829: PUSH
65830: LD_INT 3
65832: PUSH
65833: LD_INT 2
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: IN
65840: NOT
65841: AND
65842: IFFALSE 65886
// begin ComMoveXY ( unit , _x , _y ) ;
65844: LD_VAR 0 1
65848: PPUSH
65849: LD_VAR 0 5
65853: PPUSH
65854: LD_VAR 0 7
65858: PPUSH
65859: CALL_OW 111
// result := [ _x , _y ] ;
65863: LD_ADDR_VAR 0 3
65867: PUSH
65868: LD_VAR 0 5
65872: PUSH
65873: LD_VAR 0 7
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: ST_TO_ADDR
// exit ;
65882: POP
65883: POP
65884: GO 65890
// end ; end ;
65886: GO 65730
65888: POP
65889: POP
// end ;
65890: LD_VAR 0 3
65894: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65895: LD_INT 0
65897: PPUSH
65898: PPUSH
65899: PPUSH
// result := 0 ;
65900: LD_ADDR_VAR 0 3
65904: PUSH
65905: LD_INT 0
65907: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65908: LD_VAR 0 1
65912: PUSH
65913: LD_INT 0
65915: LESS
65916: PUSH
65917: LD_VAR 0 1
65921: PUSH
65922: LD_INT 8
65924: GREATER
65925: OR
65926: PUSH
65927: LD_VAR 0 2
65931: PUSH
65932: LD_INT 0
65934: LESS
65935: OR
65936: PUSH
65937: LD_VAR 0 2
65941: PUSH
65942: LD_INT 8
65944: GREATER
65945: OR
65946: IFFALSE 65950
// exit ;
65948: GO 66025
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65950: LD_ADDR_VAR 0 4
65954: PUSH
65955: LD_INT 22
65957: PUSH
65958: LD_VAR 0 2
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PPUSH
65967: CALL_OW 69
65971: PUSH
65972: FOR_IN
65973: IFFALSE 66023
// begin un := UnitShoot ( i ) ;
65975: LD_ADDR_VAR 0 5
65979: PUSH
65980: LD_VAR 0 4
65984: PPUSH
65985: CALL_OW 504
65989: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65990: LD_VAR 0 5
65994: PPUSH
65995: CALL_OW 255
65999: PUSH
66000: LD_VAR 0 1
66004: EQUAL
66005: IFFALSE 66021
// begin result := un ;
66007: LD_ADDR_VAR 0 3
66011: PUSH
66012: LD_VAR 0 5
66016: ST_TO_ADDR
// exit ;
66017: POP
66018: POP
66019: GO 66025
// end ; end ;
66021: GO 65972
66023: POP
66024: POP
// end ;
66025: LD_VAR 0 3
66029: RET
// export function GetCargoBay ( units ) ; begin
66030: LD_INT 0
66032: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66033: LD_ADDR_VAR 0 2
66037: PUSH
66038: LD_VAR 0 1
66042: PPUSH
66043: LD_INT 2
66045: PUSH
66046: LD_INT 34
66048: PUSH
66049: LD_INT 12
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 34
66058: PUSH
66059: LD_INT 51
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 34
66068: PUSH
66069: LD_INT 32
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 34
66078: PUSH
66079: LD_EXP 25
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: PPUSH
66095: CALL_OW 72
66099: ST_TO_ADDR
// end ;
66100: LD_VAR 0 2
66104: RET
// export function Negate ( value ) ; begin
66105: LD_INT 0
66107: PPUSH
// result := not value ;
66108: LD_ADDR_VAR 0 2
66112: PUSH
66113: LD_VAR 0 1
66117: NOT
66118: ST_TO_ADDR
// end ;
66119: LD_VAR 0 2
66123: RET
// export function Inc ( value ) ; begin
66124: LD_INT 0
66126: PPUSH
// result := value + 1 ;
66127: LD_ADDR_VAR 0 2
66131: PUSH
66132: LD_VAR 0 1
66136: PUSH
66137: LD_INT 1
66139: PLUS
66140: ST_TO_ADDR
// end ;
66141: LD_VAR 0 2
66145: RET
// export function Dec ( value ) ; begin
66146: LD_INT 0
66148: PPUSH
// result := value - 1 ;
66149: LD_ADDR_VAR 0 2
66153: PUSH
66154: LD_VAR 0 1
66158: PUSH
66159: LD_INT 1
66161: MINUS
66162: ST_TO_ADDR
// end ;
66163: LD_VAR 0 2
66167: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66168: LD_INT 0
66170: PPUSH
66171: PPUSH
66172: PPUSH
66173: PPUSH
66174: PPUSH
66175: PPUSH
66176: PPUSH
66177: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66178: LD_VAR 0 1
66182: PPUSH
66183: LD_VAR 0 2
66187: PPUSH
66188: CALL_OW 488
66192: NOT
66193: PUSH
66194: LD_VAR 0 3
66198: PPUSH
66199: LD_VAR 0 4
66203: PPUSH
66204: CALL_OW 488
66208: NOT
66209: OR
66210: IFFALSE 66223
// begin result := - 1 ;
66212: LD_ADDR_VAR 0 5
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: ST_TO_ADDR
// exit ;
66221: GO 66458
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66223: LD_ADDR_VAR 0 12
66227: PUSH
66228: LD_VAR 0 1
66232: PPUSH
66233: LD_VAR 0 2
66237: PPUSH
66238: LD_VAR 0 3
66242: PPUSH
66243: LD_VAR 0 4
66247: PPUSH
66248: CALL 65306 0 4
66252: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66253: LD_ADDR_VAR 0 11
66257: PUSH
66258: LD_VAR 0 1
66262: PPUSH
66263: LD_VAR 0 2
66267: PPUSH
66268: LD_VAR 0 12
66272: PUSH
66273: LD_INT 1
66275: ARRAY
66276: PPUSH
66277: LD_VAR 0 12
66281: PUSH
66282: LD_INT 2
66284: ARRAY
66285: PPUSH
66286: CALL_OW 298
66290: ST_TO_ADDR
// distance := 9999 ;
66291: LD_ADDR_VAR 0 10
66295: PUSH
66296: LD_INT 9999
66298: ST_TO_ADDR
// for i := 0 to 5 do
66299: LD_ADDR_VAR 0 6
66303: PUSH
66304: DOUBLE
66305: LD_INT 0
66307: DEC
66308: ST_TO_ADDR
66309: LD_INT 5
66311: PUSH
66312: FOR_TO
66313: IFFALSE 66456
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66315: LD_ADDR_VAR 0 7
66319: PUSH
66320: LD_VAR 0 1
66324: PPUSH
66325: LD_VAR 0 6
66329: PPUSH
66330: LD_VAR 0 11
66334: PPUSH
66335: CALL_OW 272
66339: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66340: LD_ADDR_VAR 0 8
66344: PUSH
66345: LD_VAR 0 2
66349: PPUSH
66350: LD_VAR 0 6
66354: PPUSH
66355: LD_VAR 0 11
66359: PPUSH
66360: CALL_OW 273
66364: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66365: LD_VAR 0 7
66369: PPUSH
66370: LD_VAR 0 8
66374: PPUSH
66375: CALL_OW 488
66379: NOT
66380: IFFALSE 66384
// continue ;
66382: GO 66312
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66384: LD_ADDR_VAR 0 9
66388: PUSH
66389: LD_VAR 0 12
66393: PUSH
66394: LD_INT 1
66396: ARRAY
66397: PPUSH
66398: LD_VAR 0 12
66402: PUSH
66403: LD_INT 2
66405: ARRAY
66406: PPUSH
66407: LD_VAR 0 7
66411: PPUSH
66412: LD_VAR 0 8
66416: PPUSH
66417: CALL_OW 298
66421: ST_TO_ADDR
// if tmp < distance then
66422: LD_VAR 0 9
66426: PUSH
66427: LD_VAR 0 10
66431: LESS
66432: IFFALSE 66454
// begin result := i ;
66434: LD_ADDR_VAR 0 5
66438: PUSH
66439: LD_VAR 0 6
66443: ST_TO_ADDR
// distance := tmp ;
66444: LD_ADDR_VAR 0 10
66448: PUSH
66449: LD_VAR 0 9
66453: ST_TO_ADDR
// end ; end ;
66454: GO 66312
66456: POP
66457: POP
// end ;
66458: LD_VAR 0 5
66462: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66463: LD_INT 0
66465: PPUSH
66466: PPUSH
// if not driver or not IsInUnit ( driver ) then
66467: LD_VAR 0 1
66471: NOT
66472: PUSH
66473: LD_VAR 0 1
66477: PPUSH
66478: CALL_OW 310
66482: NOT
66483: OR
66484: IFFALSE 66488
// exit ;
66486: GO 66578
// vehicle := IsInUnit ( driver ) ;
66488: LD_ADDR_VAR 0 3
66492: PUSH
66493: LD_VAR 0 1
66497: PPUSH
66498: CALL_OW 310
66502: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66503: LD_VAR 0 1
66507: PPUSH
66508: LD_STRING \
66510: PUSH
66511: LD_INT 0
66513: PUSH
66514: LD_INT 0
66516: PUSH
66517: LD_INT 0
66519: PUSH
66520: LD_INT 0
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: LD_INT 0
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: PUSH
66538: LD_STRING E
66540: PUSH
66541: LD_INT 0
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: LD_VAR 0 3
66551: PUSH
66552: LD_INT 0
66554: PUSH
66555: LD_INT 0
66557: PUSH
66558: LD_INT 0
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PPUSH
66574: CALL_OW 446
// end ;
66578: LD_VAR 0 2
66582: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66583: LD_INT 0
66585: PPUSH
66586: PPUSH
// if not driver or not IsInUnit ( driver ) then
66587: LD_VAR 0 1
66591: NOT
66592: PUSH
66593: LD_VAR 0 1
66597: PPUSH
66598: CALL_OW 310
66602: NOT
66603: OR
66604: IFFALSE 66608
// exit ;
66606: GO 66698
// vehicle := IsInUnit ( driver ) ;
66608: LD_ADDR_VAR 0 3
66612: PUSH
66613: LD_VAR 0 1
66617: PPUSH
66618: CALL_OW 310
66622: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66623: LD_VAR 0 1
66627: PPUSH
66628: LD_STRING \
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: LD_INT 0
66636: PUSH
66637: LD_INT 0
66639: PUSH
66640: LD_INT 0
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: LD_INT 0
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: PUSH
66658: LD_STRING E
66660: PUSH
66661: LD_INT 0
66663: PUSH
66664: LD_INT 0
66666: PUSH
66667: LD_VAR 0 3
66671: PUSH
66672: LD_INT 0
66674: PUSH
66675: LD_INT 0
66677: PUSH
66678: LD_INT 0
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PPUSH
66694: CALL_OW 447
// end ;
66698: LD_VAR 0 2
66702: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66703: LD_INT 0
66705: PPUSH
66706: PPUSH
66707: PPUSH
// tmp := [ ] ;
66708: LD_ADDR_VAR 0 5
66712: PUSH
66713: EMPTY
66714: ST_TO_ADDR
// for i in units do
66715: LD_ADDR_VAR 0 4
66719: PUSH
66720: LD_VAR 0 1
66724: PUSH
66725: FOR_IN
66726: IFFALSE 66764
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66728: LD_ADDR_VAR 0 5
66732: PUSH
66733: LD_VAR 0 5
66737: PPUSH
66738: LD_VAR 0 5
66742: PUSH
66743: LD_INT 1
66745: PLUS
66746: PPUSH
66747: LD_VAR 0 4
66751: PPUSH
66752: CALL_OW 256
66756: PPUSH
66757: CALL_OW 2
66761: ST_TO_ADDR
66762: GO 66725
66764: POP
66765: POP
// if not tmp then
66766: LD_VAR 0 5
66770: NOT
66771: IFFALSE 66775
// exit ;
66773: GO 66823
// if asc then
66775: LD_VAR 0 2
66779: IFFALSE 66803
// result := SortListByListAsc ( units , tmp ) else
66781: LD_ADDR_VAR 0 3
66785: PUSH
66786: LD_VAR 0 1
66790: PPUSH
66791: LD_VAR 0 5
66795: PPUSH
66796: CALL_OW 76
66800: ST_TO_ADDR
66801: GO 66823
// result := SortListByListDesc ( units , tmp ) ;
66803: LD_ADDR_VAR 0 3
66807: PUSH
66808: LD_VAR 0 1
66812: PPUSH
66813: LD_VAR 0 5
66817: PPUSH
66818: CALL_OW 77
66822: ST_TO_ADDR
// end ;
66823: LD_VAR 0 3
66827: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66828: LD_INT 0
66830: PPUSH
66831: PPUSH
// task := GetTaskList ( mech ) ;
66832: LD_ADDR_VAR 0 4
66836: PUSH
66837: LD_VAR 0 1
66841: PPUSH
66842: CALL_OW 437
66846: ST_TO_ADDR
// if not task then
66847: LD_VAR 0 4
66851: NOT
66852: IFFALSE 66856
// exit ;
66854: GO 66898
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66856: LD_ADDR_VAR 0 3
66860: PUSH
66861: LD_VAR 0 4
66865: PUSH
66866: LD_INT 1
66868: ARRAY
66869: PUSH
66870: LD_INT 1
66872: ARRAY
66873: PUSH
66874: LD_STRING r
66876: EQUAL
66877: PUSH
66878: LD_VAR 0 4
66882: PUSH
66883: LD_INT 1
66885: ARRAY
66886: PUSH
66887: LD_INT 4
66889: ARRAY
66890: PUSH
66891: LD_VAR 0 2
66895: EQUAL
66896: AND
66897: ST_TO_ADDR
// end ;
66898: LD_VAR 0 3
66902: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66903: LD_INT 0
66905: PPUSH
// SetDir ( unit , d ) ;
66906: LD_VAR 0 1
66910: PPUSH
66911: LD_VAR 0 4
66915: PPUSH
66916: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66920: LD_VAR 0 1
66924: PPUSH
66925: LD_VAR 0 2
66929: PPUSH
66930: LD_VAR 0 3
66934: PPUSH
66935: LD_VAR 0 5
66939: PPUSH
66940: CALL_OW 48
// end ;
66944: LD_VAR 0 6
66948: RET
// export function ToNaturalNumber ( number ) ; begin
66949: LD_INT 0
66951: PPUSH
// result := number div 1 ;
66952: LD_ADDR_VAR 0 2
66956: PUSH
66957: LD_VAR 0 1
66961: PUSH
66962: LD_INT 1
66964: DIV
66965: ST_TO_ADDR
// if number < 0 then
66966: LD_VAR 0 1
66970: PUSH
66971: LD_INT 0
66973: LESS
66974: IFFALSE 66984
// result := 0 ;
66976: LD_ADDR_VAR 0 2
66980: PUSH
66981: LD_INT 0
66983: ST_TO_ADDR
// end ;
66984: LD_VAR 0 2
66988: RET
// export function SortByClass ( units , class ) ; var un ; begin
66989: LD_INT 0
66991: PPUSH
66992: PPUSH
// if not units or not class then
66993: LD_VAR 0 1
66997: NOT
66998: PUSH
66999: LD_VAR 0 2
67003: NOT
67004: OR
67005: IFFALSE 67009
// exit ;
67007: GO 67104
// result := [ ] ;
67009: LD_ADDR_VAR 0 3
67013: PUSH
67014: EMPTY
67015: ST_TO_ADDR
// for un in units do
67016: LD_ADDR_VAR 0 4
67020: PUSH
67021: LD_VAR 0 1
67025: PUSH
67026: FOR_IN
67027: IFFALSE 67102
// if GetClass ( un ) = class then
67029: LD_VAR 0 4
67033: PPUSH
67034: CALL_OW 257
67038: PUSH
67039: LD_VAR 0 2
67043: EQUAL
67044: IFFALSE 67071
// result := Insert ( result , 1 , un ) else
67046: LD_ADDR_VAR 0 3
67050: PUSH
67051: LD_VAR 0 3
67055: PPUSH
67056: LD_INT 1
67058: PPUSH
67059: LD_VAR 0 4
67063: PPUSH
67064: CALL_OW 2
67068: ST_TO_ADDR
67069: GO 67100
// result := Replace ( result , result + 1 , un ) ;
67071: LD_ADDR_VAR 0 3
67075: PUSH
67076: LD_VAR 0 3
67080: PPUSH
67081: LD_VAR 0 3
67085: PUSH
67086: LD_INT 1
67088: PLUS
67089: PPUSH
67090: LD_VAR 0 4
67094: PPUSH
67095: CALL_OW 1
67099: ST_TO_ADDR
67100: GO 67026
67102: POP
67103: POP
// end ;
67104: LD_VAR 0 3
67108: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67109: LD_INT 0
67111: PPUSH
67112: PPUSH
67113: PPUSH
67114: PPUSH
67115: PPUSH
67116: PPUSH
67117: PPUSH
// result := [ ] ;
67118: LD_ADDR_VAR 0 4
67122: PUSH
67123: EMPTY
67124: ST_TO_ADDR
// if x - r < 0 then
67125: LD_VAR 0 1
67129: PUSH
67130: LD_VAR 0 3
67134: MINUS
67135: PUSH
67136: LD_INT 0
67138: LESS
67139: IFFALSE 67151
// min_x := 0 else
67141: LD_ADDR_VAR 0 8
67145: PUSH
67146: LD_INT 0
67148: ST_TO_ADDR
67149: GO 67167
// min_x := x - r ;
67151: LD_ADDR_VAR 0 8
67155: PUSH
67156: LD_VAR 0 1
67160: PUSH
67161: LD_VAR 0 3
67165: MINUS
67166: ST_TO_ADDR
// if y - r < 0 then
67167: LD_VAR 0 2
67171: PUSH
67172: LD_VAR 0 3
67176: MINUS
67177: PUSH
67178: LD_INT 0
67180: LESS
67181: IFFALSE 67193
// min_y := 0 else
67183: LD_ADDR_VAR 0 7
67187: PUSH
67188: LD_INT 0
67190: ST_TO_ADDR
67191: GO 67209
// min_y := y - r ;
67193: LD_ADDR_VAR 0 7
67197: PUSH
67198: LD_VAR 0 2
67202: PUSH
67203: LD_VAR 0 3
67207: MINUS
67208: ST_TO_ADDR
// max_x := x + r ;
67209: LD_ADDR_VAR 0 9
67213: PUSH
67214: LD_VAR 0 1
67218: PUSH
67219: LD_VAR 0 3
67223: PLUS
67224: ST_TO_ADDR
// max_y := y + r ;
67225: LD_ADDR_VAR 0 10
67229: PUSH
67230: LD_VAR 0 2
67234: PUSH
67235: LD_VAR 0 3
67239: PLUS
67240: ST_TO_ADDR
// for _x = min_x to max_x do
67241: LD_ADDR_VAR 0 5
67245: PUSH
67246: DOUBLE
67247: LD_VAR 0 8
67251: DEC
67252: ST_TO_ADDR
67253: LD_VAR 0 9
67257: PUSH
67258: FOR_TO
67259: IFFALSE 67360
// for _y = min_y to max_y do
67261: LD_ADDR_VAR 0 6
67265: PUSH
67266: DOUBLE
67267: LD_VAR 0 7
67271: DEC
67272: ST_TO_ADDR
67273: LD_VAR 0 10
67277: PUSH
67278: FOR_TO
67279: IFFALSE 67356
// begin if not ValidHex ( _x , _y ) then
67281: LD_VAR 0 5
67285: PPUSH
67286: LD_VAR 0 6
67290: PPUSH
67291: CALL_OW 488
67295: NOT
67296: IFFALSE 67300
// continue ;
67298: GO 67278
// if GetResourceTypeXY ( _x , _y ) then
67300: LD_VAR 0 5
67304: PPUSH
67305: LD_VAR 0 6
67309: PPUSH
67310: CALL_OW 283
67314: IFFALSE 67354
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67316: LD_ADDR_VAR 0 4
67320: PUSH
67321: LD_VAR 0 4
67325: PPUSH
67326: LD_VAR 0 4
67330: PUSH
67331: LD_INT 1
67333: PLUS
67334: PPUSH
67335: LD_VAR 0 5
67339: PUSH
67340: LD_VAR 0 6
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PPUSH
67349: CALL_OW 1
67353: ST_TO_ADDR
// end ;
67354: GO 67278
67356: POP
67357: POP
67358: GO 67258
67360: POP
67361: POP
// end ;
67362: LD_VAR 0 4
67366: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67367: LD_INT 0
67369: PPUSH
67370: PPUSH
67371: PPUSH
67372: PPUSH
67373: PPUSH
67374: PPUSH
67375: PPUSH
67376: PPUSH
// if not units then
67377: LD_VAR 0 1
67381: NOT
67382: IFFALSE 67386
// exit ;
67384: GO 67912
// result := UnitFilter ( units , [ f_ok ] ) ;
67386: LD_ADDR_VAR 0 3
67390: PUSH
67391: LD_VAR 0 1
67395: PPUSH
67396: LD_INT 50
67398: PUSH
67399: EMPTY
67400: LIST
67401: PPUSH
67402: CALL_OW 72
67406: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67407: LD_ADDR_VAR 0 8
67411: PUSH
67412: LD_VAR 0 1
67416: PUSH
67417: LD_INT 1
67419: ARRAY
67420: PPUSH
67421: CALL_OW 255
67425: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67426: LD_ADDR_VAR 0 10
67430: PUSH
67431: LD_INT 29
67433: PUSH
67434: LD_EXP 28
67438: PUSH
67439: LD_INT 49
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: LIST
67446: ST_TO_ADDR
// if not result then
67447: LD_VAR 0 3
67451: NOT
67452: IFFALSE 67456
// exit ;
67454: GO 67912
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67456: LD_ADDR_VAR 0 5
67460: PUSH
67461: LD_INT 81
67463: PUSH
67464: LD_VAR 0 8
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PPUSH
67473: CALL_OW 69
67477: ST_TO_ADDR
// for i in result do
67478: LD_ADDR_VAR 0 4
67482: PUSH
67483: LD_VAR 0 3
67487: PUSH
67488: FOR_IN
67489: IFFALSE 67910
// begin tag := GetTag ( i ) + 1 ;
67491: LD_ADDR_VAR 0 9
67495: PUSH
67496: LD_VAR 0 4
67500: PPUSH
67501: CALL_OW 110
67505: PUSH
67506: LD_INT 1
67508: PLUS
67509: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67510: LD_ADDR_VAR 0 7
67514: PUSH
67515: LD_VAR 0 4
67519: PPUSH
67520: CALL_OW 250
67524: PPUSH
67525: LD_VAR 0 4
67529: PPUSH
67530: CALL_OW 251
67534: PPUSH
67535: LD_INT 6
67537: PPUSH
67538: CALL 67109 0 3
67542: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67543: LD_VAR 0 4
67547: PPUSH
67548: CALL_OW 247
67552: PUSH
67553: LD_INT 2
67555: EQUAL
67556: PUSH
67557: LD_VAR 0 7
67561: AND
67562: PUSH
67563: LD_VAR 0 4
67567: PPUSH
67568: CALL_OW 264
67572: PUSH
67573: LD_VAR 0 10
67577: IN
67578: NOT
67579: AND
67580: IFFALSE 67619
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67582: LD_VAR 0 4
67586: PPUSH
67587: LD_VAR 0 7
67591: PUSH
67592: LD_INT 1
67594: ARRAY
67595: PUSH
67596: LD_INT 1
67598: ARRAY
67599: PPUSH
67600: LD_VAR 0 7
67604: PUSH
67605: LD_INT 1
67607: ARRAY
67608: PUSH
67609: LD_INT 2
67611: ARRAY
67612: PPUSH
67613: CALL_OW 116
67617: GO 67908
// if path > tag then
67619: LD_VAR 0 2
67623: PUSH
67624: LD_VAR 0 9
67628: GREATER
67629: IFFALSE 67837
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67631: LD_ADDR_VAR 0 6
67635: PUSH
67636: LD_VAR 0 5
67640: PPUSH
67641: LD_INT 91
67643: PUSH
67644: LD_VAR 0 4
67648: PUSH
67649: LD_INT 8
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: LIST
67656: PPUSH
67657: CALL_OW 72
67661: ST_TO_ADDR
// if nearEnemy then
67662: LD_VAR 0 6
67666: IFFALSE 67735
// begin if GetWeapon ( i ) = ru_time_lapser then
67668: LD_VAR 0 4
67672: PPUSH
67673: CALL_OW 264
67677: PUSH
67678: LD_INT 49
67680: EQUAL
67681: IFFALSE 67709
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67683: LD_VAR 0 4
67687: PPUSH
67688: LD_VAR 0 6
67692: PPUSH
67693: LD_VAR 0 4
67697: PPUSH
67698: CALL_OW 74
67702: PPUSH
67703: CALL_OW 112
67707: GO 67733
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67709: LD_VAR 0 4
67713: PPUSH
67714: LD_VAR 0 6
67718: PPUSH
67719: LD_VAR 0 4
67723: PPUSH
67724: CALL_OW 74
67728: PPUSH
67729: CALL_OW 115
// end else
67733: GO 67835
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67735: LD_VAR 0 4
67739: PPUSH
67740: LD_VAR 0 2
67744: PUSH
67745: LD_VAR 0 9
67749: ARRAY
67750: PUSH
67751: LD_INT 1
67753: ARRAY
67754: PPUSH
67755: LD_VAR 0 2
67759: PUSH
67760: LD_VAR 0 9
67764: ARRAY
67765: PUSH
67766: LD_INT 2
67768: ARRAY
67769: PPUSH
67770: CALL_OW 297
67774: PUSH
67775: LD_INT 6
67777: GREATER
67778: IFFALSE 67821
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67780: LD_VAR 0 4
67784: PPUSH
67785: LD_VAR 0 2
67789: PUSH
67790: LD_VAR 0 9
67794: ARRAY
67795: PUSH
67796: LD_INT 1
67798: ARRAY
67799: PPUSH
67800: LD_VAR 0 2
67804: PUSH
67805: LD_VAR 0 9
67809: ARRAY
67810: PUSH
67811: LD_INT 2
67813: ARRAY
67814: PPUSH
67815: CALL_OW 114
67819: GO 67835
// SetTag ( i , tag ) ;
67821: LD_VAR 0 4
67825: PPUSH
67826: LD_VAR 0 9
67830: PPUSH
67831: CALL_OW 109
// end else
67835: GO 67908
// if enemy then
67837: LD_VAR 0 5
67841: IFFALSE 67908
// begin if GetWeapon ( i ) = ru_time_lapser then
67843: LD_VAR 0 4
67847: PPUSH
67848: CALL_OW 264
67852: PUSH
67853: LD_INT 49
67855: EQUAL
67856: IFFALSE 67884
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67858: LD_VAR 0 4
67862: PPUSH
67863: LD_VAR 0 5
67867: PPUSH
67868: LD_VAR 0 4
67872: PPUSH
67873: CALL_OW 74
67877: PPUSH
67878: CALL_OW 112
67882: GO 67908
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67884: LD_VAR 0 4
67888: PPUSH
67889: LD_VAR 0 5
67893: PPUSH
67894: LD_VAR 0 4
67898: PPUSH
67899: CALL_OW 74
67903: PPUSH
67904: CALL_OW 115
// end ; end ;
67908: GO 67488
67910: POP
67911: POP
// end ;
67912: LD_VAR 0 3
67916: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67917: LD_INT 0
67919: PPUSH
67920: PPUSH
67921: PPUSH
// if not unit or IsInUnit ( unit ) then
67922: LD_VAR 0 1
67926: NOT
67927: PUSH
67928: LD_VAR 0 1
67932: PPUSH
67933: CALL_OW 310
67937: OR
67938: IFFALSE 67942
// exit ;
67940: GO 68033
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67942: LD_ADDR_VAR 0 4
67946: PUSH
67947: LD_VAR 0 1
67951: PPUSH
67952: CALL_OW 250
67956: PPUSH
67957: LD_VAR 0 2
67961: PPUSH
67962: LD_INT 1
67964: PPUSH
67965: CALL_OW 272
67969: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67970: LD_ADDR_VAR 0 5
67974: PUSH
67975: LD_VAR 0 1
67979: PPUSH
67980: CALL_OW 251
67984: PPUSH
67985: LD_VAR 0 2
67989: PPUSH
67990: LD_INT 1
67992: PPUSH
67993: CALL_OW 273
67997: ST_TO_ADDR
// if ValidHex ( x , y ) then
67998: LD_VAR 0 4
68002: PPUSH
68003: LD_VAR 0 5
68007: PPUSH
68008: CALL_OW 488
68012: IFFALSE 68033
// ComTurnXY ( unit , x , y ) ;
68014: LD_VAR 0 1
68018: PPUSH
68019: LD_VAR 0 4
68023: PPUSH
68024: LD_VAR 0 5
68028: PPUSH
68029: CALL_OW 118
// end ;
68033: LD_VAR 0 3
68037: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68038: LD_INT 0
68040: PPUSH
68041: PPUSH
// result := false ;
68042: LD_ADDR_VAR 0 3
68046: PUSH
68047: LD_INT 0
68049: ST_TO_ADDR
// if not units then
68050: LD_VAR 0 2
68054: NOT
68055: IFFALSE 68059
// exit ;
68057: GO 68104
// for i in units do
68059: LD_ADDR_VAR 0 4
68063: PUSH
68064: LD_VAR 0 2
68068: PUSH
68069: FOR_IN
68070: IFFALSE 68102
// if See ( side , i ) then
68072: LD_VAR 0 1
68076: PPUSH
68077: LD_VAR 0 4
68081: PPUSH
68082: CALL_OW 292
68086: IFFALSE 68100
// begin result := true ;
68088: LD_ADDR_VAR 0 3
68092: PUSH
68093: LD_INT 1
68095: ST_TO_ADDR
// exit ;
68096: POP
68097: POP
68098: GO 68104
// end ;
68100: GO 68069
68102: POP
68103: POP
// end ;
68104: LD_VAR 0 3
68108: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68109: LD_INT 0
68111: PPUSH
68112: PPUSH
68113: PPUSH
68114: PPUSH
// if not unit or not points then
68115: LD_VAR 0 1
68119: NOT
68120: PUSH
68121: LD_VAR 0 2
68125: NOT
68126: OR
68127: IFFALSE 68131
// exit ;
68129: GO 68221
// dist := 99999 ;
68131: LD_ADDR_VAR 0 5
68135: PUSH
68136: LD_INT 99999
68138: ST_TO_ADDR
// for i in points do
68139: LD_ADDR_VAR 0 4
68143: PUSH
68144: LD_VAR 0 2
68148: PUSH
68149: FOR_IN
68150: IFFALSE 68219
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68152: LD_ADDR_VAR 0 6
68156: PUSH
68157: LD_VAR 0 1
68161: PPUSH
68162: LD_VAR 0 4
68166: PUSH
68167: LD_INT 1
68169: ARRAY
68170: PPUSH
68171: LD_VAR 0 4
68175: PUSH
68176: LD_INT 2
68178: ARRAY
68179: PPUSH
68180: CALL_OW 297
68184: ST_TO_ADDR
// if tmpDist < dist then
68185: LD_VAR 0 6
68189: PUSH
68190: LD_VAR 0 5
68194: LESS
68195: IFFALSE 68217
// begin result := i ;
68197: LD_ADDR_VAR 0 3
68201: PUSH
68202: LD_VAR 0 4
68206: ST_TO_ADDR
// dist := tmpDist ;
68207: LD_ADDR_VAR 0 5
68211: PUSH
68212: LD_VAR 0 6
68216: ST_TO_ADDR
// end ; end ;
68217: GO 68149
68219: POP
68220: POP
// end ;
68221: LD_VAR 0 3
68225: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68226: LD_INT 0
68228: PPUSH
// uc_side := side ;
68229: LD_ADDR_OWVAR 20
68233: PUSH
68234: LD_VAR 0 1
68238: ST_TO_ADDR
// uc_nation := 3 ;
68239: LD_ADDR_OWVAR 21
68243: PUSH
68244: LD_INT 3
68246: ST_TO_ADDR
// vc_chassis := 25 ;
68247: LD_ADDR_OWVAR 37
68251: PUSH
68252: LD_INT 25
68254: ST_TO_ADDR
// vc_engine := engine_siberite ;
68255: LD_ADDR_OWVAR 39
68259: PUSH
68260: LD_INT 3
68262: ST_TO_ADDR
// vc_control := control_computer ;
68263: LD_ADDR_OWVAR 38
68267: PUSH
68268: LD_INT 3
68270: ST_TO_ADDR
// vc_weapon := 59 ;
68271: LD_ADDR_OWVAR 40
68275: PUSH
68276: LD_INT 59
68278: ST_TO_ADDR
// result := CreateVehicle ;
68279: LD_ADDR_VAR 0 5
68283: PUSH
68284: CALL_OW 45
68288: ST_TO_ADDR
// SetDir ( result , d ) ;
68289: LD_VAR 0 5
68293: PPUSH
68294: LD_VAR 0 4
68298: PPUSH
68299: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68303: LD_VAR 0 5
68307: PPUSH
68308: LD_VAR 0 2
68312: PPUSH
68313: LD_VAR 0 3
68317: PPUSH
68318: LD_INT 0
68320: PPUSH
68321: CALL_OW 48
// end ;
68325: LD_VAR 0 5
68329: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68330: LD_INT 0
68332: PPUSH
68333: PPUSH
68334: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68335: LD_ADDR_VAR 0 2
68339: PUSH
68340: LD_INT 0
68342: PUSH
68343: LD_INT 0
68345: PUSH
68346: LD_INT 0
68348: PUSH
68349: LD_INT 0
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68358: LD_VAR 0 1
68362: NOT
68363: PUSH
68364: LD_VAR 0 1
68368: PPUSH
68369: CALL_OW 264
68373: PUSH
68374: LD_INT 12
68376: PUSH
68377: LD_INT 51
68379: PUSH
68380: LD_INT 32
68382: PUSH
68383: LD_EXP 25
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: IN
68394: NOT
68395: OR
68396: IFFALSE 68400
// exit ;
68398: GO 68498
// for i := 1 to 3 do
68400: LD_ADDR_VAR 0 3
68404: PUSH
68405: DOUBLE
68406: LD_INT 1
68408: DEC
68409: ST_TO_ADDR
68410: LD_INT 3
68412: PUSH
68413: FOR_TO
68414: IFFALSE 68496
// begin tmp := GetCargo ( cargo , i ) ;
68416: LD_ADDR_VAR 0 4
68420: PUSH
68421: LD_VAR 0 1
68425: PPUSH
68426: LD_VAR 0 3
68430: PPUSH
68431: CALL_OW 289
68435: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68436: LD_ADDR_VAR 0 2
68440: PUSH
68441: LD_VAR 0 2
68445: PPUSH
68446: LD_VAR 0 3
68450: PPUSH
68451: LD_VAR 0 4
68455: PPUSH
68456: CALL_OW 1
68460: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68461: LD_ADDR_VAR 0 2
68465: PUSH
68466: LD_VAR 0 2
68470: PPUSH
68471: LD_INT 4
68473: PPUSH
68474: LD_VAR 0 2
68478: PUSH
68479: LD_INT 4
68481: ARRAY
68482: PUSH
68483: LD_VAR 0 4
68487: PLUS
68488: PPUSH
68489: CALL_OW 1
68493: ST_TO_ADDR
// end ;
68494: GO 68413
68496: POP
68497: POP
// end ;
68498: LD_VAR 0 2
68502: RET
// export function Length ( array ) ; begin
68503: LD_INT 0
68505: PPUSH
// result := array + 0 ;
68506: LD_ADDR_VAR 0 2
68510: PUSH
68511: LD_VAR 0 1
68515: PUSH
68516: LD_INT 0
68518: PLUS
68519: ST_TO_ADDR
// end ;
68520: LD_VAR 0 2
68524: RET
// export function PrepareArray ( array ) ; begin
68525: LD_INT 0
68527: PPUSH
// result := array diff 0 ;
68528: LD_ADDR_VAR 0 2
68532: PUSH
68533: LD_VAR 0 1
68537: PUSH
68538: LD_INT 0
68540: DIFF
68541: ST_TO_ADDR
// if not result [ 1 ] then
68542: LD_VAR 0 2
68546: PUSH
68547: LD_INT 1
68549: ARRAY
68550: NOT
68551: IFFALSE 68571
// result := Delete ( result , 1 ) ;
68553: LD_ADDR_VAR 0 2
68557: PUSH
68558: LD_VAR 0 2
68562: PPUSH
68563: LD_INT 1
68565: PPUSH
68566: CALL_OW 3
68570: ST_TO_ADDR
// end ; end_of_file
68571: LD_VAR 0 2
68575: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68576: LD_VAR 0 1
68580: PUSH
68581: LD_INT 200
68583: DOUBLE
68584: GREATEREQUAL
68585: IFFALSE 68593
68587: LD_INT 299
68589: DOUBLE
68590: LESSEQUAL
68591: IFTRUE 68595
68593: GO 68627
68595: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68596: LD_VAR 0 1
68600: PPUSH
68601: LD_VAR 0 2
68605: PPUSH
68606: LD_VAR 0 3
68610: PPUSH
68611: LD_VAR 0 4
68615: PPUSH
68616: LD_VAR 0 5
68620: PPUSH
68621: CALL 23427 0 5
68625: GO 68704
68627: LD_INT 300
68629: DOUBLE
68630: GREATEREQUAL
68631: IFFALSE 68639
68633: LD_INT 399
68635: DOUBLE
68636: LESSEQUAL
68637: IFTRUE 68641
68639: GO 68703
68641: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68642: LD_VAR 0 1
68646: PPUSH
68647: LD_VAR 0 2
68651: PPUSH
68652: LD_VAR 0 3
68656: PPUSH
68657: LD_VAR 0 4
68661: PPUSH
68662: LD_VAR 0 5
68666: PPUSH
68667: LD_VAR 0 6
68671: PPUSH
68672: LD_VAR 0 7
68676: PPUSH
68677: LD_VAR 0 8
68681: PPUSH
68682: LD_VAR 0 9
68686: PPUSH
68687: LD_VAR 0 10
68691: PPUSH
68692: LD_VAR 0 11
68696: PPUSH
68697: CALL 19756 0 11
68701: GO 68704
68703: POP
// end ;
68704: PPOPN 11
68706: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68707: LD_VAR 0 1
68711: PPUSH
68712: LD_VAR 0 2
68716: PPUSH
68717: LD_VAR 0 3
68721: PPUSH
68722: LD_VAR 0 4
68726: PPUSH
68727: LD_VAR 0 5
68731: PPUSH
68732: CALL 23163 0 5
// end ; end_of_file
68736: PPOPN 5
68738: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68739: LD_VAR 0 1
68743: PPUSH
68744: LD_VAR 0 2
68748: PPUSH
68749: LD_VAR 0 3
68753: PPUSH
68754: LD_VAR 0 4
68758: PPUSH
68759: LD_VAR 0 5
68763: PPUSH
68764: LD_VAR 0 6
68768: PPUSH
68769: CALL 7449 0 6
// end ;
68773: PPOPN 6
68775: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68776: LD_INT 0
68778: PPUSH
// begin if not units then
68779: LD_VAR 0 1
68783: NOT
68784: IFFALSE 68788
// exit ;
68786: GO 68788
// end ;
68788: PPOPN 7
68790: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68791: CALL 7420 0 0
// end ;
68795: PPOPN 1
68797: END
