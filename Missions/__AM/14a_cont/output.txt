// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 54365 0 9
// PrepareAmerican ;
  46: CALL 4072 0 0
// PrepareAlliance ;
  50: CALL 226 0 0
// Action ;
  54: CALL 908 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: EMPTY
 158: LIST
 159: LIST
 160: LIST
 161: PUSH
 162: LD_OWVAR 67
 166: ARRAY
 167: ST_TO_ADDR
// canEnd := false ;
 168: LD_ADDR_EXP 10
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// missionTime := 0 0$00 ;
 176: LD_ADDR_EXP 11
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// killCounter := 0 ;
 184: LD_ADDR_EXP 12
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// bunkerCounter := 0 ;
 192: LD_ADDR_EXP 13
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// end ;
 200: LD_VAR 0 1
 204: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 205: LD_EXP 13
 209: PUSH
 210: LD_INT 3
 212: GREATEREQUAL
 213: IFFALSE 225
 215: GO 217
 217: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 218: LD_STRING ACH_ONEMANARMY
 220: PPUSH
 221: CALL_OW 543
 225: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 226: LD_INT 0
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// uc_side := 7 ;
 235: LD_ADDR_OWVAR 20
 239: PUSH
 240: LD_INT 7
 242: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 243: LD_ADDR_EXP 14
 247: PUSH
 248: LD_STRING JMM
 250: PPUSH
 251: LD_EXP 1
 255: NOT
 256: PPUSH
 257: LD_STRING 14a_
 259: PPUSH
 260: CALL 21750 0 3
 264: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 265: LD_ADDR_EXP 15
 269: PUSH
 270: LD_STRING Burlak
 272: PPUSH
 273: LD_EXP 1
 277: NOT
 278: PPUSH
 279: LD_STRING 14a_
 281: PPUSH
 282: CALL 21750 0 3
 286: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 287: LD_ADDR_EXP 16
 291: PUSH
 292: LD_STRING Joan
 294: PPUSH
 295: LD_EXP 1
 299: NOT
 300: PPUSH
 301: LD_STRING 13a_
 303: PPUSH
 304: CALL 21750 0 3
 308: ST_TO_ADDR
// if not Joan then
 309: LD_EXP 16
 313: NOT
 314: IFFALSE 447
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 316: LD_ADDR_VAR 0 2
 320: PUSH
 321: LD_STRING 13a_others
 323: PPUSH
 324: CALL_OW 31
 328: ST_TO_ADDR
// if tmp then
 329: LD_VAR 0 2
 333: IFFALSE 409
// begin for i in tmp do
 335: LD_ADDR_VAR 0 3
 339: PUSH
 340: LD_VAR 0 2
 344: PUSH
 345: FOR_IN
 346: IFFALSE 407
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 348: LD_VAR 0 3
 352: PPUSH
 353: CALL_OW 257
 357: PUSH
 358: LD_INT 4
 360: EQUAL
 361: PUSH
 362: LD_VAR 0 3
 366: PPUSH
 367: CALL_OW 258
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: PUSH
 377: LD_VAR 0 3
 381: PPUSH
 382: CALL_OW 248
 386: PUSH
 387: LD_INT 3
 389: EQUAL
 390: AND
 391: IFFALSE 405
// begin RuSci := i ;
 393: LD_ADDR_EXP 17
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// break ;
 403: GO 407
// end ;
 405: GO 345
 407: POP
 408: POP
// end ; if not RuSci then
 409: LD_EXP 17
 413: NOT
 414: IFFALSE 447
// begin uc_nation := 3 ;
 416: LD_ADDR_OWVAR 21
 420: PUSH
 421: LD_INT 3
 423: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 424: LD_INT 1
 426: PPUSH
 427: LD_INT 4
 429: PPUSH
 430: LD_INT 10
 432: PPUSH
 433: CALL_OW 380
// RuSci := CreateHuman ;
 437: LD_ADDR_EXP 17
 441: PUSH
 442: CALL_OW 44
 446: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 447: LD_ADDR_VAR 0 6
 451: PUSH
 452: LD_STRING 14a_JMMVeh
 454: PPUSH
 455: LD_INT 5
 457: PUSH
 458: LD_INT 3
 460: PUSH
 461: LD_INT 1
 463: PUSH
 464: LD_INT 7
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: LIST
 478: LIST
 479: LIST
 480: PPUSH
 481: CALL_OW 30
 485: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 486: LD_ADDR_VAR 0 7
 490: PUSH
 491: LD_STRING 14a_BurlakVeh
 493: PPUSH
 494: LD_INT 22
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: LD_INT 1
 502: PUSH
 503: LD_INT 51
 505: PUSH
 506: LD_INT 0
 508: PUSH
 509: LD_INT 3
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: PPUSH
 520: CALL_OW 30
 524: ST_TO_ADDR
// uc_direction := 4 ;
 525: LD_ADDR_OWVAR 24
 529: PUSH
 530: LD_INT 4
 532: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 6
 542: PUSH
 543: LD_INT 6
 545: ARRAY
 546: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 547: LD_VAR 0 6
 551: PUSH
 552: LD_INT 1
 554: ARRAY
 555: PPUSH
 556: LD_VAR 0 6
 560: PUSH
 561: LD_INT 2
 563: ARRAY
 564: PPUSH
 565: LD_VAR 0 6
 569: PUSH
 570: LD_INT 3
 572: ARRAY
 573: PPUSH
 574: LD_VAR 0 6
 578: PUSH
 579: LD_INT 4
 581: ARRAY
 582: PPUSH
 583: LD_INT 60
 585: PPUSH
 586: LD_INT 80
 588: PPUSH
 589: CALL_OW 12
 593: PPUSH
 594: CALL 26574 0 5
// JMMVeh := CreateVehicle ;
 598: LD_ADDR_VAR 0 4
 602: PUSH
 603: CALL_OW 45
 607: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 608: LD_VAR 0 4
 612: PPUSH
 613: LD_INT 1
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL 56534 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 623: LD_VAR 0 6
 627: PUSH
 628: LD_INT 5
 630: ARRAY
 631: PUSH
 632: LD_INT 0
 634: NONEQUAL
 635: IFFALSE 655
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 637: LD_VAR 0 4
 641: PPUSH
 642: LD_VAR 0 6
 646: PUSH
 647: LD_INT 5
 649: ARRAY
 650: PPUSH
 651: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 655: LD_EXP 14
 659: PPUSH
 660: LD_VAR 0 4
 664: PPUSH
 665: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 669: LD_ADDR_OWVAR 21
 673: PUSH
 674: LD_VAR 0 7
 678: PUSH
 679: LD_INT 6
 681: ARRAY
 682: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 683: LD_VAR 0 7
 687: PUSH
 688: LD_INT 1
 690: ARRAY
 691: PPUSH
 692: LD_VAR 0 7
 696: PUSH
 697: LD_INT 2
 699: ARRAY
 700: PPUSH
 701: LD_VAR 0 7
 705: PUSH
 706: LD_INT 3
 708: ARRAY
 709: PPUSH
 710: LD_VAR 0 7
 714: PUSH
 715: LD_INT 4
 717: ARRAY
 718: PPUSH
 719: LD_INT 60
 721: PPUSH
 722: LD_INT 80
 724: PPUSH
 725: CALL_OW 12
 729: PPUSH
 730: CALL 26574 0 5
// BurlakVeh := CreateVehicle ;
 734: LD_ADDR_VAR 0 5
 738: PUSH
 739: CALL_OW 45
 743: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 744: LD_VAR 0 5
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL 56534 0 3
 759: NOT
 760: IFFALSE 780
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 762: LD_VAR 0 5
 766: PPUSH
 767: LD_INT 233
 769: PPUSH
 770: LD_INT 85
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 780: LD_VAR 0 7
 784: PUSH
 785: LD_INT 5
 787: ARRAY
 788: PUSH
 789: LD_INT 0
 791: NONEQUAL
 792: IFFALSE 812
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 794: LD_VAR 0 5
 798: PPUSH
 799: LD_VAR 0 7
 803: PUSH
 804: LD_INT 5
 806: ARRAY
 807: PPUSH
 808: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 812: LD_EXP 15
 816: PPUSH
 817: LD_VAR 0 5
 821: PPUSH
 822: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] ] [ Difficulty ] ;
 826: LD_ADDR_VAR 0 2
 830: PUSH
 831: LD_INT 178
 833: PUSH
 834: LD_INT 91
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 137
 843: PUSH
 844: LD_INT 83
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 157
 853: PUSH
 854: LD_INT 75
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 872: LD_INT 4
 874: PPUSH
 875: LD_INT 4
 877: PPUSH
 878: LD_VAR 0 2
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: PPUSH
 887: LD_VAR 0 2
 891: PUSH
 892: LD_INT 2
 894: ARRAY
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 58
// end ; end_of_file
 903: LD_VAR 0 1
 907: RET
// export function Action ; begin
 908: LD_INT 0
 910: PPUSH
// InGameOn ;
 911: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 915: LD_INT 221
 917: PPUSH
 918: LD_INT 80
 920: PPUSH
 921: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 925: LD_EXP 14
 929: PUSH
 930: LD_EXP 15
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PPUSH
 939: LD_INT 217
 941: PPUSH
 942: LD_INT 79
 944: PPUSH
 945: CALL_OW 111
// wait ( 0 0$7 ) ;
 949: LD_INT 245
 951: PPUSH
 952: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 956: LD_EXP 14
 960: PUSH
 961: LD_EXP 15
 965: PUSH
 966: EMPTY
 967: LIST
 968: LIST
 969: PPUSH
 970: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 974: LD_EXP 15
 978: PPUSH
 979: LD_STRING D2-Bur-1
 981: PPUSH
 982: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
 986: LD_EXP 14
 990: PPUSH
 991: LD_STRING D2-JMM-1
 993: PPUSH
 994: CALL_OW 88
// wait ( 0 0$0.5 ) ;
 998: LD_INT 18
1000: PPUSH
1001: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1005: LD_EXP 15
1009: PPUSH
1010: LD_EXP 14
1014: PPUSH
1015: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1019: LD_EXP 15
1023: PPUSH
1024: LD_STRING D2-Bur-2
1026: PPUSH
1027: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1031: LD_EXP 15
1035: PPUSH
1036: LD_INT 21
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: PPUSH
1051: LD_EXP 15
1055: PPUSH
1056: CALL_OW 74
1060: PPUSH
1061: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1065: LD_EXP 14
1069: PPUSH
1070: LD_INT 21
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PPUSH
1080: CALL_OW 69
1084: PPUSH
1085: LD_EXP 14
1089: PPUSH
1090: CALL_OW 74
1094: PPUSH
1095: CALL_OW 120
// wait ( 0 0$1 ) ;
1099: LD_INT 35
1101: PPUSH
1102: CALL_OW 67
// InGameOff ;
1106: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1110: LD_STRING MArtPickup
1112: PPUSH
1113: CALL_OW 337
// end ;
1117: LD_VAR 0 1
1121: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1122: LD_EXP 22
1126: PPUSH
1127: LD_INT 101
1129: PUSH
1130: LD_INT 7
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 72
1141: PUSH
1142: LD_EXP 8
1146: NOT
1147: AND
1148: IFFALSE 1177
1150: GO 1152
1152: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1153: LD_EXP 15
1157: PPUSH
1158: LD_STRING D3-Bur-1
1160: PPUSH
1161: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1165: LD_EXP 14
1169: PPUSH
1170: LD_STRING D3-JMM-1
1172: PPUSH
1173: CALL_OW 88
// end ;
1177: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1178: LD_INT 5
1180: PPUSH
1181: LD_INT 22
1183: PUSH
1184: LD_INT 7
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PPUSH
1191: CALL_OW 70
1195: IFFALSE 1526
1197: GO 1199
1199: DISABLE
// begin wait ( 0 0$3 ) ;
1200: LD_INT 105
1202: PPUSH
1203: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1207: LD_INT 139
1209: PPUSH
1210: LD_INT 43
1212: PPUSH
1213: LD_INT 7
1215: PPUSH
1216: LD_INT 20
1218: NEG
1219: PPUSH
1220: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1224: LD_INT 139
1226: PPUSH
1227: LD_INT 43
1229: PPUSH
1230: LD_INT 7
1232: PPUSH
1233: CALL_OW 331
// DialogueOn ;
1237: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1241: LD_EXP 14
1245: PPUSH
1246: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1250: LD_EXP 14
1254: PPUSH
1255: LD_STRING D3a-JMM-1
1257: PPUSH
1258: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1262: LD_EXP 15
1266: PPUSH
1267: LD_STRING D3a-Bur-1
1269: PPUSH
1270: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1274: LD_EXP 14
1278: PPUSH
1279: LD_STRING D3a-JMM-2
1281: PPUSH
1282: CALL_OW 88
// if Joan then
1286: LD_EXP 16
1290: IFFALSE 1306
// SayRadio ( Joan , D3a-Joan-2 ) else
1292: LD_EXP 16
1296: PPUSH
1297: LD_STRING D3a-Joan-2
1299: PPUSH
1300: CALL_OW 94
1304: GO 1318
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1306: LD_EXP 17
1310: PPUSH
1311: LD_STRING D3a-RSci1-2
1313: PPUSH
1314: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1318: LD_EXP 18
1322: PPUSH
1323: LD_STRING D3a-Huck-2
1325: PPUSH
1326: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1330: LD_EXP 19
1334: PPUSH
1335: LD_STRING D3a-Pow-2
1337: PPUSH
1338: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1342: LD_EXP 18
1346: PPUSH
1347: LD_STRING D3a-Huck-3
1349: PPUSH
1350: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1354: LD_EXP 19
1358: PPUSH
1359: LD_STRING D3a-Pow-3
1361: PPUSH
1362: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1366: LD_EXP 18
1370: PPUSH
1371: LD_STRING D3a-Huck-4
1373: PPUSH
1374: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1378: LD_EXP 14
1382: PPUSH
1383: LD_STRING D3a-JMM-4
1385: PPUSH
1386: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1390: LD_EXP 15
1394: PPUSH
1395: LD_STRING D3a-Bur-4
1397: PPUSH
1398: CALL_OW 88
// if Joan then
1402: LD_EXP 16
1406: IFFALSE 1422
// SayRadio ( Joan , D3a-Joan-4 ) else
1408: LD_EXP 16
1412: PPUSH
1413: LD_STRING D3a-Joan-4
1415: PPUSH
1416: CALL_OW 94
1420: GO 1434
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1422: LD_EXP 17
1426: PPUSH
1427: LD_STRING D3a-RSci1-4
1429: PPUSH
1430: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1434: LD_INT 133
1436: PPUSH
1437: LD_INT 43
1439: PPUSH
1440: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1444: LD_INT 10
1446: PPUSH
1447: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1451: LD_EXP 14
1455: PPUSH
1456: LD_STRING D3a-JMM-5
1458: PPUSH
1459: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1463: LD_EXP 15
1467: PPUSH
1468: LD_STRING D3a-Bur-5
1470: PPUSH
1471: CALL_OW 88
// DialogueOff ;
1475: CALL_OW 7
// seenBase := true ;
1479: LD_ADDR_EXP 8
1483: PUSH
1484: LD_INT 1
1486: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
1487: LD_INT 525
1489: PUSH
1490: LD_INT 420
1492: PUSH
1493: LD_INT 315
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: LIST
1500: PUSH
1501: LD_OWVAR 67
1505: ARRAY
1506: PPUSH
1507: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1511: LD_EXP 21
1515: PPUSH
1516: LD_INT 142
1518: PPUSH
1519: LD_INT 52
1521: PPUSH
1522: CALL_OW 116
// end ;
1526: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1527: LD_EXP 8
1531: NOT
1532: PUSH
1533: LD_EXP 4
1537: NOT
1538: AND
1539: IFFALSE 1559
1541: GO 1543
1543: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1544: LD_EXP 21
1548: PPUSH
1549: LD_INT 142
1551: PPUSH
1552: LD_INT 52
1554: PPUSH
1555: CALL_OW 116
1559: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1560: LD_INT 0
1562: PPUSH
1563: PPUSH
// contaminateTime := tick ;
1564: LD_ADDR_EXP 3
1568: PUSH
1569: LD_OWVAR 1
1573: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1574: LD_INT 175
1576: PPUSH
1577: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1581: LD_ADDR_VAR 0 5
1585: PUSH
1586: LD_INT 4
1588: PPUSH
1589: CALL_OW 469
1593: ST_TO_ADDR
// if art then
1594: LD_VAR 0 5
1598: IFFALSE 1637
// if art [ 1 ] = 157 and art [ 2 ] = 75 then
1600: LD_VAR 0 5
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PUSH
1609: LD_INT 157
1611: EQUAL
1612: PUSH
1613: LD_VAR 0 5
1617: PUSH
1618: LD_INT 2
1620: ARRAY
1621: PUSH
1622: LD_INT 75
1624: EQUAL
1625: AND
1626: IFFALSE 1637
// begin YouLost ( Artefact ) ;
1628: LD_STRING Artefact
1630: PPUSH
1631: CALL_OW 104
// exit ;
1635: GO 1789
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1637: LD_EXP 14
1641: PPUSH
1642: CALL_OW 302
1646: PUSH
1647: LD_EXP 15
1651: PPUSH
1652: CALL_OW 302
1656: AND
1657: IFFALSE 1734
// begin DialogueOn ;
1659: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1663: LD_EXP 14
1667: PPUSH
1668: LD_STRING D6a-JMM-1
1670: PPUSH
1671: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1675: LD_EXP 15
1679: PPUSH
1680: LD_STRING D6a-Bur-1
1682: PPUSH
1683: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1687: LD_EXP 14
1691: PPUSH
1692: LD_STRING D6c-JMM-1
1694: PPUSH
1695: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1699: LD_EXP 15
1703: PPUSH
1704: LD_STRING D6c-Bur-1
1706: PPUSH
1707: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1711: LD_EXP 14
1715: PPUSH
1716: LD_STRING D6c-JMM-2
1718: PPUSH
1719: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1723: LD_STRING MBase
1725: PPUSH
1726: CALL_OW 337
// DialogueOff ;
1730: CALL_OW 7
// end ; bombExploded := true ;
1734: LD_ADDR_EXP 4
1738: PUSH
1739: LD_INT 1
1741: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ) ;
1742: LD_INT 6300
1744: PUSH
1745: LD_INT 5250
1747: PUSH
1748: LD_INT 4200
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: PUSH
1756: LD_OWVAR 67
1760: ARRAY
1761: PPUSH
1762: CALL_OW 67
// if IsOk ( JMM ) then
1766: LD_EXP 14
1770: PPUSH
1771: CALL_OW 302
1775: IFFALSE 1789
// Say ( JMM , D8-JMM-1 ) ;
1777: LD_EXP 14
1781: PPUSH
1782: LD_STRING D8-JMM-1
1784: PPUSH
1785: CALL_OW 88
// end ;
1789: LD_VAR 0 4
1793: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1794: LD_EXP 9
1798: PUSH
1799: LD_EXP 7
1803: NOT
1804: AND
1805: PUSH
1806: LD_EXP 4
1810: AND
1811: IFFALSE 1866
1813: GO 1815
1815: DISABLE
// begin enable ;
1816: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1817: LD_INT 9
1819: PPUSH
1820: LD_INT 22
1822: PUSH
1823: LD_INT 7
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PPUSH
1830: CALL_OW 70
1834: IFFALSE 1852
// stevensTimer := stevensTimer - 0 0$30 else
1836: LD_ADDR_EXP 9
1840: PUSH
1841: LD_EXP 9
1845: PUSH
1846: LD_INT 1050
1848: MINUS
1849: ST_TO_ADDR
1850: GO 1866
// stevensTimer := stevensTimer - 0 0$1 ;
1852: LD_ADDR_EXP 9
1856: PUSH
1857: LD_EXP 9
1861: PUSH
1862: LD_INT 35
1864: MINUS
1865: ST_TO_ADDR
// end ;
1866: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1867: LD_EXP 9
1871: PUSH
1872: LD_INT 0
1874: LESSEQUAL
1875: PUSH
1876: LD_EXP 7
1880: NOT
1881: AND
1882: IFFALSE 2046
1884: GO 1886
1886: DISABLE
1887: LD_INT 0
1889: PPUSH
1890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1891: LD_ADDR_VAR 0 2
1895: PUSH
1896: LD_INT 22
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 25
1908: PUSH
1909: LD_INT 4
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PPUSH
1920: CALL_OW 69
1924: ST_TO_ADDR
// for i in tmp do
1925: LD_ADDR_VAR 0 1
1929: PUSH
1930: LD_VAR 0 2
1934: PUSH
1935: FOR_IN
1936: IFFALSE 1989
// begin if IsInUnit ( i ) then
1938: LD_VAR 0 1
1942: PPUSH
1943: CALL_OW 310
1947: IFFALSE 1960
// ComExitBuilding ( i ) else
1949: LD_VAR 0 1
1953: PPUSH
1954: CALL_OW 122
1958: GO 1987
// if not HasTask ( i ) then
1960: LD_VAR 0 1
1964: PPUSH
1965: CALL_OW 314
1969: NOT
1970: IFFALSE 1987
// ComMoveXY ( i , 29 , 56 ) ;
1972: LD_VAR 0 1
1976: PPUSH
1977: LD_INT 29
1979: PPUSH
1980: LD_INT 56
1982: PPUSH
1983: CALL_OW 111
// end ;
1987: GO 1935
1989: POP
1990: POP
// repeat wait ( 0 0$1 ) ;
1991: LD_INT 35
1993: PPUSH
1994: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1998: LD_INT 8
2000: PPUSH
2001: LD_INT 22
2003: PUSH
2004: LD_INT 1
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 25
2013: PUSH
2014: LD_INT 4
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PPUSH
2025: CALL_OW 70
2029: IFFALSE 1991
// if planCaptured then
2031: LD_EXP 7
2035: IFFALSE 2039
// exit ;
2037: GO 2046
// YouLost ( Time ) ;
2039: LD_STRING Time
2041: PPUSH
2042: CALL_OW 104
// end ;
2046: PPOPN 2
2048: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2049: LD_INT 22
2051: PUSH
2052: LD_INT 7
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: LD_INT 92
2061: PUSH
2062: LD_INT 142
2064: PUSH
2065: LD_INT 52
2067: PUSH
2068: LD_INT 27
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PPUSH
2081: CALL_OW 69
2085: PUSH
2086: LD_EXP 3
2090: PUSH
2091: LD_INT 6000
2093: PLUS
2094: PUSH
2095: LD_OWVAR 1
2099: GREATER
2100: AND
2101: PUSH
2102: LD_EXP 4
2106: AND
2107: IFFALSE 2162
2109: GO 2111
2111: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2112: LD_EXP 14
2116: PUSH
2117: LD_EXP 15
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PPUSH
2126: CALL_OW 85
// DialogueOn ;
2130: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2134: LD_EXP 14
2138: PPUSH
2139: LD_STRING D6b-JMM-1
2141: PPUSH
2142: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2146: LD_EXP 15
2150: PPUSH
2151: LD_STRING D6b-Bur-1
2153: PPUSH
2154: CALL_OW 88
// DialogueOff ;
2158: CALL_OW 7
// end ;
2162: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2163: LD_EXP 15
2167: PPUSH
2168: LD_INT 142
2170: PPUSH
2171: LD_INT 52
2173: PPUSH
2174: CALL_OW 297
2178: PUSH
2179: LD_INT 25
2181: LESS
2182: PUSH
2183: LD_EXP 15
2187: PPUSH
2188: CALL_OW 310
2192: PPUSH
2193: LD_INT 142
2195: PPUSH
2196: LD_INT 52
2198: PPUSH
2199: CALL_OW 297
2203: PUSH
2204: LD_INT 25
2206: LESS
2207: OR
2208: PUSH
2209: LD_EXP 15
2213: PPUSH
2214: CALL_OW 256
2218: PUSH
2219: LD_INT 1000
2221: LESS
2222: AND
2223: PUSH
2224: LD_EXP 3
2228: PUSH
2229: LD_INT 6000
2231: PLUS
2232: PUSH
2233: LD_OWVAR 1
2237: GREATER
2238: AND
2239: PUSH
2240: LD_EXP 4
2244: AND
2245: IFFALSE 2278
2247: GO 2249
2249: DISABLE
// begin DialogueOn ;
2250: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2254: LD_EXP 15
2258: PPUSH
2259: LD_STRING D7-Bur-1
2261: PPUSH
2262: CALL_OW 88
// enteredContaminatedArea := true ;
2266: LD_ADDR_EXP 5
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// DialogueOff ;
2274: CALL_OW 7
// end ;
2278: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2279: LD_EXP 14
2283: PPUSH
2284: LD_INT 142
2286: PPUSH
2287: LD_INT 52
2289: PPUSH
2290: CALL_OW 297
2294: PUSH
2295: LD_INT 25
2297: LESS
2298: PUSH
2299: LD_EXP 14
2303: PPUSH
2304: CALL_OW 310
2308: PPUSH
2309: LD_INT 142
2311: PPUSH
2312: LD_INT 52
2314: PPUSH
2315: CALL_OW 297
2319: PUSH
2320: LD_INT 25
2322: LESS
2323: OR
2324: PUSH
2325: LD_EXP 14
2329: PPUSH
2330: CALL_OW 256
2334: PUSH
2335: LD_INT 1000
2337: LESS
2338: AND
2339: PUSH
2340: LD_EXP 3
2344: PUSH
2345: LD_INT 6000
2347: PLUS
2348: PUSH
2349: LD_OWVAR 1
2353: GREATER
2354: AND
2355: PUSH
2356: LD_EXP 4
2360: AND
2361: IFFALSE 2394
2363: GO 2365
2365: DISABLE
// begin DialogueOn ;
2366: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2370: LD_EXP 14
2374: PPUSH
2375: LD_STRING D7-JMM-1
2377: PPUSH
2378: CALL_OW 88
// enteredContaminatedArea := true ;
2382: LD_ADDR_EXP 5
2386: PUSH
2387: LD_INT 1
2389: ST_TO_ADDR
// DialogueOff ;
2390: CALL_OW 7
// end ;
2394: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2395: LD_EXP 6
2399: PUSH
2400: LD_EXP 14
2404: PPUSH
2405: CALL_OW 302
2409: AND
2410: PUSH
2411: LD_EXP 15
2415: PPUSH
2416: CALL_OW 302
2420: AND
2421: IFFALSE 2490
2423: GO 2425
2425: DISABLE
// begin DialogueOn ;
2426: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2430: LD_EXP 14
2434: PUSH
2435: LD_EXP 15
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PPUSH
2444: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2448: LD_EXP 14
2452: PPUSH
2453: LD_STRING D4-JMM-1
2455: PPUSH
2456: CALL_OW 88
// if not bombExploded then
2460: LD_EXP 4
2464: NOT
2465: IFFALSE 2479
// Say ( Burlak , D4-Bur-1 ) ;
2467: LD_EXP 15
2471: PPUSH
2472: LD_STRING D4-Bur-1
2474: PPUSH
2475: CALL_OW 88
// DialogueOff ;
2479: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2483: LD_STRING MReturn
2485: PPUSH
2486: CALL_OW 337
// end ;
2490: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2491: LD_EXP 7
2495: NOT
2496: PUSH
2497: LD_INT 22
2499: PUSH
2500: LD_INT 7
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: LD_INT 91
2509: PUSH
2510: LD_INT 9
2512: PUSH
2513: LD_INT 6
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: LIST
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PPUSH
2525: CALL_OW 69
2529: AND
2530: IFFALSE 2607
2532: GO 2534
2534: DISABLE
// begin DialogueOn ;
2535: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2539: LD_INT 55
2541: PPUSH
2542: LD_INT 11
2544: PPUSH
2545: LD_INT 7
2547: PPUSH
2548: LD_INT 6
2550: NEG
2551: PPUSH
2552: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2556: LD_INT 55
2558: PPUSH
2559: LD_INT 11
2561: PPUSH
2562: LD_INT 7
2564: PPUSH
2565: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2569: LD_EXP 15
2573: PPUSH
2574: LD_STRING D9-Bur-1
2576: PPUSH
2577: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2581: LD_EXP 14
2585: PPUSH
2586: LD_STRING D9-JMM-1
2588: PPUSH
2589: CALL_OW 88
// DialogueOff ;
2593: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2597: LD_INT 9
2599: PPUSH
2600: LD_INT 7
2602: PPUSH
2603: CALL_OW 235
// end ;
2607: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2608: LD_INT 9
2610: PPUSH
2611: LD_INT 22
2613: PUSH
2614: LD_INT 7
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PPUSH
2621: CALL_OW 70
2625: IFFALSE 2661
2627: GO 2629
2629: DISABLE
// begin wait ( 0 0$07 ) ;
2630: LD_INT 245
2632: PPUSH
2633: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2637: LD_EXP 14
2641: PPUSH
2642: LD_STRING D10b-JMM-1
2644: PPUSH
2645: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2649: LD_EXP 15
2653: PPUSH
2654: LD_STRING D10b-Bur-1
2656: PPUSH
2657: CALL_OW 88
// end ;
2661: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2662: LD_EXP 9
2666: PUSH
2667: LD_INT 22
2669: PUSH
2670: LD_INT 1
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: LD_INT 25
2679: PUSH
2680: LD_INT 4
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_INT 26
2689: PUSH
2690: LD_INT 1
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: PPUSH
2702: CALL_OW 69
2706: AND
2707: PUSH
2708: LD_INT 5
2710: PPUSH
2711: CALL_OW 255
2715: PUSH
2716: LD_INT 7
2718: EQUAL
2719: PUSH
2720: LD_INT 22
2722: PUSH
2723: LD_INT 1
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 25
2732: PUSH
2733: LD_INT 1
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PPUSH
2744: CALL_OW 69
2748: PUSH
2749: LD_INT 0
2751: EQUAL
2752: OR
2753: AND
2754: IFFALSE 3343
2756: GO 2758
2758: DISABLE
2759: LD_INT 0
2761: PPUSH
// begin case Query ( QKill ) of 1 :
2762: LD_STRING QKill
2764: PPUSH
2765: CALL_OW 97
2769: PUSH
2770: LD_INT 1
2772: DOUBLE
2773: EQUAL
2774: IFTRUE 2778
2776: GO 3331
2778: POP
// begin DialogueOn ;
2779: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2783: LD_EXP 14
2787: PPUSH
2788: LD_STRING D10a-JMM-1
2790: PPUSH
2791: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2795: LD_EXP 15
2799: PPUSH
2800: LD_STRING D10a-Bur-1
2802: PPUSH
2803: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2807: LD_EXP 14
2811: PPUSH
2812: LD_STRING D10a-JMM-2
2814: PPUSH
2815: CALL_OW 88
// if IsOk ( Stevens ) then
2819: LD_EXP 18
2823: PPUSH
2824: CALL_OW 302
2828: IFFALSE 2844
// Say ( Stevens , D10a-Huck-2 ) else
2830: LD_EXP 18
2834: PPUSH
2835: LD_STRING D10a-Huck-2
2837: PPUSH
2838: CALL_OW 88
2842: GO 2895
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2844: LD_INT 22
2846: PUSH
2847: LD_INT 1
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 25
2856: PUSH
2857: LD_INT 4
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: LD_INT 26
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: LIST
2878: PPUSH
2879: CALL_OW 69
2883: PUSH
2884: LD_INT 1
2886: ARRAY
2887: PPUSH
2888: LD_STRING D10a-ASci1-3
2890: PPUSH
2891: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2895: LD_EXP 14
2899: PPUSH
2900: LD_STRING D10a-JMM-4
2902: PPUSH
2903: CALL_OW 88
// if IsOk ( Stevens ) then
2907: LD_EXP 18
2911: PPUSH
2912: CALL_OW 302
2916: IFFALSE 2930
// Say ( Stevens , D10a-Huck-3 ) ;
2918: LD_EXP 18
2922: PPUSH
2923: LD_STRING D10a-Huck-3
2925: PPUSH
2926: CALL_OW 88
// DialogueOff ;
2930: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2934: LD_INT 1
2936: PPUSH
2937: LD_INT 7
2939: PPUSH
2940: LD_INT 1
2942: PPUSH
2943: LD_INT 1
2945: PPUSH
2946: CALL_OW 80
// planCaptured := true ;
2950: LD_ADDR_EXP 7
2954: PUSH
2955: LD_INT 1
2957: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2958: LD_STRING MEnd
2960: PPUSH
2961: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
2965: LD_STRING ACH_DIPLOMACY
2967: PPUSH
2968: CALL_OW 543
// canEnd := true ;
2972: LD_ADDR_EXP 10
2976: PUSH
2977: LD_INT 1
2979: ST_TO_ADDR
// missionTime := tick ;
2980: LD_ADDR_EXP 11
2984: PUSH
2985: LD_OWVAR 1
2989: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2990: LD_INT 35
2992: PPUSH
2993: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
2997: LD_INT 22
2999: PUSH
3000: LD_INT 1
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: LD_INT 3
3009: PUSH
3010: LD_INT 50
3012: PUSH
3013: EMPTY
3014: LIST
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 69
3028: IFFALSE 3144
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3030: LD_ADDR_VAR 0 1
3034: PUSH
3035: LD_INT 22
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: LD_INT 25
3047: PUSH
3048: LD_INT 4
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: PPUSH
3059: CALL_OW 69
3063: PUSH
3064: FOR_IN
3065: IFFALSE 3142
// begin if IsInUnit ( i ) then
3067: LD_VAR 0 1
3071: PPUSH
3072: CALL_OW 310
3076: IFFALSE 3089
// ComExitBuilding ( i ) else
3078: LD_VAR 0 1
3082: PPUSH
3083: CALL_OW 122
3087: GO 3140
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3089: LD_VAR 0 1
3093: PPUSH
3094: LD_INT 22
3096: PUSH
3097: LD_INT 1
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: LD_INT 3
3106: PUSH
3107: LD_INT 50
3109: PUSH
3110: EMPTY
3111: LIST
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PPUSH
3121: CALL_OW 69
3125: PPUSH
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 74
3135: PPUSH
3136: CALL_OW 128
// end ;
3140: GO 3064
3142: POP
3143: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3144: LD_INT 22
3146: PUSH
3147: LD_INT 1
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 3
3156: PUSH
3157: LD_INT 50
3159: PUSH
3160: EMPTY
3161: LIST
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PPUSH
3171: CALL_OW 69
3175: NOT
3176: IFFALSE 2990
// repeat wait ( 3 ) ;
3178: LD_INT 3
3180: PPUSH
3181: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3185: LD_ADDR_VAR 0 1
3189: PUSH
3190: LD_INT 22
3192: PUSH
3193: LD_INT 1
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: PUSH
3200: LD_INT 21
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: PUSH
3219: FOR_IN
3220: IFFALSE 3296
// begin if IsInArea ( i , stevensEscapeArea ) then
3222: LD_VAR 0 1
3226: PPUSH
3227: LD_INT 8
3229: PPUSH
3230: CALL_OW 308
3234: IFFALSE 3247
// begin RemoveUnit ( i ) ;
3236: LD_VAR 0 1
3240: PPUSH
3241: CALL_OW 64
// continue ;
3245: GO 3219
// end ; if IsInUnit ( i ) then
3247: LD_VAR 0 1
3251: PPUSH
3252: CALL_OW 310
3256: IFFALSE 3267
// ComExitBuilding ( i ) ;
3258: LD_VAR 0 1
3262: PPUSH
3263: CALL_OW 122
// if not HasTask ( i ) then
3267: LD_VAR 0 1
3271: PPUSH
3272: CALL_OW 314
3276: NOT
3277: IFFALSE 3294
// ComMoveXY ( i , 28 , 55 ) ;
3279: LD_VAR 0 1
3283: PPUSH
3284: LD_INT 28
3286: PPUSH
3287: LD_INT 55
3289: PPUSH
3290: CALL_OW 111
// end ;
3294: GO 3219
3296: POP
3297: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3298: LD_INT 22
3300: PUSH
3301: LD_INT 1
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 21
3310: PUSH
3311: LD_INT 1
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PPUSH
3322: CALL_OW 69
3326: NOT
3327: IFFALSE 3178
// end ; 2 :
3329: GO 3343
3331: LD_INT 2
3333: DOUBLE
3334: EQUAL
3335: IFTRUE 3339
3337: GO 3342
3339: POP
// ; end ;
3340: GO 3343
3342: POP
// end ;
3343: PPOPN 1
3345: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3346: LD_EXP 10
3350: IFFALSE 3707
3352: GO 3354
3354: DISABLE
3355: LD_INT 0
3357: PPUSH
3358: PPUSH
3359: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3360: LD_INT 10
3362: PPUSH
3363: LD_INT 1
3365: PPUSH
3366: CALL_OW 424
// if Difficulty < 2 then
3370: LD_OWVAR 67
3374: PUSH
3375: LD_INT 2
3377: LESS
3378: IFFALSE 3382
// exit ;
3380: GO 3707
// uc_side := 4 ;
3382: LD_ADDR_OWVAR 20
3386: PUSH
3387: LD_INT 4
3389: ST_TO_ADDR
// uc_nation := 1 ;
3390: LD_ADDR_OWVAR 21
3394: PUSH
3395: LD_INT 1
3397: ST_TO_ADDR
// InitHc ;
3398: CALL_OW 19
// tmp := [ ] ;
3402: LD_ADDR_VAR 0 3
3406: PUSH
3407: EMPTY
3408: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3409: LD_INT 0
3411: PPUSH
3412: LD_INT 5
3414: PPUSH
3415: LD_INT 10
3417: PPUSH
3418: CALL_OW 380
// un := CreateHuman ;
3422: LD_ADDR_VAR 0 1
3426: PUSH
3427: CALL_OW 44
3431: ST_TO_ADDR
// tmp := [ un ] ;
3432: LD_ADDR_VAR 0 3
3436: PUSH
3437: LD_VAR 0 1
3441: PUSH
3442: EMPTY
3443: LIST
3444: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3445: LD_VAR 0 1
3449: PPUSH
3450: LD_INT 226
3452: PPUSH
3453: LD_INT 86
3455: PPUSH
3456: LD_INT 0
3458: PPUSH
3459: CALL_OW 48
// ComHold ( un ) ;
3463: LD_VAR 0 1
3467: PPUSH
3468: CALL_OW 140
// for i = 1 to 3 do
3472: LD_ADDR_VAR 0 2
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_INT 3
3484: PUSH
3485: FOR_TO
3486: IFFALSE 3585
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3488: LD_INT 0
3490: PPUSH
3491: LD_INT 1
3493: PPUSH
3494: LD_INT 8
3496: PPUSH
3497: CALL_OW 380
// un := CreateHuman ;
3501: LD_ADDR_VAR 0 1
3505: PUSH
3506: CALL_OW 44
3510: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3511: LD_VAR 0 1
3515: PPUSH
3516: LD_INT 5
3518: PPUSH
3519: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3523: LD_VAR 0 1
3527: PPUSH
3528: LD_INT 215
3530: PUSH
3531: LD_INT 217
3533: PUSH
3534: LD_INT 219
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_VAR 0 2
3546: ARRAY
3547: PPUSH
3548: LD_INT 76
3550: PPUSH
3551: LD_INT 0
3553: PPUSH
3554: CALL_OW 48
// ComCrawl ( un ) ;
3558: LD_VAR 0 1
3562: PPUSH
3563: CALL_OW 137
// tmp := tmp ^ un ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: LD_VAR 0 3
3576: PUSH
3577: LD_VAR 0 1
3581: ADD
3582: ST_TO_ADDR
// end ;
3583: GO 3485
3585: POP
3586: POP
// repeat wait ( 0 0$1 ) ;
3587: LD_INT 35
3589: PPUSH
3590: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3594: LD_VAR 0 3
3598: PPUSH
3599: LD_INT 24
3601: PUSH
3602: LD_INT 1000
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PPUSH
3609: CALL_OW 72
3613: NOT
3614: IFFALSE 3587
// for i in tmp do
3616: LD_ADDR_VAR 0 2
3620: PUSH
3621: LD_VAR 0 3
3625: PUSH
3626: FOR_IN
3627: IFFALSE 3705
// begin wait ( 0 0$1 ) ;
3629: LD_INT 35
3631: PPUSH
3632: CALL_OW 67
// if Crawls ( i ) then
3636: LD_VAR 0 2
3640: PPUSH
3641: CALL_OW 318
3645: IFFALSE 3658
// ComWalk ( i ) else
3647: LD_VAR 0 2
3651: PPUSH
3652: CALL_OW 138
3656: GO 3703
// if GetClass ( i ) = class_sniper then
3658: LD_VAR 0 2
3662: PPUSH
3663: CALL_OW 257
3667: PUSH
3668: LD_INT 5
3670: EQUAL
3671: IFFALSE 3689
// ComAttackSoporific ( i , JMM ) else
3673: LD_VAR 0 2
3677: PPUSH
3678: LD_EXP 14
3682: PPUSH
3683: CALL_OW 166
3687: GO 3703
// ComAttackUnit ( i , JMM ) ;
3689: LD_VAR 0 2
3693: PPUSH
3694: LD_EXP 14
3698: PPUSH
3699: CALL_OW 115
// end ;
3703: GO 3626
3705: POP
3706: POP
// end ;
3707: PPOPN 3
3709: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3710: LD_EXP 7
3714: NOT
3715: PUSH
3716: LD_INT 1
3718: PPUSH
3719: CALL_OW 301
3723: AND
3724: IFFALSE 3736
3726: GO 3728
3728: DISABLE
// YouLost ( Lab ) ;
3729: LD_STRING Lab
3731: PPUSH
3732: CALL_OW 104
3736: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3737: LD_INT 10
3739: PPUSH
3740: LD_INT 22
3742: PUSH
3743: LD_INT 7
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PPUSH
3750: CALL_OW 70
3754: PUSH
3755: LD_INT 2
3757: GREATEREQUAL
3758: PUSH
3759: LD_INT 10
3761: PPUSH
3762: LD_INT 2
3764: PUSH
3765: LD_INT 34
3767: PUSH
3768: LD_INT 12
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 34
3777: PUSH
3778: LD_INT 51
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: LIST
3789: PPUSH
3790: CALL_OW 70
3794: AND
3795: PUSH
3796: LD_EXP 10
3800: AND
3801: PUSH
3802: LD_EXP 7
3806: AND
3807: PUSH
3808: LD_EXP 6
3812: AND
3813: IFFALSE 4069
3815: GO 3817
3817: DISABLE
3818: LD_INT 0
3820: PPUSH
3821: PPUSH
// begin m1 := false ;
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: LD_INT 0
3829: ST_TO_ADDR
// m2 := false ;
3830: LD_ADDR_VAR 0 2
3834: PUSH
3835: LD_INT 0
3837: ST_TO_ADDR
// if killCounter = 0 then
3838: LD_EXP 12
3842: PUSH
3843: LD_INT 0
3845: EQUAL
3846: IFFALSE 3855
// SetAchievement ( ACH_PACIFIST ) ;
3848: LD_STRING ACH_PACIFIST
3850: PPUSH
3851: CALL_OW 543
// if tick < 7 7$00 then
3855: LD_OWVAR 1
3859: PUSH
3860: LD_INT 14700
3862: LESS
3863: IFFALSE 3879
// begin wait ( 3 ) ;
3865: LD_INT 3
3867: PPUSH
3868: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3872: LD_STRING ACH_ASPEED_18
3874: PPUSH
3875: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3879: LD_STRING Explosion
3881: PPUSH
3882: LD_INT 1
3884: PPUSH
3885: CALL_OW 101
// if enteredContaminatedArea then
3889: LD_EXP 5
3893: IFFALSE 3915
// begin m1 := true ;
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_INT 1
3902: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3903: LD_STRING BioHazard
3905: PPUSH
3906: LD_INT 1
3908: PPUSH
3909: CALL_OW 101
// end else
3913: GO 3926
// AddMedal ( BioHazard , - 1 ) ;
3915: LD_STRING BioHazard
3917: PPUSH
3918: LD_INT 1
3920: NEG
3921: PPUSH
3922: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
3926: LD_EXP 11
3930: PUSH
3931: LD_INT 42000
3933: PUSH
3934: LD_INT 31500
3936: PUSH
3937: LD_INT 25200
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: LIST
3944: PUSH
3945: LD_OWVAR 67
3949: ARRAY
3950: LESSEQUAL
3951: IFFALSE 3973
// begin m2 := true ;
3953: LD_ADDR_VAR 0 2
3957: PUSH
3958: LD_INT 1
3960: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
3961: LD_STRING Speed
3963: PPUSH
3964: LD_INT 1
3966: PPUSH
3967: CALL_OW 101
// end else
3971: GO 3984
// AddMedal ( Speed , - 1 ) ;
3973: LD_STRING Speed
3975: PPUSH
3976: LD_INT 1
3978: NEG
3979: PPUSH
3980: CALL_OW 101
// if Difficulty = 3 and m1 and m2 then
3984: LD_OWVAR 67
3988: PUSH
3989: LD_INT 3
3991: EQUAL
3992: PUSH
3993: LD_VAR 0 1
3997: AND
3998: PUSH
3999: LD_VAR 0 2
4003: AND
4004: IFFALSE 4016
// SetAchievementEX ( ACH_AMER , 18 ) ;
4006: LD_STRING ACH_AMER
4008: PPUSH
4009: LD_INT 18
4011: PPUSH
4012: CALL_OW 564
// GiveMedals ( Main ) ;
4016: LD_STRING Main
4018: PPUSH
4019: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4023: LD_EXP 14
4027: PUSH
4028: LD_EXP 15
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PPUSH
4037: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4041: LD_EXP 14
4045: PPUSH
4046: LD_STRING 14a_JMM
4048: PPUSH
4049: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4053: LD_EXP 15
4057: PPUSH
4058: LD_STRING 14a_Burlak
4060: PPUSH
4061: CALL_OW 38
// YouWin ;
4065: CALL_OW 103
// end ; end_of_file
4069: PPOPN 2
4071: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4072: LD_INT 0
4074: PPUSH
4075: PPUSH
4076: PPUSH
4077: PPUSH
// uc_side := 1 ;
4078: LD_ADDR_OWVAR 20
4082: PUSH
4083: LD_INT 1
4085: ST_TO_ADDR
// uc_nation := 1 ;
4086: LD_ADDR_OWVAR 21
4090: PUSH
4091: LD_INT 1
4093: ST_TO_ADDR
// InitHc ;
4094: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 500 ) ;
4098: LD_INT 34
4100: PPUSH
4101: CALL_OW 274
4105: PPUSH
4106: LD_INT 1
4108: PPUSH
4109: LD_INT 500
4111: PPUSH
4112: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4116: LD_INT 34
4118: PPUSH
4119: CALL_OW 274
4123: PPUSH
4124: LD_INT 3
4126: PPUSH
4127: LD_INT 20
4129: PPUSH
4130: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4134: LD_ADDR_EXP 18
4138: PUSH
4139: LD_STRING Stevens
4141: PPUSH
4142: CALL_OW 25
4146: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4147: LD_ADDR_EXP 19
4151: PUSH
4152: LD_STRING Powell
4154: PPUSH
4155: CALL_OW 25
4159: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4160: LD_EXP 18
4164: PPUSH
4165: LD_INT 1
4167: PPUSH
4168: CALL_OW 52
// vehGuard := [ ] ;
4172: LD_ADDR_EXP 23
4176: PUSH
4177: EMPTY
4178: ST_TO_ADDR
// hc_importance := 0 ;
4179: LD_ADDR_OWVAR 32
4183: PUSH
4184: LD_INT 0
4186: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4187: LD_INT 4
4189: PPUSH
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 3
4195: PPUSH
4196: LD_INT 8
4198: PPUSH
4199: LD_INT 100
4201: PPUSH
4202: CALL 26574 0 5
// sibBomb := CreateVehicle ;
4206: LD_ADDR_EXP 21
4210: PUSH
4211: CALL_OW 45
4215: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4216: LD_EXP 21
4220: PPUSH
4221: LD_INT 1
4223: PPUSH
4224: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4228: LD_EXP 21
4232: PPUSH
4233: LD_INT 93
4235: PPUSH
4236: LD_INT 74
4238: PPUSH
4239: LD_INT 0
4241: PPUSH
4242: CALL_OW 48
// guards := [ ] ;
4246: LD_ADDR_EXP 22
4250: PUSH
4251: EMPTY
4252: ST_TO_ADDR
// for i = 1 to 3 do
4253: LD_ADDR_VAR 0 2
4257: PUSH
4258: DOUBLE
4259: LD_INT 1
4261: DEC
4262: ST_TO_ADDR
4263: LD_INT 3
4265: PUSH
4266: FOR_TO
4267: IFFALSE 4359
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
4269: LD_INT 0
4271: PPUSH
4272: LD_INT 1
4274: PPUSH
4275: LD_INT 8
4277: PUSH
4278: LD_INT 9
4280: PUSH
4281: LD_INT 10
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: LIST
4288: PUSH
4289: LD_OWVAR 67
4293: ARRAY
4294: PPUSH
4295: CALL_OW 380
// un := CreateHuman ;
4299: LD_ADDR_VAR 0 3
4303: PUSH
4304: CALL_OW 44
4308: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4309: LD_VAR 0 3
4313: PPUSH
4314: LD_INT 2
4316: PUSH
4317: LD_INT 3
4319: PUSH
4320: LD_INT 4
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: LIST
4327: PUSH
4328: LD_VAR 0 2
4332: ARRAY
4333: PPUSH
4334: LD_INT 0
4336: PPUSH
4337: CALL_OW 49
// guards := guards ^ un ;
4341: LD_ADDR_EXP 22
4345: PUSH
4346: LD_EXP 22
4350: PUSH
4351: LD_VAR 0 3
4355: ADD
4356: ST_TO_ADDR
// end ;
4357: GO 4266
4359: POP
4360: POP
// baseGuards := [ ] ;
4361: LD_ADDR_EXP 20
4365: PUSH
4366: EMPTY
4367: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
4368: LD_ADDR_VAR 0 2
4372: PUSH
4373: DOUBLE
4374: LD_INT 1
4376: DEC
4377: ST_TO_ADDR
4378: LD_INT 5
4380: PUSH
4381: LD_INT 6
4383: PUSH
4384: LD_INT 7
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: PUSH
4392: LD_OWVAR 67
4396: ARRAY
4397: PUSH
4398: FOR_TO
4399: IFFALSE 4545
// begin PrepareSoldier ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
4401: LD_INT 0
4403: PPUSH
4404: LD_INT 8
4406: PUSH
4407: LD_INT 9
4409: PUSH
4410: LD_INT 10
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: PUSH
4418: LD_OWVAR 67
4422: ARRAY
4423: PPUSH
4424: CALL_OW 381
// un := CreateHuman ;
4428: LD_ADDR_VAR 0 3
4432: PUSH
4433: CALL_OW 44
4437: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4438: LD_ADDR_EXP 20
4442: PUSH
4443: LD_EXP 20
4447: PUSH
4448: LD_VAR 0 3
4452: ADD
4453: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4454: LD_ADDR_VAR 0 4
4458: PUSH
4459: LD_INT 22
4461: PUSH
4462: LD_INT 1
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PUSH
4469: LD_INT 58
4471: PUSH
4472: EMPTY
4473: LIST
4474: PUSH
4475: LD_INT 30
4477: PUSH
4478: LD_INT 32
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: PPUSH
4490: CALL_OW 69
4494: ST_TO_ADDR
// if tmp then
4495: LD_VAR 0 4
4499: IFFALSE 4531
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4501: LD_VAR 0 3
4505: PPUSH
4506: LD_VAR 0 4
4510: PUSH
4511: LD_INT 1
4513: PPUSH
4514: LD_VAR 0 4
4518: PPUSH
4519: CALL_OW 12
4523: ARRAY
4524: PPUSH
4525: CALL_OW 52
4529: GO 4543
// PlaceHumanInUnit ( un , us_bar ) ;
4531: LD_VAR 0 3
4535: PPUSH
4536: LD_INT 51
4538: PPUSH
4539: CALL_OW 52
// end ;
4543: GO 4398
4545: POP
4546: POP
// if Difficulty > 1 then
4547: LD_OWVAR 67
4551: PUSH
4552: LD_INT 1
4554: GREATER
4555: IFFALSE 4599
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 ] [ Difficulty - 1 ] ) ;
4557: LD_INT 0
4559: PPUSH
4560: LD_INT 5
4562: PPUSH
4563: LD_INT 9
4565: PUSH
4566: LD_INT 10
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_OWVAR 67
4577: PUSH
4578: LD_INT 1
4580: MINUS
4581: ARRAY
4582: PPUSH
4583: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4587: CALL_OW 44
4591: PPUSH
4592: LD_INT 80
4594: PPUSH
4595: CALL_OW 52
// end ; for i = 1 to 3 do
4599: LD_ADDR_VAR 0 2
4603: PUSH
4604: DOUBLE
4605: LD_INT 1
4607: DEC
4608: ST_TO_ADDR
4609: LD_INT 3
4611: PUSH
4612: FOR_TO
4613: IFFALSE 4639
// begin PrepareMechanic ( false , 9 ) ;
4615: LD_INT 0
4617: PPUSH
4618: LD_INT 9
4620: PPUSH
4621: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4625: CALL_OW 44
4629: PPUSH
4630: LD_INT 43
4632: PPUSH
4633: CALL_OW 52
// end ;
4637: GO 4612
4639: POP
4640: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4641: CALL_OW 44
4645: PPUSH
4646: LD_INT 49
4648: PPUSH
4649: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4653: LD_ADDR_VAR 0 2
4657: PUSH
4658: DOUBLE
4659: LD_INT 1
4661: DEC
4662: ST_TO_ADDR
4663: LD_INT 1
4665: PUSH
4666: LD_OWVAR 67
4670: PLUS
4671: PUSH
4672: FOR_TO
4673: IFFALSE 4716
// begin PrepareEngineer ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
4675: LD_INT 0
4677: PPUSH
4678: LD_INT 8
4680: PUSH
4681: LD_INT 9
4683: PUSH
4684: LD_INT 10
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: PUSH
4692: LD_OWVAR 67
4696: ARRAY
4697: PPUSH
4698: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4702: CALL_OW 44
4706: PPUSH
4707: LD_INT 5
4709: PPUSH
4710: CALL_OW 52
// end ;
4714: GO 4672
4716: POP
4717: POP
// for i = 1 to 3 do
4718: LD_ADDR_VAR 0 2
4722: PUSH
4723: DOUBLE
4724: LD_INT 1
4726: DEC
4727: ST_TO_ADDR
4728: LD_INT 3
4730: PUSH
4731: FOR_TO
4732: IFFALSE 4758
// begin PrepareScientist ( false , 10 ) ;
4734: LD_INT 0
4736: PPUSH
4737: LD_INT 10
4739: PPUSH
4740: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4744: CALL_OW 44
4748: PPUSH
4749: LD_INT 1
4751: PPUSH
4752: CALL_OW 52
// end ;
4756: GO 4731
4758: POP
4759: POP
// end ;
4760: LD_VAR 0 1
4764: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4765: LD_EXP 22
4769: PUSH
4770: LD_EXP 2
4774: NOT
4775: AND
4776: IFFALSE 4962
4778: GO 4780
4780: DISABLE
4781: LD_INT 0
4783: PPUSH
4784: PPUSH
4785: PPUSH
// begin enable ;
4786: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4787: LD_ADDR_VAR 0 3
4791: PUSH
4792: LD_INT 204
4794: PUSH
4795: LD_INT 30
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 165
4804: PUSH
4805: LD_INT 24
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 195
4814: PUSH
4815: LD_INT 6
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 223
4824: PUSH
4825: LD_INT 54
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 214
4834: PUSH
4835: LD_INT 84
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PUSH
4842: LD_INT 206
4844: PUSH
4845: LD_INT 71
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: ST_TO_ADDR
// for i in guards do
4860: LD_ADDR_VAR 0 1
4864: PUSH
4865: LD_EXP 22
4869: PUSH
4870: FOR_IN
4871: IFFALSE 4960
// begin if HasTask ( i ) then
4873: LD_VAR 0 1
4877: PPUSH
4878: CALL_OW 314
4882: IFFALSE 4888
// continue else
4884: GO 4870
4886: GO 4958
// begin j := rand ( 1 , 6 ) ;
4888: LD_ADDR_VAR 0 2
4892: PUSH
4893: LD_INT 1
4895: PPUSH
4896: LD_INT 6
4898: PPUSH
4899: CALL_OW 12
4903: ST_TO_ADDR
// if not See ( 7 , i ) then
4904: LD_INT 7
4906: PPUSH
4907: LD_VAR 0 1
4911: PPUSH
4912: CALL_OW 292
4916: NOT
4917: IFFALSE 4958
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
4919: LD_VAR 0 1
4923: PPUSH
4924: LD_VAR 0 3
4928: PUSH
4929: LD_VAR 0 2
4933: ARRAY
4934: PUSH
4935: LD_INT 1
4937: ARRAY
4938: PPUSH
4939: LD_VAR 0 3
4943: PUSH
4944: LD_VAR 0 2
4948: ARRAY
4949: PUSH
4950: LD_INT 2
4952: ARRAY
4953: PPUSH
4954: CALL_OW 114
// end ; end ;
4958: GO 4870
4960: POP
4961: POP
// end ;
4962: PPOPN 3
4964: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
4965: LD_EXP 23
4969: PUSH
4970: LD_EXP 7
4974: NOT
4975: AND
4976: IFFALSE 5047
4978: GO 4980
4980: DISABLE
4981: LD_INT 0
4983: PPUSH
// begin enable ;
4984: ENABLE
// for i in vehGuard do
4985: LD_ADDR_VAR 0 1
4989: PUSH
4990: LD_EXP 23
4994: PUSH
4995: FOR_IN
4996: IFFALSE 5045
// if IsOk ( vehGuard ) then
4998: LD_EXP 23
5002: PPUSH
5003: CALL_OW 302
5007: IFFALSE 5043
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5009: LD_VAR 0 1
5013: PPUSH
5014: LD_INT 22
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PPUSH
5024: CALL_OW 69
5028: PPUSH
5029: LD_VAR 0 1
5033: PPUSH
5034: CALL_OW 74
5038: PPUSH
5039: CALL_OW 115
5043: GO 4995
5045: POP
5046: POP
// end ;
5047: PPOPN 1
5049: END
// every 9 9$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured do
5050: LD_EXP 4
5054: PUSH
5055: LD_INT 43
5057: PPUSH
5058: CALL_OW 302
5062: AND
5063: PUSH
5064: LD_EXP 7
5068: NOT
5069: AND
5070: IFFALSE 5118
5072: GO 5074
5074: DISABLE
// begin enable ;
5075: ENABLE
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5076: LD_INT 43
5078: PPUSH
5079: LD_INT 5
5081: PPUSH
5082: LD_INT 3
5084: PPUSH
5085: LD_INT 2
5087: PPUSH
5088: LD_INT 7
5090: PUSH
5091: LD_INT 7
5093: PUSH
5094: LD_INT 9
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: LIST
5101: PUSH
5102: LD_INT 1
5104: PPUSH
5105: LD_INT 3
5107: PPUSH
5108: CALL_OW 12
5112: ARRAY
5113: PPUSH
5114: CALL_OW 125
// end ;
5118: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5119: LD_INT 22
5121: PUSH
5122: LD_INT 1
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: LD_INT 25
5131: PUSH
5132: LD_INT 5
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PUSH
5139: LD_INT 50
5141: PUSH
5142: EMPTY
5143: LIST
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: LIST
5149: PPUSH
5150: CALL_OW 69
5154: PUSH
5155: LD_EXP 7
5159: NOT
5160: AND
5161: IFFALSE 5390
5163: GO 5165
5165: DISABLE
5166: LD_INT 0
5168: PPUSH
5169: PPUSH
// begin enable ;
5170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5171: LD_ADDR_VAR 0 1
5175: PUSH
5176: LD_INT 22
5178: PUSH
5179: LD_INT 1
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 25
5188: PUSH
5189: LD_INT 5
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PUSH
5196: LD_INT 50
5198: PUSH
5199: EMPTY
5200: LIST
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: PPUSH
5207: CALL_OW 69
5211: ST_TO_ADDR
// if not tmp then
5212: LD_VAR 0 1
5216: NOT
5217: IFFALSE 5221
// exit ;
5219: GO 5390
// b := IsInUnit ( tmp [ 1 ] ) ;
5221: LD_ADDR_VAR 0 2
5225: PUSH
5226: LD_VAR 0 1
5230: PUSH
5231: LD_INT 1
5233: ARRAY
5234: PPUSH
5235: CALL_OW 310
5239: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5240: LD_VAR 0 2
5244: NOT
5245: PUSH
5246: LD_VAR 0 1
5250: PUSH
5251: LD_INT 1
5253: ARRAY
5254: PPUSH
5255: CALL_OW 314
5259: OR
5260: IFFALSE 5264
// exit ;
5262: GO 5390
// if b = us_bun1 then
5264: LD_VAR 0 2
5268: PUSH
5269: LD_INT 80
5271: EQUAL
5272: IFFALSE 5333
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5274: LD_VAR 0 1
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PPUSH
5283: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5287: LD_VAR 0 1
5291: PUSH
5292: LD_INT 1
5294: ARRAY
5295: PPUSH
5296: LD_INT 27
5298: PPUSH
5299: LD_INT 44
5301: PPUSH
5302: CALL_OW 174
// if IsOk ( us_bun2 ) then
5306: LD_INT 55
5308: PPUSH
5309: CALL_OW 302
5313: IFFALSE 5331
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5315: LD_VAR 0 1
5319: PUSH
5320: LD_INT 1
5322: ARRAY
5323: PPUSH
5324: LD_INT 55
5326: PPUSH
5327: CALL_OW 180
// end else
5331: GO 5390
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5333: LD_VAR 0 1
5337: PUSH
5338: LD_INT 1
5340: ARRAY
5341: PPUSH
5342: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5346: LD_VAR 0 1
5350: PUSH
5351: LD_INT 1
5353: ARRAY
5354: PPUSH
5355: LD_INT 92
5357: PPUSH
5358: LD_INT 51
5360: PPUSH
5361: CALL_OW 174
// if IsOk ( us_bun1 ) then
5365: LD_INT 80
5367: PPUSH
5368: CALL_OW 302
5372: IFFALSE 5390
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5374: LD_VAR 0 1
5378: PUSH
5379: LD_INT 1
5381: ARRAY
5382: PPUSH
5383: LD_INT 80
5385: PPUSH
5386: CALL_OW 180
// end ; end ;
5390: PPOPN 2
5392: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5393: LD_EXP 7
5397: NOT
5398: PUSH
5399: LD_INT 9
5401: PPUSH
5402: LD_INT 22
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: LD_INT 21
5414: PUSH
5415: LD_INT 3
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PUSH
5422: LD_INT 3
5424: PUSH
5425: LD_INT 24
5427: PUSH
5428: LD_INT 1000
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: PPUSH
5444: CALL_OW 70
5448: AND
5449: IFFALSE 5860
5451: GO 5453
5453: DISABLE
5454: LD_INT 0
5456: PPUSH
5457: PPUSH
5458: PPUSH
5459: PPUSH
// begin enable ;
5460: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5461: LD_ADDR_VAR 0 2
5465: PUSH
5466: LD_INT 22
5468: PUSH
5469: LD_INT 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 25
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 24
5488: PUSH
5489: LD_INT 1000
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: LIST
5500: PPUSH
5501: CALL_OW 69
5505: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5506: LD_ADDR_VAR 0 3
5510: PUSH
5511: LD_INT 22
5513: PUSH
5514: LD_INT 1
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: LD_INT 25
5523: PUSH
5524: LD_INT 2
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 3
5533: PUSH
5534: LD_INT 24
5536: PUSH
5537: LD_INT 750
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: LIST
5552: PPUSH
5553: CALL_OW 69
5557: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5558: LD_ADDR_VAR 0 4
5562: PUSH
5563: LD_INT 9
5565: PPUSH
5566: LD_INT 22
5568: PUSH
5569: LD_INT 1
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: PUSH
5576: LD_INT 21
5578: PUSH
5579: LD_INT 3
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PUSH
5586: LD_INT 3
5588: PUSH
5589: LD_INT 24
5591: PUSH
5592: LD_INT 1000
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: PPUSH
5608: CALL_OW 70
5612: PUSH
5613: LD_INT 1
5615: DIFF
5616: ST_TO_ADDR
// if not tmp and not tmp2 then
5617: LD_VAR 0 2
5621: NOT
5622: PUSH
5623: LD_VAR 0 3
5627: NOT
5628: AND
5629: IFFALSE 5633
// exit ;
5631: GO 5860
// if tmp and b then
5633: LD_VAR 0 2
5637: PUSH
5638: LD_VAR 0 4
5642: AND
5643: IFFALSE 5773
// for i in tmp do
5645: LD_ADDR_VAR 0 1
5649: PUSH
5650: LD_VAR 0 2
5654: PUSH
5655: FOR_IN
5656: IFFALSE 5771
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5658: LD_VAR 0 1
5662: PPUSH
5663: CALL_OW 110
5667: PUSH
5668: LD_INT 1
5670: EQUAL
5671: PUSH
5672: LD_VAR 0 1
5676: PPUSH
5677: CALL_OW 256
5681: PUSH
5682: LD_INT 1000
5684: LESS
5685: AND
5686: IFFALSE 5692
// continue else
5688: GO 5655
5690: GO 5719
// if GetTag ( i ) = 1 then
5692: LD_VAR 0 1
5696: PPUSH
5697: CALL_OW 110
5701: PUSH
5702: LD_INT 1
5704: EQUAL
5705: IFFALSE 5719
// SetTag ( i , 0 ) ;
5707: LD_VAR 0 1
5711: PPUSH
5712: LD_INT 0
5714: PPUSH
5715: CALL_OW 109
// if IsInUnit ( i ) then
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 310
5728: IFFALSE 5739
// ComExitBuilding ( i ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: CALL_OW 122
// if not HasTask ( i ) then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 314
5748: NOT
5749: IFFALSE 5769
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5751: LD_VAR 0 1
5755: PPUSH
5756: LD_VAR 0 4
5760: PUSH
5761: LD_INT 1
5763: ARRAY
5764: PPUSH
5765: CALL_OW 190
// end ;
5769: GO 5655
5771: POP
5772: POP
// if tmp2 then
5773: LD_VAR 0 3
5777: IFFALSE 5860
// for i in tmp2 do
5779: LD_ADDR_VAR 0 1
5783: PUSH
5784: LD_VAR 0 3
5788: PUSH
5789: FOR_IN
5790: IFFALSE 5858
// begin if not GetTag ( i ) = 1 then
5792: LD_VAR 0 1
5796: PPUSH
5797: CALL_OW 110
5801: PUSH
5802: LD_INT 1
5804: EQUAL
5805: NOT
5806: IFFALSE 5820
// SetTag ( i , 1 ) ;
5808: LD_VAR 0 1
5812: PPUSH
5813: LD_INT 1
5815: PPUSH
5816: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5820: LD_VAR 0 1
5824: PPUSH
5825: LD_INT 88
5827: PPUSH
5828: LD_INT 75
5830: PPUSH
5831: CALL_OW 297
5835: PUSH
5836: LD_INT 6
5838: GREATER
5839: IFFALSE 5856
// ComMoveXY ( i , 88 , 75 ) ;
5841: LD_VAR 0 1
5845: PPUSH
5846: LD_INT 88
5848: PPUSH
5849: LD_INT 75
5851: PPUSH
5852: CALL_OW 111
// end ;
5856: GO 5789
5858: POP
5859: POP
// end ;
5860: PPOPN 4
5862: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5863: LD_EXP 7
5867: NOT
5868: PUSH
5869: LD_EXP 9
5873: AND
5874: PUSH
5875: LD_INT 9
5877: PPUSH
5878: LD_INT 22
5880: PUSH
5881: LD_INT 1
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: PUSH
5888: LD_INT 21
5890: PUSH
5891: LD_INT 1
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: LD_INT 24
5903: PUSH
5904: LD_INT 1000
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 70
5924: AND
5925: IFFALSE 6098
5927: GO 5929
5929: DISABLE
5930: LD_INT 0
5932: PPUSH
5933: PPUSH
5934: PPUSH
// begin enable ;
5935: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
5936: LD_ADDR_VAR 0 2
5940: PUSH
5941: LD_INT 22
5943: PUSH
5944: LD_INT 1
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PUSH
5951: LD_INT 25
5953: PUSH
5954: LD_INT 4
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: PPUSH
5965: CALL_OW 69
5969: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5970: LD_ADDR_VAR 0 3
5974: PUSH
5975: LD_INT 9
5977: PPUSH
5978: LD_INT 22
5980: PUSH
5981: LD_INT 1
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: PUSH
5988: LD_INT 21
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 3
6000: PUSH
6001: LD_INT 24
6003: PUSH
6004: LD_INT 1000
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: LIST
6019: PPUSH
6020: CALL_OW 70
6024: ST_TO_ADDR
// if not sci or not tmp then
6025: LD_VAR 0 2
6029: NOT
6030: PUSH
6031: LD_VAR 0 3
6035: NOT
6036: OR
6037: IFFALSE 6041
// exit ;
6039: GO 6098
// for i in sci do
6041: LD_ADDR_VAR 0 1
6045: PUSH
6046: LD_VAR 0 2
6050: PUSH
6051: FOR_IN
6052: IFFALSE 6096
// if IsInUnit ( i ) then
6054: LD_VAR 0 1
6058: PPUSH
6059: CALL_OW 310
6063: IFFALSE 6076
// ComExitBuilding ( i ) else
6065: LD_VAR 0 1
6069: PPUSH
6070: CALL_OW 122
6074: GO 6094
// ComHeal ( i , tmp [ 1 ] ) ;
6076: LD_VAR 0 1
6080: PPUSH
6081: LD_VAR 0 3
6085: PUSH
6086: LD_INT 1
6088: ARRAY
6089: PPUSH
6090: CALL_OW 128
6094: GO 6051
6096: POP
6097: POP
// end ;
6098: PPOPN 3
6100: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6101: LD_EXP 7
6105: NOT
6106: PUSH
6107: LD_EXP 9
6111: AND
6112: PUSH
6113: LD_INT 1
6115: PPUSH
6116: CALL_OW 302
6120: AND
6121: PUSH
6122: LD_INT 9
6124: PPUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 1
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 21
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: LD_INT 3
6147: PUSH
6148: LD_INT 24
6150: PUSH
6151: LD_INT 1000
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 70
6171: NOT
6172: AND
6173: PUSH
6174: LD_INT 22
6176: PUSH
6177: LD_INT 1
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: LD_INT 25
6186: PUSH
6187: LD_INT 4
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 56
6196: PUSH
6197: EMPTY
6198: LIST
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: PPUSH
6205: CALL_OW 69
6209: AND
6210: IFFALSE 6303
6212: GO 6214
6214: DISABLE
6215: LD_INT 0
6217: PPUSH
// begin enable ;
6218: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6219: LD_ADDR_VAR 0 1
6223: PUSH
6224: LD_INT 22
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 25
6236: PUSH
6237: LD_INT 4
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 56
6246: PUSH
6247: EMPTY
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: LIST
6254: PPUSH
6255: CALL_OW 69
6259: PUSH
6260: FOR_IN
6261: IFFALSE 6301
// if not GetTag ( i ) and not HasTask ( i ) then
6263: LD_VAR 0 1
6267: PPUSH
6268: CALL_OW 110
6272: NOT
6273: PUSH
6274: LD_VAR 0 1
6278: PPUSH
6279: CALL_OW 314
6283: NOT
6284: AND
6285: IFFALSE 6299
// ComEnterUnit ( i , us_lab ) ;
6287: LD_VAR 0 1
6291: PPUSH
6292: LD_INT 1
6294: PPUSH
6295: CALL_OW 120
6299: GO 6260
6301: POP
6302: POP
// end ;
6303: PPOPN 1
6305: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6306: LD_EXP 7
6310: NOT
6311: PUSH
6312: LD_INT 9
6314: PPUSH
6315: LD_INT 22
6317: PUSH
6318: LD_INT 1
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: LD_INT 21
6327: PUSH
6328: LD_INT 3
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PUSH
6335: LD_INT 3
6337: PUSH
6338: LD_INT 24
6340: PUSH
6341: LD_INT 1000
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: LIST
6356: PPUSH
6357: CALL_OW 70
6361: NOT
6362: AND
6363: PUSH
6364: LD_INT 22
6366: PUSH
6367: LD_INT 1
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PUSH
6374: LD_INT 25
6376: PUSH
6377: LD_INT 2
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: PUSH
6384: LD_INT 56
6386: PUSH
6387: EMPTY
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: PPUSH
6395: CALL_OW 69
6399: AND
6400: IFFALSE 6493
6402: GO 6404
6404: DISABLE
6405: LD_INT 0
6407: PPUSH
// begin enable ;
6408: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6409: LD_ADDR_VAR 0 1
6413: PUSH
6414: LD_INT 22
6416: PUSH
6417: LD_INT 1
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 2
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 56
6436: PUSH
6437: EMPTY
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: PPUSH
6445: CALL_OW 69
6449: PUSH
6450: FOR_IN
6451: IFFALSE 6491
// if not HasTask ( i ) and not GetTag ( i ) then
6453: LD_VAR 0 1
6457: PPUSH
6458: CALL_OW 314
6462: NOT
6463: PUSH
6464: LD_VAR 0 1
6468: PPUSH
6469: CALL_OW 110
6473: NOT
6474: AND
6475: IFFALSE 6489
// ComEnterUnit ( i , us_depot ) ;
6477: LD_VAR 0 1
6481: PPUSH
6482: LD_INT 5
6484: PPUSH
6485: CALL_OW 120
6489: GO 6450
6491: POP
6492: POP
// end ;
6493: PPOPN 1
6495: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6496: LD_EXP 9
6500: PUSH
6501: LD_INT 0
6503: LESSEQUAL
6504: PUSH
6505: LD_EXP 18
6509: PPUSH
6510: CALL_OW 301
6514: OR
6515: PUSH
6516: LD_INT 22
6518: PUSH
6519: LD_INT 1
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: LD_INT 25
6528: PUSH
6529: LD_INT 2
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PPUSH
6540: CALL_OW 69
6544: AND
6545: IFFALSE 6586
6547: GO 6549
6549: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6550: LD_INT 22
6552: PUSH
6553: LD_INT 1
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: LD_INT 25
6562: PUSH
6563: LD_INT 2
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PPUSH
6574: CALL_OW 69
6578: PPUSH
6579: LD_INT 1
6581: PPUSH
6582: CALL_OW 167
6586: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6587: LD_EXP 7
6591: NOT
6592: PUSH
6593: LD_INT 7
6595: PPUSH
6596: LD_INT 22
6598: PUSH
6599: LD_INT 7
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PPUSH
6606: CALL_OW 70
6610: AND
6611: IFFALSE 6702
6613: GO 6615
6615: DISABLE
6616: LD_INT 0
6618: PPUSH
// begin wait ( 0 0$2 ) ;
6619: LD_INT 70
6621: PPUSH
6622: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6626: LD_ADDR_VAR 0 1
6630: PUSH
6631: LD_INT 22
6633: PUSH
6634: LD_INT 1
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 25
6643: PUSH
6644: LD_INT 1
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PPUSH
6655: CALL_OW 69
6659: PUSH
6660: FOR_IN
6661: IFFALSE 6700
// begin if IsInUnit ( i ) then
6663: LD_VAR 0 1
6667: PPUSH
6668: CALL_OW 310
6672: IFFALSE 6683
// ComExitBuilding ( i ) ;
6674: LD_VAR 0 1
6678: PPUSH
6679: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6683: LD_VAR 0 1
6687: PPUSH
6688: LD_INT 92
6690: PPUSH
6691: LD_INT 78
6693: PPUSH
6694: CALL_OW 174
// end ;
6698: GO 6660
6700: POP
6701: POP
// end ; end_of_file
6702: PPOPN 1
6704: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6705: LD_VAR 0 1
6709: PPUSH
6710: LD_VAR 0 2
6714: PPUSH
6715: LD_VAR 0 3
6719: PPUSH
6720: CALL 1560 0 3
6724: PPOPN 3
6726: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6727: LD_EXP 14
6731: PPUSH
6732: CALL_OW 257
6736: PUSH
6737: LD_INT 4
6739: EQUAL
6740: PUSH
6741: LD_EXP 15
6745: PPUSH
6746: CALL_OW 257
6750: PUSH
6751: LD_INT 4
6753: EQUAL
6754: OR
6755: PUSH
6756: LD_INT 22
6758: PUSH
6759: LD_INT 7
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: LD_INT 21
6768: PUSH
6769: LD_INT 3
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PPUSH
6780: CALL_OW 69
6784: OR
6785: IFFALSE 6789
// exit ;
6787: GO 6827
// if un = JMM then
6789: LD_VAR 0 1
6793: PUSH
6794: LD_EXP 14
6798: EQUAL
6799: IFFALSE 6808
// YouLost ( JMM ) ;
6801: LD_STRING JMM
6803: PPUSH
6804: CALL_OW 104
// if un = Burlak then
6808: LD_VAR 0 1
6812: PUSH
6813: LD_EXP 15
6817: EQUAL
6818: IFFALSE 6827
// YouLost ( Burlak ) ;
6820: LD_STRING Burlak
6822: PPUSH
6823: CALL_OW 104
// end ;
6827: PPOPN 1
6829: END
// on UnitDestroyed ( un ) do begin if un = JMM then
6830: LD_VAR 0 1
6834: PUSH
6835: LD_EXP 14
6839: EQUAL
6840: IFFALSE 6849
// YouLost ( JMM ) ;
6842: LD_STRING JMM
6844: PPUSH
6845: CALL_OW 104
// if un = Burlak then
6849: LD_VAR 0 1
6853: PUSH
6854: LD_EXP 15
6858: EQUAL
6859: IFFALSE 6868
// YouLost ( Burlak ) ;
6861: LD_STRING Burlak
6863: PPUSH
6864: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
6868: LD_VAR 0 1
6872: PUSH
6873: LD_INT 21
6875: PUSH
6876: LD_INT 1
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: LD_INT 23
6885: PUSH
6886: LD_INT 1
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PPUSH
6897: CALL_OW 69
6901: IN
6902: IFFALSE 6918
// killCounter := killCounter + 1 ;
6904: LD_ADDR_EXP 12
6908: PUSH
6909: LD_EXP 12
6913: PUSH
6914: LD_INT 1
6916: PLUS
6917: ST_TO_ADDR
// end ;
6918: PPOPN 1
6920: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6921: LD_VAR 0 2
6925: PUSH
6926: LD_INT 7
6928: EQUAL
6929: PUSH
6930: LD_VAR 0 1
6934: PUSH
6935: LD_INT 2
6937: PUSH
6938: LD_INT 30
6940: PUSH
6941: LD_INT 31
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 30
6950: PUSH
6951: LD_INT 32
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 30
6960: PUSH
6961: LD_INT 33
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: PPUSH
6974: CALL_OW 69
6978: IN
6979: AND
6980: IFFALSE 6996
// bunkerCounter := bunkerCounter + 1 ;
6982: LD_ADDR_EXP 13
6986: PUSH
6987: LD_EXP 13
6991: PUSH
6992: LD_INT 1
6994: PLUS
6995: ST_TO_ADDR
// end ;
6996: PPOPN 3
6998: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 255
7008: PUSH
7009: LD_INT 7
7011: EQUAL
7012: IFFALSE 7022
// artifactPickedUp := true ;
7014: LD_ADDR_EXP 6
7018: PUSH
7019: LD_INT 1
7021: ST_TO_ADDR
// end ;
7022: PPOPN 2
7024: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7025: LD_ADDR_EXP 6
7029: PUSH
7030: LD_INT 0
7032: ST_TO_ADDR
7033: PPOPN 2
7035: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) <> 1 then
7036: LD_VAR 0 1
7040: PPUSH
7041: CALL_OW 255
7045: PUSH
7046: LD_INT 1
7048: NONEQUAL
7049: IFFALSE 7053
// exit ;
7051: GO 7100
// wait ( 0 0$5 ) ;
7053: LD_INT 175
7055: PPUSH
7056: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7060: LD_VAR 0 1
7064: PPUSH
7065: CALL_OW 263
7069: PUSH
7070: LD_INT 2
7072: EQUAL
7073: IFFALSE 7084
// Connect ( vehicle ) ;
7075: LD_VAR 0 1
7079: PPUSH
7080: CALL 29629 0 1
// vehGuard := vehGuard ^ vehicle ;
7084: LD_ADDR_EXP 23
7088: PUSH
7089: LD_EXP 23
7093: PUSH
7094: LD_VAR 0 1
7098: ADD
7099: ST_TO_ADDR
// end ;
7100: PPOPN 2
7102: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7103: LD_VAR 0 1
7107: PUSH
7108: LD_INT 1
7110: EQUAL
7111: PUSH
7112: LD_EXP 7
7116: NOT
7117: AND
7118: IFFALSE 7153
// begin planCaptured := true ;
7120: LD_ADDR_EXP 7
7124: PUSH
7125: LD_INT 1
7127: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7128: LD_STRING MEnd
7130: PPUSH
7131: CALL_OW 337
// canEnd := true ;
7135: LD_ADDR_EXP 10
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// missionTime := tick ;
7143: LD_ADDR_EXP 11
7147: PUSH
7148: LD_OWVAR 1
7152: ST_TO_ADDR
// end ; end ;
7153: PPOPN 3
7155: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7156: LD_VAR 0 1
7160: PPUSH
7161: CALL 20068 0 1
// end ; end_of_file
7165: PPOPN 1
7167: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
7168: LD_INT 0
7170: PPUSH
// ar_crane := 88 ;
7171: LD_ADDR_EXP 30
7175: PUSH
7176: LD_INT 88
7178: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7179: LD_ADDR_EXP 25
7183: PUSH
7184: LD_INT 89
7186: ST_TO_ADDR
// us_hack := 99 ;
7187: LD_ADDR_EXP 26
7191: PUSH
7192: LD_INT 99
7194: ST_TO_ADDR
// us_artillery := 97 ;
7195: LD_ADDR_EXP 27
7199: PUSH
7200: LD_INT 97
7202: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7203: LD_ADDR_EXP 28
7207: PUSH
7208: LD_INT 91
7210: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
7211: LD_ADDR_EXP 29
7215: PUSH
7216: LD_INT 92
7218: ST_TO_ADDR
// ru_radar := 98 ;
7219: LD_ADDR_EXP 24
7223: PUSH
7224: LD_INT 98
7226: ST_TO_ADDR
// tech_Artillery := 80 ;
7227: LD_ADDR_EXP 31
7231: PUSH
7232: LD_INT 80
7234: ST_TO_ADDR
// tech_RadMat := 81 ;
7235: LD_ADDR_EXP 32
7239: PUSH
7240: LD_INT 81
7242: ST_TO_ADDR
// tech_BasicTools := 82 ;
7243: LD_ADDR_EXP 33
7247: PUSH
7248: LD_INT 82
7250: ST_TO_ADDR
// tech_Cargo := 83 ;
7251: LD_ADDR_EXP 34
7255: PUSH
7256: LD_INT 83
7258: ST_TO_ADDR
// tech_Track := 84 ;
7259: LD_ADDR_EXP 35
7263: PUSH
7264: LD_INT 84
7266: ST_TO_ADDR
// tech_Crane := 85 ;
7267: LD_ADDR_EXP 36
7271: PUSH
7272: LD_INT 85
7274: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7275: LD_ADDR_EXP 37
7279: PUSH
7280: LD_INT 86
7282: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7283: LD_ADDR_EXP 38
7287: PUSH
7288: LD_INT 87
7290: ST_TO_ADDR
// end ;
7291: LD_VAR 0 1
7295: RET
// every 1 do
7296: GO 7298
7298: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7299: CALL 7168 0 0
7303: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
7304: LD_VAR 0 2
7308: PUSH
7309: LD_INT 100
7311: EQUAL
7312: IFFALSE 8261
// begin if not StreamModeActive then
7314: LD_EXP 39
7318: NOT
7319: IFFALSE 7329
// StreamModeActive := true ;
7321: LD_ADDR_EXP 39
7325: PUSH
7326: LD_INT 1
7328: ST_TO_ADDR
// if p3 = 0 then
7329: LD_VAR 0 3
7333: PUSH
7334: LD_INT 0
7336: EQUAL
7337: IFFALSE 7343
// InitStreamMode ;
7339: CALL 8494 0 0
// if p3 = 1 then
7343: LD_VAR 0 3
7347: PUSH
7348: LD_INT 1
7350: EQUAL
7351: IFFALSE 7361
// sRocket := true ;
7353: LD_ADDR_EXP 44
7357: PUSH
7358: LD_INT 1
7360: ST_TO_ADDR
// if p3 = 2 then
7361: LD_VAR 0 3
7365: PUSH
7366: LD_INT 2
7368: EQUAL
7369: IFFALSE 7379
// sSpeed := true ;
7371: LD_ADDR_EXP 43
7375: PUSH
7376: LD_INT 1
7378: ST_TO_ADDR
// if p3 = 3 then
7379: LD_VAR 0 3
7383: PUSH
7384: LD_INT 3
7386: EQUAL
7387: IFFALSE 7397
// sEngine := true ;
7389: LD_ADDR_EXP 45
7393: PUSH
7394: LD_INT 1
7396: ST_TO_ADDR
// if p3 = 4 then
7397: LD_VAR 0 3
7401: PUSH
7402: LD_INT 4
7404: EQUAL
7405: IFFALSE 7415
// sSpec := true ;
7407: LD_ADDR_EXP 42
7411: PUSH
7412: LD_INT 1
7414: ST_TO_ADDR
// if p3 = 5 then
7415: LD_VAR 0 3
7419: PUSH
7420: LD_INT 5
7422: EQUAL
7423: IFFALSE 7433
// sLevel := true ;
7425: LD_ADDR_EXP 46
7429: PUSH
7430: LD_INT 1
7432: ST_TO_ADDR
// if p3 = 6 then
7433: LD_VAR 0 3
7437: PUSH
7438: LD_INT 6
7440: EQUAL
7441: IFFALSE 7451
// sArmoury := true ;
7443: LD_ADDR_EXP 47
7447: PUSH
7448: LD_INT 1
7450: ST_TO_ADDR
// if p3 = 7 then
7451: LD_VAR 0 3
7455: PUSH
7456: LD_INT 7
7458: EQUAL
7459: IFFALSE 7469
// sRadar := true ;
7461: LD_ADDR_EXP 48
7465: PUSH
7466: LD_INT 1
7468: ST_TO_ADDR
// if p3 = 8 then
7469: LD_VAR 0 3
7473: PUSH
7474: LD_INT 8
7476: EQUAL
7477: IFFALSE 7487
// sBunker := true ;
7479: LD_ADDR_EXP 49
7483: PUSH
7484: LD_INT 1
7486: ST_TO_ADDR
// if p3 = 9 then
7487: LD_VAR 0 3
7491: PUSH
7492: LD_INT 9
7494: EQUAL
7495: IFFALSE 7505
// sHack := true ;
7497: LD_ADDR_EXP 50
7501: PUSH
7502: LD_INT 1
7504: ST_TO_ADDR
// if p3 = 10 then
7505: LD_VAR 0 3
7509: PUSH
7510: LD_INT 10
7512: EQUAL
7513: IFFALSE 7523
// sFire := true ;
7515: LD_ADDR_EXP 51
7519: PUSH
7520: LD_INT 1
7522: ST_TO_ADDR
// if p3 = 11 then
7523: LD_VAR 0 3
7527: PUSH
7528: LD_INT 11
7530: EQUAL
7531: IFFALSE 7541
// sRefresh := true ;
7533: LD_ADDR_EXP 52
7537: PUSH
7538: LD_INT 1
7540: ST_TO_ADDR
// if p3 = 12 then
7541: LD_VAR 0 3
7545: PUSH
7546: LD_INT 12
7548: EQUAL
7549: IFFALSE 7559
// sExp := true ;
7551: LD_ADDR_EXP 53
7555: PUSH
7556: LD_INT 1
7558: ST_TO_ADDR
// if p3 = 13 then
7559: LD_VAR 0 3
7563: PUSH
7564: LD_INT 13
7566: EQUAL
7567: IFFALSE 7577
// sDepot := true ;
7569: LD_ADDR_EXP 54
7573: PUSH
7574: LD_INT 1
7576: ST_TO_ADDR
// if p3 = 14 then
7577: LD_VAR 0 3
7581: PUSH
7582: LD_INT 14
7584: EQUAL
7585: IFFALSE 7595
// sFlag := true ;
7587: LD_ADDR_EXP 55
7591: PUSH
7592: LD_INT 1
7594: ST_TO_ADDR
// if p3 = 15 then
7595: LD_VAR 0 3
7599: PUSH
7600: LD_INT 15
7602: EQUAL
7603: IFFALSE 7613
// sKamikadze := true ;
7605: LD_ADDR_EXP 63
7609: PUSH
7610: LD_INT 1
7612: ST_TO_ADDR
// if p3 = 16 then
7613: LD_VAR 0 3
7617: PUSH
7618: LD_INT 16
7620: EQUAL
7621: IFFALSE 7631
// sTroll := true ;
7623: LD_ADDR_EXP 64
7627: PUSH
7628: LD_INT 1
7630: ST_TO_ADDR
// if p3 = 17 then
7631: LD_VAR 0 3
7635: PUSH
7636: LD_INT 17
7638: EQUAL
7639: IFFALSE 7649
// sSlow := true ;
7641: LD_ADDR_EXP 65
7645: PUSH
7646: LD_INT 1
7648: ST_TO_ADDR
// if p3 = 18 then
7649: LD_VAR 0 3
7653: PUSH
7654: LD_INT 18
7656: EQUAL
7657: IFFALSE 7667
// sLack := true ;
7659: LD_ADDR_EXP 66
7663: PUSH
7664: LD_INT 1
7666: ST_TO_ADDR
// if p3 = 19 then
7667: LD_VAR 0 3
7671: PUSH
7672: LD_INT 19
7674: EQUAL
7675: IFFALSE 7685
// sTank := true ;
7677: LD_ADDR_EXP 68
7681: PUSH
7682: LD_INT 1
7684: ST_TO_ADDR
// if p3 = 20 then
7685: LD_VAR 0 3
7689: PUSH
7690: LD_INT 20
7692: EQUAL
7693: IFFALSE 7703
// sRemote := true ;
7695: LD_ADDR_EXP 69
7699: PUSH
7700: LD_INT 1
7702: ST_TO_ADDR
// if p3 = 21 then
7703: LD_VAR 0 3
7707: PUSH
7708: LD_INT 21
7710: EQUAL
7711: IFFALSE 7721
// sPowell := true ;
7713: LD_ADDR_EXP 70
7717: PUSH
7718: LD_INT 1
7720: ST_TO_ADDR
// if p3 = 22 then
7721: LD_VAR 0 3
7725: PUSH
7726: LD_INT 22
7728: EQUAL
7729: IFFALSE 7739
// sTeleport := true ;
7731: LD_ADDR_EXP 73
7735: PUSH
7736: LD_INT 1
7738: ST_TO_ADDR
// if p3 = 23 then
7739: LD_VAR 0 3
7743: PUSH
7744: LD_INT 23
7746: EQUAL
7747: IFFALSE 7757
// sOilTower := true ;
7749: LD_ADDR_EXP 75
7753: PUSH
7754: LD_INT 1
7756: ST_TO_ADDR
// if p3 = 24 then
7757: LD_VAR 0 3
7761: PUSH
7762: LD_INT 24
7764: EQUAL
7765: IFFALSE 7775
// sShovel := true ;
7767: LD_ADDR_EXP 76
7771: PUSH
7772: LD_INT 1
7774: ST_TO_ADDR
// if p3 = 25 then
7775: LD_VAR 0 3
7779: PUSH
7780: LD_INT 25
7782: EQUAL
7783: IFFALSE 7793
// sSheik := true ;
7785: LD_ADDR_EXP 77
7789: PUSH
7790: LD_INT 1
7792: ST_TO_ADDR
// if p3 = 26 then
7793: LD_VAR 0 3
7797: PUSH
7798: LD_INT 26
7800: EQUAL
7801: IFFALSE 7811
// sEarthquake := true ;
7803: LD_ADDR_EXP 79
7807: PUSH
7808: LD_INT 1
7810: ST_TO_ADDR
// if p3 = 27 then
7811: LD_VAR 0 3
7815: PUSH
7816: LD_INT 27
7818: EQUAL
7819: IFFALSE 7829
// sAI := true ;
7821: LD_ADDR_EXP 80
7825: PUSH
7826: LD_INT 1
7828: ST_TO_ADDR
// if p3 = 28 then
7829: LD_VAR 0 3
7833: PUSH
7834: LD_INT 28
7836: EQUAL
7837: IFFALSE 7847
// sCargo := true ;
7839: LD_ADDR_EXP 83
7843: PUSH
7844: LD_INT 1
7846: ST_TO_ADDR
// if p3 = 29 then
7847: LD_VAR 0 3
7851: PUSH
7852: LD_INT 29
7854: EQUAL
7855: IFFALSE 7865
// sDLaser := true ;
7857: LD_ADDR_EXP 84
7861: PUSH
7862: LD_INT 1
7864: ST_TO_ADDR
// if p3 = 30 then
7865: LD_VAR 0 3
7869: PUSH
7870: LD_INT 30
7872: EQUAL
7873: IFFALSE 7883
// sExchange := true ;
7875: LD_ADDR_EXP 85
7879: PUSH
7880: LD_INT 1
7882: ST_TO_ADDR
// if p3 = 31 then
7883: LD_VAR 0 3
7887: PUSH
7888: LD_INT 31
7890: EQUAL
7891: IFFALSE 7901
// sFac := true ;
7893: LD_ADDR_EXP 86
7897: PUSH
7898: LD_INT 1
7900: ST_TO_ADDR
// if p3 = 32 then
7901: LD_VAR 0 3
7905: PUSH
7906: LD_INT 32
7908: EQUAL
7909: IFFALSE 7919
// sPower := true ;
7911: LD_ADDR_EXP 87
7915: PUSH
7916: LD_INT 1
7918: ST_TO_ADDR
// if p3 = 33 then
7919: LD_VAR 0 3
7923: PUSH
7924: LD_INT 33
7926: EQUAL
7927: IFFALSE 7937
// sRandom := true ;
7929: LD_ADDR_EXP 88
7933: PUSH
7934: LD_INT 1
7936: ST_TO_ADDR
// if p3 = 34 then
7937: LD_VAR 0 3
7941: PUSH
7942: LD_INT 34
7944: EQUAL
7945: IFFALSE 7955
// sShield := true ;
7947: LD_ADDR_EXP 89
7951: PUSH
7952: LD_INT 1
7954: ST_TO_ADDR
// if p3 = 35 then
7955: LD_VAR 0 3
7959: PUSH
7960: LD_INT 35
7962: EQUAL
7963: IFFALSE 7973
// sTime := true ;
7965: LD_ADDR_EXP 90
7969: PUSH
7970: LD_INT 1
7972: ST_TO_ADDR
// if p3 = 36 then
7973: LD_VAR 0 3
7977: PUSH
7978: LD_INT 36
7980: EQUAL
7981: IFFALSE 7991
// sTools := true ;
7983: LD_ADDR_EXP 91
7987: PUSH
7988: LD_INT 1
7990: ST_TO_ADDR
// if p3 = 101 then
7991: LD_VAR 0 3
7995: PUSH
7996: LD_INT 101
7998: EQUAL
7999: IFFALSE 8009
// sSold := true ;
8001: LD_ADDR_EXP 56
8005: PUSH
8006: LD_INT 1
8008: ST_TO_ADDR
// if p3 = 102 then
8009: LD_VAR 0 3
8013: PUSH
8014: LD_INT 102
8016: EQUAL
8017: IFFALSE 8027
// sDiff := true ;
8019: LD_ADDR_EXP 57
8023: PUSH
8024: LD_INT 1
8026: ST_TO_ADDR
// if p3 = 103 then
8027: LD_VAR 0 3
8031: PUSH
8032: LD_INT 103
8034: EQUAL
8035: IFFALSE 8045
// sFog := true ;
8037: LD_ADDR_EXP 60
8041: PUSH
8042: LD_INT 1
8044: ST_TO_ADDR
// if p3 = 104 then
8045: LD_VAR 0 3
8049: PUSH
8050: LD_INT 104
8052: EQUAL
8053: IFFALSE 8063
// sReset := true ;
8055: LD_ADDR_EXP 61
8059: PUSH
8060: LD_INT 1
8062: ST_TO_ADDR
// if p3 = 105 then
8063: LD_VAR 0 3
8067: PUSH
8068: LD_INT 105
8070: EQUAL
8071: IFFALSE 8081
// sSun := true ;
8073: LD_ADDR_EXP 62
8077: PUSH
8078: LD_INT 1
8080: ST_TO_ADDR
// if p3 = 106 then
8081: LD_VAR 0 3
8085: PUSH
8086: LD_INT 106
8088: EQUAL
8089: IFFALSE 8099
// sTiger := true ;
8091: LD_ADDR_EXP 58
8095: PUSH
8096: LD_INT 1
8098: ST_TO_ADDR
// if p3 = 107 then
8099: LD_VAR 0 3
8103: PUSH
8104: LD_INT 107
8106: EQUAL
8107: IFFALSE 8117
// sBomb := true ;
8109: LD_ADDR_EXP 59
8113: PUSH
8114: LD_INT 1
8116: ST_TO_ADDR
// if p3 = 108 then
8117: LD_VAR 0 3
8121: PUSH
8122: LD_INT 108
8124: EQUAL
8125: IFFALSE 8135
// sWound := true ;
8127: LD_ADDR_EXP 67
8131: PUSH
8132: LD_INT 1
8134: ST_TO_ADDR
// if p3 = 109 then
8135: LD_VAR 0 3
8139: PUSH
8140: LD_INT 109
8142: EQUAL
8143: IFFALSE 8153
// sBetray := true ;
8145: LD_ADDR_EXP 71
8149: PUSH
8150: LD_INT 1
8152: ST_TO_ADDR
// if p3 = 110 then
8153: LD_VAR 0 3
8157: PUSH
8158: LD_INT 110
8160: EQUAL
8161: IFFALSE 8171
// sContamin := true ;
8163: LD_ADDR_EXP 72
8167: PUSH
8168: LD_INT 1
8170: ST_TO_ADDR
// if p3 = 111 then
8171: LD_VAR 0 3
8175: PUSH
8176: LD_INT 111
8178: EQUAL
8179: IFFALSE 8189
// sOil := true ;
8181: LD_ADDR_EXP 74
8185: PUSH
8186: LD_INT 1
8188: ST_TO_ADDR
// if p3 = 112 then
8189: LD_VAR 0 3
8193: PUSH
8194: LD_INT 112
8196: EQUAL
8197: IFFALSE 8207
// sStu := true ;
8199: LD_ADDR_EXP 78
8203: PUSH
8204: LD_INT 1
8206: ST_TO_ADDR
// if p3 = 113 then
8207: LD_VAR 0 3
8211: PUSH
8212: LD_INT 113
8214: EQUAL
8215: IFFALSE 8225
// sBazooka := true ;
8217: LD_ADDR_EXP 81
8221: PUSH
8222: LD_INT 1
8224: ST_TO_ADDR
// if p3 = 114 then
8225: LD_VAR 0 3
8229: PUSH
8230: LD_INT 114
8232: EQUAL
8233: IFFALSE 8243
// sMortar := true ;
8235: LD_ADDR_EXP 82
8239: PUSH
8240: LD_INT 1
8242: ST_TO_ADDR
// if p3 = 115 then
8243: LD_VAR 0 3
8247: PUSH
8248: LD_INT 115
8250: EQUAL
8251: IFFALSE 8261
// sRanger := true ;
8253: LD_ADDR_EXP 92
8257: PUSH
8258: LD_INT 1
8260: ST_TO_ADDR
// end ; if p2 = 101 then
8261: LD_VAR 0 2
8265: PUSH
8266: LD_INT 101
8268: EQUAL
8269: IFFALSE 8472
// begin case p3 of 1 :
8271: LD_VAR 0 3
8275: PUSH
8276: LD_INT 1
8278: DOUBLE
8279: EQUAL
8280: IFTRUE 8284
8282: GO 8291
8284: POP
// hHackUnlimitedResources ; 2 :
8285: CALL 18566 0 0
8289: GO 8472
8291: LD_INT 2
8293: DOUBLE
8294: EQUAL
8295: IFTRUE 8299
8297: GO 8306
8299: POP
// hHackSetLevel10 ; 3 :
8300: CALL 18699 0 0
8304: GO 8472
8306: LD_INT 3
8308: DOUBLE
8309: EQUAL
8310: IFTRUE 8314
8312: GO 8321
8314: POP
// hHackSetLevel10YourUnits ; 4 :
8315: CALL 18784 0 0
8319: GO 8472
8321: LD_INT 4
8323: DOUBLE
8324: EQUAL
8325: IFTRUE 8329
8327: GO 8351
8329: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
8330: LD_VAR 0 4
8334: PPUSH
8335: LD_VAR 0 5
8339: PPUSH
8340: LD_VAR 0 6
8344: PPUSH
8345: CALL 18874 0 3
8349: GO 8472
8351: LD_INT 5
8353: DOUBLE
8354: EQUAL
8355: IFTRUE 8359
8357: GO 8366
8359: POP
// hHackSpawnVehicle ; 6 :
8360: CALL 18935 0 0
8364: GO 8472
8366: LD_INT 6
8368: DOUBLE
8369: EQUAL
8370: IFTRUE 8374
8372: GO 8381
8374: POP
// hHackInvincible ; 7 :
8375: CALL 19481 0 0
8379: GO 8472
8381: LD_INT 7
8383: DOUBLE
8384: EQUAL
8385: IFTRUE 8389
8387: GO 8396
8389: POP
// hHackInvisible ; 8 :
8390: CALL 19592 0 0
8394: GO 8472
8396: LD_INT 8
8398: DOUBLE
8399: EQUAL
8400: IFTRUE 8404
8402: GO 8411
8404: POP
// hHackChangeYourSide ; 9 :
8405: CALL 19649 0 0
8409: GO 8472
8411: LD_INT 9
8413: DOUBLE
8414: EQUAL
8415: IFTRUE 8419
8417: GO 8426
8419: POP
// hHackChangeUnitSide ; 10 :
8420: CALL 19691 0 0
8424: GO 8472
8426: LD_INT 10
8428: DOUBLE
8429: EQUAL
8430: IFTRUE 8434
8432: GO 8441
8434: POP
// hHackFog ; 11 :
8435: CALL 19792 0 0
8439: GO 8472
8441: LD_INT 11
8443: DOUBLE
8444: EQUAL
8445: IFTRUE 8449
8447: GO 8456
8449: POP
// hHackApeman ; 12 :
8450: CALL 19807 0 0
8454: GO 8472
8456: LD_INT 12
8458: DOUBLE
8459: EQUAL
8460: IFTRUE 8464
8462: GO 8471
8464: POP
// hHackBoom ; end ;
8465: CALL 19892 0 0
8469: GO 8472
8471: POP
// end ; end ;
8472: PPOPN 6
8474: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8475: GO 8477
8477: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8478: LD_STRING initStreamRollete();
8480: PPUSH
8481: CALL_OW 559
// InitStreamMode ;
8485: CALL 8494 0 0
// DefineStreamItems ( ) ;
8489: CALL 8934 0 0
// end ;
8493: END
// function InitStreamMode ; begin
8494: LD_INT 0
8496: PPUSH
// streamModeActive := false ;
8497: LD_ADDR_EXP 39
8501: PUSH
8502: LD_INT 0
8504: ST_TO_ADDR
// normalCounter := 36 ;
8505: LD_ADDR_EXP 40
8509: PUSH
8510: LD_INT 36
8512: ST_TO_ADDR
// hardcoreCounter := 16 ;
8513: LD_ADDR_EXP 41
8517: PUSH
8518: LD_INT 16
8520: ST_TO_ADDR
// sRocket := false ;
8521: LD_ADDR_EXP 44
8525: PUSH
8526: LD_INT 0
8528: ST_TO_ADDR
// sSpeed := false ;
8529: LD_ADDR_EXP 43
8533: PUSH
8534: LD_INT 0
8536: ST_TO_ADDR
// sEngine := false ;
8537: LD_ADDR_EXP 45
8541: PUSH
8542: LD_INT 0
8544: ST_TO_ADDR
// sSpec := false ;
8545: LD_ADDR_EXP 42
8549: PUSH
8550: LD_INT 0
8552: ST_TO_ADDR
// sLevel := false ;
8553: LD_ADDR_EXP 46
8557: PUSH
8558: LD_INT 0
8560: ST_TO_ADDR
// sArmoury := false ;
8561: LD_ADDR_EXP 47
8565: PUSH
8566: LD_INT 0
8568: ST_TO_ADDR
// sRadar := false ;
8569: LD_ADDR_EXP 48
8573: PUSH
8574: LD_INT 0
8576: ST_TO_ADDR
// sBunker := false ;
8577: LD_ADDR_EXP 49
8581: PUSH
8582: LD_INT 0
8584: ST_TO_ADDR
// sHack := false ;
8585: LD_ADDR_EXP 50
8589: PUSH
8590: LD_INT 0
8592: ST_TO_ADDR
// sFire := false ;
8593: LD_ADDR_EXP 51
8597: PUSH
8598: LD_INT 0
8600: ST_TO_ADDR
// sRefresh := false ;
8601: LD_ADDR_EXP 52
8605: PUSH
8606: LD_INT 0
8608: ST_TO_ADDR
// sExp := false ;
8609: LD_ADDR_EXP 53
8613: PUSH
8614: LD_INT 0
8616: ST_TO_ADDR
// sDepot := false ;
8617: LD_ADDR_EXP 54
8621: PUSH
8622: LD_INT 0
8624: ST_TO_ADDR
// sFlag := false ;
8625: LD_ADDR_EXP 55
8629: PUSH
8630: LD_INT 0
8632: ST_TO_ADDR
// sKamikadze := false ;
8633: LD_ADDR_EXP 63
8637: PUSH
8638: LD_INT 0
8640: ST_TO_ADDR
// sTroll := false ;
8641: LD_ADDR_EXP 64
8645: PUSH
8646: LD_INT 0
8648: ST_TO_ADDR
// sSlow := false ;
8649: LD_ADDR_EXP 65
8653: PUSH
8654: LD_INT 0
8656: ST_TO_ADDR
// sLack := false ;
8657: LD_ADDR_EXP 66
8661: PUSH
8662: LD_INT 0
8664: ST_TO_ADDR
// sTank := false ;
8665: LD_ADDR_EXP 68
8669: PUSH
8670: LD_INT 0
8672: ST_TO_ADDR
// sRemote := false ;
8673: LD_ADDR_EXP 69
8677: PUSH
8678: LD_INT 0
8680: ST_TO_ADDR
// sPowell := false ;
8681: LD_ADDR_EXP 70
8685: PUSH
8686: LD_INT 0
8688: ST_TO_ADDR
// sTeleport := false ;
8689: LD_ADDR_EXP 73
8693: PUSH
8694: LD_INT 0
8696: ST_TO_ADDR
// sOilTower := false ;
8697: LD_ADDR_EXP 75
8701: PUSH
8702: LD_INT 0
8704: ST_TO_ADDR
// sShovel := false ;
8705: LD_ADDR_EXP 76
8709: PUSH
8710: LD_INT 0
8712: ST_TO_ADDR
// sSheik := false ;
8713: LD_ADDR_EXP 77
8717: PUSH
8718: LD_INT 0
8720: ST_TO_ADDR
// sEarthquake := false ;
8721: LD_ADDR_EXP 79
8725: PUSH
8726: LD_INT 0
8728: ST_TO_ADDR
// sAI := false ;
8729: LD_ADDR_EXP 80
8733: PUSH
8734: LD_INT 0
8736: ST_TO_ADDR
// sCargo := false ;
8737: LD_ADDR_EXP 83
8741: PUSH
8742: LD_INT 0
8744: ST_TO_ADDR
// sDLaser := false ;
8745: LD_ADDR_EXP 84
8749: PUSH
8750: LD_INT 0
8752: ST_TO_ADDR
// sExchange := false ;
8753: LD_ADDR_EXP 85
8757: PUSH
8758: LD_INT 0
8760: ST_TO_ADDR
// sFac := false ;
8761: LD_ADDR_EXP 86
8765: PUSH
8766: LD_INT 0
8768: ST_TO_ADDR
// sPower := false ;
8769: LD_ADDR_EXP 87
8773: PUSH
8774: LD_INT 0
8776: ST_TO_ADDR
// sRandom := false ;
8777: LD_ADDR_EXP 88
8781: PUSH
8782: LD_INT 0
8784: ST_TO_ADDR
// sShield := false ;
8785: LD_ADDR_EXP 89
8789: PUSH
8790: LD_INT 0
8792: ST_TO_ADDR
// sTime := false ;
8793: LD_ADDR_EXP 90
8797: PUSH
8798: LD_INT 0
8800: ST_TO_ADDR
// sTools := false ;
8801: LD_ADDR_EXP 91
8805: PUSH
8806: LD_INT 0
8808: ST_TO_ADDR
// sSold := false ;
8809: LD_ADDR_EXP 56
8813: PUSH
8814: LD_INT 0
8816: ST_TO_ADDR
// sDiff := false ;
8817: LD_ADDR_EXP 57
8821: PUSH
8822: LD_INT 0
8824: ST_TO_ADDR
// sFog := false ;
8825: LD_ADDR_EXP 60
8829: PUSH
8830: LD_INT 0
8832: ST_TO_ADDR
// sReset := false ;
8833: LD_ADDR_EXP 61
8837: PUSH
8838: LD_INT 0
8840: ST_TO_ADDR
// sSun := false ;
8841: LD_ADDR_EXP 62
8845: PUSH
8846: LD_INT 0
8848: ST_TO_ADDR
// sTiger := false ;
8849: LD_ADDR_EXP 58
8853: PUSH
8854: LD_INT 0
8856: ST_TO_ADDR
// sBomb := false ;
8857: LD_ADDR_EXP 59
8861: PUSH
8862: LD_INT 0
8864: ST_TO_ADDR
// sWound := false ;
8865: LD_ADDR_EXP 67
8869: PUSH
8870: LD_INT 0
8872: ST_TO_ADDR
// sBetray := false ;
8873: LD_ADDR_EXP 71
8877: PUSH
8878: LD_INT 0
8880: ST_TO_ADDR
// sContamin := false ;
8881: LD_ADDR_EXP 72
8885: PUSH
8886: LD_INT 0
8888: ST_TO_ADDR
// sOil := false ;
8889: LD_ADDR_EXP 74
8893: PUSH
8894: LD_INT 0
8896: ST_TO_ADDR
// sStu := false ;
8897: LD_ADDR_EXP 78
8901: PUSH
8902: LD_INT 0
8904: ST_TO_ADDR
// sBazooka := false ;
8905: LD_ADDR_EXP 81
8909: PUSH
8910: LD_INT 0
8912: ST_TO_ADDR
// sMortar := false ;
8913: LD_ADDR_EXP 82
8917: PUSH
8918: LD_INT 0
8920: ST_TO_ADDR
// sRanger := false ;
8921: LD_ADDR_EXP 92
8925: PUSH
8926: LD_INT 0
8928: ST_TO_ADDR
// end ;
8929: LD_VAR 0 1
8933: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8934: LD_INT 0
8936: PPUSH
8937: PPUSH
8938: PPUSH
8939: PPUSH
8940: PPUSH
// result := [ ] ;
8941: LD_ADDR_VAR 0 1
8945: PUSH
8946: EMPTY
8947: ST_TO_ADDR
// if campaign_id = 1 then
8948: LD_OWVAR 69
8952: PUSH
8953: LD_INT 1
8955: EQUAL
8956: IFFALSE 11894
// begin case mission_number of 1 :
8958: LD_OWVAR 70
8962: PUSH
8963: LD_INT 1
8965: DOUBLE
8966: EQUAL
8967: IFTRUE 8971
8969: GO 9035
8971: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8972: LD_ADDR_VAR 0 1
8976: PUSH
8977: LD_INT 2
8979: PUSH
8980: LD_INT 4
8982: PUSH
8983: LD_INT 11
8985: PUSH
8986: LD_INT 12
8988: PUSH
8989: LD_INT 15
8991: PUSH
8992: LD_INT 16
8994: PUSH
8995: LD_INT 22
8997: PUSH
8998: LD_INT 23
9000: PUSH
9001: LD_INT 26
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: PUSH
9015: LD_INT 101
9017: PUSH
9018: LD_INT 102
9020: PUSH
9021: LD_INT 106
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: LIST
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: ST_TO_ADDR
9033: GO 11892
9035: LD_INT 2
9037: DOUBLE
9038: EQUAL
9039: IFTRUE 9043
9041: GO 9115
9043: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9044: LD_ADDR_VAR 0 1
9048: PUSH
9049: LD_INT 2
9051: PUSH
9052: LD_INT 4
9054: PUSH
9055: LD_INT 11
9057: PUSH
9058: LD_INT 12
9060: PUSH
9061: LD_INT 15
9063: PUSH
9064: LD_INT 16
9066: PUSH
9067: LD_INT 22
9069: PUSH
9070: LD_INT 23
9072: PUSH
9073: LD_INT 26
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: PUSH
9087: LD_INT 101
9089: PUSH
9090: LD_INT 102
9092: PUSH
9093: LD_INT 105
9095: PUSH
9096: LD_INT 106
9098: PUSH
9099: LD_INT 108
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: ST_TO_ADDR
9113: GO 11892
9115: LD_INT 3
9117: DOUBLE
9118: EQUAL
9119: IFTRUE 9123
9121: GO 9199
9123: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9124: LD_ADDR_VAR 0 1
9128: PUSH
9129: LD_INT 2
9131: PUSH
9132: LD_INT 4
9134: PUSH
9135: LD_INT 5
9137: PUSH
9138: LD_INT 11
9140: PUSH
9141: LD_INT 12
9143: PUSH
9144: LD_INT 15
9146: PUSH
9147: LD_INT 16
9149: PUSH
9150: LD_INT 22
9152: PUSH
9153: LD_INT 26
9155: PUSH
9156: LD_INT 36
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: PUSH
9171: LD_INT 101
9173: PUSH
9174: LD_INT 102
9176: PUSH
9177: LD_INT 105
9179: PUSH
9180: LD_INT 106
9182: PUSH
9183: LD_INT 108
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: ST_TO_ADDR
9197: GO 11892
9199: LD_INT 4
9201: DOUBLE
9202: EQUAL
9203: IFTRUE 9207
9205: GO 9291
9207: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9208: LD_ADDR_VAR 0 1
9212: PUSH
9213: LD_INT 2
9215: PUSH
9216: LD_INT 4
9218: PUSH
9219: LD_INT 5
9221: PUSH
9222: LD_INT 8
9224: PUSH
9225: LD_INT 11
9227: PUSH
9228: LD_INT 12
9230: PUSH
9231: LD_INT 15
9233: PUSH
9234: LD_INT 16
9236: PUSH
9237: LD_INT 22
9239: PUSH
9240: LD_INT 23
9242: PUSH
9243: LD_INT 26
9245: PUSH
9246: LD_INT 36
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: PUSH
9263: LD_INT 101
9265: PUSH
9266: LD_INT 102
9268: PUSH
9269: LD_INT 105
9271: PUSH
9272: LD_INT 106
9274: PUSH
9275: LD_INT 108
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: ST_TO_ADDR
9289: GO 11892
9291: LD_INT 5
9293: DOUBLE
9294: EQUAL
9295: IFTRUE 9299
9297: GO 9399
9299: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9300: LD_ADDR_VAR 0 1
9304: PUSH
9305: LD_INT 2
9307: PUSH
9308: LD_INT 4
9310: PUSH
9311: LD_INT 5
9313: PUSH
9314: LD_INT 6
9316: PUSH
9317: LD_INT 8
9319: PUSH
9320: LD_INT 11
9322: PUSH
9323: LD_INT 12
9325: PUSH
9326: LD_INT 15
9328: PUSH
9329: LD_INT 16
9331: PUSH
9332: LD_INT 22
9334: PUSH
9335: LD_INT 23
9337: PUSH
9338: LD_INT 25
9340: PUSH
9341: LD_INT 26
9343: PUSH
9344: LD_INT 36
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: PUSH
9363: LD_INT 101
9365: PUSH
9366: LD_INT 102
9368: PUSH
9369: LD_INT 105
9371: PUSH
9372: LD_INT 106
9374: PUSH
9375: LD_INT 108
9377: PUSH
9378: LD_INT 109
9380: PUSH
9381: LD_INT 112
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: ST_TO_ADDR
9397: GO 11892
9399: LD_INT 6
9401: DOUBLE
9402: EQUAL
9403: IFTRUE 9407
9405: GO 9527
9407: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9408: LD_ADDR_VAR 0 1
9412: PUSH
9413: LD_INT 2
9415: PUSH
9416: LD_INT 4
9418: PUSH
9419: LD_INT 5
9421: PUSH
9422: LD_INT 6
9424: PUSH
9425: LD_INT 8
9427: PUSH
9428: LD_INT 11
9430: PUSH
9431: LD_INT 12
9433: PUSH
9434: LD_INT 15
9436: PUSH
9437: LD_INT 16
9439: PUSH
9440: LD_INT 20
9442: PUSH
9443: LD_INT 21
9445: PUSH
9446: LD_INT 22
9448: PUSH
9449: LD_INT 23
9451: PUSH
9452: LD_INT 25
9454: PUSH
9455: LD_INT 26
9457: PUSH
9458: LD_INT 30
9460: PUSH
9461: LD_INT 31
9463: PUSH
9464: LD_INT 32
9466: PUSH
9467: LD_INT 36
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 101
9493: PUSH
9494: LD_INT 102
9496: PUSH
9497: LD_INT 105
9499: PUSH
9500: LD_INT 106
9502: PUSH
9503: LD_INT 108
9505: PUSH
9506: LD_INT 109
9508: PUSH
9509: LD_INT 112
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: ST_TO_ADDR
9525: GO 11892
9527: LD_INT 7
9529: DOUBLE
9530: EQUAL
9531: IFTRUE 9535
9533: GO 9635
9535: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9536: LD_ADDR_VAR 0 1
9540: PUSH
9541: LD_INT 2
9543: PUSH
9544: LD_INT 4
9546: PUSH
9547: LD_INT 5
9549: PUSH
9550: LD_INT 7
9552: PUSH
9553: LD_INT 11
9555: PUSH
9556: LD_INT 12
9558: PUSH
9559: LD_INT 15
9561: PUSH
9562: LD_INT 16
9564: PUSH
9565: LD_INT 20
9567: PUSH
9568: LD_INT 21
9570: PUSH
9571: LD_INT 22
9573: PUSH
9574: LD_INT 23
9576: PUSH
9577: LD_INT 25
9579: PUSH
9580: LD_INT 26
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 101
9601: PUSH
9602: LD_INT 102
9604: PUSH
9605: LD_INT 103
9607: PUSH
9608: LD_INT 105
9610: PUSH
9611: LD_INT 106
9613: PUSH
9614: LD_INT 108
9616: PUSH
9617: LD_INT 112
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: ST_TO_ADDR
9633: GO 11892
9635: LD_INT 8
9637: DOUBLE
9638: EQUAL
9639: IFTRUE 9643
9641: GO 9771
9643: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9644: LD_ADDR_VAR 0 1
9648: PUSH
9649: LD_INT 2
9651: PUSH
9652: LD_INT 4
9654: PUSH
9655: LD_INT 5
9657: PUSH
9658: LD_INT 6
9660: PUSH
9661: LD_INT 7
9663: PUSH
9664: LD_INT 8
9666: PUSH
9667: LD_INT 11
9669: PUSH
9670: LD_INT 12
9672: PUSH
9673: LD_INT 15
9675: PUSH
9676: LD_INT 16
9678: PUSH
9679: LD_INT 20
9681: PUSH
9682: LD_INT 21
9684: PUSH
9685: LD_INT 22
9687: PUSH
9688: LD_INT 23
9690: PUSH
9691: LD_INT 25
9693: PUSH
9694: LD_INT 26
9696: PUSH
9697: LD_INT 30
9699: PUSH
9700: LD_INT 31
9702: PUSH
9703: LD_INT 32
9705: PUSH
9706: LD_INT 36
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 101
9733: PUSH
9734: LD_INT 102
9736: PUSH
9737: LD_INT 103
9739: PUSH
9740: LD_INT 105
9742: PUSH
9743: LD_INT 106
9745: PUSH
9746: LD_INT 108
9748: PUSH
9749: LD_INT 109
9751: PUSH
9752: LD_INT 112
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: ST_TO_ADDR
9769: GO 11892
9771: LD_INT 9
9773: DOUBLE
9774: EQUAL
9775: IFTRUE 9779
9777: GO 9915
9779: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9780: LD_ADDR_VAR 0 1
9784: PUSH
9785: LD_INT 2
9787: PUSH
9788: LD_INT 4
9790: PUSH
9791: LD_INT 5
9793: PUSH
9794: LD_INT 6
9796: PUSH
9797: LD_INT 7
9799: PUSH
9800: LD_INT 8
9802: PUSH
9803: LD_INT 11
9805: PUSH
9806: LD_INT 12
9808: PUSH
9809: LD_INT 15
9811: PUSH
9812: LD_INT 16
9814: PUSH
9815: LD_INT 20
9817: PUSH
9818: LD_INT 21
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_INT 23
9826: PUSH
9827: LD_INT 25
9829: PUSH
9830: LD_INT 26
9832: PUSH
9833: LD_INT 28
9835: PUSH
9836: LD_INT 30
9838: PUSH
9839: LD_INT 31
9841: PUSH
9842: LD_INT 32
9844: PUSH
9845: LD_INT 36
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 101
9873: PUSH
9874: LD_INT 102
9876: PUSH
9877: LD_INT 103
9879: PUSH
9880: LD_INT 105
9882: PUSH
9883: LD_INT 106
9885: PUSH
9886: LD_INT 108
9888: PUSH
9889: LD_INT 109
9891: PUSH
9892: LD_INT 112
9894: PUSH
9895: LD_INT 114
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: ST_TO_ADDR
9913: GO 11892
9915: LD_INT 10
9917: DOUBLE
9918: EQUAL
9919: IFTRUE 9923
9921: GO 10107
9923: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9924: LD_ADDR_VAR 0 1
9928: PUSH
9929: LD_INT 2
9931: PUSH
9932: LD_INT 4
9934: PUSH
9935: LD_INT 5
9937: PUSH
9938: LD_INT 6
9940: PUSH
9941: LD_INT 7
9943: PUSH
9944: LD_INT 8
9946: PUSH
9947: LD_INT 9
9949: PUSH
9950: LD_INT 10
9952: PUSH
9953: LD_INT 11
9955: PUSH
9956: LD_INT 12
9958: PUSH
9959: LD_INT 13
9961: PUSH
9962: LD_INT 14
9964: PUSH
9965: LD_INT 15
9967: PUSH
9968: LD_INT 16
9970: PUSH
9971: LD_INT 17
9973: PUSH
9974: LD_INT 18
9976: PUSH
9977: LD_INT 19
9979: PUSH
9980: LD_INT 20
9982: PUSH
9983: LD_INT 21
9985: PUSH
9986: LD_INT 22
9988: PUSH
9989: LD_INT 23
9991: PUSH
9992: LD_INT 24
9994: PUSH
9995: LD_INT 25
9997: PUSH
9998: LD_INT 26
10000: PUSH
10001: LD_INT 28
10003: PUSH
10004: LD_INT 30
10006: PUSH
10007: LD_INT 31
10009: PUSH
10010: LD_INT 32
10012: PUSH
10013: LD_INT 36
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: PUSH
10047: LD_INT 101
10049: PUSH
10050: LD_INT 102
10052: PUSH
10053: LD_INT 103
10055: PUSH
10056: LD_INT 104
10058: PUSH
10059: LD_INT 105
10061: PUSH
10062: LD_INT 106
10064: PUSH
10065: LD_INT 107
10067: PUSH
10068: LD_INT 108
10070: PUSH
10071: LD_INT 109
10073: PUSH
10074: LD_INT 110
10076: PUSH
10077: LD_INT 111
10079: PUSH
10080: LD_INT 112
10082: PUSH
10083: LD_INT 114
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: ST_TO_ADDR
10105: GO 11892
10107: LD_INT 11
10109: DOUBLE
10110: EQUAL
10111: IFTRUE 10115
10113: GO 10307
10115: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10116: LD_ADDR_VAR 0 1
10120: PUSH
10121: LD_INT 2
10123: PUSH
10124: LD_INT 3
10126: PUSH
10127: LD_INT 4
10129: PUSH
10130: LD_INT 5
10132: PUSH
10133: LD_INT 6
10135: PUSH
10136: LD_INT 7
10138: PUSH
10139: LD_INT 8
10141: PUSH
10142: LD_INT 9
10144: PUSH
10145: LD_INT 10
10147: PUSH
10148: LD_INT 11
10150: PUSH
10151: LD_INT 12
10153: PUSH
10154: LD_INT 13
10156: PUSH
10157: LD_INT 14
10159: PUSH
10160: LD_INT 15
10162: PUSH
10163: LD_INT 16
10165: PUSH
10166: LD_INT 17
10168: PUSH
10169: LD_INT 18
10171: PUSH
10172: LD_INT 19
10174: PUSH
10175: LD_INT 20
10177: PUSH
10178: LD_INT 21
10180: PUSH
10181: LD_INT 22
10183: PUSH
10184: LD_INT 23
10186: PUSH
10187: LD_INT 24
10189: PUSH
10190: LD_INT 25
10192: PUSH
10193: LD_INT 26
10195: PUSH
10196: LD_INT 28
10198: PUSH
10199: LD_INT 30
10201: PUSH
10202: LD_INT 31
10204: PUSH
10205: LD_INT 32
10207: PUSH
10208: LD_INT 34
10210: PUSH
10211: LD_INT 36
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 101
10249: PUSH
10250: LD_INT 102
10252: PUSH
10253: LD_INT 103
10255: PUSH
10256: LD_INT 104
10258: PUSH
10259: LD_INT 105
10261: PUSH
10262: LD_INT 106
10264: PUSH
10265: LD_INT 107
10267: PUSH
10268: LD_INT 108
10270: PUSH
10271: LD_INT 109
10273: PUSH
10274: LD_INT 110
10276: PUSH
10277: LD_INT 111
10279: PUSH
10280: LD_INT 112
10282: PUSH
10283: LD_INT 114
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: ST_TO_ADDR
10305: GO 11892
10307: LD_INT 12
10309: DOUBLE
10310: EQUAL
10311: IFTRUE 10315
10313: GO 10523
10315: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10316: LD_ADDR_VAR 0 1
10320: PUSH
10321: LD_INT 1
10323: PUSH
10324: LD_INT 2
10326: PUSH
10327: LD_INT 3
10329: PUSH
10330: LD_INT 4
10332: PUSH
10333: LD_INT 5
10335: PUSH
10336: LD_INT 6
10338: PUSH
10339: LD_INT 7
10341: PUSH
10342: LD_INT 8
10344: PUSH
10345: LD_INT 9
10347: PUSH
10348: LD_INT 10
10350: PUSH
10351: LD_INT 11
10353: PUSH
10354: LD_INT 12
10356: PUSH
10357: LD_INT 13
10359: PUSH
10360: LD_INT 14
10362: PUSH
10363: LD_INT 15
10365: PUSH
10366: LD_INT 16
10368: PUSH
10369: LD_INT 17
10371: PUSH
10372: LD_INT 18
10374: PUSH
10375: LD_INT 19
10377: PUSH
10378: LD_INT 20
10380: PUSH
10381: LD_INT 21
10383: PUSH
10384: LD_INT 22
10386: PUSH
10387: LD_INT 23
10389: PUSH
10390: LD_INT 24
10392: PUSH
10393: LD_INT 25
10395: PUSH
10396: LD_INT 26
10398: PUSH
10399: LD_INT 27
10401: PUSH
10402: LD_INT 28
10404: PUSH
10405: LD_INT 30
10407: PUSH
10408: LD_INT 31
10410: PUSH
10411: LD_INT 32
10413: PUSH
10414: LD_INT 33
10416: PUSH
10417: LD_INT 34
10419: PUSH
10420: LD_INT 36
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 101
10461: PUSH
10462: LD_INT 102
10464: PUSH
10465: LD_INT 103
10467: PUSH
10468: LD_INT 104
10470: PUSH
10471: LD_INT 105
10473: PUSH
10474: LD_INT 106
10476: PUSH
10477: LD_INT 107
10479: PUSH
10480: LD_INT 108
10482: PUSH
10483: LD_INT 109
10485: PUSH
10486: LD_INT 110
10488: PUSH
10489: LD_INT 111
10491: PUSH
10492: LD_INT 112
10494: PUSH
10495: LD_INT 113
10497: PUSH
10498: LD_INT 114
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: ST_TO_ADDR
10521: GO 11892
10523: LD_INT 13
10525: DOUBLE
10526: EQUAL
10527: IFTRUE 10531
10529: GO 10727
10531: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10532: LD_ADDR_VAR 0 1
10536: PUSH
10537: LD_INT 1
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: LD_INT 3
10545: PUSH
10546: LD_INT 4
10548: PUSH
10549: LD_INT 5
10551: PUSH
10552: LD_INT 8
10554: PUSH
10555: LD_INT 9
10557: PUSH
10558: LD_INT 10
10560: PUSH
10561: LD_INT 11
10563: PUSH
10564: LD_INT 12
10566: PUSH
10567: LD_INT 14
10569: PUSH
10570: LD_INT 15
10572: PUSH
10573: LD_INT 16
10575: PUSH
10576: LD_INT 17
10578: PUSH
10579: LD_INT 18
10581: PUSH
10582: LD_INT 19
10584: PUSH
10585: LD_INT 20
10587: PUSH
10588: LD_INT 21
10590: PUSH
10591: LD_INT 22
10593: PUSH
10594: LD_INT 23
10596: PUSH
10597: LD_INT 24
10599: PUSH
10600: LD_INT 25
10602: PUSH
10603: LD_INT 26
10605: PUSH
10606: LD_INT 27
10608: PUSH
10609: LD_INT 28
10611: PUSH
10612: LD_INT 30
10614: PUSH
10615: LD_INT 31
10617: PUSH
10618: LD_INT 32
10620: PUSH
10621: LD_INT 33
10623: PUSH
10624: LD_INT 34
10626: PUSH
10627: LD_INT 36
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: PUSH
10663: LD_INT 101
10665: PUSH
10666: LD_INT 102
10668: PUSH
10669: LD_INT 103
10671: PUSH
10672: LD_INT 104
10674: PUSH
10675: LD_INT 105
10677: PUSH
10678: LD_INT 106
10680: PUSH
10681: LD_INT 107
10683: PUSH
10684: LD_INT 108
10686: PUSH
10687: LD_INT 109
10689: PUSH
10690: LD_INT 110
10692: PUSH
10693: LD_INT 111
10695: PUSH
10696: LD_INT 112
10698: PUSH
10699: LD_INT 113
10701: PUSH
10702: LD_INT 114
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: ST_TO_ADDR
10725: GO 11892
10727: LD_INT 14
10729: DOUBLE
10730: EQUAL
10731: IFTRUE 10735
10733: GO 10947
10735: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10736: LD_ADDR_VAR 0 1
10740: PUSH
10741: LD_INT 1
10743: PUSH
10744: LD_INT 2
10746: PUSH
10747: LD_INT 3
10749: PUSH
10750: LD_INT 4
10752: PUSH
10753: LD_INT 5
10755: PUSH
10756: LD_INT 6
10758: PUSH
10759: LD_INT 7
10761: PUSH
10762: LD_INT 8
10764: PUSH
10765: LD_INT 9
10767: PUSH
10768: LD_INT 10
10770: PUSH
10771: LD_INT 11
10773: PUSH
10774: LD_INT 12
10776: PUSH
10777: LD_INT 13
10779: PUSH
10780: LD_INT 14
10782: PUSH
10783: LD_INT 15
10785: PUSH
10786: LD_INT 16
10788: PUSH
10789: LD_INT 17
10791: PUSH
10792: LD_INT 18
10794: PUSH
10795: LD_INT 19
10797: PUSH
10798: LD_INT 20
10800: PUSH
10801: LD_INT 21
10803: PUSH
10804: LD_INT 22
10806: PUSH
10807: LD_INT 23
10809: PUSH
10810: LD_INT 24
10812: PUSH
10813: LD_INT 25
10815: PUSH
10816: LD_INT 26
10818: PUSH
10819: LD_INT 27
10821: PUSH
10822: LD_INT 28
10824: PUSH
10825: LD_INT 29
10827: PUSH
10828: LD_INT 30
10830: PUSH
10831: LD_INT 31
10833: PUSH
10834: LD_INT 32
10836: PUSH
10837: LD_INT 33
10839: PUSH
10840: LD_INT 34
10842: PUSH
10843: LD_INT 36
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 101
10885: PUSH
10886: LD_INT 102
10888: PUSH
10889: LD_INT 103
10891: PUSH
10892: LD_INT 104
10894: PUSH
10895: LD_INT 105
10897: PUSH
10898: LD_INT 106
10900: PUSH
10901: LD_INT 107
10903: PUSH
10904: LD_INT 108
10906: PUSH
10907: LD_INT 109
10909: PUSH
10910: LD_INT 110
10912: PUSH
10913: LD_INT 111
10915: PUSH
10916: LD_INT 112
10918: PUSH
10919: LD_INT 113
10921: PUSH
10922: LD_INT 114
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: ST_TO_ADDR
10945: GO 11892
10947: LD_INT 15
10949: DOUBLE
10950: EQUAL
10951: IFTRUE 10955
10953: GO 11167
10955: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10956: LD_ADDR_VAR 0 1
10960: PUSH
10961: LD_INT 1
10963: PUSH
10964: LD_INT 2
10966: PUSH
10967: LD_INT 3
10969: PUSH
10970: LD_INT 4
10972: PUSH
10973: LD_INT 5
10975: PUSH
10976: LD_INT 6
10978: PUSH
10979: LD_INT 7
10981: PUSH
10982: LD_INT 8
10984: PUSH
10985: LD_INT 9
10987: PUSH
10988: LD_INT 10
10990: PUSH
10991: LD_INT 11
10993: PUSH
10994: LD_INT 12
10996: PUSH
10997: LD_INT 13
10999: PUSH
11000: LD_INT 14
11002: PUSH
11003: LD_INT 15
11005: PUSH
11006: LD_INT 16
11008: PUSH
11009: LD_INT 17
11011: PUSH
11012: LD_INT 18
11014: PUSH
11015: LD_INT 19
11017: PUSH
11018: LD_INT 20
11020: PUSH
11021: LD_INT 21
11023: PUSH
11024: LD_INT 22
11026: PUSH
11027: LD_INT 23
11029: PUSH
11030: LD_INT 24
11032: PUSH
11033: LD_INT 25
11035: PUSH
11036: LD_INT 26
11038: PUSH
11039: LD_INT 27
11041: PUSH
11042: LD_INT 28
11044: PUSH
11045: LD_INT 29
11047: PUSH
11048: LD_INT 30
11050: PUSH
11051: LD_INT 31
11053: PUSH
11054: LD_INT 32
11056: PUSH
11057: LD_INT 33
11059: PUSH
11060: LD_INT 34
11062: PUSH
11063: LD_INT 36
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: PUSH
11103: LD_INT 101
11105: PUSH
11106: LD_INT 102
11108: PUSH
11109: LD_INT 103
11111: PUSH
11112: LD_INT 104
11114: PUSH
11115: LD_INT 105
11117: PUSH
11118: LD_INT 106
11120: PUSH
11121: LD_INT 107
11123: PUSH
11124: LD_INT 108
11126: PUSH
11127: LD_INT 109
11129: PUSH
11130: LD_INT 110
11132: PUSH
11133: LD_INT 111
11135: PUSH
11136: LD_INT 112
11138: PUSH
11139: LD_INT 113
11141: PUSH
11142: LD_INT 114
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: ST_TO_ADDR
11165: GO 11892
11167: LD_INT 16
11169: DOUBLE
11170: EQUAL
11171: IFTRUE 11175
11173: GO 11299
11175: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11176: LD_ADDR_VAR 0 1
11180: PUSH
11181: LD_INT 2
11183: PUSH
11184: LD_INT 4
11186: PUSH
11187: LD_INT 5
11189: PUSH
11190: LD_INT 7
11192: PUSH
11193: LD_INT 11
11195: PUSH
11196: LD_INT 12
11198: PUSH
11199: LD_INT 15
11201: PUSH
11202: LD_INT 16
11204: PUSH
11205: LD_INT 20
11207: PUSH
11208: LD_INT 21
11210: PUSH
11211: LD_INT 22
11213: PUSH
11214: LD_INT 23
11216: PUSH
11217: LD_INT 25
11219: PUSH
11220: LD_INT 26
11222: PUSH
11223: LD_INT 30
11225: PUSH
11226: LD_INT 31
11228: PUSH
11229: LD_INT 32
11231: PUSH
11232: LD_INT 33
11234: PUSH
11235: LD_INT 34
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 101
11261: PUSH
11262: LD_INT 102
11264: PUSH
11265: LD_INT 103
11267: PUSH
11268: LD_INT 106
11270: PUSH
11271: LD_INT 108
11273: PUSH
11274: LD_INT 112
11276: PUSH
11277: LD_INT 113
11279: PUSH
11280: LD_INT 114
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: ST_TO_ADDR
11297: GO 11892
11299: LD_INT 17
11301: DOUBLE
11302: EQUAL
11303: IFTRUE 11307
11305: GO 11519
11307: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11308: LD_ADDR_VAR 0 1
11312: PUSH
11313: LD_INT 1
11315: PUSH
11316: LD_INT 2
11318: PUSH
11319: LD_INT 3
11321: PUSH
11322: LD_INT 4
11324: PUSH
11325: LD_INT 5
11327: PUSH
11328: LD_INT 6
11330: PUSH
11331: LD_INT 7
11333: PUSH
11334: LD_INT 8
11336: PUSH
11337: LD_INT 9
11339: PUSH
11340: LD_INT 10
11342: PUSH
11343: LD_INT 11
11345: PUSH
11346: LD_INT 12
11348: PUSH
11349: LD_INT 13
11351: PUSH
11352: LD_INT 14
11354: PUSH
11355: LD_INT 15
11357: PUSH
11358: LD_INT 16
11360: PUSH
11361: LD_INT 17
11363: PUSH
11364: LD_INT 18
11366: PUSH
11367: LD_INT 19
11369: PUSH
11370: LD_INT 20
11372: PUSH
11373: LD_INT 21
11375: PUSH
11376: LD_INT 22
11378: PUSH
11379: LD_INT 23
11381: PUSH
11382: LD_INT 24
11384: PUSH
11385: LD_INT 25
11387: PUSH
11388: LD_INT 26
11390: PUSH
11391: LD_INT 27
11393: PUSH
11394: LD_INT 28
11396: PUSH
11397: LD_INT 29
11399: PUSH
11400: LD_INT 30
11402: PUSH
11403: LD_INT 31
11405: PUSH
11406: LD_INT 32
11408: PUSH
11409: LD_INT 33
11411: PUSH
11412: LD_INT 34
11414: PUSH
11415: LD_INT 36
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 101
11457: PUSH
11458: LD_INT 102
11460: PUSH
11461: LD_INT 103
11463: PUSH
11464: LD_INT 104
11466: PUSH
11467: LD_INT 105
11469: PUSH
11470: LD_INT 106
11472: PUSH
11473: LD_INT 107
11475: PUSH
11476: LD_INT 108
11478: PUSH
11479: LD_INT 109
11481: PUSH
11482: LD_INT 110
11484: PUSH
11485: LD_INT 111
11487: PUSH
11488: LD_INT 112
11490: PUSH
11491: LD_INT 113
11493: PUSH
11494: LD_INT 114
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: ST_TO_ADDR
11517: GO 11892
11519: LD_INT 18
11521: DOUBLE
11522: EQUAL
11523: IFTRUE 11527
11525: GO 11663
11527: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11528: LD_ADDR_VAR 0 1
11532: PUSH
11533: LD_INT 2
11535: PUSH
11536: LD_INT 4
11538: PUSH
11539: LD_INT 5
11541: PUSH
11542: LD_INT 7
11544: PUSH
11545: LD_INT 11
11547: PUSH
11548: LD_INT 12
11550: PUSH
11551: LD_INT 15
11553: PUSH
11554: LD_INT 16
11556: PUSH
11557: LD_INT 20
11559: PUSH
11560: LD_INT 21
11562: PUSH
11563: LD_INT 22
11565: PUSH
11566: LD_INT 23
11568: PUSH
11569: LD_INT 25
11571: PUSH
11572: LD_INT 26
11574: PUSH
11575: LD_INT 30
11577: PUSH
11578: LD_INT 31
11580: PUSH
11581: LD_INT 32
11583: PUSH
11584: LD_INT 33
11586: PUSH
11587: LD_INT 34
11589: PUSH
11590: LD_INT 35
11592: PUSH
11593: LD_INT 36
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 101
11621: PUSH
11622: LD_INT 102
11624: PUSH
11625: LD_INT 103
11627: PUSH
11628: LD_INT 106
11630: PUSH
11631: LD_INT 108
11633: PUSH
11634: LD_INT 112
11636: PUSH
11637: LD_INT 113
11639: PUSH
11640: LD_INT 114
11642: PUSH
11643: LD_INT 115
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: ST_TO_ADDR
11661: GO 11892
11663: LD_INT 19
11665: DOUBLE
11666: EQUAL
11667: IFTRUE 11671
11669: GO 11891
11671: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11672: LD_ADDR_VAR 0 1
11676: PUSH
11677: LD_INT 1
11679: PUSH
11680: LD_INT 2
11682: PUSH
11683: LD_INT 3
11685: PUSH
11686: LD_INT 4
11688: PUSH
11689: LD_INT 5
11691: PUSH
11692: LD_INT 6
11694: PUSH
11695: LD_INT 7
11697: PUSH
11698: LD_INT 8
11700: PUSH
11701: LD_INT 9
11703: PUSH
11704: LD_INT 10
11706: PUSH
11707: LD_INT 11
11709: PUSH
11710: LD_INT 12
11712: PUSH
11713: LD_INT 13
11715: PUSH
11716: LD_INT 14
11718: PUSH
11719: LD_INT 15
11721: PUSH
11722: LD_INT 16
11724: PUSH
11725: LD_INT 17
11727: PUSH
11728: LD_INT 18
11730: PUSH
11731: LD_INT 19
11733: PUSH
11734: LD_INT 20
11736: PUSH
11737: LD_INT 21
11739: PUSH
11740: LD_INT 22
11742: PUSH
11743: LD_INT 23
11745: PUSH
11746: LD_INT 24
11748: PUSH
11749: LD_INT 25
11751: PUSH
11752: LD_INT 26
11754: PUSH
11755: LD_INT 27
11757: PUSH
11758: LD_INT 28
11760: PUSH
11761: LD_INT 29
11763: PUSH
11764: LD_INT 30
11766: PUSH
11767: LD_INT 31
11769: PUSH
11770: LD_INT 32
11772: PUSH
11773: LD_INT 33
11775: PUSH
11776: LD_INT 34
11778: PUSH
11779: LD_INT 35
11781: PUSH
11782: LD_INT 36
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 101
11825: PUSH
11826: LD_INT 102
11828: PUSH
11829: LD_INT 103
11831: PUSH
11832: LD_INT 104
11834: PUSH
11835: LD_INT 105
11837: PUSH
11838: LD_INT 106
11840: PUSH
11841: LD_INT 107
11843: PUSH
11844: LD_INT 108
11846: PUSH
11847: LD_INT 109
11849: PUSH
11850: LD_INT 110
11852: PUSH
11853: LD_INT 111
11855: PUSH
11856: LD_INT 112
11858: PUSH
11859: LD_INT 113
11861: PUSH
11862: LD_INT 114
11864: PUSH
11865: LD_INT 115
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: ST_TO_ADDR
11889: GO 11892
11891: POP
// end else
11892: GO 12111
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11894: LD_ADDR_VAR 0 1
11898: PUSH
11899: LD_INT 1
11901: PUSH
11902: LD_INT 2
11904: PUSH
11905: LD_INT 3
11907: PUSH
11908: LD_INT 4
11910: PUSH
11911: LD_INT 5
11913: PUSH
11914: LD_INT 6
11916: PUSH
11917: LD_INT 7
11919: PUSH
11920: LD_INT 8
11922: PUSH
11923: LD_INT 9
11925: PUSH
11926: LD_INT 10
11928: PUSH
11929: LD_INT 11
11931: PUSH
11932: LD_INT 12
11934: PUSH
11935: LD_INT 13
11937: PUSH
11938: LD_INT 14
11940: PUSH
11941: LD_INT 15
11943: PUSH
11944: LD_INT 16
11946: PUSH
11947: LD_INT 17
11949: PUSH
11950: LD_INT 18
11952: PUSH
11953: LD_INT 19
11955: PUSH
11956: LD_INT 20
11958: PUSH
11959: LD_INT 21
11961: PUSH
11962: LD_INT 22
11964: PUSH
11965: LD_INT 23
11967: PUSH
11968: LD_INT 24
11970: PUSH
11971: LD_INT 25
11973: PUSH
11974: LD_INT 26
11976: PUSH
11977: LD_INT 27
11979: PUSH
11980: LD_INT 28
11982: PUSH
11983: LD_INT 29
11985: PUSH
11986: LD_INT 30
11988: PUSH
11989: LD_INT 31
11991: PUSH
11992: LD_INT 32
11994: PUSH
11995: LD_INT 33
11997: PUSH
11998: LD_INT 34
12000: PUSH
12001: LD_INT 35
12003: PUSH
12004: LD_INT 36
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 101
12047: PUSH
12048: LD_INT 102
12050: PUSH
12051: LD_INT 103
12053: PUSH
12054: LD_INT 104
12056: PUSH
12057: LD_INT 105
12059: PUSH
12060: LD_INT 106
12062: PUSH
12063: LD_INT 107
12065: PUSH
12066: LD_INT 108
12068: PUSH
12069: LD_INT 109
12071: PUSH
12072: LD_INT 110
12074: PUSH
12075: LD_INT 111
12077: PUSH
12078: LD_INT 112
12080: PUSH
12081: LD_INT 113
12083: PUSH
12084: LD_INT 114
12086: PUSH
12087: LD_INT 115
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: ST_TO_ADDR
// if result then
12111: LD_VAR 0 1
12115: IFFALSE 12404
// begin normal :=  ;
12117: LD_ADDR_VAR 0 3
12121: PUSH
12122: LD_STRING 
12124: ST_TO_ADDR
// hardcore :=  ;
12125: LD_ADDR_VAR 0 4
12129: PUSH
12130: LD_STRING 
12132: ST_TO_ADDR
// for i = 1 to normalCounter do
12133: LD_ADDR_VAR 0 5
12137: PUSH
12138: DOUBLE
12139: LD_INT 1
12141: DEC
12142: ST_TO_ADDR
12143: LD_EXP 40
12147: PUSH
12148: FOR_TO
12149: IFFALSE 12250
// begin tmp := 0 ;
12151: LD_ADDR_VAR 0 2
12155: PUSH
12156: LD_STRING 0
12158: ST_TO_ADDR
// if result [ 1 ] then
12159: LD_VAR 0 1
12163: PUSH
12164: LD_INT 1
12166: ARRAY
12167: IFFALSE 12232
// if result [ 1 ] [ 1 ] = i then
12169: LD_VAR 0 1
12173: PUSH
12174: LD_INT 1
12176: ARRAY
12177: PUSH
12178: LD_INT 1
12180: ARRAY
12181: PUSH
12182: LD_VAR 0 5
12186: EQUAL
12187: IFFALSE 12232
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12189: LD_ADDR_VAR 0 1
12193: PUSH
12194: LD_VAR 0 1
12198: PPUSH
12199: LD_INT 1
12201: PPUSH
12202: LD_VAR 0 1
12206: PUSH
12207: LD_INT 1
12209: ARRAY
12210: PPUSH
12211: LD_INT 1
12213: PPUSH
12214: CALL_OW 3
12218: PPUSH
12219: CALL_OW 1
12223: ST_TO_ADDR
// tmp := 1 ;
12224: LD_ADDR_VAR 0 2
12228: PUSH
12229: LD_STRING 1
12231: ST_TO_ADDR
// end ; normal := normal & tmp ;
12232: LD_ADDR_VAR 0 3
12236: PUSH
12237: LD_VAR 0 3
12241: PUSH
12242: LD_VAR 0 2
12246: STR
12247: ST_TO_ADDR
// end ;
12248: GO 12148
12250: POP
12251: POP
// for i = 1 to hardcoreCounter do
12252: LD_ADDR_VAR 0 5
12256: PUSH
12257: DOUBLE
12258: LD_INT 1
12260: DEC
12261: ST_TO_ADDR
12262: LD_EXP 41
12266: PUSH
12267: FOR_TO
12268: IFFALSE 12373
// begin tmp := 0 ;
12270: LD_ADDR_VAR 0 2
12274: PUSH
12275: LD_STRING 0
12277: ST_TO_ADDR
// if result [ 2 ] then
12278: LD_VAR 0 1
12282: PUSH
12283: LD_INT 2
12285: ARRAY
12286: IFFALSE 12355
// if result [ 2 ] [ 1 ] = 100 + i then
12288: LD_VAR 0 1
12292: PUSH
12293: LD_INT 2
12295: ARRAY
12296: PUSH
12297: LD_INT 1
12299: ARRAY
12300: PUSH
12301: LD_INT 100
12303: PUSH
12304: LD_VAR 0 5
12308: PLUS
12309: EQUAL
12310: IFFALSE 12355
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12312: LD_ADDR_VAR 0 1
12316: PUSH
12317: LD_VAR 0 1
12321: PPUSH
12322: LD_INT 2
12324: PPUSH
12325: LD_VAR 0 1
12329: PUSH
12330: LD_INT 2
12332: ARRAY
12333: PPUSH
12334: LD_INT 1
12336: PPUSH
12337: CALL_OW 3
12341: PPUSH
12342: CALL_OW 1
12346: ST_TO_ADDR
// tmp := 1 ;
12347: LD_ADDR_VAR 0 2
12351: PUSH
12352: LD_STRING 1
12354: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12355: LD_ADDR_VAR 0 4
12359: PUSH
12360: LD_VAR 0 4
12364: PUSH
12365: LD_VAR 0 2
12369: STR
12370: ST_TO_ADDR
// end ;
12371: GO 12267
12373: POP
12374: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12375: LD_STRING getStreamItemsFromMission("
12377: PUSH
12378: LD_VAR 0 3
12382: STR
12383: PUSH
12384: LD_STRING ","
12386: STR
12387: PUSH
12388: LD_VAR 0 4
12392: STR
12393: PUSH
12394: LD_STRING ")
12396: STR
12397: PPUSH
12398: CALL_OW 559
// end else
12402: GO 12411
// ToLua ( getStreamItemsFromMission("","") ) ;
12404: LD_STRING getStreamItemsFromMission("","")
12406: PPUSH
12407: CALL_OW 559
// end ;
12411: LD_VAR 0 1
12415: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12416: LD_EXP 39
12420: PUSH
12421: LD_EXP 44
12425: AND
12426: IFFALSE 12550
12428: GO 12430
12430: DISABLE
12431: LD_INT 0
12433: PPUSH
12434: PPUSH
// begin enable ;
12435: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12436: LD_ADDR_VAR 0 2
12440: PUSH
12441: LD_INT 22
12443: PUSH
12444: LD_OWVAR 2
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 2
12455: PUSH
12456: LD_INT 34
12458: PUSH
12459: LD_INT 7
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 34
12468: PUSH
12469: LD_INT 45
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 34
12478: PUSH
12479: LD_INT 28
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PUSH
12486: LD_INT 34
12488: PUSH
12489: LD_INT 47
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PPUSH
12507: CALL_OW 69
12511: ST_TO_ADDR
// if not tmp then
12512: LD_VAR 0 2
12516: NOT
12517: IFFALSE 12521
// exit ;
12519: GO 12550
// for i in tmp do
12521: LD_ADDR_VAR 0 1
12525: PUSH
12526: LD_VAR 0 2
12530: PUSH
12531: FOR_IN
12532: IFFALSE 12548
// begin SetLives ( i , 0 ) ;
12534: LD_VAR 0 1
12538: PPUSH
12539: LD_INT 0
12541: PPUSH
12542: CALL_OW 234
// end ;
12546: GO 12531
12548: POP
12549: POP
// end ;
12550: PPOPN 2
12552: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12553: LD_EXP 39
12557: PUSH
12558: LD_EXP 45
12562: AND
12563: IFFALSE 12647
12565: GO 12567
12567: DISABLE
12568: LD_INT 0
12570: PPUSH
12571: PPUSH
// begin enable ;
12572: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12573: LD_ADDR_VAR 0 2
12577: PUSH
12578: LD_INT 22
12580: PUSH
12581: LD_OWVAR 2
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 32
12592: PUSH
12593: LD_INT 3
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PPUSH
12604: CALL_OW 69
12608: ST_TO_ADDR
// if not tmp then
12609: LD_VAR 0 2
12613: NOT
12614: IFFALSE 12618
// exit ;
12616: GO 12647
// for i in tmp do
12618: LD_ADDR_VAR 0 1
12622: PUSH
12623: LD_VAR 0 2
12627: PUSH
12628: FOR_IN
12629: IFFALSE 12645
// begin SetLives ( i , 0 ) ;
12631: LD_VAR 0 1
12635: PPUSH
12636: LD_INT 0
12638: PPUSH
12639: CALL_OW 234
// end ;
12643: GO 12628
12645: POP
12646: POP
// end ;
12647: PPOPN 2
12649: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12650: LD_EXP 39
12654: PUSH
12655: LD_EXP 42
12659: AND
12660: IFFALSE 12753
12662: GO 12664
12664: DISABLE
12665: LD_INT 0
12667: PPUSH
// begin enable ;
12668: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12669: LD_ADDR_VAR 0 1
12673: PUSH
12674: LD_INT 22
12676: PUSH
12677: LD_OWVAR 2
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: LD_INT 2
12688: PUSH
12689: LD_INT 25
12691: PUSH
12692: LD_INT 5
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PUSH
12699: LD_INT 25
12701: PUSH
12702: LD_INT 9
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 25
12711: PUSH
12712: LD_INT 8
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PPUSH
12729: CALL_OW 69
12733: PUSH
12734: FOR_IN
12735: IFFALSE 12751
// begin SetClass ( i , 1 ) ;
12737: LD_VAR 0 1
12741: PPUSH
12742: LD_INT 1
12744: PPUSH
12745: CALL_OW 336
// end ;
12749: GO 12734
12751: POP
12752: POP
// end ;
12753: PPOPN 1
12755: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12756: LD_EXP 39
12760: PUSH
12761: LD_EXP 43
12765: AND
12766: PUSH
12767: LD_OWVAR 65
12771: PUSH
12772: LD_INT 7
12774: LESS
12775: AND
12776: IFFALSE 12790
12778: GO 12780
12780: DISABLE
// begin enable ;
12781: ENABLE
// game_speed := 7 ;
12782: LD_ADDR_OWVAR 65
12786: PUSH
12787: LD_INT 7
12789: ST_TO_ADDR
// end ;
12790: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12791: LD_EXP 39
12795: PUSH
12796: LD_EXP 46
12800: AND
12801: IFFALSE 13003
12803: GO 12805
12805: DISABLE
12806: LD_INT 0
12808: PPUSH
12809: PPUSH
12810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12811: LD_ADDR_VAR 0 3
12815: PUSH
12816: LD_INT 81
12818: PUSH
12819: LD_OWVAR 2
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: LD_INT 21
12830: PUSH
12831: LD_INT 1
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PPUSH
12842: CALL_OW 69
12846: ST_TO_ADDR
// if not tmp then
12847: LD_VAR 0 3
12851: NOT
12852: IFFALSE 12856
// exit ;
12854: GO 13003
// if tmp > 5 then
12856: LD_VAR 0 3
12860: PUSH
12861: LD_INT 5
12863: GREATER
12864: IFFALSE 12876
// k := 5 else
12866: LD_ADDR_VAR 0 2
12870: PUSH
12871: LD_INT 5
12873: ST_TO_ADDR
12874: GO 12886
// k := tmp ;
12876: LD_ADDR_VAR 0 2
12880: PUSH
12881: LD_VAR 0 3
12885: ST_TO_ADDR
// for i := 1 to k do
12886: LD_ADDR_VAR 0 1
12890: PUSH
12891: DOUBLE
12892: LD_INT 1
12894: DEC
12895: ST_TO_ADDR
12896: LD_VAR 0 2
12900: PUSH
12901: FOR_TO
12902: IFFALSE 13001
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12904: LD_VAR 0 3
12908: PUSH
12909: LD_VAR 0 1
12913: ARRAY
12914: PPUSH
12915: LD_VAR 0 1
12919: PUSH
12920: LD_INT 4
12922: MOD
12923: PUSH
12924: LD_INT 1
12926: PLUS
12927: PPUSH
12928: CALL_OW 259
12932: PUSH
12933: LD_INT 10
12935: LESS
12936: IFFALSE 12999
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12938: LD_VAR 0 3
12942: PUSH
12943: LD_VAR 0 1
12947: ARRAY
12948: PPUSH
12949: LD_VAR 0 1
12953: PUSH
12954: LD_INT 4
12956: MOD
12957: PUSH
12958: LD_INT 1
12960: PLUS
12961: PPUSH
12962: LD_VAR 0 3
12966: PUSH
12967: LD_VAR 0 1
12971: ARRAY
12972: PPUSH
12973: LD_VAR 0 1
12977: PUSH
12978: LD_INT 4
12980: MOD
12981: PUSH
12982: LD_INT 1
12984: PLUS
12985: PPUSH
12986: CALL_OW 259
12990: PUSH
12991: LD_INT 1
12993: PLUS
12994: PPUSH
12995: CALL_OW 237
12999: GO 12901
13001: POP
13002: POP
// end ;
13003: PPOPN 3
13005: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13006: LD_EXP 39
13010: PUSH
13011: LD_EXP 47
13015: AND
13016: IFFALSE 13036
13018: GO 13020
13020: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13021: LD_INT 4
13023: PPUSH
13024: LD_OWVAR 2
13028: PPUSH
13029: LD_INT 0
13031: PPUSH
13032: CALL_OW 324
13036: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13037: LD_EXP 39
13041: PUSH
13042: LD_EXP 76
13046: AND
13047: IFFALSE 13067
13049: GO 13051
13051: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13052: LD_INT 19
13054: PPUSH
13055: LD_OWVAR 2
13059: PPUSH
13060: LD_INT 0
13062: PPUSH
13063: CALL_OW 324
13067: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13068: LD_EXP 39
13072: PUSH
13073: LD_EXP 48
13077: AND
13078: IFFALSE 13180
13080: GO 13082
13082: DISABLE
13083: LD_INT 0
13085: PPUSH
13086: PPUSH
// begin enable ;
13087: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13088: LD_ADDR_VAR 0 2
13092: PUSH
13093: LD_INT 22
13095: PUSH
13096: LD_OWVAR 2
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 2
13107: PUSH
13108: LD_INT 34
13110: PUSH
13111: LD_INT 11
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PUSH
13118: LD_INT 34
13120: PUSH
13121: LD_INT 30
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: LIST
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PPUSH
13137: CALL_OW 69
13141: ST_TO_ADDR
// if not tmp then
13142: LD_VAR 0 2
13146: NOT
13147: IFFALSE 13151
// exit ;
13149: GO 13180
// for i in tmp do
13151: LD_ADDR_VAR 0 1
13155: PUSH
13156: LD_VAR 0 2
13160: PUSH
13161: FOR_IN
13162: IFFALSE 13178
// begin SetLives ( i , 0 ) ;
13164: LD_VAR 0 1
13168: PPUSH
13169: LD_INT 0
13171: PPUSH
13172: CALL_OW 234
// end ;
13176: GO 13161
13178: POP
13179: POP
// end ;
13180: PPOPN 2
13182: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13183: LD_EXP 39
13187: PUSH
13188: LD_EXP 49
13192: AND
13193: IFFALSE 13213
13195: GO 13197
13197: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13198: LD_INT 32
13200: PPUSH
13201: LD_OWVAR 2
13205: PPUSH
13206: LD_INT 0
13208: PPUSH
13209: CALL_OW 324
13213: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13214: LD_EXP 39
13218: PUSH
13219: LD_EXP 50
13223: AND
13224: IFFALSE 13405
13226: GO 13228
13228: DISABLE
13229: LD_INT 0
13231: PPUSH
13232: PPUSH
13233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13234: LD_ADDR_VAR 0 2
13238: PUSH
13239: LD_INT 22
13241: PUSH
13242: LD_OWVAR 2
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 33
13253: PUSH
13254: LD_INT 3
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PPUSH
13265: CALL_OW 69
13269: ST_TO_ADDR
// if not tmp then
13270: LD_VAR 0 2
13274: NOT
13275: IFFALSE 13279
// exit ;
13277: GO 13405
// side := 0 ;
13279: LD_ADDR_VAR 0 3
13283: PUSH
13284: LD_INT 0
13286: ST_TO_ADDR
// for i := 1 to 8 do
13287: LD_ADDR_VAR 0 1
13291: PUSH
13292: DOUBLE
13293: LD_INT 1
13295: DEC
13296: ST_TO_ADDR
13297: LD_INT 8
13299: PUSH
13300: FOR_TO
13301: IFFALSE 13349
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13303: LD_OWVAR 2
13307: PUSH
13308: LD_VAR 0 1
13312: NONEQUAL
13313: PUSH
13314: LD_OWVAR 2
13318: PPUSH
13319: LD_VAR 0 1
13323: PPUSH
13324: CALL_OW 81
13328: PUSH
13329: LD_INT 2
13331: EQUAL
13332: AND
13333: IFFALSE 13347
// begin side := i ;
13335: LD_ADDR_VAR 0 3
13339: PUSH
13340: LD_VAR 0 1
13344: ST_TO_ADDR
// break ;
13345: GO 13349
// end ;
13347: GO 13300
13349: POP
13350: POP
// if not side then
13351: LD_VAR 0 3
13355: NOT
13356: IFFALSE 13360
// exit ;
13358: GO 13405
// for i := 1 to tmp do
13360: LD_ADDR_VAR 0 1
13364: PUSH
13365: DOUBLE
13366: LD_INT 1
13368: DEC
13369: ST_TO_ADDR
13370: LD_VAR 0 2
13374: PUSH
13375: FOR_TO
13376: IFFALSE 13403
// if Prob ( 60 ) then
13378: LD_INT 60
13380: PPUSH
13381: CALL_OW 13
13385: IFFALSE 13401
// SetSide ( i , side ) ;
13387: LD_VAR 0 1
13391: PPUSH
13392: LD_VAR 0 3
13396: PPUSH
13397: CALL_OW 235
13401: GO 13375
13403: POP
13404: POP
// end ;
13405: PPOPN 3
13407: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13408: LD_EXP 39
13412: PUSH
13413: LD_EXP 52
13417: AND
13418: IFFALSE 13537
13420: GO 13422
13422: DISABLE
13423: LD_INT 0
13425: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13426: LD_ADDR_VAR 0 1
13430: PUSH
13431: LD_INT 22
13433: PUSH
13434: LD_OWVAR 2
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: LD_INT 21
13445: PUSH
13446: LD_INT 1
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 3
13455: PUSH
13456: LD_INT 23
13458: PUSH
13459: LD_INT 0
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: LIST
13474: PPUSH
13475: CALL_OW 69
13479: PUSH
13480: FOR_IN
13481: IFFALSE 13535
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13483: LD_VAR 0 1
13487: PPUSH
13488: CALL_OW 257
13492: PUSH
13493: LD_INT 1
13495: PUSH
13496: LD_INT 2
13498: PUSH
13499: LD_INT 3
13501: PUSH
13502: LD_INT 4
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: IN
13511: IFFALSE 13533
// SetClass ( un , rand ( 1 , 4 ) ) ;
13513: LD_VAR 0 1
13517: PPUSH
13518: LD_INT 1
13520: PPUSH
13521: LD_INT 4
13523: PPUSH
13524: CALL_OW 12
13528: PPUSH
13529: CALL_OW 336
13533: GO 13480
13535: POP
13536: POP
// end ;
13537: PPOPN 1
13539: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13540: LD_EXP 39
13544: PUSH
13545: LD_EXP 51
13549: AND
13550: IFFALSE 13629
13552: GO 13554
13554: DISABLE
13555: LD_INT 0
13557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13558: LD_ADDR_VAR 0 1
13562: PUSH
13563: LD_INT 22
13565: PUSH
13566: LD_OWVAR 2
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 21
13577: PUSH
13578: LD_INT 3
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PPUSH
13589: CALL_OW 69
13593: ST_TO_ADDR
// if not tmp then
13594: LD_VAR 0 1
13598: NOT
13599: IFFALSE 13603
// exit ;
13601: GO 13629
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13603: LD_VAR 0 1
13607: PUSH
13608: LD_INT 1
13610: PPUSH
13611: LD_VAR 0 1
13615: PPUSH
13616: CALL_OW 12
13620: ARRAY
13621: PPUSH
13622: LD_INT 100
13624: PPUSH
13625: CALL_OW 234
// end ;
13629: PPOPN 1
13631: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13632: LD_EXP 39
13636: PUSH
13637: LD_EXP 53
13641: AND
13642: IFFALSE 13740
13644: GO 13646
13646: DISABLE
13647: LD_INT 0
13649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13650: LD_ADDR_VAR 0 1
13654: PUSH
13655: LD_INT 22
13657: PUSH
13658: LD_OWVAR 2
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PUSH
13667: LD_INT 21
13669: PUSH
13670: LD_INT 1
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PPUSH
13681: CALL_OW 69
13685: ST_TO_ADDR
// if not tmp then
13686: LD_VAR 0 1
13690: NOT
13691: IFFALSE 13695
// exit ;
13693: GO 13740
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13695: LD_VAR 0 1
13699: PUSH
13700: LD_INT 1
13702: PPUSH
13703: LD_VAR 0 1
13707: PPUSH
13708: CALL_OW 12
13712: ARRAY
13713: PPUSH
13714: LD_INT 1
13716: PPUSH
13717: LD_INT 4
13719: PPUSH
13720: CALL_OW 12
13724: PPUSH
13725: LD_INT 3000
13727: PPUSH
13728: LD_INT 9000
13730: PPUSH
13731: CALL_OW 12
13735: PPUSH
13736: CALL_OW 492
// end ;
13740: PPOPN 1
13742: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13743: LD_EXP 39
13747: PUSH
13748: LD_EXP 54
13752: AND
13753: IFFALSE 13773
13755: GO 13757
13757: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13758: LD_INT 1
13760: PPUSH
13761: LD_OWVAR 2
13765: PPUSH
13766: LD_INT 0
13768: PPUSH
13769: CALL_OW 324
13773: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13774: LD_EXP 39
13778: PUSH
13779: LD_EXP 55
13783: AND
13784: IFFALSE 13867
13786: GO 13788
13788: DISABLE
13789: LD_INT 0
13791: PPUSH
13792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13793: LD_ADDR_VAR 0 2
13797: PUSH
13798: LD_INT 22
13800: PUSH
13801: LD_OWVAR 2
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: LD_INT 21
13812: PUSH
13813: LD_INT 3
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PPUSH
13824: CALL_OW 69
13828: ST_TO_ADDR
// if not tmp then
13829: LD_VAR 0 2
13833: NOT
13834: IFFALSE 13838
// exit ;
13836: GO 13867
// for i in tmp do
13838: LD_ADDR_VAR 0 1
13842: PUSH
13843: LD_VAR 0 2
13847: PUSH
13848: FOR_IN
13849: IFFALSE 13865
// SetBLevel ( i , 10 ) ;
13851: LD_VAR 0 1
13855: PPUSH
13856: LD_INT 10
13858: PPUSH
13859: CALL_OW 241
13863: GO 13848
13865: POP
13866: POP
// end ;
13867: PPOPN 2
13869: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13870: LD_EXP 39
13874: PUSH
13875: LD_EXP 56
13879: AND
13880: IFFALSE 13991
13882: GO 13884
13884: DISABLE
13885: LD_INT 0
13887: PPUSH
13888: PPUSH
13889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13890: LD_ADDR_VAR 0 3
13894: PUSH
13895: LD_INT 22
13897: PUSH
13898: LD_OWVAR 2
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 25
13909: PUSH
13910: LD_INT 1
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PPUSH
13921: CALL_OW 69
13925: ST_TO_ADDR
// if not tmp then
13926: LD_VAR 0 3
13930: NOT
13931: IFFALSE 13935
// exit ;
13933: GO 13991
// un := tmp [ rand ( 1 , tmp ) ] ;
13935: LD_ADDR_VAR 0 2
13939: PUSH
13940: LD_VAR 0 3
13944: PUSH
13945: LD_INT 1
13947: PPUSH
13948: LD_VAR 0 3
13952: PPUSH
13953: CALL_OW 12
13957: ARRAY
13958: ST_TO_ADDR
// if Crawls ( un ) then
13959: LD_VAR 0 2
13963: PPUSH
13964: CALL_OW 318
13968: IFFALSE 13979
// ComWalk ( un ) ;
13970: LD_VAR 0 2
13974: PPUSH
13975: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13979: LD_VAR 0 2
13983: PPUSH
13984: LD_INT 5
13986: PPUSH
13987: CALL_OW 336
// end ;
13991: PPOPN 3
13993: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13994: LD_EXP 39
13998: PUSH
13999: LD_EXP 57
14003: AND
14004: PUSH
14005: LD_OWVAR 67
14009: PUSH
14010: LD_INT 3
14012: LESS
14013: AND
14014: IFFALSE 14033
14016: GO 14018
14018: DISABLE
// Difficulty := Difficulty + 1 ;
14019: LD_ADDR_OWVAR 67
14023: PUSH
14024: LD_OWVAR 67
14028: PUSH
14029: LD_INT 1
14031: PLUS
14032: ST_TO_ADDR
14033: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14034: LD_EXP 39
14038: PUSH
14039: LD_EXP 58
14043: AND
14044: IFFALSE 14147
14046: GO 14048
14048: DISABLE
14049: LD_INT 0
14051: PPUSH
// begin for i := 1 to 5 do
14052: LD_ADDR_VAR 0 1
14056: PUSH
14057: DOUBLE
14058: LD_INT 1
14060: DEC
14061: ST_TO_ADDR
14062: LD_INT 5
14064: PUSH
14065: FOR_TO
14066: IFFALSE 14145
// begin uc_nation := nation_nature ;
14068: LD_ADDR_OWVAR 21
14072: PUSH
14073: LD_INT 0
14075: ST_TO_ADDR
// uc_side := 0 ;
14076: LD_ADDR_OWVAR 20
14080: PUSH
14081: LD_INT 0
14083: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14084: LD_ADDR_OWVAR 29
14088: PUSH
14089: LD_INT 12
14091: PUSH
14092: LD_INT 12
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: ST_TO_ADDR
// hc_agressivity := 20 ;
14099: LD_ADDR_OWVAR 35
14103: PUSH
14104: LD_INT 20
14106: ST_TO_ADDR
// hc_class := class_tiger ;
14107: LD_ADDR_OWVAR 28
14111: PUSH
14112: LD_INT 14
14114: ST_TO_ADDR
// hc_gallery :=  ;
14115: LD_ADDR_OWVAR 33
14119: PUSH
14120: LD_STRING 
14122: ST_TO_ADDR
// hc_name :=  ;
14123: LD_ADDR_OWVAR 26
14127: PUSH
14128: LD_STRING 
14130: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14131: CALL_OW 44
14135: PPUSH
14136: LD_INT 0
14138: PPUSH
14139: CALL_OW 51
// end ;
14143: GO 14065
14145: POP
14146: POP
// end ;
14147: PPOPN 1
14149: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14150: LD_EXP 39
14154: PUSH
14155: LD_EXP 59
14159: AND
14160: IFFALSE 14169
14162: GO 14164
14164: DISABLE
// StreamSibBomb ;
14165: CALL 14170 0 0
14169: END
// export function StreamSibBomb ; var i , x , y ; begin
14170: LD_INT 0
14172: PPUSH
14173: PPUSH
14174: PPUSH
14175: PPUSH
// result := false ;
14176: LD_ADDR_VAR 0 1
14180: PUSH
14181: LD_INT 0
14183: ST_TO_ADDR
// for i := 1 to 16 do
14184: LD_ADDR_VAR 0 2
14188: PUSH
14189: DOUBLE
14190: LD_INT 1
14192: DEC
14193: ST_TO_ADDR
14194: LD_INT 16
14196: PUSH
14197: FOR_TO
14198: IFFALSE 14397
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14200: LD_ADDR_VAR 0 3
14204: PUSH
14205: LD_INT 10
14207: PUSH
14208: LD_INT 20
14210: PUSH
14211: LD_INT 30
14213: PUSH
14214: LD_INT 40
14216: PUSH
14217: LD_INT 50
14219: PUSH
14220: LD_INT 60
14222: PUSH
14223: LD_INT 70
14225: PUSH
14226: LD_INT 80
14228: PUSH
14229: LD_INT 90
14231: PUSH
14232: LD_INT 100
14234: PUSH
14235: LD_INT 110
14237: PUSH
14238: LD_INT 120
14240: PUSH
14241: LD_INT 130
14243: PUSH
14244: LD_INT 140
14246: PUSH
14247: LD_INT 150
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: PUSH
14267: LD_INT 1
14269: PPUSH
14270: LD_INT 15
14272: PPUSH
14273: CALL_OW 12
14277: ARRAY
14278: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14279: LD_ADDR_VAR 0 4
14283: PUSH
14284: LD_INT 10
14286: PUSH
14287: LD_INT 20
14289: PUSH
14290: LD_INT 30
14292: PUSH
14293: LD_INT 40
14295: PUSH
14296: LD_INT 50
14298: PUSH
14299: LD_INT 60
14301: PUSH
14302: LD_INT 70
14304: PUSH
14305: LD_INT 80
14307: PUSH
14308: LD_INT 90
14310: PUSH
14311: LD_INT 100
14313: PUSH
14314: LD_INT 110
14316: PUSH
14317: LD_INT 120
14319: PUSH
14320: LD_INT 130
14322: PUSH
14323: LD_INT 140
14325: PUSH
14326: LD_INT 150
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: PUSH
14346: LD_INT 1
14348: PPUSH
14349: LD_INT 15
14351: PPUSH
14352: CALL_OW 12
14356: ARRAY
14357: ST_TO_ADDR
// if ValidHex ( x , y ) then
14358: LD_VAR 0 3
14362: PPUSH
14363: LD_VAR 0 4
14367: PPUSH
14368: CALL_OW 488
14372: IFFALSE 14395
// begin result := [ x , y ] ;
14374: LD_ADDR_VAR 0 1
14378: PUSH
14379: LD_VAR 0 3
14383: PUSH
14384: LD_VAR 0 4
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: ST_TO_ADDR
// break ;
14393: GO 14397
// end ; end ;
14395: GO 14197
14397: POP
14398: POP
// if result then
14399: LD_VAR 0 1
14403: IFFALSE 14463
// begin ToLua ( playSibBomb() ) ;
14405: LD_STRING playSibBomb()
14407: PPUSH
14408: CALL_OW 559
// wait ( 0 0$14 ) ;
14412: LD_INT 490
14414: PPUSH
14415: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14419: LD_VAR 0 1
14423: PUSH
14424: LD_INT 1
14426: ARRAY
14427: PPUSH
14428: LD_VAR 0 1
14432: PUSH
14433: LD_INT 2
14435: ARRAY
14436: PPUSH
14437: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14441: LD_VAR 0 1
14445: PUSH
14446: LD_INT 1
14448: ARRAY
14449: PPUSH
14450: LD_VAR 0 1
14454: PUSH
14455: LD_INT 2
14457: ARRAY
14458: PPUSH
14459: CALL_OW 429
// end ; end ;
14463: LD_VAR 0 1
14467: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14468: LD_EXP 39
14472: PUSH
14473: LD_EXP 61
14477: AND
14478: IFFALSE 14490
14480: GO 14482
14482: DISABLE
// YouLost (  ) ;
14483: LD_STRING 
14485: PPUSH
14486: CALL_OW 104
14490: END
// every 0 0$1 trigger StreamModeActive and sFog do
14491: LD_EXP 39
14495: PUSH
14496: LD_EXP 60
14500: AND
14501: IFFALSE 14515
14503: GO 14505
14505: DISABLE
// FogOff ( your_side ) ;
14506: LD_OWVAR 2
14510: PPUSH
14511: CALL_OW 344
14515: END
// every 0 0$1 trigger StreamModeActive and sSun do
14516: LD_EXP 39
14520: PUSH
14521: LD_EXP 62
14525: AND
14526: IFFALSE 14554
14528: GO 14530
14530: DISABLE
// begin solar_recharge_percent := 0 ;
14531: LD_ADDR_OWVAR 79
14535: PUSH
14536: LD_INT 0
14538: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14539: LD_INT 10500
14541: PPUSH
14542: CALL_OW 67
// solar_recharge_percent := 100 ;
14546: LD_ADDR_OWVAR 79
14550: PUSH
14551: LD_INT 100
14553: ST_TO_ADDR
// end ;
14554: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14555: LD_EXP 39
14559: PUSH
14560: LD_EXP 63
14564: AND
14565: IFFALSE 14804
14567: GO 14569
14569: DISABLE
14570: LD_INT 0
14572: PPUSH
14573: PPUSH
14574: PPUSH
// begin tmp := [ ] ;
14575: LD_ADDR_VAR 0 3
14579: PUSH
14580: EMPTY
14581: ST_TO_ADDR
// for i := 1 to 6 do
14582: LD_ADDR_VAR 0 1
14586: PUSH
14587: DOUBLE
14588: LD_INT 1
14590: DEC
14591: ST_TO_ADDR
14592: LD_INT 6
14594: PUSH
14595: FOR_TO
14596: IFFALSE 14701
// begin uc_nation := nation_nature ;
14598: LD_ADDR_OWVAR 21
14602: PUSH
14603: LD_INT 0
14605: ST_TO_ADDR
// uc_side := 0 ;
14606: LD_ADDR_OWVAR 20
14610: PUSH
14611: LD_INT 0
14613: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14614: LD_ADDR_OWVAR 29
14618: PUSH
14619: LD_INT 12
14621: PUSH
14622: LD_INT 12
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: ST_TO_ADDR
// hc_agressivity := 20 ;
14629: LD_ADDR_OWVAR 35
14633: PUSH
14634: LD_INT 20
14636: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14637: LD_ADDR_OWVAR 28
14641: PUSH
14642: LD_INT 17
14644: ST_TO_ADDR
// hc_gallery :=  ;
14645: LD_ADDR_OWVAR 33
14649: PUSH
14650: LD_STRING 
14652: ST_TO_ADDR
// hc_name :=  ;
14653: LD_ADDR_OWVAR 26
14657: PUSH
14658: LD_STRING 
14660: ST_TO_ADDR
// un := CreateHuman ;
14661: LD_ADDR_VAR 0 2
14665: PUSH
14666: CALL_OW 44
14670: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14671: LD_VAR 0 2
14675: PPUSH
14676: LD_INT 1
14678: PPUSH
14679: CALL_OW 51
// tmp := tmp ^ un ;
14683: LD_ADDR_VAR 0 3
14687: PUSH
14688: LD_VAR 0 3
14692: PUSH
14693: LD_VAR 0 2
14697: ADD
14698: ST_TO_ADDR
// end ;
14699: GO 14595
14701: POP
14702: POP
// repeat wait ( 0 0$1 ) ;
14703: LD_INT 35
14705: PPUSH
14706: CALL_OW 67
// for un in tmp do
14710: LD_ADDR_VAR 0 2
14714: PUSH
14715: LD_VAR 0 3
14719: PUSH
14720: FOR_IN
14721: IFFALSE 14795
// begin if IsDead ( un ) then
14723: LD_VAR 0 2
14727: PPUSH
14728: CALL_OW 301
14732: IFFALSE 14752
// begin tmp := tmp diff un ;
14734: LD_ADDR_VAR 0 3
14738: PUSH
14739: LD_VAR 0 3
14743: PUSH
14744: LD_VAR 0 2
14748: DIFF
14749: ST_TO_ADDR
// continue ;
14750: GO 14720
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14752: LD_VAR 0 2
14756: PPUSH
14757: LD_INT 3
14759: PUSH
14760: LD_INT 22
14762: PUSH
14763: LD_INT 0
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PPUSH
14774: CALL_OW 69
14778: PPUSH
14779: LD_VAR 0 2
14783: PPUSH
14784: CALL_OW 74
14788: PPUSH
14789: CALL_OW 115
// end ;
14793: GO 14720
14795: POP
14796: POP
// until not tmp ;
14797: LD_VAR 0 3
14801: NOT
14802: IFFALSE 14703
// end ;
14804: PPOPN 3
14806: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14807: LD_EXP 39
14811: PUSH
14812: LD_EXP 64
14816: AND
14817: IFFALSE 14871
14819: GO 14821
14821: DISABLE
// begin ToLua ( displayTroll(); ) ;
14822: LD_STRING displayTroll();
14824: PPUSH
14825: CALL_OW 559
// wait ( 3 3$00 ) ;
14829: LD_INT 6300
14831: PPUSH
14832: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14836: LD_STRING hideTroll();
14838: PPUSH
14839: CALL_OW 559
// wait ( 1 1$00 ) ;
14843: LD_INT 2100
14845: PPUSH
14846: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14850: LD_STRING displayTroll();
14852: PPUSH
14853: CALL_OW 559
// wait ( 1 1$00 ) ;
14857: LD_INT 2100
14859: PPUSH
14860: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14864: LD_STRING hideTroll();
14866: PPUSH
14867: CALL_OW 559
// end ;
14871: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14872: LD_EXP 39
14876: PUSH
14877: LD_EXP 65
14881: AND
14882: IFFALSE 14945
14884: GO 14886
14886: DISABLE
14887: LD_INT 0
14889: PPUSH
// begin p := 0 ;
14890: LD_ADDR_VAR 0 1
14894: PUSH
14895: LD_INT 0
14897: ST_TO_ADDR
// repeat game_speed := 1 ;
14898: LD_ADDR_OWVAR 65
14902: PUSH
14903: LD_INT 1
14905: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14906: LD_INT 35
14908: PPUSH
14909: CALL_OW 67
// p := p + 1 ;
14913: LD_ADDR_VAR 0 1
14917: PUSH
14918: LD_VAR 0 1
14922: PUSH
14923: LD_INT 1
14925: PLUS
14926: ST_TO_ADDR
// until p >= 60 ;
14927: LD_VAR 0 1
14931: PUSH
14932: LD_INT 60
14934: GREATEREQUAL
14935: IFFALSE 14898
// game_speed := 4 ;
14937: LD_ADDR_OWVAR 65
14941: PUSH
14942: LD_INT 4
14944: ST_TO_ADDR
// end ;
14945: PPOPN 1
14947: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14948: LD_EXP 39
14952: PUSH
14953: LD_EXP 66
14957: AND
14958: IFFALSE 15104
14960: GO 14962
14962: DISABLE
14963: LD_INT 0
14965: PPUSH
14966: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14967: LD_ADDR_VAR 0 1
14971: PUSH
14972: LD_INT 22
14974: PUSH
14975: LD_OWVAR 2
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 2
14986: PUSH
14987: LD_INT 30
14989: PUSH
14990: LD_INT 0
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 30
14999: PUSH
15000: LD_INT 1
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: LIST
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PPUSH
15016: CALL_OW 69
15020: ST_TO_ADDR
// if not depot then
15021: LD_VAR 0 1
15025: NOT
15026: IFFALSE 15030
// exit ;
15028: GO 15104
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15030: LD_ADDR_VAR 0 2
15034: PUSH
15035: LD_VAR 0 1
15039: PUSH
15040: LD_INT 1
15042: PPUSH
15043: LD_VAR 0 1
15047: PPUSH
15048: CALL_OW 12
15052: ARRAY
15053: PPUSH
15054: CALL_OW 274
15058: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15059: LD_VAR 0 2
15063: PPUSH
15064: LD_INT 1
15066: PPUSH
15067: LD_INT 0
15069: PPUSH
15070: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15074: LD_VAR 0 2
15078: PPUSH
15079: LD_INT 2
15081: PPUSH
15082: LD_INT 0
15084: PPUSH
15085: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15089: LD_VAR 0 2
15093: PPUSH
15094: LD_INT 3
15096: PPUSH
15097: LD_INT 0
15099: PPUSH
15100: CALL_OW 277
// end ;
15104: PPOPN 2
15106: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15107: LD_EXP 39
15111: PUSH
15112: LD_EXP 67
15116: AND
15117: IFFALSE 15214
15119: GO 15121
15121: DISABLE
15122: LD_INT 0
15124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15125: LD_ADDR_VAR 0 1
15129: PUSH
15130: LD_INT 22
15132: PUSH
15133: LD_OWVAR 2
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PUSH
15142: LD_INT 21
15144: PUSH
15145: LD_INT 1
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: LD_INT 3
15154: PUSH
15155: LD_INT 23
15157: PUSH
15158: LD_INT 0
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: LIST
15173: PPUSH
15174: CALL_OW 69
15178: ST_TO_ADDR
// if not tmp then
15179: LD_VAR 0 1
15183: NOT
15184: IFFALSE 15188
// exit ;
15186: GO 15214
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15188: LD_VAR 0 1
15192: PUSH
15193: LD_INT 1
15195: PPUSH
15196: LD_VAR 0 1
15200: PPUSH
15201: CALL_OW 12
15205: ARRAY
15206: PPUSH
15207: LD_INT 200
15209: PPUSH
15210: CALL_OW 234
// end ;
15214: PPOPN 1
15216: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15217: LD_EXP 39
15221: PUSH
15222: LD_EXP 68
15226: AND
15227: IFFALSE 15306
15229: GO 15231
15231: DISABLE
15232: LD_INT 0
15234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15235: LD_ADDR_VAR 0 1
15239: PUSH
15240: LD_INT 22
15242: PUSH
15243: LD_OWVAR 2
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PUSH
15252: LD_INT 21
15254: PUSH
15255: LD_INT 2
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PPUSH
15266: CALL_OW 69
15270: ST_TO_ADDR
// if not tmp then
15271: LD_VAR 0 1
15275: NOT
15276: IFFALSE 15280
// exit ;
15278: GO 15306
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15280: LD_VAR 0 1
15284: PUSH
15285: LD_INT 1
15287: PPUSH
15288: LD_VAR 0 1
15292: PPUSH
15293: CALL_OW 12
15297: ARRAY
15298: PPUSH
15299: LD_INT 60
15301: PPUSH
15302: CALL_OW 234
// end ;
15306: PPOPN 1
15308: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15309: LD_EXP 39
15313: PUSH
15314: LD_EXP 69
15318: AND
15319: IFFALSE 15418
15321: GO 15323
15323: DISABLE
15324: LD_INT 0
15326: PPUSH
15327: PPUSH
// begin enable ;
15328: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15329: LD_ADDR_VAR 0 1
15333: PUSH
15334: LD_INT 22
15336: PUSH
15337: LD_OWVAR 2
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 61
15348: PUSH
15349: EMPTY
15350: LIST
15351: PUSH
15352: LD_INT 33
15354: PUSH
15355: LD_INT 2
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: LIST
15366: PPUSH
15367: CALL_OW 69
15371: ST_TO_ADDR
// if not tmp then
15372: LD_VAR 0 1
15376: NOT
15377: IFFALSE 15381
// exit ;
15379: GO 15418
// for i in tmp do
15381: LD_ADDR_VAR 0 2
15385: PUSH
15386: LD_VAR 0 1
15390: PUSH
15391: FOR_IN
15392: IFFALSE 15416
// if IsControledBy ( i ) then
15394: LD_VAR 0 2
15398: PPUSH
15399: CALL_OW 312
15403: IFFALSE 15414
// ComUnlink ( i ) ;
15405: LD_VAR 0 2
15409: PPUSH
15410: CALL_OW 136
15414: GO 15391
15416: POP
15417: POP
// end ;
15418: PPOPN 2
15420: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15421: LD_EXP 39
15425: PUSH
15426: LD_EXP 70
15430: AND
15431: IFFALSE 15571
15433: GO 15435
15435: DISABLE
15436: LD_INT 0
15438: PPUSH
15439: PPUSH
// begin ToLua ( displayPowell(); ) ;
15440: LD_STRING displayPowell();
15442: PPUSH
15443: CALL_OW 559
// uc_side := 0 ;
15447: LD_ADDR_OWVAR 20
15451: PUSH
15452: LD_INT 0
15454: ST_TO_ADDR
// uc_nation := 2 ;
15455: LD_ADDR_OWVAR 21
15459: PUSH
15460: LD_INT 2
15462: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15463: LD_ADDR_OWVAR 37
15467: PUSH
15468: LD_INT 14
15470: ST_TO_ADDR
// vc_engine := engine_siberite ;
15471: LD_ADDR_OWVAR 39
15475: PUSH
15476: LD_INT 3
15478: ST_TO_ADDR
// vc_control := control_apeman ;
15479: LD_ADDR_OWVAR 38
15483: PUSH
15484: LD_INT 5
15486: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15487: LD_ADDR_OWVAR 40
15491: PUSH
15492: LD_INT 29
15494: ST_TO_ADDR
// un := CreateVehicle ;
15495: LD_ADDR_VAR 0 2
15499: PUSH
15500: CALL_OW 45
15504: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15505: LD_VAR 0 2
15509: PPUSH
15510: LD_INT 1
15512: PPUSH
15513: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15517: LD_INT 35
15519: PPUSH
15520: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15524: LD_VAR 0 2
15528: PPUSH
15529: LD_INT 22
15531: PUSH
15532: LD_OWVAR 2
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PPUSH
15541: CALL_OW 69
15545: PPUSH
15546: LD_VAR 0 2
15550: PPUSH
15551: CALL_OW 74
15555: PPUSH
15556: CALL_OW 115
// until IsDead ( un ) ;
15560: LD_VAR 0 2
15564: PPUSH
15565: CALL_OW 301
15569: IFFALSE 15517
// end ;
15571: PPOPN 2
15573: END
// every 0 0$1 trigger StreamModeActive and sStu do
15574: LD_EXP 39
15578: PUSH
15579: LD_EXP 78
15583: AND
15584: IFFALSE 15600
15586: GO 15588
15588: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15589: LD_STRING displayStucuk();
15591: PPUSH
15592: CALL_OW 559
// ResetFog ;
15596: CALL_OW 335
// end ;
15600: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15601: LD_EXP 39
15605: PUSH
15606: LD_EXP 71
15610: AND
15611: IFFALSE 15752
15613: GO 15615
15615: DISABLE
15616: LD_INT 0
15618: PPUSH
15619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15620: LD_ADDR_VAR 0 2
15624: PUSH
15625: LD_INT 22
15627: PUSH
15628: LD_OWVAR 2
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 21
15639: PUSH
15640: LD_INT 1
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PPUSH
15651: CALL_OW 69
15655: ST_TO_ADDR
// if not tmp then
15656: LD_VAR 0 2
15660: NOT
15661: IFFALSE 15665
// exit ;
15663: GO 15752
// un := tmp [ rand ( 1 , tmp ) ] ;
15665: LD_ADDR_VAR 0 1
15669: PUSH
15670: LD_VAR 0 2
15674: PUSH
15675: LD_INT 1
15677: PPUSH
15678: LD_VAR 0 2
15682: PPUSH
15683: CALL_OW 12
15687: ARRAY
15688: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15689: LD_VAR 0 1
15693: PPUSH
15694: LD_INT 0
15696: PPUSH
15697: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15701: LD_VAR 0 1
15705: PPUSH
15706: LD_OWVAR 3
15710: PUSH
15711: LD_VAR 0 1
15715: DIFF
15716: PPUSH
15717: LD_VAR 0 1
15721: PPUSH
15722: CALL_OW 74
15726: PPUSH
15727: CALL_OW 115
// wait ( 0 0$20 ) ;
15731: LD_INT 700
15733: PPUSH
15734: CALL_OW 67
// SetSide ( un , your_side ) ;
15738: LD_VAR 0 1
15742: PPUSH
15743: LD_OWVAR 2
15747: PPUSH
15748: CALL_OW 235
// end ;
15752: PPOPN 2
15754: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15755: LD_EXP 39
15759: PUSH
15760: LD_EXP 72
15764: AND
15765: IFFALSE 15871
15767: GO 15769
15769: DISABLE
15770: LD_INT 0
15772: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15773: LD_ADDR_VAR 0 1
15777: PUSH
15778: LD_INT 22
15780: PUSH
15781: LD_OWVAR 2
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 2
15792: PUSH
15793: LD_INT 30
15795: PUSH
15796: LD_INT 0
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 30
15805: PUSH
15806: LD_INT 1
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: LIST
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PPUSH
15822: CALL_OW 69
15826: ST_TO_ADDR
// if not depot then
15827: LD_VAR 0 1
15831: NOT
15832: IFFALSE 15836
// exit ;
15834: GO 15871
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15836: LD_VAR 0 1
15840: PUSH
15841: LD_INT 1
15843: ARRAY
15844: PPUSH
15845: CALL_OW 250
15849: PPUSH
15850: LD_VAR 0 1
15854: PUSH
15855: LD_INT 1
15857: ARRAY
15858: PPUSH
15859: CALL_OW 251
15863: PPUSH
15864: LD_INT 70
15866: PPUSH
15867: CALL_OW 495
// end ;
15871: PPOPN 1
15873: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15874: LD_EXP 39
15878: PUSH
15879: LD_EXP 73
15883: AND
15884: IFFALSE 16095
15886: GO 15888
15888: DISABLE
15889: LD_INT 0
15891: PPUSH
15892: PPUSH
15893: PPUSH
15894: PPUSH
15895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15896: LD_ADDR_VAR 0 5
15900: PUSH
15901: LD_INT 22
15903: PUSH
15904: LD_OWVAR 2
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PUSH
15913: LD_INT 21
15915: PUSH
15916: LD_INT 1
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PPUSH
15927: CALL_OW 69
15931: ST_TO_ADDR
// if not tmp then
15932: LD_VAR 0 5
15936: NOT
15937: IFFALSE 15941
// exit ;
15939: GO 16095
// for i in tmp do
15941: LD_ADDR_VAR 0 1
15945: PUSH
15946: LD_VAR 0 5
15950: PUSH
15951: FOR_IN
15952: IFFALSE 16093
// begin d := rand ( 0 , 5 ) ;
15954: LD_ADDR_VAR 0 4
15958: PUSH
15959: LD_INT 0
15961: PPUSH
15962: LD_INT 5
15964: PPUSH
15965: CALL_OW 12
15969: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15970: LD_ADDR_VAR 0 2
15974: PUSH
15975: LD_VAR 0 1
15979: PPUSH
15980: CALL_OW 250
15984: PPUSH
15985: LD_VAR 0 4
15989: PPUSH
15990: LD_INT 3
15992: PPUSH
15993: LD_INT 12
15995: PPUSH
15996: CALL_OW 12
16000: PPUSH
16001: CALL_OW 272
16005: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16006: LD_ADDR_VAR 0 3
16010: PUSH
16011: LD_VAR 0 1
16015: PPUSH
16016: CALL_OW 251
16020: PPUSH
16021: LD_VAR 0 4
16025: PPUSH
16026: LD_INT 3
16028: PPUSH
16029: LD_INT 12
16031: PPUSH
16032: CALL_OW 12
16036: PPUSH
16037: CALL_OW 273
16041: ST_TO_ADDR
// if ValidHex ( x , y ) then
16042: LD_VAR 0 2
16046: PPUSH
16047: LD_VAR 0 3
16051: PPUSH
16052: CALL_OW 488
16056: IFFALSE 16091
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16058: LD_VAR 0 1
16062: PPUSH
16063: LD_VAR 0 2
16067: PPUSH
16068: LD_VAR 0 3
16072: PPUSH
16073: LD_INT 3
16075: PPUSH
16076: LD_INT 6
16078: PPUSH
16079: CALL_OW 12
16083: PPUSH
16084: LD_INT 1
16086: PPUSH
16087: CALL_OW 483
// end ;
16091: GO 15951
16093: POP
16094: POP
// end ;
16095: PPOPN 5
16097: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16098: LD_EXP 39
16102: PUSH
16103: LD_EXP 74
16107: AND
16108: IFFALSE 16202
16110: GO 16112
16112: DISABLE
16113: LD_INT 0
16115: PPUSH
16116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16117: LD_ADDR_VAR 0 2
16121: PUSH
16122: LD_INT 22
16124: PUSH
16125: LD_OWVAR 2
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 32
16136: PUSH
16137: LD_INT 1
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 21
16146: PUSH
16147: LD_INT 2
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: LIST
16158: PPUSH
16159: CALL_OW 69
16163: ST_TO_ADDR
// if not tmp then
16164: LD_VAR 0 2
16168: NOT
16169: IFFALSE 16173
// exit ;
16171: GO 16202
// for i in tmp do
16173: LD_ADDR_VAR 0 1
16177: PUSH
16178: LD_VAR 0 2
16182: PUSH
16183: FOR_IN
16184: IFFALSE 16200
// SetFuel ( i , 0 ) ;
16186: LD_VAR 0 1
16190: PPUSH
16191: LD_INT 0
16193: PPUSH
16194: CALL_OW 240
16198: GO 16183
16200: POP
16201: POP
// end ;
16202: PPOPN 2
16204: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16205: LD_EXP 39
16209: PUSH
16210: LD_EXP 75
16214: AND
16215: IFFALSE 16281
16217: GO 16219
16219: DISABLE
16220: LD_INT 0
16222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16223: LD_ADDR_VAR 0 1
16227: PUSH
16228: LD_INT 22
16230: PUSH
16231: LD_OWVAR 2
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 30
16242: PUSH
16243: LD_INT 29
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PPUSH
16254: CALL_OW 69
16258: ST_TO_ADDR
// if not tmp then
16259: LD_VAR 0 1
16263: NOT
16264: IFFALSE 16268
// exit ;
16266: GO 16281
// DestroyUnit ( tmp [ 1 ] ) ;
16268: LD_VAR 0 1
16272: PUSH
16273: LD_INT 1
16275: ARRAY
16276: PPUSH
16277: CALL_OW 65
// end ;
16281: PPOPN 1
16283: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16284: LD_EXP 39
16288: PUSH
16289: LD_EXP 77
16293: AND
16294: IFFALSE 16423
16296: GO 16298
16298: DISABLE
16299: LD_INT 0
16301: PPUSH
// begin uc_side := 0 ;
16302: LD_ADDR_OWVAR 20
16306: PUSH
16307: LD_INT 0
16309: ST_TO_ADDR
// uc_nation := nation_arabian ;
16310: LD_ADDR_OWVAR 21
16314: PUSH
16315: LD_INT 2
16317: ST_TO_ADDR
// hc_gallery :=  ;
16318: LD_ADDR_OWVAR 33
16322: PUSH
16323: LD_STRING 
16325: ST_TO_ADDR
// hc_name :=  ;
16326: LD_ADDR_OWVAR 26
16330: PUSH
16331: LD_STRING 
16333: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16334: LD_INT 1
16336: PPUSH
16337: LD_INT 11
16339: PPUSH
16340: LD_INT 10
16342: PPUSH
16343: CALL_OW 380
// un := CreateHuman ;
16347: LD_ADDR_VAR 0 1
16351: PUSH
16352: CALL_OW 44
16356: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16357: LD_VAR 0 1
16361: PPUSH
16362: LD_INT 1
16364: PPUSH
16365: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16369: LD_INT 35
16371: PPUSH
16372: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16376: LD_VAR 0 1
16380: PPUSH
16381: LD_INT 22
16383: PUSH
16384: LD_OWVAR 2
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PPUSH
16393: CALL_OW 69
16397: PPUSH
16398: LD_VAR 0 1
16402: PPUSH
16403: CALL_OW 74
16407: PPUSH
16408: CALL_OW 115
// until IsDead ( un ) ;
16412: LD_VAR 0 1
16416: PPUSH
16417: CALL_OW 301
16421: IFFALSE 16369
// end ;
16423: PPOPN 1
16425: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16426: LD_EXP 39
16430: PUSH
16431: LD_EXP 79
16435: AND
16436: IFFALSE 16448
16438: GO 16440
16440: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16441: LD_STRING earthquake(getX(game), 0, 32)
16443: PPUSH
16444: CALL_OW 559
16448: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16449: LD_EXP 39
16453: PUSH
16454: LD_EXP 80
16458: AND
16459: IFFALSE 16550
16461: GO 16463
16463: DISABLE
16464: LD_INT 0
16466: PPUSH
// begin enable ;
16467: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16468: LD_ADDR_VAR 0 1
16472: PUSH
16473: LD_INT 22
16475: PUSH
16476: LD_OWVAR 2
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 21
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 33
16497: PUSH
16498: LD_INT 3
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: LIST
16509: PPUSH
16510: CALL_OW 69
16514: ST_TO_ADDR
// if not tmp then
16515: LD_VAR 0 1
16519: NOT
16520: IFFALSE 16524
// exit ;
16522: GO 16550
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16524: LD_VAR 0 1
16528: PUSH
16529: LD_INT 1
16531: PPUSH
16532: LD_VAR 0 1
16536: PPUSH
16537: CALL_OW 12
16541: ARRAY
16542: PPUSH
16543: LD_INT 1
16545: PPUSH
16546: CALL_OW 234
// end ;
16550: PPOPN 1
16552: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16553: LD_EXP 39
16557: PUSH
16558: LD_EXP 81
16562: AND
16563: IFFALSE 16704
16565: GO 16567
16567: DISABLE
16568: LD_INT 0
16570: PPUSH
16571: PPUSH
16572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16573: LD_ADDR_VAR 0 3
16577: PUSH
16578: LD_INT 22
16580: PUSH
16581: LD_OWVAR 2
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 25
16592: PUSH
16593: LD_INT 1
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PPUSH
16604: CALL_OW 69
16608: ST_TO_ADDR
// if not tmp then
16609: LD_VAR 0 3
16613: NOT
16614: IFFALSE 16618
// exit ;
16616: GO 16704
// un := tmp [ rand ( 1 , tmp ) ] ;
16618: LD_ADDR_VAR 0 2
16622: PUSH
16623: LD_VAR 0 3
16627: PUSH
16628: LD_INT 1
16630: PPUSH
16631: LD_VAR 0 3
16635: PPUSH
16636: CALL_OW 12
16640: ARRAY
16641: ST_TO_ADDR
// if Crawls ( un ) then
16642: LD_VAR 0 2
16646: PPUSH
16647: CALL_OW 318
16651: IFFALSE 16662
// ComWalk ( un ) ;
16653: LD_VAR 0 2
16657: PPUSH
16658: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16662: LD_VAR 0 2
16666: PPUSH
16667: LD_INT 9
16669: PPUSH
16670: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16674: LD_INT 28
16676: PPUSH
16677: LD_OWVAR 2
16681: PPUSH
16682: LD_INT 2
16684: PPUSH
16685: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16689: LD_INT 29
16691: PPUSH
16692: LD_OWVAR 2
16696: PPUSH
16697: LD_INT 2
16699: PPUSH
16700: CALL_OW 322
// end ;
16704: PPOPN 3
16706: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16707: LD_EXP 39
16711: PUSH
16712: LD_EXP 82
16716: AND
16717: IFFALSE 16828
16719: GO 16721
16721: DISABLE
16722: LD_INT 0
16724: PPUSH
16725: PPUSH
16726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16727: LD_ADDR_VAR 0 3
16731: PUSH
16732: LD_INT 22
16734: PUSH
16735: LD_OWVAR 2
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: LD_INT 25
16746: PUSH
16747: LD_INT 1
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PPUSH
16758: CALL_OW 69
16762: ST_TO_ADDR
// if not tmp then
16763: LD_VAR 0 3
16767: NOT
16768: IFFALSE 16772
// exit ;
16770: GO 16828
// un := tmp [ rand ( 1 , tmp ) ] ;
16772: LD_ADDR_VAR 0 2
16776: PUSH
16777: LD_VAR 0 3
16781: PUSH
16782: LD_INT 1
16784: PPUSH
16785: LD_VAR 0 3
16789: PPUSH
16790: CALL_OW 12
16794: ARRAY
16795: ST_TO_ADDR
// if Crawls ( un ) then
16796: LD_VAR 0 2
16800: PPUSH
16801: CALL_OW 318
16805: IFFALSE 16816
// ComWalk ( un ) ;
16807: LD_VAR 0 2
16811: PPUSH
16812: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16816: LD_VAR 0 2
16820: PPUSH
16821: LD_INT 8
16823: PPUSH
16824: CALL_OW 336
// end ;
16828: PPOPN 3
16830: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16831: LD_EXP 39
16835: PUSH
16836: LD_EXP 83
16840: AND
16841: IFFALSE 16985
16843: GO 16845
16845: DISABLE
16846: LD_INT 0
16848: PPUSH
16849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16850: LD_ADDR_VAR 0 2
16854: PUSH
16855: LD_INT 22
16857: PUSH
16858: LD_OWVAR 2
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 21
16869: PUSH
16870: LD_INT 2
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 2
16879: PUSH
16880: LD_INT 34
16882: PUSH
16883: LD_INT 12
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: LD_INT 34
16892: PUSH
16893: LD_INT 51
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 34
16902: PUSH
16903: LD_INT 32
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: LIST
16920: PPUSH
16921: CALL_OW 69
16925: ST_TO_ADDR
// if not tmp then
16926: LD_VAR 0 2
16930: NOT
16931: IFFALSE 16935
// exit ;
16933: GO 16985
// for i in tmp do
16935: LD_ADDR_VAR 0 1
16939: PUSH
16940: LD_VAR 0 2
16944: PUSH
16945: FOR_IN
16946: IFFALSE 16983
// if GetCargo ( i , mat_artifact ) = 0 then
16948: LD_VAR 0 1
16952: PPUSH
16953: LD_INT 4
16955: PPUSH
16956: CALL_OW 289
16960: PUSH
16961: LD_INT 0
16963: EQUAL
16964: IFFALSE 16981
// SetCargo ( i , mat_siberit , 100 ) ;
16966: LD_VAR 0 1
16970: PPUSH
16971: LD_INT 3
16973: PPUSH
16974: LD_INT 100
16976: PPUSH
16977: CALL_OW 290
16981: GO 16945
16983: POP
16984: POP
// end ;
16985: PPOPN 2
16987: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16988: LD_EXP 39
16992: PUSH
16993: LD_EXP 84
16997: AND
16998: IFFALSE 17181
17000: GO 17002
17002: DISABLE
17003: LD_INT 0
17005: PPUSH
17006: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17007: LD_ADDR_VAR 0 2
17011: PUSH
17012: LD_INT 22
17014: PUSH
17015: LD_OWVAR 2
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PPUSH
17024: CALL_OW 69
17028: ST_TO_ADDR
// if not tmp then
17029: LD_VAR 0 2
17033: NOT
17034: IFFALSE 17038
// exit ;
17036: GO 17181
// for i := 1 to 2 do
17038: LD_ADDR_VAR 0 1
17042: PUSH
17043: DOUBLE
17044: LD_INT 1
17046: DEC
17047: ST_TO_ADDR
17048: LD_INT 2
17050: PUSH
17051: FOR_TO
17052: IFFALSE 17179
// begin uc_side := your_side ;
17054: LD_ADDR_OWVAR 20
17058: PUSH
17059: LD_OWVAR 2
17063: ST_TO_ADDR
// uc_nation := nation_american ;
17064: LD_ADDR_OWVAR 21
17068: PUSH
17069: LD_INT 1
17071: ST_TO_ADDR
// vc_chassis := us_morphling ;
17072: LD_ADDR_OWVAR 37
17076: PUSH
17077: LD_INT 5
17079: ST_TO_ADDR
// vc_engine := engine_siberite ;
17080: LD_ADDR_OWVAR 39
17084: PUSH
17085: LD_INT 3
17087: ST_TO_ADDR
// vc_control := control_computer ;
17088: LD_ADDR_OWVAR 38
17092: PUSH
17093: LD_INT 3
17095: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17096: LD_ADDR_OWVAR 40
17100: PUSH
17101: LD_INT 10
17103: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17104: LD_VAR 0 2
17108: PUSH
17109: LD_INT 1
17111: ARRAY
17112: PPUSH
17113: CALL_OW 310
17117: NOT
17118: IFFALSE 17165
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17120: CALL_OW 45
17124: PPUSH
17125: LD_VAR 0 2
17129: PUSH
17130: LD_INT 1
17132: ARRAY
17133: PPUSH
17134: CALL_OW 250
17138: PPUSH
17139: LD_VAR 0 2
17143: PUSH
17144: LD_INT 1
17146: ARRAY
17147: PPUSH
17148: CALL_OW 251
17152: PPUSH
17153: LD_INT 12
17155: PPUSH
17156: LD_INT 1
17158: PPUSH
17159: CALL_OW 50
17163: GO 17177
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17165: CALL_OW 45
17169: PPUSH
17170: LD_INT 1
17172: PPUSH
17173: CALL_OW 51
// end ;
17177: GO 17051
17179: POP
17180: POP
// end ;
17181: PPOPN 2
17183: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17184: LD_EXP 39
17188: PUSH
17189: LD_EXP 85
17193: AND
17194: IFFALSE 17416
17196: GO 17198
17198: DISABLE
17199: LD_INT 0
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
17205: PPUSH
17206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17207: LD_ADDR_VAR 0 6
17211: PUSH
17212: LD_INT 22
17214: PUSH
17215: LD_OWVAR 2
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: LD_INT 21
17226: PUSH
17227: LD_INT 1
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 3
17236: PUSH
17237: LD_INT 23
17239: PUSH
17240: LD_INT 0
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: LIST
17255: PPUSH
17256: CALL_OW 69
17260: ST_TO_ADDR
// if not tmp then
17261: LD_VAR 0 6
17265: NOT
17266: IFFALSE 17270
// exit ;
17268: GO 17416
// s1 := rand ( 1 , 4 ) ;
17270: LD_ADDR_VAR 0 2
17274: PUSH
17275: LD_INT 1
17277: PPUSH
17278: LD_INT 4
17280: PPUSH
17281: CALL_OW 12
17285: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17286: LD_ADDR_VAR 0 4
17290: PUSH
17291: LD_VAR 0 6
17295: PUSH
17296: LD_INT 1
17298: ARRAY
17299: PPUSH
17300: LD_VAR 0 2
17304: PPUSH
17305: CALL_OW 259
17309: ST_TO_ADDR
// if s1 = 1 then
17310: LD_VAR 0 2
17314: PUSH
17315: LD_INT 1
17317: EQUAL
17318: IFFALSE 17338
// s2 := rand ( 2 , 4 ) else
17320: LD_ADDR_VAR 0 3
17324: PUSH
17325: LD_INT 2
17327: PPUSH
17328: LD_INT 4
17330: PPUSH
17331: CALL_OW 12
17335: ST_TO_ADDR
17336: GO 17346
// s2 := 1 ;
17338: LD_ADDR_VAR 0 3
17342: PUSH
17343: LD_INT 1
17345: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17346: LD_ADDR_VAR 0 5
17350: PUSH
17351: LD_VAR 0 6
17355: PUSH
17356: LD_INT 1
17358: ARRAY
17359: PPUSH
17360: LD_VAR 0 3
17364: PPUSH
17365: CALL_OW 259
17369: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17370: LD_VAR 0 6
17374: PUSH
17375: LD_INT 1
17377: ARRAY
17378: PPUSH
17379: LD_VAR 0 2
17383: PPUSH
17384: LD_VAR 0 5
17388: PPUSH
17389: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17393: LD_VAR 0 6
17397: PUSH
17398: LD_INT 1
17400: ARRAY
17401: PPUSH
17402: LD_VAR 0 3
17406: PPUSH
17407: LD_VAR 0 4
17411: PPUSH
17412: CALL_OW 237
// end ;
17416: PPOPN 6
17418: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17419: LD_EXP 39
17423: PUSH
17424: LD_EXP 86
17428: AND
17429: IFFALSE 17508
17431: GO 17433
17433: DISABLE
17434: LD_INT 0
17436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17437: LD_ADDR_VAR 0 1
17441: PUSH
17442: LD_INT 22
17444: PUSH
17445: LD_OWVAR 2
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 30
17456: PUSH
17457: LD_INT 3
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PPUSH
17468: CALL_OW 69
17472: ST_TO_ADDR
// if not tmp then
17473: LD_VAR 0 1
17477: NOT
17478: IFFALSE 17482
// exit ;
17480: GO 17508
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17482: LD_VAR 0 1
17486: PUSH
17487: LD_INT 1
17489: PPUSH
17490: LD_VAR 0 1
17494: PPUSH
17495: CALL_OW 12
17499: ARRAY
17500: PPUSH
17501: LD_INT 1
17503: PPUSH
17504: CALL_OW 234
// end ;
17508: PPOPN 1
17510: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17511: LD_EXP 39
17515: PUSH
17516: LD_EXP 87
17520: AND
17521: IFFALSE 17633
17523: GO 17525
17525: DISABLE
17526: LD_INT 0
17528: PPUSH
17529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17530: LD_ADDR_VAR 0 2
17534: PUSH
17535: LD_INT 22
17537: PUSH
17538: LD_OWVAR 2
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 2
17549: PUSH
17550: LD_INT 30
17552: PUSH
17553: LD_INT 27
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 30
17562: PUSH
17563: LD_INT 26
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 30
17572: PUSH
17573: LD_INT 28
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PPUSH
17590: CALL_OW 69
17594: ST_TO_ADDR
// if not tmp then
17595: LD_VAR 0 2
17599: NOT
17600: IFFALSE 17604
// exit ;
17602: GO 17633
// for i in tmp do
17604: LD_ADDR_VAR 0 1
17608: PUSH
17609: LD_VAR 0 2
17613: PUSH
17614: FOR_IN
17615: IFFALSE 17631
// SetLives ( i , 1 ) ;
17617: LD_VAR 0 1
17621: PPUSH
17622: LD_INT 1
17624: PPUSH
17625: CALL_OW 234
17629: GO 17614
17631: POP
17632: POP
// end ;
17633: PPOPN 2
17635: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17636: LD_EXP 39
17640: PUSH
17641: LD_EXP 88
17645: AND
17646: IFFALSE 17920
17648: GO 17650
17650: DISABLE
17651: LD_INT 0
17653: PPUSH
17654: PPUSH
17655: PPUSH
// begin i := rand ( 1 , 7 ) ;
17656: LD_ADDR_VAR 0 1
17660: PUSH
17661: LD_INT 1
17663: PPUSH
17664: LD_INT 7
17666: PPUSH
17667: CALL_OW 12
17671: ST_TO_ADDR
// case i of 1 :
17672: LD_VAR 0 1
17676: PUSH
17677: LD_INT 1
17679: DOUBLE
17680: EQUAL
17681: IFTRUE 17685
17683: GO 17695
17685: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17686: LD_STRING earthquake(getX(game), 0, 32)
17688: PPUSH
17689: CALL_OW 559
17693: GO 17920
17695: LD_INT 2
17697: DOUBLE
17698: EQUAL
17699: IFTRUE 17703
17701: GO 17717
17703: POP
// begin ToLua ( displayStucuk(); ) ;
17704: LD_STRING displayStucuk();
17706: PPUSH
17707: CALL_OW 559
// ResetFog ;
17711: CALL_OW 335
// end ; 3 :
17715: GO 17920
17717: LD_INT 3
17719: DOUBLE
17720: EQUAL
17721: IFTRUE 17725
17723: GO 17829
17725: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17726: LD_ADDR_VAR 0 2
17730: PUSH
17731: LD_INT 22
17733: PUSH
17734: LD_OWVAR 2
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 25
17745: PUSH
17746: LD_INT 1
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PPUSH
17757: CALL_OW 69
17761: ST_TO_ADDR
// if not tmp then
17762: LD_VAR 0 2
17766: NOT
17767: IFFALSE 17771
// exit ;
17769: GO 17920
// un := tmp [ rand ( 1 , tmp ) ] ;
17771: LD_ADDR_VAR 0 3
17775: PUSH
17776: LD_VAR 0 2
17780: PUSH
17781: LD_INT 1
17783: PPUSH
17784: LD_VAR 0 2
17788: PPUSH
17789: CALL_OW 12
17793: ARRAY
17794: ST_TO_ADDR
// if Crawls ( un ) then
17795: LD_VAR 0 3
17799: PPUSH
17800: CALL_OW 318
17804: IFFALSE 17815
// ComWalk ( un ) ;
17806: LD_VAR 0 3
17810: PPUSH
17811: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17815: LD_VAR 0 3
17819: PPUSH
17820: LD_INT 8
17822: PPUSH
17823: CALL_OW 336
// end ; 4 :
17827: GO 17920
17829: LD_INT 4
17831: DOUBLE
17832: EQUAL
17833: IFTRUE 17837
17835: GO 17898
17837: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17838: LD_ADDR_VAR 0 2
17842: PUSH
17843: LD_INT 22
17845: PUSH
17846: LD_OWVAR 2
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 30
17857: PUSH
17858: LD_INT 29
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PPUSH
17869: CALL_OW 69
17873: ST_TO_ADDR
// if not tmp then
17874: LD_VAR 0 2
17878: NOT
17879: IFFALSE 17883
// exit ;
17881: GO 17920
// DestroyUnit ( tmp [ 1 ] ) ;
17883: LD_VAR 0 2
17887: PUSH
17888: LD_INT 1
17890: ARRAY
17891: PPUSH
17892: CALL_OW 65
// end ; 5 .. 7 :
17896: GO 17920
17898: LD_INT 5
17900: DOUBLE
17901: GREATEREQUAL
17902: IFFALSE 17910
17904: LD_INT 7
17906: DOUBLE
17907: LESSEQUAL
17908: IFTRUE 17912
17910: GO 17919
17912: POP
// StreamSibBomb ; end ;
17913: CALL 14170 0 0
17917: GO 17920
17919: POP
// end ;
17920: PPOPN 3
17922: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17923: LD_EXP 39
17927: PUSH
17928: LD_EXP 89
17932: AND
17933: IFFALSE 18089
17935: GO 17937
17937: DISABLE
17938: LD_INT 0
17940: PPUSH
17941: PPUSH
17942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17943: LD_ADDR_VAR 0 2
17947: PUSH
17948: LD_INT 81
17950: PUSH
17951: LD_OWVAR 2
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 2
17962: PUSH
17963: LD_INT 21
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 21
17975: PUSH
17976: LD_INT 2
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: LIST
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PPUSH
17992: CALL_OW 69
17996: ST_TO_ADDR
// if not tmp then
17997: LD_VAR 0 2
18001: NOT
18002: IFFALSE 18006
// exit ;
18004: GO 18089
// p := 0 ;
18006: LD_ADDR_VAR 0 3
18010: PUSH
18011: LD_INT 0
18013: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18014: LD_INT 35
18016: PPUSH
18017: CALL_OW 67
// p := p + 1 ;
18021: LD_ADDR_VAR 0 3
18025: PUSH
18026: LD_VAR 0 3
18030: PUSH
18031: LD_INT 1
18033: PLUS
18034: ST_TO_ADDR
// for i in tmp do
18035: LD_ADDR_VAR 0 1
18039: PUSH
18040: LD_VAR 0 2
18044: PUSH
18045: FOR_IN
18046: IFFALSE 18077
// if GetLives ( i ) < 1000 then
18048: LD_VAR 0 1
18052: PPUSH
18053: CALL_OW 256
18057: PUSH
18058: LD_INT 1000
18060: LESS
18061: IFFALSE 18075
// SetLives ( i , 1000 ) ;
18063: LD_VAR 0 1
18067: PPUSH
18068: LD_INT 1000
18070: PPUSH
18071: CALL_OW 234
18075: GO 18045
18077: POP
18078: POP
// until p > 20 ;
18079: LD_VAR 0 3
18083: PUSH
18084: LD_INT 20
18086: GREATER
18087: IFFALSE 18014
// end ;
18089: PPOPN 3
18091: END
// every 0 0$1 trigger StreamModeActive and sTime do
18092: LD_EXP 39
18096: PUSH
18097: LD_EXP 90
18101: AND
18102: IFFALSE 18137
18104: GO 18106
18106: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18107: LD_INT 28
18109: PPUSH
18110: LD_OWVAR 2
18114: PPUSH
18115: LD_INT 2
18117: PPUSH
18118: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18122: LD_INT 30
18124: PPUSH
18125: LD_OWVAR 2
18129: PPUSH
18130: LD_INT 2
18132: PPUSH
18133: CALL_OW 322
// end ;
18137: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18138: LD_EXP 39
18142: PUSH
18143: LD_EXP 91
18147: AND
18148: IFFALSE 18269
18150: GO 18152
18152: DISABLE
18153: LD_INT 0
18155: PPUSH
18156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18157: LD_ADDR_VAR 0 2
18161: PUSH
18162: LD_INT 22
18164: PUSH
18165: LD_OWVAR 2
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 21
18176: PUSH
18177: LD_INT 1
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 3
18186: PUSH
18187: LD_INT 23
18189: PUSH
18190: LD_INT 0
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: LIST
18205: PPUSH
18206: CALL_OW 69
18210: ST_TO_ADDR
// if not tmp then
18211: LD_VAR 0 2
18215: NOT
18216: IFFALSE 18220
// exit ;
18218: GO 18269
// for i in tmp do
18220: LD_ADDR_VAR 0 1
18224: PUSH
18225: LD_VAR 0 2
18229: PUSH
18230: FOR_IN
18231: IFFALSE 18267
// begin if Crawls ( i ) then
18233: LD_VAR 0 1
18237: PPUSH
18238: CALL_OW 318
18242: IFFALSE 18253
// ComWalk ( i ) ;
18244: LD_VAR 0 1
18248: PPUSH
18249: CALL_OW 138
// SetClass ( i , 2 ) ;
18253: LD_VAR 0 1
18257: PPUSH
18258: LD_INT 2
18260: PPUSH
18261: CALL_OW 336
// end ;
18265: GO 18230
18267: POP
18268: POP
// end ;
18269: PPOPN 2
18271: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18272: LD_EXP 39
18276: PUSH
18277: LD_EXP 92
18281: AND
18282: IFFALSE 18563
18284: GO 18286
18286: DISABLE
18287: LD_INT 0
18289: PPUSH
18290: PPUSH
18291: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18292: LD_OWVAR 2
18296: PPUSH
18297: LD_INT 9
18299: PPUSH
18300: LD_INT 1
18302: PPUSH
18303: LD_INT 1
18305: PPUSH
18306: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18310: LD_INT 9
18312: PPUSH
18313: LD_OWVAR 2
18317: PPUSH
18318: CALL_OW 343
// uc_side := 9 ;
18322: LD_ADDR_OWVAR 20
18326: PUSH
18327: LD_INT 9
18329: ST_TO_ADDR
// uc_nation := 2 ;
18330: LD_ADDR_OWVAR 21
18334: PUSH
18335: LD_INT 2
18337: ST_TO_ADDR
// hc_name := Dark Warrior ;
18338: LD_ADDR_OWVAR 26
18342: PUSH
18343: LD_STRING Dark Warrior
18345: ST_TO_ADDR
// hc_gallery :=  ;
18346: LD_ADDR_OWVAR 33
18350: PUSH
18351: LD_STRING 
18353: ST_TO_ADDR
// hc_noskilllimit := true ;
18354: LD_ADDR_OWVAR 76
18358: PUSH
18359: LD_INT 1
18361: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18362: LD_ADDR_OWVAR 31
18366: PUSH
18367: LD_INT 30
18369: PUSH
18370: LD_INT 30
18372: PUSH
18373: LD_INT 30
18375: PUSH
18376: LD_INT 30
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: ST_TO_ADDR
// un := CreateHuman ;
18385: LD_ADDR_VAR 0 3
18389: PUSH
18390: CALL_OW 44
18394: ST_TO_ADDR
// hc_noskilllimit := false ;
18395: LD_ADDR_OWVAR 76
18399: PUSH
18400: LD_INT 0
18402: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18403: LD_VAR 0 3
18407: PPUSH
18408: LD_INT 1
18410: PPUSH
18411: CALL_OW 51
// p := 0 ;
18415: LD_ADDR_VAR 0 2
18419: PUSH
18420: LD_INT 0
18422: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18423: LD_INT 35
18425: PPUSH
18426: CALL_OW 67
// p := p + 1 ;
18430: LD_ADDR_VAR 0 2
18434: PUSH
18435: LD_VAR 0 2
18439: PUSH
18440: LD_INT 1
18442: PLUS
18443: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18444: LD_VAR 0 3
18448: PPUSH
18449: CALL_OW 256
18453: PUSH
18454: LD_INT 1000
18456: LESS
18457: IFFALSE 18471
// SetLives ( un , 1000 ) ;
18459: LD_VAR 0 3
18463: PPUSH
18464: LD_INT 1000
18466: PPUSH
18467: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18471: LD_VAR 0 3
18475: PPUSH
18476: LD_INT 81
18478: PUSH
18479: LD_OWVAR 2
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 91
18490: PUSH
18491: LD_VAR 0 3
18495: PUSH
18496: LD_INT 30
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: LIST
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PPUSH
18508: CALL_OW 69
18512: PPUSH
18513: LD_VAR 0 3
18517: PPUSH
18518: CALL_OW 74
18522: PPUSH
18523: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18527: LD_VAR 0 2
18531: PUSH
18532: LD_INT 60
18534: GREATER
18535: PUSH
18536: LD_VAR 0 3
18540: PPUSH
18541: CALL_OW 301
18545: OR
18546: IFFALSE 18423
// if un then
18548: LD_VAR 0 3
18552: IFFALSE 18563
// RemoveUnit ( un ) ;
18554: LD_VAR 0 3
18558: PPUSH
18559: CALL_OW 64
// end ;
18563: PPOPN 3
18565: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18566: LD_INT 0
18568: PPUSH
18569: PPUSH
18570: PPUSH
18571: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18572: LD_ADDR_VAR 0 4
18576: PUSH
18577: LD_INT 22
18579: PUSH
18580: LD_OWVAR 2
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 30
18594: PUSH
18595: LD_INT 0
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 30
18604: PUSH
18605: LD_INT 1
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: LIST
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PPUSH
18621: CALL_OW 69
18625: ST_TO_ADDR
// if not tmp then
18626: LD_VAR 0 4
18630: NOT
18631: IFFALSE 18635
// exit ;
18633: GO 18694
// for i in tmp do
18635: LD_ADDR_VAR 0 2
18639: PUSH
18640: LD_VAR 0 4
18644: PUSH
18645: FOR_IN
18646: IFFALSE 18692
// for j = 1 to 3 do
18648: LD_ADDR_VAR 0 3
18652: PUSH
18653: DOUBLE
18654: LD_INT 1
18656: DEC
18657: ST_TO_ADDR
18658: LD_INT 3
18660: PUSH
18661: FOR_TO
18662: IFFALSE 18688
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18664: LD_VAR 0 2
18668: PPUSH
18669: CALL_OW 274
18673: PPUSH
18674: LD_VAR 0 3
18678: PPUSH
18679: LD_INT 99999
18681: PPUSH
18682: CALL_OW 277
18686: GO 18661
18688: POP
18689: POP
18690: GO 18645
18692: POP
18693: POP
// end ;
18694: LD_VAR 0 1
18698: RET
// export function hHackSetLevel10 ; var i , j ; begin
18699: LD_INT 0
18701: PPUSH
18702: PPUSH
18703: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18704: LD_ADDR_VAR 0 2
18708: PUSH
18709: LD_INT 21
18711: PUSH
18712: LD_INT 1
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PPUSH
18719: CALL_OW 69
18723: PUSH
18724: FOR_IN
18725: IFFALSE 18777
// if IsSelected ( i ) then
18727: LD_VAR 0 2
18731: PPUSH
18732: CALL_OW 306
18736: IFFALSE 18775
// begin for j := 1 to 4 do
18738: LD_ADDR_VAR 0 3
18742: PUSH
18743: DOUBLE
18744: LD_INT 1
18746: DEC
18747: ST_TO_ADDR
18748: LD_INT 4
18750: PUSH
18751: FOR_TO
18752: IFFALSE 18773
// SetSkill ( i , j , 10 ) ;
18754: LD_VAR 0 2
18758: PPUSH
18759: LD_VAR 0 3
18763: PPUSH
18764: LD_INT 10
18766: PPUSH
18767: CALL_OW 237
18771: GO 18751
18773: POP
18774: POP
// end ;
18775: GO 18724
18777: POP
18778: POP
// end ;
18779: LD_VAR 0 1
18783: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18784: LD_INT 0
18786: PPUSH
18787: PPUSH
18788: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18789: LD_ADDR_VAR 0 2
18793: PUSH
18794: LD_INT 22
18796: PUSH
18797: LD_OWVAR 2
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 21
18808: PUSH
18809: LD_INT 1
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PPUSH
18820: CALL_OW 69
18824: PUSH
18825: FOR_IN
18826: IFFALSE 18867
// begin for j := 1 to 4 do
18828: LD_ADDR_VAR 0 3
18832: PUSH
18833: DOUBLE
18834: LD_INT 1
18836: DEC
18837: ST_TO_ADDR
18838: LD_INT 4
18840: PUSH
18841: FOR_TO
18842: IFFALSE 18863
// SetSkill ( i , j , 10 ) ;
18844: LD_VAR 0 2
18848: PPUSH
18849: LD_VAR 0 3
18853: PPUSH
18854: LD_INT 10
18856: PPUSH
18857: CALL_OW 237
18861: GO 18841
18863: POP
18864: POP
// end ;
18865: GO 18825
18867: POP
18868: POP
// end ;
18869: LD_VAR 0 1
18873: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
18874: LD_INT 0
18876: PPUSH
// uc_side := your_side ;
18877: LD_ADDR_OWVAR 20
18881: PUSH
18882: LD_OWVAR 2
18886: ST_TO_ADDR
// uc_nation := nation ;
18887: LD_ADDR_OWVAR 21
18891: PUSH
18892: LD_VAR 0 1
18896: ST_TO_ADDR
// InitHc ;
18897: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18901: LD_INT 0
18903: PPUSH
18904: LD_VAR 0 2
18908: PPUSH
18909: LD_VAR 0 3
18913: PPUSH
18914: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
18918: CALL_OW 44
18922: PPUSH
18923: LD_INT 1
18925: PPUSH
18926: CALL_OW 51
// end ;
18930: LD_VAR 0 4
18934: RET
// export function hHackSpawnVehicle ; begin
18935: LD_INT 0
18937: PPUSH
// uc_side := your_side ;
18938: LD_ADDR_OWVAR 20
18942: PUSH
18943: LD_OWVAR 2
18947: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
18948: LD_ADDR_OWVAR 21
18952: PUSH
18953: LD_INT 1
18955: PPUSH
18956: LD_INT 3
18958: PPUSH
18959: CALL_OW 12
18963: ST_TO_ADDR
// InitVc ;
18964: CALL_OW 20
// case uc_nation of 1 :
18968: LD_OWVAR 21
18972: PUSH
18973: LD_INT 1
18975: DOUBLE
18976: EQUAL
18977: IFTRUE 18981
18979: GO 19125
18981: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
18982: LD_ADDR_OWVAR 37
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: LD_INT 2
18992: PUSH
18993: LD_INT 3
18995: PUSH
18996: LD_INT 4
18998: PUSH
18999: LD_INT 5
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 1
19011: PPUSH
19012: LD_INT 5
19014: PPUSH
19015: CALL_OW 12
19019: ARRAY
19020: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
19021: LD_ADDR_OWVAR 39
19025: PUSH
19026: LD_INT 1
19028: PPUSH
19029: LD_INT 3
19031: PPUSH
19032: CALL_OW 12
19036: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
19037: LD_ADDR_OWVAR 38
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: LD_INT 2
19047: PUSH
19048: LD_INT 3
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 1
19058: PPUSH
19059: LD_INT 3
19061: PPUSH
19062: CALL_OW 12
19066: ARRAY
19067: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
19068: LD_ADDR_OWVAR 40
19072: PUSH
19073: LD_INT 2
19075: PUSH
19076: LD_INT 4
19078: PUSH
19079: LD_INT 5
19081: PUSH
19082: LD_INT 3
19084: PUSH
19085: LD_INT 7
19087: PUSH
19088: LD_INT 8
19090: PUSH
19091: LD_INT 9
19093: PUSH
19094: LD_INT 10
19096: PUSH
19097: LD_INT 6
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 1
19113: PPUSH
19114: LD_INT 9
19116: PPUSH
19117: CALL_OW 12
19121: ARRAY
19122: ST_TO_ADDR
// end ; 2 :
19123: GO 19390
19125: LD_INT 2
19127: DOUBLE
19128: EQUAL
19129: IFTRUE 19133
19131: GO 19257
19133: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
19134: LD_ADDR_OWVAR 37
19138: PUSH
19139: LD_INT 11
19141: PUSH
19142: LD_INT 12
19144: PUSH
19145: LD_INT 13
19147: PUSH
19148: LD_INT 14
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 1
19159: PPUSH
19160: LD_INT 4
19162: PPUSH
19163: CALL_OW 12
19167: ARRAY
19168: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
19169: LD_ADDR_OWVAR 39
19173: PUSH
19174: LD_INT 1
19176: PPUSH
19177: LD_INT 3
19179: PPUSH
19180: CALL_OW 12
19184: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
19185: LD_ADDR_OWVAR 38
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: LD_INT 2
19195: PUSH
19196: LD_INT 5
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 1
19206: PPUSH
19207: LD_INT 3
19209: PPUSH
19210: CALL_OW 12
19214: ARRAY
19215: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
19216: LD_ADDR_OWVAR 40
19220: PUSH
19221: LD_INT 24
19223: PUSH
19224: LD_INT 26
19226: PUSH
19227: LD_INT 27
19229: PUSH
19230: LD_INT 28
19232: PUSH
19233: LD_INT 29
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 1
19245: PPUSH
19246: LD_INT 5
19248: PPUSH
19249: CALL_OW 12
19253: ARRAY
19254: ST_TO_ADDR
// end ; 3 :
19255: GO 19390
19257: LD_INT 3
19259: DOUBLE
19260: EQUAL
19261: IFTRUE 19265
19263: GO 19389
19265: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
19266: LD_ADDR_OWVAR 37
19270: PUSH
19271: LD_INT 21
19273: PUSH
19274: LD_INT 23
19276: PUSH
19277: LD_INT 22
19279: PUSH
19280: LD_INT 24
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 1
19291: PPUSH
19292: LD_INT 4
19294: PPUSH
19295: CALL_OW 12
19299: ARRAY
19300: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
19301: LD_ADDR_OWVAR 39
19305: PUSH
19306: LD_INT 1
19308: PPUSH
19309: LD_INT 3
19311: PPUSH
19312: CALL_OW 12
19316: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
19317: LD_ADDR_OWVAR 38
19321: PUSH
19322: LD_INT 1
19324: PUSH
19325: LD_INT 3
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 1
19334: PPUSH
19335: LD_INT 2
19337: PPUSH
19338: CALL_OW 12
19342: ARRAY
19343: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
19344: LD_ADDR_OWVAR 40
19348: PUSH
19349: LD_INT 42
19351: PUSH
19352: LD_INT 43
19354: PUSH
19355: LD_INT 44
19357: PUSH
19358: LD_INT 46
19360: PUSH
19361: LD_INT 48
19363: PUSH
19364: LD_INT 47
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 1
19377: PPUSH
19378: LD_INT 6
19380: PPUSH
19381: CALL_OW 12
19385: ARRAY
19386: ST_TO_ADDR
// end ; end ;
19387: GO 19390
19389: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19390: CALL_OW 45
19394: PPUSH
19395: LD_INT 1
19397: PPUSH
19398: CALL_OW 51
// end ;
19402: LD_VAR 0 1
19406: RET
// export hInvincible ; every 1 do
19407: GO 19409
19409: DISABLE
// hInvincible := [ ] ;
19410: LD_ADDR_EXP 93
19414: PUSH
19415: EMPTY
19416: ST_TO_ADDR
19417: END
// every 10 do var i ;
19418: GO 19420
19420: DISABLE
19421: LD_INT 0
19423: PPUSH
// begin enable ;
19424: ENABLE
// if not hInvincible then
19425: LD_EXP 93
19429: NOT
19430: IFFALSE 19434
// exit ;
19432: GO 19478
// for i in hInvincible do
19434: LD_ADDR_VAR 0 1
19438: PUSH
19439: LD_EXP 93
19443: PUSH
19444: FOR_IN
19445: IFFALSE 19476
// if GetLives ( i ) < 1000 then
19447: LD_VAR 0 1
19451: PPUSH
19452: CALL_OW 256
19456: PUSH
19457: LD_INT 1000
19459: LESS
19460: IFFALSE 19474
// SetLives ( i , 1000 ) ;
19462: LD_VAR 0 1
19466: PPUSH
19467: LD_INT 1000
19469: PPUSH
19470: CALL_OW 234
19474: GO 19444
19476: POP
19477: POP
// end ;
19478: PPOPN 1
19480: END
// export function hHackInvincible ; var i ; begin
19481: LD_INT 0
19483: PPUSH
19484: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19485: LD_ADDR_VAR 0 2
19489: PUSH
19490: LD_INT 2
19492: PUSH
19493: LD_INT 21
19495: PUSH
19496: LD_INT 1
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 21
19505: PUSH
19506: LD_INT 2
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: LIST
19517: PPUSH
19518: CALL_OW 69
19522: PUSH
19523: FOR_IN
19524: IFFALSE 19585
// if IsSelected ( i ) then
19526: LD_VAR 0 2
19530: PPUSH
19531: CALL_OW 306
19535: IFFALSE 19583
// begin if i in hInvincible then
19537: LD_VAR 0 2
19541: PUSH
19542: LD_EXP 93
19546: IN
19547: IFFALSE 19567
// hInvincible := hInvincible diff i else
19549: LD_ADDR_EXP 93
19553: PUSH
19554: LD_EXP 93
19558: PUSH
19559: LD_VAR 0 2
19563: DIFF
19564: ST_TO_ADDR
19565: GO 19583
// hInvincible := hInvincible union i ;
19567: LD_ADDR_EXP 93
19571: PUSH
19572: LD_EXP 93
19576: PUSH
19577: LD_VAR 0 2
19581: UNION
19582: ST_TO_ADDR
// end ;
19583: GO 19523
19585: POP
19586: POP
// end ;
19587: LD_VAR 0 1
19591: RET
// export function hHackInvisible ; var i , j ; begin
19592: LD_INT 0
19594: PPUSH
19595: PPUSH
19596: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19597: LD_ADDR_VAR 0 2
19601: PUSH
19602: LD_INT 21
19604: PUSH
19605: LD_INT 1
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PPUSH
19612: CALL_OW 69
19616: PUSH
19617: FOR_IN
19618: IFFALSE 19642
// if IsSelected ( i ) then
19620: LD_VAR 0 2
19624: PPUSH
19625: CALL_OW 306
19629: IFFALSE 19640
// ComForceInvisible ( i ) ;
19631: LD_VAR 0 2
19635: PPUSH
19636: CALL_OW 496
19640: GO 19617
19642: POP
19643: POP
// end ;
19644: LD_VAR 0 1
19648: RET
// export function hHackChangeYourSide ; begin
19649: LD_INT 0
19651: PPUSH
// if your_side = 8 then
19652: LD_OWVAR 2
19656: PUSH
19657: LD_INT 8
19659: EQUAL
19660: IFFALSE 19672
// your_side := 0 else
19662: LD_ADDR_OWVAR 2
19666: PUSH
19667: LD_INT 0
19669: ST_TO_ADDR
19670: GO 19686
// your_side := your_side + 1 ;
19672: LD_ADDR_OWVAR 2
19676: PUSH
19677: LD_OWVAR 2
19681: PUSH
19682: LD_INT 1
19684: PLUS
19685: ST_TO_ADDR
// end ;
19686: LD_VAR 0 1
19690: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19691: LD_INT 0
19693: PPUSH
19694: PPUSH
19695: PPUSH
// for i in all_units do
19696: LD_ADDR_VAR 0 2
19700: PUSH
19701: LD_OWVAR 3
19705: PUSH
19706: FOR_IN
19707: IFFALSE 19785
// if IsSelected ( i ) then
19709: LD_VAR 0 2
19713: PPUSH
19714: CALL_OW 306
19718: IFFALSE 19783
// begin j := GetSide ( i ) ;
19720: LD_ADDR_VAR 0 3
19724: PUSH
19725: LD_VAR 0 2
19729: PPUSH
19730: CALL_OW 255
19734: ST_TO_ADDR
// if j = 8 then
19735: LD_VAR 0 3
19739: PUSH
19740: LD_INT 8
19742: EQUAL
19743: IFFALSE 19755
// j := 0 else
19745: LD_ADDR_VAR 0 3
19749: PUSH
19750: LD_INT 0
19752: ST_TO_ADDR
19753: GO 19769
// j := j + 1 ;
19755: LD_ADDR_VAR 0 3
19759: PUSH
19760: LD_VAR 0 3
19764: PUSH
19765: LD_INT 1
19767: PLUS
19768: ST_TO_ADDR
// SetSide ( i , j ) ;
19769: LD_VAR 0 2
19773: PPUSH
19774: LD_VAR 0 3
19778: PPUSH
19779: CALL_OW 235
// end ;
19783: GO 19706
19785: POP
19786: POP
// end ;
19787: LD_VAR 0 1
19791: RET
// export function hHackFog ; begin
19792: LD_INT 0
19794: PPUSH
// FogOff ( true ) ;
19795: LD_INT 1
19797: PPUSH
19798: CALL_OW 344
// end ;
19802: LD_VAR 0 1
19806: RET
// export function hHackApeman ; begin
19807: LD_INT 0
19809: PPUSH
// uc_side := your_side ;
19810: LD_ADDR_OWVAR 20
19814: PUSH
19815: LD_OWVAR 2
19819: ST_TO_ADDR
// uc_nation := 0 ;
19820: LD_ADDR_OWVAR 21
19824: PUSH
19825: LD_INT 0
19827: ST_TO_ADDR
// hc_name :=  ;
19828: LD_ADDR_OWVAR 26
19832: PUSH
19833: LD_STRING 
19835: ST_TO_ADDR
// hc_gallery :=  ;
19836: LD_ADDR_OWVAR 33
19840: PUSH
19841: LD_STRING 
19843: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
19844: LD_ADDR_OWVAR 31
19848: PUSH
19849: LD_INT 0
19851: PUSH
19852: LD_INT 0
19854: PUSH
19855: LD_INT 0
19857: PUSH
19858: LD_INT 0
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: ST_TO_ADDR
// hc_class := class_apeman ;
19867: LD_ADDR_OWVAR 28
19871: PUSH
19872: LD_INT 12
19874: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
19875: CALL_OW 44
19879: PPUSH
19880: LD_INT 1
19882: PPUSH
19883: CALL_OW 51
// end ;
19887: LD_VAR 0 1
19891: RET
// export function hHackBoom ; begin
19892: LD_INT 0
19894: PPUSH
// uc_side := your_side ;
19895: LD_ADDR_OWVAR 20
19899: PUSH
19900: LD_OWVAR 2
19904: ST_TO_ADDR
// uc_nation := 1 ;
19905: LD_ADDR_OWVAR 21
19909: PUSH
19910: LD_INT 1
19912: ST_TO_ADDR
// vc_chassis := us_morphling ;
19913: LD_ADDR_OWVAR 37
19917: PUSH
19918: LD_INT 5
19920: ST_TO_ADDR
// vc_engine := engine_siberite ;
19921: LD_ADDR_OWVAR 39
19925: PUSH
19926: LD_INT 3
19928: ST_TO_ADDR
// vc_control := control_computer ;
19929: LD_ADDR_OWVAR 38
19933: PUSH
19934: LD_INT 3
19936: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
19937: LD_ADDR_OWVAR 40
19941: PUSH
19942: LD_INT 8
19944: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19945: CALL_OW 45
19949: PPUSH
19950: LD_INT 1
19952: PPUSH
19953: CALL_OW 51
// end ; end_of_file
19957: LD_VAR 0 1
19961: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19962: LD_INT 0
19964: PPUSH
19965: PPUSH
19966: PPUSH
19967: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19968: LD_VAR 0 1
19972: PPUSH
19973: CALL_OW 264
19977: PUSH
19978: LD_EXP 28
19982: EQUAL
19983: IFFALSE 20055
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19985: LD_INT 68
19987: PPUSH
19988: LD_VAR 0 1
19992: PPUSH
19993: CALL_OW 255
19997: PPUSH
19998: CALL_OW 321
20002: PUSH
20003: LD_INT 2
20005: EQUAL
20006: IFFALSE 20018
// eff := 70 else
20008: LD_ADDR_VAR 0 4
20012: PUSH
20013: LD_INT 70
20015: ST_TO_ADDR
20016: GO 20026
// eff := 30 ;
20018: LD_ADDR_VAR 0 4
20022: PUSH
20023: LD_INT 30
20025: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20026: LD_VAR 0 1
20030: PPUSH
20031: CALL_OW 250
20035: PPUSH
20036: LD_VAR 0 1
20040: PPUSH
20041: CALL_OW 251
20045: PPUSH
20046: LD_VAR 0 4
20050: PPUSH
20051: CALL_OW 495
// end ; end ;
20055: LD_VAR 0 2
20059: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20060: LD_INT 0
20062: PPUSH
// end ;
20063: LD_VAR 0 4
20067: RET
// export function SOS_Command ( cmd ) ; begin
20068: LD_INT 0
20070: PPUSH
// end ;
20071: LD_VAR 0 2
20075: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20076: LD_VAR 0 1
20080: PUSH
20081: LD_INT 254
20083: EQUAL
20084: PUSH
20085: LD_VAR 0 2
20089: PPUSH
20090: CALL_OW 264
20094: PUSH
20095: LD_EXP 26
20099: EQUAL
20100: AND
20101: PUSH
20102: LD_VAR 0 3
20106: PPUSH
20107: CALL_OW 263
20111: PUSH
20112: LD_INT 3
20114: EQUAL
20115: AND
20116: IFFALSE 20132
// HackDestroyVehicle ( unit , selectedUnit ) ;
20118: LD_VAR 0 2
20122: PPUSH
20123: LD_VAR 0 3
20127: PPUSH
20128: CALL 21639 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20132: LD_VAR 0 1
20136: PUSH
20137: LD_INT 255
20139: EQUAL
20140: PUSH
20141: LD_VAR 0 2
20145: PPUSH
20146: CALL_OW 264
20150: PUSH
20151: LD_INT 14
20153: PUSH
20154: LD_INT 53
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: IN
20161: AND
20162: PUSH
20163: LD_VAR 0 4
20167: PPUSH
20168: LD_VAR 0 5
20172: PPUSH
20173: CALL_OW 488
20177: AND
20178: IFFALSE 20202
// CutTreeXYR ( unit , x , y , 12 ) ;
20180: LD_VAR 0 2
20184: PPUSH
20185: LD_VAR 0 4
20189: PPUSH
20190: LD_VAR 0 5
20194: PPUSH
20195: LD_INT 12
20197: PPUSH
20198: CALL 20205 0 4
// end ;
20202: PPOPN 5
20204: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20205: LD_INT 0
20207: PPUSH
20208: PPUSH
20209: PPUSH
20210: PPUSH
20211: PPUSH
20212: PPUSH
20213: PPUSH
20214: PPUSH
20215: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20216: LD_VAR 0 1
20220: NOT
20221: PUSH
20222: LD_VAR 0 2
20226: PPUSH
20227: LD_VAR 0 3
20231: PPUSH
20232: CALL_OW 488
20236: NOT
20237: OR
20238: PUSH
20239: LD_VAR 0 4
20243: NOT
20244: OR
20245: IFFALSE 20249
// exit ;
20247: GO 20589
// list := [ ] ;
20249: LD_ADDR_VAR 0 13
20253: PUSH
20254: EMPTY
20255: ST_TO_ADDR
// if x - r < 0 then
20256: LD_VAR 0 2
20260: PUSH
20261: LD_VAR 0 4
20265: MINUS
20266: PUSH
20267: LD_INT 0
20269: LESS
20270: IFFALSE 20282
// min_x := 0 else
20272: LD_ADDR_VAR 0 7
20276: PUSH
20277: LD_INT 0
20279: ST_TO_ADDR
20280: GO 20298
// min_x := x - r ;
20282: LD_ADDR_VAR 0 7
20286: PUSH
20287: LD_VAR 0 2
20291: PUSH
20292: LD_VAR 0 4
20296: MINUS
20297: ST_TO_ADDR
// if y - r < 0 then
20298: LD_VAR 0 3
20302: PUSH
20303: LD_VAR 0 4
20307: MINUS
20308: PUSH
20309: LD_INT 0
20311: LESS
20312: IFFALSE 20324
// min_y := 0 else
20314: LD_ADDR_VAR 0 8
20318: PUSH
20319: LD_INT 0
20321: ST_TO_ADDR
20322: GO 20340
// min_y := y - r ;
20324: LD_ADDR_VAR 0 8
20328: PUSH
20329: LD_VAR 0 3
20333: PUSH
20334: LD_VAR 0 4
20338: MINUS
20339: ST_TO_ADDR
// max_x := x + r ;
20340: LD_ADDR_VAR 0 9
20344: PUSH
20345: LD_VAR 0 2
20349: PUSH
20350: LD_VAR 0 4
20354: PLUS
20355: ST_TO_ADDR
// max_y := y + r ;
20356: LD_ADDR_VAR 0 10
20360: PUSH
20361: LD_VAR 0 3
20365: PUSH
20366: LD_VAR 0 4
20370: PLUS
20371: ST_TO_ADDR
// for _x = min_x to max_x do
20372: LD_ADDR_VAR 0 11
20376: PUSH
20377: DOUBLE
20378: LD_VAR 0 7
20382: DEC
20383: ST_TO_ADDR
20384: LD_VAR 0 9
20388: PUSH
20389: FOR_TO
20390: IFFALSE 20507
// for _y = min_y to max_y do
20392: LD_ADDR_VAR 0 12
20396: PUSH
20397: DOUBLE
20398: LD_VAR 0 8
20402: DEC
20403: ST_TO_ADDR
20404: LD_VAR 0 10
20408: PUSH
20409: FOR_TO
20410: IFFALSE 20503
// begin if not ValidHex ( _x , _y ) then
20412: LD_VAR 0 11
20416: PPUSH
20417: LD_VAR 0 12
20421: PPUSH
20422: CALL_OW 488
20426: NOT
20427: IFFALSE 20431
// continue ;
20429: GO 20409
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20431: LD_VAR 0 11
20435: PPUSH
20436: LD_VAR 0 12
20440: PPUSH
20441: CALL_OW 351
20445: PUSH
20446: LD_VAR 0 11
20450: PPUSH
20451: LD_VAR 0 12
20455: PPUSH
20456: CALL_OW 554
20460: AND
20461: IFFALSE 20501
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20463: LD_ADDR_VAR 0 13
20467: PUSH
20468: LD_VAR 0 13
20472: PPUSH
20473: LD_VAR 0 13
20477: PUSH
20478: LD_INT 1
20480: PLUS
20481: PPUSH
20482: LD_VAR 0 11
20486: PUSH
20487: LD_VAR 0 12
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PPUSH
20496: CALL_OW 2
20500: ST_TO_ADDR
// end ;
20501: GO 20409
20503: POP
20504: POP
20505: GO 20389
20507: POP
20508: POP
// if not list then
20509: LD_VAR 0 13
20513: NOT
20514: IFFALSE 20518
// exit ;
20516: GO 20589
// for i in list do
20518: LD_ADDR_VAR 0 6
20522: PUSH
20523: LD_VAR 0 13
20527: PUSH
20528: FOR_IN
20529: IFFALSE 20587
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20531: LD_VAR 0 1
20535: PPUSH
20536: LD_STRING M
20538: PUSH
20539: LD_VAR 0 6
20543: PUSH
20544: LD_INT 1
20546: ARRAY
20547: PUSH
20548: LD_VAR 0 6
20552: PUSH
20553: LD_INT 2
20555: ARRAY
20556: PUSH
20557: LD_INT 0
20559: PUSH
20560: LD_INT 0
20562: PUSH
20563: LD_INT 0
20565: PUSH
20566: LD_INT 0
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: PUSH
20578: EMPTY
20579: LIST
20580: PPUSH
20581: CALL_OW 447
20585: GO 20528
20587: POP
20588: POP
// end ;
20589: LD_VAR 0 5
20593: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20594: LD_EXP 94
20598: NOT
20599: IFFALSE 20649
20601: GO 20603
20603: DISABLE
// begin initHack := true ;
20604: LD_ADDR_EXP 94
20608: PUSH
20609: LD_INT 1
20611: ST_TO_ADDR
// hackTanks := [ ] ;
20612: LD_ADDR_EXP 95
20616: PUSH
20617: EMPTY
20618: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20619: LD_ADDR_EXP 96
20623: PUSH
20624: EMPTY
20625: ST_TO_ADDR
// hackLimit := 3 ;
20626: LD_ADDR_EXP 97
20630: PUSH
20631: LD_INT 3
20633: ST_TO_ADDR
// hackDist := 12 ;
20634: LD_ADDR_EXP 98
20638: PUSH
20639: LD_INT 12
20641: ST_TO_ADDR
// hackCounter := [ ] ;
20642: LD_ADDR_EXP 99
20646: PUSH
20647: EMPTY
20648: ST_TO_ADDR
// end ;
20649: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20650: LD_EXP 94
20654: PUSH
20655: LD_INT 34
20657: PUSH
20658: LD_EXP 26
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PPUSH
20667: CALL_OW 69
20671: AND
20672: IFFALSE 20927
20674: GO 20676
20676: DISABLE
20677: LD_INT 0
20679: PPUSH
20680: PPUSH
// begin enable ;
20681: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20682: LD_ADDR_VAR 0 1
20686: PUSH
20687: LD_INT 34
20689: PUSH
20690: LD_EXP 26
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PPUSH
20699: CALL_OW 69
20703: PUSH
20704: FOR_IN
20705: IFFALSE 20925
// begin if not i in hackTanks then
20707: LD_VAR 0 1
20711: PUSH
20712: LD_EXP 95
20716: IN
20717: NOT
20718: IFFALSE 20801
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20720: LD_ADDR_EXP 95
20724: PUSH
20725: LD_EXP 95
20729: PPUSH
20730: LD_EXP 95
20734: PUSH
20735: LD_INT 1
20737: PLUS
20738: PPUSH
20739: LD_VAR 0 1
20743: PPUSH
20744: CALL_OW 1
20748: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20749: LD_ADDR_EXP 96
20753: PUSH
20754: LD_EXP 96
20758: PPUSH
20759: LD_EXP 96
20763: PUSH
20764: LD_INT 1
20766: PLUS
20767: PPUSH
20768: EMPTY
20769: PPUSH
20770: CALL_OW 1
20774: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20775: LD_ADDR_EXP 99
20779: PUSH
20780: LD_EXP 99
20784: PPUSH
20785: LD_EXP 99
20789: PUSH
20790: LD_INT 1
20792: PLUS
20793: PPUSH
20794: EMPTY
20795: PPUSH
20796: CALL_OW 1
20800: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20801: LD_VAR 0 1
20805: PPUSH
20806: CALL_OW 302
20810: NOT
20811: IFFALSE 20824
// begin HackUnlinkAll ( i ) ;
20813: LD_VAR 0 1
20817: PPUSH
20818: CALL 20930 0 1
// continue ;
20822: GO 20704
// end ; HackCheckCapturedStatus ( i ) ;
20824: LD_VAR 0 1
20828: PPUSH
20829: CALL 21373 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20833: LD_ADDR_VAR 0 2
20837: PUSH
20838: LD_INT 81
20840: PUSH
20841: LD_VAR 0 1
20845: PPUSH
20846: CALL_OW 255
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 33
20857: PUSH
20858: LD_INT 3
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 91
20867: PUSH
20868: LD_VAR 0 1
20872: PUSH
20873: LD_EXP 98
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 50
20885: PUSH
20886: EMPTY
20887: LIST
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: PPUSH
20895: CALL_OW 69
20899: ST_TO_ADDR
// if not tmp then
20900: LD_VAR 0 2
20904: NOT
20905: IFFALSE 20909
// continue ;
20907: GO 20704
// HackLink ( i , tmp ) ;
20909: LD_VAR 0 1
20913: PPUSH
20914: LD_VAR 0 2
20918: PPUSH
20919: CALL 21066 0 2
// end ;
20923: GO 20704
20925: POP
20926: POP
// end ;
20927: PPOPN 2
20929: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20930: LD_INT 0
20932: PPUSH
20933: PPUSH
20934: PPUSH
// if not hack in hackTanks then
20935: LD_VAR 0 1
20939: PUSH
20940: LD_EXP 95
20944: IN
20945: NOT
20946: IFFALSE 20950
// exit ;
20948: GO 21061
// index := GetElementIndex ( hackTanks , hack ) ;
20950: LD_ADDR_VAR 0 4
20954: PUSH
20955: LD_EXP 95
20959: PPUSH
20960: LD_VAR 0 1
20964: PPUSH
20965: CALL 26481 0 2
20969: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20970: LD_EXP 96
20974: PUSH
20975: LD_VAR 0 4
20979: ARRAY
20980: IFFALSE 21061
// begin for i in hackTanksCaptured [ index ] do
20982: LD_ADDR_VAR 0 3
20986: PUSH
20987: LD_EXP 96
20991: PUSH
20992: LD_VAR 0 4
20996: ARRAY
20997: PUSH
20998: FOR_IN
20999: IFFALSE 21025
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21001: LD_VAR 0 3
21005: PUSH
21006: LD_INT 1
21008: ARRAY
21009: PPUSH
21010: LD_VAR 0 3
21014: PUSH
21015: LD_INT 2
21017: ARRAY
21018: PPUSH
21019: CALL_OW 235
21023: GO 20998
21025: POP
21026: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21027: LD_ADDR_EXP 96
21031: PUSH
21032: LD_EXP 96
21036: PPUSH
21037: LD_VAR 0 4
21041: PPUSH
21042: EMPTY
21043: PPUSH
21044: CALL_OW 1
21048: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21049: LD_VAR 0 1
21053: PPUSH
21054: LD_INT 0
21056: PPUSH
21057: CALL_OW 505
// end ; end ;
21061: LD_VAR 0 2
21065: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21066: LD_INT 0
21068: PPUSH
21069: PPUSH
21070: PPUSH
// if not hack in hackTanks or not vehicles then
21071: LD_VAR 0 1
21075: PUSH
21076: LD_EXP 95
21080: IN
21081: NOT
21082: PUSH
21083: LD_VAR 0 2
21087: NOT
21088: OR
21089: IFFALSE 21093
// exit ;
21091: GO 21368
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21093: LD_ADDR_VAR 0 2
21097: PUSH
21098: LD_VAR 0 1
21102: PPUSH
21103: LD_VAR 0 2
21107: PPUSH
21108: LD_INT 1
21110: PPUSH
21111: LD_INT 1
21113: PPUSH
21114: CALL 27131 0 4
21118: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21119: LD_ADDR_VAR 0 5
21123: PUSH
21124: LD_EXP 95
21128: PPUSH
21129: LD_VAR 0 1
21133: PPUSH
21134: CALL 26481 0 2
21138: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21139: LD_EXP 96
21143: PUSH
21144: LD_VAR 0 5
21148: ARRAY
21149: PUSH
21150: LD_EXP 97
21154: LESS
21155: IFFALSE 21344
// begin for i := 1 to vehicles do
21157: LD_ADDR_VAR 0 4
21161: PUSH
21162: DOUBLE
21163: LD_INT 1
21165: DEC
21166: ST_TO_ADDR
21167: LD_VAR 0 2
21171: PUSH
21172: FOR_TO
21173: IFFALSE 21342
// begin if hackTanksCaptured [ index ] = hackLimit then
21175: LD_EXP 96
21179: PUSH
21180: LD_VAR 0 5
21184: ARRAY
21185: PUSH
21186: LD_EXP 97
21190: EQUAL
21191: IFFALSE 21195
// break ;
21193: GO 21342
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21195: LD_ADDR_EXP 99
21199: PUSH
21200: LD_EXP 99
21204: PPUSH
21205: LD_VAR 0 5
21209: PPUSH
21210: LD_EXP 99
21214: PUSH
21215: LD_VAR 0 5
21219: ARRAY
21220: PUSH
21221: LD_INT 1
21223: PLUS
21224: PPUSH
21225: CALL_OW 1
21229: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21230: LD_ADDR_EXP 96
21234: PUSH
21235: LD_EXP 96
21239: PPUSH
21240: LD_VAR 0 5
21244: PUSH
21245: LD_EXP 96
21249: PUSH
21250: LD_VAR 0 5
21254: ARRAY
21255: PUSH
21256: LD_INT 1
21258: PLUS
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PPUSH
21264: LD_VAR 0 2
21268: PUSH
21269: LD_VAR 0 4
21273: ARRAY
21274: PUSH
21275: LD_VAR 0 2
21279: PUSH
21280: LD_VAR 0 4
21284: ARRAY
21285: PPUSH
21286: CALL_OW 255
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PPUSH
21295: CALL 26696 0 3
21299: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21300: LD_VAR 0 2
21304: PUSH
21305: LD_VAR 0 4
21309: ARRAY
21310: PPUSH
21311: LD_VAR 0 1
21315: PPUSH
21316: CALL_OW 255
21320: PPUSH
21321: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21325: LD_VAR 0 2
21329: PUSH
21330: LD_VAR 0 4
21334: ARRAY
21335: PPUSH
21336: CALL_OW 141
// end ;
21340: GO 21172
21342: POP
21343: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21344: LD_VAR 0 1
21348: PPUSH
21349: LD_EXP 96
21353: PUSH
21354: LD_VAR 0 5
21358: ARRAY
21359: PUSH
21360: LD_INT 0
21362: PLUS
21363: PPUSH
21364: CALL_OW 505
// end ;
21368: LD_VAR 0 3
21372: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21373: LD_INT 0
21375: PPUSH
21376: PPUSH
21377: PPUSH
21378: PPUSH
// if not hack in hackTanks then
21379: LD_VAR 0 1
21383: PUSH
21384: LD_EXP 95
21388: IN
21389: NOT
21390: IFFALSE 21394
// exit ;
21392: GO 21634
// index := GetElementIndex ( hackTanks , hack ) ;
21394: LD_ADDR_VAR 0 4
21398: PUSH
21399: LD_EXP 95
21403: PPUSH
21404: LD_VAR 0 1
21408: PPUSH
21409: CALL 26481 0 2
21413: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21414: LD_ADDR_VAR 0 3
21418: PUSH
21419: DOUBLE
21420: LD_EXP 96
21424: PUSH
21425: LD_VAR 0 4
21429: ARRAY
21430: INC
21431: ST_TO_ADDR
21432: LD_INT 1
21434: PUSH
21435: FOR_DOWNTO
21436: IFFALSE 21608
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21438: LD_ADDR_VAR 0 5
21442: PUSH
21443: LD_EXP 96
21447: PUSH
21448: LD_VAR 0 4
21452: ARRAY
21453: PUSH
21454: LD_VAR 0 3
21458: ARRAY
21459: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21460: LD_VAR 0 5
21464: PUSH
21465: LD_INT 1
21467: ARRAY
21468: PPUSH
21469: CALL_OW 302
21473: NOT
21474: PUSH
21475: LD_VAR 0 5
21479: PUSH
21480: LD_INT 1
21482: ARRAY
21483: PPUSH
21484: CALL_OW 255
21488: PUSH
21489: LD_VAR 0 1
21493: PPUSH
21494: CALL_OW 255
21498: NONEQUAL
21499: OR
21500: IFFALSE 21606
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21502: LD_VAR 0 5
21506: PUSH
21507: LD_INT 1
21509: ARRAY
21510: PPUSH
21511: CALL_OW 305
21515: PUSH
21516: LD_VAR 0 5
21520: PUSH
21521: LD_INT 1
21523: ARRAY
21524: PPUSH
21525: CALL_OW 255
21529: PUSH
21530: LD_VAR 0 1
21534: PPUSH
21535: CALL_OW 255
21539: EQUAL
21540: AND
21541: IFFALSE 21565
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21543: LD_VAR 0 5
21547: PUSH
21548: LD_INT 1
21550: ARRAY
21551: PPUSH
21552: LD_VAR 0 5
21556: PUSH
21557: LD_INT 2
21559: ARRAY
21560: PPUSH
21561: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21565: LD_ADDR_EXP 96
21569: PUSH
21570: LD_EXP 96
21574: PPUSH
21575: LD_VAR 0 4
21579: PPUSH
21580: LD_EXP 96
21584: PUSH
21585: LD_VAR 0 4
21589: ARRAY
21590: PPUSH
21591: LD_VAR 0 3
21595: PPUSH
21596: CALL_OW 3
21600: PPUSH
21601: CALL_OW 1
21605: ST_TO_ADDR
// end ; end ;
21606: GO 21435
21608: POP
21609: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21610: LD_VAR 0 1
21614: PPUSH
21615: LD_EXP 96
21619: PUSH
21620: LD_VAR 0 4
21624: ARRAY
21625: PUSH
21626: LD_INT 0
21628: PLUS
21629: PPUSH
21630: CALL_OW 505
// end ;
21634: LD_VAR 0 2
21638: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21639: LD_INT 0
21641: PPUSH
21642: PPUSH
21643: PPUSH
21644: PPUSH
// if not hack in hackTanks then
21645: LD_VAR 0 1
21649: PUSH
21650: LD_EXP 95
21654: IN
21655: NOT
21656: IFFALSE 21660
// exit ;
21658: GO 21745
// index := GetElementIndex ( hackTanks , hack ) ;
21660: LD_ADDR_VAR 0 5
21664: PUSH
21665: LD_EXP 95
21669: PPUSH
21670: LD_VAR 0 1
21674: PPUSH
21675: CALL 26481 0 2
21679: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21680: LD_ADDR_VAR 0 4
21684: PUSH
21685: DOUBLE
21686: LD_INT 1
21688: DEC
21689: ST_TO_ADDR
21690: LD_EXP 96
21694: PUSH
21695: LD_VAR 0 5
21699: ARRAY
21700: PUSH
21701: FOR_TO
21702: IFFALSE 21743
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21704: LD_EXP 96
21708: PUSH
21709: LD_VAR 0 5
21713: ARRAY
21714: PUSH
21715: LD_VAR 0 4
21719: ARRAY
21720: PUSH
21721: LD_INT 1
21723: ARRAY
21724: PUSH
21725: LD_VAR 0 2
21729: EQUAL
21730: IFFALSE 21741
// KillUnit ( vehicle ) ;
21732: LD_VAR 0 2
21736: PPUSH
21737: CALL_OW 66
21741: GO 21701
21743: POP
21744: POP
// end ; end_of_file
21745: LD_VAR 0 3
21749: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21750: LD_INT 0
21752: PPUSH
21753: PPUSH
// if exist_mode then
21754: LD_VAR 0 2
21758: IFFALSE 21783
// unit := CreateCharacter ( prefix & ident ) else
21760: LD_ADDR_VAR 0 5
21764: PUSH
21765: LD_VAR 0 3
21769: PUSH
21770: LD_VAR 0 1
21774: STR
21775: PPUSH
21776: CALL_OW 34
21780: ST_TO_ADDR
21781: GO 21798
// unit := NewCharacter ( ident ) ;
21783: LD_ADDR_VAR 0 5
21787: PUSH
21788: LD_VAR 0 1
21792: PPUSH
21793: CALL_OW 25
21797: ST_TO_ADDR
// result := unit ;
21798: LD_ADDR_VAR 0 4
21802: PUSH
21803: LD_VAR 0 5
21807: ST_TO_ADDR
// end ;
21808: LD_VAR 0 4
21812: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21813: LD_INT 0
21815: PPUSH
21816: PPUSH
// if not side or not nation then
21817: LD_VAR 0 1
21821: NOT
21822: PUSH
21823: LD_VAR 0 2
21827: NOT
21828: OR
21829: IFFALSE 21833
// exit ;
21831: GO 22597
// case nation of nation_american :
21833: LD_VAR 0 2
21837: PUSH
21838: LD_INT 1
21840: DOUBLE
21841: EQUAL
21842: IFTRUE 21846
21844: GO 22060
21846: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21847: LD_ADDR_VAR 0 4
21851: PUSH
21852: LD_INT 35
21854: PUSH
21855: LD_INT 45
21857: PUSH
21858: LD_INT 46
21860: PUSH
21861: LD_INT 47
21863: PUSH
21864: LD_INT 82
21866: PUSH
21867: LD_INT 83
21869: PUSH
21870: LD_INT 84
21872: PUSH
21873: LD_INT 85
21875: PUSH
21876: LD_INT 86
21878: PUSH
21879: LD_INT 1
21881: PUSH
21882: LD_INT 2
21884: PUSH
21885: LD_INT 6
21887: PUSH
21888: LD_INT 15
21890: PUSH
21891: LD_INT 16
21893: PUSH
21894: LD_INT 7
21896: PUSH
21897: LD_INT 12
21899: PUSH
21900: LD_INT 13
21902: PUSH
21903: LD_INT 10
21905: PUSH
21906: LD_INT 14
21908: PUSH
21909: LD_INT 20
21911: PUSH
21912: LD_INT 21
21914: PUSH
21915: LD_INT 22
21917: PUSH
21918: LD_INT 25
21920: PUSH
21921: LD_INT 32
21923: PUSH
21924: LD_INT 27
21926: PUSH
21927: LD_INT 36
21929: PUSH
21930: LD_INT 69
21932: PUSH
21933: LD_INT 39
21935: PUSH
21936: LD_INT 34
21938: PUSH
21939: LD_INT 40
21941: PUSH
21942: LD_INT 48
21944: PUSH
21945: LD_INT 49
21947: PUSH
21948: LD_INT 50
21950: PUSH
21951: LD_INT 51
21953: PUSH
21954: LD_INT 52
21956: PUSH
21957: LD_INT 53
21959: PUSH
21960: LD_INT 54
21962: PUSH
21963: LD_INT 55
21965: PUSH
21966: LD_INT 56
21968: PUSH
21969: LD_INT 57
21971: PUSH
21972: LD_INT 58
21974: PUSH
21975: LD_INT 59
21977: PUSH
21978: LD_INT 60
21980: PUSH
21981: LD_INT 61
21983: PUSH
21984: LD_INT 62
21986: PUSH
21987: LD_INT 80
21989: PUSH
21990: LD_INT 82
21992: PUSH
21993: LD_INT 83
21995: PUSH
21996: LD_INT 84
21998: PUSH
21999: LD_INT 85
22001: PUSH
22002: LD_INT 86
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: ST_TO_ADDR
22058: GO 22521
22060: LD_INT 2
22062: DOUBLE
22063: EQUAL
22064: IFTRUE 22068
22066: GO 22290
22068: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
22069: LD_ADDR_VAR 0 4
22073: PUSH
22074: LD_INT 35
22076: PUSH
22077: LD_INT 45
22079: PUSH
22080: LD_INT 46
22082: PUSH
22083: LD_INT 47
22085: PUSH
22086: LD_INT 82
22088: PUSH
22089: LD_INT 83
22091: PUSH
22092: LD_INT 84
22094: PUSH
22095: LD_INT 85
22097: PUSH
22098: LD_INT 87
22100: PUSH
22101: LD_INT 70
22103: PUSH
22104: LD_INT 1
22106: PUSH
22107: LD_INT 11
22109: PUSH
22110: LD_INT 3
22112: PUSH
22113: LD_INT 4
22115: PUSH
22116: LD_INT 5
22118: PUSH
22119: LD_INT 6
22121: PUSH
22122: LD_INT 15
22124: PUSH
22125: LD_INT 18
22127: PUSH
22128: LD_INT 7
22130: PUSH
22131: LD_INT 17
22133: PUSH
22134: LD_INT 8
22136: PUSH
22137: LD_INT 20
22139: PUSH
22140: LD_INT 21
22142: PUSH
22143: LD_INT 22
22145: PUSH
22146: LD_INT 72
22148: PUSH
22149: LD_INT 26
22151: PUSH
22152: LD_INT 69
22154: PUSH
22155: LD_INT 39
22157: PUSH
22158: LD_INT 40
22160: PUSH
22161: LD_INT 41
22163: PUSH
22164: LD_INT 42
22166: PUSH
22167: LD_INT 43
22169: PUSH
22170: LD_INT 48
22172: PUSH
22173: LD_INT 49
22175: PUSH
22176: LD_INT 50
22178: PUSH
22179: LD_INT 51
22181: PUSH
22182: LD_INT 52
22184: PUSH
22185: LD_INT 53
22187: PUSH
22188: LD_INT 54
22190: PUSH
22191: LD_INT 55
22193: PUSH
22194: LD_INT 56
22196: PUSH
22197: LD_INT 60
22199: PUSH
22200: LD_INT 61
22202: PUSH
22203: LD_INT 62
22205: PUSH
22206: LD_INT 66
22208: PUSH
22209: LD_INT 67
22211: PUSH
22212: LD_INT 68
22214: PUSH
22215: LD_INT 81
22217: PUSH
22218: LD_INT 82
22220: PUSH
22221: LD_INT 83
22223: PUSH
22224: LD_INT 84
22226: PUSH
22227: LD_INT 85
22229: PUSH
22230: LD_INT 87
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: ST_TO_ADDR
22288: GO 22521
22290: LD_INT 3
22292: DOUBLE
22293: EQUAL
22294: IFTRUE 22298
22296: GO 22520
22298: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22299: LD_ADDR_VAR 0 4
22303: PUSH
22304: LD_INT 46
22306: PUSH
22307: LD_INT 47
22309: PUSH
22310: LD_INT 1
22312: PUSH
22313: LD_INT 2
22315: PUSH
22316: LD_INT 82
22318: PUSH
22319: LD_INT 83
22321: PUSH
22322: LD_INT 84
22324: PUSH
22325: LD_INT 85
22327: PUSH
22328: LD_INT 86
22330: PUSH
22331: LD_INT 11
22333: PUSH
22334: LD_INT 9
22336: PUSH
22337: LD_INT 20
22339: PUSH
22340: LD_INT 19
22342: PUSH
22343: LD_INT 21
22345: PUSH
22346: LD_INT 24
22348: PUSH
22349: LD_INT 22
22351: PUSH
22352: LD_INT 25
22354: PUSH
22355: LD_INT 28
22357: PUSH
22358: LD_INT 29
22360: PUSH
22361: LD_INT 30
22363: PUSH
22364: LD_INT 31
22366: PUSH
22367: LD_INT 37
22369: PUSH
22370: LD_INT 38
22372: PUSH
22373: LD_INT 32
22375: PUSH
22376: LD_INT 27
22378: PUSH
22379: LD_INT 33
22381: PUSH
22382: LD_INT 69
22384: PUSH
22385: LD_INT 39
22387: PUSH
22388: LD_INT 34
22390: PUSH
22391: LD_INT 40
22393: PUSH
22394: LD_INT 71
22396: PUSH
22397: LD_INT 23
22399: PUSH
22400: LD_INT 44
22402: PUSH
22403: LD_INT 48
22405: PUSH
22406: LD_INT 49
22408: PUSH
22409: LD_INT 50
22411: PUSH
22412: LD_INT 51
22414: PUSH
22415: LD_INT 52
22417: PUSH
22418: LD_INT 53
22420: PUSH
22421: LD_INT 54
22423: PUSH
22424: LD_INT 55
22426: PUSH
22427: LD_INT 56
22429: PUSH
22430: LD_INT 57
22432: PUSH
22433: LD_INT 58
22435: PUSH
22436: LD_INT 59
22438: PUSH
22439: LD_INT 63
22441: PUSH
22442: LD_INT 64
22444: PUSH
22445: LD_INT 65
22447: PUSH
22448: LD_INT 82
22450: PUSH
22451: LD_INT 83
22453: PUSH
22454: LD_INT 84
22456: PUSH
22457: LD_INT 85
22459: PUSH
22460: LD_INT 86
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: ST_TO_ADDR
22518: GO 22521
22520: POP
// if state > - 1 and state < 3 then
22521: LD_VAR 0 3
22525: PUSH
22526: LD_INT 1
22528: NEG
22529: GREATER
22530: PUSH
22531: LD_VAR 0 3
22535: PUSH
22536: LD_INT 3
22538: LESS
22539: AND
22540: IFFALSE 22597
// for i in result do
22542: LD_ADDR_VAR 0 5
22546: PUSH
22547: LD_VAR 0 4
22551: PUSH
22552: FOR_IN
22553: IFFALSE 22595
// if GetTech ( i , side ) <> state then
22555: LD_VAR 0 5
22559: PPUSH
22560: LD_VAR 0 1
22564: PPUSH
22565: CALL_OW 321
22569: PUSH
22570: LD_VAR 0 3
22574: NONEQUAL
22575: IFFALSE 22593
// result := result diff i ;
22577: LD_ADDR_VAR 0 4
22581: PUSH
22582: LD_VAR 0 4
22586: PUSH
22587: LD_VAR 0 5
22591: DIFF
22592: ST_TO_ADDR
22593: GO 22552
22595: POP
22596: POP
// end ;
22597: LD_VAR 0 4
22601: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22602: LD_INT 0
22604: PPUSH
22605: PPUSH
22606: PPUSH
// result := true ;
22607: LD_ADDR_VAR 0 3
22611: PUSH
22612: LD_INT 1
22614: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22615: LD_ADDR_VAR 0 5
22619: PUSH
22620: LD_VAR 0 2
22624: PPUSH
22625: CALL_OW 480
22629: ST_TO_ADDR
// if not tmp then
22630: LD_VAR 0 5
22634: NOT
22635: IFFALSE 22639
// exit ;
22637: GO 22688
// for i in tmp do
22639: LD_ADDR_VAR 0 4
22643: PUSH
22644: LD_VAR 0 5
22648: PUSH
22649: FOR_IN
22650: IFFALSE 22686
// if GetTech ( i , side ) <> state_researched then
22652: LD_VAR 0 4
22656: PPUSH
22657: LD_VAR 0 1
22661: PPUSH
22662: CALL_OW 321
22666: PUSH
22667: LD_INT 2
22669: NONEQUAL
22670: IFFALSE 22684
// begin result := false ;
22672: LD_ADDR_VAR 0 3
22676: PUSH
22677: LD_INT 0
22679: ST_TO_ADDR
// exit ;
22680: POP
22681: POP
22682: GO 22688
// end ;
22684: GO 22649
22686: POP
22687: POP
// end ;
22688: LD_VAR 0 3
22692: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22693: LD_INT 0
22695: PPUSH
22696: PPUSH
22697: PPUSH
22698: PPUSH
22699: PPUSH
22700: PPUSH
22701: PPUSH
22702: PPUSH
22703: PPUSH
22704: PPUSH
22705: PPUSH
22706: PPUSH
22707: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22708: LD_VAR 0 1
22712: NOT
22713: PUSH
22714: LD_VAR 0 1
22718: PPUSH
22719: CALL_OW 257
22723: PUSH
22724: LD_INT 9
22726: NONEQUAL
22727: OR
22728: IFFALSE 22732
// exit ;
22730: GO 23305
// side := GetSide ( unit ) ;
22732: LD_ADDR_VAR 0 9
22736: PUSH
22737: LD_VAR 0 1
22741: PPUSH
22742: CALL_OW 255
22746: ST_TO_ADDR
// tech_space := tech_spacanom ;
22747: LD_ADDR_VAR 0 12
22751: PUSH
22752: LD_INT 29
22754: ST_TO_ADDR
// tech_time := tech_taurad ;
22755: LD_ADDR_VAR 0 13
22759: PUSH
22760: LD_INT 28
22762: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22763: LD_ADDR_VAR 0 11
22767: PUSH
22768: LD_VAR 0 1
22772: PPUSH
22773: CALL_OW 310
22777: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22778: LD_VAR 0 11
22782: PPUSH
22783: CALL_OW 247
22787: PUSH
22788: LD_INT 2
22790: EQUAL
22791: IFFALSE 22795
// exit ;
22793: GO 23305
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22795: LD_ADDR_VAR 0 8
22799: PUSH
22800: LD_INT 81
22802: PUSH
22803: LD_VAR 0 9
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 3
22814: PUSH
22815: LD_INT 21
22817: PUSH
22818: LD_INT 3
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PPUSH
22833: CALL_OW 69
22837: ST_TO_ADDR
// if not tmp then
22838: LD_VAR 0 8
22842: NOT
22843: IFFALSE 22847
// exit ;
22845: GO 23305
// if in_unit then
22847: LD_VAR 0 11
22851: IFFALSE 22875
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22853: LD_ADDR_VAR 0 10
22857: PUSH
22858: LD_VAR 0 8
22862: PPUSH
22863: LD_VAR 0 11
22867: PPUSH
22868: CALL_OW 74
22872: ST_TO_ADDR
22873: GO 22895
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22875: LD_ADDR_VAR 0 10
22879: PUSH
22880: LD_VAR 0 8
22884: PPUSH
22885: LD_VAR 0 1
22889: PPUSH
22890: CALL_OW 74
22894: ST_TO_ADDR
// if not enemy then
22895: LD_VAR 0 10
22899: NOT
22900: IFFALSE 22904
// exit ;
22902: GO 23305
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22904: LD_VAR 0 11
22908: PUSH
22909: LD_VAR 0 11
22913: PPUSH
22914: LD_VAR 0 10
22918: PPUSH
22919: CALL_OW 296
22923: PUSH
22924: LD_INT 13
22926: GREATER
22927: AND
22928: PUSH
22929: LD_VAR 0 1
22933: PPUSH
22934: LD_VAR 0 10
22938: PPUSH
22939: CALL_OW 296
22943: PUSH
22944: LD_INT 12
22946: GREATER
22947: OR
22948: IFFALSE 22952
// exit ;
22950: GO 23305
// missile := [ 1 ] ;
22952: LD_ADDR_VAR 0 14
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: EMPTY
22961: LIST
22962: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22963: LD_VAR 0 9
22967: PPUSH
22968: LD_VAR 0 12
22972: PPUSH
22973: CALL_OW 325
22977: IFFALSE 23006
// missile := Insert ( missile , missile + 1 , 2 ) ;
22979: LD_ADDR_VAR 0 14
22983: PUSH
22984: LD_VAR 0 14
22988: PPUSH
22989: LD_VAR 0 14
22993: PUSH
22994: LD_INT 1
22996: PLUS
22997: PPUSH
22998: LD_INT 2
23000: PPUSH
23001: CALL_OW 2
23005: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23006: LD_VAR 0 9
23010: PPUSH
23011: LD_VAR 0 13
23015: PPUSH
23016: CALL_OW 325
23020: PUSH
23021: LD_VAR 0 10
23025: PPUSH
23026: CALL_OW 255
23030: PPUSH
23031: LD_VAR 0 13
23035: PPUSH
23036: CALL_OW 325
23040: NOT
23041: AND
23042: IFFALSE 23071
// missile := Insert ( missile , missile + 1 , 3 ) ;
23044: LD_ADDR_VAR 0 14
23048: PUSH
23049: LD_VAR 0 14
23053: PPUSH
23054: LD_VAR 0 14
23058: PUSH
23059: LD_INT 1
23061: PLUS
23062: PPUSH
23063: LD_INT 3
23065: PPUSH
23066: CALL_OW 2
23070: ST_TO_ADDR
// if missile < 2 then
23071: LD_VAR 0 14
23075: PUSH
23076: LD_INT 2
23078: LESS
23079: IFFALSE 23083
// exit ;
23081: GO 23305
// x := GetX ( enemy ) ;
23083: LD_ADDR_VAR 0 4
23087: PUSH
23088: LD_VAR 0 10
23092: PPUSH
23093: CALL_OW 250
23097: ST_TO_ADDR
// y := GetY ( enemy ) ;
23098: LD_ADDR_VAR 0 5
23102: PUSH
23103: LD_VAR 0 10
23107: PPUSH
23108: CALL_OW 251
23112: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23113: LD_ADDR_VAR 0 6
23117: PUSH
23118: LD_VAR 0 4
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PPUSH
23127: LD_INT 1
23129: PPUSH
23130: CALL_OW 12
23134: PLUS
23135: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23136: LD_ADDR_VAR 0 7
23140: PUSH
23141: LD_VAR 0 5
23145: PUSH
23146: LD_INT 1
23148: NEG
23149: PPUSH
23150: LD_INT 1
23152: PPUSH
23153: CALL_OW 12
23157: PLUS
23158: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23159: LD_VAR 0 6
23163: PPUSH
23164: LD_VAR 0 7
23168: PPUSH
23169: CALL_OW 488
23173: NOT
23174: IFFALSE 23196
// begin _x := x ;
23176: LD_ADDR_VAR 0 6
23180: PUSH
23181: LD_VAR 0 4
23185: ST_TO_ADDR
// _y := y ;
23186: LD_ADDR_VAR 0 7
23190: PUSH
23191: LD_VAR 0 5
23195: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23196: LD_ADDR_VAR 0 3
23200: PUSH
23201: LD_INT 1
23203: PPUSH
23204: LD_VAR 0 14
23208: PPUSH
23209: CALL_OW 12
23213: ST_TO_ADDR
// case i of 1 :
23214: LD_VAR 0 3
23218: PUSH
23219: LD_INT 1
23221: DOUBLE
23222: EQUAL
23223: IFTRUE 23227
23225: GO 23244
23227: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23228: LD_VAR 0 1
23232: PPUSH
23233: LD_VAR 0 10
23237: PPUSH
23238: CALL_OW 115
23242: GO 23305
23244: LD_INT 2
23246: DOUBLE
23247: EQUAL
23248: IFTRUE 23252
23250: GO 23274
23252: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23253: LD_VAR 0 1
23257: PPUSH
23258: LD_VAR 0 6
23262: PPUSH
23263: LD_VAR 0 7
23267: PPUSH
23268: CALL_OW 153
23272: GO 23305
23274: LD_INT 3
23276: DOUBLE
23277: EQUAL
23278: IFTRUE 23282
23280: GO 23304
23282: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23283: LD_VAR 0 1
23287: PPUSH
23288: LD_VAR 0 6
23292: PPUSH
23293: LD_VAR 0 7
23297: PPUSH
23298: CALL_OW 154
23302: GO 23305
23304: POP
// end ;
23305: LD_VAR 0 2
23309: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23310: LD_INT 0
23312: PPUSH
23313: PPUSH
23314: PPUSH
23315: PPUSH
23316: PPUSH
23317: PPUSH
// if not unit or not building then
23318: LD_VAR 0 1
23322: NOT
23323: PUSH
23324: LD_VAR 0 2
23328: NOT
23329: OR
23330: IFFALSE 23334
// exit ;
23332: GO 23492
// x := GetX ( building ) ;
23334: LD_ADDR_VAR 0 5
23338: PUSH
23339: LD_VAR 0 2
23343: PPUSH
23344: CALL_OW 250
23348: ST_TO_ADDR
// y := GetY ( building ) ;
23349: LD_ADDR_VAR 0 6
23353: PUSH
23354: LD_VAR 0 2
23358: PPUSH
23359: CALL_OW 251
23363: ST_TO_ADDR
// for i = 0 to 5 do
23364: LD_ADDR_VAR 0 4
23368: PUSH
23369: DOUBLE
23370: LD_INT 0
23372: DEC
23373: ST_TO_ADDR
23374: LD_INT 5
23376: PUSH
23377: FOR_TO
23378: IFFALSE 23490
// begin _x := ShiftX ( x , i , 3 ) ;
23380: LD_ADDR_VAR 0 7
23384: PUSH
23385: LD_VAR 0 5
23389: PPUSH
23390: LD_VAR 0 4
23394: PPUSH
23395: LD_INT 3
23397: PPUSH
23398: CALL_OW 272
23402: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23403: LD_ADDR_VAR 0 8
23407: PUSH
23408: LD_VAR 0 6
23412: PPUSH
23413: LD_VAR 0 4
23417: PPUSH
23418: LD_INT 3
23420: PPUSH
23421: CALL_OW 273
23425: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23426: LD_VAR 0 7
23430: PPUSH
23431: LD_VAR 0 8
23435: PPUSH
23436: CALL_OW 488
23440: NOT
23441: IFFALSE 23445
// continue ;
23443: GO 23377
// if HexInfo ( _x , _y ) = 0 then
23445: LD_VAR 0 7
23449: PPUSH
23450: LD_VAR 0 8
23454: PPUSH
23455: CALL_OW 428
23459: PUSH
23460: LD_INT 0
23462: EQUAL
23463: IFFALSE 23488
// begin ComMoveXY ( unit , _x , _y ) ;
23465: LD_VAR 0 1
23469: PPUSH
23470: LD_VAR 0 7
23474: PPUSH
23475: LD_VAR 0 8
23479: PPUSH
23480: CALL_OW 111
// exit ;
23484: POP
23485: POP
23486: GO 23492
// end ; end ;
23488: GO 23377
23490: POP
23491: POP
// end ;
23492: LD_VAR 0 3
23496: RET
// export function ScanBase ( side , base_area ) ; begin
23497: LD_INT 0
23499: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23500: LD_ADDR_VAR 0 3
23504: PUSH
23505: LD_VAR 0 2
23509: PPUSH
23510: LD_INT 81
23512: PUSH
23513: LD_VAR 0 1
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PPUSH
23522: CALL_OW 70
23526: ST_TO_ADDR
// end ;
23527: LD_VAR 0 3
23531: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23532: LD_INT 0
23534: PPUSH
23535: PPUSH
23536: PPUSH
23537: PPUSH
// result := false ;
23538: LD_ADDR_VAR 0 2
23542: PUSH
23543: LD_INT 0
23545: ST_TO_ADDR
// side := GetSide ( unit ) ;
23546: LD_ADDR_VAR 0 3
23550: PUSH
23551: LD_VAR 0 1
23555: PPUSH
23556: CALL_OW 255
23560: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23561: LD_ADDR_VAR 0 4
23565: PUSH
23566: LD_VAR 0 1
23570: PPUSH
23571: CALL_OW 248
23575: ST_TO_ADDR
// case nat of 1 :
23576: LD_VAR 0 4
23580: PUSH
23581: LD_INT 1
23583: DOUBLE
23584: EQUAL
23585: IFTRUE 23589
23587: GO 23600
23589: POP
// tech := tech_lassight ; 2 :
23590: LD_ADDR_VAR 0 5
23594: PUSH
23595: LD_INT 12
23597: ST_TO_ADDR
23598: GO 23639
23600: LD_INT 2
23602: DOUBLE
23603: EQUAL
23604: IFTRUE 23608
23606: GO 23619
23608: POP
// tech := tech_mortar ; 3 :
23609: LD_ADDR_VAR 0 5
23613: PUSH
23614: LD_INT 41
23616: ST_TO_ADDR
23617: GO 23639
23619: LD_INT 3
23621: DOUBLE
23622: EQUAL
23623: IFTRUE 23627
23625: GO 23638
23627: POP
// tech := tech_bazooka ; end ;
23628: LD_ADDR_VAR 0 5
23632: PUSH
23633: LD_INT 44
23635: ST_TO_ADDR
23636: GO 23639
23638: POP
// if Researched ( side , tech ) then
23639: LD_VAR 0 3
23643: PPUSH
23644: LD_VAR 0 5
23648: PPUSH
23649: CALL_OW 325
23653: IFFALSE 23680
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23655: LD_ADDR_VAR 0 2
23659: PUSH
23660: LD_INT 5
23662: PUSH
23663: LD_INT 8
23665: PUSH
23666: LD_INT 9
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: LIST
23673: PUSH
23674: LD_VAR 0 4
23678: ARRAY
23679: ST_TO_ADDR
// end ;
23680: LD_VAR 0 2
23684: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23685: LD_INT 0
23687: PPUSH
23688: PPUSH
23689: PPUSH
// if not mines then
23690: LD_VAR 0 2
23694: NOT
23695: IFFALSE 23699
// exit ;
23697: GO 23843
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23699: LD_ADDR_VAR 0 5
23703: PUSH
23704: LD_INT 81
23706: PUSH
23707: LD_VAR 0 1
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 3
23718: PUSH
23719: LD_INT 21
23721: PUSH
23722: LD_INT 3
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PPUSH
23737: CALL_OW 69
23741: ST_TO_ADDR
// for i in mines do
23742: LD_ADDR_VAR 0 4
23746: PUSH
23747: LD_VAR 0 2
23751: PUSH
23752: FOR_IN
23753: IFFALSE 23841
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23755: LD_VAR 0 4
23759: PUSH
23760: LD_INT 1
23762: ARRAY
23763: PPUSH
23764: LD_VAR 0 4
23768: PUSH
23769: LD_INT 2
23771: ARRAY
23772: PPUSH
23773: CALL_OW 458
23777: NOT
23778: IFFALSE 23782
// continue ;
23780: GO 23752
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23782: LD_VAR 0 4
23786: PUSH
23787: LD_INT 1
23789: ARRAY
23790: PPUSH
23791: LD_VAR 0 4
23795: PUSH
23796: LD_INT 2
23798: ARRAY
23799: PPUSH
23800: CALL_OW 428
23804: PUSH
23805: LD_VAR 0 5
23809: IN
23810: IFFALSE 23839
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23812: LD_VAR 0 4
23816: PUSH
23817: LD_INT 1
23819: ARRAY
23820: PPUSH
23821: LD_VAR 0 4
23825: PUSH
23826: LD_INT 2
23828: ARRAY
23829: PPUSH
23830: LD_VAR 0 1
23834: PPUSH
23835: CALL_OW 456
// end ;
23839: GO 23752
23841: POP
23842: POP
// end ;
23843: LD_VAR 0 3
23847: RET
// export function Count ( array ) ; var i ; begin
23848: LD_INT 0
23850: PPUSH
23851: PPUSH
// result := 0 ;
23852: LD_ADDR_VAR 0 2
23856: PUSH
23857: LD_INT 0
23859: ST_TO_ADDR
// for i in array do
23860: LD_ADDR_VAR 0 3
23864: PUSH
23865: LD_VAR 0 1
23869: PUSH
23870: FOR_IN
23871: IFFALSE 23895
// if i then
23873: LD_VAR 0 3
23877: IFFALSE 23893
// result := result + 1 ;
23879: LD_ADDR_VAR 0 2
23883: PUSH
23884: LD_VAR 0 2
23888: PUSH
23889: LD_INT 1
23891: PLUS
23892: ST_TO_ADDR
23893: GO 23870
23895: POP
23896: POP
// end ;
23897: LD_VAR 0 2
23901: RET
// export function IsEmpty ( building ) ; begin
23902: LD_INT 0
23904: PPUSH
// if not building then
23905: LD_VAR 0 1
23909: NOT
23910: IFFALSE 23914
// exit ;
23912: GO 23957
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23914: LD_ADDR_VAR 0 2
23918: PUSH
23919: LD_VAR 0 1
23923: PUSH
23924: LD_INT 22
23926: PUSH
23927: LD_VAR 0 1
23931: PPUSH
23932: CALL_OW 255
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 58
23943: PUSH
23944: EMPTY
23945: LIST
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PPUSH
23951: CALL_OW 69
23955: IN
23956: ST_TO_ADDR
// end ;
23957: LD_VAR 0 2
23961: RET
// export function IsNotFull ( building ) ; begin
23962: LD_INT 0
23964: PPUSH
// if not building then
23965: LD_VAR 0 1
23969: NOT
23970: IFFALSE 23974
// exit ;
23972: GO 23993
// result := UnitsInside ( building ) < 6 ;
23974: LD_ADDR_VAR 0 2
23978: PUSH
23979: LD_VAR 0 1
23983: PPUSH
23984: CALL_OW 313
23988: PUSH
23989: LD_INT 6
23991: LESS
23992: ST_TO_ADDR
// end ;
23993: LD_VAR 0 2
23997: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23998: LD_INT 0
24000: PPUSH
24001: PPUSH
24002: PPUSH
24003: PPUSH
// tmp := [ ] ;
24004: LD_ADDR_VAR 0 3
24008: PUSH
24009: EMPTY
24010: ST_TO_ADDR
// list := [ ] ;
24011: LD_ADDR_VAR 0 5
24015: PUSH
24016: EMPTY
24017: ST_TO_ADDR
// for i = 16 to 25 do
24018: LD_ADDR_VAR 0 4
24022: PUSH
24023: DOUBLE
24024: LD_INT 16
24026: DEC
24027: ST_TO_ADDR
24028: LD_INT 25
24030: PUSH
24031: FOR_TO
24032: IFFALSE 24105
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24034: LD_ADDR_VAR 0 3
24038: PUSH
24039: LD_VAR 0 3
24043: PUSH
24044: LD_INT 22
24046: PUSH
24047: LD_VAR 0 1
24051: PPUSH
24052: CALL_OW 255
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 91
24063: PUSH
24064: LD_VAR 0 1
24068: PUSH
24069: LD_INT 6
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 30
24079: PUSH
24080: LD_VAR 0 4
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: LIST
24093: PUSH
24094: EMPTY
24095: LIST
24096: PPUSH
24097: CALL_OW 69
24101: ADD
24102: ST_TO_ADDR
24103: GO 24031
24105: POP
24106: POP
// for i = 1 to tmp do
24107: LD_ADDR_VAR 0 4
24111: PUSH
24112: DOUBLE
24113: LD_INT 1
24115: DEC
24116: ST_TO_ADDR
24117: LD_VAR 0 3
24121: PUSH
24122: FOR_TO
24123: IFFALSE 24211
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24125: LD_ADDR_VAR 0 5
24129: PUSH
24130: LD_VAR 0 5
24134: PUSH
24135: LD_VAR 0 3
24139: PUSH
24140: LD_VAR 0 4
24144: ARRAY
24145: PPUSH
24146: CALL_OW 266
24150: PUSH
24151: LD_VAR 0 3
24155: PUSH
24156: LD_VAR 0 4
24160: ARRAY
24161: PPUSH
24162: CALL_OW 250
24166: PUSH
24167: LD_VAR 0 3
24171: PUSH
24172: LD_VAR 0 4
24176: ARRAY
24177: PPUSH
24178: CALL_OW 251
24182: PUSH
24183: LD_VAR 0 3
24187: PUSH
24188: LD_VAR 0 4
24192: ARRAY
24193: PPUSH
24194: CALL_OW 254
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: PUSH
24205: EMPTY
24206: LIST
24207: ADD
24208: ST_TO_ADDR
24209: GO 24122
24211: POP
24212: POP
// result := list ;
24213: LD_ADDR_VAR 0 2
24217: PUSH
24218: LD_VAR 0 5
24222: ST_TO_ADDR
// end ;
24223: LD_VAR 0 2
24227: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24228: LD_INT 0
24230: PPUSH
24231: PPUSH
24232: PPUSH
24233: PPUSH
24234: PPUSH
24235: PPUSH
24236: PPUSH
// if not factory then
24237: LD_VAR 0 1
24241: NOT
24242: IFFALSE 24246
// exit ;
24244: GO 24839
// if control = control_apeman then
24246: LD_VAR 0 4
24250: PUSH
24251: LD_INT 5
24253: EQUAL
24254: IFFALSE 24363
// begin tmp := UnitsInside ( factory ) ;
24256: LD_ADDR_VAR 0 8
24260: PUSH
24261: LD_VAR 0 1
24265: PPUSH
24266: CALL_OW 313
24270: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24271: LD_VAR 0 8
24275: PPUSH
24276: LD_INT 25
24278: PUSH
24279: LD_INT 12
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PPUSH
24286: CALL_OW 72
24290: NOT
24291: IFFALSE 24301
// control := control_manual ;
24293: LD_ADDR_VAR 0 4
24297: PUSH
24298: LD_INT 1
24300: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24301: LD_ADDR_VAR 0 8
24305: PUSH
24306: LD_VAR 0 1
24310: PPUSH
24311: CALL 23998 0 1
24315: ST_TO_ADDR
// if tmp then
24316: LD_VAR 0 8
24320: IFFALSE 24363
// begin for i in tmp do
24322: LD_ADDR_VAR 0 7
24326: PUSH
24327: LD_VAR 0 8
24331: PUSH
24332: FOR_IN
24333: IFFALSE 24361
// if i [ 1 ] = b_ext_radio then
24335: LD_VAR 0 7
24339: PUSH
24340: LD_INT 1
24342: ARRAY
24343: PUSH
24344: LD_INT 22
24346: EQUAL
24347: IFFALSE 24359
// begin control := control_remote ;
24349: LD_ADDR_VAR 0 4
24353: PUSH
24354: LD_INT 2
24356: ST_TO_ADDR
// break ;
24357: GO 24361
// end ;
24359: GO 24332
24361: POP
24362: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24363: LD_VAR 0 1
24367: PPUSH
24368: LD_VAR 0 2
24372: PPUSH
24373: LD_VAR 0 3
24377: PPUSH
24378: LD_VAR 0 4
24382: PPUSH
24383: LD_VAR 0 5
24387: PPUSH
24388: CALL_OW 448
24392: IFFALSE 24427
// begin result := [ chassis , engine , control , weapon ] ;
24394: LD_ADDR_VAR 0 6
24398: PUSH
24399: LD_VAR 0 2
24403: PUSH
24404: LD_VAR 0 3
24408: PUSH
24409: LD_VAR 0 4
24413: PUSH
24414: LD_VAR 0 5
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: ST_TO_ADDR
// exit ;
24425: GO 24839
// end ; _chassis := AvailableChassisList ( factory ) ;
24427: LD_ADDR_VAR 0 9
24431: PUSH
24432: LD_VAR 0 1
24436: PPUSH
24437: CALL_OW 475
24441: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24442: LD_ADDR_VAR 0 11
24446: PUSH
24447: LD_VAR 0 1
24451: PPUSH
24452: CALL_OW 476
24456: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24457: LD_ADDR_VAR 0 12
24461: PUSH
24462: LD_VAR 0 1
24466: PPUSH
24467: CALL_OW 477
24471: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24472: LD_ADDR_VAR 0 10
24476: PUSH
24477: LD_VAR 0 1
24481: PPUSH
24482: CALL_OW 478
24486: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24487: LD_VAR 0 9
24491: NOT
24492: PUSH
24493: LD_VAR 0 11
24497: NOT
24498: OR
24499: PUSH
24500: LD_VAR 0 12
24504: NOT
24505: OR
24506: PUSH
24507: LD_VAR 0 10
24511: NOT
24512: OR
24513: IFFALSE 24548
// begin result := [ chassis , engine , control , weapon ] ;
24515: LD_ADDR_VAR 0 6
24519: PUSH
24520: LD_VAR 0 2
24524: PUSH
24525: LD_VAR 0 3
24529: PUSH
24530: LD_VAR 0 4
24534: PUSH
24535: LD_VAR 0 5
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: ST_TO_ADDR
// exit ;
24546: GO 24839
// end ; if not chassis in _chassis then
24548: LD_VAR 0 2
24552: PUSH
24553: LD_VAR 0 9
24557: IN
24558: NOT
24559: IFFALSE 24585
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24561: LD_ADDR_VAR 0 2
24565: PUSH
24566: LD_VAR 0 9
24570: PUSH
24571: LD_INT 1
24573: PPUSH
24574: LD_VAR 0 9
24578: PPUSH
24579: CALL_OW 12
24583: ARRAY
24584: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24585: LD_VAR 0 2
24589: PPUSH
24590: LD_VAR 0 3
24594: PPUSH
24595: CALL 24844 0 2
24599: NOT
24600: IFFALSE 24659
// repeat engine := _engine [ 1 ] ;
24602: LD_ADDR_VAR 0 3
24606: PUSH
24607: LD_VAR 0 11
24611: PUSH
24612: LD_INT 1
24614: ARRAY
24615: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24616: LD_ADDR_VAR 0 11
24620: PUSH
24621: LD_VAR 0 11
24625: PPUSH
24626: LD_INT 1
24628: PPUSH
24629: CALL_OW 3
24633: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24634: LD_VAR 0 2
24638: PPUSH
24639: LD_VAR 0 3
24643: PPUSH
24644: CALL 24844 0 2
24648: PUSH
24649: LD_VAR 0 11
24653: PUSH
24654: EMPTY
24655: EQUAL
24656: OR
24657: IFFALSE 24602
// if not control in _control then
24659: LD_VAR 0 4
24663: PUSH
24664: LD_VAR 0 12
24668: IN
24669: NOT
24670: IFFALSE 24696
// control := _control [ rand ( 1 , _control ) ] ;
24672: LD_ADDR_VAR 0 4
24676: PUSH
24677: LD_VAR 0 12
24681: PUSH
24682: LD_INT 1
24684: PPUSH
24685: LD_VAR 0 12
24689: PPUSH
24690: CALL_OW 12
24694: ARRAY
24695: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24696: LD_VAR 0 2
24700: PPUSH
24701: LD_VAR 0 5
24705: PPUSH
24706: CALL 25064 0 2
24710: NOT
24711: IFFALSE 24770
// repeat weapon := _weapon [ 1 ] ;
24713: LD_ADDR_VAR 0 5
24717: PUSH
24718: LD_VAR 0 10
24722: PUSH
24723: LD_INT 1
24725: ARRAY
24726: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24727: LD_ADDR_VAR 0 10
24731: PUSH
24732: LD_VAR 0 10
24736: PPUSH
24737: LD_INT 1
24739: PPUSH
24740: CALL_OW 3
24744: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24745: LD_VAR 0 2
24749: PPUSH
24750: LD_VAR 0 5
24754: PPUSH
24755: CALL 25064 0 2
24759: PUSH
24760: LD_VAR 0 10
24764: PUSH
24765: EMPTY
24766: EQUAL
24767: OR
24768: IFFALSE 24713
// result := [ ] ;
24770: LD_ADDR_VAR 0 6
24774: PUSH
24775: EMPTY
24776: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24777: LD_VAR 0 1
24781: PPUSH
24782: LD_VAR 0 2
24786: PPUSH
24787: LD_VAR 0 3
24791: PPUSH
24792: LD_VAR 0 4
24796: PPUSH
24797: LD_VAR 0 5
24801: PPUSH
24802: CALL_OW 448
24806: IFFALSE 24839
// result := [ chassis , engine , control , weapon ] ;
24808: LD_ADDR_VAR 0 6
24812: PUSH
24813: LD_VAR 0 2
24817: PUSH
24818: LD_VAR 0 3
24822: PUSH
24823: LD_VAR 0 4
24827: PUSH
24828: LD_VAR 0 5
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: ST_TO_ADDR
// end ;
24839: LD_VAR 0 6
24843: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24844: LD_INT 0
24846: PPUSH
// if not chassis or not engine then
24847: LD_VAR 0 1
24851: NOT
24852: PUSH
24853: LD_VAR 0 2
24857: NOT
24858: OR
24859: IFFALSE 24863
// exit ;
24861: GO 25059
// case engine of engine_solar :
24863: LD_VAR 0 2
24867: PUSH
24868: LD_INT 2
24870: DOUBLE
24871: EQUAL
24872: IFTRUE 24876
24874: GO 24914
24876: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24877: LD_ADDR_VAR 0 3
24881: PUSH
24882: LD_INT 11
24884: PUSH
24885: LD_INT 12
24887: PUSH
24888: LD_INT 13
24890: PUSH
24891: LD_INT 14
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: LD_INT 2
24899: PUSH
24900: LD_INT 3
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: ST_TO_ADDR
24912: GO 25043
24914: LD_INT 1
24916: DOUBLE
24917: EQUAL
24918: IFTRUE 24922
24920: GO 24984
24922: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24923: LD_ADDR_VAR 0 3
24927: PUSH
24928: LD_INT 11
24930: PUSH
24931: LD_INT 12
24933: PUSH
24934: LD_INT 13
24936: PUSH
24937: LD_INT 14
24939: PUSH
24940: LD_INT 1
24942: PUSH
24943: LD_INT 2
24945: PUSH
24946: LD_INT 3
24948: PUSH
24949: LD_INT 4
24951: PUSH
24952: LD_INT 5
24954: PUSH
24955: LD_INT 21
24957: PUSH
24958: LD_INT 23
24960: PUSH
24961: LD_INT 22
24963: PUSH
24964: LD_INT 24
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: ST_TO_ADDR
24982: GO 25043
24984: LD_INT 3
24986: DOUBLE
24987: EQUAL
24988: IFTRUE 24992
24990: GO 25042
24992: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24993: LD_ADDR_VAR 0 3
24997: PUSH
24998: LD_INT 13
25000: PUSH
25001: LD_INT 14
25003: PUSH
25004: LD_INT 2
25006: PUSH
25007: LD_INT 3
25009: PUSH
25010: LD_INT 4
25012: PUSH
25013: LD_INT 5
25015: PUSH
25016: LD_INT 21
25018: PUSH
25019: LD_INT 22
25021: PUSH
25022: LD_INT 23
25024: PUSH
25025: LD_INT 24
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: ST_TO_ADDR
25040: GO 25043
25042: POP
// result := ( chassis in result ) ;
25043: LD_ADDR_VAR 0 3
25047: PUSH
25048: LD_VAR 0 1
25052: PUSH
25053: LD_VAR 0 3
25057: IN
25058: ST_TO_ADDR
// end ;
25059: LD_VAR 0 3
25063: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25064: LD_INT 0
25066: PPUSH
// if not chassis or not weapon then
25067: LD_VAR 0 1
25071: NOT
25072: PUSH
25073: LD_VAR 0 2
25077: NOT
25078: OR
25079: IFFALSE 25083
// exit ;
25081: GO 26109
// case weapon of us_machine_gun :
25083: LD_VAR 0 2
25087: PUSH
25088: LD_INT 2
25090: DOUBLE
25091: EQUAL
25092: IFTRUE 25096
25094: GO 25126
25096: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25097: LD_ADDR_VAR 0 3
25101: PUSH
25102: LD_INT 1
25104: PUSH
25105: LD_INT 2
25107: PUSH
25108: LD_INT 3
25110: PUSH
25111: LD_INT 4
25113: PUSH
25114: LD_INT 5
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: ST_TO_ADDR
25124: GO 26093
25126: LD_INT 3
25128: DOUBLE
25129: EQUAL
25130: IFTRUE 25134
25132: GO 25164
25134: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25135: LD_ADDR_VAR 0 3
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: LD_INT 2
25145: PUSH
25146: LD_INT 3
25148: PUSH
25149: LD_INT 4
25151: PUSH
25152: LD_INT 5
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: ST_TO_ADDR
25162: GO 26093
25164: LD_INT 11
25166: DOUBLE
25167: EQUAL
25168: IFTRUE 25172
25170: GO 25202
25172: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25173: LD_ADDR_VAR 0 3
25177: PUSH
25178: LD_INT 1
25180: PUSH
25181: LD_INT 2
25183: PUSH
25184: LD_INT 3
25186: PUSH
25187: LD_INT 4
25189: PUSH
25190: LD_INT 5
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: ST_TO_ADDR
25200: GO 26093
25202: LD_INT 4
25204: DOUBLE
25205: EQUAL
25206: IFTRUE 25210
25208: GO 25236
25210: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25211: LD_ADDR_VAR 0 3
25215: PUSH
25216: LD_INT 2
25218: PUSH
25219: LD_INT 3
25221: PUSH
25222: LD_INT 4
25224: PUSH
25225: LD_INT 5
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: ST_TO_ADDR
25234: GO 26093
25236: LD_INT 5
25238: DOUBLE
25239: EQUAL
25240: IFTRUE 25244
25242: GO 25270
25244: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25245: LD_ADDR_VAR 0 3
25249: PUSH
25250: LD_INT 2
25252: PUSH
25253: LD_INT 3
25255: PUSH
25256: LD_INT 4
25258: PUSH
25259: LD_INT 5
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: ST_TO_ADDR
25268: GO 26093
25270: LD_INT 9
25272: DOUBLE
25273: EQUAL
25274: IFTRUE 25278
25276: GO 25304
25278: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25279: LD_ADDR_VAR 0 3
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: LD_INT 3
25289: PUSH
25290: LD_INT 4
25292: PUSH
25293: LD_INT 5
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: ST_TO_ADDR
25302: GO 26093
25304: LD_INT 7
25306: DOUBLE
25307: EQUAL
25308: IFTRUE 25312
25310: GO 25338
25312: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25313: LD_ADDR_VAR 0 3
25317: PUSH
25318: LD_INT 2
25320: PUSH
25321: LD_INT 3
25323: PUSH
25324: LD_INT 4
25326: PUSH
25327: LD_INT 5
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: ST_TO_ADDR
25336: GO 26093
25338: LD_INT 12
25340: DOUBLE
25341: EQUAL
25342: IFTRUE 25346
25344: GO 25372
25346: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25347: LD_ADDR_VAR 0 3
25351: PUSH
25352: LD_INT 2
25354: PUSH
25355: LD_INT 3
25357: PUSH
25358: LD_INT 4
25360: PUSH
25361: LD_INT 5
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: ST_TO_ADDR
25370: GO 26093
25372: LD_INT 13
25374: DOUBLE
25375: EQUAL
25376: IFTRUE 25380
25378: GO 25406
25380: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25381: LD_ADDR_VAR 0 3
25385: PUSH
25386: LD_INT 2
25388: PUSH
25389: LD_INT 3
25391: PUSH
25392: LD_INT 4
25394: PUSH
25395: LD_INT 5
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: ST_TO_ADDR
25404: GO 26093
25406: LD_INT 14
25408: DOUBLE
25409: EQUAL
25410: IFTRUE 25414
25412: GO 25432
25414: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25415: LD_ADDR_VAR 0 3
25419: PUSH
25420: LD_INT 4
25422: PUSH
25423: LD_INT 5
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: ST_TO_ADDR
25430: GO 26093
25432: LD_INT 6
25434: DOUBLE
25435: EQUAL
25436: IFTRUE 25440
25438: GO 25458
25440: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25441: LD_ADDR_VAR 0 3
25445: PUSH
25446: LD_INT 4
25448: PUSH
25449: LD_INT 5
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: ST_TO_ADDR
25456: GO 26093
25458: LD_INT 10
25460: DOUBLE
25461: EQUAL
25462: IFTRUE 25466
25464: GO 25484
25466: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25467: LD_ADDR_VAR 0 3
25471: PUSH
25472: LD_INT 4
25474: PUSH
25475: LD_INT 5
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: ST_TO_ADDR
25482: GO 26093
25484: LD_INT 22
25486: DOUBLE
25487: EQUAL
25488: IFTRUE 25492
25490: GO 25518
25492: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25493: LD_ADDR_VAR 0 3
25497: PUSH
25498: LD_INT 11
25500: PUSH
25501: LD_INT 12
25503: PUSH
25504: LD_INT 13
25506: PUSH
25507: LD_INT 14
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: ST_TO_ADDR
25516: GO 26093
25518: LD_INT 23
25520: DOUBLE
25521: EQUAL
25522: IFTRUE 25526
25524: GO 25552
25526: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25527: LD_ADDR_VAR 0 3
25531: PUSH
25532: LD_INT 11
25534: PUSH
25535: LD_INT 12
25537: PUSH
25538: LD_INT 13
25540: PUSH
25541: LD_INT 14
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: ST_TO_ADDR
25550: GO 26093
25552: LD_INT 24
25554: DOUBLE
25555: EQUAL
25556: IFTRUE 25560
25558: GO 25586
25560: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25561: LD_ADDR_VAR 0 3
25565: PUSH
25566: LD_INT 11
25568: PUSH
25569: LD_INT 12
25571: PUSH
25572: LD_INT 13
25574: PUSH
25575: LD_INT 14
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: ST_TO_ADDR
25584: GO 26093
25586: LD_INT 30
25588: DOUBLE
25589: EQUAL
25590: IFTRUE 25594
25592: GO 25620
25594: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25595: LD_ADDR_VAR 0 3
25599: PUSH
25600: LD_INT 11
25602: PUSH
25603: LD_INT 12
25605: PUSH
25606: LD_INT 13
25608: PUSH
25609: LD_INT 14
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: ST_TO_ADDR
25618: GO 26093
25620: LD_INT 25
25622: DOUBLE
25623: EQUAL
25624: IFTRUE 25628
25626: GO 25646
25628: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25629: LD_ADDR_VAR 0 3
25633: PUSH
25634: LD_INT 13
25636: PUSH
25637: LD_INT 14
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: ST_TO_ADDR
25644: GO 26093
25646: LD_INT 27
25648: DOUBLE
25649: EQUAL
25650: IFTRUE 25654
25652: GO 25672
25654: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25655: LD_ADDR_VAR 0 3
25659: PUSH
25660: LD_INT 13
25662: PUSH
25663: LD_INT 14
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: ST_TO_ADDR
25670: GO 26093
25672: LD_INT 28
25674: DOUBLE
25675: EQUAL
25676: IFTRUE 25680
25678: GO 25698
25680: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25681: LD_ADDR_VAR 0 3
25685: PUSH
25686: LD_INT 13
25688: PUSH
25689: LD_INT 14
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: ST_TO_ADDR
25696: GO 26093
25698: LD_INT 29
25700: DOUBLE
25701: EQUAL
25702: IFTRUE 25706
25704: GO 25724
25706: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25707: LD_ADDR_VAR 0 3
25711: PUSH
25712: LD_INT 13
25714: PUSH
25715: LD_INT 14
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: ST_TO_ADDR
25722: GO 26093
25724: LD_INT 31
25726: DOUBLE
25727: EQUAL
25728: IFTRUE 25732
25730: GO 25750
25732: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25733: LD_ADDR_VAR 0 3
25737: PUSH
25738: LD_INT 13
25740: PUSH
25741: LD_INT 14
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: ST_TO_ADDR
25748: GO 26093
25750: LD_INT 26
25752: DOUBLE
25753: EQUAL
25754: IFTRUE 25758
25756: GO 25776
25758: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25759: LD_ADDR_VAR 0 3
25763: PUSH
25764: LD_INT 13
25766: PUSH
25767: LD_INT 14
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: ST_TO_ADDR
25774: GO 26093
25776: LD_INT 42
25778: DOUBLE
25779: EQUAL
25780: IFTRUE 25784
25782: GO 25810
25784: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25785: LD_ADDR_VAR 0 3
25789: PUSH
25790: LD_INT 21
25792: PUSH
25793: LD_INT 22
25795: PUSH
25796: LD_INT 23
25798: PUSH
25799: LD_INT 24
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: ST_TO_ADDR
25808: GO 26093
25810: LD_INT 43
25812: DOUBLE
25813: EQUAL
25814: IFTRUE 25818
25816: GO 25844
25818: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25819: LD_ADDR_VAR 0 3
25823: PUSH
25824: LD_INT 21
25826: PUSH
25827: LD_INT 22
25829: PUSH
25830: LD_INT 23
25832: PUSH
25833: LD_INT 24
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: ST_TO_ADDR
25842: GO 26093
25844: LD_INT 44
25846: DOUBLE
25847: EQUAL
25848: IFTRUE 25852
25850: GO 25878
25852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25853: LD_ADDR_VAR 0 3
25857: PUSH
25858: LD_INT 21
25860: PUSH
25861: LD_INT 22
25863: PUSH
25864: LD_INT 23
25866: PUSH
25867: LD_INT 24
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: ST_TO_ADDR
25876: GO 26093
25878: LD_INT 45
25880: DOUBLE
25881: EQUAL
25882: IFTRUE 25886
25884: GO 25912
25886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25887: LD_ADDR_VAR 0 3
25891: PUSH
25892: LD_INT 21
25894: PUSH
25895: LD_INT 22
25897: PUSH
25898: LD_INT 23
25900: PUSH
25901: LD_INT 24
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: ST_TO_ADDR
25910: GO 26093
25912: LD_INT 49
25914: DOUBLE
25915: EQUAL
25916: IFTRUE 25920
25918: GO 25946
25920: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25921: LD_ADDR_VAR 0 3
25925: PUSH
25926: LD_INT 21
25928: PUSH
25929: LD_INT 22
25931: PUSH
25932: LD_INT 23
25934: PUSH
25935: LD_INT 24
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: ST_TO_ADDR
25944: GO 26093
25946: LD_INT 51
25948: DOUBLE
25949: EQUAL
25950: IFTRUE 25954
25952: GO 25980
25954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25955: LD_ADDR_VAR 0 3
25959: PUSH
25960: LD_INT 21
25962: PUSH
25963: LD_INT 22
25965: PUSH
25966: LD_INT 23
25968: PUSH
25969: LD_INT 24
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: ST_TO_ADDR
25978: GO 26093
25980: LD_INT 52
25982: DOUBLE
25983: EQUAL
25984: IFTRUE 25988
25986: GO 26014
25988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25989: LD_ADDR_VAR 0 3
25993: PUSH
25994: LD_INT 21
25996: PUSH
25997: LD_INT 22
25999: PUSH
26000: LD_INT 23
26002: PUSH
26003: LD_INT 24
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: ST_TO_ADDR
26012: GO 26093
26014: LD_INT 53
26016: DOUBLE
26017: EQUAL
26018: IFTRUE 26022
26020: GO 26040
26022: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26023: LD_ADDR_VAR 0 3
26027: PUSH
26028: LD_INT 23
26030: PUSH
26031: LD_INT 24
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: ST_TO_ADDR
26038: GO 26093
26040: LD_INT 46
26042: DOUBLE
26043: EQUAL
26044: IFTRUE 26048
26046: GO 26066
26048: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26049: LD_ADDR_VAR 0 3
26053: PUSH
26054: LD_INT 23
26056: PUSH
26057: LD_INT 24
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: ST_TO_ADDR
26064: GO 26093
26066: LD_INT 47
26068: DOUBLE
26069: EQUAL
26070: IFTRUE 26074
26072: GO 26092
26074: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26075: LD_ADDR_VAR 0 3
26079: PUSH
26080: LD_INT 23
26082: PUSH
26083: LD_INT 24
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: ST_TO_ADDR
26090: GO 26093
26092: POP
// result := ( chassis in result ) ;
26093: LD_ADDR_VAR 0 3
26097: PUSH
26098: LD_VAR 0 1
26102: PUSH
26103: LD_VAR 0 3
26107: IN
26108: ST_TO_ADDR
// end ;
26109: LD_VAR 0 3
26113: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26114: LD_INT 0
26116: PPUSH
26117: PPUSH
26118: PPUSH
26119: PPUSH
26120: PPUSH
26121: PPUSH
26122: PPUSH
// result := array ;
26123: LD_ADDR_VAR 0 5
26127: PUSH
26128: LD_VAR 0 1
26132: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26133: LD_VAR 0 1
26137: NOT
26138: PUSH
26139: LD_VAR 0 2
26143: NOT
26144: OR
26145: PUSH
26146: LD_VAR 0 3
26150: NOT
26151: OR
26152: PUSH
26153: LD_VAR 0 2
26157: PUSH
26158: LD_VAR 0 1
26162: GREATER
26163: OR
26164: PUSH
26165: LD_VAR 0 3
26169: PUSH
26170: LD_VAR 0 1
26174: GREATER
26175: OR
26176: IFFALSE 26180
// exit ;
26178: GO 26476
// if direction then
26180: LD_VAR 0 4
26184: IFFALSE 26248
// begin d := 1 ;
26186: LD_ADDR_VAR 0 9
26190: PUSH
26191: LD_INT 1
26193: ST_TO_ADDR
// if i_from > i_to then
26194: LD_VAR 0 2
26198: PUSH
26199: LD_VAR 0 3
26203: GREATER
26204: IFFALSE 26230
// length := ( array - i_from ) + i_to else
26206: LD_ADDR_VAR 0 11
26210: PUSH
26211: LD_VAR 0 1
26215: PUSH
26216: LD_VAR 0 2
26220: MINUS
26221: PUSH
26222: LD_VAR 0 3
26226: PLUS
26227: ST_TO_ADDR
26228: GO 26246
// length := i_to - i_from ;
26230: LD_ADDR_VAR 0 11
26234: PUSH
26235: LD_VAR 0 3
26239: PUSH
26240: LD_VAR 0 2
26244: MINUS
26245: ST_TO_ADDR
// end else
26246: GO 26309
// begin d := - 1 ;
26248: LD_ADDR_VAR 0 9
26252: PUSH
26253: LD_INT 1
26255: NEG
26256: ST_TO_ADDR
// if i_from > i_to then
26257: LD_VAR 0 2
26261: PUSH
26262: LD_VAR 0 3
26266: GREATER
26267: IFFALSE 26287
// length := i_from - i_to else
26269: LD_ADDR_VAR 0 11
26273: PUSH
26274: LD_VAR 0 2
26278: PUSH
26279: LD_VAR 0 3
26283: MINUS
26284: ST_TO_ADDR
26285: GO 26309
// length := ( array - i_to ) + i_from ;
26287: LD_ADDR_VAR 0 11
26291: PUSH
26292: LD_VAR 0 1
26296: PUSH
26297: LD_VAR 0 3
26301: MINUS
26302: PUSH
26303: LD_VAR 0 2
26307: PLUS
26308: ST_TO_ADDR
// end ; if not length then
26309: LD_VAR 0 11
26313: NOT
26314: IFFALSE 26318
// exit ;
26316: GO 26476
// tmp := array ;
26318: LD_ADDR_VAR 0 10
26322: PUSH
26323: LD_VAR 0 1
26327: ST_TO_ADDR
// for i = 1 to length do
26328: LD_ADDR_VAR 0 6
26332: PUSH
26333: DOUBLE
26334: LD_INT 1
26336: DEC
26337: ST_TO_ADDR
26338: LD_VAR 0 11
26342: PUSH
26343: FOR_TO
26344: IFFALSE 26464
// begin for j = 1 to array do
26346: LD_ADDR_VAR 0 7
26350: PUSH
26351: DOUBLE
26352: LD_INT 1
26354: DEC
26355: ST_TO_ADDR
26356: LD_VAR 0 1
26360: PUSH
26361: FOR_TO
26362: IFFALSE 26450
// begin k := j + d ;
26364: LD_ADDR_VAR 0 8
26368: PUSH
26369: LD_VAR 0 7
26373: PUSH
26374: LD_VAR 0 9
26378: PLUS
26379: ST_TO_ADDR
// if k > array then
26380: LD_VAR 0 8
26384: PUSH
26385: LD_VAR 0 1
26389: GREATER
26390: IFFALSE 26400
// k := 1 ;
26392: LD_ADDR_VAR 0 8
26396: PUSH
26397: LD_INT 1
26399: ST_TO_ADDR
// if not k then
26400: LD_VAR 0 8
26404: NOT
26405: IFFALSE 26417
// k := array ;
26407: LD_ADDR_VAR 0 8
26411: PUSH
26412: LD_VAR 0 1
26416: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26417: LD_ADDR_VAR 0 10
26421: PUSH
26422: LD_VAR 0 10
26426: PPUSH
26427: LD_VAR 0 8
26431: PPUSH
26432: LD_VAR 0 1
26436: PUSH
26437: LD_VAR 0 7
26441: ARRAY
26442: PPUSH
26443: CALL_OW 1
26447: ST_TO_ADDR
// end ;
26448: GO 26361
26450: POP
26451: POP
// array := tmp ;
26452: LD_ADDR_VAR 0 1
26456: PUSH
26457: LD_VAR 0 10
26461: ST_TO_ADDR
// end ;
26462: GO 26343
26464: POP
26465: POP
// result := array ;
26466: LD_ADDR_VAR 0 5
26470: PUSH
26471: LD_VAR 0 1
26475: ST_TO_ADDR
// end ;
26476: LD_VAR 0 5
26480: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26481: LD_INT 0
26483: PPUSH
26484: PPUSH
// result := 0 ;
26485: LD_ADDR_VAR 0 3
26489: PUSH
26490: LD_INT 0
26492: ST_TO_ADDR
// if not array or not value in array then
26493: LD_VAR 0 1
26497: NOT
26498: PUSH
26499: LD_VAR 0 2
26503: PUSH
26504: LD_VAR 0 1
26508: IN
26509: NOT
26510: OR
26511: IFFALSE 26515
// exit ;
26513: GO 26569
// for i = 1 to array do
26515: LD_ADDR_VAR 0 4
26519: PUSH
26520: DOUBLE
26521: LD_INT 1
26523: DEC
26524: ST_TO_ADDR
26525: LD_VAR 0 1
26529: PUSH
26530: FOR_TO
26531: IFFALSE 26567
// if value = array [ i ] then
26533: LD_VAR 0 2
26537: PUSH
26538: LD_VAR 0 1
26542: PUSH
26543: LD_VAR 0 4
26547: ARRAY
26548: EQUAL
26549: IFFALSE 26565
// begin result := i ;
26551: LD_ADDR_VAR 0 3
26555: PUSH
26556: LD_VAR 0 4
26560: ST_TO_ADDR
// exit ;
26561: POP
26562: POP
26563: GO 26569
// end ;
26565: GO 26530
26567: POP
26568: POP
// end ;
26569: LD_VAR 0 3
26573: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26574: LD_INT 0
26576: PPUSH
// vc_chassis := chassis ;
26577: LD_ADDR_OWVAR 37
26581: PUSH
26582: LD_VAR 0 1
26586: ST_TO_ADDR
// vc_engine := engine ;
26587: LD_ADDR_OWVAR 39
26591: PUSH
26592: LD_VAR 0 2
26596: ST_TO_ADDR
// vc_control := control ;
26597: LD_ADDR_OWVAR 38
26601: PUSH
26602: LD_VAR 0 3
26606: ST_TO_ADDR
// vc_weapon := weapon ;
26607: LD_ADDR_OWVAR 40
26611: PUSH
26612: LD_VAR 0 4
26616: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26617: LD_ADDR_OWVAR 41
26621: PUSH
26622: LD_VAR 0 5
26626: ST_TO_ADDR
// end ;
26627: LD_VAR 0 6
26631: RET
// export function WantPlant ( unit ) ; var task ; begin
26632: LD_INT 0
26634: PPUSH
26635: PPUSH
// result := false ;
26636: LD_ADDR_VAR 0 2
26640: PUSH
26641: LD_INT 0
26643: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26644: LD_ADDR_VAR 0 3
26648: PUSH
26649: LD_VAR 0 1
26653: PPUSH
26654: CALL_OW 437
26658: ST_TO_ADDR
// if task then
26659: LD_VAR 0 3
26663: IFFALSE 26691
// if task [ 1 ] [ 1 ] = p then
26665: LD_VAR 0 3
26669: PUSH
26670: LD_INT 1
26672: ARRAY
26673: PUSH
26674: LD_INT 1
26676: ARRAY
26677: PUSH
26678: LD_STRING p
26680: EQUAL
26681: IFFALSE 26691
// result := true ;
26683: LD_ADDR_VAR 0 2
26687: PUSH
26688: LD_INT 1
26690: ST_TO_ADDR
// end ;
26691: LD_VAR 0 2
26695: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26696: LD_INT 0
26698: PPUSH
26699: PPUSH
26700: PPUSH
26701: PPUSH
// if pos < 1 then
26702: LD_VAR 0 2
26706: PUSH
26707: LD_INT 1
26709: LESS
26710: IFFALSE 26714
// exit ;
26712: GO 27017
// if pos = 1 then
26714: LD_VAR 0 2
26718: PUSH
26719: LD_INT 1
26721: EQUAL
26722: IFFALSE 26755
// result := Replace ( arr , pos [ 1 ] , value ) else
26724: LD_ADDR_VAR 0 4
26728: PUSH
26729: LD_VAR 0 1
26733: PPUSH
26734: LD_VAR 0 2
26738: PUSH
26739: LD_INT 1
26741: ARRAY
26742: PPUSH
26743: LD_VAR 0 3
26747: PPUSH
26748: CALL_OW 1
26752: ST_TO_ADDR
26753: GO 27017
// begin tmp := arr ;
26755: LD_ADDR_VAR 0 6
26759: PUSH
26760: LD_VAR 0 1
26764: ST_TO_ADDR
// s_arr := [ tmp ] ;
26765: LD_ADDR_VAR 0 7
26769: PUSH
26770: LD_VAR 0 6
26774: PUSH
26775: EMPTY
26776: LIST
26777: ST_TO_ADDR
// for i = 1 to pos - 1 do
26778: LD_ADDR_VAR 0 5
26782: PUSH
26783: DOUBLE
26784: LD_INT 1
26786: DEC
26787: ST_TO_ADDR
26788: LD_VAR 0 2
26792: PUSH
26793: LD_INT 1
26795: MINUS
26796: PUSH
26797: FOR_TO
26798: IFFALSE 26843
// begin tmp := tmp [ pos [ i ] ] ;
26800: LD_ADDR_VAR 0 6
26804: PUSH
26805: LD_VAR 0 6
26809: PUSH
26810: LD_VAR 0 2
26814: PUSH
26815: LD_VAR 0 5
26819: ARRAY
26820: ARRAY
26821: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26822: LD_ADDR_VAR 0 7
26826: PUSH
26827: LD_VAR 0 7
26831: PUSH
26832: LD_VAR 0 6
26836: PUSH
26837: EMPTY
26838: LIST
26839: ADD
26840: ST_TO_ADDR
// end ;
26841: GO 26797
26843: POP
26844: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26845: LD_ADDR_VAR 0 6
26849: PUSH
26850: LD_VAR 0 6
26854: PPUSH
26855: LD_VAR 0 2
26859: PUSH
26860: LD_VAR 0 2
26864: ARRAY
26865: PPUSH
26866: LD_VAR 0 3
26870: PPUSH
26871: CALL_OW 1
26875: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26876: LD_ADDR_VAR 0 7
26880: PUSH
26881: LD_VAR 0 7
26885: PPUSH
26886: LD_VAR 0 7
26890: PPUSH
26891: LD_VAR 0 6
26895: PPUSH
26896: CALL_OW 1
26900: ST_TO_ADDR
// for i = s_arr downto 2 do
26901: LD_ADDR_VAR 0 5
26905: PUSH
26906: DOUBLE
26907: LD_VAR 0 7
26911: INC
26912: ST_TO_ADDR
26913: LD_INT 2
26915: PUSH
26916: FOR_DOWNTO
26917: IFFALSE 27001
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26919: LD_ADDR_VAR 0 6
26923: PUSH
26924: LD_VAR 0 7
26928: PUSH
26929: LD_VAR 0 5
26933: PUSH
26934: LD_INT 1
26936: MINUS
26937: ARRAY
26938: PPUSH
26939: LD_VAR 0 2
26943: PUSH
26944: LD_VAR 0 5
26948: PUSH
26949: LD_INT 1
26951: MINUS
26952: ARRAY
26953: PPUSH
26954: LD_VAR 0 7
26958: PUSH
26959: LD_VAR 0 5
26963: ARRAY
26964: PPUSH
26965: CALL_OW 1
26969: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26970: LD_ADDR_VAR 0 7
26974: PUSH
26975: LD_VAR 0 7
26979: PPUSH
26980: LD_VAR 0 5
26984: PUSH
26985: LD_INT 1
26987: MINUS
26988: PPUSH
26989: LD_VAR 0 6
26993: PPUSH
26994: CALL_OW 1
26998: ST_TO_ADDR
// end ;
26999: GO 26916
27001: POP
27002: POP
// result := s_arr [ 1 ] ;
27003: LD_ADDR_VAR 0 4
27007: PUSH
27008: LD_VAR 0 7
27012: PUSH
27013: LD_INT 1
27015: ARRAY
27016: ST_TO_ADDR
// end ; end ;
27017: LD_VAR 0 4
27021: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27022: LD_INT 0
27024: PPUSH
27025: PPUSH
// if not list then
27026: LD_VAR 0 1
27030: NOT
27031: IFFALSE 27035
// exit ;
27033: GO 27126
// i := list [ pos1 ] ;
27035: LD_ADDR_VAR 0 5
27039: PUSH
27040: LD_VAR 0 1
27044: PUSH
27045: LD_VAR 0 2
27049: ARRAY
27050: ST_TO_ADDR
// if not i then
27051: LD_VAR 0 5
27055: NOT
27056: IFFALSE 27060
// exit ;
27058: GO 27126
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27060: LD_ADDR_VAR 0 1
27064: PUSH
27065: LD_VAR 0 1
27069: PPUSH
27070: LD_VAR 0 2
27074: PPUSH
27075: LD_VAR 0 1
27079: PUSH
27080: LD_VAR 0 3
27084: ARRAY
27085: PPUSH
27086: CALL_OW 1
27090: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27091: LD_ADDR_VAR 0 1
27095: PUSH
27096: LD_VAR 0 1
27100: PPUSH
27101: LD_VAR 0 3
27105: PPUSH
27106: LD_VAR 0 5
27110: PPUSH
27111: CALL_OW 1
27115: ST_TO_ADDR
// result := list ;
27116: LD_ADDR_VAR 0 4
27120: PUSH
27121: LD_VAR 0 1
27125: ST_TO_ADDR
// end ;
27126: LD_VAR 0 4
27130: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27131: LD_INT 0
27133: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27134: LD_ADDR_VAR 0 5
27138: PUSH
27139: LD_VAR 0 1
27143: PPUSH
27144: CALL_OW 250
27148: PPUSH
27149: LD_VAR 0 1
27153: PPUSH
27154: CALL_OW 251
27158: PPUSH
27159: LD_VAR 0 2
27163: PPUSH
27164: LD_VAR 0 3
27168: PPUSH
27169: LD_VAR 0 4
27173: PPUSH
27174: CALL 27184 0 5
27178: ST_TO_ADDR
// end ;
27179: LD_VAR 0 5
27183: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27184: LD_INT 0
27186: PPUSH
27187: PPUSH
27188: PPUSH
27189: PPUSH
// if not list then
27190: LD_VAR 0 3
27194: NOT
27195: IFFALSE 27199
// exit ;
27197: GO 27587
// result := [ ] ;
27199: LD_ADDR_VAR 0 6
27203: PUSH
27204: EMPTY
27205: ST_TO_ADDR
// for i in list do
27206: LD_ADDR_VAR 0 7
27210: PUSH
27211: LD_VAR 0 3
27215: PUSH
27216: FOR_IN
27217: IFFALSE 27419
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27219: LD_ADDR_VAR 0 9
27223: PUSH
27224: LD_VAR 0 7
27228: PPUSH
27229: LD_VAR 0 1
27233: PPUSH
27234: LD_VAR 0 2
27238: PPUSH
27239: CALL_OW 297
27243: ST_TO_ADDR
// if not result then
27244: LD_VAR 0 6
27248: NOT
27249: IFFALSE 27275
// result := [ [ i , tmp ] ] else
27251: LD_ADDR_VAR 0 6
27255: PUSH
27256: LD_VAR 0 7
27260: PUSH
27261: LD_VAR 0 9
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: EMPTY
27271: LIST
27272: ST_TO_ADDR
27273: GO 27417
// begin if result [ result ] [ 2 ] < tmp then
27275: LD_VAR 0 6
27279: PUSH
27280: LD_VAR 0 6
27284: ARRAY
27285: PUSH
27286: LD_INT 2
27288: ARRAY
27289: PUSH
27290: LD_VAR 0 9
27294: LESS
27295: IFFALSE 27337
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27297: LD_ADDR_VAR 0 6
27301: PUSH
27302: LD_VAR 0 6
27306: PPUSH
27307: LD_VAR 0 6
27311: PUSH
27312: LD_INT 1
27314: PLUS
27315: PPUSH
27316: LD_VAR 0 7
27320: PUSH
27321: LD_VAR 0 9
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PPUSH
27330: CALL_OW 2
27334: ST_TO_ADDR
27335: GO 27417
// for j = 1 to result do
27337: LD_ADDR_VAR 0 8
27341: PUSH
27342: DOUBLE
27343: LD_INT 1
27345: DEC
27346: ST_TO_ADDR
27347: LD_VAR 0 6
27351: PUSH
27352: FOR_TO
27353: IFFALSE 27415
// begin if tmp < result [ j ] [ 2 ] then
27355: LD_VAR 0 9
27359: PUSH
27360: LD_VAR 0 6
27364: PUSH
27365: LD_VAR 0 8
27369: ARRAY
27370: PUSH
27371: LD_INT 2
27373: ARRAY
27374: LESS
27375: IFFALSE 27413
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27377: LD_ADDR_VAR 0 6
27381: PUSH
27382: LD_VAR 0 6
27386: PPUSH
27387: LD_VAR 0 8
27391: PPUSH
27392: LD_VAR 0 7
27396: PUSH
27397: LD_VAR 0 9
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PPUSH
27406: CALL_OW 2
27410: ST_TO_ADDR
// break ;
27411: GO 27415
// end ; end ;
27413: GO 27352
27415: POP
27416: POP
// end ; end ;
27417: GO 27216
27419: POP
27420: POP
// if result and not asc then
27421: LD_VAR 0 6
27425: PUSH
27426: LD_VAR 0 4
27430: NOT
27431: AND
27432: IFFALSE 27507
// begin tmp := result ;
27434: LD_ADDR_VAR 0 9
27438: PUSH
27439: LD_VAR 0 6
27443: ST_TO_ADDR
// for i = tmp downto 1 do
27444: LD_ADDR_VAR 0 7
27448: PUSH
27449: DOUBLE
27450: LD_VAR 0 9
27454: INC
27455: ST_TO_ADDR
27456: LD_INT 1
27458: PUSH
27459: FOR_DOWNTO
27460: IFFALSE 27505
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27462: LD_ADDR_VAR 0 6
27466: PUSH
27467: LD_VAR 0 6
27471: PPUSH
27472: LD_VAR 0 9
27476: PUSH
27477: LD_VAR 0 7
27481: MINUS
27482: PUSH
27483: LD_INT 1
27485: PLUS
27486: PPUSH
27487: LD_VAR 0 9
27491: PUSH
27492: LD_VAR 0 7
27496: ARRAY
27497: PPUSH
27498: CALL_OW 1
27502: ST_TO_ADDR
27503: GO 27459
27505: POP
27506: POP
// end ; tmp := [ ] ;
27507: LD_ADDR_VAR 0 9
27511: PUSH
27512: EMPTY
27513: ST_TO_ADDR
// if mode then
27514: LD_VAR 0 5
27518: IFFALSE 27587
// begin for i = 1 to result do
27520: LD_ADDR_VAR 0 7
27524: PUSH
27525: DOUBLE
27526: LD_INT 1
27528: DEC
27529: ST_TO_ADDR
27530: LD_VAR 0 6
27534: PUSH
27535: FOR_TO
27536: IFFALSE 27575
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27538: LD_ADDR_VAR 0 9
27542: PUSH
27543: LD_VAR 0 9
27547: PPUSH
27548: LD_VAR 0 7
27552: PPUSH
27553: LD_VAR 0 6
27557: PUSH
27558: LD_VAR 0 7
27562: ARRAY
27563: PUSH
27564: LD_INT 1
27566: ARRAY
27567: PPUSH
27568: CALL_OW 1
27572: ST_TO_ADDR
27573: GO 27535
27575: POP
27576: POP
// result := tmp ;
27577: LD_ADDR_VAR 0 6
27581: PUSH
27582: LD_VAR 0 9
27586: ST_TO_ADDR
// end ; end ;
27587: LD_VAR 0 6
27591: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27592: LD_INT 0
27594: PPUSH
27595: PPUSH
27596: PPUSH
27597: PPUSH
27598: PPUSH
27599: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27600: LD_ADDR_VAR 0 5
27604: PUSH
27605: LD_INT 0
27607: PUSH
27608: LD_INT 0
27610: PUSH
27611: LD_INT 0
27613: PUSH
27614: EMPTY
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: ST_TO_ADDR
// if not x or not y then
27622: LD_VAR 0 2
27626: NOT
27627: PUSH
27628: LD_VAR 0 3
27632: NOT
27633: OR
27634: IFFALSE 27638
// exit ;
27636: GO 29284
// if not range then
27638: LD_VAR 0 4
27642: NOT
27643: IFFALSE 27653
// range := 10 ;
27645: LD_ADDR_VAR 0 4
27649: PUSH
27650: LD_INT 10
27652: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27653: LD_ADDR_VAR 0 8
27657: PUSH
27658: LD_INT 81
27660: PUSH
27661: LD_VAR 0 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 92
27672: PUSH
27673: LD_VAR 0 2
27677: PUSH
27678: LD_VAR 0 3
27682: PUSH
27683: LD_VAR 0 4
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 3
27696: PUSH
27697: LD_INT 21
27699: PUSH
27700: LD_INT 3
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: LIST
27715: PPUSH
27716: CALL_OW 69
27720: ST_TO_ADDR
// if not tmp then
27721: LD_VAR 0 8
27725: NOT
27726: IFFALSE 27730
// exit ;
27728: GO 29284
// for i in tmp do
27730: LD_ADDR_VAR 0 6
27734: PUSH
27735: LD_VAR 0 8
27739: PUSH
27740: FOR_IN
27741: IFFALSE 29259
// begin points := [ 0 , 0 , 0 ] ;
27743: LD_ADDR_VAR 0 9
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: LD_INT 0
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: LIST
27761: ST_TO_ADDR
// bpoints := 1 ;
27762: LD_ADDR_VAR 0 10
27766: PUSH
27767: LD_INT 1
27769: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27770: LD_VAR 0 6
27774: PPUSH
27775: CALL_OW 247
27779: PUSH
27780: LD_INT 1
27782: DOUBLE
27783: EQUAL
27784: IFTRUE 27788
27786: GO 28366
27788: POP
// begin if GetClass ( i ) = 1 then
27789: LD_VAR 0 6
27793: PPUSH
27794: CALL_OW 257
27798: PUSH
27799: LD_INT 1
27801: EQUAL
27802: IFFALSE 27823
// points := [ 10 , 5 , 3 ] ;
27804: LD_ADDR_VAR 0 9
27808: PUSH
27809: LD_INT 10
27811: PUSH
27812: LD_INT 5
27814: PUSH
27815: LD_INT 3
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: LIST
27822: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27823: LD_VAR 0 6
27827: PPUSH
27828: CALL_OW 257
27832: PUSH
27833: LD_INT 2
27835: PUSH
27836: LD_INT 3
27838: PUSH
27839: LD_INT 4
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: LIST
27846: IN
27847: IFFALSE 27868
// points := [ 3 , 2 , 1 ] ;
27849: LD_ADDR_VAR 0 9
27853: PUSH
27854: LD_INT 3
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: LD_INT 1
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: LIST
27867: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27868: LD_VAR 0 6
27872: PPUSH
27873: CALL_OW 257
27877: PUSH
27878: LD_INT 5
27880: EQUAL
27881: IFFALSE 27902
// points := [ 130 , 5 , 2 ] ;
27883: LD_ADDR_VAR 0 9
27887: PUSH
27888: LD_INT 130
27890: PUSH
27891: LD_INT 5
27893: PUSH
27894: LD_INT 2
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: LIST
27901: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27902: LD_VAR 0 6
27906: PPUSH
27907: CALL_OW 257
27911: PUSH
27912: LD_INT 8
27914: EQUAL
27915: IFFALSE 27936
// points := [ 35 , 35 , 30 ] ;
27917: LD_ADDR_VAR 0 9
27921: PUSH
27922: LD_INT 35
27924: PUSH
27925: LD_INT 35
27927: PUSH
27928: LD_INT 30
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27936: LD_VAR 0 6
27940: PPUSH
27941: CALL_OW 257
27945: PUSH
27946: LD_INT 9
27948: EQUAL
27949: IFFALSE 27970
// points := [ 20 , 55 , 40 ] ;
27951: LD_ADDR_VAR 0 9
27955: PUSH
27956: LD_INT 20
27958: PUSH
27959: LD_INT 55
27961: PUSH
27962: LD_INT 40
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: LIST
27969: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27970: LD_VAR 0 6
27974: PPUSH
27975: CALL_OW 257
27979: PUSH
27980: LD_INT 12
27982: PUSH
27983: LD_INT 16
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: IN
27990: IFFALSE 28011
// points := [ 5 , 3 , 2 ] ;
27992: LD_ADDR_VAR 0 9
27996: PUSH
27997: LD_INT 5
27999: PUSH
28000: LD_INT 3
28002: PUSH
28003: LD_INT 2
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: LIST
28010: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28011: LD_VAR 0 6
28015: PPUSH
28016: CALL_OW 257
28020: PUSH
28021: LD_INT 17
28023: EQUAL
28024: IFFALSE 28045
// points := [ 100 , 50 , 75 ] ;
28026: LD_ADDR_VAR 0 9
28030: PUSH
28031: LD_INT 100
28033: PUSH
28034: LD_INT 50
28036: PUSH
28037: LD_INT 75
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28045: LD_VAR 0 6
28049: PPUSH
28050: CALL_OW 257
28054: PUSH
28055: LD_INT 15
28057: EQUAL
28058: IFFALSE 28079
// points := [ 10 , 5 , 3 ] ;
28060: LD_ADDR_VAR 0 9
28064: PUSH
28065: LD_INT 10
28067: PUSH
28068: LD_INT 5
28070: PUSH
28071: LD_INT 3
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: LIST
28078: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28079: LD_VAR 0 6
28083: PPUSH
28084: CALL_OW 257
28088: PUSH
28089: LD_INT 14
28091: EQUAL
28092: IFFALSE 28113
// points := [ 10 , 0 , 0 ] ;
28094: LD_ADDR_VAR 0 9
28098: PUSH
28099: LD_INT 10
28101: PUSH
28102: LD_INT 0
28104: PUSH
28105: LD_INT 0
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28113: LD_VAR 0 6
28117: PPUSH
28118: CALL_OW 257
28122: PUSH
28123: LD_INT 11
28125: EQUAL
28126: IFFALSE 28147
// points := [ 30 , 10 , 5 ] ;
28128: LD_ADDR_VAR 0 9
28132: PUSH
28133: LD_INT 30
28135: PUSH
28136: LD_INT 10
28138: PUSH
28139: LD_INT 5
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: LIST
28146: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28147: LD_VAR 0 1
28151: PPUSH
28152: LD_INT 5
28154: PPUSH
28155: CALL_OW 321
28159: PUSH
28160: LD_INT 2
28162: EQUAL
28163: IFFALSE 28180
// bpoints := bpoints * 1.8 ;
28165: LD_ADDR_VAR 0 10
28169: PUSH
28170: LD_VAR 0 10
28174: PUSH
28175: LD_REAL  1.80000000000000E+0000
28178: MUL
28179: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28180: LD_VAR 0 6
28184: PPUSH
28185: CALL_OW 257
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: LD_INT 2
28195: PUSH
28196: LD_INT 3
28198: PUSH
28199: LD_INT 4
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: IN
28208: PUSH
28209: LD_VAR 0 1
28213: PPUSH
28214: LD_INT 51
28216: PPUSH
28217: CALL_OW 321
28221: PUSH
28222: LD_INT 2
28224: EQUAL
28225: AND
28226: IFFALSE 28243
// bpoints := bpoints * 1.2 ;
28228: LD_ADDR_VAR 0 10
28232: PUSH
28233: LD_VAR 0 10
28237: PUSH
28238: LD_REAL  1.20000000000000E+0000
28241: MUL
28242: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28243: LD_VAR 0 6
28247: PPUSH
28248: CALL_OW 257
28252: PUSH
28253: LD_INT 5
28255: PUSH
28256: LD_INT 7
28258: PUSH
28259: LD_INT 9
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: LIST
28266: IN
28267: PUSH
28268: LD_VAR 0 1
28272: PPUSH
28273: LD_INT 52
28275: PPUSH
28276: CALL_OW 321
28280: PUSH
28281: LD_INT 2
28283: EQUAL
28284: AND
28285: IFFALSE 28302
// bpoints := bpoints * 1.5 ;
28287: LD_ADDR_VAR 0 10
28291: PUSH
28292: LD_VAR 0 10
28296: PUSH
28297: LD_REAL  1.50000000000000E+0000
28300: MUL
28301: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28302: LD_VAR 0 1
28306: PPUSH
28307: LD_INT 66
28309: PPUSH
28310: CALL_OW 321
28314: PUSH
28315: LD_INT 2
28317: EQUAL
28318: IFFALSE 28335
// bpoints := bpoints * 1.1 ;
28320: LD_ADDR_VAR 0 10
28324: PUSH
28325: LD_VAR 0 10
28329: PUSH
28330: LD_REAL  1.10000000000000E+0000
28333: MUL
28334: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28335: LD_ADDR_VAR 0 10
28339: PUSH
28340: LD_VAR 0 10
28344: PUSH
28345: LD_VAR 0 6
28349: PPUSH
28350: LD_INT 1
28352: PPUSH
28353: CALL_OW 259
28357: PUSH
28358: LD_REAL  1.15000000000000E+0000
28361: MUL
28362: MUL
28363: ST_TO_ADDR
// end ; unit_vehicle :
28364: GO 29188
28366: LD_INT 2
28368: DOUBLE
28369: EQUAL
28370: IFTRUE 28374
28372: GO 29176
28374: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28375: LD_VAR 0 6
28379: PPUSH
28380: CALL_OW 264
28384: PUSH
28385: LD_INT 2
28387: PUSH
28388: LD_INT 42
28390: PUSH
28391: LD_INT 24
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: LIST
28398: IN
28399: IFFALSE 28420
// points := [ 25 , 5 , 3 ] ;
28401: LD_ADDR_VAR 0 9
28405: PUSH
28406: LD_INT 25
28408: PUSH
28409: LD_INT 5
28411: PUSH
28412: LD_INT 3
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: LIST
28419: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28420: LD_VAR 0 6
28424: PPUSH
28425: CALL_OW 264
28429: PUSH
28430: LD_INT 4
28432: PUSH
28433: LD_INT 43
28435: PUSH
28436: LD_INT 25
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: LIST
28443: IN
28444: IFFALSE 28465
// points := [ 40 , 15 , 5 ] ;
28446: LD_ADDR_VAR 0 9
28450: PUSH
28451: LD_INT 40
28453: PUSH
28454: LD_INT 15
28456: PUSH
28457: LD_INT 5
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: LIST
28464: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28465: LD_VAR 0 6
28469: PPUSH
28470: CALL_OW 264
28474: PUSH
28475: LD_INT 3
28477: PUSH
28478: LD_INT 23
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: IN
28485: IFFALSE 28506
// points := [ 7 , 25 , 8 ] ;
28487: LD_ADDR_VAR 0 9
28491: PUSH
28492: LD_INT 7
28494: PUSH
28495: LD_INT 25
28497: PUSH
28498: LD_INT 8
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: LIST
28505: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28506: LD_VAR 0 6
28510: PPUSH
28511: CALL_OW 264
28515: PUSH
28516: LD_INT 5
28518: PUSH
28519: LD_INT 27
28521: PUSH
28522: LD_INT 44
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: LIST
28529: IN
28530: IFFALSE 28551
// points := [ 14 , 50 , 16 ] ;
28532: LD_ADDR_VAR 0 9
28536: PUSH
28537: LD_INT 14
28539: PUSH
28540: LD_INT 50
28542: PUSH
28543: LD_INT 16
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: LIST
28550: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28551: LD_VAR 0 6
28555: PPUSH
28556: CALL_OW 264
28560: PUSH
28561: LD_INT 6
28563: PUSH
28564: LD_INT 46
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: IN
28571: IFFALSE 28592
// points := [ 32 , 120 , 70 ] ;
28573: LD_ADDR_VAR 0 9
28577: PUSH
28578: LD_INT 32
28580: PUSH
28581: LD_INT 120
28583: PUSH
28584: LD_INT 70
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: LIST
28591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28592: LD_VAR 0 6
28596: PPUSH
28597: CALL_OW 264
28601: PUSH
28602: LD_INT 7
28604: PUSH
28605: LD_INT 28
28607: PUSH
28608: LD_INT 45
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: LIST
28615: IN
28616: IFFALSE 28637
// points := [ 35 , 20 , 45 ] ;
28618: LD_ADDR_VAR 0 9
28622: PUSH
28623: LD_INT 35
28625: PUSH
28626: LD_INT 20
28628: PUSH
28629: LD_INT 45
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: LIST
28636: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28637: LD_VAR 0 6
28641: PPUSH
28642: CALL_OW 264
28646: PUSH
28647: LD_INT 47
28649: PUSH
28650: EMPTY
28651: LIST
28652: IN
28653: IFFALSE 28674
// points := [ 67 , 45 , 75 ] ;
28655: LD_ADDR_VAR 0 9
28659: PUSH
28660: LD_INT 67
28662: PUSH
28663: LD_INT 45
28665: PUSH
28666: LD_INT 75
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: LIST
28673: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28674: LD_VAR 0 6
28678: PPUSH
28679: CALL_OW 264
28683: PUSH
28684: LD_INT 26
28686: PUSH
28687: EMPTY
28688: LIST
28689: IN
28690: IFFALSE 28711
// points := [ 120 , 30 , 80 ] ;
28692: LD_ADDR_VAR 0 9
28696: PUSH
28697: LD_INT 120
28699: PUSH
28700: LD_INT 30
28702: PUSH
28703: LD_INT 80
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: LIST
28710: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28711: LD_VAR 0 6
28715: PPUSH
28716: CALL_OW 264
28720: PUSH
28721: LD_INT 22
28723: PUSH
28724: EMPTY
28725: LIST
28726: IN
28727: IFFALSE 28748
// points := [ 40 , 1 , 1 ] ;
28729: LD_ADDR_VAR 0 9
28733: PUSH
28734: LD_INT 40
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: LIST
28747: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28748: LD_VAR 0 6
28752: PPUSH
28753: CALL_OW 264
28757: PUSH
28758: LD_INT 29
28760: PUSH
28761: EMPTY
28762: LIST
28763: IN
28764: IFFALSE 28785
// points := [ 70 , 200 , 400 ] ;
28766: LD_ADDR_VAR 0 9
28770: PUSH
28771: LD_INT 70
28773: PUSH
28774: LD_INT 200
28776: PUSH
28777: LD_INT 400
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: LIST
28784: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28785: LD_VAR 0 6
28789: PPUSH
28790: CALL_OW 264
28794: PUSH
28795: LD_INT 14
28797: PUSH
28798: LD_INT 53
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: IN
28805: IFFALSE 28826
// points := [ 40 , 10 , 20 ] ;
28807: LD_ADDR_VAR 0 9
28811: PUSH
28812: LD_INT 40
28814: PUSH
28815: LD_INT 10
28817: PUSH
28818: LD_INT 20
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: LIST
28825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28826: LD_VAR 0 6
28830: PPUSH
28831: CALL_OW 264
28835: PUSH
28836: LD_INT 9
28838: PUSH
28839: EMPTY
28840: LIST
28841: IN
28842: IFFALSE 28863
// points := [ 5 , 70 , 20 ] ;
28844: LD_ADDR_VAR 0 9
28848: PUSH
28849: LD_INT 5
28851: PUSH
28852: LD_INT 70
28854: PUSH
28855: LD_INT 20
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: LIST
28862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28863: LD_VAR 0 6
28867: PPUSH
28868: CALL_OW 264
28872: PUSH
28873: LD_INT 10
28875: PUSH
28876: EMPTY
28877: LIST
28878: IN
28879: IFFALSE 28900
// points := [ 35 , 110 , 70 ] ;
28881: LD_ADDR_VAR 0 9
28885: PUSH
28886: LD_INT 35
28888: PUSH
28889: LD_INT 110
28891: PUSH
28892: LD_INT 70
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: LIST
28899: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28900: LD_VAR 0 6
28904: PPUSH
28905: CALL_OW 265
28909: PUSH
28910: LD_INT 25
28912: EQUAL
28913: IFFALSE 28934
// points := [ 80 , 65 , 100 ] ;
28915: LD_ADDR_VAR 0 9
28919: PUSH
28920: LD_INT 80
28922: PUSH
28923: LD_INT 65
28925: PUSH
28926: LD_INT 100
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: LIST
28933: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28934: LD_VAR 0 6
28938: PPUSH
28939: CALL_OW 263
28943: PUSH
28944: LD_INT 1
28946: EQUAL
28947: IFFALSE 28982
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28949: LD_ADDR_VAR 0 10
28953: PUSH
28954: LD_VAR 0 10
28958: PUSH
28959: LD_VAR 0 6
28963: PPUSH
28964: CALL_OW 311
28968: PPUSH
28969: LD_INT 3
28971: PPUSH
28972: CALL_OW 259
28976: PUSH
28977: LD_INT 4
28979: MUL
28980: MUL
28981: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28982: LD_VAR 0 6
28986: PPUSH
28987: CALL_OW 263
28991: PUSH
28992: LD_INT 2
28994: EQUAL
28995: IFFALSE 29046
// begin j := IsControledBy ( i ) ;
28997: LD_ADDR_VAR 0 7
29001: PUSH
29002: LD_VAR 0 6
29006: PPUSH
29007: CALL_OW 312
29011: ST_TO_ADDR
// if j then
29012: LD_VAR 0 7
29016: IFFALSE 29046
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29018: LD_ADDR_VAR 0 10
29022: PUSH
29023: LD_VAR 0 10
29027: PUSH
29028: LD_VAR 0 7
29032: PPUSH
29033: LD_INT 3
29035: PPUSH
29036: CALL_OW 259
29040: PUSH
29041: LD_INT 3
29043: MUL
29044: MUL
29045: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29046: LD_VAR 0 6
29050: PPUSH
29051: CALL_OW 264
29055: PUSH
29056: LD_INT 5
29058: PUSH
29059: LD_INT 6
29061: PUSH
29062: LD_INT 46
29064: PUSH
29065: LD_INT 44
29067: PUSH
29068: LD_INT 47
29070: PUSH
29071: LD_INT 45
29073: PUSH
29074: LD_INT 28
29076: PUSH
29077: LD_INT 7
29079: PUSH
29080: LD_INT 27
29082: PUSH
29083: LD_INT 29
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: IN
29098: PUSH
29099: LD_VAR 0 1
29103: PPUSH
29104: LD_INT 52
29106: PPUSH
29107: CALL_OW 321
29111: PUSH
29112: LD_INT 2
29114: EQUAL
29115: AND
29116: IFFALSE 29133
// bpoints := bpoints * 1.2 ;
29118: LD_ADDR_VAR 0 10
29122: PUSH
29123: LD_VAR 0 10
29127: PUSH
29128: LD_REAL  1.20000000000000E+0000
29131: MUL
29132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29133: LD_VAR 0 6
29137: PPUSH
29138: CALL_OW 264
29142: PUSH
29143: LD_INT 6
29145: PUSH
29146: LD_INT 46
29148: PUSH
29149: LD_INT 47
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: LIST
29156: IN
29157: IFFALSE 29174
// bpoints := bpoints * 1.2 ;
29159: LD_ADDR_VAR 0 10
29163: PUSH
29164: LD_VAR 0 10
29168: PUSH
29169: LD_REAL  1.20000000000000E+0000
29172: MUL
29173: ST_TO_ADDR
// end ; unit_building :
29174: GO 29188
29176: LD_INT 3
29178: DOUBLE
29179: EQUAL
29180: IFTRUE 29184
29182: GO 29187
29184: POP
// ; end ;
29185: GO 29188
29187: POP
// for j = 1 to 3 do
29188: LD_ADDR_VAR 0 7
29192: PUSH
29193: DOUBLE
29194: LD_INT 1
29196: DEC
29197: ST_TO_ADDR
29198: LD_INT 3
29200: PUSH
29201: FOR_TO
29202: IFFALSE 29255
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29204: LD_ADDR_VAR 0 5
29208: PUSH
29209: LD_VAR 0 5
29213: PPUSH
29214: LD_VAR 0 7
29218: PPUSH
29219: LD_VAR 0 5
29223: PUSH
29224: LD_VAR 0 7
29228: ARRAY
29229: PUSH
29230: LD_VAR 0 9
29234: PUSH
29235: LD_VAR 0 7
29239: ARRAY
29240: PUSH
29241: LD_VAR 0 10
29245: MUL
29246: PLUS
29247: PPUSH
29248: CALL_OW 1
29252: ST_TO_ADDR
29253: GO 29201
29255: POP
29256: POP
// end ;
29257: GO 27740
29259: POP
29260: POP
// result := Replace ( result , 4 , tmp ) ;
29261: LD_ADDR_VAR 0 5
29265: PUSH
29266: LD_VAR 0 5
29270: PPUSH
29271: LD_INT 4
29273: PPUSH
29274: LD_VAR 0 8
29278: PPUSH
29279: CALL_OW 1
29283: ST_TO_ADDR
// end ;
29284: LD_VAR 0 5
29288: RET
// export function DangerAtRange ( unit , range ) ; begin
29289: LD_INT 0
29291: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29292: LD_ADDR_VAR 0 3
29296: PUSH
29297: LD_VAR 0 1
29301: PPUSH
29302: CALL_OW 255
29306: PPUSH
29307: LD_VAR 0 1
29311: PPUSH
29312: CALL_OW 250
29316: PPUSH
29317: LD_VAR 0 1
29321: PPUSH
29322: CALL_OW 251
29326: PPUSH
29327: LD_VAR 0 2
29331: PPUSH
29332: CALL 27592 0 4
29336: ST_TO_ADDR
// end ;
29337: LD_VAR 0 3
29341: RET
// export function DangerInArea ( side , area ) ; begin
29342: LD_INT 0
29344: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29345: LD_ADDR_VAR 0 3
29349: PUSH
29350: LD_VAR 0 2
29354: PPUSH
29355: LD_INT 81
29357: PUSH
29358: LD_VAR 0 1
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PPUSH
29367: CALL_OW 70
29371: ST_TO_ADDR
// end ;
29372: LD_VAR 0 3
29376: RET
// export function IsExtension ( b ) ; begin
29377: LD_INT 0
29379: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29380: LD_ADDR_VAR 0 2
29384: PUSH
29385: LD_VAR 0 1
29389: PUSH
29390: LD_INT 23
29392: PUSH
29393: LD_INT 20
29395: PUSH
29396: LD_INT 22
29398: PUSH
29399: LD_INT 17
29401: PUSH
29402: LD_INT 24
29404: PUSH
29405: LD_INT 21
29407: PUSH
29408: LD_INT 19
29410: PUSH
29411: LD_INT 16
29413: PUSH
29414: LD_INT 25
29416: PUSH
29417: LD_INT 18
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: IN
29432: ST_TO_ADDR
// end ;
29433: LD_VAR 0 2
29437: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
29438: LD_INT 0
29440: PPUSH
29441: PPUSH
29442: PPUSH
// result := [ ] ;
29443: LD_ADDR_VAR 0 3
29447: PUSH
29448: EMPTY
29449: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29450: LD_ADDR_VAR 0 4
29454: PUSH
29455: LD_VAR 0 2
29459: PPUSH
29460: LD_INT 21
29462: PUSH
29463: LD_INT 3
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PPUSH
29470: CALL_OW 70
29474: ST_TO_ADDR
// if not tmp then
29475: LD_VAR 0 4
29479: NOT
29480: IFFALSE 29484
// exit ;
29482: GO 29542
// for i in tmp do
29484: LD_ADDR_VAR 0 5
29488: PUSH
29489: LD_VAR 0 4
29493: PUSH
29494: FOR_IN
29495: IFFALSE 29530
// if GetBase ( i ) <> base then
29497: LD_VAR 0 5
29501: PPUSH
29502: CALL_OW 274
29506: PUSH
29507: LD_VAR 0 1
29511: NONEQUAL
29512: IFFALSE 29528
// ComLinkToBase ( base , i ) ;
29514: LD_VAR 0 1
29518: PPUSH
29519: LD_VAR 0 5
29523: PPUSH
29524: CALL_OW 169
29528: GO 29494
29530: POP
29531: POP
// result := tmp ;
29532: LD_ADDR_VAR 0 3
29536: PUSH
29537: LD_VAR 0 4
29541: ST_TO_ADDR
// end ;
29542: LD_VAR 0 3
29546: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29547: LD_INT 0
29549: PPUSH
29550: PPUSH
// if BuildingStatus ( b ) = bs_build then
29551: LD_VAR 0 2
29555: PPUSH
29556: CALL_OW 461
29560: PUSH
29561: LD_INT 1
29563: EQUAL
29564: IFFALSE 29624
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29566: LD_VAR 0 1
29570: PPUSH
29571: LD_STRING h
29573: PUSH
29574: LD_VAR 0 2
29578: PPUSH
29579: CALL_OW 250
29583: PUSH
29584: LD_VAR 0 2
29588: PPUSH
29589: CALL_OW 251
29593: PUSH
29594: LD_VAR 0 2
29598: PUSH
29599: LD_INT 0
29601: PUSH
29602: LD_INT 0
29604: PUSH
29605: LD_INT 0
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: PUSH
29617: EMPTY
29618: LIST
29619: PPUSH
29620: CALL_OW 446
// end ;
29624: LD_VAR 0 3
29628: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29629: LD_INT 0
29631: PPUSH
29632: PPUSH
29633: PPUSH
29634: PPUSH
29635: PPUSH
29636: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29637: LD_VAR 0 1
29641: NOT
29642: PUSH
29643: LD_VAR 0 1
29647: PPUSH
29648: CALL_OW 263
29652: PUSH
29653: LD_INT 2
29655: EQUAL
29656: NOT
29657: OR
29658: IFFALSE 29662
// exit ;
29660: GO 29978
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29662: LD_ADDR_VAR 0 6
29666: PUSH
29667: LD_INT 22
29669: PUSH
29670: LD_VAR 0 1
29674: PPUSH
29675: CALL_OW 255
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 2
29686: PUSH
29687: LD_INT 30
29689: PUSH
29690: LD_INT 36
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 34
29699: PUSH
29700: LD_INT 31
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: LIST
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PPUSH
29716: CALL_OW 69
29720: ST_TO_ADDR
// if not tmp then
29721: LD_VAR 0 6
29725: NOT
29726: IFFALSE 29730
// exit ;
29728: GO 29978
// result := [ ] ;
29730: LD_ADDR_VAR 0 2
29734: PUSH
29735: EMPTY
29736: ST_TO_ADDR
// for i in tmp do
29737: LD_ADDR_VAR 0 3
29741: PUSH
29742: LD_VAR 0 6
29746: PUSH
29747: FOR_IN
29748: IFFALSE 29819
// begin t := UnitsInside ( i ) ;
29750: LD_ADDR_VAR 0 4
29754: PUSH
29755: LD_VAR 0 3
29759: PPUSH
29760: CALL_OW 313
29764: ST_TO_ADDR
// if t then
29765: LD_VAR 0 4
29769: IFFALSE 29817
// for j in t do
29771: LD_ADDR_VAR 0 7
29775: PUSH
29776: LD_VAR 0 4
29780: PUSH
29781: FOR_IN
29782: IFFALSE 29815
// result := Insert ( result , result + 1 , j ) ;
29784: LD_ADDR_VAR 0 2
29788: PUSH
29789: LD_VAR 0 2
29793: PPUSH
29794: LD_VAR 0 2
29798: PUSH
29799: LD_INT 1
29801: PLUS
29802: PPUSH
29803: LD_VAR 0 7
29807: PPUSH
29808: CALL_OW 2
29812: ST_TO_ADDR
29813: GO 29781
29815: POP
29816: POP
// end ;
29817: GO 29747
29819: POP
29820: POP
// if not result then
29821: LD_VAR 0 2
29825: NOT
29826: IFFALSE 29830
// exit ;
29828: GO 29978
// mech := result [ 1 ] ;
29830: LD_ADDR_VAR 0 5
29834: PUSH
29835: LD_VAR 0 2
29839: PUSH
29840: LD_INT 1
29842: ARRAY
29843: ST_TO_ADDR
// if result > 1 then
29844: LD_VAR 0 2
29848: PUSH
29849: LD_INT 1
29851: GREATER
29852: IFFALSE 29964
// for i = 2 to result do
29854: LD_ADDR_VAR 0 3
29858: PUSH
29859: DOUBLE
29860: LD_INT 2
29862: DEC
29863: ST_TO_ADDR
29864: LD_VAR 0 2
29868: PUSH
29869: FOR_TO
29870: IFFALSE 29962
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29872: LD_ADDR_VAR 0 4
29876: PUSH
29877: LD_VAR 0 2
29881: PUSH
29882: LD_VAR 0 3
29886: ARRAY
29887: PPUSH
29888: LD_INT 3
29890: PPUSH
29891: CALL_OW 259
29895: PUSH
29896: LD_VAR 0 2
29900: PUSH
29901: LD_VAR 0 3
29905: ARRAY
29906: PPUSH
29907: CALL_OW 432
29911: MINUS
29912: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29913: LD_VAR 0 4
29917: PUSH
29918: LD_VAR 0 5
29922: PPUSH
29923: LD_INT 3
29925: PPUSH
29926: CALL_OW 259
29930: PUSH
29931: LD_VAR 0 5
29935: PPUSH
29936: CALL_OW 432
29940: MINUS
29941: GREATEREQUAL
29942: IFFALSE 29960
// mech := result [ i ] ;
29944: LD_ADDR_VAR 0 5
29948: PUSH
29949: LD_VAR 0 2
29953: PUSH
29954: LD_VAR 0 3
29958: ARRAY
29959: ST_TO_ADDR
// end ;
29960: GO 29869
29962: POP
29963: POP
// ComLinkTo ( vehicle , mech ) ;
29964: LD_VAR 0 1
29968: PPUSH
29969: LD_VAR 0 5
29973: PPUSH
29974: CALL_OW 135
// end ;
29978: LD_VAR 0 2
29982: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29983: LD_INT 0
29985: PPUSH
29986: PPUSH
29987: PPUSH
29988: PPUSH
29989: PPUSH
29990: PPUSH
29991: PPUSH
29992: PPUSH
29993: PPUSH
29994: PPUSH
29995: PPUSH
29996: PPUSH
29997: PPUSH
// result := [ ] ;
29998: LD_ADDR_VAR 0 7
30002: PUSH
30003: EMPTY
30004: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30005: LD_VAR 0 1
30009: PPUSH
30010: CALL_OW 266
30014: PUSH
30015: LD_INT 0
30017: PUSH
30018: LD_INT 1
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: IN
30025: NOT
30026: IFFALSE 30030
// exit ;
30028: GO 31661
// if name then
30030: LD_VAR 0 3
30034: IFFALSE 30050
// SetBName ( base_dep , name ) ;
30036: LD_VAR 0 1
30040: PPUSH
30041: LD_VAR 0 3
30045: PPUSH
30046: CALL_OW 500
// base := GetBase ( base_dep ) ;
30050: LD_ADDR_VAR 0 15
30054: PUSH
30055: LD_VAR 0 1
30059: PPUSH
30060: CALL_OW 274
30064: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30065: LD_ADDR_VAR 0 16
30069: PUSH
30070: LD_VAR 0 1
30074: PPUSH
30075: CALL_OW 255
30079: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30080: LD_ADDR_VAR 0 17
30084: PUSH
30085: LD_VAR 0 1
30089: PPUSH
30090: CALL_OW 248
30094: ST_TO_ADDR
// if sources then
30095: LD_VAR 0 5
30099: IFFALSE 30146
// for i = 1 to 3 do
30101: LD_ADDR_VAR 0 8
30105: PUSH
30106: DOUBLE
30107: LD_INT 1
30109: DEC
30110: ST_TO_ADDR
30111: LD_INT 3
30113: PUSH
30114: FOR_TO
30115: IFFALSE 30144
// AddResourceType ( base , i , sources [ i ] ) ;
30117: LD_VAR 0 15
30121: PPUSH
30122: LD_VAR 0 8
30126: PPUSH
30127: LD_VAR 0 5
30131: PUSH
30132: LD_VAR 0 8
30136: ARRAY
30137: PPUSH
30138: CALL_OW 276
30142: GO 30114
30144: POP
30145: POP
// buildings := GetBaseBuildings ( base , area ) ;
30146: LD_ADDR_VAR 0 18
30150: PUSH
30151: LD_VAR 0 15
30155: PPUSH
30156: LD_VAR 0 2
30160: PPUSH
30161: CALL 29438 0 2
30165: ST_TO_ADDR
// InitHc ;
30166: CALL_OW 19
// InitUc ;
30170: CALL_OW 18
// uc_side := side ;
30174: LD_ADDR_OWVAR 20
30178: PUSH
30179: LD_VAR 0 16
30183: ST_TO_ADDR
// uc_nation := nation ;
30184: LD_ADDR_OWVAR 21
30188: PUSH
30189: LD_VAR 0 17
30193: ST_TO_ADDR
// if buildings then
30194: LD_VAR 0 18
30198: IFFALSE 31520
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30200: LD_ADDR_VAR 0 19
30204: PUSH
30205: LD_VAR 0 18
30209: PPUSH
30210: LD_INT 2
30212: PUSH
30213: LD_INT 30
30215: PUSH
30216: LD_INT 29
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 30
30225: PUSH
30226: LD_INT 30
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: LIST
30237: PPUSH
30238: CALL_OW 72
30242: ST_TO_ADDR
// if tmp then
30243: LD_VAR 0 19
30247: IFFALSE 30295
// for i in tmp do
30249: LD_ADDR_VAR 0 8
30253: PUSH
30254: LD_VAR 0 19
30258: PUSH
30259: FOR_IN
30260: IFFALSE 30293
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30262: LD_VAR 0 8
30266: PPUSH
30267: CALL_OW 250
30271: PPUSH
30272: LD_VAR 0 8
30276: PPUSH
30277: CALL_OW 251
30281: PPUSH
30282: LD_VAR 0 16
30286: PPUSH
30287: CALL_OW 441
30291: GO 30259
30293: POP
30294: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30295: LD_VAR 0 18
30299: PPUSH
30300: LD_INT 2
30302: PUSH
30303: LD_INT 30
30305: PUSH
30306: LD_INT 32
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 30
30315: PUSH
30316: LD_INT 33
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: LIST
30327: PPUSH
30328: CALL_OW 72
30332: IFFALSE 30420
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30334: LD_ADDR_VAR 0 8
30338: PUSH
30339: LD_VAR 0 18
30343: PPUSH
30344: LD_INT 2
30346: PUSH
30347: LD_INT 30
30349: PUSH
30350: LD_INT 32
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 30
30359: PUSH
30360: LD_INT 33
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: LIST
30371: PPUSH
30372: CALL_OW 72
30376: PUSH
30377: FOR_IN
30378: IFFALSE 30418
// begin if not GetBWeapon ( i ) then
30380: LD_VAR 0 8
30384: PPUSH
30385: CALL_OW 269
30389: NOT
30390: IFFALSE 30416
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30392: LD_VAR 0 8
30396: PPUSH
30397: LD_VAR 0 8
30401: PPUSH
30402: LD_VAR 0 2
30406: PPUSH
30407: CALL 31666 0 2
30411: PPUSH
30412: CALL_OW 431
// end ;
30416: GO 30377
30418: POP
30419: POP
// end ; for i = 1 to personel do
30420: LD_ADDR_VAR 0 8
30424: PUSH
30425: DOUBLE
30426: LD_INT 1
30428: DEC
30429: ST_TO_ADDR
30430: LD_VAR 0 6
30434: PUSH
30435: FOR_TO
30436: IFFALSE 31500
// begin if i > 4 then
30438: LD_VAR 0 8
30442: PUSH
30443: LD_INT 4
30445: GREATER
30446: IFFALSE 30450
// break ;
30448: GO 31500
// case i of 1 :
30450: LD_VAR 0 8
30454: PUSH
30455: LD_INT 1
30457: DOUBLE
30458: EQUAL
30459: IFTRUE 30463
30461: GO 30543
30463: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30464: LD_ADDR_VAR 0 12
30468: PUSH
30469: LD_VAR 0 18
30473: PPUSH
30474: LD_INT 22
30476: PUSH
30477: LD_VAR 0 16
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 58
30488: PUSH
30489: EMPTY
30490: LIST
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: LD_INT 30
30497: PUSH
30498: LD_INT 32
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 30
30507: PUSH
30508: LD_INT 4
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 30
30517: PUSH
30518: LD_INT 5
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: LIST
30535: PPUSH
30536: CALL_OW 72
30540: ST_TO_ADDR
30541: GO 30765
30543: LD_INT 2
30545: DOUBLE
30546: EQUAL
30547: IFTRUE 30551
30549: GO 30613
30551: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30552: LD_ADDR_VAR 0 12
30556: PUSH
30557: LD_VAR 0 18
30561: PPUSH
30562: LD_INT 22
30564: PUSH
30565: LD_VAR 0 16
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 2
30576: PUSH
30577: LD_INT 30
30579: PUSH
30580: LD_INT 0
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 30
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: LIST
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PPUSH
30606: CALL_OW 72
30610: ST_TO_ADDR
30611: GO 30765
30613: LD_INT 3
30615: DOUBLE
30616: EQUAL
30617: IFTRUE 30621
30619: GO 30683
30621: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30622: LD_ADDR_VAR 0 12
30626: PUSH
30627: LD_VAR 0 18
30631: PPUSH
30632: LD_INT 22
30634: PUSH
30635: LD_VAR 0 16
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 2
30646: PUSH
30647: LD_INT 30
30649: PUSH
30650: LD_INT 2
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 30
30659: PUSH
30660: LD_INT 3
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: LIST
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PPUSH
30676: CALL_OW 72
30680: ST_TO_ADDR
30681: GO 30765
30683: LD_INT 4
30685: DOUBLE
30686: EQUAL
30687: IFTRUE 30691
30689: GO 30764
30691: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30692: LD_ADDR_VAR 0 12
30696: PUSH
30697: LD_VAR 0 18
30701: PPUSH
30702: LD_INT 22
30704: PUSH
30705: LD_VAR 0 16
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: LD_INT 30
30719: PUSH
30720: LD_INT 6
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 30
30729: PUSH
30730: LD_INT 7
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 30
30739: PUSH
30740: LD_INT 8
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PPUSH
30757: CALL_OW 72
30761: ST_TO_ADDR
30762: GO 30765
30764: POP
// if i = 1 then
30765: LD_VAR 0 8
30769: PUSH
30770: LD_INT 1
30772: EQUAL
30773: IFFALSE 30884
// begin tmp := [ ] ;
30775: LD_ADDR_VAR 0 19
30779: PUSH
30780: EMPTY
30781: ST_TO_ADDR
// for j in f do
30782: LD_ADDR_VAR 0 9
30786: PUSH
30787: LD_VAR 0 12
30791: PUSH
30792: FOR_IN
30793: IFFALSE 30866
// if GetBType ( j ) = b_bunker then
30795: LD_VAR 0 9
30799: PPUSH
30800: CALL_OW 266
30804: PUSH
30805: LD_INT 32
30807: EQUAL
30808: IFFALSE 30835
// tmp := Insert ( tmp , 1 , j ) else
30810: LD_ADDR_VAR 0 19
30814: PUSH
30815: LD_VAR 0 19
30819: PPUSH
30820: LD_INT 1
30822: PPUSH
30823: LD_VAR 0 9
30827: PPUSH
30828: CALL_OW 2
30832: ST_TO_ADDR
30833: GO 30864
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30835: LD_ADDR_VAR 0 19
30839: PUSH
30840: LD_VAR 0 19
30844: PPUSH
30845: LD_VAR 0 19
30849: PUSH
30850: LD_INT 1
30852: PLUS
30853: PPUSH
30854: LD_VAR 0 9
30858: PPUSH
30859: CALL_OW 2
30863: ST_TO_ADDR
30864: GO 30792
30866: POP
30867: POP
// if tmp then
30868: LD_VAR 0 19
30872: IFFALSE 30884
// f := tmp ;
30874: LD_ADDR_VAR 0 12
30878: PUSH
30879: LD_VAR 0 19
30883: ST_TO_ADDR
// end ; x := personel [ i ] ;
30884: LD_ADDR_VAR 0 13
30888: PUSH
30889: LD_VAR 0 6
30893: PUSH
30894: LD_VAR 0 8
30898: ARRAY
30899: ST_TO_ADDR
// if x = - 1 then
30900: LD_VAR 0 13
30904: PUSH
30905: LD_INT 1
30907: NEG
30908: EQUAL
30909: IFFALSE 31118
// begin for j in f do
30911: LD_ADDR_VAR 0 9
30915: PUSH
30916: LD_VAR 0 12
30920: PUSH
30921: FOR_IN
30922: IFFALSE 31114
// repeat InitHc ;
30924: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30928: LD_VAR 0 9
30932: PPUSH
30933: CALL_OW 266
30937: PUSH
30938: LD_INT 5
30940: EQUAL
30941: IFFALSE 31011
// begin if UnitsInside ( j ) < 3 then
30943: LD_VAR 0 9
30947: PPUSH
30948: CALL_OW 313
30952: PUSH
30953: LD_INT 3
30955: LESS
30956: IFFALSE 30992
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30958: LD_INT 0
30960: PPUSH
30961: LD_INT 5
30963: PUSH
30964: LD_INT 8
30966: PUSH
30967: LD_INT 9
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: LIST
30974: PUSH
30975: LD_VAR 0 17
30979: ARRAY
30980: PPUSH
30981: LD_VAR 0 4
30985: PPUSH
30986: CALL_OW 380
30990: GO 31009
// PrepareHuman ( false , i , skill ) ;
30992: LD_INT 0
30994: PPUSH
30995: LD_VAR 0 8
30999: PPUSH
31000: LD_VAR 0 4
31004: PPUSH
31005: CALL_OW 380
// end else
31009: GO 31028
// PrepareHuman ( false , i , skill ) ;
31011: LD_INT 0
31013: PPUSH
31014: LD_VAR 0 8
31018: PPUSH
31019: LD_VAR 0 4
31023: PPUSH
31024: CALL_OW 380
// un := CreateHuman ;
31028: LD_ADDR_VAR 0 14
31032: PUSH
31033: CALL_OW 44
31037: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31038: LD_ADDR_VAR 0 7
31042: PUSH
31043: LD_VAR 0 7
31047: PPUSH
31048: LD_INT 1
31050: PPUSH
31051: LD_VAR 0 14
31055: PPUSH
31056: CALL_OW 2
31060: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31061: LD_VAR 0 14
31065: PPUSH
31066: LD_VAR 0 9
31070: PPUSH
31071: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31075: LD_VAR 0 9
31079: PPUSH
31080: CALL_OW 313
31084: PUSH
31085: LD_INT 6
31087: EQUAL
31088: PUSH
31089: LD_VAR 0 9
31093: PPUSH
31094: CALL_OW 266
31098: PUSH
31099: LD_INT 32
31101: PUSH
31102: LD_INT 31
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: IN
31109: OR
31110: IFFALSE 30924
31112: GO 30921
31114: POP
31115: POP
// end else
31116: GO 31498
// for j = 1 to x do
31118: LD_ADDR_VAR 0 9
31122: PUSH
31123: DOUBLE
31124: LD_INT 1
31126: DEC
31127: ST_TO_ADDR
31128: LD_VAR 0 13
31132: PUSH
31133: FOR_TO
31134: IFFALSE 31496
// begin InitHc ;
31136: CALL_OW 19
// if not f then
31140: LD_VAR 0 12
31144: NOT
31145: IFFALSE 31234
// begin PrepareHuman ( false , i , skill ) ;
31147: LD_INT 0
31149: PPUSH
31150: LD_VAR 0 8
31154: PPUSH
31155: LD_VAR 0 4
31159: PPUSH
31160: CALL_OW 380
// un := CreateHuman ;
31164: LD_ADDR_VAR 0 14
31168: PUSH
31169: CALL_OW 44
31173: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31174: LD_ADDR_VAR 0 7
31178: PUSH
31179: LD_VAR 0 7
31183: PPUSH
31184: LD_INT 1
31186: PPUSH
31187: LD_VAR 0 14
31191: PPUSH
31192: CALL_OW 2
31196: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31197: LD_VAR 0 14
31201: PPUSH
31202: LD_VAR 0 1
31206: PPUSH
31207: CALL_OW 250
31211: PPUSH
31212: LD_VAR 0 1
31216: PPUSH
31217: CALL_OW 251
31221: PPUSH
31222: LD_INT 10
31224: PPUSH
31225: LD_INT 0
31227: PPUSH
31228: CALL_OW 50
// continue ;
31232: GO 31133
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31234: LD_VAR 0 12
31238: PUSH
31239: LD_INT 1
31241: ARRAY
31242: PPUSH
31243: CALL_OW 313
31247: PUSH
31248: LD_VAR 0 12
31252: PUSH
31253: LD_INT 1
31255: ARRAY
31256: PPUSH
31257: CALL_OW 266
31261: PUSH
31262: LD_INT 32
31264: PUSH
31265: LD_INT 31
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: IN
31272: AND
31273: PUSH
31274: LD_VAR 0 12
31278: PUSH
31279: LD_INT 1
31281: ARRAY
31282: PPUSH
31283: CALL_OW 313
31287: PUSH
31288: LD_INT 6
31290: EQUAL
31291: OR
31292: IFFALSE 31312
// f := Delete ( f , 1 ) ;
31294: LD_ADDR_VAR 0 12
31298: PUSH
31299: LD_VAR 0 12
31303: PPUSH
31304: LD_INT 1
31306: PPUSH
31307: CALL_OW 3
31311: ST_TO_ADDR
// if not f then
31312: LD_VAR 0 12
31316: NOT
31317: IFFALSE 31335
// begin x := x + 2 ;
31319: LD_ADDR_VAR 0 13
31323: PUSH
31324: LD_VAR 0 13
31328: PUSH
31329: LD_INT 2
31331: PLUS
31332: ST_TO_ADDR
// continue ;
31333: GO 31133
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31335: LD_VAR 0 12
31339: PUSH
31340: LD_INT 1
31342: ARRAY
31343: PPUSH
31344: CALL_OW 266
31348: PUSH
31349: LD_INT 5
31351: EQUAL
31352: IFFALSE 31426
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31354: LD_VAR 0 12
31358: PUSH
31359: LD_INT 1
31361: ARRAY
31362: PPUSH
31363: CALL_OW 313
31367: PUSH
31368: LD_INT 3
31370: LESS
31371: IFFALSE 31407
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31373: LD_INT 0
31375: PPUSH
31376: LD_INT 5
31378: PUSH
31379: LD_INT 8
31381: PUSH
31382: LD_INT 9
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: LIST
31389: PUSH
31390: LD_VAR 0 17
31394: ARRAY
31395: PPUSH
31396: LD_VAR 0 4
31400: PPUSH
31401: CALL_OW 380
31405: GO 31424
// PrepareHuman ( false , i , skill ) ;
31407: LD_INT 0
31409: PPUSH
31410: LD_VAR 0 8
31414: PPUSH
31415: LD_VAR 0 4
31419: PPUSH
31420: CALL_OW 380
// end else
31424: GO 31443
// PrepareHuman ( false , i , skill ) ;
31426: LD_INT 0
31428: PPUSH
31429: LD_VAR 0 8
31433: PPUSH
31434: LD_VAR 0 4
31438: PPUSH
31439: CALL_OW 380
// un := CreateHuman ;
31443: LD_ADDR_VAR 0 14
31447: PUSH
31448: CALL_OW 44
31452: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31453: LD_ADDR_VAR 0 7
31457: PUSH
31458: LD_VAR 0 7
31462: PPUSH
31463: LD_INT 1
31465: PPUSH
31466: LD_VAR 0 14
31470: PPUSH
31471: CALL_OW 2
31475: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31476: LD_VAR 0 14
31480: PPUSH
31481: LD_VAR 0 12
31485: PUSH
31486: LD_INT 1
31488: ARRAY
31489: PPUSH
31490: CALL_OW 52
// end ;
31494: GO 31133
31496: POP
31497: POP
// end ;
31498: GO 30435
31500: POP
31501: POP
// result := result ^ buildings ;
31502: LD_ADDR_VAR 0 7
31506: PUSH
31507: LD_VAR 0 7
31511: PUSH
31512: LD_VAR 0 18
31516: ADD
31517: ST_TO_ADDR
// end else
31518: GO 31661
// begin for i = 1 to personel do
31520: LD_ADDR_VAR 0 8
31524: PUSH
31525: DOUBLE
31526: LD_INT 1
31528: DEC
31529: ST_TO_ADDR
31530: LD_VAR 0 6
31534: PUSH
31535: FOR_TO
31536: IFFALSE 31659
// begin if i > 4 then
31538: LD_VAR 0 8
31542: PUSH
31543: LD_INT 4
31545: GREATER
31546: IFFALSE 31550
// break ;
31548: GO 31659
// x := personel [ i ] ;
31550: LD_ADDR_VAR 0 13
31554: PUSH
31555: LD_VAR 0 6
31559: PUSH
31560: LD_VAR 0 8
31564: ARRAY
31565: ST_TO_ADDR
// if x = - 1 then
31566: LD_VAR 0 13
31570: PUSH
31571: LD_INT 1
31573: NEG
31574: EQUAL
31575: IFFALSE 31579
// continue ;
31577: GO 31535
// PrepareHuman ( false , i , skill ) ;
31579: LD_INT 0
31581: PPUSH
31582: LD_VAR 0 8
31586: PPUSH
31587: LD_VAR 0 4
31591: PPUSH
31592: CALL_OW 380
// un := CreateHuman ;
31596: LD_ADDR_VAR 0 14
31600: PUSH
31601: CALL_OW 44
31605: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31606: LD_VAR 0 14
31610: PPUSH
31611: LD_VAR 0 1
31615: PPUSH
31616: CALL_OW 250
31620: PPUSH
31621: LD_VAR 0 1
31625: PPUSH
31626: CALL_OW 251
31630: PPUSH
31631: LD_INT 10
31633: PPUSH
31634: LD_INT 0
31636: PPUSH
31637: CALL_OW 50
// result := result ^ un ;
31641: LD_ADDR_VAR 0 7
31645: PUSH
31646: LD_VAR 0 7
31650: PUSH
31651: LD_VAR 0 14
31655: ADD
31656: ST_TO_ADDR
// end ;
31657: GO 31535
31659: POP
31660: POP
// end ; end ;
31661: LD_VAR 0 7
31665: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31666: LD_INT 0
31668: PPUSH
31669: PPUSH
31670: PPUSH
31671: PPUSH
31672: PPUSH
31673: PPUSH
31674: PPUSH
31675: PPUSH
31676: PPUSH
31677: PPUSH
31678: PPUSH
31679: PPUSH
31680: PPUSH
31681: PPUSH
31682: PPUSH
31683: PPUSH
// result := false ;
31684: LD_ADDR_VAR 0 3
31688: PUSH
31689: LD_INT 0
31691: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31692: LD_VAR 0 1
31696: NOT
31697: PUSH
31698: LD_VAR 0 1
31702: PPUSH
31703: CALL_OW 266
31707: PUSH
31708: LD_INT 32
31710: PUSH
31711: LD_INT 33
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: IN
31718: NOT
31719: OR
31720: IFFALSE 31724
// exit ;
31722: GO 32860
// nat := GetNation ( tower ) ;
31724: LD_ADDR_VAR 0 12
31728: PUSH
31729: LD_VAR 0 1
31733: PPUSH
31734: CALL_OW 248
31738: ST_TO_ADDR
// side := GetSide ( tower ) ;
31739: LD_ADDR_VAR 0 16
31743: PUSH
31744: LD_VAR 0 1
31748: PPUSH
31749: CALL_OW 255
31753: ST_TO_ADDR
// x := GetX ( tower ) ;
31754: LD_ADDR_VAR 0 10
31758: PUSH
31759: LD_VAR 0 1
31763: PPUSH
31764: CALL_OW 250
31768: ST_TO_ADDR
// y := GetY ( tower ) ;
31769: LD_ADDR_VAR 0 11
31773: PUSH
31774: LD_VAR 0 1
31778: PPUSH
31779: CALL_OW 251
31783: ST_TO_ADDR
// if not x or not y then
31784: LD_VAR 0 10
31788: NOT
31789: PUSH
31790: LD_VAR 0 11
31794: NOT
31795: OR
31796: IFFALSE 31800
// exit ;
31798: GO 32860
// weapon := 0 ;
31800: LD_ADDR_VAR 0 18
31804: PUSH
31805: LD_INT 0
31807: ST_TO_ADDR
// fac_list := [ ] ;
31808: LD_ADDR_VAR 0 17
31812: PUSH
31813: EMPTY
31814: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31815: LD_ADDR_VAR 0 6
31819: PUSH
31820: LD_VAR 0 1
31824: PPUSH
31825: CALL_OW 274
31829: PPUSH
31830: LD_VAR 0 2
31834: PPUSH
31835: CALL 29438 0 2
31839: PPUSH
31840: LD_INT 30
31842: PUSH
31843: LD_INT 3
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PPUSH
31850: CALL_OW 72
31854: ST_TO_ADDR
// if not factories then
31855: LD_VAR 0 6
31859: NOT
31860: IFFALSE 31864
// exit ;
31862: GO 32860
// for i in factories do
31864: LD_ADDR_VAR 0 8
31868: PUSH
31869: LD_VAR 0 6
31873: PUSH
31874: FOR_IN
31875: IFFALSE 31900
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31877: LD_ADDR_VAR 0 17
31881: PUSH
31882: LD_VAR 0 17
31886: PUSH
31887: LD_VAR 0 8
31891: PPUSH
31892: CALL_OW 478
31896: UNION
31897: ST_TO_ADDR
31898: GO 31874
31900: POP
31901: POP
// if not fac_list then
31902: LD_VAR 0 17
31906: NOT
31907: IFFALSE 31911
// exit ;
31909: GO 32860
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31911: LD_ADDR_VAR 0 5
31915: PUSH
31916: LD_INT 4
31918: PUSH
31919: LD_INT 5
31921: PUSH
31922: LD_INT 9
31924: PUSH
31925: LD_INT 10
31927: PUSH
31928: LD_INT 6
31930: PUSH
31931: LD_INT 7
31933: PUSH
31934: LD_INT 11
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 27
31948: PUSH
31949: LD_INT 28
31951: PUSH
31952: LD_INT 26
31954: PUSH
31955: LD_INT 30
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 43
31966: PUSH
31967: LD_INT 44
31969: PUSH
31970: LD_INT 46
31972: PUSH
31973: LD_INT 45
31975: PUSH
31976: LD_INT 47
31978: PUSH
31979: LD_INT 49
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: PUSH
31995: LD_VAR 0 12
31999: ARRAY
32000: ST_TO_ADDR
// for i in list do
32001: LD_ADDR_VAR 0 8
32005: PUSH
32006: LD_VAR 0 5
32010: PUSH
32011: FOR_IN
32012: IFFALSE 32045
// if not i in fac_list then
32014: LD_VAR 0 8
32018: PUSH
32019: LD_VAR 0 17
32023: IN
32024: NOT
32025: IFFALSE 32043
// list := list diff i ;
32027: LD_ADDR_VAR 0 5
32031: PUSH
32032: LD_VAR 0 5
32036: PUSH
32037: LD_VAR 0 8
32041: DIFF
32042: ST_TO_ADDR
32043: GO 32011
32045: POP
32046: POP
// if not list then
32047: LD_VAR 0 5
32051: NOT
32052: IFFALSE 32056
// exit ;
32054: GO 32860
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32056: LD_VAR 0 12
32060: PUSH
32061: LD_INT 3
32063: EQUAL
32064: PUSH
32065: LD_INT 49
32067: PUSH
32068: LD_VAR 0 5
32072: IN
32073: AND
32074: PUSH
32075: LD_INT 31
32077: PPUSH
32078: LD_VAR 0 16
32082: PPUSH
32083: CALL_OW 321
32087: PUSH
32088: LD_INT 2
32090: EQUAL
32091: AND
32092: IFFALSE 32152
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32094: LD_INT 22
32096: PUSH
32097: LD_VAR 0 16
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 35
32108: PUSH
32109: LD_INT 49
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 91
32118: PUSH
32119: LD_VAR 0 1
32123: PUSH
32124: LD_INT 10
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: LIST
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: LIST
32136: PPUSH
32137: CALL_OW 69
32141: NOT
32142: IFFALSE 32152
// weapon := ru_time_lapser ;
32144: LD_ADDR_VAR 0 18
32148: PUSH
32149: LD_INT 49
32151: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32152: LD_VAR 0 12
32156: PUSH
32157: LD_INT 1
32159: PUSH
32160: LD_INT 2
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: IN
32167: PUSH
32168: LD_INT 11
32170: PUSH
32171: LD_VAR 0 5
32175: IN
32176: PUSH
32177: LD_INT 30
32179: PUSH
32180: LD_VAR 0 5
32184: IN
32185: OR
32186: AND
32187: PUSH
32188: LD_INT 6
32190: PPUSH
32191: LD_VAR 0 16
32195: PPUSH
32196: CALL_OW 321
32200: PUSH
32201: LD_INT 2
32203: EQUAL
32204: AND
32205: IFFALSE 32370
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32207: LD_INT 22
32209: PUSH
32210: LD_VAR 0 16
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: LD_INT 35
32224: PUSH
32225: LD_INT 11
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 35
32234: PUSH
32235: LD_INT 30
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 91
32249: PUSH
32250: LD_VAR 0 1
32254: PUSH
32255: LD_INT 18
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: LIST
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: LIST
32267: PPUSH
32268: CALL_OW 69
32272: NOT
32273: PUSH
32274: LD_INT 22
32276: PUSH
32277: LD_VAR 0 16
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 2
32288: PUSH
32289: LD_INT 30
32291: PUSH
32292: LD_INT 32
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 30
32301: PUSH
32302: LD_INT 33
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 91
32316: PUSH
32317: LD_VAR 0 1
32321: PUSH
32322: LD_INT 12
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: LIST
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: PUSH
32335: EMPTY
32336: LIST
32337: PPUSH
32338: CALL_OW 69
32342: PUSH
32343: LD_INT 2
32345: GREATER
32346: AND
32347: IFFALSE 32370
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32349: LD_ADDR_VAR 0 18
32353: PUSH
32354: LD_INT 11
32356: PUSH
32357: LD_INT 30
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_VAR 0 12
32368: ARRAY
32369: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32370: LD_VAR 0 18
32374: NOT
32375: PUSH
32376: LD_INT 40
32378: PPUSH
32379: LD_VAR 0 16
32383: PPUSH
32384: CALL_OW 321
32388: PUSH
32389: LD_INT 2
32391: EQUAL
32392: AND
32393: PUSH
32394: LD_INT 7
32396: PUSH
32397: LD_VAR 0 5
32401: IN
32402: PUSH
32403: LD_INT 28
32405: PUSH
32406: LD_VAR 0 5
32410: IN
32411: OR
32412: PUSH
32413: LD_INT 45
32415: PUSH
32416: LD_VAR 0 5
32420: IN
32421: OR
32422: AND
32423: IFFALSE 32677
// begin hex := GetHexInfo ( x , y ) ;
32425: LD_ADDR_VAR 0 4
32429: PUSH
32430: LD_VAR 0 10
32434: PPUSH
32435: LD_VAR 0 11
32439: PPUSH
32440: CALL_OW 546
32444: ST_TO_ADDR
// if hex [ 1 ] then
32445: LD_VAR 0 4
32449: PUSH
32450: LD_INT 1
32452: ARRAY
32453: IFFALSE 32457
// exit ;
32455: GO 32860
// height := hex [ 2 ] ;
32457: LD_ADDR_VAR 0 15
32461: PUSH
32462: LD_VAR 0 4
32466: PUSH
32467: LD_INT 2
32469: ARRAY
32470: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32471: LD_ADDR_VAR 0 14
32475: PUSH
32476: LD_INT 0
32478: PUSH
32479: LD_INT 2
32481: PUSH
32482: LD_INT 3
32484: PUSH
32485: LD_INT 5
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: ST_TO_ADDR
// for i in tmp do
32494: LD_ADDR_VAR 0 8
32498: PUSH
32499: LD_VAR 0 14
32503: PUSH
32504: FOR_IN
32505: IFFALSE 32675
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32507: LD_ADDR_VAR 0 9
32511: PUSH
32512: LD_VAR 0 10
32516: PPUSH
32517: LD_VAR 0 8
32521: PPUSH
32522: LD_INT 5
32524: PPUSH
32525: CALL_OW 272
32529: PUSH
32530: LD_VAR 0 11
32534: PPUSH
32535: LD_VAR 0 8
32539: PPUSH
32540: LD_INT 5
32542: PPUSH
32543: CALL_OW 273
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32552: LD_VAR 0 9
32556: PUSH
32557: LD_INT 1
32559: ARRAY
32560: PPUSH
32561: LD_VAR 0 9
32565: PUSH
32566: LD_INT 2
32568: ARRAY
32569: PPUSH
32570: CALL_OW 488
32574: IFFALSE 32673
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32576: LD_ADDR_VAR 0 4
32580: PUSH
32581: LD_VAR 0 9
32585: PUSH
32586: LD_INT 1
32588: ARRAY
32589: PPUSH
32590: LD_VAR 0 9
32594: PUSH
32595: LD_INT 2
32597: ARRAY
32598: PPUSH
32599: CALL_OW 546
32603: ST_TO_ADDR
// if hex [ 1 ] then
32604: LD_VAR 0 4
32608: PUSH
32609: LD_INT 1
32611: ARRAY
32612: IFFALSE 32616
// continue ;
32614: GO 32504
// h := hex [ 2 ] ;
32616: LD_ADDR_VAR 0 13
32620: PUSH
32621: LD_VAR 0 4
32625: PUSH
32626: LD_INT 2
32628: ARRAY
32629: ST_TO_ADDR
// if h + 7 < height then
32630: LD_VAR 0 13
32634: PUSH
32635: LD_INT 7
32637: PLUS
32638: PUSH
32639: LD_VAR 0 15
32643: LESS
32644: IFFALSE 32673
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32646: LD_ADDR_VAR 0 18
32650: PUSH
32651: LD_INT 7
32653: PUSH
32654: LD_INT 28
32656: PUSH
32657: LD_INT 45
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: LIST
32664: PUSH
32665: LD_VAR 0 12
32669: ARRAY
32670: ST_TO_ADDR
// break ;
32671: GO 32675
// end ; end ; end ;
32673: GO 32504
32675: POP
32676: POP
// end ; if not weapon then
32677: LD_VAR 0 18
32681: NOT
32682: IFFALSE 32742
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32684: LD_ADDR_VAR 0 5
32688: PUSH
32689: LD_VAR 0 5
32693: PUSH
32694: LD_INT 11
32696: PUSH
32697: LD_INT 30
32699: PUSH
32700: LD_INT 49
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: LIST
32707: DIFF
32708: ST_TO_ADDR
// if not list then
32709: LD_VAR 0 5
32713: NOT
32714: IFFALSE 32718
// exit ;
32716: GO 32860
// weapon := list [ rand ( 1 , list ) ] ;
32718: LD_ADDR_VAR 0 18
32722: PUSH
32723: LD_VAR 0 5
32727: PUSH
32728: LD_INT 1
32730: PPUSH
32731: LD_VAR 0 5
32735: PPUSH
32736: CALL_OW 12
32740: ARRAY
32741: ST_TO_ADDR
// end ; if weapon then
32742: LD_VAR 0 18
32746: IFFALSE 32860
// begin tmp := CostOfWeapon ( weapon ) ;
32748: LD_ADDR_VAR 0 14
32752: PUSH
32753: LD_VAR 0 18
32757: PPUSH
32758: CALL_OW 451
32762: ST_TO_ADDR
// j := GetBase ( tower ) ;
32763: LD_ADDR_VAR 0 9
32767: PUSH
32768: LD_VAR 0 1
32772: PPUSH
32773: CALL_OW 274
32777: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32778: LD_VAR 0 9
32782: PPUSH
32783: LD_INT 1
32785: PPUSH
32786: CALL_OW 275
32790: PUSH
32791: LD_VAR 0 14
32795: PUSH
32796: LD_INT 1
32798: ARRAY
32799: GREATEREQUAL
32800: PUSH
32801: LD_VAR 0 9
32805: PPUSH
32806: LD_INT 2
32808: PPUSH
32809: CALL_OW 275
32813: PUSH
32814: LD_VAR 0 14
32818: PUSH
32819: LD_INT 2
32821: ARRAY
32822: GREATEREQUAL
32823: AND
32824: PUSH
32825: LD_VAR 0 9
32829: PPUSH
32830: LD_INT 3
32832: PPUSH
32833: CALL_OW 275
32837: PUSH
32838: LD_VAR 0 14
32842: PUSH
32843: LD_INT 3
32845: ARRAY
32846: GREATEREQUAL
32847: AND
32848: IFFALSE 32860
// result := weapon ;
32850: LD_ADDR_VAR 0 3
32854: PUSH
32855: LD_VAR 0 18
32859: ST_TO_ADDR
// end ; end ;
32860: LD_VAR 0 3
32864: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32865: LD_INT 0
32867: PPUSH
32868: PPUSH
// result := true ;
32869: LD_ADDR_VAR 0 3
32873: PUSH
32874: LD_INT 1
32876: ST_TO_ADDR
// if array1 = array2 then
32877: LD_VAR 0 1
32881: PUSH
32882: LD_VAR 0 2
32886: EQUAL
32887: IFFALSE 32947
// begin for i = 1 to array1 do
32889: LD_ADDR_VAR 0 4
32893: PUSH
32894: DOUBLE
32895: LD_INT 1
32897: DEC
32898: ST_TO_ADDR
32899: LD_VAR 0 1
32903: PUSH
32904: FOR_TO
32905: IFFALSE 32943
// if array1 [ i ] <> array2 [ i ] then
32907: LD_VAR 0 1
32911: PUSH
32912: LD_VAR 0 4
32916: ARRAY
32917: PUSH
32918: LD_VAR 0 2
32922: PUSH
32923: LD_VAR 0 4
32927: ARRAY
32928: NONEQUAL
32929: IFFALSE 32941
// begin result := false ;
32931: LD_ADDR_VAR 0 3
32935: PUSH
32936: LD_INT 0
32938: ST_TO_ADDR
// break ;
32939: GO 32943
// end ;
32941: GO 32904
32943: POP
32944: POP
// end else
32945: GO 32955
// result := false ;
32947: LD_ADDR_VAR 0 3
32951: PUSH
32952: LD_INT 0
32954: ST_TO_ADDR
// end ;
32955: LD_VAR 0 3
32959: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32960: LD_INT 0
32962: PPUSH
32963: PPUSH
32964: PPUSH
// pom := GetBase ( fac ) ;
32965: LD_ADDR_VAR 0 5
32969: PUSH
32970: LD_VAR 0 1
32974: PPUSH
32975: CALL_OW 274
32979: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32980: LD_ADDR_VAR 0 4
32984: PUSH
32985: LD_VAR 0 2
32989: PUSH
32990: LD_INT 1
32992: ARRAY
32993: PPUSH
32994: LD_VAR 0 2
32998: PUSH
32999: LD_INT 2
33001: ARRAY
33002: PPUSH
33003: LD_VAR 0 2
33007: PUSH
33008: LD_INT 3
33010: ARRAY
33011: PPUSH
33012: LD_VAR 0 2
33016: PUSH
33017: LD_INT 4
33019: ARRAY
33020: PPUSH
33021: CALL_OW 449
33025: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33026: LD_ADDR_VAR 0 3
33030: PUSH
33031: LD_VAR 0 5
33035: PPUSH
33036: LD_INT 1
33038: PPUSH
33039: CALL_OW 275
33043: PUSH
33044: LD_VAR 0 4
33048: PUSH
33049: LD_INT 1
33051: ARRAY
33052: GREATEREQUAL
33053: PUSH
33054: LD_VAR 0 5
33058: PPUSH
33059: LD_INT 2
33061: PPUSH
33062: CALL_OW 275
33066: PUSH
33067: LD_VAR 0 4
33071: PUSH
33072: LD_INT 2
33074: ARRAY
33075: GREATEREQUAL
33076: AND
33077: PUSH
33078: LD_VAR 0 5
33082: PPUSH
33083: LD_INT 3
33085: PPUSH
33086: CALL_OW 275
33090: PUSH
33091: LD_VAR 0 4
33095: PUSH
33096: LD_INT 3
33098: ARRAY
33099: GREATEREQUAL
33100: AND
33101: ST_TO_ADDR
// end ;
33102: LD_VAR 0 3
33106: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33107: LD_INT 0
33109: PPUSH
33110: PPUSH
33111: PPUSH
33112: PPUSH
// pom := GetBase ( building ) ;
33113: LD_ADDR_VAR 0 3
33117: PUSH
33118: LD_VAR 0 1
33122: PPUSH
33123: CALL_OW 274
33127: ST_TO_ADDR
// if not pom then
33128: LD_VAR 0 3
33132: NOT
33133: IFFALSE 33137
// exit ;
33135: GO 33307
// btype := GetBType ( building ) ;
33137: LD_ADDR_VAR 0 5
33141: PUSH
33142: LD_VAR 0 1
33146: PPUSH
33147: CALL_OW 266
33151: ST_TO_ADDR
// if btype = b_armoury then
33152: LD_VAR 0 5
33156: PUSH
33157: LD_INT 4
33159: EQUAL
33160: IFFALSE 33170
// btype := b_barracks ;
33162: LD_ADDR_VAR 0 5
33166: PUSH
33167: LD_INT 5
33169: ST_TO_ADDR
// if btype = b_depot then
33170: LD_VAR 0 5
33174: PUSH
33175: LD_INT 0
33177: EQUAL
33178: IFFALSE 33188
// btype := b_warehouse ;
33180: LD_ADDR_VAR 0 5
33184: PUSH
33185: LD_INT 1
33187: ST_TO_ADDR
// if btype = b_workshop then
33188: LD_VAR 0 5
33192: PUSH
33193: LD_INT 2
33195: EQUAL
33196: IFFALSE 33206
// btype := b_factory ;
33198: LD_ADDR_VAR 0 5
33202: PUSH
33203: LD_INT 3
33205: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33206: LD_ADDR_VAR 0 4
33210: PUSH
33211: LD_VAR 0 5
33215: PPUSH
33216: LD_VAR 0 1
33220: PPUSH
33221: CALL_OW 248
33225: PPUSH
33226: CALL_OW 450
33230: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33231: LD_ADDR_VAR 0 2
33235: PUSH
33236: LD_VAR 0 3
33240: PPUSH
33241: LD_INT 1
33243: PPUSH
33244: CALL_OW 275
33248: PUSH
33249: LD_VAR 0 4
33253: PUSH
33254: LD_INT 1
33256: ARRAY
33257: GREATEREQUAL
33258: PUSH
33259: LD_VAR 0 3
33263: PPUSH
33264: LD_INT 2
33266: PPUSH
33267: CALL_OW 275
33271: PUSH
33272: LD_VAR 0 4
33276: PUSH
33277: LD_INT 2
33279: ARRAY
33280: GREATEREQUAL
33281: AND
33282: PUSH
33283: LD_VAR 0 3
33287: PPUSH
33288: LD_INT 3
33290: PPUSH
33291: CALL_OW 275
33295: PUSH
33296: LD_VAR 0 4
33300: PUSH
33301: LD_INT 3
33303: ARRAY
33304: GREATEREQUAL
33305: AND
33306: ST_TO_ADDR
// end ;
33307: LD_VAR 0 2
33311: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33312: LD_INT 0
33314: PPUSH
33315: PPUSH
33316: PPUSH
// pom := GetBase ( building ) ;
33317: LD_ADDR_VAR 0 4
33321: PUSH
33322: LD_VAR 0 1
33326: PPUSH
33327: CALL_OW 274
33331: ST_TO_ADDR
// if not pom then
33332: LD_VAR 0 4
33336: NOT
33337: IFFALSE 33341
// exit ;
33339: GO 33442
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33341: LD_ADDR_VAR 0 5
33345: PUSH
33346: LD_VAR 0 2
33350: PPUSH
33351: LD_VAR 0 1
33355: PPUSH
33356: CALL_OW 248
33360: PPUSH
33361: CALL_OW 450
33365: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33366: LD_ADDR_VAR 0 3
33370: PUSH
33371: LD_VAR 0 4
33375: PPUSH
33376: LD_INT 1
33378: PPUSH
33379: CALL_OW 275
33383: PUSH
33384: LD_VAR 0 5
33388: PUSH
33389: LD_INT 1
33391: ARRAY
33392: GREATEREQUAL
33393: PUSH
33394: LD_VAR 0 4
33398: PPUSH
33399: LD_INT 2
33401: PPUSH
33402: CALL_OW 275
33406: PUSH
33407: LD_VAR 0 5
33411: PUSH
33412: LD_INT 2
33414: ARRAY
33415: GREATEREQUAL
33416: AND
33417: PUSH
33418: LD_VAR 0 4
33422: PPUSH
33423: LD_INT 3
33425: PPUSH
33426: CALL_OW 275
33430: PUSH
33431: LD_VAR 0 5
33435: PUSH
33436: LD_INT 3
33438: ARRAY
33439: GREATEREQUAL
33440: AND
33441: ST_TO_ADDR
// end ;
33442: LD_VAR 0 3
33446: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33447: LD_INT 0
33449: PPUSH
33450: PPUSH
33451: PPUSH
33452: PPUSH
33453: PPUSH
33454: PPUSH
33455: PPUSH
33456: PPUSH
33457: PPUSH
33458: PPUSH
// result := false ;
33459: LD_ADDR_VAR 0 6
33463: PUSH
33464: LD_INT 0
33466: ST_TO_ADDR
// if not base or not btype or not x or not y then
33467: LD_VAR 0 1
33471: NOT
33472: PUSH
33473: LD_VAR 0 2
33477: NOT
33478: OR
33479: PUSH
33480: LD_VAR 0 3
33484: NOT
33485: OR
33486: PUSH
33487: LD_VAR 0 4
33491: NOT
33492: OR
33493: IFFALSE 33497
// exit ;
33495: GO 34106
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33497: LD_ADDR_VAR 0 12
33501: PUSH
33502: LD_VAR 0 2
33506: PPUSH
33507: LD_VAR 0 3
33511: PPUSH
33512: LD_VAR 0 4
33516: PPUSH
33517: LD_VAR 0 5
33521: PPUSH
33522: LD_VAR 0 1
33526: PUSH
33527: LD_INT 1
33529: ARRAY
33530: PPUSH
33531: CALL_OW 248
33535: PPUSH
33536: LD_INT 0
33538: PPUSH
33539: CALL 34943 0 6
33543: ST_TO_ADDR
// if not hexes then
33544: LD_VAR 0 12
33548: NOT
33549: IFFALSE 33553
// exit ;
33551: GO 34106
// for i = 1 to hexes do
33553: LD_ADDR_VAR 0 7
33557: PUSH
33558: DOUBLE
33559: LD_INT 1
33561: DEC
33562: ST_TO_ADDR
33563: LD_VAR 0 12
33567: PUSH
33568: FOR_TO
33569: IFFALSE 34104
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33571: LD_ADDR_VAR 0 11
33575: PUSH
33576: LD_VAR 0 12
33580: PUSH
33581: LD_VAR 0 7
33585: ARRAY
33586: PUSH
33587: LD_INT 1
33589: ARRAY
33590: PPUSH
33591: LD_VAR 0 12
33595: PUSH
33596: LD_VAR 0 7
33600: ARRAY
33601: PUSH
33602: LD_INT 2
33604: ARRAY
33605: PPUSH
33606: CALL_OW 428
33610: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33611: LD_VAR 0 12
33615: PUSH
33616: LD_VAR 0 7
33620: ARRAY
33621: PUSH
33622: LD_INT 1
33624: ARRAY
33625: PPUSH
33626: LD_VAR 0 12
33630: PUSH
33631: LD_VAR 0 7
33635: ARRAY
33636: PUSH
33637: LD_INT 2
33639: ARRAY
33640: PPUSH
33641: CALL_OW 351
33645: PUSH
33646: LD_VAR 0 12
33650: PUSH
33651: LD_VAR 0 7
33655: ARRAY
33656: PUSH
33657: LD_INT 1
33659: ARRAY
33660: PPUSH
33661: LD_VAR 0 12
33665: PUSH
33666: LD_VAR 0 7
33670: ARRAY
33671: PUSH
33672: LD_INT 2
33674: ARRAY
33675: PPUSH
33676: CALL_OW 488
33680: NOT
33681: OR
33682: PUSH
33683: LD_VAR 0 11
33687: PPUSH
33688: CALL_OW 247
33692: PUSH
33693: LD_INT 3
33695: EQUAL
33696: OR
33697: IFFALSE 33703
// exit ;
33699: POP
33700: POP
33701: GO 34106
// if not tmp or not tmp in base then
33703: LD_VAR 0 11
33707: NOT
33708: PUSH
33709: LD_VAR 0 11
33713: PUSH
33714: LD_VAR 0 1
33718: IN
33719: NOT
33720: OR
33721: IFFALSE 33725
// continue ;
33723: GO 33568
// result := true ;
33725: LD_ADDR_VAR 0 6
33729: PUSH
33730: LD_INT 1
33732: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33733: LD_ADDR_VAR 0 15
33737: PUSH
33738: LD_VAR 0 1
33742: PPUSH
33743: LD_INT 22
33745: PUSH
33746: LD_VAR 0 11
33750: PPUSH
33751: CALL_OW 255
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 2
33762: PUSH
33763: LD_INT 30
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 30
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: LIST
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PPUSH
33792: CALL_OW 72
33796: ST_TO_ADDR
// if dep then
33797: LD_VAR 0 15
33801: IFFALSE 33937
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33803: LD_ADDR_VAR 0 14
33807: PUSH
33808: LD_VAR 0 15
33812: PUSH
33813: LD_INT 1
33815: ARRAY
33816: PPUSH
33817: CALL_OW 250
33821: PPUSH
33822: LD_VAR 0 15
33826: PUSH
33827: LD_INT 1
33829: ARRAY
33830: PPUSH
33831: CALL_OW 254
33835: PPUSH
33836: LD_INT 5
33838: PPUSH
33839: CALL_OW 272
33843: PUSH
33844: LD_VAR 0 15
33848: PUSH
33849: LD_INT 1
33851: ARRAY
33852: PPUSH
33853: CALL_OW 251
33857: PPUSH
33858: LD_VAR 0 15
33862: PUSH
33863: LD_INT 1
33865: ARRAY
33866: PPUSH
33867: CALL_OW 254
33871: PPUSH
33872: LD_INT 5
33874: PPUSH
33875: CALL_OW 273
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33884: LD_VAR 0 14
33888: PUSH
33889: LD_INT 1
33891: ARRAY
33892: PPUSH
33893: LD_VAR 0 14
33897: PUSH
33898: LD_INT 2
33900: ARRAY
33901: PPUSH
33902: CALL_OW 488
33906: IFFALSE 33937
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33908: LD_VAR 0 11
33912: PPUSH
33913: LD_VAR 0 14
33917: PUSH
33918: LD_INT 1
33920: ARRAY
33921: PPUSH
33922: LD_VAR 0 14
33926: PUSH
33927: LD_INT 2
33929: ARRAY
33930: PPUSH
33931: CALL_OW 111
// continue ;
33935: GO 33568
// end ; end ; r := GetDir ( tmp ) ;
33937: LD_ADDR_VAR 0 13
33941: PUSH
33942: LD_VAR 0 11
33946: PPUSH
33947: CALL_OW 254
33951: ST_TO_ADDR
// if r = 5 then
33952: LD_VAR 0 13
33956: PUSH
33957: LD_INT 5
33959: EQUAL
33960: IFFALSE 33970
// r := 0 ;
33962: LD_ADDR_VAR 0 13
33966: PUSH
33967: LD_INT 0
33969: ST_TO_ADDR
// for j = r to 5 do
33970: LD_ADDR_VAR 0 8
33974: PUSH
33975: DOUBLE
33976: LD_VAR 0 13
33980: DEC
33981: ST_TO_ADDR
33982: LD_INT 5
33984: PUSH
33985: FOR_TO
33986: IFFALSE 34100
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33988: LD_ADDR_VAR 0 9
33992: PUSH
33993: LD_VAR 0 11
33997: PPUSH
33998: CALL_OW 250
34002: PPUSH
34003: LD_VAR 0 8
34007: PPUSH
34008: LD_INT 2
34010: PPUSH
34011: CALL_OW 272
34015: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34016: LD_ADDR_VAR 0 10
34020: PUSH
34021: LD_VAR 0 11
34025: PPUSH
34026: CALL_OW 251
34030: PPUSH
34031: LD_VAR 0 8
34035: PPUSH
34036: LD_INT 2
34038: PPUSH
34039: CALL_OW 273
34043: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34044: LD_VAR 0 9
34048: PPUSH
34049: LD_VAR 0 10
34053: PPUSH
34054: CALL_OW 488
34058: PUSH
34059: LD_VAR 0 9
34063: PPUSH
34064: LD_VAR 0 10
34068: PPUSH
34069: CALL_OW 428
34073: NOT
34074: AND
34075: IFFALSE 34098
// begin ComMoveXY ( tmp , _x , _y ) ;
34077: LD_VAR 0 11
34081: PPUSH
34082: LD_VAR 0 9
34086: PPUSH
34087: LD_VAR 0 10
34091: PPUSH
34092: CALL_OW 111
// break ;
34096: GO 34100
// end ; end ;
34098: GO 33985
34100: POP
34101: POP
// end ;
34102: GO 33568
34104: POP
34105: POP
// end ;
34106: LD_VAR 0 6
34110: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34111: LD_INT 0
34113: PPUSH
34114: PPUSH
34115: PPUSH
34116: PPUSH
34117: PPUSH
34118: PPUSH
34119: PPUSH
34120: PPUSH
34121: PPUSH
34122: PPUSH
// result := false ;
34123: LD_ADDR_VAR 0 6
34127: PUSH
34128: LD_INT 0
34130: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34131: LD_VAR 0 1
34135: NOT
34136: PUSH
34137: LD_VAR 0 1
34141: PPUSH
34142: CALL_OW 266
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: IN
34157: NOT
34158: OR
34159: PUSH
34160: LD_VAR 0 2
34164: NOT
34165: OR
34166: PUSH
34167: LD_VAR 0 5
34171: PUSH
34172: LD_INT 0
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: LD_INT 2
34180: PUSH
34181: LD_INT 3
34183: PUSH
34184: LD_INT 4
34186: PUSH
34187: LD_INT 5
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: IN
34198: NOT
34199: OR
34200: PUSH
34201: LD_VAR 0 3
34205: PPUSH
34206: LD_VAR 0 4
34210: PPUSH
34211: CALL_OW 488
34215: NOT
34216: OR
34217: IFFALSE 34221
// exit ;
34219: GO 34938
// pom := GetBase ( depot ) ;
34221: LD_ADDR_VAR 0 10
34225: PUSH
34226: LD_VAR 0 1
34230: PPUSH
34231: CALL_OW 274
34235: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34236: LD_ADDR_VAR 0 11
34240: PUSH
34241: LD_VAR 0 2
34245: PPUSH
34246: LD_VAR 0 1
34250: PPUSH
34251: CALL_OW 248
34255: PPUSH
34256: CALL_OW 450
34260: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34261: LD_VAR 0 10
34265: PPUSH
34266: LD_INT 1
34268: PPUSH
34269: CALL_OW 275
34273: PUSH
34274: LD_VAR 0 11
34278: PUSH
34279: LD_INT 1
34281: ARRAY
34282: GREATEREQUAL
34283: PUSH
34284: LD_VAR 0 10
34288: PPUSH
34289: LD_INT 2
34291: PPUSH
34292: CALL_OW 275
34296: PUSH
34297: LD_VAR 0 11
34301: PUSH
34302: LD_INT 2
34304: ARRAY
34305: GREATEREQUAL
34306: AND
34307: PUSH
34308: LD_VAR 0 10
34312: PPUSH
34313: LD_INT 3
34315: PPUSH
34316: CALL_OW 275
34320: PUSH
34321: LD_VAR 0 11
34325: PUSH
34326: LD_INT 3
34328: ARRAY
34329: GREATEREQUAL
34330: AND
34331: NOT
34332: IFFALSE 34336
// exit ;
34334: GO 34938
// if GetBType ( depot ) = b_depot then
34336: LD_VAR 0 1
34340: PPUSH
34341: CALL_OW 266
34345: PUSH
34346: LD_INT 0
34348: EQUAL
34349: IFFALSE 34361
// dist := 28 else
34351: LD_ADDR_VAR 0 14
34355: PUSH
34356: LD_INT 28
34358: ST_TO_ADDR
34359: GO 34369
// dist := 36 ;
34361: LD_ADDR_VAR 0 14
34365: PUSH
34366: LD_INT 36
34368: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34369: LD_VAR 0 1
34373: PPUSH
34374: LD_VAR 0 3
34378: PPUSH
34379: LD_VAR 0 4
34383: PPUSH
34384: CALL_OW 297
34388: PUSH
34389: LD_VAR 0 14
34393: GREATER
34394: IFFALSE 34398
// exit ;
34396: GO 34938
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34398: LD_ADDR_VAR 0 12
34402: PUSH
34403: LD_VAR 0 2
34407: PPUSH
34408: LD_VAR 0 3
34412: PPUSH
34413: LD_VAR 0 4
34417: PPUSH
34418: LD_VAR 0 5
34422: PPUSH
34423: LD_VAR 0 1
34427: PPUSH
34428: CALL_OW 248
34432: PPUSH
34433: LD_INT 0
34435: PPUSH
34436: CALL 34943 0 6
34440: ST_TO_ADDR
// if not hexes then
34441: LD_VAR 0 12
34445: NOT
34446: IFFALSE 34450
// exit ;
34448: GO 34938
// hex := GetHexInfo ( x , y ) ;
34450: LD_ADDR_VAR 0 15
34454: PUSH
34455: LD_VAR 0 3
34459: PPUSH
34460: LD_VAR 0 4
34464: PPUSH
34465: CALL_OW 546
34469: ST_TO_ADDR
// if hex [ 1 ] then
34470: LD_VAR 0 15
34474: PUSH
34475: LD_INT 1
34477: ARRAY
34478: IFFALSE 34482
// exit ;
34480: GO 34938
// height := hex [ 2 ] ;
34482: LD_ADDR_VAR 0 13
34486: PUSH
34487: LD_VAR 0 15
34491: PUSH
34492: LD_INT 2
34494: ARRAY
34495: ST_TO_ADDR
// for i = 1 to hexes do
34496: LD_ADDR_VAR 0 7
34500: PUSH
34501: DOUBLE
34502: LD_INT 1
34504: DEC
34505: ST_TO_ADDR
34506: LD_VAR 0 12
34510: PUSH
34511: FOR_TO
34512: IFFALSE 34842
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34514: LD_VAR 0 12
34518: PUSH
34519: LD_VAR 0 7
34523: ARRAY
34524: PUSH
34525: LD_INT 1
34527: ARRAY
34528: PPUSH
34529: LD_VAR 0 12
34533: PUSH
34534: LD_VAR 0 7
34538: ARRAY
34539: PUSH
34540: LD_INT 2
34542: ARRAY
34543: PPUSH
34544: CALL_OW 488
34548: NOT
34549: PUSH
34550: LD_VAR 0 12
34554: PUSH
34555: LD_VAR 0 7
34559: ARRAY
34560: PUSH
34561: LD_INT 1
34563: ARRAY
34564: PPUSH
34565: LD_VAR 0 12
34569: PUSH
34570: LD_VAR 0 7
34574: ARRAY
34575: PUSH
34576: LD_INT 2
34578: ARRAY
34579: PPUSH
34580: CALL_OW 428
34584: PUSH
34585: LD_INT 0
34587: GREATER
34588: OR
34589: PUSH
34590: LD_VAR 0 12
34594: PUSH
34595: LD_VAR 0 7
34599: ARRAY
34600: PUSH
34601: LD_INT 1
34603: ARRAY
34604: PPUSH
34605: LD_VAR 0 12
34609: PUSH
34610: LD_VAR 0 7
34614: ARRAY
34615: PUSH
34616: LD_INT 2
34618: ARRAY
34619: PPUSH
34620: CALL_OW 351
34624: OR
34625: IFFALSE 34631
// exit ;
34627: POP
34628: POP
34629: GO 34938
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34631: LD_ADDR_VAR 0 8
34635: PUSH
34636: LD_VAR 0 12
34640: PUSH
34641: LD_VAR 0 7
34645: ARRAY
34646: PUSH
34647: LD_INT 1
34649: ARRAY
34650: PPUSH
34651: LD_VAR 0 12
34655: PUSH
34656: LD_VAR 0 7
34660: ARRAY
34661: PUSH
34662: LD_INT 2
34664: ARRAY
34665: PPUSH
34666: CALL_OW 546
34670: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34671: LD_VAR 0 8
34675: PUSH
34676: LD_INT 1
34678: ARRAY
34679: PUSH
34680: LD_VAR 0 8
34684: PUSH
34685: LD_INT 2
34687: ARRAY
34688: PUSH
34689: LD_VAR 0 13
34693: PUSH
34694: LD_INT 2
34696: PLUS
34697: GREATER
34698: OR
34699: PUSH
34700: LD_VAR 0 8
34704: PUSH
34705: LD_INT 2
34707: ARRAY
34708: PUSH
34709: LD_VAR 0 13
34713: PUSH
34714: LD_INT 2
34716: MINUS
34717: LESS
34718: OR
34719: PUSH
34720: LD_VAR 0 8
34724: PUSH
34725: LD_INT 3
34727: ARRAY
34728: PUSH
34729: LD_INT 0
34731: PUSH
34732: LD_INT 8
34734: PUSH
34735: LD_INT 9
34737: PUSH
34738: LD_INT 10
34740: PUSH
34741: LD_INT 11
34743: PUSH
34744: LD_INT 12
34746: PUSH
34747: LD_INT 13
34749: PUSH
34750: LD_INT 16
34752: PUSH
34753: LD_INT 17
34755: PUSH
34756: LD_INT 18
34758: PUSH
34759: LD_INT 19
34761: PUSH
34762: LD_INT 20
34764: PUSH
34765: LD_INT 21
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: IN
34783: NOT
34784: OR
34785: PUSH
34786: LD_VAR 0 8
34790: PUSH
34791: LD_INT 5
34793: ARRAY
34794: NOT
34795: OR
34796: PUSH
34797: LD_VAR 0 8
34801: PUSH
34802: LD_INT 6
34804: ARRAY
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: LD_INT 2
34811: PUSH
34812: LD_INT 7
34814: PUSH
34815: LD_INT 9
34817: PUSH
34818: LD_INT 10
34820: PUSH
34821: LD_INT 11
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: IN
34832: NOT
34833: OR
34834: IFFALSE 34840
// exit ;
34836: POP
34837: POP
34838: GO 34938
// end ;
34840: GO 34511
34842: POP
34843: POP
// side := GetSide ( depot ) ;
34844: LD_ADDR_VAR 0 9
34848: PUSH
34849: LD_VAR 0 1
34853: PPUSH
34854: CALL_OW 255
34858: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34859: LD_VAR 0 9
34863: PPUSH
34864: LD_VAR 0 3
34868: PPUSH
34869: LD_VAR 0 4
34873: PPUSH
34874: LD_INT 20
34876: PPUSH
34877: CALL 27592 0 4
34881: PUSH
34882: LD_INT 4
34884: ARRAY
34885: IFFALSE 34889
// exit ;
34887: GO 34938
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34889: LD_VAR 0 2
34893: PUSH
34894: LD_INT 29
34896: PUSH
34897: LD_INT 30
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: IN
34904: PUSH
34905: LD_VAR 0 3
34909: PPUSH
34910: LD_VAR 0 4
34914: PPUSH
34915: LD_VAR 0 9
34919: PPUSH
34920: CALL_OW 440
34924: NOT
34925: AND
34926: IFFALSE 34930
// exit ;
34928: GO 34938
// result := true ;
34930: LD_ADDR_VAR 0 6
34934: PUSH
34935: LD_INT 1
34937: ST_TO_ADDR
// end ;
34938: LD_VAR 0 6
34942: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34943: LD_INT 0
34945: PPUSH
34946: PPUSH
34947: PPUSH
34948: PPUSH
34949: PPUSH
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
34954: PPUSH
34955: PPUSH
34956: PPUSH
34957: PPUSH
34958: PPUSH
34959: PPUSH
34960: PPUSH
34961: PPUSH
34962: PPUSH
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
34968: PPUSH
34969: PPUSH
34970: PPUSH
34971: PPUSH
34972: PPUSH
34973: PPUSH
34974: PPUSH
34975: PPUSH
34976: PPUSH
34977: PPUSH
34978: PPUSH
34979: PPUSH
34980: PPUSH
34981: PPUSH
34982: PPUSH
34983: PPUSH
34984: PPUSH
34985: PPUSH
34986: PPUSH
34987: PPUSH
34988: PPUSH
34989: PPUSH
34990: PPUSH
34991: PPUSH
34992: PPUSH
34993: PPUSH
34994: PPUSH
34995: PPUSH
34996: PPUSH
34997: PPUSH
34998: PPUSH
34999: PPUSH
35000: PPUSH
35001: PPUSH
35002: PPUSH
// result = [ ] ;
35003: LD_ADDR_VAR 0 7
35007: PUSH
35008: EMPTY
35009: ST_TO_ADDR
// temp_list = [ ] ;
35010: LD_ADDR_VAR 0 9
35014: PUSH
35015: EMPTY
35016: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35017: LD_VAR 0 4
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: LD_INT 2
35030: PUSH
35031: LD_INT 3
35033: PUSH
35034: LD_INT 4
35036: PUSH
35037: LD_INT 5
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: IN
35048: NOT
35049: PUSH
35050: LD_VAR 0 1
35054: PUSH
35055: LD_INT 0
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: IN
35065: PUSH
35066: LD_VAR 0 5
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 2
35076: PUSH
35077: LD_INT 3
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: LIST
35084: IN
35085: NOT
35086: AND
35087: OR
35088: IFFALSE 35092
// exit ;
35090: GO 53483
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35092: LD_VAR 0 1
35096: PUSH
35097: LD_INT 6
35099: PUSH
35100: LD_INT 7
35102: PUSH
35103: LD_INT 8
35105: PUSH
35106: LD_INT 13
35108: PUSH
35109: LD_INT 12
35111: PUSH
35112: LD_INT 15
35114: PUSH
35115: LD_INT 11
35117: PUSH
35118: LD_INT 14
35120: PUSH
35121: LD_INT 10
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: IN
35135: IFFALSE 35145
// btype = b_lab ;
35137: LD_ADDR_VAR 0 1
35141: PUSH
35142: LD_INT 6
35144: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35145: LD_VAR 0 6
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: LD_INT 2
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: LIST
35163: IN
35164: NOT
35165: PUSH
35166: LD_VAR 0 1
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: LD_INT 1
35176: PUSH
35177: LD_INT 2
35179: PUSH
35180: LD_INT 3
35182: PUSH
35183: LD_INT 6
35185: PUSH
35186: LD_INT 36
35188: PUSH
35189: LD_INT 4
35191: PUSH
35192: LD_INT 5
35194: PUSH
35195: LD_INT 31
35197: PUSH
35198: LD_INT 32
35200: PUSH
35201: LD_INT 33
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: IN
35217: NOT
35218: PUSH
35219: LD_VAR 0 6
35223: PUSH
35224: LD_INT 1
35226: EQUAL
35227: AND
35228: OR
35229: PUSH
35230: LD_VAR 0 1
35234: PUSH
35235: LD_INT 2
35237: PUSH
35238: LD_INT 3
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: IN
35245: NOT
35246: PUSH
35247: LD_VAR 0 6
35251: PUSH
35252: LD_INT 2
35254: EQUAL
35255: AND
35256: OR
35257: IFFALSE 35267
// mode = 0 ;
35259: LD_ADDR_VAR 0 6
35263: PUSH
35264: LD_INT 0
35266: ST_TO_ADDR
// case mode of 0 :
35267: LD_VAR 0 6
35271: PUSH
35272: LD_INT 0
35274: DOUBLE
35275: EQUAL
35276: IFTRUE 35280
35278: GO 46733
35280: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35281: LD_ADDR_VAR 0 11
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 1
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: PUSH
35320: LD_INT 1
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 1
35350: NEG
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: NEG
35363: PUSH
35364: LD_INT 2
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: LD_INT 2
35377: NEG
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: PUSH
35397: LD_INT 2
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: LD_INT 2
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: LD_INT 1
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: LD_INT 3
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 3
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: LD_INT 2
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35474: LD_ADDR_VAR 0 12
35478: PUSH
35479: LD_INT 0
35481: PUSH
35482: LD_INT 0
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: LD_INT 0
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: LD_INT 1
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 1
35543: NEG
35544: PUSH
35545: LD_INT 1
35547: NEG
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 1
35558: NEG
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 2
35566: PUSH
35567: LD_INT 0
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 2
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: LD_INT 1
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 2
35597: NEG
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 2
35608: NEG
35609: PUSH
35610: LD_INT 1
35612: NEG
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 2
35620: NEG
35621: PUSH
35622: LD_INT 1
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 3
35631: NEG
35632: PUSH
35633: LD_INT 0
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 3
35642: NEG
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35670: LD_ADDR_VAR 0 13
35674: PUSH
35675: LD_INT 0
35677: PUSH
35678: LD_INT 0
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 0
35687: PUSH
35688: LD_INT 1
35690: NEG
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: LD_INT 0
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 1
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 1
35739: NEG
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 1
35751: NEG
35752: PUSH
35753: LD_INT 2
35755: NEG
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 2
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 2
35773: PUSH
35774: LD_INT 2
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: LD_INT 2
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 2
35793: NEG
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 2
35805: NEG
35806: PUSH
35807: LD_INT 2
35809: NEG
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 2
35817: NEG
35818: PUSH
35819: LD_INT 3
35821: NEG
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 3
35829: NEG
35830: PUSH
35831: LD_INT 2
35833: NEG
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 3
35841: NEG
35842: PUSH
35843: LD_INT 3
35845: NEG
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35869: LD_ADDR_VAR 0 14
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 0
35886: PUSH
35887: LD_INT 1
35889: NEG
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 1
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 1
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: PUSH
35929: LD_INT 0
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: NEG
35939: PUSH
35940: LD_INT 1
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: LD_INT 2
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 0
35962: PUSH
35963: LD_INT 2
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: PUSH
35985: LD_INT 2
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: LD_INT 2
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 1
36004: NEG
36005: PUSH
36006: LD_INT 1
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: LD_INT 3
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: LD_INT 3
36030: NEG
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 1
36038: PUSH
36039: LD_INT 2
36041: NEG
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36065: LD_ADDR_VAR 0 15
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 1
36093: PUSH
36094: LD_INT 0
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: LD_INT 1
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: NEG
36124: PUSH
36125: LD_INT 0
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: LD_INT 1
36149: NEG
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 2
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 2
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: LD_INT 1
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 2
36199: NEG
36200: PUSH
36201: LD_INT 1
36203: NEG
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 2
36211: PUSH
36212: LD_INT 1
36214: NEG
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 3
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 3
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36258: LD_ADDR_VAR 0 16
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 0
36275: PUSH
36276: LD_INT 1
36278: NEG
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: LD_INT 1
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 0
36306: PUSH
36307: LD_INT 1
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 1
36327: NEG
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: LD_INT 2
36343: NEG
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 2
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: LD_INT 2
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: LD_INT 2
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 2
36381: NEG
36382: PUSH
36383: LD_INT 1
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 2
36393: NEG
36394: PUSH
36395: LD_INT 2
36397: NEG
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 3
36405: PUSH
36406: LD_INT 2
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 3
36415: PUSH
36416: LD_INT 3
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 2
36425: PUSH
36426: LD_INT 3
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36451: LD_ADDR_VAR 0 17
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: LD_INT 0
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: LD_INT 1
36471: NEG
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: LD_INT 1
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 0
36499: PUSH
36500: LD_INT 1
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 1
36509: NEG
36510: PUSH
36511: LD_INT 0
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: NEG
36521: PUSH
36522: LD_INT 1
36524: NEG
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 1
36532: NEG
36533: PUSH
36534: LD_INT 2
36536: NEG
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: LD_INT 2
36547: NEG
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: LD_INT 1
36558: NEG
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 2
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 2
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 2
36586: PUSH
36587: LD_INT 2
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: LD_INT 2
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: NEG
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 2
36627: NEG
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: NEG
36639: PUSH
36640: LD_INT 1
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 2
36650: NEG
36651: PUSH
36652: LD_INT 2
36654: NEG
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36681: LD_ADDR_VAR 0 18
36685: PUSH
36686: LD_INT 0
36688: PUSH
36689: LD_INT 0
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 0
36698: PUSH
36699: LD_INT 1
36701: NEG
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 1
36709: PUSH
36710: LD_INT 0
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: LD_INT 1
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: NEG
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 1
36750: NEG
36751: PUSH
36752: LD_INT 1
36754: NEG
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: NEG
36763: PUSH
36764: LD_INT 2
36766: NEG
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: LD_INT 2
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 1
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 2
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 2
36806: PUSH
36807: LD_INT 1
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 2
36816: PUSH
36817: LD_INT 2
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: PUSH
36827: LD_INT 2
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: LD_INT 2
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 1
36846: NEG
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 2
36857: NEG
36858: PUSH
36859: LD_INT 0
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 2
36868: NEG
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 2
36880: NEG
36881: PUSH
36882: LD_INT 2
36884: NEG
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36911: LD_ADDR_VAR 0 19
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: LD_INT 0
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: LD_INT 1
36931: NEG
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 1
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: PUSH
36950: LD_INT 1
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: LD_INT 1
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 1
36969: NEG
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: LD_INT 1
36984: NEG
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 1
36992: NEG
36993: PUSH
36994: LD_INT 2
36996: NEG
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: LD_INT 2
37007: NEG
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 1
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 2
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 2
37046: PUSH
37047: LD_INT 2
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: LD_INT 2
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: LD_INT 2
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: NEG
37077: PUSH
37078: LD_INT 1
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 2
37087: NEG
37088: PUSH
37089: LD_INT 0
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 2
37098: NEG
37099: PUSH
37100: LD_INT 1
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 2
37110: NEG
37111: PUSH
37112: LD_INT 2
37114: NEG
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37141: LD_ADDR_VAR 0 20
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 1
37161: NEG
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: LD_INT 0
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: LD_INT 0
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: LD_INT 1
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: NEG
37223: PUSH
37224: LD_INT 2
37226: NEG
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 0
37234: PUSH
37235: LD_INT 2
37237: NEG
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 2
37276: PUSH
37277: LD_INT 2
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 1
37286: PUSH
37287: LD_INT 2
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 1
37306: NEG
37307: PUSH
37308: LD_INT 1
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 2
37317: NEG
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 2
37328: NEG
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 2
37340: NEG
37341: PUSH
37342: LD_INT 2
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37371: LD_ADDR_VAR 0 21
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: LD_INT 1
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: LD_INT 0
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: LD_INT 2
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 0
37464: PUSH
37465: LD_INT 2
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 1
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 2
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 2
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 2
37506: PUSH
37507: LD_INT 2
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: LD_INT 2
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 1
37536: NEG
37537: PUSH
37538: LD_INT 1
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 2
37547: NEG
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 2
37558: NEG
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 2
37570: NEG
37571: PUSH
37572: LD_INT 2
37574: NEG
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37601: LD_ADDR_VAR 0 22
37605: PUSH
37606: LD_INT 0
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: LD_INT 1
37621: NEG
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: LD_INT 1
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: LD_INT 1
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 1
37670: NEG
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: NEG
37683: PUSH
37684: LD_INT 2
37686: NEG
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 0
37694: PUSH
37695: LD_INT 2
37697: NEG
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 2
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: LD_INT 2
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 2
37777: NEG
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 2
37800: NEG
37801: PUSH
37802: LD_INT 2
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37831: LD_ADDR_VAR 0 23
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: LD_INT 1
37851: NEG
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: LD_INT 0
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: LD_INT 1
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 0
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: LD_INT 0
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 1
37900: NEG
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: NEG
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: LD_INT 2
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 1
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: LD_INT 1
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: LD_INT 2
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: PUSH
37998: LD_INT 1
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 2
38007: NEG
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 2
38018: NEG
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 2
38030: NEG
38031: PUSH
38032: LD_INT 2
38034: NEG
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 2
38042: NEG
38043: PUSH
38044: LD_INT 3
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: LD_INT 3
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: LD_INT 2
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 2
38077: PUSH
38078: LD_INT 1
38080: NEG
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38111: LD_ADDR_VAR 0 24
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: LD_INT 1
38131: NEG
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: LD_INT 0
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 1
38169: NEG
38170: PUSH
38171: LD_INT 0
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 1
38180: NEG
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: NEG
38193: PUSH
38194: LD_INT 2
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: LD_INT 2
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: LD_INT 1
38218: NEG
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 2
38226: PUSH
38227: LD_INT 0
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 2
38236: PUSH
38237: LD_INT 1
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: LD_INT 2
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 1
38256: PUSH
38257: LD_INT 2
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: LD_INT 2
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 1
38276: NEG
38277: PUSH
38278: LD_INT 1
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 2
38287: NEG
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 2
38298: NEG
38299: PUSH
38300: LD_INT 1
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 2
38310: NEG
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: LD_INT 2
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 3
38344: PUSH
38345: LD_INT 1
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 3
38354: PUSH
38355: LD_INT 2
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38387: LD_ADDR_VAR 0 25
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: LD_INT 0
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: LD_INT 1
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 1
38456: NEG
38457: PUSH
38458: LD_INT 1
38460: NEG
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 1
38468: NEG
38469: PUSH
38470: LD_INT 2
38472: NEG
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: LD_INT 2
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 1
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 2
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 2
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 2
38522: PUSH
38523: LD_INT 2
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 1
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 0
38542: PUSH
38543: LD_INT 2
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 1
38552: NEG
38553: PUSH
38554: LD_INT 1
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 2
38563: NEG
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 2
38574: NEG
38575: PUSH
38576: LD_INT 1
38578: NEG
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 2
38586: NEG
38587: PUSH
38588: LD_INT 2
38590: NEG
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 3
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 3
38608: PUSH
38609: LD_INT 2
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 2
38618: PUSH
38619: LD_INT 3
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: LD_INT 3
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38661: LD_ADDR_VAR 0 26
38665: PUSH
38666: LD_INT 0
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: LD_INT 0
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: NEG
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 1
38742: NEG
38743: PUSH
38744: LD_INT 2
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 0
38754: PUSH
38755: LD_INT 2
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 2
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 2
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: LD_INT 2
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 1
38826: NEG
38827: PUSH
38828: LD_INT 1
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 2
38837: NEG
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 2
38848: NEG
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: NEG
38861: PUSH
38862: LD_INT 2
38864: NEG
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 2
38872: PUSH
38873: LD_INT 3
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: LD_INT 3
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: LD_INT 2
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 2
38903: NEG
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38937: LD_ADDR_VAR 0 27
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: NEG
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: NEG
39019: PUSH
39020: LD_INT 2
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: LD_INT 2
39033: NEG
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: LD_INT 1
39044: NEG
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 2
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 2
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 2
39072: PUSH
39073: LD_INT 2
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 2
39113: NEG
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: NEG
39125: PUSH
39126: LD_INT 1
39128: NEG
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 2
39136: NEG
39137: PUSH
39138: LD_INT 2
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 2
39159: NEG
39160: PUSH
39161: LD_INT 1
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 3
39170: NEG
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 3
39182: NEG
39183: PUSH
39184: LD_INT 2
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39217: LD_ADDR_VAR 0 28
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 2
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 2
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 2
39352: PUSH
39353: LD_INT 2
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: LD_INT 2
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 1
39382: NEG
39383: PUSH
39384: LD_INT 1
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 2
39393: NEG
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: LD_INT 1
39408: NEG
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: LD_INT 2
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 2
39428: NEG
39429: PUSH
39430: LD_INT 3
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 1
39440: NEG
39441: PUSH
39442: LD_INT 3
39444: NEG
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 3
39452: NEG
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 3
39464: NEG
39465: PUSH
39466: LD_INT 2
39468: NEG
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39499: LD_ADDR_VAR 0 29
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: LD_INT 0
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: NEG
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 1
39568: NEG
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: LD_INT 2
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: LD_INT 2
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 2
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: LD_INT 2
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: LD_INT 2
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 2
39665: NEG
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 2
39677: NEG
39678: PUSH
39679: LD_INT 2
39681: NEG
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 2
39689: NEG
39690: PUSH
39691: LD_INT 3
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: LD_INT 1
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 3
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: LD_INT 3
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: LD_INT 2
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 3
39743: NEG
39744: PUSH
39745: LD_INT 2
39747: NEG
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39778: LD_ADDR_VAR 0 30
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: LD_INT 0
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: NEG
39860: PUSH
39861: LD_INT 2
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: LD_INT 2
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 2
39903: PUSH
39904: LD_INT 1
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 2
39955: NEG
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: LD_INT 3
39971: NEG
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: LD_INT 2
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 3
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 2
40000: PUSH
40001: LD_INT 3
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 2
40010: NEG
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 3
40021: NEG
40022: PUSH
40023: LD_INT 1
40025: NEG
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40056: LD_ADDR_VAR 0 31
40060: PUSH
40061: LD_INT 0
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 1
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: NEG
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: LD_INT 2
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 2
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 2
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: LD_INT 2
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: LD_INT 2
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 1
40210: NEG
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 2
40221: NEG
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 2
40233: NEG
40234: PUSH
40235: LD_INT 2
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 2
40245: NEG
40246: PUSH
40247: LD_INT 3
40249: NEG
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 3
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: LD_INT 3
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: LD_INT 2
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 3
40299: NEG
40300: PUSH
40301: LD_INT 2
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40334: LD_ADDR_VAR 0 32
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: LD_INT 1
40354: NEG
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: LD_INT 2
40419: NEG
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 2
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 2
40459: PUSH
40460: LD_INT 2
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: PUSH
40470: LD_INT 2
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: LD_INT 2
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: LD_INT 1
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 2
40500: NEG
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 2
40511: NEG
40512: PUSH
40513: LD_INT 1
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: LD_INT 3
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: LD_INT 2
40538: NEG
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 3
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: PUSH
40557: LD_INT 3
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 2
40566: NEG
40567: PUSH
40568: LD_INT 1
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 3
40577: NEG
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40612: LD_ADDR_VAR 0 33
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: LD_INT 1
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 2
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: LD_INT 1
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 2
40767: NEG
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 2
40778: NEG
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 2
40790: NEG
40791: PUSH
40792: LD_INT 2
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 2
40802: NEG
40803: PUSH
40804: LD_INT 3
40806: NEG
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 2
40814: PUSH
40815: LD_INT 1
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 3
40825: PUSH
40826: LD_INT 1
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: LD_INT 3
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: LD_INT 2
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 3
40856: NEG
40857: PUSH
40858: LD_INT 2
40860: NEG
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40891: LD_ADDR_VAR 0 34
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 1
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: LD_INT 2
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: LD_INT 2
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 2
41016: PUSH
41017: LD_INT 2
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: LD_INT 2
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: NEG
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 2
41058: NEG
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 2
41070: NEG
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: LD_INT 3
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: LD_INT 2
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 3
41105: PUSH
41106: LD_INT 2
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: PUSH
41116: LD_INT 3
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 2
41125: NEG
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 3
41136: NEG
41137: PUSH
41138: LD_INT 1
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41171: LD_ADDR_VAR 0 35
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 1
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 2
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: NEG
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41283: LD_ADDR_VAR 0 36
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: NEG
41365: PUSH
41366: LD_INT 2
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: LD_INT 2
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41395: LD_ADDR_VAR 0 37
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: NEG
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41507: LD_ADDR_VAR 0 38
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41619: LD_ADDR_VAR 0 39
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 1
41677: NEG
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: NEG
41701: PUSH
41702: LD_INT 2
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41731: LD_ADDR_VAR 0 40
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: NEG
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: NEG
41824: PUSH
41825: LD_INT 1
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41843: LD_ADDR_VAR 0 41
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: LD_INT 1
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 1
41924: NEG
41925: PUSH
41926: LD_INT 2
41928: NEG
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: LD_INT 1
41939: NEG
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 2
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 2
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: LD_INT 2
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 1
41977: PUSH
41978: LD_INT 2
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: NEG
42022: PUSH
42023: LD_INT 2
42025: NEG
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 2
42033: NEG
42034: PUSH
42035: LD_INT 3
42037: NEG
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: LD_INT 1
42048: NEG
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 3
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 3
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 3
42076: PUSH
42077: LD_INT 2
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 3
42086: PUSH
42087: LD_INT 3
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: LD_INT 3
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 2
42106: NEG
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 3
42117: NEG
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 3
42128: NEG
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 3
42140: NEG
42141: PUSH
42142: LD_INT 2
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 3
42152: NEG
42153: PUSH
42154: LD_INT 3
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42193: LD_ADDR_VAR 0 42
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 2
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 2
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 2
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 2
42359: NEG
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 2
42371: NEG
42372: PUSH
42373: LD_INT 2
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 2
42383: NEG
42384: PUSH
42385: LD_INT 3
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 3
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: LD_INT 3
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: LD_INT 2
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 3
42429: PUSH
42430: LD_INT 2
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 3
42439: PUSH
42440: LD_INT 3
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 2
42449: PUSH
42450: LD_INT 3
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: LD_INT 3
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 3
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: LD_INT 2
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 3
42490: NEG
42491: PUSH
42492: LD_INT 2
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 3
42502: NEG
42503: PUSH
42504: LD_INT 3
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42543: LD_ADDR_VAR 0 43
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: LD_INT 2
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: LD_INT 2
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 2
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 2
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: LD_INT 2
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: LD_INT 2
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: NEG
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 2
42720: NEG
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: LD_INT 3
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 3
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: LD_INT 2
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 3
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 3
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: LD_INT 3
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: LD_INT 3
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 2
42828: NEG
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 3
42839: NEG
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 3
42850: NEG
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42891: LD_ADDR_VAR 0 44
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: LD_INT 1
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: LD_INT 2
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 1
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 2
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 2
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 2
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: LD_INT 2
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: NEG
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 2
43069: NEG
43070: PUSH
43071: LD_INT 2
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 2
43081: NEG
43082: PUSH
43083: LD_INT 3
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 3
43104: PUSH
43105: LD_INT 0
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 3
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 3
43124: PUSH
43125: LD_INT 2
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 3
43134: PUSH
43135: LD_INT 3
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 2
43144: PUSH
43145: LD_INT 3
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 2
43154: NEG
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 3
43165: NEG
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 3
43176: NEG
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 3
43188: NEG
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 3
43200: NEG
43201: PUSH
43202: LD_INT 3
43204: NEG
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43241: LD_ADDR_VAR 0 45
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 2
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 2
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: LD_INT 2
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: LD_INT 2
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: LD_INT 2
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: NEG
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: LD_INT 3
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: LD_INT 3
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: LD_INT 3
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: LD_INT 2
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 3
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 3
43487: PUSH
43488: LD_INT 3
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 2
43497: PUSH
43498: LD_INT 3
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: LD_INT 3
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: LD_INT 3
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: LD_INT 2
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 3
43538: NEG
43539: PUSH
43540: LD_INT 2
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 3
43550: NEG
43551: PUSH
43552: LD_INT 3
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43591: LD_ADDR_VAR 0 46
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 2
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 2
43768: NEG
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: LD_INT 3
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 3
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 2
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 3
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 3
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: LD_INT 3
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 3
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: LD_INT 2
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 2
43876: NEG
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 3
43887: NEG
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 3
43898: NEG
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43939: LD_ADDR_VAR 0 47
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 2
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 2
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: NEG
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44090: LD_ADDR_VAR 0 48
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 2
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 2
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44237: LD_ADDR_VAR 0 49
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 2
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: LD_INT 2
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44381: LD_ADDR_VAR 0 50
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44525: LD_ADDR_VAR 0 51
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: LD_INT 2
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44672: LD_ADDR_VAR 0 52
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: LD_INT 2
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 2
44787: NEG
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: LD_INT 2
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44823: LD_ADDR_VAR 0 53
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: LD_INT 2
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: LD_INT 2
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45053: LD_ADDR_VAR 0 54
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: LD_INT 2
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 2
45240: NEG
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45283: LD_ADDR_VAR 0 55
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 2
45482: NEG
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45513: LD_ADDR_VAR 0 56
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: LD_INT 1
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45743: LD_ADDR_VAR 0 57
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: NEG
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: NEG
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 2
45942: NEG
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45973: LD_ADDR_VAR 0 58
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46203: LD_ADDR_VAR 0 59
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46291: LD_ADDR_VAR 0 60
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46379: LD_ADDR_VAR 0 61
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46467: LD_ADDR_VAR 0 62
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46555: LD_ADDR_VAR 0 63
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46643: LD_ADDR_VAR 0 64
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: ST_TO_ADDR
// end ; 1 :
46731: GO 52628
46733: LD_INT 1
46735: DOUBLE
46736: EQUAL
46737: IFTRUE 46741
46739: GO 49364
46741: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46742: LD_ADDR_VAR 0 11
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: LD_INT 3
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 3
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: LD_INT 2
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: LIST
46785: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46786: LD_ADDR_VAR 0 12
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 3
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 3
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: LIST
46826: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46827: LD_ADDR_VAR 0 13
46831: PUSH
46832: LD_INT 3
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 3
46844: PUSH
46845: LD_INT 3
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: LD_INT 3
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: LIST
46866: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46867: LD_ADDR_VAR 0 14
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 3
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 3
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: LD_INT 2
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: LIST
46907: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46908: LD_ADDR_VAR 0 15
46912: PUSH
46913: LD_INT 2
46915: NEG
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 3
46926: NEG
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 3
46937: NEG
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: LIST
46951: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46952: LD_ADDR_VAR 0 16
46956: PUSH
46957: LD_INT 2
46959: NEG
46960: PUSH
46961: LD_INT 3
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 3
46971: NEG
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 3
46983: NEG
46984: PUSH
46985: LD_INT 3
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: LIST
46997: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46998: LD_ADDR_VAR 0 17
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: LD_INT 3
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 3
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: LIST
47041: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47042: LD_ADDR_VAR 0 18
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 3
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 3
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: LIST
47082: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47083: LD_ADDR_VAR 0 19
47087: PUSH
47088: LD_INT 3
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 3
47100: PUSH
47101: LD_INT 3
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: LD_INT 3
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: LIST
47122: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47123: LD_ADDR_VAR 0 20
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: LD_INT 3
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: LD_INT 3
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: LIST
47163: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47164: LD_ADDR_VAR 0 21
47168: PUSH
47169: LD_INT 2
47171: NEG
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 3
47182: NEG
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 3
47193: NEG
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: LIST
47207: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47208: LD_ADDR_VAR 0 22
47212: PUSH
47213: LD_INT 2
47215: NEG
47216: PUSH
47217: LD_INT 3
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 3
47227: NEG
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 3
47239: NEG
47240: PUSH
47241: LD_INT 3
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: LIST
47253: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47254: LD_ADDR_VAR 0 23
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: LD_INT 3
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: LD_INT 4
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: LD_INT 3
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: LIST
47297: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47298: LD_ADDR_VAR 0 24
47302: PUSH
47303: LD_INT 3
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 3
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 4
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: LIST
47338: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47339: LD_ADDR_VAR 0 25
47343: PUSH
47344: LD_INT 3
47346: PUSH
47347: LD_INT 3
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 4
47356: PUSH
47357: LD_INT 3
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 3
47366: PUSH
47367: LD_INT 4
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: LIST
47378: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47379: LD_ADDR_VAR 0 26
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 3
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: LD_INT 4
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: LD_INT 3
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47420: LD_ADDR_VAR 0 27
47424: PUSH
47425: LD_INT 3
47427: NEG
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 3
47438: NEG
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 4
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: LIST
47463: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47464: LD_ADDR_VAR 0 28
47468: PUSH
47469: LD_INT 3
47471: NEG
47472: PUSH
47473: LD_INT 3
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 3
47483: NEG
47484: PUSH
47485: LD_INT 4
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 4
47495: NEG
47496: PUSH
47497: LD_INT 3
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47510: LD_ADDR_VAR 0 29
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: LD_INT 3
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 3
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 4
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: LD_INT 4
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 3
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: LD_INT 5
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: LD_INT 5
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: LD_INT 4
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: LD_INT 6
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: LD_INT 6
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: LD_INT 5
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47665: LD_ADDR_VAR 0 30
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 3
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 3
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 3
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 4
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 4
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 4
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 5
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 5
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 5
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 6
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 6
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47808: LD_ADDR_VAR 0 31
47812: PUSH
47813: LD_INT 3
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 3
47825: PUSH
47826: LD_INT 3
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: LD_INT 3
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 4
47845: PUSH
47846: LD_INT 3
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 4
47855: PUSH
47856: LD_INT 4
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 3
47865: PUSH
47866: LD_INT 4
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 5
47875: PUSH
47876: LD_INT 4
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 5
47885: PUSH
47886: LD_INT 5
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 4
47895: PUSH
47896: LD_INT 5
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 6
47905: PUSH
47906: LD_INT 5
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 6
47915: PUSH
47916: LD_INT 6
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 5
47925: PUSH
47926: LD_INT 6
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47947: LD_ADDR_VAR 0 32
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: LD_INT 3
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: LD_INT 3
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: NEG
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: LD_INT 4
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: LD_INT 4
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: LD_INT 3
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: LD_INT 5
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 5
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: LD_INT 4
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 6
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: LD_INT 6
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 5
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48090: LD_ADDR_VAR 0 33
48094: PUSH
48095: LD_INT 2
48097: NEG
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 3
48108: NEG
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 3
48119: NEG
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 3
48131: NEG
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 4
48142: NEG
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 4
48153: NEG
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 4
48165: NEG
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 5
48176: NEG
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 5
48187: NEG
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 5
48199: NEG
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 6
48210: NEG
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 6
48221: NEG
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48245: LD_ADDR_VAR 0 34
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: LD_INT 3
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 3
48264: NEG
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 3
48276: NEG
48277: PUSH
48278: LD_INT 3
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 3
48288: NEG
48289: PUSH
48290: LD_INT 4
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 4
48300: NEG
48301: PUSH
48302: LD_INT 3
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 4
48312: NEG
48313: PUSH
48314: LD_INT 4
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 4
48324: NEG
48325: PUSH
48326: LD_INT 5
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 5
48336: NEG
48337: PUSH
48338: LD_INT 4
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 5
48348: NEG
48349: PUSH
48350: LD_INT 5
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 5
48360: NEG
48361: PUSH
48362: LD_INT 6
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 6
48372: NEG
48373: PUSH
48374: LD_INT 5
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 6
48384: NEG
48385: PUSH
48386: LD_INT 6
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48408: LD_ADDR_VAR 0 41
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 2
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: LD_INT 3
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48452: LD_ADDR_VAR 0 42
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 3
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: LIST
48492: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48493: LD_ADDR_VAR 0 43
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 3
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 2
48520: PUSH
48521: LD_INT 3
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: LIST
48532: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48533: LD_ADDR_VAR 0 44
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: LD_INT 3
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: LIST
48573: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48574: LD_ADDR_VAR 0 45
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 2
48592: NEG
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 3
48603: NEG
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: LIST
48617: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48618: LD_ADDR_VAR 0 46
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: LD_INT 3
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: NEG
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: LIST
48663: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48664: LD_ADDR_VAR 0 47
48668: PUSH
48669: LD_INT 2
48671: NEG
48672: PUSH
48673: LD_INT 3
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: LD_INT 3
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48697: LD_ADDR_VAR 0 48
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48728: LD_ADDR_VAR 0 49
48732: PUSH
48733: LD_INT 3
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 3
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48757: LD_ADDR_VAR 0 50
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: LD_INT 3
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 3
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48786: LD_ADDR_VAR 0 51
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48817: LD_ADDR_VAR 0 52
48821: PUSH
48822: LD_INT 3
48824: NEG
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 3
48836: NEG
48837: PUSH
48838: LD_INT 2
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48850: LD_ADDR_VAR 0 53
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: LD_INT 3
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 3
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: LD_INT 2
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: LIST
48893: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48894: LD_ADDR_VAR 0 54
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 3
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 3
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: LIST
48934: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48935: LD_ADDR_VAR 0 55
48939: PUSH
48940: LD_INT 3
48942: PUSH
48943: LD_INT 2
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 3
48952: PUSH
48953: LD_INT 3
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 3
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: LIST
48974: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48975: LD_ADDR_VAR 0 56
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 3
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 3
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 2
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: LIST
49015: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49016: LD_ADDR_VAR 0 57
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 3
49034: NEG
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 3
49045: NEG
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: LIST
49059: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49060: LD_ADDR_VAR 0 58
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: LD_INT 3
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 3
49079: NEG
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 3
49091: NEG
49092: PUSH
49093: LD_INT 3
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: LIST
49105: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49106: LD_ADDR_VAR 0 59
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: LD_INT 2
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: LIST
49149: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49150: LD_ADDR_VAR 0 60
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: LIST
49190: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49191: LD_ADDR_VAR 0 61
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 2
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: LIST
49230: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49231: LD_ADDR_VAR 0 62
49235: PUSH
49236: LD_INT 1
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: LIST
49271: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49272: LD_ADDR_VAR 0 63
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 2
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: LIST
49315: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49316: LD_ADDR_VAR 0 64
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: NEG
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: LIST
49361: ST_TO_ADDR
// end ; 2 :
49362: GO 52628
49364: LD_INT 2
49366: DOUBLE
49367: EQUAL
49368: IFTRUE 49372
49370: GO 52627
49372: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49373: LD_ADDR_VAR 0 29
49377: PUSH
49378: LD_INT 4
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 4
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 5
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 5
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 4
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 3
49452: PUSH
49453: LD_INT 2
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 5
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 3
49473: PUSH
49474: LD_INT 3
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 3
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 4
49493: PUSH
49494: LD_INT 3
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 4
49503: PUSH
49504: LD_INT 4
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 3
49513: PUSH
49514: LD_INT 4
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: LD_INT 3
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 4
49543: PUSH
49544: LD_INT 2
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: LD_INT 4
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 4
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: LD_INT 3
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 4
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 5
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 5
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 4
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: LD_INT 3
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: LD_INT 5
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: LD_INT 3
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 3
49656: NEG
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 3
49667: NEG
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 4
49712: NEG
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 4
49723: NEG
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 4
49735: NEG
49736: PUSH
49737: LD_INT 2
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 4
49758: NEG
49759: PUSH
49760: LD_INT 4
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 4
49770: NEG
49771: PUSH
49772: LD_INT 5
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 3
49782: NEG
49783: PUSH
49784: LD_INT 4
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 3
49794: NEG
49795: PUSH
49796: LD_INT 3
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 4
49806: NEG
49807: PUSH
49808: LD_INT 3
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 5
49818: NEG
49819: PUSH
49820: LD_INT 4
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 5
49830: NEG
49831: PUSH
49832: LD_INT 5
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 3
49842: NEG
49843: PUSH
49844: LD_INT 5
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 5
49854: NEG
49855: PUSH
49856: LD_INT 3
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49911: LD_ADDR_VAR 0 30
49915: PUSH
49916: LD_INT 4
49918: PUSH
49919: LD_INT 4
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 4
49928: PUSH
49929: LD_INT 3
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 5
49938: PUSH
49939: LD_INT 4
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 5
49948: PUSH
49949: LD_INT 5
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 4
49958: PUSH
49959: LD_INT 5
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 3
49968: PUSH
49969: LD_INT 4
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 3
49978: PUSH
49979: LD_INT 3
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 5
49988: PUSH
49989: LD_INT 3
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 3
49998: PUSH
49999: LD_INT 5
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: LD_INT 3
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: LD_INT 4
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 4
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: LD_INT 2
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: LD_INT 4
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: NEG
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 4
50101: NEG
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 4
50112: NEG
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 3
50124: NEG
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 3
50135: NEG
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 4
50146: NEG
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 5
50157: NEG
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 5
50168: NEG
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 5
50180: NEG
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 3
50192: NEG
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 3
50203: NEG
50204: PUSH
50205: LD_INT 3
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 3
50215: NEG
50216: PUSH
50217: LD_INT 4
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 2
50227: NEG
50228: PUSH
50229: LD_INT 3
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: NEG
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 3
50251: NEG
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 4
50263: NEG
50264: PUSH
50265: LD_INT 3
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 4
50275: NEG
50276: PUSH
50277: LD_INT 4
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 2
50287: NEG
50288: PUSH
50289: LD_INT 4
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 4
50299: NEG
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 4
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: LD_INT 5
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 4
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: LD_INT 3
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 3
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 4
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: LD_INT 5
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: LD_INT 3
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 2
50401: NEG
50402: PUSH
50403: LD_INT 5
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50458: LD_ADDR_VAR 0 31
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 4
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 3
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: LD_INT 4
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: LD_INT 5
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: LD_INT 5
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 4
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: LD_INT 3
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 2
50537: PUSH
50538: LD_INT 5
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 2
50547: NEG
50548: PUSH
50549: LD_INT 3
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 3
50558: NEG
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 3
50569: NEG
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 2
50581: NEG
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 2
50592: NEG
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 3
50603: NEG
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 4
50614: NEG
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 4
50625: NEG
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 4
50637: NEG
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 2
50649: NEG
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 4
50660: NEG
50661: PUSH
50662: LD_INT 4
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 4
50672: NEG
50673: PUSH
50674: LD_INT 5
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 3
50684: NEG
50685: PUSH
50686: LD_INT 4
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 3
50696: NEG
50697: PUSH
50698: LD_INT 3
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 4
50708: NEG
50709: PUSH
50710: LD_INT 3
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 5
50720: NEG
50721: PUSH
50722: LD_INT 4
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 5
50732: NEG
50733: PUSH
50734: LD_INT 5
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 3
50744: NEG
50745: PUSH
50746: LD_INT 5
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 5
50756: NEG
50757: PUSH
50758: LD_INT 3
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: LD_INT 3
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: LD_INT 4
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: LD_INT 3
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: LD_INT 3
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: LD_INT 4
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: LD_INT 2
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 2
50858: NEG
50859: PUSH
50860: LD_INT 4
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 4
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 4
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 5
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 5
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 4
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 3
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 3
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 3
50942: PUSH
50943: LD_INT 2
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 5
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51008: LD_ADDR_VAR 0 32
51012: PUSH
51013: LD_INT 4
51015: NEG
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 4
51026: NEG
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 3
51038: NEG
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 3
51049: NEG
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 4
51060: NEG
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 5
51071: NEG
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 5
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 5
51094: NEG
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 3
51106: NEG
51107: PUSH
51108: LD_INT 2
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 3
51117: NEG
51118: PUSH
51119: LD_INT 3
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 3
51129: NEG
51130: PUSH
51131: LD_INT 4
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: LD_INT 3
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 3
51165: NEG
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 4
51177: NEG
51178: PUSH
51179: LD_INT 3
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 4
51189: NEG
51190: PUSH
51191: LD_INT 4
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: NEG
51202: PUSH
51203: LD_INT 4
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 4
51213: NEG
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 4
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: LD_INT 5
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: LD_INT 4
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: LD_INT 3
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: LD_INT 3
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 4
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 5
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: LD_INT 3
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: LD_INT 5
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 3
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 3
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 4
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 4
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 3
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 2
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: LD_INT 2
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 4
51410: PUSH
51411: LD_INT 2
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 4
51420: PUSH
51421: LD_INT 4
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 4
51430: PUSH
51431: LD_INT 3
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 5
51440: PUSH
51441: LD_INT 4
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 5
51450: PUSH
51451: LD_INT 5
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 4
51460: PUSH
51461: LD_INT 5
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 3
51470: PUSH
51471: LD_INT 4
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 3
51480: PUSH
51481: LD_INT 3
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 5
51490: PUSH
51491: LD_INT 3
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 3
51500: PUSH
51501: LD_INT 5
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51555: LD_ADDR_VAR 0 33
51559: PUSH
51560: LD_INT 4
51562: NEG
51563: PUSH
51564: LD_INT 4
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 4
51574: NEG
51575: PUSH
51576: LD_INT 5
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 3
51586: NEG
51587: PUSH
51588: LD_INT 4
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 3
51598: NEG
51599: PUSH
51600: LD_INT 3
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 4
51610: NEG
51611: PUSH
51612: LD_INT 3
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 5
51622: NEG
51623: PUSH
51624: LD_INT 4
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 5
51634: NEG
51635: PUSH
51636: LD_INT 5
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 3
51646: NEG
51647: PUSH
51648: LD_INT 5
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 5
51658: NEG
51659: PUSH
51660: LD_INT 3
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 3
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 4
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 3
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 2
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: LD_INT 3
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 4
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: NEG
51761: PUSH
51762: LD_INT 4
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 4
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 4
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 5
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 5
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 4
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 3
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 3
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 3
51844: PUSH
51845: LD_INT 2
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 5
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: LD_INT 3
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 3
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 4
51885: PUSH
51886: LD_INT 3
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 4
51895: PUSH
51896: LD_INT 4
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 3
51905: PUSH
51906: LD_INT 4
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: LD_INT 3
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 4
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: LD_INT 4
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 4
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: LD_INT 3
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: LD_INT 4
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: LD_INT 5
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 5
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 4
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: LD_INT 5
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: NEG
52038: PUSH
52039: LD_INT 3
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52093: LD_ADDR_VAR 0 34
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: LD_INT 4
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 5
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: LD_INT 4
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: LD_INT 3
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: LD_INT 3
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: LD_INT 4
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 5
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 2
52179: PUSH
52180: LD_INT 3
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: LD_INT 5
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 3
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 3
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 4
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 4
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 3
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: LD_INT 2
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 4
52285: PUSH
52286: LD_INT 2
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 4
52295: PUSH
52296: LD_INT 4
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 4
52305: PUSH
52306: LD_INT 3
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 5
52315: PUSH
52316: LD_INT 4
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 5
52325: PUSH
52326: LD_INT 5
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 4
52335: PUSH
52336: LD_INT 5
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 3
52345: PUSH
52346: LD_INT 4
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 3
52355: PUSH
52356: LD_INT 3
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 5
52365: PUSH
52366: LD_INT 3
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 3
52375: PUSH
52376: LD_INT 5
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 3
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 2
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 3
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: LD_INT 4
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: LD_INT 4
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: LD_INT 3
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: LD_INT 4
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 4
52478: NEG
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 4
52489: NEG
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 3
52501: NEG
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 3
52512: NEG
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 4
52523: NEG
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 5
52534: NEG
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 5
52545: NEG
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 5
52557: NEG
52558: PUSH
52559: LD_INT 2
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 3
52569: NEG
52570: PUSH
52571: LD_INT 2
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: ST_TO_ADDR
// end ; end ;
52625: GO 52628
52627: POP
// case btype of b_depot , b_warehouse :
52628: LD_VAR 0 1
52632: PUSH
52633: LD_INT 0
52635: DOUBLE
52636: EQUAL
52637: IFTRUE 52647
52639: LD_INT 1
52641: DOUBLE
52642: EQUAL
52643: IFTRUE 52647
52645: GO 52848
52647: POP
// case nation of nation_american :
52648: LD_VAR 0 5
52652: PUSH
52653: LD_INT 1
52655: DOUBLE
52656: EQUAL
52657: IFTRUE 52661
52659: GO 52717
52661: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52662: LD_ADDR_VAR 0 9
52666: PUSH
52667: LD_VAR 0 11
52671: PUSH
52672: LD_VAR 0 12
52676: PUSH
52677: LD_VAR 0 13
52681: PUSH
52682: LD_VAR 0 14
52686: PUSH
52687: LD_VAR 0 15
52691: PUSH
52692: LD_VAR 0 16
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: PUSH
52705: LD_VAR 0 4
52709: PUSH
52710: LD_INT 1
52712: PLUS
52713: ARRAY
52714: ST_TO_ADDR
52715: GO 52846
52717: LD_INT 2
52719: DOUBLE
52720: EQUAL
52721: IFTRUE 52725
52723: GO 52781
52725: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52726: LD_ADDR_VAR 0 9
52730: PUSH
52731: LD_VAR 0 17
52735: PUSH
52736: LD_VAR 0 18
52740: PUSH
52741: LD_VAR 0 19
52745: PUSH
52746: LD_VAR 0 20
52750: PUSH
52751: LD_VAR 0 21
52755: PUSH
52756: LD_VAR 0 22
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: PUSH
52769: LD_VAR 0 4
52773: PUSH
52774: LD_INT 1
52776: PLUS
52777: ARRAY
52778: ST_TO_ADDR
52779: GO 52846
52781: LD_INT 3
52783: DOUBLE
52784: EQUAL
52785: IFTRUE 52789
52787: GO 52845
52789: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52790: LD_ADDR_VAR 0 9
52794: PUSH
52795: LD_VAR 0 23
52799: PUSH
52800: LD_VAR 0 24
52804: PUSH
52805: LD_VAR 0 25
52809: PUSH
52810: LD_VAR 0 26
52814: PUSH
52815: LD_VAR 0 27
52819: PUSH
52820: LD_VAR 0 28
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: PUSH
52833: LD_VAR 0 4
52837: PUSH
52838: LD_INT 1
52840: PLUS
52841: ARRAY
52842: ST_TO_ADDR
52843: GO 52846
52845: POP
52846: GO 53401
52848: LD_INT 2
52850: DOUBLE
52851: EQUAL
52852: IFTRUE 52862
52854: LD_INT 3
52856: DOUBLE
52857: EQUAL
52858: IFTRUE 52862
52860: GO 52918
52862: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52863: LD_ADDR_VAR 0 9
52867: PUSH
52868: LD_VAR 0 29
52872: PUSH
52873: LD_VAR 0 30
52877: PUSH
52878: LD_VAR 0 31
52882: PUSH
52883: LD_VAR 0 32
52887: PUSH
52888: LD_VAR 0 33
52892: PUSH
52893: LD_VAR 0 34
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: PUSH
52906: LD_VAR 0 4
52910: PUSH
52911: LD_INT 1
52913: PLUS
52914: ARRAY
52915: ST_TO_ADDR
52916: GO 53401
52918: LD_INT 16
52920: DOUBLE
52921: EQUAL
52922: IFTRUE 52980
52924: LD_INT 17
52926: DOUBLE
52927: EQUAL
52928: IFTRUE 52980
52930: LD_INT 18
52932: DOUBLE
52933: EQUAL
52934: IFTRUE 52980
52936: LD_INT 19
52938: DOUBLE
52939: EQUAL
52940: IFTRUE 52980
52942: LD_INT 22
52944: DOUBLE
52945: EQUAL
52946: IFTRUE 52980
52948: LD_INT 20
52950: DOUBLE
52951: EQUAL
52952: IFTRUE 52980
52954: LD_INT 21
52956: DOUBLE
52957: EQUAL
52958: IFTRUE 52980
52960: LD_INT 23
52962: DOUBLE
52963: EQUAL
52964: IFTRUE 52980
52966: LD_INT 24
52968: DOUBLE
52969: EQUAL
52970: IFTRUE 52980
52972: LD_INT 25
52974: DOUBLE
52975: EQUAL
52976: IFTRUE 52980
52978: GO 53036
52980: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52981: LD_ADDR_VAR 0 9
52985: PUSH
52986: LD_VAR 0 35
52990: PUSH
52991: LD_VAR 0 36
52995: PUSH
52996: LD_VAR 0 37
53000: PUSH
53001: LD_VAR 0 38
53005: PUSH
53006: LD_VAR 0 39
53010: PUSH
53011: LD_VAR 0 40
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: PUSH
53024: LD_VAR 0 4
53028: PUSH
53029: LD_INT 1
53031: PLUS
53032: ARRAY
53033: ST_TO_ADDR
53034: GO 53401
53036: LD_INT 6
53038: DOUBLE
53039: EQUAL
53040: IFTRUE 53092
53042: LD_INT 7
53044: DOUBLE
53045: EQUAL
53046: IFTRUE 53092
53048: LD_INT 8
53050: DOUBLE
53051: EQUAL
53052: IFTRUE 53092
53054: LD_INT 13
53056: DOUBLE
53057: EQUAL
53058: IFTRUE 53092
53060: LD_INT 12
53062: DOUBLE
53063: EQUAL
53064: IFTRUE 53092
53066: LD_INT 15
53068: DOUBLE
53069: EQUAL
53070: IFTRUE 53092
53072: LD_INT 11
53074: DOUBLE
53075: EQUAL
53076: IFTRUE 53092
53078: LD_INT 14
53080: DOUBLE
53081: EQUAL
53082: IFTRUE 53092
53084: LD_INT 10
53086: DOUBLE
53087: EQUAL
53088: IFTRUE 53092
53090: GO 53148
53092: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
53093: LD_ADDR_VAR 0 9
53097: PUSH
53098: LD_VAR 0 41
53102: PUSH
53103: LD_VAR 0 42
53107: PUSH
53108: LD_VAR 0 43
53112: PUSH
53113: LD_VAR 0 44
53117: PUSH
53118: LD_VAR 0 45
53122: PUSH
53123: LD_VAR 0 46
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: PUSH
53136: LD_VAR 0 4
53140: PUSH
53141: LD_INT 1
53143: PLUS
53144: ARRAY
53145: ST_TO_ADDR
53146: GO 53401
53148: LD_INT 36
53150: DOUBLE
53151: EQUAL
53152: IFTRUE 53156
53154: GO 53212
53156: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53157: LD_ADDR_VAR 0 9
53161: PUSH
53162: LD_VAR 0 47
53166: PUSH
53167: LD_VAR 0 48
53171: PUSH
53172: LD_VAR 0 49
53176: PUSH
53177: LD_VAR 0 50
53181: PUSH
53182: LD_VAR 0 51
53186: PUSH
53187: LD_VAR 0 52
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: PUSH
53200: LD_VAR 0 4
53204: PUSH
53205: LD_INT 1
53207: PLUS
53208: ARRAY
53209: ST_TO_ADDR
53210: GO 53401
53212: LD_INT 4
53214: DOUBLE
53215: EQUAL
53216: IFTRUE 53238
53218: LD_INT 5
53220: DOUBLE
53221: EQUAL
53222: IFTRUE 53238
53224: LD_INT 34
53226: DOUBLE
53227: EQUAL
53228: IFTRUE 53238
53230: LD_INT 37
53232: DOUBLE
53233: EQUAL
53234: IFTRUE 53238
53236: GO 53294
53238: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53239: LD_ADDR_VAR 0 9
53243: PUSH
53244: LD_VAR 0 53
53248: PUSH
53249: LD_VAR 0 54
53253: PUSH
53254: LD_VAR 0 55
53258: PUSH
53259: LD_VAR 0 56
53263: PUSH
53264: LD_VAR 0 57
53268: PUSH
53269: LD_VAR 0 58
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: PUSH
53282: LD_VAR 0 4
53286: PUSH
53287: LD_INT 1
53289: PLUS
53290: ARRAY
53291: ST_TO_ADDR
53292: GO 53401
53294: LD_INT 31
53296: DOUBLE
53297: EQUAL
53298: IFTRUE 53344
53300: LD_INT 32
53302: DOUBLE
53303: EQUAL
53304: IFTRUE 53344
53306: LD_INT 33
53308: DOUBLE
53309: EQUAL
53310: IFTRUE 53344
53312: LD_INT 27
53314: DOUBLE
53315: EQUAL
53316: IFTRUE 53344
53318: LD_INT 26
53320: DOUBLE
53321: EQUAL
53322: IFTRUE 53344
53324: LD_INT 28
53326: DOUBLE
53327: EQUAL
53328: IFTRUE 53344
53330: LD_INT 29
53332: DOUBLE
53333: EQUAL
53334: IFTRUE 53344
53336: LD_INT 30
53338: DOUBLE
53339: EQUAL
53340: IFTRUE 53344
53342: GO 53400
53344: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
53345: LD_ADDR_VAR 0 9
53349: PUSH
53350: LD_VAR 0 59
53354: PUSH
53355: LD_VAR 0 60
53359: PUSH
53360: LD_VAR 0 61
53364: PUSH
53365: LD_VAR 0 62
53369: PUSH
53370: LD_VAR 0 63
53374: PUSH
53375: LD_VAR 0 64
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: PUSH
53388: LD_VAR 0 4
53392: PUSH
53393: LD_INT 1
53395: PLUS
53396: ARRAY
53397: ST_TO_ADDR
53398: GO 53401
53400: POP
// temp_list2 = [ ] ;
53401: LD_ADDR_VAR 0 10
53405: PUSH
53406: EMPTY
53407: ST_TO_ADDR
// for i in temp_list do
53408: LD_ADDR_VAR 0 8
53412: PUSH
53413: LD_VAR 0 9
53417: PUSH
53418: FOR_IN
53419: IFFALSE 53471
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53421: LD_ADDR_VAR 0 10
53425: PUSH
53426: LD_VAR 0 10
53430: PUSH
53431: LD_VAR 0 8
53435: PUSH
53436: LD_INT 1
53438: ARRAY
53439: PUSH
53440: LD_VAR 0 2
53444: PLUS
53445: PUSH
53446: LD_VAR 0 8
53450: PUSH
53451: LD_INT 2
53453: ARRAY
53454: PUSH
53455: LD_VAR 0 3
53459: PLUS
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: EMPTY
53466: LIST
53467: ADD
53468: ST_TO_ADDR
53469: GO 53418
53471: POP
53472: POP
// result = temp_list2 ;
53473: LD_ADDR_VAR 0 7
53477: PUSH
53478: LD_VAR 0 10
53482: ST_TO_ADDR
// end ;
53483: LD_VAR 0 7
53487: RET
// export function EnemyInRange ( unit , dist ) ; begin
53488: LD_INT 0
53490: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53491: LD_ADDR_VAR 0 3
53495: PUSH
53496: LD_VAR 0 1
53500: PPUSH
53501: CALL_OW 255
53505: PPUSH
53506: LD_VAR 0 1
53510: PPUSH
53511: CALL_OW 250
53515: PPUSH
53516: LD_VAR 0 1
53520: PPUSH
53521: CALL_OW 251
53525: PPUSH
53526: LD_VAR 0 2
53530: PPUSH
53531: CALL 27592 0 4
53535: PUSH
53536: LD_INT 4
53538: ARRAY
53539: ST_TO_ADDR
// end ;
53540: LD_VAR 0 3
53544: RET
// export function PlayerSeeMe ( unit ) ; begin
53545: LD_INT 0
53547: PPUSH
// result := See ( your_side , unit ) ;
53548: LD_ADDR_VAR 0 2
53552: PUSH
53553: LD_OWVAR 2
53557: PPUSH
53558: LD_VAR 0 1
53562: PPUSH
53563: CALL_OW 292
53567: ST_TO_ADDR
// end ;
53568: LD_VAR 0 2
53572: RET
// export function ReverseDir ( unit ) ; begin
53573: LD_INT 0
53575: PPUSH
// if not unit then
53576: LD_VAR 0 1
53580: NOT
53581: IFFALSE 53585
// exit ;
53583: GO 53608
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53585: LD_ADDR_VAR 0 2
53589: PUSH
53590: LD_VAR 0 1
53594: PPUSH
53595: CALL_OW 254
53599: PUSH
53600: LD_INT 3
53602: PLUS
53603: PUSH
53604: LD_INT 6
53606: MOD
53607: ST_TO_ADDR
// end ;
53608: LD_VAR 0 2
53612: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53613: LD_INT 0
53615: PPUSH
53616: PPUSH
53617: PPUSH
53618: PPUSH
53619: PPUSH
// if not hexes then
53620: LD_VAR 0 2
53624: NOT
53625: IFFALSE 53629
// exit ;
53627: GO 53777
// dist := 9999 ;
53629: LD_ADDR_VAR 0 5
53633: PUSH
53634: LD_INT 9999
53636: ST_TO_ADDR
// for i = 1 to hexes do
53637: LD_ADDR_VAR 0 4
53641: PUSH
53642: DOUBLE
53643: LD_INT 1
53645: DEC
53646: ST_TO_ADDR
53647: LD_VAR 0 2
53651: PUSH
53652: FOR_TO
53653: IFFALSE 53765
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53655: LD_VAR 0 1
53659: PPUSH
53660: LD_VAR 0 2
53664: PUSH
53665: LD_VAR 0 4
53669: ARRAY
53670: PUSH
53671: LD_INT 1
53673: ARRAY
53674: PPUSH
53675: LD_VAR 0 2
53679: PUSH
53680: LD_VAR 0 4
53684: ARRAY
53685: PUSH
53686: LD_INT 2
53688: ARRAY
53689: PPUSH
53690: CALL_OW 297
53694: PUSH
53695: LD_VAR 0 5
53699: LESS
53700: IFFALSE 53763
// begin hex := hexes [ i ] ;
53702: LD_ADDR_VAR 0 7
53706: PUSH
53707: LD_VAR 0 2
53711: PUSH
53712: LD_VAR 0 4
53716: ARRAY
53717: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53718: LD_ADDR_VAR 0 5
53722: PUSH
53723: LD_VAR 0 1
53727: PPUSH
53728: LD_VAR 0 2
53732: PUSH
53733: LD_VAR 0 4
53737: ARRAY
53738: PUSH
53739: LD_INT 1
53741: ARRAY
53742: PPUSH
53743: LD_VAR 0 2
53747: PUSH
53748: LD_VAR 0 4
53752: ARRAY
53753: PUSH
53754: LD_INT 2
53756: ARRAY
53757: PPUSH
53758: CALL_OW 297
53762: ST_TO_ADDR
// end ; end ;
53763: GO 53652
53765: POP
53766: POP
// result := hex ;
53767: LD_ADDR_VAR 0 3
53771: PUSH
53772: LD_VAR 0 7
53776: ST_TO_ADDR
// end ;
53777: LD_VAR 0 3
53781: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53782: LD_INT 0
53784: PPUSH
53785: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53786: LD_VAR 0 1
53790: NOT
53791: PUSH
53792: LD_VAR 0 1
53796: PUSH
53797: LD_INT 21
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 23
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PPUSH
53821: CALL_OW 69
53825: IN
53826: NOT
53827: OR
53828: IFFALSE 53832
// exit ;
53830: GO 53879
// for i = 1 to 3 do
53832: LD_ADDR_VAR 0 3
53836: PUSH
53837: DOUBLE
53838: LD_INT 1
53840: DEC
53841: ST_TO_ADDR
53842: LD_INT 3
53844: PUSH
53845: FOR_TO
53846: IFFALSE 53877
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53848: LD_VAR 0 1
53852: PPUSH
53853: CALL_OW 250
53857: PPUSH
53858: LD_VAR 0 1
53862: PPUSH
53863: CALL_OW 251
53867: PPUSH
53868: LD_INT 1
53870: PPUSH
53871: CALL_OW 453
53875: GO 53845
53877: POP
53878: POP
// end ;
53879: LD_VAR 0 2
53883: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53884: LD_INT 0
53886: PPUSH
53887: PPUSH
53888: PPUSH
53889: PPUSH
53890: PPUSH
53891: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53892: LD_VAR 0 1
53896: NOT
53897: PUSH
53898: LD_VAR 0 2
53902: NOT
53903: OR
53904: PUSH
53905: LD_VAR 0 1
53909: PPUSH
53910: CALL_OW 314
53914: OR
53915: IFFALSE 53919
// exit ;
53917: GO 54360
// x := GetX ( enemy_unit ) ;
53919: LD_ADDR_VAR 0 7
53923: PUSH
53924: LD_VAR 0 2
53928: PPUSH
53929: CALL_OW 250
53933: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53934: LD_ADDR_VAR 0 8
53938: PUSH
53939: LD_VAR 0 2
53943: PPUSH
53944: CALL_OW 251
53948: ST_TO_ADDR
// if not x or not y then
53949: LD_VAR 0 7
53953: NOT
53954: PUSH
53955: LD_VAR 0 8
53959: NOT
53960: OR
53961: IFFALSE 53965
// exit ;
53963: GO 54360
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53965: LD_ADDR_VAR 0 6
53969: PUSH
53970: LD_VAR 0 7
53974: PPUSH
53975: LD_INT 0
53977: PPUSH
53978: LD_INT 4
53980: PPUSH
53981: CALL_OW 272
53985: PUSH
53986: LD_VAR 0 8
53990: PPUSH
53991: LD_INT 0
53993: PPUSH
53994: LD_INT 4
53996: PPUSH
53997: CALL_OW 273
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_VAR 0 7
54010: PPUSH
54011: LD_INT 1
54013: PPUSH
54014: LD_INT 4
54016: PPUSH
54017: CALL_OW 272
54021: PUSH
54022: LD_VAR 0 8
54026: PPUSH
54027: LD_INT 1
54029: PPUSH
54030: LD_INT 4
54032: PPUSH
54033: CALL_OW 273
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_VAR 0 7
54046: PPUSH
54047: LD_INT 2
54049: PPUSH
54050: LD_INT 4
54052: PPUSH
54053: CALL_OW 272
54057: PUSH
54058: LD_VAR 0 8
54062: PPUSH
54063: LD_INT 2
54065: PPUSH
54066: LD_INT 4
54068: PPUSH
54069: CALL_OW 273
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_VAR 0 7
54082: PPUSH
54083: LD_INT 3
54085: PPUSH
54086: LD_INT 4
54088: PPUSH
54089: CALL_OW 272
54093: PUSH
54094: LD_VAR 0 8
54098: PPUSH
54099: LD_INT 3
54101: PPUSH
54102: LD_INT 4
54104: PPUSH
54105: CALL_OW 273
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_VAR 0 7
54118: PPUSH
54119: LD_INT 4
54121: PPUSH
54122: LD_INT 4
54124: PPUSH
54125: CALL_OW 272
54129: PUSH
54130: LD_VAR 0 8
54134: PPUSH
54135: LD_INT 4
54137: PPUSH
54138: LD_INT 4
54140: PPUSH
54141: CALL_OW 273
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_VAR 0 7
54154: PPUSH
54155: LD_INT 5
54157: PPUSH
54158: LD_INT 4
54160: PPUSH
54161: CALL_OW 272
54165: PUSH
54166: LD_VAR 0 8
54170: PPUSH
54171: LD_INT 5
54173: PPUSH
54174: LD_INT 4
54176: PPUSH
54177: CALL_OW 273
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: ST_TO_ADDR
// for i = tmp downto 1 do
54194: LD_ADDR_VAR 0 4
54198: PUSH
54199: DOUBLE
54200: LD_VAR 0 6
54204: INC
54205: ST_TO_ADDR
54206: LD_INT 1
54208: PUSH
54209: FOR_DOWNTO
54210: IFFALSE 54311
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54212: LD_VAR 0 6
54216: PUSH
54217: LD_VAR 0 4
54221: ARRAY
54222: PUSH
54223: LD_INT 1
54225: ARRAY
54226: PPUSH
54227: LD_VAR 0 6
54231: PUSH
54232: LD_VAR 0 4
54236: ARRAY
54237: PUSH
54238: LD_INT 2
54240: ARRAY
54241: PPUSH
54242: CALL_OW 488
54246: NOT
54247: PUSH
54248: LD_VAR 0 6
54252: PUSH
54253: LD_VAR 0 4
54257: ARRAY
54258: PUSH
54259: LD_INT 1
54261: ARRAY
54262: PPUSH
54263: LD_VAR 0 6
54267: PUSH
54268: LD_VAR 0 4
54272: ARRAY
54273: PUSH
54274: LD_INT 2
54276: ARRAY
54277: PPUSH
54278: CALL_OW 428
54282: PUSH
54283: LD_INT 0
54285: NONEQUAL
54286: OR
54287: IFFALSE 54309
// tmp := Delete ( tmp , i ) ;
54289: LD_ADDR_VAR 0 6
54293: PUSH
54294: LD_VAR 0 6
54298: PPUSH
54299: LD_VAR 0 4
54303: PPUSH
54304: CALL_OW 3
54308: ST_TO_ADDR
54309: GO 54209
54311: POP
54312: POP
// j := GetClosestHex ( unit , tmp ) ;
54313: LD_ADDR_VAR 0 5
54317: PUSH
54318: LD_VAR 0 1
54322: PPUSH
54323: LD_VAR 0 6
54327: PPUSH
54328: CALL 53613 0 2
54332: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54333: LD_VAR 0 1
54337: PPUSH
54338: LD_VAR 0 5
54342: PUSH
54343: LD_INT 1
54345: ARRAY
54346: PPUSH
54347: LD_VAR 0 5
54351: PUSH
54352: LD_INT 2
54354: ARRAY
54355: PPUSH
54356: CALL_OW 111
// end ;
54360: LD_VAR 0 3
54364: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54365: LD_INT 0
54367: PPUSH
54368: PPUSH
54369: PPUSH
// uc_side = 0 ;
54370: LD_ADDR_OWVAR 20
54374: PUSH
54375: LD_INT 0
54377: ST_TO_ADDR
// uc_nation = 0 ;
54378: LD_ADDR_OWVAR 21
54382: PUSH
54383: LD_INT 0
54385: ST_TO_ADDR
// InitHc ;
54386: CALL_OW 19
// InitVc ;
54390: CALL_OW 20
// if mastodonts then
54394: LD_VAR 0 6
54398: IFFALSE 54465
// for i = 1 to mastodonts do
54400: LD_ADDR_VAR 0 11
54404: PUSH
54405: DOUBLE
54406: LD_INT 1
54408: DEC
54409: ST_TO_ADDR
54410: LD_VAR 0 6
54414: PUSH
54415: FOR_TO
54416: IFFALSE 54463
// begin vc_chassis := 31 ;
54418: LD_ADDR_OWVAR 37
54422: PUSH
54423: LD_INT 31
54425: ST_TO_ADDR
// vc_control := control_rider ;
54426: LD_ADDR_OWVAR 38
54430: PUSH
54431: LD_INT 4
54433: ST_TO_ADDR
// animal := CreateVehicle ;
54434: LD_ADDR_VAR 0 12
54438: PUSH
54439: CALL_OW 45
54443: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54444: LD_VAR 0 12
54448: PPUSH
54449: LD_VAR 0 8
54453: PPUSH
54454: LD_INT 0
54456: PPUSH
54457: CALL 56534 0 3
// end ;
54461: GO 54415
54463: POP
54464: POP
// if horses then
54465: LD_VAR 0 5
54469: IFFALSE 54536
// for i = 1 to horses do
54471: LD_ADDR_VAR 0 11
54475: PUSH
54476: DOUBLE
54477: LD_INT 1
54479: DEC
54480: ST_TO_ADDR
54481: LD_VAR 0 5
54485: PUSH
54486: FOR_TO
54487: IFFALSE 54534
// begin hc_class := 21 ;
54489: LD_ADDR_OWVAR 28
54493: PUSH
54494: LD_INT 21
54496: ST_TO_ADDR
// hc_gallery :=  ;
54497: LD_ADDR_OWVAR 33
54501: PUSH
54502: LD_STRING 
54504: ST_TO_ADDR
// animal := CreateHuman ;
54505: LD_ADDR_VAR 0 12
54509: PUSH
54510: CALL_OW 44
54514: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54515: LD_VAR 0 12
54519: PPUSH
54520: LD_VAR 0 8
54524: PPUSH
54525: LD_INT 0
54527: PPUSH
54528: CALL 56534 0 3
// end ;
54532: GO 54486
54534: POP
54535: POP
// if birds then
54536: LD_VAR 0 1
54540: IFFALSE 54607
// for i = 1 to birds do
54542: LD_ADDR_VAR 0 11
54546: PUSH
54547: DOUBLE
54548: LD_INT 1
54550: DEC
54551: ST_TO_ADDR
54552: LD_VAR 0 1
54556: PUSH
54557: FOR_TO
54558: IFFALSE 54605
// begin hc_class = 18 ;
54560: LD_ADDR_OWVAR 28
54564: PUSH
54565: LD_INT 18
54567: ST_TO_ADDR
// hc_gallery =  ;
54568: LD_ADDR_OWVAR 33
54572: PUSH
54573: LD_STRING 
54575: ST_TO_ADDR
// animal := CreateHuman ;
54576: LD_ADDR_VAR 0 12
54580: PUSH
54581: CALL_OW 44
54585: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54586: LD_VAR 0 12
54590: PPUSH
54591: LD_VAR 0 8
54595: PPUSH
54596: LD_INT 0
54598: PPUSH
54599: CALL 56534 0 3
// end ;
54603: GO 54557
54605: POP
54606: POP
// if tigers then
54607: LD_VAR 0 2
54611: IFFALSE 54695
// for i = 1 to tigers do
54613: LD_ADDR_VAR 0 11
54617: PUSH
54618: DOUBLE
54619: LD_INT 1
54621: DEC
54622: ST_TO_ADDR
54623: LD_VAR 0 2
54627: PUSH
54628: FOR_TO
54629: IFFALSE 54693
// begin hc_class = class_tiger ;
54631: LD_ADDR_OWVAR 28
54635: PUSH
54636: LD_INT 14
54638: ST_TO_ADDR
// hc_gallery =  ;
54639: LD_ADDR_OWVAR 33
54643: PUSH
54644: LD_STRING 
54646: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54647: LD_ADDR_OWVAR 35
54651: PUSH
54652: LD_INT 7
54654: NEG
54655: PPUSH
54656: LD_INT 7
54658: PPUSH
54659: CALL_OW 12
54663: ST_TO_ADDR
// animal := CreateHuman ;
54664: LD_ADDR_VAR 0 12
54668: PUSH
54669: CALL_OW 44
54673: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54674: LD_VAR 0 12
54678: PPUSH
54679: LD_VAR 0 8
54683: PPUSH
54684: LD_INT 0
54686: PPUSH
54687: CALL 56534 0 3
// end ;
54691: GO 54628
54693: POP
54694: POP
// if apemans then
54695: LD_VAR 0 3
54699: IFFALSE 54822
// for i = 1 to apemans do
54701: LD_ADDR_VAR 0 11
54705: PUSH
54706: DOUBLE
54707: LD_INT 1
54709: DEC
54710: ST_TO_ADDR
54711: LD_VAR 0 3
54715: PUSH
54716: FOR_TO
54717: IFFALSE 54820
// begin hc_class = class_apeman ;
54719: LD_ADDR_OWVAR 28
54723: PUSH
54724: LD_INT 12
54726: ST_TO_ADDR
// hc_gallery =  ;
54727: LD_ADDR_OWVAR 33
54731: PUSH
54732: LD_STRING 
54734: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54735: LD_ADDR_OWVAR 35
54739: PUSH
54740: LD_INT 5
54742: NEG
54743: PPUSH
54744: LD_INT 5
54746: PPUSH
54747: CALL_OW 12
54751: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54752: LD_ADDR_OWVAR 31
54756: PUSH
54757: LD_INT 1
54759: PPUSH
54760: LD_INT 3
54762: PPUSH
54763: CALL_OW 12
54767: PUSH
54768: LD_INT 1
54770: PPUSH
54771: LD_INT 3
54773: PPUSH
54774: CALL_OW 12
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: ST_TO_ADDR
// animal := CreateHuman ;
54791: LD_ADDR_VAR 0 12
54795: PUSH
54796: CALL_OW 44
54800: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54801: LD_VAR 0 12
54805: PPUSH
54806: LD_VAR 0 8
54810: PPUSH
54811: LD_INT 0
54813: PPUSH
54814: CALL 56534 0 3
// end ;
54818: GO 54716
54820: POP
54821: POP
// if enchidnas then
54822: LD_VAR 0 4
54826: IFFALSE 54893
// for i = 1 to enchidnas do
54828: LD_ADDR_VAR 0 11
54832: PUSH
54833: DOUBLE
54834: LD_INT 1
54836: DEC
54837: ST_TO_ADDR
54838: LD_VAR 0 4
54842: PUSH
54843: FOR_TO
54844: IFFALSE 54891
// begin hc_class = 13 ;
54846: LD_ADDR_OWVAR 28
54850: PUSH
54851: LD_INT 13
54853: ST_TO_ADDR
// hc_gallery =  ;
54854: LD_ADDR_OWVAR 33
54858: PUSH
54859: LD_STRING 
54861: ST_TO_ADDR
// animal := CreateHuman ;
54862: LD_ADDR_VAR 0 12
54866: PUSH
54867: CALL_OW 44
54871: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54872: LD_VAR 0 12
54876: PPUSH
54877: LD_VAR 0 8
54881: PPUSH
54882: LD_INT 0
54884: PPUSH
54885: CALL 56534 0 3
// end ;
54889: GO 54843
54891: POP
54892: POP
// if fishes then
54893: LD_VAR 0 7
54897: IFFALSE 54964
// for i = 1 to fishes do
54899: LD_ADDR_VAR 0 11
54903: PUSH
54904: DOUBLE
54905: LD_INT 1
54907: DEC
54908: ST_TO_ADDR
54909: LD_VAR 0 7
54913: PUSH
54914: FOR_TO
54915: IFFALSE 54962
// begin hc_class = 20 ;
54917: LD_ADDR_OWVAR 28
54921: PUSH
54922: LD_INT 20
54924: ST_TO_ADDR
// hc_gallery =  ;
54925: LD_ADDR_OWVAR 33
54929: PUSH
54930: LD_STRING 
54932: ST_TO_ADDR
// animal := CreateHuman ;
54933: LD_ADDR_VAR 0 12
54937: PUSH
54938: CALL_OW 44
54942: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54943: LD_VAR 0 12
54947: PPUSH
54948: LD_VAR 0 9
54952: PPUSH
54953: LD_INT 0
54955: PPUSH
54956: CALL 56534 0 3
// end ;
54960: GO 54914
54962: POP
54963: POP
// end ;
54964: LD_VAR 0 10
54968: RET
// export function WantHeal ( sci , unit ) ; begin
54969: LD_INT 0
54971: PPUSH
// if GetTaskList ( sci ) > 0 then
54972: LD_VAR 0 1
54976: PPUSH
54977: CALL_OW 437
54981: PUSH
54982: LD_INT 0
54984: GREATER
54985: IFFALSE 55055
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54987: LD_VAR 0 1
54991: PPUSH
54992: CALL_OW 437
54996: PUSH
54997: LD_INT 1
54999: ARRAY
55000: PUSH
55001: LD_INT 1
55003: ARRAY
55004: PUSH
55005: LD_STRING l
55007: EQUAL
55008: PUSH
55009: LD_VAR 0 1
55013: PPUSH
55014: CALL_OW 437
55018: PUSH
55019: LD_INT 1
55021: ARRAY
55022: PUSH
55023: LD_INT 4
55025: ARRAY
55026: PUSH
55027: LD_VAR 0 2
55031: EQUAL
55032: AND
55033: IFFALSE 55045
// result := true else
55035: LD_ADDR_VAR 0 3
55039: PUSH
55040: LD_INT 1
55042: ST_TO_ADDR
55043: GO 55053
// result := false ;
55045: LD_ADDR_VAR 0 3
55049: PUSH
55050: LD_INT 0
55052: ST_TO_ADDR
// end else
55053: GO 55063
// result := false ;
55055: LD_ADDR_VAR 0 3
55059: PUSH
55060: LD_INT 0
55062: ST_TO_ADDR
// end ;
55063: LD_VAR 0 3
55067: RET
// export function HealTarget ( sci ) ; begin
55068: LD_INT 0
55070: PPUSH
// if not sci then
55071: LD_VAR 0 1
55075: NOT
55076: IFFALSE 55080
// exit ;
55078: GO 55145
// result := 0 ;
55080: LD_ADDR_VAR 0 2
55084: PUSH
55085: LD_INT 0
55087: ST_TO_ADDR
// if GetTaskList ( sci ) then
55088: LD_VAR 0 1
55092: PPUSH
55093: CALL_OW 437
55097: IFFALSE 55145
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55099: LD_VAR 0 1
55103: PPUSH
55104: CALL_OW 437
55108: PUSH
55109: LD_INT 1
55111: ARRAY
55112: PUSH
55113: LD_INT 1
55115: ARRAY
55116: PUSH
55117: LD_STRING l
55119: EQUAL
55120: IFFALSE 55145
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55122: LD_ADDR_VAR 0 2
55126: PUSH
55127: LD_VAR 0 1
55131: PPUSH
55132: CALL_OW 437
55136: PUSH
55137: LD_INT 1
55139: ARRAY
55140: PUSH
55141: LD_INT 4
55143: ARRAY
55144: ST_TO_ADDR
// end ;
55145: LD_VAR 0 2
55149: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55150: LD_INT 0
55152: PPUSH
55153: PPUSH
55154: PPUSH
55155: PPUSH
// if not base_units then
55156: LD_VAR 0 1
55160: NOT
55161: IFFALSE 55165
// exit ;
55163: GO 55252
// result := false ;
55165: LD_ADDR_VAR 0 2
55169: PUSH
55170: LD_INT 0
55172: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55173: LD_ADDR_VAR 0 5
55177: PUSH
55178: LD_VAR 0 1
55182: PPUSH
55183: LD_INT 21
55185: PUSH
55186: LD_INT 3
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PPUSH
55193: CALL_OW 72
55197: ST_TO_ADDR
// if not tmp then
55198: LD_VAR 0 5
55202: NOT
55203: IFFALSE 55207
// exit ;
55205: GO 55252
// for i in tmp do
55207: LD_ADDR_VAR 0 3
55211: PUSH
55212: LD_VAR 0 5
55216: PUSH
55217: FOR_IN
55218: IFFALSE 55250
// begin result := EnemyInRange ( i , 22 ) ;
55220: LD_ADDR_VAR 0 2
55224: PUSH
55225: LD_VAR 0 3
55229: PPUSH
55230: LD_INT 22
55232: PPUSH
55233: CALL 53488 0 2
55237: ST_TO_ADDR
// if result then
55238: LD_VAR 0 2
55242: IFFALSE 55248
// exit ;
55244: POP
55245: POP
55246: GO 55252
// end ;
55248: GO 55217
55250: POP
55251: POP
// end ;
55252: LD_VAR 0 2
55256: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55257: LD_INT 0
55259: PPUSH
55260: PPUSH
// if not units then
55261: LD_VAR 0 1
55265: NOT
55266: IFFALSE 55270
// exit ;
55268: GO 55340
// result := [ ] ;
55270: LD_ADDR_VAR 0 3
55274: PUSH
55275: EMPTY
55276: ST_TO_ADDR
// for i in units do
55277: LD_ADDR_VAR 0 4
55281: PUSH
55282: LD_VAR 0 1
55286: PUSH
55287: FOR_IN
55288: IFFALSE 55338
// if GetTag ( i ) = tag then
55290: LD_VAR 0 4
55294: PPUSH
55295: CALL_OW 110
55299: PUSH
55300: LD_VAR 0 2
55304: EQUAL
55305: IFFALSE 55336
// result := Insert ( result , result + 1 , i ) ;
55307: LD_ADDR_VAR 0 3
55311: PUSH
55312: LD_VAR 0 3
55316: PPUSH
55317: LD_VAR 0 3
55321: PUSH
55322: LD_INT 1
55324: PLUS
55325: PPUSH
55326: LD_VAR 0 4
55330: PPUSH
55331: CALL_OW 2
55335: ST_TO_ADDR
55336: GO 55287
55338: POP
55339: POP
// end ;
55340: LD_VAR 0 3
55344: RET
// export function IsDriver ( un ) ; begin
55345: LD_INT 0
55347: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55348: LD_ADDR_VAR 0 2
55352: PUSH
55353: LD_VAR 0 1
55357: PUSH
55358: LD_INT 55
55360: PUSH
55361: EMPTY
55362: LIST
55363: PPUSH
55364: CALL_OW 69
55368: IN
55369: ST_TO_ADDR
// end ;
55370: LD_VAR 0 2
55374: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55375: LD_INT 0
55377: PPUSH
55378: PPUSH
// list := [ ] ;
55379: LD_ADDR_VAR 0 5
55383: PUSH
55384: EMPTY
55385: ST_TO_ADDR
// case d of 0 :
55386: LD_VAR 0 3
55390: PUSH
55391: LD_INT 0
55393: DOUBLE
55394: EQUAL
55395: IFTRUE 55399
55397: GO 55532
55399: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55400: LD_ADDR_VAR 0 5
55404: PUSH
55405: LD_VAR 0 1
55409: PUSH
55410: LD_INT 4
55412: MINUS
55413: PUSH
55414: LD_VAR 0 2
55418: PUSH
55419: LD_INT 4
55421: MINUS
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: LIST
55430: PUSH
55431: LD_VAR 0 1
55435: PUSH
55436: LD_INT 3
55438: MINUS
55439: PUSH
55440: LD_VAR 0 2
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: LIST
55452: PUSH
55453: LD_VAR 0 1
55457: PUSH
55458: LD_INT 4
55460: PLUS
55461: PUSH
55462: LD_VAR 0 2
55466: PUSH
55467: LD_INT 4
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: LIST
55474: PUSH
55475: LD_VAR 0 1
55479: PUSH
55480: LD_INT 3
55482: PLUS
55483: PUSH
55484: LD_VAR 0 2
55488: PUSH
55489: LD_INT 3
55491: PLUS
55492: PUSH
55493: LD_INT 5
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: LIST
55500: PUSH
55501: LD_VAR 0 1
55505: PUSH
55506: LD_VAR 0 2
55510: PUSH
55511: LD_INT 4
55513: PLUS
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: LIST
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: ST_TO_ADDR
// end ; 1 :
55530: GO 56230
55532: LD_INT 1
55534: DOUBLE
55535: EQUAL
55536: IFTRUE 55540
55538: GO 55673
55540: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55541: LD_ADDR_VAR 0 5
55545: PUSH
55546: LD_VAR 0 1
55550: PUSH
55551: LD_VAR 0 2
55555: PUSH
55556: LD_INT 4
55558: MINUS
55559: PUSH
55560: LD_INT 3
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: LIST
55567: PUSH
55568: LD_VAR 0 1
55572: PUSH
55573: LD_INT 3
55575: MINUS
55576: PUSH
55577: LD_VAR 0 2
55581: PUSH
55582: LD_INT 3
55584: MINUS
55585: PUSH
55586: LD_INT 2
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: LIST
55593: PUSH
55594: LD_VAR 0 1
55598: PUSH
55599: LD_INT 4
55601: MINUS
55602: PUSH
55603: LD_VAR 0 2
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: LIST
55615: PUSH
55616: LD_VAR 0 1
55620: PUSH
55621: LD_VAR 0 2
55625: PUSH
55626: LD_INT 3
55628: PLUS
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: LIST
55637: PUSH
55638: LD_VAR 0 1
55642: PUSH
55643: LD_INT 4
55645: PLUS
55646: PUSH
55647: LD_VAR 0 2
55651: PUSH
55652: LD_INT 4
55654: PLUS
55655: PUSH
55656: LD_INT 5
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: LIST
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: ST_TO_ADDR
// end ; 2 :
55671: GO 56230
55673: LD_INT 2
55675: DOUBLE
55676: EQUAL
55677: IFTRUE 55681
55679: GO 55810
55681: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55682: LD_ADDR_VAR 0 5
55686: PUSH
55687: LD_VAR 0 1
55691: PUSH
55692: LD_VAR 0 2
55696: PUSH
55697: LD_INT 3
55699: MINUS
55700: PUSH
55701: LD_INT 3
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: LIST
55708: PUSH
55709: LD_VAR 0 1
55713: PUSH
55714: LD_INT 4
55716: PLUS
55717: PUSH
55718: LD_VAR 0 2
55722: PUSH
55723: LD_INT 4
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: LIST
55730: PUSH
55731: LD_VAR 0 1
55735: PUSH
55736: LD_VAR 0 2
55740: PUSH
55741: LD_INT 4
55743: PLUS
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: LIST
55752: PUSH
55753: LD_VAR 0 1
55757: PUSH
55758: LD_INT 3
55760: MINUS
55761: PUSH
55762: LD_VAR 0 2
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: LIST
55774: PUSH
55775: LD_VAR 0 1
55779: PUSH
55780: LD_INT 4
55782: MINUS
55783: PUSH
55784: LD_VAR 0 2
55788: PUSH
55789: LD_INT 4
55791: MINUS
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: LIST
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: ST_TO_ADDR
// end ; 3 :
55808: GO 56230
55810: LD_INT 3
55812: DOUBLE
55813: EQUAL
55814: IFTRUE 55818
55816: GO 55951
55818: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55819: LD_ADDR_VAR 0 5
55823: PUSH
55824: LD_VAR 0 1
55828: PUSH
55829: LD_INT 3
55831: PLUS
55832: PUSH
55833: LD_VAR 0 2
55837: PUSH
55838: LD_INT 4
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: LIST
55845: PUSH
55846: LD_VAR 0 1
55850: PUSH
55851: LD_INT 4
55853: PLUS
55854: PUSH
55855: LD_VAR 0 2
55859: PUSH
55860: LD_INT 4
55862: PLUS
55863: PUSH
55864: LD_INT 5
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: LIST
55871: PUSH
55872: LD_VAR 0 1
55876: PUSH
55877: LD_INT 4
55879: MINUS
55880: PUSH
55881: LD_VAR 0 2
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: LIST
55893: PUSH
55894: LD_VAR 0 1
55898: PUSH
55899: LD_VAR 0 2
55903: PUSH
55904: LD_INT 4
55906: MINUS
55907: PUSH
55908: LD_INT 3
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: LIST
55915: PUSH
55916: LD_VAR 0 1
55920: PUSH
55921: LD_INT 3
55923: MINUS
55924: PUSH
55925: LD_VAR 0 2
55929: PUSH
55930: LD_INT 3
55932: MINUS
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: LIST
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// end ; 4 :
55949: GO 56230
55951: LD_INT 4
55953: DOUBLE
55954: EQUAL
55955: IFTRUE 55959
55957: GO 56092
55959: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55960: LD_ADDR_VAR 0 5
55964: PUSH
55965: LD_VAR 0 1
55969: PUSH
55970: LD_VAR 0 2
55974: PUSH
55975: LD_INT 4
55977: PLUS
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: LIST
55986: PUSH
55987: LD_VAR 0 1
55991: PUSH
55992: LD_INT 3
55994: PLUS
55995: PUSH
55996: LD_VAR 0 2
56000: PUSH
56001: LD_INT 3
56003: PLUS
56004: PUSH
56005: LD_INT 5
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: LIST
56012: PUSH
56013: LD_VAR 0 1
56017: PUSH
56018: LD_INT 4
56020: PLUS
56021: PUSH
56022: LD_VAR 0 2
56026: PUSH
56027: LD_INT 4
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: LIST
56034: PUSH
56035: LD_VAR 0 1
56039: PUSH
56040: LD_VAR 0 2
56044: PUSH
56045: LD_INT 3
56047: MINUS
56048: PUSH
56049: LD_INT 3
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: LIST
56056: PUSH
56057: LD_VAR 0 1
56061: PUSH
56062: LD_INT 4
56064: MINUS
56065: PUSH
56066: LD_VAR 0 2
56070: PUSH
56071: LD_INT 4
56073: MINUS
56074: PUSH
56075: LD_INT 2
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: LIST
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: ST_TO_ADDR
// end ; 5 :
56090: GO 56230
56092: LD_INT 5
56094: DOUBLE
56095: EQUAL
56096: IFTRUE 56100
56098: GO 56229
56100: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56101: LD_ADDR_VAR 0 5
56105: PUSH
56106: LD_VAR 0 1
56110: PUSH
56111: LD_INT 4
56113: MINUS
56114: PUSH
56115: LD_VAR 0 2
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: LIST
56127: PUSH
56128: LD_VAR 0 1
56132: PUSH
56133: LD_VAR 0 2
56137: PUSH
56138: LD_INT 4
56140: MINUS
56141: PUSH
56142: LD_INT 3
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: LIST
56149: PUSH
56150: LD_VAR 0 1
56154: PUSH
56155: LD_INT 4
56157: PLUS
56158: PUSH
56159: LD_VAR 0 2
56163: PUSH
56164: LD_INT 4
56166: PLUS
56167: PUSH
56168: LD_INT 5
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: LIST
56175: PUSH
56176: LD_VAR 0 1
56180: PUSH
56181: LD_INT 3
56183: PLUS
56184: PUSH
56185: LD_VAR 0 2
56189: PUSH
56190: LD_INT 4
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: LIST
56197: PUSH
56198: LD_VAR 0 1
56202: PUSH
56203: LD_VAR 0 2
56207: PUSH
56208: LD_INT 3
56210: PLUS
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: LIST
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: ST_TO_ADDR
// end ; end ;
56227: GO 56230
56229: POP
// result := list ;
56230: LD_ADDR_VAR 0 4
56234: PUSH
56235: LD_VAR 0 5
56239: ST_TO_ADDR
// end ;
56240: LD_VAR 0 4
56244: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56245: LD_INT 0
56247: PPUSH
56248: PPUSH
56249: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56250: LD_VAR 0 1
56254: NOT
56255: PUSH
56256: LD_VAR 0 2
56260: PUSH
56261: LD_INT 1
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: LD_INT 3
56269: PUSH
56270: LD_INT 4
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: IN
56279: NOT
56280: OR
56281: IFFALSE 56285
// exit ;
56283: GO 56377
// tmp := [ ] ;
56285: LD_ADDR_VAR 0 5
56289: PUSH
56290: EMPTY
56291: ST_TO_ADDR
// for i in units do
56292: LD_ADDR_VAR 0 4
56296: PUSH
56297: LD_VAR 0 1
56301: PUSH
56302: FOR_IN
56303: IFFALSE 56346
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56305: LD_ADDR_VAR 0 5
56309: PUSH
56310: LD_VAR 0 5
56314: PPUSH
56315: LD_VAR 0 5
56319: PUSH
56320: LD_INT 1
56322: PLUS
56323: PPUSH
56324: LD_VAR 0 4
56328: PPUSH
56329: LD_VAR 0 2
56333: PPUSH
56334: CALL_OW 259
56338: PPUSH
56339: CALL_OW 2
56343: ST_TO_ADDR
56344: GO 56302
56346: POP
56347: POP
// if not tmp then
56348: LD_VAR 0 5
56352: NOT
56353: IFFALSE 56357
// exit ;
56355: GO 56377
// result := SortListByListDesc ( units , tmp ) ;
56357: LD_ADDR_VAR 0 3
56361: PUSH
56362: LD_VAR 0 1
56366: PPUSH
56367: LD_VAR 0 5
56371: PPUSH
56372: CALL_OW 77
56376: ST_TO_ADDR
// end ;
56377: LD_VAR 0 3
56381: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56382: LD_INT 0
56384: PPUSH
56385: PPUSH
56386: PPUSH
// x := GetX ( building ) ;
56387: LD_ADDR_VAR 0 4
56391: PUSH
56392: LD_VAR 0 2
56396: PPUSH
56397: CALL_OW 250
56401: ST_TO_ADDR
// y := GetY ( building ) ;
56402: LD_ADDR_VAR 0 5
56406: PUSH
56407: LD_VAR 0 2
56411: PPUSH
56412: CALL_OW 251
56416: ST_TO_ADDR
// if GetTaskList ( unit ) then
56417: LD_VAR 0 1
56421: PPUSH
56422: CALL_OW 437
56426: IFFALSE 56521
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56428: LD_STRING e
56430: PUSH
56431: LD_VAR 0 1
56435: PPUSH
56436: CALL_OW 437
56440: PUSH
56441: LD_INT 1
56443: ARRAY
56444: PUSH
56445: LD_INT 1
56447: ARRAY
56448: EQUAL
56449: PUSH
56450: LD_VAR 0 4
56454: PUSH
56455: LD_VAR 0 1
56459: PPUSH
56460: CALL_OW 437
56464: PUSH
56465: LD_INT 1
56467: ARRAY
56468: PUSH
56469: LD_INT 2
56471: ARRAY
56472: EQUAL
56473: AND
56474: PUSH
56475: LD_VAR 0 5
56479: PUSH
56480: LD_VAR 0 1
56484: PPUSH
56485: CALL_OW 437
56489: PUSH
56490: LD_INT 1
56492: ARRAY
56493: PUSH
56494: LD_INT 3
56496: ARRAY
56497: EQUAL
56498: AND
56499: IFFALSE 56511
// result := true else
56501: LD_ADDR_VAR 0 3
56505: PUSH
56506: LD_INT 1
56508: ST_TO_ADDR
56509: GO 56519
// result := false ;
56511: LD_ADDR_VAR 0 3
56515: PUSH
56516: LD_INT 0
56518: ST_TO_ADDR
// end else
56519: GO 56529
// result := false ;
56521: LD_ADDR_VAR 0 3
56525: PUSH
56526: LD_INT 0
56528: ST_TO_ADDR
// end ;
56529: LD_VAR 0 3
56533: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56534: LD_INT 0
56536: PPUSH
56537: PPUSH
56538: PPUSH
56539: PPUSH
// if not unit or not area then
56540: LD_VAR 0 1
56544: NOT
56545: PUSH
56546: LD_VAR 0 2
56550: NOT
56551: OR
56552: IFFALSE 56556
// exit ;
56554: GO 56720
// tmp := AreaToList ( area , i ) ;
56556: LD_ADDR_VAR 0 6
56560: PUSH
56561: LD_VAR 0 2
56565: PPUSH
56566: LD_VAR 0 5
56570: PPUSH
56571: CALL_OW 517
56575: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56576: LD_ADDR_VAR 0 5
56580: PUSH
56581: DOUBLE
56582: LD_INT 1
56584: DEC
56585: ST_TO_ADDR
56586: LD_VAR 0 6
56590: PUSH
56591: LD_INT 1
56593: ARRAY
56594: PUSH
56595: FOR_TO
56596: IFFALSE 56718
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56598: LD_ADDR_VAR 0 7
56602: PUSH
56603: LD_VAR 0 6
56607: PUSH
56608: LD_INT 1
56610: ARRAY
56611: PUSH
56612: LD_VAR 0 5
56616: ARRAY
56617: PUSH
56618: LD_VAR 0 6
56622: PUSH
56623: LD_INT 2
56625: ARRAY
56626: PUSH
56627: LD_VAR 0 5
56631: ARRAY
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56637: LD_VAR 0 7
56641: PUSH
56642: LD_INT 1
56644: ARRAY
56645: PPUSH
56646: LD_VAR 0 7
56650: PUSH
56651: LD_INT 2
56653: ARRAY
56654: PPUSH
56655: CALL_OW 428
56659: PUSH
56660: LD_INT 0
56662: EQUAL
56663: IFFALSE 56716
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56665: LD_VAR 0 1
56669: PPUSH
56670: LD_VAR 0 7
56674: PUSH
56675: LD_INT 1
56677: ARRAY
56678: PPUSH
56679: LD_VAR 0 7
56683: PUSH
56684: LD_INT 2
56686: ARRAY
56687: PPUSH
56688: LD_VAR 0 3
56692: PPUSH
56693: CALL_OW 48
// result := IsPlaced ( unit ) ;
56697: LD_ADDR_VAR 0 4
56701: PUSH
56702: LD_VAR 0 1
56706: PPUSH
56707: CALL_OW 305
56711: ST_TO_ADDR
// exit ;
56712: POP
56713: POP
56714: GO 56720
// end ; end ;
56716: GO 56595
56718: POP
56719: POP
// end ;
56720: LD_VAR 0 4
56724: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56725: LD_INT 0
56727: PPUSH
56728: PPUSH
56729: PPUSH
// if not side or side > 8 then
56730: LD_VAR 0 1
56734: NOT
56735: PUSH
56736: LD_VAR 0 1
56740: PUSH
56741: LD_INT 8
56743: GREATER
56744: OR
56745: IFFALSE 56749
// exit ;
56747: GO 56936
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56749: LD_ADDR_VAR 0 4
56753: PUSH
56754: LD_INT 22
56756: PUSH
56757: LD_VAR 0 1
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 21
56768: PUSH
56769: LD_INT 3
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PPUSH
56780: CALL_OW 69
56784: ST_TO_ADDR
// if not tmp then
56785: LD_VAR 0 4
56789: NOT
56790: IFFALSE 56794
// exit ;
56792: GO 56936
// enable_addtolog := true ;
56794: LD_ADDR_OWVAR 81
56798: PUSH
56799: LD_INT 1
56801: ST_TO_ADDR
// AddToLog ( [ ) ;
56802: LD_STRING [
56804: PPUSH
56805: CALL_OW 561
// for i in tmp do
56809: LD_ADDR_VAR 0 3
56813: PUSH
56814: LD_VAR 0 4
56818: PUSH
56819: FOR_IN
56820: IFFALSE 56927
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56822: LD_STRING [
56824: PUSH
56825: LD_VAR 0 3
56829: PPUSH
56830: CALL_OW 266
56834: STR
56835: PUSH
56836: LD_STRING , 
56838: STR
56839: PUSH
56840: LD_VAR 0 3
56844: PPUSH
56845: CALL_OW 250
56849: STR
56850: PUSH
56851: LD_STRING , 
56853: STR
56854: PUSH
56855: LD_VAR 0 3
56859: PPUSH
56860: CALL_OW 251
56864: STR
56865: PUSH
56866: LD_STRING , 
56868: STR
56869: PUSH
56870: LD_VAR 0 3
56874: PPUSH
56875: CALL_OW 254
56879: STR
56880: PUSH
56881: LD_STRING , 
56883: STR
56884: PUSH
56885: LD_VAR 0 3
56889: PPUSH
56890: LD_INT 1
56892: PPUSH
56893: CALL_OW 268
56897: STR
56898: PUSH
56899: LD_STRING , 
56901: STR
56902: PUSH
56903: LD_VAR 0 3
56907: PPUSH
56908: LD_INT 2
56910: PPUSH
56911: CALL_OW 268
56915: STR
56916: PUSH
56917: LD_STRING ],
56919: STR
56920: PPUSH
56921: CALL_OW 561
// end ;
56925: GO 56819
56927: POP
56928: POP
// AddToLog ( ]; ) ;
56929: LD_STRING ];
56931: PPUSH
56932: CALL_OW 561
// end ;
56936: LD_VAR 0 2
56940: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56941: LD_INT 0
56943: PPUSH
56944: PPUSH
56945: PPUSH
56946: PPUSH
56947: PPUSH
// if not area or not rate or not max then
56948: LD_VAR 0 1
56952: NOT
56953: PUSH
56954: LD_VAR 0 2
56958: NOT
56959: OR
56960: PUSH
56961: LD_VAR 0 4
56965: NOT
56966: OR
56967: IFFALSE 56971
// exit ;
56969: GO 57163
// while 1 do
56971: LD_INT 1
56973: IFFALSE 57163
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56975: LD_ADDR_VAR 0 9
56979: PUSH
56980: LD_VAR 0 1
56984: PPUSH
56985: LD_INT 1
56987: PPUSH
56988: CALL_OW 287
56992: PUSH
56993: LD_INT 10
56995: MUL
56996: ST_TO_ADDR
// r := rate / 10 ;
56997: LD_ADDR_VAR 0 7
57001: PUSH
57002: LD_VAR 0 2
57006: PUSH
57007: LD_INT 10
57009: DIVREAL
57010: ST_TO_ADDR
// time := 1 1$00 ;
57011: LD_ADDR_VAR 0 8
57015: PUSH
57016: LD_INT 2100
57018: ST_TO_ADDR
// if amount < min then
57019: LD_VAR 0 9
57023: PUSH
57024: LD_VAR 0 3
57028: LESS
57029: IFFALSE 57047
// r := r * 2 else
57031: LD_ADDR_VAR 0 7
57035: PUSH
57036: LD_VAR 0 7
57040: PUSH
57041: LD_INT 2
57043: MUL
57044: ST_TO_ADDR
57045: GO 57073
// if amount > max then
57047: LD_VAR 0 9
57051: PUSH
57052: LD_VAR 0 4
57056: GREATER
57057: IFFALSE 57073
// r := r / 2 ;
57059: LD_ADDR_VAR 0 7
57063: PUSH
57064: LD_VAR 0 7
57068: PUSH
57069: LD_INT 2
57071: DIVREAL
57072: ST_TO_ADDR
// time := time / r ;
57073: LD_ADDR_VAR 0 8
57077: PUSH
57078: LD_VAR 0 8
57082: PUSH
57083: LD_VAR 0 7
57087: DIVREAL
57088: ST_TO_ADDR
// if time < 0 then
57089: LD_VAR 0 8
57093: PUSH
57094: LD_INT 0
57096: LESS
57097: IFFALSE 57114
// time := time * - 1 ;
57099: LD_ADDR_VAR 0 8
57103: PUSH
57104: LD_VAR 0 8
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: MUL
57113: ST_TO_ADDR
// wait ( time ) ;
57114: LD_VAR 0 8
57118: PPUSH
57119: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57123: LD_INT 35
57125: PPUSH
57126: LD_INT 875
57128: PPUSH
57129: CALL_OW 12
57133: PPUSH
57134: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57138: LD_INT 1
57140: PPUSH
57141: LD_INT 5
57143: PPUSH
57144: CALL_OW 12
57148: PPUSH
57149: LD_VAR 0 1
57153: PPUSH
57154: LD_INT 1
57156: PPUSH
57157: CALL_OW 55
// end ;
57161: GO 56971
// end ;
57163: LD_VAR 0 5
57167: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57168: LD_INT 0
57170: PPUSH
57171: PPUSH
57172: PPUSH
57173: PPUSH
57174: PPUSH
57175: PPUSH
57176: PPUSH
57177: PPUSH
// if not turrets or not factories then
57178: LD_VAR 0 1
57182: NOT
57183: PUSH
57184: LD_VAR 0 2
57188: NOT
57189: OR
57190: IFFALSE 57194
// exit ;
57192: GO 57501
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57194: LD_ADDR_VAR 0 10
57198: PUSH
57199: LD_INT 5
57201: PUSH
57202: LD_INT 6
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: LD_INT 4
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 3
57221: PUSH
57222: LD_INT 5
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 24
57236: PUSH
57237: LD_INT 25
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 23
57246: PUSH
57247: LD_INT 27
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 42
57260: PUSH
57261: LD_INT 43
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 44
57270: PUSH
57271: LD_INT 46
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 45
57280: PUSH
57281: LD_INT 47
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: LIST
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: ST_TO_ADDR
// result := [ ] ;
57298: LD_ADDR_VAR 0 3
57302: PUSH
57303: EMPTY
57304: ST_TO_ADDR
// for i in turrets do
57305: LD_ADDR_VAR 0 4
57309: PUSH
57310: LD_VAR 0 1
57314: PUSH
57315: FOR_IN
57316: IFFALSE 57499
// begin nat := GetNation ( i ) ;
57318: LD_ADDR_VAR 0 7
57322: PUSH
57323: LD_VAR 0 4
57327: PPUSH
57328: CALL_OW 248
57332: ST_TO_ADDR
// weapon := 0 ;
57333: LD_ADDR_VAR 0 8
57337: PUSH
57338: LD_INT 0
57340: ST_TO_ADDR
// if not nat then
57341: LD_VAR 0 7
57345: NOT
57346: IFFALSE 57350
// continue ;
57348: GO 57315
// for j in list [ nat ] do
57350: LD_ADDR_VAR 0 5
57354: PUSH
57355: LD_VAR 0 10
57359: PUSH
57360: LD_VAR 0 7
57364: ARRAY
57365: PUSH
57366: FOR_IN
57367: IFFALSE 57408
// if GetBWeapon ( i ) = j [ 1 ] then
57369: LD_VAR 0 4
57373: PPUSH
57374: CALL_OW 269
57378: PUSH
57379: LD_VAR 0 5
57383: PUSH
57384: LD_INT 1
57386: ARRAY
57387: EQUAL
57388: IFFALSE 57406
// begin weapon := j [ 2 ] ;
57390: LD_ADDR_VAR 0 8
57394: PUSH
57395: LD_VAR 0 5
57399: PUSH
57400: LD_INT 2
57402: ARRAY
57403: ST_TO_ADDR
// break ;
57404: GO 57408
// end ;
57406: GO 57366
57408: POP
57409: POP
// if not weapon then
57410: LD_VAR 0 8
57414: NOT
57415: IFFALSE 57419
// continue ;
57417: GO 57315
// for k in factories do
57419: LD_ADDR_VAR 0 6
57423: PUSH
57424: LD_VAR 0 2
57428: PUSH
57429: FOR_IN
57430: IFFALSE 57495
// begin weapons := AvailableWeaponList ( k ) ;
57432: LD_ADDR_VAR 0 9
57436: PUSH
57437: LD_VAR 0 6
57441: PPUSH
57442: CALL_OW 478
57446: ST_TO_ADDR
// if not weapons then
57447: LD_VAR 0 9
57451: NOT
57452: IFFALSE 57456
// continue ;
57454: GO 57429
// if weapon in weapons then
57456: LD_VAR 0 8
57460: PUSH
57461: LD_VAR 0 9
57465: IN
57466: IFFALSE 57493
// begin result := [ i , weapon ] ;
57468: LD_ADDR_VAR 0 3
57472: PUSH
57473: LD_VAR 0 4
57477: PUSH
57478: LD_VAR 0 8
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: ST_TO_ADDR
// exit ;
57487: POP
57488: POP
57489: POP
57490: POP
57491: GO 57501
// end ; end ;
57493: GO 57429
57495: POP
57496: POP
// end ;
57497: GO 57315
57499: POP
57500: POP
// end ;
57501: LD_VAR 0 3
57505: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57506: LD_INT 0
57508: PPUSH
// if not side or side > 8 then
57509: LD_VAR 0 3
57513: NOT
57514: PUSH
57515: LD_VAR 0 3
57519: PUSH
57520: LD_INT 8
57522: GREATER
57523: OR
57524: IFFALSE 57528
// exit ;
57526: GO 57587
// if not range then
57528: LD_VAR 0 4
57532: NOT
57533: IFFALSE 57544
// range := - 12 ;
57535: LD_ADDR_VAR 0 4
57539: PUSH
57540: LD_INT 12
57542: NEG
57543: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57544: LD_VAR 0 1
57548: PPUSH
57549: LD_VAR 0 2
57553: PPUSH
57554: LD_VAR 0 3
57558: PPUSH
57559: LD_VAR 0 4
57563: PPUSH
57564: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57568: LD_VAR 0 1
57572: PPUSH
57573: LD_VAR 0 2
57577: PPUSH
57578: LD_VAR 0 3
57582: PPUSH
57583: CALL_OW 331
// end ;
57587: LD_VAR 0 5
57591: RET
// export function Video ( mode ) ; begin
57592: LD_INT 0
57594: PPUSH
// ingame_video = mode ;
57595: LD_ADDR_OWVAR 52
57599: PUSH
57600: LD_VAR 0 1
57604: ST_TO_ADDR
// interface_hidden = mode ;
57605: LD_ADDR_OWVAR 54
57609: PUSH
57610: LD_VAR 0 1
57614: ST_TO_ADDR
// end ;
57615: LD_VAR 0 2
57619: RET
// export function Join ( array , element ) ; begin
57620: LD_INT 0
57622: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57623: LD_ADDR_VAR 0 3
57627: PUSH
57628: LD_VAR 0 1
57632: PPUSH
57633: LD_VAR 0 1
57637: PUSH
57638: LD_INT 1
57640: PLUS
57641: PPUSH
57642: LD_VAR 0 2
57646: PPUSH
57647: CALL_OW 1
57651: ST_TO_ADDR
// end ;
57652: LD_VAR 0 3
57656: RET
// export function JoinUnion ( array , element ) ; begin
57657: LD_INT 0
57659: PPUSH
// result := array union element ;
57660: LD_ADDR_VAR 0 3
57664: PUSH
57665: LD_VAR 0 1
57669: PUSH
57670: LD_VAR 0 2
57674: UNION
57675: ST_TO_ADDR
// end ;
57676: LD_VAR 0 3
57680: RET
// export function GetBehemoths ( side ) ; begin
57681: LD_INT 0
57683: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57684: LD_ADDR_VAR 0 2
57688: PUSH
57689: LD_INT 22
57691: PUSH
57692: LD_VAR 0 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 31
57703: PUSH
57704: LD_INT 25
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PPUSH
57715: CALL_OW 69
57719: ST_TO_ADDR
// end ;
57720: LD_VAR 0 2
57724: RET
// export function Shuffle ( array ) ; var i , index ; begin
57725: LD_INT 0
57727: PPUSH
57728: PPUSH
57729: PPUSH
// result := [ ] ;
57730: LD_ADDR_VAR 0 2
57734: PUSH
57735: EMPTY
57736: ST_TO_ADDR
// if not array then
57737: LD_VAR 0 1
57741: NOT
57742: IFFALSE 57746
// exit ;
57744: GO 57845
// Randomize ;
57746: CALL_OW 10
// for i = array downto 1 do
57750: LD_ADDR_VAR 0 3
57754: PUSH
57755: DOUBLE
57756: LD_VAR 0 1
57760: INC
57761: ST_TO_ADDR
57762: LD_INT 1
57764: PUSH
57765: FOR_DOWNTO
57766: IFFALSE 57843
// begin index := rand ( 1 , array ) ;
57768: LD_ADDR_VAR 0 4
57772: PUSH
57773: LD_INT 1
57775: PPUSH
57776: LD_VAR 0 1
57780: PPUSH
57781: CALL_OW 12
57785: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57786: LD_ADDR_VAR 0 2
57790: PUSH
57791: LD_VAR 0 2
57795: PPUSH
57796: LD_VAR 0 2
57800: PUSH
57801: LD_INT 1
57803: PLUS
57804: PPUSH
57805: LD_VAR 0 1
57809: PUSH
57810: LD_VAR 0 4
57814: ARRAY
57815: PPUSH
57816: CALL_OW 2
57820: ST_TO_ADDR
// array := Delete ( array , index ) ;
57821: LD_ADDR_VAR 0 1
57825: PUSH
57826: LD_VAR 0 1
57830: PPUSH
57831: LD_VAR 0 4
57835: PPUSH
57836: CALL_OW 3
57840: ST_TO_ADDR
// end ;
57841: GO 57765
57843: POP
57844: POP
// end ;
57845: LD_VAR 0 2
57849: RET
// export function GetBaseMaterials ( base ) ; begin
57850: LD_INT 0
57852: PPUSH
// result := [ 0 , 0 , 0 ] ;
57853: LD_ADDR_VAR 0 2
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: LIST
57871: ST_TO_ADDR
// if not base then
57872: LD_VAR 0 1
57876: NOT
57877: IFFALSE 57881
// exit ;
57879: GO 57930
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57881: LD_ADDR_VAR 0 2
57885: PUSH
57886: LD_VAR 0 1
57890: PPUSH
57891: LD_INT 1
57893: PPUSH
57894: CALL_OW 275
57898: PUSH
57899: LD_VAR 0 1
57903: PPUSH
57904: LD_INT 2
57906: PPUSH
57907: CALL_OW 275
57911: PUSH
57912: LD_VAR 0 1
57916: PPUSH
57917: LD_INT 3
57919: PPUSH
57920: CALL_OW 275
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: LIST
57929: ST_TO_ADDR
// end ;
57930: LD_VAR 0 2
57934: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57935: LD_INT 0
57937: PPUSH
57938: PPUSH
// result := array ;
57939: LD_ADDR_VAR 0 3
57943: PUSH
57944: LD_VAR 0 1
57948: ST_TO_ADDR
// if size > 0 then
57949: LD_VAR 0 2
57953: PUSH
57954: LD_INT 0
57956: GREATER
57957: IFFALSE 58003
// for i := array downto size do
57959: LD_ADDR_VAR 0 4
57963: PUSH
57964: DOUBLE
57965: LD_VAR 0 1
57969: INC
57970: ST_TO_ADDR
57971: LD_VAR 0 2
57975: PUSH
57976: FOR_DOWNTO
57977: IFFALSE 58001
// result := Delete ( result , result ) ;
57979: LD_ADDR_VAR 0 3
57983: PUSH
57984: LD_VAR 0 3
57988: PPUSH
57989: LD_VAR 0 3
57993: PPUSH
57994: CALL_OW 3
57998: ST_TO_ADDR
57999: GO 57976
58001: POP
58002: POP
// end ;
58003: LD_VAR 0 3
58007: RET
// export function ComExit ( unit ) ; var tmp ; begin
58008: LD_INT 0
58010: PPUSH
58011: PPUSH
// if not IsInUnit ( unit ) then
58012: LD_VAR 0 1
58016: PPUSH
58017: CALL_OW 310
58021: NOT
58022: IFFALSE 58026
// exit ;
58024: GO 58086
// tmp := IsInUnit ( unit ) ;
58026: LD_ADDR_VAR 0 3
58030: PUSH
58031: LD_VAR 0 1
58035: PPUSH
58036: CALL_OW 310
58040: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58041: LD_VAR 0 3
58045: PPUSH
58046: CALL_OW 247
58050: PUSH
58051: LD_INT 2
58053: EQUAL
58054: IFFALSE 58067
// ComExitVehicle ( unit ) else
58056: LD_VAR 0 1
58060: PPUSH
58061: CALL_OW 121
58065: GO 58076
// ComExitBuilding ( unit ) ;
58067: LD_VAR 0 1
58071: PPUSH
58072: CALL_OW 122
// result := tmp ;
58076: LD_ADDR_VAR 0 2
58080: PUSH
58081: LD_VAR 0 3
58085: ST_TO_ADDR
// end ;
58086: LD_VAR 0 2
58090: RET
// export function ResetHc ; begin
58091: LD_INT 0
58093: PPUSH
// InitHc ;
58094: CALL_OW 19
// hc_importance := 0 ;
58098: LD_ADDR_OWVAR 32
58102: PUSH
58103: LD_INT 0
58105: ST_TO_ADDR
// end ;
58106: LD_VAR 0 1
58110: RET
