// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 64840 0 9
// PrepareAmerican ;
  46: CALL 4291 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 927 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 29999 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 29999 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnitForce ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 30083 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 455
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 417
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 415
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: IFFALSE 382
 367: PUSH
 368: LD_VAR 0 3
 372: PPUSH
 373: CALL_OW 258
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: AND
 382: IFFALSE 399
 384: PUSH
 385: LD_VAR 0 3
 389: PPUSH
 390: CALL_OW 248
 394: PUSH
 395: LD_INT 3
 397: EQUAL
 398: AND
 399: IFFALSE 413
// begin RuSci := i ;
 401: LD_ADDR_EXP 17
 405: PUSH
 406: LD_VAR 0 3
 410: ST_TO_ADDR
// break ;
 411: GO 415
// end ;
 413: GO 349
 415: POP
 416: POP
// end ; if not RuSci then
 417: LD_EXP 17
 421: NOT
 422: IFFALSE 455
// begin uc_nation := 3 ;
 424: LD_ADDR_OWVAR 21
 428: PUSH
 429: LD_INT 3
 431: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 432: LD_INT 1
 434: PPUSH
 435: LD_INT 4
 437: PPUSH
 438: LD_INT 10
 440: PPUSH
 441: CALL_OW 380
// RuSci := CreateHuman ;
 445: LD_ADDR_EXP 17
 449: PUSH
 450: CALL_OW 44
 454: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 455: LD_ADDR_VAR 0 6
 459: PUSH
 460: LD_STRING 14a_JMMVeh
 462: PPUSH
 463: LD_INT 5
 465: PUSH
 466: LD_INT 3
 468: PUSH
 469: LD_INT 1
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: PPUSH
 489: CALL_OW 30
 493: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 494: LD_ADDR_VAR 0 7
 498: PUSH
 499: LD_STRING 14a_BurlakVeh
 501: PPUSH
 502: LD_INT 22
 504: PUSH
 505: LD_INT 3
 507: PUSH
 508: LD_INT 1
 510: PUSH
 511: LD_INT 51
 513: PUSH
 514: LD_INT 0
 516: PUSH
 517: LD_INT 3
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: PPUSH
 528: CALL_OW 30
 532: ST_TO_ADDR
// uc_direction := 4 ;
 533: LD_ADDR_OWVAR 24
 537: PUSH
 538: LD_INT 4
 540: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 541: LD_ADDR_OWVAR 21
 545: PUSH
 546: LD_VAR 0 6
 550: PUSH
 551: LD_INT 6
 553: ARRAY
 554: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 555: LD_VAR 0 6
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_VAR 0 6
 568: PUSH
 569: LD_INT 2
 571: ARRAY
 572: PPUSH
 573: LD_VAR 0 6
 577: PUSH
 578: LD_INT 3
 580: ARRAY
 581: PPUSH
 582: LD_VAR 0 6
 586: PUSH
 587: LD_INT 4
 589: ARRAY
 590: PPUSH
 591: LD_INT 60
 593: PPUSH
 594: LD_INT 80
 596: PPUSH
 597: CALL_OW 12
 601: PPUSH
 602: CALL 35019 0 5
// JMMVeh := CreateVehicle ;
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: CALL_OW 45
 615: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 616: LD_VAR 0 4
 620: PPUSH
 621: LD_INT 1
 623: PPUSH
 624: LD_INT 0
 626: PPUSH
 627: CALL 67082 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 631: LD_VAR 0 6
 635: PUSH
 636: LD_INT 5
 638: ARRAY
 639: PUSH
 640: LD_INT 0
 642: NONEQUAL
 643: IFFALSE 663
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 645: LD_VAR 0 4
 649: PPUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 5
 657: ARRAY
 658: PPUSH
 659: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 663: LD_EXP 14
 667: PPUSH
 668: LD_VAR 0 4
 672: PPUSH
 673: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 677: LD_ADDR_OWVAR 21
 681: PUSH
 682: LD_VAR 0 7
 686: PUSH
 687: LD_INT 6
 689: ARRAY
 690: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 691: LD_VAR 0 7
 695: PUSH
 696: LD_INT 1
 698: ARRAY
 699: PPUSH
 700: LD_VAR 0 7
 704: PUSH
 705: LD_INT 2
 707: ARRAY
 708: PPUSH
 709: LD_VAR 0 7
 713: PUSH
 714: LD_INT 3
 716: ARRAY
 717: PPUSH
 718: LD_VAR 0 7
 722: PUSH
 723: LD_INT 4
 725: ARRAY
 726: PPUSH
 727: LD_INT 60
 729: PPUSH
 730: LD_INT 80
 732: PPUSH
 733: CALL_OW 12
 737: PPUSH
 738: CALL 35019 0 5
// BurlakVeh := CreateVehicle ;
 742: LD_ADDR_VAR 0 5
 746: PUSH
 747: CALL_OW 45
 751: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 752: LD_VAR 0 5
 756: PPUSH
 757: LD_INT 1
 759: PPUSH
 760: LD_INT 0
 762: PPUSH
 763: CALL 67082 0 3
 767: NOT
 768: IFFALSE 788
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 770: LD_VAR 0 5
 774: PPUSH
 775: LD_INT 233
 777: PPUSH
 778: LD_INT 85
 780: PPUSH
 781: LD_INT 0
 783: PPUSH
 784: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 788: LD_VAR 0 7
 792: PUSH
 793: LD_INT 5
 795: ARRAY
 796: PUSH
 797: LD_INT 0
 799: NONEQUAL
 800: IFFALSE 820
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 802: LD_VAR 0 5
 806: PPUSH
 807: LD_VAR 0 7
 811: PUSH
 812: LD_INT 5
 814: ARRAY
 815: PPUSH
 816: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 820: LD_EXP 15
 824: PPUSH
 825: LD_VAR 0 5
 829: PPUSH
 830: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 834: LD_ADDR_VAR 0 2
 838: PUSH
 839: LD_INT 178
 841: PUSH
 842: LD_INT 91
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 137
 851: PUSH
 852: LD_INT 83
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 157
 861: PUSH
 862: LD_INT 75
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: LD_INT 162
 871: PUSH
 872: LD_INT 67
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: PUSH
 885: LD_OWVAR 67
 889: ARRAY
 890: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 891: LD_INT 4
 893: PPUSH
 894: LD_INT 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: PPUSH
 906: LD_VAR 0 2
 910: PUSH
 911: LD_INT 2
 913: ARRAY
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 58
// end ; end_of_file
 922: LD_VAR 0 1
 926: RET
// export function Action ; begin
 927: LD_INT 0
 929: PPUSH
// InGameOn ;
 930: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 934: LD_INT 221
 936: PPUSH
 937: LD_INT 80
 939: PPUSH
 940: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 944: LD_EXP 14
 948: PUSH
 949: LD_EXP 15
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PPUSH
 958: LD_INT 217
 960: PPUSH
 961: LD_INT 79
 963: PPUSH
 964: CALL_OW 111
// wait ( 0 0$7 ) ;
 968: LD_INT 245
 970: PPUSH
 971: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 975: LD_EXP 14
 979: PUSH
 980: LD_EXP 15
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PPUSH
 989: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 993: LD_EXP 15
 997: PPUSH
 998: LD_STRING D2-Bur-1
1000: PPUSH
1001: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1005: LD_EXP 14
1009: PPUSH
1010: LD_STRING D2-JMM-1
1012: PPUSH
1013: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1017: LD_INT 18
1019: PPUSH
1020: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1024: LD_EXP 15
1028: PPUSH
1029: LD_EXP 14
1033: PPUSH
1034: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1038: LD_EXP 15
1042: PPUSH
1043: LD_STRING D2-Bur-2
1045: PPUSH
1046: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1050: LD_EXP 15
1054: PPUSH
1055: LD_INT 21
1057: PUSH
1058: LD_INT 2
1060: PUSH
1061: EMPTY
1062: LIST
1063: LIST
1064: PPUSH
1065: CALL_OW 69
1069: PPUSH
1070: LD_EXP 15
1074: PPUSH
1075: CALL_OW 74
1079: PPUSH
1080: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1084: LD_EXP 14
1088: PPUSH
1089: LD_INT 21
1091: PUSH
1092: LD_INT 2
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: PPUSH
1099: CALL_OW 69
1103: PPUSH
1104: LD_EXP 14
1108: PPUSH
1109: CALL_OW 74
1113: PPUSH
1114: CALL_OW 120
// wait ( 0 0$1 ) ;
1118: LD_INT 35
1120: PPUSH
1121: CALL_OW 67
// InGameOff ;
1125: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1129: LD_STRING MArtPickup
1131: PPUSH
1132: CALL_OW 337
// end ;
1136: LD_VAR 0 1
1140: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1141: LD_EXP 22
1145: PPUSH
1146: LD_INT 101
1148: PUSH
1149: LD_INT 7
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PPUSH
1156: CALL_OW 72
1160: IFFALSE 1169
1162: PUSH
1163: LD_EXP 8
1167: NOT
1168: AND
1169: IFFALSE 1198
1171: GO 1173
1173: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1174: LD_EXP 15
1178: PPUSH
1179: LD_STRING D3-Bur-1
1181: PPUSH
1182: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1186: LD_EXP 14
1190: PPUSH
1191: LD_STRING D3-JMM-1
1193: PPUSH
1194: CALL_OW 88
// end ;
1198: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1199: LD_INT 5
1201: PPUSH
1202: LD_INT 22
1204: PUSH
1205: LD_INT 7
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PPUSH
1212: CALL_OW 70
1216: IFFALSE 1551
1218: GO 1220
1220: DISABLE
// begin wait ( 0 0$3 ) ;
1221: LD_INT 105
1223: PPUSH
1224: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1228: LD_INT 139
1230: PPUSH
1231: LD_INT 43
1233: PPUSH
1234: LD_INT 7
1236: PPUSH
1237: LD_INT 20
1239: NEG
1240: PPUSH
1241: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1245: LD_INT 139
1247: PPUSH
1248: LD_INT 43
1250: PPUSH
1251: LD_INT 7
1253: PPUSH
1254: CALL_OW 331
// DialogueOn ;
1258: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1262: LD_EXP 14
1266: PPUSH
1267: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1271: LD_EXP 14
1275: PPUSH
1276: LD_STRING D3a-JMM-1
1278: PPUSH
1279: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1283: LD_EXP 15
1287: PPUSH
1288: LD_STRING D3a-Bur-1
1290: PPUSH
1291: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1295: LD_EXP 14
1299: PPUSH
1300: LD_STRING D3a-JMM-2
1302: PPUSH
1303: CALL_OW 88
// if Joan then
1307: LD_EXP 16
1311: IFFALSE 1327
// SayRadio ( Joan , D3a-Joan-2 ) else
1313: LD_EXP 16
1317: PPUSH
1318: LD_STRING D3a-Joan-2
1320: PPUSH
1321: CALL_OW 94
1325: GO 1339
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1327: LD_EXP 17
1331: PPUSH
1332: LD_STRING D3a-RSci1-2
1334: PPUSH
1335: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1339: LD_EXP 18
1343: PPUSH
1344: LD_STRING D3a-Huck-2
1346: PPUSH
1347: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1351: LD_EXP 19
1355: PPUSH
1356: LD_STRING D3a-Pow-2
1358: PPUSH
1359: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1363: LD_EXP 18
1367: PPUSH
1368: LD_STRING D3a-Huck-3
1370: PPUSH
1371: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1375: LD_EXP 19
1379: PPUSH
1380: LD_STRING D3a-Pow-3
1382: PPUSH
1383: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1387: LD_EXP 18
1391: PPUSH
1392: LD_STRING D3a-Huck-4
1394: PPUSH
1395: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1399: LD_EXP 14
1403: PPUSH
1404: LD_STRING D3a-JMM-4
1406: PPUSH
1407: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1411: LD_EXP 15
1415: PPUSH
1416: LD_STRING D3a-Bur-4
1418: PPUSH
1419: CALL_OW 88
// if Joan then
1423: LD_EXP 16
1427: IFFALSE 1443
// SayRadio ( Joan , D3a-Joan-4 ) else
1429: LD_EXP 16
1433: PPUSH
1434: LD_STRING D3a-Joan-4
1436: PPUSH
1437: CALL_OW 94
1441: GO 1455
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1443: LD_EXP 17
1447: PPUSH
1448: LD_STRING D3a-RSci1-4
1450: PPUSH
1451: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1455: LD_INT 133
1457: PPUSH
1458: LD_INT 43
1460: PPUSH
1461: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1465: LD_INT 10
1467: PPUSH
1468: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1472: LD_EXP 14
1476: PPUSH
1477: LD_STRING D3a-JMM-5
1479: PPUSH
1480: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1484: LD_EXP 15
1488: PPUSH
1489: LD_STRING D3a-Bur-5
1491: PPUSH
1492: CALL_OW 88
// DialogueOff ;
1496: CALL_OW 7
// seenBase := true ;
1500: LD_ADDR_EXP 8
1504: PUSH
1505: LD_INT 1
1507: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1508: LD_INT 525
1510: PUSH
1511: LD_INT 420
1513: PUSH
1514: LD_INT 315
1516: PUSH
1517: LD_INT 280
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: PUSH
1526: LD_OWVAR 67
1530: ARRAY
1531: PPUSH
1532: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1536: LD_EXP 21
1540: PPUSH
1541: LD_INT 142
1543: PPUSH
1544: LD_INT 52
1546: PPUSH
1547: CALL_OW 116
// end ;
1551: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1552: LD_EXP 8
1556: NOT
1557: IFFALSE 1566
1559: PUSH
1560: LD_EXP 4
1564: NOT
1565: AND
1566: IFFALSE 1586
1568: GO 1570
1570: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1571: LD_EXP 21
1575: PPUSH
1576: LD_INT 142
1578: PPUSH
1579: LD_INT 52
1581: PPUSH
1582: CALL_OW 116
1586: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1587: LD_INT 0
1589: PPUSH
1590: PPUSH
// contaminateTime := tick ;
1591: LD_ADDR_EXP 3
1595: PUSH
1596: LD_OWVAR 1
1600: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1601: LD_INT 175
1603: PPUSH
1604: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1608: LD_ADDR_VAR 0 5
1612: PUSH
1613: LD_INT 4
1615: PPUSH
1616: CALL_OW 469
1620: ST_TO_ADDR
// if art then
1621: LD_VAR 0 5
1625: IFFALSE 1680
// if art [ 1 ] in [ 157 , 162 ] and art [ 2 ] in [ 75 , 67 ] then
1627: LD_VAR 0 5
1631: PUSH
1632: LD_INT 1
1634: ARRAY
1635: PUSH
1636: LD_INT 157
1638: PUSH
1639: LD_INT 162
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: IN
1646: IFFALSE 1669
1648: PUSH
1649: LD_VAR 0 5
1653: PUSH
1654: LD_INT 2
1656: ARRAY
1657: PUSH
1658: LD_INT 75
1660: PUSH
1661: LD_INT 67
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: IN
1668: AND
1669: IFFALSE 1680
// begin YouLost ( Artefact ) ;
1671: LD_STRING Artefact
1673: PPUSH
1674: CALL_OW 104
// exit ;
1678: GO 1846
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1680: LD_EXP 14
1684: PPUSH
1685: CALL_OW 302
1689: IFFALSE 1702
1691: PUSH
1692: LD_EXP 15
1696: PPUSH
1697: CALL_OW 302
1701: AND
1702: IFFALSE 1779
// begin DialogueOn ;
1704: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1708: LD_EXP 14
1712: PPUSH
1713: LD_STRING D6a-JMM-1
1715: PPUSH
1716: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1720: LD_EXP 15
1724: PPUSH
1725: LD_STRING D6a-Bur-1
1727: PPUSH
1728: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1732: LD_EXP 14
1736: PPUSH
1737: LD_STRING D6c-JMM-1
1739: PPUSH
1740: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1744: LD_EXP 15
1748: PPUSH
1749: LD_STRING D6c-Bur-1
1751: PPUSH
1752: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1756: LD_EXP 14
1760: PPUSH
1761: LD_STRING D6c-JMM-2
1763: PPUSH
1764: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1768: LD_STRING MBase
1770: PPUSH
1771: CALL_OW 337
// DialogueOff ;
1775: CALL_OW 7
// end ; bombExploded := true ;
1779: LD_ADDR_EXP 4
1783: PUSH
1784: LD_INT 1
1786: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1787: LD_INT 6300
1789: PUSH
1790: LD_INT 5250
1792: PUSH
1793: LD_INT 4200
1795: PUSH
1796: LD_INT 3500
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: PUSH
1805: LD_OWVAR 67
1809: ARRAY
1810: PPUSH
1811: CALL_OW 67
// if planCaptured then
1815: LD_EXP 7
1819: IFFALSE 1823
// exit ;
1821: GO 1846
// if IsOk ( JMM ) then
1823: LD_EXP 14
1827: PPUSH
1828: CALL_OW 302
1832: IFFALSE 1846
// Say ( JMM , D8-JMM-1 ) ;
1834: LD_EXP 14
1838: PPUSH
1839: LD_STRING D8-JMM-1
1841: PPUSH
1842: CALL_OW 88
// end ;
1846: LD_VAR 0 4
1850: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1851: LD_EXP 9
1855: IFFALSE 1864
1857: PUSH
1858: LD_EXP 7
1862: NOT
1863: AND
1864: IFFALSE 1872
1866: PUSH
1867: LD_EXP 4
1871: AND
1872: IFFALSE 1927
1874: GO 1876
1876: DISABLE
// begin enable ;
1877: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1878: LD_INT 9
1880: PPUSH
1881: LD_INT 22
1883: PUSH
1884: LD_INT 7
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 70
1895: IFFALSE 1913
// stevensTimer := stevensTimer - 0 0$30 else
1897: LD_ADDR_EXP 9
1901: PUSH
1902: LD_EXP 9
1906: PUSH
1907: LD_INT 1050
1909: MINUS
1910: ST_TO_ADDR
1911: GO 1927
// stevensTimer := stevensTimer - 0 0$1 ;
1913: LD_ADDR_EXP 9
1917: PUSH
1918: LD_EXP 9
1922: PUSH
1923: LD_INT 35
1925: MINUS
1926: ST_TO_ADDR
// end ;
1927: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1928: LD_EXP 9
1932: PUSH
1933: LD_INT 0
1935: LESSEQUAL
1936: IFFALSE 1945
1938: PUSH
1939: LD_EXP 7
1943: NOT
1944: AND
1945: IFFALSE 2109
1947: GO 1949
1949: DISABLE
1950: LD_INT 0
1952: PPUSH
1953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1954: LD_ADDR_VAR 0 2
1958: PUSH
1959: LD_INT 22
1961: PUSH
1962: LD_INT 1
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: LD_INT 25
1971: PUSH
1972: LD_INT 4
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PPUSH
1983: CALL_OW 69
1987: ST_TO_ADDR
// for i in tmp do
1988: LD_ADDR_VAR 0 1
1992: PUSH
1993: LD_VAR 0 2
1997: PUSH
1998: FOR_IN
1999: IFFALSE 2052
// begin if IsInUnit ( i ) then
2001: LD_VAR 0 1
2005: PPUSH
2006: CALL_OW 310
2010: IFFALSE 2023
// ComExitBuilding ( i ) else
2012: LD_VAR 0 1
2016: PPUSH
2017: CALL_OW 122
2021: GO 2050
// if not HasTask ( i ) then
2023: LD_VAR 0 1
2027: PPUSH
2028: CALL_OW 314
2032: NOT
2033: IFFALSE 2050
// ComMoveXY ( i , 29 , 56 ) ;
2035: LD_VAR 0 1
2039: PPUSH
2040: LD_INT 29
2042: PPUSH
2043: LD_INT 56
2045: PPUSH
2046: CALL_OW 111
// end ;
2050: GO 1998
2052: POP
2053: POP
// repeat wait ( 0 0$1 ) ;
2054: LD_INT 35
2056: PPUSH
2057: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2061: LD_INT 8
2063: PPUSH
2064: LD_INT 22
2066: PUSH
2067: LD_INT 1
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PUSH
2074: LD_INT 25
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PPUSH
2088: CALL_OW 70
2092: IFFALSE 2054
// if planCaptured then
2094: LD_EXP 7
2098: IFFALSE 2102
// exit ;
2100: GO 2109
// YouLost ( Time ) ;
2102: LD_STRING Time
2104: PPUSH
2105: CALL_OW 104
// end ;
2109: PPOPN 2
2111: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2112: LD_INT 22
2114: PUSH
2115: LD_INT 7
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 92
2124: PUSH
2125: LD_INT 142
2127: PUSH
2128: LD_INT 52
2130: PUSH
2131: LD_INT 27
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PPUSH
2144: CALL_OW 69
2148: IFFALSE 2166
2150: PUSH
2151: LD_EXP 3
2155: PUSH
2156: LD_INT 6000
2158: PLUS
2159: PUSH
2160: LD_OWVAR 1
2164: GREATER
2165: AND
2166: IFFALSE 2174
2168: PUSH
2169: LD_EXP 4
2173: AND
2174: IFFALSE 2229
2176: GO 2178
2178: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2179: LD_EXP 14
2183: PUSH
2184: LD_EXP 15
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: PPUSH
2193: CALL_OW 85
// DialogueOn ;
2197: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2201: LD_EXP 14
2205: PPUSH
2206: LD_STRING D6b-JMM-1
2208: PPUSH
2209: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2213: LD_EXP 15
2217: PPUSH
2218: LD_STRING D6b-Bur-1
2220: PPUSH
2221: CALL_OW 88
// DialogueOff ;
2225: CALL_OW 7
// end ;
2229: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2230: LD_EXP 15
2234: PPUSH
2235: LD_INT 142
2237: PPUSH
2238: LD_INT 52
2240: PPUSH
2241: CALL_OW 297
2245: PUSH
2246: LD_INT 25
2248: LESS
2249: IFTRUE 2277
2251: PUSH
2252: LD_EXP 15
2256: PPUSH
2257: CALL_OW 310
2261: PPUSH
2262: LD_INT 142
2264: PPUSH
2265: LD_INT 52
2267: PPUSH
2268: CALL_OW 297
2272: PUSH
2273: LD_INT 25
2275: LESS
2276: OR
2277: IFFALSE 2294
2279: PUSH
2280: LD_EXP 15
2284: PPUSH
2285: CALL_OW 256
2289: PUSH
2290: LD_INT 1000
2292: LESS
2293: AND
2294: IFFALSE 2312
2296: PUSH
2297: LD_EXP 3
2301: PUSH
2302: LD_INT 6000
2304: PLUS
2305: PUSH
2306: LD_OWVAR 1
2310: GREATER
2311: AND
2312: IFFALSE 2320
2314: PUSH
2315: LD_EXP 4
2319: AND
2320: IFFALSE 2353
2322: GO 2324
2324: DISABLE
// begin DialogueOn ;
2325: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2329: LD_EXP 15
2333: PPUSH
2334: LD_STRING D7-Bur-1
2336: PPUSH
2337: CALL_OW 88
// enteredContaminatedArea := true ;
2341: LD_ADDR_EXP 5
2345: PUSH
2346: LD_INT 1
2348: ST_TO_ADDR
// DialogueOff ;
2349: CALL_OW 7
// end ;
2353: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2354: LD_EXP 14
2358: PPUSH
2359: LD_INT 142
2361: PPUSH
2362: LD_INT 52
2364: PPUSH
2365: CALL_OW 297
2369: PUSH
2370: LD_INT 25
2372: LESS
2373: IFTRUE 2401
2375: PUSH
2376: LD_EXP 14
2380: PPUSH
2381: CALL_OW 310
2385: PPUSH
2386: LD_INT 142
2388: PPUSH
2389: LD_INT 52
2391: PPUSH
2392: CALL_OW 297
2396: PUSH
2397: LD_INT 25
2399: LESS
2400: OR
2401: IFFALSE 2418
2403: PUSH
2404: LD_EXP 14
2408: PPUSH
2409: CALL_OW 256
2413: PUSH
2414: LD_INT 1000
2416: LESS
2417: AND
2418: IFFALSE 2436
2420: PUSH
2421: LD_EXP 3
2425: PUSH
2426: LD_INT 6000
2428: PLUS
2429: PUSH
2430: LD_OWVAR 1
2434: GREATER
2435: AND
2436: IFFALSE 2444
2438: PUSH
2439: LD_EXP 4
2443: AND
2444: IFFALSE 2477
2446: GO 2448
2448: DISABLE
// begin DialogueOn ;
2449: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2453: LD_EXP 14
2457: PPUSH
2458: LD_STRING D7-JMM-1
2460: PPUSH
2461: CALL_OW 88
// enteredContaminatedArea := true ;
2465: LD_ADDR_EXP 5
2469: PUSH
2470: LD_INT 1
2472: ST_TO_ADDR
// DialogueOff ;
2473: CALL_OW 7
// end ;
2477: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2478: LD_EXP 6
2482: IFFALSE 2495
2484: PUSH
2485: LD_EXP 14
2489: PPUSH
2490: CALL_OW 302
2494: AND
2495: IFFALSE 2508
2497: PUSH
2498: LD_EXP 15
2502: PPUSH
2503: CALL_OW 302
2507: AND
2508: IFFALSE 2577
2510: GO 2512
2512: DISABLE
// begin DialogueOn ;
2513: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2517: LD_EXP 14
2521: PUSH
2522: LD_EXP 15
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: PPUSH
2531: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2535: LD_EXP 14
2539: PPUSH
2540: LD_STRING D4-JMM-1
2542: PPUSH
2543: CALL_OW 88
// if not bombExploded then
2547: LD_EXP 4
2551: NOT
2552: IFFALSE 2566
// Say ( Burlak , D4-Bur-1 ) ;
2554: LD_EXP 15
2558: PPUSH
2559: LD_STRING D4-Bur-1
2561: PPUSH
2562: CALL_OW 88
// DialogueOff ;
2566: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2570: LD_STRING MReturn
2572: PPUSH
2573: CALL_OW 337
// end ;
2577: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2578: LD_EXP 7
2582: NOT
2583: IFFALSE 2619
2585: PUSH
2586: LD_INT 22
2588: PUSH
2589: LD_INT 7
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: PUSH
2596: LD_INT 91
2598: PUSH
2599: LD_INT 9
2601: PUSH
2602: LD_INT 6
2604: PUSH
2605: EMPTY
2606: LIST
2607: LIST
2608: LIST
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PPUSH
2614: CALL_OW 69
2618: AND
2619: IFFALSE 2696
2621: GO 2623
2623: DISABLE
// begin DialogueOn ;
2624: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2628: LD_INT 55
2630: PPUSH
2631: LD_INT 11
2633: PPUSH
2634: LD_INT 7
2636: PPUSH
2637: LD_INT 6
2639: NEG
2640: PPUSH
2641: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2645: LD_INT 55
2647: PPUSH
2648: LD_INT 11
2650: PPUSH
2651: LD_INT 7
2653: PPUSH
2654: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2658: LD_EXP 15
2662: PPUSH
2663: LD_STRING D9-Bur-1
2665: PPUSH
2666: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2670: LD_EXP 14
2674: PPUSH
2675: LD_STRING D9-JMM-1
2677: PPUSH
2678: CALL_OW 88
// DialogueOff ;
2682: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2686: LD_INT 9
2688: PPUSH
2689: LD_INT 7
2691: PPUSH
2692: CALL_OW 235
// end ;
2696: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2697: LD_INT 9
2699: PPUSH
2700: LD_INT 22
2702: PUSH
2703: LD_INT 7
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PPUSH
2710: CALL_OW 70
2714: IFFALSE 2750
2716: GO 2718
2718: DISABLE
// begin wait ( 0 0$07 ) ;
2719: LD_INT 245
2721: PPUSH
2722: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2726: LD_EXP 14
2730: PPUSH
2731: LD_STRING D10b-JMM-1
2733: PPUSH
2734: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2738: LD_EXP 15
2742: PPUSH
2743: LD_STRING D10b-Bur-1
2745: PPUSH
2746: CALL_OW 88
// end ;
2750: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2751: LD_EXP 9
2755: IFFALSE 2798
2757: PUSH
2758: LD_INT 22
2760: PUSH
2761: LD_INT 1
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: LD_INT 25
2770: PUSH
2771: LD_INT 4
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 26
2780: PUSH
2781: LD_INT 1
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: LIST
2792: PPUSH
2793: CALL_OW 69
2797: AND
2798: IFFALSE 2849
2800: PUSH
2801: LD_INT 5
2803: PPUSH
2804: CALL_OW 255
2808: PUSH
2809: LD_INT 7
2811: EQUAL
2812: IFTRUE 2848
2814: PUSH
2815: LD_INT 22
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 25
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PPUSH
2839: CALL_OW 69
2843: PUSH
2844: LD_INT 0
2846: EQUAL
2847: OR
2848: AND
2849: IFFALSE 3520
2851: GO 2853
2853: DISABLE
2854: LD_INT 0
2856: PPUSH
// begin case Query ( QKill ) of 1 :
2857: LD_STRING QKill
2859: PPUSH
2860: CALL_OW 97
2864: PUSH
2865: LD_INT 1
2867: DOUBLE
2868: EQUAL
2869: IFTRUE 2873
2871: GO 3508
2873: POP
// begin DialogueOn ;
2874: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2878: LD_EXP 14
2882: PPUSH
2883: LD_STRING D10a-JMM-1
2885: PPUSH
2886: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2890: LD_EXP 15
2894: PPUSH
2895: LD_STRING D10a-Bur-1
2897: PPUSH
2898: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2902: LD_EXP 14
2906: PPUSH
2907: LD_STRING D10a-JMM-2
2909: PPUSH
2910: CALL_OW 88
// if IsOk ( Stevens ) then
2914: LD_EXP 18
2918: PPUSH
2919: CALL_OW 302
2923: IFFALSE 2939
// Say ( Stevens , D10a-Huck-2 ) else
2925: LD_EXP 18
2929: PPUSH
2930: LD_STRING D10a-Huck-2
2932: PPUSH
2933: CALL_OW 88
2937: GO 3072
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) then
2939: LD_INT 22
2941: PUSH
2942: LD_INT 1
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PUSH
2949: LD_INT 25
2951: PUSH
2952: LD_INT 4
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PUSH
2959: LD_INT 26
2961: PUSH
2962: LD_INT 1
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: LIST
2973: PPUSH
2974: CALL_OW 69
2978: NOT
2979: IFFALSE 3021
// begin uc_side := 1 ;
2981: LD_ADDR_OWVAR 20
2985: PUSH
2986: LD_INT 1
2988: ST_TO_ADDR
// uc_nation := 1 ;
2989: LD_ADDR_OWVAR 21
2993: PUSH
2994: LD_INT 1
2996: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
2997: LD_INT 1
2999: PPUSH
3000: LD_INT 10
3002: PPUSH
3003: CALL_OW 384
// Say ( CreateHuman , D10a-ASci1-3 ) ;
3007: CALL_OW 44
3011: PPUSH
3012: LD_STRING D10a-ASci1-3
3014: PPUSH
3015: CALL_OW 88
// end else
3019: GO 3072
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
3021: LD_INT 22
3023: PUSH
3024: LD_INT 1
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 25
3033: PUSH
3034: LD_INT 4
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: PUSH
3041: LD_INT 26
3043: PUSH
3044: LD_INT 1
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: LIST
3055: PPUSH
3056: CALL_OW 69
3060: PUSH
3061: LD_INT 1
3063: ARRAY
3064: PPUSH
3065: LD_STRING D10a-ASci1-3
3067: PPUSH
3068: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
3072: LD_EXP 14
3076: PPUSH
3077: LD_STRING D10a-JMM-4
3079: PPUSH
3080: CALL_OW 88
// if IsOk ( Stevens ) then
3084: LD_EXP 18
3088: PPUSH
3089: CALL_OW 302
3093: IFFALSE 3107
// Say ( Stevens , D10a-Huck-3 ) ;
3095: LD_EXP 18
3099: PPUSH
3100: LD_STRING D10a-Huck-3
3102: PPUSH
3103: CALL_OW 88
// DialogueOff ;
3107: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
3111: LD_INT 1
3113: PPUSH
3114: LD_INT 7
3116: PPUSH
3117: LD_INT 1
3119: PPUSH
3120: LD_INT 1
3122: PPUSH
3123: CALL_OW 80
// planCaptured := true ;
3127: LD_ADDR_EXP 7
3131: PUSH
3132: LD_INT 1
3134: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
3135: LD_STRING MEnd
3137: PPUSH
3138: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
3142: LD_STRING ACH_DIPLOMACY
3144: PPUSH
3145: CALL_OW 543
// canEnd := true ;
3149: LD_ADDR_EXP 10
3153: PUSH
3154: LD_INT 1
3156: ST_TO_ADDR
// missionTime := tick ;
3157: LD_ADDR_EXP 11
3161: PUSH
3162: LD_OWVAR 1
3166: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3167: LD_INT 35
3169: PPUSH
3170: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3174: LD_INT 22
3176: PUSH
3177: LD_INT 1
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PUSH
3184: LD_INT 3
3186: PUSH
3187: LD_INT 50
3189: PUSH
3190: EMPTY
3191: LIST
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: PPUSH
3201: CALL_OW 69
3205: IFFALSE 3321
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3207: LD_ADDR_VAR 0 1
3211: PUSH
3212: LD_INT 22
3214: PUSH
3215: LD_INT 1
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: LD_INT 25
3224: PUSH
3225: LD_INT 4
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PPUSH
3236: CALL_OW 69
3240: PUSH
3241: FOR_IN
3242: IFFALSE 3319
// begin if IsInUnit ( i ) then
3244: LD_VAR 0 1
3248: PPUSH
3249: CALL_OW 310
3253: IFFALSE 3266
// ComExitBuilding ( i ) else
3255: LD_VAR 0 1
3259: PPUSH
3260: CALL_OW 122
3264: GO 3317
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3266: LD_VAR 0 1
3270: PPUSH
3271: LD_INT 22
3273: PUSH
3274: LD_INT 1
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 3
3283: PUSH
3284: LD_INT 50
3286: PUSH
3287: EMPTY
3288: LIST
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: PPUSH
3303: LD_VAR 0 1
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 128
// end ;
3317: GO 3241
3319: POP
3320: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3321: LD_INT 22
3323: PUSH
3324: LD_INT 1
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 3
3333: PUSH
3334: LD_INT 50
3336: PUSH
3337: EMPTY
3338: LIST
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PPUSH
3348: CALL_OW 69
3352: NOT
3353: IFFALSE 3167
// repeat wait ( 3 ) ;
3355: LD_INT 3
3357: PPUSH
3358: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3362: LD_ADDR_VAR 0 1
3366: PUSH
3367: LD_INT 22
3369: PUSH
3370: LD_INT 1
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 21
3379: PUSH
3380: LD_INT 1
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PPUSH
3391: CALL_OW 69
3395: PUSH
3396: FOR_IN
3397: IFFALSE 3473
// begin if IsInArea ( i , stevensEscapeArea ) then
3399: LD_VAR 0 1
3403: PPUSH
3404: LD_INT 8
3406: PPUSH
3407: CALL_OW 308
3411: IFFALSE 3424
// begin RemoveUnit ( i ) ;
3413: LD_VAR 0 1
3417: PPUSH
3418: CALL_OW 64
// continue ;
3422: GO 3396
// end ; if IsInUnit ( i ) then
3424: LD_VAR 0 1
3428: PPUSH
3429: CALL_OW 310
3433: IFFALSE 3444
// ComExitBuilding ( i ) ;
3435: LD_VAR 0 1
3439: PPUSH
3440: CALL_OW 122
// if not HasTask ( i ) then
3444: LD_VAR 0 1
3448: PPUSH
3449: CALL_OW 314
3453: NOT
3454: IFFALSE 3471
// ComMoveXY ( i , 28 , 55 ) ;
3456: LD_VAR 0 1
3460: PPUSH
3461: LD_INT 28
3463: PPUSH
3464: LD_INT 55
3466: PPUSH
3467: CALL_OW 111
// end ;
3471: GO 3396
3473: POP
3474: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3475: LD_INT 22
3477: PUSH
3478: LD_INT 1
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PUSH
3485: LD_INT 21
3487: PUSH
3488: LD_INT 1
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PPUSH
3499: CALL_OW 69
3503: NOT
3504: IFFALSE 3355
// end ; 2 :
3506: GO 3520
3508: LD_INT 2
3510: DOUBLE
3511: EQUAL
3512: IFTRUE 3516
3514: GO 3519
3516: POP
// ; end ;
3517: GO 3520
3519: POP
// end ;
3520: PPOPN 1
3522: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3523: LD_EXP 10
3527: IFFALSE 3884
3529: GO 3531
3531: DISABLE
3532: LD_INT 0
3534: PPUSH
3535: PPUSH
3536: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3537: LD_INT 10
3539: PPUSH
3540: LD_INT 1
3542: PPUSH
3543: CALL_OW 424
// if Difficulty < 2 then
3547: LD_OWVAR 67
3551: PUSH
3552: LD_INT 2
3554: LESS
3555: IFFALSE 3559
// exit ;
3557: GO 3884
// uc_side := 4 ;
3559: LD_ADDR_OWVAR 20
3563: PUSH
3564: LD_INT 4
3566: ST_TO_ADDR
// uc_nation := 1 ;
3567: LD_ADDR_OWVAR 21
3571: PUSH
3572: LD_INT 1
3574: ST_TO_ADDR
// InitHc ;
3575: CALL_OW 19
// tmp := [ ] ;
3579: LD_ADDR_VAR 0 3
3583: PUSH
3584: EMPTY
3585: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3586: LD_INT 0
3588: PPUSH
3589: LD_INT 5
3591: PPUSH
3592: LD_INT 10
3594: PPUSH
3595: CALL_OW 380
// un := CreateHuman ;
3599: LD_ADDR_VAR 0 1
3603: PUSH
3604: CALL_OW 44
3608: ST_TO_ADDR
// tmp := [ un ] ;
3609: LD_ADDR_VAR 0 3
3613: PUSH
3614: LD_VAR 0 1
3618: PUSH
3619: EMPTY
3620: LIST
3621: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3622: LD_VAR 0 1
3626: PPUSH
3627: LD_INT 226
3629: PPUSH
3630: LD_INT 86
3632: PPUSH
3633: LD_INT 0
3635: PPUSH
3636: CALL_OW 48
// ComHold ( un ) ;
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 140
// for i = 1 to 3 do
3649: LD_ADDR_VAR 0 2
3653: PUSH
3654: DOUBLE
3655: LD_INT 1
3657: DEC
3658: ST_TO_ADDR
3659: LD_INT 3
3661: PUSH
3662: FOR_TO
3663: IFFALSE 3762
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3665: LD_INT 0
3667: PPUSH
3668: LD_INT 1
3670: PPUSH
3671: LD_INT 8
3673: PPUSH
3674: CALL_OW 380
// un := CreateHuman ;
3678: LD_ADDR_VAR 0 1
3682: PUSH
3683: CALL_OW 44
3687: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3688: LD_VAR 0 1
3692: PPUSH
3693: LD_INT 5
3695: PPUSH
3696: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3700: LD_VAR 0 1
3704: PPUSH
3705: LD_INT 215
3707: PUSH
3708: LD_INT 217
3710: PUSH
3711: LD_INT 219
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: LIST
3718: PUSH
3719: LD_VAR 0 2
3723: ARRAY
3724: PPUSH
3725: LD_INT 76
3727: PPUSH
3728: LD_INT 0
3730: PPUSH
3731: CALL_OW 48
// ComCrawl ( un ) ;
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 137
// tmp := tmp ^ un ;
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: LD_VAR 0 3
3753: PUSH
3754: LD_VAR 0 1
3758: ADD
3759: ST_TO_ADDR
// end ;
3760: GO 3662
3762: POP
3763: POP
// repeat wait ( 0 0$1 ) ;
3764: LD_INT 35
3766: PPUSH
3767: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3771: LD_VAR 0 3
3775: PPUSH
3776: LD_INT 24
3778: PUSH
3779: LD_INT 1000
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PPUSH
3786: CALL_OW 72
3790: NOT
3791: IFFALSE 3764
// for i in tmp do
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: FOR_IN
3804: IFFALSE 3882
// begin wait ( 0 0$1 ) ;
3806: LD_INT 35
3808: PPUSH
3809: CALL_OW 67
// if Crawls ( i ) then
3813: LD_VAR 0 2
3817: PPUSH
3818: CALL_OW 318
3822: IFFALSE 3835
// ComWalk ( i ) else
3824: LD_VAR 0 2
3828: PPUSH
3829: CALL_OW 138
3833: GO 3880
// if GetClass ( i ) = class_sniper then
3835: LD_VAR 0 2
3839: PPUSH
3840: CALL_OW 257
3844: PUSH
3845: LD_INT 5
3847: EQUAL
3848: IFFALSE 3866
// ComAttackSoporific ( i , JMM ) else
3850: LD_VAR 0 2
3854: PPUSH
3855: LD_EXP 14
3859: PPUSH
3860: CALL_OW 166
3864: GO 3880
// ComAttackUnit ( i , JMM ) ;
3866: LD_VAR 0 2
3870: PPUSH
3871: LD_EXP 14
3875: PPUSH
3876: CALL_OW 115
// end ;
3880: GO 3803
3882: POP
3883: POP
// end ;
3884: PPOPN 3
3886: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3887: LD_EXP 7
3891: NOT
3892: IFFALSE 3903
3894: PUSH
3895: LD_INT 1
3897: PPUSH
3898: CALL_OW 301
3902: AND
3903: IFFALSE 3915
3905: GO 3907
3907: DISABLE
// YouLost ( Lab ) ;
3908: LD_STRING Lab
3910: PPUSH
3911: CALL_OW 104
3915: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ [ f_not , [ f_empty ] ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3916: LD_INT 10
3918: PPUSH
3919: LD_INT 22
3921: PUSH
3922: LD_INT 7
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: PPUSH
3929: CALL_OW 70
3933: PUSH
3934: LD_INT 2
3936: GREATEREQUAL
3937: IFFALSE 3993
3939: PUSH
3940: LD_INT 10
3942: PPUSH
3943: LD_INT 3
3945: PUSH
3946: LD_INT 58
3948: PUSH
3949: EMPTY
3950: LIST
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PUSH
3956: LD_INT 2
3958: PUSH
3959: LD_INT 34
3961: PUSH
3962: LD_INT 12
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 34
3971: PUSH
3972: LD_INT 51
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: PPUSH
3988: CALL_OW 70
3992: AND
3993: IFFALSE 4001
3995: PUSH
3996: LD_EXP 10
4000: AND
4001: IFFALSE 4009
4003: PUSH
4004: LD_EXP 7
4008: AND
4009: IFFALSE 4017
4011: PUSH
4012: LD_EXP 6
4016: AND
4017: IFFALSE 4288
4019: GO 4021
4021: DISABLE
4022: LD_INT 0
4024: PPUSH
4025: PPUSH
// begin m1 := false ;
4026: LD_ADDR_VAR 0 1
4030: PUSH
4031: LD_INT 0
4033: ST_TO_ADDR
// m2 := false ;
4034: LD_ADDR_VAR 0 2
4038: PUSH
4039: LD_INT 0
4041: ST_TO_ADDR
// if killCounter = 0 then
4042: LD_EXP 12
4046: PUSH
4047: LD_INT 0
4049: EQUAL
4050: IFFALSE 4059
// SetAchievement ( ACH_PACIFIST ) ;
4052: LD_STRING ACH_PACIFIST
4054: PPUSH
4055: CALL_OW 543
// if tick < 7 7$00 then
4059: LD_OWVAR 1
4063: PUSH
4064: LD_INT 14700
4066: LESS
4067: IFFALSE 4083
// begin wait ( 3 ) ;
4069: LD_INT 3
4071: PPUSH
4072: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
4076: LD_STRING ACH_ASPEED_18
4078: PPUSH
4079: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
4083: LD_STRING Explosion
4085: PPUSH
4086: LD_INT 1
4088: PPUSH
4089: CALL_OW 101
// if enteredContaminatedArea then
4093: LD_EXP 5
4097: IFFALSE 4119
// begin m1 := true ;
4099: LD_ADDR_VAR 0 1
4103: PUSH
4104: LD_INT 1
4106: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
4107: LD_STRING BioHazard
4109: PPUSH
4110: LD_INT 1
4112: PPUSH
4113: CALL_OW 101
// end else
4117: GO 4130
// AddMedal ( BioHazard , - 1 ) ;
4119: LD_STRING BioHazard
4121: PPUSH
4122: LD_INT 1
4124: NEG
4125: PPUSH
4126: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
4130: LD_EXP 11
4134: PUSH
4135: LD_INT 42000
4137: PUSH
4138: LD_INT 31500
4140: PUSH
4141: LD_INT 25200
4143: PUSH
4144: LD_INT 24150
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: PUSH
4153: LD_OWVAR 67
4157: ARRAY
4158: LESSEQUAL
4159: IFFALSE 4181
// begin m2 := true ;
4161: LD_ADDR_VAR 0 2
4165: PUSH
4166: LD_INT 1
4168: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
4169: LD_STRING Speed
4171: PPUSH
4172: LD_INT 1
4174: PPUSH
4175: CALL_OW 101
// end else
4179: GO 4192
// AddMedal ( Speed , - 1 ) ;
4181: LD_STRING Speed
4183: PPUSH
4184: LD_INT 1
4186: NEG
4187: PPUSH
4188: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4192: LD_OWVAR 67
4196: PUSH
4197: LD_INT 3
4199: GREATEREQUAL
4200: IFFALSE 4208
4202: PUSH
4203: LD_VAR 0 1
4207: AND
4208: IFFALSE 4216
4210: PUSH
4211: LD_VAR 0 2
4215: AND
4216: IFFALSE 4228
// SetAchievementEX ( ACH_AMER , 18 ) ;
4218: LD_STRING ACH_AMER
4220: PPUSH
4221: LD_INT 18
4223: PPUSH
4224: CALL_OW 564
// GiveMedals ( Main ) ;
4228: LD_STRING Main
4230: PPUSH
4231: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4235: LD_EXP 14
4239: PUSH
4240: LD_EXP 15
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PPUSH
4249: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4253: LD_EXP 14
4257: PPUSH
4258: LD_STRING 14a_JMM
4260: PPUSH
4261: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4265: LD_EXP 15
4269: PPUSH
4270: LD_STRING 14a_Burlak
4272: PPUSH
4273: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
4277: LD_STRING enableBioCharacter(BIO_HUGH)
4279: PPUSH
4280: CALL_OW 559
// YouWin ;
4284: CALL_OW 103
// end ; end_of_file
4288: PPOPN 2
4290: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4291: LD_INT 0
4293: PPUSH
4294: PPUSH
4295: PPUSH
4296: PPUSH
// uc_side := 1 ;
4297: LD_ADDR_OWVAR 20
4301: PUSH
4302: LD_INT 1
4304: ST_TO_ADDR
// uc_nation := 1 ;
4305: LD_ADDR_OWVAR 21
4309: PUSH
4310: LD_INT 1
4312: ST_TO_ADDR
// InitHc ;
4313: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 750 ) ;
4317: LD_INT 34
4319: PPUSH
4320: CALL_OW 274
4324: PPUSH
4325: LD_INT 1
4327: PPUSH
4328: LD_INT 750
4330: PPUSH
4331: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4335: LD_INT 34
4337: PPUSH
4338: CALL_OW 274
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: LD_INT 20
4348: PPUSH
4349: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4353: LD_ADDR_EXP 18
4357: PUSH
4358: LD_STRING Stevens
4360: PPUSH
4361: CALL_OW 25
4365: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4366: LD_ADDR_EXP 19
4370: PUSH
4371: LD_STRING Powell
4373: PPUSH
4374: CALL_OW 25
4378: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4379: LD_EXP 18
4383: PPUSH
4384: LD_INT 1
4386: PPUSH
4387: CALL_OW 52
// vehGuard := [ ] ;
4391: LD_ADDR_EXP 23
4395: PUSH
4396: EMPTY
4397: ST_TO_ADDR
// hc_importance := 0 ;
4398: LD_ADDR_OWVAR 32
4402: PUSH
4403: LD_INT 0
4405: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4406: LD_INT 4
4408: PPUSH
4409: LD_INT 3
4411: PPUSH
4412: LD_INT 3
4414: PPUSH
4415: LD_INT 8
4417: PPUSH
4418: LD_INT 100
4420: PPUSH
4421: CALL 35019 0 5
// sibBomb := CreateVehicle ;
4425: LD_ADDR_EXP 21
4429: PUSH
4430: CALL_OW 45
4434: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4435: LD_EXP 21
4439: PPUSH
4440: LD_INT 1
4442: PPUSH
4443: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4447: LD_EXP 21
4451: PPUSH
4452: LD_INT 93
4454: PPUSH
4455: LD_INT 74
4457: PPUSH
4458: LD_INT 0
4460: PPUSH
4461: CALL_OW 48
// guards := [ ] ;
4465: LD_ADDR_EXP 22
4469: PUSH
4470: EMPTY
4471: ST_TO_ADDR
// for i = 1 to 3 do
4472: LD_ADDR_VAR 0 2
4476: PUSH
4477: DOUBLE
4478: LD_INT 1
4480: DEC
4481: ST_TO_ADDR
4482: LD_INT 3
4484: PUSH
4485: FOR_TO
4486: IFFALSE 4582
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4488: LD_INT 0
4490: PPUSH
4491: LD_INT 1
4493: PPUSH
4494: LD_INT 8
4496: PUSH
4497: LD_INT 9
4499: PUSH
4500: LD_INT 10
4502: PUSH
4503: LD_INT 10
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: PUSH
4512: LD_OWVAR 67
4516: ARRAY
4517: PPUSH
4518: CALL_OW 380
// un := CreateHuman ;
4522: LD_ADDR_VAR 0 3
4526: PUSH
4527: CALL_OW 44
4531: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4532: LD_VAR 0 3
4536: PPUSH
4537: LD_INT 2
4539: PUSH
4540: LD_INT 3
4542: PUSH
4543: LD_INT 4
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: LIST
4550: PUSH
4551: LD_VAR 0 2
4555: ARRAY
4556: PPUSH
4557: LD_INT 0
4559: PPUSH
4560: CALL_OW 49
// guards := guards ^ un ;
4564: LD_ADDR_EXP 22
4568: PUSH
4569: LD_EXP 22
4573: PUSH
4574: LD_VAR 0 3
4578: ADD
4579: ST_TO_ADDR
// end ;
4580: GO 4485
4582: POP
4583: POP
// baseGuards := [ ] ;
4584: LD_ADDR_EXP 20
4588: PUSH
4589: EMPTY
4590: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4591: LD_ADDR_VAR 0 2
4595: PUSH
4596: DOUBLE
4597: LD_INT 1
4599: DEC
4600: ST_TO_ADDR
4601: LD_INT 5
4603: PUSH
4604: LD_INT 6
4606: PUSH
4607: LD_INT 7
4609: PUSH
4610: LD_INT 8
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: PUSH
4619: LD_OWVAR 67
4623: ARRAY
4624: PUSH
4625: FOR_TO
4626: IFFALSE 4776
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4628: LD_INT 0
4630: PPUSH
4631: LD_INT 8
4633: PUSH
4634: LD_INT 9
4636: PUSH
4637: LD_INT 10
4639: PUSH
4640: LD_INT 10
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: PUSH
4649: LD_OWVAR 67
4653: ARRAY
4654: PPUSH
4655: CALL_OW 381
// un := CreateHuman ;
4659: LD_ADDR_VAR 0 3
4663: PUSH
4664: CALL_OW 44
4668: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4669: LD_ADDR_EXP 20
4673: PUSH
4674: LD_EXP 20
4678: PUSH
4679: LD_VAR 0 3
4683: ADD
4684: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4685: LD_ADDR_VAR 0 4
4689: PUSH
4690: LD_INT 22
4692: PUSH
4693: LD_INT 1
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 58
4702: PUSH
4703: EMPTY
4704: LIST
4705: PUSH
4706: LD_INT 30
4708: PUSH
4709: LD_INT 32
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: LIST
4720: PPUSH
4721: CALL_OW 69
4725: ST_TO_ADDR
// if tmp then
4726: LD_VAR 0 4
4730: IFFALSE 4762
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4732: LD_VAR 0 3
4736: PPUSH
4737: LD_VAR 0 4
4741: PUSH
4742: LD_INT 1
4744: PPUSH
4745: LD_VAR 0 4
4749: PPUSH
4750: CALL_OW 12
4754: ARRAY
4755: PPUSH
4756: CALL_OW 52
4760: GO 4774
// PlaceHumanInUnit ( un , us_bar ) ;
4762: LD_VAR 0 3
4766: PPUSH
4767: LD_INT 51
4769: PPUSH
4770: CALL_OW 52
// end ;
4774: GO 4625
4776: POP
4777: POP
// if Difficulty > 1 then
4778: LD_OWVAR 67
4782: PUSH
4783: LD_INT 1
4785: GREATER
4786: IFFALSE 4834
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4788: LD_INT 0
4790: PPUSH
4791: LD_INT 5
4793: PPUSH
4794: LD_INT 9
4796: PUSH
4797: LD_INT 10
4799: PUSH
4800: LD_INT 10
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: LIST
4807: PUSH
4808: LD_OWVAR 67
4812: PUSH
4813: LD_INT 1
4815: MINUS
4816: ARRAY
4817: PPUSH
4818: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4822: CALL_OW 44
4826: PPUSH
4827: LD_INT 80
4829: PPUSH
4830: CALL_OW 52
// end ; for i = 1 to 3 do
4834: LD_ADDR_VAR 0 2
4838: PUSH
4839: DOUBLE
4840: LD_INT 1
4842: DEC
4843: ST_TO_ADDR
4844: LD_INT 3
4846: PUSH
4847: FOR_TO
4848: IFFALSE 4874
// begin PrepareMechanic ( false , 9 ) ;
4850: LD_INT 0
4852: PPUSH
4853: LD_INT 9
4855: PPUSH
4856: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4860: CALL_OW 44
4864: PPUSH
4865: LD_INT 43
4867: PPUSH
4868: CALL_OW 52
// end ;
4872: GO 4847
4874: POP
4875: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4876: CALL_OW 44
4880: PPUSH
4881: LD_INT 49
4883: PPUSH
4884: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4888: LD_ADDR_VAR 0 2
4892: PUSH
4893: DOUBLE
4894: LD_INT 1
4896: DEC
4897: ST_TO_ADDR
4898: LD_INT 1
4900: PUSH
4901: LD_OWVAR 67
4905: PLUS
4906: PUSH
4907: FOR_TO
4908: IFFALSE 4955
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4910: LD_INT 0
4912: PPUSH
4913: LD_INT 8
4915: PUSH
4916: LD_INT 9
4918: PUSH
4919: LD_INT 10
4921: PUSH
4922: LD_INT 10
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: PUSH
4931: LD_OWVAR 67
4935: ARRAY
4936: PPUSH
4937: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4941: CALL_OW 44
4945: PPUSH
4946: LD_INT 5
4948: PPUSH
4949: CALL_OW 52
// end ;
4953: GO 4907
4955: POP
4956: POP
// for i = 1 to 3 do
4957: LD_ADDR_VAR 0 2
4961: PUSH
4962: DOUBLE
4963: LD_INT 1
4965: DEC
4966: ST_TO_ADDR
4967: LD_INT 3
4969: PUSH
4970: FOR_TO
4971: IFFALSE 4997
// begin PrepareScientist ( false , 10 ) ;
4973: LD_INT 0
4975: PPUSH
4976: LD_INT 10
4978: PPUSH
4979: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4983: CALL_OW 44
4987: PPUSH
4988: LD_INT 1
4990: PPUSH
4991: CALL_OW 52
// end ;
4995: GO 4970
4997: POP
4998: POP
// end ;
4999: LD_VAR 0 1
5003: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
5004: LD_EXP 22
5008: IFFALSE 5017
5010: PUSH
5011: LD_EXP 2
5015: NOT
5016: AND
5017: IFFALSE 5203
5019: GO 5021
5021: DISABLE
5022: LD_INT 0
5024: PPUSH
5025: PPUSH
5026: PPUSH
// begin enable ;
5027: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
5028: LD_ADDR_VAR 0 3
5032: PUSH
5033: LD_INT 204
5035: PUSH
5036: LD_INT 30
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: PUSH
5043: LD_INT 165
5045: PUSH
5046: LD_INT 24
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PUSH
5053: LD_INT 195
5055: PUSH
5056: LD_INT 6
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 223
5065: PUSH
5066: LD_INT 54
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 214
5075: PUSH
5076: LD_INT 84
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: LD_INT 206
5085: PUSH
5086: LD_INT 71
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: ST_TO_ADDR
// for i in guards do
5101: LD_ADDR_VAR 0 1
5105: PUSH
5106: LD_EXP 22
5110: PUSH
5111: FOR_IN
5112: IFFALSE 5201
// begin if HasTask ( i ) then
5114: LD_VAR 0 1
5118: PPUSH
5119: CALL_OW 314
5123: IFFALSE 5129
// continue else
5125: GO 5111
5127: GO 5199
// begin j := rand ( 1 , 6 ) ;
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: LD_INT 1
5136: PPUSH
5137: LD_INT 6
5139: PPUSH
5140: CALL_OW 12
5144: ST_TO_ADDR
// if not See ( 7 , i ) then
5145: LD_INT 7
5147: PPUSH
5148: LD_VAR 0 1
5152: PPUSH
5153: CALL_OW 292
5157: NOT
5158: IFFALSE 5199
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
5160: LD_VAR 0 1
5164: PPUSH
5165: LD_VAR 0 3
5169: PUSH
5170: LD_VAR 0 2
5174: ARRAY
5175: PUSH
5176: LD_INT 1
5178: ARRAY
5179: PPUSH
5180: LD_VAR 0 3
5184: PUSH
5185: LD_VAR 0 2
5189: ARRAY
5190: PUSH
5191: LD_INT 2
5193: ARRAY
5194: PPUSH
5195: CALL_OW 114
// end ; end ;
5199: GO 5111
5201: POP
5202: POP
// end ;
5203: PPOPN 3
5205: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5206: LD_EXP 23
5210: IFFALSE 5219
5212: PUSH
5213: LD_EXP 7
5217: NOT
5218: AND
5219: IFFALSE 5303
5221: GO 5223
5223: DISABLE
5224: LD_INT 0
5226: PPUSH
// begin enable ;
5227: ENABLE
// for i in vehGuard do
5228: LD_ADDR_VAR 0 1
5232: PUSH
5233: LD_EXP 23
5237: PUSH
5238: FOR_IN
5239: IFFALSE 5301
// if IsOk ( i ) and IsControledBy ( i ) then
5241: LD_VAR 0 1
5245: PPUSH
5246: CALL_OW 302
5250: IFFALSE 5263
5252: PUSH
5253: LD_VAR 0 1
5257: PPUSH
5258: CALL_OW 312
5262: AND
5263: IFFALSE 5299
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5265: LD_VAR 0 1
5269: PPUSH
5270: LD_INT 22
5272: PUSH
5273: LD_INT 7
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PPUSH
5280: CALL_OW 69
5284: PPUSH
5285: LD_VAR 0 1
5289: PPUSH
5290: CALL_OW 74
5294: PPUSH
5295: CALL_OW 115
5299: GO 5238
5301: POP
5302: POP
// end ;
5303: PPOPN 1
5305: END
// every 1 1$00 + 3 3$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured and Difficulty > 1 do
5306: LD_EXP 4
5310: IFFALSE 5321
5312: PUSH
5313: LD_INT 43
5315: PPUSH
5316: CALL_OW 302
5320: AND
5321: IFFALSE 5330
5323: PUSH
5324: LD_EXP 7
5328: NOT
5329: AND
5330: IFFALSE 5342
5332: PUSH
5333: LD_OWVAR 67
5337: PUSH
5338: LD_INT 1
5340: GREATER
5341: AND
5342: IFFALSE 5407
5344: GO 5346
5346: DISABLE
// begin enable ;
5347: ENABLE
// if Count ( vehGuard ) < Difficulty then
5348: LD_EXP 23
5352: PPUSH
5353: CALL 32223 0 1
5357: PUSH
5358: LD_OWVAR 67
5362: LESS
5363: IFFALSE 5407
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5365: LD_INT 43
5367: PPUSH
5368: LD_INT 5
5370: PPUSH
5371: LD_INT 3
5373: PPUSH
5374: LD_INT 2
5376: PPUSH
5377: LD_INT 7
5379: PUSH
5380: LD_INT 7
5382: PUSH
5383: LD_INT 9
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: PUSH
5391: LD_INT 1
5393: PPUSH
5394: LD_INT 3
5396: PPUSH
5397: CALL_OW 12
5401: ARRAY
5402: PPUSH
5403: CALL_OW 125
// end ;
5407: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5408: LD_INT 22
5410: PUSH
5411: LD_INT 1
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: PUSH
5418: LD_INT 25
5420: PUSH
5421: LD_INT 5
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: LD_INT 50
5430: PUSH
5431: EMPTY
5432: LIST
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: LIST
5438: PPUSH
5439: CALL_OW 69
5443: IFFALSE 5452
5445: PUSH
5446: LD_EXP 7
5450: NOT
5451: AND
5452: IFFALSE 5683
5454: GO 5456
5456: DISABLE
5457: LD_INT 0
5459: PPUSH
5460: PPUSH
// begin enable ;
5461: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5462: LD_ADDR_VAR 0 1
5466: PUSH
5467: LD_INT 22
5469: PUSH
5470: LD_INT 1
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PUSH
5477: LD_INT 25
5479: PUSH
5480: LD_INT 5
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 50
5489: PUSH
5490: EMPTY
5491: LIST
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL_OW 69
5502: ST_TO_ADDR
// if not tmp then
5503: LD_VAR 0 1
5507: NOT
5508: IFFALSE 5512
// exit ;
5510: GO 5683
// b := IsInUnit ( tmp [ 1 ] ) ;
5512: LD_ADDR_VAR 0 2
5516: PUSH
5517: LD_VAR 0 1
5521: PUSH
5522: LD_INT 1
5524: ARRAY
5525: PPUSH
5526: CALL_OW 310
5530: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5531: LD_VAR 0 2
5535: NOT
5536: IFTRUE 5553
5538: PUSH
5539: LD_VAR 0 1
5543: PUSH
5544: LD_INT 1
5546: ARRAY
5547: PPUSH
5548: CALL_OW 314
5552: OR
5553: IFFALSE 5557
// exit ;
5555: GO 5683
// if b = us_bun1 then
5557: LD_VAR 0 2
5561: PUSH
5562: LD_INT 80
5564: EQUAL
5565: IFFALSE 5626
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5567: LD_VAR 0 1
5571: PUSH
5572: LD_INT 1
5574: ARRAY
5575: PPUSH
5576: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5580: LD_VAR 0 1
5584: PUSH
5585: LD_INT 1
5587: ARRAY
5588: PPUSH
5589: LD_INT 27
5591: PPUSH
5592: LD_INT 44
5594: PPUSH
5595: CALL_OW 174
// if IsOk ( us_bun2 ) then
5599: LD_INT 55
5601: PPUSH
5602: CALL_OW 302
5606: IFFALSE 5624
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5608: LD_VAR 0 1
5612: PUSH
5613: LD_INT 1
5615: ARRAY
5616: PPUSH
5617: LD_INT 55
5619: PPUSH
5620: CALL_OW 180
// end else
5624: GO 5683
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5626: LD_VAR 0 1
5630: PUSH
5631: LD_INT 1
5633: ARRAY
5634: PPUSH
5635: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5639: LD_VAR 0 1
5643: PUSH
5644: LD_INT 1
5646: ARRAY
5647: PPUSH
5648: LD_INT 92
5650: PPUSH
5651: LD_INT 51
5653: PPUSH
5654: CALL_OW 174
// if IsOk ( us_bun1 ) then
5658: LD_INT 80
5660: PPUSH
5661: CALL_OW 302
5665: IFFALSE 5683
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5667: LD_VAR 0 1
5671: PUSH
5672: LD_INT 1
5674: ARRAY
5675: PPUSH
5676: LD_INT 80
5678: PPUSH
5679: CALL_OW 180
// end ; end ;
5683: PPOPN 2
5685: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5686: LD_EXP 7
5690: NOT
5691: IFFALSE 5744
5693: PUSH
5694: LD_INT 9
5696: PPUSH
5697: LD_INT 22
5699: PUSH
5700: LD_INT 1
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: LD_INT 21
5709: PUSH
5710: LD_INT 3
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: LD_INT 3
5719: PUSH
5720: LD_INT 24
5722: PUSH
5723: LD_INT 1000
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: LIST
5738: PPUSH
5739: CALL_OW 70
5743: AND
5744: IFFALSE 6161
5746: GO 5748
5748: DISABLE
5749: LD_INT 0
5751: PPUSH
5752: PPUSH
5753: PPUSH
5754: PPUSH
// begin enable ;
5755: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5756: LD_ADDR_VAR 0 2
5760: PUSH
5761: LD_INT 22
5763: PUSH
5764: LD_INT 1
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: PUSH
5771: LD_INT 25
5773: PUSH
5774: LD_INT 2
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 24
5783: PUSH
5784: LD_INT 1000
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: LIST
5795: PPUSH
5796: CALL_OW 69
5800: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5801: LD_ADDR_VAR 0 3
5805: PUSH
5806: LD_INT 22
5808: PUSH
5809: LD_INT 1
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: LD_INT 25
5818: PUSH
5819: LD_INT 2
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PUSH
5826: LD_INT 3
5828: PUSH
5829: LD_INT 24
5831: PUSH
5832: LD_INT 750
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PUSH
5839: EMPTY
5840: LIST
5841: LIST
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: LIST
5847: PPUSH
5848: CALL_OW 69
5852: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5853: LD_ADDR_VAR 0 4
5857: PUSH
5858: LD_INT 9
5860: PPUSH
5861: LD_INT 22
5863: PUSH
5864: LD_INT 1
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 21
5873: PUSH
5874: LD_INT 3
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: LD_INT 3
5883: PUSH
5884: LD_INT 24
5886: PUSH
5887: LD_INT 1000
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: LIST
5902: PPUSH
5903: CALL_OW 70
5907: PUSH
5908: LD_INT 1
5910: DIFF
5911: ST_TO_ADDR
// if not tmp and not tmp2 then
5912: LD_VAR 0 2
5916: NOT
5917: IFFALSE 5926
5919: PUSH
5920: LD_VAR 0 3
5924: NOT
5925: AND
5926: IFFALSE 5930
// exit ;
5928: GO 6161
// if tmp and b then
5930: LD_VAR 0 2
5934: IFFALSE 5942
5936: PUSH
5937: LD_VAR 0 4
5941: AND
5942: IFFALSE 6074
// for i in tmp do
5944: LD_ADDR_VAR 0 1
5948: PUSH
5949: LD_VAR 0 2
5953: PUSH
5954: FOR_IN
5955: IFFALSE 6072
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5957: LD_VAR 0 1
5961: PPUSH
5962: CALL_OW 110
5966: PUSH
5967: LD_INT 1
5969: EQUAL
5970: IFFALSE 5987
5972: PUSH
5973: LD_VAR 0 1
5977: PPUSH
5978: CALL_OW 256
5982: PUSH
5983: LD_INT 1000
5985: LESS
5986: AND
5987: IFFALSE 5993
// continue else
5989: GO 5954
5991: GO 6020
// if GetTag ( i ) = 1 then
5993: LD_VAR 0 1
5997: PPUSH
5998: CALL_OW 110
6002: PUSH
6003: LD_INT 1
6005: EQUAL
6006: IFFALSE 6020
// SetTag ( i , 0 ) ;
6008: LD_VAR 0 1
6012: PPUSH
6013: LD_INT 0
6015: PPUSH
6016: CALL_OW 109
// if IsInUnit ( i ) then
6020: LD_VAR 0 1
6024: PPUSH
6025: CALL_OW 310
6029: IFFALSE 6040
// ComExitBuilding ( i ) ;
6031: LD_VAR 0 1
6035: PPUSH
6036: CALL_OW 122
// if not HasTask ( i ) then
6040: LD_VAR 0 1
6044: PPUSH
6045: CALL_OW 314
6049: NOT
6050: IFFALSE 6070
// AddComRepairBuilding ( i , b [ 1 ] ) ;
6052: LD_VAR 0 1
6056: PPUSH
6057: LD_VAR 0 4
6061: PUSH
6062: LD_INT 1
6064: ARRAY
6065: PPUSH
6066: CALL_OW 190
// end ;
6070: GO 5954
6072: POP
6073: POP
// if tmp2 then
6074: LD_VAR 0 3
6078: IFFALSE 6161
// for i in tmp2 do
6080: LD_ADDR_VAR 0 1
6084: PUSH
6085: LD_VAR 0 3
6089: PUSH
6090: FOR_IN
6091: IFFALSE 6159
// begin if not GetTag ( i ) = 1 then
6093: LD_VAR 0 1
6097: PPUSH
6098: CALL_OW 110
6102: PUSH
6103: LD_INT 1
6105: EQUAL
6106: NOT
6107: IFFALSE 6121
// SetTag ( i , 1 ) ;
6109: LD_VAR 0 1
6113: PPUSH
6114: LD_INT 1
6116: PPUSH
6117: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
6121: LD_VAR 0 1
6125: PPUSH
6126: LD_INT 88
6128: PPUSH
6129: LD_INT 75
6131: PPUSH
6132: CALL_OW 297
6136: PUSH
6137: LD_INT 6
6139: GREATER
6140: IFFALSE 6157
// ComMoveXY ( i , 88 , 75 ) ;
6142: LD_VAR 0 1
6146: PPUSH
6147: LD_INT 88
6149: PPUSH
6150: LD_INT 75
6152: PPUSH
6153: CALL_OW 111
// end ;
6157: GO 6090
6159: POP
6160: POP
// end ;
6161: PPOPN 4
6163: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
6164: LD_EXP 7
6168: NOT
6169: IFFALSE 6177
6171: PUSH
6172: LD_EXP 9
6176: AND
6177: IFFALSE 6230
6179: PUSH
6180: LD_INT 9
6182: PPUSH
6183: LD_INT 22
6185: PUSH
6186: LD_INT 1
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PUSH
6193: LD_INT 21
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: LD_INT 3
6205: PUSH
6206: LD_INT 24
6208: PUSH
6209: LD_INT 1000
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: LIST
6224: PPUSH
6225: CALL_OW 70
6229: AND
6230: IFFALSE 6405
6232: GO 6234
6234: DISABLE
6235: LD_INT 0
6237: PPUSH
6238: PPUSH
6239: PPUSH
// begin enable ;
6240: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
6241: LD_ADDR_VAR 0 2
6245: PUSH
6246: LD_INT 22
6248: PUSH
6249: LD_INT 1
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 25
6258: PUSH
6259: LD_INT 4
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 69
6274: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6275: LD_ADDR_VAR 0 3
6279: PUSH
6280: LD_INT 9
6282: PPUSH
6283: LD_INT 22
6285: PUSH
6286: LD_INT 1
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 21
6295: PUSH
6296: LD_INT 1
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 3
6305: PUSH
6306: LD_INT 24
6308: PUSH
6309: LD_INT 1000
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: LIST
6324: PPUSH
6325: CALL_OW 70
6329: ST_TO_ADDR
// if not sci or not tmp then
6330: LD_VAR 0 2
6334: NOT
6335: IFTRUE 6344
6337: PUSH
6338: LD_VAR 0 3
6342: NOT
6343: OR
6344: IFFALSE 6348
// exit ;
6346: GO 6405
// for i in sci do
6348: LD_ADDR_VAR 0 1
6352: PUSH
6353: LD_VAR 0 2
6357: PUSH
6358: FOR_IN
6359: IFFALSE 6403
// if IsInUnit ( i ) then
6361: LD_VAR 0 1
6365: PPUSH
6366: CALL_OW 310
6370: IFFALSE 6383
// ComExitBuilding ( i ) else
6372: LD_VAR 0 1
6376: PPUSH
6377: CALL_OW 122
6381: GO 6401
// ComHeal ( i , tmp [ 1 ] ) ;
6383: LD_VAR 0 1
6387: PPUSH
6388: LD_VAR 0 3
6392: PUSH
6393: LD_INT 1
6395: ARRAY
6396: PPUSH
6397: CALL_OW 128
6401: GO 6358
6403: POP
6404: POP
// end ;
6405: PPOPN 3
6407: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6408: LD_EXP 7
6412: NOT
6413: IFFALSE 6421
6415: PUSH
6416: LD_EXP 9
6420: AND
6421: IFFALSE 6432
6423: PUSH
6424: LD_INT 1
6426: PPUSH
6427: CALL_OW 302
6431: AND
6432: IFFALSE 6486
6434: PUSH
6435: LD_INT 9
6437: PPUSH
6438: LD_INT 22
6440: PUSH
6441: LD_INT 1
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 21
6450: PUSH
6451: LD_INT 1
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: LD_INT 3
6460: PUSH
6461: LD_INT 24
6463: PUSH
6464: LD_INT 1000
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: PPUSH
6480: CALL_OW 70
6484: NOT
6485: AND
6486: IFFALSE 6525
6488: PUSH
6489: LD_INT 22
6491: PUSH
6492: LD_INT 1
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PUSH
6499: LD_INT 25
6501: PUSH
6502: LD_INT 4
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 56
6511: PUSH
6512: EMPTY
6513: LIST
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: PPUSH
6520: CALL_OW 69
6524: AND
6525: IFFALSE 6620
6527: GO 6529
6529: DISABLE
6530: LD_INT 0
6532: PPUSH
// begin enable ;
6533: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6534: LD_ADDR_VAR 0 1
6538: PUSH
6539: LD_INT 22
6541: PUSH
6542: LD_INT 1
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PUSH
6549: LD_INT 25
6551: PUSH
6552: LD_INT 4
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 56
6561: PUSH
6562: EMPTY
6563: LIST
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: PPUSH
6570: CALL_OW 69
6574: PUSH
6575: FOR_IN
6576: IFFALSE 6618
// if not GetTag ( i ) and not HasTask ( i ) then
6578: LD_VAR 0 1
6582: PPUSH
6583: CALL_OW 110
6587: NOT
6588: IFFALSE 6602
6590: PUSH
6591: LD_VAR 0 1
6595: PPUSH
6596: CALL_OW 314
6600: NOT
6601: AND
6602: IFFALSE 6616
// ComEnterUnit ( i , us_lab ) ;
6604: LD_VAR 0 1
6608: PPUSH
6609: LD_INT 1
6611: PPUSH
6612: CALL_OW 120
6616: GO 6575
6618: POP
6619: POP
// end ;
6620: PPOPN 1
6622: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6623: LD_EXP 7
6627: NOT
6628: IFFALSE 6682
6630: PUSH
6631: LD_INT 9
6633: PPUSH
6634: LD_INT 22
6636: PUSH
6637: LD_INT 1
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: LD_INT 21
6646: PUSH
6647: LD_INT 3
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 1000
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: PPUSH
6676: CALL_OW 70
6680: NOT
6681: AND
6682: IFFALSE 6721
6684: PUSH
6685: LD_INT 22
6687: PUSH
6688: LD_INT 1
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: PUSH
6695: LD_INT 25
6697: PUSH
6698: LD_INT 2
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: PUSH
6705: LD_INT 56
6707: PUSH
6708: EMPTY
6709: LIST
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: LIST
6715: PPUSH
6716: CALL_OW 69
6720: AND
6721: IFFALSE 6816
6723: GO 6725
6725: DISABLE
6726: LD_INT 0
6728: PPUSH
// begin enable ;
6729: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6730: LD_ADDR_VAR 0 1
6734: PUSH
6735: LD_INT 22
6737: PUSH
6738: LD_INT 1
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 25
6747: PUSH
6748: LD_INT 2
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 56
6757: PUSH
6758: EMPTY
6759: LIST
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 69
6770: PUSH
6771: FOR_IN
6772: IFFALSE 6814
// if not HasTask ( i ) and not GetTag ( i ) then
6774: LD_VAR 0 1
6778: PPUSH
6779: CALL_OW 314
6783: NOT
6784: IFFALSE 6798
6786: PUSH
6787: LD_VAR 0 1
6791: PPUSH
6792: CALL_OW 110
6796: NOT
6797: AND
6798: IFFALSE 6812
// ComEnterUnit ( i , us_depot ) ;
6800: LD_VAR 0 1
6804: PPUSH
6805: LD_INT 5
6807: PPUSH
6808: CALL_OW 120
6812: GO 6771
6814: POP
6815: POP
// end ;
6816: PPOPN 1
6818: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6819: LD_EXP 9
6823: PUSH
6824: LD_INT 0
6826: LESSEQUAL
6827: IFTRUE 6840
6829: PUSH
6830: LD_EXP 18
6834: PPUSH
6835: CALL_OW 301
6839: OR
6840: IFFALSE 6872
6842: PUSH
6843: LD_INT 22
6845: PUSH
6846: LD_INT 1
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 25
6855: PUSH
6856: LD_INT 2
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PPUSH
6867: CALL_OW 69
6871: AND
6872: IFFALSE 6913
6874: GO 6876
6876: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6877: LD_INT 22
6879: PUSH
6880: LD_INT 1
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PUSH
6887: LD_INT 25
6889: PUSH
6890: LD_INT 2
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: PPUSH
6901: CALL_OW 69
6905: PPUSH
6906: LD_INT 1
6908: PPUSH
6909: CALL_OW 167
6913: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6914: LD_EXP 7
6918: NOT
6919: IFFALSE 6940
6921: PUSH
6922: LD_INT 7
6924: PPUSH
6925: LD_INT 22
6927: PUSH
6928: LD_INT 7
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PPUSH
6935: CALL_OW 70
6939: AND
6940: IFFALSE 7049
6942: GO 6944
6944: DISABLE
6945: LD_INT 0
6947: PPUSH
// begin wait ( 0 0$2 ) ;
6948: LD_INT 70
6950: PPUSH
6951: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] ] ) do
6955: LD_ADDR_VAR 0 1
6959: PUSH
6960: LD_INT 22
6962: PUSH
6963: LD_INT 1
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 2
6972: PUSH
6973: LD_INT 25
6975: PUSH
6976: LD_INT 1
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PUSH
6983: LD_INT 25
6985: PUSH
6986: LD_INT 5
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: LIST
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PPUSH
7002: CALL_OW 69
7006: PUSH
7007: FOR_IN
7008: IFFALSE 7047
// begin if IsInUnit ( i ) then
7010: LD_VAR 0 1
7014: PPUSH
7015: CALL_OW 310
7019: IFFALSE 7030
// ComExitBuilding ( i ) ;
7021: LD_VAR 0 1
7025: PPUSH
7026: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
7030: LD_VAR 0 1
7034: PPUSH
7035: LD_INT 92
7037: PPUSH
7038: LD_INT 78
7040: PPUSH
7041: CALL_OW 174
// end ;
7045: GO 7007
7047: POP
7048: POP
// end ; end_of_file
7049: PPOPN 1
7051: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
7052: LD_VAR 0 1
7056: PPUSH
7057: LD_VAR 0 2
7061: PPUSH
7062: LD_VAR 0 3
7066: PPUSH
7067: CALL 1587 0 3
7071: PPOPN 3
7073: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
7074: LD_EXP 14
7078: PPUSH
7079: CALL_OW 257
7083: PUSH
7084: LD_INT 4
7086: EQUAL
7087: IFTRUE 7104
7089: PUSH
7090: LD_EXP 15
7094: PPUSH
7095: CALL_OW 257
7099: PUSH
7100: LD_INT 4
7102: EQUAL
7103: OR
7104: IFTRUE 7136
7106: PUSH
7107: LD_INT 22
7109: PUSH
7110: LD_INT 7
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 21
7119: PUSH
7120: LD_INT 3
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PPUSH
7131: CALL_OW 69
7135: OR
7136: IFFALSE 7140
// exit ;
7138: GO 7178
// if un = JMM then
7140: LD_VAR 0 1
7144: PUSH
7145: LD_EXP 14
7149: EQUAL
7150: IFFALSE 7159
// YouLost ( JMM ) ;
7152: LD_STRING JMM
7154: PPUSH
7155: CALL_OW 104
// if un = Burlak then
7159: LD_VAR 0 1
7163: PUSH
7164: LD_EXP 15
7168: EQUAL
7169: IFFALSE 7178
// YouLost ( Burlak ) ;
7171: LD_STRING Burlak
7173: PPUSH
7174: CALL_OW 104
// end ;
7178: PPOPN 1
7180: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7181: LD_VAR 0 1
7185: PPUSH
7186: CALL 23625 0 1
// if un = JMM then
7190: LD_VAR 0 1
7194: PUSH
7195: LD_EXP 14
7199: EQUAL
7200: IFFALSE 7209
// YouLost ( JMM ) ;
7202: LD_STRING JMM
7204: PPUSH
7205: CALL_OW 104
// if un = Burlak then
7209: LD_VAR 0 1
7213: PUSH
7214: LD_EXP 15
7218: EQUAL
7219: IFFALSE 7228
// YouLost ( Burlak ) ;
7221: LD_STRING Burlak
7223: PPUSH
7224: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
7228: LD_VAR 0 1
7232: PUSH
7233: LD_INT 21
7235: PUSH
7236: LD_INT 1
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 23
7245: PUSH
7246: LD_INT 1
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 69
7261: IN
7262: IFFALSE 7278
// killCounter := killCounter + 1 ;
7264: LD_ADDR_EXP 12
7268: PUSH
7269: LD_EXP 12
7273: PUSH
7274: LD_INT 1
7276: PLUS
7277: ST_TO_ADDR
// end ;
7278: PPOPN 1
7280: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
7281: LD_VAR 0 2
7285: PUSH
7286: LD_INT 7
7288: EQUAL
7289: IFFALSE 7342
7291: PUSH
7292: LD_VAR 0 1
7296: PUSH
7297: LD_INT 2
7299: PUSH
7300: LD_INT 30
7302: PUSH
7303: LD_INT 31
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: LD_INT 30
7312: PUSH
7313: LD_INT 32
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 30
7322: PUSH
7323: LD_INT 33
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: PPUSH
7336: CALL_OW 69
7340: IN
7341: AND
7342: IFFALSE 7358
// bunkerCounter := bunkerCounter + 1 ;
7344: LD_ADDR_EXP 13
7348: PUSH
7349: LD_EXP 13
7353: PUSH
7354: LD_INT 1
7356: PLUS
7357: ST_TO_ADDR
// end ;
7358: PPOPN 3
7360: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7361: LD_VAR 0 1
7365: PPUSH
7366: CALL_OW 255
7370: PUSH
7371: LD_INT 7
7373: EQUAL
7374: IFFALSE 7384
// artifactPickedUp := true ;
7376: LD_ADDR_EXP 6
7380: PUSH
7381: LD_INT 1
7383: ST_TO_ADDR
// end ;
7384: PPOPN 2
7386: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7387: LD_ADDR_EXP 6
7391: PUSH
7392: LD_INT 0
7394: ST_TO_ADDR
7395: PPOPN 2
7397: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7398: LD_VAR 0 1
7402: PPUSH
7403: LD_VAR 0 2
7407: PPUSH
7408: CALL 23683 0 2
// if GetSide ( vehicle ) <> 1 then
7412: LD_VAR 0 1
7416: PPUSH
7417: CALL_OW 255
7421: PUSH
7422: LD_INT 1
7424: NONEQUAL
7425: IFFALSE 7429
// exit ;
7427: GO 7476
// wait ( 0 0$5 ) ;
7429: LD_INT 175
7431: PPUSH
7432: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7436: LD_VAR 0 1
7440: PPUSH
7441: CALL_OW 263
7445: PUSH
7446: LD_INT 2
7448: EQUAL
7449: IFFALSE 7460
// Connect ( vehicle ) ;
7451: LD_VAR 0 1
7455: PPUSH
7456: CALL 38501 0 1
// vehGuard := vehGuard ^ vehicle ;
7460: LD_ADDR_EXP 23
7464: PUSH
7465: LD_EXP 23
7469: PUSH
7470: LD_VAR 0 1
7474: ADD
7475: ST_TO_ADDR
// end ;
7476: PPOPN 2
7478: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7479: LD_VAR 0 1
7483: PUSH
7484: LD_INT 1
7486: EQUAL
7487: IFFALSE 7496
7489: PUSH
7490: LD_EXP 7
7494: NOT
7495: AND
7496: IFFALSE 7531
// begin planCaptured := true ;
7498: LD_ADDR_EXP 7
7502: PUSH
7503: LD_INT 1
7505: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7506: LD_STRING MEnd
7508: PPUSH
7509: CALL_OW 337
// canEnd := true ;
7513: LD_ADDR_EXP 10
7517: PUSH
7518: LD_INT 1
7520: ST_TO_ADDR
// missionTime := tick ;
7521: LD_ADDR_EXP 11
7525: PUSH
7526: LD_OWVAR 1
7530: ST_TO_ADDR
// end ; end ;
7531: PPOPN 3
7533: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7534: LD_VAR 0 1
7538: PPUSH
7539: CALL 23667 0 1
// end ; end_of_file end_of_file
7543: PPOPN 1
7545: END
// export globalGameSaveCounter ; every 0 0$1 do
7546: GO 7548
7548: DISABLE
// begin enable ;
7549: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7550: LD_STRING updateTimer(
7552: PUSH
7553: LD_OWVAR 1
7557: STR
7558: PUSH
7559: LD_STRING );
7561: STR
7562: PPUSH
7563: CALL_OW 559
// end ;
7567: END
// every 0 0$1 do
7568: GO 7570
7570: DISABLE
// begin globalGameSaveCounter := 0 ;
7571: LD_ADDR_EXP 24
7575: PUSH
7576: LD_INT 0
7578: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7579: LD_STRING setGameSaveCounter(0)
7581: PPUSH
7582: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7586: LD_STRING initStreamRollete();
7588: PPUSH
7589: CALL_OW 559
// InitStreamMode ;
7593: CALL 8938 0 0
// DefineStreamItems ( false ) ;
7597: LD_INT 0
7599: PPUSH
7600: CALL 9402 0 1
// end ;
7604: END
// export function SOS_MapStart ( ) ; begin
7605: LD_INT 0
7607: PPUSH
// if streamModeActive then
7608: LD_EXP 25
7612: IFFALSE 7621
// DefineStreamItems ( true ) ;
7614: LD_INT 1
7616: PPUSH
7617: CALL 9402 0 1
// UpdateLuaVariables ( ) ;
7621: CALL 7638 0 0
// UpdateFactoryWaypoints ( ) ;
7625: CALL 22524 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7629: CALL 22776 0 0
// end ;
7633: LD_VAR 0 1
7637: RET
// function UpdateLuaVariables ( ) ; begin
7638: LD_INT 0
7640: PPUSH
// if globalGameSaveCounter then
7641: LD_EXP 24
7645: IFFALSE 7679
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7647: LD_ADDR_EXP 24
7651: PUSH
7652: LD_EXP 24
7656: PPUSH
7657: CALL 69562 0 1
7661: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7662: LD_STRING setGameSaveCounter(
7664: PUSH
7665: LD_EXP 24
7669: STR
7670: PUSH
7671: LD_STRING )
7673: STR
7674: PPUSH
7675: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7679: LD_STRING setGameDifficulty(
7681: PUSH
7682: LD_OWVAR 67
7686: STR
7687: PUSH
7688: LD_STRING )
7690: STR
7691: PPUSH
7692: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7696: LD_STRING displayDifficulty(
7698: PUSH
7699: LD_OWVAR 67
7703: STR
7704: PUSH
7705: LD_STRING )
7707: STR
7708: PPUSH
7709: CALL_OW 559
// end ;
7713: LD_VAR 0 1
7717: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7718: LD_INT 0
7720: PPUSH
// if p2 = stream_mode then
7721: LD_VAR 0 2
7725: PUSH
7726: LD_INT 100
7728: EQUAL
7729: IFFALSE 8732
// begin if not StreamModeActive then
7731: LD_EXP 25
7735: NOT
7736: IFFALSE 7746
// StreamModeActive := true ;
7738: LD_ADDR_EXP 25
7742: PUSH
7743: LD_INT 1
7745: ST_TO_ADDR
// if p3 = 0 then
7746: LD_VAR 0 3
7750: PUSH
7751: LD_INT 0
7753: EQUAL
7754: IFFALSE 7760
// InitStreamMode ;
7756: CALL 8938 0 0
// if p3 = 1 then
7760: LD_VAR 0 3
7764: PUSH
7765: LD_INT 1
7767: EQUAL
7768: IFFALSE 7778
// sRocket := true ;
7770: LD_ADDR_EXP 30
7774: PUSH
7775: LD_INT 1
7777: ST_TO_ADDR
// if p3 = 2 then
7778: LD_VAR 0 3
7782: PUSH
7783: LD_INT 2
7785: EQUAL
7786: IFFALSE 7796
// sSpeed := true ;
7788: LD_ADDR_EXP 29
7792: PUSH
7793: LD_INT 1
7795: ST_TO_ADDR
// if p3 = 3 then
7796: LD_VAR 0 3
7800: PUSH
7801: LD_INT 3
7803: EQUAL
7804: IFFALSE 7814
// sEngine := true ;
7806: LD_ADDR_EXP 31
7810: PUSH
7811: LD_INT 1
7813: ST_TO_ADDR
// if p3 = 4 then
7814: LD_VAR 0 3
7818: PUSH
7819: LD_INT 4
7821: EQUAL
7822: IFFALSE 7832
// sSpec := true ;
7824: LD_ADDR_EXP 28
7828: PUSH
7829: LD_INT 1
7831: ST_TO_ADDR
// if p3 = 5 then
7832: LD_VAR 0 3
7836: PUSH
7837: LD_INT 5
7839: EQUAL
7840: IFFALSE 7850
// sLevel := true ;
7842: LD_ADDR_EXP 32
7846: PUSH
7847: LD_INT 1
7849: ST_TO_ADDR
// if p3 = 6 then
7850: LD_VAR 0 3
7854: PUSH
7855: LD_INT 6
7857: EQUAL
7858: IFFALSE 7868
// sArmoury := true ;
7860: LD_ADDR_EXP 33
7864: PUSH
7865: LD_INT 1
7867: ST_TO_ADDR
// if p3 = 7 then
7868: LD_VAR 0 3
7872: PUSH
7873: LD_INT 7
7875: EQUAL
7876: IFFALSE 7886
// sRadar := true ;
7878: LD_ADDR_EXP 34
7882: PUSH
7883: LD_INT 1
7885: ST_TO_ADDR
// if p3 = 8 then
7886: LD_VAR 0 3
7890: PUSH
7891: LD_INT 8
7893: EQUAL
7894: IFFALSE 7904
// sBunker := true ;
7896: LD_ADDR_EXP 35
7900: PUSH
7901: LD_INT 1
7903: ST_TO_ADDR
// if p3 = 9 then
7904: LD_VAR 0 3
7908: PUSH
7909: LD_INT 9
7911: EQUAL
7912: IFFALSE 7922
// sHack := true ;
7914: LD_ADDR_EXP 36
7918: PUSH
7919: LD_INT 1
7921: ST_TO_ADDR
// if p3 = 10 then
7922: LD_VAR 0 3
7926: PUSH
7927: LD_INT 10
7929: EQUAL
7930: IFFALSE 7940
// sFire := true ;
7932: LD_ADDR_EXP 37
7936: PUSH
7937: LD_INT 1
7939: ST_TO_ADDR
// if p3 = 11 then
7940: LD_VAR 0 3
7944: PUSH
7945: LD_INT 11
7947: EQUAL
7948: IFFALSE 7958
// sRefresh := true ;
7950: LD_ADDR_EXP 38
7954: PUSH
7955: LD_INT 1
7957: ST_TO_ADDR
// if p3 = 12 then
7958: LD_VAR 0 3
7962: PUSH
7963: LD_INT 12
7965: EQUAL
7966: IFFALSE 7976
// sExp := true ;
7968: LD_ADDR_EXP 39
7972: PUSH
7973: LD_INT 1
7975: ST_TO_ADDR
// if p3 = 13 then
7976: LD_VAR 0 3
7980: PUSH
7981: LD_INT 13
7983: EQUAL
7984: IFFALSE 7994
// sDepot := true ;
7986: LD_ADDR_EXP 40
7990: PUSH
7991: LD_INT 1
7993: ST_TO_ADDR
// if p3 = 14 then
7994: LD_VAR 0 3
7998: PUSH
7999: LD_INT 14
8001: EQUAL
8002: IFFALSE 8012
// sFlag := true ;
8004: LD_ADDR_EXP 41
8008: PUSH
8009: LD_INT 1
8011: ST_TO_ADDR
// if p3 = 15 then
8012: LD_VAR 0 3
8016: PUSH
8017: LD_INT 15
8019: EQUAL
8020: IFFALSE 8030
// sKamikadze := true ;
8022: LD_ADDR_EXP 49
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// if p3 = 16 then
8030: LD_VAR 0 3
8034: PUSH
8035: LD_INT 16
8037: EQUAL
8038: IFFALSE 8048
// sTroll := true ;
8040: LD_ADDR_EXP 50
8044: PUSH
8045: LD_INT 1
8047: ST_TO_ADDR
// if p3 = 17 then
8048: LD_VAR 0 3
8052: PUSH
8053: LD_INT 17
8055: EQUAL
8056: IFFALSE 8066
// sSlow := true ;
8058: LD_ADDR_EXP 51
8062: PUSH
8063: LD_INT 1
8065: ST_TO_ADDR
// if p3 = 18 then
8066: LD_VAR 0 3
8070: PUSH
8071: LD_INT 18
8073: EQUAL
8074: IFFALSE 8084
// sLack := true ;
8076: LD_ADDR_EXP 52
8080: PUSH
8081: LD_INT 1
8083: ST_TO_ADDR
// if p3 = 19 then
8084: LD_VAR 0 3
8088: PUSH
8089: LD_INT 19
8091: EQUAL
8092: IFFALSE 8102
// sTank := true ;
8094: LD_ADDR_EXP 54
8098: PUSH
8099: LD_INT 1
8101: ST_TO_ADDR
// if p3 = 20 then
8102: LD_VAR 0 3
8106: PUSH
8107: LD_INT 20
8109: EQUAL
8110: IFFALSE 8120
// sRemote := true ;
8112: LD_ADDR_EXP 55
8116: PUSH
8117: LD_INT 1
8119: ST_TO_ADDR
// if p3 = 21 then
8120: LD_VAR 0 3
8124: PUSH
8125: LD_INT 21
8127: EQUAL
8128: IFFALSE 8138
// sPowell := true ;
8130: LD_ADDR_EXP 56
8134: PUSH
8135: LD_INT 1
8137: ST_TO_ADDR
// if p3 = 22 then
8138: LD_VAR 0 3
8142: PUSH
8143: LD_INT 22
8145: EQUAL
8146: IFFALSE 8156
// sTeleport := true ;
8148: LD_ADDR_EXP 59
8152: PUSH
8153: LD_INT 1
8155: ST_TO_ADDR
// if p3 = 23 then
8156: LD_VAR 0 3
8160: PUSH
8161: LD_INT 23
8163: EQUAL
8164: IFFALSE 8174
// sOilTower := true ;
8166: LD_ADDR_EXP 61
8170: PUSH
8171: LD_INT 1
8173: ST_TO_ADDR
// if p3 = 24 then
8174: LD_VAR 0 3
8178: PUSH
8179: LD_INT 24
8181: EQUAL
8182: IFFALSE 8192
// sShovel := true ;
8184: LD_ADDR_EXP 62
8188: PUSH
8189: LD_INT 1
8191: ST_TO_ADDR
// if p3 = 25 then
8192: LD_VAR 0 3
8196: PUSH
8197: LD_INT 25
8199: EQUAL
8200: IFFALSE 8210
// sSheik := true ;
8202: LD_ADDR_EXP 63
8206: PUSH
8207: LD_INT 1
8209: ST_TO_ADDR
// if p3 = 26 then
8210: LD_VAR 0 3
8214: PUSH
8215: LD_INT 26
8217: EQUAL
8218: IFFALSE 8228
// sEarthquake := true ;
8220: LD_ADDR_EXP 65
8224: PUSH
8225: LD_INT 1
8227: ST_TO_ADDR
// if p3 = 27 then
8228: LD_VAR 0 3
8232: PUSH
8233: LD_INT 27
8235: EQUAL
8236: IFFALSE 8246
// sAI := true ;
8238: LD_ADDR_EXP 66
8242: PUSH
8243: LD_INT 1
8245: ST_TO_ADDR
// if p3 = 28 then
8246: LD_VAR 0 3
8250: PUSH
8251: LD_INT 28
8253: EQUAL
8254: IFFALSE 8264
// sCargo := true ;
8256: LD_ADDR_EXP 69
8260: PUSH
8261: LD_INT 1
8263: ST_TO_ADDR
// if p3 = 29 then
8264: LD_VAR 0 3
8268: PUSH
8269: LD_INT 29
8271: EQUAL
8272: IFFALSE 8282
// sDLaser := true ;
8274: LD_ADDR_EXP 70
8278: PUSH
8279: LD_INT 1
8281: ST_TO_ADDR
// if p3 = 30 then
8282: LD_VAR 0 3
8286: PUSH
8287: LD_INT 30
8289: EQUAL
8290: IFFALSE 8300
// sExchange := true ;
8292: LD_ADDR_EXP 71
8296: PUSH
8297: LD_INT 1
8299: ST_TO_ADDR
// if p3 = 31 then
8300: LD_VAR 0 3
8304: PUSH
8305: LD_INT 31
8307: EQUAL
8308: IFFALSE 8318
// sFac := true ;
8310: LD_ADDR_EXP 72
8314: PUSH
8315: LD_INT 1
8317: ST_TO_ADDR
// if p3 = 32 then
8318: LD_VAR 0 3
8322: PUSH
8323: LD_INT 32
8325: EQUAL
8326: IFFALSE 8336
// sPower := true ;
8328: LD_ADDR_EXP 73
8332: PUSH
8333: LD_INT 1
8335: ST_TO_ADDR
// if p3 = 33 then
8336: LD_VAR 0 3
8340: PUSH
8341: LD_INT 33
8343: EQUAL
8344: IFFALSE 8354
// sRandom := true ;
8346: LD_ADDR_EXP 74
8350: PUSH
8351: LD_INT 1
8353: ST_TO_ADDR
// if p3 = 34 then
8354: LD_VAR 0 3
8358: PUSH
8359: LD_INT 34
8361: EQUAL
8362: IFFALSE 8372
// sShield := true ;
8364: LD_ADDR_EXP 75
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// if p3 = 35 then
8372: LD_VAR 0 3
8376: PUSH
8377: LD_INT 35
8379: EQUAL
8380: IFFALSE 8390
// sTime := true ;
8382: LD_ADDR_EXP 76
8386: PUSH
8387: LD_INT 1
8389: ST_TO_ADDR
// if p3 = 36 then
8390: LD_VAR 0 3
8394: PUSH
8395: LD_INT 36
8397: EQUAL
8398: IFFALSE 8408
// sTools := true ;
8400: LD_ADDR_EXP 77
8404: PUSH
8405: LD_INT 1
8407: ST_TO_ADDR
// if p3 = 101 then
8408: LD_VAR 0 3
8412: PUSH
8413: LD_INT 101
8415: EQUAL
8416: IFFALSE 8426
// sSold := true ;
8418: LD_ADDR_EXP 42
8422: PUSH
8423: LD_INT 1
8425: ST_TO_ADDR
// if p3 = 102 then
8426: LD_VAR 0 3
8430: PUSH
8431: LD_INT 102
8433: EQUAL
8434: IFFALSE 8444
// sDiff := true ;
8436: LD_ADDR_EXP 43
8440: PUSH
8441: LD_INT 1
8443: ST_TO_ADDR
// if p3 = 103 then
8444: LD_VAR 0 3
8448: PUSH
8449: LD_INT 103
8451: EQUAL
8452: IFFALSE 8462
// sFog := true ;
8454: LD_ADDR_EXP 46
8458: PUSH
8459: LD_INT 1
8461: ST_TO_ADDR
// if p3 = 104 then
8462: LD_VAR 0 3
8466: PUSH
8467: LD_INT 104
8469: EQUAL
8470: IFFALSE 8480
// sReset := true ;
8472: LD_ADDR_EXP 47
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// if p3 = 105 then
8480: LD_VAR 0 3
8484: PUSH
8485: LD_INT 105
8487: EQUAL
8488: IFFALSE 8498
// sSun := true ;
8490: LD_ADDR_EXP 48
8494: PUSH
8495: LD_INT 1
8497: ST_TO_ADDR
// if p3 = 106 then
8498: LD_VAR 0 3
8502: PUSH
8503: LD_INT 106
8505: EQUAL
8506: IFFALSE 8516
// sTiger := true ;
8508: LD_ADDR_EXP 44
8512: PUSH
8513: LD_INT 1
8515: ST_TO_ADDR
// if p3 = 107 then
8516: LD_VAR 0 3
8520: PUSH
8521: LD_INT 107
8523: EQUAL
8524: IFFALSE 8534
// sBomb := true ;
8526: LD_ADDR_EXP 45
8530: PUSH
8531: LD_INT 1
8533: ST_TO_ADDR
// if p3 = 108 then
8534: LD_VAR 0 3
8538: PUSH
8539: LD_INT 108
8541: EQUAL
8542: IFFALSE 8552
// sWound := true ;
8544: LD_ADDR_EXP 53
8548: PUSH
8549: LD_INT 1
8551: ST_TO_ADDR
// if p3 = 109 then
8552: LD_VAR 0 3
8556: PUSH
8557: LD_INT 109
8559: EQUAL
8560: IFFALSE 8570
// sBetray := true ;
8562: LD_ADDR_EXP 57
8566: PUSH
8567: LD_INT 1
8569: ST_TO_ADDR
// if p3 = 110 then
8570: LD_VAR 0 3
8574: PUSH
8575: LD_INT 110
8577: EQUAL
8578: IFFALSE 8588
// sContamin := true ;
8580: LD_ADDR_EXP 58
8584: PUSH
8585: LD_INT 1
8587: ST_TO_ADDR
// if p3 = 111 then
8588: LD_VAR 0 3
8592: PUSH
8593: LD_INT 111
8595: EQUAL
8596: IFFALSE 8606
// sOil := true ;
8598: LD_ADDR_EXP 60
8602: PUSH
8603: LD_INT 1
8605: ST_TO_ADDR
// if p3 = 112 then
8606: LD_VAR 0 3
8610: PUSH
8611: LD_INT 112
8613: EQUAL
8614: IFFALSE 8624
// sStu := true ;
8616: LD_ADDR_EXP 64
8620: PUSH
8621: LD_INT 1
8623: ST_TO_ADDR
// if p3 = 113 then
8624: LD_VAR 0 3
8628: PUSH
8629: LD_INT 113
8631: EQUAL
8632: IFFALSE 8642
// sBazooka := true ;
8634: LD_ADDR_EXP 67
8638: PUSH
8639: LD_INT 1
8641: ST_TO_ADDR
// if p3 = 114 then
8642: LD_VAR 0 3
8646: PUSH
8647: LD_INT 114
8649: EQUAL
8650: IFFALSE 8660
// sMortar := true ;
8652: LD_ADDR_EXP 68
8656: PUSH
8657: LD_INT 1
8659: ST_TO_ADDR
// if p3 = 115 then
8660: LD_VAR 0 3
8664: PUSH
8665: LD_INT 115
8667: EQUAL
8668: IFFALSE 8678
// sRanger := true ;
8670: LD_ADDR_EXP 78
8674: PUSH
8675: LD_INT 1
8677: ST_TO_ADDR
// if p3 = 116 then
8678: LD_VAR 0 3
8682: PUSH
8683: LD_INT 116
8685: EQUAL
8686: IFFALSE 8696
// sComputer := true ;
8688: LD_ADDR_EXP 79
8692: PUSH
8693: LD_INT 1
8695: ST_TO_ADDR
// if p3 = 117 then
8696: LD_VAR 0 3
8700: PUSH
8701: LD_INT 117
8703: EQUAL
8704: IFFALSE 8714
// s30 := true ;
8706: LD_ADDR_EXP 80
8710: PUSH
8711: LD_INT 1
8713: ST_TO_ADDR
// if p3 = 118 then
8714: LD_VAR 0 3
8718: PUSH
8719: LD_INT 118
8721: EQUAL
8722: IFFALSE 8732
// s60 := true ;
8724: LD_ADDR_EXP 81
8728: PUSH
8729: LD_INT 1
8731: ST_TO_ADDR
// end ; if p2 = hack_mode then
8732: LD_VAR 0 2
8736: PUSH
8737: LD_INT 101
8739: EQUAL
8740: IFFALSE 8868
// begin case p3 of 1 :
8742: LD_VAR 0 3
8746: PUSH
8747: LD_INT 1
8749: DOUBLE
8750: EQUAL
8751: IFTRUE 8755
8753: GO 8762
8755: POP
// hHackUnlimitedResources ; 2 :
8756: CALL 21131 0 0
8760: GO 8868
8762: LD_INT 2
8764: DOUBLE
8765: EQUAL
8766: IFTRUE 8770
8768: GO 8777
8770: POP
// hHackSetLevel10 ; 3 :
8771: CALL 21264 0 0
8775: GO 8868
8777: LD_INT 3
8779: DOUBLE
8780: EQUAL
8781: IFTRUE 8785
8783: GO 8792
8785: POP
// hHackSetLevel10YourUnits ; 4 :
8786: CALL 21349 0 0
8790: GO 8868
8792: LD_INT 4
8794: DOUBLE
8795: EQUAL
8796: IFTRUE 8800
8798: GO 8807
8800: POP
// hHackInvincible ; 5 :
8801: CALL 21797 0 0
8805: GO 8868
8807: LD_INT 5
8809: DOUBLE
8810: EQUAL
8811: IFTRUE 8815
8813: GO 8822
8815: POP
// hHackInvisible ; 6 :
8816: CALL 21908 0 0
8820: GO 8868
8822: LD_INT 6
8824: DOUBLE
8825: EQUAL
8826: IFTRUE 8830
8828: GO 8837
8830: POP
// hHackChangeYourSide ; 7 :
8831: CALL 21965 0 0
8835: GO 8868
8837: LD_INT 7
8839: DOUBLE
8840: EQUAL
8841: IFTRUE 8845
8843: GO 8852
8845: POP
// hHackChangeUnitSide ; 8 :
8846: CALL 22007 0 0
8850: GO 8868
8852: LD_INT 8
8854: DOUBLE
8855: EQUAL
8856: IFTRUE 8860
8858: GO 8867
8860: POP
// hHackFog ; end ;
8861: CALL 22108 0 0
8865: GO 8868
8867: POP
// end ; if p2 = game_save_mode then
8868: LD_VAR 0 2
8872: PUSH
8873: LD_INT 102
8875: EQUAL
8876: IFFALSE 8933
// begin if p3 = 1 then
8878: LD_VAR 0 3
8882: PUSH
8883: LD_INT 1
8885: EQUAL
8886: IFFALSE 8898
// globalGameSaveCounter := p4 ;
8888: LD_ADDR_EXP 24
8892: PUSH
8893: LD_VAR 0 4
8897: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8898: LD_VAR 0 3
8902: PUSH
8903: LD_INT 2
8905: EQUAL
8906: IFFALSE 8914
8908: PUSH
8909: LD_EXP 24
8913: AND
8914: IFFALSE 8933
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8916: LD_STRING setGameSaveCounter(
8918: PUSH
8919: LD_EXP 24
8923: STR
8924: PUSH
8925: LD_STRING )
8927: STR
8928: PPUSH
8929: CALL_OW 559
// end ; end ;
8933: LD_VAR 0 7
8937: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8938: LD_INT 0
8940: PPUSH
// streamModeActive := false ;
8941: LD_ADDR_EXP 25
8945: PUSH
8946: LD_INT 0
8948: ST_TO_ADDR
// normalCounter := 36 ;
8949: LD_ADDR_EXP 26
8953: PUSH
8954: LD_INT 36
8956: ST_TO_ADDR
// hardcoreCounter := 18 ;
8957: LD_ADDR_EXP 27
8961: PUSH
8962: LD_INT 18
8964: ST_TO_ADDR
// sRocket := false ;
8965: LD_ADDR_EXP 30
8969: PUSH
8970: LD_INT 0
8972: ST_TO_ADDR
// sSpeed := false ;
8973: LD_ADDR_EXP 29
8977: PUSH
8978: LD_INT 0
8980: ST_TO_ADDR
// sEngine := false ;
8981: LD_ADDR_EXP 31
8985: PUSH
8986: LD_INT 0
8988: ST_TO_ADDR
// sSpec := false ;
8989: LD_ADDR_EXP 28
8993: PUSH
8994: LD_INT 0
8996: ST_TO_ADDR
// sLevel := false ;
8997: LD_ADDR_EXP 32
9001: PUSH
9002: LD_INT 0
9004: ST_TO_ADDR
// sArmoury := false ;
9005: LD_ADDR_EXP 33
9009: PUSH
9010: LD_INT 0
9012: ST_TO_ADDR
// sRadar := false ;
9013: LD_ADDR_EXP 34
9017: PUSH
9018: LD_INT 0
9020: ST_TO_ADDR
// sBunker := false ;
9021: LD_ADDR_EXP 35
9025: PUSH
9026: LD_INT 0
9028: ST_TO_ADDR
// sHack := false ;
9029: LD_ADDR_EXP 36
9033: PUSH
9034: LD_INT 0
9036: ST_TO_ADDR
// sFire := false ;
9037: LD_ADDR_EXP 37
9041: PUSH
9042: LD_INT 0
9044: ST_TO_ADDR
// sRefresh := false ;
9045: LD_ADDR_EXP 38
9049: PUSH
9050: LD_INT 0
9052: ST_TO_ADDR
// sExp := false ;
9053: LD_ADDR_EXP 39
9057: PUSH
9058: LD_INT 0
9060: ST_TO_ADDR
// sDepot := false ;
9061: LD_ADDR_EXP 40
9065: PUSH
9066: LD_INT 0
9068: ST_TO_ADDR
// sFlag := false ;
9069: LD_ADDR_EXP 41
9073: PUSH
9074: LD_INT 0
9076: ST_TO_ADDR
// sKamikadze := false ;
9077: LD_ADDR_EXP 49
9081: PUSH
9082: LD_INT 0
9084: ST_TO_ADDR
// sTroll := false ;
9085: LD_ADDR_EXP 50
9089: PUSH
9090: LD_INT 0
9092: ST_TO_ADDR
// sSlow := false ;
9093: LD_ADDR_EXP 51
9097: PUSH
9098: LD_INT 0
9100: ST_TO_ADDR
// sLack := false ;
9101: LD_ADDR_EXP 52
9105: PUSH
9106: LD_INT 0
9108: ST_TO_ADDR
// sTank := false ;
9109: LD_ADDR_EXP 54
9113: PUSH
9114: LD_INT 0
9116: ST_TO_ADDR
// sRemote := false ;
9117: LD_ADDR_EXP 55
9121: PUSH
9122: LD_INT 0
9124: ST_TO_ADDR
// sPowell := false ;
9125: LD_ADDR_EXP 56
9129: PUSH
9130: LD_INT 0
9132: ST_TO_ADDR
// sTeleport := false ;
9133: LD_ADDR_EXP 59
9137: PUSH
9138: LD_INT 0
9140: ST_TO_ADDR
// sOilTower := false ;
9141: LD_ADDR_EXP 61
9145: PUSH
9146: LD_INT 0
9148: ST_TO_ADDR
// sShovel := false ;
9149: LD_ADDR_EXP 62
9153: PUSH
9154: LD_INT 0
9156: ST_TO_ADDR
// sSheik := false ;
9157: LD_ADDR_EXP 63
9161: PUSH
9162: LD_INT 0
9164: ST_TO_ADDR
// sEarthquake := false ;
9165: LD_ADDR_EXP 65
9169: PUSH
9170: LD_INT 0
9172: ST_TO_ADDR
// sAI := false ;
9173: LD_ADDR_EXP 66
9177: PUSH
9178: LD_INT 0
9180: ST_TO_ADDR
// sCargo := false ;
9181: LD_ADDR_EXP 69
9185: PUSH
9186: LD_INT 0
9188: ST_TO_ADDR
// sDLaser := false ;
9189: LD_ADDR_EXP 70
9193: PUSH
9194: LD_INT 0
9196: ST_TO_ADDR
// sExchange := false ;
9197: LD_ADDR_EXP 71
9201: PUSH
9202: LD_INT 0
9204: ST_TO_ADDR
// sFac := false ;
9205: LD_ADDR_EXP 72
9209: PUSH
9210: LD_INT 0
9212: ST_TO_ADDR
// sPower := false ;
9213: LD_ADDR_EXP 73
9217: PUSH
9218: LD_INT 0
9220: ST_TO_ADDR
// sRandom := false ;
9221: LD_ADDR_EXP 74
9225: PUSH
9226: LD_INT 0
9228: ST_TO_ADDR
// sShield := false ;
9229: LD_ADDR_EXP 75
9233: PUSH
9234: LD_INT 0
9236: ST_TO_ADDR
// sTime := false ;
9237: LD_ADDR_EXP 76
9241: PUSH
9242: LD_INT 0
9244: ST_TO_ADDR
// sTools := false ;
9245: LD_ADDR_EXP 77
9249: PUSH
9250: LD_INT 0
9252: ST_TO_ADDR
// sSold := false ;
9253: LD_ADDR_EXP 42
9257: PUSH
9258: LD_INT 0
9260: ST_TO_ADDR
// sDiff := false ;
9261: LD_ADDR_EXP 43
9265: PUSH
9266: LD_INT 0
9268: ST_TO_ADDR
// sFog := false ;
9269: LD_ADDR_EXP 46
9273: PUSH
9274: LD_INT 0
9276: ST_TO_ADDR
// sReset := false ;
9277: LD_ADDR_EXP 47
9281: PUSH
9282: LD_INT 0
9284: ST_TO_ADDR
// sSun := false ;
9285: LD_ADDR_EXP 48
9289: PUSH
9290: LD_INT 0
9292: ST_TO_ADDR
// sTiger := false ;
9293: LD_ADDR_EXP 44
9297: PUSH
9298: LD_INT 0
9300: ST_TO_ADDR
// sBomb := false ;
9301: LD_ADDR_EXP 45
9305: PUSH
9306: LD_INT 0
9308: ST_TO_ADDR
// sWound := false ;
9309: LD_ADDR_EXP 53
9313: PUSH
9314: LD_INT 0
9316: ST_TO_ADDR
// sBetray := false ;
9317: LD_ADDR_EXP 57
9321: PUSH
9322: LD_INT 0
9324: ST_TO_ADDR
// sContamin := false ;
9325: LD_ADDR_EXP 58
9329: PUSH
9330: LD_INT 0
9332: ST_TO_ADDR
// sOil := false ;
9333: LD_ADDR_EXP 60
9337: PUSH
9338: LD_INT 0
9340: ST_TO_ADDR
// sStu := false ;
9341: LD_ADDR_EXP 64
9345: PUSH
9346: LD_INT 0
9348: ST_TO_ADDR
// sBazooka := false ;
9349: LD_ADDR_EXP 67
9353: PUSH
9354: LD_INT 0
9356: ST_TO_ADDR
// sMortar := false ;
9357: LD_ADDR_EXP 68
9361: PUSH
9362: LD_INT 0
9364: ST_TO_ADDR
// sRanger := false ;
9365: LD_ADDR_EXP 78
9369: PUSH
9370: LD_INT 0
9372: ST_TO_ADDR
// sComputer := false ;
9373: LD_ADDR_EXP 79
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// s30 := false ;
9381: LD_ADDR_EXP 80
9385: PUSH
9386: LD_INT 0
9388: ST_TO_ADDR
// s60 := false ;
9389: LD_ADDR_EXP 81
9393: PUSH
9394: LD_INT 0
9396: ST_TO_ADDR
// end ;
9397: LD_VAR 0 1
9401: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9402: LD_INT 0
9404: PPUSH
9405: PPUSH
9406: PPUSH
9407: PPUSH
9408: PPUSH
9409: PPUSH
9410: PPUSH
// result := [ ] ;
9411: LD_ADDR_VAR 0 2
9415: PUSH
9416: EMPTY
9417: ST_TO_ADDR
// if campaign_id = 1 then
9418: LD_OWVAR 69
9422: PUSH
9423: LD_INT 1
9425: EQUAL
9426: IFFALSE 12592
// begin case mission_number of 1 :
9428: LD_OWVAR 70
9432: PUSH
9433: LD_INT 1
9435: DOUBLE
9436: EQUAL
9437: IFTRUE 9441
9439: GO 9517
9441: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9442: LD_ADDR_VAR 0 2
9446: PUSH
9447: LD_INT 2
9449: PUSH
9450: LD_INT 4
9452: PUSH
9453: LD_INT 11
9455: PUSH
9456: LD_INT 12
9458: PUSH
9459: LD_INT 15
9461: PUSH
9462: LD_INT 16
9464: PUSH
9465: LD_INT 22
9467: PUSH
9468: LD_INT 23
9470: PUSH
9471: LD_INT 26
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: PUSH
9485: LD_INT 101
9487: PUSH
9488: LD_INT 102
9490: PUSH
9491: LD_INT 106
9493: PUSH
9494: LD_INT 116
9496: PUSH
9497: LD_INT 117
9499: PUSH
9500: LD_INT 118
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: ST_TO_ADDR
9515: GO 12590
9517: LD_INT 2
9519: DOUBLE
9520: EQUAL
9521: IFTRUE 9525
9523: GO 9609
9525: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9526: LD_ADDR_VAR 0 2
9530: PUSH
9531: LD_INT 2
9533: PUSH
9534: LD_INT 4
9536: PUSH
9537: LD_INT 11
9539: PUSH
9540: LD_INT 12
9542: PUSH
9543: LD_INT 15
9545: PUSH
9546: LD_INT 16
9548: PUSH
9549: LD_INT 22
9551: PUSH
9552: LD_INT 23
9554: PUSH
9555: LD_INT 26
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: PUSH
9569: LD_INT 101
9571: PUSH
9572: LD_INT 102
9574: PUSH
9575: LD_INT 105
9577: PUSH
9578: LD_INT 106
9580: PUSH
9581: LD_INT 108
9583: PUSH
9584: LD_INT 116
9586: PUSH
9587: LD_INT 117
9589: PUSH
9590: LD_INT 118
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: ST_TO_ADDR
9607: GO 12590
9609: LD_INT 3
9611: DOUBLE
9612: EQUAL
9613: IFTRUE 9617
9615: GO 9705
9617: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9618: LD_ADDR_VAR 0 2
9622: PUSH
9623: LD_INT 2
9625: PUSH
9626: LD_INT 4
9628: PUSH
9629: LD_INT 5
9631: PUSH
9632: LD_INT 11
9634: PUSH
9635: LD_INT 12
9637: PUSH
9638: LD_INT 15
9640: PUSH
9641: LD_INT 16
9643: PUSH
9644: LD_INT 22
9646: PUSH
9647: LD_INT 26
9649: PUSH
9650: LD_INT 36
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 101
9667: PUSH
9668: LD_INT 102
9670: PUSH
9671: LD_INT 105
9673: PUSH
9674: LD_INT 106
9676: PUSH
9677: LD_INT 108
9679: PUSH
9680: LD_INT 116
9682: PUSH
9683: LD_INT 117
9685: PUSH
9686: LD_INT 118
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: ST_TO_ADDR
9703: GO 12590
9705: LD_INT 4
9707: DOUBLE
9708: EQUAL
9709: IFTRUE 9713
9711: GO 9809
9713: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9714: LD_ADDR_VAR 0 2
9718: PUSH
9719: LD_INT 2
9721: PUSH
9722: LD_INT 4
9724: PUSH
9725: LD_INT 5
9727: PUSH
9728: LD_INT 8
9730: PUSH
9731: LD_INT 11
9733: PUSH
9734: LD_INT 12
9736: PUSH
9737: LD_INT 15
9739: PUSH
9740: LD_INT 16
9742: PUSH
9743: LD_INT 22
9745: PUSH
9746: LD_INT 23
9748: PUSH
9749: LD_INT 26
9751: PUSH
9752: LD_INT 36
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: PUSH
9769: LD_INT 101
9771: PUSH
9772: LD_INT 102
9774: PUSH
9775: LD_INT 105
9777: PUSH
9778: LD_INT 106
9780: PUSH
9781: LD_INT 108
9783: PUSH
9784: LD_INT 116
9786: PUSH
9787: LD_INT 117
9789: PUSH
9790: LD_INT 118
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: ST_TO_ADDR
9807: GO 12590
9809: LD_INT 5
9811: DOUBLE
9812: EQUAL
9813: IFTRUE 9817
9815: GO 9929
9817: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9818: LD_ADDR_VAR 0 2
9822: PUSH
9823: LD_INT 2
9825: PUSH
9826: LD_INT 4
9828: PUSH
9829: LD_INT 5
9831: PUSH
9832: LD_INT 6
9834: PUSH
9835: LD_INT 8
9837: PUSH
9838: LD_INT 11
9840: PUSH
9841: LD_INT 12
9843: PUSH
9844: LD_INT 15
9846: PUSH
9847: LD_INT 16
9849: PUSH
9850: LD_INT 22
9852: PUSH
9853: LD_INT 23
9855: PUSH
9856: LD_INT 25
9858: PUSH
9859: LD_INT 26
9861: PUSH
9862: LD_INT 36
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: PUSH
9881: LD_INT 101
9883: PUSH
9884: LD_INT 102
9886: PUSH
9887: LD_INT 105
9889: PUSH
9890: LD_INT 106
9892: PUSH
9893: LD_INT 108
9895: PUSH
9896: LD_INT 109
9898: PUSH
9899: LD_INT 112
9901: PUSH
9902: LD_INT 116
9904: PUSH
9905: LD_INT 117
9907: PUSH
9908: LD_INT 118
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: ST_TO_ADDR
9927: GO 12590
9929: LD_INT 6
9931: DOUBLE
9932: EQUAL
9933: IFTRUE 9937
9935: GO 10069
9937: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9938: LD_ADDR_VAR 0 2
9942: PUSH
9943: LD_INT 2
9945: PUSH
9946: LD_INT 4
9948: PUSH
9949: LD_INT 5
9951: PUSH
9952: LD_INT 6
9954: PUSH
9955: LD_INT 8
9957: PUSH
9958: LD_INT 11
9960: PUSH
9961: LD_INT 12
9963: PUSH
9964: LD_INT 15
9966: PUSH
9967: LD_INT 16
9969: PUSH
9970: LD_INT 20
9972: PUSH
9973: LD_INT 21
9975: PUSH
9976: LD_INT 22
9978: PUSH
9979: LD_INT 23
9981: PUSH
9982: LD_INT 25
9984: PUSH
9985: LD_INT 26
9987: PUSH
9988: LD_INT 30
9990: PUSH
9991: LD_INT 31
9993: PUSH
9994: LD_INT 32
9996: PUSH
9997: LD_INT 36
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: PUSH
10021: LD_INT 101
10023: PUSH
10024: LD_INT 102
10026: PUSH
10027: LD_INT 105
10029: PUSH
10030: LD_INT 106
10032: PUSH
10033: LD_INT 108
10035: PUSH
10036: LD_INT 109
10038: PUSH
10039: LD_INT 112
10041: PUSH
10042: LD_INT 116
10044: PUSH
10045: LD_INT 117
10047: PUSH
10048: LD_INT 118
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: ST_TO_ADDR
10067: GO 12590
10069: LD_INT 7
10071: DOUBLE
10072: EQUAL
10073: IFTRUE 10077
10075: GO 10189
10077: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10078: LD_ADDR_VAR 0 2
10082: PUSH
10083: LD_INT 2
10085: PUSH
10086: LD_INT 4
10088: PUSH
10089: LD_INT 5
10091: PUSH
10092: LD_INT 7
10094: PUSH
10095: LD_INT 11
10097: PUSH
10098: LD_INT 12
10100: PUSH
10101: LD_INT 15
10103: PUSH
10104: LD_INT 16
10106: PUSH
10107: LD_INT 20
10109: PUSH
10110: LD_INT 21
10112: PUSH
10113: LD_INT 22
10115: PUSH
10116: LD_INT 23
10118: PUSH
10119: LD_INT 25
10121: PUSH
10122: LD_INT 26
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 101
10143: PUSH
10144: LD_INT 102
10146: PUSH
10147: LD_INT 103
10149: PUSH
10150: LD_INT 105
10152: PUSH
10153: LD_INT 106
10155: PUSH
10156: LD_INT 108
10158: PUSH
10159: LD_INT 112
10161: PUSH
10162: LD_INT 116
10164: PUSH
10165: LD_INT 117
10167: PUSH
10168: LD_INT 118
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: ST_TO_ADDR
10187: GO 12590
10189: LD_INT 8
10191: DOUBLE
10192: EQUAL
10193: IFTRUE 10197
10195: GO 10337
10197: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10198: LD_ADDR_VAR 0 2
10202: PUSH
10203: LD_INT 2
10205: PUSH
10206: LD_INT 4
10208: PUSH
10209: LD_INT 5
10211: PUSH
10212: LD_INT 6
10214: PUSH
10215: LD_INT 7
10217: PUSH
10218: LD_INT 8
10220: PUSH
10221: LD_INT 11
10223: PUSH
10224: LD_INT 12
10226: PUSH
10227: LD_INT 15
10229: PUSH
10230: LD_INT 16
10232: PUSH
10233: LD_INT 20
10235: PUSH
10236: LD_INT 21
10238: PUSH
10239: LD_INT 22
10241: PUSH
10242: LD_INT 23
10244: PUSH
10245: LD_INT 25
10247: PUSH
10248: LD_INT 26
10250: PUSH
10251: LD_INT 30
10253: PUSH
10254: LD_INT 31
10256: PUSH
10257: LD_INT 32
10259: PUSH
10260: LD_INT 36
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 101
10287: PUSH
10288: LD_INT 102
10290: PUSH
10291: LD_INT 103
10293: PUSH
10294: LD_INT 105
10296: PUSH
10297: LD_INT 106
10299: PUSH
10300: LD_INT 108
10302: PUSH
10303: LD_INT 109
10305: PUSH
10306: LD_INT 112
10308: PUSH
10309: LD_INT 116
10311: PUSH
10312: LD_INT 117
10314: PUSH
10315: LD_INT 118
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: ST_TO_ADDR
10335: GO 12590
10337: LD_INT 9
10339: DOUBLE
10340: EQUAL
10341: IFTRUE 10345
10343: GO 10493
10345: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10346: LD_ADDR_VAR 0 2
10350: PUSH
10351: LD_INT 2
10353: PUSH
10354: LD_INT 4
10356: PUSH
10357: LD_INT 5
10359: PUSH
10360: LD_INT 6
10362: PUSH
10363: LD_INT 7
10365: PUSH
10366: LD_INT 8
10368: PUSH
10369: LD_INT 11
10371: PUSH
10372: LD_INT 12
10374: PUSH
10375: LD_INT 15
10377: PUSH
10378: LD_INT 16
10380: PUSH
10381: LD_INT 20
10383: PUSH
10384: LD_INT 21
10386: PUSH
10387: LD_INT 22
10389: PUSH
10390: LD_INT 23
10392: PUSH
10393: LD_INT 25
10395: PUSH
10396: LD_INT 26
10398: PUSH
10399: LD_INT 28
10401: PUSH
10402: LD_INT 30
10404: PUSH
10405: LD_INT 31
10407: PUSH
10408: LD_INT 32
10410: PUSH
10411: LD_INT 36
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: PUSH
10437: LD_INT 101
10439: PUSH
10440: LD_INT 102
10442: PUSH
10443: LD_INT 103
10445: PUSH
10446: LD_INT 105
10448: PUSH
10449: LD_INT 106
10451: PUSH
10452: LD_INT 108
10454: PUSH
10455: LD_INT 109
10457: PUSH
10458: LD_INT 112
10460: PUSH
10461: LD_INT 114
10463: PUSH
10464: LD_INT 116
10466: PUSH
10467: LD_INT 117
10469: PUSH
10470: LD_INT 118
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: ST_TO_ADDR
10491: GO 12590
10493: LD_INT 10
10495: DOUBLE
10496: EQUAL
10497: IFTRUE 10501
10499: GO 10697
10501: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10502: LD_ADDR_VAR 0 2
10506: PUSH
10507: LD_INT 2
10509: PUSH
10510: LD_INT 4
10512: PUSH
10513: LD_INT 5
10515: PUSH
10516: LD_INT 6
10518: PUSH
10519: LD_INT 7
10521: PUSH
10522: LD_INT 8
10524: PUSH
10525: LD_INT 9
10527: PUSH
10528: LD_INT 10
10530: PUSH
10531: LD_INT 11
10533: PUSH
10534: LD_INT 12
10536: PUSH
10537: LD_INT 13
10539: PUSH
10540: LD_INT 14
10542: PUSH
10543: LD_INT 15
10545: PUSH
10546: LD_INT 16
10548: PUSH
10549: LD_INT 17
10551: PUSH
10552: LD_INT 18
10554: PUSH
10555: LD_INT 19
10557: PUSH
10558: LD_INT 20
10560: PUSH
10561: LD_INT 21
10563: PUSH
10564: LD_INT 22
10566: PUSH
10567: LD_INT 23
10569: PUSH
10570: LD_INT 24
10572: PUSH
10573: LD_INT 25
10575: PUSH
10576: LD_INT 26
10578: PUSH
10579: LD_INT 28
10581: PUSH
10582: LD_INT 30
10584: PUSH
10585: LD_INT 31
10587: PUSH
10588: LD_INT 32
10590: PUSH
10591: LD_INT 36
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: PUSH
10625: LD_INT 101
10627: PUSH
10628: LD_INT 102
10630: PUSH
10631: LD_INT 103
10633: PUSH
10634: LD_INT 104
10636: PUSH
10637: LD_INT 105
10639: PUSH
10640: LD_INT 106
10642: PUSH
10643: LD_INT 107
10645: PUSH
10646: LD_INT 108
10648: PUSH
10649: LD_INT 109
10651: PUSH
10652: LD_INT 110
10654: PUSH
10655: LD_INT 111
10657: PUSH
10658: LD_INT 112
10660: PUSH
10661: LD_INT 114
10663: PUSH
10664: LD_INT 116
10666: PUSH
10667: LD_INT 117
10669: PUSH
10670: LD_INT 118
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: ST_TO_ADDR
10695: GO 12590
10697: LD_INT 11
10699: DOUBLE
10700: EQUAL
10701: IFTRUE 10705
10703: GO 10909
10705: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10706: LD_ADDR_VAR 0 2
10710: PUSH
10711: LD_INT 2
10713: PUSH
10714: LD_INT 3
10716: PUSH
10717: LD_INT 4
10719: PUSH
10720: LD_INT 5
10722: PUSH
10723: LD_INT 6
10725: PUSH
10726: LD_INT 7
10728: PUSH
10729: LD_INT 8
10731: PUSH
10732: LD_INT 9
10734: PUSH
10735: LD_INT 10
10737: PUSH
10738: LD_INT 11
10740: PUSH
10741: LD_INT 12
10743: PUSH
10744: LD_INT 13
10746: PUSH
10747: LD_INT 14
10749: PUSH
10750: LD_INT 15
10752: PUSH
10753: LD_INT 16
10755: PUSH
10756: LD_INT 17
10758: PUSH
10759: LD_INT 18
10761: PUSH
10762: LD_INT 19
10764: PUSH
10765: LD_INT 20
10767: PUSH
10768: LD_INT 21
10770: PUSH
10771: LD_INT 22
10773: PUSH
10774: LD_INT 23
10776: PUSH
10777: LD_INT 24
10779: PUSH
10780: LD_INT 25
10782: PUSH
10783: LD_INT 26
10785: PUSH
10786: LD_INT 28
10788: PUSH
10789: LD_INT 30
10791: PUSH
10792: LD_INT 31
10794: PUSH
10795: LD_INT 32
10797: PUSH
10798: LD_INT 34
10800: PUSH
10801: LD_INT 36
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 101
10839: PUSH
10840: LD_INT 102
10842: PUSH
10843: LD_INT 103
10845: PUSH
10846: LD_INT 104
10848: PUSH
10849: LD_INT 105
10851: PUSH
10852: LD_INT 106
10854: PUSH
10855: LD_INT 107
10857: PUSH
10858: LD_INT 108
10860: PUSH
10861: LD_INT 109
10863: PUSH
10864: LD_INT 110
10866: PUSH
10867: LD_INT 111
10869: PUSH
10870: LD_INT 112
10872: PUSH
10873: LD_INT 114
10875: PUSH
10876: LD_INT 116
10878: PUSH
10879: LD_INT 117
10881: PUSH
10882: LD_INT 118
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: ST_TO_ADDR
10907: GO 12590
10909: LD_INT 12
10911: DOUBLE
10912: EQUAL
10913: IFTRUE 10917
10915: GO 11137
10917: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10918: LD_ADDR_VAR 0 2
10922: PUSH
10923: LD_INT 1
10925: PUSH
10926: LD_INT 2
10928: PUSH
10929: LD_INT 3
10931: PUSH
10932: LD_INT 4
10934: PUSH
10935: LD_INT 5
10937: PUSH
10938: LD_INT 6
10940: PUSH
10941: LD_INT 7
10943: PUSH
10944: LD_INT 8
10946: PUSH
10947: LD_INT 9
10949: PUSH
10950: LD_INT 10
10952: PUSH
10953: LD_INT 11
10955: PUSH
10956: LD_INT 12
10958: PUSH
10959: LD_INT 13
10961: PUSH
10962: LD_INT 14
10964: PUSH
10965: LD_INT 15
10967: PUSH
10968: LD_INT 16
10970: PUSH
10971: LD_INT 17
10973: PUSH
10974: LD_INT 18
10976: PUSH
10977: LD_INT 19
10979: PUSH
10980: LD_INT 20
10982: PUSH
10983: LD_INT 21
10985: PUSH
10986: LD_INT 22
10988: PUSH
10989: LD_INT 23
10991: PUSH
10992: LD_INT 24
10994: PUSH
10995: LD_INT 25
10997: PUSH
10998: LD_INT 26
11000: PUSH
11001: LD_INT 27
11003: PUSH
11004: LD_INT 28
11006: PUSH
11007: LD_INT 30
11009: PUSH
11010: LD_INT 31
11012: PUSH
11013: LD_INT 32
11015: PUSH
11016: LD_INT 33
11018: PUSH
11019: LD_INT 34
11021: PUSH
11022: LD_INT 36
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 101
11063: PUSH
11064: LD_INT 102
11066: PUSH
11067: LD_INT 103
11069: PUSH
11070: LD_INT 104
11072: PUSH
11073: LD_INT 105
11075: PUSH
11076: LD_INT 106
11078: PUSH
11079: LD_INT 107
11081: PUSH
11082: LD_INT 108
11084: PUSH
11085: LD_INT 109
11087: PUSH
11088: LD_INT 110
11090: PUSH
11091: LD_INT 111
11093: PUSH
11094: LD_INT 112
11096: PUSH
11097: LD_INT 113
11099: PUSH
11100: LD_INT 114
11102: PUSH
11103: LD_INT 116
11105: PUSH
11106: LD_INT 117
11108: PUSH
11109: LD_INT 118
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: ST_TO_ADDR
11135: GO 12590
11137: LD_INT 13
11139: DOUBLE
11140: EQUAL
11141: IFTRUE 11145
11143: GO 11353
11145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11146: LD_ADDR_VAR 0 2
11150: PUSH
11151: LD_INT 1
11153: PUSH
11154: LD_INT 2
11156: PUSH
11157: LD_INT 3
11159: PUSH
11160: LD_INT 4
11162: PUSH
11163: LD_INT 5
11165: PUSH
11166: LD_INT 8
11168: PUSH
11169: LD_INT 9
11171: PUSH
11172: LD_INT 10
11174: PUSH
11175: LD_INT 11
11177: PUSH
11178: LD_INT 12
11180: PUSH
11181: LD_INT 14
11183: PUSH
11184: LD_INT 15
11186: PUSH
11187: LD_INT 16
11189: PUSH
11190: LD_INT 17
11192: PUSH
11193: LD_INT 18
11195: PUSH
11196: LD_INT 19
11198: PUSH
11199: LD_INT 20
11201: PUSH
11202: LD_INT 21
11204: PUSH
11205: LD_INT 22
11207: PUSH
11208: LD_INT 23
11210: PUSH
11211: LD_INT 24
11213: PUSH
11214: LD_INT 25
11216: PUSH
11217: LD_INT 26
11219: PUSH
11220: LD_INT 27
11222: PUSH
11223: LD_INT 28
11225: PUSH
11226: LD_INT 30
11228: PUSH
11229: LD_INT 31
11231: PUSH
11232: LD_INT 32
11234: PUSH
11235: LD_INT 33
11237: PUSH
11238: LD_INT 34
11240: PUSH
11241: LD_INT 36
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: PUSH
11277: LD_INT 101
11279: PUSH
11280: LD_INT 102
11282: PUSH
11283: LD_INT 103
11285: PUSH
11286: LD_INT 104
11288: PUSH
11289: LD_INT 105
11291: PUSH
11292: LD_INT 106
11294: PUSH
11295: LD_INT 107
11297: PUSH
11298: LD_INT 108
11300: PUSH
11301: LD_INT 109
11303: PUSH
11304: LD_INT 110
11306: PUSH
11307: LD_INT 111
11309: PUSH
11310: LD_INT 112
11312: PUSH
11313: LD_INT 113
11315: PUSH
11316: LD_INT 114
11318: PUSH
11319: LD_INT 116
11321: PUSH
11322: LD_INT 117
11324: PUSH
11325: LD_INT 118
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: ST_TO_ADDR
11351: GO 12590
11353: LD_INT 14
11355: DOUBLE
11356: EQUAL
11357: IFTRUE 11361
11359: GO 11585
11361: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11362: LD_ADDR_VAR 0 2
11366: PUSH
11367: LD_INT 1
11369: PUSH
11370: LD_INT 2
11372: PUSH
11373: LD_INT 3
11375: PUSH
11376: LD_INT 4
11378: PUSH
11379: LD_INT 5
11381: PUSH
11382: LD_INT 6
11384: PUSH
11385: LD_INT 7
11387: PUSH
11388: LD_INT 8
11390: PUSH
11391: LD_INT 9
11393: PUSH
11394: LD_INT 10
11396: PUSH
11397: LD_INT 11
11399: PUSH
11400: LD_INT 12
11402: PUSH
11403: LD_INT 13
11405: PUSH
11406: LD_INT 14
11408: PUSH
11409: LD_INT 15
11411: PUSH
11412: LD_INT 16
11414: PUSH
11415: LD_INT 17
11417: PUSH
11418: LD_INT 18
11420: PUSH
11421: LD_INT 19
11423: PUSH
11424: LD_INT 20
11426: PUSH
11427: LD_INT 21
11429: PUSH
11430: LD_INT 22
11432: PUSH
11433: LD_INT 23
11435: PUSH
11436: LD_INT 24
11438: PUSH
11439: LD_INT 25
11441: PUSH
11442: LD_INT 26
11444: PUSH
11445: LD_INT 27
11447: PUSH
11448: LD_INT 28
11450: PUSH
11451: LD_INT 29
11453: PUSH
11454: LD_INT 30
11456: PUSH
11457: LD_INT 31
11459: PUSH
11460: LD_INT 32
11462: PUSH
11463: LD_INT 33
11465: PUSH
11466: LD_INT 34
11468: PUSH
11469: LD_INT 36
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 101
11511: PUSH
11512: LD_INT 102
11514: PUSH
11515: LD_INT 103
11517: PUSH
11518: LD_INT 104
11520: PUSH
11521: LD_INT 105
11523: PUSH
11524: LD_INT 106
11526: PUSH
11527: LD_INT 107
11529: PUSH
11530: LD_INT 108
11532: PUSH
11533: LD_INT 109
11535: PUSH
11536: LD_INT 110
11538: PUSH
11539: LD_INT 111
11541: PUSH
11542: LD_INT 112
11544: PUSH
11545: LD_INT 113
11547: PUSH
11548: LD_INT 114
11550: PUSH
11551: LD_INT 116
11553: PUSH
11554: LD_INT 117
11556: PUSH
11557: LD_INT 118
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: ST_TO_ADDR
11583: GO 12590
11585: LD_INT 15
11587: DOUBLE
11588: EQUAL
11589: IFTRUE 11593
11591: GO 11817
11593: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11594: LD_ADDR_VAR 0 2
11598: PUSH
11599: LD_INT 1
11601: PUSH
11602: LD_INT 2
11604: PUSH
11605: LD_INT 3
11607: PUSH
11608: LD_INT 4
11610: PUSH
11611: LD_INT 5
11613: PUSH
11614: LD_INT 6
11616: PUSH
11617: LD_INT 7
11619: PUSH
11620: LD_INT 8
11622: PUSH
11623: LD_INT 9
11625: PUSH
11626: LD_INT 10
11628: PUSH
11629: LD_INT 11
11631: PUSH
11632: LD_INT 12
11634: PUSH
11635: LD_INT 13
11637: PUSH
11638: LD_INT 14
11640: PUSH
11641: LD_INT 15
11643: PUSH
11644: LD_INT 16
11646: PUSH
11647: LD_INT 17
11649: PUSH
11650: LD_INT 18
11652: PUSH
11653: LD_INT 19
11655: PUSH
11656: LD_INT 20
11658: PUSH
11659: LD_INT 21
11661: PUSH
11662: LD_INT 22
11664: PUSH
11665: LD_INT 23
11667: PUSH
11668: LD_INT 24
11670: PUSH
11671: LD_INT 25
11673: PUSH
11674: LD_INT 26
11676: PUSH
11677: LD_INT 27
11679: PUSH
11680: LD_INT 28
11682: PUSH
11683: LD_INT 29
11685: PUSH
11686: LD_INT 30
11688: PUSH
11689: LD_INT 31
11691: PUSH
11692: LD_INT 32
11694: PUSH
11695: LD_INT 33
11697: PUSH
11698: LD_INT 34
11700: PUSH
11701: LD_INT 36
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 101
11743: PUSH
11744: LD_INT 102
11746: PUSH
11747: LD_INT 103
11749: PUSH
11750: LD_INT 104
11752: PUSH
11753: LD_INT 105
11755: PUSH
11756: LD_INT 106
11758: PUSH
11759: LD_INT 107
11761: PUSH
11762: LD_INT 108
11764: PUSH
11765: LD_INT 109
11767: PUSH
11768: LD_INT 110
11770: PUSH
11771: LD_INT 111
11773: PUSH
11774: LD_INT 112
11776: PUSH
11777: LD_INT 113
11779: PUSH
11780: LD_INT 114
11782: PUSH
11783: LD_INT 116
11785: PUSH
11786: LD_INT 117
11788: PUSH
11789: LD_INT 118
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: ST_TO_ADDR
11815: GO 12590
11817: LD_INT 16
11819: DOUBLE
11820: EQUAL
11821: IFTRUE 11825
11823: GO 11961
11825: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11826: LD_ADDR_VAR 0 2
11830: PUSH
11831: LD_INT 2
11833: PUSH
11834: LD_INT 4
11836: PUSH
11837: LD_INT 5
11839: PUSH
11840: LD_INT 7
11842: PUSH
11843: LD_INT 11
11845: PUSH
11846: LD_INT 12
11848: PUSH
11849: LD_INT 15
11851: PUSH
11852: LD_INT 16
11854: PUSH
11855: LD_INT 20
11857: PUSH
11858: LD_INT 21
11860: PUSH
11861: LD_INT 22
11863: PUSH
11864: LD_INT 23
11866: PUSH
11867: LD_INT 25
11869: PUSH
11870: LD_INT 26
11872: PUSH
11873: LD_INT 30
11875: PUSH
11876: LD_INT 31
11878: PUSH
11879: LD_INT 32
11881: PUSH
11882: LD_INT 33
11884: PUSH
11885: LD_INT 34
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 101
11911: PUSH
11912: LD_INT 102
11914: PUSH
11915: LD_INT 103
11917: PUSH
11918: LD_INT 106
11920: PUSH
11921: LD_INT 108
11923: PUSH
11924: LD_INT 112
11926: PUSH
11927: LD_INT 113
11929: PUSH
11930: LD_INT 114
11932: PUSH
11933: LD_INT 116
11935: PUSH
11936: LD_INT 117
11938: PUSH
11939: LD_INT 118
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: ST_TO_ADDR
11959: GO 12590
11961: LD_INT 17
11963: DOUBLE
11964: EQUAL
11965: IFTRUE 11969
11967: GO 12193
11969: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11970: LD_ADDR_VAR 0 2
11974: PUSH
11975: LD_INT 1
11977: PUSH
11978: LD_INT 2
11980: PUSH
11981: LD_INT 3
11983: PUSH
11984: LD_INT 4
11986: PUSH
11987: LD_INT 5
11989: PUSH
11990: LD_INT 6
11992: PUSH
11993: LD_INT 7
11995: PUSH
11996: LD_INT 8
11998: PUSH
11999: LD_INT 9
12001: PUSH
12002: LD_INT 10
12004: PUSH
12005: LD_INT 11
12007: PUSH
12008: LD_INT 12
12010: PUSH
12011: LD_INT 13
12013: PUSH
12014: LD_INT 14
12016: PUSH
12017: LD_INT 15
12019: PUSH
12020: LD_INT 16
12022: PUSH
12023: LD_INT 17
12025: PUSH
12026: LD_INT 18
12028: PUSH
12029: LD_INT 19
12031: PUSH
12032: LD_INT 20
12034: PUSH
12035: LD_INT 21
12037: PUSH
12038: LD_INT 22
12040: PUSH
12041: LD_INT 23
12043: PUSH
12044: LD_INT 24
12046: PUSH
12047: LD_INT 25
12049: PUSH
12050: LD_INT 26
12052: PUSH
12053: LD_INT 27
12055: PUSH
12056: LD_INT 28
12058: PUSH
12059: LD_INT 29
12061: PUSH
12062: LD_INT 30
12064: PUSH
12065: LD_INT 31
12067: PUSH
12068: LD_INT 32
12070: PUSH
12071: LD_INT 33
12073: PUSH
12074: LD_INT 34
12076: PUSH
12077: LD_INT 36
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 101
12119: PUSH
12120: LD_INT 102
12122: PUSH
12123: LD_INT 103
12125: PUSH
12126: LD_INT 104
12128: PUSH
12129: LD_INT 105
12131: PUSH
12132: LD_INT 106
12134: PUSH
12135: LD_INT 107
12137: PUSH
12138: LD_INT 108
12140: PUSH
12141: LD_INT 109
12143: PUSH
12144: LD_INT 110
12146: PUSH
12147: LD_INT 111
12149: PUSH
12150: LD_INT 112
12152: PUSH
12153: LD_INT 113
12155: PUSH
12156: LD_INT 114
12158: PUSH
12159: LD_INT 116
12161: PUSH
12162: LD_INT 117
12164: PUSH
12165: LD_INT 118
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: ST_TO_ADDR
12191: GO 12590
12193: LD_INT 18
12195: DOUBLE
12196: EQUAL
12197: IFTRUE 12201
12199: GO 12349
12201: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12202: LD_ADDR_VAR 0 2
12206: PUSH
12207: LD_INT 2
12209: PUSH
12210: LD_INT 4
12212: PUSH
12213: LD_INT 5
12215: PUSH
12216: LD_INT 7
12218: PUSH
12219: LD_INT 11
12221: PUSH
12222: LD_INT 12
12224: PUSH
12225: LD_INT 15
12227: PUSH
12228: LD_INT 16
12230: PUSH
12231: LD_INT 20
12233: PUSH
12234: LD_INT 21
12236: PUSH
12237: LD_INT 22
12239: PUSH
12240: LD_INT 23
12242: PUSH
12243: LD_INT 25
12245: PUSH
12246: LD_INT 26
12248: PUSH
12249: LD_INT 30
12251: PUSH
12252: LD_INT 31
12254: PUSH
12255: LD_INT 32
12257: PUSH
12258: LD_INT 33
12260: PUSH
12261: LD_INT 34
12263: PUSH
12264: LD_INT 35
12266: PUSH
12267: LD_INT 36
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: PUSH
12293: LD_INT 101
12295: PUSH
12296: LD_INT 102
12298: PUSH
12299: LD_INT 103
12301: PUSH
12302: LD_INT 106
12304: PUSH
12305: LD_INT 108
12307: PUSH
12308: LD_INT 112
12310: PUSH
12311: LD_INT 113
12313: PUSH
12314: LD_INT 114
12316: PUSH
12317: LD_INT 115
12319: PUSH
12320: LD_INT 116
12322: PUSH
12323: LD_INT 117
12325: PUSH
12326: LD_INT 118
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: ST_TO_ADDR
12347: GO 12590
12349: LD_INT 19
12351: DOUBLE
12352: EQUAL
12353: IFTRUE 12357
12355: GO 12589
12357: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12358: LD_ADDR_VAR 0 2
12362: PUSH
12363: LD_INT 1
12365: PUSH
12366: LD_INT 2
12368: PUSH
12369: LD_INT 3
12371: PUSH
12372: LD_INT 4
12374: PUSH
12375: LD_INT 5
12377: PUSH
12378: LD_INT 6
12380: PUSH
12381: LD_INT 7
12383: PUSH
12384: LD_INT 8
12386: PUSH
12387: LD_INT 9
12389: PUSH
12390: LD_INT 10
12392: PUSH
12393: LD_INT 11
12395: PUSH
12396: LD_INT 12
12398: PUSH
12399: LD_INT 13
12401: PUSH
12402: LD_INT 14
12404: PUSH
12405: LD_INT 15
12407: PUSH
12408: LD_INT 16
12410: PUSH
12411: LD_INT 17
12413: PUSH
12414: LD_INT 18
12416: PUSH
12417: LD_INT 19
12419: PUSH
12420: LD_INT 20
12422: PUSH
12423: LD_INT 21
12425: PUSH
12426: LD_INT 22
12428: PUSH
12429: LD_INT 23
12431: PUSH
12432: LD_INT 24
12434: PUSH
12435: LD_INT 25
12437: PUSH
12438: LD_INT 26
12440: PUSH
12441: LD_INT 27
12443: PUSH
12444: LD_INT 28
12446: PUSH
12447: LD_INT 29
12449: PUSH
12450: LD_INT 30
12452: PUSH
12453: LD_INT 31
12455: PUSH
12456: LD_INT 32
12458: PUSH
12459: LD_INT 33
12461: PUSH
12462: LD_INT 34
12464: PUSH
12465: LD_INT 35
12467: PUSH
12468: LD_INT 36
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: PUSH
12509: LD_INT 101
12511: PUSH
12512: LD_INT 102
12514: PUSH
12515: LD_INT 103
12517: PUSH
12518: LD_INT 104
12520: PUSH
12521: LD_INT 105
12523: PUSH
12524: LD_INT 106
12526: PUSH
12527: LD_INT 107
12529: PUSH
12530: LD_INT 108
12532: PUSH
12533: LD_INT 109
12535: PUSH
12536: LD_INT 110
12538: PUSH
12539: LD_INT 111
12541: PUSH
12542: LD_INT 112
12544: PUSH
12545: LD_INT 113
12547: PUSH
12548: LD_INT 114
12550: PUSH
12551: LD_INT 115
12553: PUSH
12554: LD_INT 116
12556: PUSH
12557: LD_INT 117
12559: PUSH
12560: LD_INT 118
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: ST_TO_ADDR
12587: GO 12590
12589: POP
// end else
12590: GO 12821
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12592: LD_ADDR_VAR 0 2
12596: PUSH
12597: LD_INT 1
12599: PUSH
12600: LD_INT 2
12602: PUSH
12603: LD_INT 3
12605: PUSH
12606: LD_INT 4
12608: PUSH
12609: LD_INT 5
12611: PUSH
12612: LD_INT 6
12614: PUSH
12615: LD_INT 7
12617: PUSH
12618: LD_INT 8
12620: PUSH
12621: LD_INT 9
12623: PUSH
12624: LD_INT 10
12626: PUSH
12627: LD_INT 11
12629: PUSH
12630: LD_INT 12
12632: PUSH
12633: LD_INT 13
12635: PUSH
12636: LD_INT 14
12638: PUSH
12639: LD_INT 15
12641: PUSH
12642: LD_INT 16
12644: PUSH
12645: LD_INT 17
12647: PUSH
12648: LD_INT 18
12650: PUSH
12651: LD_INT 19
12653: PUSH
12654: LD_INT 20
12656: PUSH
12657: LD_INT 21
12659: PUSH
12660: LD_INT 22
12662: PUSH
12663: LD_INT 23
12665: PUSH
12666: LD_INT 24
12668: PUSH
12669: LD_INT 25
12671: PUSH
12672: LD_INT 26
12674: PUSH
12675: LD_INT 27
12677: PUSH
12678: LD_INT 28
12680: PUSH
12681: LD_INT 29
12683: PUSH
12684: LD_INT 30
12686: PUSH
12687: LD_INT 31
12689: PUSH
12690: LD_INT 32
12692: PUSH
12693: LD_INT 33
12695: PUSH
12696: LD_INT 34
12698: PUSH
12699: LD_INT 35
12701: PUSH
12702: LD_INT 36
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: PUSH
12743: LD_INT 101
12745: PUSH
12746: LD_INT 102
12748: PUSH
12749: LD_INT 103
12751: PUSH
12752: LD_INT 104
12754: PUSH
12755: LD_INT 105
12757: PUSH
12758: LD_INT 106
12760: PUSH
12761: LD_INT 107
12763: PUSH
12764: LD_INT 108
12766: PUSH
12767: LD_INT 109
12769: PUSH
12770: LD_INT 110
12772: PUSH
12773: LD_INT 111
12775: PUSH
12776: LD_INT 112
12778: PUSH
12779: LD_INT 113
12781: PUSH
12782: LD_INT 114
12784: PUSH
12785: LD_INT 115
12787: PUSH
12788: LD_INT 116
12790: PUSH
12791: LD_INT 117
12793: PUSH
12794: LD_INT 118
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: ST_TO_ADDR
// if result then
12821: LD_VAR 0 2
12825: IFFALSE 13611
// begin normal :=  ;
12827: LD_ADDR_VAR 0 5
12831: PUSH
12832: LD_STRING 
12834: ST_TO_ADDR
// hardcore :=  ;
12835: LD_ADDR_VAR 0 6
12839: PUSH
12840: LD_STRING 
12842: ST_TO_ADDR
// active :=  ;
12843: LD_ADDR_VAR 0 7
12847: PUSH
12848: LD_STRING 
12850: ST_TO_ADDR
// for i = 1 to normalCounter do
12851: LD_ADDR_VAR 0 8
12855: PUSH
12856: DOUBLE
12857: LD_INT 1
12859: DEC
12860: ST_TO_ADDR
12861: LD_EXP 26
12865: PUSH
12866: FOR_TO
12867: IFFALSE 12968
// begin tmp := 0 ;
12869: LD_ADDR_VAR 0 3
12873: PUSH
12874: LD_STRING 0
12876: ST_TO_ADDR
// if result [ 1 ] then
12877: LD_VAR 0 2
12881: PUSH
12882: LD_INT 1
12884: ARRAY
12885: IFFALSE 12950
// if result [ 1 ] [ 1 ] = i then
12887: LD_VAR 0 2
12891: PUSH
12892: LD_INT 1
12894: ARRAY
12895: PUSH
12896: LD_INT 1
12898: ARRAY
12899: PUSH
12900: LD_VAR 0 8
12904: EQUAL
12905: IFFALSE 12950
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12907: LD_ADDR_VAR 0 2
12911: PUSH
12912: LD_VAR 0 2
12916: PPUSH
12917: LD_INT 1
12919: PPUSH
12920: LD_VAR 0 2
12924: PUSH
12925: LD_INT 1
12927: ARRAY
12928: PPUSH
12929: LD_INT 1
12931: PPUSH
12932: CALL_OW 3
12936: PPUSH
12937: CALL_OW 1
12941: ST_TO_ADDR
// tmp := 1 ;
12942: LD_ADDR_VAR 0 3
12946: PUSH
12947: LD_STRING 1
12949: ST_TO_ADDR
// end ; normal := normal & tmp ;
12950: LD_ADDR_VAR 0 5
12954: PUSH
12955: LD_VAR 0 5
12959: PUSH
12960: LD_VAR 0 3
12964: STR
12965: ST_TO_ADDR
// end ;
12966: GO 12866
12968: POP
12969: POP
// for i = 1 to hardcoreCounter do
12970: LD_ADDR_VAR 0 8
12974: PUSH
12975: DOUBLE
12976: LD_INT 1
12978: DEC
12979: ST_TO_ADDR
12980: LD_EXP 27
12984: PUSH
12985: FOR_TO
12986: IFFALSE 13091
// begin tmp := 0 ;
12988: LD_ADDR_VAR 0 3
12992: PUSH
12993: LD_STRING 0
12995: ST_TO_ADDR
// if result [ 2 ] then
12996: LD_VAR 0 2
13000: PUSH
13001: LD_INT 2
13003: ARRAY
13004: IFFALSE 13073
// if result [ 2 ] [ 1 ] = 100 + i then
13006: LD_VAR 0 2
13010: PUSH
13011: LD_INT 2
13013: ARRAY
13014: PUSH
13015: LD_INT 1
13017: ARRAY
13018: PUSH
13019: LD_INT 100
13021: PUSH
13022: LD_VAR 0 8
13026: PLUS
13027: EQUAL
13028: IFFALSE 13073
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13030: LD_ADDR_VAR 0 2
13034: PUSH
13035: LD_VAR 0 2
13039: PPUSH
13040: LD_INT 2
13042: PPUSH
13043: LD_VAR 0 2
13047: PUSH
13048: LD_INT 2
13050: ARRAY
13051: PPUSH
13052: LD_INT 1
13054: PPUSH
13055: CALL_OW 3
13059: PPUSH
13060: CALL_OW 1
13064: ST_TO_ADDR
// tmp := 1 ;
13065: LD_ADDR_VAR 0 3
13069: PUSH
13070: LD_STRING 1
13072: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13073: LD_ADDR_VAR 0 6
13077: PUSH
13078: LD_VAR 0 6
13082: PUSH
13083: LD_VAR 0 3
13087: STR
13088: ST_TO_ADDR
// end ;
13089: GO 12985
13091: POP
13092: POP
// if isGameLoad then
13093: LD_VAR 0 1
13097: IFFALSE 13572
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13099: LD_ADDR_VAR 0 4
13103: PUSH
13104: LD_EXP 30
13108: PUSH
13109: LD_EXP 29
13113: PUSH
13114: LD_EXP 31
13118: PUSH
13119: LD_EXP 28
13123: PUSH
13124: LD_EXP 32
13128: PUSH
13129: LD_EXP 33
13133: PUSH
13134: LD_EXP 34
13138: PUSH
13139: LD_EXP 35
13143: PUSH
13144: LD_EXP 36
13148: PUSH
13149: LD_EXP 37
13153: PUSH
13154: LD_EXP 38
13158: PUSH
13159: LD_EXP 39
13163: PUSH
13164: LD_EXP 40
13168: PUSH
13169: LD_EXP 41
13173: PUSH
13174: LD_EXP 49
13178: PUSH
13179: LD_EXP 50
13183: PUSH
13184: LD_EXP 51
13188: PUSH
13189: LD_EXP 52
13193: PUSH
13194: LD_EXP 54
13198: PUSH
13199: LD_EXP 55
13203: PUSH
13204: LD_EXP 56
13208: PUSH
13209: LD_EXP 59
13213: PUSH
13214: LD_EXP 61
13218: PUSH
13219: LD_EXP 62
13223: PUSH
13224: LD_EXP 63
13228: PUSH
13229: LD_EXP 65
13233: PUSH
13234: LD_EXP 66
13238: PUSH
13239: LD_EXP 69
13243: PUSH
13244: LD_EXP 70
13248: PUSH
13249: LD_EXP 71
13253: PUSH
13254: LD_EXP 72
13258: PUSH
13259: LD_EXP 73
13263: PUSH
13264: LD_EXP 74
13268: PUSH
13269: LD_EXP 75
13273: PUSH
13274: LD_EXP 76
13278: PUSH
13279: LD_EXP 77
13283: PUSH
13284: LD_EXP 42
13288: PUSH
13289: LD_EXP 43
13293: PUSH
13294: LD_EXP 46
13298: PUSH
13299: LD_EXP 47
13303: PUSH
13304: LD_EXP 48
13308: PUSH
13309: LD_EXP 44
13313: PUSH
13314: LD_EXP 45
13318: PUSH
13319: LD_EXP 53
13323: PUSH
13324: LD_EXP 57
13328: PUSH
13329: LD_EXP 58
13333: PUSH
13334: LD_EXP 60
13338: PUSH
13339: LD_EXP 64
13343: PUSH
13344: LD_EXP 67
13348: PUSH
13349: LD_EXP 68
13353: PUSH
13354: LD_EXP 78
13358: PUSH
13359: LD_EXP 79
13363: PUSH
13364: LD_EXP 80
13368: PUSH
13369: LD_EXP 81
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: ST_TO_ADDR
// tmp :=  ;
13430: LD_ADDR_VAR 0 3
13434: PUSH
13435: LD_STRING 
13437: ST_TO_ADDR
// for i = 1 to normalCounter do
13438: LD_ADDR_VAR 0 8
13442: PUSH
13443: DOUBLE
13444: LD_INT 1
13446: DEC
13447: ST_TO_ADDR
13448: LD_EXP 26
13452: PUSH
13453: FOR_TO
13454: IFFALSE 13490
// begin if flags [ i ] then
13456: LD_VAR 0 4
13460: PUSH
13461: LD_VAR 0 8
13465: ARRAY
13466: IFFALSE 13488
// tmp := tmp & i & ; ;
13468: LD_ADDR_VAR 0 3
13472: PUSH
13473: LD_VAR 0 3
13477: PUSH
13478: LD_VAR 0 8
13482: STR
13483: PUSH
13484: LD_STRING ;
13486: STR
13487: ST_TO_ADDR
// end ;
13488: GO 13453
13490: POP
13491: POP
// for i = 1 to hardcoreCounter do
13492: LD_ADDR_VAR 0 8
13496: PUSH
13497: DOUBLE
13498: LD_INT 1
13500: DEC
13501: ST_TO_ADDR
13502: LD_EXP 27
13506: PUSH
13507: FOR_TO
13508: IFFALSE 13554
// begin if flags [ normalCounter + i ] then
13510: LD_VAR 0 4
13514: PUSH
13515: LD_EXP 26
13519: PUSH
13520: LD_VAR 0 8
13524: PLUS
13525: ARRAY
13526: IFFALSE 13552
// tmp := tmp & ( 100 + i ) & ; ;
13528: LD_ADDR_VAR 0 3
13532: PUSH
13533: LD_VAR 0 3
13537: PUSH
13538: LD_INT 100
13540: PUSH
13541: LD_VAR 0 8
13545: PLUS
13546: STR
13547: PUSH
13548: LD_STRING ;
13550: STR
13551: ST_TO_ADDR
// end ;
13552: GO 13507
13554: POP
13555: POP
// if tmp then
13556: LD_VAR 0 3
13560: IFFALSE 13572
// active := tmp ;
13562: LD_ADDR_VAR 0 7
13566: PUSH
13567: LD_VAR 0 3
13571: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13572: LD_STRING getStreamItemsFromMission("
13574: PUSH
13575: LD_VAR 0 5
13579: STR
13580: PUSH
13581: LD_STRING ","
13583: STR
13584: PUSH
13585: LD_VAR 0 6
13589: STR
13590: PUSH
13591: LD_STRING ","
13593: STR
13594: PUSH
13595: LD_VAR 0 7
13599: STR
13600: PUSH
13601: LD_STRING ")
13603: STR
13604: PPUSH
13605: CALL_OW 559
// end else
13609: GO 13618
// ToLua ( getStreamItemsFromMission("","","") ) ;
13611: LD_STRING getStreamItemsFromMission("","","")
13613: PPUSH
13614: CALL_OW 559
// end ;
13618: LD_VAR 0 2
13622: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13623: LD_EXP 25
13627: IFFALSE 13635
13629: PUSH
13630: LD_EXP 30
13634: AND
13635: IFFALSE 13759
13637: GO 13639
13639: DISABLE
13640: LD_INT 0
13642: PPUSH
13643: PPUSH
// begin enable ;
13644: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13645: LD_ADDR_VAR 0 2
13649: PUSH
13650: LD_INT 22
13652: PUSH
13653: LD_OWVAR 2
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 2
13664: PUSH
13665: LD_INT 34
13667: PUSH
13668: LD_INT 7
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 34
13677: PUSH
13678: LD_INT 45
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 34
13687: PUSH
13688: LD_INT 28
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: PUSH
13695: LD_INT 34
13697: PUSH
13698: LD_INT 47
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PPUSH
13716: CALL_OW 69
13720: ST_TO_ADDR
// if not tmp then
13721: LD_VAR 0 2
13725: NOT
13726: IFFALSE 13730
// exit ;
13728: GO 13759
// for i in tmp do
13730: LD_ADDR_VAR 0 1
13734: PUSH
13735: LD_VAR 0 2
13739: PUSH
13740: FOR_IN
13741: IFFALSE 13757
// begin SetLives ( i , 0 ) ;
13743: LD_VAR 0 1
13747: PPUSH
13748: LD_INT 0
13750: PPUSH
13751: CALL_OW 234
// end ;
13755: GO 13740
13757: POP
13758: POP
// end ;
13759: PPOPN 2
13761: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13762: LD_EXP 25
13766: IFFALSE 13774
13768: PUSH
13769: LD_EXP 31
13773: AND
13774: IFFALSE 13858
13776: GO 13778
13778: DISABLE
13779: LD_INT 0
13781: PPUSH
13782: PPUSH
// begin enable ;
13783: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13784: LD_ADDR_VAR 0 2
13788: PUSH
13789: LD_INT 22
13791: PUSH
13792: LD_OWVAR 2
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 32
13803: PUSH
13804: LD_INT 3
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PPUSH
13815: CALL_OW 69
13819: ST_TO_ADDR
// if not tmp then
13820: LD_VAR 0 2
13824: NOT
13825: IFFALSE 13829
// exit ;
13827: GO 13858
// for i in tmp do
13829: LD_ADDR_VAR 0 1
13833: PUSH
13834: LD_VAR 0 2
13838: PUSH
13839: FOR_IN
13840: IFFALSE 13856
// begin SetLives ( i , 0 ) ;
13842: LD_VAR 0 1
13846: PPUSH
13847: LD_INT 0
13849: PPUSH
13850: CALL_OW 234
// end ;
13854: GO 13839
13856: POP
13857: POP
// end ;
13858: PPOPN 2
13860: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13861: LD_EXP 25
13865: IFFALSE 13873
13867: PUSH
13868: LD_EXP 28
13872: AND
13873: IFFALSE 13966
13875: GO 13877
13877: DISABLE
13878: LD_INT 0
13880: PPUSH
// begin enable ;
13881: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13882: LD_ADDR_VAR 0 1
13886: PUSH
13887: LD_INT 22
13889: PUSH
13890: LD_OWVAR 2
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: PUSH
13899: LD_INT 2
13901: PUSH
13902: LD_INT 25
13904: PUSH
13905: LD_INT 5
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: LD_INT 25
13914: PUSH
13915: LD_INT 9
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PUSH
13922: LD_INT 25
13924: PUSH
13925: LD_INT 8
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: PPUSH
13942: CALL_OW 69
13946: PUSH
13947: FOR_IN
13948: IFFALSE 13964
// begin SetClass ( i , 1 ) ;
13950: LD_VAR 0 1
13954: PPUSH
13955: LD_INT 1
13957: PPUSH
13958: CALL_OW 336
// end ;
13962: GO 13947
13964: POP
13965: POP
// end ;
13966: PPOPN 1
13968: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13969: LD_EXP 25
13973: IFFALSE 13981
13975: PUSH
13976: LD_EXP 29
13980: AND
13981: IFFALSE 13993
13983: PUSH
13984: LD_OWVAR 65
13988: PUSH
13989: LD_INT 7
13991: LESS
13992: AND
13993: IFFALSE 14007
13995: GO 13997
13997: DISABLE
// begin enable ;
13998: ENABLE
// game_speed := 7 ;
13999: LD_ADDR_OWVAR 65
14003: PUSH
14004: LD_INT 7
14006: ST_TO_ADDR
// end ;
14007: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14008: LD_EXP 25
14012: IFFALSE 14020
14014: PUSH
14015: LD_EXP 32
14019: AND
14020: IFFALSE 14222
14022: GO 14024
14024: DISABLE
14025: LD_INT 0
14027: PPUSH
14028: PPUSH
14029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14030: LD_ADDR_VAR 0 3
14034: PUSH
14035: LD_INT 81
14037: PUSH
14038: LD_OWVAR 2
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: LD_INT 21
14049: PUSH
14050: LD_INT 1
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PPUSH
14061: CALL_OW 69
14065: ST_TO_ADDR
// if not tmp then
14066: LD_VAR 0 3
14070: NOT
14071: IFFALSE 14075
// exit ;
14073: GO 14222
// if tmp > 5 then
14075: LD_VAR 0 3
14079: PUSH
14080: LD_INT 5
14082: GREATER
14083: IFFALSE 14095
// k := 5 else
14085: LD_ADDR_VAR 0 2
14089: PUSH
14090: LD_INT 5
14092: ST_TO_ADDR
14093: GO 14105
// k := tmp ;
14095: LD_ADDR_VAR 0 2
14099: PUSH
14100: LD_VAR 0 3
14104: ST_TO_ADDR
// for i := 1 to k do
14105: LD_ADDR_VAR 0 1
14109: PUSH
14110: DOUBLE
14111: LD_INT 1
14113: DEC
14114: ST_TO_ADDR
14115: LD_VAR 0 2
14119: PUSH
14120: FOR_TO
14121: IFFALSE 14220
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14123: LD_VAR 0 3
14127: PUSH
14128: LD_VAR 0 1
14132: ARRAY
14133: PPUSH
14134: LD_VAR 0 1
14138: PUSH
14139: LD_INT 4
14141: MOD
14142: PUSH
14143: LD_INT 1
14145: PLUS
14146: PPUSH
14147: CALL_OW 259
14151: PUSH
14152: LD_INT 10
14154: LESS
14155: IFFALSE 14218
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14157: LD_VAR 0 3
14161: PUSH
14162: LD_VAR 0 1
14166: ARRAY
14167: PPUSH
14168: LD_VAR 0 1
14172: PUSH
14173: LD_INT 4
14175: MOD
14176: PUSH
14177: LD_INT 1
14179: PLUS
14180: PPUSH
14181: LD_VAR 0 3
14185: PUSH
14186: LD_VAR 0 1
14190: ARRAY
14191: PPUSH
14192: LD_VAR 0 1
14196: PUSH
14197: LD_INT 4
14199: MOD
14200: PUSH
14201: LD_INT 1
14203: PLUS
14204: PPUSH
14205: CALL_OW 259
14209: PUSH
14210: LD_INT 1
14212: PLUS
14213: PPUSH
14214: CALL_OW 237
14218: GO 14120
14220: POP
14221: POP
// end ;
14222: PPOPN 3
14224: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14225: LD_EXP 25
14229: IFFALSE 14237
14231: PUSH
14232: LD_EXP 33
14236: AND
14237: IFFALSE 14257
14239: GO 14241
14241: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14242: LD_INT 4
14244: PPUSH
14245: LD_OWVAR 2
14249: PPUSH
14250: LD_INT 0
14252: PPUSH
14253: CALL_OW 324
14257: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14258: LD_EXP 25
14262: IFFALSE 14270
14264: PUSH
14265: LD_EXP 62
14269: AND
14270: IFFALSE 14290
14272: GO 14274
14274: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14275: LD_INT 19
14277: PPUSH
14278: LD_OWVAR 2
14282: PPUSH
14283: LD_INT 0
14285: PPUSH
14286: CALL_OW 324
14290: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14291: LD_EXP 25
14295: IFFALSE 14303
14297: PUSH
14298: LD_EXP 34
14302: AND
14303: IFFALSE 14405
14305: GO 14307
14307: DISABLE
14308: LD_INT 0
14310: PPUSH
14311: PPUSH
// begin enable ;
14312: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14313: LD_ADDR_VAR 0 2
14317: PUSH
14318: LD_INT 22
14320: PUSH
14321: LD_OWVAR 2
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 2
14332: PUSH
14333: LD_INT 34
14335: PUSH
14336: LD_INT 11
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 34
14345: PUSH
14346: LD_INT 30
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: CALL_OW 69
14366: ST_TO_ADDR
// if not tmp then
14367: LD_VAR 0 2
14371: NOT
14372: IFFALSE 14376
// exit ;
14374: GO 14405
// for i in tmp do
14376: LD_ADDR_VAR 0 1
14380: PUSH
14381: LD_VAR 0 2
14385: PUSH
14386: FOR_IN
14387: IFFALSE 14403
// begin SetLives ( i , 0 ) ;
14389: LD_VAR 0 1
14393: PPUSH
14394: LD_INT 0
14396: PPUSH
14397: CALL_OW 234
// end ;
14401: GO 14386
14403: POP
14404: POP
// end ;
14405: PPOPN 2
14407: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14408: LD_EXP 25
14412: IFFALSE 14420
14414: PUSH
14415: LD_EXP 35
14419: AND
14420: IFFALSE 14440
14422: GO 14424
14424: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14425: LD_INT 32
14427: PPUSH
14428: LD_OWVAR 2
14432: PPUSH
14433: LD_INT 0
14435: PPUSH
14436: CALL_OW 324
14440: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14441: LD_EXP 25
14445: IFFALSE 14453
14447: PUSH
14448: LD_EXP 36
14452: AND
14453: IFFALSE 14636
14455: GO 14457
14457: DISABLE
14458: LD_INT 0
14460: PPUSH
14461: PPUSH
14462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14463: LD_ADDR_VAR 0 2
14467: PUSH
14468: LD_INT 22
14470: PUSH
14471: LD_OWVAR 2
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: LD_INT 33
14482: PUSH
14483: LD_INT 3
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PPUSH
14494: CALL_OW 69
14498: ST_TO_ADDR
// if not tmp then
14499: LD_VAR 0 2
14503: NOT
14504: IFFALSE 14508
// exit ;
14506: GO 14636
// side := 0 ;
14508: LD_ADDR_VAR 0 3
14512: PUSH
14513: LD_INT 0
14515: ST_TO_ADDR
// for i := 1 to 8 do
14516: LD_ADDR_VAR 0 1
14520: PUSH
14521: DOUBLE
14522: LD_INT 1
14524: DEC
14525: ST_TO_ADDR
14526: LD_INT 8
14528: PUSH
14529: FOR_TO
14530: IFFALSE 14580
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14532: LD_OWVAR 2
14536: PUSH
14537: LD_VAR 0 1
14541: NONEQUAL
14542: IFFALSE 14564
14544: PUSH
14545: LD_OWVAR 2
14549: PPUSH
14550: LD_VAR 0 1
14554: PPUSH
14555: CALL_OW 81
14559: PUSH
14560: LD_INT 2
14562: EQUAL
14563: AND
14564: IFFALSE 14578
// begin side := i ;
14566: LD_ADDR_VAR 0 3
14570: PUSH
14571: LD_VAR 0 1
14575: ST_TO_ADDR
// break ;
14576: GO 14580
// end ;
14578: GO 14529
14580: POP
14581: POP
// if not side then
14582: LD_VAR 0 3
14586: NOT
14587: IFFALSE 14591
// exit ;
14589: GO 14636
// for i := 1 to tmp do
14591: LD_ADDR_VAR 0 1
14595: PUSH
14596: DOUBLE
14597: LD_INT 1
14599: DEC
14600: ST_TO_ADDR
14601: LD_VAR 0 2
14605: PUSH
14606: FOR_TO
14607: IFFALSE 14634
// if Prob ( 60 ) then
14609: LD_INT 60
14611: PPUSH
14612: CALL_OW 13
14616: IFFALSE 14632
// SetSide ( i , side ) ;
14618: LD_VAR 0 1
14622: PPUSH
14623: LD_VAR 0 3
14627: PPUSH
14628: CALL_OW 235
14632: GO 14606
14634: POP
14635: POP
// end ;
14636: PPOPN 3
14638: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14639: LD_EXP 25
14643: IFFALSE 14651
14645: PUSH
14646: LD_EXP 38
14650: AND
14651: IFFALSE 14770
14653: GO 14655
14655: DISABLE
14656: LD_INT 0
14658: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14659: LD_ADDR_VAR 0 1
14663: PUSH
14664: LD_INT 22
14666: PUSH
14667: LD_OWVAR 2
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PUSH
14676: LD_INT 21
14678: PUSH
14679: LD_INT 1
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 3
14688: PUSH
14689: LD_INT 23
14691: PUSH
14692: LD_INT 0
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: LIST
14707: PPUSH
14708: CALL_OW 69
14712: PUSH
14713: FOR_IN
14714: IFFALSE 14768
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14716: LD_VAR 0 1
14720: PPUSH
14721: CALL_OW 257
14725: PUSH
14726: LD_INT 1
14728: PUSH
14729: LD_INT 2
14731: PUSH
14732: LD_INT 3
14734: PUSH
14735: LD_INT 4
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: IN
14744: IFFALSE 14766
// SetClass ( un , rand ( 1 , 4 ) ) ;
14746: LD_VAR 0 1
14750: PPUSH
14751: LD_INT 1
14753: PPUSH
14754: LD_INT 4
14756: PPUSH
14757: CALL_OW 12
14761: PPUSH
14762: CALL_OW 336
14766: GO 14713
14768: POP
14769: POP
// end ;
14770: PPOPN 1
14772: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14773: LD_EXP 25
14777: IFFALSE 14785
14779: PUSH
14780: LD_EXP 37
14784: AND
14785: IFFALSE 14864
14787: GO 14789
14789: DISABLE
14790: LD_INT 0
14792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14793: LD_ADDR_VAR 0 1
14797: PUSH
14798: LD_INT 22
14800: PUSH
14801: LD_OWVAR 2
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 21
14812: PUSH
14813: LD_INT 3
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PPUSH
14824: CALL_OW 69
14828: ST_TO_ADDR
// if not tmp then
14829: LD_VAR 0 1
14833: NOT
14834: IFFALSE 14838
// exit ;
14836: GO 14864
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14838: LD_VAR 0 1
14842: PUSH
14843: LD_INT 1
14845: PPUSH
14846: LD_VAR 0 1
14850: PPUSH
14851: CALL_OW 12
14855: ARRAY
14856: PPUSH
14857: LD_INT 100
14859: PPUSH
14860: CALL_OW 234
// end ;
14864: PPOPN 1
14866: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14867: LD_EXP 25
14871: IFFALSE 14879
14873: PUSH
14874: LD_EXP 39
14878: AND
14879: IFFALSE 14977
14881: GO 14883
14883: DISABLE
14884: LD_INT 0
14886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14887: LD_ADDR_VAR 0 1
14891: PUSH
14892: LD_INT 22
14894: PUSH
14895: LD_OWVAR 2
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: LD_INT 21
14906: PUSH
14907: LD_INT 1
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: PPUSH
14918: CALL_OW 69
14922: ST_TO_ADDR
// if not tmp then
14923: LD_VAR 0 1
14927: NOT
14928: IFFALSE 14932
// exit ;
14930: GO 14977
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14932: LD_VAR 0 1
14936: PUSH
14937: LD_INT 1
14939: PPUSH
14940: LD_VAR 0 1
14944: PPUSH
14945: CALL_OW 12
14949: ARRAY
14950: PPUSH
14951: LD_INT 1
14953: PPUSH
14954: LD_INT 4
14956: PPUSH
14957: CALL_OW 12
14961: PPUSH
14962: LD_INT 3000
14964: PPUSH
14965: LD_INT 9000
14967: PPUSH
14968: CALL_OW 12
14972: PPUSH
14973: CALL_OW 492
// end ;
14977: PPOPN 1
14979: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14980: LD_EXP 25
14984: IFFALSE 14992
14986: PUSH
14987: LD_EXP 40
14991: AND
14992: IFFALSE 15012
14994: GO 14996
14996: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14997: LD_INT 1
14999: PPUSH
15000: LD_OWVAR 2
15004: PPUSH
15005: LD_INT 0
15007: PPUSH
15008: CALL_OW 324
15012: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15013: LD_EXP 25
15017: IFFALSE 15025
15019: PUSH
15020: LD_EXP 41
15024: AND
15025: IFFALSE 15108
15027: GO 15029
15029: DISABLE
15030: LD_INT 0
15032: PPUSH
15033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15034: LD_ADDR_VAR 0 2
15038: PUSH
15039: LD_INT 22
15041: PUSH
15042: LD_OWVAR 2
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 21
15053: PUSH
15054: LD_INT 3
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: PPUSH
15065: CALL_OW 69
15069: ST_TO_ADDR
// if not tmp then
15070: LD_VAR 0 2
15074: NOT
15075: IFFALSE 15079
// exit ;
15077: GO 15108
// for i in tmp do
15079: LD_ADDR_VAR 0 1
15083: PUSH
15084: LD_VAR 0 2
15088: PUSH
15089: FOR_IN
15090: IFFALSE 15106
// SetBLevel ( i , 10 ) ;
15092: LD_VAR 0 1
15096: PPUSH
15097: LD_INT 10
15099: PPUSH
15100: CALL_OW 241
15104: GO 15089
15106: POP
15107: POP
// end ;
15108: PPOPN 2
15110: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15111: LD_EXP 25
15115: IFFALSE 15123
15117: PUSH
15118: LD_EXP 42
15122: AND
15123: IFFALSE 15234
15125: GO 15127
15127: DISABLE
15128: LD_INT 0
15130: PPUSH
15131: PPUSH
15132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15133: LD_ADDR_VAR 0 3
15137: PUSH
15138: LD_INT 22
15140: PUSH
15141: LD_OWVAR 2
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PUSH
15150: LD_INT 25
15152: PUSH
15153: LD_INT 1
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PPUSH
15164: CALL_OW 69
15168: ST_TO_ADDR
// if not tmp then
15169: LD_VAR 0 3
15173: NOT
15174: IFFALSE 15178
// exit ;
15176: GO 15234
// un := tmp [ rand ( 1 , tmp ) ] ;
15178: LD_ADDR_VAR 0 2
15182: PUSH
15183: LD_VAR 0 3
15187: PUSH
15188: LD_INT 1
15190: PPUSH
15191: LD_VAR 0 3
15195: PPUSH
15196: CALL_OW 12
15200: ARRAY
15201: ST_TO_ADDR
// if Crawls ( un ) then
15202: LD_VAR 0 2
15206: PPUSH
15207: CALL_OW 318
15211: IFFALSE 15222
// ComWalk ( un ) ;
15213: LD_VAR 0 2
15217: PPUSH
15218: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15222: LD_VAR 0 2
15226: PPUSH
15227: LD_INT 5
15229: PPUSH
15230: CALL_OW 336
// end ;
15234: PPOPN 3
15236: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15237: LD_EXP 25
15241: IFFALSE 15249
15243: PUSH
15244: LD_EXP 43
15248: AND
15249: IFFALSE 15261
15251: PUSH
15252: LD_OWVAR 67
15256: PUSH
15257: LD_INT 4
15259: LESS
15260: AND
15261: IFFALSE 15280
15263: GO 15265
15265: DISABLE
// begin Difficulty := Difficulty + 1 ;
15266: LD_ADDR_OWVAR 67
15270: PUSH
15271: LD_OWVAR 67
15275: PUSH
15276: LD_INT 1
15278: PLUS
15279: ST_TO_ADDR
// end ;
15280: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15281: LD_EXP 25
15285: IFFALSE 15293
15287: PUSH
15288: LD_EXP 44
15292: AND
15293: IFFALSE 15396
15295: GO 15297
15297: DISABLE
15298: LD_INT 0
15300: PPUSH
// begin for i := 1 to 5 do
15301: LD_ADDR_VAR 0 1
15305: PUSH
15306: DOUBLE
15307: LD_INT 1
15309: DEC
15310: ST_TO_ADDR
15311: LD_INT 5
15313: PUSH
15314: FOR_TO
15315: IFFALSE 15394
// begin uc_nation := nation_nature ;
15317: LD_ADDR_OWVAR 21
15321: PUSH
15322: LD_INT 0
15324: ST_TO_ADDR
// uc_side := 0 ;
15325: LD_ADDR_OWVAR 20
15329: PUSH
15330: LD_INT 0
15332: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15333: LD_ADDR_OWVAR 29
15337: PUSH
15338: LD_INT 12
15340: PUSH
15341: LD_INT 12
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: ST_TO_ADDR
// hc_agressivity := 20 ;
15348: LD_ADDR_OWVAR 35
15352: PUSH
15353: LD_INT 20
15355: ST_TO_ADDR
// hc_class := class_tiger ;
15356: LD_ADDR_OWVAR 28
15360: PUSH
15361: LD_INT 14
15363: ST_TO_ADDR
// hc_gallery :=  ;
15364: LD_ADDR_OWVAR 33
15368: PUSH
15369: LD_STRING 
15371: ST_TO_ADDR
// hc_name :=  ;
15372: LD_ADDR_OWVAR 26
15376: PUSH
15377: LD_STRING 
15379: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15380: CALL_OW 44
15384: PPUSH
15385: LD_INT 0
15387: PPUSH
15388: CALL_OW 51
// end ;
15392: GO 15314
15394: POP
15395: POP
// end ;
15396: PPOPN 1
15398: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15399: LD_EXP 25
15403: IFFALSE 15411
15405: PUSH
15406: LD_EXP 45
15410: AND
15411: IFFALSE 15420
15413: GO 15415
15415: DISABLE
// StreamSibBomb ;
15416: CALL 15421 0 0
15420: END
// export function StreamSibBomb ; var i , x , y ; begin
15421: LD_INT 0
15423: PPUSH
15424: PPUSH
15425: PPUSH
15426: PPUSH
// result := false ;
15427: LD_ADDR_VAR 0 1
15431: PUSH
15432: LD_INT 0
15434: ST_TO_ADDR
// for i := 1 to 16 do
15435: LD_ADDR_VAR 0 2
15439: PUSH
15440: DOUBLE
15441: LD_INT 1
15443: DEC
15444: ST_TO_ADDR
15445: LD_INT 16
15447: PUSH
15448: FOR_TO
15449: IFFALSE 15648
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15451: LD_ADDR_VAR 0 3
15455: PUSH
15456: LD_INT 10
15458: PUSH
15459: LD_INT 20
15461: PUSH
15462: LD_INT 30
15464: PUSH
15465: LD_INT 40
15467: PUSH
15468: LD_INT 50
15470: PUSH
15471: LD_INT 60
15473: PUSH
15474: LD_INT 70
15476: PUSH
15477: LD_INT 80
15479: PUSH
15480: LD_INT 90
15482: PUSH
15483: LD_INT 100
15485: PUSH
15486: LD_INT 110
15488: PUSH
15489: LD_INT 120
15491: PUSH
15492: LD_INT 130
15494: PUSH
15495: LD_INT 140
15497: PUSH
15498: LD_INT 150
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 1
15520: PPUSH
15521: LD_INT 15
15523: PPUSH
15524: CALL_OW 12
15528: ARRAY
15529: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15530: LD_ADDR_VAR 0 4
15534: PUSH
15535: LD_INT 10
15537: PUSH
15538: LD_INT 20
15540: PUSH
15541: LD_INT 30
15543: PUSH
15544: LD_INT 40
15546: PUSH
15547: LD_INT 50
15549: PUSH
15550: LD_INT 60
15552: PUSH
15553: LD_INT 70
15555: PUSH
15556: LD_INT 80
15558: PUSH
15559: LD_INT 90
15561: PUSH
15562: LD_INT 100
15564: PUSH
15565: LD_INT 110
15567: PUSH
15568: LD_INT 120
15570: PUSH
15571: LD_INT 130
15573: PUSH
15574: LD_INT 140
15576: PUSH
15577: LD_INT 150
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 1
15599: PPUSH
15600: LD_INT 15
15602: PPUSH
15603: CALL_OW 12
15607: ARRAY
15608: ST_TO_ADDR
// if ValidHex ( x , y ) then
15609: LD_VAR 0 3
15613: PPUSH
15614: LD_VAR 0 4
15618: PPUSH
15619: CALL_OW 488
15623: IFFALSE 15646
// begin result := [ x , y ] ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_VAR 0 3
15634: PUSH
15635: LD_VAR 0 4
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: ST_TO_ADDR
// break ;
15644: GO 15648
// end ; end ;
15646: GO 15448
15648: POP
15649: POP
// if result then
15650: LD_VAR 0 1
15654: IFFALSE 15714
// begin ToLua ( playSibBomb() ) ;
15656: LD_STRING playSibBomb()
15658: PPUSH
15659: CALL_OW 559
// wait ( 0 0$14 ) ;
15663: LD_INT 490
15665: PPUSH
15666: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15670: LD_VAR 0 1
15674: PUSH
15675: LD_INT 1
15677: ARRAY
15678: PPUSH
15679: LD_VAR 0 1
15683: PUSH
15684: LD_INT 2
15686: ARRAY
15687: PPUSH
15688: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15692: LD_VAR 0 1
15696: PUSH
15697: LD_INT 1
15699: ARRAY
15700: PPUSH
15701: LD_VAR 0 1
15705: PUSH
15706: LD_INT 2
15708: ARRAY
15709: PPUSH
15710: CALL_OW 429
// end ; end ;
15714: LD_VAR 0 1
15718: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15719: LD_EXP 25
15723: IFFALSE 15731
15725: PUSH
15726: LD_EXP 47
15730: AND
15731: IFFALSE 15743
15733: GO 15735
15735: DISABLE
// YouLost (  ) ;
15736: LD_STRING 
15738: PPUSH
15739: CALL_OW 104
15743: END
// every 0 0$1 trigger StreamModeActive and sFog do
15744: LD_EXP 25
15748: IFFALSE 15756
15750: PUSH
15751: LD_EXP 46
15755: AND
15756: IFFALSE 15770
15758: GO 15760
15760: DISABLE
// FogOff ( your_side ) ;
15761: LD_OWVAR 2
15765: PPUSH
15766: CALL_OW 344
15770: END
// every 0 0$1 trigger StreamModeActive and sSun do
15771: LD_EXP 25
15775: IFFALSE 15783
15777: PUSH
15778: LD_EXP 48
15782: AND
15783: IFFALSE 15811
15785: GO 15787
15787: DISABLE
// begin solar_recharge_percent := 0 ;
15788: LD_ADDR_OWVAR 79
15792: PUSH
15793: LD_INT 0
15795: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15796: LD_INT 10500
15798: PPUSH
15799: CALL_OW 67
// solar_recharge_percent := 100 ;
15803: LD_ADDR_OWVAR 79
15807: PUSH
15808: LD_INT 100
15810: ST_TO_ADDR
// end ;
15811: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15812: LD_EXP 25
15816: IFFALSE 15824
15818: PUSH
15819: LD_EXP 49
15823: AND
15824: IFFALSE 16063
15826: GO 15828
15828: DISABLE
15829: LD_INT 0
15831: PPUSH
15832: PPUSH
15833: PPUSH
// begin tmp := [ ] ;
15834: LD_ADDR_VAR 0 3
15838: PUSH
15839: EMPTY
15840: ST_TO_ADDR
// for i := 1 to 6 do
15841: LD_ADDR_VAR 0 1
15845: PUSH
15846: DOUBLE
15847: LD_INT 1
15849: DEC
15850: ST_TO_ADDR
15851: LD_INT 6
15853: PUSH
15854: FOR_TO
15855: IFFALSE 15960
// begin uc_nation := nation_nature ;
15857: LD_ADDR_OWVAR 21
15861: PUSH
15862: LD_INT 0
15864: ST_TO_ADDR
// uc_side := 0 ;
15865: LD_ADDR_OWVAR 20
15869: PUSH
15870: LD_INT 0
15872: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15873: LD_ADDR_OWVAR 29
15877: PUSH
15878: LD_INT 12
15880: PUSH
15881: LD_INT 12
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: ST_TO_ADDR
// hc_agressivity := 20 ;
15888: LD_ADDR_OWVAR 35
15892: PUSH
15893: LD_INT 20
15895: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15896: LD_ADDR_OWVAR 28
15900: PUSH
15901: LD_INT 17
15903: ST_TO_ADDR
// hc_gallery :=  ;
15904: LD_ADDR_OWVAR 33
15908: PUSH
15909: LD_STRING 
15911: ST_TO_ADDR
// hc_name :=  ;
15912: LD_ADDR_OWVAR 26
15916: PUSH
15917: LD_STRING 
15919: ST_TO_ADDR
// un := CreateHuman ;
15920: LD_ADDR_VAR 0 2
15924: PUSH
15925: CALL_OW 44
15929: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15930: LD_VAR 0 2
15934: PPUSH
15935: LD_INT 1
15937: PPUSH
15938: CALL_OW 51
// tmp := tmp ^ un ;
15942: LD_ADDR_VAR 0 3
15946: PUSH
15947: LD_VAR 0 3
15951: PUSH
15952: LD_VAR 0 2
15956: ADD
15957: ST_TO_ADDR
// end ;
15958: GO 15854
15960: POP
15961: POP
// repeat wait ( 0 0$1 ) ;
15962: LD_INT 35
15964: PPUSH
15965: CALL_OW 67
// for un in tmp do
15969: LD_ADDR_VAR 0 2
15973: PUSH
15974: LD_VAR 0 3
15978: PUSH
15979: FOR_IN
15980: IFFALSE 16054
// begin if IsDead ( un ) then
15982: LD_VAR 0 2
15986: PPUSH
15987: CALL_OW 301
15991: IFFALSE 16011
// begin tmp := tmp diff un ;
15993: LD_ADDR_VAR 0 3
15997: PUSH
15998: LD_VAR 0 3
16002: PUSH
16003: LD_VAR 0 2
16007: DIFF
16008: ST_TO_ADDR
// continue ;
16009: GO 15979
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16011: LD_VAR 0 2
16015: PPUSH
16016: LD_INT 3
16018: PUSH
16019: LD_INT 22
16021: PUSH
16022: LD_INT 0
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: PPUSH
16033: CALL_OW 69
16037: PPUSH
16038: LD_VAR 0 2
16042: PPUSH
16043: CALL_OW 74
16047: PPUSH
16048: CALL_OW 115
// end ;
16052: GO 15979
16054: POP
16055: POP
// until not tmp ;
16056: LD_VAR 0 3
16060: NOT
16061: IFFALSE 15962
// end ;
16063: PPOPN 3
16065: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16066: LD_EXP 25
16070: IFFALSE 16078
16072: PUSH
16073: LD_EXP 50
16077: AND
16078: IFFALSE 16132
16080: GO 16082
16082: DISABLE
// begin ToLua ( displayTroll(); ) ;
16083: LD_STRING displayTroll();
16085: PPUSH
16086: CALL_OW 559
// wait ( 3 3$00 ) ;
16090: LD_INT 6300
16092: PPUSH
16093: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16097: LD_STRING hideTroll();
16099: PPUSH
16100: CALL_OW 559
// wait ( 1 1$00 ) ;
16104: LD_INT 2100
16106: PPUSH
16107: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16111: LD_STRING displayTroll();
16113: PPUSH
16114: CALL_OW 559
// wait ( 1 1$00 ) ;
16118: LD_INT 2100
16120: PPUSH
16121: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16125: LD_STRING hideTroll();
16127: PPUSH
16128: CALL_OW 559
// end ;
16132: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16133: LD_EXP 25
16137: IFFALSE 16145
16139: PUSH
16140: LD_EXP 51
16144: AND
16145: IFFALSE 16208
16147: GO 16149
16149: DISABLE
16150: LD_INT 0
16152: PPUSH
// begin p := 0 ;
16153: LD_ADDR_VAR 0 1
16157: PUSH
16158: LD_INT 0
16160: ST_TO_ADDR
// repeat game_speed := 1 ;
16161: LD_ADDR_OWVAR 65
16165: PUSH
16166: LD_INT 1
16168: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16169: LD_INT 35
16171: PPUSH
16172: CALL_OW 67
// p := p + 1 ;
16176: LD_ADDR_VAR 0 1
16180: PUSH
16181: LD_VAR 0 1
16185: PUSH
16186: LD_INT 1
16188: PLUS
16189: ST_TO_ADDR
// until p >= 60 ;
16190: LD_VAR 0 1
16194: PUSH
16195: LD_INT 60
16197: GREATEREQUAL
16198: IFFALSE 16161
// game_speed := 4 ;
16200: LD_ADDR_OWVAR 65
16204: PUSH
16205: LD_INT 4
16207: ST_TO_ADDR
// end ;
16208: PPOPN 1
16210: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16211: LD_EXP 25
16215: IFFALSE 16223
16217: PUSH
16218: LD_EXP 52
16222: AND
16223: IFFALSE 16369
16225: GO 16227
16227: DISABLE
16228: LD_INT 0
16230: PPUSH
16231: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16232: LD_ADDR_VAR 0 1
16236: PUSH
16237: LD_INT 22
16239: PUSH
16240: LD_OWVAR 2
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 2
16251: PUSH
16252: LD_INT 30
16254: PUSH
16255: LD_INT 0
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 30
16264: PUSH
16265: LD_INT 1
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: LIST
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PPUSH
16281: CALL_OW 69
16285: ST_TO_ADDR
// if not depot then
16286: LD_VAR 0 1
16290: NOT
16291: IFFALSE 16295
// exit ;
16293: GO 16369
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16295: LD_ADDR_VAR 0 2
16299: PUSH
16300: LD_VAR 0 1
16304: PUSH
16305: LD_INT 1
16307: PPUSH
16308: LD_VAR 0 1
16312: PPUSH
16313: CALL_OW 12
16317: ARRAY
16318: PPUSH
16319: CALL_OW 274
16323: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16324: LD_VAR 0 2
16328: PPUSH
16329: LD_INT 1
16331: PPUSH
16332: LD_INT 0
16334: PPUSH
16335: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16339: LD_VAR 0 2
16343: PPUSH
16344: LD_INT 2
16346: PPUSH
16347: LD_INT 0
16349: PPUSH
16350: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16354: LD_VAR 0 2
16358: PPUSH
16359: LD_INT 3
16361: PPUSH
16362: LD_INT 0
16364: PPUSH
16365: CALL_OW 277
// end ;
16369: PPOPN 2
16371: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16372: LD_EXP 25
16376: IFFALSE 16384
16378: PUSH
16379: LD_EXP 53
16383: AND
16384: IFFALSE 16481
16386: GO 16388
16388: DISABLE
16389: LD_INT 0
16391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16392: LD_ADDR_VAR 0 1
16396: PUSH
16397: LD_INT 22
16399: PUSH
16400: LD_OWVAR 2
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 21
16411: PUSH
16412: LD_INT 1
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 3
16421: PUSH
16422: LD_INT 23
16424: PUSH
16425: LD_INT 0
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: PPUSH
16441: CALL_OW 69
16445: ST_TO_ADDR
// if not tmp then
16446: LD_VAR 0 1
16450: NOT
16451: IFFALSE 16455
// exit ;
16453: GO 16481
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16455: LD_VAR 0 1
16459: PUSH
16460: LD_INT 1
16462: PPUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 12
16472: ARRAY
16473: PPUSH
16474: LD_INT 200
16476: PPUSH
16477: CALL_OW 234
// end ;
16481: PPOPN 1
16483: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16484: LD_EXP 25
16488: IFFALSE 16496
16490: PUSH
16491: LD_EXP 54
16495: AND
16496: IFFALSE 16575
16498: GO 16500
16500: DISABLE
16501: LD_INT 0
16503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16504: LD_ADDR_VAR 0 1
16508: PUSH
16509: LD_INT 22
16511: PUSH
16512: LD_OWVAR 2
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 21
16523: PUSH
16524: LD_INT 2
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PPUSH
16535: CALL_OW 69
16539: ST_TO_ADDR
// if not tmp then
16540: LD_VAR 0 1
16544: NOT
16545: IFFALSE 16549
// exit ;
16547: GO 16575
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16549: LD_VAR 0 1
16553: PUSH
16554: LD_INT 1
16556: PPUSH
16557: LD_VAR 0 1
16561: PPUSH
16562: CALL_OW 12
16566: ARRAY
16567: PPUSH
16568: LD_INT 60
16570: PPUSH
16571: CALL_OW 234
// end ;
16575: PPOPN 1
16577: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16578: LD_EXP 25
16582: IFFALSE 16590
16584: PUSH
16585: LD_EXP 55
16589: AND
16590: IFFALSE 16689
16592: GO 16594
16594: DISABLE
16595: LD_INT 0
16597: PPUSH
16598: PPUSH
// begin enable ;
16599: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16600: LD_ADDR_VAR 0 1
16604: PUSH
16605: LD_INT 22
16607: PUSH
16608: LD_OWVAR 2
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 61
16619: PUSH
16620: EMPTY
16621: LIST
16622: PUSH
16623: LD_INT 33
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: LIST
16637: PPUSH
16638: CALL_OW 69
16642: ST_TO_ADDR
// if not tmp then
16643: LD_VAR 0 1
16647: NOT
16648: IFFALSE 16652
// exit ;
16650: GO 16689
// for i in tmp do
16652: LD_ADDR_VAR 0 2
16656: PUSH
16657: LD_VAR 0 1
16661: PUSH
16662: FOR_IN
16663: IFFALSE 16687
// if IsControledBy ( i ) then
16665: LD_VAR 0 2
16669: PPUSH
16670: CALL_OW 312
16674: IFFALSE 16685
// ComUnlink ( i ) ;
16676: LD_VAR 0 2
16680: PPUSH
16681: CALL_OW 136
16685: GO 16662
16687: POP
16688: POP
// end ;
16689: PPOPN 2
16691: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16692: LD_EXP 25
16696: IFFALSE 16704
16698: PUSH
16699: LD_EXP 56
16703: AND
16704: IFFALSE 16844
16706: GO 16708
16708: DISABLE
16709: LD_INT 0
16711: PPUSH
16712: PPUSH
// begin ToLua ( displayPowell(); ) ;
16713: LD_STRING displayPowell();
16715: PPUSH
16716: CALL_OW 559
// uc_side := 0 ;
16720: LD_ADDR_OWVAR 20
16724: PUSH
16725: LD_INT 0
16727: ST_TO_ADDR
// uc_nation := 2 ;
16728: LD_ADDR_OWVAR 21
16732: PUSH
16733: LD_INT 2
16735: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16736: LD_ADDR_OWVAR 37
16740: PUSH
16741: LD_INT 14
16743: ST_TO_ADDR
// vc_engine := engine_siberite ;
16744: LD_ADDR_OWVAR 39
16748: PUSH
16749: LD_INT 3
16751: ST_TO_ADDR
// vc_control := control_apeman ;
16752: LD_ADDR_OWVAR 38
16756: PUSH
16757: LD_INT 5
16759: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16760: LD_ADDR_OWVAR 40
16764: PUSH
16765: LD_INT 29
16767: ST_TO_ADDR
// un := CreateVehicle ;
16768: LD_ADDR_VAR 0 2
16772: PUSH
16773: CALL_OW 45
16777: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16778: LD_VAR 0 2
16782: PPUSH
16783: LD_INT 1
16785: PPUSH
16786: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16790: LD_INT 35
16792: PPUSH
16793: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16797: LD_VAR 0 2
16801: PPUSH
16802: LD_INT 22
16804: PUSH
16805: LD_OWVAR 2
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PPUSH
16814: CALL_OW 69
16818: PPUSH
16819: LD_VAR 0 2
16823: PPUSH
16824: CALL_OW 74
16828: PPUSH
16829: CALL_OW 115
// until IsDead ( un ) ;
16833: LD_VAR 0 2
16837: PPUSH
16838: CALL_OW 301
16842: IFFALSE 16790
// end ;
16844: PPOPN 2
16846: END
// every 0 0$1 trigger StreamModeActive and sStu do
16847: LD_EXP 25
16851: IFFALSE 16859
16853: PUSH
16854: LD_EXP 64
16858: AND
16859: IFFALSE 16875
16861: GO 16863
16863: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16864: LD_STRING displayStucuk();
16866: PPUSH
16867: CALL_OW 559
// ResetFog ;
16871: CALL_OW 335
// end ;
16875: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16876: LD_EXP 25
16880: IFFALSE 16888
16882: PUSH
16883: LD_EXP 57
16887: AND
16888: IFFALSE 17029
16890: GO 16892
16892: DISABLE
16893: LD_INT 0
16895: PPUSH
16896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16897: LD_ADDR_VAR 0 2
16901: PUSH
16902: LD_INT 22
16904: PUSH
16905: LD_OWVAR 2
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 21
16916: PUSH
16917: LD_INT 1
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PPUSH
16928: CALL_OW 69
16932: ST_TO_ADDR
// if not tmp then
16933: LD_VAR 0 2
16937: NOT
16938: IFFALSE 16942
// exit ;
16940: GO 17029
// un := tmp [ rand ( 1 , tmp ) ] ;
16942: LD_ADDR_VAR 0 1
16946: PUSH
16947: LD_VAR 0 2
16951: PUSH
16952: LD_INT 1
16954: PPUSH
16955: LD_VAR 0 2
16959: PPUSH
16960: CALL_OW 12
16964: ARRAY
16965: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16966: LD_VAR 0 1
16970: PPUSH
16971: LD_INT 0
16973: PPUSH
16974: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16978: LD_VAR 0 1
16982: PPUSH
16983: LD_OWVAR 3
16987: PUSH
16988: LD_VAR 0 1
16992: DIFF
16993: PPUSH
16994: LD_VAR 0 1
16998: PPUSH
16999: CALL_OW 74
17003: PPUSH
17004: CALL_OW 115
// wait ( 0 0$20 ) ;
17008: LD_INT 700
17010: PPUSH
17011: CALL_OW 67
// SetSide ( un , your_side ) ;
17015: LD_VAR 0 1
17019: PPUSH
17020: LD_OWVAR 2
17024: PPUSH
17025: CALL_OW 235
// end ;
17029: PPOPN 2
17031: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17032: LD_EXP 25
17036: IFFALSE 17044
17038: PUSH
17039: LD_EXP 58
17043: AND
17044: IFFALSE 17150
17046: GO 17048
17048: DISABLE
17049: LD_INT 0
17051: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17052: LD_ADDR_VAR 0 1
17056: PUSH
17057: LD_INT 22
17059: PUSH
17060: LD_OWVAR 2
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 2
17071: PUSH
17072: LD_INT 30
17074: PUSH
17075: LD_INT 0
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: LD_INT 30
17084: PUSH
17085: LD_INT 1
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: LIST
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PPUSH
17101: CALL_OW 69
17105: ST_TO_ADDR
// if not depot then
17106: LD_VAR 0 1
17110: NOT
17111: IFFALSE 17115
// exit ;
17113: GO 17150
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17115: LD_VAR 0 1
17119: PUSH
17120: LD_INT 1
17122: ARRAY
17123: PPUSH
17124: CALL_OW 250
17128: PPUSH
17129: LD_VAR 0 1
17133: PUSH
17134: LD_INT 1
17136: ARRAY
17137: PPUSH
17138: CALL_OW 251
17142: PPUSH
17143: LD_INT 70
17145: PPUSH
17146: CALL_OW 495
// end ;
17150: PPOPN 1
17152: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17153: LD_EXP 25
17157: IFFALSE 17165
17159: PUSH
17160: LD_EXP 59
17164: AND
17165: IFFALSE 17376
17167: GO 17169
17169: DISABLE
17170: LD_INT 0
17172: PPUSH
17173: PPUSH
17174: PPUSH
17175: PPUSH
17176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17177: LD_ADDR_VAR 0 5
17181: PUSH
17182: LD_INT 22
17184: PUSH
17185: LD_OWVAR 2
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 21
17196: PUSH
17197: LD_INT 1
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PPUSH
17208: CALL_OW 69
17212: ST_TO_ADDR
// if not tmp then
17213: LD_VAR 0 5
17217: NOT
17218: IFFALSE 17222
// exit ;
17220: GO 17376
// for i in tmp do
17222: LD_ADDR_VAR 0 1
17226: PUSH
17227: LD_VAR 0 5
17231: PUSH
17232: FOR_IN
17233: IFFALSE 17374
// begin d := rand ( 0 , 5 ) ;
17235: LD_ADDR_VAR 0 4
17239: PUSH
17240: LD_INT 0
17242: PPUSH
17243: LD_INT 5
17245: PPUSH
17246: CALL_OW 12
17250: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17251: LD_ADDR_VAR 0 2
17255: PUSH
17256: LD_VAR 0 1
17260: PPUSH
17261: CALL_OW 250
17265: PPUSH
17266: LD_VAR 0 4
17270: PPUSH
17271: LD_INT 3
17273: PPUSH
17274: LD_INT 12
17276: PPUSH
17277: CALL_OW 12
17281: PPUSH
17282: CALL_OW 272
17286: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17287: LD_ADDR_VAR 0 3
17291: PUSH
17292: LD_VAR 0 1
17296: PPUSH
17297: CALL_OW 251
17301: PPUSH
17302: LD_VAR 0 4
17306: PPUSH
17307: LD_INT 3
17309: PPUSH
17310: LD_INT 12
17312: PPUSH
17313: CALL_OW 12
17317: PPUSH
17318: CALL_OW 273
17322: ST_TO_ADDR
// if ValidHex ( x , y ) then
17323: LD_VAR 0 2
17327: PPUSH
17328: LD_VAR 0 3
17332: PPUSH
17333: CALL_OW 488
17337: IFFALSE 17372
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17339: LD_VAR 0 1
17343: PPUSH
17344: LD_VAR 0 2
17348: PPUSH
17349: LD_VAR 0 3
17353: PPUSH
17354: LD_INT 3
17356: PPUSH
17357: LD_INT 6
17359: PPUSH
17360: CALL_OW 12
17364: PPUSH
17365: LD_INT 1
17367: PPUSH
17368: CALL_OW 483
// end ;
17372: GO 17232
17374: POP
17375: POP
// end ;
17376: PPOPN 5
17378: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17379: LD_EXP 25
17383: IFFALSE 17391
17385: PUSH
17386: LD_EXP 60
17390: AND
17391: IFFALSE 17485
17393: GO 17395
17395: DISABLE
17396: LD_INT 0
17398: PPUSH
17399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17400: LD_ADDR_VAR 0 2
17404: PUSH
17405: LD_INT 22
17407: PUSH
17408: LD_OWVAR 2
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 32
17419: PUSH
17420: LD_INT 1
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 21
17429: PUSH
17430: LD_INT 2
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: LIST
17441: PPUSH
17442: CALL_OW 69
17446: ST_TO_ADDR
// if not tmp then
17447: LD_VAR 0 2
17451: NOT
17452: IFFALSE 17456
// exit ;
17454: GO 17485
// for i in tmp do
17456: LD_ADDR_VAR 0 1
17460: PUSH
17461: LD_VAR 0 2
17465: PUSH
17466: FOR_IN
17467: IFFALSE 17483
// SetFuel ( i , 0 ) ;
17469: LD_VAR 0 1
17473: PPUSH
17474: LD_INT 0
17476: PPUSH
17477: CALL_OW 240
17481: GO 17466
17483: POP
17484: POP
// end ;
17485: PPOPN 2
17487: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17488: LD_EXP 25
17492: IFFALSE 17500
17494: PUSH
17495: LD_EXP 61
17499: AND
17500: IFFALSE 17566
17502: GO 17504
17504: DISABLE
17505: LD_INT 0
17507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17508: LD_ADDR_VAR 0 1
17512: PUSH
17513: LD_INT 22
17515: PUSH
17516: LD_OWVAR 2
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 30
17527: PUSH
17528: LD_INT 29
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PPUSH
17539: CALL_OW 69
17543: ST_TO_ADDR
// if not tmp then
17544: LD_VAR 0 1
17548: NOT
17549: IFFALSE 17553
// exit ;
17551: GO 17566
// DestroyUnit ( tmp [ 1 ] ) ;
17553: LD_VAR 0 1
17557: PUSH
17558: LD_INT 1
17560: ARRAY
17561: PPUSH
17562: CALL_OW 65
// end ;
17566: PPOPN 1
17568: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17569: LD_EXP 25
17573: IFFALSE 17581
17575: PUSH
17576: LD_EXP 63
17580: AND
17581: IFFALSE 17710
17583: GO 17585
17585: DISABLE
17586: LD_INT 0
17588: PPUSH
// begin uc_side := 0 ;
17589: LD_ADDR_OWVAR 20
17593: PUSH
17594: LD_INT 0
17596: ST_TO_ADDR
// uc_nation := nation_arabian ;
17597: LD_ADDR_OWVAR 21
17601: PUSH
17602: LD_INT 2
17604: ST_TO_ADDR
// hc_gallery :=  ;
17605: LD_ADDR_OWVAR 33
17609: PUSH
17610: LD_STRING 
17612: ST_TO_ADDR
// hc_name :=  ;
17613: LD_ADDR_OWVAR 26
17617: PUSH
17618: LD_STRING 
17620: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17621: LD_INT 1
17623: PPUSH
17624: LD_INT 11
17626: PPUSH
17627: LD_INT 10
17629: PPUSH
17630: CALL_OW 380
// un := CreateHuman ;
17634: LD_ADDR_VAR 0 1
17638: PUSH
17639: CALL_OW 44
17643: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17644: LD_VAR 0 1
17648: PPUSH
17649: LD_INT 1
17651: PPUSH
17652: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17656: LD_INT 35
17658: PPUSH
17659: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17663: LD_VAR 0 1
17667: PPUSH
17668: LD_INT 22
17670: PUSH
17671: LD_OWVAR 2
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PPUSH
17680: CALL_OW 69
17684: PPUSH
17685: LD_VAR 0 1
17689: PPUSH
17690: CALL_OW 74
17694: PPUSH
17695: CALL_OW 115
// until IsDead ( un ) ;
17699: LD_VAR 0 1
17703: PPUSH
17704: CALL_OW 301
17708: IFFALSE 17656
// end ;
17710: PPOPN 1
17712: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17713: LD_EXP 25
17717: IFFALSE 17725
17719: PUSH
17720: LD_EXP 65
17724: AND
17725: IFFALSE 17737
17727: GO 17729
17729: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17730: LD_STRING earthquake(getX(game), 0, 32)
17732: PPUSH
17733: CALL_OW 559
17737: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17738: LD_EXP 25
17742: IFFALSE 17750
17744: PUSH
17745: LD_EXP 66
17749: AND
17750: IFFALSE 17841
17752: GO 17754
17754: DISABLE
17755: LD_INT 0
17757: PPUSH
// begin enable ;
17758: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17759: LD_ADDR_VAR 0 1
17763: PUSH
17764: LD_INT 22
17766: PUSH
17767: LD_OWVAR 2
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 21
17778: PUSH
17779: LD_INT 2
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 33
17788: PUSH
17789: LD_INT 3
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: LIST
17800: PPUSH
17801: CALL_OW 69
17805: ST_TO_ADDR
// if not tmp then
17806: LD_VAR 0 1
17810: NOT
17811: IFFALSE 17815
// exit ;
17813: GO 17841
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17815: LD_VAR 0 1
17819: PUSH
17820: LD_INT 1
17822: PPUSH
17823: LD_VAR 0 1
17827: PPUSH
17828: CALL_OW 12
17832: ARRAY
17833: PPUSH
17834: LD_INT 1
17836: PPUSH
17837: CALL_OW 234
// end ;
17841: PPOPN 1
17843: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17844: LD_EXP 25
17848: IFFALSE 17856
17850: PUSH
17851: LD_EXP 67
17855: AND
17856: IFFALSE 17997
17858: GO 17860
17860: DISABLE
17861: LD_INT 0
17863: PPUSH
17864: PPUSH
17865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17866: LD_ADDR_VAR 0 3
17870: PUSH
17871: LD_INT 22
17873: PUSH
17874: LD_OWVAR 2
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 25
17885: PUSH
17886: LD_INT 1
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PPUSH
17897: CALL_OW 69
17901: ST_TO_ADDR
// if not tmp then
17902: LD_VAR 0 3
17906: NOT
17907: IFFALSE 17911
// exit ;
17909: GO 17997
// un := tmp [ rand ( 1 , tmp ) ] ;
17911: LD_ADDR_VAR 0 2
17915: PUSH
17916: LD_VAR 0 3
17920: PUSH
17921: LD_INT 1
17923: PPUSH
17924: LD_VAR 0 3
17928: PPUSH
17929: CALL_OW 12
17933: ARRAY
17934: ST_TO_ADDR
// if Crawls ( un ) then
17935: LD_VAR 0 2
17939: PPUSH
17940: CALL_OW 318
17944: IFFALSE 17955
// ComWalk ( un ) ;
17946: LD_VAR 0 2
17950: PPUSH
17951: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17955: LD_VAR 0 2
17959: PPUSH
17960: LD_INT 9
17962: PPUSH
17963: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17967: LD_INT 28
17969: PPUSH
17970: LD_OWVAR 2
17974: PPUSH
17975: LD_INT 2
17977: PPUSH
17978: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17982: LD_INT 29
17984: PPUSH
17985: LD_OWVAR 2
17989: PPUSH
17990: LD_INT 2
17992: PPUSH
17993: CALL_OW 322
// end ;
17997: PPOPN 3
17999: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18000: LD_EXP 25
18004: IFFALSE 18012
18006: PUSH
18007: LD_EXP 68
18011: AND
18012: IFFALSE 18123
18014: GO 18016
18016: DISABLE
18017: LD_INT 0
18019: PPUSH
18020: PPUSH
18021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18022: LD_ADDR_VAR 0 3
18026: PUSH
18027: LD_INT 22
18029: PUSH
18030: LD_OWVAR 2
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 25
18041: PUSH
18042: LD_INT 1
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PPUSH
18053: CALL_OW 69
18057: ST_TO_ADDR
// if not tmp then
18058: LD_VAR 0 3
18062: NOT
18063: IFFALSE 18067
// exit ;
18065: GO 18123
// un := tmp [ rand ( 1 , tmp ) ] ;
18067: LD_ADDR_VAR 0 2
18071: PUSH
18072: LD_VAR 0 3
18076: PUSH
18077: LD_INT 1
18079: PPUSH
18080: LD_VAR 0 3
18084: PPUSH
18085: CALL_OW 12
18089: ARRAY
18090: ST_TO_ADDR
// if Crawls ( un ) then
18091: LD_VAR 0 2
18095: PPUSH
18096: CALL_OW 318
18100: IFFALSE 18111
// ComWalk ( un ) ;
18102: LD_VAR 0 2
18106: PPUSH
18107: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18111: LD_VAR 0 2
18115: PPUSH
18116: LD_INT 8
18118: PPUSH
18119: CALL_OW 336
// end ;
18123: PPOPN 3
18125: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18126: LD_EXP 25
18130: IFFALSE 18138
18132: PUSH
18133: LD_EXP 69
18137: AND
18138: IFFALSE 18282
18140: GO 18142
18142: DISABLE
18143: LD_INT 0
18145: PPUSH
18146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18147: LD_ADDR_VAR 0 2
18151: PUSH
18152: LD_INT 22
18154: PUSH
18155: LD_OWVAR 2
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 21
18166: PUSH
18167: LD_INT 2
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 2
18176: PUSH
18177: LD_INT 34
18179: PUSH
18180: LD_INT 12
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 34
18189: PUSH
18190: LD_INT 51
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 34
18199: PUSH
18200: LD_INT 32
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: LIST
18217: PPUSH
18218: CALL_OW 69
18222: ST_TO_ADDR
// if not tmp then
18223: LD_VAR 0 2
18227: NOT
18228: IFFALSE 18232
// exit ;
18230: GO 18282
// for i in tmp do
18232: LD_ADDR_VAR 0 1
18236: PUSH
18237: LD_VAR 0 2
18241: PUSH
18242: FOR_IN
18243: IFFALSE 18280
// if GetCargo ( i , mat_artifact ) = 0 then
18245: LD_VAR 0 1
18249: PPUSH
18250: LD_INT 4
18252: PPUSH
18253: CALL_OW 289
18257: PUSH
18258: LD_INT 0
18260: EQUAL
18261: IFFALSE 18278
// SetCargo ( i , mat_siberit , 100 ) ;
18263: LD_VAR 0 1
18267: PPUSH
18268: LD_INT 3
18270: PPUSH
18271: LD_INT 100
18273: PPUSH
18274: CALL_OW 290
18278: GO 18242
18280: POP
18281: POP
// end ;
18282: PPOPN 2
18284: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18285: LD_EXP 25
18289: IFFALSE 18297
18291: PUSH
18292: LD_EXP 70
18296: AND
18297: IFFALSE 18480
18299: GO 18301
18301: DISABLE
18302: LD_INT 0
18304: PPUSH
18305: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18306: LD_ADDR_VAR 0 2
18310: PUSH
18311: LD_INT 22
18313: PUSH
18314: LD_OWVAR 2
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PPUSH
18323: CALL_OW 69
18327: ST_TO_ADDR
// if not tmp then
18328: LD_VAR 0 2
18332: NOT
18333: IFFALSE 18337
// exit ;
18335: GO 18480
// for i := 1 to 2 do
18337: LD_ADDR_VAR 0 1
18341: PUSH
18342: DOUBLE
18343: LD_INT 1
18345: DEC
18346: ST_TO_ADDR
18347: LD_INT 2
18349: PUSH
18350: FOR_TO
18351: IFFALSE 18478
// begin uc_side := your_side ;
18353: LD_ADDR_OWVAR 20
18357: PUSH
18358: LD_OWVAR 2
18362: ST_TO_ADDR
// uc_nation := nation_american ;
18363: LD_ADDR_OWVAR 21
18367: PUSH
18368: LD_INT 1
18370: ST_TO_ADDR
// vc_chassis := us_morphling ;
18371: LD_ADDR_OWVAR 37
18375: PUSH
18376: LD_INT 5
18378: ST_TO_ADDR
// vc_engine := engine_siberite ;
18379: LD_ADDR_OWVAR 39
18383: PUSH
18384: LD_INT 3
18386: ST_TO_ADDR
// vc_control := control_computer ;
18387: LD_ADDR_OWVAR 38
18391: PUSH
18392: LD_INT 3
18394: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18395: LD_ADDR_OWVAR 40
18399: PUSH
18400: LD_INT 10
18402: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18403: LD_VAR 0 2
18407: PUSH
18408: LD_INT 1
18410: ARRAY
18411: PPUSH
18412: CALL_OW 310
18416: NOT
18417: IFFALSE 18464
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18419: CALL_OW 45
18423: PPUSH
18424: LD_VAR 0 2
18428: PUSH
18429: LD_INT 1
18431: ARRAY
18432: PPUSH
18433: CALL_OW 250
18437: PPUSH
18438: LD_VAR 0 2
18442: PUSH
18443: LD_INT 1
18445: ARRAY
18446: PPUSH
18447: CALL_OW 251
18451: PPUSH
18452: LD_INT 12
18454: PPUSH
18455: LD_INT 1
18457: PPUSH
18458: CALL_OW 50
18462: GO 18476
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18464: CALL_OW 45
18468: PPUSH
18469: LD_INT 1
18471: PPUSH
18472: CALL_OW 51
// end ;
18476: GO 18350
18478: POP
18479: POP
// end ;
18480: PPOPN 2
18482: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18483: LD_EXP 25
18487: IFFALSE 18495
18489: PUSH
18490: LD_EXP 71
18494: AND
18495: IFFALSE 18717
18497: GO 18499
18499: DISABLE
18500: LD_INT 0
18502: PPUSH
18503: PPUSH
18504: PPUSH
18505: PPUSH
18506: PPUSH
18507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18508: LD_ADDR_VAR 0 6
18512: PUSH
18513: LD_INT 22
18515: PUSH
18516: LD_OWVAR 2
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 21
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 3
18537: PUSH
18538: LD_INT 23
18540: PUSH
18541: LD_INT 0
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: LIST
18556: PPUSH
18557: CALL_OW 69
18561: ST_TO_ADDR
// if not tmp then
18562: LD_VAR 0 6
18566: NOT
18567: IFFALSE 18571
// exit ;
18569: GO 18717
// s1 := rand ( 1 , 4 ) ;
18571: LD_ADDR_VAR 0 2
18575: PUSH
18576: LD_INT 1
18578: PPUSH
18579: LD_INT 4
18581: PPUSH
18582: CALL_OW 12
18586: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18587: LD_ADDR_VAR 0 4
18591: PUSH
18592: LD_VAR 0 6
18596: PUSH
18597: LD_INT 1
18599: ARRAY
18600: PPUSH
18601: LD_VAR 0 2
18605: PPUSH
18606: CALL_OW 259
18610: ST_TO_ADDR
// if s1 = 1 then
18611: LD_VAR 0 2
18615: PUSH
18616: LD_INT 1
18618: EQUAL
18619: IFFALSE 18639
// s2 := rand ( 2 , 4 ) else
18621: LD_ADDR_VAR 0 3
18625: PUSH
18626: LD_INT 2
18628: PPUSH
18629: LD_INT 4
18631: PPUSH
18632: CALL_OW 12
18636: ST_TO_ADDR
18637: GO 18647
// s2 := 1 ;
18639: LD_ADDR_VAR 0 3
18643: PUSH
18644: LD_INT 1
18646: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18647: LD_ADDR_VAR 0 5
18651: PUSH
18652: LD_VAR 0 6
18656: PUSH
18657: LD_INT 1
18659: ARRAY
18660: PPUSH
18661: LD_VAR 0 3
18665: PPUSH
18666: CALL_OW 259
18670: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18671: LD_VAR 0 6
18675: PUSH
18676: LD_INT 1
18678: ARRAY
18679: PPUSH
18680: LD_VAR 0 2
18684: PPUSH
18685: LD_VAR 0 5
18689: PPUSH
18690: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18694: LD_VAR 0 6
18698: PUSH
18699: LD_INT 1
18701: ARRAY
18702: PPUSH
18703: LD_VAR 0 3
18707: PPUSH
18708: LD_VAR 0 4
18712: PPUSH
18713: CALL_OW 237
// end ;
18717: PPOPN 6
18719: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18720: LD_EXP 25
18724: IFFALSE 18732
18726: PUSH
18727: LD_EXP 72
18731: AND
18732: IFFALSE 18811
18734: GO 18736
18736: DISABLE
18737: LD_INT 0
18739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18740: LD_ADDR_VAR 0 1
18744: PUSH
18745: LD_INT 22
18747: PUSH
18748: LD_OWVAR 2
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 30
18759: PUSH
18760: LD_INT 3
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PPUSH
18771: CALL_OW 69
18775: ST_TO_ADDR
// if not tmp then
18776: LD_VAR 0 1
18780: NOT
18781: IFFALSE 18785
// exit ;
18783: GO 18811
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18785: LD_VAR 0 1
18789: PUSH
18790: LD_INT 1
18792: PPUSH
18793: LD_VAR 0 1
18797: PPUSH
18798: CALL_OW 12
18802: ARRAY
18803: PPUSH
18804: LD_INT 1
18806: PPUSH
18807: CALL_OW 234
// end ;
18811: PPOPN 1
18813: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18814: LD_EXP 25
18818: IFFALSE 18826
18820: PUSH
18821: LD_EXP 73
18825: AND
18826: IFFALSE 18938
18828: GO 18830
18830: DISABLE
18831: LD_INT 0
18833: PPUSH
18834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18835: LD_ADDR_VAR 0 2
18839: PUSH
18840: LD_INT 22
18842: PUSH
18843: LD_OWVAR 2
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 2
18854: PUSH
18855: LD_INT 30
18857: PUSH
18858: LD_INT 27
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 30
18867: PUSH
18868: LD_INT 26
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 30
18877: PUSH
18878: LD_INT 28
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PPUSH
18895: CALL_OW 69
18899: ST_TO_ADDR
// if not tmp then
18900: LD_VAR 0 2
18904: NOT
18905: IFFALSE 18909
// exit ;
18907: GO 18938
// for i in tmp do
18909: LD_ADDR_VAR 0 1
18913: PUSH
18914: LD_VAR 0 2
18918: PUSH
18919: FOR_IN
18920: IFFALSE 18936
// SetLives ( i , 1 ) ;
18922: LD_VAR 0 1
18926: PPUSH
18927: LD_INT 1
18929: PPUSH
18930: CALL_OW 234
18934: GO 18919
18936: POP
18937: POP
// end ;
18938: PPOPN 2
18940: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18941: LD_EXP 25
18945: IFFALSE 18953
18947: PUSH
18948: LD_EXP 74
18952: AND
18953: IFFALSE 19240
18955: GO 18957
18957: DISABLE
18958: LD_INT 0
18960: PPUSH
18961: PPUSH
18962: PPUSH
// begin i := rand ( 1 , 7 ) ;
18963: LD_ADDR_VAR 0 1
18967: PUSH
18968: LD_INT 1
18970: PPUSH
18971: LD_INT 7
18973: PPUSH
18974: CALL_OW 12
18978: ST_TO_ADDR
// case i of 1 :
18979: LD_VAR 0 1
18983: PUSH
18984: LD_INT 1
18986: DOUBLE
18987: EQUAL
18988: IFTRUE 18992
18990: GO 19002
18992: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18993: LD_STRING earthquake(getX(game), 0, 32)
18995: PPUSH
18996: CALL_OW 559
19000: GO 19240
19002: LD_INT 2
19004: DOUBLE
19005: EQUAL
19006: IFTRUE 19010
19008: GO 19024
19010: POP
// begin ToLua ( displayStucuk(); ) ;
19011: LD_STRING displayStucuk();
19013: PPUSH
19014: CALL_OW 559
// ResetFog ;
19018: CALL_OW 335
// end ; 3 :
19022: GO 19240
19024: LD_INT 3
19026: DOUBLE
19027: EQUAL
19028: IFTRUE 19032
19030: GO 19136
19032: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19033: LD_ADDR_VAR 0 2
19037: PUSH
19038: LD_INT 22
19040: PUSH
19041: LD_OWVAR 2
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 25
19052: PUSH
19053: LD_INT 1
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PPUSH
19064: CALL_OW 69
19068: ST_TO_ADDR
// if not tmp then
19069: LD_VAR 0 2
19073: NOT
19074: IFFALSE 19078
// exit ;
19076: GO 19240
// un := tmp [ rand ( 1 , tmp ) ] ;
19078: LD_ADDR_VAR 0 3
19082: PUSH
19083: LD_VAR 0 2
19087: PUSH
19088: LD_INT 1
19090: PPUSH
19091: LD_VAR 0 2
19095: PPUSH
19096: CALL_OW 12
19100: ARRAY
19101: ST_TO_ADDR
// if Crawls ( un ) then
19102: LD_VAR 0 3
19106: PPUSH
19107: CALL_OW 318
19111: IFFALSE 19122
// ComWalk ( un ) ;
19113: LD_VAR 0 3
19117: PPUSH
19118: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19122: LD_VAR 0 3
19126: PPUSH
19127: LD_INT 8
19129: PPUSH
19130: CALL_OW 336
// end ; 4 :
19134: GO 19240
19136: LD_INT 4
19138: DOUBLE
19139: EQUAL
19140: IFTRUE 19144
19142: GO 19218
19144: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19145: LD_ADDR_VAR 0 2
19149: PUSH
19150: LD_INT 22
19152: PUSH
19153: LD_OWVAR 2
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 30
19164: PUSH
19165: LD_INT 29
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PPUSH
19176: CALL_OW 69
19180: ST_TO_ADDR
// if not tmp then
19181: LD_VAR 0 2
19185: NOT
19186: IFFALSE 19190
// exit ;
19188: GO 19240
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19190: LD_VAR 0 2
19194: PUSH
19195: LD_INT 1
19197: ARRAY
19198: PPUSH
19199: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19203: LD_VAR 0 2
19207: PUSH
19208: LD_INT 1
19210: ARRAY
19211: PPUSH
19212: CALL_OW 65
// end ; 5 .. 7 :
19216: GO 19240
19218: LD_INT 5
19220: DOUBLE
19221: GREATEREQUAL
19222: IFFALSE 19230
19224: LD_INT 7
19226: DOUBLE
19227: LESSEQUAL
19228: IFTRUE 19232
19230: GO 19239
19232: POP
// StreamSibBomb ; end ;
19233: CALL 15421 0 0
19237: GO 19240
19239: POP
// end ;
19240: PPOPN 3
19242: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19243: LD_EXP 25
19247: IFFALSE 19255
19249: PUSH
19250: LD_EXP 75
19254: AND
19255: IFFALSE 19411
19257: GO 19259
19259: DISABLE
19260: LD_INT 0
19262: PPUSH
19263: PPUSH
19264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19265: LD_ADDR_VAR 0 2
19269: PUSH
19270: LD_INT 81
19272: PUSH
19273: LD_OWVAR 2
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 2
19284: PUSH
19285: LD_INT 21
19287: PUSH
19288: LD_INT 1
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 21
19297: PUSH
19298: LD_INT 2
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: LIST
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PPUSH
19314: CALL_OW 69
19318: ST_TO_ADDR
// if not tmp then
19319: LD_VAR 0 2
19323: NOT
19324: IFFALSE 19328
// exit ;
19326: GO 19411
// p := 0 ;
19328: LD_ADDR_VAR 0 3
19332: PUSH
19333: LD_INT 0
19335: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19336: LD_INT 35
19338: PPUSH
19339: CALL_OW 67
// p := p + 1 ;
19343: LD_ADDR_VAR 0 3
19347: PUSH
19348: LD_VAR 0 3
19352: PUSH
19353: LD_INT 1
19355: PLUS
19356: ST_TO_ADDR
// for i in tmp do
19357: LD_ADDR_VAR 0 1
19361: PUSH
19362: LD_VAR 0 2
19366: PUSH
19367: FOR_IN
19368: IFFALSE 19399
// if GetLives ( i ) < 1000 then
19370: LD_VAR 0 1
19374: PPUSH
19375: CALL_OW 256
19379: PUSH
19380: LD_INT 1000
19382: LESS
19383: IFFALSE 19397
// SetLives ( i , 1000 ) ;
19385: LD_VAR 0 1
19389: PPUSH
19390: LD_INT 1000
19392: PPUSH
19393: CALL_OW 234
19397: GO 19367
19399: POP
19400: POP
// until p > 20 ;
19401: LD_VAR 0 3
19405: PUSH
19406: LD_INT 20
19408: GREATER
19409: IFFALSE 19336
// end ;
19411: PPOPN 3
19413: END
// every 0 0$1 trigger StreamModeActive and sTime do
19414: LD_EXP 25
19418: IFFALSE 19426
19420: PUSH
19421: LD_EXP 76
19425: AND
19426: IFFALSE 19461
19428: GO 19430
19430: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19431: LD_INT 28
19433: PPUSH
19434: LD_OWVAR 2
19438: PPUSH
19439: LD_INT 2
19441: PPUSH
19442: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19446: LD_INT 30
19448: PPUSH
19449: LD_OWVAR 2
19453: PPUSH
19454: LD_INT 2
19456: PPUSH
19457: CALL_OW 322
// end ;
19461: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19462: LD_EXP 25
19466: IFFALSE 19474
19468: PUSH
19469: LD_EXP 77
19473: AND
19474: IFFALSE 19595
19476: GO 19478
19478: DISABLE
19479: LD_INT 0
19481: PPUSH
19482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19483: LD_ADDR_VAR 0 2
19487: PUSH
19488: LD_INT 22
19490: PUSH
19491: LD_OWVAR 2
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 21
19502: PUSH
19503: LD_INT 1
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 3
19512: PUSH
19513: LD_INT 23
19515: PUSH
19516: LD_INT 0
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: LIST
19531: PPUSH
19532: CALL_OW 69
19536: ST_TO_ADDR
// if not tmp then
19537: LD_VAR 0 2
19541: NOT
19542: IFFALSE 19546
// exit ;
19544: GO 19595
// for i in tmp do
19546: LD_ADDR_VAR 0 1
19550: PUSH
19551: LD_VAR 0 2
19555: PUSH
19556: FOR_IN
19557: IFFALSE 19593
// begin if Crawls ( i ) then
19559: LD_VAR 0 1
19563: PPUSH
19564: CALL_OW 318
19568: IFFALSE 19579
// ComWalk ( i ) ;
19570: LD_VAR 0 1
19574: PPUSH
19575: CALL_OW 138
// SetClass ( i , 2 ) ;
19579: LD_VAR 0 1
19583: PPUSH
19584: LD_INT 2
19586: PPUSH
19587: CALL_OW 336
// end ;
19591: GO 19556
19593: POP
19594: POP
// end ;
19595: PPOPN 2
19597: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19598: LD_EXP 25
19602: IFFALSE 19610
19604: PUSH
19605: LD_EXP 78
19609: AND
19610: IFFALSE 19900
19612: GO 19614
19614: DISABLE
19615: LD_INT 0
19617: PPUSH
19618: PPUSH
19619: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19620: LD_OWVAR 2
19624: PPUSH
19625: LD_INT 9
19627: PPUSH
19628: LD_INT 1
19630: PPUSH
19631: LD_INT 1
19633: PPUSH
19634: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19638: LD_INT 9
19640: PPUSH
19641: LD_OWVAR 2
19645: PPUSH
19646: CALL_OW 343
// uc_side := 9 ;
19650: LD_ADDR_OWVAR 20
19654: PUSH
19655: LD_INT 9
19657: ST_TO_ADDR
// uc_nation := 2 ;
19658: LD_ADDR_OWVAR 21
19662: PUSH
19663: LD_INT 2
19665: ST_TO_ADDR
// hc_name := Dark Warrior ;
19666: LD_ADDR_OWVAR 26
19670: PUSH
19671: LD_STRING Dark Warrior
19673: ST_TO_ADDR
// hc_gallery :=  ;
19674: LD_ADDR_OWVAR 33
19678: PUSH
19679: LD_STRING 
19681: ST_TO_ADDR
// hc_noskilllimit := true ;
19682: LD_ADDR_OWVAR 76
19686: PUSH
19687: LD_INT 1
19689: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19690: LD_ADDR_OWVAR 31
19694: PUSH
19695: LD_INT 30
19697: PUSH
19698: LD_INT 30
19700: PUSH
19701: LD_INT 30
19703: PUSH
19704: LD_INT 30
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: ST_TO_ADDR
// un := CreateHuman ;
19713: LD_ADDR_VAR 0 3
19717: PUSH
19718: CALL_OW 44
19722: ST_TO_ADDR
// hc_noskilllimit := false ;
19723: LD_ADDR_OWVAR 76
19727: PUSH
19728: LD_INT 0
19730: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19731: LD_VAR 0 3
19735: PPUSH
19736: LD_INT 1
19738: PPUSH
19739: CALL_OW 51
// ToLua ( playRanger() ) ;
19743: LD_STRING playRanger()
19745: PPUSH
19746: CALL_OW 559
// p := 0 ;
19750: LD_ADDR_VAR 0 2
19754: PUSH
19755: LD_INT 0
19757: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19758: LD_INT 35
19760: PPUSH
19761: CALL_OW 67
// p := p + 1 ;
19765: LD_ADDR_VAR 0 2
19769: PUSH
19770: LD_VAR 0 2
19774: PUSH
19775: LD_INT 1
19777: PLUS
19778: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19779: LD_VAR 0 3
19783: PPUSH
19784: CALL_OW 256
19788: PUSH
19789: LD_INT 1000
19791: LESS
19792: IFFALSE 19806
// SetLives ( un , 1000 ) ;
19794: LD_VAR 0 3
19798: PPUSH
19799: LD_INT 1000
19801: PPUSH
19802: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19806: LD_VAR 0 3
19810: PPUSH
19811: LD_INT 81
19813: PUSH
19814: LD_OWVAR 2
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 91
19825: PUSH
19826: LD_VAR 0 3
19830: PUSH
19831: LD_INT 30
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: LIST
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PPUSH
19843: CALL_OW 69
19847: PPUSH
19848: LD_VAR 0 3
19852: PPUSH
19853: CALL_OW 74
19857: PPUSH
19858: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19862: LD_VAR 0 2
19866: PUSH
19867: LD_INT 80
19869: GREATER
19870: IFTRUE 19883
19872: PUSH
19873: LD_VAR 0 3
19877: PPUSH
19878: CALL_OW 301
19882: OR
19883: IFFALSE 19758
// if un then
19885: LD_VAR 0 3
19889: IFFALSE 19900
// RemoveUnit ( un ) ;
19891: LD_VAR 0 3
19895: PPUSH
19896: CALL_OW 64
// end ;
19900: PPOPN 3
19902: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19903: LD_EXP 79
19907: IFFALSE 20023
19909: GO 19911
19911: DISABLE
19912: LD_INT 0
19914: PPUSH
19915: PPUSH
19916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19917: LD_ADDR_VAR 0 2
19921: PUSH
19922: LD_INT 81
19924: PUSH
19925: LD_OWVAR 2
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 21
19936: PUSH
19937: LD_INT 1
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PPUSH
19948: CALL_OW 69
19952: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19953: LD_STRING playComputer()
19955: PPUSH
19956: CALL_OW 559
// if not tmp then
19960: LD_VAR 0 2
19964: NOT
19965: IFFALSE 19969
// exit ;
19967: GO 20023
// for i in tmp do
19969: LD_ADDR_VAR 0 1
19973: PUSH
19974: LD_VAR 0 2
19978: PUSH
19979: FOR_IN
19980: IFFALSE 20021
// for j := 1 to 4 do
19982: LD_ADDR_VAR 0 3
19986: PUSH
19987: DOUBLE
19988: LD_INT 1
19990: DEC
19991: ST_TO_ADDR
19992: LD_INT 4
19994: PUSH
19995: FOR_TO
19996: IFFALSE 20017
// SetSkill ( i , j , 10 ) ;
19998: LD_VAR 0 1
20002: PPUSH
20003: LD_VAR 0 3
20007: PPUSH
20008: LD_INT 10
20010: PPUSH
20011: CALL_OW 237
20015: GO 19995
20017: POP
20018: POP
20019: GO 19979
20021: POP
20022: POP
// end ;
20023: PPOPN 3
20025: END
// every 0 0$1 trigger s30 do var i , tmp ;
20026: LD_EXP 80
20030: IFFALSE 20099
20032: GO 20034
20034: DISABLE
20035: LD_INT 0
20037: PPUSH
20038: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20039: LD_ADDR_VAR 0 2
20043: PUSH
20044: LD_INT 22
20046: PUSH
20047: LD_OWVAR 2
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PPUSH
20056: CALL_OW 69
20060: ST_TO_ADDR
// if not tmp then
20061: LD_VAR 0 2
20065: NOT
20066: IFFALSE 20070
// exit ;
20068: GO 20099
// for i in tmp do
20070: LD_ADDR_VAR 0 1
20074: PUSH
20075: LD_VAR 0 2
20079: PUSH
20080: FOR_IN
20081: IFFALSE 20097
// SetLives ( i , 300 ) ;
20083: LD_VAR 0 1
20087: PPUSH
20088: LD_INT 300
20090: PPUSH
20091: CALL_OW 234
20095: GO 20080
20097: POP
20098: POP
// end ;
20099: PPOPN 2
20101: END
// every 0 0$1 trigger s60 do var i , tmp ;
20102: LD_EXP 81
20106: IFFALSE 20175
20108: GO 20110
20110: DISABLE
20111: LD_INT 0
20113: PPUSH
20114: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20115: LD_ADDR_VAR 0 2
20119: PUSH
20120: LD_INT 22
20122: PUSH
20123: LD_OWVAR 2
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PPUSH
20132: CALL_OW 69
20136: ST_TO_ADDR
// if not tmp then
20137: LD_VAR 0 2
20141: NOT
20142: IFFALSE 20146
// exit ;
20144: GO 20175
// for i in tmp do
20146: LD_ADDR_VAR 0 1
20150: PUSH
20151: LD_VAR 0 2
20155: PUSH
20156: FOR_IN
20157: IFFALSE 20173
// SetLives ( i , 600 ) ;
20159: LD_VAR 0 1
20163: PPUSH
20164: LD_INT 600
20166: PPUSH
20167: CALL_OW 234
20171: GO 20156
20173: POP
20174: POP
// end ;
20175: PPOPN 2
20177: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20178: LD_INT 0
20180: PPUSH
// case cmd of 301 :
20181: LD_VAR 0 1
20185: PUSH
20186: LD_INT 301
20188: DOUBLE
20189: EQUAL
20190: IFTRUE 20194
20192: GO 20226
20194: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20195: LD_VAR 0 6
20199: PPUSH
20200: LD_VAR 0 7
20204: PPUSH
20205: LD_VAR 0 8
20209: PPUSH
20210: LD_VAR 0 4
20214: PPUSH
20215: LD_VAR 0 5
20219: PPUSH
20220: CALL 21439 0 5
20224: GO 20347
20226: LD_INT 302
20228: DOUBLE
20229: EQUAL
20230: IFTRUE 20234
20232: GO 20271
20234: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20235: LD_VAR 0 6
20239: PPUSH
20240: LD_VAR 0 7
20244: PPUSH
20245: LD_VAR 0 8
20249: PPUSH
20250: LD_VAR 0 9
20254: PPUSH
20255: LD_VAR 0 4
20259: PPUSH
20260: LD_VAR 0 5
20264: PPUSH
20265: CALL 21530 0 6
20269: GO 20347
20271: LD_INT 303
20273: DOUBLE
20274: EQUAL
20275: IFTRUE 20279
20277: GO 20316
20279: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20280: LD_VAR 0 6
20284: PPUSH
20285: LD_VAR 0 7
20289: PPUSH
20290: LD_VAR 0 8
20294: PPUSH
20295: LD_VAR 0 9
20299: PPUSH
20300: LD_VAR 0 4
20304: PPUSH
20305: LD_VAR 0 5
20309: PPUSH
20310: CALL 20352 0 6
20314: GO 20347
20316: LD_INT 304
20318: DOUBLE
20319: EQUAL
20320: IFTRUE 20324
20322: GO 20346
20324: POP
// hHackTeleport ( unit , x , y ) ; end ;
20325: LD_VAR 0 2
20329: PPUSH
20330: LD_VAR 0 4
20334: PPUSH
20335: LD_VAR 0 5
20339: PPUSH
20340: CALL 22123 0 3
20344: GO 20347
20346: POP
// end ;
20347: LD_VAR 0 12
20351: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20352: LD_INT 0
20354: PPUSH
20355: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20356: LD_VAR 0 1
20360: PUSH
20361: LD_INT 1
20363: LESS
20364: IFTRUE 20376
20366: PUSH
20367: LD_VAR 0 1
20371: PUSH
20372: LD_INT 3
20374: GREATER
20375: OR
20376: IFTRUE 20394
20378: PUSH
20379: LD_VAR 0 5
20383: PPUSH
20384: LD_VAR 0 6
20388: PPUSH
20389: CALL_OW 428
20393: OR
20394: IFFALSE 20398
// exit ;
20396: GO 21126
// uc_side := your_side ;
20398: LD_ADDR_OWVAR 20
20402: PUSH
20403: LD_OWVAR 2
20407: ST_TO_ADDR
// uc_nation := nation ;
20408: LD_ADDR_OWVAR 21
20412: PUSH
20413: LD_VAR 0 1
20417: ST_TO_ADDR
// bc_level = 1 ;
20418: LD_ADDR_OWVAR 43
20422: PUSH
20423: LD_INT 1
20425: ST_TO_ADDR
// case btype of 1 :
20426: LD_VAR 0 2
20430: PUSH
20431: LD_INT 1
20433: DOUBLE
20434: EQUAL
20435: IFTRUE 20439
20437: GO 20450
20439: POP
// bc_type := b_depot ; 2 :
20440: LD_ADDR_OWVAR 42
20444: PUSH
20445: LD_INT 0
20447: ST_TO_ADDR
20448: GO 21070
20450: LD_INT 2
20452: DOUBLE
20453: EQUAL
20454: IFTRUE 20458
20456: GO 20469
20458: POP
// bc_type := b_warehouse ; 3 :
20459: LD_ADDR_OWVAR 42
20463: PUSH
20464: LD_INT 1
20466: ST_TO_ADDR
20467: GO 21070
20469: LD_INT 3
20471: DOUBLE
20472: EQUAL
20473: IFTRUE 20477
20475: GO 20488
20477: POP
// bc_type := b_lab ; 4 .. 9 :
20478: LD_ADDR_OWVAR 42
20482: PUSH
20483: LD_INT 6
20485: ST_TO_ADDR
20486: GO 21070
20488: LD_INT 4
20490: DOUBLE
20491: GREATEREQUAL
20492: IFFALSE 20500
20494: LD_INT 9
20496: DOUBLE
20497: LESSEQUAL
20498: IFTRUE 20502
20500: GO 20562
20502: POP
// begin bc_type := b_lab_half ;
20503: LD_ADDR_OWVAR 42
20507: PUSH
20508: LD_INT 7
20510: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20511: LD_ADDR_OWVAR 44
20515: PUSH
20516: LD_INT 10
20518: PUSH
20519: LD_INT 11
20521: PUSH
20522: LD_INT 12
20524: PUSH
20525: LD_INT 15
20527: PUSH
20528: LD_INT 14
20530: PUSH
20531: LD_INT 13
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: PUSH
20542: LD_VAR 0 2
20546: PUSH
20547: LD_INT 3
20549: MINUS
20550: ARRAY
20551: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20552: LD_ADDR_OWVAR 45
20556: PUSH
20557: LD_INT 9
20559: ST_TO_ADDR
// end ; 10 .. 13 :
20560: GO 21070
20562: LD_INT 10
20564: DOUBLE
20565: GREATEREQUAL
20566: IFFALSE 20574
20568: LD_INT 13
20570: DOUBLE
20571: LESSEQUAL
20572: IFTRUE 20576
20574: GO 20653
20576: POP
// begin bc_type := b_lab_full ;
20577: LD_ADDR_OWVAR 42
20581: PUSH
20582: LD_INT 8
20584: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20585: LD_ADDR_OWVAR 44
20589: PUSH
20590: LD_INT 10
20592: PUSH
20593: LD_INT 12
20595: PUSH
20596: LD_INT 14
20598: PUSH
20599: LD_INT 13
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: PUSH
20608: LD_VAR 0 2
20612: PUSH
20613: LD_INT 9
20615: MINUS
20616: ARRAY
20617: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20618: LD_ADDR_OWVAR 45
20622: PUSH
20623: LD_INT 11
20625: PUSH
20626: LD_INT 15
20628: PUSH
20629: LD_INT 12
20631: PUSH
20632: LD_INT 15
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: PUSH
20641: LD_VAR 0 2
20645: PUSH
20646: LD_INT 9
20648: MINUS
20649: ARRAY
20650: ST_TO_ADDR
// end ; 14 :
20651: GO 21070
20653: LD_INT 14
20655: DOUBLE
20656: EQUAL
20657: IFTRUE 20661
20659: GO 20672
20661: POP
// bc_type := b_workshop ; 15 :
20662: LD_ADDR_OWVAR 42
20666: PUSH
20667: LD_INT 2
20669: ST_TO_ADDR
20670: GO 21070
20672: LD_INT 15
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20691
20680: POP
// bc_type := b_factory ; 16 :
20681: LD_ADDR_OWVAR 42
20685: PUSH
20686: LD_INT 3
20688: ST_TO_ADDR
20689: GO 21070
20691: LD_INT 16
20693: DOUBLE
20694: EQUAL
20695: IFTRUE 20699
20697: GO 20710
20699: POP
// bc_type := b_ext_gun ; 17 :
20700: LD_ADDR_OWVAR 42
20704: PUSH
20705: LD_INT 17
20707: ST_TO_ADDR
20708: GO 21070
20710: LD_INT 17
20712: DOUBLE
20713: EQUAL
20714: IFTRUE 20718
20716: GO 20746
20718: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20719: LD_ADDR_OWVAR 42
20723: PUSH
20724: LD_INT 19
20726: PUSH
20727: LD_INT 23
20729: PUSH
20730: LD_INT 19
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: LIST
20737: PUSH
20738: LD_VAR 0 1
20742: ARRAY
20743: ST_TO_ADDR
20744: GO 21070
20746: LD_INT 18
20748: DOUBLE
20749: EQUAL
20750: IFTRUE 20754
20752: GO 20765
20754: POP
// bc_type := b_ext_radar ; 19 :
20755: LD_ADDR_OWVAR 42
20759: PUSH
20760: LD_INT 20
20762: ST_TO_ADDR
20763: GO 21070
20765: LD_INT 19
20767: DOUBLE
20768: EQUAL
20769: IFTRUE 20773
20771: GO 20784
20773: POP
// bc_type := b_ext_radio ; 20 :
20774: LD_ADDR_OWVAR 42
20778: PUSH
20779: LD_INT 22
20781: ST_TO_ADDR
20782: GO 21070
20784: LD_INT 20
20786: DOUBLE
20787: EQUAL
20788: IFTRUE 20792
20790: GO 20803
20792: POP
// bc_type := b_ext_siberium ; 21 :
20793: LD_ADDR_OWVAR 42
20797: PUSH
20798: LD_INT 21
20800: ST_TO_ADDR
20801: GO 21070
20803: LD_INT 21
20805: DOUBLE
20806: EQUAL
20807: IFTRUE 20811
20809: GO 20822
20811: POP
// bc_type := b_ext_computer ; 22 :
20812: LD_ADDR_OWVAR 42
20816: PUSH
20817: LD_INT 24
20819: ST_TO_ADDR
20820: GO 21070
20822: LD_INT 22
20824: DOUBLE
20825: EQUAL
20826: IFTRUE 20830
20828: GO 20841
20830: POP
// bc_type := b_ext_track ; 23 :
20831: LD_ADDR_OWVAR 42
20835: PUSH
20836: LD_INT 16
20838: ST_TO_ADDR
20839: GO 21070
20841: LD_INT 23
20843: DOUBLE
20844: EQUAL
20845: IFTRUE 20849
20847: GO 20860
20849: POP
// bc_type := b_ext_laser ; 24 :
20850: LD_ADDR_OWVAR 42
20854: PUSH
20855: LD_INT 25
20857: ST_TO_ADDR
20858: GO 21070
20860: LD_INT 24
20862: DOUBLE
20863: EQUAL
20864: IFTRUE 20868
20866: GO 20879
20868: POP
// bc_type := b_control_tower ; 25 :
20869: LD_ADDR_OWVAR 42
20873: PUSH
20874: LD_INT 36
20876: ST_TO_ADDR
20877: GO 21070
20879: LD_INT 25
20881: DOUBLE
20882: EQUAL
20883: IFTRUE 20887
20885: GO 20898
20887: POP
// bc_type := b_breastwork ; 26 :
20888: LD_ADDR_OWVAR 42
20892: PUSH
20893: LD_INT 31
20895: ST_TO_ADDR
20896: GO 21070
20898: LD_INT 26
20900: DOUBLE
20901: EQUAL
20902: IFTRUE 20906
20904: GO 20917
20906: POP
// bc_type := b_bunker ; 27 :
20907: LD_ADDR_OWVAR 42
20911: PUSH
20912: LD_INT 32
20914: ST_TO_ADDR
20915: GO 21070
20917: LD_INT 27
20919: DOUBLE
20920: EQUAL
20921: IFTRUE 20925
20923: GO 20936
20925: POP
// bc_type := b_turret ; 28 :
20926: LD_ADDR_OWVAR 42
20930: PUSH
20931: LD_INT 33
20933: ST_TO_ADDR
20934: GO 21070
20936: LD_INT 28
20938: DOUBLE
20939: EQUAL
20940: IFTRUE 20944
20942: GO 20955
20944: POP
// bc_type := b_armoury ; 29 :
20945: LD_ADDR_OWVAR 42
20949: PUSH
20950: LD_INT 4
20952: ST_TO_ADDR
20953: GO 21070
20955: LD_INT 29
20957: DOUBLE
20958: EQUAL
20959: IFTRUE 20963
20961: GO 20974
20963: POP
// bc_type := b_barracks ; 30 :
20964: LD_ADDR_OWVAR 42
20968: PUSH
20969: LD_INT 5
20971: ST_TO_ADDR
20972: GO 21070
20974: LD_INT 30
20976: DOUBLE
20977: EQUAL
20978: IFTRUE 20982
20980: GO 20993
20982: POP
// bc_type := b_solar_power ; 31 :
20983: LD_ADDR_OWVAR 42
20987: PUSH
20988: LD_INT 27
20990: ST_TO_ADDR
20991: GO 21070
20993: LD_INT 31
20995: DOUBLE
20996: EQUAL
20997: IFTRUE 21001
20999: GO 21012
21001: POP
// bc_type := b_oil_power ; 32 :
21002: LD_ADDR_OWVAR 42
21006: PUSH
21007: LD_INT 26
21009: ST_TO_ADDR
21010: GO 21070
21012: LD_INT 32
21014: DOUBLE
21015: EQUAL
21016: IFTRUE 21020
21018: GO 21031
21020: POP
// bc_type := b_siberite_power ; 33 :
21021: LD_ADDR_OWVAR 42
21025: PUSH
21026: LD_INT 28
21028: ST_TO_ADDR
21029: GO 21070
21031: LD_INT 33
21033: DOUBLE
21034: EQUAL
21035: IFTRUE 21039
21037: GO 21050
21039: POP
// bc_type := b_oil_mine ; 34 :
21040: LD_ADDR_OWVAR 42
21044: PUSH
21045: LD_INT 29
21047: ST_TO_ADDR
21048: GO 21070
21050: LD_INT 34
21052: DOUBLE
21053: EQUAL
21054: IFTRUE 21058
21056: GO 21069
21058: POP
// bc_type := b_siberite_mine ; end ;
21059: LD_ADDR_OWVAR 42
21063: PUSH
21064: LD_INT 30
21066: ST_TO_ADDR
21067: GO 21070
21069: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21070: LD_ADDR_VAR 0 8
21074: PUSH
21075: LD_VAR 0 5
21079: PPUSH
21080: LD_VAR 0 6
21084: PPUSH
21085: LD_VAR 0 3
21089: PPUSH
21090: CALL_OW 47
21094: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21095: LD_OWVAR 42
21099: PUSH
21100: LD_INT 32
21102: PUSH
21103: LD_INT 33
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: IN
21110: IFFALSE 21126
// PlaceWeaponTurret ( b , weapon ) ;
21112: LD_VAR 0 8
21116: PPUSH
21117: LD_VAR 0 4
21121: PPUSH
21122: CALL_OW 431
// end ;
21126: LD_VAR 0 7
21130: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21131: LD_INT 0
21133: PPUSH
21134: PPUSH
21135: PPUSH
21136: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21137: LD_ADDR_VAR 0 4
21141: PUSH
21142: LD_INT 22
21144: PUSH
21145: LD_OWVAR 2
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 2
21156: PUSH
21157: LD_INT 30
21159: PUSH
21160: LD_INT 0
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 30
21169: PUSH
21170: LD_INT 1
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: LIST
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PPUSH
21186: CALL_OW 69
21190: ST_TO_ADDR
// if not tmp then
21191: LD_VAR 0 4
21195: NOT
21196: IFFALSE 21200
// exit ;
21198: GO 21259
// for i in tmp do
21200: LD_ADDR_VAR 0 2
21204: PUSH
21205: LD_VAR 0 4
21209: PUSH
21210: FOR_IN
21211: IFFALSE 21257
// for j = 1 to 3 do
21213: LD_ADDR_VAR 0 3
21217: PUSH
21218: DOUBLE
21219: LD_INT 1
21221: DEC
21222: ST_TO_ADDR
21223: LD_INT 3
21225: PUSH
21226: FOR_TO
21227: IFFALSE 21253
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21229: LD_VAR 0 2
21233: PPUSH
21234: CALL_OW 274
21238: PPUSH
21239: LD_VAR 0 3
21243: PPUSH
21244: LD_INT 99999
21246: PPUSH
21247: CALL_OW 277
21251: GO 21226
21253: POP
21254: POP
21255: GO 21210
21257: POP
21258: POP
// end ;
21259: LD_VAR 0 1
21263: RET
// export function hHackSetLevel10 ; var i , j ; begin
21264: LD_INT 0
21266: PPUSH
21267: PPUSH
21268: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21269: LD_ADDR_VAR 0 2
21273: PUSH
21274: LD_INT 21
21276: PUSH
21277: LD_INT 1
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PPUSH
21284: CALL_OW 69
21288: PUSH
21289: FOR_IN
21290: IFFALSE 21342
// if IsSelected ( i ) then
21292: LD_VAR 0 2
21296: PPUSH
21297: CALL_OW 306
21301: IFFALSE 21340
// begin for j := 1 to 4 do
21303: LD_ADDR_VAR 0 3
21307: PUSH
21308: DOUBLE
21309: LD_INT 1
21311: DEC
21312: ST_TO_ADDR
21313: LD_INT 4
21315: PUSH
21316: FOR_TO
21317: IFFALSE 21338
// SetSkill ( i , j , 10 ) ;
21319: LD_VAR 0 2
21323: PPUSH
21324: LD_VAR 0 3
21328: PPUSH
21329: LD_INT 10
21331: PPUSH
21332: CALL_OW 237
21336: GO 21316
21338: POP
21339: POP
// end ;
21340: GO 21289
21342: POP
21343: POP
// end ;
21344: LD_VAR 0 1
21348: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21349: LD_INT 0
21351: PPUSH
21352: PPUSH
21353: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21354: LD_ADDR_VAR 0 2
21358: PUSH
21359: LD_INT 22
21361: PUSH
21362: LD_OWVAR 2
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 21
21373: PUSH
21374: LD_INT 1
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PPUSH
21385: CALL_OW 69
21389: PUSH
21390: FOR_IN
21391: IFFALSE 21432
// begin for j := 1 to 4 do
21393: LD_ADDR_VAR 0 3
21397: PUSH
21398: DOUBLE
21399: LD_INT 1
21401: DEC
21402: ST_TO_ADDR
21403: LD_INT 4
21405: PUSH
21406: FOR_TO
21407: IFFALSE 21428
// SetSkill ( i , j , 10 ) ;
21409: LD_VAR 0 2
21413: PPUSH
21414: LD_VAR 0 3
21418: PPUSH
21419: LD_INT 10
21421: PPUSH
21422: CALL_OW 237
21426: GO 21406
21428: POP
21429: POP
// end ;
21430: GO 21390
21432: POP
21433: POP
// end ;
21434: LD_VAR 0 1
21438: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21439: LD_INT 0
21441: PPUSH
// uc_side := your_side ;
21442: LD_ADDR_OWVAR 20
21446: PUSH
21447: LD_OWVAR 2
21451: ST_TO_ADDR
// uc_nation := nation ;
21452: LD_ADDR_OWVAR 21
21456: PUSH
21457: LD_VAR 0 1
21461: ST_TO_ADDR
// InitHc ;
21462: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21466: LD_INT 0
21468: PPUSH
21469: LD_VAR 0 2
21473: PPUSH
21474: LD_VAR 0 3
21478: PPUSH
21479: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21483: LD_VAR 0 4
21487: PPUSH
21488: LD_VAR 0 5
21492: PPUSH
21493: CALL_OW 428
21497: PUSH
21498: LD_INT 0
21500: EQUAL
21501: IFFALSE 21525
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21503: CALL_OW 44
21507: PPUSH
21508: LD_VAR 0 4
21512: PPUSH
21513: LD_VAR 0 5
21517: PPUSH
21518: LD_INT 1
21520: PPUSH
21521: CALL_OW 48
// end ;
21525: LD_VAR 0 6
21529: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21530: LD_INT 0
21532: PPUSH
21533: PPUSH
// uc_side := your_side ;
21534: LD_ADDR_OWVAR 20
21538: PUSH
21539: LD_OWVAR 2
21543: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21544: LD_VAR 0 1
21548: PUSH
21549: LD_INT 1
21551: PUSH
21552: LD_INT 2
21554: PUSH
21555: LD_INT 3
21557: PUSH
21558: LD_INT 4
21560: PUSH
21561: LD_INT 5
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: IN
21571: IFFALSE 21583
// uc_nation := nation_american else
21573: LD_ADDR_OWVAR 21
21577: PUSH
21578: LD_INT 1
21580: ST_TO_ADDR
21581: GO 21626
// if chassis in [ 11 , 12 , 13 , 14 ] then
21583: LD_VAR 0 1
21587: PUSH
21588: LD_INT 11
21590: PUSH
21591: LD_INT 12
21593: PUSH
21594: LD_INT 13
21596: PUSH
21597: LD_INT 14
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: IN
21606: IFFALSE 21618
// uc_nation := nation_arabian else
21608: LD_ADDR_OWVAR 21
21612: PUSH
21613: LD_INT 2
21615: ST_TO_ADDR
21616: GO 21626
// uc_nation := nation_russian ;
21618: LD_ADDR_OWVAR 21
21622: PUSH
21623: LD_INT 3
21625: ST_TO_ADDR
// vc_chassis := chassis ;
21626: LD_ADDR_OWVAR 37
21630: PUSH
21631: LD_VAR 0 1
21635: ST_TO_ADDR
// vc_engine := engine ;
21636: LD_ADDR_OWVAR 39
21640: PUSH
21641: LD_VAR 0 2
21645: ST_TO_ADDR
// vc_control := control ;
21646: LD_ADDR_OWVAR 38
21650: PUSH
21651: LD_VAR 0 3
21655: ST_TO_ADDR
// vc_weapon := weapon ;
21656: LD_ADDR_OWVAR 40
21660: PUSH
21661: LD_VAR 0 4
21665: ST_TO_ADDR
// un := CreateVehicle ;
21666: LD_ADDR_VAR 0 8
21670: PUSH
21671: CALL_OW 45
21675: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21676: LD_VAR 0 8
21680: PPUSH
21681: LD_INT 0
21683: PPUSH
21684: LD_INT 5
21686: PPUSH
21687: CALL_OW 12
21691: PPUSH
21692: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21696: LD_VAR 0 8
21700: PPUSH
21701: LD_VAR 0 5
21705: PPUSH
21706: LD_VAR 0 6
21710: PPUSH
21711: LD_INT 1
21713: PPUSH
21714: CALL_OW 48
// end ;
21718: LD_VAR 0 7
21722: RET
// export hInvincible ; every 1 do
21723: GO 21725
21725: DISABLE
// hInvincible := [ ] ;
21726: LD_ADDR_EXP 82
21730: PUSH
21731: EMPTY
21732: ST_TO_ADDR
21733: END
// every 10 do var i ;
21734: GO 21736
21736: DISABLE
21737: LD_INT 0
21739: PPUSH
// begin enable ;
21740: ENABLE
// if not hInvincible then
21741: LD_EXP 82
21745: NOT
21746: IFFALSE 21750
// exit ;
21748: GO 21794
// for i in hInvincible do
21750: LD_ADDR_VAR 0 1
21754: PUSH
21755: LD_EXP 82
21759: PUSH
21760: FOR_IN
21761: IFFALSE 21792
// if GetLives ( i ) < 1000 then
21763: LD_VAR 0 1
21767: PPUSH
21768: CALL_OW 256
21772: PUSH
21773: LD_INT 1000
21775: LESS
21776: IFFALSE 21790
// SetLives ( i , 1000 ) ;
21778: LD_VAR 0 1
21782: PPUSH
21783: LD_INT 1000
21785: PPUSH
21786: CALL_OW 234
21790: GO 21760
21792: POP
21793: POP
// end ;
21794: PPOPN 1
21796: END
// export function hHackInvincible ; var i ; begin
21797: LD_INT 0
21799: PPUSH
21800: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21801: LD_ADDR_VAR 0 2
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: LD_INT 21
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 21
21821: PUSH
21822: LD_INT 2
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: LIST
21833: PPUSH
21834: CALL_OW 69
21838: PUSH
21839: FOR_IN
21840: IFFALSE 21901
// if IsSelected ( i ) then
21842: LD_VAR 0 2
21846: PPUSH
21847: CALL_OW 306
21851: IFFALSE 21899
// begin if i in hInvincible then
21853: LD_VAR 0 2
21857: PUSH
21858: LD_EXP 82
21862: IN
21863: IFFALSE 21883
// hInvincible := hInvincible diff i else
21865: LD_ADDR_EXP 82
21869: PUSH
21870: LD_EXP 82
21874: PUSH
21875: LD_VAR 0 2
21879: DIFF
21880: ST_TO_ADDR
21881: GO 21899
// hInvincible := hInvincible union i ;
21883: LD_ADDR_EXP 82
21887: PUSH
21888: LD_EXP 82
21892: PUSH
21893: LD_VAR 0 2
21897: UNION
21898: ST_TO_ADDR
// end ;
21899: GO 21839
21901: POP
21902: POP
// end ;
21903: LD_VAR 0 1
21907: RET
// export function hHackInvisible ; var i , j ; begin
21908: LD_INT 0
21910: PPUSH
21911: PPUSH
21912: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21913: LD_ADDR_VAR 0 2
21917: PUSH
21918: LD_INT 21
21920: PUSH
21921: LD_INT 1
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PPUSH
21928: CALL_OW 69
21932: PUSH
21933: FOR_IN
21934: IFFALSE 21958
// if IsSelected ( i ) then
21936: LD_VAR 0 2
21940: PPUSH
21941: CALL_OW 306
21945: IFFALSE 21956
// ComForceInvisible ( i ) ;
21947: LD_VAR 0 2
21951: PPUSH
21952: CALL_OW 496
21956: GO 21933
21958: POP
21959: POP
// end ;
21960: LD_VAR 0 1
21964: RET
// export function hHackChangeYourSide ; begin
21965: LD_INT 0
21967: PPUSH
// if your_side = 8 then
21968: LD_OWVAR 2
21972: PUSH
21973: LD_INT 8
21975: EQUAL
21976: IFFALSE 21988
// your_side := 0 else
21978: LD_ADDR_OWVAR 2
21982: PUSH
21983: LD_INT 0
21985: ST_TO_ADDR
21986: GO 22002
// your_side := your_side + 1 ;
21988: LD_ADDR_OWVAR 2
21992: PUSH
21993: LD_OWVAR 2
21997: PUSH
21998: LD_INT 1
22000: PLUS
22001: ST_TO_ADDR
// end ;
22002: LD_VAR 0 1
22006: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22007: LD_INT 0
22009: PPUSH
22010: PPUSH
22011: PPUSH
// for i in all_units do
22012: LD_ADDR_VAR 0 2
22016: PUSH
22017: LD_OWVAR 3
22021: PUSH
22022: FOR_IN
22023: IFFALSE 22101
// if IsSelected ( i ) then
22025: LD_VAR 0 2
22029: PPUSH
22030: CALL_OW 306
22034: IFFALSE 22099
// begin j := GetSide ( i ) ;
22036: LD_ADDR_VAR 0 3
22040: PUSH
22041: LD_VAR 0 2
22045: PPUSH
22046: CALL_OW 255
22050: ST_TO_ADDR
// if j = 8 then
22051: LD_VAR 0 3
22055: PUSH
22056: LD_INT 8
22058: EQUAL
22059: IFFALSE 22071
// j := 0 else
22061: LD_ADDR_VAR 0 3
22065: PUSH
22066: LD_INT 0
22068: ST_TO_ADDR
22069: GO 22085
// j := j + 1 ;
22071: LD_ADDR_VAR 0 3
22075: PUSH
22076: LD_VAR 0 3
22080: PUSH
22081: LD_INT 1
22083: PLUS
22084: ST_TO_ADDR
// SetSide ( i , j ) ;
22085: LD_VAR 0 2
22089: PPUSH
22090: LD_VAR 0 3
22094: PPUSH
22095: CALL_OW 235
// end ;
22099: GO 22022
22101: POP
22102: POP
// end ;
22103: LD_VAR 0 1
22107: RET
// export function hHackFog ; begin
22108: LD_INT 0
22110: PPUSH
// FogOff ( true ) ;
22111: LD_INT 1
22113: PPUSH
22114: CALL_OW 344
// end ;
22118: LD_VAR 0 1
22122: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22123: LD_INT 0
22125: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22126: LD_VAR 0 1
22130: PPUSH
22131: LD_VAR 0 2
22135: PPUSH
22136: LD_VAR 0 3
22140: PPUSH
22141: LD_INT 1
22143: PPUSH
22144: LD_INT 1
22146: PPUSH
22147: CALL_OW 483
// CenterOnXY ( x , y ) ;
22151: LD_VAR 0 2
22155: PPUSH
22156: LD_VAR 0 3
22160: PPUSH
22161: CALL_OW 84
// end ;
22165: LD_VAR 0 4
22169: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22170: LD_INT 0
22172: PPUSH
22173: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22174: LD_VAR 0 1
22178: NOT
22179: IFTRUE 22198
22181: PUSH
22182: LD_VAR 0 2
22186: PPUSH
22187: LD_VAR 0 3
22191: PPUSH
22192: CALL_OW 488
22196: NOT
22197: OR
22198: IFTRUE 22233
22200: PUSH
22201: LD_VAR 0 1
22205: PPUSH
22206: CALL_OW 266
22210: PUSH
22211: LD_INT 3
22213: NONEQUAL
22214: IFFALSE 22232
22216: PUSH
22217: LD_VAR 0 1
22221: PPUSH
22222: CALL_OW 247
22226: PUSH
22227: LD_INT 1
22229: EQUAL
22230: NOT
22231: AND
22232: OR
22233: IFFALSE 22237
// exit ;
22235: GO 22519
// if GetType ( factory ) = unit_human then
22237: LD_VAR 0 1
22241: PPUSH
22242: CALL_OW 247
22246: PUSH
22247: LD_INT 1
22249: EQUAL
22250: IFFALSE 22267
// factory := IsInUnit ( factory ) ;
22252: LD_ADDR_VAR 0 1
22256: PUSH
22257: LD_VAR 0 1
22261: PPUSH
22262: CALL_OW 310
22266: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22267: LD_VAR 0 1
22271: PPUSH
22272: CALL_OW 266
22276: PUSH
22277: LD_INT 3
22279: NONEQUAL
22280: IFFALSE 22284
// exit ;
22282: GO 22519
// for i := 1 to Count ( factoryWaypoints ) do
22284: LD_ADDR_VAR 0 5
22288: PUSH
22289: DOUBLE
22290: LD_INT 1
22292: DEC
22293: ST_TO_ADDR
22294: LD_EXP 83
22298: PPUSH
22299: CALL 32223 0 1
22303: PUSH
22304: FOR_TO
22305: IFFALSE 22467
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
22307: LD_VAR 0 2
22311: PPUSH
22312: LD_VAR 0 3
22316: PPUSH
22317: CALL_OW 428
22321: PUSH
22322: LD_EXP 83
22326: PUSH
22327: LD_VAR 0 5
22331: ARRAY
22332: PUSH
22333: LD_INT 2
22335: ARRAY
22336: EQUAL
22337: IFFALSE 22369
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22339: LD_ADDR_EXP 83
22343: PUSH
22344: LD_EXP 83
22348: PPUSH
22349: LD_VAR 0 5
22353: PPUSH
22354: CALL_OW 3
22358: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22359: CALL 22524 0 0
// exit ;
22363: POP
22364: POP
22365: GO 22519
// end else
22367: GO 22465
// if factory = factoryWaypoints [ i ] [ 2 ] then
22369: LD_VAR 0 1
22373: PUSH
22374: LD_EXP 83
22378: PUSH
22379: LD_VAR 0 5
22383: ARRAY
22384: PUSH
22385: LD_INT 2
22387: ARRAY
22388: EQUAL
22389: IFFALSE 22465
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22391: LD_ADDR_EXP 83
22395: PUSH
22396: LD_EXP 83
22400: PPUSH
22401: LD_VAR 0 5
22405: PPUSH
22406: CALL_OW 3
22410: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22411: LD_ADDR_EXP 83
22415: PUSH
22416: LD_EXP 83
22420: PPUSH
22421: LD_VAR 0 1
22425: PPUSH
22426: CALL_OW 255
22430: PUSH
22431: LD_VAR 0 1
22435: PUSH
22436: LD_VAR 0 2
22440: PUSH
22441: LD_VAR 0 3
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: PPUSH
22452: CALL 68189 0 2
22456: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22457: CALL 22524 0 0
// exit ;
22461: POP
22462: POP
22463: GO 22519
// end ; end ;
22465: GO 22304
22467: POP
22468: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22469: LD_ADDR_EXP 83
22473: PUSH
22474: LD_EXP 83
22478: PPUSH
22479: LD_VAR 0 1
22483: PPUSH
22484: CALL_OW 255
22488: PUSH
22489: LD_VAR 0 1
22493: PUSH
22494: LD_VAR 0 2
22498: PUSH
22499: LD_VAR 0 3
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: PPUSH
22510: CALL 68189 0 2
22514: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22515: CALL 22524 0 0
// end ;
22519: LD_VAR 0 4
22523: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22524: LD_INT 0
22526: PPUSH
22527: PPUSH
22528: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22529: LD_STRING resetFactoryWaypoint();
22531: PPUSH
22532: CALL_OW 559
// if factoryWaypoints then
22536: LD_EXP 83
22540: IFFALSE 22661
// begin list := factoryWaypoints ;
22542: LD_ADDR_VAR 0 3
22546: PUSH
22547: LD_EXP 83
22551: ST_TO_ADDR
// for i := 1 to list do
22552: LD_ADDR_VAR 0 2
22556: PUSH
22557: DOUBLE
22558: LD_INT 1
22560: DEC
22561: ST_TO_ADDR
22562: LD_VAR 0 3
22566: PUSH
22567: FOR_TO
22568: IFFALSE 22659
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22570: LD_STRING setFactoryWaypointXY(
22572: PUSH
22573: LD_VAR 0 3
22577: PUSH
22578: LD_VAR 0 2
22582: ARRAY
22583: PUSH
22584: LD_INT 1
22586: ARRAY
22587: STR
22588: PUSH
22589: LD_STRING ,
22591: STR
22592: PUSH
22593: LD_VAR 0 3
22597: PUSH
22598: LD_VAR 0 2
22602: ARRAY
22603: PUSH
22604: LD_INT 2
22606: ARRAY
22607: STR
22608: PUSH
22609: LD_STRING ,
22611: STR
22612: PUSH
22613: LD_VAR 0 3
22617: PUSH
22618: LD_VAR 0 2
22622: ARRAY
22623: PUSH
22624: LD_INT 3
22626: ARRAY
22627: STR
22628: PUSH
22629: LD_STRING ,
22631: STR
22632: PUSH
22633: LD_VAR 0 3
22637: PUSH
22638: LD_VAR 0 2
22642: ARRAY
22643: PUSH
22644: LD_INT 4
22646: ARRAY
22647: STR
22648: PUSH
22649: LD_STRING )
22651: STR
22652: PPUSH
22653: CALL_OW 559
22657: GO 22567
22659: POP
22660: POP
// end ; end ;
22661: LD_VAR 0 1
22665: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22666: LD_INT 0
22668: PPUSH
// if HexInfo ( x , y ) = warehouse then
22669: LD_VAR 0 2
22673: PPUSH
22674: LD_VAR 0 3
22678: PPUSH
22679: CALL_OW 428
22683: PUSH
22684: LD_VAR 0 1
22688: EQUAL
22689: IFFALSE 22716
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22691: LD_ADDR_EXP 85
22695: PUSH
22696: LD_EXP 85
22700: PPUSH
22701: LD_VAR 0 1
22705: PPUSH
22706: LD_INT 0
22708: PPUSH
22709: CALL_OW 1
22713: ST_TO_ADDR
22714: GO 22767
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22716: LD_ADDR_EXP 85
22720: PUSH
22721: LD_EXP 85
22725: PPUSH
22726: LD_VAR 0 1
22730: PPUSH
22731: LD_VAR 0 1
22735: PPUSH
22736: CALL_OW 255
22740: PUSH
22741: LD_VAR 0 1
22745: PUSH
22746: LD_VAR 0 2
22750: PUSH
22751: LD_VAR 0 3
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: PPUSH
22762: CALL_OW 1
22766: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22767: CALL 22776 0 0
// end ;
22771: LD_VAR 0 4
22775: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22776: LD_INT 0
22778: PPUSH
22779: PPUSH
22780: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22781: LD_STRING resetWarehouseGatheringPoints();
22783: PPUSH
22784: CALL_OW 559
// if warehouseGatheringPoints then
22788: LD_EXP 85
22792: IFFALSE 22918
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22794: LD_ADDR_VAR 0 3
22798: PUSH
22799: LD_EXP 85
22803: PPUSH
22804: CALL 72123 0 1
22808: ST_TO_ADDR
// for i := 1 to list do
22809: LD_ADDR_VAR 0 2
22813: PUSH
22814: DOUBLE
22815: LD_INT 1
22817: DEC
22818: ST_TO_ADDR
22819: LD_VAR 0 3
22823: PUSH
22824: FOR_TO
22825: IFFALSE 22916
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22827: LD_STRING setWarehouseGatheringPointXY(
22829: PUSH
22830: LD_VAR 0 3
22834: PUSH
22835: LD_VAR 0 2
22839: ARRAY
22840: PUSH
22841: LD_INT 1
22843: ARRAY
22844: STR
22845: PUSH
22846: LD_STRING ,
22848: STR
22849: PUSH
22850: LD_VAR 0 3
22854: PUSH
22855: LD_VAR 0 2
22859: ARRAY
22860: PUSH
22861: LD_INT 2
22863: ARRAY
22864: STR
22865: PUSH
22866: LD_STRING ,
22868: STR
22869: PUSH
22870: LD_VAR 0 3
22874: PUSH
22875: LD_VAR 0 2
22879: ARRAY
22880: PUSH
22881: LD_INT 3
22883: ARRAY
22884: STR
22885: PUSH
22886: LD_STRING ,
22888: STR
22889: PUSH
22890: LD_VAR 0 3
22894: PUSH
22895: LD_VAR 0 2
22899: ARRAY
22900: PUSH
22901: LD_INT 4
22903: ARRAY
22904: STR
22905: PUSH
22906: LD_STRING )
22908: STR
22909: PPUSH
22910: CALL_OW 559
22914: GO 22824
22916: POP
22917: POP
// end ; end ;
22918: LD_VAR 0 1
22922: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22923: LD_EXP 85
22927: IFFALSE 23622
22929: GO 22931
22931: DISABLE
22932: LD_INT 0
22934: PPUSH
22935: PPUSH
22936: PPUSH
22937: PPUSH
22938: PPUSH
22939: PPUSH
22940: PPUSH
22941: PPUSH
22942: PPUSH
// begin enable ;
22943: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22944: LD_ADDR_VAR 0 3
22948: PUSH
22949: LD_EXP 85
22953: PPUSH
22954: CALL 72123 0 1
22958: ST_TO_ADDR
// if not list then
22959: LD_VAR 0 3
22963: NOT
22964: IFFALSE 22968
// exit ;
22966: GO 23622
// for i := 1 to list do
22968: LD_ADDR_VAR 0 1
22972: PUSH
22973: DOUBLE
22974: LD_INT 1
22976: DEC
22977: ST_TO_ADDR
22978: LD_VAR 0 3
22982: PUSH
22983: FOR_TO
22984: IFFALSE 23620
// begin depot := list [ i ] [ 2 ] ;
22986: LD_ADDR_VAR 0 8
22990: PUSH
22991: LD_VAR 0 3
22995: PUSH
22996: LD_VAR 0 1
23000: ARRAY
23001: PUSH
23002: LD_INT 2
23004: ARRAY
23005: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23006: LD_ADDR_VAR 0 5
23010: PUSH
23011: LD_VAR 0 3
23015: PUSH
23016: LD_VAR 0 1
23020: ARRAY
23021: PUSH
23022: LD_INT 1
23024: ARRAY
23025: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23026: LD_VAR 0 8
23030: PPUSH
23031: CALL_OW 301
23035: IFTRUE 23054
23037: PUSH
23038: LD_VAR 0 5
23042: PUSH
23043: LD_VAR 0 8
23047: PPUSH
23048: CALL_OW 255
23052: NONEQUAL
23053: OR
23054: IFFALSE 23083
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23056: LD_ADDR_EXP 85
23060: PUSH
23061: LD_EXP 85
23065: PPUSH
23066: LD_VAR 0 8
23070: PPUSH
23071: LD_INT 0
23073: PPUSH
23074: CALL_OW 1
23078: ST_TO_ADDR
// exit ;
23079: POP
23080: POP
23081: GO 23622
// end ; x := list [ i ] [ 3 ] ;
23083: LD_ADDR_VAR 0 6
23087: PUSH
23088: LD_VAR 0 3
23092: PUSH
23093: LD_VAR 0 1
23097: ARRAY
23098: PUSH
23099: LD_INT 3
23101: ARRAY
23102: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23103: LD_ADDR_VAR 0 7
23107: PUSH
23108: LD_VAR 0 3
23112: PUSH
23113: LD_VAR 0 1
23117: ARRAY
23118: PUSH
23119: LD_INT 4
23121: ARRAY
23122: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23123: LD_ADDR_VAR 0 9
23127: PUSH
23128: LD_VAR 0 6
23132: PPUSH
23133: LD_VAR 0 7
23137: PPUSH
23138: LD_INT 16
23140: PPUSH
23141: CALL 70697 0 3
23145: ST_TO_ADDR
// if not cratesNearbyPoint then
23146: LD_VAR 0 9
23150: NOT
23151: IFFALSE 23157
// exit ;
23153: POP
23154: POP
23155: GO 23622
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23157: LD_ADDR_VAR 0 4
23161: PUSH
23162: LD_INT 22
23164: PUSH
23165: LD_VAR 0 5
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 3
23176: PUSH
23177: LD_INT 60
23179: PUSH
23180: EMPTY
23181: LIST
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 91
23189: PUSH
23190: LD_VAR 0 8
23194: PUSH
23195: LD_INT 6
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 2
23205: PUSH
23206: LD_INT 25
23208: PUSH
23209: LD_INT 2
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 25
23218: PUSH
23219: LD_INT 16
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: LIST
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: PPUSH
23237: CALL_OW 69
23241: PUSH
23242: LD_VAR 0 8
23246: PPUSH
23247: CALL_OW 313
23251: PPUSH
23252: LD_INT 3
23254: PUSH
23255: LD_INT 60
23257: PUSH
23258: EMPTY
23259: LIST
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 2
23267: PUSH
23268: LD_INT 25
23270: PUSH
23271: LD_INT 2
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 25
23280: PUSH
23281: LD_INT 16
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: LIST
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PPUSH
23297: CALL_OW 72
23301: UNION
23302: ST_TO_ADDR
// if tmp then
23303: LD_VAR 0 4
23307: IFFALSE 23387
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23309: LD_ADDR_VAR 0 4
23313: PUSH
23314: LD_VAR 0 4
23318: PPUSH
23319: LD_INT 3
23321: PPUSH
23322: CALL 68504 0 2
23326: ST_TO_ADDR
// for j in tmp do
23327: LD_ADDR_VAR 0 2
23331: PUSH
23332: LD_VAR 0 4
23336: PUSH
23337: FOR_IN
23338: IFFALSE 23381
// begin if IsInUnit ( j ) then
23340: LD_VAR 0 2
23344: PPUSH
23345: CALL_OW 310
23349: IFFALSE 23360
// ComExit ( j ) ;
23351: LD_VAR 0 2
23355: PPUSH
23356: CALL 68587 0 1
// AddComCollect ( j , x , y ) ;
23360: LD_VAR 0 2
23364: PPUSH
23365: LD_VAR 0 6
23369: PPUSH
23370: LD_VAR 0 7
23374: PPUSH
23375: CALL_OW 177
// end ;
23379: GO 23337
23381: POP
23382: POP
// exit ;
23383: POP
23384: POP
23385: GO 23622
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23387: LD_ADDR_VAR 0 4
23391: PUSH
23392: LD_INT 22
23394: PUSH
23395: LD_VAR 0 5
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 91
23406: PUSH
23407: LD_VAR 0 8
23411: PUSH
23412: LD_INT 8
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 2
23422: PUSH
23423: LD_INT 34
23425: PUSH
23426: LD_INT 12
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 34
23435: PUSH
23436: LD_INT 51
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 34
23445: PUSH
23446: LD_INT 32
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 34
23455: PUSH
23456: LD_INT 89
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: LIST
23474: PPUSH
23475: CALL_OW 69
23479: ST_TO_ADDR
// if tmp then
23480: LD_VAR 0 4
23484: IFFALSE 23618
// begin for j in tmp do
23486: LD_ADDR_VAR 0 2
23490: PUSH
23491: LD_VAR 0 4
23495: PUSH
23496: FOR_IN
23497: IFFALSE 23616
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23499: LD_VAR 0 2
23503: PPUSH
23504: CALL_OW 262
23508: PUSH
23509: LD_INT 3
23511: EQUAL
23512: IFTRUE 23529
23514: PUSH
23515: LD_VAR 0 2
23519: PPUSH
23520: CALL_OW 261
23524: PUSH
23525: LD_INT 20
23527: GREATER
23528: OR
23529: IFFALSE 23543
23531: PUSH
23532: LD_VAR 0 2
23536: PPUSH
23537: CALL_OW 314
23541: NOT
23542: AND
23543: IFFALSE 23573
23545: PUSH
23546: LD_VAR 0 2
23550: PPUSH
23551: CALL_OW 263
23555: PUSH
23556: LD_INT 1
23558: NONEQUAL
23559: IFTRUE 23572
23561: PUSH
23562: LD_VAR 0 2
23566: PPUSH
23567: CALL_OW 311
23571: OR
23572: AND
23573: IFFALSE 23614
// begin ComCollect ( j , x , y ) ;
23575: LD_VAR 0 2
23579: PPUSH
23580: LD_VAR 0 6
23584: PPUSH
23585: LD_VAR 0 7
23589: PPUSH
23590: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23594: LD_VAR 0 2
23598: PPUSH
23599: LD_VAR 0 8
23603: PPUSH
23604: CALL_OW 172
// exit ;
23608: POP
23609: POP
23610: POP
23611: POP
23612: GO 23622
// end ;
23614: GO 23496
23616: POP
23617: POP
// end ; end ;
23618: GO 22983
23620: POP
23621: POP
// end ; end_of_file
23622: PPOPN 9
23624: END
// export function SOS_UnitDestroyed ( un ) ; begin
23625: LD_INT 0
23627: PPUSH
// ComRadiation ( un ) ;
23628: LD_VAR 0 1
23632: PPUSH
23633: CALL 24795 0 1
// end ;
23637: LD_VAR 0 2
23641: RET
// export function SOS_UnitKamikazed ( un ) ; begin
23642: LD_INT 0
23644: PPUSH
// ComRadiation ( un ) ;
23645: LD_VAR 0 1
23649: PPUSH
23650: CALL 24795 0 1
// end ;
23654: LD_VAR 0 2
23658: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23659: LD_INT 0
23661: PPUSH
// end ;
23662: LD_VAR 0 4
23666: RET
// export function SOS_Command ( cmd ) ; begin
23667: LD_INT 0
23669: PPUSH
// end ;
23670: LD_VAR 0 2
23674: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23675: LD_INT 0
23677: PPUSH
// end ;
23678: LD_VAR 0 6
23682: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
23683: LD_INT 0
23685: PPUSH
23686: PPUSH
23687: PPUSH
23688: PPUSH
23689: PPUSH
// if not vehicle or not factory then
23690: LD_VAR 0 1
23694: NOT
23695: IFTRUE 23704
23697: PUSH
23698: LD_VAR 0 2
23702: NOT
23703: OR
23704: IFFALSE 23708
// exit ;
23706: GO 24370
// weapon := GetWeapon ( vehicle ) ;
23708: LD_ADDR_VAR 0 7
23712: PUSH
23713: LD_VAR 0 1
23717: PPUSH
23718: CALL_OW 264
23722: ST_TO_ADDR
// if weapon = ar_miner then
23723: LD_VAR 0 7
23727: PUSH
23728: LD_INT 81
23730: EQUAL
23731: IFFALSE 23788
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
23733: LD_ADDR_EXP 94
23737: PUSH
23738: LD_EXP 94
23742: PPUSH
23743: LD_EXP 94
23747: PUSH
23748: LD_INT 1
23750: PLUS
23751: PPUSH
23752: LD_VAR 0 1
23756: PPUSH
23757: CALL_OW 1
23761: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23762: LD_ADDR_EXP 95
23766: PUSH
23767: LD_EXP 95
23771: PPUSH
23772: LD_EXP 95
23776: PUSH
23777: LD_INT 1
23779: PLUS
23780: PPUSH
23781: EMPTY
23782: PPUSH
23783: CALL_OW 1
23787: ST_TO_ADDR
// end ; if not factoryWaypoints then
23788: LD_EXP 83
23792: NOT
23793: IFFALSE 23797
// exit ;
23795: GO 24370
// for i := 1 to Count ( factoryWaypoints ) do
23797: LD_ADDR_VAR 0 4
23801: PUSH
23802: DOUBLE
23803: LD_INT 1
23805: DEC
23806: ST_TO_ADDR
23807: LD_EXP 83
23811: PPUSH
23812: CALL 32223 0 1
23816: PUSH
23817: FOR_TO
23818: IFFALSE 24368
// if factoryWaypoints [ i ] [ 2 ] = factory then
23820: LD_EXP 83
23824: PUSH
23825: LD_VAR 0 4
23829: ARRAY
23830: PUSH
23831: LD_INT 2
23833: ARRAY
23834: PUSH
23835: LD_VAR 0 2
23839: EQUAL
23840: IFFALSE 24366
// begin if GetControl ( vehicle ) = control_manual then
23842: LD_VAR 0 1
23846: PPUSH
23847: CALL_OW 263
23851: PUSH
23852: LD_INT 1
23854: EQUAL
23855: IFFALSE 24219
// begin driver := IsDrivenBy ( vehicle ) ;
23857: LD_ADDR_VAR 0 5
23861: PUSH
23862: LD_VAR 0 1
23866: PPUSH
23867: CALL_OW 311
23871: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
23872: LD_VAR 0 5
23876: PUSH
23877: LD_EXP 84
23881: IN
23882: IFTRUE 23896
23884: PUSH
23885: LD_VAR 0 1
23889: PUSH
23890: LD_EXP 84
23894: IN
23895: OR
23896: IFFALSE 23902
// exit ;
23898: POP
23899: POP
23900: GO 24370
// if not HasTask ( driver ) then
23902: LD_VAR 0 5
23906: PPUSH
23907: CALL_OW 314
23911: NOT
23912: IFFALSE 24217
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
23914: LD_ADDR_EXP 84
23918: PUSH
23919: LD_EXP 84
23923: PPUSH
23924: LD_VAR 0 5
23928: PPUSH
23929: CALL 68189 0 2
23933: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
23934: LD_ADDR_EXP 84
23938: PUSH
23939: LD_EXP 84
23943: PPUSH
23944: LD_VAR 0 1
23948: PPUSH
23949: CALL 68189 0 2
23953: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23954: LD_ADDR_VAR 0 6
23958: PUSH
23959: LD_EXP 83
23963: PUSH
23964: LD_VAR 0 4
23968: ARRAY
23969: PUSH
23970: LD_INT 3
23972: ARRAY
23973: PPUSH
23974: LD_EXP 83
23978: PUSH
23979: LD_VAR 0 4
23983: ARRAY
23984: PUSH
23985: LD_INT 4
23987: ARRAY
23988: PPUSH
23989: CALL_OW 428
23993: ST_TO_ADDR
// if hex then
23994: LD_VAR 0 6
23998: IFFALSE 24016
// ComMoveUnit ( driver , hex ) else
24000: LD_VAR 0 5
24004: PPUSH
24005: LD_VAR 0 6
24009: PPUSH
24010: CALL_OW 112
24014: GO 24100
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
24016: LD_VAR 0 1
24020: PPUSH
24021: LD_EXP 83
24025: PUSH
24026: LD_VAR 0 4
24030: ARRAY
24031: PUSH
24032: LD_INT 3
24034: ARRAY
24035: PPUSH
24036: LD_EXP 83
24040: PUSH
24041: LD_VAR 0 4
24045: ARRAY
24046: PUSH
24047: LD_INT 4
24049: ARRAY
24050: PPUSH
24051: CALL_OW 297
24055: PUSH
24056: LD_INT 0
24058: GREATER
24059: IFFALSE 24100
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24061: LD_VAR 0 5
24065: PPUSH
24066: LD_EXP 83
24070: PUSH
24071: LD_VAR 0 4
24075: ARRAY
24076: PUSH
24077: LD_INT 3
24079: ARRAY
24080: PPUSH
24081: LD_EXP 83
24085: PUSH
24086: LD_VAR 0 4
24090: ARRAY
24091: PUSH
24092: LD_INT 4
24094: ARRAY
24095: PPUSH
24096: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24100: LD_VAR 0 5
24104: PPUSH
24105: CALL_OW 181
// if Multiplayer then
24109: LD_OWVAR 4
24113: IFFALSE 24162
// begin repeat wait ( 10 ) ;
24115: LD_INT 10
24117: PPUSH
24118: CALL_OW 67
// until not IsInUnit ( driver ) ;
24122: LD_VAR 0 5
24126: PPUSH
24127: CALL_OW 310
24131: NOT
24132: IFFALSE 24115
// if not HasTask ( driver ) then
24134: LD_VAR 0 5
24138: PPUSH
24139: CALL_OW 314
24143: NOT
24144: IFFALSE 24160
// ComEnterUnit ( driver , factory ) ;
24146: LD_VAR 0 5
24150: PPUSH
24151: LD_VAR 0 2
24155: PPUSH
24156: CALL_OW 120
// end else
24160: GO 24176
// AddComEnterUnit ( driver , factory ) ;
24162: LD_VAR 0 5
24166: PPUSH
24167: LD_VAR 0 2
24171: PPUSH
24172: CALL_OW 180
// wait ( 0 0$1 ) ;
24176: LD_INT 35
24178: PPUSH
24179: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
24183: LD_ADDR_EXP 84
24187: PUSH
24188: LD_EXP 84
24192: PUSH
24193: LD_VAR 0 5
24197: DIFF
24198: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
24199: LD_ADDR_EXP 84
24203: PUSH
24204: LD_EXP 84
24208: PUSH
24209: LD_VAR 0 1
24213: DIFF
24214: ST_TO_ADDR
// break ;
24215: GO 24368
// end ; end else
24217: GO 24366
// if GetControl ( vehicle ) = control_remote then
24219: LD_VAR 0 1
24223: PPUSH
24224: CALL_OW 263
24228: PUSH
24229: LD_INT 2
24231: EQUAL
24232: IFFALSE 24318
// begin wait ( 0 0$2 ) ;
24234: LD_INT 70
24236: PPUSH
24237: CALL_OW 67
// repeat wait ( 10 ) ;
24241: LD_INT 10
24243: PPUSH
24244: CALL_OW 67
// Connect ( vehicle ) ;
24248: LD_VAR 0 1
24252: PPUSH
24253: CALL 38501 0 1
// until IsControledBy ( vehicle ) ;
24257: LD_VAR 0 1
24261: PPUSH
24262: CALL_OW 312
24266: IFFALSE 24241
// wait ( 10 ) ;
24268: LD_INT 10
24270: PPUSH
24271: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24275: LD_VAR 0 1
24279: PPUSH
24280: LD_EXP 83
24284: PUSH
24285: LD_VAR 0 4
24289: ARRAY
24290: PUSH
24291: LD_INT 3
24293: ARRAY
24294: PPUSH
24295: LD_EXP 83
24299: PUSH
24300: LD_VAR 0 4
24304: ARRAY
24305: PUSH
24306: LD_INT 4
24308: ARRAY
24309: PPUSH
24310: CALL_OW 111
// break ;
24314: GO 24368
// end else
24316: GO 24366
// begin wait ( 0 0$3 ) ;
24318: LD_INT 105
24320: PPUSH
24321: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24325: LD_VAR 0 1
24329: PPUSH
24330: LD_EXP 83
24334: PUSH
24335: LD_VAR 0 4
24339: ARRAY
24340: PUSH
24341: LD_INT 3
24343: ARRAY
24344: PPUSH
24345: LD_EXP 83
24349: PUSH
24350: LD_VAR 0 4
24354: ARRAY
24355: PUSH
24356: LD_INT 4
24358: ARRAY
24359: PPUSH
24360: CALL_OW 111
// break ;
24364: GO 24368
// end ; end ;
24366: GO 23817
24368: POP
24369: POP
// end ;
24370: LD_VAR 0 3
24374: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24375: LD_INT 0
24377: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24378: LD_VAR 0 1
24382: PUSH
24383: LD_INT 250
24385: EQUAL
24386: IFFALSE 24403
24388: PUSH
24389: LD_VAR 0 2
24393: PPUSH
24394: CALL_OW 264
24398: PUSH
24399: LD_INT 81
24401: EQUAL
24402: AND
24403: IFFALSE 24424
// MinerPlaceMine ( unit , x , y ) ;
24405: LD_VAR 0 2
24409: PPUSH
24410: LD_VAR 0 4
24414: PPUSH
24415: LD_VAR 0 5
24419: PPUSH
24420: CALL 27705 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24424: LD_VAR 0 1
24428: PUSH
24429: LD_INT 251
24431: EQUAL
24432: IFFALSE 24449
24434: PUSH
24435: LD_VAR 0 2
24439: PPUSH
24440: CALL_OW 264
24444: PUSH
24445: LD_INT 81
24447: EQUAL
24448: AND
24449: IFFALSE 24470
// MinerDetonateMine ( unit , x , y ) ;
24451: LD_VAR 0 2
24455: PPUSH
24456: LD_VAR 0 4
24460: PPUSH
24461: LD_VAR 0 5
24465: PPUSH
24466: CALL 28112 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24470: LD_VAR 0 1
24474: PUSH
24475: LD_INT 252
24477: EQUAL
24478: IFFALSE 24495
24480: PUSH
24481: LD_VAR 0 2
24485: PPUSH
24486: CALL_OW 264
24490: PUSH
24491: LD_INT 81
24493: EQUAL
24494: AND
24495: IFFALSE 24516
// MinerCreateMinefield ( unit , x , y ) ;
24497: LD_VAR 0 2
24501: PPUSH
24502: LD_VAR 0 4
24506: PPUSH
24507: LD_VAR 0 5
24511: PPUSH
24512: CALL 28344 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24516: LD_VAR 0 1
24520: PUSH
24521: LD_INT 253
24523: EQUAL
24524: IFFALSE 24541
24526: PUSH
24527: LD_VAR 0 2
24531: PPUSH
24532: CALL_OW 257
24536: PUSH
24537: LD_INT 5
24539: EQUAL
24540: AND
24541: IFFALSE 24562
// ComBinocular ( unit , x , y ) ;
24543: LD_VAR 0 2
24547: PPUSH
24548: LD_VAR 0 4
24552: PPUSH
24553: LD_VAR 0 5
24557: PPUSH
24558: CALL 28719 0 3
// if selectedUnit then
24562: LD_VAR 0 3
24566: IFFALSE 24626
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24568: LD_VAR 0 1
24572: PUSH
24573: LD_INT 254
24575: EQUAL
24576: IFFALSE 24593
24578: PUSH
24579: LD_VAR 0 2
24583: PPUSH
24584: CALL_OW 264
24588: PUSH
24589: LD_INT 99
24591: EQUAL
24592: AND
24593: IFFALSE 24610
24595: PUSH
24596: LD_VAR 0 3
24600: PPUSH
24601: CALL_OW 263
24605: PUSH
24606: LD_INT 3
24608: EQUAL
24609: AND
24610: IFFALSE 24626
// HackDestroyVehicle ( unit , selectedUnit ) ;
24612: LD_VAR 0 2
24616: PPUSH
24617: LD_VAR 0 3
24621: PPUSH
24622: CALL 26916 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24626: LD_VAR 0 1
24630: PUSH
24631: LD_INT 255
24633: EQUAL
24634: IFFALSE 24658
24636: PUSH
24637: LD_VAR 0 2
24641: PPUSH
24642: CALL_OW 264
24646: PUSH
24647: LD_INT 14
24649: PUSH
24650: LD_INT 53
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: IN
24657: AND
24658: IFFALSE 24676
24660: PUSH
24661: LD_VAR 0 4
24665: PPUSH
24666: LD_VAR 0 5
24670: PPUSH
24671: CALL_OW 488
24675: AND
24676: IFFALSE 24700
// CutTreeXYR ( unit , x , y , 12 ) ;
24678: LD_VAR 0 2
24682: PPUSH
24683: LD_VAR 0 4
24687: PPUSH
24688: LD_VAR 0 5
24692: PPUSH
24693: LD_INT 12
24695: PPUSH
24696: CALL 24891 0 4
// if cmd = 256 then
24700: LD_VAR 0 1
24704: PUSH
24705: LD_INT 256
24707: EQUAL
24708: IFFALSE 24729
// SetFactoryWaypoint ( unit , x , y ) ;
24710: LD_VAR 0 2
24714: PPUSH
24715: LD_VAR 0 4
24719: PPUSH
24720: LD_VAR 0 5
24724: PPUSH
24725: CALL 22170 0 3
// if cmd = 257 then
24729: LD_VAR 0 1
24733: PUSH
24734: LD_INT 257
24736: EQUAL
24737: IFFALSE 24758
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24739: LD_VAR 0 2
24743: PPUSH
24744: LD_VAR 0 4
24748: PPUSH
24749: LD_VAR 0 5
24753: PPUSH
24754: CALL 22666 0 3
// if cmd = 258 then
24758: LD_VAR 0 1
24762: PUSH
24763: LD_INT 258
24765: EQUAL
24766: IFFALSE 24790
// BurnTreeXYR ( unit , x , y , 8 ) ;
24768: LD_VAR 0 2
24772: PPUSH
24773: LD_VAR 0 4
24777: PPUSH
24778: LD_VAR 0 5
24782: PPUSH
24783: LD_INT 8
24785: PPUSH
24786: CALL 25291 0 4
// end ;
24790: LD_VAR 0 6
24794: RET
// export function ComRadiation ( un ) ; var eff ; begin
24795: LD_INT 0
24797: PPUSH
24798: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
24799: LD_VAR 0 1
24803: PPUSH
24804: CALL_OW 264
24808: PUSH
24809: LD_INT 91
24811: NONEQUAL
24812: IFFALSE 24816
// exit ;
24814: GO 24886
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24816: LD_INT 68
24818: PPUSH
24819: LD_VAR 0 1
24823: PPUSH
24824: CALL_OW 255
24828: PPUSH
24829: CALL_OW 321
24833: PUSH
24834: LD_INT 2
24836: EQUAL
24837: IFFALSE 24849
// eff := 50 else
24839: LD_ADDR_VAR 0 3
24843: PUSH
24844: LD_INT 50
24846: ST_TO_ADDR
24847: GO 24857
// eff := 25 ;
24849: LD_ADDR_VAR 0 3
24853: PUSH
24854: LD_INT 25
24856: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24857: LD_VAR 0 1
24861: PPUSH
24862: CALL_OW 250
24866: PPUSH
24867: LD_VAR 0 1
24871: PPUSH
24872: CALL_OW 251
24876: PPUSH
24877: LD_VAR 0 3
24881: PPUSH
24882: CALL_OW 495
// end ;
24886: LD_VAR 0 2
24890: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24891: LD_INT 0
24893: PPUSH
24894: PPUSH
24895: PPUSH
24896: PPUSH
24897: PPUSH
24898: PPUSH
24899: PPUSH
24900: PPUSH
24901: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
24902: LD_VAR 0 1
24906: PPUSH
24907: CALL_OW 302
24911: NOT
24912: IFTRUE 24931
24914: PUSH
24915: LD_VAR 0 2
24919: PPUSH
24920: LD_VAR 0 3
24924: PPUSH
24925: CALL_OW 488
24929: NOT
24930: OR
24931: IFTRUE 24940
24933: PUSH
24934: LD_VAR 0 4
24938: NOT
24939: OR
24940: IFFALSE 24944
// exit ;
24942: GO 25286
// list := [ ] ;
24944: LD_ADDR_VAR 0 13
24948: PUSH
24949: EMPTY
24950: ST_TO_ADDR
// if x - r < 0 then
24951: LD_VAR 0 2
24955: PUSH
24956: LD_VAR 0 4
24960: MINUS
24961: PUSH
24962: LD_INT 0
24964: LESS
24965: IFFALSE 24977
// min_x := 0 else
24967: LD_ADDR_VAR 0 7
24971: PUSH
24972: LD_INT 0
24974: ST_TO_ADDR
24975: GO 24993
// min_x := x - r ;
24977: LD_ADDR_VAR 0 7
24981: PUSH
24982: LD_VAR 0 2
24986: PUSH
24987: LD_VAR 0 4
24991: MINUS
24992: ST_TO_ADDR
// if y - r < 0 then
24993: LD_VAR 0 3
24997: PUSH
24998: LD_VAR 0 4
25002: MINUS
25003: PUSH
25004: LD_INT 0
25006: LESS
25007: IFFALSE 25019
// min_y := 0 else
25009: LD_ADDR_VAR 0 8
25013: PUSH
25014: LD_INT 0
25016: ST_TO_ADDR
25017: GO 25035
// min_y := y - r ;
25019: LD_ADDR_VAR 0 8
25023: PUSH
25024: LD_VAR 0 3
25028: PUSH
25029: LD_VAR 0 4
25033: MINUS
25034: ST_TO_ADDR
// max_x := x + r ;
25035: LD_ADDR_VAR 0 9
25039: PUSH
25040: LD_VAR 0 2
25044: PUSH
25045: LD_VAR 0 4
25049: PLUS
25050: ST_TO_ADDR
// max_y := y + r ;
25051: LD_ADDR_VAR 0 10
25055: PUSH
25056: LD_VAR 0 3
25060: PUSH
25061: LD_VAR 0 4
25065: PLUS
25066: ST_TO_ADDR
// for _x = min_x to max_x do
25067: LD_ADDR_VAR 0 11
25071: PUSH
25072: DOUBLE
25073: LD_VAR 0 7
25077: DEC
25078: ST_TO_ADDR
25079: LD_VAR 0 9
25083: PUSH
25084: FOR_TO
25085: IFFALSE 25204
// for _y = min_y to max_y do
25087: LD_ADDR_VAR 0 12
25091: PUSH
25092: DOUBLE
25093: LD_VAR 0 8
25097: DEC
25098: ST_TO_ADDR
25099: LD_VAR 0 10
25103: PUSH
25104: FOR_TO
25105: IFFALSE 25200
// begin if not ValidHex ( _x , _y ) then
25107: LD_VAR 0 11
25111: PPUSH
25112: LD_VAR 0 12
25116: PPUSH
25117: CALL_OW 488
25121: NOT
25122: IFFALSE 25126
// continue ;
25124: GO 25104
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25126: LD_VAR 0 11
25130: PPUSH
25131: LD_VAR 0 12
25135: PPUSH
25136: CALL_OW 351
25140: IFFALSE 25158
25142: PUSH
25143: LD_VAR 0 11
25147: PPUSH
25148: LD_VAR 0 12
25152: PPUSH
25153: CALL_OW 554
25157: AND
25158: IFFALSE 25198
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25160: LD_ADDR_VAR 0 13
25164: PUSH
25165: LD_VAR 0 13
25169: PPUSH
25170: LD_VAR 0 13
25174: PUSH
25175: LD_INT 1
25177: PLUS
25178: PPUSH
25179: LD_VAR 0 11
25183: PUSH
25184: LD_VAR 0 12
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PPUSH
25193: CALL_OW 2
25197: ST_TO_ADDR
// end ;
25198: GO 25104
25200: POP
25201: POP
25202: GO 25084
25204: POP
25205: POP
// if not list then
25206: LD_VAR 0 13
25210: NOT
25211: IFFALSE 25215
// exit ;
25213: GO 25286
// for i in list do
25215: LD_ADDR_VAR 0 6
25219: PUSH
25220: LD_VAR 0 13
25224: PUSH
25225: FOR_IN
25226: IFFALSE 25284
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25228: LD_VAR 0 1
25232: PPUSH
25233: LD_STRING M
25235: PUSH
25236: LD_VAR 0 6
25240: PUSH
25241: LD_INT 1
25243: ARRAY
25244: PUSH
25245: LD_VAR 0 6
25249: PUSH
25250: LD_INT 2
25252: ARRAY
25253: PUSH
25254: LD_INT 0
25256: PUSH
25257: LD_INT 0
25259: PUSH
25260: LD_INT 0
25262: PUSH
25263: LD_INT 0
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: PUSH
25275: EMPTY
25276: LIST
25277: PPUSH
25278: CALL_OW 447
25282: GO 25225
25284: POP
25285: POP
// end ;
25286: LD_VAR 0 5
25290: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
25291: LD_INT 0
25293: PPUSH
25294: PPUSH
25295: PPUSH
25296: PPUSH
25297: PPUSH
25298: PPUSH
25299: PPUSH
25300: PPUSH
25301: PPUSH
25302: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
25303: LD_VAR 0 1
25307: PPUSH
25308: CALL_OW 302
25312: NOT
25313: IFTRUE 25332
25315: PUSH
25316: LD_VAR 0 2
25320: PPUSH
25321: LD_VAR 0 3
25325: PPUSH
25326: CALL_OW 488
25330: NOT
25331: OR
25332: IFTRUE 25341
25334: PUSH
25335: LD_VAR 0 4
25339: NOT
25340: OR
25341: IFFALSE 25345
// exit ;
25343: GO 25862
// list := [ ] ;
25345: LD_ADDR_VAR 0 13
25349: PUSH
25350: EMPTY
25351: ST_TO_ADDR
// if x - r < 0 then
25352: LD_VAR 0 2
25356: PUSH
25357: LD_VAR 0 4
25361: MINUS
25362: PUSH
25363: LD_INT 0
25365: LESS
25366: IFFALSE 25378
// min_x := 0 else
25368: LD_ADDR_VAR 0 7
25372: PUSH
25373: LD_INT 0
25375: ST_TO_ADDR
25376: GO 25394
// min_x := x - r ;
25378: LD_ADDR_VAR 0 7
25382: PUSH
25383: LD_VAR 0 2
25387: PUSH
25388: LD_VAR 0 4
25392: MINUS
25393: ST_TO_ADDR
// if y - r < 0 then
25394: LD_VAR 0 3
25398: PUSH
25399: LD_VAR 0 4
25403: MINUS
25404: PUSH
25405: LD_INT 0
25407: LESS
25408: IFFALSE 25420
// min_y := 0 else
25410: LD_ADDR_VAR 0 8
25414: PUSH
25415: LD_INT 0
25417: ST_TO_ADDR
25418: GO 25436
// min_y := y - r ;
25420: LD_ADDR_VAR 0 8
25424: PUSH
25425: LD_VAR 0 3
25429: PUSH
25430: LD_VAR 0 4
25434: MINUS
25435: ST_TO_ADDR
// max_x := x + r ;
25436: LD_ADDR_VAR 0 9
25440: PUSH
25441: LD_VAR 0 2
25445: PUSH
25446: LD_VAR 0 4
25450: PLUS
25451: ST_TO_ADDR
// max_y := y + r ;
25452: LD_ADDR_VAR 0 10
25456: PUSH
25457: LD_VAR 0 3
25461: PUSH
25462: LD_VAR 0 4
25466: PLUS
25467: ST_TO_ADDR
// for _x = min_x to max_x do
25468: LD_ADDR_VAR 0 11
25472: PUSH
25473: DOUBLE
25474: LD_VAR 0 7
25478: DEC
25479: ST_TO_ADDR
25480: LD_VAR 0 9
25484: PUSH
25485: FOR_TO
25486: IFFALSE 25605
// for _y = min_y to max_y do
25488: LD_ADDR_VAR 0 12
25492: PUSH
25493: DOUBLE
25494: LD_VAR 0 8
25498: DEC
25499: ST_TO_ADDR
25500: LD_VAR 0 10
25504: PUSH
25505: FOR_TO
25506: IFFALSE 25601
// begin if not ValidHex ( _x , _y ) then
25508: LD_VAR 0 11
25512: PPUSH
25513: LD_VAR 0 12
25517: PPUSH
25518: CALL_OW 488
25522: NOT
25523: IFFALSE 25527
// continue ;
25525: GO 25505
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25527: LD_VAR 0 11
25531: PPUSH
25532: LD_VAR 0 12
25536: PPUSH
25537: CALL_OW 351
25541: IFFALSE 25559
25543: PUSH
25544: LD_VAR 0 11
25548: PPUSH
25549: LD_VAR 0 12
25553: PPUSH
25554: CALL_OW 554
25558: AND
25559: IFFALSE 25599
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25561: LD_ADDR_VAR 0 13
25565: PUSH
25566: LD_VAR 0 13
25570: PPUSH
25571: LD_VAR 0 13
25575: PUSH
25576: LD_INT 1
25578: PLUS
25579: PPUSH
25580: LD_VAR 0 11
25584: PUSH
25585: LD_VAR 0 12
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PPUSH
25594: CALL_OW 2
25598: ST_TO_ADDR
// end ;
25599: GO 25505
25601: POP
25602: POP
25603: GO 25485
25605: POP
25606: POP
// if not list then
25607: LD_VAR 0 13
25611: NOT
25612: IFFALSE 25616
// exit ;
25614: GO 25862
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
25616: LD_ADDR_VAR 0 13
25620: PUSH
25621: LD_VAR 0 1
25625: PPUSH
25626: LD_VAR 0 13
25630: PPUSH
25631: LD_INT 1
25633: PPUSH
25634: LD_INT 1
25636: PPUSH
25637: CALL 35629 0 4
25641: ST_TO_ADDR
// ComStop ( flame ) ;
25642: LD_VAR 0 1
25646: PPUSH
25647: CALL_OW 141
// for i in list do
25651: LD_ADDR_VAR 0 6
25655: PUSH
25656: LD_VAR 0 13
25660: PUSH
25661: FOR_IN
25662: IFFALSE 25693
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
25664: LD_VAR 0 1
25668: PPUSH
25669: LD_VAR 0 6
25673: PUSH
25674: LD_INT 1
25676: ARRAY
25677: PPUSH
25678: LD_VAR 0 6
25682: PUSH
25683: LD_INT 2
25685: ARRAY
25686: PPUSH
25687: CALL_OW 176
25691: GO 25661
25693: POP
25694: POP
// repeat wait ( 0 0$1 ) ;
25695: LD_INT 35
25697: PPUSH
25698: CALL_OW 67
// task := GetTaskList ( flame ) ;
25702: LD_ADDR_VAR 0 14
25706: PUSH
25707: LD_VAR 0 1
25711: PPUSH
25712: CALL_OW 437
25716: ST_TO_ADDR
// if not task then
25717: LD_VAR 0 14
25721: NOT
25722: IFFALSE 25726
// exit ;
25724: GO 25862
// if task [ 1 ] [ 1 ] <> | then
25726: LD_VAR 0 14
25730: PUSH
25731: LD_INT 1
25733: ARRAY
25734: PUSH
25735: LD_INT 1
25737: ARRAY
25738: PUSH
25739: LD_STRING |
25741: NONEQUAL
25742: IFFALSE 25746
// exit ;
25744: GO 25862
// _x := task [ 1 ] [ 2 ] ;
25746: LD_ADDR_VAR 0 11
25750: PUSH
25751: LD_VAR 0 14
25755: PUSH
25756: LD_INT 1
25758: ARRAY
25759: PUSH
25760: LD_INT 2
25762: ARRAY
25763: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
25764: LD_ADDR_VAR 0 12
25768: PUSH
25769: LD_VAR 0 14
25773: PUSH
25774: LD_INT 1
25776: ARRAY
25777: PUSH
25778: LD_INT 3
25780: ARRAY
25781: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
25782: LD_VAR 0 11
25786: PPUSH
25787: LD_VAR 0 12
25791: PPUSH
25792: CALL_OW 351
25796: NOT
25797: IFTRUE 25816
25799: PUSH
25800: LD_VAR 0 11
25804: PPUSH
25805: LD_VAR 0 12
25809: PPUSH
25810: CALL_OW 554
25814: NOT
25815: OR
25816: IFFALSE 25850
// begin task := Delete ( task , 1 ) ;
25818: LD_ADDR_VAR 0 14
25822: PUSH
25823: LD_VAR 0 14
25827: PPUSH
25828: LD_INT 1
25830: PPUSH
25831: CALL_OW 3
25835: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
25836: LD_VAR 0 1
25840: PPUSH
25841: LD_VAR 0 14
25845: PPUSH
25846: CALL_OW 446
// end ; until not HasTask ( flame ) ;
25850: LD_VAR 0 1
25854: PPUSH
25855: CALL_OW 314
25859: NOT
25860: IFFALSE 25695
// end ;
25862: LD_VAR 0 5
25866: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25867: LD_EXP 87
25871: NOT
25872: IFFALSE 25922
25874: GO 25876
25876: DISABLE
// begin initHack := true ;
25877: LD_ADDR_EXP 87
25881: PUSH
25882: LD_INT 1
25884: ST_TO_ADDR
// hackTanks := [ ] ;
25885: LD_ADDR_EXP 88
25889: PUSH
25890: EMPTY
25891: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25892: LD_ADDR_EXP 89
25896: PUSH
25897: EMPTY
25898: ST_TO_ADDR
// hackLimit := 3 ;
25899: LD_ADDR_EXP 90
25903: PUSH
25904: LD_INT 3
25906: ST_TO_ADDR
// hackDist := 12 ;
25907: LD_ADDR_EXP 91
25911: PUSH
25912: LD_INT 12
25914: ST_TO_ADDR
// hackCounter := [ ] ;
25915: LD_ADDR_EXP 92
25919: PUSH
25920: EMPTY
25921: ST_TO_ADDR
// end ;
25922: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25923: LD_EXP 87
25927: IFFALSE 25945
25929: PUSH
25930: LD_INT 34
25932: PUSH
25933: LD_INT 99
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PPUSH
25940: CALL_OW 69
25944: AND
25945: IFFALSE 26198
25947: GO 25949
25949: DISABLE
25950: LD_INT 0
25952: PPUSH
25953: PPUSH
// begin enable ;
25954: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25955: LD_ADDR_VAR 0 1
25959: PUSH
25960: LD_INT 34
25962: PUSH
25963: LD_INT 99
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PPUSH
25970: CALL_OW 69
25974: PUSH
25975: FOR_IN
25976: IFFALSE 26196
// begin if not i in hackTanks then
25978: LD_VAR 0 1
25982: PUSH
25983: LD_EXP 88
25987: IN
25988: NOT
25989: IFFALSE 26072
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25991: LD_ADDR_EXP 88
25995: PUSH
25996: LD_EXP 88
26000: PPUSH
26001: LD_EXP 88
26005: PUSH
26006: LD_INT 1
26008: PLUS
26009: PPUSH
26010: LD_VAR 0 1
26014: PPUSH
26015: CALL_OW 1
26019: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26020: LD_ADDR_EXP 89
26024: PUSH
26025: LD_EXP 89
26029: PPUSH
26030: LD_EXP 89
26034: PUSH
26035: LD_INT 1
26037: PLUS
26038: PPUSH
26039: EMPTY
26040: PPUSH
26041: CALL_OW 1
26045: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26046: LD_ADDR_EXP 92
26050: PUSH
26051: LD_EXP 92
26055: PPUSH
26056: LD_EXP 92
26060: PUSH
26061: LD_INT 1
26063: PLUS
26064: PPUSH
26065: EMPTY
26066: PPUSH
26067: CALL_OW 1
26071: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26072: LD_VAR 0 1
26076: PPUSH
26077: CALL_OW 302
26081: NOT
26082: IFFALSE 26095
// begin HackUnlinkAll ( i ) ;
26084: LD_VAR 0 1
26088: PPUSH
26089: CALL 26201 0 1
// continue ;
26093: GO 25975
// end ; HackCheckCapturedStatus ( i ) ;
26095: LD_VAR 0 1
26099: PPUSH
26100: CALL 26646 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26104: LD_ADDR_VAR 0 2
26108: PUSH
26109: LD_INT 81
26111: PUSH
26112: LD_VAR 0 1
26116: PPUSH
26117: CALL_OW 255
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 33
26128: PUSH
26129: LD_INT 3
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 91
26138: PUSH
26139: LD_VAR 0 1
26143: PUSH
26144: LD_EXP 91
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 50
26156: PUSH
26157: EMPTY
26158: LIST
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: PPUSH
26166: CALL_OW 69
26170: ST_TO_ADDR
// if not tmp then
26171: LD_VAR 0 2
26175: NOT
26176: IFFALSE 26180
// continue ;
26178: GO 25975
// HackLink ( i , tmp ) ;
26180: LD_VAR 0 1
26184: PPUSH
26185: LD_VAR 0 2
26189: PPUSH
26190: CALL 26337 0 2
// end ;
26194: GO 25975
26196: POP
26197: POP
// end ;
26198: PPOPN 2
26200: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26201: LD_INT 0
26203: PPUSH
26204: PPUSH
26205: PPUSH
// if not hack in hackTanks then
26206: LD_VAR 0 1
26210: PUSH
26211: LD_EXP 88
26215: IN
26216: NOT
26217: IFFALSE 26221
// exit ;
26219: GO 26332
// index := GetElementIndex ( hackTanks , hack ) ;
26221: LD_ADDR_VAR 0 4
26225: PUSH
26226: LD_EXP 88
26230: PPUSH
26231: LD_VAR 0 1
26235: PPUSH
26236: CALL 34924 0 2
26240: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26241: LD_EXP 89
26245: PUSH
26246: LD_VAR 0 4
26250: ARRAY
26251: IFFALSE 26332
// begin for i in hackTanksCaptured [ index ] do
26253: LD_ADDR_VAR 0 3
26257: PUSH
26258: LD_EXP 89
26262: PUSH
26263: LD_VAR 0 4
26267: ARRAY
26268: PUSH
26269: FOR_IN
26270: IFFALSE 26296
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26272: LD_VAR 0 3
26276: PUSH
26277: LD_INT 1
26279: ARRAY
26280: PPUSH
26281: LD_VAR 0 3
26285: PUSH
26286: LD_INT 2
26288: ARRAY
26289: PPUSH
26290: CALL_OW 235
26294: GO 26269
26296: POP
26297: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26298: LD_ADDR_EXP 89
26302: PUSH
26303: LD_EXP 89
26307: PPUSH
26308: LD_VAR 0 4
26312: PPUSH
26313: EMPTY
26314: PPUSH
26315: CALL_OW 1
26319: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26320: LD_VAR 0 1
26324: PPUSH
26325: LD_INT 0
26327: PPUSH
26328: CALL_OW 505
// end ; end ;
26332: LD_VAR 0 2
26336: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26337: LD_INT 0
26339: PPUSH
26340: PPUSH
26341: PPUSH
// if not hack in hackTanks or not vehicles then
26342: LD_VAR 0 1
26346: PUSH
26347: LD_EXP 88
26351: IN
26352: NOT
26353: IFTRUE 26362
26355: PUSH
26356: LD_VAR 0 2
26360: NOT
26361: OR
26362: IFFALSE 26366
// exit ;
26364: GO 26641
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26366: LD_ADDR_VAR 0 2
26370: PUSH
26371: LD_VAR 0 1
26375: PPUSH
26376: LD_VAR 0 2
26380: PPUSH
26381: LD_INT 1
26383: PPUSH
26384: LD_INT 1
26386: PPUSH
26387: CALL 35576 0 4
26391: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26392: LD_ADDR_VAR 0 5
26396: PUSH
26397: LD_EXP 88
26401: PPUSH
26402: LD_VAR 0 1
26406: PPUSH
26407: CALL 34924 0 2
26411: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26412: LD_EXP 89
26416: PUSH
26417: LD_VAR 0 5
26421: ARRAY
26422: PUSH
26423: LD_EXP 90
26427: LESS
26428: IFFALSE 26617
// begin for i := 1 to vehicles do
26430: LD_ADDR_VAR 0 4
26434: PUSH
26435: DOUBLE
26436: LD_INT 1
26438: DEC
26439: ST_TO_ADDR
26440: LD_VAR 0 2
26444: PUSH
26445: FOR_TO
26446: IFFALSE 26615
// begin if hackTanksCaptured [ index ] = hackLimit then
26448: LD_EXP 89
26452: PUSH
26453: LD_VAR 0 5
26457: ARRAY
26458: PUSH
26459: LD_EXP 90
26463: EQUAL
26464: IFFALSE 26468
// break ;
26466: GO 26615
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26468: LD_ADDR_EXP 92
26472: PUSH
26473: LD_EXP 92
26477: PPUSH
26478: LD_VAR 0 5
26482: PPUSH
26483: LD_EXP 92
26487: PUSH
26488: LD_VAR 0 5
26492: ARRAY
26493: PUSH
26494: LD_INT 1
26496: PLUS
26497: PPUSH
26498: CALL_OW 1
26502: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26503: LD_ADDR_EXP 89
26507: PUSH
26508: LD_EXP 89
26512: PPUSH
26513: LD_VAR 0 5
26517: PUSH
26518: LD_EXP 89
26522: PUSH
26523: LD_VAR 0 5
26527: ARRAY
26528: PUSH
26529: LD_INT 1
26531: PLUS
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PPUSH
26537: LD_VAR 0 2
26541: PUSH
26542: LD_VAR 0 4
26546: ARRAY
26547: PUSH
26548: LD_VAR 0 2
26552: PUSH
26553: LD_VAR 0 4
26557: ARRAY
26558: PPUSH
26559: CALL_OW 255
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PPUSH
26568: CALL 35141 0 3
26572: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26573: LD_VAR 0 2
26577: PUSH
26578: LD_VAR 0 4
26582: ARRAY
26583: PPUSH
26584: LD_VAR 0 1
26588: PPUSH
26589: CALL_OW 255
26593: PPUSH
26594: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26598: LD_VAR 0 2
26602: PUSH
26603: LD_VAR 0 4
26607: ARRAY
26608: PPUSH
26609: CALL_OW 141
// end ;
26613: GO 26445
26615: POP
26616: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26617: LD_VAR 0 1
26621: PPUSH
26622: LD_EXP 89
26626: PUSH
26627: LD_VAR 0 5
26631: ARRAY
26632: PUSH
26633: LD_INT 0
26635: PLUS
26636: PPUSH
26637: CALL_OW 505
// end ;
26641: LD_VAR 0 3
26645: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26646: LD_INT 0
26648: PPUSH
26649: PPUSH
26650: PPUSH
26651: PPUSH
// if not hack in hackTanks then
26652: LD_VAR 0 1
26656: PUSH
26657: LD_EXP 88
26661: IN
26662: NOT
26663: IFFALSE 26667
// exit ;
26665: GO 26911
// index := GetElementIndex ( hackTanks , hack ) ;
26667: LD_ADDR_VAR 0 4
26671: PUSH
26672: LD_EXP 88
26676: PPUSH
26677: LD_VAR 0 1
26681: PPUSH
26682: CALL 34924 0 2
26686: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26687: LD_ADDR_VAR 0 3
26691: PUSH
26692: DOUBLE
26693: LD_EXP 89
26697: PUSH
26698: LD_VAR 0 4
26702: ARRAY
26703: INC
26704: ST_TO_ADDR
26705: LD_INT 1
26707: PUSH
26708: FOR_DOWNTO
26709: IFFALSE 26885
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26711: LD_ADDR_VAR 0 5
26715: PUSH
26716: LD_EXP 89
26720: PUSH
26721: LD_VAR 0 4
26725: ARRAY
26726: PUSH
26727: LD_VAR 0 3
26731: ARRAY
26732: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26733: LD_VAR 0 5
26737: PUSH
26738: LD_INT 1
26740: ARRAY
26741: PPUSH
26742: CALL_OW 302
26746: NOT
26747: IFTRUE 26775
26749: PUSH
26750: LD_VAR 0 5
26754: PUSH
26755: LD_INT 1
26757: ARRAY
26758: PPUSH
26759: CALL_OW 255
26763: PUSH
26764: LD_VAR 0 1
26768: PPUSH
26769: CALL_OW 255
26773: NONEQUAL
26774: OR
26775: IFFALSE 26883
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26777: LD_VAR 0 5
26781: PUSH
26782: LD_INT 1
26784: ARRAY
26785: PPUSH
26786: CALL_OW 305
26790: IFFALSE 26818
26792: PUSH
26793: LD_VAR 0 5
26797: PUSH
26798: LD_INT 1
26800: ARRAY
26801: PPUSH
26802: CALL_OW 255
26806: PUSH
26807: LD_VAR 0 1
26811: PPUSH
26812: CALL_OW 255
26816: EQUAL
26817: AND
26818: IFFALSE 26842
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26820: LD_VAR 0 5
26824: PUSH
26825: LD_INT 1
26827: ARRAY
26828: PPUSH
26829: LD_VAR 0 5
26833: PUSH
26834: LD_INT 2
26836: ARRAY
26837: PPUSH
26838: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26842: LD_ADDR_EXP 89
26846: PUSH
26847: LD_EXP 89
26851: PPUSH
26852: LD_VAR 0 4
26856: PPUSH
26857: LD_EXP 89
26861: PUSH
26862: LD_VAR 0 4
26866: ARRAY
26867: PPUSH
26868: LD_VAR 0 3
26872: PPUSH
26873: CALL_OW 3
26877: PPUSH
26878: CALL_OW 1
26882: ST_TO_ADDR
// end ; end ;
26883: GO 26708
26885: POP
26886: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26887: LD_VAR 0 1
26891: PPUSH
26892: LD_EXP 89
26896: PUSH
26897: LD_VAR 0 4
26901: ARRAY
26902: PUSH
26903: LD_INT 0
26905: PLUS
26906: PPUSH
26907: CALL_OW 505
// end ;
26911: LD_VAR 0 2
26915: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26916: LD_INT 0
26918: PPUSH
26919: PPUSH
26920: PPUSH
26921: PPUSH
// if not hack in hackTanks then
26922: LD_VAR 0 1
26926: PUSH
26927: LD_EXP 88
26931: IN
26932: NOT
26933: IFFALSE 26937
// exit ;
26935: GO 27022
// index := GetElementIndex ( hackTanks , hack ) ;
26937: LD_ADDR_VAR 0 5
26941: PUSH
26942: LD_EXP 88
26946: PPUSH
26947: LD_VAR 0 1
26951: PPUSH
26952: CALL 34924 0 2
26956: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26957: LD_ADDR_VAR 0 4
26961: PUSH
26962: DOUBLE
26963: LD_INT 1
26965: DEC
26966: ST_TO_ADDR
26967: LD_EXP 89
26971: PUSH
26972: LD_VAR 0 5
26976: ARRAY
26977: PUSH
26978: FOR_TO
26979: IFFALSE 27020
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26981: LD_EXP 89
26985: PUSH
26986: LD_VAR 0 5
26990: ARRAY
26991: PUSH
26992: LD_VAR 0 4
26996: ARRAY
26997: PUSH
26998: LD_INT 1
27000: ARRAY
27001: PUSH
27002: LD_VAR 0 2
27006: EQUAL
27007: IFFALSE 27018
// KillUnit ( vehicle ) ;
27009: LD_VAR 0 2
27013: PPUSH
27014: CALL_OW 66
27018: GO 26978
27020: POP
27021: POP
// end ;
27022: LD_VAR 0 3
27026: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
27027: LD_EXP 93
27031: NOT
27032: IFFALSE 27165
27034: GO 27036
27036: DISABLE
27037: LD_INT 0
27039: PPUSH
// begin initMiner := true ;
27040: LD_ADDR_EXP 93
27044: PUSH
27045: LD_INT 1
27047: ST_TO_ADDR
// minersList := [ ] ;
27048: LD_ADDR_EXP 94
27052: PUSH
27053: EMPTY
27054: ST_TO_ADDR
// minerMinesList := [ ] ;
27055: LD_ADDR_EXP 95
27059: PUSH
27060: EMPTY
27061: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
27062: LD_ADDR_EXP 96
27066: PUSH
27067: LD_INT 6
27069: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27070: LD_ADDR_VAR 0 1
27074: PUSH
27075: LD_INT 34
27077: PUSH
27078: LD_INT 81
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PPUSH
27085: CALL_OW 69
27089: PUSH
27090: FOR_IN
27091: IFFALSE 27163
// begin if not i in minersList then
27093: LD_VAR 0 1
27097: PUSH
27098: LD_EXP 94
27102: IN
27103: NOT
27104: IFFALSE 27161
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27106: LD_ADDR_EXP 94
27110: PUSH
27111: LD_EXP 94
27115: PPUSH
27116: LD_EXP 94
27120: PUSH
27121: LD_INT 1
27123: PLUS
27124: PPUSH
27125: LD_VAR 0 1
27129: PPUSH
27130: CALL_OW 1
27134: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27135: LD_ADDR_EXP 95
27139: PUSH
27140: LD_EXP 95
27144: PPUSH
27145: LD_EXP 95
27149: PUSH
27150: LD_INT 1
27152: PLUS
27153: PPUSH
27154: EMPTY
27155: PPUSH
27156: CALL_OW 1
27160: ST_TO_ADDR
// end end ;
27161: GO 27090
27163: POP
27164: POP
// end ;
27165: PPOPN 1
27167: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
27168: LD_EXP 93
27172: IFFALSE 27203
27174: PUSH
27175: LD_EXP 95
27179: PPUSH
27180: CALL 32223 0 1
27184: IFTRUE 27202
27186: PUSH
27187: LD_INT 34
27189: PUSH
27190: LD_INT 81
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PPUSH
27197: CALL_OW 69
27201: OR
27202: AND
27203: IFFALSE 27702
27205: GO 27207
27207: DISABLE
27208: LD_INT 0
27210: PPUSH
27211: PPUSH
27212: PPUSH
27213: PPUSH
// begin enable ;
27214: ENABLE
// for i := minerMinesList downto 1 do
27215: LD_ADDR_VAR 0 1
27219: PUSH
27220: DOUBLE
27221: LD_EXP 95
27225: INC
27226: ST_TO_ADDR
27227: LD_INT 1
27229: PUSH
27230: FOR_DOWNTO
27231: IFFALSE 27700
// begin if IsLive ( minersList [ i ] ) then
27233: LD_EXP 94
27237: PUSH
27238: LD_VAR 0 1
27242: ARRAY
27243: PPUSH
27244: CALL_OW 300
27248: IFFALSE 27281
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
27250: LD_EXP 94
27254: PUSH
27255: LD_VAR 0 1
27259: ARRAY
27260: PPUSH
27261: LD_EXP 95
27265: PUSH
27266: LD_VAR 0 1
27270: ARRAY
27271: PPUSH
27272: CALL 32223 0 1
27276: PPUSH
27277: CALL_OW 505
// if not minerMinesList [ i ] then
27281: LD_EXP 95
27285: PUSH
27286: LD_VAR 0 1
27290: ARRAY
27291: NOT
27292: IFFALSE 27296
// continue ;
27294: GO 27230
// for j := minerMinesList [ i ] downto 1 do
27296: LD_ADDR_VAR 0 2
27300: PUSH
27301: DOUBLE
27302: LD_EXP 95
27306: PUSH
27307: LD_VAR 0 1
27311: ARRAY
27312: INC
27313: ST_TO_ADDR
27314: LD_INT 1
27316: PUSH
27317: FOR_DOWNTO
27318: IFFALSE 27696
// begin side := GetSide ( minersList [ i ] ) ;
27320: LD_ADDR_VAR 0 3
27324: PUSH
27325: LD_EXP 94
27329: PUSH
27330: LD_VAR 0 1
27334: ARRAY
27335: PPUSH
27336: CALL_OW 255
27340: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
27341: LD_EXP 94
27345: PUSH
27346: LD_VAR 0 1
27350: ARRAY
27351: PPUSH
27352: CALL_OW 301
27356: IFTRUE 27376
27358: PUSH
27359: LD_EXP 94
27363: PUSH
27364: LD_VAR 0 1
27368: ARRAY
27369: PPUSH
27370: CALL_OW 305
27374: NOT
27375: OR
27376: IFFALSE 27467
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27378: LD_EXP 95
27382: PUSH
27383: LD_VAR 0 1
27387: ARRAY
27388: PUSH
27389: LD_VAR 0 2
27393: ARRAY
27394: PUSH
27395: LD_INT 1
27397: ARRAY
27398: PPUSH
27399: LD_EXP 95
27403: PUSH
27404: LD_VAR 0 1
27408: ARRAY
27409: PUSH
27410: LD_VAR 0 2
27414: ARRAY
27415: PUSH
27416: LD_INT 2
27418: ARRAY
27419: PPUSH
27420: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27424: LD_ADDR_EXP 95
27428: PUSH
27429: LD_EXP 95
27433: PPUSH
27434: LD_VAR 0 1
27438: PPUSH
27439: LD_EXP 95
27443: PUSH
27444: LD_VAR 0 1
27448: ARRAY
27449: PPUSH
27450: LD_VAR 0 2
27454: PPUSH
27455: CALL_OW 3
27459: PPUSH
27460: CALL_OW 1
27464: ST_TO_ADDR
// continue ;
27465: GO 27317
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27467: LD_ADDR_VAR 0 4
27471: PUSH
27472: LD_EXP 95
27476: PUSH
27477: LD_VAR 0 1
27481: ARRAY
27482: PUSH
27483: LD_VAR 0 2
27487: ARRAY
27488: PUSH
27489: LD_INT 1
27491: ARRAY
27492: PPUSH
27493: LD_EXP 95
27497: PUSH
27498: LD_VAR 0 1
27502: ARRAY
27503: PUSH
27504: LD_VAR 0 2
27508: ARRAY
27509: PUSH
27510: LD_INT 2
27512: ARRAY
27513: PPUSH
27514: CALL_OW 428
27518: ST_TO_ADDR
// if not tmp then
27519: LD_VAR 0 4
27523: NOT
27524: IFFALSE 27528
// continue ;
27526: GO 27317
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27528: LD_VAR 0 4
27532: PUSH
27533: LD_INT 81
27535: PUSH
27536: LD_VAR 0 3
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PPUSH
27545: CALL_OW 69
27549: IN
27550: IFFALSE 27600
27552: PUSH
27553: LD_EXP 95
27557: PUSH
27558: LD_VAR 0 1
27562: ARRAY
27563: PUSH
27564: LD_VAR 0 2
27568: ARRAY
27569: PUSH
27570: LD_INT 1
27572: ARRAY
27573: PPUSH
27574: LD_EXP 95
27578: PUSH
27579: LD_VAR 0 1
27583: ARRAY
27584: PUSH
27585: LD_VAR 0 2
27589: ARRAY
27590: PUSH
27591: LD_INT 2
27593: ARRAY
27594: PPUSH
27595: CALL_OW 458
27599: AND
27600: IFFALSE 27694
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27602: LD_EXP 95
27606: PUSH
27607: LD_VAR 0 1
27611: ARRAY
27612: PUSH
27613: LD_VAR 0 2
27617: ARRAY
27618: PUSH
27619: LD_INT 1
27621: ARRAY
27622: PPUSH
27623: LD_EXP 95
27627: PUSH
27628: LD_VAR 0 1
27632: ARRAY
27633: PUSH
27634: LD_VAR 0 2
27638: ARRAY
27639: PUSH
27640: LD_INT 2
27642: ARRAY
27643: PPUSH
27644: LD_VAR 0 3
27648: PPUSH
27649: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27653: LD_ADDR_EXP 95
27657: PUSH
27658: LD_EXP 95
27662: PPUSH
27663: LD_VAR 0 1
27667: PPUSH
27668: LD_EXP 95
27672: PUSH
27673: LD_VAR 0 1
27677: ARRAY
27678: PPUSH
27679: LD_VAR 0 2
27683: PPUSH
27684: CALL_OW 3
27688: PPUSH
27689: CALL_OW 1
27693: ST_TO_ADDR
// end ; end ;
27694: GO 27317
27696: POP
27697: POP
// end ;
27698: GO 27230
27700: POP
27701: POP
// end ;
27702: PPOPN 4
27704: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
27705: LD_INT 0
27707: PPUSH
27708: PPUSH
27709: PPUSH
27710: PPUSH
// result := false ;
27711: LD_ADDR_VAR 0 4
27715: PUSH
27716: LD_INT 0
27718: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27719: LD_VAR 0 1
27723: PPUSH
27724: CALL_OW 264
27728: PUSH
27729: LD_INT 81
27731: EQUAL
27732: NOT
27733: IFFALSE 27737
// exit ;
27735: GO 28107
// side := GetSide ( unit ) ;
27737: LD_ADDR_VAR 0 6
27741: PUSH
27742: LD_VAR 0 1
27746: PPUSH
27747: CALL_OW 255
27751: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
27752: LD_ADDR_VAR 0 5
27756: PUSH
27757: LD_EXP 94
27761: PPUSH
27762: LD_VAR 0 1
27766: PPUSH
27767: CALL 34924 0 2
27771: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27772: LD_EXP 95
27776: PUSH
27777: LD_VAR 0 5
27781: ARRAY
27782: PUSH
27783: LD_EXP 96
27787: GREATEREQUAL
27788: IFFALSE 27792
// exit ;
27790: GO 28107
// ComMoveXY ( unit , x , y ) ;
27792: LD_VAR 0 1
27796: PPUSH
27797: LD_VAR 0 2
27801: PPUSH
27802: LD_VAR 0 3
27806: PPUSH
27807: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27811: LD_INT 35
27813: PPUSH
27814: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27818: LD_VAR 0 1
27822: PPUSH
27823: LD_VAR 0 2
27827: PPUSH
27828: LD_VAR 0 3
27832: PPUSH
27833: CALL 66970 0 3
27837: NOT
27838: IFFALSE 27851
27840: PUSH
27841: LD_VAR 0 1
27845: PPUSH
27846: CALL_OW 314
27850: AND
27851: IFFALSE 27855
// exit ;
27853: GO 28107
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27855: LD_VAR 0 2
27859: PPUSH
27860: LD_VAR 0 3
27864: PPUSH
27865: CALL_OW 428
27869: PUSH
27870: LD_VAR 0 1
27874: EQUAL
27875: IFFALSE 27889
27877: PUSH
27878: LD_VAR 0 1
27882: PPUSH
27883: CALL_OW 314
27887: NOT
27888: AND
27889: IFFALSE 27811
// if MineAtPos ( x , y ) then
27891: LD_VAR 0 2
27895: PPUSH
27896: LD_VAR 0 3
27900: PPUSH
27901: CALL_OW 458
27905: IFFALSE 27909
// exit ;
27907: GO 28107
// if your_side = side then
27909: LD_OWVAR 2
27913: PUSH
27914: LD_VAR 0 6
27918: EQUAL
27919: IFFALSE 27938
// PlaySoundXY ( x , y , PlantMine ) ;
27921: LD_VAR 0 2
27925: PPUSH
27926: LD_VAR 0 3
27930: PPUSH
27931: LD_STRING PlantMine
27933: PPUSH
27934: CALL_OW 366
// repeat wait ( 1 ) ;
27938: LD_INT 1
27940: PPUSH
27941: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
27945: LD_VAR 0 2
27949: PPUSH
27950: LD_VAR 0 3
27954: PPUSH
27955: LD_VAR 0 6
27959: PPUSH
27960: LD_INT 0
27962: PPUSH
27963: CALL_OW 454
27967: IFFALSE 27938
// if MineAtPos ( x , y ) then
27969: LD_VAR 0 2
27973: PPUSH
27974: LD_VAR 0 3
27978: PPUSH
27979: CALL_OW 458
27983: IFFALSE 28099
// begin for i in minerMinesList [ index ] do
27985: LD_ADDR_VAR 0 7
27989: PUSH
27990: LD_EXP 95
27994: PUSH
27995: LD_VAR 0 5
27999: ARRAY
28000: PUSH
28001: FOR_IN
28002: IFFALSE 28044
// if i [ 1 ] = x and i [ 2 ] = y then
28004: LD_VAR 0 7
28008: PUSH
28009: LD_INT 1
28011: ARRAY
28012: PUSH
28013: LD_VAR 0 2
28017: EQUAL
28018: IFFALSE 28036
28020: PUSH
28021: LD_VAR 0 7
28025: PUSH
28026: LD_INT 2
28028: ARRAY
28029: PUSH
28030: LD_VAR 0 3
28034: EQUAL
28035: AND
28036: IFFALSE 28042
// exit ;
28038: POP
28039: POP
28040: GO 28107
28042: GO 28001
28044: POP
28045: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28046: LD_ADDR_EXP 95
28050: PUSH
28051: LD_EXP 95
28055: PPUSH
28056: LD_VAR 0 5
28060: PUSH
28061: LD_EXP 95
28065: PUSH
28066: LD_VAR 0 5
28070: ARRAY
28071: PUSH
28072: LD_INT 1
28074: PLUS
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PPUSH
28080: LD_VAR 0 2
28084: PUSH
28085: LD_VAR 0 3
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PPUSH
28094: CALL 35141 0 3
28098: ST_TO_ADDR
// end ; result := true ;
28099: LD_ADDR_VAR 0 4
28103: PUSH
28104: LD_INT 1
28106: ST_TO_ADDR
// end ;
28107: LD_VAR 0 4
28111: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28112: LD_INT 0
28114: PPUSH
28115: PPUSH
28116: PPUSH
// if not unit in minersList then
28117: LD_VAR 0 1
28121: PUSH
28122: LD_EXP 94
28126: IN
28127: NOT
28128: IFFALSE 28132
// exit ;
28130: GO 28339
// index := GetElementIndex ( minersList , unit ) ;
28132: LD_ADDR_VAR 0 6
28136: PUSH
28137: LD_EXP 94
28141: PPUSH
28142: LD_VAR 0 1
28146: PPUSH
28147: CALL 34924 0 2
28151: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28152: LD_ADDR_VAR 0 5
28156: PUSH
28157: DOUBLE
28158: LD_EXP 95
28162: PUSH
28163: LD_VAR 0 6
28167: ARRAY
28168: INC
28169: ST_TO_ADDR
28170: LD_INT 1
28172: PUSH
28173: FOR_DOWNTO
28174: IFFALSE 28337
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28176: LD_EXP 95
28180: PUSH
28181: LD_VAR 0 6
28185: ARRAY
28186: PUSH
28187: LD_VAR 0 5
28191: ARRAY
28192: PUSH
28193: LD_INT 1
28195: ARRAY
28196: PPUSH
28197: LD_EXP 95
28201: PUSH
28202: LD_VAR 0 6
28206: ARRAY
28207: PUSH
28208: LD_VAR 0 5
28212: ARRAY
28213: PUSH
28214: LD_INT 2
28216: ARRAY
28217: PPUSH
28218: LD_VAR 0 2
28222: PPUSH
28223: LD_VAR 0 3
28227: PPUSH
28228: CALL_OW 298
28232: PUSH
28233: LD_INT 6
28235: LESS
28236: IFFALSE 28335
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28238: LD_EXP 95
28242: PUSH
28243: LD_VAR 0 6
28247: ARRAY
28248: PUSH
28249: LD_VAR 0 5
28253: ARRAY
28254: PUSH
28255: LD_INT 1
28257: ARRAY
28258: PPUSH
28259: LD_EXP 95
28263: PUSH
28264: LD_VAR 0 6
28268: ARRAY
28269: PUSH
28270: LD_VAR 0 5
28274: ARRAY
28275: PUSH
28276: LD_INT 2
28278: ARRAY
28279: PPUSH
28280: LD_VAR 0 1
28284: PPUSH
28285: CALL_OW 255
28289: PPUSH
28290: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28294: LD_ADDR_EXP 95
28298: PUSH
28299: LD_EXP 95
28303: PPUSH
28304: LD_VAR 0 6
28308: PPUSH
28309: LD_EXP 95
28313: PUSH
28314: LD_VAR 0 6
28318: ARRAY
28319: PPUSH
28320: LD_VAR 0 5
28324: PPUSH
28325: CALL_OW 3
28329: PPUSH
28330: CALL_OW 1
28334: ST_TO_ADDR
// end ; end ;
28335: GO 28173
28337: POP
28338: POP
// end ;
28339: LD_VAR 0 4
28343: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28344: LD_INT 0
28346: PPUSH
28347: PPUSH
28348: PPUSH
28349: PPUSH
28350: PPUSH
28351: PPUSH
28352: PPUSH
28353: PPUSH
28354: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28355: LD_VAR 0 1
28359: PPUSH
28360: CALL_OW 264
28364: PUSH
28365: LD_INT 81
28367: EQUAL
28368: NOT
28369: IFTRUE 28384
28371: PUSH
28372: LD_VAR 0 1
28376: PUSH
28377: LD_EXP 94
28381: IN
28382: NOT
28383: OR
28384: IFFALSE 28388
// exit ;
28386: GO 28714
// index := GetElementIndex ( minersList , unit ) ;
28388: LD_ADDR_VAR 0 6
28392: PUSH
28393: LD_EXP 94
28397: PPUSH
28398: LD_VAR 0 1
28402: PPUSH
28403: CALL 34924 0 2
28407: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28408: LD_ADDR_VAR 0 8
28412: PUSH
28413: LD_EXP 96
28417: PUSH
28418: LD_EXP 95
28422: PUSH
28423: LD_VAR 0 6
28427: ARRAY
28428: MINUS
28429: ST_TO_ADDR
// if not minesFreeAmount then
28430: LD_VAR 0 8
28434: NOT
28435: IFFALSE 28439
// exit ;
28437: GO 28714
// tmp := [ ] ;
28439: LD_ADDR_VAR 0 7
28443: PUSH
28444: EMPTY
28445: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28446: LD_ADDR_VAR 0 5
28450: PUSH
28451: DOUBLE
28452: LD_INT 1
28454: DEC
28455: ST_TO_ADDR
28456: LD_VAR 0 8
28460: PUSH
28461: FOR_TO
28462: IFFALSE 28661
// begin _d := rand ( 0 , 5 ) ;
28464: LD_ADDR_VAR 0 11
28468: PUSH
28469: LD_INT 0
28471: PPUSH
28472: LD_INT 5
28474: PPUSH
28475: CALL_OW 12
28479: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28480: LD_ADDR_VAR 0 12
28484: PUSH
28485: LD_INT 2
28487: PPUSH
28488: LD_INT 6
28490: PPUSH
28491: CALL_OW 12
28495: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28496: LD_ADDR_VAR 0 9
28500: PUSH
28501: LD_VAR 0 2
28505: PPUSH
28506: LD_VAR 0 11
28510: PPUSH
28511: LD_VAR 0 12
28515: PPUSH
28516: CALL_OW 272
28520: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28521: LD_ADDR_VAR 0 10
28525: PUSH
28526: LD_VAR 0 3
28530: PPUSH
28531: LD_VAR 0 11
28535: PPUSH
28536: LD_VAR 0 12
28540: PPUSH
28541: CALL_OW 273
28545: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28546: LD_VAR 0 9
28550: PPUSH
28551: LD_VAR 0 10
28555: PPUSH
28556: CALL_OW 488
28560: IFFALSE 28584
28562: PUSH
28563: LD_VAR 0 9
28567: PUSH
28568: LD_VAR 0 10
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_VAR 0 7
28581: IN
28582: NOT
28583: AND
28584: IFFALSE 28603
28586: PUSH
28587: LD_VAR 0 9
28591: PPUSH
28592: LD_VAR 0 10
28596: PPUSH
28597: CALL_OW 458
28601: NOT
28602: AND
28603: IFFALSE 28645
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28605: LD_ADDR_VAR 0 7
28609: PUSH
28610: LD_VAR 0 7
28614: PPUSH
28615: LD_VAR 0 7
28619: PUSH
28620: LD_INT 1
28622: PLUS
28623: PPUSH
28624: LD_VAR 0 9
28628: PUSH
28629: LD_VAR 0 10
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PPUSH
28638: CALL_OW 1
28642: ST_TO_ADDR
28643: GO 28659
// i := i - 1 ;
28645: LD_ADDR_VAR 0 5
28649: PUSH
28650: LD_VAR 0 5
28654: PUSH
28655: LD_INT 1
28657: MINUS
28658: ST_TO_ADDR
// end ;
28659: GO 28461
28661: POP
28662: POP
// for i in tmp do
28663: LD_ADDR_VAR 0 5
28667: PUSH
28668: LD_VAR 0 7
28672: PUSH
28673: FOR_IN
28674: IFFALSE 28712
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28676: LD_VAR 0 1
28680: PPUSH
28681: LD_VAR 0 5
28685: PUSH
28686: LD_INT 1
28688: ARRAY
28689: PPUSH
28690: LD_VAR 0 5
28694: PUSH
28695: LD_INT 2
28697: ARRAY
28698: PPUSH
28699: CALL 27705 0 3
28703: NOT
28704: IFFALSE 28710
// exit ;
28706: POP
28707: POP
28708: GO 28714
28710: GO 28673
28712: POP
28713: POP
// end ;
28714: LD_VAR 0 4
28718: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
28719: LD_INT 0
28721: PPUSH
28722: PPUSH
28723: PPUSH
28724: PPUSH
28725: PPUSH
28726: PPUSH
28727: PPUSH
28728: PPUSH
28729: PPUSH
// if GetClass ( unit ) <> class_sniper then
28730: LD_VAR 0 1
28734: PPUSH
28735: CALL_OW 257
28739: PUSH
28740: LD_INT 5
28742: NONEQUAL
28743: IFFALSE 28747
// exit ;
28745: GO 29217
// dist := 8 ;
28747: LD_ADDR_VAR 0 5
28751: PUSH
28752: LD_INT 8
28754: ST_TO_ADDR
// viewRange := 12 ;
28755: LD_ADDR_VAR 0 8
28759: PUSH
28760: LD_INT 12
28762: ST_TO_ADDR
// side := GetSide ( unit ) ;
28763: LD_ADDR_VAR 0 6
28767: PUSH
28768: LD_VAR 0 1
28772: PPUSH
28773: CALL_OW 255
28777: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28778: LD_INT 61
28780: PPUSH
28781: LD_VAR 0 6
28785: PPUSH
28786: CALL_OW 321
28790: PUSH
28791: LD_INT 2
28793: EQUAL
28794: IFFALSE 28804
// viewRange := 16 ;
28796: LD_ADDR_VAR 0 8
28800: PUSH
28801: LD_INT 16
28803: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28804: LD_VAR 0 1
28808: PPUSH
28809: LD_VAR 0 2
28813: PPUSH
28814: LD_VAR 0 3
28818: PPUSH
28819: CALL_OW 297
28823: PUSH
28824: LD_VAR 0 5
28828: GREATER
28829: IFFALSE 28908
// begin ComMoveXY ( unit , x , y ) ;
28831: LD_VAR 0 1
28835: PPUSH
28836: LD_VAR 0 2
28840: PPUSH
28841: LD_VAR 0 3
28845: PPUSH
28846: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28850: LD_INT 35
28852: PPUSH
28853: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28857: LD_VAR 0 1
28861: PPUSH
28862: LD_VAR 0 2
28866: PPUSH
28867: LD_VAR 0 3
28871: PPUSH
28872: CALL 66970 0 3
28876: NOT
28877: IFFALSE 28881
// exit ;
28879: GO 29217
// until GetDistUnitXY ( unit , x , y ) < dist ;
28881: LD_VAR 0 1
28885: PPUSH
28886: LD_VAR 0 2
28890: PPUSH
28891: LD_VAR 0 3
28895: PPUSH
28896: CALL_OW 297
28900: PUSH
28901: LD_VAR 0 5
28905: LESS
28906: IFFALSE 28850
// end ; ComTurnXY ( unit , x , y ) ;
28908: LD_VAR 0 1
28912: PPUSH
28913: LD_VAR 0 2
28917: PPUSH
28918: LD_VAR 0 3
28922: PPUSH
28923: CALL_OW 118
// repeat if Multiplayer then
28927: LD_OWVAR 4
28931: IFFALSE 28942
// wait ( 35 ) else
28933: LD_INT 35
28935: PPUSH
28936: CALL_OW 67
28940: GO 28949
// wait ( 5 ) ;
28942: LD_INT 5
28944: PPUSH
28945: CALL_OW 67
// _d := GetDir ( unit ) ;
28949: LD_ADDR_VAR 0 11
28953: PUSH
28954: LD_VAR 0 1
28958: PPUSH
28959: CALL_OW 254
28963: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
28964: LD_ADDR_VAR 0 7
28968: PUSH
28969: LD_VAR 0 1
28973: PPUSH
28974: CALL_OW 250
28978: PPUSH
28979: LD_VAR 0 1
28983: PPUSH
28984: CALL_OW 251
28988: PPUSH
28989: LD_VAR 0 2
28993: PPUSH
28994: LD_VAR 0 3
28998: PPUSH
28999: CALL 69606 0 4
29003: ST_TO_ADDR
// until dir = _d ;
29004: LD_VAR 0 7
29008: PUSH
29009: LD_VAR 0 11
29013: EQUAL
29014: IFFALSE 28927
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
29016: LD_ADDR_VAR 0 9
29020: PUSH
29021: LD_VAR 0 1
29025: PPUSH
29026: CALL_OW 250
29030: PPUSH
29031: LD_VAR 0 7
29035: PPUSH
29036: LD_VAR 0 5
29040: PPUSH
29041: CALL_OW 272
29045: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
29046: LD_ADDR_VAR 0 10
29050: PUSH
29051: LD_VAR 0 1
29055: PPUSH
29056: CALL_OW 251
29060: PPUSH
29061: LD_VAR 0 7
29065: PPUSH
29066: LD_VAR 0 5
29070: PPUSH
29071: CALL_OW 273
29075: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29076: LD_VAR 0 9
29080: PPUSH
29081: LD_VAR 0 10
29085: PPUSH
29086: CALL_OW 488
29090: NOT
29091: IFFALSE 29095
// exit ;
29093: GO 29217
// ComAnimCustom ( unit , 1 ) ;
29095: LD_VAR 0 1
29099: PPUSH
29100: LD_INT 1
29102: PPUSH
29103: CALL_OW 592
// p := 0 ;
29107: LD_ADDR_VAR 0 12
29111: PUSH
29112: LD_INT 0
29114: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29115: LD_VAR 0 9
29119: PPUSH
29120: LD_VAR 0 10
29124: PPUSH
29125: LD_VAR 0 6
29129: PPUSH
29130: LD_VAR 0 8
29134: PPUSH
29135: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
29139: LD_INT 35
29141: PPUSH
29142: CALL_OW 67
// p := Inc ( p ) ;
29146: LD_ADDR_VAR 0 12
29150: PUSH
29151: LD_VAR 0 12
29155: PPUSH
29156: CALL 69562 0 1
29160: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
29161: LD_VAR 0 12
29165: PUSH
29166: LD_INT 3
29168: EQUAL
29169: IFTRUE 29183
29171: PUSH
29172: LD_VAR 0 1
29176: PPUSH
29177: CALL_OW 302
29181: NOT
29182: OR
29183: IFTRUE 29196
29185: PUSH
29186: LD_VAR 0 1
29190: PPUSH
29191: CALL_OW 301
29195: OR
29196: IFFALSE 29139
// RemoveSeeing ( _x , _y , side ) ;
29198: LD_VAR 0 9
29202: PPUSH
29203: LD_VAR 0 10
29207: PPUSH
29208: LD_VAR 0 6
29212: PPUSH
29213: CALL_OW 331
// end ;
29217: LD_VAR 0 4
29221: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
29222: LD_INT 0
29224: PPUSH
29225: PPUSH
29226: PPUSH
29227: PPUSH
29228: PPUSH
29229: PPUSH
29230: PPUSH
29231: PPUSH
29232: PPUSH
29233: PPUSH
29234: PPUSH
// if not unit then
29235: LD_VAR 0 1
29239: NOT
29240: IFFALSE 29244
// exit ;
29242: GO 29515
// side := GetSide ( unit ) ;
29244: LD_ADDR_VAR 0 3
29248: PUSH
29249: LD_VAR 0 1
29253: PPUSH
29254: CALL_OW 255
29258: ST_TO_ADDR
// x := GetX ( unit ) ;
29259: LD_ADDR_VAR 0 5
29263: PUSH
29264: LD_VAR 0 1
29268: PPUSH
29269: CALL_OW 250
29273: ST_TO_ADDR
// y := GetY ( unit ) ;
29274: LD_ADDR_VAR 0 6
29278: PUSH
29279: LD_VAR 0 1
29283: PPUSH
29284: CALL_OW 251
29288: ST_TO_ADDR
// r := 8 ;
29289: LD_ADDR_VAR 0 4
29293: PUSH
29294: LD_INT 8
29296: ST_TO_ADDR
// if x - r < 0 then
29297: LD_VAR 0 5
29301: PUSH
29302: LD_VAR 0 4
29306: MINUS
29307: PUSH
29308: LD_INT 0
29310: LESS
29311: IFFALSE 29323
// min_x := 0 else
29313: LD_ADDR_VAR 0 7
29317: PUSH
29318: LD_INT 0
29320: ST_TO_ADDR
29321: GO 29339
// min_x := x - r ;
29323: LD_ADDR_VAR 0 7
29327: PUSH
29328: LD_VAR 0 5
29332: PUSH
29333: LD_VAR 0 4
29337: MINUS
29338: ST_TO_ADDR
// if y - r < 0 then
29339: LD_VAR 0 6
29343: PUSH
29344: LD_VAR 0 4
29348: MINUS
29349: PUSH
29350: LD_INT 0
29352: LESS
29353: IFFALSE 29365
// min_y := 0 else
29355: LD_ADDR_VAR 0 8
29359: PUSH
29360: LD_INT 0
29362: ST_TO_ADDR
29363: GO 29381
// min_y := y - r ;
29365: LD_ADDR_VAR 0 8
29369: PUSH
29370: LD_VAR 0 6
29374: PUSH
29375: LD_VAR 0 4
29379: MINUS
29380: ST_TO_ADDR
// max_x := x + r ;
29381: LD_ADDR_VAR 0 9
29385: PUSH
29386: LD_VAR 0 5
29390: PUSH
29391: LD_VAR 0 4
29395: PLUS
29396: ST_TO_ADDR
// max_y := y + r ;
29397: LD_ADDR_VAR 0 10
29401: PUSH
29402: LD_VAR 0 6
29406: PUSH
29407: LD_VAR 0 4
29411: PLUS
29412: ST_TO_ADDR
// for _x = min_x to max_x do
29413: LD_ADDR_VAR 0 11
29417: PUSH
29418: DOUBLE
29419: LD_VAR 0 7
29423: DEC
29424: ST_TO_ADDR
29425: LD_VAR 0 9
29429: PUSH
29430: FOR_TO
29431: IFFALSE 29513
// for _y = min_y to max_y do
29433: LD_ADDR_VAR 0 12
29437: PUSH
29438: DOUBLE
29439: LD_VAR 0 8
29443: DEC
29444: ST_TO_ADDR
29445: LD_VAR 0 10
29449: PUSH
29450: FOR_TO
29451: IFFALSE 29509
// begin if not ValidHex ( _x , _y ) then
29453: LD_VAR 0 11
29457: PPUSH
29458: LD_VAR 0 12
29462: PPUSH
29463: CALL_OW 488
29467: NOT
29468: IFFALSE 29472
// continue ;
29470: GO 29450
// if MineAtPos ( _x , _y ) then
29472: LD_VAR 0 11
29476: PPUSH
29477: LD_VAR 0 12
29481: PPUSH
29482: CALL_OW 458
29486: IFFALSE 29507
// ViewMineAtPos ( _x , _y , side ) ;
29488: LD_VAR 0 11
29492: PPUSH
29493: LD_VAR 0 12
29497: PPUSH
29498: LD_VAR 0 3
29502: PPUSH
29503: CALL_OW 457
// end ;
29507: GO 29450
29509: POP
29510: POP
29511: GO 29430
29513: POP
29514: POP
// end ;
29515: LD_VAR 0 2
29519: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
29520: LD_INT 0
29522: PPUSH
29523: PPUSH
29524: PPUSH
29525: PPUSH
29526: PPUSH
29527: PPUSH
// if not units then
29528: LD_VAR 0 1
29532: NOT
29533: IFFALSE 29537
// exit ;
29535: GO 29967
// scaners := [ ] ;
29537: LD_ADDR_VAR 0 6
29541: PUSH
29542: EMPTY
29543: ST_TO_ADDR
// for i in units do
29544: LD_ADDR_VAR 0 3
29548: PUSH
29549: LD_VAR 0 1
29553: PUSH
29554: FOR_IN
29555: IFFALSE 29712
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
29557: LD_VAR 0 3
29561: PPUSH
29562: CALL_OW 264
29566: PUSH
29567: LD_INT 11
29569: NONEQUAL
29570: IFTRUE 29584
29572: PUSH
29573: LD_VAR 0 3
29577: PPUSH
29578: CALL_OW 302
29582: NOT
29583: OR
29584: IFTRUE 29601
29586: PUSH
29587: LD_VAR 0 3
29591: PPUSH
29592: CALL_OW 110
29596: PUSH
29597: LD_INT 502
29599: EQUAL
29600: OR
29601: IFFALSE 29605
// continue ;
29603: GO 29554
// ComStop ( i ) ;
29605: LD_VAR 0 3
29609: PPUSH
29610: CALL_OW 141
// x := GetX ( i ) ;
29614: LD_ADDR_VAR 0 4
29618: PUSH
29619: LD_VAR 0 3
29623: PPUSH
29624: CALL_OW 250
29628: ST_TO_ADDR
// y := GetY ( i ) ;
29629: LD_ADDR_VAR 0 5
29633: PUSH
29634: LD_VAR 0 3
29638: PPUSH
29639: CALL_OW 251
29643: ST_TO_ADDR
// if GetSide ( i ) = your_side then
29644: LD_VAR 0 3
29648: PPUSH
29649: CALL_OW 255
29653: PUSH
29654: LD_OWVAR 2
29658: EQUAL
29659: IFFALSE 29678
// PlaySoundXY ( x , y , mineDetector ) ;
29661: LD_VAR 0 4
29665: PPUSH
29666: LD_VAR 0 5
29670: PPUSH
29671: LD_STRING mineDetector
29673: PPUSH
29674: CALL_OW 366
// scaners := Join ( scaners , i ) ;
29678: LD_ADDR_VAR 0 6
29682: PUSH
29683: LD_VAR 0 6
29687: PPUSH
29688: LD_VAR 0 3
29692: PPUSH
29693: CALL 68189 0 2
29697: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
29698: LD_VAR 0 3
29702: PPUSH
29703: LD_INT 502
29705: PPUSH
29706: CALL_OW 109
// end ;
29710: GO 29554
29712: POP
29713: POP
// if not scaners then
29714: LD_VAR 0 6
29718: NOT
29719: IFFALSE 29723
// exit ;
29721: GO 29967
// wait ( 3 ) ;
29723: LD_INT 3
29725: PPUSH
29726: CALL_OW 67
// timer := 6 ;
29730: LD_ADDR_VAR 0 7
29734: PUSH
29735: LD_INT 6
29737: ST_TO_ADDR
// repeat for i in scaners do
29738: LD_ADDR_VAR 0 3
29742: PUSH
29743: LD_VAR 0 6
29747: PUSH
29748: FOR_IN
29749: IFFALSE 29865
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
29751: LD_VAR 0 3
29755: PPUSH
29756: CALL_OW 302
29760: NOT
29761: IFTRUE 29774
29763: PUSH
29764: LD_VAR 0 3
29768: PPUSH
29769: CALL_OW 314
29773: OR
29774: IFTRUE 29805
29776: PUSH
29777: LD_VAR 0 3
29781: PPUSH
29782: CALL_OW 263
29786: PUSH
29787: LD_INT 1
29789: EQUAL
29790: IFFALSE 29804
29792: PUSH
29793: LD_VAR 0 3
29797: PPUSH
29798: CALL_OW 311
29802: NOT
29803: AND
29804: OR
29805: IFFALSE 29849
// begin SetUnitDisplayNumber ( i , 0 ) ;
29807: LD_VAR 0 3
29811: PPUSH
29812: LD_INT 0
29814: PPUSH
29815: CALL_OW 505
// SetTag ( i , 0 ) ;
29819: LD_VAR 0 3
29823: PPUSH
29824: LD_INT 0
29826: PPUSH
29827: CALL_OW 109
// scaners := scaners diff i ;
29831: LD_ADDR_VAR 0 6
29835: PUSH
29836: LD_VAR 0 6
29840: PUSH
29841: LD_VAR 0 3
29845: DIFF
29846: ST_TO_ADDR
// continue ;
29847: GO 29748
// end ; SetUnitDisplayNumber ( i , timer ) ;
29849: LD_VAR 0 3
29853: PPUSH
29854: LD_VAR 0 7
29858: PPUSH
29859: CALL_OW 505
// end ;
29863: GO 29748
29865: POP
29866: POP
// if not scaners then
29867: LD_VAR 0 6
29871: NOT
29872: IFFALSE 29876
// exit ;
29874: GO 29967
// timer := Dec ( timer ) ;
29876: LD_ADDR_VAR 0 7
29880: PUSH
29881: LD_VAR 0 7
29885: PPUSH
29886: CALL 69584 0 1
29890: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29891: LD_INT 35
29893: PPUSH
29894: CALL_OW 67
// until timer = 0 ;
29898: LD_VAR 0 7
29902: PUSH
29903: LD_INT 0
29905: EQUAL
29906: IFFALSE 29738
// if not scaners then
29908: LD_VAR 0 6
29912: NOT
29913: IFFALSE 29917
// exit ;
29915: GO 29967
// for i in scaners do
29917: LD_ADDR_VAR 0 3
29921: PUSH
29922: LD_VAR 0 6
29926: PUSH
29927: FOR_IN
29928: IFFALSE 29965
// begin SetUnitDisplayNumber ( i , 0 ) ;
29930: LD_VAR 0 3
29934: PPUSH
29935: LD_INT 0
29937: PPUSH
29938: CALL_OW 505
// SetTag ( i , 0 ) ;
29942: LD_VAR 0 3
29946: PPUSH
29947: LD_INT 0
29949: PPUSH
29950: CALL_OW 109
// RevealDetectorMine ( i ) ;
29954: LD_VAR 0 3
29958: PPUSH
29959: CALL 29222 0 1
// end ;
29963: GO 29927
29965: POP
29966: POP
// end ;
29967: LD_VAR 0 2
29971: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
29972: LD_INT 0
29974: PPUSH
// if p1 = mine_detector_mode then
29975: LD_VAR 0 2
29979: PUSH
29980: LD_INT 103
29982: EQUAL
29983: IFFALSE 29994
// DetectMine ( units ) ;
29985: LD_VAR 0 1
29989: PPUSH
29990: CALL 29520 0 1
// end ; end_of_file
29994: LD_VAR 0 7
29998: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29999: LD_INT 0
30001: PPUSH
30002: PPUSH
// if exist_mode then
30003: LD_VAR 0 2
30007: IFFALSE 30053
// begin unit := CreateCharacter ( prefix & ident ) ;
30009: LD_ADDR_VAR 0 5
30013: PUSH
30014: LD_VAR 0 3
30018: PUSH
30019: LD_VAR 0 1
30023: STR
30024: PPUSH
30025: CALL_OW 34
30029: ST_TO_ADDR
// if unit then
30030: LD_VAR 0 5
30034: IFFALSE 30051
// DeleteCharacters ( prefix & ident ) ;
30036: LD_VAR 0 3
30040: PUSH
30041: LD_VAR 0 1
30045: STR
30046: PPUSH
30047: CALL_OW 40
// end else
30051: GO 30068
// unit := NewCharacter ( ident ) ;
30053: LD_ADDR_VAR 0 5
30057: PUSH
30058: LD_VAR 0 1
30062: PPUSH
30063: CALL_OW 25
30067: ST_TO_ADDR
// result := unit ;
30068: LD_ADDR_VAR 0 4
30072: PUSH
30073: LD_VAR 0 5
30077: ST_TO_ADDR
// end ;
30078: LD_VAR 0 4
30082: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
30083: LD_INT 0
30085: PPUSH
30086: PPUSH
// if exist_mode then
30087: LD_VAR 0 2
30091: IFFALSE 30116
// unit := CreateCharacter ( prefix & ident ) else
30093: LD_ADDR_VAR 0 5
30097: PUSH
30098: LD_VAR 0 3
30102: PUSH
30103: LD_VAR 0 1
30107: STR
30108: PPUSH
30109: CALL_OW 34
30113: ST_TO_ADDR
30114: GO 30131
// unit := NewCharacter ( ident ) ;
30116: LD_ADDR_VAR 0 5
30120: PUSH
30121: LD_VAR 0 1
30125: PPUSH
30126: CALL_OW 25
30130: ST_TO_ADDR
// result := unit ;
30131: LD_ADDR_VAR 0 4
30135: PUSH
30136: LD_VAR 0 5
30140: ST_TO_ADDR
// end ;
30141: LD_VAR 0 4
30145: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30146: LD_INT 0
30148: PPUSH
30149: PPUSH
// if not side or not nation then
30150: LD_VAR 0 1
30154: NOT
30155: IFTRUE 30164
30157: PUSH
30158: LD_VAR 0 2
30162: NOT
30163: OR
30164: IFFALSE 30168
// exit ;
30166: GO 30962
// case nation of nation_american :
30168: LD_VAR 0 2
30172: PUSH
30173: LD_INT 1
30175: DOUBLE
30176: EQUAL
30177: IFTRUE 30181
30179: GO 30403
30181: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
30182: LD_ADDR_VAR 0 4
30186: PUSH
30187: LD_INT 35
30189: PUSH
30190: LD_INT 45
30192: PUSH
30193: LD_INT 46
30195: PUSH
30196: LD_INT 47
30198: PUSH
30199: LD_INT 82
30201: PUSH
30202: LD_INT 83
30204: PUSH
30205: LD_INT 84
30207: PUSH
30208: LD_INT 85
30210: PUSH
30211: LD_INT 86
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: LD_INT 2
30219: PUSH
30220: LD_INT 6
30222: PUSH
30223: LD_INT 15
30225: PUSH
30226: LD_INT 16
30228: PUSH
30229: LD_INT 7
30231: PUSH
30232: LD_INT 12
30234: PUSH
30235: LD_INT 13
30237: PUSH
30238: LD_INT 10
30240: PUSH
30241: LD_INT 14
30243: PUSH
30244: LD_INT 20
30246: PUSH
30247: LD_INT 21
30249: PUSH
30250: LD_INT 22
30252: PUSH
30253: LD_INT 25
30255: PUSH
30256: LD_INT 32
30258: PUSH
30259: LD_INT 27
30261: PUSH
30262: LD_INT 36
30264: PUSH
30265: LD_INT 69
30267: PUSH
30268: LD_INT 39
30270: PUSH
30271: LD_INT 34
30273: PUSH
30274: LD_INT 40
30276: PUSH
30277: LD_INT 48
30279: PUSH
30280: LD_INT 49
30282: PUSH
30283: LD_INT 50
30285: PUSH
30286: LD_INT 51
30288: PUSH
30289: LD_INT 52
30291: PUSH
30292: LD_INT 53
30294: PUSH
30295: LD_INT 54
30297: PUSH
30298: LD_INT 55
30300: PUSH
30301: LD_INT 56
30303: PUSH
30304: LD_INT 57
30306: PUSH
30307: LD_INT 58
30309: PUSH
30310: LD_INT 59
30312: PUSH
30313: LD_INT 60
30315: PUSH
30316: LD_INT 61
30318: PUSH
30319: LD_INT 62
30321: PUSH
30322: LD_INT 80
30324: PUSH
30325: LD_INT 82
30327: PUSH
30328: LD_INT 83
30330: PUSH
30331: LD_INT 84
30333: PUSH
30334: LD_INT 85
30336: PUSH
30337: LD_INT 86
30339: PUSH
30340: LD_INT 90
30342: PUSH
30343: LD_INT 93
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: ST_TO_ADDR
30401: GO 30884
30403: LD_INT 2
30405: DOUBLE
30406: EQUAL
30407: IFTRUE 30411
30409: GO 30645
30411: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
30412: LD_ADDR_VAR 0 4
30416: PUSH
30417: LD_INT 35
30419: PUSH
30420: LD_INT 45
30422: PUSH
30423: LD_INT 46
30425: PUSH
30426: LD_INT 47
30428: PUSH
30429: LD_INT 82
30431: PUSH
30432: LD_INT 83
30434: PUSH
30435: LD_INT 84
30437: PUSH
30438: LD_INT 85
30440: PUSH
30441: LD_INT 87
30443: PUSH
30444: LD_INT 70
30446: PUSH
30447: LD_INT 1
30449: PUSH
30450: LD_INT 11
30452: PUSH
30453: LD_INT 3
30455: PUSH
30456: LD_INT 4
30458: PUSH
30459: LD_INT 5
30461: PUSH
30462: LD_INT 6
30464: PUSH
30465: LD_INT 15
30467: PUSH
30468: LD_INT 18
30470: PUSH
30471: LD_INT 7
30473: PUSH
30474: LD_INT 17
30476: PUSH
30477: LD_INT 8
30479: PUSH
30480: LD_INT 20
30482: PUSH
30483: LD_INT 21
30485: PUSH
30486: LD_INT 22
30488: PUSH
30489: LD_INT 72
30491: PUSH
30492: LD_INT 26
30494: PUSH
30495: LD_INT 69
30497: PUSH
30498: LD_INT 39
30500: PUSH
30501: LD_INT 40
30503: PUSH
30504: LD_INT 41
30506: PUSH
30507: LD_INT 42
30509: PUSH
30510: LD_INT 43
30512: PUSH
30513: LD_INT 48
30515: PUSH
30516: LD_INT 49
30518: PUSH
30519: LD_INT 50
30521: PUSH
30522: LD_INT 51
30524: PUSH
30525: LD_INT 52
30527: PUSH
30528: LD_INT 53
30530: PUSH
30531: LD_INT 54
30533: PUSH
30534: LD_INT 55
30536: PUSH
30537: LD_INT 56
30539: PUSH
30540: LD_INT 60
30542: PUSH
30543: LD_INT 61
30545: PUSH
30546: LD_INT 62
30548: PUSH
30549: LD_INT 66
30551: PUSH
30552: LD_INT 67
30554: PUSH
30555: LD_INT 68
30557: PUSH
30558: LD_INT 81
30560: PUSH
30561: LD_INT 82
30563: PUSH
30564: LD_INT 83
30566: PUSH
30567: LD_INT 84
30569: PUSH
30570: LD_INT 85
30572: PUSH
30573: LD_INT 87
30575: PUSH
30576: LD_INT 88
30578: PUSH
30579: LD_INT 92
30581: PUSH
30582: LD_INT 94
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: ST_TO_ADDR
30643: GO 30884
30645: LD_INT 3
30647: DOUBLE
30648: EQUAL
30649: IFTRUE 30653
30651: GO 30883
30653: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
30654: LD_ADDR_VAR 0 4
30658: PUSH
30659: LD_INT 46
30661: PUSH
30662: LD_INT 47
30664: PUSH
30665: LD_INT 1
30667: PUSH
30668: LD_INT 2
30670: PUSH
30671: LD_INT 82
30673: PUSH
30674: LD_INT 83
30676: PUSH
30677: LD_INT 84
30679: PUSH
30680: LD_INT 85
30682: PUSH
30683: LD_INT 86
30685: PUSH
30686: LD_INT 11
30688: PUSH
30689: LD_INT 9
30691: PUSH
30692: LD_INT 20
30694: PUSH
30695: LD_INT 19
30697: PUSH
30698: LD_INT 21
30700: PUSH
30701: LD_INT 24
30703: PUSH
30704: LD_INT 22
30706: PUSH
30707: LD_INT 25
30709: PUSH
30710: LD_INT 28
30712: PUSH
30713: LD_INT 29
30715: PUSH
30716: LD_INT 30
30718: PUSH
30719: LD_INT 31
30721: PUSH
30722: LD_INT 37
30724: PUSH
30725: LD_INT 38
30727: PUSH
30728: LD_INT 32
30730: PUSH
30731: LD_INT 27
30733: PUSH
30734: LD_INT 33
30736: PUSH
30737: LD_INT 69
30739: PUSH
30740: LD_INT 39
30742: PUSH
30743: LD_INT 34
30745: PUSH
30746: LD_INT 40
30748: PUSH
30749: LD_INT 71
30751: PUSH
30752: LD_INT 23
30754: PUSH
30755: LD_INT 44
30757: PUSH
30758: LD_INT 48
30760: PUSH
30761: LD_INT 49
30763: PUSH
30764: LD_INT 50
30766: PUSH
30767: LD_INT 51
30769: PUSH
30770: LD_INT 52
30772: PUSH
30773: LD_INT 53
30775: PUSH
30776: LD_INT 54
30778: PUSH
30779: LD_INT 55
30781: PUSH
30782: LD_INT 56
30784: PUSH
30785: LD_INT 57
30787: PUSH
30788: LD_INT 58
30790: PUSH
30791: LD_INT 59
30793: PUSH
30794: LD_INT 63
30796: PUSH
30797: LD_INT 64
30799: PUSH
30800: LD_INT 65
30802: PUSH
30803: LD_INT 82
30805: PUSH
30806: LD_INT 83
30808: PUSH
30809: LD_INT 84
30811: PUSH
30812: LD_INT 85
30814: PUSH
30815: LD_INT 86
30817: PUSH
30818: LD_INT 89
30820: PUSH
30821: LD_INT 91
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: ST_TO_ADDR
30881: GO 30884
30883: POP
// if state > - 1 and state < 3 then
30884: LD_VAR 0 3
30888: PUSH
30889: LD_INT 1
30891: NEG
30892: GREATER
30893: IFFALSE 30905
30895: PUSH
30896: LD_VAR 0 3
30900: PUSH
30901: LD_INT 3
30903: LESS
30904: AND
30905: IFFALSE 30962
// for i in result do
30907: LD_ADDR_VAR 0 5
30911: PUSH
30912: LD_VAR 0 4
30916: PUSH
30917: FOR_IN
30918: IFFALSE 30960
// if GetTech ( i , side ) <> state then
30920: LD_VAR 0 5
30924: PPUSH
30925: LD_VAR 0 1
30929: PPUSH
30930: CALL_OW 321
30934: PUSH
30935: LD_VAR 0 3
30939: NONEQUAL
30940: IFFALSE 30958
// result := result diff i ;
30942: LD_ADDR_VAR 0 4
30946: PUSH
30947: LD_VAR 0 4
30951: PUSH
30952: LD_VAR 0 5
30956: DIFF
30957: ST_TO_ADDR
30958: GO 30917
30960: POP
30961: POP
// end ;
30962: LD_VAR 0 4
30966: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30967: LD_INT 0
30969: PPUSH
30970: PPUSH
30971: PPUSH
// result := true ;
30972: LD_ADDR_VAR 0 3
30976: PUSH
30977: LD_INT 1
30979: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30980: LD_ADDR_VAR 0 5
30984: PUSH
30985: LD_VAR 0 2
30989: PPUSH
30990: CALL_OW 480
30994: ST_TO_ADDR
// if not tmp then
30995: LD_VAR 0 5
30999: NOT
31000: IFFALSE 31004
// exit ;
31002: GO 31053
// for i in tmp do
31004: LD_ADDR_VAR 0 4
31008: PUSH
31009: LD_VAR 0 5
31013: PUSH
31014: FOR_IN
31015: IFFALSE 31051
// if GetTech ( i , side ) <> state_researched then
31017: LD_VAR 0 4
31021: PPUSH
31022: LD_VAR 0 1
31026: PPUSH
31027: CALL_OW 321
31031: PUSH
31032: LD_INT 2
31034: NONEQUAL
31035: IFFALSE 31049
// begin result := false ;
31037: LD_ADDR_VAR 0 3
31041: PUSH
31042: LD_INT 0
31044: ST_TO_ADDR
// exit ;
31045: POP
31046: POP
31047: GO 31053
// end ;
31049: GO 31014
31051: POP
31052: POP
// end ;
31053: LD_VAR 0 3
31057: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31058: LD_INT 0
31060: PPUSH
31061: PPUSH
31062: PPUSH
31063: PPUSH
31064: PPUSH
31065: PPUSH
31066: PPUSH
31067: PPUSH
31068: PPUSH
31069: PPUSH
31070: PPUSH
31071: PPUSH
31072: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31073: LD_VAR 0 1
31077: NOT
31078: IFTRUE 31095
31080: PUSH
31081: LD_VAR 0 1
31085: PPUSH
31086: CALL_OW 257
31090: PUSH
31091: LD_INT 9
31093: NONEQUAL
31094: OR
31095: IFFALSE 31099
// exit ;
31097: GO 31678
// side := GetSide ( unit ) ;
31099: LD_ADDR_VAR 0 9
31103: PUSH
31104: LD_VAR 0 1
31108: PPUSH
31109: CALL_OW 255
31113: ST_TO_ADDR
// tech_space := tech_spacanom ;
31114: LD_ADDR_VAR 0 12
31118: PUSH
31119: LD_INT 29
31121: ST_TO_ADDR
// tech_time := tech_taurad ;
31122: LD_ADDR_VAR 0 13
31126: PUSH
31127: LD_INT 28
31129: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31130: LD_ADDR_VAR 0 11
31134: PUSH
31135: LD_VAR 0 1
31139: PPUSH
31140: CALL_OW 310
31144: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31145: LD_VAR 0 11
31149: PPUSH
31150: CALL_OW 247
31154: PUSH
31155: LD_INT 2
31157: EQUAL
31158: IFFALSE 31162
// exit ;
31160: GO 31678
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31162: LD_ADDR_VAR 0 8
31166: PUSH
31167: LD_INT 81
31169: PUSH
31170: LD_VAR 0 9
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 3
31181: PUSH
31182: LD_INT 21
31184: PUSH
31185: LD_INT 3
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PPUSH
31200: CALL_OW 69
31204: ST_TO_ADDR
// if not tmp then
31205: LD_VAR 0 8
31209: NOT
31210: IFFALSE 31214
// exit ;
31212: GO 31678
// if in_unit then
31214: LD_VAR 0 11
31218: IFFALSE 31242
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31220: LD_ADDR_VAR 0 10
31224: PUSH
31225: LD_VAR 0 8
31229: PPUSH
31230: LD_VAR 0 11
31234: PPUSH
31235: CALL_OW 74
31239: ST_TO_ADDR
31240: GO 31262
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31242: LD_ADDR_VAR 0 10
31246: PUSH
31247: LD_VAR 0 8
31251: PPUSH
31252: LD_VAR 0 1
31256: PPUSH
31257: CALL_OW 74
31261: ST_TO_ADDR
// if not enemy then
31262: LD_VAR 0 10
31266: NOT
31267: IFFALSE 31271
// exit ;
31269: GO 31678
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31271: LD_VAR 0 11
31275: IFFALSE 31297
31277: PUSH
31278: LD_VAR 0 11
31282: PPUSH
31283: LD_VAR 0 10
31287: PPUSH
31288: CALL_OW 296
31292: PUSH
31293: LD_INT 13
31295: GREATER
31296: AND
31297: IFTRUE 31319
31299: PUSH
31300: LD_VAR 0 1
31304: PPUSH
31305: LD_VAR 0 10
31309: PPUSH
31310: CALL_OW 296
31314: PUSH
31315: LD_INT 12
31317: GREATER
31318: OR
31319: IFFALSE 31323
// exit ;
31321: GO 31678
// missile := [ 1 ] ;
31323: LD_ADDR_VAR 0 14
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: EMPTY
31332: LIST
31333: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31334: LD_VAR 0 9
31338: PPUSH
31339: LD_VAR 0 12
31343: PPUSH
31344: CALL_OW 325
31348: IFFALSE 31377
// missile := Replace ( missile , missile + 1 , 2 ) ;
31350: LD_ADDR_VAR 0 14
31354: PUSH
31355: LD_VAR 0 14
31359: PPUSH
31360: LD_VAR 0 14
31364: PUSH
31365: LD_INT 1
31367: PLUS
31368: PPUSH
31369: LD_INT 2
31371: PPUSH
31372: CALL_OW 1
31376: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31377: LD_VAR 0 9
31381: PPUSH
31382: LD_VAR 0 13
31386: PPUSH
31387: CALL_OW 325
31391: IFFALSE 31415
31393: PUSH
31394: LD_VAR 0 10
31398: PPUSH
31399: CALL_OW 255
31403: PPUSH
31404: LD_VAR 0 13
31408: PPUSH
31409: CALL_OW 325
31413: NOT
31414: AND
31415: IFFALSE 31444
// missile := Replace ( missile , missile + 1 , 3 ) ;
31417: LD_ADDR_VAR 0 14
31421: PUSH
31422: LD_VAR 0 14
31426: PPUSH
31427: LD_VAR 0 14
31431: PUSH
31432: LD_INT 1
31434: PLUS
31435: PPUSH
31436: LD_INT 3
31438: PPUSH
31439: CALL_OW 1
31443: ST_TO_ADDR
// if missile < 2 then
31444: LD_VAR 0 14
31448: PUSH
31449: LD_INT 2
31451: LESS
31452: IFFALSE 31456
// exit ;
31454: GO 31678
// x := GetX ( enemy ) ;
31456: LD_ADDR_VAR 0 4
31460: PUSH
31461: LD_VAR 0 10
31465: PPUSH
31466: CALL_OW 250
31470: ST_TO_ADDR
// y := GetY ( enemy ) ;
31471: LD_ADDR_VAR 0 5
31475: PUSH
31476: LD_VAR 0 10
31480: PPUSH
31481: CALL_OW 251
31485: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31486: LD_ADDR_VAR 0 6
31490: PUSH
31491: LD_VAR 0 4
31495: PUSH
31496: LD_INT 1
31498: NEG
31499: PPUSH
31500: LD_INT 1
31502: PPUSH
31503: CALL_OW 12
31507: PLUS
31508: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31509: LD_ADDR_VAR 0 7
31513: PUSH
31514: LD_VAR 0 5
31518: PUSH
31519: LD_INT 1
31521: NEG
31522: PPUSH
31523: LD_INT 1
31525: PPUSH
31526: CALL_OW 12
31530: PLUS
31531: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31532: LD_VAR 0 6
31536: PPUSH
31537: LD_VAR 0 7
31541: PPUSH
31542: CALL_OW 488
31546: NOT
31547: IFFALSE 31569
// begin _x := x ;
31549: LD_ADDR_VAR 0 6
31553: PUSH
31554: LD_VAR 0 4
31558: ST_TO_ADDR
// _y := y ;
31559: LD_ADDR_VAR 0 7
31563: PUSH
31564: LD_VAR 0 5
31568: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31569: LD_ADDR_VAR 0 3
31573: PUSH
31574: LD_INT 1
31576: PPUSH
31577: LD_VAR 0 14
31581: PPUSH
31582: CALL_OW 12
31586: ST_TO_ADDR
// case i of 1 :
31587: LD_VAR 0 3
31591: PUSH
31592: LD_INT 1
31594: DOUBLE
31595: EQUAL
31596: IFTRUE 31600
31598: GO 31617
31600: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31601: LD_VAR 0 1
31605: PPUSH
31606: LD_VAR 0 10
31610: PPUSH
31611: CALL_OW 115
31615: GO 31678
31617: LD_INT 2
31619: DOUBLE
31620: EQUAL
31621: IFTRUE 31625
31623: GO 31647
31625: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31626: LD_VAR 0 1
31630: PPUSH
31631: LD_VAR 0 6
31635: PPUSH
31636: LD_VAR 0 7
31640: PPUSH
31641: CALL_OW 153
31645: GO 31678
31647: LD_INT 3
31649: DOUBLE
31650: EQUAL
31651: IFTRUE 31655
31653: GO 31677
31655: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31656: LD_VAR 0 1
31660: PPUSH
31661: LD_VAR 0 6
31665: PPUSH
31666: LD_VAR 0 7
31670: PPUSH
31671: CALL_OW 154
31675: GO 31678
31677: POP
// end ;
31678: LD_VAR 0 2
31682: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31683: LD_INT 0
31685: PPUSH
31686: PPUSH
31687: PPUSH
31688: PPUSH
31689: PPUSH
31690: PPUSH
// if not unit or not building then
31691: LD_VAR 0 1
31695: NOT
31696: IFTRUE 31705
31698: PUSH
31699: LD_VAR 0 2
31703: NOT
31704: OR
31705: IFFALSE 31709
// exit ;
31707: GO 31867
// x := GetX ( building ) ;
31709: LD_ADDR_VAR 0 5
31713: PUSH
31714: LD_VAR 0 2
31718: PPUSH
31719: CALL_OW 250
31723: ST_TO_ADDR
// y := GetY ( building ) ;
31724: LD_ADDR_VAR 0 6
31728: PUSH
31729: LD_VAR 0 2
31733: PPUSH
31734: CALL_OW 251
31738: ST_TO_ADDR
// for i := 0 to 5 do
31739: LD_ADDR_VAR 0 4
31743: PUSH
31744: DOUBLE
31745: LD_INT 0
31747: DEC
31748: ST_TO_ADDR
31749: LD_INT 5
31751: PUSH
31752: FOR_TO
31753: IFFALSE 31865
// begin _x := ShiftX ( x , i , 3 ) ;
31755: LD_ADDR_VAR 0 7
31759: PUSH
31760: LD_VAR 0 5
31764: PPUSH
31765: LD_VAR 0 4
31769: PPUSH
31770: LD_INT 3
31772: PPUSH
31773: CALL_OW 272
31777: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31778: LD_ADDR_VAR 0 8
31782: PUSH
31783: LD_VAR 0 6
31787: PPUSH
31788: LD_VAR 0 4
31792: PPUSH
31793: LD_INT 3
31795: PPUSH
31796: CALL_OW 273
31800: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31801: LD_VAR 0 7
31805: PPUSH
31806: LD_VAR 0 8
31810: PPUSH
31811: CALL_OW 488
31815: NOT
31816: IFFALSE 31820
// continue ;
31818: GO 31752
// if HexInfo ( _x , _y ) = 0 then
31820: LD_VAR 0 7
31824: PPUSH
31825: LD_VAR 0 8
31829: PPUSH
31830: CALL_OW 428
31834: PUSH
31835: LD_INT 0
31837: EQUAL
31838: IFFALSE 31863
// begin ComMoveXY ( unit , _x , _y ) ;
31840: LD_VAR 0 1
31844: PPUSH
31845: LD_VAR 0 7
31849: PPUSH
31850: LD_VAR 0 8
31854: PPUSH
31855: CALL_OW 111
// exit ;
31859: POP
31860: POP
31861: GO 31867
// end ; end ;
31863: GO 31752
31865: POP
31866: POP
// end ;
31867: LD_VAR 0 3
31871: RET
// export function ScanBase ( side , base_area ) ; begin
31872: LD_INT 0
31874: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31875: LD_ADDR_VAR 0 3
31879: PUSH
31880: LD_VAR 0 2
31884: PPUSH
31885: LD_INT 81
31887: PUSH
31888: LD_VAR 0 1
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PPUSH
31897: CALL_OW 70
31901: ST_TO_ADDR
// end ;
31902: LD_VAR 0 3
31906: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31907: LD_INT 0
31909: PPUSH
31910: PPUSH
31911: PPUSH
31912: PPUSH
// result := false ;
31913: LD_ADDR_VAR 0 2
31917: PUSH
31918: LD_INT 0
31920: ST_TO_ADDR
// side := GetSide ( unit ) ;
31921: LD_ADDR_VAR 0 3
31925: PUSH
31926: LD_VAR 0 1
31930: PPUSH
31931: CALL_OW 255
31935: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31936: LD_ADDR_VAR 0 4
31940: PUSH
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 248
31950: ST_TO_ADDR
// case nat of 1 :
31951: LD_VAR 0 4
31955: PUSH
31956: LD_INT 1
31958: DOUBLE
31959: EQUAL
31960: IFTRUE 31964
31962: GO 31975
31964: POP
// tech := tech_lassight ; 2 :
31965: LD_ADDR_VAR 0 5
31969: PUSH
31970: LD_INT 12
31972: ST_TO_ADDR
31973: GO 32014
31975: LD_INT 2
31977: DOUBLE
31978: EQUAL
31979: IFTRUE 31983
31981: GO 31994
31983: POP
// tech := tech_mortar ; 3 :
31984: LD_ADDR_VAR 0 5
31988: PUSH
31989: LD_INT 41
31991: ST_TO_ADDR
31992: GO 32014
31994: LD_INT 3
31996: DOUBLE
31997: EQUAL
31998: IFTRUE 32002
32000: GO 32013
32002: POP
// tech := tech_bazooka ; end ;
32003: LD_ADDR_VAR 0 5
32007: PUSH
32008: LD_INT 44
32010: ST_TO_ADDR
32011: GO 32014
32013: POP
// if Researched ( side , tech ) then
32014: LD_VAR 0 3
32018: PPUSH
32019: LD_VAR 0 5
32023: PPUSH
32024: CALL_OW 325
32028: IFFALSE 32055
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32030: LD_ADDR_VAR 0 2
32034: PUSH
32035: LD_INT 5
32037: PUSH
32038: LD_INT 8
32040: PUSH
32041: LD_INT 9
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: LIST
32048: PUSH
32049: LD_VAR 0 4
32053: ARRAY
32054: ST_TO_ADDR
// end ;
32055: LD_VAR 0 2
32059: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32060: LD_INT 0
32062: PPUSH
32063: PPUSH
32064: PPUSH
// if not mines then
32065: LD_VAR 0 2
32069: NOT
32070: IFFALSE 32074
// exit ;
32072: GO 32218
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32074: LD_ADDR_VAR 0 5
32078: PUSH
32079: LD_INT 81
32081: PUSH
32082: LD_VAR 0 1
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 3
32093: PUSH
32094: LD_INT 21
32096: PUSH
32097: LD_INT 3
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PPUSH
32112: CALL_OW 69
32116: ST_TO_ADDR
// for i in mines do
32117: LD_ADDR_VAR 0 4
32121: PUSH
32122: LD_VAR 0 2
32126: PUSH
32127: FOR_IN
32128: IFFALSE 32216
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32130: LD_VAR 0 4
32134: PUSH
32135: LD_INT 1
32137: ARRAY
32138: PPUSH
32139: LD_VAR 0 4
32143: PUSH
32144: LD_INT 2
32146: ARRAY
32147: PPUSH
32148: CALL_OW 458
32152: NOT
32153: IFFALSE 32157
// continue ;
32155: GO 32127
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32157: LD_VAR 0 4
32161: PUSH
32162: LD_INT 1
32164: ARRAY
32165: PPUSH
32166: LD_VAR 0 4
32170: PUSH
32171: LD_INT 2
32173: ARRAY
32174: PPUSH
32175: CALL_OW 428
32179: PUSH
32180: LD_VAR 0 5
32184: IN
32185: IFFALSE 32214
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32187: LD_VAR 0 4
32191: PUSH
32192: LD_INT 1
32194: ARRAY
32195: PPUSH
32196: LD_VAR 0 4
32200: PUSH
32201: LD_INT 2
32203: ARRAY
32204: PPUSH
32205: LD_VAR 0 1
32209: PPUSH
32210: CALL_OW 456
// end ;
32214: GO 32127
32216: POP
32217: POP
// end ;
32218: LD_VAR 0 3
32222: RET
// export function Count ( array ) ; begin
32223: LD_INT 0
32225: PPUSH
// result := array + 0 ;
32226: LD_ADDR_VAR 0 2
32230: PUSH
32231: LD_VAR 0 1
32235: PUSH
32236: LD_INT 0
32238: PLUS
32239: ST_TO_ADDR
// end ;
32240: LD_VAR 0 2
32244: RET
// export function IsEmpty ( building ) ; begin
32245: LD_INT 0
32247: PPUSH
// if not building then
32248: LD_VAR 0 1
32252: NOT
32253: IFFALSE 32257
// exit ;
32255: GO 32300
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32257: LD_ADDR_VAR 0 2
32261: PUSH
32262: LD_VAR 0 1
32266: PUSH
32267: LD_INT 22
32269: PUSH
32270: LD_VAR 0 1
32274: PPUSH
32275: CALL_OW 255
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 58
32286: PUSH
32287: EMPTY
32288: LIST
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PPUSH
32294: CALL_OW 69
32298: IN
32299: ST_TO_ADDR
// end ;
32300: LD_VAR 0 2
32304: RET
// export function IsNotFull ( building ) ; var places ; begin
32305: LD_INT 0
32307: PPUSH
32308: PPUSH
// if not building then
32309: LD_VAR 0 1
32313: NOT
32314: IFFALSE 32318
// exit ;
32316: GO 32346
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32318: LD_ADDR_VAR 0 2
32322: PUSH
32323: LD_VAR 0 1
32327: PPUSH
32328: LD_INT 3
32330: PUSH
32331: LD_INT 62
32333: PUSH
32334: EMPTY
32335: LIST
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PPUSH
32341: CALL_OW 72
32345: ST_TO_ADDR
// end ;
32346: LD_VAR 0 2
32350: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32351: LD_INT 0
32353: PPUSH
32354: PPUSH
32355: PPUSH
32356: PPUSH
// tmp := [ ] ;
32357: LD_ADDR_VAR 0 3
32361: PUSH
32362: EMPTY
32363: ST_TO_ADDR
// list := [ ] ;
32364: LD_ADDR_VAR 0 5
32368: PUSH
32369: EMPTY
32370: ST_TO_ADDR
// for i = 16 to 25 do
32371: LD_ADDR_VAR 0 4
32375: PUSH
32376: DOUBLE
32377: LD_INT 16
32379: DEC
32380: ST_TO_ADDR
32381: LD_INT 25
32383: PUSH
32384: FOR_TO
32385: IFFALSE 32458
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32387: LD_ADDR_VAR 0 3
32391: PUSH
32392: LD_VAR 0 3
32396: PUSH
32397: LD_INT 22
32399: PUSH
32400: LD_VAR 0 1
32404: PPUSH
32405: CALL_OW 255
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 91
32416: PUSH
32417: LD_VAR 0 1
32421: PUSH
32422: LD_INT 6
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 30
32432: PUSH
32433: LD_VAR 0 4
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: LIST
32446: PUSH
32447: EMPTY
32448: LIST
32449: PPUSH
32450: CALL_OW 69
32454: ADD
32455: ST_TO_ADDR
32456: GO 32384
32458: POP
32459: POP
// for i = 1 to tmp do
32460: LD_ADDR_VAR 0 4
32464: PUSH
32465: DOUBLE
32466: LD_INT 1
32468: DEC
32469: ST_TO_ADDR
32470: LD_VAR 0 3
32474: PUSH
32475: FOR_TO
32476: IFFALSE 32564
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32478: LD_ADDR_VAR 0 5
32482: PUSH
32483: LD_VAR 0 5
32487: PUSH
32488: LD_VAR 0 3
32492: PUSH
32493: LD_VAR 0 4
32497: ARRAY
32498: PPUSH
32499: CALL_OW 266
32503: PUSH
32504: LD_VAR 0 3
32508: PUSH
32509: LD_VAR 0 4
32513: ARRAY
32514: PPUSH
32515: CALL_OW 250
32519: PUSH
32520: LD_VAR 0 3
32524: PUSH
32525: LD_VAR 0 4
32529: ARRAY
32530: PPUSH
32531: CALL_OW 251
32535: PUSH
32536: LD_VAR 0 3
32540: PUSH
32541: LD_VAR 0 4
32545: ARRAY
32546: PPUSH
32547: CALL_OW 254
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: PUSH
32558: EMPTY
32559: LIST
32560: ADD
32561: ST_TO_ADDR
32562: GO 32475
32564: POP
32565: POP
// result := list ;
32566: LD_ADDR_VAR 0 2
32570: PUSH
32571: LD_VAR 0 5
32575: ST_TO_ADDR
// end ;
32576: LD_VAR 0 2
32580: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32581: LD_INT 0
32583: PPUSH
32584: PPUSH
32585: PPUSH
32586: PPUSH
32587: PPUSH
32588: PPUSH
32589: PPUSH
// if not factory then
32590: LD_VAR 0 1
32594: NOT
32595: IFFALSE 32599
// exit ;
32597: GO 33202
// if control = control_apeman then
32599: LD_VAR 0 4
32603: PUSH
32604: LD_INT 5
32606: EQUAL
32607: IFFALSE 32716
// begin tmp := UnitsInside ( factory ) ;
32609: LD_ADDR_VAR 0 8
32613: PUSH
32614: LD_VAR 0 1
32618: PPUSH
32619: CALL_OW 313
32623: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32624: LD_VAR 0 8
32628: PPUSH
32629: LD_INT 25
32631: PUSH
32632: LD_INT 12
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PPUSH
32639: CALL_OW 72
32643: NOT
32644: IFFALSE 32654
// control := control_manual ;
32646: LD_ADDR_VAR 0 4
32650: PUSH
32651: LD_INT 1
32653: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32654: LD_ADDR_VAR 0 8
32658: PUSH
32659: LD_VAR 0 1
32663: PPUSH
32664: CALL 32351 0 1
32668: ST_TO_ADDR
// if tmp then
32669: LD_VAR 0 8
32673: IFFALSE 32716
// begin for i in tmp do
32675: LD_ADDR_VAR 0 7
32679: PUSH
32680: LD_VAR 0 8
32684: PUSH
32685: FOR_IN
32686: IFFALSE 32714
// if i [ 1 ] = b_ext_radio then
32688: LD_VAR 0 7
32692: PUSH
32693: LD_INT 1
32695: ARRAY
32696: PUSH
32697: LD_INT 22
32699: EQUAL
32700: IFFALSE 32712
// begin control := control_remote ;
32702: LD_ADDR_VAR 0 4
32706: PUSH
32707: LD_INT 2
32709: ST_TO_ADDR
// break ;
32710: GO 32714
// end ;
32712: GO 32685
32714: POP
32715: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32716: LD_VAR 0 1
32720: PPUSH
32721: LD_VAR 0 2
32725: PPUSH
32726: LD_VAR 0 3
32730: PPUSH
32731: LD_VAR 0 4
32735: PPUSH
32736: LD_VAR 0 5
32740: PPUSH
32741: CALL_OW 448
32745: IFFALSE 32780
// begin result := [ chassis , engine , control , weapon ] ;
32747: LD_ADDR_VAR 0 6
32751: PUSH
32752: LD_VAR 0 2
32756: PUSH
32757: LD_VAR 0 3
32761: PUSH
32762: LD_VAR 0 4
32766: PUSH
32767: LD_VAR 0 5
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: ST_TO_ADDR
// exit ;
32778: GO 33202
// end ; _chassis := AvailableChassisList ( factory ) ;
32780: LD_ADDR_VAR 0 9
32784: PUSH
32785: LD_VAR 0 1
32789: PPUSH
32790: CALL_OW 475
32794: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32795: LD_ADDR_VAR 0 11
32799: PUSH
32800: LD_VAR 0 1
32804: PPUSH
32805: CALL_OW 476
32809: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32810: LD_ADDR_VAR 0 12
32814: PUSH
32815: LD_VAR 0 1
32819: PPUSH
32820: CALL_OW 477
32824: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32825: LD_ADDR_VAR 0 10
32829: PUSH
32830: LD_VAR 0 1
32834: PPUSH
32835: CALL_OW 478
32839: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32840: LD_VAR 0 9
32844: NOT
32845: IFTRUE 32854
32847: PUSH
32848: LD_VAR 0 11
32852: NOT
32853: OR
32854: IFTRUE 32863
32856: PUSH
32857: LD_VAR 0 12
32861: NOT
32862: OR
32863: IFTRUE 32872
32865: PUSH
32866: LD_VAR 0 10
32870: NOT
32871: OR
32872: IFFALSE 32907
// begin result := [ chassis , engine , control , weapon ] ;
32874: LD_ADDR_VAR 0 6
32878: PUSH
32879: LD_VAR 0 2
32883: PUSH
32884: LD_VAR 0 3
32888: PUSH
32889: LD_VAR 0 4
32893: PUSH
32894: LD_VAR 0 5
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: ST_TO_ADDR
// exit ;
32905: GO 33202
// end ; if not chassis in _chassis then
32907: LD_VAR 0 2
32911: PUSH
32912: LD_VAR 0 9
32916: IN
32917: NOT
32918: IFFALSE 32944
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32920: LD_ADDR_VAR 0 2
32924: PUSH
32925: LD_VAR 0 9
32929: PUSH
32930: LD_INT 1
32932: PPUSH
32933: LD_VAR 0 9
32937: PPUSH
32938: CALL_OW 12
32942: ARRAY
32943: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32944: LD_VAR 0 2
32948: PPUSH
32949: LD_VAR 0 3
32953: PPUSH
32954: CALL 33207 0 2
32958: NOT
32959: IFFALSE 33020
// repeat engine := _engine [ 1 ] ;
32961: LD_ADDR_VAR 0 3
32965: PUSH
32966: LD_VAR 0 11
32970: PUSH
32971: LD_INT 1
32973: ARRAY
32974: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32975: LD_ADDR_VAR 0 11
32979: PUSH
32980: LD_VAR 0 11
32984: PPUSH
32985: LD_INT 1
32987: PPUSH
32988: CALL_OW 3
32992: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32993: LD_VAR 0 2
32997: PPUSH
32998: LD_VAR 0 3
33002: PPUSH
33003: CALL 33207 0 2
33007: IFTRUE 33018
33009: PUSH
33010: LD_VAR 0 11
33014: PUSH
33015: EMPTY
33016: EQUAL
33017: OR
33018: IFFALSE 32961
// if not control in _control then
33020: LD_VAR 0 4
33024: PUSH
33025: LD_VAR 0 12
33029: IN
33030: NOT
33031: IFFALSE 33057
// control := _control [ rand ( 1 , _control ) ] ;
33033: LD_ADDR_VAR 0 4
33037: PUSH
33038: LD_VAR 0 12
33042: PUSH
33043: LD_INT 1
33045: PPUSH
33046: LD_VAR 0 12
33050: PPUSH
33051: CALL_OW 12
33055: ARRAY
33056: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33057: LD_VAR 0 2
33061: PPUSH
33062: LD_VAR 0 5
33066: PPUSH
33067: CALL 33429 0 2
33071: NOT
33072: IFFALSE 33133
// repeat weapon := _weapon [ 1 ] ;
33074: LD_ADDR_VAR 0 5
33078: PUSH
33079: LD_VAR 0 10
33083: PUSH
33084: LD_INT 1
33086: ARRAY
33087: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33088: LD_ADDR_VAR 0 10
33092: PUSH
33093: LD_VAR 0 10
33097: PPUSH
33098: LD_INT 1
33100: PPUSH
33101: CALL_OW 3
33105: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33106: LD_VAR 0 2
33110: PPUSH
33111: LD_VAR 0 5
33115: PPUSH
33116: CALL 33429 0 2
33120: IFTRUE 33131
33122: PUSH
33123: LD_VAR 0 10
33127: PUSH
33128: EMPTY
33129: EQUAL
33130: OR
33131: IFFALSE 33074
// result := [ ] ;
33133: LD_ADDR_VAR 0 6
33137: PUSH
33138: EMPTY
33139: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33140: LD_VAR 0 1
33144: PPUSH
33145: LD_VAR 0 2
33149: PPUSH
33150: LD_VAR 0 3
33154: PPUSH
33155: LD_VAR 0 4
33159: PPUSH
33160: LD_VAR 0 5
33164: PPUSH
33165: CALL_OW 448
33169: IFFALSE 33202
// result := [ chassis , engine , control , weapon ] ;
33171: LD_ADDR_VAR 0 6
33175: PUSH
33176: LD_VAR 0 2
33180: PUSH
33181: LD_VAR 0 3
33185: PUSH
33186: LD_VAR 0 4
33190: PUSH
33191: LD_VAR 0 5
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: ST_TO_ADDR
// end ;
33202: LD_VAR 0 6
33206: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33207: LD_INT 0
33209: PPUSH
// if not chassis or not engine then
33210: LD_VAR 0 1
33214: NOT
33215: IFTRUE 33224
33217: PUSH
33218: LD_VAR 0 2
33222: NOT
33223: OR
33224: IFFALSE 33228
// exit ;
33226: GO 33424
// case engine of engine_solar :
33228: LD_VAR 0 2
33232: PUSH
33233: LD_INT 2
33235: DOUBLE
33236: EQUAL
33237: IFTRUE 33241
33239: GO 33279
33241: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33242: LD_ADDR_VAR 0 3
33246: PUSH
33247: LD_INT 11
33249: PUSH
33250: LD_INT 12
33252: PUSH
33253: LD_INT 13
33255: PUSH
33256: LD_INT 14
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: LD_INT 2
33264: PUSH
33265: LD_INT 3
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: ST_TO_ADDR
33277: GO 33408
33279: LD_INT 1
33281: DOUBLE
33282: EQUAL
33283: IFTRUE 33287
33285: GO 33349
33287: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33288: LD_ADDR_VAR 0 3
33292: PUSH
33293: LD_INT 11
33295: PUSH
33296: LD_INT 12
33298: PUSH
33299: LD_INT 13
33301: PUSH
33302: LD_INT 14
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: LD_INT 2
33310: PUSH
33311: LD_INT 3
33313: PUSH
33314: LD_INT 4
33316: PUSH
33317: LD_INT 5
33319: PUSH
33320: LD_INT 21
33322: PUSH
33323: LD_INT 23
33325: PUSH
33326: LD_INT 22
33328: PUSH
33329: LD_INT 24
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: ST_TO_ADDR
33347: GO 33408
33349: LD_INT 3
33351: DOUBLE
33352: EQUAL
33353: IFTRUE 33357
33355: GO 33407
33357: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33358: LD_ADDR_VAR 0 3
33362: PUSH
33363: LD_INT 13
33365: PUSH
33366: LD_INT 14
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: LD_INT 3
33374: PUSH
33375: LD_INT 4
33377: PUSH
33378: LD_INT 5
33380: PUSH
33381: LD_INT 21
33383: PUSH
33384: LD_INT 22
33386: PUSH
33387: LD_INT 23
33389: PUSH
33390: LD_INT 24
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: ST_TO_ADDR
33405: GO 33408
33407: POP
// result := ( chassis in result ) ;
33408: LD_ADDR_VAR 0 3
33412: PUSH
33413: LD_VAR 0 1
33417: PUSH
33418: LD_VAR 0 3
33422: IN
33423: ST_TO_ADDR
// end ;
33424: LD_VAR 0 3
33428: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33429: LD_INT 0
33431: PPUSH
// if not chassis or not weapon then
33432: LD_VAR 0 1
33436: NOT
33437: IFTRUE 33446
33439: PUSH
33440: LD_VAR 0 2
33444: NOT
33445: OR
33446: IFFALSE 33450
// exit ;
33448: GO 34544
// case weapon of us_machine_gun :
33450: LD_VAR 0 2
33454: PUSH
33455: LD_INT 2
33457: DOUBLE
33458: EQUAL
33459: IFTRUE 33463
33461: GO 33493
33463: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33464: LD_ADDR_VAR 0 3
33468: PUSH
33469: LD_INT 1
33471: PUSH
33472: LD_INT 2
33474: PUSH
33475: LD_INT 3
33477: PUSH
33478: LD_INT 4
33480: PUSH
33481: LD_INT 5
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: ST_TO_ADDR
33491: GO 34528
33493: LD_INT 3
33495: DOUBLE
33496: EQUAL
33497: IFTRUE 33501
33499: GO 33531
33501: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33502: LD_ADDR_VAR 0 3
33506: PUSH
33507: LD_INT 1
33509: PUSH
33510: LD_INT 2
33512: PUSH
33513: LD_INT 3
33515: PUSH
33516: LD_INT 4
33518: PUSH
33519: LD_INT 5
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: ST_TO_ADDR
33529: GO 34528
33531: LD_INT 11
33533: DOUBLE
33534: EQUAL
33535: IFTRUE 33539
33537: GO 33569
33539: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33540: LD_ADDR_VAR 0 3
33544: PUSH
33545: LD_INT 1
33547: PUSH
33548: LD_INT 2
33550: PUSH
33551: LD_INT 3
33553: PUSH
33554: LD_INT 4
33556: PUSH
33557: LD_INT 5
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: ST_TO_ADDR
33567: GO 34528
33569: LD_INT 4
33571: DOUBLE
33572: EQUAL
33573: IFTRUE 33577
33575: GO 33603
33577: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33578: LD_ADDR_VAR 0 3
33582: PUSH
33583: LD_INT 2
33585: PUSH
33586: LD_INT 3
33588: PUSH
33589: LD_INT 4
33591: PUSH
33592: LD_INT 5
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: ST_TO_ADDR
33601: GO 34528
33603: LD_INT 5
33605: DOUBLE
33606: EQUAL
33607: IFTRUE 33611
33609: GO 33637
33611: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33612: LD_ADDR_VAR 0 3
33616: PUSH
33617: LD_INT 2
33619: PUSH
33620: LD_INT 3
33622: PUSH
33623: LD_INT 4
33625: PUSH
33626: LD_INT 5
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: ST_TO_ADDR
33635: GO 34528
33637: LD_INT 9
33639: DOUBLE
33640: EQUAL
33641: IFTRUE 33645
33643: GO 33671
33645: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33646: LD_ADDR_VAR 0 3
33650: PUSH
33651: LD_INT 2
33653: PUSH
33654: LD_INT 3
33656: PUSH
33657: LD_INT 4
33659: PUSH
33660: LD_INT 5
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: ST_TO_ADDR
33669: GO 34528
33671: LD_INT 7
33673: DOUBLE
33674: EQUAL
33675: IFTRUE 33679
33677: GO 33705
33679: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33680: LD_ADDR_VAR 0 3
33684: PUSH
33685: LD_INT 2
33687: PUSH
33688: LD_INT 3
33690: PUSH
33691: LD_INT 4
33693: PUSH
33694: LD_INT 5
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: ST_TO_ADDR
33703: GO 34528
33705: LD_INT 12
33707: DOUBLE
33708: EQUAL
33709: IFTRUE 33713
33711: GO 33739
33713: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33714: LD_ADDR_VAR 0 3
33718: PUSH
33719: LD_INT 2
33721: PUSH
33722: LD_INT 3
33724: PUSH
33725: LD_INT 4
33727: PUSH
33728: LD_INT 5
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: ST_TO_ADDR
33737: GO 34528
33739: LD_INT 13
33741: DOUBLE
33742: EQUAL
33743: IFTRUE 33747
33745: GO 33773
33747: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33748: LD_ADDR_VAR 0 3
33752: PUSH
33753: LD_INT 2
33755: PUSH
33756: LD_INT 3
33758: PUSH
33759: LD_INT 4
33761: PUSH
33762: LD_INT 5
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: ST_TO_ADDR
33771: GO 34528
33773: LD_INT 14
33775: DOUBLE
33776: EQUAL
33777: IFTRUE 33781
33779: GO 33799
33781: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33782: LD_ADDR_VAR 0 3
33786: PUSH
33787: LD_INT 4
33789: PUSH
33790: LD_INT 5
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: ST_TO_ADDR
33797: GO 34528
33799: LD_INT 6
33801: DOUBLE
33802: EQUAL
33803: IFTRUE 33807
33805: GO 33825
33807: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33808: LD_ADDR_VAR 0 3
33812: PUSH
33813: LD_INT 4
33815: PUSH
33816: LD_INT 5
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: ST_TO_ADDR
33823: GO 34528
33825: LD_INT 10
33827: DOUBLE
33828: EQUAL
33829: IFTRUE 33833
33831: GO 33851
33833: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33834: LD_ADDR_VAR 0 3
33838: PUSH
33839: LD_INT 4
33841: PUSH
33842: LD_INT 5
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: ST_TO_ADDR
33849: GO 34528
33851: LD_INT 22
33853: DOUBLE
33854: EQUAL
33855: IFTRUE 33859
33857: GO 33885
33859: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33860: LD_ADDR_VAR 0 3
33864: PUSH
33865: LD_INT 11
33867: PUSH
33868: LD_INT 12
33870: PUSH
33871: LD_INT 13
33873: PUSH
33874: LD_INT 14
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: ST_TO_ADDR
33883: GO 34528
33885: LD_INT 23
33887: DOUBLE
33888: EQUAL
33889: IFTRUE 33893
33891: GO 33919
33893: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33894: LD_ADDR_VAR 0 3
33898: PUSH
33899: LD_INT 11
33901: PUSH
33902: LD_INT 12
33904: PUSH
33905: LD_INT 13
33907: PUSH
33908: LD_INT 14
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: ST_TO_ADDR
33917: GO 34528
33919: LD_INT 24
33921: DOUBLE
33922: EQUAL
33923: IFTRUE 33927
33925: GO 33953
33927: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33928: LD_ADDR_VAR 0 3
33932: PUSH
33933: LD_INT 11
33935: PUSH
33936: LD_INT 12
33938: PUSH
33939: LD_INT 13
33941: PUSH
33942: LD_INT 14
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: ST_TO_ADDR
33951: GO 34528
33953: LD_INT 30
33955: DOUBLE
33956: EQUAL
33957: IFTRUE 33961
33959: GO 33987
33961: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33962: LD_ADDR_VAR 0 3
33966: PUSH
33967: LD_INT 11
33969: PUSH
33970: LD_INT 12
33972: PUSH
33973: LD_INT 13
33975: PUSH
33976: LD_INT 14
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: ST_TO_ADDR
33985: GO 34528
33987: LD_INT 25
33989: DOUBLE
33990: EQUAL
33991: IFTRUE 33995
33993: GO 34013
33995: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33996: LD_ADDR_VAR 0 3
34000: PUSH
34001: LD_INT 13
34003: PUSH
34004: LD_INT 14
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: ST_TO_ADDR
34011: GO 34528
34013: LD_INT 27
34015: DOUBLE
34016: EQUAL
34017: IFTRUE 34021
34019: GO 34039
34021: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34022: LD_ADDR_VAR 0 3
34026: PUSH
34027: LD_INT 13
34029: PUSH
34030: LD_INT 14
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: ST_TO_ADDR
34037: GO 34528
34039: LD_INT 92
34041: DOUBLE
34042: EQUAL
34043: IFTRUE 34047
34045: GO 34073
34047: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34048: LD_ADDR_VAR 0 3
34052: PUSH
34053: LD_INT 11
34055: PUSH
34056: LD_INT 12
34058: PUSH
34059: LD_INT 13
34061: PUSH
34062: LD_INT 14
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: ST_TO_ADDR
34071: GO 34528
34073: LD_INT 28
34075: DOUBLE
34076: EQUAL
34077: IFTRUE 34081
34079: GO 34099
34081: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34082: LD_ADDR_VAR 0 3
34086: PUSH
34087: LD_INT 13
34089: PUSH
34090: LD_INT 14
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: ST_TO_ADDR
34097: GO 34528
34099: LD_INT 29
34101: DOUBLE
34102: EQUAL
34103: IFTRUE 34107
34105: GO 34125
34107: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34108: LD_ADDR_VAR 0 3
34112: PUSH
34113: LD_INT 13
34115: PUSH
34116: LD_INT 14
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: ST_TO_ADDR
34123: GO 34528
34125: LD_INT 31
34127: DOUBLE
34128: EQUAL
34129: IFTRUE 34133
34131: GO 34151
34133: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34134: LD_ADDR_VAR 0 3
34138: PUSH
34139: LD_INT 13
34141: PUSH
34142: LD_INT 14
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: ST_TO_ADDR
34149: GO 34528
34151: LD_INT 26
34153: DOUBLE
34154: EQUAL
34155: IFTRUE 34159
34157: GO 34177
34159: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34160: LD_ADDR_VAR 0 3
34164: PUSH
34165: LD_INT 13
34167: PUSH
34168: LD_INT 14
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: ST_TO_ADDR
34175: GO 34528
34177: LD_INT 42
34179: DOUBLE
34180: EQUAL
34181: IFTRUE 34185
34183: GO 34211
34185: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34186: LD_ADDR_VAR 0 3
34190: PUSH
34191: LD_INT 21
34193: PUSH
34194: LD_INT 22
34196: PUSH
34197: LD_INT 23
34199: PUSH
34200: LD_INT 24
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: ST_TO_ADDR
34209: GO 34528
34211: LD_INT 43
34213: DOUBLE
34214: EQUAL
34215: IFTRUE 34219
34217: GO 34245
34219: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34220: LD_ADDR_VAR 0 3
34224: PUSH
34225: LD_INT 21
34227: PUSH
34228: LD_INT 22
34230: PUSH
34231: LD_INT 23
34233: PUSH
34234: LD_INT 24
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: ST_TO_ADDR
34243: GO 34528
34245: LD_INT 44
34247: DOUBLE
34248: EQUAL
34249: IFTRUE 34253
34251: GO 34279
34253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34254: LD_ADDR_VAR 0 3
34258: PUSH
34259: LD_INT 21
34261: PUSH
34262: LD_INT 22
34264: PUSH
34265: LD_INT 23
34267: PUSH
34268: LD_INT 24
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: ST_TO_ADDR
34277: GO 34528
34279: LD_INT 45
34281: DOUBLE
34282: EQUAL
34283: IFTRUE 34287
34285: GO 34313
34287: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34288: LD_ADDR_VAR 0 3
34292: PUSH
34293: LD_INT 21
34295: PUSH
34296: LD_INT 22
34298: PUSH
34299: LD_INT 23
34301: PUSH
34302: LD_INT 24
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: ST_TO_ADDR
34311: GO 34528
34313: LD_INT 49
34315: DOUBLE
34316: EQUAL
34317: IFTRUE 34321
34319: GO 34347
34321: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34322: LD_ADDR_VAR 0 3
34326: PUSH
34327: LD_INT 21
34329: PUSH
34330: LD_INT 22
34332: PUSH
34333: LD_INT 23
34335: PUSH
34336: LD_INT 24
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: ST_TO_ADDR
34345: GO 34528
34347: LD_INT 51
34349: DOUBLE
34350: EQUAL
34351: IFTRUE 34355
34353: GO 34381
34355: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34356: LD_ADDR_VAR 0 3
34360: PUSH
34361: LD_INT 21
34363: PUSH
34364: LD_INT 22
34366: PUSH
34367: LD_INT 23
34369: PUSH
34370: LD_INT 24
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: ST_TO_ADDR
34379: GO 34528
34381: LD_INT 52
34383: DOUBLE
34384: EQUAL
34385: IFTRUE 34389
34387: GO 34415
34389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34390: LD_ADDR_VAR 0 3
34394: PUSH
34395: LD_INT 21
34397: PUSH
34398: LD_INT 22
34400: PUSH
34401: LD_INT 23
34403: PUSH
34404: LD_INT 24
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: ST_TO_ADDR
34413: GO 34528
34415: LD_INT 53
34417: DOUBLE
34418: EQUAL
34419: IFTRUE 34423
34421: GO 34441
34423: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34424: LD_ADDR_VAR 0 3
34428: PUSH
34429: LD_INT 23
34431: PUSH
34432: LD_INT 24
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: ST_TO_ADDR
34439: GO 34528
34441: LD_INT 46
34443: DOUBLE
34444: EQUAL
34445: IFTRUE 34449
34447: GO 34467
34449: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34450: LD_ADDR_VAR 0 3
34454: PUSH
34455: LD_INT 23
34457: PUSH
34458: LD_INT 24
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: ST_TO_ADDR
34465: GO 34528
34467: LD_INT 47
34469: DOUBLE
34470: EQUAL
34471: IFTRUE 34475
34473: GO 34493
34475: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
34476: LD_ADDR_VAR 0 3
34480: PUSH
34481: LD_INT 23
34483: PUSH
34484: LD_INT 24
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: ST_TO_ADDR
34491: GO 34528
34493: LD_INT 98
34495: DOUBLE
34496: EQUAL
34497: IFTRUE 34501
34499: GO 34527
34501: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34502: LD_ADDR_VAR 0 3
34506: PUSH
34507: LD_INT 21
34509: PUSH
34510: LD_INT 22
34512: PUSH
34513: LD_INT 23
34515: PUSH
34516: LD_INT 24
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: ST_TO_ADDR
34525: GO 34528
34527: POP
// result := ( chassis in result ) ;
34528: LD_ADDR_VAR 0 3
34532: PUSH
34533: LD_VAR 0 1
34537: PUSH
34538: LD_VAR 0 3
34542: IN
34543: ST_TO_ADDR
// end ;
34544: LD_VAR 0 3
34548: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34549: LD_INT 0
34551: PPUSH
34552: PPUSH
34553: PPUSH
34554: PPUSH
34555: PPUSH
34556: PPUSH
34557: PPUSH
// result := array ;
34558: LD_ADDR_VAR 0 5
34562: PUSH
34563: LD_VAR 0 1
34567: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34568: LD_VAR 0 1
34572: NOT
34573: IFTRUE 34582
34575: PUSH
34576: LD_VAR 0 2
34580: NOT
34581: OR
34582: IFTRUE 34591
34584: PUSH
34585: LD_VAR 0 3
34589: NOT
34590: OR
34591: IFTRUE 34605
34593: PUSH
34594: LD_VAR 0 2
34598: PUSH
34599: LD_VAR 0 1
34603: GREATER
34604: OR
34605: IFTRUE 34619
34607: PUSH
34608: LD_VAR 0 3
34612: PUSH
34613: LD_VAR 0 1
34617: GREATER
34618: OR
34619: IFFALSE 34623
// exit ;
34621: GO 34919
// if direction then
34623: LD_VAR 0 4
34627: IFFALSE 34691
// begin d := 1 ;
34629: LD_ADDR_VAR 0 9
34633: PUSH
34634: LD_INT 1
34636: ST_TO_ADDR
// if i_from > i_to then
34637: LD_VAR 0 2
34641: PUSH
34642: LD_VAR 0 3
34646: GREATER
34647: IFFALSE 34673
// length := ( array - i_from ) + i_to else
34649: LD_ADDR_VAR 0 11
34653: PUSH
34654: LD_VAR 0 1
34658: PUSH
34659: LD_VAR 0 2
34663: MINUS
34664: PUSH
34665: LD_VAR 0 3
34669: PLUS
34670: ST_TO_ADDR
34671: GO 34689
// length := i_to - i_from ;
34673: LD_ADDR_VAR 0 11
34677: PUSH
34678: LD_VAR 0 3
34682: PUSH
34683: LD_VAR 0 2
34687: MINUS
34688: ST_TO_ADDR
// end else
34689: GO 34752
// begin d := - 1 ;
34691: LD_ADDR_VAR 0 9
34695: PUSH
34696: LD_INT 1
34698: NEG
34699: ST_TO_ADDR
// if i_from > i_to then
34700: LD_VAR 0 2
34704: PUSH
34705: LD_VAR 0 3
34709: GREATER
34710: IFFALSE 34730
// length := i_from - i_to else
34712: LD_ADDR_VAR 0 11
34716: PUSH
34717: LD_VAR 0 2
34721: PUSH
34722: LD_VAR 0 3
34726: MINUS
34727: ST_TO_ADDR
34728: GO 34752
// length := ( array - i_to ) + i_from ;
34730: LD_ADDR_VAR 0 11
34734: PUSH
34735: LD_VAR 0 1
34739: PUSH
34740: LD_VAR 0 3
34744: MINUS
34745: PUSH
34746: LD_VAR 0 2
34750: PLUS
34751: ST_TO_ADDR
// end ; if not length then
34752: LD_VAR 0 11
34756: NOT
34757: IFFALSE 34761
// exit ;
34759: GO 34919
// tmp := array ;
34761: LD_ADDR_VAR 0 10
34765: PUSH
34766: LD_VAR 0 1
34770: ST_TO_ADDR
// for i = 1 to length do
34771: LD_ADDR_VAR 0 6
34775: PUSH
34776: DOUBLE
34777: LD_INT 1
34779: DEC
34780: ST_TO_ADDR
34781: LD_VAR 0 11
34785: PUSH
34786: FOR_TO
34787: IFFALSE 34907
// begin for j = 1 to array do
34789: LD_ADDR_VAR 0 7
34793: PUSH
34794: DOUBLE
34795: LD_INT 1
34797: DEC
34798: ST_TO_ADDR
34799: LD_VAR 0 1
34803: PUSH
34804: FOR_TO
34805: IFFALSE 34893
// begin k := j + d ;
34807: LD_ADDR_VAR 0 8
34811: PUSH
34812: LD_VAR 0 7
34816: PUSH
34817: LD_VAR 0 9
34821: PLUS
34822: ST_TO_ADDR
// if k > array then
34823: LD_VAR 0 8
34827: PUSH
34828: LD_VAR 0 1
34832: GREATER
34833: IFFALSE 34843
// k := 1 ;
34835: LD_ADDR_VAR 0 8
34839: PUSH
34840: LD_INT 1
34842: ST_TO_ADDR
// if not k then
34843: LD_VAR 0 8
34847: NOT
34848: IFFALSE 34860
// k := array ;
34850: LD_ADDR_VAR 0 8
34854: PUSH
34855: LD_VAR 0 1
34859: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34860: LD_ADDR_VAR 0 10
34864: PUSH
34865: LD_VAR 0 10
34869: PPUSH
34870: LD_VAR 0 8
34874: PPUSH
34875: LD_VAR 0 1
34879: PUSH
34880: LD_VAR 0 7
34884: ARRAY
34885: PPUSH
34886: CALL_OW 1
34890: ST_TO_ADDR
// end ;
34891: GO 34804
34893: POP
34894: POP
// array := tmp ;
34895: LD_ADDR_VAR 0 1
34899: PUSH
34900: LD_VAR 0 10
34904: ST_TO_ADDR
// end ;
34905: GO 34786
34907: POP
34908: POP
// result := array ;
34909: LD_ADDR_VAR 0 5
34913: PUSH
34914: LD_VAR 0 1
34918: ST_TO_ADDR
// end ;
34919: LD_VAR 0 5
34923: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34924: LD_INT 0
34926: PPUSH
34927: PPUSH
// result := 0 ;
34928: LD_ADDR_VAR 0 3
34932: PUSH
34933: LD_INT 0
34935: ST_TO_ADDR
// if not array or not value in array then
34936: LD_VAR 0 1
34940: NOT
34941: IFTRUE 34956
34943: PUSH
34944: LD_VAR 0 2
34948: PUSH
34949: LD_VAR 0 1
34953: IN
34954: NOT
34955: OR
34956: IFFALSE 34960
// exit ;
34958: GO 35014
// for i = 1 to array do
34960: LD_ADDR_VAR 0 4
34964: PUSH
34965: DOUBLE
34966: LD_INT 1
34968: DEC
34969: ST_TO_ADDR
34970: LD_VAR 0 1
34974: PUSH
34975: FOR_TO
34976: IFFALSE 35012
// if value = array [ i ] then
34978: LD_VAR 0 2
34982: PUSH
34983: LD_VAR 0 1
34987: PUSH
34988: LD_VAR 0 4
34992: ARRAY
34993: EQUAL
34994: IFFALSE 35010
// begin result := i ;
34996: LD_ADDR_VAR 0 3
35000: PUSH
35001: LD_VAR 0 4
35005: ST_TO_ADDR
// exit ;
35006: POP
35007: POP
35008: GO 35014
// end ;
35010: GO 34975
35012: POP
35013: POP
// end ;
35014: LD_VAR 0 3
35018: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35019: LD_INT 0
35021: PPUSH
// vc_chassis := chassis ;
35022: LD_ADDR_OWVAR 37
35026: PUSH
35027: LD_VAR 0 1
35031: ST_TO_ADDR
// vc_engine := engine ;
35032: LD_ADDR_OWVAR 39
35036: PUSH
35037: LD_VAR 0 2
35041: ST_TO_ADDR
// vc_control := control ;
35042: LD_ADDR_OWVAR 38
35046: PUSH
35047: LD_VAR 0 3
35051: ST_TO_ADDR
// vc_weapon := weapon ;
35052: LD_ADDR_OWVAR 40
35056: PUSH
35057: LD_VAR 0 4
35061: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35062: LD_ADDR_OWVAR 41
35066: PUSH
35067: LD_VAR 0 5
35071: ST_TO_ADDR
// end ;
35072: LD_VAR 0 6
35076: RET
// export function WantPlant ( unit ) ; var task ; begin
35077: LD_INT 0
35079: PPUSH
35080: PPUSH
// result := false ;
35081: LD_ADDR_VAR 0 2
35085: PUSH
35086: LD_INT 0
35088: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35089: LD_ADDR_VAR 0 3
35093: PUSH
35094: LD_VAR 0 1
35098: PPUSH
35099: CALL_OW 437
35103: ST_TO_ADDR
// if task then
35104: LD_VAR 0 3
35108: IFFALSE 35136
// if task [ 1 ] [ 1 ] = p then
35110: LD_VAR 0 3
35114: PUSH
35115: LD_INT 1
35117: ARRAY
35118: PUSH
35119: LD_INT 1
35121: ARRAY
35122: PUSH
35123: LD_STRING p
35125: EQUAL
35126: IFFALSE 35136
// result := true ;
35128: LD_ADDR_VAR 0 2
35132: PUSH
35133: LD_INT 1
35135: ST_TO_ADDR
// end ;
35136: LD_VAR 0 2
35140: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35141: LD_INT 0
35143: PPUSH
35144: PPUSH
35145: PPUSH
35146: PPUSH
// if pos < 1 then
35147: LD_VAR 0 2
35151: PUSH
35152: LD_INT 1
35154: LESS
35155: IFFALSE 35159
// exit ;
35157: GO 35462
// if pos = 1 then
35159: LD_VAR 0 2
35163: PUSH
35164: LD_INT 1
35166: EQUAL
35167: IFFALSE 35200
// result := Replace ( arr , pos [ 1 ] , value ) else
35169: LD_ADDR_VAR 0 4
35173: PUSH
35174: LD_VAR 0 1
35178: PPUSH
35179: LD_VAR 0 2
35183: PUSH
35184: LD_INT 1
35186: ARRAY
35187: PPUSH
35188: LD_VAR 0 3
35192: PPUSH
35193: CALL_OW 1
35197: ST_TO_ADDR
35198: GO 35462
// begin tmp := arr ;
35200: LD_ADDR_VAR 0 6
35204: PUSH
35205: LD_VAR 0 1
35209: ST_TO_ADDR
// s_arr := [ tmp ] ;
35210: LD_ADDR_VAR 0 7
35214: PUSH
35215: LD_VAR 0 6
35219: PUSH
35220: EMPTY
35221: LIST
35222: ST_TO_ADDR
// for i = 1 to pos - 1 do
35223: LD_ADDR_VAR 0 5
35227: PUSH
35228: DOUBLE
35229: LD_INT 1
35231: DEC
35232: ST_TO_ADDR
35233: LD_VAR 0 2
35237: PUSH
35238: LD_INT 1
35240: MINUS
35241: PUSH
35242: FOR_TO
35243: IFFALSE 35288
// begin tmp := tmp [ pos [ i ] ] ;
35245: LD_ADDR_VAR 0 6
35249: PUSH
35250: LD_VAR 0 6
35254: PUSH
35255: LD_VAR 0 2
35259: PUSH
35260: LD_VAR 0 5
35264: ARRAY
35265: ARRAY
35266: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35267: LD_ADDR_VAR 0 7
35271: PUSH
35272: LD_VAR 0 7
35276: PUSH
35277: LD_VAR 0 6
35281: PUSH
35282: EMPTY
35283: LIST
35284: ADD
35285: ST_TO_ADDR
// end ;
35286: GO 35242
35288: POP
35289: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35290: LD_ADDR_VAR 0 6
35294: PUSH
35295: LD_VAR 0 6
35299: PPUSH
35300: LD_VAR 0 2
35304: PUSH
35305: LD_VAR 0 2
35309: ARRAY
35310: PPUSH
35311: LD_VAR 0 3
35315: PPUSH
35316: CALL_OW 1
35320: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35321: LD_ADDR_VAR 0 7
35325: PUSH
35326: LD_VAR 0 7
35330: PPUSH
35331: LD_VAR 0 7
35335: PPUSH
35336: LD_VAR 0 6
35340: PPUSH
35341: CALL_OW 1
35345: ST_TO_ADDR
// for i = s_arr downto 2 do
35346: LD_ADDR_VAR 0 5
35350: PUSH
35351: DOUBLE
35352: LD_VAR 0 7
35356: INC
35357: ST_TO_ADDR
35358: LD_INT 2
35360: PUSH
35361: FOR_DOWNTO
35362: IFFALSE 35446
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35364: LD_ADDR_VAR 0 6
35368: PUSH
35369: LD_VAR 0 7
35373: PUSH
35374: LD_VAR 0 5
35378: PUSH
35379: LD_INT 1
35381: MINUS
35382: ARRAY
35383: PPUSH
35384: LD_VAR 0 2
35388: PUSH
35389: LD_VAR 0 5
35393: PUSH
35394: LD_INT 1
35396: MINUS
35397: ARRAY
35398: PPUSH
35399: LD_VAR 0 7
35403: PUSH
35404: LD_VAR 0 5
35408: ARRAY
35409: PPUSH
35410: CALL_OW 1
35414: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35415: LD_ADDR_VAR 0 7
35419: PUSH
35420: LD_VAR 0 7
35424: PPUSH
35425: LD_VAR 0 5
35429: PUSH
35430: LD_INT 1
35432: MINUS
35433: PPUSH
35434: LD_VAR 0 6
35438: PPUSH
35439: CALL_OW 1
35443: ST_TO_ADDR
// end ;
35444: GO 35361
35446: POP
35447: POP
// result := s_arr [ 1 ] ;
35448: LD_ADDR_VAR 0 4
35452: PUSH
35453: LD_VAR 0 7
35457: PUSH
35458: LD_INT 1
35460: ARRAY
35461: ST_TO_ADDR
// end ; end ;
35462: LD_VAR 0 4
35466: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35467: LD_INT 0
35469: PPUSH
35470: PPUSH
// if not list then
35471: LD_VAR 0 1
35475: NOT
35476: IFFALSE 35480
// exit ;
35478: GO 35571
// i := list [ pos1 ] ;
35480: LD_ADDR_VAR 0 5
35484: PUSH
35485: LD_VAR 0 1
35489: PUSH
35490: LD_VAR 0 2
35494: ARRAY
35495: ST_TO_ADDR
// if not i then
35496: LD_VAR 0 5
35500: NOT
35501: IFFALSE 35505
// exit ;
35503: GO 35571
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35505: LD_ADDR_VAR 0 1
35509: PUSH
35510: LD_VAR 0 1
35514: PPUSH
35515: LD_VAR 0 2
35519: PPUSH
35520: LD_VAR 0 1
35524: PUSH
35525: LD_VAR 0 3
35529: ARRAY
35530: PPUSH
35531: CALL_OW 1
35535: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35536: LD_ADDR_VAR 0 1
35540: PUSH
35541: LD_VAR 0 1
35545: PPUSH
35546: LD_VAR 0 3
35550: PPUSH
35551: LD_VAR 0 5
35555: PPUSH
35556: CALL_OW 1
35560: ST_TO_ADDR
// result := list ;
35561: LD_ADDR_VAR 0 4
35565: PUSH
35566: LD_VAR 0 1
35570: ST_TO_ADDR
// end ;
35571: LD_VAR 0 4
35575: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35576: LD_INT 0
35578: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35579: LD_ADDR_VAR 0 5
35583: PUSH
35584: LD_VAR 0 1
35588: PPUSH
35589: CALL_OW 250
35593: PPUSH
35594: LD_VAR 0 1
35598: PPUSH
35599: CALL_OW 251
35603: PPUSH
35604: LD_VAR 0 2
35608: PPUSH
35609: LD_VAR 0 3
35613: PPUSH
35614: LD_VAR 0 4
35618: PPUSH
35619: CALL 36001 0 5
35623: ST_TO_ADDR
// end ;
35624: LD_VAR 0 5
35628: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35629: LD_INT 0
35631: PPUSH
35632: PPUSH
35633: PPUSH
35634: PPUSH
// if not list or not unit then
35635: LD_VAR 0 2
35639: NOT
35640: IFTRUE 35649
35642: PUSH
35643: LD_VAR 0 1
35647: NOT
35648: OR
35649: IFFALSE 35653
// exit ;
35651: GO 35996
// result := [ ] ;
35653: LD_ADDR_VAR 0 5
35657: PUSH
35658: EMPTY
35659: ST_TO_ADDR
// for i in list do
35660: LD_ADDR_VAR 0 6
35664: PUSH
35665: LD_VAR 0 2
35669: PUSH
35670: FOR_IN
35671: IFFALSE 35889
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35673: LD_ADDR_VAR 0 8
35677: PUSH
35678: LD_VAR 0 1
35682: PPUSH
35683: LD_VAR 0 6
35687: PUSH
35688: LD_INT 1
35690: ARRAY
35691: PPUSH
35692: LD_VAR 0 6
35696: PUSH
35697: LD_INT 2
35699: ARRAY
35700: PPUSH
35701: CALL_OW 297
35705: ST_TO_ADDR
// if not Count ( result ) then
35706: LD_VAR 0 5
35710: PPUSH
35711: CALL 32223 0 1
35715: NOT
35716: IFFALSE 35749
// begin result := Join ( result , [ i , tmp ] ) ;
35718: LD_ADDR_VAR 0 5
35722: PUSH
35723: LD_VAR 0 5
35727: PPUSH
35728: LD_VAR 0 6
35732: PUSH
35733: LD_VAR 0 8
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PPUSH
35742: CALL 68189 0 2
35746: ST_TO_ADDR
// continue ;
35747: GO 35670
// end ; if result [ result ] [ 2 ] <= tmp then
35749: LD_VAR 0 5
35753: PUSH
35754: LD_VAR 0 5
35758: ARRAY
35759: PUSH
35760: LD_INT 2
35762: ARRAY
35763: PUSH
35764: LD_VAR 0 8
35768: LESSEQUAL
35769: IFFALSE 35802
// result := Join ( result , [ i , tmp ] ) else
35771: LD_ADDR_VAR 0 5
35775: PUSH
35776: LD_VAR 0 5
35780: PPUSH
35781: LD_VAR 0 6
35785: PUSH
35786: LD_VAR 0 8
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PPUSH
35795: CALL 68189 0 2
35799: ST_TO_ADDR
35800: GO 35887
// begin for j := 1 to Count ( result ) do
35802: LD_ADDR_VAR 0 7
35806: PUSH
35807: DOUBLE
35808: LD_INT 1
35810: DEC
35811: ST_TO_ADDR
35812: LD_VAR 0 5
35816: PPUSH
35817: CALL 32223 0 1
35821: PUSH
35822: FOR_TO
35823: IFFALSE 35885
// begin if tmp < result [ j ] [ 2 ] then
35825: LD_VAR 0 8
35829: PUSH
35830: LD_VAR 0 5
35834: PUSH
35835: LD_VAR 0 7
35839: ARRAY
35840: PUSH
35841: LD_INT 2
35843: ARRAY
35844: LESS
35845: IFFALSE 35883
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35847: LD_ADDR_VAR 0 5
35851: PUSH
35852: LD_VAR 0 5
35856: PPUSH
35857: LD_VAR 0 7
35861: PPUSH
35862: LD_VAR 0 6
35866: PUSH
35867: LD_VAR 0 8
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PPUSH
35876: CALL_OW 2
35880: ST_TO_ADDR
// break ;
35881: GO 35885
// end ; end ;
35883: GO 35822
35885: POP
35886: POP
// end ; end ;
35887: GO 35670
35889: POP
35890: POP
// if result and not asc then
35891: LD_VAR 0 5
35895: IFFALSE 35904
35897: PUSH
35898: LD_VAR 0 3
35902: NOT
35903: AND
35904: IFFALSE 35921
// result := ReverseArray ( result ) ;
35906: LD_ADDR_VAR 0 5
35910: PUSH
35911: LD_VAR 0 5
35915: PPUSH
35916: CALL 63279 0 1
35920: ST_TO_ADDR
// tmp := [ ] ;
35921: LD_ADDR_VAR 0 8
35925: PUSH
35926: EMPTY
35927: ST_TO_ADDR
// if mode then
35928: LD_VAR 0 4
35932: IFFALSE 35996
// begin for i := 1 to result do
35934: LD_ADDR_VAR 0 6
35938: PUSH
35939: DOUBLE
35940: LD_INT 1
35942: DEC
35943: ST_TO_ADDR
35944: LD_VAR 0 5
35948: PUSH
35949: FOR_TO
35950: IFFALSE 35984
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35952: LD_ADDR_VAR 0 8
35956: PUSH
35957: LD_VAR 0 8
35961: PPUSH
35962: LD_VAR 0 5
35966: PUSH
35967: LD_VAR 0 6
35971: ARRAY
35972: PUSH
35973: LD_INT 1
35975: ARRAY
35976: PPUSH
35977: CALL 68189 0 2
35981: ST_TO_ADDR
35982: GO 35949
35984: POP
35985: POP
// result := tmp ;
35986: LD_ADDR_VAR 0 5
35990: PUSH
35991: LD_VAR 0 8
35995: ST_TO_ADDR
// end ; end ;
35996: LD_VAR 0 5
36000: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36001: LD_INT 0
36003: PPUSH
36004: PPUSH
36005: PPUSH
36006: PPUSH
// if not list then
36007: LD_VAR 0 3
36011: NOT
36012: IFFALSE 36016
// exit ;
36014: GO 36406
// result := [ ] ;
36016: LD_ADDR_VAR 0 6
36020: PUSH
36021: EMPTY
36022: ST_TO_ADDR
// for i in list do
36023: LD_ADDR_VAR 0 7
36027: PUSH
36028: LD_VAR 0 3
36032: PUSH
36033: FOR_IN
36034: IFFALSE 36236
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36036: LD_ADDR_VAR 0 9
36040: PUSH
36041: LD_VAR 0 7
36045: PPUSH
36046: LD_VAR 0 1
36050: PPUSH
36051: LD_VAR 0 2
36055: PPUSH
36056: CALL_OW 297
36060: ST_TO_ADDR
// if not result then
36061: LD_VAR 0 6
36065: NOT
36066: IFFALSE 36092
// result := [ [ i , tmp ] ] else
36068: LD_ADDR_VAR 0 6
36072: PUSH
36073: LD_VAR 0 7
36077: PUSH
36078: LD_VAR 0 9
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: EMPTY
36088: LIST
36089: ST_TO_ADDR
36090: GO 36234
// begin if result [ result ] [ 2 ] <= tmp then
36092: LD_VAR 0 6
36096: PUSH
36097: LD_VAR 0 6
36101: ARRAY
36102: PUSH
36103: LD_INT 2
36105: ARRAY
36106: PUSH
36107: LD_VAR 0 9
36111: LESSEQUAL
36112: IFFALSE 36154
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36114: LD_ADDR_VAR 0 6
36118: PUSH
36119: LD_VAR 0 6
36123: PPUSH
36124: LD_VAR 0 6
36128: PUSH
36129: LD_INT 1
36131: PLUS
36132: PPUSH
36133: LD_VAR 0 7
36137: PUSH
36138: LD_VAR 0 9
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PPUSH
36147: CALL_OW 2
36151: ST_TO_ADDR
36152: GO 36234
// for j := 1 to result do
36154: LD_ADDR_VAR 0 8
36158: PUSH
36159: DOUBLE
36160: LD_INT 1
36162: DEC
36163: ST_TO_ADDR
36164: LD_VAR 0 6
36168: PUSH
36169: FOR_TO
36170: IFFALSE 36232
// begin if tmp < result [ j ] [ 2 ] then
36172: LD_VAR 0 9
36176: PUSH
36177: LD_VAR 0 6
36181: PUSH
36182: LD_VAR 0 8
36186: ARRAY
36187: PUSH
36188: LD_INT 2
36190: ARRAY
36191: LESS
36192: IFFALSE 36230
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36194: LD_ADDR_VAR 0 6
36198: PUSH
36199: LD_VAR 0 6
36203: PPUSH
36204: LD_VAR 0 8
36208: PPUSH
36209: LD_VAR 0 7
36213: PUSH
36214: LD_VAR 0 9
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PPUSH
36223: CALL_OW 2
36227: ST_TO_ADDR
// break ;
36228: GO 36232
// end ; end ;
36230: GO 36169
36232: POP
36233: POP
// end ; end ;
36234: GO 36033
36236: POP
36237: POP
// if result and not asc then
36238: LD_VAR 0 6
36242: IFFALSE 36251
36244: PUSH
36245: LD_VAR 0 4
36249: NOT
36250: AND
36251: IFFALSE 36326
// begin tmp := result ;
36253: LD_ADDR_VAR 0 9
36257: PUSH
36258: LD_VAR 0 6
36262: ST_TO_ADDR
// for i = tmp downto 1 do
36263: LD_ADDR_VAR 0 7
36267: PUSH
36268: DOUBLE
36269: LD_VAR 0 9
36273: INC
36274: ST_TO_ADDR
36275: LD_INT 1
36277: PUSH
36278: FOR_DOWNTO
36279: IFFALSE 36324
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36281: LD_ADDR_VAR 0 6
36285: PUSH
36286: LD_VAR 0 6
36290: PPUSH
36291: LD_VAR 0 9
36295: PUSH
36296: LD_VAR 0 7
36300: MINUS
36301: PUSH
36302: LD_INT 1
36304: PLUS
36305: PPUSH
36306: LD_VAR 0 9
36310: PUSH
36311: LD_VAR 0 7
36315: ARRAY
36316: PPUSH
36317: CALL_OW 1
36321: ST_TO_ADDR
36322: GO 36278
36324: POP
36325: POP
// end ; tmp := [ ] ;
36326: LD_ADDR_VAR 0 9
36330: PUSH
36331: EMPTY
36332: ST_TO_ADDR
// if mode then
36333: LD_VAR 0 5
36337: IFFALSE 36406
// begin for i = 1 to result do
36339: LD_ADDR_VAR 0 7
36343: PUSH
36344: DOUBLE
36345: LD_INT 1
36347: DEC
36348: ST_TO_ADDR
36349: LD_VAR 0 6
36353: PUSH
36354: FOR_TO
36355: IFFALSE 36394
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36357: LD_ADDR_VAR 0 9
36361: PUSH
36362: LD_VAR 0 9
36366: PPUSH
36367: LD_VAR 0 7
36371: PPUSH
36372: LD_VAR 0 6
36376: PUSH
36377: LD_VAR 0 7
36381: ARRAY
36382: PUSH
36383: LD_INT 1
36385: ARRAY
36386: PPUSH
36387: CALL_OW 1
36391: ST_TO_ADDR
36392: GO 36354
36394: POP
36395: POP
// result := tmp ;
36396: LD_ADDR_VAR 0 6
36400: PUSH
36401: LD_VAR 0 9
36405: ST_TO_ADDR
// end ; end ;
36406: LD_VAR 0 6
36410: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36411: LD_INT 0
36413: PPUSH
36414: PPUSH
36415: PPUSH
36416: PPUSH
36417: PPUSH
36418: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36419: LD_ADDR_VAR 0 5
36423: PUSH
36424: LD_INT 0
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: LD_INT 0
36432: PUSH
36433: EMPTY
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: ST_TO_ADDR
// if not x or not y then
36441: LD_VAR 0 2
36445: NOT
36446: IFTRUE 36455
36448: PUSH
36449: LD_VAR 0 3
36453: NOT
36454: OR
36455: IFFALSE 36459
// exit ;
36457: GO 38115
// if not range then
36459: LD_VAR 0 4
36463: NOT
36464: IFFALSE 36474
// range := 10 ;
36466: LD_ADDR_VAR 0 4
36470: PUSH
36471: LD_INT 10
36473: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36474: LD_ADDR_VAR 0 8
36478: PUSH
36479: LD_INT 81
36481: PUSH
36482: LD_VAR 0 1
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 92
36493: PUSH
36494: LD_VAR 0 2
36498: PUSH
36499: LD_VAR 0 3
36503: PUSH
36504: LD_VAR 0 4
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 3
36517: PUSH
36518: LD_INT 21
36520: PUSH
36521: LD_INT 3
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: LIST
36536: PPUSH
36537: CALL_OW 69
36541: ST_TO_ADDR
// if not tmp then
36542: LD_VAR 0 8
36546: NOT
36547: IFFALSE 36551
// exit ;
36549: GO 38115
// for i in tmp do
36551: LD_ADDR_VAR 0 6
36555: PUSH
36556: LD_VAR 0 8
36560: PUSH
36561: FOR_IN
36562: IFFALSE 38090
// begin points := [ 0 , 0 , 0 ] ;
36564: LD_ADDR_VAR 0 9
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: LD_INT 0
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: LIST
36582: ST_TO_ADDR
// bpoints := 1 ;
36583: LD_ADDR_VAR 0 10
36587: PUSH
36588: LD_INT 1
36590: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36591: LD_VAR 0 6
36595: PPUSH
36596: CALL_OW 247
36600: PUSH
36601: LD_INT 1
36603: DOUBLE
36604: EQUAL
36605: IFTRUE 36609
36607: GO 37191
36609: POP
// begin if GetClass ( i ) = 1 then
36610: LD_VAR 0 6
36614: PPUSH
36615: CALL_OW 257
36619: PUSH
36620: LD_INT 1
36622: EQUAL
36623: IFFALSE 36644
// points := [ 10 , 5 , 3 ] ;
36625: LD_ADDR_VAR 0 9
36629: PUSH
36630: LD_INT 10
36632: PUSH
36633: LD_INT 5
36635: PUSH
36636: LD_INT 3
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: LIST
36643: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36644: LD_VAR 0 6
36648: PPUSH
36649: CALL_OW 257
36653: PUSH
36654: LD_INT 2
36656: PUSH
36657: LD_INT 3
36659: PUSH
36660: LD_INT 4
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: LIST
36667: IN
36668: IFFALSE 36689
// points := [ 3 , 2 , 1 ] ;
36670: LD_ADDR_VAR 0 9
36674: PUSH
36675: LD_INT 3
36677: PUSH
36678: LD_INT 2
36680: PUSH
36681: LD_INT 1
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: LIST
36688: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36689: LD_VAR 0 6
36693: PPUSH
36694: CALL_OW 257
36698: PUSH
36699: LD_INT 5
36701: EQUAL
36702: IFFALSE 36723
// points := [ 130 , 5 , 2 ] ;
36704: LD_ADDR_VAR 0 9
36708: PUSH
36709: LD_INT 130
36711: PUSH
36712: LD_INT 5
36714: PUSH
36715: LD_INT 2
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: LIST
36722: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36723: LD_VAR 0 6
36727: PPUSH
36728: CALL_OW 257
36732: PUSH
36733: LD_INT 8
36735: EQUAL
36736: IFFALSE 36757
// points := [ 35 , 35 , 30 ] ;
36738: LD_ADDR_VAR 0 9
36742: PUSH
36743: LD_INT 35
36745: PUSH
36746: LD_INT 35
36748: PUSH
36749: LD_INT 30
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: LIST
36756: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36757: LD_VAR 0 6
36761: PPUSH
36762: CALL_OW 257
36766: PUSH
36767: LD_INT 9
36769: EQUAL
36770: IFFALSE 36791
// points := [ 20 , 55 , 40 ] ;
36772: LD_ADDR_VAR 0 9
36776: PUSH
36777: LD_INT 20
36779: PUSH
36780: LD_INT 55
36782: PUSH
36783: LD_INT 40
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: LIST
36790: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36791: LD_VAR 0 6
36795: PPUSH
36796: CALL_OW 257
36800: PUSH
36801: LD_INT 12
36803: PUSH
36804: LD_INT 16
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: IN
36811: IFFALSE 36832
// points := [ 5 , 3 , 2 ] ;
36813: LD_ADDR_VAR 0 9
36817: PUSH
36818: LD_INT 5
36820: PUSH
36821: LD_INT 3
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36832: LD_VAR 0 6
36836: PPUSH
36837: CALL_OW 257
36841: PUSH
36842: LD_INT 17
36844: EQUAL
36845: IFFALSE 36866
// points := [ 100 , 50 , 75 ] ;
36847: LD_ADDR_VAR 0 9
36851: PUSH
36852: LD_INT 100
36854: PUSH
36855: LD_INT 50
36857: PUSH
36858: LD_INT 75
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: LIST
36865: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36866: LD_VAR 0 6
36870: PPUSH
36871: CALL_OW 257
36875: PUSH
36876: LD_INT 15
36878: EQUAL
36879: IFFALSE 36900
// points := [ 10 , 5 , 3 ] ;
36881: LD_ADDR_VAR 0 9
36885: PUSH
36886: LD_INT 10
36888: PUSH
36889: LD_INT 5
36891: PUSH
36892: LD_INT 3
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: LIST
36899: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36900: LD_VAR 0 6
36904: PPUSH
36905: CALL_OW 257
36909: PUSH
36910: LD_INT 14
36912: EQUAL
36913: IFFALSE 36934
// points := [ 10 , 0 , 0 ] ;
36915: LD_ADDR_VAR 0 9
36919: PUSH
36920: LD_INT 10
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: LIST
36933: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36934: LD_VAR 0 6
36938: PPUSH
36939: CALL_OW 257
36943: PUSH
36944: LD_INT 11
36946: EQUAL
36947: IFFALSE 36968
// points := [ 30 , 10 , 5 ] ;
36949: LD_ADDR_VAR 0 9
36953: PUSH
36954: LD_INT 30
36956: PUSH
36957: LD_INT 10
36959: PUSH
36960: LD_INT 5
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: LIST
36967: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36968: LD_VAR 0 1
36972: PPUSH
36973: LD_INT 5
36975: PPUSH
36976: CALL_OW 321
36980: PUSH
36981: LD_INT 2
36983: EQUAL
36984: IFFALSE 37001
// bpoints := bpoints * 1.8 ;
36986: LD_ADDR_VAR 0 10
36990: PUSH
36991: LD_VAR 0 10
36995: PUSH
36996: LD_REAL  1.80000000000000E+0000
36999: MUL
37000: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37001: LD_VAR 0 6
37005: PPUSH
37006: CALL_OW 257
37010: PUSH
37011: LD_INT 1
37013: PUSH
37014: LD_INT 2
37016: PUSH
37017: LD_INT 3
37019: PUSH
37020: LD_INT 4
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: IN
37029: IFFALSE 37049
37031: PUSH
37032: LD_VAR 0 1
37036: PPUSH
37037: LD_INT 51
37039: PPUSH
37040: CALL_OW 321
37044: PUSH
37045: LD_INT 2
37047: EQUAL
37048: AND
37049: IFFALSE 37066
// bpoints := bpoints * 1.2 ;
37051: LD_ADDR_VAR 0 10
37055: PUSH
37056: LD_VAR 0 10
37060: PUSH
37061: LD_REAL  1.20000000000000E+0000
37064: MUL
37065: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37066: LD_VAR 0 6
37070: PPUSH
37071: CALL_OW 257
37075: PUSH
37076: LD_INT 5
37078: PUSH
37079: LD_INT 7
37081: PUSH
37082: LD_INT 9
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: LIST
37089: IN
37090: IFFALSE 37110
37092: PUSH
37093: LD_VAR 0 1
37097: PPUSH
37098: LD_INT 52
37100: PPUSH
37101: CALL_OW 321
37105: PUSH
37106: LD_INT 2
37108: EQUAL
37109: AND
37110: IFFALSE 37127
// bpoints := bpoints * 1.5 ;
37112: LD_ADDR_VAR 0 10
37116: PUSH
37117: LD_VAR 0 10
37121: PUSH
37122: LD_REAL  1.50000000000000E+0000
37125: MUL
37126: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37127: LD_VAR 0 1
37131: PPUSH
37132: LD_INT 66
37134: PPUSH
37135: CALL_OW 321
37139: PUSH
37140: LD_INT 2
37142: EQUAL
37143: IFFALSE 37160
// bpoints := bpoints * 1.1 ;
37145: LD_ADDR_VAR 0 10
37149: PUSH
37150: LD_VAR 0 10
37154: PUSH
37155: LD_REAL  1.10000000000000E+0000
37158: MUL
37159: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37160: LD_ADDR_VAR 0 10
37164: PUSH
37165: LD_VAR 0 10
37169: PUSH
37170: LD_VAR 0 6
37174: PPUSH
37175: LD_INT 1
37177: PPUSH
37178: CALL_OW 259
37182: PUSH
37183: LD_REAL  1.15000000000000E+0000
37186: MUL
37187: MUL
37188: ST_TO_ADDR
// end ; unit_vehicle :
37189: GO 38019
37191: LD_INT 2
37193: DOUBLE
37194: EQUAL
37195: IFTRUE 37199
37197: GO 38007
37199: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37200: LD_VAR 0 6
37204: PPUSH
37205: CALL_OW 264
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: LD_INT 42
37215: PUSH
37216: LD_INT 24
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: LIST
37223: IN
37224: IFFALSE 37245
// points := [ 25 , 5 , 3 ] ;
37226: LD_ADDR_VAR 0 9
37230: PUSH
37231: LD_INT 25
37233: PUSH
37234: LD_INT 5
37236: PUSH
37237: LD_INT 3
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: LIST
37244: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37245: LD_VAR 0 6
37249: PPUSH
37250: CALL_OW 264
37254: PUSH
37255: LD_INT 4
37257: PUSH
37258: LD_INT 43
37260: PUSH
37261: LD_INT 25
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: IN
37269: IFFALSE 37290
// points := [ 40 , 15 , 5 ] ;
37271: LD_ADDR_VAR 0 9
37275: PUSH
37276: LD_INT 40
37278: PUSH
37279: LD_INT 15
37281: PUSH
37282: LD_INT 5
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: LIST
37289: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37290: LD_VAR 0 6
37294: PPUSH
37295: CALL_OW 264
37299: PUSH
37300: LD_INT 3
37302: PUSH
37303: LD_INT 23
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: IN
37310: IFFALSE 37331
// points := [ 7 , 25 , 8 ] ;
37312: LD_ADDR_VAR 0 9
37316: PUSH
37317: LD_INT 7
37319: PUSH
37320: LD_INT 25
37322: PUSH
37323: LD_INT 8
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: LIST
37330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37331: LD_VAR 0 6
37335: PPUSH
37336: CALL_OW 264
37340: PUSH
37341: LD_INT 5
37343: PUSH
37344: LD_INT 27
37346: PUSH
37347: LD_INT 44
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: IN
37355: IFFALSE 37376
// points := [ 14 , 50 , 16 ] ;
37357: LD_ADDR_VAR 0 9
37361: PUSH
37362: LD_INT 14
37364: PUSH
37365: LD_INT 50
37367: PUSH
37368: LD_INT 16
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: LIST
37375: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37376: LD_VAR 0 6
37380: PPUSH
37381: CALL_OW 264
37385: PUSH
37386: LD_INT 6
37388: PUSH
37389: LD_INT 46
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: IN
37396: IFFALSE 37417
// points := [ 32 , 120 , 70 ] ;
37398: LD_ADDR_VAR 0 9
37402: PUSH
37403: LD_INT 32
37405: PUSH
37406: LD_INT 120
37408: PUSH
37409: LD_INT 70
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: LIST
37416: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37417: LD_VAR 0 6
37421: PPUSH
37422: CALL_OW 264
37426: PUSH
37427: LD_INT 7
37429: PUSH
37430: LD_INT 28
37432: PUSH
37433: LD_INT 45
37435: PUSH
37436: LD_INT 92
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: IN
37445: IFFALSE 37466
// points := [ 35 , 20 , 45 ] ;
37447: LD_ADDR_VAR 0 9
37451: PUSH
37452: LD_INT 35
37454: PUSH
37455: LD_INT 20
37457: PUSH
37458: LD_INT 45
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: LIST
37465: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37466: LD_VAR 0 6
37470: PPUSH
37471: CALL_OW 264
37475: PUSH
37476: LD_INT 47
37478: PUSH
37479: EMPTY
37480: LIST
37481: IN
37482: IFFALSE 37503
// points := [ 67 , 45 , 75 ] ;
37484: LD_ADDR_VAR 0 9
37488: PUSH
37489: LD_INT 67
37491: PUSH
37492: LD_INT 45
37494: PUSH
37495: LD_INT 75
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: LIST
37502: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37503: LD_VAR 0 6
37507: PPUSH
37508: CALL_OW 264
37512: PUSH
37513: LD_INT 26
37515: PUSH
37516: EMPTY
37517: LIST
37518: IN
37519: IFFALSE 37540
// points := [ 120 , 30 , 80 ] ;
37521: LD_ADDR_VAR 0 9
37525: PUSH
37526: LD_INT 120
37528: PUSH
37529: LD_INT 30
37531: PUSH
37532: LD_INT 80
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: LIST
37539: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37540: LD_VAR 0 6
37544: PPUSH
37545: CALL_OW 264
37549: PUSH
37550: LD_INT 22
37552: PUSH
37553: EMPTY
37554: LIST
37555: IN
37556: IFFALSE 37577
// points := [ 40 , 1 , 1 ] ;
37558: LD_ADDR_VAR 0 9
37562: PUSH
37563: LD_INT 40
37565: PUSH
37566: LD_INT 1
37568: PUSH
37569: LD_INT 1
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: LIST
37576: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37577: LD_VAR 0 6
37581: PPUSH
37582: CALL_OW 264
37586: PUSH
37587: LD_INT 29
37589: PUSH
37590: EMPTY
37591: LIST
37592: IN
37593: IFFALSE 37614
// points := [ 70 , 200 , 400 ] ;
37595: LD_ADDR_VAR 0 9
37599: PUSH
37600: LD_INT 70
37602: PUSH
37603: LD_INT 200
37605: PUSH
37606: LD_INT 400
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: LIST
37613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37614: LD_VAR 0 6
37618: PPUSH
37619: CALL_OW 264
37623: PUSH
37624: LD_INT 14
37626: PUSH
37627: LD_INT 53
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: IN
37634: IFFALSE 37655
// points := [ 40 , 10 , 20 ] ;
37636: LD_ADDR_VAR 0 9
37640: PUSH
37641: LD_INT 40
37643: PUSH
37644: LD_INT 10
37646: PUSH
37647: LD_INT 20
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37655: LD_VAR 0 6
37659: PPUSH
37660: CALL_OW 264
37664: PUSH
37665: LD_INT 9
37667: PUSH
37668: EMPTY
37669: LIST
37670: IN
37671: IFFALSE 37692
// points := [ 5 , 70 , 20 ] ;
37673: LD_ADDR_VAR 0 9
37677: PUSH
37678: LD_INT 5
37680: PUSH
37681: LD_INT 70
37683: PUSH
37684: LD_INT 20
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: LIST
37691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37692: LD_VAR 0 6
37696: PPUSH
37697: CALL_OW 264
37701: PUSH
37702: LD_INT 10
37704: PUSH
37705: EMPTY
37706: LIST
37707: IN
37708: IFFALSE 37729
// points := [ 35 , 110 , 70 ] ;
37710: LD_ADDR_VAR 0 9
37714: PUSH
37715: LD_INT 35
37717: PUSH
37718: LD_INT 110
37720: PUSH
37721: LD_INT 70
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37729: LD_VAR 0 6
37733: PPUSH
37734: CALL_OW 265
37738: PUSH
37739: LD_INT 25
37741: EQUAL
37742: IFFALSE 37763
// points := [ 80 , 65 , 100 ] ;
37744: LD_ADDR_VAR 0 9
37748: PUSH
37749: LD_INT 80
37751: PUSH
37752: LD_INT 65
37754: PUSH
37755: LD_INT 100
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: LIST
37762: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37763: LD_VAR 0 6
37767: PPUSH
37768: CALL_OW 263
37772: PUSH
37773: LD_INT 1
37775: EQUAL
37776: IFFALSE 37811
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37778: LD_ADDR_VAR 0 10
37782: PUSH
37783: LD_VAR 0 10
37787: PUSH
37788: LD_VAR 0 6
37792: PPUSH
37793: CALL_OW 311
37797: PPUSH
37798: LD_INT 3
37800: PPUSH
37801: CALL_OW 259
37805: PUSH
37806: LD_INT 4
37808: MUL
37809: MUL
37810: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37811: LD_VAR 0 6
37815: PPUSH
37816: CALL_OW 263
37820: PUSH
37821: LD_INT 2
37823: EQUAL
37824: IFFALSE 37875
// begin j := IsControledBy ( i ) ;
37826: LD_ADDR_VAR 0 7
37830: PUSH
37831: LD_VAR 0 6
37835: PPUSH
37836: CALL_OW 312
37840: ST_TO_ADDR
// if j then
37841: LD_VAR 0 7
37845: IFFALSE 37875
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37847: LD_ADDR_VAR 0 10
37851: PUSH
37852: LD_VAR 0 10
37856: PUSH
37857: LD_VAR 0 7
37861: PPUSH
37862: LD_INT 3
37864: PPUSH
37865: CALL_OW 259
37869: PUSH
37870: LD_INT 3
37872: MUL
37873: MUL
37874: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37875: LD_VAR 0 6
37879: PPUSH
37880: CALL_OW 264
37884: PUSH
37885: LD_INT 5
37887: PUSH
37888: LD_INT 6
37890: PUSH
37891: LD_INT 46
37893: PUSH
37894: LD_INT 44
37896: PUSH
37897: LD_INT 47
37899: PUSH
37900: LD_INT 45
37902: PUSH
37903: LD_INT 28
37905: PUSH
37906: LD_INT 7
37908: PUSH
37909: LD_INT 27
37911: PUSH
37912: LD_INT 29
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: IN
37927: IFFALSE 37947
37929: PUSH
37930: LD_VAR 0 1
37934: PPUSH
37935: LD_INT 52
37937: PPUSH
37938: CALL_OW 321
37942: PUSH
37943: LD_INT 2
37945: EQUAL
37946: AND
37947: IFFALSE 37964
// bpoints := bpoints * 1.2 ;
37949: LD_ADDR_VAR 0 10
37953: PUSH
37954: LD_VAR 0 10
37958: PUSH
37959: LD_REAL  1.20000000000000E+0000
37962: MUL
37963: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37964: LD_VAR 0 6
37968: PPUSH
37969: CALL_OW 264
37973: PUSH
37974: LD_INT 6
37976: PUSH
37977: LD_INT 46
37979: PUSH
37980: LD_INT 47
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: LIST
37987: IN
37988: IFFALSE 38005
// bpoints := bpoints * 1.2 ;
37990: LD_ADDR_VAR 0 10
37994: PUSH
37995: LD_VAR 0 10
37999: PUSH
38000: LD_REAL  1.20000000000000E+0000
38003: MUL
38004: ST_TO_ADDR
// end ; unit_building :
38005: GO 38019
38007: LD_INT 3
38009: DOUBLE
38010: EQUAL
38011: IFTRUE 38015
38013: GO 38018
38015: POP
// ; end ;
38016: GO 38019
38018: POP
// for j = 1 to 3 do
38019: LD_ADDR_VAR 0 7
38023: PUSH
38024: DOUBLE
38025: LD_INT 1
38027: DEC
38028: ST_TO_ADDR
38029: LD_INT 3
38031: PUSH
38032: FOR_TO
38033: IFFALSE 38086
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38035: LD_ADDR_VAR 0 5
38039: PUSH
38040: LD_VAR 0 5
38044: PPUSH
38045: LD_VAR 0 7
38049: PPUSH
38050: LD_VAR 0 5
38054: PUSH
38055: LD_VAR 0 7
38059: ARRAY
38060: PUSH
38061: LD_VAR 0 9
38065: PUSH
38066: LD_VAR 0 7
38070: ARRAY
38071: PUSH
38072: LD_VAR 0 10
38076: MUL
38077: PLUS
38078: PPUSH
38079: CALL_OW 1
38083: ST_TO_ADDR
38084: GO 38032
38086: POP
38087: POP
// end ;
38088: GO 36561
38090: POP
38091: POP
// result := Replace ( result , 4 , tmp ) ;
38092: LD_ADDR_VAR 0 5
38096: PUSH
38097: LD_VAR 0 5
38101: PPUSH
38102: LD_INT 4
38104: PPUSH
38105: LD_VAR 0 8
38109: PPUSH
38110: CALL_OW 1
38114: ST_TO_ADDR
// end ;
38115: LD_VAR 0 5
38119: RET
// export function DangerAtRange ( unit , range ) ; begin
38120: LD_INT 0
38122: PPUSH
// if not unit then
38123: LD_VAR 0 1
38127: NOT
38128: IFFALSE 38132
// exit ;
38130: GO 38177
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38132: LD_ADDR_VAR 0 3
38136: PUSH
38137: LD_VAR 0 1
38141: PPUSH
38142: CALL_OW 255
38146: PPUSH
38147: LD_VAR 0 1
38151: PPUSH
38152: CALL_OW 250
38156: PPUSH
38157: LD_VAR 0 1
38161: PPUSH
38162: CALL_OW 251
38166: PPUSH
38167: LD_VAR 0 2
38171: PPUSH
38172: CALL 36411 0 4
38176: ST_TO_ADDR
// end ;
38177: LD_VAR 0 3
38181: RET
// export function DangerInArea ( side , area ) ; begin
38182: LD_INT 0
38184: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38185: LD_ADDR_VAR 0 3
38189: PUSH
38190: LD_VAR 0 2
38194: PPUSH
38195: LD_INT 81
38197: PUSH
38198: LD_VAR 0 1
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PPUSH
38207: CALL_OW 70
38211: ST_TO_ADDR
// end ;
38212: LD_VAR 0 3
38216: RET
// export function IsExtension ( b ) ; begin
38217: LD_INT 0
38219: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38220: LD_ADDR_VAR 0 2
38224: PUSH
38225: LD_VAR 0 1
38229: PUSH
38230: LD_INT 23
38232: PUSH
38233: LD_INT 20
38235: PUSH
38236: LD_INT 22
38238: PUSH
38239: LD_INT 17
38241: PUSH
38242: LD_INT 24
38244: PUSH
38245: LD_INT 21
38247: PUSH
38248: LD_INT 19
38250: PUSH
38251: LD_INT 16
38253: PUSH
38254: LD_INT 25
38256: PUSH
38257: LD_INT 18
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: IN
38272: ST_TO_ADDR
// end ;
38273: LD_VAR 0 2
38277: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38278: LD_INT 0
38280: PPUSH
38281: PPUSH
38282: PPUSH
// result := [ ] ;
38283: LD_ADDR_VAR 0 4
38287: PUSH
38288: EMPTY
38289: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38290: LD_ADDR_VAR 0 5
38294: PUSH
38295: LD_VAR 0 2
38299: PPUSH
38300: LD_INT 21
38302: PUSH
38303: LD_INT 3
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PPUSH
38310: CALL_OW 70
38314: ST_TO_ADDR
// if not tmp then
38315: LD_VAR 0 5
38319: NOT
38320: IFFALSE 38324
// exit ;
38322: GO 38388
// if checkLink then
38324: LD_VAR 0 3
38328: IFFALSE 38378
// begin for i in tmp do
38330: LD_ADDR_VAR 0 6
38334: PUSH
38335: LD_VAR 0 5
38339: PUSH
38340: FOR_IN
38341: IFFALSE 38376
// if GetBase ( i ) <> base then
38343: LD_VAR 0 6
38347: PPUSH
38348: CALL_OW 274
38352: PUSH
38353: LD_VAR 0 1
38357: NONEQUAL
38358: IFFALSE 38374
// ComLinkToBase ( base , i ) ;
38360: LD_VAR 0 1
38364: PPUSH
38365: LD_VAR 0 6
38369: PPUSH
38370: CALL_OW 169
38374: GO 38340
38376: POP
38377: POP
// end ; result := tmp ;
38378: LD_ADDR_VAR 0 4
38382: PUSH
38383: LD_VAR 0 5
38387: ST_TO_ADDR
// end ;
38388: LD_VAR 0 4
38392: RET
// export function ComComplete ( units , b ) ; var i ; begin
38393: LD_INT 0
38395: PPUSH
38396: PPUSH
// if not units then
38397: LD_VAR 0 1
38401: NOT
38402: IFFALSE 38406
// exit ;
38404: GO 38496
// for i in units do
38406: LD_ADDR_VAR 0 4
38410: PUSH
38411: LD_VAR 0 1
38415: PUSH
38416: FOR_IN
38417: IFFALSE 38494
// if BuildingStatus ( b ) = bs_build then
38419: LD_VAR 0 2
38423: PPUSH
38424: CALL_OW 461
38428: PUSH
38429: LD_INT 1
38431: EQUAL
38432: IFFALSE 38492
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38434: LD_VAR 0 4
38438: PPUSH
38439: LD_STRING h
38441: PUSH
38442: LD_VAR 0 2
38446: PPUSH
38447: CALL_OW 250
38451: PUSH
38452: LD_VAR 0 2
38456: PPUSH
38457: CALL_OW 251
38461: PUSH
38462: LD_VAR 0 2
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: PUSH
38485: EMPTY
38486: LIST
38487: PPUSH
38488: CALL_OW 446
38492: GO 38416
38494: POP
38495: POP
// end ;
38496: LD_VAR 0 3
38500: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38501: LD_INT 0
38503: PPUSH
38504: PPUSH
38505: PPUSH
38506: PPUSH
38507: PPUSH
38508: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38509: LD_VAR 0 1
38513: NOT
38514: IFTRUE 38531
38516: PUSH
38517: LD_VAR 0 1
38521: PPUSH
38522: CALL_OW 263
38526: PUSH
38527: LD_INT 2
38529: NONEQUAL
38530: OR
38531: IFFALSE 38535
// exit ;
38533: GO 38851
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38535: LD_ADDR_VAR 0 6
38539: PUSH
38540: LD_INT 22
38542: PUSH
38543: LD_VAR 0 1
38547: PPUSH
38548: CALL_OW 255
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 2
38559: PUSH
38560: LD_INT 30
38562: PUSH
38563: LD_INT 36
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 34
38572: PUSH
38573: LD_INT 31
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: LIST
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PPUSH
38589: CALL_OW 69
38593: ST_TO_ADDR
// if not tmp then
38594: LD_VAR 0 6
38598: NOT
38599: IFFALSE 38603
// exit ;
38601: GO 38851
// result := [ ] ;
38603: LD_ADDR_VAR 0 2
38607: PUSH
38608: EMPTY
38609: ST_TO_ADDR
// for i in tmp do
38610: LD_ADDR_VAR 0 3
38614: PUSH
38615: LD_VAR 0 6
38619: PUSH
38620: FOR_IN
38621: IFFALSE 38692
// begin t := UnitsInside ( i ) ;
38623: LD_ADDR_VAR 0 4
38627: PUSH
38628: LD_VAR 0 3
38632: PPUSH
38633: CALL_OW 313
38637: ST_TO_ADDR
// if t then
38638: LD_VAR 0 4
38642: IFFALSE 38690
// for j in t do
38644: LD_ADDR_VAR 0 7
38648: PUSH
38649: LD_VAR 0 4
38653: PUSH
38654: FOR_IN
38655: IFFALSE 38688
// result := Replace ( result , result + 1 , j ) ;
38657: LD_ADDR_VAR 0 2
38661: PUSH
38662: LD_VAR 0 2
38666: PPUSH
38667: LD_VAR 0 2
38671: PUSH
38672: LD_INT 1
38674: PLUS
38675: PPUSH
38676: LD_VAR 0 7
38680: PPUSH
38681: CALL_OW 1
38685: ST_TO_ADDR
38686: GO 38654
38688: POP
38689: POP
// end ;
38690: GO 38620
38692: POP
38693: POP
// if not result then
38694: LD_VAR 0 2
38698: NOT
38699: IFFALSE 38703
// exit ;
38701: GO 38851
// mech := result [ 1 ] ;
38703: LD_ADDR_VAR 0 5
38707: PUSH
38708: LD_VAR 0 2
38712: PUSH
38713: LD_INT 1
38715: ARRAY
38716: ST_TO_ADDR
// if result > 1 then
38717: LD_VAR 0 2
38721: PUSH
38722: LD_INT 1
38724: GREATER
38725: IFFALSE 38837
// begin for i = 2 to result do
38727: LD_ADDR_VAR 0 3
38731: PUSH
38732: DOUBLE
38733: LD_INT 2
38735: DEC
38736: ST_TO_ADDR
38737: LD_VAR 0 2
38741: PUSH
38742: FOR_TO
38743: IFFALSE 38835
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38745: LD_ADDR_VAR 0 4
38749: PUSH
38750: LD_VAR 0 2
38754: PUSH
38755: LD_VAR 0 3
38759: ARRAY
38760: PPUSH
38761: LD_INT 3
38763: PPUSH
38764: CALL_OW 259
38768: PUSH
38769: LD_VAR 0 2
38773: PUSH
38774: LD_VAR 0 3
38778: ARRAY
38779: PPUSH
38780: CALL_OW 432
38784: MINUS
38785: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38786: LD_VAR 0 4
38790: PUSH
38791: LD_VAR 0 5
38795: PPUSH
38796: LD_INT 3
38798: PPUSH
38799: CALL_OW 259
38803: PUSH
38804: LD_VAR 0 5
38808: PPUSH
38809: CALL_OW 432
38813: MINUS
38814: GREATEREQUAL
38815: IFFALSE 38833
// mech := result [ i ] ;
38817: LD_ADDR_VAR 0 5
38821: PUSH
38822: LD_VAR 0 2
38826: PUSH
38827: LD_VAR 0 3
38831: ARRAY
38832: ST_TO_ADDR
// end ;
38833: GO 38742
38835: POP
38836: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38837: LD_VAR 0 1
38841: PPUSH
38842: LD_VAR 0 5
38846: PPUSH
38847: CALL_OW 135
// end ;
38851: LD_VAR 0 2
38855: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38856: LD_INT 0
38858: PPUSH
38859: PPUSH
38860: PPUSH
38861: PPUSH
38862: PPUSH
38863: PPUSH
38864: PPUSH
38865: PPUSH
38866: PPUSH
38867: PPUSH
38868: PPUSH
38869: PPUSH
38870: PPUSH
// result := [ ] ;
38871: LD_ADDR_VAR 0 7
38875: PUSH
38876: EMPTY
38877: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38878: LD_VAR 0 1
38882: PPUSH
38883: CALL_OW 266
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: IN
38898: NOT
38899: IFFALSE 38903
// exit ;
38901: GO 40543
// if name then
38903: LD_VAR 0 3
38907: IFFALSE 38923
// SetBName ( base_dep , name ) ;
38909: LD_VAR 0 1
38913: PPUSH
38914: LD_VAR 0 3
38918: PPUSH
38919: CALL_OW 500
// base := GetBase ( base_dep ) ;
38923: LD_ADDR_VAR 0 15
38927: PUSH
38928: LD_VAR 0 1
38932: PPUSH
38933: CALL_OW 274
38937: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38938: LD_ADDR_VAR 0 16
38942: PUSH
38943: LD_VAR 0 1
38947: PPUSH
38948: CALL_OW 255
38952: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38953: LD_ADDR_VAR 0 17
38957: PUSH
38958: LD_VAR 0 1
38962: PPUSH
38963: CALL_OW 248
38967: ST_TO_ADDR
// if sources then
38968: LD_VAR 0 5
38972: IFFALSE 39019
// for i = 1 to 3 do
38974: LD_ADDR_VAR 0 8
38978: PUSH
38979: DOUBLE
38980: LD_INT 1
38982: DEC
38983: ST_TO_ADDR
38984: LD_INT 3
38986: PUSH
38987: FOR_TO
38988: IFFALSE 39017
// AddResourceType ( base , i , sources [ i ] ) ;
38990: LD_VAR 0 15
38994: PPUSH
38995: LD_VAR 0 8
38999: PPUSH
39000: LD_VAR 0 5
39004: PUSH
39005: LD_VAR 0 8
39009: ARRAY
39010: PPUSH
39011: CALL_OW 276
39015: GO 38987
39017: POP
39018: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39019: LD_ADDR_VAR 0 18
39023: PUSH
39024: LD_VAR 0 15
39028: PPUSH
39029: LD_VAR 0 2
39033: PPUSH
39034: LD_INT 1
39036: PPUSH
39037: CALL 38278 0 3
39041: ST_TO_ADDR
// InitHc ;
39042: CALL_OW 19
// InitUc ;
39046: CALL_OW 18
// uc_side := side ;
39050: LD_ADDR_OWVAR 20
39054: PUSH
39055: LD_VAR 0 16
39059: ST_TO_ADDR
// uc_nation := nation ;
39060: LD_ADDR_OWVAR 21
39064: PUSH
39065: LD_VAR 0 17
39069: ST_TO_ADDR
// if buildings then
39070: LD_VAR 0 18
39074: IFFALSE 40402
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39076: LD_ADDR_VAR 0 19
39080: PUSH
39081: LD_VAR 0 18
39085: PPUSH
39086: LD_INT 2
39088: PUSH
39089: LD_INT 30
39091: PUSH
39092: LD_INT 29
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 30
39101: PUSH
39102: LD_INT 30
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: LIST
39113: PPUSH
39114: CALL_OW 72
39118: ST_TO_ADDR
// if tmp then
39119: LD_VAR 0 19
39123: IFFALSE 39171
// for i in tmp do
39125: LD_ADDR_VAR 0 8
39129: PUSH
39130: LD_VAR 0 19
39134: PUSH
39135: FOR_IN
39136: IFFALSE 39169
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39138: LD_VAR 0 8
39142: PPUSH
39143: CALL_OW 250
39147: PPUSH
39148: LD_VAR 0 8
39152: PPUSH
39153: CALL_OW 251
39157: PPUSH
39158: LD_VAR 0 16
39162: PPUSH
39163: CALL_OW 441
39167: GO 39135
39169: POP
39170: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39171: LD_VAR 0 18
39175: PPUSH
39176: LD_INT 2
39178: PUSH
39179: LD_INT 30
39181: PUSH
39182: LD_INT 32
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 30
39191: PUSH
39192: LD_INT 33
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: LIST
39203: PPUSH
39204: CALL_OW 72
39208: IFFALSE 39296
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39210: LD_ADDR_VAR 0 8
39214: PUSH
39215: LD_VAR 0 18
39219: PPUSH
39220: LD_INT 2
39222: PUSH
39223: LD_INT 30
39225: PUSH
39226: LD_INT 32
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 30
39235: PUSH
39236: LD_INT 33
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: LIST
39247: PPUSH
39248: CALL_OW 72
39252: PUSH
39253: FOR_IN
39254: IFFALSE 39294
// begin if not GetBWeapon ( i ) then
39256: LD_VAR 0 8
39260: PPUSH
39261: CALL_OW 269
39265: NOT
39266: IFFALSE 39292
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39268: LD_VAR 0 8
39272: PPUSH
39273: LD_VAR 0 8
39277: PPUSH
39278: LD_VAR 0 2
39282: PPUSH
39283: CALL 40548 0 2
39287: PPUSH
39288: CALL_OW 431
// end ;
39292: GO 39253
39294: POP
39295: POP
// end ; for i = 1 to personel do
39296: LD_ADDR_VAR 0 8
39300: PUSH
39301: DOUBLE
39302: LD_INT 1
39304: DEC
39305: ST_TO_ADDR
39306: LD_VAR 0 6
39310: PUSH
39311: FOR_TO
39312: IFFALSE 40382
// begin if i > 4 then
39314: LD_VAR 0 8
39318: PUSH
39319: LD_INT 4
39321: GREATER
39322: IFFALSE 39326
// break ;
39324: GO 40382
// case i of 1 :
39326: LD_VAR 0 8
39330: PUSH
39331: LD_INT 1
39333: DOUBLE
39334: EQUAL
39335: IFTRUE 39339
39337: GO 39419
39339: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39340: LD_ADDR_VAR 0 12
39344: PUSH
39345: LD_VAR 0 18
39349: PPUSH
39350: LD_INT 22
39352: PUSH
39353: LD_VAR 0 16
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 58
39364: PUSH
39365: EMPTY
39366: LIST
39367: PUSH
39368: LD_INT 2
39370: PUSH
39371: LD_INT 30
39373: PUSH
39374: LD_INT 32
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 30
39383: PUSH
39384: LD_INT 4
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 30
39393: PUSH
39394: LD_INT 5
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: LIST
39411: PPUSH
39412: CALL_OW 72
39416: ST_TO_ADDR
39417: GO 39641
39419: LD_INT 2
39421: DOUBLE
39422: EQUAL
39423: IFTRUE 39427
39425: GO 39489
39427: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39428: LD_ADDR_VAR 0 12
39432: PUSH
39433: LD_VAR 0 18
39437: PPUSH
39438: LD_INT 22
39440: PUSH
39441: LD_VAR 0 16
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 2
39452: PUSH
39453: LD_INT 30
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 30
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: LIST
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PPUSH
39482: CALL_OW 72
39486: ST_TO_ADDR
39487: GO 39641
39489: LD_INT 3
39491: DOUBLE
39492: EQUAL
39493: IFTRUE 39497
39495: GO 39559
39497: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39498: LD_ADDR_VAR 0 12
39502: PUSH
39503: LD_VAR 0 18
39507: PPUSH
39508: LD_INT 22
39510: PUSH
39511: LD_VAR 0 16
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: LD_INT 30
39525: PUSH
39526: LD_INT 2
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 30
39535: PUSH
39536: LD_INT 3
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: LIST
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PPUSH
39552: CALL_OW 72
39556: ST_TO_ADDR
39557: GO 39641
39559: LD_INT 4
39561: DOUBLE
39562: EQUAL
39563: IFTRUE 39567
39565: GO 39640
39567: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39568: LD_ADDR_VAR 0 12
39572: PUSH
39573: LD_VAR 0 18
39577: PPUSH
39578: LD_INT 22
39580: PUSH
39581: LD_VAR 0 16
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: LD_INT 30
39595: PUSH
39596: LD_INT 6
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 30
39605: PUSH
39606: LD_INT 7
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 30
39615: PUSH
39616: LD_INT 8
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PPUSH
39633: CALL_OW 72
39637: ST_TO_ADDR
39638: GO 39641
39640: POP
// if i = 1 then
39641: LD_VAR 0 8
39645: PUSH
39646: LD_INT 1
39648: EQUAL
39649: IFFALSE 39760
// begin tmp := [ ] ;
39651: LD_ADDR_VAR 0 19
39655: PUSH
39656: EMPTY
39657: ST_TO_ADDR
// for j in f do
39658: LD_ADDR_VAR 0 9
39662: PUSH
39663: LD_VAR 0 12
39667: PUSH
39668: FOR_IN
39669: IFFALSE 39742
// if GetBType ( j ) = b_bunker then
39671: LD_VAR 0 9
39675: PPUSH
39676: CALL_OW 266
39680: PUSH
39681: LD_INT 32
39683: EQUAL
39684: IFFALSE 39711
// tmp := Insert ( tmp , 1 , j ) else
39686: LD_ADDR_VAR 0 19
39690: PUSH
39691: LD_VAR 0 19
39695: PPUSH
39696: LD_INT 1
39698: PPUSH
39699: LD_VAR 0 9
39703: PPUSH
39704: CALL_OW 2
39708: ST_TO_ADDR
39709: GO 39740
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39711: LD_ADDR_VAR 0 19
39715: PUSH
39716: LD_VAR 0 19
39720: PPUSH
39721: LD_VAR 0 19
39725: PUSH
39726: LD_INT 1
39728: PLUS
39729: PPUSH
39730: LD_VAR 0 9
39734: PPUSH
39735: CALL_OW 2
39739: ST_TO_ADDR
39740: GO 39668
39742: POP
39743: POP
// if tmp then
39744: LD_VAR 0 19
39748: IFFALSE 39760
// f := tmp ;
39750: LD_ADDR_VAR 0 12
39754: PUSH
39755: LD_VAR 0 19
39759: ST_TO_ADDR
// end ; x := personel [ i ] ;
39760: LD_ADDR_VAR 0 13
39764: PUSH
39765: LD_VAR 0 6
39769: PUSH
39770: LD_VAR 0 8
39774: ARRAY
39775: ST_TO_ADDR
// if x = - 1 then
39776: LD_VAR 0 13
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: EQUAL
39785: IFFALSE 39996
// begin for j in f do
39787: LD_ADDR_VAR 0 9
39791: PUSH
39792: LD_VAR 0 12
39796: PUSH
39797: FOR_IN
39798: IFFALSE 39992
// repeat InitHc ;
39800: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39804: LD_VAR 0 9
39808: PPUSH
39809: CALL_OW 266
39813: PUSH
39814: LD_INT 5
39816: EQUAL
39817: IFFALSE 39887
// begin if UnitsInside ( j ) < 3 then
39819: LD_VAR 0 9
39823: PPUSH
39824: CALL_OW 313
39828: PUSH
39829: LD_INT 3
39831: LESS
39832: IFFALSE 39868
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39834: LD_INT 0
39836: PPUSH
39837: LD_INT 5
39839: PUSH
39840: LD_INT 8
39842: PUSH
39843: LD_INT 9
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: PUSH
39851: LD_VAR 0 17
39855: ARRAY
39856: PPUSH
39857: LD_VAR 0 4
39861: PPUSH
39862: CALL_OW 380
39866: GO 39885
// PrepareHuman ( false , i , skill ) ;
39868: LD_INT 0
39870: PPUSH
39871: LD_VAR 0 8
39875: PPUSH
39876: LD_VAR 0 4
39880: PPUSH
39881: CALL_OW 380
// end else
39885: GO 39904
// PrepareHuman ( false , i , skill ) ;
39887: LD_INT 0
39889: PPUSH
39890: LD_VAR 0 8
39894: PPUSH
39895: LD_VAR 0 4
39899: PPUSH
39900: CALL_OW 380
// un := CreateHuman ;
39904: LD_ADDR_VAR 0 14
39908: PUSH
39909: CALL_OW 44
39913: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39914: LD_ADDR_VAR 0 7
39918: PUSH
39919: LD_VAR 0 7
39923: PPUSH
39924: LD_INT 1
39926: PPUSH
39927: LD_VAR 0 14
39931: PPUSH
39932: CALL_OW 2
39936: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39937: LD_VAR 0 14
39941: PPUSH
39942: LD_VAR 0 9
39946: PPUSH
39947: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39951: LD_VAR 0 9
39955: PPUSH
39956: CALL_OW 313
39960: PUSH
39961: LD_INT 6
39963: EQUAL
39964: IFTRUE 39988
39966: PUSH
39967: LD_VAR 0 9
39971: PPUSH
39972: CALL_OW 266
39976: PUSH
39977: LD_INT 32
39979: PUSH
39980: LD_INT 31
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: IN
39987: OR
39988: IFFALSE 39800
39990: GO 39797
39992: POP
39993: POP
// end else
39994: GO 40380
// for j = 1 to x do
39996: LD_ADDR_VAR 0 9
40000: PUSH
40001: DOUBLE
40002: LD_INT 1
40004: DEC
40005: ST_TO_ADDR
40006: LD_VAR 0 13
40010: PUSH
40011: FOR_TO
40012: IFFALSE 40378
// begin InitHc ;
40014: CALL_OW 19
// if not f then
40018: LD_VAR 0 12
40022: NOT
40023: IFFALSE 40112
// begin PrepareHuman ( false , i , skill ) ;
40025: LD_INT 0
40027: PPUSH
40028: LD_VAR 0 8
40032: PPUSH
40033: LD_VAR 0 4
40037: PPUSH
40038: CALL_OW 380
// un := CreateHuman ;
40042: LD_ADDR_VAR 0 14
40046: PUSH
40047: CALL_OW 44
40051: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40052: LD_ADDR_VAR 0 7
40056: PUSH
40057: LD_VAR 0 7
40061: PPUSH
40062: LD_INT 1
40064: PPUSH
40065: LD_VAR 0 14
40069: PPUSH
40070: CALL_OW 2
40074: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40075: LD_VAR 0 14
40079: PPUSH
40080: LD_VAR 0 1
40084: PPUSH
40085: CALL_OW 250
40089: PPUSH
40090: LD_VAR 0 1
40094: PPUSH
40095: CALL_OW 251
40099: PPUSH
40100: LD_INT 10
40102: PPUSH
40103: LD_INT 0
40105: PPUSH
40106: CALL_OW 50
// continue ;
40110: GO 40011
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40112: LD_VAR 0 12
40116: PUSH
40117: LD_INT 1
40119: ARRAY
40120: PPUSH
40121: CALL_OW 313
40125: IFFALSE 40153
40127: PUSH
40128: LD_VAR 0 12
40132: PUSH
40133: LD_INT 1
40135: ARRAY
40136: PPUSH
40137: CALL_OW 266
40141: PUSH
40142: LD_INT 32
40144: PUSH
40145: LD_INT 31
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: IN
40152: AND
40153: IFTRUE 40174
40155: PUSH
40156: LD_VAR 0 12
40160: PUSH
40161: LD_INT 1
40163: ARRAY
40164: PPUSH
40165: CALL_OW 313
40169: PUSH
40170: LD_INT 6
40172: EQUAL
40173: OR
40174: IFFALSE 40194
// f := Delete ( f , 1 ) ;
40176: LD_ADDR_VAR 0 12
40180: PUSH
40181: LD_VAR 0 12
40185: PPUSH
40186: LD_INT 1
40188: PPUSH
40189: CALL_OW 3
40193: ST_TO_ADDR
// if not f then
40194: LD_VAR 0 12
40198: NOT
40199: IFFALSE 40217
// begin x := x + 2 ;
40201: LD_ADDR_VAR 0 13
40205: PUSH
40206: LD_VAR 0 13
40210: PUSH
40211: LD_INT 2
40213: PLUS
40214: ST_TO_ADDR
// continue ;
40215: GO 40011
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40217: LD_VAR 0 12
40221: PUSH
40222: LD_INT 1
40224: ARRAY
40225: PPUSH
40226: CALL_OW 266
40230: PUSH
40231: LD_INT 5
40233: EQUAL
40234: IFFALSE 40308
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40236: LD_VAR 0 12
40240: PUSH
40241: LD_INT 1
40243: ARRAY
40244: PPUSH
40245: CALL_OW 313
40249: PUSH
40250: LD_INT 3
40252: LESS
40253: IFFALSE 40289
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40255: LD_INT 0
40257: PPUSH
40258: LD_INT 5
40260: PUSH
40261: LD_INT 8
40263: PUSH
40264: LD_INT 9
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: LIST
40271: PUSH
40272: LD_VAR 0 17
40276: ARRAY
40277: PPUSH
40278: LD_VAR 0 4
40282: PPUSH
40283: CALL_OW 380
40287: GO 40306
// PrepareHuman ( false , i , skill ) ;
40289: LD_INT 0
40291: PPUSH
40292: LD_VAR 0 8
40296: PPUSH
40297: LD_VAR 0 4
40301: PPUSH
40302: CALL_OW 380
// end else
40306: GO 40325
// PrepareHuman ( false , i , skill ) ;
40308: LD_INT 0
40310: PPUSH
40311: LD_VAR 0 8
40315: PPUSH
40316: LD_VAR 0 4
40320: PPUSH
40321: CALL_OW 380
// un := CreateHuman ;
40325: LD_ADDR_VAR 0 14
40329: PUSH
40330: CALL_OW 44
40334: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40335: LD_ADDR_VAR 0 7
40339: PUSH
40340: LD_VAR 0 7
40344: PPUSH
40345: LD_INT 1
40347: PPUSH
40348: LD_VAR 0 14
40352: PPUSH
40353: CALL_OW 2
40357: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40358: LD_VAR 0 14
40362: PPUSH
40363: LD_VAR 0 12
40367: PUSH
40368: LD_INT 1
40370: ARRAY
40371: PPUSH
40372: CALL_OW 52
// end ;
40376: GO 40011
40378: POP
40379: POP
// end ;
40380: GO 39311
40382: POP
40383: POP
// result := result ^ buildings ;
40384: LD_ADDR_VAR 0 7
40388: PUSH
40389: LD_VAR 0 7
40393: PUSH
40394: LD_VAR 0 18
40398: ADD
40399: ST_TO_ADDR
// end else
40400: GO 40543
// begin for i = 1 to personel do
40402: LD_ADDR_VAR 0 8
40406: PUSH
40407: DOUBLE
40408: LD_INT 1
40410: DEC
40411: ST_TO_ADDR
40412: LD_VAR 0 6
40416: PUSH
40417: FOR_TO
40418: IFFALSE 40541
// begin if i > 4 then
40420: LD_VAR 0 8
40424: PUSH
40425: LD_INT 4
40427: GREATER
40428: IFFALSE 40432
// break ;
40430: GO 40541
// x := personel [ i ] ;
40432: LD_ADDR_VAR 0 13
40436: PUSH
40437: LD_VAR 0 6
40441: PUSH
40442: LD_VAR 0 8
40446: ARRAY
40447: ST_TO_ADDR
// if x = - 1 then
40448: LD_VAR 0 13
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: EQUAL
40457: IFFALSE 40461
// continue ;
40459: GO 40417
// PrepareHuman ( false , i , skill ) ;
40461: LD_INT 0
40463: PPUSH
40464: LD_VAR 0 8
40468: PPUSH
40469: LD_VAR 0 4
40473: PPUSH
40474: CALL_OW 380
// un := CreateHuman ;
40478: LD_ADDR_VAR 0 14
40482: PUSH
40483: CALL_OW 44
40487: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40488: LD_VAR 0 14
40492: PPUSH
40493: LD_VAR 0 1
40497: PPUSH
40498: CALL_OW 250
40502: PPUSH
40503: LD_VAR 0 1
40507: PPUSH
40508: CALL_OW 251
40512: PPUSH
40513: LD_INT 10
40515: PPUSH
40516: LD_INT 0
40518: PPUSH
40519: CALL_OW 50
// result := result ^ un ;
40523: LD_ADDR_VAR 0 7
40527: PUSH
40528: LD_VAR 0 7
40532: PUSH
40533: LD_VAR 0 14
40537: ADD
40538: ST_TO_ADDR
// end ;
40539: GO 40417
40541: POP
40542: POP
// end ; end ;
40543: LD_VAR 0 7
40547: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40548: LD_INT 0
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
40561: PPUSH
40562: PPUSH
40563: PPUSH
40564: PPUSH
40565: PPUSH
// result := false ;
40566: LD_ADDR_VAR 0 3
40570: PUSH
40571: LD_INT 0
40573: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40574: LD_VAR 0 1
40578: NOT
40579: IFTRUE 40604
40581: PUSH
40582: LD_VAR 0 1
40586: PPUSH
40587: CALL_OW 266
40591: PUSH
40592: LD_INT 32
40594: PUSH
40595: LD_INT 33
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: IN
40602: NOT
40603: OR
40604: IFFALSE 40608
// exit ;
40606: GO 41743
// nat := GetNation ( tower ) ;
40608: LD_ADDR_VAR 0 12
40612: PUSH
40613: LD_VAR 0 1
40617: PPUSH
40618: CALL_OW 248
40622: ST_TO_ADDR
// side := GetSide ( tower ) ;
40623: LD_ADDR_VAR 0 16
40627: PUSH
40628: LD_VAR 0 1
40632: PPUSH
40633: CALL_OW 255
40637: ST_TO_ADDR
// x := GetX ( tower ) ;
40638: LD_ADDR_VAR 0 10
40642: PUSH
40643: LD_VAR 0 1
40647: PPUSH
40648: CALL_OW 250
40652: ST_TO_ADDR
// y := GetY ( tower ) ;
40653: LD_ADDR_VAR 0 11
40657: PUSH
40658: LD_VAR 0 1
40662: PPUSH
40663: CALL_OW 251
40667: ST_TO_ADDR
// if not x or not y then
40668: LD_VAR 0 10
40672: NOT
40673: IFTRUE 40682
40675: PUSH
40676: LD_VAR 0 11
40680: NOT
40681: OR
40682: IFFALSE 40686
// exit ;
40684: GO 41743
// weapon := 0 ;
40686: LD_ADDR_VAR 0 18
40690: PUSH
40691: LD_INT 0
40693: ST_TO_ADDR
// fac_list := [ ] ;
40694: LD_ADDR_VAR 0 17
40698: PUSH
40699: EMPTY
40700: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40701: LD_ADDR_VAR 0 6
40705: PUSH
40706: LD_VAR 0 1
40710: PPUSH
40711: CALL_OW 274
40715: PPUSH
40716: LD_VAR 0 2
40720: PPUSH
40721: LD_INT 0
40723: PPUSH
40724: CALL 38278 0 3
40728: PPUSH
40729: LD_INT 30
40731: PUSH
40732: LD_INT 3
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PPUSH
40739: CALL_OW 72
40743: ST_TO_ADDR
// if not factories then
40744: LD_VAR 0 6
40748: NOT
40749: IFFALSE 40753
// exit ;
40751: GO 41743
// for i in factories do
40753: LD_ADDR_VAR 0 8
40757: PUSH
40758: LD_VAR 0 6
40762: PUSH
40763: FOR_IN
40764: IFFALSE 40789
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40766: LD_ADDR_VAR 0 17
40770: PUSH
40771: LD_VAR 0 17
40775: PUSH
40776: LD_VAR 0 8
40780: PPUSH
40781: CALL_OW 478
40785: UNION
40786: ST_TO_ADDR
40787: GO 40763
40789: POP
40790: POP
// if not fac_list then
40791: LD_VAR 0 17
40795: NOT
40796: IFFALSE 40800
// exit ;
40798: GO 41743
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40800: LD_ADDR_VAR 0 5
40804: PUSH
40805: LD_INT 4
40807: PUSH
40808: LD_INT 5
40810: PUSH
40811: LD_INT 9
40813: PUSH
40814: LD_INT 10
40816: PUSH
40817: LD_INT 6
40819: PUSH
40820: LD_INT 7
40822: PUSH
40823: LD_INT 11
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 27
40837: PUSH
40838: LD_INT 28
40840: PUSH
40841: LD_INT 26
40843: PUSH
40844: LD_INT 30
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 43
40855: PUSH
40856: LD_INT 44
40858: PUSH
40859: LD_INT 46
40861: PUSH
40862: LD_INT 45
40864: PUSH
40865: LD_INT 47
40867: PUSH
40868: LD_INT 49
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: LIST
40883: PUSH
40884: LD_VAR 0 12
40888: ARRAY
40889: ST_TO_ADDR
// list := list isect fac_list ;
40890: LD_ADDR_VAR 0 5
40894: PUSH
40895: LD_VAR 0 5
40899: PUSH
40900: LD_VAR 0 17
40904: ISECT
40905: ST_TO_ADDR
// if not list then
40906: LD_VAR 0 5
40910: NOT
40911: IFFALSE 40915
// exit ;
40913: GO 41743
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40915: LD_VAR 0 12
40919: PUSH
40920: LD_INT 3
40922: EQUAL
40923: IFFALSE 40935
40925: PUSH
40926: LD_INT 49
40928: PUSH
40929: LD_VAR 0 5
40933: IN
40934: AND
40935: IFFALSE 40955
40937: PUSH
40938: LD_INT 31
40940: PPUSH
40941: LD_VAR 0 16
40945: PPUSH
40946: CALL_OW 321
40950: PUSH
40951: LD_INT 2
40953: EQUAL
40954: AND
40955: IFFALSE 41015
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40957: LD_INT 22
40959: PUSH
40960: LD_VAR 0 16
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 35
40971: PUSH
40972: LD_INT 49
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 91
40981: PUSH
40982: LD_VAR 0 1
40986: PUSH
40987: LD_INT 10
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: LIST
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: LIST
40999: PPUSH
41000: CALL_OW 69
41004: NOT
41005: IFFALSE 41015
// weapon := ru_time_lapser ;
41007: LD_ADDR_VAR 0 18
41011: PUSH
41012: LD_INT 49
41014: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41015: LD_VAR 0 12
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 2
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: IN
41030: IFFALSE 41054
41032: PUSH
41033: LD_INT 11
41035: PUSH
41036: LD_VAR 0 5
41040: IN
41041: IFTRUE 41053
41043: PUSH
41044: LD_INT 30
41046: PUSH
41047: LD_VAR 0 5
41051: IN
41052: OR
41053: AND
41054: IFFALSE 41074
41056: PUSH
41057: LD_INT 6
41059: PPUSH
41060: LD_VAR 0 16
41064: PPUSH
41065: CALL_OW 321
41069: PUSH
41070: LD_INT 2
41072: EQUAL
41073: AND
41074: IFFALSE 41241
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41076: LD_INT 22
41078: PUSH
41079: LD_VAR 0 16
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: LD_INT 35
41093: PUSH
41094: LD_INT 11
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 35
41103: PUSH
41104: LD_INT 30
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 91
41118: PUSH
41119: LD_VAR 0 1
41123: PUSH
41124: LD_INT 18
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: LIST
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: LIST
41136: PPUSH
41137: CALL_OW 69
41141: NOT
41142: IFFALSE 41218
41144: PUSH
41145: LD_INT 22
41147: PUSH
41148: LD_VAR 0 16
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 2
41159: PUSH
41160: LD_INT 30
41162: PUSH
41163: LD_INT 32
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 30
41172: PUSH
41173: LD_INT 33
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 91
41187: PUSH
41188: LD_VAR 0 1
41192: PUSH
41193: LD_INT 12
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: LIST
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: LIST
41205: PUSH
41206: EMPTY
41207: LIST
41208: PPUSH
41209: CALL_OW 69
41213: PUSH
41214: LD_INT 2
41216: GREATER
41217: AND
41218: IFFALSE 41241
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41220: LD_ADDR_VAR 0 18
41224: PUSH
41225: LD_INT 11
41227: PUSH
41228: LD_INT 30
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_VAR 0 12
41239: ARRAY
41240: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41241: LD_VAR 0 18
41245: NOT
41246: IFFALSE 41266
41248: PUSH
41249: LD_INT 40
41251: PPUSH
41252: LD_VAR 0 16
41256: PPUSH
41257: CALL_OW 321
41261: PUSH
41262: LD_INT 2
41264: EQUAL
41265: AND
41266: IFFALSE 41302
41268: PUSH
41269: LD_INT 7
41271: PUSH
41272: LD_VAR 0 5
41276: IN
41277: IFTRUE 41289
41279: PUSH
41280: LD_INT 28
41282: PUSH
41283: LD_VAR 0 5
41287: IN
41288: OR
41289: IFTRUE 41301
41291: PUSH
41292: LD_INT 45
41294: PUSH
41295: LD_VAR 0 5
41299: IN
41300: OR
41301: AND
41302: IFFALSE 41556
// begin hex := GetHexInfo ( x , y ) ;
41304: LD_ADDR_VAR 0 4
41308: PUSH
41309: LD_VAR 0 10
41313: PPUSH
41314: LD_VAR 0 11
41318: PPUSH
41319: CALL_OW 546
41323: ST_TO_ADDR
// if hex [ 1 ] then
41324: LD_VAR 0 4
41328: PUSH
41329: LD_INT 1
41331: ARRAY
41332: IFFALSE 41336
// exit ;
41334: GO 41743
// height := hex [ 2 ] ;
41336: LD_ADDR_VAR 0 15
41340: PUSH
41341: LD_VAR 0 4
41345: PUSH
41346: LD_INT 2
41348: ARRAY
41349: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41350: LD_ADDR_VAR 0 14
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: LD_INT 2
41360: PUSH
41361: LD_INT 3
41363: PUSH
41364: LD_INT 5
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: ST_TO_ADDR
// for i in tmp do
41373: LD_ADDR_VAR 0 8
41377: PUSH
41378: LD_VAR 0 14
41382: PUSH
41383: FOR_IN
41384: IFFALSE 41554
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41386: LD_ADDR_VAR 0 9
41390: PUSH
41391: LD_VAR 0 10
41395: PPUSH
41396: LD_VAR 0 8
41400: PPUSH
41401: LD_INT 5
41403: PPUSH
41404: CALL_OW 272
41408: PUSH
41409: LD_VAR 0 11
41413: PPUSH
41414: LD_VAR 0 8
41418: PPUSH
41419: LD_INT 5
41421: PPUSH
41422: CALL_OW 273
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41431: LD_VAR 0 9
41435: PUSH
41436: LD_INT 1
41438: ARRAY
41439: PPUSH
41440: LD_VAR 0 9
41444: PUSH
41445: LD_INT 2
41447: ARRAY
41448: PPUSH
41449: CALL_OW 488
41453: IFFALSE 41552
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41455: LD_ADDR_VAR 0 4
41459: PUSH
41460: LD_VAR 0 9
41464: PUSH
41465: LD_INT 1
41467: ARRAY
41468: PPUSH
41469: LD_VAR 0 9
41473: PUSH
41474: LD_INT 2
41476: ARRAY
41477: PPUSH
41478: CALL_OW 546
41482: ST_TO_ADDR
// if hex [ 1 ] then
41483: LD_VAR 0 4
41487: PUSH
41488: LD_INT 1
41490: ARRAY
41491: IFFALSE 41495
// continue ;
41493: GO 41383
// h := hex [ 2 ] ;
41495: LD_ADDR_VAR 0 13
41499: PUSH
41500: LD_VAR 0 4
41504: PUSH
41505: LD_INT 2
41507: ARRAY
41508: ST_TO_ADDR
// if h + 7 < height then
41509: LD_VAR 0 13
41513: PUSH
41514: LD_INT 7
41516: PLUS
41517: PUSH
41518: LD_VAR 0 15
41522: LESS
41523: IFFALSE 41552
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41525: LD_ADDR_VAR 0 18
41529: PUSH
41530: LD_INT 7
41532: PUSH
41533: LD_INT 28
41535: PUSH
41536: LD_INT 45
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: LIST
41543: PUSH
41544: LD_VAR 0 12
41548: ARRAY
41549: ST_TO_ADDR
// break ;
41550: GO 41554
// end ; end ; end ;
41552: GO 41383
41554: POP
41555: POP
// end ; if not weapon then
41556: LD_VAR 0 18
41560: NOT
41561: IFFALSE 41621
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41563: LD_ADDR_VAR 0 5
41567: PUSH
41568: LD_VAR 0 5
41572: PUSH
41573: LD_INT 11
41575: PUSH
41576: LD_INT 30
41578: PUSH
41579: LD_INT 49
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: LIST
41586: DIFF
41587: ST_TO_ADDR
// if not list then
41588: LD_VAR 0 5
41592: NOT
41593: IFFALSE 41597
// exit ;
41595: GO 41743
// weapon := list [ rand ( 1 , list ) ] ;
41597: LD_ADDR_VAR 0 18
41601: PUSH
41602: LD_VAR 0 5
41606: PUSH
41607: LD_INT 1
41609: PPUSH
41610: LD_VAR 0 5
41614: PPUSH
41615: CALL_OW 12
41619: ARRAY
41620: ST_TO_ADDR
// end ; if weapon then
41621: LD_VAR 0 18
41625: IFFALSE 41743
// begin tmp := CostOfWeapon ( weapon ) ;
41627: LD_ADDR_VAR 0 14
41631: PUSH
41632: LD_VAR 0 18
41636: PPUSH
41637: CALL_OW 451
41641: ST_TO_ADDR
// j := GetBase ( tower ) ;
41642: LD_ADDR_VAR 0 9
41646: PUSH
41647: LD_VAR 0 1
41651: PPUSH
41652: CALL_OW 274
41656: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41657: LD_VAR 0 9
41661: PPUSH
41662: LD_INT 1
41664: PPUSH
41665: CALL_OW 275
41669: PUSH
41670: LD_VAR 0 14
41674: PUSH
41675: LD_INT 1
41677: ARRAY
41678: GREATEREQUAL
41679: IFFALSE 41705
41681: PUSH
41682: LD_VAR 0 9
41686: PPUSH
41687: LD_INT 2
41689: PPUSH
41690: CALL_OW 275
41694: PUSH
41695: LD_VAR 0 14
41699: PUSH
41700: LD_INT 2
41702: ARRAY
41703: GREATEREQUAL
41704: AND
41705: IFFALSE 41731
41707: PUSH
41708: LD_VAR 0 9
41712: PPUSH
41713: LD_INT 3
41715: PPUSH
41716: CALL_OW 275
41720: PUSH
41721: LD_VAR 0 14
41725: PUSH
41726: LD_INT 3
41728: ARRAY
41729: GREATEREQUAL
41730: AND
41731: IFFALSE 41743
// result := weapon ;
41733: LD_ADDR_VAR 0 3
41737: PUSH
41738: LD_VAR 0 18
41742: ST_TO_ADDR
// end ; end ;
41743: LD_VAR 0 3
41747: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41748: LD_INT 0
41750: PPUSH
41751: PPUSH
// result := true ;
41752: LD_ADDR_VAR 0 3
41756: PUSH
41757: LD_INT 1
41759: ST_TO_ADDR
// if array1 = array2 then
41760: LD_VAR 0 1
41764: PUSH
41765: LD_VAR 0 2
41769: EQUAL
41770: IFFALSE 41830
// begin for i = 1 to array1 do
41772: LD_ADDR_VAR 0 4
41776: PUSH
41777: DOUBLE
41778: LD_INT 1
41780: DEC
41781: ST_TO_ADDR
41782: LD_VAR 0 1
41786: PUSH
41787: FOR_TO
41788: IFFALSE 41826
// if array1 [ i ] <> array2 [ i ] then
41790: LD_VAR 0 1
41794: PUSH
41795: LD_VAR 0 4
41799: ARRAY
41800: PUSH
41801: LD_VAR 0 2
41805: PUSH
41806: LD_VAR 0 4
41810: ARRAY
41811: NONEQUAL
41812: IFFALSE 41824
// begin result := false ;
41814: LD_ADDR_VAR 0 3
41818: PUSH
41819: LD_INT 0
41821: ST_TO_ADDR
// break ;
41822: GO 41826
// end ;
41824: GO 41787
41826: POP
41827: POP
// end else
41828: GO 41838
// result := false ;
41830: LD_ADDR_VAR 0 3
41834: PUSH
41835: LD_INT 0
41837: ST_TO_ADDR
// end ;
41838: LD_VAR 0 3
41842: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41843: LD_INT 0
41845: PPUSH
41846: PPUSH
// if not array1 or not array2 then
41847: LD_VAR 0 1
41851: NOT
41852: IFTRUE 41861
41854: PUSH
41855: LD_VAR 0 2
41859: NOT
41860: OR
41861: IFFALSE 41865
// exit ;
41863: GO 41929
// result := true ;
41865: LD_ADDR_VAR 0 3
41869: PUSH
41870: LD_INT 1
41872: ST_TO_ADDR
// for i = 1 to array1 do
41873: LD_ADDR_VAR 0 4
41877: PUSH
41878: DOUBLE
41879: LD_INT 1
41881: DEC
41882: ST_TO_ADDR
41883: LD_VAR 0 1
41887: PUSH
41888: FOR_TO
41889: IFFALSE 41927
// if array1 [ i ] <> array2 [ i ] then
41891: LD_VAR 0 1
41895: PUSH
41896: LD_VAR 0 4
41900: ARRAY
41901: PUSH
41902: LD_VAR 0 2
41906: PUSH
41907: LD_VAR 0 4
41911: ARRAY
41912: NONEQUAL
41913: IFFALSE 41925
// begin result := false ;
41915: LD_ADDR_VAR 0 3
41919: PUSH
41920: LD_INT 0
41922: ST_TO_ADDR
// break ;
41923: GO 41927
// end ;
41925: GO 41888
41927: POP
41928: POP
// end ;
41929: LD_VAR 0 3
41933: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41934: LD_INT 0
41936: PPUSH
41937: PPUSH
41938: PPUSH
// pom := GetBase ( fac ) ;
41939: LD_ADDR_VAR 0 5
41943: PUSH
41944: LD_VAR 0 1
41948: PPUSH
41949: CALL_OW 274
41953: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41954: LD_ADDR_VAR 0 4
41958: PUSH
41959: LD_VAR 0 2
41963: PUSH
41964: LD_INT 1
41966: ARRAY
41967: PPUSH
41968: LD_VAR 0 2
41972: PUSH
41973: LD_INT 2
41975: ARRAY
41976: PPUSH
41977: LD_VAR 0 2
41981: PUSH
41982: LD_INT 3
41984: ARRAY
41985: PPUSH
41986: LD_VAR 0 2
41990: PUSH
41991: LD_INT 4
41993: ARRAY
41994: PPUSH
41995: CALL_OW 449
41999: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42000: LD_ADDR_VAR 0 3
42004: PUSH
42005: LD_VAR 0 5
42009: PPUSH
42010: LD_INT 1
42012: PPUSH
42013: CALL_OW 275
42017: PUSH
42018: LD_VAR 0 4
42022: PUSH
42023: LD_INT 1
42025: ARRAY
42026: GREATEREQUAL
42027: IFFALSE 42053
42029: PUSH
42030: LD_VAR 0 5
42034: PPUSH
42035: LD_INT 2
42037: PPUSH
42038: CALL_OW 275
42042: PUSH
42043: LD_VAR 0 4
42047: PUSH
42048: LD_INT 2
42050: ARRAY
42051: GREATEREQUAL
42052: AND
42053: IFFALSE 42079
42055: PUSH
42056: LD_VAR 0 5
42060: PPUSH
42061: LD_INT 3
42063: PPUSH
42064: CALL_OW 275
42068: PUSH
42069: LD_VAR 0 4
42073: PUSH
42074: LD_INT 3
42076: ARRAY
42077: GREATEREQUAL
42078: AND
42079: ST_TO_ADDR
// end ;
42080: LD_VAR 0 3
42084: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42085: LD_INT 0
42087: PPUSH
42088: PPUSH
42089: PPUSH
42090: PPUSH
// pom := GetBase ( building ) ;
42091: LD_ADDR_VAR 0 3
42095: PUSH
42096: LD_VAR 0 1
42100: PPUSH
42101: CALL_OW 274
42105: ST_TO_ADDR
// if not pom then
42106: LD_VAR 0 3
42110: NOT
42111: IFFALSE 42115
// exit ;
42113: GO 42289
// btype := GetBType ( building ) ;
42115: LD_ADDR_VAR 0 5
42119: PUSH
42120: LD_VAR 0 1
42124: PPUSH
42125: CALL_OW 266
42129: ST_TO_ADDR
// if btype = b_armoury then
42130: LD_VAR 0 5
42134: PUSH
42135: LD_INT 4
42137: EQUAL
42138: IFFALSE 42148
// btype := b_barracks ;
42140: LD_ADDR_VAR 0 5
42144: PUSH
42145: LD_INT 5
42147: ST_TO_ADDR
// if btype = b_depot then
42148: LD_VAR 0 5
42152: PUSH
42153: LD_INT 0
42155: EQUAL
42156: IFFALSE 42166
// btype := b_warehouse ;
42158: LD_ADDR_VAR 0 5
42162: PUSH
42163: LD_INT 1
42165: ST_TO_ADDR
// if btype = b_workshop then
42166: LD_VAR 0 5
42170: PUSH
42171: LD_INT 2
42173: EQUAL
42174: IFFALSE 42184
// btype := b_factory ;
42176: LD_ADDR_VAR 0 5
42180: PUSH
42181: LD_INT 3
42183: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42184: LD_ADDR_VAR 0 4
42188: PUSH
42189: LD_VAR 0 5
42193: PPUSH
42194: LD_VAR 0 1
42198: PPUSH
42199: CALL_OW 248
42203: PPUSH
42204: CALL_OW 450
42208: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42209: LD_ADDR_VAR 0 2
42213: PUSH
42214: LD_VAR 0 3
42218: PPUSH
42219: LD_INT 1
42221: PPUSH
42222: CALL_OW 275
42226: PUSH
42227: LD_VAR 0 4
42231: PUSH
42232: LD_INT 1
42234: ARRAY
42235: GREATEREQUAL
42236: IFFALSE 42262
42238: PUSH
42239: LD_VAR 0 3
42243: PPUSH
42244: LD_INT 2
42246: PPUSH
42247: CALL_OW 275
42251: PUSH
42252: LD_VAR 0 4
42256: PUSH
42257: LD_INT 2
42259: ARRAY
42260: GREATEREQUAL
42261: AND
42262: IFFALSE 42288
42264: PUSH
42265: LD_VAR 0 3
42269: PPUSH
42270: LD_INT 3
42272: PPUSH
42273: CALL_OW 275
42277: PUSH
42278: LD_VAR 0 4
42282: PUSH
42283: LD_INT 3
42285: ARRAY
42286: GREATEREQUAL
42287: AND
42288: ST_TO_ADDR
// end ;
42289: LD_VAR 0 2
42293: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42294: LD_INT 0
42296: PPUSH
42297: PPUSH
42298: PPUSH
// pom := GetBase ( building ) ;
42299: LD_ADDR_VAR 0 4
42303: PUSH
42304: LD_VAR 0 1
42308: PPUSH
42309: CALL_OW 274
42313: ST_TO_ADDR
// if not pom then
42314: LD_VAR 0 4
42318: NOT
42319: IFFALSE 42323
// exit ;
42321: GO 42428
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42323: LD_ADDR_VAR 0 5
42327: PUSH
42328: LD_VAR 0 2
42332: PPUSH
42333: LD_VAR 0 1
42337: PPUSH
42338: CALL_OW 248
42342: PPUSH
42343: CALL_OW 450
42347: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42348: LD_ADDR_VAR 0 3
42352: PUSH
42353: LD_VAR 0 4
42357: PPUSH
42358: LD_INT 1
42360: PPUSH
42361: CALL_OW 275
42365: PUSH
42366: LD_VAR 0 5
42370: PUSH
42371: LD_INT 1
42373: ARRAY
42374: GREATEREQUAL
42375: IFFALSE 42401
42377: PUSH
42378: LD_VAR 0 4
42382: PPUSH
42383: LD_INT 2
42385: PPUSH
42386: CALL_OW 275
42390: PUSH
42391: LD_VAR 0 5
42395: PUSH
42396: LD_INT 2
42398: ARRAY
42399: GREATEREQUAL
42400: AND
42401: IFFALSE 42427
42403: PUSH
42404: LD_VAR 0 4
42408: PPUSH
42409: LD_INT 3
42411: PPUSH
42412: CALL_OW 275
42416: PUSH
42417: LD_VAR 0 5
42421: PUSH
42422: LD_INT 3
42424: ARRAY
42425: GREATEREQUAL
42426: AND
42427: ST_TO_ADDR
// end ;
42428: LD_VAR 0 3
42432: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42433: LD_INT 0
42435: PPUSH
42436: PPUSH
42437: PPUSH
42438: PPUSH
42439: PPUSH
42440: PPUSH
42441: PPUSH
42442: PPUSH
42443: PPUSH
42444: PPUSH
42445: PPUSH
// result := false ;
42446: LD_ADDR_VAR 0 8
42450: PUSH
42451: LD_INT 0
42453: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42454: LD_VAR 0 5
42458: NOT
42459: IFTRUE 42468
42461: PUSH
42462: LD_VAR 0 1
42466: NOT
42467: OR
42468: IFTRUE 42477
42470: PUSH
42471: LD_VAR 0 2
42475: NOT
42476: OR
42477: IFTRUE 42486
42479: PUSH
42480: LD_VAR 0 3
42484: NOT
42485: OR
42486: IFFALSE 42490
// exit ;
42488: GO 43316
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42490: LD_ADDR_VAR 0 14
42494: PUSH
42495: LD_VAR 0 1
42499: PPUSH
42500: LD_VAR 0 2
42504: PPUSH
42505: LD_VAR 0 3
42509: PPUSH
42510: LD_VAR 0 4
42514: PPUSH
42515: LD_VAR 0 5
42519: PUSH
42520: LD_INT 1
42522: ARRAY
42523: PPUSH
42524: CALL_OW 248
42528: PPUSH
42529: LD_INT 0
42531: PPUSH
42532: CALL 44597 0 6
42536: ST_TO_ADDR
// if not hexes then
42537: LD_VAR 0 14
42541: NOT
42542: IFFALSE 42546
// exit ;
42544: GO 43316
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42546: LD_ADDR_VAR 0 17
42550: PUSH
42551: LD_VAR 0 5
42555: PPUSH
42556: LD_INT 22
42558: PUSH
42559: LD_VAR 0 13
42563: PPUSH
42564: CALL_OW 255
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 2
42575: PUSH
42576: LD_INT 30
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 30
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: LIST
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PPUSH
42605: CALL_OW 72
42609: ST_TO_ADDR
// for i = 1 to hexes do
42610: LD_ADDR_VAR 0 9
42614: PUSH
42615: DOUBLE
42616: LD_INT 1
42618: DEC
42619: ST_TO_ADDR
42620: LD_VAR 0 14
42624: PUSH
42625: FOR_TO
42626: IFFALSE 43314
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42628: LD_ADDR_VAR 0 13
42632: PUSH
42633: LD_VAR 0 14
42637: PUSH
42638: LD_VAR 0 9
42642: ARRAY
42643: PUSH
42644: LD_INT 1
42646: ARRAY
42647: PPUSH
42648: LD_VAR 0 14
42652: PUSH
42653: LD_VAR 0 9
42657: ARRAY
42658: PUSH
42659: LD_INT 2
42661: ARRAY
42662: PPUSH
42663: CALL_OW 428
42667: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42668: LD_VAR 0 14
42672: PUSH
42673: LD_VAR 0 9
42677: ARRAY
42678: PUSH
42679: LD_INT 1
42681: ARRAY
42682: PPUSH
42683: LD_VAR 0 14
42687: PUSH
42688: LD_VAR 0 9
42692: ARRAY
42693: PUSH
42694: LD_INT 2
42696: ARRAY
42697: PPUSH
42698: CALL_OW 351
42702: IFTRUE 42741
42704: PUSH
42705: LD_VAR 0 14
42709: PUSH
42710: LD_VAR 0 9
42714: ARRAY
42715: PUSH
42716: LD_INT 1
42718: ARRAY
42719: PPUSH
42720: LD_VAR 0 14
42724: PUSH
42725: LD_VAR 0 9
42729: ARRAY
42730: PUSH
42731: LD_INT 2
42733: ARRAY
42734: PPUSH
42735: CALL_OW 488
42739: NOT
42740: OR
42741: IFTRUE 42758
42743: PUSH
42744: LD_VAR 0 13
42748: PPUSH
42749: CALL_OW 247
42753: PUSH
42754: LD_INT 3
42756: EQUAL
42757: OR
42758: IFFALSE 42764
// exit ;
42760: POP
42761: POP
42762: GO 43316
// if not tmp then
42764: LD_VAR 0 13
42768: NOT
42769: IFFALSE 42773
// continue ;
42771: GO 42625
// result := true ;
42773: LD_ADDR_VAR 0 8
42777: PUSH
42778: LD_INT 1
42780: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42781: LD_VAR 0 6
42785: IFFALSE 42802
42787: PUSH
42788: LD_VAR 0 13
42792: PPUSH
42793: CALL_OW 247
42797: PUSH
42798: LD_INT 2
42800: EQUAL
42801: AND
42802: IFFALSE 42819
42804: PUSH
42805: LD_VAR 0 13
42809: PPUSH
42810: CALL_OW 263
42814: PUSH
42815: LD_INT 1
42817: EQUAL
42818: AND
42819: IFFALSE 42983
// begin if IsDrivenBy ( tmp ) then
42821: LD_VAR 0 13
42825: PPUSH
42826: CALL_OW 311
42830: IFFALSE 42834
// continue ;
42832: GO 42625
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42834: LD_VAR 0 6
42838: PPUSH
42839: LD_INT 3
42841: PUSH
42842: LD_INT 60
42844: PUSH
42845: EMPTY
42846: LIST
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 3
42854: PUSH
42855: LD_INT 55
42857: PUSH
42858: EMPTY
42859: LIST
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PPUSH
42869: CALL_OW 72
42873: IFFALSE 42981
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42875: LD_ADDR_VAR 0 18
42879: PUSH
42880: LD_VAR 0 6
42884: PPUSH
42885: LD_INT 3
42887: PUSH
42888: LD_INT 60
42890: PUSH
42891: EMPTY
42892: LIST
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 3
42900: PUSH
42901: LD_INT 55
42903: PUSH
42904: EMPTY
42905: LIST
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PPUSH
42915: CALL_OW 72
42919: PUSH
42920: LD_INT 1
42922: ARRAY
42923: ST_TO_ADDR
// if IsInUnit ( driver ) then
42924: LD_VAR 0 18
42928: PPUSH
42929: CALL_OW 310
42933: IFFALSE 42944
// ComExit ( driver ) ;
42935: LD_VAR 0 18
42939: PPUSH
42940: CALL 68587 0 1
// AddComEnterUnit ( driver , tmp ) ;
42944: LD_VAR 0 18
42948: PPUSH
42949: LD_VAR 0 13
42953: PPUSH
42954: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42958: LD_VAR 0 18
42962: PPUSH
42963: LD_VAR 0 7
42967: PPUSH
42968: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42972: LD_VAR 0 18
42976: PPUSH
42977: CALL_OW 181
// end ; continue ;
42981: GO 42625
// end ; if not cleaners or not tmp in cleaners then
42983: LD_VAR 0 6
42987: NOT
42988: IFTRUE 43003
42990: PUSH
42991: LD_VAR 0 13
42995: PUSH
42996: LD_VAR 0 6
43000: IN
43001: NOT
43002: OR
43003: IFFALSE 43312
// begin if dep then
43005: LD_VAR 0 17
43009: IFFALSE 43145
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43011: LD_ADDR_VAR 0 16
43015: PUSH
43016: LD_VAR 0 17
43020: PUSH
43021: LD_INT 1
43023: ARRAY
43024: PPUSH
43025: CALL_OW 250
43029: PPUSH
43030: LD_VAR 0 17
43034: PUSH
43035: LD_INT 1
43037: ARRAY
43038: PPUSH
43039: CALL_OW 254
43043: PPUSH
43044: LD_INT 5
43046: PPUSH
43047: CALL_OW 272
43051: PUSH
43052: LD_VAR 0 17
43056: PUSH
43057: LD_INT 1
43059: ARRAY
43060: PPUSH
43061: CALL_OW 251
43065: PPUSH
43066: LD_VAR 0 17
43070: PUSH
43071: LD_INT 1
43073: ARRAY
43074: PPUSH
43075: CALL_OW 254
43079: PPUSH
43080: LD_INT 5
43082: PPUSH
43083: CALL_OW 273
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43092: LD_VAR 0 16
43096: PUSH
43097: LD_INT 1
43099: ARRAY
43100: PPUSH
43101: LD_VAR 0 16
43105: PUSH
43106: LD_INT 2
43108: ARRAY
43109: PPUSH
43110: CALL_OW 488
43114: IFFALSE 43145
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43116: LD_VAR 0 13
43120: PPUSH
43121: LD_VAR 0 16
43125: PUSH
43126: LD_INT 1
43128: ARRAY
43129: PPUSH
43130: LD_VAR 0 16
43134: PUSH
43135: LD_INT 2
43137: ARRAY
43138: PPUSH
43139: CALL_OW 111
// continue ;
43143: GO 42625
// end ; end ; r := GetDir ( tmp ) ;
43145: LD_ADDR_VAR 0 15
43149: PUSH
43150: LD_VAR 0 13
43154: PPUSH
43155: CALL_OW 254
43159: ST_TO_ADDR
// if r = 5 then
43160: LD_VAR 0 15
43164: PUSH
43165: LD_INT 5
43167: EQUAL
43168: IFFALSE 43178
// r := 0 ;
43170: LD_ADDR_VAR 0 15
43174: PUSH
43175: LD_INT 0
43177: ST_TO_ADDR
// for j = r to 5 do
43178: LD_ADDR_VAR 0 10
43182: PUSH
43183: DOUBLE
43184: LD_VAR 0 15
43188: DEC
43189: ST_TO_ADDR
43190: LD_INT 5
43192: PUSH
43193: FOR_TO
43194: IFFALSE 43310
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43196: LD_ADDR_VAR 0 11
43200: PUSH
43201: LD_VAR 0 13
43205: PPUSH
43206: CALL_OW 250
43210: PPUSH
43211: LD_VAR 0 10
43215: PPUSH
43216: LD_INT 2
43218: PPUSH
43219: CALL_OW 272
43223: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43224: LD_ADDR_VAR 0 12
43228: PUSH
43229: LD_VAR 0 13
43233: PPUSH
43234: CALL_OW 251
43238: PPUSH
43239: LD_VAR 0 10
43243: PPUSH
43244: LD_INT 2
43246: PPUSH
43247: CALL_OW 273
43251: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43252: LD_VAR 0 11
43256: PPUSH
43257: LD_VAR 0 12
43261: PPUSH
43262: CALL_OW 488
43266: IFFALSE 43285
43268: PUSH
43269: LD_VAR 0 11
43273: PPUSH
43274: LD_VAR 0 12
43278: PPUSH
43279: CALL_OW 428
43283: NOT
43284: AND
43285: IFFALSE 43308
// begin ComMoveXY ( tmp , _x , _y ) ;
43287: LD_VAR 0 13
43291: PPUSH
43292: LD_VAR 0 11
43296: PPUSH
43297: LD_VAR 0 12
43301: PPUSH
43302: CALL_OW 111
// break ;
43306: GO 43310
// end ; end ;
43308: GO 43193
43310: POP
43311: POP
// end ; end ;
43312: GO 42625
43314: POP
43315: POP
// end ;
43316: LD_VAR 0 8
43320: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43321: LD_INT 0
43323: PPUSH
// result := true ;
43324: LD_ADDR_VAR 0 3
43328: PUSH
43329: LD_INT 1
43331: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43332: LD_VAR 0 2
43336: PUSH
43337: LD_INT 24
43339: DOUBLE
43340: EQUAL
43341: IFTRUE 43351
43343: LD_INT 33
43345: DOUBLE
43346: EQUAL
43347: IFTRUE 43351
43349: GO 43376
43351: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43352: LD_ADDR_VAR 0 3
43356: PUSH
43357: LD_INT 32
43359: PPUSH
43360: LD_VAR 0 1
43364: PPUSH
43365: CALL_OW 321
43369: PUSH
43370: LD_INT 2
43372: EQUAL
43373: ST_TO_ADDR
43374: GO 43692
43376: LD_INT 20
43378: DOUBLE
43379: EQUAL
43380: IFTRUE 43384
43382: GO 43409
43384: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43385: LD_ADDR_VAR 0 3
43389: PUSH
43390: LD_INT 6
43392: PPUSH
43393: LD_VAR 0 1
43397: PPUSH
43398: CALL_OW 321
43402: PUSH
43403: LD_INT 2
43405: EQUAL
43406: ST_TO_ADDR
43407: GO 43692
43409: LD_INT 22
43411: DOUBLE
43412: EQUAL
43413: IFTRUE 43423
43415: LD_INT 36
43417: DOUBLE
43418: EQUAL
43419: IFTRUE 43423
43421: GO 43448
43423: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43424: LD_ADDR_VAR 0 3
43428: PUSH
43429: LD_INT 15
43431: PPUSH
43432: LD_VAR 0 1
43436: PPUSH
43437: CALL_OW 321
43441: PUSH
43442: LD_INT 2
43444: EQUAL
43445: ST_TO_ADDR
43446: GO 43692
43448: LD_INT 30
43450: DOUBLE
43451: EQUAL
43452: IFTRUE 43456
43454: GO 43481
43456: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43457: LD_ADDR_VAR 0 3
43461: PUSH
43462: LD_INT 20
43464: PPUSH
43465: LD_VAR 0 1
43469: PPUSH
43470: CALL_OW 321
43474: PUSH
43475: LD_INT 2
43477: EQUAL
43478: ST_TO_ADDR
43479: GO 43692
43481: LD_INT 28
43483: DOUBLE
43484: EQUAL
43485: IFTRUE 43495
43487: LD_INT 21
43489: DOUBLE
43490: EQUAL
43491: IFTRUE 43495
43493: GO 43520
43495: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43496: LD_ADDR_VAR 0 3
43500: PUSH
43501: LD_INT 21
43503: PPUSH
43504: LD_VAR 0 1
43508: PPUSH
43509: CALL_OW 321
43513: PUSH
43514: LD_INT 2
43516: EQUAL
43517: ST_TO_ADDR
43518: GO 43692
43520: LD_INT 16
43522: DOUBLE
43523: EQUAL
43524: IFTRUE 43528
43526: GO 43553
43528: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43529: LD_ADDR_VAR 0 3
43533: PUSH
43534: LD_INT 84
43536: PPUSH
43537: LD_VAR 0 1
43541: PPUSH
43542: CALL_OW 321
43546: PUSH
43547: LD_INT 2
43549: EQUAL
43550: ST_TO_ADDR
43551: GO 43692
43553: LD_INT 19
43555: DOUBLE
43556: EQUAL
43557: IFTRUE 43567
43559: LD_INT 23
43561: DOUBLE
43562: EQUAL
43563: IFTRUE 43567
43565: GO 43592
43567: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43568: LD_ADDR_VAR 0 3
43572: PUSH
43573: LD_INT 83
43575: PPUSH
43576: LD_VAR 0 1
43580: PPUSH
43581: CALL_OW 321
43585: PUSH
43586: LD_INT 2
43588: EQUAL
43589: ST_TO_ADDR
43590: GO 43692
43592: LD_INT 17
43594: DOUBLE
43595: EQUAL
43596: IFTRUE 43600
43598: GO 43625
43600: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43601: LD_ADDR_VAR 0 3
43605: PUSH
43606: LD_INT 39
43608: PPUSH
43609: LD_VAR 0 1
43613: PPUSH
43614: CALL_OW 321
43618: PUSH
43619: LD_INT 2
43621: EQUAL
43622: ST_TO_ADDR
43623: GO 43692
43625: LD_INT 18
43627: DOUBLE
43628: EQUAL
43629: IFTRUE 43633
43631: GO 43658
43633: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43634: LD_ADDR_VAR 0 3
43638: PUSH
43639: LD_INT 40
43641: PPUSH
43642: LD_VAR 0 1
43646: PPUSH
43647: CALL_OW 321
43651: PUSH
43652: LD_INT 2
43654: EQUAL
43655: ST_TO_ADDR
43656: GO 43692
43658: LD_INT 27
43660: DOUBLE
43661: EQUAL
43662: IFTRUE 43666
43664: GO 43691
43666: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43667: LD_ADDR_VAR 0 3
43671: PUSH
43672: LD_INT 35
43674: PPUSH
43675: LD_VAR 0 1
43679: PPUSH
43680: CALL_OW 321
43684: PUSH
43685: LD_INT 2
43687: EQUAL
43688: ST_TO_ADDR
43689: GO 43692
43691: POP
// end ;
43692: LD_VAR 0 3
43696: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43697: LD_INT 0
43699: PPUSH
43700: PPUSH
43701: PPUSH
43702: PPUSH
43703: PPUSH
43704: PPUSH
43705: PPUSH
43706: PPUSH
43707: PPUSH
43708: PPUSH
43709: PPUSH
// result := false ;
43710: LD_ADDR_VAR 0 6
43714: PUSH
43715: LD_INT 0
43717: ST_TO_ADDR
// if btype = b_depot then
43718: LD_VAR 0 2
43722: PUSH
43723: LD_INT 0
43725: EQUAL
43726: IFFALSE 43738
// begin result := true ;
43728: LD_ADDR_VAR 0 6
43732: PUSH
43733: LD_INT 1
43735: ST_TO_ADDR
// exit ;
43736: GO 44592
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43738: LD_VAR 0 1
43742: NOT
43743: IFTRUE 43768
43745: PUSH
43746: LD_VAR 0 1
43750: PPUSH
43751: CALL_OW 266
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: IN
43766: NOT
43767: OR
43768: IFTRUE 43777
43770: PUSH
43771: LD_VAR 0 2
43775: NOT
43776: OR
43777: IFTRUE 43813
43779: PUSH
43780: LD_VAR 0 5
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: LD_INT 2
43793: PUSH
43794: LD_INT 3
43796: PUSH
43797: LD_INT 4
43799: PUSH
43800: LD_INT 5
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: IN
43811: NOT
43812: OR
43813: IFTRUE 43832
43815: PUSH
43816: LD_VAR 0 3
43820: PPUSH
43821: LD_VAR 0 4
43825: PPUSH
43826: CALL_OW 488
43830: NOT
43831: OR
43832: IFFALSE 43836
// exit ;
43834: GO 44592
// side := GetSide ( depot ) ;
43836: LD_ADDR_VAR 0 9
43840: PUSH
43841: LD_VAR 0 1
43845: PPUSH
43846: CALL_OW 255
43850: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43851: LD_VAR 0 9
43855: PPUSH
43856: LD_VAR 0 2
43860: PPUSH
43861: CALL 43321 0 2
43865: NOT
43866: IFFALSE 43870
// exit ;
43868: GO 44592
// pom := GetBase ( depot ) ;
43870: LD_ADDR_VAR 0 10
43874: PUSH
43875: LD_VAR 0 1
43879: PPUSH
43880: CALL_OW 274
43884: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43885: LD_ADDR_VAR 0 11
43889: PUSH
43890: LD_VAR 0 2
43894: PPUSH
43895: LD_VAR 0 1
43899: PPUSH
43900: CALL_OW 248
43904: PPUSH
43905: CALL_OW 450
43909: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43910: LD_VAR 0 10
43914: PPUSH
43915: LD_INT 1
43917: PPUSH
43918: CALL_OW 275
43922: PUSH
43923: LD_VAR 0 11
43927: PUSH
43928: LD_INT 1
43930: ARRAY
43931: GREATEREQUAL
43932: IFFALSE 43958
43934: PUSH
43935: LD_VAR 0 10
43939: PPUSH
43940: LD_INT 2
43942: PPUSH
43943: CALL_OW 275
43947: PUSH
43948: LD_VAR 0 11
43952: PUSH
43953: LD_INT 2
43955: ARRAY
43956: GREATEREQUAL
43957: AND
43958: IFFALSE 43984
43960: PUSH
43961: LD_VAR 0 10
43965: PPUSH
43966: LD_INT 3
43968: PPUSH
43969: CALL_OW 275
43973: PUSH
43974: LD_VAR 0 11
43978: PUSH
43979: LD_INT 3
43981: ARRAY
43982: GREATEREQUAL
43983: AND
43984: NOT
43985: IFFALSE 43989
// exit ;
43987: GO 44592
// if GetBType ( depot ) = b_depot then
43989: LD_VAR 0 1
43993: PPUSH
43994: CALL_OW 266
43998: PUSH
43999: LD_INT 0
44001: EQUAL
44002: IFFALSE 44014
// dist := 28 else
44004: LD_ADDR_VAR 0 14
44008: PUSH
44009: LD_INT 28
44011: ST_TO_ADDR
44012: GO 44022
// dist := 36 ;
44014: LD_ADDR_VAR 0 14
44018: PUSH
44019: LD_INT 36
44021: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44022: LD_VAR 0 1
44026: PPUSH
44027: LD_VAR 0 3
44031: PPUSH
44032: LD_VAR 0 4
44036: PPUSH
44037: CALL_OW 297
44041: PUSH
44042: LD_VAR 0 14
44046: GREATER
44047: IFFALSE 44051
// exit ;
44049: GO 44592
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44051: LD_ADDR_VAR 0 12
44055: PUSH
44056: LD_VAR 0 2
44060: PPUSH
44061: LD_VAR 0 3
44065: PPUSH
44066: LD_VAR 0 4
44070: PPUSH
44071: LD_VAR 0 5
44075: PPUSH
44076: LD_VAR 0 1
44080: PPUSH
44081: CALL_OW 248
44085: PPUSH
44086: LD_INT 0
44088: PPUSH
44089: CALL 44597 0 6
44093: ST_TO_ADDR
// if not hexes then
44094: LD_VAR 0 12
44098: NOT
44099: IFFALSE 44103
// exit ;
44101: GO 44592
// hex := GetHexInfo ( x , y ) ;
44103: LD_ADDR_VAR 0 15
44107: PUSH
44108: LD_VAR 0 3
44112: PPUSH
44113: LD_VAR 0 4
44117: PPUSH
44118: CALL_OW 546
44122: ST_TO_ADDR
// if hex [ 1 ] then
44123: LD_VAR 0 15
44127: PUSH
44128: LD_INT 1
44130: ARRAY
44131: IFFALSE 44135
// exit ;
44133: GO 44592
// height := hex [ 2 ] ;
44135: LD_ADDR_VAR 0 13
44139: PUSH
44140: LD_VAR 0 15
44144: PUSH
44145: LD_INT 2
44147: ARRAY
44148: ST_TO_ADDR
// for i = 1 to hexes do
44149: LD_ADDR_VAR 0 7
44153: PUSH
44154: DOUBLE
44155: LD_INT 1
44157: DEC
44158: ST_TO_ADDR
44159: LD_VAR 0 12
44163: PUSH
44164: FOR_TO
44165: IFFALSE 44509
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44167: LD_VAR 0 12
44171: PUSH
44172: LD_VAR 0 7
44176: ARRAY
44177: PUSH
44178: LD_INT 1
44180: ARRAY
44181: PPUSH
44182: LD_VAR 0 12
44186: PUSH
44187: LD_VAR 0 7
44191: ARRAY
44192: PUSH
44193: LD_INT 2
44195: ARRAY
44196: PPUSH
44197: CALL_OW 488
44201: NOT
44202: IFTRUE 44244
44204: PUSH
44205: LD_VAR 0 12
44209: PUSH
44210: LD_VAR 0 7
44214: ARRAY
44215: PUSH
44216: LD_INT 1
44218: ARRAY
44219: PPUSH
44220: LD_VAR 0 12
44224: PUSH
44225: LD_VAR 0 7
44229: ARRAY
44230: PUSH
44231: LD_INT 2
44233: ARRAY
44234: PPUSH
44235: CALL_OW 428
44239: PUSH
44240: LD_INT 0
44242: GREATER
44243: OR
44244: IFTRUE 44282
44246: PUSH
44247: LD_VAR 0 12
44251: PUSH
44252: LD_VAR 0 7
44256: ARRAY
44257: PUSH
44258: LD_INT 1
44260: ARRAY
44261: PPUSH
44262: LD_VAR 0 12
44266: PUSH
44267: LD_VAR 0 7
44271: ARRAY
44272: PUSH
44273: LD_INT 2
44275: ARRAY
44276: PPUSH
44277: CALL_OW 351
44281: OR
44282: IFFALSE 44288
// exit ;
44284: POP
44285: POP
44286: GO 44592
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44288: LD_ADDR_VAR 0 8
44292: PUSH
44293: LD_VAR 0 12
44297: PUSH
44298: LD_VAR 0 7
44302: ARRAY
44303: PUSH
44304: LD_INT 1
44306: ARRAY
44307: PPUSH
44308: LD_VAR 0 12
44312: PUSH
44313: LD_VAR 0 7
44317: ARRAY
44318: PUSH
44319: LD_INT 2
44321: ARRAY
44322: PPUSH
44323: CALL_OW 546
44327: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44328: LD_VAR 0 8
44332: PUSH
44333: LD_INT 1
44335: ARRAY
44336: IFTRUE 44358
44338: PUSH
44339: LD_VAR 0 8
44343: PUSH
44344: LD_INT 2
44346: ARRAY
44347: PUSH
44348: LD_VAR 0 13
44352: PUSH
44353: LD_INT 2
44355: PLUS
44356: GREATER
44357: OR
44358: IFTRUE 44380
44360: PUSH
44361: LD_VAR 0 8
44365: PUSH
44366: LD_INT 2
44368: ARRAY
44369: PUSH
44370: LD_VAR 0 13
44374: PUSH
44375: LD_INT 2
44377: MINUS
44378: LESS
44379: OR
44380: IFTRUE 44448
44382: PUSH
44383: LD_VAR 0 8
44387: PUSH
44388: LD_INT 3
44390: ARRAY
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: LD_INT 8
44397: PUSH
44398: LD_INT 9
44400: PUSH
44401: LD_INT 10
44403: PUSH
44404: LD_INT 11
44406: PUSH
44407: LD_INT 12
44409: PUSH
44410: LD_INT 13
44412: PUSH
44413: LD_INT 16
44415: PUSH
44416: LD_INT 17
44418: PUSH
44419: LD_INT 18
44421: PUSH
44422: LD_INT 19
44424: PUSH
44425: LD_INT 20
44427: PUSH
44428: LD_INT 21
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: IN
44446: NOT
44447: OR
44448: IFTRUE 44461
44450: PUSH
44451: LD_VAR 0 8
44455: PUSH
44456: LD_INT 5
44458: ARRAY
44459: NOT
44460: OR
44461: IFTRUE 44501
44463: PUSH
44464: LD_VAR 0 8
44468: PUSH
44469: LD_INT 6
44471: ARRAY
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: LD_INT 7
44481: PUSH
44482: LD_INT 9
44484: PUSH
44485: LD_INT 10
44487: PUSH
44488: LD_INT 11
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: IN
44499: NOT
44500: OR
44501: IFFALSE 44507
// exit ;
44503: POP
44504: POP
44505: GO 44592
// end ;
44507: GO 44164
44509: POP
44510: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44511: LD_VAR 0 9
44515: PPUSH
44516: LD_VAR 0 3
44520: PPUSH
44521: LD_VAR 0 4
44525: PPUSH
44526: LD_INT 20
44528: PPUSH
44529: CALL 36411 0 4
44533: PUSH
44534: LD_INT 4
44536: ARRAY
44537: IFFALSE 44541
// exit ;
44539: GO 44592
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44541: LD_VAR 0 2
44545: PUSH
44546: LD_INT 29
44548: PUSH
44549: LD_INT 30
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: IN
44556: IFFALSE 44580
44558: PUSH
44559: LD_VAR 0 3
44563: PPUSH
44564: LD_VAR 0 4
44568: PPUSH
44569: LD_VAR 0 9
44573: PPUSH
44574: CALL_OW 440
44578: NOT
44579: AND
44580: IFFALSE 44584
// exit ;
44582: GO 44592
// result := true ;
44584: LD_ADDR_VAR 0 6
44588: PUSH
44589: LD_INT 1
44591: ST_TO_ADDR
// end ;
44592: LD_VAR 0 6
44596: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44597: LD_INT 0
44599: PPUSH
44600: PPUSH
44601: PPUSH
44602: PPUSH
44603: PPUSH
44604: PPUSH
44605: PPUSH
44606: PPUSH
44607: PPUSH
44608: PPUSH
44609: PPUSH
44610: PPUSH
44611: PPUSH
44612: PPUSH
44613: PPUSH
44614: PPUSH
44615: PPUSH
44616: PPUSH
44617: PPUSH
44618: PPUSH
44619: PPUSH
44620: PPUSH
44621: PPUSH
44622: PPUSH
44623: PPUSH
44624: PPUSH
44625: PPUSH
44626: PPUSH
44627: PPUSH
44628: PPUSH
44629: PPUSH
44630: PPUSH
44631: PPUSH
44632: PPUSH
44633: PPUSH
44634: PPUSH
44635: PPUSH
44636: PPUSH
44637: PPUSH
44638: PPUSH
44639: PPUSH
44640: PPUSH
44641: PPUSH
44642: PPUSH
44643: PPUSH
44644: PPUSH
44645: PPUSH
44646: PPUSH
44647: PPUSH
44648: PPUSH
44649: PPUSH
44650: PPUSH
44651: PPUSH
44652: PPUSH
44653: PPUSH
44654: PPUSH
44655: PPUSH
44656: PPUSH
// result = [ ] ;
44657: LD_ADDR_VAR 0 7
44661: PUSH
44662: EMPTY
44663: ST_TO_ADDR
// temp_list = [ ] ;
44664: LD_ADDR_VAR 0 9
44668: PUSH
44669: EMPTY
44670: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44671: LD_VAR 0 4
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: LD_INT 3
44687: PUSH
44688: LD_INT 4
44690: PUSH
44691: LD_INT 5
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: IN
44702: NOT
44703: IFTRUE 44746
44705: PUSH
44706: LD_VAR 0 1
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: IN
44721: IFFALSE 44745
44723: PUSH
44724: LD_VAR 0 5
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: LD_INT 3
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: LIST
44742: IN
44743: NOT
44744: AND
44745: OR
44746: IFFALSE 44750
// exit ;
44748: GO 63149
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44750: LD_VAR 0 1
44754: PUSH
44755: LD_INT 6
44757: PUSH
44758: LD_INT 7
44760: PUSH
44761: LD_INT 8
44763: PUSH
44764: LD_INT 13
44766: PUSH
44767: LD_INT 12
44769: PUSH
44770: LD_INT 15
44772: PUSH
44773: LD_INT 11
44775: PUSH
44776: LD_INT 14
44778: PUSH
44779: LD_INT 10
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: IN
44793: IFFALSE 44803
// btype = b_lab ;
44795: LD_ADDR_VAR 0 1
44799: PUSH
44800: LD_INT 6
44802: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44803: LD_VAR 0 6
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: LIST
44821: IN
44822: NOT
44823: IFTRUE 44891
44825: PUSH
44826: LD_VAR 0 1
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: LD_INT 2
44839: PUSH
44840: LD_INT 3
44842: PUSH
44843: LD_INT 6
44845: PUSH
44846: LD_INT 36
44848: PUSH
44849: LD_INT 4
44851: PUSH
44852: LD_INT 5
44854: PUSH
44855: LD_INT 31
44857: PUSH
44858: LD_INT 32
44860: PUSH
44861: LD_INT 33
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: IN
44877: NOT
44878: IFFALSE 44890
44880: PUSH
44881: LD_VAR 0 6
44885: PUSH
44886: LD_INT 1
44888: EQUAL
44889: AND
44890: OR
44891: IFTRUE 44923
44893: PUSH
44894: LD_VAR 0 1
44898: PUSH
44899: LD_INT 2
44901: PUSH
44902: LD_INT 3
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: IN
44909: NOT
44910: IFFALSE 44922
44912: PUSH
44913: LD_VAR 0 6
44917: PUSH
44918: LD_INT 2
44920: EQUAL
44921: AND
44922: OR
44923: IFFALSE 44933
// mode = 0 ;
44925: LD_ADDR_VAR 0 6
44929: PUSH
44930: LD_INT 0
44932: ST_TO_ADDR
// case mode of 0 :
44933: LD_VAR 0 6
44937: PUSH
44938: LD_INT 0
44940: DOUBLE
44941: EQUAL
44942: IFTRUE 44946
44944: GO 56399
44946: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44947: LD_ADDR_VAR 0 11
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: LD_INT 3
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: LD_INT 3
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45140: LD_ADDR_VAR 0 12
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 2
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 2
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 2
45263: NEG
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: NEG
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 3
45297: NEG
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 3
45308: NEG
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45336: LD_ADDR_VAR 0 13
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 2
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 2
45471: NEG
45472: PUSH
45473: LD_INT 2
45475: NEG
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 2
45483: NEG
45484: PUSH
45485: LD_INT 3
45487: NEG
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 3
45495: NEG
45496: PUSH
45497: LD_INT 2
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 3
45507: NEG
45508: PUSH
45509: LD_INT 3
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45535: LD_ADDR_VAR 0 14
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: LD_INT 2
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 2
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: LD_INT 3
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45731: LD_ADDR_VAR 0 15
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 2
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 3
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 3
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45924: LD_ADDR_VAR 0 16
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: LD_INT 2
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 2
46047: NEG
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 2
46059: NEG
46060: PUSH
46061: LD_INT 2
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 3
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 3
46081: PUSH
46082: LD_INT 3
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: LD_INT 3
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46117: LD_ADDR_VAR 0 17
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 2
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 2
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: LD_INT 2
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: LD_INT 2
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 2
46293: NEG
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 2
46304: NEG
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46347: LD_ADDR_VAR 0 18
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 2
46523: NEG
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46577: LD_ADDR_VAR 0 19
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: LD_INT 2
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: LD_INT 2
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 2
46712: PUSH
46713: LD_INT 2
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: LD_INT 2
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 2
46776: NEG
46777: PUSH
46778: LD_INT 2
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46807: LD_ADDR_VAR 0 20
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 1
46876: NEG
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: LD_INT 2
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 2
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: PUSH
46943: LD_INT 2
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: LD_INT 2
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: LD_INT 2
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: NEG
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47037: LD_ADDR_VAR 0 21
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: LD_INT 2
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: LD_INT 2
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: NEG
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 2
47224: NEG
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: NEG
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47267: LD_ADDR_VAR 0 22
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 2
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: NEG
47467: PUSH
47468: LD_INT 2
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47497: LD_ADDR_VAR 0 23
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: LD_INT 2
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: LD_INT 2
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: LD_INT 2
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: NEG
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 2
47696: NEG
47697: PUSH
47698: LD_INT 2
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 2
47708: NEG
47709: PUSH
47710: LD_INT 3
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: LD_INT 3
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47777: LD_ADDR_VAR 0 24
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 2
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 2
47912: PUSH
47913: LD_INT 2
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: LD_INT 2
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: LD_INT 2
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 2
47964: NEG
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 3
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 3
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48053: LD_ADDR_VAR 0 25
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 2
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 2
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 2
48229: NEG
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: NEG
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 3
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 3
48274: PUSH
48275: LD_INT 2
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: LD_INT 3
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: LD_INT 3
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48327: LD_ADDR_VAR 0 26
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: LD_INT 2
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: LD_INT 3
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: LD_INT 3
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 2
48569: NEG
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48603: LD_ADDR_VAR 0 27
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: LD_INT 2
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 2
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 2
48779: NEG
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: NEG
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: NEG
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: LD_INT 2
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: NEG
48826: PUSH
48827: LD_INT 1
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 3
48836: NEG
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 3
48848: NEG
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48883: LD_ADDR_VAR 0 28
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: LD_INT 2
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: LD_INT 2
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: NEG
49095: PUSH
49096: LD_INT 3
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: LD_INT 3
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 3
49118: NEG
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 3
49130: NEG
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49165: LD_ADDR_VAR 0 29
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 2
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: LD_INT 2
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 2
49355: NEG
49356: PUSH
49357: LD_INT 3
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 3
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 3
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: LD_INT 2
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 3
49409: NEG
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49444: LD_ADDR_VAR 0 30
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: LD_INT 2
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 2
49621: NEG
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: LD_INT 3
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: LD_INT 2
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 3
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: LD_INT 3
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 3
49687: NEG
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49722: LD_ADDR_VAR 0 31
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: LD_INT 2
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 2
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 2
49846: PUSH
49847: LD_INT 2
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: LD_INT 2
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 2
49911: NEG
49912: PUSH
49913: LD_INT 3
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 3
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: LD_INT 3
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 3
49965: NEG
49966: PUSH
49967: LD_INT 2
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50000: LD_ADDR_VAR 0 32
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: LD_INT 2
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: LD_INT 2
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 2
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 2
50177: NEG
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: LD_INT 3
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 2
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 3
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: LD_INT 3
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 2
50232: NEG
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 3
50243: NEG
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50278: LD_ADDR_VAR 0 33
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: LD_INT 3
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 3
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: LD_INT 3
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 3
50522: NEG
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50557: LD_ADDR_VAR 0 34
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: LD_INT 2
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 2
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 2
50736: NEG
50737: PUSH
50738: LD_INT 2
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 3
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: LD_INT 2
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 3
50771: PUSH
50772: LD_INT 2
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: LD_INT 3
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 3
50802: NEG
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50837: LD_ADDR_VAR 0 35
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 2
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: NEG
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50949: LD_ADDR_VAR 0 36
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: LD_INT 2
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51061: LD_ADDR_VAR 0 37
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51173: LD_ADDR_VAR 0 38
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51285: LD_ADDR_VAR 0 39
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: LD_INT 2
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51397: LD_ADDR_VAR 0 40
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51509: LD_ADDR_VAR 0 41
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 2
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 2
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: NEG
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: LD_INT 2
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: NEG
51700: PUSH
51701: LD_INT 3
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 3
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 3
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 3
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 3
51752: PUSH
51753: LD_INT 3
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 2
51762: PUSH
51763: LD_INT 3
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 3
51783: NEG
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 3
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 3
51806: NEG
51807: PUSH
51808: LD_INT 2
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 3
51818: NEG
51819: PUSH
51820: LD_INT 3
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51859: LD_ADDR_VAR 0 42
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: NEG
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: NEG
52038: PUSH
52039: LD_INT 2
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: LD_INT 3
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: LD_INT 3
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: LD_INT 3
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: LD_INT 2
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 3
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 3
52105: PUSH
52106: LD_INT 3
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 2
52115: PUSH
52116: LD_INT 3
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: LD_INT 3
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: LD_INT 3
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 3
52156: NEG
52157: PUSH
52158: LD_INT 2
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 3
52168: NEG
52169: PUSH
52170: LD_INT 3
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52209: LD_ADDR_VAR 0 43
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 3
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 3
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 2
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 3
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 3
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: LD_INT 3
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: LD_INT 3
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 2
52494: NEG
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 3
52505: NEG
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 3
52516: NEG
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52557: LD_ADDR_VAR 0 44
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 1
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: LD_INT 3
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 3
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 3
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 3
52790: PUSH
52791: LD_INT 2
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 3
52800: PUSH
52801: LD_INT 3
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: LD_INT 3
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 3
52831: NEG
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 3
52854: NEG
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 3
52866: NEG
52867: PUSH
52868: LD_INT 3
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52907: LD_ADDR_VAR 0 45
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: LD_INT 2
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: NEG
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: LD_INT 3
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: LD_INT 3
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: LD_INT 3
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 3
53153: PUSH
53154: LD_INT 3
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: LD_INT 3
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: LD_INT 3
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 3
53204: NEG
53205: PUSH
53206: LD_INT 2
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 3
53216: NEG
53217: PUSH
53218: LD_INT 3
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53257: LD_ADDR_VAR 0 46
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: NEG
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: LD_INT 3
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: LD_INT 3
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 3
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 3
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 3
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: LD_INT 3
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 3
53553: NEG
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 3
53564: NEG
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53605: LD_ADDR_VAR 0 47
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: NEG
53733: PUSH
53734: LD_INT 2
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53756: LD_ADDR_VAR 0 48
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53903: LD_ADDR_VAR 0 49
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 2
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54047: LD_ADDR_VAR 0 50
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: LD_INT 2
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: LD_INT 2
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54191: LD_ADDR_VAR 0 51
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54338: LD_ADDR_VAR 0 52
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 2
54442: NEG
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 2
54453: NEG
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: NEG
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54489: LD_ADDR_VAR 0 53
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 2
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 2
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 2
54624: PUSH
54625: LD_INT 2
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: NEG
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: LD_INT 2
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54719: LD_ADDR_VAR 0 54
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: LD_INT 2
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 2
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 2
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 2
54854: PUSH
54855: LD_INT 2
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: LD_INT 2
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 2
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 2
54895: NEG
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54949: LD_ADDR_VAR 0 55
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: NEG
55031: PUSH
55032: LD_INT 2
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 2
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 2
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: LD_INT 2
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 2
55148: NEG
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55179: LD_ADDR_VAR 0 56
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 2
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 2
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 2
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 2
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: LD_INT 2
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: LD_INT 2
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 2
55378: NEG
55379: PUSH
55380: LD_INT 2
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55409: LD_ADDR_VAR 0 57
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: LD_INT 2
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: LD_INT 1
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 2
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 2
55585: NEG
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 2
55596: NEG
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 2
55608: NEG
55609: PUSH
55610: LD_INT 2
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55639: LD_ADDR_VAR 0 58
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: LD_INT 2
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: LD_INT 2
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 2
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 2
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 2
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: LD_INT 2
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: LD_INT 2
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: NEG
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: LD_INT 2
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55869: LD_ADDR_VAR 0 59
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55957: LD_ADDR_VAR 0 60
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56045: LD_ADDR_VAR 0 61
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56133: LD_ADDR_VAR 0 62
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56221: LD_ADDR_VAR 0 63
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: LD_INT 1
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56309: LD_ADDR_VAR 0 64
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: ST_TO_ADDR
// end ; 1 :
56397: GO 62294
56399: LD_INT 1
56401: DOUBLE
56402: EQUAL
56403: IFTRUE 56407
56405: GO 59030
56407: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56408: LD_ADDR_VAR 0 11
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 3
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: LD_INT 3
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: LD_INT 2
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: LIST
56451: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56452: LD_ADDR_VAR 0 12
56456: PUSH
56457: LD_INT 2
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 3
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 3
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: LIST
56492: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56493: LD_ADDR_VAR 0 13
56497: PUSH
56498: LD_INT 3
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 3
56510: PUSH
56511: LD_INT 3
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: LD_INT 3
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: LIST
56532: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56533: LD_ADDR_VAR 0 14
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: LD_INT 3
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 3
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: LD_INT 2
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: LIST
56573: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56574: LD_ADDR_VAR 0 15
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 3
56592: NEG
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: LIST
56617: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56618: LD_ADDR_VAR 0 16
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: LD_INT 3
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 3
56637: NEG
56638: PUSH
56639: LD_INT 2
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 3
56649: NEG
56650: PUSH
56651: LD_INT 3
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: LIST
56663: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56664: LD_ADDR_VAR 0 17
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: LD_INT 3
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: LD_INT 3
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: LD_INT 2
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: LIST
56707: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56708: LD_ADDR_VAR 0 18
56712: PUSH
56713: LD_INT 2
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 3
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 3
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: LIST
56748: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56749: LD_ADDR_VAR 0 19
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 3
56766: PUSH
56767: LD_INT 3
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 2
56776: PUSH
56777: LD_INT 3
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: LIST
56788: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56789: LD_ADDR_VAR 0 20
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: LD_INT 3
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 3
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: LD_INT 2
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: LIST
56829: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56830: LD_ADDR_VAR 0 21
56834: PUSH
56835: LD_INT 2
56837: NEG
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 3
56848: NEG
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 3
56859: NEG
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: LIST
56873: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56874: LD_ADDR_VAR 0 22
56878: PUSH
56879: LD_INT 2
56881: NEG
56882: PUSH
56883: LD_INT 3
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 3
56893: NEG
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 3
56905: NEG
56906: PUSH
56907: LD_INT 3
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: LIST
56919: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56920: LD_ADDR_VAR 0 23
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: LD_INT 3
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 4
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: LD_INT 3
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: LIST
56963: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56964: LD_ADDR_VAR 0 24
56968: PUSH
56969: LD_INT 3
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 3
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 4
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: LIST
57004: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57005: LD_ADDR_VAR 0 25
57009: PUSH
57010: LD_INT 3
57012: PUSH
57013: LD_INT 3
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 4
57022: PUSH
57023: LD_INT 3
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 3
57032: PUSH
57033: LD_INT 4
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: LIST
57044: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57045: LD_ADDR_VAR 0 26
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: LD_INT 3
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: LD_INT 4
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: LD_INT 3
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: LIST
57085: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57086: LD_ADDR_VAR 0 27
57090: PUSH
57091: LD_INT 3
57093: NEG
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 3
57104: NEG
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 4
57115: NEG
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: LIST
57129: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57130: LD_ADDR_VAR 0 28
57134: PUSH
57135: LD_INT 3
57137: NEG
57138: PUSH
57139: LD_INT 3
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 3
57149: NEG
57150: PUSH
57151: LD_INT 4
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 4
57161: NEG
57162: PUSH
57163: LD_INT 3
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: LIST
57175: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57176: LD_ADDR_VAR 0 29
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: LD_INT 3
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: LD_INT 3
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: LD_INT 4
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: LD_INT 4
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 3
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: LD_INT 5
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: LD_INT 5
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: LD_INT 4
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: LD_INT 6
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: LD_INT 6
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: PUSH
57309: LD_INT 5
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57331: LD_ADDR_VAR 0 30
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 3
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 3
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 3
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 4
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 4
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 4
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 5
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 5
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 5
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 6
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 6
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57474: LD_ADDR_VAR 0 31
57478: PUSH
57479: LD_INT 3
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 3
57491: PUSH
57492: LD_INT 3
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: LD_INT 3
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 4
57511: PUSH
57512: LD_INT 3
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 4
57521: PUSH
57522: LD_INT 4
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 3
57531: PUSH
57532: LD_INT 4
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 5
57541: PUSH
57542: LD_INT 4
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 5
57551: PUSH
57552: LD_INT 5
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 4
57561: PUSH
57562: LD_INT 5
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 6
57571: PUSH
57572: LD_INT 5
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 6
57581: PUSH
57582: LD_INT 6
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 5
57591: PUSH
57592: LD_INT 6
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57613: LD_ADDR_VAR 0 32
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: LD_INT 3
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: LD_INT 3
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: LD_INT 2
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: LD_INT 4
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 4
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: LD_INT 3
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: LD_INT 5
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: LD_INT 5
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: LD_INT 4
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: LD_INT 6
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: LD_INT 6
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: LD_INT 5
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57756: LD_ADDR_VAR 0 33
57760: PUSH
57761: LD_INT 2
57763: NEG
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 3
57774: NEG
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 3
57785: NEG
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 3
57797: NEG
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 4
57808: NEG
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 4
57819: NEG
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 4
57831: NEG
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 5
57842: NEG
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 5
57853: NEG
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 5
57865: NEG
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 6
57876: NEG
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 6
57887: NEG
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57911: LD_ADDR_VAR 0 34
57915: PUSH
57916: LD_INT 2
57918: NEG
57919: PUSH
57920: LD_INT 3
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 3
57930: NEG
57931: PUSH
57932: LD_INT 2
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 3
57942: NEG
57943: PUSH
57944: LD_INT 3
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 3
57954: NEG
57955: PUSH
57956: LD_INT 4
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 4
57966: NEG
57967: PUSH
57968: LD_INT 3
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 4
57978: NEG
57979: PUSH
57980: LD_INT 4
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 4
57990: NEG
57991: PUSH
57992: LD_INT 5
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 5
58002: NEG
58003: PUSH
58004: LD_INT 4
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 5
58014: NEG
58015: PUSH
58016: LD_INT 5
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 5
58026: NEG
58027: PUSH
58028: LD_INT 6
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 6
58038: NEG
58039: PUSH
58040: LD_INT 5
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 6
58050: NEG
58051: PUSH
58052: LD_INT 6
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58074: LD_ADDR_VAR 0 41
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: LD_INT 3
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: LIST
58117: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58118: LD_ADDR_VAR 0 42
58122: PUSH
58123: LD_INT 2
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: LIST
58158: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58159: LD_ADDR_VAR 0 43
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 3
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 2
58186: PUSH
58187: LD_INT 3
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: LIST
58198: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58199: LD_ADDR_VAR 0 44
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 2
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: LD_INT 3
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: LD_INT 2
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: LIST
58239: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58240: LD_ADDR_VAR 0 45
58244: PUSH
58245: LD_INT 2
58247: NEG
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 2
58258: NEG
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 3
58269: NEG
58270: PUSH
58271: LD_INT 1
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: LIST
58283: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58284: LD_ADDR_VAR 0 46
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: LD_INT 2
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: LD_INT 3
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 3
58315: NEG
58316: PUSH
58317: LD_INT 2
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: LIST
58329: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58330: LD_ADDR_VAR 0 47
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: LD_INT 3
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: LD_INT 3
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58363: LD_ADDR_VAR 0 48
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 2
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58394: LD_ADDR_VAR 0 49
58398: PUSH
58399: LD_INT 3
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 3
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58423: LD_ADDR_VAR 0 50
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: LD_INT 3
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: LD_INT 3
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58452: LD_ADDR_VAR 0 51
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 2
58470: NEG
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58483: LD_ADDR_VAR 0 52
58487: PUSH
58488: LD_INT 3
58490: NEG
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 3
58502: NEG
58503: PUSH
58504: LD_INT 2
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58516: LD_ADDR_VAR 0 53
58520: PUSH
58521: LD_INT 1
58523: NEG
58524: PUSH
58525: LD_INT 3
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: LD_INT 3
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: LD_INT 2
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: LIST
58559: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58560: LD_ADDR_VAR 0 54
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 3
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: LIST
58600: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58601: LD_ADDR_VAR 0 55
58605: PUSH
58606: LD_INT 3
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 3
58618: PUSH
58619: LD_INT 3
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: PUSH
58629: LD_INT 3
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: LIST
58640: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58641: LD_ADDR_VAR 0 56
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: LD_INT 3
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: LD_INT 3
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: LIST
58681: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58682: LD_ADDR_VAR 0 57
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 3
58700: NEG
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 3
58711: NEG
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: LIST
58725: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58726: LD_ADDR_VAR 0 58
58730: PUSH
58731: LD_INT 2
58733: NEG
58734: PUSH
58735: LD_INT 3
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 3
58745: NEG
58746: PUSH
58747: LD_INT 2
58749: NEG
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 3
58757: NEG
58758: PUSH
58759: LD_INT 3
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: LIST
58771: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58772: LD_ADDR_VAR 0 59
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: LD_INT 2
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: LIST
58815: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58816: LD_ADDR_VAR 0 60
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 2
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: LD_INT 1
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: LIST
58856: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58857: LD_ADDR_VAR 0 61
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 2
58874: PUSH
58875: LD_INT 2
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: LD_INT 2
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: LIST
58896: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58897: LD_ADDR_VAR 0 62
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: LD_INT 2
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: LD_INT 2
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: LIST
58937: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58938: LD_ADDR_VAR 0 63
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 2
58956: NEG
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 2
58967: NEG
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: LIST
58981: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58982: LD_ADDR_VAR 0 64
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: LD_INT 2
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 2
59001: NEG
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 2
59013: NEG
59014: PUSH
59015: LD_INT 2
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: LIST
59027: ST_TO_ADDR
// end ; 2 :
59028: GO 62294
59030: LD_INT 2
59032: DOUBLE
59033: EQUAL
59034: IFTRUE 59038
59036: GO 62293
59038: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59039: LD_ADDR_VAR 0 29
59043: PUSH
59044: LD_INT 4
59046: PUSH
59047: LD_INT 0
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 4
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 5
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 5
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 4
59087: PUSH
59088: LD_INT 1
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 3
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 3
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 3
59118: PUSH
59119: LD_INT 2
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 5
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 3
59139: PUSH
59140: LD_INT 3
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 3
59149: PUSH
59150: LD_INT 2
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 4
59159: PUSH
59160: LD_INT 3
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 4
59169: PUSH
59170: LD_INT 4
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 3
59179: PUSH
59180: LD_INT 4
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 2
59189: PUSH
59190: LD_INT 3
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 2
59199: PUSH
59200: LD_INT 2
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 4
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 2
59219: PUSH
59220: LD_INT 4
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: LD_INT 4
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: LD_INT 3
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 1
59249: PUSH
59250: LD_INT 4
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: LD_INT 5
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: LD_INT 5
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: LD_INT 4
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: NEG
59291: PUSH
59292: LD_INT 3
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 2
59301: PUSH
59302: LD_INT 5
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 2
59311: NEG
59312: PUSH
59313: LD_INT 3
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 3
59322: NEG
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 3
59333: NEG
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: NEG
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 2
59356: NEG
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 3
59367: NEG
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 4
59378: NEG
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 4
59389: NEG
59390: PUSH
59391: LD_INT 1
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 4
59401: NEG
59402: PUSH
59403: LD_INT 2
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: LD_INT 2
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 4
59424: NEG
59425: PUSH
59426: LD_INT 4
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 4
59436: NEG
59437: PUSH
59438: LD_INT 5
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 3
59448: NEG
59449: PUSH
59450: LD_INT 4
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 3
59460: NEG
59461: PUSH
59462: LD_INT 3
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 4
59472: NEG
59473: PUSH
59474: LD_INT 3
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 5
59484: NEG
59485: PUSH
59486: LD_INT 4
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 5
59496: NEG
59497: PUSH
59498: LD_INT 5
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 3
59508: NEG
59509: PUSH
59510: LD_INT 5
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 5
59520: NEG
59521: PUSH
59522: LD_INT 3
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59577: LD_ADDR_VAR 0 30
59581: PUSH
59582: LD_INT 4
59584: PUSH
59585: LD_INT 4
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 4
59594: PUSH
59595: LD_INT 3
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 5
59604: PUSH
59605: LD_INT 4
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 5
59614: PUSH
59615: LD_INT 5
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 4
59624: PUSH
59625: LD_INT 5
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 3
59634: PUSH
59635: LD_INT 4
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 3
59644: PUSH
59645: LD_INT 3
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 5
59654: PUSH
59655: LD_INT 3
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 3
59664: PUSH
59665: LD_INT 5
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: LD_INT 3
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: PUSH
59695: LD_INT 3
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 1
59704: PUSH
59705: LD_INT 4
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: LD_INT 4
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 1
59724: NEG
59725: PUSH
59726: LD_INT 3
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: NEG
59736: PUSH
59737: LD_INT 2
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: LD_INT 4
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 2
59756: NEG
59757: PUSH
59758: LD_INT 2
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 4
59767: NEG
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 4
59778: NEG
59779: PUSH
59780: LD_INT 1
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 3
59790: NEG
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 3
59801: NEG
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 4
59812: NEG
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 5
59823: NEG
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 5
59834: NEG
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 5
59846: NEG
59847: PUSH
59848: LD_INT 2
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 3
59858: NEG
59859: PUSH
59860: LD_INT 2
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 3
59869: NEG
59870: PUSH
59871: LD_INT 3
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 3
59881: NEG
59882: PUSH
59883: LD_INT 4
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 2
59893: NEG
59894: PUSH
59895: LD_INT 3
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 2
59905: NEG
59906: PUSH
59907: LD_INT 2
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 3
59917: NEG
59918: PUSH
59919: LD_INT 2
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 4
59929: NEG
59930: PUSH
59931: LD_INT 3
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 4
59941: NEG
59942: PUSH
59943: LD_INT 4
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 2
59953: NEG
59954: PUSH
59955: LD_INT 4
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 4
59965: NEG
59966: PUSH
59967: LD_INT 2
59969: NEG
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: LD_INT 4
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: LD_INT 5
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: LD_INT 4
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: LD_INT 3
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: LD_INT 3
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: LD_INT 4
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: LD_INT 5
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: LD_INT 3
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: LD_INT 5
60071: NEG
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60124: LD_ADDR_VAR 0 31
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: LD_INT 4
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: LD_INT 3
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: PUSH
60152: LD_INT 4
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: LD_INT 5
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 0
60171: PUSH
60172: LD_INT 5
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: LD_INT 4
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: LD_INT 3
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 2
60203: PUSH
60204: LD_INT 5
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 2
60213: NEG
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 3
60224: NEG
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 3
60235: NEG
60236: PUSH
60237: LD_INT 1
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 2
60247: NEG
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 2
60258: NEG
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 3
60269: NEG
60270: PUSH
60271: LD_INT 1
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 4
60280: NEG
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 4
60291: NEG
60292: PUSH
60293: LD_INT 1
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 4
60303: NEG
60304: PUSH
60305: LD_INT 2
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: LD_INT 2
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 4
60326: NEG
60327: PUSH
60328: LD_INT 4
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 4
60338: NEG
60339: PUSH
60340: LD_INT 5
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 3
60350: NEG
60351: PUSH
60352: LD_INT 4
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 3
60362: NEG
60363: PUSH
60364: LD_INT 3
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 4
60374: NEG
60375: PUSH
60376: LD_INT 3
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 5
60386: NEG
60387: PUSH
60388: LD_INT 4
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 5
60398: NEG
60399: PUSH
60400: LD_INT 5
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 3
60410: NEG
60411: PUSH
60412: LD_INT 5
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 5
60422: NEG
60423: PUSH
60424: LD_INT 3
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: LD_INT 3
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: LD_INT 4
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: LD_INT 3
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: LD_INT 2
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: LD_INT 3
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: LD_INT 4
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 2
60513: PUSH
60514: LD_INT 2
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 2
60524: NEG
60525: PUSH
60526: LD_INT 4
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 4
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 4
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 5
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 5
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 4
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 3
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 3
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 3
60608: PUSH
60609: LD_INT 2
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 5
60619: PUSH
60620: LD_INT 2
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60674: LD_ADDR_VAR 0 32
60678: PUSH
60679: LD_INT 4
60681: NEG
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 4
60692: NEG
60693: PUSH
60694: LD_INT 1
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 3
60704: NEG
60705: PUSH
60706: LD_INT 0
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 3
60715: NEG
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 4
60726: NEG
60727: PUSH
60728: LD_INT 1
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 5
60737: NEG
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 5
60748: NEG
60749: PUSH
60750: LD_INT 1
60752: NEG
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 5
60760: NEG
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 3
60772: NEG
60773: PUSH
60774: LD_INT 2
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 3
60783: NEG
60784: PUSH
60785: LD_INT 3
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 3
60795: NEG
60796: PUSH
60797: LD_INT 4
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 2
60807: NEG
60808: PUSH
60809: LD_INT 3
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 2
60819: NEG
60820: PUSH
60821: LD_INT 2
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 3
60831: NEG
60832: PUSH
60833: LD_INT 2
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 4
60843: NEG
60844: PUSH
60845: LD_INT 3
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 4
60855: NEG
60856: PUSH
60857: LD_INT 4
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 2
60867: NEG
60868: PUSH
60869: LD_INT 4
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 4
60879: NEG
60880: PUSH
60881: LD_INT 2
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 4
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: LD_INT 5
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: LD_INT 4
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: LD_INT 3
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: LD_INT 3
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: LD_INT 4
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: LD_INT 5
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 2
60970: PUSH
60971: LD_INT 3
60973: NEG
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 2
60981: NEG
60982: PUSH
60983: LD_INT 5
60985: NEG
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 3
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 3
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 4
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 4
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 3
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 2
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 2
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 2
61065: PUSH
61066: LD_INT 2
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 4
61076: PUSH
61077: LD_INT 2
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 4
61086: PUSH
61087: LD_INT 4
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 4
61096: PUSH
61097: LD_INT 3
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 5
61106: PUSH
61107: LD_INT 4
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 5
61116: PUSH
61117: LD_INT 5
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 4
61126: PUSH
61127: LD_INT 5
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 3
61136: PUSH
61137: LD_INT 4
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 3
61146: PUSH
61147: LD_INT 3
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 5
61156: PUSH
61157: LD_INT 3
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 3
61166: PUSH
61167: LD_INT 5
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61221: LD_ADDR_VAR 0 33
61225: PUSH
61226: LD_INT 4
61228: NEG
61229: PUSH
61230: LD_INT 4
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 4
61240: NEG
61241: PUSH
61242: LD_INT 5
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 3
61252: NEG
61253: PUSH
61254: LD_INT 4
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 3
61264: NEG
61265: PUSH
61266: LD_INT 3
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 4
61276: NEG
61277: PUSH
61278: LD_INT 3
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 5
61288: NEG
61289: PUSH
61290: LD_INT 4
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 5
61300: NEG
61301: PUSH
61302: LD_INT 5
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 3
61312: NEG
61313: PUSH
61314: LD_INT 5
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 5
61324: NEG
61325: PUSH
61326: LD_INT 3
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 3
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: LD_INT 4
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 1
61358: PUSH
61359: LD_INT 3
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: LD_INT 2
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: LD_INT 2
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: LD_INT 3
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: LD_INT 4
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 2
61415: PUSH
61416: LD_INT 2
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 2
61426: NEG
61427: PUSH
61428: LD_INT 4
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 4
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 4
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 5
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 5
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 4
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 3
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 3
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 3
61510: PUSH
61511: LD_INT 2
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 5
61521: PUSH
61522: LD_INT 2
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 3
61531: PUSH
61532: LD_INT 3
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 3
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 4
61551: PUSH
61552: LD_INT 3
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 4
61561: PUSH
61562: LD_INT 4
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 3
61571: PUSH
61572: LD_INT 4
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 2
61581: PUSH
61582: LD_INT 3
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 2
61591: PUSH
61592: LD_INT 2
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 4
61601: PUSH
61602: LD_INT 2
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 2
61611: PUSH
61612: LD_INT 4
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 0
61621: PUSH
61622: LD_INT 4
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: LD_INT 3
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: LD_INT 4
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: LD_INT 5
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: LD_INT 5
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: LD_INT 4
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: LD_INT 3
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 2
61693: PUSH
61694: LD_INT 5
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 2
61703: NEG
61704: PUSH
61705: LD_INT 3
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61759: LD_ADDR_VAR 0 34
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: LD_INT 4
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: LD_INT 5
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 1
61788: PUSH
61789: LD_INT 4
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: LD_INT 3
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: LD_INT 3
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: LD_INT 4
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: LD_INT 5
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 2
61845: PUSH
61846: LD_INT 3
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 2
61856: NEG
61857: PUSH
61858: LD_INT 5
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 3
61868: PUSH
61869: LD_INT 0
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 3
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 4
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 4
61899: PUSH
61900: LD_INT 1
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 3
61909: PUSH
61910: LD_INT 1
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 2
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: PUSH
61930: LD_INT 1
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 2
61940: PUSH
61941: LD_INT 2
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 4
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 4
61961: PUSH
61962: LD_INT 4
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 4
61971: PUSH
61972: LD_INT 3
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 5
61981: PUSH
61982: LD_INT 4
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 5
61991: PUSH
61992: LD_INT 5
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 4
62001: PUSH
62002: LD_INT 5
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 3
62011: PUSH
62012: LD_INT 4
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 3
62021: PUSH
62022: LD_INT 3
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 5
62031: PUSH
62032: LD_INT 3
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 3
62041: PUSH
62042: LD_INT 5
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: LD_INT 3
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: LD_INT 2
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: LD_INT 3
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: LD_INT 4
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 0
62091: PUSH
62092: LD_INT 4
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: NEG
62102: PUSH
62103: LD_INT 3
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 1
62112: NEG
62113: PUSH
62114: LD_INT 2
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 2
62123: PUSH
62124: LD_INT 4
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 2
62133: NEG
62134: PUSH
62135: LD_INT 2
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 4
62144: NEG
62145: PUSH
62146: LD_INT 0
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 4
62155: NEG
62156: PUSH
62157: LD_INT 1
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 3
62167: NEG
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 3
62178: NEG
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 4
62189: NEG
62190: PUSH
62191: LD_INT 1
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 5
62200: NEG
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 5
62211: NEG
62212: PUSH
62213: LD_INT 1
62215: NEG
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 5
62223: NEG
62224: PUSH
62225: LD_INT 2
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 3
62235: NEG
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: ST_TO_ADDR
// end ; end ;
62291: GO 62294
62293: POP
// case btype of b_depot , b_warehouse :
62294: LD_VAR 0 1
62298: PUSH
62299: LD_INT 0
62301: DOUBLE
62302: EQUAL
62303: IFTRUE 62313
62305: LD_INT 1
62307: DOUBLE
62308: EQUAL
62309: IFTRUE 62313
62311: GO 62514
62313: POP
// case nation of nation_american :
62314: LD_VAR 0 5
62318: PUSH
62319: LD_INT 1
62321: DOUBLE
62322: EQUAL
62323: IFTRUE 62327
62325: GO 62383
62327: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62328: LD_ADDR_VAR 0 9
62332: PUSH
62333: LD_VAR 0 11
62337: PUSH
62338: LD_VAR 0 12
62342: PUSH
62343: LD_VAR 0 13
62347: PUSH
62348: LD_VAR 0 14
62352: PUSH
62353: LD_VAR 0 15
62357: PUSH
62358: LD_VAR 0 16
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: PUSH
62371: LD_VAR 0 4
62375: PUSH
62376: LD_INT 1
62378: PLUS
62379: ARRAY
62380: ST_TO_ADDR
62381: GO 62512
62383: LD_INT 2
62385: DOUBLE
62386: EQUAL
62387: IFTRUE 62391
62389: GO 62447
62391: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62392: LD_ADDR_VAR 0 9
62396: PUSH
62397: LD_VAR 0 17
62401: PUSH
62402: LD_VAR 0 18
62406: PUSH
62407: LD_VAR 0 19
62411: PUSH
62412: LD_VAR 0 20
62416: PUSH
62417: LD_VAR 0 21
62421: PUSH
62422: LD_VAR 0 22
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: PUSH
62435: LD_VAR 0 4
62439: PUSH
62440: LD_INT 1
62442: PLUS
62443: ARRAY
62444: ST_TO_ADDR
62445: GO 62512
62447: LD_INT 3
62449: DOUBLE
62450: EQUAL
62451: IFTRUE 62455
62453: GO 62511
62455: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62456: LD_ADDR_VAR 0 9
62460: PUSH
62461: LD_VAR 0 23
62465: PUSH
62466: LD_VAR 0 24
62470: PUSH
62471: LD_VAR 0 25
62475: PUSH
62476: LD_VAR 0 26
62480: PUSH
62481: LD_VAR 0 27
62485: PUSH
62486: LD_VAR 0 28
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: PUSH
62499: LD_VAR 0 4
62503: PUSH
62504: LD_INT 1
62506: PLUS
62507: ARRAY
62508: ST_TO_ADDR
62509: GO 62512
62511: POP
62512: GO 63067
62514: LD_INT 2
62516: DOUBLE
62517: EQUAL
62518: IFTRUE 62528
62520: LD_INT 3
62522: DOUBLE
62523: EQUAL
62524: IFTRUE 62528
62526: GO 62584
62528: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62529: LD_ADDR_VAR 0 9
62533: PUSH
62534: LD_VAR 0 29
62538: PUSH
62539: LD_VAR 0 30
62543: PUSH
62544: LD_VAR 0 31
62548: PUSH
62549: LD_VAR 0 32
62553: PUSH
62554: LD_VAR 0 33
62558: PUSH
62559: LD_VAR 0 34
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: PUSH
62572: LD_VAR 0 4
62576: PUSH
62577: LD_INT 1
62579: PLUS
62580: ARRAY
62581: ST_TO_ADDR
62582: GO 63067
62584: LD_INT 16
62586: DOUBLE
62587: EQUAL
62588: IFTRUE 62646
62590: LD_INT 17
62592: DOUBLE
62593: EQUAL
62594: IFTRUE 62646
62596: LD_INT 18
62598: DOUBLE
62599: EQUAL
62600: IFTRUE 62646
62602: LD_INT 19
62604: DOUBLE
62605: EQUAL
62606: IFTRUE 62646
62608: LD_INT 22
62610: DOUBLE
62611: EQUAL
62612: IFTRUE 62646
62614: LD_INT 20
62616: DOUBLE
62617: EQUAL
62618: IFTRUE 62646
62620: LD_INT 21
62622: DOUBLE
62623: EQUAL
62624: IFTRUE 62646
62626: LD_INT 23
62628: DOUBLE
62629: EQUAL
62630: IFTRUE 62646
62632: LD_INT 24
62634: DOUBLE
62635: EQUAL
62636: IFTRUE 62646
62638: LD_INT 25
62640: DOUBLE
62641: EQUAL
62642: IFTRUE 62646
62644: GO 62702
62646: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62647: LD_ADDR_VAR 0 9
62651: PUSH
62652: LD_VAR 0 35
62656: PUSH
62657: LD_VAR 0 36
62661: PUSH
62662: LD_VAR 0 37
62666: PUSH
62667: LD_VAR 0 38
62671: PUSH
62672: LD_VAR 0 39
62676: PUSH
62677: LD_VAR 0 40
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: PUSH
62690: LD_VAR 0 4
62694: PUSH
62695: LD_INT 1
62697: PLUS
62698: ARRAY
62699: ST_TO_ADDR
62700: GO 63067
62702: LD_INT 6
62704: DOUBLE
62705: EQUAL
62706: IFTRUE 62758
62708: LD_INT 7
62710: DOUBLE
62711: EQUAL
62712: IFTRUE 62758
62714: LD_INT 8
62716: DOUBLE
62717: EQUAL
62718: IFTRUE 62758
62720: LD_INT 13
62722: DOUBLE
62723: EQUAL
62724: IFTRUE 62758
62726: LD_INT 12
62728: DOUBLE
62729: EQUAL
62730: IFTRUE 62758
62732: LD_INT 15
62734: DOUBLE
62735: EQUAL
62736: IFTRUE 62758
62738: LD_INT 11
62740: DOUBLE
62741: EQUAL
62742: IFTRUE 62758
62744: LD_INT 14
62746: DOUBLE
62747: EQUAL
62748: IFTRUE 62758
62750: LD_INT 10
62752: DOUBLE
62753: EQUAL
62754: IFTRUE 62758
62756: GO 62814
62758: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62759: LD_ADDR_VAR 0 9
62763: PUSH
62764: LD_VAR 0 41
62768: PUSH
62769: LD_VAR 0 42
62773: PUSH
62774: LD_VAR 0 43
62778: PUSH
62779: LD_VAR 0 44
62783: PUSH
62784: LD_VAR 0 45
62788: PUSH
62789: LD_VAR 0 46
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: PUSH
62802: LD_VAR 0 4
62806: PUSH
62807: LD_INT 1
62809: PLUS
62810: ARRAY
62811: ST_TO_ADDR
62812: GO 63067
62814: LD_INT 36
62816: DOUBLE
62817: EQUAL
62818: IFTRUE 62822
62820: GO 62878
62822: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62823: LD_ADDR_VAR 0 9
62827: PUSH
62828: LD_VAR 0 47
62832: PUSH
62833: LD_VAR 0 48
62837: PUSH
62838: LD_VAR 0 49
62842: PUSH
62843: LD_VAR 0 50
62847: PUSH
62848: LD_VAR 0 51
62852: PUSH
62853: LD_VAR 0 52
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: PUSH
62866: LD_VAR 0 4
62870: PUSH
62871: LD_INT 1
62873: PLUS
62874: ARRAY
62875: ST_TO_ADDR
62876: GO 63067
62878: LD_INT 4
62880: DOUBLE
62881: EQUAL
62882: IFTRUE 62904
62884: LD_INT 5
62886: DOUBLE
62887: EQUAL
62888: IFTRUE 62904
62890: LD_INT 34
62892: DOUBLE
62893: EQUAL
62894: IFTRUE 62904
62896: LD_INT 37
62898: DOUBLE
62899: EQUAL
62900: IFTRUE 62904
62902: GO 62960
62904: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62905: LD_ADDR_VAR 0 9
62909: PUSH
62910: LD_VAR 0 53
62914: PUSH
62915: LD_VAR 0 54
62919: PUSH
62920: LD_VAR 0 55
62924: PUSH
62925: LD_VAR 0 56
62929: PUSH
62930: LD_VAR 0 57
62934: PUSH
62935: LD_VAR 0 58
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: PUSH
62948: LD_VAR 0 4
62952: PUSH
62953: LD_INT 1
62955: PLUS
62956: ARRAY
62957: ST_TO_ADDR
62958: GO 63067
62960: LD_INT 31
62962: DOUBLE
62963: EQUAL
62964: IFTRUE 63010
62966: LD_INT 32
62968: DOUBLE
62969: EQUAL
62970: IFTRUE 63010
62972: LD_INT 33
62974: DOUBLE
62975: EQUAL
62976: IFTRUE 63010
62978: LD_INT 27
62980: DOUBLE
62981: EQUAL
62982: IFTRUE 63010
62984: LD_INT 26
62986: DOUBLE
62987: EQUAL
62988: IFTRUE 63010
62990: LD_INT 28
62992: DOUBLE
62993: EQUAL
62994: IFTRUE 63010
62996: LD_INT 29
62998: DOUBLE
62999: EQUAL
63000: IFTRUE 63010
63002: LD_INT 30
63004: DOUBLE
63005: EQUAL
63006: IFTRUE 63010
63008: GO 63066
63010: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63011: LD_ADDR_VAR 0 9
63015: PUSH
63016: LD_VAR 0 59
63020: PUSH
63021: LD_VAR 0 60
63025: PUSH
63026: LD_VAR 0 61
63030: PUSH
63031: LD_VAR 0 62
63035: PUSH
63036: LD_VAR 0 63
63040: PUSH
63041: LD_VAR 0 64
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: PUSH
63054: LD_VAR 0 4
63058: PUSH
63059: LD_INT 1
63061: PLUS
63062: ARRAY
63063: ST_TO_ADDR
63064: GO 63067
63066: POP
// temp_list2 = [ ] ;
63067: LD_ADDR_VAR 0 10
63071: PUSH
63072: EMPTY
63073: ST_TO_ADDR
// for i in temp_list do
63074: LD_ADDR_VAR 0 8
63078: PUSH
63079: LD_VAR 0 9
63083: PUSH
63084: FOR_IN
63085: IFFALSE 63137
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63087: LD_ADDR_VAR 0 10
63091: PUSH
63092: LD_VAR 0 10
63096: PUSH
63097: LD_VAR 0 8
63101: PUSH
63102: LD_INT 1
63104: ARRAY
63105: PUSH
63106: LD_VAR 0 2
63110: PLUS
63111: PUSH
63112: LD_VAR 0 8
63116: PUSH
63117: LD_INT 2
63119: ARRAY
63120: PUSH
63121: LD_VAR 0 3
63125: PLUS
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: EMPTY
63132: LIST
63133: ADD
63134: ST_TO_ADDR
63135: GO 63084
63137: POP
63138: POP
// result = temp_list2 ;
63139: LD_ADDR_VAR 0 7
63143: PUSH
63144: LD_VAR 0 10
63148: ST_TO_ADDR
// end ;
63149: LD_VAR 0 7
63153: RET
// export function EnemyInRange ( unit , dist ) ; begin
63154: LD_INT 0
63156: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63157: LD_ADDR_VAR 0 3
63161: PUSH
63162: LD_VAR 0 1
63166: PPUSH
63167: CALL_OW 255
63171: PPUSH
63172: LD_VAR 0 1
63176: PPUSH
63177: CALL_OW 250
63181: PPUSH
63182: LD_VAR 0 1
63186: PPUSH
63187: CALL_OW 251
63191: PPUSH
63192: LD_VAR 0 2
63196: PPUSH
63197: CALL 36411 0 4
63201: PUSH
63202: LD_INT 4
63204: ARRAY
63205: ST_TO_ADDR
// end ;
63206: LD_VAR 0 3
63210: RET
// export function PlayerSeeMe ( unit ) ; begin
63211: LD_INT 0
63213: PPUSH
// result := See ( your_side , unit ) ;
63214: LD_ADDR_VAR 0 2
63218: PUSH
63219: LD_OWVAR 2
63223: PPUSH
63224: LD_VAR 0 1
63228: PPUSH
63229: CALL_OW 292
63233: ST_TO_ADDR
// end ;
63234: LD_VAR 0 2
63238: RET
// export function ReverseDir ( unit ) ; begin
63239: LD_INT 0
63241: PPUSH
// if not unit then
63242: LD_VAR 0 1
63246: NOT
63247: IFFALSE 63251
// exit ;
63249: GO 63274
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63251: LD_ADDR_VAR 0 2
63255: PUSH
63256: LD_VAR 0 1
63260: PPUSH
63261: CALL_OW 254
63265: PUSH
63266: LD_INT 3
63268: PLUS
63269: PUSH
63270: LD_INT 6
63272: MOD
63273: ST_TO_ADDR
// end ;
63274: LD_VAR 0 2
63278: RET
// export function ReverseArray ( array ) ; var i ; begin
63279: LD_INT 0
63281: PPUSH
63282: PPUSH
// if not array then
63283: LD_VAR 0 1
63287: NOT
63288: IFFALSE 63292
// exit ;
63290: GO 63347
// result := [ ] ;
63292: LD_ADDR_VAR 0 2
63296: PUSH
63297: EMPTY
63298: ST_TO_ADDR
// for i := array downto 1 do
63299: LD_ADDR_VAR 0 3
63303: PUSH
63304: DOUBLE
63305: LD_VAR 0 1
63309: INC
63310: ST_TO_ADDR
63311: LD_INT 1
63313: PUSH
63314: FOR_DOWNTO
63315: IFFALSE 63345
// result := Join ( result , array [ i ] ) ;
63317: LD_ADDR_VAR 0 2
63321: PUSH
63322: LD_VAR 0 2
63326: PPUSH
63327: LD_VAR 0 1
63331: PUSH
63332: LD_VAR 0 3
63336: ARRAY
63337: PPUSH
63338: CALL 68189 0 2
63342: ST_TO_ADDR
63343: GO 63314
63345: POP
63346: POP
// end ;
63347: LD_VAR 0 2
63351: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63352: LD_INT 0
63354: PPUSH
63355: PPUSH
63356: PPUSH
63357: PPUSH
63358: PPUSH
63359: PPUSH
// if not unit or not hexes then
63360: LD_VAR 0 1
63364: NOT
63365: IFTRUE 63374
63367: PUSH
63368: LD_VAR 0 2
63372: NOT
63373: OR
63374: IFFALSE 63378
// exit ;
63376: GO 63501
// dist := 9999 ;
63378: LD_ADDR_VAR 0 5
63382: PUSH
63383: LD_INT 9999
63385: ST_TO_ADDR
// for i = 1 to hexes do
63386: LD_ADDR_VAR 0 4
63390: PUSH
63391: DOUBLE
63392: LD_INT 1
63394: DEC
63395: ST_TO_ADDR
63396: LD_VAR 0 2
63400: PUSH
63401: FOR_TO
63402: IFFALSE 63489
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63404: LD_ADDR_VAR 0 6
63408: PUSH
63409: LD_VAR 0 1
63413: PPUSH
63414: LD_VAR 0 2
63418: PUSH
63419: LD_VAR 0 4
63423: ARRAY
63424: PUSH
63425: LD_INT 1
63427: ARRAY
63428: PPUSH
63429: LD_VAR 0 2
63433: PUSH
63434: LD_VAR 0 4
63438: ARRAY
63439: PUSH
63440: LD_INT 2
63442: ARRAY
63443: PPUSH
63444: CALL_OW 297
63448: ST_TO_ADDR
// if tdist < dist then
63449: LD_VAR 0 6
63453: PUSH
63454: LD_VAR 0 5
63458: LESS
63459: IFFALSE 63487
// begin hex := hexes [ i ] ;
63461: LD_ADDR_VAR 0 8
63465: PUSH
63466: LD_VAR 0 2
63470: PUSH
63471: LD_VAR 0 4
63475: ARRAY
63476: ST_TO_ADDR
// dist := tdist ;
63477: LD_ADDR_VAR 0 5
63481: PUSH
63482: LD_VAR 0 6
63486: ST_TO_ADDR
// end ; end ;
63487: GO 63401
63489: POP
63490: POP
// result := hex ;
63491: LD_ADDR_VAR 0 3
63495: PUSH
63496: LD_VAR 0 8
63500: ST_TO_ADDR
// end ;
63501: LD_VAR 0 3
63505: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63506: LD_INT 0
63508: PPUSH
63509: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63510: LD_VAR 0 1
63514: NOT
63515: IFTRUE 63554
63517: PUSH
63518: LD_VAR 0 1
63522: PUSH
63523: LD_INT 21
63525: PUSH
63526: LD_INT 2
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 23
63535: PUSH
63536: LD_INT 2
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PPUSH
63547: CALL_OW 69
63551: IN
63552: NOT
63553: OR
63554: IFFALSE 63558
// exit ;
63556: GO 63605
// for i = 1 to 3 do
63558: LD_ADDR_VAR 0 3
63562: PUSH
63563: DOUBLE
63564: LD_INT 1
63566: DEC
63567: ST_TO_ADDR
63568: LD_INT 3
63570: PUSH
63571: FOR_TO
63572: IFFALSE 63603
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63574: LD_VAR 0 1
63578: PPUSH
63579: CALL_OW 250
63583: PPUSH
63584: LD_VAR 0 1
63588: PPUSH
63589: CALL_OW 251
63593: PPUSH
63594: LD_INT 1
63596: PPUSH
63597: CALL_OW 453
63601: GO 63571
63603: POP
63604: POP
// end ;
63605: LD_VAR 0 2
63609: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63610: LD_INT 0
63612: PPUSH
63613: PPUSH
63614: PPUSH
63615: PPUSH
63616: PPUSH
63617: PPUSH
// if not unit or not enemy_unit then
63618: LD_VAR 0 1
63622: NOT
63623: IFTRUE 63632
63625: PUSH
63626: LD_VAR 0 2
63630: NOT
63631: OR
63632: IFFALSE 63636
// exit ;
63634: GO 64107
// if GetLives ( i ) < 250 then
63636: LD_VAR 0 4
63640: PPUSH
63641: CALL_OW 256
63645: PUSH
63646: LD_INT 250
63648: LESS
63649: IFFALSE 63662
// begin ComAutodestruct ( i ) ;
63651: LD_VAR 0 4
63655: PPUSH
63656: CALL 63506 0 1
// exit ;
63660: GO 64107
// end ; x := GetX ( enemy_unit ) ;
63662: LD_ADDR_VAR 0 7
63666: PUSH
63667: LD_VAR 0 2
63671: PPUSH
63672: CALL_OW 250
63676: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63677: LD_ADDR_VAR 0 8
63681: PUSH
63682: LD_VAR 0 2
63686: PPUSH
63687: CALL_OW 251
63691: ST_TO_ADDR
// if not x or not y then
63692: LD_VAR 0 7
63696: NOT
63697: IFTRUE 63706
63699: PUSH
63700: LD_VAR 0 8
63704: NOT
63705: OR
63706: IFFALSE 63710
// exit ;
63708: GO 64107
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63710: LD_ADDR_VAR 0 6
63714: PUSH
63715: LD_VAR 0 7
63719: PPUSH
63720: LD_INT 0
63722: PPUSH
63723: LD_INT 4
63725: PPUSH
63726: CALL_OW 272
63730: PUSH
63731: LD_VAR 0 8
63735: PPUSH
63736: LD_INT 0
63738: PPUSH
63739: LD_INT 4
63741: PPUSH
63742: CALL_OW 273
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_VAR 0 7
63755: PPUSH
63756: LD_INT 1
63758: PPUSH
63759: LD_INT 4
63761: PPUSH
63762: CALL_OW 272
63766: PUSH
63767: LD_VAR 0 8
63771: PPUSH
63772: LD_INT 1
63774: PPUSH
63775: LD_INT 4
63777: PPUSH
63778: CALL_OW 273
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_VAR 0 7
63791: PPUSH
63792: LD_INT 2
63794: PPUSH
63795: LD_INT 4
63797: PPUSH
63798: CALL_OW 272
63802: PUSH
63803: LD_VAR 0 8
63807: PPUSH
63808: LD_INT 2
63810: PPUSH
63811: LD_INT 4
63813: PPUSH
63814: CALL_OW 273
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_VAR 0 7
63827: PPUSH
63828: LD_INT 3
63830: PPUSH
63831: LD_INT 4
63833: PPUSH
63834: CALL_OW 272
63838: PUSH
63839: LD_VAR 0 8
63843: PPUSH
63844: LD_INT 3
63846: PPUSH
63847: LD_INT 4
63849: PPUSH
63850: CALL_OW 273
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_VAR 0 7
63863: PPUSH
63864: LD_INT 4
63866: PPUSH
63867: LD_INT 4
63869: PPUSH
63870: CALL_OW 272
63874: PUSH
63875: LD_VAR 0 8
63879: PPUSH
63880: LD_INT 4
63882: PPUSH
63883: LD_INT 4
63885: PPUSH
63886: CALL_OW 273
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_VAR 0 7
63899: PPUSH
63900: LD_INT 5
63902: PPUSH
63903: LD_INT 4
63905: PPUSH
63906: CALL_OW 272
63910: PUSH
63911: LD_VAR 0 8
63915: PPUSH
63916: LD_INT 5
63918: PPUSH
63919: LD_INT 4
63921: PPUSH
63922: CALL_OW 273
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: ST_TO_ADDR
// for i = tmp downto 1 do
63939: LD_ADDR_VAR 0 4
63943: PUSH
63944: DOUBLE
63945: LD_VAR 0 6
63949: INC
63950: ST_TO_ADDR
63951: LD_INT 1
63953: PUSH
63954: FOR_DOWNTO
63955: IFFALSE 64058
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63957: LD_VAR 0 6
63961: PUSH
63962: LD_VAR 0 4
63966: ARRAY
63967: PUSH
63968: LD_INT 1
63970: ARRAY
63971: PPUSH
63972: LD_VAR 0 6
63976: PUSH
63977: LD_VAR 0 4
63981: ARRAY
63982: PUSH
63983: LD_INT 2
63985: ARRAY
63986: PPUSH
63987: CALL_OW 488
63991: NOT
63992: IFTRUE 64034
63994: PUSH
63995: LD_VAR 0 6
63999: PUSH
64000: LD_VAR 0 4
64004: ARRAY
64005: PUSH
64006: LD_INT 1
64008: ARRAY
64009: PPUSH
64010: LD_VAR 0 6
64014: PUSH
64015: LD_VAR 0 4
64019: ARRAY
64020: PUSH
64021: LD_INT 2
64023: ARRAY
64024: PPUSH
64025: CALL_OW 428
64029: PUSH
64030: LD_INT 0
64032: NONEQUAL
64033: OR
64034: IFFALSE 64056
// tmp := Delete ( tmp , i ) ;
64036: LD_ADDR_VAR 0 6
64040: PUSH
64041: LD_VAR 0 6
64045: PPUSH
64046: LD_VAR 0 4
64050: PPUSH
64051: CALL_OW 3
64055: ST_TO_ADDR
64056: GO 63954
64058: POP
64059: POP
// j := GetClosestHex ( unit , tmp ) ;
64060: LD_ADDR_VAR 0 5
64064: PUSH
64065: LD_VAR 0 1
64069: PPUSH
64070: LD_VAR 0 6
64074: PPUSH
64075: CALL 63352 0 2
64079: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64080: LD_VAR 0 1
64084: PPUSH
64085: LD_VAR 0 5
64089: PUSH
64090: LD_INT 1
64092: ARRAY
64093: PPUSH
64094: LD_VAR 0 5
64098: PUSH
64099: LD_INT 2
64101: ARRAY
64102: PPUSH
64103: CALL_OW 111
// end ;
64107: LD_VAR 0 3
64111: RET
// export function PrepareApemanSoldier ( ) ; begin
64112: LD_INT 0
64114: PPUSH
// uc_nation := 0 ;
64115: LD_ADDR_OWVAR 21
64119: PUSH
64120: LD_INT 0
64122: ST_TO_ADDR
// hc_sex := sex_male ;
64123: LD_ADDR_OWVAR 27
64127: PUSH
64128: LD_INT 1
64130: ST_TO_ADDR
// hc_name :=  ;
64131: LD_ADDR_OWVAR 26
64135: PUSH
64136: LD_STRING 
64138: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64139: LD_ADDR_OWVAR 28
64143: PUSH
64144: LD_INT 15
64146: ST_TO_ADDR
// hc_gallery :=  ;
64147: LD_ADDR_OWVAR 33
64151: PUSH
64152: LD_STRING 
64154: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64155: LD_ADDR_OWVAR 31
64159: PUSH
64160: LD_INT 0
64162: PPUSH
64163: LD_INT 3
64165: PPUSH
64166: CALL_OW 12
64170: PUSH
64171: LD_INT 0
64173: PPUSH
64174: LD_INT 3
64176: PPUSH
64177: CALL_OW 12
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64194: LD_ADDR_OWVAR 29
64198: PUSH
64199: LD_INT 12
64201: PUSH
64202: LD_INT 12
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: ST_TO_ADDR
// end ;
64209: LD_VAR 0 1
64213: RET
// export function PrepareApemanEngineer ( ) ; begin
64214: LD_INT 0
64216: PPUSH
// uc_nation := 0 ;
64217: LD_ADDR_OWVAR 21
64221: PUSH
64222: LD_INT 0
64224: ST_TO_ADDR
// hc_sex := sex_male ;
64225: LD_ADDR_OWVAR 27
64229: PUSH
64230: LD_INT 1
64232: ST_TO_ADDR
// hc_name :=  ;
64233: LD_ADDR_OWVAR 26
64237: PUSH
64238: LD_STRING 
64240: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64241: LD_ADDR_OWVAR 28
64245: PUSH
64246: LD_INT 16
64248: ST_TO_ADDR
// hc_gallery :=  ;
64249: LD_ADDR_OWVAR 33
64253: PUSH
64254: LD_STRING 
64256: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64257: LD_ADDR_OWVAR 31
64261: PUSH
64262: LD_INT 0
64264: PPUSH
64265: LD_INT 3
64267: PPUSH
64268: CALL_OW 12
64272: PUSH
64273: LD_INT 0
64275: PPUSH
64276: LD_INT 3
64278: PPUSH
64279: CALL_OW 12
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64296: LD_ADDR_OWVAR 29
64300: PUSH
64301: LD_INT 12
64303: PUSH
64304: LD_INT 12
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: ST_TO_ADDR
// end ;
64311: LD_VAR 0 1
64315: RET
// export function PrepareApeman ( agressivity ) ; begin
64316: LD_INT 0
64318: PPUSH
// uc_side := 0 ;
64319: LD_ADDR_OWVAR 20
64323: PUSH
64324: LD_INT 0
64326: ST_TO_ADDR
// uc_nation := 0 ;
64327: LD_ADDR_OWVAR 21
64331: PUSH
64332: LD_INT 0
64334: ST_TO_ADDR
// hc_sex := sex_male ;
64335: LD_ADDR_OWVAR 27
64339: PUSH
64340: LD_INT 1
64342: ST_TO_ADDR
// hc_class := class_apeman ;
64343: LD_ADDR_OWVAR 28
64347: PUSH
64348: LD_INT 12
64350: ST_TO_ADDR
// hc_gallery :=  ;
64351: LD_ADDR_OWVAR 33
64355: PUSH
64356: LD_STRING 
64358: ST_TO_ADDR
// hc_name :=  ;
64359: LD_ADDR_OWVAR 26
64363: PUSH
64364: LD_STRING 
64366: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64367: LD_ADDR_OWVAR 29
64371: PUSH
64372: LD_INT 12
64374: PUSH
64375: LD_INT 12
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: ST_TO_ADDR
// if agressivity = 0 then
64382: LD_VAR 0 1
64386: PUSH
64387: LD_INT 0
64389: EQUAL
64390: IFFALSE 64402
// hc_agressivity := 0 else
64392: LD_ADDR_OWVAR 35
64396: PUSH
64397: LD_INT 0
64399: ST_TO_ADDR
64400: GO 64423
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64402: LD_ADDR_OWVAR 35
64406: PUSH
64407: LD_VAR 0 1
64411: NEG
64412: PPUSH
64413: LD_VAR 0 1
64417: PPUSH
64418: CALL_OW 12
64422: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64423: LD_ADDR_OWVAR 31
64427: PUSH
64428: LD_INT 0
64430: PPUSH
64431: LD_INT 3
64433: PPUSH
64434: CALL_OW 12
64438: PUSH
64439: LD_INT 0
64441: PPUSH
64442: LD_INT 3
64444: PPUSH
64445: CALL_OW 12
64449: PUSH
64450: LD_INT 0
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: ST_TO_ADDR
// end ;
64462: LD_VAR 0 2
64466: RET
// export function PrepareTiger ( agressivity ) ; begin
64467: LD_INT 0
64469: PPUSH
// uc_side := 0 ;
64470: LD_ADDR_OWVAR 20
64474: PUSH
64475: LD_INT 0
64477: ST_TO_ADDR
// uc_nation := 0 ;
64478: LD_ADDR_OWVAR 21
64482: PUSH
64483: LD_INT 0
64485: ST_TO_ADDR
// InitHc ;
64486: CALL_OW 19
// hc_class := class_tiger ;
64490: LD_ADDR_OWVAR 28
64494: PUSH
64495: LD_INT 14
64497: ST_TO_ADDR
// hc_gallery :=  ;
64498: LD_ADDR_OWVAR 33
64502: PUSH
64503: LD_STRING 
64505: ST_TO_ADDR
// hc_name :=  ;
64506: LD_ADDR_OWVAR 26
64510: PUSH
64511: LD_STRING 
64513: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64514: LD_ADDR_OWVAR 35
64518: PUSH
64519: LD_VAR 0 1
64523: NEG
64524: PPUSH
64525: LD_VAR 0 1
64529: PPUSH
64530: CALL_OW 12
64534: ST_TO_ADDR
// end ;
64535: LD_VAR 0 2
64539: RET
// export function PrepareEnchidna ( ) ; begin
64540: LD_INT 0
64542: PPUSH
// uc_side := 0 ;
64543: LD_ADDR_OWVAR 20
64547: PUSH
64548: LD_INT 0
64550: ST_TO_ADDR
// uc_nation := 0 ;
64551: LD_ADDR_OWVAR 21
64555: PUSH
64556: LD_INT 0
64558: ST_TO_ADDR
// InitHc ;
64559: CALL_OW 19
// hc_class := class_baggie ;
64563: LD_ADDR_OWVAR 28
64567: PUSH
64568: LD_INT 13
64570: ST_TO_ADDR
// hc_gallery :=  ;
64571: LD_ADDR_OWVAR 33
64575: PUSH
64576: LD_STRING 
64578: ST_TO_ADDR
// hc_name :=  ;
64579: LD_ADDR_OWVAR 26
64583: PUSH
64584: LD_STRING 
64586: ST_TO_ADDR
// end ;
64587: LD_VAR 0 1
64591: RET
// export function PrepareFrog ( ) ; begin
64592: LD_INT 0
64594: PPUSH
// uc_side := 0 ;
64595: LD_ADDR_OWVAR 20
64599: PUSH
64600: LD_INT 0
64602: ST_TO_ADDR
// uc_nation := 0 ;
64603: LD_ADDR_OWVAR 21
64607: PUSH
64608: LD_INT 0
64610: ST_TO_ADDR
// InitHc ;
64611: CALL_OW 19
// hc_class := class_frog ;
64615: LD_ADDR_OWVAR 28
64619: PUSH
64620: LD_INT 19
64622: ST_TO_ADDR
// hc_gallery :=  ;
64623: LD_ADDR_OWVAR 33
64627: PUSH
64628: LD_STRING 
64630: ST_TO_ADDR
// hc_name :=  ;
64631: LD_ADDR_OWVAR 26
64635: PUSH
64636: LD_STRING 
64638: ST_TO_ADDR
// end ;
64639: LD_VAR 0 1
64643: RET
// export function PrepareFish ( ) ; begin
64644: LD_INT 0
64646: PPUSH
// uc_side := 0 ;
64647: LD_ADDR_OWVAR 20
64651: PUSH
64652: LD_INT 0
64654: ST_TO_ADDR
// uc_nation := 0 ;
64655: LD_ADDR_OWVAR 21
64659: PUSH
64660: LD_INT 0
64662: ST_TO_ADDR
// InitHc ;
64663: CALL_OW 19
// hc_class := class_fish ;
64667: LD_ADDR_OWVAR 28
64671: PUSH
64672: LD_INT 20
64674: ST_TO_ADDR
// hc_gallery :=  ;
64675: LD_ADDR_OWVAR 33
64679: PUSH
64680: LD_STRING 
64682: ST_TO_ADDR
// hc_name :=  ;
64683: LD_ADDR_OWVAR 26
64687: PUSH
64688: LD_STRING 
64690: ST_TO_ADDR
// end ;
64691: LD_VAR 0 1
64695: RET
// export function PrepareBird ( ) ; begin
64696: LD_INT 0
64698: PPUSH
// uc_side := 0 ;
64699: LD_ADDR_OWVAR 20
64703: PUSH
64704: LD_INT 0
64706: ST_TO_ADDR
// uc_nation := 0 ;
64707: LD_ADDR_OWVAR 21
64711: PUSH
64712: LD_INT 0
64714: ST_TO_ADDR
// InitHc ;
64715: CALL_OW 19
// hc_class := class_phororhacos ;
64719: LD_ADDR_OWVAR 28
64723: PUSH
64724: LD_INT 18
64726: ST_TO_ADDR
// hc_gallery :=  ;
64727: LD_ADDR_OWVAR 33
64731: PUSH
64732: LD_STRING 
64734: ST_TO_ADDR
// hc_name :=  ;
64735: LD_ADDR_OWVAR 26
64739: PUSH
64740: LD_STRING 
64742: ST_TO_ADDR
// end ;
64743: LD_VAR 0 1
64747: RET
// export function PrepareHorse ( ) ; begin
64748: LD_INT 0
64750: PPUSH
// uc_side := 0 ;
64751: LD_ADDR_OWVAR 20
64755: PUSH
64756: LD_INT 0
64758: ST_TO_ADDR
// uc_nation := 0 ;
64759: LD_ADDR_OWVAR 21
64763: PUSH
64764: LD_INT 0
64766: ST_TO_ADDR
// InitHc ;
64767: CALL_OW 19
// hc_class := class_horse ;
64771: LD_ADDR_OWVAR 28
64775: PUSH
64776: LD_INT 21
64778: ST_TO_ADDR
// hc_gallery :=  ;
64779: LD_ADDR_OWVAR 33
64783: PUSH
64784: LD_STRING 
64786: ST_TO_ADDR
// hc_name :=  ;
64787: LD_ADDR_OWVAR 26
64791: PUSH
64792: LD_STRING 
64794: ST_TO_ADDR
// end ;
64795: LD_VAR 0 1
64799: RET
// export function PrepareMastodont ( ) ; begin
64800: LD_INT 0
64802: PPUSH
// uc_side := 0 ;
64803: LD_ADDR_OWVAR 20
64807: PUSH
64808: LD_INT 0
64810: ST_TO_ADDR
// uc_nation := 0 ;
64811: LD_ADDR_OWVAR 21
64815: PUSH
64816: LD_INT 0
64818: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64819: LD_ADDR_OWVAR 37
64823: PUSH
64824: LD_INT 31
64826: ST_TO_ADDR
// vc_control := control_rider ;
64827: LD_ADDR_OWVAR 38
64831: PUSH
64832: LD_INT 4
64834: ST_TO_ADDR
// end ;
64835: LD_VAR 0 1
64839: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64840: LD_INT 0
64842: PPUSH
64843: PPUSH
64844: PPUSH
// uc_side = 0 ;
64845: LD_ADDR_OWVAR 20
64849: PUSH
64850: LD_INT 0
64852: ST_TO_ADDR
// uc_nation = 0 ;
64853: LD_ADDR_OWVAR 21
64857: PUSH
64858: LD_INT 0
64860: ST_TO_ADDR
// InitHc_All ( ) ;
64861: CALL_OW 584
// InitVc ;
64865: CALL_OW 20
// if mastodonts then
64869: LD_VAR 0 6
64873: IFFALSE 64940
// for i = 1 to mastodonts do
64875: LD_ADDR_VAR 0 11
64879: PUSH
64880: DOUBLE
64881: LD_INT 1
64883: DEC
64884: ST_TO_ADDR
64885: LD_VAR 0 6
64889: PUSH
64890: FOR_TO
64891: IFFALSE 64938
// begin vc_chassis := 31 ;
64893: LD_ADDR_OWVAR 37
64897: PUSH
64898: LD_INT 31
64900: ST_TO_ADDR
// vc_control := control_rider ;
64901: LD_ADDR_OWVAR 38
64905: PUSH
64906: LD_INT 4
64908: ST_TO_ADDR
// animal := CreateVehicle ;
64909: LD_ADDR_VAR 0 12
64913: PUSH
64914: CALL_OW 45
64918: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64919: LD_VAR 0 12
64923: PPUSH
64924: LD_VAR 0 8
64928: PPUSH
64929: LD_INT 0
64931: PPUSH
64932: CALL 67082 0 3
// end ;
64936: GO 64890
64938: POP
64939: POP
// if horses then
64940: LD_VAR 0 5
64944: IFFALSE 65011
// for i = 1 to horses do
64946: LD_ADDR_VAR 0 11
64950: PUSH
64951: DOUBLE
64952: LD_INT 1
64954: DEC
64955: ST_TO_ADDR
64956: LD_VAR 0 5
64960: PUSH
64961: FOR_TO
64962: IFFALSE 65009
// begin hc_class := 21 ;
64964: LD_ADDR_OWVAR 28
64968: PUSH
64969: LD_INT 21
64971: ST_TO_ADDR
// hc_gallery :=  ;
64972: LD_ADDR_OWVAR 33
64976: PUSH
64977: LD_STRING 
64979: ST_TO_ADDR
// animal := CreateHuman ;
64980: LD_ADDR_VAR 0 12
64984: PUSH
64985: CALL_OW 44
64989: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64990: LD_VAR 0 12
64994: PPUSH
64995: LD_VAR 0 8
64999: PPUSH
65000: LD_INT 0
65002: PPUSH
65003: CALL 67082 0 3
// end ;
65007: GO 64961
65009: POP
65010: POP
// if birds then
65011: LD_VAR 0 1
65015: IFFALSE 65082
// for i = 1 to birds do
65017: LD_ADDR_VAR 0 11
65021: PUSH
65022: DOUBLE
65023: LD_INT 1
65025: DEC
65026: ST_TO_ADDR
65027: LD_VAR 0 1
65031: PUSH
65032: FOR_TO
65033: IFFALSE 65080
// begin hc_class := 18 ;
65035: LD_ADDR_OWVAR 28
65039: PUSH
65040: LD_INT 18
65042: ST_TO_ADDR
// hc_gallery =  ;
65043: LD_ADDR_OWVAR 33
65047: PUSH
65048: LD_STRING 
65050: ST_TO_ADDR
// animal := CreateHuman ;
65051: LD_ADDR_VAR 0 12
65055: PUSH
65056: CALL_OW 44
65060: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65061: LD_VAR 0 12
65065: PPUSH
65066: LD_VAR 0 8
65070: PPUSH
65071: LD_INT 0
65073: PPUSH
65074: CALL 67082 0 3
// end ;
65078: GO 65032
65080: POP
65081: POP
// if tigers then
65082: LD_VAR 0 2
65086: IFFALSE 65170
// for i = 1 to tigers do
65088: LD_ADDR_VAR 0 11
65092: PUSH
65093: DOUBLE
65094: LD_INT 1
65096: DEC
65097: ST_TO_ADDR
65098: LD_VAR 0 2
65102: PUSH
65103: FOR_TO
65104: IFFALSE 65168
// begin hc_class = class_tiger ;
65106: LD_ADDR_OWVAR 28
65110: PUSH
65111: LD_INT 14
65113: ST_TO_ADDR
// hc_gallery =  ;
65114: LD_ADDR_OWVAR 33
65118: PUSH
65119: LD_STRING 
65121: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65122: LD_ADDR_OWVAR 35
65126: PUSH
65127: LD_INT 7
65129: NEG
65130: PPUSH
65131: LD_INT 7
65133: PPUSH
65134: CALL_OW 12
65138: ST_TO_ADDR
// animal := CreateHuman ;
65139: LD_ADDR_VAR 0 12
65143: PUSH
65144: CALL_OW 44
65148: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65149: LD_VAR 0 12
65153: PPUSH
65154: LD_VAR 0 8
65158: PPUSH
65159: LD_INT 0
65161: PPUSH
65162: CALL 67082 0 3
// end ;
65166: GO 65103
65168: POP
65169: POP
// if apemans then
65170: LD_VAR 0 3
65174: IFFALSE 65297
// for i = 1 to apemans do
65176: LD_ADDR_VAR 0 11
65180: PUSH
65181: DOUBLE
65182: LD_INT 1
65184: DEC
65185: ST_TO_ADDR
65186: LD_VAR 0 3
65190: PUSH
65191: FOR_TO
65192: IFFALSE 65295
// begin hc_class = class_apeman ;
65194: LD_ADDR_OWVAR 28
65198: PUSH
65199: LD_INT 12
65201: ST_TO_ADDR
// hc_gallery =  ;
65202: LD_ADDR_OWVAR 33
65206: PUSH
65207: LD_STRING 
65209: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65210: LD_ADDR_OWVAR 35
65214: PUSH
65215: LD_INT 2
65217: NEG
65218: PPUSH
65219: LD_INT 2
65221: PPUSH
65222: CALL_OW 12
65226: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65227: LD_ADDR_OWVAR 31
65231: PUSH
65232: LD_INT 1
65234: PPUSH
65235: LD_INT 3
65237: PPUSH
65238: CALL_OW 12
65242: PUSH
65243: LD_INT 1
65245: PPUSH
65246: LD_INT 3
65248: PPUSH
65249: CALL_OW 12
65253: PUSH
65254: LD_INT 0
65256: PUSH
65257: LD_INT 0
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: ST_TO_ADDR
// animal := CreateHuman ;
65266: LD_ADDR_VAR 0 12
65270: PUSH
65271: CALL_OW 44
65275: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65276: LD_VAR 0 12
65280: PPUSH
65281: LD_VAR 0 8
65285: PPUSH
65286: LD_INT 0
65288: PPUSH
65289: CALL 67082 0 3
// end ;
65293: GO 65191
65295: POP
65296: POP
// if enchidnas then
65297: LD_VAR 0 4
65301: IFFALSE 65368
// for i = 1 to enchidnas do
65303: LD_ADDR_VAR 0 11
65307: PUSH
65308: DOUBLE
65309: LD_INT 1
65311: DEC
65312: ST_TO_ADDR
65313: LD_VAR 0 4
65317: PUSH
65318: FOR_TO
65319: IFFALSE 65366
// begin hc_class = 13 ;
65321: LD_ADDR_OWVAR 28
65325: PUSH
65326: LD_INT 13
65328: ST_TO_ADDR
// hc_gallery =  ;
65329: LD_ADDR_OWVAR 33
65333: PUSH
65334: LD_STRING 
65336: ST_TO_ADDR
// animal := CreateHuman ;
65337: LD_ADDR_VAR 0 12
65341: PUSH
65342: CALL_OW 44
65346: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65347: LD_VAR 0 12
65351: PPUSH
65352: LD_VAR 0 8
65356: PPUSH
65357: LD_INT 0
65359: PPUSH
65360: CALL 67082 0 3
// end ;
65364: GO 65318
65366: POP
65367: POP
// if fishes then
65368: LD_VAR 0 7
65372: IFFALSE 65439
// for i = 1 to fishes do
65374: LD_ADDR_VAR 0 11
65378: PUSH
65379: DOUBLE
65380: LD_INT 1
65382: DEC
65383: ST_TO_ADDR
65384: LD_VAR 0 7
65388: PUSH
65389: FOR_TO
65390: IFFALSE 65437
// begin hc_class = 20 ;
65392: LD_ADDR_OWVAR 28
65396: PUSH
65397: LD_INT 20
65399: ST_TO_ADDR
// hc_gallery =  ;
65400: LD_ADDR_OWVAR 33
65404: PUSH
65405: LD_STRING 
65407: ST_TO_ADDR
// animal := CreateHuman ;
65408: LD_ADDR_VAR 0 12
65412: PUSH
65413: CALL_OW 44
65417: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65418: LD_VAR 0 12
65422: PPUSH
65423: LD_VAR 0 9
65427: PPUSH
65428: LD_INT 0
65430: PPUSH
65431: CALL 67082 0 3
// end ;
65435: GO 65389
65437: POP
65438: POP
// end ;
65439: LD_VAR 0 10
65443: RET
// export function WantHeal ( sci , unit ) ; begin
65444: LD_INT 0
65446: PPUSH
// if GetTaskList ( sci ) > 0 then
65447: LD_VAR 0 1
65451: PPUSH
65452: CALL_OW 437
65456: PUSH
65457: LD_INT 0
65459: GREATER
65460: IFFALSE 65532
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65462: LD_VAR 0 1
65466: PPUSH
65467: CALL_OW 437
65471: PUSH
65472: LD_INT 1
65474: ARRAY
65475: PUSH
65476: LD_INT 1
65478: ARRAY
65479: PUSH
65480: LD_STRING l
65482: EQUAL
65483: IFFALSE 65510
65485: PUSH
65486: LD_VAR 0 1
65490: PPUSH
65491: CALL_OW 437
65495: PUSH
65496: LD_INT 1
65498: ARRAY
65499: PUSH
65500: LD_INT 4
65502: ARRAY
65503: PUSH
65504: LD_VAR 0 2
65508: EQUAL
65509: AND
65510: IFFALSE 65522
// result := true else
65512: LD_ADDR_VAR 0 3
65516: PUSH
65517: LD_INT 1
65519: ST_TO_ADDR
65520: GO 65530
// result := false ;
65522: LD_ADDR_VAR 0 3
65526: PUSH
65527: LD_INT 0
65529: ST_TO_ADDR
// end else
65530: GO 65540
// result := false ;
65532: LD_ADDR_VAR 0 3
65536: PUSH
65537: LD_INT 0
65539: ST_TO_ADDR
// end ;
65540: LD_VAR 0 3
65544: RET
// export function HealTarget ( sci ) ; begin
65545: LD_INT 0
65547: PPUSH
// if not sci then
65548: LD_VAR 0 1
65552: NOT
65553: IFFALSE 65557
// exit ;
65555: GO 65622
// result := 0 ;
65557: LD_ADDR_VAR 0 2
65561: PUSH
65562: LD_INT 0
65564: ST_TO_ADDR
// if GetTaskList ( sci ) then
65565: LD_VAR 0 1
65569: PPUSH
65570: CALL_OW 437
65574: IFFALSE 65622
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65576: LD_VAR 0 1
65580: PPUSH
65581: CALL_OW 437
65585: PUSH
65586: LD_INT 1
65588: ARRAY
65589: PUSH
65590: LD_INT 1
65592: ARRAY
65593: PUSH
65594: LD_STRING l
65596: EQUAL
65597: IFFALSE 65622
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65599: LD_ADDR_VAR 0 2
65603: PUSH
65604: LD_VAR 0 1
65608: PPUSH
65609: CALL_OW 437
65613: PUSH
65614: LD_INT 1
65616: ARRAY
65617: PUSH
65618: LD_INT 4
65620: ARRAY
65621: ST_TO_ADDR
// end ;
65622: LD_VAR 0 2
65626: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65627: LD_INT 0
65629: PPUSH
65630: PPUSH
65631: PPUSH
65632: PPUSH
// if not base_units then
65633: LD_VAR 0 1
65637: NOT
65638: IFFALSE 65642
// exit ;
65640: GO 65729
// result := false ;
65642: LD_ADDR_VAR 0 2
65646: PUSH
65647: LD_INT 0
65649: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65650: LD_ADDR_VAR 0 5
65654: PUSH
65655: LD_VAR 0 1
65659: PPUSH
65660: LD_INT 21
65662: PUSH
65663: LD_INT 3
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PPUSH
65670: CALL_OW 72
65674: ST_TO_ADDR
// if not tmp then
65675: LD_VAR 0 5
65679: NOT
65680: IFFALSE 65684
// exit ;
65682: GO 65729
// for i in tmp do
65684: LD_ADDR_VAR 0 3
65688: PUSH
65689: LD_VAR 0 5
65693: PUSH
65694: FOR_IN
65695: IFFALSE 65727
// begin result := EnemyInRange ( i , 22 ) ;
65697: LD_ADDR_VAR 0 2
65701: PUSH
65702: LD_VAR 0 3
65706: PPUSH
65707: LD_INT 22
65709: PPUSH
65710: CALL 63154 0 2
65714: ST_TO_ADDR
// if result then
65715: LD_VAR 0 2
65719: IFFALSE 65725
// exit ;
65721: POP
65722: POP
65723: GO 65729
// end ;
65725: GO 65694
65727: POP
65728: POP
// end ;
65729: LD_VAR 0 2
65733: RET
// export function FilterByTag ( units , tag ) ; begin
65734: LD_INT 0
65736: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65737: LD_ADDR_VAR 0 3
65741: PUSH
65742: LD_VAR 0 1
65746: PPUSH
65747: LD_INT 120
65749: PUSH
65750: LD_VAR 0 2
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PPUSH
65759: CALL_OW 72
65763: ST_TO_ADDR
// end ;
65764: LD_VAR 0 3
65768: RET
// export function IsDriver ( un ) ; begin
65769: LD_INT 0
65771: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65772: LD_ADDR_VAR 0 2
65776: PUSH
65777: LD_VAR 0 1
65781: PUSH
65782: LD_INT 55
65784: PUSH
65785: EMPTY
65786: LIST
65787: PPUSH
65788: CALL_OW 69
65792: IN
65793: ST_TO_ADDR
// end ;
65794: LD_VAR 0 2
65798: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65799: LD_INT 0
65801: PPUSH
65802: PPUSH
// list := [ ] ;
65803: LD_ADDR_VAR 0 5
65807: PUSH
65808: EMPTY
65809: ST_TO_ADDR
// case d of 0 :
65810: LD_VAR 0 3
65814: PUSH
65815: LD_INT 0
65817: DOUBLE
65818: EQUAL
65819: IFTRUE 65823
65821: GO 65956
65823: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65824: LD_ADDR_VAR 0 5
65828: PUSH
65829: LD_VAR 0 1
65833: PUSH
65834: LD_INT 4
65836: MINUS
65837: PUSH
65838: LD_VAR 0 2
65842: PUSH
65843: LD_INT 4
65845: MINUS
65846: PUSH
65847: LD_INT 2
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: LIST
65854: PUSH
65855: LD_VAR 0 1
65859: PUSH
65860: LD_INT 3
65862: MINUS
65863: PUSH
65864: LD_VAR 0 2
65868: PUSH
65869: LD_INT 1
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: LIST
65876: PUSH
65877: LD_VAR 0 1
65881: PUSH
65882: LD_INT 4
65884: PLUS
65885: PUSH
65886: LD_VAR 0 2
65890: PUSH
65891: LD_INT 4
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: LIST
65898: PUSH
65899: LD_VAR 0 1
65903: PUSH
65904: LD_INT 3
65906: PLUS
65907: PUSH
65908: LD_VAR 0 2
65912: PUSH
65913: LD_INT 3
65915: PLUS
65916: PUSH
65917: LD_INT 5
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: LIST
65924: PUSH
65925: LD_VAR 0 1
65929: PUSH
65930: LD_VAR 0 2
65934: PUSH
65935: LD_INT 4
65937: PLUS
65938: PUSH
65939: LD_INT 0
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: LIST
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: ST_TO_ADDR
// end ; 1 :
65954: GO 66654
65956: LD_INT 1
65958: DOUBLE
65959: EQUAL
65960: IFTRUE 65964
65962: GO 66097
65964: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65965: LD_ADDR_VAR 0 5
65969: PUSH
65970: LD_VAR 0 1
65974: PUSH
65975: LD_VAR 0 2
65979: PUSH
65980: LD_INT 4
65982: MINUS
65983: PUSH
65984: LD_INT 3
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: LIST
65991: PUSH
65992: LD_VAR 0 1
65996: PUSH
65997: LD_INT 3
65999: MINUS
66000: PUSH
66001: LD_VAR 0 2
66005: PUSH
66006: LD_INT 3
66008: MINUS
66009: PUSH
66010: LD_INT 2
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: LIST
66017: PUSH
66018: LD_VAR 0 1
66022: PUSH
66023: LD_INT 4
66025: MINUS
66026: PUSH
66027: LD_VAR 0 2
66031: PUSH
66032: LD_INT 1
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: LIST
66039: PUSH
66040: LD_VAR 0 1
66044: PUSH
66045: LD_VAR 0 2
66049: PUSH
66050: LD_INT 3
66052: PLUS
66053: PUSH
66054: LD_INT 0
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: LIST
66061: PUSH
66062: LD_VAR 0 1
66066: PUSH
66067: LD_INT 4
66069: PLUS
66070: PUSH
66071: LD_VAR 0 2
66075: PUSH
66076: LD_INT 4
66078: PLUS
66079: PUSH
66080: LD_INT 5
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: LIST
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: ST_TO_ADDR
// end ; 2 :
66095: GO 66654
66097: LD_INT 2
66099: DOUBLE
66100: EQUAL
66101: IFTRUE 66105
66103: GO 66234
66105: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66106: LD_ADDR_VAR 0 5
66110: PUSH
66111: LD_VAR 0 1
66115: PUSH
66116: LD_VAR 0 2
66120: PUSH
66121: LD_INT 3
66123: MINUS
66124: PUSH
66125: LD_INT 3
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: LIST
66132: PUSH
66133: LD_VAR 0 1
66137: PUSH
66138: LD_INT 4
66140: PLUS
66141: PUSH
66142: LD_VAR 0 2
66146: PUSH
66147: LD_INT 4
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: LIST
66154: PUSH
66155: LD_VAR 0 1
66159: PUSH
66160: LD_VAR 0 2
66164: PUSH
66165: LD_INT 4
66167: PLUS
66168: PUSH
66169: LD_INT 0
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: LIST
66176: PUSH
66177: LD_VAR 0 1
66181: PUSH
66182: LD_INT 3
66184: MINUS
66185: PUSH
66186: LD_VAR 0 2
66190: PUSH
66191: LD_INT 1
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: LIST
66198: PUSH
66199: LD_VAR 0 1
66203: PUSH
66204: LD_INT 4
66206: MINUS
66207: PUSH
66208: LD_VAR 0 2
66212: PUSH
66213: LD_INT 4
66215: MINUS
66216: PUSH
66217: LD_INT 2
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: LIST
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: ST_TO_ADDR
// end ; 3 :
66232: GO 66654
66234: LD_INT 3
66236: DOUBLE
66237: EQUAL
66238: IFTRUE 66242
66240: GO 66375
66242: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66243: LD_ADDR_VAR 0 5
66247: PUSH
66248: LD_VAR 0 1
66252: PUSH
66253: LD_INT 3
66255: PLUS
66256: PUSH
66257: LD_VAR 0 2
66261: PUSH
66262: LD_INT 4
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: LIST
66269: PUSH
66270: LD_VAR 0 1
66274: PUSH
66275: LD_INT 4
66277: PLUS
66278: PUSH
66279: LD_VAR 0 2
66283: PUSH
66284: LD_INT 4
66286: PLUS
66287: PUSH
66288: LD_INT 5
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: LIST
66295: PUSH
66296: LD_VAR 0 1
66300: PUSH
66301: LD_INT 4
66303: MINUS
66304: PUSH
66305: LD_VAR 0 2
66309: PUSH
66310: LD_INT 1
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: LIST
66317: PUSH
66318: LD_VAR 0 1
66322: PUSH
66323: LD_VAR 0 2
66327: PUSH
66328: LD_INT 4
66330: MINUS
66331: PUSH
66332: LD_INT 3
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: LIST
66339: PUSH
66340: LD_VAR 0 1
66344: PUSH
66345: LD_INT 3
66347: MINUS
66348: PUSH
66349: LD_VAR 0 2
66353: PUSH
66354: LD_INT 3
66356: MINUS
66357: PUSH
66358: LD_INT 2
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: LIST
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: ST_TO_ADDR
// end ; 4 :
66373: GO 66654
66375: LD_INT 4
66377: DOUBLE
66378: EQUAL
66379: IFTRUE 66383
66381: GO 66516
66383: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66384: LD_ADDR_VAR 0 5
66388: PUSH
66389: LD_VAR 0 1
66393: PUSH
66394: LD_VAR 0 2
66398: PUSH
66399: LD_INT 4
66401: PLUS
66402: PUSH
66403: LD_INT 0
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: LIST
66410: PUSH
66411: LD_VAR 0 1
66415: PUSH
66416: LD_INT 3
66418: PLUS
66419: PUSH
66420: LD_VAR 0 2
66424: PUSH
66425: LD_INT 3
66427: PLUS
66428: PUSH
66429: LD_INT 5
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: LIST
66436: PUSH
66437: LD_VAR 0 1
66441: PUSH
66442: LD_INT 4
66444: PLUS
66445: PUSH
66446: LD_VAR 0 2
66450: PUSH
66451: LD_INT 4
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: LIST
66458: PUSH
66459: LD_VAR 0 1
66463: PUSH
66464: LD_VAR 0 2
66468: PUSH
66469: LD_INT 3
66471: MINUS
66472: PUSH
66473: LD_INT 3
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: LIST
66480: PUSH
66481: LD_VAR 0 1
66485: PUSH
66486: LD_INT 4
66488: MINUS
66489: PUSH
66490: LD_VAR 0 2
66494: PUSH
66495: LD_INT 4
66497: MINUS
66498: PUSH
66499: LD_INT 2
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: LIST
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: ST_TO_ADDR
// end ; 5 :
66514: GO 66654
66516: LD_INT 5
66518: DOUBLE
66519: EQUAL
66520: IFTRUE 66524
66522: GO 66653
66524: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66525: LD_ADDR_VAR 0 5
66529: PUSH
66530: LD_VAR 0 1
66534: PUSH
66535: LD_INT 4
66537: MINUS
66538: PUSH
66539: LD_VAR 0 2
66543: PUSH
66544: LD_INT 1
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: LIST
66551: PUSH
66552: LD_VAR 0 1
66556: PUSH
66557: LD_VAR 0 2
66561: PUSH
66562: LD_INT 4
66564: MINUS
66565: PUSH
66566: LD_INT 3
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: LIST
66573: PUSH
66574: LD_VAR 0 1
66578: PUSH
66579: LD_INT 4
66581: PLUS
66582: PUSH
66583: LD_VAR 0 2
66587: PUSH
66588: LD_INT 4
66590: PLUS
66591: PUSH
66592: LD_INT 5
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: LIST
66599: PUSH
66600: LD_VAR 0 1
66604: PUSH
66605: LD_INT 3
66607: PLUS
66608: PUSH
66609: LD_VAR 0 2
66613: PUSH
66614: LD_INT 4
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: LIST
66621: PUSH
66622: LD_VAR 0 1
66626: PUSH
66627: LD_VAR 0 2
66631: PUSH
66632: LD_INT 3
66634: PLUS
66635: PUSH
66636: LD_INT 0
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: LIST
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: ST_TO_ADDR
// end ; end ;
66651: GO 66654
66653: POP
// result := list ;
66654: LD_ADDR_VAR 0 4
66658: PUSH
66659: LD_VAR 0 5
66663: ST_TO_ADDR
// end ;
66664: LD_VAR 0 4
66668: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66669: LD_INT 0
66671: PPUSH
66672: PPUSH
66673: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66674: LD_VAR 0 1
66678: NOT
66679: IFTRUE 66707
66681: PUSH
66682: LD_VAR 0 2
66686: PUSH
66687: LD_INT 1
66689: PUSH
66690: LD_INT 2
66692: PUSH
66693: LD_INT 3
66695: PUSH
66696: LD_INT 4
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: IN
66705: NOT
66706: OR
66707: IFFALSE 66711
// exit ;
66709: GO 66794
// tmp := [ ] ;
66711: LD_ADDR_VAR 0 5
66715: PUSH
66716: EMPTY
66717: ST_TO_ADDR
// for i in units do
66718: LD_ADDR_VAR 0 4
66722: PUSH
66723: LD_VAR 0 1
66727: PUSH
66728: FOR_IN
66729: IFFALSE 66763
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66731: LD_ADDR_VAR 0 5
66735: PUSH
66736: LD_VAR 0 5
66740: PPUSH
66741: LD_VAR 0 4
66745: PPUSH
66746: LD_VAR 0 2
66750: PPUSH
66751: CALL_OW 259
66755: PPUSH
66756: CALL 68189 0 2
66760: ST_TO_ADDR
66761: GO 66728
66763: POP
66764: POP
// if not tmp then
66765: LD_VAR 0 5
66769: NOT
66770: IFFALSE 66774
// exit ;
66772: GO 66794
// result := SortListByListDesc ( units , tmp ) ;
66774: LD_ADDR_VAR 0 3
66778: PUSH
66779: LD_VAR 0 1
66783: PPUSH
66784: LD_VAR 0 5
66788: PPUSH
66789: CALL_OW 77
66793: ST_TO_ADDR
// end ;
66794: LD_VAR 0 3
66798: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66799: LD_INT 0
66801: PPUSH
66802: PPUSH
66803: PPUSH
// result := false ;
66804: LD_ADDR_VAR 0 3
66808: PUSH
66809: LD_INT 0
66811: ST_TO_ADDR
// if not building then
66812: LD_VAR 0 2
66816: NOT
66817: IFFALSE 66821
// exit ;
66819: GO 66965
// x := GetX ( building ) ;
66821: LD_ADDR_VAR 0 4
66825: PUSH
66826: LD_VAR 0 2
66830: PPUSH
66831: CALL_OW 250
66835: ST_TO_ADDR
// y := GetY ( building ) ;
66836: LD_ADDR_VAR 0 5
66840: PUSH
66841: LD_VAR 0 2
66845: PPUSH
66846: CALL_OW 251
66850: ST_TO_ADDR
// if not x or not y then
66851: LD_VAR 0 4
66855: NOT
66856: IFTRUE 66865
66858: PUSH
66859: LD_VAR 0 5
66863: NOT
66864: OR
66865: IFFALSE 66869
// exit ;
66867: GO 66965
// if GetTaskList ( unit ) then
66869: LD_VAR 0 1
66873: PPUSH
66874: CALL_OW 437
66878: IFFALSE 66965
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66880: LD_STRING e
66882: PUSH
66883: LD_VAR 0 1
66887: PPUSH
66888: CALL_OW 437
66892: PUSH
66893: LD_INT 1
66895: ARRAY
66896: PUSH
66897: LD_INT 1
66899: ARRAY
66900: EQUAL
66901: IFFALSE 66928
66903: PUSH
66904: LD_VAR 0 4
66908: PUSH
66909: LD_VAR 0 1
66913: PPUSH
66914: CALL_OW 437
66918: PUSH
66919: LD_INT 1
66921: ARRAY
66922: PUSH
66923: LD_INT 2
66925: ARRAY
66926: EQUAL
66927: AND
66928: IFFALSE 66955
66930: PUSH
66931: LD_VAR 0 5
66935: PUSH
66936: LD_VAR 0 1
66940: PPUSH
66941: CALL_OW 437
66945: PUSH
66946: LD_INT 1
66948: ARRAY
66949: PUSH
66950: LD_INT 3
66952: ARRAY
66953: EQUAL
66954: AND
66955: IFFALSE 66965
// result := true end ;
66957: LD_ADDR_VAR 0 3
66961: PUSH
66962: LD_INT 1
66964: ST_TO_ADDR
// end ;
66965: LD_VAR 0 3
66969: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66970: LD_INT 0
66972: PPUSH
// result := false ;
66973: LD_ADDR_VAR 0 4
66977: PUSH
66978: LD_INT 0
66980: ST_TO_ADDR
// if GetTaskList ( unit ) then
66981: LD_VAR 0 1
66985: PPUSH
66986: CALL_OW 437
66990: IFFALSE 67077
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66992: LD_STRING M
66994: PUSH
66995: LD_VAR 0 1
66999: PPUSH
67000: CALL_OW 437
67004: PUSH
67005: LD_INT 1
67007: ARRAY
67008: PUSH
67009: LD_INT 1
67011: ARRAY
67012: EQUAL
67013: IFFALSE 67040
67015: PUSH
67016: LD_VAR 0 2
67020: PUSH
67021: LD_VAR 0 1
67025: PPUSH
67026: CALL_OW 437
67030: PUSH
67031: LD_INT 1
67033: ARRAY
67034: PUSH
67035: LD_INT 2
67037: ARRAY
67038: EQUAL
67039: AND
67040: IFFALSE 67067
67042: PUSH
67043: LD_VAR 0 3
67047: PUSH
67048: LD_VAR 0 1
67052: PPUSH
67053: CALL_OW 437
67057: PUSH
67058: LD_INT 1
67060: ARRAY
67061: PUSH
67062: LD_INT 3
67064: ARRAY
67065: EQUAL
67066: AND
67067: IFFALSE 67077
// result := true ;
67069: LD_ADDR_VAR 0 4
67073: PUSH
67074: LD_INT 1
67076: ST_TO_ADDR
// end ; end ;
67077: LD_VAR 0 4
67081: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67082: LD_INT 0
67084: PPUSH
67085: PPUSH
67086: PPUSH
67087: PPUSH
// if not unit or not area then
67088: LD_VAR 0 1
67092: NOT
67093: IFTRUE 67102
67095: PUSH
67096: LD_VAR 0 2
67100: NOT
67101: OR
67102: IFFALSE 67106
// exit ;
67104: GO 67282
// tmp := AreaToList ( area , i ) ;
67106: LD_ADDR_VAR 0 6
67110: PUSH
67111: LD_VAR 0 2
67115: PPUSH
67116: LD_VAR 0 5
67120: PPUSH
67121: CALL_OW 517
67125: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67126: LD_ADDR_VAR 0 5
67130: PUSH
67131: DOUBLE
67132: LD_INT 1
67134: DEC
67135: ST_TO_ADDR
67136: LD_VAR 0 6
67140: PUSH
67141: LD_INT 1
67143: ARRAY
67144: PUSH
67145: FOR_TO
67146: IFFALSE 67280
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67148: LD_ADDR_VAR 0 7
67152: PUSH
67153: LD_VAR 0 6
67157: PUSH
67158: LD_INT 1
67160: ARRAY
67161: PUSH
67162: LD_VAR 0 5
67166: ARRAY
67167: PUSH
67168: LD_VAR 0 6
67172: PUSH
67173: LD_INT 2
67175: ARRAY
67176: PUSH
67177: LD_VAR 0 5
67181: ARRAY
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67187: LD_INT 92
67189: PUSH
67190: LD_VAR 0 7
67194: PUSH
67195: LD_INT 1
67197: ARRAY
67198: PUSH
67199: LD_VAR 0 7
67203: PUSH
67204: LD_INT 2
67206: ARRAY
67207: PUSH
67208: LD_INT 2
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: PPUSH
67217: CALL_OW 69
67221: PUSH
67222: LD_INT 0
67224: EQUAL
67225: IFFALSE 67278
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67227: LD_VAR 0 1
67231: PPUSH
67232: LD_VAR 0 7
67236: PUSH
67237: LD_INT 1
67239: ARRAY
67240: PPUSH
67241: LD_VAR 0 7
67245: PUSH
67246: LD_INT 2
67248: ARRAY
67249: PPUSH
67250: LD_VAR 0 3
67254: PPUSH
67255: CALL_OW 48
// result := IsPlaced ( unit ) ;
67259: LD_ADDR_VAR 0 4
67263: PUSH
67264: LD_VAR 0 1
67268: PPUSH
67269: CALL_OW 305
67273: ST_TO_ADDR
// exit ;
67274: POP
67275: POP
67276: GO 67282
// end ; end ;
67278: GO 67145
67280: POP
67281: POP
// end ;
67282: LD_VAR 0 4
67286: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67287: LD_INT 0
67289: PPUSH
67290: PPUSH
67291: PPUSH
// if not side or side > 8 then
67292: LD_VAR 0 1
67296: NOT
67297: IFTRUE 67309
67299: PUSH
67300: LD_VAR 0 1
67304: PUSH
67305: LD_INT 8
67307: GREATER
67308: OR
67309: IFFALSE 67313
// exit ;
67311: GO 67500
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67313: LD_ADDR_VAR 0 4
67317: PUSH
67318: LD_INT 22
67320: PUSH
67321: LD_VAR 0 1
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 21
67332: PUSH
67333: LD_INT 3
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PPUSH
67344: CALL_OW 69
67348: ST_TO_ADDR
// if not tmp then
67349: LD_VAR 0 4
67353: NOT
67354: IFFALSE 67358
// exit ;
67356: GO 67500
// enable_addtolog := true ;
67358: LD_ADDR_OWVAR 81
67362: PUSH
67363: LD_INT 1
67365: ST_TO_ADDR
// AddToLog ( [ ) ;
67366: LD_STRING [
67368: PPUSH
67369: CALL_OW 561
// for i in tmp do
67373: LD_ADDR_VAR 0 3
67377: PUSH
67378: LD_VAR 0 4
67382: PUSH
67383: FOR_IN
67384: IFFALSE 67491
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67386: LD_STRING [
67388: PUSH
67389: LD_VAR 0 3
67393: PPUSH
67394: CALL_OW 266
67398: STR
67399: PUSH
67400: LD_STRING , 
67402: STR
67403: PUSH
67404: LD_VAR 0 3
67408: PPUSH
67409: CALL_OW 250
67413: STR
67414: PUSH
67415: LD_STRING , 
67417: STR
67418: PUSH
67419: LD_VAR 0 3
67423: PPUSH
67424: CALL_OW 251
67428: STR
67429: PUSH
67430: LD_STRING , 
67432: STR
67433: PUSH
67434: LD_VAR 0 3
67438: PPUSH
67439: CALL_OW 254
67443: STR
67444: PUSH
67445: LD_STRING , 
67447: STR
67448: PUSH
67449: LD_VAR 0 3
67453: PPUSH
67454: LD_INT 1
67456: PPUSH
67457: CALL_OW 268
67461: STR
67462: PUSH
67463: LD_STRING , 
67465: STR
67466: PUSH
67467: LD_VAR 0 3
67471: PPUSH
67472: LD_INT 2
67474: PPUSH
67475: CALL_OW 268
67479: STR
67480: PUSH
67481: LD_STRING ],
67483: STR
67484: PPUSH
67485: CALL_OW 561
// end ;
67489: GO 67383
67491: POP
67492: POP
// AddToLog ( ]; ) ;
67493: LD_STRING ];
67495: PPUSH
67496: CALL_OW 561
// end ;
67500: LD_VAR 0 2
67504: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67505: LD_INT 0
67507: PPUSH
67508: PPUSH
67509: PPUSH
67510: PPUSH
67511: PPUSH
// if not area or not rate or not max then
67512: LD_VAR 0 1
67516: NOT
67517: IFTRUE 67526
67519: PUSH
67520: LD_VAR 0 2
67524: NOT
67525: OR
67526: IFTRUE 67535
67528: PUSH
67529: LD_VAR 0 4
67533: NOT
67534: OR
67535: IFFALSE 67539
// exit ;
67537: GO 67728
// while 1 do
67539: LD_INT 1
67541: IFFALSE 67728
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67543: LD_ADDR_VAR 0 9
67547: PUSH
67548: LD_VAR 0 1
67552: PPUSH
67553: LD_INT 1
67555: PPUSH
67556: CALL_OW 287
67560: PUSH
67561: LD_INT 10
67563: MUL
67564: ST_TO_ADDR
// r := rate / 10 ;
67565: LD_ADDR_VAR 0 7
67569: PUSH
67570: LD_VAR 0 2
67574: PUSH
67575: LD_INT 10
67577: DIVREAL
67578: ST_TO_ADDR
// time := 1 1$00 ;
67579: LD_ADDR_VAR 0 8
67583: PUSH
67584: LD_INT 2100
67586: ST_TO_ADDR
// if amount < min then
67587: LD_VAR 0 9
67591: PUSH
67592: LD_VAR 0 3
67596: LESS
67597: IFFALSE 67615
// r := r * 2 else
67599: LD_ADDR_VAR 0 7
67603: PUSH
67604: LD_VAR 0 7
67608: PUSH
67609: LD_INT 2
67611: MUL
67612: ST_TO_ADDR
67613: GO 67641
// if amount > max then
67615: LD_VAR 0 9
67619: PUSH
67620: LD_VAR 0 4
67624: GREATER
67625: IFFALSE 67641
// r := r / 2 ;
67627: LD_ADDR_VAR 0 7
67631: PUSH
67632: LD_VAR 0 7
67636: PUSH
67637: LD_INT 2
67639: DIVREAL
67640: ST_TO_ADDR
// time := time / r ;
67641: LD_ADDR_VAR 0 8
67645: PUSH
67646: LD_VAR 0 8
67650: PUSH
67651: LD_VAR 0 7
67655: DIVREAL
67656: ST_TO_ADDR
// if time < 0 then
67657: LD_VAR 0 8
67661: PUSH
67662: LD_INT 0
67664: LESS
67665: IFFALSE 67682
// time := time * - 1 ;
67667: LD_ADDR_VAR 0 8
67671: PUSH
67672: LD_VAR 0 8
67676: PUSH
67677: LD_INT 1
67679: NEG
67680: MUL
67681: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67682: LD_VAR 0 8
67686: PUSH
67687: LD_INT 35
67689: PPUSH
67690: LD_INT 875
67692: PPUSH
67693: CALL_OW 12
67697: PLUS
67698: PPUSH
67699: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67703: LD_INT 1
67705: PPUSH
67706: LD_INT 5
67708: PPUSH
67709: CALL_OW 12
67713: PPUSH
67714: LD_VAR 0 1
67718: PPUSH
67719: LD_INT 1
67721: PPUSH
67722: CALL_OW 55
// end ;
67726: GO 67539
// end ;
67728: LD_VAR 0 5
67732: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67733: LD_INT 0
67735: PPUSH
67736: PPUSH
67737: PPUSH
67738: PPUSH
67739: PPUSH
67740: PPUSH
67741: PPUSH
67742: PPUSH
// if not turrets or not factories then
67743: LD_VAR 0 1
67747: NOT
67748: IFTRUE 67757
67750: PUSH
67751: LD_VAR 0 2
67755: NOT
67756: OR
67757: IFFALSE 67761
// exit ;
67759: GO 68068
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67761: LD_ADDR_VAR 0 10
67765: PUSH
67766: LD_INT 5
67768: PUSH
67769: LD_INT 6
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 2
67778: PUSH
67779: LD_INT 4
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 3
67788: PUSH
67789: LD_INT 5
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 24
67803: PUSH
67804: LD_INT 25
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 23
67813: PUSH
67814: LD_INT 27
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 42
67827: PUSH
67828: LD_INT 43
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 44
67837: PUSH
67838: LD_INT 46
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 45
67847: PUSH
67848: LD_INT 47
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: LIST
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: LIST
67864: ST_TO_ADDR
// result := [ ] ;
67865: LD_ADDR_VAR 0 3
67869: PUSH
67870: EMPTY
67871: ST_TO_ADDR
// for i in turrets do
67872: LD_ADDR_VAR 0 4
67876: PUSH
67877: LD_VAR 0 1
67881: PUSH
67882: FOR_IN
67883: IFFALSE 68066
// begin nat := GetNation ( i ) ;
67885: LD_ADDR_VAR 0 7
67889: PUSH
67890: LD_VAR 0 4
67894: PPUSH
67895: CALL_OW 248
67899: ST_TO_ADDR
// weapon := 0 ;
67900: LD_ADDR_VAR 0 8
67904: PUSH
67905: LD_INT 0
67907: ST_TO_ADDR
// if not nat then
67908: LD_VAR 0 7
67912: NOT
67913: IFFALSE 67917
// continue ;
67915: GO 67882
// for j in list [ nat ] do
67917: LD_ADDR_VAR 0 5
67921: PUSH
67922: LD_VAR 0 10
67926: PUSH
67927: LD_VAR 0 7
67931: ARRAY
67932: PUSH
67933: FOR_IN
67934: IFFALSE 67975
// if GetBWeapon ( i ) = j [ 1 ] then
67936: LD_VAR 0 4
67940: PPUSH
67941: CALL_OW 269
67945: PUSH
67946: LD_VAR 0 5
67950: PUSH
67951: LD_INT 1
67953: ARRAY
67954: EQUAL
67955: IFFALSE 67973
// begin weapon := j [ 2 ] ;
67957: LD_ADDR_VAR 0 8
67961: PUSH
67962: LD_VAR 0 5
67966: PUSH
67967: LD_INT 2
67969: ARRAY
67970: ST_TO_ADDR
// break ;
67971: GO 67975
// end ;
67973: GO 67933
67975: POP
67976: POP
// if not weapon then
67977: LD_VAR 0 8
67981: NOT
67982: IFFALSE 67986
// continue ;
67984: GO 67882
// for k in factories do
67986: LD_ADDR_VAR 0 6
67990: PUSH
67991: LD_VAR 0 2
67995: PUSH
67996: FOR_IN
67997: IFFALSE 68062
// begin weapons := AvailableWeaponList ( k ) ;
67999: LD_ADDR_VAR 0 9
68003: PUSH
68004: LD_VAR 0 6
68008: PPUSH
68009: CALL_OW 478
68013: ST_TO_ADDR
// if not weapons then
68014: LD_VAR 0 9
68018: NOT
68019: IFFALSE 68023
// continue ;
68021: GO 67996
// if weapon in weapons then
68023: LD_VAR 0 8
68027: PUSH
68028: LD_VAR 0 9
68032: IN
68033: IFFALSE 68060
// begin result := [ i , weapon ] ;
68035: LD_ADDR_VAR 0 3
68039: PUSH
68040: LD_VAR 0 4
68044: PUSH
68045: LD_VAR 0 8
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: ST_TO_ADDR
// exit ;
68054: POP
68055: POP
68056: POP
68057: POP
68058: GO 68068
// end ; end ;
68060: GO 67996
68062: POP
68063: POP
// end ;
68064: GO 67882
68066: POP
68067: POP
// end ;
68068: LD_VAR 0 3
68072: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68073: LD_INT 0
68075: PPUSH
// if not side or side > 8 then
68076: LD_VAR 0 3
68080: NOT
68081: IFTRUE 68093
68083: PUSH
68084: LD_VAR 0 3
68088: PUSH
68089: LD_INT 8
68091: GREATER
68092: OR
68093: IFFALSE 68097
// exit ;
68095: GO 68156
// if not range then
68097: LD_VAR 0 4
68101: NOT
68102: IFFALSE 68113
// range := - 12 ;
68104: LD_ADDR_VAR 0 4
68108: PUSH
68109: LD_INT 12
68111: NEG
68112: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68113: LD_VAR 0 1
68117: PPUSH
68118: LD_VAR 0 2
68122: PPUSH
68123: LD_VAR 0 3
68127: PPUSH
68128: LD_VAR 0 4
68132: PPUSH
68133: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68137: LD_VAR 0 1
68141: PPUSH
68142: LD_VAR 0 2
68146: PPUSH
68147: LD_VAR 0 3
68151: PPUSH
68152: CALL_OW 331
// end ;
68156: LD_VAR 0 5
68160: RET
// export function Video ( mode ) ; begin
68161: LD_INT 0
68163: PPUSH
// ingame_video = mode ;
68164: LD_ADDR_OWVAR 52
68168: PUSH
68169: LD_VAR 0 1
68173: ST_TO_ADDR
// interface_hidden = mode ;
68174: LD_ADDR_OWVAR 54
68178: PUSH
68179: LD_VAR 0 1
68183: ST_TO_ADDR
// end ;
68184: LD_VAR 0 2
68188: RET
// export function Join ( array , element ) ; begin
68189: LD_INT 0
68191: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68192: LD_ADDR_VAR 0 3
68196: PUSH
68197: LD_VAR 0 1
68201: PPUSH
68202: LD_VAR 0 1
68206: PUSH
68207: LD_INT 1
68209: PLUS
68210: PPUSH
68211: LD_VAR 0 2
68215: PPUSH
68216: CALL_OW 1
68220: ST_TO_ADDR
// end ;
68221: LD_VAR 0 3
68225: RET
// export function JoinUnion ( array , element ) ; begin
68226: LD_INT 0
68228: PPUSH
// result := array union element ;
68229: LD_ADDR_VAR 0 3
68233: PUSH
68234: LD_VAR 0 1
68238: PUSH
68239: LD_VAR 0 2
68243: UNION
68244: ST_TO_ADDR
// end ;
68245: LD_VAR 0 3
68249: RET
// export function GetBehemoths ( side ) ; begin
68250: LD_INT 0
68252: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68253: LD_ADDR_VAR 0 2
68257: PUSH
68258: LD_INT 22
68260: PUSH
68261: LD_VAR 0 1
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 31
68272: PUSH
68273: LD_INT 25
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PPUSH
68284: CALL_OW 69
68288: ST_TO_ADDR
// end ;
68289: LD_VAR 0 2
68293: RET
// export function Shuffle ( array ) ; var i , index ; begin
68294: LD_INT 0
68296: PPUSH
68297: PPUSH
68298: PPUSH
// result := [ ] ;
68299: LD_ADDR_VAR 0 2
68303: PUSH
68304: EMPTY
68305: ST_TO_ADDR
// if not array then
68306: LD_VAR 0 1
68310: NOT
68311: IFFALSE 68315
// exit ;
68313: GO 68414
// Randomize ;
68315: CALL_OW 10
// for i = array downto 1 do
68319: LD_ADDR_VAR 0 3
68323: PUSH
68324: DOUBLE
68325: LD_VAR 0 1
68329: INC
68330: ST_TO_ADDR
68331: LD_INT 1
68333: PUSH
68334: FOR_DOWNTO
68335: IFFALSE 68412
// begin index := rand ( 1 , array ) ;
68337: LD_ADDR_VAR 0 4
68341: PUSH
68342: LD_INT 1
68344: PPUSH
68345: LD_VAR 0 1
68349: PPUSH
68350: CALL_OW 12
68354: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68355: LD_ADDR_VAR 0 2
68359: PUSH
68360: LD_VAR 0 2
68364: PPUSH
68365: LD_VAR 0 2
68369: PUSH
68370: LD_INT 1
68372: PLUS
68373: PPUSH
68374: LD_VAR 0 1
68378: PUSH
68379: LD_VAR 0 4
68383: ARRAY
68384: PPUSH
68385: CALL_OW 2
68389: ST_TO_ADDR
// array := Delete ( array , index ) ;
68390: LD_ADDR_VAR 0 1
68394: PUSH
68395: LD_VAR 0 1
68399: PPUSH
68400: LD_VAR 0 4
68404: PPUSH
68405: CALL_OW 3
68409: ST_TO_ADDR
// end ;
68410: GO 68334
68412: POP
68413: POP
// end ;
68414: LD_VAR 0 2
68418: RET
// export function GetBaseMaterials ( base ) ; begin
68419: LD_INT 0
68421: PPUSH
// result := [ 0 , 0 , 0 ] ;
68422: LD_ADDR_VAR 0 2
68426: PUSH
68427: LD_INT 0
68429: PUSH
68430: LD_INT 0
68432: PUSH
68433: LD_INT 0
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: LIST
68440: ST_TO_ADDR
// if not base then
68441: LD_VAR 0 1
68445: NOT
68446: IFFALSE 68450
// exit ;
68448: GO 68499
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68450: LD_ADDR_VAR 0 2
68454: PUSH
68455: LD_VAR 0 1
68459: PPUSH
68460: LD_INT 1
68462: PPUSH
68463: CALL_OW 275
68467: PUSH
68468: LD_VAR 0 1
68472: PPUSH
68473: LD_INT 2
68475: PPUSH
68476: CALL_OW 275
68480: PUSH
68481: LD_VAR 0 1
68485: PPUSH
68486: LD_INT 3
68488: PPUSH
68489: CALL_OW 275
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: LIST
68498: ST_TO_ADDR
// end ;
68499: LD_VAR 0 2
68503: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68504: LD_INT 0
68506: PPUSH
68507: PPUSH
// result := array ;
68508: LD_ADDR_VAR 0 3
68512: PUSH
68513: LD_VAR 0 1
68517: ST_TO_ADDR
// if size >= result then
68518: LD_VAR 0 2
68522: PUSH
68523: LD_VAR 0 3
68527: GREATEREQUAL
68528: IFFALSE 68532
// exit ;
68530: GO 68582
// if size then
68532: LD_VAR 0 2
68536: IFFALSE 68582
// for i := array downto size do
68538: LD_ADDR_VAR 0 4
68542: PUSH
68543: DOUBLE
68544: LD_VAR 0 1
68548: INC
68549: ST_TO_ADDR
68550: LD_VAR 0 2
68554: PUSH
68555: FOR_DOWNTO
68556: IFFALSE 68580
// result := Delete ( result , result ) ;
68558: LD_ADDR_VAR 0 3
68562: PUSH
68563: LD_VAR 0 3
68567: PPUSH
68568: LD_VAR 0 3
68572: PPUSH
68573: CALL_OW 3
68577: ST_TO_ADDR
68578: GO 68555
68580: POP
68581: POP
// end ;
68582: LD_VAR 0 3
68586: RET
// export function ComExit ( unit ) ; var tmp ; begin
68587: LD_INT 0
68589: PPUSH
68590: PPUSH
// if not IsInUnit ( unit ) then
68591: LD_VAR 0 1
68595: PPUSH
68596: CALL_OW 310
68600: NOT
68601: IFFALSE 68605
// exit ;
68603: GO 68665
// tmp := IsInUnit ( unit ) ;
68605: LD_ADDR_VAR 0 3
68609: PUSH
68610: LD_VAR 0 1
68614: PPUSH
68615: CALL_OW 310
68619: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68620: LD_VAR 0 3
68624: PPUSH
68625: CALL_OW 247
68629: PUSH
68630: LD_INT 2
68632: EQUAL
68633: IFFALSE 68646
// ComExitVehicle ( unit ) else
68635: LD_VAR 0 1
68639: PPUSH
68640: CALL_OW 121
68644: GO 68655
// ComExitBuilding ( unit ) ;
68646: LD_VAR 0 1
68650: PPUSH
68651: CALL_OW 122
// result := tmp ;
68655: LD_ADDR_VAR 0 2
68659: PUSH
68660: LD_VAR 0 3
68664: ST_TO_ADDR
// end ;
68665: LD_VAR 0 2
68669: RET
// export function ComExitAll ( units ) ; var i ; begin
68670: LD_INT 0
68672: PPUSH
68673: PPUSH
// if not units then
68674: LD_VAR 0 1
68678: NOT
68679: IFFALSE 68683
// exit ;
68681: GO 68709
// for i in units do
68683: LD_ADDR_VAR 0 3
68687: PUSH
68688: LD_VAR 0 1
68692: PUSH
68693: FOR_IN
68694: IFFALSE 68707
// ComExit ( i ) ;
68696: LD_VAR 0 3
68700: PPUSH
68701: CALL 68587 0 1
68705: GO 68693
68707: POP
68708: POP
// end ;
68709: LD_VAR 0 2
68713: RET
// export function ResetHc ; begin
68714: LD_INT 0
68716: PPUSH
// InitHc ;
68717: CALL_OW 19
// hc_importance := 0 ;
68721: LD_ADDR_OWVAR 32
68725: PUSH
68726: LD_INT 0
68728: ST_TO_ADDR
// end ;
68729: LD_VAR 0 1
68733: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68734: LD_INT 0
68736: PPUSH
68737: PPUSH
68738: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68739: LD_ADDR_VAR 0 6
68743: PUSH
68744: LD_VAR 0 1
68748: PUSH
68749: LD_VAR 0 3
68753: PLUS
68754: PUSH
68755: LD_INT 2
68757: DIV
68758: ST_TO_ADDR
// if _x < 0 then
68759: LD_VAR 0 6
68763: PUSH
68764: LD_INT 0
68766: LESS
68767: IFFALSE 68784
// _x := _x * - 1 ;
68769: LD_ADDR_VAR 0 6
68773: PUSH
68774: LD_VAR 0 6
68778: PUSH
68779: LD_INT 1
68781: NEG
68782: MUL
68783: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68784: LD_ADDR_VAR 0 7
68788: PUSH
68789: LD_VAR 0 2
68793: PUSH
68794: LD_VAR 0 4
68798: PLUS
68799: PUSH
68800: LD_INT 2
68802: DIV
68803: ST_TO_ADDR
// if _y < 0 then
68804: LD_VAR 0 7
68808: PUSH
68809: LD_INT 0
68811: LESS
68812: IFFALSE 68829
// _y := _y * - 1 ;
68814: LD_ADDR_VAR 0 7
68818: PUSH
68819: LD_VAR 0 7
68823: PUSH
68824: LD_INT 1
68826: NEG
68827: MUL
68828: ST_TO_ADDR
// result := [ _x , _y ] ;
68829: LD_ADDR_VAR 0 5
68833: PUSH
68834: LD_VAR 0 6
68838: PUSH
68839: LD_VAR 0 7
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: ST_TO_ADDR
// end ;
68848: LD_VAR 0 5
68852: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68853: LD_INT 0
68855: PPUSH
68856: PPUSH
68857: PPUSH
68858: PPUSH
// task := GetTaskList ( unit ) ;
68859: LD_ADDR_VAR 0 7
68863: PUSH
68864: LD_VAR 0 1
68868: PPUSH
68869: CALL_OW 437
68873: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68874: LD_VAR 0 7
68878: NOT
68879: IFFALSE 68898
68881: PUSH
68882: LD_VAR 0 1
68886: PPUSH
68887: LD_VAR 0 2
68891: PPUSH
68892: CALL_OW 308
68896: NOT
68897: AND
68898: IFFALSE 68902
// exit ;
68900: GO 69020
// if IsInArea ( unit , area ) then
68902: LD_VAR 0 1
68906: PPUSH
68907: LD_VAR 0 2
68911: PPUSH
68912: CALL_OW 308
68916: IFFALSE 68934
// begin ComMoveToArea ( unit , goAway ) ;
68918: LD_VAR 0 1
68922: PPUSH
68923: LD_VAR 0 3
68927: PPUSH
68928: CALL_OW 113
// exit ;
68932: GO 69020
// end ; if task [ 1 ] [ 1 ] <> M then
68934: LD_VAR 0 7
68938: PUSH
68939: LD_INT 1
68941: ARRAY
68942: PUSH
68943: LD_INT 1
68945: ARRAY
68946: PUSH
68947: LD_STRING M
68949: NONEQUAL
68950: IFFALSE 68954
// exit ;
68952: GO 69020
// x := task [ 1 ] [ 2 ] ;
68954: LD_ADDR_VAR 0 5
68958: PUSH
68959: LD_VAR 0 7
68963: PUSH
68964: LD_INT 1
68966: ARRAY
68967: PUSH
68968: LD_INT 2
68970: ARRAY
68971: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68972: LD_ADDR_VAR 0 6
68976: PUSH
68977: LD_VAR 0 7
68981: PUSH
68982: LD_INT 1
68984: ARRAY
68985: PUSH
68986: LD_INT 3
68988: ARRAY
68989: ST_TO_ADDR
// if InArea ( x , y , area ) then
68990: LD_VAR 0 5
68994: PPUSH
68995: LD_VAR 0 6
68999: PPUSH
69000: LD_VAR 0 2
69004: PPUSH
69005: CALL_OW 309
69009: IFFALSE 69020
// ComStop ( unit ) ;
69011: LD_VAR 0 1
69015: PPUSH
69016: CALL_OW 141
// end ;
69020: LD_VAR 0 4
69024: RET
// export function Abs ( value ) ; begin
69025: LD_INT 0
69027: PPUSH
// result := value ;
69028: LD_ADDR_VAR 0 2
69032: PUSH
69033: LD_VAR 0 1
69037: ST_TO_ADDR
// if value < 0 then
69038: LD_VAR 0 1
69042: PUSH
69043: LD_INT 0
69045: LESS
69046: IFFALSE 69063
// result := value * - 1 ;
69048: LD_ADDR_VAR 0 2
69052: PUSH
69053: LD_VAR 0 1
69057: PUSH
69058: LD_INT 1
69060: NEG
69061: MUL
69062: ST_TO_ADDR
// end ;
69063: LD_VAR 0 2
69067: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69068: LD_INT 0
69070: PPUSH
69071: PPUSH
69072: PPUSH
69073: PPUSH
69074: PPUSH
69075: PPUSH
69076: PPUSH
69077: PPUSH
// if not unit or not building then
69078: LD_VAR 0 1
69082: NOT
69083: IFTRUE 69092
69085: PUSH
69086: LD_VAR 0 2
69090: NOT
69091: OR
69092: IFFALSE 69096
// exit ;
69094: GO 69324
// x := GetX ( building ) ;
69096: LD_ADDR_VAR 0 4
69100: PUSH
69101: LD_VAR 0 2
69105: PPUSH
69106: CALL_OW 250
69110: ST_TO_ADDR
// y := GetY ( building ) ;
69111: LD_ADDR_VAR 0 6
69115: PUSH
69116: LD_VAR 0 2
69120: PPUSH
69121: CALL_OW 251
69125: ST_TO_ADDR
// d := GetDir ( building ) ;
69126: LD_ADDR_VAR 0 8
69130: PUSH
69131: LD_VAR 0 2
69135: PPUSH
69136: CALL_OW 254
69140: ST_TO_ADDR
// r := 4 ;
69141: LD_ADDR_VAR 0 9
69145: PUSH
69146: LD_INT 4
69148: ST_TO_ADDR
// for i := 1 to 5 do
69149: LD_ADDR_VAR 0 10
69153: PUSH
69154: DOUBLE
69155: LD_INT 1
69157: DEC
69158: ST_TO_ADDR
69159: LD_INT 5
69161: PUSH
69162: FOR_TO
69163: IFFALSE 69322
// begin _x := ShiftX ( x , d , r + i ) ;
69165: LD_ADDR_VAR 0 5
69169: PUSH
69170: LD_VAR 0 4
69174: PPUSH
69175: LD_VAR 0 8
69179: PPUSH
69180: LD_VAR 0 9
69184: PUSH
69185: LD_VAR 0 10
69189: PLUS
69190: PPUSH
69191: CALL_OW 272
69195: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69196: LD_ADDR_VAR 0 7
69200: PUSH
69201: LD_VAR 0 6
69205: PPUSH
69206: LD_VAR 0 8
69210: PPUSH
69211: LD_VAR 0 9
69215: PUSH
69216: LD_VAR 0 10
69220: PLUS
69221: PPUSH
69222: CALL_OW 273
69226: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69227: LD_VAR 0 5
69231: PPUSH
69232: LD_VAR 0 7
69236: PPUSH
69237: CALL_OW 488
69241: IFFALSE 69276
69243: PUSH
69244: LD_VAR 0 5
69248: PPUSH
69249: LD_VAR 0 7
69253: PPUSH
69254: CALL_OW 428
69258: PPUSH
69259: CALL_OW 247
69263: PUSH
69264: LD_INT 3
69266: PUSH
69267: LD_INT 2
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: IN
69274: NOT
69275: AND
69276: IFFALSE 69320
// begin ComMoveXY ( unit , _x , _y ) ;
69278: LD_VAR 0 1
69282: PPUSH
69283: LD_VAR 0 5
69287: PPUSH
69288: LD_VAR 0 7
69292: PPUSH
69293: CALL_OW 111
// result := [ _x , _y ] ;
69297: LD_ADDR_VAR 0 3
69301: PUSH
69302: LD_VAR 0 5
69306: PUSH
69307: LD_VAR 0 7
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: ST_TO_ADDR
// exit ;
69316: POP
69317: POP
69318: GO 69324
// end ; end ;
69320: GO 69162
69322: POP
69323: POP
// end ;
69324: LD_VAR 0 3
69328: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69329: LD_INT 0
69331: PPUSH
69332: PPUSH
69333: PPUSH
// result := 0 ;
69334: LD_ADDR_VAR 0 3
69338: PUSH
69339: LD_INT 0
69341: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69342: LD_VAR 0 1
69346: PUSH
69347: LD_INT 0
69349: LESS
69350: IFTRUE 69362
69352: PUSH
69353: LD_VAR 0 1
69357: PUSH
69358: LD_INT 8
69360: GREATER
69361: OR
69362: IFTRUE 69374
69364: PUSH
69365: LD_VAR 0 2
69369: PUSH
69370: LD_INT 0
69372: LESS
69373: OR
69374: IFTRUE 69386
69376: PUSH
69377: LD_VAR 0 2
69381: PUSH
69382: LD_INT 8
69384: GREATER
69385: OR
69386: IFFALSE 69390
// exit ;
69388: GO 69465
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69390: LD_ADDR_VAR 0 4
69394: PUSH
69395: LD_INT 22
69397: PUSH
69398: LD_VAR 0 2
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PPUSH
69407: CALL_OW 69
69411: PUSH
69412: FOR_IN
69413: IFFALSE 69463
// begin un := UnitShoot ( i ) ;
69415: LD_ADDR_VAR 0 5
69419: PUSH
69420: LD_VAR 0 4
69424: PPUSH
69425: CALL_OW 504
69429: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69430: LD_VAR 0 5
69434: PPUSH
69435: CALL_OW 255
69439: PUSH
69440: LD_VAR 0 1
69444: EQUAL
69445: IFFALSE 69461
// begin result := un ;
69447: LD_ADDR_VAR 0 3
69451: PUSH
69452: LD_VAR 0 5
69456: ST_TO_ADDR
// exit ;
69457: POP
69458: POP
69459: GO 69465
// end ; end ;
69461: GO 69412
69463: POP
69464: POP
// end ;
69465: LD_VAR 0 3
69469: RET
// export function GetCargoBay ( units ) ; begin
69470: LD_INT 0
69472: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69473: LD_ADDR_VAR 0 2
69477: PUSH
69478: LD_VAR 0 1
69482: PPUSH
69483: LD_INT 2
69485: PUSH
69486: LD_INT 34
69488: PUSH
69489: LD_INT 12
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 34
69498: PUSH
69499: LD_INT 51
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 34
69508: PUSH
69509: LD_INT 32
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 34
69518: PUSH
69519: LD_INT 89
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: PPUSH
69533: CALL_OW 72
69537: ST_TO_ADDR
// end ;
69538: LD_VAR 0 2
69542: RET
// export function Negate ( value ) ; begin
69543: LD_INT 0
69545: PPUSH
// result := not value ;
69546: LD_ADDR_VAR 0 2
69550: PUSH
69551: LD_VAR 0 1
69555: NOT
69556: ST_TO_ADDR
// end ;
69557: LD_VAR 0 2
69561: RET
// export function Inc ( value ) ; begin
69562: LD_INT 0
69564: PPUSH
// result := value + 1 ;
69565: LD_ADDR_VAR 0 2
69569: PUSH
69570: LD_VAR 0 1
69574: PUSH
69575: LD_INT 1
69577: PLUS
69578: ST_TO_ADDR
// end ;
69579: LD_VAR 0 2
69583: RET
// export function Dec ( value ) ; begin
69584: LD_INT 0
69586: PPUSH
// result := value - 1 ;
69587: LD_ADDR_VAR 0 2
69591: PUSH
69592: LD_VAR 0 1
69596: PUSH
69597: LD_INT 1
69599: MINUS
69600: ST_TO_ADDR
// end ;
69601: LD_VAR 0 2
69605: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69606: LD_INT 0
69608: PPUSH
69609: PPUSH
69610: PPUSH
69611: PPUSH
69612: PPUSH
69613: PPUSH
69614: PPUSH
69615: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69616: LD_VAR 0 1
69620: PPUSH
69621: LD_VAR 0 2
69625: PPUSH
69626: CALL_OW 488
69630: NOT
69631: IFTRUE 69650
69633: PUSH
69634: LD_VAR 0 3
69638: PPUSH
69639: LD_VAR 0 4
69643: PPUSH
69644: CALL_OW 488
69648: NOT
69649: OR
69650: IFFALSE 69663
// begin result := - 1 ;
69652: LD_ADDR_VAR 0 5
69656: PUSH
69657: LD_INT 1
69659: NEG
69660: ST_TO_ADDR
// exit ;
69661: GO 69898
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69663: LD_ADDR_VAR 0 12
69667: PUSH
69668: LD_VAR 0 1
69672: PPUSH
69673: LD_VAR 0 2
69677: PPUSH
69678: LD_VAR 0 3
69682: PPUSH
69683: LD_VAR 0 4
69687: PPUSH
69688: CALL 68734 0 4
69692: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69693: LD_ADDR_VAR 0 11
69697: PUSH
69698: LD_VAR 0 1
69702: PPUSH
69703: LD_VAR 0 2
69707: PPUSH
69708: LD_VAR 0 12
69712: PUSH
69713: LD_INT 1
69715: ARRAY
69716: PPUSH
69717: LD_VAR 0 12
69721: PUSH
69722: LD_INT 2
69724: ARRAY
69725: PPUSH
69726: CALL_OW 298
69730: ST_TO_ADDR
// distance := 9999 ;
69731: LD_ADDR_VAR 0 10
69735: PUSH
69736: LD_INT 9999
69738: ST_TO_ADDR
// for i := 0 to 5 do
69739: LD_ADDR_VAR 0 6
69743: PUSH
69744: DOUBLE
69745: LD_INT 0
69747: DEC
69748: ST_TO_ADDR
69749: LD_INT 5
69751: PUSH
69752: FOR_TO
69753: IFFALSE 69896
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69755: LD_ADDR_VAR 0 7
69759: PUSH
69760: LD_VAR 0 1
69764: PPUSH
69765: LD_VAR 0 6
69769: PPUSH
69770: LD_VAR 0 11
69774: PPUSH
69775: CALL_OW 272
69779: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69780: LD_ADDR_VAR 0 8
69784: PUSH
69785: LD_VAR 0 2
69789: PPUSH
69790: LD_VAR 0 6
69794: PPUSH
69795: LD_VAR 0 11
69799: PPUSH
69800: CALL_OW 273
69804: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69805: LD_VAR 0 7
69809: PPUSH
69810: LD_VAR 0 8
69814: PPUSH
69815: CALL_OW 488
69819: NOT
69820: IFFALSE 69824
// continue ;
69822: GO 69752
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69824: LD_ADDR_VAR 0 9
69828: PUSH
69829: LD_VAR 0 12
69833: PUSH
69834: LD_INT 1
69836: ARRAY
69837: PPUSH
69838: LD_VAR 0 12
69842: PUSH
69843: LD_INT 2
69845: ARRAY
69846: PPUSH
69847: LD_VAR 0 7
69851: PPUSH
69852: LD_VAR 0 8
69856: PPUSH
69857: CALL_OW 298
69861: ST_TO_ADDR
// if tmp < distance then
69862: LD_VAR 0 9
69866: PUSH
69867: LD_VAR 0 10
69871: LESS
69872: IFFALSE 69894
// begin result := i ;
69874: LD_ADDR_VAR 0 5
69878: PUSH
69879: LD_VAR 0 6
69883: ST_TO_ADDR
// distance := tmp ;
69884: LD_ADDR_VAR 0 10
69888: PUSH
69889: LD_VAR 0 9
69893: ST_TO_ADDR
// end ; end ;
69894: GO 69752
69896: POP
69897: POP
// end ;
69898: LD_VAR 0 5
69902: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69903: LD_INT 0
69905: PPUSH
69906: PPUSH
// if not driver or not IsInUnit ( driver ) then
69907: LD_VAR 0 1
69911: NOT
69912: IFTRUE 69926
69914: PUSH
69915: LD_VAR 0 1
69919: PPUSH
69920: CALL_OW 310
69924: NOT
69925: OR
69926: IFFALSE 69930
// exit ;
69928: GO 70020
// vehicle := IsInUnit ( driver ) ;
69930: LD_ADDR_VAR 0 3
69934: PUSH
69935: LD_VAR 0 1
69939: PPUSH
69940: CALL_OW 310
69944: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69945: LD_VAR 0 1
69949: PPUSH
69950: LD_STRING \
69952: PUSH
69953: LD_INT 0
69955: PUSH
69956: LD_INT 0
69958: PUSH
69959: LD_INT 0
69961: PUSH
69962: LD_INT 0
69964: PUSH
69965: LD_INT 0
69967: PUSH
69968: LD_INT 0
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: PUSH
69980: LD_STRING E
69982: PUSH
69983: LD_INT 0
69985: PUSH
69986: LD_INT 0
69988: PUSH
69989: LD_VAR 0 3
69993: PUSH
69994: LD_INT 0
69996: PUSH
69997: LD_INT 0
69999: PUSH
70000: LD_INT 0
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: LIST
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PPUSH
70016: CALL_OW 446
// end ;
70020: LD_VAR 0 2
70024: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70025: LD_INT 0
70027: PPUSH
70028: PPUSH
// if not driver or not IsInUnit ( driver ) then
70029: LD_VAR 0 1
70033: NOT
70034: IFTRUE 70048
70036: PUSH
70037: LD_VAR 0 1
70041: PPUSH
70042: CALL_OW 310
70046: NOT
70047: OR
70048: IFFALSE 70052
// exit ;
70050: GO 70142
// vehicle := IsInUnit ( driver ) ;
70052: LD_ADDR_VAR 0 3
70056: PUSH
70057: LD_VAR 0 1
70061: PPUSH
70062: CALL_OW 310
70066: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70067: LD_VAR 0 1
70071: PPUSH
70072: LD_STRING \
70074: PUSH
70075: LD_INT 0
70077: PUSH
70078: LD_INT 0
70080: PUSH
70081: LD_INT 0
70083: PUSH
70084: LD_INT 0
70086: PUSH
70087: LD_INT 0
70089: PUSH
70090: LD_INT 0
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: PUSH
70102: LD_STRING E
70104: PUSH
70105: LD_INT 0
70107: PUSH
70108: LD_INT 0
70110: PUSH
70111: LD_VAR 0 3
70115: PUSH
70116: LD_INT 0
70118: PUSH
70119: LD_INT 0
70121: PUSH
70122: LD_INT 0
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PPUSH
70138: CALL_OW 447
// end ;
70142: LD_VAR 0 2
70146: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70147: LD_INT 0
70149: PPUSH
70150: PPUSH
70151: PPUSH
// tmp := [ ] ;
70152: LD_ADDR_VAR 0 5
70156: PUSH
70157: EMPTY
70158: ST_TO_ADDR
// for i in units do
70159: LD_ADDR_VAR 0 4
70163: PUSH
70164: LD_VAR 0 1
70168: PUSH
70169: FOR_IN
70170: IFFALSE 70208
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70172: LD_ADDR_VAR 0 5
70176: PUSH
70177: LD_VAR 0 5
70181: PPUSH
70182: LD_VAR 0 5
70186: PUSH
70187: LD_INT 1
70189: PLUS
70190: PPUSH
70191: LD_VAR 0 4
70195: PPUSH
70196: CALL_OW 256
70200: PPUSH
70201: CALL_OW 2
70205: ST_TO_ADDR
70206: GO 70169
70208: POP
70209: POP
// if not tmp then
70210: LD_VAR 0 5
70214: NOT
70215: IFFALSE 70219
// exit ;
70217: GO 70267
// if asc then
70219: LD_VAR 0 2
70223: IFFALSE 70247
// result := SortListByListAsc ( units , tmp ) else
70225: LD_ADDR_VAR 0 3
70229: PUSH
70230: LD_VAR 0 1
70234: PPUSH
70235: LD_VAR 0 5
70239: PPUSH
70240: CALL_OW 76
70244: ST_TO_ADDR
70245: GO 70267
// result := SortListByListDesc ( units , tmp ) ;
70247: LD_ADDR_VAR 0 3
70251: PUSH
70252: LD_VAR 0 1
70256: PPUSH
70257: LD_VAR 0 5
70261: PPUSH
70262: CALL_OW 77
70266: ST_TO_ADDR
// end ;
70267: LD_VAR 0 3
70271: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70272: LD_INT 0
70274: PPUSH
70275: PPUSH
// task := GetTaskList ( mech ) ;
70276: LD_ADDR_VAR 0 4
70280: PUSH
70281: LD_VAR 0 1
70285: PPUSH
70286: CALL_OW 437
70290: ST_TO_ADDR
// if not task then
70291: LD_VAR 0 4
70295: NOT
70296: IFFALSE 70300
// exit ;
70298: GO 70344
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70300: LD_ADDR_VAR 0 3
70304: PUSH
70305: LD_VAR 0 4
70309: PUSH
70310: LD_INT 1
70312: ARRAY
70313: PUSH
70314: LD_INT 1
70316: ARRAY
70317: PUSH
70318: LD_STRING r
70320: EQUAL
70321: IFFALSE 70343
70323: PUSH
70324: LD_VAR 0 4
70328: PUSH
70329: LD_INT 1
70331: ARRAY
70332: PUSH
70333: LD_INT 4
70335: ARRAY
70336: PUSH
70337: LD_VAR 0 2
70341: EQUAL
70342: AND
70343: ST_TO_ADDR
// end ;
70344: LD_VAR 0 3
70348: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70349: LD_INT 0
70351: PPUSH
// SetDir ( unit , d ) ;
70352: LD_VAR 0 1
70356: PPUSH
70357: LD_VAR 0 4
70361: PPUSH
70362: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
70366: LD_ADDR_VAR 0 6
70370: PUSH
70371: LD_VAR 0 1
70375: PPUSH
70376: LD_VAR 0 2
70380: PPUSH
70381: LD_VAR 0 3
70385: PPUSH
70386: LD_VAR 0 5
70390: PPUSH
70391: CALL_OW 48
70395: ST_TO_ADDR
// end ;
70396: LD_VAR 0 6
70400: RET
// export function ToNaturalNumber ( number ) ; begin
70401: LD_INT 0
70403: PPUSH
// result := number div 1 ;
70404: LD_ADDR_VAR 0 2
70408: PUSH
70409: LD_VAR 0 1
70413: PUSH
70414: LD_INT 1
70416: DIV
70417: ST_TO_ADDR
// if number < 0 then
70418: LD_VAR 0 1
70422: PUSH
70423: LD_INT 0
70425: LESS
70426: IFFALSE 70436
// result := 0 ;
70428: LD_ADDR_VAR 0 2
70432: PUSH
70433: LD_INT 0
70435: ST_TO_ADDR
// end ;
70436: LD_VAR 0 2
70440: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
70441: LD_INT 0
70443: PPUSH
70444: PPUSH
70445: PPUSH
// if not buildings then
70446: LD_VAR 0 1
70450: NOT
70451: IFFALSE 70455
// exit ;
70453: GO 70570
// tmp := [ ] ;
70455: LD_ADDR_VAR 0 5
70459: PUSH
70460: EMPTY
70461: ST_TO_ADDR
// for b in buildings do
70462: LD_ADDR_VAR 0 4
70466: PUSH
70467: LD_VAR 0 1
70471: PUSH
70472: FOR_IN
70473: IFFALSE 70511
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
70475: LD_ADDR_VAR 0 5
70479: PUSH
70480: LD_VAR 0 5
70484: PPUSH
70485: LD_VAR 0 5
70489: PUSH
70490: LD_INT 1
70492: PLUS
70493: PPUSH
70494: LD_VAR 0 4
70498: PPUSH
70499: CALL_OW 266
70503: PPUSH
70504: CALL_OW 1
70508: ST_TO_ADDR
70509: GO 70472
70511: POP
70512: POP
// if not tmp then
70513: LD_VAR 0 5
70517: NOT
70518: IFFALSE 70522
// exit ;
70520: GO 70570
// if asc then
70522: LD_VAR 0 2
70526: IFFALSE 70550
// result := SortListByListAsc ( buildings , tmp ) else
70528: LD_ADDR_VAR 0 3
70532: PUSH
70533: LD_VAR 0 1
70537: PPUSH
70538: LD_VAR 0 5
70542: PPUSH
70543: CALL_OW 76
70547: ST_TO_ADDR
70548: GO 70570
// result := SortListByListDesc ( buildings , tmp ) ;
70550: LD_ADDR_VAR 0 3
70554: PUSH
70555: LD_VAR 0 1
70559: PPUSH
70560: LD_VAR 0 5
70564: PPUSH
70565: CALL_OW 77
70569: ST_TO_ADDR
// end ;
70570: LD_VAR 0 3
70574: RET
// export function SortByClass ( units , class ) ; var un ; begin
70575: LD_INT 0
70577: PPUSH
70578: PPUSH
// if not units or not class then
70579: LD_VAR 0 1
70583: NOT
70584: IFTRUE 70593
70586: PUSH
70587: LD_VAR 0 2
70591: NOT
70592: OR
70593: IFFALSE 70597
// exit ;
70595: GO 70692
// result := [ ] ;
70597: LD_ADDR_VAR 0 3
70601: PUSH
70602: EMPTY
70603: ST_TO_ADDR
// for un in units do
70604: LD_ADDR_VAR 0 4
70608: PUSH
70609: LD_VAR 0 1
70613: PUSH
70614: FOR_IN
70615: IFFALSE 70690
// if GetClass ( un ) = class then
70617: LD_VAR 0 4
70621: PPUSH
70622: CALL_OW 257
70626: PUSH
70627: LD_VAR 0 2
70631: EQUAL
70632: IFFALSE 70659
// result := Insert ( result , 1 , un ) else
70634: LD_ADDR_VAR 0 3
70638: PUSH
70639: LD_VAR 0 3
70643: PPUSH
70644: LD_INT 1
70646: PPUSH
70647: LD_VAR 0 4
70651: PPUSH
70652: CALL_OW 2
70656: ST_TO_ADDR
70657: GO 70688
// result := Replace ( result , result + 1 , un ) ;
70659: LD_ADDR_VAR 0 3
70663: PUSH
70664: LD_VAR 0 3
70668: PPUSH
70669: LD_VAR 0 3
70673: PUSH
70674: LD_INT 1
70676: PLUS
70677: PPUSH
70678: LD_VAR 0 4
70682: PPUSH
70683: CALL_OW 1
70687: ST_TO_ADDR
70688: GO 70614
70690: POP
70691: POP
// end ;
70692: LD_VAR 0 3
70696: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70697: LD_INT 0
70699: PPUSH
70700: PPUSH
70701: PPUSH
70702: PPUSH
70703: PPUSH
70704: PPUSH
70705: PPUSH
// result := [ ] ;
70706: LD_ADDR_VAR 0 4
70710: PUSH
70711: EMPTY
70712: ST_TO_ADDR
// if x - r < 0 then
70713: LD_VAR 0 1
70717: PUSH
70718: LD_VAR 0 3
70722: MINUS
70723: PUSH
70724: LD_INT 0
70726: LESS
70727: IFFALSE 70739
// min_x := 0 else
70729: LD_ADDR_VAR 0 8
70733: PUSH
70734: LD_INT 0
70736: ST_TO_ADDR
70737: GO 70755
// min_x := x - r ;
70739: LD_ADDR_VAR 0 8
70743: PUSH
70744: LD_VAR 0 1
70748: PUSH
70749: LD_VAR 0 3
70753: MINUS
70754: ST_TO_ADDR
// if y - r < 0 then
70755: LD_VAR 0 2
70759: PUSH
70760: LD_VAR 0 3
70764: MINUS
70765: PUSH
70766: LD_INT 0
70768: LESS
70769: IFFALSE 70781
// min_y := 0 else
70771: LD_ADDR_VAR 0 7
70775: PUSH
70776: LD_INT 0
70778: ST_TO_ADDR
70779: GO 70797
// min_y := y - r ;
70781: LD_ADDR_VAR 0 7
70785: PUSH
70786: LD_VAR 0 2
70790: PUSH
70791: LD_VAR 0 3
70795: MINUS
70796: ST_TO_ADDR
// max_x := x + r ;
70797: LD_ADDR_VAR 0 9
70801: PUSH
70802: LD_VAR 0 1
70806: PUSH
70807: LD_VAR 0 3
70811: PLUS
70812: ST_TO_ADDR
// max_y := y + r ;
70813: LD_ADDR_VAR 0 10
70817: PUSH
70818: LD_VAR 0 2
70822: PUSH
70823: LD_VAR 0 3
70827: PLUS
70828: ST_TO_ADDR
// for _x = min_x to max_x do
70829: LD_ADDR_VAR 0 5
70833: PUSH
70834: DOUBLE
70835: LD_VAR 0 8
70839: DEC
70840: ST_TO_ADDR
70841: LD_VAR 0 9
70845: PUSH
70846: FOR_TO
70847: IFFALSE 70948
// for _y = min_y to max_y do
70849: LD_ADDR_VAR 0 6
70853: PUSH
70854: DOUBLE
70855: LD_VAR 0 7
70859: DEC
70860: ST_TO_ADDR
70861: LD_VAR 0 10
70865: PUSH
70866: FOR_TO
70867: IFFALSE 70944
// begin if not ValidHex ( _x , _y ) then
70869: LD_VAR 0 5
70873: PPUSH
70874: LD_VAR 0 6
70878: PPUSH
70879: CALL_OW 488
70883: NOT
70884: IFFALSE 70888
// continue ;
70886: GO 70866
// if GetResourceTypeXY ( _x , _y ) then
70888: LD_VAR 0 5
70892: PPUSH
70893: LD_VAR 0 6
70897: PPUSH
70898: CALL_OW 283
70902: IFFALSE 70942
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70904: LD_ADDR_VAR 0 4
70908: PUSH
70909: LD_VAR 0 4
70913: PPUSH
70914: LD_VAR 0 4
70918: PUSH
70919: LD_INT 1
70921: PLUS
70922: PPUSH
70923: LD_VAR 0 5
70927: PUSH
70928: LD_VAR 0 6
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PPUSH
70937: CALL_OW 1
70941: ST_TO_ADDR
// end ;
70942: GO 70866
70944: POP
70945: POP
70946: GO 70846
70948: POP
70949: POP
// end ;
70950: LD_VAR 0 4
70954: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70955: LD_INT 0
70957: PPUSH
70958: PPUSH
70959: PPUSH
70960: PPUSH
70961: PPUSH
70962: PPUSH
70963: PPUSH
70964: PPUSH
// if not units then
70965: LD_VAR 0 1
70969: NOT
70970: IFFALSE 70974
// exit ;
70972: GO 71506
// result := UnitFilter ( units , [ f_ok ] ) ;
70974: LD_ADDR_VAR 0 3
70978: PUSH
70979: LD_VAR 0 1
70983: PPUSH
70984: LD_INT 50
70986: PUSH
70987: EMPTY
70988: LIST
70989: PPUSH
70990: CALL_OW 72
70994: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70995: LD_ADDR_VAR 0 8
70999: PUSH
71000: LD_VAR 0 1
71004: PUSH
71005: LD_INT 1
71007: ARRAY
71008: PPUSH
71009: CALL_OW 255
71013: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71014: LD_ADDR_VAR 0 10
71018: PUSH
71019: LD_INT 29
71021: PUSH
71022: LD_INT 91
71024: PUSH
71025: LD_INT 49
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: LIST
71032: ST_TO_ADDR
// if not result then
71033: LD_VAR 0 3
71037: NOT
71038: IFFALSE 71042
// exit ;
71040: GO 71506
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71042: LD_ADDR_VAR 0 5
71046: PUSH
71047: LD_INT 81
71049: PUSH
71050: LD_VAR 0 8
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PPUSH
71059: CALL_OW 69
71063: ST_TO_ADDR
// for i in result do
71064: LD_ADDR_VAR 0 4
71068: PUSH
71069: LD_VAR 0 3
71073: PUSH
71074: FOR_IN
71075: IFFALSE 71504
// begin tag := GetTag ( i ) + 1 ;
71077: LD_ADDR_VAR 0 9
71081: PUSH
71082: LD_VAR 0 4
71086: PPUSH
71087: CALL_OW 110
71091: PUSH
71092: LD_INT 1
71094: PLUS
71095: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
71096: LD_ADDR_VAR 0 7
71100: PUSH
71101: LD_VAR 0 4
71105: PPUSH
71106: CALL_OW 250
71110: PPUSH
71111: LD_VAR 0 4
71115: PPUSH
71116: CALL_OW 251
71120: PPUSH
71121: LD_INT 4
71123: PPUSH
71124: CALL 70697 0 3
71128: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
71129: LD_VAR 0 4
71133: PPUSH
71134: CALL_OW 247
71138: PUSH
71139: LD_INT 2
71141: EQUAL
71142: IFFALSE 71154
71144: PUSH
71145: LD_VAR 0 7
71149: PUSH
71150: LD_INT 2
71152: GREATER
71153: AND
71154: IFFALSE 71174
71156: PUSH
71157: LD_VAR 0 4
71161: PPUSH
71162: CALL_OW 264
71166: PUSH
71167: LD_VAR 0 10
71171: IN
71172: NOT
71173: AND
71174: IFFALSE 71213
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71176: LD_VAR 0 4
71180: PPUSH
71181: LD_VAR 0 7
71185: PUSH
71186: LD_INT 1
71188: ARRAY
71189: PUSH
71190: LD_INT 1
71192: ARRAY
71193: PPUSH
71194: LD_VAR 0 7
71198: PUSH
71199: LD_INT 1
71201: ARRAY
71202: PUSH
71203: LD_INT 2
71205: ARRAY
71206: PPUSH
71207: CALL_OW 116
71211: GO 71502
// if path > tag then
71213: LD_VAR 0 2
71217: PUSH
71218: LD_VAR 0 9
71222: GREATER
71223: IFFALSE 71431
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71225: LD_ADDR_VAR 0 6
71229: PUSH
71230: LD_VAR 0 5
71234: PPUSH
71235: LD_INT 91
71237: PUSH
71238: LD_VAR 0 4
71242: PUSH
71243: LD_INT 8
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: LIST
71250: PPUSH
71251: CALL_OW 72
71255: ST_TO_ADDR
// if nearEnemy then
71256: LD_VAR 0 6
71260: IFFALSE 71329
// begin if GetWeapon ( i ) = ru_time_lapser then
71262: LD_VAR 0 4
71266: PPUSH
71267: CALL_OW 264
71271: PUSH
71272: LD_INT 49
71274: EQUAL
71275: IFFALSE 71303
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71277: LD_VAR 0 4
71281: PPUSH
71282: LD_VAR 0 6
71286: PPUSH
71287: LD_VAR 0 4
71291: PPUSH
71292: CALL_OW 74
71296: PPUSH
71297: CALL_OW 112
71301: GO 71327
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71303: LD_VAR 0 4
71307: PPUSH
71308: LD_VAR 0 6
71312: PPUSH
71313: LD_VAR 0 4
71317: PPUSH
71318: CALL_OW 74
71322: PPUSH
71323: CALL 72587 0 2
// end else
71327: GO 71429
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71329: LD_VAR 0 4
71333: PPUSH
71334: LD_VAR 0 2
71338: PUSH
71339: LD_VAR 0 9
71343: ARRAY
71344: PUSH
71345: LD_INT 1
71347: ARRAY
71348: PPUSH
71349: LD_VAR 0 2
71353: PUSH
71354: LD_VAR 0 9
71358: ARRAY
71359: PUSH
71360: LD_INT 2
71362: ARRAY
71363: PPUSH
71364: CALL_OW 297
71368: PUSH
71369: LD_INT 6
71371: GREATER
71372: IFFALSE 71415
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71374: LD_VAR 0 4
71378: PPUSH
71379: LD_VAR 0 2
71383: PUSH
71384: LD_VAR 0 9
71388: ARRAY
71389: PUSH
71390: LD_INT 1
71392: ARRAY
71393: PPUSH
71394: LD_VAR 0 2
71398: PUSH
71399: LD_VAR 0 9
71403: ARRAY
71404: PUSH
71405: LD_INT 2
71407: ARRAY
71408: PPUSH
71409: CALL_OW 114
71413: GO 71429
// SetTag ( i , tag ) ;
71415: LD_VAR 0 4
71419: PPUSH
71420: LD_VAR 0 9
71424: PPUSH
71425: CALL_OW 109
// end else
71429: GO 71502
// if enemy then
71431: LD_VAR 0 5
71435: IFFALSE 71502
// begin if GetWeapon ( i ) = ru_time_lapser then
71437: LD_VAR 0 4
71441: PPUSH
71442: CALL_OW 264
71446: PUSH
71447: LD_INT 49
71449: EQUAL
71450: IFFALSE 71478
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71452: LD_VAR 0 4
71456: PPUSH
71457: LD_VAR 0 5
71461: PPUSH
71462: LD_VAR 0 4
71466: PPUSH
71467: CALL_OW 74
71471: PPUSH
71472: CALL_OW 112
71476: GO 71502
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71478: LD_VAR 0 4
71482: PPUSH
71483: LD_VAR 0 5
71487: PPUSH
71488: LD_VAR 0 4
71492: PPUSH
71493: CALL_OW 74
71497: PPUSH
71498: CALL 72587 0 2
// end ; end ;
71502: GO 71074
71504: POP
71505: POP
// end ;
71506: LD_VAR 0 3
71510: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71511: LD_INT 0
71513: PPUSH
71514: PPUSH
71515: PPUSH
// if not unit or IsInUnit ( unit ) then
71516: LD_VAR 0 1
71520: NOT
71521: IFTRUE 71534
71523: PUSH
71524: LD_VAR 0 1
71528: PPUSH
71529: CALL_OW 310
71533: OR
71534: IFFALSE 71538
// exit ;
71536: GO 71629
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71538: LD_ADDR_VAR 0 4
71542: PUSH
71543: LD_VAR 0 1
71547: PPUSH
71548: CALL_OW 250
71552: PPUSH
71553: LD_VAR 0 2
71557: PPUSH
71558: LD_INT 1
71560: PPUSH
71561: CALL_OW 272
71565: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71566: LD_ADDR_VAR 0 5
71570: PUSH
71571: LD_VAR 0 1
71575: PPUSH
71576: CALL_OW 251
71580: PPUSH
71581: LD_VAR 0 2
71585: PPUSH
71586: LD_INT 1
71588: PPUSH
71589: CALL_OW 273
71593: ST_TO_ADDR
// if ValidHex ( x , y ) then
71594: LD_VAR 0 4
71598: PPUSH
71599: LD_VAR 0 5
71603: PPUSH
71604: CALL_OW 488
71608: IFFALSE 71629
// ComTurnXY ( unit , x , y ) ;
71610: LD_VAR 0 1
71614: PPUSH
71615: LD_VAR 0 4
71619: PPUSH
71620: LD_VAR 0 5
71624: PPUSH
71625: CALL_OW 118
// end ;
71629: LD_VAR 0 3
71633: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71634: LD_INT 0
71636: PPUSH
71637: PPUSH
// result := false ;
71638: LD_ADDR_VAR 0 3
71642: PUSH
71643: LD_INT 0
71645: ST_TO_ADDR
// if not units then
71646: LD_VAR 0 2
71650: NOT
71651: IFFALSE 71655
// exit ;
71653: GO 71700
// for i in units do
71655: LD_ADDR_VAR 0 4
71659: PUSH
71660: LD_VAR 0 2
71664: PUSH
71665: FOR_IN
71666: IFFALSE 71698
// if See ( side , i ) then
71668: LD_VAR 0 1
71672: PPUSH
71673: LD_VAR 0 4
71677: PPUSH
71678: CALL_OW 292
71682: IFFALSE 71696
// begin result := true ;
71684: LD_ADDR_VAR 0 3
71688: PUSH
71689: LD_INT 1
71691: ST_TO_ADDR
// exit ;
71692: POP
71693: POP
71694: GO 71700
// end ;
71696: GO 71665
71698: POP
71699: POP
// end ;
71700: LD_VAR 0 3
71704: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71705: LD_INT 0
71707: PPUSH
71708: PPUSH
71709: PPUSH
71710: PPUSH
// if not unit or not points then
71711: LD_VAR 0 1
71715: NOT
71716: IFTRUE 71725
71718: PUSH
71719: LD_VAR 0 2
71723: NOT
71724: OR
71725: IFFALSE 71729
// exit ;
71727: GO 71819
// dist := 99999 ;
71729: LD_ADDR_VAR 0 5
71733: PUSH
71734: LD_INT 99999
71736: ST_TO_ADDR
// for i in points do
71737: LD_ADDR_VAR 0 4
71741: PUSH
71742: LD_VAR 0 2
71746: PUSH
71747: FOR_IN
71748: IFFALSE 71817
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71750: LD_ADDR_VAR 0 6
71754: PUSH
71755: LD_VAR 0 1
71759: PPUSH
71760: LD_VAR 0 4
71764: PUSH
71765: LD_INT 1
71767: ARRAY
71768: PPUSH
71769: LD_VAR 0 4
71773: PUSH
71774: LD_INT 2
71776: ARRAY
71777: PPUSH
71778: CALL_OW 297
71782: ST_TO_ADDR
// if tmpDist < dist then
71783: LD_VAR 0 6
71787: PUSH
71788: LD_VAR 0 5
71792: LESS
71793: IFFALSE 71815
// begin result := i ;
71795: LD_ADDR_VAR 0 3
71799: PUSH
71800: LD_VAR 0 4
71804: ST_TO_ADDR
// dist := tmpDist ;
71805: LD_ADDR_VAR 0 5
71809: PUSH
71810: LD_VAR 0 6
71814: ST_TO_ADDR
// end ; end ;
71815: GO 71747
71817: POP
71818: POP
// end ;
71819: LD_VAR 0 3
71823: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71824: LD_INT 0
71826: PPUSH
// uc_side := side ;
71827: LD_ADDR_OWVAR 20
71831: PUSH
71832: LD_VAR 0 1
71836: ST_TO_ADDR
// uc_nation := 3 ;
71837: LD_ADDR_OWVAR 21
71841: PUSH
71842: LD_INT 3
71844: ST_TO_ADDR
// vc_chassis := 25 ;
71845: LD_ADDR_OWVAR 37
71849: PUSH
71850: LD_INT 25
71852: ST_TO_ADDR
// vc_engine := engine_siberite ;
71853: LD_ADDR_OWVAR 39
71857: PUSH
71858: LD_INT 3
71860: ST_TO_ADDR
// vc_control := control_computer ;
71861: LD_ADDR_OWVAR 38
71865: PUSH
71866: LD_INT 3
71868: ST_TO_ADDR
// vc_weapon := 59 ;
71869: LD_ADDR_OWVAR 40
71873: PUSH
71874: LD_INT 59
71876: ST_TO_ADDR
// result := CreateVehicle ;
71877: LD_ADDR_VAR 0 5
71881: PUSH
71882: CALL_OW 45
71886: ST_TO_ADDR
// SetDir ( result , d ) ;
71887: LD_VAR 0 5
71891: PPUSH
71892: LD_VAR 0 4
71896: PPUSH
71897: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71901: LD_VAR 0 5
71905: PPUSH
71906: LD_VAR 0 2
71910: PPUSH
71911: LD_VAR 0 3
71915: PPUSH
71916: LD_INT 0
71918: PPUSH
71919: CALL_OW 48
// end ;
71923: LD_VAR 0 5
71927: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71928: LD_INT 0
71930: PPUSH
71931: PPUSH
71932: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71933: LD_ADDR_VAR 0 2
71937: PUSH
71938: LD_INT 0
71940: PUSH
71941: LD_INT 0
71943: PUSH
71944: LD_INT 0
71946: PUSH
71947: LD_INT 0
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71956: LD_VAR 0 1
71960: NOT
71961: IFTRUE 71994
71963: PUSH
71964: LD_VAR 0 1
71968: PPUSH
71969: CALL_OW 264
71973: PUSH
71974: LD_INT 12
71976: PUSH
71977: LD_INT 51
71979: PUSH
71980: LD_INT 32
71982: PUSH
71983: LD_INT 89
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: IN
71992: NOT
71993: OR
71994: IFFALSE 71998
// exit ;
71996: GO 72096
// for i := 1 to 3 do
71998: LD_ADDR_VAR 0 3
72002: PUSH
72003: DOUBLE
72004: LD_INT 1
72006: DEC
72007: ST_TO_ADDR
72008: LD_INT 3
72010: PUSH
72011: FOR_TO
72012: IFFALSE 72094
// begin tmp := GetCargo ( cargo , i ) ;
72014: LD_ADDR_VAR 0 4
72018: PUSH
72019: LD_VAR 0 1
72023: PPUSH
72024: LD_VAR 0 3
72028: PPUSH
72029: CALL_OW 289
72033: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72034: LD_ADDR_VAR 0 2
72038: PUSH
72039: LD_VAR 0 2
72043: PPUSH
72044: LD_VAR 0 3
72048: PPUSH
72049: LD_VAR 0 4
72053: PPUSH
72054: CALL_OW 1
72058: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72059: LD_ADDR_VAR 0 2
72063: PUSH
72064: LD_VAR 0 2
72068: PPUSH
72069: LD_INT 4
72071: PPUSH
72072: LD_VAR 0 2
72076: PUSH
72077: LD_INT 4
72079: ARRAY
72080: PUSH
72081: LD_VAR 0 4
72085: PLUS
72086: PPUSH
72087: CALL_OW 1
72091: ST_TO_ADDR
// end ;
72092: GO 72011
72094: POP
72095: POP
// end ;
72096: LD_VAR 0 2
72100: RET
// export function Length ( array ) ; begin
72101: LD_INT 0
72103: PPUSH
// result := array + 0 ;
72104: LD_ADDR_VAR 0 2
72108: PUSH
72109: LD_VAR 0 1
72113: PUSH
72114: LD_INT 0
72116: PLUS
72117: ST_TO_ADDR
// end ;
72118: LD_VAR 0 2
72122: RET
// export function PrepareArray ( array ) ; begin
72123: LD_INT 0
72125: PPUSH
// result := array diff 0 ;
72126: LD_ADDR_VAR 0 2
72130: PUSH
72131: LD_VAR 0 1
72135: PUSH
72136: LD_INT 0
72138: DIFF
72139: ST_TO_ADDR
// if not result [ 1 ] then
72140: LD_VAR 0 2
72144: PUSH
72145: LD_INT 1
72147: ARRAY
72148: NOT
72149: IFFALSE 72169
// result := Delete ( result , 1 ) ;
72151: LD_ADDR_VAR 0 2
72155: PUSH
72156: LD_VAR 0 2
72160: PPUSH
72161: LD_INT 1
72163: PPUSH
72164: CALL_OW 3
72168: ST_TO_ADDR
// end ;
72169: LD_VAR 0 2
72173: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72174: LD_INT 0
72176: PPUSH
72177: PPUSH
72178: PPUSH
72179: PPUSH
// sibRocketRange := 25 ;
72180: LD_ADDR_VAR 0 6
72184: PUSH
72185: LD_INT 25
72187: ST_TO_ADDR
// result := false ;
72188: LD_ADDR_VAR 0 4
72192: PUSH
72193: LD_INT 0
72195: ST_TO_ADDR
// for i := 0 to 5 do
72196: LD_ADDR_VAR 0 5
72200: PUSH
72201: DOUBLE
72202: LD_INT 0
72204: DEC
72205: ST_TO_ADDR
72206: LD_INT 5
72208: PUSH
72209: FOR_TO
72210: IFFALSE 72277
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72212: LD_VAR 0 1
72216: PPUSH
72217: LD_VAR 0 5
72221: PPUSH
72222: LD_VAR 0 6
72226: PPUSH
72227: CALL_OW 272
72231: PPUSH
72232: LD_VAR 0 2
72236: PPUSH
72237: LD_VAR 0 5
72241: PPUSH
72242: LD_VAR 0 6
72246: PPUSH
72247: CALL_OW 273
72251: PPUSH
72252: LD_VAR 0 3
72256: PPUSH
72257: CALL_OW 309
72261: IFFALSE 72275
// begin result := true ;
72263: LD_ADDR_VAR 0 4
72267: PUSH
72268: LD_INT 1
72270: ST_TO_ADDR
// exit ;
72271: POP
72272: POP
72273: GO 72279
// end ;
72275: GO 72209
72277: POP
72278: POP
// end ;
72279: LD_VAR 0 4
72283: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
72284: LD_INT 0
72286: PPUSH
72287: PPUSH
72288: PPUSH
// if btype = b_depot then
72289: LD_VAR 0 2
72293: PUSH
72294: LD_INT 0
72296: EQUAL
72297: IFFALSE 72309
// begin result := true ;
72299: LD_ADDR_VAR 0 3
72303: PUSH
72304: LD_INT 1
72306: ST_TO_ADDR
// exit ;
72307: GO 72429
// end ; pom := GetBase ( depot ) ;
72309: LD_ADDR_VAR 0 4
72313: PUSH
72314: LD_VAR 0 1
72318: PPUSH
72319: CALL_OW 274
72323: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
72324: LD_ADDR_VAR 0 5
72328: PUSH
72329: LD_VAR 0 2
72333: PPUSH
72334: LD_VAR 0 1
72338: PPUSH
72339: CALL_OW 248
72343: PPUSH
72344: CALL_OW 450
72348: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72349: LD_ADDR_VAR 0 3
72353: PUSH
72354: LD_VAR 0 4
72358: PPUSH
72359: LD_INT 1
72361: PPUSH
72362: CALL_OW 275
72366: PUSH
72367: LD_VAR 0 5
72371: PUSH
72372: LD_INT 1
72374: ARRAY
72375: GREATEREQUAL
72376: IFFALSE 72402
72378: PUSH
72379: LD_VAR 0 4
72383: PPUSH
72384: LD_INT 2
72386: PPUSH
72387: CALL_OW 275
72391: PUSH
72392: LD_VAR 0 5
72396: PUSH
72397: LD_INT 2
72399: ARRAY
72400: GREATEREQUAL
72401: AND
72402: IFFALSE 72428
72404: PUSH
72405: LD_VAR 0 4
72409: PPUSH
72410: LD_INT 3
72412: PPUSH
72413: CALL_OW 275
72417: PUSH
72418: LD_VAR 0 5
72422: PUSH
72423: LD_INT 3
72425: ARRAY
72426: GREATEREQUAL
72427: AND
72428: ST_TO_ADDR
// end ;
72429: LD_VAR 0 3
72433: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72434: LD_INT 0
72436: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72437: LD_VAR 0 1
72441: PPUSH
72442: LD_VAR 0 2
72446: PPUSH
72447: LD_INT 0
72449: PPUSH
72450: LD_INT 0
72452: PPUSH
72453: LD_INT 1
72455: PPUSH
72456: LD_INT 0
72458: PPUSH
72459: CALL_OW 587
// end ;
72463: LD_VAR 0 3
72467: RET
// export function CenterOnNow ( unit ) ; begin
72468: LD_INT 0
72470: PPUSH
// result := IsInUnit ( unit ) ;
72471: LD_ADDR_VAR 0 2
72475: PUSH
72476: LD_VAR 0 1
72480: PPUSH
72481: CALL_OW 310
72485: ST_TO_ADDR
// if not result then
72486: LD_VAR 0 2
72490: NOT
72491: IFFALSE 72503
// result := unit ;
72493: LD_ADDR_VAR 0 2
72497: PUSH
72498: LD_VAR 0 1
72502: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72503: LD_VAR 0 1
72507: PPUSH
72508: CALL_OW 87
// end ;
72512: LD_VAR 0 2
72516: RET
// export function ComMoveHex ( unit , hex ) ; begin
72517: LD_INT 0
72519: PPUSH
// if not hex then
72520: LD_VAR 0 2
72524: NOT
72525: IFFALSE 72529
// exit ;
72527: GO 72582
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72529: LD_VAR 0 2
72533: PUSH
72534: LD_INT 1
72536: ARRAY
72537: PPUSH
72538: LD_VAR 0 2
72542: PUSH
72543: LD_INT 2
72545: ARRAY
72546: PPUSH
72547: CALL_OW 428
72551: IFFALSE 72555
// exit ;
72553: GO 72582
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72555: LD_VAR 0 1
72559: PPUSH
72560: LD_VAR 0 2
72564: PUSH
72565: LD_INT 1
72567: ARRAY
72568: PPUSH
72569: LD_VAR 0 2
72573: PUSH
72574: LD_INT 2
72576: ARRAY
72577: PPUSH
72578: CALL_OW 111
// end ;
72582: LD_VAR 0 3
72586: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72587: LD_INT 0
72589: PPUSH
72590: PPUSH
72591: PPUSH
// if not unit or not enemy then
72592: LD_VAR 0 1
72596: NOT
72597: IFTRUE 72606
72599: PUSH
72600: LD_VAR 0 2
72604: NOT
72605: OR
72606: IFFALSE 72610
// exit ;
72608: GO 72736
// x := GetX ( enemy ) ;
72610: LD_ADDR_VAR 0 4
72614: PUSH
72615: LD_VAR 0 2
72619: PPUSH
72620: CALL_OW 250
72624: ST_TO_ADDR
// y := GetY ( enemy ) ;
72625: LD_ADDR_VAR 0 5
72629: PUSH
72630: LD_VAR 0 2
72634: PPUSH
72635: CALL_OW 251
72639: ST_TO_ADDR
// if ValidHex ( x , y ) then
72640: LD_VAR 0 4
72644: PPUSH
72645: LD_VAR 0 5
72649: PPUSH
72650: CALL_OW 488
72654: IFFALSE 72736
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72656: LD_VAR 0 2
72660: PPUSH
72661: CALL_OW 247
72665: PUSH
72666: LD_INT 3
72668: PUSH
72669: LD_INT 2
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: IN
72676: IFTRUE 72699
72678: PUSH
72679: LD_VAR 0 1
72683: PPUSH
72684: CALL_OW 255
72688: PPUSH
72689: LD_VAR 0 2
72693: PPUSH
72694: CALL_OW 292
72698: OR
72699: IFFALSE 72717
// ComAttackUnit ( unit , enemy ) else
72701: LD_VAR 0 1
72705: PPUSH
72706: LD_VAR 0 2
72710: PPUSH
72711: CALL_OW 115
72715: GO 72736
// ComAgressiveMove ( unit , x , y ) ;
72717: LD_VAR 0 1
72721: PPUSH
72722: LD_VAR 0 4
72726: PPUSH
72727: LD_VAR 0 5
72731: PPUSH
72732: CALL_OW 114
// end ;
72736: LD_VAR 0 3
72740: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72741: LD_INT 0
72743: PPUSH
72744: PPUSH
72745: PPUSH
// list := AreaToList ( area , 0 ) ;
72746: LD_ADDR_VAR 0 5
72750: PUSH
72751: LD_VAR 0 1
72755: PPUSH
72756: LD_INT 0
72758: PPUSH
72759: CALL_OW 517
72763: ST_TO_ADDR
// if not list then
72764: LD_VAR 0 5
72768: NOT
72769: IFFALSE 72773
// exit ;
72771: GO 72903
// if all then
72773: LD_VAR 0 2
72777: IFFALSE 72865
// begin for i := 1 to list [ 1 ] do
72779: LD_ADDR_VAR 0 4
72783: PUSH
72784: DOUBLE
72785: LD_INT 1
72787: DEC
72788: ST_TO_ADDR
72789: LD_VAR 0 5
72793: PUSH
72794: LD_INT 1
72796: ARRAY
72797: PUSH
72798: FOR_TO
72799: IFFALSE 72861
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
72801: LD_ADDR_VAR 0 3
72805: PUSH
72806: LD_VAR 0 3
72810: PPUSH
72811: LD_VAR 0 3
72815: PUSH
72816: LD_INT 1
72818: PLUS
72819: PPUSH
72820: LD_VAR 0 5
72824: PUSH
72825: LD_INT 1
72827: ARRAY
72828: PUSH
72829: LD_VAR 0 4
72833: ARRAY
72834: PUSH
72835: LD_VAR 0 5
72839: PUSH
72840: LD_INT 2
72842: ARRAY
72843: PUSH
72844: LD_VAR 0 4
72848: ARRAY
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: PPUSH
72854: CALL_OW 1
72858: ST_TO_ADDR
72859: GO 72798
72861: POP
72862: POP
// exit ;
72863: GO 72903
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
72865: LD_ADDR_VAR 0 3
72869: PUSH
72870: LD_VAR 0 5
72874: PUSH
72875: LD_INT 1
72877: ARRAY
72878: PUSH
72879: LD_INT 1
72881: ARRAY
72882: PUSH
72883: LD_VAR 0 5
72887: PUSH
72888: LD_INT 2
72890: ARRAY
72891: PUSH
72892: LD_INT 1
72894: ARRAY
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: EMPTY
72901: LIST
72902: ST_TO_ADDR
// end ;
72903: LD_VAR 0 3
72907: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
72908: LD_INT 0
72910: PPUSH
72911: PPUSH
// list := AreaToList ( area , 0 ) ;
72912: LD_ADDR_VAR 0 4
72916: PUSH
72917: LD_VAR 0 1
72921: PPUSH
72922: LD_INT 0
72924: PPUSH
72925: CALL_OW 517
72929: ST_TO_ADDR
// if not list then
72930: LD_VAR 0 4
72934: NOT
72935: IFFALSE 72939
// exit ;
72937: GO 72980
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
72939: LD_ADDR_VAR 0 3
72943: PUSH
72944: LD_VAR 0 4
72948: PUSH
72949: LD_INT 1
72951: ARRAY
72952: PUSH
72953: LD_INT 1
72955: ARRAY
72956: PUSH
72957: LD_VAR 0 4
72961: PUSH
72962: LD_INT 2
72964: ARRAY
72965: PUSH
72966: LD_INT 1
72968: ARRAY
72969: PUSH
72970: LD_VAR 0 2
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: LIST
72979: ST_TO_ADDR
// end ;
72980: LD_VAR 0 3
72984: RET
// export function First ( array ) ; begin
72985: LD_INT 0
72987: PPUSH
// if not array then
72988: LD_VAR 0 1
72992: NOT
72993: IFFALSE 72997
// exit ;
72995: GO 73011
// result := array [ 1 ] ;
72997: LD_ADDR_VAR 0 2
73001: PUSH
73002: LD_VAR 0 1
73006: PUSH
73007: LD_INT 1
73009: ARRAY
73010: ST_TO_ADDR
// end ;
73011: LD_VAR 0 2
73015: RET
// export function Last ( array ) ; begin
73016: LD_INT 0
73018: PPUSH
// if not array then
73019: LD_VAR 0 1
73023: NOT
73024: IFFALSE 73028
// exit ;
73026: GO 73044
// result := array [ array ] ;
73028: LD_ADDR_VAR 0 2
73032: PUSH
73033: LD_VAR 0 1
73037: PUSH
73038: LD_VAR 0 1
73042: ARRAY
73043: ST_TO_ADDR
// end ;
73044: LD_VAR 0 2
73048: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73049: LD_INT 0
73051: PPUSH
73052: PPUSH
// result := [ ] ;
73053: LD_ADDR_VAR 0 5
73057: PUSH
73058: EMPTY
73059: ST_TO_ADDR
// if not array then
73060: LD_VAR 0 1
73064: NOT
73065: IFFALSE 73069
// exit ;
73067: GO 73181
// for i := 1 to array do
73069: LD_ADDR_VAR 0 6
73073: PUSH
73074: DOUBLE
73075: LD_INT 1
73077: DEC
73078: ST_TO_ADDR
73079: LD_VAR 0 1
73083: PUSH
73084: FOR_TO
73085: IFFALSE 73179
// if array [ i ] [ index ] = value then
73087: LD_VAR 0 1
73091: PUSH
73092: LD_VAR 0 6
73096: ARRAY
73097: PUSH
73098: LD_VAR 0 2
73102: ARRAY
73103: PUSH
73104: LD_VAR 0 3
73108: EQUAL
73109: IFFALSE 73177
// begin if indexColumn then
73111: LD_VAR 0 4
73115: IFFALSE 73151
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73117: LD_ADDR_VAR 0 5
73121: PUSH
73122: LD_VAR 0 5
73126: PPUSH
73127: LD_VAR 0 1
73131: PUSH
73132: LD_VAR 0 6
73136: ARRAY
73137: PUSH
73138: LD_VAR 0 4
73142: ARRAY
73143: PPUSH
73144: CALL 68189 0 2
73148: ST_TO_ADDR
73149: GO 73177
// result := Join ( result , array [ i ] ) ;
73151: LD_ADDR_VAR 0 5
73155: PUSH
73156: LD_VAR 0 5
73160: PPUSH
73161: LD_VAR 0 1
73165: PUSH
73166: LD_VAR 0 6
73170: ARRAY
73171: PPUSH
73172: CALL 68189 0 2
73176: ST_TO_ADDR
// end ;
73177: GO 73084
73179: POP
73180: POP
// end ;
73181: LD_VAR 0 5
73185: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73186: LD_INT 0
73188: PPUSH
// if not vehicles or not parkingPoint then
73189: LD_VAR 0 1
73193: NOT
73194: IFTRUE 73203
73196: PUSH
73197: LD_VAR 0 2
73201: NOT
73202: OR
73203: IFFALSE 73207
// exit ;
73205: GO 73305
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73207: LD_ADDR_VAR 0 1
73211: PUSH
73212: LD_VAR 0 1
73216: PPUSH
73217: LD_INT 50
73219: PUSH
73220: EMPTY
73221: LIST
73222: PUSH
73223: LD_INT 3
73225: PUSH
73226: LD_INT 92
73228: PUSH
73229: LD_VAR 0 2
73233: PUSH
73234: LD_INT 1
73236: ARRAY
73237: PUSH
73238: LD_VAR 0 2
73242: PUSH
73243: LD_INT 2
73245: ARRAY
73246: PUSH
73247: LD_INT 8
73249: PUSH
73250: EMPTY
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: EMPTY
73261: LIST
73262: LIST
73263: PPUSH
73264: CALL_OW 72
73268: ST_TO_ADDR
// if not vehicles then
73269: LD_VAR 0 1
73273: NOT
73274: IFFALSE 73278
// exit ;
73276: GO 73305
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
73278: LD_VAR 0 1
73282: PPUSH
73283: LD_VAR 0 2
73287: PUSH
73288: LD_INT 1
73290: ARRAY
73291: PPUSH
73292: LD_VAR 0 2
73296: PUSH
73297: LD_INT 2
73299: ARRAY
73300: PPUSH
73301: CALL_OW 111
// end ;
73305: LD_VAR 0 3
73309: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
73310: LD_INT 0
73312: PPUSH
73313: PPUSH
73314: PPUSH
// if not side or not area then
73315: LD_VAR 0 1
73319: NOT
73320: IFTRUE 73329
73322: PUSH
73323: LD_VAR 0 2
73327: NOT
73328: OR
73329: IFFALSE 73333
// exit ;
73331: GO 73452
// tmp := AreaToList ( area , 0 ) ;
73333: LD_ADDR_VAR 0 5
73337: PUSH
73338: LD_VAR 0 2
73342: PPUSH
73343: LD_INT 0
73345: PPUSH
73346: CALL_OW 517
73350: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73351: LD_ADDR_VAR 0 4
73355: PUSH
73356: DOUBLE
73357: LD_INT 1
73359: DEC
73360: ST_TO_ADDR
73361: LD_VAR 0 5
73365: PUSH
73366: LD_INT 1
73368: ARRAY
73369: PUSH
73370: FOR_TO
73371: IFFALSE 73450
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
73373: LD_VAR 0 5
73377: PUSH
73378: LD_INT 1
73380: ARRAY
73381: PUSH
73382: LD_VAR 0 4
73386: ARRAY
73387: PPUSH
73388: LD_VAR 0 5
73392: PUSH
73393: LD_INT 2
73395: ARRAY
73396: PUSH
73397: LD_VAR 0 4
73401: ARRAY
73402: PPUSH
73403: CALL_OW 351
73407: IFFALSE 73448
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73409: LD_VAR 0 5
73413: PUSH
73414: LD_INT 1
73416: ARRAY
73417: PUSH
73418: LD_VAR 0 4
73422: ARRAY
73423: PPUSH
73424: LD_VAR 0 5
73428: PUSH
73429: LD_INT 2
73431: ARRAY
73432: PUSH
73433: LD_VAR 0 4
73437: ARRAY
73438: PPUSH
73439: LD_VAR 0 1
73443: PPUSH
73444: CALL_OW 244
// end ;
73448: GO 73370
73450: POP
73451: POP
// end ;
73452: LD_VAR 0 3
73456: RET
// export function UniqueArray ( array ) ; var i ; begin
73457: LD_INT 0
73459: PPUSH
73460: PPUSH
// result := [ ] ;
73461: LD_ADDR_VAR 0 2
73465: PUSH
73466: EMPTY
73467: ST_TO_ADDR
// if not array then
73468: LD_VAR 0 1
73472: NOT
73473: IFFALSE 73477
// exit ;
73475: GO 73538
// for i := 1 to array do
73477: LD_ADDR_VAR 0 3
73481: PUSH
73482: DOUBLE
73483: LD_INT 1
73485: DEC
73486: ST_TO_ADDR
73487: LD_VAR 0 1
73491: PUSH
73492: FOR_TO
73493: IFFALSE 73536
// if not array [ i ] in result then
73495: LD_VAR 0 1
73499: PUSH
73500: LD_VAR 0 3
73504: ARRAY
73505: PUSH
73506: LD_VAR 0 2
73510: IN
73511: NOT
73512: IFFALSE 73534
// result := Join ( result , i ) ;
73514: LD_ADDR_VAR 0 2
73518: PUSH
73519: LD_VAR 0 2
73523: PPUSH
73524: LD_VAR 0 3
73528: PPUSH
73529: CALL 68189 0 2
73533: ST_TO_ADDR
73534: GO 73492
73536: POP
73537: POP
// end ; end_of_file
73538: LD_VAR 0 2
73542: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73543: LD_VAR 0 1
73547: PUSH
73548: LD_INT 200
73550: DOUBLE
73551: GREATEREQUAL
73552: IFFALSE 73560
73554: LD_INT 299
73556: DOUBLE
73557: LESSEQUAL
73558: IFTRUE 73562
73560: GO 73594
73562: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73563: LD_VAR 0 1
73567: PPUSH
73568: LD_VAR 0 2
73572: PPUSH
73573: LD_VAR 0 3
73577: PPUSH
73578: LD_VAR 0 4
73582: PPUSH
73583: LD_VAR 0 5
73587: PPUSH
73588: CALL 24375 0 5
73592: GO 73671
73594: LD_INT 300
73596: DOUBLE
73597: GREATEREQUAL
73598: IFFALSE 73606
73600: LD_INT 399
73602: DOUBLE
73603: LESSEQUAL
73604: IFTRUE 73608
73606: GO 73670
73608: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73609: LD_VAR 0 1
73613: PPUSH
73614: LD_VAR 0 2
73618: PPUSH
73619: LD_VAR 0 3
73623: PPUSH
73624: LD_VAR 0 4
73628: PPUSH
73629: LD_VAR 0 5
73633: PPUSH
73634: LD_VAR 0 6
73638: PPUSH
73639: LD_VAR 0 7
73643: PPUSH
73644: LD_VAR 0 8
73648: PPUSH
73649: LD_VAR 0 9
73653: PPUSH
73654: LD_VAR 0 10
73658: PPUSH
73659: LD_VAR 0 11
73663: PPUSH
73664: CALL 20178 0 11
73668: GO 73671
73670: POP
// end ;
73671: PPOPN 11
73673: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73674: LD_VAR 0 1
73678: PPUSH
73679: LD_VAR 0 2
73683: PPUSH
73684: LD_VAR 0 3
73688: PPUSH
73689: LD_VAR 0 4
73693: PPUSH
73694: LD_VAR 0 5
73698: PPUSH
73699: CALL 23675 0 5
// end ; end_of_file
73703: PPOPN 5
73705: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73706: LD_VAR 0 1
73710: PPUSH
73711: LD_VAR 0 2
73715: PPUSH
73716: LD_VAR 0 3
73720: PPUSH
73721: LD_VAR 0 4
73725: PPUSH
73726: LD_VAR 0 5
73730: PPUSH
73731: LD_VAR 0 6
73735: PPUSH
73736: CALL 7718 0 6
// end ;
73740: PPOPN 6
73742: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73743: LD_INT 0
73745: PPUSH
// begin if not units then
73746: LD_VAR 0 1
73750: NOT
73751: IFFALSE 73755
// exit ;
73753: GO 73789
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
73755: LD_VAR 0 1
73759: PPUSH
73760: LD_VAR 0 2
73764: PPUSH
73765: LD_VAR 0 3
73769: PPUSH
73770: LD_VAR 0 4
73774: PPUSH
73775: LD_VAR 0 5
73779: PPUSH
73780: LD_VAR 0 6
73784: PPUSH
73785: CALL 29972 0 6
// end ;
73789: PPOPN 7
73791: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73792: CALL 7605 0 0
// end ;
73796: PPOPN 1
73798: END
