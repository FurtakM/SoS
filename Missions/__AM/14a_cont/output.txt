// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 61516 0 9
// PrepareAmerican ;
  46: CALL 4099 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 923 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 27359 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 27359 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 27359 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 451
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 413
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 411
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: PUSH
 366: LD_VAR 0 3
 370: PPUSH
 371: CALL_OW 258
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: AND
 380: PUSH
 381: LD_VAR 0 3
 385: PPUSH
 386: CALL_OW 248
 390: PUSH
 391: LD_INT 3
 393: EQUAL
 394: AND
 395: IFFALSE 409
// begin RuSci := i ;
 397: LD_ADDR_EXP 17
 401: PUSH
 402: LD_VAR 0 3
 406: ST_TO_ADDR
// break ;
 407: GO 411
// end ;
 409: GO 349
 411: POP
 412: POP
// end ; if not RuSci then
 413: LD_EXP 17
 417: NOT
 418: IFFALSE 451
// begin uc_nation := 3 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 3
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 4
 433: PPUSH
 434: LD_INT 10
 436: PPUSH
 437: CALL_OW 380
// RuSci := CreateHuman ;
 441: LD_ADDR_EXP 17
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 451: LD_ADDR_VAR 0 6
 455: PUSH
 456: LD_STRING 14a_JMMVeh
 458: PPUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 30
 489: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 490: LD_ADDR_VAR 0 7
 494: PUSH
 495: LD_STRING 14a_BurlakVeh
 497: PPUSH
 498: LD_INT 22
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 1
 506: PUSH
 507: LD_INT 51
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 30
 528: ST_TO_ADDR
// uc_direction := 4 ;
 529: LD_ADDR_OWVAR 24
 533: PUSH
 534: LD_INT 4
 536: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 6
 549: ARRAY
 550: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 551: LD_VAR 0 6
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_VAR 0 6
 564: PUSH
 565: LD_INT 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 6
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 6
 582: PUSH
 583: LD_INT 4
 585: ARRAY
 586: PPUSH
 587: LD_INT 60
 589: PPUSH
 590: LD_INT 80
 592: PPUSH
 593: CALL_OW 12
 597: PPUSH
 598: CALL 32374 0 5
// JMMVeh := CreateVehicle ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: CALL_OW 45
 611: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 63744 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 627: LD_VAR 0 6
 631: PUSH
 632: LD_INT 5
 634: ARRAY
 635: PUSH
 636: LD_INT 0
 638: NONEQUAL
 639: IFFALSE 659
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 6
 650: PUSH
 651: LD_INT 5
 653: ARRAY
 654: PPUSH
 655: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 659: LD_EXP 14
 663: PPUSH
 664: LD_VAR 0 4
 668: PPUSH
 669: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 673: LD_ADDR_OWVAR 21
 677: PUSH
 678: LD_VAR 0 7
 682: PUSH
 683: LD_INT 6
 685: ARRAY
 686: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 687: LD_VAR 0 7
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: PPUSH
 696: LD_VAR 0 7
 700: PUSH
 701: LD_INT 2
 703: ARRAY
 704: PPUSH
 705: LD_VAR 0 7
 709: PUSH
 710: LD_INT 3
 712: ARRAY
 713: PPUSH
 714: LD_VAR 0 7
 718: PUSH
 719: LD_INT 4
 721: ARRAY
 722: PPUSH
 723: LD_INT 60
 725: PPUSH
 726: LD_INT 80
 728: PPUSH
 729: CALL_OW 12
 733: PPUSH
 734: CALL 32374 0 5
// BurlakVeh := CreateVehicle ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 748: LD_VAR 0 5
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 63744 0 3
 763: NOT
 764: IFFALSE 784
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 766: LD_VAR 0 5
 770: PPUSH
 771: LD_INT 233
 773: PPUSH
 774: LD_INT 85
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 784: LD_VAR 0 7
 788: PUSH
 789: LD_INT 5
 791: ARRAY
 792: PUSH
 793: LD_INT 0
 795: NONEQUAL
 796: IFFALSE 816
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_VAR 0 7
 807: PUSH
 808: LD_INT 5
 810: ARRAY
 811: PPUSH
 812: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 816: LD_EXP 15
 820: PPUSH
 821: LD_VAR 0 5
 825: PPUSH
 826: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_INT 178
 837: PUSH
 838: LD_INT 91
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 137
 847: PUSH
 848: LD_INT 83
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 157
 857: PUSH
 858: LD_INT 75
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 162
 867: PUSH
 868: LD_INT 67
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 887: LD_INT 4
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 58
// end ; end_of_file
 918: LD_VAR 0 1
 922: RET
// export function Action ; begin
 923: LD_INT 0
 925: PPUSH
// InGameOn ;
 926: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 930: LD_INT 221
 932: PPUSH
 933: LD_INT 80
 935: PPUSH
 936: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 940: LD_EXP 14
 944: PUSH
 945: LD_EXP 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: LD_INT 217
 956: PPUSH
 957: LD_INT 79
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$7 ) ;
 964: LD_INT 245
 966: PPUSH
 967: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 971: LD_EXP 14
 975: PUSH
 976: LD_EXP 15
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 989: LD_EXP 15
 993: PPUSH
 994: LD_STRING D2-Bur-1
 996: PPUSH
 997: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1001: LD_EXP 14
1005: PPUSH
1006: LD_STRING D2-JMM-1
1008: PPUSH
1009: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1013: LD_INT 18
1015: PPUSH
1016: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1020: LD_EXP 15
1024: PPUSH
1025: LD_EXP 14
1029: PPUSH
1030: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1034: LD_EXP 15
1038: PPUSH
1039: LD_STRING D2-Bur-2
1041: PPUSH
1042: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1046: LD_EXP 15
1050: PPUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 2
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: PPUSH
1066: LD_EXP 15
1070: PPUSH
1071: CALL_OW 74
1075: PPUSH
1076: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1080: LD_EXP 14
1084: PPUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 2
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL_OW 69
1099: PPUSH
1100: LD_EXP 14
1104: PPUSH
1105: CALL_OW 74
1109: PPUSH
1110: CALL_OW 120
// wait ( 0 0$1 ) ;
1114: LD_INT 35
1116: PPUSH
1117: CALL_OW 67
// InGameOff ;
1121: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1125: LD_STRING MArtPickup
1127: PPUSH
1128: CALL_OW 337
// end ;
1132: LD_VAR 0 1
1136: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1137: LD_EXP 22
1141: PPUSH
1142: LD_INT 101
1144: PUSH
1145: LD_INT 7
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: PUSH
1157: LD_EXP 8
1161: NOT
1162: AND
1163: IFFALSE 1192
1165: GO 1167
1167: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING D3-Bur-1
1175: PPUSH
1176: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1180: LD_EXP 14
1184: PPUSH
1185: LD_STRING D3-JMM-1
1187: PPUSH
1188: CALL_OW 88
// end ;
1192: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1193: LD_INT 5
1195: PPUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 70
1210: IFFALSE 1545
1212: GO 1214
1214: DISABLE
// begin wait ( 0 0$3 ) ;
1215: LD_INT 105
1217: PPUSH
1218: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1222: LD_INT 139
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 7
1230: PPUSH
1231: LD_INT 20
1233: NEG
1234: PPUSH
1235: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1239: LD_INT 139
1241: PPUSH
1242: LD_INT 43
1244: PPUSH
1245: LD_INT 7
1247: PPUSH
1248: CALL_OW 331
// DialogueOn ;
1252: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1256: LD_EXP 14
1260: PPUSH
1261: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1265: LD_EXP 14
1269: PPUSH
1270: LD_STRING D3a-JMM-1
1272: PPUSH
1273: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1277: LD_EXP 15
1281: PPUSH
1282: LD_STRING D3a-Bur-1
1284: PPUSH
1285: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_STRING D3a-JMM-2
1296: PPUSH
1297: CALL_OW 88
// if Joan then
1301: LD_EXP 16
1305: IFFALSE 1321
// SayRadio ( Joan , D3a-Joan-2 ) else
1307: LD_EXP 16
1311: PPUSH
1312: LD_STRING D3a-Joan-2
1314: PPUSH
1315: CALL_OW 94
1319: GO 1333
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1321: LD_EXP 17
1325: PPUSH
1326: LD_STRING D3a-RSci1-2
1328: PPUSH
1329: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_STRING D3a-Huck-2
1340: PPUSH
1341: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_STRING D3a-Pow-2
1352: PPUSH
1353: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1357: LD_EXP 18
1361: PPUSH
1362: LD_STRING D3a-Huck-3
1364: PPUSH
1365: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1369: LD_EXP 19
1373: PPUSH
1374: LD_STRING D3a-Pow-3
1376: PPUSH
1377: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1381: LD_EXP 18
1385: PPUSH
1386: LD_STRING D3a-Huck-4
1388: PPUSH
1389: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1393: LD_EXP 14
1397: PPUSH
1398: LD_STRING D3a-JMM-4
1400: PPUSH
1401: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1405: LD_EXP 15
1409: PPUSH
1410: LD_STRING D3a-Bur-4
1412: PPUSH
1413: CALL_OW 88
// if Joan then
1417: LD_EXP 16
1421: IFFALSE 1437
// SayRadio ( Joan , D3a-Joan-4 ) else
1423: LD_EXP 16
1427: PPUSH
1428: LD_STRING D3a-Joan-4
1430: PPUSH
1431: CALL_OW 94
1435: GO 1449
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1437: LD_EXP 17
1441: PPUSH
1442: LD_STRING D3a-RSci1-4
1444: PPUSH
1445: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1449: LD_INT 133
1451: PPUSH
1452: LD_INT 43
1454: PPUSH
1455: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1459: LD_INT 10
1461: PPUSH
1462: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1466: LD_EXP 14
1470: PPUSH
1471: LD_STRING D3a-JMM-5
1473: PPUSH
1474: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1478: LD_EXP 15
1482: PPUSH
1483: LD_STRING D3a-Bur-5
1485: PPUSH
1486: CALL_OW 88
// DialogueOff ;
1490: CALL_OW 7
// seenBase := true ;
1494: LD_ADDR_EXP 8
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1502: LD_INT 525
1504: PUSH
1505: LD_INT 420
1507: PUSH
1508: LD_INT 315
1510: PUSH
1511: LD_INT 280
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PPUSH
1526: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1530: LD_EXP 21
1534: PPUSH
1535: LD_INT 142
1537: PPUSH
1538: LD_INT 52
1540: PPUSH
1541: CALL_OW 116
// end ;
1545: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1546: LD_EXP 8
1550: NOT
1551: PUSH
1552: LD_EXP 4
1556: NOT
1557: AND
1558: IFFALSE 1578
1560: GO 1562
1562: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1563: LD_EXP 21
1567: PPUSH
1568: LD_INT 142
1570: PPUSH
1571: LD_INT 52
1573: PPUSH
1574: CALL_OW 116
1578: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// contaminateTime := tick ;
1583: LD_ADDR_EXP 3
1587: PUSH
1588: LD_OWVAR 1
1592: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1593: LD_INT 175
1595: PPUSH
1596: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1600: LD_ADDR_VAR 0 5
1604: PUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 469
1612: ST_TO_ADDR
// if art then
1613: LD_VAR 0 5
1617: IFFALSE 1656
// if art [ 1 ] = 157 and art [ 2 ] = 75 then
1619: LD_VAR 0 5
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PUSH
1628: LD_INT 157
1630: EQUAL
1631: PUSH
1632: LD_VAR 0 5
1636: PUSH
1637: LD_INT 2
1639: ARRAY
1640: PUSH
1641: LD_INT 75
1643: EQUAL
1644: AND
1645: IFFALSE 1656
// begin YouLost ( Artefact ) ;
1647: LD_STRING Artefact
1649: PPUSH
1650: CALL_OW 104
// exit ;
1654: GO 1812
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1656: LD_EXP 14
1660: PPUSH
1661: CALL_OW 302
1665: PUSH
1666: LD_EXP 15
1670: PPUSH
1671: CALL_OW 302
1675: AND
1676: IFFALSE 1753
// begin DialogueOn ;
1678: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1682: LD_EXP 14
1686: PPUSH
1687: LD_STRING D6a-JMM-1
1689: PPUSH
1690: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1694: LD_EXP 15
1698: PPUSH
1699: LD_STRING D6a-Bur-1
1701: PPUSH
1702: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1706: LD_EXP 14
1710: PPUSH
1711: LD_STRING D6c-JMM-1
1713: PPUSH
1714: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1718: LD_EXP 15
1722: PPUSH
1723: LD_STRING D6c-Bur-1
1725: PPUSH
1726: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1730: LD_EXP 14
1734: PPUSH
1735: LD_STRING D6c-JMM-2
1737: PPUSH
1738: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1742: LD_STRING MBase
1744: PPUSH
1745: CALL_OW 337
// DialogueOff ;
1749: CALL_OW 7
// end ; bombExploded := true ;
1753: LD_ADDR_EXP 4
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1761: LD_INT 6300
1763: PUSH
1764: LD_INT 5250
1766: PUSH
1767: LD_INT 4200
1769: PUSH
1770: LD_INT 3500
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: LD_OWVAR 67
1783: ARRAY
1784: PPUSH
1785: CALL_OW 67
// if IsOk ( JMM ) then
1789: LD_EXP 14
1793: PPUSH
1794: CALL_OW 302
1798: IFFALSE 1812
// Say ( JMM , D8-JMM-1 ) ;
1800: LD_EXP 14
1804: PPUSH
1805: LD_STRING D8-JMM-1
1807: PPUSH
1808: CALL_OW 88
// end ;
1812: LD_VAR 0 4
1816: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1817: LD_EXP 9
1821: PUSH
1822: LD_EXP 7
1826: NOT
1827: AND
1828: PUSH
1829: LD_EXP 4
1833: AND
1834: IFFALSE 1889
1836: GO 1838
1838: DISABLE
// begin enable ;
1839: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1840: LD_INT 9
1842: PPUSH
1843: LD_INT 22
1845: PUSH
1846: LD_INT 7
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 70
1857: IFFALSE 1875
// stevensTimer := stevensTimer - 0 0$30 else
1859: LD_ADDR_EXP 9
1863: PUSH
1864: LD_EXP 9
1868: PUSH
1869: LD_INT 1050
1871: MINUS
1872: ST_TO_ADDR
1873: GO 1889
// stevensTimer := stevensTimer - 0 0$1 ;
1875: LD_ADDR_EXP 9
1879: PUSH
1880: LD_EXP 9
1884: PUSH
1885: LD_INT 35
1887: MINUS
1888: ST_TO_ADDR
// end ;
1889: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1890: LD_EXP 9
1894: PUSH
1895: LD_INT 0
1897: LESSEQUAL
1898: PUSH
1899: LD_EXP 7
1903: NOT
1904: AND
1905: IFFALSE 2069
1907: GO 1909
1909: DISABLE
1910: LD_INT 0
1912: PPUSH
1913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: LD_INT 22
1921: PUSH
1922: LD_INT 1
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 25
1931: PUSH
1932: LD_INT 4
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PPUSH
1943: CALL_OW 69
1947: ST_TO_ADDR
// for i in tmp do
1948: LD_ADDR_VAR 0 1
1952: PUSH
1953: LD_VAR 0 2
1957: PUSH
1958: FOR_IN
1959: IFFALSE 2012
// begin if IsInUnit ( i ) then
1961: LD_VAR 0 1
1965: PPUSH
1966: CALL_OW 310
1970: IFFALSE 1983
// ComExitBuilding ( i ) else
1972: LD_VAR 0 1
1976: PPUSH
1977: CALL_OW 122
1981: GO 2010
// if not HasTask ( i ) then
1983: LD_VAR 0 1
1987: PPUSH
1988: CALL_OW 314
1992: NOT
1993: IFFALSE 2010
// ComMoveXY ( i , 29 , 56 ) ;
1995: LD_VAR 0 1
1999: PPUSH
2000: LD_INT 29
2002: PPUSH
2003: LD_INT 56
2005: PPUSH
2006: CALL_OW 111
// end ;
2010: GO 1958
2012: POP
2013: POP
// repeat wait ( 0 0$1 ) ;
2014: LD_INT 35
2016: PPUSH
2017: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2021: LD_INT 8
2023: PPUSH
2024: LD_INT 22
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 4
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PPUSH
2048: CALL_OW 70
2052: IFFALSE 2014
// if planCaptured then
2054: LD_EXP 7
2058: IFFALSE 2062
// exit ;
2060: GO 2069
// YouLost ( Time ) ;
2062: LD_STRING Time
2064: PPUSH
2065: CALL_OW 104
// end ;
2069: PPOPN 2
2071: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2072: LD_INT 22
2074: PUSH
2075: LD_INT 7
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 92
2084: PUSH
2085: LD_INT 142
2087: PUSH
2088: LD_INT 52
2090: PUSH
2091: LD_INT 27
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PPUSH
2104: CALL_OW 69
2108: PUSH
2109: LD_EXP 3
2113: PUSH
2114: LD_INT 6000
2116: PLUS
2117: PUSH
2118: LD_OWVAR 1
2122: GREATER
2123: AND
2124: PUSH
2125: LD_EXP 4
2129: AND
2130: IFFALSE 2185
2132: GO 2134
2134: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2135: LD_EXP 14
2139: PUSH
2140: LD_EXP 15
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PPUSH
2149: CALL_OW 85
// DialogueOn ;
2153: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2157: LD_EXP 14
2161: PPUSH
2162: LD_STRING D6b-JMM-1
2164: PPUSH
2165: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2169: LD_EXP 15
2173: PPUSH
2174: LD_STRING D6b-Bur-1
2176: PPUSH
2177: CALL_OW 88
// DialogueOff ;
2181: CALL_OW 7
// end ;
2185: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2186: LD_EXP 15
2190: PPUSH
2191: LD_INT 142
2193: PPUSH
2194: LD_INT 52
2196: PPUSH
2197: CALL_OW 297
2201: PUSH
2202: LD_INT 25
2204: LESS
2205: PUSH
2206: LD_EXP 15
2210: PPUSH
2211: CALL_OW 310
2215: PPUSH
2216: LD_INT 142
2218: PPUSH
2219: LD_INT 52
2221: PPUSH
2222: CALL_OW 297
2226: PUSH
2227: LD_INT 25
2229: LESS
2230: OR
2231: PUSH
2232: LD_EXP 15
2236: PPUSH
2237: CALL_OW 256
2241: PUSH
2242: LD_INT 1000
2244: LESS
2245: AND
2246: PUSH
2247: LD_EXP 3
2251: PUSH
2252: LD_INT 6000
2254: PLUS
2255: PUSH
2256: LD_OWVAR 1
2260: GREATER
2261: AND
2262: PUSH
2263: LD_EXP 4
2267: AND
2268: IFFALSE 2301
2270: GO 2272
2272: DISABLE
// begin DialogueOn ;
2273: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2277: LD_EXP 15
2281: PPUSH
2282: LD_STRING D7-Bur-1
2284: PPUSH
2285: CALL_OW 88
// enteredContaminatedArea := true ;
2289: LD_ADDR_EXP 5
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// DialogueOff ;
2297: CALL_OW 7
// end ;
2301: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2302: LD_EXP 14
2306: PPUSH
2307: LD_INT 142
2309: PPUSH
2310: LD_INT 52
2312: PPUSH
2313: CALL_OW 297
2317: PUSH
2318: LD_INT 25
2320: LESS
2321: PUSH
2322: LD_EXP 14
2326: PPUSH
2327: CALL_OW 310
2331: PPUSH
2332: LD_INT 142
2334: PPUSH
2335: LD_INT 52
2337: PPUSH
2338: CALL_OW 297
2342: PUSH
2343: LD_INT 25
2345: LESS
2346: OR
2347: PUSH
2348: LD_EXP 14
2352: PPUSH
2353: CALL_OW 256
2357: PUSH
2358: LD_INT 1000
2360: LESS
2361: AND
2362: PUSH
2363: LD_EXP 3
2367: PUSH
2368: LD_INT 6000
2370: PLUS
2371: PUSH
2372: LD_OWVAR 1
2376: GREATER
2377: AND
2378: PUSH
2379: LD_EXP 4
2383: AND
2384: IFFALSE 2417
2386: GO 2388
2388: DISABLE
// begin DialogueOn ;
2389: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2393: LD_EXP 14
2397: PPUSH
2398: LD_STRING D7-JMM-1
2400: PPUSH
2401: CALL_OW 88
// enteredContaminatedArea := true ;
2405: LD_ADDR_EXP 5
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// DialogueOff ;
2413: CALL_OW 7
// end ;
2417: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2418: LD_EXP 6
2422: PUSH
2423: LD_EXP 14
2427: PPUSH
2428: CALL_OW 302
2432: AND
2433: PUSH
2434: LD_EXP 15
2438: PPUSH
2439: CALL_OW 302
2443: AND
2444: IFFALSE 2513
2446: GO 2448
2448: DISABLE
// begin DialogueOn ;
2449: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2453: LD_EXP 14
2457: PUSH
2458: LD_EXP 15
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PPUSH
2467: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2471: LD_EXP 14
2475: PPUSH
2476: LD_STRING D4-JMM-1
2478: PPUSH
2479: CALL_OW 88
// if not bombExploded then
2483: LD_EXP 4
2487: NOT
2488: IFFALSE 2502
// Say ( Burlak , D4-Bur-1 ) ;
2490: LD_EXP 15
2494: PPUSH
2495: LD_STRING D4-Bur-1
2497: PPUSH
2498: CALL_OW 88
// DialogueOff ;
2502: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2506: LD_STRING MReturn
2508: PPUSH
2509: CALL_OW 337
// end ;
2513: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2514: LD_EXP 7
2518: NOT
2519: PUSH
2520: LD_INT 22
2522: PUSH
2523: LD_INT 7
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 91
2532: PUSH
2533: LD_INT 9
2535: PUSH
2536: LD_INT 6
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: LIST
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PPUSH
2548: CALL_OW 69
2552: AND
2553: IFFALSE 2630
2555: GO 2557
2557: DISABLE
// begin DialogueOn ;
2558: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2562: LD_INT 55
2564: PPUSH
2565: LD_INT 11
2567: PPUSH
2568: LD_INT 7
2570: PPUSH
2571: LD_INT 6
2573: NEG
2574: PPUSH
2575: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2579: LD_INT 55
2581: PPUSH
2582: LD_INT 11
2584: PPUSH
2585: LD_INT 7
2587: PPUSH
2588: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2592: LD_EXP 15
2596: PPUSH
2597: LD_STRING D9-Bur-1
2599: PPUSH
2600: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2604: LD_EXP 14
2608: PPUSH
2609: LD_STRING D9-JMM-1
2611: PPUSH
2612: CALL_OW 88
// DialogueOff ;
2616: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2620: LD_INT 9
2622: PPUSH
2623: LD_INT 7
2625: PPUSH
2626: CALL_OW 235
// end ;
2630: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2631: LD_INT 9
2633: PPUSH
2634: LD_INT 22
2636: PUSH
2637: LD_INT 7
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: PPUSH
2644: CALL_OW 70
2648: IFFALSE 2684
2650: GO 2652
2652: DISABLE
// begin wait ( 0 0$07 ) ;
2653: LD_INT 245
2655: PPUSH
2656: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2660: LD_EXP 14
2664: PPUSH
2665: LD_STRING D10b-JMM-1
2667: PPUSH
2668: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2672: LD_EXP 15
2676: PPUSH
2677: LD_STRING D10b-Bur-1
2679: PPUSH
2680: CALL_OW 88
// end ;
2684: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2685: LD_EXP 9
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 1
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 25
2702: PUSH
2703: LD_INT 4
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 26
2712: PUSH
2713: LD_INT 1
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: PPUSH
2725: CALL_OW 69
2729: AND
2730: PUSH
2731: LD_INT 5
2733: PPUSH
2734: CALL_OW 255
2738: PUSH
2739: LD_INT 7
2741: EQUAL
2742: PUSH
2743: LD_INT 22
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 25
2755: PUSH
2756: LD_INT 1
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PPUSH
2767: CALL_OW 69
2771: PUSH
2772: LD_INT 0
2774: EQUAL
2775: OR
2776: AND
2777: IFFALSE 3366
2779: GO 2781
2781: DISABLE
2782: LD_INT 0
2784: PPUSH
// begin case Query ( QKill ) of 1 :
2785: LD_STRING QKill
2787: PPUSH
2788: CALL_OW 97
2792: PUSH
2793: LD_INT 1
2795: DOUBLE
2796: EQUAL
2797: IFTRUE 2801
2799: GO 3354
2801: POP
// begin DialogueOn ;
2802: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2806: LD_EXP 14
2810: PPUSH
2811: LD_STRING D10a-JMM-1
2813: PPUSH
2814: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2818: LD_EXP 15
2822: PPUSH
2823: LD_STRING D10a-Bur-1
2825: PPUSH
2826: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2830: LD_EXP 14
2834: PPUSH
2835: LD_STRING D10a-JMM-2
2837: PPUSH
2838: CALL_OW 88
// if IsOk ( Stevens ) then
2842: LD_EXP 18
2846: PPUSH
2847: CALL_OW 302
2851: IFFALSE 2867
// Say ( Stevens , D10a-Huck-2 ) else
2853: LD_EXP 18
2857: PPUSH
2858: LD_STRING D10a-Huck-2
2860: PPUSH
2861: CALL_OW 88
2865: GO 2918
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2867: LD_INT 22
2869: PUSH
2870: LD_INT 1
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 25
2879: PUSH
2880: LD_INT 4
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PUSH
2887: LD_INT 26
2889: PUSH
2890: LD_INT 1
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 69
2906: PUSH
2907: LD_INT 1
2909: ARRAY
2910: PPUSH
2911: LD_STRING D10a-ASci1-3
2913: PPUSH
2914: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2918: LD_EXP 14
2922: PPUSH
2923: LD_STRING D10a-JMM-4
2925: PPUSH
2926: CALL_OW 88
// if IsOk ( Stevens ) then
2930: LD_EXP 18
2934: PPUSH
2935: CALL_OW 302
2939: IFFALSE 2953
// Say ( Stevens , D10a-Huck-3 ) ;
2941: LD_EXP 18
2945: PPUSH
2946: LD_STRING D10a-Huck-3
2948: PPUSH
2949: CALL_OW 88
// DialogueOff ;
2953: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2957: LD_INT 1
2959: PPUSH
2960: LD_INT 7
2962: PPUSH
2963: LD_INT 1
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: CALL_OW 80
// planCaptured := true ;
2973: LD_ADDR_EXP 7
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2981: LD_STRING MEnd
2983: PPUSH
2984: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
2988: LD_STRING ACH_DIPLOMACY
2990: PPUSH
2991: CALL_OW 543
// canEnd := true ;
2995: LD_ADDR_EXP 10
2999: PUSH
3000: LD_INT 1
3002: ST_TO_ADDR
// missionTime := tick ;
3003: LD_ADDR_EXP 11
3007: PUSH
3008: LD_OWVAR 1
3012: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3013: LD_INT 35
3015: PPUSH
3016: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 3
3032: PUSH
3033: LD_INT 50
3035: PUSH
3036: EMPTY
3037: LIST
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PPUSH
3047: CALL_OW 69
3051: IFFALSE 3167
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3053: LD_ADDR_VAR 0 1
3057: PUSH
3058: LD_INT 22
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 25
3070: PUSH
3071: LD_INT 4
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 69
3086: PUSH
3087: FOR_IN
3088: IFFALSE 3165
// begin if IsInUnit ( i ) then
3090: LD_VAR 0 1
3094: PPUSH
3095: CALL_OW 310
3099: IFFALSE 3112
// ComExitBuilding ( i ) else
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 122
3110: GO 3163
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 22
3119: PUSH
3120: LD_INT 1
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 50
3132: PUSH
3133: EMPTY
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 128
// end ;
3163: GO 3087
3165: POP
3166: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3167: LD_INT 22
3169: PUSH
3170: LD_INT 1
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 3
3179: PUSH
3180: LD_INT 50
3182: PUSH
3183: EMPTY
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: PPUSH
3194: CALL_OW 69
3198: NOT
3199: IFFALSE 3013
// repeat wait ( 3 ) ;
3201: LD_INT 3
3203: PPUSH
3204: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 1
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 21
3225: PUSH
3226: LD_INT 1
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PPUSH
3237: CALL_OW 69
3241: PUSH
3242: FOR_IN
3243: IFFALSE 3319
// begin if IsInArea ( i , stevensEscapeArea ) then
3245: LD_VAR 0 1
3249: PPUSH
3250: LD_INT 8
3252: PPUSH
3253: CALL_OW 308
3257: IFFALSE 3270
// begin RemoveUnit ( i ) ;
3259: LD_VAR 0 1
3263: PPUSH
3264: CALL_OW 64
// continue ;
3268: GO 3242
// end ; if IsInUnit ( i ) then
3270: LD_VAR 0 1
3274: PPUSH
3275: CALL_OW 310
3279: IFFALSE 3290
// ComExitBuilding ( i ) ;
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 122
// if not HasTask ( i ) then
3290: LD_VAR 0 1
3294: PPUSH
3295: CALL_OW 314
3299: NOT
3300: IFFALSE 3317
// ComMoveXY ( i , 28 , 55 ) ;
3302: LD_VAR 0 1
3306: PPUSH
3307: LD_INT 28
3309: PPUSH
3310: LD_INT 55
3312: PPUSH
3313: CALL_OW 111
// end ;
3317: GO 3242
3319: POP
3320: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3321: LD_INT 22
3323: PUSH
3324: LD_INT 1
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 21
3333: PUSH
3334: LD_INT 1
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 69
3349: NOT
3350: IFFALSE 3201
// end ; 2 :
3352: GO 3366
3354: LD_INT 2
3356: DOUBLE
3357: EQUAL
3358: IFTRUE 3362
3360: GO 3365
3362: POP
// ; end ;
3363: GO 3366
3365: POP
// end ;
3366: PPOPN 1
3368: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3369: LD_EXP 10
3373: IFFALSE 3730
3375: GO 3377
3377: DISABLE
3378: LD_INT 0
3380: PPUSH
3381: PPUSH
3382: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3383: LD_INT 10
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: CALL_OW 424
// if Difficulty < 2 then
3393: LD_OWVAR 67
3397: PUSH
3398: LD_INT 2
3400: LESS
3401: IFFALSE 3405
// exit ;
3403: GO 3730
// uc_side := 4 ;
3405: LD_ADDR_OWVAR 20
3409: PUSH
3410: LD_INT 4
3412: ST_TO_ADDR
// uc_nation := 1 ;
3413: LD_ADDR_OWVAR 21
3417: PUSH
3418: LD_INT 1
3420: ST_TO_ADDR
// InitHc ;
3421: CALL_OW 19
// tmp := [ ] ;
3425: LD_ADDR_VAR 0 3
3429: PUSH
3430: EMPTY
3431: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3432: LD_INT 0
3434: PPUSH
3435: LD_INT 5
3437: PPUSH
3438: LD_INT 10
3440: PPUSH
3441: CALL_OW 380
// un := CreateHuman ;
3445: LD_ADDR_VAR 0 1
3449: PUSH
3450: CALL_OW 44
3454: ST_TO_ADDR
// tmp := [ un ] ;
3455: LD_ADDR_VAR 0 3
3459: PUSH
3460: LD_VAR 0 1
3464: PUSH
3465: EMPTY
3466: LIST
3467: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3468: LD_VAR 0 1
3472: PPUSH
3473: LD_INT 226
3475: PPUSH
3476: LD_INT 86
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL_OW 48
// ComHold ( un ) ;
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 140
// for i = 1 to 3 do
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: DOUBLE
3501: LD_INT 1
3503: DEC
3504: ST_TO_ADDR
3505: LD_INT 3
3507: PUSH
3508: FOR_TO
3509: IFFALSE 3608
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3511: LD_INT 0
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: LD_INT 8
3519: PPUSH
3520: CALL_OW 380
// un := CreateHuman ;
3524: LD_ADDR_VAR 0 1
3528: PUSH
3529: CALL_OW 44
3533: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3534: LD_VAR 0 1
3538: PPUSH
3539: LD_INT 5
3541: PPUSH
3542: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_INT 215
3553: PUSH
3554: LD_INT 217
3556: PUSH
3557: LD_INT 219
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: LD_VAR 0 2
3569: ARRAY
3570: PPUSH
3571: LD_INT 76
3573: PPUSH
3574: LD_INT 0
3576: PPUSH
3577: CALL_OW 48
// ComCrawl ( un ) ;
3581: LD_VAR 0 1
3585: PPUSH
3586: CALL_OW 137
// tmp := tmp ^ un ;
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: LD_VAR 0 3
3599: PUSH
3600: LD_VAR 0 1
3604: ADD
3605: ST_TO_ADDR
// end ;
3606: GO 3508
3608: POP
3609: POP
// repeat wait ( 0 0$1 ) ;
3610: LD_INT 35
3612: PPUSH
3613: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3617: LD_VAR 0 3
3621: PPUSH
3622: LD_INT 24
3624: PUSH
3625: LD_INT 1000
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: PPUSH
3632: CALL_OW 72
3636: NOT
3637: IFFALSE 3610
// for i in tmp do
3639: LD_ADDR_VAR 0 2
3643: PUSH
3644: LD_VAR 0 3
3648: PUSH
3649: FOR_IN
3650: IFFALSE 3728
// begin wait ( 0 0$1 ) ;
3652: LD_INT 35
3654: PPUSH
3655: CALL_OW 67
// if Crawls ( i ) then
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 318
3668: IFFALSE 3681
// ComWalk ( i ) else
3670: LD_VAR 0 2
3674: PPUSH
3675: CALL_OW 138
3679: GO 3726
// if GetClass ( i ) = class_sniper then
3681: LD_VAR 0 2
3685: PPUSH
3686: CALL_OW 257
3690: PUSH
3691: LD_INT 5
3693: EQUAL
3694: IFFALSE 3712
// ComAttackSoporific ( i , JMM ) else
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_EXP 14
3705: PPUSH
3706: CALL_OW 166
3710: GO 3726
// ComAttackUnit ( i , JMM ) ;
3712: LD_VAR 0 2
3716: PPUSH
3717: LD_EXP 14
3721: PPUSH
3722: CALL_OW 115
// end ;
3726: GO 3649
3728: POP
3729: POP
// end ;
3730: PPOPN 3
3732: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3733: LD_EXP 7
3737: NOT
3738: PUSH
3739: LD_INT 1
3741: PPUSH
3742: CALL_OW 301
3746: AND
3747: IFFALSE 3759
3749: GO 3751
3751: DISABLE
// YouLost ( Lab ) ;
3752: LD_STRING Lab
3754: PPUSH
3755: CALL_OW 104
3759: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3760: LD_INT 10
3762: PPUSH
3763: LD_INT 22
3765: PUSH
3766: LD_INT 7
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PPUSH
3773: CALL_OW 70
3777: PUSH
3778: LD_INT 2
3780: GREATEREQUAL
3781: PUSH
3782: LD_INT 10
3784: PPUSH
3785: LD_INT 2
3787: PUSH
3788: LD_INT 34
3790: PUSH
3791: LD_INT 12
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 34
3800: PUSH
3801: LD_INT 51
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: LIST
3812: PPUSH
3813: CALL_OW 70
3817: AND
3818: PUSH
3819: LD_EXP 10
3823: AND
3824: PUSH
3825: LD_EXP 7
3829: AND
3830: PUSH
3831: LD_EXP 6
3835: AND
3836: IFFALSE 4096
3838: GO 3840
3840: DISABLE
3841: LD_INT 0
3843: PPUSH
3844: PPUSH
// begin m1 := false ;
3845: LD_ADDR_VAR 0 1
3849: PUSH
3850: LD_INT 0
3852: ST_TO_ADDR
// m2 := false ;
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: LD_INT 0
3860: ST_TO_ADDR
// if killCounter = 0 then
3861: LD_EXP 12
3865: PUSH
3866: LD_INT 0
3868: EQUAL
3869: IFFALSE 3878
// SetAchievement ( ACH_PACIFIST ) ;
3871: LD_STRING ACH_PACIFIST
3873: PPUSH
3874: CALL_OW 543
// if tick < 7 7$00 then
3878: LD_OWVAR 1
3882: PUSH
3883: LD_INT 14700
3885: LESS
3886: IFFALSE 3902
// begin wait ( 3 ) ;
3888: LD_INT 3
3890: PPUSH
3891: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3895: LD_STRING ACH_ASPEED_18
3897: PPUSH
3898: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3902: LD_STRING Explosion
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL_OW 101
// if enteredContaminatedArea then
3912: LD_EXP 5
3916: IFFALSE 3938
// begin m1 := true ;
3918: LD_ADDR_VAR 0 1
3922: PUSH
3923: LD_INT 1
3925: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3926: LD_STRING BioHazard
3928: PPUSH
3929: LD_INT 1
3931: PPUSH
3932: CALL_OW 101
// end else
3936: GO 3949
// AddMedal ( BioHazard , - 1 ) ;
3938: LD_STRING BioHazard
3940: PPUSH
3941: LD_INT 1
3943: NEG
3944: PPUSH
3945: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
3949: LD_EXP 11
3953: PUSH
3954: LD_INT 42000
3956: PUSH
3957: LD_INT 31500
3959: PUSH
3960: LD_INT 25200
3962: PUSH
3963: LD_INT 24150
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: PUSH
3972: LD_OWVAR 67
3976: ARRAY
3977: LESSEQUAL
3978: IFFALSE 4000
// begin m2 := true ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
3988: LD_STRING Speed
3990: PPUSH
3991: LD_INT 1
3993: PPUSH
3994: CALL_OW 101
// end else
3998: GO 4011
// AddMedal ( Speed , - 1 ) ;
4000: LD_STRING Speed
4002: PPUSH
4003: LD_INT 1
4005: NEG
4006: PPUSH
4007: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4011: LD_OWVAR 67
4015: PUSH
4016: LD_INT 3
4018: GREATEREQUAL
4019: PUSH
4020: LD_VAR 0 1
4024: AND
4025: PUSH
4026: LD_VAR 0 2
4030: AND
4031: IFFALSE 4043
// SetAchievementEX ( ACH_AMER , 18 ) ;
4033: LD_STRING ACH_AMER
4035: PPUSH
4036: LD_INT 18
4038: PPUSH
4039: CALL_OW 564
// GiveMedals ( Main ) ;
4043: LD_STRING Main
4045: PPUSH
4046: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4050: LD_EXP 14
4054: PUSH
4055: LD_EXP 15
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PPUSH
4064: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4068: LD_EXP 14
4072: PPUSH
4073: LD_STRING 14a_JMM
4075: PPUSH
4076: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4080: LD_EXP 15
4084: PPUSH
4085: LD_STRING 14a_Burlak
4087: PPUSH
4088: CALL_OW 38
// YouWin ;
4092: CALL_OW 103
// end ; end_of_file
4096: PPOPN 2
4098: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4099: LD_INT 0
4101: PPUSH
4102: PPUSH
4103: PPUSH
4104: PPUSH
// uc_side := 1 ;
4105: LD_ADDR_OWVAR 20
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// uc_nation := 1 ;
4113: LD_ADDR_OWVAR 21
4117: PUSH
4118: LD_INT 1
4120: ST_TO_ADDR
// InitHc ;
4121: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 750 ) ;
4125: LD_INT 34
4127: PPUSH
4128: CALL_OW 274
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 750
4138: PPUSH
4139: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4143: LD_INT 34
4145: PPUSH
4146: CALL_OW 274
4150: PPUSH
4151: LD_INT 3
4153: PPUSH
4154: LD_INT 20
4156: PPUSH
4157: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4161: LD_ADDR_EXP 18
4165: PUSH
4166: LD_STRING Stevens
4168: PPUSH
4169: CALL_OW 25
4173: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4174: LD_ADDR_EXP 19
4178: PUSH
4179: LD_STRING Powell
4181: PPUSH
4182: CALL_OW 25
4186: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4187: LD_EXP 18
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: CALL_OW 52
// vehGuard := [ ] ;
4199: LD_ADDR_EXP 23
4203: PUSH
4204: EMPTY
4205: ST_TO_ADDR
// hc_importance := 0 ;
4206: LD_ADDR_OWVAR 32
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4214: LD_INT 4
4216: PPUSH
4217: LD_INT 3
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 8
4225: PPUSH
4226: LD_INT 100
4228: PPUSH
4229: CALL 32374 0 5
// sibBomb := CreateVehicle ;
4233: LD_ADDR_EXP 21
4237: PUSH
4238: CALL_OW 45
4242: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4243: LD_EXP 21
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4255: LD_EXP 21
4259: PPUSH
4260: LD_INT 93
4262: PPUSH
4263: LD_INT 74
4265: PPUSH
4266: LD_INT 0
4268: PPUSH
4269: CALL_OW 48
// guards := [ ] ;
4273: LD_ADDR_EXP 22
4277: PUSH
4278: EMPTY
4279: ST_TO_ADDR
// for i = 1 to 3 do
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: DOUBLE
4286: LD_INT 1
4288: DEC
4289: ST_TO_ADDR
4290: LD_INT 3
4292: PUSH
4293: FOR_TO
4294: IFFALSE 4390
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4296: LD_INT 0
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 8
4304: PUSH
4305: LD_INT 9
4307: PUSH
4308: LD_INT 10
4310: PUSH
4311: LD_INT 10
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: PUSH
4320: LD_OWVAR 67
4324: ARRAY
4325: PPUSH
4326: CALL_OW 380
// un := CreateHuman ;
4330: LD_ADDR_VAR 0 3
4334: PUSH
4335: CALL_OW 44
4339: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4340: LD_VAR 0 3
4344: PPUSH
4345: LD_INT 2
4347: PUSH
4348: LD_INT 3
4350: PUSH
4351: LD_INT 4
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: PUSH
4359: LD_VAR 0 2
4363: ARRAY
4364: PPUSH
4365: LD_INT 0
4367: PPUSH
4368: CALL_OW 49
// guards := guards ^ un ;
4372: LD_ADDR_EXP 22
4376: PUSH
4377: LD_EXP 22
4381: PUSH
4382: LD_VAR 0 3
4386: ADD
4387: ST_TO_ADDR
// end ;
4388: GO 4293
4390: POP
4391: POP
// baseGuards := [ ] ;
4392: LD_ADDR_EXP 20
4396: PUSH
4397: EMPTY
4398: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4399: LD_ADDR_VAR 0 2
4403: PUSH
4404: DOUBLE
4405: LD_INT 1
4407: DEC
4408: ST_TO_ADDR
4409: LD_INT 5
4411: PUSH
4412: LD_INT 6
4414: PUSH
4415: LD_INT 7
4417: PUSH
4418: LD_INT 8
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4584
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 8
4441: PUSH
4442: LD_INT 9
4444: PUSH
4445: LD_INT 10
4447: PUSH
4448: LD_INT 10
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PPUSH
4463: CALL_OW 381
// un := CreateHuman ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: CALL_OW 44
4476: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4477: LD_ADDR_EXP 20
4481: PUSH
4482: LD_EXP 20
4486: PUSH
4487: LD_VAR 0 3
4491: ADD
4492: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4493: LD_ADDR_VAR 0 4
4497: PUSH
4498: LD_INT 22
4500: PUSH
4501: LD_INT 1
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: PUSH
4508: LD_INT 58
4510: PUSH
4511: EMPTY
4512: LIST
4513: PUSH
4514: LD_INT 30
4516: PUSH
4517: LD_INT 32
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 69
4533: ST_TO_ADDR
// if tmp then
4534: LD_VAR 0 4
4538: IFFALSE 4570
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4540: LD_VAR 0 3
4544: PPUSH
4545: LD_VAR 0 4
4549: PUSH
4550: LD_INT 1
4552: PPUSH
4553: LD_VAR 0 4
4557: PPUSH
4558: CALL_OW 12
4562: ARRAY
4563: PPUSH
4564: CALL_OW 52
4568: GO 4582
// PlaceHumanInUnit ( un , us_bar ) ;
4570: LD_VAR 0 3
4574: PPUSH
4575: LD_INT 51
4577: PPUSH
4578: CALL_OW 52
// end ;
4582: GO 4433
4584: POP
4585: POP
// if Difficulty > 1 then
4586: LD_OWVAR 67
4590: PUSH
4591: LD_INT 1
4593: GREATER
4594: IFFALSE 4642
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4596: LD_INT 0
4598: PPUSH
4599: LD_INT 5
4601: PPUSH
4602: LD_INT 9
4604: PUSH
4605: LD_INT 10
4607: PUSH
4608: LD_INT 10
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: PUSH
4616: LD_OWVAR 67
4620: PUSH
4621: LD_INT 1
4623: MINUS
4624: ARRAY
4625: PPUSH
4626: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4630: CALL_OW 44
4634: PPUSH
4635: LD_INT 80
4637: PPUSH
4638: CALL_OW 52
// end ; for i = 1 to 3 do
4642: LD_ADDR_VAR 0 2
4646: PUSH
4647: DOUBLE
4648: LD_INT 1
4650: DEC
4651: ST_TO_ADDR
4652: LD_INT 3
4654: PUSH
4655: FOR_TO
4656: IFFALSE 4682
// begin PrepareMechanic ( false , 9 ) ;
4658: LD_INT 0
4660: PPUSH
4661: LD_INT 9
4663: PPUSH
4664: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4668: CALL_OW 44
4672: PPUSH
4673: LD_INT 43
4675: PPUSH
4676: CALL_OW 52
// end ;
4680: GO 4655
4682: POP
4683: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4684: CALL_OW 44
4688: PPUSH
4689: LD_INT 49
4691: PPUSH
4692: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: DOUBLE
4702: LD_INT 1
4704: DEC
4705: ST_TO_ADDR
4706: LD_INT 1
4708: PUSH
4709: LD_OWVAR 67
4713: PLUS
4714: PUSH
4715: FOR_TO
4716: IFFALSE 4763
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4718: LD_INT 0
4720: PPUSH
4721: LD_INT 8
4723: PUSH
4724: LD_INT 9
4726: PUSH
4727: LD_INT 10
4729: PUSH
4730: LD_INT 10
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: PUSH
4739: LD_OWVAR 67
4743: ARRAY
4744: PPUSH
4745: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4749: CALL_OW 44
4753: PPUSH
4754: LD_INT 5
4756: PPUSH
4757: CALL_OW 52
// end ;
4761: GO 4715
4763: POP
4764: POP
// for i = 1 to 3 do
4765: LD_ADDR_VAR 0 2
4769: PUSH
4770: DOUBLE
4771: LD_INT 1
4773: DEC
4774: ST_TO_ADDR
4775: LD_INT 3
4777: PUSH
4778: FOR_TO
4779: IFFALSE 4805
// begin PrepareScientist ( false , 10 ) ;
4781: LD_INT 0
4783: PPUSH
4784: LD_INT 10
4786: PPUSH
4787: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4791: CALL_OW 44
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: CALL_OW 52
// end ;
4803: GO 4778
4805: POP
4806: POP
// end ;
4807: LD_VAR 0 1
4811: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4812: LD_EXP 22
4816: PUSH
4817: LD_EXP 2
4821: NOT
4822: AND
4823: IFFALSE 5009
4825: GO 4827
4827: DISABLE
4828: LD_INT 0
4830: PPUSH
4831: PPUSH
4832: PPUSH
// begin enable ;
4833: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4834: LD_ADDR_VAR 0 3
4838: PUSH
4839: LD_INT 204
4841: PUSH
4842: LD_INT 30
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 165
4851: PUSH
4852: LD_INT 24
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 195
4861: PUSH
4862: LD_INT 6
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 223
4871: PUSH
4872: LD_INT 54
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: LD_INT 214
4881: PUSH
4882: LD_INT 84
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 206
4891: PUSH
4892: LD_INT 71
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: ST_TO_ADDR
// for i in guards do
4907: LD_ADDR_VAR 0 1
4911: PUSH
4912: LD_EXP 22
4916: PUSH
4917: FOR_IN
4918: IFFALSE 5007
// begin if HasTask ( i ) then
4920: LD_VAR 0 1
4924: PPUSH
4925: CALL_OW 314
4929: IFFALSE 4935
// continue else
4931: GO 4917
4933: GO 5005
// begin j := rand ( 1 , 6 ) ;
4935: LD_ADDR_VAR 0 2
4939: PUSH
4940: LD_INT 1
4942: PPUSH
4943: LD_INT 6
4945: PPUSH
4946: CALL_OW 12
4950: ST_TO_ADDR
// if not See ( 7 , i ) then
4951: LD_INT 7
4953: PPUSH
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 292
4963: NOT
4964: IFFALSE 5005
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
4966: LD_VAR 0 1
4970: PPUSH
4971: LD_VAR 0 3
4975: PUSH
4976: LD_VAR 0 2
4980: ARRAY
4981: PUSH
4982: LD_INT 1
4984: ARRAY
4985: PPUSH
4986: LD_VAR 0 3
4990: PUSH
4991: LD_VAR 0 2
4995: ARRAY
4996: PUSH
4997: LD_INT 2
4999: ARRAY
5000: PPUSH
5001: CALL_OW 114
// end ; end ;
5005: GO 4917
5007: POP
5008: POP
// end ;
5009: PPOPN 3
5011: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5012: LD_EXP 23
5016: PUSH
5017: LD_EXP 7
5021: NOT
5022: AND
5023: IFFALSE 5105
5025: GO 5027
5027: DISABLE
5028: LD_INT 0
5030: PPUSH
// begin enable ;
5031: ENABLE
// for i in vehGuard do
5032: LD_ADDR_VAR 0 1
5036: PUSH
5037: LD_EXP 23
5041: PUSH
5042: FOR_IN
5043: IFFALSE 5103
// if IsOk ( i ) and IsControledBy ( i ) then
5045: LD_VAR 0 1
5049: PPUSH
5050: CALL_OW 302
5054: PUSH
5055: LD_VAR 0 1
5059: PPUSH
5060: CALL_OW 312
5064: AND
5065: IFFALSE 5101
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5067: LD_VAR 0 1
5071: PPUSH
5072: LD_INT 22
5074: PUSH
5075: LD_INT 7
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PPUSH
5082: CALL_OW 69
5086: PPUSH
5087: LD_VAR 0 1
5091: PPUSH
5092: CALL_OW 74
5096: PPUSH
5097: CALL_OW 115
5101: GO 5042
5103: POP
5104: POP
// end ;
5105: PPOPN 1
5107: END
// every 1 1$00 + 3 3$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured and Difficulty > 1 do
5108: LD_EXP 4
5112: PUSH
5113: LD_INT 43
5115: PPUSH
5116: CALL_OW 302
5120: AND
5121: PUSH
5122: LD_EXP 7
5126: NOT
5127: AND
5128: PUSH
5129: LD_OWVAR 67
5133: PUSH
5134: LD_INT 1
5136: GREATER
5137: AND
5138: IFFALSE 5203
5140: GO 5142
5142: DISABLE
// begin enable ;
5143: ENABLE
// if Count ( vehGuard ) < Difficulty then
5144: LD_EXP 23
5148: PPUSH
5149: CALL 29461 0 1
5153: PUSH
5154: LD_OWVAR 67
5158: LESS
5159: IFFALSE 5203
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5161: LD_INT 43
5163: PPUSH
5164: LD_INT 5
5166: PPUSH
5167: LD_INT 3
5169: PPUSH
5170: LD_INT 2
5172: PPUSH
5173: LD_INT 7
5175: PUSH
5176: LD_INT 7
5178: PUSH
5179: LD_INT 9
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 1
5189: PPUSH
5190: LD_INT 3
5192: PPUSH
5193: CALL_OW 12
5197: ARRAY
5198: PPUSH
5199: CALL_OW 125
// end ;
5203: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5204: LD_INT 22
5206: PUSH
5207: LD_INT 1
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PUSH
5214: LD_INT 25
5216: PUSH
5217: LD_INT 5
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: PUSH
5224: LD_INT 50
5226: PUSH
5227: EMPTY
5228: LIST
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: LIST
5234: PPUSH
5235: CALL_OW 69
5239: PUSH
5240: LD_EXP 7
5244: NOT
5245: AND
5246: IFFALSE 5475
5248: GO 5250
5250: DISABLE
5251: LD_INT 0
5253: PPUSH
5254: PPUSH
// begin enable ;
5255: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5256: LD_ADDR_VAR 0 1
5260: PUSH
5261: LD_INT 22
5263: PUSH
5264: LD_INT 1
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PUSH
5271: LD_INT 25
5273: PUSH
5274: LD_INT 5
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PUSH
5281: LD_INT 50
5283: PUSH
5284: EMPTY
5285: LIST
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: LIST
5291: PPUSH
5292: CALL_OW 69
5296: ST_TO_ADDR
// if not tmp then
5297: LD_VAR 0 1
5301: NOT
5302: IFFALSE 5306
// exit ;
5304: GO 5475
// b := IsInUnit ( tmp [ 1 ] ) ;
5306: LD_ADDR_VAR 0 2
5310: PUSH
5311: LD_VAR 0 1
5315: PUSH
5316: LD_INT 1
5318: ARRAY
5319: PPUSH
5320: CALL_OW 310
5324: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5325: LD_VAR 0 2
5329: NOT
5330: PUSH
5331: LD_VAR 0 1
5335: PUSH
5336: LD_INT 1
5338: ARRAY
5339: PPUSH
5340: CALL_OW 314
5344: OR
5345: IFFALSE 5349
// exit ;
5347: GO 5475
// if b = us_bun1 then
5349: LD_VAR 0 2
5353: PUSH
5354: LD_INT 80
5356: EQUAL
5357: IFFALSE 5418
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5359: LD_VAR 0 1
5363: PUSH
5364: LD_INT 1
5366: ARRAY
5367: PPUSH
5368: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5372: LD_VAR 0 1
5376: PUSH
5377: LD_INT 1
5379: ARRAY
5380: PPUSH
5381: LD_INT 27
5383: PPUSH
5384: LD_INT 44
5386: PPUSH
5387: CALL_OW 174
// if IsOk ( us_bun2 ) then
5391: LD_INT 55
5393: PPUSH
5394: CALL_OW 302
5398: IFFALSE 5416
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5400: LD_VAR 0 1
5404: PUSH
5405: LD_INT 1
5407: ARRAY
5408: PPUSH
5409: LD_INT 55
5411: PPUSH
5412: CALL_OW 180
// end else
5416: GO 5475
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5418: LD_VAR 0 1
5422: PUSH
5423: LD_INT 1
5425: ARRAY
5426: PPUSH
5427: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5431: LD_VAR 0 1
5435: PUSH
5436: LD_INT 1
5438: ARRAY
5439: PPUSH
5440: LD_INT 92
5442: PPUSH
5443: LD_INT 51
5445: PPUSH
5446: CALL_OW 174
// if IsOk ( us_bun1 ) then
5450: LD_INT 80
5452: PPUSH
5453: CALL_OW 302
5457: IFFALSE 5475
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5459: LD_VAR 0 1
5463: PUSH
5464: LD_INT 1
5466: ARRAY
5467: PPUSH
5468: LD_INT 80
5470: PPUSH
5471: CALL_OW 180
// end ; end ;
5475: PPOPN 2
5477: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5478: LD_EXP 7
5482: NOT
5483: PUSH
5484: LD_INT 9
5486: PPUSH
5487: LD_INT 22
5489: PUSH
5490: LD_INT 1
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PUSH
5497: LD_INT 21
5499: PUSH
5500: LD_INT 3
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PUSH
5507: LD_INT 3
5509: PUSH
5510: LD_INT 24
5512: PUSH
5513: LD_INT 1000
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: LIST
5528: PPUSH
5529: CALL_OW 70
5533: AND
5534: IFFALSE 5945
5536: GO 5538
5538: DISABLE
5539: LD_INT 0
5541: PPUSH
5542: PPUSH
5543: PPUSH
5544: PPUSH
// begin enable ;
5545: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5546: LD_ADDR_VAR 0 2
5550: PUSH
5551: LD_INT 22
5553: PUSH
5554: LD_INT 1
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PUSH
5561: LD_INT 25
5563: PUSH
5564: LD_INT 2
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: PUSH
5571: LD_INT 24
5573: PUSH
5574: LD_INT 1000
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: LIST
5585: PPUSH
5586: CALL_OW 69
5590: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5591: LD_ADDR_VAR 0 3
5595: PUSH
5596: LD_INT 22
5598: PUSH
5599: LD_INT 1
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PUSH
5606: LD_INT 25
5608: PUSH
5609: LD_INT 2
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: LD_INT 3
5618: PUSH
5619: LD_INT 24
5621: PUSH
5622: LD_INT 750
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: LIST
5637: PPUSH
5638: CALL_OW 69
5642: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5643: LD_ADDR_VAR 0 4
5647: PUSH
5648: LD_INT 9
5650: PPUSH
5651: LD_INT 22
5653: PUSH
5654: LD_INT 1
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 21
5663: PUSH
5664: LD_INT 3
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 3
5673: PUSH
5674: LD_INT 24
5676: PUSH
5677: LD_INT 1000
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: LIST
5692: PPUSH
5693: CALL_OW 70
5697: PUSH
5698: LD_INT 1
5700: DIFF
5701: ST_TO_ADDR
// if not tmp and not tmp2 then
5702: LD_VAR 0 2
5706: NOT
5707: PUSH
5708: LD_VAR 0 3
5712: NOT
5713: AND
5714: IFFALSE 5718
// exit ;
5716: GO 5945
// if tmp and b then
5718: LD_VAR 0 2
5722: PUSH
5723: LD_VAR 0 4
5727: AND
5728: IFFALSE 5858
// for i in tmp do
5730: LD_ADDR_VAR 0 1
5734: PUSH
5735: LD_VAR 0 2
5739: PUSH
5740: FOR_IN
5741: IFFALSE 5856
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5743: LD_VAR 0 1
5747: PPUSH
5748: CALL_OW 110
5752: PUSH
5753: LD_INT 1
5755: EQUAL
5756: PUSH
5757: LD_VAR 0 1
5761: PPUSH
5762: CALL_OW 256
5766: PUSH
5767: LD_INT 1000
5769: LESS
5770: AND
5771: IFFALSE 5777
// continue else
5773: GO 5740
5775: GO 5804
// if GetTag ( i ) = 1 then
5777: LD_VAR 0 1
5781: PPUSH
5782: CALL_OW 110
5786: PUSH
5787: LD_INT 1
5789: EQUAL
5790: IFFALSE 5804
// SetTag ( i , 0 ) ;
5792: LD_VAR 0 1
5796: PPUSH
5797: LD_INT 0
5799: PPUSH
5800: CALL_OW 109
// if IsInUnit ( i ) then
5804: LD_VAR 0 1
5808: PPUSH
5809: CALL_OW 310
5813: IFFALSE 5824
// ComExitBuilding ( i ) ;
5815: LD_VAR 0 1
5819: PPUSH
5820: CALL_OW 122
// if not HasTask ( i ) then
5824: LD_VAR 0 1
5828: PPUSH
5829: CALL_OW 314
5833: NOT
5834: IFFALSE 5854
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5836: LD_VAR 0 1
5840: PPUSH
5841: LD_VAR 0 4
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: CALL_OW 190
// end ;
5854: GO 5740
5856: POP
5857: POP
// if tmp2 then
5858: LD_VAR 0 3
5862: IFFALSE 5945
// for i in tmp2 do
5864: LD_ADDR_VAR 0 1
5868: PUSH
5869: LD_VAR 0 3
5873: PUSH
5874: FOR_IN
5875: IFFALSE 5943
// begin if not GetTag ( i ) = 1 then
5877: LD_VAR 0 1
5881: PPUSH
5882: CALL_OW 110
5886: PUSH
5887: LD_INT 1
5889: EQUAL
5890: NOT
5891: IFFALSE 5905
// SetTag ( i , 1 ) ;
5893: LD_VAR 0 1
5897: PPUSH
5898: LD_INT 1
5900: PPUSH
5901: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5905: LD_VAR 0 1
5909: PPUSH
5910: LD_INT 88
5912: PPUSH
5913: LD_INT 75
5915: PPUSH
5916: CALL_OW 297
5920: PUSH
5921: LD_INT 6
5923: GREATER
5924: IFFALSE 5941
// ComMoveXY ( i , 88 , 75 ) ;
5926: LD_VAR 0 1
5930: PPUSH
5931: LD_INT 88
5933: PPUSH
5934: LD_INT 75
5936: PPUSH
5937: CALL_OW 111
// end ;
5941: GO 5874
5943: POP
5944: POP
// end ;
5945: PPOPN 4
5947: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5948: LD_EXP 7
5952: NOT
5953: PUSH
5954: LD_EXP 9
5958: AND
5959: PUSH
5960: LD_INT 9
5962: PPUSH
5963: LD_INT 22
5965: PUSH
5966: LD_INT 1
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: PUSH
5973: LD_INT 21
5975: PUSH
5976: LD_INT 1
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PUSH
5983: LD_INT 3
5985: PUSH
5986: LD_INT 24
5988: PUSH
5989: LD_INT 1000
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: PPUSH
6005: CALL_OW 70
6009: AND
6010: IFFALSE 6183
6012: GO 6014
6014: DISABLE
6015: LD_INT 0
6017: PPUSH
6018: PPUSH
6019: PPUSH
// begin enable ;
6020: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
6021: LD_ADDR_VAR 0 2
6025: PUSH
6026: LD_INT 22
6028: PUSH
6029: LD_INT 1
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 25
6038: PUSH
6039: LD_INT 4
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: PPUSH
6050: CALL_OW 69
6054: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6055: LD_ADDR_VAR 0 3
6059: PUSH
6060: LD_INT 9
6062: PPUSH
6063: LD_INT 22
6065: PUSH
6066: LD_INT 1
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 21
6075: PUSH
6076: LD_INT 1
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 3
6085: PUSH
6086: LD_INT 24
6088: PUSH
6089: LD_INT 1000
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: LIST
6104: PPUSH
6105: CALL_OW 70
6109: ST_TO_ADDR
// if not sci or not tmp then
6110: LD_VAR 0 2
6114: NOT
6115: PUSH
6116: LD_VAR 0 3
6120: NOT
6121: OR
6122: IFFALSE 6126
// exit ;
6124: GO 6183
// for i in sci do
6126: LD_ADDR_VAR 0 1
6130: PUSH
6131: LD_VAR 0 2
6135: PUSH
6136: FOR_IN
6137: IFFALSE 6181
// if IsInUnit ( i ) then
6139: LD_VAR 0 1
6143: PPUSH
6144: CALL_OW 310
6148: IFFALSE 6161
// ComExitBuilding ( i ) else
6150: LD_VAR 0 1
6154: PPUSH
6155: CALL_OW 122
6159: GO 6179
// ComHeal ( i , tmp [ 1 ] ) ;
6161: LD_VAR 0 1
6165: PPUSH
6166: LD_VAR 0 3
6170: PUSH
6171: LD_INT 1
6173: ARRAY
6174: PPUSH
6175: CALL_OW 128
6179: GO 6136
6181: POP
6182: POP
// end ;
6183: PPOPN 3
6185: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6186: LD_EXP 7
6190: NOT
6191: PUSH
6192: LD_EXP 9
6196: AND
6197: PUSH
6198: LD_INT 1
6200: PPUSH
6201: CALL_OW 302
6205: AND
6206: PUSH
6207: LD_INT 9
6209: PPUSH
6210: LD_INT 22
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 21
6222: PUSH
6223: LD_INT 1
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: PUSH
6230: LD_INT 3
6232: PUSH
6233: LD_INT 24
6235: PUSH
6236: LD_INT 1000
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 70
6256: NOT
6257: AND
6258: PUSH
6259: LD_INT 22
6261: PUSH
6262: LD_INT 1
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: LD_INT 25
6271: PUSH
6272: LD_INT 4
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: LD_INT 56
6281: PUSH
6282: EMPTY
6283: LIST
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: PPUSH
6290: CALL_OW 69
6294: AND
6295: IFFALSE 6388
6297: GO 6299
6299: DISABLE
6300: LD_INT 0
6302: PPUSH
// begin enable ;
6303: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6304: LD_ADDR_VAR 0 1
6308: PUSH
6309: LD_INT 22
6311: PUSH
6312: LD_INT 1
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 25
6321: PUSH
6322: LD_INT 4
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 56
6331: PUSH
6332: EMPTY
6333: LIST
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: LIST
6339: PPUSH
6340: CALL_OW 69
6344: PUSH
6345: FOR_IN
6346: IFFALSE 6386
// if not GetTag ( i ) and not HasTask ( i ) then
6348: LD_VAR 0 1
6352: PPUSH
6353: CALL_OW 110
6357: NOT
6358: PUSH
6359: LD_VAR 0 1
6363: PPUSH
6364: CALL_OW 314
6368: NOT
6369: AND
6370: IFFALSE 6384
// ComEnterUnit ( i , us_lab ) ;
6372: LD_VAR 0 1
6376: PPUSH
6377: LD_INT 1
6379: PPUSH
6380: CALL_OW 120
6384: GO 6345
6386: POP
6387: POP
// end ;
6388: PPOPN 1
6390: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6391: LD_EXP 7
6395: NOT
6396: PUSH
6397: LD_INT 9
6399: PPUSH
6400: LD_INT 22
6402: PUSH
6403: LD_INT 1
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 21
6412: PUSH
6413: LD_INT 3
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: LD_INT 3
6422: PUSH
6423: LD_INT 24
6425: PUSH
6426: LD_INT 1000
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: PPUSH
6442: CALL_OW 70
6446: NOT
6447: AND
6448: PUSH
6449: LD_INT 22
6451: PUSH
6452: LD_INT 1
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 25
6461: PUSH
6462: LD_INT 2
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 56
6471: PUSH
6472: EMPTY
6473: LIST
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: PPUSH
6480: CALL_OW 69
6484: AND
6485: IFFALSE 6578
6487: GO 6489
6489: DISABLE
6490: LD_INT 0
6492: PPUSH
// begin enable ;
6493: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6494: LD_ADDR_VAR 0 1
6498: PUSH
6499: LD_INT 22
6501: PUSH
6502: LD_INT 1
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 25
6511: PUSH
6512: LD_INT 2
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: PUSH
6519: LD_INT 56
6521: PUSH
6522: EMPTY
6523: LIST
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: LIST
6529: PPUSH
6530: CALL_OW 69
6534: PUSH
6535: FOR_IN
6536: IFFALSE 6576
// if not HasTask ( i ) and not GetTag ( i ) then
6538: LD_VAR 0 1
6542: PPUSH
6543: CALL_OW 314
6547: NOT
6548: PUSH
6549: LD_VAR 0 1
6553: PPUSH
6554: CALL_OW 110
6558: NOT
6559: AND
6560: IFFALSE 6574
// ComEnterUnit ( i , us_depot ) ;
6562: LD_VAR 0 1
6566: PPUSH
6567: LD_INT 5
6569: PPUSH
6570: CALL_OW 120
6574: GO 6535
6576: POP
6577: POP
// end ;
6578: PPOPN 1
6580: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6581: LD_EXP 9
6585: PUSH
6586: LD_INT 0
6588: LESSEQUAL
6589: PUSH
6590: LD_EXP 18
6594: PPUSH
6595: CALL_OW 301
6599: OR
6600: PUSH
6601: LD_INT 22
6603: PUSH
6604: LD_INT 1
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 25
6613: PUSH
6614: LD_INT 2
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PPUSH
6625: CALL_OW 69
6629: AND
6630: IFFALSE 6671
6632: GO 6634
6634: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6635: LD_INT 22
6637: PUSH
6638: LD_INT 1
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: LD_INT 25
6647: PUSH
6648: LD_INT 2
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PPUSH
6659: CALL_OW 69
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL_OW 167
6671: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6672: LD_EXP 7
6676: NOT
6677: PUSH
6678: LD_INT 7
6680: PPUSH
6681: LD_INT 22
6683: PUSH
6684: LD_INT 7
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PPUSH
6691: CALL_OW 70
6695: AND
6696: IFFALSE 6787
6698: GO 6700
6700: DISABLE
6701: LD_INT 0
6703: PPUSH
// begin wait ( 0 0$2 ) ;
6704: LD_INT 70
6706: PPUSH
6707: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6711: LD_ADDR_VAR 0 1
6715: PUSH
6716: LD_INT 22
6718: PUSH
6719: LD_INT 1
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 25
6728: PUSH
6729: LD_INT 1
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PPUSH
6740: CALL_OW 69
6744: PUSH
6745: FOR_IN
6746: IFFALSE 6785
// begin if IsInUnit ( i ) then
6748: LD_VAR 0 1
6752: PPUSH
6753: CALL_OW 310
6757: IFFALSE 6768
// ComExitBuilding ( i ) ;
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6768: LD_VAR 0 1
6772: PPUSH
6773: LD_INT 92
6775: PPUSH
6776: LD_INT 78
6778: PPUSH
6779: CALL_OW 174
// end ;
6783: GO 6745
6785: POP
6786: POP
// end ; end_of_file
6787: PPOPN 1
6789: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6790: LD_VAR 0 1
6794: PPUSH
6795: LD_VAR 0 2
6799: PPUSH
6800: LD_VAR 0 3
6804: PPUSH
6805: CALL 1579 0 3
6809: PPOPN 3
6811: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6812: LD_EXP 14
6816: PPUSH
6817: CALL_OW 257
6821: PUSH
6822: LD_INT 4
6824: EQUAL
6825: PUSH
6826: LD_EXP 15
6830: PPUSH
6831: CALL_OW 257
6835: PUSH
6836: LD_INT 4
6838: EQUAL
6839: OR
6840: PUSH
6841: LD_INT 22
6843: PUSH
6844: LD_INT 7
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PUSH
6851: LD_INT 21
6853: PUSH
6854: LD_INT 3
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PPUSH
6865: CALL_OW 69
6869: OR
6870: IFFALSE 6874
// exit ;
6872: GO 6912
// if un = JMM then
6874: LD_VAR 0 1
6878: PUSH
6879: LD_EXP 14
6883: EQUAL
6884: IFFALSE 6893
// YouLost ( JMM ) ;
6886: LD_STRING JMM
6888: PPUSH
6889: CALL_OW 104
// if un = Burlak then
6893: LD_VAR 0 1
6897: PUSH
6898: LD_EXP 15
6902: EQUAL
6903: IFFALSE 6912
// YouLost ( Burlak ) ;
6905: LD_STRING Burlak
6907: PPUSH
6908: CALL_OW 104
// end ;
6912: PPOPN 1
6914: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6915: LD_VAR 0 1
6919: PPUSH
6920: CALL 23070 0 1
// if un = JMM then
6924: LD_VAR 0 1
6928: PUSH
6929: LD_EXP 14
6933: EQUAL
6934: IFFALSE 6943
// YouLost ( JMM ) ;
6936: LD_STRING JMM
6938: PPUSH
6939: CALL_OW 104
// if un = Burlak then
6943: LD_VAR 0 1
6947: PUSH
6948: LD_EXP 15
6952: EQUAL
6953: IFFALSE 6962
// YouLost ( Burlak ) ;
6955: LD_STRING Burlak
6957: PPUSH
6958: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
6962: LD_VAR 0 1
6966: PUSH
6967: LD_INT 21
6969: PUSH
6970: LD_INT 1
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 23
6979: PUSH
6980: LD_INT 1
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PPUSH
6991: CALL_OW 69
6995: IN
6996: IFFALSE 7012
// killCounter := killCounter + 1 ;
6998: LD_ADDR_EXP 12
7002: PUSH
7003: LD_EXP 12
7007: PUSH
7008: LD_INT 1
7010: PLUS
7011: ST_TO_ADDR
// end ;
7012: PPOPN 1
7014: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
7015: LD_VAR 0 2
7019: PUSH
7020: LD_INT 7
7022: EQUAL
7023: PUSH
7024: LD_VAR 0 1
7028: PUSH
7029: LD_INT 2
7031: PUSH
7032: LD_INT 30
7034: PUSH
7035: LD_INT 31
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 30
7044: PUSH
7045: LD_INT 32
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: LD_INT 30
7054: PUSH
7055: LD_INT 33
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: PPUSH
7068: CALL_OW 69
7072: IN
7073: AND
7074: IFFALSE 7090
// bunkerCounter := bunkerCounter + 1 ;
7076: LD_ADDR_EXP 13
7080: PUSH
7081: LD_EXP 13
7085: PUSH
7086: LD_INT 1
7088: PLUS
7089: ST_TO_ADDR
// end ;
7090: PPOPN 3
7092: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7093: LD_VAR 0 1
7097: PPUSH
7098: CALL_OW 255
7102: PUSH
7103: LD_INT 7
7105: EQUAL
7106: IFFALSE 7116
// artifactPickedUp := true ;
7108: LD_ADDR_EXP 6
7112: PUSH
7113: LD_INT 1
7115: ST_TO_ADDR
// end ;
7116: PPOPN 2
7118: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7119: LD_ADDR_EXP 6
7123: PUSH
7124: LD_INT 0
7126: ST_TO_ADDR
7127: PPOPN 2
7129: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7130: LD_VAR 0 1
7134: PPUSH
7135: LD_VAR 0 2
7139: PPUSH
7140: CALL 23190 0 2
// if GetSide ( vehicle ) <> 1 then
7144: LD_VAR 0 1
7148: PPUSH
7149: CALL_OW 255
7153: PUSH
7154: LD_INT 1
7156: NONEQUAL
7157: IFFALSE 7161
// exit ;
7159: GO 7208
// wait ( 0 0$5 ) ;
7161: LD_INT 175
7163: PPUSH
7164: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7168: LD_VAR 0 1
7172: PPUSH
7173: CALL_OW 263
7177: PUSH
7178: LD_INT 2
7180: EQUAL
7181: IFFALSE 7192
// Connect ( vehicle ) ;
7183: LD_VAR 0 1
7187: PPUSH
7188: CALL 35465 0 1
// vehGuard := vehGuard ^ vehicle ;
7192: LD_ADDR_EXP 23
7196: PUSH
7197: LD_EXP 23
7201: PUSH
7202: LD_VAR 0 1
7206: ADD
7207: ST_TO_ADDR
// end ;
7208: PPOPN 2
7210: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7211: LD_VAR 0 1
7215: PUSH
7216: LD_INT 1
7218: EQUAL
7219: PUSH
7220: LD_EXP 7
7224: NOT
7225: AND
7226: IFFALSE 7261
// begin planCaptured := true ;
7228: LD_ADDR_EXP 7
7232: PUSH
7233: LD_INT 1
7235: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7236: LD_STRING MEnd
7238: PPUSH
7239: CALL_OW 337
// canEnd := true ;
7243: LD_ADDR_EXP 10
7247: PUSH
7248: LD_INT 1
7250: ST_TO_ADDR
// missionTime := tick ;
7251: LD_ADDR_EXP 11
7255: PUSH
7256: LD_OWVAR 1
7260: ST_TO_ADDR
// end ; end ;
7261: PPOPN 3
7263: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7264: LD_VAR 0 1
7268: PPUSH
7269: CALL 23174 0 1
// end ; end_of_file end_of_file
7273: PPOPN 1
7275: END
// export globalGameSaveCounter ; every 0 0$1 do
7276: GO 7278
7278: DISABLE
// begin enable ;
7279: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7280: LD_STRING updateTimer(
7282: PUSH
7283: LD_OWVAR 1
7287: STR
7288: PUSH
7289: LD_STRING );
7291: STR
7292: PPUSH
7293: CALL_OW 559
// end ;
7297: END
// every 0 0$1 do
7298: GO 7300
7300: DISABLE
// begin globalGameSaveCounter := 0 ;
7301: LD_ADDR_EXP 24
7305: PUSH
7306: LD_INT 0
7308: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7309: LD_STRING setGameSaveCounter(0)
7311: PPUSH
7312: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7316: LD_STRING initStreamRollete();
7318: PPUSH
7319: CALL_OW 559
// InitStreamMode ;
7323: CALL 8649 0 0
// DefineStreamItems ( false ) ;
7327: LD_INT 0
7329: PPUSH
7330: CALL 9113 0 1
// end ;
7334: END
// export function SOS_MapStart ( ) ; begin
7335: LD_INT 0
7337: PPUSH
// if streamModeActive then
7338: LD_EXP 25
7342: IFFALSE 7351
// DefineStreamItems ( true ) ;
7344: LD_INT 1
7346: PPUSH
7347: CALL 9113 0 1
// UpdateLuaVariables ( ) ;
7351: CALL 7368 0 0
// UpdateFactoryWaypoints ( ) ;
7355: CALL 21974 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7359: CALL 22231 0 0
// end ;
7363: LD_VAR 0 1
7367: RET
// function UpdateLuaVariables ( ) ; begin
7368: LD_INT 0
7370: PPUSH
// if globalGameSaveCounter then
7371: LD_EXP 24
7375: IFFALSE 7409
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7377: LD_ADDR_EXP 24
7381: PUSH
7382: LD_EXP 24
7386: PPUSH
7387: CALL 66188 0 1
7391: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7392: LD_STRING setGameSaveCounter(
7394: PUSH
7395: LD_EXP 24
7399: STR
7400: PUSH
7401: LD_STRING )
7403: STR
7404: PPUSH
7405: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7409: LD_STRING setGameDifficulty(
7411: PUSH
7412: LD_OWVAR 67
7416: STR
7417: PUSH
7418: LD_STRING )
7420: STR
7421: PPUSH
7422: CALL_OW 559
// end ;
7426: LD_VAR 0 1
7430: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7431: LD_INT 0
7433: PPUSH
// if p2 = stream_mode then
7434: LD_VAR 0 2
7438: PUSH
7439: LD_INT 100
7441: EQUAL
7442: IFFALSE 8445
// begin if not StreamModeActive then
7444: LD_EXP 25
7448: NOT
7449: IFFALSE 7459
// StreamModeActive := true ;
7451: LD_ADDR_EXP 25
7455: PUSH
7456: LD_INT 1
7458: ST_TO_ADDR
// if p3 = 0 then
7459: LD_VAR 0 3
7463: PUSH
7464: LD_INT 0
7466: EQUAL
7467: IFFALSE 7473
// InitStreamMode ;
7469: CALL 8649 0 0
// if p3 = 1 then
7473: LD_VAR 0 3
7477: PUSH
7478: LD_INT 1
7480: EQUAL
7481: IFFALSE 7491
// sRocket := true ;
7483: LD_ADDR_EXP 30
7487: PUSH
7488: LD_INT 1
7490: ST_TO_ADDR
// if p3 = 2 then
7491: LD_VAR 0 3
7495: PUSH
7496: LD_INT 2
7498: EQUAL
7499: IFFALSE 7509
// sSpeed := true ;
7501: LD_ADDR_EXP 29
7505: PUSH
7506: LD_INT 1
7508: ST_TO_ADDR
// if p3 = 3 then
7509: LD_VAR 0 3
7513: PUSH
7514: LD_INT 3
7516: EQUAL
7517: IFFALSE 7527
// sEngine := true ;
7519: LD_ADDR_EXP 31
7523: PUSH
7524: LD_INT 1
7526: ST_TO_ADDR
// if p3 = 4 then
7527: LD_VAR 0 3
7531: PUSH
7532: LD_INT 4
7534: EQUAL
7535: IFFALSE 7545
// sSpec := true ;
7537: LD_ADDR_EXP 28
7541: PUSH
7542: LD_INT 1
7544: ST_TO_ADDR
// if p3 = 5 then
7545: LD_VAR 0 3
7549: PUSH
7550: LD_INT 5
7552: EQUAL
7553: IFFALSE 7563
// sLevel := true ;
7555: LD_ADDR_EXP 32
7559: PUSH
7560: LD_INT 1
7562: ST_TO_ADDR
// if p3 = 6 then
7563: LD_VAR 0 3
7567: PUSH
7568: LD_INT 6
7570: EQUAL
7571: IFFALSE 7581
// sArmoury := true ;
7573: LD_ADDR_EXP 33
7577: PUSH
7578: LD_INT 1
7580: ST_TO_ADDR
// if p3 = 7 then
7581: LD_VAR 0 3
7585: PUSH
7586: LD_INT 7
7588: EQUAL
7589: IFFALSE 7599
// sRadar := true ;
7591: LD_ADDR_EXP 34
7595: PUSH
7596: LD_INT 1
7598: ST_TO_ADDR
// if p3 = 8 then
7599: LD_VAR 0 3
7603: PUSH
7604: LD_INT 8
7606: EQUAL
7607: IFFALSE 7617
// sBunker := true ;
7609: LD_ADDR_EXP 35
7613: PUSH
7614: LD_INT 1
7616: ST_TO_ADDR
// if p3 = 9 then
7617: LD_VAR 0 3
7621: PUSH
7622: LD_INT 9
7624: EQUAL
7625: IFFALSE 7635
// sHack := true ;
7627: LD_ADDR_EXP 36
7631: PUSH
7632: LD_INT 1
7634: ST_TO_ADDR
// if p3 = 10 then
7635: LD_VAR 0 3
7639: PUSH
7640: LD_INT 10
7642: EQUAL
7643: IFFALSE 7653
// sFire := true ;
7645: LD_ADDR_EXP 37
7649: PUSH
7650: LD_INT 1
7652: ST_TO_ADDR
// if p3 = 11 then
7653: LD_VAR 0 3
7657: PUSH
7658: LD_INT 11
7660: EQUAL
7661: IFFALSE 7671
// sRefresh := true ;
7663: LD_ADDR_EXP 38
7667: PUSH
7668: LD_INT 1
7670: ST_TO_ADDR
// if p3 = 12 then
7671: LD_VAR 0 3
7675: PUSH
7676: LD_INT 12
7678: EQUAL
7679: IFFALSE 7689
// sExp := true ;
7681: LD_ADDR_EXP 39
7685: PUSH
7686: LD_INT 1
7688: ST_TO_ADDR
// if p3 = 13 then
7689: LD_VAR 0 3
7693: PUSH
7694: LD_INT 13
7696: EQUAL
7697: IFFALSE 7707
// sDepot := true ;
7699: LD_ADDR_EXP 40
7703: PUSH
7704: LD_INT 1
7706: ST_TO_ADDR
// if p3 = 14 then
7707: LD_VAR 0 3
7711: PUSH
7712: LD_INT 14
7714: EQUAL
7715: IFFALSE 7725
// sFlag := true ;
7717: LD_ADDR_EXP 41
7721: PUSH
7722: LD_INT 1
7724: ST_TO_ADDR
// if p3 = 15 then
7725: LD_VAR 0 3
7729: PUSH
7730: LD_INT 15
7732: EQUAL
7733: IFFALSE 7743
// sKamikadze := true ;
7735: LD_ADDR_EXP 49
7739: PUSH
7740: LD_INT 1
7742: ST_TO_ADDR
// if p3 = 16 then
7743: LD_VAR 0 3
7747: PUSH
7748: LD_INT 16
7750: EQUAL
7751: IFFALSE 7761
// sTroll := true ;
7753: LD_ADDR_EXP 50
7757: PUSH
7758: LD_INT 1
7760: ST_TO_ADDR
// if p3 = 17 then
7761: LD_VAR 0 3
7765: PUSH
7766: LD_INT 17
7768: EQUAL
7769: IFFALSE 7779
// sSlow := true ;
7771: LD_ADDR_EXP 51
7775: PUSH
7776: LD_INT 1
7778: ST_TO_ADDR
// if p3 = 18 then
7779: LD_VAR 0 3
7783: PUSH
7784: LD_INT 18
7786: EQUAL
7787: IFFALSE 7797
// sLack := true ;
7789: LD_ADDR_EXP 52
7793: PUSH
7794: LD_INT 1
7796: ST_TO_ADDR
// if p3 = 19 then
7797: LD_VAR 0 3
7801: PUSH
7802: LD_INT 19
7804: EQUAL
7805: IFFALSE 7815
// sTank := true ;
7807: LD_ADDR_EXP 54
7811: PUSH
7812: LD_INT 1
7814: ST_TO_ADDR
// if p3 = 20 then
7815: LD_VAR 0 3
7819: PUSH
7820: LD_INT 20
7822: EQUAL
7823: IFFALSE 7833
// sRemote := true ;
7825: LD_ADDR_EXP 55
7829: PUSH
7830: LD_INT 1
7832: ST_TO_ADDR
// if p3 = 21 then
7833: LD_VAR 0 3
7837: PUSH
7838: LD_INT 21
7840: EQUAL
7841: IFFALSE 7851
// sPowell := true ;
7843: LD_ADDR_EXP 56
7847: PUSH
7848: LD_INT 1
7850: ST_TO_ADDR
// if p3 = 22 then
7851: LD_VAR 0 3
7855: PUSH
7856: LD_INT 22
7858: EQUAL
7859: IFFALSE 7869
// sTeleport := true ;
7861: LD_ADDR_EXP 59
7865: PUSH
7866: LD_INT 1
7868: ST_TO_ADDR
// if p3 = 23 then
7869: LD_VAR 0 3
7873: PUSH
7874: LD_INT 23
7876: EQUAL
7877: IFFALSE 7887
// sOilTower := true ;
7879: LD_ADDR_EXP 61
7883: PUSH
7884: LD_INT 1
7886: ST_TO_ADDR
// if p3 = 24 then
7887: LD_VAR 0 3
7891: PUSH
7892: LD_INT 24
7894: EQUAL
7895: IFFALSE 7905
// sShovel := true ;
7897: LD_ADDR_EXP 62
7901: PUSH
7902: LD_INT 1
7904: ST_TO_ADDR
// if p3 = 25 then
7905: LD_VAR 0 3
7909: PUSH
7910: LD_INT 25
7912: EQUAL
7913: IFFALSE 7923
// sSheik := true ;
7915: LD_ADDR_EXP 63
7919: PUSH
7920: LD_INT 1
7922: ST_TO_ADDR
// if p3 = 26 then
7923: LD_VAR 0 3
7927: PUSH
7928: LD_INT 26
7930: EQUAL
7931: IFFALSE 7941
// sEarthquake := true ;
7933: LD_ADDR_EXP 65
7937: PUSH
7938: LD_INT 1
7940: ST_TO_ADDR
// if p3 = 27 then
7941: LD_VAR 0 3
7945: PUSH
7946: LD_INT 27
7948: EQUAL
7949: IFFALSE 7959
// sAI := true ;
7951: LD_ADDR_EXP 66
7955: PUSH
7956: LD_INT 1
7958: ST_TO_ADDR
// if p3 = 28 then
7959: LD_VAR 0 3
7963: PUSH
7964: LD_INT 28
7966: EQUAL
7967: IFFALSE 7977
// sCargo := true ;
7969: LD_ADDR_EXP 69
7973: PUSH
7974: LD_INT 1
7976: ST_TO_ADDR
// if p3 = 29 then
7977: LD_VAR 0 3
7981: PUSH
7982: LD_INT 29
7984: EQUAL
7985: IFFALSE 7995
// sDLaser := true ;
7987: LD_ADDR_EXP 70
7991: PUSH
7992: LD_INT 1
7994: ST_TO_ADDR
// if p3 = 30 then
7995: LD_VAR 0 3
7999: PUSH
8000: LD_INT 30
8002: EQUAL
8003: IFFALSE 8013
// sExchange := true ;
8005: LD_ADDR_EXP 71
8009: PUSH
8010: LD_INT 1
8012: ST_TO_ADDR
// if p3 = 31 then
8013: LD_VAR 0 3
8017: PUSH
8018: LD_INT 31
8020: EQUAL
8021: IFFALSE 8031
// sFac := true ;
8023: LD_ADDR_EXP 72
8027: PUSH
8028: LD_INT 1
8030: ST_TO_ADDR
// if p3 = 32 then
8031: LD_VAR 0 3
8035: PUSH
8036: LD_INT 32
8038: EQUAL
8039: IFFALSE 8049
// sPower := true ;
8041: LD_ADDR_EXP 73
8045: PUSH
8046: LD_INT 1
8048: ST_TO_ADDR
// if p3 = 33 then
8049: LD_VAR 0 3
8053: PUSH
8054: LD_INT 33
8056: EQUAL
8057: IFFALSE 8067
// sRandom := true ;
8059: LD_ADDR_EXP 74
8063: PUSH
8064: LD_INT 1
8066: ST_TO_ADDR
// if p3 = 34 then
8067: LD_VAR 0 3
8071: PUSH
8072: LD_INT 34
8074: EQUAL
8075: IFFALSE 8085
// sShield := true ;
8077: LD_ADDR_EXP 75
8081: PUSH
8082: LD_INT 1
8084: ST_TO_ADDR
// if p3 = 35 then
8085: LD_VAR 0 3
8089: PUSH
8090: LD_INT 35
8092: EQUAL
8093: IFFALSE 8103
// sTime := true ;
8095: LD_ADDR_EXP 76
8099: PUSH
8100: LD_INT 1
8102: ST_TO_ADDR
// if p3 = 36 then
8103: LD_VAR 0 3
8107: PUSH
8108: LD_INT 36
8110: EQUAL
8111: IFFALSE 8121
// sTools := true ;
8113: LD_ADDR_EXP 77
8117: PUSH
8118: LD_INT 1
8120: ST_TO_ADDR
// if p3 = 101 then
8121: LD_VAR 0 3
8125: PUSH
8126: LD_INT 101
8128: EQUAL
8129: IFFALSE 8139
// sSold := true ;
8131: LD_ADDR_EXP 42
8135: PUSH
8136: LD_INT 1
8138: ST_TO_ADDR
// if p3 = 102 then
8139: LD_VAR 0 3
8143: PUSH
8144: LD_INT 102
8146: EQUAL
8147: IFFALSE 8157
// sDiff := true ;
8149: LD_ADDR_EXP 43
8153: PUSH
8154: LD_INT 1
8156: ST_TO_ADDR
// if p3 = 103 then
8157: LD_VAR 0 3
8161: PUSH
8162: LD_INT 103
8164: EQUAL
8165: IFFALSE 8175
// sFog := true ;
8167: LD_ADDR_EXP 46
8171: PUSH
8172: LD_INT 1
8174: ST_TO_ADDR
// if p3 = 104 then
8175: LD_VAR 0 3
8179: PUSH
8180: LD_INT 104
8182: EQUAL
8183: IFFALSE 8193
// sReset := true ;
8185: LD_ADDR_EXP 47
8189: PUSH
8190: LD_INT 1
8192: ST_TO_ADDR
// if p3 = 105 then
8193: LD_VAR 0 3
8197: PUSH
8198: LD_INT 105
8200: EQUAL
8201: IFFALSE 8211
// sSun := true ;
8203: LD_ADDR_EXP 48
8207: PUSH
8208: LD_INT 1
8210: ST_TO_ADDR
// if p3 = 106 then
8211: LD_VAR 0 3
8215: PUSH
8216: LD_INT 106
8218: EQUAL
8219: IFFALSE 8229
// sTiger := true ;
8221: LD_ADDR_EXP 44
8225: PUSH
8226: LD_INT 1
8228: ST_TO_ADDR
// if p3 = 107 then
8229: LD_VAR 0 3
8233: PUSH
8234: LD_INT 107
8236: EQUAL
8237: IFFALSE 8247
// sBomb := true ;
8239: LD_ADDR_EXP 45
8243: PUSH
8244: LD_INT 1
8246: ST_TO_ADDR
// if p3 = 108 then
8247: LD_VAR 0 3
8251: PUSH
8252: LD_INT 108
8254: EQUAL
8255: IFFALSE 8265
// sWound := true ;
8257: LD_ADDR_EXP 53
8261: PUSH
8262: LD_INT 1
8264: ST_TO_ADDR
// if p3 = 109 then
8265: LD_VAR 0 3
8269: PUSH
8270: LD_INT 109
8272: EQUAL
8273: IFFALSE 8283
// sBetray := true ;
8275: LD_ADDR_EXP 57
8279: PUSH
8280: LD_INT 1
8282: ST_TO_ADDR
// if p3 = 110 then
8283: LD_VAR 0 3
8287: PUSH
8288: LD_INT 110
8290: EQUAL
8291: IFFALSE 8301
// sContamin := true ;
8293: LD_ADDR_EXP 58
8297: PUSH
8298: LD_INT 1
8300: ST_TO_ADDR
// if p3 = 111 then
8301: LD_VAR 0 3
8305: PUSH
8306: LD_INT 111
8308: EQUAL
8309: IFFALSE 8319
// sOil := true ;
8311: LD_ADDR_EXP 60
8315: PUSH
8316: LD_INT 1
8318: ST_TO_ADDR
// if p3 = 112 then
8319: LD_VAR 0 3
8323: PUSH
8324: LD_INT 112
8326: EQUAL
8327: IFFALSE 8337
// sStu := true ;
8329: LD_ADDR_EXP 64
8333: PUSH
8334: LD_INT 1
8336: ST_TO_ADDR
// if p3 = 113 then
8337: LD_VAR 0 3
8341: PUSH
8342: LD_INT 113
8344: EQUAL
8345: IFFALSE 8355
// sBazooka := true ;
8347: LD_ADDR_EXP 67
8351: PUSH
8352: LD_INT 1
8354: ST_TO_ADDR
// if p3 = 114 then
8355: LD_VAR 0 3
8359: PUSH
8360: LD_INT 114
8362: EQUAL
8363: IFFALSE 8373
// sMortar := true ;
8365: LD_ADDR_EXP 68
8369: PUSH
8370: LD_INT 1
8372: ST_TO_ADDR
// if p3 = 115 then
8373: LD_VAR 0 3
8377: PUSH
8378: LD_INT 115
8380: EQUAL
8381: IFFALSE 8391
// sRanger := true ;
8383: LD_ADDR_EXP 78
8387: PUSH
8388: LD_INT 1
8390: ST_TO_ADDR
// if p3 = 116 then
8391: LD_VAR 0 3
8395: PUSH
8396: LD_INT 116
8398: EQUAL
8399: IFFALSE 8409
// sComputer := true ;
8401: LD_ADDR_EXP 79
8405: PUSH
8406: LD_INT 1
8408: ST_TO_ADDR
// if p3 = 117 then
8409: LD_VAR 0 3
8413: PUSH
8414: LD_INT 117
8416: EQUAL
8417: IFFALSE 8427
// s30 := true ;
8419: LD_ADDR_EXP 80
8423: PUSH
8424: LD_INT 1
8426: ST_TO_ADDR
// if p3 = 118 then
8427: LD_VAR 0 3
8431: PUSH
8432: LD_INT 118
8434: EQUAL
8435: IFFALSE 8445
// s60 := true ;
8437: LD_ADDR_EXP 81
8441: PUSH
8442: LD_INT 1
8444: ST_TO_ADDR
// end ; if p2 = hack_mode then
8445: LD_VAR 0 2
8449: PUSH
8450: LD_INT 101
8452: EQUAL
8453: IFFALSE 8581
// begin case p3 of 1 :
8455: LD_VAR 0 3
8459: PUSH
8460: LD_INT 1
8462: DOUBLE
8463: EQUAL
8464: IFTRUE 8468
8466: GO 8475
8468: POP
// hHackUnlimitedResources ; 2 :
8469: CALL 20720 0 0
8473: GO 8581
8475: LD_INT 2
8477: DOUBLE
8478: EQUAL
8479: IFTRUE 8483
8481: GO 8490
8483: POP
// hHackSetLevel10 ; 3 :
8484: CALL 20853 0 0
8488: GO 8581
8490: LD_INT 3
8492: DOUBLE
8493: EQUAL
8494: IFTRUE 8498
8496: GO 8505
8498: POP
// hHackSetLevel10YourUnits ; 4 :
8499: CALL 20938 0 0
8503: GO 8581
8505: LD_INT 4
8507: DOUBLE
8508: EQUAL
8509: IFTRUE 8513
8511: GO 8520
8513: POP
// hHackInvincible ; 5 :
8514: CALL 21386 0 0
8518: GO 8581
8520: LD_INT 5
8522: DOUBLE
8523: EQUAL
8524: IFTRUE 8528
8526: GO 8535
8528: POP
// hHackInvisible ; 6 :
8529: CALL 21497 0 0
8533: GO 8581
8535: LD_INT 6
8537: DOUBLE
8538: EQUAL
8539: IFTRUE 8543
8541: GO 8550
8543: POP
// hHackChangeYourSide ; 7 :
8544: CALL 21554 0 0
8548: GO 8581
8550: LD_INT 7
8552: DOUBLE
8553: EQUAL
8554: IFTRUE 8558
8556: GO 8565
8558: POP
// hHackChangeUnitSide ; 8 :
8559: CALL 21596 0 0
8563: GO 8581
8565: LD_INT 8
8567: DOUBLE
8568: EQUAL
8569: IFTRUE 8573
8571: GO 8580
8573: POP
// hHackFog ; end ;
8574: CALL 21697 0 0
8578: GO 8581
8580: POP
// end ; if p2 = game_save_mode then
8581: LD_VAR 0 2
8585: PUSH
8586: LD_INT 102
8588: EQUAL
8589: IFFALSE 8644
// begin if p3 = 1 then
8591: LD_VAR 0 3
8595: PUSH
8596: LD_INT 1
8598: EQUAL
8599: IFFALSE 8611
// globalGameSaveCounter := p4 ;
8601: LD_ADDR_EXP 24
8605: PUSH
8606: LD_VAR 0 4
8610: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8611: LD_VAR 0 3
8615: PUSH
8616: LD_INT 2
8618: EQUAL
8619: PUSH
8620: LD_EXP 24
8624: AND
8625: IFFALSE 8644
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8627: LD_STRING setGameSaveCounter(
8629: PUSH
8630: LD_EXP 24
8634: STR
8635: PUSH
8636: LD_STRING )
8638: STR
8639: PPUSH
8640: CALL_OW 559
// end ; end ;
8644: LD_VAR 0 7
8648: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8649: LD_INT 0
8651: PPUSH
// streamModeActive := false ;
8652: LD_ADDR_EXP 25
8656: PUSH
8657: LD_INT 0
8659: ST_TO_ADDR
// normalCounter := 36 ;
8660: LD_ADDR_EXP 26
8664: PUSH
8665: LD_INT 36
8667: ST_TO_ADDR
// hardcoreCounter := 18 ;
8668: LD_ADDR_EXP 27
8672: PUSH
8673: LD_INT 18
8675: ST_TO_ADDR
// sRocket := false ;
8676: LD_ADDR_EXP 30
8680: PUSH
8681: LD_INT 0
8683: ST_TO_ADDR
// sSpeed := false ;
8684: LD_ADDR_EXP 29
8688: PUSH
8689: LD_INT 0
8691: ST_TO_ADDR
// sEngine := false ;
8692: LD_ADDR_EXP 31
8696: PUSH
8697: LD_INT 0
8699: ST_TO_ADDR
// sSpec := false ;
8700: LD_ADDR_EXP 28
8704: PUSH
8705: LD_INT 0
8707: ST_TO_ADDR
// sLevel := false ;
8708: LD_ADDR_EXP 32
8712: PUSH
8713: LD_INT 0
8715: ST_TO_ADDR
// sArmoury := false ;
8716: LD_ADDR_EXP 33
8720: PUSH
8721: LD_INT 0
8723: ST_TO_ADDR
// sRadar := false ;
8724: LD_ADDR_EXP 34
8728: PUSH
8729: LD_INT 0
8731: ST_TO_ADDR
// sBunker := false ;
8732: LD_ADDR_EXP 35
8736: PUSH
8737: LD_INT 0
8739: ST_TO_ADDR
// sHack := false ;
8740: LD_ADDR_EXP 36
8744: PUSH
8745: LD_INT 0
8747: ST_TO_ADDR
// sFire := false ;
8748: LD_ADDR_EXP 37
8752: PUSH
8753: LD_INT 0
8755: ST_TO_ADDR
// sRefresh := false ;
8756: LD_ADDR_EXP 38
8760: PUSH
8761: LD_INT 0
8763: ST_TO_ADDR
// sExp := false ;
8764: LD_ADDR_EXP 39
8768: PUSH
8769: LD_INT 0
8771: ST_TO_ADDR
// sDepot := false ;
8772: LD_ADDR_EXP 40
8776: PUSH
8777: LD_INT 0
8779: ST_TO_ADDR
// sFlag := false ;
8780: LD_ADDR_EXP 41
8784: PUSH
8785: LD_INT 0
8787: ST_TO_ADDR
// sKamikadze := false ;
8788: LD_ADDR_EXP 49
8792: PUSH
8793: LD_INT 0
8795: ST_TO_ADDR
// sTroll := false ;
8796: LD_ADDR_EXP 50
8800: PUSH
8801: LD_INT 0
8803: ST_TO_ADDR
// sSlow := false ;
8804: LD_ADDR_EXP 51
8808: PUSH
8809: LD_INT 0
8811: ST_TO_ADDR
// sLack := false ;
8812: LD_ADDR_EXP 52
8816: PUSH
8817: LD_INT 0
8819: ST_TO_ADDR
// sTank := false ;
8820: LD_ADDR_EXP 54
8824: PUSH
8825: LD_INT 0
8827: ST_TO_ADDR
// sRemote := false ;
8828: LD_ADDR_EXP 55
8832: PUSH
8833: LD_INT 0
8835: ST_TO_ADDR
// sPowell := false ;
8836: LD_ADDR_EXP 56
8840: PUSH
8841: LD_INT 0
8843: ST_TO_ADDR
// sTeleport := false ;
8844: LD_ADDR_EXP 59
8848: PUSH
8849: LD_INT 0
8851: ST_TO_ADDR
// sOilTower := false ;
8852: LD_ADDR_EXP 61
8856: PUSH
8857: LD_INT 0
8859: ST_TO_ADDR
// sShovel := false ;
8860: LD_ADDR_EXP 62
8864: PUSH
8865: LD_INT 0
8867: ST_TO_ADDR
// sSheik := false ;
8868: LD_ADDR_EXP 63
8872: PUSH
8873: LD_INT 0
8875: ST_TO_ADDR
// sEarthquake := false ;
8876: LD_ADDR_EXP 65
8880: PUSH
8881: LD_INT 0
8883: ST_TO_ADDR
// sAI := false ;
8884: LD_ADDR_EXP 66
8888: PUSH
8889: LD_INT 0
8891: ST_TO_ADDR
// sCargo := false ;
8892: LD_ADDR_EXP 69
8896: PUSH
8897: LD_INT 0
8899: ST_TO_ADDR
// sDLaser := false ;
8900: LD_ADDR_EXP 70
8904: PUSH
8905: LD_INT 0
8907: ST_TO_ADDR
// sExchange := false ;
8908: LD_ADDR_EXP 71
8912: PUSH
8913: LD_INT 0
8915: ST_TO_ADDR
// sFac := false ;
8916: LD_ADDR_EXP 72
8920: PUSH
8921: LD_INT 0
8923: ST_TO_ADDR
// sPower := false ;
8924: LD_ADDR_EXP 73
8928: PUSH
8929: LD_INT 0
8931: ST_TO_ADDR
// sRandom := false ;
8932: LD_ADDR_EXP 74
8936: PUSH
8937: LD_INT 0
8939: ST_TO_ADDR
// sShield := false ;
8940: LD_ADDR_EXP 75
8944: PUSH
8945: LD_INT 0
8947: ST_TO_ADDR
// sTime := false ;
8948: LD_ADDR_EXP 76
8952: PUSH
8953: LD_INT 0
8955: ST_TO_ADDR
// sTools := false ;
8956: LD_ADDR_EXP 77
8960: PUSH
8961: LD_INT 0
8963: ST_TO_ADDR
// sSold := false ;
8964: LD_ADDR_EXP 42
8968: PUSH
8969: LD_INT 0
8971: ST_TO_ADDR
// sDiff := false ;
8972: LD_ADDR_EXP 43
8976: PUSH
8977: LD_INT 0
8979: ST_TO_ADDR
// sFog := false ;
8980: LD_ADDR_EXP 46
8984: PUSH
8985: LD_INT 0
8987: ST_TO_ADDR
// sReset := false ;
8988: LD_ADDR_EXP 47
8992: PUSH
8993: LD_INT 0
8995: ST_TO_ADDR
// sSun := false ;
8996: LD_ADDR_EXP 48
9000: PUSH
9001: LD_INT 0
9003: ST_TO_ADDR
// sTiger := false ;
9004: LD_ADDR_EXP 44
9008: PUSH
9009: LD_INT 0
9011: ST_TO_ADDR
// sBomb := false ;
9012: LD_ADDR_EXP 45
9016: PUSH
9017: LD_INT 0
9019: ST_TO_ADDR
// sWound := false ;
9020: LD_ADDR_EXP 53
9024: PUSH
9025: LD_INT 0
9027: ST_TO_ADDR
// sBetray := false ;
9028: LD_ADDR_EXP 57
9032: PUSH
9033: LD_INT 0
9035: ST_TO_ADDR
// sContamin := false ;
9036: LD_ADDR_EXP 58
9040: PUSH
9041: LD_INT 0
9043: ST_TO_ADDR
// sOil := false ;
9044: LD_ADDR_EXP 60
9048: PUSH
9049: LD_INT 0
9051: ST_TO_ADDR
// sStu := false ;
9052: LD_ADDR_EXP 64
9056: PUSH
9057: LD_INT 0
9059: ST_TO_ADDR
// sBazooka := false ;
9060: LD_ADDR_EXP 67
9064: PUSH
9065: LD_INT 0
9067: ST_TO_ADDR
// sMortar := false ;
9068: LD_ADDR_EXP 68
9072: PUSH
9073: LD_INT 0
9075: ST_TO_ADDR
// sRanger := false ;
9076: LD_ADDR_EXP 78
9080: PUSH
9081: LD_INT 0
9083: ST_TO_ADDR
// sComputer := false ;
9084: LD_ADDR_EXP 79
9088: PUSH
9089: LD_INT 0
9091: ST_TO_ADDR
// s30 := false ;
9092: LD_ADDR_EXP 80
9096: PUSH
9097: LD_INT 0
9099: ST_TO_ADDR
// s60 := false ;
9100: LD_ADDR_EXP 81
9104: PUSH
9105: LD_INT 0
9107: ST_TO_ADDR
// end ;
9108: LD_VAR 0 1
9112: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9113: LD_INT 0
9115: PPUSH
9116: PPUSH
9117: PPUSH
9118: PPUSH
9119: PPUSH
9120: PPUSH
9121: PPUSH
// result := [ ] ;
9122: LD_ADDR_VAR 0 2
9126: PUSH
9127: EMPTY
9128: ST_TO_ADDR
// if campaign_id = 1 then
9129: LD_OWVAR 69
9133: PUSH
9134: LD_INT 1
9136: EQUAL
9137: IFFALSE 12303
// begin case mission_number of 1 :
9139: LD_OWVAR 70
9143: PUSH
9144: LD_INT 1
9146: DOUBLE
9147: EQUAL
9148: IFTRUE 9152
9150: GO 9228
9152: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9153: LD_ADDR_VAR 0 2
9157: PUSH
9158: LD_INT 2
9160: PUSH
9161: LD_INT 4
9163: PUSH
9164: LD_INT 11
9166: PUSH
9167: LD_INT 12
9169: PUSH
9170: LD_INT 15
9172: PUSH
9173: LD_INT 16
9175: PUSH
9176: LD_INT 22
9178: PUSH
9179: LD_INT 23
9181: PUSH
9182: LD_INT 26
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: PUSH
9196: LD_INT 101
9198: PUSH
9199: LD_INT 102
9201: PUSH
9202: LD_INT 106
9204: PUSH
9205: LD_INT 116
9207: PUSH
9208: LD_INT 117
9210: PUSH
9211: LD_INT 118
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: ST_TO_ADDR
9226: GO 12301
9228: LD_INT 2
9230: DOUBLE
9231: EQUAL
9232: IFTRUE 9236
9234: GO 9320
9236: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9237: LD_ADDR_VAR 0 2
9241: PUSH
9242: LD_INT 2
9244: PUSH
9245: LD_INT 4
9247: PUSH
9248: LD_INT 11
9250: PUSH
9251: LD_INT 12
9253: PUSH
9254: LD_INT 15
9256: PUSH
9257: LD_INT 16
9259: PUSH
9260: LD_INT 22
9262: PUSH
9263: LD_INT 23
9265: PUSH
9266: LD_INT 26
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: PUSH
9280: LD_INT 101
9282: PUSH
9283: LD_INT 102
9285: PUSH
9286: LD_INT 105
9288: PUSH
9289: LD_INT 106
9291: PUSH
9292: LD_INT 108
9294: PUSH
9295: LD_INT 116
9297: PUSH
9298: LD_INT 117
9300: PUSH
9301: LD_INT 118
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: ST_TO_ADDR
9318: GO 12301
9320: LD_INT 3
9322: DOUBLE
9323: EQUAL
9324: IFTRUE 9328
9326: GO 9416
9328: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9329: LD_ADDR_VAR 0 2
9333: PUSH
9334: LD_INT 2
9336: PUSH
9337: LD_INT 4
9339: PUSH
9340: LD_INT 5
9342: PUSH
9343: LD_INT 11
9345: PUSH
9346: LD_INT 12
9348: PUSH
9349: LD_INT 15
9351: PUSH
9352: LD_INT 16
9354: PUSH
9355: LD_INT 22
9357: PUSH
9358: LD_INT 26
9360: PUSH
9361: LD_INT 36
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: PUSH
9376: LD_INT 101
9378: PUSH
9379: LD_INT 102
9381: PUSH
9382: LD_INT 105
9384: PUSH
9385: LD_INT 106
9387: PUSH
9388: LD_INT 108
9390: PUSH
9391: LD_INT 116
9393: PUSH
9394: LD_INT 117
9396: PUSH
9397: LD_INT 118
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: ST_TO_ADDR
9414: GO 12301
9416: LD_INT 4
9418: DOUBLE
9419: EQUAL
9420: IFTRUE 9424
9422: GO 9520
9424: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9425: LD_ADDR_VAR 0 2
9429: PUSH
9430: LD_INT 2
9432: PUSH
9433: LD_INT 4
9435: PUSH
9436: LD_INT 5
9438: PUSH
9439: LD_INT 8
9441: PUSH
9442: LD_INT 11
9444: PUSH
9445: LD_INT 12
9447: PUSH
9448: LD_INT 15
9450: PUSH
9451: LD_INT 16
9453: PUSH
9454: LD_INT 22
9456: PUSH
9457: LD_INT 23
9459: PUSH
9460: LD_INT 26
9462: PUSH
9463: LD_INT 36
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 101
9482: PUSH
9483: LD_INT 102
9485: PUSH
9486: LD_INT 105
9488: PUSH
9489: LD_INT 106
9491: PUSH
9492: LD_INT 108
9494: PUSH
9495: LD_INT 116
9497: PUSH
9498: LD_INT 117
9500: PUSH
9501: LD_INT 118
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: ST_TO_ADDR
9518: GO 12301
9520: LD_INT 5
9522: DOUBLE
9523: EQUAL
9524: IFTRUE 9528
9526: GO 9640
9528: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9529: LD_ADDR_VAR 0 2
9533: PUSH
9534: LD_INT 2
9536: PUSH
9537: LD_INT 4
9539: PUSH
9540: LD_INT 5
9542: PUSH
9543: LD_INT 6
9545: PUSH
9546: LD_INT 8
9548: PUSH
9549: LD_INT 11
9551: PUSH
9552: LD_INT 12
9554: PUSH
9555: LD_INT 15
9557: PUSH
9558: LD_INT 16
9560: PUSH
9561: LD_INT 22
9563: PUSH
9564: LD_INT 23
9566: PUSH
9567: LD_INT 25
9569: PUSH
9570: LD_INT 26
9572: PUSH
9573: LD_INT 36
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 101
9594: PUSH
9595: LD_INT 102
9597: PUSH
9598: LD_INT 105
9600: PUSH
9601: LD_INT 106
9603: PUSH
9604: LD_INT 108
9606: PUSH
9607: LD_INT 109
9609: PUSH
9610: LD_INT 112
9612: PUSH
9613: LD_INT 116
9615: PUSH
9616: LD_INT 117
9618: PUSH
9619: LD_INT 118
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: ST_TO_ADDR
9638: GO 12301
9640: LD_INT 6
9642: DOUBLE
9643: EQUAL
9644: IFTRUE 9648
9646: GO 9780
9648: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9649: LD_ADDR_VAR 0 2
9653: PUSH
9654: LD_INT 2
9656: PUSH
9657: LD_INT 4
9659: PUSH
9660: LD_INT 5
9662: PUSH
9663: LD_INT 6
9665: PUSH
9666: LD_INT 8
9668: PUSH
9669: LD_INT 11
9671: PUSH
9672: LD_INT 12
9674: PUSH
9675: LD_INT 15
9677: PUSH
9678: LD_INT 16
9680: PUSH
9681: LD_INT 20
9683: PUSH
9684: LD_INT 21
9686: PUSH
9687: LD_INT 22
9689: PUSH
9690: LD_INT 23
9692: PUSH
9693: LD_INT 25
9695: PUSH
9696: LD_INT 26
9698: PUSH
9699: LD_INT 30
9701: PUSH
9702: LD_INT 31
9704: PUSH
9705: LD_INT 32
9707: PUSH
9708: LD_INT 36
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: PUSH
9732: LD_INT 101
9734: PUSH
9735: LD_INT 102
9737: PUSH
9738: LD_INT 105
9740: PUSH
9741: LD_INT 106
9743: PUSH
9744: LD_INT 108
9746: PUSH
9747: LD_INT 109
9749: PUSH
9750: LD_INT 112
9752: PUSH
9753: LD_INT 116
9755: PUSH
9756: LD_INT 117
9758: PUSH
9759: LD_INT 118
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: ST_TO_ADDR
9778: GO 12301
9780: LD_INT 7
9782: DOUBLE
9783: EQUAL
9784: IFTRUE 9788
9786: GO 9900
9788: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9789: LD_ADDR_VAR 0 2
9793: PUSH
9794: LD_INT 2
9796: PUSH
9797: LD_INT 4
9799: PUSH
9800: LD_INT 5
9802: PUSH
9803: LD_INT 7
9805: PUSH
9806: LD_INT 11
9808: PUSH
9809: LD_INT 12
9811: PUSH
9812: LD_INT 15
9814: PUSH
9815: LD_INT 16
9817: PUSH
9818: LD_INT 20
9820: PUSH
9821: LD_INT 21
9823: PUSH
9824: LD_INT 22
9826: PUSH
9827: LD_INT 23
9829: PUSH
9830: LD_INT 25
9832: PUSH
9833: LD_INT 26
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: PUSH
9852: LD_INT 101
9854: PUSH
9855: LD_INT 102
9857: PUSH
9858: LD_INT 103
9860: PUSH
9861: LD_INT 105
9863: PUSH
9864: LD_INT 106
9866: PUSH
9867: LD_INT 108
9869: PUSH
9870: LD_INT 112
9872: PUSH
9873: LD_INT 116
9875: PUSH
9876: LD_INT 117
9878: PUSH
9879: LD_INT 118
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: ST_TO_ADDR
9898: GO 12301
9900: LD_INT 8
9902: DOUBLE
9903: EQUAL
9904: IFTRUE 9908
9906: GO 10048
9908: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9909: LD_ADDR_VAR 0 2
9913: PUSH
9914: LD_INT 2
9916: PUSH
9917: LD_INT 4
9919: PUSH
9920: LD_INT 5
9922: PUSH
9923: LD_INT 6
9925: PUSH
9926: LD_INT 7
9928: PUSH
9929: LD_INT 8
9931: PUSH
9932: LD_INT 11
9934: PUSH
9935: LD_INT 12
9937: PUSH
9938: LD_INT 15
9940: PUSH
9941: LD_INT 16
9943: PUSH
9944: LD_INT 20
9946: PUSH
9947: LD_INT 21
9949: PUSH
9950: LD_INT 22
9952: PUSH
9953: LD_INT 23
9955: PUSH
9956: LD_INT 25
9958: PUSH
9959: LD_INT 26
9961: PUSH
9962: LD_INT 30
9964: PUSH
9965: LD_INT 31
9967: PUSH
9968: LD_INT 32
9970: PUSH
9971: LD_INT 36
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 101
9998: PUSH
9999: LD_INT 102
10001: PUSH
10002: LD_INT 103
10004: PUSH
10005: LD_INT 105
10007: PUSH
10008: LD_INT 106
10010: PUSH
10011: LD_INT 108
10013: PUSH
10014: LD_INT 109
10016: PUSH
10017: LD_INT 112
10019: PUSH
10020: LD_INT 116
10022: PUSH
10023: LD_INT 117
10025: PUSH
10026: LD_INT 118
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: ST_TO_ADDR
10046: GO 12301
10048: LD_INT 9
10050: DOUBLE
10051: EQUAL
10052: IFTRUE 10056
10054: GO 10204
10056: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10057: LD_ADDR_VAR 0 2
10061: PUSH
10062: LD_INT 2
10064: PUSH
10065: LD_INT 4
10067: PUSH
10068: LD_INT 5
10070: PUSH
10071: LD_INT 6
10073: PUSH
10074: LD_INT 7
10076: PUSH
10077: LD_INT 8
10079: PUSH
10080: LD_INT 11
10082: PUSH
10083: LD_INT 12
10085: PUSH
10086: LD_INT 15
10088: PUSH
10089: LD_INT 16
10091: PUSH
10092: LD_INT 20
10094: PUSH
10095: LD_INT 21
10097: PUSH
10098: LD_INT 22
10100: PUSH
10101: LD_INT 23
10103: PUSH
10104: LD_INT 25
10106: PUSH
10107: LD_INT 26
10109: PUSH
10110: LD_INT 28
10112: PUSH
10113: LD_INT 30
10115: PUSH
10116: LD_INT 31
10118: PUSH
10119: LD_INT 32
10121: PUSH
10122: LD_INT 36
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 101
10150: PUSH
10151: LD_INT 102
10153: PUSH
10154: LD_INT 103
10156: PUSH
10157: LD_INT 105
10159: PUSH
10160: LD_INT 106
10162: PUSH
10163: LD_INT 108
10165: PUSH
10166: LD_INT 109
10168: PUSH
10169: LD_INT 112
10171: PUSH
10172: LD_INT 114
10174: PUSH
10175: LD_INT 116
10177: PUSH
10178: LD_INT 117
10180: PUSH
10181: LD_INT 118
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: ST_TO_ADDR
10202: GO 12301
10204: LD_INT 10
10206: DOUBLE
10207: EQUAL
10208: IFTRUE 10212
10210: GO 10408
10212: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10213: LD_ADDR_VAR 0 2
10217: PUSH
10218: LD_INT 2
10220: PUSH
10221: LD_INT 4
10223: PUSH
10224: LD_INT 5
10226: PUSH
10227: LD_INT 6
10229: PUSH
10230: LD_INT 7
10232: PUSH
10233: LD_INT 8
10235: PUSH
10236: LD_INT 9
10238: PUSH
10239: LD_INT 10
10241: PUSH
10242: LD_INT 11
10244: PUSH
10245: LD_INT 12
10247: PUSH
10248: LD_INT 13
10250: PUSH
10251: LD_INT 14
10253: PUSH
10254: LD_INT 15
10256: PUSH
10257: LD_INT 16
10259: PUSH
10260: LD_INT 17
10262: PUSH
10263: LD_INT 18
10265: PUSH
10266: LD_INT 19
10268: PUSH
10269: LD_INT 20
10271: PUSH
10272: LD_INT 21
10274: PUSH
10275: LD_INT 22
10277: PUSH
10278: LD_INT 23
10280: PUSH
10281: LD_INT 24
10283: PUSH
10284: LD_INT 25
10286: PUSH
10287: LD_INT 26
10289: PUSH
10290: LD_INT 28
10292: PUSH
10293: LD_INT 30
10295: PUSH
10296: LD_INT 31
10298: PUSH
10299: LD_INT 32
10301: PUSH
10302: LD_INT 36
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 101
10338: PUSH
10339: LD_INT 102
10341: PUSH
10342: LD_INT 103
10344: PUSH
10345: LD_INT 104
10347: PUSH
10348: LD_INT 105
10350: PUSH
10351: LD_INT 106
10353: PUSH
10354: LD_INT 107
10356: PUSH
10357: LD_INT 108
10359: PUSH
10360: LD_INT 109
10362: PUSH
10363: LD_INT 110
10365: PUSH
10366: LD_INT 111
10368: PUSH
10369: LD_INT 112
10371: PUSH
10372: LD_INT 114
10374: PUSH
10375: LD_INT 116
10377: PUSH
10378: LD_INT 117
10380: PUSH
10381: LD_INT 118
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: ST_TO_ADDR
10406: GO 12301
10408: LD_INT 11
10410: DOUBLE
10411: EQUAL
10412: IFTRUE 10416
10414: GO 10620
10416: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10417: LD_ADDR_VAR 0 2
10421: PUSH
10422: LD_INT 2
10424: PUSH
10425: LD_INT 3
10427: PUSH
10428: LD_INT 4
10430: PUSH
10431: LD_INT 5
10433: PUSH
10434: LD_INT 6
10436: PUSH
10437: LD_INT 7
10439: PUSH
10440: LD_INT 8
10442: PUSH
10443: LD_INT 9
10445: PUSH
10446: LD_INT 10
10448: PUSH
10449: LD_INT 11
10451: PUSH
10452: LD_INT 12
10454: PUSH
10455: LD_INT 13
10457: PUSH
10458: LD_INT 14
10460: PUSH
10461: LD_INT 15
10463: PUSH
10464: LD_INT 16
10466: PUSH
10467: LD_INT 17
10469: PUSH
10470: LD_INT 18
10472: PUSH
10473: LD_INT 19
10475: PUSH
10476: LD_INT 20
10478: PUSH
10479: LD_INT 21
10481: PUSH
10482: LD_INT 22
10484: PUSH
10485: LD_INT 23
10487: PUSH
10488: LD_INT 24
10490: PUSH
10491: LD_INT 25
10493: PUSH
10494: LD_INT 26
10496: PUSH
10497: LD_INT 28
10499: PUSH
10500: LD_INT 30
10502: PUSH
10503: LD_INT 31
10505: PUSH
10506: LD_INT 32
10508: PUSH
10509: LD_INT 34
10511: PUSH
10512: LD_INT 36
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 101
10550: PUSH
10551: LD_INT 102
10553: PUSH
10554: LD_INT 103
10556: PUSH
10557: LD_INT 104
10559: PUSH
10560: LD_INT 105
10562: PUSH
10563: LD_INT 106
10565: PUSH
10566: LD_INT 107
10568: PUSH
10569: LD_INT 108
10571: PUSH
10572: LD_INT 109
10574: PUSH
10575: LD_INT 110
10577: PUSH
10578: LD_INT 111
10580: PUSH
10581: LD_INT 112
10583: PUSH
10584: LD_INT 114
10586: PUSH
10587: LD_INT 116
10589: PUSH
10590: LD_INT 117
10592: PUSH
10593: LD_INT 118
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: ST_TO_ADDR
10618: GO 12301
10620: LD_INT 12
10622: DOUBLE
10623: EQUAL
10624: IFTRUE 10628
10626: GO 10848
10628: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10629: LD_ADDR_VAR 0 2
10633: PUSH
10634: LD_INT 1
10636: PUSH
10637: LD_INT 2
10639: PUSH
10640: LD_INT 3
10642: PUSH
10643: LD_INT 4
10645: PUSH
10646: LD_INT 5
10648: PUSH
10649: LD_INT 6
10651: PUSH
10652: LD_INT 7
10654: PUSH
10655: LD_INT 8
10657: PUSH
10658: LD_INT 9
10660: PUSH
10661: LD_INT 10
10663: PUSH
10664: LD_INT 11
10666: PUSH
10667: LD_INT 12
10669: PUSH
10670: LD_INT 13
10672: PUSH
10673: LD_INT 14
10675: PUSH
10676: LD_INT 15
10678: PUSH
10679: LD_INT 16
10681: PUSH
10682: LD_INT 17
10684: PUSH
10685: LD_INT 18
10687: PUSH
10688: LD_INT 19
10690: PUSH
10691: LD_INT 20
10693: PUSH
10694: LD_INT 21
10696: PUSH
10697: LD_INT 22
10699: PUSH
10700: LD_INT 23
10702: PUSH
10703: LD_INT 24
10705: PUSH
10706: LD_INT 25
10708: PUSH
10709: LD_INT 26
10711: PUSH
10712: LD_INT 27
10714: PUSH
10715: LD_INT 28
10717: PUSH
10718: LD_INT 30
10720: PUSH
10721: LD_INT 31
10723: PUSH
10724: LD_INT 32
10726: PUSH
10727: LD_INT 33
10729: PUSH
10730: LD_INT 34
10732: PUSH
10733: LD_INT 36
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 101
10774: PUSH
10775: LD_INT 102
10777: PUSH
10778: LD_INT 103
10780: PUSH
10781: LD_INT 104
10783: PUSH
10784: LD_INT 105
10786: PUSH
10787: LD_INT 106
10789: PUSH
10790: LD_INT 107
10792: PUSH
10793: LD_INT 108
10795: PUSH
10796: LD_INT 109
10798: PUSH
10799: LD_INT 110
10801: PUSH
10802: LD_INT 111
10804: PUSH
10805: LD_INT 112
10807: PUSH
10808: LD_INT 113
10810: PUSH
10811: LD_INT 114
10813: PUSH
10814: LD_INT 116
10816: PUSH
10817: LD_INT 117
10819: PUSH
10820: LD_INT 118
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: ST_TO_ADDR
10846: GO 12301
10848: LD_INT 13
10850: DOUBLE
10851: EQUAL
10852: IFTRUE 10856
10854: GO 11064
10856: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10857: LD_ADDR_VAR 0 2
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: LD_INT 2
10867: PUSH
10868: LD_INT 3
10870: PUSH
10871: LD_INT 4
10873: PUSH
10874: LD_INT 5
10876: PUSH
10877: LD_INT 8
10879: PUSH
10880: LD_INT 9
10882: PUSH
10883: LD_INT 10
10885: PUSH
10886: LD_INT 11
10888: PUSH
10889: LD_INT 12
10891: PUSH
10892: LD_INT 14
10894: PUSH
10895: LD_INT 15
10897: PUSH
10898: LD_INT 16
10900: PUSH
10901: LD_INT 17
10903: PUSH
10904: LD_INT 18
10906: PUSH
10907: LD_INT 19
10909: PUSH
10910: LD_INT 20
10912: PUSH
10913: LD_INT 21
10915: PUSH
10916: LD_INT 22
10918: PUSH
10919: LD_INT 23
10921: PUSH
10922: LD_INT 24
10924: PUSH
10925: LD_INT 25
10927: PUSH
10928: LD_INT 26
10930: PUSH
10931: LD_INT 27
10933: PUSH
10934: LD_INT 28
10936: PUSH
10937: LD_INT 30
10939: PUSH
10940: LD_INT 31
10942: PUSH
10943: LD_INT 32
10945: PUSH
10946: LD_INT 33
10948: PUSH
10949: LD_INT 34
10951: PUSH
10952: LD_INT 36
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: PUSH
10988: LD_INT 101
10990: PUSH
10991: LD_INT 102
10993: PUSH
10994: LD_INT 103
10996: PUSH
10997: LD_INT 104
10999: PUSH
11000: LD_INT 105
11002: PUSH
11003: LD_INT 106
11005: PUSH
11006: LD_INT 107
11008: PUSH
11009: LD_INT 108
11011: PUSH
11012: LD_INT 109
11014: PUSH
11015: LD_INT 110
11017: PUSH
11018: LD_INT 111
11020: PUSH
11021: LD_INT 112
11023: PUSH
11024: LD_INT 113
11026: PUSH
11027: LD_INT 114
11029: PUSH
11030: LD_INT 116
11032: PUSH
11033: LD_INT 117
11035: PUSH
11036: LD_INT 118
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: ST_TO_ADDR
11062: GO 12301
11064: LD_INT 14
11066: DOUBLE
11067: EQUAL
11068: IFTRUE 11072
11070: GO 11296
11072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11073: LD_ADDR_VAR 0 2
11077: PUSH
11078: LD_INT 1
11080: PUSH
11081: LD_INT 2
11083: PUSH
11084: LD_INT 3
11086: PUSH
11087: LD_INT 4
11089: PUSH
11090: LD_INT 5
11092: PUSH
11093: LD_INT 6
11095: PUSH
11096: LD_INT 7
11098: PUSH
11099: LD_INT 8
11101: PUSH
11102: LD_INT 9
11104: PUSH
11105: LD_INT 10
11107: PUSH
11108: LD_INT 11
11110: PUSH
11111: LD_INT 12
11113: PUSH
11114: LD_INT 13
11116: PUSH
11117: LD_INT 14
11119: PUSH
11120: LD_INT 15
11122: PUSH
11123: LD_INT 16
11125: PUSH
11126: LD_INT 17
11128: PUSH
11129: LD_INT 18
11131: PUSH
11132: LD_INT 19
11134: PUSH
11135: LD_INT 20
11137: PUSH
11138: LD_INT 21
11140: PUSH
11141: LD_INT 22
11143: PUSH
11144: LD_INT 23
11146: PUSH
11147: LD_INT 24
11149: PUSH
11150: LD_INT 25
11152: PUSH
11153: LD_INT 26
11155: PUSH
11156: LD_INT 27
11158: PUSH
11159: LD_INT 28
11161: PUSH
11162: LD_INT 29
11164: PUSH
11165: LD_INT 30
11167: PUSH
11168: LD_INT 31
11170: PUSH
11171: LD_INT 32
11173: PUSH
11174: LD_INT 33
11176: PUSH
11177: LD_INT 34
11179: PUSH
11180: LD_INT 36
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 101
11222: PUSH
11223: LD_INT 102
11225: PUSH
11226: LD_INT 103
11228: PUSH
11229: LD_INT 104
11231: PUSH
11232: LD_INT 105
11234: PUSH
11235: LD_INT 106
11237: PUSH
11238: LD_INT 107
11240: PUSH
11241: LD_INT 108
11243: PUSH
11244: LD_INT 109
11246: PUSH
11247: LD_INT 110
11249: PUSH
11250: LD_INT 111
11252: PUSH
11253: LD_INT 112
11255: PUSH
11256: LD_INT 113
11258: PUSH
11259: LD_INT 114
11261: PUSH
11262: LD_INT 116
11264: PUSH
11265: LD_INT 117
11267: PUSH
11268: LD_INT 118
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: ST_TO_ADDR
11294: GO 12301
11296: LD_INT 15
11298: DOUBLE
11299: EQUAL
11300: IFTRUE 11304
11302: GO 11528
11304: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11305: LD_ADDR_VAR 0 2
11309: PUSH
11310: LD_INT 1
11312: PUSH
11313: LD_INT 2
11315: PUSH
11316: LD_INT 3
11318: PUSH
11319: LD_INT 4
11321: PUSH
11322: LD_INT 5
11324: PUSH
11325: LD_INT 6
11327: PUSH
11328: LD_INT 7
11330: PUSH
11331: LD_INT 8
11333: PUSH
11334: LD_INT 9
11336: PUSH
11337: LD_INT 10
11339: PUSH
11340: LD_INT 11
11342: PUSH
11343: LD_INT 12
11345: PUSH
11346: LD_INT 13
11348: PUSH
11349: LD_INT 14
11351: PUSH
11352: LD_INT 15
11354: PUSH
11355: LD_INT 16
11357: PUSH
11358: LD_INT 17
11360: PUSH
11361: LD_INT 18
11363: PUSH
11364: LD_INT 19
11366: PUSH
11367: LD_INT 20
11369: PUSH
11370: LD_INT 21
11372: PUSH
11373: LD_INT 22
11375: PUSH
11376: LD_INT 23
11378: PUSH
11379: LD_INT 24
11381: PUSH
11382: LD_INT 25
11384: PUSH
11385: LD_INT 26
11387: PUSH
11388: LD_INT 27
11390: PUSH
11391: LD_INT 28
11393: PUSH
11394: LD_INT 29
11396: PUSH
11397: LD_INT 30
11399: PUSH
11400: LD_INT 31
11402: PUSH
11403: LD_INT 32
11405: PUSH
11406: LD_INT 33
11408: PUSH
11409: LD_INT 34
11411: PUSH
11412: LD_INT 36
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 101
11454: PUSH
11455: LD_INT 102
11457: PUSH
11458: LD_INT 103
11460: PUSH
11461: LD_INT 104
11463: PUSH
11464: LD_INT 105
11466: PUSH
11467: LD_INT 106
11469: PUSH
11470: LD_INT 107
11472: PUSH
11473: LD_INT 108
11475: PUSH
11476: LD_INT 109
11478: PUSH
11479: LD_INT 110
11481: PUSH
11482: LD_INT 111
11484: PUSH
11485: LD_INT 112
11487: PUSH
11488: LD_INT 113
11490: PUSH
11491: LD_INT 114
11493: PUSH
11494: LD_INT 116
11496: PUSH
11497: LD_INT 117
11499: PUSH
11500: LD_INT 118
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: ST_TO_ADDR
11526: GO 12301
11528: LD_INT 16
11530: DOUBLE
11531: EQUAL
11532: IFTRUE 11536
11534: GO 11672
11536: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11537: LD_ADDR_VAR 0 2
11541: PUSH
11542: LD_INT 2
11544: PUSH
11545: LD_INT 4
11547: PUSH
11548: LD_INT 5
11550: PUSH
11551: LD_INT 7
11553: PUSH
11554: LD_INT 11
11556: PUSH
11557: LD_INT 12
11559: PUSH
11560: LD_INT 15
11562: PUSH
11563: LD_INT 16
11565: PUSH
11566: LD_INT 20
11568: PUSH
11569: LD_INT 21
11571: PUSH
11572: LD_INT 22
11574: PUSH
11575: LD_INT 23
11577: PUSH
11578: LD_INT 25
11580: PUSH
11581: LD_INT 26
11583: PUSH
11584: LD_INT 30
11586: PUSH
11587: LD_INT 31
11589: PUSH
11590: LD_INT 32
11592: PUSH
11593: LD_INT 33
11595: PUSH
11596: LD_INT 34
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 101
11622: PUSH
11623: LD_INT 102
11625: PUSH
11626: LD_INT 103
11628: PUSH
11629: LD_INT 106
11631: PUSH
11632: LD_INT 108
11634: PUSH
11635: LD_INT 112
11637: PUSH
11638: LD_INT 113
11640: PUSH
11641: LD_INT 114
11643: PUSH
11644: LD_INT 116
11646: PUSH
11647: LD_INT 117
11649: PUSH
11650: LD_INT 118
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: ST_TO_ADDR
11670: GO 12301
11672: LD_INT 17
11674: DOUBLE
11675: EQUAL
11676: IFTRUE 11680
11678: GO 11904
11680: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11681: LD_ADDR_VAR 0 2
11685: PUSH
11686: LD_INT 1
11688: PUSH
11689: LD_INT 2
11691: PUSH
11692: LD_INT 3
11694: PUSH
11695: LD_INT 4
11697: PUSH
11698: LD_INT 5
11700: PUSH
11701: LD_INT 6
11703: PUSH
11704: LD_INT 7
11706: PUSH
11707: LD_INT 8
11709: PUSH
11710: LD_INT 9
11712: PUSH
11713: LD_INT 10
11715: PUSH
11716: LD_INT 11
11718: PUSH
11719: LD_INT 12
11721: PUSH
11722: LD_INT 13
11724: PUSH
11725: LD_INT 14
11727: PUSH
11728: LD_INT 15
11730: PUSH
11731: LD_INT 16
11733: PUSH
11734: LD_INT 17
11736: PUSH
11737: LD_INT 18
11739: PUSH
11740: LD_INT 19
11742: PUSH
11743: LD_INT 20
11745: PUSH
11746: LD_INT 21
11748: PUSH
11749: LD_INT 22
11751: PUSH
11752: LD_INT 23
11754: PUSH
11755: LD_INT 24
11757: PUSH
11758: LD_INT 25
11760: PUSH
11761: LD_INT 26
11763: PUSH
11764: LD_INT 27
11766: PUSH
11767: LD_INT 28
11769: PUSH
11770: LD_INT 29
11772: PUSH
11773: LD_INT 30
11775: PUSH
11776: LD_INT 31
11778: PUSH
11779: LD_INT 32
11781: PUSH
11782: LD_INT 33
11784: PUSH
11785: LD_INT 34
11787: PUSH
11788: LD_INT 36
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: PUSH
11828: LD_INT 101
11830: PUSH
11831: LD_INT 102
11833: PUSH
11834: LD_INT 103
11836: PUSH
11837: LD_INT 104
11839: PUSH
11840: LD_INT 105
11842: PUSH
11843: LD_INT 106
11845: PUSH
11846: LD_INT 107
11848: PUSH
11849: LD_INT 108
11851: PUSH
11852: LD_INT 109
11854: PUSH
11855: LD_INT 110
11857: PUSH
11858: LD_INT 111
11860: PUSH
11861: LD_INT 112
11863: PUSH
11864: LD_INT 113
11866: PUSH
11867: LD_INT 114
11869: PUSH
11870: LD_INT 116
11872: PUSH
11873: LD_INT 117
11875: PUSH
11876: LD_INT 118
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: ST_TO_ADDR
11902: GO 12301
11904: LD_INT 18
11906: DOUBLE
11907: EQUAL
11908: IFTRUE 11912
11910: GO 12060
11912: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11913: LD_ADDR_VAR 0 2
11917: PUSH
11918: LD_INT 2
11920: PUSH
11921: LD_INT 4
11923: PUSH
11924: LD_INT 5
11926: PUSH
11927: LD_INT 7
11929: PUSH
11930: LD_INT 11
11932: PUSH
11933: LD_INT 12
11935: PUSH
11936: LD_INT 15
11938: PUSH
11939: LD_INT 16
11941: PUSH
11942: LD_INT 20
11944: PUSH
11945: LD_INT 21
11947: PUSH
11948: LD_INT 22
11950: PUSH
11951: LD_INT 23
11953: PUSH
11954: LD_INT 25
11956: PUSH
11957: LD_INT 26
11959: PUSH
11960: LD_INT 30
11962: PUSH
11963: LD_INT 31
11965: PUSH
11966: LD_INT 32
11968: PUSH
11969: LD_INT 33
11971: PUSH
11972: LD_INT 34
11974: PUSH
11975: LD_INT 35
11977: PUSH
11978: LD_INT 36
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 101
12006: PUSH
12007: LD_INT 102
12009: PUSH
12010: LD_INT 103
12012: PUSH
12013: LD_INT 106
12015: PUSH
12016: LD_INT 108
12018: PUSH
12019: LD_INT 112
12021: PUSH
12022: LD_INT 113
12024: PUSH
12025: LD_INT 114
12027: PUSH
12028: LD_INT 115
12030: PUSH
12031: LD_INT 116
12033: PUSH
12034: LD_INT 117
12036: PUSH
12037: LD_INT 118
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: ST_TO_ADDR
12058: GO 12301
12060: LD_INT 19
12062: DOUBLE
12063: EQUAL
12064: IFTRUE 12068
12066: GO 12300
12068: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12069: LD_ADDR_VAR 0 2
12073: PUSH
12074: LD_INT 1
12076: PUSH
12077: LD_INT 2
12079: PUSH
12080: LD_INT 3
12082: PUSH
12083: LD_INT 4
12085: PUSH
12086: LD_INT 5
12088: PUSH
12089: LD_INT 6
12091: PUSH
12092: LD_INT 7
12094: PUSH
12095: LD_INT 8
12097: PUSH
12098: LD_INT 9
12100: PUSH
12101: LD_INT 10
12103: PUSH
12104: LD_INT 11
12106: PUSH
12107: LD_INT 12
12109: PUSH
12110: LD_INT 13
12112: PUSH
12113: LD_INT 14
12115: PUSH
12116: LD_INT 15
12118: PUSH
12119: LD_INT 16
12121: PUSH
12122: LD_INT 17
12124: PUSH
12125: LD_INT 18
12127: PUSH
12128: LD_INT 19
12130: PUSH
12131: LD_INT 20
12133: PUSH
12134: LD_INT 21
12136: PUSH
12137: LD_INT 22
12139: PUSH
12140: LD_INT 23
12142: PUSH
12143: LD_INT 24
12145: PUSH
12146: LD_INT 25
12148: PUSH
12149: LD_INT 26
12151: PUSH
12152: LD_INT 27
12154: PUSH
12155: LD_INT 28
12157: PUSH
12158: LD_INT 29
12160: PUSH
12161: LD_INT 30
12163: PUSH
12164: LD_INT 31
12166: PUSH
12167: LD_INT 32
12169: PUSH
12170: LD_INT 33
12172: PUSH
12173: LD_INT 34
12175: PUSH
12176: LD_INT 35
12178: PUSH
12179: LD_INT 36
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 101
12222: PUSH
12223: LD_INT 102
12225: PUSH
12226: LD_INT 103
12228: PUSH
12229: LD_INT 104
12231: PUSH
12232: LD_INT 105
12234: PUSH
12235: LD_INT 106
12237: PUSH
12238: LD_INT 107
12240: PUSH
12241: LD_INT 108
12243: PUSH
12244: LD_INT 109
12246: PUSH
12247: LD_INT 110
12249: PUSH
12250: LD_INT 111
12252: PUSH
12253: LD_INT 112
12255: PUSH
12256: LD_INT 113
12258: PUSH
12259: LD_INT 114
12261: PUSH
12262: LD_INT 115
12264: PUSH
12265: LD_INT 116
12267: PUSH
12268: LD_INT 117
12270: PUSH
12271: LD_INT 118
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: ST_TO_ADDR
12298: GO 12301
12300: POP
// end else
12301: GO 12532
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12303: LD_ADDR_VAR 0 2
12307: PUSH
12308: LD_INT 1
12310: PUSH
12311: LD_INT 2
12313: PUSH
12314: LD_INT 3
12316: PUSH
12317: LD_INT 4
12319: PUSH
12320: LD_INT 5
12322: PUSH
12323: LD_INT 6
12325: PUSH
12326: LD_INT 7
12328: PUSH
12329: LD_INT 8
12331: PUSH
12332: LD_INT 9
12334: PUSH
12335: LD_INT 10
12337: PUSH
12338: LD_INT 11
12340: PUSH
12341: LD_INT 12
12343: PUSH
12344: LD_INT 13
12346: PUSH
12347: LD_INT 14
12349: PUSH
12350: LD_INT 15
12352: PUSH
12353: LD_INT 16
12355: PUSH
12356: LD_INT 17
12358: PUSH
12359: LD_INT 18
12361: PUSH
12362: LD_INT 19
12364: PUSH
12365: LD_INT 20
12367: PUSH
12368: LD_INT 21
12370: PUSH
12371: LD_INT 22
12373: PUSH
12374: LD_INT 23
12376: PUSH
12377: LD_INT 24
12379: PUSH
12380: LD_INT 25
12382: PUSH
12383: LD_INT 26
12385: PUSH
12386: LD_INT 27
12388: PUSH
12389: LD_INT 28
12391: PUSH
12392: LD_INT 29
12394: PUSH
12395: LD_INT 30
12397: PUSH
12398: LD_INT 31
12400: PUSH
12401: LD_INT 32
12403: PUSH
12404: LD_INT 33
12406: PUSH
12407: LD_INT 34
12409: PUSH
12410: LD_INT 35
12412: PUSH
12413: LD_INT 36
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 101
12456: PUSH
12457: LD_INT 102
12459: PUSH
12460: LD_INT 103
12462: PUSH
12463: LD_INT 104
12465: PUSH
12466: LD_INT 105
12468: PUSH
12469: LD_INT 106
12471: PUSH
12472: LD_INT 107
12474: PUSH
12475: LD_INT 108
12477: PUSH
12478: LD_INT 109
12480: PUSH
12481: LD_INT 110
12483: PUSH
12484: LD_INT 111
12486: PUSH
12487: LD_INT 112
12489: PUSH
12490: LD_INT 113
12492: PUSH
12493: LD_INT 114
12495: PUSH
12496: LD_INT 115
12498: PUSH
12499: LD_INT 116
12501: PUSH
12502: LD_INT 117
12504: PUSH
12505: LD_INT 118
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: ST_TO_ADDR
// if result then
12532: LD_VAR 0 2
12536: IFFALSE 13322
// begin normal :=  ;
12538: LD_ADDR_VAR 0 5
12542: PUSH
12543: LD_STRING 
12545: ST_TO_ADDR
// hardcore :=  ;
12546: LD_ADDR_VAR 0 6
12550: PUSH
12551: LD_STRING 
12553: ST_TO_ADDR
// active :=  ;
12554: LD_ADDR_VAR 0 7
12558: PUSH
12559: LD_STRING 
12561: ST_TO_ADDR
// for i = 1 to normalCounter do
12562: LD_ADDR_VAR 0 8
12566: PUSH
12567: DOUBLE
12568: LD_INT 1
12570: DEC
12571: ST_TO_ADDR
12572: LD_EXP 26
12576: PUSH
12577: FOR_TO
12578: IFFALSE 12679
// begin tmp := 0 ;
12580: LD_ADDR_VAR 0 3
12584: PUSH
12585: LD_STRING 0
12587: ST_TO_ADDR
// if result [ 1 ] then
12588: LD_VAR 0 2
12592: PUSH
12593: LD_INT 1
12595: ARRAY
12596: IFFALSE 12661
// if result [ 1 ] [ 1 ] = i then
12598: LD_VAR 0 2
12602: PUSH
12603: LD_INT 1
12605: ARRAY
12606: PUSH
12607: LD_INT 1
12609: ARRAY
12610: PUSH
12611: LD_VAR 0 8
12615: EQUAL
12616: IFFALSE 12661
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12618: LD_ADDR_VAR 0 2
12622: PUSH
12623: LD_VAR 0 2
12627: PPUSH
12628: LD_INT 1
12630: PPUSH
12631: LD_VAR 0 2
12635: PUSH
12636: LD_INT 1
12638: ARRAY
12639: PPUSH
12640: LD_INT 1
12642: PPUSH
12643: CALL_OW 3
12647: PPUSH
12648: CALL_OW 1
12652: ST_TO_ADDR
// tmp := 1 ;
12653: LD_ADDR_VAR 0 3
12657: PUSH
12658: LD_STRING 1
12660: ST_TO_ADDR
// end ; normal := normal & tmp ;
12661: LD_ADDR_VAR 0 5
12665: PUSH
12666: LD_VAR 0 5
12670: PUSH
12671: LD_VAR 0 3
12675: STR
12676: ST_TO_ADDR
// end ;
12677: GO 12577
12679: POP
12680: POP
// for i = 1 to hardcoreCounter do
12681: LD_ADDR_VAR 0 8
12685: PUSH
12686: DOUBLE
12687: LD_INT 1
12689: DEC
12690: ST_TO_ADDR
12691: LD_EXP 27
12695: PUSH
12696: FOR_TO
12697: IFFALSE 12802
// begin tmp := 0 ;
12699: LD_ADDR_VAR 0 3
12703: PUSH
12704: LD_STRING 0
12706: ST_TO_ADDR
// if result [ 2 ] then
12707: LD_VAR 0 2
12711: PUSH
12712: LD_INT 2
12714: ARRAY
12715: IFFALSE 12784
// if result [ 2 ] [ 1 ] = 100 + i then
12717: LD_VAR 0 2
12721: PUSH
12722: LD_INT 2
12724: ARRAY
12725: PUSH
12726: LD_INT 1
12728: ARRAY
12729: PUSH
12730: LD_INT 100
12732: PUSH
12733: LD_VAR 0 8
12737: PLUS
12738: EQUAL
12739: IFFALSE 12784
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12741: LD_ADDR_VAR 0 2
12745: PUSH
12746: LD_VAR 0 2
12750: PPUSH
12751: LD_INT 2
12753: PPUSH
12754: LD_VAR 0 2
12758: PUSH
12759: LD_INT 2
12761: ARRAY
12762: PPUSH
12763: LD_INT 1
12765: PPUSH
12766: CALL_OW 3
12770: PPUSH
12771: CALL_OW 1
12775: ST_TO_ADDR
// tmp := 1 ;
12776: LD_ADDR_VAR 0 3
12780: PUSH
12781: LD_STRING 1
12783: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12784: LD_ADDR_VAR 0 6
12788: PUSH
12789: LD_VAR 0 6
12793: PUSH
12794: LD_VAR 0 3
12798: STR
12799: ST_TO_ADDR
// end ;
12800: GO 12696
12802: POP
12803: POP
// if isGameLoad then
12804: LD_VAR 0 1
12808: IFFALSE 13283
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12810: LD_ADDR_VAR 0 4
12814: PUSH
12815: LD_EXP 30
12819: PUSH
12820: LD_EXP 29
12824: PUSH
12825: LD_EXP 31
12829: PUSH
12830: LD_EXP 28
12834: PUSH
12835: LD_EXP 32
12839: PUSH
12840: LD_EXP 33
12844: PUSH
12845: LD_EXP 34
12849: PUSH
12850: LD_EXP 35
12854: PUSH
12855: LD_EXP 36
12859: PUSH
12860: LD_EXP 37
12864: PUSH
12865: LD_EXP 38
12869: PUSH
12870: LD_EXP 39
12874: PUSH
12875: LD_EXP 40
12879: PUSH
12880: LD_EXP 41
12884: PUSH
12885: LD_EXP 49
12889: PUSH
12890: LD_EXP 50
12894: PUSH
12895: LD_EXP 51
12899: PUSH
12900: LD_EXP 52
12904: PUSH
12905: LD_EXP 54
12909: PUSH
12910: LD_EXP 55
12914: PUSH
12915: LD_EXP 56
12919: PUSH
12920: LD_EXP 59
12924: PUSH
12925: LD_EXP 61
12929: PUSH
12930: LD_EXP 62
12934: PUSH
12935: LD_EXP 63
12939: PUSH
12940: LD_EXP 65
12944: PUSH
12945: LD_EXP 66
12949: PUSH
12950: LD_EXP 69
12954: PUSH
12955: LD_EXP 70
12959: PUSH
12960: LD_EXP 71
12964: PUSH
12965: LD_EXP 72
12969: PUSH
12970: LD_EXP 73
12974: PUSH
12975: LD_EXP 74
12979: PUSH
12980: LD_EXP 75
12984: PUSH
12985: LD_EXP 76
12989: PUSH
12990: LD_EXP 77
12994: PUSH
12995: LD_EXP 42
12999: PUSH
13000: LD_EXP 43
13004: PUSH
13005: LD_EXP 46
13009: PUSH
13010: LD_EXP 47
13014: PUSH
13015: LD_EXP 48
13019: PUSH
13020: LD_EXP 44
13024: PUSH
13025: LD_EXP 45
13029: PUSH
13030: LD_EXP 53
13034: PUSH
13035: LD_EXP 57
13039: PUSH
13040: LD_EXP 58
13044: PUSH
13045: LD_EXP 60
13049: PUSH
13050: LD_EXP 64
13054: PUSH
13055: LD_EXP 67
13059: PUSH
13060: LD_EXP 68
13064: PUSH
13065: LD_EXP 78
13069: PUSH
13070: LD_EXP 79
13074: PUSH
13075: LD_EXP 80
13079: PUSH
13080: LD_EXP 81
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: ST_TO_ADDR
// tmp :=  ;
13141: LD_ADDR_VAR 0 3
13145: PUSH
13146: LD_STRING 
13148: ST_TO_ADDR
// for i = 1 to normalCounter do
13149: LD_ADDR_VAR 0 8
13153: PUSH
13154: DOUBLE
13155: LD_INT 1
13157: DEC
13158: ST_TO_ADDR
13159: LD_EXP 26
13163: PUSH
13164: FOR_TO
13165: IFFALSE 13201
// begin if flags [ i ] then
13167: LD_VAR 0 4
13171: PUSH
13172: LD_VAR 0 8
13176: ARRAY
13177: IFFALSE 13199
// tmp := tmp & i & ; ;
13179: LD_ADDR_VAR 0 3
13183: PUSH
13184: LD_VAR 0 3
13188: PUSH
13189: LD_VAR 0 8
13193: STR
13194: PUSH
13195: LD_STRING ;
13197: STR
13198: ST_TO_ADDR
// end ;
13199: GO 13164
13201: POP
13202: POP
// for i = 1 to hardcoreCounter do
13203: LD_ADDR_VAR 0 8
13207: PUSH
13208: DOUBLE
13209: LD_INT 1
13211: DEC
13212: ST_TO_ADDR
13213: LD_EXP 27
13217: PUSH
13218: FOR_TO
13219: IFFALSE 13265
// begin if flags [ normalCounter + i ] then
13221: LD_VAR 0 4
13225: PUSH
13226: LD_EXP 26
13230: PUSH
13231: LD_VAR 0 8
13235: PLUS
13236: ARRAY
13237: IFFALSE 13263
// tmp := tmp & ( 100 + i ) & ; ;
13239: LD_ADDR_VAR 0 3
13243: PUSH
13244: LD_VAR 0 3
13248: PUSH
13249: LD_INT 100
13251: PUSH
13252: LD_VAR 0 8
13256: PLUS
13257: STR
13258: PUSH
13259: LD_STRING ;
13261: STR
13262: ST_TO_ADDR
// end ;
13263: GO 13218
13265: POP
13266: POP
// if tmp then
13267: LD_VAR 0 3
13271: IFFALSE 13283
// active := tmp ;
13273: LD_ADDR_VAR 0 7
13277: PUSH
13278: LD_VAR 0 3
13282: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13283: LD_STRING getStreamItemsFromMission("
13285: PUSH
13286: LD_VAR 0 5
13290: STR
13291: PUSH
13292: LD_STRING ","
13294: STR
13295: PUSH
13296: LD_VAR 0 6
13300: STR
13301: PUSH
13302: LD_STRING ","
13304: STR
13305: PUSH
13306: LD_VAR 0 7
13310: STR
13311: PUSH
13312: LD_STRING ")
13314: STR
13315: PPUSH
13316: CALL_OW 559
// end else
13320: GO 13329
// ToLua ( getStreamItemsFromMission("","","") ) ;
13322: LD_STRING getStreamItemsFromMission("","","")
13324: PPUSH
13325: CALL_OW 559
// end ;
13329: LD_VAR 0 2
13333: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13334: LD_EXP 25
13338: PUSH
13339: LD_EXP 30
13343: AND
13344: IFFALSE 13468
13346: GO 13348
13348: DISABLE
13349: LD_INT 0
13351: PPUSH
13352: PPUSH
// begin enable ;
13353: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13354: LD_ADDR_VAR 0 2
13358: PUSH
13359: LD_INT 22
13361: PUSH
13362: LD_OWVAR 2
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 2
13373: PUSH
13374: LD_INT 34
13376: PUSH
13377: LD_INT 7
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 34
13386: PUSH
13387: LD_INT 45
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 34
13396: PUSH
13397: LD_INT 28
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 34
13406: PUSH
13407: LD_INT 47
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PPUSH
13425: CALL_OW 69
13429: ST_TO_ADDR
// if not tmp then
13430: LD_VAR 0 2
13434: NOT
13435: IFFALSE 13439
// exit ;
13437: GO 13468
// for i in tmp do
13439: LD_ADDR_VAR 0 1
13443: PUSH
13444: LD_VAR 0 2
13448: PUSH
13449: FOR_IN
13450: IFFALSE 13466
// begin SetLives ( i , 0 ) ;
13452: LD_VAR 0 1
13456: PPUSH
13457: LD_INT 0
13459: PPUSH
13460: CALL_OW 234
// end ;
13464: GO 13449
13466: POP
13467: POP
// end ;
13468: PPOPN 2
13470: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13471: LD_EXP 25
13475: PUSH
13476: LD_EXP 31
13480: AND
13481: IFFALSE 13565
13483: GO 13485
13485: DISABLE
13486: LD_INT 0
13488: PPUSH
13489: PPUSH
// begin enable ;
13490: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13491: LD_ADDR_VAR 0 2
13495: PUSH
13496: LD_INT 22
13498: PUSH
13499: LD_OWVAR 2
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 32
13510: PUSH
13511: LD_INT 3
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PPUSH
13522: CALL_OW 69
13526: ST_TO_ADDR
// if not tmp then
13527: LD_VAR 0 2
13531: NOT
13532: IFFALSE 13536
// exit ;
13534: GO 13565
// for i in tmp do
13536: LD_ADDR_VAR 0 1
13540: PUSH
13541: LD_VAR 0 2
13545: PUSH
13546: FOR_IN
13547: IFFALSE 13563
// begin SetLives ( i , 0 ) ;
13549: LD_VAR 0 1
13553: PPUSH
13554: LD_INT 0
13556: PPUSH
13557: CALL_OW 234
// end ;
13561: GO 13546
13563: POP
13564: POP
// end ;
13565: PPOPN 2
13567: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13568: LD_EXP 25
13572: PUSH
13573: LD_EXP 28
13577: AND
13578: IFFALSE 13671
13580: GO 13582
13582: DISABLE
13583: LD_INT 0
13585: PPUSH
// begin enable ;
13586: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13587: LD_ADDR_VAR 0 1
13591: PUSH
13592: LD_INT 22
13594: PUSH
13595: LD_OWVAR 2
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 2
13606: PUSH
13607: LD_INT 25
13609: PUSH
13610: LD_INT 5
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 25
13619: PUSH
13620: LD_INT 9
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: LD_INT 25
13629: PUSH
13630: LD_INT 8
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PPUSH
13647: CALL_OW 69
13651: PUSH
13652: FOR_IN
13653: IFFALSE 13669
// begin SetClass ( i , 1 ) ;
13655: LD_VAR 0 1
13659: PPUSH
13660: LD_INT 1
13662: PPUSH
13663: CALL_OW 336
// end ;
13667: GO 13652
13669: POP
13670: POP
// end ;
13671: PPOPN 1
13673: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13674: LD_EXP 25
13678: PUSH
13679: LD_EXP 29
13683: AND
13684: PUSH
13685: LD_OWVAR 65
13689: PUSH
13690: LD_INT 7
13692: LESS
13693: AND
13694: IFFALSE 13708
13696: GO 13698
13698: DISABLE
// begin enable ;
13699: ENABLE
// game_speed := 7 ;
13700: LD_ADDR_OWVAR 65
13704: PUSH
13705: LD_INT 7
13707: ST_TO_ADDR
// end ;
13708: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13709: LD_EXP 25
13713: PUSH
13714: LD_EXP 32
13718: AND
13719: IFFALSE 13921
13721: GO 13723
13723: DISABLE
13724: LD_INT 0
13726: PPUSH
13727: PPUSH
13728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13729: LD_ADDR_VAR 0 3
13733: PUSH
13734: LD_INT 81
13736: PUSH
13737: LD_OWVAR 2
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: LD_INT 21
13748: PUSH
13749: LD_INT 1
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PPUSH
13760: CALL_OW 69
13764: ST_TO_ADDR
// if not tmp then
13765: LD_VAR 0 3
13769: NOT
13770: IFFALSE 13774
// exit ;
13772: GO 13921
// if tmp > 5 then
13774: LD_VAR 0 3
13778: PUSH
13779: LD_INT 5
13781: GREATER
13782: IFFALSE 13794
// k := 5 else
13784: LD_ADDR_VAR 0 2
13788: PUSH
13789: LD_INT 5
13791: ST_TO_ADDR
13792: GO 13804
// k := tmp ;
13794: LD_ADDR_VAR 0 2
13798: PUSH
13799: LD_VAR 0 3
13803: ST_TO_ADDR
// for i := 1 to k do
13804: LD_ADDR_VAR 0 1
13808: PUSH
13809: DOUBLE
13810: LD_INT 1
13812: DEC
13813: ST_TO_ADDR
13814: LD_VAR 0 2
13818: PUSH
13819: FOR_TO
13820: IFFALSE 13919
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13822: LD_VAR 0 3
13826: PUSH
13827: LD_VAR 0 1
13831: ARRAY
13832: PPUSH
13833: LD_VAR 0 1
13837: PUSH
13838: LD_INT 4
13840: MOD
13841: PUSH
13842: LD_INT 1
13844: PLUS
13845: PPUSH
13846: CALL_OW 259
13850: PUSH
13851: LD_INT 10
13853: LESS
13854: IFFALSE 13917
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13856: LD_VAR 0 3
13860: PUSH
13861: LD_VAR 0 1
13865: ARRAY
13866: PPUSH
13867: LD_VAR 0 1
13871: PUSH
13872: LD_INT 4
13874: MOD
13875: PUSH
13876: LD_INT 1
13878: PLUS
13879: PPUSH
13880: LD_VAR 0 3
13884: PUSH
13885: LD_VAR 0 1
13889: ARRAY
13890: PPUSH
13891: LD_VAR 0 1
13895: PUSH
13896: LD_INT 4
13898: MOD
13899: PUSH
13900: LD_INT 1
13902: PLUS
13903: PPUSH
13904: CALL_OW 259
13908: PUSH
13909: LD_INT 1
13911: PLUS
13912: PPUSH
13913: CALL_OW 237
13917: GO 13819
13919: POP
13920: POP
// end ;
13921: PPOPN 3
13923: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13924: LD_EXP 25
13928: PUSH
13929: LD_EXP 33
13933: AND
13934: IFFALSE 13954
13936: GO 13938
13938: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13939: LD_INT 4
13941: PPUSH
13942: LD_OWVAR 2
13946: PPUSH
13947: LD_INT 0
13949: PPUSH
13950: CALL_OW 324
13954: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13955: LD_EXP 25
13959: PUSH
13960: LD_EXP 62
13964: AND
13965: IFFALSE 13985
13967: GO 13969
13969: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13970: LD_INT 19
13972: PPUSH
13973: LD_OWVAR 2
13977: PPUSH
13978: LD_INT 0
13980: PPUSH
13981: CALL_OW 324
13985: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13986: LD_EXP 25
13990: PUSH
13991: LD_EXP 34
13995: AND
13996: IFFALSE 14098
13998: GO 14000
14000: DISABLE
14001: LD_INT 0
14003: PPUSH
14004: PPUSH
// begin enable ;
14005: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14006: LD_ADDR_VAR 0 2
14010: PUSH
14011: LD_INT 22
14013: PUSH
14014: LD_OWVAR 2
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PUSH
14023: LD_INT 2
14025: PUSH
14026: LD_INT 34
14028: PUSH
14029: LD_INT 11
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PUSH
14036: LD_INT 34
14038: PUSH
14039: LD_INT 30
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: LIST
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PPUSH
14055: CALL_OW 69
14059: ST_TO_ADDR
// if not tmp then
14060: LD_VAR 0 2
14064: NOT
14065: IFFALSE 14069
// exit ;
14067: GO 14098
// for i in tmp do
14069: LD_ADDR_VAR 0 1
14073: PUSH
14074: LD_VAR 0 2
14078: PUSH
14079: FOR_IN
14080: IFFALSE 14096
// begin SetLives ( i , 0 ) ;
14082: LD_VAR 0 1
14086: PPUSH
14087: LD_INT 0
14089: PPUSH
14090: CALL_OW 234
// end ;
14094: GO 14079
14096: POP
14097: POP
// end ;
14098: PPOPN 2
14100: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14101: LD_EXP 25
14105: PUSH
14106: LD_EXP 35
14110: AND
14111: IFFALSE 14131
14113: GO 14115
14115: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14116: LD_INT 32
14118: PPUSH
14119: LD_OWVAR 2
14123: PPUSH
14124: LD_INT 0
14126: PPUSH
14127: CALL_OW 324
14131: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14132: LD_EXP 25
14136: PUSH
14137: LD_EXP 36
14141: AND
14142: IFFALSE 14323
14144: GO 14146
14146: DISABLE
14147: LD_INT 0
14149: PPUSH
14150: PPUSH
14151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14152: LD_ADDR_VAR 0 2
14156: PUSH
14157: LD_INT 22
14159: PUSH
14160: LD_OWVAR 2
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 33
14171: PUSH
14172: LD_INT 3
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PPUSH
14183: CALL_OW 69
14187: ST_TO_ADDR
// if not tmp then
14188: LD_VAR 0 2
14192: NOT
14193: IFFALSE 14197
// exit ;
14195: GO 14323
// side := 0 ;
14197: LD_ADDR_VAR 0 3
14201: PUSH
14202: LD_INT 0
14204: ST_TO_ADDR
// for i := 1 to 8 do
14205: LD_ADDR_VAR 0 1
14209: PUSH
14210: DOUBLE
14211: LD_INT 1
14213: DEC
14214: ST_TO_ADDR
14215: LD_INT 8
14217: PUSH
14218: FOR_TO
14219: IFFALSE 14267
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14221: LD_OWVAR 2
14225: PUSH
14226: LD_VAR 0 1
14230: NONEQUAL
14231: PUSH
14232: LD_OWVAR 2
14236: PPUSH
14237: LD_VAR 0 1
14241: PPUSH
14242: CALL_OW 81
14246: PUSH
14247: LD_INT 2
14249: EQUAL
14250: AND
14251: IFFALSE 14265
// begin side := i ;
14253: LD_ADDR_VAR 0 3
14257: PUSH
14258: LD_VAR 0 1
14262: ST_TO_ADDR
// break ;
14263: GO 14267
// end ;
14265: GO 14218
14267: POP
14268: POP
// if not side then
14269: LD_VAR 0 3
14273: NOT
14274: IFFALSE 14278
// exit ;
14276: GO 14323
// for i := 1 to tmp do
14278: LD_ADDR_VAR 0 1
14282: PUSH
14283: DOUBLE
14284: LD_INT 1
14286: DEC
14287: ST_TO_ADDR
14288: LD_VAR 0 2
14292: PUSH
14293: FOR_TO
14294: IFFALSE 14321
// if Prob ( 60 ) then
14296: LD_INT 60
14298: PPUSH
14299: CALL_OW 13
14303: IFFALSE 14319
// SetSide ( i , side ) ;
14305: LD_VAR 0 1
14309: PPUSH
14310: LD_VAR 0 3
14314: PPUSH
14315: CALL_OW 235
14319: GO 14293
14321: POP
14322: POP
// end ;
14323: PPOPN 3
14325: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14326: LD_EXP 25
14330: PUSH
14331: LD_EXP 38
14335: AND
14336: IFFALSE 14455
14338: GO 14340
14340: DISABLE
14341: LD_INT 0
14343: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14344: LD_ADDR_VAR 0 1
14348: PUSH
14349: LD_INT 22
14351: PUSH
14352: LD_OWVAR 2
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 21
14363: PUSH
14364: LD_INT 1
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 3
14373: PUSH
14374: LD_INT 23
14376: PUSH
14377: LD_INT 0
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: LIST
14392: PPUSH
14393: CALL_OW 69
14397: PUSH
14398: FOR_IN
14399: IFFALSE 14453
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14401: LD_VAR 0 1
14405: PPUSH
14406: CALL_OW 257
14410: PUSH
14411: LD_INT 1
14413: PUSH
14414: LD_INT 2
14416: PUSH
14417: LD_INT 3
14419: PUSH
14420: LD_INT 4
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: IN
14429: IFFALSE 14451
// SetClass ( un , rand ( 1 , 4 ) ) ;
14431: LD_VAR 0 1
14435: PPUSH
14436: LD_INT 1
14438: PPUSH
14439: LD_INT 4
14441: PPUSH
14442: CALL_OW 12
14446: PPUSH
14447: CALL_OW 336
14451: GO 14398
14453: POP
14454: POP
// end ;
14455: PPOPN 1
14457: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14458: LD_EXP 25
14462: PUSH
14463: LD_EXP 37
14467: AND
14468: IFFALSE 14547
14470: GO 14472
14472: DISABLE
14473: LD_INT 0
14475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14476: LD_ADDR_VAR 0 1
14480: PUSH
14481: LD_INT 22
14483: PUSH
14484: LD_OWVAR 2
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 21
14495: PUSH
14496: LD_INT 3
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PPUSH
14507: CALL_OW 69
14511: ST_TO_ADDR
// if not tmp then
14512: LD_VAR 0 1
14516: NOT
14517: IFFALSE 14521
// exit ;
14519: GO 14547
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14521: LD_VAR 0 1
14525: PUSH
14526: LD_INT 1
14528: PPUSH
14529: LD_VAR 0 1
14533: PPUSH
14534: CALL_OW 12
14538: ARRAY
14539: PPUSH
14540: LD_INT 100
14542: PPUSH
14543: CALL_OW 234
// end ;
14547: PPOPN 1
14549: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14550: LD_EXP 25
14554: PUSH
14555: LD_EXP 39
14559: AND
14560: IFFALSE 14658
14562: GO 14564
14564: DISABLE
14565: LD_INT 0
14567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14568: LD_ADDR_VAR 0 1
14572: PUSH
14573: LD_INT 22
14575: PUSH
14576: LD_OWVAR 2
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: LD_INT 21
14587: PUSH
14588: LD_INT 1
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PPUSH
14599: CALL_OW 69
14603: ST_TO_ADDR
// if not tmp then
14604: LD_VAR 0 1
14608: NOT
14609: IFFALSE 14613
// exit ;
14611: GO 14658
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14613: LD_VAR 0 1
14617: PUSH
14618: LD_INT 1
14620: PPUSH
14621: LD_VAR 0 1
14625: PPUSH
14626: CALL_OW 12
14630: ARRAY
14631: PPUSH
14632: LD_INT 1
14634: PPUSH
14635: LD_INT 4
14637: PPUSH
14638: CALL_OW 12
14642: PPUSH
14643: LD_INT 3000
14645: PPUSH
14646: LD_INT 9000
14648: PPUSH
14649: CALL_OW 12
14653: PPUSH
14654: CALL_OW 492
// end ;
14658: PPOPN 1
14660: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14661: LD_EXP 25
14665: PUSH
14666: LD_EXP 40
14670: AND
14671: IFFALSE 14691
14673: GO 14675
14675: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14676: LD_INT 1
14678: PPUSH
14679: LD_OWVAR 2
14683: PPUSH
14684: LD_INT 0
14686: PPUSH
14687: CALL_OW 324
14691: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14692: LD_EXP 25
14696: PUSH
14697: LD_EXP 41
14701: AND
14702: IFFALSE 14785
14704: GO 14706
14706: DISABLE
14707: LD_INT 0
14709: PPUSH
14710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14711: LD_ADDR_VAR 0 2
14715: PUSH
14716: LD_INT 22
14718: PUSH
14719: LD_OWVAR 2
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 21
14730: PUSH
14731: LD_INT 3
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PPUSH
14742: CALL_OW 69
14746: ST_TO_ADDR
// if not tmp then
14747: LD_VAR 0 2
14751: NOT
14752: IFFALSE 14756
// exit ;
14754: GO 14785
// for i in tmp do
14756: LD_ADDR_VAR 0 1
14760: PUSH
14761: LD_VAR 0 2
14765: PUSH
14766: FOR_IN
14767: IFFALSE 14783
// SetBLevel ( i , 10 ) ;
14769: LD_VAR 0 1
14773: PPUSH
14774: LD_INT 10
14776: PPUSH
14777: CALL_OW 241
14781: GO 14766
14783: POP
14784: POP
// end ;
14785: PPOPN 2
14787: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14788: LD_EXP 25
14792: PUSH
14793: LD_EXP 42
14797: AND
14798: IFFALSE 14909
14800: GO 14802
14802: DISABLE
14803: LD_INT 0
14805: PPUSH
14806: PPUSH
14807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14808: LD_ADDR_VAR 0 3
14812: PUSH
14813: LD_INT 22
14815: PUSH
14816: LD_OWVAR 2
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: LD_INT 25
14827: PUSH
14828: LD_INT 1
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PPUSH
14839: CALL_OW 69
14843: ST_TO_ADDR
// if not tmp then
14844: LD_VAR 0 3
14848: NOT
14849: IFFALSE 14853
// exit ;
14851: GO 14909
// un := tmp [ rand ( 1 , tmp ) ] ;
14853: LD_ADDR_VAR 0 2
14857: PUSH
14858: LD_VAR 0 3
14862: PUSH
14863: LD_INT 1
14865: PPUSH
14866: LD_VAR 0 3
14870: PPUSH
14871: CALL_OW 12
14875: ARRAY
14876: ST_TO_ADDR
// if Crawls ( un ) then
14877: LD_VAR 0 2
14881: PPUSH
14882: CALL_OW 318
14886: IFFALSE 14897
// ComWalk ( un ) ;
14888: LD_VAR 0 2
14892: PPUSH
14893: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14897: LD_VAR 0 2
14901: PPUSH
14902: LD_INT 5
14904: PPUSH
14905: CALL_OW 336
// end ;
14909: PPOPN 3
14911: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14912: LD_EXP 25
14916: PUSH
14917: LD_EXP 43
14921: AND
14922: PUSH
14923: LD_OWVAR 67
14927: PUSH
14928: LD_INT 4
14930: LESS
14931: AND
14932: IFFALSE 14951
14934: GO 14936
14936: DISABLE
// begin Difficulty := Difficulty + 1 ;
14937: LD_ADDR_OWVAR 67
14941: PUSH
14942: LD_OWVAR 67
14946: PUSH
14947: LD_INT 1
14949: PLUS
14950: ST_TO_ADDR
// end ;
14951: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14952: LD_EXP 25
14956: PUSH
14957: LD_EXP 44
14961: AND
14962: IFFALSE 15065
14964: GO 14966
14966: DISABLE
14967: LD_INT 0
14969: PPUSH
// begin for i := 1 to 5 do
14970: LD_ADDR_VAR 0 1
14974: PUSH
14975: DOUBLE
14976: LD_INT 1
14978: DEC
14979: ST_TO_ADDR
14980: LD_INT 5
14982: PUSH
14983: FOR_TO
14984: IFFALSE 15063
// begin uc_nation := nation_nature ;
14986: LD_ADDR_OWVAR 21
14990: PUSH
14991: LD_INT 0
14993: ST_TO_ADDR
// uc_side := 0 ;
14994: LD_ADDR_OWVAR 20
14998: PUSH
14999: LD_INT 0
15001: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15002: LD_ADDR_OWVAR 29
15006: PUSH
15007: LD_INT 12
15009: PUSH
15010: LD_INT 12
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: ST_TO_ADDR
// hc_agressivity := 20 ;
15017: LD_ADDR_OWVAR 35
15021: PUSH
15022: LD_INT 20
15024: ST_TO_ADDR
// hc_class := class_tiger ;
15025: LD_ADDR_OWVAR 28
15029: PUSH
15030: LD_INT 14
15032: ST_TO_ADDR
// hc_gallery :=  ;
15033: LD_ADDR_OWVAR 33
15037: PUSH
15038: LD_STRING 
15040: ST_TO_ADDR
// hc_name :=  ;
15041: LD_ADDR_OWVAR 26
15045: PUSH
15046: LD_STRING 
15048: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15049: CALL_OW 44
15053: PPUSH
15054: LD_INT 0
15056: PPUSH
15057: CALL_OW 51
// end ;
15061: GO 14983
15063: POP
15064: POP
// end ;
15065: PPOPN 1
15067: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15068: LD_EXP 25
15072: PUSH
15073: LD_EXP 45
15077: AND
15078: IFFALSE 15087
15080: GO 15082
15082: DISABLE
// StreamSibBomb ;
15083: CALL 15088 0 0
15087: END
// export function StreamSibBomb ; var i , x , y ; begin
15088: LD_INT 0
15090: PPUSH
15091: PPUSH
15092: PPUSH
15093: PPUSH
// result := false ;
15094: LD_ADDR_VAR 0 1
15098: PUSH
15099: LD_INT 0
15101: ST_TO_ADDR
// for i := 1 to 16 do
15102: LD_ADDR_VAR 0 2
15106: PUSH
15107: DOUBLE
15108: LD_INT 1
15110: DEC
15111: ST_TO_ADDR
15112: LD_INT 16
15114: PUSH
15115: FOR_TO
15116: IFFALSE 15315
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15118: LD_ADDR_VAR 0 3
15122: PUSH
15123: LD_INT 10
15125: PUSH
15126: LD_INT 20
15128: PUSH
15129: LD_INT 30
15131: PUSH
15132: LD_INT 40
15134: PUSH
15135: LD_INT 50
15137: PUSH
15138: LD_INT 60
15140: PUSH
15141: LD_INT 70
15143: PUSH
15144: LD_INT 80
15146: PUSH
15147: LD_INT 90
15149: PUSH
15150: LD_INT 100
15152: PUSH
15153: LD_INT 110
15155: PUSH
15156: LD_INT 120
15158: PUSH
15159: LD_INT 130
15161: PUSH
15162: LD_INT 140
15164: PUSH
15165: LD_INT 150
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 1
15187: PPUSH
15188: LD_INT 15
15190: PPUSH
15191: CALL_OW 12
15195: ARRAY
15196: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15197: LD_ADDR_VAR 0 4
15201: PUSH
15202: LD_INT 10
15204: PUSH
15205: LD_INT 20
15207: PUSH
15208: LD_INT 30
15210: PUSH
15211: LD_INT 40
15213: PUSH
15214: LD_INT 50
15216: PUSH
15217: LD_INT 60
15219: PUSH
15220: LD_INT 70
15222: PUSH
15223: LD_INT 80
15225: PUSH
15226: LD_INT 90
15228: PUSH
15229: LD_INT 100
15231: PUSH
15232: LD_INT 110
15234: PUSH
15235: LD_INT 120
15237: PUSH
15238: LD_INT 130
15240: PUSH
15241: LD_INT 140
15243: PUSH
15244: LD_INT 150
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 1
15266: PPUSH
15267: LD_INT 15
15269: PPUSH
15270: CALL_OW 12
15274: ARRAY
15275: ST_TO_ADDR
// if ValidHex ( x , y ) then
15276: LD_VAR 0 3
15280: PPUSH
15281: LD_VAR 0 4
15285: PPUSH
15286: CALL_OW 488
15290: IFFALSE 15313
// begin result := [ x , y ] ;
15292: LD_ADDR_VAR 0 1
15296: PUSH
15297: LD_VAR 0 3
15301: PUSH
15302: LD_VAR 0 4
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: ST_TO_ADDR
// break ;
15311: GO 15315
// end ; end ;
15313: GO 15115
15315: POP
15316: POP
// if result then
15317: LD_VAR 0 1
15321: IFFALSE 15381
// begin ToLua ( playSibBomb() ) ;
15323: LD_STRING playSibBomb()
15325: PPUSH
15326: CALL_OW 559
// wait ( 0 0$14 ) ;
15330: LD_INT 490
15332: PPUSH
15333: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15337: LD_VAR 0 1
15341: PUSH
15342: LD_INT 1
15344: ARRAY
15345: PPUSH
15346: LD_VAR 0 1
15350: PUSH
15351: LD_INT 2
15353: ARRAY
15354: PPUSH
15355: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15359: LD_VAR 0 1
15363: PUSH
15364: LD_INT 1
15366: ARRAY
15367: PPUSH
15368: LD_VAR 0 1
15372: PUSH
15373: LD_INT 2
15375: ARRAY
15376: PPUSH
15377: CALL_OW 429
// end ; end ;
15381: LD_VAR 0 1
15385: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15386: LD_EXP 25
15390: PUSH
15391: LD_EXP 47
15395: AND
15396: IFFALSE 15408
15398: GO 15400
15400: DISABLE
// YouLost (  ) ;
15401: LD_STRING 
15403: PPUSH
15404: CALL_OW 104
15408: END
// every 0 0$1 trigger StreamModeActive and sFog do
15409: LD_EXP 25
15413: PUSH
15414: LD_EXP 46
15418: AND
15419: IFFALSE 15433
15421: GO 15423
15423: DISABLE
// FogOff ( your_side ) ;
15424: LD_OWVAR 2
15428: PPUSH
15429: CALL_OW 344
15433: END
// every 0 0$1 trigger StreamModeActive and sSun do
15434: LD_EXP 25
15438: PUSH
15439: LD_EXP 48
15443: AND
15444: IFFALSE 15472
15446: GO 15448
15448: DISABLE
// begin solar_recharge_percent := 0 ;
15449: LD_ADDR_OWVAR 79
15453: PUSH
15454: LD_INT 0
15456: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15457: LD_INT 10500
15459: PPUSH
15460: CALL_OW 67
// solar_recharge_percent := 100 ;
15464: LD_ADDR_OWVAR 79
15468: PUSH
15469: LD_INT 100
15471: ST_TO_ADDR
// end ;
15472: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15473: LD_EXP 25
15477: PUSH
15478: LD_EXP 49
15482: AND
15483: IFFALSE 15722
15485: GO 15487
15487: DISABLE
15488: LD_INT 0
15490: PPUSH
15491: PPUSH
15492: PPUSH
// begin tmp := [ ] ;
15493: LD_ADDR_VAR 0 3
15497: PUSH
15498: EMPTY
15499: ST_TO_ADDR
// for i := 1 to 6 do
15500: LD_ADDR_VAR 0 1
15504: PUSH
15505: DOUBLE
15506: LD_INT 1
15508: DEC
15509: ST_TO_ADDR
15510: LD_INT 6
15512: PUSH
15513: FOR_TO
15514: IFFALSE 15619
// begin uc_nation := nation_nature ;
15516: LD_ADDR_OWVAR 21
15520: PUSH
15521: LD_INT 0
15523: ST_TO_ADDR
// uc_side := 0 ;
15524: LD_ADDR_OWVAR 20
15528: PUSH
15529: LD_INT 0
15531: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15532: LD_ADDR_OWVAR 29
15536: PUSH
15537: LD_INT 12
15539: PUSH
15540: LD_INT 12
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: ST_TO_ADDR
// hc_agressivity := 20 ;
15547: LD_ADDR_OWVAR 35
15551: PUSH
15552: LD_INT 20
15554: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15555: LD_ADDR_OWVAR 28
15559: PUSH
15560: LD_INT 17
15562: ST_TO_ADDR
// hc_gallery :=  ;
15563: LD_ADDR_OWVAR 33
15567: PUSH
15568: LD_STRING 
15570: ST_TO_ADDR
// hc_name :=  ;
15571: LD_ADDR_OWVAR 26
15575: PUSH
15576: LD_STRING 
15578: ST_TO_ADDR
// un := CreateHuman ;
15579: LD_ADDR_VAR 0 2
15583: PUSH
15584: CALL_OW 44
15588: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15589: LD_VAR 0 2
15593: PPUSH
15594: LD_INT 1
15596: PPUSH
15597: CALL_OW 51
// tmp := tmp ^ un ;
15601: LD_ADDR_VAR 0 3
15605: PUSH
15606: LD_VAR 0 3
15610: PUSH
15611: LD_VAR 0 2
15615: ADD
15616: ST_TO_ADDR
// end ;
15617: GO 15513
15619: POP
15620: POP
// repeat wait ( 0 0$1 ) ;
15621: LD_INT 35
15623: PPUSH
15624: CALL_OW 67
// for un in tmp do
15628: LD_ADDR_VAR 0 2
15632: PUSH
15633: LD_VAR 0 3
15637: PUSH
15638: FOR_IN
15639: IFFALSE 15713
// begin if IsDead ( un ) then
15641: LD_VAR 0 2
15645: PPUSH
15646: CALL_OW 301
15650: IFFALSE 15670
// begin tmp := tmp diff un ;
15652: LD_ADDR_VAR 0 3
15656: PUSH
15657: LD_VAR 0 3
15661: PUSH
15662: LD_VAR 0 2
15666: DIFF
15667: ST_TO_ADDR
// continue ;
15668: GO 15638
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15670: LD_VAR 0 2
15674: PPUSH
15675: LD_INT 3
15677: PUSH
15678: LD_INT 22
15680: PUSH
15681: LD_INT 0
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PPUSH
15692: CALL_OW 69
15696: PPUSH
15697: LD_VAR 0 2
15701: PPUSH
15702: CALL_OW 74
15706: PPUSH
15707: CALL_OW 115
// end ;
15711: GO 15638
15713: POP
15714: POP
// until not tmp ;
15715: LD_VAR 0 3
15719: NOT
15720: IFFALSE 15621
// end ;
15722: PPOPN 3
15724: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15725: LD_EXP 25
15729: PUSH
15730: LD_EXP 50
15734: AND
15735: IFFALSE 15789
15737: GO 15739
15739: DISABLE
// begin ToLua ( displayTroll(); ) ;
15740: LD_STRING displayTroll();
15742: PPUSH
15743: CALL_OW 559
// wait ( 3 3$00 ) ;
15747: LD_INT 6300
15749: PPUSH
15750: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15754: LD_STRING hideTroll();
15756: PPUSH
15757: CALL_OW 559
// wait ( 1 1$00 ) ;
15761: LD_INT 2100
15763: PPUSH
15764: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15768: LD_STRING displayTroll();
15770: PPUSH
15771: CALL_OW 559
// wait ( 1 1$00 ) ;
15775: LD_INT 2100
15777: PPUSH
15778: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15782: LD_STRING hideTroll();
15784: PPUSH
15785: CALL_OW 559
// end ;
15789: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15790: LD_EXP 25
15794: PUSH
15795: LD_EXP 51
15799: AND
15800: IFFALSE 15863
15802: GO 15804
15804: DISABLE
15805: LD_INT 0
15807: PPUSH
// begin p := 0 ;
15808: LD_ADDR_VAR 0 1
15812: PUSH
15813: LD_INT 0
15815: ST_TO_ADDR
// repeat game_speed := 1 ;
15816: LD_ADDR_OWVAR 65
15820: PUSH
15821: LD_INT 1
15823: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15824: LD_INT 35
15826: PPUSH
15827: CALL_OW 67
// p := p + 1 ;
15831: LD_ADDR_VAR 0 1
15835: PUSH
15836: LD_VAR 0 1
15840: PUSH
15841: LD_INT 1
15843: PLUS
15844: ST_TO_ADDR
// until p >= 60 ;
15845: LD_VAR 0 1
15849: PUSH
15850: LD_INT 60
15852: GREATEREQUAL
15853: IFFALSE 15816
// game_speed := 4 ;
15855: LD_ADDR_OWVAR 65
15859: PUSH
15860: LD_INT 4
15862: ST_TO_ADDR
// end ;
15863: PPOPN 1
15865: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15866: LD_EXP 25
15870: PUSH
15871: LD_EXP 52
15875: AND
15876: IFFALSE 16022
15878: GO 15880
15880: DISABLE
15881: LD_INT 0
15883: PPUSH
15884: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15885: LD_ADDR_VAR 0 1
15889: PUSH
15890: LD_INT 22
15892: PUSH
15893: LD_OWVAR 2
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: LD_INT 2
15904: PUSH
15905: LD_INT 30
15907: PUSH
15908: LD_INT 0
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 30
15917: PUSH
15918: LD_INT 1
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: LIST
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PPUSH
15934: CALL_OW 69
15938: ST_TO_ADDR
// if not depot then
15939: LD_VAR 0 1
15943: NOT
15944: IFFALSE 15948
// exit ;
15946: GO 16022
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15948: LD_ADDR_VAR 0 2
15952: PUSH
15953: LD_VAR 0 1
15957: PUSH
15958: LD_INT 1
15960: PPUSH
15961: LD_VAR 0 1
15965: PPUSH
15966: CALL_OW 12
15970: ARRAY
15971: PPUSH
15972: CALL_OW 274
15976: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15977: LD_VAR 0 2
15981: PPUSH
15982: LD_INT 1
15984: PPUSH
15985: LD_INT 0
15987: PPUSH
15988: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15992: LD_VAR 0 2
15996: PPUSH
15997: LD_INT 2
15999: PPUSH
16000: LD_INT 0
16002: PPUSH
16003: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16007: LD_VAR 0 2
16011: PPUSH
16012: LD_INT 3
16014: PPUSH
16015: LD_INT 0
16017: PPUSH
16018: CALL_OW 277
// end ;
16022: PPOPN 2
16024: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16025: LD_EXP 25
16029: PUSH
16030: LD_EXP 53
16034: AND
16035: IFFALSE 16132
16037: GO 16039
16039: DISABLE
16040: LD_INT 0
16042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16043: LD_ADDR_VAR 0 1
16047: PUSH
16048: LD_INT 22
16050: PUSH
16051: LD_OWVAR 2
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: LD_INT 21
16062: PUSH
16063: LD_INT 1
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: LD_INT 3
16072: PUSH
16073: LD_INT 23
16075: PUSH
16076: LD_INT 0
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: LIST
16091: PPUSH
16092: CALL_OW 69
16096: ST_TO_ADDR
// if not tmp then
16097: LD_VAR 0 1
16101: NOT
16102: IFFALSE 16106
// exit ;
16104: GO 16132
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16106: LD_VAR 0 1
16110: PUSH
16111: LD_INT 1
16113: PPUSH
16114: LD_VAR 0 1
16118: PPUSH
16119: CALL_OW 12
16123: ARRAY
16124: PPUSH
16125: LD_INT 200
16127: PPUSH
16128: CALL_OW 234
// end ;
16132: PPOPN 1
16134: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16135: LD_EXP 25
16139: PUSH
16140: LD_EXP 54
16144: AND
16145: IFFALSE 16224
16147: GO 16149
16149: DISABLE
16150: LD_INT 0
16152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16153: LD_ADDR_VAR 0 1
16157: PUSH
16158: LD_INT 22
16160: PUSH
16161: LD_OWVAR 2
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 21
16172: PUSH
16173: LD_INT 2
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PPUSH
16184: CALL_OW 69
16188: ST_TO_ADDR
// if not tmp then
16189: LD_VAR 0 1
16193: NOT
16194: IFFALSE 16198
// exit ;
16196: GO 16224
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16198: LD_VAR 0 1
16202: PUSH
16203: LD_INT 1
16205: PPUSH
16206: LD_VAR 0 1
16210: PPUSH
16211: CALL_OW 12
16215: ARRAY
16216: PPUSH
16217: LD_INT 60
16219: PPUSH
16220: CALL_OW 234
// end ;
16224: PPOPN 1
16226: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16227: LD_EXP 25
16231: PUSH
16232: LD_EXP 55
16236: AND
16237: IFFALSE 16336
16239: GO 16241
16241: DISABLE
16242: LD_INT 0
16244: PPUSH
16245: PPUSH
// begin enable ;
16246: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16247: LD_ADDR_VAR 0 1
16251: PUSH
16252: LD_INT 22
16254: PUSH
16255: LD_OWVAR 2
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PUSH
16264: LD_INT 61
16266: PUSH
16267: EMPTY
16268: LIST
16269: PUSH
16270: LD_INT 33
16272: PUSH
16273: LD_INT 2
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: PPUSH
16285: CALL_OW 69
16289: ST_TO_ADDR
// if not tmp then
16290: LD_VAR 0 1
16294: NOT
16295: IFFALSE 16299
// exit ;
16297: GO 16336
// for i in tmp do
16299: LD_ADDR_VAR 0 2
16303: PUSH
16304: LD_VAR 0 1
16308: PUSH
16309: FOR_IN
16310: IFFALSE 16334
// if IsControledBy ( i ) then
16312: LD_VAR 0 2
16316: PPUSH
16317: CALL_OW 312
16321: IFFALSE 16332
// ComUnlink ( i ) ;
16323: LD_VAR 0 2
16327: PPUSH
16328: CALL_OW 136
16332: GO 16309
16334: POP
16335: POP
// end ;
16336: PPOPN 2
16338: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16339: LD_EXP 25
16343: PUSH
16344: LD_EXP 56
16348: AND
16349: IFFALSE 16489
16351: GO 16353
16353: DISABLE
16354: LD_INT 0
16356: PPUSH
16357: PPUSH
// begin ToLua ( displayPowell(); ) ;
16358: LD_STRING displayPowell();
16360: PPUSH
16361: CALL_OW 559
// uc_side := 0 ;
16365: LD_ADDR_OWVAR 20
16369: PUSH
16370: LD_INT 0
16372: ST_TO_ADDR
// uc_nation := 2 ;
16373: LD_ADDR_OWVAR 21
16377: PUSH
16378: LD_INT 2
16380: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16381: LD_ADDR_OWVAR 37
16385: PUSH
16386: LD_INT 14
16388: ST_TO_ADDR
// vc_engine := engine_siberite ;
16389: LD_ADDR_OWVAR 39
16393: PUSH
16394: LD_INT 3
16396: ST_TO_ADDR
// vc_control := control_apeman ;
16397: LD_ADDR_OWVAR 38
16401: PUSH
16402: LD_INT 5
16404: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16405: LD_ADDR_OWVAR 40
16409: PUSH
16410: LD_INT 29
16412: ST_TO_ADDR
// un := CreateVehicle ;
16413: LD_ADDR_VAR 0 2
16417: PUSH
16418: CALL_OW 45
16422: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16423: LD_VAR 0 2
16427: PPUSH
16428: LD_INT 1
16430: PPUSH
16431: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16435: LD_INT 35
16437: PPUSH
16438: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16442: LD_VAR 0 2
16446: PPUSH
16447: LD_INT 22
16449: PUSH
16450: LD_OWVAR 2
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PPUSH
16459: CALL_OW 69
16463: PPUSH
16464: LD_VAR 0 2
16468: PPUSH
16469: CALL_OW 74
16473: PPUSH
16474: CALL_OW 115
// until IsDead ( un ) ;
16478: LD_VAR 0 2
16482: PPUSH
16483: CALL_OW 301
16487: IFFALSE 16435
// end ;
16489: PPOPN 2
16491: END
// every 0 0$1 trigger StreamModeActive and sStu do
16492: LD_EXP 25
16496: PUSH
16497: LD_EXP 64
16501: AND
16502: IFFALSE 16518
16504: GO 16506
16506: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16507: LD_STRING displayStucuk();
16509: PPUSH
16510: CALL_OW 559
// ResetFog ;
16514: CALL_OW 335
// end ;
16518: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16519: LD_EXP 25
16523: PUSH
16524: LD_EXP 57
16528: AND
16529: IFFALSE 16670
16531: GO 16533
16533: DISABLE
16534: LD_INT 0
16536: PPUSH
16537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16538: LD_ADDR_VAR 0 2
16542: PUSH
16543: LD_INT 22
16545: PUSH
16546: LD_OWVAR 2
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 21
16557: PUSH
16558: LD_INT 1
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PPUSH
16569: CALL_OW 69
16573: ST_TO_ADDR
// if not tmp then
16574: LD_VAR 0 2
16578: NOT
16579: IFFALSE 16583
// exit ;
16581: GO 16670
// un := tmp [ rand ( 1 , tmp ) ] ;
16583: LD_ADDR_VAR 0 1
16587: PUSH
16588: LD_VAR 0 2
16592: PUSH
16593: LD_INT 1
16595: PPUSH
16596: LD_VAR 0 2
16600: PPUSH
16601: CALL_OW 12
16605: ARRAY
16606: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16607: LD_VAR 0 1
16611: PPUSH
16612: LD_INT 0
16614: PPUSH
16615: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16619: LD_VAR 0 1
16623: PPUSH
16624: LD_OWVAR 3
16628: PUSH
16629: LD_VAR 0 1
16633: DIFF
16634: PPUSH
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 74
16644: PPUSH
16645: CALL_OW 115
// wait ( 0 0$20 ) ;
16649: LD_INT 700
16651: PPUSH
16652: CALL_OW 67
// SetSide ( un , your_side ) ;
16656: LD_VAR 0 1
16660: PPUSH
16661: LD_OWVAR 2
16665: PPUSH
16666: CALL_OW 235
// end ;
16670: PPOPN 2
16672: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16673: LD_EXP 25
16677: PUSH
16678: LD_EXP 58
16682: AND
16683: IFFALSE 16789
16685: GO 16687
16687: DISABLE
16688: LD_INT 0
16690: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16691: LD_ADDR_VAR 0 1
16695: PUSH
16696: LD_INT 22
16698: PUSH
16699: LD_OWVAR 2
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: LD_INT 2
16710: PUSH
16711: LD_INT 30
16713: PUSH
16714: LD_INT 0
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 30
16723: PUSH
16724: LD_INT 1
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: LIST
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: PPUSH
16740: CALL_OW 69
16744: ST_TO_ADDR
// if not depot then
16745: LD_VAR 0 1
16749: NOT
16750: IFFALSE 16754
// exit ;
16752: GO 16789
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16754: LD_VAR 0 1
16758: PUSH
16759: LD_INT 1
16761: ARRAY
16762: PPUSH
16763: CALL_OW 250
16767: PPUSH
16768: LD_VAR 0 1
16772: PUSH
16773: LD_INT 1
16775: ARRAY
16776: PPUSH
16777: CALL_OW 251
16781: PPUSH
16782: LD_INT 70
16784: PPUSH
16785: CALL_OW 495
// end ;
16789: PPOPN 1
16791: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16792: LD_EXP 25
16796: PUSH
16797: LD_EXP 59
16801: AND
16802: IFFALSE 17013
16804: GO 16806
16806: DISABLE
16807: LD_INT 0
16809: PPUSH
16810: PPUSH
16811: PPUSH
16812: PPUSH
16813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16814: LD_ADDR_VAR 0 5
16818: PUSH
16819: LD_INT 22
16821: PUSH
16822: LD_OWVAR 2
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 21
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PPUSH
16845: CALL_OW 69
16849: ST_TO_ADDR
// if not tmp then
16850: LD_VAR 0 5
16854: NOT
16855: IFFALSE 16859
// exit ;
16857: GO 17013
// for i in tmp do
16859: LD_ADDR_VAR 0 1
16863: PUSH
16864: LD_VAR 0 5
16868: PUSH
16869: FOR_IN
16870: IFFALSE 17011
// begin d := rand ( 0 , 5 ) ;
16872: LD_ADDR_VAR 0 4
16876: PUSH
16877: LD_INT 0
16879: PPUSH
16880: LD_INT 5
16882: PPUSH
16883: CALL_OW 12
16887: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16888: LD_ADDR_VAR 0 2
16892: PUSH
16893: LD_VAR 0 1
16897: PPUSH
16898: CALL_OW 250
16902: PPUSH
16903: LD_VAR 0 4
16907: PPUSH
16908: LD_INT 3
16910: PPUSH
16911: LD_INT 12
16913: PPUSH
16914: CALL_OW 12
16918: PPUSH
16919: CALL_OW 272
16923: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16924: LD_ADDR_VAR 0 3
16928: PUSH
16929: LD_VAR 0 1
16933: PPUSH
16934: CALL_OW 251
16938: PPUSH
16939: LD_VAR 0 4
16943: PPUSH
16944: LD_INT 3
16946: PPUSH
16947: LD_INT 12
16949: PPUSH
16950: CALL_OW 12
16954: PPUSH
16955: CALL_OW 273
16959: ST_TO_ADDR
// if ValidHex ( x , y ) then
16960: LD_VAR 0 2
16964: PPUSH
16965: LD_VAR 0 3
16969: PPUSH
16970: CALL_OW 488
16974: IFFALSE 17009
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16976: LD_VAR 0 1
16980: PPUSH
16981: LD_VAR 0 2
16985: PPUSH
16986: LD_VAR 0 3
16990: PPUSH
16991: LD_INT 3
16993: PPUSH
16994: LD_INT 6
16996: PPUSH
16997: CALL_OW 12
17001: PPUSH
17002: LD_INT 1
17004: PPUSH
17005: CALL_OW 483
// end ;
17009: GO 16869
17011: POP
17012: POP
// end ;
17013: PPOPN 5
17015: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17016: LD_EXP 25
17020: PUSH
17021: LD_EXP 60
17025: AND
17026: IFFALSE 17120
17028: GO 17030
17030: DISABLE
17031: LD_INT 0
17033: PPUSH
17034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17035: LD_ADDR_VAR 0 2
17039: PUSH
17040: LD_INT 22
17042: PUSH
17043: LD_OWVAR 2
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 32
17054: PUSH
17055: LD_INT 1
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 21
17064: PUSH
17065: LD_INT 2
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: LIST
17076: PPUSH
17077: CALL_OW 69
17081: ST_TO_ADDR
// if not tmp then
17082: LD_VAR 0 2
17086: NOT
17087: IFFALSE 17091
// exit ;
17089: GO 17120
// for i in tmp do
17091: LD_ADDR_VAR 0 1
17095: PUSH
17096: LD_VAR 0 2
17100: PUSH
17101: FOR_IN
17102: IFFALSE 17118
// SetFuel ( i , 0 ) ;
17104: LD_VAR 0 1
17108: PPUSH
17109: LD_INT 0
17111: PPUSH
17112: CALL_OW 240
17116: GO 17101
17118: POP
17119: POP
// end ;
17120: PPOPN 2
17122: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17123: LD_EXP 25
17127: PUSH
17128: LD_EXP 61
17132: AND
17133: IFFALSE 17199
17135: GO 17137
17137: DISABLE
17138: LD_INT 0
17140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17141: LD_ADDR_VAR 0 1
17145: PUSH
17146: LD_INT 22
17148: PUSH
17149: LD_OWVAR 2
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 30
17160: PUSH
17161: LD_INT 29
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 69
17176: ST_TO_ADDR
// if not tmp then
17177: LD_VAR 0 1
17181: NOT
17182: IFFALSE 17186
// exit ;
17184: GO 17199
// DestroyUnit ( tmp [ 1 ] ) ;
17186: LD_VAR 0 1
17190: PUSH
17191: LD_INT 1
17193: ARRAY
17194: PPUSH
17195: CALL_OW 65
// end ;
17199: PPOPN 1
17201: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17202: LD_EXP 25
17206: PUSH
17207: LD_EXP 63
17211: AND
17212: IFFALSE 17341
17214: GO 17216
17216: DISABLE
17217: LD_INT 0
17219: PPUSH
// begin uc_side := 0 ;
17220: LD_ADDR_OWVAR 20
17224: PUSH
17225: LD_INT 0
17227: ST_TO_ADDR
// uc_nation := nation_arabian ;
17228: LD_ADDR_OWVAR 21
17232: PUSH
17233: LD_INT 2
17235: ST_TO_ADDR
// hc_gallery :=  ;
17236: LD_ADDR_OWVAR 33
17240: PUSH
17241: LD_STRING 
17243: ST_TO_ADDR
// hc_name :=  ;
17244: LD_ADDR_OWVAR 26
17248: PUSH
17249: LD_STRING 
17251: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17252: LD_INT 1
17254: PPUSH
17255: LD_INT 11
17257: PPUSH
17258: LD_INT 10
17260: PPUSH
17261: CALL_OW 380
// un := CreateHuman ;
17265: LD_ADDR_VAR 0 1
17269: PUSH
17270: CALL_OW 44
17274: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17275: LD_VAR 0 1
17279: PPUSH
17280: LD_INT 1
17282: PPUSH
17283: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17287: LD_INT 35
17289: PPUSH
17290: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17294: LD_VAR 0 1
17298: PPUSH
17299: LD_INT 22
17301: PUSH
17302: LD_OWVAR 2
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PPUSH
17311: CALL_OW 69
17315: PPUSH
17316: LD_VAR 0 1
17320: PPUSH
17321: CALL_OW 74
17325: PPUSH
17326: CALL_OW 115
// until IsDead ( un ) ;
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL_OW 301
17339: IFFALSE 17287
// end ;
17341: PPOPN 1
17343: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17344: LD_EXP 25
17348: PUSH
17349: LD_EXP 65
17353: AND
17354: IFFALSE 17366
17356: GO 17358
17358: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17359: LD_STRING earthquake(getX(game), 0, 32)
17361: PPUSH
17362: CALL_OW 559
17366: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17367: LD_EXP 25
17371: PUSH
17372: LD_EXP 66
17376: AND
17377: IFFALSE 17468
17379: GO 17381
17381: DISABLE
17382: LD_INT 0
17384: PPUSH
// begin enable ;
17385: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17386: LD_ADDR_VAR 0 1
17390: PUSH
17391: LD_INT 22
17393: PUSH
17394: LD_OWVAR 2
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 21
17405: PUSH
17406: LD_INT 2
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 33
17415: PUSH
17416: LD_INT 3
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: LIST
17427: PPUSH
17428: CALL_OW 69
17432: ST_TO_ADDR
// if not tmp then
17433: LD_VAR 0 1
17437: NOT
17438: IFFALSE 17442
// exit ;
17440: GO 17468
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17442: LD_VAR 0 1
17446: PUSH
17447: LD_INT 1
17449: PPUSH
17450: LD_VAR 0 1
17454: PPUSH
17455: CALL_OW 12
17459: ARRAY
17460: PPUSH
17461: LD_INT 1
17463: PPUSH
17464: CALL_OW 234
// end ;
17468: PPOPN 1
17470: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17471: LD_EXP 25
17475: PUSH
17476: LD_EXP 67
17480: AND
17481: IFFALSE 17622
17483: GO 17485
17485: DISABLE
17486: LD_INT 0
17488: PPUSH
17489: PPUSH
17490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17491: LD_ADDR_VAR 0 3
17495: PUSH
17496: LD_INT 22
17498: PUSH
17499: LD_OWVAR 2
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 25
17510: PUSH
17511: LD_INT 1
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PPUSH
17522: CALL_OW 69
17526: ST_TO_ADDR
// if not tmp then
17527: LD_VAR 0 3
17531: NOT
17532: IFFALSE 17536
// exit ;
17534: GO 17622
// un := tmp [ rand ( 1 , tmp ) ] ;
17536: LD_ADDR_VAR 0 2
17540: PUSH
17541: LD_VAR 0 3
17545: PUSH
17546: LD_INT 1
17548: PPUSH
17549: LD_VAR 0 3
17553: PPUSH
17554: CALL_OW 12
17558: ARRAY
17559: ST_TO_ADDR
// if Crawls ( un ) then
17560: LD_VAR 0 2
17564: PPUSH
17565: CALL_OW 318
17569: IFFALSE 17580
// ComWalk ( un ) ;
17571: LD_VAR 0 2
17575: PPUSH
17576: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17580: LD_VAR 0 2
17584: PPUSH
17585: LD_INT 9
17587: PPUSH
17588: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17592: LD_INT 28
17594: PPUSH
17595: LD_OWVAR 2
17599: PPUSH
17600: LD_INT 2
17602: PPUSH
17603: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17607: LD_INT 29
17609: PPUSH
17610: LD_OWVAR 2
17614: PPUSH
17615: LD_INT 2
17617: PPUSH
17618: CALL_OW 322
// end ;
17622: PPOPN 3
17624: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17625: LD_EXP 25
17629: PUSH
17630: LD_EXP 68
17634: AND
17635: IFFALSE 17746
17637: GO 17639
17639: DISABLE
17640: LD_INT 0
17642: PPUSH
17643: PPUSH
17644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17645: LD_ADDR_VAR 0 3
17649: PUSH
17650: LD_INT 22
17652: PUSH
17653: LD_OWVAR 2
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 25
17664: PUSH
17665: LD_INT 1
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PPUSH
17676: CALL_OW 69
17680: ST_TO_ADDR
// if not tmp then
17681: LD_VAR 0 3
17685: NOT
17686: IFFALSE 17690
// exit ;
17688: GO 17746
// un := tmp [ rand ( 1 , tmp ) ] ;
17690: LD_ADDR_VAR 0 2
17694: PUSH
17695: LD_VAR 0 3
17699: PUSH
17700: LD_INT 1
17702: PPUSH
17703: LD_VAR 0 3
17707: PPUSH
17708: CALL_OW 12
17712: ARRAY
17713: ST_TO_ADDR
// if Crawls ( un ) then
17714: LD_VAR 0 2
17718: PPUSH
17719: CALL_OW 318
17723: IFFALSE 17734
// ComWalk ( un ) ;
17725: LD_VAR 0 2
17729: PPUSH
17730: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17734: LD_VAR 0 2
17738: PPUSH
17739: LD_INT 8
17741: PPUSH
17742: CALL_OW 336
// end ;
17746: PPOPN 3
17748: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17749: LD_EXP 25
17753: PUSH
17754: LD_EXP 69
17758: AND
17759: IFFALSE 17903
17761: GO 17763
17763: DISABLE
17764: LD_INT 0
17766: PPUSH
17767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17768: LD_ADDR_VAR 0 2
17772: PUSH
17773: LD_INT 22
17775: PUSH
17776: LD_OWVAR 2
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 21
17787: PUSH
17788: LD_INT 2
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: LD_INT 2
17797: PUSH
17798: LD_INT 34
17800: PUSH
17801: LD_INT 12
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 34
17810: PUSH
17811: LD_INT 51
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 34
17820: PUSH
17821: LD_INT 32
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: LIST
17838: PPUSH
17839: CALL_OW 69
17843: ST_TO_ADDR
// if not tmp then
17844: LD_VAR 0 2
17848: NOT
17849: IFFALSE 17853
// exit ;
17851: GO 17903
// for i in tmp do
17853: LD_ADDR_VAR 0 1
17857: PUSH
17858: LD_VAR 0 2
17862: PUSH
17863: FOR_IN
17864: IFFALSE 17901
// if GetCargo ( i , mat_artifact ) = 0 then
17866: LD_VAR 0 1
17870: PPUSH
17871: LD_INT 4
17873: PPUSH
17874: CALL_OW 289
17878: PUSH
17879: LD_INT 0
17881: EQUAL
17882: IFFALSE 17899
// SetCargo ( i , mat_siberit , 100 ) ;
17884: LD_VAR 0 1
17888: PPUSH
17889: LD_INT 3
17891: PPUSH
17892: LD_INT 100
17894: PPUSH
17895: CALL_OW 290
17899: GO 17863
17901: POP
17902: POP
// end ;
17903: PPOPN 2
17905: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17906: LD_EXP 25
17910: PUSH
17911: LD_EXP 70
17915: AND
17916: IFFALSE 18099
17918: GO 17920
17920: DISABLE
17921: LD_INT 0
17923: PPUSH
17924: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17925: LD_ADDR_VAR 0 2
17929: PUSH
17930: LD_INT 22
17932: PUSH
17933: LD_OWVAR 2
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PPUSH
17942: CALL_OW 69
17946: ST_TO_ADDR
// if not tmp then
17947: LD_VAR 0 2
17951: NOT
17952: IFFALSE 17956
// exit ;
17954: GO 18099
// for i := 1 to 2 do
17956: LD_ADDR_VAR 0 1
17960: PUSH
17961: DOUBLE
17962: LD_INT 1
17964: DEC
17965: ST_TO_ADDR
17966: LD_INT 2
17968: PUSH
17969: FOR_TO
17970: IFFALSE 18097
// begin uc_side := your_side ;
17972: LD_ADDR_OWVAR 20
17976: PUSH
17977: LD_OWVAR 2
17981: ST_TO_ADDR
// uc_nation := nation_american ;
17982: LD_ADDR_OWVAR 21
17986: PUSH
17987: LD_INT 1
17989: ST_TO_ADDR
// vc_chassis := us_morphling ;
17990: LD_ADDR_OWVAR 37
17994: PUSH
17995: LD_INT 5
17997: ST_TO_ADDR
// vc_engine := engine_siberite ;
17998: LD_ADDR_OWVAR 39
18002: PUSH
18003: LD_INT 3
18005: ST_TO_ADDR
// vc_control := control_computer ;
18006: LD_ADDR_OWVAR 38
18010: PUSH
18011: LD_INT 3
18013: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18014: LD_ADDR_OWVAR 40
18018: PUSH
18019: LD_INT 10
18021: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18022: LD_VAR 0 2
18026: PUSH
18027: LD_INT 1
18029: ARRAY
18030: PPUSH
18031: CALL_OW 310
18035: NOT
18036: IFFALSE 18083
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18038: CALL_OW 45
18042: PPUSH
18043: LD_VAR 0 2
18047: PUSH
18048: LD_INT 1
18050: ARRAY
18051: PPUSH
18052: CALL_OW 250
18056: PPUSH
18057: LD_VAR 0 2
18061: PUSH
18062: LD_INT 1
18064: ARRAY
18065: PPUSH
18066: CALL_OW 251
18070: PPUSH
18071: LD_INT 12
18073: PPUSH
18074: LD_INT 1
18076: PPUSH
18077: CALL_OW 50
18081: GO 18095
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18083: CALL_OW 45
18087: PPUSH
18088: LD_INT 1
18090: PPUSH
18091: CALL_OW 51
// end ;
18095: GO 17969
18097: POP
18098: POP
// end ;
18099: PPOPN 2
18101: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18102: LD_EXP 25
18106: PUSH
18107: LD_EXP 71
18111: AND
18112: IFFALSE 18334
18114: GO 18116
18116: DISABLE
18117: LD_INT 0
18119: PPUSH
18120: PPUSH
18121: PPUSH
18122: PPUSH
18123: PPUSH
18124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18125: LD_ADDR_VAR 0 6
18129: PUSH
18130: LD_INT 22
18132: PUSH
18133: LD_OWVAR 2
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 21
18144: PUSH
18145: LD_INT 1
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 3
18154: PUSH
18155: LD_INT 23
18157: PUSH
18158: LD_INT 0
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: LIST
18173: PPUSH
18174: CALL_OW 69
18178: ST_TO_ADDR
// if not tmp then
18179: LD_VAR 0 6
18183: NOT
18184: IFFALSE 18188
// exit ;
18186: GO 18334
// s1 := rand ( 1 , 4 ) ;
18188: LD_ADDR_VAR 0 2
18192: PUSH
18193: LD_INT 1
18195: PPUSH
18196: LD_INT 4
18198: PPUSH
18199: CALL_OW 12
18203: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18204: LD_ADDR_VAR 0 4
18208: PUSH
18209: LD_VAR 0 6
18213: PUSH
18214: LD_INT 1
18216: ARRAY
18217: PPUSH
18218: LD_VAR 0 2
18222: PPUSH
18223: CALL_OW 259
18227: ST_TO_ADDR
// if s1 = 1 then
18228: LD_VAR 0 2
18232: PUSH
18233: LD_INT 1
18235: EQUAL
18236: IFFALSE 18256
// s2 := rand ( 2 , 4 ) else
18238: LD_ADDR_VAR 0 3
18242: PUSH
18243: LD_INT 2
18245: PPUSH
18246: LD_INT 4
18248: PPUSH
18249: CALL_OW 12
18253: ST_TO_ADDR
18254: GO 18264
// s2 := 1 ;
18256: LD_ADDR_VAR 0 3
18260: PUSH
18261: LD_INT 1
18263: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18264: LD_ADDR_VAR 0 5
18268: PUSH
18269: LD_VAR 0 6
18273: PUSH
18274: LD_INT 1
18276: ARRAY
18277: PPUSH
18278: LD_VAR 0 3
18282: PPUSH
18283: CALL_OW 259
18287: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18288: LD_VAR 0 6
18292: PUSH
18293: LD_INT 1
18295: ARRAY
18296: PPUSH
18297: LD_VAR 0 2
18301: PPUSH
18302: LD_VAR 0 5
18306: PPUSH
18307: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18311: LD_VAR 0 6
18315: PUSH
18316: LD_INT 1
18318: ARRAY
18319: PPUSH
18320: LD_VAR 0 3
18324: PPUSH
18325: LD_VAR 0 4
18329: PPUSH
18330: CALL_OW 237
// end ;
18334: PPOPN 6
18336: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18337: LD_EXP 25
18341: PUSH
18342: LD_EXP 72
18346: AND
18347: IFFALSE 18426
18349: GO 18351
18351: DISABLE
18352: LD_INT 0
18354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18355: LD_ADDR_VAR 0 1
18359: PUSH
18360: LD_INT 22
18362: PUSH
18363: LD_OWVAR 2
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 30
18374: PUSH
18375: LD_INT 3
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PPUSH
18386: CALL_OW 69
18390: ST_TO_ADDR
// if not tmp then
18391: LD_VAR 0 1
18395: NOT
18396: IFFALSE 18400
// exit ;
18398: GO 18426
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18400: LD_VAR 0 1
18404: PUSH
18405: LD_INT 1
18407: PPUSH
18408: LD_VAR 0 1
18412: PPUSH
18413: CALL_OW 12
18417: ARRAY
18418: PPUSH
18419: LD_INT 1
18421: PPUSH
18422: CALL_OW 234
// end ;
18426: PPOPN 1
18428: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18429: LD_EXP 25
18433: PUSH
18434: LD_EXP 73
18438: AND
18439: IFFALSE 18551
18441: GO 18443
18443: DISABLE
18444: LD_INT 0
18446: PPUSH
18447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18448: LD_ADDR_VAR 0 2
18452: PUSH
18453: LD_INT 22
18455: PUSH
18456: LD_OWVAR 2
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 2
18467: PUSH
18468: LD_INT 30
18470: PUSH
18471: LD_INT 27
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 30
18480: PUSH
18481: LD_INT 26
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 30
18490: PUSH
18491: LD_INT 28
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PPUSH
18508: CALL_OW 69
18512: ST_TO_ADDR
// if not tmp then
18513: LD_VAR 0 2
18517: NOT
18518: IFFALSE 18522
// exit ;
18520: GO 18551
// for i in tmp do
18522: LD_ADDR_VAR 0 1
18526: PUSH
18527: LD_VAR 0 2
18531: PUSH
18532: FOR_IN
18533: IFFALSE 18549
// SetLives ( i , 1 ) ;
18535: LD_VAR 0 1
18539: PPUSH
18540: LD_INT 1
18542: PPUSH
18543: CALL_OW 234
18547: GO 18532
18549: POP
18550: POP
// end ;
18551: PPOPN 2
18553: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18554: LD_EXP 25
18558: PUSH
18559: LD_EXP 74
18563: AND
18564: IFFALSE 18851
18566: GO 18568
18568: DISABLE
18569: LD_INT 0
18571: PPUSH
18572: PPUSH
18573: PPUSH
// begin i := rand ( 1 , 7 ) ;
18574: LD_ADDR_VAR 0 1
18578: PUSH
18579: LD_INT 1
18581: PPUSH
18582: LD_INT 7
18584: PPUSH
18585: CALL_OW 12
18589: ST_TO_ADDR
// case i of 1 :
18590: LD_VAR 0 1
18594: PUSH
18595: LD_INT 1
18597: DOUBLE
18598: EQUAL
18599: IFTRUE 18603
18601: GO 18613
18603: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18604: LD_STRING earthquake(getX(game), 0, 32)
18606: PPUSH
18607: CALL_OW 559
18611: GO 18851
18613: LD_INT 2
18615: DOUBLE
18616: EQUAL
18617: IFTRUE 18621
18619: GO 18635
18621: POP
// begin ToLua ( displayStucuk(); ) ;
18622: LD_STRING displayStucuk();
18624: PPUSH
18625: CALL_OW 559
// ResetFog ;
18629: CALL_OW 335
// end ; 3 :
18633: GO 18851
18635: LD_INT 3
18637: DOUBLE
18638: EQUAL
18639: IFTRUE 18643
18641: GO 18747
18643: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18644: LD_ADDR_VAR 0 2
18648: PUSH
18649: LD_INT 22
18651: PUSH
18652: LD_OWVAR 2
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 25
18663: PUSH
18664: LD_INT 1
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PPUSH
18675: CALL_OW 69
18679: ST_TO_ADDR
// if not tmp then
18680: LD_VAR 0 2
18684: NOT
18685: IFFALSE 18689
// exit ;
18687: GO 18851
// un := tmp [ rand ( 1 , tmp ) ] ;
18689: LD_ADDR_VAR 0 3
18693: PUSH
18694: LD_VAR 0 2
18698: PUSH
18699: LD_INT 1
18701: PPUSH
18702: LD_VAR 0 2
18706: PPUSH
18707: CALL_OW 12
18711: ARRAY
18712: ST_TO_ADDR
// if Crawls ( un ) then
18713: LD_VAR 0 3
18717: PPUSH
18718: CALL_OW 318
18722: IFFALSE 18733
// ComWalk ( un ) ;
18724: LD_VAR 0 3
18728: PPUSH
18729: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18733: LD_VAR 0 3
18737: PPUSH
18738: LD_INT 8
18740: PPUSH
18741: CALL_OW 336
// end ; 4 :
18745: GO 18851
18747: LD_INT 4
18749: DOUBLE
18750: EQUAL
18751: IFTRUE 18755
18753: GO 18829
18755: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18756: LD_ADDR_VAR 0 2
18760: PUSH
18761: LD_INT 22
18763: PUSH
18764: LD_OWVAR 2
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 30
18775: PUSH
18776: LD_INT 29
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PPUSH
18787: CALL_OW 69
18791: ST_TO_ADDR
// if not tmp then
18792: LD_VAR 0 2
18796: NOT
18797: IFFALSE 18801
// exit ;
18799: GO 18851
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18801: LD_VAR 0 2
18805: PUSH
18806: LD_INT 1
18808: ARRAY
18809: PPUSH
18810: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18814: LD_VAR 0 2
18818: PUSH
18819: LD_INT 1
18821: ARRAY
18822: PPUSH
18823: CALL_OW 65
// end ; 5 .. 7 :
18827: GO 18851
18829: LD_INT 5
18831: DOUBLE
18832: GREATEREQUAL
18833: IFFALSE 18841
18835: LD_INT 7
18837: DOUBLE
18838: LESSEQUAL
18839: IFTRUE 18843
18841: GO 18850
18843: POP
// StreamSibBomb ; end ;
18844: CALL 15088 0 0
18848: GO 18851
18850: POP
// end ;
18851: PPOPN 3
18853: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18854: LD_EXP 25
18858: PUSH
18859: LD_EXP 75
18863: AND
18864: IFFALSE 19020
18866: GO 18868
18868: DISABLE
18869: LD_INT 0
18871: PPUSH
18872: PPUSH
18873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18874: LD_ADDR_VAR 0 2
18878: PUSH
18879: LD_INT 81
18881: PUSH
18882: LD_OWVAR 2
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 2
18893: PUSH
18894: LD_INT 21
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 21
18906: PUSH
18907: LD_INT 2
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: LIST
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PPUSH
18923: CALL_OW 69
18927: ST_TO_ADDR
// if not tmp then
18928: LD_VAR 0 2
18932: NOT
18933: IFFALSE 18937
// exit ;
18935: GO 19020
// p := 0 ;
18937: LD_ADDR_VAR 0 3
18941: PUSH
18942: LD_INT 0
18944: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18945: LD_INT 35
18947: PPUSH
18948: CALL_OW 67
// p := p + 1 ;
18952: LD_ADDR_VAR 0 3
18956: PUSH
18957: LD_VAR 0 3
18961: PUSH
18962: LD_INT 1
18964: PLUS
18965: ST_TO_ADDR
// for i in tmp do
18966: LD_ADDR_VAR 0 1
18970: PUSH
18971: LD_VAR 0 2
18975: PUSH
18976: FOR_IN
18977: IFFALSE 19008
// if GetLives ( i ) < 1000 then
18979: LD_VAR 0 1
18983: PPUSH
18984: CALL_OW 256
18988: PUSH
18989: LD_INT 1000
18991: LESS
18992: IFFALSE 19006
// SetLives ( i , 1000 ) ;
18994: LD_VAR 0 1
18998: PPUSH
18999: LD_INT 1000
19001: PPUSH
19002: CALL_OW 234
19006: GO 18976
19008: POP
19009: POP
// until p > 20 ;
19010: LD_VAR 0 3
19014: PUSH
19015: LD_INT 20
19017: GREATER
19018: IFFALSE 18945
// end ;
19020: PPOPN 3
19022: END
// every 0 0$1 trigger StreamModeActive and sTime do
19023: LD_EXP 25
19027: PUSH
19028: LD_EXP 76
19032: AND
19033: IFFALSE 19068
19035: GO 19037
19037: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19038: LD_INT 28
19040: PPUSH
19041: LD_OWVAR 2
19045: PPUSH
19046: LD_INT 2
19048: PPUSH
19049: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19053: LD_INT 30
19055: PPUSH
19056: LD_OWVAR 2
19060: PPUSH
19061: LD_INT 2
19063: PPUSH
19064: CALL_OW 322
// end ;
19068: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19069: LD_EXP 25
19073: PUSH
19074: LD_EXP 77
19078: AND
19079: IFFALSE 19200
19081: GO 19083
19083: DISABLE
19084: LD_INT 0
19086: PPUSH
19087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19088: LD_ADDR_VAR 0 2
19092: PUSH
19093: LD_INT 22
19095: PUSH
19096: LD_OWVAR 2
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 21
19107: PUSH
19108: LD_INT 1
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 3
19117: PUSH
19118: LD_INT 23
19120: PUSH
19121: LD_INT 0
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: LIST
19136: PPUSH
19137: CALL_OW 69
19141: ST_TO_ADDR
// if not tmp then
19142: LD_VAR 0 2
19146: NOT
19147: IFFALSE 19151
// exit ;
19149: GO 19200
// for i in tmp do
19151: LD_ADDR_VAR 0 1
19155: PUSH
19156: LD_VAR 0 2
19160: PUSH
19161: FOR_IN
19162: IFFALSE 19198
// begin if Crawls ( i ) then
19164: LD_VAR 0 1
19168: PPUSH
19169: CALL_OW 318
19173: IFFALSE 19184
// ComWalk ( i ) ;
19175: LD_VAR 0 1
19179: PPUSH
19180: CALL_OW 138
// SetClass ( i , 2 ) ;
19184: LD_VAR 0 1
19188: PPUSH
19189: LD_INT 2
19191: PPUSH
19192: CALL_OW 336
// end ;
19196: GO 19161
19198: POP
19199: POP
// end ;
19200: PPOPN 2
19202: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19203: LD_EXP 25
19207: PUSH
19208: LD_EXP 78
19212: AND
19213: IFFALSE 19501
19215: GO 19217
19217: DISABLE
19218: LD_INT 0
19220: PPUSH
19221: PPUSH
19222: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19223: LD_OWVAR 2
19227: PPUSH
19228: LD_INT 9
19230: PPUSH
19231: LD_INT 1
19233: PPUSH
19234: LD_INT 1
19236: PPUSH
19237: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19241: LD_INT 9
19243: PPUSH
19244: LD_OWVAR 2
19248: PPUSH
19249: CALL_OW 343
// uc_side := 9 ;
19253: LD_ADDR_OWVAR 20
19257: PUSH
19258: LD_INT 9
19260: ST_TO_ADDR
// uc_nation := 2 ;
19261: LD_ADDR_OWVAR 21
19265: PUSH
19266: LD_INT 2
19268: ST_TO_ADDR
// hc_name := Dark Warrior ;
19269: LD_ADDR_OWVAR 26
19273: PUSH
19274: LD_STRING Dark Warrior
19276: ST_TO_ADDR
// hc_gallery :=  ;
19277: LD_ADDR_OWVAR 33
19281: PUSH
19282: LD_STRING 
19284: ST_TO_ADDR
// hc_noskilllimit := true ;
19285: LD_ADDR_OWVAR 76
19289: PUSH
19290: LD_INT 1
19292: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19293: LD_ADDR_OWVAR 31
19297: PUSH
19298: LD_INT 30
19300: PUSH
19301: LD_INT 30
19303: PUSH
19304: LD_INT 30
19306: PUSH
19307: LD_INT 30
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: ST_TO_ADDR
// un := CreateHuman ;
19316: LD_ADDR_VAR 0 3
19320: PUSH
19321: CALL_OW 44
19325: ST_TO_ADDR
// hc_noskilllimit := false ;
19326: LD_ADDR_OWVAR 76
19330: PUSH
19331: LD_INT 0
19333: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19334: LD_VAR 0 3
19338: PPUSH
19339: LD_INT 1
19341: PPUSH
19342: CALL_OW 51
// ToLua ( playRanger() ) ;
19346: LD_STRING playRanger()
19348: PPUSH
19349: CALL_OW 559
// p := 0 ;
19353: LD_ADDR_VAR 0 2
19357: PUSH
19358: LD_INT 0
19360: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19361: LD_INT 35
19363: PPUSH
19364: CALL_OW 67
// p := p + 1 ;
19368: LD_ADDR_VAR 0 2
19372: PUSH
19373: LD_VAR 0 2
19377: PUSH
19378: LD_INT 1
19380: PLUS
19381: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19382: LD_VAR 0 3
19386: PPUSH
19387: CALL_OW 256
19391: PUSH
19392: LD_INT 1000
19394: LESS
19395: IFFALSE 19409
// SetLives ( un , 1000 ) ;
19397: LD_VAR 0 3
19401: PPUSH
19402: LD_INT 1000
19404: PPUSH
19405: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19409: LD_VAR 0 3
19413: PPUSH
19414: LD_INT 81
19416: PUSH
19417: LD_OWVAR 2
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 91
19428: PUSH
19429: LD_VAR 0 3
19433: PUSH
19434: LD_INT 30
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: LIST
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PPUSH
19446: CALL_OW 69
19450: PPUSH
19451: LD_VAR 0 3
19455: PPUSH
19456: CALL_OW 74
19460: PPUSH
19461: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19465: LD_VAR 0 2
19469: PUSH
19470: LD_INT 80
19472: GREATER
19473: PUSH
19474: LD_VAR 0 3
19478: PPUSH
19479: CALL_OW 301
19483: OR
19484: IFFALSE 19361
// if un then
19486: LD_VAR 0 3
19490: IFFALSE 19501
// RemoveUnit ( un ) ;
19492: LD_VAR 0 3
19496: PPUSH
19497: CALL_OW 64
// end ;
19501: PPOPN 3
19503: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19504: LD_EXP 79
19508: IFFALSE 19624
19510: GO 19512
19512: DISABLE
19513: LD_INT 0
19515: PPUSH
19516: PPUSH
19517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19518: LD_ADDR_VAR 0 2
19522: PUSH
19523: LD_INT 81
19525: PUSH
19526: LD_OWVAR 2
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 21
19537: PUSH
19538: LD_INT 1
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PPUSH
19549: CALL_OW 69
19553: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19554: LD_STRING playComputer()
19556: PPUSH
19557: CALL_OW 559
// if not tmp then
19561: LD_VAR 0 2
19565: NOT
19566: IFFALSE 19570
// exit ;
19568: GO 19624
// for i in tmp do
19570: LD_ADDR_VAR 0 1
19574: PUSH
19575: LD_VAR 0 2
19579: PUSH
19580: FOR_IN
19581: IFFALSE 19622
// for j := 1 to 4 do
19583: LD_ADDR_VAR 0 3
19587: PUSH
19588: DOUBLE
19589: LD_INT 1
19591: DEC
19592: ST_TO_ADDR
19593: LD_INT 4
19595: PUSH
19596: FOR_TO
19597: IFFALSE 19618
// SetSkill ( i , j , 10 ) ;
19599: LD_VAR 0 1
19603: PPUSH
19604: LD_VAR 0 3
19608: PPUSH
19609: LD_INT 10
19611: PPUSH
19612: CALL_OW 237
19616: GO 19596
19618: POP
19619: POP
19620: GO 19580
19622: POP
19623: POP
// end ;
19624: PPOPN 3
19626: END
// every 0 0$1 trigger s30 do var i , tmp ;
19627: LD_EXP 80
19631: IFFALSE 19700
19633: GO 19635
19635: DISABLE
19636: LD_INT 0
19638: PPUSH
19639: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19640: LD_ADDR_VAR 0 2
19644: PUSH
19645: LD_INT 22
19647: PUSH
19648: LD_OWVAR 2
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PPUSH
19657: CALL_OW 69
19661: ST_TO_ADDR
// if not tmp then
19662: LD_VAR 0 2
19666: NOT
19667: IFFALSE 19671
// exit ;
19669: GO 19700
// for i in tmp do
19671: LD_ADDR_VAR 0 1
19675: PUSH
19676: LD_VAR 0 2
19680: PUSH
19681: FOR_IN
19682: IFFALSE 19698
// SetLives ( i , 300 ) ;
19684: LD_VAR 0 1
19688: PPUSH
19689: LD_INT 300
19691: PPUSH
19692: CALL_OW 234
19696: GO 19681
19698: POP
19699: POP
// end ;
19700: PPOPN 2
19702: END
// every 0 0$1 trigger s60 do var i , tmp ;
19703: LD_EXP 81
19707: IFFALSE 19776
19709: GO 19711
19711: DISABLE
19712: LD_INT 0
19714: PPUSH
19715: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19716: LD_ADDR_VAR 0 2
19720: PUSH
19721: LD_INT 22
19723: PUSH
19724: LD_OWVAR 2
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PPUSH
19733: CALL_OW 69
19737: ST_TO_ADDR
// if not tmp then
19738: LD_VAR 0 2
19742: NOT
19743: IFFALSE 19747
// exit ;
19745: GO 19776
// for i in tmp do
19747: LD_ADDR_VAR 0 1
19751: PUSH
19752: LD_VAR 0 2
19756: PUSH
19757: FOR_IN
19758: IFFALSE 19774
// SetLives ( i , 600 ) ;
19760: LD_VAR 0 1
19764: PPUSH
19765: LD_INT 600
19767: PPUSH
19768: CALL_OW 234
19772: GO 19757
19774: POP
19775: POP
// end ;
19776: PPOPN 2
19778: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19779: LD_INT 0
19781: PPUSH
// case cmd of 301 :
19782: LD_VAR 0 1
19786: PUSH
19787: LD_INT 301
19789: DOUBLE
19790: EQUAL
19791: IFTRUE 19795
19793: GO 19827
19795: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19796: LD_VAR 0 6
19800: PPUSH
19801: LD_VAR 0 7
19805: PPUSH
19806: LD_VAR 0 8
19810: PPUSH
19811: LD_VAR 0 4
19815: PPUSH
19816: LD_VAR 0 5
19820: PPUSH
19821: CALL 21028 0 5
19825: GO 19948
19827: LD_INT 302
19829: DOUBLE
19830: EQUAL
19831: IFTRUE 19835
19833: GO 19872
19835: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19836: LD_VAR 0 6
19840: PPUSH
19841: LD_VAR 0 7
19845: PPUSH
19846: LD_VAR 0 8
19850: PPUSH
19851: LD_VAR 0 9
19855: PPUSH
19856: LD_VAR 0 4
19860: PPUSH
19861: LD_VAR 0 5
19865: PPUSH
19866: CALL 21119 0 6
19870: GO 19948
19872: LD_INT 303
19874: DOUBLE
19875: EQUAL
19876: IFTRUE 19880
19878: GO 19917
19880: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19881: LD_VAR 0 6
19885: PPUSH
19886: LD_VAR 0 7
19890: PPUSH
19891: LD_VAR 0 8
19895: PPUSH
19896: LD_VAR 0 9
19900: PPUSH
19901: LD_VAR 0 4
19905: PPUSH
19906: LD_VAR 0 5
19910: PPUSH
19911: CALL 19953 0 6
19915: GO 19948
19917: LD_INT 304
19919: DOUBLE
19920: EQUAL
19921: IFTRUE 19925
19923: GO 19947
19925: POP
// hHackTeleport ( unit , x , y ) ; end ;
19926: LD_VAR 0 2
19930: PPUSH
19931: LD_VAR 0 4
19935: PPUSH
19936: LD_VAR 0 5
19940: PPUSH
19941: CALL 21712 0 3
19945: GO 19948
19947: POP
// end ;
19948: LD_VAR 0 12
19952: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19953: LD_INT 0
19955: PPUSH
19956: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19957: LD_VAR 0 1
19961: PUSH
19962: LD_INT 1
19964: LESS
19965: PUSH
19966: LD_VAR 0 1
19970: PUSH
19971: LD_INT 3
19973: GREATER
19974: OR
19975: PUSH
19976: LD_VAR 0 5
19980: PPUSH
19981: LD_VAR 0 6
19985: PPUSH
19986: CALL_OW 428
19990: OR
19991: IFFALSE 19995
// exit ;
19993: GO 20715
// uc_side := your_side ;
19995: LD_ADDR_OWVAR 20
19999: PUSH
20000: LD_OWVAR 2
20004: ST_TO_ADDR
// uc_nation := nation ;
20005: LD_ADDR_OWVAR 21
20009: PUSH
20010: LD_VAR 0 1
20014: ST_TO_ADDR
// bc_level = 1 ;
20015: LD_ADDR_OWVAR 43
20019: PUSH
20020: LD_INT 1
20022: ST_TO_ADDR
// case btype of 1 :
20023: LD_VAR 0 2
20027: PUSH
20028: LD_INT 1
20030: DOUBLE
20031: EQUAL
20032: IFTRUE 20036
20034: GO 20047
20036: POP
// bc_type := b_depot ; 2 :
20037: LD_ADDR_OWVAR 42
20041: PUSH
20042: LD_INT 0
20044: ST_TO_ADDR
20045: GO 20659
20047: LD_INT 2
20049: DOUBLE
20050: EQUAL
20051: IFTRUE 20055
20053: GO 20066
20055: POP
// bc_type := b_warehouse ; 3 :
20056: LD_ADDR_OWVAR 42
20060: PUSH
20061: LD_INT 1
20063: ST_TO_ADDR
20064: GO 20659
20066: LD_INT 3
20068: DOUBLE
20069: EQUAL
20070: IFTRUE 20074
20072: GO 20085
20074: POP
// bc_type := b_lab ; 4 .. 9 :
20075: LD_ADDR_OWVAR 42
20079: PUSH
20080: LD_INT 6
20082: ST_TO_ADDR
20083: GO 20659
20085: LD_INT 4
20087: DOUBLE
20088: GREATEREQUAL
20089: IFFALSE 20097
20091: LD_INT 9
20093: DOUBLE
20094: LESSEQUAL
20095: IFTRUE 20099
20097: GO 20151
20099: POP
// begin bc_type := b_lab_half ;
20100: LD_ADDR_OWVAR 42
20104: PUSH
20105: LD_INT 7
20107: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20108: LD_ADDR_OWVAR 44
20112: PUSH
20113: LD_INT 10
20115: PUSH
20116: LD_INT 11
20118: PUSH
20119: LD_INT 12
20121: PUSH
20122: LD_INT 15
20124: PUSH
20125: LD_INT 14
20127: PUSH
20128: LD_INT 13
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: PUSH
20139: LD_VAR 0 2
20143: PUSH
20144: LD_INT 3
20146: MINUS
20147: ARRAY
20148: ST_TO_ADDR
// end ; 10 .. 13 :
20149: GO 20659
20151: LD_INT 10
20153: DOUBLE
20154: GREATEREQUAL
20155: IFFALSE 20163
20157: LD_INT 13
20159: DOUBLE
20160: LESSEQUAL
20161: IFTRUE 20165
20163: GO 20242
20165: POP
// begin bc_type := b_lab_full ;
20166: LD_ADDR_OWVAR 42
20170: PUSH
20171: LD_INT 8
20173: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20174: LD_ADDR_OWVAR 44
20178: PUSH
20179: LD_INT 10
20181: PUSH
20182: LD_INT 12
20184: PUSH
20185: LD_INT 14
20187: PUSH
20188: LD_INT 13
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: PUSH
20197: LD_VAR 0 2
20201: PUSH
20202: LD_INT 9
20204: MINUS
20205: ARRAY
20206: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20207: LD_ADDR_OWVAR 45
20211: PUSH
20212: LD_INT 11
20214: PUSH
20215: LD_INT 15
20217: PUSH
20218: LD_INT 12
20220: PUSH
20221: LD_INT 15
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: PUSH
20230: LD_VAR 0 2
20234: PUSH
20235: LD_INT 9
20237: MINUS
20238: ARRAY
20239: ST_TO_ADDR
// end ; 14 :
20240: GO 20659
20242: LD_INT 14
20244: DOUBLE
20245: EQUAL
20246: IFTRUE 20250
20248: GO 20261
20250: POP
// bc_type := b_workshop ; 15 :
20251: LD_ADDR_OWVAR 42
20255: PUSH
20256: LD_INT 2
20258: ST_TO_ADDR
20259: GO 20659
20261: LD_INT 15
20263: DOUBLE
20264: EQUAL
20265: IFTRUE 20269
20267: GO 20280
20269: POP
// bc_type := b_factory ; 16 :
20270: LD_ADDR_OWVAR 42
20274: PUSH
20275: LD_INT 3
20277: ST_TO_ADDR
20278: GO 20659
20280: LD_INT 16
20282: DOUBLE
20283: EQUAL
20284: IFTRUE 20288
20286: GO 20299
20288: POP
// bc_type := b_ext_gun ; 17 :
20289: LD_ADDR_OWVAR 42
20293: PUSH
20294: LD_INT 17
20296: ST_TO_ADDR
20297: GO 20659
20299: LD_INT 17
20301: DOUBLE
20302: EQUAL
20303: IFTRUE 20307
20305: GO 20335
20307: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20308: LD_ADDR_OWVAR 42
20312: PUSH
20313: LD_INT 19
20315: PUSH
20316: LD_INT 23
20318: PUSH
20319: LD_INT 19
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: LIST
20326: PUSH
20327: LD_VAR 0 1
20331: ARRAY
20332: ST_TO_ADDR
20333: GO 20659
20335: LD_INT 18
20337: DOUBLE
20338: EQUAL
20339: IFTRUE 20343
20341: GO 20354
20343: POP
// bc_type := b_ext_radar ; 19 :
20344: LD_ADDR_OWVAR 42
20348: PUSH
20349: LD_INT 20
20351: ST_TO_ADDR
20352: GO 20659
20354: LD_INT 19
20356: DOUBLE
20357: EQUAL
20358: IFTRUE 20362
20360: GO 20373
20362: POP
// bc_type := b_ext_radio ; 20 :
20363: LD_ADDR_OWVAR 42
20367: PUSH
20368: LD_INT 22
20370: ST_TO_ADDR
20371: GO 20659
20373: LD_INT 20
20375: DOUBLE
20376: EQUAL
20377: IFTRUE 20381
20379: GO 20392
20381: POP
// bc_type := b_ext_siberium ; 21 :
20382: LD_ADDR_OWVAR 42
20386: PUSH
20387: LD_INT 21
20389: ST_TO_ADDR
20390: GO 20659
20392: LD_INT 21
20394: DOUBLE
20395: EQUAL
20396: IFTRUE 20400
20398: GO 20411
20400: POP
// bc_type := b_ext_computer ; 22 :
20401: LD_ADDR_OWVAR 42
20405: PUSH
20406: LD_INT 24
20408: ST_TO_ADDR
20409: GO 20659
20411: LD_INT 22
20413: DOUBLE
20414: EQUAL
20415: IFTRUE 20419
20417: GO 20430
20419: POP
// bc_type := b_ext_track ; 23 :
20420: LD_ADDR_OWVAR 42
20424: PUSH
20425: LD_INT 16
20427: ST_TO_ADDR
20428: GO 20659
20430: LD_INT 23
20432: DOUBLE
20433: EQUAL
20434: IFTRUE 20438
20436: GO 20449
20438: POP
// bc_type := b_ext_laser ; 24 :
20439: LD_ADDR_OWVAR 42
20443: PUSH
20444: LD_INT 25
20446: ST_TO_ADDR
20447: GO 20659
20449: LD_INT 24
20451: DOUBLE
20452: EQUAL
20453: IFTRUE 20457
20455: GO 20468
20457: POP
// bc_type := b_control_tower ; 25 :
20458: LD_ADDR_OWVAR 42
20462: PUSH
20463: LD_INT 36
20465: ST_TO_ADDR
20466: GO 20659
20468: LD_INT 25
20470: DOUBLE
20471: EQUAL
20472: IFTRUE 20476
20474: GO 20487
20476: POP
// bc_type := b_breastwork ; 26 :
20477: LD_ADDR_OWVAR 42
20481: PUSH
20482: LD_INT 31
20484: ST_TO_ADDR
20485: GO 20659
20487: LD_INT 26
20489: DOUBLE
20490: EQUAL
20491: IFTRUE 20495
20493: GO 20506
20495: POP
// bc_type := b_bunker ; 27 :
20496: LD_ADDR_OWVAR 42
20500: PUSH
20501: LD_INT 32
20503: ST_TO_ADDR
20504: GO 20659
20506: LD_INT 27
20508: DOUBLE
20509: EQUAL
20510: IFTRUE 20514
20512: GO 20525
20514: POP
// bc_type := b_turret ; 28 :
20515: LD_ADDR_OWVAR 42
20519: PUSH
20520: LD_INT 33
20522: ST_TO_ADDR
20523: GO 20659
20525: LD_INT 28
20527: DOUBLE
20528: EQUAL
20529: IFTRUE 20533
20531: GO 20544
20533: POP
// bc_type := b_armoury ; 29 :
20534: LD_ADDR_OWVAR 42
20538: PUSH
20539: LD_INT 4
20541: ST_TO_ADDR
20542: GO 20659
20544: LD_INT 29
20546: DOUBLE
20547: EQUAL
20548: IFTRUE 20552
20550: GO 20563
20552: POP
// bc_type := b_barracks ; 30 :
20553: LD_ADDR_OWVAR 42
20557: PUSH
20558: LD_INT 5
20560: ST_TO_ADDR
20561: GO 20659
20563: LD_INT 30
20565: DOUBLE
20566: EQUAL
20567: IFTRUE 20571
20569: GO 20582
20571: POP
// bc_type := b_solar_power ; 31 :
20572: LD_ADDR_OWVAR 42
20576: PUSH
20577: LD_INT 27
20579: ST_TO_ADDR
20580: GO 20659
20582: LD_INT 31
20584: DOUBLE
20585: EQUAL
20586: IFTRUE 20590
20588: GO 20601
20590: POP
// bc_type := b_oil_power ; 32 :
20591: LD_ADDR_OWVAR 42
20595: PUSH
20596: LD_INT 26
20598: ST_TO_ADDR
20599: GO 20659
20601: LD_INT 32
20603: DOUBLE
20604: EQUAL
20605: IFTRUE 20609
20607: GO 20620
20609: POP
// bc_type := b_siberite_power ; 33 :
20610: LD_ADDR_OWVAR 42
20614: PUSH
20615: LD_INT 28
20617: ST_TO_ADDR
20618: GO 20659
20620: LD_INT 33
20622: DOUBLE
20623: EQUAL
20624: IFTRUE 20628
20626: GO 20639
20628: POP
// bc_type := b_oil_mine ; 34 :
20629: LD_ADDR_OWVAR 42
20633: PUSH
20634: LD_INT 29
20636: ST_TO_ADDR
20637: GO 20659
20639: LD_INT 34
20641: DOUBLE
20642: EQUAL
20643: IFTRUE 20647
20645: GO 20658
20647: POP
// bc_type := b_siberite_mine ; end ;
20648: LD_ADDR_OWVAR 42
20652: PUSH
20653: LD_INT 30
20655: ST_TO_ADDR
20656: GO 20659
20658: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20659: LD_ADDR_VAR 0 8
20663: PUSH
20664: LD_VAR 0 5
20668: PPUSH
20669: LD_VAR 0 6
20673: PPUSH
20674: LD_VAR 0 3
20678: PPUSH
20679: CALL_OW 47
20683: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20684: LD_OWVAR 42
20688: PUSH
20689: LD_INT 32
20691: PUSH
20692: LD_INT 33
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: IN
20699: IFFALSE 20715
// PlaceWeaponTurret ( b , weapon ) ;
20701: LD_VAR 0 8
20705: PPUSH
20706: LD_VAR 0 4
20710: PPUSH
20711: CALL_OW 431
// end ;
20715: LD_VAR 0 7
20719: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20720: LD_INT 0
20722: PPUSH
20723: PPUSH
20724: PPUSH
20725: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20726: LD_ADDR_VAR 0 4
20730: PUSH
20731: LD_INT 22
20733: PUSH
20734: LD_OWVAR 2
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 2
20745: PUSH
20746: LD_INT 30
20748: PUSH
20749: LD_INT 0
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 30
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: LIST
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PPUSH
20775: CALL_OW 69
20779: ST_TO_ADDR
// if not tmp then
20780: LD_VAR 0 4
20784: NOT
20785: IFFALSE 20789
// exit ;
20787: GO 20848
// for i in tmp do
20789: LD_ADDR_VAR 0 2
20793: PUSH
20794: LD_VAR 0 4
20798: PUSH
20799: FOR_IN
20800: IFFALSE 20846
// for j = 1 to 3 do
20802: LD_ADDR_VAR 0 3
20806: PUSH
20807: DOUBLE
20808: LD_INT 1
20810: DEC
20811: ST_TO_ADDR
20812: LD_INT 3
20814: PUSH
20815: FOR_TO
20816: IFFALSE 20842
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20818: LD_VAR 0 2
20822: PPUSH
20823: CALL_OW 274
20827: PPUSH
20828: LD_VAR 0 3
20832: PPUSH
20833: LD_INT 99999
20835: PPUSH
20836: CALL_OW 277
20840: GO 20815
20842: POP
20843: POP
20844: GO 20799
20846: POP
20847: POP
// end ;
20848: LD_VAR 0 1
20852: RET
// export function hHackSetLevel10 ; var i , j ; begin
20853: LD_INT 0
20855: PPUSH
20856: PPUSH
20857: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20858: LD_ADDR_VAR 0 2
20862: PUSH
20863: LD_INT 21
20865: PUSH
20866: LD_INT 1
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PPUSH
20873: CALL_OW 69
20877: PUSH
20878: FOR_IN
20879: IFFALSE 20931
// if IsSelected ( i ) then
20881: LD_VAR 0 2
20885: PPUSH
20886: CALL_OW 306
20890: IFFALSE 20929
// begin for j := 1 to 4 do
20892: LD_ADDR_VAR 0 3
20896: PUSH
20897: DOUBLE
20898: LD_INT 1
20900: DEC
20901: ST_TO_ADDR
20902: LD_INT 4
20904: PUSH
20905: FOR_TO
20906: IFFALSE 20927
// SetSkill ( i , j , 10 ) ;
20908: LD_VAR 0 2
20912: PPUSH
20913: LD_VAR 0 3
20917: PPUSH
20918: LD_INT 10
20920: PPUSH
20921: CALL_OW 237
20925: GO 20905
20927: POP
20928: POP
// end ;
20929: GO 20878
20931: POP
20932: POP
// end ;
20933: LD_VAR 0 1
20937: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20938: LD_INT 0
20940: PPUSH
20941: PPUSH
20942: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20943: LD_ADDR_VAR 0 2
20947: PUSH
20948: LD_INT 22
20950: PUSH
20951: LD_OWVAR 2
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 21
20962: PUSH
20963: LD_INT 1
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PPUSH
20974: CALL_OW 69
20978: PUSH
20979: FOR_IN
20980: IFFALSE 21021
// begin for j := 1 to 4 do
20982: LD_ADDR_VAR 0 3
20986: PUSH
20987: DOUBLE
20988: LD_INT 1
20990: DEC
20991: ST_TO_ADDR
20992: LD_INT 4
20994: PUSH
20995: FOR_TO
20996: IFFALSE 21017
// SetSkill ( i , j , 10 ) ;
20998: LD_VAR 0 2
21002: PPUSH
21003: LD_VAR 0 3
21007: PPUSH
21008: LD_INT 10
21010: PPUSH
21011: CALL_OW 237
21015: GO 20995
21017: POP
21018: POP
// end ;
21019: GO 20979
21021: POP
21022: POP
// end ;
21023: LD_VAR 0 1
21027: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21028: LD_INT 0
21030: PPUSH
// uc_side := your_side ;
21031: LD_ADDR_OWVAR 20
21035: PUSH
21036: LD_OWVAR 2
21040: ST_TO_ADDR
// uc_nation := nation ;
21041: LD_ADDR_OWVAR 21
21045: PUSH
21046: LD_VAR 0 1
21050: ST_TO_ADDR
// InitHc ;
21051: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21055: LD_INT 0
21057: PPUSH
21058: LD_VAR 0 2
21062: PPUSH
21063: LD_VAR 0 3
21067: PPUSH
21068: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21072: LD_VAR 0 4
21076: PPUSH
21077: LD_VAR 0 5
21081: PPUSH
21082: CALL_OW 428
21086: PUSH
21087: LD_INT 0
21089: EQUAL
21090: IFFALSE 21114
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21092: CALL_OW 44
21096: PPUSH
21097: LD_VAR 0 4
21101: PPUSH
21102: LD_VAR 0 5
21106: PPUSH
21107: LD_INT 1
21109: PPUSH
21110: CALL_OW 48
// end ;
21114: LD_VAR 0 6
21118: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21119: LD_INT 0
21121: PPUSH
21122: PPUSH
// uc_side := your_side ;
21123: LD_ADDR_OWVAR 20
21127: PUSH
21128: LD_OWVAR 2
21132: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21133: LD_VAR 0 1
21137: PUSH
21138: LD_INT 1
21140: PUSH
21141: LD_INT 2
21143: PUSH
21144: LD_INT 3
21146: PUSH
21147: LD_INT 4
21149: PUSH
21150: LD_INT 5
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: IN
21160: IFFALSE 21172
// uc_nation := nation_american else
21162: LD_ADDR_OWVAR 21
21166: PUSH
21167: LD_INT 1
21169: ST_TO_ADDR
21170: GO 21215
// if chassis in [ 11 , 12 , 13 , 14 ] then
21172: LD_VAR 0 1
21176: PUSH
21177: LD_INT 11
21179: PUSH
21180: LD_INT 12
21182: PUSH
21183: LD_INT 13
21185: PUSH
21186: LD_INT 14
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: IN
21195: IFFALSE 21207
// uc_nation := nation_arabian else
21197: LD_ADDR_OWVAR 21
21201: PUSH
21202: LD_INT 2
21204: ST_TO_ADDR
21205: GO 21215
// uc_nation := nation_russian ;
21207: LD_ADDR_OWVAR 21
21211: PUSH
21212: LD_INT 3
21214: ST_TO_ADDR
// vc_chassis := chassis ;
21215: LD_ADDR_OWVAR 37
21219: PUSH
21220: LD_VAR 0 1
21224: ST_TO_ADDR
// vc_engine := engine ;
21225: LD_ADDR_OWVAR 39
21229: PUSH
21230: LD_VAR 0 2
21234: ST_TO_ADDR
// vc_control := control ;
21235: LD_ADDR_OWVAR 38
21239: PUSH
21240: LD_VAR 0 3
21244: ST_TO_ADDR
// vc_weapon := weapon ;
21245: LD_ADDR_OWVAR 40
21249: PUSH
21250: LD_VAR 0 4
21254: ST_TO_ADDR
// un := CreateVehicle ;
21255: LD_ADDR_VAR 0 8
21259: PUSH
21260: CALL_OW 45
21264: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21265: LD_VAR 0 8
21269: PPUSH
21270: LD_INT 0
21272: PPUSH
21273: LD_INT 5
21275: PPUSH
21276: CALL_OW 12
21280: PPUSH
21281: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21285: LD_VAR 0 8
21289: PPUSH
21290: LD_VAR 0 5
21294: PPUSH
21295: LD_VAR 0 6
21299: PPUSH
21300: LD_INT 1
21302: PPUSH
21303: CALL_OW 48
// end ;
21307: LD_VAR 0 7
21311: RET
// export hInvincible ; every 1 do
21312: GO 21314
21314: DISABLE
// hInvincible := [ ] ;
21315: LD_ADDR_EXP 82
21319: PUSH
21320: EMPTY
21321: ST_TO_ADDR
21322: END
// every 10 do var i ;
21323: GO 21325
21325: DISABLE
21326: LD_INT 0
21328: PPUSH
// begin enable ;
21329: ENABLE
// if not hInvincible then
21330: LD_EXP 82
21334: NOT
21335: IFFALSE 21339
// exit ;
21337: GO 21383
// for i in hInvincible do
21339: LD_ADDR_VAR 0 1
21343: PUSH
21344: LD_EXP 82
21348: PUSH
21349: FOR_IN
21350: IFFALSE 21381
// if GetLives ( i ) < 1000 then
21352: LD_VAR 0 1
21356: PPUSH
21357: CALL_OW 256
21361: PUSH
21362: LD_INT 1000
21364: LESS
21365: IFFALSE 21379
// SetLives ( i , 1000 ) ;
21367: LD_VAR 0 1
21371: PPUSH
21372: LD_INT 1000
21374: PPUSH
21375: CALL_OW 234
21379: GO 21349
21381: POP
21382: POP
// end ;
21383: PPOPN 1
21385: END
// export function hHackInvincible ; var i ; begin
21386: LD_INT 0
21388: PPUSH
21389: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21390: LD_ADDR_VAR 0 2
21394: PUSH
21395: LD_INT 2
21397: PUSH
21398: LD_INT 21
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 21
21410: PUSH
21411: LD_INT 2
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: LIST
21422: PPUSH
21423: CALL_OW 69
21427: PUSH
21428: FOR_IN
21429: IFFALSE 21490
// if IsSelected ( i ) then
21431: LD_VAR 0 2
21435: PPUSH
21436: CALL_OW 306
21440: IFFALSE 21488
// begin if i in hInvincible then
21442: LD_VAR 0 2
21446: PUSH
21447: LD_EXP 82
21451: IN
21452: IFFALSE 21472
// hInvincible := hInvincible diff i else
21454: LD_ADDR_EXP 82
21458: PUSH
21459: LD_EXP 82
21463: PUSH
21464: LD_VAR 0 2
21468: DIFF
21469: ST_TO_ADDR
21470: GO 21488
// hInvincible := hInvincible union i ;
21472: LD_ADDR_EXP 82
21476: PUSH
21477: LD_EXP 82
21481: PUSH
21482: LD_VAR 0 2
21486: UNION
21487: ST_TO_ADDR
// end ;
21488: GO 21428
21490: POP
21491: POP
// end ;
21492: LD_VAR 0 1
21496: RET
// export function hHackInvisible ; var i , j ; begin
21497: LD_INT 0
21499: PPUSH
21500: PPUSH
21501: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21502: LD_ADDR_VAR 0 2
21506: PUSH
21507: LD_INT 21
21509: PUSH
21510: LD_INT 1
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PPUSH
21517: CALL_OW 69
21521: PUSH
21522: FOR_IN
21523: IFFALSE 21547
// if IsSelected ( i ) then
21525: LD_VAR 0 2
21529: PPUSH
21530: CALL_OW 306
21534: IFFALSE 21545
// ComForceInvisible ( i ) ;
21536: LD_VAR 0 2
21540: PPUSH
21541: CALL_OW 496
21545: GO 21522
21547: POP
21548: POP
// end ;
21549: LD_VAR 0 1
21553: RET
// export function hHackChangeYourSide ; begin
21554: LD_INT 0
21556: PPUSH
// if your_side = 8 then
21557: LD_OWVAR 2
21561: PUSH
21562: LD_INT 8
21564: EQUAL
21565: IFFALSE 21577
// your_side := 0 else
21567: LD_ADDR_OWVAR 2
21571: PUSH
21572: LD_INT 0
21574: ST_TO_ADDR
21575: GO 21591
// your_side := your_side + 1 ;
21577: LD_ADDR_OWVAR 2
21581: PUSH
21582: LD_OWVAR 2
21586: PUSH
21587: LD_INT 1
21589: PLUS
21590: ST_TO_ADDR
// end ;
21591: LD_VAR 0 1
21595: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21596: LD_INT 0
21598: PPUSH
21599: PPUSH
21600: PPUSH
// for i in all_units do
21601: LD_ADDR_VAR 0 2
21605: PUSH
21606: LD_OWVAR 3
21610: PUSH
21611: FOR_IN
21612: IFFALSE 21690
// if IsSelected ( i ) then
21614: LD_VAR 0 2
21618: PPUSH
21619: CALL_OW 306
21623: IFFALSE 21688
// begin j := GetSide ( i ) ;
21625: LD_ADDR_VAR 0 3
21629: PUSH
21630: LD_VAR 0 2
21634: PPUSH
21635: CALL_OW 255
21639: ST_TO_ADDR
// if j = 8 then
21640: LD_VAR 0 3
21644: PUSH
21645: LD_INT 8
21647: EQUAL
21648: IFFALSE 21660
// j := 0 else
21650: LD_ADDR_VAR 0 3
21654: PUSH
21655: LD_INT 0
21657: ST_TO_ADDR
21658: GO 21674
// j := j + 1 ;
21660: LD_ADDR_VAR 0 3
21664: PUSH
21665: LD_VAR 0 3
21669: PUSH
21670: LD_INT 1
21672: PLUS
21673: ST_TO_ADDR
// SetSide ( i , j ) ;
21674: LD_VAR 0 2
21678: PPUSH
21679: LD_VAR 0 3
21683: PPUSH
21684: CALL_OW 235
// end ;
21688: GO 21611
21690: POP
21691: POP
// end ;
21692: LD_VAR 0 1
21696: RET
// export function hHackFog ; begin
21697: LD_INT 0
21699: PPUSH
// FogOff ( true ) ;
21700: LD_INT 1
21702: PPUSH
21703: CALL_OW 344
// end ;
21707: LD_VAR 0 1
21711: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21712: LD_INT 0
21714: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21715: LD_VAR 0 1
21719: PPUSH
21720: LD_VAR 0 2
21724: PPUSH
21725: LD_VAR 0 3
21729: PPUSH
21730: LD_INT 1
21732: PPUSH
21733: LD_INT 1
21735: PPUSH
21736: CALL_OW 483
// CenterOnXY ( x , y ) ;
21740: LD_VAR 0 2
21744: PPUSH
21745: LD_VAR 0 3
21749: PPUSH
21750: CALL_OW 84
// end ;
21754: LD_VAR 0 4
21758: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21759: LD_INT 0
21761: PPUSH
21762: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21763: LD_VAR 0 1
21767: NOT
21768: PUSH
21769: LD_VAR 0 2
21773: PPUSH
21774: LD_VAR 0 3
21778: PPUSH
21779: CALL_OW 488
21783: NOT
21784: OR
21785: PUSH
21786: LD_VAR 0 1
21790: PPUSH
21791: CALL_OW 266
21795: PUSH
21796: LD_INT 3
21798: NONEQUAL
21799: PUSH
21800: LD_VAR 0 1
21804: PPUSH
21805: CALL_OW 247
21809: PUSH
21810: LD_INT 1
21812: EQUAL
21813: NOT
21814: AND
21815: OR
21816: IFFALSE 21820
// exit ;
21818: GO 21969
// if GetType ( factory ) = unit_human then
21820: LD_VAR 0 1
21824: PPUSH
21825: CALL_OW 247
21829: PUSH
21830: LD_INT 1
21832: EQUAL
21833: IFFALSE 21850
// factory := IsInUnit ( factory ) ;
21835: LD_ADDR_VAR 0 1
21839: PUSH
21840: LD_VAR 0 1
21844: PPUSH
21845: CALL_OW 310
21849: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21850: LD_VAR 0 1
21854: PPUSH
21855: CALL_OW 266
21859: PUSH
21860: LD_INT 3
21862: NONEQUAL
21863: IFFALSE 21867
// exit ;
21865: GO 21969
// if HexInfo ( x , y ) = factory then
21867: LD_VAR 0 2
21871: PPUSH
21872: LD_VAR 0 3
21876: PPUSH
21877: CALL_OW 428
21881: PUSH
21882: LD_VAR 0 1
21886: EQUAL
21887: IFFALSE 21914
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21889: LD_ADDR_EXP 83
21893: PUSH
21894: LD_EXP 83
21898: PPUSH
21899: LD_VAR 0 1
21903: PPUSH
21904: LD_INT 0
21906: PPUSH
21907: CALL_OW 1
21911: ST_TO_ADDR
21912: GO 21965
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21914: LD_ADDR_EXP 83
21918: PUSH
21919: LD_EXP 83
21923: PPUSH
21924: LD_VAR 0 1
21928: PPUSH
21929: LD_VAR 0 1
21933: PPUSH
21934: CALL_OW 255
21938: PUSH
21939: LD_VAR 0 1
21943: PUSH
21944: LD_VAR 0 2
21948: PUSH
21949: LD_VAR 0 3
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: PPUSH
21960: CALL_OW 1
21964: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21965: CALL 21974 0 0
// end ;
21969: LD_VAR 0 4
21973: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21974: LD_INT 0
21976: PPUSH
21977: PPUSH
21978: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21979: LD_STRING resetFactoryWaypoint();
21981: PPUSH
21982: CALL_OW 559
// if factoryWaypoints then
21986: LD_EXP 83
21990: IFFALSE 22116
// begin list := PrepareArray ( factoryWaypoints ) ;
21992: LD_ADDR_VAR 0 3
21996: PUSH
21997: LD_EXP 83
22001: PPUSH
22002: CALL 68585 0 1
22006: ST_TO_ADDR
// for i := 1 to list do
22007: LD_ADDR_VAR 0 2
22011: PUSH
22012: DOUBLE
22013: LD_INT 1
22015: DEC
22016: ST_TO_ADDR
22017: LD_VAR 0 3
22021: PUSH
22022: FOR_TO
22023: IFFALSE 22114
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22025: LD_STRING setFactoryWaypointXY(
22027: PUSH
22028: LD_VAR 0 3
22032: PUSH
22033: LD_VAR 0 2
22037: ARRAY
22038: PUSH
22039: LD_INT 1
22041: ARRAY
22042: STR
22043: PUSH
22044: LD_STRING ,
22046: STR
22047: PUSH
22048: LD_VAR 0 3
22052: PUSH
22053: LD_VAR 0 2
22057: ARRAY
22058: PUSH
22059: LD_INT 2
22061: ARRAY
22062: STR
22063: PUSH
22064: LD_STRING ,
22066: STR
22067: PUSH
22068: LD_VAR 0 3
22072: PUSH
22073: LD_VAR 0 2
22077: ARRAY
22078: PUSH
22079: LD_INT 3
22081: ARRAY
22082: STR
22083: PUSH
22084: LD_STRING ,
22086: STR
22087: PUSH
22088: LD_VAR 0 3
22092: PUSH
22093: LD_VAR 0 2
22097: ARRAY
22098: PUSH
22099: LD_INT 4
22101: ARRAY
22102: STR
22103: PUSH
22104: LD_STRING )
22106: STR
22107: PPUSH
22108: CALL_OW 559
22112: GO 22022
22114: POP
22115: POP
// end ; end ;
22116: LD_VAR 0 1
22120: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22121: LD_INT 0
22123: PPUSH
// if HexInfo ( x , y ) = warehouse then
22124: LD_VAR 0 2
22128: PPUSH
22129: LD_VAR 0 3
22133: PPUSH
22134: CALL_OW 428
22138: PUSH
22139: LD_VAR 0 1
22143: EQUAL
22144: IFFALSE 22171
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22146: LD_ADDR_EXP 84
22150: PUSH
22151: LD_EXP 84
22155: PPUSH
22156: LD_VAR 0 1
22160: PPUSH
22161: LD_INT 0
22163: PPUSH
22164: CALL_OW 1
22168: ST_TO_ADDR
22169: GO 22222
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22171: LD_ADDR_EXP 84
22175: PUSH
22176: LD_EXP 84
22180: PPUSH
22181: LD_VAR 0 1
22185: PPUSH
22186: LD_VAR 0 1
22190: PPUSH
22191: CALL_OW 255
22195: PUSH
22196: LD_VAR 0 1
22200: PUSH
22201: LD_VAR 0 2
22205: PUSH
22206: LD_VAR 0 3
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: PPUSH
22217: CALL_OW 1
22221: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22222: CALL 22231 0 0
// end ;
22226: LD_VAR 0 4
22230: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22231: LD_INT 0
22233: PPUSH
22234: PPUSH
22235: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22236: LD_STRING resetWarehouseGatheringPoints();
22238: PPUSH
22239: CALL_OW 559
// if warehouseGatheringPoints then
22243: LD_EXP 84
22247: IFFALSE 22373
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22249: LD_ADDR_VAR 0 3
22253: PUSH
22254: LD_EXP 84
22258: PPUSH
22259: CALL 68585 0 1
22263: ST_TO_ADDR
// for i := 1 to list do
22264: LD_ADDR_VAR 0 2
22268: PUSH
22269: DOUBLE
22270: LD_INT 1
22272: DEC
22273: ST_TO_ADDR
22274: LD_VAR 0 3
22278: PUSH
22279: FOR_TO
22280: IFFALSE 22371
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22282: LD_STRING setWarehouseGatheringPointXY(
22284: PUSH
22285: LD_VAR 0 3
22289: PUSH
22290: LD_VAR 0 2
22294: ARRAY
22295: PUSH
22296: LD_INT 1
22298: ARRAY
22299: STR
22300: PUSH
22301: LD_STRING ,
22303: STR
22304: PUSH
22305: LD_VAR 0 3
22309: PUSH
22310: LD_VAR 0 2
22314: ARRAY
22315: PUSH
22316: LD_INT 2
22318: ARRAY
22319: STR
22320: PUSH
22321: LD_STRING ,
22323: STR
22324: PUSH
22325: LD_VAR 0 3
22329: PUSH
22330: LD_VAR 0 2
22334: ARRAY
22335: PUSH
22336: LD_INT 3
22338: ARRAY
22339: STR
22340: PUSH
22341: LD_STRING ,
22343: STR
22344: PUSH
22345: LD_VAR 0 3
22349: PUSH
22350: LD_VAR 0 2
22354: ARRAY
22355: PUSH
22356: LD_INT 4
22358: ARRAY
22359: STR
22360: PUSH
22361: LD_STRING )
22363: STR
22364: PPUSH
22365: CALL_OW 559
22369: GO 22279
22371: POP
22372: POP
// end ; end ;
22373: LD_VAR 0 1
22377: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22378: LD_EXP 84
22382: IFFALSE 23067
22384: GO 22386
22386: DISABLE
22387: LD_INT 0
22389: PPUSH
22390: PPUSH
22391: PPUSH
22392: PPUSH
22393: PPUSH
22394: PPUSH
22395: PPUSH
22396: PPUSH
22397: PPUSH
// begin enable ;
22398: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22399: LD_ADDR_VAR 0 3
22403: PUSH
22404: LD_EXP 84
22408: PPUSH
22409: CALL 68585 0 1
22413: ST_TO_ADDR
// if not list then
22414: LD_VAR 0 3
22418: NOT
22419: IFFALSE 22423
// exit ;
22421: GO 23067
// for i := 1 to list do
22423: LD_ADDR_VAR 0 1
22427: PUSH
22428: DOUBLE
22429: LD_INT 1
22431: DEC
22432: ST_TO_ADDR
22433: LD_VAR 0 3
22437: PUSH
22438: FOR_TO
22439: IFFALSE 23065
// begin depot := list [ i ] [ 2 ] ;
22441: LD_ADDR_VAR 0 8
22445: PUSH
22446: LD_VAR 0 3
22450: PUSH
22451: LD_VAR 0 1
22455: ARRAY
22456: PUSH
22457: LD_INT 2
22459: ARRAY
22460: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22461: LD_ADDR_VAR 0 5
22465: PUSH
22466: LD_VAR 0 3
22470: PUSH
22471: LD_VAR 0 1
22475: ARRAY
22476: PUSH
22477: LD_INT 1
22479: ARRAY
22480: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22481: LD_VAR 0 8
22485: PPUSH
22486: CALL_OW 301
22490: PUSH
22491: LD_VAR 0 5
22495: PUSH
22496: LD_VAR 0 8
22500: PPUSH
22501: CALL_OW 255
22505: NONEQUAL
22506: OR
22507: IFFALSE 22536
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22509: LD_ADDR_EXP 84
22513: PUSH
22514: LD_EXP 84
22518: PPUSH
22519: LD_VAR 0 8
22523: PPUSH
22524: LD_INT 0
22526: PPUSH
22527: CALL_OW 1
22531: ST_TO_ADDR
// exit ;
22532: POP
22533: POP
22534: GO 23067
// end ; x := list [ i ] [ 3 ] ;
22536: LD_ADDR_VAR 0 6
22540: PUSH
22541: LD_VAR 0 3
22545: PUSH
22546: LD_VAR 0 1
22550: ARRAY
22551: PUSH
22552: LD_INT 3
22554: ARRAY
22555: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22556: LD_ADDR_VAR 0 7
22560: PUSH
22561: LD_VAR 0 3
22565: PUSH
22566: LD_VAR 0 1
22570: ARRAY
22571: PUSH
22572: LD_INT 4
22574: ARRAY
22575: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22576: LD_ADDR_VAR 0 9
22580: PUSH
22581: LD_VAR 0 6
22585: PPUSH
22586: LD_VAR 0 7
22590: PPUSH
22591: LD_INT 16
22593: PPUSH
22594: CALL 67173 0 3
22598: ST_TO_ADDR
// if not cratesNearbyPoint then
22599: LD_VAR 0 9
22603: NOT
22604: IFFALSE 22610
// exit ;
22606: POP
22607: POP
22608: GO 23067
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22610: LD_ADDR_VAR 0 4
22614: PUSH
22615: LD_INT 22
22617: PUSH
22618: LD_VAR 0 5
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 3
22629: PUSH
22630: LD_INT 60
22632: PUSH
22633: EMPTY
22634: LIST
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 91
22642: PUSH
22643: LD_VAR 0 8
22647: PUSH
22648: LD_INT 6
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 2
22658: PUSH
22659: LD_INT 25
22661: PUSH
22662: LD_INT 2
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 25
22671: PUSH
22672: LD_INT 16
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: PPUSH
22690: CALL_OW 69
22694: PUSH
22695: LD_VAR 0 8
22699: PPUSH
22700: CALL_OW 313
22704: PPUSH
22705: LD_INT 3
22707: PUSH
22708: LD_INT 60
22710: PUSH
22711: EMPTY
22712: LIST
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 2
22720: PUSH
22721: LD_INT 25
22723: PUSH
22724: LD_INT 2
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 25
22733: PUSH
22734: LD_INT 16
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: LIST
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PPUSH
22750: CALL_OW 72
22754: UNION
22755: ST_TO_ADDR
// if tmp then
22756: LD_VAR 0 4
22760: IFFALSE 22840
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22762: LD_ADDR_VAR 0 4
22766: PUSH
22767: LD_VAR 0 4
22771: PPUSH
22772: LD_INT 3
22774: PPUSH
22775: CALL 65142 0 2
22779: ST_TO_ADDR
// for j in tmp do
22780: LD_ADDR_VAR 0 2
22784: PUSH
22785: LD_VAR 0 4
22789: PUSH
22790: FOR_IN
22791: IFFALSE 22834
// begin if IsInUnit ( j ) then
22793: LD_VAR 0 2
22797: PPUSH
22798: CALL_OW 310
22802: IFFALSE 22813
// ComExit ( j ) ;
22804: LD_VAR 0 2
22808: PPUSH
22809: CALL 65225 0 1
// AddComCollect ( j , x , y ) ;
22813: LD_VAR 0 2
22817: PPUSH
22818: LD_VAR 0 6
22822: PPUSH
22823: LD_VAR 0 7
22827: PPUSH
22828: CALL_OW 177
// end ;
22832: GO 22790
22834: POP
22835: POP
// exit ;
22836: POP
22837: POP
22838: GO 23067
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22840: LD_ADDR_VAR 0 4
22844: PUSH
22845: LD_INT 22
22847: PUSH
22848: LD_VAR 0 5
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 91
22859: PUSH
22860: LD_VAR 0 8
22864: PUSH
22865: LD_INT 8
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: LD_INT 34
22878: PUSH
22879: LD_INT 12
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 34
22888: PUSH
22889: LD_INT 51
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 34
22898: PUSH
22899: LD_INT 32
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 34
22908: PUSH
22909: LD_INT 89
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: LIST
22927: PPUSH
22928: CALL_OW 69
22932: ST_TO_ADDR
// if tmp then
22933: LD_VAR 0 4
22937: IFFALSE 23063
// begin for j in tmp do
22939: LD_ADDR_VAR 0 2
22943: PUSH
22944: LD_VAR 0 4
22948: PUSH
22949: FOR_IN
22950: IFFALSE 23061
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22952: LD_VAR 0 2
22956: PPUSH
22957: CALL_OW 262
22961: PUSH
22962: LD_INT 3
22964: EQUAL
22965: PUSH
22966: LD_VAR 0 2
22970: PPUSH
22971: CALL_OW 261
22975: PUSH
22976: LD_INT 20
22978: GREATER
22979: OR
22980: PUSH
22981: LD_VAR 0 2
22985: PPUSH
22986: CALL_OW 314
22990: NOT
22991: AND
22992: PUSH
22993: LD_VAR 0 2
22997: PPUSH
22998: CALL_OW 263
23002: PUSH
23003: LD_INT 1
23005: NONEQUAL
23006: PUSH
23007: LD_VAR 0 2
23011: PPUSH
23012: CALL_OW 311
23016: OR
23017: AND
23018: IFFALSE 23059
// begin ComCollect ( j , x , y ) ;
23020: LD_VAR 0 2
23024: PPUSH
23025: LD_VAR 0 6
23029: PPUSH
23030: LD_VAR 0 7
23034: PPUSH
23035: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23039: LD_VAR 0 2
23043: PPUSH
23044: LD_VAR 0 8
23048: PPUSH
23049: CALL_OW 172
// exit ;
23053: POP
23054: POP
23055: POP
23056: POP
23057: GO 23067
// end ;
23059: GO 22949
23061: POP
23062: POP
// end ; end ;
23063: GO 22438
23065: POP
23066: POP
// end ; end_of_file
23067: PPOPN 9
23069: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23070: LD_INT 0
23072: PPUSH
23073: PPUSH
23074: PPUSH
23075: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 264
23085: PUSH
23086: LD_INT 91
23088: EQUAL
23089: IFFALSE 23161
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23091: LD_INT 68
23093: PPUSH
23094: LD_VAR 0 1
23098: PPUSH
23099: CALL_OW 255
23103: PPUSH
23104: CALL_OW 321
23108: PUSH
23109: LD_INT 2
23111: EQUAL
23112: IFFALSE 23124
// eff := 70 else
23114: LD_ADDR_VAR 0 4
23118: PUSH
23119: LD_INT 70
23121: ST_TO_ADDR
23122: GO 23132
// eff := 30 ;
23124: LD_ADDR_VAR 0 4
23128: PUSH
23129: LD_INT 30
23131: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23132: LD_VAR 0 1
23136: PPUSH
23137: CALL_OW 250
23141: PPUSH
23142: LD_VAR 0 1
23146: PPUSH
23147: CALL_OW 251
23151: PPUSH
23152: LD_VAR 0 4
23156: PPUSH
23157: CALL_OW 495
// end ; end ;
23161: LD_VAR 0 2
23165: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23166: LD_INT 0
23168: PPUSH
// end ;
23169: LD_VAR 0 4
23173: RET
// export function SOS_Command ( cmd ) ; begin
23174: LD_INT 0
23176: PPUSH
// end ;
23177: LD_VAR 0 2
23181: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23182: LD_INT 0
23184: PPUSH
// end ;
23185: LD_VAR 0 6
23189: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
23190: LD_INT 0
23192: PPUSH
23193: PPUSH
// if not vehicle or not factory then
23194: LD_VAR 0 1
23198: NOT
23199: PUSH
23200: LD_VAR 0 2
23204: NOT
23205: OR
23206: IFFALSE 23210
// exit ;
23208: GO 23441
// if factoryWaypoints >= factory then
23210: LD_EXP 83
23214: PUSH
23215: LD_VAR 0 2
23219: GREATEREQUAL
23220: IFFALSE 23441
// if factoryWaypoints [ factory ] then
23222: LD_EXP 83
23226: PUSH
23227: LD_VAR 0 2
23231: ARRAY
23232: IFFALSE 23441
// begin if GetControl ( vehicle ) = control_manual then
23234: LD_VAR 0 1
23238: PPUSH
23239: CALL_OW 263
23243: PUSH
23244: LD_INT 1
23246: EQUAL
23247: IFFALSE 23328
// begin driver := IsDrivenBy ( vehicle ) ;
23249: LD_ADDR_VAR 0 4
23253: PUSH
23254: LD_VAR 0 1
23258: PPUSH
23259: CALL_OW 311
23263: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23264: LD_VAR 0 4
23268: PPUSH
23269: LD_EXP 83
23273: PUSH
23274: LD_VAR 0 2
23278: ARRAY
23279: PUSH
23280: LD_INT 3
23282: ARRAY
23283: PPUSH
23284: LD_EXP 83
23288: PUSH
23289: LD_VAR 0 2
23293: ARRAY
23294: PUSH
23295: LD_INT 4
23297: ARRAY
23298: PPUSH
23299: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23303: LD_VAR 0 4
23307: PPUSH
23308: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23312: LD_VAR 0 4
23316: PPUSH
23317: LD_VAR 0 2
23321: PPUSH
23322: CALL_OW 180
// end else
23326: GO 23441
// if GetControl ( vehicle ) = control_remote then
23328: LD_VAR 0 1
23332: PPUSH
23333: CALL_OW 263
23337: PUSH
23338: LD_INT 2
23340: EQUAL
23341: IFFALSE 23402
// begin wait ( 0 0$2 ) ;
23343: LD_INT 70
23345: PPUSH
23346: CALL_OW 67
// if Connect ( vehicle ) then
23350: LD_VAR 0 1
23354: PPUSH
23355: CALL 35465 0 1
23359: IFFALSE 23400
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23361: LD_VAR 0 1
23365: PPUSH
23366: LD_EXP 83
23370: PUSH
23371: LD_VAR 0 2
23375: ARRAY
23376: PUSH
23377: LD_INT 3
23379: ARRAY
23380: PPUSH
23381: LD_EXP 83
23385: PUSH
23386: LD_VAR 0 2
23390: ARRAY
23391: PUSH
23392: LD_INT 4
23394: ARRAY
23395: PPUSH
23396: CALL_OW 171
// end else
23400: GO 23441
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23402: LD_VAR 0 1
23406: PPUSH
23407: LD_EXP 83
23411: PUSH
23412: LD_VAR 0 2
23416: ARRAY
23417: PUSH
23418: LD_INT 3
23420: ARRAY
23421: PPUSH
23422: LD_EXP 83
23426: PUSH
23427: LD_VAR 0 2
23431: ARRAY
23432: PUSH
23433: LD_INT 4
23435: ARRAY
23436: PPUSH
23437: CALL_OW 171
// end ; end ;
23441: LD_VAR 0 3
23445: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23446: LD_INT 0
23448: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23449: LD_VAR 0 1
23453: PUSH
23454: LD_INT 250
23456: EQUAL
23457: PUSH
23458: LD_VAR 0 2
23462: PPUSH
23463: CALL_OW 264
23467: PUSH
23468: LD_INT 81
23470: EQUAL
23471: AND
23472: IFFALSE 23493
// MinerPlaceMine ( unit , x , y ) ;
23474: LD_VAR 0 2
23478: PPUSH
23479: LD_VAR 0 4
23483: PPUSH
23484: LD_VAR 0 5
23488: PPUSH
23489: CALL 25878 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23493: LD_VAR 0 1
23497: PUSH
23498: LD_INT 251
23500: EQUAL
23501: PUSH
23502: LD_VAR 0 2
23506: PPUSH
23507: CALL_OW 264
23511: PUSH
23512: LD_INT 81
23514: EQUAL
23515: AND
23516: IFFALSE 23537
// MinerDetonateMine ( unit , x , y ) ;
23518: LD_VAR 0 2
23522: PPUSH
23523: LD_VAR 0 4
23527: PPUSH
23528: LD_VAR 0 5
23532: PPUSH
23533: CALL 26153 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23537: LD_VAR 0 1
23541: PUSH
23542: LD_INT 252
23544: EQUAL
23545: PUSH
23546: LD_VAR 0 2
23550: PPUSH
23551: CALL_OW 264
23555: PUSH
23556: LD_INT 81
23558: EQUAL
23559: AND
23560: IFFALSE 23581
// MinerCreateMinefield ( unit , x , y ) ;
23562: LD_VAR 0 2
23566: PPUSH
23567: LD_VAR 0 4
23571: PPUSH
23572: LD_VAR 0 5
23576: PPUSH
23577: CALL 26570 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23581: LD_VAR 0 1
23585: PUSH
23586: LD_INT 253
23588: EQUAL
23589: PUSH
23590: LD_VAR 0 2
23594: PPUSH
23595: CALL_OW 257
23599: PUSH
23600: LD_INT 5
23602: EQUAL
23603: AND
23604: IFFALSE 23625
// ComBinocular ( unit , x , y ) ;
23606: LD_VAR 0 2
23610: PPUSH
23611: LD_VAR 0 4
23615: PPUSH
23616: LD_VAR 0 5
23620: PPUSH
23621: CALL 26939 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23625: LD_VAR 0 1
23629: PUSH
23630: LD_INT 254
23632: EQUAL
23633: PUSH
23634: LD_VAR 0 2
23638: PPUSH
23639: CALL_OW 264
23643: PUSH
23644: LD_INT 99
23646: EQUAL
23647: AND
23648: PUSH
23649: LD_VAR 0 3
23653: PPUSH
23654: CALL_OW 263
23658: PUSH
23659: LD_INT 3
23661: EQUAL
23662: AND
23663: IFFALSE 23679
// HackDestroyVehicle ( unit , selectedUnit ) ;
23665: LD_VAR 0 2
23669: PPUSH
23670: LD_VAR 0 3
23674: PPUSH
23675: CALL 25242 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23679: LD_VAR 0 1
23683: PUSH
23684: LD_INT 255
23686: EQUAL
23687: PUSH
23688: LD_VAR 0 2
23692: PPUSH
23693: CALL_OW 264
23697: PUSH
23698: LD_INT 14
23700: PUSH
23701: LD_INT 53
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: IN
23708: AND
23709: PUSH
23710: LD_VAR 0 4
23714: PPUSH
23715: LD_VAR 0 5
23719: PPUSH
23720: CALL_OW 488
23724: AND
23725: IFFALSE 23749
// CutTreeXYR ( unit , x , y , 12 ) ;
23727: LD_VAR 0 2
23731: PPUSH
23732: LD_VAR 0 4
23736: PPUSH
23737: LD_VAR 0 5
23741: PPUSH
23742: LD_INT 12
23744: PPUSH
23745: CALL 23812 0 4
// if cmd = 256 then
23749: LD_VAR 0 1
23753: PUSH
23754: LD_INT 256
23756: EQUAL
23757: IFFALSE 23778
// SetFactoryWaypoint ( unit , x , y ) ;
23759: LD_VAR 0 2
23763: PPUSH
23764: LD_VAR 0 4
23768: PPUSH
23769: LD_VAR 0 5
23773: PPUSH
23774: CALL 21759 0 3
// if cmd = 257 then
23778: LD_VAR 0 1
23782: PUSH
23783: LD_INT 257
23785: EQUAL
23786: IFFALSE 23807
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23788: LD_VAR 0 2
23792: PPUSH
23793: LD_VAR 0 4
23797: PPUSH
23798: LD_VAR 0 5
23802: PPUSH
23803: CALL 22121 0 3
// end ;
23807: LD_VAR 0 6
23811: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23812: LD_INT 0
23814: PPUSH
23815: PPUSH
23816: PPUSH
23817: PPUSH
23818: PPUSH
23819: PPUSH
23820: PPUSH
23821: PPUSH
23822: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23823: LD_VAR 0 1
23827: NOT
23828: PUSH
23829: LD_VAR 0 2
23833: PPUSH
23834: LD_VAR 0 3
23838: PPUSH
23839: CALL_OW 488
23843: NOT
23844: OR
23845: PUSH
23846: LD_VAR 0 4
23850: NOT
23851: OR
23852: IFFALSE 23856
// exit ;
23854: GO 24196
// list := [ ] ;
23856: LD_ADDR_VAR 0 13
23860: PUSH
23861: EMPTY
23862: ST_TO_ADDR
// if x - r < 0 then
23863: LD_VAR 0 2
23867: PUSH
23868: LD_VAR 0 4
23872: MINUS
23873: PUSH
23874: LD_INT 0
23876: LESS
23877: IFFALSE 23889
// min_x := 0 else
23879: LD_ADDR_VAR 0 7
23883: PUSH
23884: LD_INT 0
23886: ST_TO_ADDR
23887: GO 23905
// min_x := x - r ;
23889: LD_ADDR_VAR 0 7
23893: PUSH
23894: LD_VAR 0 2
23898: PUSH
23899: LD_VAR 0 4
23903: MINUS
23904: ST_TO_ADDR
// if y - r < 0 then
23905: LD_VAR 0 3
23909: PUSH
23910: LD_VAR 0 4
23914: MINUS
23915: PUSH
23916: LD_INT 0
23918: LESS
23919: IFFALSE 23931
// min_y := 0 else
23921: LD_ADDR_VAR 0 8
23925: PUSH
23926: LD_INT 0
23928: ST_TO_ADDR
23929: GO 23947
// min_y := y - r ;
23931: LD_ADDR_VAR 0 8
23935: PUSH
23936: LD_VAR 0 3
23940: PUSH
23941: LD_VAR 0 4
23945: MINUS
23946: ST_TO_ADDR
// max_x := x + r ;
23947: LD_ADDR_VAR 0 9
23951: PUSH
23952: LD_VAR 0 2
23956: PUSH
23957: LD_VAR 0 4
23961: PLUS
23962: ST_TO_ADDR
// max_y := y + r ;
23963: LD_ADDR_VAR 0 10
23967: PUSH
23968: LD_VAR 0 3
23972: PUSH
23973: LD_VAR 0 4
23977: PLUS
23978: ST_TO_ADDR
// for _x = min_x to max_x do
23979: LD_ADDR_VAR 0 11
23983: PUSH
23984: DOUBLE
23985: LD_VAR 0 7
23989: DEC
23990: ST_TO_ADDR
23991: LD_VAR 0 9
23995: PUSH
23996: FOR_TO
23997: IFFALSE 24114
// for _y = min_y to max_y do
23999: LD_ADDR_VAR 0 12
24003: PUSH
24004: DOUBLE
24005: LD_VAR 0 8
24009: DEC
24010: ST_TO_ADDR
24011: LD_VAR 0 10
24015: PUSH
24016: FOR_TO
24017: IFFALSE 24110
// begin if not ValidHex ( _x , _y ) then
24019: LD_VAR 0 11
24023: PPUSH
24024: LD_VAR 0 12
24028: PPUSH
24029: CALL_OW 488
24033: NOT
24034: IFFALSE 24038
// continue ;
24036: GO 24016
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24038: LD_VAR 0 11
24042: PPUSH
24043: LD_VAR 0 12
24047: PPUSH
24048: CALL_OW 351
24052: PUSH
24053: LD_VAR 0 11
24057: PPUSH
24058: LD_VAR 0 12
24062: PPUSH
24063: CALL_OW 554
24067: AND
24068: IFFALSE 24108
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24070: LD_ADDR_VAR 0 13
24074: PUSH
24075: LD_VAR 0 13
24079: PPUSH
24080: LD_VAR 0 13
24084: PUSH
24085: LD_INT 1
24087: PLUS
24088: PPUSH
24089: LD_VAR 0 11
24093: PUSH
24094: LD_VAR 0 12
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PPUSH
24103: CALL_OW 2
24107: ST_TO_ADDR
// end ;
24108: GO 24016
24110: POP
24111: POP
24112: GO 23996
24114: POP
24115: POP
// if not list then
24116: LD_VAR 0 13
24120: NOT
24121: IFFALSE 24125
// exit ;
24123: GO 24196
// for i in list do
24125: LD_ADDR_VAR 0 6
24129: PUSH
24130: LD_VAR 0 13
24134: PUSH
24135: FOR_IN
24136: IFFALSE 24194
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24138: LD_VAR 0 1
24142: PPUSH
24143: LD_STRING M
24145: PUSH
24146: LD_VAR 0 6
24150: PUSH
24151: LD_INT 1
24153: ARRAY
24154: PUSH
24155: LD_VAR 0 6
24159: PUSH
24160: LD_INT 2
24162: ARRAY
24163: PUSH
24164: LD_INT 0
24166: PUSH
24167: LD_INT 0
24169: PUSH
24170: LD_INT 0
24172: PUSH
24173: LD_INT 0
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: PUSH
24185: EMPTY
24186: LIST
24187: PPUSH
24188: CALL_OW 447
24192: GO 24135
24194: POP
24195: POP
// end ;
24196: LD_VAR 0 5
24200: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24201: LD_EXP 86
24205: NOT
24206: IFFALSE 24256
24208: GO 24210
24210: DISABLE
// begin initHack := true ;
24211: LD_ADDR_EXP 86
24215: PUSH
24216: LD_INT 1
24218: ST_TO_ADDR
// hackTanks := [ ] ;
24219: LD_ADDR_EXP 87
24223: PUSH
24224: EMPTY
24225: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24226: LD_ADDR_EXP 88
24230: PUSH
24231: EMPTY
24232: ST_TO_ADDR
// hackLimit := 3 ;
24233: LD_ADDR_EXP 89
24237: PUSH
24238: LD_INT 3
24240: ST_TO_ADDR
// hackDist := 12 ;
24241: LD_ADDR_EXP 90
24245: PUSH
24246: LD_INT 12
24248: ST_TO_ADDR
// hackCounter := [ ] ;
24249: LD_ADDR_EXP 91
24253: PUSH
24254: EMPTY
24255: ST_TO_ADDR
// end ;
24256: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24257: LD_EXP 86
24261: PUSH
24262: LD_INT 34
24264: PUSH
24265: LD_INT 99
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PPUSH
24272: CALL_OW 69
24276: AND
24277: IFFALSE 24530
24279: GO 24281
24281: DISABLE
24282: LD_INT 0
24284: PPUSH
24285: PPUSH
// begin enable ;
24286: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24287: LD_ADDR_VAR 0 1
24291: PUSH
24292: LD_INT 34
24294: PUSH
24295: LD_INT 99
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PPUSH
24302: CALL_OW 69
24306: PUSH
24307: FOR_IN
24308: IFFALSE 24528
// begin if not i in hackTanks then
24310: LD_VAR 0 1
24314: PUSH
24315: LD_EXP 87
24319: IN
24320: NOT
24321: IFFALSE 24404
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24323: LD_ADDR_EXP 87
24327: PUSH
24328: LD_EXP 87
24332: PPUSH
24333: LD_EXP 87
24337: PUSH
24338: LD_INT 1
24340: PLUS
24341: PPUSH
24342: LD_VAR 0 1
24346: PPUSH
24347: CALL_OW 1
24351: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24352: LD_ADDR_EXP 88
24356: PUSH
24357: LD_EXP 88
24361: PPUSH
24362: LD_EXP 88
24366: PUSH
24367: LD_INT 1
24369: PLUS
24370: PPUSH
24371: EMPTY
24372: PPUSH
24373: CALL_OW 1
24377: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24378: LD_ADDR_EXP 91
24382: PUSH
24383: LD_EXP 91
24387: PPUSH
24388: LD_EXP 91
24392: PUSH
24393: LD_INT 1
24395: PLUS
24396: PPUSH
24397: EMPTY
24398: PPUSH
24399: CALL_OW 1
24403: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24404: LD_VAR 0 1
24408: PPUSH
24409: CALL_OW 302
24413: NOT
24414: IFFALSE 24427
// begin HackUnlinkAll ( i ) ;
24416: LD_VAR 0 1
24420: PPUSH
24421: CALL 24533 0 1
// continue ;
24425: GO 24307
// end ; HackCheckCapturedStatus ( i ) ;
24427: LD_VAR 0 1
24431: PPUSH
24432: CALL 24976 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24436: LD_ADDR_VAR 0 2
24440: PUSH
24441: LD_INT 81
24443: PUSH
24444: LD_VAR 0 1
24448: PPUSH
24449: CALL_OW 255
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 33
24460: PUSH
24461: LD_INT 3
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 91
24470: PUSH
24471: LD_VAR 0 1
24475: PUSH
24476: LD_EXP 90
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 50
24488: PUSH
24489: EMPTY
24490: LIST
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: PPUSH
24498: CALL_OW 69
24502: ST_TO_ADDR
// if not tmp then
24503: LD_VAR 0 2
24507: NOT
24508: IFFALSE 24512
// continue ;
24510: GO 24307
// HackLink ( i , tmp ) ;
24512: LD_VAR 0 1
24516: PPUSH
24517: LD_VAR 0 2
24521: PPUSH
24522: CALL 24669 0 2
// end ;
24526: GO 24307
24528: POP
24529: POP
// end ;
24530: PPOPN 2
24532: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24533: LD_INT 0
24535: PPUSH
24536: PPUSH
24537: PPUSH
// if not hack in hackTanks then
24538: LD_VAR 0 1
24542: PUSH
24543: LD_EXP 87
24547: IN
24548: NOT
24549: IFFALSE 24553
// exit ;
24551: GO 24664
// index := GetElementIndex ( hackTanks , hack ) ;
24553: LD_ADDR_VAR 0 4
24557: PUSH
24558: LD_EXP 87
24562: PPUSH
24563: LD_VAR 0 1
24567: PPUSH
24568: CALL 32281 0 2
24572: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24573: LD_EXP 88
24577: PUSH
24578: LD_VAR 0 4
24582: ARRAY
24583: IFFALSE 24664
// begin for i in hackTanksCaptured [ index ] do
24585: LD_ADDR_VAR 0 3
24589: PUSH
24590: LD_EXP 88
24594: PUSH
24595: LD_VAR 0 4
24599: ARRAY
24600: PUSH
24601: FOR_IN
24602: IFFALSE 24628
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24604: LD_VAR 0 3
24608: PUSH
24609: LD_INT 1
24611: ARRAY
24612: PPUSH
24613: LD_VAR 0 3
24617: PUSH
24618: LD_INT 2
24620: ARRAY
24621: PPUSH
24622: CALL_OW 235
24626: GO 24601
24628: POP
24629: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24630: LD_ADDR_EXP 88
24634: PUSH
24635: LD_EXP 88
24639: PPUSH
24640: LD_VAR 0 4
24644: PPUSH
24645: EMPTY
24646: PPUSH
24647: CALL_OW 1
24651: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24652: LD_VAR 0 1
24656: PPUSH
24657: LD_INT 0
24659: PPUSH
24660: CALL_OW 505
// end ; end ;
24664: LD_VAR 0 2
24668: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24669: LD_INT 0
24671: PPUSH
24672: PPUSH
24673: PPUSH
// if not hack in hackTanks or not vehicles then
24674: LD_VAR 0 1
24678: PUSH
24679: LD_EXP 87
24683: IN
24684: NOT
24685: PUSH
24686: LD_VAR 0 2
24690: NOT
24691: OR
24692: IFFALSE 24696
// exit ;
24694: GO 24971
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24696: LD_ADDR_VAR 0 2
24700: PUSH
24701: LD_VAR 0 1
24705: PPUSH
24706: LD_VAR 0 2
24710: PPUSH
24711: LD_INT 1
24713: PPUSH
24714: LD_INT 1
24716: PPUSH
24717: CALL 32931 0 4
24721: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24722: LD_ADDR_VAR 0 5
24726: PUSH
24727: LD_EXP 87
24731: PPUSH
24732: LD_VAR 0 1
24736: PPUSH
24737: CALL 32281 0 2
24741: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24742: LD_EXP 88
24746: PUSH
24747: LD_VAR 0 5
24751: ARRAY
24752: PUSH
24753: LD_EXP 89
24757: LESS
24758: IFFALSE 24947
// begin for i := 1 to vehicles do
24760: LD_ADDR_VAR 0 4
24764: PUSH
24765: DOUBLE
24766: LD_INT 1
24768: DEC
24769: ST_TO_ADDR
24770: LD_VAR 0 2
24774: PUSH
24775: FOR_TO
24776: IFFALSE 24945
// begin if hackTanksCaptured [ index ] = hackLimit then
24778: LD_EXP 88
24782: PUSH
24783: LD_VAR 0 5
24787: ARRAY
24788: PUSH
24789: LD_EXP 89
24793: EQUAL
24794: IFFALSE 24798
// break ;
24796: GO 24945
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24798: LD_ADDR_EXP 91
24802: PUSH
24803: LD_EXP 91
24807: PPUSH
24808: LD_VAR 0 5
24812: PPUSH
24813: LD_EXP 91
24817: PUSH
24818: LD_VAR 0 5
24822: ARRAY
24823: PUSH
24824: LD_INT 1
24826: PLUS
24827: PPUSH
24828: CALL_OW 1
24832: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24833: LD_ADDR_EXP 88
24837: PUSH
24838: LD_EXP 88
24842: PPUSH
24843: LD_VAR 0 5
24847: PUSH
24848: LD_EXP 88
24852: PUSH
24853: LD_VAR 0 5
24857: ARRAY
24858: PUSH
24859: LD_INT 1
24861: PLUS
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PPUSH
24867: LD_VAR 0 2
24871: PUSH
24872: LD_VAR 0 4
24876: ARRAY
24877: PUSH
24878: LD_VAR 0 2
24882: PUSH
24883: LD_VAR 0 4
24887: ARRAY
24888: PPUSH
24889: CALL_OW 255
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PPUSH
24898: CALL 32496 0 3
24902: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24903: LD_VAR 0 2
24907: PUSH
24908: LD_VAR 0 4
24912: ARRAY
24913: PPUSH
24914: LD_VAR 0 1
24918: PPUSH
24919: CALL_OW 255
24923: PPUSH
24924: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24928: LD_VAR 0 2
24932: PUSH
24933: LD_VAR 0 4
24937: ARRAY
24938: PPUSH
24939: CALL_OW 141
// end ;
24943: GO 24775
24945: POP
24946: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24947: LD_VAR 0 1
24951: PPUSH
24952: LD_EXP 88
24956: PUSH
24957: LD_VAR 0 5
24961: ARRAY
24962: PUSH
24963: LD_INT 0
24965: PLUS
24966: PPUSH
24967: CALL_OW 505
// end ;
24971: LD_VAR 0 3
24975: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24976: LD_INT 0
24978: PPUSH
24979: PPUSH
24980: PPUSH
24981: PPUSH
// if not hack in hackTanks then
24982: LD_VAR 0 1
24986: PUSH
24987: LD_EXP 87
24991: IN
24992: NOT
24993: IFFALSE 24997
// exit ;
24995: GO 25237
// index := GetElementIndex ( hackTanks , hack ) ;
24997: LD_ADDR_VAR 0 4
25001: PUSH
25002: LD_EXP 87
25006: PPUSH
25007: LD_VAR 0 1
25011: PPUSH
25012: CALL 32281 0 2
25016: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25017: LD_ADDR_VAR 0 3
25021: PUSH
25022: DOUBLE
25023: LD_EXP 88
25027: PUSH
25028: LD_VAR 0 4
25032: ARRAY
25033: INC
25034: ST_TO_ADDR
25035: LD_INT 1
25037: PUSH
25038: FOR_DOWNTO
25039: IFFALSE 25211
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25041: LD_ADDR_VAR 0 5
25045: PUSH
25046: LD_EXP 88
25050: PUSH
25051: LD_VAR 0 4
25055: ARRAY
25056: PUSH
25057: LD_VAR 0 3
25061: ARRAY
25062: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25063: LD_VAR 0 5
25067: PUSH
25068: LD_INT 1
25070: ARRAY
25071: PPUSH
25072: CALL_OW 302
25076: NOT
25077: PUSH
25078: LD_VAR 0 5
25082: PUSH
25083: LD_INT 1
25085: ARRAY
25086: PPUSH
25087: CALL_OW 255
25091: PUSH
25092: LD_VAR 0 1
25096: PPUSH
25097: CALL_OW 255
25101: NONEQUAL
25102: OR
25103: IFFALSE 25209
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25105: LD_VAR 0 5
25109: PUSH
25110: LD_INT 1
25112: ARRAY
25113: PPUSH
25114: CALL_OW 305
25118: PUSH
25119: LD_VAR 0 5
25123: PUSH
25124: LD_INT 1
25126: ARRAY
25127: PPUSH
25128: CALL_OW 255
25132: PUSH
25133: LD_VAR 0 1
25137: PPUSH
25138: CALL_OW 255
25142: EQUAL
25143: AND
25144: IFFALSE 25168
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25146: LD_VAR 0 5
25150: PUSH
25151: LD_INT 1
25153: ARRAY
25154: PPUSH
25155: LD_VAR 0 5
25159: PUSH
25160: LD_INT 2
25162: ARRAY
25163: PPUSH
25164: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25168: LD_ADDR_EXP 88
25172: PUSH
25173: LD_EXP 88
25177: PPUSH
25178: LD_VAR 0 4
25182: PPUSH
25183: LD_EXP 88
25187: PUSH
25188: LD_VAR 0 4
25192: ARRAY
25193: PPUSH
25194: LD_VAR 0 3
25198: PPUSH
25199: CALL_OW 3
25203: PPUSH
25204: CALL_OW 1
25208: ST_TO_ADDR
// end ; end ;
25209: GO 25038
25211: POP
25212: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25213: LD_VAR 0 1
25217: PPUSH
25218: LD_EXP 88
25222: PUSH
25223: LD_VAR 0 4
25227: ARRAY
25228: PUSH
25229: LD_INT 0
25231: PLUS
25232: PPUSH
25233: CALL_OW 505
// end ;
25237: LD_VAR 0 2
25241: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25242: LD_INT 0
25244: PPUSH
25245: PPUSH
25246: PPUSH
25247: PPUSH
// if not hack in hackTanks then
25248: LD_VAR 0 1
25252: PUSH
25253: LD_EXP 87
25257: IN
25258: NOT
25259: IFFALSE 25263
// exit ;
25261: GO 25348
// index := GetElementIndex ( hackTanks , hack ) ;
25263: LD_ADDR_VAR 0 5
25267: PUSH
25268: LD_EXP 87
25272: PPUSH
25273: LD_VAR 0 1
25277: PPUSH
25278: CALL 32281 0 2
25282: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25283: LD_ADDR_VAR 0 4
25287: PUSH
25288: DOUBLE
25289: LD_INT 1
25291: DEC
25292: ST_TO_ADDR
25293: LD_EXP 88
25297: PUSH
25298: LD_VAR 0 5
25302: ARRAY
25303: PUSH
25304: FOR_TO
25305: IFFALSE 25346
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25307: LD_EXP 88
25311: PUSH
25312: LD_VAR 0 5
25316: ARRAY
25317: PUSH
25318: LD_VAR 0 4
25322: ARRAY
25323: PUSH
25324: LD_INT 1
25326: ARRAY
25327: PUSH
25328: LD_VAR 0 2
25332: EQUAL
25333: IFFALSE 25344
// KillUnit ( vehicle ) ;
25335: LD_VAR 0 2
25339: PPUSH
25340: CALL_OW 66
25344: GO 25304
25346: POP
25347: POP
// end ;
25348: LD_VAR 0 3
25352: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25353: LD_EXP 92
25357: NOT
25358: IFFALSE 25393
25360: GO 25362
25362: DISABLE
// begin initMiner := true ;
25363: LD_ADDR_EXP 92
25367: PUSH
25368: LD_INT 1
25370: ST_TO_ADDR
// minersList := [ ] ;
25371: LD_ADDR_EXP 93
25375: PUSH
25376: EMPTY
25377: ST_TO_ADDR
// minerMinesList := [ ] ;
25378: LD_ADDR_EXP 94
25382: PUSH
25383: EMPTY
25384: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25385: LD_ADDR_EXP 95
25389: PUSH
25390: LD_INT 5
25392: ST_TO_ADDR
// end ;
25393: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25394: LD_EXP 92
25398: PUSH
25399: LD_INT 34
25401: PUSH
25402: LD_INT 81
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PPUSH
25409: CALL_OW 69
25413: AND
25414: IFFALSE 25875
25416: GO 25418
25418: DISABLE
25419: LD_INT 0
25421: PPUSH
25422: PPUSH
25423: PPUSH
25424: PPUSH
// begin enable ;
25425: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25426: LD_ADDR_VAR 0 1
25430: PUSH
25431: LD_INT 34
25433: PUSH
25434: LD_INT 81
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PPUSH
25441: CALL_OW 69
25445: PUSH
25446: FOR_IN
25447: IFFALSE 25519
// begin if not i in minersList then
25449: LD_VAR 0 1
25453: PUSH
25454: LD_EXP 93
25458: IN
25459: NOT
25460: IFFALSE 25517
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25462: LD_ADDR_EXP 93
25466: PUSH
25467: LD_EXP 93
25471: PPUSH
25472: LD_EXP 93
25476: PUSH
25477: LD_INT 1
25479: PLUS
25480: PPUSH
25481: LD_VAR 0 1
25485: PPUSH
25486: CALL_OW 1
25490: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25491: LD_ADDR_EXP 94
25495: PUSH
25496: LD_EXP 94
25500: PPUSH
25501: LD_EXP 94
25505: PUSH
25506: LD_INT 1
25508: PLUS
25509: PPUSH
25510: EMPTY
25511: PPUSH
25512: CALL_OW 1
25516: ST_TO_ADDR
// end end ;
25517: GO 25446
25519: POP
25520: POP
// for i := minerMinesList downto 1 do
25521: LD_ADDR_VAR 0 1
25525: PUSH
25526: DOUBLE
25527: LD_EXP 94
25531: INC
25532: ST_TO_ADDR
25533: LD_INT 1
25535: PUSH
25536: FOR_DOWNTO
25537: IFFALSE 25873
// begin if IsLive ( minersList [ i ] ) then
25539: LD_EXP 93
25543: PUSH
25544: LD_VAR 0 1
25548: ARRAY
25549: PPUSH
25550: CALL_OW 300
25554: IFFALSE 25582
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25556: LD_EXP 93
25560: PUSH
25561: LD_VAR 0 1
25565: ARRAY
25566: PPUSH
25567: LD_EXP 94
25571: PUSH
25572: LD_VAR 0 1
25576: ARRAY
25577: PPUSH
25578: CALL_OW 505
// if not minerMinesList [ i ] then
25582: LD_EXP 94
25586: PUSH
25587: LD_VAR 0 1
25591: ARRAY
25592: NOT
25593: IFFALSE 25597
// continue ;
25595: GO 25536
// for j := minerMinesList [ i ] downto 1 do
25597: LD_ADDR_VAR 0 2
25601: PUSH
25602: DOUBLE
25603: LD_EXP 94
25607: PUSH
25608: LD_VAR 0 1
25612: ARRAY
25613: INC
25614: ST_TO_ADDR
25615: LD_INT 1
25617: PUSH
25618: FOR_DOWNTO
25619: IFFALSE 25869
// begin side := GetSide ( minersList [ i ] ) ;
25621: LD_ADDR_VAR 0 3
25625: PUSH
25626: LD_EXP 93
25630: PUSH
25631: LD_VAR 0 1
25635: ARRAY
25636: PPUSH
25637: CALL_OW 255
25641: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25642: LD_ADDR_VAR 0 4
25646: PUSH
25647: LD_EXP 94
25651: PUSH
25652: LD_VAR 0 1
25656: ARRAY
25657: PUSH
25658: LD_VAR 0 2
25662: ARRAY
25663: PUSH
25664: LD_INT 1
25666: ARRAY
25667: PPUSH
25668: LD_EXP 94
25672: PUSH
25673: LD_VAR 0 1
25677: ARRAY
25678: PUSH
25679: LD_VAR 0 2
25683: ARRAY
25684: PUSH
25685: LD_INT 2
25687: ARRAY
25688: PPUSH
25689: CALL_OW 428
25693: ST_TO_ADDR
// if not tmp then
25694: LD_VAR 0 4
25698: NOT
25699: IFFALSE 25703
// continue ;
25701: GO 25618
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25703: LD_VAR 0 4
25707: PUSH
25708: LD_INT 81
25710: PUSH
25711: LD_VAR 0 3
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PPUSH
25720: CALL_OW 69
25724: IN
25725: PUSH
25726: LD_EXP 94
25730: PUSH
25731: LD_VAR 0 1
25735: ARRAY
25736: PUSH
25737: LD_VAR 0 2
25741: ARRAY
25742: PUSH
25743: LD_INT 1
25745: ARRAY
25746: PPUSH
25747: LD_EXP 94
25751: PUSH
25752: LD_VAR 0 1
25756: ARRAY
25757: PUSH
25758: LD_VAR 0 2
25762: ARRAY
25763: PUSH
25764: LD_INT 2
25766: ARRAY
25767: PPUSH
25768: CALL_OW 458
25772: AND
25773: IFFALSE 25867
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25775: LD_EXP 94
25779: PUSH
25780: LD_VAR 0 1
25784: ARRAY
25785: PUSH
25786: LD_VAR 0 2
25790: ARRAY
25791: PUSH
25792: LD_INT 1
25794: ARRAY
25795: PPUSH
25796: LD_EXP 94
25800: PUSH
25801: LD_VAR 0 1
25805: ARRAY
25806: PUSH
25807: LD_VAR 0 2
25811: ARRAY
25812: PUSH
25813: LD_INT 2
25815: ARRAY
25816: PPUSH
25817: LD_VAR 0 3
25821: PPUSH
25822: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25826: LD_ADDR_EXP 94
25830: PUSH
25831: LD_EXP 94
25835: PPUSH
25836: LD_VAR 0 1
25840: PPUSH
25841: LD_EXP 94
25845: PUSH
25846: LD_VAR 0 1
25850: ARRAY
25851: PPUSH
25852: LD_VAR 0 2
25856: PPUSH
25857: CALL_OW 3
25861: PPUSH
25862: CALL_OW 1
25866: ST_TO_ADDR
// end ; end ;
25867: GO 25618
25869: POP
25870: POP
// end ;
25871: GO 25536
25873: POP
25874: POP
// end ;
25875: PPOPN 4
25877: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25878: LD_INT 0
25880: PPUSH
25881: PPUSH
// result := false ;
25882: LD_ADDR_VAR 0 4
25886: PUSH
25887: LD_INT 0
25889: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25890: LD_VAR 0 1
25894: PPUSH
25895: CALL_OW 264
25899: PUSH
25900: LD_INT 81
25902: EQUAL
25903: NOT
25904: IFFALSE 25908
// exit ;
25906: GO 26148
// index := GetElementIndex ( minersList , unit ) ;
25908: LD_ADDR_VAR 0 5
25912: PUSH
25913: LD_EXP 93
25917: PPUSH
25918: LD_VAR 0 1
25922: PPUSH
25923: CALL 32281 0 2
25927: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25928: LD_EXP 94
25932: PUSH
25933: LD_VAR 0 5
25937: ARRAY
25938: PUSH
25939: LD_EXP 95
25943: GREATEREQUAL
25944: IFFALSE 25948
// exit ;
25946: GO 26148
// ComMoveXY ( unit , x , y ) ;
25948: LD_VAR 0 1
25952: PPUSH
25953: LD_VAR 0 2
25957: PPUSH
25958: LD_VAR 0 3
25962: PPUSH
25963: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25967: LD_INT 35
25969: PPUSH
25970: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25974: LD_VAR 0 1
25978: PPUSH
25979: LD_VAR 0 2
25983: PPUSH
25984: LD_VAR 0 3
25988: PPUSH
25989: CALL 63636 0 3
25993: NOT
25994: PUSH
25995: LD_VAR 0 1
25999: PPUSH
26000: CALL_OW 314
26004: AND
26005: IFFALSE 26009
// exit ;
26007: GO 26148
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26009: LD_VAR 0 2
26013: PPUSH
26014: LD_VAR 0 3
26018: PPUSH
26019: CALL_OW 428
26023: PUSH
26024: LD_VAR 0 1
26028: EQUAL
26029: PUSH
26030: LD_VAR 0 1
26034: PPUSH
26035: CALL_OW 314
26039: NOT
26040: AND
26041: IFFALSE 25967
// PlaySoundXY ( x , y , PlantMine ) ;
26043: LD_VAR 0 2
26047: PPUSH
26048: LD_VAR 0 3
26052: PPUSH
26053: LD_STRING PlantMine
26055: PPUSH
26056: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26060: LD_VAR 0 2
26064: PPUSH
26065: LD_VAR 0 3
26069: PPUSH
26070: LD_VAR 0 1
26074: PPUSH
26075: CALL_OW 255
26079: PPUSH
26080: LD_INT 0
26082: PPUSH
26083: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26087: LD_ADDR_EXP 94
26091: PUSH
26092: LD_EXP 94
26096: PPUSH
26097: LD_VAR 0 5
26101: PUSH
26102: LD_EXP 94
26106: PUSH
26107: LD_VAR 0 5
26111: ARRAY
26112: PUSH
26113: LD_INT 1
26115: PLUS
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PPUSH
26121: LD_VAR 0 2
26125: PUSH
26126: LD_VAR 0 3
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PPUSH
26135: CALL 32496 0 3
26139: ST_TO_ADDR
// result := true ;
26140: LD_ADDR_VAR 0 4
26144: PUSH
26145: LD_INT 1
26147: ST_TO_ADDR
// end ;
26148: LD_VAR 0 4
26152: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26153: LD_INT 0
26155: PPUSH
26156: PPUSH
26157: PPUSH
// if not unit in minersList then
26158: LD_VAR 0 1
26162: PUSH
26163: LD_EXP 93
26167: IN
26168: NOT
26169: IFFALSE 26173
// exit ;
26171: GO 26565
// index := GetElementIndex ( minersList , unit ) ;
26173: LD_ADDR_VAR 0 6
26177: PUSH
26178: LD_EXP 93
26182: PPUSH
26183: LD_VAR 0 1
26187: PPUSH
26188: CALL 32281 0 2
26192: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26193: LD_ADDR_VAR 0 5
26197: PUSH
26198: DOUBLE
26199: LD_EXP 94
26203: PUSH
26204: LD_VAR 0 6
26208: ARRAY
26209: INC
26210: ST_TO_ADDR
26211: LD_INT 1
26213: PUSH
26214: FOR_DOWNTO
26215: IFFALSE 26376
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26217: LD_EXP 94
26221: PUSH
26222: LD_VAR 0 6
26226: ARRAY
26227: PUSH
26228: LD_VAR 0 5
26232: ARRAY
26233: PUSH
26234: LD_INT 1
26236: ARRAY
26237: PUSH
26238: LD_VAR 0 2
26242: EQUAL
26243: PUSH
26244: LD_EXP 94
26248: PUSH
26249: LD_VAR 0 6
26253: ARRAY
26254: PUSH
26255: LD_VAR 0 5
26259: ARRAY
26260: PUSH
26261: LD_INT 2
26263: ARRAY
26264: PUSH
26265: LD_VAR 0 3
26269: EQUAL
26270: AND
26271: IFFALSE 26374
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26273: LD_EXP 94
26277: PUSH
26278: LD_VAR 0 6
26282: ARRAY
26283: PUSH
26284: LD_VAR 0 5
26288: ARRAY
26289: PUSH
26290: LD_INT 1
26292: ARRAY
26293: PPUSH
26294: LD_EXP 94
26298: PUSH
26299: LD_VAR 0 6
26303: ARRAY
26304: PUSH
26305: LD_VAR 0 5
26309: ARRAY
26310: PUSH
26311: LD_INT 2
26313: ARRAY
26314: PPUSH
26315: LD_VAR 0 1
26319: PPUSH
26320: CALL_OW 255
26324: PPUSH
26325: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26329: LD_ADDR_EXP 94
26333: PUSH
26334: LD_EXP 94
26338: PPUSH
26339: LD_VAR 0 6
26343: PPUSH
26344: LD_EXP 94
26348: PUSH
26349: LD_VAR 0 6
26353: ARRAY
26354: PPUSH
26355: LD_VAR 0 5
26359: PPUSH
26360: CALL_OW 3
26364: PPUSH
26365: CALL_OW 1
26369: ST_TO_ADDR
// exit ;
26370: POP
26371: POP
26372: GO 26565
// end ; end ;
26374: GO 26214
26376: POP
26377: POP
// for i := minerMinesList [ index ] downto 1 do
26378: LD_ADDR_VAR 0 5
26382: PUSH
26383: DOUBLE
26384: LD_EXP 94
26388: PUSH
26389: LD_VAR 0 6
26393: ARRAY
26394: INC
26395: ST_TO_ADDR
26396: LD_INT 1
26398: PUSH
26399: FOR_DOWNTO
26400: IFFALSE 26563
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26402: LD_EXP 94
26406: PUSH
26407: LD_VAR 0 6
26411: ARRAY
26412: PUSH
26413: LD_VAR 0 5
26417: ARRAY
26418: PUSH
26419: LD_INT 1
26421: ARRAY
26422: PPUSH
26423: LD_EXP 94
26427: PUSH
26428: LD_VAR 0 6
26432: ARRAY
26433: PUSH
26434: LD_VAR 0 5
26438: ARRAY
26439: PUSH
26440: LD_INT 2
26442: ARRAY
26443: PPUSH
26444: LD_VAR 0 2
26448: PPUSH
26449: LD_VAR 0 3
26453: PPUSH
26454: CALL_OW 298
26458: PUSH
26459: LD_INT 6
26461: LESS
26462: IFFALSE 26561
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26464: LD_EXP 94
26468: PUSH
26469: LD_VAR 0 6
26473: ARRAY
26474: PUSH
26475: LD_VAR 0 5
26479: ARRAY
26480: PUSH
26481: LD_INT 1
26483: ARRAY
26484: PPUSH
26485: LD_EXP 94
26489: PUSH
26490: LD_VAR 0 6
26494: ARRAY
26495: PUSH
26496: LD_VAR 0 5
26500: ARRAY
26501: PUSH
26502: LD_INT 2
26504: ARRAY
26505: PPUSH
26506: LD_VAR 0 1
26510: PPUSH
26511: CALL_OW 255
26515: PPUSH
26516: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26520: LD_ADDR_EXP 94
26524: PUSH
26525: LD_EXP 94
26529: PPUSH
26530: LD_VAR 0 6
26534: PPUSH
26535: LD_EXP 94
26539: PUSH
26540: LD_VAR 0 6
26544: ARRAY
26545: PPUSH
26546: LD_VAR 0 5
26550: PPUSH
26551: CALL_OW 3
26555: PPUSH
26556: CALL_OW 1
26560: ST_TO_ADDR
// end ; end ;
26561: GO 26399
26563: POP
26564: POP
// end ;
26565: LD_VAR 0 4
26569: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26570: LD_INT 0
26572: PPUSH
26573: PPUSH
26574: PPUSH
26575: PPUSH
26576: PPUSH
26577: PPUSH
26578: PPUSH
26579: PPUSH
26580: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26581: LD_VAR 0 1
26585: PPUSH
26586: CALL_OW 264
26590: PUSH
26591: LD_INT 81
26593: EQUAL
26594: NOT
26595: PUSH
26596: LD_VAR 0 1
26600: PUSH
26601: LD_EXP 93
26605: IN
26606: NOT
26607: OR
26608: IFFALSE 26612
// exit ;
26610: GO 26934
// index := GetElementIndex ( minersList , unit ) ;
26612: LD_ADDR_VAR 0 6
26616: PUSH
26617: LD_EXP 93
26621: PPUSH
26622: LD_VAR 0 1
26626: PPUSH
26627: CALL 32281 0 2
26631: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26632: LD_ADDR_VAR 0 8
26636: PUSH
26637: LD_EXP 95
26641: PUSH
26642: LD_EXP 94
26646: PUSH
26647: LD_VAR 0 6
26651: ARRAY
26652: MINUS
26653: ST_TO_ADDR
// if not minesFreeAmount then
26654: LD_VAR 0 8
26658: NOT
26659: IFFALSE 26663
// exit ;
26661: GO 26934
// tmp := [ ] ;
26663: LD_ADDR_VAR 0 7
26667: PUSH
26668: EMPTY
26669: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26670: LD_ADDR_VAR 0 5
26674: PUSH
26675: DOUBLE
26676: LD_INT 1
26678: DEC
26679: ST_TO_ADDR
26680: LD_VAR 0 8
26684: PUSH
26685: FOR_TO
26686: IFFALSE 26881
// begin _d := rand ( 0 , 5 ) ;
26688: LD_ADDR_VAR 0 11
26692: PUSH
26693: LD_INT 0
26695: PPUSH
26696: LD_INT 5
26698: PPUSH
26699: CALL_OW 12
26703: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26704: LD_ADDR_VAR 0 12
26708: PUSH
26709: LD_INT 2
26711: PPUSH
26712: LD_INT 6
26714: PPUSH
26715: CALL_OW 12
26719: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26720: LD_ADDR_VAR 0 9
26724: PUSH
26725: LD_VAR 0 2
26729: PPUSH
26730: LD_VAR 0 11
26734: PPUSH
26735: LD_VAR 0 12
26739: PPUSH
26740: CALL_OW 272
26744: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26745: LD_ADDR_VAR 0 10
26749: PUSH
26750: LD_VAR 0 3
26754: PPUSH
26755: LD_VAR 0 11
26759: PPUSH
26760: LD_VAR 0 12
26764: PPUSH
26765: CALL_OW 273
26769: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26770: LD_VAR 0 9
26774: PPUSH
26775: LD_VAR 0 10
26779: PPUSH
26780: CALL_OW 488
26784: PUSH
26785: LD_VAR 0 9
26789: PUSH
26790: LD_VAR 0 10
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_VAR 0 7
26803: IN
26804: NOT
26805: AND
26806: PUSH
26807: LD_VAR 0 9
26811: PPUSH
26812: LD_VAR 0 10
26816: PPUSH
26817: CALL_OW 458
26821: NOT
26822: AND
26823: IFFALSE 26865
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26825: LD_ADDR_VAR 0 7
26829: PUSH
26830: LD_VAR 0 7
26834: PPUSH
26835: LD_VAR 0 7
26839: PUSH
26840: LD_INT 1
26842: PLUS
26843: PPUSH
26844: LD_VAR 0 9
26848: PUSH
26849: LD_VAR 0 10
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PPUSH
26858: CALL_OW 1
26862: ST_TO_ADDR
26863: GO 26879
// i := i - 1 ;
26865: LD_ADDR_VAR 0 5
26869: PUSH
26870: LD_VAR 0 5
26874: PUSH
26875: LD_INT 1
26877: MINUS
26878: ST_TO_ADDR
// end ;
26879: GO 26685
26881: POP
26882: POP
// for i in tmp do
26883: LD_ADDR_VAR 0 5
26887: PUSH
26888: LD_VAR 0 7
26892: PUSH
26893: FOR_IN
26894: IFFALSE 26932
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26896: LD_VAR 0 1
26900: PPUSH
26901: LD_VAR 0 5
26905: PUSH
26906: LD_INT 1
26908: ARRAY
26909: PPUSH
26910: LD_VAR 0 5
26914: PUSH
26915: LD_INT 2
26917: ARRAY
26918: PPUSH
26919: CALL 25878 0 3
26923: NOT
26924: IFFALSE 26930
// exit ;
26926: POP
26927: POP
26928: GO 26934
26930: GO 26893
26932: POP
26933: POP
// end ;
26934: LD_VAR 0 4
26938: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26939: LD_INT 0
26941: PPUSH
26942: PPUSH
26943: PPUSH
26944: PPUSH
26945: PPUSH
26946: PPUSH
26947: PPUSH
// if not GetClass ( unit ) = class_sniper then
26948: LD_VAR 0 1
26952: PPUSH
26953: CALL_OW 257
26957: PUSH
26958: LD_INT 5
26960: EQUAL
26961: NOT
26962: IFFALSE 26966
// exit ;
26964: GO 27354
// dist := 8 ;
26966: LD_ADDR_VAR 0 5
26970: PUSH
26971: LD_INT 8
26973: ST_TO_ADDR
// viewRange := 12 ;
26974: LD_ADDR_VAR 0 7
26978: PUSH
26979: LD_INT 12
26981: ST_TO_ADDR
// side := GetSide ( unit ) ;
26982: LD_ADDR_VAR 0 6
26986: PUSH
26987: LD_VAR 0 1
26991: PPUSH
26992: CALL_OW 255
26996: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26997: LD_INT 61
26999: PPUSH
27000: LD_VAR 0 6
27004: PPUSH
27005: CALL_OW 321
27009: PUSH
27010: LD_INT 2
27012: EQUAL
27013: IFFALSE 27023
// viewRange := 16 ;
27015: LD_ADDR_VAR 0 7
27019: PUSH
27020: LD_INT 16
27022: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27023: LD_VAR 0 1
27027: PPUSH
27028: LD_VAR 0 2
27032: PPUSH
27033: LD_VAR 0 3
27037: PPUSH
27038: CALL_OW 297
27042: PUSH
27043: LD_VAR 0 5
27047: GREATER
27048: IFFALSE 27127
// begin ComMoveXY ( unit , x , y ) ;
27050: LD_VAR 0 1
27054: PPUSH
27055: LD_VAR 0 2
27059: PPUSH
27060: LD_VAR 0 3
27064: PPUSH
27065: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27069: LD_INT 35
27071: PPUSH
27072: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27076: LD_VAR 0 1
27080: PPUSH
27081: LD_VAR 0 2
27085: PPUSH
27086: LD_VAR 0 3
27090: PPUSH
27091: CALL 63636 0 3
27095: NOT
27096: IFFALSE 27100
// exit ;
27098: GO 27354
// until GetDistUnitXY ( unit , x , y ) < dist ;
27100: LD_VAR 0 1
27104: PPUSH
27105: LD_VAR 0 2
27109: PPUSH
27110: LD_VAR 0 3
27114: PPUSH
27115: CALL_OW 297
27119: PUSH
27120: LD_VAR 0 5
27124: LESS
27125: IFFALSE 27069
// end ; ComTurnXY ( unit , x , y ) ;
27127: LD_VAR 0 1
27131: PPUSH
27132: LD_VAR 0 2
27136: PPUSH
27137: LD_VAR 0 3
27141: PPUSH
27142: CALL_OW 118
// wait ( 5 ) ;
27146: LD_INT 5
27148: PPUSH
27149: CALL_OW 67
// _d := GetDir ( unit ) ;
27153: LD_ADDR_VAR 0 10
27157: PUSH
27158: LD_VAR 0 1
27162: PPUSH
27163: CALL_OW 254
27167: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27168: LD_ADDR_VAR 0 8
27172: PUSH
27173: LD_VAR 0 1
27177: PPUSH
27178: CALL_OW 250
27182: PPUSH
27183: LD_VAR 0 10
27187: PPUSH
27188: LD_VAR 0 5
27192: PPUSH
27193: CALL_OW 272
27197: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27198: LD_ADDR_VAR 0 9
27202: PUSH
27203: LD_VAR 0 1
27207: PPUSH
27208: CALL_OW 251
27212: PPUSH
27213: LD_VAR 0 10
27217: PPUSH
27218: LD_VAR 0 5
27222: PPUSH
27223: CALL_OW 273
27227: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27228: LD_VAR 0 8
27232: PPUSH
27233: LD_VAR 0 9
27237: PPUSH
27238: CALL_OW 488
27242: NOT
27243: IFFALSE 27247
// exit ;
27245: GO 27354
// ComAnimCustom ( unit , 1 ) ;
27247: LD_VAR 0 1
27251: PPUSH
27252: LD_INT 1
27254: PPUSH
27255: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27259: LD_VAR 0 8
27263: PPUSH
27264: LD_VAR 0 9
27268: PPUSH
27269: LD_VAR 0 6
27273: PPUSH
27274: LD_VAR 0 7
27278: PPUSH
27279: CALL_OW 330
// repeat wait ( 1 ) ;
27283: LD_INT 1
27285: PPUSH
27286: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27290: LD_VAR 0 1
27294: PPUSH
27295: CALL_OW 316
27299: PUSH
27300: LD_VAR 0 1
27304: PPUSH
27305: CALL_OW 314
27309: OR
27310: PUSH
27311: LD_VAR 0 1
27315: PPUSH
27316: CALL_OW 302
27320: NOT
27321: OR
27322: PUSH
27323: LD_VAR 0 1
27327: PPUSH
27328: CALL_OW 301
27332: OR
27333: IFFALSE 27283
// RemoveSeeing ( _x , _y , side ) ;
27335: LD_VAR 0 8
27339: PPUSH
27340: LD_VAR 0 9
27344: PPUSH
27345: LD_VAR 0 6
27349: PPUSH
27350: CALL_OW 331
// end ; end_of_file
27354: LD_VAR 0 4
27358: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27359: LD_INT 0
27361: PPUSH
27362: PPUSH
// if exist_mode then
27363: LD_VAR 0 2
27367: IFFALSE 27392
// unit := CreateCharacter ( prefix & ident ) else
27369: LD_ADDR_VAR 0 5
27373: PUSH
27374: LD_VAR 0 3
27378: PUSH
27379: LD_VAR 0 1
27383: STR
27384: PPUSH
27385: CALL_OW 34
27389: ST_TO_ADDR
27390: GO 27407
// unit := NewCharacter ( ident ) ;
27392: LD_ADDR_VAR 0 5
27396: PUSH
27397: LD_VAR 0 1
27401: PPUSH
27402: CALL_OW 25
27406: ST_TO_ADDR
// result := unit ;
27407: LD_ADDR_VAR 0 4
27411: PUSH
27412: LD_VAR 0 5
27416: ST_TO_ADDR
// end ;
27417: LD_VAR 0 4
27421: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27422: LD_INT 0
27424: PPUSH
27425: PPUSH
// if not side or not nation then
27426: LD_VAR 0 1
27430: NOT
27431: PUSH
27432: LD_VAR 0 2
27436: NOT
27437: OR
27438: IFFALSE 27442
// exit ;
27440: GO 28210
// case nation of nation_american :
27442: LD_VAR 0 2
27446: PUSH
27447: LD_INT 1
27449: DOUBLE
27450: EQUAL
27451: IFTRUE 27455
27453: GO 27669
27455: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27456: LD_ADDR_VAR 0 4
27460: PUSH
27461: LD_INT 35
27463: PUSH
27464: LD_INT 45
27466: PUSH
27467: LD_INT 46
27469: PUSH
27470: LD_INT 47
27472: PUSH
27473: LD_INT 82
27475: PUSH
27476: LD_INT 83
27478: PUSH
27479: LD_INT 84
27481: PUSH
27482: LD_INT 85
27484: PUSH
27485: LD_INT 86
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: LD_INT 2
27493: PUSH
27494: LD_INT 6
27496: PUSH
27497: LD_INT 15
27499: PUSH
27500: LD_INT 16
27502: PUSH
27503: LD_INT 7
27505: PUSH
27506: LD_INT 12
27508: PUSH
27509: LD_INT 13
27511: PUSH
27512: LD_INT 10
27514: PUSH
27515: LD_INT 14
27517: PUSH
27518: LD_INT 20
27520: PUSH
27521: LD_INT 21
27523: PUSH
27524: LD_INT 22
27526: PUSH
27527: LD_INT 25
27529: PUSH
27530: LD_INT 32
27532: PUSH
27533: LD_INT 27
27535: PUSH
27536: LD_INT 36
27538: PUSH
27539: LD_INT 69
27541: PUSH
27542: LD_INT 39
27544: PUSH
27545: LD_INT 34
27547: PUSH
27548: LD_INT 40
27550: PUSH
27551: LD_INT 48
27553: PUSH
27554: LD_INT 49
27556: PUSH
27557: LD_INT 50
27559: PUSH
27560: LD_INT 51
27562: PUSH
27563: LD_INT 52
27565: PUSH
27566: LD_INT 53
27568: PUSH
27569: LD_INT 54
27571: PUSH
27572: LD_INT 55
27574: PUSH
27575: LD_INT 56
27577: PUSH
27578: LD_INT 57
27580: PUSH
27581: LD_INT 58
27583: PUSH
27584: LD_INT 59
27586: PUSH
27587: LD_INT 60
27589: PUSH
27590: LD_INT 61
27592: PUSH
27593: LD_INT 62
27595: PUSH
27596: LD_INT 80
27598: PUSH
27599: LD_INT 82
27601: PUSH
27602: LD_INT 83
27604: PUSH
27605: LD_INT 84
27607: PUSH
27608: LD_INT 85
27610: PUSH
27611: LD_INT 86
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: ST_TO_ADDR
27667: GO 28134
27669: LD_INT 2
27671: DOUBLE
27672: EQUAL
27673: IFTRUE 27677
27675: GO 27903
27677: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27678: LD_ADDR_VAR 0 4
27682: PUSH
27683: LD_INT 35
27685: PUSH
27686: LD_INT 45
27688: PUSH
27689: LD_INT 46
27691: PUSH
27692: LD_INT 47
27694: PUSH
27695: LD_INT 82
27697: PUSH
27698: LD_INT 83
27700: PUSH
27701: LD_INT 84
27703: PUSH
27704: LD_INT 85
27706: PUSH
27707: LD_INT 87
27709: PUSH
27710: LD_INT 70
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: LD_INT 11
27718: PUSH
27719: LD_INT 3
27721: PUSH
27722: LD_INT 4
27724: PUSH
27725: LD_INT 5
27727: PUSH
27728: LD_INT 6
27730: PUSH
27731: LD_INT 15
27733: PUSH
27734: LD_INT 18
27736: PUSH
27737: LD_INT 7
27739: PUSH
27740: LD_INT 17
27742: PUSH
27743: LD_INT 8
27745: PUSH
27746: LD_INT 20
27748: PUSH
27749: LD_INT 21
27751: PUSH
27752: LD_INT 22
27754: PUSH
27755: LD_INT 72
27757: PUSH
27758: LD_INT 26
27760: PUSH
27761: LD_INT 69
27763: PUSH
27764: LD_INT 39
27766: PUSH
27767: LD_INT 40
27769: PUSH
27770: LD_INT 41
27772: PUSH
27773: LD_INT 42
27775: PUSH
27776: LD_INT 43
27778: PUSH
27779: LD_INT 48
27781: PUSH
27782: LD_INT 49
27784: PUSH
27785: LD_INT 50
27787: PUSH
27788: LD_INT 51
27790: PUSH
27791: LD_INT 52
27793: PUSH
27794: LD_INT 53
27796: PUSH
27797: LD_INT 54
27799: PUSH
27800: LD_INT 55
27802: PUSH
27803: LD_INT 56
27805: PUSH
27806: LD_INT 60
27808: PUSH
27809: LD_INT 61
27811: PUSH
27812: LD_INT 62
27814: PUSH
27815: LD_INT 66
27817: PUSH
27818: LD_INT 67
27820: PUSH
27821: LD_INT 68
27823: PUSH
27824: LD_INT 81
27826: PUSH
27827: LD_INT 82
27829: PUSH
27830: LD_INT 83
27832: PUSH
27833: LD_INT 84
27835: PUSH
27836: LD_INT 85
27838: PUSH
27839: LD_INT 87
27841: PUSH
27842: LD_INT 88
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: ST_TO_ADDR
27901: GO 28134
27903: LD_INT 3
27905: DOUBLE
27906: EQUAL
27907: IFTRUE 27911
27909: GO 28133
27911: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27912: LD_ADDR_VAR 0 4
27916: PUSH
27917: LD_INT 46
27919: PUSH
27920: LD_INT 47
27922: PUSH
27923: LD_INT 1
27925: PUSH
27926: LD_INT 2
27928: PUSH
27929: LD_INT 82
27931: PUSH
27932: LD_INT 83
27934: PUSH
27935: LD_INT 84
27937: PUSH
27938: LD_INT 85
27940: PUSH
27941: LD_INT 86
27943: PUSH
27944: LD_INT 11
27946: PUSH
27947: LD_INT 9
27949: PUSH
27950: LD_INT 20
27952: PUSH
27953: LD_INT 19
27955: PUSH
27956: LD_INT 21
27958: PUSH
27959: LD_INT 24
27961: PUSH
27962: LD_INT 22
27964: PUSH
27965: LD_INT 25
27967: PUSH
27968: LD_INT 28
27970: PUSH
27971: LD_INT 29
27973: PUSH
27974: LD_INT 30
27976: PUSH
27977: LD_INT 31
27979: PUSH
27980: LD_INT 37
27982: PUSH
27983: LD_INT 38
27985: PUSH
27986: LD_INT 32
27988: PUSH
27989: LD_INT 27
27991: PUSH
27992: LD_INT 33
27994: PUSH
27995: LD_INT 69
27997: PUSH
27998: LD_INT 39
28000: PUSH
28001: LD_INT 34
28003: PUSH
28004: LD_INT 40
28006: PUSH
28007: LD_INT 71
28009: PUSH
28010: LD_INT 23
28012: PUSH
28013: LD_INT 44
28015: PUSH
28016: LD_INT 48
28018: PUSH
28019: LD_INT 49
28021: PUSH
28022: LD_INT 50
28024: PUSH
28025: LD_INT 51
28027: PUSH
28028: LD_INT 52
28030: PUSH
28031: LD_INT 53
28033: PUSH
28034: LD_INT 54
28036: PUSH
28037: LD_INT 55
28039: PUSH
28040: LD_INT 56
28042: PUSH
28043: LD_INT 57
28045: PUSH
28046: LD_INT 58
28048: PUSH
28049: LD_INT 59
28051: PUSH
28052: LD_INT 63
28054: PUSH
28055: LD_INT 64
28057: PUSH
28058: LD_INT 65
28060: PUSH
28061: LD_INT 82
28063: PUSH
28064: LD_INT 83
28066: PUSH
28067: LD_INT 84
28069: PUSH
28070: LD_INT 85
28072: PUSH
28073: LD_INT 86
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: ST_TO_ADDR
28131: GO 28134
28133: POP
// if state > - 1 and state < 3 then
28134: LD_VAR 0 3
28138: PUSH
28139: LD_INT 1
28141: NEG
28142: GREATER
28143: PUSH
28144: LD_VAR 0 3
28148: PUSH
28149: LD_INT 3
28151: LESS
28152: AND
28153: IFFALSE 28210
// for i in result do
28155: LD_ADDR_VAR 0 5
28159: PUSH
28160: LD_VAR 0 4
28164: PUSH
28165: FOR_IN
28166: IFFALSE 28208
// if GetTech ( i , side ) <> state then
28168: LD_VAR 0 5
28172: PPUSH
28173: LD_VAR 0 1
28177: PPUSH
28178: CALL_OW 321
28182: PUSH
28183: LD_VAR 0 3
28187: NONEQUAL
28188: IFFALSE 28206
// result := result diff i ;
28190: LD_ADDR_VAR 0 4
28194: PUSH
28195: LD_VAR 0 4
28199: PUSH
28200: LD_VAR 0 5
28204: DIFF
28205: ST_TO_ADDR
28206: GO 28165
28208: POP
28209: POP
// end ;
28210: LD_VAR 0 4
28214: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28215: LD_INT 0
28217: PPUSH
28218: PPUSH
28219: PPUSH
// result := true ;
28220: LD_ADDR_VAR 0 3
28224: PUSH
28225: LD_INT 1
28227: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28228: LD_ADDR_VAR 0 5
28232: PUSH
28233: LD_VAR 0 2
28237: PPUSH
28238: CALL_OW 480
28242: ST_TO_ADDR
// if not tmp then
28243: LD_VAR 0 5
28247: NOT
28248: IFFALSE 28252
// exit ;
28250: GO 28301
// for i in tmp do
28252: LD_ADDR_VAR 0 4
28256: PUSH
28257: LD_VAR 0 5
28261: PUSH
28262: FOR_IN
28263: IFFALSE 28299
// if GetTech ( i , side ) <> state_researched then
28265: LD_VAR 0 4
28269: PPUSH
28270: LD_VAR 0 1
28274: PPUSH
28275: CALL_OW 321
28279: PUSH
28280: LD_INT 2
28282: NONEQUAL
28283: IFFALSE 28297
// begin result := false ;
28285: LD_ADDR_VAR 0 3
28289: PUSH
28290: LD_INT 0
28292: ST_TO_ADDR
// exit ;
28293: POP
28294: POP
28295: GO 28301
// end ;
28297: GO 28262
28299: POP
28300: POP
// end ;
28301: LD_VAR 0 3
28305: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28306: LD_INT 0
28308: PPUSH
28309: PPUSH
28310: PPUSH
28311: PPUSH
28312: PPUSH
28313: PPUSH
28314: PPUSH
28315: PPUSH
28316: PPUSH
28317: PPUSH
28318: PPUSH
28319: PPUSH
28320: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28321: LD_VAR 0 1
28325: NOT
28326: PUSH
28327: LD_VAR 0 1
28331: PPUSH
28332: CALL_OW 257
28336: PUSH
28337: LD_INT 9
28339: NONEQUAL
28340: OR
28341: IFFALSE 28345
// exit ;
28343: GO 28918
// side := GetSide ( unit ) ;
28345: LD_ADDR_VAR 0 9
28349: PUSH
28350: LD_VAR 0 1
28354: PPUSH
28355: CALL_OW 255
28359: ST_TO_ADDR
// tech_space := tech_spacanom ;
28360: LD_ADDR_VAR 0 12
28364: PUSH
28365: LD_INT 29
28367: ST_TO_ADDR
// tech_time := tech_taurad ;
28368: LD_ADDR_VAR 0 13
28372: PUSH
28373: LD_INT 28
28375: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28376: LD_ADDR_VAR 0 11
28380: PUSH
28381: LD_VAR 0 1
28385: PPUSH
28386: CALL_OW 310
28390: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28391: LD_VAR 0 11
28395: PPUSH
28396: CALL_OW 247
28400: PUSH
28401: LD_INT 2
28403: EQUAL
28404: IFFALSE 28408
// exit ;
28406: GO 28918
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28408: LD_ADDR_VAR 0 8
28412: PUSH
28413: LD_INT 81
28415: PUSH
28416: LD_VAR 0 9
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 3
28427: PUSH
28428: LD_INT 21
28430: PUSH
28431: LD_INT 3
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PPUSH
28446: CALL_OW 69
28450: ST_TO_ADDR
// if not tmp then
28451: LD_VAR 0 8
28455: NOT
28456: IFFALSE 28460
// exit ;
28458: GO 28918
// if in_unit then
28460: LD_VAR 0 11
28464: IFFALSE 28488
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28466: LD_ADDR_VAR 0 10
28470: PUSH
28471: LD_VAR 0 8
28475: PPUSH
28476: LD_VAR 0 11
28480: PPUSH
28481: CALL_OW 74
28485: ST_TO_ADDR
28486: GO 28508
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28488: LD_ADDR_VAR 0 10
28492: PUSH
28493: LD_VAR 0 8
28497: PPUSH
28498: LD_VAR 0 1
28502: PPUSH
28503: CALL_OW 74
28507: ST_TO_ADDR
// if not enemy then
28508: LD_VAR 0 10
28512: NOT
28513: IFFALSE 28517
// exit ;
28515: GO 28918
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28517: LD_VAR 0 11
28521: PUSH
28522: LD_VAR 0 11
28526: PPUSH
28527: LD_VAR 0 10
28531: PPUSH
28532: CALL_OW 296
28536: PUSH
28537: LD_INT 13
28539: GREATER
28540: AND
28541: PUSH
28542: LD_VAR 0 1
28546: PPUSH
28547: LD_VAR 0 10
28551: PPUSH
28552: CALL_OW 296
28556: PUSH
28557: LD_INT 12
28559: GREATER
28560: OR
28561: IFFALSE 28565
// exit ;
28563: GO 28918
// missile := [ 1 ] ;
28565: LD_ADDR_VAR 0 14
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: EMPTY
28574: LIST
28575: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28576: LD_VAR 0 9
28580: PPUSH
28581: LD_VAR 0 12
28585: PPUSH
28586: CALL_OW 325
28590: IFFALSE 28619
// missile := Replace ( missile , missile + 1 , 2 ) ;
28592: LD_ADDR_VAR 0 14
28596: PUSH
28597: LD_VAR 0 14
28601: PPUSH
28602: LD_VAR 0 14
28606: PUSH
28607: LD_INT 1
28609: PLUS
28610: PPUSH
28611: LD_INT 2
28613: PPUSH
28614: CALL_OW 1
28618: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28619: LD_VAR 0 9
28623: PPUSH
28624: LD_VAR 0 13
28628: PPUSH
28629: CALL_OW 325
28633: PUSH
28634: LD_VAR 0 10
28638: PPUSH
28639: CALL_OW 255
28643: PPUSH
28644: LD_VAR 0 13
28648: PPUSH
28649: CALL_OW 325
28653: NOT
28654: AND
28655: IFFALSE 28684
// missile := Replace ( missile , missile + 1 , 3 ) ;
28657: LD_ADDR_VAR 0 14
28661: PUSH
28662: LD_VAR 0 14
28666: PPUSH
28667: LD_VAR 0 14
28671: PUSH
28672: LD_INT 1
28674: PLUS
28675: PPUSH
28676: LD_INT 3
28678: PPUSH
28679: CALL_OW 1
28683: ST_TO_ADDR
// if missile < 2 then
28684: LD_VAR 0 14
28688: PUSH
28689: LD_INT 2
28691: LESS
28692: IFFALSE 28696
// exit ;
28694: GO 28918
// x := GetX ( enemy ) ;
28696: LD_ADDR_VAR 0 4
28700: PUSH
28701: LD_VAR 0 10
28705: PPUSH
28706: CALL_OW 250
28710: ST_TO_ADDR
// y := GetY ( enemy ) ;
28711: LD_ADDR_VAR 0 5
28715: PUSH
28716: LD_VAR 0 10
28720: PPUSH
28721: CALL_OW 251
28725: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28726: LD_ADDR_VAR 0 6
28730: PUSH
28731: LD_VAR 0 4
28735: PUSH
28736: LD_INT 1
28738: NEG
28739: PPUSH
28740: LD_INT 1
28742: PPUSH
28743: CALL_OW 12
28747: PLUS
28748: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28749: LD_ADDR_VAR 0 7
28753: PUSH
28754: LD_VAR 0 5
28758: PUSH
28759: LD_INT 1
28761: NEG
28762: PPUSH
28763: LD_INT 1
28765: PPUSH
28766: CALL_OW 12
28770: PLUS
28771: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28772: LD_VAR 0 6
28776: PPUSH
28777: LD_VAR 0 7
28781: PPUSH
28782: CALL_OW 488
28786: NOT
28787: IFFALSE 28809
// begin _x := x ;
28789: LD_ADDR_VAR 0 6
28793: PUSH
28794: LD_VAR 0 4
28798: ST_TO_ADDR
// _y := y ;
28799: LD_ADDR_VAR 0 7
28803: PUSH
28804: LD_VAR 0 5
28808: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28809: LD_ADDR_VAR 0 3
28813: PUSH
28814: LD_INT 1
28816: PPUSH
28817: LD_VAR 0 14
28821: PPUSH
28822: CALL_OW 12
28826: ST_TO_ADDR
// case i of 1 :
28827: LD_VAR 0 3
28831: PUSH
28832: LD_INT 1
28834: DOUBLE
28835: EQUAL
28836: IFTRUE 28840
28838: GO 28857
28840: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28841: LD_VAR 0 1
28845: PPUSH
28846: LD_VAR 0 10
28850: PPUSH
28851: CALL_OW 115
28855: GO 28918
28857: LD_INT 2
28859: DOUBLE
28860: EQUAL
28861: IFTRUE 28865
28863: GO 28887
28865: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28866: LD_VAR 0 1
28870: PPUSH
28871: LD_VAR 0 6
28875: PPUSH
28876: LD_VAR 0 7
28880: PPUSH
28881: CALL_OW 153
28885: GO 28918
28887: LD_INT 3
28889: DOUBLE
28890: EQUAL
28891: IFTRUE 28895
28893: GO 28917
28895: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28896: LD_VAR 0 1
28900: PPUSH
28901: LD_VAR 0 6
28905: PPUSH
28906: LD_VAR 0 7
28910: PPUSH
28911: CALL_OW 154
28915: GO 28918
28917: POP
// end ;
28918: LD_VAR 0 2
28922: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28923: LD_INT 0
28925: PPUSH
28926: PPUSH
28927: PPUSH
28928: PPUSH
28929: PPUSH
28930: PPUSH
// if not unit or not building then
28931: LD_VAR 0 1
28935: NOT
28936: PUSH
28937: LD_VAR 0 2
28941: NOT
28942: OR
28943: IFFALSE 28947
// exit ;
28945: GO 29105
// x := GetX ( building ) ;
28947: LD_ADDR_VAR 0 5
28951: PUSH
28952: LD_VAR 0 2
28956: PPUSH
28957: CALL_OW 250
28961: ST_TO_ADDR
// y := GetY ( building ) ;
28962: LD_ADDR_VAR 0 6
28966: PUSH
28967: LD_VAR 0 2
28971: PPUSH
28972: CALL_OW 251
28976: ST_TO_ADDR
// for i = 0 to 5 do
28977: LD_ADDR_VAR 0 4
28981: PUSH
28982: DOUBLE
28983: LD_INT 0
28985: DEC
28986: ST_TO_ADDR
28987: LD_INT 5
28989: PUSH
28990: FOR_TO
28991: IFFALSE 29103
// begin _x := ShiftX ( x , i , 3 ) ;
28993: LD_ADDR_VAR 0 7
28997: PUSH
28998: LD_VAR 0 5
29002: PPUSH
29003: LD_VAR 0 4
29007: PPUSH
29008: LD_INT 3
29010: PPUSH
29011: CALL_OW 272
29015: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29016: LD_ADDR_VAR 0 8
29020: PUSH
29021: LD_VAR 0 6
29025: PPUSH
29026: LD_VAR 0 4
29030: PPUSH
29031: LD_INT 3
29033: PPUSH
29034: CALL_OW 273
29038: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29039: LD_VAR 0 7
29043: PPUSH
29044: LD_VAR 0 8
29048: PPUSH
29049: CALL_OW 488
29053: NOT
29054: IFFALSE 29058
// continue ;
29056: GO 28990
// if HexInfo ( _x , _y ) = 0 then
29058: LD_VAR 0 7
29062: PPUSH
29063: LD_VAR 0 8
29067: PPUSH
29068: CALL_OW 428
29072: PUSH
29073: LD_INT 0
29075: EQUAL
29076: IFFALSE 29101
// begin ComMoveXY ( unit , _x , _y ) ;
29078: LD_VAR 0 1
29082: PPUSH
29083: LD_VAR 0 7
29087: PPUSH
29088: LD_VAR 0 8
29092: PPUSH
29093: CALL_OW 111
// exit ;
29097: POP
29098: POP
29099: GO 29105
// end ; end ;
29101: GO 28990
29103: POP
29104: POP
// end ;
29105: LD_VAR 0 3
29109: RET
// export function ScanBase ( side , base_area ) ; begin
29110: LD_INT 0
29112: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29113: LD_ADDR_VAR 0 3
29117: PUSH
29118: LD_VAR 0 2
29122: PPUSH
29123: LD_INT 81
29125: PUSH
29126: LD_VAR 0 1
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PPUSH
29135: CALL_OW 70
29139: ST_TO_ADDR
// end ;
29140: LD_VAR 0 3
29144: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29145: LD_INT 0
29147: PPUSH
29148: PPUSH
29149: PPUSH
29150: PPUSH
// result := false ;
29151: LD_ADDR_VAR 0 2
29155: PUSH
29156: LD_INT 0
29158: ST_TO_ADDR
// side := GetSide ( unit ) ;
29159: LD_ADDR_VAR 0 3
29163: PUSH
29164: LD_VAR 0 1
29168: PPUSH
29169: CALL_OW 255
29173: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29174: LD_ADDR_VAR 0 4
29178: PUSH
29179: LD_VAR 0 1
29183: PPUSH
29184: CALL_OW 248
29188: ST_TO_ADDR
// case nat of 1 :
29189: LD_VAR 0 4
29193: PUSH
29194: LD_INT 1
29196: DOUBLE
29197: EQUAL
29198: IFTRUE 29202
29200: GO 29213
29202: POP
// tech := tech_lassight ; 2 :
29203: LD_ADDR_VAR 0 5
29207: PUSH
29208: LD_INT 12
29210: ST_TO_ADDR
29211: GO 29252
29213: LD_INT 2
29215: DOUBLE
29216: EQUAL
29217: IFTRUE 29221
29219: GO 29232
29221: POP
// tech := tech_mortar ; 3 :
29222: LD_ADDR_VAR 0 5
29226: PUSH
29227: LD_INT 41
29229: ST_TO_ADDR
29230: GO 29252
29232: LD_INT 3
29234: DOUBLE
29235: EQUAL
29236: IFTRUE 29240
29238: GO 29251
29240: POP
// tech := tech_bazooka ; end ;
29241: LD_ADDR_VAR 0 5
29245: PUSH
29246: LD_INT 44
29248: ST_TO_ADDR
29249: GO 29252
29251: POP
// if Researched ( side , tech ) then
29252: LD_VAR 0 3
29256: PPUSH
29257: LD_VAR 0 5
29261: PPUSH
29262: CALL_OW 325
29266: IFFALSE 29293
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29268: LD_ADDR_VAR 0 2
29272: PUSH
29273: LD_INT 5
29275: PUSH
29276: LD_INT 8
29278: PUSH
29279: LD_INT 9
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: LIST
29286: PUSH
29287: LD_VAR 0 4
29291: ARRAY
29292: ST_TO_ADDR
// end ;
29293: LD_VAR 0 2
29297: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29298: LD_INT 0
29300: PPUSH
29301: PPUSH
29302: PPUSH
// if not mines then
29303: LD_VAR 0 2
29307: NOT
29308: IFFALSE 29312
// exit ;
29310: GO 29456
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29312: LD_ADDR_VAR 0 5
29316: PUSH
29317: LD_INT 81
29319: PUSH
29320: LD_VAR 0 1
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 3
29331: PUSH
29332: LD_INT 21
29334: PUSH
29335: LD_INT 3
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PPUSH
29350: CALL_OW 69
29354: ST_TO_ADDR
// for i in mines do
29355: LD_ADDR_VAR 0 4
29359: PUSH
29360: LD_VAR 0 2
29364: PUSH
29365: FOR_IN
29366: IFFALSE 29454
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29368: LD_VAR 0 4
29372: PUSH
29373: LD_INT 1
29375: ARRAY
29376: PPUSH
29377: LD_VAR 0 4
29381: PUSH
29382: LD_INT 2
29384: ARRAY
29385: PPUSH
29386: CALL_OW 458
29390: NOT
29391: IFFALSE 29395
// continue ;
29393: GO 29365
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29395: LD_VAR 0 4
29399: PUSH
29400: LD_INT 1
29402: ARRAY
29403: PPUSH
29404: LD_VAR 0 4
29408: PUSH
29409: LD_INT 2
29411: ARRAY
29412: PPUSH
29413: CALL_OW 428
29417: PUSH
29418: LD_VAR 0 5
29422: IN
29423: IFFALSE 29452
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29425: LD_VAR 0 4
29429: PUSH
29430: LD_INT 1
29432: ARRAY
29433: PPUSH
29434: LD_VAR 0 4
29438: PUSH
29439: LD_INT 2
29441: ARRAY
29442: PPUSH
29443: LD_VAR 0 1
29447: PPUSH
29448: CALL_OW 456
// end ;
29452: GO 29365
29454: POP
29455: POP
// end ;
29456: LD_VAR 0 3
29460: RET
// export function Count ( array ) ; var i ; begin
29461: LD_INT 0
29463: PPUSH
29464: PPUSH
// result := 0 ;
29465: LD_ADDR_VAR 0 2
29469: PUSH
29470: LD_INT 0
29472: ST_TO_ADDR
// for i in array do
29473: LD_ADDR_VAR 0 3
29477: PUSH
29478: LD_VAR 0 1
29482: PUSH
29483: FOR_IN
29484: IFFALSE 29508
// if i then
29486: LD_VAR 0 3
29490: IFFALSE 29506
// result := result + 1 ;
29492: LD_ADDR_VAR 0 2
29496: PUSH
29497: LD_VAR 0 2
29501: PUSH
29502: LD_INT 1
29504: PLUS
29505: ST_TO_ADDR
29506: GO 29483
29508: POP
29509: POP
// end ;
29510: LD_VAR 0 2
29514: RET
// export function IsEmpty ( building ) ; begin
29515: LD_INT 0
29517: PPUSH
// if not building then
29518: LD_VAR 0 1
29522: NOT
29523: IFFALSE 29527
// exit ;
29525: GO 29570
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29527: LD_ADDR_VAR 0 2
29531: PUSH
29532: LD_VAR 0 1
29536: PUSH
29537: LD_INT 22
29539: PUSH
29540: LD_VAR 0 1
29544: PPUSH
29545: CALL_OW 255
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 58
29556: PUSH
29557: EMPTY
29558: LIST
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PPUSH
29564: CALL_OW 69
29568: IN
29569: ST_TO_ADDR
// end ;
29570: LD_VAR 0 2
29574: RET
// export function IsNotFull ( building ) ; var places ; begin
29575: LD_INT 0
29577: PPUSH
29578: PPUSH
// if not building then
29579: LD_VAR 0 1
29583: NOT
29584: IFFALSE 29588
// exit ;
29586: GO 29759
// result := false ;
29588: LD_ADDR_VAR 0 2
29592: PUSH
29593: LD_INT 0
29595: ST_TO_ADDR
// places := 0 ;
29596: LD_ADDR_VAR 0 3
29600: PUSH
29601: LD_INT 0
29603: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
29604: LD_VAR 0 1
29608: PPUSH
29609: CALL_OW 266
29613: PUSH
29614: LD_INT 0
29616: DOUBLE
29617: EQUAL
29618: IFTRUE 29676
29620: LD_INT 1
29622: DOUBLE
29623: EQUAL
29624: IFTRUE 29676
29626: LD_INT 6
29628: DOUBLE
29629: EQUAL
29630: IFTRUE 29676
29632: LD_INT 7
29634: DOUBLE
29635: EQUAL
29636: IFTRUE 29676
29638: LD_INT 8
29640: DOUBLE
29641: EQUAL
29642: IFTRUE 29676
29644: LD_INT 4
29646: DOUBLE
29647: EQUAL
29648: IFTRUE 29676
29650: LD_INT 5
29652: DOUBLE
29653: EQUAL
29654: IFTRUE 29676
29656: LD_INT 2
29658: DOUBLE
29659: EQUAL
29660: IFTRUE 29676
29662: LD_INT 3
29664: DOUBLE
29665: EQUAL
29666: IFTRUE 29676
29668: LD_INT 35
29670: DOUBLE
29671: EQUAL
29672: IFTRUE 29676
29674: GO 29687
29676: POP
// places := 6 ; b_bunker , b_breastwork :
29677: LD_ADDR_VAR 0 3
29681: PUSH
29682: LD_INT 6
29684: ST_TO_ADDR
29685: GO 29732
29687: LD_INT 32
29689: DOUBLE
29690: EQUAL
29691: IFTRUE 29701
29693: LD_INT 31
29695: DOUBLE
29696: EQUAL
29697: IFTRUE 29701
29699: GO 29712
29701: POP
// places := 1 ; b_control_tower :
29702: LD_ADDR_VAR 0 3
29706: PUSH
29707: LD_INT 1
29709: ST_TO_ADDR
29710: GO 29732
29712: LD_INT 36
29714: DOUBLE
29715: EQUAL
29716: IFTRUE 29720
29718: GO 29731
29720: POP
// places := 3 ; end ;
29721: LD_ADDR_VAR 0 3
29725: PUSH
29726: LD_INT 3
29728: ST_TO_ADDR
29729: GO 29732
29731: POP
// if places then
29732: LD_VAR 0 3
29736: IFFALSE 29759
// result := UnitsInside ( building ) < places ;
29738: LD_ADDR_VAR 0 2
29742: PUSH
29743: LD_VAR 0 1
29747: PPUSH
29748: CALL_OW 313
29752: PUSH
29753: LD_VAR 0 3
29757: LESS
29758: ST_TO_ADDR
// end ;
29759: LD_VAR 0 2
29763: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29764: LD_INT 0
29766: PPUSH
29767: PPUSH
29768: PPUSH
29769: PPUSH
// tmp := [ ] ;
29770: LD_ADDR_VAR 0 3
29774: PUSH
29775: EMPTY
29776: ST_TO_ADDR
// list := [ ] ;
29777: LD_ADDR_VAR 0 5
29781: PUSH
29782: EMPTY
29783: ST_TO_ADDR
// for i = 16 to 25 do
29784: LD_ADDR_VAR 0 4
29788: PUSH
29789: DOUBLE
29790: LD_INT 16
29792: DEC
29793: ST_TO_ADDR
29794: LD_INT 25
29796: PUSH
29797: FOR_TO
29798: IFFALSE 29871
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29800: LD_ADDR_VAR 0 3
29804: PUSH
29805: LD_VAR 0 3
29809: PUSH
29810: LD_INT 22
29812: PUSH
29813: LD_VAR 0 1
29817: PPUSH
29818: CALL_OW 255
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 91
29829: PUSH
29830: LD_VAR 0 1
29834: PUSH
29835: LD_INT 6
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 30
29845: PUSH
29846: LD_VAR 0 4
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: PPUSH
29863: CALL_OW 69
29867: ADD
29868: ST_TO_ADDR
29869: GO 29797
29871: POP
29872: POP
// for i = 1 to tmp do
29873: LD_ADDR_VAR 0 4
29877: PUSH
29878: DOUBLE
29879: LD_INT 1
29881: DEC
29882: ST_TO_ADDR
29883: LD_VAR 0 3
29887: PUSH
29888: FOR_TO
29889: IFFALSE 29977
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29891: LD_ADDR_VAR 0 5
29895: PUSH
29896: LD_VAR 0 5
29900: PUSH
29901: LD_VAR 0 3
29905: PUSH
29906: LD_VAR 0 4
29910: ARRAY
29911: PPUSH
29912: CALL_OW 266
29916: PUSH
29917: LD_VAR 0 3
29921: PUSH
29922: LD_VAR 0 4
29926: ARRAY
29927: PPUSH
29928: CALL_OW 250
29932: PUSH
29933: LD_VAR 0 3
29937: PUSH
29938: LD_VAR 0 4
29942: ARRAY
29943: PPUSH
29944: CALL_OW 251
29948: PUSH
29949: LD_VAR 0 3
29953: PUSH
29954: LD_VAR 0 4
29958: ARRAY
29959: PPUSH
29960: CALL_OW 254
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: PUSH
29971: EMPTY
29972: LIST
29973: ADD
29974: ST_TO_ADDR
29975: GO 29888
29977: POP
29978: POP
// result := list ;
29979: LD_ADDR_VAR 0 2
29983: PUSH
29984: LD_VAR 0 5
29988: ST_TO_ADDR
// end ;
29989: LD_VAR 0 2
29993: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29994: LD_INT 0
29996: PPUSH
29997: PPUSH
29998: PPUSH
29999: PPUSH
30000: PPUSH
30001: PPUSH
30002: PPUSH
// if not factory then
30003: LD_VAR 0 1
30007: NOT
30008: IFFALSE 30012
// exit ;
30010: GO 30605
// if control = control_apeman then
30012: LD_VAR 0 4
30016: PUSH
30017: LD_INT 5
30019: EQUAL
30020: IFFALSE 30129
// begin tmp := UnitsInside ( factory ) ;
30022: LD_ADDR_VAR 0 8
30026: PUSH
30027: LD_VAR 0 1
30031: PPUSH
30032: CALL_OW 313
30036: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30037: LD_VAR 0 8
30041: PPUSH
30042: LD_INT 25
30044: PUSH
30045: LD_INT 12
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PPUSH
30052: CALL_OW 72
30056: NOT
30057: IFFALSE 30067
// control := control_manual ;
30059: LD_ADDR_VAR 0 4
30063: PUSH
30064: LD_INT 1
30066: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30067: LD_ADDR_VAR 0 8
30071: PUSH
30072: LD_VAR 0 1
30076: PPUSH
30077: CALL 29764 0 1
30081: ST_TO_ADDR
// if tmp then
30082: LD_VAR 0 8
30086: IFFALSE 30129
// begin for i in tmp do
30088: LD_ADDR_VAR 0 7
30092: PUSH
30093: LD_VAR 0 8
30097: PUSH
30098: FOR_IN
30099: IFFALSE 30127
// if i [ 1 ] = b_ext_radio then
30101: LD_VAR 0 7
30105: PUSH
30106: LD_INT 1
30108: ARRAY
30109: PUSH
30110: LD_INT 22
30112: EQUAL
30113: IFFALSE 30125
// begin control := control_remote ;
30115: LD_ADDR_VAR 0 4
30119: PUSH
30120: LD_INT 2
30122: ST_TO_ADDR
// break ;
30123: GO 30127
// end ;
30125: GO 30098
30127: POP
30128: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30129: LD_VAR 0 1
30133: PPUSH
30134: LD_VAR 0 2
30138: PPUSH
30139: LD_VAR 0 3
30143: PPUSH
30144: LD_VAR 0 4
30148: PPUSH
30149: LD_VAR 0 5
30153: PPUSH
30154: CALL_OW 448
30158: IFFALSE 30193
// begin result := [ chassis , engine , control , weapon ] ;
30160: LD_ADDR_VAR 0 6
30164: PUSH
30165: LD_VAR 0 2
30169: PUSH
30170: LD_VAR 0 3
30174: PUSH
30175: LD_VAR 0 4
30179: PUSH
30180: LD_VAR 0 5
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: ST_TO_ADDR
// exit ;
30191: GO 30605
// end ; _chassis := AvailableChassisList ( factory ) ;
30193: LD_ADDR_VAR 0 9
30197: PUSH
30198: LD_VAR 0 1
30202: PPUSH
30203: CALL_OW 475
30207: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30208: LD_ADDR_VAR 0 11
30212: PUSH
30213: LD_VAR 0 1
30217: PPUSH
30218: CALL_OW 476
30222: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30223: LD_ADDR_VAR 0 12
30227: PUSH
30228: LD_VAR 0 1
30232: PPUSH
30233: CALL_OW 477
30237: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30238: LD_ADDR_VAR 0 10
30242: PUSH
30243: LD_VAR 0 1
30247: PPUSH
30248: CALL_OW 478
30252: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30253: LD_VAR 0 9
30257: NOT
30258: PUSH
30259: LD_VAR 0 11
30263: NOT
30264: OR
30265: PUSH
30266: LD_VAR 0 12
30270: NOT
30271: OR
30272: PUSH
30273: LD_VAR 0 10
30277: NOT
30278: OR
30279: IFFALSE 30314
// begin result := [ chassis , engine , control , weapon ] ;
30281: LD_ADDR_VAR 0 6
30285: PUSH
30286: LD_VAR 0 2
30290: PUSH
30291: LD_VAR 0 3
30295: PUSH
30296: LD_VAR 0 4
30300: PUSH
30301: LD_VAR 0 5
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: ST_TO_ADDR
// exit ;
30312: GO 30605
// end ; if not chassis in _chassis then
30314: LD_VAR 0 2
30318: PUSH
30319: LD_VAR 0 9
30323: IN
30324: NOT
30325: IFFALSE 30351
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30327: LD_ADDR_VAR 0 2
30331: PUSH
30332: LD_VAR 0 9
30336: PUSH
30337: LD_INT 1
30339: PPUSH
30340: LD_VAR 0 9
30344: PPUSH
30345: CALL_OW 12
30349: ARRAY
30350: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30351: LD_VAR 0 2
30355: PPUSH
30356: LD_VAR 0 3
30360: PPUSH
30361: CALL 30610 0 2
30365: NOT
30366: IFFALSE 30425
// repeat engine := _engine [ 1 ] ;
30368: LD_ADDR_VAR 0 3
30372: PUSH
30373: LD_VAR 0 11
30377: PUSH
30378: LD_INT 1
30380: ARRAY
30381: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30382: LD_ADDR_VAR 0 11
30386: PUSH
30387: LD_VAR 0 11
30391: PPUSH
30392: LD_INT 1
30394: PPUSH
30395: CALL_OW 3
30399: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30400: LD_VAR 0 2
30404: PPUSH
30405: LD_VAR 0 3
30409: PPUSH
30410: CALL 30610 0 2
30414: PUSH
30415: LD_VAR 0 11
30419: PUSH
30420: EMPTY
30421: EQUAL
30422: OR
30423: IFFALSE 30368
// if not control in _control then
30425: LD_VAR 0 4
30429: PUSH
30430: LD_VAR 0 12
30434: IN
30435: NOT
30436: IFFALSE 30462
// control := _control [ rand ( 1 , _control ) ] ;
30438: LD_ADDR_VAR 0 4
30442: PUSH
30443: LD_VAR 0 12
30447: PUSH
30448: LD_INT 1
30450: PPUSH
30451: LD_VAR 0 12
30455: PPUSH
30456: CALL_OW 12
30460: ARRAY
30461: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30462: LD_VAR 0 2
30466: PPUSH
30467: LD_VAR 0 5
30471: PPUSH
30472: CALL 30830 0 2
30476: NOT
30477: IFFALSE 30536
// repeat weapon := _weapon [ 1 ] ;
30479: LD_ADDR_VAR 0 5
30483: PUSH
30484: LD_VAR 0 10
30488: PUSH
30489: LD_INT 1
30491: ARRAY
30492: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30493: LD_ADDR_VAR 0 10
30497: PUSH
30498: LD_VAR 0 10
30502: PPUSH
30503: LD_INT 1
30505: PPUSH
30506: CALL_OW 3
30510: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30511: LD_VAR 0 2
30515: PPUSH
30516: LD_VAR 0 5
30520: PPUSH
30521: CALL 30830 0 2
30525: PUSH
30526: LD_VAR 0 10
30530: PUSH
30531: EMPTY
30532: EQUAL
30533: OR
30534: IFFALSE 30479
// result := [ ] ;
30536: LD_ADDR_VAR 0 6
30540: PUSH
30541: EMPTY
30542: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30543: LD_VAR 0 1
30547: PPUSH
30548: LD_VAR 0 2
30552: PPUSH
30553: LD_VAR 0 3
30557: PPUSH
30558: LD_VAR 0 4
30562: PPUSH
30563: LD_VAR 0 5
30567: PPUSH
30568: CALL_OW 448
30572: IFFALSE 30605
// result := [ chassis , engine , control , weapon ] ;
30574: LD_ADDR_VAR 0 6
30578: PUSH
30579: LD_VAR 0 2
30583: PUSH
30584: LD_VAR 0 3
30588: PUSH
30589: LD_VAR 0 4
30593: PUSH
30594: LD_VAR 0 5
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: ST_TO_ADDR
// end ;
30605: LD_VAR 0 6
30609: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30610: LD_INT 0
30612: PPUSH
// if not chassis or not engine then
30613: LD_VAR 0 1
30617: NOT
30618: PUSH
30619: LD_VAR 0 2
30623: NOT
30624: OR
30625: IFFALSE 30629
// exit ;
30627: GO 30825
// case engine of engine_solar :
30629: LD_VAR 0 2
30633: PUSH
30634: LD_INT 2
30636: DOUBLE
30637: EQUAL
30638: IFTRUE 30642
30640: GO 30680
30642: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30643: LD_ADDR_VAR 0 3
30647: PUSH
30648: LD_INT 11
30650: PUSH
30651: LD_INT 12
30653: PUSH
30654: LD_INT 13
30656: PUSH
30657: LD_INT 14
30659: PUSH
30660: LD_INT 1
30662: PUSH
30663: LD_INT 2
30665: PUSH
30666: LD_INT 3
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: ST_TO_ADDR
30678: GO 30809
30680: LD_INT 1
30682: DOUBLE
30683: EQUAL
30684: IFTRUE 30688
30686: GO 30750
30688: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30689: LD_ADDR_VAR 0 3
30693: PUSH
30694: LD_INT 11
30696: PUSH
30697: LD_INT 12
30699: PUSH
30700: LD_INT 13
30702: PUSH
30703: LD_INT 14
30705: PUSH
30706: LD_INT 1
30708: PUSH
30709: LD_INT 2
30711: PUSH
30712: LD_INT 3
30714: PUSH
30715: LD_INT 4
30717: PUSH
30718: LD_INT 5
30720: PUSH
30721: LD_INT 21
30723: PUSH
30724: LD_INT 23
30726: PUSH
30727: LD_INT 22
30729: PUSH
30730: LD_INT 24
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: ST_TO_ADDR
30748: GO 30809
30750: LD_INT 3
30752: DOUBLE
30753: EQUAL
30754: IFTRUE 30758
30756: GO 30808
30758: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30759: LD_ADDR_VAR 0 3
30763: PUSH
30764: LD_INT 13
30766: PUSH
30767: LD_INT 14
30769: PUSH
30770: LD_INT 2
30772: PUSH
30773: LD_INT 3
30775: PUSH
30776: LD_INT 4
30778: PUSH
30779: LD_INT 5
30781: PUSH
30782: LD_INT 21
30784: PUSH
30785: LD_INT 22
30787: PUSH
30788: LD_INT 23
30790: PUSH
30791: LD_INT 24
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: ST_TO_ADDR
30806: GO 30809
30808: POP
// result := ( chassis in result ) ;
30809: LD_ADDR_VAR 0 3
30813: PUSH
30814: LD_VAR 0 1
30818: PUSH
30819: LD_VAR 0 3
30823: IN
30824: ST_TO_ADDR
// end ;
30825: LD_VAR 0 3
30829: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30830: LD_INT 0
30832: PPUSH
// if not chassis or not weapon then
30833: LD_VAR 0 1
30837: NOT
30838: PUSH
30839: LD_VAR 0 2
30843: NOT
30844: OR
30845: IFFALSE 30849
// exit ;
30847: GO 31909
// case weapon of us_machine_gun :
30849: LD_VAR 0 2
30853: PUSH
30854: LD_INT 2
30856: DOUBLE
30857: EQUAL
30858: IFTRUE 30862
30860: GO 30892
30862: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30863: LD_ADDR_VAR 0 3
30867: PUSH
30868: LD_INT 1
30870: PUSH
30871: LD_INT 2
30873: PUSH
30874: LD_INT 3
30876: PUSH
30877: LD_INT 4
30879: PUSH
30880: LD_INT 5
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: ST_TO_ADDR
30890: GO 31893
30892: LD_INT 3
30894: DOUBLE
30895: EQUAL
30896: IFTRUE 30900
30898: GO 30930
30900: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30901: LD_ADDR_VAR 0 3
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: LD_INT 2
30911: PUSH
30912: LD_INT 3
30914: PUSH
30915: LD_INT 4
30917: PUSH
30918: LD_INT 5
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: ST_TO_ADDR
30928: GO 31893
30930: LD_INT 11
30932: DOUBLE
30933: EQUAL
30934: IFTRUE 30938
30936: GO 30968
30938: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30939: LD_ADDR_VAR 0 3
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: LD_INT 2
30949: PUSH
30950: LD_INT 3
30952: PUSH
30953: LD_INT 4
30955: PUSH
30956: LD_INT 5
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: ST_TO_ADDR
30966: GO 31893
30968: LD_INT 4
30970: DOUBLE
30971: EQUAL
30972: IFTRUE 30976
30974: GO 31002
30976: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30977: LD_ADDR_VAR 0 3
30981: PUSH
30982: LD_INT 2
30984: PUSH
30985: LD_INT 3
30987: PUSH
30988: LD_INT 4
30990: PUSH
30991: LD_INT 5
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: ST_TO_ADDR
31000: GO 31893
31002: LD_INT 5
31004: DOUBLE
31005: EQUAL
31006: IFTRUE 31010
31008: GO 31036
31010: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31011: LD_ADDR_VAR 0 3
31015: PUSH
31016: LD_INT 2
31018: PUSH
31019: LD_INT 3
31021: PUSH
31022: LD_INT 4
31024: PUSH
31025: LD_INT 5
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: ST_TO_ADDR
31034: GO 31893
31036: LD_INT 9
31038: DOUBLE
31039: EQUAL
31040: IFTRUE 31044
31042: GO 31070
31044: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31045: LD_ADDR_VAR 0 3
31049: PUSH
31050: LD_INT 2
31052: PUSH
31053: LD_INT 3
31055: PUSH
31056: LD_INT 4
31058: PUSH
31059: LD_INT 5
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: ST_TO_ADDR
31068: GO 31893
31070: LD_INT 7
31072: DOUBLE
31073: EQUAL
31074: IFTRUE 31078
31076: GO 31104
31078: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31079: LD_ADDR_VAR 0 3
31083: PUSH
31084: LD_INT 2
31086: PUSH
31087: LD_INT 3
31089: PUSH
31090: LD_INT 4
31092: PUSH
31093: LD_INT 5
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: ST_TO_ADDR
31102: GO 31893
31104: LD_INT 12
31106: DOUBLE
31107: EQUAL
31108: IFTRUE 31112
31110: GO 31138
31112: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31113: LD_ADDR_VAR 0 3
31117: PUSH
31118: LD_INT 2
31120: PUSH
31121: LD_INT 3
31123: PUSH
31124: LD_INT 4
31126: PUSH
31127: LD_INT 5
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: ST_TO_ADDR
31136: GO 31893
31138: LD_INT 13
31140: DOUBLE
31141: EQUAL
31142: IFTRUE 31146
31144: GO 31172
31146: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31147: LD_ADDR_VAR 0 3
31151: PUSH
31152: LD_INT 2
31154: PUSH
31155: LD_INT 3
31157: PUSH
31158: LD_INT 4
31160: PUSH
31161: LD_INT 5
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: ST_TO_ADDR
31170: GO 31893
31172: LD_INT 14
31174: DOUBLE
31175: EQUAL
31176: IFTRUE 31180
31178: GO 31198
31180: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31181: LD_ADDR_VAR 0 3
31185: PUSH
31186: LD_INT 4
31188: PUSH
31189: LD_INT 5
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: ST_TO_ADDR
31196: GO 31893
31198: LD_INT 6
31200: DOUBLE
31201: EQUAL
31202: IFTRUE 31206
31204: GO 31224
31206: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31207: LD_ADDR_VAR 0 3
31211: PUSH
31212: LD_INT 4
31214: PUSH
31215: LD_INT 5
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: ST_TO_ADDR
31222: GO 31893
31224: LD_INT 10
31226: DOUBLE
31227: EQUAL
31228: IFTRUE 31232
31230: GO 31250
31232: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31233: LD_ADDR_VAR 0 3
31237: PUSH
31238: LD_INT 4
31240: PUSH
31241: LD_INT 5
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: ST_TO_ADDR
31248: GO 31893
31250: LD_INT 22
31252: DOUBLE
31253: EQUAL
31254: IFTRUE 31258
31256: GO 31284
31258: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31259: LD_ADDR_VAR 0 3
31263: PUSH
31264: LD_INT 11
31266: PUSH
31267: LD_INT 12
31269: PUSH
31270: LD_INT 13
31272: PUSH
31273: LD_INT 14
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: ST_TO_ADDR
31282: GO 31893
31284: LD_INT 23
31286: DOUBLE
31287: EQUAL
31288: IFTRUE 31292
31290: GO 31318
31292: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31293: LD_ADDR_VAR 0 3
31297: PUSH
31298: LD_INT 11
31300: PUSH
31301: LD_INT 12
31303: PUSH
31304: LD_INT 13
31306: PUSH
31307: LD_INT 14
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: ST_TO_ADDR
31316: GO 31893
31318: LD_INT 24
31320: DOUBLE
31321: EQUAL
31322: IFTRUE 31326
31324: GO 31352
31326: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31327: LD_ADDR_VAR 0 3
31331: PUSH
31332: LD_INT 11
31334: PUSH
31335: LD_INT 12
31337: PUSH
31338: LD_INT 13
31340: PUSH
31341: LD_INT 14
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: ST_TO_ADDR
31350: GO 31893
31352: LD_INT 30
31354: DOUBLE
31355: EQUAL
31356: IFTRUE 31360
31358: GO 31386
31360: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31361: LD_ADDR_VAR 0 3
31365: PUSH
31366: LD_INT 11
31368: PUSH
31369: LD_INT 12
31371: PUSH
31372: LD_INT 13
31374: PUSH
31375: LD_INT 14
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: ST_TO_ADDR
31384: GO 31893
31386: LD_INT 25
31388: DOUBLE
31389: EQUAL
31390: IFTRUE 31394
31392: GO 31412
31394: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31395: LD_ADDR_VAR 0 3
31399: PUSH
31400: LD_INT 13
31402: PUSH
31403: LD_INT 14
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: ST_TO_ADDR
31410: GO 31893
31412: LD_INT 27
31414: DOUBLE
31415: EQUAL
31416: IFTRUE 31420
31418: GO 31438
31420: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31421: LD_ADDR_VAR 0 3
31425: PUSH
31426: LD_INT 13
31428: PUSH
31429: LD_INT 14
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: ST_TO_ADDR
31436: GO 31893
31438: LD_INT 92
31440: DOUBLE
31441: EQUAL
31442: IFTRUE 31446
31444: GO 31472
31446: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31447: LD_ADDR_VAR 0 3
31451: PUSH
31452: LD_INT 11
31454: PUSH
31455: LD_INT 12
31457: PUSH
31458: LD_INT 13
31460: PUSH
31461: LD_INT 14
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: ST_TO_ADDR
31470: GO 31893
31472: LD_INT 28
31474: DOUBLE
31475: EQUAL
31476: IFTRUE 31480
31478: GO 31498
31480: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31481: LD_ADDR_VAR 0 3
31485: PUSH
31486: LD_INT 13
31488: PUSH
31489: LD_INT 14
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: ST_TO_ADDR
31496: GO 31893
31498: LD_INT 29
31500: DOUBLE
31501: EQUAL
31502: IFTRUE 31506
31504: GO 31524
31506: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31507: LD_ADDR_VAR 0 3
31511: PUSH
31512: LD_INT 13
31514: PUSH
31515: LD_INT 14
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: ST_TO_ADDR
31522: GO 31893
31524: LD_INT 31
31526: DOUBLE
31527: EQUAL
31528: IFTRUE 31532
31530: GO 31550
31532: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31533: LD_ADDR_VAR 0 3
31537: PUSH
31538: LD_INT 13
31540: PUSH
31541: LD_INT 14
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: ST_TO_ADDR
31548: GO 31893
31550: LD_INT 26
31552: DOUBLE
31553: EQUAL
31554: IFTRUE 31558
31556: GO 31576
31558: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31559: LD_ADDR_VAR 0 3
31563: PUSH
31564: LD_INT 13
31566: PUSH
31567: LD_INT 14
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: ST_TO_ADDR
31574: GO 31893
31576: LD_INT 42
31578: DOUBLE
31579: EQUAL
31580: IFTRUE 31584
31582: GO 31610
31584: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31585: LD_ADDR_VAR 0 3
31589: PUSH
31590: LD_INT 21
31592: PUSH
31593: LD_INT 22
31595: PUSH
31596: LD_INT 23
31598: PUSH
31599: LD_INT 24
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: ST_TO_ADDR
31608: GO 31893
31610: LD_INT 43
31612: DOUBLE
31613: EQUAL
31614: IFTRUE 31618
31616: GO 31644
31618: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31619: LD_ADDR_VAR 0 3
31623: PUSH
31624: LD_INT 21
31626: PUSH
31627: LD_INT 22
31629: PUSH
31630: LD_INT 23
31632: PUSH
31633: LD_INT 24
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: ST_TO_ADDR
31642: GO 31893
31644: LD_INT 44
31646: DOUBLE
31647: EQUAL
31648: IFTRUE 31652
31650: GO 31678
31652: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31653: LD_ADDR_VAR 0 3
31657: PUSH
31658: LD_INT 21
31660: PUSH
31661: LD_INT 22
31663: PUSH
31664: LD_INT 23
31666: PUSH
31667: LD_INT 24
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: ST_TO_ADDR
31676: GO 31893
31678: LD_INT 45
31680: DOUBLE
31681: EQUAL
31682: IFTRUE 31686
31684: GO 31712
31686: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31687: LD_ADDR_VAR 0 3
31691: PUSH
31692: LD_INT 21
31694: PUSH
31695: LD_INT 22
31697: PUSH
31698: LD_INT 23
31700: PUSH
31701: LD_INT 24
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: ST_TO_ADDR
31710: GO 31893
31712: LD_INT 49
31714: DOUBLE
31715: EQUAL
31716: IFTRUE 31720
31718: GO 31746
31720: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31721: LD_ADDR_VAR 0 3
31725: PUSH
31726: LD_INT 21
31728: PUSH
31729: LD_INT 22
31731: PUSH
31732: LD_INT 23
31734: PUSH
31735: LD_INT 24
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: ST_TO_ADDR
31744: GO 31893
31746: LD_INT 51
31748: DOUBLE
31749: EQUAL
31750: IFTRUE 31754
31752: GO 31780
31754: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31755: LD_ADDR_VAR 0 3
31759: PUSH
31760: LD_INT 21
31762: PUSH
31763: LD_INT 22
31765: PUSH
31766: LD_INT 23
31768: PUSH
31769: LD_INT 24
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: ST_TO_ADDR
31778: GO 31893
31780: LD_INT 52
31782: DOUBLE
31783: EQUAL
31784: IFTRUE 31788
31786: GO 31814
31788: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31789: LD_ADDR_VAR 0 3
31793: PUSH
31794: LD_INT 21
31796: PUSH
31797: LD_INT 22
31799: PUSH
31800: LD_INT 23
31802: PUSH
31803: LD_INT 24
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: ST_TO_ADDR
31812: GO 31893
31814: LD_INT 53
31816: DOUBLE
31817: EQUAL
31818: IFTRUE 31822
31820: GO 31840
31822: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31823: LD_ADDR_VAR 0 3
31827: PUSH
31828: LD_INT 23
31830: PUSH
31831: LD_INT 24
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: ST_TO_ADDR
31838: GO 31893
31840: LD_INT 46
31842: DOUBLE
31843: EQUAL
31844: IFTRUE 31848
31846: GO 31866
31848: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31849: LD_ADDR_VAR 0 3
31853: PUSH
31854: LD_INT 23
31856: PUSH
31857: LD_INT 24
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: ST_TO_ADDR
31864: GO 31893
31866: LD_INT 47
31868: DOUBLE
31869: EQUAL
31870: IFTRUE 31874
31872: GO 31892
31874: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31875: LD_ADDR_VAR 0 3
31879: PUSH
31880: LD_INT 23
31882: PUSH
31883: LD_INT 24
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: ST_TO_ADDR
31890: GO 31893
31892: POP
// result := ( chassis in result ) ;
31893: LD_ADDR_VAR 0 3
31897: PUSH
31898: LD_VAR 0 1
31902: PUSH
31903: LD_VAR 0 3
31907: IN
31908: ST_TO_ADDR
// end ;
31909: LD_VAR 0 3
31913: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31914: LD_INT 0
31916: PPUSH
31917: PPUSH
31918: PPUSH
31919: PPUSH
31920: PPUSH
31921: PPUSH
31922: PPUSH
// result := array ;
31923: LD_ADDR_VAR 0 5
31927: PUSH
31928: LD_VAR 0 1
31932: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31933: LD_VAR 0 1
31937: NOT
31938: PUSH
31939: LD_VAR 0 2
31943: NOT
31944: OR
31945: PUSH
31946: LD_VAR 0 3
31950: NOT
31951: OR
31952: PUSH
31953: LD_VAR 0 2
31957: PUSH
31958: LD_VAR 0 1
31962: GREATER
31963: OR
31964: PUSH
31965: LD_VAR 0 3
31969: PUSH
31970: LD_VAR 0 1
31974: GREATER
31975: OR
31976: IFFALSE 31980
// exit ;
31978: GO 32276
// if direction then
31980: LD_VAR 0 4
31984: IFFALSE 32048
// begin d := 1 ;
31986: LD_ADDR_VAR 0 9
31990: PUSH
31991: LD_INT 1
31993: ST_TO_ADDR
// if i_from > i_to then
31994: LD_VAR 0 2
31998: PUSH
31999: LD_VAR 0 3
32003: GREATER
32004: IFFALSE 32030
// length := ( array - i_from ) + i_to else
32006: LD_ADDR_VAR 0 11
32010: PUSH
32011: LD_VAR 0 1
32015: PUSH
32016: LD_VAR 0 2
32020: MINUS
32021: PUSH
32022: LD_VAR 0 3
32026: PLUS
32027: ST_TO_ADDR
32028: GO 32046
// length := i_to - i_from ;
32030: LD_ADDR_VAR 0 11
32034: PUSH
32035: LD_VAR 0 3
32039: PUSH
32040: LD_VAR 0 2
32044: MINUS
32045: ST_TO_ADDR
// end else
32046: GO 32109
// begin d := - 1 ;
32048: LD_ADDR_VAR 0 9
32052: PUSH
32053: LD_INT 1
32055: NEG
32056: ST_TO_ADDR
// if i_from > i_to then
32057: LD_VAR 0 2
32061: PUSH
32062: LD_VAR 0 3
32066: GREATER
32067: IFFALSE 32087
// length := i_from - i_to else
32069: LD_ADDR_VAR 0 11
32073: PUSH
32074: LD_VAR 0 2
32078: PUSH
32079: LD_VAR 0 3
32083: MINUS
32084: ST_TO_ADDR
32085: GO 32109
// length := ( array - i_to ) + i_from ;
32087: LD_ADDR_VAR 0 11
32091: PUSH
32092: LD_VAR 0 1
32096: PUSH
32097: LD_VAR 0 3
32101: MINUS
32102: PUSH
32103: LD_VAR 0 2
32107: PLUS
32108: ST_TO_ADDR
// end ; if not length then
32109: LD_VAR 0 11
32113: NOT
32114: IFFALSE 32118
// exit ;
32116: GO 32276
// tmp := array ;
32118: LD_ADDR_VAR 0 10
32122: PUSH
32123: LD_VAR 0 1
32127: ST_TO_ADDR
// for i = 1 to length do
32128: LD_ADDR_VAR 0 6
32132: PUSH
32133: DOUBLE
32134: LD_INT 1
32136: DEC
32137: ST_TO_ADDR
32138: LD_VAR 0 11
32142: PUSH
32143: FOR_TO
32144: IFFALSE 32264
// begin for j = 1 to array do
32146: LD_ADDR_VAR 0 7
32150: PUSH
32151: DOUBLE
32152: LD_INT 1
32154: DEC
32155: ST_TO_ADDR
32156: LD_VAR 0 1
32160: PUSH
32161: FOR_TO
32162: IFFALSE 32250
// begin k := j + d ;
32164: LD_ADDR_VAR 0 8
32168: PUSH
32169: LD_VAR 0 7
32173: PUSH
32174: LD_VAR 0 9
32178: PLUS
32179: ST_TO_ADDR
// if k > array then
32180: LD_VAR 0 8
32184: PUSH
32185: LD_VAR 0 1
32189: GREATER
32190: IFFALSE 32200
// k := 1 ;
32192: LD_ADDR_VAR 0 8
32196: PUSH
32197: LD_INT 1
32199: ST_TO_ADDR
// if not k then
32200: LD_VAR 0 8
32204: NOT
32205: IFFALSE 32217
// k := array ;
32207: LD_ADDR_VAR 0 8
32211: PUSH
32212: LD_VAR 0 1
32216: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32217: LD_ADDR_VAR 0 10
32221: PUSH
32222: LD_VAR 0 10
32226: PPUSH
32227: LD_VAR 0 8
32231: PPUSH
32232: LD_VAR 0 1
32236: PUSH
32237: LD_VAR 0 7
32241: ARRAY
32242: PPUSH
32243: CALL_OW 1
32247: ST_TO_ADDR
// end ;
32248: GO 32161
32250: POP
32251: POP
// array := tmp ;
32252: LD_ADDR_VAR 0 1
32256: PUSH
32257: LD_VAR 0 10
32261: ST_TO_ADDR
// end ;
32262: GO 32143
32264: POP
32265: POP
// result := array ;
32266: LD_ADDR_VAR 0 5
32270: PUSH
32271: LD_VAR 0 1
32275: ST_TO_ADDR
// end ;
32276: LD_VAR 0 5
32280: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32281: LD_INT 0
32283: PPUSH
32284: PPUSH
// result := 0 ;
32285: LD_ADDR_VAR 0 3
32289: PUSH
32290: LD_INT 0
32292: ST_TO_ADDR
// if not array or not value in array then
32293: LD_VAR 0 1
32297: NOT
32298: PUSH
32299: LD_VAR 0 2
32303: PUSH
32304: LD_VAR 0 1
32308: IN
32309: NOT
32310: OR
32311: IFFALSE 32315
// exit ;
32313: GO 32369
// for i = 1 to array do
32315: LD_ADDR_VAR 0 4
32319: PUSH
32320: DOUBLE
32321: LD_INT 1
32323: DEC
32324: ST_TO_ADDR
32325: LD_VAR 0 1
32329: PUSH
32330: FOR_TO
32331: IFFALSE 32367
// if value = array [ i ] then
32333: LD_VAR 0 2
32337: PUSH
32338: LD_VAR 0 1
32342: PUSH
32343: LD_VAR 0 4
32347: ARRAY
32348: EQUAL
32349: IFFALSE 32365
// begin result := i ;
32351: LD_ADDR_VAR 0 3
32355: PUSH
32356: LD_VAR 0 4
32360: ST_TO_ADDR
// exit ;
32361: POP
32362: POP
32363: GO 32369
// end ;
32365: GO 32330
32367: POP
32368: POP
// end ;
32369: LD_VAR 0 3
32373: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32374: LD_INT 0
32376: PPUSH
// vc_chassis := chassis ;
32377: LD_ADDR_OWVAR 37
32381: PUSH
32382: LD_VAR 0 1
32386: ST_TO_ADDR
// vc_engine := engine ;
32387: LD_ADDR_OWVAR 39
32391: PUSH
32392: LD_VAR 0 2
32396: ST_TO_ADDR
// vc_control := control ;
32397: LD_ADDR_OWVAR 38
32401: PUSH
32402: LD_VAR 0 3
32406: ST_TO_ADDR
// vc_weapon := weapon ;
32407: LD_ADDR_OWVAR 40
32411: PUSH
32412: LD_VAR 0 4
32416: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32417: LD_ADDR_OWVAR 41
32421: PUSH
32422: LD_VAR 0 5
32426: ST_TO_ADDR
// end ;
32427: LD_VAR 0 6
32431: RET
// export function WantPlant ( unit ) ; var task ; begin
32432: LD_INT 0
32434: PPUSH
32435: PPUSH
// result := false ;
32436: LD_ADDR_VAR 0 2
32440: PUSH
32441: LD_INT 0
32443: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32444: LD_ADDR_VAR 0 3
32448: PUSH
32449: LD_VAR 0 1
32453: PPUSH
32454: CALL_OW 437
32458: ST_TO_ADDR
// if task then
32459: LD_VAR 0 3
32463: IFFALSE 32491
// if task [ 1 ] [ 1 ] = p then
32465: LD_VAR 0 3
32469: PUSH
32470: LD_INT 1
32472: ARRAY
32473: PUSH
32474: LD_INT 1
32476: ARRAY
32477: PUSH
32478: LD_STRING p
32480: EQUAL
32481: IFFALSE 32491
// result := true ;
32483: LD_ADDR_VAR 0 2
32487: PUSH
32488: LD_INT 1
32490: ST_TO_ADDR
// end ;
32491: LD_VAR 0 2
32495: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32496: LD_INT 0
32498: PPUSH
32499: PPUSH
32500: PPUSH
32501: PPUSH
// if pos < 1 then
32502: LD_VAR 0 2
32506: PUSH
32507: LD_INT 1
32509: LESS
32510: IFFALSE 32514
// exit ;
32512: GO 32817
// if pos = 1 then
32514: LD_VAR 0 2
32518: PUSH
32519: LD_INT 1
32521: EQUAL
32522: IFFALSE 32555
// result := Replace ( arr , pos [ 1 ] , value ) else
32524: LD_ADDR_VAR 0 4
32528: PUSH
32529: LD_VAR 0 1
32533: PPUSH
32534: LD_VAR 0 2
32538: PUSH
32539: LD_INT 1
32541: ARRAY
32542: PPUSH
32543: LD_VAR 0 3
32547: PPUSH
32548: CALL_OW 1
32552: ST_TO_ADDR
32553: GO 32817
// begin tmp := arr ;
32555: LD_ADDR_VAR 0 6
32559: PUSH
32560: LD_VAR 0 1
32564: ST_TO_ADDR
// s_arr := [ tmp ] ;
32565: LD_ADDR_VAR 0 7
32569: PUSH
32570: LD_VAR 0 6
32574: PUSH
32575: EMPTY
32576: LIST
32577: ST_TO_ADDR
// for i = 1 to pos - 1 do
32578: LD_ADDR_VAR 0 5
32582: PUSH
32583: DOUBLE
32584: LD_INT 1
32586: DEC
32587: ST_TO_ADDR
32588: LD_VAR 0 2
32592: PUSH
32593: LD_INT 1
32595: MINUS
32596: PUSH
32597: FOR_TO
32598: IFFALSE 32643
// begin tmp := tmp [ pos [ i ] ] ;
32600: LD_ADDR_VAR 0 6
32604: PUSH
32605: LD_VAR 0 6
32609: PUSH
32610: LD_VAR 0 2
32614: PUSH
32615: LD_VAR 0 5
32619: ARRAY
32620: ARRAY
32621: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32622: LD_ADDR_VAR 0 7
32626: PUSH
32627: LD_VAR 0 7
32631: PUSH
32632: LD_VAR 0 6
32636: PUSH
32637: EMPTY
32638: LIST
32639: ADD
32640: ST_TO_ADDR
// end ;
32641: GO 32597
32643: POP
32644: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32645: LD_ADDR_VAR 0 6
32649: PUSH
32650: LD_VAR 0 6
32654: PPUSH
32655: LD_VAR 0 2
32659: PUSH
32660: LD_VAR 0 2
32664: ARRAY
32665: PPUSH
32666: LD_VAR 0 3
32670: PPUSH
32671: CALL_OW 1
32675: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32676: LD_ADDR_VAR 0 7
32680: PUSH
32681: LD_VAR 0 7
32685: PPUSH
32686: LD_VAR 0 7
32690: PPUSH
32691: LD_VAR 0 6
32695: PPUSH
32696: CALL_OW 1
32700: ST_TO_ADDR
// for i = s_arr downto 2 do
32701: LD_ADDR_VAR 0 5
32705: PUSH
32706: DOUBLE
32707: LD_VAR 0 7
32711: INC
32712: ST_TO_ADDR
32713: LD_INT 2
32715: PUSH
32716: FOR_DOWNTO
32717: IFFALSE 32801
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32719: LD_ADDR_VAR 0 6
32723: PUSH
32724: LD_VAR 0 7
32728: PUSH
32729: LD_VAR 0 5
32733: PUSH
32734: LD_INT 1
32736: MINUS
32737: ARRAY
32738: PPUSH
32739: LD_VAR 0 2
32743: PUSH
32744: LD_VAR 0 5
32748: PUSH
32749: LD_INT 1
32751: MINUS
32752: ARRAY
32753: PPUSH
32754: LD_VAR 0 7
32758: PUSH
32759: LD_VAR 0 5
32763: ARRAY
32764: PPUSH
32765: CALL_OW 1
32769: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32770: LD_ADDR_VAR 0 7
32774: PUSH
32775: LD_VAR 0 7
32779: PPUSH
32780: LD_VAR 0 5
32784: PUSH
32785: LD_INT 1
32787: MINUS
32788: PPUSH
32789: LD_VAR 0 6
32793: PPUSH
32794: CALL_OW 1
32798: ST_TO_ADDR
// end ;
32799: GO 32716
32801: POP
32802: POP
// result := s_arr [ 1 ] ;
32803: LD_ADDR_VAR 0 4
32807: PUSH
32808: LD_VAR 0 7
32812: PUSH
32813: LD_INT 1
32815: ARRAY
32816: ST_TO_ADDR
// end ; end ;
32817: LD_VAR 0 4
32821: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32822: LD_INT 0
32824: PPUSH
32825: PPUSH
// if not list then
32826: LD_VAR 0 1
32830: NOT
32831: IFFALSE 32835
// exit ;
32833: GO 32926
// i := list [ pos1 ] ;
32835: LD_ADDR_VAR 0 5
32839: PUSH
32840: LD_VAR 0 1
32844: PUSH
32845: LD_VAR 0 2
32849: ARRAY
32850: ST_TO_ADDR
// if not i then
32851: LD_VAR 0 5
32855: NOT
32856: IFFALSE 32860
// exit ;
32858: GO 32926
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32860: LD_ADDR_VAR 0 1
32864: PUSH
32865: LD_VAR 0 1
32869: PPUSH
32870: LD_VAR 0 2
32874: PPUSH
32875: LD_VAR 0 1
32879: PUSH
32880: LD_VAR 0 3
32884: ARRAY
32885: PPUSH
32886: CALL_OW 1
32890: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32891: LD_ADDR_VAR 0 1
32895: PUSH
32896: LD_VAR 0 1
32900: PPUSH
32901: LD_VAR 0 3
32905: PPUSH
32906: LD_VAR 0 5
32910: PPUSH
32911: CALL_OW 1
32915: ST_TO_ADDR
// result := list ;
32916: LD_ADDR_VAR 0 4
32920: PUSH
32921: LD_VAR 0 1
32925: ST_TO_ADDR
// end ;
32926: LD_VAR 0 4
32930: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32931: LD_INT 0
32933: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32934: LD_ADDR_VAR 0 5
32938: PUSH
32939: LD_VAR 0 1
32943: PPUSH
32944: CALL_OW 250
32948: PPUSH
32949: LD_VAR 0 1
32953: PPUSH
32954: CALL_OW 251
32958: PPUSH
32959: LD_VAR 0 2
32963: PPUSH
32964: LD_VAR 0 3
32968: PPUSH
32969: LD_VAR 0 4
32973: PPUSH
32974: CALL 32984 0 5
32978: ST_TO_ADDR
// end ;
32979: LD_VAR 0 5
32983: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32984: LD_INT 0
32986: PPUSH
32987: PPUSH
32988: PPUSH
32989: PPUSH
// if not list then
32990: LD_VAR 0 3
32994: NOT
32995: IFFALSE 32999
// exit ;
32997: GO 33387
// result := [ ] ;
32999: LD_ADDR_VAR 0 6
33003: PUSH
33004: EMPTY
33005: ST_TO_ADDR
// for i in list do
33006: LD_ADDR_VAR 0 7
33010: PUSH
33011: LD_VAR 0 3
33015: PUSH
33016: FOR_IN
33017: IFFALSE 33219
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33019: LD_ADDR_VAR 0 9
33023: PUSH
33024: LD_VAR 0 7
33028: PPUSH
33029: LD_VAR 0 1
33033: PPUSH
33034: LD_VAR 0 2
33038: PPUSH
33039: CALL_OW 297
33043: ST_TO_ADDR
// if not result then
33044: LD_VAR 0 6
33048: NOT
33049: IFFALSE 33075
// result := [ [ i , tmp ] ] else
33051: LD_ADDR_VAR 0 6
33055: PUSH
33056: LD_VAR 0 7
33060: PUSH
33061: LD_VAR 0 9
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: EMPTY
33071: LIST
33072: ST_TO_ADDR
33073: GO 33217
// begin if result [ result ] [ 2 ] < tmp then
33075: LD_VAR 0 6
33079: PUSH
33080: LD_VAR 0 6
33084: ARRAY
33085: PUSH
33086: LD_INT 2
33088: ARRAY
33089: PUSH
33090: LD_VAR 0 9
33094: LESS
33095: IFFALSE 33137
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33097: LD_ADDR_VAR 0 6
33101: PUSH
33102: LD_VAR 0 6
33106: PPUSH
33107: LD_VAR 0 6
33111: PUSH
33112: LD_INT 1
33114: PLUS
33115: PPUSH
33116: LD_VAR 0 7
33120: PUSH
33121: LD_VAR 0 9
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PPUSH
33130: CALL_OW 2
33134: ST_TO_ADDR
33135: GO 33217
// for j = 1 to result do
33137: LD_ADDR_VAR 0 8
33141: PUSH
33142: DOUBLE
33143: LD_INT 1
33145: DEC
33146: ST_TO_ADDR
33147: LD_VAR 0 6
33151: PUSH
33152: FOR_TO
33153: IFFALSE 33215
// begin if tmp < result [ j ] [ 2 ] then
33155: LD_VAR 0 9
33159: PUSH
33160: LD_VAR 0 6
33164: PUSH
33165: LD_VAR 0 8
33169: ARRAY
33170: PUSH
33171: LD_INT 2
33173: ARRAY
33174: LESS
33175: IFFALSE 33213
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33177: LD_ADDR_VAR 0 6
33181: PUSH
33182: LD_VAR 0 6
33186: PPUSH
33187: LD_VAR 0 8
33191: PPUSH
33192: LD_VAR 0 7
33196: PUSH
33197: LD_VAR 0 9
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PPUSH
33206: CALL_OW 2
33210: ST_TO_ADDR
// break ;
33211: GO 33215
// end ; end ;
33213: GO 33152
33215: POP
33216: POP
// end ; end ;
33217: GO 33016
33219: POP
33220: POP
// if result and not asc then
33221: LD_VAR 0 6
33225: PUSH
33226: LD_VAR 0 4
33230: NOT
33231: AND
33232: IFFALSE 33307
// begin tmp := result ;
33234: LD_ADDR_VAR 0 9
33238: PUSH
33239: LD_VAR 0 6
33243: ST_TO_ADDR
// for i = tmp downto 1 do
33244: LD_ADDR_VAR 0 7
33248: PUSH
33249: DOUBLE
33250: LD_VAR 0 9
33254: INC
33255: ST_TO_ADDR
33256: LD_INT 1
33258: PUSH
33259: FOR_DOWNTO
33260: IFFALSE 33305
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33262: LD_ADDR_VAR 0 6
33266: PUSH
33267: LD_VAR 0 6
33271: PPUSH
33272: LD_VAR 0 9
33276: PUSH
33277: LD_VAR 0 7
33281: MINUS
33282: PUSH
33283: LD_INT 1
33285: PLUS
33286: PPUSH
33287: LD_VAR 0 9
33291: PUSH
33292: LD_VAR 0 7
33296: ARRAY
33297: PPUSH
33298: CALL_OW 1
33302: ST_TO_ADDR
33303: GO 33259
33305: POP
33306: POP
// end ; tmp := [ ] ;
33307: LD_ADDR_VAR 0 9
33311: PUSH
33312: EMPTY
33313: ST_TO_ADDR
// if mode then
33314: LD_VAR 0 5
33318: IFFALSE 33387
// begin for i = 1 to result do
33320: LD_ADDR_VAR 0 7
33324: PUSH
33325: DOUBLE
33326: LD_INT 1
33328: DEC
33329: ST_TO_ADDR
33330: LD_VAR 0 6
33334: PUSH
33335: FOR_TO
33336: IFFALSE 33375
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33338: LD_ADDR_VAR 0 9
33342: PUSH
33343: LD_VAR 0 9
33347: PPUSH
33348: LD_VAR 0 7
33352: PPUSH
33353: LD_VAR 0 6
33357: PUSH
33358: LD_VAR 0 7
33362: ARRAY
33363: PUSH
33364: LD_INT 1
33366: ARRAY
33367: PPUSH
33368: CALL_OW 1
33372: ST_TO_ADDR
33373: GO 33335
33375: POP
33376: POP
// result := tmp ;
33377: LD_ADDR_VAR 0 6
33381: PUSH
33382: LD_VAR 0 9
33386: ST_TO_ADDR
// end ; end ;
33387: LD_VAR 0 6
33391: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33392: LD_INT 0
33394: PPUSH
33395: PPUSH
33396: PPUSH
33397: PPUSH
33398: PPUSH
33399: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33400: LD_ADDR_VAR 0 5
33404: PUSH
33405: LD_INT 0
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: EMPTY
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: ST_TO_ADDR
// if not x or not y then
33422: LD_VAR 0 2
33426: NOT
33427: PUSH
33428: LD_VAR 0 3
33432: NOT
33433: OR
33434: IFFALSE 33438
// exit ;
33436: GO 35088
// if not range then
33438: LD_VAR 0 4
33442: NOT
33443: IFFALSE 33453
// range := 10 ;
33445: LD_ADDR_VAR 0 4
33449: PUSH
33450: LD_INT 10
33452: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33453: LD_ADDR_VAR 0 8
33457: PUSH
33458: LD_INT 81
33460: PUSH
33461: LD_VAR 0 1
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 92
33472: PUSH
33473: LD_VAR 0 2
33477: PUSH
33478: LD_VAR 0 3
33482: PUSH
33483: LD_VAR 0 4
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 3
33496: PUSH
33497: LD_INT 21
33499: PUSH
33500: LD_INT 3
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: LIST
33515: PPUSH
33516: CALL_OW 69
33520: ST_TO_ADDR
// if not tmp then
33521: LD_VAR 0 8
33525: NOT
33526: IFFALSE 33530
// exit ;
33528: GO 35088
// for i in tmp do
33530: LD_ADDR_VAR 0 6
33534: PUSH
33535: LD_VAR 0 8
33539: PUSH
33540: FOR_IN
33541: IFFALSE 35063
// begin points := [ 0 , 0 , 0 ] ;
33543: LD_ADDR_VAR 0 9
33547: PUSH
33548: LD_INT 0
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: LIST
33561: ST_TO_ADDR
// bpoints := 1 ;
33562: LD_ADDR_VAR 0 10
33566: PUSH
33567: LD_INT 1
33569: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33570: LD_VAR 0 6
33574: PPUSH
33575: CALL_OW 247
33579: PUSH
33580: LD_INT 1
33582: DOUBLE
33583: EQUAL
33584: IFTRUE 33588
33586: GO 34166
33588: POP
// begin if GetClass ( i ) = 1 then
33589: LD_VAR 0 6
33593: PPUSH
33594: CALL_OW 257
33598: PUSH
33599: LD_INT 1
33601: EQUAL
33602: IFFALSE 33623
// points := [ 10 , 5 , 3 ] ;
33604: LD_ADDR_VAR 0 9
33608: PUSH
33609: LD_INT 10
33611: PUSH
33612: LD_INT 5
33614: PUSH
33615: LD_INT 3
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: LIST
33622: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33623: LD_VAR 0 6
33627: PPUSH
33628: CALL_OW 257
33632: PUSH
33633: LD_INT 2
33635: PUSH
33636: LD_INT 3
33638: PUSH
33639: LD_INT 4
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: LIST
33646: IN
33647: IFFALSE 33668
// points := [ 3 , 2 , 1 ] ;
33649: LD_ADDR_VAR 0 9
33653: PUSH
33654: LD_INT 3
33656: PUSH
33657: LD_INT 2
33659: PUSH
33660: LD_INT 1
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: LIST
33667: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33668: LD_VAR 0 6
33672: PPUSH
33673: CALL_OW 257
33677: PUSH
33678: LD_INT 5
33680: EQUAL
33681: IFFALSE 33702
// points := [ 130 , 5 , 2 ] ;
33683: LD_ADDR_VAR 0 9
33687: PUSH
33688: LD_INT 130
33690: PUSH
33691: LD_INT 5
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: LIST
33701: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33702: LD_VAR 0 6
33706: PPUSH
33707: CALL_OW 257
33711: PUSH
33712: LD_INT 8
33714: EQUAL
33715: IFFALSE 33736
// points := [ 35 , 35 , 30 ] ;
33717: LD_ADDR_VAR 0 9
33721: PUSH
33722: LD_INT 35
33724: PUSH
33725: LD_INT 35
33727: PUSH
33728: LD_INT 30
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: LIST
33735: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33736: LD_VAR 0 6
33740: PPUSH
33741: CALL_OW 257
33745: PUSH
33746: LD_INT 9
33748: EQUAL
33749: IFFALSE 33770
// points := [ 20 , 55 , 40 ] ;
33751: LD_ADDR_VAR 0 9
33755: PUSH
33756: LD_INT 20
33758: PUSH
33759: LD_INT 55
33761: PUSH
33762: LD_INT 40
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: LIST
33769: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33770: LD_VAR 0 6
33774: PPUSH
33775: CALL_OW 257
33779: PUSH
33780: LD_INT 12
33782: PUSH
33783: LD_INT 16
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: IN
33790: IFFALSE 33811
// points := [ 5 , 3 , 2 ] ;
33792: LD_ADDR_VAR 0 9
33796: PUSH
33797: LD_INT 5
33799: PUSH
33800: LD_INT 3
33802: PUSH
33803: LD_INT 2
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: LIST
33810: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33811: LD_VAR 0 6
33815: PPUSH
33816: CALL_OW 257
33820: PUSH
33821: LD_INT 17
33823: EQUAL
33824: IFFALSE 33845
// points := [ 100 , 50 , 75 ] ;
33826: LD_ADDR_VAR 0 9
33830: PUSH
33831: LD_INT 100
33833: PUSH
33834: LD_INT 50
33836: PUSH
33837: LD_INT 75
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: LIST
33844: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33845: LD_VAR 0 6
33849: PPUSH
33850: CALL_OW 257
33854: PUSH
33855: LD_INT 15
33857: EQUAL
33858: IFFALSE 33879
// points := [ 10 , 5 , 3 ] ;
33860: LD_ADDR_VAR 0 9
33864: PUSH
33865: LD_INT 10
33867: PUSH
33868: LD_INT 5
33870: PUSH
33871: LD_INT 3
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: LIST
33878: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33879: LD_VAR 0 6
33883: PPUSH
33884: CALL_OW 257
33888: PUSH
33889: LD_INT 14
33891: EQUAL
33892: IFFALSE 33913
// points := [ 10 , 0 , 0 ] ;
33894: LD_ADDR_VAR 0 9
33898: PUSH
33899: LD_INT 10
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: LD_INT 0
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: LIST
33912: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33913: LD_VAR 0 6
33917: PPUSH
33918: CALL_OW 257
33922: PUSH
33923: LD_INT 11
33925: EQUAL
33926: IFFALSE 33947
// points := [ 30 , 10 , 5 ] ;
33928: LD_ADDR_VAR 0 9
33932: PUSH
33933: LD_INT 30
33935: PUSH
33936: LD_INT 10
33938: PUSH
33939: LD_INT 5
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: LIST
33946: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33947: LD_VAR 0 1
33951: PPUSH
33952: LD_INT 5
33954: PPUSH
33955: CALL_OW 321
33959: PUSH
33960: LD_INT 2
33962: EQUAL
33963: IFFALSE 33980
// bpoints := bpoints * 1.8 ;
33965: LD_ADDR_VAR 0 10
33969: PUSH
33970: LD_VAR 0 10
33974: PUSH
33975: LD_REAL  1.80000000000000E+0000
33978: MUL
33979: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33980: LD_VAR 0 6
33984: PPUSH
33985: CALL_OW 257
33989: PUSH
33990: LD_INT 1
33992: PUSH
33993: LD_INT 2
33995: PUSH
33996: LD_INT 3
33998: PUSH
33999: LD_INT 4
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: IN
34008: PUSH
34009: LD_VAR 0 1
34013: PPUSH
34014: LD_INT 51
34016: PPUSH
34017: CALL_OW 321
34021: PUSH
34022: LD_INT 2
34024: EQUAL
34025: AND
34026: IFFALSE 34043
// bpoints := bpoints * 1.2 ;
34028: LD_ADDR_VAR 0 10
34032: PUSH
34033: LD_VAR 0 10
34037: PUSH
34038: LD_REAL  1.20000000000000E+0000
34041: MUL
34042: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34043: LD_VAR 0 6
34047: PPUSH
34048: CALL_OW 257
34052: PUSH
34053: LD_INT 5
34055: PUSH
34056: LD_INT 7
34058: PUSH
34059: LD_INT 9
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: LIST
34066: IN
34067: PUSH
34068: LD_VAR 0 1
34072: PPUSH
34073: LD_INT 52
34075: PPUSH
34076: CALL_OW 321
34080: PUSH
34081: LD_INT 2
34083: EQUAL
34084: AND
34085: IFFALSE 34102
// bpoints := bpoints * 1.5 ;
34087: LD_ADDR_VAR 0 10
34091: PUSH
34092: LD_VAR 0 10
34096: PUSH
34097: LD_REAL  1.50000000000000E+0000
34100: MUL
34101: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34102: LD_VAR 0 1
34106: PPUSH
34107: LD_INT 66
34109: PPUSH
34110: CALL_OW 321
34114: PUSH
34115: LD_INT 2
34117: EQUAL
34118: IFFALSE 34135
// bpoints := bpoints * 1.1 ;
34120: LD_ADDR_VAR 0 10
34124: PUSH
34125: LD_VAR 0 10
34129: PUSH
34130: LD_REAL  1.10000000000000E+0000
34133: MUL
34134: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34135: LD_ADDR_VAR 0 10
34139: PUSH
34140: LD_VAR 0 10
34144: PUSH
34145: LD_VAR 0 6
34149: PPUSH
34150: LD_INT 1
34152: PPUSH
34153: CALL_OW 259
34157: PUSH
34158: LD_REAL  1.15000000000000E+0000
34161: MUL
34162: MUL
34163: ST_TO_ADDR
// end ; unit_vehicle :
34164: GO 34992
34166: LD_INT 2
34168: DOUBLE
34169: EQUAL
34170: IFTRUE 34174
34172: GO 34980
34174: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34175: LD_VAR 0 6
34179: PPUSH
34180: CALL_OW 264
34184: PUSH
34185: LD_INT 2
34187: PUSH
34188: LD_INT 42
34190: PUSH
34191: LD_INT 24
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: LIST
34198: IN
34199: IFFALSE 34220
// points := [ 25 , 5 , 3 ] ;
34201: LD_ADDR_VAR 0 9
34205: PUSH
34206: LD_INT 25
34208: PUSH
34209: LD_INT 5
34211: PUSH
34212: LD_INT 3
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34220: LD_VAR 0 6
34224: PPUSH
34225: CALL_OW 264
34229: PUSH
34230: LD_INT 4
34232: PUSH
34233: LD_INT 43
34235: PUSH
34236: LD_INT 25
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: LIST
34243: IN
34244: IFFALSE 34265
// points := [ 40 , 15 , 5 ] ;
34246: LD_ADDR_VAR 0 9
34250: PUSH
34251: LD_INT 40
34253: PUSH
34254: LD_INT 15
34256: PUSH
34257: LD_INT 5
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: LIST
34264: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34265: LD_VAR 0 6
34269: PPUSH
34270: CALL_OW 264
34274: PUSH
34275: LD_INT 3
34277: PUSH
34278: LD_INT 23
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: IN
34285: IFFALSE 34306
// points := [ 7 , 25 , 8 ] ;
34287: LD_ADDR_VAR 0 9
34291: PUSH
34292: LD_INT 7
34294: PUSH
34295: LD_INT 25
34297: PUSH
34298: LD_INT 8
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: LIST
34305: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34306: LD_VAR 0 6
34310: PPUSH
34311: CALL_OW 264
34315: PUSH
34316: LD_INT 5
34318: PUSH
34319: LD_INT 27
34321: PUSH
34322: LD_INT 44
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: LIST
34329: IN
34330: IFFALSE 34351
// points := [ 14 , 50 , 16 ] ;
34332: LD_ADDR_VAR 0 9
34336: PUSH
34337: LD_INT 14
34339: PUSH
34340: LD_INT 50
34342: PUSH
34343: LD_INT 16
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: LIST
34350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34351: LD_VAR 0 6
34355: PPUSH
34356: CALL_OW 264
34360: PUSH
34361: LD_INT 6
34363: PUSH
34364: LD_INT 46
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: IN
34371: IFFALSE 34392
// points := [ 32 , 120 , 70 ] ;
34373: LD_ADDR_VAR 0 9
34377: PUSH
34378: LD_INT 32
34380: PUSH
34381: LD_INT 120
34383: PUSH
34384: LD_INT 70
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: LIST
34391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34392: LD_VAR 0 6
34396: PPUSH
34397: CALL_OW 264
34401: PUSH
34402: LD_INT 7
34404: PUSH
34405: LD_INT 28
34407: PUSH
34408: LD_INT 45
34410: PUSH
34411: LD_INT 92
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: IN
34420: IFFALSE 34441
// points := [ 35 , 20 , 45 ] ;
34422: LD_ADDR_VAR 0 9
34426: PUSH
34427: LD_INT 35
34429: PUSH
34430: LD_INT 20
34432: PUSH
34433: LD_INT 45
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: LIST
34440: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34441: LD_VAR 0 6
34445: PPUSH
34446: CALL_OW 264
34450: PUSH
34451: LD_INT 47
34453: PUSH
34454: EMPTY
34455: LIST
34456: IN
34457: IFFALSE 34478
// points := [ 67 , 45 , 75 ] ;
34459: LD_ADDR_VAR 0 9
34463: PUSH
34464: LD_INT 67
34466: PUSH
34467: LD_INT 45
34469: PUSH
34470: LD_INT 75
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: LIST
34477: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34478: LD_VAR 0 6
34482: PPUSH
34483: CALL_OW 264
34487: PUSH
34488: LD_INT 26
34490: PUSH
34491: EMPTY
34492: LIST
34493: IN
34494: IFFALSE 34515
// points := [ 120 , 30 , 80 ] ;
34496: LD_ADDR_VAR 0 9
34500: PUSH
34501: LD_INT 120
34503: PUSH
34504: LD_INT 30
34506: PUSH
34507: LD_INT 80
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: LIST
34514: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34515: LD_VAR 0 6
34519: PPUSH
34520: CALL_OW 264
34524: PUSH
34525: LD_INT 22
34527: PUSH
34528: EMPTY
34529: LIST
34530: IN
34531: IFFALSE 34552
// points := [ 40 , 1 , 1 ] ;
34533: LD_ADDR_VAR 0 9
34537: PUSH
34538: LD_INT 40
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: LD_INT 1
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: LIST
34551: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34552: LD_VAR 0 6
34556: PPUSH
34557: CALL_OW 264
34561: PUSH
34562: LD_INT 29
34564: PUSH
34565: EMPTY
34566: LIST
34567: IN
34568: IFFALSE 34589
// points := [ 70 , 200 , 400 ] ;
34570: LD_ADDR_VAR 0 9
34574: PUSH
34575: LD_INT 70
34577: PUSH
34578: LD_INT 200
34580: PUSH
34581: LD_INT 400
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34589: LD_VAR 0 6
34593: PPUSH
34594: CALL_OW 264
34598: PUSH
34599: LD_INT 14
34601: PUSH
34602: LD_INT 53
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: IN
34609: IFFALSE 34630
// points := [ 40 , 10 , 20 ] ;
34611: LD_ADDR_VAR 0 9
34615: PUSH
34616: LD_INT 40
34618: PUSH
34619: LD_INT 10
34621: PUSH
34622: LD_INT 20
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: LIST
34629: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34630: LD_VAR 0 6
34634: PPUSH
34635: CALL_OW 264
34639: PUSH
34640: LD_INT 9
34642: PUSH
34643: EMPTY
34644: LIST
34645: IN
34646: IFFALSE 34667
// points := [ 5 , 70 , 20 ] ;
34648: LD_ADDR_VAR 0 9
34652: PUSH
34653: LD_INT 5
34655: PUSH
34656: LD_INT 70
34658: PUSH
34659: LD_INT 20
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: LIST
34666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34667: LD_VAR 0 6
34671: PPUSH
34672: CALL_OW 264
34676: PUSH
34677: LD_INT 10
34679: PUSH
34680: EMPTY
34681: LIST
34682: IN
34683: IFFALSE 34704
// points := [ 35 , 110 , 70 ] ;
34685: LD_ADDR_VAR 0 9
34689: PUSH
34690: LD_INT 35
34692: PUSH
34693: LD_INT 110
34695: PUSH
34696: LD_INT 70
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: LIST
34703: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34704: LD_VAR 0 6
34708: PPUSH
34709: CALL_OW 265
34713: PUSH
34714: LD_INT 25
34716: EQUAL
34717: IFFALSE 34738
// points := [ 80 , 65 , 100 ] ;
34719: LD_ADDR_VAR 0 9
34723: PUSH
34724: LD_INT 80
34726: PUSH
34727: LD_INT 65
34729: PUSH
34730: LD_INT 100
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: LIST
34737: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34738: LD_VAR 0 6
34742: PPUSH
34743: CALL_OW 263
34747: PUSH
34748: LD_INT 1
34750: EQUAL
34751: IFFALSE 34786
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34753: LD_ADDR_VAR 0 10
34757: PUSH
34758: LD_VAR 0 10
34762: PUSH
34763: LD_VAR 0 6
34767: PPUSH
34768: CALL_OW 311
34772: PPUSH
34773: LD_INT 3
34775: PPUSH
34776: CALL_OW 259
34780: PUSH
34781: LD_INT 4
34783: MUL
34784: MUL
34785: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34786: LD_VAR 0 6
34790: PPUSH
34791: CALL_OW 263
34795: PUSH
34796: LD_INT 2
34798: EQUAL
34799: IFFALSE 34850
// begin j := IsControledBy ( i ) ;
34801: LD_ADDR_VAR 0 7
34805: PUSH
34806: LD_VAR 0 6
34810: PPUSH
34811: CALL_OW 312
34815: ST_TO_ADDR
// if j then
34816: LD_VAR 0 7
34820: IFFALSE 34850
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34822: LD_ADDR_VAR 0 10
34826: PUSH
34827: LD_VAR 0 10
34831: PUSH
34832: LD_VAR 0 7
34836: PPUSH
34837: LD_INT 3
34839: PPUSH
34840: CALL_OW 259
34844: PUSH
34845: LD_INT 3
34847: MUL
34848: MUL
34849: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34850: LD_VAR 0 6
34854: PPUSH
34855: CALL_OW 264
34859: PUSH
34860: LD_INT 5
34862: PUSH
34863: LD_INT 6
34865: PUSH
34866: LD_INT 46
34868: PUSH
34869: LD_INT 44
34871: PUSH
34872: LD_INT 47
34874: PUSH
34875: LD_INT 45
34877: PUSH
34878: LD_INT 28
34880: PUSH
34881: LD_INT 7
34883: PUSH
34884: LD_INT 27
34886: PUSH
34887: LD_INT 29
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: IN
34902: PUSH
34903: LD_VAR 0 1
34907: PPUSH
34908: LD_INT 52
34910: PPUSH
34911: CALL_OW 321
34915: PUSH
34916: LD_INT 2
34918: EQUAL
34919: AND
34920: IFFALSE 34937
// bpoints := bpoints * 1.2 ;
34922: LD_ADDR_VAR 0 10
34926: PUSH
34927: LD_VAR 0 10
34931: PUSH
34932: LD_REAL  1.20000000000000E+0000
34935: MUL
34936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34937: LD_VAR 0 6
34941: PPUSH
34942: CALL_OW 264
34946: PUSH
34947: LD_INT 6
34949: PUSH
34950: LD_INT 46
34952: PUSH
34953: LD_INT 47
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: LIST
34960: IN
34961: IFFALSE 34978
// bpoints := bpoints * 1.2 ;
34963: LD_ADDR_VAR 0 10
34967: PUSH
34968: LD_VAR 0 10
34972: PUSH
34973: LD_REAL  1.20000000000000E+0000
34976: MUL
34977: ST_TO_ADDR
// end ; unit_building :
34978: GO 34992
34980: LD_INT 3
34982: DOUBLE
34983: EQUAL
34984: IFTRUE 34988
34986: GO 34991
34988: POP
// ; end ;
34989: GO 34992
34991: POP
// for j = 1 to 3 do
34992: LD_ADDR_VAR 0 7
34996: PUSH
34997: DOUBLE
34998: LD_INT 1
35000: DEC
35001: ST_TO_ADDR
35002: LD_INT 3
35004: PUSH
35005: FOR_TO
35006: IFFALSE 35059
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35008: LD_ADDR_VAR 0 5
35012: PUSH
35013: LD_VAR 0 5
35017: PPUSH
35018: LD_VAR 0 7
35022: PPUSH
35023: LD_VAR 0 5
35027: PUSH
35028: LD_VAR 0 7
35032: ARRAY
35033: PUSH
35034: LD_VAR 0 9
35038: PUSH
35039: LD_VAR 0 7
35043: ARRAY
35044: PUSH
35045: LD_VAR 0 10
35049: MUL
35050: PLUS
35051: PPUSH
35052: CALL_OW 1
35056: ST_TO_ADDR
35057: GO 35005
35059: POP
35060: POP
// end ;
35061: GO 33540
35063: POP
35064: POP
// result := Replace ( result , 4 , tmp ) ;
35065: LD_ADDR_VAR 0 5
35069: PUSH
35070: LD_VAR 0 5
35074: PPUSH
35075: LD_INT 4
35077: PPUSH
35078: LD_VAR 0 8
35082: PPUSH
35083: CALL_OW 1
35087: ST_TO_ADDR
// end ;
35088: LD_VAR 0 5
35092: RET
// export function DangerAtRange ( unit , range ) ; begin
35093: LD_INT 0
35095: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35096: LD_ADDR_VAR 0 3
35100: PUSH
35101: LD_VAR 0 1
35105: PPUSH
35106: CALL_OW 255
35110: PPUSH
35111: LD_VAR 0 1
35115: PPUSH
35116: CALL_OW 250
35120: PPUSH
35121: LD_VAR 0 1
35125: PPUSH
35126: CALL_OW 251
35130: PPUSH
35131: LD_VAR 0 2
35135: PPUSH
35136: CALL 33392 0 4
35140: ST_TO_ADDR
// end ;
35141: LD_VAR 0 3
35145: RET
// export function DangerInArea ( side , area ) ; begin
35146: LD_INT 0
35148: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35149: LD_ADDR_VAR 0 3
35153: PUSH
35154: LD_VAR 0 2
35158: PPUSH
35159: LD_INT 81
35161: PUSH
35162: LD_VAR 0 1
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PPUSH
35171: CALL_OW 70
35175: ST_TO_ADDR
// end ;
35176: LD_VAR 0 3
35180: RET
// export function IsExtension ( b ) ; begin
35181: LD_INT 0
35183: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35184: LD_ADDR_VAR 0 2
35188: PUSH
35189: LD_VAR 0 1
35193: PUSH
35194: LD_INT 23
35196: PUSH
35197: LD_INT 20
35199: PUSH
35200: LD_INT 22
35202: PUSH
35203: LD_INT 17
35205: PUSH
35206: LD_INT 24
35208: PUSH
35209: LD_INT 21
35211: PUSH
35212: LD_INT 19
35214: PUSH
35215: LD_INT 16
35217: PUSH
35218: LD_INT 25
35220: PUSH
35221: LD_INT 18
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: IN
35236: ST_TO_ADDR
// end ;
35237: LD_VAR 0 2
35241: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35242: LD_INT 0
35244: PPUSH
35245: PPUSH
35246: PPUSH
// result := [ ] ;
35247: LD_ADDR_VAR 0 4
35251: PUSH
35252: EMPTY
35253: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35254: LD_ADDR_VAR 0 5
35258: PUSH
35259: LD_VAR 0 2
35263: PPUSH
35264: LD_INT 21
35266: PUSH
35267: LD_INT 3
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PPUSH
35274: CALL_OW 70
35278: ST_TO_ADDR
// if not tmp then
35279: LD_VAR 0 5
35283: NOT
35284: IFFALSE 35288
// exit ;
35286: GO 35352
// if checkLink then
35288: LD_VAR 0 3
35292: IFFALSE 35342
// begin for i in tmp do
35294: LD_ADDR_VAR 0 6
35298: PUSH
35299: LD_VAR 0 5
35303: PUSH
35304: FOR_IN
35305: IFFALSE 35340
// if GetBase ( i ) <> base then
35307: LD_VAR 0 6
35311: PPUSH
35312: CALL_OW 274
35316: PUSH
35317: LD_VAR 0 1
35321: NONEQUAL
35322: IFFALSE 35338
// ComLinkToBase ( base , i ) ;
35324: LD_VAR 0 1
35328: PPUSH
35329: LD_VAR 0 6
35333: PPUSH
35334: CALL_OW 169
35338: GO 35304
35340: POP
35341: POP
// end ; result := tmp ;
35342: LD_ADDR_VAR 0 4
35346: PUSH
35347: LD_VAR 0 5
35351: ST_TO_ADDR
// end ;
35352: LD_VAR 0 4
35356: RET
// export function ComComplete ( units , b ) ; var i ; begin
35357: LD_INT 0
35359: PPUSH
35360: PPUSH
// if not units then
35361: LD_VAR 0 1
35365: NOT
35366: IFFALSE 35370
// exit ;
35368: GO 35460
// for i in units do
35370: LD_ADDR_VAR 0 4
35374: PUSH
35375: LD_VAR 0 1
35379: PUSH
35380: FOR_IN
35381: IFFALSE 35458
// if BuildingStatus ( b ) = bs_build then
35383: LD_VAR 0 2
35387: PPUSH
35388: CALL_OW 461
35392: PUSH
35393: LD_INT 1
35395: EQUAL
35396: IFFALSE 35456
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35398: LD_VAR 0 4
35402: PPUSH
35403: LD_STRING h
35405: PUSH
35406: LD_VAR 0 2
35410: PPUSH
35411: CALL_OW 250
35415: PUSH
35416: LD_VAR 0 2
35420: PPUSH
35421: CALL_OW 251
35425: PUSH
35426: LD_VAR 0 2
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: PUSH
35449: EMPTY
35450: LIST
35451: PPUSH
35452: CALL_OW 446
35456: GO 35380
35458: POP
35459: POP
// end ;
35460: LD_VAR 0 3
35464: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35465: LD_INT 0
35467: PPUSH
35468: PPUSH
35469: PPUSH
35470: PPUSH
35471: PPUSH
35472: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35473: LD_VAR 0 1
35477: NOT
35478: PUSH
35479: LD_VAR 0 1
35483: PPUSH
35484: CALL_OW 263
35488: PUSH
35489: LD_INT 2
35491: NONEQUAL
35492: OR
35493: IFFALSE 35497
// exit ;
35495: GO 35813
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35497: LD_ADDR_VAR 0 6
35501: PUSH
35502: LD_INT 22
35504: PUSH
35505: LD_VAR 0 1
35509: PPUSH
35510: CALL_OW 255
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 2
35521: PUSH
35522: LD_INT 30
35524: PUSH
35525: LD_INT 36
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 34
35534: PUSH
35535: LD_INT 31
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: LIST
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PPUSH
35551: CALL_OW 69
35555: ST_TO_ADDR
// if not tmp then
35556: LD_VAR 0 6
35560: NOT
35561: IFFALSE 35565
// exit ;
35563: GO 35813
// result := [ ] ;
35565: LD_ADDR_VAR 0 2
35569: PUSH
35570: EMPTY
35571: ST_TO_ADDR
// for i in tmp do
35572: LD_ADDR_VAR 0 3
35576: PUSH
35577: LD_VAR 0 6
35581: PUSH
35582: FOR_IN
35583: IFFALSE 35654
// begin t := UnitsInside ( i ) ;
35585: LD_ADDR_VAR 0 4
35589: PUSH
35590: LD_VAR 0 3
35594: PPUSH
35595: CALL_OW 313
35599: ST_TO_ADDR
// if t then
35600: LD_VAR 0 4
35604: IFFALSE 35652
// for j in t do
35606: LD_ADDR_VAR 0 7
35610: PUSH
35611: LD_VAR 0 4
35615: PUSH
35616: FOR_IN
35617: IFFALSE 35650
// result := Replace ( result , result + 1 , j ) ;
35619: LD_ADDR_VAR 0 2
35623: PUSH
35624: LD_VAR 0 2
35628: PPUSH
35629: LD_VAR 0 2
35633: PUSH
35634: LD_INT 1
35636: PLUS
35637: PPUSH
35638: LD_VAR 0 7
35642: PPUSH
35643: CALL_OW 1
35647: ST_TO_ADDR
35648: GO 35616
35650: POP
35651: POP
// end ;
35652: GO 35582
35654: POP
35655: POP
// if not result then
35656: LD_VAR 0 2
35660: NOT
35661: IFFALSE 35665
// exit ;
35663: GO 35813
// mech := result [ 1 ] ;
35665: LD_ADDR_VAR 0 5
35669: PUSH
35670: LD_VAR 0 2
35674: PUSH
35675: LD_INT 1
35677: ARRAY
35678: ST_TO_ADDR
// if result > 1 then
35679: LD_VAR 0 2
35683: PUSH
35684: LD_INT 1
35686: GREATER
35687: IFFALSE 35799
// begin for i = 2 to result do
35689: LD_ADDR_VAR 0 3
35693: PUSH
35694: DOUBLE
35695: LD_INT 2
35697: DEC
35698: ST_TO_ADDR
35699: LD_VAR 0 2
35703: PUSH
35704: FOR_TO
35705: IFFALSE 35797
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35707: LD_ADDR_VAR 0 4
35711: PUSH
35712: LD_VAR 0 2
35716: PUSH
35717: LD_VAR 0 3
35721: ARRAY
35722: PPUSH
35723: LD_INT 3
35725: PPUSH
35726: CALL_OW 259
35730: PUSH
35731: LD_VAR 0 2
35735: PUSH
35736: LD_VAR 0 3
35740: ARRAY
35741: PPUSH
35742: CALL_OW 432
35746: MINUS
35747: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35748: LD_VAR 0 4
35752: PUSH
35753: LD_VAR 0 5
35757: PPUSH
35758: LD_INT 3
35760: PPUSH
35761: CALL_OW 259
35765: PUSH
35766: LD_VAR 0 5
35770: PPUSH
35771: CALL_OW 432
35775: MINUS
35776: GREATEREQUAL
35777: IFFALSE 35795
// mech := result [ i ] ;
35779: LD_ADDR_VAR 0 5
35783: PUSH
35784: LD_VAR 0 2
35788: PUSH
35789: LD_VAR 0 3
35793: ARRAY
35794: ST_TO_ADDR
// end ;
35795: GO 35704
35797: POP
35798: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35799: LD_VAR 0 1
35803: PPUSH
35804: LD_VAR 0 5
35808: PPUSH
35809: CALL_OW 135
// end ;
35813: LD_VAR 0 2
35817: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35818: LD_INT 0
35820: PPUSH
35821: PPUSH
35822: PPUSH
35823: PPUSH
35824: PPUSH
35825: PPUSH
35826: PPUSH
35827: PPUSH
35828: PPUSH
35829: PPUSH
35830: PPUSH
35831: PPUSH
35832: PPUSH
// result := [ ] ;
35833: LD_ADDR_VAR 0 7
35837: PUSH
35838: EMPTY
35839: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35840: LD_VAR 0 1
35844: PPUSH
35845: CALL_OW 266
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: LD_INT 1
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: IN
35860: NOT
35861: IFFALSE 35865
// exit ;
35863: GO 37499
// if name then
35865: LD_VAR 0 3
35869: IFFALSE 35885
// SetBName ( base_dep , name ) ;
35871: LD_VAR 0 1
35875: PPUSH
35876: LD_VAR 0 3
35880: PPUSH
35881: CALL_OW 500
// base := GetBase ( base_dep ) ;
35885: LD_ADDR_VAR 0 15
35889: PUSH
35890: LD_VAR 0 1
35894: PPUSH
35895: CALL_OW 274
35899: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35900: LD_ADDR_VAR 0 16
35904: PUSH
35905: LD_VAR 0 1
35909: PPUSH
35910: CALL_OW 255
35914: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35915: LD_ADDR_VAR 0 17
35919: PUSH
35920: LD_VAR 0 1
35924: PPUSH
35925: CALL_OW 248
35929: ST_TO_ADDR
// if sources then
35930: LD_VAR 0 5
35934: IFFALSE 35981
// for i = 1 to 3 do
35936: LD_ADDR_VAR 0 8
35940: PUSH
35941: DOUBLE
35942: LD_INT 1
35944: DEC
35945: ST_TO_ADDR
35946: LD_INT 3
35948: PUSH
35949: FOR_TO
35950: IFFALSE 35979
// AddResourceType ( base , i , sources [ i ] ) ;
35952: LD_VAR 0 15
35956: PPUSH
35957: LD_VAR 0 8
35961: PPUSH
35962: LD_VAR 0 5
35966: PUSH
35967: LD_VAR 0 8
35971: ARRAY
35972: PPUSH
35973: CALL_OW 276
35977: GO 35949
35979: POP
35980: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35981: LD_ADDR_VAR 0 18
35985: PUSH
35986: LD_VAR 0 15
35990: PPUSH
35991: LD_VAR 0 2
35995: PPUSH
35996: LD_INT 1
35998: PPUSH
35999: CALL 35242 0 3
36003: ST_TO_ADDR
// InitHc ;
36004: CALL_OW 19
// InitUc ;
36008: CALL_OW 18
// uc_side := side ;
36012: LD_ADDR_OWVAR 20
36016: PUSH
36017: LD_VAR 0 16
36021: ST_TO_ADDR
// uc_nation := nation ;
36022: LD_ADDR_OWVAR 21
36026: PUSH
36027: LD_VAR 0 17
36031: ST_TO_ADDR
// if buildings then
36032: LD_VAR 0 18
36036: IFFALSE 37358
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36038: LD_ADDR_VAR 0 19
36042: PUSH
36043: LD_VAR 0 18
36047: PPUSH
36048: LD_INT 2
36050: PUSH
36051: LD_INT 30
36053: PUSH
36054: LD_INT 29
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 30
36063: PUSH
36064: LD_INT 30
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: LIST
36075: PPUSH
36076: CALL_OW 72
36080: ST_TO_ADDR
// if tmp then
36081: LD_VAR 0 19
36085: IFFALSE 36133
// for i in tmp do
36087: LD_ADDR_VAR 0 8
36091: PUSH
36092: LD_VAR 0 19
36096: PUSH
36097: FOR_IN
36098: IFFALSE 36131
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36100: LD_VAR 0 8
36104: PPUSH
36105: CALL_OW 250
36109: PPUSH
36110: LD_VAR 0 8
36114: PPUSH
36115: CALL_OW 251
36119: PPUSH
36120: LD_VAR 0 16
36124: PPUSH
36125: CALL_OW 441
36129: GO 36097
36131: POP
36132: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36133: LD_VAR 0 18
36137: PPUSH
36138: LD_INT 2
36140: PUSH
36141: LD_INT 30
36143: PUSH
36144: LD_INT 32
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 30
36153: PUSH
36154: LD_INT 33
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: LIST
36165: PPUSH
36166: CALL_OW 72
36170: IFFALSE 36258
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36172: LD_ADDR_VAR 0 8
36176: PUSH
36177: LD_VAR 0 18
36181: PPUSH
36182: LD_INT 2
36184: PUSH
36185: LD_INT 30
36187: PUSH
36188: LD_INT 32
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 30
36197: PUSH
36198: LD_INT 33
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: LIST
36209: PPUSH
36210: CALL_OW 72
36214: PUSH
36215: FOR_IN
36216: IFFALSE 36256
// begin if not GetBWeapon ( i ) then
36218: LD_VAR 0 8
36222: PPUSH
36223: CALL_OW 269
36227: NOT
36228: IFFALSE 36254
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36230: LD_VAR 0 8
36234: PPUSH
36235: LD_VAR 0 8
36239: PPUSH
36240: LD_VAR 0 2
36244: PPUSH
36245: CALL 37504 0 2
36249: PPUSH
36250: CALL_OW 431
// end ;
36254: GO 36215
36256: POP
36257: POP
// end ; for i = 1 to personel do
36258: LD_ADDR_VAR 0 8
36262: PUSH
36263: DOUBLE
36264: LD_INT 1
36266: DEC
36267: ST_TO_ADDR
36268: LD_VAR 0 6
36272: PUSH
36273: FOR_TO
36274: IFFALSE 37338
// begin if i > 4 then
36276: LD_VAR 0 8
36280: PUSH
36281: LD_INT 4
36283: GREATER
36284: IFFALSE 36288
// break ;
36286: GO 37338
// case i of 1 :
36288: LD_VAR 0 8
36292: PUSH
36293: LD_INT 1
36295: DOUBLE
36296: EQUAL
36297: IFTRUE 36301
36299: GO 36381
36301: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36302: LD_ADDR_VAR 0 12
36306: PUSH
36307: LD_VAR 0 18
36311: PPUSH
36312: LD_INT 22
36314: PUSH
36315: LD_VAR 0 16
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 58
36326: PUSH
36327: EMPTY
36328: LIST
36329: PUSH
36330: LD_INT 2
36332: PUSH
36333: LD_INT 30
36335: PUSH
36336: LD_INT 32
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 30
36345: PUSH
36346: LD_INT 4
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 30
36355: PUSH
36356: LD_INT 5
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: LIST
36373: PPUSH
36374: CALL_OW 72
36378: ST_TO_ADDR
36379: GO 36603
36381: LD_INT 2
36383: DOUBLE
36384: EQUAL
36385: IFTRUE 36389
36387: GO 36451
36389: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36390: LD_ADDR_VAR 0 12
36394: PUSH
36395: LD_VAR 0 18
36399: PPUSH
36400: LD_INT 22
36402: PUSH
36403: LD_VAR 0 16
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: LD_INT 30
36417: PUSH
36418: LD_INT 0
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 30
36427: PUSH
36428: LD_INT 1
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: LIST
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PPUSH
36444: CALL_OW 72
36448: ST_TO_ADDR
36449: GO 36603
36451: LD_INT 3
36453: DOUBLE
36454: EQUAL
36455: IFTRUE 36459
36457: GO 36521
36459: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36460: LD_ADDR_VAR 0 12
36464: PUSH
36465: LD_VAR 0 18
36469: PPUSH
36470: LD_INT 22
36472: PUSH
36473: LD_VAR 0 16
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 2
36484: PUSH
36485: LD_INT 30
36487: PUSH
36488: LD_INT 2
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 30
36497: PUSH
36498: LD_INT 3
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: LIST
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PPUSH
36514: CALL_OW 72
36518: ST_TO_ADDR
36519: GO 36603
36521: LD_INT 4
36523: DOUBLE
36524: EQUAL
36525: IFTRUE 36529
36527: GO 36602
36529: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36530: LD_ADDR_VAR 0 12
36534: PUSH
36535: LD_VAR 0 18
36539: PPUSH
36540: LD_INT 22
36542: PUSH
36543: LD_VAR 0 16
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 2
36554: PUSH
36555: LD_INT 30
36557: PUSH
36558: LD_INT 6
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 30
36567: PUSH
36568: LD_INT 7
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 30
36577: PUSH
36578: LD_INT 8
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PPUSH
36595: CALL_OW 72
36599: ST_TO_ADDR
36600: GO 36603
36602: POP
// if i = 1 then
36603: LD_VAR 0 8
36607: PUSH
36608: LD_INT 1
36610: EQUAL
36611: IFFALSE 36722
// begin tmp := [ ] ;
36613: LD_ADDR_VAR 0 19
36617: PUSH
36618: EMPTY
36619: ST_TO_ADDR
// for j in f do
36620: LD_ADDR_VAR 0 9
36624: PUSH
36625: LD_VAR 0 12
36629: PUSH
36630: FOR_IN
36631: IFFALSE 36704
// if GetBType ( j ) = b_bunker then
36633: LD_VAR 0 9
36637: PPUSH
36638: CALL_OW 266
36642: PUSH
36643: LD_INT 32
36645: EQUAL
36646: IFFALSE 36673
// tmp := Insert ( tmp , 1 , j ) else
36648: LD_ADDR_VAR 0 19
36652: PUSH
36653: LD_VAR 0 19
36657: PPUSH
36658: LD_INT 1
36660: PPUSH
36661: LD_VAR 0 9
36665: PPUSH
36666: CALL_OW 2
36670: ST_TO_ADDR
36671: GO 36702
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36673: LD_ADDR_VAR 0 19
36677: PUSH
36678: LD_VAR 0 19
36682: PPUSH
36683: LD_VAR 0 19
36687: PUSH
36688: LD_INT 1
36690: PLUS
36691: PPUSH
36692: LD_VAR 0 9
36696: PPUSH
36697: CALL_OW 2
36701: ST_TO_ADDR
36702: GO 36630
36704: POP
36705: POP
// if tmp then
36706: LD_VAR 0 19
36710: IFFALSE 36722
// f := tmp ;
36712: LD_ADDR_VAR 0 12
36716: PUSH
36717: LD_VAR 0 19
36721: ST_TO_ADDR
// end ; x := personel [ i ] ;
36722: LD_ADDR_VAR 0 13
36726: PUSH
36727: LD_VAR 0 6
36731: PUSH
36732: LD_VAR 0 8
36736: ARRAY
36737: ST_TO_ADDR
// if x = - 1 then
36738: LD_VAR 0 13
36742: PUSH
36743: LD_INT 1
36745: NEG
36746: EQUAL
36747: IFFALSE 36956
// begin for j in f do
36749: LD_ADDR_VAR 0 9
36753: PUSH
36754: LD_VAR 0 12
36758: PUSH
36759: FOR_IN
36760: IFFALSE 36952
// repeat InitHc ;
36762: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36766: LD_VAR 0 9
36770: PPUSH
36771: CALL_OW 266
36775: PUSH
36776: LD_INT 5
36778: EQUAL
36779: IFFALSE 36849
// begin if UnitsInside ( j ) < 3 then
36781: LD_VAR 0 9
36785: PPUSH
36786: CALL_OW 313
36790: PUSH
36791: LD_INT 3
36793: LESS
36794: IFFALSE 36830
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36796: LD_INT 0
36798: PPUSH
36799: LD_INT 5
36801: PUSH
36802: LD_INT 8
36804: PUSH
36805: LD_INT 9
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: LIST
36812: PUSH
36813: LD_VAR 0 17
36817: ARRAY
36818: PPUSH
36819: LD_VAR 0 4
36823: PPUSH
36824: CALL_OW 380
36828: GO 36847
// PrepareHuman ( false , i , skill ) ;
36830: LD_INT 0
36832: PPUSH
36833: LD_VAR 0 8
36837: PPUSH
36838: LD_VAR 0 4
36842: PPUSH
36843: CALL_OW 380
// end else
36847: GO 36866
// PrepareHuman ( false , i , skill ) ;
36849: LD_INT 0
36851: PPUSH
36852: LD_VAR 0 8
36856: PPUSH
36857: LD_VAR 0 4
36861: PPUSH
36862: CALL_OW 380
// un := CreateHuman ;
36866: LD_ADDR_VAR 0 14
36870: PUSH
36871: CALL_OW 44
36875: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36876: LD_ADDR_VAR 0 7
36880: PUSH
36881: LD_VAR 0 7
36885: PPUSH
36886: LD_INT 1
36888: PPUSH
36889: LD_VAR 0 14
36893: PPUSH
36894: CALL_OW 2
36898: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36899: LD_VAR 0 14
36903: PPUSH
36904: LD_VAR 0 9
36908: PPUSH
36909: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36913: LD_VAR 0 9
36917: PPUSH
36918: CALL_OW 313
36922: PUSH
36923: LD_INT 6
36925: EQUAL
36926: PUSH
36927: LD_VAR 0 9
36931: PPUSH
36932: CALL_OW 266
36936: PUSH
36937: LD_INT 32
36939: PUSH
36940: LD_INT 31
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: IN
36947: OR
36948: IFFALSE 36762
36950: GO 36759
36952: POP
36953: POP
// end else
36954: GO 37336
// for j = 1 to x do
36956: LD_ADDR_VAR 0 9
36960: PUSH
36961: DOUBLE
36962: LD_INT 1
36964: DEC
36965: ST_TO_ADDR
36966: LD_VAR 0 13
36970: PUSH
36971: FOR_TO
36972: IFFALSE 37334
// begin InitHc ;
36974: CALL_OW 19
// if not f then
36978: LD_VAR 0 12
36982: NOT
36983: IFFALSE 37072
// begin PrepareHuman ( false , i , skill ) ;
36985: LD_INT 0
36987: PPUSH
36988: LD_VAR 0 8
36992: PPUSH
36993: LD_VAR 0 4
36997: PPUSH
36998: CALL_OW 380
// un := CreateHuman ;
37002: LD_ADDR_VAR 0 14
37006: PUSH
37007: CALL_OW 44
37011: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37012: LD_ADDR_VAR 0 7
37016: PUSH
37017: LD_VAR 0 7
37021: PPUSH
37022: LD_INT 1
37024: PPUSH
37025: LD_VAR 0 14
37029: PPUSH
37030: CALL_OW 2
37034: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37035: LD_VAR 0 14
37039: PPUSH
37040: LD_VAR 0 1
37044: PPUSH
37045: CALL_OW 250
37049: PPUSH
37050: LD_VAR 0 1
37054: PPUSH
37055: CALL_OW 251
37059: PPUSH
37060: LD_INT 10
37062: PPUSH
37063: LD_INT 0
37065: PPUSH
37066: CALL_OW 50
// continue ;
37070: GO 36971
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37072: LD_VAR 0 12
37076: PUSH
37077: LD_INT 1
37079: ARRAY
37080: PPUSH
37081: CALL_OW 313
37085: PUSH
37086: LD_VAR 0 12
37090: PUSH
37091: LD_INT 1
37093: ARRAY
37094: PPUSH
37095: CALL_OW 266
37099: PUSH
37100: LD_INT 32
37102: PUSH
37103: LD_INT 31
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: IN
37110: AND
37111: PUSH
37112: LD_VAR 0 12
37116: PUSH
37117: LD_INT 1
37119: ARRAY
37120: PPUSH
37121: CALL_OW 313
37125: PUSH
37126: LD_INT 6
37128: EQUAL
37129: OR
37130: IFFALSE 37150
// f := Delete ( f , 1 ) ;
37132: LD_ADDR_VAR 0 12
37136: PUSH
37137: LD_VAR 0 12
37141: PPUSH
37142: LD_INT 1
37144: PPUSH
37145: CALL_OW 3
37149: ST_TO_ADDR
// if not f then
37150: LD_VAR 0 12
37154: NOT
37155: IFFALSE 37173
// begin x := x + 2 ;
37157: LD_ADDR_VAR 0 13
37161: PUSH
37162: LD_VAR 0 13
37166: PUSH
37167: LD_INT 2
37169: PLUS
37170: ST_TO_ADDR
// continue ;
37171: GO 36971
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37173: LD_VAR 0 12
37177: PUSH
37178: LD_INT 1
37180: ARRAY
37181: PPUSH
37182: CALL_OW 266
37186: PUSH
37187: LD_INT 5
37189: EQUAL
37190: IFFALSE 37264
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37192: LD_VAR 0 12
37196: PUSH
37197: LD_INT 1
37199: ARRAY
37200: PPUSH
37201: CALL_OW 313
37205: PUSH
37206: LD_INT 3
37208: LESS
37209: IFFALSE 37245
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37211: LD_INT 0
37213: PPUSH
37214: LD_INT 5
37216: PUSH
37217: LD_INT 8
37219: PUSH
37220: LD_INT 9
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: LIST
37227: PUSH
37228: LD_VAR 0 17
37232: ARRAY
37233: PPUSH
37234: LD_VAR 0 4
37238: PPUSH
37239: CALL_OW 380
37243: GO 37262
// PrepareHuman ( false , i , skill ) ;
37245: LD_INT 0
37247: PPUSH
37248: LD_VAR 0 8
37252: PPUSH
37253: LD_VAR 0 4
37257: PPUSH
37258: CALL_OW 380
// end else
37262: GO 37281
// PrepareHuman ( false , i , skill ) ;
37264: LD_INT 0
37266: PPUSH
37267: LD_VAR 0 8
37271: PPUSH
37272: LD_VAR 0 4
37276: PPUSH
37277: CALL_OW 380
// un := CreateHuman ;
37281: LD_ADDR_VAR 0 14
37285: PUSH
37286: CALL_OW 44
37290: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37291: LD_ADDR_VAR 0 7
37295: PUSH
37296: LD_VAR 0 7
37300: PPUSH
37301: LD_INT 1
37303: PPUSH
37304: LD_VAR 0 14
37308: PPUSH
37309: CALL_OW 2
37313: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37314: LD_VAR 0 14
37318: PPUSH
37319: LD_VAR 0 12
37323: PUSH
37324: LD_INT 1
37326: ARRAY
37327: PPUSH
37328: CALL_OW 52
// end ;
37332: GO 36971
37334: POP
37335: POP
// end ;
37336: GO 36273
37338: POP
37339: POP
// result := result ^ buildings ;
37340: LD_ADDR_VAR 0 7
37344: PUSH
37345: LD_VAR 0 7
37349: PUSH
37350: LD_VAR 0 18
37354: ADD
37355: ST_TO_ADDR
// end else
37356: GO 37499
// begin for i = 1 to personel do
37358: LD_ADDR_VAR 0 8
37362: PUSH
37363: DOUBLE
37364: LD_INT 1
37366: DEC
37367: ST_TO_ADDR
37368: LD_VAR 0 6
37372: PUSH
37373: FOR_TO
37374: IFFALSE 37497
// begin if i > 4 then
37376: LD_VAR 0 8
37380: PUSH
37381: LD_INT 4
37383: GREATER
37384: IFFALSE 37388
// break ;
37386: GO 37497
// x := personel [ i ] ;
37388: LD_ADDR_VAR 0 13
37392: PUSH
37393: LD_VAR 0 6
37397: PUSH
37398: LD_VAR 0 8
37402: ARRAY
37403: ST_TO_ADDR
// if x = - 1 then
37404: LD_VAR 0 13
37408: PUSH
37409: LD_INT 1
37411: NEG
37412: EQUAL
37413: IFFALSE 37417
// continue ;
37415: GO 37373
// PrepareHuman ( false , i , skill ) ;
37417: LD_INT 0
37419: PPUSH
37420: LD_VAR 0 8
37424: PPUSH
37425: LD_VAR 0 4
37429: PPUSH
37430: CALL_OW 380
// un := CreateHuman ;
37434: LD_ADDR_VAR 0 14
37438: PUSH
37439: CALL_OW 44
37443: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37444: LD_VAR 0 14
37448: PPUSH
37449: LD_VAR 0 1
37453: PPUSH
37454: CALL_OW 250
37458: PPUSH
37459: LD_VAR 0 1
37463: PPUSH
37464: CALL_OW 251
37468: PPUSH
37469: LD_INT 10
37471: PPUSH
37472: LD_INT 0
37474: PPUSH
37475: CALL_OW 50
// result := result ^ un ;
37479: LD_ADDR_VAR 0 7
37483: PUSH
37484: LD_VAR 0 7
37488: PUSH
37489: LD_VAR 0 14
37493: ADD
37494: ST_TO_ADDR
// end ;
37495: GO 37373
37497: POP
37498: POP
// end ; end ;
37499: LD_VAR 0 7
37503: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37504: LD_INT 0
37506: PPUSH
37507: PPUSH
37508: PPUSH
37509: PPUSH
37510: PPUSH
37511: PPUSH
37512: PPUSH
37513: PPUSH
37514: PPUSH
37515: PPUSH
37516: PPUSH
37517: PPUSH
37518: PPUSH
37519: PPUSH
37520: PPUSH
37521: PPUSH
// result := false ;
37522: LD_ADDR_VAR 0 3
37526: PUSH
37527: LD_INT 0
37529: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37530: LD_VAR 0 1
37534: NOT
37535: PUSH
37536: LD_VAR 0 1
37540: PPUSH
37541: CALL_OW 266
37545: PUSH
37546: LD_INT 32
37548: PUSH
37549: LD_INT 33
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: IN
37556: NOT
37557: OR
37558: IFFALSE 37562
// exit ;
37560: GO 38671
// nat := GetNation ( tower ) ;
37562: LD_ADDR_VAR 0 12
37566: PUSH
37567: LD_VAR 0 1
37571: PPUSH
37572: CALL_OW 248
37576: ST_TO_ADDR
// side := GetSide ( tower ) ;
37577: LD_ADDR_VAR 0 16
37581: PUSH
37582: LD_VAR 0 1
37586: PPUSH
37587: CALL_OW 255
37591: ST_TO_ADDR
// x := GetX ( tower ) ;
37592: LD_ADDR_VAR 0 10
37596: PUSH
37597: LD_VAR 0 1
37601: PPUSH
37602: CALL_OW 250
37606: ST_TO_ADDR
// y := GetY ( tower ) ;
37607: LD_ADDR_VAR 0 11
37611: PUSH
37612: LD_VAR 0 1
37616: PPUSH
37617: CALL_OW 251
37621: ST_TO_ADDR
// if not x or not y then
37622: LD_VAR 0 10
37626: NOT
37627: PUSH
37628: LD_VAR 0 11
37632: NOT
37633: OR
37634: IFFALSE 37638
// exit ;
37636: GO 38671
// weapon := 0 ;
37638: LD_ADDR_VAR 0 18
37642: PUSH
37643: LD_INT 0
37645: ST_TO_ADDR
// fac_list := [ ] ;
37646: LD_ADDR_VAR 0 17
37650: PUSH
37651: EMPTY
37652: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37653: LD_ADDR_VAR 0 6
37657: PUSH
37658: LD_VAR 0 1
37662: PPUSH
37663: CALL_OW 274
37667: PPUSH
37668: LD_VAR 0 2
37672: PPUSH
37673: LD_INT 0
37675: PPUSH
37676: CALL 35242 0 3
37680: PPUSH
37681: LD_INT 30
37683: PUSH
37684: LD_INT 3
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PPUSH
37691: CALL_OW 72
37695: ST_TO_ADDR
// if not factories then
37696: LD_VAR 0 6
37700: NOT
37701: IFFALSE 37705
// exit ;
37703: GO 38671
// for i in factories do
37705: LD_ADDR_VAR 0 8
37709: PUSH
37710: LD_VAR 0 6
37714: PUSH
37715: FOR_IN
37716: IFFALSE 37741
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37718: LD_ADDR_VAR 0 17
37722: PUSH
37723: LD_VAR 0 17
37727: PUSH
37728: LD_VAR 0 8
37732: PPUSH
37733: CALL_OW 478
37737: UNION
37738: ST_TO_ADDR
37739: GO 37715
37741: POP
37742: POP
// if not fac_list then
37743: LD_VAR 0 17
37747: NOT
37748: IFFALSE 37752
// exit ;
37750: GO 38671
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37752: LD_ADDR_VAR 0 5
37756: PUSH
37757: LD_INT 4
37759: PUSH
37760: LD_INT 5
37762: PUSH
37763: LD_INT 9
37765: PUSH
37766: LD_INT 10
37768: PUSH
37769: LD_INT 6
37771: PUSH
37772: LD_INT 7
37774: PUSH
37775: LD_INT 11
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 27
37789: PUSH
37790: LD_INT 28
37792: PUSH
37793: LD_INT 26
37795: PUSH
37796: LD_INT 30
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 43
37807: PUSH
37808: LD_INT 44
37810: PUSH
37811: LD_INT 46
37813: PUSH
37814: LD_INT 45
37816: PUSH
37817: LD_INT 47
37819: PUSH
37820: LD_INT 49
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: LIST
37835: PUSH
37836: LD_VAR 0 12
37840: ARRAY
37841: ST_TO_ADDR
// list := list isect fac_list ;
37842: LD_ADDR_VAR 0 5
37846: PUSH
37847: LD_VAR 0 5
37851: PUSH
37852: LD_VAR 0 17
37856: ISECT
37857: ST_TO_ADDR
// if not list then
37858: LD_VAR 0 5
37862: NOT
37863: IFFALSE 37867
// exit ;
37865: GO 38671
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37867: LD_VAR 0 12
37871: PUSH
37872: LD_INT 3
37874: EQUAL
37875: PUSH
37876: LD_INT 49
37878: PUSH
37879: LD_VAR 0 5
37883: IN
37884: AND
37885: PUSH
37886: LD_INT 31
37888: PPUSH
37889: LD_VAR 0 16
37893: PPUSH
37894: CALL_OW 321
37898: PUSH
37899: LD_INT 2
37901: EQUAL
37902: AND
37903: IFFALSE 37963
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37905: LD_INT 22
37907: PUSH
37908: LD_VAR 0 16
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 35
37919: PUSH
37920: LD_INT 49
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 91
37929: PUSH
37930: LD_VAR 0 1
37934: PUSH
37935: LD_INT 10
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: LIST
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: LIST
37947: PPUSH
37948: CALL_OW 69
37952: NOT
37953: IFFALSE 37963
// weapon := ru_time_lapser ;
37955: LD_ADDR_VAR 0 18
37959: PUSH
37960: LD_INT 49
37962: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37963: LD_VAR 0 12
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: LD_INT 2
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: IN
37978: PUSH
37979: LD_INT 11
37981: PUSH
37982: LD_VAR 0 5
37986: IN
37987: PUSH
37988: LD_INT 30
37990: PUSH
37991: LD_VAR 0 5
37995: IN
37996: OR
37997: AND
37998: PUSH
37999: LD_INT 6
38001: PPUSH
38002: LD_VAR 0 16
38006: PPUSH
38007: CALL_OW 321
38011: PUSH
38012: LD_INT 2
38014: EQUAL
38015: AND
38016: IFFALSE 38181
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38018: LD_INT 22
38020: PUSH
38021: LD_VAR 0 16
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 2
38032: PUSH
38033: LD_INT 35
38035: PUSH
38036: LD_INT 11
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 35
38045: PUSH
38046: LD_INT 30
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 91
38060: PUSH
38061: LD_VAR 0 1
38065: PUSH
38066: LD_INT 18
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: LIST
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: LIST
38078: PPUSH
38079: CALL_OW 69
38083: NOT
38084: PUSH
38085: LD_INT 22
38087: PUSH
38088: LD_VAR 0 16
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 2
38099: PUSH
38100: LD_INT 30
38102: PUSH
38103: LD_INT 32
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 30
38112: PUSH
38113: LD_INT 33
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 91
38127: PUSH
38128: LD_VAR 0 1
38132: PUSH
38133: LD_INT 12
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: LIST
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: LIST
38145: PUSH
38146: EMPTY
38147: LIST
38148: PPUSH
38149: CALL_OW 69
38153: PUSH
38154: LD_INT 2
38156: GREATER
38157: AND
38158: IFFALSE 38181
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38160: LD_ADDR_VAR 0 18
38164: PUSH
38165: LD_INT 11
38167: PUSH
38168: LD_INT 30
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_VAR 0 12
38179: ARRAY
38180: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38181: LD_VAR 0 18
38185: NOT
38186: PUSH
38187: LD_INT 40
38189: PPUSH
38190: LD_VAR 0 16
38194: PPUSH
38195: CALL_OW 321
38199: PUSH
38200: LD_INT 2
38202: EQUAL
38203: AND
38204: PUSH
38205: LD_INT 7
38207: PUSH
38208: LD_VAR 0 5
38212: IN
38213: PUSH
38214: LD_INT 28
38216: PUSH
38217: LD_VAR 0 5
38221: IN
38222: OR
38223: PUSH
38224: LD_INT 45
38226: PUSH
38227: LD_VAR 0 5
38231: IN
38232: OR
38233: AND
38234: IFFALSE 38488
// begin hex := GetHexInfo ( x , y ) ;
38236: LD_ADDR_VAR 0 4
38240: PUSH
38241: LD_VAR 0 10
38245: PPUSH
38246: LD_VAR 0 11
38250: PPUSH
38251: CALL_OW 546
38255: ST_TO_ADDR
// if hex [ 1 ] then
38256: LD_VAR 0 4
38260: PUSH
38261: LD_INT 1
38263: ARRAY
38264: IFFALSE 38268
// exit ;
38266: GO 38671
// height := hex [ 2 ] ;
38268: LD_ADDR_VAR 0 15
38272: PUSH
38273: LD_VAR 0 4
38277: PUSH
38278: LD_INT 2
38280: ARRAY
38281: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38282: LD_ADDR_VAR 0 14
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: LD_INT 2
38292: PUSH
38293: LD_INT 3
38295: PUSH
38296: LD_INT 5
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: ST_TO_ADDR
// for i in tmp do
38305: LD_ADDR_VAR 0 8
38309: PUSH
38310: LD_VAR 0 14
38314: PUSH
38315: FOR_IN
38316: IFFALSE 38486
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38318: LD_ADDR_VAR 0 9
38322: PUSH
38323: LD_VAR 0 10
38327: PPUSH
38328: LD_VAR 0 8
38332: PPUSH
38333: LD_INT 5
38335: PPUSH
38336: CALL_OW 272
38340: PUSH
38341: LD_VAR 0 11
38345: PPUSH
38346: LD_VAR 0 8
38350: PPUSH
38351: LD_INT 5
38353: PPUSH
38354: CALL_OW 273
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38363: LD_VAR 0 9
38367: PUSH
38368: LD_INT 1
38370: ARRAY
38371: PPUSH
38372: LD_VAR 0 9
38376: PUSH
38377: LD_INT 2
38379: ARRAY
38380: PPUSH
38381: CALL_OW 488
38385: IFFALSE 38484
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38387: LD_ADDR_VAR 0 4
38391: PUSH
38392: LD_VAR 0 9
38396: PUSH
38397: LD_INT 1
38399: ARRAY
38400: PPUSH
38401: LD_VAR 0 9
38405: PUSH
38406: LD_INT 2
38408: ARRAY
38409: PPUSH
38410: CALL_OW 546
38414: ST_TO_ADDR
// if hex [ 1 ] then
38415: LD_VAR 0 4
38419: PUSH
38420: LD_INT 1
38422: ARRAY
38423: IFFALSE 38427
// continue ;
38425: GO 38315
// h := hex [ 2 ] ;
38427: LD_ADDR_VAR 0 13
38431: PUSH
38432: LD_VAR 0 4
38436: PUSH
38437: LD_INT 2
38439: ARRAY
38440: ST_TO_ADDR
// if h + 7 < height then
38441: LD_VAR 0 13
38445: PUSH
38446: LD_INT 7
38448: PLUS
38449: PUSH
38450: LD_VAR 0 15
38454: LESS
38455: IFFALSE 38484
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38457: LD_ADDR_VAR 0 18
38461: PUSH
38462: LD_INT 7
38464: PUSH
38465: LD_INT 28
38467: PUSH
38468: LD_INT 45
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: LIST
38475: PUSH
38476: LD_VAR 0 12
38480: ARRAY
38481: ST_TO_ADDR
// break ;
38482: GO 38486
// end ; end ; end ;
38484: GO 38315
38486: POP
38487: POP
// end ; if not weapon then
38488: LD_VAR 0 18
38492: NOT
38493: IFFALSE 38553
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38495: LD_ADDR_VAR 0 5
38499: PUSH
38500: LD_VAR 0 5
38504: PUSH
38505: LD_INT 11
38507: PUSH
38508: LD_INT 30
38510: PUSH
38511: LD_INT 49
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: LIST
38518: DIFF
38519: ST_TO_ADDR
// if not list then
38520: LD_VAR 0 5
38524: NOT
38525: IFFALSE 38529
// exit ;
38527: GO 38671
// weapon := list [ rand ( 1 , list ) ] ;
38529: LD_ADDR_VAR 0 18
38533: PUSH
38534: LD_VAR 0 5
38538: PUSH
38539: LD_INT 1
38541: PPUSH
38542: LD_VAR 0 5
38546: PPUSH
38547: CALL_OW 12
38551: ARRAY
38552: ST_TO_ADDR
// end ; if weapon then
38553: LD_VAR 0 18
38557: IFFALSE 38671
// begin tmp := CostOfWeapon ( weapon ) ;
38559: LD_ADDR_VAR 0 14
38563: PUSH
38564: LD_VAR 0 18
38568: PPUSH
38569: CALL_OW 451
38573: ST_TO_ADDR
// j := GetBase ( tower ) ;
38574: LD_ADDR_VAR 0 9
38578: PUSH
38579: LD_VAR 0 1
38583: PPUSH
38584: CALL_OW 274
38588: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38589: LD_VAR 0 9
38593: PPUSH
38594: LD_INT 1
38596: PPUSH
38597: CALL_OW 275
38601: PUSH
38602: LD_VAR 0 14
38606: PUSH
38607: LD_INT 1
38609: ARRAY
38610: GREATEREQUAL
38611: PUSH
38612: LD_VAR 0 9
38616: PPUSH
38617: LD_INT 2
38619: PPUSH
38620: CALL_OW 275
38624: PUSH
38625: LD_VAR 0 14
38629: PUSH
38630: LD_INT 2
38632: ARRAY
38633: GREATEREQUAL
38634: AND
38635: PUSH
38636: LD_VAR 0 9
38640: PPUSH
38641: LD_INT 3
38643: PPUSH
38644: CALL_OW 275
38648: PUSH
38649: LD_VAR 0 14
38653: PUSH
38654: LD_INT 3
38656: ARRAY
38657: GREATEREQUAL
38658: AND
38659: IFFALSE 38671
// result := weapon ;
38661: LD_ADDR_VAR 0 3
38665: PUSH
38666: LD_VAR 0 18
38670: ST_TO_ADDR
// end ; end ;
38671: LD_VAR 0 3
38675: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38676: LD_INT 0
38678: PPUSH
38679: PPUSH
// result := true ;
38680: LD_ADDR_VAR 0 3
38684: PUSH
38685: LD_INT 1
38687: ST_TO_ADDR
// if array1 = array2 then
38688: LD_VAR 0 1
38692: PUSH
38693: LD_VAR 0 2
38697: EQUAL
38698: IFFALSE 38758
// begin for i = 1 to array1 do
38700: LD_ADDR_VAR 0 4
38704: PUSH
38705: DOUBLE
38706: LD_INT 1
38708: DEC
38709: ST_TO_ADDR
38710: LD_VAR 0 1
38714: PUSH
38715: FOR_TO
38716: IFFALSE 38754
// if array1 [ i ] <> array2 [ i ] then
38718: LD_VAR 0 1
38722: PUSH
38723: LD_VAR 0 4
38727: ARRAY
38728: PUSH
38729: LD_VAR 0 2
38733: PUSH
38734: LD_VAR 0 4
38738: ARRAY
38739: NONEQUAL
38740: IFFALSE 38752
// begin result := false ;
38742: LD_ADDR_VAR 0 3
38746: PUSH
38747: LD_INT 0
38749: ST_TO_ADDR
// break ;
38750: GO 38754
// end ;
38752: GO 38715
38754: POP
38755: POP
// end else
38756: GO 38766
// result := false ;
38758: LD_ADDR_VAR 0 3
38762: PUSH
38763: LD_INT 0
38765: ST_TO_ADDR
// end ;
38766: LD_VAR 0 3
38770: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38771: LD_INT 0
38773: PPUSH
38774: PPUSH
// if not array1 or not array2 then
38775: LD_VAR 0 1
38779: NOT
38780: PUSH
38781: LD_VAR 0 2
38785: NOT
38786: OR
38787: IFFALSE 38791
// exit ;
38789: GO 38855
// result := true ;
38791: LD_ADDR_VAR 0 3
38795: PUSH
38796: LD_INT 1
38798: ST_TO_ADDR
// for i = 1 to array1 do
38799: LD_ADDR_VAR 0 4
38803: PUSH
38804: DOUBLE
38805: LD_INT 1
38807: DEC
38808: ST_TO_ADDR
38809: LD_VAR 0 1
38813: PUSH
38814: FOR_TO
38815: IFFALSE 38853
// if array1 [ i ] <> array2 [ i ] then
38817: LD_VAR 0 1
38821: PUSH
38822: LD_VAR 0 4
38826: ARRAY
38827: PUSH
38828: LD_VAR 0 2
38832: PUSH
38833: LD_VAR 0 4
38837: ARRAY
38838: NONEQUAL
38839: IFFALSE 38851
// begin result := false ;
38841: LD_ADDR_VAR 0 3
38845: PUSH
38846: LD_INT 0
38848: ST_TO_ADDR
// break ;
38849: GO 38853
// end ;
38851: GO 38814
38853: POP
38854: POP
// end ;
38855: LD_VAR 0 3
38859: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38860: LD_INT 0
38862: PPUSH
38863: PPUSH
38864: PPUSH
// pom := GetBase ( fac ) ;
38865: LD_ADDR_VAR 0 5
38869: PUSH
38870: LD_VAR 0 1
38874: PPUSH
38875: CALL_OW 274
38879: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38880: LD_ADDR_VAR 0 4
38884: PUSH
38885: LD_VAR 0 2
38889: PUSH
38890: LD_INT 1
38892: ARRAY
38893: PPUSH
38894: LD_VAR 0 2
38898: PUSH
38899: LD_INT 2
38901: ARRAY
38902: PPUSH
38903: LD_VAR 0 2
38907: PUSH
38908: LD_INT 3
38910: ARRAY
38911: PPUSH
38912: LD_VAR 0 2
38916: PUSH
38917: LD_INT 4
38919: ARRAY
38920: PPUSH
38921: CALL_OW 449
38925: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38926: LD_ADDR_VAR 0 3
38930: PUSH
38931: LD_VAR 0 5
38935: PPUSH
38936: LD_INT 1
38938: PPUSH
38939: CALL_OW 275
38943: PUSH
38944: LD_VAR 0 4
38948: PUSH
38949: LD_INT 1
38951: ARRAY
38952: GREATEREQUAL
38953: PUSH
38954: LD_VAR 0 5
38958: PPUSH
38959: LD_INT 2
38961: PPUSH
38962: CALL_OW 275
38966: PUSH
38967: LD_VAR 0 4
38971: PUSH
38972: LD_INT 2
38974: ARRAY
38975: GREATEREQUAL
38976: AND
38977: PUSH
38978: LD_VAR 0 5
38982: PPUSH
38983: LD_INT 3
38985: PPUSH
38986: CALL_OW 275
38990: PUSH
38991: LD_VAR 0 4
38995: PUSH
38996: LD_INT 3
38998: ARRAY
38999: GREATEREQUAL
39000: AND
39001: ST_TO_ADDR
// end ;
39002: LD_VAR 0 3
39006: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39007: LD_INT 0
39009: PPUSH
39010: PPUSH
39011: PPUSH
39012: PPUSH
// pom := GetBase ( building ) ;
39013: LD_ADDR_VAR 0 3
39017: PUSH
39018: LD_VAR 0 1
39022: PPUSH
39023: CALL_OW 274
39027: ST_TO_ADDR
// if not pom then
39028: LD_VAR 0 3
39032: NOT
39033: IFFALSE 39037
// exit ;
39035: GO 39207
// btype := GetBType ( building ) ;
39037: LD_ADDR_VAR 0 5
39041: PUSH
39042: LD_VAR 0 1
39046: PPUSH
39047: CALL_OW 266
39051: ST_TO_ADDR
// if btype = b_armoury then
39052: LD_VAR 0 5
39056: PUSH
39057: LD_INT 4
39059: EQUAL
39060: IFFALSE 39070
// btype := b_barracks ;
39062: LD_ADDR_VAR 0 5
39066: PUSH
39067: LD_INT 5
39069: ST_TO_ADDR
// if btype = b_depot then
39070: LD_VAR 0 5
39074: PUSH
39075: LD_INT 0
39077: EQUAL
39078: IFFALSE 39088
// btype := b_warehouse ;
39080: LD_ADDR_VAR 0 5
39084: PUSH
39085: LD_INT 1
39087: ST_TO_ADDR
// if btype = b_workshop then
39088: LD_VAR 0 5
39092: PUSH
39093: LD_INT 2
39095: EQUAL
39096: IFFALSE 39106
// btype := b_factory ;
39098: LD_ADDR_VAR 0 5
39102: PUSH
39103: LD_INT 3
39105: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39106: LD_ADDR_VAR 0 4
39110: PUSH
39111: LD_VAR 0 5
39115: PPUSH
39116: LD_VAR 0 1
39120: PPUSH
39121: CALL_OW 248
39125: PPUSH
39126: CALL_OW 450
39130: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39131: LD_ADDR_VAR 0 2
39135: PUSH
39136: LD_VAR 0 3
39140: PPUSH
39141: LD_INT 1
39143: PPUSH
39144: CALL_OW 275
39148: PUSH
39149: LD_VAR 0 4
39153: PUSH
39154: LD_INT 1
39156: ARRAY
39157: GREATEREQUAL
39158: PUSH
39159: LD_VAR 0 3
39163: PPUSH
39164: LD_INT 2
39166: PPUSH
39167: CALL_OW 275
39171: PUSH
39172: LD_VAR 0 4
39176: PUSH
39177: LD_INT 2
39179: ARRAY
39180: GREATEREQUAL
39181: AND
39182: PUSH
39183: LD_VAR 0 3
39187: PPUSH
39188: LD_INT 3
39190: PPUSH
39191: CALL_OW 275
39195: PUSH
39196: LD_VAR 0 4
39200: PUSH
39201: LD_INT 3
39203: ARRAY
39204: GREATEREQUAL
39205: AND
39206: ST_TO_ADDR
// end ;
39207: LD_VAR 0 2
39211: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39212: LD_INT 0
39214: PPUSH
39215: PPUSH
39216: PPUSH
// pom := GetBase ( building ) ;
39217: LD_ADDR_VAR 0 4
39221: PUSH
39222: LD_VAR 0 1
39226: PPUSH
39227: CALL_OW 274
39231: ST_TO_ADDR
// if not pom then
39232: LD_VAR 0 4
39236: NOT
39237: IFFALSE 39241
// exit ;
39239: GO 39342
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39241: LD_ADDR_VAR 0 5
39245: PUSH
39246: LD_VAR 0 2
39250: PPUSH
39251: LD_VAR 0 1
39255: PPUSH
39256: CALL_OW 248
39260: PPUSH
39261: CALL_OW 450
39265: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39266: LD_ADDR_VAR 0 3
39270: PUSH
39271: LD_VAR 0 4
39275: PPUSH
39276: LD_INT 1
39278: PPUSH
39279: CALL_OW 275
39283: PUSH
39284: LD_VAR 0 5
39288: PUSH
39289: LD_INT 1
39291: ARRAY
39292: GREATEREQUAL
39293: PUSH
39294: LD_VAR 0 4
39298: PPUSH
39299: LD_INT 2
39301: PPUSH
39302: CALL_OW 275
39306: PUSH
39307: LD_VAR 0 5
39311: PUSH
39312: LD_INT 2
39314: ARRAY
39315: GREATEREQUAL
39316: AND
39317: PUSH
39318: LD_VAR 0 4
39322: PPUSH
39323: LD_INT 3
39325: PPUSH
39326: CALL_OW 275
39330: PUSH
39331: LD_VAR 0 5
39335: PUSH
39336: LD_INT 3
39338: ARRAY
39339: GREATEREQUAL
39340: AND
39341: ST_TO_ADDR
// end ;
39342: LD_VAR 0 3
39346: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39347: LD_INT 0
39349: PPUSH
39350: PPUSH
39351: PPUSH
39352: PPUSH
39353: PPUSH
39354: PPUSH
39355: PPUSH
39356: PPUSH
39357: PPUSH
39358: PPUSH
39359: PPUSH
// result := false ;
39360: LD_ADDR_VAR 0 8
39364: PUSH
39365: LD_INT 0
39367: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39368: LD_VAR 0 5
39372: NOT
39373: PUSH
39374: LD_VAR 0 1
39378: NOT
39379: OR
39380: PUSH
39381: LD_VAR 0 2
39385: NOT
39386: OR
39387: PUSH
39388: LD_VAR 0 3
39392: NOT
39393: OR
39394: IFFALSE 39398
// exit ;
39396: GO 40212
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39398: LD_ADDR_VAR 0 14
39402: PUSH
39403: LD_VAR 0 1
39407: PPUSH
39408: LD_VAR 0 2
39412: PPUSH
39413: LD_VAR 0 3
39417: PPUSH
39418: LD_VAR 0 4
39422: PPUSH
39423: LD_VAR 0 5
39427: PUSH
39428: LD_INT 1
39430: ARRAY
39431: PPUSH
39432: CALL_OW 248
39436: PPUSH
39437: LD_INT 0
39439: PPUSH
39440: CALL 41445 0 6
39444: ST_TO_ADDR
// if not hexes then
39445: LD_VAR 0 14
39449: NOT
39450: IFFALSE 39454
// exit ;
39452: GO 40212
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39454: LD_ADDR_VAR 0 17
39458: PUSH
39459: LD_VAR 0 5
39463: PPUSH
39464: LD_INT 22
39466: PUSH
39467: LD_VAR 0 13
39471: PPUSH
39472: CALL_OW 255
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 2
39483: PUSH
39484: LD_INT 30
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 30
39496: PUSH
39497: LD_INT 1
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: LIST
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PPUSH
39513: CALL_OW 72
39517: ST_TO_ADDR
// for i = 1 to hexes do
39518: LD_ADDR_VAR 0 9
39522: PUSH
39523: DOUBLE
39524: LD_INT 1
39526: DEC
39527: ST_TO_ADDR
39528: LD_VAR 0 14
39532: PUSH
39533: FOR_TO
39534: IFFALSE 40210
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39536: LD_ADDR_VAR 0 13
39540: PUSH
39541: LD_VAR 0 14
39545: PUSH
39546: LD_VAR 0 9
39550: ARRAY
39551: PUSH
39552: LD_INT 1
39554: ARRAY
39555: PPUSH
39556: LD_VAR 0 14
39560: PUSH
39561: LD_VAR 0 9
39565: ARRAY
39566: PUSH
39567: LD_INT 2
39569: ARRAY
39570: PPUSH
39571: CALL_OW 428
39575: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39576: LD_VAR 0 14
39580: PUSH
39581: LD_VAR 0 9
39585: ARRAY
39586: PUSH
39587: LD_INT 1
39589: ARRAY
39590: PPUSH
39591: LD_VAR 0 14
39595: PUSH
39596: LD_VAR 0 9
39600: ARRAY
39601: PUSH
39602: LD_INT 2
39604: ARRAY
39605: PPUSH
39606: CALL_OW 351
39610: PUSH
39611: LD_VAR 0 14
39615: PUSH
39616: LD_VAR 0 9
39620: ARRAY
39621: PUSH
39622: LD_INT 1
39624: ARRAY
39625: PPUSH
39626: LD_VAR 0 14
39630: PUSH
39631: LD_VAR 0 9
39635: ARRAY
39636: PUSH
39637: LD_INT 2
39639: ARRAY
39640: PPUSH
39641: CALL_OW 488
39645: NOT
39646: OR
39647: PUSH
39648: LD_VAR 0 13
39652: PPUSH
39653: CALL_OW 247
39657: PUSH
39658: LD_INT 3
39660: EQUAL
39661: OR
39662: IFFALSE 39668
// exit ;
39664: POP
39665: POP
39666: GO 40212
// if not tmp then
39668: LD_VAR 0 13
39672: NOT
39673: IFFALSE 39677
// continue ;
39675: GO 39533
// result := true ;
39677: LD_ADDR_VAR 0 8
39681: PUSH
39682: LD_INT 1
39684: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39685: LD_VAR 0 6
39689: PUSH
39690: LD_VAR 0 13
39694: PPUSH
39695: CALL_OW 247
39699: PUSH
39700: LD_INT 2
39702: EQUAL
39703: AND
39704: PUSH
39705: LD_VAR 0 13
39709: PPUSH
39710: CALL_OW 263
39714: PUSH
39715: LD_INT 1
39717: EQUAL
39718: AND
39719: IFFALSE 39883
// begin if IsDrivenBy ( tmp ) then
39721: LD_VAR 0 13
39725: PPUSH
39726: CALL_OW 311
39730: IFFALSE 39734
// continue ;
39732: GO 39533
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39734: LD_VAR 0 6
39738: PPUSH
39739: LD_INT 3
39741: PUSH
39742: LD_INT 60
39744: PUSH
39745: EMPTY
39746: LIST
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 3
39754: PUSH
39755: LD_INT 55
39757: PUSH
39758: EMPTY
39759: LIST
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PPUSH
39769: CALL_OW 72
39773: IFFALSE 39881
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39775: LD_ADDR_VAR 0 18
39779: PUSH
39780: LD_VAR 0 6
39784: PPUSH
39785: LD_INT 3
39787: PUSH
39788: LD_INT 60
39790: PUSH
39791: EMPTY
39792: LIST
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 3
39800: PUSH
39801: LD_INT 55
39803: PUSH
39804: EMPTY
39805: LIST
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PPUSH
39815: CALL_OW 72
39819: PUSH
39820: LD_INT 1
39822: ARRAY
39823: ST_TO_ADDR
// if IsInUnit ( driver ) then
39824: LD_VAR 0 18
39828: PPUSH
39829: CALL_OW 310
39833: IFFALSE 39844
// ComExit ( driver ) ;
39835: LD_VAR 0 18
39839: PPUSH
39840: CALL 65225 0 1
// AddComEnterUnit ( driver , tmp ) ;
39844: LD_VAR 0 18
39848: PPUSH
39849: LD_VAR 0 13
39853: PPUSH
39854: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39858: LD_VAR 0 18
39862: PPUSH
39863: LD_VAR 0 7
39867: PPUSH
39868: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39872: LD_VAR 0 18
39876: PPUSH
39877: CALL_OW 181
// end ; continue ;
39881: GO 39533
// end ; if not cleaners or not tmp in cleaners then
39883: LD_VAR 0 6
39887: NOT
39888: PUSH
39889: LD_VAR 0 13
39893: PUSH
39894: LD_VAR 0 6
39898: IN
39899: NOT
39900: OR
39901: IFFALSE 40208
// begin if dep then
39903: LD_VAR 0 17
39907: IFFALSE 40043
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39909: LD_ADDR_VAR 0 16
39913: PUSH
39914: LD_VAR 0 17
39918: PUSH
39919: LD_INT 1
39921: ARRAY
39922: PPUSH
39923: CALL_OW 250
39927: PPUSH
39928: LD_VAR 0 17
39932: PUSH
39933: LD_INT 1
39935: ARRAY
39936: PPUSH
39937: CALL_OW 254
39941: PPUSH
39942: LD_INT 5
39944: PPUSH
39945: CALL_OW 272
39949: PUSH
39950: LD_VAR 0 17
39954: PUSH
39955: LD_INT 1
39957: ARRAY
39958: PPUSH
39959: CALL_OW 251
39963: PPUSH
39964: LD_VAR 0 17
39968: PUSH
39969: LD_INT 1
39971: ARRAY
39972: PPUSH
39973: CALL_OW 254
39977: PPUSH
39978: LD_INT 5
39980: PPUSH
39981: CALL_OW 273
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39990: LD_VAR 0 16
39994: PUSH
39995: LD_INT 1
39997: ARRAY
39998: PPUSH
39999: LD_VAR 0 16
40003: PUSH
40004: LD_INT 2
40006: ARRAY
40007: PPUSH
40008: CALL_OW 488
40012: IFFALSE 40043
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40014: LD_VAR 0 13
40018: PPUSH
40019: LD_VAR 0 16
40023: PUSH
40024: LD_INT 1
40026: ARRAY
40027: PPUSH
40028: LD_VAR 0 16
40032: PUSH
40033: LD_INT 2
40035: ARRAY
40036: PPUSH
40037: CALL_OW 111
// continue ;
40041: GO 39533
// end ; end ; r := GetDir ( tmp ) ;
40043: LD_ADDR_VAR 0 15
40047: PUSH
40048: LD_VAR 0 13
40052: PPUSH
40053: CALL_OW 254
40057: ST_TO_ADDR
// if r = 5 then
40058: LD_VAR 0 15
40062: PUSH
40063: LD_INT 5
40065: EQUAL
40066: IFFALSE 40076
// r := 0 ;
40068: LD_ADDR_VAR 0 15
40072: PUSH
40073: LD_INT 0
40075: ST_TO_ADDR
// for j = r to 5 do
40076: LD_ADDR_VAR 0 10
40080: PUSH
40081: DOUBLE
40082: LD_VAR 0 15
40086: DEC
40087: ST_TO_ADDR
40088: LD_INT 5
40090: PUSH
40091: FOR_TO
40092: IFFALSE 40206
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40094: LD_ADDR_VAR 0 11
40098: PUSH
40099: LD_VAR 0 13
40103: PPUSH
40104: CALL_OW 250
40108: PPUSH
40109: LD_VAR 0 10
40113: PPUSH
40114: LD_INT 2
40116: PPUSH
40117: CALL_OW 272
40121: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40122: LD_ADDR_VAR 0 12
40126: PUSH
40127: LD_VAR 0 13
40131: PPUSH
40132: CALL_OW 251
40136: PPUSH
40137: LD_VAR 0 10
40141: PPUSH
40142: LD_INT 2
40144: PPUSH
40145: CALL_OW 273
40149: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40150: LD_VAR 0 11
40154: PPUSH
40155: LD_VAR 0 12
40159: PPUSH
40160: CALL_OW 488
40164: PUSH
40165: LD_VAR 0 11
40169: PPUSH
40170: LD_VAR 0 12
40174: PPUSH
40175: CALL_OW 428
40179: NOT
40180: AND
40181: IFFALSE 40204
// begin ComMoveXY ( tmp , _x , _y ) ;
40183: LD_VAR 0 13
40187: PPUSH
40188: LD_VAR 0 11
40192: PPUSH
40193: LD_VAR 0 12
40197: PPUSH
40198: CALL_OW 111
// break ;
40202: GO 40206
// end ; end ;
40204: GO 40091
40206: POP
40207: POP
// end ; end ;
40208: GO 39533
40210: POP
40211: POP
// end ;
40212: LD_VAR 0 8
40216: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40217: LD_INT 0
40219: PPUSH
// result := true ;
40220: LD_ADDR_VAR 0 3
40224: PUSH
40225: LD_INT 1
40227: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40228: LD_VAR 0 2
40232: PUSH
40233: LD_INT 24
40235: DOUBLE
40236: EQUAL
40237: IFTRUE 40247
40239: LD_INT 33
40241: DOUBLE
40242: EQUAL
40243: IFTRUE 40247
40245: GO 40272
40247: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40248: LD_ADDR_VAR 0 3
40252: PUSH
40253: LD_INT 32
40255: PPUSH
40256: LD_VAR 0 1
40260: PPUSH
40261: CALL_OW 321
40265: PUSH
40266: LD_INT 2
40268: EQUAL
40269: ST_TO_ADDR
40270: GO 40588
40272: LD_INT 20
40274: DOUBLE
40275: EQUAL
40276: IFTRUE 40280
40278: GO 40305
40280: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40281: LD_ADDR_VAR 0 3
40285: PUSH
40286: LD_INT 6
40288: PPUSH
40289: LD_VAR 0 1
40293: PPUSH
40294: CALL_OW 321
40298: PUSH
40299: LD_INT 2
40301: EQUAL
40302: ST_TO_ADDR
40303: GO 40588
40305: LD_INT 22
40307: DOUBLE
40308: EQUAL
40309: IFTRUE 40319
40311: LD_INT 36
40313: DOUBLE
40314: EQUAL
40315: IFTRUE 40319
40317: GO 40344
40319: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40320: LD_ADDR_VAR 0 3
40324: PUSH
40325: LD_INT 15
40327: PPUSH
40328: LD_VAR 0 1
40332: PPUSH
40333: CALL_OW 321
40337: PUSH
40338: LD_INT 2
40340: EQUAL
40341: ST_TO_ADDR
40342: GO 40588
40344: LD_INT 30
40346: DOUBLE
40347: EQUAL
40348: IFTRUE 40352
40350: GO 40377
40352: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40353: LD_ADDR_VAR 0 3
40357: PUSH
40358: LD_INT 20
40360: PPUSH
40361: LD_VAR 0 1
40365: PPUSH
40366: CALL_OW 321
40370: PUSH
40371: LD_INT 2
40373: EQUAL
40374: ST_TO_ADDR
40375: GO 40588
40377: LD_INT 28
40379: DOUBLE
40380: EQUAL
40381: IFTRUE 40391
40383: LD_INT 21
40385: DOUBLE
40386: EQUAL
40387: IFTRUE 40391
40389: GO 40416
40391: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40392: LD_ADDR_VAR 0 3
40396: PUSH
40397: LD_INT 21
40399: PPUSH
40400: LD_VAR 0 1
40404: PPUSH
40405: CALL_OW 321
40409: PUSH
40410: LD_INT 2
40412: EQUAL
40413: ST_TO_ADDR
40414: GO 40588
40416: LD_INT 16
40418: DOUBLE
40419: EQUAL
40420: IFTRUE 40424
40422: GO 40449
40424: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40425: LD_ADDR_VAR 0 3
40429: PUSH
40430: LD_INT 84
40432: PPUSH
40433: LD_VAR 0 1
40437: PPUSH
40438: CALL_OW 321
40442: PUSH
40443: LD_INT 2
40445: EQUAL
40446: ST_TO_ADDR
40447: GO 40588
40449: LD_INT 19
40451: DOUBLE
40452: EQUAL
40453: IFTRUE 40463
40455: LD_INT 23
40457: DOUBLE
40458: EQUAL
40459: IFTRUE 40463
40461: GO 40488
40463: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40464: LD_ADDR_VAR 0 3
40468: PUSH
40469: LD_INT 83
40471: PPUSH
40472: LD_VAR 0 1
40476: PPUSH
40477: CALL_OW 321
40481: PUSH
40482: LD_INT 2
40484: EQUAL
40485: ST_TO_ADDR
40486: GO 40588
40488: LD_INT 17
40490: DOUBLE
40491: EQUAL
40492: IFTRUE 40496
40494: GO 40521
40496: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40497: LD_ADDR_VAR 0 3
40501: PUSH
40502: LD_INT 39
40504: PPUSH
40505: LD_VAR 0 1
40509: PPUSH
40510: CALL_OW 321
40514: PUSH
40515: LD_INT 2
40517: EQUAL
40518: ST_TO_ADDR
40519: GO 40588
40521: LD_INT 18
40523: DOUBLE
40524: EQUAL
40525: IFTRUE 40529
40527: GO 40554
40529: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40530: LD_ADDR_VAR 0 3
40534: PUSH
40535: LD_INT 40
40537: PPUSH
40538: LD_VAR 0 1
40542: PPUSH
40543: CALL_OW 321
40547: PUSH
40548: LD_INT 2
40550: EQUAL
40551: ST_TO_ADDR
40552: GO 40588
40554: LD_INT 27
40556: DOUBLE
40557: EQUAL
40558: IFTRUE 40562
40560: GO 40587
40562: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40563: LD_ADDR_VAR 0 3
40567: PUSH
40568: LD_INT 35
40570: PPUSH
40571: LD_VAR 0 1
40575: PPUSH
40576: CALL_OW 321
40580: PUSH
40581: LD_INT 2
40583: EQUAL
40584: ST_TO_ADDR
40585: GO 40588
40587: POP
// end ;
40588: LD_VAR 0 3
40592: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40593: LD_INT 0
40595: PPUSH
40596: PPUSH
40597: PPUSH
40598: PPUSH
40599: PPUSH
40600: PPUSH
40601: PPUSH
40602: PPUSH
40603: PPUSH
40604: PPUSH
40605: PPUSH
// result := false ;
40606: LD_ADDR_VAR 0 6
40610: PUSH
40611: LD_INT 0
40613: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40614: LD_VAR 0 1
40618: NOT
40619: PUSH
40620: LD_VAR 0 1
40624: PPUSH
40625: CALL_OW 266
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: IN
40640: NOT
40641: OR
40642: PUSH
40643: LD_VAR 0 2
40647: NOT
40648: OR
40649: PUSH
40650: LD_VAR 0 5
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: LD_INT 1
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: LD_INT 3
40666: PUSH
40667: LD_INT 4
40669: PUSH
40670: LD_INT 5
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: IN
40681: NOT
40682: OR
40683: PUSH
40684: LD_VAR 0 3
40688: PPUSH
40689: LD_VAR 0 4
40693: PPUSH
40694: CALL_OW 488
40698: NOT
40699: OR
40700: IFFALSE 40704
// exit ;
40702: GO 41440
// side := GetSide ( depot ) ;
40704: LD_ADDR_VAR 0 9
40708: PUSH
40709: LD_VAR 0 1
40713: PPUSH
40714: CALL_OW 255
40718: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40719: LD_VAR 0 9
40723: PPUSH
40724: LD_VAR 0 2
40728: PPUSH
40729: CALL 40217 0 2
40733: NOT
40734: IFFALSE 40738
// exit ;
40736: GO 41440
// pom := GetBase ( depot ) ;
40738: LD_ADDR_VAR 0 10
40742: PUSH
40743: LD_VAR 0 1
40747: PPUSH
40748: CALL_OW 274
40752: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40753: LD_ADDR_VAR 0 11
40757: PUSH
40758: LD_VAR 0 2
40762: PPUSH
40763: LD_VAR 0 1
40767: PPUSH
40768: CALL_OW 248
40772: PPUSH
40773: CALL_OW 450
40777: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40778: LD_VAR 0 10
40782: PPUSH
40783: LD_INT 1
40785: PPUSH
40786: CALL_OW 275
40790: PUSH
40791: LD_VAR 0 11
40795: PUSH
40796: LD_INT 1
40798: ARRAY
40799: GREATEREQUAL
40800: PUSH
40801: LD_VAR 0 10
40805: PPUSH
40806: LD_INT 2
40808: PPUSH
40809: CALL_OW 275
40813: PUSH
40814: LD_VAR 0 11
40818: PUSH
40819: LD_INT 2
40821: ARRAY
40822: GREATEREQUAL
40823: AND
40824: PUSH
40825: LD_VAR 0 10
40829: PPUSH
40830: LD_INT 3
40832: PPUSH
40833: CALL_OW 275
40837: PUSH
40838: LD_VAR 0 11
40842: PUSH
40843: LD_INT 3
40845: ARRAY
40846: GREATEREQUAL
40847: AND
40848: NOT
40849: IFFALSE 40853
// exit ;
40851: GO 41440
// if GetBType ( depot ) = b_depot then
40853: LD_VAR 0 1
40857: PPUSH
40858: CALL_OW 266
40862: PUSH
40863: LD_INT 0
40865: EQUAL
40866: IFFALSE 40878
// dist := 28 else
40868: LD_ADDR_VAR 0 14
40872: PUSH
40873: LD_INT 28
40875: ST_TO_ADDR
40876: GO 40886
// dist := 36 ;
40878: LD_ADDR_VAR 0 14
40882: PUSH
40883: LD_INT 36
40885: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40886: LD_VAR 0 1
40890: PPUSH
40891: LD_VAR 0 3
40895: PPUSH
40896: LD_VAR 0 4
40900: PPUSH
40901: CALL_OW 297
40905: PUSH
40906: LD_VAR 0 14
40910: GREATER
40911: IFFALSE 40915
// exit ;
40913: GO 41440
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40915: LD_ADDR_VAR 0 12
40919: PUSH
40920: LD_VAR 0 2
40924: PPUSH
40925: LD_VAR 0 3
40929: PPUSH
40930: LD_VAR 0 4
40934: PPUSH
40935: LD_VAR 0 5
40939: PPUSH
40940: LD_VAR 0 1
40944: PPUSH
40945: CALL_OW 248
40949: PPUSH
40950: LD_INT 0
40952: PPUSH
40953: CALL 41445 0 6
40957: ST_TO_ADDR
// if not hexes then
40958: LD_VAR 0 12
40962: NOT
40963: IFFALSE 40967
// exit ;
40965: GO 41440
// hex := GetHexInfo ( x , y ) ;
40967: LD_ADDR_VAR 0 15
40971: PUSH
40972: LD_VAR 0 3
40976: PPUSH
40977: LD_VAR 0 4
40981: PPUSH
40982: CALL_OW 546
40986: ST_TO_ADDR
// if hex [ 1 ] then
40987: LD_VAR 0 15
40991: PUSH
40992: LD_INT 1
40994: ARRAY
40995: IFFALSE 40999
// exit ;
40997: GO 41440
// height := hex [ 2 ] ;
40999: LD_ADDR_VAR 0 13
41003: PUSH
41004: LD_VAR 0 15
41008: PUSH
41009: LD_INT 2
41011: ARRAY
41012: ST_TO_ADDR
// for i = 1 to hexes do
41013: LD_ADDR_VAR 0 7
41017: PUSH
41018: DOUBLE
41019: LD_INT 1
41021: DEC
41022: ST_TO_ADDR
41023: LD_VAR 0 12
41027: PUSH
41028: FOR_TO
41029: IFFALSE 41359
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41031: LD_VAR 0 12
41035: PUSH
41036: LD_VAR 0 7
41040: ARRAY
41041: PUSH
41042: LD_INT 1
41044: ARRAY
41045: PPUSH
41046: LD_VAR 0 12
41050: PUSH
41051: LD_VAR 0 7
41055: ARRAY
41056: PUSH
41057: LD_INT 2
41059: ARRAY
41060: PPUSH
41061: CALL_OW 488
41065: NOT
41066: PUSH
41067: LD_VAR 0 12
41071: PUSH
41072: LD_VAR 0 7
41076: ARRAY
41077: PUSH
41078: LD_INT 1
41080: ARRAY
41081: PPUSH
41082: LD_VAR 0 12
41086: PUSH
41087: LD_VAR 0 7
41091: ARRAY
41092: PUSH
41093: LD_INT 2
41095: ARRAY
41096: PPUSH
41097: CALL_OW 428
41101: PUSH
41102: LD_INT 0
41104: GREATER
41105: OR
41106: PUSH
41107: LD_VAR 0 12
41111: PUSH
41112: LD_VAR 0 7
41116: ARRAY
41117: PUSH
41118: LD_INT 1
41120: ARRAY
41121: PPUSH
41122: LD_VAR 0 12
41126: PUSH
41127: LD_VAR 0 7
41131: ARRAY
41132: PUSH
41133: LD_INT 2
41135: ARRAY
41136: PPUSH
41137: CALL_OW 351
41141: OR
41142: IFFALSE 41148
// exit ;
41144: POP
41145: POP
41146: GO 41440
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41148: LD_ADDR_VAR 0 8
41152: PUSH
41153: LD_VAR 0 12
41157: PUSH
41158: LD_VAR 0 7
41162: ARRAY
41163: PUSH
41164: LD_INT 1
41166: ARRAY
41167: PPUSH
41168: LD_VAR 0 12
41172: PUSH
41173: LD_VAR 0 7
41177: ARRAY
41178: PUSH
41179: LD_INT 2
41181: ARRAY
41182: PPUSH
41183: CALL_OW 546
41187: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41188: LD_VAR 0 8
41192: PUSH
41193: LD_INT 1
41195: ARRAY
41196: PUSH
41197: LD_VAR 0 8
41201: PUSH
41202: LD_INT 2
41204: ARRAY
41205: PUSH
41206: LD_VAR 0 13
41210: PUSH
41211: LD_INT 2
41213: PLUS
41214: GREATER
41215: OR
41216: PUSH
41217: LD_VAR 0 8
41221: PUSH
41222: LD_INT 2
41224: ARRAY
41225: PUSH
41226: LD_VAR 0 13
41230: PUSH
41231: LD_INT 2
41233: MINUS
41234: LESS
41235: OR
41236: PUSH
41237: LD_VAR 0 8
41241: PUSH
41242: LD_INT 3
41244: ARRAY
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: LD_INT 8
41251: PUSH
41252: LD_INT 9
41254: PUSH
41255: LD_INT 10
41257: PUSH
41258: LD_INT 11
41260: PUSH
41261: LD_INT 12
41263: PUSH
41264: LD_INT 13
41266: PUSH
41267: LD_INT 16
41269: PUSH
41270: LD_INT 17
41272: PUSH
41273: LD_INT 18
41275: PUSH
41276: LD_INT 19
41278: PUSH
41279: LD_INT 20
41281: PUSH
41282: LD_INT 21
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: IN
41300: NOT
41301: OR
41302: PUSH
41303: LD_VAR 0 8
41307: PUSH
41308: LD_INT 5
41310: ARRAY
41311: NOT
41312: OR
41313: PUSH
41314: LD_VAR 0 8
41318: PUSH
41319: LD_INT 6
41321: ARRAY
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: LD_INT 2
41328: PUSH
41329: LD_INT 7
41331: PUSH
41332: LD_INT 9
41334: PUSH
41335: LD_INT 10
41337: PUSH
41338: LD_INT 11
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: IN
41349: NOT
41350: OR
41351: IFFALSE 41357
// exit ;
41353: POP
41354: POP
41355: GO 41440
// end ;
41357: GO 41028
41359: POP
41360: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41361: LD_VAR 0 9
41365: PPUSH
41366: LD_VAR 0 3
41370: PPUSH
41371: LD_VAR 0 4
41375: PPUSH
41376: LD_INT 20
41378: PPUSH
41379: CALL 33392 0 4
41383: PUSH
41384: LD_INT 4
41386: ARRAY
41387: IFFALSE 41391
// exit ;
41389: GO 41440
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41391: LD_VAR 0 2
41395: PUSH
41396: LD_INT 29
41398: PUSH
41399: LD_INT 30
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: IN
41406: PUSH
41407: LD_VAR 0 3
41411: PPUSH
41412: LD_VAR 0 4
41416: PPUSH
41417: LD_VAR 0 9
41421: PPUSH
41422: CALL_OW 440
41426: NOT
41427: AND
41428: IFFALSE 41432
// exit ;
41430: GO 41440
// result := true ;
41432: LD_ADDR_VAR 0 6
41436: PUSH
41437: LD_INT 1
41439: ST_TO_ADDR
// end ;
41440: LD_VAR 0 6
41444: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41445: LD_INT 0
41447: PPUSH
41448: PPUSH
41449: PPUSH
41450: PPUSH
41451: PPUSH
41452: PPUSH
41453: PPUSH
41454: PPUSH
41455: PPUSH
41456: PPUSH
41457: PPUSH
41458: PPUSH
41459: PPUSH
41460: PPUSH
41461: PPUSH
41462: PPUSH
41463: PPUSH
41464: PPUSH
41465: PPUSH
41466: PPUSH
41467: PPUSH
41468: PPUSH
41469: PPUSH
41470: PPUSH
41471: PPUSH
41472: PPUSH
41473: PPUSH
41474: PPUSH
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
41480: PPUSH
41481: PPUSH
41482: PPUSH
41483: PPUSH
41484: PPUSH
41485: PPUSH
41486: PPUSH
41487: PPUSH
41488: PPUSH
41489: PPUSH
41490: PPUSH
41491: PPUSH
41492: PPUSH
41493: PPUSH
41494: PPUSH
41495: PPUSH
41496: PPUSH
41497: PPUSH
41498: PPUSH
41499: PPUSH
41500: PPUSH
41501: PPUSH
41502: PPUSH
41503: PPUSH
41504: PPUSH
// result = [ ] ;
41505: LD_ADDR_VAR 0 7
41509: PUSH
41510: EMPTY
41511: ST_TO_ADDR
// temp_list = [ ] ;
41512: LD_ADDR_VAR 0 9
41516: PUSH
41517: EMPTY
41518: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41519: LD_VAR 0 4
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: LD_INT 2
41532: PUSH
41533: LD_INT 3
41535: PUSH
41536: LD_INT 4
41538: PUSH
41539: LD_INT 5
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: IN
41550: NOT
41551: PUSH
41552: LD_VAR 0 1
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: IN
41567: PUSH
41568: LD_VAR 0 5
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: LD_INT 2
41578: PUSH
41579: LD_INT 3
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: LIST
41586: IN
41587: NOT
41588: AND
41589: OR
41590: IFFALSE 41594
// exit ;
41592: GO 59985
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41594: LD_VAR 0 1
41598: PUSH
41599: LD_INT 6
41601: PUSH
41602: LD_INT 7
41604: PUSH
41605: LD_INT 8
41607: PUSH
41608: LD_INT 13
41610: PUSH
41611: LD_INT 12
41613: PUSH
41614: LD_INT 15
41616: PUSH
41617: LD_INT 11
41619: PUSH
41620: LD_INT 14
41622: PUSH
41623: LD_INT 10
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: IN
41637: IFFALSE 41647
// btype = b_lab ;
41639: LD_ADDR_VAR 0 1
41643: PUSH
41644: LD_INT 6
41646: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41647: LD_VAR 0 6
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: LD_INT 2
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: LIST
41665: IN
41666: NOT
41667: PUSH
41668: LD_VAR 0 1
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: LD_INT 2
41681: PUSH
41682: LD_INT 3
41684: PUSH
41685: LD_INT 6
41687: PUSH
41688: LD_INT 36
41690: PUSH
41691: LD_INT 4
41693: PUSH
41694: LD_INT 5
41696: PUSH
41697: LD_INT 31
41699: PUSH
41700: LD_INT 32
41702: PUSH
41703: LD_INT 33
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: IN
41719: NOT
41720: PUSH
41721: LD_VAR 0 6
41725: PUSH
41726: LD_INT 1
41728: EQUAL
41729: AND
41730: OR
41731: PUSH
41732: LD_VAR 0 1
41736: PUSH
41737: LD_INT 2
41739: PUSH
41740: LD_INT 3
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: IN
41747: NOT
41748: PUSH
41749: LD_VAR 0 6
41753: PUSH
41754: LD_INT 2
41756: EQUAL
41757: AND
41758: OR
41759: IFFALSE 41769
// mode = 0 ;
41761: LD_ADDR_VAR 0 6
41765: PUSH
41766: LD_INT 0
41768: ST_TO_ADDR
// case mode of 0 :
41769: LD_VAR 0 6
41773: PUSH
41774: LD_INT 0
41776: DOUBLE
41777: EQUAL
41778: IFTRUE 41782
41780: GO 53235
41782: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41783: LD_ADDR_VAR 0 11
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 0
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: LD_INT 1
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: NEG
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: LD_INT 2
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 0
41876: PUSH
41877: LD_INT 2
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 1
41887: PUSH
41888: LD_INT 1
41890: NEG
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: LD_INT 2
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: LD_INT 1
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: PUSH
41930: LD_INT 3
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: LD_INT 3
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 1
41949: NEG
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41976: LD_ADDR_VAR 0 12
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 2
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 2
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: LD_INT 1
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 2
42099: NEG
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 2
42110: NEG
42111: PUSH
42112: LD_INT 1
42114: NEG
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: NEG
42123: PUSH
42124: LD_INT 1
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 3
42133: NEG
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 3
42144: NEG
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42172: LD_ADDR_VAR 0 13
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: LD_INT 1
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: LD_INT 1
42245: NEG
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: LD_INT 2
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 2
42275: PUSH
42276: LD_INT 2
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: LD_INT 2
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 2
42295: NEG
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 2
42307: NEG
42308: PUSH
42309: LD_INT 2
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 2
42319: NEG
42320: PUSH
42321: LD_INT 3
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 3
42331: NEG
42332: PUSH
42333: LD_INT 2
42335: NEG
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 3
42343: NEG
42344: PUSH
42345: LD_INT 3
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42371: LD_ADDR_VAR 0 14
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: LD_INT 2
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: LD_INT 2
42467: NEG
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 1
42486: PUSH
42487: LD_INT 2
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: NEG
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: PUSH
42519: LD_INT 3
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: LD_INT 3
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: LD_INT 2
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42567: LD_ADDR_VAR 0 15
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 2
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 2
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: NEG
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 2
42701: NEG
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 3
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 3
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42760: LD_ADDR_VAR 0 16
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: LD_INT 1
42780: NEG
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: LD_INT 2
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 2
42883: NEG
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 2
42895: NEG
42896: PUSH
42897: LD_INT 2
42899: NEG
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 3
42907: PUSH
42908: LD_INT 2
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 3
42917: PUSH
42918: LD_INT 3
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 2
42927: PUSH
42928: LD_INT 3
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42953: LD_ADDR_VAR 0 17
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: LD_INT 2
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 2
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 2
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: NEG
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 2
43152: NEG
43153: PUSH
43154: LD_INT 2
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43183: LD_ADDR_VAR 0 18
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: LD_INT 2
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: LD_INT 2
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 2
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 2
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 2
43318: PUSH
43319: LD_INT 2
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: LD_INT 2
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 2
43359: NEG
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 2
43370: NEG
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 2
43382: NEG
43383: PUSH
43384: LD_INT 2
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43413: LD_ADDR_VAR 0 19
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: LD_INT 1
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: LD_INT 1
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: LD_INT 2
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 1
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 2
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: LD_INT 2
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: LD_INT 2
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 2
43589: NEG
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 2
43612: NEG
43613: PUSH
43614: LD_INT 2
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43643: LD_ADDR_VAR 0 20
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: LD_INT 2
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 2
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: LD_INT 2
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: LD_INT 2
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: LD_INT 2
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 1
43808: NEG
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 2
43819: NEG
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 2
43830: NEG
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: NEG
43843: PUSH
43844: LD_INT 2
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43873: LD_ADDR_VAR 0 21
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: LD_INT 2
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 2
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 2
43998: PUSH
43999: LD_INT 1
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 2
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: LD_INT 1
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 2
44072: NEG
44073: PUSH
44074: LD_INT 2
44076: NEG
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44103: LD_ADDR_VAR 0 22
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: LD_INT 2
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: LD_INT 2
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 2
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 2
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 2
44279: NEG
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 2
44290: NEG
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: NEG
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44333: LD_ADDR_VAR 0 23
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: LD_INT 2
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 2
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 2
44532: NEG
44533: PUSH
44534: LD_INT 2
44536: NEG
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: LD_INT 3
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: LD_INT 3
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 2
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44613: LD_ADDR_VAR 0 24
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: NEG
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 2
44812: NEG
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: LD_INT 2
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 3
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 3
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44889: LD_ADDR_VAR 0 25
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 0
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 1
44947: NEG
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: LD_INT 2
44974: NEG
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 0
44982: PUSH
44983: LD_INT 2
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 2
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 2
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: LD_INT 2
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: LD_INT 2
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 2
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 2
45076: NEG
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 2
45088: NEG
45089: PUSH
45090: LD_INT 2
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 3
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 3
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: LD_INT 3
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 3
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45163: LD_ADDR_VAR 0 26
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: LD_INT 2
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 2
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 2
45298: PUSH
45299: LD_INT 2
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: LD_INT 2
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: LD_INT 2
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 2
45339: NEG
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 2
45362: NEG
45363: PUSH
45364: LD_INT 2
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: LD_INT 3
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: LD_INT 3
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45439: LD_ADDR_VAR 0 27
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: LD_INT 2
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: LD_INT 2
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 2
45615: NEG
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: NEG
45639: PUSH
45640: LD_INT 2
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 2
45661: NEG
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 3
45672: NEG
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 3
45684: NEG
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45719: LD_ADDR_VAR 0 28
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 2
45895: NEG
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 2
45918: NEG
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: NEG
45931: PUSH
45932: LD_INT 3
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: LD_INT 3
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 3
45954: NEG
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 3
45966: NEG
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46001: LD_ADDR_VAR 0 29
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 1
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: LD_INT 2
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 2
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: LD_INT 2
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: LD_INT 2
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 2
46167: NEG
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: NEG
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: LD_INT 3
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 2
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 3
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: LD_INT 3
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 3
46245: NEG
46246: PUSH
46247: LD_INT 2
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46280: LD_ADDR_VAR 0 30
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: LD_INT 2
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: NEG
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: LD_INT 3
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: LD_INT 2
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 3
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: PUSH
46503: LD_INT 3
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: NEG
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 3
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46558: LD_ADDR_VAR 0 31
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 2
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: NEG
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: LD_INT 2
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 2
46747: NEG
46748: PUSH
46749: LD_INT 3
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: LD_INT 1
46762: NEG
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 3
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: LD_INT 3
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 3
46801: NEG
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46836: LD_ADDR_VAR 0 32
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: LD_INT 3
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: LD_INT 2
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: LD_INT 3
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: NEG
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 3
47079: NEG
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47114: LD_ADDR_VAR 0 33
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: LD_INT 2
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: NEG
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 2
47304: NEG
47305: PUSH
47306: LD_INT 3
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 2
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 3
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: LD_INT 3
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 3
47358: NEG
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47393: LD_ADDR_VAR 0 34
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: LD_INT 2
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: LD_INT 2
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: LD_INT 2
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 2
47549: NEG
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: NEG
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: LD_INT 2
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: LD_INT 3
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: LD_INT 2
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 3
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: LD_INT 3
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 2
47627: NEG
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 3
47638: NEG
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47673: LD_ADDR_VAR 0 35
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: NEG
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47785: LD_ADDR_VAR 0 36
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: LD_INT 2
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47897: LD_ADDR_VAR 0 37
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48009: LD_ADDR_VAR 0 38
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 2
48100: NEG
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48121: LD_ADDR_VAR 0 39
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48233: LD_ADDR_VAR 0 40
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48345: LD_ADDR_VAR 0 41
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 2
48500: NEG
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: NEG
48524: PUSH
48525: LD_INT 2
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: LD_INT 3
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 3
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 3
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 3
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 3
48588: PUSH
48589: LD_INT 3
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: LD_INT 3
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 2
48608: NEG
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 3
48619: NEG
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 3
48630: NEG
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 3
48642: NEG
48643: PUSH
48644: LD_INT 2
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 3
48654: NEG
48655: PUSH
48656: LD_INT 3
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48695: LD_ADDR_VAR 0 42
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 2
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: LD_INT 2
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: NEG
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: LD_INT 2
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: LD_INT 3
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: LD_INT 3
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: LD_INT 3
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: LD_INT 2
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 3
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 3
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: LD_INT 3
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: LD_INT 3
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 3
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 3
48992: NEG
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 3
49004: NEG
49005: PUSH
49006: LD_INT 3
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49045: LD_ADDR_VAR 0 43
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 1
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: LD_INT 2
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 2
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 2
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: LD_INT 3
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: LD_INT 3
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 3
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 3
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: LD_INT 3
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: LD_INT 3
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 2
49330: NEG
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 3
49341: NEG
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 3
49352: NEG
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49393: LD_ADDR_VAR 0 44
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 2
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: LD_INT 3
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 2
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 3
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 3
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 3
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 3
49636: PUSH
49637: LD_INT 3
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: LD_INT 3
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 2
49656: NEG
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 3
49667: NEG
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 3
49678: NEG
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 3
49690: NEG
49691: PUSH
49692: LD_INT 2
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 3
49702: NEG
49703: PUSH
49704: LD_INT 3
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49743: LD_ADDR_VAR 0 45
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: LD_INT 2
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: LD_INT 2
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: LD_INT 2
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 2
49909: NEG
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: LD_INT 2
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: LD_INT 3
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: LD_INT 3
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: LD_INT 3
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 3
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 3
49989: PUSH
49990: LD_INT 3
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 2
49999: PUSH
50000: LD_INT 3
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: LD_INT 3
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: LD_INT 3
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 3
50040: NEG
50041: PUSH
50042: LD_INT 2
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 3
50052: NEG
50053: PUSH
50054: LD_INT 3
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50093: LD_ADDR_VAR 0 46
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 2
50270: NEG
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: LD_INT 3
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: LD_INT 3
50297: NEG
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: LD_INT 2
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 3
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 3
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: LD_INT 3
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: LD_INT 3
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 2
50378: NEG
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 3
50389: NEG
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 3
50400: NEG
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50441: LD_ADDR_VAR 0 47
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: LD_INT 2
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 2
50556: NEG
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 2
50568: NEG
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50592: LD_ADDR_VAR 0 48
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: LD_INT 2
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: LD_INT 1
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50739: LD_ADDR_VAR 0 49
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 2
50851: PUSH
50852: LD_INT 2
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: LD_INT 2
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50883: LD_ADDR_VAR 0 50
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: LD_INT 2
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51027: LD_ADDR_VAR 0 51
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51174: LD_ADDR_VAR 0 52
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 2
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: NEG
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: LD_INT 2
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51325: LD_ADDR_VAR 0 53
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: LD_INT 2
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: LD_INT 2
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: LD_INT 2
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: LD_INT 2
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: LD_INT 2
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: NEG
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: NEG
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: NEG
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51555: LD_ADDR_VAR 0 54
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: LD_INT 2
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: LD_INT 1
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 2
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: PUSH
51691: LD_INT 2
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 2
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: NEG
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: NEG
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: NEG
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51785: LD_ADDR_VAR 0 55
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: LD_INT 2
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 2
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: LD_INT 2
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: NEG
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: NEG
51985: PUSH
51986: LD_INT 2
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52015: LD_ADDR_VAR 0 56
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 2
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: LD_INT 2
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: NEG
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 2
52214: NEG
52215: PUSH
52216: LD_INT 2
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52245: LD_ADDR_VAR 0 57
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 2
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: LD_INT 2
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 2
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 2
52444: NEG
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52475: LD_ADDR_VAR 0 58
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 2
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: PUSH
52611: LD_INT 2
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52705: LD_ADDR_VAR 0 59
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52793: LD_ADDR_VAR 0 60
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52881: LD_ADDR_VAR 0 61
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52969: LD_ADDR_VAR 0 62
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53057: LD_ADDR_VAR 0 63
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53145: LD_ADDR_VAR 0 64
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: ST_TO_ADDR
// end ; 1 :
53233: GO 59130
53235: LD_INT 1
53237: DOUBLE
53238: EQUAL
53239: IFTRUE 53243
53241: GO 55866
53243: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53244: LD_ADDR_VAR 0 11
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: LD_INT 3
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: LD_INT 3
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: LD_INT 2
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: LIST
53287: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53288: LD_ADDR_VAR 0 12
53292: PUSH
53293: LD_INT 2
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 3
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 3
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: LIST
53328: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53329: LD_ADDR_VAR 0 13
53333: PUSH
53334: LD_INT 3
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 3
53346: PUSH
53347: LD_INT 3
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: LD_INT 3
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: LIST
53368: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53369: LD_ADDR_VAR 0 14
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: LD_INT 3
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 3
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: LIST
53409: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53410: LD_ADDR_VAR 0 15
53414: PUSH
53415: LD_INT 2
53417: NEG
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 3
53428: NEG
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 3
53439: NEG
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: LIST
53453: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53454: LD_ADDR_VAR 0 16
53458: PUSH
53459: LD_INT 2
53461: NEG
53462: PUSH
53463: LD_INT 3
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 3
53473: NEG
53474: PUSH
53475: LD_INT 2
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 3
53485: NEG
53486: PUSH
53487: LD_INT 3
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: LIST
53499: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53500: LD_ADDR_VAR 0 17
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: LD_INT 3
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 3
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: LD_INT 2
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: LIST
53543: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53544: LD_ADDR_VAR 0 18
53548: PUSH
53549: LD_INT 2
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 3
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 3
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: LIST
53584: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53585: LD_ADDR_VAR 0 19
53589: PUSH
53590: LD_INT 3
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: LD_INT 3
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: LD_INT 3
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: LIST
53624: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53625: LD_ADDR_VAR 0 20
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: LD_INT 3
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: LD_INT 3
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: LIST
53665: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53666: LD_ADDR_VAR 0 21
53670: PUSH
53671: LD_INT 2
53673: NEG
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 3
53684: NEG
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 3
53695: NEG
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: LIST
53709: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53710: LD_ADDR_VAR 0 22
53714: PUSH
53715: LD_INT 2
53717: NEG
53718: PUSH
53719: LD_INT 3
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 3
53729: NEG
53730: PUSH
53731: LD_INT 2
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 3
53741: NEG
53742: PUSH
53743: LD_INT 3
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: LIST
53755: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53756: LD_ADDR_VAR 0 23
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 3
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: PUSH
53776: LD_INT 4
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 3
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: LIST
53799: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53800: LD_ADDR_VAR 0 24
53804: PUSH
53805: LD_INT 3
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 3
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 4
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: LIST
53840: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53841: LD_ADDR_VAR 0 25
53845: PUSH
53846: LD_INT 3
53848: PUSH
53849: LD_INT 3
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 4
53858: PUSH
53859: LD_INT 3
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 3
53868: PUSH
53869: LD_INT 4
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: LIST
53880: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53881: LD_ADDR_VAR 0 26
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 3
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 4
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: LD_INT 3
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: LIST
53921: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53922: LD_ADDR_VAR 0 27
53926: PUSH
53927: LD_INT 3
53929: NEG
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 3
53940: NEG
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 4
53951: NEG
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: LIST
53965: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53966: LD_ADDR_VAR 0 28
53970: PUSH
53971: LD_INT 3
53973: NEG
53974: PUSH
53975: LD_INT 3
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 3
53985: NEG
53986: PUSH
53987: LD_INT 4
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 4
53997: NEG
53998: PUSH
53999: LD_INT 3
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: LIST
54011: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54012: LD_ADDR_VAR 0 29
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: LD_INT 3
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: LD_INT 3
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: LD_INT 4
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: LD_INT 4
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: LD_INT 3
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: NEG
54088: PUSH
54089: LD_INT 5
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: LD_INT 5
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: LD_INT 4
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: LD_INT 6
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: LD_INT 6
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: LD_INT 5
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54167: LD_ADDR_VAR 0 30
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 3
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 3
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 3
54205: PUSH
54206: LD_INT 1
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 4
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 4
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 4
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 5
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 5
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 5
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 6
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 6
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54310: LD_ADDR_VAR 0 31
54314: PUSH
54315: LD_INT 3
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 3
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 2
54337: PUSH
54338: LD_INT 3
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 4
54347: PUSH
54348: LD_INT 3
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 4
54357: PUSH
54358: LD_INT 4
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 3
54367: PUSH
54368: LD_INT 4
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 5
54377: PUSH
54378: LD_INT 4
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 5
54387: PUSH
54388: LD_INT 5
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 4
54397: PUSH
54398: LD_INT 5
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 6
54407: PUSH
54408: LD_INT 5
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 6
54417: PUSH
54418: LD_INT 6
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 5
54427: PUSH
54428: LD_INT 6
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54449: LD_ADDR_VAR 0 32
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: LD_INT 3
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: LD_INT 3
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: LD_INT 4
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 4
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: LD_INT 3
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: LD_INT 5
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 5
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: LD_INT 4
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 6
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 6
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 5
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54592: LD_ADDR_VAR 0 33
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 3
54610: NEG
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 3
54621: NEG
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 4
54644: NEG
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 4
54655: NEG
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 4
54667: NEG
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 5
54678: NEG
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 5
54689: NEG
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 5
54701: NEG
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 6
54712: NEG
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 6
54723: NEG
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54747: LD_ADDR_VAR 0 34
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: LD_INT 3
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 3
54766: NEG
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 3
54778: NEG
54779: PUSH
54780: LD_INT 3
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 3
54790: NEG
54791: PUSH
54792: LD_INT 4
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 4
54802: NEG
54803: PUSH
54804: LD_INT 3
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 4
54814: NEG
54815: PUSH
54816: LD_INT 4
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 4
54826: NEG
54827: PUSH
54828: LD_INT 5
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 5
54838: NEG
54839: PUSH
54840: LD_INT 4
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 5
54850: NEG
54851: PUSH
54852: LD_INT 5
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 5
54862: NEG
54863: PUSH
54864: LD_INT 6
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 6
54874: NEG
54875: PUSH
54876: LD_INT 5
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 6
54886: NEG
54887: PUSH
54888: LD_INT 6
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54910: LD_ADDR_VAR 0 41
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: LD_INT 3
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: LIST
54953: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54954: LD_ADDR_VAR 0 42
54958: PUSH
54959: LD_INT 2
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 3
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: LIST
54994: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54995: LD_ADDR_VAR 0 43
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: LD_INT 2
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 3
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: LD_INT 3
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: LIST
55034: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55035: LD_ADDR_VAR 0 44
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: LD_INT 3
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: LD_INT 2
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: LIST
55075: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55076: LD_ADDR_VAR 0 45
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 3
55105: NEG
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: LIST
55119: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55120: LD_ADDR_VAR 0 46
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: LD_INT 3
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 3
55151: NEG
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: LIST
55165: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55166: LD_ADDR_VAR 0 47
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: LD_INT 3
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: LD_INT 3
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55199: LD_ADDR_VAR 0 48
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: LD_INT 2
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55230: LD_ADDR_VAR 0 49
55234: PUSH
55235: LD_INT 3
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 3
55247: PUSH
55248: LD_INT 2
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55259: LD_ADDR_VAR 0 50
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: LD_INT 3
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: LD_INT 3
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55288: LD_ADDR_VAR 0 51
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55319: LD_ADDR_VAR 0 52
55323: PUSH
55324: LD_INT 3
55326: NEG
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 3
55338: NEG
55339: PUSH
55340: LD_INT 2
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55352: LD_ADDR_VAR 0 53
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: LD_INT 3
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 3
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: LD_INT 2
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: LIST
55395: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55396: LD_ADDR_VAR 0 54
55400: PUSH
55401: LD_INT 2
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 3
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 3
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: LIST
55436: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55437: LD_ADDR_VAR 0 55
55441: PUSH
55442: LD_INT 3
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 3
55454: PUSH
55455: LD_INT 3
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: PUSH
55465: LD_INT 3
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: LIST
55476: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55477: LD_ADDR_VAR 0 56
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: LD_INT 3
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: LD_INT 3
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: LIST
55517: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55518: LD_ADDR_VAR 0 57
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 3
55536: NEG
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 3
55547: NEG
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: LIST
55561: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55562: LD_ADDR_VAR 0 58
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: LD_INT 3
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 3
55581: NEG
55582: PUSH
55583: LD_INT 2
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 3
55593: NEG
55594: PUSH
55595: LD_INT 3
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: LIST
55607: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55608: LD_ADDR_VAR 0 59
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: LIST
55651: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55652: LD_ADDR_VAR 0 60
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: LD_INT 1
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 2
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: LIST
55692: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55693: LD_ADDR_VAR 0 61
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: LD_INT 2
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: LIST
55732: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55733: LD_ADDR_VAR 0 62
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: LIST
55773: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55774: LD_ADDR_VAR 0 63
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 2
55792: NEG
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: NEG
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: LIST
55817: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55818: LD_ADDR_VAR 0 64
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 2
55837: NEG
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 2
55849: NEG
55850: PUSH
55851: LD_INT 2
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: ST_TO_ADDR
// end ; 2 :
55864: GO 59130
55866: LD_INT 2
55868: DOUBLE
55869: EQUAL
55870: IFTRUE 55874
55872: GO 59129
55874: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55875: LD_ADDR_VAR 0 29
55879: PUSH
55880: LD_INT 4
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 4
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 5
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 5
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 4
55923: PUSH
55924: LD_INT 1
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 3
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 3
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 3
55954: PUSH
55955: LD_INT 2
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 5
55965: PUSH
55966: LD_INT 2
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 3
55975: PUSH
55976: LD_INT 3
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 3
55985: PUSH
55986: LD_INT 2
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 4
55995: PUSH
55996: LD_INT 3
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 4
56005: PUSH
56006: LD_INT 4
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 3
56015: PUSH
56016: LD_INT 4
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: LD_INT 3
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: PUSH
56036: LD_INT 2
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 4
56045: PUSH
56046: LD_INT 2
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 2
56055: PUSH
56056: LD_INT 4
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 4
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: LD_INT 3
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: LD_INT 4
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: LD_INT 5
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: LD_INT 5
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: LD_INT 4
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: LD_INT 3
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: PUSH
56138: LD_INT 5
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 2
56147: NEG
56148: PUSH
56149: LD_INT 3
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 3
56158: NEG
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 3
56169: NEG
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 2
56181: NEG
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 3
56203: NEG
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 4
56214: NEG
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 4
56225: NEG
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 4
56237: NEG
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 4
56260: NEG
56261: PUSH
56262: LD_INT 4
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 4
56272: NEG
56273: PUSH
56274: LD_INT 5
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 3
56284: NEG
56285: PUSH
56286: LD_INT 4
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 3
56296: NEG
56297: PUSH
56298: LD_INT 3
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 4
56308: NEG
56309: PUSH
56310: LD_INT 3
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 5
56320: NEG
56321: PUSH
56322: LD_INT 4
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 5
56332: NEG
56333: PUSH
56334: LD_INT 5
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 3
56344: NEG
56345: PUSH
56346: LD_INT 5
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 5
56356: NEG
56357: PUSH
56358: LD_INT 3
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56413: LD_ADDR_VAR 0 30
56417: PUSH
56418: LD_INT 4
56420: PUSH
56421: LD_INT 4
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 4
56430: PUSH
56431: LD_INT 3
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 5
56440: PUSH
56441: LD_INT 4
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 5
56450: PUSH
56451: LD_INT 5
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 4
56460: PUSH
56461: LD_INT 5
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 3
56470: PUSH
56471: LD_INT 4
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 3
56480: PUSH
56481: LD_INT 3
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 5
56490: PUSH
56491: LD_INT 3
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 3
56500: PUSH
56501: LD_INT 5
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 3
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: LD_INT 3
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: LD_INT 4
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 4
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: LD_INT 3
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: LD_INT 4
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: NEG
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 4
56603: NEG
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 4
56614: NEG
56615: PUSH
56616: LD_INT 1
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 3
56626: NEG
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 3
56637: NEG
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 4
56648: NEG
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 5
56659: NEG
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 5
56670: NEG
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 5
56682: NEG
56683: PUSH
56684: LD_INT 2
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 3
56694: NEG
56695: PUSH
56696: LD_INT 2
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 3
56705: NEG
56706: PUSH
56707: LD_INT 3
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 3
56717: NEG
56718: PUSH
56719: LD_INT 4
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 2
56729: NEG
56730: PUSH
56731: LD_INT 3
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: LD_INT 2
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 3
56753: NEG
56754: PUSH
56755: LD_INT 2
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 4
56765: NEG
56766: PUSH
56767: LD_INT 3
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 4
56777: NEG
56778: PUSH
56779: LD_INT 4
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 2
56789: NEG
56790: PUSH
56791: LD_INT 4
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 4
56801: NEG
56802: PUSH
56803: LD_INT 2
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: LD_INT 4
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: LD_INT 5
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 1
56835: PUSH
56836: LD_INT 4
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: LD_INT 3
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: LD_INT 3
56860: NEG
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: LD_INT 4
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: LD_INT 5
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 2
56892: PUSH
56893: LD_INT 3
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: NEG
56904: PUSH
56905: LD_INT 5
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56960: LD_ADDR_VAR 0 31
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: LD_INT 4
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: LD_INT 3
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: LD_INT 4
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: LD_INT 5
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 5
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: LD_INT 4
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: LD_INT 3
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 2
57039: PUSH
57040: LD_INT 5
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: NEG
57050: PUSH
57051: LD_INT 3
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 3
57060: NEG
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 3
57071: NEG
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 2
57083: NEG
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 3
57105: NEG
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 4
57116: NEG
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 4
57127: NEG
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 4
57139: NEG
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 2
57151: NEG
57152: PUSH
57153: LD_INT 2
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 4
57162: NEG
57163: PUSH
57164: LD_INT 4
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 4
57174: NEG
57175: PUSH
57176: LD_INT 5
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 3
57186: NEG
57187: PUSH
57188: LD_INT 4
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 3
57198: NEG
57199: PUSH
57200: LD_INT 3
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 4
57210: NEG
57211: PUSH
57212: LD_INT 3
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 5
57222: NEG
57223: PUSH
57224: LD_INT 4
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 5
57234: NEG
57235: PUSH
57236: LD_INT 5
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 3
57246: NEG
57247: PUSH
57248: LD_INT 5
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 5
57258: NEG
57259: PUSH
57260: LD_INT 3
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 3
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: LD_INT 4
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: LD_INT 3
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: PUSH
57304: LD_INT 2
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: LD_INT 2
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: LD_INT 3
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: LD_INT 4
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 2
57349: PUSH
57350: LD_INT 2
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 2
57360: NEG
57361: PUSH
57362: LD_INT 4
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 4
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 4
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 5
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 5
57403: PUSH
57404: LD_INT 1
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 4
57413: PUSH
57414: LD_INT 1
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 3
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 3
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 3
57444: PUSH
57445: LD_INT 2
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 5
57455: PUSH
57456: LD_INT 2
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57510: LD_ADDR_VAR 0 32
57514: PUSH
57515: LD_INT 4
57517: NEG
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 4
57528: NEG
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 3
57540: NEG
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 3
57551: NEG
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 4
57562: NEG
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 5
57573: NEG
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 5
57584: NEG
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 5
57596: NEG
57597: PUSH
57598: LD_INT 2
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 3
57608: NEG
57609: PUSH
57610: LD_INT 2
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 3
57619: NEG
57620: PUSH
57621: LD_INT 3
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 3
57631: NEG
57632: PUSH
57633: LD_INT 4
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: LD_INT 3
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 2
57655: NEG
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 3
57667: NEG
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 4
57679: NEG
57680: PUSH
57681: LD_INT 3
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 4
57691: NEG
57692: PUSH
57693: LD_INT 4
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: LD_INT 4
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 4
57715: NEG
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: LD_INT 4
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 5
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 4
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: LD_INT 3
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 3
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: LD_INT 4
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: LD_INT 5
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 2
57806: PUSH
57807: LD_INT 3
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: LD_INT 5
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 3
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 3
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 4
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 4
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 3
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 2
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 2
57890: PUSH
57891: LD_INT 1
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: PUSH
57902: LD_INT 2
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 4
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 4
57922: PUSH
57923: LD_INT 4
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 4
57932: PUSH
57933: LD_INT 3
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 5
57942: PUSH
57943: LD_INT 4
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 5
57952: PUSH
57953: LD_INT 5
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 4
57962: PUSH
57963: LD_INT 5
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 3
57972: PUSH
57973: LD_INT 4
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 3
57982: PUSH
57983: LD_INT 3
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 5
57992: PUSH
57993: LD_INT 3
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 3
58002: PUSH
58003: LD_INT 5
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58057: LD_ADDR_VAR 0 33
58061: PUSH
58062: LD_INT 4
58064: NEG
58065: PUSH
58066: LD_INT 4
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 4
58076: NEG
58077: PUSH
58078: LD_INT 5
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: NEG
58089: PUSH
58090: LD_INT 4
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 3
58100: NEG
58101: PUSH
58102: LD_INT 3
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 4
58112: NEG
58113: PUSH
58114: LD_INT 3
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 5
58124: NEG
58125: PUSH
58126: LD_INT 4
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 5
58136: NEG
58137: PUSH
58138: LD_INT 5
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 3
58148: NEG
58149: PUSH
58150: LD_INT 5
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 5
58160: NEG
58161: PUSH
58162: LD_INT 3
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: LD_INT 3
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_INT 4
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: LD_INT 3
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: LD_INT 2
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: LD_INT 3
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: LD_INT 4
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 2
58262: NEG
58263: PUSH
58264: LD_INT 4
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 4
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 4
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 5
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 5
58305: PUSH
58306: LD_INT 1
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 4
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 3
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 3
58335: PUSH
58336: LD_INT 1
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 3
58346: PUSH
58347: LD_INT 2
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 5
58357: PUSH
58358: LD_INT 2
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 3
58367: PUSH
58368: LD_INT 3
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 3
58377: PUSH
58378: LD_INT 2
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 4
58387: PUSH
58388: LD_INT 3
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 4
58397: PUSH
58398: LD_INT 4
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 3
58407: PUSH
58408: LD_INT 4
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: LD_INT 3
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 4
58437: PUSH
58438: LD_INT 2
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 2
58447: PUSH
58448: LD_INT 4
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: LD_INT 4
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: LD_INT 3
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: LD_INT 4
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: LD_INT 5
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: LD_INT 5
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: LD_INT 4
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 3
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 2
58529: PUSH
58530: LD_INT 5
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 2
58539: NEG
58540: PUSH
58541: LD_INT 3
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58595: LD_ADDR_VAR 0 34
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: LD_INT 4
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: LD_INT 5
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: LD_INT 4
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: LD_INT 3
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: LD_INT 3
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: LD_INT 4
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: LD_INT 5
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 2
58681: PUSH
58682: LD_INT 3
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: LD_INT 5
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 3
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 3
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 4
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 4
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 3
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 2
58765: PUSH
58766: LD_INT 1
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 2
58776: PUSH
58777: LD_INT 2
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 4
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 4
58797: PUSH
58798: LD_INT 4
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 4
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 5
58817: PUSH
58818: LD_INT 4
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 5
58827: PUSH
58828: LD_INT 5
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 4
58837: PUSH
58838: LD_INT 5
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 3
58847: PUSH
58848: LD_INT 4
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 3
58857: PUSH
58858: LD_INT 3
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 5
58867: PUSH
58868: LD_INT 3
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 3
58877: PUSH
58878: LD_INT 5
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: LD_INT 3
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: LD_INT 2
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: LD_INT 3
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: LD_INT 4
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: LD_INT 4
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: LD_INT 3
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: LD_INT 2
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 2
58959: PUSH
58960: LD_INT 4
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 2
58969: NEG
58970: PUSH
58971: LD_INT 2
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 4
58980: NEG
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 4
58991: NEG
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 3
59003: NEG
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 3
59014: NEG
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 4
59025: NEG
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 5
59036: NEG
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 5
59047: NEG
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 5
59059: NEG
59060: PUSH
59061: LD_INT 2
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 3
59071: NEG
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: ST_TO_ADDR
// end ; end ;
59127: GO 59130
59129: POP
// case btype of b_depot , b_warehouse :
59130: LD_VAR 0 1
59134: PUSH
59135: LD_INT 0
59137: DOUBLE
59138: EQUAL
59139: IFTRUE 59149
59141: LD_INT 1
59143: DOUBLE
59144: EQUAL
59145: IFTRUE 59149
59147: GO 59350
59149: POP
// case nation of nation_american :
59150: LD_VAR 0 5
59154: PUSH
59155: LD_INT 1
59157: DOUBLE
59158: EQUAL
59159: IFTRUE 59163
59161: GO 59219
59163: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59164: LD_ADDR_VAR 0 9
59168: PUSH
59169: LD_VAR 0 11
59173: PUSH
59174: LD_VAR 0 12
59178: PUSH
59179: LD_VAR 0 13
59183: PUSH
59184: LD_VAR 0 14
59188: PUSH
59189: LD_VAR 0 15
59193: PUSH
59194: LD_VAR 0 16
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: PUSH
59207: LD_VAR 0 4
59211: PUSH
59212: LD_INT 1
59214: PLUS
59215: ARRAY
59216: ST_TO_ADDR
59217: GO 59348
59219: LD_INT 2
59221: DOUBLE
59222: EQUAL
59223: IFTRUE 59227
59225: GO 59283
59227: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59228: LD_ADDR_VAR 0 9
59232: PUSH
59233: LD_VAR 0 17
59237: PUSH
59238: LD_VAR 0 18
59242: PUSH
59243: LD_VAR 0 19
59247: PUSH
59248: LD_VAR 0 20
59252: PUSH
59253: LD_VAR 0 21
59257: PUSH
59258: LD_VAR 0 22
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: PUSH
59271: LD_VAR 0 4
59275: PUSH
59276: LD_INT 1
59278: PLUS
59279: ARRAY
59280: ST_TO_ADDR
59281: GO 59348
59283: LD_INT 3
59285: DOUBLE
59286: EQUAL
59287: IFTRUE 59291
59289: GO 59347
59291: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59292: LD_ADDR_VAR 0 9
59296: PUSH
59297: LD_VAR 0 23
59301: PUSH
59302: LD_VAR 0 24
59306: PUSH
59307: LD_VAR 0 25
59311: PUSH
59312: LD_VAR 0 26
59316: PUSH
59317: LD_VAR 0 27
59321: PUSH
59322: LD_VAR 0 28
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: PUSH
59335: LD_VAR 0 4
59339: PUSH
59340: LD_INT 1
59342: PLUS
59343: ARRAY
59344: ST_TO_ADDR
59345: GO 59348
59347: POP
59348: GO 59903
59350: LD_INT 2
59352: DOUBLE
59353: EQUAL
59354: IFTRUE 59364
59356: LD_INT 3
59358: DOUBLE
59359: EQUAL
59360: IFTRUE 59364
59362: GO 59420
59364: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59365: LD_ADDR_VAR 0 9
59369: PUSH
59370: LD_VAR 0 29
59374: PUSH
59375: LD_VAR 0 30
59379: PUSH
59380: LD_VAR 0 31
59384: PUSH
59385: LD_VAR 0 32
59389: PUSH
59390: LD_VAR 0 33
59394: PUSH
59395: LD_VAR 0 34
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: PUSH
59408: LD_VAR 0 4
59412: PUSH
59413: LD_INT 1
59415: PLUS
59416: ARRAY
59417: ST_TO_ADDR
59418: GO 59903
59420: LD_INT 16
59422: DOUBLE
59423: EQUAL
59424: IFTRUE 59482
59426: LD_INT 17
59428: DOUBLE
59429: EQUAL
59430: IFTRUE 59482
59432: LD_INT 18
59434: DOUBLE
59435: EQUAL
59436: IFTRUE 59482
59438: LD_INT 19
59440: DOUBLE
59441: EQUAL
59442: IFTRUE 59482
59444: LD_INT 22
59446: DOUBLE
59447: EQUAL
59448: IFTRUE 59482
59450: LD_INT 20
59452: DOUBLE
59453: EQUAL
59454: IFTRUE 59482
59456: LD_INT 21
59458: DOUBLE
59459: EQUAL
59460: IFTRUE 59482
59462: LD_INT 23
59464: DOUBLE
59465: EQUAL
59466: IFTRUE 59482
59468: LD_INT 24
59470: DOUBLE
59471: EQUAL
59472: IFTRUE 59482
59474: LD_INT 25
59476: DOUBLE
59477: EQUAL
59478: IFTRUE 59482
59480: GO 59538
59482: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59483: LD_ADDR_VAR 0 9
59487: PUSH
59488: LD_VAR 0 35
59492: PUSH
59493: LD_VAR 0 36
59497: PUSH
59498: LD_VAR 0 37
59502: PUSH
59503: LD_VAR 0 38
59507: PUSH
59508: LD_VAR 0 39
59512: PUSH
59513: LD_VAR 0 40
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: PUSH
59526: LD_VAR 0 4
59530: PUSH
59531: LD_INT 1
59533: PLUS
59534: ARRAY
59535: ST_TO_ADDR
59536: GO 59903
59538: LD_INT 6
59540: DOUBLE
59541: EQUAL
59542: IFTRUE 59594
59544: LD_INT 7
59546: DOUBLE
59547: EQUAL
59548: IFTRUE 59594
59550: LD_INT 8
59552: DOUBLE
59553: EQUAL
59554: IFTRUE 59594
59556: LD_INT 13
59558: DOUBLE
59559: EQUAL
59560: IFTRUE 59594
59562: LD_INT 12
59564: DOUBLE
59565: EQUAL
59566: IFTRUE 59594
59568: LD_INT 15
59570: DOUBLE
59571: EQUAL
59572: IFTRUE 59594
59574: LD_INT 11
59576: DOUBLE
59577: EQUAL
59578: IFTRUE 59594
59580: LD_INT 14
59582: DOUBLE
59583: EQUAL
59584: IFTRUE 59594
59586: LD_INT 10
59588: DOUBLE
59589: EQUAL
59590: IFTRUE 59594
59592: GO 59650
59594: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59595: LD_ADDR_VAR 0 9
59599: PUSH
59600: LD_VAR 0 41
59604: PUSH
59605: LD_VAR 0 42
59609: PUSH
59610: LD_VAR 0 43
59614: PUSH
59615: LD_VAR 0 44
59619: PUSH
59620: LD_VAR 0 45
59624: PUSH
59625: LD_VAR 0 46
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: PUSH
59638: LD_VAR 0 4
59642: PUSH
59643: LD_INT 1
59645: PLUS
59646: ARRAY
59647: ST_TO_ADDR
59648: GO 59903
59650: LD_INT 36
59652: DOUBLE
59653: EQUAL
59654: IFTRUE 59658
59656: GO 59714
59658: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59659: LD_ADDR_VAR 0 9
59663: PUSH
59664: LD_VAR 0 47
59668: PUSH
59669: LD_VAR 0 48
59673: PUSH
59674: LD_VAR 0 49
59678: PUSH
59679: LD_VAR 0 50
59683: PUSH
59684: LD_VAR 0 51
59688: PUSH
59689: LD_VAR 0 52
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: PUSH
59702: LD_VAR 0 4
59706: PUSH
59707: LD_INT 1
59709: PLUS
59710: ARRAY
59711: ST_TO_ADDR
59712: GO 59903
59714: LD_INT 4
59716: DOUBLE
59717: EQUAL
59718: IFTRUE 59740
59720: LD_INT 5
59722: DOUBLE
59723: EQUAL
59724: IFTRUE 59740
59726: LD_INT 34
59728: DOUBLE
59729: EQUAL
59730: IFTRUE 59740
59732: LD_INT 37
59734: DOUBLE
59735: EQUAL
59736: IFTRUE 59740
59738: GO 59796
59740: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59741: LD_ADDR_VAR 0 9
59745: PUSH
59746: LD_VAR 0 53
59750: PUSH
59751: LD_VAR 0 54
59755: PUSH
59756: LD_VAR 0 55
59760: PUSH
59761: LD_VAR 0 56
59765: PUSH
59766: LD_VAR 0 57
59770: PUSH
59771: LD_VAR 0 58
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: PUSH
59784: LD_VAR 0 4
59788: PUSH
59789: LD_INT 1
59791: PLUS
59792: ARRAY
59793: ST_TO_ADDR
59794: GO 59903
59796: LD_INT 31
59798: DOUBLE
59799: EQUAL
59800: IFTRUE 59846
59802: LD_INT 32
59804: DOUBLE
59805: EQUAL
59806: IFTRUE 59846
59808: LD_INT 33
59810: DOUBLE
59811: EQUAL
59812: IFTRUE 59846
59814: LD_INT 27
59816: DOUBLE
59817: EQUAL
59818: IFTRUE 59846
59820: LD_INT 26
59822: DOUBLE
59823: EQUAL
59824: IFTRUE 59846
59826: LD_INT 28
59828: DOUBLE
59829: EQUAL
59830: IFTRUE 59846
59832: LD_INT 29
59834: DOUBLE
59835: EQUAL
59836: IFTRUE 59846
59838: LD_INT 30
59840: DOUBLE
59841: EQUAL
59842: IFTRUE 59846
59844: GO 59902
59846: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59847: LD_ADDR_VAR 0 9
59851: PUSH
59852: LD_VAR 0 59
59856: PUSH
59857: LD_VAR 0 60
59861: PUSH
59862: LD_VAR 0 61
59866: PUSH
59867: LD_VAR 0 62
59871: PUSH
59872: LD_VAR 0 63
59876: PUSH
59877: LD_VAR 0 64
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: PUSH
59890: LD_VAR 0 4
59894: PUSH
59895: LD_INT 1
59897: PLUS
59898: ARRAY
59899: ST_TO_ADDR
59900: GO 59903
59902: POP
// temp_list2 = [ ] ;
59903: LD_ADDR_VAR 0 10
59907: PUSH
59908: EMPTY
59909: ST_TO_ADDR
// for i in temp_list do
59910: LD_ADDR_VAR 0 8
59914: PUSH
59915: LD_VAR 0 9
59919: PUSH
59920: FOR_IN
59921: IFFALSE 59973
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59923: LD_ADDR_VAR 0 10
59927: PUSH
59928: LD_VAR 0 10
59932: PUSH
59933: LD_VAR 0 8
59937: PUSH
59938: LD_INT 1
59940: ARRAY
59941: PUSH
59942: LD_VAR 0 2
59946: PLUS
59947: PUSH
59948: LD_VAR 0 8
59952: PUSH
59953: LD_INT 2
59955: ARRAY
59956: PUSH
59957: LD_VAR 0 3
59961: PLUS
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: EMPTY
59968: LIST
59969: ADD
59970: ST_TO_ADDR
59971: GO 59920
59973: POP
59974: POP
// result = temp_list2 ;
59975: LD_ADDR_VAR 0 7
59979: PUSH
59980: LD_VAR 0 10
59984: ST_TO_ADDR
// end ;
59985: LD_VAR 0 7
59989: RET
// export function EnemyInRange ( unit , dist ) ; begin
59990: LD_INT 0
59992: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59993: LD_ADDR_VAR 0 3
59997: PUSH
59998: LD_VAR 0 1
60002: PPUSH
60003: CALL_OW 255
60007: PPUSH
60008: LD_VAR 0 1
60012: PPUSH
60013: CALL_OW 250
60017: PPUSH
60018: LD_VAR 0 1
60022: PPUSH
60023: CALL_OW 251
60027: PPUSH
60028: LD_VAR 0 2
60032: PPUSH
60033: CALL 33392 0 4
60037: PUSH
60038: LD_INT 4
60040: ARRAY
60041: ST_TO_ADDR
// end ;
60042: LD_VAR 0 3
60046: RET
// export function PlayerSeeMe ( unit ) ; begin
60047: LD_INT 0
60049: PPUSH
// result := See ( your_side , unit ) ;
60050: LD_ADDR_VAR 0 2
60054: PUSH
60055: LD_OWVAR 2
60059: PPUSH
60060: LD_VAR 0 1
60064: PPUSH
60065: CALL_OW 292
60069: ST_TO_ADDR
// end ;
60070: LD_VAR 0 2
60074: RET
// export function ReverseDir ( unit ) ; begin
60075: LD_INT 0
60077: PPUSH
// if not unit then
60078: LD_VAR 0 1
60082: NOT
60083: IFFALSE 60087
// exit ;
60085: GO 60110
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60087: LD_ADDR_VAR 0 2
60091: PUSH
60092: LD_VAR 0 1
60096: PPUSH
60097: CALL_OW 254
60101: PUSH
60102: LD_INT 3
60104: PLUS
60105: PUSH
60106: LD_INT 6
60108: MOD
60109: ST_TO_ADDR
// end ;
60110: LD_VAR 0 2
60114: RET
// export function ReverseArray ( array ) ; var i ; begin
60115: LD_INT 0
60117: PPUSH
60118: PPUSH
// if not array then
60119: LD_VAR 0 1
60123: NOT
60124: IFFALSE 60128
// exit ;
60126: GO 60183
// result := [ ] ;
60128: LD_ADDR_VAR 0 2
60132: PUSH
60133: EMPTY
60134: ST_TO_ADDR
// for i := array downto 1 do
60135: LD_ADDR_VAR 0 3
60139: PUSH
60140: DOUBLE
60141: LD_VAR 0 1
60145: INC
60146: ST_TO_ADDR
60147: LD_INT 1
60149: PUSH
60150: FOR_DOWNTO
60151: IFFALSE 60181
// result := Join ( result , array [ i ] ) ;
60153: LD_ADDR_VAR 0 2
60157: PUSH
60158: LD_VAR 0 2
60162: PPUSH
60163: LD_VAR 0 1
60167: PUSH
60168: LD_VAR 0 3
60172: ARRAY
60173: PPUSH
60174: CALL 64827 0 2
60178: ST_TO_ADDR
60179: GO 60150
60181: POP
60182: POP
// end ;
60183: LD_VAR 0 2
60187: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60188: LD_INT 0
60190: PPUSH
60191: PPUSH
60192: PPUSH
60193: PPUSH
60194: PPUSH
60195: PPUSH
// if not unit or not hexes then
60196: LD_VAR 0 1
60200: NOT
60201: PUSH
60202: LD_VAR 0 2
60206: NOT
60207: OR
60208: IFFALSE 60212
// exit ;
60210: GO 60335
// dist := 9999 ;
60212: LD_ADDR_VAR 0 5
60216: PUSH
60217: LD_INT 9999
60219: ST_TO_ADDR
// for i = 1 to hexes do
60220: LD_ADDR_VAR 0 4
60224: PUSH
60225: DOUBLE
60226: LD_INT 1
60228: DEC
60229: ST_TO_ADDR
60230: LD_VAR 0 2
60234: PUSH
60235: FOR_TO
60236: IFFALSE 60323
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60238: LD_ADDR_VAR 0 6
60242: PUSH
60243: LD_VAR 0 1
60247: PPUSH
60248: LD_VAR 0 2
60252: PUSH
60253: LD_VAR 0 4
60257: ARRAY
60258: PUSH
60259: LD_INT 1
60261: ARRAY
60262: PPUSH
60263: LD_VAR 0 2
60267: PUSH
60268: LD_VAR 0 4
60272: ARRAY
60273: PUSH
60274: LD_INT 2
60276: ARRAY
60277: PPUSH
60278: CALL_OW 297
60282: ST_TO_ADDR
// if tdist < dist then
60283: LD_VAR 0 6
60287: PUSH
60288: LD_VAR 0 5
60292: LESS
60293: IFFALSE 60321
// begin hex := hexes [ i ] ;
60295: LD_ADDR_VAR 0 8
60299: PUSH
60300: LD_VAR 0 2
60304: PUSH
60305: LD_VAR 0 4
60309: ARRAY
60310: ST_TO_ADDR
// dist := tdist ;
60311: LD_ADDR_VAR 0 5
60315: PUSH
60316: LD_VAR 0 6
60320: ST_TO_ADDR
// end ; end ;
60321: GO 60235
60323: POP
60324: POP
// result := hex ;
60325: LD_ADDR_VAR 0 3
60329: PUSH
60330: LD_VAR 0 8
60334: ST_TO_ADDR
// end ;
60335: LD_VAR 0 3
60339: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60340: LD_INT 0
60342: PPUSH
60343: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60344: LD_VAR 0 1
60348: NOT
60349: PUSH
60350: LD_VAR 0 1
60354: PUSH
60355: LD_INT 21
60357: PUSH
60358: LD_INT 2
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 23
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PPUSH
60379: CALL_OW 69
60383: IN
60384: NOT
60385: OR
60386: IFFALSE 60390
// exit ;
60388: GO 60437
// for i = 1 to 3 do
60390: LD_ADDR_VAR 0 3
60394: PUSH
60395: DOUBLE
60396: LD_INT 1
60398: DEC
60399: ST_TO_ADDR
60400: LD_INT 3
60402: PUSH
60403: FOR_TO
60404: IFFALSE 60435
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60406: LD_VAR 0 1
60410: PPUSH
60411: CALL_OW 250
60415: PPUSH
60416: LD_VAR 0 1
60420: PPUSH
60421: CALL_OW 251
60425: PPUSH
60426: LD_INT 1
60428: PPUSH
60429: CALL_OW 453
60433: GO 60403
60435: POP
60436: POP
// end ;
60437: LD_VAR 0 2
60441: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60442: LD_INT 0
60444: PPUSH
60445: PPUSH
60446: PPUSH
60447: PPUSH
60448: PPUSH
60449: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60450: LD_VAR 0 1
60454: NOT
60455: PUSH
60456: LD_VAR 0 2
60460: NOT
60461: OR
60462: PUSH
60463: LD_VAR 0 1
60467: PPUSH
60468: CALL_OW 314
60472: OR
60473: IFFALSE 60477
// exit ;
60475: GO 60944
// if GetLives ( i ) < 250 then
60477: LD_VAR 0 4
60481: PPUSH
60482: CALL_OW 256
60486: PUSH
60487: LD_INT 250
60489: LESS
60490: IFFALSE 60503
// begin ComAutodestruct ( i ) ;
60492: LD_VAR 0 4
60496: PPUSH
60497: CALL 60340 0 1
// exit ;
60501: GO 60944
// end ; x := GetX ( enemy_unit ) ;
60503: LD_ADDR_VAR 0 7
60507: PUSH
60508: LD_VAR 0 2
60512: PPUSH
60513: CALL_OW 250
60517: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60518: LD_ADDR_VAR 0 8
60522: PUSH
60523: LD_VAR 0 2
60527: PPUSH
60528: CALL_OW 251
60532: ST_TO_ADDR
// if not x or not y then
60533: LD_VAR 0 7
60537: NOT
60538: PUSH
60539: LD_VAR 0 8
60543: NOT
60544: OR
60545: IFFALSE 60549
// exit ;
60547: GO 60944
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60549: LD_ADDR_VAR 0 6
60553: PUSH
60554: LD_VAR 0 7
60558: PPUSH
60559: LD_INT 0
60561: PPUSH
60562: LD_INT 4
60564: PPUSH
60565: CALL_OW 272
60569: PUSH
60570: LD_VAR 0 8
60574: PPUSH
60575: LD_INT 0
60577: PPUSH
60578: LD_INT 4
60580: PPUSH
60581: CALL_OW 273
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_VAR 0 7
60594: PPUSH
60595: LD_INT 1
60597: PPUSH
60598: LD_INT 4
60600: PPUSH
60601: CALL_OW 272
60605: PUSH
60606: LD_VAR 0 8
60610: PPUSH
60611: LD_INT 1
60613: PPUSH
60614: LD_INT 4
60616: PPUSH
60617: CALL_OW 273
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_VAR 0 7
60630: PPUSH
60631: LD_INT 2
60633: PPUSH
60634: LD_INT 4
60636: PPUSH
60637: CALL_OW 272
60641: PUSH
60642: LD_VAR 0 8
60646: PPUSH
60647: LD_INT 2
60649: PPUSH
60650: LD_INT 4
60652: PPUSH
60653: CALL_OW 273
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_VAR 0 7
60666: PPUSH
60667: LD_INT 3
60669: PPUSH
60670: LD_INT 4
60672: PPUSH
60673: CALL_OW 272
60677: PUSH
60678: LD_VAR 0 8
60682: PPUSH
60683: LD_INT 3
60685: PPUSH
60686: LD_INT 4
60688: PPUSH
60689: CALL_OW 273
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_VAR 0 7
60702: PPUSH
60703: LD_INT 4
60705: PPUSH
60706: LD_INT 4
60708: PPUSH
60709: CALL_OW 272
60713: PUSH
60714: LD_VAR 0 8
60718: PPUSH
60719: LD_INT 4
60721: PPUSH
60722: LD_INT 4
60724: PPUSH
60725: CALL_OW 273
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_VAR 0 7
60738: PPUSH
60739: LD_INT 5
60741: PPUSH
60742: LD_INT 4
60744: PPUSH
60745: CALL_OW 272
60749: PUSH
60750: LD_VAR 0 8
60754: PPUSH
60755: LD_INT 5
60757: PPUSH
60758: LD_INT 4
60760: PPUSH
60761: CALL_OW 273
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: ST_TO_ADDR
// for i = tmp downto 1 do
60778: LD_ADDR_VAR 0 4
60782: PUSH
60783: DOUBLE
60784: LD_VAR 0 6
60788: INC
60789: ST_TO_ADDR
60790: LD_INT 1
60792: PUSH
60793: FOR_DOWNTO
60794: IFFALSE 60895
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60796: LD_VAR 0 6
60800: PUSH
60801: LD_VAR 0 4
60805: ARRAY
60806: PUSH
60807: LD_INT 1
60809: ARRAY
60810: PPUSH
60811: LD_VAR 0 6
60815: PUSH
60816: LD_VAR 0 4
60820: ARRAY
60821: PUSH
60822: LD_INT 2
60824: ARRAY
60825: PPUSH
60826: CALL_OW 488
60830: NOT
60831: PUSH
60832: LD_VAR 0 6
60836: PUSH
60837: LD_VAR 0 4
60841: ARRAY
60842: PUSH
60843: LD_INT 1
60845: ARRAY
60846: PPUSH
60847: LD_VAR 0 6
60851: PUSH
60852: LD_VAR 0 4
60856: ARRAY
60857: PUSH
60858: LD_INT 2
60860: ARRAY
60861: PPUSH
60862: CALL_OW 428
60866: PUSH
60867: LD_INT 0
60869: NONEQUAL
60870: OR
60871: IFFALSE 60893
// tmp := Delete ( tmp , i ) ;
60873: LD_ADDR_VAR 0 6
60877: PUSH
60878: LD_VAR 0 6
60882: PPUSH
60883: LD_VAR 0 4
60887: PPUSH
60888: CALL_OW 3
60892: ST_TO_ADDR
60893: GO 60793
60895: POP
60896: POP
// j := GetClosestHex ( unit , tmp ) ;
60897: LD_ADDR_VAR 0 5
60901: PUSH
60902: LD_VAR 0 1
60906: PPUSH
60907: LD_VAR 0 6
60911: PPUSH
60912: CALL 60188 0 2
60916: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60917: LD_VAR 0 1
60921: PPUSH
60922: LD_VAR 0 5
60926: PUSH
60927: LD_INT 1
60929: ARRAY
60930: PPUSH
60931: LD_VAR 0 5
60935: PUSH
60936: LD_INT 2
60938: ARRAY
60939: PPUSH
60940: CALL_OW 111
// end ;
60944: LD_VAR 0 3
60948: RET
// export function PrepareApemanSoldier ( ) ; begin
60949: LD_INT 0
60951: PPUSH
// uc_nation := 0 ;
60952: LD_ADDR_OWVAR 21
60956: PUSH
60957: LD_INT 0
60959: ST_TO_ADDR
// hc_sex := sex_male ;
60960: LD_ADDR_OWVAR 27
60964: PUSH
60965: LD_INT 1
60967: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60968: LD_ADDR_OWVAR 28
60972: PUSH
60973: LD_INT 15
60975: ST_TO_ADDR
// hc_gallery :=  ;
60976: LD_ADDR_OWVAR 33
60980: PUSH
60981: LD_STRING 
60983: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60984: LD_ADDR_OWVAR 31
60988: PUSH
60989: LD_INT 0
60991: PPUSH
60992: LD_INT 3
60994: PPUSH
60995: CALL_OW 12
60999: PUSH
61000: LD_INT 0
61002: PPUSH
61003: LD_INT 3
61005: PPUSH
61006: CALL_OW 12
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: ST_TO_ADDR
// end ;
61023: LD_VAR 0 1
61027: RET
// export function PrepareApemanEngineer ( ) ; begin
61028: LD_INT 0
61030: PPUSH
// uc_nation := 0 ;
61031: LD_ADDR_OWVAR 21
61035: PUSH
61036: LD_INT 0
61038: ST_TO_ADDR
// hc_sex := sex_male ;
61039: LD_ADDR_OWVAR 27
61043: PUSH
61044: LD_INT 1
61046: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61047: LD_ADDR_OWVAR 28
61051: PUSH
61052: LD_INT 16
61054: ST_TO_ADDR
// hc_gallery :=  ;
61055: LD_ADDR_OWVAR 33
61059: PUSH
61060: LD_STRING 
61062: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61063: LD_ADDR_OWVAR 31
61067: PUSH
61068: LD_INT 0
61070: PPUSH
61071: LD_INT 3
61073: PPUSH
61074: CALL_OW 12
61078: PUSH
61079: LD_INT 0
61081: PPUSH
61082: LD_INT 3
61084: PPUSH
61085: CALL_OW 12
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: ST_TO_ADDR
// end ;
61102: LD_VAR 0 1
61106: RET
// export function PrepareApeman ( agressivity ) ; begin
61107: LD_INT 0
61109: PPUSH
// uc_side := 0 ;
61110: LD_ADDR_OWVAR 20
61114: PUSH
61115: LD_INT 0
61117: ST_TO_ADDR
// uc_nation := 0 ;
61118: LD_ADDR_OWVAR 21
61122: PUSH
61123: LD_INT 0
61125: ST_TO_ADDR
// hc_sex := sex_male ;
61126: LD_ADDR_OWVAR 27
61130: PUSH
61131: LD_INT 1
61133: ST_TO_ADDR
// hc_class := class_apeman ;
61134: LD_ADDR_OWVAR 28
61138: PUSH
61139: LD_INT 12
61141: ST_TO_ADDR
// hc_gallery :=  ;
61142: LD_ADDR_OWVAR 33
61146: PUSH
61147: LD_STRING 
61149: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61150: LD_ADDR_OWVAR 35
61154: PUSH
61155: LD_VAR 0 1
61159: NEG
61160: PPUSH
61161: LD_VAR 0 1
61165: PPUSH
61166: CALL_OW 12
61170: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61171: LD_ADDR_OWVAR 31
61175: PUSH
61176: LD_INT 0
61178: PPUSH
61179: LD_INT 3
61181: PPUSH
61182: CALL_OW 12
61186: PUSH
61187: LD_INT 0
61189: PPUSH
61190: LD_INT 3
61192: PPUSH
61193: CALL_OW 12
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: ST_TO_ADDR
// end ;
61210: LD_VAR 0 2
61214: RET
// export function PrepareTiger ( agressivity ) ; begin
61215: LD_INT 0
61217: PPUSH
// uc_side := 0 ;
61218: LD_ADDR_OWVAR 20
61222: PUSH
61223: LD_INT 0
61225: ST_TO_ADDR
// uc_nation := 0 ;
61226: LD_ADDR_OWVAR 21
61230: PUSH
61231: LD_INT 0
61233: ST_TO_ADDR
// hc_class := class_tiger ;
61234: LD_ADDR_OWVAR 28
61238: PUSH
61239: LD_INT 14
61241: ST_TO_ADDR
// hc_gallery :=  ;
61242: LD_ADDR_OWVAR 33
61246: PUSH
61247: LD_STRING 
61249: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61250: LD_ADDR_OWVAR 35
61254: PUSH
61255: LD_VAR 0 1
61259: NEG
61260: PPUSH
61261: LD_VAR 0 1
61265: PPUSH
61266: CALL_OW 12
61270: ST_TO_ADDR
// end ;
61271: LD_VAR 0 2
61275: RET
// export function PrepareEnchidna ( ) ; begin
61276: LD_INT 0
61278: PPUSH
// uc_side := 0 ;
61279: LD_ADDR_OWVAR 20
61283: PUSH
61284: LD_INT 0
61286: ST_TO_ADDR
// uc_nation := 0 ;
61287: LD_ADDR_OWVAR 21
61291: PUSH
61292: LD_INT 0
61294: ST_TO_ADDR
// hc_class := class_baggie ;
61295: LD_ADDR_OWVAR 28
61299: PUSH
61300: LD_INT 13
61302: ST_TO_ADDR
// hc_gallery :=  ;
61303: LD_ADDR_OWVAR 33
61307: PUSH
61308: LD_STRING 
61310: ST_TO_ADDR
// end ;
61311: LD_VAR 0 1
61315: RET
// export function PrepareFrog ( ) ; begin
61316: LD_INT 0
61318: PPUSH
// uc_side := 0 ;
61319: LD_ADDR_OWVAR 20
61323: PUSH
61324: LD_INT 0
61326: ST_TO_ADDR
// uc_nation := 0 ;
61327: LD_ADDR_OWVAR 21
61331: PUSH
61332: LD_INT 0
61334: ST_TO_ADDR
// hc_class := class_frog ;
61335: LD_ADDR_OWVAR 28
61339: PUSH
61340: LD_INT 19
61342: ST_TO_ADDR
// hc_gallery :=  ;
61343: LD_ADDR_OWVAR 33
61347: PUSH
61348: LD_STRING 
61350: ST_TO_ADDR
// end ;
61351: LD_VAR 0 1
61355: RET
// export function PrepareFish ( ) ; begin
61356: LD_INT 0
61358: PPUSH
// uc_side := 0 ;
61359: LD_ADDR_OWVAR 20
61363: PUSH
61364: LD_INT 0
61366: ST_TO_ADDR
// uc_nation := 0 ;
61367: LD_ADDR_OWVAR 21
61371: PUSH
61372: LD_INT 0
61374: ST_TO_ADDR
// hc_class := class_fish ;
61375: LD_ADDR_OWVAR 28
61379: PUSH
61380: LD_INT 20
61382: ST_TO_ADDR
// hc_gallery :=  ;
61383: LD_ADDR_OWVAR 33
61387: PUSH
61388: LD_STRING 
61390: ST_TO_ADDR
// end ;
61391: LD_VAR 0 1
61395: RET
// export function PrepareBird ( ) ; begin
61396: LD_INT 0
61398: PPUSH
// uc_side := 0 ;
61399: LD_ADDR_OWVAR 20
61403: PUSH
61404: LD_INT 0
61406: ST_TO_ADDR
// uc_nation := 0 ;
61407: LD_ADDR_OWVAR 21
61411: PUSH
61412: LD_INT 0
61414: ST_TO_ADDR
// hc_class := class_phororhacos ;
61415: LD_ADDR_OWVAR 28
61419: PUSH
61420: LD_INT 18
61422: ST_TO_ADDR
// hc_gallery :=  ;
61423: LD_ADDR_OWVAR 33
61427: PUSH
61428: LD_STRING 
61430: ST_TO_ADDR
// end ;
61431: LD_VAR 0 1
61435: RET
// export function PrepareHorse ( ) ; begin
61436: LD_INT 0
61438: PPUSH
// uc_side := 0 ;
61439: LD_ADDR_OWVAR 20
61443: PUSH
61444: LD_INT 0
61446: ST_TO_ADDR
// uc_nation := 0 ;
61447: LD_ADDR_OWVAR 21
61451: PUSH
61452: LD_INT 0
61454: ST_TO_ADDR
// hc_class := class_horse ;
61455: LD_ADDR_OWVAR 28
61459: PUSH
61460: LD_INT 21
61462: ST_TO_ADDR
// hc_gallery :=  ;
61463: LD_ADDR_OWVAR 33
61467: PUSH
61468: LD_STRING 
61470: ST_TO_ADDR
// end ;
61471: LD_VAR 0 1
61475: RET
// export function PrepareMastodont ( ) ; begin
61476: LD_INT 0
61478: PPUSH
// uc_side := 0 ;
61479: LD_ADDR_OWVAR 20
61483: PUSH
61484: LD_INT 0
61486: ST_TO_ADDR
// uc_nation := 0 ;
61487: LD_ADDR_OWVAR 21
61491: PUSH
61492: LD_INT 0
61494: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61495: LD_ADDR_OWVAR 37
61499: PUSH
61500: LD_INT 31
61502: ST_TO_ADDR
// vc_control := control_rider ;
61503: LD_ADDR_OWVAR 38
61507: PUSH
61508: LD_INT 4
61510: ST_TO_ADDR
// end ;
61511: LD_VAR 0 1
61515: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61516: LD_INT 0
61518: PPUSH
61519: PPUSH
61520: PPUSH
// uc_side = 0 ;
61521: LD_ADDR_OWVAR 20
61525: PUSH
61526: LD_INT 0
61528: ST_TO_ADDR
// uc_nation = 0 ;
61529: LD_ADDR_OWVAR 21
61533: PUSH
61534: LD_INT 0
61536: ST_TO_ADDR
// InitHc_All ( ) ;
61537: CALL_OW 584
// InitVc ;
61541: CALL_OW 20
// if mastodonts then
61545: LD_VAR 0 6
61549: IFFALSE 61616
// for i = 1 to mastodonts do
61551: LD_ADDR_VAR 0 11
61555: PUSH
61556: DOUBLE
61557: LD_INT 1
61559: DEC
61560: ST_TO_ADDR
61561: LD_VAR 0 6
61565: PUSH
61566: FOR_TO
61567: IFFALSE 61614
// begin vc_chassis := 31 ;
61569: LD_ADDR_OWVAR 37
61573: PUSH
61574: LD_INT 31
61576: ST_TO_ADDR
// vc_control := control_rider ;
61577: LD_ADDR_OWVAR 38
61581: PUSH
61582: LD_INT 4
61584: ST_TO_ADDR
// animal := CreateVehicle ;
61585: LD_ADDR_VAR 0 12
61589: PUSH
61590: CALL_OW 45
61594: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61595: LD_VAR 0 12
61599: PPUSH
61600: LD_VAR 0 8
61604: PPUSH
61605: LD_INT 0
61607: PPUSH
61608: CALL 63744 0 3
// end ;
61612: GO 61566
61614: POP
61615: POP
// if horses then
61616: LD_VAR 0 5
61620: IFFALSE 61687
// for i = 1 to horses do
61622: LD_ADDR_VAR 0 11
61626: PUSH
61627: DOUBLE
61628: LD_INT 1
61630: DEC
61631: ST_TO_ADDR
61632: LD_VAR 0 5
61636: PUSH
61637: FOR_TO
61638: IFFALSE 61685
// begin hc_class := 21 ;
61640: LD_ADDR_OWVAR 28
61644: PUSH
61645: LD_INT 21
61647: ST_TO_ADDR
// hc_gallery :=  ;
61648: LD_ADDR_OWVAR 33
61652: PUSH
61653: LD_STRING 
61655: ST_TO_ADDR
// animal := CreateHuman ;
61656: LD_ADDR_VAR 0 12
61660: PUSH
61661: CALL_OW 44
61665: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61666: LD_VAR 0 12
61670: PPUSH
61671: LD_VAR 0 8
61675: PPUSH
61676: LD_INT 0
61678: PPUSH
61679: CALL 63744 0 3
// end ;
61683: GO 61637
61685: POP
61686: POP
// if birds then
61687: LD_VAR 0 1
61691: IFFALSE 61758
// for i = 1 to birds do
61693: LD_ADDR_VAR 0 11
61697: PUSH
61698: DOUBLE
61699: LD_INT 1
61701: DEC
61702: ST_TO_ADDR
61703: LD_VAR 0 1
61707: PUSH
61708: FOR_TO
61709: IFFALSE 61756
// begin hc_class = 18 ;
61711: LD_ADDR_OWVAR 28
61715: PUSH
61716: LD_INT 18
61718: ST_TO_ADDR
// hc_gallery =  ;
61719: LD_ADDR_OWVAR 33
61723: PUSH
61724: LD_STRING 
61726: ST_TO_ADDR
// animal := CreateHuman ;
61727: LD_ADDR_VAR 0 12
61731: PUSH
61732: CALL_OW 44
61736: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61737: LD_VAR 0 12
61741: PPUSH
61742: LD_VAR 0 8
61746: PPUSH
61747: LD_INT 0
61749: PPUSH
61750: CALL 63744 0 3
// end ;
61754: GO 61708
61756: POP
61757: POP
// if tigers then
61758: LD_VAR 0 2
61762: IFFALSE 61846
// for i = 1 to tigers do
61764: LD_ADDR_VAR 0 11
61768: PUSH
61769: DOUBLE
61770: LD_INT 1
61772: DEC
61773: ST_TO_ADDR
61774: LD_VAR 0 2
61778: PUSH
61779: FOR_TO
61780: IFFALSE 61844
// begin hc_class = class_tiger ;
61782: LD_ADDR_OWVAR 28
61786: PUSH
61787: LD_INT 14
61789: ST_TO_ADDR
// hc_gallery =  ;
61790: LD_ADDR_OWVAR 33
61794: PUSH
61795: LD_STRING 
61797: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61798: LD_ADDR_OWVAR 35
61802: PUSH
61803: LD_INT 7
61805: NEG
61806: PPUSH
61807: LD_INT 7
61809: PPUSH
61810: CALL_OW 12
61814: ST_TO_ADDR
// animal := CreateHuman ;
61815: LD_ADDR_VAR 0 12
61819: PUSH
61820: CALL_OW 44
61824: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61825: LD_VAR 0 12
61829: PPUSH
61830: LD_VAR 0 8
61834: PPUSH
61835: LD_INT 0
61837: PPUSH
61838: CALL 63744 0 3
// end ;
61842: GO 61779
61844: POP
61845: POP
// if apemans then
61846: LD_VAR 0 3
61850: IFFALSE 61973
// for i = 1 to apemans do
61852: LD_ADDR_VAR 0 11
61856: PUSH
61857: DOUBLE
61858: LD_INT 1
61860: DEC
61861: ST_TO_ADDR
61862: LD_VAR 0 3
61866: PUSH
61867: FOR_TO
61868: IFFALSE 61971
// begin hc_class = class_apeman ;
61870: LD_ADDR_OWVAR 28
61874: PUSH
61875: LD_INT 12
61877: ST_TO_ADDR
// hc_gallery =  ;
61878: LD_ADDR_OWVAR 33
61882: PUSH
61883: LD_STRING 
61885: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61886: LD_ADDR_OWVAR 35
61890: PUSH
61891: LD_INT 2
61893: NEG
61894: PPUSH
61895: LD_INT 2
61897: PPUSH
61898: CALL_OW 12
61902: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61903: LD_ADDR_OWVAR 31
61907: PUSH
61908: LD_INT 1
61910: PPUSH
61911: LD_INT 3
61913: PPUSH
61914: CALL_OW 12
61918: PUSH
61919: LD_INT 1
61921: PPUSH
61922: LD_INT 3
61924: PPUSH
61925: CALL_OW 12
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: ST_TO_ADDR
// animal := CreateHuman ;
61942: LD_ADDR_VAR 0 12
61946: PUSH
61947: CALL_OW 44
61951: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61952: LD_VAR 0 12
61956: PPUSH
61957: LD_VAR 0 8
61961: PPUSH
61962: LD_INT 0
61964: PPUSH
61965: CALL 63744 0 3
// end ;
61969: GO 61867
61971: POP
61972: POP
// if enchidnas then
61973: LD_VAR 0 4
61977: IFFALSE 62044
// for i = 1 to enchidnas do
61979: LD_ADDR_VAR 0 11
61983: PUSH
61984: DOUBLE
61985: LD_INT 1
61987: DEC
61988: ST_TO_ADDR
61989: LD_VAR 0 4
61993: PUSH
61994: FOR_TO
61995: IFFALSE 62042
// begin hc_class = 13 ;
61997: LD_ADDR_OWVAR 28
62001: PUSH
62002: LD_INT 13
62004: ST_TO_ADDR
// hc_gallery =  ;
62005: LD_ADDR_OWVAR 33
62009: PUSH
62010: LD_STRING 
62012: ST_TO_ADDR
// animal := CreateHuman ;
62013: LD_ADDR_VAR 0 12
62017: PUSH
62018: CALL_OW 44
62022: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62023: LD_VAR 0 12
62027: PPUSH
62028: LD_VAR 0 8
62032: PPUSH
62033: LD_INT 0
62035: PPUSH
62036: CALL 63744 0 3
// end ;
62040: GO 61994
62042: POP
62043: POP
// if fishes then
62044: LD_VAR 0 7
62048: IFFALSE 62115
// for i = 1 to fishes do
62050: LD_ADDR_VAR 0 11
62054: PUSH
62055: DOUBLE
62056: LD_INT 1
62058: DEC
62059: ST_TO_ADDR
62060: LD_VAR 0 7
62064: PUSH
62065: FOR_TO
62066: IFFALSE 62113
// begin hc_class = 20 ;
62068: LD_ADDR_OWVAR 28
62072: PUSH
62073: LD_INT 20
62075: ST_TO_ADDR
// hc_gallery =  ;
62076: LD_ADDR_OWVAR 33
62080: PUSH
62081: LD_STRING 
62083: ST_TO_ADDR
// animal := CreateHuman ;
62084: LD_ADDR_VAR 0 12
62088: PUSH
62089: CALL_OW 44
62093: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62094: LD_VAR 0 12
62098: PPUSH
62099: LD_VAR 0 9
62103: PPUSH
62104: LD_INT 0
62106: PPUSH
62107: CALL 63744 0 3
// end ;
62111: GO 62065
62113: POP
62114: POP
// end ;
62115: LD_VAR 0 10
62119: RET
// export function WantHeal ( sci , unit ) ; begin
62120: LD_INT 0
62122: PPUSH
// if GetTaskList ( sci ) > 0 then
62123: LD_VAR 0 1
62127: PPUSH
62128: CALL_OW 437
62132: PUSH
62133: LD_INT 0
62135: GREATER
62136: IFFALSE 62206
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62138: LD_VAR 0 1
62142: PPUSH
62143: CALL_OW 437
62147: PUSH
62148: LD_INT 1
62150: ARRAY
62151: PUSH
62152: LD_INT 1
62154: ARRAY
62155: PUSH
62156: LD_STRING l
62158: EQUAL
62159: PUSH
62160: LD_VAR 0 1
62164: PPUSH
62165: CALL_OW 437
62169: PUSH
62170: LD_INT 1
62172: ARRAY
62173: PUSH
62174: LD_INT 4
62176: ARRAY
62177: PUSH
62178: LD_VAR 0 2
62182: EQUAL
62183: AND
62184: IFFALSE 62196
// result := true else
62186: LD_ADDR_VAR 0 3
62190: PUSH
62191: LD_INT 1
62193: ST_TO_ADDR
62194: GO 62204
// result := false ;
62196: LD_ADDR_VAR 0 3
62200: PUSH
62201: LD_INT 0
62203: ST_TO_ADDR
// end else
62204: GO 62214
// result := false ;
62206: LD_ADDR_VAR 0 3
62210: PUSH
62211: LD_INT 0
62213: ST_TO_ADDR
// end ;
62214: LD_VAR 0 3
62218: RET
// export function HealTarget ( sci ) ; begin
62219: LD_INT 0
62221: PPUSH
// if not sci then
62222: LD_VAR 0 1
62226: NOT
62227: IFFALSE 62231
// exit ;
62229: GO 62296
// result := 0 ;
62231: LD_ADDR_VAR 0 2
62235: PUSH
62236: LD_INT 0
62238: ST_TO_ADDR
// if GetTaskList ( sci ) then
62239: LD_VAR 0 1
62243: PPUSH
62244: CALL_OW 437
62248: IFFALSE 62296
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62250: LD_VAR 0 1
62254: PPUSH
62255: CALL_OW 437
62259: PUSH
62260: LD_INT 1
62262: ARRAY
62263: PUSH
62264: LD_INT 1
62266: ARRAY
62267: PUSH
62268: LD_STRING l
62270: EQUAL
62271: IFFALSE 62296
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62273: LD_ADDR_VAR 0 2
62277: PUSH
62278: LD_VAR 0 1
62282: PPUSH
62283: CALL_OW 437
62287: PUSH
62288: LD_INT 1
62290: ARRAY
62291: PUSH
62292: LD_INT 4
62294: ARRAY
62295: ST_TO_ADDR
// end ;
62296: LD_VAR 0 2
62300: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62301: LD_INT 0
62303: PPUSH
62304: PPUSH
62305: PPUSH
62306: PPUSH
// if not base_units then
62307: LD_VAR 0 1
62311: NOT
62312: IFFALSE 62316
// exit ;
62314: GO 62403
// result := false ;
62316: LD_ADDR_VAR 0 2
62320: PUSH
62321: LD_INT 0
62323: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62324: LD_ADDR_VAR 0 5
62328: PUSH
62329: LD_VAR 0 1
62333: PPUSH
62334: LD_INT 21
62336: PUSH
62337: LD_INT 3
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PPUSH
62344: CALL_OW 72
62348: ST_TO_ADDR
// if not tmp then
62349: LD_VAR 0 5
62353: NOT
62354: IFFALSE 62358
// exit ;
62356: GO 62403
// for i in tmp do
62358: LD_ADDR_VAR 0 3
62362: PUSH
62363: LD_VAR 0 5
62367: PUSH
62368: FOR_IN
62369: IFFALSE 62401
// begin result := EnemyInRange ( i , 22 ) ;
62371: LD_ADDR_VAR 0 2
62375: PUSH
62376: LD_VAR 0 3
62380: PPUSH
62381: LD_INT 22
62383: PPUSH
62384: CALL 59990 0 2
62388: ST_TO_ADDR
// if result then
62389: LD_VAR 0 2
62393: IFFALSE 62399
// exit ;
62395: POP
62396: POP
62397: GO 62403
// end ;
62399: GO 62368
62401: POP
62402: POP
// end ;
62403: LD_VAR 0 2
62407: RET
// export function FilterByTag ( units , tag ) ; begin
62408: LD_INT 0
62410: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62411: LD_ADDR_VAR 0 3
62415: PUSH
62416: LD_VAR 0 1
62420: PPUSH
62421: LD_INT 120
62423: PUSH
62424: LD_VAR 0 2
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PPUSH
62433: CALL_OW 72
62437: ST_TO_ADDR
// end ;
62438: LD_VAR 0 3
62442: RET
// export function IsDriver ( un ) ; begin
62443: LD_INT 0
62445: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62446: LD_ADDR_VAR 0 2
62450: PUSH
62451: LD_VAR 0 1
62455: PUSH
62456: LD_INT 55
62458: PUSH
62459: EMPTY
62460: LIST
62461: PPUSH
62462: CALL_OW 69
62466: IN
62467: ST_TO_ADDR
// end ;
62468: LD_VAR 0 2
62472: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62473: LD_INT 0
62475: PPUSH
62476: PPUSH
// list := [ ] ;
62477: LD_ADDR_VAR 0 5
62481: PUSH
62482: EMPTY
62483: ST_TO_ADDR
// case d of 0 :
62484: LD_VAR 0 3
62488: PUSH
62489: LD_INT 0
62491: DOUBLE
62492: EQUAL
62493: IFTRUE 62497
62495: GO 62630
62497: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62498: LD_ADDR_VAR 0 5
62502: PUSH
62503: LD_VAR 0 1
62507: PUSH
62508: LD_INT 4
62510: MINUS
62511: PUSH
62512: LD_VAR 0 2
62516: PUSH
62517: LD_INT 4
62519: MINUS
62520: PUSH
62521: LD_INT 2
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: LIST
62528: PUSH
62529: LD_VAR 0 1
62533: PUSH
62534: LD_INT 3
62536: MINUS
62537: PUSH
62538: LD_VAR 0 2
62542: PUSH
62543: LD_INT 1
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: LIST
62550: PUSH
62551: LD_VAR 0 1
62555: PUSH
62556: LD_INT 4
62558: PLUS
62559: PUSH
62560: LD_VAR 0 2
62564: PUSH
62565: LD_INT 4
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: LIST
62572: PUSH
62573: LD_VAR 0 1
62577: PUSH
62578: LD_INT 3
62580: PLUS
62581: PUSH
62582: LD_VAR 0 2
62586: PUSH
62587: LD_INT 3
62589: PLUS
62590: PUSH
62591: LD_INT 5
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: LIST
62598: PUSH
62599: LD_VAR 0 1
62603: PUSH
62604: LD_VAR 0 2
62608: PUSH
62609: LD_INT 4
62611: PLUS
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: LIST
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: ST_TO_ADDR
// end ; 1 :
62628: GO 63328
62630: LD_INT 1
62632: DOUBLE
62633: EQUAL
62634: IFTRUE 62638
62636: GO 62771
62638: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62639: LD_ADDR_VAR 0 5
62643: PUSH
62644: LD_VAR 0 1
62648: PUSH
62649: LD_VAR 0 2
62653: PUSH
62654: LD_INT 4
62656: MINUS
62657: PUSH
62658: LD_INT 3
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: LIST
62665: PUSH
62666: LD_VAR 0 1
62670: PUSH
62671: LD_INT 3
62673: MINUS
62674: PUSH
62675: LD_VAR 0 2
62679: PUSH
62680: LD_INT 3
62682: MINUS
62683: PUSH
62684: LD_INT 2
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: LIST
62691: PUSH
62692: LD_VAR 0 1
62696: PUSH
62697: LD_INT 4
62699: MINUS
62700: PUSH
62701: LD_VAR 0 2
62705: PUSH
62706: LD_INT 1
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: LIST
62713: PUSH
62714: LD_VAR 0 1
62718: PUSH
62719: LD_VAR 0 2
62723: PUSH
62724: LD_INT 3
62726: PLUS
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: LIST
62735: PUSH
62736: LD_VAR 0 1
62740: PUSH
62741: LD_INT 4
62743: PLUS
62744: PUSH
62745: LD_VAR 0 2
62749: PUSH
62750: LD_INT 4
62752: PLUS
62753: PUSH
62754: LD_INT 5
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: LIST
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: ST_TO_ADDR
// end ; 2 :
62769: GO 63328
62771: LD_INT 2
62773: DOUBLE
62774: EQUAL
62775: IFTRUE 62779
62777: GO 62908
62779: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62780: LD_ADDR_VAR 0 5
62784: PUSH
62785: LD_VAR 0 1
62789: PUSH
62790: LD_VAR 0 2
62794: PUSH
62795: LD_INT 3
62797: MINUS
62798: PUSH
62799: LD_INT 3
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: LIST
62806: PUSH
62807: LD_VAR 0 1
62811: PUSH
62812: LD_INT 4
62814: PLUS
62815: PUSH
62816: LD_VAR 0 2
62820: PUSH
62821: LD_INT 4
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: LIST
62828: PUSH
62829: LD_VAR 0 1
62833: PUSH
62834: LD_VAR 0 2
62838: PUSH
62839: LD_INT 4
62841: PLUS
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: LIST
62850: PUSH
62851: LD_VAR 0 1
62855: PUSH
62856: LD_INT 3
62858: MINUS
62859: PUSH
62860: LD_VAR 0 2
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: LIST
62872: PUSH
62873: LD_VAR 0 1
62877: PUSH
62878: LD_INT 4
62880: MINUS
62881: PUSH
62882: LD_VAR 0 2
62886: PUSH
62887: LD_INT 4
62889: MINUS
62890: PUSH
62891: LD_INT 2
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: LIST
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: ST_TO_ADDR
// end ; 3 :
62906: GO 63328
62908: LD_INT 3
62910: DOUBLE
62911: EQUAL
62912: IFTRUE 62916
62914: GO 63049
62916: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62917: LD_ADDR_VAR 0 5
62921: PUSH
62922: LD_VAR 0 1
62926: PUSH
62927: LD_INT 3
62929: PLUS
62930: PUSH
62931: LD_VAR 0 2
62935: PUSH
62936: LD_INT 4
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: LIST
62943: PUSH
62944: LD_VAR 0 1
62948: PUSH
62949: LD_INT 4
62951: PLUS
62952: PUSH
62953: LD_VAR 0 2
62957: PUSH
62958: LD_INT 4
62960: PLUS
62961: PUSH
62962: LD_INT 5
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: LIST
62969: PUSH
62970: LD_VAR 0 1
62974: PUSH
62975: LD_INT 4
62977: MINUS
62978: PUSH
62979: LD_VAR 0 2
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: LIST
62991: PUSH
62992: LD_VAR 0 1
62996: PUSH
62997: LD_VAR 0 2
63001: PUSH
63002: LD_INT 4
63004: MINUS
63005: PUSH
63006: LD_INT 3
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: LIST
63013: PUSH
63014: LD_VAR 0 1
63018: PUSH
63019: LD_INT 3
63021: MINUS
63022: PUSH
63023: LD_VAR 0 2
63027: PUSH
63028: LD_INT 3
63030: MINUS
63031: PUSH
63032: LD_INT 2
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: LIST
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: ST_TO_ADDR
// end ; 4 :
63047: GO 63328
63049: LD_INT 4
63051: DOUBLE
63052: EQUAL
63053: IFTRUE 63057
63055: GO 63190
63057: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63058: LD_ADDR_VAR 0 5
63062: PUSH
63063: LD_VAR 0 1
63067: PUSH
63068: LD_VAR 0 2
63072: PUSH
63073: LD_INT 4
63075: PLUS
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: LIST
63084: PUSH
63085: LD_VAR 0 1
63089: PUSH
63090: LD_INT 3
63092: PLUS
63093: PUSH
63094: LD_VAR 0 2
63098: PUSH
63099: LD_INT 3
63101: PLUS
63102: PUSH
63103: LD_INT 5
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: LIST
63110: PUSH
63111: LD_VAR 0 1
63115: PUSH
63116: LD_INT 4
63118: PLUS
63119: PUSH
63120: LD_VAR 0 2
63124: PUSH
63125: LD_INT 4
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: LIST
63132: PUSH
63133: LD_VAR 0 1
63137: PUSH
63138: LD_VAR 0 2
63142: PUSH
63143: LD_INT 3
63145: MINUS
63146: PUSH
63147: LD_INT 3
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: LIST
63154: PUSH
63155: LD_VAR 0 1
63159: PUSH
63160: LD_INT 4
63162: MINUS
63163: PUSH
63164: LD_VAR 0 2
63168: PUSH
63169: LD_INT 4
63171: MINUS
63172: PUSH
63173: LD_INT 2
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: LIST
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: ST_TO_ADDR
// end ; 5 :
63188: GO 63328
63190: LD_INT 5
63192: DOUBLE
63193: EQUAL
63194: IFTRUE 63198
63196: GO 63327
63198: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63199: LD_ADDR_VAR 0 5
63203: PUSH
63204: LD_VAR 0 1
63208: PUSH
63209: LD_INT 4
63211: MINUS
63212: PUSH
63213: LD_VAR 0 2
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: LIST
63225: PUSH
63226: LD_VAR 0 1
63230: PUSH
63231: LD_VAR 0 2
63235: PUSH
63236: LD_INT 4
63238: MINUS
63239: PUSH
63240: LD_INT 3
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: LIST
63247: PUSH
63248: LD_VAR 0 1
63252: PUSH
63253: LD_INT 4
63255: PLUS
63256: PUSH
63257: LD_VAR 0 2
63261: PUSH
63262: LD_INT 4
63264: PLUS
63265: PUSH
63266: LD_INT 5
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: LIST
63273: PUSH
63274: LD_VAR 0 1
63278: PUSH
63279: LD_INT 3
63281: PLUS
63282: PUSH
63283: LD_VAR 0 2
63287: PUSH
63288: LD_INT 4
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: LIST
63295: PUSH
63296: LD_VAR 0 1
63300: PUSH
63301: LD_VAR 0 2
63305: PUSH
63306: LD_INT 3
63308: PLUS
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: LIST
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: ST_TO_ADDR
// end ; end ;
63325: GO 63328
63327: POP
// result := list ;
63328: LD_ADDR_VAR 0 4
63332: PUSH
63333: LD_VAR 0 5
63337: ST_TO_ADDR
// end ;
63338: LD_VAR 0 4
63342: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63343: LD_INT 0
63345: PPUSH
63346: PPUSH
63347: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63348: LD_VAR 0 1
63352: NOT
63353: PUSH
63354: LD_VAR 0 2
63358: PUSH
63359: LD_INT 1
63361: PUSH
63362: LD_INT 2
63364: PUSH
63365: LD_INT 3
63367: PUSH
63368: LD_INT 4
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: IN
63377: NOT
63378: OR
63379: IFFALSE 63383
// exit ;
63381: GO 63466
// tmp := [ ] ;
63383: LD_ADDR_VAR 0 5
63387: PUSH
63388: EMPTY
63389: ST_TO_ADDR
// for i in units do
63390: LD_ADDR_VAR 0 4
63394: PUSH
63395: LD_VAR 0 1
63399: PUSH
63400: FOR_IN
63401: IFFALSE 63435
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63403: LD_ADDR_VAR 0 5
63407: PUSH
63408: LD_VAR 0 5
63412: PPUSH
63413: LD_VAR 0 4
63417: PPUSH
63418: LD_VAR 0 2
63422: PPUSH
63423: CALL_OW 259
63427: PPUSH
63428: CALL 64827 0 2
63432: ST_TO_ADDR
63433: GO 63400
63435: POP
63436: POP
// if not tmp then
63437: LD_VAR 0 5
63441: NOT
63442: IFFALSE 63446
// exit ;
63444: GO 63466
// result := SortListByListDesc ( units , tmp ) ;
63446: LD_ADDR_VAR 0 3
63450: PUSH
63451: LD_VAR 0 1
63455: PPUSH
63456: LD_VAR 0 5
63460: PPUSH
63461: CALL_OW 77
63465: ST_TO_ADDR
// end ;
63466: LD_VAR 0 3
63470: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63471: LD_INT 0
63473: PPUSH
63474: PPUSH
63475: PPUSH
// result := false ;
63476: LD_ADDR_VAR 0 3
63480: PUSH
63481: LD_INT 0
63483: ST_TO_ADDR
// if not building then
63484: LD_VAR 0 2
63488: NOT
63489: IFFALSE 63493
// exit ;
63491: GO 63631
// x := GetX ( building ) ;
63493: LD_ADDR_VAR 0 4
63497: PUSH
63498: LD_VAR 0 2
63502: PPUSH
63503: CALL_OW 250
63507: ST_TO_ADDR
// y := GetY ( building ) ;
63508: LD_ADDR_VAR 0 5
63512: PUSH
63513: LD_VAR 0 2
63517: PPUSH
63518: CALL_OW 251
63522: ST_TO_ADDR
// if not x or not y then
63523: LD_VAR 0 4
63527: NOT
63528: PUSH
63529: LD_VAR 0 5
63533: NOT
63534: OR
63535: IFFALSE 63539
// exit ;
63537: GO 63631
// if GetTaskList ( unit ) then
63539: LD_VAR 0 1
63543: PPUSH
63544: CALL_OW 437
63548: IFFALSE 63631
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63550: LD_STRING e
63552: PUSH
63553: LD_VAR 0 1
63557: PPUSH
63558: CALL_OW 437
63562: PUSH
63563: LD_INT 1
63565: ARRAY
63566: PUSH
63567: LD_INT 1
63569: ARRAY
63570: EQUAL
63571: PUSH
63572: LD_VAR 0 4
63576: PUSH
63577: LD_VAR 0 1
63581: PPUSH
63582: CALL_OW 437
63586: PUSH
63587: LD_INT 1
63589: ARRAY
63590: PUSH
63591: LD_INT 2
63593: ARRAY
63594: EQUAL
63595: AND
63596: PUSH
63597: LD_VAR 0 5
63601: PUSH
63602: LD_VAR 0 1
63606: PPUSH
63607: CALL_OW 437
63611: PUSH
63612: LD_INT 1
63614: ARRAY
63615: PUSH
63616: LD_INT 3
63618: ARRAY
63619: EQUAL
63620: AND
63621: IFFALSE 63631
// result := true end ;
63623: LD_ADDR_VAR 0 3
63627: PUSH
63628: LD_INT 1
63630: ST_TO_ADDR
// end ;
63631: LD_VAR 0 3
63635: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63636: LD_INT 0
63638: PPUSH
// result := false ;
63639: LD_ADDR_VAR 0 4
63643: PUSH
63644: LD_INT 0
63646: ST_TO_ADDR
// if GetTaskList ( unit ) then
63647: LD_VAR 0 1
63651: PPUSH
63652: CALL_OW 437
63656: IFFALSE 63739
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63658: LD_STRING M
63660: PUSH
63661: LD_VAR 0 1
63665: PPUSH
63666: CALL_OW 437
63670: PUSH
63671: LD_INT 1
63673: ARRAY
63674: PUSH
63675: LD_INT 1
63677: ARRAY
63678: EQUAL
63679: PUSH
63680: LD_VAR 0 2
63684: PUSH
63685: LD_VAR 0 1
63689: PPUSH
63690: CALL_OW 437
63694: PUSH
63695: LD_INT 1
63697: ARRAY
63698: PUSH
63699: LD_INT 2
63701: ARRAY
63702: EQUAL
63703: AND
63704: PUSH
63705: LD_VAR 0 3
63709: PUSH
63710: LD_VAR 0 1
63714: PPUSH
63715: CALL_OW 437
63719: PUSH
63720: LD_INT 1
63722: ARRAY
63723: PUSH
63724: LD_INT 3
63726: ARRAY
63727: EQUAL
63728: AND
63729: IFFALSE 63739
// result := true ;
63731: LD_ADDR_VAR 0 4
63735: PUSH
63736: LD_INT 1
63738: ST_TO_ADDR
// end ; end ;
63739: LD_VAR 0 4
63743: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63744: LD_INT 0
63746: PPUSH
63747: PPUSH
63748: PPUSH
63749: PPUSH
// if not unit or not area then
63750: LD_VAR 0 1
63754: NOT
63755: PUSH
63756: LD_VAR 0 2
63760: NOT
63761: OR
63762: IFFALSE 63766
// exit ;
63764: GO 63930
// tmp := AreaToList ( area , i ) ;
63766: LD_ADDR_VAR 0 6
63770: PUSH
63771: LD_VAR 0 2
63775: PPUSH
63776: LD_VAR 0 5
63780: PPUSH
63781: CALL_OW 517
63785: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63786: LD_ADDR_VAR 0 5
63790: PUSH
63791: DOUBLE
63792: LD_INT 1
63794: DEC
63795: ST_TO_ADDR
63796: LD_VAR 0 6
63800: PUSH
63801: LD_INT 1
63803: ARRAY
63804: PUSH
63805: FOR_TO
63806: IFFALSE 63928
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63808: LD_ADDR_VAR 0 7
63812: PUSH
63813: LD_VAR 0 6
63817: PUSH
63818: LD_INT 1
63820: ARRAY
63821: PUSH
63822: LD_VAR 0 5
63826: ARRAY
63827: PUSH
63828: LD_VAR 0 6
63832: PUSH
63833: LD_INT 2
63835: ARRAY
63836: PUSH
63837: LD_VAR 0 5
63841: ARRAY
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63847: LD_VAR 0 7
63851: PUSH
63852: LD_INT 1
63854: ARRAY
63855: PPUSH
63856: LD_VAR 0 7
63860: PUSH
63861: LD_INT 2
63863: ARRAY
63864: PPUSH
63865: CALL_OW 428
63869: PUSH
63870: LD_INT 0
63872: EQUAL
63873: IFFALSE 63926
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63875: LD_VAR 0 1
63879: PPUSH
63880: LD_VAR 0 7
63884: PUSH
63885: LD_INT 1
63887: ARRAY
63888: PPUSH
63889: LD_VAR 0 7
63893: PUSH
63894: LD_INT 2
63896: ARRAY
63897: PPUSH
63898: LD_VAR 0 3
63902: PPUSH
63903: CALL_OW 48
// result := IsPlaced ( unit ) ;
63907: LD_ADDR_VAR 0 4
63911: PUSH
63912: LD_VAR 0 1
63916: PPUSH
63917: CALL_OW 305
63921: ST_TO_ADDR
// exit ;
63922: POP
63923: POP
63924: GO 63930
// end ; end ;
63926: GO 63805
63928: POP
63929: POP
// end ;
63930: LD_VAR 0 4
63934: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63935: LD_INT 0
63937: PPUSH
63938: PPUSH
63939: PPUSH
// if not side or side > 8 then
63940: LD_VAR 0 1
63944: NOT
63945: PUSH
63946: LD_VAR 0 1
63950: PUSH
63951: LD_INT 8
63953: GREATER
63954: OR
63955: IFFALSE 63959
// exit ;
63957: GO 64146
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63959: LD_ADDR_VAR 0 4
63963: PUSH
63964: LD_INT 22
63966: PUSH
63967: LD_VAR 0 1
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 21
63978: PUSH
63979: LD_INT 3
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PPUSH
63990: CALL_OW 69
63994: ST_TO_ADDR
// if not tmp then
63995: LD_VAR 0 4
63999: NOT
64000: IFFALSE 64004
// exit ;
64002: GO 64146
// enable_addtolog := true ;
64004: LD_ADDR_OWVAR 81
64008: PUSH
64009: LD_INT 1
64011: ST_TO_ADDR
// AddToLog ( [ ) ;
64012: LD_STRING [
64014: PPUSH
64015: CALL_OW 561
// for i in tmp do
64019: LD_ADDR_VAR 0 3
64023: PUSH
64024: LD_VAR 0 4
64028: PUSH
64029: FOR_IN
64030: IFFALSE 64137
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64032: LD_STRING [
64034: PUSH
64035: LD_VAR 0 3
64039: PPUSH
64040: CALL_OW 266
64044: STR
64045: PUSH
64046: LD_STRING , 
64048: STR
64049: PUSH
64050: LD_VAR 0 3
64054: PPUSH
64055: CALL_OW 250
64059: STR
64060: PUSH
64061: LD_STRING , 
64063: STR
64064: PUSH
64065: LD_VAR 0 3
64069: PPUSH
64070: CALL_OW 251
64074: STR
64075: PUSH
64076: LD_STRING , 
64078: STR
64079: PUSH
64080: LD_VAR 0 3
64084: PPUSH
64085: CALL_OW 254
64089: STR
64090: PUSH
64091: LD_STRING , 
64093: STR
64094: PUSH
64095: LD_VAR 0 3
64099: PPUSH
64100: LD_INT 1
64102: PPUSH
64103: CALL_OW 268
64107: STR
64108: PUSH
64109: LD_STRING , 
64111: STR
64112: PUSH
64113: LD_VAR 0 3
64117: PPUSH
64118: LD_INT 2
64120: PPUSH
64121: CALL_OW 268
64125: STR
64126: PUSH
64127: LD_STRING ],
64129: STR
64130: PPUSH
64131: CALL_OW 561
// end ;
64135: GO 64029
64137: POP
64138: POP
// AddToLog ( ]; ) ;
64139: LD_STRING ];
64141: PPUSH
64142: CALL_OW 561
// end ;
64146: LD_VAR 0 2
64150: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64151: LD_INT 0
64153: PPUSH
64154: PPUSH
64155: PPUSH
64156: PPUSH
64157: PPUSH
// if not area or not rate or not max then
64158: LD_VAR 0 1
64162: NOT
64163: PUSH
64164: LD_VAR 0 2
64168: NOT
64169: OR
64170: PUSH
64171: LD_VAR 0 4
64175: NOT
64176: OR
64177: IFFALSE 64181
// exit ;
64179: GO 64370
// while 1 do
64181: LD_INT 1
64183: IFFALSE 64370
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64185: LD_ADDR_VAR 0 9
64189: PUSH
64190: LD_VAR 0 1
64194: PPUSH
64195: LD_INT 1
64197: PPUSH
64198: CALL_OW 287
64202: PUSH
64203: LD_INT 10
64205: MUL
64206: ST_TO_ADDR
// r := rate / 10 ;
64207: LD_ADDR_VAR 0 7
64211: PUSH
64212: LD_VAR 0 2
64216: PUSH
64217: LD_INT 10
64219: DIVREAL
64220: ST_TO_ADDR
// time := 1 1$00 ;
64221: LD_ADDR_VAR 0 8
64225: PUSH
64226: LD_INT 2100
64228: ST_TO_ADDR
// if amount < min then
64229: LD_VAR 0 9
64233: PUSH
64234: LD_VAR 0 3
64238: LESS
64239: IFFALSE 64257
// r := r * 2 else
64241: LD_ADDR_VAR 0 7
64245: PUSH
64246: LD_VAR 0 7
64250: PUSH
64251: LD_INT 2
64253: MUL
64254: ST_TO_ADDR
64255: GO 64283
// if amount > max then
64257: LD_VAR 0 9
64261: PUSH
64262: LD_VAR 0 4
64266: GREATER
64267: IFFALSE 64283
// r := r / 2 ;
64269: LD_ADDR_VAR 0 7
64273: PUSH
64274: LD_VAR 0 7
64278: PUSH
64279: LD_INT 2
64281: DIVREAL
64282: ST_TO_ADDR
// time := time / r ;
64283: LD_ADDR_VAR 0 8
64287: PUSH
64288: LD_VAR 0 8
64292: PUSH
64293: LD_VAR 0 7
64297: DIVREAL
64298: ST_TO_ADDR
// if time < 0 then
64299: LD_VAR 0 8
64303: PUSH
64304: LD_INT 0
64306: LESS
64307: IFFALSE 64324
// time := time * - 1 ;
64309: LD_ADDR_VAR 0 8
64313: PUSH
64314: LD_VAR 0 8
64318: PUSH
64319: LD_INT 1
64321: NEG
64322: MUL
64323: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64324: LD_VAR 0 8
64328: PUSH
64329: LD_INT 35
64331: PPUSH
64332: LD_INT 875
64334: PPUSH
64335: CALL_OW 12
64339: PLUS
64340: PPUSH
64341: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64345: LD_INT 1
64347: PPUSH
64348: LD_INT 5
64350: PPUSH
64351: CALL_OW 12
64355: PPUSH
64356: LD_VAR 0 1
64360: PPUSH
64361: LD_INT 1
64363: PPUSH
64364: CALL_OW 55
// end ;
64368: GO 64181
// end ;
64370: LD_VAR 0 5
64374: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64375: LD_INT 0
64377: PPUSH
64378: PPUSH
64379: PPUSH
64380: PPUSH
64381: PPUSH
64382: PPUSH
64383: PPUSH
64384: PPUSH
// if not turrets or not factories then
64385: LD_VAR 0 1
64389: NOT
64390: PUSH
64391: LD_VAR 0 2
64395: NOT
64396: OR
64397: IFFALSE 64401
// exit ;
64399: GO 64708
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64401: LD_ADDR_VAR 0 10
64405: PUSH
64406: LD_INT 5
64408: PUSH
64409: LD_INT 6
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 2
64418: PUSH
64419: LD_INT 4
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 3
64428: PUSH
64429: LD_INT 5
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 24
64443: PUSH
64444: LD_INT 25
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 23
64453: PUSH
64454: LD_INT 27
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 42
64467: PUSH
64468: LD_INT 43
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 44
64477: PUSH
64478: LD_INT 46
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 45
64487: PUSH
64488: LD_INT 47
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: LIST
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: LIST
64504: ST_TO_ADDR
// result := [ ] ;
64505: LD_ADDR_VAR 0 3
64509: PUSH
64510: EMPTY
64511: ST_TO_ADDR
// for i in turrets do
64512: LD_ADDR_VAR 0 4
64516: PUSH
64517: LD_VAR 0 1
64521: PUSH
64522: FOR_IN
64523: IFFALSE 64706
// begin nat := GetNation ( i ) ;
64525: LD_ADDR_VAR 0 7
64529: PUSH
64530: LD_VAR 0 4
64534: PPUSH
64535: CALL_OW 248
64539: ST_TO_ADDR
// weapon := 0 ;
64540: LD_ADDR_VAR 0 8
64544: PUSH
64545: LD_INT 0
64547: ST_TO_ADDR
// if not nat then
64548: LD_VAR 0 7
64552: NOT
64553: IFFALSE 64557
// continue ;
64555: GO 64522
// for j in list [ nat ] do
64557: LD_ADDR_VAR 0 5
64561: PUSH
64562: LD_VAR 0 10
64566: PUSH
64567: LD_VAR 0 7
64571: ARRAY
64572: PUSH
64573: FOR_IN
64574: IFFALSE 64615
// if GetBWeapon ( i ) = j [ 1 ] then
64576: LD_VAR 0 4
64580: PPUSH
64581: CALL_OW 269
64585: PUSH
64586: LD_VAR 0 5
64590: PUSH
64591: LD_INT 1
64593: ARRAY
64594: EQUAL
64595: IFFALSE 64613
// begin weapon := j [ 2 ] ;
64597: LD_ADDR_VAR 0 8
64601: PUSH
64602: LD_VAR 0 5
64606: PUSH
64607: LD_INT 2
64609: ARRAY
64610: ST_TO_ADDR
// break ;
64611: GO 64615
// end ;
64613: GO 64573
64615: POP
64616: POP
// if not weapon then
64617: LD_VAR 0 8
64621: NOT
64622: IFFALSE 64626
// continue ;
64624: GO 64522
// for k in factories do
64626: LD_ADDR_VAR 0 6
64630: PUSH
64631: LD_VAR 0 2
64635: PUSH
64636: FOR_IN
64637: IFFALSE 64702
// begin weapons := AvailableWeaponList ( k ) ;
64639: LD_ADDR_VAR 0 9
64643: PUSH
64644: LD_VAR 0 6
64648: PPUSH
64649: CALL_OW 478
64653: ST_TO_ADDR
// if not weapons then
64654: LD_VAR 0 9
64658: NOT
64659: IFFALSE 64663
// continue ;
64661: GO 64636
// if weapon in weapons then
64663: LD_VAR 0 8
64667: PUSH
64668: LD_VAR 0 9
64672: IN
64673: IFFALSE 64700
// begin result := [ i , weapon ] ;
64675: LD_ADDR_VAR 0 3
64679: PUSH
64680: LD_VAR 0 4
64684: PUSH
64685: LD_VAR 0 8
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: ST_TO_ADDR
// exit ;
64694: POP
64695: POP
64696: POP
64697: POP
64698: GO 64708
// end ; end ;
64700: GO 64636
64702: POP
64703: POP
// end ;
64704: GO 64522
64706: POP
64707: POP
// end ;
64708: LD_VAR 0 3
64712: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64713: LD_INT 0
64715: PPUSH
// if not side or side > 8 then
64716: LD_VAR 0 3
64720: NOT
64721: PUSH
64722: LD_VAR 0 3
64726: PUSH
64727: LD_INT 8
64729: GREATER
64730: OR
64731: IFFALSE 64735
// exit ;
64733: GO 64794
// if not range then
64735: LD_VAR 0 4
64739: NOT
64740: IFFALSE 64751
// range := - 12 ;
64742: LD_ADDR_VAR 0 4
64746: PUSH
64747: LD_INT 12
64749: NEG
64750: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64751: LD_VAR 0 1
64755: PPUSH
64756: LD_VAR 0 2
64760: PPUSH
64761: LD_VAR 0 3
64765: PPUSH
64766: LD_VAR 0 4
64770: PPUSH
64771: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64775: LD_VAR 0 1
64779: PPUSH
64780: LD_VAR 0 2
64784: PPUSH
64785: LD_VAR 0 3
64789: PPUSH
64790: CALL_OW 331
// end ;
64794: LD_VAR 0 5
64798: RET
// export function Video ( mode ) ; begin
64799: LD_INT 0
64801: PPUSH
// ingame_video = mode ;
64802: LD_ADDR_OWVAR 52
64806: PUSH
64807: LD_VAR 0 1
64811: ST_TO_ADDR
// interface_hidden = mode ;
64812: LD_ADDR_OWVAR 54
64816: PUSH
64817: LD_VAR 0 1
64821: ST_TO_ADDR
// end ;
64822: LD_VAR 0 2
64826: RET
// export function Join ( array , element ) ; begin
64827: LD_INT 0
64829: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64830: LD_ADDR_VAR 0 3
64834: PUSH
64835: LD_VAR 0 1
64839: PPUSH
64840: LD_VAR 0 1
64844: PUSH
64845: LD_INT 1
64847: PLUS
64848: PPUSH
64849: LD_VAR 0 2
64853: PPUSH
64854: CALL_OW 1
64858: ST_TO_ADDR
// end ;
64859: LD_VAR 0 3
64863: RET
// export function JoinUnion ( array , element ) ; begin
64864: LD_INT 0
64866: PPUSH
// result := array union element ;
64867: LD_ADDR_VAR 0 3
64871: PUSH
64872: LD_VAR 0 1
64876: PUSH
64877: LD_VAR 0 2
64881: UNION
64882: ST_TO_ADDR
// end ;
64883: LD_VAR 0 3
64887: RET
// export function GetBehemoths ( side ) ; begin
64888: LD_INT 0
64890: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64891: LD_ADDR_VAR 0 2
64895: PUSH
64896: LD_INT 22
64898: PUSH
64899: LD_VAR 0 1
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 31
64910: PUSH
64911: LD_INT 25
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PPUSH
64922: CALL_OW 69
64926: ST_TO_ADDR
// end ;
64927: LD_VAR 0 2
64931: RET
// export function Shuffle ( array ) ; var i , index ; begin
64932: LD_INT 0
64934: PPUSH
64935: PPUSH
64936: PPUSH
// result := [ ] ;
64937: LD_ADDR_VAR 0 2
64941: PUSH
64942: EMPTY
64943: ST_TO_ADDR
// if not array then
64944: LD_VAR 0 1
64948: NOT
64949: IFFALSE 64953
// exit ;
64951: GO 65052
// Randomize ;
64953: CALL_OW 10
// for i = array downto 1 do
64957: LD_ADDR_VAR 0 3
64961: PUSH
64962: DOUBLE
64963: LD_VAR 0 1
64967: INC
64968: ST_TO_ADDR
64969: LD_INT 1
64971: PUSH
64972: FOR_DOWNTO
64973: IFFALSE 65050
// begin index := rand ( 1 , array ) ;
64975: LD_ADDR_VAR 0 4
64979: PUSH
64980: LD_INT 1
64982: PPUSH
64983: LD_VAR 0 1
64987: PPUSH
64988: CALL_OW 12
64992: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64993: LD_ADDR_VAR 0 2
64997: PUSH
64998: LD_VAR 0 2
65002: PPUSH
65003: LD_VAR 0 2
65007: PUSH
65008: LD_INT 1
65010: PLUS
65011: PPUSH
65012: LD_VAR 0 1
65016: PUSH
65017: LD_VAR 0 4
65021: ARRAY
65022: PPUSH
65023: CALL_OW 2
65027: ST_TO_ADDR
// array := Delete ( array , index ) ;
65028: LD_ADDR_VAR 0 1
65032: PUSH
65033: LD_VAR 0 1
65037: PPUSH
65038: LD_VAR 0 4
65042: PPUSH
65043: CALL_OW 3
65047: ST_TO_ADDR
// end ;
65048: GO 64972
65050: POP
65051: POP
// end ;
65052: LD_VAR 0 2
65056: RET
// export function GetBaseMaterials ( base ) ; begin
65057: LD_INT 0
65059: PPUSH
// result := [ 0 , 0 , 0 ] ;
65060: LD_ADDR_VAR 0 2
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: LD_INT 0
65070: PUSH
65071: LD_INT 0
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: LIST
65078: ST_TO_ADDR
// if not base then
65079: LD_VAR 0 1
65083: NOT
65084: IFFALSE 65088
// exit ;
65086: GO 65137
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65088: LD_ADDR_VAR 0 2
65092: PUSH
65093: LD_VAR 0 1
65097: PPUSH
65098: LD_INT 1
65100: PPUSH
65101: CALL_OW 275
65105: PUSH
65106: LD_VAR 0 1
65110: PPUSH
65111: LD_INT 2
65113: PPUSH
65114: CALL_OW 275
65118: PUSH
65119: LD_VAR 0 1
65123: PPUSH
65124: LD_INT 3
65126: PPUSH
65127: CALL_OW 275
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: LIST
65136: ST_TO_ADDR
// end ;
65137: LD_VAR 0 2
65141: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65142: LD_INT 0
65144: PPUSH
65145: PPUSH
// result := array ;
65146: LD_ADDR_VAR 0 3
65150: PUSH
65151: LD_VAR 0 1
65155: ST_TO_ADDR
// if size >= result then
65156: LD_VAR 0 2
65160: PUSH
65161: LD_VAR 0 3
65165: GREATEREQUAL
65166: IFFALSE 65170
// exit ;
65168: GO 65220
// if size then
65170: LD_VAR 0 2
65174: IFFALSE 65220
// for i := array downto size do
65176: LD_ADDR_VAR 0 4
65180: PUSH
65181: DOUBLE
65182: LD_VAR 0 1
65186: INC
65187: ST_TO_ADDR
65188: LD_VAR 0 2
65192: PUSH
65193: FOR_DOWNTO
65194: IFFALSE 65218
// result := Delete ( result , result ) ;
65196: LD_ADDR_VAR 0 3
65200: PUSH
65201: LD_VAR 0 3
65205: PPUSH
65206: LD_VAR 0 3
65210: PPUSH
65211: CALL_OW 3
65215: ST_TO_ADDR
65216: GO 65193
65218: POP
65219: POP
// end ;
65220: LD_VAR 0 3
65224: RET
// export function ComExit ( unit ) ; var tmp ; begin
65225: LD_INT 0
65227: PPUSH
65228: PPUSH
// if not IsInUnit ( unit ) then
65229: LD_VAR 0 1
65233: PPUSH
65234: CALL_OW 310
65238: NOT
65239: IFFALSE 65243
// exit ;
65241: GO 65303
// tmp := IsInUnit ( unit ) ;
65243: LD_ADDR_VAR 0 3
65247: PUSH
65248: LD_VAR 0 1
65252: PPUSH
65253: CALL_OW 310
65257: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65258: LD_VAR 0 3
65262: PPUSH
65263: CALL_OW 247
65267: PUSH
65268: LD_INT 2
65270: EQUAL
65271: IFFALSE 65284
// ComExitVehicle ( unit ) else
65273: LD_VAR 0 1
65277: PPUSH
65278: CALL_OW 121
65282: GO 65293
// ComExitBuilding ( unit ) ;
65284: LD_VAR 0 1
65288: PPUSH
65289: CALL_OW 122
// result := tmp ;
65293: LD_ADDR_VAR 0 2
65297: PUSH
65298: LD_VAR 0 3
65302: ST_TO_ADDR
// end ;
65303: LD_VAR 0 2
65307: RET
// export function ComExitAll ( units ) ; var i ; begin
65308: LD_INT 0
65310: PPUSH
65311: PPUSH
// if not units then
65312: LD_VAR 0 1
65316: NOT
65317: IFFALSE 65321
// exit ;
65319: GO 65347
// for i in units do
65321: LD_ADDR_VAR 0 3
65325: PUSH
65326: LD_VAR 0 1
65330: PUSH
65331: FOR_IN
65332: IFFALSE 65345
// ComExit ( i ) ;
65334: LD_VAR 0 3
65338: PPUSH
65339: CALL 65225 0 1
65343: GO 65331
65345: POP
65346: POP
// end ;
65347: LD_VAR 0 2
65351: RET
// export function ResetHc ; begin
65352: LD_INT 0
65354: PPUSH
// InitHc ;
65355: CALL_OW 19
// hc_importance := 0 ;
65359: LD_ADDR_OWVAR 32
65363: PUSH
65364: LD_INT 0
65366: ST_TO_ADDR
// end ;
65367: LD_VAR 0 1
65371: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65372: LD_INT 0
65374: PPUSH
65375: PPUSH
65376: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65377: LD_ADDR_VAR 0 6
65381: PUSH
65382: LD_VAR 0 1
65386: PUSH
65387: LD_VAR 0 3
65391: PLUS
65392: PUSH
65393: LD_INT 2
65395: DIV
65396: ST_TO_ADDR
// if _x < 0 then
65397: LD_VAR 0 6
65401: PUSH
65402: LD_INT 0
65404: LESS
65405: IFFALSE 65422
// _x := _x * - 1 ;
65407: LD_ADDR_VAR 0 6
65411: PUSH
65412: LD_VAR 0 6
65416: PUSH
65417: LD_INT 1
65419: NEG
65420: MUL
65421: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65422: LD_ADDR_VAR 0 7
65426: PUSH
65427: LD_VAR 0 2
65431: PUSH
65432: LD_VAR 0 4
65436: PLUS
65437: PUSH
65438: LD_INT 2
65440: DIV
65441: ST_TO_ADDR
// if _y < 0 then
65442: LD_VAR 0 7
65446: PUSH
65447: LD_INT 0
65449: LESS
65450: IFFALSE 65467
// _y := _y * - 1 ;
65452: LD_ADDR_VAR 0 7
65456: PUSH
65457: LD_VAR 0 7
65461: PUSH
65462: LD_INT 1
65464: NEG
65465: MUL
65466: ST_TO_ADDR
// result := [ _x , _y ] ;
65467: LD_ADDR_VAR 0 5
65471: PUSH
65472: LD_VAR 0 6
65476: PUSH
65477: LD_VAR 0 7
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: ST_TO_ADDR
// end ;
65486: LD_VAR 0 5
65490: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65491: LD_INT 0
65493: PPUSH
65494: PPUSH
65495: PPUSH
65496: PPUSH
// task := GetTaskList ( unit ) ;
65497: LD_ADDR_VAR 0 7
65501: PUSH
65502: LD_VAR 0 1
65506: PPUSH
65507: CALL_OW 437
65511: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65512: LD_VAR 0 7
65516: NOT
65517: PUSH
65518: LD_VAR 0 1
65522: PPUSH
65523: LD_VAR 0 2
65527: PPUSH
65528: CALL_OW 308
65532: NOT
65533: AND
65534: IFFALSE 65538
// exit ;
65536: GO 65656
// if IsInArea ( unit , area ) then
65538: LD_VAR 0 1
65542: PPUSH
65543: LD_VAR 0 2
65547: PPUSH
65548: CALL_OW 308
65552: IFFALSE 65570
// begin ComMoveToArea ( unit , goAway ) ;
65554: LD_VAR 0 1
65558: PPUSH
65559: LD_VAR 0 3
65563: PPUSH
65564: CALL_OW 113
// exit ;
65568: GO 65656
// end ; if task [ 1 ] [ 1 ] <> M then
65570: LD_VAR 0 7
65574: PUSH
65575: LD_INT 1
65577: ARRAY
65578: PUSH
65579: LD_INT 1
65581: ARRAY
65582: PUSH
65583: LD_STRING M
65585: NONEQUAL
65586: IFFALSE 65590
// exit ;
65588: GO 65656
// x := task [ 1 ] [ 2 ] ;
65590: LD_ADDR_VAR 0 5
65594: PUSH
65595: LD_VAR 0 7
65599: PUSH
65600: LD_INT 1
65602: ARRAY
65603: PUSH
65604: LD_INT 2
65606: ARRAY
65607: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65608: LD_ADDR_VAR 0 6
65612: PUSH
65613: LD_VAR 0 7
65617: PUSH
65618: LD_INT 1
65620: ARRAY
65621: PUSH
65622: LD_INT 3
65624: ARRAY
65625: ST_TO_ADDR
// if InArea ( x , y , area ) then
65626: LD_VAR 0 5
65630: PPUSH
65631: LD_VAR 0 6
65635: PPUSH
65636: LD_VAR 0 2
65640: PPUSH
65641: CALL_OW 309
65645: IFFALSE 65656
// ComStop ( unit ) ;
65647: LD_VAR 0 1
65651: PPUSH
65652: CALL_OW 141
// end ;
65656: LD_VAR 0 4
65660: RET
// export function Abs ( value ) ; begin
65661: LD_INT 0
65663: PPUSH
// result := value ;
65664: LD_ADDR_VAR 0 2
65668: PUSH
65669: LD_VAR 0 1
65673: ST_TO_ADDR
// if value < 0 then
65674: LD_VAR 0 1
65678: PUSH
65679: LD_INT 0
65681: LESS
65682: IFFALSE 65699
// result := value * - 1 ;
65684: LD_ADDR_VAR 0 2
65688: PUSH
65689: LD_VAR 0 1
65693: PUSH
65694: LD_INT 1
65696: NEG
65697: MUL
65698: ST_TO_ADDR
// end ;
65699: LD_VAR 0 2
65703: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65704: LD_INT 0
65706: PPUSH
65707: PPUSH
65708: PPUSH
65709: PPUSH
65710: PPUSH
65711: PPUSH
65712: PPUSH
65713: PPUSH
// if not unit or not building then
65714: LD_VAR 0 1
65718: NOT
65719: PUSH
65720: LD_VAR 0 2
65724: NOT
65725: OR
65726: IFFALSE 65730
// exit ;
65728: GO 65956
// x := GetX ( building ) ;
65730: LD_ADDR_VAR 0 4
65734: PUSH
65735: LD_VAR 0 2
65739: PPUSH
65740: CALL_OW 250
65744: ST_TO_ADDR
// y := GetY ( building ) ;
65745: LD_ADDR_VAR 0 6
65749: PUSH
65750: LD_VAR 0 2
65754: PPUSH
65755: CALL_OW 251
65759: ST_TO_ADDR
// d := GetDir ( building ) ;
65760: LD_ADDR_VAR 0 8
65764: PUSH
65765: LD_VAR 0 2
65769: PPUSH
65770: CALL_OW 254
65774: ST_TO_ADDR
// r := 4 ;
65775: LD_ADDR_VAR 0 9
65779: PUSH
65780: LD_INT 4
65782: ST_TO_ADDR
// for i := 1 to 5 do
65783: LD_ADDR_VAR 0 10
65787: PUSH
65788: DOUBLE
65789: LD_INT 1
65791: DEC
65792: ST_TO_ADDR
65793: LD_INT 5
65795: PUSH
65796: FOR_TO
65797: IFFALSE 65954
// begin _x := ShiftX ( x , d , r + i ) ;
65799: LD_ADDR_VAR 0 5
65803: PUSH
65804: LD_VAR 0 4
65808: PPUSH
65809: LD_VAR 0 8
65813: PPUSH
65814: LD_VAR 0 9
65818: PUSH
65819: LD_VAR 0 10
65823: PLUS
65824: PPUSH
65825: CALL_OW 272
65829: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65830: LD_ADDR_VAR 0 7
65834: PUSH
65835: LD_VAR 0 6
65839: PPUSH
65840: LD_VAR 0 8
65844: PPUSH
65845: LD_VAR 0 9
65849: PUSH
65850: LD_VAR 0 10
65854: PLUS
65855: PPUSH
65856: CALL_OW 273
65860: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65861: LD_VAR 0 5
65865: PPUSH
65866: LD_VAR 0 7
65870: PPUSH
65871: CALL_OW 488
65875: PUSH
65876: LD_VAR 0 5
65880: PPUSH
65881: LD_VAR 0 7
65885: PPUSH
65886: CALL_OW 428
65890: PPUSH
65891: CALL_OW 247
65895: PUSH
65896: LD_INT 3
65898: PUSH
65899: LD_INT 2
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: IN
65906: NOT
65907: AND
65908: IFFALSE 65952
// begin ComMoveXY ( unit , _x , _y ) ;
65910: LD_VAR 0 1
65914: PPUSH
65915: LD_VAR 0 5
65919: PPUSH
65920: LD_VAR 0 7
65924: PPUSH
65925: CALL_OW 111
// result := [ _x , _y ] ;
65929: LD_ADDR_VAR 0 3
65933: PUSH
65934: LD_VAR 0 5
65938: PUSH
65939: LD_VAR 0 7
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: ST_TO_ADDR
// exit ;
65948: POP
65949: POP
65950: GO 65956
// end ; end ;
65952: GO 65796
65954: POP
65955: POP
// end ;
65956: LD_VAR 0 3
65960: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65961: LD_INT 0
65963: PPUSH
65964: PPUSH
65965: PPUSH
// result := 0 ;
65966: LD_ADDR_VAR 0 3
65970: PUSH
65971: LD_INT 0
65973: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65974: LD_VAR 0 1
65978: PUSH
65979: LD_INT 0
65981: LESS
65982: PUSH
65983: LD_VAR 0 1
65987: PUSH
65988: LD_INT 8
65990: GREATER
65991: OR
65992: PUSH
65993: LD_VAR 0 2
65997: PUSH
65998: LD_INT 0
66000: LESS
66001: OR
66002: PUSH
66003: LD_VAR 0 2
66007: PUSH
66008: LD_INT 8
66010: GREATER
66011: OR
66012: IFFALSE 66016
// exit ;
66014: GO 66091
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66016: LD_ADDR_VAR 0 4
66020: PUSH
66021: LD_INT 22
66023: PUSH
66024: LD_VAR 0 2
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PPUSH
66033: CALL_OW 69
66037: PUSH
66038: FOR_IN
66039: IFFALSE 66089
// begin un := UnitShoot ( i ) ;
66041: LD_ADDR_VAR 0 5
66045: PUSH
66046: LD_VAR 0 4
66050: PPUSH
66051: CALL_OW 504
66055: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66056: LD_VAR 0 5
66060: PPUSH
66061: CALL_OW 255
66065: PUSH
66066: LD_VAR 0 1
66070: EQUAL
66071: IFFALSE 66087
// begin result := un ;
66073: LD_ADDR_VAR 0 3
66077: PUSH
66078: LD_VAR 0 5
66082: ST_TO_ADDR
// exit ;
66083: POP
66084: POP
66085: GO 66091
// end ; end ;
66087: GO 66038
66089: POP
66090: POP
// end ;
66091: LD_VAR 0 3
66095: RET
// export function GetCargoBay ( units ) ; begin
66096: LD_INT 0
66098: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66099: LD_ADDR_VAR 0 2
66103: PUSH
66104: LD_VAR 0 1
66108: PPUSH
66109: LD_INT 2
66111: PUSH
66112: LD_INT 34
66114: PUSH
66115: LD_INT 12
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 34
66124: PUSH
66125: LD_INT 51
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 34
66134: PUSH
66135: LD_INT 32
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 34
66144: PUSH
66145: LD_INT 89
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: PPUSH
66159: CALL_OW 72
66163: ST_TO_ADDR
// end ;
66164: LD_VAR 0 2
66168: RET
// export function Negate ( value ) ; begin
66169: LD_INT 0
66171: PPUSH
// result := not value ;
66172: LD_ADDR_VAR 0 2
66176: PUSH
66177: LD_VAR 0 1
66181: NOT
66182: ST_TO_ADDR
// end ;
66183: LD_VAR 0 2
66187: RET
// export function Inc ( value ) ; begin
66188: LD_INT 0
66190: PPUSH
// result := value + 1 ;
66191: LD_ADDR_VAR 0 2
66195: PUSH
66196: LD_VAR 0 1
66200: PUSH
66201: LD_INT 1
66203: PLUS
66204: ST_TO_ADDR
// end ;
66205: LD_VAR 0 2
66209: RET
// export function Dec ( value ) ; begin
66210: LD_INT 0
66212: PPUSH
// result := value - 1 ;
66213: LD_ADDR_VAR 0 2
66217: PUSH
66218: LD_VAR 0 1
66222: PUSH
66223: LD_INT 1
66225: MINUS
66226: ST_TO_ADDR
// end ;
66227: LD_VAR 0 2
66231: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66232: LD_INT 0
66234: PPUSH
66235: PPUSH
66236: PPUSH
66237: PPUSH
66238: PPUSH
66239: PPUSH
66240: PPUSH
66241: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66242: LD_VAR 0 1
66246: PPUSH
66247: LD_VAR 0 2
66251: PPUSH
66252: CALL_OW 488
66256: NOT
66257: PUSH
66258: LD_VAR 0 3
66262: PPUSH
66263: LD_VAR 0 4
66267: PPUSH
66268: CALL_OW 488
66272: NOT
66273: OR
66274: IFFALSE 66287
// begin result := - 1 ;
66276: LD_ADDR_VAR 0 5
66280: PUSH
66281: LD_INT 1
66283: NEG
66284: ST_TO_ADDR
// exit ;
66285: GO 66522
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66287: LD_ADDR_VAR 0 12
66291: PUSH
66292: LD_VAR 0 1
66296: PPUSH
66297: LD_VAR 0 2
66301: PPUSH
66302: LD_VAR 0 3
66306: PPUSH
66307: LD_VAR 0 4
66311: PPUSH
66312: CALL 65372 0 4
66316: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66317: LD_ADDR_VAR 0 11
66321: PUSH
66322: LD_VAR 0 1
66326: PPUSH
66327: LD_VAR 0 2
66331: PPUSH
66332: LD_VAR 0 12
66336: PUSH
66337: LD_INT 1
66339: ARRAY
66340: PPUSH
66341: LD_VAR 0 12
66345: PUSH
66346: LD_INT 2
66348: ARRAY
66349: PPUSH
66350: CALL_OW 298
66354: ST_TO_ADDR
// distance := 9999 ;
66355: LD_ADDR_VAR 0 10
66359: PUSH
66360: LD_INT 9999
66362: ST_TO_ADDR
// for i := 0 to 5 do
66363: LD_ADDR_VAR 0 6
66367: PUSH
66368: DOUBLE
66369: LD_INT 0
66371: DEC
66372: ST_TO_ADDR
66373: LD_INT 5
66375: PUSH
66376: FOR_TO
66377: IFFALSE 66520
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66379: LD_ADDR_VAR 0 7
66383: PUSH
66384: LD_VAR 0 1
66388: PPUSH
66389: LD_VAR 0 6
66393: PPUSH
66394: LD_VAR 0 11
66398: PPUSH
66399: CALL_OW 272
66403: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66404: LD_ADDR_VAR 0 8
66408: PUSH
66409: LD_VAR 0 2
66413: PPUSH
66414: LD_VAR 0 6
66418: PPUSH
66419: LD_VAR 0 11
66423: PPUSH
66424: CALL_OW 273
66428: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66429: LD_VAR 0 7
66433: PPUSH
66434: LD_VAR 0 8
66438: PPUSH
66439: CALL_OW 488
66443: NOT
66444: IFFALSE 66448
// continue ;
66446: GO 66376
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66448: LD_ADDR_VAR 0 9
66452: PUSH
66453: LD_VAR 0 12
66457: PUSH
66458: LD_INT 1
66460: ARRAY
66461: PPUSH
66462: LD_VAR 0 12
66466: PUSH
66467: LD_INT 2
66469: ARRAY
66470: PPUSH
66471: LD_VAR 0 7
66475: PPUSH
66476: LD_VAR 0 8
66480: PPUSH
66481: CALL_OW 298
66485: ST_TO_ADDR
// if tmp < distance then
66486: LD_VAR 0 9
66490: PUSH
66491: LD_VAR 0 10
66495: LESS
66496: IFFALSE 66518
// begin result := i ;
66498: LD_ADDR_VAR 0 5
66502: PUSH
66503: LD_VAR 0 6
66507: ST_TO_ADDR
// distance := tmp ;
66508: LD_ADDR_VAR 0 10
66512: PUSH
66513: LD_VAR 0 9
66517: ST_TO_ADDR
// end ; end ;
66518: GO 66376
66520: POP
66521: POP
// end ;
66522: LD_VAR 0 5
66526: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66527: LD_INT 0
66529: PPUSH
66530: PPUSH
// if not driver or not IsInUnit ( driver ) then
66531: LD_VAR 0 1
66535: NOT
66536: PUSH
66537: LD_VAR 0 1
66541: PPUSH
66542: CALL_OW 310
66546: NOT
66547: OR
66548: IFFALSE 66552
// exit ;
66550: GO 66642
// vehicle := IsInUnit ( driver ) ;
66552: LD_ADDR_VAR 0 3
66556: PUSH
66557: LD_VAR 0 1
66561: PPUSH
66562: CALL_OW 310
66566: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66567: LD_VAR 0 1
66571: PPUSH
66572: LD_STRING \
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: LD_INT 0
66586: PUSH
66587: LD_INT 0
66589: PUSH
66590: LD_INT 0
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: PUSH
66602: LD_STRING E
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: LD_INT 0
66610: PUSH
66611: LD_VAR 0 3
66615: PUSH
66616: LD_INT 0
66618: PUSH
66619: LD_INT 0
66621: PUSH
66622: LD_INT 0
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PPUSH
66638: CALL_OW 446
// end ;
66642: LD_VAR 0 2
66646: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66647: LD_INT 0
66649: PPUSH
66650: PPUSH
// if not driver or not IsInUnit ( driver ) then
66651: LD_VAR 0 1
66655: NOT
66656: PUSH
66657: LD_VAR 0 1
66661: PPUSH
66662: CALL_OW 310
66666: NOT
66667: OR
66668: IFFALSE 66672
// exit ;
66670: GO 66762
// vehicle := IsInUnit ( driver ) ;
66672: LD_ADDR_VAR 0 3
66676: PUSH
66677: LD_VAR 0 1
66681: PPUSH
66682: CALL_OW 310
66686: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66687: LD_VAR 0 1
66691: PPUSH
66692: LD_STRING \
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: LD_INT 0
66700: PUSH
66701: LD_INT 0
66703: PUSH
66704: LD_INT 0
66706: PUSH
66707: LD_INT 0
66709: PUSH
66710: LD_INT 0
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: PUSH
66722: LD_STRING E
66724: PUSH
66725: LD_INT 0
66727: PUSH
66728: LD_INT 0
66730: PUSH
66731: LD_VAR 0 3
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: LD_INT 0
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PPUSH
66758: CALL_OW 447
// end ;
66762: LD_VAR 0 2
66766: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66767: LD_INT 0
66769: PPUSH
66770: PPUSH
66771: PPUSH
// tmp := [ ] ;
66772: LD_ADDR_VAR 0 5
66776: PUSH
66777: EMPTY
66778: ST_TO_ADDR
// for i in units do
66779: LD_ADDR_VAR 0 4
66783: PUSH
66784: LD_VAR 0 1
66788: PUSH
66789: FOR_IN
66790: IFFALSE 66828
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66792: LD_ADDR_VAR 0 5
66796: PUSH
66797: LD_VAR 0 5
66801: PPUSH
66802: LD_VAR 0 5
66806: PUSH
66807: LD_INT 1
66809: PLUS
66810: PPUSH
66811: LD_VAR 0 4
66815: PPUSH
66816: CALL_OW 256
66820: PPUSH
66821: CALL_OW 2
66825: ST_TO_ADDR
66826: GO 66789
66828: POP
66829: POP
// if not tmp then
66830: LD_VAR 0 5
66834: NOT
66835: IFFALSE 66839
// exit ;
66837: GO 66887
// if asc then
66839: LD_VAR 0 2
66843: IFFALSE 66867
// result := SortListByListAsc ( units , tmp ) else
66845: LD_ADDR_VAR 0 3
66849: PUSH
66850: LD_VAR 0 1
66854: PPUSH
66855: LD_VAR 0 5
66859: PPUSH
66860: CALL_OW 76
66864: ST_TO_ADDR
66865: GO 66887
// result := SortListByListDesc ( units , tmp ) ;
66867: LD_ADDR_VAR 0 3
66871: PUSH
66872: LD_VAR 0 1
66876: PPUSH
66877: LD_VAR 0 5
66881: PPUSH
66882: CALL_OW 77
66886: ST_TO_ADDR
// end ;
66887: LD_VAR 0 3
66891: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66892: LD_INT 0
66894: PPUSH
66895: PPUSH
// task := GetTaskList ( mech ) ;
66896: LD_ADDR_VAR 0 4
66900: PUSH
66901: LD_VAR 0 1
66905: PPUSH
66906: CALL_OW 437
66910: ST_TO_ADDR
// if not task then
66911: LD_VAR 0 4
66915: NOT
66916: IFFALSE 66920
// exit ;
66918: GO 66962
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66920: LD_ADDR_VAR 0 3
66924: PUSH
66925: LD_VAR 0 4
66929: PUSH
66930: LD_INT 1
66932: ARRAY
66933: PUSH
66934: LD_INT 1
66936: ARRAY
66937: PUSH
66938: LD_STRING r
66940: EQUAL
66941: PUSH
66942: LD_VAR 0 4
66946: PUSH
66947: LD_INT 1
66949: ARRAY
66950: PUSH
66951: LD_INT 4
66953: ARRAY
66954: PUSH
66955: LD_VAR 0 2
66959: EQUAL
66960: AND
66961: ST_TO_ADDR
// end ;
66962: LD_VAR 0 3
66966: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66967: LD_INT 0
66969: PPUSH
// SetDir ( unit , d ) ;
66970: LD_VAR 0 1
66974: PPUSH
66975: LD_VAR 0 4
66979: PPUSH
66980: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66984: LD_VAR 0 1
66988: PPUSH
66989: LD_VAR 0 2
66993: PPUSH
66994: LD_VAR 0 3
66998: PPUSH
66999: LD_VAR 0 5
67003: PPUSH
67004: CALL_OW 48
// end ;
67008: LD_VAR 0 6
67012: RET
// export function ToNaturalNumber ( number ) ; begin
67013: LD_INT 0
67015: PPUSH
// result := number div 1 ;
67016: LD_ADDR_VAR 0 2
67020: PUSH
67021: LD_VAR 0 1
67025: PUSH
67026: LD_INT 1
67028: DIV
67029: ST_TO_ADDR
// if number < 0 then
67030: LD_VAR 0 1
67034: PUSH
67035: LD_INT 0
67037: LESS
67038: IFFALSE 67048
// result := 0 ;
67040: LD_ADDR_VAR 0 2
67044: PUSH
67045: LD_INT 0
67047: ST_TO_ADDR
// end ;
67048: LD_VAR 0 2
67052: RET
// export function SortByClass ( units , class ) ; var un ; begin
67053: LD_INT 0
67055: PPUSH
67056: PPUSH
// if not units or not class then
67057: LD_VAR 0 1
67061: NOT
67062: PUSH
67063: LD_VAR 0 2
67067: NOT
67068: OR
67069: IFFALSE 67073
// exit ;
67071: GO 67168
// result := [ ] ;
67073: LD_ADDR_VAR 0 3
67077: PUSH
67078: EMPTY
67079: ST_TO_ADDR
// for un in units do
67080: LD_ADDR_VAR 0 4
67084: PUSH
67085: LD_VAR 0 1
67089: PUSH
67090: FOR_IN
67091: IFFALSE 67166
// if GetClass ( un ) = class then
67093: LD_VAR 0 4
67097: PPUSH
67098: CALL_OW 257
67102: PUSH
67103: LD_VAR 0 2
67107: EQUAL
67108: IFFALSE 67135
// result := Insert ( result , 1 , un ) else
67110: LD_ADDR_VAR 0 3
67114: PUSH
67115: LD_VAR 0 3
67119: PPUSH
67120: LD_INT 1
67122: PPUSH
67123: LD_VAR 0 4
67127: PPUSH
67128: CALL_OW 2
67132: ST_TO_ADDR
67133: GO 67164
// result := Replace ( result , result + 1 , un ) ;
67135: LD_ADDR_VAR 0 3
67139: PUSH
67140: LD_VAR 0 3
67144: PPUSH
67145: LD_VAR 0 3
67149: PUSH
67150: LD_INT 1
67152: PLUS
67153: PPUSH
67154: LD_VAR 0 4
67158: PPUSH
67159: CALL_OW 1
67163: ST_TO_ADDR
67164: GO 67090
67166: POP
67167: POP
// end ;
67168: LD_VAR 0 3
67172: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67173: LD_INT 0
67175: PPUSH
67176: PPUSH
67177: PPUSH
67178: PPUSH
67179: PPUSH
67180: PPUSH
67181: PPUSH
// result := [ ] ;
67182: LD_ADDR_VAR 0 4
67186: PUSH
67187: EMPTY
67188: ST_TO_ADDR
// if x - r < 0 then
67189: LD_VAR 0 1
67193: PUSH
67194: LD_VAR 0 3
67198: MINUS
67199: PUSH
67200: LD_INT 0
67202: LESS
67203: IFFALSE 67215
// min_x := 0 else
67205: LD_ADDR_VAR 0 8
67209: PUSH
67210: LD_INT 0
67212: ST_TO_ADDR
67213: GO 67231
// min_x := x - r ;
67215: LD_ADDR_VAR 0 8
67219: PUSH
67220: LD_VAR 0 1
67224: PUSH
67225: LD_VAR 0 3
67229: MINUS
67230: ST_TO_ADDR
// if y - r < 0 then
67231: LD_VAR 0 2
67235: PUSH
67236: LD_VAR 0 3
67240: MINUS
67241: PUSH
67242: LD_INT 0
67244: LESS
67245: IFFALSE 67257
// min_y := 0 else
67247: LD_ADDR_VAR 0 7
67251: PUSH
67252: LD_INT 0
67254: ST_TO_ADDR
67255: GO 67273
// min_y := y - r ;
67257: LD_ADDR_VAR 0 7
67261: PUSH
67262: LD_VAR 0 2
67266: PUSH
67267: LD_VAR 0 3
67271: MINUS
67272: ST_TO_ADDR
// max_x := x + r ;
67273: LD_ADDR_VAR 0 9
67277: PUSH
67278: LD_VAR 0 1
67282: PUSH
67283: LD_VAR 0 3
67287: PLUS
67288: ST_TO_ADDR
// max_y := y + r ;
67289: LD_ADDR_VAR 0 10
67293: PUSH
67294: LD_VAR 0 2
67298: PUSH
67299: LD_VAR 0 3
67303: PLUS
67304: ST_TO_ADDR
// for _x = min_x to max_x do
67305: LD_ADDR_VAR 0 5
67309: PUSH
67310: DOUBLE
67311: LD_VAR 0 8
67315: DEC
67316: ST_TO_ADDR
67317: LD_VAR 0 9
67321: PUSH
67322: FOR_TO
67323: IFFALSE 67424
// for _y = min_y to max_y do
67325: LD_ADDR_VAR 0 6
67329: PUSH
67330: DOUBLE
67331: LD_VAR 0 7
67335: DEC
67336: ST_TO_ADDR
67337: LD_VAR 0 10
67341: PUSH
67342: FOR_TO
67343: IFFALSE 67420
// begin if not ValidHex ( _x , _y ) then
67345: LD_VAR 0 5
67349: PPUSH
67350: LD_VAR 0 6
67354: PPUSH
67355: CALL_OW 488
67359: NOT
67360: IFFALSE 67364
// continue ;
67362: GO 67342
// if GetResourceTypeXY ( _x , _y ) then
67364: LD_VAR 0 5
67368: PPUSH
67369: LD_VAR 0 6
67373: PPUSH
67374: CALL_OW 283
67378: IFFALSE 67418
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67380: LD_ADDR_VAR 0 4
67384: PUSH
67385: LD_VAR 0 4
67389: PPUSH
67390: LD_VAR 0 4
67394: PUSH
67395: LD_INT 1
67397: PLUS
67398: PPUSH
67399: LD_VAR 0 5
67403: PUSH
67404: LD_VAR 0 6
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PPUSH
67413: CALL_OW 1
67417: ST_TO_ADDR
// end ;
67418: GO 67342
67420: POP
67421: POP
67422: GO 67322
67424: POP
67425: POP
// end ;
67426: LD_VAR 0 4
67430: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67431: LD_INT 0
67433: PPUSH
67434: PPUSH
67435: PPUSH
67436: PPUSH
67437: PPUSH
67438: PPUSH
67439: PPUSH
67440: PPUSH
// if not units then
67441: LD_VAR 0 1
67445: NOT
67446: IFFALSE 67450
// exit ;
67448: GO 67974
// result := UnitFilter ( units , [ f_ok ] ) ;
67450: LD_ADDR_VAR 0 3
67454: PUSH
67455: LD_VAR 0 1
67459: PPUSH
67460: LD_INT 50
67462: PUSH
67463: EMPTY
67464: LIST
67465: PPUSH
67466: CALL_OW 72
67470: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67471: LD_ADDR_VAR 0 8
67475: PUSH
67476: LD_VAR 0 1
67480: PUSH
67481: LD_INT 1
67483: ARRAY
67484: PPUSH
67485: CALL_OW 255
67489: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67490: LD_ADDR_VAR 0 10
67494: PUSH
67495: LD_INT 29
67497: PUSH
67498: LD_INT 91
67500: PUSH
67501: LD_INT 49
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: LIST
67508: ST_TO_ADDR
// if not result then
67509: LD_VAR 0 3
67513: NOT
67514: IFFALSE 67518
// exit ;
67516: GO 67974
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67518: LD_ADDR_VAR 0 5
67522: PUSH
67523: LD_INT 81
67525: PUSH
67526: LD_VAR 0 8
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PPUSH
67535: CALL_OW 69
67539: ST_TO_ADDR
// for i in result do
67540: LD_ADDR_VAR 0 4
67544: PUSH
67545: LD_VAR 0 3
67549: PUSH
67550: FOR_IN
67551: IFFALSE 67972
// begin tag := GetTag ( i ) + 1 ;
67553: LD_ADDR_VAR 0 9
67557: PUSH
67558: LD_VAR 0 4
67562: PPUSH
67563: CALL_OW 110
67567: PUSH
67568: LD_INT 1
67570: PLUS
67571: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67572: LD_ADDR_VAR 0 7
67576: PUSH
67577: LD_VAR 0 4
67581: PPUSH
67582: CALL_OW 250
67586: PPUSH
67587: LD_VAR 0 4
67591: PPUSH
67592: CALL_OW 251
67596: PPUSH
67597: LD_INT 6
67599: PPUSH
67600: CALL 67173 0 3
67604: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67605: LD_VAR 0 4
67609: PPUSH
67610: CALL_OW 247
67614: PUSH
67615: LD_INT 2
67617: EQUAL
67618: PUSH
67619: LD_VAR 0 7
67623: AND
67624: PUSH
67625: LD_VAR 0 4
67629: PPUSH
67630: CALL_OW 264
67634: PUSH
67635: LD_VAR 0 10
67639: IN
67640: NOT
67641: AND
67642: IFFALSE 67681
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67644: LD_VAR 0 4
67648: PPUSH
67649: LD_VAR 0 7
67653: PUSH
67654: LD_INT 1
67656: ARRAY
67657: PUSH
67658: LD_INT 1
67660: ARRAY
67661: PPUSH
67662: LD_VAR 0 7
67666: PUSH
67667: LD_INT 1
67669: ARRAY
67670: PUSH
67671: LD_INT 2
67673: ARRAY
67674: PPUSH
67675: CALL_OW 116
67679: GO 67970
// if path > tag then
67681: LD_VAR 0 2
67685: PUSH
67686: LD_VAR 0 9
67690: GREATER
67691: IFFALSE 67899
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67693: LD_ADDR_VAR 0 6
67697: PUSH
67698: LD_VAR 0 5
67702: PPUSH
67703: LD_INT 91
67705: PUSH
67706: LD_VAR 0 4
67710: PUSH
67711: LD_INT 8
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: LIST
67718: PPUSH
67719: CALL_OW 72
67723: ST_TO_ADDR
// if nearEnemy then
67724: LD_VAR 0 6
67728: IFFALSE 67797
// begin if GetWeapon ( i ) = ru_time_lapser then
67730: LD_VAR 0 4
67734: PPUSH
67735: CALL_OW 264
67739: PUSH
67740: LD_INT 49
67742: EQUAL
67743: IFFALSE 67771
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67745: LD_VAR 0 4
67749: PPUSH
67750: LD_VAR 0 6
67754: PPUSH
67755: LD_VAR 0 4
67759: PPUSH
67760: CALL_OW 74
67764: PPUSH
67765: CALL_OW 112
67769: GO 67795
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67771: LD_VAR 0 4
67775: PPUSH
67776: LD_VAR 0 6
67780: PPUSH
67781: LD_VAR 0 4
67785: PPUSH
67786: CALL_OW 74
67790: PPUSH
67791: CALL_OW 115
// end else
67795: GO 67897
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67797: LD_VAR 0 4
67801: PPUSH
67802: LD_VAR 0 2
67806: PUSH
67807: LD_VAR 0 9
67811: ARRAY
67812: PUSH
67813: LD_INT 1
67815: ARRAY
67816: PPUSH
67817: LD_VAR 0 2
67821: PUSH
67822: LD_VAR 0 9
67826: ARRAY
67827: PUSH
67828: LD_INT 2
67830: ARRAY
67831: PPUSH
67832: CALL_OW 297
67836: PUSH
67837: LD_INT 6
67839: GREATER
67840: IFFALSE 67883
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67842: LD_VAR 0 4
67846: PPUSH
67847: LD_VAR 0 2
67851: PUSH
67852: LD_VAR 0 9
67856: ARRAY
67857: PUSH
67858: LD_INT 1
67860: ARRAY
67861: PPUSH
67862: LD_VAR 0 2
67866: PUSH
67867: LD_VAR 0 9
67871: ARRAY
67872: PUSH
67873: LD_INT 2
67875: ARRAY
67876: PPUSH
67877: CALL_OW 114
67881: GO 67897
// SetTag ( i , tag ) ;
67883: LD_VAR 0 4
67887: PPUSH
67888: LD_VAR 0 9
67892: PPUSH
67893: CALL_OW 109
// end else
67897: GO 67970
// if enemy then
67899: LD_VAR 0 5
67903: IFFALSE 67970
// begin if GetWeapon ( i ) = ru_time_lapser then
67905: LD_VAR 0 4
67909: PPUSH
67910: CALL_OW 264
67914: PUSH
67915: LD_INT 49
67917: EQUAL
67918: IFFALSE 67946
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67920: LD_VAR 0 4
67924: PPUSH
67925: LD_VAR 0 5
67929: PPUSH
67930: LD_VAR 0 4
67934: PPUSH
67935: CALL_OW 74
67939: PPUSH
67940: CALL_OW 112
67944: GO 67970
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67946: LD_VAR 0 4
67950: PPUSH
67951: LD_VAR 0 5
67955: PPUSH
67956: LD_VAR 0 4
67960: PPUSH
67961: CALL_OW 74
67965: PPUSH
67966: CALL_OW 115
// end ; end ;
67970: GO 67550
67972: POP
67973: POP
// end ;
67974: LD_VAR 0 3
67978: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67979: LD_INT 0
67981: PPUSH
67982: PPUSH
67983: PPUSH
// if not unit or IsInUnit ( unit ) then
67984: LD_VAR 0 1
67988: NOT
67989: PUSH
67990: LD_VAR 0 1
67994: PPUSH
67995: CALL_OW 310
67999: OR
68000: IFFALSE 68004
// exit ;
68002: GO 68095
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68004: LD_ADDR_VAR 0 4
68008: PUSH
68009: LD_VAR 0 1
68013: PPUSH
68014: CALL_OW 250
68018: PPUSH
68019: LD_VAR 0 2
68023: PPUSH
68024: LD_INT 1
68026: PPUSH
68027: CALL_OW 272
68031: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68032: LD_ADDR_VAR 0 5
68036: PUSH
68037: LD_VAR 0 1
68041: PPUSH
68042: CALL_OW 251
68046: PPUSH
68047: LD_VAR 0 2
68051: PPUSH
68052: LD_INT 1
68054: PPUSH
68055: CALL_OW 273
68059: ST_TO_ADDR
// if ValidHex ( x , y ) then
68060: LD_VAR 0 4
68064: PPUSH
68065: LD_VAR 0 5
68069: PPUSH
68070: CALL_OW 488
68074: IFFALSE 68095
// ComTurnXY ( unit , x , y ) ;
68076: LD_VAR 0 1
68080: PPUSH
68081: LD_VAR 0 4
68085: PPUSH
68086: LD_VAR 0 5
68090: PPUSH
68091: CALL_OW 118
// end ;
68095: LD_VAR 0 3
68099: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68100: LD_INT 0
68102: PPUSH
68103: PPUSH
// result := false ;
68104: LD_ADDR_VAR 0 3
68108: PUSH
68109: LD_INT 0
68111: ST_TO_ADDR
// if not units then
68112: LD_VAR 0 2
68116: NOT
68117: IFFALSE 68121
// exit ;
68119: GO 68166
// for i in units do
68121: LD_ADDR_VAR 0 4
68125: PUSH
68126: LD_VAR 0 2
68130: PUSH
68131: FOR_IN
68132: IFFALSE 68164
// if See ( side , i ) then
68134: LD_VAR 0 1
68138: PPUSH
68139: LD_VAR 0 4
68143: PPUSH
68144: CALL_OW 292
68148: IFFALSE 68162
// begin result := true ;
68150: LD_ADDR_VAR 0 3
68154: PUSH
68155: LD_INT 1
68157: ST_TO_ADDR
// exit ;
68158: POP
68159: POP
68160: GO 68166
// end ;
68162: GO 68131
68164: POP
68165: POP
// end ;
68166: LD_VAR 0 3
68170: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68171: LD_INT 0
68173: PPUSH
68174: PPUSH
68175: PPUSH
68176: PPUSH
// if not unit or not points then
68177: LD_VAR 0 1
68181: NOT
68182: PUSH
68183: LD_VAR 0 2
68187: NOT
68188: OR
68189: IFFALSE 68193
// exit ;
68191: GO 68283
// dist := 99999 ;
68193: LD_ADDR_VAR 0 5
68197: PUSH
68198: LD_INT 99999
68200: ST_TO_ADDR
// for i in points do
68201: LD_ADDR_VAR 0 4
68205: PUSH
68206: LD_VAR 0 2
68210: PUSH
68211: FOR_IN
68212: IFFALSE 68281
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68214: LD_ADDR_VAR 0 6
68218: PUSH
68219: LD_VAR 0 1
68223: PPUSH
68224: LD_VAR 0 4
68228: PUSH
68229: LD_INT 1
68231: ARRAY
68232: PPUSH
68233: LD_VAR 0 4
68237: PUSH
68238: LD_INT 2
68240: ARRAY
68241: PPUSH
68242: CALL_OW 297
68246: ST_TO_ADDR
// if tmpDist < dist then
68247: LD_VAR 0 6
68251: PUSH
68252: LD_VAR 0 5
68256: LESS
68257: IFFALSE 68279
// begin result := i ;
68259: LD_ADDR_VAR 0 3
68263: PUSH
68264: LD_VAR 0 4
68268: ST_TO_ADDR
// dist := tmpDist ;
68269: LD_ADDR_VAR 0 5
68273: PUSH
68274: LD_VAR 0 6
68278: ST_TO_ADDR
// end ; end ;
68279: GO 68211
68281: POP
68282: POP
// end ;
68283: LD_VAR 0 3
68287: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68288: LD_INT 0
68290: PPUSH
// uc_side := side ;
68291: LD_ADDR_OWVAR 20
68295: PUSH
68296: LD_VAR 0 1
68300: ST_TO_ADDR
// uc_nation := 3 ;
68301: LD_ADDR_OWVAR 21
68305: PUSH
68306: LD_INT 3
68308: ST_TO_ADDR
// vc_chassis := 25 ;
68309: LD_ADDR_OWVAR 37
68313: PUSH
68314: LD_INT 25
68316: ST_TO_ADDR
// vc_engine := engine_siberite ;
68317: LD_ADDR_OWVAR 39
68321: PUSH
68322: LD_INT 3
68324: ST_TO_ADDR
// vc_control := control_computer ;
68325: LD_ADDR_OWVAR 38
68329: PUSH
68330: LD_INT 3
68332: ST_TO_ADDR
// vc_weapon := 59 ;
68333: LD_ADDR_OWVAR 40
68337: PUSH
68338: LD_INT 59
68340: ST_TO_ADDR
// result := CreateVehicle ;
68341: LD_ADDR_VAR 0 5
68345: PUSH
68346: CALL_OW 45
68350: ST_TO_ADDR
// SetDir ( result , d ) ;
68351: LD_VAR 0 5
68355: PPUSH
68356: LD_VAR 0 4
68360: PPUSH
68361: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68365: LD_VAR 0 5
68369: PPUSH
68370: LD_VAR 0 2
68374: PPUSH
68375: LD_VAR 0 3
68379: PPUSH
68380: LD_INT 0
68382: PPUSH
68383: CALL_OW 48
// end ;
68387: LD_VAR 0 5
68391: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68392: LD_INT 0
68394: PPUSH
68395: PPUSH
68396: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68397: LD_ADDR_VAR 0 2
68401: PUSH
68402: LD_INT 0
68404: PUSH
68405: LD_INT 0
68407: PUSH
68408: LD_INT 0
68410: PUSH
68411: LD_INT 0
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68420: LD_VAR 0 1
68424: NOT
68425: PUSH
68426: LD_VAR 0 1
68430: PPUSH
68431: CALL_OW 264
68435: PUSH
68436: LD_INT 12
68438: PUSH
68439: LD_INT 51
68441: PUSH
68442: LD_INT 32
68444: PUSH
68445: LD_INT 89
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: IN
68454: NOT
68455: OR
68456: IFFALSE 68460
// exit ;
68458: GO 68558
// for i := 1 to 3 do
68460: LD_ADDR_VAR 0 3
68464: PUSH
68465: DOUBLE
68466: LD_INT 1
68468: DEC
68469: ST_TO_ADDR
68470: LD_INT 3
68472: PUSH
68473: FOR_TO
68474: IFFALSE 68556
// begin tmp := GetCargo ( cargo , i ) ;
68476: LD_ADDR_VAR 0 4
68480: PUSH
68481: LD_VAR 0 1
68485: PPUSH
68486: LD_VAR 0 3
68490: PPUSH
68491: CALL_OW 289
68495: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68496: LD_ADDR_VAR 0 2
68500: PUSH
68501: LD_VAR 0 2
68505: PPUSH
68506: LD_VAR 0 3
68510: PPUSH
68511: LD_VAR 0 4
68515: PPUSH
68516: CALL_OW 1
68520: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68521: LD_ADDR_VAR 0 2
68525: PUSH
68526: LD_VAR 0 2
68530: PPUSH
68531: LD_INT 4
68533: PPUSH
68534: LD_VAR 0 2
68538: PUSH
68539: LD_INT 4
68541: ARRAY
68542: PUSH
68543: LD_VAR 0 4
68547: PLUS
68548: PPUSH
68549: CALL_OW 1
68553: ST_TO_ADDR
// end ;
68554: GO 68473
68556: POP
68557: POP
// end ;
68558: LD_VAR 0 2
68562: RET
// export function Length ( array ) ; begin
68563: LD_INT 0
68565: PPUSH
// result := array + 0 ;
68566: LD_ADDR_VAR 0 2
68570: PUSH
68571: LD_VAR 0 1
68575: PUSH
68576: LD_INT 0
68578: PLUS
68579: ST_TO_ADDR
// end ;
68580: LD_VAR 0 2
68584: RET
// export function PrepareArray ( array ) ; begin
68585: LD_INT 0
68587: PPUSH
// result := array diff 0 ;
68588: LD_ADDR_VAR 0 2
68592: PUSH
68593: LD_VAR 0 1
68597: PUSH
68598: LD_INT 0
68600: DIFF
68601: ST_TO_ADDR
// if not result [ 1 ] then
68602: LD_VAR 0 2
68606: PUSH
68607: LD_INT 1
68609: ARRAY
68610: NOT
68611: IFFALSE 68631
// result := Delete ( result , 1 ) ;
68613: LD_ADDR_VAR 0 2
68617: PUSH
68618: LD_VAR 0 2
68622: PPUSH
68623: LD_INT 1
68625: PPUSH
68626: CALL_OW 3
68630: ST_TO_ADDR
// end ;
68631: LD_VAR 0 2
68635: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68636: LD_INT 0
68638: PPUSH
68639: PPUSH
68640: PPUSH
68641: PPUSH
// sibRocketRange := 25 ;
68642: LD_ADDR_VAR 0 6
68646: PUSH
68647: LD_INT 25
68649: ST_TO_ADDR
// result := false ;
68650: LD_ADDR_VAR 0 4
68654: PUSH
68655: LD_INT 0
68657: ST_TO_ADDR
// for i := 0 to 5 do
68658: LD_ADDR_VAR 0 5
68662: PUSH
68663: DOUBLE
68664: LD_INT 0
68666: DEC
68667: ST_TO_ADDR
68668: LD_INT 5
68670: PUSH
68671: FOR_TO
68672: IFFALSE 68739
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68674: LD_VAR 0 1
68678: PPUSH
68679: LD_VAR 0 5
68683: PPUSH
68684: LD_VAR 0 6
68688: PPUSH
68689: CALL_OW 272
68693: PPUSH
68694: LD_VAR 0 2
68698: PPUSH
68699: LD_VAR 0 5
68703: PPUSH
68704: LD_VAR 0 6
68708: PPUSH
68709: CALL_OW 273
68713: PPUSH
68714: LD_VAR 0 3
68718: PPUSH
68719: CALL_OW 309
68723: IFFALSE 68737
// begin result := true ;
68725: LD_ADDR_VAR 0 4
68729: PUSH
68730: LD_INT 1
68732: ST_TO_ADDR
// exit ;
68733: POP
68734: POP
68735: GO 68741
// end ;
68737: GO 68671
68739: POP
68740: POP
// end ;
68741: LD_VAR 0 4
68745: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68746: LD_INT 0
68748: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68749: LD_VAR 0 1
68753: PPUSH
68754: LD_VAR 0 2
68758: PPUSH
68759: LD_INT 0
68761: PPUSH
68762: LD_INT 0
68764: PPUSH
68765: LD_INT 1
68767: PPUSH
68768: LD_INT 0
68770: PPUSH
68771: CALL_OW 587
// end ; end_of_file
68775: LD_VAR 0 3
68779: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68780: LD_VAR 0 1
68784: PUSH
68785: LD_INT 200
68787: DOUBLE
68788: GREATEREQUAL
68789: IFFALSE 68797
68791: LD_INT 299
68793: DOUBLE
68794: LESSEQUAL
68795: IFTRUE 68799
68797: GO 68831
68799: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68800: LD_VAR 0 1
68804: PPUSH
68805: LD_VAR 0 2
68809: PPUSH
68810: LD_VAR 0 3
68814: PPUSH
68815: LD_VAR 0 4
68819: PPUSH
68820: LD_VAR 0 5
68824: PPUSH
68825: CALL 23446 0 5
68829: GO 68908
68831: LD_INT 300
68833: DOUBLE
68834: GREATEREQUAL
68835: IFFALSE 68843
68837: LD_INT 399
68839: DOUBLE
68840: LESSEQUAL
68841: IFTRUE 68845
68843: GO 68907
68845: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68846: LD_VAR 0 1
68850: PPUSH
68851: LD_VAR 0 2
68855: PPUSH
68856: LD_VAR 0 3
68860: PPUSH
68861: LD_VAR 0 4
68865: PPUSH
68866: LD_VAR 0 5
68870: PPUSH
68871: LD_VAR 0 6
68875: PPUSH
68876: LD_VAR 0 7
68880: PPUSH
68881: LD_VAR 0 8
68885: PPUSH
68886: LD_VAR 0 9
68890: PPUSH
68891: LD_VAR 0 10
68895: PPUSH
68896: LD_VAR 0 11
68900: PPUSH
68901: CALL 19779 0 11
68905: GO 68908
68907: POP
// end ;
68908: PPOPN 11
68910: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68911: LD_VAR 0 1
68915: PPUSH
68916: LD_VAR 0 2
68920: PPUSH
68921: LD_VAR 0 3
68925: PPUSH
68926: LD_VAR 0 4
68930: PPUSH
68931: LD_VAR 0 5
68935: PPUSH
68936: CALL 23182 0 5
// end ; end_of_file
68940: PPOPN 5
68942: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68943: LD_VAR 0 1
68947: PPUSH
68948: LD_VAR 0 2
68952: PPUSH
68953: LD_VAR 0 3
68957: PPUSH
68958: LD_VAR 0 4
68962: PPUSH
68963: LD_VAR 0 5
68967: PPUSH
68968: LD_VAR 0 6
68972: PPUSH
68973: CALL 7431 0 6
// end ;
68977: PPOPN 6
68979: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68980: LD_INT 0
68982: PPUSH
// begin if not units then
68983: LD_VAR 0 1
68987: NOT
68988: IFFALSE 68992
// exit ;
68990: GO 68992
// end ;
68992: PPOPN 7
68994: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68995: CALL 7335 0 0
// end ;
68999: PPOPN 1
69001: END
