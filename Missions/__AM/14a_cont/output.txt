// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 61234 0 9
// PrepareAmerican ;
  46: CALL 4099 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 923 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 27176 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 27176 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 27176 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 451
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 413
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 411
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: PUSH
 366: LD_VAR 0 3
 370: PPUSH
 371: CALL_OW 258
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: AND
 380: PUSH
 381: LD_VAR 0 3
 385: PPUSH
 386: CALL_OW 248
 390: PUSH
 391: LD_INT 3
 393: EQUAL
 394: AND
 395: IFFALSE 409
// begin RuSci := i ;
 397: LD_ADDR_EXP 17
 401: PUSH
 402: LD_VAR 0 3
 406: ST_TO_ADDR
// break ;
 407: GO 411
// end ;
 409: GO 349
 411: POP
 412: POP
// end ; if not RuSci then
 413: LD_EXP 17
 417: NOT
 418: IFFALSE 451
// begin uc_nation := 3 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 3
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 4
 433: PPUSH
 434: LD_INT 10
 436: PPUSH
 437: CALL_OW 380
// RuSci := CreateHuman ;
 441: LD_ADDR_EXP 17
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 451: LD_ADDR_VAR 0 6
 455: PUSH
 456: LD_STRING 14a_JMMVeh
 458: PPUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 30
 489: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 490: LD_ADDR_VAR 0 7
 494: PUSH
 495: LD_STRING 14a_BurlakVeh
 497: PPUSH
 498: LD_INT 22
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 1
 506: PUSH
 507: LD_INT 51
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 30
 528: ST_TO_ADDR
// uc_direction := 4 ;
 529: LD_ADDR_OWVAR 24
 533: PUSH
 534: LD_INT 4
 536: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 6
 549: ARRAY
 550: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 551: LD_VAR 0 6
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_VAR 0 6
 564: PUSH
 565: LD_INT 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 6
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 6
 582: PUSH
 583: LD_INT 4
 585: ARRAY
 586: PPUSH
 587: LD_INT 60
 589: PPUSH
 590: LD_INT 80
 592: PPUSH
 593: CALL_OW 12
 597: PPUSH
 598: CALL 32191 0 5
// JMMVeh := CreateVehicle ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: CALL_OW 45
 611: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 63469 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 627: LD_VAR 0 6
 631: PUSH
 632: LD_INT 5
 634: ARRAY
 635: PUSH
 636: LD_INT 0
 638: NONEQUAL
 639: IFFALSE 659
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 6
 650: PUSH
 651: LD_INT 5
 653: ARRAY
 654: PPUSH
 655: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 659: LD_EXP 14
 663: PPUSH
 664: LD_VAR 0 4
 668: PPUSH
 669: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 673: LD_ADDR_OWVAR 21
 677: PUSH
 678: LD_VAR 0 7
 682: PUSH
 683: LD_INT 6
 685: ARRAY
 686: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 687: LD_VAR 0 7
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: PPUSH
 696: LD_VAR 0 7
 700: PUSH
 701: LD_INT 2
 703: ARRAY
 704: PPUSH
 705: LD_VAR 0 7
 709: PUSH
 710: LD_INT 3
 712: ARRAY
 713: PPUSH
 714: LD_VAR 0 7
 718: PUSH
 719: LD_INT 4
 721: ARRAY
 722: PPUSH
 723: LD_INT 60
 725: PPUSH
 726: LD_INT 80
 728: PPUSH
 729: CALL_OW 12
 733: PPUSH
 734: CALL 32191 0 5
// BurlakVeh := CreateVehicle ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 748: LD_VAR 0 5
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 63469 0 3
 763: NOT
 764: IFFALSE 784
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 766: LD_VAR 0 5
 770: PPUSH
 771: LD_INT 233
 773: PPUSH
 774: LD_INT 85
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 784: LD_VAR 0 7
 788: PUSH
 789: LD_INT 5
 791: ARRAY
 792: PUSH
 793: LD_INT 0
 795: NONEQUAL
 796: IFFALSE 816
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_VAR 0 7
 807: PUSH
 808: LD_INT 5
 810: ARRAY
 811: PPUSH
 812: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 816: LD_EXP 15
 820: PPUSH
 821: LD_VAR 0 5
 825: PPUSH
 826: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_INT 178
 837: PUSH
 838: LD_INT 91
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 137
 847: PUSH
 848: LD_INT 83
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 157
 857: PUSH
 858: LD_INT 75
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 162
 867: PUSH
 868: LD_INT 67
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 887: LD_INT 4
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 58
// end ; end_of_file
 918: LD_VAR 0 1
 922: RET
// export function Action ; begin
 923: LD_INT 0
 925: PPUSH
// InGameOn ;
 926: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 930: LD_INT 221
 932: PPUSH
 933: LD_INT 80
 935: PPUSH
 936: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 940: LD_EXP 14
 944: PUSH
 945: LD_EXP 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: LD_INT 217
 956: PPUSH
 957: LD_INT 79
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$7 ) ;
 964: LD_INT 245
 966: PPUSH
 967: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 971: LD_EXP 14
 975: PUSH
 976: LD_EXP 15
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 989: LD_EXP 15
 993: PPUSH
 994: LD_STRING D2-Bur-1
 996: PPUSH
 997: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1001: LD_EXP 14
1005: PPUSH
1006: LD_STRING D2-JMM-1
1008: PPUSH
1009: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1013: LD_INT 18
1015: PPUSH
1016: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1020: LD_EXP 15
1024: PPUSH
1025: LD_EXP 14
1029: PPUSH
1030: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1034: LD_EXP 15
1038: PPUSH
1039: LD_STRING D2-Bur-2
1041: PPUSH
1042: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1046: LD_EXP 15
1050: PPUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 2
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: PPUSH
1066: LD_EXP 15
1070: PPUSH
1071: CALL_OW 74
1075: PPUSH
1076: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1080: LD_EXP 14
1084: PPUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 2
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL_OW 69
1099: PPUSH
1100: LD_EXP 14
1104: PPUSH
1105: CALL_OW 74
1109: PPUSH
1110: CALL_OW 120
// wait ( 0 0$1 ) ;
1114: LD_INT 35
1116: PPUSH
1117: CALL_OW 67
// InGameOff ;
1121: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1125: LD_STRING MArtPickup
1127: PPUSH
1128: CALL_OW 337
// end ;
1132: LD_VAR 0 1
1136: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1137: LD_EXP 22
1141: PPUSH
1142: LD_INT 101
1144: PUSH
1145: LD_INT 7
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: PUSH
1157: LD_EXP 8
1161: NOT
1162: AND
1163: IFFALSE 1192
1165: GO 1167
1167: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING D3-Bur-1
1175: PPUSH
1176: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1180: LD_EXP 14
1184: PPUSH
1185: LD_STRING D3-JMM-1
1187: PPUSH
1188: CALL_OW 88
// end ;
1192: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1193: LD_INT 5
1195: PPUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 70
1210: IFFALSE 1545
1212: GO 1214
1214: DISABLE
// begin wait ( 0 0$3 ) ;
1215: LD_INT 105
1217: PPUSH
1218: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1222: LD_INT 139
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 7
1230: PPUSH
1231: LD_INT 20
1233: NEG
1234: PPUSH
1235: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1239: LD_INT 139
1241: PPUSH
1242: LD_INT 43
1244: PPUSH
1245: LD_INT 7
1247: PPUSH
1248: CALL_OW 331
// DialogueOn ;
1252: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1256: LD_EXP 14
1260: PPUSH
1261: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1265: LD_EXP 14
1269: PPUSH
1270: LD_STRING D3a-JMM-1
1272: PPUSH
1273: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1277: LD_EXP 15
1281: PPUSH
1282: LD_STRING D3a-Bur-1
1284: PPUSH
1285: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_STRING D3a-JMM-2
1296: PPUSH
1297: CALL_OW 88
// if Joan then
1301: LD_EXP 16
1305: IFFALSE 1321
// SayRadio ( Joan , D3a-Joan-2 ) else
1307: LD_EXP 16
1311: PPUSH
1312: LD_STRING D3a-Joan-2
1314: PPUSH
1315: CALL_OW 94
1319: GO 1333
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1321: LD_EXP 17
1325: PPUSH
1326: LD_STRING D3a-RSci1-2
1328: PPUSH
1329: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_STRING D3a-Huck-2
1340: PPUSH
1341: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_STRING D3a-Pow-2
1352: PPUSH
1353: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1357: LD_EXP 18
1361: PPUSH
1362: LD_STRING D3a-Huck-3
1364: PPUSH
1365: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1369: LD_EXP 19
1373: PPUSH
1374: LD_STRING D3a-Pow-3
1376: PPUSH
1377: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1381: LD_EXP 18
1385: PPUSH
1386: LD_STRING D3a-Huck-4
1388: PPUSH
1389: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1393: LD_EXP 14
1397: PPUSH
1398: LD_STRING D3a-JMM-4
1400: PPUSH
1401: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1405: LD_EXP 15
1409: PPUSH
1410: LD_STRING D3a-Bur-4
1412: PPUSH
1413: CALL_OW 88
// if Joan then
1417: LD_EXP 16
1421: IFFALSE 1437
// SayRadio ( Joan , D3a-Joan-4 ) else
1423: LD_EXP 16
1427: PPUSH
1428: LD_STRING D3a-Joan-4
1430: PPUSH
1431: CALL_OW 94
1435: GO 1449
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1437: LD_EXP 17
1441: PPUSH
1442: LD_STRING D3a-RSci1-4
1444: PPUSH
1445: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1449: LD_INT 133
1451: PPUSH
1452: LD_INT 43
1454: PPUSH
1455: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1459: LD_INT 10
1461: PPUSH
1462: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1466: LD_EXP 14
1470: PPUSH
1471: LD_STRING D3a-JMM-5
1473: PPUSH
1474: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1478: LD_EXP 15
1482: PPUSH
1483: LD_STRING D3a-Bur-5
1485: PPUSH
1486: CALL_OW 88
// DialogueOff ;
1490: CALL_OW 7
// seenBase := true ;
1494: LD_ADDR_EXP 8
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1502: LD_INT 525
1504: PUSH
1505: LD_INT 420
1507: PUSH
1508: LD_INT 315
1510: PUSH
1511: LD_INT 280
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PPUSH
1526: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1530: LD_EXP 21
1534: PPUSH
1535: LD_INT 142
1537: PPUSH
1538: LD_INT 52
1540: PPUSH
1541: CALL_OW 116
// end ;
1545: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1546: LD_EXP 8
1550: NOT
1551: PUSH
1552: LD_EXP 4
1556: NOT
1557: AND
1558: IFFALSE 1578
1560: GO 1562
1562: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1563: LD_EXP 21
1567: PPUSH
1568: LD_INT 142
1570: PPUSH
1571: LD_INT 52
1573: PPUSH
1574: CALL_OW 116
1578: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// contaminateTime := tick ;
1583: LD_ADDR_EXP 3
1587: PUSH
1588: LD_OWVAR 1
1592: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1593: LD_INT 175
1595: PPUSH
1596: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1600: LD_ADDR_VAR 0 5
1604: PUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 469
1612: ST_TO_ADDR
// if art then
1613: LD_VAR 0 5
1617: IFFALSE 1656
// if art [ 1 ] = 157 and art [ 2 ] = 75 then
1619: LD_VAR 0 5
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PUSH
1628: LD_INT 157
1630: EQUAL
1631: PUSH
1632: LD_VAR 0 5
1636: PUSH
1637: LD_INT 2
1639: ARRAY
1640: PUSH
1641: LD_INT 75
1643: EQUAL
1644: AND
1645: IFFALSE 1656
// begin YouLost ( Artefact ) ;
1647: LD_STRING Artefact
1649: PPUSH
1650: CALL_OW 104
// exit ;
1654: GO 1812
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1656: LD_EXP 14
1660: PPUSH
1661: CALL_OW 302
1665: PUSH
1666: LD_EXP 15
1670: PPUSH
1671: CALL_OW 302
1675: AND
1676: IFFALSE 1753
// begin DialogueOn ;
1678: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1682: LD_EXP 14
1686: PPUSH
1687: LD_STRING D6a-JMM-1
1689: PPUSH
1690: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1694: LD_EXP 15
1698: PPUSH
1699: LD_STRING D6a-Bur-1
1701: PPUSH
1702: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1706: LD_EXP 14
1710: PPUSH
1711: LD_STRING D6c-JMM-1
1713: PPUSH
1714: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1718: LD_EXP 15
1722: PPUSH
1723: LD_STRING D6c-Bur-1
1725: PPUSH
1726: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1730: LD_EXP 14
1734: PPUSH
1735: LD_STRING D6c-JMM-2
1737: PPUSH
1738: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1742: LD_STRING MBase
1744: PPUSH
1745: CALL_OW 337
// DialogueOff ;
1749: CALL_OW 7
// end ; bombExploded := true ;
1753: LD_ADDR_EXP 4
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1761: LD_INT 6300
1763: PUSH
1764: LD_INT 5250
1766: PUSH
1767: LD_INT 4200
1769: PUSH
1770: LD_INT 3500
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: LD_OWVAR 67
1783: ARRAY
1784: PPUSH
1785: CALL_OW 67
// if IsOk ( JMM ) then
1789: LD_EXP 14
1793: PPUSH
1794: CALL_OW 302
1798: IFFALSE 1812
// Say ( JMM , D8-JMM-1 ) ;
1800: LD_EXP 14
1804: PPUSH
1805: LD_STRING D8-JMM-1
1807: PPUSH
1808: CALL_OW 88
// end ;
1812: LD_VAR 0 4
1816: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1817: LD_EXP 9
1821: PUSH
1822: LD_EXP 7
1826: NOT
1827: AND
1828: PUSH
1829: LD_EXP 4
1833: AND
1834: IFFALSE 1889
1836: GO 1838
1838: DISABLE
// begin enable ;
1839: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1840: LD_INT 9
1842: PPUSH
1843: LD_INT 22
1845: PUSH
1846: LD_INT 7
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 70
1857: IFFALSE 1875
// stevensTimer := stevensTimer - 0 0$30 else
1859: LD_ADDR_EXP 9
1863: PUSH
1864: LD_EXP 9
1868: PUSH
1869: LD_INT 1050
1871: MINUS
1872: ST_TO_ADDR
1873: GO 1889
// stevensTimer := stevensTimer - 0 0$1 ;
1875: LD_ADDR_EXP 9
1879: PUSH
1880: LD_EXP 9
1884: PUSH
1885: LD_INT 35
1887: MINUS
1888: ST_TO_ADDR
// end ;
1889: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1890: LD_EXP 9
1894: PUSH
1895: LD_INT 0
1897: LESSEQUAL
1898: PUSH
1899: LD_EXP 7
1903: NOT
1904: AND
1905: IFFALSE 2069
1907: GO 1909
1909: DISABLE
1910: LD_INT 0
1912: PPUSH
1913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: LD_INT 22
1921: PUSH
1922: LD_INT 1
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 25
1931: PUSH
1932: LD_INT 4
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PPUSH
1943: CALL_OW 69
1947: ST_TO_ADDR
// for i in tmp do
1948: LD_ADDR_VAR 0 1
1952: PUSH
1953: LD_VAR 0 2
1957: PUSH
1958: FOR_IN
1959: IFFALSE 2012
// begin if IsInUnit ( i ) then
1961: LD_VAR 0 1
1965: PPUSH
1966: CALL_OW 310
1970: IFFALSE 1983
// ComExitBuilding ( i ) else
1972: LD_VAR 0 1
1976: PPUSH
1977: CALL_OW 122
1981: GO 2010
// if not HasTask ( i ) then
1983: LD_VAR 0 1
1987: PPUSH
1988: CALL_OW 314
1992: NOT
1993: IFFALSE 2010
// ComMoveXY ( i , 29 , 56 ) ;
1995: LD_VAR 0 1
1999: PPUSH
2000: LD_INT 29
2002: PPUSH
2003: LD_INT 56
2005: PPUSH
2006: CALL_OW 111
// end ;
2010: GO 1958
2012: POP
2013: POP
// repeat wait ( 0 0$1 ) ;
2014: LD_INT 35
2016: PPUSH
2017: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2021: LD_INT 8
2023: PPUSH
2024: LD_INT 22
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 4
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PPUSH
2048: CALL_OW 70
2052: IFFALSE 2014
// if planCaptured then
2054: LD_EXP 7
2058: IFFALSE 2062
// exit ;
2060: GO 2069
// YouLost ( Time ) ;
2062: LD_STRING Time
2064: PPUSH
2065: CALL_OW 104
// end ;
2069: PPOPN 2
2071: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2072: LD_INT 22
2074: PUSH
2075: LD_INT 7
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 92
2084: PUSH
2085: LD_INT 142
2087: PUSH
2088: LD_INT 52
2090: PUSH
2091: LD_INT 27
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PPUSH
2104: CALL_OW 69
2108: PUSH
2109: LD_EXP 3
2113: PUSH
2114: LD_INT 6000
2116: PLUS
2117: PUSH
2118: LD_OWVAR 1
2122: GREATER
2123: AND
2124: PUSH
2125: LD_EXP 4
2129: AND
2130: IFFALSE 2185
2132: GO 2134
2134: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2135: LD_EXP 14
2139: PUSH
2140: LD_EXP 15
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PPUSH
2149: CALL_OW 85
// DialogueOn ;
2153: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2157: LD_EXP 14
2161: PPUSH
2162: LD_STRING D6b-JMM-1
2164: PPUSH
2165: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2169: LD_EXP 15
2173: PPUSH
2174: LD_STRING D6b-Bur-1
2176: PPUSH
2177: CALL_OW 88
// DialogueOff ;
2181: CALL_OW 7
// end ;
2185: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2186: LD_EXP 15
2190: PPUSH
2191: LD_INT 142
2193: PPUSH
2194: LD_INT 52
2196: PPUSH
2197: CALL_OW 297
2201: PUSH
2202: LD_INT 25
2204: LESS
2205: PUSH
2206: LD_EXP 15
2210: PPUSH
2211: CALL_OW 310
2215: PPUSH
2216: LD_INT 142
2218: PPUSH
2219: LD_INT 52
2221: PPUSH
2222: CALL_OW 297
2226: PUSH
2227: LD_INT 25
2229: LESS
2230: OR
2231: PUSH
2232: LD_EXP 15
2236: PPUSH
2237: CALL_OW 256
2241: PUSH
2242: LD_INT 1000
2244: LESS
2245: AND
2246: PUSH
2247: LD_EXP 3
2251: PUSH
2252: LD_INT 6000
2254: PLUS
2255: PUSH
2256: LD_OWVAR 1
2260: GREATER
2261: AND
2262: PUSH
2263: LD_EXP 4
2267: AND
2268: IFFALSE 2301
2270: GO 2272
2272: DISABLE
// begin DialogueOn ;
2273: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2277: LD_EXP 15
2281: PPUSH
2282: LD_STRING D7-Bur-1
2284: PPUSH
2285: CALL_OW 88
// enteredContaminatedArea := true ;
2289: LD_ADDR_EXP 5
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// DialogueOff ;
2297: CALL_OW 7
// end ;
2301: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2302: LD_EXP 14
2306: PPUSH
2307: LD_INT 142
2309: PPUSH
2310: LD_INT 52
2312: PPUSH
2313: CALL_OW 297
2317: PUSH
2318: LD_INT 25
2320: LESS
2321: PUSH
2322: LD_EXP 14
2326: PPUSH
2327: CALL_OW 310
2331: PPUSH
2332: LD_INT 142
2334: PPUSH
2335: LD_INT 52
2337: PPUSH
2338: CALL_OW 297
2342: PUSH
2343: LD_INT 25
2345: LESS
2346: OR
2347: PUSH
2348: LD_EXP 14
2352: PPUSH
2353: CALL_OW 256
2357: PUSH
2358: LD_INT 1000
2360: LESS
2361: AND
2362: PUSH
2363: LD_EXP 3
2367: PUSH
2368: LD_INT 6000
2370: PLUS
2371: PUSH
2372: LD_OWVAR 1
2376: GREATER
2377: AND
2378: PUSH
2379: LD_EXP 4
2383: AND
2384: IFFALSE 2417
2386: GO 2388
2388: DISABLE
// begin DialogueOn ;
2389: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2393: LD_EXP 14
2397: PPUSH
2398: LD_STRING D7-JMM-1
2400: PPUSH
2401: CALL_OW 88
// enteredContaminatedArea := true ;
2405: LD_ADDR_EXP 5
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// DialogueOff ;
2413: CALL_OW 7
// end ;
2417: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2418: LD_EXP 6
2422: PUSH
2423: LD_EXP 14
2427: PPUSH
2428: CALL_OW 302
2432: AND
2433: PUSH
2434: LD_EXP 15
2438: PPUSH
2439: CALL_OW 302
2443: AND
2444: IFFALSE 2513
2446: GO 2448
2448: DISABLE
// begin DialogueOn ;
2449: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2453: LD_EXP 14
2457: PUSH
2458: LD_EXP 15
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PPUSH
2467: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2471: LD_EXP 14
2475: PPUSH
2476: LD_STRING D4-JMM-1
2478: PPUSH
2479: CALL_OW 88
// if not bombExploded then
2483: LD_EXP 4
2487: NOT
2488: IFFALSE 2502
// Say ( Burlak , D4-Bur-1 ) ;
2490: LD_EXP 15
2494: PPUSH
2495: LD_STRING D4-Bur-1
2497: PPUSH
2498: CALL_OW 88
// DialogueOff ;
2502: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2506: LD_STRING MReturn
2508: PPUSH
2509: CALL_OW 337
// end ;
2513: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2514: LD_EXP 7
2518: NOT
2519: PUSH
2520: LD_INT 22
2522: PUSH
2523: LD_INT 7
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 91
2532: PUSH
2533: LD_INT 9
2535: PUSH
2536: LD_INT 6
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: LIST
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PPUSH
2548: CALL_OW 69
2552: AND
2553: IFFALSE 2630
2555: GO 2557
2557: DISABLE
// begin DialogueOn ;
2558: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2562: LD_INT 55
2564: PPUSH
2565: LD_INT 11
2567: PPUSH
2568: LD_INT 7
2570: PPUSH
2571: LD_INT 6
2573: NEG
2574: PPUSH
2575: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2579: LD_INT 55
2581: PPUSH
2582: LD_INT 11
2584: PPUSH
2585: LD_INT 7
2587: PPUSH
2588: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2592: LD_EXP 15
2596: PPUSH
2597: LD_STRING D9-Bur-1
2599: PPUSH
2600: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2604: LD_EXP 14
2608: PPUSH
2609: LD_STRING D9-JMM-1
2611: PPUSH
2612: CALL_OW 88
// DialogueOff ;
2616: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2620: LD_INT 9
2622: PPUSH
2623: LD_INT 7
2625: PPUSH
2626: CALL_OW 235
// end ;
2630: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2631: LD_INT 9
2633: PPUSH
2634: LD_INT 22
2636: PUSH
2637: LD_INT 7
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: PPUSH
2644: CALL_OW 70
2648: IFFALSE 2684
2650: GO 2652
2652: DISABLE
// begin wait ( 0 0$07 ) ;
2653: LD_INT 245
2655: PPUSH
2656: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2660: LD_EXP 14
2664: PPUSH
2665: LD_STRING D10b-JMM-1
2667: PPUSH
2668: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2672: LD_EXP 15
2676: PPUSH
2677: LD_STRING D10b-Bur-1
2679: PPUSH
2680: CALL_OW 88
// end ;
2684: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2685: LD_EXP 9
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 1
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 25
2702: PUSH
2703: LD_INT 4
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 26
2712: PUSH
2713: LD_INT 1
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: PPUSH
2725: CALL_OW 69
2729: AND
2730: PUSH
2731: LD_INT 5
2733: PPUSH
2734: CALL_OW 255
2738: PUSH
2739: LD_INT 7
2741: EQUAL
2742: PUSH
2743: LD_INT 22
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 25
2755: PUSH
2756: LD_INT 1
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PPUSH
2767: CALL_OW 69
2771: PUSH
2772: LD_INT 0
2774: EQUAL
2775: OR
2776: AND
2777: IFFALSE 3366
2779: GO 2781
2781: DISABLE
2782: LD_INT 0
2784: PPUSH
// begin case Query ( QKill ) of 1 :
2785: LD_STRING QKill
2787: PPUSH
2788: CALL_OW 97
2792: PUSH
2793: LD_INT 1
2795: DOUBLE
2796: EQUAL
2797: IFTRUE 2801
2799: GO 3354
2801: POP
// begin DialogueOn ;
2802: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2806: LD_EXP 14
2810: PPUSH
2811: LD_STRING D10a-JMM-1
2813: PPUSH
2814: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2818: LD_EXP 15
2822: PPUSH
2823: LD_STRING D10a-Bur-1
2825: PPUSH
2826: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2830: LD_EXP 14
2834: PPUSH
2835: LD_STRING D10a-JMM-2
2837: PPUSH
2838: CALL_OW 88
// if IsOk ( Stevens ) then
2842: LD_EXP 18
2846: PPUSH
2847: CALL_OW 302
2851: IFFALSE 2867
// Say ( Stevens , D10a-Huck-2 ) else
2853: LD_EXP 18
2857: PPUSH
2858: LD_STRING D10a-Huck-2
2860: PPUSH
2861: CALL_OW 88
2865: GO 2918
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2867: LD_INT 22
2869: PUSH
2870: LD_INT 1
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 25
2879: PUSH
2880: LD_INT 4
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PUSH
2887: LD_INT 26
2889: PUSH
2890: LD_INT 1
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 69
2906: PUSH
2907: LD_INT 1
2909: ARRAY
2910: PPUSH
2911: LD_STRING D10a-ASci1-3
2913: PPUSH
2914: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2918: LD_EXP 14
2922: PPUSH
2923: LD_STRING D10a-JMM-4
2925: PPUSH
2926: CALL_OW 88
// if IsOk ( Stevens ) then
2930: LD_EXP 18
2934: PPUSH
2935: CALL_OW 302
2939: IFFALSE 2953
// Say ( Stevens , D10a-Huck-3 ) ;
2941: LD_EXP 18
2945: PPUSH
2946: LD_STRING D10a-Huck-3
2948: PPUSH
2949: CALL_OW 88
// DialogueOff ;
2953: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2957: LD_INT 1
2959: PPUSH
2960: LD_INT 7
2962: PPUSH
2963: LD_INT 1
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: CALL_OW 80
// planCaptured := true ;
2973: LD_ADDR_EXP 7
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2981: LD_STRING MEnd
2983: PPUSH
2984: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
2988: LD_STRING ACH_DIPLOMACY
2990: PPUSH
2991: CALL_OW 543
// canEnd := true ;
2995: LD_ADDR_EXP 10
2999: PUSH
3000: LD_INT 1
3002: ST_TO_ADDR
// missionTime := tick ;
3003: LD_ADDR_EXP 11
3007: PUSH
3008: LD_OWVAR 1
3012: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3013: LD_INT 35
3015: PPUSH
3016: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 3
3032: PUSH
3033: LD_INT 50
3035: PUSH
3036: EMPTY
3037: LIST
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PPUSH
3047: CALL_OW 69
3051: IFFALSE 3167
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3053: LD_ADDR_VAR 0 1
3057: PUSH
3058: LD_INT 22
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 25
3070: PUSH
3071: LD_INT 4
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 69
3086: PUSH
3087: FOR_IN
3088: IFFALSE 3165
// begin if IsInUnit ( i ) then
3090: LD_VAR 0 1
3094: PPUSH
3095: CALL_OW 310
3099: IFFALSE 3112
// ComExitBuilding ( i ) else
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 122
3110: GO 3163
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 22
3119: PUSH
3120: LD_INT 1
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 50
3132: PUSH
3133: EMPTY
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 128
// end ;
3163: GO 3087
3165: POP
3166: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3167: LD_INT 22
3169: PUSH
3170: LD_INT 1
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 3
3179: PUSH
3180: LD_INT 50
3182: PUSH
3183: EMPTY
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: PPUSH
3194: CALL_OW 69
3198: NOT
3199: IFFALSE 3013
// repeat wait ( 3 ) ;
3201: LD_INT 3
3203: PPUSH
3204: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 1
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 21
3225: PUSH
3226: LD_INT 1
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PPUSH
3237: CALL_OW 69
3241: PUSH
3242: FOR_IN
3243: IFFALSE 3319
// begin if IsInArea ( i , stevensEscapeArea ) then
3245: LD_VAR 0 1
3249: PPUSH
3250: LD_INT 8
3252: PPUSH
3253: CALL_OW 308
3257: IFFALSE 3270
// begin RemoveUnit ( i ) ;
3259: LD_VAR 0 1
3263: PPUSH
3264: CALL_OW 64
// continue ;
3268: GO 3242
// end ; if IsInUnit ( i ) then
3270: LD_VAR 0 1
3274: PPUSH
3275: CALL_OW 310
3279: IFFALSE 3290
// ComExitBuilding ( i ) ;
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 122
// if not HasTask ( i ) then
3290: LD_VAR 0 1
3294: PPUSH
3295: CALL_OW 314
3299: NOT
3300: IFFALSE 3317
// ComMoveXY ( i , 28 , 55 ) ;
3302: LD_VAR 0 1
3306: PPUSH
3307: LD_INT 28
3309: PPUSH
3310: LD_INT 55
3312: PPUSH
3313: CALL_OW 111
// end ;
3317: GO 3242
3319: POP
3320: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3321: LD_INT 22
3323: PUSH
3324: LD_INT 1
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 21
3333: PUSH
3334: LD_INT 1
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 69
3349: NOT
3350: IFFALSE 3201
// end ; 2 :
3352: GO 3366
3354: LD_INT 2
3356: DOUBLE
3357: EQUAL
3358: IFTRUE 3362
3360: GO 3365
3362: POP
// ; end ;
3363: GO 3366
3365: POP
// end ;
3366: PPOPN 1
3368: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3369: LD_EXP 10
3373: IFFALSE 3730
3375: GO 3377
3377: DISABLE
3378: LD_INT 0
3380: PPUSH
3381: PPUSH
3382: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3383: LD_INT 10
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: CALL_OW 424
// if Difficulty < 2 then
3393: LD_OWVAR 67
3397: PUSH
3398: LD_INT 2
3400: LESS
3401: IFFALSE 3405
// exit ;
3403: GO 3730
// uc_side := 4 ;
3405: LD_ADDR_OWVAR 20
3409: PUSH
3410: LD_INT 4
3412: ST_TO_ADDR
// uc_nation := 1 ;
3413: LD_ADDR_OWVAR 21
3417: PUSH
3418: LD_INT 1
3420: ST_TO_ADDR
// InitHc ;
3421: CALL_OW 19
// tmp := [ ] ;
3425: LD_ADDR_VAR 0 3
3429: PUSH
3430: EMPTY
3431: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3432: LD_INT 0
3434: PPUSH
3435: LD_INT 5
3437: PPUSH
3438: LD_INT 10
3440: PPUSH
3441: CALL_OW 380
// un := CreateHuman ;
3445: LD_ADDR_VAR 0 1
3449: PUSH
3450: CALL_OW 44
3454: ST_TO_ADDR
// tmp := [ un ] ;
3455: LD_ADDR_VAR 0 3
3459: PUSH
3460: LD_VAR 0 1
3464: PUSH
3465: EMPTY
3466: LIST
3467: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3468: LD_VAR 0 1
3472: PPUSH
3473: LD_INT 226
3475: PPUSH
3476: LD_INT 86
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL_OW 48
// ComHold ( un ) ;
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 140
// for i = 1 to 3 do
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: DOUBLE
3501: LD_INT 1
3503: DEC
3504: ST_TO_ADDR
3505: LD_INT 3
3507: PUSH
3508: FOR_TO
3509: IFFALSE 3608
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3511: LD_INT 0
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: LD_INT 8
3519: PPUSH
3520: CALL_OW 380
// un := CreateHuman ;
3524: LD_ADDR_VAR 0 1
3528: PUSH
3529: CALL_OW 44
3533: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3534: LD_VAR 0 1
3538: PPUSH
3539: LD_INT 5
3541: PPUSH
3542: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_INT 215
3553: PUSH
3554: LD_INT 217
3556: PUSH
3557: LD_INT 219
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: LD_VAR 0 2
3569: ARRAY
3570: PPUSH
3571: LD_INT 76
3573: PPUSH
3574: LD_INT 0
3576: PPUSH
3577: CALL_OW 48
// ComCrawl ( un ) ;
3581: LD_VAR 0 1
3585: PPUSH
3586: CALL_OW 137
// tmp := tmp ^ un ;
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: LD_VAR 0 3
3599: PUSH
3600: LD_VAR 0 1
3604: ADD
3605: ST_TO_ADDR
// end ;
3606: GO 3508
3608: POP
3609: POP
// repeat wait ( 0 0$1 ) ;
3610: LD_INT 35
3612: PPUSH
3613: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3617: LD_VAR 0 3
3621: PPUSH
3622: LD_INT 24
3624: PUSH
3625: LD_INT 1000
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: PPUSH
3632: CALL_OW 72
3636: NOT
3637: IFFALSE 3610
// for i in tmp do
3639: LD_ADDR_VAR 0 2
3643: PUSH
3644: LD_VAR 0 3
3648: PUSH
3649: FOR_IN
3650: IFFALSE 3728
// begin wait ( 0 0$1 ) ;
3652: LD_INT 35
3654: PPUSH
3655: CALL_OW 67
// if Crawls ( i ) then
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 318
3668: IFFALSE 3681
// ComWalk ( i ) else
3670: LD_VAR 0 2
3674: PPUSH
3675: CALL_OW 138
3679: GO 3726
// if GetClass ( i ) = class_sniper then
3681: LD_VAR 0 2
3685: PPUSH
3686: CALL_OW 257
3690: PUSH
3691: LD_INT 5
3693: EQUAL
3694: IFFALSE 3712
// ComAttackSoporific ( i , JMM ) else
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_EXP 14
3705: PPUSH
3706: CALL_OW 166
3710: GO 3726
// ComAttackUnit ( i , JMM ) ;
3712: LD_VAR 0 2
3716: PPUSH
3717: LD_EXP 14
3721: PPUSH
3722: CALL_OW 115
// end ;
3726: GO 3649
3728: POP
3729: POP
// end ;
3730: PPOPN 3
3732: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3733: LD_EXP 7
3737: NOT
3738: PUSH
3739: LD_INT 1
3741: PPUSH
3742: CALL_OW 301
3746: AND
3747: IFFALSE 3759
3749: GO 3751
3751: DISABLE
// YouLost ( Lab ) ;
3752: LD_STRING Lab
3754: PPUSH
3755: CALL_OW 104
3759: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3760: LD_INT 10
3762: PPUSH
3763: LD_INT 22
3765: PUSH
3766: LD_INT 7
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PPUSH
3773: CALL_OW 70
3777: PUSH
3778: LD_INT 2
3780: GREATEREQUAL
3781: PUSH
3782: LD_INT 10
3784: PPUSH
3785: LD_INT 2
3787: PUSH
3788: LD_INT 34
3790: PUSH
3791: LD_INT 12
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 34
3800: PUSH
3801: LD_INT 51
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: LIST
3812: PPUSH
3813: CALL_OW 70
3817: AND
3818: PUSH
3819: LD_EXP 10
3823: AND
3824: PUSH
3825: LD_EXP 7
3829: AND
3830: PUSH
3831: LD_EXP 6
3835: AND
3836: IFFALSE 4096
3838: GO 3840
3840: DISABLE
3841: LD_INT 0
3843: PPUSH
3844: PPUSH
// begin m1 := false ;
3845: LD_ADDR_VAR 0 1
3849: PUSH
3850: LD_INT 0
3852: ST_TO_ADDR
// m2 := false ;
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: LD_INT 0
3860: ST_TO_ADDR
// if killCounter = 0 then
3861: LD_EXP 12
3865: PUSH
3866: LD_INT 0
3868: EQUAL
3869: IFFALSE 3878
// SetAchievement ( ACH_PACIFIST ) ;
3871: LD_STRING ACH_PACIFIST
3873: PPUSH
3874: CALL_OW 543
// if tick < 7 7$00 then
3878: LD_OWVAR 1
3882: PUSH
3883: LD_INT 14700
3885: LESS
3886: IFFALSE 3902
// begin wait ( 3 ) ;
3888: LD_INT 3
3890: PPUSH
3891: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3895: LD_STRING ACH_ASPEED_18
3897: PPUSH
3898: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3902: LD_STRING Explosion
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL_OW 101
// if enteredContaminatedArea then
3912: LD_EXP 5
3916: IFFALSE 3938
// begin m1 := true ;
3918: LD_ADDR_VAR 0 1
3922: PUSH
3923: LD_INT 1
3925: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3926: LD_STRING BioHazard
3928: PPUSH
3929: LD_INT 1
3931: PPUSH
3932: CALL_OW 101
// end else
3936: GO 3949
// AddMedal ( BioHazard , - 1 ) ;
3938: LD_STRING BioHazard
3940: PPUSH
3941: LD_INT 1
3943: NEG
3944: PPUSH
3945: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
3949: LD_EXP 11
3953: PUSH
3954: LD_INT 42000
3956: PUSH
3957: LD_INT 31500
3959: PUSH
3960: LD_INT 25200
3962: PUSH
3963: LD_INT 24150
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: PUSH
3972: LD_OWVAR 67
3976: ARRAY
3977: LESSEQUAL
3978: IFFALSE 4000
// begin m2 := true ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
3988: LD_STRING Speed
3990: PPUSH
3991: LD_INT 1
3993: PPUSH
3994: CALL_OW 101
// end else
3998: GO 4011
// AddMedal ( Speed , - 1 ) ;
4000: LD_STRING Speed
4002: PPUSH
4003: LD_INT 1
4005: NEG
4006: PPUSH
4007: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4011: LD_OWVAR 67
4015: PUSH
4016: LD_INT 3
4018: GREATEREQUAL
4019: PUSH
4020: LD_VAR 0 1
4024: AND
4025: PUSH
4026: LD_VAR 0 2
4030: AND
4031: IFFALSE 4043
// SetAchievementEX ( ACH_AMER , 18 ) ;
4033: LD_STRING ACH_AMER
4035: PPUSH
4036: LD_INT 18
4038: PPUSH
4039: CALL_OW 564
// GiveMedals ( Main ) ;
4043: LD_STRING Main
4045: PPUSH
4046: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4050: LD_EXP 14
4054: PUSH
4055: LD_EXP 15
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PPUSH
4064: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4068: LD_EXP 14
4072: PPUSH
4073: LD_STRING 14a_JMM
4075: PPUSH
4076: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4080: LD_EXP 15
4084: PPUSH
4085: LD_STRING 14a_Burlak
4087: PPUSH
4088: CALL_OW 38
// YouWin ;
4092: CALL_OW 103
// end ; end_of_file
4096: PPOPN 2
4098: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4099: LD_INT 0
4101: PPUSH
4102: PPUSH
4103: PPUSH
4104: PPUSH
// uc_side := 1 ;
4105: LD_ADDR_OWVAR 20
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// uc_nation := 1 ;
4113: LD_ADDR_OWVAR 21
4117: PUSH
4118: LD_INT 1
4120: ST_TO_ADDR
// InitHc ;
4121: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 500 ) ;
4125: LD_INT 34
4127: PPUSH
4128: CALL_OW 274
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 500
4138: PPUSH
4139: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4143: LD_INT 34
4145: PPUSH
4146: CALL_OW 274
4150: PPUSH
4151: LD_INT 3
4153: PPUSH
4154: LD_INT 20
4156: PPUSH
4157: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4161: LD_ADDR_EXP 18
4165: PUSH
4166: LD_STRING Stevens
4168: PPUSH
4169: CALL_OW 25
4173: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4174: LD_ADDR_EXP 19
4178: PUSH
4179: LD_STRING Powell
4181: PPUSH
4182: CALL_OW 25
4186: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4187: LD_EXP 18
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: CALL_OW 52
// vehGuard := [ ] ;
4199: LD_ADDR_EXP 23
4203: PUSH
4204: EMPTY
4205: ST_TO_ADDR
// hc_importance := 0 ;
4206: LD_ADDR_OWVAR 32
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4214: LD_INT 4
4216: PPUSH
4217: LD_INT 3
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 8
4225: PPUSH
4226: LD_INT 100
4228: PPUSH
4229: CALL 32191 0 5
// sibBomb := CreateVehicle ;
4233: LD_ADDR_EXP 21
4237: PUSH
4238: CALL_OW 45
4242: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4243: LD_EXP 21
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4255: LD_EXP 21
4259: PPUSH
4260: LD_INT 93
4262: PPUSH
4263: LD_INT 74
4265: PPUSH
4266: LD_INT 0
4268: PPUSH
4269: CALL_OW 48
// guards := [ ] ;
4273: LD_ADDR_EXP 22
4277: PUSH
4278: EMPTY
4279: ST_TO_ADDR
// for i = 1 to 3 do
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: DOUBLE
4286: LD_INT 1
4288: DEC
4289: ST_TO_ADDR
4290: LD_INT 3
4292: PUSH
4293: FOR_TO
4294: IFFALSE 4390
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4296: LD_INT 0
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 8
4304: PUSH
4305: LD_INT 9
4307: PUSH
4308: LD_INT 10
4310: PUSH
4311: LD_INT 10
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: PUSH
4320: LD_OWVAR 67
4324: ARRAY
4325: PPUSH
4326: CALL_OW 380
// un := CreateHuman ;
4330: LD_ADDR_VAR 0 3
4334: PUSH
4335: CALL_OW 44
4339: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4340: LD_VAR 0 3
4344: PPUSH
4345: LD_INT 2
4347: PUSH
4348: LD_INT 3
4350: PUSH
4351: LD_INT 4
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: PUSH
4359: LD_VAR 0 2
4363: ARRAY
4364: PPUSH
4365: LD_INT 0
4367: PPUSH
4368: CALL_OW 49
// guards := guards ^ un ;
4372: LD_ADDR_EXP 22
4376: PUSH
4377: LD_EXP 22
4381: PUSH
4382: LD_VAR 0 3
4386: ADD
4387: ST_TO_ADDR
// end ;
4388: GO 4293
4390: POP
4391: POP
// baseGuards := [ ] ;
4392: LD_ADDR_EXP 20
4396: PUSH
4397: EMPTY
4398: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4399: LD_ADDR_VAR 0 2
4403: PUSH
4404: DOUBLE
4405: LD_INT 1
4407: DEC
4408: ST_TO_ADDR
4409: LD_INT 5
4411: PUSH
4412: LD_INT 6
4414: PUSH
4415: LD_INT 7
4417: PUSH
4418: LD_INT 8
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4584
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 8
4441: PUSH
4442: LD_INT 9
4444: PUSH
4445: LD_INT 10
4447: PUSH
4448: LD_INT 10
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PPUSH
4463: CALL_OW 381
// un := CreateHuman ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: CALL_OW 44
4476: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4477: LD_ADDR_EXP 20
4481: PUSH
4482: LD_EXP 20
4486: PUSH
4487: LD_VAR 0 3
4491: ADD
4492: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4493: LD_ADDR_VAR 0 4
4497: PUSH
4498: LD_INT 22
4500: PUSH
4501: LD_INT 1
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: PUSH
4508: LD_INT 58
4510: PUSH
4511: EMPTY
4512: LIST
4513: PUSH
4514: LD_INT 30
4516: PUSH
4517: LD_INT 32
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 69
4533: ST_TO_ADDR
// if tmp then
4534: LD_VAR 0 4
4538: IFFALSE 4570
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4540: LD_VAR 0 3
4544: PPUSH
4545: LD_VAR 0 4
4549: PUSH
4550: LD_INT 1
4552: PPUSH
4553: LD_VAR 0 4
4557: PPUSH
4558: CALL_OW 12
4562: ARRAY
4563: PPUSH
4564: CALL_OW 52
4568: GO 4582
// PlaceHumanInUnit ( un , us_bar ) ;
4570: LD_VAR 0 3
4574: PPUSH
4575: LD_INT 51
4577: PPUSH
4578: CALL_OW 52
// end ;
4582: GO 4433
4584: POP
4585: POP
// if Difficulty > 1 then
4586: LD_OWVAR 67
4590: PUSH
4591: LD_INT 1
4593: GREATER
4594: IFFALSE 4642
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4596: LD_INT 0
4598: PPUSH
4599: LD_INT 5
4601: PPUSH
4602: LD_INT 9
4604: PUSH
4605: LD_INT 10
4607: PUSH
4608: LD_INT 10
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: PUSH
4616: LD_OWVAR 67
4620: PUSH
4621: LD_INT 1
4623: MINUS
4624: ARRAY
4625: PPUSH
4626: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4630: CALL_OW 44
4634: PPUSH
4635: LD_INT 80
4637: PPUSH
4638: CALL_OW 52
// end ; for i = 1 to 3 do
4642: LD_ADDR_VAR 0 2
4646: PUSH
4647: DOUBLE
4648: LD_INT 1
4650: DEC
4651: ST_TO_ADDR
4652: LD_INT 3
4654: PUSH
4655: FOR_TO
4656: IFFALSE 4682
// begin PrepareMechanic ( false , 9 ) ;
4658: LD_INT 0
4660: PPUSH
4661: LD_INT 9
4663: PPUSH
4664: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4668: CALL_OW 44
4672: PPUSH
4673: LD_INT 43
4675: PPUSH
4676: CALL_OW 52
// end ;
4680: GO 4655
4682: POP
4683: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4684: CALL_OW 44
4688: PPUSH
4689: LD_INT 49
4691: PPUSH
4692: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: DOUBLE
4702: LD_INT 1
4704: DEC
4705: ST_TO_ADDR
4706: LD_INT 1
4708: PUSH
4709: LD_OWVAR 67
4713: PLUS
4714: PUSH
4715: FOR_TO
4716: IFFALSE 4763
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4718: LD_INT 0
4720: PPUSH
4721: LD_INT 8
4723: PUSH
4724: LD_INT 9
4726: PUSH
4727: LD_INT 10
4729: PUSH
4730: LD_INT 10
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: PUSH
4739: LD_OWVAR 67
4743: ARRAY
4744: PPUSH
4745: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4749: CALL_OW 44
4753: PPUSH
4754: LD_INT 5
4756: PPUSH
4757: CALL_OW 52
// end ;
4761: GO 4715
4763: POP
4764: POP
// for i = 1 to 3 do
4765: LD_ADDR_VAR 0 2
4769: PUSH
4770: DOUBLE
4771: LD_INT 1
4773: DEC
4774: ST_TO_ADDR
4775: LD_INT 3
4777: PUSH
4778: FOR_TO
4779: IFFALSE 4805
// begin PrepareScientist ( false , 10 ) ;
4781: LD_INT 0
4783: PPUSH
4784: LD_INT 10
4786: PPUSH
4787: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4791: CALL_OW 44
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: CALL_OW 52
// end ;
4803: GO 4778
4805: POP
4806: POP
// end ;
4807: LD_VAR 0 1
4811: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4812: LD_EXP 22
4816: PUSH
4817: LD_EXP 2
4821: NOT
4822: AND
4823: IFFALSE 5009
4825: GO 4827
4827: DISABLE
4828: LD_INT 0
4830: PPUSH
4831: PPUSH
4832: PPUSH
// begin enable ;
4833: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4834: LD_ADDR_VAR 0 3
4838: PUSH
4839: LD_INT 204
4841: PUSH
4842: LD_INT 30
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 165
4851: PUSH
4852: LD_INT 24
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 195
4861: PUSH
4862: LD_INT 6
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 223
4871: PUSH
4872: LD_INT 54
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: LD_INT 214
4881: PUSH
4882: LD_INT 84
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 206
4891: PUSH
4892: LD_INT 71
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: ST_TO_ADDR
// for i in guards do
4907: LD_ADDR_VAR 0 1
4911: PUSH
4912: LD_EXP 22
4916: PUSH
4917: FOR_IN
4918: IFFALSE 5007
// begin if HasTask ( i ) then
4920: LD_VAR 0 1
4924: PPUSH
4925: CALL_OW 314
4929: IFFALSE 4935
// continue else
4931: GO 4917
4933: GO 5005
// begin j := rand ( 1 , 6 ) ;
4935: LD_ADDR_VAR 0 2
4939: PUSH
4940: LD_INT 1
4942: PPUSH
4943: LD_INT 6
4945: PPUSH
4946: CALL_OW 12
4950: ST_TO_ADDR
// if not See ( 7 , i ) then
4951: LD_INT 7
4953: PPUSH
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 292
4963: NOT
4964: IFFALSE 5005
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
4966: LD_VAR 0 1
4970: PPUSH
4971: LD_VAR 0 3
4975: PUSH
4976: LD_VAR 0 2
4980: ARRAY
4981: PUSH
4982: LD_INT 1
4984: ARRAY
4985: PPUSH
4986: LD_VAR 0 3
4990: PUSH
4991: LD_VAR 0 2
4995: ARRAY
4996: PUSH
4997: LD_INT 2
4999: ARRAY
5000: PPUSH
5001: CALL_OW 114
// end ; end ;
5005: GO 4917
5007: POP
5008: POP
// end ;
5009: PPOPN 3
5011: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5012: LD_EXP 23
5016: PUSH
5017: LD_EXP 7
5021: NOT
5022: AND
5023: IFFALSE 5094
5025: GO 5027
5027: DISABLE
5028: LD_INT 0
5030: PPUSH
// begin enable ;
5031: ENABLE
// for i in vehGuard do
5032: LD_ADDR_VAR 0 1
5036: PUSH
5037: LD_EXP 23
5041: PUSH
5042: FOR_IN
5043: IFFALSE 5092
// if IsOk ( vehGuard ) then
5045: LD_EXP 23
5049: PPUSH
5050: CALL_OW 302
5054: IFFALSE 5090
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5056: LD_VAR 0 1
5060: PPUSH
5061: LD_INT 22
5063: PUSH
5064: LD_INT 7
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PPUSH
5071: CALL_OW 69
5075: PPUSH
5076: LD_VAR 0 1
5080: PPUSH
5081: CALL_OW 74
5085: PPUSH
5086: CALL_OW 115
5090: GO 5042
5092: POP
5093: POP
// end ;
5094: PPOPN 1
5096: END
// every 9 9$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured do
5097: LD_EXP 4
5101: PUSH
5102: LD_INT 43
5104: PPUSH
5105: CALL_OW 302
5109: AND
5110: PUSH
5111: LD_EXP 7
5115: NOT
5116: AND
5117: IFFALSE 5165
5119: GO 5121
5121: DISABLE
// begin enable ;
5122: ENABLE
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5123: LD_INT 43
5125: PPUSH
5126: LD_INT 5
5128: PPUSH
5129: LD_INT 3
5131: PPUSH
5132: LD_INT 2
5134: PPUSH
5135: LD_INT 7
5137: PUSH
5138: LD_INT 7
5140: PUSH
5141: LD_INT 9
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 1
5151: PPUSH
5152: LD_INT 3
5154: PPUSH
5155: CALL_OW 12
5159: ARRAY
5160: PPUSH
5161: CALL_OW 125
// end ;
5165: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5166: LD_INT 22
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 25
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 50
5188: PUSH
5189: EMPTY
5190: LIST
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: LIST
5196: PPUSH
5197: CALL_OW 69
5201: PUSH
5202: LD_EXP 7
5206: NOT
5207: AND
5208: IFFALSE 5437
5210: GO 5212
5212: DISABLE
5213: LD_INT 0
5215: PPUSH
5216: PPUSH
// begin enable ;
5217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5218: LD_ADDR_VAR 0 1
5222: PUSH
5223: LD_INT 22
5225: PUSH
5226: LD_INT 1
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 25
5235: PUSH
5236: LD_INT 5
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PUSH
5243: LD_INT 50
5245: PUSH
5246: EMPTY
5247: LIST
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 69
5258: ST_TO_ADDR
// if not tmp then
5259: LD_VAR 0 1
5263: NOT
5264: IFFALSE 5268
// exit ;
5266: GO 5437
// b := IsInUnit ( tmp [ 1 ] ) ;
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_VAR 0 1
5277: PUSH
5278: LD_INT 1
5280: ARRAY
5281: PPUSH
5282: CALL_OW 310
5286: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5287: LD_VAR 0 2
5291: NOT
5292: PUSH
5293: LD_VAR 0 1
5297: PUSH
5298: LD_INT 1
5300: ARRAY
5301: PPUSH
5302: CALL_OW 314
5306: OR
5307: IFFALSE 5311
// exit ;
5309: GO 5437
// if b = us_bun1 then
5311: LD_VAR 0 2
5315: PUSH
5316: LD_INT 80
5318: EQUAL
5319: IFFALSE 5380
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5321: LD_VAR 0 1
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5334: LD_VAR 0 1
5338: PUSH
5339: LD_INT 1
5341: ARRAY
5342: PPUSH
5343: LD_INT 27
5345: PPUSH
5346: LD_INT 44
5348: PPUSH
5349: CALL_OW 174
// if IsOk ( us_bun2 ) then
5353: LD_INT 55
5355: PPUSH
5356: CALL_OW 302
5360: IFFALSE 5378
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5362: LD_VAR 0 1
5366: PUSH
5367: LD_INT 1
5369: ARRAY
5370: PPUSH
5371: LD_INT 55
5373: PPUSH
5374: CALL_OW 180
// end else
5378: GO 5437
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5380: LD_VAR 0 1
5384: PUSH
5385: LD_INT 1
5387: ARRAY
5388: PPUSH
5389: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: LD_INT 92
5404: PPUSH
5405: LD_INT 51
5407: PPUSH
5408: CALL_OW 174
// if IsOk ( us_bun1 ) then
5412: LD_INT 80
5414: PPUSH
5415: CALL_OW 302
5419: IFFALSE 5437
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5421: LD_VAR 0 1
5425: PUSH
5426: LD_INT 1
5428: ARRAY
5429: PPUSH
5430: LD_INT 80
5432: PPUSH
5433: CALL_OW 180
// end ; end ;
5437: PPOPN 2
5439: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5440: LD_EXP 7
5444: NOT
5445: PUSH
5446: LD_INT 9
5448: PPUSH
5449: LD_INT 22
5451: PUSH
5452: LD_INT 1
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PUSH
5459: LD_INT 21
5461: PUSH
5462: LD_INT 3
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PUSH
5469: LD_INT 3
5471: PUSH
5472: LD_INT 24
5474: PUSH
5475: LD_INT 1000
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: PPUSH
5491: CALL_OW 70
5495: AND
5496: IFFALSE 5907
5498: GO 5500
5500: DISABLE
5501: LD_INT 0
5503: PPUSH
5504: PPUSH
5505: PPUSH
5506: PPUSH
// begin enable ;
5507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: LD_INT 22
5515: PUSH
5516: LD_INT 1
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 25
5525: PUSH
5526: LD_INT 2
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: LD_INT 24
5535: PUSH
5536: LD_INT 1000
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: LIST
5547: PPUSH
5548: CALL_OW 69
5552: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5553: LD_ADDR_VAR 0 3
5557: PUSH
5558: LD_INT 22
5560: PUSH
5561: LD_INT 1
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 25
5570: PUSH
5571: LD_INT 2
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 3
5580: PUSH
5581: LD_INT 24
5583: PUSH
5584: LD_INT 750
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: PPUSH
5600: CALL_OW 69
5604: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5605: LD_ADDR_VAR 0 4
5609: PUSH
5610: LD_INT 9
5612: PPUSH
5613: LD_INT 22
5615: PUSH
5616: LD_INT 1
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 21
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 3
5635: PUSH
5636: LD_INT 24
5638: PUSH
5639: LD_INT 1000
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: LIST
5654: PPUSH
5655: CALL_OW 70
5659: PUSH
5660: LD_INT 1
5662: DIFF
5663: ST_TO_ADDR
// if not tmp and not tmp2 then
5664: LD_VAR 0 2
5668: NOT
5669: PUSH
5670: LD_VAR 0 3
5674: NOT
5675: AND
5676: IFFALSE 5680
// exit ;
5678: GO 5907
// if tmp and b then
5680: LD_VAR 0 2
5684: PUSH
5685: LD_VAR 0 4
5689: AND
5690: IFFALSE 5820
// for i in tmp do
5692: LD_ADDR_VAR 0 1
5696: PUSH
5697: LD_VAR 0 2
5701: PUSH
5702: FOR_IN
5703: IFFALSE 5818
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: PUSH
5715: LD_INT 1
5717: EQUAL
5718: PUSH
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 256
5728: PUSH
5729: LD_INT 1000
5731: LESS
5732: AND
5733: IFFALSE 5739
// continue else
5735: GO 5702
5737: GO 5766
// if GetTag ( i ) = 1 then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 110
5748: PUSH
5749: LD_INT 1
5751: EQUAL
5752: IFFALSE 5766
// SetTag ( i , 0 ) ;
5754: LD_VAR 0 1
5758: PPUSH
5759: LD_INT 0
5761: PPUSH
5762: CALL_OW 109
// if IsInUnit ( i ) then
5766: LD_VAR 0 1
5770: PPUSH
5771: CALL_OW 310
5775: IFFALSE 5786
// ComExitBuilding ( i ) ;
5777: LD_VAR 0 1
5781: PPUSH
5782: CALL_OW 122
// if not HasTask ( i ) then
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 314
5795: NOT
5796: IFFALSE 5816
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_VAR 0 4
5807: PUSH
5808: LD_INT 1
5810: ARRAY
5811: PPUSH
5812: CALL_OW 190
// end ;
5816: GO 5702
5818: POP
5819: POP
// if tmp2 then
5820: LD_VAR 0 3
5824: IFFALSE 5907
// for i in tmp2 do
5826: LD_ADDR_VAR 0 1
5830: PUSH
5831: LD_VAR 0 3
5835: PUSH
5836: FOR_IN
5837: IFFALSE 5905
// begin if not GetTag ( i ) = 1 then
5839: LD_VAR 0 1
5843: PPUSH
5844: CALL_OW 110
5848: PUSH
5849: LD_INT 1
5851: EQUAL
5852: NOT
5853: IFFALSE 5867
// SetTag ( i , 1 ) ;
5855: LD_VAR 0 1
5859: PPUSH
5860: LD_INT 1
5862: PPUSH
5863: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5867: LD_VAR 0 1
5871: PPUSH
5872: LD_INT 88
5874: PPUSH
5875: LD_INT 75
5877: PPUSH
5878: CALL_OW 297
5882: PUSH
5883: LD_INT 6
5885: GREATER
5886: IFFALSE 5903
// ComMoveXY ( i , 88 , 75 ) ;
5888: LD_VAR 0 1
5892: PPUSH
5893: LD_INT 88
5895: PPUSH
5896: LD_INT 75
5898: PPUSH
5899: CALL_OW 111
// end ;
5903: GO 5836
5905: POP
5906: POP
// end ;
5907: PPOPN 4
5909: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5910: LD_EXP 7
5914: NOT
5915: PUSH
5916: LD_EXP 9
5920: AND
5921: PUSH
5922: LD_INT 9
5924: PPUSH
5925: LD_INT 22
5927: PUSH
5928: LD_INT 1
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 21
5937: PUSH
5938: LD_INT 1
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 3
5947: PUSH
5948: LD_INT 24
5950: PUSH
5951: LD_INT 1000
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: PPUSH
5967: CALL_OW 70
5971: AND
5972: IFFALSE 6145
5974: GO 5976
5976: DISABLE
5977: LD_INT 0
5979: PPUSH
5980: PPUSH
5981: PPUSH
// begin enable ;
5982: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
5983: LD_ADDR_VAR 0 2
5987: PUSH
5988: LD_INT 22
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 25
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 69
6016: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6017: LD_ADDR_VAR 0 3
6021: PUSH
6022: LD_INT 9
6024: PPUSH
6025: LD_INT 22
6027: PUSH
6028: LD_INT 1
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 21
6037: PUSH
6038: LD_INT 1
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 3
6047: PUSH
6048: LD_INT 24
6050: PUSH
6051: LD_INT 1000
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: PPUSH
6067: CALL_OW 70
6071: ST_TO_ADDR
// if not sci or not tmp then
6072: LD_VAR 0 2
6076: NOT
6077: PUSH
6078: LD_VAR 0 3
6082: NOT
6083: OR
6084: IFFALSE 6088
// exit ;
6086: GO 6145
// for i in sci do
6088: LD_ADDR_VAR 0 1
6092: PUSH
6093: LD_VAR 0 2
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6143
// if IsInUnit ( i ) then
6101: LD_VAR 0 1
6105: PPUSH
6106: CALL_OW 310
6110: IFFALSE 6123
// ComExitBuilding ( i ) else
6112: LD_VAR 0 1
6116: PPUSH
6117: CALL_OW 122
6121: GO 6141
// ComHeal ( i , tmp [ 1 ] ) ;
6123: LD_VAR 0 1
6127: PPUSH
6128: LD_VAR 0 3
6132: PUSH
6133: LD_INT 1
6135: ARRAY
6136: PPUSH
6137: CALL_OW 128
6141: GO 6098
6143: POP
6144: POP
// end ;
6145: PPOPN 3
6147: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6148: LD_EXP 7
6152: NOT
6153: PUSH
6154: LD_EXP 9
6158: AND
6159: PUSH
6160: LD_INT 1
6162: PPUSH
6163: CALL_OW 302
6167: AND
6168: PUSH
6169: LD_INT 9
6171: PPUSH
6172: LD_INT 22
6174: PUSH
6175: LD_INT 1
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 21
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: LD_INT 3
6194: PUSH
6195: LD_INT 24
6197: PUSH
6198: LD_INT 1000
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 70
6218: NOT
6219: AND
6220: PUSH
6221: LD_INT 22
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 25
6233: PUSH
6234: LD_INT 4
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 56
6243: PUSH
6244: EMPTY
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 69
6256: AND
6257: IFFALSE 6350
6259: GO 6261
6261: DISABLE
6262: LD_INT 0
6264: PPUSH
// begin enable ;
6265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6266: LD_ADDR_VAR 0 1
6270: PUSH
6271: LD_INT 22
6273: PUSH
6274: LD_INT 1
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 25
6283: PUSH
6284: LD_INT 4
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 56
6293: PUSH
6294: EMPTY
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: PPUSH
6302: CALL_OW 69
6306: PUSH
6307: FOR_IN
6308: IFFALSE 6348
// if not GetTag ( i ) and not HasTask ( i ) then
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL_OW 110
6319: NOT
6320: PUSH
6321: LD_VAR 0 1
6325: PPUSH
6326: CALL_OW 314
6330: NOT
6331: AND
6332: IFFALSE 6346
// ComEnterUnit ( i , us_lab ) ;
6334: LD_VAR 0 1
6338: PPUSH
6339: LD_INT 1
6341: PPUSH
6342: CALL_OW 120
6346: GO 6307
6348: POP
6349: POP
// end ;
6350: PPOPN 1
6352: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6353: LD_EXP 7
6357: NOT
6358: PUSH
6359: LD_INT 9
6361: PPUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 1
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 3
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: LD_INT 24
6387: PUSH
6388: LD_INT 1000
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 70
6408: NOT
6409: AND
6410: PUSH
6411: LD_INT 22
6413: PUSH
6414: LD_INT 1
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 25
6423: PUSH
6424: LD_INT 2
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 56
6433: PUSH
6434: EMPTY
6435: LIST
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: PPUSH
6442: CALL_OW 69
6446: AND
6447: IFFALSE 6540
6449: GO 6451
6451: DISABLE
6452: LD_INT 0
6454: PPUSH
// begin enable ;
6455: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6456: LD_ADDR_VAR 0 1
6460: PUSH
6461: LD_INT 22
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 56
6483: PUSH
6484: EMPTY
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 69
6496: PUSH
6497: FOR_IN
6498: IFFALSE 6538
// if not HasTask ( i ) and not GetTag ( i ) then
6500: LD_VAR 0 1
6504: PPUSH
6505: CALL_OW 314
6509: NOT
6510: PUSH
6511: LD_VAR 0 1
6515: PPUSH
6516: CALL_OW 110
6520: NOT
6521: AND
6522: IFFALSE 6536
// ComEnterUnit ( i , us_depot ) ;
6524: LD_VAR 0 1
6528: PPUSH
6529: LD_INT 5
6531: PPUSH
6532: CALL_OW 120
6536: GO 6497
6538: POP
6539: POP
// end ;
6540: PPOPN 1
6542: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6543: LD_EXP 9
6547: PUSH
6548: LD_INT 0
6550: LESSEQUAL
6551: PUSH
6552: LD_EXP 18
6556: PPUSH
6557: CALL_OW 301
6561: OR
6562: PUSH
6563: LD_INT 22
6565: PUSH
6566: LD_INT 1
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 25
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PPUSH
6587: CALL_OW 69
6591: AND
6592: IFFALSE 6633
6594: GO 6596
6596: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6597: LD_INT 22
6599: PUSH
6600: LD_INT 1
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 25
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PPUSH
6626: LD_INT 1
6628: PPUSH
6629: CALL_OW 167
6633: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6634: LD_EXP 7
6638: NOT
6639: PUSH
6640: LD_INT 7
6642: PPUSH
6643: LD_INT 22
6645: PUSH
6646: LD_INT 7
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 70
6657: AND
6658: IFFALSE 6749
6660: GO 6662
6662: DISABLE
6663: LD_INT 0
6665: PPUSH
// begin wait ( 0 0$2 ) ;
6666: LD_INT 70
6668: PPUSH
6669: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6673: LD_ADDR_VAR 0 1
6677: PUSH
6678: LD_INT 22
6680: PUSH
6681: LD_INT 1
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: LD_INT 25
6690: PUSH
6691: LD_INT 1
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PPUSH
6702: CALL_OW 69
6706: PUSH
6707: FOR_IN
6708: IFFALSE 6747
// begin if IsInUnit ( i ) then
6710: LD_VAR 0 1
6714: PPUSH
6715: CALL_OW 310
6719: IFFALSE 6730
// ComExitBuilding ( i ) ;
6721: LD_VAR 0 1
6725: PPUSH
6726: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6730: LD_VAR 0 1
6734: PPUSH
6735: LD_INT 92
6737: PPUSH
6738: LD_INT 78
6740: PPUSH
6741: CALL_OW 174
// end ;
6745: GO 6707
6747: POP
6748: POP
// end ; end_of_file
6749: PPOPN 1
6751: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6752: LD_VAR 0 1
6756: PPUSH
6757: LD_VAR 0 2
6761: PPUSH
6762: LD_VAR 0 3
6766: PPUSH
6767: CALL 1579 0 3
6771: PPOPN 3
6773: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6774: LD_EXP 14
6778: PPUSH
6779: CALL_OW 257
6783: PUSH
6784: LD_INT 4
6786: EQUAL
6787: PUSH
6788: LD_EXP 15
6792: PPUSH
6793: CALL_OW 257
6797: PUSH
6798: LD_INT 4
6800: EQUAL
6801: OR
6802: PUSH
6803: LD_INT 22
6805: PUSH
6806: LD_INT 7
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 21
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 69
6831: OR
6832: IFFALSE 6836
// exit ;
6834: GO 6874
// if un = JMM then
6836: LD_VAR 0 1
6840: PUSH
6841: LD_EXP 14
6845: EQUAL
6846: IFFALSE 6855
// YouLost ( JMM ) ;
6848: LD_STRING JMM
6850: PPUSH
6851: CALL_OW 104
// if un = Burlak then
6855: LD_VAR 0 1
6859: PUSH
6860: LD_EXP 15
6864: EQUAL
6865: IFFALSE 6874
// YouLost ( Burlak ) ;
6867: LD_STRING Burlak
6869: PPUSH
6870: CALL_OW 104
// end ;
6874: PPOPN 1
6876: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6877: LD_VAR 0 1
6881: PPUSH
6882: CALL 22887 0 1
// if un = JMM then
6886: LD_VAR 0 1
6890: PUSH
6891: LD_EXP 14
6895: EQUAL
6896: IFFALSE 6905
// YouLost ( JMM ) ;
6898: LD_STRING JMM
6900: PPUSH
6901: CALL_OW 104
// if un = Burlak then
6905: LD_VAR 0 1
6909: PUSH
6910: LD_EXP 15
6914: EQUAL
6915: IFFALSE 6924
// YouLost ( Burlak ) ;
6917: LD_STRING Burlak
6919: PPUSH
6920: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
6924: LD_VAR 0 1
6928: PUSH
6929: LD_INT 21
6931: PUSH
6932: LD_INT 1
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 23
6941: PUSH
6942: LD_INT 1
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: IN
6958: IFFALSE 6974
// killCounter := killCounter + 1 ;
6960: LD_ADDR_EXP 12
6964: PUSH
6965: LD_EXP 12
6969: PUSH
6970: LD_INT 1
6972: PLUS
6973: ST_TO_ADDR
// end ;
6974: PPOPN 1
6976: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6977: LD_VAR 0 2
6981: PUSH
6982: LD_INT 7
6984: EQUAL
6985: PUSH
6986: LD_VAR 0 1
6990: PUSH
6991: LD_INT 2
6993: PUSH
6994: LD_INT 30
6996: PUSH
6997: LD_INT 31
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 30
7006: PUSH
7007: LD_INT 32
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 30
7016: PUSH
7017: LD_INT 33
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: PPUSH
7030: CALL_OW 69
7034: IN
7035: AND
7036: IFFALSE 7052
// bunkerCounter := bunkerCounter + 1 ;
7038: LD_ADDR_EXP 13
7042: PUSH
7043: LD_EXP 13
7047: PUSH
7048: LD_INT 1
7050: PLUS
7051: ST_TO_ADDR
// end ;
7052: PPOPN 3
7054: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7055: LD_VAR 0 1
7059: PPUSH
7060: CALL_OW 255
7064: PUSH
7065: LD_INT 7
7067: EQUAL
7068: IFFALSE 7078
// artifactPickedUp := true ;
7070: LD_ADDR_EXP 6
7074: PUSH
7075: LD_INT 1
7077: ST_TO_ADDR
// end ;
7078: PPOPN 2
7080: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7081: LD_ADDR_EXP 6
7085: PUSH
7086: LD_INT 0
7088: ST_TO_ADDR
7089: PPOPN 2
7091: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7092: LD_VAR 0 1
7096: PPUSH
7097: LD_VAR 0 2
7101: PPUSH
7102: CALL 23007 0 2
// if GetSide ( vehicle ) <> 1 then
7106: LD_VAR 0 1
7110: PPUSH
7111: CALL_OW 255
7115: PUSH
7116: LD_INT 1
7118: NONEQUAL
7119: IFFALSE 7123
// exit ;
7121: GO 7170
// wait ( 0 0$5 ) ;
7123: LD_INT 175
7125: PPUSH
7126: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7130: LD_VAR 0 1
7134: PPUSH
7135: CALL_OW 263
7139: PUSH
7140: LD_INT 2
7142: EQUAL
7143: IFFALSE 7154
// Connect ( vehicle ) ;
7145: LD_VAR 0 1
7149: PPUSH
7150: CALL 35282 0 1
// vehGuard := vehGuard ^ vehicle ;
7154: LD_ADDR_EXP 23
7158: PUSH
7159: LD_EXP 23
7163: PUSH
7164: LD_VAR 0 1
7168: ADD
7169: ST_TO_ADDR
// end ;
7170: PPOPN 2
7172: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7173: LD_VAR 0 1
7177: PUSH
7178: LD_INT 1
7180: EQUAL
7181: PUSH
7182: LD_EXP 7
7186: NOT
7187: AND
7188: IFFALSE 7223
// begin planCaptured := true ;
7190: LD_ADDR_EXP 7
7194: PUSH
7195: LD_INT 1
7197: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7198: LD_STRING MEnd
7200: PPUSH
7201: CALL_OW 337
// canEnd := true ;
7205: LD_ADDR_EXP 10
7209: PUSH
7210: LD_INT 1
7212: ST_TO_ADDR
// missionTime := tick ;
7213: LD_ADDR_EXP 11
7217: PUSH
7218: LD_OWVAR 1
7222: ST_TO_ADDR
// end ; end ;
7223: PPOPN 3
7225: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7226: LD_VAR 0 1
7230: PPUSH
7231: CALL 22991 0 1
// end ; end_of_file end_of_file
7235: PPOPN 1
7237: END
// every 0 0$1 do
7238: GO 7240
7240: DISABLE
// begin enable ;
7241: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7242: LD_STRING updateTimer(
7244: PUSH
7245: LD_OWVAR 1
7249: STR
7250: PUSH
7251: LD_STRING );
7253: STR
7254: PPUSH
7255: CALL_OW 559
// end ;
7259: END
// export function SOS_MapStart ( ) ; begin
7260: LD_INT 0
7262: PPUSH
// if streamModeActive then
7263: LD_EXP 24
7267: IFFALSE 7276
// DefineStreamItems ( true ) ;
7269: LD_INT 1
7271: PPUSH
7272: CALL 8930 0 1
// UpdateFactoryWaypoints ( ) ;
7276: CALL 21791 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7280: CALL 22048 0 0
// end ;
7284: LD_VAR 0 1
7288: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7289: LD_INT 0
7291: PPUSH
// if p2 = 100 then
7292: LD_VAR 0 2
7296: PUSH
7297: LD_INT 100
7299: EQUAL
7300: IFFALSE 8303
// begin if not StreamModeActive then
7302: LD_EXP 24
7306: NOT
7307: IFFALSE 7317
// StreamModeActive := true ;
7309: LD_ADDR_EXP 24
7313: PUSH
7314: LD_INT 1
7316: ST_TO_ADDR
// if p3 = 0 then
7317: LD_VAR 0 3
7321: PUSH
7322: LD_INT 0
7324: EQUAL
7325: IFFALSE 7331
// InitStreamMode ;
7327: CALL 8466 0 0
// if p3 = 1 then
7331: LD_VAR 0 3
7335: PUSH
7336: LD_INT 1
7338: EQUAL
7339: IFFALSE 7349
// sRocket := true ;
7341: LD_ADDR_EXP 29
7345: PUSH
7346: LD_INT 1
7348: ST_TO_ADDR
// if p3 = 2 then
7349: LD_VAR 0 3
7353: PUSH
7354: LD_INT 2
7356: EQUAL
7357: IFFALSE 7367
// sSpeed := true ;
7359: LD_ADDR_EXP 28
7363: PUSH
7364: LD_INT 1
7366: ST_TO_ADDR
// if p3 = 3 then
7367: LD_VAR 0 3
7371: PUSH
7372: LD_INT 3
7374: EQUAL
7375: IFFALSE 7385
// sEngine := true ;
7377: LD_ADDR_EXP 30
7381: PUSH
7382: LD_INT 1
7384: ST_TO_ADDR
// if p3 = 4 then
7385: LD_VAR 0 3
7389: PUSH
7390: LD_INT 4
7392: EQUAL
7393: IFFALSE 7403
// sSpec := true ;
7395: LD_ADDR_EXP 27
7399: PUSH
7400: LD_INT 1
7402: ST_TO_ADDR
// if p3 = 5 then
7403: LD_VAR 0 3
7407: PUSH
7408: LD_INT 5
7410: EQUAL
7411: IFFALSE 7421
// sLevel := true ;
7413: LD_ADDR_EXP 31
7417: PUSH
7418: LD_INT 1
7420: ST_TO_ADDR
// if p3 = 6 then
7421: LD_VAR 0 3
7425: PUSH
7426: LD_INT 6
7428: EQUAL
7429: IFFALSE 7439
// sArmoury := true ;
7431: LD_ADDR_EXP 32
7435: PUSH
7436: LD_INT 1
7438: ST_TO_ADDR
// if p3 = 7 then
7439: LD_VAR 0 3
7443: PUSH
7444: LD_INT 7
7446: EQUAL
7447: IFFALSE 7457
// sRadar := true ;
7449: LD_ADDR_EXP 33
7453: PUSH
7454: LD_INT 1
7456: ST_TO_ADDR
// if p3 = 8 then
7457: LD_VAR 0 3
7461: PUSH
7462: LD_INT 8
7464: EQUAL
7465: IFFALSE 7475
// sBunker := true ;
7467: LD_ADDR_EXP 34
7471: PUSH
7472: LD_INT 1
7474: ST_TO_ADDR
// if p3 = 9 then
7475: LD_VAR 0 3
7479: PUSH
7480: LD_INT 9
7482: EQUAL
7483: IFFALSE 7493
// sHack := true ;
7485: LD_ADDR_EXP 35
7489: PUSH
7490: LD_INT 1
7492: ST_TO_ADDR
// if p3 = 10 then
7493: LD_VAR 0 3
7497: PUSH
7498: LD_INT 10
7500: EQUAL
7501: IFFALSE 7511
// sFire := true ;
7503: LD_ADDR_EXP 36
7507: PUSH
7508: LD_INT 1
7510: ST_TO_ADDR
// if p3 = 11 then
7511: LD_VAR 0 3
7515: PUSH
7516: LD_INT 11
7518: EQUAL
7519: IFFALSE 7529
// sRefresh := true ;
7521: LD_ADDR_EXP 37
7525: PUSH
7526: LD_INT 1
7528: ST_TO_ADDR
// if p3 = 12 then
7529: LD_VAR 0 3
7533: PUSH
7534: LD_INT 12
7536: EQUAL
7537: IFFALSE 7547
// sExp := true ;
7539: LD_ADDR_EXP 38
7543: PUSH
7544: LD_INT 1
7546: ST_TO_ADDR
// if p3 = 13 then
7547: LD_VAR 0 3
7551: PUSH
7552: LD_INT 13
7554: EQUAL
7555: IFFALSE 7565
// sDepot := true ;
7557: LD_ADDR_EXP 39
7561: PUSH
7562: LD_INT 1
7564: ST_TO_ADDR
// if p3 = 14 then
7565: LD_VAR 0 3
7569: PUSH
7570: LD_INT 14
7572: EQUAL
7573: IFFALSE 7583
// sFlag := true ;
7575: LD_ADDR_EXP 40
7579: PUSH
7580: LD_INT 1
7582: ST_TO_ADDR
// if p3 = 15 then
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 15
7590: EQUAL
7591: IFFALSE 7601
// sKamikadze := true ;
7593: LD_ADDR_EXP 48
7597: PUSH
7598: LD_INT 1
7600: ST_TO_ADDR
// if p3 = 16 then
7601: LD_VAR 0 3
7605: PUSH
7606: LD_INT 16
7608: EQUAL
7609: IFFALSE 7619
// sTroll := true ;
7611: LD_ADDR_EXP 49
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// if p3 = 17 then
7619: LD_VAR 0 3
7623: PUSH
7624: LD_INT 17
7626: EQUAL
7627: IFFALSE 7637
// sSlow := true ;
7629: LD_ADDR_EXP 50
7633: PUSH
7634: LD_INT 1
7636: ST_TO_ADDR
// if p3 = 18 then
7637: LD_VAR 0 3
7641: PUSH
7642: LD_INT 18
7644: EQUAL
7645: IFFALSE 7655
// sLack := true ;
7647: LD_ADDR_EXP 51
7651: PUSH
7652: LD_INT 1
7654: ST_TO_ADDR
// if p3 = 19 then
7655: LD_VAR 0 3
7659: PUSH
7660: LD_INT 19
7662: EQUAL
7663: IFFALSE 7673
// sTank := true ;
7665: LD_ADDR_EXP 53
7669: PUSH
7670: LD_INT 1
7672: ST_TO_ADDR
// if p3 = 20 then
7673: LD_VAR 0 3
7677: PUSH
7678: LD_INT 20
7680: EQUAL
7681: IFFALSE 7691
// sRemote := true ;
7683: LD_ADDR_EXP 54
7687: PUSH
7688: LD_INT 1
7690: ST_TO_ADDR
// if p3 = 21 then
7691: LD_VAR 0 3
7695: PUSH
7696: LD_INT 21
7698: EQUAL
7699: IFFALSE 7709
// sPowell := true ;
7701: LD_ADDR_EXP 55
7705: PUSH
7706: LD_INT 1
7708: ST_TO_ADDR
// if p3 = 22 then
7709: LD_VAR 0 3
7713: PUSH
7714: LD_INT 22
7716: EQUAL
7717: IFFALSE 7727
// sTeleport := true ;
7719: LD_ADDR_EXP 58
7723: PUSH
7724: LD_INT 1
7726: ST_TO_ADDR
// if p3 = 23 then
7727: LD_VAR 0 3
7731: PUSH
7732: LD_INT 23
7734: EQUAL
7735: IFFALSE 7745
// sOilTower := true ;
7737: LD_ADDR_EXP 60
7741: PUSH
7742: LD_INT 1
7744: ST_TO_ADDR
// if p3 = 24 then
7745: LD_VAR 0 3
7749: PUSH
7750: LD_INT 24
7752: EQUAL
7753: IFFALSE 7763
// sShovel := true ;
7755: LD_ADDR_EXP 61
7759: PUSH
7760: LD_INT 1
7762: ST_TO_ADDR
// if p3 = 25 then
7763: LD_VAR 0 3
7767: PUSH
7768: LD_INT 25
7770: EQUAL
7771: IFFALSE 7781
// sSheik := true ;
7773: LD_ADDR_EXP 62
7777: PUSH
7778: LD_INT 1
7780: ST_TO_ADDR
// if p3 = 26 then
7781: LD_VAR 0 3
7785: PUSH
7786: LD_INT 26
7788: EQUAL
7789: IFFALSE 7799
// sEarthquake := true ;
7791: LD_ADDR_EXP 64
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// if p3 = 27 then
7799: LD_VAR 0 3
7803: PUSH
7804: LD_INT 27
7806: EQUAL
7807: IFFALSE 7817
// sAI := true ;
7809: LD_ADDR_EXP 65
7813: PUSH
7814: LD_INT 1
7816: ST_TO_ADDR
// if p3 = 28 then
7817: LD_VAR 0 3
7821: PUSH
7822: LD_INT 28
7824: EQUAL
7825: IFFALSE 7835
// sCargo := true ;
7827: LD_ADDR_EXP 68
7831: PUSH
7832: LD_INT 1
7834: ST_TO_ADDR
// if p3 = 29 then
7835: LD_VAR 0 3
7839: PUSH
7840: LD_INT 29
7842: EQUAL
7843: IFFALSE 7853
// sDLaser := true ;
7845: LD_ADDR_EXP 69
7849: PUSH
7850: LD_INT 1
7852: ST_TO_ADDR
// if p3 = 30 then
7853: LD_VAR 0 3
7857: PUSH
7858: LD_INT 30
7860: EQUAL
7861: IFFALSE 7871
// sExchange := true ;
7863: LD_ADDR_EXP 70
7867: PUSH
7868: LD_INT 1
7870: ST_TO_ADDR
// if p3 = 31 then
7871: LD_VAR 0 3
7875: PUSH
7876: LD_INT 31
7878: EQUAL
7879: IFFALSE 7889
// sFac := true ;
7881: LD_ADDR_EXP 71
7885: PUSH
7886: LD_INT 1
7888: ST_TO_ADDR
// if p3 = 32 then
7889: LD_VAR 0 3
7893: PUSH
7894: LD_INT 32
7896: EQUAL
7897: IFFALSE 7907
// sPower := true ;
7899: LD_ADDR_EXP 72
7903: PUSH
7904: LD_INT 1
7906: ST_TO_ADDR
// if p3 = 33 then
7907: LD_VAR 0 3
7911: PUSH
7912: LD_INT 33
7914: EQUAL
7915: IFFALSE 7925
// sRandom := true ;
7917: LD_ADDR_EXP 73
7921: PUSH
7922: LD_INT 1
7924: ST_TO_ADDR
// if p3 = 34 then
7925: LD_VAR 0 3
7929: PUSH
7930: LD_INT 34
7932: EQUAL
7933: IFFALSE 7943
// sShield := true ;
7935: LD_ADDR_EXP 74
7939: PUSH
7940: LD_INT 1
7942: ST_TO_ADDR
// if p3 = 35 then
7943: LD_VAR 0 3
7947: PUSH
7948: LD_INT 35
7950: EQUAL
7951: IFFALSE 7961
// sTime := true ;
7953: LD_ADDR_EXP 75
7957: PUSH
7958: LD_INT 1
7960: ST_TO_ADDR
// if p3 = 36 then
7961: LD_VAR 0 3
7965: PUSH
7966: LD_INT 36
7968: EQUAL
7969: IFFALSE 7979
// sTools := true ;
7971: LD_ADDR_EXP 76
7975: PUSH
7976: LD_INT 1
7978: ST_TO_ADDR
// if p3 = 101 then
7979: LD_VAR 0 3
7983: PUSH
7984: LD_INT 101
7986: EQUAL
7987: IFFALSE 7997
// sSold := true ;
7989: LD_ADDR_EXP 41
7993: PUSH
7994: LD_INT 1
7996: ST_TO_ADDR
// if p3 = 102 then
7997: LD_VAR 0 3
8001: PUSH
8002: LD_INT 102
8004: EQUAL
8005: IFFALSE 8015
// sDiff := true ;
8007: LD_ADDR_EXP 42
8011: PUSH
8012: LD_INT 1
8014: ST_TO_ADDR
// if p3 = 103 then
8015: LD_VAR 0 3
8019: PUSH
8020: LD_INT 103
8022: EQUAL
8023: IFFALSE 8033
// sFog := true ;
8025: LD_ADDR_EXP 45
8029: PUSH
8030: LD_INT 1
8032: ST_TO_ADDR
// if p3 = 104 then
8033: LD_VAR 0 3
8037: PUSH
8038: LD_INT 104
8040: EQUAL
8041: IFFALSE 8051
// sReset := true ;
8043: LD_ADDR_EXP 46
8047: PUSH
8048: LD_INT 1
8050: ST_TO_ADDR
// if p3 = 105 then
8051: LD_VAR 0 3
8055: PUSH
8056: LD_INT 105
8058: EQUAL
8059: IFFALSE 8069
// sSun := true ;
8061: LD_ADDR_EXP 47
8065: PUSH
8066: LD_INT 1
8068: ST_TO_ADDR
// if p3 = 106 then
8069: LD_VAR 0 3
8073: PUSH
8074: LD_INT 106
8076: EQUAL
8077: IFFALSE 8087
// sTiger := true ;
8079: LD_ADDR_EXP 43
8083: PUSH
8084: LD_INT 1
8086: ST_TO_ADDR
// if p3 = 107 then
8087: LD_VAR 0 3
8091: PUSH
8092: LD_INT 107
8094: EQUAL
8095: IFFALSE 8105
// sBomb := true ;
8097: LD_ADDR_EXP 44
8101: PUSH
8102: LD_INT 1
8104: ST_TO_ADDR
// if p3 = 108 then
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 108
8112: EQUAL
8113: IFFALSE 8123
// sWound := true ;
8115: LD_ADDR_EXP 52
8119: PUSH
8120: LD_INT 1
8122: ST_TO_ADDR
// if p3 = 109 then
8123: LD_VAR 0 3
8127: PUSH
8128: LD_INT 109
8130: EQUAL
8131: IFFALSE 8141
// sBetray := true ;
8133: LD_ADDR_EXP 56
8137: PUSH
8138: LD_INT 1
8140: ST_TO_ADDR
// if p3 = 110 then
8141: LD_VAR 0 3
8145: PUSH
8146: LD_INT 110
8148: EQUAL
8149: IFFALSE 8159
// sContamin := true ;
8151: LD_ADDR_EXP 57
8155: PUSH
8156: LD_INT 1
8158: ST_TO_ADDR
// if p3 = 111 then
8159: LD_VAR 0 3
8163: PUSH
8164: LD_INT 111
8166: EQUAL
8167: IFFALSE 8177
// sOil := true ;
8169: LD_ADDR_EXP 59
8173: PUSH
8174: LD_INT 1
8176: ST_TO_ADDR
// if p3 = 112 then
8177: LD_VAR 0 3
8181: PUSH
8182: LD_INT 112
8184: EQUAL
8185: IFFALSE 8195
// sStu := true ;
8187: LD_ADDR_EXP 63
8191: PUSH
8192: LD_INT 1
8194: ST_TO_ADDR
// if p3 = 113 then
8195: LD_VAR 0 3
8199: PUSH
8200: LD_INT 113
8202: EQUAL
8203: IFFALSE 8213
// sBazooka := true ;
8205: LD_ADDR_EXP 66
8209: PUSH
8210: LD_INT 1
8212: ST_TO_ADDR
// if p3 = 114 then
8213: LD_VAR 0 3
8217: PUSH
8218: LD_INT 114
8220: EQUAL
8221: IFFALSE 8231
// sMortar := true ;
8223: LD_ADDR_EXP 67
8227: PUSH
8228: LD_INT 1
8230: ST_TO_ADDR
// if p3 = 115 then
8231: LD_VAR 0 3
8235: PUSH
8236: LD_INT 115
8238: EQUAL
8239: IFFALSE 8249
// sRanger := true ;
8241: LD_ADDR_EXP 77
8245: PUSH
8246: LD_INT 1
8248: ST_TO_ADDR
// if p3 = 116 then
8249: LD_VAR 0 3
8253: PUSH
8254: LD_INT 116
8256: EQUAL
8257: IFFALSE 8267
// sComputer := true ;
8259: LD_ADDR_EXP 78
8263: PUSH
8264: LD_INT 1
8266: ST_TO_ADDR
// if p3 = 117 then
8267: LD_VAR 0 3
8271: PUSH
8272: LD_INT 117
8274: EQUAL
8275: IFFALSE 8285
// s30 := true ;
8277: LD_ADDR_EXP 79
8281: PUSH
8282: LD_INT 1
8284: ST_TO_ADDR
// if p3 = 118 then
8285: LD_VAR 0 3
8289: PUSH
8290: LD_INT 118
8292: EQUAL
8293: IFFALSE 8303
// s60 := true ;
8295: LD_ADDR_EXP 80
8299: PUSH
8300: LD_INT 1
8302: ST_TO_ADDR
// end ; if p2 = 101 then
8303: LD_VAR 0 2
8307: PUSH
8308: LD_INT 101
8310: EQUAL
8311: IFFALSE 8439
// begin case p3 of 1 :
8313: LD_VAR 0 3
8317: PUSH
8318: LD_INT 1
8320: DOUBLE
8321: EQUAL
8322: IFTRUE 8326
8324: GO 8333
8326: POP
// hHackUnlimitedResources ; 2 :
8327: CALL 20537 0 0
8331: GO 8439
8333: LD_INT 2
8335: DOUBLE
8336: EQUAL
8337: IFTRUE 8341
8339: GO 8348
8341: POP
// hHackSetLevel10 ; 3 :
8342: CALL 20670 0 0
8346: GO 8439
8348: LD_INT 3
8350: DOUBLE
8351: EQUAL
8352: IFTRUE 8356
8354: GO 8363
8356: POP
// hHackSetLevel10YourUnits ; 4 :
8357: CALL 20755 0 0
8361: GO 8439
8363: LD_INT 4
8365: DOUBLE
8366: EQUAL
8367: IFTRUE 8371
8369: GO 8378
8371: POP
// hHackInvincible ; 5 :
8372: CALL 21203 0 0
8376: GO 8439
8378: LD_INT 5
8380: DOUBLE
8381: EQUAL
8382: IFTRUE 8386
8384: GO 8393
8386: POP
// hHackInvisible ; 6 :
8387: CALL 21314 0 0
8391: GO 8439
8393: LD_INT 6
8395: DOUBLE
8396: EQUAL
8397: IFTRUE 8401
8399: GO 8408
8401: POP
// hHackChangeYourSide ; 7 :
8402: CALL 21371 0 0
8406: GO 8439
8408: LD_INT 7
8410: DOUBLE
8411: EQUAL
8412: IFTRUE 8416
8414: GO 8423
8416: POP
// hHackChangeUnitSide ; 8 :
8417: CALL 21413 0 0
8421: GO 8439
8423: LD_INT 8
8425: DOUBLE
8426: EQUAL
8427: IFTRUE 8431
8429: GO 8438
8431: POP
// hHackFog ; end ;
8432: CALL 21514 0 0
8436: GO 8439
8438: POP
// end ; end ;
8439: LD_VAR 0 7
8443: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8444: GO 8446
8446: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8447: LD_STRING initStreamRollete();
8449: PPUSH
8450: CALL_OW 559
// InitStreamMode ;
8454: CALL 8466 0 0
// DefineStreamItems ( false ) ;
8458: LD_INT 0
8460: PPUSH
8461: CALL 8930 0 1
// end ;
8465: END
// function InitStreamMode ; begin
8466: LD_INT 0
8468: PPUSH
// streamModeActive := false ;
8469: LD_ADDR_EXP 24
8473: PUSH
8474: LD_INT 0
8476: ST_TO_ADDR
// normalCounter := 36 ;
8477: LD_ADDR_EXP 25
8481: PUSH
8482: LD_INT 36
8484: ST_TO_ADDR
// hardcoreCounter := 18 ;
8485: LD_ADDR_EXP 26
8489: PUSH
8490: LD_INT 18
8492: ST_TO_ADDR
// sRocket := false ;
8493: LD_ADDR_EXP 29
8497: PUSH
8498: LD_INT 0
8500: ST_TO_ADDR
// sSpeed := false ;
8501: LD_ADDR_EXP 28
8505: PUSH
8506: LD_INT 0
8508: ST_TO_ADDR
// sEngine := false ;
8509: LD_ADDR_EXP 30
8513: PUSH
8514: LD_INT 0
8516: ST_TO_ADDR
// sSpec := false ;
8517: LD_ADDR_EXP 27
8521: PUSH
8522: LD_INT 0
8524: ST_TO_ADDR
// sLevel := false ;
8525: LD_ADDR_EXP 31
8529: PUSH
8530: LD_INT 0
8532: ST_TO_ADDR
// sArmoury := false ;
8533: LD_ADDR_EXP 32
8537: PUSH
8538: LD_INT 0
8540: ST_TO_ADDR
// sRadar := false ;
8541: LD_ADDR_EXP 33
8545: PUSH
8546: LD_INT 0
8548: ST_TO_ADDR
// sBunker := false ;
8549: LD_ADDR_EXP 34
8553: PUSH
8554: LD_INT 0
8556: ST_TO_ADDR
// sHack := false ;
8557: LD_ADDR_EXP 35
8561: PUSH
8562: LD_INT 0
8564: ST_TO_ADDR
// sFire := false ;
8565: LD_ADDR_EXP 36
8569: PUSH
8570: LD_INT 0
8572: ST_TO_ADDR
// sRefresh := false ;
8573: LD_ADDR_EXP 37
8577: PUSH
8578: LD_INT 0
8580: ST_TO_ADDR
// sExp := false ;
8581: LD_ADDR_EXP 38
8585: PUSH
8586: LD_INT 0
8588: ST_TO_ADDR
// sDepot := false ;
8589: LD_ADDR_EXP 39
8593: PUSH
8594: LD_INT 0
8596: ST_TO_ADDR
// sFlag := false ;
8597: LD_ADDR_EXP 40
8601: PUSH
8602: LD_INT 0
8604: ST_TO_ADDR
// sKamikadze := false ;
8605: LD_ADDR_EXP 48
8609: PUSH
8610: LD_INT 0
8612: ST_TO_ADDR
// sTroll := false ;
8613: LD_ADDR_EXP 49
8617: PUSH
8618: LD_INT 0
8620: ST_TO_ADDR
// sSlow := false ;
8621: LD_ADDR_EXP 50
8625: PUSH
8626: LD_INT 0
8628: ST_TO_ADDR
// sLack := false ;
8629: LD_ADDR_EXP 51
8633: PUSH
8634: LD_INT 0
8636: ST_TO_ADDR
// sTank := false ;
8637: LD_ADDR_EXP 53
8641: PUSH
8642: LD_INT 0
8644: ST_TO_ADDR
// sRemote := false ;
8645: LD_ADDR_EXP 54
8649: PUSH
8650: LD_INT 0
8652: ST_TO_ADDR
// sPowell := false ;
8653: LD_ADDR_EXP 55
8657: PUSH
8658: LD_INT 0
8660: ST_TO_ADDR
// sTeleport := false ;
8661: LD_ADDR_EXP 58
8665: PUSH
8666: LD_INT 0
8668: ST_TO_ADDR
// sOilTower := false ;
8669: LD_ADDR_EXP 60
8673: PUSH
8674: LD_INT 0
8676: ST_TO_ADDR
// sShovel := false ;
8677: LD_ADDR_EXP 61
8681: PUSH
8682: LD_INT 0
8684: ST_TO_ADDR
// sSheik := false ;
8685: LD_ADDR_EXP 62
8689: PUSH
8690: LD_INT 0
8692: ST_TO_ADDR
// sEarthquake := false ;
8693: LD_ADDR_EXP 64
8697: PUSH
8698: LD_INT 0
8700: ST_TO_ADDR
// sAI := false ;
8701: LD_ADDR_EXP 65
8705: PUSH
8706: LD_INT 0
8708: ST_TO_ADDR
// sCargo := false ;
8709: LD_ADDR_EXP 68
8713: PUSH
8714: LD_INT 0
8716: ST_TO_ADDR
// sDLaser := false ;
8717: LD_ADDR_EXP 69
8721: PUSH
8722: LD_INT 0
8724: ST_TO_ADDR
// sExchange := false ;
8725: LD_ADDR_EXP 70
8729: PUSH
8730: LD_INT 0
8732: ST_TO_ADDR
// sFac := false ;
8733: LD_ADDR_EXP 71
8737: PUSH
8738: LD_INT 0
8740: ST_TO_ADDR
// sPower := false ;
8741: LD_ADDR_EXP 72
8745: PUSH
8746: LD_INT 0
8748: ST_TO_ADDR
// sRandom := false ;
8749: LD_ADDR_EXP 73
8753: PUSH
8754: LD_INT 0
8756: ST_TO_ADDR
// sShield := false ;
8757: LD_ADDR_EXP 74
8761: PUSH
8762: LD_INT 0
8764: ST_TO_ADDR
// sTime := false ;
8765: LD_ADDR_EXP 75
8769: PUSH
8770: LD_INT 0
8772: ST_TO_ADDR
// sTools := false ;
8773: LD_ADDR_EXP 76
8777: PUSH
8778: LD_INT 0
8780: ST_TO_ADDR
// sSold := false ;
8781: LD_ADDR_EXP 41
8785: PUSH
8786: LD_INT 0
8788: ST_TO_ADDR
// sDiff := false ;
8789: LD_ADDR_EXP 42
8793: PUSH
8794: LD_INT 0
8796: ST_TO_ADDR
// sFog := false ;
8797: LD_ADDR_EXP 45
8801: PUSH
8802: LD_INT 0
8804: ST_TO_ADDR
// sReset := false ;
8805: LD_ADDR_EXP 46
8809: PUSH
8810: LD_INT 0
8812: ST_TO_ADDR
// sSun := false ;
8813: LD_ADDR_EXP 47
8817: PUSH
8818: LD_INT 0
8820: ST_TO_ADDR
// sTiger := false ;
8821: LD_ADDR_EXP 43
8825: PUSH
8826: LD_INT 0
8828: ST_TO_ADDR
// sBomb := false ;
8829: LD_ADDR_EXP 44
8833: PUSH
8834: LD_INT 0
8836: ST_TO_ADDR
// sWound := false ;
8837: LD_ADDR_EXP 52
8841: PUSH
8842: LD_INT 0
8844: ST_TO_ADDR
// sBetray := false ;
8845: LD_ADDR_EXP 56
8849: PUSH
8850: LD_INT 0
8852: ST_TO_ADDR
// sContamin := false ;
8853: LD_ADDR_EXP 57
8857: PUSH
8858: LD_INT 0
8860: ST_TO_ADDR
// sOil := false ;
8861: LD_ADDR_EXP 59
8865: PUSH
8866: LD_INT 0
8868: ST_TO_ADDR
// sStu := false ;
8869: LD_ADDR_EXP 63
8873: PUSH
8874: LD_INT 0
8876: ST_TO_ADDR
// sBazooka := false ;
8877: LD_ADDR_EXP 66
8881: PUSH
8882: LD_INT 0
8884: ST_TO_ADDR
// sMortar := false ;
8885: LD_ADDR_EXP 67
8889: PUSH
8890: LD_INT 0
8892: ST_TO_ADDR
// sRanger := false ;
8893: LD_ADDR_EXP 77
8897: PUSH
8898: LD_INT 0
8900: ST_TO_ADDR
// sComputer := false ;
8901: LD_ADDR_EXP 78
8905: PUSH
8906: LD_INT 0
8908: ST_TO_ADDR
// s30 := false ;
8909: LD_ADDR_EXP 79
8913: PUSH
8914: LD_INT 0
8916: ST_TO_ADDR
// s60 := false ;
8917: LD_ADDR_EXP 80
8921: PUSH
8922: LD_INT 0
8924: ST_TO_ADDR
// end ;
8925: LD_VAR 0 1
8929: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8930: LD_INT 0
8932: PPUSH
8933: PPUSH
8934: PPUSH
8935: PPUSH
8936: PPUSH
8937: PPUSH
8938: PPUSH
// result := [ ] ;
8939: LD_ADDR_VAR 0 2
8943: PUSH
8944: EMPTY
8945: ST_TO_ADDR
// if campaign_id = 1 then
8946: LD_OWVAR 69
8950: PUSH
8951: LD_INT 1
8953: EQUAL
8954: IFFALSE 12120
// begin case mission_number of 1 :
8956: LD_OWVAR 70
8960: PUSH
8961: LD_INT 1
8963: DOUBLE
8964: EQUAL
8965: IFTRUE 8969
8967: GO 9045
8969: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8970: LD_ADDR_VAR 0 2
8974: PUSH
8975: LD_INT 2
8977: PUSH
8978: LD_INT 4
8980: PUSH
8981: LD_INT 11
8983: PUSH
8984: LD_INT 12
8986: PUSH
8987: LD_INT 15
8989: PUSH
8990: LD_INT 16
8992: PUSH
8993: LD_INT 22
8995: PUSH
8996: LD_INT 23
8998: PUSH
8999: LD_INT 26
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: PUSH
9013: LD_INT 101
9015: PUSH
9016: LD_INT 102
9018: PUSH
9019: LD_INT 106
9021: PUSH
9022: LD_INT 116
9024: PUSH
9025: LD_INT 117
9027: PUSH
9028: LD_INT 118
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: ST_TO_ADDR
9043: GO 12118
9045: LD_INT 2
9047: DOUBLE
9048: EQUAL
9049: IFTRUE 9053
9051: GO 9137
9053: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9054: LD_ADDR_VAR 0 2
9058: PUSH
9059: LD_INT 2
9061: PUSH
9062: LD_INT 4
9064: PUSH
9065: LD_INT 11
9067: PUSH
9068: LD_INT 12
9070: PUSH
9071: LD_INT 15
9073: PUSH
9074: LD_INT 16
9076: PUSH
9077: LD_INT 22
9079: PUSH
9080: LD_INT 23
9082: PUSH
9083: LD_INT 26
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: PUSH
9097: LD_INT 101
9099: PUSH
9100: LD_INT 102
9102: PUSH
9103: LD_INT 105
9105: PUSH
9106: LD_INT 106
9108: PUSH
9109: LD_INT 108
9111: PUSH
9112: LD_INT 116
9114: PUSH
9115: LD_INT 117
9117: PUSH
9118: LD_INT 118
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: ST_TO_ADDR
9135: GO 12118
9137: LD_INT 3
9139: DOUBLE
9140: EQUAL
9141: IFTRUE 9145
9143: GO 9233
9145: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9146: LD_ADDR_VAR 0 2
9150: PUSH
9151: LD_INT 2
9153: PUSH
9154: LD_INT 4
9156: PUSH
9157: LD_INT 5
9159: PUSH
9160: LD_INT 11
9162: PUSH
9163: LD_INT 12
9165: PUSH
9166: LD_INT 15
9168: PUSH
9169: LD_INT 16
9171: PUSH
9172: LD_INT 22
9174: PUSH
9175: LD_INT 26
9177: PUSH
9178: LD_INT 36
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: PUSH
9193: LD_INT 101
9195: PUSH
9196: LD_INT 102
9198: PUSH
9199: LD_INT 105
9201: PUSH
9202: LD_INT 106
9204: PUSH
9205: LD_INT 108
9207: PUSH
9208: LD_INT 116
9210: PUSH
9211: LD_INT 117
9213: PUSH
9214: LD_INT 118
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: ST_TO_ADDR
9231: GO 12118
9233: LD_INT 4
9235: DOUBLE
9236: EQUAL
9237: IFTRUE 9241
9239: GO 9337
9241: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9242: LD_ADDR_VAR 0 2
9246: PUSH
9247: LD_INT 2
9249: PUSH
9250: LD_INT 4
9252: PUSH
9253: LD_INT 5
9255: PUSH
9256: LD_INT 8
9258: PUSH
9259: LD_INT 11
9261: PUSH
9262: LD_INT 12
9264: PUSH
9265: LD_INT 15
9267: PUSH
9268: LD_INT 16
9270: PUSH
9271: LD_INT 22
9273: PUSH
9274: LD_INT 23
9276: PUSH
9277: LD_INT 26
9279: PUSH
9280: LD_INT 36
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: PUSH
9297: LD_INT 101
9299: PUSH
9300: LD_INT 102
9302: PUSH
9303: LD_INT 105
9305: PUSH
9306: LD_INT 106
9308: PUSH
9309: LD_INT 108
9311: PUSH
9312: LD_INT 116
9314: PUSH
9315: LD_INT 117
9317: PUSH
9318: LD_INT 118
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: ST_TO_ADDR
9335: GO 12118
9337: LD_INT 5
9339: DOUBLE
9340: EQUAL
9341: IFTRUE 9345
9343: GO 9457
9345: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9346: LD_ADDR_VAR 0 2
9350: PUSH
9351: LD_INT 2
9353: PUSH
9354: LD_INT 4
9356: PUSH
9357: LD_INT 5
9359: PUSH
9360: LD_INT 6
9362: PUSH
9363: LD_INT 8
9365: PUSH
9366: LD_INT 11
9368: PUSH
9369: LD_INT 12
9371: PUSH
9372: LD_INT 15
9374: PUSH
9375: LD_INT 16
9377: PUSH
9378: LD_INT 22
9380: PUSH
9381: LD_INT 23
9383: PUSH
9384: LD_INT 25
9386: PUSH
9387: LD_INT 26
9389: PUSH
9390: LD_INT 36
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: PUSH
9409: LD_INT 101
9411: PUSH
9412: LD_INT 102
9414: PUSH
9415: LD_INT 105
9417: PUSH
9418: LD_INT 106
9420: PUSH
9421: LD_INT 108
9423: PUSH
9424: LD_INT 109
9426: PUSH
9427: LD_INT 112
9429: PUSH
9430: LD_INT 116
9432: PUSH
9433: LD_INT 117
9435: PUSH
9436: LD_INT 118
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: ST_TO_ADDR
9455: GO 12118
9457: LD_INT 6
9459: DOUBLE
9460: EQUAL
9461: IFTRUE 9465
9463: GO 9597
9465: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9466: LD_ADDR_VAR 0 2
9470: PUSH
9471: LD_INT 2
9473: PUSH
9474: LD_INT 4
9476: PUSH
9477: LD_INT 5
9479: PUSH
9480: LD_INT 6
9482: PUSH
9483: LD_INT 8
9485: PUSH
9486: LD_INT 11
9488: PUSH
9489: LD_INT 12
9491: PUSH
9492: LD_INT 15
9494: PUSH
9495: LD_INT 16
9497: PUSH
9498: LD_INT 20
9500: PUSH
9501: LD_INT 21
9503: PUSH
9504: LD_INT 22
9506: PUSH
9507: LD_INT 23
9509: PUSH
9510: LD_INT 25
9512: PUSH
9513: LD_INT 26
9515: PUSH
9516: LD_INT 30
9518: PUSH
9519: LD_INT 31
9521: PUSH
9522: LD_INT 32
9524: PUSH
9525: LD_INT 36
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 101
9551: PUSH
9552: LD_INT 102
9554: PUSH
9555: LD_INT 105
9557: PUSH
9558: LD_INT 106
9560: PUSH
9561: LD_INT 108
9563: PUSH
9564: LD_INT 109
9566: PUSH
9567: LD_INT 112
9569: PUSH
9570: LD_INT 116
9572: PUSH
9573: LD_INT 117
9575: PUSH
9576: LD_INT 118
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: ST_TO_ADDR
9595: GO 12118
9597: LD_INT 7
9599: DOUBLE
9600: EQUAL
9601: IFTRUE 9605
9603: GO 9717
9605: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9606: LD_ADDR_VAR 0 2
9610: PUSH
9611: LD_INT 2
9613: PUSH
9614: LD_INT 4
9616: PUSH
9617: LD_INT 5
9619: PUSH
9620: LD_INT 7
9622: PUSH
9623: LD_INT 11
9625: PUSH
9626: LD_INT 12
9628: PUSH
9629: LD_INT 15
9631: PUSH
9632: LD_INT 16
9634: PUSH
9635: LD_INT 20
9637: PUSH
9638: LD_INT 21
9640: PUSH
9641: LD_INT 22
9643: PUSH
9644: LD_INT 23
9646: PUSH
9647: LD_INT 25
9649: PUSH
9650: LD_INT 26
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: PUSH
9669: LD_INT 101
9671: PUSH
9672: LD_INT 102
9674: PUSH
9675: LD_INT 103
9677: PUSH
9678: LD_INT 105
9680: PUSH
9681: LD_INT 106
9683: PUSH
9684: LD_INT 108
9686: PUSH
9687: LD_INT 112
9689: PUSH
9690: LD_INT 116
9692: PUSH
9693: LD_INT 117
9695: PUSH
9696: LD_INT 118
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: ST_TO_ADDR
9715: GO 12118
9717: LD_INT 8
9719: DOUBLE
9720: EQUAL
9721: IFTRUE 9725
9723: GO 9865
9725: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9726: LD_ADDR_VAR 0 2
9730: PUSH
9731: LD_INT 2
9733: PUSH
9734: LD_INT 4
9736: PUSH
9737: LD_INT 5
9739: PUSH
9740: LD_INT 6
9742: PUSH
9743: LD_INT 7
9745: PUSH
9746: LD_INT 8
9748: PUSH
9749: LD_INT 11
9751: PUSH
9752: LD_INT 12
9754: PUSH
9755: LD_INT 15
9757: PUSH
9758: LD_INT 16
9760: PUSH
9761: LD_INT 20
9763: PUSH
9764: LD_INT 21
9766: PUSH
9767: LD_INT 22
9769: PUSH
9770: LD_INT 23
9772: PUSH
9773: LD_INT 25
9775: PUSH
9776: LD_INT 26
9778: PUSH
9779: LD_INT 30
9781: PUSH
9782: LD_INT 31
9784: PUSH
9785: LD_INT 32
9787: PUSH
9788: LD_INT 36
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: PUSH
9813: LD_INT 101
9815: PUSH
9816: LD_INT 102
9818: PUSH
9819: LD_INT 103
9821: PUSH
9822: LD_INT 105
9824: PUSH
9825: LD_INT 106
9827: PUSH
9828: LD_INT 108
9830: PUSH
9831: LD_INT 109
9833: PUSH
9834: LD_INT 112
9836: PUSH
9837: LD_INT 116
9839: PUSH
9840: LD_INT 117
9842: PUSH
9843: LD_INT 118
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: ST_TO_ADDR
9863: GO 12118
9865: LD_INT 9
9867: DOUBLE
9868: EQUAL
9869: IFTRUE 9873
9871: GO 10021
9873: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9874: LD_ADDR_VAR 0 2
9878: PUSH
9879: LD_INT 2
9881: PUSH
9882: LD_INT 4
9884: PUSH
9885: LD_INT 5
9887: PUSH
9888: LD_INT 6
9890: PUSH
9891: LD_INT 7
9893: PUSH
9894: LD_INT 8
9896: PUSH
9897: LD_INT 11
9899: PUSH
9900: LD_INT 12
9902: PUSH
9903: LD_INT 15
9905: PUSH
9906: LD_INT 16
9908: PUSH
9909: LD_INT 20
9911: PUSH
9912: LD_INT 21
9914: PUSH
9915: LD_INT 22
9917: PUSH
9918: LD_INT 23
9920: PUSH
9921: LD_INT 25
9923: PUSH
9924: LD_INT 26
9926: PUSH
9927: LD_INT 28
9929: PUSH
9930: LD_INT 30
9932: PUSH
9933: LD_INT 31
9935: PUSH
9936: LD_INT 32
9938: PUSH
9939: LD_INT 36
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: PUSH
9965: LD_INT 101
9967: PUSH
9968: LD_INT 102
9970: PUSH
9971: LD_INT 103
9973: PUSH
9974: LD_INT 105
9976: PUSH
9977: LD_INT 106
9979: PUSH
9980: LD_INT 108
9982: PUSH
9983: LD_INT 109
9985: PUSH
9986: LD_INT 112
9988: PUSH
9989: LD_INT 114
9991: PUSH
9992: LD_INT 116
9994: PUSH
9995: LD_INT 117
9997: PUSH
9998: LD_INT 118
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: ST_TO_ADDR
10019: GO 12118
10021: LD_INT 10
10023: DOUBLE
10024: EQUAL
10025: IFTRUE 10029
10027: GO 10225
10029: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10030: LD_ADDR_VAR 0 2
10034: PUSH
10035: LD_INT 2
10037: PUSH
10038: LD_INT 4
10040: PUSH
10041: LD_INT 5
10043: PUSH
10044: LD_INT 6
10046: PUSH
10047: LD_INT 7
10049: PUSH
10050: LD_INT 8
10052: PUSH
10053: LD_INT 9
10055: PUSH
10056: LD_INT 10
10058: PUSH
10059: LD_INT 11
10061: PUSH
10062: LD_INT 12
10064: PUSH
10065: LD_INT 13
10067: PUSH
10068: LD_INT 14
10070: PUSH
10071: LD_INT 15
10073: PUSH
10074: LD_INT 16
10076: PUSH
10077: LD_INT 17
10079: PUSH
10080: LD_INT 18
10082: PUSH
10083: LD_INT 19
10085: PUSH
10086: LD_INT 20
10088: PUSH
10089: LD_INT 21
10091: PUSH
10092: LD_INT 22
10094: PUSH
10095: LD_INT 23
10097: PUSH
10098: LD_INT 24
10100: PUSH
10101: LD_INT 25
10103: PUSH
10104: LD_INT 26
10106: PUSH
10107: LD_INT 28
10109: PUSH
10110: LD_INT 30
10112: PUSH
10113: LD_INT 31
10115: PUSH
10116: LD_INT 32
10118: PUSH
10119: LD_INT 36
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: PUSH
10153: LD_INT 101
10155: PUSH
10156: LD_INT 102
10158: PUSH
10159: LD_INT 103
10161: PUSH
10162: LD_INT 104
10164: PUSH
10165: LD_INT 105
10167: PUSH
10168: LD_INT 106
10170: PUSH
10171: LD_INT 107
10173: PUSH
10174: LD_INT 108
10176: PUSH
10177: LD_INT 109
10179: PUSH
10180: LD_INT 110
10182: PUSH
10183: LD_INT 111
10185: PUSH
10186: LD_INT 112
10188: PUSH
10189: LD_INT 114
10191: PUSH
10192: LD_INT 116
10194: PUSH
10195: LD_INT 117
10197: PUSH
10198: LD_INT 118
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: ST_TO_ADDR
10223: GO 12118
10225: LD_INT 11
10227: DOUBLE
10228: EQUAL
10229: IFTRUE 10233
10231: GO 10437
10233: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10234: LD_ADDR_VAR 0 2
10238: PUSH
10239: LD_INT 2
10241: PUSH
10242: LD_INT 3
10244: PUSH
10245: LD_INT 4
10247: PUSH
10248: LD_INT 5
10250: PUSH
10251: LD_INT 6
10253: PUSH
10254: LD_INT 7
10256: PUSH
10257: LD_INT 8
10259: PUSH
10260: LD_INT 9
10262: PUSH
10263: LD_INT 10
10265: PUSH
10266: LD_INT 11
10268: PUSH
10269: LD_INT 12
10271: PUSH
10272: LD_INT 13
10274: PUSH
10275: LD_INT 14
10277: PUSH
10278: LD_INT 15
10280: PUSH
10281: LD_INT 16
10283: PUSH
10284: LD_INT 17
10286: PUSH
10287: LD_INT 18
10289: PUSH
10290: LD_INT 19
10292: PUSH
10293: LD_INT 20
10295: PUSH
10296: LD_INT 21
10298: PUSH
10299: LD_INT 22
10301: PUSH
10302: LD_INT 23
10304: PUSH
10305: LD_INT 24
10307: PUSH
10308: LD_INT 25
10310: PUSH
10311: LD_INT 26
10313: PUSH
10314: LD_INT 28
10316: PUSH
10317: LD_INT 30
10319: PUSH
10320: LD_INT 31
10322: PUSH
10323: LD_INT 32
10325: PUSH
10326: LD_INT 34
10328: PUSH
10329: LD_INT 36
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 101
10367: PUSH
10368: LD_INT 102
10370: PUSH
10371: LD_INT 103
10373: PUSH
10374: LD_INT 104
10376: PUSH
10377: LD_INT 105
10379: PUSH
10380: LD_INT 106
10382: PUSH
10383: LD_INT 107
10385: PUSH
10386: LD_INT 108
10388: PUSH
10389: LD_INT 109
10391: PUSH
10392: LD_INT 110
10394: PUSH
10395: LD_INT 111
10397: PUSH
10398: LD_INT 112
10400: PUSH
10401: LD_INT 114
10403: PUSH
10404: LD_INT 116
10406: PUSH
10407: LD_INT 117
10409: PUSH
10410: LD_INT 118
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: ST_TO_ADDR
10435: GO 12118
10437: LD_INT 12
10439: DOUBLE
10440: EQUAL
10441: IFTRUE 10445
10443: GO 10665
10445: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10446: LD_ADDR_VAR 0 2
10450: PUSH
10451: LD_INT 1
10453: PUSH
10454: LD_INT 2
10456: PUSH
10457: LD_INT 3
10459: PUSH
10460: LD_INT 4
10462: PUSH
10463: LD_INT 5
10465: PUSH
10466: LD_INT 6
10468: PUSH
10469: LD_INT 7
10471: PUSH
10472: LD_INT 8
10474: PUSH
10475: LD_INT 9
10477: PUSH
10478: LD_INT 10
10480: PUSH
10481: LD_INT 11
10483: PUSH
10484: LD_INT 12
10486: PUSH
10487: LD_INT 13
10489: PUSH
10490: LD_INT 14
10492: PUSH
10493: LD_INT 15
10495: PUSH
10496: LD_INT 16
10498: PUSH
10499: LD_INT 17
10501: PUSH
10502: LD_INT 18
10504: PUSH
10505: LD_INT 19
10507: PUSH
10508: LD_INT 20
10510: PUSH
10511: LD_INT 21
10513: PUSH
10514: LD_INT 22
10516: PUSH
10517: LD_INT 23
10519: PUSH
10520: LD_INT 24
10522: PUSH
10523: LD_INT 25
10525: PUSH
10526: LD_INT 26
10528: PUSH
10529: LD_INT 27
10531: PUSH
10532: LD_INT 28
10534: PUSH
10535: LD_INT 30
10537: PUSH
10538: LD_INT 31
10540: PUSH
10541: LD_INT 32
10543: PUSH
10544: LD_INT 33
10546: PUSH
10547: LD_INT 34
10549: PUSH
10550: LD_INT 36
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 101
10591: PUSH
10592: LD_INT 102
10594: PUSH
10595: LD_INT 103
10597: PUSH
10598: LD_INT 104
10600: PUSH
10601: LD_INT 105
10603: PUSH
10604: LD_INT 106
10606: PUSH
10607: LD_INT 107
10609: PUSH
10610: LD_INT 108
10612: PUSH
10613: LD_INT 109
10615: PUSH
10616: LD_INT 110
10618: PUSH
10619: LD_INT 111
10621: PUSH
10622: LD_INT 112
10624: PUSH
10625: LD_INT 113
10627: PUSH
10628: LD_INT 114
10630: PUSH
10631: LD_INT 116
10633: PUSH
10634: LD_INT 117
10636: PUSH
10637: LD_INT 118
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: ST_TO_ADDR
10663: GO 12118
10665: LD_INT 13
10667: DOUBLE
10668: EQUAL
10669: IFTRUE 10673
10671: GO 10881
10673: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10674: LD_ADDR_VAR 0 2
10678: PUSH
10679: LD_INT 1
10681: PUSH
10682: LD_INT 2
10684: PUSH
10685: LD_INT 3
10687: PUSH
10688: LD_INT 4
10690: PUSH
10691: LD_INT 5
10693: PUSH
10694: LD_INT 8
10696: PUSH
10697: LD_INT 9
10699: PUSH
10700: LD_INT 10
10702: PUSH
10703: LD_INT 11
10705: PUSH
10706: LD_INT 12
10708: PUSH
10709: LD_INT 14
10711: PUSH
10712: LD_INT 15
10714: PUSH
10715: LD_INT 16
10717: PUSH
10718: LD_INT 17
10720: PUSH
10721: LD_INT 18
10723: PUSH
10724: LD_INT 19
10726: PUSH
10727: LD_INT 20
10729: PUSH
10730: LD_INT 21
10732: PUSH
10733: LD_INT 22
10735: PUSH
10736: LD_INT 23
10738: PUSH
10739: LD_INT 24
10741: PUSH
10742: LD_INT 25
10744: PUSH
10745: LD_INT 26
10747: PUSH
10748: LD_INT 27
10750: PUSH
10751: LD_INT 28
10753: PUSH
10754: LD_INT 30
10756: PUSH
10757: LD_INT 31
10759: PUSH
10760: LD_INT 32
10762: PUSH
10763: LD_INT 33
10765: PUSH
10766: LD_INT 34
10768: PUSH
10769: LD_INT 36
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: PUSH
10805: LD_INT 101
10807: PUSH
10808: LD_INT 102
10810: PUSH
10811: LD_INT 103
10813: PUSH
10814: LD_INT 104
10816: PUSH
10817: LD_INT 105
10819: PUSH
10820: LD_INT 106
10822: PUSH
10823: LD_INT 107
10825: PUSH
10826: LD_INT 108
10828: PUSH
10829: LD_INT 109
10831: PUSH
10832: LD_INT 110
10834: PUSH
10835: LD_INT 111
10837: PUSH
10838: LD_INT 112
10840: PUSH
10841: LD_INT 113
10843: PUSH
10844: LD_INT 114
10846: PUSH
10847: LD_INT 116
10849: PUSH
10850: LD_INT 117
10852: PUSH
10853: LD_INT 118
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: ST_TO_ADDR
10879: GO 12118
10881: LD_INT 14
10883: DOUBLE
10884: EQUAL
10885: IFTRUE 10889
10887: GO 11113
10889: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10890: LD_ADDR_VAR 0 2
10894: PUSH
10895: LD_INT 1
10897: PUSH
10898: LD_INT 2
10900: PUSH
10901: LD_INT 3
10903: PUSH
10904: LD_INT 4
10906: PUSH
10907: LD_INT 5
10909: PUSH
10910: LD_INT 6
10912: PUSH
10913: LD_INT 7
10915: PUSH
10916: LD_INT 8
10918: PUSH
10919: LD_INT 9
10921: PUSH
10922: LD_INT 10
10924: PUSH
10925: LD_INT 11
10927: PUSH
10928: LD_INT 12
10930: PUSH
10931: LD_INT 13
10933: PUSH
10934: LD_INT 14
10936: PUSH
10937: LD_INT 15
10939: PUSH
10940: LD_INT 16
10942: PUSH
10943: LD_INT 17
10945: PUSH
10946: LD_INT 18
10948: PUSH
10949: LD_INT 19
10951: PUSH
10952: LD_INT 20
10954: PUSH
10955: LD_INT 21
10957: PUSH
10958: LD_INT 22
10960: PUSH
10961: LD_INT 23
10963: PUSH
10964: LD_INT 24
10966: PUSH
10967: LD_INT 25
10969: PUSH
10970: LD_INT 26
10972: PUSH
10973: LD_INT 27
10975: PUSH
10976: LD_INT 28
10978: PUSH
10979: LD_INT 29
10981: PUSH
10982: LD_INT 30
10984: PUSH
10985: LD_INT 31
10987: PUSH
10988: LD_INT 32
10990: PUSH
10991: LD_INT 33
10993: PUSH
10994: LD_INT 34
10996: PUSH
10997: LD_INT 36
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 101
11039: PUSH
11040: LD_INT 102
11042: PUSH
11043: LD_INT 103
11045: PUSH
11046: LD_INT 104
11048: PUSH
11049: LD_INT 105
11051: PUSH
11052: LD_INT 106
11054: PUSH
11055: LD_INT 107
11057: PUSH
11058: LD_INT 108
11060: PUSH
11061: LD_INT 109
11063: PUSH
11064: LD_INT 110
11066: PUSH
11067: LD_INT 111
11069: PUSH
11070: LD_INT 112
11072: PUSH
11073: LD_INT 113
11075: PUSH
11076: LD_INT 114
11078: PUSH
11079: LD_INT 116
11081: PUSH
11082: LD_INT 117
11084: PUSH
11085: LD_INT 118
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: ST_TO_ADDR
11111: GO 12118
11113: LD_INT 15
11115: DOUBLE
11116: EQUAL
11117: IFTRUE 11121
11119: GO 11345
11121: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11122: LD_ADDR_VAR 0 2
11126: PUSH
11127: LD_INT 1
11129: PUSH
11130: LD_INT 2
11132: PUSH
11133: LD_INT 3
11135: PUSH
11136: LD_INT 4
11138: PUSH
11139: LD_INT 5
11141: PUSH
11142: LD_INT 6
11144: PUSH
11145: LD_INT 7
11147: PUSH
11148: LD_INT 8
11150: PUSH
11151: LD_INT 9
11153: PUSH
11154: LD_INT 10
11156: PUSH
11157: LD_INT 11
11159: PUSH
11160: LD_INT 12
11162: PUSH
11163: LD_INT 13
11165: PUSH
11166: LD_INT 14
11168: PUSH
11169: LD_INT 15
11171: PUSH
11172: LD_INT 16
11174: PUSH
11175: LD_INT 17
11177: PUSH
11178: LD_INT 18
11180: PUSH
11181: LD_INT 19
11183: PUSH
11184: LD_INT 20
11186: PUSH
11187: LD_INT 21
11189: PUSH
11190: LD_INT 22
11192: PUSH
11193: LD_INT 23
11195: PUSH
11196: LD_INT 24
11198: PUSH
11199: LD_INT 25
11201: PUSH
11202: LD_INT 26
11204: PUSH
11205: LD_INT 27
11207: PUSH
11208: LD_INT 28
11210: PUSH
11211: LD_INT 29
11213: PUSH
11214: LD_INT 30
11216: PUSH
11217: LD_INT 31
11219: PUSH
11220: LD_INT 32
11222: PUSH
11223: LD_INT 33
11225: PUSH
11226: LD_INT 34
11228: PUSH
11229: LD_INT 36
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: PUSH
11269: LD_INT 101
11271: PUSH
11272: LD_INT 102
11274: PUSH
11275: LD_INT 103
11277: PUSH
11278: LD_INT 104
11280: PUSH
11281: LD_INT 105
11283: PUSH
11284: LD_INT 106
11286: PUSH
11287: LD_INT 107
11289: PUSH
11290: LD_INT 108
11292: PUSH
11293: LD_INT 109
11295: PUSH
11296: LD_INT 110
11298: PUSH
11299: LD_INT 111
11301: PUSH
11302: LD_INT 112
11304: PUSH
11305: LD_INT 113
11307: PUSH
11308: LD_INT 114
11310: PUSH
11311: LD_INT 116
11313: PUSH
11314: LD_INT 117
11316: PUSH
11317: LD_INT 118
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: ST_TO_ADDR
11343: GO 12118
11345: LD_INT 16
11347: DOUBLE
11348: EQUAL
11349: IFTRUE 11353
11351: GO 11489
11353: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11354: LD_ADDR_VAR 0 2
11358: PUSH
11359: LD_INT 2
11361: PUSH
11362: LD_INT 4
11364: PUSH
11365: LD_INT 5
11367: PUSH
11368: LD_INT 7
11370: PUSH
11371: LD_INT 11
11373: PUSH
11374: LD_INT 12
11376: PUSH
11377: LD_INT 15
11379: PUSH
11380: LD_INT 16
11382: PUSH
11383: LD_INT 20
11385: PUSH
11386: LD_INT 21
11388: PUSH
11389: LD_INT 22
11391: PUSH
11392: LD_INT 23
11394: PUSH
11395: LD_INT 25
11397: PUSH
11398: LD_INT 26
11400: PUSH
11401: LD_INT 30
11403: PUSH
11404: LD_INT 31
11406: PUSH
11407: LD_INT 32
11409: PUSH
11410: LD_INT 33
11412: PUSH
11413: LD_INT 34
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: PUSH
11437: LD_INT 101
11439: PUSH
11440: LD_INT 102
11442: PUSH
11443: LD_INT 103
11445: PUSH
11446: LD_INT 106
11448: PUSH
11449: LD_INT 108
11451: PUSH
11452: LD_INT 112
11454: PUSH
11455: LD_INT 113
11457: PUSH
11458: LD_INT 114
11460: PUSH
11461: LD_INT 116
11463: PUSH
11464: LD_INT 117
11466: PUSH
11467: LD_INT 118
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: ST_TO_ADDR
11487: GO 12118
11489: LD_INT 17
11491: DOUBLE
11492: EQUAL
11493: IFTRUE 11497
11495: GO 11721
11497: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11498: LD_ADDR_VAR 0 2
11502: PUSH
11503: LD_INT 1
11505: PUSH
11506: LD_INT 2
11508: PUSH
11509: LD_INT 3
11511: PUSH
11512: LD_INT 4
11514: PUSH
11515: LD_INT 5
11517: PUSH
11518: LD_INT 6
11520: PUSH
11521: LD_INT 7
11523: PUSH
11524: LD_INT 8
11526: PUSH
11527: LD_INT 9
11529: PUSH
11530: LD_INT 10
11532: PUSH
11533: LD_INT 11
11535: PUSH
11536: LD_INT 12
11538: PUSH
11539: LD_INT 13
11541: PUSH
11542: LD_INT 14
11544: PUSH
11545: LD_INT 15
11547: PUSH
11548: LD_INT 16
11550: PUSH
11551: LD_INT 17
11553: PUSH
11554: LD_INT 18
11556: PUSH
11557: LD_INT 19
11559: PUSH
11560: LD_INT 20
11562: PUSH
11563: LD_INT 21
11565: PUSH
11566: LD_INT 22
11568: PUSH
11569: LD_INT 23
11571: PUSH
11572: LD_INT 24
11574: PUSH
11575: LD_INT 25
11577: PUSH
11578: LD_INT 26
11580: PUSH
11581: LD_INT 27
11583: PUSH
11584: LD_INT 28
11586: PUSH
11587: LD_INT 29
11589: PUSH
11590: LD_INT 30
11592: PUSH
11593: LD_INT 31
11595: PUSH
11596: LD_INT 32
11598: PUSH
11599: LD_INT 33
11601: PUSH
11602: LD_INT 34
11604: PUSH
11605: LD_INT 36
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: PUSH
11645: LD_INT 101
11647: PUSH
11648: LD_INT 102
11650: PUSH
11651: LD_INT 103
11653: PUSH
11654: LD_INT 104
11656: PUSH
11657: LD_INT 105
11659: PUSH
11660: LD_INT 106
11662: PUSH
11663: LD_INT 107
11665: PUSH
11666: LD_INT 108
11668: PUSH
11669: LD_INT 109
11671: PUSH
11672: LD_INT 110
11674: PUSH
11675: LD_INT 111
11677: PUSH
11678: LD_INT 112
11680: PUSH
11681: LD_INT 113
11683: PUSH
11684: LD_INT 114
11686: PUSH
11687: LD_INT 116
11689: PUSH
11690: LD_INT 117
11692: PUSH
11693: LD_INT 118
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: ST_TO_ADDR
11719: GO 12118
11721: LD_INT 18
11723: DOUBLE
11724: EQUAL
11725: IFTRUE 11729
11727: GO 11877
11729: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11730: LD_ADDR_VAR 0 2
11734: PUSH
11735: LD_INT 2
11737: PUSH
11738: LD_INT 4
11740: PUSH
11741: LD_INT 5
11743: PUSH
11744: LD_INT 7
11746: PUSH
11747: LD_INT 11
11749: PUSH
11750: LD_INT 12
11752: PUSH
11753: LD_INT 15
11755: PUSH
11756: LD_INT 16
11758: PUSH
11759: LD_INT 20
11761: PUSH
11762: LD_INT 21
11764: PUSH
11765: LD_INT 22
11767: PUSH
11768: LD_INT 23
11770: PUSH
11771: LD_INT 25
11773: PUSH
11774: LD_INT 26
11776: PUSH
11777: LD_INT 30
11779: PUSH
11780: LD_INT 31
11782: PUSH
11783: LD_INT 32
11785: PUSH
11786: LD_INT 33
11788: PUSH
11789: LD_INT 34
11791: PUSH
11792: LD_INT 35
11794: PUSH
11795: LD_INT 36
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 101
11823: PUSH
11824: LD_INT 102
11826: PUSH
11827: LD_INT 103
11829: PUSH
11830: LD_INT 106
11832: PUSH
11833: LD_INT 108
11835: PUSH
11836: LD_INT 112
11838: PUSH
11839: LD_INT 113
11841: PUSH
11842: LD_INT 114
11844: PUSH
11845: LD_INT 115
11847: PUSH
11848: LD_INT 116
11850: PUSH
11851: LD_INT 117
11853: PUSH
11854: LD_INT 118
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: ST_TO_ADDR
11875: GO 12118
11877: LD_INT 19
11879: DOUBLE
11880: EQUAL
11881: IFTRUE 11885
11883: GO 12117
11885: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11886: LD_ADDR_VAR 0 2
11890: PUSH
11891: LD_INT 1
11893: PUSH
11894: LD_INT 2
11896: PUSH
11897: LD_INT 3
11899: PUSH
11900: LD_INT 4
11902: PUSH
11903: LD_INT 5
11905: PUSH
11906: LD_INT 6
11908: PUSH
11909: LD_INT 7
11911: PUSH
11912: LD_INT 8
11914: PUSH
11915: LD_INT 9
11917: PUSH
11918: LD_INT 10
11920: PUSH
11921: LD_INT 11
11923: PUSH
11924: LD_INT 12
11926: PUSH
11927: LD_INT 13
11929: PUSH
11930: LD_INT 14
11932: PUSH
11933: LD_INT 15
11935: PUSH
11936: LD_INT 16
11938: PUSH
11939: LD_INT 17
11941: PUSH
11942: LD_INT 18
11944: PUSH
11945: LD_INT 19
11947: PUSH
11948: LD_INT 20
11950: PUSH
11951: LD_INT 21
11953: PUSH
11954: LD_INT 22
11956: PUSH
11957: LD_INT 23
11959: PUSH
11960: LD_INT 24
11962: PUSH
11963: LD_INT 25
11965: PUSH
11966: LD_INT 26
11968: PUSH
11969: LD_INT 27
11971: PUSH
11972: LD_INT 28
11974: PUSH
11975: LD_INT 29
11977: PUSH
11978: LD_INT 30
11980: PUSH
11981: LD_INT 31
11983: PUSH
11984: LD_INT 32
11986: PUSH
11987: LD_INT 33
11989: PUSH
11990: LD_INT 34
11992: PUSH
11993: LD_INT 35
11995: PUSH
11996: LD_INT 36
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: PUSH
12037: LD_INT 101
12039: PUSH
12040: LD_INT 102
12042: PUSH
12043: LD_INT 103
12045: PUSH
12046: LD_INT 104
12048: PUSH
12049: LD_INT 105
12051: PUSH
12052: LD_INT 106
12054: PUSH
12055: LD_INT 107
12057: PUSH
12058: LD_INT 108
12060: PUSH
12061: LD_INT 109
12063: PUSH
12064: LD_INT 110
12066: PUSH
12067: LD_INT 111
12069: PUSH
12070: LD_INT 112
12072: PUSH
12073: LD_INT 113
12075: PUSH
12076: LD_INT 114
12078: PUSH
12079: LD_INT 115
12081: PUSH
12082: LD_INT 116
12084: PUSH
12085: LD_INT 117
12087: PUSH
12088: LD_INT 118
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: ST_TO_ADDR
12115: GO 12118
12117: POP
// end else
12118: GO 12349
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12120: LD_ADDR_VAR 0 2
12124: PUSH
12125: LD_INT 1
12127: PUSH
12128: LD_INT 2
12130: PUSH
12131: LD_INT 3
12133: PUSH
12134: LD_INT 4
12136: PUSH
12137: LD_INT 5
12139: PUSH
12140: LD_INT 6
12142: PUSH
12143: LD_INT 7
12145: PUSH
12146: LD_INT 8
12148: PUSH
12149: LD_INT 9
12151: PUSH
12152: LD_INT 10
12154: PUSH
12155: LD_INT 11
12157: PUSH
12158: LD_INT 12
12160: PUSH
12161: LD_INT 13
12163: PUSH
12164: LD_INT 14
12166: PUSH
12167: LD_INT 15
12169: PUSH
12170: LD_INT 16
12172: PUSH
12173: LD_INT 17
12175: PUSH
12176: LD_INT 18
12178: PUSH
12179: LD_INT 19
12181: PUSH
12182: LD_INT 20
12184: PUSH
12185: LD_INT 21
12187: PUSH
12188: LD_INT 22
12190: PUSH
12191: LD_INT 23
12193: PUSH
12194: LD_INT 24
12196: PUSH
12197: LD_INT 25
12199: PUSH
12200: LD_INT 26
12202: PUSH
12203: LD_INT 27
12205: PUSH
12206: LD_INT 28
12208: PUSH
12209: LD_INT 29
12211: PUSH
12212: LD_INT 30
12214: PUSH
12215: LD_INT 31
12217: PUSH
12218: LD_INT 32
12220: PUSH
12221: LD_INT 33
12223: PUSH
12224: LD_INT 34
12226: PUSH
12227: LD_INT 35
12229: PUSH
12230: LD_INT 36
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: PUSH
12271: LD_INT 101
12273: PUSH
12274: LD_INT 102
12276: PUSH
12277: LD_INT 103
12279: PUSH
12280: LD_INT 104
12282: PUSH
12283: LD_INT 105
12285: PUSH
12286: LD_INT 106
12288: PUSH
12289: LD_INT 107
12291: PUSH
12292: LD_INT 108
12294: PUSH
12295: LD_INT 109
12297: PUSH
12298: LD_INT 110
12300: PUSH
12301: LD_INT 111
12303: PUSH
12304: LD_INT 112
12306: PUSH
12307: LD_INT 113
12309: PUSH
12310: LD_INT 114
12312: PUSH
12313: LD_INT 115
12315: PUSH
12316: LD_INT 116
12318: PUSH
12319: LD_INT 117
12321: PUSH
12322: LD_INT 118
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: ST_TO_ADDR
// if result then
12349: LD_VAR 0 2
12353: IFFALSE 13139
// begin normal :=  ;
12355: LD_ADDR_VAR 0 5
12359: PUSH
12360: LD_STRING 
12362: ST_TO_ADDR
// hardcore :=  ;
12363: LD_ADDR_VAR 0 6
12367: PUSH
12368: LD_STRING 
12370: ST_TO_ADDR
// active :=  ;
12371: LD_ADDR_VAR 0 7
12375: PUSH
12376: LD_STRING 
12378: ST_TO_ADDR
// for i = 1 to normalCounter do
12379: LD_ADDR_VAR 0 8
12383: PUSH
12384: DOUBLE
12385: LD_INT 1
12387: DEC
12388: ST_TO_ADDR
12389: LD_EXP 25
12393: PUSH
12394: FOR_TO
12395: IFFALSE 12496
// begin tmp := 0 ;
12397: LD_ADDR_VAR 0 3
12401: PUSH
12402: LD_STRING 0
12404: ST_TO_ADDR
// if result [ 1 ] then
12405: LD_VAR 0 2
12409: PUSH
12410: LD_INT 1
12412: ARRAY
12413: IFFALSE 12478
// if result [ 1 ] [ 1 ] = i then
12415: LD_VAR 0 2
12419: PUSH
12420: LD_INT 1
12422: ARRAY
12423: PUSH
12424: LD_INT 1
12426: ARRAY
12427: PUSH
12428: LD_VAR 0 8
12432: EQUAL
12433: IFFALSE 12478
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12435: LD_ADDR_VAR 0 2
12439: PUSH
12440: LD_VAR 0 2
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: LD_VAR 0 2
12452: PUSH
12453: LD_INT 1
12455: ARRAY
12456: PPUSH
12457: LD_INT 1
12459: PPUSH
12460: CALL_OW 3
12464: PPUSH
12465: CALL_OW 1
12469: ST_TO_ADDR
// tmp := 1 ;
12470: LD_ADDR_VAR 0 3
12474: PUSH
12475: LD_STRING 1
12477: ST_TO_ADDR
// end ; normal := normal & tmp ;
12478: LD_ADDR_VAR 0 5
12482: PUSH
12483: LD_VAR 0 5
12487: PUSH
12488: LD_VAR 0 3
12492: STR
12493: ST_TO_ADDR
// end ;
12494: GO 12394
12496: POP
12497: POP
// for i = 1 to hardcoreCounter do
12498: LD_ADDR_VAR 0 8
12502: PUSH
12503: DOUBLE
12504: LD_INT 1
12506: DEC
12507: ST_TO_ADDR
12508: LD_EXP 26
12512: PUSH
12513: FOR_TO
12514: IFFALSE 12619
// begin tmp := 0 ;
12516: LD_ADDR_VAR 0 3
12520: PUSH
12521: LD_STRING 0
12523: ST_TO_ADDR
// if result [ 2 ] then
12524: LD_VAR 0 2
12528: PUSH
12529: LD_INT 2
12531: ARRAY
12532: IFFALSE 12601
// if result [ 2 ] [ 1 ] = 100 + i then
12534: LD_VAR 0 2
12538: PUSH
12539: LD_INT 2
12541: ARRAY
12542: PUSH
12543: LD_INT 1
12545: ARRAY
12546: PUSH
12547: LD_INT 100
12549: PUSH
12550: LD_VAR 0 8
12554: PLUS
12555: EQUAL
12556: IFFALSE 12601
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12558: LD_ADDR_VAR 0 2
12562: PUSH
12563: LD_VAR 0 2
12567: PPUSH
12568: LD_INT 2
12570: PPUSH
12571: LD_VAR 0 2
12575: PUSH
12576: LD_INT 2
12578: ARRAY
12579: PPUSH
12580: LD_INT 1
12582: PPUSH
12583: CALL_OW 3
12587: PPUSH
12588: CALL_OW 1
12592: ST_TO_ADDR
// tmp := 1 ;
12593: LD_ADDR_VAR 0 3
12597: PUSH
12598: LD_STRING 1
12600: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12601: LD_ADDR_VAR 0 6
12605: PUSH
12606: LD_VAR 0 6
12610: PUSH
12611: LD_VAR 0 3
12615: STR
12616: ST_TO_ADDR
// end ;
12617: GO 12513
12619: POP
12620: POP
// if isGameLoad then
12621: LD_VAR 0 1
12625: IFFALSE 13100
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12627: LD_ADDR_VAR 0 4
12631: PUSH
12632: LD_EXP 29
12636: PUSH
12637: LD_EXP 28
12641: PUSH
12642: LD_EXP 30
12646: PUSH
12647: LD_EXP 27
12651: PUSH
12652: LD_EXP 31
12656: PUSH
12657: LD_EXP 32
12661: PUSH
12662: LD_EXP 33
12666: PUSH
12667: LD_EXP 34
12671: PUSH
12672: LD_EXP 35
12676: PUSH
12677: LD_EXP 36
12681: PUSH
12682: LD_EXP 37
12686: PUSH
12687: LD_EXP 38
12691: PUSH
12692: LD_EXP 39
12696: PUSH
12697: LD_EXP 40
12701: PUSH
12702: LD_EXP 48
12706: PUSH
12707: LD_EXP 49
12711: PUSH
12712: LD_EXP 50
12716: PUSH
12717: LD_EXP 51
12721: PUSH
12722: LD_EXP 53
12726: PUSH
12727: LD_EXP 54
12731: PUSH
12732: LD_EXP 55
12736: PUSH
12737: LD_EXP 58
12741: PUSH
12742: LD_EXP 60
12746: PUSH
12747: LD_EXP 61
12751: PUSH
12752: LD_EXP 62
12756: PUSH
12757: LD_EXP 64
12761: PUSH
12762: LD_EXP 65
12766: PUSH
12767: LD_EXP 68
12771: PUSH
12772: LD_EXP 69
12776: PUSH
12777: LD_EXP 70
12781: PUSH
12782: LD_EXP 71
12786: PUSH
12787: LD_EXP 72
12791: PUSH
12792: LD_EXP 73
12796: PUSH
12797: LD_EXP 74
12801: PUSH
12802: LD_EXP 75
12806: PUSH
12807: LD_EXP 76
12811: PUSH
12812: LD_EXP 41
12816: PUSH
12817: LD_EXP 42
12821: PUSH
12822: LD_EXP 45
12826: PUSH
12827: LD_EXP 46
12831: PUSH
12832: LD_EXP 47
12836: PUSH
12837: LD_EXP 43
12841: PUSH
12842: LD_EXP 44
12846: PUSH
12847: LD_EXP 52
12851: PUSH
12852: LD_EXP 56
12856: PUSH
12857: LD_EXP 57
12861: PUSH
12862: LD_EXP 59
12866: PUSH
12867: LD_EXP 63
12871: PUSH
12872: LD_EXP 66
12876: PUSH
12877: LD_EXP 67
12881: PUSH
12882: LD_EXP 77
12886: PUSH
12887: LD_EXP 78
12891: PUSH
12892: LD_EXP 79
12896: PUSH
12897: LD_EXP 80
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: ST_TO_ADDR
// tmp :=  ;
12958: LD_ADDR_VAR 0 3
12962: PUSH
12963: LD_STRING 
12965: ST_TO_ADDR
// for i = 1 to normalCounter do
12966: LD_ADDR_VAR 0 8
12970: PUSH
12971: DOUBLE
12972: LD_INT 1
12974: DEC
12975: ST_TO_ADDR
12976: LD_EXP 25
12980: PUSH
12981: FOR_TO
12982: IFFALSE 13018
// begin if flags [ i ] then
12984: LD_VAR 0 4
12988: PUSH
12989: LD_VAR 0 8
12993: ARRAY
12994: IFFALSE 13016
// tmp := tmp & i & ; ;
12996: LD_ADDR_VAR 0 3
13000: PUSH
13001: LD_VAR 0 3
13005: PUSH
13006: LD_VAR 0 8
13010: STR
13011: PUSH
13012: LD_STRING ;
13014: STR
13015: ST_TO_ADDR
// end ;
13016: GO 12981
13018: POP
13019: POP
// for i = 1 to hardcoreCounter do
13020: LD_ADDR_VAR 0 8
13024: PUSH
13025: DOUBLE
13026: LD_INT 1
13028: DEC
13029: ST_TO_ADDR
13030: LD_EXP 26
13034: PUSH
13035: FOR_TO
13036: IFFALSE 13082
// begin if flags [ normalCounter + i ] then
13038: LD_VAR 0 4
13042: PUSH
13043: LD_EXP 25
13047: PUSH
13048: LD_VAR 0 8
13052: PLUS
13053: ARRAY
13054: IFFALSE 13080
// tmp := tmp & ( 100 + i ) & ; ;
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: LD_VAR 0 3
13065: PUSH
13066: LD_INT 100
13068: PUSH
13069: LD_VAR 0 8
13073: PLUS
13074: STR
13075: PUSH
13076: LD_STRING ;
13078: STR
13079: ST_TO_ADDR
// end ;
13080: GO 13035
13082: POP
13083: POP
// if tmp then
13084: LD_VAR 0 3
13088: IFFALSE 13100
// active := tmp ;
13090: LD_ADDR_VAR 0 7
13094: PUSH
13095: LD_VAR 0 3
13099: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13100: LD_STRING getStreamItemsFromMission("
13102: PUSH
13103: LD_VAR 0 5
13107: STR
13108: PUSH
13109: LD_STRING ","
13111: STR
13112: PUSH
13113: LD_VAR 0 6
13117: STR
13118: PUSH
13119: LD_STRING ","
13121: STR
13122: PUSH
13123: LD_VAR 0 7
13127: STR
13128: PUSH
13129: LD_STRING ")
13131: STR
13132: PPUSH
13133: CALL_OW 559
// end else
13137: GO 13146
// ToLua ( getStreamItemsFromMission("","","") ) ;
13139: LD_STRING getStreamItemsFromMission("","","")
13141: PPUSH
13142: CALL_OW 559
// end ;
13146: LD_VAR 0 2
13150: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13151: LD_EXP 24
13155: PUSH
13156: LD_EXP 29
13160: AND
13161: IFFALSE 13285
13163: GO 13165
13165: DISABLE
13166: LD_INT 0
13168: PPUSH
13169: PPUSH
// begin enable ;
13170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13171: LD_ADDR_VAR 0 2
13175: PUSH
13176: LD_INT 22
13178: PUSH
13179: LD_OWVAR 2
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 2
13190: PUSH
13191: LD_INT 34
13193: PUSH
13194: LD_INT 7
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PUSH
13201: LD_INT 34
13203: PUSH
13204: LD_INT 45
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: LD_INT 34
13213: PUSH
13214: LD_INT 28
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 34
13223: PUSH
13224: LD_INT 47
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PPUSH
13242: CALL_OW 69
13246: ST_TO_ADDR
// if not tmp then
13247: LD_VAR 0 2
13251: NOT
13252: IFFALSE 13256
// exit ;
13254: GO 13285
// for i in tmp do
13256: LD_ADDR_VAR 0 1
13260: PUSH
13261: LD_VAR 0 2
13265: PUSH
13266: FOR_IN
13267: IFFALSE 13283
// begin SetLives ( i , 0 ) ;
13269: LD_VAR 0 1
13273: PPUSH
13274: LD_INT 0
13276: PPUSH
13277: CALL_OW 234
// end ;
13281: GO 13266
13283: POP
13284: POP
// end ;
13285: PPOPN 2
13287: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13288: LD_EXP 24
13292: PUSH
13293: LD_EXP 30
13297: AND
13298: IFFALSE 13382
13300: GO 13302
13302: DISABLE
13303: LD_INT 0
13305: PPUSH
13306: PPUSH
// begin enable ;
13307: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13308: LD_ADDR_VAR 0 2
13312: PUSH
13313: LD_INT 22
13315: PUSH
13316: LD_OWVAR 2
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PUSH
13325: LD_INT 32
13327: PUSH
13328: LD_INT 3
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PPUSH
13339: CALL_OW 69
13343: ST_TO_ADDR
// if not tmp then
13344: LD_VAR 0 2
13348: NOT
13349: IFFALSE 13353
// exit ;
13351: GO 13382
// for i in tmp do
13353: LD_ADDR_VAR 0 1
13357: PUSH
13358: LD_VAR 0 2
13362: PUSH
13363: FOR_IN
13364: IFFALSE 13380
// begin SetLives ( i , 0 ) ;
13366: LD_VAR 0 1
13370: PPUSH
13371: LD_INT 0
13373: PPUSH
13374: CALL_OW 234
// end ;
13378: GO 13363
13380: POP
13381: POP
// end ;
13382: PPOPN 2
13384: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13385: LD_EXP 24
13389: PUSH
13390: LD_EXP 27
13394: AND
13395: IFFALSE 13488
13397: GO 13399
13399: DISABLE
13400: LD_INT 0
13402: PPUSH
// begin enable ;
13403: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13404: LD_ADDR_VAR 0 1
13408: PUSH
13409: LD_INT 22
13411: PUSH
13412: LD_OWVAR 2
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PUSH
13421: LD_INT 2
13423: PUSH
13424: LD_INT 25
13426: PUSH
13427: LD_INT 5
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 25
13436: PUSH
13437: LD_INT 9
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 25
13446: PUSH
13447: LD_INT 8
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PPUSH
13464: CALL_OW 69
13468: PUSH
13469: FOR_IN
13470: IFFALSE 13486
// begin SetClass ( i , 1 ) ;
13472: LD_VAR 0 1
13476: PPUSH
13477: LD_INT 1
13479: PPUSH
13480: CALL_OW 336
// end ;
13484: GO 13469
13486: POP
13487: POP
// end ;
13488: PPOPN 1
13490: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13491: LD_EXP 24
13495: PUSH
13496: LD_EXP 28
13500: AND
13501: PUSH
13502: LD_OWVAR 65
13506: PUSH
13507: LD_INT 7
13509: LESS
13510: AND
13511: IFFALSE 13525
13513: GO 13515
13515: DISABLE
// begin enable ;
13516: ENABLE
// game_speed := 7 ;
13517: LD_ADDR_OWVAR 65
13521: PUSH
13522: LD_INT 7
13524: ST_TO_ADDR
// end ;
13525: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13526: LD_EXP 24
13530: PUSH
13531: LD_EXP 31
13535: AND
13536: IFFALSE 13738
13538: GO 13540
13540: DISABLE
13541: LD_INT 0
13543: PPUSH
13544: PPUSH
13545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13546: LD_ADDR_VAR 0 3
13550: PUSH
13551: LD_INT 81
13553: PUSH
13554: LD_OWVAR 2
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: PUSH
13563: LD_INT 21
13565: PUSH
13566: LD_INT 1
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PPUSH
13577: CALL_OW 69
13581: ST_TO_ADDR
// if not tmp then
13582: LD_VAR 0 3
13586: NOT
13587: IFFALSE 13591
// exit ;
13589: GO 13738
// if tmp > 5 then
13591: LD_VAR 0 3
13595: PUSH
13596: LD_INT 5
13598: GREATER
13599: IFFALSE 13611
// k := 5 else
13601: LD_ADDR_VAR 0 2
13605: PUSH
13606: LD_INT 5
13608: ST_TO_ADDR
13609: GO 13621
// k := tmp ;
13611: LD_ADDR_VAR 0 2
13615: PUSH
13616: LD_VAR 0 3
13620: ST_TO_ADDR
// for i := 1 to k do
13621: LD_ADDR_VAR 0 1
13625: PUSH
13626: DOUBLE
13627: LD_INT 1
13629: DEC
13630: ST_TO_ADDR
13631: LD_VAR 0 2
13635: PUSH
13636: FOR_TO
13637: IFFALSE 13736
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13639: LD_VAR 0 3
13643: PUSH
13644: LD_VAR 0 1
13648: ARRAY
13649: PPUSH
13650: LD_VAR 0 1
13654: PUSH
13655: LD_INT 4
13657: MOD
13658: PUSH
13659: LD_INT 1
13661: PLUS
13662: PPUSH
13663: CALL_OW 259
13667: PUSH
13668: LD_INT 10
13670: LESS
13671: IFFALSE 13734
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13673: LD_VAR 0 3
13677: PUSH
13678: LD_VAR 0 1
13682: ARRAY
13683: PPUSH
13684: LD_VAR 0 1
13688: PUSH
13689: LD_INT 4
13691: MOD
13692: PUSH
13693: LD_INT 1
13695: PLUS
13696: PPUSH
13697: LD_VAR 0 3
13701: PUSH
13702: LD_VAR 0 1
13706: ARRAY
13707: PPUSH
13708: LD_VAR 0 1
13712: PUSH
13713: LD_INT 4
13715: MOD
13716: PUSH
13717: LD_INT 1
13719: PLUS
13720: PPUSH
13721: CALL_OW 259
13725: PUSH
13726: LD_INT 1
13728: PLUS
13729: PPUSH
13730: CALL_OW 237
13734: GO 13636
13736: POP
13737: POP
// end ;
13738: PPOPN 3
13740: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13741: LD_EXP 24
13745: PUSH
13746: LD_EXP 32
13750: AND
13751: IFFALSE 13771
13753: GO 13755
13755: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13756: LD_INT 4
13758: PPUSH
13759: LD_OWVAR 2
13763: PPUSH
13764: LD_INT 0
13766: PPUSH
13767: CALL_OW 324
13771: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13772: LD_EXP 24
13776: PUSH
13777: LD_EXP 61
13781: AND
13782: IFFALSE 13802
13784: GO 13786
13786: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13787: LD_INT 19
13789: PPUSH
13790: LD_OWVAR 2
13794: PPUSH
13795: LD_INT 0
13797: PPUSH
13798: CALL_OW 324
13802: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13803: LD_EXP 24
13807: PUSH
13808: LD_EXP 33
13812: AND
13813: IFFALSE 13915
13815: GO 13817
13817: DISABLE
13818: LD_INT 0
13820: PPUSH
13821: PPUSH
// begin enable ;
13822: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13823: LD_ADDR_VAR 0 2
13827: PUSH
13828: LD_INT 22
13830: PUSH
13831: LD_OWVAR 2
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PUSH
13840: LD_INT 2
13842: PUSH
13843: LD_INT 34
13845: PUSH
13846: LD_INT 11
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: LD_INT 34
13855: PUSH
13856: LD_INT 30
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PPUSH
13872: CALL_OW 69
13876: ST_TO_ADDR
// if not tmp then
13877: LD_VAR 0 2
13881: NOT
13882: IFFALSE 13886
// exit ;
13884: GO 13915
// for i in tmp do
13886: LD_ADDR_VAR 0 1
13890: PUSH
13891: LD_VAR 0 2
13895: PUSH
13896: FOR_IN
13897: IFFALSE 13913
// begin SetLives ( i , 0 ) ;
13899: LD_VAR 0 1
13903: PPUSH
13904: LD_INT 0
13906: PPUSH
13907: CALL_OW 234
// end ;
13911: GO 13896
13913: POP
13914: POP
// end ;
13915: PPOPN 2
13917: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13918: LD_EXP 24
13922: PUSH
13923: LD_EXP 34
13927: AND
13928: IFFALSE 13948
13930: GO 13932
13932: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13933: LD_INT 32
13935: PPUSH
13936: LD_OWVAR 2
13940: PPUSH
13941: LD_INT 0
13943: PPUSH
13944: CALL_OW 324
13948: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13949: LD_EXP 24
13953: PUSH
13954: LD_EXP 35
13958: AND
13959: IFFALSE 14140
13961: GO 13963
13963: DISABLE
13964: LD_INT 0
13966: PPUSH
13967: PPUSH
13968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13969: LD_ADDR_VAR 0 2
13973: PUSH
13974: LD_INT 22
13976: PUSH
13977: LD_OWVAR 2
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PUSH
13986: LD_INT 33
13988: PUSH
13989: LD_INT 3
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PPUSH
14000: CALL_OW 69
14004: ST_TO_ADDR
// if not tmp then
14005: LD_VAR 0 2
14009: NOT
14010: IFFALSE 14014
// exit ;
14012: GO 14140
// side := 0 ;
14014: LD_ADDR_VAR 0 3
14018: PUSH
14019: LD_INT 0
14021: ST_TO_ADDR
// for i := 1 to 8 do
14022: LD_ADDR_VAR 0 1
14026: PUSH
14027: DOUBLE
14028: LD_INT 1
14030: DEC
14031: ST_TO_ADDR
14032: LD_INT 8
14034: PUSH
14035: FOR_TO
14036: IFFALSE 14084
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14038: LD_OWVAR 2
14042: PUSH
14043: LD_VAR 0 1
14047: NONEQUAL
14048: PUSH
14049: LD_OWVAR 2
14053: PPUSH
14054: LD_VAR 0 1
14058: PPUSH
14059: CALL_OW 81
14063: PUSH
14064: LD_INT 2
14066: EQUAL
14067: AND
14068: IFFALSE 14082
// begin side := i ;
14070: LD_ADDR_VAR 0 3
14074: PUSH
14075: LD_VAR 0 1
14079: ST_TO_ADDR
// break ;
14080: GO 14084
// end ;
14082: GO 14035
14084: POP
14085: POP
// if not side then
14086: LD_VAR 0 3
14090: NOT
14091: IFFALSE 14095
// exit ;
14093: GO 14140
// for i := 1 to tmp do
14095: LD_ADDR_VAR 0 1
14099: PUSH
14100: DOUBLE
14101: LD_INT 1
14103: DEC
14104: ST_TO_ADDR
14105: LD_VAR 0 2
14109: PUSH
14110: FOR_TO
14111: IFFALSE 14138
// if Prob ( 60 ) then
14113: LD_INT 60
14115: PPUSH
14116: CALL_OW 13
14120: IFFALSE 14136
// SetSide ( i , side ) ;
14122: LD_VAR 0 1
14126: PPUSH
14127: LD_VAR 0 3
14131: PPUSH
14132: CALL_OW 235
14136: GO 14110
14138: POP
14139: POP
// end ;
14140: PPOPN 3
14142: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14143: LD_EXP 24
14147: PUSH
14148: LD_EXP 37
14152: AND
14153: IFFALSE 14272
14155: GO 14157
14157: DISABLE
14158: LD_INT 0
14160: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14161: LD_ADDR_VAR 0 1
14165: PUSH
14166: LD_INT 22
14168: PUSH
14169: LD_OWVAR 2
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PUSH
14178: LD_INT 21
14180: PUSH
14181: LD_INT 1
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 3
14190: PUSH
14191: LD_INT 23
14193: PUSH
14194: LD_INT 0
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: LIST
14209: PPUSH
14210: CALL_OW 69
14214: PUSH
14215: FOR_IN
14216: IFFALSE 14270
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14218: LD_VAR 0 1
14222: PPUSH
14223: CALL_OW 257
14227: PUSH
14228: LD_INT 1
14230: PUSH
14231: LD_INT 2
14233: PUSH
14234: LD_INT 3
14236: PUSH
14237: LD_INT 4
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: IN
14246: IFFALSE 14268
// SetClass ( un , rand ( 1 , 4 ) ) ;
14248: LD_VAR 0 1
14252: PPUSH
14253: LD_INT 1
14255: PPUSH
14256: LD_INT 4
14258: PPUSH
14259: CALL_OW 12
14263: PPUSH
14264: CALL_OW 336
14268: GO 14215
14270: POP
14271: POP
// end ;
14272: PPOPN 1
14274: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14275: LD_EXP 24
14279: PUSH
14280: LD_EXP 36
14284: AND
14285: IFFALSE 14364
14287: GO 14289
14289: DISABLE
14290: LD_INT 0
14292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14293: LD_ADDR_VAR 0 1
14297: PUSH
14298: LD_INT 22
14300: PUSH
14301: LD_OWVAR 2
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 21
14312: PUSH
14313: LD_INT 3
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PPUSH
14324: CALL_OW 69
14328: ST_TO_ADDR
// if not tmp then
14329: LD_VAR 0 1
14333: NOT
14334: IFFALSE 14338
// exit ;
14336: GO 14364
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14338: LD_VAR 0 1
14342: PUSH
14343: LD_INT 1
14345: PPUSH
14346: LD_VAR 0 1
14350: PPUSH
14351: CALL_OW 12
14355: ARRAY
14356: PPUSH
14357: LD_INT 100
14359: PPUSH
14360: CALL_OW 234
// end ;
14364: PPOPN 1
14366: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14367: LD_EXP 24
14371: PUSH
14372: LD_EXP 38
14376: AND
14377: IFFALSE 14475
14379: GO 14381
14381: DISABLE
14382: LD_INT 0
14384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14385: LD_ADDR_VAR 0 1
14389: PUSH
14390: LD_INT 22
14392: PUSH
14393: LD_OWVAR 2
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PUSH
14402: LD_INT 21
14404: PUSH
14405: LD_INT 1
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PPUSH
14416: CALL_OW 69
14420: ST_TO_ADDR
// if not tmp then
14421: LD_VAR 0 1
14425: NOT
14426: IFFALSE 14430
// exit ;
14428: GO 14475
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14430: LD_VAR 0 1
14434: PUSH
14435: LD_INT 1
14437: PPUSH
14438: LD_VAR 0 1
14442: PPUSH
14443: CALL_OW 12
14447: ARRAY
14448: PPUSH
14449: LD_INT 1
14451: PPUSH
14452: LD_INT 4
14454: PPUSH
14455: CALL_OW 12
14459: PPUSH
14460: LD_INT 3000
14462: PPUSH
14463: LD_INT 9000
14465: PPUSH
14466: CALL_OW 12
14470: PPUSH
14471: CALL_OW 492
// end ;
14475: PPOPN 1
14477: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14478: LD_EXP 24
14482: PUSH
14483: LD_EXP 39
14487: AND
14488: IFFALSE 14508
14490: GO 14492
14492: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14493: LD_INT 1
14495: PPUSH
14496: LD_OWVAR 2
14500: PPUSH
14501: LD_INT 0
14503: PPUSH
14504: CALL_OW 324
14508: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14509: LD_EXP 24
14513: PUSH
14514: LD_EXP 40
14518: AND
14519: IFFALSE 14602
14521: GO 14523
14523: DISABLE
14524: LD_INT 0
14526: PPUSH
14527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14528: LD_ADDR_VAR 0 2
14532: PUSH
14533: LD_INT 22
14535: PUSH
14536: LD_OWVAR 2
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: LD_INT 21
14547: PUSH
14548: LD_INT 3
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PPUSH
14559: CALL_OW 69
14563: ST_TO_ADDR
// if not tmp then
14564: LD_VAR 0 2
14568: NOT
14569: IFFALSE 14573
// exit ;
14571: GO 14602
// for i in tmp do
14573: LD_ADDR_VAR 0 1
14577: PUSH
14578: LD_VAR 0 2
14582: PUSH
14583: FOR_IN
14584: IFFALSE 14600
// SetBLevel ( i , 10 ) ;
14586: LD_VAR 0 1
14590: PPUSH
14591: LD_INT 10
14593: PPUSH
14594: CALL_OW 241
14598: GO 14583
14600: POP
14601: POP
// end ;
14602: PPOPN 2
14604: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14605: LD_EXP 24
14609: PUSH
14610: LD_EXP 41
14614: AND
14615: IFFALSE 14726
14617: GO 14619
14619: DISABLE
14620: LD_INT 0
14622: PPUSH
14623: PPUSH
14624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14625: LD_ADDR_VAR 0 3
14629: PUSH
14630: LD_INT 22
14632: PUSH
14633: LD_OWVAR 2
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 25
14644: PUSH
14645: LD_INT 1
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PPUSH
14656: CALL_OW 69
14660: ST_TO_ADDR
// if not tmp then
14661: LD_VAR 0 3
14665: NOT
14666: IFFALSE 14670
// exit ;
14668: GO 14726
// un := tmp [ rand ( 1 , tmp ) ] ;
14670: LD_ADDR_VAR 0 2
14674: PUSH
14675: LD_VAR 0 3
14679: PUSH
14680: LD_INT 1
14682: PPUSH
14683: LD_VAR 0 3
14687: PPUSH
14688: CALL_OW 12
14692: ARRAY
14693: ST_TO_ADDR
// if Crawls ( un ) then
14694: LD_VAR 0 2
14698: PPUSH
14699: CALL_OW 318
14703: IFFALSE 14714
// ComWalk ( un ) ;
14705: LD_VAR 0 2
14709: PPUSH
14710: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14714: LD_VAR 0 2
14718: PPUSH
14719: LD_INT 5
14721: PPUSH
14722: CALL_OW 336
// end ;
14726: PPOPN 3
14728: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14729: LD_EXP 24
14733: PUSH
14734: LD_EXP 42
14738: AND
14739: PUSH
14740: LD_OWVAR 67
14744: PUSH
14745: LD_INT 4
14747: LESS
14748: AND
14749: IFFALSE 14768
14751: GO 14753
14753: DISABLE
// begin Difficulty := Difficulty + 1 ;
14754: LD_ADDR_OWVAR 67
14758: PUSH
14759: LD_OWVAR 67
14763: PUSH
14764: LD_INT 1
14766: PLUS
14767: ST_TO_ADDR
// end ;
14768: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14769: LD_EXP 24
14773: PUSH
14774: LD_EXP 43
14778: AND
14779: IFFALSE 14882
14781: GO 14783
14783: DISABLE
14784: LD_INT 0
14786: PPUSH
// begin for i := 1 to 5 do
14787: LD_ADDR_VAR 0 1
14791: PUSH
14792: DOUBLE
14793: LD_INT 1
14795: DEC
14796: ST_TO_ADDR
14797: LD_INT 5
14799: PUSH
14800: FOR_TO
14801: IFFALSE 14880
// begin uc_nation := nation_nature ;
14803: LD_ADDR_OWVAR 21
14807: PUSH
14808: LD_INT 0
14810: ST_TO_ADDR
// uc_side := 0 ;
14811: LD_ADDR_OWVAR 20
14815: PUSH
14816: LD_INT 0
14818: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14819: LD_ADDR_OWVAR 29
14823: PUSH
14824: LD_INT 12
14826: PUSH
14827: LD_INT 12
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: ST_TO_ADDR
// hc_agressivity := 20 ;
14834: LD_ADDR_OWVAR 35
14838: PUSH
14839: LD_INT 20
14841: ST_TO_ADDR
// hc_class := class_tiger ;
14842: LD_ADDR_OWVAR 28
14846: PUSH
14847: LD_INT 14
14849: ST_TO_ADDR
// hc_gallery :=  ;
14850: LD_ADDR_OWVAR 33
14854: PUSH
14855: LD_STRING 
14857: ST_TO_ADDR
// hc_name :=  ;
14858: LD_ADDR_OWVAR 26
14862: PUSH
14863: LD_STRING 
14865: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14866: CALL_OW 44
14870: PPUSH
14871: LD_INT 0
14873: PPUSH
14874: CALL_OW 51
// end ;
14878: GO 14800
14880: POP
14881: POP
// end ;
14882: PPOPN 1
14884: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14885: LD_EXP 24
14889: PUSH
14890: LD_EXP 44
14894: AND
14895: IFFALSE 14904
14897: GO 14899
14899: DISABLE
// StreamSibBomb ;
14900: CALL 14905 0 0
14904: END
// export function StreamSibBomb ; var i , x , y ; begin
14905: LD_INT 0
14907: PPUSH
14908: PPUSH
14909: PPUSH
14910: PPUSH
// result := false ;
14911: LD_ADDR_VAR 0 1
14915: PUSH
14916: LD_INT 0
14918: ST_TO_ADDR
// for i := 1 to 16 do
14919: LD_ADDR_VAR 0 2
14923: PUSH
14924: DOUBLE
14925: LD_INT 1
14927: DEC
14928: ST_TO_ADDR
14929: LD_INT 16
14931: PUSH
14932: FOR_TO
14933: IFFALSE 15132
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14935: LD_ADDR_VAR 0 3
14939: PUSH
14940: LD_INT 10
14942: PUSH
14943: LD_INT 20
14945: PUSH
14946: LD_INT 30
14948: PUSH
14949: LD_INT 40
14951: PUSH
14952: LD_INT 50
14954: PUSH
14955: LD_INT 60
14957: PUSH
14958: LD_INT 70
14960: PUSH
14961: LD_INT 80
14963: PUSH
14964: LD_INT 90
14966: PUSH
14967: LD_INT 100
14969: PUSH
14970: LD_INT 110
14972: PUSH
14973: LD_INT 120
14975: PUSH
14976: LD_INT 130
14978: PUSH
14979: LD_INT 140
14981: PUSH
14982: LD_INT 150
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 1
15004: PPUSH
15005: LD_INT 15
15007: PPUSH
15008: CALL_OW 12
15012: ARRAY
15013: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15014: LD_ADDR_VAR 0 4
15018: PUSH
15019: LD_INT 10
15021: PUSH
15022: LD_INT 20
15024: PUSH
15025: LD_INT 30
15027: PUSH
15028: LD_INT 40
15030: PUSH
15031: LD_INT 50
15033: PUSH
15034: LD_INT 60
15036: PUSH
15037: LD_INT 70
15039: PUSH
15040: LD_INT 80
15042: PUSH
15043: LD_INT 90
15045: PUSH
15046: LD_INT 100
15048: PUSH
15049: LD_INT 110
15051: PUSH
15052: LD_INT 120
15054: PUSH
15055: LD_INT 130
15057: PUSH
15058: LD_INT 140
15060: PUSH
15061: LD_INT 150
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 1
15083: PPUSH
15084: LD_INT 15
15086: PPUSH
15087: CALL_OW 12
15091: ARRAY
15092: ST_TO_ADDR
// if ValidHex ( x , y ) then
15093: LD_VAR 0 3
15097: PPUSH
15098: LD_VAR 0 4
15102: PPUSH
15103: CALL_OW 488
15107: IFFALSE 15130
// begin result := [ x , y ] ;
15109: LD_ADDR_VAR 0 1
15113: PUSH
15114: LD_VAR 0 3
15118: PUSH
15119: LD_VAR 0 4
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: ST_TO_ADDR
// break ;
15128: GO 15132
// end ; end ;
15130: GO 14932
15132: POP
15133: POP
// if result then
15134: LD_VAR 0 1
15138: IFFALSE 15198
// begin ToLua ( playSibBomb() ) ;
15140: LD_STRING playSibBomb()
15142: PPUSH
15143: CALL_OW 559
// wait ( 0 0$14 ) ;
15147: LD_INT 490
15149: PPUSH
15150: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15154: LD_VAR 0 1
15158: PUSH
15159: LD_INT 1
15161: ARRAY
15162: PPUSH
15163: LD_VAR 0 1
15167: PUSH
15168: LD_INT 2
15170: ARRAY
15171: PPUSH
15172: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15176: LD_VAR 0 1
15180: PUSH
15181: LD_INT 1
15183: ARRAY
15184: PPUSH
15185: LD_VAR 0 1
15189: PUSH
15190: LD_INT 2
15192: ARRAY
15193: PPUSH
15194: CALL_OW 429
// end ; end ;
15198: LD_VAR 0 1
15202: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15203: LD_EXP 24
15207: PUSH
15208: LD_EXP 46
15212: AND
15213: IFFALSE 15225
15215: GO 15217
15217: DISABLE
// YouLost (  ) ;
15218: LD_STRING 
15220: PPUSH
15221: CALL_OW 104
15225: END
// every 0 0$1 trigger StreamModeActive and sFog do
15226: LD_EXP 24
15230: PUSH
15231: LD_EXP 45
15235: AND
15236: IFFALSE 15250
15238: GO 15240
15240: DISABLE
// FogOff ( your_side ) ;
15241: LD_OWVAR 2
15245: PPUSH
15246: CALL_OW 344
15250: END
// every 0 0$1 trigger StreamModeActive and sSun do
15251: LD_EXP 24
15255: PUSH
15256: LD_EXP 47
15260: AND
15261: IFFALSE 15289
15263: GO 15265
15265: DISABLE
// begin solar_recharge_percent := 0 ;
15266: LD_ADDR_OWVAR 79
15270: PUSH
15271: LD_INT 0
15273: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15274: LD_INT 10500
15276: PPUSH
15277: CALL_OW 67
// solar_recharge_percent := 100 ;
15281: LD_ADDR_OWVAR 79
15285: PUSH
15286: LD_INT 100
15288: ST_TO_ADDR
// end ;
15289: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15290: LD_EXP 24
15294: PUSH
15295: LD_EXP 48
15299: AND
15300: IFFALSE 15539
15302: GO 15304
15304: DISABLE
15305: LD_INT 0
15307: PPUSH
15308: PPUSH
15309: PPUSH
// begin tmp := [ ] ;
15310: LD_ADDR_VAR 0 3
15314: PUSH
15315: EMPTY
15316: ST_TO_ADDR
// for i := 1 to 6 do
15317: LD_ADDR_VAR 0 1
15321: PUSH
15322: DOUBLE
15323: LD_INT 1
15325: DEC
15326: ST_TO_ADDR
15327: LD_INT 6
15329: PUSH
15330: FOR_TO
15331: IFFALSE 15436
// begin uc_nation := nation_nature ;
15333: LD_ADDR_OWVAR 21
15337: PUSH
15338: LD_INT 0
15340: ST_TO_ADDR
// uc_side := 0 ;
15341: LD_ADDR_OWVAR 20
15345: PUSH
15346: LD_INT 0
15348: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15349: LD_ADDR_OWVAR 29
15353: PUSH
15354: LD_INT 12
15356: PUSH
15357: LD_INT 12
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: ST_TO_ADDR
// hc_agressivity := 20 ;
15364: LD_ADDR_OWVAR 35
15368: PUSH
15369: LD_INT 20
15371: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15372: LD_ADDR_OWVAR 28
15376: PUSH
15377: LD_INT 17
15379: ST_TO_ADDR
// hc_gallery :=  ;
15380: LD_ADDR_OWVAR 33
15384: PUSH
15385: LD_STRING 
15387: ST_TO_ADDR
// hc_name :=  ;
15388: LD_ADDR_OWVAR 26
15392: PUSH
15393: LD_STRING 
15395: ST_TO_ADDR
// un := CreateHuman ;
15396: LD_ADDR_VAR 0 2
15400: PUSH
15401: CALL_OW 44
15405: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15406: LD_VAR 0 2
15410: PPUSH
15411: LD_INT 1
15413: PPUSH
15414: CALL_OW 51
// tmp := tmp ^ un ;
15418: LD_ADDR_VAR 0 3
15422: PUSH
15423: LD_VAR 0 3
15427: PUSH
15428: LD_VAR 0 2
15432: ADD
15433: ST_TO_ADDR
// end ;
15434: GO 15330
15436: POP
15437: POP
// repeat wait ( 0 0$1 ) ;
15438: LD_INT 35
15440: PPUSH
15441: CALL_OW 67
// for un in tmp do
15445: LD_ADDR_VAR 0 2
15449: PUSH
15450: LD_VAR 0 3
15454: PUSH
15455: FOR_IN
15456: IFFALSE 15530
// begin if IsDead ( un ) then
15458: LD_VAR 0 2
15462: PPUSH
15463: CALL_OW 301
15467: IFFALSE 15487
// begin tmp := tmp diff un ;
15469: LD_ADDR_VAR 0 3
15473: PUSH
15474: LD_VAR 0 3
15478: PUSH
15479: LD_VAR 0 2
15483: DIFF
15484: ST_TO_ADDR
// continue ;
15485: GO 15455
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15487: LD_VAR 0 2
15491: PPUSH
15492: LD_INT 3
15494: PUSH
15495: LD_INT 22
15497: PUSH
15498: LD_INT 0
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PPUSH
15509: CALL_OW 69
15513: PPUSH
15514: LD_VAR 0 2
15518: PPUSH
15519: CALL_OW 74
15523: PPUSH
15524: CALL_OW 115
// end ;
15528: GO 15455
15530: POP
15531: POP
// until not tmp ;
15532: LD_VAR 0 3
15536: NOT
15537: IFFALSE 15438
// end ;
15539: PPOPN 3
15541: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15542: LD_EXP 24
15546: PUSH
15547: LD_EXP 49
15551: AND
15552: IFFALSE 15606
15554: GO 15556
15556: DISABLE
// begin ToLua ( displayTroll(); ) ;
15557: LD_STRING displayTroll();
15559: PPUSH
15560: CALL_OW 559
// wait ( 3 3$00 ) ;
15564: LD_INT 6300
15566: PPUSH
15567: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15571: LD_STRING hideTroll();
15573: PPUSH
15574: CALL_OW 559
// wait ( 1 1$00 ) ;
15578: LD_INT 2100
15580: PPUSH
15581: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15585: LD_STRING displayTroll();
15587: PPUSH
15588: CALL_OW 559
// wait ( 1 1$00 ) ;
15592: LD_INT 2100
15594: PPUSH
15595: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15599: LD_STRING hideTroll();
15601: PPUSH
15602: CALL_OW 559
// end ;
15606: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15607: LD_EXP 24
15611: PUSH
15612: LD_EXP 50
15616: AND
15617: IFFALSE 15680
15619: GO 15621
15621: DISABLE
15622: LD_INT 0
15624: PPUSH
// begin p := 0 ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_INT 0
15632: ST_TO_ADDR
// repeat game_speed := 1 ;
15633: LD_ADDR_OWVAR 65
15637: PUSH
15638: LD_INT 1
15640: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15641: LD_INT 35
15643: PPUSH
15644: CALL_OW 67
// p := p + 1 ;
15648: LD_ADDR_VAR 0 1
15652: PUSH
15653: LD_VAR 0 1
15657: PUSH
15658: LD_INT 1
15660: PLUS
15661: ST_TO_ADDR
// until p >= 60 ;
15662: LD_VAR 0 1
15666: PUSH
15667: LD_INT 60
15669: GREATEREQUAL
15670: IFFALSE 15633
// game_speed := 4 ;
15672: LD_ADDR_OWVAR 65
15676: PUSH
15677: LD_INT 4
15679: ST_TO_ADDR
// end ;
15680: PPOPN 1
15682: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15683: LD_EXP 24
15687: PUSH
15688: LD_EXP 51
15692: AND
15693: IFFALSE 15839
15695: GO 15697
15697: DISABLE
15698: LD_INT 0
15700: PPUSH
15701: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15702: LD_ADDR_VAR 0 1
15706: PUSH
15707: LD_INT 22
15709: PUSH
15710: LD_OWVAR 2
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 2
15721: PUSH
15722: LD_INT 30
15724: PUSH
15725: LD_INT 0
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 30
15734: PUSH
15735: LD_INT 1
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: LIST
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PPUSH
15751: CALL_OW 69
15755: ST_TO_ADDR
// if not depot then
15756: LD_VAR 0 1
15760: NOT
15761: IFFALSE 15765
// exit ;
15763: GO 15839
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15765: LD_ADDR_VAR 0 2
15769: PUSH
15770: LD_VAR 0 1
15774: PUSH
15775: LD_INT 1
15777: PPUSH
15778: LD_VAR 0 1
15782: PPUSH
15783: CALL_OW 12
15787: ARRAY
15788: PPUSH
15789: CALL_OW 274
15793: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15794: LD_VAR 0 2
15798: PPUSH
15799: LD_INT 1
15801: PPUSH
15802: LD_INT 0
15804: PPUSH
15805: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15809: LD_VAR 0 2
15813: PPUSH
15814: LD_INT 2
15816: PPUSH
15817: LD_INT 0
15819: PPUSH
15820: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15824: LD_VAR 0 2
15828: PPUSH
15829: LD_INT 3
15831: PPUSH
15832: LD_INT 0
15834: PPUSH
15835: CALL_OW 277
// end ;
15839: PPOPN 2
15841: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15842: LD_EXP 24
15846: PUSH
15847: LD_EXP 52
15851: AND
15852: IFFALSE 15949
15854: GO 15856
15856: DISABLE
15857: LD_INT 0
15859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15860: LD_ADDR_VAR 0 1
15864: PUSH
15865: LD_INT 22
15867: PUSH
15868: LD_OWVAR 2
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: LD_INT 21
15879: PUSH
15880: LD_INT 1
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PUSH
15887: LD_INT 3
15889: PUSH
15890: LD_INT 23
15892: PUSH
15893: LD_INT 0
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: LIST
15908: PPUSH
15909: CALL_OW 69
15913: ST_TO_ADDR
// if not tmp then
15914: LD_VAR 0 1
15918: NOT
15919: IFFALSE 15923
// exit ;
15921: GO 15949
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15923: LD_VAR 0 1
15927: PUSH
15928: LD_INT 1
15930: PPUSH
15931: LD_VAR 0 1
15935: PPUSH
15936: CALL_OW 12
15940: ARRAY
15941: PPUSH
15942: LD_INT 200
15944: PPUSH
15945: CALL_OW 234
// end ;
15949: PPOPN 1
15951: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15952: LD_EXP 24
15956: PUSH
15957: LD_EXP 53
15961: AND
15962: IFFALSE 16041
15964: GO 15966
15966: DISABLE
15967: LD_INT 0
15969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15970: LD_ADDR_VAR 0 1
15974: PUSH
15975: LD_INT 22
15977: PUSH
15978: LD_OWVAR 2
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: LD_INT 21
15989: PUSH
15990: LD_INT 2
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PPUSH
16001: CALL_OW 69
16005: ST_TO_ADDR
// if not tmp then
16006: LD_VAR 0 1
16010: NOT
16011: IFFALSE 16015
// exit ;
16013: GO 16041
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16015: LD_VAR 0 1
16019: PUSH
16020: LD_INT 1
16022: PPUSH
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 12
16032: ARRAY
16033: PPUSH
16034: LD_INT 60
16036: PPUSH
16037: CALL_OW 234
// end ;
16041: PPOPN 1
16043: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16044: LD_EXP 24
16048: PUSH
16049: LD_EXP 54
16053: AND
16054: IFFALSE 16153
16056: GO 16058
16058: DISABLE
16059: LD_INT 0
16061: PPUSH
16062: PPUSH
// begin enable ;
16063: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16064: LD_ADDR_VAR 0 1
16068: PUSH
16069: LD_INT 22
16071: PUSH
16072: LD_OWVAR 2
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PUSH
16081: LD_INT 61
16083: PUSH
16084: EMPTY
16085: LIST
16086: PUSH
16087: LD_INT 33
16089: PUSH
16090: LD_INT 2
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: LIST
16101: PPUSH
16102: CALL_OW 69
16106: ST_TO_ADDR
// if not tmp then
16107: LD_VAR 0 1
16111: NOT
16112: IFFALSE 16116
// exit ;
16114: GO 16153
// for i in tmp do
16116: LD_ADDR_VAR 0 2
16120: PUSH
16121: LD_VAR 0 1
16125: PUSH
16126: FOR_IN
16127: IFFALSE 16151
// if IsControledBy ( i ) then
16129: LD_VAR 0 2
16133: PPUSH
16134: CALL_OW 312
16138: IFFALSE 16149
// ComUnlink ( i ) ;
16140: LD_VAR 0 2
16144: PPUSH
16145: CALL_OW 136
16149: GO 16126
16151: POP
16152: POP
// end ;
16153: PPOPN 2
16155: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16156: LD_EXP 24
16160: PUSH
16161: LD_EXP 55
16165: AND
16166: IFFALSE 16306
16168: GO 16170
16170: DISABLE
16171: LD_INT 0
16173: PPUSH
16174: PPUSH
// begin ToLua ( displayPowell(); ) ;
16175: LD_STRING displayPowell();
16177: PPUSH
16178: CALL_OW 559
// uc_side := 0 ;
16182: LD_ADDR_OWVAR 20
16186: PUSH
16187: LD_INT 0
16189: ST_TO_ADDR
// uc_nation := 2 ;
16190: LD_ADDR_OWVAR 21
16194: PUSH
16195: LD_INT 2
16197: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16198: LD_ADDR_OWVAR 37
16202: PUSH
16203: LD_INT 14
16205: ST_TO_ADDR
// vc_engine := engine_siberite ;
16206: LD_ADDR_OWVAR 39
16210: PUSH
16211: LD_INT 3
16213: ST_TO_ADDR
// vc_control := control_apeman ;
16214: LD_ADDR_OWVAR 38
16218: PUSH
16219: LD_INT 5
16221: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16222: LD_ADDR_OWVAR 40
16226: PUSH
16227: LD_INT 29
16229: ST_TO_ADDR
// un := CreateVehicle ;
16230: LD_ADDR_VAR 0 2
16234: PUSH
16235: CALL_OW 45
16239: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16240: LD_VAR 0 2
16244: PPUSH
16245: LD_INT 1
16247: PPUSH
16248: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16252: LD_INT 35
16254: PPUSH
16255: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16259: LD_VAR 0 2
16263: PPUSH
16264: LD_INT 22
16266: PUSH
16267: LD_OWVAR 2
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PPUSH
16276: CALL_OW 69
16280: PPUSH
16281: LD_VAR 0 2
16285: PPUSH
16286: CALL_OW 74
16290: PPUSH
16291: CALL_OW 115
// until IsDead ( un ) ;
16295: LD_VAR 0 2
16299: PPUSH
16300: CALL_OW 301
16304: IFFALSE 16252
// end ;
16306: PPOPN 2
16308: END
// every 0 0$1 trigger StreamModeActive and sStu do
16309: LD_EXP 24
16313: PUSH
16314: LD_EXP 63
16318: AND
16319: IFFALSE 16335
16321: GO 16323
16323: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16324: LD_STRING displayStucuk();
16326: PPUSH
16327: CALL_OW 559
// ResetFog ;
16331: CALL_OW 335
// end ;
16335: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16336: LD_EXP 24
16340: PUSH
16341: LD_EXP 56
16345: AND
16346: IFFALSE 16487
16348: GO 16350
16350: DISABLE
16351: LD_INT 0
16353: PPUSH
16354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16355: LD_ADDR_VAR 0 2
16359: PUSH
16360: LD_INT 22
16362: PUSH
16363: LD_OWVAR 2
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: LD_INT 21
16374: PUSH
16375: LD_INT 1
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PPUSH
16386: CALL_OW 69
16390: ST_TO_ADDR
// if not tmp then
16391: LD_VAR 0 2
16395: NOT
16396: IFFALSE 16400
// exit ;
16398: GO 16487
// un := tmp [ rand ( 1 , tmp ) ] ;
16400: LD_ADDR_VAR 0 1
16404: PUSH
16405: LD_VAR 0 2
16409: PUSH
16410: LD_INT 1
16412: PPUSH
16413: LD_VAR 0 2
16417: PPUSH
16418: CALL_OW 12
16422: ARRAY
16423: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16424: LD_VAR 0 1
16428: PPUSH
16429: LD_INT 0
16431: PPUSH
16432: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16436: LD_VAR 0 1
16440: PPUSH
16441: LD_OWVAR 3
16445: PUSH
16446: LD_VAR 0 1
16450: DIFF
16451: PPUSH
16452: LD_VAR 0 1
16456: PPUSH
16457: CALL_OW 74
16461: PPUSH
16462: CALL_OW 115
// wait ( 0 0$20 ) ;
16466: LD_INT 700
16468: PPUSH
16469: CALL_OW 67
// SetSide ( un , your_side ) ;
16473: LD_VAR 0 1
16477: PPUSH
16478: LD_OWVAR 2
16482: PPUSH
16483: CALL_OW 235
// end ;
16487: PPOPN 2
16489: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16490: LD_EXP 24
16494: PUSH
16495: LD_EXP 57
16499: AND
16500: IFFALSE 16606
16502: GO 16504
16504: DISABLE
16505: LD_INT 0
16507: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16508: LD_ADDR_VAR 0 1
16512: PUSH
16513: LD_INT 22
16515: PUSH
16516: LD_OWVAR 2
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 2
16527: PUSH
16528: LD_INT 30
16530: PUSH
16531: LD_INT 0
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 30
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: LIST
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PPUSH
16557: CALL_OW 69
16561: ST_TO_ADDR
// if not depot then
16562: LD_VAR 0 1
16566: NOT
16567: IFFALSE 16571
// exit ;
16569: GO 16606
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16571: LD_VAR 0 1
16575: PUSH
16576: LD_INT 1
16578: ARRAY
16579: PPUSH
16580: CALL_OW 250
16584: PPUSH
16585: LD_VAR 0 1
16589: PUSH
16590: LD_INT 1
16592: ARRAY
16593: PPUSH
16594: CALL_OW 251
16598: PPUSH
16599: LD_INT 70
16601: PPUSH
16602: CALL_OW 495
// end ;
16606: PPOPN 1
16608: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16609: LD_EXP 24
16613: PUSH
16614: LD_EXP 58
16618: AND
16619: IFFALSE 16830
16621: GO 16623
16623: DISABLE
16624: LD_INT 0
16626: PPUSH
16627: PPUSH
16628: PPUSH
16629: PPUSH
16630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16631: LD_ADDR_VAR 0 5
16635: PUSH
16636: LD_INT 22
16638: PUSH
16639: LD_OWVAR 2
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: LD_INT 21
16650: PUSH
16651: LD_INT 1
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PPUSH
16662: CALL_OW 69
16666: ST_TO_ADDR
// if not tmp then
16667: LD_VAR 0 5
16671: NOT
16672: IFFALSE 16676
// exit ;
16674: GO 16830
// for i in tmp do
16676: LD_ADDR_VAR 0 1
16680: PUSH
16681: LD_VAR 0 5
16685: PUSH
16686: FOR_IN
16687: IFFALSE 16828
// begin d := rand ( 0 , 5 ) ;
16689: LD_ADDR_VAR 0 4
16693: PUSH
16694: LD_INT 0
16696: PPUSH
16697: LD_INT 5
16699: PPUSH
16700: CALL_OW 12
16704: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16705: LD_ADDR_VAR 0 2
16709: PUSH
16710: LD_VAR 0 1
16714: PPUSH
16715: CALL_OW 250
16719: PPUSH
16720: LD_VAR 0 4
16724: PPUSH
16725: LD_INT 3
16727: PPUSH
16728: LD_INT 12
16730: PPUSH
16731: CALL_OW 12
16735: PPUSH
16736: CALL_OW 272
16740: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16741: LD_ADDR_VAR 0 3
16745: PUSH
16746: LD_VAR 0 1
16750: PPUSH
16751: CALL_OW 251
16755: PPUSH
16756: LD_VAR 0 4
16760: PPUSH
16761: LD_INT 3
16763: PPUSH
16764: LD_INT 12
16766: PPUSH
16767: CALL_OW 12
16771: PPUSH
16772: CALL_OW 273
16776: ST_TO_ADDR
// if ValidHex ( x , y ) then
16777: LD_VAR 0 2
16781: PPUSH
16782: LD_VAR 0 3
16786: PPUSH
16787: CALL_OW 488
16791: IFFALSE 16826
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16793: LD_VAR 0 1
16797: PPUSH
16798: LD_VAR 0 2
16802: PPUSH
16803: LD_VAR 0 3
16807: PPUSH
16808: LD_INT 3
16810: PPUSH
16811: LD_INT 6
16813: PPUSH
16814: CALL_OW 12
16818: PPUSH
16819: LD_INT 1
16821: PPUSH
16822: CALL_OW 483
// end ;
16826: GO 16686
16828: POP
16829: POP
// end ;
16830: PPOPN 5
16832: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16833: LD_EXP 24
16837: PUSH
16838: LD_EXP 59
16842: AND
16843: IFFALSE 16937
16845: GO 16847
16847: DISABLE
16848: LD_INT 0
16850: PPUSH
16851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16852: LD_ADDR_VAR 0 2
16856: PUSH
16857: LD_INT 22
16859: PUSH
16860: LD_OWVAR 2
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 32
16871: PUSH
16872: LD_INT 1
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 21
16881: PUSH
16882: LD_INT 2
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: LIST
16893: PPUSH
16894: CALL_OW 69
16898: ST_TO_ADDR
// if not tmp then
16899: LD_VAR 0 2
16903: NOT
16904: IFFALSE 16908
// exit ;
16906: GO 16937
// for i in tmp do
16908: LD_ADDR_VAR 0 1
16912: PUSH
16913: LD_VAR 0 2
16917: PUSH
16918: FOR_IN
16919: IFFALSE 16935
// SetFuel ( i , 0 ) ;
16921: LD_VAR 0 1
16925: PPUSH
16926: LD_INT 0
16928: PPUSH
16929: CALL_OW 240
16933: GO 16918
16935: POP
16936: POP
// end ;
16937: PPOPN 2
16939: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16940: LD_EXP 24
16944: PUSH
16945: LD_EXP 60
16949: AND
16950: IFFALSE 17016
16952: GO 16954
16954: DISABLE
16955: LD_INT 0
16957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16958: LD_ADDR_VAR 0 1
16962: PUSH
16963: LD_INT 22
16965: PUSH
16966: LD_OWVAR 2
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 30
16977: PUSH
16978: LD_INT 29
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PPUSH
16989: CALL_OW 69
16993: ST_TO_ADDR
// if not tmp then
16994: LD_VAR 0 1
16998: NOT
16999: IFFALSE 17003
// exit ;
17001: GO 17016
// DestroyUnit ( tmp [ 1 ] ) ;
17003: LD_VAR 0 1
17007: PUSH
17008: LD_INT 1
17010: ARRAY
17011: PPUSH
17012: CALL_OW 65
// end ;
17016: PPOPN 1
17018: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17019: LD_EXP 24
17023: PUSH
17024: LD_EXP 62
17028: AND
17029: IFFALSE 17158
17031: GO 17033
17033: DISABLE
17034: LD_INT 0
17036: PPUSH
// begin uc_side := 0 ;
17037: LD_ADDR_OWVAR 20
17041: PUSH
17042: LD_INT 0
17044: ST_TO_ADDR
// uc_nation := nation_arabian ;
17045: LD_ADDR_OWVAR 21
17049: PUSH
17050: LD_INT 2
17052: ST_TO_ADDR
// hc_gallery :=  ;
17053: LD_ADDR_OWVAR 33
17057: PUSH
17058: LD_STRING 
17060: ST_TO_ADDR
// hc_name :=  ;
17061: LD_ADDR_OWVAR 26
17065: PUSH
17066: LD_STRING 
17068: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17069: LD_INT 1
17071: PPUSH
17072: LD_INT 11
17074: PPUSH
17075: LD_INT 10
17077: PPUSH
17078: CALL_OW 380
// un := CreateHuman ;
17082: LD_ADDR_VAR 0 1
17086: PUSH
17087: CALL_OW 44
17091: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17092: LD_VAR 0 1
17096: PPUSH
17097: LD_INT 1
17099: PPUSH
17100: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17104: LD_INT 35
17106: PPUSH
17107: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17111: LD_VAR 0 1
17115: PPUSH
17116: LD_INT 22
17118: PUSH
17119: LD_OWVAR 2
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PPUSH
17128: CALL_OW 69
17132: PPUSH
17133: LD_VAR 0 1
17137: PPUSH
17138: CALL_OW 74
17142: PPUSH
17143: CALL_OW 115
// until IsDead ( un ) ;
17147: LD_VAR 0 1
17151: PPUSH
17152: CALL_OW 301
17156: IFFALSE 17104
// end ;
17158: PPOPN 1
17160: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17161: LD_EXP 24
17165: PUSH
17166: LD_EXP 64
17170: AND
17171: IFFALSE 17183
17173: GO 17175
17175: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17176: LD_STRING earthquake(getX(game), 0, 32)
17178: PPUSH
17179: CALL_OW 559
17183: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17184: LD_EXP 24
17188: PUSH
17189: LD_EXP 65
17193: AND
17194: IFFALSE 17285
17196: GO 17198
17198: DISABLE
17199: LD_INT 0
17201: PPUSH
// begin enable ;
17202: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17203: LD_ADDR_VAR 0 1
17207: PUSH
17208: LD_INT 22
17210: PUSH
17211: LD_OWVAR 2
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 21
17222: PUSH
17223: LD_INT 2
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 33
17232: PUSH
17233: LD_INT 3
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: PPUSH
17245: CALL_OW 69
17249: ST_TO_ADDR
// if not tmp then
17250: LD_VAR 0 1
17254: NOT
17255: IFFALSE 17259
// exit ;
17257: GO 17285
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17259: LD_VAR 0 1
17263: PUSH
17264: LD_INT 1
17266: PPUSH
17267: LD_VAR 0 1
17271: PPUSH
17272: CALL_OW 12
17276: ARRAY
17277: PPUSH
17278: LD_INT 1
17280: PPUSH
17281: CALL_OW 234
// end ;
17285: PPOPN 1
17287: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17288: LD_EXP 24
17292: PUSH
17293: LD_EXP 66
17297: AND
17298: IFFALSE 17439
17300: GO 17302
17302: DISABLE
17303: LD_INT 0
17305: PPUSH
17306: PPUSH
17307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17308: LD_ADDR_VAR 0 3
17312: PUSH
17313: LD_INT 22
17315: PUSH
17316: LD_OWVAR 2
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 25
17327: PUSH
17328: LD_INT 1
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PPUSH
17339: CALL_OW 69
17343: ST_TO_ADDR
// if not tmp then
17344: LD_VAR 0 3
17348: NOT
17349: IFFALSE 17353
// exit ;
17351: GO 17439
// un := tmp [ rand ( 1 , tmp ) ] ;
17353: LD_ADDR_VAR 0 2
17357: PUSH
17358: LD_VAR 0 3
17362: PUSH
17363: LD_INT 1
17365: PPUSH
17366: LD_VAR 0 3
17370: PPUSH
17371: CALL_OW 12
17375: ARRAY
17376: ST_TO_ADDR
// if Crawls ( un ) then
17377: LD_VAR 0 2
17381: PPUSH
17382: CALL_OW 318
17386: IFFALSE 17397
// ComWalk ( un ) ;
17388: LD_VAR 0 2
17392: PPUSH
17393: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17397: LD_VAR 0 2
17401: PPUSH
17402: LD_INT 9
17404: PPUSH
17405: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17409: LD_INT 28
17411: PPUSH
17412: LD_OWVAR 2
17416: PPUSH
17417: LD_INT 2
17419: PPUSH
17420: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17424: LD_INT 29
17426: PPUSH
17427: LD_OWVAR 2
17431: PPUSH
17432: LD_INT 2
17434: PPUSH
17435: CALL_OW 322
// end ;
17439: PPOPN 3
17441: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17442: LD_EXP 24
17446: PUSH
17447: LD_EXP 67
17451: AND
17452: IFFALSE 17563
17454: GO 17456
17456: DISABLE
17457: LD_INT 0
17459: PPUSH
17460: PPUSH
17461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17462: LD_ADDR_VAR 0 3
17466: PUSH
17467: LD_INT 22
17469: PUSH
17470: LD_OWVAR 2
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 25
17481: PUSH
17482: LD_INT 1
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PPUSH
17493: CALL_OW 69
17497: ST_TO_ADDR
// if not tmp then
17498: LD_VAR 0 3
17502: NOT
17503: IFFALSE 17507
// exit ;
17505: GO 17563
// un := tmp [ rand ( 1 , tmp ) ] ;
17507: LD_ADDR_VAR 0 2
17511: PUSH
17512: LD_VAR 0 3
17516: PUSH
17517: LD_INT 1
17519: PPUSH
17520: LD_VAR 0 3
17524: PPUSH
17525: CALL_OW 12
17529: ARRAY
17530: ST_TO_ADDR
// if Crawls ( un ) then
17531: LD_VAR 0 2
17535: PPUSH
17536: CALL_OW 318
17540: IFFALSE 17551
// ComWalk ( un ) ;
17542: LD_VAR 0 2
17546: PPUSH
17547: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17551: LD_VAR 0 2
17555: PPUSH
17556: LD_INT 8
17558: PPUSH
17559: CALL_OW 336
// end ;
17563: PPOPN 3
17565: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17566: LD_EXP 24
17570: PUSH
17571: LD_EXP 68
17575: AND
17576: IFFALSE 17720
17578: GO 17580
17580: DISABLE
17581: LD_INT 0
17583: PPUSH
17584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17585: LD_ADDR_VAR 0 2
17589: PUSH
17590: LD_INT 22
17592: PUSH
17593: LD_OWVAR 2
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 21
17604: PUSH
17605: LD_INT 2
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 2
17614: PUSH
17615: LD_INT 34
17617: PUSH
17618: LD_INT 12
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 34
17627: PUSH
17628: LD_INT 51
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 34
17637: PUSH
17638: LD_INT 32
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: LIST
17655: PPUSH
17656: CALL_OW 69
17660: ST_TO_ADDR
// if not tmp then
17661: LD_VAR 0 2
17665: NOT
17666: IFFALSE 17670
// exit ;
17668: GO 17720
// for i in tmp do
17670: LD_ADDR_VAR 0 1
17674: PUSH
17675: LD_VAR 0 2
17679: PUSH
17680: FOR_IN
17681: IFFALSE 17718
// if GetCargo ( i , mat_artifact ) = 0 then
17683: LD_VAR 0 1
17687: PPUSH
17688: LD_INT 4
17690: PPUSH
17691: CALL_OW 289
17695: PUSH
17696: LD_INT 0
17698: EQUAL
17699: IFFALSE 17716
// SetCargo ( i , mat_siberit , 100 ) ;
17701: LD_VAR 0 1
17705: PPUSH
17706: LD_INT 3
17708: PPUSH
17709: LD_INT 100
17711: PPUSH
17712: CALL_OW 290
17716: GO 17680
17718: POP
17719: POP
// end ;
17720: PPOPN 2
17722: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17723: LD_EXP 24
17727: PUSH
17728: LD_EXP 69
17732: AND
17733: IFFALSE 17916
17735: GO 17737
17737: DISABLE
17738: LD_INT 0
17740: PPUSH
17741: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17742: LD_ADDR_VAR 0 2
17746: PUSH
17747: LD_INT 22
17749: PUSH
17750: LD_OWVAR 2
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PPUSH
17759: CALL_OW 69
17763: ST_TO_ADDR
// if not tmp then
17764: LD_VAR 0 2
17768: NOT
17769: IFFALSE 17773
// exit ;
17771: GO 17916
// for i := 1 to 2 do
17773: LD_ADDR_VAR 0 1
17777: PUSH
17778: DOUBLE
17779: LD_INT 1
17781: DEC
17782: ST_TO_ADDR
17783: LD_INT 2
17785: PUSH
17786: FOR_TO
17787: IFFALSE 17914
// begin uc_side := your_side ;
17789: LD_ADDR_OWVAR 20
17793: PUSH
17794: LD_OWVAR 2
17798: ST_TO_ADDR
// uc_nation := nation_american ;
17799: LD_ADDR_OWVAR 21
17803: PUSH
17804: LD_INT 1
17806: ST_TO_ADDR
// vc_chassis := us_morphling ;
17807: LD_ADDR_OWVAR 37
17811: PUSH
17812: LD_INT 5
17814: ST_TO_ADDR
// vc_engine := engine_siberite ;
17815: LD_ADDR_OWVAR 39
17819: PUSH
17820: LD_INT 3
17822: ST_TO_ADDR
// vc_control := control_computer ;
17823: LD_ADDR_OWVAR 38
17827: PUSH
17828: LD_INT 3
17830: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17831: LD_ADDR_OWVAR 40
17835: PUSH
17836: LD_INT 10
17838: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17839: LD_VAR 0 2
17843: PUSH
17844: LD_INT 1
17846: ARRAY
17847: PPUSH
17848: CALL_OW 310
17852: NOT
17853: IFFALSE 17900
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17855: CALL_OW 45
17859: PPUSH
17860: LD_VAR 0 2
17864: PUSH
17865: LD_INT 1
17867: ARRAY
17868: PPUSH
17869: CALL_OW 250
17873: PPUSH
17874: LD_VAR 0 2
17878: PUSH
17879: LD_INT 1
17881: ARRAY
17882: PPUSH
17883: CALL_OW 251
17887: PPUSH
17888: LD_INT 12
17890: PPUSH
17891: LD_INT 1
17893: PPUSH
17894: CALL_OW 50
17898: GO 17912
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17900: CALL_OW 45
17904: PPUSH
17905: LD_INT 1
17907: PPUSH
17908: CALL_OW 51
// end ;
17912: GO 17786
17914: POP
17915: POP
// end ;
17916: PPOPN 2
17918: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17919: LD_EXP 24
17923: PUSH
17924: LD_EXP 70
17928: AND
17929: IFFALSE 18151
17931: GO 17933
17933: DISABLE
17934: LD_INT 0
17936: PPUSH
17937: PPUSH
17938: PPUSH
17939: PPUSH
17940: PPUSH
17941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17942: LD_ADDR_VAR 0 6
17946: PUSH
17947: LD_INT 22
17949: PUSH
17950: LD_OWVAR 2
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 21
17961: PUSH
17962: LD_INT 1
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 3
17971: PUSH
17972: LD_INT 23
17974: PUSH
17975: LD_INT 0
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: LIST
17990: PPUSH
17991: CALL_OW 69
17995: ST_TO_ADDR
// if not tmp then
17996: LD_VAR 0 6
18000: NOT
18001: IFFALSE 18005
// exit ;
18003: GO 18151
// s1 := rand ( 1 , 4 ) ;
18005: LD_ADDR_VAR 0 2
18009: PUSH
18010: LD_INT 1
18012: PPUSH
18013: LD_INT 4
18015: PPUSH
18016: CALL_OW 12
18020: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18021: LD_ADDR_VAR 0 4
18025: PUSH
18026: LD_VAR 0 6
18030: PUSH
18031: LD_INT 1
18033: ARRAY
18034: PPUSH
18035: LD_VAR 0 2
18039: PPUSH
18040: CALL_OW 259
18044: ST_TO_ADDR
// if s1 = 1 then
18045: LD_VAR 0 2
18049: PUSH
18050: LD_INT 1
18052: EQUAL
18053: IFFALSE 18073
// s2 := rand ( 2 , 4 ) else
18055: LD_ADDR_VAR 0 3
18059: PUSH
18060: LD_INT 2
18062: PPUSH
18063: LD_INT 4
18065: PPUSH
18066: CALL_OW 12
18070: ST_TO_ADDR
18071: GO 18081
// s2 := 1 ;
18073: LD_ADDR_VAR 0 3
18077: PUSH
18078: LD_INT 1
18080: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18081: LD_ADDR_VAR 0 5
18085: PUSH
18086: LD_VAR 0 6
18090: PUSH
18091: LD_INT 1
18093: ARRAY
18094: PPUSH
18095: LD_VAR 0 3
18099: PPUSH
18100: CALL_OW 259
18104: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18105: LD_VAR 0 6
18109: PUSH
18110: LD_INT 1
18112: ARRAY
18113: PPUSH
18114: LD_VAR 0 2
18118: PPUSH
18119: LD_VAR 0 5
18123: PPUSH
18124: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18128: LD_VAR 0 6
18132: PUSH
18133: LD_INT 1
18135: ARRAY
18136: PPUSH
18137: LD_VAR 0 3
18141: PPUSH
18142: LD_VAR 0 4
18146: PPUSH
18147: CALL_OW 237
// end ;
18151: PPOPN 6
18153: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18154: LD_EXP 24
18158: PUSH
18159: LD_EXP 71
18163: AND
18164: IFFALSE 18243
18166: GO 18168
18168: DISABLE
18169: LD_INT 0
18171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18172: LD_ADDR_VAR 0 1
18176: PUSH
18177: LD_INT 22
18179: PUSH
18180: LD_OWVAR 2
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 30
18191: PUSH
18192: LD_INT 3
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PPUSH
18203: CALL_OW 69
18207: ST_TO_ADDR
// if not tmp then
18208: LD_VAR 0 1
18212: NOT
18213: IFFALSE 18217
// exit ;
18215: GO 18243
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18217: LD_VAR 0 1
18221: PUSH
18222: LD_INT 1
18224: PPUSH
18225: LD_VAR 0 1
18229: PPUSH
18230: CALL_OW 12
18234: ARRAY
18235: PPUSH
18236: LD_INT 1
18238: PPUSH
18239: CALL_OW 234
// end ;
18243: PPOPN 1
18245: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18246: LD_EXP 24
18250: PUSH
18251: LD_EXP 72
18255: AND
18256: IFFALSE 18368
18258: GO 18260
18260: DISABLE
18261: LD_INT 0
18263: PPUSH
18264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18265: LD_ADDR_VAR 0 2
18269: PUSH
18270: LD_INT 22
18272: PUSH
18273: LD_OWVAR 2
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 2
18284: PUSH
18285: LD_INT 30
18287: PUSH
18288: LD_INT 27
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 30
18297: PUSH
18298: LD_INT 26
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 30
18307: PUSH
18308: LD_INT 28
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PPUSH
18325: CALL_OW 69
18329: ST_TO_ADDR
// if not tmp then
18330: LD_VAR 0 2
18334: NOT
18335: IFFALSE 18339
// exit ;
18337: GO 18368
// for i in tmp do
18339: LD_ADDR_VAR 0 1
18343: PUSH
18344: LD_VAR 0 2
18348: PUSH
18349: FOR_IN
18350: IFFALSE 18366
// SetLives ( i , 1 ) ;
18352: LD_VAR 0 1
18356: PPUSH
18357: LD_INT 1
18359: PPUSH
18360: CALL_OW 234
18364: GO 18349
18366: POP
18367: POP
// end ;
18368: PPOPN 2
18370: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18371: LD_EXP 24
18375: PUSH
18376: LD_EXP 73
18380: AND
18381: IFFALSE 18668
18383: GO 18385
18385: DISABLE
18386: LD_INT 0
18388: PPUSH
18389: PPUSH
18390: PPUSH
// begin i := rand ( 1 , 7 ) ;
18391: LD_ADDR_VAR 0 1
18395: PUSH
18396: LD_INT 1
18398: PPUSH
18399: LD_INT 7
18401: PPUSH
18402: CALL_OW 12
18406: ST_TO_ADDR
// case i of 1 :
18407: LD_VAR 0 1
18411: PUSH
18412: LD_INT 1
18414: DOUBLE
18415: EQUAL
18416: IFTRUE 18420
18418: GO 18430
18420: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18421: LD_STRING earthquake(getX(game), 0, 32)
18423: PPUSH
18424: CALL_OW 559
18428: GO 18668
18430: LD_INT 2
18432: DOUBLE
18433: EQUAL
18434: IFTRUE 18438
18436: GO 18452
18438: POP
// begin ToLua ( displayStucuk(); ) ;
18439: LD_STRING displayStucuk();
18441: PPUSH
18442: CALL_OW 559
// ResetFog ;
18446: CALL_OW 335
// end ; 3 :
18450: GO 18668
18452: LD_INT 3
18454: DOUBLE
18455: EQUAL
18456: IFTRUE 18460
18458: GO 18564
18460: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18461: LD_ADDR_VAR 0 2
18465: PUSH
18466: LD_INT 22
18468: PUSH
18469: LD_OWVAR 2
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 25
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PPUSH
18492: CALL_OW 69
18496: ST_TO_ADDR
// if not tmp then
18497: LD_VAR 0 2
18501: NOT
18502: IFFALSE 18506
// exit ;
18504: GO 18668
// un := tmp [ rand ( 1 , tmp ) ] ;
18506: LD_ADDR_VAR 0 3
18510: PUSH
18511: LD_VAR 0 2
18515: PUSH
18516: LD_INT 1
18518: PPUSH
18519: LD_VAR 0 2
18523: PPUSH
18524: CALL_OW 12
18528: ARRAY
18529: ST_TO_ADDR
// if Crawls ( un ) then
18530: LD_VAR 0 3
18534: PPUSH
18535: CALL_OW 318
18539: IFFALSE 18550
// ComWalk ( un ) ;
18541: LD_VAR 0 3
18545: PPUSH
18546: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18550: LD_VAR 0 3
18554: PPUSH
18555: LD_INT 8
18557: PPUSH
18558: CALL_OW 336
// end ; 4 :
18562: GO 18668
18564: LD_INT 4
18566: DOUBLE
18567: EQUAL
18568: IFTRUE 18572
18570: GO 18646
18572: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18573: LD_ADDR_VAR 0 2
18577: PUSH
18578: LD_INT 22
18580: PUSH
18581: LD_OWVAR 2
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 30
18592: PUSH
18593: LD_INT 29
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PPUSH
18604: CALL_OW 69
18608: ST_TO_ADDR
// if not tmp then
18609: LD_VAR 0 2
18613: NOT
18614: IFFALSE 18618
// exit ;
18616: GO 18668
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18618: LD_VAR 0 2
18622: PUSH
18623: LD_INT 1
18625: ARRAY
18626: PPUSH
18627: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18631: LD_VAR 0 2
18635: PUSH
18636: LD_INT 1
18638: ARRAY
18639: PPUSH
18640: CALL_OW 65
// end ; 5 .. 7 :
18644: GO 18668
18646: LD_INT 5
18648: DOUBLE
18649: GREATEREQUAL
18650: IFFALSE 18658
18652: LD_INT 7
18654: DOUBLE
18655: LESSEQUAL
18656: IFTRUE 18660
18658: GO 18667
18660: POP
// StreamSibBomb ; end ;
18661: CALL 14905 0 0
18665: GO 18668
18667: POP
// end ;
18668: PPOPN 3
18670: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18671: LD_EXP 24
18675: PUSH
18676: LD_EXP 74
18680: AND
18681: IFFALSE 18837
18683: GO 18685
18685: DISABLE
18686: LD_INT 0
18688: PPUSH
18689: PPUSH
18690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18691: LD_ADDR_VAR 0 2
18695: PUSH
18696: LD_INT 81
18698: PUSH
18699: LD_OWVAR 2
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 2
18710: PUSH
18711: LD_INT 21
18713: PUSH
18714: LD_INT 1
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 21
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PPUSH
18740: CALL_OW 69
18744: ST_TO_ADDR
// if not tmp then
18745: LD_VAR 0 2
18749: NOT
18750: IFFALSE 18754
// exit ;
18752: GO 18837
// p := 0 ;
18754: LD_ADDR_VAR 0 3
18758: PUSH
18759: LD_INT 0
18761: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18762: LD_INT 35
18764: PPUSH
18765: CALL_OW 67
// p := p + 1 ;
18769: LD_ADDR_VAR 0 3
18773: PUSH
18774: LD_VAR 0 3
18778: PUSH
18779: LD_INT 1
18781: PLUS
18782: ST_TO_ADDR
// for i in tmp do
18783: LD_ADDR_VAR 0 1
18787: PUSH
18788: LD_VAR 0 2
18792: PUSH
18793: FOR_IN
18794: IFFALSE 18825
// if GetLives ( i ) < 1000 then
18796: LD_VAR 0 1
18800: PPUSH
18801: CALL_OW 256
18805: PUSH
18806: LD_INT 1000
18808: LESS
18809: IFFALSE 18823
// SetLives ( i , 1000 ) ;
18811: LD_VAR 0 1
18815: PPUSH
18816: LD_INT 1000
18818: PPUSH
18819: CALL_OW 234
18823: GO 18793
18825: POP
18826: POP
// until p > 20 ;
18827: LD_VAR 0 3
18831: PUSH
18832: LD_INT 20
18834: GREATER
18835: IFFALSE 18762
// end ;
18837: PPOPN 3
18839: END
// every 0 0$1 trigger StreamModeActive and sTime do
18840: LD_EXP 24
18844: PUSH
18845: LD_EXP 75
18849: AND
18850: IFFALSE 18885
18852: GO 18854
18854: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18855: LD_INT 28
18857: PPUSH
18858: LD_OWVAR 2
18862: PPUSH
18863: LD_INT 2
18865: PPUSH
18866: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18870: LD_INT 30
18872: PPUSH
18873: LD_OWVAR 2
18877: PPUSH
18878: LD_INT 2
18880: PPUSH
18881: CALL_OW 322
// end ;
18885: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18886: LD_EXP 24
18890: PUSH
18891: LD_EXP 76
18895: AND
18896: IFFALSE 19017
18898: GO 18900
18900: DISABLE
18901: LD_INT 0
18903: PPUSH
18904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18905: LD_ADDR_VAR 0 2
18909: PUSH
18910: LD_INT 22
18912: PUSH
18913: LD_OWVAR 2
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 21
18924: PUSH
18925: LD_INT 1
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 3
18934: PUSH
18935: LD_INT 23
18937: PUSH
18938: LD_INT 0
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: LIST
18953: PPUSH
18954: CALL_OW 69
18958: ST_TO_ADDR
// if not tmp then
18959: LD_VAR 0 2
18963: NOT
18964: IFFALSE 18968
// exit ;
18966: GO 19017
// for i in tmp do
18968: LD_ADDR_VAR 0 1
18972: PUSH
18973: LD_VAR 0 2
18977: PUSH
18978: FOR_IN
18979: IFFALSE 19015
// begin if Crawls ( i ) then
18981: LD_VAR 0 1
18985: PPUSH
18986: CALL_OW 318
18990: IFFALSE 19001
// ComWalk ( i ) ;
18992: LD_VAR 0 1
18996: PPUSH
18997: CALL_OW 138
// SetClass ( i , 2 ) ;
19001: LD_VAR 0 1
19005: PPUSH
19006: LD_INT 2
19008: PPUSH
19009: CALL_OW 336
// end ;
19013: GO 18978
19015: POP
19016: POP
// end ;
19017: PPOPN 2
19019: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19020: LD_EXP 24
19024: PUSH
19025: LD_EXP 77
19029: AND
19030: IFFALSE 19318
19032: GO 19034
19034: DISABLE
19035: LD_INT 0
19037: PPUSH
19038: PPUSH
19039: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19040: LD_OWVAR 2
19044: PPUSH
19045: LD_INT 9
19047: PPUSH
19048: LD_INT 1
19050: PPUSH
19051: LD_INT 1
19053: PPUSH
19054: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19058: LD_INT 9
19060: PPUSH
19061: LD_OWVAR 2
19065: PPUSH
19066: CALL_OW 343
// uc_side := 9 ;
19070: LD_ADDR_OWVAR 20
19074: PUSH
19075: LD_INT 9
19077: ST_TO_ADDR
// uc_nation := 2 ;
19078: LD_ADDR_OWVAR 21
19082: PUSH
19083: LD_INT 2
19085: ST_TO_ADDR
// hc_name := Dark Warrior ;
19086: LD_ADDR_OWVAR 26
19090: PUSH
19091: LD_STRING Dark Warrior
19093: ST_TO_ADDR
// hc_gallery :=  ;
19094: LD_ADDR_OWVAR 33
19098: PUSH
19099: LD_STRING 
19101: ST_TO_ADDR
// hc_noskilllimit := true ;
19102: LD_ADDR_OWVAR 76
19106: PUSH
19107: LD_INT 1
19109: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19110: LD_ADDR_OWVAR 31
19114: PUSH
19115: LD_INT 30
19117: PUSH
19118: LD_INT 30
19120: PUSH
19121: LD_INT 30
19123: PUSH
19124: LD_INT 30
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: ST_TO_ADDR
// un := CreateHuman ;
19133: LD_ADDR_VAR 0 3
19137: PUSH
19138: CALL_OW 44
19142: ST_TO_ADDR
// hc_noskilllimit := false ;
19143: LD_ADDR_OWVAR 76
19147: PUSH
19148: LD_INT 0
19150: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19151: LD_VAR 0 3
19155: PPUSH
19156: LD_INT 1
19158: PPUSH
19159: CALL_OW 51
// ToLua ( playRanger() ) ;
19163: LD_STRING playRanger()
19165: PPUSH
19166: CALL_OW 559
// p := 0 ;
19170: LD_ADDR_VAR 0 2
19174: PUSH
19175: LD_INT 0
19177: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19178: LD_INT 35
19180: PPUSH
19181: CALL_OW 67
// p := p + 1 ;
19185: LD_ADDR_VAR 0 2
19189: PUSH
19190: LD_VAR 0 2
19194: PUSH
19195: LD_INT 1
19197: PLUS
19198: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19199: LD_VAR 0 3
19203: PPUSH
19204: CALL_OW 256
19208: PUSH
19209: LD_INT 1000
19211: LESS
19212: IFFALSE 19226
// SetLives ( un , 1000 ) ;
19214: LD_VAR 0 3
19218: PPUSH
19219: LD_INT 1000
19221: PPUSH
19222: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19226: LD_VAR 0 3
19230: PPUSH
19231: LD_INT 81
19233: PUSH
19234: LD_OWVAR 2
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 91
19245: PUSH
19246: LD_VAR 0 3
19250: PUSH
19251: LD_INT 30
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: LIST
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PPUSH
19263: CALL_OW 69
19267: PPUSH
19268: LD_VAR 0 3
19272: PPUSH
19273: CALL_OW 74
19277: PPUSH
19278: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19282: LD_VAR 0 2
19286: PUSH
19287: LD_INT 80
19289: GREATER
19290: PUSH
19291: LD_VAR 0 3
19295: PPUSH
19296: CALL_OW 301
19300: OR
19301: IFFALSE 19178
// if un then
19303: LD_VAR 0 3
19307: IFFALSE 19318
// RemoveUnit ( un ) ;
19309: LD_VAR 0 3
19313: PPUSH
19314: CALL_OW 64
// end ;
19318: PPOPN 3
19320: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19321: LD_EXP 78
19325: IFFALSE 19441
19327: GO 19329
19329: DISABLE
19330: LD_INT 0
19332: PPUSH
19333: PPUSH
19334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19335: LD_ADDR_VAR 0 2
19339: PUSH
19340: LD_INT 81
19342: PUSH
19343: LD_OWVAR 2
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 21
19354: PUSH
19355: LD_INT 1
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PPUSH
19366: CALL_OW 69
19370: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19371: LD_STRING playComputer()
19373: PPUSH
19374: CALL_OW 559
// if not tmp then
19378: LD_VAR 0 2
19382: NOT
19383: IFFALSE 19387
// exit ;
19385: GO 19441
// for i in tmp do
19387: LD_ADDR_VAR 0 1
19391: PUSH
19392: LD_VAR 0 2
19396: PUSH
19397: FOR_IN
19398: IFFALSE 19439
// for j := 1 to 4 do
19400: LD_ADDR_VAR 0 3
19404: PUSH
19405: DOUBLE
19406: LD_INT 1
19408: DEC
19409: ST_TO_ADDR
19410: LD_INT 4
19412: PUSH
19413: FOR_TO
19414: IFFALSE 19435
// SetSkill ( i , j , 10 ) ;
19416: LD_VAR 0 1
19420: PPUSH
19421: LD_VAR 0 3
19425: PPUSH
19426: LD_INT 10
19428: PPUSH
19429: CALL_OW 237
19433: GO 19413
19435: POP
19436: POP
19437: GO 19397
19439: POP
19440: POP
// end ;
19441: PPOPN 3
19443: END
// every 0 0$1 trigger s30 do var i , tmp ;
19444: LD_EXP 79
19448: IFFALSE 19517
19450: GO 19452
19452: DISABLE
19453: LD_INT 0
19455: PPUSH
19456: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19457: LD_ADDR_VAR 0 2
19461: PUSH
19462: LD_INT 22
19464: PUSH
19465: LD_OWVAR 2
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PPUSH
19474: CALL_OW 69
19478: ST_TO_ADDR
// if not tmp then
19479: LD_VAR 0 2
19483: NOT
19484: IFFALSE 19488
// exit ;
19486: GO 19517
// for i in tmp do
19488: LD_ADDR_VAR 0 1
19492: PUSH
19493: LD_VAR 0 2
19497: PUSH
19498: FOR_IN
19499: IFFALSE 19515
// SetLives ( i , 300 ) ;
19501: LD_VAR 0 1
19505: PPUSH
19506: LD_INT 300
19508: PPUSH
19509: CALL_OW 234
19513: GO 19498
19515: POP
19516: POP
// end ;
19517: PPOPN 2
19519: END
// every 0 0$1 trigger s60 do var i , tmp ;
19520: LD_EXP 80
19524: IFFALSE 19593
19526: GO 19528
19528: DISABLE
19529: LD_INT 0
19531: PPUSH
19532: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19533: LD_ADDR_VAR 0 2
19537: PUSH
19538: LD_INT 22
19540: PUSH
19541: LD_OWVAR 2
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PPUSH
19550: CALL_OW 69
19554: ST_TO_ADDR
// if not tmp then
19555: LD_VAR 0 2
19559: NOT
19560: IFFALSE 19564
// exit ;
19562: GO 19593
// for i in tmp do
19564: LD_ADDR_VAR 0 1
19568: PUSH
19569: LD_VAR 0 2
19573: PUSH
19574: FOR_IN
19575: IFFALSE 19591
// SetLives ( i , 600 ) ;
19577: LD_VAR 0 1
19581: PPUSH
19582: LD_INT 600
19584: PPUSH
19585: CALL_OW 234
19589: GO 19574
19591: POP
19592: POP
// end ;
19593: PPOPN 2
19595: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19596: LD_INT 0
19598: PPUSH
// case cmd of 301 :
19599: LD_VAR 0 1
19603: PUSH
19604: LD_INT 301
19606: DOUBLE
19607: EQUAL
19608: IFTRUE 19612
19610: GO 19644
19612: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19613: LD_VAR 0 6
19617: PPUSH
19618: LD_VAR 0 7
19622: PPUSH
19623: LD_VAR 0 8
19627: PPUSH
19628: LD_VAR 0 4
19632: PPUSH
19633: LD_VAR 0 5
19637: PPUSH
19638: CALL 20845 0 5
19642: GO 19765
19644: LD_INT 302
19646: DOUBLE
19647: EQUAL
19648: IFTRUE 19652
19650: GO 19689
19652: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19653: LD_VAR 0 6
19657: PPUSH
19658: LD_VAR 0 7
19662: PPUSH
19663: LD_VAR 0 8
19667: PPUSH
19668: LD_VAR 0 9
19672: PPUSH
19673: LD_VAR 0 4
19677: PPUSH
19678: LD_VAR 0 5
19682: PPUSH
19683: CALL 20936 0 6
19687: GO 19765
19689: LD_INT 303
19691: DOUBLE
19692: EQUAL
19693: IFTRUE 19697
19695: GO 19734
19697: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19698: LD_VAR 0 6
19702: PPUSH
19703: LD_VAR 0 7
19707: PPUSH
19708: LD_VAR 0 8
19712: PPUSH
19713: LD_VAR 0 9
19717: PPUSH
19718: LD_VAR 0 4
19722: PPUSH
19723: LD_VAR 0 5
19727: PPUSH
19728: CALL 19770 0 6
19732: GO 19765
19734: LD_INT 304
19736: DOUBLE
19737: EQUAL
19738: IFTRUE 19742
19740: GO 19764
19742: POP
// hHackTeleport ( unit , x , y ) ; end ;
19743: LD_VAR 0 2
19747: PPUSH
19748: LD_VAR 0 4
19752: PPUSH
19753: LD_VAR 0 5
19757: PPUSH
19758: CALL 21529 0 3
19762: GO 19765
19764: POP
// end ;
19765: LD_VAR 0 12
19769: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19770: LD_INT 0
19772: PPUSH
19773: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19774: LD_VAR 0 1
19778: PUSH
19779: LD_INT 1
19781: LESS
19782: PUSH
19783: LD_VAR 0 1
19787: PUSH
19788: LD_INT 3
19790: GREATER
19791: OR
19792: PUSH
19793: LD_VAR 0 5
19797: PPUSH
19798: LD_VAR 0 6
19802: PPUSH
19803: CALL_OW 428
19807: OR
19808: IFFALSE 19812
// exit ;
19810: GO 20532
// uc_side := your_side ;
19812: LD_ADDR_OWVAR 20
19816: PUSH
19817: LD_OWVAR 2
19821: ST_TO_ADDR
// uc_nation := nation ;
19822: LD_ADDR_OWVAR 21
19826: PUSH
19827: LD_VAR 0 1
19831: ST_TO_ADDR
// bc_level = 1 ;
19832: LD_ADDR_OWVAR 43
19836: PUSH
19837: LD_INT 1
19839: ST_TO_ADDR
// case btype of 1 :
19840: LD_VAR 0 2
19844: PUSH
19845: LD_INT 1
19847: DOUBLE
19848: EQUAL
19849: IFTRUE 19853
19851: GO 19864
19853: POP
// bc_type := b_depot ; 2 :
19854: LD_ADDR_OWVAR 42
19858: PUSH
19859: LD_INT 0
19861: ST_TO_ADDR
19862: GO 20476
19864: LD_INT 2
19866: DOUBLE
19867: EQUAL
19868: IFTRUE 19872
19870: GO 19883
19872: POP
// bc_type := b_warehouse ; 3 :
19873: LD_ADDR_OWVAR 42
19877: PUSH
19878: LD_INT 1
19880: ST_TO_ADDR
19881: GO 20476
19883: LD_INT 3
19885: DOUBLE
19886: EQUAL
19887: IFTRUE 19891
19889: GO 19902
19891: POP
// bc_type := b_lab ; 4 .. 9 :
19892: LD_ADDR_OWVAR 42
19896: PUSH
19897: LD_INT 6
19899: ST_TO_ADDR
19900: GO 20476
19902: LD_INT 4
19904: DOUBLE
19905: GREATEREQUAL
19906: IFFALSE 19914
19908: LD_INT 9
19910: DOUBLE
19911: LESSEQUAL
19912: IFTRUE 19916
19914: GO 19968
19916: POP
// begin bc_type := b_lab_half ;
19917: LD_ADDR_OWVAR 42
19921: PUSH
19922: LD_INT 7
19924: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19925: LD_ADDR_OWVAR 44
19929: PUSH
19930: LD_INT 10
19932: PUSH
19933: LD_INT 11
19935: PUSH
19936: LD_INT 12
19938: PUSH
19939: LD_INT 15
19941: PUSH
19942: LD_INT 14
19944: PUSH
19945: LD_INT 13
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: PUSH
19956: LD_VAR 0 2
19960: PUSH
19961: LD_INT 3
19963: MINUS
19964: ARRAY
19965: ST_TO_ADDR
// end ; 10 .. 13 :
19966: GO 20476
19968: LD_INT 10
19970: DOUBLE
19971: GREATEREQUAL
19972: IFFALSE 19980
19974: LD_INT 13
19976: DOUBLE
19977: LESSEQUAL
19978: IFTRUE 19982
19980: GO 20059
19982: POP
// begin bc_type := b_lab_full ;
19983: LD_ADDR_OWVAR 42
19987: PUSH
19988: LD_INT 8
19990: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19991: LD_ADDR_OWVAR 44
19995: PUSH
19996: LD_INT 10
19998: PUSH
19999: LD_INT 12
20001: PUSH
20002: LD_INT 14
20004: PUSH
20005: LD_INT 13
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: PUSH
20014: LD_VAR 0 2
20018: PUSH
20019: LD_INT 9
20021: MINUS
20022: ARRAY
20023: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20024: LD_ADDR_OWVAR 45
20028: PUSH
20029: LD_INT 11
20031: PUSH
20032: LD_INT 15
20034: PUSH
20035: LD_INT 12
20037: PUSH
20038: LD_INT 15
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: PUSH
20047: LD_VAR 0 2
20051: PUSH
20052: LD_INT 9
20054: MINUS
20055: ARRAY
20056: ST_TO_ADDR
// end ; 14 :
20057: GO 20476
20059: LD_INT 14
20061: DOUBLE
20062: EQUAL
20063: IFTRUE 20067
20065: GO 20078
20067: POP
// bc_type := b_workshop ; 15 :
20068: LD_ADDR_OWVAR 42
20072: PUSH
20073: LD_INT 2
20075: ST_TO_ADDR
20076: GO 20476
20078: LD_INT 15
20080: DOUBLE
20081: EQUAL
20082: IFTRUE 20086
20084: GO 20097
20086: POP
// bc_type := b_factory ; 16 :
20087: LD_ADDR_OWVAR 42
20091: PUSH
20092: LD_INT 3
20094: ST_TO_ADDR
20095: GO 20476
20097: LD_INT 16
20099: DOUBLE
20100: EQUAL
20101: IFTRUE 20105
20103: GO 20116
20105: POP
// bc_type := b_ext_gun ; 17 :
20106: LD_ADDR_OWVAR 42
20110: PUSH
20111: LD_INT 17
20113: ST_TO_ADDR
20114: GO 20476
20116: LD_INT 17
20118: DOUBLE
20119: EQUAL
20120: IFTRUE 20124
20122: GO 20152
20124: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20125: LD_ADDR_OWVAR 42
20129: PUSH
20130: LD_INT 19
20132: PUSH
20133: LD_INT 23
20135: PUSH
20136: LD_INT 19
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: LIST
20143: PUSH
20144: LD_VAR 0 1
20148: ARRAY
20149: ST_TO_ADDR
20150: GO 20476
20152: LD_INT 18
20154: DOUBLE
20155: EQUAL
20156: IFTRUE 20160
20158: GO 20171
20160: POP
// bc_type := b_ext_radar ; 19 :
20161: LD_ADDR_OWVAR 42
20165: PUSH
20166: LD_INT 20
20168: ST_TO_ADDR
20169: GO 20476
20171: LD_INT 19
20173: DOUBLE
20174: EQUAL
20175: IFTRUE 20179
20177: GO 20190
20179: POP
// bc_type := b_ext_radio ; 20 :
20180: LD_ADDR_OWVAR 42
20184: PUSH
20185: LD_INT 22
20187: ST_TO_ADDR
20188: GO 20476
20190: LD_INT 20
20192: DOUBLE
20193: EQUAL
20194: IFTRUE 20198
20196: GO 20209
20198: POP
// bc_type := b_ext_siberium ; 21 :
20199: LD_ADDR_OWVAR 42
20203: PUSH
20204: LD_INT 21
20206: ST_TO_ADDR
20207: GO 20476
20209: LD_INT 21
20211: DOUBLE
20212: EQUAL
20213: IFTRUE 20217
20215: GO 20228
20217: POP
// bc_type := b_ext_computer ; 22 :
20218: LD_ADDR_OWVAR 42
20222: PUSH
20223: LD_INT 24
20225: ST_TO_ADDR
20226: GO 20476
20228: LD_INT 22
20230: DOUBLE
20231: EQUAL
20232: IFTRUE 20236
20234: GO 20247
20236: POP
// bc_type := b_ext_track ; 23 :
20237: LD_ADDR_OWVAR 42
20241: PUSH
20242: LD_INT 16
20244: ST_TO_ADDR
20245: GO 20476
20247: LD_INT 23
20249: DOUBLE
20250: EQUAL
20251: IFTRUE 20255
20253: GO 20266
20255: POP
// bc_type := b_ext_laser ; 24 :
20256: LD_ADDR_OWVAR 42
20260: PUSH
20261: LD_INT 25
20263: ST_TO_ADDR
20264: GO 20476
20266: LD_INT 24
20268: DOUBLE
20269: EQUAL
20270: IFTRUE 20274
20272: GO 20285
20274: POP
// bc_type := b_control_tower ; 25 :
20275: LD_ADDR_OWVAR 42
20279: PUSH
20280: LD_INT 36
20282: ST_TO_ADDR
20283: GO 20476
20285: LD_INT 25
20287: DOUBLE
20288: EQUAL
20289: IFTRUE 20293
20291: GO 20304
20293: POP
// bc_type := b_breastwork ; 26 :
20294: LD_ADDR_OWVAR 42
20298: PUSH
20299: LD_INT 31
20301: ST_TO_ADDR
20302: GO 20476
20304: LD_INT 26
20306: DOUBLE
20307: EQUAL
20308: IFTRUE 20312
20310: GO 20323
20312: POP
// bc_type := b_bunker ; 27 :
20313: LD_ADDR_OWVAR 42
20317: PUSH
20318: LD_INT 32
20320: ST_TO_ADDR
20321: GO 20476
20323: LD_INT 27
20325: DOUBLE
20326: EQUAL
20327: IFTRUE 20331
20329: GO 20342
20331: POP
// bc_type := b_turret ; 28 :
20332: LD_ADDR_OWVAR 42
20336: PUSH
20337: LD_INT 33
20339: ST_TO_ADDR
20340: GO 20476
20342: LD_INT 28
20344: DOUBLE
20345: EQUAL
20346: IFTRUE 20350
20348: GO 20361
20350: POP
// bc_type := b_armoury ; 29 :
20351: LD_ADDR_OWVAR 42
20355: PUSH
20356: LD_INT 4
20358: ST_TO_ADDR
20359: GO 20476
20361: LD_INT 29
20363: DOUBLE
20364: EQUAL
20365: IFTRUE 20369
20367: GO 20380
20369: POP
// bc_type := b_barracks ; 30 :
20370: LD_ADDR_OWVAR 42
20374: PUSH
20375: LD_INT 5
20377: ST_TO_ADDR
20378: GO 20476
20380: LD_INT 30
20382: DOUBLE
20383: EQUAL
20384: IFTRUE 20388
20386: GO 20399
20388: POP
// bc_type := b_solar_power ; 31 :
20389: LD_ADDR_OWVAR 42
20393: PUSH
20394: LD_INT 27
20396: ST_TO_ADDR
20397: GO 20476
20399: LD_INT 31
20401: DOUBLE
20402: EQUAL
20403: IFTRUE 20407
20405: GO 20418
20407: POP
// bc_type := b_oil_power ; 32 :
20408: LD_ADDR_OWVAR 42
20412: PUSH
20413: LD_INT 26
20415: ST_TO_ADDR
20416: GO 20476
20418: LD_INT 32
20420: DOUBLE
20421: EQUAL
20422: IFTRUE 20426
20424: GO 20437
20426: POP
// bc_type := b_siberite_power ; 33 :
20427: LD_ADDR_OWVAR 42
20431: PUSH
20432: LD_INT 28
20434: ST_TO_ADDR
20435: GO 20476
20437: LD_INT 33
20439: DOUBLE
20440: EQUAL
20441: IFTRUE 20445
20443: GO 20456
20445: POP
// bc_type := b_oil_mine ; 34 :
20446: LD_ADDR_OWVAR 42
20450: PUSH
20451: LD_INT 29
20453: ST_TO_ADDR
20454: GO 20476
20456: LD_INT 34
20458: DOUBLE
20459: EQUAL
20460: IFTRUE 20464
20462: GO 20475
20464: POP
// bc_type := b_siberite_mine ; end ;
20465: LD_ADDR_OWVAR 42
20469: PUSH
20470: LD_INT 30
20472: ST_TO_ADDR
20473: GO 20476
20475: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20476: LD_ADDR_VAR 0 8
20480: PUSH
20481: LD_VAR 0 5
20485: PPUSH
20486: LD_VAR 0 6
20490: PPUSH
20491: LD_VAR 0 3
20495: PPUSH
20496: CALL_OW 47
20500: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20501: LD_OWVAR 42
20505: PUSH
20506: LD_INT 32
20508: PUSH
20509: LD_INT 33
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: IN
20516: IFFALSE 20532
// PlaceWeaponTurret ( b , weapon ) ;
20518: LD_VAR 0 8
20522: PPUSH
20523: LD_VAR 0 4
20527: PPUSH
20528: CALL_OW 431
// end ;
20532: LD_VAR 0 7
20536: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20537: LD_INT 0
20539: PPUSH
20540: PPUSH
20541: PPUSH
20542: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20543: LD_ADDR_VAR 0 4
20547: PUSH
20548: LD_INT 22
20550: PUSH
20551: LD_OWVAR 2
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 2
20562: PUSH
20563: LD_INT 30
20565: PUSH
20566: LD_INT 0
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 30
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: LIST
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PPUSH
20592: CALL_OW 69
20596: ST_TO_ADDR
// if not tmp then
20597: LD_VAR 0 4
20601: NOT
20602: IFFALSE 20606
// exit ;
20604: GO 20665
// for i in tmp do
20606: LD_ADDR_VAR 0 2
20610: PUSH
20611: LD_VAR 0 4
20615: PUSH
20616: FOR_IN
20617: IFFALSE 20663
// for j = 1 to 3 do
20619: LD_ADDR_VAR 0 3
20623: PUSH
20624: DOUBLE
20625: LD_INT 1
20627: DEC
20628: ST_TO_ADDR
20629: LD_INT 3
20631: PUSH
20632: FOR_TO
20633: IFFALSE 20659
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20635: LD_VAR 0 2
20639: PPUSH
20640: CALL_OW 274
20644: PPUSH
20645: LD_VAR 0 3
20649: PPUSH
20650: LD_INT 99999
20652: PPUSH
20653: CALL_OW 277
20657: GO 20632
20659: POP
20660: POP
20661: GO 20616
20663: POP
20664: POP
// end ;
20665: LD_VAR 0 1
20669: RET
// export function hHackSetLevel10 ; var i , j ; begin
20670: LD_INT 0
20672: PPUSH
20673: PPUSH
20674: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20675: LD_ADDR_VAR 0 2
20679: PUSH
20680: LD_INT 21
20682: PUSH
20683: LD_INT 1
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PPUSH
20690: CALL_OW 69
20694: PUSH
20695: FOR_IN
20696: IFFALSE 20748
// if IsSelected ( i ) then
20698: LD_VAR 0 2
20702: PPUSH
20703: CALL_OW 306
20707: IFFALSE 20746
// begin for j := 1 to 4 do
20709: LD_ADDR_VAR 0 3
20713: PUSH
20714: DOUBLE
20715: LD_INT 1
20717: DEC
20718: ST_TO_ADDR
20719: LD_INT 4
20721: PUSH
20722: FOR_TO
20723: IFFALSE 20744
// SetSkill ( i , j , 10 ) ;
20725: LD_VAR 0 2
20729: PPUSH
20730: LD_VAR 0 3
20734: PPUSH
20735: LD_INT 10
20737: PPUSH
20738: CALL_OW 237
20742: GO 20722
20744: POP
20745: POP
// end ;
20746: GO 20695
20748: POP
20749: POP
// end ;
20750: LD_VAR 0 1
20754: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20755: LD_INT 0
20757: PPUSH
20758: PPUSH
20759: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20760: LD_ADDR_VAR 0 2
20764: PUSH
20765: LD_INT 22
20767: PUSH
20768: LD_OWVAR 2
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 21
20779: PUSH
20780: LD_INT 1
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PPUSH
20791: CALL_OW 69
20795: PUSH
20796: FOR_IN
20797: IFFALSE 20838
// begin for j := 1 to 4 do
20799: LD_ADDR_VAR 0 3
20803: PUSH
20804: DOUBLE
20805: LD_INT 1
20807: DEC
20808: ST_TO_ADDR
20809: LD_INT 4
20811: PUSH
20812: FOR_TO
20813: IFFALSE 20834
// SetSkill ( i , j , 10 ) ;
20815: LD_VAR 0 2
20819: PPUSH
20820: LD_VAR 0 3
20824: PPUSH
20825: LD_INT 10
20827: PPUSH
20828: CALL_OW 237
20832: GO 20812
20834: POP
20835: POP
// end ;
20836: GO 20796
20838: POP
20839: POP
// end ;
20840: LD_VAR 0 1
20844: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20845: LD_INT 0
20847: PPUSH
// uc_side := your_side ;
20848: LD_ADDR_OWVAR 20
20852: PUSH
20853: LD_OWVAR 2
20857: ST_TO_ADDR
// uc_nation := nation ;
20858: LD_ADDR_OWVAR 21
20862: PUSH
20863: LD_VAR 0 1
20867: ST_TO_ADDR
// InitHc ;
20868: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20872: LD_INT 0
20874: PPUSH
20875: LD_VAR 0 2
20879: PPUSH
20880: LD_VAR 0 3
20884: PPUSH
20885: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20889: LD_VAR 0 4
20893: PPUSH
20894: LD_VAR 0 5
20898: PPUSH
20899: CALL_OW 428
20903: PUSH
20904: LD_INT 0
20906: EQUAL
20907: IFFALSE 20931
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20909: CALL_OW 44
20913: PPUSH
20914: LD_VAR 0 4
20918: PPUSH
20919: LD_VAR 0 5
20923: PPUSH
20924: LD_INT 1
20926: PPUSH
20927: CALL_OW 48
// end ;
20931: LD_VAR 0 6
20935: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20936: LD_INT 0
20938: PPUSH
20939: PPUSH
// uc_side := your_side ;
20940: LD_ADDR_OWVAR 20
20944: PUSH
20945: LD_OWVAR 2
20949: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20950: LD_VAR 0 1
20954: PUSH
20955: LD_INT 1
20957: PUSH
20958: LD_INT 2
20960: PUSH
20961: LD_INT 3
20963: PUSH
20964: LD_INT 4
20966: PUSH
20967: LD_INT 5
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: IN
20977: IFFALSE 20989
// uc_nation := nation_american else
20979: LD_ADDR_OWVAR 21
20983: PUSH
20984: LD_INT 1
20986: ST_TO_ADDR
20987: GO 21032
// if chassis in [ 11 , 12 , 13 , 14 ] then
20989: LD_VAR 0 1
20993: PUSH
20994: LD_INT 11
20996: PUSH
20997: LD_INT 12
20999: PUSH
21000: LD_INT 13
21002: PUSH
21003: LD_INT 14
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: IN
21012: IFFALSE 21024
// uc_nation := nation_arabian else
21014: LD_ADDR_OWVAR 21
21018: PUSH
21019: LD_INT 2
21021: ST_TO_ADDR
21022: GO 21032
// uc_nation := nation_russian ;
21024: LD_ADDR_OWVAR 21
21028: PUSH
21029: LD_INT 3
21031: ST_TO_ADDR
// vc_chassis := chassis ;
21032: LD_ADDR_OWVAR 37
21036: PUSH
21037: LD_VAR 0 1
21041: ST_TO_ADDR
// vc_engine := engine ;
21042: LD_ADDR_OWVAR 39
21046: PUSH
21047: LD_VAR 0 2
21051: ST_TO_ADDR
// vc_control := control ;
21052: LD_ADDR_OWVAR 38
21056: PUSH
21057: LD_VAR 0 3
21061: ST_TO_ADDR
// vc_weapon := weapon ;
21062: LD_ADDR_OWVAR 40
21066: PUSH
21067: LD_VAR 0 4
21071: ST_TO_ADDR
// un := CreateVehicle ;
21072: LD_ADDR_VAR 0 8
21076: PUSH
21077: CALL_OW 45
21081: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21082: LD_VAR 0 8
21086: PPUSH
21087: LD_INT 0
21089: PPUSH
21090: LD_INT 5
21092: PPUSH
21093: CALL_OW 12
21097: PPUSH
21098: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21102: LD_VAR 0 8
21106: PPUSH
21107: LD_VAR 0 5
21111: PPUSH
21112: LD_VAR 0 6
21116: PPUSH
21117: LD_INT 1
21119: PPUSH
21120: CALL_OW 48
// end ;
21124: LD_VAR 0 7
21128: RET
// export hInvincible ; every 1 do
21129: GO 21131
21131: DISABLE
// hInvincible := [ ] ;
21132: LD_ADDR_EXP 81
21136: PUSH
21137: EMPTY
21138: ST_TO_ADDR
21139: END
// every 10 do var i ;
21140: GO 21142
21142: DISABLE
21143: LD_INT 0
21145: PPUSH
// begin enable ;
21146: ENABLE
// if not hInvincible then
21147: LD_EXP 81
21151: NOT
21152: IFFALSE 21156
// exit ;
21154: GO 21200
// for i in hInvincible do
21156: LD_ADDR_VAR 0 1
21160: PUSH
21161: LD_EXP 81
21165: PUSH
21166: FOR_IN
21167: IFFALSE 21198
// if GetLives ( i ) < 1000 then
21169: LD_VAR 0 1
21173: PPUSH
21174: CALL_OW 256
21178: PUSH
21179: LD_INT 1000
21181: LESS
21182: IFFALSE 21196
// SetLives ( i , 1000 ) ;
21184: LD_VAR 0 1
21188: PPUSH
21189: LD_INT 1000
21191: PPUSH
21192: CALL_OW 234
21196: GO 21166
21198: POP
21199: POP
// end ;
21200: PPOPN 1
21202: END
// export function hHackInvincible ; var i ; begin
21203: LD_INT 0
21205: PPUSH
21206: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21207: LD_ADDR_VAR 0 2
21211: PUSH
21212: LD_INT 2
21214: PUSH
21215: LD_INT 21
21217: PUSH
21218: LD_INT 1
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 21
21227: PUSH
21228: LD_INT 2
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: LIST
21239: PPUSH
21240: CALL_OW 69
21244: PUSH
21245: FOR_IN
21246: IFFALSE 21307
// if IsSelected ( i ) then
21248: LD_VAR 0 2
21252: PPUSH
21253: CALL_OW 306
21257: IFFALSE 21305
// begin if i in hInvincible then
21259: LD_VAR 0 2
21263: PUSH
21264: LD_EXP 81
21268: IN
21269: IFFALSE 21289
// hInvincible := hInvincible diff i else
21271: LD_ADDR_EXP 81
21275: PUSH
21276: LD_EXP 81
21280: PUSH
21281: LD_VAR 0 2
21285: DIFF
21286: ST_TO_ADDR
21287: GO 21305
// hInvincible := hInvincible union i ;
21289: LD_ADDR_EXP 81
21293: PUSH
21294: LD_EXP 81
21298: PUSH
21299: LD_VAR 0 2
21303: UNION
21304: ST_TO_ADDR
// end ;
21305: GO 21245
21307: POP
21308: POP
// end ;
21309: LD_VAR 0 1
21313: RET
// export function hHackInvisible ; var i , j ; begin
21314: LD_INT 0
21316: PPUSH
21317: PPUSH
21318: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21319: LD_ADDR_VAR 0 2
21323: PUSH
21324: LD_INT 21
21326: PUSH
21327: LD_INT 1
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PPUSH
21334: CALL_OW 69
21338: PUSH
21339: FOR_IN
21340: IFFALSE 21364
// if IsSelected ( i ) then
21342: LD_VAR 0 2
21346: PPUSH
21347: CALL_OW 306
21351: IFFALSE 21362
// ComForceInvisible ( i ) ;
21353: LD_VAR 0 2
21357: PPUSH
21358: CALL_OW 496
21362: GO 21339
21364: POP
21365: POP
// end ;
21366: LD_VAR 0 1
21370: RET
// export function hHackChangeYourSide ; begin
21371: LD_INT 0
21373: PPUSH
// if your_side = 8 then
21374: LD_OWVAR 2
21378: PUSH
21379: LD_INT 8
21381: EQUAL
21382: IFFALSE 21394
// your_side := 0 else
21384: LD_ADDR_OWVAR 2
21388: PUSH
21389: LD_INT 0
21391: ST_TO_ADDR
21392: GO 21408
// your_side := your_side + 1 ;
21394: LD_ADDR_OWVAR 2
21398: PUSH
21399: LD_OWVAR 2
21403: PUSH
21404: LD_INT 1
21406: PLUS
21407: ST_TO_ADDR
// end ;
21408: LD_VAR 0 1
21412: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21413: LD_INT 0
21415: PPUSH
21416: PPUSH
21417: PPUSH
// for i in all_units do
21418: LD_ADDR_VAR 0 2
21422: PUSH
21423: LD_OWVAR 3
21427: PUSH
21428: FOR_IN
21429: IFFALSE 21507
// if IsSelected ( i ) then
21431: LD_VAR 0 2
21435: PPUSH
21436: CALL_OW 306
21440: IFFALSE 21505
// begin j := GetSide ( i ) ;
21442: LD_ADDR_VAR 0 3
21446: PUSH
21447: LD_VAR 0 2
21451: PPUSH
21452: CALL_OW 255
21456: ST_TO_ADDR
// if j = 8 then
21457: LD_VAR 0 3
21461: PUSH
21462: LD_INT 8
21464: EQUAL
21465: IFFALSE 21477
// j := 0 else
21467: LD_ADDR_VAR 0 3
21471: PUSH
21472: LD_INT 0
21474: ST_TO_ADDR
21475: GO 21491
// j := j + 1 ;
21477: LD_ADDR_VAR 0 3
21481: PUSH
21482: LD_VAR 0 3
21486: PUSH
21487: LD_INT 1
21489: PLUS
21490: ST_TO_ADDR
// SetSide ( i , j ) ;
21491: LD_VAR 0 2
21495: PPUSH
21496: LD_VAR 0 3
21500: PPUSH
21501: CALL_OW 235
// end ;
21505: GO 21428
21507: POP
21508: POP
// end ;
21509: LD_VAR 0 1
21513: RET
// export function hHackFog ; begin
21514: LD_INT 0
21516: PPUSH
// FogOff ( true ) ;
21517: LD_INT 1
21519: PPUSH
21520: CALL_OW 344
// end ;
21524: LD_VAR 0 1
21528: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21529: LD_INT 0
21531: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21532: LD_VAR 0 1
21536: PPUSH
21537: LD_VAR 0 2
21541: PPUSH
21542: LD_VAR 0 3
21546: PPUSH
21547: LD_INT 1
21549: PPUSH
21550: LD_INT 1
21552: PPUSH
21553: CALL_OW 483
// CenterOnXY ( x , y ) ;
21557: LD_VAR 0 2
21561: PPUSH
21562: LD_VAR 0 3
21566: PPUSH
21567: CALL_OW 84
// end ;
21571: LD_VAR 0 4
21575: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21576: LD_INT 0
21578: PPUSH
21579: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21580: LD_VAR 0 1
21584: NOT
21585: PUSH
21586: LD_VAR 0 2
21590: PPUSH
21591: LD_VAR 0 3
21595: PPUSH
21596: CALL_OW 488
21600: NOT
21601: OR
21602: PUSH
21603: LD_VAR 0 1
21607: PPUSH
21608: CALL_OW 266
21612: PUSH
21613: LD_INT 3
21615: NONEQUAL
21616: PUSH
21617: LD_VAR 0 1
21621: PPUSH
21622: CALL_OW 247
21626: PUSH
21627: LD_INT 1
21629: EQUAL
21630: NOT
21631: AND
21632: OR
21633: IFFALSE 21637
// exit ;
21635: GO 21786
// if GetType ( factory ) = unit_human then
21637: LD_VAR 0 1
21641: PPUSH
21642: CALL_OW 247
21646: PUSH
21647: LD_INT 1
21649: EQUAL
21650: IFFALSE 21667
// factory := IsInUnit ( factory ) ;
21652: LD_ADDR_VAR 0 1
21656: PUSH
21657: LD_VAR 0 1
21661: PPUSH
21662: CALL_OW 310
21666: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21667: LD_VAR 0 1
21671: PPUSH
21672: CALL_OW 266
21676: PUSH
21677: LD_INT 3
21679: NONEQUAL
21680: IFFALSE 21684
// exit ;
21682: GO 21786
// if HexInfo ( x , y ) = factory then
21684: LD_VAR 0 2
21688: PPUSH
21689: LD_VAR 0 3
21693: PPUSH
21694: CALL_OW 428
21698: PUSH
21699: LD_VAR 0 1
21703: EQUAL
21704: IFFALSE 21731
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21706: LD_ADDR_EXP 82
21710: PUSH
21711: LD_EXP 82
21715: PPUSH
21716: LD_VAR 0 1
21720: PPUSH
21721: LD_INT 0
21723: PPUSH
21724: CALL_OW 1
21728: ST_TO_ADDR
21729: GO 21782
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21731: LD_ADDR_EXP 82
21735: PUSH
21736: LD_EXP 82
21740: PPUSH
21741: LD_VAR 0 1
21745: PPUSH
21746: LD_VAR 0 1
21750: PPUSH
21751: CALL_OW 255
21755: PUSH
21756: LD_VAR 0 1
21760: PUSH
21761: LD_VAR 0 2
21765: PUSH
21766: LD_VAR 0 3
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: PPUSH
21777: CALL_OW 1
21781: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21782: CALL 21791 0 0
// end ;
21786: LD_VAR 0 4
21790: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21791: LD_INT 0
21793: PPUSH
21794: PPUSH
21795: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21796: LD_STRING resetFactoryWaypoint();
21798: PPUSH
21799: CALL_OW 559
// if factoryWaypoints then
21803: LD_EXP 82
21807: IFFALSE 21933
// begin list := PrepareArray ( factoryWaypoints ) ;
21809: LD_ADDR_VAR 0 3
21813: PUSH
21814: LD_EXP 82
21818: PPUSH
21819: CALL 68310 0 1
21823: ST_TO_ADDR
// for i := 1 to list do
21824: LD_ADDR_VAR 0 2
21828: PUSH
21829: DOUBLE
21830: LD_INT 1
21832: DEC
21833: ST_TO_ADDR
21834: LD_VAR 0 3
21838: PUSH
21839: FOR_TO
21840: IFFALSE 21931
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21842: LD_STRING setFactoryWaypointXY(
21844: PUSH
21845: LD_VAR 0 3
21849: PUSH
21850: LD_VAR 0 2
21854: ARRAY
21855: PUSH
21856: LD_INT 1
21858: ARRAY
21859: STR
21860: PUSH
21861: LD_STRING ,
21863: STR
21864: PUSH
21865: LD_VAR 0 3
21869: PUSH
21870: LD_VAR 0 2
21874: ARRAY
21875: PUSH
21876: LD_INT 2
21878: ARRAY
21879: STR
21880: PUSH
21881: LD_STRING ,
21883: STR
21884: PUSH
21885: LD_VAR 0 3
21889: PUSH
21890: LD_VAR 0 2
21894: ARRAY
21895: PUSH
21896: LD_INT 3
21898: ARRAY
21899: STR
21900: PUSH
21901: LD_STRING ,
21903: STR
21904: PUSH
21905: LD_VAR 0 3
21909: PUSH
21910: LD_VAR 0 2
21914: ARRAY
21915: PUSH
21916: LD_INT 4
21918: ARRAY
21919: STR
21920: PUSH
21921: LD_STRING )
21923: STR
21924: PPUSH
21925: CALL_OW 559
21929: GO 21839
21931: POP
21932: POP
// end ; end ;
21933: LD_VAR 0 1
21937: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21938: LD_INT 0
21940: PPUSH
// if HexInfo ( x , y ) = warehouse then
21941: LD_VAR 0 2
21945: PPUSH
21946: LD_VAR 0 3
21950: PPUSH
21951: CALL_OW 428
21955: PUSH
21956: LD_VAR 0 1
21960: EQUAL
21961: IFFALSE 21988
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21963: LD_ADDR_EXP 83
21967: PUSH
21968: LD_EXP 83
21972: PPUSH
21973: LD_VAR 0 1
21977: PPUSH
21978: LD_INT 0
21980: PPUSH
21981: CALL_OW 1
21985: ST_TO_ADDR
21986: GO 22039
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21988: LD_ADDR_EXP 83
21992: PUSH
21993: LD_EXP 83
21997: PPUSH
21998: LD_VAR 0 1
22002: PPUSH
22003: LD_VAR 0 1
22007: PPUSH
22008: CALL_OW 255
22012: PUSH
22013: LD_VAR 0 1
22017: PUSH
22018: LD_VAR 0 2
22022: PUSH
22023: LD_VAR 0 3
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: PPUSH
22034: CALL_OW 1
22038: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22039: CALL 22048 0 0
// end ;
22043: LD_VAR 0 4
22047: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22048: LD_INT 0
22050: PPUSH
22051: PPUSH
22052: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22053: LD_STRING resetWarehouseGatheringPoints();
22055: PPUSH
22056: CALL_OW 559
// if warehouseGatheringPoints then
22060: LD_EXP 83
22064: IFFALSE 22190
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22066: LD_ADDR_VAR 0 3
22070: PUSH
22071: LD_EXP 83
22075: PPUSH
22076: CALL 68310 0 1
22080: ST_TO_ADDR
// for i := 1 to list do
22081: LD_ADDR_VAR 0 2
22085: PUSH
22086: DOUBLE
22087: LD_INT 1
22089: DEC
22090: ST_TO_ADDR
22091: LD_VAR 0 3
22095: PUSH
22096: FOR_TO
22097: IFFALSE 22188
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22099: LD_STRING setWarehouseGatheringPointXY(
22101: PUSH
22102: LD_VAR 0 3
22106: PUSH
22107: LD_VAR 0 2
22111: ARRAY
22112: PUSH
22113: LD_INT 1
22115: ARRAY
22116: STR
22117: PUSH
22118: LD_STRING ,
22120: STR
22121: PUSH
22122: LD_VAR 0 3
22126: PUSH
22127: LD_VAR 0 2
22131: ARRAY
22132: PUSH
22133: LD_INT 2
22135: ARRAY
22136: STR
22137: PUSH
22138: LD_STRING ,
22140: STR
22141: PUSH
22142: LD_VAR 0 3
22146: PUSH
22147: LD_VAR 0 2
22151: ARRAY
22152: PUSH
22153: LD_INT 3
22155: ARRAY
22156: STR
22157: PUSH
22158: LD_STRING ,
22160: STR
22161: PUSH
22162: LD_VAR 0 3
22166: PUSH
22167: LD_VAR 0 2
22171: ARRAY
22172: PUSH
22173: LD_INT 4
22175: ARRAY
22176: STR
22177: PUSH
22178: LD_STRING )
22180: STR
22181: PPUSH
22182: CALL_OW 559
22186: GO 22096
22188: POP
22189: POP
// end ; end ;
22190: LD_VAR 0 1
22194: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22195: LD_EXP 83
22199: IFFALSE 22884
22201: GO 22203
22203: DISABLE
22204: LD_INT 0
22206: PPUSH
22207: PPUSH
22208: PPUSH
22209: PPUSH
22210: PPUSH
22211: PPUSH
22212: PPUSH
22213: PPUSH
22214: PPUSH
// begin enable ;
22215: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22216: LD_ADDR_VAR 0 3
22220: PUSH
22221: LD_EXP 83
22225: PPUSH
22226: CALL 68310 0 1
22230: ST_TO_ADDR
// if not list then
22231: LD_VAR 0 3
22235: NOT
22236: IFFALSE 22240
// exit ;
22238: GO 22884
// for i := 1 to list do
22240: LD_ADDR_VAR 0 1
22244: PUSH
22245: DOUBLE
22246: LD_INT 1
22248: DEC
22249: ST_TO_ADDR
22250: LD_VAR 0 3
22254: PUSH
22255: FOR_TO
22256: IFFALSE 22882
// begin depot := list [ i ] [ 2 ] ;
22258: LD_ADDR_VAR 0 8
22262: PUSH
22263: LD_VAR 0 3
22267: PUSH
22268: LD_VAR 0 1
22272: ARRAY
22273: PUSH
22274: LD_INT 2
22276: ARRAY
22277: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22278: LD_ADDR_VAR 0 5
22282: PUSH
22283: LD_VAR 0 3
22287: PUSH
22288: LD_VAR 0 1
22292: ARRAY
22293: PUSH
22294: LD_INT 1
22296: ARRAY
22297: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22298: LD_VAR 0 8
22302: PPUSH
22303: CALL_OW 301
22307: PUSH
22308: LD_VAR 0 5
22312: PUSH
22313: LD_VAR 0 8
22317: PPUSH
22318: CALL_OW 255
22322: NONEQUAL
22323: OR
22324: IFFALSE 22353
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22326: LD_ADDR_EXP 83
22330: PUSH
22331: LD_EXP 83
22335: PPUSH
22336: LD_VAR 0 8
22340: PPUSH
22341: LD_INT 0
22343: PPUSH
22344: CALL_OW 1
22348: ST_TO_ADDR
// exit ;
22349: POP
22350: POP
22351: GO 22884
// end ; x := list [ i ] [ 3 ] ;
22353: LD_ADDR_VAR 0 6
22357: PUSH
22358: LD_VAR 0 3
22362: PUSH
22363: LD_VAR 0 1
22367: ARRAY
22368: PUSH
22369: LD_INT 3
22371: ARRAY
22372: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22373: LD_ADDR_VAR 0 7
22377: PUSH
22378: LD_VAR 0 3
22382: PUSH
22383: LD_VAR 0 1
22387: ARRAY
22388: PUSH
22389: LD_INT 4
22391: ARRAY
22392: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22393: LD_ADDR_VAR 0 9
22397: PUSH
22398: LD_VAR 0 6
22402: PPUSH
22403: LD_VAR 0 7
22407: PPUSH
22408: LD_INT 16
22410: PPUSH
22411: CALL 66898 0 3
22415: ST_TO_ADDR
// if not cratesNearbyPoint then
22416: LD_VAR 0 9
22420: NOT
22421: IFFALSE 22427
// exit ;
22423: POP
22424: POP
22425: GO 22884
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22427: LD_ADDR_VAR 0 4
22431: PUSH
22432: LD_INT 22
22434: PUSH
22435: LD_VAR 0 5
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 3
22446: PUSH
22447: LD_INT 60
22449: PUSH
22450: EMPTY
22451: LIST
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 91
22459: PUSH
22460: LD_VAR 0 8
22464: PUSH
22465: LD_INT 6
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 2
22475: PUSH
22476: LD_INT 25
22478: PUSH
22479: LD_INT 2
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 25
22488: PUSH
22489: LD_INT 16
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: LIST
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: PPUSH
22507: CALL_OW 69
22511: PUSH
22512: LD_VAR 0 8
22516: PPUSH
22517: CALL_OW 313
22521: PPUSH
22522: LD_INT 3
22524: PUSH
22525: LD_INT 60
22527: PUSH
22528: EMPTY
22529: LIST
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 2
22537: PUSH
22538: LD_INT 25
22540: PUSH
22541: LD_INT 2
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 25
22550: PUSH
22551: LD_INT 16
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: LIST
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PPUSH
22567: CALL_OW 72
22571: UNION
22572: ST_TO_ADDR
// if tmp then
22573: LD_VAR 0 4
22577: IFFALSE 22657
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22579: LD_ADDR_VAR 0 4
22583: PUSH
22584: LD_VAR 0 4
22588: PPUSH
22589: LD_INT 3
22591: PPUSH
22592: CALL 64867 0 2
22596: ST_TO_ADDR
// for j in tmp do
22597: LD_ADDR_VAR 0 2
22601: PUSH
22602: LD_VAR 0 4
22606: PUSH
22607: FOR_IN
22608: IFFALSE 22651
// begin if IsInUnit ( j ) then
22610: LD_VAR 0 2
22614: PPUSH
22615: CALL_OW 310
22619: IFFALSE 22630
// ComExit ( j ) ;
22621: LD_VAR 0 2
22625: PPUSH
22626: CALL 64950 0 1
// AddComCollect ( j , x , y ) ;
22630: LD_VAR 0 2
22634: PPUSH
22635: LD_VAR 0 6
22639: PPUSH
22640: LD_VAR 0 7
22644: PPUSH
22645: CALL_OW 177
// end ;
22649: GO 22607
22651: POP
22652: POP
// exit ;
22653: POP
22654: POP
22655: GO 22884
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22657: LD_ADDR_VAR 0 4
22661: PUSH
22662: LD_INT 22
22664: PUSH
22665: LD_VAR 0 5
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 91
22676: PUSH
22677: LD_VAR 0 8
22681: PUSH
22682: LD_INT 8
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 2
22692: PUSH
22693: LD_INT 34
22695: PUSH
22696: LD_INT 12
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 34
22705: PUSH
22706: LD_INT 51
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 34
22715: PUSH
22716: LD_INT 32
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 34
22725: PUSH
22726: LD_INT 89
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: LIST
22744: PPUSH
22745: CALL_OW 69
22749: ST_TO_ADDR
// if tmp then
22750: LD_VAR 0 4
22754: IFFALSE 22880
// begin for j in tmp do
22756: LD_ADDR_VAR 0 2
22760: PUSH
22761: LD_VAR 0 4
22765: PUSH
22766: FOR_IN
22767: IFFALSE 22878
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22769: LD_VAR 0 2
22773: PPUSH
22774: CALL_OW 262
22778: PUSH
22779: LD_INT 3
22781: EQUAL
22782: PUSH
22783: LD_VAR 0 2
22787: PPUSH
22788: CALL_OW 261
22792: PUSH
22793: LD_INT 20
22795: GREATER
22796: OR
22797: PUSH
22798: LD_VAR 0 2
22802: PPUSH
22803: CALL_OW 314
22807: NOT
22808: AND
22809: PUSH
22810: LD_VAR 0 2
22814: PPUSH
22815: CALL_OW 263
22819: PUSH
22820: LD_INT 1
22822: NONEQUAL
22823: PUSH
22824: LD_VAR 0 2
22828: PPUSH
22829: CALL_OW 311
22833: OR
22834: AND
22835: IFFALSE 22876
// begin ComCollect ( j , x , y ) ;
22837: LD_VAR 0 2
22841: PPUSH
22842: LD_VAR 0 6
22846: PPUSH
22847: LD_VAR 0 7
22851: PPUSH
22852: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22856: LD_VAR 0 2
22860: PPUSH
22861: LD_VAR 0 8
22865: PPUSH
22866: CALL_OW 172
// exit ;
22870: POP
22871: POP
22872: POP
22873: POP
22874: GO 22884
// end ;
22876: GO 22766
22878: POP
22879: POP
// end ; end ;
22880: GO 22255
22882: POP
22883: POP
// end ; end_of_file
22884: PPOPN 9
22886: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22887: LD_INT 0
22889: PPUSH
22890: PPUSH
22891: PPUSH
22892: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22893: LD_VAR 0 1
22897: PPUSH
22898: CALL_OW 264
22902: PUSH
22903: LD_INT 91
22905: EQUAL
22906: IFFALSE 22978
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22908: LD_INT 68
22910: PPUSH
22911: LD_VAR 0 1
22915: PPUSH
22916: CALL_OW 255
22920: PPUSH
22921: CALL_OW 321
22925: PUSH
22926: LD_INT 2
22928: EQUAL
22929: IFFALSE 22941
// eff := 70 else
22931: LD_ADDR_VAR 0 4
22935: PUSH
22936: LD_INT 70
22938: ST_TO_ADDR
22939: GO 22949
// eff := 30 ;
22941: LD_ADDR_VAR 0 4
22945: PUSH
22946: LD_INT 30
22948: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22949: LD_VAR 0 1
22953: PPUSH
22954: CALL_OW 250
22958: PPUSH
22959: LD_VAR 0 1
22963: PPUSH
22964: CALL_OW 251
22968: PPUSH
22969: LD_VAR 0 4
22973: PPUSH
22974: CALL_OW 495
// end ; end ;
22978: LD_VAR 0 2
22982: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22983: LD_INT 0
22985: PPUSH
// end ;
22986: LD_VAR 0 4
22990: RET
// export function SOS_Command ( cmd ) ; begin
22991: LD_INT 0
22993: PPUSH
// end ;
22994: LD_VAR 0 2
22998: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22999: LD_INT 0
23001: PPUSH
// end ;
23002: LD_VAR 0 6
23006: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
23007: LD_INT 0
23009: PPUSH
23010: PPUSH
// if not vehicle or not factory then
23011: LD_VAR 0 1
23015: NOT
23016: PUSH
23017: LD_VAR 0 2
23021: NOT
23022: OR
23023: IFFALSE 23027
// exit ;
23025: GO 23258
// if factoryWaypoints >= factory then
23027: LD_EXP 82
23031: PUSH
23032: LD_VAR 0 2
23036: GREATEREQUAL
23037: IFFALSE 23258
// if factoryWaypoints [ factory ] then
23039: LD_EXP 82
23043: PUSH
23044: LD_VAR 0 2
23048: ARRAY
23049: IFFALSE 23258
// begin if GetControl ( vehicle ) = control_manual then
23051: LD_VAR 0 1
23055: PPUSH
23056: CALL_OW 263
23060: PUSH
23061: LD_INT 1
23063: EQUAL
23064: IFFALSE 23145
// begin driver := IsDrivenBy ( vehicle ) ;
23066: LD_ADDR_VAR 0 4
23070: PUSH
23071: LD_VAR 0 1
23075: PPUSH
23076: CALL_OW 311
23080: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23081: LD_VAR 0 4
23085: PPUSH
23086: LD_EXP 82
23090: PUSH
23091: LD_VAR 0 2
23095: ARRAY
23096: PUSH
23097: LD_INT 3
23099: ARRAY
23100: PPUSH
23101: LD_EXP 82
23105: PUSH
23106: LD_VAR 0 2
23110: ARRAY
23111: PUSH
23112: LD_INT 4
23114: ARRAY
23115: PPUSH
23116: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23120: LD_VAR 0 4
23124: PPUSH
23125: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23129: LD_VAR 0 4
23133: PPUSH
23134: LD_VAR 0 2
23138: PPUSH
23139: CALL_OW 180
// end else
23143: GO 23258
// if GetControl ( vehicle ) = control_remote then
23145: LD_VAR 0 1
23149: PPUSH
23150: CALL_OW 263
23154: PUSH
23155: LD_INT 2
23157: EQUAL
23158: IFFALSE 23219
// begin wait ( 0 0$2 ) ;
23160: LD_INT 70
23162: PPUSH
23163: CALL_OW 67
// if Connect ( vehicle ) then
23167: LD_VAR 0 1
23171: PPUSH
23172: CALL 35282 0 1
23176: IFFALSE 23217
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23178: LD_VAR 0 1
23182: PPUSH
23183: LD_EXP 82
23187: PUSH
23188: LD_VAR 0 2
23192: ARRAY
23193: PUSH
23194: LD_INT 3
23196: ARRAY
23197: PPUSH
23198: LD_EXP 82
23202: PUSH
23203: LD_VAR 0 2
23207: ARRAY
23208: PUSH
23209: LD_INT 4
23211: ARRAY
23212: PPUSH
23213: CALL_OW 171
// end else
23217: GO 23258
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23219: LD_VAR 0 1
23223: PPUSH
23224: LD_EXP 82
23228: PUSH
23229: LD_VAR 0 2
23233: ARRAY
23234: PUSH
23235: LD_INT 3
23237: ARRAY
23238: PPUSH
23239: LD_EXP 82
23243: PUSH
23244: LD_VAR 0 2
23248: ARRAY
23249: PUSH
23250: LD_INT 4
23252: ARRAY
23253: PPUSH
23254: CALL_OW 171
// end ; end ;
23258: LD_VAR 0 3
23262: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23263: LD_INT 0
23265: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23266: LD_VAR 0 1
23270: PUSH
23271: LD_INT 250
23273: EQUAL
23274: PUSH
23275: LD_VAR 0 2
23279: PPUSH
23280: CALL_OW 264
23284: PUSH
23285: LD_INT 81
23287: EQUAL
23288: AND
23289: IFFALSE 23310
// MinerPlaceMine ( unit , x , y ) ;
23291: LD_VAR 0 2
23295: PPUSH
23296: LD_VAR 0 4
23300: PPUSH
23301: LD_VAR 0 5
23305: PPUSH
23306: CALL 25695 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23310: LD_VAR 0 1
23314: PUSH
23315: LD_INT 251
23317: EQUAL
23318: PUSH
23319: LD_VAR 0 2
23323: PPUSH
23324: CALL_OW 264
23328: PUSH
23329: LD_INT 81
23331: EQUAL
23332: AND
23333: IFFALSE 23354
// MinerDetonateMine ( unit , x , y ) ;
23335: LD_VAR 0 2
23339: PPUSH
23340: LD_VAR 0 4
23344: PPUSH
23345: LD_VAR 0 5
23349: PPUSH
23350: CALL 25970 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23354: LD_VAR 0 1
23358: PUSH
23359: LD_INT 252
23361: EQUAL
23362: PUSH
23363: LD_VAR 0 2
23367: PPUSH
23368: CALL_OW 264
23372: PUSH
23373: LD_INT 81
23375: EQUAL
23376: AND
23377: IFFALSE 23398
// MinerCreateMinefield ( unit , x , y ) ;
23379: LD_VAR 0 2
23383: PPUSH
23384: LD_VAR 0 4
23388: PPUSH
23389: LD_VAR 0 5
23393: PPUSH
23394: CALL 26387 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23398: LD_VAR 0 1
23402: PUSH
23403: LD_INT 253
23405: EQUAL
23406: PUSH
23407: LD_VAR 0 2
23411: PPUSH
23412: CALL_OW 257
23416: PUSH
23417: LD_INT 5
23419: EQUAL
23420: AND
23421: IFFALSE 23442
// ComBinocular ( unit , x , y ) ;
23423: LD_VAR 0 2
23427: PPUSH
23428: LD_VAR 0 4
23432: PPUSH
23433: LD_VAR 0 5
23437: PPUSH
23438: CALL 26756 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23442: LD_VAR 0 1
23446: PUSH
23447: LD_INT 254
23449: EQUAL
23450: PUSH
23451: LD_VAR 0 2
23455: PPUSH
23456: CALL_OW 264
23460: PUSH
23461: LD_INT 99
23463: EQUAL
23464: AND
23465: PUSH
23466: LD_VAR 0 3
23470: PPUSH
23471: CALL_OW 263
23475: PUSH
23476: LD_INT 3
23478: EQUAL
23479: AND
23480: IFFALSE 23496
// HackDestroyVehicle ( unit , selectedUnit ) ;
23482: LD_VAR 0 2
23486: PPUSH
23487: LD_VAR 0 3
23491: PPUSH
23492: CALL 25059 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23496: LD_VAR 0 1
23500: PUSH
23501: LD_INT 255
23503: EQUAL
23504: PUSH
23505: LD_VAR 0 2
23509: PPUSH
23510: CALL_OW 264
23514: PUSH
23515: LD_INT 14
23517: PUSH
23518: LD_INT 53
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: IN
23525: AND
23526: PUSH
23527: LD_VAR 0 4
23531: PPUSH
23532: LD_VAR 0 5
23536: PPUSH
23537: CALL_OW 488
23541: AND
23542: IFFALSE 23566
// CutTreeXYR ( unit , x , y , 12 ) ;
23544: LD_VAR 0 2
23548: PPUSH
23549: LD_VAR 0 4
23553: PPUSH
23554: LD_VAR 0 5
23558: PPUSH
23559: LD_INT 12
23561: PPUSH
23562: CALL 23629 0 4
// if cmd = 256 then
23566: LD_VAR 0 1
23570: PUSH
23571: LD_INT 256
23573: EQUAL
23574: IFFALSE 23595
// SetFactoryWaypoint ( unit , x , y ) ;
23576: LD_VAR 0 2
23580: PPUSH
23581: LD_VAR 0 4
23585: PPUSH
23586: LD_VAR 0 5
23590: PPUSH
23591: CALL 21576 0 3
// if cmd = 257 then
23595: LD_VAR 0 1
23599: PUSH
23600: LD_INT 257
23602: EQUAL
23603: IFFALSE 23624
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23605: LD_VAR 0 2
23609: PPUSH
23610: LD_VAR 0 4
23614: PPUSH
23615: LD_VAR 0 5
23619: PPUSH
23620: CALL 21938 0 3
// end ;
23624: LD_VAR 0 6
23628: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23629: LD_INT 0
23631: PPUSH
23632: PPUSH
23633: PPUSH
23634: PPUSH
23635: PPUSH
23636: PPUSH
23637: PPUSH
23638: PPUSH
23639: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23640: LD_VAR 0 1
23644: NOT
23645: PUSH
23646: LD_VAR 0 2
23650: PPUSH
23651: LD_VAR 0 3
23655: PPUSH
23656: CALL_OW 488
23660: NOT
23661: OR
23662: PUSH
23663: LD_VAR 0 4
23667: NOT
23668: OR
23669: IFFALSE 23673
// exit ;
23671: GO 24013
// list := [ ] ;
23673: LD_ADDR_VAR 0 13
23677: PUSH
23678: EMPTY
23679: ST_TO_ADDR
// if x - r < 0 then
23680: LD_VAR 0 2
23684: PUSH
23685: LD_VAR 0 4
23689: MINUS
23690: PUSH
23691: LD_INT 0
23693: LESS
23694: IFFALSE 23706
// min_x := 0 else
23696: LD_ADDR_VAR 0 7
23700: PUSH
23701: LD_INT 0
23703: ST_TO_ADDR
23704: GO 23722
// min_x := x - r ;
23706: LD_ADDR_VAR 0 7
23710: PUSH
23711: LD_VAR 0 2
23715: PUSH
23716: LD_VAR 0 4
23720: MINUS
23721: ST_TO_ADDR
// if y - r < 0 then
23722: LD_VAR 0 3
23726: PUSH
23727: LD_VAR 0 4
23731: MINUS
23732: PUSH
23733: LD_INT 0
23735: LESS
23736: IFFALSE 23748
// min_y := 0 else
23738: LD_ADDR_VAR 0 8
23742: PUSH
23743: LD_INT 0
23745: ST_TO_ADDR
23746: GO 23764
// min_y := y - r ;
23748: LD_ADDR_VAR 0 8
23752: PUSH
23753: LD_VAR 0 3
23757: PUSH
23758: LD_VAR 0 4
23762: MINUS
23763: ST_TO_ADDR
// max_x := x + r ;
23764: LD_ADDR_VAR 0 9
23768: PUSH
23769: LD_VAR 0 2
23773: PUSH
23774: LD_VAR 0 4
23778: PLUS
23779: ST_TO_ADDR
// max_y := y + r ;
23780: LD_ADDR_VAR 0 10
23784: PUSH
23785: LD_VAR 0 3
23789: PUSH
23790: LD_VAR 0 4
23794: PLUS
23795: ST_TO_ADDR
// for _x = min_x to max_x do
23796: LD_ADDR_VAR 0 11
23800: PUSH
23801: DOUBLE
23802: LD_VAR 0 7
23806: DEC
23807: ST_TO_ADDR
23808: LD_VAR 0 9
23812: PUSH
23813: FOR_TO
23814: IFFALSE 23931
// for _y = min_y to max_y do
23816: LD_ADDR_VAR 0 12
23820: PUSH
23821: DOUBLE
23822: LD_VAR 0 8
23826: DEC
23827: ST_TO_ADDR
23828: LD_VAR 0 10
23832: PUSH
23833: FOR_TO
23834: IFFALSE 23927
// begin if not ValidHex ( _x , _y ) then
23836: LD_VAR 0 11
23840: PPUSH
23841: LD_VAR 0 12
23845: PPUSH
23846: CALL_OW 488
23850: NOT
23851: IFFALSE 23855
// continue ;
23853: GO 23833
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23855: LD_VAR 0 11
23859: PPUSH
23860: LD_VAR 0 12
23864: PPUSH
23865: CALL_OW 351
23869: PUSH
23870: LD_VAR 0 11
23874: PPUSH
23875: LD_VAR 0 12
23879: PPUSH
23880: CALL_OW 554
23884: AND
23885: IFFALSE 23925
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23887: LD_ADDR_VAR 0 13
23891: PUSH
23892: LD_VAR 0 13
23896: PPUSH
23897: LD_VAR 0 13
23901: PUSH
23902: LD_INT 1
23904: PLUS
23905: PPUSH
23906: LD_VAR 0 11
23910: PUSH
23911: LD_VAR 0 12
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PPUSH
23920: CALL_OW 2
23924: ST_TO_ADDR
// end ;
23925: GO 23833
23927: POP
23928: POP
23929: GO 23813
23931: POP
23932: POP
// if not list then
23933: LD_VAR 0 13
23937: NOT
23938: IFFALSE 23942
// exit ;
23940: GO 24013
// for i in list do
23942: LD_ADDR_VAR 0 6
23946: PUSH
23947: LD_VAR 0 13
23951: PUSH
23952: FOR_IN
23953: IFFALSE 24011
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23955: LD_VAR 0 1
23959: PPUSH
23960: LD_STRING M
23962: PUSH
23963: LD_VAR 0 6
23967: PUSH
23968: LD_INT 1
23970: ARRAY
23971: PUSH
23972: LD_VAR 0 6
23976: PUSH
23977: LD_INT 2
23979: ARRAY
23980: PUSH
23981: LD_INT 0
23983: PUSH
23984: LD_INT 0
23986: PUSH
23987: LD_INT 0
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: PUSH
24002: EMPTY
24003: LIST
24004: PPUSH
24005: CALL_OW 447
24009: GO 23952
24011: POP
24012: POP
// end ;
24013: LD_VAR 0 5
24017: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24018: LD_EXP 85
24022: NOT
24023: IFFALSE 24073
24025: GO 24027
24027: DISABLE
// begin initHack := true ;
24028: LD_ADDR_EXP 85
24032: PUSH
24033: LD_INT 1
24035: ST_TO_ADDR
// hackTanks := [ ] ;
24036: LD_ADDR_EXP 86
24040: PUSH
24041: EMPTY
24042: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24043: LD_ADDR_EXP 87
24047: PUSH
24048: EMPTY
24049: ST_TO_ADDR
// hackLimit := 3 ;
24050: LD_ADDR_EXP 88
24054: PUSH
24055: LD_INT 3
24057: ST_TO_ADDR
// hackDist := 12 ;
24058: LD_ADDR_EXP 89
24062: PUSH
24063: LD_INT 12
24065: ST_TO_ADDR
// hackCounter := [ ] ;
24066: LD_ADDR_EXP 90
24070: PUSH
24071: EMPTY
24072: ST_TO_ADDR
// end ;
24073: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24074: LD_EXP 85
24078: PUSH
24079: LD_INT 34
24081: PUSH
24082: LD_INT 99
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PPUSH
24089: CALL_OW 69
24093: AND
24094: IFFALSE 24347
24096: GO 24098
24098: DISABLE
24099: LD_INT 0
24101: PPUSH
24102: PPUSH
// begin enable ;
24103: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24104: LD_ADDR_VAR 0 1
24108: PUSH
24109: LD_INT 34
24111: PUSH
24112: LD_INT 99
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PPUSH
24119: CALL_OW 69
24123: PUSH
24124: FOR_IN
24125: IFFALSE 24345
// begin if not i in hackTanks then
24127: LD_VAR 0 1
24131: PUSH
24132: LD_EXP 86
24136: IN
24137: NOT
24138: IFFALSE 24221
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24140: LD_ADDR_EXP 86
24144: PUSH
24145: LD_EXP 86
24149: PPUSH
24150: LD_EXP 86
24154: PUSH
24155: LD_INT 1
24157: PLUS
24158: PPUSH
24159: LD_VAR 0 1
24163: PPUSH
24164: CALL_OW 1
24168: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24169: LD_ADDR_EXP 87
24173: PUSH
24174: LD_EXP 87
24178: PPUSH
24179: LD_EXP 87
24183: PUSH
24184: LD_INT 1
24186: PLUS
24187: PPUSH
24188: EMPTY
24189: PPUSH
24190: CALL_OW 1
24194: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24195: LD_ADDR_EXP 90
24199: PUSH
24200: LD_EXP 90
24204: PPUSH
24205: LD_EXP 90
24209: PUSH
24210: LD_INT 1
24212: PLUS
24213: PPUSH
24214: EMPTY
24215: PPUSH
24216: CALL_OW 1
24220: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24221: LD_VAR 0 1
24225: PPUSH
24226: CALL_OW 302
24230: NOT
24231: IFFALSE 24244
// begin HackUnlinkAll ( i ) ;
24233: LD_VAR 0 1
24237: PPUSH
24238: CALL 24350 0 1
// continue ;
24242: GO 24124
// end ; HackCheckCapturedStatus ( i ) ;
24244: LD_VAR 0 1
24248: PPUSH
24249: CALL 24793 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24253: LD_ADDR_VAR 0 2
24257: PUSH
24258: LD_INT 81
24260: PUSH
24261: LD_VAR 0 1
24265: PPUSH
24266: CALL_OW 255
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 33
24277: PUSH
24278: LD_INT 3
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 91
24287: PUSH
24288: LD_VAR 0 1
24292: PUSH
24293: LD_EXP 89
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 50
24305: PUSH
24306: EMPTY
24307: LIST
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: PPUSH
24315: CALL_OW 69
24319: ST_TO_ADDR
// if not tmp then
24320: LD_VAR 0 2
24324: NOT
24325: IFFALSE 24329
// continue ;
24327: GO 24124
// HackLink ( i , tmp ) ;
24329: LD_VAR 0 1
24333: PPUSH
24334: LD_VAR 0 2
24338: PPUSH
24339: CALL 24486 0 2
// end ;
24343: GO 24124
24345: POP
24346: POP
// end ;
24347: PPOPN 2
24349: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24350: LD_INT 0
24352: PPUSH
24353: PPUSH
24354: PPUSH
// if not hack in hackTanks then
24355: LD_VAR 0 1
24359: PUSH
24360: LD_EXP 86
24364: IN
24365: NOT
24366: IFFALSE 24370
// exit ;
24368: GO 24481
// index := GetElementIndex ( hackTanks , hack ) ;
24370: LD_ADDR_VAR 0 4
24374: PUSH
24375: LD_EXP 86
24379: PPUSH
24380: LD_VAR 0 1
24384: PPUSH
24385: CALL 32098 0 2
24389: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24390: LD_EXP 87
24394: PUSH
24395: LD_VAR 0 4
24399: ARRAY
24400: IFFALSE 24481
// begin for i in hackTanksCaptured [ index ] do
24402: LD_ADDR_VAR 0 3
24406: PUSH
24407: LD_EXP 87
24411: PUSH
24412: LD_VAR 0 4
24416: ARRAY
24417: PUSH
24418: FOR_IN
24419: IFFALSE 24445
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24421: LD_VAR 0 3
24425: PUSH
24426: LD_INT 1
24428: ARRAY
24429: PPUSH
24430: LD_VAR 0 3
24434: PUSH
24435: LD_INT 2
24437: ARRAY
24438: PPUSH
24439: CALL_OW 235
24443: GO 24418
24445: POP
24446: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24447: LD_ADDR_EXP 87
24451: PUSH
24452: LD_EXP 87
24456: PPUSH
24457: LD_VAR 0 4
24461: PPUSH
24462: EMPTY
24463: PPUSH
24464: CALL_OW 1
24468: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24469: LD_VAR 0 1
24473: PPUSH
24474: LD_INT 0
24476: PPUSH
24477: CALL_OW 505
// end ; end ;
24481: LD_VAR 0 2
24485: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24486: LD_INT 0
24488: PPUSH
24489: PPUSH
24490: PPUSH
// if not hack in hackTanks or not vehicles then
24491: LD_VAR 0 1
24495: PUSH
24496: LD_EXP 86
24500: IN
24501: NOT
24502: PUSH
24503: LD_VAR 0 2
24507: NOT
24508: OR
24509: IFFALSE 24513
// exit ;
24511: GO 24788
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24513: LD_ADDR_VAR 0 2
24517: PUSH
24518: LD_VAR 0 1
24522: PPUSH
24523: LD_VAR 0 2
24527: PPUSH
24528: LD_INT 1
24530: PPUSH
24531: LD_INT 1
24533: PPUSH
24534: CALL 32748 0 4
24538: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24539: LD_ADDR_VAR 0 5
24543: PUSH
24544: LD_EXP 86
24548: PPUSH
24549: LD_VAR 0 1
24553: PPUSH
24554: CALL 32098 0 2
24558: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24559: LD_EXP 87
24563: PUSH
24564: LD_VAR 0 5
24568: ARRAY
24569: PUSH
24570: LD_EXP 88
24574: LESS
24575: IFFALSE 24764
// begin for i := 1 to vehicles do
24577: LD_ADDR_VAR 0 4
24581: PUSH
24582: DOUBLE
24583: LD_INT 1
24585: DEC
24586: ST_TO_ADDR
24587: LD_VAR 0 2
24591: PUSH
24592: FOR_TO
24593: IFFALSE 24762
// begin if hackTanksCaptured [ index ] = hackLimit then
24595: LD_EXP 87
24599: PUSH
24600: LD_VAR 0 5
24604: ARRAY
24605: PUSH
24606: LD_EXP 88
24610: EQUAL
24611: IFFALSE 24615
// break ;
24613: GO 24762
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24615: LD_ADDR_EXP 90
24619: PUSH
24620: LD_EXP 90
24624: PPUSH
24625: LD_VAR 0 5
24629: PPUSH
24630: LD_EXP 90
24634: PUSH
24635: LD_VAR 0 5
24639: ARRAY
24640: PUSH
24641: LD_INT 1
24643: PLUS
24644: PPUSH
24645: CALL_OW 1
24649: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24650: LD_ADDR_EXP 87
24654: PUSH
24655: LD_EXP 87
24659: PPUSH
24660: LD_VAR 0 5
24664: PUSH
24665: LD_EXP 87
24669: PUSH
24670: LD_VAR 0 5
24674: ARRAY
24675: PUSH
24676: LD_INT 1
24678: PLUS
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PPUSH
24684: LD_VAR 0 2
24688: PUSH
24689: LD_VAR 0 4
24693: ARRAY
24694: PUSH
24695: LD_VAR 0 2
24699: PUSH
24700: LD_VAR 0 4
24704: ARRAY
24705: PPUSH
24706: CALL_OW 255
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PPUSH
24715: CALL 32313 0 3
24719: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24720: LD_VAR 0 2
24724: PUSH
24725: LD_VAR 0 4
24729: ARRAY
24730: PPUSH
24731: LD_VAR 0 1
24735: PPUSH
24736: CALL_OW 255
24740: PPUSH
24741: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24745: LD_VAR 0 2
24749: PUSH
24750: LD_VAR 0 4
24754: ARRAY
24755: PPUSH
24756: CALL_OW 141
// end ;
24760: GO 24592
24762: POP
24763: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24764: LD_VAR 0 1
24768: PPUSH
24769: LD_EXP 87
24773: PUSH
24774: LD_VAR 0 5
24778: ARRAY
24779: PUSH
24780: LD_INT 0
24782: PLUS
24783: PPUSH
24784: CALL_OW 505
// end ;
24788: LD_VAR 0 3
24792: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24793: LD_INT 0
24795: PPUSH
24796: PPUSH
24797: PPUSH
24798: PPUSH
// if not hack in hackTanks then
24799: LD_VAR 0 1
24803: PUSH
24804: LD_EXP 86
24808: IN
24809: NOT
24810: IFFALSE 24814
// exit ;
24812: GO 25054
// index := GetElementIndex ( hackTanks , hack ) ;
24814: LD_ADDR_VAR 0 4
24818: PUSH
24819: LD_EXP 86
24823: PPUSH
24824: LD_VAR 0 1
24828: PPUSH
24829: CALL 32098 0 2
24833: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24834: LD_ADDR_VAR 0 3
24838: PUSH
24839: DOUBLE
24840: LD_EXP 87
24844: PUSH
24845: LD_VAR 0 4
24849: ARRAY
24850: INC
24851: ST_TO_ADDR
24852: LD_INT 1
24854: PUSH
24855: FOR_DOWNTO
24856: IFFALSE 25028
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24858: LD_ADDR_VAR 0 5
24862: PUSH
24863: LD_EXP 87
24867: PUSH
24868: LD_VAR 0 4
24872: ARRAY
24873: PUSH
24874: LD_VAR 0 3
24878: ARRAY
24879: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24880: LD_VAR 0 5
24884: PUSH
24885: LD_INT 1
24887: ARRAY
24888: PPUSH
24889: CALL_OW 302
24893: NOT
24894: PUSH
24895: LD_VAR 0 5
24899: PUSH
24900: LD_INT 1
24902: ARRAY
24903: PPUSH
24904: CALL_OW 255
24908: PUSH
24909: LD_VAR 0 1
24913: PPUSH
24914: CALL_OW 255
24918: NONEQUAL
24919: OR
24920: IFFALSE 25026
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24922: LD_VAR 0 5
24926: PUSH
24927: LD_INT 1
24929: ARRAY
24930: PPUSH
24931: CALL_OW 305
24935: PUSH
24936: LD_VAR 0 5
24940: PUSH
24941: LD_INT 1
24943: ARRAY
24944: PPUSH
24945: CALL_OW 255
24949: PUSH
24950: LD_VAR 0 1
24954: PPUSH
24955: CALL_OW 255
24959: EQUAL
24960: AND
24961: IFFALSE 24985
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24963: LD_VAR 0 5
24967: PUSH
24968: LD_INT 1
24970: ARRAY
24971: PPUSH
24972: LD_VAR 0 5
24976: PUSH
24977: LD_INT 2
24979: ARRAY
24980: PPUSH
24981: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24985: LD_ADDR_EXP 87
24989: PUSH
24990: LD_EXP 87
24994: PPUSH
24995: LD_VAR 0 4
24999: PPUSH
25000: LD_EXP 87
25004: PUSH
25005: LD_VAR 0 4
25009: ARRAY
25010: PPUSH
25011: LD_VAR 0 3
25015: PPUSH
25016: CALL_OW 3
25020: PPUSH
25021: CALL_OW 1
25025: ST_TO_ADDR
// end ; end ;
25026: GO 24855
25028: POP
25029: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25030: LD_VAR 0 1
25034: PPUSH
25035: LD_EXP 87
25039: PUSH
25040: LD_VAR 0 4
25044: ARRAY
25045: PUSH
25046: LD_INT 0
25048: PLUS
25049: PPUSH
25050: CALL_OW 505
// end ;
25054: LD_VAR 0 2
25058: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25059: LD_INT 0
25061: PPUSH
25062: PPUSH
25063: PPUSH
25064: PPUSH
// if not hack in hackTanks then
25065: LD_VAR 0 1
25069: PUSH
25070: LD_EXP 86
25074: IN
25075: NOT
25076: IFFALSE 25080
// exit ;
25078: GO 25165
// index := GetElementIndex ( hackTanks , hack ) ;
25080: LD_ADDR_VAR 0 5
25084: PUSH
25085: LD_EXP 86
25089: PPUSH
25090: LD_VAR 0 1
25094: PPUSH
25095: CALL 32098 0 2
25099: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25100: LD_ADDR_VAR 0 4
25104: PUSH
25105: DOUBLE
25106: LD_INT 1
25108: DEC
25109: ST_TO_ADDR
25110: LD_EXP 87
25114: PUSH
25115: LD_VAR 0 5
25119: ARRAY
25120: PUSH
25121: FOR_TO
25122: IFFALSE 25163
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25124: LD_EXP 87
25128: PUSH
25129: LD_VAR 0 5
25133: ARRAY
25134: PUSH
25135: LD_VAR 0 4
25139: ARRAY
25140: PUSH
25141: LD_INT 1
25143: ARRAY
25144: PUSH
25145: LD_VAR 0 2
25149: EQUAL
25150: IFFALSE 25161
// KillUnit ( vehicle ) ;
25152: LD_VAR 0 2
25156: PPUSH
25157: CALL_OW 66
25161: GO 25121
25163: POP
25164: POP
// end ;
25165: LD_VAR 0 3
25169: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25170: LD_EXP 91
25174: NOT
25175: IFFALSE 25210
25177: GO 25179
25179: DISABLE
// begin initMiner := true ;
25180: LD_ADDR_EXP 91
25184: PUSH
25185: LD_INT 1
25187: ST_TO_ADDR
// minersList := [ ] ;
25188: LD_ADDR_EXP 92
25192: PUSH
25193: EMPTY
25194: ST_TO_ADDR
// minerMinesList := [ ] ;
25195: LD_ADDR_EXP 93
25199: PUSH
25200: EMPTY
25201: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25202: LD_ADDR_EXP 94
25206: PUSH
25207: LD_INT 5
25209: ST_TO_ADDR
// end ;
25210: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25211: LD_EXP 91
25215: PUSH
25216: LD_INT 34
25218: PUSH
25219: LD_INT 81
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PPUSH
25226: CALL_OW 69
25230: AND
25231: IFFALSE 25692
25233: GO 25235
25235: DISABLE
25236: LD_INT 0
25238: PPUSH
25239: PPUSH
25240: PPUSH
25241: PPUSH
// begin enable ;
25242: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25243: LD_ADDR_VAR 0 1
25247: PUSH
25248: LD_INT 34
25250: PUSH
25251: LD_INT 81
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PPUSH
25258: CALL_OW 69
25262: PUSH
25263: FOR_IN
25264: IFFALSE 25336
// begin if not i in minersList then
25266: LD_VAR 0 1
25270: PUSH
25271: LD_EXP 92
25275: IN
25276: NOT
25277: IFFALSE 25334
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25279: LD_ADDR_EXP 92
25283: PUSH
25284: LD_EXP 92
25288: PPUSH
25289: LD_EXP 92
25293: PUSH
25294: LD_INT 1
25296: PLUS
25297: PPUSH
25298: LD_VAR 0 1
25302: PPUSH
25303: CALL_OW 1
25307: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25308: LD_ADDR_EXP 93
25312: PUSH
25313: LD_EXP 93
25317: PPUSH
25318: LD_EXP 93
25322: PUSH
25323: LD_INT 1
25325: PLUS
25326: PPUSH
25327: EMPTY
25328: PPUSH
25329: CALL_OW 1
25333: ST_TO_ADDR
// end end ;
25334: GO 25263
25336: POP
25337: POP
// for i := minerMinesList downto 1 do
25338: LD_ADDR_VAR 0 1
25342: PUSH
25343: DOUBLE
25344: LD_EXP 93
25348: INC
25349: ST_TO_ADDR
25350: LD_INT 1
25352: PUSH
25353: FOR_DOWNTO
25354: IFFALSE 25690
// begin if IsLive ( minersList [ i ] ) then
25356: LD_EXP 92
25360: PUSH
25361: LD_VAR 0 1
25365: ARRAY
25366: PPUSH
25367: CALL_OW 300
25371: IFFALSE 25399
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25373: LD_EXP 92
25377: PUSH
25378: LD_VAR 0 1
25382: ARRAY
25383: PPUSH
25384: LD_EXP 93
25388: PUSH
25389: LD_VAR 0 1
25393: ARRAY
25394: PPUSH
25395: CALL_OW 505
// if not minerMinesList [ i ] then
25399: LD_EXP 93
25403: PUSH
25404: LD_VAR 0 1
25408: ARRAY
25409: NOT
25410: IFFALSE 25414
// continue ;
25412: GO 25353
// for j := minerMinesList [ i ] downto 1 do
25414: LD_ADDR_VAR 0 2
25418: PUSH
25419: DOUBLE
25420: LD_EXP 93
25424: PUSH
25425: LD_VAR 0 1
25429: ARRAY
25430: INC
25431: ST_TO_ADDR
25432: LD_INT 1
25434: PUSH
25435: FOR_DOWNTO
25436: IFFALSE 25686
// begin side := GetSide ( minersList [ i ] ) ;
25438: LD_ADDR_VAR 0 3
25442: PUSH
25443: LD_EXP 92
25447: PUSH
25448: LD_VAR 0 1
25452: ARRAY
25453: PPUSH
25454: CALL_OW 255
25458: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25459: LD_ADDR_VAR 0 4
25463: PUSH
25464: LD_EXP 93
25468: PUSH
25469: LD_VAR 0 1
25473: ARRAY
25474: PUSH
25475: LD_VAR 0 2
25479: ARRAY
25480: PUSH
25481: LD_INT 1
25483: ARRAY
25484: PPUSH
25485: LD_EXP 93
25489: PUSH
25490: LD_VAR 0 1
25494: ARRAY
25495: PUSH
25496: LD_VAR 0 2
25500: ARRAY
25501: PUSH
25502: LD_INT 2
25504: ARRAY
25505: PPUSH
25506: CALL_OW 428
25510: ST_TO_ADDR
// if not tmp then
25511: LD_VAR 0 4
25515: NOT
25516: IFFALSE 25520
// continue ;
25518: GO 25435
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25520: LD_VAR 0 4
25524: PUSH
25525: LD_INT 81
25527: PUSH
25528: LD_VAR 0 3
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PPUSH
25537: CALL_OW 69
25541: IN
25542: PUSH
25543: LD_EXP 93
25547: PUSH
25548: LD_VAR 0 1
25552: ARRAY
25553: PUSH
25554: LD_VAR 0 2
25558: ARRAY
25559: PUSH
25560: LD_INT 1
25562: ARRAY
25563: PPUSH
25564: LD_EXP 93
25568: PUSH
25569: LD_VAR 0 1
25573: ARRAY
25574: PUSH
25575: LD_VAR 0 2
25579: ARRAY
25580: PUSH
25581: LD_INT 2
25583: ARRAY
25584: PPUSH
25585: CALL_OW 458
25589: AND
25590: IFFALSE 25684
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25592: LD_EXP 93
25596: PUSH
25597: LD_VAR 0 1
25601: ARRAY
25602: PUSH
25603: LD_VAR 0 2
25607: ARRAY
25608: PUSH
25609: LD_INT 1
25611: ARRAY
25612: PPUSH
25613: LD_EXP 93
25617: PUSH
25618: LD_VAR 0 1
25622: ARRAY
25623: PUSH
25624: LD_VAR 0 2
25628: ARRAY
25629: PUSH
25630: LD_INT 2
25632: ARRAY
25633: PPUSH
25634: LD_VAR 0 3
25638: PPUSH
25639: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25643: LD_ADDR_EXP 93
25647: PUSH
25648: LD_EXP 93
25652: PPUSH
25653: LD_VAR 0 1
25657: PPUSH
25658: LD_EXP 93
25662: PUSH
25663: LD_VAR 0 1
25667: ARRAY
25668: PPUSH
25669: LD_VAR 0 2
25673: PPUSH
25674: CALL_OW 3
25678: PPUSH
25679: CALL_OW 1
25683: ST_TO_ADDR
// end ; end ;
25684: GO 25435
25686: POP
25687: POP
// end ;
25688: GO 25353
25690: POP
25691: POP
// end ;
25692: PPOPN 4
25694: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25695: LD_INT 0
25697: PPUSH
25698: PPUSH
// result := false ;
25699: LD_ADDR_VAR 0 4
25703: PUSH
25704: LD_INT 0
25706: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25707: LD_VAR 0 1
25711: PPUSH
25712: CALL_OW 264
25716: PUSH
25717: LD_INT 81
25719: EQUAL
25720: NOT
25721: IFFALSE 25725
// exit ;
25723: GO 25965
// index := GetElementIndex ( minersList , unit ) ;
25725: LD_ADDR_VAR 0 5
25729: PUSH
25730: LD_EXP 92
25734: PPUSH
25735: LD_VAR 0 1
25739: PPUSH
25740: CALL 32098 0 2
25744: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25745: LD_EXP 93
25749: PUSH
25750: LD_VAR 0 5
25754: ARRAY
25755: PUSH
25756: LD_EXP 94
25760: GREATEREQUAL
25761: IFFALSE 25765
// exit ;
25763: GO 25965
// ComMoveXY ( unit , x , y ) ;
25765: LD_VAR 0 1
25769: PPUSH
25770: LD_VAR 0 2
25774: PPUSH
25775: LD_VAR 0 3
25779: PPUSH
25780: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25784: LD_INT 35
25786: PPUSH
25787: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25791: LD_VAR 0 1
25795: PPUSH
25796: LD_VAR 0 2
25800: PPUSH
25801: LD_VAR 0 3
25805: PPUSH
25806: CALL 63361 0 3
25810: NOT
25811: PUSH
25812: LD_VAR 0 1
25816: PPUSH
25817: CALL_OW 314
25821: AND
25822: IFFALSE 25826
// exit ;
25824: GO 25965
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25826: LD_VAR 0 2
25830: PPUSH
25831: LD_VAR 0 3
25835: PPUSH
25836: CALL_OW 428
25840: PUSH
25841: LD_VAR 0 1
25845: EQUAL
25846: PUSH
25847: LD_VAR 0 1
25851: PPUSH
25852: CALL_OW 314
25856: NOT
25857: AND
25858: IFFALSE 25784
// PlaySoundXY ( x , y , PlantMine ) ;
25860: LD_VAR 0 2
25864: PPUSH
25865: LD_VAR 0 3
25869: PPUSH
25870: LD_STRING PlantMine
25872: PPUSH
25873: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25877: LD_VAR 0 2
25881: PPUSH
25882: LD_VAR 0 3
25886: PPUSH
25887: LD_VAR 0 1
25891: PPUSH
25892: CALL_OW 255
25896: PPUSH
25897: LD_INT 0
25899: PPUSH
25900: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25904: LD_ADDR_EXP 93
25908: PUSH
25909: LD_EXP 93
25913: PPUSH
25914: LD_VAR 0 5
25918: PUSH
25919: LD_EXP 93
25923: PUSH
25924: LD_VAR 0 5
25928: ARRAY
25929: PUSH
25930: LD_INT 1
25932: PLUS
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PPUSH
25938: LD_VAR 0 2
25942: PUSH
25943: LD_VAR 0 3
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PPUSH
25952: CALL 32313 0 3
25956: ST_TO_ADDR
// result := true ;
25957: LD_ADDR_VAR 0 4
25961: PUSH
25962: LD_INT 1
25964: ST_TO_ADDR
// end ;
25965: LD_VAR 0 4
25969: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25970: LD_INT 0
25972: PPUSH
25973: PPUSH
25974: PPUSH
// if not unit in minersList then
25975: LD_VAR 0 1
25979: PUSH
25980: LD_EXP 92
25984: IN
25985: NOT
25986: IFFALSE 25990
// exit ;
25988: GO 26382
// index := GetElementIndex ( minersList , unit ) ;
25990: LD_ADDR_VAR 0 6
25994: PUSH
25995: LD_EXP 92
25999: PPUSH
26000: LD_VAR 0 1
26004: PPUSH
26005: CALL 32098 0 2
26009: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26010: LD_ADDR_VAR 0 5
26014: PUSH
26015: DOUBLE
26016: LD_EXP 93
26020: PUSH
26021: LD_VAR 0 6
26025: ARRAY
26026: INC
26027: ST_TO_ADDR
26028: LD_INT 1
26030: PUSH
26031: FOR_DOWNTO
26032: IFFALSE 26193
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26034: LD_EXP 93
26038: PUSH
26039: LD_VAR 0 6
26043: ARRAY
26044: PUSH
26045: LD_VAR 0 5
26049: ARRAY
26050: PUSH
26051: LD_INT 1
26053: ARRAY
26054: PUSH
26055: LD_VAR 0 2
26059: EQUAL
26060: PUSH
26061: LD_EXP 93
26065: PUSH
26066: LD_VAR 0 6
26070: ARRAY
26071: PUSH
26072: LD_VAR 0 5
26076: ARRAY
26077: PUSH
26078: LD_INT 2
26080: ARRAY
26081: PUSH
26082: LD_VAR 0 3
26086: EQUAL
26087: AND
26088: IFFALSE 26191
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26090: LD_EXP 93
26094: PUSH
26095: LD_VAR 0 6
26099: ARRAY
26100: PUSH
26101: LD_VAR 0 5
26105: ARRAY
26106: PUSH
26107: LD_INT 1
26109: ARRAY
26110: PPUSH
26111: LD_EXP 93
26115: PUSH
26116: LD_VAR 0 6
26120: ARRAY
26121: PUSH
26122: LD_VAR 0 5
26126: ARRAY
26127: PUSH
26128: LD_INT 2
26130: ARRAY
26131: PPUSH
26132: LD_VAR 0 1
26136: PPUSH
26137: CALL_OW 255
26141: PPUSH
26142: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26146: LD_ADDR_EXP 93
26150: PUSH
26151: LD_EXP 93
26155: PPUSH
26156: LD_VAR 0 6
26160: PPUSH
26161: LD_EXP 93
26165: PUSH
26166: LD_VAR 0 6
26170: ARRAY
26171: PPUSH
26172: LD_VAR 0 5
26176: PPUSH
26177: CALL_OW 3
26181: PPUSH
26182: CALL_OW 1
26186: ST_TO_ADDR
// exit ;
26187: POP
26188: POP
26189: GO 26382
// end ; end ;
26191: GO 26031
26193: POP
26194: POP
// for i := minerMinesList [ index ] downto 1 do
26195: LD_ADDR_VAR 0 5
26199: PUSH
26200: DOUBLE
26201: LD_EXP 93
26205: PUSH
26206: LD_VAR 0 6
26210: ARRAY
26211: INC
26212: ST_TO_ADDR
26213: LD_INT 1
26215: PUSH
26216: FOR_DOWNTO
26217: IFFALSE 26380
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26219: LD_EXP 93
26223: PUSH
26224: LD_VAR 0 6
26228: ARRAY
26229: PUSH
26230: LD_VAR 0 5
26234: ARRAY
26235: PUSH
26236: LD_INT 1
26238: ARRAY
26239: PPUSH
26240: LD_EXP 93
26244: PUSH
26245: LD_VAR 0 6
26249: ARRAY
26250: PUSH
26251: LD_VAR 0 5
26255: ARRAY
26256: PUSH
26257: LD_INT 2
26259: ARRAY
26260: PPUSH
26261: LD_VAR 0 2
26265: PPUSH
26266: LD_VAR 0 3
26270: PPUSH
26271: CALL_OW 298
26275: PUSH
26276: LD_INT 6
26278: LESS
26279: IFFALSE 26378
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26281: LD_EXP 93
26285: PUSH
26286: LD_VAR 0 6
26290: ARRAY
26291: PUSH
26292: LD_VAR 0 5
26296: ARRAY
26297: PUSH
26298: LD_INT 1
26300: ARRAY
26301: PPUSH
26302: LD_EXP 93
26306: PUSH
26307: LD_VAR 0 6
26311: ARRAY
26312: PUSH
26313: LD_VAR 0 5
26317: ARRAY
26318: PUSH
26319: LD_INT 2
26321: ARRAY
26322: PPUSH
26323: LD_VAR 0 1
26327: PPUSH
26328: CALL_OW 255
26332: PPUSH
26333: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26337: LD_ADDR_EXP 93
26341: PUSH
26342: LD_EXP 93
26346: PPUSH
26347: LD_VAR 0 6
26351: PPUSH
26352: LD_EXP 93
26356: PUSH
26357: LD_VAR 0 6
26361: ARRAY
26362: PPUSH
26363: LD_VAR 0 5
26367: PPUSH
26368: CALL_OW 3
26372: PPUSH
26373: CALL_OW 1
26377: ST_TO_ADDR
// end ; end ;
26378: GO 26216
26380: POP
26381: POP
// end ;
26382: LD_VAR 0 4
26386: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26387: LD_INT 0
26389: PPUSH
26390: PPUSH
26391: PPUSH
26392: PPUSH
26393: PPUSH
26394: PPUSH
26395: PPUSH
26396: PPUSH
26397: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26398: LD_VAR 0 1
26402: PPUSH
26403: CALL_OW 264
26407: PUSH
26408: LD_INT 81
26410: EQUAL
26411: NOT
26412: PUSH
26413: LD_VAR 0 1
26417: PUSH
26418: LD_EXP 92
26422: IN
26423: NOT
26424: OR
26425: IFFALSE 26429
// exit ;
26427: GO 26751
// index := GetElementIndex ( minersList , unit ) ;
26429: LD_ADDR_VAR 0 6
26433: PUSH
26434: LD_EXP 92
26438: PPUSH
26439: LD_VAR 0 1
26443: PPUSH
26444: CALL 32098 0 2
26448: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26449: LD_ADDR_VAR 0 8
26453: PUSH
26454: LD_EXP 94
26458: PUSH
26459: LD_EXP 93
26463: PUSH
26464: LD_VAR 0 6
26468: ARRAY
26469: MINUS
26470: ST_TO_ADDR
// if not minesFreeAmount then
26471: LD_VAR 0 8
26475: NOT
26476: IFFALSE 26480
// exit ;
26478: GO 26751
// tmp := [ ] ;
26480: LD_ADDR_VAR 0 7
26484: PUSH
26485: EMPTY
26486: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26487: LD_ADDR_VAR 0 5
26491: PUSH
26492: DOUBLE
26493: LD_INT 1
26495: DEC
26496: ST_TO_ADDR
26497: LD_VAR 0 8
26501: PUSH
26502: FOR_TO
26503: IFFALSE 26698
// begin _d := rand ( 0 , 5 ) ;
26505: LD_ADDR_VAR 0 11
26509: PUSH
26510: LD_INT 0
26512: PPUSH
26513: LD_INT 5
26515: PPUSH
26516: CALL_OW 12
26520: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26521: LD_ADDR_VAR 0 12
26525: PUSH
26526: LD_INT 2
26528: PPUSH
26529: LD_INT 6
26531: PPUSH
26532: CALL_OW 12
26536: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26537: LD_ADDR_VAR 0 9
26541: PUSH
26542: LD_VAR 0 2
26546: PPUSH
26547: LD_VAR 0 11
26551: PPUSH
26552: LD_VAR 0 12
26556: PPUSH
26557: CALL_OW 272
26561: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26562: LD_ADDR_VAR 0 10
26566: PUSH
26567: LD_VAR 0 3
26571: PPUSH
26572: LD_VAR 0 11
26576: PPUSH
26577: LD_VAR 0 12
26581: PPUSH
26582: CALL_OW 273
26586: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26587: LD_VAR 0 9
26591: PPUSH
26592: LD_VAR 0 10
26596: PPUSH
26597: CALL_OW 488
26601: PUSH
26602: LD_VAR 0 9
26606: PUSH
26607: LD_VAR 0 10
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_VAR 0 7
26620: IN
26621: NOT
26622: AND
26623: PUSH
26624: LD_VAR 0 9
26628: PPUSH
26629: LD_VAR 0 10
26633: PPUSH
26634: CALL_OW 458
26638: NOT
26639: AND
26640: IFFALSE 26682
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26642: LD_ADDR_VAR 0 7
26646: PUSH
26647: LD_VAR 0 7
26651: PPUSH
26652: LD_VAR 0 7
26656: PUSH
26657: LD_INT 1
26659: PLUS
26660: PPUSH
26661: LD_VAR 0 9
26665: PUSH
26666: LD_VAR 0 10
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PPUSH
26675: CALL_OW 1
26679: ST_TO_ADDR
26680: GO 26696
// i := i - 1 ;
26682: LD_ADDR_VAR 0 5
26686: PUSH
26687: LD_VAR 0 5
26691: PUSH
26692: LD_INT 1
26694: MINUS
26695: ST_TO_ADDR
// end ;
26696: GO 26502
26698: POP
26699: POP
// for i in tmp do
26700: LD_ADDR_VAR 0 5
26704: PUSH
26705: LD_VAR 0 7
26709: PUSH
26710: FOR_IN
26711: IFFALSE 26749
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26713: LD_VAR 0 1
26717: PPUSH
26718: LD_VAR 0 5
26722: PUSH
26723: LD_INT 1
26725: ARRAY
26726: PPUSH
26727: LD_VAR 0 5
26731: PUSH
26732: LD_INT 2
26734: ARRAY
26735: PPUSH
26736: CALL 25695 0 3
26740: NOT
26741: IFFALSE 26747
// exit ;
26743: POP
26744: POP
26745: GO 26751
26747: GO 26710
26749: POP
26750: POP
// end ;
26751: LD_VAR 0 4
26755: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26756: LD_INT 0
26758: PPUSH
26759: PPUSH
26760: PPUSH
26761: PPUSH
26762: PPUSH
26763: PPUSH
26764: PPUSH
// if not GetClass ( unit ) = class_sniper then
26765: LD_VAR 0 1
26769: PPUSH
26770: CALL_OW 257
26774: PUSH
26775: LD_INT 5
26777: EQUAL
26778: NOT
26779: IFFALSE 26783
// exit ;
26781: GO 27171
// dist := 8 ;
26783: LD_ADDR_VAR 0 5
26787: PUSH
26788: LD_INT 8
26790: ST_TO_ADDR
// viewRange := 12 ;
26791: LD_ADDR_VAR 0 7
26795: PUSH
26796: LD_INT 12
26798: ST_TO_ADDR
// side := GetSide ( unit ) ;
26799: LD_ADDR_VAR 0 6
26803: PUSH
26804: LD_VAR 0 1
26808: PPUSH
26809: CALL_OW 255
26813: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26814: LD_INT 61
26816: PPUSH
26817: LD_VAR 0 6
26821: PPUSH
26822: CALL_OW 321
26826: PUSH
26827: LD_INT 2
26829: EQUAL
26830: IFFALSE 26840
// viewRange := 16 ;
26832: LD_ADDR_VAR 0 7
26836: PUSH
26837: LD_INT 16
26839: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26840: LD_VAR 0 1
26844: PPUSH
26845: LD_VAR 0 2
26849: PPUSH
26850: LD_VAR 0 3
26854: PPUSH
26855: CALL_OW 297
26859: PUSH
26860: LD_VAR 0 5
26864: GREATER
26865: IFFALSE 26944
// begin ComMoveXY ( unit , x , y ) ;
26867: LD_VAR 0 1
26871: PPUSH
26872: LD_VAR 0 2
26876: PPUSH
26877: LD_VAR 0 3
26881: PPUSH
26882: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26886: LD_INT 35
26888: PPUSH
26889: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26893: LD_VAR 0 1
26897: PPUSH
26898: LD_VAR 0 2
26902: PPUSH
26903: LD_VAR 0 3
26907: PPUSH
26908: CALL 63361 0 3
26912: NOT
26913: IFFALSE 26917
// exit ;
26915: GO 27171
// until GetDistUnitXY ( unit , x , y ) < dist ;
26917: LD_VAR 0 1
26921: PPUSH
26922: LD_VAR 0 2
26926: PPUSH
26927: LD_VAR 0 3
26931: PPUSH
26932: CALL_OW 297
26936: PUSH
26937: LD_VAR 0 5
26941: LESS
26942: IFFALSE 26886
// end ; ComTurnXY ( unit , x , y ) ;
26944: LD_VAR 0 1
26948: PPUSH
26949: LD_VAR 0 2
26953: PPUSH
26954: LD_VAR 0 3
26958: PPUSH
26959: CALL_OW 118
// wait ( 5 ) ;
26963: LD_INT 5
26965: PPUSH
26966: CALL_OW 67
// _d := GetDir ( unit ) ;
26970: LD_ADDR_VAR 0 10
26974: PUSH
26975: LD_VAR 0 1
26979: PPUSH
26980: CALL_OW 254
26984: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26985: LD_ADDR_VAR 0 8
26989: PUSH
26990: LD_VAR 0 1
26994: PPUSH
26995: CALL_OW 250
26999: PPUSH
27000: LD_VAR 0 10
27004: PPUSH
27005: LD_VAR 0 5
27009: PPUSH
27010: CALL_OW 272
27014: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27015: LD_ADDR_VAR 0 9
27019: PUSH
27020: LD_VAR 0 1
27024: PPUSH
27025: CALL_OW 251
27029: PPUSH
27030: LD_VAR 0 10
27034: PPUSH
27035: LD_VAR 0 5
27039: PPUSH
27040: CALL_OW 273
27044: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27045: LD_VAR 0 8
27049: PPUSH
27050: LD_VAR 0 9
27054: PPUSH
27055: CALL_OW 488
27059: NOT
27060: IFFALSE 27064
// exit ;
27062: GO 27171
// ComAnimCustom ( unit , 1 ) ;
27064: LD_VAR 0 1
27068: PPUSH
27069: LD_INT 1
27071: PPUSH
27072: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27076: LD_VAR 0 8
27080: PPUSH
27081: LD_VAR 0 9
27085: PPUSH
27086: LD_VAR 0 6
27090: PPUSH
27091: LD_VAR 0 7
27095: PPUSH
27096: CALL_OW 330
// repeat wait ( 1 ) ;
27100: LD_INT 1
27102: PPUSH
27103: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27107: LD_VAR 0 1
27111: PPUSH
27112: CALL_OW 316
27116: PUSH
27117: LD_VAR 0 1
27121: PPUSH
27122: CALL_OW 314
27126: OR
27127: PUSH
27128: LD_VAR 0 1
27132: PPUSH
27133: CALL_OW 302
27137: NOT
27138: OR
27139: PUSH
27140: LD_VAR 0 1
27144: PPUSH
27145: CALL_OW 301
27149: OR
27150: IFFALSE 27100
// RemoveSeeing ( _x , _y , side ) ;
27152: LD_VAR 0 8
27156: PPUSH
27157: LD_VAR 0 9
27161: PPUSH
27162: LD_VAR 0 6
27166: PPUSH
27167: CALL_OW 331
// end ; end_of_file
27171: LD_VAR 0 4
27175: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27176: LD_INT 0
27178: PPUSH
27179: PPUSH
// if exist_mode then
27180: LD_VAR 0 2
27184: IFFALSE 27209
// unit := CreateCharacter ( prefix & ident ) else
27186: LD_ADDR_VAR 0 5
27190: PUSH
27191: LD_VAR 0 3
27195: PUSH
27196: LD_VAR 0 1
27200: STR
27201: PPUSH
27202: CALL_OW 34
27206: ST_TO_ADDR
27207: GO 27224
// unit := NewCharacter ( ident ) ;
27209: LD_ADDR_VAR 0 5
27213: PUSH
27214: LD_VAR 0 1
27218: PPUSH
27219: CALL_OW 25
27223: ST_TO_ADDR
// result := unit ;
27224: LD_ADDR_VAR 0 4
27228: PUSH
27229: LD_VAR 0 5
27233: ST_TO_ADDR
// end ;
27234: LD_VAR 0 4
27238: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27239: LD_INT 0
27241: PPUSH
27242: PPUSH
// if not side or not nation then
27243: LD_VAR 0 1
27247: NOT
27248: PUSH
27249: LD_VAR 0 2
27253: NOT
27254: OR
27255: IFFALSE 27259
// exit ;
27257: GO 28027
// case nation of nation_american :
27259: LD_VAR 0 2
27263: PUSH
27264: LD_INT 1
27266: DOUBLE
27267: EQUAL
27268: IFTRUE 27272
27270: GO 27486
27272: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27273: LD_ADDR_VAR 0 4
27277: PUSH
27278: LD_INT 35
27280: PUSH
27281: LD_INT 45
27283: PUSH
27284: LD_INT 46
27286: PUSH
27287: LD_INT 47
27289: PUSH
27290: LD_INT 82
27292: PUSH
27293: LD_INT 83
27295: PUSH
27296: LD_INT 84
27298: PUSH
27299: LD_INT 85
27301: PUSH
27302: LD_INT 86
27304: PUSH
27305: LD_INT 1
27307: PUSH
27308: LD_INT 2
27310: PUSH
27311: LD_INT 6
27313: PUSH
27314: LD_INT 15
27316: PUSH
27317: LD_INT 16
27319: PUSH
27320: LD_INT 7
27322: PUSH
27323: LD_INT 12
27325: PUSH
27326: LD_INT 13
27328: PUSH
27329: LD_INT 10
27331: PUSH
27332: LD_INT 14
27334: PUSH
27335: LD_INT 20
27337: PUSH
27338: LD_INT 21
27340: PUSH
27341: LD_INT 22
27343: PUSH
27344: LD_INT 25
27346: PUSH
27347: LD_INT 32
27349: PUSH
27350: LD_INT 27
27352: PUSH
27353: LD_INT 36
27355: PUSH
27356: LD_INT 69
27358: PUSH
27359: LD_INT 39
27361: PUSH
27362: LD_INT 34
27364: PUSH
27365: LD_INT 40
27367: PUSH
27368: LD_INT 48
27370: PUSH
27371: LD_INT 49
27373: PUSH
27374: LD_INT 50
27376: PUSH
27377: LD_INT 51
27379: PUSH
27380: LD_INT 52
27382: PUSH
27383: LD_INT 53
27385: PUSH
27386: LD_INT 54
27388: PUSH
27389: LD_INT 55
27391: PUSH
27392: LD_INT 56
27394: PUSH
27395: LD_INT 57
27397: PUSH
27398: LD_INT 58
27400: PUSH
27401: LD_INT 59
27403: PUSH
27404: LD_INT 60
27406: PUSH
27407: LD_INT 61
27409: PUSH
27410: LD_INT 62
27412: PUSH
27413: LD_INT 80
27415: PUSH
27416: LD_INT 82
27418: PUSH
27419: LD_INT 83
27421: PUSH
27422: LD_INT 84
27424: PUSH
27425: LD_INT 85
27427: PUSH
27428: LD_INT 86
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: ST_TO_ADDR
27484: GO 27951
27486: LD_INT 2
27488: DOUBLE
27489: EQUAL
27490: IFTRUE 27494
27492: GO 27720
27494: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27495: LD_ADDR_VAR 0 4
27499: PUSH
27500: LD_INT 35
27502: PUSH
27503: LD_INT 45
27505: PUSH
27506: LD_INT 46
27508: PUSH
27509: LD_INT 47
27511: PUSH
27512: LD_INT 82
27514: PUSH
27515: LD_INT 83
27517: PUSH
27518: LD_INT 84
27520: PUSH
27521: LD_INT 85
27523: PUSH
27524: LD_INT 87
27526: PUSH
27527: LD_INT 70
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: LD_INT 11
27535: PUSH
27536: LD_INT 3
27538: PUSH
27539: LD_INT 4
27541: PUSH
27542: LD_INT 5
27544: PUSH
27545: LD_INT 6
27547: PUSH
27548: LD_INT 15
27550: PUSH
27551: LD_INT 18
27553: PUSH
27554: LD_INT 7
27556: PUSH
27557: LD_INT 17
27559: PUSH
27560: LD_INT 8
27562: PUSH
27563: LD_INT 20
27565: PUSH
27566: LD_INT 21
27568: PUSH
27569: LD_INT 22
27571: PUSH
27572: LD_INT 72
27574: PUSH
27575: LD_INT 26
27577: PUSH
27578: LD_INT 69
27580: PUSH
27581: LD_INT 39
27583: PUSH
27584: LD_INT 40
27586: PUSH
27587: LD_INT 41
27589: PUSH
27590: LD_INT 42
27592: PUSH
27593: LD_INT 43
27595: PUSH
27596: LD_INT 48
27598: PUSH
27599: LD_INT 49
27601: PUSH
27602: LD_INT 50
27604: PUSH
27605: LD_INT 51
27607: PUSH
27608: LD_INT 52
27610: PUSH
27611: LD_INT 53
27613: PUSH
27614: LD_INT 54
27616: PUSH
27617: LD_INT 55
27619: PUSH
27620: LD_INT 56
27622: PUSH
27623: LD_INT 60
27625: PUSH
27626: LD_INT 61
27628: PUSH
27629: LD_INT 62
27631: PUSH
27632: LD_INT 66
27634: PUSH
27635: LD_INT 67
27637: PUSH
27638: LD_INT 68
27640: PUSH
27641: LD_INT 81
27643: PUSH
27644: LD_INT 82
27646: PUSH
27647: LD_INT 83
27649: PUSH
27650: LD_INT 84
27652: PUSH
27653: LD_INT 85
27655: PUSH
27656: LD_INT 87
27658: PUSH
27659: LD_INT 88
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: ST_TO_ADDR
27718: GO 27951
27720: LD_INT 3
27722: DOUBLE
27723: EQUAL
27724: IFTRUE 27728
27726: GO 27950
27728: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27729: LD_ADDR_VAR 0 4
27733: PUSH
27734: LD_INT 46
27736: PUSH
27737: LD_INT 47
27739: PUSH
27740: LD_INT 1
27742: PUSH
27743: LD_INT 2
27745: PUSH
27746: LD_INT 82
27748: PUSH
27749: LD_INT 83
27751: PUSH
27752: LD_INT 84
27754: PUSH
27755: LD_INT 85
27757: PUSH
27758: LD_INT 86
27760: PUSH
27761: LD_INT 11
27763: PUSH
27764: LD_INT 9
27766: PUSH
27767: LD_INT 20
27769: PUSH
27770: LD_INT 19
27772: PUSH
27773: LD_INT 21
27775: PUSH
27776: LD_INT 24
27778: PUSH
27779: LD_INT 22
27781: PUSH
27782: LD_INT 25
27784: PUSH
27785: LD_INT 28
27787: PUSH
27788: LD_INT 29
27790: PUSH
27791: LD_INT 30
27793: PUSH
27794: LD_INT 31
27796: PUSH
27797: LD_INT 37
27799: PUSH
27800: LD_INT 38
27802: PUSH
27803: LD_INT 32
27805: PUSH
27806: LD_INT 27
27808: PUSH
27809: LD_INT 33
27811: PUSH
27812: LD_INT 69
27814: PUSH
27815: LD_INT 39
27817: PUSH
27818: LD_INT 34
27820: PUSH
27821: LD_INT 40
27823: PUSH
27824: LD_INT 71
27826: PUSH
27827: LD_INT 23
27829: PUSH
27830: LD_INT 44
27832: PUSH
27833: LD_INT 48
27835: PUSH
27836: LD_INT 49
27838: PUSH
27839: LD_INT 50
27841: PUSH
27842: LD_INT 51
27844: PUSH
27845: LD_INT 52
27847: PUSH
27848: LD_INT 53
27850: PUSH
27851: LD_INT 54
27853: PUSH
27854: LD_INT 55
27856: PUSH
27857: LD_INT 56
27859: PUSH
27860: LD_INT 57
27862: PUSH
27863: LD_INT 58
27865: PUSH
27866: LD_INT 59
27868: PUSH
27869: LD_INT 63
27871: PUSH
27872: LD_INT 64
27874: PUSH
27875: LD_INT 65
27877: PUSH
27878: LD_INT 82
27880: PUSH
27881: LD_INT 83
27883: PUSH
27884: LD_INT 84
27886: PUSH
27887: LD_INT 85
27889: PUSH
27890: LD_INT 86
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: ST_TO_ADDR
27948: GO 27951
27950: POP
// if state > - 1 and state < 3 then
27951: LD_VAR 0 3
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: GREATER
27960: PUSH
27961: LD_VAR 0 3
27965: PUSH
27966: LD_INT 3
27968: LESS
27969: AND
27970: IFFALSE 28027
// for i in result do
27972: LD_ADDR_VAR 0 5
27976: PUSH
27977: LD_VAR 0 4
27981: PUSH
27982: FOR_IN
27983: IFFALSE 28025
// if GetTech ( i , side ) <> state then
27985: LD_VAR 0 5
27989: PPUSH
27990: LD_VAR 0 1
27994: PPUSH
27995: CALL_OW 321
27999: PUSH
28000: LD_VAR 0 3
28004: NONEQUAL
28005: IFFALSE 28023
// result := result diff i ;
28007: LD_ADDR_VAR 0 4
28011: PUSH
28012: LD_VAR 0 4
28016: PUSH
28017: LD_VAR 0 5
28021: DIFF
28022: ST_TO_ADDR
28023: GO 27982
28025: POP
28026: POP
// end ;
28027: LD_VAR 0 4
28031: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28032: LD_INT 0
28034: PPUSH
28035: PPUSH
28036: PPUSH
// result := true ;
28037: LD_ADDR_VAR 0 3
28041: PUSH
28042: LD_INT 1
28044: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28045: LD_ADDR_VAR 0 5
28049: PUSH
28050: LD_VAR 0 2
28054: PPUSH
28055: CALL_OW 480
28059: ST_TO_ADDR
// if not tmp then
28060: LD_VAR 0 5
28064: NOT
28065: IFFALSE 28069
// exit ;
28067: GO 28118
// for i in tmp do
28069: LD_ADDR_VAR 0 4
28073: PUSH
28074: LD_VAR 0 5
28078: PUSH
28079: FOR_IN
28080: IFFALSE 28116
// if GetTech ( i , side ) <> state_researched then
28082: LD_VAR 0 4
28086: PPUSH
28087: LD_VAR 0 1
28091: PPUSH
28092: CALL_OW 321
28096: PUSH
28097: LD_INT 2
28099: NONEQUAL
28100: IFFALSE 28114
// begin result := false ;
28102: LD_ADDR_VAR 0 3
28106: PUSH
28107: LD_INT 0
28109: ST_TO_ADDR
// exit ;
28110: POP
28111: POP
28112: GO 28118
// end ;
28114: GO 28079
28116: POP
28117: POP
// end ;
28118: LD_VAR 0 3
28122: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28123: LD_INT 0
28125: PPUSH
28126: PPUSH
28127: PPUSH
28128: PPUSH
28129: PPUSH
28130: PPUSH
28131: PPUSH
28132: PPUSH
28133: PPUSH
28134: PPUSH
28135: PPUSH
28136: PPUSH
28137: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28138: LD_VAR 0 1
28142: NOT
28143: PUSH
28144: LD_VAR 0 1
28148: PPUSH
28149: CALL_OW 257
28153: PUSH
28154: LD_INT 9
28156: NONEQUAL
28157: OR
28158: IFFALSE 28162
// exit ;
28160: GO 28735
// side := GetSide ( unit ) ;
28162: LD_ADDR_VAR 0 9
28166: PUSH
28167: LD_VAR 0 1
28171: PPUSH
28172: CALL_OW 255
28176: ST_TO_ADDR
// tech_space := tech_spacanom ;
28177: LD_ADDR_VAR 0 12
28181: PUSH
28182: LD_INT 29
28184: ST_TO_ADDR
// tech_time := tech_taurad ;
28185: LD_ADDR_VAR 0 13
28189: PUSH
28190: LD_INT 28
28192: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28193: LD_ADDR_VAR 0 11
28197: PUSH
28198: LD_VAR 0 1
28202: PPUSH
28203: CALL_OW 310
28207: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28208: LD_VAR 0 11
28212: PPUSH
28213: CALL_OW 247
28217: PUSH
28218: LD_INT 2
28220: EQUAL
28221: IFFALSE 28225
// exit ;
28223: GO 28735
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28225: LD_ADDR_VAR 0 8
28229: PUSH
28230: LD_INT 81
28232: PUSH
28233: LD_VAR 0 9
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 3
28244: PUSH
28245: LD_INT 21
28247: PUSH
28248: LD_INT 3
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PPUSH
28263: CALL_OW 69
28267: ST_TO_ADDR
// if not tmp then
28268: LD_VAR 0 8
28272: NOT
28273: IFFALSE 28277
// exit ;
28275: GO 28735
// if in_unit then
28277: LD_VAR 0 11
28281: IFFALSE 28305
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28283: LD_ADDR_VAR 0 10
28287: PUSH
28288: LD_VAR 0 8
28292: PPUSH
28293: LD_VAR 0 11
28297: PPUSH
28298: CALL_OW 74
28302: ST_TO_ADDR
28303: GO 28325
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28305: LD_ADDR_VAR 0 10
28309: PUSH
28310: LD_VAR 0 8
28314: PPUSH
28315: LD_VAR 0 1
28319: PPUSH
28320: CALL_OW 74
28324: ST_TO_ADDR
// if not enemy then
28325: LD_VAR 0 10
28329: NOT
28330: IFFALSE 28334
// exit ;
28332: GO 28735
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28334: LD_VAR 0 11
28338: PUSH
28339: LD_VAR 0 11
28343: PPUSH
28344: LD_VAR 0 10
28348: PPUSH
28349: CALL_OW 296
28353: PUSH
28354: LD_INT 13
28356: GREATER
28357: AND
28358: PUSH
28359: LD_VAR 0 1
28363: PPUSH
28364: LD_VAR 0 10
28368: PPUSH
28369: CALL_OW 296
28373: PUSH
28374: LD_INT 12
28376: GREATER
28377: OR
28378: IFFALSE 28382
// exit ;
28380: GO 28735
// missile := [ 1 ] ;
28382: LD_ADDR_VAR 0 14
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: EMPTY
28391: LIST
28392: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28393: LD_VAR 0 9
28397: PPUSH
28398: LD_VAR 0 12
28402: PPUSH
28403: CALL_OW 325
28407: IFFALSE 28436
// missile := Replace ( missile , missile + 1 , 2 ) ;
28409: LD_ADDR_VAR 0 14
28413: PUSH
28414: LD_VAR 0 14
28418: PPUSH
28419: LD_VAR 0 14
28423: PUSH
28424: LD_INT 1
28426: PLUS
28427: PPUSH
28428: LD_INT 2
28430: PPUSH
28431: CALL_OW 1
28435: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28436: LD_VAR 0 9
28440: PPUSH
28441: LD_VAR 0 13
28445: PPUSH
28446: CALL_OW 325
28450: PUSH
28451: LD_VAR 0 10
28455: PPUSH
28456: CALL_OW 255
28460: PPUSH
28461: LD_VAR 0 13
28465: PPUSH
28466: CALL_OW 325
28470: NOT
28471: AND
28472: IFFALSE 28501
// missile := Replace ( missile , missile + 1 , 3 ) ;
28474: LD_ADDR_VAR 0 14
28478: PUSH
28479: LD_VAR 0 14
28483: PPUSH
28484: LD_VAR 0 14
28488: PUSH
28489: LD_INT 1
28491: PLUS
28492: PPUSH
28493: LD_INT 3
28495: PPUSH
28496: CALL_OW 1
28500: ST_TO_ADDR
// if missile < 2 then
28501: LD_VAR 0 14
28505: PUSH
28506: LD_INT 2
28508: LESS
28509: IFFALSE 28513
// exit ;
28511: GO 28735
// x := GetX ( enemy ) ;
28513: LD_ADDR_VAR 0 4
28517: PUSH
28518: LD_VAR 0 10
28522: PPUSH
28523: CALL_OW 250
28527: ST_TO_ADDR
// y := GetY ( enemy ) ;
28528: LD_ADDR_VAR 0 5
28532: PUSH
28533: LD_VAR 0 10
28537: PPUSH
28538: CALL_OW 251
28542: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28543: LD_ADDR_VAR 0 6
28547: PUSH
28548: LD_VAR 0 4
28552: PUSH
28553: LD_INT 1
28555: NEG
28556: PPUSH
28557: LD_INT 1
28559: PPUSH
28560: CALL_OW 12
28564: PLUS
28565: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28566: LD_ADDR_VAR 0 7
28570: PUSH
28571: LD_VAR 0 5
28575: PUSH
28576: LD_INT 1
28578: NEG
28579: PPUSH
28580: LD_INT 1
28582: PPUSH
28583: CALL_OW 12
28587: PLUS
28588: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28589: LD_VAR 0 6
28593: PPUSH
28594: LD_VAR 0 7
28598: PPUSH
28599: CALL_OW 488
28603: NOT
28604: IFFALSE 28626
// begin _x := x ;
28606: LD_ADDR_VAR 0 6
28610: PUSH
28611: LD_VAR 0 4
28615: ST_TO_ADDR
// _y := y ;
28616: LD_ADDR_VAR 0 7
28620: PUSH
28621: LD_VAR 0 5
28625: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28626: LD_ADDR_VAR 0 3
28630: PUSH
28631: LD_INT 1
28633: PPUSH
28634: LD_VAR 0 14
28638: PPUSH
28639: CALL_OW 12
28643: ST_TO_ADDR
// case i of 1 :
28644: LD_VAR 0 3
28648: PUSH
28649: LD_INT 1
28651: DOUBLE
28652: EQUAL
28653: IFTRUE 28657
28655: GO 28674
28657: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28658: LD_VAR 0 1
28662: PPUSH
28663: LD_VAR 0 10
28667: PPUSH
28668: CALL_OW 115
28672: GO 28735
28674: LD_INT 2
28676: DOUBLE
28677: EQUAL
28678: IFTRUE 28682
28680: GO 28704
28682: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28683: LD_VAR 0 1
28687: PPUSH
28688: LD_VAR 0 6
28692: PPUSH
28693: LD_VAR 0 7
28697: PPUSH
28698: CALL_OW 153
28702: GO 28735
28704: LD_INT 3
28706: DOUBLE
28707: EQUAL
28708: IFTRUE 28712
28710: GO 28734
28712: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28713: LD_VAR 0 1
28717: PPUSH
28718: LD_VAR 0 6
28722: PPUSH
28723: LD_VAR 0 7
28727: PPUSH
28728: CALL_OW 154
28732: GO 28735
28734: POP
// end ;
28735: LD_VAR 0 2
28739: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28740: LD_INT 0
28742: PPUSH
28743: PPUSH
28744: PPUSH
28745: PPUSH
28746: PPUSH
28747: PPUSH
// if not unit or not building then
28748: LD_VAR 0 1
28752: NOT
28753: PUSH
28754: LD_VAR 0 2
28758: NOT
28759: OR
28760: IFFALSE 28764
// exit ;
28762: GO 28922
// x := GetX ( building ) ;
28764: LD_ADDR_VAR 0 5
28768: PUSH
28769: LD_VAR 0 2
28773: PPUSH
28774: CALL_OW 250
28778: ST_TO_ADDR
// y := GetY ( building ) ;
28779: LD_ADDR_VAR 0 6
28783: PUSH
28784: LD_VAR 0 2
28788: PPUSH
28789: CALL_OW 251
28793: ST_TO_ADDR
// for i = 0 to 5 do
28794: LD_ADDR_VAR 0 4
28798: PUSH
28799: DOUBLE
28800: LD_INT 0
28802: DEC
28803: ST_TO_ADDR
28804: LD_INT 5
28806: PUSH
28807: FOR_TO
28808: IFFALSE 28920
// begin _x := ShiftX ( x , i , 3 ) ;
28810: LD_ADDR_VAR 0 7
28814: PUSH
28815: LD_VAR 0 5
28819: PPUSH
28820: LD_VAR 0 4
28824: PPUSH
28825: LD_INT 3
28827: PPUSH
28828: CALL_OW 272
28832: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28833: LD_ADDR_VAR 0 8
28837: PUSH
28838: LD_VAR 0 6
28842: PPUSH
28843: LD_VAR 0 4
28847: PPUSH
28848: LD_INT 3
28850: PPUSH
28851: CALL_OW 273
28855: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28856: LD_VAR 0 7
28860: PPUSH
28861: LD_VAR 0 8
28865: PPUSH
28866: CALL_OW 488
28870: NOT
28871: IFFALSE 28875
// continue ;
28873: GO 28807
// if HexInfo ( _x , _y ) = 0 then
28875: LD_VAR 0 7
28879: PPUSH
28880: LD_VAR 0 8
28884: PPUSH
28885: CALL_OW 428
28889: PUSH
28890: LD_INT 0
28892: EQUAL
28893: IFFALSE 28918
// begin ComMoveXY ( unit , _x , _y ) ;
28895: LD_VAR 0 1
28899: PPUSH
28900: LD_VAR 0 7
28904: PPUSH
28905: LD_VAR 0 8
28909: PPUSH
28910: CALL_OW 111
// exit ;
28914: POP
28915: POP
28916: GO 28922
// end ; end ;
28918: GO 28807
28920: POP
28921: POP
// end ;
28922: LD_VAR 0 3
28926: RET
// export function ScanBase ( side , base_area ) ; begin
28927: LD_INT 0
28929: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28930: LD_ADDR_VAR 0 3
28934: PUSH
28935: LD_VAR 0 2
28939: PPUSH
28940: LD_INT 81
28942: PUSH
28943: LD_VAR 0 1
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PPUSH
28952: CALL_OW 70
28956: ST_TO_ADDR
// end ;
28957: LD_VAR 0 3
28961: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28962: LD_INT 0
28964: PPUSH
28965: PPUSH
28966: PPUSH
28967: PPUSH
// result := false ;
28968: LD_ADDR_VAR 0 2
28972: PUSH
28973: LD_INT 0
28975: ST_TO_ADDR
// side := GetSide ( unit ) ;
28976: LD_ADDR_VAR 0 3
28980: PUSH
28981: LD_VAR 0 1
28985: PPUSH
28986: CALL_OW 255
28990: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28991: LD_ADDR_VAR 0 4
28995: PUSH
28996: LD_VAR 0 1
29000: PPUSH
29001: CALL_OW 248
29005: ST_TO_ADDR
// case nat of 1 :
29006: LD_VAR 0 4
29010: PUSH
29011: LD_INT 1
29013: DOUBLE
29014: EQUAL
29015: IFTRUE 29019
29017: GO 29030
29019: POP
// tech := tech_lassight ; 2 :
29020: LD_ADDR_VAR 0 5
29024: PUSH
29025: LD_INT 12
29027: ST_TO_ADDR
29028: GO 29069
29030: LD_INT 2
29032: DOUBLE
29033: EQUAL
29034: IFTRUE 29038
29036: GO 29049
29038: POP
// tech := tech_mortar ; 3 :
29039: LD_ADDR_VAR 0 5
29043: PUSH
29044: LD_INT 41
29046: ST_TO_ADDR
29047: GO 29069
29049: LD_INT 3
29051: DOUBLE
29052: EQUAL
29053: IFTRUE 29057
29055: GO 29068
29057: POP
// tech := tech_bazooka ; end ;
29058: LD_ADDR_VAR 0 5
29062: PUSH
29063: LD_INT 44
29065: ST_TO_ADDR
29066: GO 29069
29068: POP
// if Researched ( side , tech ) then
29069: LD_VAR 0 3
29073: PPUSH
29074: LD_VAR 0 5
29078: PPUSH
29079: CALL_OW 325
29083: IFFALSE 29110
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29085: LD_ADDR_VAR 0 2
29089: PUSH
29090: LD_INT 5
29092: PUSH
29093: LD_INT 8
29095: PUSH
29096: LD_INT 9
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: LIST
29103: PUSH
29104: LD_VAR 0 4
29108: ARRAY
29109: ST_TO_ADDR
// end ;
29110: LD_VAR 0 2
29114: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29115: LD_INT 0
29117: PPUSH
29118: PPUSH
29119: PPUSH
// if not mines then
29120: LD_VAR 0 2
29124: NOT
29125: IFFALSE 29129
// exit ;
29127: GO 29273
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29129: LD_ADDR_VAR 0 5
29133: PUSH
29134: LD_INT 81
29136: PUSH
29137: LD_VAR 0 1
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 3
29148: PUSH
29149: LD_INT 21
29151: PUSH
29152: LD_INT 3
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PPUSH
29167: CALL_OW 69
29171: ST_TO_ADDR
// for i in mines do
29172: LD_ADDR_VAR 0 4
29176: PUSH
29177: LD_VAR 0 2
29181: PUSH
29182: FOR_IN
29183: IFFALSE 29271
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29185: LD_VAR 0 4
29189: PUSH
29190: LD_INT 1
29192: ARRAY
29193: PPUSH
29194: LD_VAR 0 4
29198: PUSH
29199: LD_INT 2
29201: ARRAY
29202: PPUSH
29203: CALL_OW 458
29207: NOT
29208: IFFALSE 29212
// continue ;
29210: GO 29182
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29212: LD_VAR 0 4
29216: PUSH
29217: LD_INT 1
29219: ARRAY
29220: PPUSH
29221: LD_VAR 0 4
29225: PUSH
29226: LD_INT 2
29228: ARRAY
29229: PPUSH
29230: CALL_OW 428
29234: PUSH
29235: LD_VAR 0 5
29239: IN
29240: IFFALSE 29269
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29242: LD_VAR 0 4
29246: PUSH
29247: LD_INT 1
29249: ARRAY
29250: PPUSH
29251: LD_VAR 0 4
29255: PUSH
29256: LD_INT 2
29258: ARRAY
29259: PPUSH
29260: LD_VAR 0 1
29264: PPUSH
29265: CALL_OW 456
// end ;
29269: GO 29182
29271: POP
29272: POP
// end ;
29273: LD_VAR 0 3
29277: RET
// export function Count ( array ) ; var i ; begin
29278: LD_INT 0
29280: PPUSH
29281: PPUSH
// result := 0 ;
29282: LD_ADDR_VAR 0 2
29286: PUSH
29287: LD_INT 0
29289: ST_TO_ADDR
// for i in array do
29290: LD_ADDR_VAR 0 3
29294: PUSH
29295: LD_VAR 0 1
29299: PUSH
29300: FOR_IN
29301: IFFALSE 29325
// if i then
29303: LD_VAR 0 3
29307: IFFALSE 29323
// result := result + 1 ;
29309: LD_ADDR_VAR 0 2
29313: PUSH
29314: LD_VAR 0 2
29318: PUSH
29319: LD_INT 1
29321: PLUS
29322: ST_TO_ADDR
29323: GO 29300
29325: POP
29326: POP
// end ;
29327: LD_VAR 0 2
29331: RET
// export function IsEmpty ( building ) ; begin
29332: LD_INT 0
29334: PPUSH
// if not building then
29335: LD_VAR 0 1
29339: NOT
29340: IFFALSE 29344
// exit ;
29342: GO 29387
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29344: LD_ADDR_VAR 0 2
29348: PUSH
29349: LD_VAR 0 1
29353: PUSH
29354: LD_INT 22
29356: PUSH
29357: LD_VAR 0 1
29361: PPUSH
29362: CALL_OW 255
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 58
29373: PUSH
29374: EMPTY
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PPUSH
29381: CALL_OW 69
29385: IN
29386: ST_TO_ADDR
// end ;
29387: LD_VAR 0 2
29391: RET
// export function IsNotFull ( building ) ; var places ; begin
29392: LD_INT 0
29394: PPUSH
29395: PPUSH
// if not building then
29396: LD_VAR 0 1
29400: NOT
29401: IFFALSE 29405
// exit ;
29403: GO 29576
// result := false ;
29405: LD_ADDR_VAR 0 2
29409: PUSH
29410: LD_INT 0
29412: ST_TO_ADDR
// places := 0 ;
29413: LD_ADDR_VAR 0 3
29417: PUSH
29418: LD_INT 0
29420: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
29421: LD_VAR 0 1
29425: PPUSH
29426: CALL_OW 266
29430: PUSH
29431: LD_INT 0
29433: DOUBLE
29434: EQUAL
29435: IFTRUE 29493
29437: LD_INT 1
29439: DOUBLE
29440: EQUAL
29441: IFTRUE 29493
29443: LD_INT 6
29445: DOUBLE
29446: EQUAL
29447: IFTRUE 29493
29449: LD_INT 7
29451: DOUBLE
29452: EQUAL
29453: IFTRUE 29493
29455: LD_INT 8
29457: DOUBLE
29458: EQUAL
29459: IFTRUE 29493
29461: LD_INT 4
29463: DOUBLE
29464: EQUAL
29465: IFTRUE 29493
29467: LD_INT 5
29469: DOUBLE
29470: EQUAL
29471: IFTRUE 29493
29473: LD_INT 2
29475: DOUBLE
29476: EQUAL
29477: IFTRUE 29493
29479: LD_INT 3
29481: DOUBLE
29482: EQUAL
29483: IFTRUE 29493
29485: LD_INT 35
29487: DOUBLE
29488: EQUAL
29489: IFTRUE 29493
29491: GO 29504
29493: POP
// places := 6 ; b_bunker , b_breastwork :
29494: LD_ADDR_VAR 0 3
29498: PUSH
29499: LD_INT 6
29501: ST_TO_ADDR
29502: GO 29549
29504: LD_INT 32
29506: DOUBLE
29507: EQUAL
29508: IFTRUE 29518
29510: LD_INT 31
29512: DOUBLE
29513: EQUAL
29514: IFTRUE 29518
29516: GO 29529
29518: POP
// places := 1 ; b_control_tower :
29519: LD_ADDR_VAR 0 3
29523: PUSH
29524: LD_INT 1
29526: ST_TO_ADDR
29527: GO 29549
29529: LD_INT 36
29531: DOUBLE
29532: EQUAL
29533: IFTRUE 29537
29535: GO 29548
29537: POP
// places := 3 ; end ;
29538: LD_ADDR_VAR 0 3
29542: PUSH
29543: LD_INT 3
29545: ST_TO_ADDR
29546: GO 29549
29548: POP
// if places then
29549: LD_VAR 0 3
29553: IFFALSE 29576
// result := UnitsInside ( building ) < places ;
29555: LD_ADDR_VAR 0 2
29559: PUSH
29560: LD_VAR 0 1
29564: PPUSH
29565: CALL_OW 313
29569: PUSH
29570: LD_VAR 0 3
29574: LESS
29575: ST_TO_ADDR
// end ;
29576: LD_VAR 0 2
29580: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29581: LD_INT 0
29583: PPUSH
29584: PPUSH
29585: PPUSH
29586: PPUSH
// tmp := [ ] ;
29587: LD_ADDR_VAR 0 3
29591: PUSH
29592: EMPTY
29593: ST_TO_ADDR
// list := [ ] ;
29594: LD_ADDR_VAR 0 5
29598: PUSH
29599: EMPTY
29600: ST_TO_ADDR
// for i = 16 to 25 do
29601: LD_ADDR_VAR 0 4
29605: PUSH
29606: DOUBLE
29607: LD_INT 16
29609: DEC
29610: ST_TO_ADDR
29611: LD_INT 25
29613: PUSH
29614: FOR_TO
29615: IFFALSE 29688
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29617: LD_ADDR_VAR 0 3
29621: PUSH
29622: LD_VAR 0 3
29626: PUSH
29627: LD_INT 22
29629: PUSH
29630: LD_VAR 0 1
29634: PPUSH
29635: CALL_OW 255
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 91
29646: PUSH
29647: LD_VAR 0 1
29651: PUSH
29652: LD_INT 6
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 30
29662: PUSH
29663: LD_VAR 0 4
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: LIST
29676: PUSH
29677: EMPTY
29678: LIST
29679: PPUSH
29680: CALL_OW 69
29684: ADD
29685: ST_TO_ADDR
29686: GO 29614
29688: POP
29689: POP
// for i = 1 to tmp do
29690: LD_ADDR_VAR 0 4
29694: PUSH
29695: DOUBLE
29696: LD_INT 1
29698: DEC
29699: ST_TO_ADDR
29700: LD_VAR 0 3
29704: PUSH
29705: FOR_TO
29706: IFFALSE 29794
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29708: LD_ADDR_VAR 0 5
29712: PUSH
29713: LD_VAR 0 5
29717: PUSH
29718: LD_VAR 0 3
29722: PUSH
29723: LD_VAR 0 4
29727: ARRAY
29728: PPUSH
29729: CALL_OW 266
29733: PUSH
29734: LD_VAR 0 3
29738: PUSH
29739: LD_VAR 0 4
29743: ARRAY
29744: PPUSH
29745: CALL_OW 250
29749: PUSH
29750: LD_VAR 0 3
29754: PUSH
29755: LD_VAR 0 4
29759: ARRAY
29760: PPUSH
29761: CALL_OW 251
29765: PUSH
29766: LD_VAR 0 3
29770: PUSH
29771: LD_VAR 0 4
29775: ARRAY
29776: PPUSH
29777: CALL_OW 254
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: PUSH
29788: EMPTY
29789: LIST
29790: ADD
29791: ST_TO_ADDR
29792: GO 29705
29794: POP
29795: POP
// result := list ;
29796: LD_ADDR_VAR 0 2
29800: PUSH
29801: LD_VAR 0 5
29805: ST_TO_ADDR
// end ;
29806: LD_VAR 0 2
29810: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29811: LD_INT 0
29813: PPUSH
29814: PPUSH
29815: PPUSH
29816: PPUSH
29817: PPUSH
29818: PPUSH
29819: PPUSH
// if not factory then
29820: LD_VAR 0 1
29824: NOT
29825: IFFALSE 29829
// exit ;
29827: GO 30422
// if control = control_apeman then
29829: LD_VAR 0 4
29833: PUSH
29834: LD_INT 5
29836: EQUAL
29837: IFFALSE 29946
// begin tmp := UnitsInside ( factory ) ;
29839: LD_ADDR_VAR 0 8
29843: PUSH
29844: LD_VAR 0 1
29848: PPUSH
29849: CALL_OW 313
29853: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29854: LD_VAR 0 8
29858: PPUSH
29859: LD_INT 25
29861: PUSH
29862: LD_INT 12
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PPUSH
29869: CALL_OW 72
29873: NOT
29874: IFFALSE 29884
// control := control_manual ;
29876: LD_ADDR_VAR 0 4
29880: PUSH
29881: LD_INT 1
29883: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29884: LD_ADDR_VAR 0 8
29888: PUSH
29889: LD_VAR 0 1
29893: PPUSH
29894: CALL 29581 0 1
29898: ST_TO_ADDR
// if tmp then
29899: LD_VAR 0 8
29903: IFFALSE 29946
// begin for i in tmp do
29905: LD_ADDR_VAR 0 7
29909: PUSH
29910: LD_VAR 0 8
29914: PUSH
29915: FOR_IN
29916: IFFALSE 29944
// if i [ 1 ] = b_ext_radio then
29918: LD_VAR 0 7
29922: PUSH
29923: LD_INT 1
29925: ARRAY
29926: PUSH
29927: LD_INT 22
29929: EQUAL
29930: IFFALSE 29942
// begin control := control_remote ;
29932: LD_ADDR_VAR 0 4
29936: PUSH
29937: LD_INT 2
29939: ST_TO_ADDR
// break ;
29940: GO 29944
// end ;
29942: GO 29915
29944: POP
29945: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29946: LD_VAR 0 1
29950: PPUSH
29951: LD_VAR 0 2
29955: PPUSH
29956: LD_VAR 0 3
29960: PPUSH
29961: LD_VAR 0 4
29965: PPUSH
29966: LD_VAR 0 5
29970: PPUSH
29971: CALL_OW 448
29975: IFFALSE 30010
// begin result := [ chassis , engine , control , weapon ] ;
29977: LD_ADDR_VAR 0 6
29981: PUSH
29982: LD_VAR 0 2
29986: PUSH
29987: LD_VAR 0 3
29991: PUSH
29992: LD_VAR 0 4
29996: PUSH
29997: LD_VAR 0 5
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: ST_TO_ADDR
// exit ;
30008: GO 30422
// end ; _chassis := AvailableChassisList ( factory ) ;
30010: LD_ADDR_VAR 0 9
30014: PUSH
30015: LD_VAR 0 1
30019: PPUSH
30020: CALL_OW 475
30024: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30025: LD_ADDR_VAR 0 11
30029: PUSH
30030: LD_VAR 0 1
30034: PPUSH
30035: CALL_OW 476
30039: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30040: LD_ADDR_VAR 0 12
30044: PUSH
30045: LD_VAR 0 1
30049: PPUSH
30050: CALL_OW 477
30054: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30055: LD_ADDR_VAR 0 10
30059: PUSH
30060: LD_VAR 0 1
30064: PPUSH
30065: CALL_OW 478
30069: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30070: LD_VAR 0 9
30074: NOT
30075: PUSH
30076: LD_VAR 0 11
30080: NOT
30081: OR
30082: PUSH
30083: LD_VAR 0 12
30087: NOT
30088: OR
30089: PUSH
30090: LD_VAR 0 10
30094: NOT
30095: OR
30096: IFFALSE 30131
// begin result := [ chassis , engine , control , weapon ] ;
30098: LD_ADDR_VAR 0 6
30102: PUSH
30103: LD_VAR 0 2
30107: PUSH
30108: LD_VAR 0 3
30112: PUSH
30113: LD_VAR 0 4
30117: PUSH
30118: LD_VAR 0 5
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: ST_TO_ADDR
// exit ;
30129: GO 30422
// end ; if not chassis in _chassis then
30131: LD_VAR 0 2
30135: PUSH
30136: LD_VAR 0 9
30140: IN
30141: NOT
30142: IFFALSE 30168
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30144: LD_ADDR_VAR 0 2
30148: PUSH
30149: LD_VAR 0 9
30153: PUSH
30154: LD_INT 1
30156: PPUSH
30157: LD_VAR 0 9
30161: PPUSH
30162: CALL_OW 12
30166: ARRAY
30167: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30168: LD_VAR 0 2
30172: PPUSH
30173: LD_VAR 0 3
30177: PPUSH
30178: CALL 30427 0 2
30182: NOT
30183: IFFALSE 30242
// repeat engine := _engine [ 1 ] ;
30185: LD_ADDR_VAR 0 3
30189: PUSH
30190: LD_VAR 0 11
30194: PUSH
30195: LD_INT 1
30197: ARRAY
30198: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30199: LD_ADDR_VAR 0 11
30203: PUSH
30204: LD_VAR 0 11
30208: PPUSH
30209: LD_INT 1
30211: PPUSH
30212: CALL_OW 3
30216: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30217: LD_VAR 0 2
30221: PPUSH
30222: LD_VAR 0 3
30226: PPUSH
30227: CALL 30427 0 2
30231: PUSH
30232: LD_VAR 0 11
30236: PUSH
30237: EMPTY
30238: EQUAL
30239: OR
30240: IFFALSE 30185
// if not control in _control then
30242: LD_VAR 0 4
30246: PUSH
30247: LD_VAR 0 12
30251: IN
30252: NOT
30253: IFFALSE 30279
// control := _control [ rand ( 1 , _control ) ] ;
30255: LD_ADDR_VAR 0 4
30259: PUSH
30260: LD_VAR 0 12
30264: PUSH
30265: LD_INT 1
30267: PPUSH
30268: LD_VAR 0 12
30272: PPUSH
30273: CALL_OW 12
30277: ARRAY
30278: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30279: LD_VAR 0 2
30283: PPUSH
30284: LD_VAR 0 5
30288: PPUSH
30289: CALL 30647 0 2
30293: NOT
30294: IFFALSE 30353
// repeat weapon := _weapon [ 1 ] ;
30296: LD_ADDR_VAR 0 5
30300: PUSH
30301: LD_VAR 0 10
30305: PUSH
30306: LD_INT 1
30308: ARRAY
30309: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30310: LD_ADDR_VAR 0 10
30314: PUSH
30315: LD_VAR 0 10
30319: PPUSH
30320: LD_INT 1
30322: PPUSH
30323: CALL_OW 3
30327: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30328: LD_VAR 0 2
30332: PPUSH
30333: LD_VAR 0 5
30337: PPUSH
30338: CALL 30647 0 2
30342: PUSH
30343: LD_VAR 0 10
30347: PUSH
30348: EMPTY
30349: EQUAL
30350: OR
30351: IFFALSE 30296
// result := [ ] ;
30353: LD_ADDR_VAR 0 6
30357: PUSH
30358: EMPTY
30359: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30360: LD_VAR 0 1
30364: PPUSH
30365: LD_VAR 0 2
30369: PPUSH
30370: LD_VAR 0 3
30374: PPUSH
30375: LD_VAR 0 4
30379: PPUSH
30380: LD_VAR 0 5
30384: PPUSH
30385: CALL_OW 448
30389: IFFALSE 30422
// result := [ chassis , engine , control , weapon ] ;
30391: LD_ADDR_VAR 0 6
30395: PUSH
30396: LD_VAR 0 2
30400: PUSH
30401: LD_VAR 0 3
30405: PUSH
30406: LD_VAR 0 4
30410: PUSH
30411: LD_VAR 0 5
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: ST_TO_ADDR
// end ;
30422: LD_VAR 0 6
30426: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30427: LD_INT 0
30429: PPUSH
// if not chassis or not engine then
30430: LD_VAR 0 1
30434: NOT
30435: PUSH
30436: LD_VAR 0 2
30440: NOT
30441: OR
30442: IFFALSE 30446
// exit ;
30444: GO 30642
// case engine of engine_solar :
30446: LD_VAR 0 2
30450: PUSH
30451: LD_INT 2
30453: DOUBLE
30454: EQUAL
30455: IFTRUE 30459
30457: GO 30497
30459: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30460: LD_ADDR_VAR 0 3
30464: PUSH
30465: LD_INT 11
30467: PUSH
30468: LD_INT 12
30470: PUSH
30471: LD_INT 13
30473: PUSH
30474: LD_INT 14
30476: PUSH
30477: LD_INT 1
30479: PUSH
30480: LD_INT 2
30482: PUSH
30483: LD_INT 3
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: ST_TO_ADDR
30495: GO 30626
30497: LD_INT 1
30499: DOUBLE
30500: EQUAL
30501: IFTRUE 30505
30503: GO 30567
30505: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30506: LD_ADDR_VAR 0 3
30510: PUSH
30511: LD_INT 11
30513: PUSH
30514: LD_INT 12
30516: PUSH
30517: LD_INT 13
30519: PUSH
30520: LD_INT 14
30522: PUSH
30523: LD_INT 1
30525: PUSH
30526: LD_INT 2
30528: PUSH
30529: LD_INT 3
30531: PUSH
30532: LD_INT 4
30534: PUSH
30535: LD_INT 5
30537: PUSH
30538: LD_INT 21
30540: PUSH
30541: LD_INT 23
30543: PUSH
30544: LD_INT 22
30546: PUSH
30547: LD_INT 24
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: ST_TO_ADDR
30565: GO 30626
30567: LD_INT 3
30569: DOUBLE
30570: EQUAL
30571: IFTRUE 30575
30573: GO 30625
30575: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30576: LD_ADDR_VAR 0 3
30580: PUSH
30581: LD_INT 13
30583: PUSH
30584: LD_INT 14
30586: PUSH
30587: LD_INT 2
30589: PUSH
30590: LD_INT 3
30592: PUSH
30593: LD_INT 4
30595: PUSH
30596: LD_INT 5
30598: PUSH
30599: LD_INT 21
30601: PUSH
30602: LD_INT 22
30604: PUSH
30605: LD_INT 23
30607: PUSH
30608: LD_INT 24
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: ST_TO_ADDR
30623: GO 30626
30625: POP
// result := ( chassis in result ) ;
30626: LD_ADDR_VAR 0 3
30630: PUSH
30631: LD_VAR 0 1
30635: PUSH
30636: LD_VAR 0 3
30640: IN
30641: ST_TO_ADDR
// end ;
30642: LD_VAR 0 3
30646: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30647: LD_INT 0
30649: PPUSH
// if not chassis or not weapon then
30650: LD_VAR 0 1
30654: NOT
30655: PUSH
30656: LD_VAR 0 2
30660: NOT
30661: OR
30662: IFFALSE 30666
// exit ;
30664: GO 31726
// case weapon of us_machine_gun :
30666: LD_VAR 0 2
30670: PUSH
30671: LD_INT 2
30673: DOUBLE
30674: EQUAL
30675: IFTRUE 30679
30677: GO 30709
30679: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30680: LD_ADDR_VAR 0 3
30684: PUSH
30685: LD_INT 1
30687: PUSH
30688: LD_INT 2
30690: PUSH
30691: LD_INT 3
30693: PUSH
30694: LD_INT 4
30696: PUSH
30697: LD_INT 5
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: ST_TO_ADDR
30707: GO 31710
30709: LD_INT 3
30711: DOUBLE
30712: EQUAL
30713: IFTRUE 30717
30715: GO 30747
30717: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30718: LD_ADDR_VAR 0 3
30722: PUSH
30723: LD_INT 1
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: LD_INT 3
30731: PUSH
30732: LD_INT 4
30734: PUSH
30735: LD_INT 5
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: ST_TO_ADDR
30745: GO 31710
30747: LD_INT 11
30749: DOUBLE
30750: EQUAL
30751: IFTRUE 30755
30753: GO 30785
30755: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30756: LD_ADDR_VAR 0 3
30760: PUSH
30761: LD_INT 1
30763: PUSH
30764: LD_INT 2
30766: PUSH
30767: LD_INT 3
30769: PUSH
30770: LD_INT 4
30772: PUSH
30773: LD_INT 5
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: ST_TO_ADDR
30783: GO 31710
30785: LD_INT 4
30787: DOUBLE
30788: EQUAL
30789: IFTRUE 30793
30791: GO 30819
30793: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30794: LD_ADDR_VAR 0 3
30798: PUSH
30799: LD_INT 2
30801: PUSH
30802: LD_INT 3
30804: PUSH
30805: LD_INT 4
30807: PUSH
30808: LD_INT 5
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: ST_TO_ADDR
30817: GO 31710
30819: LD_INT 5
30821: DOUBLE
30822: EQUAL
30823: IFTRUE 30827
30825: GO 30853
30827: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30828: LD_ADDR_VAR 0 3
30832: PUSH
30833: LD_INT 2
30835: PUSH
30836: LD_INT 3
30838: PUSH
30839: LD_INT 4
30841: PUSH
30842: LD_INT 5
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: ST_TO_ADDR
30851: GO 31710
30853: LD_INT 9
30855: DOUBLE
30856: EQUAL
30857: IFTRUE 30861
30859: GO 30887
30861: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30862: LD_ADDR_VAR 0 3
30866: PUSH
30867: LD_INT 2
30869: PUSH
30870: LD_INT 3
30872: PUSH
30873: LD_INT 4
30875: PUSH
30876: LD_INT 5
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: ST_TO_ADDR
30885: GO 31710
30887: LD_INT 7
30889: DOUBLE
30890: EQUAL
30891: IFTRUE 30895
30893: GO 30921
30895: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30896: LD_ADDR_VAR 0 3
30900: PUSH
30901: LD_INT 2
30903: PUSH
30904: LD_INT 3
30906: PUSH
30907: LD_INT 4
30909: PUSH
30910: LD_INT 5
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: ST_TO_ADDR
30919: GO 31710
30921: LD_INT 12
30923: DOUBLE
30924: EQUAL
30925: IFTRUE 30929
30927: GO 30955
30929: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30930: LD_ADDR_VAR 0 3
30934: PUSH
30935: LD_INT 2
30937: PUSH
30938: LD_INT 3
30940: PUSH
30941: LD_INT 4
30943: PUSH
30944: LD_INT 5
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: ST_TO_ADDR
30953: GO 31710
30955: LD_INT 13
30957: DOUBLE
30958: EQUAL
30959: IFTRUE 30963
30961: GO 30989
30963: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30964: LD_ADDR_VAR 0 3
30968: PUSH
30969: LD_INT 2
30971: PUSH
30972: LD_INT 3
30974: PUSH
30975: LD_INT 4
30977: PUSH
30978: LD_INT 5
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: ST_TO_ADDR
30987: GO 31710
30989: LD_INT 14
30991: DOUBLE
30992: EQUAL
30993: IFTRUE 30997
30995: GO 31015
30997: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30998: LD_ADDR_VAR 0 3
31002: PUSH
31003: LD_INT 4
31005: PUSH
31006: LD_INT 5
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: ST_TO_ADDR
31013: GO 31710
31015: LD_INT 6
31017: DOUBLE
31018: EQUAL
31019: IFTRUE 31023
31021: GO 31041
31023: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31024: LD_ADDR_VAR 0 3
31028: PUSH
31029: LD_INT 4
31031: PUSH
31032: LD_INT 5
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: ST_TO_ADDR
31039: GO 31710
31041: LD_INT 10
31043: DOUBLE
31044: EQUAL
31045: IFTRUE 31049
31047: GO 31067
31049: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31050: LD_ADDR_VAR 0 3
31054: PUSH
31055: LD_INT 4
31057: PUSH
31058: LD_INT 5
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: ST_TO_ADDR
31065: GO 31710
31067: LD_INT 22
31069: DOUBLE
31070: EQUAL
31071: IFTRUE 31075
31073: GO 31101
31075: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31076: LD_ADDR_VAR 0 3
31080: PUSH
31081: LD_INT 11
31083: PUSH
31084: LD_INT 12
31086: PUSH
31087: LD_INT 13
31089: PUSH
31090: LD_INT 14
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: ST_TO_ADDR
31099: GO 31710
31101: LD_INT 23
31103: DOUBLE
31104: EQUAL
31105: IFTRUE 31109
31107: GO 31135
31109: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31110: LD_ADDR_VAR 0 3
31114: PUSH
31115: LD_INT 11
31117: PUSH
31118: LD_INT 12
31120: PUSH
31121: LD_INT 13
31123: PUSH
31124: LD_INT 14
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: ST_TO_ADDR
31133: GO 31710
31135: LD_INT 24
31137: DOUBLE
31138: EQUAL
31139: IFTRUE 31143
31141: GO 31169
31143: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31144: LD_ADDR_VAR 0 3
31148: PUSH
31149: LD_INT 11
31151: PUSH
31152: LD_INT 12
31154: PUSH
31155: LD_INT 13
31157: PUSH
31158: LD_INT 14
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: ST_TO_ADDR
31167: GO 31710
31169: LD_INT 30
31171: DOUBLE
31172: EQUAL
31173: IFTRUE 31177
31175: GO 31203
31177: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31178: LD_ADDR_VAR 0 3
31182: PUSH
31183: LD_INT 11
31185: PUSH
31186: LD_INT 12
31188: PUSH
31189: LD_INT 13
31191: PUSH
31192: LD_INT 14
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: ST_TO_ADDR
31201: GO 31710
31203: LD_INT 25
31205: DOUBLE
31206: EQUAL
31207: IFTRUE 31211
31209: GO 31229
31211: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31212: LD_ADDR_VAR 0 3
31216: PUSH
31217: LD_INT 13
31219: PUSH
31220: LD_INT 14
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: ST_TO_ADDR
31227: GO 31710
31229: LD_INT 27
31231: DOUBLE
31232: EQUAL
31233: IFTRUE 31237
31235: GO 31255
31237: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31238: LD_ADDR_VAR 0 3
31242: PUSH
31243: LD_INT 13
31245: PUSH
31246: LD_INT 14
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: ST_TO_ADDR
31253: GO 31710
31255: LD_INT 92
31257: DOUBLE
31258: EQUAL
31259: IFTRUE 31263
31261: GO 31289
31263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31264: LD_ADDR_VAR 0 3
31268: PUSH
31269: LD_INT 11
31271: PUSH
31272: LD_INT 12
31274: PUSH
31275: LD_INT 13
31277: PUSH
31278: LD_INT 14
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: ST_TO_ADDR
31287: GO 31710
31289: LD_INT 28
31291: DOUBLE
31292: EQUAL
31293: IFTRUE 31297
31295: GO 31315
31297: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31298: LD_ADDR_VAR 0 3
31302: PUSH
31303: LD_INT 13
31305: PUSH
31306: LD_INT 14
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: ST_TO_ADDR
31313: GO 31710
31315: LD_INT 29
31317: DOUBLE
31318: EQUAL
31319: IFTRUE 31323
31321: GO 31341
31323: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31324: LD_ADDR_VAR 0 3
31328: PUSH
31329: LD_INT 13
31331: PUSH
31332: LD_INT 14
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: ST_TO_ADDR
31339: GO 31710
31341: LD_INT 31
31343: DOUBLE
31344: EQUAL
31345: IFTRUE 31349
31347: GO 31367
31349: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31350: LD_ADDR_VAR 0 3
31354: PUSH
31355: LD_INT 13
31357: PUSH
31358: LD_INT 14
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: ST_TO_ADDR
31365: GO 31710
31367: LD_INT 26
31369: DOUBLE
31370: EQUAL
31371: IFTRUE 31375
31373: GO 31393
31375: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31376: LD_ADDR_VAR 0 3
31380: PUSH
31381: LD_INT 13
31383: PUSH
31384: LD_INT 14
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: ST_TO_ADDR
31391: GO 31710
31393: LD_INT 42
31395: DOUBLE
31396: EQUAL
31397: IFTRUE 31401
31399: GO 31427
31401: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31402: LD_ADDR_VAR 0 3
31406: PUSH
31407: LD_INT 21
31409: PUSH
31410: LD_INT 22
31412: PUSH
31413: LD_INT 23
31415: PUSH
31416: LD_INT 24
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: ST_TO_ADDR
31425: GO 31710
31427: LD_INT 43
31429: DOUBLE
31430: EQUAL
31431: IFTRUE 31435
31433: GO 31461
31435: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31436: LD_ADDR_VAR 0 3
31440: PUSH
31441: LD_INT 21
31443: PUSH
31444: LD_INT 22
31446: PUSH
31447: LD_INT 23
31449: PUSH
31450: LD_INT 24
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: ST_TO_ADDR
31459: GO 31710
31461: LD_INT 44
31463: DOUBLE
31464: EQUAL
31465: IFTRUE 31469
31467: GO 31495
31469: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31470: LD_ADDR_VAR 0 3
31474: PUSH
31475: LD_INT 21
31477: PUSH
31478: LD_INT 22
31480: PUSH
31481: LD_INT 23
31483: PUSH
31484: LD_INT 24
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: ST_TO_ADDR
31493: GO 31710
31495: LD_INT 45
31497: DOUBLE
31498: EQUAL
31499: IFTRUE 31503
31501: GO 31529
31503: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31504: LD_ADDR_VAR 0 3
31508: PUSH
31509: LD_INT 21
31511: PUSH
31512: LD_INT 22
31514: PUSH
31515: LD_INT 23
31517: PUSH
31518: LD_INT 24
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: ST_TO_ADDR
31527: GO 31710
31529: LD_INT 49
31531: DOUBLE
31532: EQUAL
31533: IFTRUE 31537
31535: GO 31563
31537: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31538: LD_ADDR_VAR 0 3
31542: PUSH
31543: LD_INT 21
31545: PUSH
31546: LD_INT 22
31548: PUSH
31549: LD_INT 23
31551: PUSH
31552: LD_INT 24
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: ST_TO_ADDR
31561: GO 31710
31563: LD_INT 51
31565: DOUBLE
31566: EQUAL
31567: IFTRUE 31571
31569: GO 31597
31571: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31572: LD_ADDR_VAR 0 3
31576: PUSH
31577: LD_INT 21
31579: PUSH
31580: LD_INT 22
31582: PUSH
31583: LD_INT 23
31585: PUSH
31586: LD_INT 24
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: ST_TO_ADDR
31595: GO 31710
31597: LD_INT 52
31599: DOUBLE
31600: EQUAL
31601: IFTRUE 31605
31603: GO 31631
31605: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31606: LD_ADDR_VAR 0 3
31610: PUSH
31611: LD_INT 21
31613: PUSH
31614: LD_INT 22
31616: PUSH
31617: LD_INT 23
31619: PUSH
31620: LD_INT 24
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: ST_TO_ADDR
31629: GO 31710
31631: LD_INT 53
31633: DOUBLE
31634: EQUAL
31635: IFTRUE 31639
31637: GO 31657
31639: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31640: LD_ADDR_VAR 0 3
31644: PUSH
31645: LD_INT 23
31647: PUSH
31648: LD_INT 24
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: ST_TO_ADDR
31655: GO 31710
31657: LD_INT 46
31659: DOUBLE
31660: EQUAL
31661: IFTRUE 31665
31663: GO 31683
31665: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31666: LD_ADDR_VAR 0 3
31670: PUSH
31671: LD_INT 23
31673: PUSH
31674: LD_INT 24
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: ST_TO_ADDR
31681: GO 31710
31683: LD_INT 47
31685: DOUBLE
31686: EQUAL
31687: IFTRUE 31691
31689: GO 31709
31691: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31692: LD_ADDR_VAR 0 3
31696: PUSH
31697: LD_INT 23
31699: PUSH
31700: LD_INT 24
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: ST_TO_ADDR
31707: GO 31710
31709: POP
// result := ( chassis in result ) ;
31710: LD_ADDR_VAR 0 3
31714: PUSH
31715: LD_VAR 0 1
31719: PUSH
31720: LD_VAR 0 3
31724: IN
31725: ST_TO_ADDR
// end ;
31726: LD_VAR 0 3
31730: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31731: LD_INT 0
31733: PPUSH
31734: PPUSH
31735: PPUSH
31736: PPUSH
31737: PPUSH
31738: PPUSH
31739: PPUSH
// result := array ;
31740: LD_ADDR_VAR 0 5
31744: PUSH
31745: LD_VAR 0 1
31749: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31750: LD_VAR 0 1
31754: NOT
31755: PUSH
31756: LD_VAR 0 2
31760: NOT
31761: OR
31762: PUSH
31763: LD_VAR 0 3
31767: NOT
31768: OR
31769: PUSH
31770: LD_VAR 0 2
31774: PUSH
31775: LD_VAR 0 1
31779: GREATER
31780: OR
31781: PUSH
31782: LD_VAR 0 3
31786: PUSH
31787: LD_VAR 0 1
31791: GREATER
31792: OR
31793: IFFALSE 31797
// exit ;
31795: GO 32093
// if direction then
31797: LD_VAR 0 4
31801: IFFALSE 31865
// begin d := 1 ;
31803: LD_ADDR_VAR 0 9
31807: PUSH
31808: LD_INT 1
31810: ST_TO_ADDR
// if i_from > i_to then
31811: LD_VAR 0 2
31815: PUSH
31816: LD_VAR 0 3
31820: GREATER
31821: IFFALSE 31847
// length := ( array - i_from ) + i_to else
31823: LD_ADDR_VAR 0 11
31827: PUSH
31828: LD_VAR 0 1
31832: PUSH
31833: LD_VAR 0 2
31837: MINUS
31838: PUSH
31839: LD_VAR 0 3
31843: PLUS
31844: ST_TO_ADDR
31845: GO 31863
// length := i_to - i_from ;
31847: LD_ADDR_VAR 0 11
31851: PUSH
31852: LD_VAR 0 3
31856: PUSH
31857: LD_VAR 0 2
31861: MINUS
31862: ST_TO_ADDR
// end else
31863: GO 31926
// begin d := - 1 ;
31865: LD_ADDR_VAR 0 9
31869: PUSH
31870: LD_INT 1
31872: NEG
31873: ST_TO_ADDR
// if i_from > i_to then
31874: LD_VAR 0 2
31878: PUSH
31879: LD_VAR 0 3
31883: GREATER
31884: IFFALSE 31904
// length := i_from - i_to else
31886: LD_ADDR_VAR 0 11
31890: PUSH
31891: LD_VAR 0 2
31895: PUSH
31896: LD_VAR 0 3
31900: MINUS
31901: ST_TO_ADDR
31902: GO 31926
// length := ( array - i_to ) + i_from ;
31904: LD_ADDR_VAR 0 11
31908: PUSH
31909: LD_VAR 0 1
31913: PUSH
31914: LD_VAR 0 3
31918: MINUS
31919: PUSH
31920: LD_VAR 0 2
31924: PLUS
31925: ST_TO_ADDR
// end ; if not length then
31926: LD_VAR 0 11
31930: NOT
31931: IFFALSE 31935
// exit ;
31933: GO 32093
// tmp := array ;
31935: LD_ADDR_VAR 0 10
31939: PUSH
31940: LD_VAR 0 1
31944: ST_TO_ADDR
// for i = 1 to length do
31945: LD_ADDR_VAR 0 6
31949: PUSH
31950: DOUBLE
31951: LD_INT 1
31953: DEC
31954: ST_TO_ADDR
31955: LD_VAR 0 11
31959: PUSH
31960: FOR_TO
31961: IFFALSE 32081
// begin for j = 1 to array do
31963: LD_ADDR_VAR 0 7
31967: PUSH
31968: DOUBLE
31969: LD_INT 1
31971: DEC
31972: ST_TO_ADDR
31973: LD_VAR 0 1
31977: PUSH
31978: FOR_TO
31979: IFFALSE 32067
// begin k := j + d ;
31981: LD_ADDR_VAR 0 8
31985: PUSH
31986: LD_VAR 0 7
31990: PUSH
31991: LD_VAR 0 9
31995: PLUS
31996: ST_TO_ADDR
// if k > array then
31997: LD_VAR 0 8
32001: PUSH
32002: LD_VAR 0 1
32006: GREATER
32007: IFFALSE 32017
// k := 1 ;
32009: LD_ADDR_VAR 0 8
32013: PUSH
32014: LD_INT 1
32016: ST_TO_ADDR
// if not k then
32017: LD_VAR 0 8
32021: NOT
32022: IFFALSE 32034
// k := array ;
32024: LD_ADDR_VAR 0 8
32028: PUSH
32029: LD_VAR 0 1
32033: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32034: LD_ADDR_VAR 0 10
32038: PUSH
32039: LD_VAR 0 10
32043: PPUSH
32044: LD_VAR 0 8
32048: PPUSH
32049: LD_VAR 0 1
32053: PUSH
32054: LD_VAR 0 7
32058: ARRAY
32059: PPUSH
32060: CALL_OW 1
32064: ST_TO_ADDR
// end ;
32065: GO 31978
32067: POP
32068: POP
// array := tmp ;
32069: LD_ADDR_VAR 0 1
32073: PUSH
32074: LD_VAR 0 10
32078: ST_TO_ADDR
// end ;
32079: GO 31960
32081: POP
32082: POP
// result := array ;
32083: LD_ADDR_VAR 0 5
32087: PUSH
32088: LD_VAR 0 1
32092: ST_TO_ADDR
// end ;
32093: LD_VAR 0 5
32097: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32098: LD_INT 0
32100: PPUSH
32101: PPUSH
// result := 0 ;
32102: LD_ADDR_VAR 0 3
32106: PUSH
32107: LD_INT 0
32109: ST_TO_ADDR
// if not array or not value in array then
32110: LD_VAR 0 1
32114: NOT
32115: PUSH
32116: LD_VAR 0 2
32120: PUSH
32121: LD_VAR 0 1
32125: IN
32126: NOT
32127: OR
32128: IFFALSE 32132
// exit ;
32130: GO 32186
// for i = 1 to array do
32132: LD_ADDR_VAR 0 4
32136: PUSH
32137: DOUBLE
32138: LD_INT 1
32140: DEC
32141: ST_TO_ADDR
32142: LD_VAR 0 1
32146: PUSH
32147: FOR_TO
32148: IFFALSE 32184
// if value = array [ i ] then
32150: LD_VAR 0 2
32154: PUSH
32155: LD_VAR 0 1
32159: PUSH
32160: LD_VAR 0 4
32164: ARRAY
32165: EQUAL
32166: IFFALSE 32182
// begin result := i ;
32168: LD_ADDR_VAR 0 3
32172: PUSH
32173: LD_VAR 0 4
32177: ST_TO_ADDR
// exit ;
32178: POP
32179: POP
32180: GO 32186
// end ;
32182: GO 32147
32184: POP
32185: POP
// end ;
32186: LD_VAR 0 3
32190: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32191: LD_INT 0
32193: PPUSH
// vc_chassis := chassis ;
32194: LD_ADDR_OWVAR 37
32198: PUSH
32199: LD_VAR 0 1
32203: ST_TO_ADDR
// vc_engine := engine ;
32204: LD_ADDR_OWVAR 39
32208: PUSH
32209: LD_VAR 0 2
32213: ST_TO_ADDR
// vc_control := control ;
32214: LD_ADDR_OWVAR 38
32218: PUSH
32219: LD_VAR 0 3
32223: ST_TO_ADDR
// vc_weapon := weapon ;
32224: LD_ADDR_OWVAR 40
32228: PUSH
32229: LD_VAR 0 4
32233: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32234: LD_ADDR_OWVAR 41
32238: PUSH
32239: LD_VAR 0 5
32243: ST_TO_ADDR
// end ;
32244: LD_VAR 0 6
32248: RET
// export function WantPlant ( unit ) ; var task ; begin
32249: LD_INT 0
32251: PPUSH
32252: PPUSH
// result := false ;
32253: LD_ADDR_VAR 0 2
32257: PUSH
32258: LD_INT 0
32260: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32261: LD_ADDR_VAR 0 3
32265: PUSH
32266: LD_VAR 0 1
32270: PPUSH
32271: CALL_OW 437
32275: ST_TO_ADDR
// if task then
32276: LD_VAR 0 3
32280: IFFALSE 32308
// if task [ 1 ] [ 1 ] = p then
32282: LD_VAR 0 3
32286: PUSH
32287: LD_INT 1
32289: ARRAY
32290: PUSH
32291: LD_INT 1
32293: ARRAY
32294: PUSH
32295: LD_STRING p
32297: EQUAL
32298: IFFALSE 32308
// result := true ;
32300: LD_ADDR_VAR 0 2
32304: PUSH
32305: LD_INT 1
32307: ST_TO_ADDR
// end ;
32308: LD_VAR 0 2
32312: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32313: LD_INT 0
32315: PPUSH
32316: PPUSH
32317: PPUSH
32318: PPUSH
// if pos < 1 then
32319: LD_VAR 0 2
32323: PUSH
32324: LD_INT 1
32326: LESS
32327: IFFALSE 32331
// exit ;
32329: GO 32634
// if pos = 1 then
32331: LD_VAR 0 2
32335: PUSH
32336: LD_INT 1
32338: EQUAL
32339: IFFALSE 32372
// result := Replace ( arr , pos [ 1 ] , value ) else
32341: LD_ADDR_VAR 0 4
32345: PUSH
32346: LD_VAR 0 1
32350: PPUSH
32351: LD_VAR 0 2
32355: PUSH
32356: LD_INT 1
32358: ARRAY
32359: PPUSH
32360: LD_VAR 0 3
32364: PPUSH
32365: CALL_OW 1
32369: ST_TO_ADDR
32370: GO 32634
// begin tmp := arr ;
32372: LD_ADDR_VAR 0 6
32376: PUSH
32377: LD_VAR 0 1
32381: ST_TO_ADDR
// s_arr := [ tmp ] ;
32382: LD_ADDR_VAR 0 7
32386: PUSH
32387: LD_VAR 0 6
32391: PUSH
32392: EMPTY
32393: LIST
32394: ST_TO_ADDR
// for i = 1 to pos - 1 do
32395: LD_ADDR_VAR 0 5
32399: PUSH
32400: DOUBLE
32401: LD_INT 1
32403: DEC
32404: ST_TO_ADDR
32405: LD_VAR 0 2
32409: PUSH
32410: LD_INT 1
32412: MINUS
32413: PUSH
32414: FOR_TO
32415: IFFALSE 32460
// begin tmp := tmp [ pos [ i ] ] ;
32417: LD_ADDR_VAR 0 6
32421: PUSH
32422: LD_VAR 0 6
32426: PUSH
32427: LD_VAR 0 2
32431: PUSH
32432: LD_VAR 0 5
32436: ARRAY
32437: ARRAY
32438: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32439: LD_ADDR_VAR 0 7
32443: PUSH
32444: LD_VAR 0 7
32448: PUSH
32449: LD_VAR 0 6
32453: PUSH
32454: EMPTY
32455: LIST
32456: ADD
32457: ST_TO_ADDR
// end ;
32458: GO 32414
32460: POP
32461: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32462: LD_ADDR_VAR 0 6
32466: PUSH
32467: LD_VAR 0 6
32471: PPUSH
32472: LD_VAR 0 2
32476: PUSH
32477: LD_VAR 0 2
32481: ARRAY
32482: PPUSH
32483: LD_VAR 0 3
32487: PPUSH
32488: CALL_OW 1
32492: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32493: LD_ADDR_VAR 0 7
32497: PUSH
32498: LD_VAR 0 7
32502: PPUSH
32503: LD_VAR 0 7
32507: PPUSH
32508: LD_VAR 0 6
32512: PPUSH
32513: CALL_OW 1
32517: ST_TO_ADDR
// for i = s_arr downto 2 do
32518: LD_ADDR_VAR 0 5
32522: PUSH
32523: DOUBLE
32524: LD_VAR 0 7
32528: INC
32529: ST_TO_ADDR
32530: LD_INT 2
32532: PUSH
32533: FOR_DOWNTO
32534: IFFALSE 32618
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32536: LD_ADDR_VAR 0 6
32540: PUSH
32541: LD_VAR 0 7
32545: PUSH
32546: LD_VAR 0 5
32550: PUSH
32551: LD_INT 1
32553: MINUS
32554: ARRAY
32555: PPUSH
32556: LD_VAR 0 2
32560: PUSH
32561: LD_VAR 0 5
32565: PUSH
32566: LD_INT 1
32568: MINUS
32569: ARRAY
32570: PPUSH
32571: LD_VAR 0 7
32575: PUSH
32576: LD_VAR 0 5
32580: ARRAY
32581: PPUSH
32582: CALL_OW 1
32586: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32587: LD_ADDR_VAR 0 7
32591: PUSH
32592: LD_VAR 0 7
32596: PPUSH
32597: LD_VAR 0 5
32601: PUSH
32602: LD_INT 1
32604: MINUS
32605: PPUSH
32606: LD_VAR 0 6
32610: PPUSH
32611: CALL_OW 1
32615: ST_TO_ADDR
// end ;
32616: GO 32533
32618: POP
32619: POP
// result := s_arr [ 1 ] ;
32620: LD_ADDR_VAR 0 4
32624: PUSH
32625: LD_VAR 0 7
32629: PUSH
32630: LD_INT 1
32632: ARRAY
32633: ST_TO_ADDR
// end ; end ;
32634: LD_VAR 0 4
32638: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32639: LD_INT 0
32641: PPUSH
32642: PPUSH
// if not list then
32643: LD_VAR 0 1
32647: NOT
32648: IFFALSE 32652
// exit ;
32650: GO 32743
// i := list [ pos1 ] ;
32652: LD_ADDR_VAR 0 5
32656: PUSH
32657: LD_VAR 0 1
32661: PUSH
32662: LD_VAR 0 2
32666: ARRAY
32667: ST_TO_ADDR
// if not i then
32668: LD_VAR 0 5
32672: NOT
32673: IFFALSE 32677
// exit ;
32675: GO 32743
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32677: LD_ADDR_VAR 0 1
32681: PUSH
32682: LD_VAR 0 1
32686: PPUSH
32687: LD_VAR 0 2
32691: PPUSH
32692: LD_VAR 0 1
32696: PUSH
32697: LD_VAR 0 3
32701: ARRAY
32702: PPUSH
32703: CALL_OW 1
32707: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32708: LD_ADDR_VAR 0 1
32712: PUSH
32713: LD_VAR 0 1
32717: PPUSH
32718: LD_VAR 0 3
32722: PPUSH
32723: LD_VAR 0 5
32727: PPUSH
32728: CALL_OW 1
32732: ST_TO_ADDR
// result := list ;
32733: LD_ADDR_VAR 0 4
32737: PUSH
32738: LD_VAR 0 1
32742: ST_TO_ADDR
// end ;
32743: LD_VAR 0 4
32747: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32748: LD_INT 0
32750: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32751: LD_ADDR_VAR 0 5
32755: PUSH
32756: LD_VAR 0 1
32760: PPUSH
32761: CALL_OW 250
32765: PPUSH
32766: LD_VAR 0 1
32770: PPUSH
32771: CALL_OW 251
32775: PPUSH
32776: LD_VAR 0 2
32780: PPUSH
32781: LD_VAR 0 3
32785: PPUSH
32786: LD_VAR 0 4
32790: PPUSH
32791: CALL 32801 0 5
32795: ST_TO_ADDR
// end ;
32796: LD_VAR 0 5
32800: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32801: LD_INT 0
32803: PPUSH
32804: PPUSH
32805: PPUSH
32806: PPUSH
// if not list then
32807: LD_VAR 0 3
32811: NOT
32812: IFFALSE 32816
// exit ;
32814: GO 33204
// result := [ ] ;
32816: LD_ADDR_VAR 0 6
32820: PUSH
32821: EMPTY
32822: ST_TO_ADDR
// for i in list do
32823: LD_ADDR_VAR 0 7
32827: PUSH
32828: LD_VAR 0 3
32832: PUSH
32833: FOR_IN
32834: IFFALSE 33036
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32836: LD_ADDR_VAR 0 9
32840: PUSH
32841: LD_VAR 0 7
32845: PPUSH
32846: LD_VAR 0 1
32850: PPUSH
32851: LD_VAR 0 2
32855: PPUSH
32856: CALL_OW 297
32860: ST_TO_ADDR
// if not result then
32861: LD_VAR 0 6
32865: NOT
32866: IFFALSE 32892
// result := [ [ i , tmp ] ] else
32868: LD_ADDR_VAR 0 6
32872: PUSH
32873: LD_VAR 0 7
32877: PUSH
32878: LD_VAR 0 9
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: EMPTY
32888: LIST
32889: ST_TO_ADDR
32890: GO 33034
// begin if result [ result ] [ 2 ] < tmp then
32892: LD_VAR 0 6
32896: PUSH
32897: LD_VAR 0 6
32901: ARRAY
32902: PUSH
32903: LD_INT 2
32905: ARRAY
32906: PUSH
32907: LD_VAR 0 9
32911: LESS
32912: IFFALSE 32954
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32914: LD_ADDR_VAR 0 6
32918: PUSH
32919: LD_VAR 0 6
32923: PPUSH
32924: LD_VAR 0 6
32928: PUSH
32929: LD_INT 1
32931: PLUS
32932: PPUSH
32933: LD_VAR 0 7
32937: PUSH
32938: LD_VAR 0 9
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PPUSH
32947: CALL_OW 2
32951: ST_TO_ADDR
32952: GO 33034
// for j = 1 to result do
32954: LD_ADDR_VAR 0 8
32958: PUSH
32959: DOUBLE
32960: LD_INT 1
32962: DEC
32963: ST_TO_ADDR
32964: LD_VAR 0 6
32968: PUSH
32969: FOR_TO
32970: IFFALSE 33032
// begin if tmp < result [ j ] [ 2 ] then
32972: LD_VAR 0 9
32976: PUSH
32977: LD_VAR 0 6
32981: PUSH
32982: LD_VAR 0 8
32986: ARRAY
32987: PUSH
32988: LD_INT 2
32990: ARRAY
32991: LESS
32992: IFFALSE 33030
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32994: LD_ADDR_VAR 0 6
32998: PUSH
32999: LD_VAR 0 6
33003: PPUSH
33004: LD_VAR 0 8
33008: PPUSH
33009: LD_VAR 0 7
33013: PUSH
33014: LD_VAR 0 9
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PPUSH
33023: CALL_OW 2
33027: ST_TO_ADDR
// break ;
33028: GO 33032
// end ; end ;
33030: GO 32969
33032: POP
33033: POP
// end ; end ;
33034: GO 32833
33036: POP
33037: POP
// if result and not asc then
33038: LD_VAR 0 6
33042: PUSH
33043: LD_VAR 0 4
33047: NOT
33048: AND
33049: IFFALSE 33124
// begin tmp := result ;
33051: LD_ADDR_VAR 0 9
33055: PUSH
33056: LD_VAR 0 6
33060: ST_TO_ADDR
// for i = tmp downto 1 do
33061: LD_ADDR_VAR 0 7
33065: PUSH
33066: DOUBLE
33067: LD_VAR 0 9
33071: INC
33072: ST_TO_ADDR
33073: LD_INT 1
33075: PUSH
33076: FOR_DOWNTO
33077: IFFALSE 33122
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33079: LD_ADDR_VAR 0 6
33083: PUSH
33084: LD_VAR 0 6
33088: PPUSH
33089: LD_VAR 0 9
33093: PUSH
33094: LD_VAR 0 7
33098: MINUS
33099: PUSH
33100: LD_INT 1
33102: PLUS
33103: PPUSH
33104: LD_VAR 0 9
33108: PUSH
33109: LD_VAR 0 7
33113: ARRAY
33114: PPUSH
33115: CALL_OW 1
33119: ST_TO_ADDR
33120: GO 33076
33122: POP
33123: POP
// end ; tmp := [ ] ;
33124: LD_ADDR_VAR 0 9
33128: PUSH
33129: EMPTY
33130: ST_TO_ADDR
// if mode then
33131: LD_VAR 0 5
33135: IFFALSE 33204
// begin for i = 1 to result do
33137: LD_ADDR_VAR 0 7
33141: PUSH
33142: DOUBLE
33143: LD_INT 1
33145: DEC
33146: ST_TO_ADDR
33147: LD_VAR 0 6
33151: PUSH
33152: FOR_TO
33153: IFFALSE 33192
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33155: LD_ADDR_VAR 0 9
33159: PUSH
33160: LD_VAR 0 9
33164: PPUSH
33165: LD_VAR 0 7
33169: PPUSH
33170: LD_VAR 0 6
33174: PUSH
33175: LD_VAR 0 7
33179: ARRAY
33180: PUSH
33181: LD_INT 1
33183: ARRAY
33184: PPUSH
33185: CALL_OW 1
33189: ST_TO_ADDR
33190: GO 33152
33192: POP
33193: POP
// result := tmp ;
33194: LD_ADDR_VAR 0 6
33198: PUSH
33199: LD_VAR 0 9
33203: ST_TO_ADDR
// end ; end ;
33204: LD_VAR 0 6
33208: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33209: LD_INT 0
33211: PPUSH
33212: PPUSH
33213: PPUSH
33214: PPUSH
33215: PPUSH
33216: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33217: LD_ADDR_VAR 0 5
33221: PUSH
33222: LD_INT 0
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: LD_INT 0
33230: PUSH
33231: EMPTY
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: ST_TO_ADDR
// if not x or not y then
33239: LD_VAR 0 2
33243: NOT
33244: PUSH
33245: LD_VAR 0 3
33249: NOT
33250: OR
33251: IFFALSE 33255
// exit ;
33253: GO 34905
// if not range then
33255: LD_VAR 0 4
33259: NOT
33260: IFFALSE 33270
// range := 10 ;
33262: LD_ADDR_VAR 0 4
33266: PUSH
33267: LD_INT 10
33269: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33270: LD_ADDR_VAR 0 8
33274: PUSH
33275: LD_INT 81
33277: PUSH
33278: LD_VAR 0 1
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 92
33289: PUSH
33290: LD_VAR 0 2
33294: PUSH
33295: LD_VAR 0 3
33299: PUSH
33300: LD_VAR 0 4
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 3
33313: PUSH
33314: LD_INT 21
33316: PUSH
33317: LD_INT 3
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: PPUSH
33333: CALL_OW 69
33337: ST_TO_ADDR
// if not tmp then
33338: LD_VAR 0 8
33342: NOT
33343: IFFALSE 33347
// exit ;
33345: GO 34905
// for i in tmp do
33347: LD_ADDR_VAR 0 6
33351: PUSH
33352: LD_VAR 0 8
33356: PUSH
33357: FOR_IN
33358: IFFALSE 34880
// begin points := [ 0 , 0 , 0 ] ;
33360: LD_ADDR_VAR 0 9
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: LD_INT 0
33370: PUSH
33371: LD_INT 0
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: LIST
33378: ST_TO_ADDR
// bpoints := 1 ;
33379: LD_ADDR_VAR 0 10
33383: PUSH
33384: LD_INT 1
33386: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33387: LD_VAR 0 6
33391: PPUSH
33392: CALL_OW 247
33396: PUSH
33397: LD_INT 1
33399: DOUBLE
33400: EQUAL
33401: IFTRUE 33405
33403: GO 33983
33405: POP
// begin if GetClass ( i ) = 1 then
33406: LD_VAR 0 6
33410: PPUSH
33411: CALL_OW 257
33415: PUSH
33416: LD_INT 1
33418: EQUAL
33419: IFFALSE 33440
// points := [ 10 , 5 , 3 ] ;
33421: LD_ADDR_VAR 0 9
33425: PUSH
33426: LD_INT 10
33428: PUSH
33429: LD_INT 5
33431: PUSH
33432: LD_INT 3
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: LIST
33439: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33440: LD_VAR 0 6
33444: PPUSH
33445: CALL_OW 257
33449: PUSH
33450: LD_INT 2
33452: PUSH
33453: LD_INT 3
33455: PUSH
33456: LD_INT 4
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: LIST
33463: IN
33464: IFFALSE 33485
// points := [ 3 , 2 , 1 ] ;
33466: LD_ADDR_VAR 0 9
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: LD_INT 2
33476: PUSH
33477: LD_INT 1
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: LIST
33484: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33485: LD_VAR 0 6
33489: PPUSH
33490: CALL_OW 257
33494: PUSH
33495: LD_INT 5
33497: EQUAL
33498: IFFALSE 33519
// points := [ 130 , 5 , 2 ] ;
33500: LD_ADDR_VAR 0 9
33504: PUSH
33505: LD_INT 130
33507: PUSH
33508: LD_INT 5
33510: PUSH
33511: LD_INT 2
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: LIST
33518: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33519: LD_VAR 0 6
33523: PPUSH
33524: CALL_OW 257
33528: PUSH
33529: LD_INT 8
33531: EQUAL
33532: IFFALSE 33553
// points := [ 35 , 35 , 30 ] ;
33534: LD_ADDR_VAR 0 9
33538: PUSH
33539: LD_INT 35
33541: PUSH
33542: LD_INT 35
33544: PUSH
33545: LD_INT 30
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: LIST
33552: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33553: LD_VAR 0 6
33557: PPUSH
33558: CALL_OW 257
33562: PUSH
33563: LD_INT 9
33565: EQUAL
33566: IFFALSE 33587
// points := [ 20 , 55 , 40 ] ;
33568: LD_ADDR_VAR 0 9
33572: PUSH
33573: LD_INT 20
33575: PUSH
33576: LD_INT 55
33578: PUSH
33579: LD_INT 40
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: LIST
33586: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33587: LD_VAR 0 6
33591: PPUSH
33592: CALL_OW 257
33596: PUSH
33597: LD_INT 12
33599: PUSH
33600: LD_INT 16
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: IN
33607: IFFALSE 33628
// points := [ 5 , 3 , 2 ] ;
33609: LD_ADDR_VAR 0 9
33613: PUSH
33614: LD_INT 5
33616: PUSH
33617: LD_INT 3
33619: PUSH
33620: LD_INT 2
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: LIST
33627: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33628: LD_VAR 0 6
33632: PPUSH
33633: CALL_OW 257
33637: PUSH
33638: LD_INT 17
33640: EQUAL
33641: IFFALSE 33662
// points := [ 100 , 50 , 75 ] ;
33643: LD_ADDR_VAR 0 9
33647: PUSH
33648: LD_INT 100
33650: PUSH
33651: LD_INT 50
33653: PUSH
33654: LD_INT 75
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: LIST
33661: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33662: LD_VAR 0 6
33666: PPUSH
33667: CALL_OW 257
33671: PUSH
33672: LD_INT 15
33674: EQUAL
33675: IFFALSE 33696
// points := [ 10 , 5 , 3 ] ;
33677: LD_ADDR_VAR 0 9
33681: PUSH
33682: LD_INT 10
33684: PUSH
33685: LD_INT 5
33687: PUSH
33688: LD_INT 3
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: LIST
33695: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33696: LD_VAR 0 6
33700: PPUSH
33701: CALL_OW 257
33705: PUSH
33706: LD_INT 14
33708: EQUAL
33709: IFFALSE 33730
// points := [ 10 , 0 , 0 ] ;
33711: LD_ADDR_VAR 0 9
33715: PUSH
33716: LD_INT 10
33718: PUSH
33719: LD_INT 0
33721: PUSH
33722: LD_INT 0
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: LIST
33729: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33730: LD_VAR 0 6
33734: PPUSH
33735: CALL_OW 257
33739: PUSH
33740: LD_INT 11
33742: EQUAL
33743: IFFALSE 33764
// points := [ 30 , 10 , 5 ] ;
33745: LD_ADDR_VAR 0 9
33749: PUSH
33750: LD_INT 30
33752: PUSH
33753: LD_INT 10
33755: PUSH
33756: LD_INT 5
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: LIST
33763: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33764: LD_VAR 0 1
33768: PPUSH
33769: LD_INT 5
33771: PPUSH
33772: CALL_OW 321
33776: PUSH
33777: LD_INT 2
33779: EQUAL
33780: IFFALSE 33797
// bpoints := bpoints * 1.8 ;
33782: LD_ADDR_VAR 0 10
33786: PUSH
33787: LD_VAR 0 10
33791: PUSH
33792: LD_REAL  1.80000000000000E+0000
33795: MUL
33796: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33797: LD_VAR 0 6
33801: PPUSH
33802: CALL_OW 257
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: LD_INT 2
33812: PUSH
33813: LD_INT 3
33815: PUSH
33816: LD_INT 4
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: IN
33825: PUSH
33826: LD_VAR 0 1
33830: PPUSH
33831: LD_INT 51
33833: PPUSH
33834: CALL_OW 321
33838: PUSH
33839: LD_INT 2
33841: EQUAL
33842: AND
33843: IFFALSE 33860
// bpoints := bpoints * 1.2 ;
33845: LD_ADDR_VAR 0 10
33849: PUSH
33850: LD_VAR 0 10
33854: PUSH
33855: LD_REAL  1.20000000000000E+0000
33858: MUL
33859: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33860: LD_VAR 0 6
33864: PPUSH
33865: CALL_OW 257
33869: PUSH
33870: LD_INT 5
33872: PUSH
33873: LD_INT 7
33875: PUSH
33876: LD_INT 9
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: LIST
33883: IN
33884: PUSH
33885: LD_VAR 0 1
33889: PPUSH
33890: LD_INT 52
33892: PPUSH
33893: CALL_OW 321
33897: PUSH
33898: LD_INT 2
33900: EQUAL
33901: AND
33902: IFFALSE 33919
// bpoints := bpoints * 1.5 ;
33904: LD_ADDR_VAR 0 10
33908: PUSH
33909: LD_VAR 0 10
33913: PUSH
33914: LD_REAL  1.50000000000000E+0000
33917: MUL
33918: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33919: LD_VAR 0 1
33923: PPUSH
33924: LD_INT 66
33926: PPUSH
33927: CALL_OW 321
33931: PUSH
33932: LD_INT 2
33934: EQUAL
33935: IFFALSE 33952
// bpoints := bpoints * 1.1 ;
33937: LD_ADDR_VAR 0 10
33941: PUSH
33942: LD_VAR 0 10
33946: PUSH
33947: LD_REAL  1.10000000000000E+0000
33950: MUL
33951: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33952: LD_ADDR_VAR 0 10
33956: PUSH
33957: LD_VAR 0 10
33961: PUSH
33962: LD_VAR 0 6
33966: PPUSH
33967: LD_INT 1
33969: PPUSH
33970: CALL_OW 259
33974: PUSH
33975: LD_REAL  1.15000000000000E+0000
33978: MUL
33979: MUL
33980: ST_TO_ADDR
// end ; unit_vehicle :
33981: GO 34809
33983: LD_INT 2
33985: DOUBLE
33986: EQUAL
33987: IFTRUE 33991
33989: GO 34797
33991: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33992: LD_VAR 0 6
33996: PPUSH
33997: CALL_OW 264
34001: PUSH
34002: LD_INT 2
34004: PUSH
34005: LD_INT 42
34007: PUSH
34008: LD_INT 24
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: IN
34016: IFFALSE 34037
// points := [ 25 , 5 , 3 ] ;
34018: LD_ADDR_VAR 0 9
34022: PUSH
34023: LD_INT 25
34025: PUSH
34026: LD_INT 5
34028: PUSH
34029: LD_INT 3
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: LIST
34036: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34037: LD_VAR 0 6
34041: PPUSH
34042: CALL_OW 264
34046: PUSH
34047: LD_INT 4
34049: PUSH
34050: LD_INT 43
34052: PUSH
34053: LD_INT 25
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: LIST
34060: IN
34061: IFFALSE 34082
// points := [ 40 , 15 , 5 ] ;
34063: LD_ADDR_VAR 0 9
34067: PUSH
34068: LD_INT 40
34070: PUSH
34071: LD_INT 15
34073: PUSH
34074: LD_INT 5
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: LIST
34081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34082: LD_VAR 0 6
34086: PPUSH
34087: CALL_OW 264
34091: PUSH
34092: LD_INT 3
34094: PUSH
34095: LD_INT 23
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: IN
34102: IFFALSE 34123
// points := [ 7 , 25 , 8 ] ;
34104: LD_ADDR_VAR 0 9
34108: PUSH
34109: LD_INT 7
34111: PUSH
34112: LD_INT 25
34114: PUSH
34115: LD_INT 8
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: LIST
34122: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34123: LD_VAR 0 6
34127: PPUSH
34128: CALL_OW 264
34132: PUSH
34133: LD_INT 5
34135: PUSH
34136: LD_INT 27
34138: PUSH
34139: LD_INT 44
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: LIST
34146: IN
34147: IFFALSE 34168
// points := [ 14 , 50 , 16 ] ;
34149: LD_ADDR_VAR 0 9
34153: PUSH
34154: LD_INT 14
34156: PUSH
34157: LD_INT 50
34159: PUSH
34160: LD_INT 16
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: LIST
34167: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34168: LD_VAR 0 6
34172: PPUSH
34173: CALL_OW 264
34177: PUSH
34178: LD_INT 6
34180: PUSH
34181: LD_INT 46
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: IN
34188: IFFALSE 34209
// points := [ 32 , 120 , 70 ] ;
34190: LD_ADDR_VAR 0 9
34194: PUSH
34195: LD_INT 32
34197: PUSH
34198: LD_INT 120
34200: PUSH
34201: LD_INT 70
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: LIST
34208: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34209: LD_VAR 0 6
34213: PPUSH
34214: CALL_OW 264
34218: PUSH
34219: LD_INT 7
34221: PUSH
34222: LD_INT 28
34224: PUSH
34225: LD_INT 45
34227: PUSH
34228: LD_INT 92
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: IN
34237: IFFALSE 34258
// points := [ 35 , 20 , 45 ] ;
34239: LD_ADDR_VAR 0 9
34243: PUSH
34244: LD_INT 35
34246: PUSH
34247: LD_INT 20
34249: PUSH
34250: LD_INT 45
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: LIST
34257: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34258: LD_VAR 0 6
34262: PPUSH
34263: CALL_OW 264
34267: PUSH
34268: LD_INT 47
34270: PUSH
34271: EMPTY
34272: LIST
34273: IN
34274: IFFALSE 34295
// points := [ 67 , 45 , 75 ] ;
34276: LD_ADDR_VAR 0 9
34280: PUSH
34281: LD_INT 67
34283: PUSH
34284: LD_INT 45
34286: PUSH
34287: LD_INT 75
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: LIST
34294: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34295: LD_VAR 0 6
34299: PPUSH
34300: CALL_OW 264
34304: PUSH
34305: LD_INT 26
34307: PUSH
34308: EMPTY
34309: LIST
34310: IN
34311: IFFALSE 34332
// points := [ 120 , 30 , 80 ] ;
34313: LD_ADDR_VAR 0 9
34317: PUSH
34318: LD_INT 120
34320: PUSH
34321: LD_INT 30
34323: PUSH
34324: LD_INT 80
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: LIST
34331: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34332: LD_VAR 0 6
34336: PPUSH
34337: CALL_OW 264
34341: PUSH
34342: LD_INT 22
34344: PUSH
34345: EMPTY
34346: LIST
34347: IN
34348: IFFALSE 34369
// points := [ 40 , 1 , 1 ] ;
34350: LD_ADDR_VAR 0 9
34354: PUSH
34355: LD_INT 40
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: LD_INT 1
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: LIST
34368: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34369: LD_VAR 0 6
34373: PPUSH
34374: CALL_OW 264
34378: PUSH
34379: LD_INT 29
34381: PUSH
34382: EMPTY
34383: LIST
34384: IN
34385: IFFALSE 34406
// points := [ 70 , 200 , 400 ] ;
34387: LD_ADDR_VAR 0 9
34391: PUSH
34392: LD_INT 70
34394: PUSH
34395: LD_INT 200
34397: PUSH
34398: LD_INT 400
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: LIST
34405: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34406: LD_VAR 0 6
34410: PPUSH
34411: CALL_OW 264
34415: PUSH
34416: LD_INT 14
34418: PUSH
34419: LD_INT 53
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: IN
34426: IFFALSE 34447
// points := [ 40 , 10 , 20 ] ;
34428: LD_ADDR_VAR 0 9
34432: PUSH
34433: LD_INT 40
34435: PUSH
34436: LD_INT 10
34438: PUSH
34439: LD_INT 20
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: LIST
34446: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34447: LD_VAR 0 6
34451: PPUSH
34452: CALL_OW 264
34456: PUSH
34457: LD_INT 9
34459: PUSH
34460: EMPTY
34461: LIST
34462: IN
34463: IFFALSE 34484
// points := [ 5 , 70 , 20 ] ;
34465: LD_ADDR_VAR 0 9
34469: PUSH
34470: LD_INT 5
34472: PUSH
34473: LD_INT 70
34475: PUSH
34476: LD_INT 20
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: LIST
34483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34484: LD_VAR 0 6
34488: PPUSH
34489: CALL_OW 264
34493: PUSH
34494: LD_INT 10
34496: PUSH
34497: EMPTY
34498: LIST
34499: IN
34500: IFFALSE 34521
// points := [ 35 , 110 , 70 ] ;
34502: LD_ADDR_VAR 0 9
34506: PUSH
34507: LD_INT 35
34509: PUSH
34510: LD_INT 110
34512: PUSH
34513: LD_INT 70
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: LIST
34520: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34521: LD_VAR 0 6
34525: PPUSH
34526: CALL_OW 265
34530: PUSH
34531: LD_INT 25
34533: EQUAL
34534: IFFALSE 34555
// points := [ 80 , 65 , 100 ] ;
34536: LD_ADDR_VAR 0 9
34540: PUSH
34541: LD_INT 80
34543: PUSH
34544: LD_INT 65
34546: PUSH
34547: LD_INT 100
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: LIST
34554: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34555: LD_VAR 0 6
34559: PPUSH
34560: CALL_OW 263
34564: PUSH
34565: LD_INT 1
34567: EQUAL
34568: IFFALSE 34603
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34570: LD_ADDR_VAR 0 10
34574: PUSH
34575: LD_VAR 0 10
34579: PUSH
34580: LD_VAR 0 6
34584: PPUSH
34585: CALL_OW 311
34589: PPUSH
34590: LD_INT 3
34592: PPUSH
34593: CALL_OW 259
34597: PUSH
34598: LD_INT 4
34600: MUL
34601: MUL
34602: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34603: LD_VAR 0 6
34607: PPUSH
34608: CALL_OW 263
34612: PUSH
34613: LD_INT 2
34615: EQUAL
34616: IFFALSE 34667
// begin j := IsControledBy ( i ) ;
34618: LD_ADDR_VAR 0 7
34622: PUSH
34623: LD_VAR 0 6
34627: PPUSH
34628: CALL_OW 312
34632: ST_TO_ADDR
// if j then
34633: LD_VAR 0 7
34637: IFFALSE 34667
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34639: LD_ADDR_VAR 0 10
34643: PUSH
34644: LD_VAR 0 10
34648: PUSH
34649: LD_VAR 0 7
34653: PPUSH
34654: LD_INT 3
34656: PPUSH
34657: CALL_OW 259
34661: PUSH
34662: LD_INT 3
34664: MUL
34665: MUL
34666: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34667: LD_VAR 0 6
34671: PPUSH
34672: CALL_OW 264
34676: PUSH
34677: LD_INT 5
34679: PUSH
34680: LD_INT 6
34682: PUSH
34683: LD_INT 46
34685: PUSH
34686: LD_INT 44
34688: PUSH
34689: LD_INT 47
34691: PUSH
34692: LD_INT 45
34694: PUSH
34695: LD_INT 28
34697: PUSH
34698: LD_INT 7
34700: PUSH
34701: LD_INT 27
34703: PUSH
34704: LD_INT 29
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: IN
34719: PUSH
34720: LD_VAR 0 1
34724: PPUSH
34725: LD_INT 52
34727: PPUSH
34728: CALL_OW 321
34732: PUSH
34733: LD_INT 2
34735: EQUAL
34736: AND
34737: IFFALSE 34754
// bpoints := bpoints * 1.2 ;
34739: LD_ADDR_VAR 0 10
34743: PUSH
34744: LD_VAR 0 10
34748: PUSH
34749: LD_REAL  1.20000000000000E+0000
34752: MUL
34753: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34754: LD_VAR 0 6
34758: PPUSH
34759: CALL_OW 264
34763: PUSH
34764: LD_INT 6
34766: PUSH
34767: LD_INT 46
34769: PUSH
34770: LD_INT 47
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: LIST
34777: IN
34778: IFFALSE 34795
// bpoints := bpoints * 1.2 ;
34780: LD_ADDR_VAR 0 10
34784: PUSH
34785: LD_VAR 0 10
34789: PUSH
34790: LD_REAL  1.20000000000000E+0000
34793: MUL
34794: ST_TO_ADDR
// end ; unit_building :
34795: GO 34809
34797: LD_INT 3
34799: DOUBLE
34800: EQUAL
34801: IFTRUE 34805
34803: GO 34808
34805: POP
// ; end ;
34806: GO 34809
34808: POP
// for j = 1 to 3 do
34809: LD_ADDR_VAR 0 7
34813: PUSH
34814: DOUBLE
34815: LD_INT 1
34817: DEC
34818: ST_TO_ADDR
34819: LD_INT 3
34821: PUSH
34822: FOR_TO
34823: IFFALSE 34876
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34825: LD_ADDR_VAR 0 5
34829: PUSH
34830: LD_VAR 0 5
34834: PPUSH
34835: LD_VAR 0 7
34839: PPUSH
34840: LD_VAR 0 5
34844: PUSH
34845: LD_VAR 0 7
34849: ARRAY
34850: PUSH
34851: LD_VAR 0 9
34855: PUSH
34856: LD_VAR 0 7
34860: ARRAY
34861: PUSH
34862: LD_VAR 0 10
34866: MUL
34867: PLUS
34868: PPUSH
34869: CALL_OW 1
34873: ST_TO_ADDR
34874: GO 34822
34876: POP
34877: POP
// end ;
34878: GO 33357
34880: POP
34881: POP
// result := Replace ( result , 4 , tmp ) ;
34882: LD_ADDR_VAR 0 5
34886: PUSH
34887: LD_VAR 0 5
34891: PPUSH
34892: LD_INT 4
34894: PPUSH
34895: LD_VAR 0 8
34899: PPUSH
34900: CALL_OW 1
34904: ST_TO_ADDR
// end ;
34905: LD_VAR 0 5
34909: RET
// export function DangerAtRange ( unit , range ) ; begin
34910: LD_INT 0
34912: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34913: LD_ADDR_VAR 0 3
34917: PUSH
34918: LD_VAR 0 1
34922: PPUSH
34923: CALL_OW 255
34927: PPUSH
34928: LD_VAR 0 1
34932: PPUSH
34933: CALL_OW 250
34937: PPUSH
34938: LD_VAR 0 1
34942: PPUSH
34943: CALL_OW 251
34947: PPUSH
34948: LD_VAR 0 2
34952: PPUSH
34953: CALL 33209 0 4
34957: ST_TO_ADDR
// end ;
34958: LD_VAR 0 3
34962: RET
// export function DangerInArea ( side , area ) ; begin
34963: LD_INT 0
34965: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34966: LD_ADDR_VAR 0 3
34970: PUSH
34971: LD_VAR 0 2
34975: PPUSH
34976: LD_INT 81
34978: PUSH
34979: LD_VAR 0 1
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PPUSH
34988: CALL_OW 70
34992: ST_TO_ADDR
// end ;
34993: LD_VAR 0 3
34997: RET
// export function IsExtension ( b ) ; begin
34998: LD_INT 0
35000: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35001: LD_ADDR_VAR 0 2
35005: PUSH
35006: LD_VAR 0 1
35010: PUSH
35011: LD_INT 23
35013: PUSH
35014: LD_INT 20
35016: PUSH
35017: LD_INT 22
35019: PUSH
35020: LD_INT 17
35022: PUSH
35023: LD_INT 24
35025: PUSH
35026: LD_INT 21
35028: PUSH
35029: LD_INT 19
35031: PUSH
35032: LD_INT 16
35034: PUSH
35035: LD_INT 25
35037: PUSH
35038: LD_INT 18
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: IN
35053: ST_TO_ADDR
// end ;
35054: LD_VAR 0 2
35058: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35059: LD_INT 0
35061: PPUSH
35062: PPUSH
35063: PPUSH
// result := [ ] ;
35064: LD_ADDR_VAR 0 4
35068: PUSH
35069: EMPTY
35070: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35071: LD_ADDR_VAR 0 5
35075: PUSH
35076: LD_VAR 0 2
35080: PPUSH
35081: LD_INT 21
35083: PUSH
35084: LD_INT 3
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PPUSH
35091: CALL_OW 70
35095: ST_TO_ADDR
// if not tmp then
35096: LD_VAR 0 5
35100: NOT
35101: IFFALSE 35105
// exit ;
35103: GO 35169
// if checkLink then
35105: LD_VAR 0 3
35109: IFFALSE 35159
// begin for i in tmp do
35111: LD_ADDR_VAR 0 6
35115: PUSH
35116: LD_VAR 0 5
35120: PUSH
35121: FOR_IN
35122: IFFALSE 35157
// if GetBase ( i ) <> base then
35124: LD_VAR 0 6
35128: PPUSH
35129: CALL_OW 274
35133: PUSH
35134: LD_VAR 0 1
35138: NONEQUAL
35139: IFFALSE 35155
// ComLinkToBase ( base , i ) ;
35141: LD_VAR 0 1
35145: PPUSH
35146: LD_VAR 0 6
35150: PPUSH
35151: CALL_OW 169
35155: GO 35121
35157: POP
35158: POP
// end ; result := tmp ;
35159: LD_ADDR_VAR 0 4
35163: PUSH
35164: LD_VAR 0 5
35168: ST_TO_ADDR
// end ;
35169: LD_VAR 0 4
35173: RET
// export function ComComplete ( units , b ) ; var i ; begin
35174: LD_INT 0
35176: PPUSH
35177: PPUSH
// if not units then
35178: LD_VAR 0 1
35182: NOT
35183: IFFALSE 35187
// exit ;
35185: GO 35277
// for i in units do
35187: LD_ADDR_VAR 0 4
35191: PUSH
35192: LD_VAR 0 1
35196: PUSH
35197: FOR_IN
35198: IFFALSE 35275
// if BuildingStatus ( b ) = bs_build then
35200: LD_VAR 0 2
35204: PPUSH
35205: CALL_OW 461
35209: PUSH
35210: LD_INT 1
35212: EQUAL
35213: IFFALSE 35273
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35215: LD_VAR 0 4
35219: PPUSH
35220: LD_STRING h
35222: PUSH
35223: LD_VAR 0 2
35227: PPUSH
35228: CALL_OW 250
35232: PUSH
35233: LD_VAR 0 2
35237: PPUSH
35238: CALL_OW 251
35242: PUSH
35243: LD_VAR 0 2
35247: PUSH
35248: LD_INT 0
35250: PUSH
35251: LD_INT 0
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: PUSH
35266: EMPTY
35267: LIST
35268: PPUSH
35269: CALL_OW 446
35273: GO 35197
35275: POP
35276: POP
// end ;
35277: LD_VAR 0 3
35281: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35282: LD_INT 0
35284: PPUSH
35285: PPUSH
35286: PPUSH
35287: PPUSH
35288: PPUSH
35289: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35290: LD_VAR 0 1
35294: NOT
35295: PUSH
35296: LD_VAR 0 1
35300: PPUSH
35301: CALL_OW 263
35305: PUSH
35306: LD_INT 2
35308: NONEQUAL
35309: OR
35310: IFFALSE 35314
// exit ;
35312: GO 35630
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35314: LD_ADDR_VAR 0 6
35318: PUSH
35319: LD_INT 22
35321: PUSH
35322: LD_VAR 0 1
35326: PPUSH
35327: CALL_OW 255
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 2
35338: PUSH
35339: LD_INT 30
35341: PUSH
35342: LD_INT 36
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 34
35351: PUSH
35352: LD_INT 31
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: LIST
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PPUSH
35368: CALL_OW 69
35372: ST_TO_ADDR
// if not tmp then
35373: LD_VAR 0 6
35377: NOT
35378: IFFALSE 35382
// exit ;
35380: GO 35630
// result := [ ] ;
35382: LD_ADDR_VAR 0 2
35386: PUSH
35387: EMPTY
35388: ST_TO_ADDR
// for i in tmp do
35389: LD_ADDR_VAR 0 3
35393: PUSH
35394: LD_VAR 0 6
35398: PUSH
35399: FOR_IN
35400: IFFALSE 35471
// begin t := UnitsInside ( i ) ;
35402: LD_ADDR_VAR 0 4
35406: PUSH
35407: LD_VAR 0 3
35411: PPUSH
35412: CALL_OW 313
35416: ST_TO_ADDR
// if t then
35417: LD_VAR 0 4
35421: IFFALSE 35469
// for j in t do
35423: LD_ADDR_VAR 0 7
35427: PUSH
35428: LD_VAR 0 4
35432: PUSH
35433: FOR_IN
35434: IFFALSE 35467
// result := Replace ( result , result + 1 , j ) ;
35436: LD_ADDR_VAR 0 2
35440: PUSH
35441: LD_VAR 0 2
35445: PPUSH
35446: LD_VAR 0 2
35450: PUSH
35451: LD_INT 1
35453: PLUS
35454: PPUSH
35455: LD_VAR 0 7
35459: PPUSH
35460: CALL_OW 1
35464: ST_TO_ADDR
35465: GO 35433
35467: POP
35468: POP
// end ;
35469: GO 35399
35471: POP
35472: POP
// if not result then
35473: LD_VAR 0 2
35477: NOT
35478: IFFALSE 35482
// exit ;
35480: GO 35630
// mech := result [ 1 ] ;
35482: LD_ADDR_VAR 0 5
35486: PUSH
35487: LD_VAR 0 2
35491: PUSH
35492: LD_INT 1
35494: ARRAY
35495: ST_TO_ADDR
// if result > 1 then
35496: LD_VAR 0 2
35500: PUSH
35501: LD_INT 1
35503: GREATER
35504: IFFALSE 35616
// begin for i = 2 to result do
35506: LD_ADDR_VAR 0 3
35510: PUSH
35511: DOUBLE
35512: LD_INT 2
35514: DEC
35515: ST_TO_ADDR
35516: LD_VAR 0 2
35520: PUSH
35521: FOR_TO
35522: IFFALSE 35614
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35524: LD_ADDR_VAR 0 4
35528: PUSH
35529: LD_VAR 0 2
35533: PUSH
35534: LD_VAR 0 3
35538: ARRAY
35539: PPUSH
35540: LD_INT 3
35542: PPUSH
35543: CALL_OW 259
35547: PUSH
35548: LD_VAR 0 2
35552: PUSH
35553: LD_VAR 0 3
35557: ARRAY
35558: PPUSH
35559: CALL_OW 432
35563: MINUS
35564: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35565: LD_VAR 0 4
35569: PUSH
35570: LD_VAR 0 5
35574: PPUSH
35575: LD_INT 3
35577: PPUSH
35578: CALL_OW 259
35582: PUSH
35583: LD_VAR 0 5
35587: PPUSH
35588: CALL_OW 432
35592: MINUS
35593: GREATEREQUAL
35594: IFFALSE 35612
// mech := result [ i ] ;
35596: LD_ADDR_VAR 0 5
35600: PUSH
35601: LD_VAR 0 2
35605: PUSH
35606: LD_VAR 0 3
35610: ARRAY
35611: ST_TO_ADDR
// end ;
35612: GO 35521
35614: POP
35615: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35616: LD_VAR 0 1
35620: PPUSH
35621: LD_VAR 0 5
35625: PPUSH
35626: CALL_OW 135
// end ;
35630: LD_VAR 0 2
35634: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35635: LD_INT 0
35637: PPUSH
35638: PPUSH
35639: PPUSH
35640: PPUSH
35641: PPUSH
35642: PPUSH
35643: PPUSH
35644: PPUSH
35645: PPUSH
35646: PPUSH
35647: PPUSH
35648: PPUSH
35649: PPUSH
// result := [ ] ;
35650: LD_ADDR_VAR 0 7
35654: PUSH
35655: EMPTY
35656: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35657: LD_VAR 0 1
35661: PPUSH
35662: CALL_OW 266
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: LD_INT 1
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: IN
35677: NOT
35678: IFFALSE 35682
// exit ;
35680: GO 37316
// if name then
35682: LD_VAR 0 3
35686: IFFALSE 35702
// SetBName ( base_dep , name ) ;
35688: LD_VAR 0 1
35692: PPUSH
35693: LD_VAR 0 3
35697: PPUSH
35698: CALL_OW 500
// base := GetBase ( base_dep ) ;
35702: LD_ADDR_VAR 0 15
35706: PUSH
35707: LD_VAR 0 1
35711: PPUSH
35712: CALL_OW 274
35716: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35717: LD_ADDR_VAR 0 16
35721: PUSH
35722: LD_VAR 0 1
35726: PPUSH
35727: CALL_OW 255
35731: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35732: LD_ADDR_VAR 0 17
35736: PUSH
35737: LD_VAR 0 1
35741: PPUSH
35742: CALL_OW 248
35746: ST_TO_ADDR
// if sources then
35747: LD_VAR 0 5
35751: IFFALSE 35798
// for i = 1 to 3 do
35753: LD_ADDR_VAR 0 8
35757: PUSH
35758: DOUBLE
35759: LD_INT 1
35761: DEC
35762: ST_TO_ADDR
35763: LD_INT 3
35765: PUSH
35766: FOR_TO
35767: IFFALSE 35796
// AddResourceType ( base , i , sources [ i ] ) ;
35769: LD_VAR 0 15
35773: PPUSH
35774: LD_VAR 0 8
35778: PPUSH
35779: LD_VAR 0 5
35783: PUSH
35784: LD_VAR 0 8
35788: ARRAY
35789: PPUSH
35790: CALL_OW 276
35794: GO 35766
35796: POP
35797: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35798: LD_ADDR_VAR 0 18
35802: PUSH
35803: LD_VAR 0 15
35807: PPUSH
35808: LD_VAR 0 2
35812: PPUSH
35813: LD_INT 1
35815: PPUSH
35816: CALL 35059 0 3
35820: ST_TO_ADDR
// InitHc ;
35821: CALL_OW 19
// InitUc ;
35825: CALL_OW 18
// uc_side := side ;
35829: LD_ADDR_OWVAR 20
35833: PUSH
35834: LD_VAR 0 16
35838: ST_TO_ADDR
// uc_nation := nation ;
35839: LD_ADDR_OWVAR 21
35843: PUSH
35844: LD_VAR 0 17
35848: ST_TO_ADDR
// if buildings then
35849: LD_VAR 0 18
35853: IFFALSE 37175
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35855: LD_ADDR_VAR 0 19
35859: PUSH
35860: LD_VAR 0 18
35864: PPUSH
35865: LD_INT 2
35867: PUSH
35868: LD_INT 30
35870: PUSH
35871: LD_INT 29
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 30
35880: PUSH
35881: LD_INT 30
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: LIST
35892: PPUSH
35893: CALL_OW 72
35897: ST_TO_ADDR
// if tmp then
35898: LD_VAR 0 19
35902: IFFALSE 35950
// for i in tmp do
35904: LD_ADDR_VAR 0 8
35908: PUSH
35909: LD_VAR 0 19
35913: PUSH
35914: FOR_IN
35915: IFFALSE 35948
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35917: LD_VAR 0 8
35921: PPUSH
35922: CALL_OW 250
35926: PPUSH
35927: LD_VAR 0 8
35931: PPUSH
35932: CALL_OW 251
35936: PPUSH
35937: LD_VAR 0 16
35941: PPUSH
35942: CALL_OW 441
35946: GO 35914
35948: POP
35949: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35950: LD_VAR 0 18
35954: PPUSH
35955: LD_INT 2
35957: PUSH
35958: LD_INT 30
35960: PUSH
35961: LD_INT 32
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 30
35970: PUSH
35971: LD_INT 33
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: LIST
35982: PPUSH
35983: CALL_OW 72
35987: IFFALSE 36075
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35989: LD_ADDR_VAR 0 8
35993: PUSH
35994: LD_VAR 0 18
35998: PPUSH
35999: LD_INT 2
36001: PUSH
36002: LD_INT 30
36004: PUSH
36005: LD_INT 32
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 30
36014: PUSH
36015: LD_INT 33
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: LIST
36026: PPUSH
36027: CALL_OW 72
36031: PUSH
36032: FOR_IN
36033: IFFALSE 36073
// begin if not GetBWeapon ( i ) then
36035: LD_VAR 0 8
36039: PPUSH
36040: CALL_OW 269
36044: NOT
36045: IFFALSE 36071
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36047: LD_VAR 0 8
36051: PPUSH
36052: LD_VAR 0 8
36056: PPUSH
36057: LD_VAR 0 2
36061: PPUSH
36062: CALL 37321 0 2
36066: PPUSH
36067: CALL_OW 431
// end ;
36071: GO 36032
36073: POP
36074: POP
// end ; for i = 1 to personel do
36075: LD_ADDR_VAR 0 8
36079: PUSH
36080: DOUBLE
36081: LD_INT 1
36083: DEC
36084: ST_TO_ADDR
36085: LD_VAR 0 6
36089: PUSH
36090: FOR_TO
36091: IFFALSE 37155
// begin if i > 4 then
36093: LD_VAR 0 8
36097: PUSH
36098: LD_INT 4
36100: GREATER
36101: IFFALSE 36105
// break ;
36103: GO 37155
// case i of 1 :
36105: LD_VAR 0 8
36109: PUSH
36110: LD_INT 1
36112: DOUBLE
36113: EQUAL
36114: IFTRUE 36118
36116: GO 36198
36118: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36119: LD_ADDR_VAR 0 12
36123: PUSH
36124: LD_VAR 0 18
36128: PPUSH
36129: LD_INT 22
36131: PUSH
36132: LD_VAR 0 16
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 58
36143: PUSH
36144: EMPTY
36145: LIST
36146: PUSH
36147: LD_INT 2
36149: PUSH
36150: LD_INT 30
36152: PUSH
36153: LD_INT 32
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 30
36162: PUSH
36163: LD_INT 4
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 30
36172: PUSH
36173: LD_INT 5
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: LIST
36190: PPUSH
36191: CALL_OW 72
36195: ST_TO_ADDR
36196: GO 36420
36198: LD_INT 2
36200: DOUBLE
36201: EQUAL
36202: IFTRUE 36206
36204: GO 36268
36206: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36207: LD_ADDR_VAR 0 12
36211: PUSH
36212: LD_VAR 0 18
36216: PPUSH
36217: LD_INT 22
36219: PUSH
36220: LD_VAR 0 16
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 2
36231: PUSH
36232: LD_INT 30
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 30
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: LIST
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PPUSH
36261: CALL_OW 72
36265: ST_TO_ADDR
36266: GO 36420
36268: LD_INT 3
36270: DOUBLE
36271: EQUAL
36272: IFTRUE 36276
36274: GO 36338
36276: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36277: LD_ADDR_VAR 0 12
36281: PUSH
36282: LD_VAR 0 18
36286: PPUSH
36287: LD_INT 22
36289: PUSH
36290: LD_VAR 0 16
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 2
36301: PUSH
36302: LD_INT 30
36304: PUSH
36305: LD_INT 2
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 30
36314: PUSH
36315: LD_INT 3
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: LIST
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PPUSH
36331: CALL_OW 72
36335: ST_TO_ADDR
36336: GO 36420
36338: LD_INT 4
36340: DOUBLE
36341: EQUAL
36342: IFTRUE 36346
36344: GO 36419
36346: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36347: LD_ADDR_VAR 0 12
36351: PUSH
36352: LD_VAR 0 18
36356: PPUSH
36357: LD_INT 22
36359: PUSH
36360: LD_VAR 0 16
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 2
36371: PUSH
36372: LD_INT 30
36374: PUSH
36375: LD_INT 6
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 30
36384: PUSH
36385: LD_INT 7
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 30
36394: PUSH
36395: LD_INT 8
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PPUSH
36412: CALL_OW 72
36416: ST_TO_ADDR
36417: GO 36420
36419: POP
// if i = 1 then
36420: LD_VAR 0 8
36424: PUSH
36425: LD_INT 1
36427: EQUAL
36428: IFFALSE 36539
// begin tmp := [ ] ;
36430: LD_ADDR_VAR 0 19
36434: PUSH
36435: EMPTY
36436: ST_TO_ADDR
// for j in f do
36437: LD_ADDR_VAR 0 9
36441: PUSH
36442: LD_VAR 0 12
36446: PUSH
36447: FOR_IN
36448: IFFALSE 36521
// if GetBType ( j ) = b_bunker then
36450: LD_VAR 0 9
36454: PPUSH
36455: CALL_OW 266
36459: PUSH
36460: LD_INT 32
36462: EQUAL
36463: IFFALSE 36490
// tmp := Insert ( tmp , 1 , j ) else
36465: LD_ADDR_VAR 0 19
36469: PUSH
36470: LD_VAR 0 19
36474: PPUSH
36475: LD_INT 1
36477: PPUSH
36478: LD_VAR 0 9
36482: PPUSH
36483: CALL_OW 2
36487: ST_TO_ADDR
36488: GO 36519
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36490: LD_ADDR_VAR 0 19
36494: PUSH
36495: LD_VAR 0 19
36499: PPUSH
36500: LD_VAR 0 19
36504: PUSH
36505: LD_INT 1
36507: PLUS
36508: PPUSH
36509: LD_VAR 0 9
36513: PPUSH
36514: CALL_OW 2
36518: ST_TO_ADDR
36519: GO 36447
36521: POP
36522: POP
// if tmp then
36523: LD_VAR 0 19
36527: IFFALSE 36539
// f := tmp ;
36529: LD_ADDR_VAR 0 12
36533: PUSH
36534: LD_VAR 0 19
36538: ST_TO_ADDR
// end ; x := personel [ i ] ;
36539: LD_ADDR_VAR 0 13
36543: PUSH
36544: LD_VAR 0 6
36548: PUSH
36549: LD_VAR 0 8
36553: ARRAY
36554: ST_TO_ADDR
// if x = - 1 then
36555: LD_VAR 0 13
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: EQUAL
36564: IFFALSE 36773
// begin for j in f do
36566: LD_ADDR_VAR 0 9
36570: PUSH
36571: LD_VAR 0 12
36575: PUSH
36576: FOR_IN
36577: IFFALSE 36769
// repeat InitHc ;
36579: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36583: LD_VAR 0 9
36587: PPUSH
36588: CALL_OW 266
36592: PUSH
36593: LD_INT 5
36595: EQUAL
36596: IFFALSE 36666
// begin if UnitsInside ( j ) < 3 then
36598: LD_VAR 0 9
36602: PPUSH
36603: CALL_OW 313
36607: PUSH
36608: LD_INT 3
36610: LESS
36611: IFFALSE 36647
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36613: LD_INT 0
36615: PPUSH
36616: LD_INT 5
36618: PUSH
36619: LD_INT 8
36621: PUSH
36622: LD_INT 9
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: LIST
36629: PUSH
36630: LD_VAR 0 17
36634: ARRAY
36635: PPUSH
36636: LD_VAR 0 4
36640: PPUSH
36641: CALL_OW 380
36645: GO 36664
// PrepareHuman ( false , i , skill ) ;
36647: LD_INT 0
36649: PPUSH
36650: LD_VAR 0 8
36654: PPUSH
36655: LD_VAR 0 4
36659: PPUSH
36660: CALL_OW 380
// end else
36664: GO 36683
// PrepareHuman ( false , i , skill ) ;
36666: LD_INT 0
36668: PPUSH
36669: LD_VAR 0 8
36673: PPUSH
36674: LD_VAR 0 4
36678: PPUSH
36679: CALL_OW 380
// un := CreateHuman ;
36683: LD_ADDR_VAR 0 14
36687: PUSH
36688: CALL_OW 44
36692: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36693: LD_ADDR_VAR 0 7
36697: PUSH
36698: LD_VAR 0 7
36702: PPUSH
36703: LD_INT 1
36705: PPUSH
36706: LD_VAR 0 14
36710: PPUSH
36711: CALL_OW 2
36715: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36716: LD_VAR 0 14
36720: PPUSH
36721: LD_VAR 0 9
36725: PPUSH
36726: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36730: LD_VAR 0 9
36734: PPUSH
36735: CALL_OW 313
36739: PUSH
36740: LD_INT 6
36742: EQUAL
36743: PUSH
36744: LD_VAR 0 9
36748: PPUSH
36749: CALL_OW 266
36753: PUSH
36754: LD_INT 32
36756: PUSH
36757: LD_INT 31
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: IN
36764: OR
36765: IFFALSE 36579
36767: GO 36576
36769: POP
36770: POP
// end else
36771: GO 37153
// for j = 1 to x do
36773: LD_ADDR_VAR 0 9
36777: PUSH
36778: DOUBLE
36779: LD_INT 1
36781: DEC
36782: ST_TO_ADDR
36783: LD_VAR 0 13
36787: PUSH
36788: FOR_TO
36789: IFFALSE 37151
// begin InitHc ;
36791: CALL_OW 19
// if not f then
36795: LD_VAR 0 12
36799: NOT
36800: IFFALSE 36889
// begin PrepareHuman ( false , i , skill ) ;
36802: LD_INT 0
36804: PPUSH
36805: LD_VAR 0 8
36809: PPUSH
36810: LD_VAR 0 4
36814: PPUSH
36815: CALL_OW 380
// un := CreateHuman ;
36819: LD_ADDR_VAR 0 14
36823: PUSH
36824: CALL_OW 44
36828: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36829: LD_ADDR_VAR 0 7
36833: PUSH
36834: LD_VAR 0 7
36838: PPUSH
36839: LD_INT 1
36841: PPUSH
36842: LD_VAR 0 14
36846: PPUSH
36847: CALL_OW 2
36851: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36852: LD_VAR 0 14
36856: PPUSH
36857: LD_VAR 0 1
36861: PPUSH
36862: CALL_OW 250
36866: PPUSH
36867: LD_VAR 0 1
36871: PPUSH
36872: CALL_OW 251
36876: PPUSH
36877: LD_INT 10
36879: PPUSH
36880: LD_INT 0
36882: PPUSH
36883: CALL_OW 50
// continue ;
36887: GO 36788
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36889: LD_VAR 0 12
36893: PUSH
36894: LD_INT 1
36896: ARRAY
36897: PPUSH
36898: CALL_OW 313
36902: PUSH
36903: LD_VAR 0 12
36907: PUSH
36908: LD_INT 1
36910: ARRAY
36911: PPUSH
36912: CALL_OW 266
36916: PUSH
36917: LD_INT 32
36919: PUSH
36920: LD_INT 31
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: IN
36927: AND
36928: PUSH
36929: LD_VAR 0 12
36933: PUSH
36934: LD_INT 1
36936: ARRAY
36937: PPUSH
36938: CALL_OW 313
36942: PUSH
36943: LD_INT 6
36945: EQUAL
36946: OR
36947: IFFALSE 36967
// f := Delete ( f , 1 ) ;
36949: LD_ADDR_VAR 0 12
36953: PUSH
36954: LD_VAR 0 12
36958: PPUSH
36959: LD_INT 1
36961: PPUSH
36962: CALL_OW 3
36966: ST_TO_ADDR
// if not f then
36967: LD_VAR 0 12
36971: NOT
36972: IFFALSE 36990
// begin x := x + 2 ;
36974: LD_ADDR_VAR 0 13
36978: PUSH
36979: LD_VAR 0 13
36983: PUSH
36984: LD_INT 2
36986: PLUS
36987: ST_TO_ADDR
// continue ;
36988: GO 36788
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36990: LD_VAR 0 12
36994: PUSH
36995: LD_INT 1
36997: ARRAY
36998: PPUSH
36999: CALL_OW 266
37003: PUSH
37004: LD_INT 5
37006: EQUAL
37007: IFFALSE 37081
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37009: LD_VAR 0 12
37013: PUSH
37014: LD_INT 1
37016: ARRAY
37017: PPUSH
37018: CALL_OW 313
37022: PUSH
37023: LD_INT 3
37025: LESS
37026: IFFALSE 37062
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37028: LD_INT 0
37030: PPUSH
37031: LD_INT 5
37033: PUSH
37034: LD_INT 8
37036: PUSH
37037: LD_INT 9
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: LIST
37044: PUSH
37045: LD_VAR 0 17
37049: ARRAY
37050: PPUSH
37051: LD_VAR 0 4
37055: PPUSH
37056: CALL_OW 380
37060: GO 37079
// PrepareHuman ( false , i , skill ) ;
37062: LD_INT 0
37064: PPUSH
37065: LD_VAR 0 8
37069: PPUSH
37070: LD_VAR 0 4
37074: PPUSH
37075: CALL_OW 380
// end else
37079: GO 37098
// PrepareHuman ( false , i , skill ) ;
37081: LD_INT 0
37083: PPUSH
37084: LD_VAR 0 8
37088: PPUSH
37089: LD_VAR 0 4
37093: PPUSH
37094: CALL_OW 380
// un := CreateHuman ;
37098: LD_ADDR_VAR 0 14
37102: PUSH
37103: CALL_OW 44
37107: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37108: LD_ADDR_VAR 0 7
37112: PUSH
37113: LD_VAR 0 7
37117: PPUSH
37118: LD_INT 1
37120: PPUSH
37121: LD_VAR 0 14
37125: PPUSH
37126: CALL_OW 2
37130: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37131: LD_VAR 0 14
37135: PPUSH
37136: LD_VAR 0 12
37140: PUSH
37141: LD_INT 1
37143: ARRAY
37144: PPUSH
37145: CALL_OW 52
// end ;
37149: GO 36788
37151: POP
37152: POP
// end ;
37153: GO 36090
37155: POP
37156: POP
// result := result ^ buildings ;
37157: LD_ADDR_VAR 0 7
37161: PUSH
37162: LD_VAR 0 7
37166: PUSH
37167: LD_VAR 0 18
37171: ADD
37172: ST_TO_ADDR
// end else
37173: GO 37316
// begin for i = 1 to personel do
37175: LD_ADDR_VAR 0 8
37179: PUSH
37180: DOUBLE
37181: LD_INT 1
37183: DEC
37184: ST_TO_ADDR
37185: LD_VAR 0 6
37189: PUSH
37190: FOR_TO
37191: IFFALSE 37314
// begin if i > 4 then
37193: LD_VAR 0 8
37197: PUSH
37198: LD_INT 4
37200: GREATER
37201: IFFALSE 37205
// break ;
37203: GO 37314
// x := personel [ i ] ;
37205: LD_ADDR_VAR 0 13
37209: PUSH
37210: LD_VAR 0 6
37214: PUSH
37215: LD_VAR 0 8
37219: ARRAY
37220: ST_TO_ADDR
// if x = - 1 then
37221: LD_VAR 0 13
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: EQUAL
37230: IFFALSE 37234
// continue ;
37232: GO 37190
// PrepareHuman ( false , i , skill ) ;
37234: LD_INT 0
37236: PPUSH
37237: LD_VAR 0 8
37241: PPUSH
37242: LD_VAR 0 4
37246: PPUSH
37247: CALL_OW 380
// un := CreateHuman ;
37251: LD_ADDR_VAR 0 14
37255: PUSH
37256: CALL_OW 44
37260: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37261: LD_VAR 0 14
37265: PPUSH
37266: LD_VAR 0 1
37270: PPUSH
37271: CALL_OW 250
37275: PPUSH
37276: LD_VAR 0 1
37280: PPUSH
37281: CALL_OW 251
37285: PPUSH
37286: LD_INT 10
37288: PPUSH
37289: LD_INT 0
37291: PPUSH
37292: CALL_OW 50
// result := result ^ un ;
37296: LD_ADDR_VAR 0 7
37300: PUSH
37301: LD_VAR 0 7
37305: PUSH
37306: LD_VAR 0 14
37310: ADD
37311: ST_TO_ADDR
// end ;
37312: GO 37190
37314: POP
37315: POP
// end ; end ;
37316: LD_VAR 0 7
37320: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37321: LD_INT 0
37323: PPUSH
37324: PPUSH
37325: PPUSH
37326: PPUSH
37327: PPUSH
37328: PPUSH
37329: PPUSH
37330: PPUSH
37331: PPUSH
37332: PPUSH
37333: PPUSH
37334: PPUSH
37335: PPUSH
37336: PPUSH
37337: PPUSH
37338: PPUSH
// result := false ;
37339: LD_ADDR_VAR 0 3
37343: PUSH
37344: LD_INT 0
37346: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37347: LD_VAR 0 1
37351: NOT
37352: PUSH
37353: LD_VAR 0 1
37357: PPUSH
37358: CALL_OW 266
37362: PUSH
37363: LD_INT 32
37365: PUSH
37366: LD_INT 33
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: IN
37373: NOT
37374: OR
37375: IFFALSE 37379
// exit ;
37377: GO 38488
// nat := GetNation ( tower ) ;
37379: LD_ADDR_VAR 0 12
37383: PUSH
37384: LD_VAR 0 1
37388: PPUSH
37389: CALL_OW 248
37393: ST_TO_ADDR
// side := GetSide ( tower ) ;
37394: LD_ADDR_VAR 0 16
37398: PUSH
37399: LD_VAR 0 1
37403: PPUSH
37404: CALL_OW 255
37408: ST_TO_ADDR
// x := GetX ( tower ) ;
37409: LD_ADDR_VAR 0 10
37413: PUSH
37414: LD_VAR 0 1
37418: PPUSH
37419: CALL_OW 250
37423: ST_TO_ADDR
// y := GetY ( tower ) ;
37424: LD_ADDR_VAR 0 11
37428: PUSH
37429: LD_VAR 0 1
37433: PPUSH
37434: CALL_OW 251
37438: ST_TO_ADDR
// if not x or not y then
37439: LD_VAR 0 10
37443: NOT
37444: PUSH
37445: LD_VAR 0 11
37449: NOT
37450: OR
37451: IFFALSE 37455
// exit ;
37453: GO 38488
// weapon := 0 ;
37455: LD_ADDR_VAR 0 18
37459: PUSH
37460: LD_INT 0
37462: ST_TO_ADDR
// fac_list := [ ] ;
37463: LD_ADDR_VAR 0 17
37467: PUSH
37468: EMPTY
37469: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37470: LD_ADDR_VAR 0 6
37474: PUSH
37475: LD_VAR 0 1
37479: PPUSH
37480: CALL_OW 274
37484: PPUSH
37485: LD_VAR 0 2
37489: PPUSH
37490: LD_INT 0
37492: PPUSH
37493: CALL 35059 0 3
37497: PPUSH
37498: LD_INT 30
37500: PUSH
37501: LD_INT 3
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PPUSH
37508: CALL_OW 72
37512: ST_TO_ADDR
// if not factories then
37513: LD_VAR 0 6
37517: NOT
37518: IFFALSE 37522
// exit ;
37520: GO 38488
// for i in factories do
37522: LD_ADDR_VAR 0 8
37526: PUSH
37527: LD_VAR 0 6
37531: PUSH
37532: FOR_IN
37533: IFFALSE 37558
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37535: LD_ADDR_VAR 0 17
37539: PUSH
37540: LD_VAR 0 17
37544: PUSH
37545: LD_VAR 0 8
37549: PPUSH
37550: CALL_OW 478
37554: UNION
37555: ST_TO_ADDR
37556: GO 37532
37558: POP
37559: POP
// if not fac_list then
37560: LD_VAR 0 17
37564: NOT
37565: IFFALSE 37569
// exit ;
37567: GO 38488
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37569: LD_ADDR_VAR 0 5
37573: PUSH
37574: LD_INT 4
37576: PUSH
37577: LD_INT 5
37579: PUSH
37580: LD_INT 9
37582: PUSH
37583: LD_INT 10
37585: PUSH
37586: LD_INT 6
37588: PUSH
37589: LD_INT 7
37591: PUSH
37592: LD_INT 11
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 27
37606: PUSH
37607: LD_INT 28
37609: PUSH
37610: LD_INT 26
37612: PUSH
37613: LD_INT 30
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 43
37624: PUSH
37625: LD_INT 44
37627: PUSH
37628: LD_INT 46
37630: PUSH
37631: LD_INT 45
37633: PUSH
37634: LD_INT 47
37636: PUSH
37637: LD_INT 49
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: LIST
37652: PUSH
37653: LD_VAR 0 12
37657: ARRAY
37658: ST_TO_ADDR
// list := list isect fac_list ;
37659: LD_ADDR_VAR 0 5
37663: PUSH
37664: LD_VAR 0 5
37668: PUSH
37669: LD_VAR 0 17
37673: ISECT
37674: ST_TO_ADDR
// if not list then
37675: LD_VAR 0 5
37679: NOT
37680: IFFALSE 37684
// exit ;
37682: GO 38488
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37684: LD_VAR 0 12
37688: PUSH
37689: LD_INT 3
37691: EQUAL
37692: PUSH
37693: LD_INT 49
37695: PUSH
37696: LD_VAR 0 5
37700: IN
37701: AND
37702: PUSH
37703: LD_INT 31
37705: PPUSH
37706: LD_VAR 0 16
37710: PPUSH
37711: CALL_OW 321
37715: PUSH
37716: LD_INT 2
37718: EQUAL
37719: AND
37720: IFFALSE 37780
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37722: LD_INT 22
37724: PUSH
37725: LD_VAR 0 16
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 35
37736: PUSH
37737: LD_INT 49
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 91
37746: PUSH
37747: LD_VAR 0 1
37751: PUSH
37752: LD_INT 10
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: LIST
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: LIST
37764: PPUSH
37765: CALL_OW 69
37769: NOT
37770: IFFALSE 37780
// weapon := ru_time_lapser ;
37772: LD_ADDR_VAR 0 18
37776: PUSH
37777: LD_INT 49
37779: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37780: LD_VAR 0 12
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: LD_INT 2
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: IN
37795: PUSH
37796: LD_INT 11
37798: PUSH
37799: LD_VAR 0 5
37803: IN
37804: PUSH
37805: LD_INT 30
37807: PUSH
37808: LD_VAR 0 5
37812: IN
37813: OR
37814: AND
37815: PUSH
37816: LD_INT 6
37818: PPUSH
37819: LD_VAR 0 16
37823: PPUSH
37824: CALL_OW 321
37828: PUSH
37829: LD_INT 2
37831: EQUAL
37832: AND
37833: IFFALSE 37998
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37835: LD_INT 22
37837: PUSH
37838: LD_VAR 0 16
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 2
37849: PUSH
37850: LD_INT 35
37852: PUSH
37853: LD_INT 11
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 35
37862: PUSH
37863: LD_INT 30
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 91
37877: PUSH
37878: LD_VAR 0 1
37882: PUSH
37883: LD_INT 18
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: LIST
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: LIST
37895: PPUSH
37896: CALL_OW 69
37900: NOT
37901: PUSH
37902: LD_INT 22
37904: PUSH
37905: LD_VAR 0 16
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 2
37916: PUSH
37917: LD_INT 30
37919: PUSH
37920: LD_INT 32
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 30
37929: PUSH
37930: LD_INT 33
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 91
37944: PUSH
37945: LD_VAR 0 1
37949: PUSH
37950: LD_INT 12
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: LIST
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: LIST
37962: PUSH
37963: EMPTY
37964: LIST
37965: PPUSH
37966: CALL_OW 69
37970: PUSH
37971: LD_INT 2
37973: GREATER
37974: AND
37975: IFFALSE 37998
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37977: LD_ADDR_VAR 0 18
37981: PUSH
37982: LD_INT 11
37984: PUSH
37985: LD_INT 30
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_VAR 0 12
37996: ARRAY
37997: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37998: LD_VAR 0 18
38002: NOT
38003: PUSH
38004: LD_INT 40
38006: PPUSH
38007: LD_VAR 0 16
38011: PPUSH
38012: CALL_OW 321
38016: PUSH
38017: LD_INT 2
38019: EQUAL
38020: AND
38021: PUSH
38022: LD_INT 7
38024: PUSH
38025: LD_VAR 0 5
38029: IN
38030: PUSH
38031: LD_INT 28
38033: PUSH
38034: LD_VAR 0 5
38038: IN
38039: OR
38040: PUSH
38041: LD_INT 45
38043: PUSH
38044: LD_VAR 0 5
38048: IN
38049: OR
38050: AND
38051: IFFALSE 38305
// begin hex := GetHexInfo ( x , y ) ;
38053: LD_ADDR_VAR 0 4
38057: PUSH
38058: LD_VAR 0 10
38062: PPUSH
38063: LD_VAR 0 11
38067: PPUSH
38068: CALL_OW 546
38072: ST_TO_ADDR
// if hex [ 1 ] then
38073: LD_VAR 0 4
38077: PUSH
38078: LD_INT 1
38080: ARRAY
38081: IFFALSE 38085
// exit ;
38083: GO 38488
// height := hex [ 2 ] ;
38085: LD_ADDR_VAR 0 15
38089: PUSH
38090: LD_VAR 0 4
38094: PUSH
38095: LD_INT 2
38097: ARRAY
38098: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38099: LD_ADDR_VAR 0 14
38103: PUSH
38104: LD_INT 0
38106: PUSH
38107: LD_INT 2
38109: PUSH
38110: LD_INT 3
38112: PUSH
38113: LD_INT 5
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: ST_TO_ADDR
// for i in tmp do
38122: LD_ADDR_VAR 0 8
38126: PUSH
38127: LD_VAR 0 14
38131: PUSH
38132: FOR_IN
38133: IFFALSE 38303
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38135: LD_ADDR_VAR 0 9
38139: PUSH
38140: LD_VAR 0 10
38144: PPUSH
38145: LD_VAR 0 8
38149: PPUSH
38150: LD_INT 5
38152: PPUSH
38153: CALL_OW 272
38157: PUSH
38158: LD_VAR 0 11
38162: PPUSH
38163: LD_VAR 0 8
38167: PPUSH
38168: LD_INT 5
38170: PPUSH
38171: CALL_OW 273
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38180: LD_VAR 0 9
38184: PUSH
38185: LD_INT 1
38187: ARRAY
38188: PPUSH
38189: LD_VAR 0 9
38193: PUSH
38194: LD_INT 2
38196: ARRAY
38197: PPUSH
38198: CALL_OW 488
38202: IFFALSE 38301
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38204: LD_ADDR_VAR 0 4
38208: PUSH
38209: LD_VAR 0 9
38213: PUSH
38214: LD_INT 1
38216: ARRAY
38217: PPUSH
38218: LD_VAR 0 9
38222: PUSH
38223: LD_INT 2
38225: ARRAY
38226: PPUSH
38227: CALL_OW 546
38231: ST_TO_ADDR
// if hex [ 1 ] then
38232: LD_VAR 0 4
38236: PUSH
38237: LD_INT 1
38239: ARRAY
38240: IFFALSE 38244
// continue ;
38242: GO 38132
// h := hex [ 2 ] ;
38244: LD_ADDR_VAR 0 13
38248: PUSH
38249: LD_VAR 0 4
38253: PUSH
38254: LD_INT 2
38256: ARRAY
38257: ST_TO_ADDR
// if h + 7 < height then
38258: LD_VAR 0 13
38262: PUSH
38263: LD_INT 7
38265: PLUS
38266: PUSH
38267: LD_VAR 0 15
38271: LESS
38272: IFFALSE 38301
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38274: LD_ADDR_VAR 0 18
38278: PUSH
38279: LD_INT 7
38281: PUSH
38282: LD_INT 28
38284: PUSH
38285: LD_INT 45
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: LIST
38292: PUSH
38293: LD_VAR 0 12
38297: ARRAY
38298: ST_TO_ADDR
// break ;
38299: GO 38303
// end ; end ; end ;
38301: GO 38132
38303: POP
38304: POP
// end ; if not weapon then
38305: LD_VAR 0 18
38309: NOT
38310: IFFALSE 38370
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38312: LD_ADDR_VAR 0 5
38316: PUSH
38317: LD_VAR 0 5
38321: PUSH
38322: LD_INT 11
38324: PUSH
38325: LD_INT 30
38327: PUSH
38328: LD_INT 49
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: LIST
38335: DIFF
38336: ST_TO_ADDR
// if not list then
38337: LD_VAR 0 5
38341: NOT
38342: IFFALSE 38346
// exit ;
38344: GO 38488
// weapon := list [ rand ( 1 , list ) ] ;
38346: LD_ADDR_VAR 0 18
38350: PUSH
38351: LD_VAR 0 5
38355: PUSH
38356: LD_INT 1
38358: PPUSH
38359: LD_VAR 0 5
38363: PPUSH
38364: CALL_OW 12
38368: ARRAY
38369: ST_TO_ADDR
// end ; if weapon then
38370: LD_VAR 0 18
38374: IFFALSE 38488
// begin tmp := CostOfWeapon ( weapon ) ;
38376: LD_ADDR_VAR 0 14
38380: PUSH
38381: LD_VAR 0 18
38385: PPUSH
38386: CALL_OW 451
38390: ST_TO_ADDR
// j := GetBase ( tower ) ;
38391: LD_ADDR_VAR 0 9
38395: PUSH
38396: LD_VAR 0 1
38400: PPUSH
38401: CALL_OW 274
38405: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38406: LD_VAR 0 9
38410: PPUSH
38411: LD_INT 1
38413: PPUSH
38414: CALL_OW 275
38418: PUSH
38419: LD_VAR 0 14
38423: PUSH
38424: LD_INT 1
38426: ARRAY
38427: GREATEREQUAL
38428: PUSH
38429: LD_VAR 0 9
38433: PPUSH
38434: LD_INT 2
38436: PPUSH
38437: CALL_OW 275
38441: PUSH
38442: LD_VAR 0 14
38446: PUSH
38447: LD_INT 2
38449: ARRAY
38450: GREATEREQUAL
38451: AND
38452: PUSH
38453: LD_VAR 0 9
38457: PPUSH
38458: LD_INT 3
38460: PPUSH
38461: CALL_OW 275
38465: PUSH
38466: LD_VAR 0 14
38470: PUSH
38471: LD_INT 3
38473: ARRAY
38474: GREATEREQUAL
38475: AND
38476: IFFALSE 38488
// result := weapon ;
38478: LD_ADDR_VAR 0 3
38482: PUSH
38483: LD_VAR 0 18
38487: ST_TO_ADDR
// end ; end ;
38488: LD_VAR 0 3
38492: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38493: LD_INT 0
38495: PPUSH
38496: PPUSH
// result := true ;
38497: LD_ADDR_VAR 0 3
38501: PUSH
38502: LD_INT 1
38504: ST_TO_ADDR
// if array1 = array2 then
38505: LD_VAR 0 1
38509: PUSH
38510: LD_VAR 0 2
38514: EQUAL
38515: IFFALSE 38575
// begin for i = 1 to array1 do
38517: LD_ADDR_VAR 0 4
38521: PUSH
38522: DOUBLE
38523: LD_INT 1
38525: DEC
38526: ST_TO_ADDR
38527: LD_VAR 0 1
38531: PUSH
38532: FOR_TO
38533: IFFALSE 38571
// if array1 [ i ] <> array2 [ i ] then
38535: LD_VAR 0 1
38539: PUSH
38540: LD_VAR 0 4
38544: ARRAY
38545: PUSH
38546: LD_VAR 0 2
38550: PUSH
38551: LD_VAR 0 4
38555: ARRAY
38556: NONEQUAL
38557: IFFALSE 38569
// begin result := false ;
38559: LD_ADDR_VAR 0 3
38563: PUSH
38564: LD_INT 0
38566: ST_TO_ADDR
// break ;
38567: GO 38571
// end ;
38569: GO 38532
38571: POP
38572: POP
// end else
38573: GO 38583
// result := false ;
38575: LD_ADDR_VAR 0 3
38579: PUSH
38580: LD_INT 0
38582: ST_TO_ADDR
// end ;
38583: LD_VAR 0 3
38587: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38588: LD_INT 0
38590: PPUSH
38591: PPUSH
// if not array1 or not array2 then
38592: LD_VAR 0 1
38596: NOT
38597: PUSH
38598: LD_VAR 0 2
38602: NOT
38603: OR
38604: IFFALSE 38608
// exit ;
38606: GO 38672
// result := true ;
38608: LD_ADDR_VAR 0 3
38612: PUSH
38613: LD_INT 1
38615: ST_TO_ADDR
// for i = 1 to array1 do
38616: LD_ADDR_VAR 0 4
38620: PUSH
38621: DOUBLE
38622: LD_INT 1
38624: DEC
38625: ST_TO_ADDR
38626: LD_VAR 0 1
38630: PUSH
38631: FOR_TO
38632: IFFALSE 38670
// if array1 [ i ] <> array2 [ i ] then
38634: LD_VAR 0 1
38638: PUSH
38639: LD_VAR 0 4
38643: ARRAY
38644: PUSH
38645: LD_VAR 0 2
38649: PUSH
38650: LD_VAR 0 4
38654: ARRAY
38655: NONEQUAL
38656: IFFALSE 38668
// begin result := false ;
38658: LD_ADDR_VAR 0 3
38662: PUSH
38663: LD_INT 0
38665: ST_TO_ADDR
// break ;
38666: GO 38670
// end ;
38668: GO 38631
38670: POP
38671: POP
// end ;
38672: LD_VAR 0 3
38676: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38677: LD_INT 0
38679: PPUSH
38680: PPUSH
38681: PPUSH
// pom := GetBase ( fac ) ;
38682: LD_ADDR_VAR 0 5
38686: PUSH
38687: LD_VAR 0 1
38691: PPUSH
38692: CALL_OW 274
38696: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38697: LD_ADDR_VAR 0 4
38701: PUSH
38702: LD_VAR 0 2
38706: PUSH
38707: LD_INT 1
38709: ARRAY
38710: PPUSH
38711: LD_VAR 0 2
38715: PUSH
38716: LD_INT 2
38718: ARRAY
38719: PPUSH
38720: LD_VAR 0 2
38724: PUSH
38725: LD_INT 3
38727: ARRAY
38728: PPUSH
38729: LD_VAR 0 2
38733: PUSH
38734: LD_INT 4
38736: ARRAY
38737: PPUSH
38738: CALL_OW 449
38742: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38743: LD_ADDR_VAR 0 3
38747: PUSH
38748: LD_VAR 0 5
38752: PPUSH
38753: LD_INT 1
38755: PPUSH
38756: CALL_OW 275
38760: PUSH
38761: LD_VAR 0 4
38765: PUSH
38766: LD_INT 1
38768: ARRAY
38769: GREATEREQUAL
38770: PUSH
38771: LD_VAR 0 5
38775: PPUSH
38776: LD_INT 2
38778: PPUSH
38779: CALL_OW 275
38783: PUSH
38784: LD_VAR 0 4
38788: PUSH
38789: LD_INT 2
38791: ARRAY
38792: GREATEREQUAL
38793: AND
38794: PUSH
38795: LD_VAR 0 5
38799: PPUSH
38800: LD_INT 3
38802: PPUSH
38803: CALL_OW 275
38807: PUSH
38808: LD_VAR 0 4
38812: PUSH
38813: LD_INT 3
38815: ARRAY
38816: GREATEREQUAL
38817: AND
38818: ST_TO_ADDR
// end ;
38819: LD_VAR 0 3
38823: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38824: LD_INT 0
38826: PPUSH
38827: PPUSH
38828: PPUSH
38829: PPUSH
// pom := GetBase ( building ) ;
38830: LD_ADDR_VAR 0 3
38834: PUSH
38835: LD_VAR 0 1
38839: PPUSH
38840: CALL_OW 274
38844: ST_TO_ADDR
// if not pom then
38845: LD_VAR 0 3
38849: NOT
38850: IFFALSE 38854
// exit ;
38852: GO 39024
// btype := GetBType ( building ) ;
38854: LD_ADDR_VAR 0 5
38858: PUSH
38859: LD_VAR 0 1
38863: PPUSH
38864: CALL_OW 266
38868: ST_TO_ADDR
// if btype = b_armoury then
38869: LD_VAR 0 5
38873: PUSH
38874: LD_INT 4
38876: EQUAL
38877: IFFALSE 38887
// btype := b_barracks ;
38879: LD_ADDR_VAR 0 5
38883: PUSH
38884: LD_INT 5
38886: ST_TO_ADDR
// if btype = b_depot then
38887: LD_VAR 0 5
38891: PUSH
38892: LD_INT 0
38894: EQUAL
38895: IFFALSE 38905
// btype := b_warehouse ;
38897: LD_ADDR_VAR 0 5
38901: PUSH
38902: LD_INT 1
38904: ST_TO_ADDR
// if btype = b_workshop then
38905: LD_VAR 0 5
38909: PUSH
38910: LD_INT 2
38912: EQUAL
38913: IFFALSE 38923
// btype := b_factory ;
38915: LD_ADDR_VAR 0 5
38919: PUSH
38920: LD_INT 3
38922: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38923: LD_ADDR_VAR 0 4
38927: PUSH
38928: LD_VAR 0 5
38932: PPUSH
38933: LD_VAR 0 1
38937: PPUSH
38938: CALL_OW 248
38942: PPUSH
38943: CALL_OW 450
38947: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38948: LD_ADDR_VAR 0 2
38952: PUSH
38953: LD_VAR 0 3
38957: PPUSH
38958: LD_INT 1
38960: PPUSH
38961: CALL_OW 275
38965: PUSH
38966: LD_VAR 0 4
38970: PUSH
38971: LD_INT 1
38973: ARRAY
38974: GREATEREQUAL
38975: PUSH
38976: LD_VAR 0 3
38980: PPUSH
38981: LD_INT 2
38983: PPUSH
38984: CALL_OW 275
38988: PUSH
38989: LD_VAR 0 4
38993: PUSH
38994: LD_INT 2
38996: ARRAY
38997: GREATEREQUAL
38998: AND
38999: PUSH
39000: LD_VAR 0 3
39004: PPUSH
39005: LD_INT 3
39007: PPUSH
39008: CALL_OW 275
39012: PUSH
39013: LD_VAR 0 4
39017: PUSH
39018: LD_INT 3
39020: ARRAY
39021: GREATEREQUAL
39022: AND
39023: ST_TO_ADDR
// end ;
39024: LD_VAR 0 2
39028: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39029: LD_INT 0
39031: PPUSH
39032: PPUSH
39033: PPUSH
// pom := GetBase ( building ) ;
39034: LD_ADDR_VAR 0 4
39038: PUSH
39039: LD_VAR 0 1
39043: PPUSH
39044: CALL_OW 274
39048: ST_TO_ADDR
// if not pom then
39049: LD_VAR 0 4
39053: NOT
39054: IFFALSE 39058
// exit ;
39056: GO 39159
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39058: LD_ADDR_VAR 0 5
39062: PUSH
39063: LD_VAR 0 2
39067: PPUSH
39068: LD_VAR 0 1
39072: PPUSH
39073: CALL_OW 248
39077: PPUSH
39078: CALL_OW 450
39082: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39083: LD_ADDR_VAR 0 3
39087: PUSH
39088: LD_VAR 0 4
39092: PPUSH
39093: LD_INT 1
39095: PPUSH
39096: CALL_OW 275
39100: PUSH
39101: LD_VAR 0 5
39105: PUSH
39106: LD_INT 1
39108: ARRAY
39109: GREATEREQUAL
39110: PUSH
39111: LD_VAR 0 4
39115: PPUSH
39116: LD_INT 2
39118: PPUSH
39119: CALL_OW 275
39123: PUSH
39124: LD_VAR 0 5
39128: PUSH
39129: LD_INT 2
39131: ARRAY
39132: GREATEREQUAL
39133: AND
39134: PUSH
39135: LD_VAR 0 4
39139: PPUSH
39140: LD_INT 3
39142: PPUSH
39143: CALL_OW 275
39147: PUSH
39148: LD_VAR 0 5
39152: PUSH
39153: LD_INT 3
39155: ARRAY
39156: GREATEREQUAL
39157: AND
39158: ST_TO_ADDR
// end ;
39159: LD_VAR 0 3
39163: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39164: LD_INT 0
39166: PPUSH
39167: PPUSH
39168: PPUSH
39169: PPUSH
39170: PPUSH
39171: PPUSH
39172: PPUSH
39173: PPUSH
39174: PPUSH
39175: PPUSH
39176: PPUSH
// result := false ;
39177: LD_ADDR_VAR 0 8
39181: PUSH
39182: LD_INT 0
39184: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39185: LD_VAR 0 5
39189: NOT
39190: PUSH
39191: LD_VAR 0 1
39195: NOT
39196: OR
39197: PUSH
39198: LD_VAR 0 2
39202: NOT
39203: OR
39204: PUSH
39205: LD_VAR 0 3
39209: NOT
39210: OR
39211: IFFALSE 39215
// exit ;
39213: GO 40029
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39215: LD_ADDR_VAR 0 14
39219: PUSH
39220: LD_VAR 0 1
39224: PPUSH
39225: LD_VAR 0 2
39229: PPUSH
39230: LD_VAR 0 3
39234: PPUSH
39235: LD_VAR 0 4
39239: PPUSH
39240: LD_VAR 0 5
39244: PUSH
39245: LD_INT 1
39247: ARRAY
39248: PPUSH
39249: CALL_OW 248
39253: PPUSH
39254: LD_INT 0
39256: PPUSH
39257: CALL 41262 0 6
39261: ST_TO_ADDR
// if not hexes then
39262: LD_VAR 0 14
39266: NOT
39267: IFFALSE 39271
// exit ;
39269: GO 40029
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39271: LD_ADDR_VAR 0 17
39275: PUSH
39276: LD_VAR 0 5
39280: PPUSH
39281: LD_INT 22
39283: PUSH
39284: LD_VAR 0 13
39288: PPUSH
39289: CALL_OW 255
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: LD_INT 30
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 30
39313: PUSH
39314: LD_INT 1
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: LIST
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PPUSH
39330: CALL_OW 72
39334: ST_TO_ADDR
// for i = 1 to hexes do
39335: LD_ADDR_VAR 0 9
39339: PUSH
39340: DOUBLE
39341: LD_INT 1
39343: DEC
39344: ST_TO_ADDR
39345: LD_VAR 0 14
39349: PUSH
39350: FOR_TO
39351: IFFALSE 40027
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39353: LD_ADDR_VAR 0 13
39357: PUSH
39358: LD_VAR 0 14
39362: PUSH
39363: LD_VAR 0 9
39367: ARRAY
39368: PUSH
39369: LD_INT 1
39371: ARRAY
39372: PPUSH
39373: LD_VAR 0 14
39377: PUSH
39378: LD_VAR 0 9
39382: ARRAY
39383: PUSH
39384: LD_INT 2
39386: ARRAY
39387: PPUSH
39388: CALL_OW 428
39392: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39393: LD_VAR 0 14
39397: PUSH
39398: LD_VAR 0 9
39402: ARRAY
39403: PUSH
39404: LD_INT 1
39406: ARRAY
39407: PPUSH
39408: LD_VAR 0 14
39412: PUSH
39413: LD_VAR 0 9
39417: ARRAY
39418: PUSH
39419: LD_INT 2
39421: ARRAY
39422: PPUSH
39423: CALL_OW 351
39427: PUSH
39428: LD_VAR 0 14
39432: PUSH
39433: LD_VAR 0 9
39437: ARRAY
39438: PUSH
39439: LD_INT 1
39441: ARRAY
39442: PPUSH
39443: LD_VAR 0 14
39447: PUSH
39448: LD_VAR 0 9
39452: ARRAY
39453: PUSH
39454: LD_INT 2
39456: ARRAY
39457: PPUSH
39458: CALL_OW 488
39462: NOT
39463: OR
39464: PUSH
39465: LD_VAR 0 13
39469: PPUSH
39470: CALL_OW 247
39474: PUSH
39475: LD_INT 3
39477: EQUAL
39478: OR
39479: IFFALSE 39485
// exit ;
39481: POP
39482: POP
39483: GO 40029
// if not tmp then
39485: LD_VAR 0 13
39489: NOT
39490: IFFALSE 39494
// continue ;
39492: GO 39350
// result := true ;
39494: LD_ADDR_VAR 0 8
39498: PUSH
39499: LD_INT 1
39501: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39502: LD_VAR 0 6
39506: PUSH
39507: LD_VAR 0 13
39511: PPUSH
39512: CALL_OW 247
39516: PUSH
39517: LD_INT 2
39519: EQUAL
39520: AND
39521: PUSH
39522: LD_VAR 0 13
39526: PPUSH
39527: CALL_OW 263
39531: PUSH
39532: LD_INT 1
39534: EQUAL
39535: AND
39536: IFFALSE 39700
// begin if IsDrivenBy ( tmp ) then
39538: LD_VAR 0 13
39542: PPUSH
39543: CALL_OW 311
39547: IFFALSE 39551
// continue ;
39549: GO 39350
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39551: LD_VAR 0 6
39555: PPUSH
39556: LD_INT 3
39558: PUSH
39559: LD_INT 60
39561: PUSH
39562: EMPTY
39563: LIST
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 3
39571: PUSH
39572: LD_INT 55
39574: PUSH
39575: EMPTY
39576: LIST
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PPUSH
39586: CALL_OW 72
39590: IFFALSE 39698
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39592: LD_ADDR_VAR 0 18
39596: PUSH
39597: LD_VAR 0 6
39601: PPUSH
39602: LD_INT 3
39604: PUSH
39605: LD_INT 60
39607: PUSH
39608: EMPTY
39609: LIST
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 3
39617: PUSH
39618: LD_INT 55
39620: PUSH
39621: EMPTY
39622: LIST
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PPUSH
39632: CALL_OW 72
39636: PUSH
39637: LD_INT 1
39639: ARRAY
39640: ST_TO_ADDR
// if IsInUnit ( driver ) then
39641: LD_VAR 0 18
39645: PPUSH
39646: CALL_OW 310
39650: IFFALSE 39661
// ComExit ( driver ) ;
39652: LD_VAR 0 18
39656: PPUSH
39657: CALL 64950 0 1
// AddComEnterUnit ( driver , tmp ) ;
39661: LD_VAR 0 18
39665: PPUSH
39666: LD_VAR 0 13
39670: PPUSH
39671: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39675: LD_VAR 0 18
39679: PPUSH
39680: LD_VAR 0 7
39684: PPUSH
39685: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39689: LD_VAR 0 18
39693: PPUSH
39694: CALL_OW 181
// end ; continue ;
39698: GO 39350
// end ; if not cleaners or not tmp in cleaners then
39700: LD_VAR 0 6
39704: NOT
39705: PUSH
39706: LD_VAR 0 13
39710: PUSH
39711: LD_VAR 0 6
39715: IN
39716: NOT
39717: OR
39718: IFFALSE 40025
// begin if dep then
39720: LD_VAR 0 17
39724: IFFALSE 39860
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39726: LD_ADDR_VAR 0 16
39730: PUSH
39731: LD_VAR 0 17
39735: PUSH
39736: LD_INT 1
39738: ARRAY
39739: PPUSH
39740: CALL_OW 250
39744: PPUSH
39745: LD_VAR 0 17
39749: PUSH
39750: LD_INT 1
39752: ARRAY
39753: PPUSH
39754: CALL_OW 254
39758: PPUSH
39759: LD_INT 5
39761: PPUSH
39762: CALL_OW 272
39766: PUSH
39767: LD_VAR 0 17
39771: PUSH
39772: LD_INT 1
39774: ARRAY
39775: PPUSH
39776: CALL_OW 251
39780: PPUSH
39781: LD_VAR 0 17
39785: PUSH
39786: LD_INT 1
39788: ARRAY
39789: PPUSH
39790: CALL_OW 254
39794: PPUSH
39795: LD_INT 5
39797: PPUSH
39798: CALL_OW 273
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39807: LD_VAR 0 16
39811: PUSH
39812: LD_INT 1
39814: ARRAY
39815: PPUSH
39816: LD_VAR 0 16
39820: PUSH
39821: LD_INT 2
39823: ARRAY
39824: PPUSH
39825: CALL_OW 488
39829: IFFALSE 39860
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39831: LD_VAR 0 13
39835: PPUSH
39836: LD_VAR 0 16
39840: PUSH
39841: LD_INT 1
39843: ARRAY
39844: PPUSH
39845: LD_VAR 0 16
39849: PUSH
39850: LD_INT 2
39852: ARRAY
39853: PPUSH
39854: CALL_OW 111
// continue ;
39858: GO 39350
// end ; end ; r := GetDir ( tmp ) ;
39860: LD_ADDR_VAR 0 15
39864: PUSH
39865: LD_VAR 0 13
39869: PPUSH
39870: CALL_OW 254
39874: ST_TO_ADDR
// if r = 5 then
39875: LD_VAR 0 15
39879: PUSH
39880: LD_INT 5
39882: EQUAL
39883: IFFALSE 39893
// r := 0 ;
39885: LD_ADDR_VAR 0 15
39889: PUSH
39890: LD_INT 0
39892: ST_TO_ADDR
// for j = r to 5 do
39893: LD_ADDR_VAR 0 10
39897: PUSH
39898: DOUBLE
39899: LD_VAR 0 15
39903: DEC
39904: ST_TO_ADDR
39905: LD_INT 5
39907: PUSH
39908: FOR_TO
39909: IFFALSE 40023
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39911: LD_ADDR_VAR 0 11
39915: PUSH
39916: LD_VAR 0 13
39920: PPUSH
39921: CALL_OW 250
39925: PPUSH
39926: LD_VAR 0 10
39930: PPUSH
39931: LD_INT 2
39933: PPUSH
39934: CALL_OW 272
39938: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39939: LD_ADDR_VAR 0 12
39943: PUSH
39944: LD_VAR 0 13
39948: PPUSH
39949: CALL_OW 251
39953: PPUSH
39954: LD_VAR 0 10
39958: PPUSH
39959: LD_INT 2
39961: PPUSH
39962: CALL_OW 273
39966: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39967: LD_VAR 0 11
39971: PPUSH
39972: LD_VAR 0 12
39976: PPUSH
39977: CALL_OW 488
39981: PUSH
39982: LD_VAR 0 11
39986: PPUSH
39987: LD_VAR 0 12
39991: PPUSH
39992: CALL_OW 428
39996: NOT
39997: AND
39998: IFFALSE 40021
// begin ComMoveXY ( tmp , _x , _y ) ;
40000: LD_VAR 0 13
40004: PPUSH
40005: LD_VAR 0 11
40009: PPUSH
40010: LD_VAR 0 12
40014: PPUSH
40015: CALL_OW 111
// break ;
40019: GO 40023
// end ; end ;
40021: GO 39908
40023: POP
40024: POP
// end ; end ;
40025: GO 39350
40027: POP
40028: POP
// end ;
40029: LD_VAR 0 8
40033: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40034: LD_INT 0
40036: PPUSH
// result := true ;
40037: LD_ADDR_VAR 0 3
40041: PUSH
40042: LD_INT 1
40044: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40045: LD_VAR 0 2
40049: PUSH
40050: LD_INT 24
40052: DOUBLE
40053: EQUAL
40054: IFTRUE 40064
40056: LD_INT 33
40058: DOUBLE
40059: EQUAL
40060: IFTRUE 40064
40062: GO 40089
40064: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40065: LD_ADDR_VAR 0 3
40069: PUSH
40070: LD_INT 32
40072: PPUSH
40073: LD_VAR 0 1
40077: PPUSH
40078: CALL_OW 321
40082: PUSH
40083: LD_INT 2
40085: EQUAL
40086: ST_TO_ADDR
40087: GO 40405
40089: LD_INT 20
40091: DOUBLE
40092: EQUAL
40093: IFTRUE 40097
40095: GO 40122
40097: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40098: LD_ADDR_VAR 0 3
40102: PUSH
40103: LD_INT 6
40105: PPUSH
40106: LD_VAR 0 1
40110: PPUSH
40111: CALL_OW 321
40115: PUSH
40116: LD_INT 2
40118: EQUAL
40119: ST_TO_ADDR
40120: GO 40405
40122: LD_INT 22
40124: DOUBLE
40125: EQUAL
40126: IFTRUE 40136
40128: LD_INT 36
40130: DOUBLE
40131: EQUAL
40132: IFTRUE 40136
40134: GO 40161
40136: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40137: LD_ADDR_VAR 0 3
40141: PUSH
40142: LD_INT 15
40144: PPUSH
40145: LD_VAR 0 1
40149: PPUSH
40150: CALL_OW 321
40154: PUSH
40155: LD_INT 2
40157: EQUAL
40158: ST_TO_ADDR
40159: GO 40405
40161: LD_INT 30
40163: DOUBLE
40164: EQUAL
40165: IFTRUE 40169
40167: GO 40194
40169: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40170: LD_ADDR_VAR 0 3
40174: PUSH
40175: LD_INT 20
40177: PPUSH
40178: LD_VAR 0 1
40182: PPUSH
40183: CALL_OW 321
40187: PUSH
40188: LD_INT 2
40190: EQUAL
40191: ST_TO_ADDR
40192: GO 40405
40194: LD_INT 28
40196: DOUBLE
40197: EQUAL
40198: IFTRUE 40208
40200: LD_INT 21
40202: DOUBLE
40203: EQUAL
40204: IFTRUE 40208
40206: GO 40233
40208: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40209: LD_ADDR_VAR 0 3
40213: PUSH
40214: LD_INT 21
40216: PPUSH
40217: LD_VAR 0 1
40221: PPUSH
40222: CALL_OW 321
40226: PUSH
40227: LD_INT 2
40229: EQUAL
40230: ST_TO_ADDR
40231: GO 40405
40233: LD_INT 16
40235: DOUBLE
40236: EQUAL
40237: IFTRUE 40241
40239: GO 40266
40241: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40242: LD_ADDR_VAR 0 3
40246: PUSH
40247: LD_INT 84
40249: PPUSH
40250: LD_VAR 0 1
40254: PPUSH
40255: CALL_OW 321
40259: PUSH
40260: LD_INT 2
40262: EQUAL
40263: ST_TO_ADDR
40264: GO 40405
40266: LD_INT 19
40268: DOUBLE
40269: EQUAL
40270: IFTRUE 40280
40272: LD_INT 23
40274: DOUBLE
40275: EQUAL
40276: IFTRUE 40280
40278: GO 40305
40280: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40281: LD_ADDR_VAR 0 3
40285: PUSH
40286: LD_INT 83
40288: PPUSH
40289: LD_VAR 0 1
40293: PPUSH
40294: CALL_OW 321
40298: PUSH
40299: LD_INT 2
40301: EQUAL
40302: ST_TO_ADDR
40303: GO 40405
40305: LD_INT 17
40307: DOUBLE
40308: EQUAL
40309: IFTRUE 40313
40311: GO 40338
40313: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40314: LD_ADDR_VAR 0 3
40318: PUSH
40319: LD_INT 39
40321: PPUSH
40322: LD_VAR 0 1
40326: PPUSH
40327: CALL_OW 321
40331: PUSH
40332: LD_INT 2
40334: EQUAL
40335: ST_TO_ADDR
40336: GO 40405
40338: LD_INT 18
40340: DOUBLE
40341: EQUAL
40342: IFTRUE 40346
40344: GO 40371
40346: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40347: LD_ADDR_VAR 0 3
40351: PUSH
40352: LD_INT 40
40354: PPUSH
40355: LD_VAR 0 1
40359: PPUSH
40360: CALL_OW 321
40364: PUSH
40365: LD_INT 2
40367: EQUAL
40368: ST_TO_ADDR
40369: GO 40405
40371: LD_INT 27
40373: DOUBLE
40374: EQUAL
40375: IFTRUE 40379
40377: GO 40404
40379: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40380: LD_ADDR_VAR 0 3
40384: PUSH
40385: LD_INT 35
40387: PPUSH
40388: LD_VAR 0 1
40392: PPUSH
40393: CALL_OW 321
40397: PUSH
40398: LD_INT 2
40400: EQUAL
40401: ST_TO_ADDR
40402: GO 40405
40404: POP
// end ;
40405: LD_VAR 0 3
40409: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40410: LD_INT 0
40412: PPUSH
40413: PPUSH
40414: PPUSH
40415: PPUSH
40416: PPUSH
40417: PPUSH
40418: PPUSH
40419: PPUSH
40420: PPUSH
40421: PPUSH
40422: PPUSH
// result := false ;
40423: LD_ADDR_VAR 0 6
40427: PUSH
40428: LD_INT 0
40430: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40431: LD_VAR 0 1
40435: NOT
40436: PUSH
40437: LD_VAR 0 1
40441: PPUSH
40442: CALL_OW 266
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: IN
40457: NOT
40458: OR
40459: PUSH
40460: LD_VAR 0 2
40464: NOT
40465: OR
40466: PUSH
40467: LD_VAR 0 5
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: LD_INT 3
40483: PUSH
40484: LD_INT 4
40486: PUSH
40487: LD_INT 5
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: IN
40498: NOT
40499: OR
40500: PUSH
40501: LD_VAR 0 3
40505: PPUSH
40506: LD_VAR 0 4
40510: PPUSH
40511: CALL_OW 488
40515: NOT
40516: OR
40517: IFFALSE 40521
// exit ;
40519: GO 41257
// side := GetSide ( depot ) ;
40521: LD_ADDR_VAR 0 9
40525: PUSH
40526: LD_VAR 0 1
40530: PPUSH
40531: CALL_OW 255
40535: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40536: LD_VAR 0 9
40540: PPUSH
40541: LD_VAR 0 2
40545: PPUSH
40546: CALL 40034 0 2
40550: NOT
40551: IFFALSE 40555
// exit ;
40553: GO 41257
// pom := GetBase ( depot ) ;
40555: LD_ADDR_VAR 0 10
40559: PUSH
40560: LD_VAR 0 1
40564: PPUSH
40565: CALL_OW 274
40569: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40570: LD_ADDR_VAR 0 11
40574: PUSH
40575: LD_VAR 0 2
40579: PPUSH
40580: LD_VAR 0 1
40584: PPUSH
40585: CALL_OW 248
40589: PPUSH
40590: CALL_OW 450
40594: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40595: LD_VAR 0 10
40599: PPUSH
40600: LD_INT 1
40602: PPUSH
40603: CALL_OW 275
40607: PUSH
40608: LD_VAR 0 11
40612: PUSH
40613: LD_INT 1
40615: ARRAY
40616: GREATEREQUAL
40617: PUSH
40618: LD_VAR 0 10
40622: PPUSH
40623: LD_INT 2
40625: PPUSH
40626: CALL_OW 275
40630: PUSH
40631: LD_VAR 0 11
40635: PUSH
40636: LD_INT 2
40638: ARRAY
40639: GREATEREQUAL
40640: AND
40641: PUSH
40642: LD_VAR 0 10
40646: PPUSH
40647: LD_INT 3
40649: PPUSH
40650: CALL_OW 275
40654: PUSH
40655: LD_VAR 0 11
40659: PUSH
40660: LD_INT 3
40662: ARRAY
40663: GREATEREQUAL
40664: AND
40665: NOT
40666: IFFALSE 40670
// exit ;
40668: GO 41257
// if GetBType ( depot ) = b_depot then
40670: LD_VAR 0 1
40674: PPUSH
40675: CALL_OW 266
40679: PUSH
40680: LD_INT 0
40682: EQUAL
40683: IFFALSE 40695
// dist := 28 else
40685: LD_ADDR_VAR 0 14
40689: PUSH
40690: LD_INT 28
40692: ST_TO_ADDR
40693: GO 40703
// dist := 36 ;
40695: LD_ADDR_VAR 0 14
40699: PUSH
40700: LD_INT 36
40702: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40703: LD_VAR 0 1
40707: PPUSH
40708: LD_VAR 0 3
40712: PPUSH
40713: LD_VAR 0 4
40717: PPUSH
40718: CALL_OW 297
40722: PUSH
40723: LD_VAR 0 14
40727: GREATER
40728: IFFALSE 40732
// exit ;
40730: GO 41257
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40732: LD_ADDR_VAR 0 12
40736: PUSH
40737: LD_VAR 0 2
40741: PPUSH
40742: LD_VAR 0 3
40746: PPUSH
40747: LD_VAR 0 4
40751: PPUSH
40752: LD_VAR 0 5
40756: PPUSH
40757: LD_VAR 0 1
40761: PPUSH
40762: CALL_OW 248
40766: PPUSH
40767: LD_INT 0
40769: PPUSH
40770: CALL 41262 0 6
40774: ST_TO_ADDR
// if not hexes then
40775: LD_VAR 0 12
40779: NOT
40780: IFFALSE 40784
// exit ;
40782: GO 41257
// hex := GetHexInfo ( x , y ) ;
40784: LD_ADDR_VAR 0 15
40788: PUSH
40789: LD_VAR 0 3
40793: PPUSH
40794: LD_VAR 0 4
40798: PPUSH
40799: CALL_OW 546
40803: ST_TO_ADDR
// if hex [ 1 ] then
40804: LD_VAR 0 15
40808: PUSH
40809: LD_INT 1
40811: ARRAY
40812: IFFALSE 40816
// exit ;
40814: GO 41257
// height := hex [ 2 ] ;
40816: LD_ADDR_VAR 0 13
40820: PUSH
40821: LD_VAR 0 15
40825: PUSH
40826: LD_INT 2
40828: ARRAY
40829: ST_TO_ADDR
// for i = 1 to hexes do
40830: LD_ADDR_VAR 0 7
40834: PUSH
40835: DOUBLE
40836: LD_INT 1
40838: DEC
40839: ST_TO_ADDR
40840: LD_VAR 0 12
40844: PUSH
40845: FOR_TO
40846: IFFALSE 41176
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40848: LD_VAR 0 12
40852: PUSH
40853: LD_VAR 0 7
40857: ARRAY
40858: PUSH
40859: LD_INT 1
40861: ARRAY
40862: PPUSH
40863: LD_VAR 0 12
40867: PUSH
40868: LD_VAR 0 7
40872: ARRAY
40873: PUSH
40874: LD_INT 2
40876: ARRAY
40877: PPUSH
40878: CALL_OW 488
40882: NOT
40883: PUSH
40884: LD_VAR 0 12
40888: PUSH
40889: LD_VAR 0 7
40893: ARRAY
40894: PUSH
40895: LD_INT 1
40897: ARRAY
40898: PPUSH
40899: LD_VAR 0 12
40903: PUSH
40904: LD_VAR 0 7
40908: ARRAY
40909: PUSH
40910: LD_INT 2
40912: ARRAY
40913: PPUSH
40914: CALL_OW 428
40918: PUSH
40919: LD_INT 0
40921: GREATER
40922: OR
40923: PUSH
40924: LD_VAR 0 12
40928: PUSH
40929: LD_VAR 0 7
40933: ARRAY
40934: PUSH
40935: LD_INT 1
40937: ARRAY
40938: PPUSH
40939: LD_VAR 0 12
40943: PUSH
40944: LD_VAR 0 7
40948: ARRAY
40949: PUSH
40950: LD_INT 2
40952: ARRAY
40953: PPUSH
40954: CALL_OW 351
40958: OR
40959: IFFALSE 40965
// exit ;
40961: POP
40962: POP
40963: GO 41257
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40965: LD_ADDR_VAR 0 8
40969: PUSH
40970: LD_VAR 0 12
40974: PUSH
40975: LD_VAR 0 7
40979: ARRAY
40980: PUSH
40981: LD_INT 1
40983: ARRAY
40984: PPUSH
40985: LD_VAR 0 12
40989: PUSH
40990: LD_VAR 0 7
40994: ARRAY
40995: PUSH
40996: LD_INT 2
40998: ARRAY
40999: PPUSH
41000: CALL_OW 546
41004: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41005: LD_VAR 0 8
41009: PUSH
41010: LD_INT 1
41012: ARRAY
41013: PUSH
41014: LD_VAR 0 8
41018: PUSH
41019: LD_INT 2
41021: ARRAY
41022: PUSH
41023: LD_VAR 0 13
41027: PUSH
41028: LD_INT 2
41030: PLUS
41031: GREATER
41032: OR
41033: PUSH
41034: LD_VAR 0 8
41038: PUSH
41039: LD_INT 2
41041: ARRAY
41042: PUSH
41043: LD_VAR 0 13
41047: PUSH
41048: LD_INT 2
41050: MINUS
41051: LESS
41052: OR
41053: PUSH
41054: LD_VAR 0 8
41058: PUSH
41059: LD_INT 3
41061: ARRAY
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: LD_INT 8
41068: PUSH
41069: LD_INT 9
41071: PUSH
41072: LD_INT 10
41074: PUSH
41075: LD_INT 11
41077: PUSH
41078: LD_INT 12
41080: PUSH
41081: LD_INT 13
41083: PUSH
41084: LD_INT 16
41086: PUSH
41087: LD_INT 17
41089: PUSH
41090: LD_INT 18
41092: PUSH
41093: LD_INT 19
41095: PUSH
41096: LD_INT 20
41098: PUSH
41099: LD_INT 21
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: IN
41117: NOT
41118: OR
41119: PUSH
41120: LD_VAR 0 8
41124: PUSH
41125: LD_INT 5
41127: ARRAY
41128: NOT
41129: OR
41130: PUSH
41131: LD_VAR 0 8
41135: PUSH
41136: LD_INT 6
41138: ARRAY
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: LD_INT 2
41145: PUSH
41146: LD_INT 7
41148: PUSH
41149: LD_INT 9
41151: PUSH
41152: LD_INT 10
41154: PUSH
41155: LD_INT 11
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: IN
41166: NOT
41167: OR
41168: IFFALSE 41174
// exit ;
41170: POP
41171: POP
41172: GO 41257
// end ;
41174: GO 40845
41176: POP
41177: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41178: LD_VAR 0 9
41182: PPUSH
41183: LD_VAR 0 3
41187: PPUSH
41188: LD_VAR 0 4
41192: PPUSH
41193: LD_INT 20
41195: PPUSH
41196: CALL 33209 0 4
41200: PUSH
41201: LD_INT 4
41203: ARRAY
41204: IFFALSE 41208
// exit ;
41206: GO 41257
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41208: LD_VAR 0 2
41212: PUSH
41213: LD_INT 29
41215: PUSH
41216: LD_INT 30
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: IN
41223: PUSH
41224: LD_VAR 0 3
41228: PPUSH
41229: LD_VAR 0 4
41233: PPUSH
41234: LD_VAR 0 9
41238: PPUSH
41239: CALL_OW 440
41243: NOT
41244: AND
41245: IFFALSE 41249
// exit ;
41247: GO 41257
// result := true ;
41249: LD_ADDR_VAR 0 6
41253: PUSH
41254: LD_INT 1
41256: ST_TO_ADDR
// end ;
41257: LD_VAR 0 6
41261: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41262: LD_INT 0
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
41268: PPUSH
41269: PPUSH
41270: PPUSH
41271: PPUSH
41272: PPUSH
41273: PPUSH
41274: PPUSH
41275: PPUSH
41276: PPUSH
41277: PPUSH
41278: PPUSH
41279: PPUSH
41280: PPUSH
41281: PPUSH
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
41293: PPUSH
41294: PPUSH
41295: PPUSH
41296: PPUSH
41297: PPUSH
41298: PPUSH
41299: PPUSH
41300: PPUSH
41301: PPUSH
41302: PPUSH
41303: PPUSH
41304: PPUSH
41305: PPUSH
41306: PPUSH
41307: PPUSH
41308: PPUSH
41309: PPUSH
41310: PPUSH
41311: PPUSH
41312: PPUSH
41313: PPUSH
41314: PPUSH
41315: PPUSH
41316: PPUSH
41317: PPUSH
41318: PPUSH
41319: PPUSH
41320: PPUSH
41321: PPUSH
// result = [ ] ;
41322: LD_ADDR_VAR 0 7
41326: PUSH
41327: EMPTY
41328: ST_TO_ADDR
// temp_list = [ ] ;
41329: LD_ADDR_VAR 0 9
41333: PUSH
41334: EMPTY
41335: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41336: LD_VAR 0 4
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: LD_INT 3
41352: PUSH
41353: LD_INT 4
41355: PUSH
41356: LD_INT 5
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: IN
41367: NOT
41368: PUSH
41369: LD_VAR 0 1
41373: PUSH
41374: LD_INT 0
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: IN
41384: PUSH
41385: LD_VAR 0 5
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: LD_INT 3
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: LIST
41403: IN
41404: NOT
41405: AND
41406: OR
41407: IFFALSE 41411
// exit ;
41409: GO 59802
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41411: LD_VAR 0 1
41415: PUSH
41416: LD_INT 6
41418: PUSH
41419: LD_INT 7
41421: PUSH
41422: LD_INT 8
41424: PUSH
41425: LD_INT 13
41427: PUSH
41428: LD_INT 12
41430: PUSH
41431: LD_INT 15
41433: PUSH
41434: LD_INT 11
41436: PUSH
41437: LD_INT 14
41439: PUSH
41440: LD_INT 10
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: IN
41454: IFFALSE 41464
// btype = b_lab ;
41456: LD_ADDR_VAR 0 1
41460: PUSH
41461: LD_INT 6
41463: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41464: LD_VAR 0 6
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: LD_INT 1
41474: PUSH
41475: LD_INT 2
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: LIST
41482: IN
41483: NOT
41484: PUSH
41485: LD_VAR 0 1
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: LD_INT 3
41501: PUSH
41502: LD_INT 6
41504: PUSH
41505: LD_INT 36
41507: PUSH
41508: LD_INT 4
41510: PUSH
41511: LD_INT 5
41513: PUSH
41514: LD_INT 31
41516: PUSH
41517: LD_INT 32
41519: PUSH
41520: LD_INT 33
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: IN
41536: NOT
41537: PUSH
41538: LD_VAR 0 6
41542: PUSH
41543: LD_INT 1
41545: EQUAL
41546: AND
41547: OR
41548: PUSH
41549: LD_VAR 0 1
41553: PUSH
41554: LD_INT 2
41556: PUSH
41557: LD_INT 3
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: IN
41564: NOT
41565: PUSH
41566: LD_VAR 0 6
41570: PUSH
41571: LD_INT 2
41573: EQUAL
41574: AND
41575: OR
41576: IFFALSE 41586
// mode = 0 ;
41578: LD_ADDR_VAR 0 6
41582: PUSH
41583: LD_INT 0
41585: ST_TO_ADDR
// case mode of 0 :
41586: LD_VAR 0 6
41590: PUSH
41591: LD_INT 0
41593: DOUBLE
41594: EQUAL
41595: IFTRUE 41599
41597: GO 53052
41599: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41600: LD_ADDR_VAR 0 11
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: LD_INT 2
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 2
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: LD_INT 2
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: LD_INT 2
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: LD_INT 3
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: LD_INT 3
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 1
41766: NEG
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41793: LD_ADDR_VAR 0 12
41797: PUSH
41798: LD_INT 0
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 1
41831: PUSH
41832: LD_INT 1
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 2
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 2
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 2
41939: NEG
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 3
41950: NEG
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 3
41961: NEG
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41989: LD_ADDR_VAR 0 13
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 0
42006: PUSH
42007: LD_INT 1
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: LD_INT 2
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 2
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 2
42092: PUSH
42093: LD_INT 2
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: LD_INT 2
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 2
42112: NEG
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: LD_INT 2
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: LD_INT 3
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 3
42148: NEG
42149: PUSH
42150: LD_INT 2
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 3
42160: NEG
42161: PUSH
42162: LD_INT 3
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42188: LD_ADDR_VAR 0 14
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 1
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: LD_INT 1
42261: NEG
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: LD_INT 2
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: LD_INT 2
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 1
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: LD_INT 2
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 1
42323: NEG
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: LD_INT 3
42338: NEG
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: LD_INT 3
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: LD_INT 2
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42384: LD_ADDR_VAR 0 15
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: LD_INT 1
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: NEG
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: LD_INT 1
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 2
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 2
42507: NEG
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 2
42518: NEG
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 3
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 3
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42577: LD_ADDR_VAR 0 16
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 2
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: LD_INT 2
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: LD_INT 2
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 2
42712: NEG
42713: PUSH
42714: LD_INT 2
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 3
42724: PUSH
42725: LD_INT 2
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 3
42734: PUSH
42735: LD_INT 3
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: LD_INT 3
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42770: LD_ADDR_VAR 0 17
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: NEG
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: LD_INT 2
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: LD_INT 2
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 2
42895: PUSH
42896: LD_INT 1
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: LD_INT 2
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: PUSH
42916: LD_INT 2
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: LD_INT 2
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 2
42957: NEG
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 2
42969: NEG
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43000: LD_ADDR_VAR 0 18
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: LD_INT 0
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: NEG
43082: PUSH
43083: LD_INT 2
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: LD_INT 2
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 2
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 2
43135: PUSH
43136: LD_INT 2
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 2
43176: NEG
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: NEG
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 2
43199: NEG
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43230: LD_ADDR_VAR 0 19
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: LD_INT 2
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 2
43406: NEG
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 2
43429: NEG
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43460: LD_ADDR_VAR 0 20
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: LD_INT 1
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: NEG
43530: PUSH
43531: LD_INT 1
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 1
43541: NEG
43542: PUSH
43543: LD_INT 2
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: LD_INT 2
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 1
43564: PUSH
43565: LD_INT 1
43567: NEG
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 2
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 2
43595: PUSH
43596: LD_INT 2
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: LD_INT 2
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 2
43636: NEG
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 2
43647: NEG
43648: PUSH
43649: LD_INT 1
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 2
43659: NEG
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43690: LD_ADDR_VAR 0 21
43694: PUSH
43695: LD_INT 0
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: LD_INT 1
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: LD_INT 2
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: LD_INT 2
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: LD_INT 1
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: LD_INT 2
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 2
43866: NEG
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 2
43877: NEG
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 2
43889: NEG
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43920: LD_ADDR_VAR 0 22
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: NEG
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: LD_INT 1
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: LD_INT 2
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: LD_INT 2
44016: NEG
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 2
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 2
44096: NEG
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 2
44119: NEG
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44150: LD_ADDR_VAR 0 23
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: LD_INT 1
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: LD_INT 2
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: LD_INT 2
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 2
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: LD_INT 2
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: LD_INT 2
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 2
44326: NEG
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 2
44337: NEG
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: LD_INT 2
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 2
44361: NEG
44362: PUSH
44363: LD_INT 3
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: LD_INT 3
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: LD_INT 2
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44430: LD_ADDR_VAR 0 24
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: LD_INT 2
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: LD_INT 2
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: LD_INT 2
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 2
44606: NEG
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 2
44617: NEG
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: LD_INT 2
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 2
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 3
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 3
44673: PUSH
44674: LD_INT 2
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44706: LD_ADDR_VAR 0 25
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 0
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: LD_INT 1
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: LD_INT 2
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 2
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 2
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 2
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 2
44905: NEG
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 3
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 3
44927: PUSH
44928: LD_INT 2
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: LD_INT 3
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: LD_INT 3
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44980: LD_ADDR_VAR 0 26
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: LD_INT 2
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: LD_INT 2
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 2
45156: NEG
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 2
45167: NEG
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 2
45179: NEG
45180: PUSH
45181: LD_INT 2
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: LD_INT 3
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: LD_INT 3
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 2
45222: NEG
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45256: LD_ADDR_VAR 0 27
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: LD_INT 2
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: NEG
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: NEG
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 2
45478: NEG
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 3
45489: NEG
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 3
45501: NEG
45502: PUSH
45503: LD_INT 2
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45536: LD_ADDR_VAR 0 28
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: LD_INT 2
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: LD_INT 2
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: LD_INT 2
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: LD_INT 2
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 2
45723: NEG
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 2
45735: NEG
45736: PUSH
45737: LD_INT 2
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 2
45747: NEG
45748: PUSH
45749: LD_INT 3
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 3
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 3
45771: NEG
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 3
45783: NEG
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45818: LD_ADDR_VAR 0 29
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: LD_INT 2
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 2
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 1
45953: PUSH
45954: LD_INT 2
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 2
45984: NEG
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 2
46008: NEG
46009: PUSH
46010: LD_INT 3
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 2
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 3
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: LD_INT 3
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: LD_INT 2
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 3
46062: NEG
46063: PUSH
46064: LD_INT 2
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46097: LD_ADDR_VAR 0 30
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: LD_INT 2
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 2
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: LD_INT 2
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: LD_INT 2
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 2
46263: NEG
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: LD_INT 3
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 3
46309: PUSH
46310: LD_INT 2
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: LD_INT 3
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: NEG
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 3
46340: NEG
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46375: LD_ADDR_VAR 0 31
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: LD_INT 2
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: LD_INT 2
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: NEG
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: LD_INT 2
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: LD_INT 3
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 3
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 3
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 3
46618: NEG
46619: PUSH
46620: LD_INT 2
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46653: LD_ADDR_VAR 0 32
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: LD_INT 2
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: LD_INT 2
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: LD_INT 2
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: LD_INT 2
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: LD_INT 3
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: LD_INT 2
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 3
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: LD_INT 3
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: NEG
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 3
46896: NEG
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46931: LD_ADDR_VAR 0 33
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: LD_INT 2
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: NEG
47110: PUSH
47111: LD_INT 2
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 2
47121: NEG
47122: PUSH
47123: LD_INT 3
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 2
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 3
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: LD_INT 3
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 3
47175: NEG
47176: PUSH
47177: LD_INT 2
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47210: LD_ADDR_VAR 0 34
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 2
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: NEG
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 2
47377: NEG
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 2
47389: NEG
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: LD_INT 3
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 3
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: LD_INT 3
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 3
47455: NEG
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47490: LD_ADDR_VAR 0 35
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 2
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47602: LD_ADDR_VAR 0 36
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 2
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47714: LD_ADDR_VAR 0 37
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47826: LD_ADDR_VAR 0 38
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 2
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47938: LD_ADDR_VAR 0 39
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: LD_INT 2
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: LD_INT 2
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48050: LD_ADDR_VAR 0 40
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48162: LD_ADDR_VAR 0 41
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: LD_INT 2
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: LD_INT 2
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 2
48328: NEG
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 2
48340: NEG
48341: PUSH
48342: LD_INT 2
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 2
48352: NEG
48353: PUSH
48354: LD_INT 3
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 3
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 3
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 3
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 3
48405: PUSH
48406: LD_INT 3
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: LD_INT 3
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: NEG
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 3
48436: NEG
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 3
48447: NEG
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 3
48459: NEG
48460: PUSH
48461: LD_INT 2
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 3
48471: NEG
48472: PUSH
48473: LD_INT 3
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48512: LD_ADDR_VAR 0 42
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 2
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: PUSH
48638: LD_INT 2
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: LD_INT 2
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: LD_INT 2
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 2
48678: NEG
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: LD_INT 2
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: LD_INT 3
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: LD_INT 3
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 3
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: LD_INT 2
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 3
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 3
48758: PUSH
48759: LD_INT 3
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: LD_INT 3
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: LD_INT 3
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: LD_INT 3
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 3
48809: NEG
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 3
48821: NEG
48822: PUSH
48823: LD_INT 3
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48862: LD_ADDR_VAR 0 43
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: LD_INT 2
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: LD_INT 2
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: LD_INT 3
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: LD_INT 3
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: LD_INT 2
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 3
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 3
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: LD_INT 3
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 3
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: LD_INT 2
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 2
49147: NEG
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 3
49158: NEG
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 3
49169: NEG
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49210: LD_ADDR_VAR 0 44
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: NEG
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 2
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 2
49334: PUSH
49335: LD_INT 2
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: LD_INT 1
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: NEG
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: NEG
49401: PUSH
49402: LD_INT 3
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: LD_INT 1
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 3
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 3
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 3
49443: PUSH
49444: LD_INT 2
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 3
49453: PUSH
49454: LD_INT 3
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: LD_INT 3
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 3
49484: NEG
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 3
49495: NEG
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 3
49507: NEG
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 3
49519: NEG
49520: PUSH
49521: LD_INT 3
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49560: LD_ADDR_VAR 0 45
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 2
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 2
49726: NEG
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: NEG
49751: PUSH
49752: LD_INT 3
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: LD_INT 3
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 3
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 3
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 3
49806: PUSH
49807: LD_INT 3
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 2
49816: PUSH
49817: LD_INT 3
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: LD_INT 3
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: LD_INT 3
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: NEG
49847: PUSH
49848: LD_INT 2
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 3
49857: NEG
49858: PUSH
49859: LD_INT 2
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 3
49869: NEG
49870: PUSH
49871: LD_INT 3
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49910: LD_ADDR_VAR 0 46
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: LD_INT 2
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 2
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: LD_INT 3
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: LD_INT 3
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: PUSH
50123: LD_INT 2
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 3
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 3
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 3
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 3
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: LD_INT 2
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 3
50206: NEG
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 3
50217: NEG
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50258: LD_ADDR_VAR 0 47
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: LD_INT 2
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 2
50373: NEG
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 2
50385: NEG
50386: PUSH
50387: LD_INT 2
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50409: LD_ADDR_VAR 0 48
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: LD_INT 2
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: LD_INT 2
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 2
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50556: LD_ADDR_VAR 0 49
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 2
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50700: LD_ADDR_VAR 0 50
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: LD_INT 2
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: LD_INT 2
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50844: LD_ADDR_VAR 0 51
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_INT 2
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 2
50967: NEG
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50991: LD_ADDR_VAR 0 52
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: LD_INT 2
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: NEG
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 2
51095: NEG
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 2
51106: NEG
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 2
51118: NEG
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51142: LD_ADDR_VAR 0 53
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: LD_INT 1
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: LD_INT 2
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: LD_INT 2
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 2
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 2
51329: NEG
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51372: LD_ADDR_VAR 0 54
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: LD_INT 2
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 2
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: LD_INT 2
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 2
51548: NEG
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 2
51559: NEG
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51602: LD_ADDR_VAR 0 55
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: LD_INT 2
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 2
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: NEG
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 2
51789: NEG
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 2
51801: NEG
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51832: LD_ADDR_VAR 0 56
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: LD_INT 2
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 2
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: PUSH
51968: LD_INT 2
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: LD_INT 2
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: NEG
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 2
52019: NEG
52020: PUSH
52021: LD_INT 1
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 2
52031: NEG
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52062: LD_ADDR_VAR 0 57
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: LD_INT 2
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 2
52249: NEG
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52292: LD_ADDR_VAR 0 58
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: LD_INT 2
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 2
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: LD_INT 2
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 2
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 2
52468: NEG
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: LD_INT 2
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52522: LD_ADDR_VAR 0 59
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52610: LD_ADDR_VAR 0 60
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 1
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52698: LD_ADDR_VAR 0 61
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52786: LD_ADDR_VAR 0 62
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52874: LD_ADDR_VAR 0 63
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52962: LD_ADDR_VAR 0 64
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: LD_INT 1
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: ST_TO_ADDR
// end ; 1 :
53050: GO 58947
53052: LD_INT 1
53054: DOUBLE
53055: EQUAL
53056: IFTRUE 53060
53058: GO 55683
53060: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53061: LD_ADDR_VAR 0 11
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: LD_INT 3
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 3
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 2
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: LIST
53104: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53105: LD_ADDR_VAR 0 12
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 3
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: LIST
53145: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53146: LD_ADDR_VAR 0 13
53150: PUSH
53151: LD_INT 3
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 3
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: LD_INT 3
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: LIST
53185: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53186: LD_ADDR_VAR 0 14
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: LD_INT 3
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: LD_INT 3
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: LIST
53226: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53227: LD_ADDR_VAR 0 15
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 3
53245: NEG
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 3
53256: NEG
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: LIST
53270: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53271: LD_ADDR_VAR 0 16
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: LD_INT 3
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 3
53290: NEG
53291: PUSH
53292: LD_INT 2
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 3
53302: NEG
53303: PUSH
53304: LD_INT 3
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: LIST
53316: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53317: LD_ADDR_VAR 0 17
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: LD_INT 3
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 3
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: LD_INT 2
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: LIST
53360: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53361: LD_ADDR_VAR 0 18
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 3
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 3
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: LIST
53401: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53402: LD_ADDR_VAR 0 19
53406: PUSH
53407: LD_INT 3
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 3
53419: PUSH
53420: LD_INT 3
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 2
53429: PUSH
53430: LD_INT 3
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: LIST
53441: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53442: LD_ADDR_VAR 0 20
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: LD_INT 3
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: LD_INT 3
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: LIST
53482: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53483: LD_ADDR_VAR 0 21
53487: PUSH
53488: LD_INT 2
53490: NEG
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 3
53501: NEG
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 3
53512: NEG
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: LIST
53526: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53527: LD_ADDR_VAR 0 22
53531: PUSH
53532: LD_INT 2
53534: NEG
53535: PUSH
53536: LD_INT 3
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 3
53546: NEG
53547: PUSH
53548: LD_INT 2
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 3
53558: NEG
53559: PUSH
53560: LD_INT 3
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: LIST
53572: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53573: LD_ADDR_VAR 0 23
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 3
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 4
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: LD_INT 3
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: LIST
53616: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53617: LD_ADDR_VAR 0 24
53621: PUSH
53622: LD_INT 3
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 3
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 4
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: LIST
53657: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53658: LD_ADDR_VAR 0 25
53662: PUSH
53663: LD_INT 3
53665: PUSH
53666: LD_INT 3
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 4
53675: PUSH
53676: LD_INT 3
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 3
53685: PUSH
53686: LD_INT 4
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: LIST
53697: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53698: LD_ADDR_VAR 0 26
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: LD_INT 3
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: LD_INT 4
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: LD_INT 3
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: LIST
53738: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53739: LD_ADDR_VAR 0 27
53743: PUSH
53744: LD_INT 3
53746: NEG
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 3
53757: NEG
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 4
53768: NEG
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: LIST
53782: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53783: LD_ADDR_VAR 0 28
53787: PUSH
53788: LD_INT 3
53790: NEG
53791: PUSH
53792: LD_INT 3
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 3
53802: NEG
53803: PUSH
53804: LD_INT 4
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 4
53814: NEG
53815: PUSH
53816: LD_INT 3
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: LIST
53828: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53829: LD_ADDR_VAR 0 29
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: LD_INT 3
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: LD_INT 3
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: LD_INT 4
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: LD_INT 4
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 3
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: LD_INT 5
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: LD_INT 5
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: LD_INT 4
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: LD_INT 6
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: LD_INT 6
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: LD_INT 5
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53984: LD_ADDR_VAR 0 30
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 3
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 3
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 4
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 4
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 4
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 5
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 5
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 5
54084: PUSH
54085: LD_INT 1
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 6
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 6
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54127: LD_ADDR_VAR 0 31
54131: PUSH
54132: LD_INT 3
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 3
54144: PUSH
54145: LD_INT 3
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: LD_INT 3
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 4
54164: PUSH
54165: LD_INT 3
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 4
54174: PUSH
54175: LD_INT 4
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 3
54184: PUSH
54185: LD_INT 4
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 5
54194: PUSH
54195: LD_INT 4
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 5
54204: PUSH
54205: LD_INT 5
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 4
54214: PUSH
54215: LD_INT 5
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 6
54224: PUSH
54225: LD_INT 5
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 6
54234: PUSH
54235: LD_INT 6
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 5
54244: PUSH
54245: LD_INT 6
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54266: LD_ADDR_VAR 0 32
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: LD_INT 3
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: LD_INT 3
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: LD_INT 4
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: LD_INT 4
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: NEG
54325: PUSH
54326: LD_INT 3
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: LD_INT 5
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 5
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: LD_INT 4
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 6
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: LD_INT 6
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: LD_INT 5
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54409: LD_ADDR_VAR 0 33
54413: PUSH
54414: LD_INT 2
54416: NEG
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 3
54427: NEG
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 3
54438: NEG
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 3
54450: NEG
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 4
54461: NEG
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 4
54472: NEG
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 4
54484: NEG
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 5
54495: NEG
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 5
54506: NEG
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 5
54518: NEG
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 6
54529: NEG
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 6
54540: NEG
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54564: LD_ADDR_VAR 0 34
54568: PUSH
54569: LD_INT 2
54571: NEG
54572: PUSH
54573: LD_INT 3
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 3
54583: NEG
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 3
54595: NEG
54596: PUSH
54597: LD_INT 3
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 3
54607: NEG
54608: PUSH
54609: LD_INT 4
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 4
54619: NEG
54620: PUSH
54621: LD_INT 3
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 4
54631: NEG
54632: PUSH
54633: LD_INT 4
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 4
54643: NEG
54644: PUSH
54645: LD_INT 5
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 5
54655: NEG
54656: PUSH
54657: LD_INT 4
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 5
54667: NEG
54668: PUSH
54669: LD_INT 5
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 5
54679: NEG
54680: PUSH
54681: LD_INT 6
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 6
54691: NEG
54692: PUSH
54693: LD_INT 5
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 6
54703: NEG
54704: PUSH
54705: LD_INT 6
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54727: LD_ADDR_VAR 0 41
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: LD_INT 3
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: LD_INT 2
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: LIST
54770: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54771: LD_ADDR_VAR 0 42
54775: PUSH
54776: LD_INT 2
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 3
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: LIST
54811: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54812: LD_ADDR_VAR 0 43
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 3
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: LD_INT 3
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: LIST
54851: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54852: LD_ADDR_VAR 0 44
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: LD_INT 2
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: LD_INT 3
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: LIST
54892: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54893: LD_ADDR_VAR 0 45
54897: PUSH
54898: LD_INT 2
54900: NEG
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: NEG
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 3
54922: NEG
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: LIST
54936: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54937: LD_ADDR_VAR 0 46
54941: PUSH
54942: LD_INT 2
54944: NEG
54945: PUSH
54946: LD_INT 2
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: LD_INT 3
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 3
54968: NEG
54969: PUSH
54970: LD_INT 2
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: LIST
54982: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54983: LD_ADDR_VAR 0 47
54987: PUSH
54988: LD_INT 2
54990: NEG
54991: PUSH
54992: LD_INT 3
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: LD_INT 3
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55016: LD_ADDR_VAR 0 48
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 2
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55047: LD_ADDR_VAR 0 49
55051: PUSH
55052: LD_INT 3
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 3
55064: PUSH
55065: LD_INT 2
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55076: LD_ADDR_VAR 0 50
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: LD_INT 3
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55105: LD_ADDR_VAR 0 51
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: LD_INT 2
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 2
55123: NEG
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55136: LD_ADDR_VAR 0 52
55140: PUSH
55141: LD_INT 3
55143: NEG
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 3
55155: NEG
55156: PUSH
55157: LD_INT 2
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55169: LD_ADDR_VAR 0 53
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 3
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: LD_INT 3
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: LIST
55212: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55213: LD_ADDR_VAR 0 54
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 3
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 3
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: LIST
55253: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55254: LD_ADDR_VAR 0 55
55258: PUSH
55259: LD_INT 3
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 3
55271: PUSH
55272: LD_INT 3
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: LD_INT 3
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: LIST
55293: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55294: LD_ADDR_VAR 0 56
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: LD_INT 3
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 3
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: LIST
55334: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55335: LD_ADDR_VAR 0 57
55339: PUSH
55340: LD_INT 2
55342: NEG
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 3
55353: NEG
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 3
55364: NEG
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: LIST
55378: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55379: LD_ADDR_VAR 0 58
55383: PUSH
55384: LD_INT 2
55386: NEG
55387: PUSH
55388: LD_INT 3
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 3
55398: NEG
55399: PUSH
55400: LD_INT 2
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 3
55410: NEG
55411: PUSH
55412: LD_INT 3
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: LIST
55424: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55425: LD_ADDR_VAR 0 59
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: LIST
55468: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55469: LD_ADDR_VAR 0 60
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: LIST
55509: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55510: LD_ADDR_VAR 0 61
55514: PUSH
55515: LD_INT 2
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: LD_INT 2
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: LIST
55549: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55550: LD_ADDR_VAR 0 62
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: LIST
55590: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55591: LD_ADDR_VAR 0 63
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 2
55620: NEG
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: LIST
55634: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55635: LD_ADDR_VAR 0 64
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: LD_INT 2
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: NEG
55667: PUSH
55668: LD_INT 2
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: LIST
55680: ST_TO_ADDR
// end ; 2 :
55681: GO 58947
55683: LD_INT 2
55685: DOUBLE
55686: EQUAL
55687: IFTRUE 55691
55689: GO 58946
55691: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55692: LD_ADDR_VAR 0 29
55696: PUSH
55697: LD_INT 4
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 4
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 5
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 5
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 4
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 3
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 3
55771: PUSH
55772: LD_INT 2
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 5
55782: PUSH
55783: LD_INT 2
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 3
55792: PUSH
55793: LD_INT 3
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 3
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 4
55812: PUSH
55813: LD_INT 3
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 4
55822: PUSH
55823: LD_INT 4
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 3
55832: PUSH
55833: LD_INT 4
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 2
55842: PUSH
55843: LD_INT 3
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: LD_INT 2
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 4
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 2
55872: PUSH
55873: LD_INT 4
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: LD_INT 4
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: LD_INT 3
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: LD_INT 4
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: LD_INT 5
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 5
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 4
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: LD_INT 3
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: LD_INT 5
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: LD_INT 3
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 3
55975: NEG
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 3
55986: NEG
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 3
56020: NEG
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 4
56031: NEG
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 4
56042: NEG
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 4
56054: NEG
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: LD_INT 2
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 4
56077: NEG
56078: PUSH
56079: LD_INT 4
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 4
56089: NEG
56090: PUSH
56091: LD_INT 5
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 3
56101: NEG
56102: PUSH
56103: LD_INT 4
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 3
56113: NEG
56114: PUSH
56115: LD_INT 3
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 4
56125: NEG
56126: PUSH
56127: LD_INT 3
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 5
56137: NEG
56138: PUSH
56139: LD_INT 4
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 5
56149: NEG
56150: PUSH
56151: LD_INT 5
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 3
56161: NEG
56162: PUSH
56163: LD_INT 5
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 5
56173: NEG
56174: PUSH
56175: LD_INT 3
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56230: LD_ADDR_VAR 0 30
56234: PUSH
56235: LD_INT 4
56237: PUSH
56238: LD_INT 4
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 4
56247: PUSH
56248: LD_INT 3
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 5
56257: PUSH
56258: LD_INT 4
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 5
56267: PUSH
56268: LD_INT 5
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 4
56277: PUSH
56278: LD_INT 5
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 3
56287: PUSH
56288: LD_INT 4
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 3
56297: PUSH
56298: LD_INT 3
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 5
56307: PUSH
56308: LD_INT 3
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 3
56317: PUSH
56318: LD_INT 5
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: LD_INT 3
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 2
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: LD_INT 3
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: LD_INT 4
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: LD_INT 4
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: LD_INT 3
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: LD_INT 2
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: LD_INT 4
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 2
56409: NEG
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 4
56420: NEG
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 4
56431: NEG
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 3
56443: NEG
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 3
56454: NEG
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 4
56465: NEG
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 5
56476: NEG
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 5
56487: NEG
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 5
56499: NEG
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 3
56511: NEG
56512: PUSH
56513: LD_INT 2
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 3
56522: NEG
56523: PUSH
56524: LD_INT 3
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 3
56534: NEG
56535: PUSH
56536: LD_INT 4
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: LD_INT 3
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 3
56570: NEG
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 4
56582: NEG
56583: PUSH
56584: LD_INT 3
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 4
56594: NEG
56595: PUSH
56596: LD_INT 4
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 2
56606: NEG
56607: PUSH
56608: LD_INT 4
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 4
56618: NEG
56619: PUSH
56620: LD_INT 2
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: LD_INT 4
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 5
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: LD_INT 4
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: LD_INT 3
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 3
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: NEG
56686: PUSH
56687: LD_INT 4
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: LD_INT 5
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 2
56709: PUSH
56710: LD_INT 3
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: LD_INT 5
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56777: LD_ADDR_VAR 0 31
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: LD_INT 4
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: LD_INT 3
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: LD_INT 4
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: LD_INT 5
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: LD_INT 5
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: LD_INT 4
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: LD_INT 3
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 2
56856: PUSH
56857: LD_INT 5
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 2
56866: NEG
56867: PUSH
56868: LD_INT 3
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 3
56877: NEG
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 3
56888: NEG
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 3
56922: NEG
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 4
56933: NEG
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 4
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 4
56956: NEG
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: LD_INT 2
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 4
56979: NEG
56980: PUSH
56981: LD_INT 4
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 4
56991: NEG
56992: PUSH
56993: LD_INT 5
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: LD_INT 4
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 3
57015: NEG
57016: PUSH
57017: LD_INT 3
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 4
57027: NEG
57028: PUSH
57029: LD_INT 3
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 5
57039: NEG
57040: PUSH
57041: LD_INT 4
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 5
57051: NEG
57052: PUSH
57053: LD_INT 5
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 3
57063: NEG
57064: PUSH
57065: LD_INT 5
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 5
57075: NEG
57076: PUSH
57077: LD_INT 3
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: LD_INT 3
57090: NEG
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: LD_INT 4
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: LD_INT 3
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: LD_INT 2
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: LD_INT 3
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 4
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: LD_INT 4
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 4
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 4
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 5
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 5
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 4
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 3
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 3
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 3
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 5
57272: PUSH
57273: LD_INT 2
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57327: LD_ADDR_VAR 0 32
57331: PUSH
57332: LD_INT 4
57334: NEG
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 4
57345: NEG
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 3
57357: NEG
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 3
57368: NEG
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 4
57379: NEG
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 5
57390: NEG
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 5
57401: NEG
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 5
57413: NEG
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 3
57425: NEG
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 3
57436: NEG
57437: PUSH
57438: LD_INT 3
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 3
57448: NEG
57449: PUSH
57450: LD_INT 4
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: NEG
57461: PUSH
57462: LD_INT 3
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 3
57484: NEG
57485: PUSH
57486: LD_INT 2
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 4
57496: NEG
57497: PUSH
57498: LD_INT 3
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 4
57508: NEG
57509: PUSH
57510: LD_INT 4
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 2
57520: NEG
57521: PUSH
57522: LD_INT 4
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 4
57532: NEG
57533: PUSH
57534: LD_INT 2
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: LD_INT 4
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 5
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 4
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 3
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: LD_INT 3
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 4
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: LD_INT 5
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: LD_INT 3
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: LD_INT 5
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 3
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 3
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 4
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 4
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 3
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 2
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 2
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 4
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 4
57739: PUSH
57740: LD_INT 4
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 4
57749: PUSH
57750: LD_INT 3
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 5
57759: PUSH
57760: LD_INT 4
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 5
57769: PUSH
57770: LD_INT 5
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 4
57779: PUSH
57780: LD_INT 5
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 3
57789: PUSH
57790: LD_INT 4
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 3
57799: PUSH
57800: LD_INT 3
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 5
57809: PUSH
57810: LD_INT 3
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 3
57819: PUSH
57820: LD_INT 5
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57874: LD_ADDR_VAR 0 33
57878: PUSH
57879: LD_INT 4
57881: NEG
57882: PUSH
57883: LD_INT 4
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 4
57893: NEG
57894: PUSH
57895: LD_INT 5
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 3
57905: NEG
57906: PUSH
57907: LD_INT 4
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 3
57917: NEG
57918: PUSH
57919: LD_INT 3
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 4
57929: NEG
57930: PUSH
57931: LD_INT 3
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 5
57941: NEG
57942: PUSH
57943: LD_INT 4
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 5
57953: NEG
57954: PUSH
57955: LD_INT 5
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 3
57965: NEG
57966: PUSH
57967: LD_INT 5
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 5
57977: NEG
57978: PUSH
57979: LD_INT 3
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: LD_INT 3
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: LD_INT 4
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: LD_INT 3
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: LD_INT 3
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: LD_INT 4
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: LD_INT 4
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 4
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 4
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 5
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 5
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 4
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 3
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 3
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 3
58163: PUSH
58164: LD_INT 2
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 5
58174: PUSH
58175: LD_INT 2
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 3
58184: PUSH
58185: LD_INT 3
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 3
58194: PUSH
58195: LD_INT 2
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 4
58204: PUSH
58205: LD_INT 3
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 4
58214: PUSH
58215: LD_INT 4
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 3
58224: PUSH
58225: LD_INT 4
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 2
58234: PUSH
58235: LD_INT 3
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 2
58244: PUSH
58245: LD_INT 2
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 4
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 2
58264: PUSH
58265: LD_INT 4
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: LD_INT 4
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: LD_INT 3
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: LD_INT 4
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 1
58304: PUSH
58305: LD_INT 5
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: LD_INT 5
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: LD_INT 4
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: LD_INT 3
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: LD_INT 5
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 2
58356: NEG
58357: PUSH
58358: LD_INT 3
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58412: LD_ADDR_VAR 0 34
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: LD_INT 4
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: LD_INT 5
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: LD_INT 4
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: LD_INT 3
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: LD_INT 3
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: NEG
58475: PUSH
58476: LD_INT 4
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: LD_INT 5
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 2
58498: PUSH
58499: LD_INT 3
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 2
58509: NEG
58510: PUSH
58511: LD_INT 5
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 3
58521: PUSH
58522: LD_INT 0
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 3
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 4
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 4
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 3
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 2
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 2
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: LD_INT 2
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 4
58604: PUSH
58605: LD_INT 2
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 4
58614: PUSH
58615: LD_INT 4
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 4
58624: PUSH
58625: LD_INT 3
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 5
58634: PUSH
58635: LD_INT 4
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 5
58644: PUSH
58645: LD_INT 5
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 4
58654: PUSH
58655: LD_INT 5
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 3
58664: PUSH
58665: LD_INT 4
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 3
58674: PUSH
58675: LD_INT 3
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 5
58684: PUSH
58685: LD_INT 3
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 3
58694: PUSH
58695: LD_INT 5
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: LD_INT 3
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: LD_INT 2
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: LD_INT 3
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 4
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: LD_INT 4
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 1
58754: NEG
58755: PUSH
58756: LD_INT 3
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: LD_INT 2
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 2
58776: PUSH
58777: LD_INT 4
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 2
58786: NEG
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 4
58797: NEG
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 4
58808: NEG
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 3
58820: NEG
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 3
58831: NEG
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 4
58842: NEG
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 5
58853: NEG
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 5
58864: NEG
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 5
58876: NEG
58877: PUSH
58878: LD_INT 2
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 3
58888: NEG
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: ST_TO_ADDR
// end ; end ;
58944: GO 58947
58946: POP
// case btype of b_depot , b_warehouse :
58947: LD_VAR 0 1
58951: PUSH
58952: LD_INT 0
58954: DOUBLE
58955: EQUAL
58956: IFTRUE 58966
58958: LD_INT 1
58960: DOUBLE
58961: EQUAL
58962: IFTRUE 58966
58964: GO 59167
58966: POP
// case nation of nation_american :
58967: LD_VAR 0 5
58971: PUSH
58972: LD_INT 1
58974: DOUBLE
58975: EQUAL
58976: IFTRUE 58980
58978: GO 59036
58980: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58981: LD_ADDR_VAR 0 9
58985: PUSH
58986: LD_VAR 0 11
58990: PUSH
58991: LD_VAR 0 12
58995: PUSH
58996: LD_VAR 0 13
59000: PUSH
59001: LD_VAR 0 14
59005: PUSH
59006: LD_VAR 0 15
59010: PUSH
59011: LD_VAR 0 16
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: PUSH
59024: LD_VAR 0 4
59028: PUSH
59029: LD_INT 1
59031: PLUS
59032: ARRAY
59033: ST_TO_ADDR
59034: GO 59165
59036: LD_INT 2
59038: DOUBLE
59039: EQUAL
59040: IFTRUE 59044
59042: GO 59100
59044: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59045: LD_ADDR_VAR 0 9
59049: PUSH
59050: LD_VAR 0 17
59054: PUSH
59055: LD_VAR 0 18
59059: PUSH
59060: LD_VAR 0 19
59064: PUSH
59065: LD_VAR 0 20
59069: PUSH
59070: LD_VAR 0 21
59074: PUSH
59075: LD_VAR 0 22
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: PUSH
59088: LD_VAR 0 4
59092: PUSH
59093: LD_INT 1
59095: PLUS
59096: ARRAY
59097: ST_TO_ADDR
59098: GO 59165
59100: LD_INT 3
59102: DOUBLE
59103: EQUAL
59104: IFTRUE 59108
59106: GO 59164
59108: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59109: LD_ADDR_VAR 0 9
59113: PUSH
59114: LD_VAR 0 23
59118: PUSH
59119: LD_VAR 0 24
59123: PUSH
59124: LD_VAR 0 25
59128: PUSH
59129: LD_VAR 0 26
59133: PUSH
59134: LD_VAR 0 27
59138: PUSH
59139: LD_VAR 0 28
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: PUSH
59152: LD_VAR 0 4
59156: PUSH
59157: LD_INT 1
59159: PLUS
59160: ARRAY
59161: ST_TO_ADDR
59162: GO 59165
59164: POP
59165: GO 59720
59167: LD_INT 2
59169: DOUBLE
59170: EQUAL
59171: IFTRUE 59181
59173: LD_INT 3
59175: DOUBLE
59176: EQUAL
59177: IFTRUE 59181
59179: GO 59237
59181: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59182: LD_ADDR_VAR 0 9
59186: PUSH
59187: LD_VAR 0 29
59191: PUSH
59192: LD_VAR 0 30
59196: PUSH
59197: LD_VAR 0 31
59201: PUSH
59202: LD_VAR 0 32
59206: PUSH
59207: LD_VAR 0 33
59211: PUSH
59212: LD_VAR 0 34
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: PUSH
59225: LD_VAR 0 4
59229: PUSH
59230: LD_INT 1
59232: PLUS
59233: ARRAY
59234: ST_TO_ADDR
59235: GO 59720
59237: LD_INT 16
59239: DOUBLE
59240: EQUAL
59241: IFTRUE 59299
59243: LD_INT 17
59245: DOUBLE
59246: EQUAL
59247: IFTRUE 59299
59249: LD_INT 18
59251: DOUBLE
59252: EQUAL
59253: IFTRUE 59299
59255: LD_INT 19
59257: DOUBLE
59258: EQUAL
59259: IFTRUE 59299
59261: LD_INT 22
59263: DOUBLE
59264: EQUAL
59265: IFTRUE 59299
59267: LD_INT 20
59269: DOUBLE
59270: EQUAL
59271: IFTRUE 59299
59273: LD_INT 21
59275: DOUBLE
59276: EQUAL
59277: IFTRUE 59299
59279: LD_INT 23
59281: DOUBLE
59282: EQUAL
59283: IFTRUE 59299
59285: LD_INT 24
59287: DOUBLE
59288: EQUAL
59289: IFTRUE 59299
59291: LD_INT 25
59293: DOUBLE
59294: EQUAL
59295: IFTRUE 59299
59297: GO 59355
59299: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59300: LD_ADDR_VAR 0 9
59304: PUSH
59305: LD_VAR 0 35
59309: PUSH
59310: LD_VAR 0 36
59314: PUSH
59315: LD_VAR 0 37
59319: PUSH
59320: LD_VAR 0 38
59324: PUSH
59325: LD_VAR 0 39
59329: PUSH
59330: LD_VAR 0 40
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: PUSH
59343: LD_VAR 0 4
59347: PUSH
59348: LD_INT 1
59350: PLUS
59351: ARRAY
59352: ST_TO_ADDR
59353: GO 59720
59355: LD_INT 6
59357: DOUBLE
59358: EQUAL
59359: IFTRUE 59411
59361: LD_INT 7
59363: DOUBLE
59364: EQUAL
59365: IFTRUE 59411
59367: LD_INT 8
59369: DOUBLE
59370: EQUAL
59371: IFTRUE 59411
59373: LD_INT 13
59375: DOUBLE
59376: EQUAL
59377: IFTRUE 59411
59379: LD_INT 12
59381: DOUBLE
59382: EQUAL
59383: IFTRUE 59411
59385: LD_INT 15
59387: DOUBLE
59388: EQUAL
59389: IFTRUE 59411
59391: LD_INT 11
59393: DOUBLE
59394: EQUAL
59395: IFTRUE 59411
59397: LD_INT 14
59399: DOUBLE
59400: EQUAL
59401: IFTRUE 59411
59403: LD_INT 10
59405: DOUBLE
59406: EQUAL
59407: IFTRUE 59411
59409: GO 59467
59411: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59412: LD_ADDR_VAR 0 9
59416: PUSH
59417: LD_VAR 0 41
59421: PUSH
59422: LD_VAR 0 42
59426: PUSH
59427: LD_VAR 0 43
59431: PUSH
59432: LD_VAR 0 44
59436: PUSH
59437: LD_VAR 0 45
59441: PUSH
59442: LD_VAR 0 46
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: PUSH
59455: LD_VAR 0 4
59459: PUSH
59460: LD_INT 1
59462: PLUS
59463: ARRAY
59464: ST_TO_ADDR
59465: GO 59720
59467: LD_INT 36
59469: DOUBLE
59470: EQUAL
59471: IFTRUE 59475
59473: GO 59531
59475: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59476: LD_ADDR_VAR 0 9
59480: PUSH
59481: LD_VAR 0 47
59485: PUSH
59486: LD_VAR 0 48
59490: PUSH
59491: LD_VAR 0 49
59495: PUSH
59496: LD_VAR 0 50
59500: PUSH
59501: LD_VAR 0 51
59505: PUSH
59506: LD_VAR 0 52
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: PUSH
59519: LD_VAR 0 4
59523: PUSH
59524: LD_INT 1
59526: PLUS
59527: ARRAY
59528: ST_TO_ADDR
59529: GO 59720
59531: LD_INT 4
59533: DOUBLE
59534: EQUAL
59535: IFTRUE 59557
59537: LD_INT 5
59539: DOUBLE
59540: EQUAL
59541: IFTRUE 59557
59543: LD_INT 34
59545: DOUBLE
59546: EQUAL
59547: IFTRUE 59557
59549: LD_INT 37
59551: DOUBLE
59552: EQUAL
59553: IFTRUE 59557
59555: GO 59613
59557: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59558: LD_ADDR_VAR 0 9
59562: PUSH
59563: LD_VAR 0 53
59567: PUSH
59568: LD_VAR 0 54
59572: PUSH
59573: LD_VAR 0 55
59577: PUSH
59578: LD_VAR 0 56
59582: PUSH
59583: LD_VAR 0 57
59587: PUSH
59588: LD_VAR 0 58
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: PUSH
59601: LD_VAR 0 4
59605: PUSH
59606: LD_INT 1
59608: PLUS
59609: ARRAY
59610: ST_TO_ADDR
59611: GO 59720
59613: LD_INT 31
59615: DOUBLE
59616: EQUAL
59617: IFTRUE 59663
59619: LD_INT 32
59621: DOUBLE
59622: EQUAL
59623: IFTRUE 59663
59625: LD_INT 33
59627: DOUBLE
59628: EQUAL
59629: IFTRUE 59663
59631: LD_INT 27
59633: DOUBLE
59634: EQUAL
59635: IFTRUE 59663
59637: LD_INT 26
59639: DOUBLE
59640: EQUAL
59641: IFTRUE 59663
59643: LD_INT 28
59645: DOUBLE
59646: EQUAL
59647: IFTRUE 59663
59649: LD_INT 29
59651: DOUBLE
59652: EQUAL
59653: IFTRUE 59663
59655: LD_INT 30
59657: DOUBLE
59658: EQUAL
59659: IFTRUE 59663
59661: GO 59719
59663: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59664: LD_ADDR_VAR 0 9
59668: PUSH
59669: LD_VAR 0 59
59673: PUSH
59674: LD_VAR 0 60
59678: PUSH
59679: LD_VAR 0 61
59683: PUSH
59684: LD_VAR 0 62
59688: PUSH
59689: LD_VAR 0 63
59693: PUSH
59694: LD_VAR 0 64
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: PUSH
59707: LD_VAR 0 4
59711: PUSH
59712: LD_INT 1
59714: PLUS
59715: ARRAY
59716: ST_TO_ADDR
59717: GO 59720
59719: POP
// temp_list2 = [ ] ;
59720: LD_ADDR_VAR 0 10
59724: PUSH
59725: EMPTY
59726: ST_TO_ADDR
// for i in temp_list do
59727: LD_ADDR_VAR 0 8
59731: PUSH
59732: LD_VAR 0 9
59736: PUSH
59737: FOR_IN
59738: IFFALSE 59790
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59740: LD_ADDR_VAR 0 10
59744: PUSH
59745: LD_VAR 0 10
59749: PUSH
59750: LD_VAR 0 8
59754: PUSH
59755: LD_INT 1
59757: ARRAY
59758: PUSH
59759: LD_VAR 0 2
59763: PLUS
59764: PUSH
59765: LD_VAR 0 8
59769: PUSH
59770: LD_INT 2
59772: ARRAY
59773: PUSH
59774: LD_VAR 0 3
59778: PLUS
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: EMPTY
59785: LIST
59786: ADD
59787: ST_TO_ADDR
59788: GO 59737
59790: POP
59791: POP
// result = temp_list2 ;
59792: LD_ADDR_VAR 0 7
59796: PUSH
59797: LD_VAR 0 10
59801: ST_TO_ADDR
// end ;
59802: LD_VAR 0 7
59806: RET
// export function EnemyInRange ( unit , dist ) ; begin
59807: LD_INT 0
59809: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59810: LD_ADDR_VAR 0 3
59814: PUSH
59815: LD_VAR 0 1
59819: PPUSH
59820: CALL_OW 255
59824: PPUSH
59825: LD_VAR 0 1
59829: PPUSH
59830: CALL_OW 250
59834: PPUSH
59835: LD_VAR 0 1
59839: PPUSH
59840: CALL_OW 251
59844: PPUSH
59845: LD_VAR 0 2
59849: PPUSH
59850: CALL 33209 0 4
59854: PUSH
59855: LD_INT 4
59857: ARRAY
59858: ST_TO_ADDR
// end ;
59859: LD_VAR 0 3
59863: RET
// export function PlayerSeeMe ( unit ) ; begin
59864: LD_INT 0
59866: PPUSH
// result := See ( your_side , unit ) ;
59867: LD_ADDR_VAR 0 2
59871: PUSH
59872: LD_OWVAR 2
59876: PPUSH
59877: LD_VAR 0 1
59881: PPUSH
59882: CALL_OW 292
59886: ST_TO_ADDR
// end ;
59887: LD_VAR 0 2
59891: RET
// export function ReverseDir ( unit ) ; begin
59892: LD_INT 0
59894: PPUSH
// if not unit then
59895: LD_VAR 0 1
59899: NOT
59900: IFFALSE 59904
// exit ;
59902: GO 59927
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59904: LD_ADDR_VAR 0 2
59908: PUSH
59909: LD_VAR 0 1
59913: PPUSH
59914: CALL_OW 254
59918: PUSH
59919: LD_INT 3
59921: PLUS
59922: PUSH
59923: LD_INT 6
59925: MOD
59926: ST_TO_ADDR
// end ;
59927: LD_VAR 0 2
59931: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59932: LD_INT 0
59934: PPUSH
59935: PPUSH
59936: PPUSH
59937: PPUSH
59938: PPUSH
59939: PPUSH
// if not unit or not hexes then
59940: LD_VAR 0 1
59944: NOT
59945: PUSH
59946: LD_VAR 0 2
59950: NOT
59951: OR
59952: IFFALSE 59956
// exit ;
59954: GO 60079
// dist := 9999 ;
59956: LD_ADDR_VAR 0 5
59960: PUSH
59961: LD_INT 9999
59963: ST_TO_ADDR
// for i = 1 to hexes do
59964: LD_ADDR_VAR 0 4
59968: PUSH
59969: DOUBLE
59970: LD_INT 1
59972: DEC
59973: ST_TO_ADDR
59974: LD_VAR 0 2
59978: PUSH
59979: FOR_TO
59980: IFFALSE 60067
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59982: LD_ADDR_VAR 0 6
59986: PUSH
59987: LD_VAR 0 1
59991: PPUSH
59992: LD_VAR 0 2
59996: PUSH
59997: LD_VAR 0 4
60001: ARRAY
60002: PUSH
60003: LD_INT 1
60005: ARRAY
60006: PPUSH
60007: LD_VAR 0 2
60011: PUSH
60012: LD_VAR 0 4
60016: ARRAY
60017: PUSH
60018: LD_INT 2
60020: ARRAY
60021: PPUSH
60022: CALL_OW 297
60026: ST_TO_ADDR
// if tdist < dist then
60027: LD_VAR 0 6
60031: PUSH
60032: LD_VAR 0 5
60036: LESS
60037: IFFALSE 60065
// begin hex := hexes [ i ] ;
60039: LD_ADDR_VAR 0 8
60043: PUSH
60044: LD_VAR 0 2
60048: PUSH
60049: LD_VAR 0 4
60053: ARRAY
60054: ST_TO_ADDR
// dist := tdist ;
60055: LD_ADDR_VAR 0 5
60059: PUSH
60060: LD_VAR 0 6
60064: ST_TO_ADDR
// end ; end ;
60065: GO 59979
60067: POP
60068: POP
// result := hex ;
60069: LD_ADDR_VAR 0 3
60073: PUSH
60074: LD_VAR 0 8
60078: ST_TO_ADDR
// end ;
60079: LD_VAR 0 3
60083: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60084: LD_INT 0
60086: PPUSH
60087: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60088: LD_VAR 0 1
60092: NOT
60093: PUSH
60094: LD_VAR 0 1
60098: PUSH
60099: LD_INT 21
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 23
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PPUSH
60123: CALL_OW 69
60127: IN
60128: NOT
60129: OR
60130: IFFALSE 60134
// exit ;
60132: GO 60181
// for i = 1 to 3 do
60134: LD_ADDR_VAR 0 3
60138: PUSH
60139: DOUBLE
60140: LD_INT 1
60142: DEC
60143: ST_TO_ADDR
60144: LD_INT 3
60146: PUSH
60147: FOR_TO
60148: IFFALSE 60179
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60150: LD_VAR 0 1
60154: PPUSH
60155: CALL_OW 250
60159: PPUSH
60160: LD_VAR 0 1
60164: PPUSH
60165: CALL_OW 251
60169: PPUSH
60170: LD_INT 1
60172: PPUSH
60173: CALL_OW 453
60177: GO 60147
60179: POP
60180: POP
// end ;
60181: LD_VAR 0 2
60185: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60186: LD_INT 0
60188: PPUSH
60189: PPUSH
60190: PPUSH
60191: PPUSH
60192: PPUSH
60193: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60194: LD_VAR 0 1
60198: NOT
60199: PUSH
60200: LD_VAR 0 2
60204: NOT
60205: OR
60206: PUSH
60207: LD_VAR 0 1
60211: PPUSH
60212: CALL_OW 314
60216: OR
60217: IFFALSE 60221
// exit ;
60219: GO 60662
// x := GetX ( enemy_unit ) ;
60221: LD_ADDR_VAR 0 7
60225: PUSH
60226: LD_VAR 0 2
60230: PPUSH
60231: CALL_OW 250
60235: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60236: LD_ADDR_VAR 0 8
60240: PUSH
60241: LD_VAR 0 2
60245: PPUSH
60246: CALL_OW 251
60250: ST_TO_ADDR
// if not x or not y then
60251: LD_VAR 0 7
60255: NOT
60256: PUSH
60257: LD_VAR 0 8
60261: NOT
60262: OR
60263: IFFALSE 60267
// exit ;
60265: GO 60662
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60267: LD_ADDR_VAR 0 6
60271: PUSH
60272: LD_VAR 0 7
60276: PPUSH
60277: LD_INT 0
60279: PPUSH
60280: LD_INT 4
60282: PPUSH
60283: CALL_OW 272
60287: PUSH
60288: LD_VAR 0 8
60292: PPUSH
60293: LD_INT 0
60295: PPUSH
60296: LD_INT 4
60298: PPUSH
60299: CALL_OW 273
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_VAR 0 7
60312: PPUSH
60313: LD_INT 1
60315: PPUSH
60316: LD_INT 4
60318: PPUSH
60319: CALL_OW 272
60323: PUSH
60324: LD_VAR 0 8
60328: PPUSH
60329: LD_INT 1
60331: PPUSH
60332: LD_INT 4
60334: PPUSH
60335: CALL_OW 273
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_VAR 0 7
60348: PPUSH
60349: LD_INT 2
60351: PPUSH
60352: LD_INT 4
60354: PPUSH
60355: CALL_OW 272
60359: PUSH
60360: LD_VAR 0 8
60364: PPUSH
60365: LD_INT 2
60367: PPUSH
60368: LD_INT 4
60370: PPUSH
60371: CALL_OW 273
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_VAR 0 7
60384: PPUSH
60385: LD_INT 3
60387: PPUSH
60388: LD_INT 4
60390: PPUSH
60391: CALL_OW 272
60395: PUSH
60396: LD_VAR 0 8
60400: PPUSH
60401: LD_INT 3
60403: PPUSH
60404: LD_INT 4
60406: PPUSH
60407: CALL_OW 273
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_VAR 0 7
60420: PPUSH
60421: LD_INT 4
60423: PPUSH
60424: LD_INT 4
60426: PPUSH
60427: CALL_OW 272
60431: PUSH
60432: LD_VAR 0 8
60436: PPUSH
60437: LD_INT 4
60439: PPUSH
60440: LD_INT 4
60442: PPUSH
60443: CALL_OW 273
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_VAR 0 7
60456: PPUSH
60457: LD_INT 5
60459: PPUSH
60460: LD_INT 4
60462: PPUSH
60463: CALL_OW 272
60467: PUSH
60468: LD_VAR 0 8
60472: PPUSH
60473: LD_INT 5
60475: PPUSH
60476: LD_INT 4
60478: PPUSH
60479: CALL_OW 273
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: ST_TO_ADDR
// for i = tmp downto 1 do
60496: LD_ADDR_VAR 0 4
60500: PUSH
60501: DOUBLE
60502: LD_VAR 0 6
60506: INC
60507: ST_TO_ADDR
60508: LD_INT 1
60510: PUSH
60511: FOR_DOWNTO
60512: IFFALSE 60613
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60514: LD_VAR 0 6
60518: PUSH
60519: LD_VAR 0 4
60523: ARRAY
60524: PUSH
60525: LD_INT 1
60527: ARRAY
60528: PPUSH
60529: LD_VAR 0 6
60533: PUSH
60534: LD_VAR 0 4
60538: ARRAY
60539: PUSH
60540: LD_INT 2
60542: ARRAY
60543: PPUSH
60544: CALL_OW 488
60548: NOT
60549: PUSH
60550: LD_VAR 0 6
60554: PUSH
60555: LD_VAR 0 4
60559: ARRAY
60560: PUSH
60561: LD_INT 1
60563: ARRAY
60564: PPUSH
60565: LD_VAR 0 6
60569: PUSH
60570: LD_VAR 0 4
60574: ARRAY
60575: PUSH
60576: LD_INT 2
60578: ARRAY
60579: PPUSH
60580: CALL_OW 428
60584: PUSH
60585: LD_INT 0
60587: NONEQUAL
60588: OR
60589: IFFALSE 60611
// tmp := Delete ( tmp , i ) ;
60591: LD_ADDR_VAR 0 6
60595: PUSH
60596: LD_VAR 0 6
60600: PPUSH
60601: LD_VAR 0 4
60605: PPUSH
60606: CALL_OW 3
60610: ST_TO_ADDR
60611: GO 60511
60613: POP
60614: POP
// j := GetClosestHex ( unit , tmp ) ;
60615: LD_ADDR_VAR 0 5
60619: PUSH
60620: LD_VAR 0 1
60624: PPUSH
60625: LD_VAR 0 6
60629: PPUSH
60630: CALL 59932 0 2
60634: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60635: LD_VAR 0 1
60639: PPUSH
60640: LD_VAR 0 5
60644: PUSH
60645: LD_INT 1
60647: ARRAY
60648: PPUSH
60649: LD_VAR 0 5
60653: PUSH
60654: LD_INT 2
60656: ARRAY
60657: PPUSH
60658: CALL_OW 111
// end ;
60662: LD_VAR 0 3
60666: RET
// export function PrepareApemanSoldier ( ) ; begin
60667: LD_INT 0
60669: PPUSH
// uc_nation := 0 ;
60670: LD_ADDR_OWVAR 21
60674: PUSH
60675: LD_INT 0
60677: ST_TO_ADDR
// hc_sex := sex_male ;
60678: LD_ADDR_OWVAR 27
60682: PUSH
60683: LD_INT 1
60685: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60686: LD_ADDR_OWVAR 28
60690: PUSH
60691: LD_INT 15
60693: ST_TO_ADDR
// hc_gallery :=  ;
60694: LD_ADDR_OWVAR 33
60698: PUSH
60699: LD_STRING 
60701: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60702: LD_ADDR_OWVAR 31
60706: PUSH
60707: LD_INT 0
60709: PPUSH
60710: LD_INT 3
60712: PPUSH
60713: CALL_OW 12
60717: PUSH
60718: LD_INT 0
60720: PPUSH
60721: LD_INT 3
60723: PPUSH
60724: CALL_OW 12
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: ST_TO_ADDR
// end ;
60741: LD_VAR 0 1
60745: RET
// export function PrepareApemanEngineer ( ) ; begin
60746: LD_INT 0
60748: PPUSH
// uc_nation := 0 ;
60749: LD_ADDR_OWVAR 21
60753: PUSH
60754: LD_INT 0
60756: ST_TO_ADDR
// hc_sex := sex_male ;
60757: LD_ADDR_OWVAR 27
60761: PUSH
60762: LD_INT 1
60764: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60765: LD_ADDR_OWVAR 28
60769: PUSH
60770: LD_INT 16
60772: ST_TO_ADDR
// hc_gallery :=  ;
60773: LD_ADDR_OWVAR 33
60777: PUSH
60778: LD_STRING 
60780: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60781: LD_ADDR_OWVAR 31
60785: PUSH
60786: LD_INT 0
60788: PPUSH
60789: LD_INT 3
60791: PPUSH
60792: CALL_OW 12
60796: PUSH
60797: LD_INT 0
60799: PPUSH
60800: LD_INT 3
60802: PPUSH
60803: CALL_OW 12
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: ST_TO_ADDR
// end ;
60820: LD_VAR 0 1
60824: RET
// export function PrepareApeman ( agressivity ) ; begin
60825: LD_INT 0
60827: PPUSH
// uc_side := 0 ;
60828: LD_ADDR_OWVAR 20
60832: PUSH
60833: LD_INT 0
60835: ST_TO_ADDR
// uc_nation := 0 ;
60836: LD_ADDR_OWVAR 21
60840: PUSH
60841: LD_INT 0
60843: ST_TO_ADDR
// hc_sex := sex_male ;
60844: LD_ADDR_OWVAR 27
60848: PUSH
60849: LD_INT 1
60851: ST_TO_ADDR
// hc_class := class_apeman ;
60852: LD_ADDR_OWVAR 28
60856: PUSH
60857: LD_INT 12
60859: ST_TO_ADDR
// hc_gallery :=  ;
60860: LD_ADDR_OWVAR 33
60864: PUSH
60865: LD_STRING 
60867: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60868: LD_ADDR_OWVAR 35
60872: PUSH
60873: LD_VAR 0 1
60877: NEG
60878: PPUSH
60879: LD_VAR 0 1
60883: PPUSH
60884: CALL_OW 12
60888: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60889: LD_ADDR_OWVAR 31
60893: PUSH
60894: LD_INT 0
60896: PPUSH
60897: LD_INT 3
60899: PPUSH
60900: CALL_OW 12
60904: PUSH
60905: LD_INT 0
60907: PPUSH
60908: LD_INT 3
60910: PPUSH
60911: CALL_OW 12
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: LD_INT 0
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: ST_TO_ADDR
// end ;
60928: LD_VAR 0 2
60932: RET
// export function PrepareTiger ( agressivity ) ; begin
60933: LD_INT 0
60935: PPUSH
// uc_side := 0 ;
60936: LD_ADDR_OWVAR 20
60940: PUSH
60941: LD_INT 0
60943: ST_TO_ADDR
// uc_nation := 0 ;
60944: LD_ADDR_OWVAR 21
60948: PUSH
60949: LD_INT 0
60951: ST_TO_ADDR
// hc_class := class_tiger ;
60952: LD_ADDR_OWVAR 28
60956: PUSH
60957: LD_INT 14
60959: ST_TO_ADDR
// hc_gallery :=  ;
60960: LD_ADDR_OWVAR 33
60964: PUSH
60965: LD_STRING 
60967: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60968: LD_ADDR_OWVAR 35
60972: PUSH
60973: LD_VAR 0 1
60977: NEG
60978: PPUSH
60979: LD_VAR 0 1
60983: PPUSH
60984: CALL_OW 12
60988: ST_TO_ADDR
// end ;
60989: LD_VAR 0 2
60993: RET
// export function PrepareEnchidna ( ) ; begin
60994: LD_INT 0
60996: PPUSH
// uc_side := 0 ;
60997: LD_ADDR_OWVAR 20
61001: PUSH
61002: LD_INT 0
61004: ST_TO_ADDR
// uc_nation := 0 ;
61005: LD_ADDR_OWVAR 21
61009: PUSH
61010: LD_INT 0
61012: ST_TO_ADDR
// hc_class := class_baggie ;
61013: LD_ADDR_OWVAR 28
61017: PUSH
61018: LD_INT 13
61020: ST_TO_ADDR
// hc_gallery :=  ;
61021: LD_ADDR_OWVAR 33
61025: PUSH
61026: LD_STRING 
61028: ST_TO_ADDR
// end ;
61029: LD_VAR 0 1
61033: RET
// export function PrepareFrog ( ) ; begin
61034: LD_INT 0
61036: PPUSH
// uc_side := 0 ;
61037: LD_ADDR_OWVAR 20
61041: PUSH
61042: LD_INT 0
61044: ST_TO_ADDR
// uc_nation := 0 ;
61045: LD_ADDR_OWVAR 21
61049: PUSH
61050: LD_INT 0
61052: ST_TO_ADDR
// hc_class := class_frog ;
61053: LD_ADDR_OWVAR 28
61057: PUSH
61058: LD_INT 19
61060: ST_TO_ADDR
// hc_gallery :=  ;
61061: LD_ADDR_OWVAR 33
61065: PUSH
61066: LD_STRING 
61068: ST_TO_ADDR
// end ;
61069: LD_VAR 0 1
61073: RET
// export function PrepareFish ( ) ; begin
61074: LD_INT 0
61076: PPUSH
// uc_side := 0 ;
61077: LD_ADDR_OWVAR 20
61081: PUSH
61082: LD_INT 0
61084: ST_TO_ADDR
// uc_nation := 0 ;
61085: LD_ADDR_OWVAR 21
61089: PUSH
61090: LD_INT 0
61092: ST_TO_ADDR
// hc_class := class_fish ;
61093: LD_ADDR_OWVAR 28
61097: PUSH
61098: LD_INT 20
61100: ST_TO_ADDR
// hc_gallery :=  ;
61101: LD_ADDR_OWVAR 33
61105: PUSH
61106: LD_STRING 
61108: ST_TO_ADDR
// end ;
61109: LD_VAR 0 1
61113: RET
// export function PrepareBird ( ) ; begin
61114: LD_INT 0
61116: PPUSH
// uc_side := 0 ;
61117: LD_ADDR_OWVAR 20
61121: PUSH
61122: LD_INT 0
61124: ST_TO_ADDR
// uc_nation := 0 ;
61125: LD_ADDR_OWVAR 21
61129: PUSH
61130: LD_INT 0
61132: ST_TO_ADDR
// hc_class := class_phororhacos ;
61133: LD_ADDR_OWVAR 28
61137: PUSH
61138: LD_INT 18
61140: ST_TO_ADDR
// hc_gallery :=  ;
61141: LD_ADDR_OWVAR 33
61145: PUSH
61146: LD_STRING 
61148: ST_TO_ADDR
// end ;
61149: LD_VAR 0 1
61153: RET
// export function PrepareHorse ( ) ; begin
61154: LD_INT 0
61156: PPUSH
// uc_side := 0 ;
61157: LD_ADDR_OWVAR 20
61161: PUSH
61162: LD_INT 0
61164: ST_TO_ADDR
// uc_nation := 0 ;
61165: LD_ADDR_OWVAR 21
61169: PUSH
61170: LD_INT 0
61172: ST_TO_ADDR
// hc_class := class_horse ;
61173: LD_ADDR_OWVAR 28
61177: PUSH
61178: LD_INT 21
61180: ST_TO_ADDR
// hc_gallery :=  ;
61181: LD_ADDR_OWVAR 33
61185: PUSH
61186: LD_STRING 
61188: ST_TO_ADDR
// end ;
61189: LD_VAR 0 1
61193: RET
// export function PrepareMastodont ( ) ; begin
61194: LD_INT 0
61196: PPUSH
// uc_side := 0 ;
61197: LD_ADDR_OWVAR 20
61201: PUSH
61202: LD_INT 0
61204: ST_TO_ADDR
// uc_nation := 0 ;
61205: LD_ADDR_OWVAR 21
61209: PUSH
61210: LD_INT 0
61212: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61213: LD_ADDR_OWVAR 37
61217: PUSH
61218: LD_INT 31
61220: ST_TO_ADDR
// vc_control := control_rider ;
61221: LD_ADDR_OWVAR 38
61225: PUSH
61226: LD_INT 4
61228: ST_TO_ADDR
// end ;
61229: LD_VAR 0 1
61233: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61234: LD_INT 0
61236: PPUSH
61237: PPUSH
61238: PPUSH
// uc_side = 0 ;
61239: LD_ADDR_OWVAR 20
61243: PUSH
61244: LD_INT 0
61246: ST_TO_ADDR
// uc_nation = 0 ;
61247: LD_ADDR_OWVAR 21
61251: PUSH
61252: LD_INT 0
61254: ST_TO_ADDR
// InitHc_All ( ) ;
61255: CALL_OW 584
// InitVc ;
61259: CALL_OW 20
// if mastodonts then
61263: LD_VAR 0 6
61267: IFFALSE 61334
// for i = 1 to mastodonts do
61269: LD_ADDR_VAR 0 11
61273: PUSH
61274: DOUBLE
61275: LD_INT 1
61277: DEC
61278: ST_TO_ADDR
61279: LD_VAR 0 6
61283: PUSH
61284: FOR_TO
61285: IFFALSE 61332
// begin vc_chassis := 31 ;
61287: LD_ADDR_OWVAR 37
61291: PUSH
61292: LD_INT 31
61294: ST_TO_ADDR
// vc_control := control_rider ;
61295: LD_ADDR_OWVAR 38
61299: PUSH
61300: LD_INT 4
61302: ST_TO_ADDR
// animal := CreateVehicle ;
61303: LD_ADDR_VAR 0 12
61307: PUSH
61308: CALL_OW 45
61312: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61313: LD_VAR 0 12
61317: PPUSH
61318: LD_VAR 0 8
61322: PPUSH
61323: LD_INT 0
61325: PPUSH
61326: CALL 63469 0 3
// end ;
61330: GO 61284
61332: POP
61333: POP
// if horses then
61334: LD_VAR 0 5
61338: IFFALSE 61405
// for i = 1 to horses do
61340: LD_ADDR_VAR 0 11
61344: PUSH
61345: DOUBLE
61346: LD_INT 1
61348: DEC
61349: ST_TO_ADDR
61350: LD_VAR 0 5
61354: PUSH
61355: FOR_TO
61356: IFFALSE 61403
// begin hc_class := 21 ;
61358: LD_ADDR_OWVAR 28
61362: PUSH
61363: LD_INT 21
61365: ST_TO_ADDR
// hc_gallery :=  ;
61366: LD_ADDR_OWVAR 33
61370: PUSH
61371: LD_STRING 
61373: ST_TO_ADDR
// animal := CreateHuman ;
61374: LD_ADDR_VAR 0 12
61378: PUSH
61379: CALL_OW 44
61383: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61384: LD_VAR 0 12
61388: PPUSH
61389: LD_VAR 0 8
61393: PPUSH
61394: LD_INT 0
61396: PPUSH
61397: CALL 63469 0 3
// end ;
61401: GO 61355
61403: POP
61404: POP
// if birds then
61405: LD_VAR 0 1
61409: IFFALSE 61476
// for i = 1 to birds do
61411: LD_ADDR_VAR 0 11
61415: PUSH
61416: DOUBLE
61417: LD_INT 1
61419: DEC
61420: ST_TO_ADDR
61421: LD_VAR 0 1
61425: PUSH
61426: FOR_TO
61427: IFFALSE 61474
// begin hc_class = 18 ;
61429: LD_ADDR_OWVAR 28
61433: PUSH
61434: LD_INT 18
61436: ST_TO_ADDR
// hc_gallery =  ;
61437: LD_ADDR_OWVAR 33
61441: PUSH
61442: LD_STRING 
61444: ST_TO_ADDR
// animal := CreateHuman ;
61445: LD_ADDR_VAR 0 12
61449: PUSH
61450: CALL_OW 44
61454: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61455: LD_VAR 0 12
61459: PPUSH
61460: LD_VAR 0 8
61464: PPUSH
61465: LD_INT 0
61467: PPUSH
61468: CALL 63469 0 3
// end ;
61472: GO 61426
61474: POP
61475: POP
// if tigers then
61476: LD_VAR 0 2
61480: IFFALSE 61564
// for i = 1 to tigers do
61482: LD_ADDR_VAR 0 11
61486: PUSH
61487: DOUBLE
61488: LD_INT 1
61490: DEC
61491: ST_TO_ADDR
61492: LD_VAR 0 2
61496: PUSH
61497: FOR_TO
61498: IFFALSE 61562
// begin hc_class = class_tiger ;
61500: LD_ADDR_OWVAR 28
61504: PUSH
61505: LD_INT 14
61507: ST_TO_ADDR
// hc_gallery =  ;
61508: LD_ADDR_OWVAR 33
61512: PUSH
61513: LD_STRING 
61515: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61516: LD_ADDR_OWVAR 35
61520: PUSH
61521: LD_INT 7
61523: NEG
61524: PPUSH
61525: LD_INT 7
61527: PPUSH
61528: CALL_OW 12
61532: ST_TO_ADDR
// animal := CreateHuman ;
61533: LD_ADDR_VAR 0 12
61537: PUSH
61538: CALL_OW 44
61542: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61543: LD_VAR 0 12
61547: PPUSH
61548: LD_VAR 0 8
61552: PPUSH
61553: LD_INT 0
61555: PPUSH
61556: CALL 63469 0 3
// end ;
61560: GO 61497
61562: POP
61563: POP
// if apemans then
61564: LD_VAR 0 3
61568: IFFALSE 61691
// for i = 1 to apemans do
61570: LD_ADDR_VAR 0 11
61574: PUSH
61575: DOUBLE
61576: LD_INT 1
61578: DEC
61579: ST_TO_ADDR
61580: LD_VAR 0 3
61584: PUSH
61585: FOR_TO
61586: IFFALSE 61689
// begin hc_class = class_apeman ;
61588: LD_ADDR_OWVAR 28
61592: PUSH
61593: LD_INT 12
61595: ST_TO_ADDR
// hc_gallery =  ;
61596: LD_ADDR_OWVAR 33
61600: PUSH
61601: LD_STRING 
61603: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61604: LD_ADDR_OWVAR 35
61608: PUSH
61609: LD_INT 2
61611: NEG
61612: PPUSH
61613: LD_INT 2
61615: PPUSH
61616: CALL_OW 12
61620: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61621: LD_ADDR_OWVAR 31
61625: PUSH
61626: LD_INT 1
61628: PPUSH
61629: LD_INT 3
61631: PPUSH
61632: CALL_OW 12
61636: PUSH
61637: LD_INT 1
61639: PPUSH
61640: LD_INT 3
61642: PPUSH
61643: CALL_OW 12
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: ST_TO_ADDR
// animal := CreateHuman ;
61660: LD_ADDR_VAR 0 12
61664: PUSH
61665: CALL_OW 44
61669: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61670: LD_VAR 0 12
61674: PPUSH
61675: LD_VAR 0 8
61679: PPUSH
61680: LD_INT 0
61682: PPUSH
61683: CALL 63469 0 3
// end ;
61687: GO 61585
61689: POP
61690: POP
// if enchidnas then
61691: LD_VAR 0 4
61695: IFFALSE 61762
// for i = 1 to enchidnas do
61697: LD_ADDR_VAR 0 11
61701: PUSH
61702: DOUBLE
61703: LD_INT 1
61705: DEC
61706: ST_TO_ADDR
61707: LD_VAR 0 4
61711: PUSH
61712: FOR_TO
61713: IFFALSE 61760
// begin hc_class = 13 ;
61715: LD_ADDR_OWVAR 28
61719: PUSH
61720: LD_INT 13
61722: ST_TO_ADDR
// hc_gallery =  ;
61723: LD_ADDR_OWVAR 33
61727: PUSH
61728: LD_STRING 
61730: ST_TO_ADDR
// animal := CreateHuman ;
61731: LD_ADDR_VAR 0 12
61735: PUSH
61736: CALL_OW 44
61740: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61741: LD_VAR 0 12
61745: PPUSH
61746: LD_VAR 0 8
61750: PPUSH
61751: LD_INT 0
61753: PPUSH
61754: CALL 63469 0 3
// end ;
61758: GO 61712
61760: POP
61761: POP
// if fishes then
61762: LD_VAR 0 7
61766: IFFALSE 61833
// for i = 1 to fishes do
61768: LD_ADDR_VAR 0 11
61772: PUSH
61773: DOUBLE
61774: LD_INT 1
61776: DEC
61777: ST_TO_ADDR
61778: LD_VAR 0 7
61782: PUSH
61783: FOR_TO
61784: IFFALSE 61831
// begin hc_class = 20 ;
61786: LD_ADDR_OWVAR 28
61790: PUSH
61791: LD_INT 20
61793: ST_TO_ADDR
// hc_gallery =  ;
61794: LD_ADDR_OWVAR 33
61798: PUSH
61799: LD_STRING 
61801: ST_TO_ADDR
// animal := CreateHuman ;
61802: LD_ADDR_VAR 0 12
61806: PUSH
61807: CALL_OW 44
61811: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61812: LD_VAR 0 12
61816: PPUSH
61817: LD_VAR 0 9
61821: PPUSH
61822: LD_INT 0
61824: PPUSH
61825: CALL 63469 0 3
// end ;
61829: GO 61783
61831: POP
61832: POP
// end ;
61833: LD_VAR 0 10
61837: RET
// export function WantHeal ( sci , unit ) ; begin
61838: LD_INT 0
61840: PPUSH
// if GetTaskList ( sci ) > 0 then
61841: LD_VAR 0 1
61845: PPUSH
61846: CALL_OW 437
61850: PUSH
61851: LD_INT 0
61853: GREATER
61854: IFFALSE 61924
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61856: LD_VAR 0 1
61860: PPUSH
61861: CALL_OW 437
61865: PUSH
61866: LD_INT 1
61868: ARRAY
61869: PUSH
61870: LD_INT 1
61872: ARRAY
61873: PUSH
61874: LD_STRING l
61876: EQUAL
61877: PUSH
61878: LD_VAR 0 1
61882: PPUSH
61883: CALL_OW 437
61887: PUSH
61888: LD_INT 1
61890: ARRAY
61891: PUSH
61892: LD_INT 4
61894: ARRAY
61895: PUSH
61896: LD_VAR 0 2
61900: EQUAL
61901: AND
61902: IFFALSE 61914
// result := true else
61904: LD_ADDR_VAR 0 3
61908: PUSH
61909: LD_INT 1
61911: ST_TO_ADDR
61912: GO 61922
// result := false ;
61914: LD_ADDR_VAR 0 3
61918: PUSH
61919: LD_INT 0
61921: ST_TO_ADDR
// end else
61922: GO 61932
// result := false ;
61924: LD_ADDR_VAR 0 3
61928: PUSH
61929: LD_INT 0
61931: ST_TO_ADDR
// end ;
61932: LD_VAR 0 3
61936: RET
// export function HealTarget ( sci ) ; begin
61937: LD_INT 0
61939: PPUSH
// if not sci then
61940: LD_VAR 0 1
61944: NOT
61945: IFFALSE 61949
// exit ;
61947: GO 62014
// result := 0 ;
61949: LD_ADDR_VAR 0 2
61953: PUSH
61954: LD_INT 0
61956: ST_TO_ADDR
// if GetTaskList ( sci ) then
61957: LD_VAR 0 1
61961: PPUSH
61962: CALL_OW 437
61966: IFFALSE 62014
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61968: LD_VAR 0 1
61972: PPUSH
61973: CALL_OW 437
61977: PUSH
61978: LD_INT 1
61980: ARRAY
61981: PUSH
61982: LD_INT 1
61984: ARRAY
61985: PUSH
61986: LD_STRING l
61988: EQUAL
61989: IFFALSE 62014
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61991: LD_ADDR_VAR 0 2
61995: PUSH
61996: LD_VAR 0 1
62000: PPUSH
62001: CALL_OW 437
62005: PUSH
62006: LD_INT 1
62008: ARRAY
62009: PUSH
62010: LD_INT 4
62012: ARRAY
62013: ST_TO_ADDR
// end ;
62014: LD_VAR 0 2
62018: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62019: LD_INT 0
62021: PPUSH
62022: PPUSH
62023: PPUSH
62024: PPUSH
// if not base_units then
62025: LD_VAR 0 1
62029: NOT
62030: IFFALSE 62034
// exit ;
62032: GO 62121
// result := false ;
62034: LD_ADDR_VAR 0 2
62038: PUSH
62039: LD_INT 0
62041: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62042: LD_ADDR_VAR 0 5
62046: PUSH
62047: LD_VAR 0 1
62051: PPUSH
62052: LD_INT 21
62054: PUSH
62055: LD_INT 3
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PPUSH
62062: CALL_OW 72
62066: ST_TO_ADDR
// if not tmp then
62067: LD_VAR 0 5
62071: NOT
62072: IFFALSE 62076
// exit ;
62074: GO 62121
// for i in tmp do
62076: LD_ADDR_VAR 0 3
62080: PUSH
62081: LD_VAR 0 5
62085: PUSH
62086: FOR_IN
62087: IFFALSE 62119
// begin result := EnemyInRange ( i , 22 ) ;
62089: LD_ADDR_VAR 0 2
62093: PUSH
62094: LD_VAR 0 3
62098: PPUSH
62099: LD_INT 22
62101: PPUSH
62102: CALL 59807 0 2
62106: ST_TO_ADDR
// if result then
62107: LD_VAR 0 2
62111: IFFALSE 62117
// exit ;
62113: POP
62114: POP
62115: GO 62121
// end ;
62117: GO 62086
62119: POP
62120: POP
// end ;
62121: LD_VAR 0 2
62125: RET
// export function FilterByTag ( units , tag ) ; begin
62126: LD_INT 0
62128: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62129: LD_ADDR_VAR 0 3
62133: PUSH
62134: LD_VAR 0 1
62138: PPUSH
62139: LD_INT 120
62141: PUSH
62142: LD_VAR 0 2
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PPUSH
62151: CALL_OW 72
62155: ST_TO_ADDR
// end ;
62156: LD_VAR 0 3
62160: RET
// export function IsDriver ( un ) ; begin
62161: LD_INT 0
62163: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62164: LD_ADDR_VAR 0 2
62168: PUSH
62169: LD_VAR 0 1
62173: PUSH
62174: LD_INT 55
62176: PUSH
62177: EMPTY
62178: LIST
62179: PPUSH
62180: CALL_OW 69
62184: IN
62185: ST_TO_ADDR
// end ;
62186: LD_VAR 0 2
62190: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62191: LD_INT 0
62193: PPUSH
62194: PPUSH
// list := [ ] ;
62195: LD_ADDR_VAR 0 5
62199: PUSH
62200: EMPTY
62201: ST_TO_ADDR
// case d of 0 :
62202: LD_VAR 0 3
62206: PUSH
62207: LD_INT 0
62209: DOUBLE
62210: EQUAL
62211: IFTRUE 62215
62213: GO 62348
62215: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62216: LD_ADDR_VAR 0 5
62220: PUSH
62221: LD_VAR 0 1
62225: PUSH
62226: LD_INT 4
62228: MINUS
62229: PUSH
62230: LD_VAR 0 2
62234: PUSH
62235: LD_INT 4
62237: MINUS
62238: PUSH
62239: LD_INT 2
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: LIST
62246: PUSH
62247: LD_VAR 0 1
62251: PUSH
62252: LD_INT 3
62254: MINUS
62255: PUSH
62256: LD_VAR 0 2
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: LIST
62268: PUSH
62269: LD_VAR 0 1
62273: PUSH
62274: LD_INT 4
62276: PLUS
62277: PUSH
62278: LD_VAR 0 2
62282: PUSH
62283: LD_INT 4
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: LIST
62290: PUSH
62291: LD_VAR 0 1
62295: PUSH
62296: LD_INT 3
62298: PLUS
62299: PUSH
62300: LD_VAR 0 2
62304: PUSH
62305: LD_INT 3
62307: PLUS
62308: PUSH
62309: LD_INT 5
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: LIST
62316: PUSH
62317: LD_VAR 0 1
62321: PUSH
62322: LD_VAR 0 2
62326: PUSH
62327: LD_INT 4
62329: PLUS
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: LIST
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: ST_TO_ADDR
// end ; 1 :
62346: GO 63046
62348: LD_INT 1
62350: DOUBLE
62351: EQUAL
62352: IFTRUE 62356
62354: GO 62489
62356: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62357: LD_ADDR_VAR 0 5
62361: PUSH
62362: LD_VAR 0 1
62366: PUSH
62367: LD_VAR 0 2
62371: PUSH
62372: LD_INT 4
62374: MINUS
62375: PUSH
62376: LD_INT 3
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: LIST
62383: PUSH
62384: LD_VAR 0 1
62388: PUSH
62389: LD_INT 3
62391: MINUS
62392: PUSH
62393: LD_VAR 0 2
62397: PUSH
62398: LD_INT 3
62400: MINUS
62401: PUSH
62402: LD_INT 2
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: LIST
62409: PUSH
62410: LD_VAR 0 1
62414: PUSH
62415: LD_INT 4
62417: MINUS
62418: PUSH
62419: LD_VAR 0 2
62423: PUSH
62424: LD_INT 1
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: LIST
62431: PUSH
62432: LD_VAR 0 1
62436: PUSH
62437: LD_VAR 0 2
62441: PUSH
62442: LD_INT 3
62444: PLUS
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: LIST
62453: PUSH
62454: LD_VAR 0 1
62458: PUSH
62459: LD_INT 4
62461: PLUS
62462: PUSH
62463: LD_VAR 0 2
62467: PUSH
62468: LD_INT 4
62470: PLUS
62471: PUSH
62472: LD_INT 5
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: LIST
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: ST_TO_ADDR
// end ; 2 :
62487: GO 63046
62489: LD_INT 2
62491: DOUBLE
62492: EQUAL
62493: IFTRUE 62497
62495: GO 62626
62497: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62498: LD_ADDR_VAR 0 5
62502: PUSH
62503: LD_VAR 0 1
62507: PUSH
62508: LD_VAR 0 2
62512: PUSH
62513: LD_INT 3
62515: MINUS
62516: PUSH
62517: LD_INT 3
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: LIST
62524: PUSH
62525: LD_VAR 0 1
62529: PUSH
62530: LD_INT 4
62532: PLUS
62533: PUSH
62534: LD_VAR 0 2
62538: PUSH
62539: LD_INT 4
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: LIST
62546: PUSH
62547: LD_VAR 0 1
62551: PUSH
62552: LD_VAR 0 2
62556: PUSH
62557: LD_INT 4
62559: PLUS
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: LIST
62568: PUSH
62569: LD_VAR 0 1
62573: PUSH
62574: LD_INT 3
62576: MINUS
62577: PUSH
62578: LD_VAR 0 2
62582: PUSH
62583: LD_INT 1
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: LIST
62590: PUSH
62591: LD_VAR 0 1
62595: PUSH
62596: LD_INT 4
62598: MINUS
62599: PUSH
62600: LD_VAR 0 2
62604: PUSH
62605: LD_INT 4
62607: MINUS
62608: PUSH
62609: LD_INT 2
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: LIST
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: ST_TO_ADDR
// end ; 3 :
62624: GO 63046
62626: LD_INT 3
62628: DOUBLE
62629: EQUAL
62630: IFTRUE 62634
62632: GO 62767
62634: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62635: LD_ADDR_VAR 0 5
62639: PUSH
62640: LD_VAR 0 1
62644: PUSH
62645: LD_INT 3
62647: PLUS
62648: PUSH
62649: LD_VAR 0 2
62653: PUSH
62654: LD_INT 4
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: LIST
62661: PUSH
62662: LD_VAR 0 1
62666: PUSH
62667: LD_INT 4
62669: PLUS
62670: PUSH
62671: LD_VAR 0 2
62675: PUSH
62676: LD_INT 4
62678: PLUS
62679: PUSH
62680: LD_INT 5
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: LIST
62687: PUSH
62688: LD_VAR 0 1
62692: PUSH
62693: LD_INT 4
62695: MINUS
62696: PUSH
62697: LD_VAR 0 2
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: LIST
62709: PUSH
62710: LD_VAR 0 1
62714: PUSH
62715: LD_VAR 0 2
62719: PUSH
62720: LD_INT 4
62722: MINUS
62723: PUSH
62724: LD_INT 3
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: LIST
62731: PUSH
62732: LD_VAR 0 1
62736: PUSH
62737: LD_INT 3
62739: MINUS
62740: PUSH
62741: LD_VAR 0 2
62745: PUSH
62746: LD_INT 3
62748: MINUS
62749: PUSH
62750: LD_INT 2
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: LIST
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: ST_TO_ADDR
// end ; 4 :
62765: GO 63046
62767: LD_INT 4
62769: DOUBLE
62770: EQUAL
62771: IFTRUE 62775
62773: GO 62908
62775: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62776: LD_ADDR_VAR 0 5
62780: PUSH
62781: LD_VAR 0 1
62785: PUSH
62786: LD_VAR 0 2
62790: PUSH
62791: LD_INT 4
62793: PLUS
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: LIST
62802: PUSH
62803: LD_VAR 0 1
62807: PUSH
62808: LD_INT 3
62810: PLUS
62811: PUSH
62812: LD_VAR 0 2
62816: PUSH
62817: LD_INT 3
62819: PLUS
62820: PUSH
62821: LD_INT 5
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: LIST
62828: PUSH
62829: LD_VAR 0 1
62833: PUSH
62834: LD_INT 4
62836: PLUS
62837: PUSH
62838: LD_VAR 0 2
62842: PUSH
62843: LD_INT 4
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: LIST
62850: PUSH
62851: LD_VAR 0 1
62855: PUSH
62856: LD_VAR 0 2
62860: PUSH
62861: LD_INT 3
62863: MINUS
62864: PUSH
62865: LD_INT 3
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: LIST
62872: PUSH
62873: LD_VAR 0 1
62877: PUSH
62878: LD_INT 4
62880: MINUS
62881: PUSH
62882: LD_VAR 0 2
62886: PUSH
62887: LD_INT 4
62889: MINUS
62890: PUSH
62891: LD_INT 2
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: LIST
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: ST_TO_ADDR
// end ; 5 :
62906: GO 63046
62908: LD_INT 5
62910: DOUBLE
62911: EQUAL
62912: IFTRUE 62916
62914: GO 63045
62916: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62917: LD_ADDR_VAR 0 5
62921: PUSH
62922: LD_VAR 0 1
62926: PUSH
62927: LD_INT 4
62929: MINUS
62930: PUSH
62931: LD_VAR 0 2
62935: PUSH
62936: LD_INT 1
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: LIST
62943: PUSH
62944: LD_VAR 0 1
62948: PUSH
62949: LD_VAR 0 2
62953: PUSH
62954: LD_INT 4
62956: MINUS
62957: PUSH
62958: LD_INT 3
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: LIST
62965: PUSH
62966: LD_VAR 0 1
62970: PUSH
62971: LD_INT 4
62973: PLUS
62974: PUSH
62975: LD_VAR 0 2
62979: PUSH
62980: LD_INT 4
62982: PLUS
62983: PUSH
62984: LD_INT 5
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: LIST
62991: PUSH
62992: LD_VAR 0 1
62996: PUSH
62997: LD_INT 3
62999: PLUS
63000: PUSH
63001: LD_VAR 0 2
63005: PUSH
63006: LD_INT 4
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: LIST
63013: PUSH
63014: LD_VAR 0 1
63018: PUSH
63019: LD_VAR 0 2
63023: PUSH
63024: LD_INT 3
63026: PLUS
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: LIST
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: ST_TO_ADDR
// end ; end ;
63043: GO 63046
63045: POP
// result := list ;
63046: LD_ADDR_VAR 0 4
63050: PUSH
63051: LD_VAR 0 5
63055: ST_TO_ADDR
// end ;
63056: LD_VAR 0 4
63060: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63061: LD_INT 0
63063: PPUSH
63064: PPUSH
63065: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63066: LD_VAR 0 1
63070: NOT
63071: PUSH
63072: LD_VAR 0 2
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: LD_INT 2
63082: PUSH
63083: LD_INT 3
63085: PUSH
63086: LD_INT 4
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: IN
63095: NOT
63096: OR
63097: IFFALSE 63101
// exit ;
63099: GO 63193
// tmp := [ ] ;
63101: LD_ADDR_VAR 0 5
63105: PUSH
63106: EMPTY
63107: ST_TO_ADDR
// for i in units do
63108: LD_ADDR_VAR 0 4
63112: PUSH
63113: LD_VAR 0 1
63117: PUSH
63118: FOR_IN
63119: IFFALSE 63162
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63121: LD_ADDR_VAR 0 5
63125: PUSH
63126: LD_VAR 0 5
63130: PPUSH
63131: LD_VAR 0 5
63135: PUSH
63136: LD_INT 1
63138: PLUS
63139: PPUSH
63140: LD_VAR 0 4
63144: PPUSH
63145: LD_VAR 0 2
63149: PPUSH
63150: CALL_OW 259
63154: PPUSH
63155: CALL_OW 2
63159: ST_TO_ADDR
63160: GO 63118
63162: POP
63163: POP
// if not tmp then
63164: LD_VAR 0 5
63168: NOT
63169: IFFALSE 63173
// exit ;
63171: GO 63193
// result := SortListByListDesc ( units , tmp ) ;
63173: LD_ADDR_VAR 0 3
63177: PUSH
63178: LD_VAR 0 1
63182: PPUSH
63183: LD_VAR 0 5
63187: PPUSH
63188: CALL_OW 77
63192: ST_TO_ADDR
// end ;
63193: LD_VAR 0 3
63197: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63198: LD_INT 0
63200: PPUSH
63201: PPUSH
63202: PPUSH
// result := false ;
63203: LD_ADDR_VAR 0 3
63207: PUSH
63208: LD_INT 0
63210: ST_TO_ADDR
// x := GetX ( building ) ;
63211: LD_ADDR_VAR 0 4
63215: PUSH
63216: LD_VAR 0 2
63220: PPUSH
63221: CALL_OW 250
63225: ST_TO_ADDR
// y := GetY ( building ) ;
63226: LD_ADDR_VAR 0 5
63230: PUSH
63231: LD_VAR 0 2
63235: PPUSH
63236: CALL_OW 251
63240: ST_TO_ADDR
// if not building or not x or not y then
63241: LD_VAR 0 2
63245: NOT
63246: PUSH
63247: LD_VAR 0 4
63251: NOT
63252: OR
63253: PUSH
63254: LD_VAR 0 5
63258: NOT
63259: OR
63260: IFFALSE 63264
// exit ;
63262: GO 63356
// if GetTaskList ( unit ) then
63264: LD_VAR 0 1
63268: PPUSH
63269: CALL_OW 437
63273: IFFALSE 63356
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63275: LD_STRING e
63277: PUSH
63278: LD_VAR 0 1
63282: PPUSH
63283: CALL_OW 437
63287: PUSH
63288: LD_INT 1
63290: ARRAY
63291: PUSH
63292: LD_INT 1
63294: ARRAY
63295: EQUAL
63296: PUSH
63297: LD_VAR 0 4
63301: PUSH
63302: LD_VAR 0 1
63306: PPUSH
63307: CALL_OW 437
63311: PUSH
63312: LD_INT 1
63314: ARRAY
63315: PUSH
63316: LD_INT 2
63318: ARRAY
63319: EQUAL
63320: AND
63321: PUSH
63322: LD_VAR 0 5
63326: PUSH
63327: LD_VAR 0 1
63331: PPUSH
63332: CALL_OW 437
63336: PUSH
63337: LD_INT 1
63339: ARRAY
63340: PUSH
63341: LD_INT 3
63343: ARRAY
63344: EQUAL
63345: AND
63346: IFFALSE 63356
// result := true end ;
63348: LD_ADDR_VAR 0 3
63352: PUSH
63353: LD_INT 1
63355: ST_TO_ADDR
// end ;
63356: LD_VAR 0 3
63360: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63361: LD_INT 0
63363: PPUSH
// result := false ;
63364: LD_ADDR_VAR 0 4
63368: PUSH
63369: LD_INT 0
63371: ST_TO_ADDR
// if GetTaskList ( unit ) then
63372: LD_VAR 0 1
63376: PPUSH
63377: CALL_OW 437
63381: IFFALSE 63464
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63383: LD_STRING M
63385: PUSH
63386: LD_VAR 0 1
63390: PPUSH
63391: CALL_OW 437
63395: PUSH
63396: LD_INT 1
63398: ARRAY
63399: PUSH
63400: LD_INT 1
63402: ARRAY
63403: EQUAL
63404: PUSH
63405: LD_VAR 0 2
63409: PUSH
63410: LD_VAR 0 1
63414: PPUSH
63415: CALL_OW 437
63419: PUSH
63420: LD_INT 1
63422: ARRAY
63423: PUSH
63424: LD_INT 2
63426: ARRAY
63427: EQUAL
63428: AND
63429: PUSH
63430: LD_VAR 0 3
63434: PUSH
63435: LD_VAR 0 1
63439: PPUSH
63440: CALL_OW 437
63444: PUSH
63445: LD_INT 1
63447: ARRAY
63448: PUSH
63449: LD_INT 3
63451: ARRAY
63452: EQUAL
63453: AND
63454: IFFALSE 63464
// result := true ;
63456: LD_ADDR_VAR 0 4
63460: PUSH
63461: LD_INT 1
63463: ST_TO_ADDR
// end ; end ;
63464: LD_VAR 0 4
63468: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63469: LD_INT 0
63471: PPUSH
63472: PPUSH
63473: PPUSH
63474: PPUSH
// if not unit or not area then
63475: LD_VAR 0 1
63479: NOT
63480: PUSH
63481: LD_VAR 0 2
63485: NOT
63486: OR
63487: IFFALSE 63491
// exit ;
63489: GO 63655
// tmp := AreaToList ( area , i ) ;
63491: LD_ADDR_VAR 0 6
63495: PUSH
63496: LD_VAR 0 2
63500: PPUSH
63501: LD_VAR 0 5
63505: PPUSH
63506: CALL_OW 517
63510: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63511: LD_ADDR_VAR 0 5
63515: PUSH
63516: DOUBLE
63517: LD_INT 1
63519: DEC
63520: ST_TO_ADDR
63521: LD_VAR 0 6
63525: PUSH
63526: LD_INT 1
63528: ARRAY
63529: PUSH
63530: FOR_TO
63531: IFFALSE 63653
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63533: LD_ADDR_VAR 0 7
63537: PUSH
63538: LD_VAR 0 6
63542: PUSH
63543: LD_INT 1
63545: ARRAY
63546: PUSH
63547: LD_VAR 0 5
63551: ARRAY
63552: PUSH
63553: LD_VAR 0 6
63557: PUSH
63558: LD_INT 2
63560: ARRAY
63561: PUSH
63562: LD_VAR 0 5
63566: ARRAY
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63572: LD_VAR 0 7
63576: PUSH
63577: LD_INT 1
63579: ARRAY
63580: PPUSH
63581: LD_VAR 0 7
63585: PUSH
63586: LD_INT 2
63588: ARRAY
63589: PPUSH
63590: CALL_OW 428
63594: PUSH
63595: LD_INT 0
63597: EQUAL
63598: IFFALSE 63651
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63600: LD_VAR 0 1
63604: PPUSH
63605: LD_VAR 0 7
63609: PUSH
63610: LD_INT 1
63612: ARRAY
63613: PPUSH
63614: LD_VAR 0 7
63618: PUSH
63619: LD_INT 2
63621: ARRAY
63622: PPUSH
63623: LD_VAR 0 3
63627: PPUSH
63628: CALL_OW 48
// result := IsPlaced ( unit ) ;
63632: LD_ADDR_VAR 0 4
63636: PUSH
63637: LD_VAR 0 1
63641: PPUSH
63642: CALL_OW 305
63646: ST_TO_ADDR
// exit ;
63647: POP
63648: POP
63649: GO 63655
// end ; end ;
63651: GO 63530
63653: POP
63654: POP
// end ;
63655: LD_VAR 0 4
63659: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63660: LD_INT 0
63662: PPUSH
63663: PPUSH
63664: PPUSH
// if not side or side > 8 then
63665: LD_VAR 0 1
63669: NOT
63670: PUSH
63671: LD_VAR 0 1
63675: PUSH
63676: LD_INT 8
63678: GREATER
63679: OR
63680: IFFALSE 63684
// exit ;
63682: GO 63871
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63684: LD_ADDR_VAR 0 4
63688: PUSH
63689: LD_INT 22
63691: PUSH
63692: LD_VAR 0 1
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 21
63703: PUSH
63704: LD_INT 3
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PPUSH
63715: CALL_OW 69
63719: ST_TO_ADDR
// if not tmp then
63720: LD_VAR 0 4
63724: NOT
63725: IFFALSE 63729
// exit ;
63727: GO 63871
// enable_addtolog := true ;
63729: LD_ADDR_OWVAR 81
63733: PUSH
63734: LD_INT 1
63736: ST_TO_ADDR
// AddToLog ( [ ) ;
63737: LD_STRING [
63739: PPUSH
63740: CALL_OW 561
// for i in tmp do
63744: LD_ADDR_VAR 0 3
63748: PUSH
63749: LD_VAR 0 4
63753: PUSH
63754: FOR_IN
63755: IFFALSE 63862
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63757: LD_STRING [
63759: PUSH
63760: LD_VAR 0 3
63764: PPUSH
63765: CALL_OW 266
63769: STR
63770: PUSH
63771: LD_STRING , 
63773: STR
63774: PUSH
63775: LD_VAR 0 3
63779: PPUSH
63780: CALL_OW 250
63784: STR
63785: PUSH
63786: LD_STRING , 
63788: STR
63789: PUSH
63790: LD_VAR 0 3
63794: PPUSH
63795: CALL_OW 251
63799: STR
63800: PUSH
63801: LD_STRING , 
63803: STR
63804: PUSH
63805: LD_VAR 0 3
63809: PPUSH
63810: CALL_OW 254
63814: STR
63815: PUSH
63816: LD_STRING , 
63818: STR
63819: PUSH
63820: LD_VAR 0 3
63824: PPUSH
63825: LD_INT 1
63827: PPUSH
63828: CALL_OW 268
63832: STR
63833: PUSH
63834: LD_STRING , 
63836: STR
63837: PUSH
63838: LD_VAR 0 3
63842: PPUSH
63843: LD_INT 2
63845: PPUSH
63846: CALL_OW 268
63850: STR
63851: PUSH
63852: LD_STRING ],
63854: STR
63855: PPUSH
63856: CALL_OW 561
// end ;
63860: GO 63754
63862: POP
63863: POP
// AddToLog ( ]; ) ;
63864: LD_STRING ];
63866: PPUSH
63867: CALL_OW 561
// end ;
63871: LD_VAR 0 2
63875: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63876: LD_INT 0
63878: PPUSH
63879: PPUSH
63880: PPUSH
63881: PPUSH
63882: PPUSH
// if not area or not rate or not max then
63883: LD_VAR 0 1
63887: NOT
63888: PUSH
63889: LD_VAR 0 2
63893: NOT
63894: OR
63895: PUSH
63896: LD_VAR 0 4
63900: NOT
63901: OR
63902: IFFALSE 63906
// exit ;
63904: GO 64095
// while 1 do
63906: LD_INT 1
63908: IFFALSE 64095
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63910: LD_ADDR_VAR 0 9
63914: PUSH
63915: LD_VAR 0 1
63919: PPUSH
63920: LD_INT 1
63922: PPUSH
63923: CALL_OW 287
63927: PUSH
63928: LD_INT 10
63930: MUL
63931: ST_TO_ADDR
// r := rate / 10 ;
63932: LD_ADDR_VAR 0 7
63936: PUSH
63937: LD_VAR 0 2
63941: PUSH
63942: LD_INT 10
63944: DIVREAL
63945: ST_TO_ADDR
// time := 1 1$00 ;
63946: LD_ADDR_VAR 0 8
63950: PUSH
63951: LD_INT 2100
63953: ST_TO_ADDR
// if amount < min then
63954: LD_VAR 0 9
63958: PUSH
63959: LD_VAR 0 3
63963: LESS
63964: IFFALSE 63982
// r := r * 2 else
63966: LD_ADDR_VAR 0 7
63970: PUSH
63971: LD_VAR 0 7
63975: PUSH
63976: LD_INT 2
63978: MUL
63979: ST_TO_ADDR
63980: GO 64008
// if amount > max then
63982: LD_VAR 0 9
63986: PUSH
63987: LD_VAR 0 4
63991: GREATER
63992: IFFALSE 64008
// r := r / 2 ;
63994: LD_ADDR_VAR 0 7
63998: PUSH
63999: LD_VAR 0 7
64003: PUSH
64004: LD_INT 2
64006: DIVREAL
64007: ST_TO_ADDR
// time := time / r ;
64008: LD_ADDR_VAR 0 8
64012: PUSH
64013: LD_VAR 0 8
64017: PUSH
64018: LD_VAR 0 7
64022: DIVREAL
64023: ST_TO_ADDR
// if time < 0 then
64024: LD_VAR 0 8
64028: PUSH
64029: LD_INT 0
64031: LESS
64032: IFFALSE 64049
// time := time * - 1 ;
64034: LD_ADDR_VAR 0 8
64038: PUSH
64039: LD_VAR 0 8
64043: PUSH
64044: LD_INT 1
64046: NEG
64047: MUL
64048: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64049: LD_VAR 0 8
64053: PUSH
64054: LD_INT 35
64056: PPUSH
64057: LD_INT 875
64059: PPUSH
64060: CALL_OW 12
64064: PLUS
64065: PPUSH
64066: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64070: LD_INT 1
64072: PPUSH
64073: LD_INT 5
64075: PPUSH
64076: CALL_OW 12
64080: PPUSH
64081: LD_VAR 0 1
64085: PPUSH
64086: LD_INT 1
64088: PPUSH
64089: CALL_OW 55
// end ;
64093: GO 63906
// end ;
64095: LD_VAR 0 5
64099: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64100: LD_INT 0
64102: PPUSH
64103: PPUSH
64104: PPUSH
64105: PPUSH
64106: PPUSH
64107: PPUSH
64108: PPUSH
64109: PPUSH
// if not turrets or not factories then
64110: LD_VAR 0 1
64114: NOT
64115: PUSH
64116: LD_VAR 0 2
64120: NOT
64121: OR
64122: IFFALSE 64126
// exit ;
64124: GO 64433
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64126: LD_ADDR_VAR 0 10
64130: PUSH
64131: LD_INT 5
64133: PUSH
64134: LD_INT 6
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 2
64143: PUSH
64144: LD_INT 4
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 3
64153: PUSH
64154: LD_INT 5
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 24
64168: PUSH
64169: LD_INT 25
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 23
64178: PUSH
64179: LD_INT 27
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 42
64192: PUSH
64193: LD_INT 43
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 44
64202: PUSH
64203: LD_INT 46
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 45
64212: PUSH
64213: LD_INT 47
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: LIST
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: LIST
64229: ST_TO_ADDR
// result := [ ] ;
64230: LD_ADDR_VAR 0 3
64234: PUSH
64235: EMPTY
64236: ST_TO_ADDR
// for i in turrets do
64237: LD_ADDR_VAR 0 4
64241: PUSH
64242: LD_VAR 0 1
64246: PUSH
64247: FOR_IN
64248: IFFALSE 64431
// begin nat := GetNation ( i ) ;
64250: LD_ADDR_VAR 0 7
64254: PUSH
64255: LD_VAR 0 4
64259: PPUSH
64260: CALL_OW 248
64264: ST_TO_ADDR
// weapon := 0 ;
64265: LD_ADDR_VAR 0 8
64269: PUSH
64270: LD_INT 0
64272: ST_TO_ADDR
// if not nat then
64273: LD_VAR 0 7
64277: NOT
64278: IFFALSE 64282
// continue ;
64280: GO 64247
// for j in list [ nat ] do
64282: LD_ADDR_VAR 0 5
64286: PUSH
64287: LD_VAR 0 10
64291: PUSH
64292: LD_VAR 0 7
64296: ARRAY
64297: PUSH
64298: FOR_IN
64299: IFFALSE 64340
// if GetBWeapon ( i ) = j [ 1 ] then
64301: LD_VAR 0 4
64305: PPUSH
64306: CALL_OW 269
64310: PUSH
64311: LD_VAR 0 5
64315: PUSH
64316: LD_INT 1
64318: ARRAY
64319: EQUAL
64320: IFFALSE 64338
// begin weapon := j [ 2 ] ;
64322: LD_ADDR_VAR 0 8
64326: PUSH
64327: LD_VAR 0 5
64331: PUSH
64332: LD_INT 2
64334: ARRAY
64335: ST_TO_ADDR
// break ;
64336: GO 64340
// end ;
64338: GO 64298
64340: POP
64341: POP
// if not weapon then
64342: LD_VAR 0 8
64346: NOT
64347: IFFALSE 64351
// continue ;
64349: GO 64247
// for k in factories do
64351: LD_ADDR_VAR 0 6
64355: PUSH
64356: LD_VAR 0 2
64360: PUSH
64361: FOR_IN
64362: IFFALSE 64427
// begin weapons := AvailableWeaponList ( k ) ;
64364: LD_ADDR_VAR 0 9
64368: PUSH
64369: LD_VAR 0 6
64373: PPUSH
64374: CALL_OW 478
64378: ST_TO_ADDR
// if not weapons then
64379: LD_VAR 0 9
64383: NOT
64384: IFFALSE 64388
// continue ;
64386: GO 64361
// if weapon in weapons then
64388: LD_VAR 0 8
64392: PUSH
64393: LD_VAR 0 9
64397: IN
64398: IFFALSE 64425
// begin result := [ i , weapon ] ;
64400: LD_ADDR_VAR 0 3
64404: PUSH
64405: LD_VAR 0 4
64409: PUSH
64410: LD_VAR 0 8
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: ST_TO_ADDR
// exit ;
64419: POP
64420: POP
64421: POP
64422: POP
64423: GO 64433
// end ; end ;
64425: GO 64361
64427: POP
64428: POP
// end ;
64429: GO 64247
64431: POP
64432: POP
// end ;
64433: LD_VAR 0 3
64437: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64438: LD_INT 0
64440: PPUSH
// if not side or side > 8 then
64441: LD_VAR 0 3
64445: NOT
64446: PUSH
64447: LD_VAR 0 3
64451: PUSH
64452: LD_INT 8
64454: GREATER
64455: OR
64456: IFFALSE 64460
// exit ;
64458: GO 64519
// if not range then
64460: LD_VAR 0 4
64464: NOT
64465: IFFALSE 64476
// range := - 12 ;
64467: LD_ADDR_VAR 0 4
64471: PUSH
64472: LD_INT 12
64474: NEG
64475: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64476: LD_VAR 0 1
64480: PPUSH
64481: LD_VAR 0 2
64485: PPUSH
64486: LD_VAR 0 3
64490: PPUSH
64491: LD_VAR 0 4
64495: PPUSH
64496: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64500: LD_VAR 0 1
64504: PPUSH
64505: LD_VAR 0 2
64509: PPUSH
64510: LD_VAR 0 3
64514: PPUSH
64515: CALL_OW 331
// end ;
64519: LD_VAR 0 5
64523: RET
// export function Video ( mode ) ; begin
64524: LD_INT 0
64526: PPUSH
// ingame_video = mode ;
64527: LD_ADDR_OWVAR 52
64531: PUSH
64532: LD_VAR 0 1
64536: ST_TO_ADDR
// interface_hidden = mode ;
64537: LD_ADDR_OWVAR 54
64541: PUSH
64542: LD_VAR 0 1
64546: ST_TO_ADDR
// end ;
64547: LD_VAR 0 2
64551: RET
// export function Join ( array , element ) ; begin
64552: LD_INT 0
64554: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64555: LD_ADDR_VAR 0 3
64559: PUSH
64560: LD_VAR 0 1
64564: PPUSH
64565: LD_VAR 0 1
64569: PUSH
64570: LD_INT 1
64572: PLUS
64573: PPUSH
64574: LD_VAR 0 2
64578: PPUSH
64579: CALL_OW 1
64583: ST_TO_ADDR
// end ;
64584: LD_VAR 0 3
64588: RET
// export function JoinUnion ( array , element ) ; begin
64589: LD_INT 0
64591: PPUSH
// result := array union element ;
64592: LD_ADDR_VAR 0 3
64596: PUSH
64597: LD_VAR 0 1
64601: PUSH
64602: LD_VAR 0 2
64606: UNION
64607: ST_TO_ADDR
// end ;
64608: LD_VAR 0 3
64612: RET
// export function GetBehemoths ( side ) ; begin
64613: LD_INT 0
64615: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64616: LD_ADDR_VAR 0 2
64620: PUSH
64621: LD_INT 22
64623: PUSH
64624: LD_VAR 0 1
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 31
64635: PUSH
64636: LD_INT 25
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PPUSH
64647: CALL_OW 69
64651: ST_TO_ADDR
// end ;
64652: LD_VAR 0 2
64656: RET
// export function Shuffle ( array ) ; var i , index ; begin
64657: LD_INT 0
64659: PPUSH
64660: PPUSH
64661: PPUSH
// result := [ ] ;
64662: LD_ADDR_VAR 0 2
64666: PUSH
64667: EMPTY
64668: ST_TO_ADDR
// if not array then
64669: LD_VAR 0 1
64673: NOT
64674: IFFALSE 64678
// exit ;
64676: GO 64777
// Randomize ;
64678: CALL_OW 10
// for i = array downto 1 do
64682: LD_ADDR_VAR 0 3
64686: PUSH
64687: DOUBLE
64688: LD_VAR 0 1
64692: INC
64693: ST_TO_ADDR
64694: LD_INT 1
64696: PUSH
64697: FOR_DOWNTO
64698: IFFALSE 64775
// begin index := rand ( 1 , array ) ;
64700: LD_ADDR_VAR 0 4
64704: PUSH
64705: LD_INT 1
64707: PPUSH
64708: LD_VAR 0 1
64712: PPUSH
64713: CALL_OW 12
64717: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64718: LD_ADDR_VAR 0 2
64722: PUSH
64723: LD_VAR 0 2
64727: PPUSH
64728: LD_VAR 0 2
64732: PUSH
64733: LD_INT 1
64735: PLUS
64736: PPUSH
64737: LD_VAR 0 1
64741: PUSH
64742: LD_VAR 0 4
64746: ARRAY
64747: PPUSH
64748: CALL_OW 2
64752: ST_TO_ADDR
// array := Delete ( array , index ) ;
64753: LD_ADDR_VAR 0 1
64757: PUSH
64758: LD_VAR 0 1
64762: PPUSH
64763: LD_VAR 0 4
64767: PPUSH
64768: CALL_OW 3
64772: ST_TO_ADDR
// end ;
64773: GO 64697
64775: POP
64776: POP
// end ;
64777: LD_VAR 0 2
64781: RET
// export function GetBaseMaterials ( base ) ; begin
64782: LD_INT 0
64784: PPUSH
// result := [ 0 , 0 , 0 ] ;
64785: LD_ADDR_VAR 0 2
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: LD_INT 0
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: LIST
64803: ST_TO_ADDR
// if not base then
64804: LD_VAR 0 1
64808: NOT
64809: IFFALSE 64813
// exit ;
64811: GO 64862
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64813: LD_ADDR_VAR 0 2
64817: PUSH
64818: LD_VAR 0 1
64822: PPUSH
64823: LD_INT 1
64825: PPUSH
64826: CALL_OW 275
64830: PUSH
64831: LD_VAR 0 1
64835: PPUSH
64836: LD_INT 2
64838: PPUSH
64839: CALL_OW 275
64843: PUSH
64844: LD_VAR 0 1
64848: PPUSH
64849: LD_INT 3
64851: PPUSH
64852: CALL_OW 275
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: LIST
64861: ST_TO_ADDR
// end ;
64862: LD_VAR 0 2
64866: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64867: LD_INT 0
64869: PPUSH
64870: PPUSH
// result := array ;
64871: LD_ADDR_VAR 0 3
64875: PUSH
64876: LD_VAR 0 1
64880: ST_TO_ADDR
// if size >= result then
64881: LD_VAR 0 2
64885: PUSH
64886: LD_VAR 0 3
64890: GREATEREQUAL
64891: IFFALSE 64895
// exit ;
64893: GO 64945
// if size then
64895: LD_VAR 0 2
64899: IFFALSE 64945
// for i := array downto size do
64901: LD_ADDR_VAR 0 4
64905: PUSH
64906: DOUBLE
64907: LD_VAR 0 1
64911: INC
64912: ST_TO_ADDR
64913: LD_VAR 0 2
64917: PUSH
64918: FOR_DOWNTO
64919: IFFALSE 64943
// result := Delete ( result , result ) ;
64921: LD_ADDR_VAR 0 3
64925: PUSH
64926: LD_VAR 0 3
64930: PPUSH
64931: LD_VAR 0 3
64935: PPUSH
64936: CALL_OW 3
64940: ST_TO_ADDR
64941: GO 64918
64943: POP
64944: POP
// end ;
64945: LD_VAR 0 3
64949: RET
// export function ComExit ( unit ) ; var tmp ; begin
64950: LD_INT 0
64952: PPUSH
64953: PPUSH
// if not IsInUnit ( unit ) then
64954: LD_VAR 0 1
64958: PPUSH
64959: CALL_OW 310
64963: NOT
64964: IFFALSE 64968
// exit ;
64966: GO 65028
// tmp := IsInUnit ( unit ) ;
64968: LD_ADDR_VAR 0 3
64972: PUSH
64973: LD_VAR 0 1
64977: PPUSH
64978: CALL_OW 310
64982: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64983: LD_VAR 0 3
64987: PPUSH
64988: CALL_OW 247
64992: PUSH
64993: LD_INT 2
64995: EQUAL
64996: IFFALSE 65009
// ComExitVehicle ( unit ) else
64998: LD_VAR 0 1
65002: PPUSH
65003: CALL_OW 121
65007: GO 65018
// ComExitBuilding ( unit ) ;
65009: LD_VAR 0 1
65013: PPUSH
65014: CALL_OW 122
// result := tmp ;
65018: LD_ADDR_VAR 0 2
65022: PUSH
65023: LD_VAR 0 3
65027: ST_TO_ADDR
// end ;
65028: LD_VAR 0 2
65032: RET
// export function ComExitAll ( units ) ; var i ; begin
65033: LD_INT 0
65035: PPUSH
65036: PPUSH
// if not units then
65037: LD_VAR 0 1
65041: NOT
65042: IFFALSE 65046
// exit ;
65044: GO 65072
// for i in units do
65046: LD_ADDR_VAR 0 3
65050: PUSH
65051: LD_VAR 0 1
65055: PUSH
65056: FOR_IN
65057: IFFALSE 65070
// ComExit ( i ) ;
65059: LD_VAR 0 3
65063: PPUSH
65064: CALL 64950 0 1
65068: GO 65056
65070: POP
65071: POP
// end ;
65072: LD_VAR 0 2
65076: RET
// export function ResetHc ; begin
65077: LD_INT 0
65079: PPUSH
// InitHc ;
65080: CALL_OW 19
// hc_importance := 0 ;
65084: LD_ADDR_OWVAR 32
65088: PUSH
65089: LD_INT 0
65091: ST_TO_ADDR
// end ;
65092: LD_VAR 0 1
65096: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65097: LD_INT 0
65099: PPUSH
65100: PPUSH
65101: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65102: LD_ADDR_VAR 0 6
65106: PUSH
65107: LD_VAR 0 1
65111: PUSH
65112: LD_VAR 0 3
65116: PLUS
65117: PUSH
65118: LD_INT 2
65120: DIV
65121: ST_TO_ADDR
// if _x < 0 then
65122: LD_VAR 0 6
65126: PUSH
65127: LD_INT 0
65129: LESS
65130: IFFALSE 65147
// _x := _x * - 1 ;
65132: LD_ADDR_VAR 0 6
65136: PUSH
65137: LD_VAR 0 6
65141: PUSH
65142: LD_INT 1
65144: NEG
65145: MUL
65146: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65147: LD_ADDR_VAR 0 7
65151: PUSH
65152: LD_VAR 0 2
65156: PUSH
65157: LD_VAR 0 4
65161: PLUS
65162: PUSH
65163: LD_INT 2
65165: DIV
65166: ST_TO_ADDR
// if _y < 0 then
65167: LD_VAR 0 7
65171: PUSH
65172: LD_INT 0
65174: LESS
65175: IFFALSE 65192
// _y := _y * - 1 ;
65177: LD_ADDR_VAR 0 7
65181: PUSH
65182: LD_VAR 0 7
65186: PUSH
65187: LD_INT 1
65189: NEG
65190: MUL
65191: ST_TO_ADDR
// result := [ _x , _y ] ;
65192: LD_ADDR_VAR 0 5
65196: PUSH
65197: LD_VAR 0 6
65201: PUSH
65202: LD_VAR 0 7
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: ST_TO_ADDR
// end ;
65211: LD_VAR 0 5
65215: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65216: LD_INT 0
65218: PPUSH
65219: PPUSH
65220: PPUSH
65221: PPUSH
// task := GetTaskList ( unit ) ;
65222: LD_ADDR_VAR 0 7
65226: PUSH
65227: LD_VAR 0 1
65231: PPUSH
65232: CALL_OW 437
65236: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65237: LD_VAR 0 7
65241: NOT
65242: PUSH
65243: LD_VAR 0 1
65247: PPUSH
65248: LD_VAR 0 2
65252: PPUSH
65253: CALL_OW 308
65257: NOT
65258: AND
65259: IFFALSE 65263
// exit ;
65261: GO 65381
// if IsInArea ( unit , area ) then
65263: LD_VAR 0 1
65267: PPUSH
65268: LD_VAR 0 2
65272: PPUSH
65273: CALL_OW 308
65277: IFFALSE 65295
// begin ComMoveToArea ( unit , goAway ) ;
65279: LD_VAR 0 1
65283: PPUSH
65284: LD_VAR 0 3
65288: PPUSH
65289: CALL_OW 113
// exit ;
65293: GO 65381
// end ; if task [ 1 ] [ 1 ] <> M then
65295: LD_VAR 0 7
65299: PUSH
65300: LD_INT 1
65302: ARRAY
65303: PUSH
65304: LD_INT 1
65306: ARRAY
65307: PUSH
65308: LD_STRING M
65310: NONEQUAL
65311: IFFALSE 65315
// exit ;
65313: GO 65381
// x := task [ 1 ] [ 2 ] ;
65315: LD_ADDR_VAR 0 5
65319: PUSH
65320: LD_VAR 0 7
65324: PUSH
65325: LD_INT 1
65327: ARRAY
65328: PUSH
65329: LD_INT 2
65331: ARRAY
65332: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65333: LD_ADDR_VAR 0 6
65337: PUSH
65338: LD_VAR 0 7
65342: PUSH
65343: LD_INT 1
65345: ARRAY
65346: PUSH
65347: LD_INT 3
65349: ARRAY
65350: ST_TO_ADDR
// if InArea ( x , y , area ) then
65351: LD_VAR 0 5
65355: PPUSH
65356: LD_VAR 0 6
65360: PPUSH
65361: LD_VAR 0 2
65365: PPUSH
65366: CALL_OW 309
65370: IFFALSE 65381
// ComStop ( unit ) ;
65372: LD_VAR 0 1
65376: PPUSH
65377: CALL_OW 141
// end ;
65381: LD_VAR 0 4
65385: RET
// export function Abs ( value ) ; begin
65386: LD_INT 0
65388: PPUSH
// result := value ;
65389: LD_ADDR_VAR 0 2
65393: PUSH
65394: LD_VAR 0 1
65398: ST_TO_ADDR
// if value < 0 then
65399: LD_VAR 0 1
65403: PUSH
65404: LD_INT 0
65406: LESS
65407: IFFALSE 65424
// result := value * - 1 ;
65409: LD_ADDR_VAR 0 2
65413: PUSH
65414: LD_VAR 0 1
65418: PUSH
65419: LD_INT 1
65421: NEG
65422: MUL
65423: ST_TO_ADDR
// end ;
65424: LD_VAR 0 2
65428: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65429: LD_INT 0
65431: PPUSH
65432: PPUSH
65433: PPUSH
65434: PPUSH
65435: PPUSH
65436: PPUSH
65437: PPUSH
65438: PPUSH
// if not unit or not building then
65439: LD_VAR 0 1
65443: NOT
65444: PUSH
65445: LD_VAR 0 2
65449: NOT
65450: OR
65451: IFFALSE 65455
// exit ;
65453: GO 65681
// x := GetX ( building ) ;
65455: LD_ADDR_VAR 0 4
65459: PUSH
65460: LD_VAR 0 2
65464: PPUSH
65465: CALL_OW 250
65469: ST_TO_ADDR
// y := GetY ( building ) ;
65470: LD_ADDR_VAR 0 6
65474: PUSH
65475: LD_VAR 0 2
65479: PPUSH
65480: CALL_OW 251
65484: ST_TO_ADDR
// d := GetDir ( building ) ;
65485: LD_ADDR_VAR 0 8
65489: PUSH
65490: LD_VAR 0 2
65494: PPUSH
65495: CALL_OW 254
65499: ST_TO_ADDR
// r := 4 ;
65500: LD_ADDR_VAR 0 9
65504: PUSH
65505: LD_INT 4
65507: ST_TO_ADDR
// for i := 1 to 5 do
65508: LD_ADDR_VAR 0 10
65512: PUSH
65513: DOUBLE
65514: LD_INT 1
65516: DEC
65517: ST_TO_ADDR
65518: LD_INT 5
65520: PUSH
65521: FOR_TO
65522: IFFALSE 65679
// begin _x := ShiftX ( x , d , r + i ) ;
65524: LD_ADDR_VAR 0 5
65528: PUSH
65529: LD_VAR 0 4
65533: PPUSH
65534: LD_VAR 0 8
65538: PPUSH
65539: LD_VAR 0 9
65543: PUSH
65544: LD_VAR 0 10
65548: PLUS
65549: PPUSH
65550: CALL_OW 272
65554: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65555: LD_ADDR_VAR 0 7
65559: PUSH
65560: LD_VAR 0 6
65564: PPUSH
65565: LD_VAR 0 8
65569: PPUSH
65570: LD_VAR 0 9
65574: PUSH
65575: LD_VAR 0 10
65579: PLUS
65580: PPUSH
65581: CALL_OW 273
65585: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65586: LD_VAR 0 5
65590: PPUSH
65591: LD_VAR 0 7
65595: PPUSH
65596: CALL_OW 488
65600: PUSH
65601: LD_VAR 0 5
65605: PPUSH
65606: LD_VAR 0 7
65610: PPUSH
65611: CALL_OW 428
65615: PPUSH
65616: CALL_OW 247
65620: PUSH
65621: LD_INT 3
65623: PUSH
65624: LD_INT 2
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: IN
65631: NOT
65632: AND
65633: IFFALSE 65677
// begin ComMoveXY ( unit , _x , _y ) ;
65635: LD_VAR 0 1
65639: PPUSH
65640: LD_VAR 0 5
65644: PPUSH
65645: LD_VAR 0 7
65649: PPUSH
65650: CALL_OW 111
// result := [ _x , _y ] ;
65654: LD_ADDR_VAR 0 3
65658: PUSH
65659: LD_VAR 0 5
65663: PUSH
65664: LD_VAR 0 7
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: ST_TO_ADDR
// exit ;
65673: POP
65674: POP
65675: GO 65681
// end ; end ;
65677: GO 65521
65679: POP
65680: POP
// end ;
65681: LD_VAR 0 3
65685: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65686: LD_INT 0
65688: PPUSH
65689: PPUSH
65690: PPUSH
// result := 0 ;
65691: LD_ADDR_VAR 0 3
65695: PUSH
65696: LD_INT 0
65698: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65699: LD_VAR 0 1
65703: PUSH
65704: LD_INT 0
65706: LESS
65707: PUSH
65708: LD_VAR 0 1
65712: PUSH
65713: LD_INT 8
65715: GREATER
65716: OR
65717: PUSH
65718: LD_VAR 0 2
65722: PUSH
65723: LD_INT 0
65725: LESS
65726: OR
65727: PUSH
65728: LD_VAR 0 2
65732: PUSH
65733: LD_INT 8
65735: GREATER
65736: OR
65737: IFFALSE 65741
// exit ;
65739: GO 65816
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65741: LD_ADDR_VAR 0 4
65745: PUSH
65746: LD_INT 22
65748: PUSH
65749: LD_VAR 0 2
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PPUSH
65758: CALL_OW 69
65762: PUSH
65763: FOR_IN
65764: IFFALSE 65814
// begin un := UnitShoot ( i ) ;
65766: LD_ADDR_VAR 0 5
65770: PUSH
65771: LD_VAR 0 4
65775: PPUSH
65776: CALL_OW 504
65780: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65781: LD_VAR 0 5
65785: PPUSH
65786: CALL_OW 255
65790: PUSH
65791: LD_VAR 0 1
65795: EQUAL
65796: IFFALSE 65812
// begin result := un ;
65798: LD_ADDR_VAR 0 3
65802: PUSH
65803: LD_VAR 0 5
65807: ST_TO_ADDR
// exit ;
65808: POP
65809: POP
65810: GO 65816
// end ; end ;
65812: GO 65763
65814: POP
65815: POP
// end ;
65816: LD_VAR 0 3
65820: RET
// export function GetCargoBay ( units ) ; begin
65821: LD_INT 0
65823: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65824: LD_ADDR_VAR 0 2
65828: PUSH
65829: LD_VAR 0 1
65833: PPUSH
65834: LD_INT 2
65836: PUSH
65837: LD_INT 34
65839: PUSH
65840: LD_INT 12
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 34
65849: PUSH
65850: LD_INT 51
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 34
65859: PUSH
65860: LD_INT 32
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 34
65869: PUSH
65870: LD_INT 89
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: PPUSH
65884: CALL_OW 72
65888: ST_TO_ADDR
// end ;
65889: LD_VAR 0 2
65893: RET
// export function Negate ( value ) ; begin
65894: LD_INT 0
65896: PPUSH
// result := not value ;
65897: LD_ADDR_VAR 0 2
65901: PUSH
65902: LD_VAR 0 1
65906: NOT
65907: ST_TO_ADDR
// end ;
65908: LD_VAR 0 2
65912: RET
// export function Inc ( value ) ; begin
65913: LD_INT 0
65915: PPUSH
// result := value + 1 ;
65916: LD_ADDR_VAR 0 2
65920: PUSH
65921: LD_VAR 0 1
65925: PUSH
65926: LD_INT 1
65928: PLUS
65929: ST_TO_ADDR
// end ;
65930: LD_VAR 0 2
65934: RET
// export function Dec ( value ) ; begin
65935: LD_INT 0
65937: PPUSH
// result := value - 1 ;
65938: LD_ADDR_VAR 0 2
65942: PUSH
65943: LD_VAR 0 1
65947: PUSH
65948: LD_INT 1
65950: MINUS
65951: ST_TO_ADDR
// end ;
65952: LD_VAR 0 2
65956: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65957: LD_INT 0
65959: PPUSH
65960: PPUSH
65961: PPUSH
65962: PPUSH
65963: PPUSH
65964: PPUSH
65965: PPUSH
65966: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65967: LD_VAR 0 1
65971: PPUSH
65972: LD_VAR 0 2
65976: PPUSH
65977: CALL_OW 488
65981: NOT
65982: PUSH
65983: LD_VAR 0 3
65987: PPUSH
65988: LD_VAR 0 4
65992: PPUSH
65993: CALL_OW 488
65997: NOT
65998: OR
65999: IFFALSE 66012
// begin result := - 1 ;
66001: LD_ADDR_VAR 0 5
66005: PUSH
66006: LD_INT 1
66008: NEG
66009: ST_TO_ADDR
// exit ;
66010: GO 66247
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66012: LD_ADDR_VAR 0 12
66016: PUSH
66017: LD_VAR 0 1
66021: PPUSH
66022: LD_VAR 0 2
66026: PPUSH
66027: LD_VAR 0 3
66031: PPUSH
66032: LD_VAR 0 4
66036: PPUSH
66037: CALL 65097 0 4
66041: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66042: LD_ADDR_VAR 0 11
66046: PUSH
66047: LD_VAR 0 1
66051: PPUSH
66052: LD_VAR 0 2
66056: PPUSH
66057: LD_VAR 0 12
66061: PUSH
66062: LD_INT 1
66064: ARRAY
66065: PPUSH
66066: LD_VAR 0 12
66070: PUSH
66071: LD_INT 2
66073: ARRAY
66074: PPUSH
66075: CALL_OW 298
66079: ST_TO_ADDR
// distance := 9999 ;
66080: LD_ADDR_VAR 0 10
66084: PUSH
66085: LD_INT 9999
66087: ST_TO_ADDR
// for i := 0 to 5 do
66088: LD_ADDR_VAR 0 6
66092: PUSH
66093: DOUBLE
66094: LD_INT 0
66096: DEC
66097: ST_TO_ADDR
66098: LD_INT 5
66100: PUSH
66101: FOR_TO
66102: IFFALSE 66245
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66104: LD_ADDR_VAR 0 7
66108: PUSH
66109: LD_VAR 0 1
66113: PPUSH
66114: LD_VAR 0 6
66118: PPUSH
66119: LD_VAR 0 11
66123: PPUSH
66124: CALL_OW 272
66128: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66129: LD_ADDR_VAR 0 8
66133: PUSH
66134: LD_VAR 0 2
66138: PPUSH
66139: LD_VAR 0 6
66143: PPUSH
66144: LD_VAR 0 11
66148: PPUSH
66149: CALL_OW 273
66153: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66154: LD_VAR 0 7
66158: PPUSH
66159: LD_VAR 0 8
66163: PPUSH
66164: CALL_OW 488
66168: NOT
66169: IFFALSE 66173
// continue ;
66171: GO 66101
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66173: LD_ADDR_VAR 0 9
66177: PUSH
66178: LD_VAR 0 12
66182: PUSH
66183: LD_INT 1
66185: ARRAY
66186: PPUSH
66187: LD_VAR 0 12
66191: PUSH
66192: LD_INT 2
66194: ARRAY
66195: PPUSH
66196: LD_VAR 0 7
66200: PPUSH
66201: LD_VAR 0 8
66205: PPUSH
66206: CALL_OW 298
66210: ST_TO_ADDR
// if tmp < distance then
66211: LD_VAR 0 9
66215: PUSH
66216: LD_VAR 0 10
66220: LESS
66221: IFFALSE 66243
// begin result := i ;
66223: LD_ADDR_VAR 0 5
66227: PUSH
66228: LD_VAR 0 6
66232: ST_TO_ADDR
// distance := tmp ;
66233: LD_ADDR_VAR 0 10
66237: PUSH
66238: LD_VAR 0 9
66242: ST_TO_ADDR
// end ; end ;
66243: GO 66101
66245: POP
66246: POP
// end ;
66247: LD_VAR 0 5
66251: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66252: LD_INT 0
66254: PPUSH
66255: PPUSH
// if not driver or not IsInUnit ( driver ) then
66256: LD_VAR 0 1
66260: NOT
66261: PUSH
66262: LD_VAR 0 1
66266: PPUSH
66267: CALL_OW 310
66271: NOT
66272: OR
66273: IFFALSE 66277
// exit ;
66275: GO 66367
// vehicle := IsInUnit ( driver ) ;
66277: LD_ADDR_VAR 0 3
66281: PUSH
66282: LD_VAR 0 1
66286: PPUSH
66287: CALL_OW 310
66291: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66292: LD_VAR 0 1
66296: PPUSH
66297: LD_STRING \
66299: PUSH
66300: LD_INT 0
66302: PUSH
66303: LD_INT 0
66305: PUSH
66306: LD_INT 0
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: LD_INT 0
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: PUSH
66327: LD_STRING E
66329: PUSH
66330: LD_INT 0
66332: PUSH
66333: LD_INT 0
66335: PUSH
66336: LD_VAR 0 3
66340: PUSH
66341: LD_INT 0
66343: PUSH
66344: LD_INT 0
66346: PUSH
66347: LD_INT 0
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PPUSH
66363: CALL_OW 446
// end ;
66367: LD_VAR 0 2
66371: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66372: LD_INT 0
66374: PPUSH
66375: PPUSH
// if not driver or not IsInUnit ( driver ) then
66376: LD_VAR 0 1
66380: NOT
66381: PUSH
66382: LD_VAR 0 1
66386: PPUSH
66387: CALL_OW 310
66391: NOT
66392: OR
66393: IFFALSE 66397
// exit ;
66395: GO 66487
// vehicle := IsInUnit ( driver ) ;
66397: LD_ADDR_VAR 0 3
66401: PUSH
66402: LD_VAR 0 1
66406: PPUSH
66407: CALL_OW 310
66411: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66412: LD_VAR 0 1
66416: PPUSH
66417: LD_STRING \
66419: PUSH
66420: LD_INT 0
66422: PUSH
66423: LD_INT 0
66425: PUSH
66426: LD_INT 0
66428: PUSH
66429: LD_INT 0
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: LD_INT 0
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: PUSH
66447: LD_STRING E
66449: PUSH
66450: LD_INT 0
66452: PUSH
66453: LD_INT 0
66455: PUSH
66456: LD_VAR 0 3
66460: PUSH
66461: LD_INT 0
66463: PUSH
66464: LD_INT 0
66466: PUSH
66467: LD_INT 0
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PPUSH
66483: CALL_OW 447
// end ;
66487: LD_VAR 0 2
66491: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66492: LD_INT 0
66494: PPUSH
66495: PPUSH
66496: PPUSH
// tmp := [ ] ;
66497: LD_ADDR_VAR 0 5
66501: PUSH
66502: EMPTY
66503: ST_TO_ADDR
// for i in units do
66504: LD_ADDR_VAR 0 4
66508: PUSH
66509: LD_VAR 0 1
66513: PUSH
66514: FOR_IN
66515: IFFALSE 66553
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66517: LD_ADDR_VAR 0 5
66521: PUSH
66522: LD_VAR 0 5
66526: PPUSH
66527: LD_VAR 0 5
66531: PUSH
66532: LD_INT 1
66534: PLUS
66535: PPUSH
66536: LD_VAR 0 4
66540: PPUSH
66541: CALL_OW 256
66545: PPUSH
66546: CALL_OW 2
66550: ST_TO_ADDR
66551: GO 66514
66553: POP
66554: POP
// if not tmp then
66555: LD_VAR 0 5
66559: NOT
66560: IFFALSE 66564
// exit ;
66562: GO 66612
// if asc then
66564: LD_VAR 0 2
66568: IFFALSE 66592
// result := SortListByListAsc ( units , tmp ) else
66570: LD_ADDR_VAR 0 3
66574: PUSH
66575: LD_VAR 0 1
66579: PPUSH
66580: LD_VAR 0 5
66584: PPUSH
66585: CALL_OW 76
66589: ST_TO_ADDR
66590: GO 66612
// result := SortListByListDesc ( units , tmp ) ;
66592: LD_ADDR_VAR 0 3
66596: PUSH
66597: LD_VAR 0 1
66601: PPUSH
66602: LD_VAR 0 5
66606: PPUSH
66607: CALL_OW 77
66611: ST_TO_ADDR
// end ;
66612: LD_VAR 0 3
66616: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66617: LD_INT 0
66619: PPUSH
66620: PPUSH
// task := GetTaskList ( mech ) ;
66621: LD_ADDR_VAR 0 4
66625: PUSH
66626: LD_VAR 0 1
66630: PPUSH
66631: CALL_OW 437
66635: ST_TO_ADDR
// if not task then
66636: LD_VAR 0 4
66640: NOT
66641: IFFALSE 66645
// exit ;
66643: GO 66687
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66645: LD_ADDR_VAR 0 3
66649: PUSH
66650: LD_VAR 0 4
66654: PUSH
66655: LD_INT 1
66657: ARRAY
66658: PUSH
66659: LD_INT 1
66661: ARRAY
66662: PUSH
66663: LD_STRING r
66665: EQUAL
66666: PUSH
66667: LD_VAR 0 4
66671: PUSH
66672: LD_INT 1
66674: ARRAY
66675: PUSH
66676: LD_INT 4
66678: ARRAY
66679: PUSH
66680: LD_VAR 0 2
66684: EQUAL
66685: AND
66686: ST_TO_ADDR
// end ;
66687: LD_VAR 0 3
66691: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66692: LD_INT 0
66694: PPUSH
// SetDir ( unit , d ) ;
66695: LD_VAR 0 1
66699: PPUSH
66700: LD_VAR 0 4
66704: PPUSH
66705: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66709: LD_VAR 0 1
66713: PPUSH
66714: LD_VAR 0 2
66718: PPUSH
66719: LD_VAR 0 3
66723: PPUSH
66724: LD_VAR 0 5
66728: PPUSH
66729: CALL_OW 48
// end ;
66733: LD_VAR 0 6
66737: RET
// export function ToNaturalNumber ( number ) ; begin
66738: LD_INT 0
66740: PPUSH
// result := number div 1 ;
66741: LD_ADDR_VAR 0 2
66745: PUSH
66746: LD_VAR 0 1
66750: PUSH
66751: LD_INT 1
66753: DIV
66754: ST_TO_ADDR
// if number < 0 then
66755: LD_VAR 0 1
66759: PUSH
66760: LD_INT 0
66762: LESS
66763: IFFALSE 66773
// result := 0 ;
66765: LD_ADDR_VAR 0 2
66769: PUSH
66770: LD_INT 0
66772: ST_TO_ADDR
// end ;
66773: LD_VAR 0 2
66777: RET
// export function SortByClass ( units , class ) ; var un ; begin
66778: LD_INT 0
66780: PPUSH
66781: PPUSH
// if not units or not class then
66782: LD_VAR 0 1
66786: NOT
66787: PUSH
66788: LD_VAR 0 2
66792: NOT
66793: OR
66794: IFFALSE 66798
// exit ;
66796: GO 66893
// result := [ ] ;
66798: LD_ADDR_VAR 0 3
66802: PUSH
66803: EMPTY
66804: ST_TO_ADDR
// for un in units do
66805: LD_ADDR_VAR 0 4
66809: PUSH
66810: LD_VAR 0 1
66814: PUSH
66815: FOR_IN
66816: IFFALSE 66891
// if GetClass ( un ) = class then
66818: LD_VAR 0 4
66822: PPUSH
66823: CALL_OW 257
66827: PUSH
66828: LD_VAR 0 2
66832: EQUAL
66833: IFFALSE 66860
// result := Insert ( result , 1 , un ) else
66835: LD_ADDR_VAR 0 3
66839: PUSH
66840: LD_VAR 0 3
66844: PPUSH
66845: LD_INT 1
66847: PPUSH
66848: LD_VAR 0 4
66852: PPUSH
66853: CALL_OW 2
66857: ST_TO_ADDR
66858: GO 66889
// result := Replace ( result , result + 1 , un ) ;
66860: LD_ADDR_VAR 0 3
66864: PUSH
66865: LD_VAR 0 3
66869: PPUSH
66870: LD_VAR 0 3
66874: PUSH
66875: LD_INT 1
66877: PLUS
66878: PPUSH
66879: LD_VAR 0 4
66883: PPUSH
66884: CALL_OW 1
66888: ST_TO_ADDR
66889: GO 66815
66891: POP
66892: POP
// end ;
66893: LD_VAR 0 3
66897: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66898: LD_INT 0
66900: PPUSH
66901: PPUSH
66902: PPUSH
66903: PPUSH
66904: PPUSH
66905: PPUSH
66906: PPUSH
// result := [ ] ;
66907: LD_ADDR_VAR 0 4
66911: PUSH
66912: EMPTY
66913: ST_TO_ADDR
// if x - r < 0 then
66914: LD_VAR 0 1
66918: PUSH
66919: LD_VAR 0 3
66923: MINUS
66924: PUSH
66925: LD_INT 0
66927: LESS
66928: IFFALSE 66940
// min_x := 0 else
66930: LD_ADDR_VAR 0 8
66934: PUSH
66935: LD_INT 0
66937: ST_TO_ADDR
66938: GO 66956
// min_x := x - r ;
66940: LD_ADDR_VAR 0 8
66944: PUSH
66945: LD_VAR 0 1
66949: PUSH
66950: LD_VAR 0 3
66954: MINUS
66955: ST_TO_ADDR
// if y - r < 0 then
66956: LD_VAR 0 2
66960: PUSH
66961: LD_VAR 0 3
66965: MINUS
66966: PUSH
66967: LD_INT 0
66969: LESS
66970: IFFALSE 66982
// min_y := 0 else
66972: LD_ADDR_VAR 0 7
66976: PUSH
66977: LD_INT 0
66979: ST_TO_ADDR
66980: GO 66998
// min_y := y - r ;
66982: LD_ADDR_VAR 0 7
66986: PUSH
66987: LD_VAR 0 2
66991: PUSH
66992: LD_VAR 0 3
66996: MINUS
66997: ST_TO_ADDR
// max_x := x + r ;
66998: LD_ADDR_VAR 0 9
67002: PUSH
67003: LD_VAR 0 1
67007: PUSH
67008: LD_VAR 0 3
67012: PLUS
67013: ST_TO_ADDR
// max_y := y + r ;
67014: LD_ADDR_VAR 0 10
67018: PUSH
67019: LD_VAR 0 2
67023: PUSH
67024: LD_VAR 0 3
67028: PLUS
67029: ST_TO_ADDR
// for _x = min_x to max_x do
67030: LD_ADDR_VAR 0 5
67034: PUSH
67035: DOUBLE
67036: LD_VAR 0 8
67040: DEC
67041: ST_TO_ADDR
67042: LD_VAR 0 9
67046: PUSH
67047: FOR_TO
67048: IFFALSE 67149
// for _y = min_y to max_y do
67050: LD_ADDR_VAR 0 6
67054: PUSH
67055: DOUBLE
67056: LD_VAR 0 7
67060: DEC
67061: ST_TO_ADDR
67062: LD_VAR 0 10
67066: PUSH
67067: FOR_TO
67068: IFFALSE 67145
// begin if not ValidHex ( _x , _y ) then
67070: LD_VAR 0 5
67074: PPUSH
67075: LD_VAR 0 6
67079: PPUSH
67080: CALL_OW 488
67084: NOT
67085: IFFALSE 67089
// continue ;
67087: GO 67067
// if GetResourceTypeXY ( _x , _y ) then
67089: LD_VAR 0 5
67093: PPUSH
67094: LD_VAR 0 6
67098: PPUSH
67099: CALL_OW 283
67103: IFFALSE 67143
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67105: LD_ADDR_VAR 0 4
67109: PUSH
67110: LD_VAR 0 4
67114: PPUSH
67115: LD_VAR 0 4
67119: PUSH
67120: LD_INT 1
67122: PLUS
67123: PPUSH
67124: LD_VAR 0 5
67128: PUSH
67129: LD_VAR 0 6
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PPUSH
67138: CALL_OW 1
67142: ST_TO_ADDR
// end ;
67143: GO 67067
67145: POP
67146: POP
67147: GO 67047
67149: POP
67150: POP
// end ;
67151: LD_VAR 0 4
67155: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67156: LD_INT 0
67158: PPUSH
67159: PPUSH
67160: PPUSH
67161: PPUSH
67162: PPUSH
67163: PPUSH
67164: PPUSH
67165: PPUSH
// if not units then
67166: LD_VAR 0 1
67170: NOT
67171: IFFALSE 67175
// exit ;
67173: GO 67699
// result := UnitFilter ( units , [ f_ok ] ) ;
67175: LD_ADDR_VAR 0 3
67179: PUSH
67180: LD_VAR 0 1
67184: PPUSH
67185: LD_INT 50
67187: PUSH
67188: EMPTY
67189: LIST
67190: PPUSH
67191: CALL_OW 72
67195: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67196: LD_ADDR_VAR 0 8
67200: PUSH
67201: LD_VAR 0 1
67205: PUSH
67206: LD_INT 1
67208: ARRAY
67209: PPUSH
67210: CALL_OW 255
67214: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67215: LD_ADDR_VAR 0 10
67219: PUSH
67220: LD_INT 29
67222: PUSH
67223: LD_INT 91
67225: PUSH
67226: LD_INT 49
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: LIST
67233: ST_TO_ADDR
// if not result then
67234: LD_VAR 0 3
67238: NOT
67239: IFFALSE 67243
// exit ;
67241: GO 67699
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67243: LD_ADDR_VAR 0 5
67247: PUSH
67248: LD_INT 81
67250: PUSH
67251: LD_VAR 0 8
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PPUSH
67260: CALL_OW 69
67264: ST_TO_ADDR
// for i in result do
67265: LD_ADDR_VAR 0 4
67269: PUSH
67270: LD_VAR 0 3
67274: PUSH
67275: FOR_IN
67276: IFFALSE 67697
// begin tag := GetTag ( i ) + 1 ;
67278: LD_ADDR_VAR 0 9
67282: PUSH
67283: LD_VAR 0 4
67287: PPUSH
67288: CALL_OW 110
67292: PUSH
67293: LD_INT 1
67295: PLUS
67296: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67297: LD_ADDR_VAR 0 7
67301: PUSH
67302: LD_VAR 0 4
67306: PPUSH
67307: CALL_OW 250
67311: PPUSH
67312: LD_VAR 0 4
67316: PPUSH
67317: CALL_OW 251
67321: PPUSH
67322: LD_INT 6
67324: PPUSH
67325: CALL 66898 0 3
67329: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67330: LD_VAR 0 4
67334: PPUSH
67335: CALL_OW 247
67339: PUSH
67340: LD_INT 2
67342: EQUAL
67343: PUSH
67344: LD_VAR 0 7
67348: AND
67349: PUSH
67350: LD_VAR 0 4
67354: PPUSH
67355: CALL_OW 264
67359: PUSH
67360: LD_VAR 0 10
67364: IN
67365: NOT
67366: AND
67367: IFFALSE 67406
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67369: LD_VAR 0 4
67373: PPUSH
67374: LD_VAR 0 7
67378: PUSH
67379: LD_INT 1
67381: ARRAY
67382: PUSH
67383: LD_INT 1
67385: ARRAY
67386: PPUSH
67387: LD_VAR 0 7
67391: PUSH
67392: LD_INT 1
67394: ARRAY
67395: PUSH
67396: LD_INT 2
67398: ARRAY
67399: PPUSH
67400: CALL_OW 116
67404: GO 67695
// if path > tag then
67406: LD_VAR 0 2
67410: PUSH
67411: LD_VAR 0 9
67415: GREATER
67416: IFFALSE 67624
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67418: LD_ADDR_VAR 0 6
67422: PUSH
67423: LD_VAR 0 5
67427: PPUSH
67428: LD_INT 91
67430: PUSH
67431: LD_VAR 0 4
67435: PUSH
67436: LD_INT 8
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: LIST
67443: PPUSH
67444: CALL_OW 72
67448: ST_TO_ADDR
// if nearEnemy then
67449: LD_VAR 0 6
67453: IFFALSE 67522
// begin if GetWeapon ( i ) = ru_time_lapser then
67455: LD_VAR 0 4
67459: PPUSH
67460: CALL_OW 264
67464: PUSH
67465: LD_INT 49
67467: EQUAL
67468: IFFALSE 67496
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67470: LD_VAR 0 4
67474: PPUSH
67475: LD_VAR 0 6
67479: PPUSH
67480: LD_VAR 0 4
67484: PPUSH
67485: CALL_OW 74
67489: PPUSH
67490: CALL_OW 112
67494: GO 67520
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67496: LD_VAR 0 4
67500: PPUSH
67501: LD_VAR 0 6
67505: PPUSH
67506: LD_VAR 0 4
67510: PPUSH
67511: CALL_OW 74
67515: PPUSH
67516: CALL_OW 115
// end else
67520: GO 67622
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67522: LD_VAR 0 4
67526: PPUSH
67527: LD_VAR 0 2
67531: PUSH
67532: LD_VAR 0 9
67536: ARRAY
67537: PUSH
67538: LD_INT 1
67540: ARRAY
67541: PPUSH
67542: LD_VAR 0 2
67546: PUSH
67547: LD_VAR 0 9
67551: ARRAY
67552: PUSH
67553: LD_INT 2
67555: ARRAY
67556: PPUSH
67557: CALL_OW 297
67561: PUSH
67562: LD_INT 6
67564: GREATER
67565: IFFALSE 67608
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67567: LD_VAR 0 4
67571: PPUSH
67572: LD_VAR 0 2
67576: PUSH
67577: LD_VAR 0 9
67581: ARRAY
67582: PUSH
67583: LD_INT 1
67585: ARRAY
67586: PPUSH
67587: LD_VAR 0 2
67591: PUSH
67592: LD_VAR 0 9
67596: ARRAY
67597: PUSH
67598: LD_INT 2
67600: ARRAY
67601: PPUSH
67602: CALL_OW 114
67606: GO 67622
// SetTag ( i , tag ) ;
67608: LD_VAR 0 4
67612: PPUSH
67613: LD_VAR 0 9
67617: PPUSH
67618: CALL_OW 109
// end else
67622: GO 67695
// if enemy then
67624: LD_VAR 0 5
67628: IFFALSE 67695
// begin if GetWeapon ( i ) = ru_time_lapser then
67630: LD_VAR 0 4
67634: PPUSH
67635: CALL_OW 264
67639: PUSH
67640: LD_INT 49
67642: EQUAL
67643: IFFALSE 67671
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67645: LD_VAR 0 4
67649: PPUSH
67650: LD_VAR 0 5
67654: PPUSH
67655: LD_VAR 0 4
67659: PPUSH
67660: CALL_OW 74
67664: PPUSH
67665: CALL_OW 112
67669: GO 67695
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67671: LD_VAR 0 4
67675: PPUSH
67676: LD_VAR 0 5
67680: PPUSH
67681: LD_VAR 0 4
67685: PPUSH
67686: CALL_OW 74
67690: PPUSH
67691: CALL_OW 115
// end ; end ;
67695: GO 67275
67697: POP
67698: POP
// end ;
67699: LD_VAR 0 3
67703: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67704: LD_INT 0
67706: PPUSH
67707: PPUSH
67708: PPUSH
// if not unit or IsInUnit ( unit ) then
67709: LD_VAR 0 1
67713: NOT
67714: PUSH
67715: LD_VAR 0 1
67719: PPUSH
67720: CALL_OW 310
67724: OR
67725: IFFALSE 67729
// exit ;
67727: GO 67820
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67729: LD_ADDR_VAR 0 4
67733: PUSH
67734: LD_VAR 0 1
67738: PPUSH
67739: CALL_OW 250
67743: PPUSH
67744: LD_VAR 0 2
67748: PPUSH
67749: LD_INT 1
67751: PPUSH
67752: CALL_OW 272
67756: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67757: LD_ADDR_VAR 0 5
67761: PUSH
67762: LD_VAR 0 1
67766: PPUSH
67767: CALL_OW 251
67771: PPUSH
67772: LD_VAR 0 2
67776: PPUSH
67777: LD_INT 1
67779: PPUSH
67780: CALL_OW 273
67784: ST_TO_ADDR
// if ValidHex ( x , y ) then
67785: LD_VAR 0 4
67789: PPUSH
67790: LD_VAR 0 5
67794: PPUSH
67795: CALL_OW 488
67799: IFFALSE 67820
// ComTurnXY ( unit , x , y ) ;
67801: LD_VAR 0 1
67805: PPUSH
67806: LD_VAR 0 4
67810: PPUSH
67811: LD_VAR 0 5
67815: PPUSH
67816: CALL_OW 118
// end ;
67820: LD_VAR 0 3
67824: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67825: LD_INT 0
67827: PPUSH
67828: PPUSH
// result := false ;
67829: LD_ADDR_VAR 0 3
67833: PUSH
67834: LD_INT 0
67836: ST_TO_ADDR
// if not units then
67837: LD_VAR 0 2
67841: NOT
67842: IFFALSE 67846
// exit ;
67844: GO 67891
// for i in units do
67846: LD_ADDR_VAR 0 4
67850: PUSH
67851: LD_VAR 0 2
67855: PUSH
67856: FOR_IN
67857: IFFALSE 67889
// if See ( side , i ) then
67859: LD_VAR 0 1
67863: PPUSH
67864: LD_VAR 0 4
67868: PPUSH
67869: CALL_OW 292
67873: IFFALSE 67887
// begin result := true ;
67875: LD_ADDR_VAR 0 3
67879: PUSH
67880: LD_INT 1
67882: ST_TO_ADDR
// exit ;
67883: POP
67884: POP
67885: GO 67891
// end ;
67887: GO 67856
67889: POP
67890: POP
// end ;
67891: LD_VAR 0 3
67895: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67896: LD_INT 0
67898: PPUSH
67899: PPUSH
67900: PPUSH
67901: PPUSH
// if not unit or not points then
67902: LD_VAR 0 1
67906: NOT
67907: PUSH
67908: LD_VAR 0 2
67912: NOT
67913: OR
67914: IFFALSE 67918
// exit ;
67916: GO 68008
// dist := 99999 ;
67918: LD_ADDR_VAR 0 5
67922: PUSH
67923: LD_INT 99999
67925: ST_TO_ADDR
// for i in points do
67926: LD_ADDR_VAR 0 4
67930: PUSH
67931: LD_VAR 0 2
67935: PUSH
67936: FOR_IN
67937: IFFALSE 68006
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67939: LD_ADDR_VAR 0 6
67943: PUSH
67944: LD_VAR 0 1
67948: PPUSH
67949: LD_VAR 0 4
67953: PUSH
67954: LD_INT 1
67956: ARRAY
67957: PPUSH
67958: LD_VAR 0 4
67962: PUSH
67963: LD_INT 2
67965: ARRAY
67966: PPUSH
67967: CALL_OW 297
67971: ST_TO_ADDR
// if tmpDist < dist then
67972: LD_VAR 0 6
67976: PUSH
67977: LD_VAR 0 5
67981: LESS
67982: IFFALSE 68004
// begin result := i ;
67984: LD_ADDR_VAR 0 3
67988: PUSH
67989: LD_VAR 0 4
67993: ST_TO_ADDR
// dist := tmpDist ;
67994: LD_ADDR_VAR 0 5
67998: PUSH
67999: LD_VAR 0 6
68003: ST_TO_ADDR
// end ; end ;
68004: GO 67936
68006: POP
68007: POP
// end ;
68008: LD_VAR 0 3
68012: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68013: LD_INT 0
68015: PPUSH
// uc_side := side ;
68016: LD_ADDR_OWVAR 20
68020: PUSH
68021: LD_VAR 0 1
68025: ST_TO_ADDR
// uc_nation := 3 ;
68026: LD_ADDR_OWVAR 21
68030: PUSH
68031: LD_INT 3
68033: ST_TO_ADDR
// vc_chassis := 25 ;
68034: LD_ADDR_OWVAR 37
68038: PUSH
68039: LD_INT 25
68041: ST_TO_ADDR
// vc_engine := engine_siberite ;
68042: LD_ADDR_OWVAR 39
68046: PUSH
68047: LD_INT 3
68049: ST_TO_ADDR
// vc_control := control_computer ;
68050: LD_ADDR_OWVAR 38
68054: PUSH
68055: LD_INT 3
68057: ST_TO_ADDR
// vc_weapon := 59 ;
68058: LD_ADDR_OWVAR 40
68062: PUSH
68063: LD_INT 59
68065: ST_TO_ADDR
// result := CreateVehicle ;
68066: LD_ADDR_VAR 0 5
68070: PUSH
68071: CALL_OW 45
68075: ST_TO_ADDR
// SetDir ( result , d ) ;
68076: LD_VAR 0 5
68080: PPUSH
68081: LD_VAR 0 4
68085: PPUSH
68086: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68090: LD_VAR 0 5
68094: PPUSH
68095: LD_VAR 0 2
68099: PPUSH
68100: LD_VAR 0 3
68104: PPUSH
68105: LD_INT 0
68107: PPUSH
68108: CALL_OW 48
// end ;
68112: LD_VAR 0 5
68116: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68117: LD_INT 0
68119: PPUSH
68120: PPUSH
68121: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68122: LD_ADDR_VAR 0 2
68126: PUSH
68127: LD_INT 0
68129: PUSH
68130: LD_INT 0
68132: PUSH
68133: LD_INT 0
68135: PUSH
68136: LD_INT 0
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68145: LD_VAR 0 1
68149: NOT
68150: PUSH
68151: LD_VAR 0 1
68155: PPUSH
68156: CALL_OW 264
68160: PUSH
68161: LD_INT 12
68163: PUSH
68164: LD_INT 51
68166: PUSH
68167: LD_INT 32
68169: PUSH
68170: LD_INT 89
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: IN
68179: NOT
68180: OR
68181: IFFALSE 68185
// exit ;
68183: GO 68283
// for i := 1 to 3 do
68185: LD_ADDR_VAR 0 3
68189: PUSH
68190: DOUBLE
68191: LD_INT 1
68193: DEC
68194: ST_TO_ADDR
68195: LD_INT 3
68197: PUSH
68198: FOR_TO
68199: IFFALSE 68281
// begin tmp := GetCargo ( cargo , i ) ;
68201: LD_ADDR_VAR 0 4
68205: PUSH
68206: LD_VAR 0 1
68210: PPUSH
68211: LD_VAR 0 3
68215: PPUSH
68216: CALL_OW 289
68220: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68221: LD_ADDR_VAR 0 2
68225: PUSH
68226: LD_VAR 0 2
68230: PPUSH
68231: LD_VAR 0 3
68235: PPUSH
68236: LD_VAR 0 4
68240: PPUSH
68241: CALL_OW 1
68245: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68246: LD_ADDR_VAR 0 2
68250: PUSH
68251: LD_VAR 0 2
68255: PPUSH
68256: LD_INT 4
68258: PPUSH
68259: LD_VAR 0 2
68263: PUSH
68264: LD_INT 4
68266: ARRAY
68267: PUSH
68268: LD_VAR 0 4
68272: PLUS
68273: PPUSH
68274: CALL_OW 1
68278: ST_TO_ADDR
// end ;
68279: GO 68198
68281: POP
68282: POP
// end ;
68283: LD_VAR 0 2
68287: RET
// export function Length ( array ) ; begin
68288: LD_INT 0
68290: PPUSH
// result := array + 0 ;
68291: LD_ADDR_VAR 0 2
68295: PUSH
68296: LD_VAR 0 1
68300: PUSH
68301: LD_INT 0
68303: PLUS
68304: ST_TO_ADDR
// end ;
68305: LD_VAR 0 2
68309: RET
// export function PrepareArray ( array ) ; begin
68310: LD_INT 0
68312: PPUSH
// result := array diff 0 ;
68313: LD_ADDR_VAR 0 2
68317: PUSH
68318: LD_VAR 0 1
68322: PUSH
68323: LD_INT 0
68325: DIFF
68326: ST_TO_ADDR
// if not result [ 1 ] then
68327: LD_VAR 0 2
68331: PUSH
68332: LD_INT 1
68334: ARRAY
68335: NOT
68336: IFFALSE 68356
// result := Delete ( result , 1 ) ;
68338: LD_ADDR_VAR 0 2
68342: PUSH
68343: LD_VAR 0 2
68347: PPUSH
68348: LD_INT 1
68350: PPUSH
68351: CALL_OW 3
68355: ST_TO_ADDR
// end ; end_of_file
68356: LD_VAR 0 2
68360: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68361: LD_VAR 0 1
68365: PUSH
68366: LD_INT 200
68368: DOUBLE
68369: GREATEREQUAL
68370: IFFALSE 68378
68372: LD_INT 299
68374: DOUBLE
68375: LESSEQUAL
68376: IFTRUE 68380
68378: GO 68412
68380: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68381: LD_VAR 0 1
68385: PPUSH
68386: LD_VAR 0 2
68390: PPUSH
68391: LD_VAR 0 3
68395: PPUSH
68396: LD_VAR 0 4
68400: PPUSH
68401: LD_VAR 0 5
68405: PPUSH
68406: CALL 23263 0 5
68410: GO 68489
68412: LD_INT 300
68414: DOUBLE
68415: GREATEREQUAL
68416: IFFALSE 68424
68418: LD_INT 399
68420: DOUBLE
68421: LESSEQUAL
68422: IFTRUE 68426
68424: GO 68488
68426: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68427: LD_VAR 0 1
68431: PPUSH
68432: LD_VAR 0 2
68436: PPUSH
68437: LD_VAR 0 3
68441: PPUSH
68442: LD_VAR 0 4
68446: PPUSH
68447: LD_VAR 0 5
68451: PPUSH
68452: LD_VAR 0 6
68456: PPUSH
68457: LD_VAR 0 7
68461: PPUSH
68462: LD_VAR 0 8
68466: PPUSH
68467: LD_VAR 0 9
68471: PPUSH
68472: LD_VAR 0 10
68476: PPUSH
68477: LD_VAR 0 11
68481: PPUSH
68482: CALL 19596 0 11
68486: GO 68489
68488: POP
// end ;
68489: PPOPN 11
68491: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68492: LD_VAR 0 1
68496: PPUSH
68497: LD_VAR 0 2
68501: PPUSH
68502: LD_VAR 0 3
68506: PPUSH
68507: LD_VAR 0 4
68511: PPUSH
68512: LD_VAR 0 5
68516: PPUSH
68517: CALL 22999 0 5
// end ; end_of_file
68521: PPOPN 5
68523: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68524: LD_VAR 0 1
68528: PPUSH
68529: LD_VAR 0 2
68533: PPUSH
68534: LD_VAR 0 3
68538: PPUSH
68539: LD_VAR 0 4
68543: PPUSH
68544: LD_VAR 0 5
68548: PPUSH
68549: LD_VAR 0 6
68553: PPUSH
68554: CALL 7289 0 6
// end ;
68558: PPOPN 6
68560: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68561: LD_INT 0
68563: PPUSH
// begin if not units then
68564: LD_VAR 0 1
68568: NOT
68569: IFFALSE 68573
// exit ;
68571: GO 68573
// end ;
68573: PPOPN 7
68575: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68576: CALL 7260 0 0
// end ;
68580: PPOPN 1
68582: END
