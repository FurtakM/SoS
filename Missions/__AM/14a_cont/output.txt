// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 63062 0 9
// PrepareAmerican ;
  46: CALL 4227 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 923 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 28653 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 28653 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 28653 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 451
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 413
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 411
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: PUSH
 366: LD_VAR 0 3
 370: PPUSH
 371: CALL_OW 258
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: AND
 380: PUSH
 381: LD_VAR 0 3
 385: PPUSH
 386: CALL_OW 248
 390: PUSH
 391: LD_INT 3
 393: EQUAL
 394: AND
 395: IFFALSE 409
// begin RuSci := i ;
 397: LD_ADDR_EXP 17
 401: PUSH
 402: LD_VAR 0 3
 406: ST_TO_ADDR
// break ;
 407: GO 411
// end ;
 409: GO 349
 411: POP
 412: POP
// end ; if not RuSci then
 413: LD_EXP 17
 417: NOT
 418: IFFALSE 451
// begin uc_nation := 3 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 3
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 4
 433: PPUSH
 434: LD_INT 10
 436: PPUSH
 437: CALL_OW 380
// RuSci := CreateHuman ;
 441: LD_ADDR_EXP 17
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 451: LD_ADDR_VAR 0 6
 455: PUSH
 456: LD_STRING 14a_JMMVeh
 458: PPUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 30
 489: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 490: LD_ADDR_VAR 0 7
 494: PUSH
 495: LD_STRING 14a_BurlakVeh
 497: PPUSH
 498: LD_INT 22
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 1
 506: PUSH
 507: LD_INT 51
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 30
 528: ST_TO_ADDR
// uc_direction := 4 ;
 529: LD_ADDR_OWVAR 24
 533: PUSH
 534: LD_INT 4
 536: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 6
 549: ARRAY
 550: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 551: LD_VAR 0 6
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_VAR 0 6
 564: PUSH
 565: LD_INT 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 6
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 6
 582: PUSH
 583: LD_INT 4
 585: ARRAY
 586: PPUSH
 587: LD_INT 60
 589: PPUSH
 590: LD_INT 80
 592: PPUSH
 593: CALL_OW 12
 597: PPUSH
 598: CALL 33514 0 5
// JMMVeh := CreateVehicle ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: CALL_OW 45
 611: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 65290 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 627: LD_VAR 0 6
 631: PUSH
 632: LD_INT 5
 634: ARRAY
 635: PUSH
 636: LD_INT 0
 638: NONEQUAL
 639: IFFALSE 659
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 6
 650: PUSH
 651: LD_INT 5
 653: ARRAY
 654: PPUSH
 655: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 659: LD_EXP 14
 663: PPUSH
 664: LD_VAR 0 4
 668: PPUSH
 669: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 673: LD_ADDR_OWVAR 21
 677: PUSH
 678: LD_VAR 0 7
 682: PUSH
 683: LD_INT 6
 685: ARRAY
 686: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 687: LD_VAR 0 7
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: PPUSH
 696: LD_VAR 0 7
 700: PUSH
 701: LD_INT 2
 703: ARRAY
 704: PPUSH
 705: LD_VAR 0 7
 709: PUSH
 710: LD_INT 3
 712: ARRAY
 713: PPUSH
 714: LD_VAR 0 7
 718: PUSH
 719: LD_INT 4
 721: ARRAY
 722: PPUSH
 723: LD_INT 60
 725: PPUSH
 726: LD_INT 80
 728: PPUSH
 729: CALL_OW 12
 733: PPUSH
 734: CALL 33514 0 5
// BurlakVeh := CreateVehicle ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 748: LD_VAR 0 5
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 65290 0 3
 763: NOT
 764: IFFALSE 784
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 766: LD_VAR 0 5
 770: PPUSH
 771: LD_INT 233
 773: PPUSH
 774: LD_INT 85
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 784: LD_VAR 0 7
 788: PUSH
 789: LD_INT 5
 791: ARRAY
 792: PUSH
 793: LD_INT 0
 795: NONEQUAL
 796: IFFALSE 816
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_VAR 0 7
 807: PUSH
 808: LD_INT 5
 810: ARRAY
 811: PPUSH
 812: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 816: LD_EXP 15
 820: PPUSH
 821: LD_VAR 0 5
 825: PPUSH
 826: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_INT 178
 837: PUSH
 838: LD_INT 91
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 137
 847: PUSH
 848: LD_INT 83
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 157
 857: PUSH
 858: LD_INT 75
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 162
 867: PUSH
 868: LD_INT 67
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 887: LD_INT 4
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 58
// end ; end_of_file
 918: LD_VAR 0 1
 922: RET
// export function Action ; begin
 923: LD_INT 0
 925: PPUSH
// InGameOn ;
 926: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 930: LD_INT 221
 932: PPUSH
 933: LD_INT 80
 935: PPUSH
 936: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 940: LD_EXP 14
 944: PUSH
 945: LD_EXP 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: LD_INT 217
 956: PPUSH
 957: LD_INT 79
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$7 ) ;
 964: LD_INT 245
 966: PPUSH
 967: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 971: LD_EXP 14
 975: PUSH
 976: LD_EXP 15
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 989: LD_EXP 15
 993: PPUSH
 994: LD_STRING D2-Bur-1
 996: PPUSH
 997: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1001: LD_EXP 14
1005: PPUSH
1006: LD_STRING D2-JMM-1
1008: PPUSH
1009: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1013: LD_INT 18
1015: PPUSH
1016: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1020: LD_EXP 15
1024: PPUSH
1025: LD_EXP 14
1029: PPUSH
1030: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1034: LD_EXP 15
1038: PPUSH
1039: LD_STRING D2-Bur-2
1041: PPUSH
1042: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1046: LD_EXP 15
1050: PPUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 2
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: PPUSH
1066: LD_EXP 15
1070: PPUSH
1071: CALL_OW 74
1075: PPUSH
1076: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1080: LD_EXP 14
1084: PPUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 2
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL_OW 69
1099: PPUSH
1100: LD_EXP 14
1104: PPUSH
1105: CALL_OW 74
1109: PPUSH
1110: CALL_OW 120
// wait ( 0 0$1 ) ;
1114: LD_INT 35
1116: PPUSH
1117: CALL_OW 67
// InGameOff ;
1121: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1125: LD_STRING MArtPickup
1127: PPUSH
1128: CALL_OW 337
// end ;
1132: LD_VAR 0 1
1136: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1137: LD_EXP 22
1141: PPUSH
1142: LD_INT 101
1144: PUSH
1145: LD_INT 7
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: PUSH
1157: LD_EXP 8
1161: NOT
1162: AND
1163: IFFALSE 1192
1165: GO 1167
1167: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING D3-Bur-1
1175: PPUSH
1176: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1180: LD_EXP 14
1184: PPUSH
1185: LD_STRING D3-JMM-1
1187: PPUSH
1188: CALL_OW 88
// end ;
1192: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1193: LD_INT 5
1195: PPUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 70
1210: IFFALSE 1545
1212: GO 1214
1214: DISABLE
// begin wait ( 0 0$3 ) ;
1215: LD_INT 105
1217: PPUSH
1218: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1222: LD_INT 139
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 7
1230: PPUSH
1231: LD_INT 20
1233: NEG
1234: PPUSH
1235: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1239: LD_INT 139
1241: PPUSH
1242: LD_INT 43
1244: PPUSH
1245: LD_INT 7
1247: PPUSH
1248: CALL_OW 331
// DialogueOn ;
1252: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1256: LD_EXP 14
1260: PPUSH
1261: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1265: LD_EXP 14
1269: PPUSH
1270: LD_STRING D3a-JMM-1
1272: PPUSH
1273: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1277: LD_EXP 15
1281: PPUSH
1282: LD_STRING D3a-Bur-1
1284: PPUSH
1285: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_STRING D3a-JMM-2
1296: PPUSH
1297: CALL_OW 88
// if Joan then
1301: LD_EXP 16
1305: IFFALSE 1321
// SayRadio ( Joan , D3a-Joan-2 ) else
1307: LD_EXP 16
1311: PPUSH
1312: LD_STRING D3a-Joan-2
1314: PPUSH
1315: CALL_OW 94
1319: GO 1333
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1321: LD_EXP 17
1325: PPUSH
1326: LD_STRING D3a-RSci1-2
1328: PPUSH
1329: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_STRING D3a-Huck-2
1340: PPUSH
1341: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_STRING D3a-Pow-2
1352: PPUSH
1353: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1357: LD_EXP 18
1361: PPUSH
1362: LD_STRING D3a-Huck-3
1364: PPUSH
1365: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1369: LD_EXP 19
1373: PPUSH
1374: LD_STRING D3a-Pow-3
1376: PPUSH
1377: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1381: LD_EXP 18
1385: PPUSH
1386: LD_STRING D3a-Huck-4
1388: PPUSH
1389: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1393: LD_EXP 14
1397: PPUSH
1398: LD_STRING D3a-JMM-4
1400: PPUSH
1401: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1405: LD_EXP 15
1409: PPUSH
1410: LD_STRING D3a-Bur-4
1412: PPUSH
1413: CALL_OW 88
// if Joan then
1417: LD_EXP 16
1421: IFFALSE 1437
// SayRadio ( Joan , D3a-Joan-4 ) else
1423: LD_EXP 16
1427: PPUSH
1428: LD_STRING D3a-Joan-4
1430: PPUSH
1431: CALL_OW 94
1435: GO 1449
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1437: LD_EXP 17
1441: PPUSH
1442: LD_STRING D3a-RSci1-4
1444: PPUSH
1445: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1449: LD_INT 133
1451: PPUSH
1452: LD_INT 43
1454: PPUSH
1455: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1459: LD_INT 10
1461: PPUSH
1462: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1466: LD_EXP 14
1470: PPUSH
1471: LD_STRING D3a-JMM-5
1473: PPUSH
1474: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1478: LD_EXP 15
1482: PPUSH
1483: LD_STRING D3a-Bur-5
1485: PPUSH
1486: CALL_OW 88
// DialogueOff ;
1490: CALL_OW 7
// seenBase := true ;
1494: LD_ADDR_EXP 8
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1502: LD_INT 525
1504: PUSH
1505: LD_INT 420
1507: PUSH
1508: LD_INT 315
1510: PUSH
1511: LD_INT 280
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PPUSH
1526: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1530: LD_EXP 21
1534: PPUSH
1535: LD_INT 142
1537: PPUSH
1538: LD_INT 52
1540: PPUSH
1541: CALL_OW 116
// end ;
1545: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1546: LD_EXP 8
1550: NOT
1551: PUSH
1552: LD_EXP 4
1556: NOT
1557: AND
1558: IFFALSE 1578
1560: GO 1562
1562: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1563: LD_EXP 21
1567: PPUSH
1568: LD_INT 142
1570: PPUSH
1571: LD_INT 52
1573: PPUSH
1574: CALL_OW 116
1578: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// contaminateTime := tick ;
1583: LD_ADDR_EXP 3
1587: PUSH
1588: LD_OWVAR 1
1592: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1593: LD_INT 175
1595: PPUSH
1596: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1600: LD_ADDR_VAR 0 5
1604: PUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 469
1612: ST_TO_ADDR
// if art then
1613: LD_VAR 0 5
1617: IFFALSE 1670
// if art [ 1 ] in [ 157 , 162 ] and art [ 2 ] in [ 75 , 67 ] then
1619: LD_VAR 0 5
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PUSH
1628: LD_INT 157
1630: PUSH
1631: LD_INT 162
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: IN
1638: PUSH
1639: LD_VAR 0 5
1643: PUSH
1644: LD_INT 2
1646: ARRAY
1647: PUSH
1648: LD_INT 75
1650: PUSH
1651: LD_INT 67
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: IN
1658: AND
1659: IFFALSE 1670
// begin YouLost ( Artefact ) ;
1661: LD_STRING Artefact
1663: PPUSH
1664: CALL_OW 104
// exit ;
1668: GO 1834
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1670: LD_EXP 14
1674: PPUSH
1675: CALL_OW 302
1679: PUSH
1680: LD_EXP 15
1684: PPUSH
1685: CALL_OW 302
1689: AND
1690: IFFALSE 1767
// begin DialogueOn ;
1692: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1696: LD_EXP 14
1700: PPUSH
1701: LD_STRING D6a-JMM-1
1703: PPUSH
1704: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1708: LD_EXP 15
1712: PPUSH
1713: LD_STRING D6a-Bur-1
1715: PPUSH
1716: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1720: LD_EXP 14
1724: PPUSH
1725: LD_STRING D6c-JMM-1
1727: PPUSH
1728: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1732: LD_EXP 15
1736: PPUSH
1737: LD_STRING D6c-Bur-1
1739: PPUSH
1740: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1744: LD_EXP 14
1748: PPUSH
1749: LD_STRING D6c-JMM-2
1751: PPUSH
1752: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1756: LD_STRING MBase
1758: PPUSH
1759: CALL_OW 337
// DialogueOff ;
1763: CALL_OW 7
// end ; bombExploded := true ;
1767: LD_ADDR_EXP 4
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1775: LD_INT 6300
1777: PUSH
1778: LD_INT 5250
1780: PUSH
1781: LD_INT 4200
1783: PUSH
1784: LD_INT 3500
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_OWVAR 67
1797: ARRAY
1798: PPUSH
1799: CALL_OW 67
// if planCaptured then
1803: LD_EXP 7
1807: IFFALSE 1811
// exit ;
1809: GO 1834
// if IsOk ( JMM ) then
1811: LD_EXP 14
1815: PPUSH
1816: CALL_OW 302
1820: IFFALSE 1834
// Say ( JMM , D8-JMM-1 ) ;
1822: LD_EXP 14
1826: PPUSH
1827: LD_STRING D8-JMM-1
1829: PPUSH
1830: CALL_OW 88
// end ;
1834: LD_VAR 0 4
1838: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1839: LD_EXP 9
1843: PUSH
1844: LD_EXP 7
1848: NOT
1849: AND
1850: PUSH
1851: LD_EXP 4
1855: AND
1856: IFFALSE 1911
1858: GO 1860
1860: DISABLE
// begin enable ;
1861: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1862: LD_INT 9
1864: PPUSH
1865: LD_INT 22
1867: PUSH
1868: LD_INT 7
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PPUSH
1875: CALL_OW 70
1879: IFFALSE 1897
// stevensTimer := stevensTimer - 0 0$30 else
1881: LD_ADDR_EXP 9
1885: PUSH
1886: LD_EXP 9
1890: PUSH
1891: LD_INT 1050
1893: MINUS
1894: ST_TO_ADDR
1895: GO 1911
// stevensTimer := stevensTimer - 0 0$1 ;
1897: LD_ADDR_EXP 9
1901: PUSH
1902: LD_EXP 9
1906: PUSH
1907: LD_INT 35
1909: MINUS
1910: ST_TO_ADDR
// end ;
1911: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1912: LD_EXP 9
1916: PUSH
1917: LD_INT 0
1919: LESSEQUAL
1920: PUSH
1921: LD_EXP 7
1925: NOT
1926: AND
1927: IFFALSE 2091
1929: GO 1931
1931: DISABLE
1932: LD_INT 0
1934: PPUSH
1935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_INT 22
1943: PUSH
1944: LD_INT 1
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 25
1953: PUSH
1954: LD_INT 4
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PPUSH
1965: CALL_OW 69
1969: ST_TO_ADDR
// for i in tmp do
1970: LD_ADDR_VAR 0 1
1974: PUSH
1975: LD_VAR 0 2
1979: PUSH
1980: FOR_IN
1981: IFFALSE 2034
// begin if IsInUnit ( i ) then
1983: LD_VAR 0 1
1987: PPUSH
1988: CALL_OW 310
1992: IFFALSE 2005
// ComExitBuilding ( i ) else
1994: LD_VAR 0 1
1998: PPUSH
1999: CALL_OW 122
2003: GO 2032
// if not HasTask ( i ) then
2005: LD_VAR 0 1
2009: PPUSH
2010: CALL_OW 314
2014: NOT
2015: IFFALSE 2032
// ComMoveXY ( i , 29 , 56 ) ;
2017: LD_VAR 0 1
2021: PPUSH
2022: LD_INT 29
2024: PPUSH
2025: LD_INT 56
2027: PPUSH
2028: CALL_OW 111
// end ;
2032: GO 1980
2034: POP
2035: POP
// repeat wait ( 0 0$1 ) ;
2036: LD_INT 35
2038: PPUSH
2039: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2043: LD_INT 8
2045: PPUSH
2046: LD_INT 22
2048: PUSH
2049: LD_INT 1
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: PUSH
2056: LD_INT 25
2058: PUSH
2059: LD_INT 4
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL_OW 70
2074: IFFALSE 2036
// if planCaptured then
2076: LD_EXP 7
2080: IFFALSE 2084
// exit ;
2082: GO 2091
// YouLost ( Time ) ;
2084: LD_STRING Time
2086: PPUSH
2087: CALL_OW 104
// end ;
2091: PPOPN 2
2093: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2094: LD_INT 22
2096: PUSH
2097: LD_INT 7
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 92
2106: PUSH
2107: LD_INT 142
2109: PUSH
2110: LD_INT 52
2112: PUSH
2113: LD_INT 27
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PPUSH
2126: CALL_OW 69
2130: PUSH
2131: LD_EXP 3
2135: PUSH
2136: LD_INT 6000
2138: PLUS
2139: PUSH
2140: LD_OWVAR 1
2144: GREATER
2145: AND
2146: PUSH
2147: LD_EXP 4
2151: AND
2152: IFFALSE 2207
2154: GO 2156
2156: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2157: LD_EXP 14
2161: PUSH
2162: LD_EXP 15
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PPUSH
2171: CALL_OW 85
// DialogueOn ;
2175: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2179: LD_EXP 14
2183: PPUSH
2184: LD_STRING D6b-JMM-1
2186: PPUSH
2187: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2191: LD_EXP 15
2195: PPUSH
2196: LD_STRING D6b-Bur-1
2198: PPUSH
2199: CALL_OW 88
// DialogueOff ;
2203: CALL_OW 7
// end ;
2207: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2208: LD_EXP 15
2212: PPUSH
2213: LD_INT 142
2215: PPUSH
2216: LD_INT 52
2218: PPUSH
2219: CALL_OW 297
2223: PUSH
2224: LD_INT 25
2226: LESS
2227: PUSH
2228: LD_EXP 15
2232: PPUSH
2233: CALL_OW 310
2237: PPUSH
2238: LD_INT 142
2240: PPUSH
2241: LD_INT 52
2243: PPUSH
2244: CALL_OW 297
2248: PUSH
2249: LD_INT 25
2251: LESS
2252: OR
2253: PUSH
2254: LD_EXP 15
2258: PPUSH
2259: CALL_OW 256
2263: PUSH
2264: LD_INT 1000
2266: LESS
2267: AND
2268: PUSH
2269: LD_EXP 3
2273: PUSH
2274: LD_INT 6000
2276: PLUS
2277: PUSH
2278: LD_OWVAR 1
2282: GREATER
2283: AND
2284: PUSH
2285: LD_EXP 4
2289: AND
2290: IFFALSE 2323
2292: GO 2294
2294: DISABLE
// begin DialogueOn ;
2295: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2299: LD_EXP 15
2303: PPUSH
2304: LD_STRING D7-Bur-1
2306: PPUSH
2307: CALL_OW 88
// enteredContaminatedArea := true ;
2311: LD_ADDR_EXP 5
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// DialogueOff ;
2319: CALL_OW 7
// end ;
2323: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2324: LD_EXP 14
2328: PPUSH
2329: LD_INT 142
2331: PPUSH
2332: LD_INT 52
2334: PPUSH
2335: CALL_OW 297
2339: PUSH
2340: LD_INT 25
2342: LESS
2343: PUSH
2344: LD_EXP 14
2348: PPUSH
2349: CALL_OW 310
2353: PPUSH
2354: LD_INT 142
2356: PPUSH
2357: LD_INT 52
2359: PPUSH
2360: CALL_OW 297
2364: PUSH
2365: LD_INT 25
2367: LESS
2368: OR
2369: PUSH
2370: LD_EXP 14
2374: PPUSH
2375: CALL_OW 256
2379: PUSH
2380: LD_INT 1000
2382: LESS
2383: AND
2384: PUSH
2385: LD_EXP 3
2389: PUSH
2390: LD_INT 6000
2392: PLUS
2393: PUSH
2394: LD_OWVAR 1
2398: GREATER
2399: AND
2400: PUSH
2401: LD_EXP 4
2405: AND
2406: IFFALSE 2439
2408: GO 2410
2410: DISABLE
// begin DialogueOn ;
2411: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2415: LD_EXP 14
2419: PPUSH
2420: LD_STRING D7-JMM-1
2422: PPUSH
2423: CALL_OW 88
// enteredContaminatedArea := true ;
2427: LD_ADDR_EXP 5
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// DialogueOff ;
2435: CALL_OW 7
// end ;
2439: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2440: LD_EXP 6
2444: PUSH
2445: LD_EXP 14
2449: PPUSH
2450: CALL_OW 302
2454: AND
2455: PUSH
2456: LD_EXP 15
2460: PPUSH
2461: CALL_OW 302
2465: AND
2466: IFFALSE 2535
2468: GO 2470
2470: DISABLE
// begin DialogueOn ;
2471: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2475: LD_EXP 14
2479: PUSH
2480: LD_EXP 15
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PPUSH
2489: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2493: LD_EXP 14
2497: PPUSH
2498: LD_STRING D4-JMM-1
2500: PPUSH
2501: CALL_OW 88
// if not bombExploded then
2505: LD_EXP 4
2509: NOT
2510: IFFALSE 2524
// Say ( Burlak , D4-Bur-1 ) ;
2512: LD_EXP 15
2516: PPUSH
2517: LD_STRING D4-Bur-1
2519: PPUSH
2520: CALL_OW 88
// DialogueOff ;
2524: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2528: LD_STRING MReturn
2530: PPUSH
2531: CALL_OW 337
// end ;
2535: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2536: LD_EXP 7
2540: NOT
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 7
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 91
2554: PUSH
2555: LD_INT 9
2557: PUSH
2558: LD_INT 6
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: LIST
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PPUSH
2570: CALL_OW 69
2574: AND
2575: IFFALSE 2652
2577: GO 2579
2579: DISABLE
// begin DialogueOn ;
2580: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2584: LD_INT 55
2586: PPUSH
2587: LD_INT 11
2589: PPUSH
2590: LD_INT 7
2592: PPUSH
2593: LD_INT 6
2595: NEG
2596: PPUSH
2597: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2601: LD_INT 55
2603: PPUSH
2604: LD_INT 11
2606: PPUSH
2607: LD_INT 7
2609: PPUSH
2610: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2614: LD_EXP 15
2618: PPUSH
2619: LD_STRING D9-Bur-1
2621: PPUSH
2622: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2626: LD_EXP 14
2630: PPUSH
2631: LD_STRING D9-JMM-1
2633: PPUSH
2634: CALL_OW 88
// DialogueOff ;
2638: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2642: LD_INT 9
2644: PPUSH
2645: LD_INT 7
2647: PPUSH
2648: CALL_OW 235
// end ;
2652: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2653: LD_INT 9
2655: PPUSH
2656: LD_INT 22
2658: PUSH
2659: LD_INT 7
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PPUSH
2666: CALL_OW 70
2670: IFFALSE 2706
2672: GO 2674
2674: DISABLE
// begin wait ( 0 0$07 ) ;
2675: LD_INT 245
2677: PPUSH
2678: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2682: LD_EXP 14
2686: PPUSH
2687: LD_STRING D10b-JMM-1
2689: PPUSH
2690: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2694: LD_EXP 15
2698: PPUSH
2699: LD_STRING D10b-Bur-1
2701: PPUSH
2702: CALL_OW 88
// end ;
2706: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2707: LD_EXP 9
2711: PUSH
2712: LD_INT 22
2714: PUSH
2715: LD_INT 1
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 25
2724: PUSH
2725: LD_INT 4
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: LD_INT 26
2734: PUSH
2735: LD_INT 1
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: LIST
2746: PPUSH
2747: CALL_OW 69
2751: AND
2752: PUSH
2753: LD_INT 5
2755: PPUSH
2756: CALL_OW 255
2760: PUSH
2761: LD_INT 7
2763: EQUAL
2764: PUSH
2765: LD_INT 22
2767: PUSH
2768: LD_INT 1
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: PUSH
2775: LD_INT 25
2777: PUSH
2778: LD_INT 1
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PPUSH
2789: CALL_OW 69
2793: PUSH
2794: LD_INT 0
2796: EQUAL
2797: OR
2798: AND
2799: IFFALSE 3470
2801: GO 2803
2803: DISABLE
2804: LD_INT 0
2806: PPUSH
// begin case Query ( QKill ) of 1 :
2807: LD_STRING QKill
2809: PPUSH
2810: CALL_OW 97
2814: PUSH
2815: LD_INT 1
2817: DOUBLE
2818: EQUAL
2819: IFTRUE 2823
2821: GO 3458
2823: POP
// begin DialogueOn ;
2824: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2828: LD_EXP 14
2832: PPUSH
2833: LD_STRING D10a-JMM-1
2835: PPUSH
2836: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2840: LD_EXP 15
2844: PPUSH
2845: LD_STRING D10a-Bur-1
2847: PPUSH
2848: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2852: LD_EXP 14
2856: PPUSH
2857: LD_STRING D10a-JMM-2
2859: PPUSH
2860: CALL_OW 88
// if IsOk ( Stevens ) then
2864: LD_EXP 18
2868: PPUSH
2869: CALL_OW 302
2873: IFFALSE 2889
// Say ( Stevens , D10a-Huck-2 ) else
2875: LD_EXP 18
2879: PPUSH
2880: LD_STRING D10a-Huck-2
2882: PPUSH
2883: CALL_OW 88
2887: GO 3022
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) then
2889: LD_INT 22
2891: PUSH
2892: LD_INT 1
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PUSH
2899: LD_INT 25
2901: PUSH
2902: LD_INT 4
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: PUSH
2909: LD_INT 26
2911: PUSH
2912: LD_INT 1
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: LIST
2923: PPUSH
2924: CALL_OW 69
2928: NOT
2929: IFFALSE 2971
// begin uc_side := 1 ;
2931: LD_ADDR_OWVAR 20
2935: PUSH
2936: LD_INT 1
2938: ST_TO_ADDR
// uc_nation := 1 ;
2939: LD_ADDR_OWVAR 21
2943: PUSH
2944: LD_INT 1
2946: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
2947: LD_INT 1
2949: PPUSH
2950: LD_INT 10
2952: PPUSH
2953: CALL_OW 384
// Say ( CreateHuman , D10a-ASci1-3 ) ;
2957: CALL_OW 44
2961: PPUSH
2962: LD_STRING D10a-ASci1-3
2964: PPUSH
2965: CALL_OW 88
// end else
2969: GO 3022
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2971: LD_INT 22
2973: PUSH
2974: LD_INT 1
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PUSH
2981: LD_INT 25
2983: PUSH
2984: LD_INT 4
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: PUSH
2991: LD_INT 26
2993: PUSH
2994: LD_INT 1
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: LIST
3005: PPUSH
3006: CALL_OW 69
3010: PUSH
3011: LD_INT 1
3013: ARRAY
3014: PPUSH
3015: LD_STRING D10a-ASci1-3
3017: PPUSH
3018: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
3022: LD_EXP 14
3026: PPUSH
3027: LD_STRING D10a-JMM-4
3029: PPUSH
3030: CALL_OW 88
// if IsOk ( Stevens ) then
3034: LD_EXP 18
3038: PPUSH
3039: CALL_OW 302
3043: IFFALSE 3057
// Say ( Stevens , D10a-Huck-3 ) ;
3045: LD_EXP 18
3049: PPUSH
3050: LD_STRING D10a-Huck-3
3052: PPUSH
3053: CALL_OW 88
// DialogueOff ;
3057: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
3061: LD_INT 1
3063: PPUSH
3064: LD_INT 7
3066: PPUSH
3067: LD_INT 1
3069: PPUSH
3070: LD_INT 1
3072: PPUSH
3073: CALL_OW 80
// planCaptured := true ;
3077: LD_ADDR_EXP 7
3081: PUSH
3082: LD_INT 1
3084: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
3085: LD_STRING MEnd
3087: PPUSH
3088: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
3092: LD_STRING ACH_DIPLOMACY
3094: PPUSH
3095: CALL_OW 543
// canEnd := true ;
3099: LD_ADDR_EXP 10
3103: PUSH
3104: LD_INT 1
3106: ST_TO_ADDR
// missionTime := tick ;
3107: LD_ADDR_EXP 11
3111: PUSH
3112: LD_OWVAR 1
3116: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3117: LD_INT 35
3119: PPUSH
3120: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3124: LD_INT 22
3126: PUSH
3127: LD_INT 1
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: LD_INT 3
3136: PUSH
3137: LD_INT 50
3139: PUSH
3140: EMPTY
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 69
3155: IFFALSE 3271
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3157: LD_ADDR_VAR 0 1
3161: PUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 25
3174: PUSH
3175: LD_INT 4
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PPUSH
3186: CALL_OW 69
3190: PUSH
3191: FOR_IN
3192: IFFALSE 3269
// begin if IsInUnit ( i ) then
3194: LD_VAR 0 1
3198: PPUSH
3199: CALL_OW 310
3203: IFFALSE 3216
// ComExitBuilding ( i ) else
3205: LD_VAR 0 1
3209: PPUSH
3210: CALL_OW 122
3214: GO 3267
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3216: LD_VAR 0 1
3220: PPUSH
3221: LD_INT 22
3223: PUSH
3224: LD_INT 1
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: PUSH
3231: LD_INT 3
3233: PUSH
3234: LD_INT 50
3236: PUSH
3237: EMPTY
3238: LIST
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 69
3252: PPUSH
3253: LD_VAR 0 1
3257: PPUSH
3258: CALL_OW 74
3262: PPUSH
3263: CALL_OW 128
// end ;
3267: GO 3191
3269: POP
3270: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3271: LD_INT 22
3273: PUSH
3274: LD_INT 1
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 3
3283: PUSH
3284: LD_INT 50
3286: PUSH
3287: EMPTY
3288: LIST
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: NOT
3303: IFFALSE 3117
// repeat wait ( 3 ) ;
3305: LD_INT 3
3307: PPUSH
3308: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3312: LD_ADDR_VAR 0 1
3316: PUSH
3317: LD_INT 22
3319: PUSH
3320: LD_INT 1
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: PUSH
3327: LD_INT 21
3329: PUSH
3330: LD_INT 1
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PPUSH
3341: CALL_OW 69
3345: PUSH
3346: FOR_IN
3347: IFFALSE 3423
// begin if IsInArea ( i , stevensEscapeArea ) then
3349: LD_VAR 0 1
3353: PPUSH
3354: LD_INT 8
3356: PPUSH
3357: CALL_OW 308
3361: IFFALSE 3374
// begin RemoveUnit ( i ) ;
3363: LD_VAR 0 1
3367: PPUSH
3368: CALL_OW 64
// continue ;
3372: GO 3346
// end ; if IsInUnit ( i ) then
3374: LD_VAR 0 1
3378: PPUSH
3379: CALL_OW 310
3383: IFFALSE 3394
// ComExitBuilding ( i ) ;
3385: LD_VAR 0 1
3389: PPUSH
3390: CALL_OW 122
// if not HasTask ( i ) then
3394: LD_VAR 0 1
3398: PPUSH
3399: CALL_OW 314
3403: NOT
3404: IFFALSE 3421
// ComMoveXY ( i , 28 , 55 ) ;
3406: LD_VAR 0 1
3410: PPUSH
3411: LD_INT 28
3413: PPUSH
3414: LD_INT 55
3416: PPUSH
3417: CALL_OW 111
// end ;
3421: GO 3346
3423: POP
3424: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3425: LD_INT 22
3427: PUSH
3428: LD_INT 1
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 21
3437: PUSH
3438: LD_INT 1
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PPUSH
3449: CALL_OW 69
3453: NOT
3454: IFFALSE 3305
// end ; 2 :
3456: GO 3470
3458: LD_INT 2
3460: DOUBLE
3461: EQUAL
3462: IFTRUE 3466
3464: GO 3469
3466: POP
// ; end ;
3467: GO 3470
3469: POP
// end ;
3470: PPOPN 1
3472: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3473: LD_EXP 10
3477: IFFALSE 3834
3479: GO 3481
3481: DISABLE
3482: LD_INT 0
3484: PPUSH
3485: PPUSH
3486: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3487: LD_INT 10
3489: PPUSH
3490: LD_INT 1
3492: PPUSH
3493: CALL_OW 424
// if Difficulty < 2 then
3497: LD_OWVAR 67
3501: PUSH
3502: LD_INT 2
3504: LESS
3505: IFFALSE 3509
// exit ;
3507: GO 3834
// uc_side := 4 ;
3509: LD_ADDR_OWVAR 20
3513: PUSH
3514: LD_INT 4
3516: ST_TO_ADDR
// uc_nation := 1 ;
3517: LD_ADDR_OWVAR 21
3521: PUSH
3522: LD_INT 1
3524: ST_TO_ADDR
// InitHc ;
3525: CALL_OW 19
// tmp := [ ] ;
3529: LD_ADDR_VAR 0 3
3533: PUSH
3534: EMPTY
3535: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3536: LD_INT 0
3538: PPUSH
3539: LD_INT 5
3541: PPUSH
3542: LD_INT 10
3544: PPUSH
3545: CALL_OW 380
// un := CreateHuman ;
3549: LD_ADDR_VAR 0 1
3553: PUSH
3554: CALL_OW 44
3558: ST_TO_ADDR
// tmp := [ un ] ;
3559: LD_ADDR_VAR 0 3
3563: PUSH
3564: LD_VAR 0 1
3568: PUSH
3569: EMPTY
3570: LIST
3571: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3572: LD_VAR 0 1
3576: PPUSH
3577: LD_INT 226
3579: PPUSH
3580: LD_INT 86
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: CALL_OW 48
// ComHold ( un ) ;
3590: LD_VAR 0 1
3594: PPUSH
3595: CALL_OW 140
// for i = 1 to 3 do
3599: LD_ADDR_VAR 0 2
3603: PUSH
3604: DOUBLE
3605: LD_INT 1
3607: DEC
3608: ST_TO_ADDR
3609: LD_INT 3
3611: PUSH
3612: FOR_TO
3613: IFFALSE 3712
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3615: LD_INT 0
3617: PPUSH
3618: LD_INT 1
3620: PPUSH
3621: LD_INT 8
3623: PPUSH
3624: CALL_OW 380
// un := CreateHuman ;
3628: LD_ADDR_VAR 0 1
3632: PUSH
3633: CALL_OW 44
3637: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3638: LD_VAR 0 1
3642: PPUSH
3643: LD_INT 5
3645: PPUSH
3646: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3650: LD_VAR 0 1
3654: PPUSH
3655: LD_INT 215
3657: PUSH
3658: LD_INT 217
3660: PUSH
3661: LD_INT 219
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: PUSH
3669: LD_VAR 0 2
3673: ARRAY
3674: PPUSH
3675: LD_INT 76
3677: PPUSH
3678: LD_INT 0
3680: PPUSH
3681: CALL_OW 48
// ComCrawl ( un ) ;
3685: LD_VAR 0 1
3689: PPUSH
3690: CALL_OW 137
// tmp := tmp ^ un ;
3694: LD_ADDR_VAR 0 3
3698: PUSH
3699: LD_VAR 0 3
3703: PUSH
3704: LD_VAR 0 1
3708: ADD
3709: ST_TO_ADDR
// end ;
3710: GO 3612
3712: POP
3713: POP
// repeat wait ( 0 0$1 ) ;
3714: LD_INT 35
3716: PPUSH
3717: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_INT 24
3728: PUSH
3729: LD_INT 1000
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: PPUSH
3736: CALL_OW 72
3740: NOT
3741: IFFALSE 3714
// for i in tmp do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: LD_VAR 0 3
3752: PUSH
3753: FOR_IN
3754: IFFALSE 3832
// begin wait ( 0 0$1 ) ;
3756: LD_INT 35
3758: PPUSH
3759: CALL_OW 67
// if Crawls ( i ) then
3763: LD_VAR 0 2
3767: PPUSH
3768: CALL_OW 318
3772: IFFALSE 3785
// ComWalk ( i ) else
3774: LD_VAR 0 2
3778: PPUSH
3779: CALL_OW 138
3783: GO 3830
// if GetClass ( i ) = class_sniper then
3785: LD_VAR 0 2
3789: PPUSH
3790: CALL_OW 257
3794: PUSH
3795: LD_INT 5
3797: EQUAL
3798: IFFALSE 3816
// ComAttackSoporific ( i , JMM ) else
3800: LD_VAR 0 2
3804: PPUSH
3805: LD_EXP 14
3809: PPUSH
3810: CALL_OW 166
3814: GO 3830
// ComAttackUnit ( i , JMM ) ;
3816: LD_VAR 0 2
3820: PPUSH
3821: LD_EXP 14
3825: PPUSH
3826: CALL_OW 115
// end ;
3830: GO 3753
3832: POP
3833: POP
// end ;
3834: PPOPN 3
3836: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3837: LD_EXP 7
3841: NOT
3842: PUSH
3843: LD_INT 1
3845: PPUSH
3846: CALL_OW 301
3850: AND
3851: IFFALSE 3863
3853: GO 3855
3855: DISABLE
// YouLost ( Lab ) ;
3856: LD_STRING Lab
3858: PPUSH
3859: CALL_OW 104
3863: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ [ f_not , [ f_empty ] ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3864: LD_INT 10
3866: PPUSH
3867: LD_INT 22
3869: PUSH
3870: LD_INT 7
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 70
3881: PUSH
3882: LD_INT 2
3884: GREATEREQUAL
3885: PUSH
3886: LD_INT 10
3888: PPUSH
3889: LD_INT 3
3891: PUSH
3892: LD_INT 58
3894: PUSH
3895: EMPTY
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 2
3904: PUSH
3905: LD_INT 34
3907: PUSH
3908: LD_INT 12
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: LD_INT 34
3917: PUSH
3918: LD_INT 51
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: LIST
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: PPUSH
3934: CALL_OW 70
3938: AND
3939: PUSH
3940: LD_EXP 10
3944: AND
3945: PUSH
3946: LD_EXP 7
3950: AND
3951: PUSH
3952: LD_EXP 6
3956: AND
3957: IFFALSE 4224
3959: GO 3961
3961: DISABLE
3962: LD_INT 0
3964: PPUSH
3965: PPUSH
// begin m1 := false ;
3966: LD_ADDR_VAR 0 1
3970: PUSH
3971: LD_INT 0
3973: ST_TO_ADDR
// m2 := false ;
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: LD_INT 0
3981: ST_TO_ADDR
// if killCounter = 0 then
3982: LD_EXP 12
3986: PUSH
3987: LD_INT 0
3989: EQUAL
3990: IFFALSE 3999
// SetAchievement ( ACH_PACIFIST ) ;
3992: LD_STRING ACH_PACIFIST
3994: PPUSH
3995: CALL_OW 543
// if tick < 7 7$00 then
3999: LD_OWVAR 1
4003: PUSH
4004: LD_INT 14700
4006: LESS
4007: IFFALSE 4023
// begin wait ( 3 ) ;
4009: LD_INT 3
4011: PPUSH
4012: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
4016: LD_STRING ACH_ASPEED_18
4018: PPUSH
4019: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
4023: LD_STRING Explosion
4025: PPUSH
4026: LD_INT 1
4028: PPUSH
4029: CALL_OW 101
// if enteredContaminatedArea then
4033: LD_EXP 5
4037: IFFALSE 4059
// begin m1 := true ;
4039: LD_ADDR_VAR 0 1
4043: PUSH
4044: LD_INT 1
4046: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
4047: LD_STRING BioHazard
4049: PPUSH
4050: LD_INT 1
4052: PPUSH
4053: CALL_OW 101
// end else
4057: GO 4070
// AddMedal ( BioHazard , - 1 ) ;
4059: LD_STRING BioHazard
4061: PPUSH
4062: LD_INT 1
4064: NEG
4065: PPUSH
4066: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
4070: LD_EXP 11
4074: PUSH
4075: LD_INT 42000
4077: PUSH
4078: LD_INT 31500
4080: PUSH
4081: LD_INT 25200
4083: PUSH
4084: LD_INT 24150
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: PUSH
4093: LD_OWVAR 67
4097: ARRAY
4098: LESSEQUAL
4099: IFFALSE 4121
// begin m2 := true ;
4101: LD_ADDR_VAR 0 2
4105: PUSH
4106: LD_INT 1
4108: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
4109: LD_STRING Speed
4111: PPUSH
4112: LD_INT 1
4114: PPUSH
4115: CALL_OW 101
// end else
4119: GO 4132
// AddMedal ( Speed , - 1 ) ;
4121: LD_STRING Speed
4123: PPUSH
4124: LD_INT 1
4126: NEG
4127: PPUSH
4128: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4132: LD_OWVAR 67
4136: PUSH
4137: LD_INT 3
4139: GREATEREQUAL
4140: PUSH
4141: LD_VAR 0 1
4145: AND
4146: PUSH
4147: LD_VAR 0 2
4151: AND
4152: IFFALSE 4164
// SetAchievementEX ( ACH_AMER , 18 ) ;
4154: LD_STRING ACH_AMER
4156: PPUSH
4157: LD_INT 18
4159: PPUSH
4160: CALL_OW 564
// GiveMedals ( Main ) ;
4164: LD_STRING Main
4166: PPUSH
4167: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4171: LD_EXP 14
4175: PUSH
4176: LD_EXP 15
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PPUSH
4185: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4189: LD_EXP 14
4193: PPUSH
4194: LD_STRING 14a_JMM
4196: PPUSH
4197: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4201: LD_EXP 15
4205: PPUSH
4206: LD_STRING 14a_Burlak
4208: PPUSH
4209: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
4213: LD_STRING enableBioCharacter(BIO_HUGH)
4215: PPUSH
4216: CALL_OW 559
// YouWin ;
4220: CALL_OW 103
// end ; end_of_file
4224: PPOPN 2
4226: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4227: LD_INT 0
4229: PPUSH
4230: PPUSH
4231: PPUSH
4232: PPUSH
// uc_side := 1 ;
4233: LD_ADDR_OWVAR 20
4237: PUSH
4238: LD_INT 1
4240: ST_TO_ADDR
// uc_nation := 1 ;
4241: LD_ADDR_OWVAR 21
4245: PUSH
4246: LD_INT 1
4248: ST_TO_ADDR
// InitHc ;
4249: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 750 ) ;
4253: LD_INT 34
4255: PPUSH
4256: CALL_OW 274
4260: PPUSH
4261: LD_INT 1
4263: PPUSH
4264: LD_INT 750
4266: PPUSH
4267: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4271: LD_INT 34
4273: PPUSH
4274: CALL_OW 274
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: LD_INT 20
4284: PPUSH
4285: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4289: LD_ADDR_EXP 18
4293: PUSH
4294: LD_STRING Stevens
4296: PPUSH
4297: CALL_OW 25
4301: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4302: LD_ADDR_EXP 19
4306: PUSH
4307: LD_STRING Powell
4309: PPUSH
4310: CALL_OW 25
4314: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4315: LD_EXP 18
4319: PPUSH
4320: LD_INT 1
4322: PPUSH
4323: CALL_OW 52
// vehGuard := [ ] ;
4327: LD_ADDR_EXP 23
4331: PUSH
4332: EMPTY
4333: ST_TO_ADDR
// hc_importance := 0 ;
4334: LD_ADDR_OWVAR 32
4338: PUSH
4339: LD_INT 0
4341: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4342: LD_INT 4
4344: PPUSH
4345: LD_INT 3
4347: PPUSH
4348: LD_INT 3
4350: PPUSH
4351: LD_INT 8
4353: PPUSH
4354: LD_INT 100
4356: PPUSH
4357: CALL 33514 0 5
// sibBomb := CreateVehicle ;
4361: LD_ADDR_EXP 21
4365: PUSH
4366: CALL_OW 45
4370: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4371: LD_EXP 21
4375: PPUSH
4376: LD_INT 1
4378: PPUSH
4379: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4383: LD_EXP 21
4387: PPUSH
4388: LD_INT 93
4390: PPUSH
4391: LD_INT 74
4393: PPUSH
4394: LD_INT 0
4396: PPUSH
4397: CALL_OW 48
// guards := [ ] ;
4401: LD_ADDR_EXP 22
4405: PUSH
4406: EMPTY
4407: ST_TO_ADDR
// for i = 1 to 3 do
4408: LD_ADDR_VAR 0 2
4412: PUSH
4413: DOUBLE
4414: LD_INT 1
4416: DEC
4417: ST_TO_ADDR
4418: LD_INT 3
4420: PUSH
4421: FOR_TO
4422: IFFALSE 4518
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4424: LD_INT 0
4426: PPUSH
4427: LD_INT 1
4429: PPUSH
4430: LD_INT 8
4432: PUSH
4433: LD_INT 9
4435: PUSH
4436: LD_INT 10
4438: PUSH
4439: LD_INT 10
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: PUSH
4448: LD_OWVAR 67
4452: ARRAY
4453: PPUSH
4454: CALL_OW 380
// un := CreateHuman ;
4458: LD_ADDR_VAR 0 3
4462: PUSH
4463: CALL_OW 44
4467: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4468: LD_VAR 0 3
4472: PPUSH
4473: LD_INT 2
4475: PUSH
4476: LD_INT 3
4478: PUSH
4479: LD_INT 4
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: LIST
4486: PUSH
4487: LD_VAR 0 2
4491: ARRAY
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 49
// guards := guards ^ un ;
4500: LD_ADDR_EXP 22
4504: PUSH
4505: LD_EXP 22
4509: PUSH
4510: LD_VAR 0 3
4514: ADD
4515: ST_TO_ADDR
// end ;
4516: GO 4421
4518: POP
4519: POP
// baseGuards := [ ] ;
4520: LD_ADDR_EXP 20
4524: PUSH
4525: EMPTY
4526: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4527: LD_ADDR_VAR 0 2
4531: PUSH
4532: DOUBLE
4533: LD_INT 1
4535: DEC
4536: ST_TO_ADDR
4537: LD_INT 5
4539: PUSH
4540: LD_INT 6
4542: PUSH
4543: LD_INT 7
4545: PUSH
4546: LD_INT 8
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: PUSH
4555: LD_OWVAR 67
4559: ARRAY
4560: PUSH
4561: FOR_TO
4562: IFFALSE 4712
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4564: LD_INT 0
4566: PPUSH
4567: LD_INT 8
4569: PUSH
4570: LD_INT 9
4572: PUSH
4573: LD_INT 10
4575: PUSH
4576: LD_INT 10
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: PUSH
4585: LD_OWVAR 67
4589: ARRAY
4590: PPUSH
4591: CALL_OW 381
// un := CreateHuman ;
4595: LD_ADDR_VAR 0 3
4599: PUSH
4600: CALL_OW 44
4604: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4605: LD_ADDR_EXP 20
4609: PUSH
4610: LD_EXP 20
4614: PUSH
4615: LD_VAR 0 3
4619: ADD
4620: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4621: LD_ADDR_VAR 0 4
4625: PUSH
4626: LD_INT 22
4628: PUSH
4629: LD_INT 1
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 58
4638: PUSH
4639: EMPTY
4640: LIST
4641: PUSH
4642: LD_INT 30
4644: PUSH
4645: LD_INT 32
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: PPUSH
4657: CALL_OW 69
4661: ST_TO_ADDR
// if tmp then
4662: LD_VAR 0 4
4666: IFFALSE 4698
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4668: LD_VAR 0 3
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_INT 1
4680: PPUSH
4681: LD_VAR 0 4
4685: PPUSH
4686: CALL_OW 12
4690: ARRAY
4691: PPUSH
4692: CALL_OW 52
4696: GO 4710
// PlaceHumanInUnit ( un , us_bar ) ;
4698: LD_VAR 0 3
4702: PPUSH
4703: LD_INT 51
4705: PPUSH
4706: CALL_OW 52
// end ;
4710: GO 4561
4712: POP
4713: POP
// if Difficulty > 1 then
4714: LD_OWVAR 67
4718: PUSH
4719: LD_INT 1
4721: GREATER
4722: IFFALSE 4770
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4724: LD_INT 0
4726: PPUSH
4727: LD_INT 5
4729: PPUSH
4730: LD_INT 9
4732: PUSH
4733: LD_INT 10
4735: PUSH
4736: LD_INT 10
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: PUSH
4744: LD_OWVAR 67
4748: PUSH
4749: LD_INT 1
4751: MINUS
4752: ARRAY
4753: PPUSH
4754: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4758: CALL_OW 44
4762: PPUSH
4763: LD_INT 80
4765: PPUSH
4766: CALL_OW 52
// end ; for i = 1 to 3 do
4770: LD_ADDR_VAR 0 2
4774: PUSH
4775: DOUBLE
4776: LD_INT 1
4778: DEC
4779: ST_TO_ADDR
4780: LD_INT 3
4782: PUSH
4783: FOR_TO
4784: IFFALSE 4810
// begin PrepareMechanic ( false , 9 ) ;
4786: LD_INT 0
4788: PPUSH
4789: LD_INT 9
4791: PPUSH
4792: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4796: CALL_OW 44
4800: PPUSH
4801: LD_INT 43
4803: PPUSH
4804: CALL_OW 52
// end ;
4808: GO 4783
4810: POP
4811: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4812: CALL_OW 44
4816: PPUSH
4817: LD_INT 49
4819: PPUSH
4820: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4824: LD_ADDR_VAR 0 2
4828: PUSH
4829: DOUBLE
4830: LD_INT 1
4832: DEC
4833: ST_TO_ADDR
4834: LD_INT 1
4836: PUSH
4837: LD_OWVAR 67
4841: PLUS
4842: PUSH
4843: FOR_TO
4844: IFFALSE 4891
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4846: LD_INT 0
4848: PPUSH
4849: LD_INT 8
4851: PUSH
4852: LD_INT 9
4854: PUSH
4855: LD_INT 10
4857: PUSH
4858: LD_INT 10
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: PUSH
4867: LD_OWVAR 67
4871: ARRAY
4872: PPUSH
4873: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4877: CALL_OW 44
4881: PPUSH
4882: LD_INT 5
4884: PPUSH
4885: CALL_OW 52
// end ;
4889: GO 4843
4891: POP
4892: POP
// for i = 1 to 3 do
4893: LD_ADDR_VAR 0 2
4897: PUSH
4898: DOUBLE
4899: LD_INT 1
4901: DEC
4902: ST_TO_ADDR
4903: LD_INT 3
4905: PUSH
4906: FOR_TO
4907: IFFALSE 4933
// begin PrepareScientist ( false , 10 ) ;
4909: LD_INT 0
4911: PPUSH
4912: LD_INT 10
4914: PPUSH
4915: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4919: CALL_OW 44
4923: PPUSH
4924: LD_INT 1
4926: PPUSH
4927: CALL_OW 52
// end ;
4931: GO 4906
4933: POP
4934: POP
// end ;
4935: LD_VAR 0 1
4939: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4940: LD_EXP 22
4944: PUSH
4945: LD_EXP 2
4949: NOT
4950: AND
4951: IFFALSE 5137
4953: GO 4955
4955: DISABLE
4956: LD_INT 0
4958: PPUSH
4959: PPUSH
4960: PPUSH
// begin enable ;
4961: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_INT 204
4969: PUSH
4970: LD_INT 30
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: LD_INT 165
4979: PUSH
4980: LD_INT 24
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 195
4989: PUSH
4990: LD_INT 6
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: LD_INT 223
4999: PUSH
5000: LD_INT 54
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PUSH
5007: LD_INT 214
5009: PUSH
5010: LD_INT 84
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: LD_INT 206
5019: PUSH
5020: LD_INT 71
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: ST_TO_ADDR
// for i in guards do
5035: LD_ADDR_VAR 0 1
5039: PUSH
5040: LD_EXP 22
5044: PUSH
5045: FOR_IN
5046: IFFALSE 5135
// begin if HasTask ( i ) then
5048: LD_VAR 0 1
5052: PPUSH
5053: CALL_OW 314
5057: IFFALSE 5063
// continue else
5059: GO 5045
5061: GO 5133
// begin j := rand ( 1 , 6 ) ;
5063: LD_ADDR_VAR 0 2
5067: PUSH
5068: LD_INT 1
5070: PPUSH
5071: LD_INT 6
5073: PPUSH
5074: CALL_OW 12
5078: ST_TO_ADDR
// if not See ( 7 , i ) then
5079: LD_INT 7
5081: PPUSH
5082: LD_VAR 0 1
5086: PPUSH
5087: CALL_OW 292
5091: NOT
5092: IFFALSE 5133
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
5094: LD_VAR 0 1
5098: PPUSH
5099: LD_VAR 0 3
5103: PUSH
5104: LD_VAR 0 2
5108: ARRAY
5109: PUSH
5110: LD_INT 1
5112: ARRAY
5113: PPUSH
5114: LD_VAR 0 3
5118: PUSH
5119: LD_VAR 0 2
5123: ARRAY
5124: PUSH
5125: LD_INT 2
5127: ARRAY
5128: PPUSH
5129: CALL_OW 114
// end ; end ;
5133: GO 5045
5135: POP
5136: POP
// end ;
5137: PPOPN 3
5139: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5140: LD_EXP 23
5144: PUSH
5145: LD_EXP 7
5149: NOT
5150: AND
5151: IFFALSE 5233
5153: GO 5155
5155: DISABLE
5156: LD_INT 0
5158: PPUSH
// begin enable ;
5159: ENABLE
// for i in vehGuard do
5160: LD_ADDR_VAR 0 1
5164: PUSH
5165: LD_EXP 23
5169: PUSH
5170: FOR_IN
5171: IFFALSE 5231
// if IsOk ( i ) and IsControledBy ( i ) then
5173: LD_VAR 0 1
5177: PPUSH
5178: CALL_OW 302
5182: PUSH
5183: LD_VAR 0 1
5187: PPUSH
5188: CALL_OW 312
5192: AND
5193: IFFALSE 5229
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5195: LD_VAR 0 1
5199: PPUSH
5200: LD_INT 22
5202: PUSH
5203: LD_INT 7
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PPUSH
5210: CALL_OW 69
5214: PPUSH
5215: LD_VAR 0 1
5219: PPUSH
5220: CALL_OW 74
5224: PPUSH
5225: CALL_OW 115
5229: GO 5170
5231: POP
5232: POP
// end ;
5233: PPOPN 1
5235: END
// every 1 1$00 + 3 3$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured and Difficulty > 1 do
5236: LD_EXP 4
5240: PUSH
5241: LD_INT 43
5243: PPUSH
5244: CALL_OW 302
5248: AND
5249: PUSH
5250: LD_EXP 7
5254: NOT
5255: AND
5256: PUSH
5257: LD_OWVAR 67
5261: PUSH
5262: LD_INT 1
5264: GREATER
5265: AND
5266: IFFALSE 5331
5268: GO 5270
5270: DISABLE
// begin enable ;
5271: ENABLE
// if Count ( vehGuard ) < Difficulty then
5272: LD_EXP 23
5276: PPUSH
5277: CALL 30776 0 1
5281: PUSH
5282: LD_OWVAR 67
5286: LESS
5287: IFFALSE 5331
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5289: LD_INT 43
5291: PPUSH
5292: LD_INT 5
5294: PPUSH
5295: LD_INT 3
5297: PPUSH
5298: LD_INT 2
5300: PPUSH
5301: LD_INT 7
5303: PUSH
5304: LD_INT 7
5306: PUSH
5307: LD_INT 9
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_INT 1
5317: PPUSH
5318: LD_INT 3
5320: PPUSH
5321: CALL_OW 12
5325: ARRAY
5326: PPUSH
5327: CALL_OW 125
// end ;
5331: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5332: LD_INT 22
5334: PUSH
5335: LD_INT 1
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: PUSH
5342: LD_INT 25
5344: PUSH
5345: LD_INT 5
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PUSH
5352: LD_INT 50
5354: PUSH
5355: EMPTY
5356: LIST
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: LIST
5362: PPUSH
5363: CALL_OW 69
5367: PUSH
5368: LD_EXP 7
5372: NOT
5373: AND
5374: IFFALSE 5603
5376: GO 5378
5378: DISABLE
5379: LD_INT 0
5381: PPUSH
5382: PPUSH
// begin enable ;
5383: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5384: LD_ADDR_VAR 0 1
5388: PUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 1
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PUSH
5399: LD_INT 25
5401: PUSH
5402: LD_INT 5
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 50
5411: PUSH
5412: EMPTY
5413: LIST
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: PPUSH
5420: CALL_OW 69
5424: ST_TO_ADDR
// if not tmp then
5425: LD_VAR 0 1
5429: NOT
5430: IFFALSE 5434
// exit ;
5432: GO 5603
// b := IsInUnit ( tmp [ 1 ] ) ;
5434: LD_ADDR_VAR 0 2
5438: PUSH
5439: LD_VAR 0 1
5443: PUSH
5444: LD_INT 1
5446: ARRAY
5447: PPUSH
5448: CALL_OW 310
5452: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5453: LD_VAR 0 2
5457: NOT
5458: PUSH
5459: LD_VAR 0 1
5463: PUSH
5464: LD_INT 1
5466: ARRAY
5467: PPUSH
5468: CALL_OW 314
5472: OR
5473: IFFALSE 5477
// exit ;
5475: GO 5603
// if b = us_bun1 then
5477: LD_VAR 0 2
5481: PUSH
5482: LD_INT 80
5484: EQUAL
5485: IFFALSE 5546
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5500: LD_VAR 0 1
5504: PUSH
5505: LD_INT 1
5507: ARRAY
5508: PPUSH
5509: LD_INT 27
5511: PPUSH
5512: LD_INT 44
5514: PPUSH
5515: CALL_OW 174
// if IsOk ( us_bun2 ) then
5519: LD_INT 55
5521: PPUSH
5522: CALL_OW 302
5526: IFFALSE 5544
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5528: LD_VAR 0 1
5532: PUSH
5533: LD_INT 1
5535: ARRAY
5536: PPUSH
5537: LD_INT 55
5539: PPUSH
5540: CALL_OW 180
// end else
5544: GO 5603
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5546: LD_VAR 0 1
5550: PUSH
5551: LD_INT 1
5553: ARRAY
5554: PPUSH
5555: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5559: LD_VAR 0 1
5563: PUSH
5564: LD_INT 1
5566: ARRAY
5567: PPUSH
5568: LD_INT 92
5570: PPUSH
5571: LD_INT 51
5573: PPUSH
5574: CALL_OW 174
// if IsOk ( us_bun1 ) then
5578: LD_INT 80
5580: PPUSH
5581: CALL_OW 302
5585: IFFALSE 5603
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5587: LD_VAR 0 1
5591: PUSH
5592: LD_INT 1
5594: ARRAY
5595: PPUSH
5596: LD_INT 80
5598: PPUSH
5599: CALL_OW 180
// end ; end ;
5603: PPOPN 2
5605: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5606: LD_EXP 7
5610: NOT
5611: PUSH
5612: LD_INT 9
5614: PPUSH
5615: LD_INT 22
5617: PUSH
5618: LD_INT 1
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PUSH
5625: LD_INT 21
5627: PUSH
5628: LD_INT 3
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PUSH
5635: LD_INT 3
5637: PUSH
5638: LD_INT 24
5640: PUSH
5641: LD_INT 1000
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 70
5661: AND
5662: IFFALSE 6073
5664: GO 5666
5666: DISABLE
5667: LD_INT 0
5669: PPUSH
5670: PPUSH
5671: PPUSH
5672: PPUSH
// begin enable ;
5673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5674: LD_ADDR_VAR 0 2
5678: PUSH
5679: LD_INT 22
5681: PUSH
5682: LD_INT 1
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 25
5691: PUSH
5692: LD_INT 2
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: LD_INT 24
5701: PUSH
5702: LD_INT 1000
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: LIST
5713: PPUSH
5714: CALL_OW 69
5718: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5719: LD_ADDR_VAR 0 3
5723: PUSH
5724: LD_INT 22
5726: PUSH
5727: LD_INT 1
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PUSH
5734: LD_INT 25
5736: PUSH
5737: LD_INT 2
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PUSH
5744: LD_INT 3
5746: PUSH
5747: LD_INT 24
5749: PUSH
5750: LD_INT 750
5752: PUSH
5753: EMPTY
5754: LIST
5755: LIST
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: LIST
5765: PPUSH
5766: CALL_OW 69
5770: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5771: LD_ADDR_VAR 0 4
5775: PUSH
5776: LD_INT 9
5778: PPUSH
5779: LD_INT 22
5781: PUSH
5782: LD_INT 1
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 21
5791: PUSH
5792: LD_INT 3
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 3
5801: PUSH
5802: LD_INT 24
5804: PUSH
5805: LD_INT 1000
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: LIST
5820: PPUSH
5821: CALL_OW 70
5825: PUSH
5826: LD_INT 1
5828: DIFF
5829: ST_TO_ADDR
// if not tmp and not tmp2 then
5830: LD_VAR 0 2
5834: NOT
5835: PUSH
5836: LD_VAR 0 3
5840: NOT
5841: AND
5842: IFFALSE 5846
// exit ;
5844: GO 6073
// if tmp and b then
5846: LD_VAR 0 2
5850: PUSH
5851: LD_VAR 0 4
5855: AND
5856: IFFALSE 5986
// for i in tmp do
5858: LD_ADDR_VAR 0 1
5862: PUSH
5863: LD_VAR 0 2
5867: PUSH
5868: FOR_IN
5869: IFFALSE 5984
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5871: LD_VAR 0 1
5875: PPUSH
5876: CALL_OW 110
5880: PUSH
5881: LD_INT 1
5883: EQUAL
5884: PUSH
5885: LD_VAR 0 1
5889: PPUSH
5890: CALL_OW 256
5894: PUSH
5895: LD_INT 1000
5897: LESS
5898: AND
5899: IFFALSE 5905
// continue else
5901: GO 5868
5903: GO 5932
// if GetTag ( i ) = 1 then
5905: LD_VAR 0 1
5909: PPUSH
5910: CALL_OW 110
5914: PUSH
5915: LD_INT 1
5917: EQUAL
5918: IFFALSE 5932
// SetTag ( i , 0 ) ;
5920: LD_VAR 0 1
5924: PPUSH
5925: LD_INT 0
5927: PPUSH
5928: CALL_OW 109
// if IsInUnit ( i ) then
5932: LD_VAR 0 1
5936: PPUSH
5937: CALL_OW 310
5941: IFFALSE 5952
// ComExitBuilding ( i ) ;
5943: LD_VAR 0 1
5947: PPUSH
5948: CALL_OW 122
// if not HasTask ( i ) then
5952: LD_VAR 0 1
5956: PPUSH
5957: CALL_OW 314
5961: NOT
5962: IFFALSE 5982
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5964: LD_VAR 0 1
5968: PPUSH
5969: LD_VAR 0 4
5973: PUSH
5974: LD_INT 1
5976: ARRAY
5977: PPUSH
5978: CALL_OW 190
// end ;
5982: GO 5868
5984: POP
5985: POP
// if tmp2 then
5986: LD_VAR 0 3
5990: IFFALSE 6073
// for i in tmp2 do
5992: LD_ADDR_VAR 0 1
5996: PUSH
5997: LD_VAR 0 3
6001: PUSH
6002: FOR_IN
6003: IFFALSE 6071
// begin if not GetTag ( i ) = 1 then
6005: LD_VAR 0 1
6009: PPUSH
6010: CALL_OW 110
6014: PUSH
6015: LD_INT 1
6017: EQUAL
6018: NOT
6019: IFFALSE 6033
// SetTag ( i , 1 ) ;
6021: LD_VAR 0 1
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
6033: LD_VAR 0 1
6037: PPUSH
6038: LD_INT 88
6040: PPUSH
6041: LD_INT 75
6043: PPUSH
6044: CALL_OW 297
6048: PUSH
6049: LD_INT 6
6051: GREATER
6052: IFFALSE 6069
// ComMoveXY ( i , 88 , 75 ) ;
6054: LD_VAR 0 1
6058: PPUSH
6059: LD_INT 88
6061: PPUSH
6062: LD_INT 75
6064: PPUSH
6065: CALL_OW 111
// end ;
6069: GO 6002
6071: POP
6072: POP
// end ;
6073: PPOPN 4
6075: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
6076: LD_EXP 7
6080: NOT
6081: PUSH
6082: LD_EXP 9
6086: AND
6087: PUSH
6088: LD_INT 9
6090: PPUSH
6091: LD_INT 22
6093: PUSH
6094: LD_INT 1
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: PUSH
6101: LD_INT 21
6103: PUSH
6104: LD_INT 1
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 3
6113: PUSH
6114: LD_INT 24
6116: PUSH
6117: LD_INT 1000
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: AND
6138: IFFALSE 6311
6140: GO 6142
6142: DISABLE
6143: LD_INT 0
6145: PPUSH
6146: PPUSH
6147: PPUSH
// begin enable ;
6148: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
6149: LD_ADDR_VAR 0 2
6153: PUSH
6154: LD_INT 22
6156: PUSH
6157: LD_INT 1
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: PUSH
6164: LD_INT 25
6166: PUSH
6167: LD_INT 4
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PPUSH
6178: CALL_OW 69
6182: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6183: LD_ADDR_VAR 0 3
6187: PUSH
6188: LD_INT 9
6190: PPUSH
6191: LD_INT 22
6193: PUSH
6194: LD_INT 1
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 21
6203: PUSH
6204: LD_INT 1
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 3
6213: PUSH
6214: LD_INT 24
6216: PUSH
6217: LD_INT 1000
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: LIST
6232: PPUSH
6233: CALL_OW 70
6237: ST_TO_ADDR
// if not sci or not tmp then
6238: LD_VAR 0 2
6242: NOT
6243: PUSH
6244: LD_VAR 0 3
6248: NOT
6249: OR
6250: IFFALSE 6254
// exit ;
6252: GO 6311
// for i in sci do
6254: LD_ADDR_VAR 0 1
6258: PUSH
6259: LD_VAR 0 2
6263: PUSH
6264: FOR_IN
6265: IFFALSE 6309
// if IsInUnit ( i ) then
6267: LD_VAR 0 1
6271: PPUSH
6272: CALL_OW 310
6276: IFFALSE 6289
// ComExitBuilding ( i ) else
6278: LD_VAR 0 1
6282: PPUSH
6283: CALL_OW 122
6287: GO 6307
// ComHeal ( i , tmp [ 1 ] ) ;
6289: LD_VAR 0 1
6293: PPUSH
6294: LD_VAR 0 3
6298: PUSH
6299: LD_INT 1
6301: ARRAY
6302: PPUSH
6303: CALL_OW 128
6307: GO 6264
6309: POP
6310: POP
// end ;
6311: PPOPN 3
6313: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6314: LD_EXP 7
6318: NOT
6319: PUSH
6320: LD_EXP 9
6324: AND
6325: PUSH
6326: LD_INT 1
6328: PPUSH
6329: CALL_OW 302
6333: AND
6334: PUSH
6335: LD_INT 9
6337: PPUSH
6338: LD_INT 22
6340: PUSH
6341: LD_INT 1
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: LD_INT 21
6350: PUSH
6351: LD_INT 1
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: LD_INT 3
6360: PUSH
6361: LD_INT 24
6363: PUSH
6364: LD_INT 1000
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: LIST
6379: PPUSH
6380: CALL_OW 70
6384: NOT
6385: AND
6386: PUSH
6387: LD_INT 22
6389: PUSH
6390: LD_INT 1
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: PUSH
6397: LD_INT 25
6399: PUSH
6400: LD_INT 4
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 56
6409: PUSH
6410: EMPTY
6411: LIST
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PPUSH
6418: CALL_OW 69
6422: AND
6423: IFFALSE 6516
6425: GO 6427
6427: DISABLE
6428: LD_INT 0
6430: PPUSH
// begin enable ;
6431: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6432: LD_ADDR_VAR 0 1
6436: PUSH
6437: LD_INT 22
6439: PUSH
6440: LD_INT 1
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PUSH
6447: LD_INT 25
6449: PUSH
6450: LD_INT 4
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: PUSH
6457: LD_INT 56
6459: PUSH
6460: EMPTY
6461: LIST
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: LIST
6467: PPUSH
6468: CALL_OW 69
6472: PUSH
6473: FOR_IN
6474: IFFALSE 6514
// if not GetTag ( i ) and not HasTask ( i ) then
6476: LD_VAR 0 1
6480: PPUSH
6481: CALL_OW 110
6485: NOT
6486: PUSH
6487: LD_VAR 0 1
6491: PPUSH
6492: CALL_OW 314
6496: NOT
6497: AND
6498: IFFALSE 6512
// ComEnterUnit ( i , us_lab ) ;
6500: LD_VAR 0 1
6504: PPUSH
6505: LD_INT 1
6507: PPUSH
6508: CALL_OW 120
6512: GO 6473
6514: POP
6515: POP
// end ;
6516: PPOPN 1
6518: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6519: LD_EXP 7
6523: NOT
6524: PUSH
6525: LD_INT 9
6527: PPUSH
6528: LD_INT 22
6530: PUSH
6531: LD_INT 1
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 21
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 3
6550: PUSH
6551: LD_INT 24
6553: PUSH
6554: LD_INT 1000
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: PPUSH
6570: CALL_OW 70
6574: NOT
6575: AND
6576: PUSH
6577: LD_INT 22
6579: PUSH
6580: LD_INT 1
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 25
6589: PUSH
6590: LD_INT 2
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: LD_INT 56
6599: PUSH
6600: EMPTY
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: PPUSH
6608: CALL_OW 69
6612: AND
6613: IFFALSE 6706
6615: GO 6617
6617: DISABLE
6618: LD_INT 0
6620: PPUSH
// begin enable ;
6621: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6622: LD_ADDR_VAR 0 1
6626: PUSH
6627: LD_INT 22
6629: PUSH
6630: LD_INT 1
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: PUSH
6637: LD_INT 25
6639: PUSH
6640: LD_INT 2
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_INT 56
6649: PUSH
6650: EMPTY
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: PPUSH
6658: CALL_OW 69
6662: PUSH
6663: FOR_IN
6664: IFFALSE 6704
// if not HasTask ( i ) and not GetTag ( i ) then
6666: LD_VAR 0 1
6670: PPUSH
6671: CALL_OW 314
6675: NOT
6676: PUSH
6677: LD_VAR 0 1
6681: PPUSH
6682: CALL_OW 110
6686: NOT
6687: AND
6688: IFFALSE 6702
// ComEnterUnit ( i , us_depot ) ;
6690: LD_VAR 0 1
6694: PPUSH
6695: LD_INT 5
6697: PPUSH
6698: CALL_OW 120
6702: GO 6663
6704: POP
6705: POP
// end ;
6706: PPOPN 1
6708: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6709: LD_EXP 9
6713: PUSH
6714: LD_INT 0
6716: LESSEQUAL
6717: PUSH
6718: LD_EXP 18
6722: PPUSH
6723: CALL_OW 301
6727: OR
6728: PUSH
6729: LD_INT 22
6731: PUSH
6732: LD_INT 1
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: LD_INT 25
6741: PUSH
6742: LD_INT 2
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PPUSH
6753: CALL_OW 69
6757: AND
6758: IFFALSE 6799
6760: GO 6762
6762: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6763: LD_INT 22
6765: PUSH
6766: LD_INT 1
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PUSH
6773: LD_INT 25
6775: PUSH
6776: LD_INT 2
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PPUSH
6787: CALL_OW 69
6791: PPUSH
6792: LD_INT 1
6794: PPUSH
6795: CALL_OW 167
6799: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6800: LD_EXP 7
6804: NOT
6805: PUSH
6806: LD_INT 7
6808: PPUSH
6809: LD_INT 22
6811: PUSH
6812: LD_INT 7
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PPUSH
6819: CALL_OW 70
6823: AND
6824: IFFALSE 6933
6826: GO 6828
6828: DISABLE
6829: LD_INT 0
6831: PPUSH
// begin wait ( 0 0$2 ) ;
6832: LD_INT 70
6834: PPUSH
6835: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] ] ) do
6839: LD_ADDR_VAR 0 1
6843: PUSH
6844: LD_INT 22
6846: PUSH
6847: LD_INT 1
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 2
6856: PUSH
6857: LD_INT 25
6859: PUSH
6860: LD_INT 1
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: LD_INT 25
6869: PUSH
6870: LD_INT 5
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 69
6890: PUSH
6891: FOR_IN
6892: IFFALSE 6931
// begin if IsInUnit ( i ) then
6894: LD_VAR 0 1
6898: PPUSH
6899: CALL_OW 310
6903: IFFALSE 6914
// ComExitBuilding ( i ) ;
6905: LD_VAR 0 1
6909: PPUSH
6910: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6914: LD_VAR 0 1
6918: PPUSH
6919: LD_INT 92
6921: PPUSH
6922: LD_INT 78
6924: PPUSH
6925: CALL_OW 174
// end ;
6929: GO 6891
6931: POP
6932: POP
// end ; end_of_file
6933: PPOPN 1
6935: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6936: LD_VAR 0 1
6940: PPUSH
6941: LD_VAR 0 2
6945: PPUSH
6946: LD_VAR 0 3
6950: PPUSH
6951: CALL 1579 0 3
6955: PPOPN 3
6957: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6958: LD_EXP 14
6962: PPUSH
6963: CALL_OW 257
6967: PUSH
6968: LD_INT 4
6970: EQUAL
6971: PUSH
6972: LD_EXP 15
6976: PPUSH
6977: CALL_OW 257
6981: PUSH
6982: LD_INT 4
6984: EQUAL
6985: OR
6986: PUSH
6987: LD_INT 22
6989: PUSH
6990: LD_INT 7
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: LD_INT 21
6999: PUSH
7000: LD_INT 3
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PPUSH
7011: CALL_OW 69
7015: OR
7016: IFFALSE 7020
// exit ;
7018: GO 7058
// if un = JMM then
7020: LD_VAR 0 1
7024: PUSH
7025: LD_EXP 14
7029: EQUAL
7030: IFFALSE 7039
// YouLost ( JMM ) ;
7032: LD_STRING JMM
7034: PPUSH
7035: CALL_OW 104
// if un = Burlak then
7039: LD_VAR 0 1
7043: PUSH
7044: LD_EXP 15
7048: EQUAL
7049: IFFALSE 7058
// YouLost ( Burlak ) ;
7051: LD_STRING Burlak
7053: PPUSH
7054: CALL_OW 104
// end ;
7058: PPOPN 1
7060: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7061: LD_VAR 0 1
7065: PPUSH
7066: CALL 23369 0 1
// if un = JMM then
7070: LD_VAR 0 1
7074: PUSH
7075: LD_EXP 14
7079: EQUAL
7080: IFFALSE 7089
// YouLost ( JMM ) ;
7082: LD_STRING JMM
7084: PPUSH
7085: CALL_OW 104
// if un = Burlak then
7089: LD_VAR 0 1
7093: PUSH
7094: LD_EXP 15
7098: EQUAL
7099: IFFALSE 7108
// YouLost ( Burlak ) ;
7101: LD_STRING Burlak
7103: PPUSH
7104: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
7108: LD_VAR 0 1
7112: PUSH
7113: LD_INT 21
7115: PUSH
7116: LD_INT 1
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: LD_INT 23
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PPUSH
7137: CALL_OW 69
7141: IN
7142: IFFALSE 7158
// killCounter := killCounter + 1 ;
7144: LD_ADDR_EXP 12
7148: PUSH
7149: LD_EXP 12
7153: PUSH
7154: LD_INT 1
7156: PLUS
7157: ST_TO_ADDR
// end ;
7158: PPOPN 1
7160: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
7161: LD_VAR 0 2
7165: PUSH
7166: LD_INT 7
7168: EQUAL
7169: PUSH
7170: LD_VAR 0 1
7174: PUSH
7175: LD_INT 2
7177: PUSH
7178: LD_INT 30
7180: PUSH
7181: LD_INT 31
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 30
7190: PUSH
7191: LD_INT 32
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 30
7200: PUSH
7201: LD_INT 33
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: IN
7219: AND
7220: IFFALSE 7236
// bunkerCounter := bunkerCounter + 1 ;
7222: LD_ADDR_EXP 13
7226: PUSH
7227: LD_EXP 13
7231: PUSH
7232: LD_INT 1
7234: PLUS
7235: ST_TO_ADDR
// end ;
7236: PPOPN 3
7238: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7239: LD_VAR 0 1
7243: PPUSH
7244: CALL_OW 255
7248: PUSH
7249: LD_INT 7
7251: EQUAL
7252: IFFALSE 7262
// artifactPickedUp := true ;
7254: LD_ADDR_EXP 6
7258: PUSH
7259: LD_INT 1
7261: ST_TO_ADDR
// end ;
7262: PPOPN 2
7264: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7265: LD_ADDR_EXP 6
7269: PUSH
7270: LD_INT 0
7272: ST_TO_ADDR
7273: PPOPN 2
7275: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7276: LD_VAR 0 1
7280: PPUSH
7281: LD_VAR 0 2
7285: PPUSH
7286: CALL 23427 0 2
// if GetSide ( vehicle ) <> 1 then
7290: LD_VAR 0 1
7294: PPUSH
7295: CALL_OW 255
7299: PUSH
7300: LD_INT 1
7302: NONEQUAL
7303: IFFALSE 7307
// exit ;
7305: GO 7354
// wait ( 0 0$5 ) ;
7307: LD_INT 175
7309: PPUSH
7310: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7314: LD_VAR 0 1
7318: PPUSH
7319: CALL_OW 263
7323: PUSH
7324: LD_INT 2
7326: EQUAL
7327: IFFALSE 7338
// Connect ( vehicle ) ;
7329: LD_VAR 0 1
7333: PPUSH
7334: CALL 36982 0 1
// vehGuard := vehGuard ^ vehicle ;
7338: LD_ADDR_EXP 23
7342: PUSH
7343: LD_EXP 23
7347: PUSH
7348: LD_VAR 0 1
7352: ADD
7353: ST_TO_ADDR
// end ;
7354: PPOPN 2
7356: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7357: LD_VAR 0 1
7361: PUSH
7362: LD_INT 1
7364: EQUAL
7365: PUSH
7366: LD_EXP 7
7370: NOT
7371: AND
7372: IFFALSE 7407
// begin planCaptured := true ;
7374: LD_ADDR_EXP 7
7378: PUSH
7379: LD_INT 1
7381: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7382: LD_STRING MEnd
7384: PPUSH
7385: CALL_OW 337
// canEnd := true ;
7389: LD_ADDR_EXP 10
7393: PUSH
7394: LD_INT 1
7396: ST_TO_ADDR
// missionTime := tick ;
7397: LD_ADDR_EXP 11
7401: PUSH
7402: LD_OWVAR 1
7406: ST_TO_ADDR
// end ; end ;
7407: PPOPN 3
7409: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7410: LD_VAR 0 1
7414: PPUSH
7415: CALL 23411 0 1
// end ; end_of_file end_of_file
7419: PPOPN 1
7421: END
// export globalGameSaveCounter ; every 0 0$1 do
7422: GO 7424
7424: DISABLE
// begin enable ;
7425: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7426: LD_STRING updateTimer(
7428: PUSH
7429: LD_OWVAR 1
7433: STR
7434: PUSH
7435: LD_STRING );
7437: STR
7438: PPUSH
7439: CALL_OW 559
// end ;
7443: END
// every 0 0$1 do
7444: GO 7446
7446: DISABLE
// begin globalGameSaveCounter := 0 ;
7447: LD_ADDR_EXP 24
7451: PUSH
7452: LD_INT 0
7454: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7455: LD_STRING setGameSaveCounter(0)
7457: PPUSH
7458: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7462: LD_STRING initStreamRollete();
7464: PPUSH
7465: CALL_OW 559
// InitStreamMode ;
7469: CALL 8812 0 0
// DefineStreamItems ( false ) ;
7473: LD_INT 0
7475: PPUSH
7476: CALL 9276 0 1
// end ;
7480: END
// export function SOS_MapStart ( ) ; begin
7481: LD_INT 0
7483: PPUSH
// if streamModeActive then
7484: LD_EXP 25
7488: IFFALSE 7497
// DefineStreamItems ( true ) ;
7490: LD_INT 1
7492: PPUSH
7493: CALL 9276 0 1
// UpdateLuaVariables ( ) ;
7497: CALL 7514 0 0
// UpdateFactoryWaypoints ( ) ;
7501: CALL 22278 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7505: CALL 22530 0 0
// end ;
7509: LD_VAR 0 1
7513: RET
// function UpdateLuaVariables ( ) ; begin
7514: LD_INT 0
7516: PPUSH
// if globalGameSaveCounter then
7517: LD_EXP 24
7521: IFFALSE 7555
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7523: LD_ADDR_EXP 24
7527: PUSH
7528: LD_EXP 24
7532: PPUSH
7533: CALL 67746 0 1
7537: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7538: LD_STRING setGameSaveCounter(
7540: PUSH
7541: LD_EXP 24
7545: STR
7546: PUSH
7547: LD_STRING )
7549: STR
7550: PPUSH
7551: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7555: LD_STRING setGameDifficulty(
7557: PUSH
7558: LD_OWVAR 67
7562: STR
7563: PUSH
7564: LD_STRING )
7566: STR
7567: PPUSH
7568: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7572: LD_STRING displayDifficulty(
7574: PUSH
7575: LD_OWVAR 67
7579: STR
7580: PUSH
7581: LD_STRING )
7583: STR
7584: PPUSH
7585: CALL_OW 559
// end ;
7589: LD_VAR 0 1
7593: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7594: LD_INT 0
7596: PPUSH
// if p2 = stream_mode then
7597: LD_VAR 0 2
7601: PUSH
7602: LD_INT 100
7604: EQUAL
7605: IFFALSE 8608
// begin if not StreamModeActive then
7607: LD_EXP 25
7611: NOT
7612: IFFALSE 7622
// StreamModeActive := true ;
7614: LD_ADDR_EXP 25
7618: PUSH
7619: LD_INT 1
7621: ST_TO_ADDR
// if p3 = 0 then
7622: LD_VAR 0 3
7626: PUSH
7627: LD_INT 0
7629: EQUAL
7630: IFFALSE 7636
// InitStreamMode ;
7632: CALL 8812 0 0
// if p3 = 1 then
7636: LD_VAR 0 3
7640: PUSH
7641: LD_INT 1
7643: EQUAL
7644: IFFALSE 7654
// sRocket := true ;
7646: LD_ADDR_EXP 30
7650: PUSH
7651: LD_INT 1
7653: ST_TO_ADDR
// if p3 = 2 then
7654: LD_VAR 0 3
7658: PUSH
7659: LD_INT 2
7661: EQUAL
7662: IFFALSE 7672
// sSpeed := true ;
7664: LD_ADDR_EXP 29
7668: PUSH
7669: LD_INT 1
7671: ST_TO_ADDR
// if p3 = 3 then
7672: LD_VAR 0 3
7676: PUSH
7677: LD_INT 3
7679: EQUAL
7680: IFFALSE 7690
// sEngine := true ;
7682: LD_ADDR_EXP 31
7686: PUSH
7687: LD_INT 1
7689: ST_TO_ADDR
// if p3 = 4 then
7690: LD_VAR 0 3
7694: PUSH
7695: LD_INT 4
7697: EQUAL
7698: IFFALSE 7708
// sSpec := true ;
7700: LD_ADDR_EXP 28
7704: PUSH
7705: LD_INT 1
7707: ST_TO_ADDR
// if p3 = 5 then
7708: LD_VAR 0 3
7712: PUSH
7713: LD_INT 5
7715: EQUAL
7716: IFFALSE 7726
// sLevel := true ;
7718: LD_ADDR_EXP 32
7722: PUSH
7723: LD_INT 1
7725: ST_TO_ADDR
// if p3 = 6 then
7726: LD_VAR 0 3
7730: PUSH
7731: LD_INT 6
7733: EQUAL
7734: IFFALSE 7744
// sArmoury := true ;
7736: LD_ADDR_EXP 33
7740: PUSH
7741: LD_INT 1
7743: ST_TO_ADDR
// if p3 = 7 then
7744: LD_VAR 0 3
7748: PUSH
7749: LD_INT 7
7751: EQUAL
7752: IFFALSE 7762
// sRadar := true ;
7754: LD_ADDR_EXP 34
7758: PUSH
7759: LD_INT 1
7761: ST_TO_ADDR
// if p3 = 8 then
7762: LD_VAR 0 3
7766: PUSH
7767: LD_INT 8
7769: EQUAL
7770: IFFALSE 7780
// sBunker := true ;
7772: LD_ADDR_EXP 35
7776: PUSH
7777: LD_INT 1
7779: ST_TO_ADDR
// if p3 = 9 then
7780: LD_VAR 0 3
7784: PUSH
7785: LD_INT 9
7787: EQUAL
7788: IFFALSE 7798
// sHack := true ;
7790: LD_ADDR_EXP 36
7794: PUSH
7795: LD_INT 1
7797: ST_TO_ADDR
// if p3 = 10 then
7798: LD_VAR 0 3
7802: PUSH
7803: LD_INT 10
7805: EQUAL
7806: IFFALSE 7816
// sFire := true ;
7808: LD_ADDR_EXP 37
7812: PUSH
7813: LD_INT 1
7815: ST_TO_ADDR
// if p3 = 11 then
7816: LD_VAR 0 3
7820: PUSH
7821: LD_INT 11
7823: EQUAL
7824: IFFALSE 7834
// sRefresh := true ;
7826: LD_ADDR_EXP 38
7830: PUSH
7831: LD_INT 1
7833: ST_TO_ADDR
// if p3 = 12 then
7834: LD_VAR 0 3
7838: PUSH
7839: LD_INT 12
7841: EQUAL
7842: IFFALSE 7852
// sExp := true ;
7844: LD_ADDR_EXP 39
7848: PUSH
7849: LD_INT 1
7851: ST_TO_ADDR
// if p3 = 13 then
7852: LD_VAR 0 3
7856: PUSH
7857: LD_INT 13
7859: EQUAL
7860: IFFALSE 7870
// sDepot := true ;
7862: LD_ADDR_EXP 40
7866: PUSH
7867: LD_INT 1
7869: ST_TO_ADDR
// if p3 = 14 then
7870: LD_VAR 0 3
7874: PUSH
7875: LD_INT 14
7877: EQUAL
7878: IFFALSE 7888
// sFlag := true ;
7880: LD_ADDR_EXP 41
7884: PUSH
7885: LD_INT 1
7887: ST_TO_ADDR
// if p3 = 15 then
7888: LD_VAR 0 3
7892: PUSH
7893: LD_INT 15
7895: EQUAL
7896: IFFALSE 7906
// sKamikadze := true ;
7898: LD_ADDR_EXP 49
7902: PUSH
7903: LD_INT 1
7905: ST_TO_ADDR
// if p3 = 16 then
7906: LD_VAR 0 3
7910: PUSH
7911: LD_INT 16
7913: EQUAL
7914: IFFALSE 7924
// sTroll := true ;
7916: LD_ADDR_EXP 50
7920: PUSH
7921: LD_INT 1
7923: ST_TO_ADDR
// if p3 = 17 then
7924: LD_VAR 0 3
7928: PUSH
7929: LD_INT 17
7931: EQUAL
7932: IFFALSE 7942
// sSlow := true ;
7934: LD_ADDR_EXP 51
7938: PUSH
7939: LD_INT 1
7941: ST_TO_ADDR
// if p3 = 18 then
7942: LD_VAR 0 3
7946: PUSH
7947: LD_INT 18
7949: EQUAL
7950: IFFALSE 7960
// sLack := true ;
7952: LD_ADDR_EXP 52
7956: PUSH
7957: LD_INT 1
7959: ST_TO_ADDR
// if p3 = 19 then
7960: LD_VAR 0 3
7964: PUSH
7965: LD_INT 19
7967: EQUAL
7968: IFFALSE 7978
// sTank := true ;
7970: LD_ADDR_EXP 54
7974: PUSH
7975: LD_INT 1
7977: ST_TO_ADDR
// if p3 = 20 then
7978: LD_VAR 0 3
7982: PUSH
7983: LD_INT 20
7985: EQUAL
7986: IFFALSE 7996
// sRemote := true ;
7988: LD_ADDR_EXP 55
7992: PUSH
7993: LD_INT 1
7995: ST_TO_ADDR
// if p3 = 21 then
7996: LD_VAR 0 3
8000: PUSH
8001: LD_INT 21
8003: EQUAL
8004: IFFALSE 8014
// sPowell := true ;
8006: LD_ADDR_EXP 56
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// if p3 = 22 then
8014: LD_VAR 0 3
8018: PUSH
8019: LD_INT 22
8021: EQUAL
8022: IFFALSE 8032
// sTeleport := true ;
8024: LD_ADDR_EXP 59
8028: PUSH
8029: LD_INT 1
8031: ST_TO_ADDR
// if p3 = 23 then
8032: LD_VAR 0 3
8036: PUSH
8037: LD_INT 23
8039: EQUAL
8040: IFFALSE 8050
// sOilTower := true ;
8042: LD_ADDR_EXP 61
8046: PUSH
8047: LD_INT 1
8049: ST_TO_ADDR
// if p3 = 24 then
8050: LD_VAR 0 3
8054: PUSH
8055: LD_INT 24
8057: EQUAL
8058: IFFALSE 8068
// sShovel := true ;
8060: LD_ADDR_EXP 62
8064: PUSH
8065: LD_INT 1
8067: ST_TO_ADDR
// if p3 = 25 then
8068: LD_VAR 0 3
8072: PUSH
8073: LD_INT 25
8075: EQUAL
8076: IFFALSE 8086
// sSheik := true ;
8078: LD_ADDR_EXP 63
8082: PUSH
8083: LD_INT 1
8085: ST_TO_ADDR
// if p3 = 26 then
8086: LD_VAR 0 3
8090: PUSH
8091: LD_INT 26
8093: EQUAL
8094: IFFALSE 8104
// sEarthquake := true ;
8096: LD_ADDR_EXP 65
8100: PUSH
8101: LD_INT 1
8103: ST_TO_ADDR
// if p3 = 27 then
8104: LD_VAR 0 3
8108: PUSH
8109: LD_INT 27
8111: EQUAL
8112: IFFALSE 8122
// sAI := true ;
8114: LD_ADDR_EXP 66
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// if p3 = 28 then
8122: LD_VAR 0 3
8126: PUSH
8127: LD_INT 28
8129: EQUAL
8130: IFFALSE 8140
// sCargo := true ;
8132: LD_ADDR_EXP 69
8136: PUSH
8137: LD_INT 1
8139: ST_TO_ADDR
// if p3 = 29 then
8140: LD_VAR 0 3
8144: PUSH
8145: LD_INT 29
8147: EQUAL
8148: IFFALSE 8158
// sDLaser := true ;
8150: LD_ADDR_EXP 70
8154: PUSH
8155: LD_INT 1
8157: ST_TO_ADDR
// if p3 = 30 then
8158: LD_VAR 0 3
8162: PUSH
8163: LD_INT 30
8165: EQUAL
8166: IFFALSE 8176
// sExchange := true ;
8168: LD_ADDR_EXP 71
8172: PUSH
8173: LD_INT 1
8175: ST_TO_ADDR
// if p3 = 31 then
8176: LD_VAR 0 3
8180: PUSH
8181: LD_INT 31
8183: EQUAL
8184: IFFALSE 8194
// sFac := true ;
8186: LD_ADDR_EXP 72
8190: PUSH
8191: LD_INT 1
8193: ST_TO_ADDR
// if p3 = 32 then
8194: LD_VAR 0 3
8198: PUSH
8199: LD_INT 32
8201: EQUAL
8202: IFFALSE 8212
// sPower := true ;
8204: LD_ADDR_EXP 73
8208: PUSH
8209: LD_INT 1
8211: ST_TO_ADDR
// if p3 = 33 then
8212: LD_VAR 0 3
8216: PUSH
8217: LD_INT 33
8219: EQUAL
8220: IFFALSE 8230
// sRandom := true ;
8222: LD_ADDR_EXP 74
8226: PUSH
8227: LD_INT 1
8229: ST_TO_ADDR
// if p3 = 34 then
8230: LD_VAR 0 3
8234: PUSH
8235: LD_INT 34
8237: EQUAL
8238: IFFALSE 8248
// sShield := true ;
8240: LD_ADDR_EXP 75
8244: PUSH
8245: LD_INT 1
8247: ST_TO_ADDR
// if p3 = 35 then
8248: LD_VAR 0 3
8252: PUSH
8253: LD_INT 35
8255: EQUAL
8256: IFFALSE 8266
// sTime := true ;
8258: LD_ADDR_EXP 76
8262: PUSH
8263: LD_INT 1
8265: ST_TO_ADDR
// if p3 = 36 then
8266: LD_VAR 0 3
8270: PUSH
8271: LD_INT 36
8273: EQUAL
8274: IFFALSE 8284
// sTools := true ;
8276: LD_ADDR_EXP 77
8280: PUSH
8281: LD_INT 1
8283: ST_TO_ADDR
// if p3 = 101 then
8284: LD_VAR 0 3
8288: PUSH
8289: LD_INT 101
8291: EQUAL
8292: IFFALSE 8302
// sSold := true ;
8294: LD_ADDR_EXP 42
8298: PUSH
8299: LD_INT 1
8301: ST_TO_ADDR
// if p3 = 102 then
8302: LD_VAR 0 3
8306: PUSH
8307: LD_INT 102
8309: EQUAL
8310: IFFALSE 8320
// sDiff := true ;
8312: LD_ADDR_EXP 43
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// if p3 = 103 then
8320: LD_VAR 0 3
8324: PUSH
8325: LD_INT 103
8327: EQUAL
8328: IFFALSE 8338
// sFog := true ;
8330: LD_ADDR_EXP 46
8334: PUSH
8335: LD_INT 1
8337: ST_TO_ADDR
// if p3 = 104 then
8338: LD_VAR 0 3
8342: PUSH
8343: LD_INT 104
8345: EQUAL
8346: IFFALSE 8356
// sReset := true ;
8348: LD_ADDR_EXP 47
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// if p3 = 105 then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_INT 105
8363: EQUAL
8364: IFFALSE 8374
// sSun := true ;
8366: LD_ADDR_EXP 48
8370: PUSH
8371: LD_INT 1
8373: ST_TO_ADDR
// if p3 = 106 then
8374: LD_VAR 0 3
8378: PUSH
8379: LD_INT 106
8381: EQUAL
8382: IFFALSE 8392
// sTiger := true ;
8384: LD_ADDR_EXP 44
8388: PUSH
8389: LD_INT 1
8391: ST_TO_ADDR
// if p3 = 107 then
8392: LD_VAR 0 3
8396: PUSH
8397: LD_INT 107
8399: EQUAL
8400: IFFALSE 8410
// sBomb := true ;
8402: LD_ADDR_EXP 45
8406: PUSH
8407: LD_INT 1
8409: ST_TO_ADDR
// if p3 = 108 then
8410: LD_VAR 0 3
8414: PUSH
8415: LD_INT 108
8417: EQUAL
8418: IFFALSE 8428
// sWound := true ;
8420: LD_ADDR_EXP 53
8424: PUSH
8425: LD_INT 1
8427: ST_TO_ADDR
// if p3 = 109 then
8428: LD_VAR 0 3
8432: PUSH
8433: LD_INT 109
8435: EQUAL
8436: IFFALSE 8446
// sBetray := true ;
8438: LD_ADDR_EXP 57
8442: PUSH
8443: LD_INT 1
8445: ST_TO_ADDR
// if p3 = 110 then
8446: LD_VAR 0 3
8450: PUSH
8451: LD_INT 110
8453: EQUAL
8454: IFFALSE 8464
// sContamin := true ;
8456: LD_ADDR_EXP 58
8460: PUSH
8461: LD_INT 1
8463: ST_TO_ADDR
// if p3 = 111 then
8464: LD_VAR 0 3
8468: PUSH
8469: LD_INT 111
8471: EQUAL
8472: IFFALSE 8482
// sOil := true ;
8474: LD_ADDR_EXP 60
8478: PUSH
8479: LD_INT 1
8481: ST_TO_ADDR
// if p3 = 112 then
8482: LD_VAR 0 3
8486: PUSH
8487: LD_INT 112
8489: EQUAL
8490: IFFALSE 8500
// sStu := true ;
8492: LD_ADDR_EXP 64
8496: PUSH
8497: LD_INT 1
8499: ST_TO_ADDR
// if p3 = 113 then
8500: LD_VAR 0 3
8504: PUSH
8505: LD_INT 113
8507: EQUAL
8508: IFFALSE 8518
// sBazooka := true ;
8510: LD_ADDR_EXP 67
8514: PUSH
8515: LD_INT 1
8517: ST_TO_ADDR
// if p3 = 114 then
8518: LD_VAR 0 3
8522: PUSH
8523: LD_INT 114
8525: EQUAL
8526: IFFALSE 8536
// sMortar := true ;
8528: LD_ADDR_EXP 68
8532: PUSH
8533: LD_INT 1
8535: ST_TO_ADDR
// if p3 = 115 then
8536: LD_VAR 0 3
8540: PUSH
8541: LD_INT 115
8543: EQUAL
8544: IFFALSE 8554
// sRanger := true ;
8546: LD_ADDR_EXP 78
8550: PUSH
8551: LD_INT 1
8553: ST_TO_ADDR
// if p3 = 116 then
8554: LD_VAR 0 3
8558: PUSH
8559: LD_INT 116
8561: EQUAL
8562: IFFALSE 8572
// sComputer := true ;
8564: LD_ADDR_EXP 79
8568: PUSH
8569: LD_INT 1
8571: ST_TO_ADDR
// if p3 = 117 then
8572: LD_VAR 0 3
8576: PUSH
8577: LD_INT 117
8579: EQUAL
8580: IFFALSE 8590
// s30 := true ;
8582: LD_ADDR_EXP 80
8586: PUSH
8587: LD_INT 1
8589: ST_TO_ADDR
// if p3 = 118 then
8590: LD_VAR 0 3
8594: PUSH
8595: LD_INT 118
8597: EQUAL
8598: IFFALSE 8608
// s60 := true ;
8600: LD_ADDR_EXP 81
8604: PUSH
8605: LD_INT 1
8607: ST_TO_ADDR
// end ; if p2 = hack_mode then
8608: LD_VAR 0 2
8612: PUSH
8613: LD_INT 101
8615: EQUAL
8616: IFFALSE 8744
// begin case p3 of 1 :
8618: LD_VAR 0 3
8622: PUSH
8623: LD_INT 1
8625: DOUBLE
8626: EQUAL
8627: IFTRUE 8631
8629: GO 8638
8631: POP
// hHackUnlimitedResources ; 2 :
8632: CALL 20891 0 0
8636: GO 8744
8638: LD_INT 2
8640: DOUBLE
8641: EQUAL
8642: IFTRUE 8646
8644: GO 8653
8646: POP
// hHackSetLevel10 ; 3 :
8647: CALL 21024 0 0
8651: GO 8744
8653: LD_INT 3
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8668
8661: POP
// hHackSetLevel10YourUnits ; 4 :
8662: CALL 21109 0 0
8666: GO 8744
8668: LD_INT 4
8670: DOUBLE
8671: EQUAL
8672: IFTRUE 8676
8674: GO 8683
8676: POP
// hHackInvincible ; 5 :
8677: CALL 21557 0 0
8681: GO 8744
8683: LD_INT 5
8685: DOUBLE
8686: EQUAL
8687: IFTRUE 8691
8689: GO 8698
8691: POP
// hHackInvisible ; 6 :
8692: CALL 21668 0 0
8696: GO 8744
8698: LD_INT 6
8700: DOUBLE
8701: EQUAL
8702: IFTRUE 8706
8704: GO 8713
8706: POP
// hHackChangeYourSide ; 7 :
8707: CALL 21725 0 0
8711: GO 8744
8713: LD_INT 7
8715: DOUBLE
8716: EQUAL
8717: IFTRUE 8721
8719: GO 8728
8721: POP
// hHackChangeUnitSide ; 8 :
8722: CALL 21767 0 0
8726: GO 8744
8728: LD_INT 8
8730: DOUBLE
8731: EQUAL
8732: IFTRUE 8736
8734: GO 8743
8736: POP
// hHackFog ; end ;
8737: CALL 21868 0 0
8741: GO 8744
8743: POP
// end ; if p2 = game_save_mode then
8744: LD_VAR 0 2
8748: PUSH
8749: LD_INT 102
8751: EQUAL
8752: IFFALSE 8807
// begin if p3 = 1 then
8754: LD_VAR 0 3
8758: PUSH
8759: LD_INT 1
8761: EQUAL
8762: IFFALSE 8774
// globalGameSaveCounter := p4 ;
8764: LD_ADDR_EXP 24
8768: PUSH
8769: LD_VAR 0 4
8773: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8774: LD_VAR 0 3
8778: PUSH
8779: LD_INT 2
8781: EQUAL
8782: PUSH
8783: LD_EXP 24
8787: AND
8788: IFFALSE 8807
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8790: LD_STRING setGameSaveCounter(
8792: PUSH
8793: LD_EXP 24
8797: STR
8798: PUSH
8799: LD_STRING )
8801: STR
8802: PPUSH
8803: CALL_OW 559
// end ; end ;
8807: LD_VAR 0 7
8811: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8812: LD_INT 0
8814: PPUSH
// streamModeActive := false ;
8815: LD_ADDR_EXP 25
8819: PUSH
8820: LD_INT 0
8822: ST_TO_ADDR
// normalCounter := 36 ;
8823: LD_ADDR_EXP 26
8827: PUSH
8828: LD_INT 36
8830: ST_TO_ADDR
// hardcoreCounter := 18 ;
8831: LD_ADDR_EXP 27
8835: PUSH
8836: LD_INT 18
8838: ST_TO_ADDR
// sRocket := false ;
8839: LD_ADDR_EXP 30
8843: PUSH
8844: LD_INT 0
8846: ST_TO_ADDR
// sSpeed := false ;
8847: LD_ADDR_EXP 29
8851: PUSH
8852: LD_INT 0
8854: ST_TO_ADDR
// sEngine := false ;
8855: LD_ADDR_EXP 31
8859: PUSH
8860: LD_INT 0
8862: ST_TO_ADDR
// sSpec := false ;
8863: LD_ADDR_EXP 28
8867: PUSH
8868: LD_INT 0
8870: ST_TO_ADDR
// sLevel := false ;
8871: LD_ADDR_EXP 32
8875: PUSH
8876: LD_INT 0
8878: ST_TO_ADDR
// sArmoury := false ;
8879: LD_ADDR_EXP 33
8883: PUSH
8884: LD_INT 0
8886: ST_TO_ADDR
// sRadar := false ;
8887: LD_ADDR_EXP 34
8891: PUSH
8892: LD_INT 0
8894: ST_TO_ADDR
// sBunker := false ;
8895: LD_ADDR_EXP 35
8899: PUSH
8900: LD_INT 0
8902: ST_TO_ADDR
// sHack := false ;
8903: LD_ADDR_EXP 36
8907: PUSH
8908: LD_INT 0
8910: ST_TO_ADDR
// sFire := false ;
8911: LD_ADDR_EXP 37
8915: PUSH
8916: LD_INT 0
8918: ST_TO_ADDR
// sRefresh := false ;
8919: LD_ADDR_EXP 38
8923: PUSH
8924: LD_INT 0
8926: ST_TO_ADDR
// sExp := false ;
8927: LD_ADDR_EXP 39
8931: PUSH
8932: LD_INT 0
8934: ST_TO_ADDR
// sDepot := false ;
8935: LD_ADDR_EXP 40
8939: PUSH
8940: LD_INT 0
8942: ST_TO_ADDR
// sFlag := false ;
8943: LD_ADDR_EXP 41
8947: PUSH
8948: LD_INT 0
8950: ST_TO_ADDR
// sKamikadze := false ;
8951: LD_ADDR_EXP 49
8955: PUSH
8956: LD_INT 0
8958: ST_TO_ADDR
// sTroll := false ;
8959: LD_ADDR_EXP 50
8963: PUSH
8964: LD_INT 0
8966: ST_TO_ADDR
// sSlow := false ;
8967: LD_ADDR_EXP 51
8971: PUSH
8972: LD_INT 0
8974: ST_TO_ADDR
// sLack := false ;
8975: LD_ADDR_EXP 52
8979: PUSH
8980: LD_INT 0
8982: ST_TO_ADDR
// sTank := false ;
8983: LD_ADDR_EXP 54
8987: PUSH
8988: LD_INT 0
8990: ST_TO_ADDR
// sRemote := false ;
8991: LD_ADDR_EXP 55
8995: PUSH
8996: LD_INT 0
8998: ST_TO_ADDR
// sPowell := false ;
8999: LD_ADDR_EXP 56
9003: PUSH
9004: LD_INT 0
9006: ST_TO_ADDR
// sTeleport := false ;
9007: LD_ADDR_EXP 59
9011: PUSH
9012: LD_INT 0
9014: ST_TO_ADDR
// sOilTower := false ;
9015: LD_ADDR_EXP 61
9019: PUSH
9020: LD_INT 0
9022: ST_TO_ADDR
// sShovel := false ;
9023: LD_ADDR_EXP 62
9027: PUSH
9028: LD_INT 0
9030: ST_TO_ADDR
// sSheik := false ;
9031: LD_ADDR_EXP 63
9035: PUSH
9036: LD_INT 0
9038: ST_TO_ADDR
// sEarthquake := false ;
9039: LD_ADDR_EXP 65
9043: PUSH
9044: LD_INT 0
9046: ST_TO_ADDR
// sAI := false ;
9047: LD_ADDR_EXP 66
9051: PUSH
9052: LD_INT 0
9054: ST_TO_ADDR
// sCargo := false ;
9055: LD_ADDR_EXP 69
9059: PUSH
9060: LD_INT 0
9062: ST_TO_ADDR
// sDLaser := false ;
9063: LD_ADDR_EXP 70
9067: PUSH
9068: LD_INT 0
9070: ST_TO_ADDR
// sExchange := false ;
9071: LD_ADDR_EXP 71
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// sFac := false ;
9079: LD_ADDR_EXP 72
9083: PUSH
9084: LD_INT 0
9086: ST_TO_ADDR
// sPower := false ;
9087: LD_ADDR_EXP 73
9091: PUSH
9092: LD_INT 0
9094: ST_TO_ADDR
// sRandom := false ;
9095: LD_ADDR_EXP 74
9099: PUSH
9100: LD_INT 0
9102: ST_TO_ADDR
// sShield := false ;
9103: LD_ADDR_EXP 75
9107: PUSH
9108: LD_INT 0
9110: ST_TO_ADDR
// sTime := false ;
9111: LD_ADDR_EXP 76
9115: PUSH
9116: LD_INT 0
9118: ST_TO_ADDR
// sTools := false ;
9119: LD_ADDR_EXP 77
9123: PUSH
9124: LD_INT 0
9126: ST_TO_ADDR
// sSold := false ;
9127: LD_ADDR_EXP 42
9131: PUSH
9132: LD_INT 0
9134: ST_TO_ADDR
// sDiff := false ;
9135: LD_ADDR_EXP 43
9139: PUSH
9140: LD_INT 0
9142: ST_TO_ADDR
// sFog := false ;
9143: LD_ADDR_EXP 46
9147: PUSH
9148: LD_INT 0
9150: ST_TO_ADDR
// sReset := false ;
9151: LD_ADDR_EXP 47
9155: PUSH
9156: LD_INT 0
9158: ST_TO_ADDR
// sSun := false ;
9159: LD_ADDR_EXP 48
9163: PUSH
9164: LD_INT 0
9166: ST_TO_ADDR
// sTiger := false ;
9167: LD_ADDR_EXP 44
9171: PUSH
9172: LD_INT 0
9174: ST_TO_ADDR
// sBomb := false ;
9175: LD_ADDR_EXP 45
9179: PUSH
9180: LD_INT 0
9182: ST_TO_ADDR
// sWound := false ;
9183: LD_ADDR_EXP 53
9187: PUSH
9188: LD_INT 0
9190: ST_TO_ADDR
// sBetray := false ;
9191: LD_ADDR_EXP 57
9195: PUSH
9196: LD_INT 0
9198: ST_TO_ADDR
// sContamin := false ;
9199: LD_ADDR_EXP 58
9203: PUSH
9204: LD_INT 0
9206: ST_TO_ADDR
// sOil := false ;
9207: LD_ADDR_EXP 60
9211: PUSH
9212: LD_INT 0
9214: ST_TO_ADDR
// sStu := false ;
9215: LD_ADDR_EXP 64
9219: PUSH
9220: LD_INT 0
9222: ST_TO_ADDR
// sBazooka := false ;
9223: LD_ADDR_EXP 67
9227: PUSH
9228: LD_INT 0
9230: ST_TO_ADDR
// sMortar := false ;
9231: LD_ADDR_EXP 68
9235: PUSH
9236: LD_INT 0
9238: ST_TO_ADDR
// sRanger := false ;
9239: LD_ADDR_EXP 78
9243: PUSH
9244: LD_INT 0
9246: ST_TO_ADDR
// sComputer := false ;
9247: LD_ADDR_EXP 79
9251: PUSH
9252: LD_INT 0
9254: ST_TO_ADDR
// s30 := false ;
9255: LD_ADDR_EXP 80
9259: PUSH
9260: LD_INT 0
9262: ST_TO_ADDR
// s60 := false ;
9263: LD_ADDR_EXP 81
9267: PUSH
9268: LD_INT 0
9270: ST_TO_ADDR
// end ;
9271: LD_VAR 0 1
9275: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9276: LD_INT 0
9278: PPUSH
9279: PPUSH
9280: PPUSH
9281: PPUSH
9282: PPUSH
9283: PPUSH
9284: PPUSH
// result := [ ] ;
9285: LD_ADDR_VAR 0 2
9289: PUSH
9290: EMPTY
9291: ST_TO_ADDR
// if campaign_id = 1 then
9292: LD_OWVAR 69
9296: PUSH
9297: LD_INT 1
9299: EQUAL
9300: IFFALSE 12466
// begin case mission_number of 1 :
9302: LD_OWVAR 70
9306: PUSH
9307: LD_INT 1
9309: DOUBLE
9310: EQUAL
9311: IFTRUE 9315
9313: GO 9391
9315: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9316: LD_ADDR_VAR 0 2
9320: PUSH
9321: LD_INT 2
9323: PUSH
9324: LD_INT 4
9326: PUSH
9327: LD_INT 11
9329: PUSH
9330: LD_INT 12
9332: PUSH
9333: LD_INT 15
9335: PUSH
9336: LD_INT 16
9338: PUSH
9339: LD_INT 22
9341: PUSH
9342: LD_INT 23
9344: PUSH
9345: LD_INT 26
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: PUSH
9359: LD_INT 101
9361: PUSH
9362: LD_INT 102
9364: PUSH
9365: LD_INT 106
9367: PUSH
9368: LD_INT 116
9370: PUSH
9371: LD_INT 117
9373: PUSH
9374: LD_INT 118
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: ST_TO_ADDR
9389: GO 12464
9391: LD_INT 2
9393: DOUBLE
9394: EQUAL
9395: IFTRUE 9399
9397: GO 9483
9399: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9400: LD_ADDR_VAR 0 2
9404: PUSH
9405: LD_INT 2
9407: PUSH
9408: LD_INT 4
9410: PUSH
9411: LD_INT 11
9413: PUSH
9414: LD_INT 12
9416: PUSH
9417: LD_INT 15
9419: PUSH
9420: LD_INT 16
9422: PUSH
9423: LD_INT 22
9425: PUSH
9426: LD_INT 23
9428: PUSH
9429: LD_INT 26
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 101
9445: PUSH
9446: LD_INT 102
9448: PUSH
9449: LD_INT 105
9451: PUSH
9452: LD_INT 106
9454: PUSH
9455: LD_INT 108
9457: PUSH
9458: LD_INT 116
9460: PUSH
9461: LD_INT 117
9463: PUSH
9464: LD_INT 118
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: ST_TO_ADDR
9481: GO 12464
9483: LD_INT 3
9485: DOUBLE
9486: EQUAL
9487: IFTRUE 9491
9489: GO 9579
9491: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9492: LD_ADDR_VAR 0 2
9496: PUSH
9497: LD_INT 2
9499: PUSH
9500: LD_INT 4
9502: PUSH
9503: LD_INT 5
9505: PUSH
9506: LD_INT 11
9508: PUSH
9509: LD_INT 12
9511: PUSH
9512: LD_INT 15
9514: PUSH
9515: LD_INT 16
9517: PUSH
9518: LD_INT 22
9520: PUSH
9521: LD_INT 26
9523: PUSH
9524: LD_INT 36
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: PUSH
9539: LD_INT 101
9541: PUSH
9542: LD_INT 102
9544: PUSH
9545: LD_INT 105
9547: PUSH
9548: LD_INT 106
9550: PUSH
9551: LD_INT 108
9553: PUSH
9554: LD_INT 116
9556: PUSH
9557: LD_INT 117
9559: PUSH
9560: LD_INT 118
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: ST_TO_ADDR
9577: GO 12464
9579: LD_INT 4
9581: DOUBLE
9582: EQUAL
9583: IFTRUE 9587
9585: GO 9683
9587: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9588: LD_ADDR_VAR 0 2
9592: PUSH
9593: LD_INT 2
9595: PUSH
9596: LD_INT 4
9598: PUSH
9599: LD_INT 5
9601: PUSH
9602: LD_INT 8
9604: PUSH
9605: LD_INT 11
9607: PUSH
9608: LD_INT 12
9610: PUSH
9611: LD_INT 15
9613: PUSH
9614: LD_INT 16
9616: PUSH
9617: LD_INT 22
9619: PUSH
9620: LD_INT 23
9622: PUSH
9623: LD_INT 26
9625: PUSH
9626: LD_INT 36
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 101
9645: PUSH
9646: LD_INT 102
9648: PUSH
9649: LD_INT 105
9651: PUSH
9652: LD_INT 106
9654: PUSH
9655: LD_INT 108
9657: PUSH
9658: LD_INT 116
9660: PUSH
9661: LD_INT 117
9663: PUSH
9664: LD_INT 118
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: ST_TO_ADDR
9681: GO 12464
9683: LD_INT 5
9685: DOUBLE
9686: EQUAL
9687: IFTRUE 9691
9689: GO 9803
9691: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9692: LD_ADDR_VAR 0 2
9696: PUSH
9697: LD_INT 2
9699: PUSH
9700: LD_INT 4
9702: PUSH
9703: LD_INT 5
9705: PUSH
9706: LD_INT 6
9708: PUSH
9709: LD_INT 8
9711: PUSH
9712: LD_INT 11
9714: PUSH
9715: LD_INT 12
9717: PUSH
9718: LD_INT 15
9720: PUSH
9721: LD_INT 16
9723: PUSH
9724: LD_INT 22
9726: PUSH
9727: LD_INT 23
9729: PUSH
9730: LD_INT 25
9732: PUSH
9733: LD_INT 26
9735: PUSH
9736: LD_INT 36
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: PUSH
9755: LD_INT 101
9757: PUSH
9758: LD_INT 102
9760: PUSH
9761: LD_INT 105
9763: PUSH
9764: LD_INT 106
9766: PUSH
9767: LD_INT 108
9769: PUSH
9770: LD_INT 109
9772: PUSH
9773: LD_INT 112
9775: PUSH
9776: LD_INT 116
9778: PUSH
9779: LD_INT 117
9781: PUSH
9782: LD_INT 118
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: ST_TO_ADDR
9801: GO 12464
9803: LD_INT 6
9805: DOUBLE
9806: EQUAL
9807: IFTRUE 9811
9809: GO 9943
9811: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9812: LD_ADDR_VAR 0 2
9816: PUSH
9817: LD_INT 2
9819: PUSH
9820: LD_INT 4
9822: PUSH
9823: LD_INT 5
9825: PUSH
9826: LD_INT 6
9828: PUSH
9829: LD_INT 8
9831: PUSH
9832: LD_INT 11
9834: PUSH
9835: LD_INT 12
9837: PUSH
9838: LD_INT 15
9840: PUSH
9841: LD_INT 16
9843: PUSH
9844: LD_INT 20
9846: PUSH
9847: LD_INT 21
9849: PUSH
9850: LD_INT 22
9852: PUSH
9853: LD_INT 23
9855: PUSH
9856: LD_INT 25
9858: PUSH
9859: LD_INT 26
9861: PUSH
9862: LD_INT 30
9864: PUSH
9865: LD_INT 31
9867: PUSH
9868: LD_INT 32
9870: PUSH
9871: LD_INT 36
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 101
9897: PUSH
9898: LD_INT 102
9900: PUSH
9901: LD_INT 105
9903: PUSH
9904: LD_INT 106
9906: PUSH
9907: LD_INT 108
9909: PUSH
9910: LD_INT 109
9912: PUSH
9913: LD_INT 112
9915: PUSH
9916: LD_INT 116
9918: PUSH
9919: LD_INT 117
9921: PUSH
9922: LD_INT 118
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: ST_TO_ADDR
9941: GO 12464
9943: LD_INT 7
9945: DOUBLE
9946: EQUAL
9947: IFTRUE 9951
9949: GO 10063
9951: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9952: LD_ADDR_VAR 0 2
9956: PUSH
9957: LD_INT 2
9959: PUSH
9960: LD_INT 4
9962: PUSH
9963: LD_INT 5
9965: PUSH
9966: LD_INT 7
9968: PUSH
9969: LD_INT 11
9971: PUSH
9972: LD_INT 12
9974: PUSH
9975: LD_INT 15
9977: PUSH
9978: LD_INT 16
9980: PUSH
9981: LD_INT 20
9983: PUSH
9984: LD_INT 21
9986: PUSH
9987: LD_INT 22
9989: PUSH
9990: LD_INT 23
9992: PUSH
9993: LD_INT 25
9995: PUSH
9996: LD_INT 26
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 101
10017: PUSH
10018: LD_INT 102
10020: PUSH
10021: LD_INT 103
10023: PUSH
10024: LD_INT 105
10026: PUSH
10027: LD_INT 106
10029: PUSH
10030: LD_INT 108
10032: PUSH
10033: LD_INT 112
10035: PUSH
10036: LD_INT 116
10038: PUSH
10039: LD_INT 117
10041: PUSH
10042: LD_INT 118
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: ST_TO_ADDR
10061: GO 12464
10063: LD_INT 8
10065: DOUBLE
10066: EQUAL
10067: IFTRUE 10071
10069: GO 10211
10071: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10072: LD_ADDR_VAR 0 2
10076: PUSH
10077: LD_INT 2
10079: PUSH
10080: LD_INT 4
10082: PUSH
10083: LD_INT 5
10085: PUSH
10086: LD_INT 6
10088: PUSH
10089: LD_INT 7
10091: PUSH
10092: LD_INT 8
10094: PUSH
10095: LD_INT 11
10097: PUSH
10098: LD_INT 12
10100: PUSH
10101: LD_INT 15
10103: PUSH
10104: LD_INT 16
10106: PUSH
10107: LD_INT 20
10109: PUSH
10110: LD_INT 21
10112: PUSH
10113: LD_INT 22
10115: PUSH
10116: LD_INT 23
10118: PUSH
10119: LD_INT 25
10121: PUSH
10122: LD_INT 26
10124: PUSH
10125: LD_INT 30
10127: PUSH
10128: LD_INT 31
10130: PUSH
10131: LD_INT 32
10133: PUSH
10134: LD_INT 36
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 101
10161: PUSH
10162: LD_INT 102
10164: PUSH
10165: LD_INT 103
10167: PUSH
10168: LD_INT 105
10170: PUSH
10171: LD_INT 106
10173: PUSH
10174: LD_INT 108
10176: PUSH
10177: LD_INT 109
10179: PUSH
10180: LD_INT 112
10182: PUSH
10183: LD_INT 116
10185: PUSH
10186: LD_INT 117
10188: PUSH
10189: LD_INT 118
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: ST_TO_ADDR
10209: GO 12464
10211: LD_INT 9
10213: DOUBLE
10214: EQUAL
10215: IFTRUE 10219
10217: GO 10367
10219: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10220: LD_ADDR_VAR 0 2
10224: PUSH
10225: LD_INT 2
10227: PUSH
10228: LD_INT 4
10230: PUSH
10231: LD_INT 5
10233: PUSH
10234: LD_INT 6
10236: PUSH
10237: LD_INT 7
10239: PUSH
10240: LD_INT 8
10242: PUSH
10243: LD_INT 11
10245: PUSH
10246: LD_INT 12
10248: PUSH
10249: LD_INT 15
10251: PUSH
10252: LD_INT 16
10254: PUSH
10255: LD_INT 20
10257: PUSH
10258: LD_INT 21
10260: PUSH
10261: LD_INT 22
10263: PUSH
10264: LD_INT 23
10266: PUSH
10267: LD_INT 25
10269: PUSH
10270: LD_INT 26
10272: PUSH
10273: LD_INT 28
10275: PUSH
10276: LD_INT 30
10278: PUSH
10279: LD_INT 31
10281: PUSH
10282: LD_INT 32
10284: PUSH
10285: LD_INT 36
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 101
10313: PUSH
10314: LD_INT 102
10316: PUSH
10317: LD_INT 103
10319: PUSH
10320: LD_INT 105
10322: PUSH
10323: LD_INT 106
10325: PUSH
10326: LD_INT 108
10328: PUSH
10329: LD_INT 109
10331: PUSH
10332: LD_INT 112
10334: PUSH
10335: LD_INT 114
10337: PUSH
10338: LD_INT 116
10340: PUSH
10341: LD_INT 117
10343: PUSH
10344: LD_INT 118
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: ST_TO_ADDR
10365: GO 12464
10367: LD_INT 10
10369: DOUBLE
10370: EQUAL
10371: IFTRUE 10375
10373: GO 10571
10375: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10376: LD_ADDR_VAR 0 2
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: LD_INT 4
10386: PUSH
10387: LD_INT 5
10389: PUSH
10390: LD_INT 6
10392: PUSH
10393: LD_INT 7
10395: PUSH
10396: LD_INT 8
10398: PUSH
10399: LD_INT 9
10401: PUSH
10402: LD_INT 10
10404: PUSH
10405: LD_INT 11
10407: PUSH
10408: LD_INT 12
10410: PUSH
10411: LD_INT 13
10413: PUSH
10414: LD_INT 14
10416: PUSH
10417: LD_INT 15
10419: PUSH
10420: LD_INT 16
10422: PUSH
10423: LD_INT 17
10425: PUSH
10426: LD_INT 18
10428: PUSH
10429: LD_INT 19
10431: PUSH
10432: LD_INT 20
10434: PUSH
10435: LD_INT 21
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_INT 23
10443: PUSH
10444: LD_INT 24
10446: PUSH
10447: LD_INT 25
10449: PUSH
10450: LD_INT 26
10452: PUSH
10453: LD_INT 28
10455: PUSH
10456: LD_INT 30
10458: PUSH
10459: LD_INT 31
10461: PUSH
10462: LD_INT 32
10464: PUSH
10465: LD_INT 36
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 101
10501: PUSH
10502: LD_INT 102
10504: PUSH
10505: LD_INT 103
10507: PUSH
10508: LD_INT 104
10510: PUSH
10511: LD_INT 105
10513: PUSH
10514: LD_INT 106
10516: PUSH
10517: LD_INT 107
10519: PUSH
10520: LD_INT 108
10522: PUSH
10523: LD_INT 109
10525: PUSH
10526: LD_INT 110
10528: PUSH
10529: LD_INT 111
10531: PUSH
10532: LD_INT 112
10534: PUSH
10535: LD_INT 114
10537: PUSH
10538: LD_INT 116
10540: PUSH
10541: LD_INT 117
10543: PUSH
10544: LD_INT 118
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: ST_TO_ADDR
10569: GO 12464
10571: LD_INT 11
10573: DOUBLE
10574: EQUAL
10575: IFTRUE 10579
10577: GO 10783
10579: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10580: LD_ADDR_VAR 0 2
10584: PUSH
10585: LD_INT 2
10587: PUSH
10588: LD_INT 3
10590: PUSH
10591: LD_INT 4
10593: PUSH
10594: LD_INT 5
10596: PUSH
10597: LD_INT 6
10599: PUSH
10600: LD_INT 7
10602: PUSH
10603: LD_INT 8
10605: PUSH
10606: LD_INT 9
10608: PUSH
10609: LD_INT 10
10611: PUSH
10612: LD_INT 11
10614: PUSH
10615: LD_INT 12
10617: PUSH
10618: LD_INT 13
10620: PUSH
10621: LD_INT 14
10623: PUSH
10624: LD_INT 15
10626: PUSH
10627: LD_INT 16
10629: PUSH
10630: LD_INT 17
10632: PUSH
10633: LD_INT 18
10635: PUSH
10636: LD_INT 19
10638: PUSH
10639: LD_INT 20
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 22
10647: PUSH
10648: LD_INT 23
10650: PUSH
10651: LD_INT 24
10653: PUSH
10654: LD_INT 25
10656: PUSH
10657: LD_INT 26
10659: PUSH
10660: LD_INT 28
10662: PUSH
10663: LD_INT 30
10665: PUSH
10666: LD_INT 31
10668: PUSH
10669: LD_INT 32
10671: PUSH
10672: LD_INT 34
10674: PUSH
10675: LD_INT 36
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 101
10713: PUSH
10714: LD_INT 102
10716: PUSH
10717: LD_INT 103
10719: PUSH
10720: LD_INT 104
10722: PUSH
10723: LD_INT 105
10725: PUSH
10726: LD_INT 106
10728: PUSH
10729: LD_INT 107
10731: PUSH
10732: LD_INT 108
10734: PUSH
10735: LD_INT 109
10737: PUSH
10738: LD_INT 110
10740: PUSH
10741: LD_INT 111
10743: PUSH
10744: LD_INT 112
10746: PUSH
10747: LD_INT 114
10749: PUSH
10750: LD_INT 116
10752: PUSH
10753: LD_INT 117
10755: PUSH
10756: LD_INT 118
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: ST_TO_ADDR
10781: GO 12464
10783: LD_INT 12
10785: DOUBLE
10786: EQUAL
10787: IFTRUE 10791
10789: GO 11011
10791: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10792: LD_ADDR_VAR 0 2
10796: PUSH
10797: LD_INT 1
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: LD_INT 3
10805: PUSH
10806: LD_INT 4
10808: PUSH
10809: LD_INT 5
10811: PUSH
10812: LD_INT 6
10814: PUSH
10815: LD_INT 7
10817: PUSH
10818: LD_INT 8
10820: PUSH
10821: LD_INT 9
10823: PUSH
10824: LD_INT 10
10826: PUSH
10827: LD_INT 11
10829: PUSH
10830: LD_INT 12
10832: PUSH
10833: LD_INT 13
10835: PUSH
10836: LD_INT 14
10838: PUSH
10839: LD_INT 15
10841: PUSH
10842: LD_INT 16
10844: PUSH
10845: LD_INT 17
10847: PUSH
10848: LD_INT 18
10850: PUSH
10851: LD_INT 19
10853: PUSH
10854: LD_INT 20
10856: PUSH
10857: LD_INT 21
10859: PUSH
10860: LD_INT 22
10862: PUSH
10863: LD_INT 23
10865: PUSH
10866: LD_INT 24
10868: PUSH
10869: LD_INT 25
10871: PUSH
10872: LD_INT 26
10874: PUSH
10875: LD_INT 27
10877: PUSH
10878: LD_INT 28
10880: PUSH
10881: LD_INT 30
10883: PUSH
10884: LD_INT 31
10886: PUSH
10887: LD_INT 32
10889: PUSH
10890: LD_INT 33
10892: PUSH
10893: LD_INT 34
10895: PUSH
10896: LD_INT 36
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 101
10937: PUSH
10938: LD_INT 102
10940: PUSH
10941: LD_INT 103
10943: PUSH
10944: LD_INT 104
10946: PUSH
10947: LD_INT 105
10949: PUSH
10950: LD_INT 106
10952: PUSH
10953: LD_INT 107
10955: PUSH
10956: LD_INT 108
10958: PUSH
10959: LD_INT 109
10961: PUSH
10962: LD_INT 110
10964: PUSH
10965: LD_INT 111
10967: PUSH
10968: LD_INT 112
10970: PUSH
10971: LD_INT 113
10973: PUSH
10974: LD_INT 114
10976: PUSH
10977: LD_INT 116
10979: PUSH
10980: LD_INT 117
10982: PUSH
10983: LD_INT 118
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: ST_TO_ADDR
11009: GO 12464
11011: LD_INT 13
11013: DOUBLE
11014: EQUAL
11015: IFTRUE 11019
11017: GO 11227
11019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11020: LD_ADDR_VAR 0 2
11024: PUSH
11025: LD_INT 1
11027: PUSH
11028: LD_INT 2
11030: PUSH
11031: LD_INT 3
11033: PUSH
11034: LD_INT 4
11036: PUSH
11037: LD_INT 5
11039: PUSH
11040: LD_INT 8
11042: PUSH
11043: LD_INT 9
11045: PUSH
11046: LD_INT 10
11048: PUSH
11049: LD_INT 11
11051: PUSH
11052: LD_INT 12
11054: PUSH
11055: LD_INT 14
11057: PUSH
11058: LD_INT 15
11060: PUSH
11061: LD_INT 16
11063: PUSH
11064: LD_INT 17
11066: PUSH
11067: LD_INT 18
11069: PUSH
11070: LD_INT 19
11072: PUSH
11073: LD_INT 20
11075: PUSH
11076: LD_INT 21
11078: PUSH
11079: LD_INT 22
11081: PUSH
11082: LD_INT 23
11084: PUSH
11085: LD_INT 24
11087: PUSH
11088: LD_INT 25
11090: PUSH
11091: LD_INT 26
11093: PUSH
11094: LD_INT 27
11096: PUSH
11097: LD_INT 28
11099: PUSH
11100: LD_INT 30
11102: PUSH
11103: LD_INT 31
11105: PUSH
11106: LD_INT 32
11108: PUSH
11109: LD_INT 33
11111: PUSH
11112: LD_INT 34
11114: PUSH
11115: LD_INT 36
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 101
11153: PUSH
11154: LD_INT 102
11156: PUSH
11157: LD_INT 103
11159: PUSH
11160: LD_INT 104
11162: PUSH
11163: LD_INT 105
11165: PUSH
11166: LD_INT 106
11168: PUSH
11169: LD_INT 107
11171: PUSH
11172: LD_INT 108
11174: PUSH
11175: LD_INT 109
11177: PUSH
11178: LD_INT 110
11180: PUSH
11181: LD_INT 111
11183: PUSH
11184: LD_INT 112
11186: PUSH
11187: LD_INT 113
11189: PUSH
11190: LD_INT 114
11192: PUSH
11193: LD_INT 116
11195: PUSH
11196: LD_INT 117
11198: PUSH
11199: LD_INT 118
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: ST_TO_ADDR
11225: GO 12464
11227: LD_INT 14
11229: DOUBLE
11230: EQUAL
11231: IFTRUE 11235
11233: GO 11459
11235: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11236: LD_ADDR_VAR 0 2
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: LD_INT 2
11246: PUSH
11247: LD_INT 3
11249: PUSH
11250: LD_INT 4
11252: PUSH
11253: LD_INT 5
11255: PUSH
11256: LD_INT 6
11258: PUSH
11259: LD_INT 7
11261: PUSH
11262: LD_INT 8
11264: PUSH
11265: LD_INT 9
11267: PUSH
11268: LD_INT 10
11270: PUSH
11271: LD_INT 11
11273: PUSH
11274: LD_INT 12
11276: PUSH
11277: LD_INT 13
11279: PUSH
11280: LD_INT 14
11282: PUSH
11283: LD_INT 15
11285: PUSH
11286: LD_INT 16
11288: PUSH
11289: LD_INT 17
11291: PUSH
11292: LD_INT 18
11294: PUSH
11295: LD_INT 19
11297: PUSH
11298: LD_INT 20
11300: PUSH
11301: LD_INT 21
11303: PUSH
11304: LD_INT 22
11306: PUSH
11307: LD_INT 23
11309: PUSH
11310: LD_INT 24
11312: PUSH
11313: LD_INT 25
11315: PUSH
11316: LD_INT 26
11318: PUSH
11319: LD_INT 27
11321: PUSH
11322: LD_INT 28
11324: PUSH
11325: LD_INT 29
11327: PUSH
11328: LD_INT 30
11330: PUSH
11331: LD_INT 31
11333: PUSH
11334: LD_INT 32
11336: PUSH
11337: LD_INT 33
11339: PUSH
11340: LD_INT 34
11342: PUSH
11343: LD_INT 36
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 101
11385: PUSH
11386: LD_INT 102
11388: PUSH
11389: LD_INT 103
11391: PUSH
11392: LD_INT 104
11394: PUSH
11395: LD_INT 105
11397: PUSH
11398: LD_INT 106
11400: PUSH
11401: LD_INT 107
11403: PUSH
11404: LD_INT 108
11406: PUSH
11407: LD_INT 109
11409: PUSH
11410: LD_INT 110
11412: PUSH
11413: LD_INT 111
11415: PUSH
11416: LD_INT 112
11418: PUSH
11419: LD_INT 113
11421: PUSH
11422: LD_INT 114
11424: PUSH
11425: LD_INT 116
11427: PUSH
11428: LD_INT 117
11430: PUSH
11431: LD_INT 118
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: ST_TO_ADDR
11457: GO 12464
11459: LD_INT 15
11461: DOUBLE
11462: EQUAL
11463: IFTRUE 11467
11465: GO 11691
11467: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11468: LD_ADDR_VAR 0 2
11472: PUSH
11473: LD_INT 1
11475: PUSH
11476: LD_INT 2
11478: PUSH
11479: LD_INT 3
11481: PUSH
11482: LD_INT 4
11484: PUSH
11485: LD_INT 5
11487: PUSH
11488: LD_INT 6
11490: PUSH
11491: LD_INT 7
11493: PUSH
11494: LD_INT 8
11496: PUSH
11497: LD_INT 9
11499: PUSH
11500: LD_INT 10
11502: PUSH
11503: LD_INT 11
11505: PUSH
11506: LD_INT 12
11508: PUSH
11509: LD_INT 13
11511: PUSH
11512: LD_INT 14
11514: PUSH
11515: LD_INT 15
11517: PUSH
11518: LD_INT 16
11520: PUSH
11521: LD_INT 17
11523: PUSH
11524: LD_INT 18
11526: PUSH
11527: LD_INT 19
11529: PUSH
11530: LD_INT 20
11532: PUSH
11533: LD_INT 21
11535: PUSH
11536: LD_INT 22
11538: PUSH
11539: LD_INT 23
11541: PUSH
11542: LD_INT 24
11544: PUSH
11545: LD_INT 25
11547: PUSH
11548: LD_INT 26
11550: PUSH
11551: LD_INT 27
11553: PUSH
11554: LD_INT 28
11556: PUSH
11557: LD_INT 29
11559: PUSH
11560: LD_INT 30
11562: PUSH
11563: LD_INT 31
11565: PUSH
11566: LD_INT 32
11568: PUSH
11569: LD_INT 33
11571: PUSH
11572: LD_INT 34
11574: PUSH
11575: LD_INT 36
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 101
11617: PUSH
11618: LD_INT 102
11620: PUSH
11621: LD_INT 103
11623: PUSH
11624: LD_INT 104
11626: PUSH
11627: LD_INT 105
11629: PUSH
11630: LD_INT 106
11632: PUSH
11633: LD_INT 107
11635: PUSH
11636: LD_INT 108
11638: PUSH
11639: LD_INT 109
11641: PUSH
11642: LD_INT 110
11644: PUSH
11645: LD_INT 111
11647: PUSH
11648: LD_INT 112
11650: PUSH
11651: LD_INT 113
11653: PUSH
11654: LD_INT 114
11656: PUSH
11657: LD_INT 116
11659: PUSH
11660: LD_INT 117
11662: PUSH
11663: LD_INT 118
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: ST_TO_ADDR
11689: GO 12464
11691: LD_INT 16
11693: DOUBLE
11694: EQUAL
11695: IFTRUE 11699
11697: GO 11835
11699: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11700: LD_ADDR_VAR 0 2
11704: PUSH
11705: LD_INT 2
11707: PUSH
11708: LD_INT 4
11710: PUSH
11711: LD_INT 5
11713: PUSH
11714: LD_INT 7
11716: PUSH
11717: LD_INT 11
11719: PUSH
11720: LD_INT 12
11722: PUSH
11723: LD_INT 15
11725: PUSH
11726: LD_INT 16
11728: PUSH
11729: LD_INT 20
11731: PUSH
11732: LD_INT 21
11734: PUSH
11735: LD_INT 22
11737: PUSH
11738: LD_INT 23
11740: PUSH
11741: LD_INT 25
11743: PUSH
11744: LD_INT 26
11746: PUSH
11747: LD_INT 30
11749: PUSH
11750: LD_INT 31
11752: PUSH
11753: LD_INT 32
11755: PUSH
11756: LD_INT 33
11758: PUSH
11759: LD_INT 34
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 101
11785: PUSH
11786: LD_INT 102
11788: PUSH
11789: LD_INT 103
11791: PUSH
11792: LD_INT 106
11794: PUSH
11795: LD_INT 108
11797: PUSH
11798: LD_INT 112
11800: PUSH
11801: LD_INT 113
11803: PUSH
11804: LD_INT 114
11806: PUSH
11807: LD_INT 116
11809: PUSH
11810: LD_INT 117
11812: PUSH
11813: LD_INT 118
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: ST_TO_ADDR
11833: GO 12464
11835: LD_INT 17
11837: DOUBLE
11838: EQUAL
11839: IFTRUE 11843
11841: GO 12067
11843: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11844: LD_ADDR_VAR 0 2
11848: PUSH
11849: LD_INT 1
11851: PUSH
11852: LD_INT 2
11854: PUSH
11855: LD_INT 3
11857: PUSH
11858: LD_INT 4
11860: PUSH
11861: LD_INT 5
11863: PUSH
11864: LD_INT 6
11866: PUSH
11867: LD_INT 7
11869: PUSH
11870: LD_INT 8
11872: PUSH
11873: LD_INT 9
11875: PUSH
11876: LD_INT 10
11878: PUSH
11879: LD_INT 11
11881: PUSH
11882: LD_INT 12
11884: PUSH
11885: LD_INT 13
11887: PUSH
11888: LD_INT 14
11890: PUSH
11891: LD_INT 15
11893: PUSH
11894: LD_INT 16
11896: PUSH
11897: LD_INT 17
11899: PUSH
11900: LD_INT 18
11902: PUSH
11903: LD_INT 19
11905: PUSH
11906: LD_INT 20
11908: PUSH
11909: LD_INT 21
11911: PUSH
11912: LD_INT 22
11914: PUSH
11915: LD_INT 23
11917: PUSH
11918: LD_INT 24
11920: PUSH
11921: LD_INT 25
11923: PUSH
11924: LD_INT 26
11926: PUSH
11927: LD_INT 27
11929: PUSH
11930: LD_INT 28
11932: PUSH
11933: LD_INT 29
11935: PUSH
11936: LD_INT 30
11938: PUSH
11939: LD_INT 31
11941: PUSH
11942: LD_INT 32
11944: PUSH
11945: LD_INT 33
11947: PUSH
11948: LD_INT 34
11950: PUSH
11951: LD_INT 36
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 101
11993: PUSH
11994: LD_INT 102
11996: PUSH
11997: LD_INT 103
11999: PUSH
12000: LD_INT 104
12002: PUSH
12003: LD_INT 105
12005: PUSH
12006: LD_INT 106
12008: PUSH
12009: LD_INT 107
12011: PUSH
12012: LD_INT 108
12014: PUSH
12015: LD_INT 109
12017: PUSH
12018: LD_INT 110
12020: PUSH
12021: LD_INT 111
12023: PUSH
12024: LD_INT 112
12026: PUSH
12027: LD_INT 113
12029: PUSH
12030: LD_INT 114
12032: PUSH
12033: LD_INT 116
12035: PUSH
12036: LD_INT 117
12038: PUSH
12039: LD_INT 118
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: ST_TO_ADDR
12065: GO 12464
12067: LD_INT 18
12069: DOUBLE
12070: EQUAL
12071: IFTRUE 12075
12073: GO 12223
12075: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12076: LD_ADDR_VAR 0 2
12080: PUSH
12081: LD_INT 2
12083: PUSH
12084: LD_INT 4
12086: PUSH
12087: LD_INT 5
12089: PUSH
12090: LD_INT 7
12092: PUSH
12093: LD_INT 11
12095: PUSH
12096: LD_INT 12
12098: PUSH
12099: LD_INT 15
12101: PUSH
12102: LD_INT 16
12104: PUSH
12105: LD_INT 20
12107: PUSH
12108: LD_INT 21
12110: PUSH
12111: LD_INT 22
12113: PUSH
12114: LD_INT 23
12116: PUSH
12117: LD_INT 25
12119: PUSH
12120: LD_INT 26
12122: PUSH
12123: LD_INT 30
12125: PUSH
12126: LD_INT 31
12128: PUSH
12129: LD_INT 32
12131: PUSH
12132: LD_INT 33
12134: PUSH
12135: LD_INT 34
12137: PUSH
12138: LD_INT 35
12140: PUSH
12141: LD_INT 36
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: PUSH
12167: LD_INT 101
12169: PUSH
12170: LD_INT 102
12172: PUSH
12173: LD_INT 103
12175: PUSH
12176: LD_INT 106
12178: PUSH
12179: LD_INT 108
12181: PUSH
12182: LD_INT 112
12184: PUSH
12185: LD_INT 113
12187: PUSH
12188: LD_INT 114
12190: PUSH
12191: LD_INT 115
12193: PUSH
12194: LD_INT 116
12196: PUSH
12197: LD_INT 117
12199: PUSH
12200: LD_INT 118
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: ST_TO_ADDR
12221: GO 12464
12223: LD_INT 19
12225: DOUBLE
12226: EQUAL
12227: IFTRUE 12231
12229: GO 12463
12231: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: LD_INT 1
12239: PUSH
12240: LD_INT 2
12242: PUSH
12243: LD_INT 3
12245: PUSH
12246: LD_INT 4
12248: PUSH
12249: LD_INT 5
12251: PUSH
12252: LD_INT 6
12254: PUSH
12255: LD_INT 7
12257: PUSH
12258: LD_INT 8
12260: PUSH
12261: LD_INT 9
12263: PUSH
12264: LD_INT 10
12266: PUSH
12267: LD_INT 11
12269: PUSH
12270: LD_INT 12
12272: PUSH
12273: LD_INT 13
12275: PUSH
12276: LD_INT 14
12278: PUSH
12279: LD_INT 15
12281: PUSH
12282: LD_INT 16
12284: PUSH
12285: LD_INT 17
12287: PUSH
12288: LD_INT 18
12290: PUSH
12291: LD_INT 19
12293: PUSH
12294: LD_INT 20
12296: PUSH
12297: LD_INT 21
12299: PUSH
12300: LD_INT 22
12302: PUSH
12303: LD_INT 23
12305: PUSH
12306: LD_INT 24
12308: PUSH
12309: LD_INT 25
12311: PUSH
12312: LD_INT 26
12314: PUSH
12315: LD_INT 27
12317: PUSH
12318: LD_INT 28
12320: PUSH
12321: LD_INT 29
12323: PUSH
12324: LD_INT 30
12326: PUSH
12327: LD_INT 31
12329: PUSH
12330: LD_INT 32
12332: PUSH
12333: LD_INT 33
12335: PUSH
12336: LD_INT 34
12338: PUSH
12339: LD_INT 35
12341: PUSH
12342: LD_INT 36
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 101
12385: PUSH
12386: LD_INT 102
12388: PUSH
12389: LD_INT 103
12391: PUSH
12392: LD_INT 104
12394: PUSH
12395: LD_INT 105
12397: PUSH
12398: LD_INT 106
12400: PUSH
12401: LD_INT 107
12403: PUSH
12404: LD_INT 108
12406: PUSH
12407: LD_INT 109
12409: PUSH
12410: LD_INT 110
12412: PUSH
12413: LD_INT 111
12415: PUSH
12416: LD_INT 112
12418: PUSH
12419: LD_INT 113
12421: PUSH
12422: LD_INT 114
12424: PUSH
12425: LD_INT 115
12427: PUSH
12428: LD_INT 116
12430: PUSH
12431: LD_INT 117
12433: PUSH
12434: LD_INT 118
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: ST_TO_ADDR
12461: GO 12464
12463: POP
// end else
12464: GO 12695
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12466: LD_ADDR_VAR 0 2
12470: PUSH
12471: LD_INT 1
12473: PUSH
12474: LD_INT 2
12476: PUSH
12477: LD_INT 3
12479: PUSH
12480: LD_INT 4
12482: PUSH
12483: LD_INT 5
12485: PUSH
12486: LD_INT 6
12488: PUSH
12489: LD_INT 7
12491: PUSH
12492: LD_INT 8
12494: PUSH
12495: LD_INT 9
12497: PUSH
12498: LD_INT 10
12500: PUSH
12501: LD_INT 11
12503: PUSH
12504: LD_INT 12
12506: PUSH
12507: LD_INT 13
12509: PUSH
12510: LD_INT 14
12512: PUSH
12513: LD_INT 15
12515: PUSH
12516: LD_INT 16
12518: PUSH
12519: LD_INT 17
12521: PUSH
12522: LD_INT 18
12524: PUSH
12525: LD_INT 19
12527: PUSH
12528: LD_INT 20
12530: PUSH
12531: LD_INT 21
12533: PUSH
12534: LD_INT 22
12536: PUSH
12537: LD_INT 23
12539: PUSH
12540: LD_INT 24
12542: PUSH
12543: LD_INT 25
12545: PUSH
12546: LD_INT 26
12548: PUSH
12549: LD_INT 27
12551: PUSH
12552: LD_INT 28
12554: PUSH
12555: LD_INT 29
12557: PUSH
12558: LD_INT 30
12560: PUSH
12561: LD_INT 31
12563: PUSH
12564: LD_INT 32
12566: PUSH
12567: LD_INT 33
12569: PUSH
12570: LD_INT 34
12572: PUSH
12573: LD_INT 35
12575: PUSH
12576: LD_INT 36
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: PUSH
12617: LD_INT 101
12619: PUSH
12620: LD_INT 102
12622: PUSH
12623: LD_INT 103
12625: PUSH
12626: LD_INT 104
12628: PUSH
12629: LD_INT 105
12631: PUSH
12632: LD_INT 106
12634: PUSH
12635: LD_INT 107
12637: PUSH
12638: LD_INT 108
12640: PUSH
12641: LD_INT 109
12643: PUSH
12644: LD_INT 110
12646: PUSH
12647: LD_INT 111
12649: PUSH
12650: LD_INT 112
12652: PUSH
12653: LD_INT 113
12655: PUSH
12656: LD_INT 114
12658: PUSH
12659: LD_INT 115
12661: PUSH
12662: LD_INT 116
12664: PUSH
12665: LD_INT 117
12667: PUSH
12668: LD_INT 118
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: ST_TO_ADDR
// if result then
12695: LD_VAR 0 2
12699: IFFALSE 13485
// begin normal :=  ;
12701: LD_ADDR_VAR 0 5
12705: PUSH
12706: LD_STRING 
12708: ST_TO_ADDR
// hardcore :=  ;
12709: LD_ADDR_VAR 0 6
12713: PUSH
12714: LD_STRING 
12716: ST_TO_ADDR
// active :=  ;
12717: LD_ADDR_VAR 0 7
12721: PUSH
12722: LD_STRING 
12724: ST_TO_ADDR
// for i = 1 to normalCounter do
12725: LD_ADDR_VAR 0 8
12729: PUSH
12730: DOUBLE
12731: LD_INT 1
12733: DEC
12734: ST_TO_ADDR
12735: LD_EXP 26
12739: PUSH
12740: FOR_TO
12741: IFFALSE 12842
// begin tmp := 0 ;
12743: LD_ADDR_VAR 0 3
12747: PUSH
12748: LD_STRING 0
12750: ST_TO_ADDR
// if result [ 1 ] then
12751: LD_VAR 0 2
12755: PUSH
12756: LD_INT 1
12758: ARRAY
12759: IFFALSE 12824
// if result [ 1 ] [ 1 ] = i then
12761: LD_VAR 0 2
12765: PUSH
12766: LD_INT 1
12768: ARRAY
12769: PUSH
12770: LD_INT 1
12772: ARRAY
12773: PUSH
12774: LD_VAR 0 8
12778: EQUAL
12779: IFFALSE 12824
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12781: LD_ADDR_VAR 0 2
12785: PUSH
12786: LD_VAR 0 2
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: LD_VAR 0 2
12798: PUSH
12799: LD_INT 1
12801: ARRAY
12802: PPUSH
12803: LD_INT 1
12805: PPUSH
12806: CALL_OW 3
12810: PPUSH
12811: CALL_OW 1
12815: ST_TO_ADDR
// tmp := 1 ;
12816: LD_ADDR_VAR 0 3
12820: PUSH
12821: LD_STRING 1
12823: ST_TO_ADDR
// end ; normal := normal & tmp ;
12824: LD_ADDR_VAR 0 5
12828: PUSH
12829: LD_VAR 0 5
12833: PUSH
12834: LD_VAR 0 3
12838: STR
12839: ST_TO_ADDR
// end ;
12840: GO 12740
12842: POP
12843: POP
// for i = 1 to hardcoreCounter do
12844: LD_ADDR_VAR 0 8
12848: PUSH
12849: DOUBLE
12850: LD_INT 1
12852: DEC
12853: ST_TO_ADDR
12854: LD_EXP 27
12858: PUSH
12859: FOR_TO
12860: IFFALSE 12965
// begin tmp := 0 ;
12862: LD_ADDR_VAR 0 3
12866: PUSH
12867: LD_STRING 0
12869: ST_TO_ADDR
// if result [ 2 ] then
12870: LD_VAR 0 2
12874: PUSH
12875: LD_INT 2
12877: ARRAY
12878: IFFALSE 12947
// if result [ 2 ] [ 1 ] = 100 + i then
12880: LD_VAR 0 2
12884: PUSH
12885: LD_INT 2
12887: ARRAY
12888: PUSH
12889: LD_INT 1
12891: ARRAY
12892: PUSH
12893: LD_INT 100
12895: PUSH
12896: LD_VAR 0 8
12900: PLUS
12901: EQUAL
12902: IFFALSE 12947
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12904: LD_ADDR_VAR 0 2
12908: PUSH
12909: LD_VAR 0 2
12913: PPUSH
12914: LD_INT 2
12916: PPUSH
12917: LD_VAR 0 2
12921: PUSH
12922: LD_INT 2
12924: ARRAY
12925: PPUSH
12926: LD_INT 1
12928: PPUSH
12929: CALL_OW 3
12933: PPUSH
12934: CALL_OW 1
12938: ST_TO_ADDR
// tmp := 1 ;
12939: LD_ADDR_VAR 0 3
12943: PUSH
12944: LD_STRING 1
12946: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12947: LD_ADDR_VAR 0 6
12951: PUSH
12952: LD_VAR 0 6
12956: PUSH
12957: LD_VAR 0 3
12961: STR
12962: ST_TO_ADDR
// end ;
12963: GO 12859
12965: POP
12966: POP
// if isGameLoad then
12967: LD_VAR 0 1
12971: IFFALSE 13446
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12973: LD_ADDR_VAR 0 4
12977: PUSH
12978: LD_EXP 30
12982: PUSH
12983: LD_EXP 29
12987: PUSH
12988: LD_EXP 31
12992: PUSH
12993: LD_EXP 28
12997: PUSH
12998: LD_EXP 32
13002: PUSH
13003: LD_EXP 33
13007: PUSH
13008: LD_EXP 34
13012: PUSH
13013: LD_EXP 35
13017: PUSH
13018: LD_EXP 36
13022: PUSH
13023: LD_EXP 37
13027: PUSH
13028: LD_EXP 38
13032: PUSH
13033: LD_EXP 39
13037: PUSH
13038: LD_EXP 40
13042: PUSH
13043: LD_EXP 41
13047: PUSH
13048: LD_EXP 49
13052: PUSH
13053: LD_EXP 50
13057: PUSH
13058: LD_EXP 51
13062: PUSH
13063: LD_EXP 52
13067: PUSH
13068: LD_EXP 54
13072: PUSH
13073: LD_EXP 55
13077: PUSH
13078: LD_EXP 56
13082: PUSH
13083: LD_EXP 59
13087: PUSH
13088: LD_EXP 61
13092: PUSH
13093: LD_EXP 62
13097: PUSH
13098: LD_EXP 63
13102: PUSH
13103: LD_EXP 65
13107: PUSH
13108: LD_EXP 66
13112: PUSH
13113: LD_EXP 69
13117: PUSH
13118: LD_EXP 70
13122: PUSH
13123: LD_EXP 71
13127: PUSH
13128: LD_EXP 72
13132: PUSH
13133: LD_EXP 73
13137: PUSH
13138: LD_EXP 74
13142: PUSH
13143: LD_EXP 75
13147: PUSH
13148: LD_EXP 76
13152: PUSH
13153: LD_EXP 77
13157: PUSH
13158: LD_EXP 42
13162: PUSH
13163: LD_EXP 43
13167: PUSH
13168: LD_EXP 46
13172: PUSH
13173: LD_EXP 47
13177: PUSH
13178: LD_EXP 48
13182: PUSH
13183: LD_EXP 44
13187: PUSH
13188: LD_EXP 45
13192: PUSH
13193: LD_EXP 53
13197: PUSH
13198: LD_EXP 57
13202: PUSH
13203: LD_EXP 58
13207: PUSH
13208: LD_EXP 60
13212: PUSH
13213: LD_EXP 64
13217: PUSH
13218: LD_EXP 67
13222: PUSH
13223: LD_EXP 68
13227: PUSH
13228: LD_EXP 78
13232: PUSH
13233: LD_EXP 79
13237: PUSH
13238: LD_EXP 80
13242: PUSH
13243: LD_EXP 81
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: ST_TO_ADDR
// tmp :=  ;
13304: LD_ADDR_VAR 0 3
13308: PUSH
13309: LD_STRING 
13311: ST_TO_ADDR
// for i = 1 to normalCounter do
13312: LD_ADDR_VAR 0 8
13316: PUSH
13317: DOUBLE
13318: LD_INT 1
13320: DEC
13321: ST_TO_ADDR
13322: LD_EXP 26
13326: PUSH
13327: FOR_TO
13328: IFFALSE 13364
// begin if flags [ i ] then
13330: LD_VAR 0 4
13334: PUSH
13335: LD_VAR 0 8
13339: ARRAY
13340: IFFALSE 13362
// tmp := tmp & i & ; ;
13342: LD_ADDR_VAR 0 3
13346: PUSH
13347: LD_VAR 0 3
13351: PUSH
13352: LD_VAR 0 8
13356: STR
13357: PUSH
13358: LD_STRING ;
13360: STR
13361: ST_TO_ADDR
// end ;
13362: GO 13327
13364: POP
13365: POP
// for i = 1 to hardcoreCounter do
13366: LD_ADDR_VAR 0 8
13370: PUSH
13371: DOUBLE
13372: LD_INT 1
13374: DEC
13375: ST_TO_ADDR
13376: LD_EXP 27
13380: PUSH
13381: FOR_TO
13382: IFFALSE 13428
// begin if flags [ normalCounter + i ] then
13384: LD_VAR 0 4
13388: PUSH
13389: LD_EXP 26
13393: PUSH
13394: LD_VAR 0 8
13398: PLUS
13399: ARRAY
13400: IFFALSE 13426
// tmp := tmp & ( 100 + i ) & ; ;
13402: LD_ADDR_VAR 0 3
13406: PUSH
13407: LD_VAR 0 3
13411: PUSH
13412: LD_INT 100
13414: PUSH
13415: LD_VAR 0 8
13419: PLUS
13420: STR
13421: PUSH
13422: LD_STRING ;
13424: STR
13425: ST_TO_ADDR
// end ;
13426: GO 13381
13428: POP
13429: POP
// if tmp then
13430: LD_VAR 0 3
13434: IFFALSE 13446
// active := tmp ;
13436: LD_ADDR_VAR 0 7
13440: PUSH
13441: LD_VAR 0 3
13445: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13446: LD_STRING getStreamItemsFromMission("
13448: PUSH
13449: LD_VAR 0 5
13453: STR
13454: PUSH
13455: LD_STRING ","
13457: STR
13458: PUSH
13459: LD_VAR 0 6
13463: STR
13464: PUSH
13465: LD_STRING ","
13467: STR
13468: PUSH
13469: LD_VAR 0 7
13473: STR
13474: PUSH
13475: LD_STRING ")
13477: STR
13478: PPUSH
13479: CALL_OW 559
// end else
13483: GO 13492
// ToLua ( getStreamItemsFromMission("","","") ) ;
13485: LD_STRING getStreamItemsFromMission("","","")
13487: PPUSH
13488: CALL_OW 559
// end ;
13492: LD_VAR 0 2
13496: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13497: LD_EXP 25
13501: PUSH
13502: LD_EXP 30
13506: AND
13507: IFFALSE 13631
13509: GO 13511
13511: DISABLE
13512: LD_INT 0
13514: PPUSH
13515: PPUSH
// begin enable ;
13516: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13517: LD_ADDR_VAR 0 2
13521: PUSH
13522: LD_INT 22
13524: PUSH
13525: LD_OWVAR 2
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 2
13536: PUSH
13537: LD_INT 34
13539: PUSH
13540: LD_INT 7
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 34
13549: PUSH
13550: LD_INT 45
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 34
13559: PUSH
13560: LD_INT 28
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 34
13569: PUSH
13570: LD_INT 47
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PPUSH
13588: CALL_OW 69
13592: ST_TO_ADDR
// if not tmp then
13593: LD_VAR 0 2
13597: NOT
13598: IFFALSE 13602
// exit ;
13600: GO 13631
// for i in tmp do
13602: LD_ADDR_VAR 0 1
13606: PUSH
13607: LD_VAR 0 2
13611: PUSH
13612: FOR_IN
13613: IFFALSE 13629
// begin SetLives ( i , 0 ) ;
13615: LD_VAR 0 1
13619: PPUSH
13620: LD_INT 0
13622: PPUSH
13623: CALL_OW 234
// end ;
13627: GO 13612
13629: POP
13630: POP
// end ;
13631: PPOPN 2
13633: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13634: LD_EXP 25
13638: PUSH
13639: LD_EXP 31
13643: AND
13644: IFFALSE 13728
13646: GO 13648
13648: DISABLE
13649: LD_INT 0
13651: PPUSH
13652: PPUSH
// begin enable ;
13653: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13654: LD_ADDR_VAR 0 2
13658: PUSH
13659: LD_INT 22
13661: PUSH
13662: LD_OWVAR 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 32
13673: PUSH
13674: LD_INT 3
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: ST_TO_ADDR
// if not tmp then
13690: LD_VAR 0 2
13694: NOT
13695: IFFALSE 13699
// exit ;
13697: GO 13728
// for i in tmp do
13699: LD_ADDR_VAR 0 1
13703: PUSH
13704: LD_VAR 0 2
13708: PUSH
13709: FOR_IN
13710: IFFALSE 13726
// begin SetLives ( i , 0 ) ;
13712: LD_VAR 0 1
13716: PPUSH
13717: LD_INT 0
13719: PPUSH
13720: CALL_OW 234
// end ;
13724: GO 13709
13726: POP
13727: POP
// end ;
13728: PPOPN 2
13730: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13731: LD_EXP 25
13735: PUSH
13736: LD_EXP 28
13740: AND
13741: IFFALSE 13834
13743: GO 13745
13745: DISABLE
13746: LD_INT 0
13748: PPUSH
// begin enable ;
13749: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13750: LD_ADDR_VAR 0 1
13754: PUSH
13755: LD_INT 22
13757: PUSH
13758: LD_OWVAR 2
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 2
13769: PUSH
13770: LD_INT 25
13772: PUSH
13773: LD_INT 5
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: LD_INT 25
13782: PUSH
13783: LD_INT 9
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 25
13792: PUSH
13793: LD_INT 8
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PPUSH
13810: CALL_OW 69
13814: PUSH
13815: FOR_IN
13816: IFFALSE 13832
// begin SetClass ( i , 1 ) ;
13818: LD_VAR 0 1
13822: PPUSH
13823: LD_INT 1
13825: PPUSH
13826: CALL_OW 336
// end ;
13830: GO 13815
13832: POP
13833: POP
// end ;
13834: PPOPN 1
13836: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13837: LD_EXP 25
13841: PUSH
13842: LD_EXP 29
13846: AND
13847: PUSH
13848: LD_OWVAR 65
13852: PUSH
13853: LD_INT 7
13855: LESS
13856: AND
13857: IFFALSE 13871
13859: GO 13861
13861: DISABLE
// begin enable ;
13862: ENABLE
// game_speed := 7 ;
13863: LD_ADDR_OWVAR 65
13867: PUSH
13868: LD_INT 7
13870: ST_TO_ADDR
// end ;
13871: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13872: LD_EXP 25
13876: PUSH
13877: LD_EXP 32
13881: AND
13882: IFFALSE 14084
13884: GO 13886
13886: DISABLE
13887: LD_INT 0
13889: PPUSH
13890: PPUSH
13891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13892: LD_ADDR_VAR 0 3
13896: PUSH
13897: LD_INT 81
13899: PUSH
13900: LD_OWVAR 2
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 21
13911: PUSH
13912: LD_INT 1
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PPUSH
13923: CALL_OW 69
13927: ST_TO_ADDR
// if not tmp then
13928: LD_VAR 0 3
13932: NOT
13933: IFFALSE 13937
// exit ;
13935: GO 14084
// if tmp > 5 then
13937: LD_VAR 0 3
13941: PUSH
13942: LD_INT 5
13944: GREATER
13945: IFFALSE 13957
// k := 5 else
13947: LD_ADDR_VAR 0 2
13951: PUSH
13952: LD_INT 5
13954: ST_TO_ADDR
13955: GO 13967
// k := tmp ;
13957: LD_ADDR_VAR 0 2
13961: PUSH
13962: LD_VAR 0 3
13966: ST_TO_ADDR
// for i := 1 to k do
13967: LD_ADDR_VAR 0 1
13971: PUSH
13972: DOUBLE
13973: LD_INT 1
13975: DEC
13976: ST_TO_ADDR
13977: LD_VAR 0 2
13981: PUSH
13982: FOR_TO
13983: IFFALSE 14082
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13985: LD_VAR 0 3
13989: PUSH
13990: LD_VAR 0 1
13994: ARRAY
13995: PPUSH
13996: LD_VAR 0 1
14000: PUSH
14001: LD_INT 4
14003: MOD
14004: PUSH
14005: LD_INT 1
14007: PLUS
14008: PPUSH
14009: CALL_OW 259
14013: PUSH
14014: LD_INT 10
14016: LESS
14017: IFFALSE 14080
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14019: LD_VAR 0 3
14023: PUSH
14024: LD_VAR 0 1
14028: ARRAY
14029: PPUSH
14030: LD_VAR 0 1
14034: PUSH
14035: LD_INT 4
14037: MOD
14038: PUSH
14039: LD_INT 1
14041: PLUS
14042: PPUSH
14043: LD_VAR 0 3
14047: PUSH
14048: LD_VAR 0 1
14052: ARRAY
14053: PPUSH
14054: LD_VAR 0 1
14058: PUSH
14059: LD_INT 4
14061: MOD
14062: PUSH
14063: LD_INT 1
14065: PLUS
14066: PPUSH
14067: CALL_OW 259
14071: PUSH
14072: LD_INT 1
14074: PLUS
14075: PPUSH
14076: CALL_OW 237
14080: GO 13982
14082: POP
14083: POP
// end ;
14084: PPOPN 3
14086: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14087: LD_EXP 25
14091: PUSH
14092: LD_EXP 33
14096: AND
14097: IFFALSE 14117
14099: GO 14101
14101: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14102: LD_INT 4
14104: PPUSH
14105: LD_OWVAR 2
14109: PPUSH
14110: LD_INT 0
14112: PPUSH
14113: CALL_OW 324
14117: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14118: LD_EXP 25
14122: PUSH
14123: LD_EXP 62
14127: AND
14128: IFFALSE 14148
14130: GO 14132
14132: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14133: LD_INT 19
14135: PPUSH
14136: LD_OWVAR 2
14140: PPUSH
14141: LD_INT 0
14143: PPUSH
14144: CALL_OW 324
14148: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14149: LD_EXP 25
14153: PUSH
14154: LD_EXP 34
14158: AND
14159: IFFALSE 14261
14161: GO 14163
14163: DISABLE
14164: LD_INT 0
14166: PPUSH
14167: PPUSH
// begin enable ;
14168: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14169: LD_ADDR_VAR 0 2
14173: PUSH
14174: LD_INT 22
14176: PUSH
14177: LD_OWVAR 2
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: LD_INT 2
14188: PUSH
14189: LD_INT 34
14191: PUSH
14192: LD_INT 11
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: LD_INT 34
14201: PUSH
14202: LD_INT 30
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PPUSH
14218: CALL_OW 69
14222: ST_TO_ADDR
// if not tmp then
14223: LD_VAR 0 2
14227: NOT
14228: IFFALSE 14232
// exit ;
14230: GO 14261
// for i in tmp do
14232: LD_ADDR_VAR 0 1
14236: PUSH
14237: LD_VAR 0 2
14241: PUSH
14242: FOR_IN
14243: IFFALSE 14259
// begin SetLives ( i , 0 ) ;
14245: LD_VAR 0 1
14249: PPUSH
14250: LD_INT 0
14252: PPUSH
14253: CALL_OW 234
// end ;
14257: GO 14242
14259: POP
14260: POP
// end ;
14261: PPOPN 2
14263: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14264: LD_EXP 25
14268: PUSH
14269: LD_EXP 35
14273: AND
14274: IFFALSE 14294
14276: GO 14278
14278: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14279: LD_INT 32
14281: PPUSH
14282: LD_OWVAR 2
14286: PPUSH
14287: LD_INT 0
14289: PPUSH
14290: CALL_OW 324
14294: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14295: LD_EXP 25
14299: PUSH
14300: LD_EXP 36
14304: AND
14305: IFFALSE 14486
14307: GO 14309
14309: DISABLE
14310: LD_INT 0
14312: PPUSH
14313: PPUSH
14314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14315: LD_ADDR_VAR 0 2
14319: PUSH
14320: LD_INT 22
14322: PUSH
14323: LD_OWVAR 2
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PUSH
14332: LD_INT 33
14334: PUSH
14335: LD_INT 3
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PPUSH
14346: CALL_OW 69
14350: ST_TO_ADDR
// if not tmp then
14351: LD_VAR 0 2
14355: NOT
14356: IFFALSE 14360
// exit ;
14358: GO 14486
// side := 0 ;
14360: LD_ADDR_VAR 0 3
14364: PUSH
14365: LD_INT 0
14367: ST_TO_ADDR
// for i := 1 to 8 do
14368: LD_ADDR_VAR 0 1
14372: PUSH
14373: DOUBLE
14374: LD_INT 1
14376: DEC
14377: ST_TO_ADDR
14378: LD_INT 8
14380: PUSH
14381: FOR_TO
14382: IFFALSE 14430
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14384: LD_OWVAR 2
14388: PUSH
14389: LD_VAR 0 1
14393: NONEQUAL
14394: PUSH
14395: LD_OWVAR 2
14399: PPUSH
14400: LD_VAR 0 1
14404: PPUSH
14405: CALL_OW 81
14409: PUSH
14410: LD_INT 2
14412: EQUAL
14413: AND
14414: IFFALSE 14428
// begin side := i ;
14416: LD_ADDR_VAR 0 3
14420: PUSH
14421: LD_VAR 0 1
14425: ST_TO_ADDR
// break ;
14426: GO 14430
// end ;
14428: GO 14381
14430: POP
14431: POP
// if not side then
14432: LD_VAR 0 3
14436: NOT
14437: IFFALSE 14441
// exit ;
14439: GO 14486
// for i := 1 to tmp do
14441: LD_ADDR_VAR 0 1
14445: PUSH
14446: DOUBLE
14447: LD_INT 1
14449: DEC
14450: ST_TO_ADDR
14451: LD_VAR 0 2
14455: PUSH
14456: FOR_TO
14457: IFFALSE 14484
// if Prob ( 60 ) then
14459: LD_INT 60
14461: PPUSH
14462: CALL_OW 13
14466: IFFALSE 14482
// SetSide ( i , side ) ;
14468: LD_VAR 0 1
14472: PPUSH
14473: LD_VAR 0 3
14477: PPUSH
14478: CALL_OW 235
14482: GO 14456
14484: POP
14485: POP
// end ;
14486: PPOPN 3
14488: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14489: LD_EXP 25
14493: PUSH
14494: LD_EXP 38
14498: AND
14499: IFFALSE 14618
14501: GO 14503
14503: DISABLE
14504: LD_INT 0
14506: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14507: LD_ADDR_VAR 0 1
14511: PUSH
14512: LD_INT 22
14514: PUSH
14515: LD_OWVAR 2
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 21
14526: PUSH
14527: LD_INT 1
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 3
14536: PUSH
14537: LD_INT 23
14539: PUSH
14540: LD_INT 0
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: PPUSH
14556: CALL_OW 69
14560: PUSH
14561: FOR_IN
14562: IFFALSE 14616
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14564: LD_VAR 0 1
14568: PPUSH
14569: CALL_OW 257
14573: PUSH
14574: LD_INT 1
14576: PUSH
14577: LD_INT 2
14579: PUSH
14580: LD_INT 3
14582: PUSH
14583: LD_INT 4
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: IN
14592: IFFALSE 14614
// SetClass ( un , rand ( 1 , 4 ) ) ;
14594: LD_VAR 0 1
14598: PPUSH
14599: LD_INT 1
14601: PPUSH
14602: LD_INT 4
14604: PPUSH
14605: CALL_OW 12
14609: PPUSH
14610: CALL_OW 336
14614: GO 14561
14616: POP
14617: POP
// end ;
14618: PPOPN 1
14620: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14621: LD_EXP 25
14625: PUSH
14626: LD_EXP 37
14630: AND
14631: IFFALSE 14710
14633: GO 14635
14635: DISABLE
14636: LD_INT 0
14638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14639: LD_ADDR_VAR 0 1
14643: PUSH
14644: LD_INT 22
14646: PUSH
14647: LD_OWVAR 2
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: LD_INT 21
14658: PUSH
14659: LD_INT 3
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PPUSH
14670: CALL_OW 69
14674: ST_TO_ADDR
// if not tmp then
14675: LD_VAR 0 1
14679: NOT
14680: IFFALSE 14684
// exit ;
14682: GO 14710
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14684: LD_VAR 0 1
14688: PUSH
14689: LD_INT 1
14691: PPUSH
14692: LD_VAR 0 1
14696: PPUSH
14697: CALL_OW 12
14701: ARRAY
14702: PPUSH
14703: LD_INT 100
14705: PPUSH
14706: CALL_OW 234
// end ;
14710: PPOPN 1
14712: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14713: LD_EXP 25
14717: PUSH
14718: LD_EXP 39
14722: AND
14723: IFFALSE 14821
14725: GO 14727
14727: DISABLE
14728: LD_INT 0
14730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14731: LD_ADDR_VAR 0 1
14735: PUSH
14736: LD_INT 22
14738: PUSH
14739: LD_OWVAR 2
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 21
14750: PUSH
14751: LD_INT 1
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: ST_TO_ADDR
// if not tmp then
14767: LD_VAR 0 1
14771: NOT
14772: IFFALSE 14776
// exit ;
14774: GO 14821
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14776: LD_VAR 0 1
14780: PUSH
14781: LD_INT 1
14783: PPUSH
14784: LD_VAR 0 1
14788: PPUSH
14789: CALL_OW 12
14793: ARRAY
14794: PPUSH
14795: LD_INT 1
14797: PPUSH
14798: LD_INT 4
14800: PPUSH
14801: CALL_OW 12
14805: PPUSH
14806: LD_INT 3000
14808: PPUSH
14809: LD_INT 9000
14811: PPUSH
14812: CALL_OW 12
14816: PPUSH
14817: CALL_OW 492
// end ;
14821: PPOPN 1
14823: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14824: LD_EXP 25
14828: PUSH
14829: LD_EXP 40
14833: AND
14834: IFFALSE 14854
14836: GO 14838
14838: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14839: LD_INT 1
14841: PPUSH
14842: LD_OWVAR 2
14846: PPUSH
14847: LD_INT 0
14849: PPUSH
14850: CALL_OW 324
14854: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14855: LD_EXP 25
14859: PUSH
14860: LD_EXP 41
14864: AND
14865: IFFALSE 14948
14867: GO 14869
14869: DISABLE
14870: LD_INT 0
14872: PPUSH
14873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_OWVAR 2
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: LD_INT 21
14893: PUSH
14894: LD_INT 3
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PPUSH
14905: CALL_OW 69
14909: ST_TO_ADDR
// if not tmp then
14910: LD_VAR 0 2
14914: NOT
14915: IFFALSE 14919
// exit ;
14917: GO 14948
// for i in tmp do
14919: LD_ADDR_VAR 0 1
14923: PUSH
14924: LD_VAR 0 2
14928: PUSH
14929: FOR_IN
14930: IFFALSE 14946
// SetBLevel ( i , 10 ) ;
14932: LD_VAR 0 1
14936: PPUSH
14937: LD_INT 10
14939: PPUSH
14940: CALL_OW 241
14944: GO 14929
14946: POP
14947: POP
// end ;
14948: PPOPN 2
14950: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14951: LD_EXP 25
14955: PUSH
14956: LD_EXP 42
14960: AND
14961: IFFALSE 15072
14963: GO 14965
14965: DISABLE
14966: LD_INT 0
14968: PPUSH
14969: PPUSH
14970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14971: LD_ADDR_VAR 0 3
14975: PUSH
14976: LD_INT 22
14978: PUSH
14979: LD_OWVAR 2
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 25
14990: PUSH
14991: LD_INT 1
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PPUSH
15002: CALL_OW 69
15006: ST_TO_ADDR
// if not tmp then
15007: LD_VAR 0 3
15011: NOT
15012: IFFALSE 15016
// exit ;
15014: GO 15072
// un := tmp [ rand ( 1 , tmp ) ] ;
15016: LD_ADDR_VAR 0 2
15020: PUSH
15021: LD_VAR 0 3
15025: PUSH
15026: LD_INT 1
15028: PPUSH
15029: LD_VAR 0 3
15033: PPUSH
15034: CALL_OW 12
15038: ARRAY
15039: ST_TO_ADDR
// if Crawls ( un ) then
15040: LD_VAR 0 2
15044: PPUSH
15045: CALL_OW 318
15049: IFFALSE 15060
// ComWalk ( un ) ;
15051: LD_VAR 0 2
15055: PPUSH
15056: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15060: LD_VAR 0 2
15064: PPUSH
15065: LD_INT 5
15067: PPUSH
15068: CALL_OW 336
// end ;
15072: PPOPN 3
15074: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15075: LD_EXP 25
15079: PUSH
15080: LD_EXP 43
15084: AND
15085: PUSH
15086: LD_OWVAR 67
15090: PUSH
15091: LD_INT 4
15093: LESS
15094: AND
15095: IFFALSE 15114
15097: GO 15099
15099: DISABLE
// begin Difficulty := Difficulty + 1 ;
15100: LD_ADDR_OWVAR 67
15104: PUSH
15105: LD_OWVAR 67
15109: PUSH
15110: LD_INT 1
15112: PLUS
15113: ST_TO_ADDR
// end ;
15114: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15115: LD_EXP 25
15119: PUSH
15120: LD_EXP 44
15124: AND
15125: IFFALSE 15228
15127: GO 15129
15129: DISABLE
15130: LD_INT 0
15132: PPUSH
// begin for i := 1 to 5 do
15133: LD_ADDR_VAR 0 1
15137: PUSH
15138: DOUBLE
15139: LD_INT 1
15141: DEC
15142: ST_TO_ADDR
15143: LD_INT 5
15145: PUSH
15146: FOR_TO
15147: IFFALSE 15226
// begin uc_nation := nation_nature ;
15149: LD_ADDR_OWVAR 21
15153: PUSH
15154: LD_INT 0
15156: ST_TO_ADDR
// uc_side := 0 ;
15157: LD_ADDR_OWVAR 20
15161: PUSH
15162: LD_INT 0
15164: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15165: LD_ADDR_OWVAR 29
15169: PUSH
15170: LD_INT 12
15172: PUSH
15173: LD_INT 12
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: ST_TO_ADDR
// hc_agressivity := 20 ;
15180: LD_ADDR_OWVAR 35
15184: PUSH
15185: LD_INT 20
15187: ST_TO_ADDR
// hc_class := class_tiger ;
15188: LD_ADDR_OWVAR 28
15192: PUSH
15193: LD_INT 14
15195: ST_TO_ADDR
// hc_gallery :=  ;
15196: LD_ADDR_OWVAR 33
15200: PUSH
15201: LD_STRING 
15203: ST_TO_ADDR
// hc_name :=  ;
15204: LD_ADDR_OWVAR 26
15208: PUSH
15209: LD_STRING 
15211: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15212: CALL_OW 44
15216: PPUSH
15217: LD_INT 0
15219: PPUSH
15220: CALL_OW 51
// end ;
15224: GO 15146
15226: POP
15227: POP
// end ;
15228: PPOPN 1
15230: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15231: LD_EXP 25
15235: PUSH
15236: LD_EXP 45
15240: AND
15241: IFFALSE 15250
15243: GO 15245
15245: DISABLE
// StreamSibBomb ;
15246: CALL 15251 0 0
15250: END
// export function StreamSibBomb ; var i , x , y ; begin
15251: LD_INT 0
15253: PPUSH
15254: PPUSH
15255: PPUSH
15256: PPUSH
// result := false ;
15257: LD_ADDR_VAR 0 1
15261: PUSH
15262: LD_INT 0
15264: ST_TO_ADDR
// for i := 1 to 16 do
15265: LD_ADDR_VAR 0 2
15269: PUSH
15270: DOUBLE
15271: LD_INT 1
15273: DEC
15274: ST_TO_ADDR
15275: LD_INT 16
15277: PUSH
15278: FOR_TO
15279: IFFALSE 15478
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15281: LD_ADDR_VAR 0 3
15285: PUSH
15286: LD_INT 10
15288: PUSH
15289: LD_INT 20
15291: PUSH
15292: LD_INT 30
15294: PUSH
15295: LD_INT 40
15297: PUSH
15298: LD_INT 50
15300: PUSH
15301: LD_INT 60
15303: PUSH
15304: LD_INT 70
15306: PUSH
15307: LD_INT 80
15309: PUSH
15310: LD_INT 90
15312: PUSH
15313: LD_INT 100
15315: PUSH
15316: LD_INT 110
15318: PUSH
15319: LD_INT 120
15321: PUSH
15322: LD_INT 130
15324: PUSH
15325: LD_INT 140
15327: PUSH
15328: LD_INT 150
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 1
15350: PPUSH
15351: LD_INT 15
15353: PPUSH
15354: CALL_OW 12
15358: ARRAY
15359: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15360: LD_ADDR_VAR 0 4
15364: PUSH
15365: LD_INT 10
15367: PUSH
15368: LD_INT 20
15370: PUSH
15371: LD_INT 30
15373: PUSH
15374: LD_INT 40
15376: PUSH
15377: LD_INT 50
15379: PUSH
15380: LD_INT 60
15382: PUSH
15383: LD_INT 70
15385: PUSH
15386: LD_INT 80
15388: PUSH
15389: LD_INT 90
15391: PUSH
15392: LD_INT 100
15394: PUSH
15395: LD_INT 110
15397: PUSH
15398: LD_INT 120
15400: PUSH
15401: LD_INT 130
15403: PUSH
15404: LD_INT 140
15406: PUSH
15407: LD_INT 150
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: PUSH
15427: LD_INT 1
15429: PPUSH
15430: LD_INT 15
15432: PPUSH
15433: CALL_OW 12
15437: ARRAY
15438: ST_TO_ADDR
// if ValidHex ( x , y ) then
15439: LD_VAR 0 3
15443: PPUSH
15444: LD_VAR 0 4
15448: PPUSH
15449: CALL_OW 488
15453: IFFALSE 15476
// begin result := [ x , y ] ;
15455: LD_ADDR_VAR 0 1
15459: PUSH
15460: LD_VAR 0 3
15464: PUSH
15465: LD_VAR 0 4
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: ST_TO_ADDR
// break ;
15474: GO 15478
// end ; end ;
15476: GO 15278
15478: POP
15479: POP
// if result then
15480: LD_VAR 0 1
15484: IFFALSE 15544
// begin ToLua ( playSibBomb() ) ;
15486: LD_STRING playSibBomb()
15488: PPUSH
15489: CALL_OW 559
// wait ( 0 0$14 ) ;
15493: LD_INT 490
15495: PPUSH
15496: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15500: LD_VAR 0 1
15504: PUSH
15505: LD_INT 1
15507: ARRAY
15508: PPUSH
15509: LD_VAR 0 1
15513: PUSH
15514: LD_INT 2
15516: ARRAY
15517: PPUSH
15518: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15522: LD_VAR 0 1
15526: PUSH
15527: LD_INT 1
15529: ARRAY
15530: PPUSH
15531: LD_VAR 0 1
15535: PUSH
15536: LD_INT 2
15538: ARRAY
15539: PPUSH
15540: CALL_OW 429
// end ; end ;
15544: LD_VAR 0 1
15548: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15549: LD_EXP 25
15553: PUSH
15554: LD_EXP 47
15558: AND
15559: IFFALSE 15571
15561: GO 15563
15563: DISABLE
// YouLost (  ) ;
15564: LD_STRING 
15566: PPUSH
15567: CALL_OW 104
15571: END
// every 0 0$1 trigger StreamModeActive and sFog do
15572: LD_EXP 25
15576: PUSH
15577: LD_EXP 46
15581: AND
15582: IFFALSE 15596
15584: GO 15586
15586: DISABLE
// FogOff ( your_side ) ;
15587: LD_OWVAR 2
15591: PPUSH
15592: CALL_OW 344
15596: END
// every 0 0$1 trigger StreamModeActive and sSun do
15597: LD_EXP 25
15601: PUSH
15602: LD_EXP 48
15606: AND
15607: IFFALSE 15635
15609: GO 15611
15611: DISABLE
// begin solar_recharge_percent := 0 ;
15612: LD_ADDR_OWVAR 79
15616: PUSH
15617: LD_INT 0
15619: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15620: LD_INT 10500
15622: PPUSH
15623: CALL_OW 67
// solar_recharge_percent := 100 ;
15627: LD_ADDR_OWVAR 79
15631: PUSH
15632: LD_INT 100
15634: ST_TO_ADDR
// end ;
15635: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15636: LD_EXP 25
15640: PUSH
15641: LD_EXP 49
15645: AND
15646: IFFALSE 15885
15648: GO 15650
15650: DISABLE
15651: LD_INT 0
15653: PPUSH
15654: PPUSH
15655: PPUSH
// begin tmp := [ ] ;
15656: LD_ADDR_VAR 0 3
15660: PUSH
15661: EMPTY
15662: ST_TO_ADDR
// for i := 1 to 6 do
15663: LD_ADDR_VAR 0 1
15667: PUSH
15668: DOUBLE
15669: LD_INT 1
15671: DEC
15672: ST_TO_ADDR
15673: LD_INT 6
15675: PUSH
15676: FOR_TO
15677: IFFALSE 15782
// begin uc_nation := nation_nature ;
15679: LD_ADDR_OWVAR 21
15683: PUSH
15684: LD_INT 0
15686: ST_TO_ADDR
// uc_side := 0 ;
15687: LD_ADDR_OWVAR 20
15691: PUSH
15692: LD_INT 0
15694: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15695: LD_ADDR_OWVAR 29
15699: PUSH
15700: LD_INT 12
15702: PUSH
15703: LD_INT 12
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: ST_TO_ADDR
// hc_agressivity := 20 ;
15710: LD_ADDR_OWVAR 35
15714: PUSH
15715: LD_INT 20
15717: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15718: LD_ADDR_OWVAR 28
15722: PUSH
15723: LD_INT 17
15725: ST_TO_ADDR
// hc_gallery :=  ;
15726: LD_ADDR_OWVAR 33
15730: PUSH
15731: LD_STRING 
15733: ST_TO_ADDR
// hc_name :=  ;
15734: LD_ADDR_OWVAR 26
15738: PUSH
15739: LD_STRING 
15741: ST_TO_ADDR
// un := CreateHuman ;
15742: LD_ADDR_VAR 0 2
15746: PUSH
15747: CALL_OW 44
15751: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15752: LD_VAR 0 2
15756: PPUSH
15757: LD_INT 1
15759: PPUSH
15760: CALL_OW 51
// tmp := tmp ^ un ;
15764: LD_ADDR_VAR 0 3
15768: PUSH
15769: LD_VAR 0 3
15773: PUSH
15774: LD_VAR 0 2
15778: ADD
15779: ST_TO_ADDR
// end ;
15780: GO 15676
15782: POP
15783: POP
// repeat wait ( 0 0$1 ) ;
15784: LD_INT 35
15786: PPUSH
15787: CALL_OW 67
// for un in tmp do
15791: LD_ADDR_VAR 0 2
15795: PUSH
15796: LD_VAR 0 3
15800: PUSH
15801: FOR_IN
15802: IFFALSE 15876
// begin if IsDead ( un ) then
15804: LD_VAR 0 2
15808: PPUSH
15809: CALL_OW 301
15813: IFFALSE 15833
// begin tmp := tmp diff un ;
15815: LD_ADDR_VAR 0 3
15819: PUSH
15820: LD_VAR 0 3
15824: PUSH
15825: LD_VAR 0 2
15829: DIFF
15830: ST_TO_ADDR
// continue ;
15831: GO 15801
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15833: LD_VAR 0 2
15837: PPUSH
15838: LD_INT 3
15840: PUSH
15841: LD_INT 22
15843: PUSH
15844: LD_INT 0
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 69
15859: PPUSH
15860: LD_VAR 0 2
15864: PPUSH
15865: CALL_OW 74
15869: PPUSH
15870: CALL_OW 115
// end ;
15874: GO 15801
15876: POP
15877: POP
// until not tmp ;
15878: LD_VAR 0 3
15882: NOT
15883: IFFALSE 15784
// end ;
15885: PPOPN 3
15887: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15888: LD_EXP 25
15892: PUSH
15893: LD_EXP 50
15897: AND
15898: IFFALSE 15952
15900: GO 15902
15902: DISABLE
// begin ToLua ( displayTroll(); ) ;
15903: LD_STRING displayTroll();
15905: PPUSH
15906: CALL_OW 559
// wait ( 3 3$00 ) ;
15910: LD_INT 6300
15912: PPUSH
15913: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15917: LD_STRING hideTroll();
15919: PPUSH
15920: CALL_OW 559
// wait ( 1 1$00 ) ;
15924: LD_INT 2100
15926: PPUSH
15927: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15931: LD_STRING displayTroll();
15933: PPUSH
15934: CALL_OW 559
// wait ( 1 1$00 ) ;
15938: LD_INT 2100
15940: PPUSH
15941: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15945: LD_STRING hideTroll();
15947: PPUSH
15948: CALL_OW 559
// end ;
15952: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15953: LD_EXP 25
15957: PUSH
15958: LD_EXP 51
15962: AND
15963: IFFALSE 16026
15965: GO 15967
15967: DISABLE
15968: LD_INT 0
15970: PPUSH
// begin p := 0 ;
15971: LD_ADDR_VAR 0 1
15975: PUSH
15976: LD_INT 0
15978: ST_TO_ADDR
// repeat game_speed := 1 ;
15979: LD_ADDR_OWVAR 65
15983: PUSH
15984: LD_INT 1
15986: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15987: LD_INT 35
15989: PPUSH
15990: CALL_OW 67
// p := p + 1 ;
15994: LD_ADDR_VAR 0 1
15998: PUSH
15999: LD_VAR 0 1
16003: PUSH
16004: LD_INT 1
16006: PLUS
16007: ST_TO_ADDR
// until p >= 60 ;
16008: LD_VAR 0 1
16012: PUSH
16013: LD_INT 60
16015: GREATEREQUAL
16016: IFFALSE 15979
// game_speed := 4 ;
16018: LD_ADDR_OWVAR 65
16022: PUSH
16023: LD_INT 4
16025: ST_TO_ADDR
// end ;
16026: PPOPN 1
16028: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16029: LD_EXP 25
16033: PUSH
16034: LD_EXP 52
16038: AND
16039: IFFALSE 16185
16041: GO 16043
16043: DISABLE
16044: LD_INT 0
16046: PPUSH
16047: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16048: LD_ADDR_VAR 0 1
16052: PUSH
16053: LD_INT 22
16055: PUSH
16056: LD_OWVAR 2
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 2
16067: PUSH
16068: LD_INT 30
16070: PUSH
16071: LD_INT 0
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: LD_INT 30
16080: PUSH
16081: LD_INT 1
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PPUSH
16097: CALL_OW 69
16101: ST_TO_ADDR
// if not depot then
16102: LD_VAR 0 1
16106: NOT
16107: IFFALSE 16111
// exit ;
16109: GO 16185
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16111: LD_ADDR_VAR 0 2
16115: PUSH
16116: LD_VAR 0 1
16120: PUSH
16121: LD_INT 1
16123: PPUSH
16124: LD_VAR 0 1
16128: PPUSH
16129: CALL_OW 12
16133: ARRAY
16134: PPUSH
16135: CALL_OW 274
16139: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16140: LD_VAR 0 2
16144: PPUSH
16145: LD_INT 1
16147: PPUSH
16148: LD_INT 0
16150: PPUSH
16151: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16155: LD_VAR 0 2
16159: PPUSH
16160: LD_INT 2
16162: PPUSH
16163: LD_INT 0
16165: PPUSH
16166: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16170: LD_VAR 0 2
16174: PPUSH
16175: LD_INT 3
16177: PPUSH
16178: LD_INT 0
16180: PPUSH
16181: CALL_OW 277
// end ;
16185: PPOPN 2
16187: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16188: LD_EXP 25
16192: PUSH
16193: LD_EXP 53
16197: AND
16198: IFFALSE 16295
16200: GO 16202
16202: DISABLE
16203: LD_INT 0
16205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16206: LD_ADDR_VAR 0 1
16210: PUSH
16211: LD_INT 22
16213: PUSH
16214: LD_OWVAR 2
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: LD_INT 21
16225: PUSH
16226: LD_INT 1
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 3
16235: PUSH
16236: LD_INT 23
16238: PUSH
16239: LD_INT 0
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: LIST
16254: PPUSH
16255: CALL_OW 69
16259: ST_TO_ADDR
// if not tmp then
16260: LD_VAR 0 1
16264: NOT
16265: IFFALSE 16269
// exit ;
16267: GO 16295
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16269: LD_VAR 0 1
16273: PUSH
16274: LD_INT 1
16276: PPUSH
16277: LD_VAR 0 1
16281: PPUSH
16282: CALL_OW 12
16286: ARRAY
16287: PPUSH
16288: LD_INT 200
16290: PPUSH
16291: CALL_OW 234
// end ;
16295: PPOPN 1
16297: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16298: LD_EXP 25
16302: PUSH
16303: LD_EXP 54
16307: AND
16308: IFFALSE 16387
16310: GO 16312
16312: DISABLE
16313: LD_INT 0
16315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16316: LD_ADDR_VAR 0 1
16320: PUSH
16321: LD_INT 22
16323: PUSH
16324: LD_OWVAR 2
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 21
16335: PUSH
16336: LD_INT 2
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PPUSH
16347: CALL_OW 69
16351: ST_TO_ADDR
// if not tmp then
16352: LD_VAR 0 1
16356: NOT
16357: IFFALSE 16361
// exit ;
16359: GO 16387
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16361: LD_VAR 0 1
16365: PUSH
16366: LD_INT 1
16368: PPUSH
16369: LD_VAR 0 1
16373: PPUSH
16374: CALL_OW 12
16378: ARRAY
16379: PPUSH
16380: LD_INT 60
16382: PPUSH
16383: CALL_OW 234
// end ;
16387: PPOPN 1
16389: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16390: LD_EXP 25
16394: PUSH
16395: LD_EXP 55
16399: AND
16400: IFFALSE 16499
16402: GO 16404
16404: DISABLE
16405: LD_INT 0
16407: PPUSH
16408: PPUSH
// begin enable ;
16409: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16410: LD_ADDR_VAR 0 1
16414: PUSH
16415: LD_INT 22
16417: PUSH
16418: LD_OWVAR 2
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 61
16429: PUSH
16430: EMPTY
16431: LIST
16432: PUSH
16433: LD_INT 33
16435: PUSH
16436: LD_INT 2
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: LIST
16447: PPUSH
16448: CALL_OW 69
16452: ST_TO_ADDR
// if not tmp then
16453: LD_VAR 0 1
16457: NOT
16458: IFFALSE 16462
// exit ;
16460: GO 16499
// for i in tmp do
16462: LD_ADDR_VAR 0 2
16466: PUSH
16467: LD_VAR 0 1
16471: PUSH
16472: FOR_IN
16473: IFFALSE 16497
// if IsControledBy ( i ) then
16475: LD_VAR 0 2
16479: PPUSH
16480: CALL_OW 312
16484: IFFALSE 16495
// ComUnlink ( i ) ;
16486: LD_VAR 0 2
16490: PPUSH
16491: CALL_OW 136
16495: GO 16472
16497: POP
16498: POP
// end ;
16499: PPOPN 2
16501: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16502: LD_EXP 25
16506: PUSH
16507: LD_EXP 56
16511: AND
16512: IFFALSE 16652
16514: GO 16516
16516: DISABLE
16517: LD_INT 0
16519: PPUSH
16520: PPUSH
// begin ToLua ( displayPowell(); ) ;
16521: LD_STRING displayPowell();
16523: PPUSH
16524: CALL_OW 559
// uc_side := 0 ;
16528: LD_ADDR_OWVAR 20
16532: PUSH
16533: LD_INT 0
16535: ST_TO_ADDR
// uc_nation := 2 ;
16536: LD_ADDR_OWVAR 21
16540: PUSH
16541: LD_INT 2
16543: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16544: LD_ADDR_OWVAR 37
16548: PUSH
16549: LD_INT 14
16551: ST_TO_ADDR
// vc_engine := engine_siberite ;
16552: LD_ADDR_OWVAR 39
16556: PUSH
16557: LD_INT 3
16559: ST_TO_ADDR
// vc_control := control_apeman ;
16560: LD_ADDR_OWVAR 38
16564: PUSH
16565: LD_INT 5
16567: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16568: LD_ADDR_OWVAR 40
16572: PUSH
16573: LD_INT 29
16575: ST_TO_ADDR
// un := CreateVehicle ;
16576: LD_ADDR_VAR 0 2
16580: PUSH
16581: CALL_OW 45
16585: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16586: LD_VAR 0 2
16590: PPUSH
16591: LD_INT 1
16593: PPUSH
16594: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16598: LD_INT 35
16600: PPUSH
16601: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16605: LD_VAR 0 2
16609: PPUSH
16610: LD_INT 22
16612: PUSH
16613: LD_OWVAR 2
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PPUSH
16622: CALL_OW 69
16626: PPUSH
16627: LD_VAR 0 2
16631: PPUSH
16632: CALL_OW 74
16636: PPUSH
16637: CALL_OW 115
// until IsDead ( un ) ;
16641: LD_VAR 0 2
16645: PPUSH
16646: CALL_OW 301
16650: IFFALSE 16598
// end ;
16652: PPOPN 2
16654: END
// every 0 0$1 trigger StreamModeActive and sStu do
16655: LD_EXP 25
16659: PUSH
16660: LD_EXP 64
16664: AND
16665: IFFALSE 16681
16667: GO 16669
16669: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16670: LD_STRING displayStucuk();
16672: PPUSH
16673: CALL_OW 559
// ResetFog ;
16677: CALL_OW 335
// end ;
16681: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16682: LD_EXP 25
16686: PUSH
16687: LD_EXP 57
16691: AND
16692: IFFALSE 16833
16694: GO 16696
16696: DISABLE
16697: LD_INT 0
16699: PPUSH
16700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16701: LD_ADDR_VAR 0 2
16705: PUSH
16706: LD_INT 22
16708: PUSH
16709: LD_OWVAR 2
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: LD_INT 21
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PPUSH
16732: CALL_OW 69
16736: ST_TO_ADDR
// if not tmp then
16737: LD_VAR 0 2
16741: NOT
16742: IFFALSE 16746
// exit ;
16744: GO 16833
// un := tmp [ rand ( 1 , tmp ) ] ;
16746: LD_ADDR_VAR 0 1
16750: PUSH
16751: LD_VAR 0 2
16755: PUSH
16756: LD_INT 1
16758: PPUSH
16759: LD_VAR 0 2
16763: PPUSH
16764: CALL_OW 12
16768: ARRAY
16769: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16770: LD_VAR 0 1
16774: PPUSH
16775: LD_INT 0
16777: PPUSH
16778: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16782: LD_VAR 0 1
16786: PPUSH
16787: LD_OWVAR 3
16791: PUSH
16792: LD_VAR 0 1
16796: DIFF
16797: PPUSH
16798: LD_VAR 0 1
16802: PPUSH
16803: CALL_OW 74
16807: PPUSH
16808: CALL_OW 115
// wait ( 0 0$20 ) ;
16812: LD_INT 700
16814: PPUSH
16815: CALL_OW 67
// SetSide ( un , your_side ) ;
16819: LD_VAR 0 1
16823: PPUSH
16824: LD_OWVAR 2
16828: PPUSH
16829: CALL_OW 235
// end ;
16833: PPOPN 2
16835: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16836: LD_EXP 25
16840: PUSH
16841: LD_EXP 58
16845: AND
16846: IFFALSE 16952
16848: GO 16850
16850: DISABLE
16851: LD_INT 0
16853: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16854: LD_ADDR_VAR 0 1
16858: PUSH
16859: LD_INT 22
16861: PUSH
16862: LD_OWVAR 2
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 2
16873: PUSH
16874: LD_INT 30
16876: PUSH
16877: LD_INT 0
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 30
16886: PUSH
16887: LD_INT 1
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: LIST
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PPUSH
16903: CALL_OW 69
16907: ST_TO_ADDR
// if not depot then
16908: LD_VAR 0 1
16912: NOT
16913: IFFALSE 16917
// exit ;
16915: GO 16952
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16917: LD_VAR 0 1
16921: PUSH
16922: LD_INT 1
16924: ARRAY
16925: PPUSH
16926: CALL_OW 250
16930: PPUSH
16931: LD_VAR 0 1
16935: PUSH
16936: LD_INT 1
16938: ARRAY
16939: PPUSH
16940: CALL_OW 251
16944: PPUSH
16945: LD_INT 70
16947: PPUSH
16948: CALL_OW 495
// end ;
16952: PPOPN 1
16954: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16955: LD_EXP 25
16959: PUSH
16960: LD_EXP 59
16964: AND
16965: IFFALSE 17176
16967: GO 16969
16969: DISABLE
16970: LD_INT 0
16972: PPUSH
16973: PPUSH
16974: PPUSH
16975: PPUSH
16976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16977: LD_ADDR_VAR 0 5
16981: PUSH
16982: LD_INT 22
16984: PUSH
16985: LD_OWVAR 2
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 1
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PPUSH
17008: CALL_OW 69
17012: ST_TO_ADDR
// if not tmp then
17013: LD_VAR 0 5
17017: NOT
17018: IFFALSE 17022
// exit ;
17020: GO 17176
// for i in tmp do
17022: LD_ADDR_VAR 0 1
17026: PUSH
17027: LD_VAR 0 5
17031: PUSH
17032: FOR_IN
17033: IFFALSE 17174
// begin d := rand ( 0 , 5 ) ;
17035: LD_ADDR_VAR 0 4
17039: PUSH
17040: LD_INT 0
17042: PPUSH
17043: LD_INT 5
17045: PPUSH
17046: CALL_OW 12
17050: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17051: LD_ADDR_VAR 0 2
17055: PUSH
17056: LD_VAR 0 1
17060: PPUSH
17061: CALL_OW 250
17065: PPUSH
17066: LD_VAR 0 4
17070: PPUSH
17071: LD_INT 3
17073: PPUSH
17074: LD_INT 12
17076: PPUSH
17077: CALL_OW 12
17081: PPUSH
17082: CALL_OW 272
17086: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17087: LD_ADDR_VAR 0 3
17091: PUSH
17092: LD_VAR 0 1
17096: PPUSH
17097: CALL_OW 251
17101: PPUSH
17102: LD_VAR 0 4
17106: PPUSH
17107: LD_INT 3
17109: PPUSH
17110: LD_INT 12
17112: PPUSH
17113: CALL_OW 12
17117: PPUSH
17118: CALL_OW 273
17122: ST_TO_ADDR
// if ValidHex ( x , y ) then
17123: LD_VAR 0 2
17127: PPUSH
17128: LD_VAR 0 3
17132: PPUSH
17133: CALL_OW 488
17137: IFFALSE 17172
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17139: LD_VAR 0 1
17143: PPUSH
17144: LD_VAR 0 2
17148: PPUSH
17149: LD_VAR 0 3
17153: PPUSH
17154: LD_INT 3
17156: PPUSH
17157: LD_INT 6
17159: PPUSH
17160: CALL_OW 12
17164: PPUSH
17165: LD_INT 1
17167: PPUSH
17168: CALL_OW 483
// end ;
17172: GO 17032
17174: POP
17175: POP
// end ;
17176: PPOPN 5
17178: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17179: LD_EXP 25
17183: PUSH
17184: LD_EXP 60
17188: AND
17189: IFFALSE 17283
17191: GO 17193
17193: DISABLE
17194: LD_INT 0
17196: PPUSH
17197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17198: LD_ADDR_VAR 0 2
17202: PUSH
17203: LD_INT 22
17205: PUSH
17206: LD_OWVAR 2
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 32
17217: PUSH
17218: LD_INT 1
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 21
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 69
17244: ST_TO_ADDR
// if not tmp then
17245: LD_VAR 0 2
17249: NOT
17250: IFFALSE 17254
// exit ;
17252: GO 17283
// for i in tmp do
17254: LD_ADDR_VAR 0 1
17258: PUSH
17259: LD_VAR 0 2
17263: PUSH
17264: FOR_IN
17265: IFFALSE 17281
// SetFuel ( i , 0 ) ;
17267: LD_VAR 0 1
17271: PPUSH
17272: LD_INT 0
17274: PPUSH
17275: CALL_OW 240
17279: GO 17264
17281: POP
17282: POP
// end ;
17283: PPOPN 2
17285: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17286: LD_EXP 25
17290: PUSH
17291: LD_EXP 61
17295: AND
17296: IFFALSE 17362
17298: GO 17300
17300: DISABLE
17301: LD_INT 0
17303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17304: LD_ADDR_VAR 0 1
17308: PUSH
17309: LD_INT 22
17311: PUSH
17312: LD_OWVAR 2
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 30
17323: PUSH
17324: LD_INT 29
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PPUSH
17335: CALL_OW 69
17339: ST_TO_ADDR
// if not tmp then
17340: LD_VAR 0 1
17344: NOT
17345: IFFALSE 17349
// exit ;
17347: GO 17362
// DestroyUnit ( tmp [ 1 ] ) ;
17349: LD_VAR 0 1
17353: PUSH
17354: LD_INT 1
17356: ARRAY
17357: PPUSH
17358: CALL_OW 65
// end ;
17362: PPOPN 1
17364: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17365: LD_EXP 25
17369: PUSH
17370: LD_EXP 63
17374: AND
17375: IFFALSE 17504
17377: GO 17379
17379: DISABLE
17380: LD_INT 0
17382: PPUSH
// begin uc_side := 0 ;
17383: LD_ADDR_OWVAR 20
17387: PUSH
17388: LD_INT 0
17390: ST_TO_ADDR
// uc_nation := nation_arabian ;
17391: LD_ADDR_OWVAR 21
17395: PUSH
17396: LD_INT 2
17398: ST_TO_ADDR
// hc_gallery :=  ;
17399: LD_ADDR_OWVAR 33
17403: PUSH
17404: LD_STRING 
17406: ST_TO_ADDR
// hc_name :=  ;
17407: LD_ADDR_OWVAR 26
17411: PUSH
17412: LD_STRING 
17414: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17415: LD_INT 1
17417: PPUSH
17418: LD_INT 11
17420: PPUSH
17421: LD_INT 10
17423: PPUSH
17424: CALL_OW 380
// un := CreateHuman ;
17428: LD_ADDR_VAR 0 1
17432: PUSH
17433: CALL_OW 44
17437: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17438: LD_VAR 0 1
17442: PPUSH
17443: LD_INT 1
17445: PPUSH
17446: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17450: LD_INT 35
17452: PPUSH
17453: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17457: LD_VAR 0 1
17461: PPUSH
17462: LD_INT 22
17464: PUSH
17465: LD_OWVAR 2
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PPUSH
17474: CALL_OW 69
17478: PPUSH
17479: LD_VAR 0 1
17483: PPUSH
17484: CALL_OW 74
17488: PPUSH
17489: CALL_OW 115
// until IsDead ( un ) ;
17493: LD_VAR 0 1
17497: PPUSH
17498: CALL_OW 301
17502: IFFALSE 17450
// end ;
17504: PPOPN 1
17506: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17507: LD_EXP 25
17511: PUSH
17512: LD_EXP 65
17516: AND
17517: IFFALSE 17529
17519: GO 17521
17521: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17522: LD_STRING earthquake(getX(game), 0, 32)
17524: PPUSH
17525: CALL_OW 559
17529: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17530: LD_EXP 25
17534: PUSH
17535: LD_EXP 66
17539: AND
17540: IFFALSE 17631
17542: GO 17544
17544: DISABLE
17545: LD_INT 0
17547: PPUSH
// begin enable ;
17548: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17549: LD_ADDR_VAR 0 1
17553: PUSH
17554: LD_INT 22
17556: PUSH
17557: LD_OWVAR 2
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 21
17568: PUSH
17569: LD_INT 2
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 33
17578: PUSH
17579: LD_INT 3
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: LIST
17590: PPUSH
17591: CALL_OW 69
17595: ST_TO_ADDR
// if not tmp then
17596: LD_VAR 0 1
17600: NOT
17601: IFFALSE 17605
// exit ;
17603: GO 17631
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17605: LD_VAR 0 1
17609: PUSH
17610: LD_INT 1
17612: PPUSH
17613: LD_VAR 0 1
17617: PPUSH
17618: CALL_OW 12
17622: ARRAY
17623: PPUSH
17624: LD_INT 1
17626: PPUSH
17627: CALL_OW 234
// end ;
17631: PPOPN 1
17633: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17634: LD_EXP 25
17638: PUSH
17639: LD_EXP 67
17643: AND
17644: IFFALSE 17785
17646: GO 17648
17648: DISABLE
17649: LD_INT 0
17651: PPUSH
17652: PPUSH
17653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17654: LD_ADDR_VAR 0 3
17658: PUSH
17659: LD_INT 22
17661: PUSH
17662: LD_OWVAR 2
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 25
17673: PUSH
17674: LD_INT 1
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PPUSH
17685: CALL_OW 69
17689: ST_TO_ADDR
// if not tmp then
17690: LD_VAR 0 3
17694: NOT
17695: IFFALSE 17699
// exit ;
17697: GO 17785
// un := tmp [ rand ( 1 , tmp ) ] ;
17699: LD_ADDR_VAR 0 2
17703: PUSH
17704: LD_VAR 0 3
17708: PUSH
17709: LD_INT 1
17711: PPUSH
17712: LD_VAR 0 3
17716: PPUSH
17717: CALL_OW 12
17721: ARRAY
17722: ST_TO_ADDR
// if Crawls ( un ) then
17723: LD_VAR 0 2
17727: PPUSH
17728: CALL_OW 318
17732: IFFALSE 17743
// ComWalk ( un ) ;
17734: LD_VAR 0 2
17738: PPUSH
17739: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17743: LD_VAR 0 2
17747: PPUSH
17748: LD_INT 9
17750: PPUSH
17751: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17755: LD_INT 28
17757: PPUSH
17758: LD_OWVAR 2
17762: PPUSH
17763: LD_INT 2
17765: PPUSH
17766: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17770: LD_INT 29
17772: PPUSH
17773: LD_OWVAR 2
17777: PPUSH
17778: LD_INT 2
17780: PPUSH
17781: CALL_OW 322
// end ;
17785: PPOPN 3
17787: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17788: LD_EXP 25
17792: PUSH
17793: LD_EXP 68
17797: AND
17798: IFFALSE 17909
17800: GO 17802
17802: DISABLE
17803: LD_INT 0
17805: PPUSH
17806: PPUSH
17807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17808: LD_ADDR_VAR 0 3
17812: PUSH
17813: LD_INT 22
17815: PUSH
17816: LD_OWVAR 2
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 25
17827: PUSH
17828: LD_INT 1
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PPUSH
17839: CALL_OW 69
17843: ST_TO_ADDR
// if not tmp then
17844: LD_VAR 0 3
17848: NOT
17849: IFFALSE 17853
// exit ;
17851: GO 17909
// un := tmp [ rand ( 1 , tmp ) ] ;
17853: LD_ADDR_VAR 0 2
17857: PUSH
17858: LD_VAR 0 3
17862: PUSH
17863: LD_INT 1
17865: PPUSH
17866: LD_VAR 0 3
17870: PPUSH
17871: CALL_OW 12
17875: ARRAY
17876: ST_TO_ADDR
// if Crawls ( un ) then
17877: LD_VAR 0 2
17881: PPUSH
17882: CALL_OW 318
17886: IFFALSE 17897
// ComWalk ( un ) ;
17888: LD_VAR 0 2
17892: PPUSH
17893: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17897: LD_VAR 0 2
17901: PPUSH
17902: LD_INT 8
17904: PPUSH
17905: CALL_OW 336
// end ;
17909: PPOPN 3
17911: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17912: LD_EXP 25
17916: PUSH
17917: LD_EXP 69
17921: AND
17922: IFFALSE 18066
17924: GO 17926
17926: DISABLE
17927: LD_INT 0
17929: PPUSH
17930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17931: LD_ADDR_VAR 0 2
17935: PUSH
17936: LD_INT 22
17938: PUSH
17939: LD_OWVAR 2
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 21
17950: PUSH
17951: LD_INT 2
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 2
17960: PUSH
17961: LD_INT 34
17963: PUSH
17964: LD_INT 12
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 34
17973: PUSH
17974: LD_INT 51
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 34
17983: PUSH
17984: LD_INT 32
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: LIST
18001: PPUSH
18002: CALL_OW 69
18006: ST_TO_ADDR
// if not tmp then
18007: LD_VAR 0 2
18011: NOT
18012: IFFALSE 18016
// exit ;
18014: GO 18066
// for i in tmp do
18016: LD_ADDR_VAR 0 1
18020: PUSH
18021: LD_VAR 0 2
18025: PUSH
18026: FOR_IN
18027: IFFALSE 18064
// if GetCargo ( i , mat_artifact ) = 0 then
18029: LD_VAR 0 1
18033: PPUSH
18034: LD_INT 4
18036: PPUSH
18037: CALL_OW 289
18041: PUSH
18042: LD_INT 0
18044: EQUAL
18045: IFFALSE 18062
// SetCargo ( i , mat_siberit , 100 ) ;
18047: LD_VAR 0 1
18051: PPUSH
18052: LD_INT 3
18054: PPUSH
18055: LD_INT 100
18057: PPUSH
18058: CALL_OW 290
18062: GO 18026
18064: POP
18065: POP
// end ;
18066: PPOPN 2
18068: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18069: LD_EXP 25
18073: PUSH
18074: LD_EXP 70
18078: AND
18079: IFFALSE 18262
18081: GO 18083
18083: DISABLE
18084: LD_INT 0
18086: PPUSH
18087: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18088: LD_ADDR_VAR 0 2
18092: PUSH
18093: LD_INT 22
18095: PUSH
18096: LD_OWVAR 2
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PPUSH
18105: CALL_OW 69
18109: ST_TO_ADDR
// if not tmp then
18110: LD_VAR 0 2
18114: NOT
18115: IFFALSE 18119
// exit ;
18117: GO 18262
// for i := 1 to 2 do
18119: LD_ADDR_VAR 0 1
18123: PUSH
18124: DOUBLE
18125: LD_INT 1
18127: DEC
18128: ST_TO_ADDR
18129: LD_INT 2
18131: PUSH
18132: FOR_TO
18133: IFFALSE 18260
// begin uc_side := your_side ;
18135: LD_ADDR_OWVAR 20
18139: PUSH
18140: LD_OWVAR 2
18144: ST_TO_ADDR
// uc_nation := nation_american ;
18145: LD_ADDR_OWVAR 21
18149: PUSH
18150: LD_INT 1
18152: ST_TO_ADDR
// vc_chassis := us_morphling ;
18153: LD_ADDR_OWVAR 37
18157: PUSH
18158: LD_INT 5
18160: ST_TO_ADDR
// vc_engine := engine_siberite ;
18161: LD_ADDR_OWVAR 39
18165: PUSH
18166: LD_INT 3
18168: ST_TO_ADDR
// vc_control := control_computer ;
18169: LD_ADDR_OWVAR 38
18173: PUSH
18174: LD_INT 3
18176: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18177: LD_ADDR_OWVAR 40
18181: PUSH
18182: LD_INT 10
18184: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18185: LD_VAR 0 2
18189: PUSH
18190: LD_INT 1
18192: ARRAY
18193: PPUSH
18194: CALL_OW 310
18198: NOT
18199: IFFALSE 18246
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18201: CALL_OW 45
18205: PPUSH
18206: LD_VAR 0 2
18210: PUSH
18211: LD_INT 1
18213: ARRAY
18214: PPUSH
18215: CALL_OW 250
18219: PPUSH
18220: LD_VAR 0 2
18224: PUSH
18225: LD_INT 1
18227: ARRAY
18228: PPUSH
18229: CALL_OW 251
18233: PPUSH
18234: LD_INT 12
18236: PPUSH
18237: LD_INT 1
18239: PPUSH
18240: CALL_OW 50
18244: GO 18258
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18246: CALL_OW 45
18250: PPUSH
18251: LD_INT 1
18253: PPUSH
18254: CALL_OW 51
// end ;
18258: GO 18132
18260: POP
18261: POP
// end ;
18262: PPOPN 2
18264: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18265: LD_EXP 25
18269: PUSH
18270: LD_EXP 71
18274: AND
18275: IFFALSE 18497
18277: GO 18279
18279: DISABLE
18280: LD_INT 0
18282: PPUSH
18283: PPUSH
18284: PPUSH
18285: PPUSH
18286: PPUSH
18287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18288: LD_ADDR_VAR 0 6
18292: PUSH
18293: LD_INT 22
18295: PUSH
18296: LD_OWVAR 2
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 21
18307: PUSH
18308: LD_INT 1
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 3
18317: PUSH
18318: LD_INT 23
18320: PUSH
18321: LD_INT 0
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: LIST
18336: PPUSH
18337: CALL_OW 69
18341: ST_TO_ADDR
// if not tmp then
18342: LD_VAR 0 6
18346: NOT
18347: IFFALSE 18351
// exit ;
18349: GO 18497
// s1 := rand ( 1 , 4 ) ;
18351: LD_ADDR_VAR 0 2
18355: PUSH
18356: LD_INT 1
18358: PPUSH
18359: LD_INT 4
18361: PPUSH
18362: CALL_OW 12
18366: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18367: LD_ADDR_VAR 0 4
18371: PUSH
18372: LD_VAR 0 6
18376: PUSH
18377: LD_INT 1
18379: ARRAY
18380: PPUSH
18381: LD_VAR 0 2
18385: PPUSH
18386: CALL_OW 259
18390: ST_TO_ADDR
// if s1 = 1 then
18391: LD_VAR 0 2
18395: PUSH
18396: LD_INT 1
18398: EQUAL
18399: IFFALSE 18419
// s2 := rand ( 2 , 4 ) else
18401: LD_ADDR_VAR 0 3
18405: PUSH
18406: LD_INT 2
18408: PPUSH
18409: LD_INT 4
18411: PPUSH
18412: CALL_OW 12
18416: ST_TO_ADDR
18417: GO 18427
// s2 := 1 ;
18419: LD_ADDR_VAR 0 3
18423: PUSH
18424: LD_INT 1
18426: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18427: LD_ADDR_VAR 0 5
18431: PUSH
18432: LD_VAR 0 6
18436: PUSH
18437: LD_INT 1
18439: ARRAY
18440: PPUSH
18441: LD_VAR 0 3
18445: PPUSH
18446: CALL_OW 259
18450: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18451: LD_VAR 0 6
18455: PUSH
18456: LD_INT 1
18458: ARRAY
18459: PPUSH
18460: LD_VAR 0 2
18464: PPUSH
18465: LD_VAR 0 5
18469: PPUSH
18470: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18474: LD_VAR 0 6
18478: PUSH
18479: LD_INT 1
18481: ARRAY
18482: PPUSH
18483: LD_VAR 0 3
18487: PPUSH
18488: LD_VAR 0 4
18492: PPUSH
18493: CALL_OW 237
// end ;
18497: PPOPN 6
18499: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18500: LD_EXP 25
18504: PUSH
18505: LD_EXP 72
18509: AND
18510: IFFALSE 18589
18512: GO 18514
18514: DISABLE
18515: LD_INT 0
18517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18518: LD_ADDR_VAR 0 1
18522: PUSH
18523: LD_INT 22
18525: PUSH
18526: LD_OWVAR 2
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 30
18537: PUSH
18538: LD_INT 3
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PPUSH
18549: CALL_OW 69
18553: ST_TO_ADDR
// if not tmp then
18554: LD_VAR 0 1
18558: NOT
18559: IFFALSE 18563
// exit ;
18561: GO 18589
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18563: LD_VAR 0 1
18567: PUSH
18568: LD_INT 1
18570: PPUSH
18571: LD_VAR 0 1
18575: PPUSH
18576: CALL_OW 12
18580: ARRAY
18581: PPUSH
18582: LD_INT 1
18584: PPUSH
18585: CALL_OW 234
// end ;
18589: PPOPN 1
18591: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18592: LD_EXP 25
18596: PUSH
18597: LD_EXP 73
18601: AND
18602: IFFALSE 18714
18604: GO 18606
18606: DISABLE
18607: LD_INT 0
18609: PPUSH
18610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18611: LD_ADDR_VAR 0 2
18615: PUSH
18616: LD_INT 22
18618: PUSH
18619: LD_OWVAR 2
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 2
18630: PUSH
18631: LD_INT 30
18633: PUSH
18634: LD_INT 27
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 30
18643: PUSH
18644: LD_INT 26
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 30
18653: PUSH
18654: LD_INT 28
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: ST_TO_ADDR
// if not tmp then
18676: LD_VAR 0 2
18680: NOT
18681: IFFALSE 18685
// exit ;
18683: GO 18714
// for i in tmp do
18685: LD_ADDR_VAR 0 1
18689: PUSH
18690: LD_VAR 0 2
18694: PUSH
18695: FOR_IN
18696: IFFALSE 18712
// SetLives ( i , 1 ) ;
18698: LD_VAR 0 1
18702: PPUSH
18703: LD_INT 1
18705: PPUSH
18706: CALL_OW 234
18710: GO 18695
18712: POP
18713: POP
// end ;
18714: PPOPN 2
18716: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18717: LD_EXP 25
18721: PUSH
18722: LD_EXP 74
18726: AND
18727: IFFALSE 19014
18729: GO 18731
18731: DISABLE
18732: LD_INT 0
18734: PPUSH
18735: PPUSH
18736: PPUSH
// begin i := rand ( 1 , 7 ) ;
18737: LD_ADDR_VAR 0 1
18741: PUSH
18742: LD_INT 1
18744: PPUSH
18745: LD_INT 7
18747: PPUSH
18748: CALL_OW 12
18752: ST_TO_ADDR
// case i of 1 :
18753: LD_VAR 0 1
18757: PUSH
18758: LD_INT 1
18760: DOUBLE
18761: EQUAL
18762: IFTRUE 18766
18764: GO 18776
18766: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18767: LD_STRING earthquake(getX(game), 0, 32)
18769: PPUSH
18770: CALL_OW 559
18774: GO 19014
18776: LD_INT 2
18778: DOUBLE
18779: EQUAL
18780: IFTRUE 18784
18782: GO 18798
18784: POP
// begin ToLua ( displayStucuk(); ) ;
18785: LD_STRING displayStucuk();
18787: PPUSH
18788: CALL_OW 559
// ResetFog ;
18792: CALL_OW 335
// end ; 3 :
18796: GO 19014
18798: LD_INT 3
18800: DOUBLE
18801: EQUAL
18802: IFTRUE 18806
18804: GO 18910
18806: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18807: LD_ADDR_VAR 0 2
18811: PUSH
18812: LD_INT 22
18814: PUSH
18815: LD_OWVAR 2
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 25
18826: PUSH
18827: LD_INT 1
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PPUSH
18838: CALL_OW 69
18842: ST_TO_ADDR
// if not tmp then
18843: LD_VAR 0 2
18847: NOT
18848: IFFALSE 18852
// exit ;
18850: GO 19014
// un := tmp [ rand ( 1 , tmp ) ] ;
18852: LD_ADDR_VAR 0 3
18856: PUSH
18857: LD_VAR 0 2
18861: PUSH
18862: LD_INT 1
18864: PPUSH
18865: LD_VAR 0 2
18869: PPUSH
18870: CALL_OW 12
18874: ARRAY
18875: ST_TO_ADDR
// if Crawls ( un ) then
18876: LD_VAR 0 3
18880: PPUSH
18881: CALL_OW 318
18885: IFFALSE 18896
// ComWalk ( un ) ;
18887: LD_VAR 0 3
18891: PPUSH
18892: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18896: LD_VAR 0 3
18900: PPUSH
18901: LD_INT 8
18903: PPUSH
18904: CALL_OW 336
// end ; 4 :
18908: GO 19014
18910: LD_INT 4
18912: DOUBLE
18913: EQUAL
18914: IFTRUE 18918
18916: GO 18992
18918: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18919: LD_ADDR_VAR 0 2
18923: PUSH
18924: LD_INT 22
18926: PUSH
18927: LD_OWVAR 2
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 30
18938: PUSH
18939: LD_INT 29
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PPUSH
18950: CALL_OW 69
18954: ST_TO_ADDR
// if not tmp then
18955: LD_VAR 0 2
18959: NOT
18960: IFFALSE 18964
// exit ;
18962: GO 19014
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18964: LD_VAR 0 2
18968: PUSH
18969: LD_INT 1
18971: ARRAY
18972: PPUSH
18973: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18977: LD_VAR 0 2
18981: PUSH
18982: LD_INT 1
18984: ARRAY
18985: PPUSH
18986: CALL_OW 65
// end ; 5 .. 7 :
18990: GO 19014
18992: LD_INT 5
18994: DOUBLE
18995: GREATEREQUAL
18996: IFFALSE 19004
18998: LD_INT 7
19000: DOUBLE
19001: LESSEQUAL
19002: IFTRUE 19006
19004: GO 19013
19006: POP
// StreamSibBomb ; end ;
19007: CALL 15251 0 0
19011: GO 19014
19013: POP
// end ;
19014: PPOPN 3
19016: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19017: LD_EXP 25
19021: PUSH
19022: LD_EXP 75
19026: AND
19027: IFFALSE 19183
19029: GO 19031
19031: DISABLE
19032: LD_INT 0
19034: PPUSH
19035: PPUSH
19036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19037: LD_ADDR_VAR 0 2
19041: PUSH
19042: LD_INT 81
19044: PUSH
19045: LD_OWVAR 2
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 2
19056: PUSH
19057: LD_INT 21
19059: PUSH
19060: LD_INT 1
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 21
19069: PUSH
19070: LD_INT 2
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: LIST
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PPUSH
19086: CALL_OW 69
19090: ST_TO_ADDR
// if not tmp then
19091: LD_VAR 0 2
19095: NOT
19096: IFFALSE 19100
// exit ;
19098: GO 19183
// p := 0 ;
19100: LD_ADDR_VAR 0 3
19104: PUSH
19105: LD_INT 0
19107: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19108: LD_INT 35
19110: PPUSH
19111: CALL_OW 67
// p := p + 1 ;
19115: LD_ADDR_VAR 0 3
19119: PUSH
19120: LD_VAR 0 3
19124: PUSH
19125: LD_INT 1
19127: PLUS
19128: ST_TO_ADDR
// for i in tmp do
19129: LD_ADDR_VAR 0 1
19133: PUSH
19134: LD_VAR 0 2
19138: PUSH
19139: FOR_IN
19140: IFFALSE 19171
// if GetLives ( i ) < 1000 then
19142: LD_VAR 0 1
19146: PPUSH
19147: CALL_OW 256
19151: PUSH
19152: LD_INT 1000
19154: LESS
19155: IFFALSE 19169
// SetLives ( i , 1000 ) ;
19157: LD_VAR 0 1
19161: PPUSH
19162: LD_INT 1000
19164: PPUSH
19165: CALL_OW 234
19169: GO 19139
19171: POP
19172: POP
// until p > 20 ;
19173: LD_VAR 0 3
19177: PUSH
19178: LD_INT 20
19180: GREATER
19181: IFFALSE 19108
// end ;
19183: PPOPN 3
19185: END
// every 0 0$1 trigger StreamModeActive and sTime do
19186: LD_EXP 25
19190: PUSH
19191: LD_EXP 76
19195: AND
19196: IFFALSE 19231
19198: GO 19200
19200: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19201: LD_INT 28
19203: PPUSH
19204: LD_OWVAR 2
19208: PPUSH
19209: LD_INT 2
19211: PPUSH
19212: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19216: LD_INT 30
19218: PPUSH
19219: LD_OWVAR 2
19223: PPUSH
19224: LD_INT 2
19226: PPUSH
19227: CALL_OW 322
// end ;
19231: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19232: LD_EXP 25
19236: PUSH
19237: LD_EXP 77
19241: AND
19242: IFFALSE 19363
19244: GO 19246
19246: DISABLE
19247: LD_INT 0
19249: PPUSH
19250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19251: LD_ADDR_VAR 0 2
19255: PUSH
19256: LD_INT 22
19258: PUSH
19259: LD_OWVAR 2
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 21
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 3
19280: PUSH
19281: LD_INT 23
19283: PUSH
19284: LD_INT 0
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: LIST
19299: PPUSH
19300: CALL_OW 69
19304: ST_TO_ADDR
// if not tmp then
19305: LD_VAR 0 2
19309: NOT
19310: IFFALSE 19314
// exit ;
19312: GO 19363
// for i in tmp do
19314: LD_ADDR_VAR 0 1
19318: PUSH
19319: LD_VAR 0 2
19323: PUSH
19324: FOR_IN
19325: IFFALSE 19361
// begin if Crawls ( i ) then
19327: LD_VAR 0 1
19331: PPUSH
19332: CALL_OW 318
19336: IFFALSE 19347
// ComWalk ( i ) ;
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 138
// SetClass ( i , 2 ) ;
19347: LD_VAR 0 1
19351: PPUSH
19352: LD_INT 2
19354: PPUSH
19355: CALL_OW 336
// end ;
19359: GO 19324
19361: POP
19362: POP
// end ;
19363: PPOPN 2
19365: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19366: LD_EXP 25
19370: PUSH
19371: LD_EXP 78
19375: AND
19376: IFFALSE 19664
19378: GO 19380
19380: DISABLE
19381: LD_INT 0
19383: PPUSH
19384: PPUSH
19385: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19386: LD_OWVAR 2
19390: PPUSH
19391: LD_INT 9
19393: PPUSH
19394: LD_INT 1
19396: PPUSH
19397: LD_INT 1
19399: PPUSH
19400: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19404: LD_INT 9
19406: PPUSH
19407: LD_OWVAR 2
19411: PPUSH
19412: CALL_OW 343
// uc_side := 9 ;
19416: LD_ADDR_OWVAR 20
19420: PUSH
19421: LD_INT 9
19423: ST_TO_ADDR
// uc_nation := 2 ;
19424: LD_ADDR_OWVAR 21
19428: PUSH
19429: LD_INT 2
19431: ST_TO_ADDR
// hc_name := Dark Warrior ;
19432: LD_ADDR_OWVAR 26
19436: PUSH
19437: LD_STRING Dark Warrior
19439: ST_TO_ADDR
// hc_gallery :=  ;
19440: LD_ADDR_OWVAR 33
19444: PUSH
19445: LD_STRING 
19447: ST_TO_ADDR
// hc_noskilllimit := true ;
19448: LD_ADDR_OWVAR 76
19452: PUSH
19453: LD_INT 1
19455: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19456: LD_ADDR_OWVAR 31
19460: PUSH
19461: LD_INT 30
19463: PUSH
19464: LD_INT 30
19466: PUSH
19467: LD_INT 30
19469: PUSH
19470: LD_INT 30
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: ST_TO_ADDR
// un := CreateHuman ;
19479: LD_ADDR_VAR 0 3
19483: PUSH
19484: CALL_OW 44
19488: ST_TO_ADDR
// hc_noskilllimit := false ;
19489: LD_ADDR_OWVAR 76
19493: PUSH
19494: LD_INT 0
19496: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19497: LD_VAR 0 3
19501: PPUSH
19502: LD_INT 1
19504: PPUSH
19505: CALL_OW 51
// ToLua ( playRanger() ) ;
19509: LD_STRING playRanger()
19511: PPUSH
19512: CALL_OW 559
// p := 0 ;
19516: LD_ADDR_VAR 0 2
19520: PUSH
19521: LD_INT 0
19523: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19524: LD_INT 35
19526: PPUSH
19527: CALL_OW 67
// p := p + 1 ;
19531: LD_ADDR_VAR 0 2
19535: PUSH
19536: LD_VAR 0 2
19540: PUSH
19541: LD_INT 1
19543: PLUS
19544: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19545: LD_VAR 0 3
19549: PPUSH
19550: CALL_OW 256
19554: PUSH
19555: LD_INT 1000
19557: LESS
19558: IFFALSE 19572
// SetLives ( un , 1000 ) ;
19560: LD_VAR 0 3
19564: PPUSH
19565: LD_INT 1000
19567: PPUSH
19568: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19572: LD_VAR 0 3
19576: PPUSH
19577: LD_INT 81
19579: PUSH
19580: LD_OWVAR 2
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 91
19591: PUSH
19592: LD_VAR 0 3
19596: PUSH
19597: LD_INT 30
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PPUSH
19609: CALL_OW 69
19613: PPUSH
19614: LD_VAR 0 3
19618: PPUSH
19619: CALL_OW 74
19623: PPUSH
19624: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19628: LD_VAR 0 2
19632: PUSH
19633: LD_INT 80
19635: GREATER
19636: PUSH
19637: LD_VAR 0 3
19641: PPUSH
19642: CALL_OW 301
19646: OR
19647: IFFALSE 19524
// if un then
19649: LD_VAR 0 3
19653: IFFALSE 19664
// RemoveUnit ( un ) ;
19655: LD_VAR 0 3
19659: PPUSH
19660: CALL_OW 64
// end ;
19664: PPOPN 3
19666: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19667: LD_EXP 79
19671: IFFALSE 19787
19673: GO 19675
19675: DISABLE
19676: LD_INT 0
19678: PPUSH
19679: PPUSH
19680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19681: LD_ADDR_VAR 0 2
19685: PUSH
19686: LD_INT 81
19688: PUSH
19689: LD_OWVAR 2
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 21
19700: PUSH
19701: LD_INT 1
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PPUSH
19712: CALL_OW 69
19716: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19717: LD_STRING playComputer()
19719: PPUSH
19720: CALL_OW 559
// if not tmp then
19724: LD_VAR 0 2
19728: NOT
19729: IFFALSE 19733
// exit ;
19731: GO 19787
// for i in tmp do
19733: LD_ADDR_VAR 0 1
19737: PUSH
19738: LD_VAR 0 2
19742: PUSH
19743: FOR_IN
19744: IFFALSE 19785
// for j := 1 to 4 do
19746: LD_ADDR_VAR 0 3
19750: PUSH
19751: DOUBLE
19752: LD_INT 1
19754: DEC
19755: ST_TO_ADDR
19756: LD_INT 4
19758: PUSH
19759: FOR_TO
19760: IFFALSE 19781
// SetSkill ( i , j , 10 ) ;
19762: LD_VAR 0 1
19766: PPUSH
19767: LD_VAR 0 3
19771: PPUSH
19772: LD_INT 10
19774: PPUSH
19775: CALL_OW 237
19779: GO 19759
19781: POP
19782: POP
19783: GO 19743
19785: POP
19786: POP
// end ;
19787: PPOPN 3
19789: END
// every 0 0$1 trigger s30 do var i , tmp ;
19790: LD_EXP 80
19794: IFFALSE 19863
19796: GO 19798
19798: DISABLE
19799: LD_INT 0
19801: PPUSH
19802: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19803: LD_ADDR_VAR 0 2
19807: PUSH
19808: LD_INT 22
19810: PUSH
19811: LD_OWVAR 2
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PPUSH
19820: CALL_OW 69
19824: ST_TO_ADDR
// if not tmp then
19825: LD_VAR 0 2
19829: NOT
19830: IFFALSE 19834
// exit ;
19832: GO 19863
// for i in tmp do
19834: LD_ADDR_VAR 0 1
19838: PUSH
19839: LD_VAR 0 2
19843: PUSH
19844: FOR_IN
19845: IFFALSE 19861
// SetLives ( i , 300 ) ;
19847: LD_VAR 0 1
19851: PPUSH
19852: LD_INT 300
19854: PPUSH
19855: CALL_OW 234
19859: GO 19844
19861: POP
19862: POP
// end ;
19863: PPOPN 2
19865: END
// every 0 0$1 trigger s60 do var i , tmp ;
19866: LD_EXP 81
19870: IFFALSE 19939
19872: GO 19874
19874: DISABLE
19875: LD_INT 0
19877: PPUSH
19878: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19879: LD_ADDR_VAR 0 2
19883: PUSH
19884: LD_INT 22
19886: PUSH
19887: LD_OWVAR 2
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PPUSH
19896: CALL_OW 69
19900: ST_TO_ADDR
// if not tmp then
19901: LD_VAR 0 2
19905: NOT
19906: IFFALSE 19910
// exit ;
19908: GO 19939
// for i in tmp do
19910: LD_ADDR_VAR 0 1
19914: PUSH
19915: LD_VAR 0 2
19919: PUSH
19920: FOR_IN
19921: IFFALSE 19937
// SetLives ( i , 600 ) ;
19923: LD_VAR 0 1
19927: PPUSH
19928: LD_INT 600
19930: PPUSH
19931: CALL_OW 234
19935: GO 19920
19937: POP
19938: POP
// end ;
19939: PPOPN 2
19941: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19942: LD_INT 0
19944: PPUSH
// case cmd of 301 :
19945: LD_VAR 0 1
19949: PUSH
19950: LD_INT 301
19952: DOUBLE
19953: EQUAL
19954: IFTRUE 19958
19956: GO 19990
19958: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19959: LD_VAR 0 6
19963: PPUSH
19964: LD_VAR 0 7
19968: PPUSH
19969: LD_VAR 0 8
19973: PPUSH
19974: LD_VAR 0 4
19978: PPUSH
19979: LD_VAR 0 5
19983: PPUSH
19984: CALL 21199 0 5
19988: GO 20111
19990: LD_INT 302
19992: DOUBLE
19993: EQUAL
19994: IFTRUE 19998
19996: GO 20035
19998: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19999: LD_VAR 0 6
20003: PPUSH
20004: LD_VAR 0 7
20008: PPUSH
20009: LD_VAR 0 8
20013: PPUSH
20014: LD_VAR 0 9
20018: PPUSH
20019: LD_VAR 0 4
20023: PPUSH
20024: LD_VAR 0 5
20028: PPUSH
20029: CALL 21290 0 6
20033: GO 20111
20035: LD_INT 303
20037: DOUBLE
20038: EQUAL
20039: IFTRUE 20043
20041: GO 20080
20043: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20044: LD_VAR 0 6
20048: PPUSH
20049: LD_VAR 0 7
20053: PPUSH
20054: LD_VAR 0 8
20058: PPUSH
20059: LD_VAR 0 9
20063: PPUSH
20064: LD_VAR 0 4
20068: PPUSH
20069: LD_VAR 0 5
20073: PPUSH
20074: CALL 20116 0 6
20078: GO 20111
20080: LD_INT 304
20082: DOUBLE
20083: EQUAL
20084: IFTRUE 20088
20086: GO 20110
20088: POP
// hHackTeleport ( unit , x , y ) ; end ;
20089: LD_VAR 0 2
20093: PPUSH
20094: LD_VAR 0 4
20098: PPUSH
20099: LD_VAR 0 5
20103: PPUSH
20104: CALL 21883 0 3
20108: GO 20111
20110: POP
// end ;
20111: LD_VAR 0 12
20115: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20116: LD_INT 0
20118: PPUSH
20119: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20120: LD_VAR 0 1
20124: PUSH
20125: LD_INT 1
20127: LESS
20128: PUSH
20129: LD_VAR 0 1
20133: PUSH
20134: LD_INT 3
20136: GREATER
20137: OR
20138: PUSH
20139: LD_VAR 0 5
20143: PPUSH
20144: LD_VAR 0 6
20148: PPUSH
20149: CALL_OW 428
20153: OR
20154: IFFALSE 20158
// exit ;
20156: GO 20886
// uc_side := your_side ;
20158: LD_ADDR_OWVAR 20
20162: PUSH
20163: LD_OWVAR 2
20167: ST_TO_ADDR
// uc_nation := nation ;
20168: LD_ADDR_OWVAR 21
20172: PUSH
20173: LD_VAR 0 1
20177: ST_TO_ADDR
// bc_level = 1 ;
20178: LD_ADDR_OWVAR 43
20182: PUSH
20183: LD_INT 1
20185: ST_TO_ADDR
// case btype of 1 :
20186: LD_VAR 0 2
20190: PUSH
20191: LD_INT 1
20193: DOUBLE
20194: EQUAL
20195: IFTRUE 20199
20197: GO 20210
20199: POP
// bc_type := b_depot ; 2 :
20200: LD_ADDR_OWVAR 42
20204: PUSH
20205: LD_INT 0
20207: ST_TO_ADDR
20208: GO 20830
20210: LD_INT 2
20212: DOUBLE
20213: EQUAL
20214: IFTRUE 20218
20216: GO 20229
20218: POP
// bc_type := b_warehouse ; 3 :
20219: LD_ADDR_OWVAR 42
20223: PUSH
20224: LD_INT 1
20226: ST_TO_ADDR
20227: GO 20830
20229: LD_INT 3
20231: DOUBLE
20232: EQUAL
20233: IFTRUE 20237
20235: GO 20248
20237: POP
// bc_type := b_lab ; 4 .. 9 :
20238: LD_ADDR_OWVAR 42
20242: PUSH
20243: LD_INT 6
20245: ST_TO_ADDR
20246: GO 20830
20248: LD_INT 4
20250: DOUBLE
20251: GREATEREQUAL
20252: IFFALSE 20260
20254: LD_INT 9
20256: DOUBLE
20257: LESSEQUAL
20258: IFTRUE 20262
20260: GO 20322
20262: POP
// begin bc_type := b_lab_half ;
20263: LD_ADDR_OWVAR 42
20267: PUSH
20268: LD_INT 7
20270: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20271: LD_ADDR_OWVAR 44
20275: PUSH
20276: LD_INT 10
20278: PUSH
20279: LD_INT 11
20281: PUSH
20282: LD_INT 12
20284: PUSH
20285: LD_INT 15
20287: PUSH
20288: LD_INT 14
20290: PUSH
20291: LD_INT 13
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: PUSH
20302: LD_VAR 0 2
20306: PUSH
20307: LD_INT 3
20309: MINUS
20310: ARRAY
20311: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20312: LD_ADDR_OWVAR 45
20316: PUSH
20317: LD_INT 9
20319: ST_TO_ADDR
// end ; 10 .. 13 :
20320: GO 20830
20322: LD_INT 10
20324: DOUBLE
20325: GREATEREQUAL
20326: IFFALSE 20334
20328: LD_INT 13
20330: DOUBLE
20331: LESSEQUAL
20332: IFTRUE 20336
20334: GO 20413
20336: POP
// begin bc_type := b_lab_full ;
20337: LD_ADDR_OWVAR 42
20341: PUSH
20342: LD_INT 8
20344: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20345: LD_ADDR_OWVAR 44
20349: PUSH
20350: LD_INT 10
20352: PUSH
20353: LD_INT 12
20355: PUSH
20356: LD_INT 14
20358: PUSH
20359: LD_INT 13
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: PUSH
20368: LD_VAR 0 2
20372: PUSH
20373: LD_INT 9
20375: MINUS
20376: ARRAY
20377: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20378: LD_ADDR_OWVAR 45
20382: PUSH
20383: LD_INT 11
20385: PUSH
20386: LD_INT 15
20388: PUSH
20389: LD_INT 12
20391: PUSH
20392: LD_INT 15
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: PUSH
20401: LD_VAR 0 2
20405: PUSH
20406: LD_INT 9
20408: MINUS
20409: ARRAY
20410: ST_TO_ADDR
// end ; 14 :
20411: GO 20830
20413: LD_INT 14
20415: DOUBLE
20416: EQUAL
20417: IFTRUE 20421
20419: GO 20432
20421: POP
// bc_type := b_workshop ; 15 :
20422: LD_ADDR_OWVAR 42
20426: PUSH
20427: LD_INT 2
20429: ST_TO_ADDR
20430: GO 20830
20432: LD_INT 15
20434: DOUBLE
20435: EQUAL
20436: IFTRUE 20440
20438: GO 20451
20440: POP
// bc_type := b_factory ; 16 :
20441: LD_ADDR_OWVAR 42
20445: PUSH
20446: LD_INT 3
20448: ST_TO_ADDR
20449: GO 20830
20451: LD_INT 16
20453: DOUBLE
20454: EQUAL
20455: IFTRUE 20459
20457: GO 20470
20459: POP
// bc_type := b_ext_gun ; 17 :
20460: LD_ADDR_OWVAR 42
20464: PUSH
20465: LD_INT 17
20467: ST_TO_ADDR
20468: GO 20830
20470: LD_INT 17
20472: DOUBLE
20473: EQUAL
20474: IFTRUE 20478
20476: GO 20506
20478: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20479: LD_ADDR_OWVAR 42
20483: PUSH
20484: LD_INT 19
20486: PUSH
20487: LD_INT 23
20489: PUSH
20490: LD_INT 19
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: LIST
20497: PUSH
20498: LD_VAR 0 1
20502: ARRAY
20503: ST_TO_ADDR
20504: GO 20830
20506: LD_INT 18
20508: DOUBLE
20509: EQUAL
20510: IFTRUE 20514
20512: GO 20525
20514: POP
// bc_type := b_ext_radar ; 19 :
20515: LD_ADDR_OWVAR 42
20519: PUSH
20520: LD_INT 20
20522: ST_TO_ADDR
20523: GO 20830
20525: LD_INT 19
20527: DOUBLE
20528: EQUAL
20529: IFTRUE 20533
20531: GO 20544
20533: POP
// bc_type := b_ext_radio ; 20 :
20534: LD_ADDR_OWVAR 42
20538: PUSH
20539: LD_INT 22
20541: ST_TO_ADDR
20542: GO 20830
20544: LD_INT 20
20546: DOUBLE
20547: EQUAL
20548: IFTRUE 20552
20550: GO 20563
20552: POP
// bc_type := b_ext_siberium ; 21 :
20553: LD_ADDR_OWVAR 42
20557: PUSH
20558: LD_INT 21
20560: ST_TO_ADDR
20561: GO 20830
20563: LD_INT 21
20565: DOUBLE
20566: EQUAL
20567: IFTRUE 20571
20569: GO 20582
20571: POP
// bc_type := b_ext_computer ; 22 :
20572: LD_ADDR_OWVAR 42
20576: PUSH
20577: LD_INT 24
20579: ST_TO_ADDR
20580: GO 20830
20582: LD_INT 22
20584: DOUBLE
20585: EQUAL
20586: IFTRUE 20590
20588: GO 20601
20590: POP
// bc_type := b_ext_track ; 23 :
20591: LD_ADDR_OWVAR 42
20595: PUSH
20596: LD_INT 16
20598: ST_TO_ADDR
20599: GO 20830
20601: LD_INT 23
20603: DOUBLE
20604: EQUAL
20605: IFTRUE 20609
20607: GO 20620
20609: POP
// bc_type := b_ext_laser ; 24 :
20610: LD_ADDR_OWVAR 42
20614: PUSH
20615: LD_INT 25
20617: ST_TO_ADDR
20618: GO 20830
20620: LD_INT 24
20622: DOUBLE
20623: EQUAL
20624: IFTRUE 20628
20626: GO 20639
20628: POP
// bc_type := b_control_tower ; 25 :
20629: LD_ADDR_OWVAR 42
20633: PUSH
20634: LD_INT 36
20636: ST_TO_ADDR
20637: GO 20830
20639: LD_INT 25
20641: DOUBLE
20642: EQUAL
20643: IFTRUE 20647
20645: GO 20658
20647: POP
// bc_type := b_breastwork ; 26 :
20648: LD_ADDR_OWVAR 42
20652: PUSH
20653: LD_INT 31
20655: ST_TO_ADDR
20656: GO 20830
20658: LD_INT 26
20660: DOUBLE
20661: EQUAL
20662: IFTRUE 20666
20664: GO 20677
20666: POP
// bc_type := b_bunker ; 27 :
20667: LD_ADDR_OWVAR 42
20671: PUSH
20672: LD_INT 32
20674: ST_TO_ADDR
20675: GO 20830
20677: LD_INT 27
20679: DOUBLE
20680: EQUAL
20681: IFTRUE 20685
20683: GO 20696
20685: POP
// bc_type := b_turret ; 28 :
20686: LD_ADDR_OWVAR 42
20690: PUSH
20691: LD_INT 33
20693: ST_TO_ADDR
20694: GO 20830
20696: LD_INT 28
20698: DOUBLE
20699: EQUAL
20700: IFTRUE 20704
20702: GO 20715
20704: POP
// bc_type := b_armoury ; 29 :
20705: LD_ADDR_OWVAR 42
20709: PUSH
20710: LD_INT 4
20712: ST_TO_ADDR
20713: GO 20830
20715: LD_INT 29
20717: DOUBLE
20718: EQUAL
20719: IFTRUE 20723
20721: GO 20734
20723: POP
// bc_type := b_barracks ; 30 :
20724: LD_ADDR_OWVAR 42
20728: PUSH
20729: LD_INT 5
20731: ST_TO_ADDR
20732: GO 20830
20734: LD_INT 30
20736: DOUBLE
20737: EQUAL
20738: IFTRUE 20742
20740: GO 20753
20742: POP
// bc_type := b_solar_power ; 31 :
20743: LD_ADDR_OWVAR 42
20747: PUSH
20748: LD_INT 27
20750: ST_TO_ADDR
20751: GO 20830
20753: LD_INT 31
20755: DOUBLE
20756: EQUAL
20757: IFTRUE 20761
20759: GO 20772
20761: POP
// bc_type := b_oil_power ; 32 :
20762: LD_ADDR_OWVAR 42
20766: PUSH
20767: LD_INT 26
20769: ST_TO_ADDR
20770: GO 20830
20772: LD_INT 32
20774: DOUBLE
20775: EQUAL
20776: IFTRUE 20780
20778: GO 20791
20780: POP
// bc_type := b_siberite_power ; 33 :
20781: LD_ADDR_OWVAR 42
20785: PUSH
20786: LD_INT 28
20788: ST_TO_ADDR
20789: GO 20830
20791: LD_INT 33
20793: DOUBLE
20794: EQUAL
20795: IFTRUE 20799
20797: GO 20810
20799: POP
// bc_type := b_oil_mine ; 34 :
20800: LD_ADDR_OWVAR 42
20804: PUSH
20805: LD_INT 29
20807: ST_TO_ADDR
20808: GO 20830
20810: LD_INT 34
20812: DOUBLE
20813: EQUAL
20814: IFTRUE 20818
20816: GO 20829
20818: POP
// bc_type := b_siberite_mine ; end ;
20819: LD_ADDR_OWVAR 42
20823: PUSH
20824: LD_INT 30
20826: ST_TO_ADDR
20827: GO 20830
20829: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20830: LD_ADDR_VAR 0 8
20834: PUSH
20835: LD_VAR 0 5
20839: PPUSH
20840: LD_VAR 0 6
20844: PPUSH
20845: LD_VAR 0 3
20849: PPUSH
20850: CALL_OW 47
20854: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20855: LD_OWVAR 42
20859: PUSH
20860: LD_INT 32
20862: PUSH
20863: LD_INT 33
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: IN
20870: IFFALSE 20886
// PlaceWeaponTurret ( b , weapon ) ;
20872: LD_VAR 0 8
20876: PPUSH
20877: LD_VAR 0 4
20881: PPUSH
20882: CALL_OW 431
// end ;
20886: LD_VAR 0 7
20890: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20891: LD_INT 0
20893: PPUSH
20894: PPUSH
20895: PPUSH
20896: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20897: LD_ADDR_VAR 0 4
20901: PUSH
20902: LD_INT 22
20904: PUSH
20905: LD_OWVAR 2
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 2
20916: PUSH
20917: LD_INT 30
20919: PUSH
20920: LD_INT 0
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 30
20929: PUSH
20930: LD_INT 1
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PPUSH
20946: CALL_OW 69
20950: ST_TO_ADDR
// if not tmp then
20951: LD_VAR 0 4
20955: NOT
20956: IFFALSE 20960
// exit ;
20958: GO 21019
// for i in tmp do
20960: LD_ADDR_VAR 0 2
20964: PUSH
20965: LD_VAR 0 4
20969: PUSH
20970: FOR_IN
20971: IFFALSE 21017
// for j = 1 to 3 do
20973: LD_ADDR_VAR 0 3
20977: PUSH
20978: DOUBLE
20979: LD_INT 1
20981: DEC
20982: ST_TO_ADDR
20983: LD_INT 3
20985: PUSH
20986: FOR_TO
20987: IFFALSE 21013
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20989: LD_VAR 0 2
20993: PPUSH
20994: CALL_OW 274
20998: PPUSH
20999: LD_VAR 0 3
21003: PPUSH
21004: LD_INT 99999
21006: PPUSH
21007: CALL_OW 277
21011: GO 20986
21013: POP
21014: POP
21015: GO 20970
21017: POP
21018: POP
// end ;
21019: LD_VAR 0 1
21023: RET
// export function hHackSetLevel10 ; var i , j ; begin
21024: LD_INT 0
21026: PPUSH
21027: PPUSH
21028: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21029: LD_ADDR_VAR 0 2
21033: PUSH
21034: LD_INT 21
21036: PUSH
21037: LD_INT 1
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PPUSH
21044: CALL_OW 69
21048: PUSH
21049: FOR_IN
21050: IFFALSE 21102
// if IsSelected ( i ) then
21052: LD_VAR 0 2
21056: PPUSH
21057: CALL_OW 306
21061: IFFALSE 21100
// begin for j := 1 to 4 do
21063: LD_ADDR_VAR 0 3
21067: PUSH
21068: DOUBLE
21069: LD_INT 1
21071: DEC
21072: ST_TO_ADDR
21073: LD_INT 4
21075: PUSH
21076: FOR_TO
21077: IFFALSE 21098
// SetSkill ( i , j , 10 ) ;
21079: LD_VAR 0 2
21083: PPUSH
21084: LD_VAR 0 3
21088: PPUSH
21089: LD_INT 10
21091: PPUSH
21092: CALL_OW 237
21096: GO 21076
21098: POP
21099: POP
// end ;
21100: GO 21049
21102: POP
21103: POP
// end ;
21104: LD_VAR 0 1
21108: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21109: LD_INT 0
21111: PPUSH
21112: PPUSH
21113: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21114: LD_ADDR_VAR 0 2
21118: PUSH
21119: LD_INT 22
21121: PUSH
21122: LD_OWVAR 2
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 21
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PPUSH
21145: CALL_OW 69
21149: PUSH
21150: FOR_IN
21151: IFFALSE 21192
// begin for j := 1 to 4 do
21153: LD_ADDR_VAR 0 3
21157: PUSH
21158: DOUBLE
21159: LD_INT 1
21161: DEC
21162: ST_TO_ADDR
21163: LD_INT 4
21165: PUSH
21166: FOR_TO
21167: IFFALSE 21188
// SetSkill ( i , j , 10 ) ;
21169: LD_VAR 0 2
21173: PPUSH
21174: LD_VAR 0 3
21178: PPUSH
21179: LD_INT 10
21181: PPUSH
21182: CALL_OW 237
21186: GO 21166
21188: POP
21189: POP
// end ;
21190: GO 21150
21192: POP
21193: POP
// end ;
21194: LD_VAR 0 1
21198: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21199: LD_INT 0
21201: PPUSH
// uc_side := your_side ;
21202: LD_ADDR_OWVAR 20
21206: PUSH
21207: LD_OWVAR 2
21211: ST_TO_ADDR
// uc_nation := nation ;
21212: LD_ADDR_OWVAR 21
21216: PUSH
21217: LD_VAR 0 1
21221: ST_TO_ADDR
// InitHc ;
21222: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21226: LD_INT 0
21228: PPUSH
21229: LD_VAR 0 2
21233: PPUSH
21234: LD_VAR 0 3
21238: PPUSH
21239: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21243: LD_VAR 0 4
21247: PPUSH
21248: LD_VAR 0 5
21252: PPUSH
21253: CALL_OW 428
21257: PUSH
21258: LD_INT 0
21260: EQUAL
21261: IFFALSE 21285
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21263: CALL_OW 44
21267: PPUSH
21268: LD_VAR 0 4
21272: PPUSH
21273: LD_VAR 0 5
21277: PPUSH
21278: LD_INT 1
21280: PPUSH
21281: CALL_OW 48
// end ;
21285: LD_VAR 0 6
21289: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21290: LD_INT 0
21292: PPUSH
21293: PPUSH
// uc_side := your_side ;
21294: LD_ADDR_OWVAR 20
21298: PUSH
21299: LD_OWVAR 2
21303: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21304: LD_VAR 0 1
21308: PUSH
21309: LD_INT 1
21311: PUSH
21312: LD_INT 2
21314: PUSH
21315: LD_INT 3
21317: PUSH
21318: LD_INT 4
21320: PUSH
21321: LD_INT 5
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: IN
21331: IFFALSE 21343
// uc_nation := nation_american else
21333: LD_ADDR_OWVAR 21
21337: PUSH
21338: LD_INT 1
21340: ST_TO_ADDR
21341: GO 21386
// if chassis in [ 11 , 12 , 13 , 14 ] then
21343: LD_VAR 0 1
21347: PUSH
21348: LD_INT 11
21350: PUSH
21351: LD_INT 12
21353: PUSH
21354: LD_INT 13
21356: PUSH
21357: LD_INT 14
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: IN
21366: IFFALSE 21378
// uc_nation := nation_arabian else
21368: LD_ADDR_OWVAR 21
21372: PUSH
21373: LD_INT 2
21375: ST_TO_ADDR
21376: GO 21386
// uc_nation := nation_russian ;
21378: LD_ADDR_OWVAR 21
21382: PUSH
21383: LD_INT 3
21385: ST_TO_ADDR
// vc_chassis := chassis ;
21386: LD_ADDR_OWVAR 37
21390: PUSH
21391: LD_VAR 0 1
21395: ST_TO_ADDR
// vc_engine := engine ;
21396: LD_ADDR_OWVAR 39
21400: PUSH
21401: LD_VAR 0 2
21405: ST_TO_ADDR
// vc_control := control ;
21406: LD_ADDR_OWVAR 38
21410: PUSH
21411: LD_VAR 0 3
21415: ST_TO_ADDR
// vc_weapon := weapon ;
21416: LD_ADDR_OWVAR 40
21420: PUSH
21421: LD_VAR 0 4
21425: ST_TO_ADDR
// un := CreateVehicle ;
21426: LD_ADDR_VAR 0 8
21430: PUSH
21431: CALL_OW 45
21435: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21436: LD_VAR 0 8
21440: PPUSH
21441: LD_INT 0
21443: PPUSH
21444: LD_INT 5
21446: PPUSH
21447: CALL_OW 12
21451: PPUSH
21452: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21456: LD_VAR 0 8
21460: PPUSH
21461: LD_VAR 0 5
21465: PPUSH
21466: LD_VAR 0 6
21470: PPUSH
21471: LD_INT 1
21473: PPUSH
21474: CALL_OW 48
// end ;
21478: LD_VAR 0 7
21482: RET
// export hInvincible ; every 1 do
21483: GO 21485
21485: DISABLE
// hInvincible := [ ] ;
21486: LD_ADDR_EXP 82
21490: PUSH
21491: EMPTY
21492: ST_TO_ADDR
21493: END
// every 10 do var i ;
21494: GO 21496
21496: DISABLE
21497: LD_INT 0
21499: PPUSH
// begin enable ;
21500: ENABLE
// if not hInvincible then
21501: LD_EXP 82
21505: NOT
21506: IFFALSE 21510
// exit ;
21508: GO 21554
// for i in hInvincible do
21510: LD_ADDR_VAR 0 1
21514: PUSH
21515: LD_EXP 82
21519: PUSH
21520: FOR_IN
21521: IFFALSE 21552
// if GetLives ( i ) < 1000 then
21523: LD_VAR 0 1
21527: PPUSH
21528: CALL_OW 256
21532: PUSH
21533: LD_INT 1000
21535: LESS
21536: IFFALSE 21550
// SetLives ( i , 1000 ) ;
21538: LD_VAR 0 1
21542: PPUSH
21543: LD_INT 1000
21545: PPUSH
21546: CALL_OW 234
21550: GO 21520
21552: POP
21553: POP
// end ;
21554: PPOPN 1
21556: END
// export function hHackInvincible ; var i ; begin
21557: LD_INT 0
21559: PPUSH
21560: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21561: LD_ADDR_VAR 0 2
21565: PUSH
21566: LD_INT 2
21568: PUSH
21569: LD_INT 21
21571: PUSH
21572: LD_INT 1
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 21
21581: PUSH
21582: LD_INT 2
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: LIST
21593: PPUSH
21594: CALL_OW 69
21598: PUSH
21599: FOR_IN
21600: IFFALSE 21661
// if IsSelected ( i ) then
21602: LD_VAR 0 2
21606: PPUSH
21607: CALL_OW 306
21611: IFFALSE 21659
// begin if i in hInvincible then
21613: LD_VAR 0 2
21617: PUSH
21618: LD_EXP 82
21622: IN
21623: IFFALSE 21643
// hInvincible := hInvincible diff i else
21625: LD_ADDR_EXP 82
21629: PUSH
21630: LD_EXP 82
21634: PUSH
21635: LD_VAR 0 2
21639: DIFF
21640: ST_TO_ADDR
21641: GO 21659
// hInvincible := hInvincible union i ;
21643: LD_ADDR_EXP 82
21647: PUSH
21648: LD_EXP 82
21652: PUSH
21653: LD_VAR 0 2
21657: UNION
21658: ST_TO_ADDR
// end ;
21659: GO 21599
21661: POP
21662: POP
// end ;
21663: LD_VAR 0 1
21667: RET
// export function hHackInvisible ; var i , j ; begin
21668: LD_INT 0
21670: PPUSH
21671: PPUSH
21672: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21673: LD_ADDR_VAR 0 2
21677: PUSH
21678: LD_INT 21
21680: PUSH
21681: LD_INT 1
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PPUSH
21688: CALL_OW 69
21692: PUSH
21693: FOR_IN
21694: IFFALSE 21718
// if IsSelected ( i ) then
21696: LD_VAR 0 2
21700: PPUSH
21701: CALL_OW 306
21705: IFFALSE 21716
// ComForceInvisible ( i ) ;
21707: LD_VAR 0 2
21711: PPUSH
21712: CALL_OW 496
21716: GO 21693
21718: POP
21719: POP
// end ;
21720: LD_VAR 0 1
21724: RET
// export function hHackChangeYourSide ; begin
21725: LD_INT 0
21727: PPUSH
// if your_side = 8 then
21728: LD_OWVAR 2
21732: PUSH
21733: LD_INT 8
21735: EQUAL
21736: IFFALSE 21748
// your_side := 0 else
21738: LD_ADDR_OWVAR 2
21742: PUSH
21743: LD_INT 0
21745: ST_TO_ADDR
21746: GO 21762
// your_side := your_side + 1 ;
21748: LD_ADDR_OWVAR 2
21752: PUSH
21753: LD_OWVAR 2
21757: PUSH
21758: LD_INT 1
21760: PLUS
21761: ST_TO_ADDR
// end ;
21762: LD_VAR 0 1
21766: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21767: LD_INT 0
21769: PPUSH
21770: PPUSH
21771: PPUSH
// for i in all_units do
21772: LD_ADDR_VAR 0 2
21776: PUSH
21777: LD_OWVAR 3
21781: PUSH
21782: FOR_IN
21783: IFFALSE 21861
// if IsSelected ( i ) then
21785: LD_VAR 0 2
21789: PPUSH
21790: CALL_OW 306
21794: IFFALSE 21859
// begin j := GetSide ( i ) ;
21796: LD_ADDR_VAR 0 3
21800: PUSH
21801: LD_VAR 0 2
21805: PPUSH
21806: CALL_OW 255
21810: ST_TO_ADDR
// if j = 8 then
21811: LD_VAR 0 3
21815: PUSH
21816: LD_INT 8
21818: EQUAL
21819: IFFALSE 21831
// j := 0 else
21821: LD_ADDR_VAR 0 3
21825: PUSH
21826: LD_INT 0
21828: ST_TO_ADDR
21829: GO 21845
// j := j + 1 ;
21831: LD_ADDR_VAR 0 3
21835: PUSH
21836: LD_VAR 0 3
21840: PUSH
21841: LD_INT 1
21843: PLUS
21844: ST_TO_ADDR
// SetSide ( i , j ) ;
21845: LD_VAR 0 2
21849: PPUSH
21850: LD_VAR 0 3
21854: PPUSH
21855: CALL_OW 235
// end ;
21859: GO 21782
21861: POP
21862: POP
// end ;
21863: LD_VAR 0 1
21867: RET
// export function hHackFog ; begin
21868: LD_INT 0
21870: PPUSH
// FogOff ( true ) ;
21871: LD_INT 1
21873: PPUSH
21874: CALL_OW 344
// end ;
21878: LD_VAR 0 1
21882: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21883: LD_INT 0
21885: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21886: LD_VAR 0 1
21890: PPUSH
21891: LD_VAR 0 2
21895: PPUSH
21896: LD_VAR 0 3
21900: PPUSH
21901: LD_INT 1
21903: PPUSH
21904: LD_INT 1
21906: PPUSH
21907: CALL_OW 483
// CenterOnXY ( x , y ) ;
21911: LD_VAR 0 2
21915: PPUSH
21916: LD_VAR 0 3
21920: PPUSH
21921: CALL_OW 84
// end ;
21925: LD_VAR 0 4
21929: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21930: LD_INT 0
21932: PPUSH
21933: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21934: LD_VAR 0 1
21938: NOT
21939: PUSH
21940: LD_VAR 0 2
21944: PPUSH
21945: LD_VAR 0 3
21949: PPUSH
21950: CALL_OW 488
21954: NOT
21955: OR
21956: PUSH
21957: LD_VAR 0 1
21961: PPUSH
21962: CALL_OW 266
21966: PUSH
21967: LD_INT 3
21969: NONEQUAL
21970: PUSH
21971: LD_VAR 0 1
21975: PPUSH
21976: CALL_OW 247
21980: PUSH
21981: LD_INT 1
21983: EQUAL
21984: NOT
21985: AND
21986: OR
21987: IFFALSE 21991
// exit ;
21989: GO 22273
// if GetType ( factory ) = unit_human then
21991: LD_VAR 0 1
21995: PPUSH
21996: CALL_OW 247
22000: PUSH
22001: LD_INT 1
22003: EQUAL
22004: IFFALSE 22021
// factory := IsInUnit ( factory ) ;
22006: LD_ADDR_VAR 0 1
22010: PUSH
22011: LD_VAR 0 1
22015: PPUSH
22016: CALL_OW 310
22020: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22021: LD_VAR 0 1
22025: PPUSH
22026: CALL_OW 266
22030: PUSH
22031: LD_INT 3
22033: NONEQUAL
22034: IFFALSE 22038
// exit ;
22036: GO 22273
// for i := 1 to Count ( factoryWaypoints ) do
22038: LD_ADDR_VAR 0 5
22042: PUSH
22043: DOUBLE
22044: LD_INT 1
22046: DEC
22047: ST_TO_ADDR
22048: LD_EXP 83
22052: PPUSH
22053: CALL 30776 0 1
22057: PUSH
22058: FOR_TO
22059: IFFALSE 22221
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
22061: LD_VAR 0 2
22065: PPUSH
22066: LD_VAR 0 3
22070: PPUSH
22071: CALL_OW 428
22075: PUSH
22076: LD_EXP 83
22080: PUSH
22081: LD_VAR 0 5
22085: ARRAY
22086: PUSH
22087: LD_INT 2
22089: ARRAY
22090: EQUAL
22091: IFFALSE 22123
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22093: LD_ADDR_EXP 83
22097: PUSH
22098: LD_EXP 83
22102: PPUSH
22103: LD_VAR 0 5
22107: PPUSH
22108: CALL_OW 3
22112: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22113: CALL 22278 0 0
// exit ;
22117: POP
22118: POP
22119: GO 22273
// end else
22121: GO 22219
// if factory = factoryWaypoints [ i ] [ 2 ] then
22123: LD_VAR 0 1
22127: PUSH
22128: LD_EXP 83
22132: PUSH
22133: LD_VAR 0 5
22137: ARRAY
22138: PUSH
22139: LD_INT 2
22141: ARRAY
22142: EQUAL
22143: IFFALSE 22219
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22145: LD_ADDR_EXP 83
22149: PUSH
22150: LD_EXP 83
22154: PPUSH
22155: LD_VAR 0 5
22159: PPUSH
22160: CALL_OW 3
22164: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22165: LD_ADDR_EXP 83
22169: PUSH
22170: LD_EXP 83
22174: PPUSH
22175: LD_VAR 0 1
22179: PPUSH
22180: CALL_OW 255
22184: PUSH
22185: LD_VAR 0 1
22189: PUSH
22190: LD_VAR 0 2
22194: PUSH
22195: LD_VAR 0 3
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: PPUSH
22206: CALL 66385 0 2
22210: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22211: CALL 22278 0 0
// exit ;
22215: POP
22216: POP
22217: GO 22273
// end ; end ;
22219: GO 22058
22221: POP
22222: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22223: LD_ADDR_EXP 83
22227: PUSH
22228: LD_EXP 83
22232: PPUSH
22233: LD_VAR 0 1
22237: PPUSH
22238: CALL_OW 255
22242: PUSH
22243: LD_VAR 0 1
22247: PUSH
22248: LD_VAR 0 2
22252: PUSH
22253: LD_VAR 0 3
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: PPUSH
22264: CALL 66385 0 2
22268: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22269: CALL 22278 0 0
// end ;
22273: LD_VAR 0 4
22277: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22278: LD_INT 0
22280: PPUSH
22281: PPUSH
22282: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22283: LD_STRING resetFactoryWaypoint();
22285: PPUSH
22286: CALL_OW 559
// if factoryWaypoints then
22290: LD_EXP 83
22294: IFFALSE 22415
// begin list := factoryWaypoints ;
22296: LD_ADDR_VAR 0 3
22300: PUSH
22301: LD_EXP 83
22305: ST_TO_ADDR
// for i := 1 to list do
22306: LD_ADDR_VAR 0 2
22310: PUSH
22311: DOUBLE
22312: LD_INT 1
22314: DEC
22315: ST_TO_ADDR
22316: LD_VAR 0 3
22320: PUSH
22321: FOR_TO
22322: IFFALSE 22413
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22324: LD_STRING setFactoryWaypointXY(
22326: PUSH
22327: LD_VAR 0 3
22331: PUSH
22332: LD_VAR 0 2
22336: ARRAY
22337: PUSH
22338: LD_INT 1
22340: ARRAY
22341: STR
22342: PUSH
22343: LD_STRING ,
22345: STR
22346: PUSH
22347: LD_VAR 0 3
22351: PUSH
22352: LD_VAR 0 2
22356: ARRAY
22357: PUSH
22358: LD_INT 2
22360: ARRAY
22361: STR
22362: PUSH
22363: LD_STRING ,
22365: STR
22366: PUSH
22367: LD_VAR 0 3
22371: PUSH
22372: LD_VAR 0 2
22376: ARRAY
22377: PUSH
22378: LD_INT 3
22380: ARRAY
22381: STR
22382: PUSH
22383: LD_STRING ,
22385: STR
22386: PUSH
22387: LD_VAR 0 3
22391: PUSH
22392: LD_VAR 0 2
22396: ARRAY
22397: PUSH
22398: LD_INT 4
22400: ARRAY
22401: STR
22402: PUSH
22403: LD_STRING )
22405: STR
22406: PPUSH
22407: CALL_OW 559
22411: GO 22321
22413: POP
22414: POP
// end ; end ;
22415: LD_VAR 0 1
22419: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22420: LD_INT 0
22422: PPUSH
// if HexInfo ( x , y ) = warehouse then
22423: LD_VAR 0 2
22427: PPUSH
22428: LD_VAR 0 3
22432: PPUSH
22433: CALL_OW 428
22437: PUSH
22438: LD_VAR 0 1
22442: EQUAL
22443: IFFALSE 22470
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22445: LD_ADDR_EXP 84
22449: PUSH
22450: LD_EXP 84
22454: PPUSH
22455: LD_VAR 0 1
22459: PPUSH
22460: LD_INT 0
22462: PPUSH
22463: CALL_OW 1
22467: ST_TO_ADDR
22468: GO 22521
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22470: LD_ADDR_EXP 84
22474: PUSH
22475: LD_EXP 84
22479: PPUSH
22480: LD_VAR 0 1
22484: PPUSH
22485: LD_VAR 0 1
22489: PPUSH
22490: CALL_OW 255
22494: PUSH
22495: LD_VAR 0 1
22499: PUSH
22500: LD_VAR 0 2
22504: PUSH
22505: LD_VAR 0 3
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: PPUSH
22516: CALL_OW 1
22520: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22521: CALL 22530 0 0
// end ;
22525: LD_VAR 0 4
22529: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22530: LD_INT 0
22532: PPUSH
22533: PPUSH
22534: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22535: LD_STRING resetWarehouseGatheringPoints();
22537: PPUSH
22538: CALL_OW 559
// if warehouseGatheringPoints then
22542: LD_EXP 84
22546: IFFALSE 22672
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22548: LD_ADDR_VAR 0 3
22552: PUSH
22553: LD_EXP 84
22557: PPUSH
22558: CALL 70147 0 1
22562: ST_TO_ADDR
// for i := 1 to list do
22563: LD_ADDR_VAR 0 2
22567: PUSH
22568: DOUBLE
22569: LD_INT 1
22571: DEC
22572: ST_TO_ADDR
22573: LD_VAR 0 3
22577: PUSH
22578: FOR_TO
22579: IFFALSE 22670
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22581: LD_STRING setWarehouseGatheringPointXY(
22583: PUSH
22584: LD_VAR 0 3
22588: PUSH
22589: LD_VAR 0 2
22593: ARRAY
22594: PUSH
22595: LD_INT 1
22597: ARRAY
22598: STR
22599: PUSH
22600: LD_STRING ,
22602: STR
22603: PUSH
22604: LD_VAR 0 3
22608: PUSH
22609: LD_VAR 0 2
22613: ARRAY
22614: PUSH
22615: LD_INT 2
22617: ARRAY
22618: STR
22619: PUSH
22620: LD_STRING ,
22622: STR
22623: PUSH
22624: LD_VAR 0 3
22628: PUSH
22629: LD_VAR 0 2
22633: ARRAY
22634: PUSH
22635: LD_INT 3
22637: ARRAY
22638: STR
22639: PUSH
22640: LD_STRING ,
22642: STR
22643: PUSH
22644: LD_VAR 0 3
22648: PUSH
22649: LD_VAR 0 2
22653: ARRAY
22654: PUSH
22655: LD_INT 4
22657: ARRAY
22658: STR
22659: PUSH
22660: LD_STRING )
22662: STR
22663: PPUSH
22664: CALL_OW 559
22668: GO 22578
22670: POP
22671: POP
// end ; end ;
22672: LD_VAR 0 1
22676: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22677: LD_EXP 84
22681: IFFALSE 23366
22683: GO 22685
22685: DISABLE
22686: LD_INT 0
22688: PPUSH
22689: PPUSH
22690: PPUSH
22691: PPUSH
22692: PPUSH
22693: PPUSH
22694: PPUSH
22695: PPUSH
22696: PPUSH
// begin enable ;
22697: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22698: LD_ADDR_VAR 0 3
22702: PUSH
22703: LD_EXP 84
22707: PPUSH
22708: CALL 70147 0 1
22712: ST_TO_ADDR
// if not list then
22713: LD_VAR 0 3
22717: NOT
22718: IFFALSE 22722
// exit ;
22720: GO 23366
// for i := 1 to list do
22722: LD_ADDR_VAR 0 1
22726: PUSH
22727: DOUBLE
22728: LD_INT 1
22730: DEC
22731: ST_TO_ADDR
22732: LD_VAR 0 3
22736: PUSH
22737: FOR_TO
22738: IFFALSE 23364
// begin depot := list [ i ] [ 2 ] ;
22740: LD_ADDR_VAR 0 8
22744: PUSH
22745: LD_VAR 0 3
22749: PUSH
22750: LD_VAR 0 1
22754: ARRAY
22755: PUSH
22756: LD_INT 2
22758: ARRAY
22759: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22760: LD_ADDR_VAR 0 5
22764: PUSH
22765: LD_VAR 0 3
22769: PUSH
22770: LD_VAR 0 1
22774: ARRAY
22775: PUSH
22776: LD_INT 1
22778: ARRAY
22779: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22780: LD_VAR 0 8
22784: PPUSH
22785: CALL_OW 301
22789: PUSH
22790: LD_VAR 0 5
22794: PUSH
22795: LD_VAR 0 8
22799: PPUSH
22800: CALL_OW 255
22804: NONEQUAL
22805: OR
22806: IFFALSE 22835
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22808: LD_ADDR_EXP 84
22812: PUSH
22813: LD_EXP 84
22817: PPUSH
22818: LD_VAR 0 8
22822: PPUSH
22823: LD_INT 0
22825: PPUSH
22826: CALL_OW 1
22830: ST_TO_ADDR
// exit ;
22831: POP
22832: POP
22833: GO 23366
// end ; x := list [ i ] [ 3 ] ;
22835: LD_ADDR_VAR 0 6
22839: PUSH
22840: LD_VAR 0 3
22844: PUSH
22845: LD_VAR 0 1
22849: ARRAY
22850: PUSH
22851: LD_INT 3
22853: ARRAY
22854: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22855: LD_ADDR_VAR 0 7
22859: PUSH
22860: LD_VAR 0 3
22864: PUSH
22865: LD_VAR 0 1
22869: ARRAY
22870: PUSH
22871: LD_INT 4
22873: ARRAY
22874: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22875: LD_ADDR_VAR 0 9
22879: PUSH
22880: LD_VAR 0 6
22884: PPUSH
22885: LD_VAR 0 7
22889: PPUSH
22890: LD_INT 16
22892: PPUSH
22893: CALL 68731 0 3
22897: ST_TO_ADDR
// if not cratesNearbyPoint then
22898: LD_VAR 0 9
22902: NOT
22903: IFFALSE 22909
// exit ;
22905: POP
22906: POP
22907: GO 23366
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22909: LD_ADDR_VAR 0 4
22913: PUSH
22914: LD_INT 22
22916: PUSH
22917: LD_VAR 0 5
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 3
22928: PUSH
22929: LD_INT 60
22931: PUSH
22932: EMPTY
22933: LIST
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 91
22941: PUSH
22942: LD_VAR 0 8
22946: PUSH
22947: LD_INT 6
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 2
22957: PUSH
22958: LD_INT 25
22960: PUSH
22961: LD_INT 2
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 25
22970: PUSH
22971: LD_INT 16
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: PPUSH
22989: CALL_OW 69
22993: PUSH
22994: LD_VAR 0 8
22998: PPUSH
22999: CALL_OW 313
23003: PPUSH
23004: LD_INT 3
23006: PUSH
23007: LD_INT 60
23009: PUSH
23010: EMPTY
23011: LIST
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 2
23019: PUSH
23020: LD_INT 25
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 25
23032: PUSH
23033: LD_INT 16
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PPUSH
23049: CALL_OW 72
23053: UNION
23054: ST_TO_ADDR
// if tmp then
23055: LD_VAR 0 4
23059: IFFALSE 23139
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23061: LD_ADDR_VAR 0 4
23065: PUSH
23066: LD_VAR 0 4
23070: PPUSH
23071: LD_INT 3
23073: PPUSH
23074: CALL 66700 0 2
23078: ST_TO_ADDR
// for j in tmp do
23079: LD_ADDR_VAR 0 2
23083: PUSH
23084: LD_VAR 0 4
23088: PUSH
23089: FOR_IN
23090: IFFALSE 23133
// begin if IsInUnit ( j ) then
23092: LD_VAR 0 2
23096: PPUSH
23097: CALL_OW 310
23101: IFFALSE 23112
// ComExit ( j ) ;
23103: LD_VAR 0 2
23107: PPUSH
23108: CALL 66783 0 1
// AddComCollect ( j , x , y ) ;
23112: LD_VAR 0 2
23116: PPUSH
23117: LD_VAR 0 6
23121: PPUSH
23122: LD_VAR 0 7
23126: PPUSH
23127: CALL_OW 177
// end ;
23131: GO 23089
23133: POP
23134: POP
// exit ;
23135: POP
23136: POP
23137: GO 23366
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23139: LD_ADDR_VAR 0 4
23143: PUSH
23144: LD_INT 22
23146: PUSH
23147: LD_VAR 0 5
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 91
23158: PUSH
23159: LD_VAR 0 8
23163: PUSH
23164: LD_INT 8
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 2
23174: PUSH
23175: LD_INT 34
23177: PUSH
23178: LD_INT 12
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 34
23187: PUSH
23188: LD_INT 51
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 34
23197: PUSH
23198: LD_INT 32
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 34
23207: PUSH
23208: LD_INT 89
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: LIST
23226: PPUSH
23227: CALL_OW 69
23231: ST_TO_ADDR
// if tmp then
23232: LD_VAR 0 4
23236: IFFALSE 23362
// begin for j in tmp do
23238: LD_ADDR_VAR 0 2
23242: PUSH
23243: LD_VAR 0 4
23247: PUSH
23248: FOR_IN
23249: IFFALSE 23360
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23251: LD_VAR 0 2
23255: PPUSH
23256: CALL_OW 262
23260: PUSH
23261: LD_INT 3
23263: EQUAL
23264: PUSH
23265: LD_VAR 0 2
23269: PPUSH
23270: CALL_OW 261
23274: PUSH
23275: LD_INT 20
23277: GREATER
23278: OR
23279: PUSH
23280: LD_VAR 0 2
23284: PPUSH
23285: CALL_OW 314
23289: NOT
23290: AND
23291: PUSH
23292: LD_VAR 0 2
23296: PPUSH
23297: CALL_OW 263
23301: PUSH
23302: LD_INT 1
23304: NONEQUAL
23305: PUSH
23306: LD_VAR 0 2
23310: PPUSH
23311: CALL_OW 311
23315: OR
23316: AND
23317: IFFALSE 23358
// begin ComCollect ( j , x , y ) ;
23319: LD_VAR 0 2
23323: PPUSH
23324: LD_VAR 0 6
23328: PPUSH
23329: LD_VAR 0 7
23333: PPUSH
23334: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23338: LD_VAR 0 2
23342: PPUSH
23343: LD_VAR 0 8
23347: PPUSH
23348: CALL_OW 172
// exit ;
23352: POP
23353: POP
23354: POP
23355: POP
23356: GO 23366
// end ;
23358: GO 23248
23360: POP
23361: POP
// end ; end ;
23362: GO 22737
23364: POP
23365: POP
// end ; end_of_file
23366: PPOPN 9
23368: END
// export function SOS_UnitDestroyed ( un ) ; begin
23369: LD_INT 0
23371: PPUSH
// ComRadiation ( un ) ;
23372: LD_VAR 0 1
23376: PPUSH
23377: CALL 24358 0 1
// end ;
23381: LD_VAR 0 2
23385: RET
// export function SOS_UnitKamikazed ( un ) ; begin
23386: LD_INT 0
23388: PPUSH
// ComRadiation ( un ) ;
23389: LD_VAR 0 1
23393: PPUSH
23394: CALL 24358 0 1
// end ;
23398: LD_VAR 0 2
23402: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23403: LD_INT 0
23405: PPUSH
// end ;
23406: LD_VAR 0 4
23410: RET
// export function SOS_Command ( cmd ) ; begin
23411: LD_INT 0
23413: PPUSH
// end ;
23414: LD_VAR 0 2
23418: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23419: LD_INT 0
23421: PPUSH
// end ;
23422: LD_VAR 0 6
23426: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
23427: LD_INT 0
23429: PPUSH
23430: PPUSH
23431: PPUSH
23432: PPUSH
23433: PPUSH
// if not vehicle or not factory then
23434: LD_VAR 0 1
23438: NOT
23439: PUSH
23440: LD_VAR 0 2
23444: NOT
23445: OR
23446: IFFALSE 23450
// exit ;
23448: GO 23949
// if not factoryWaypoints then
23450: LD_EXP 83
23454: NOT
23455: IFFALSE 23459
// exit ;
23457: GO 23949
// for i := 1 to Count ( factoryWaypoints ) do
23459: LD_ADDR_VAR 0 4
23463: PUSH
23464: DOUBLE
23465: LD_INT 1
23467: DEC
23468: ST_TO_ADDR
23469: LD_EXP 83
23473: PPUSH
23474: CALL 30776 0 1
23478: PUSH
23479: FOR_TO
23480: IFFALSE 23947
// if factoryWaypoints [ i ] [ 2 ] = factory then
23482: LD_EXP 83
23486: PUSH
23487: LD_VAR 0 4
23491: ARRAY
23492: PUSH
23493: LD_INT 2
23495: ARRAY
23496: PUSH
23497: LD_VAR 0 2
23501: EQUAL
23502: IFFALSE 23945
// begin if GetControl ( vehicle ) = control_manual then
23504: LD_VAR 0 1
23508: PPUSH
23509: CALL_OW 263
23513: PUSH
23514: LD_INT 1
23516: EQUAL
23517: IFFALSE 23828
// begin driver := IsDrivenBy ( vehicle ) ;
23519: LD_ADDR_VAR 0 6
23523: PUSH
23524: LD_VAR 0 1
23528: PPUSH
23529: CALL_OW 311
23533: ST_TO_ADDR
// tag := GetTag ( driver ) ;
23534: LD_ADDR_VAR 0 5
23538: PUSH
23539: LD_VAR 0 6
23543: PPUSH
23544: CALL_OW 110
23548: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
23549: LD_VAR 0 5
23553: PUSH
23554: LD_INT 501
23556: EQUAL
23557: PUSH
23558: LD_VAR 0 1
23562: PPUSH
23563: CALL_OW 110
23567: PUSH
23568: LD_INT 501
23570: EQUAL
23571: OR
23572: IFFALSE 23578
// exit ;
23574: POP
23575: POP
23576: GO 23949
// if not HasTask ( driver ) then
23578: LD_VAR 0 6
23582: PPUSH
23583: CALL_OW 314
23587: NOT
23588: IFFALSE 23826
// begin SetTag ( driver , tDriver ) ;
23590: LD_VAR 0 6
23594: PPUSH
23595: LD_INT 501
23597: PPUSH
23598: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
23602: LD_VAR 0 1
23606: PPUSH
23607: LD_INT 501
23609: PPUSH
23610: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23614: LD_ADDR_VAR 0 7
23618: PUSH
23619: LD_EXP 83
23623: PUSH
23624: LD_VAR 0 4
23628: ARRAY
23629: PUSH
23630: LD_INT 3
23632: ARRAY
23633: PPUSH
23634: LD_EXP 83
23638: PUSH
23639: LD_VAR 0 4
23643: ARRAY
23644: PUSH
23645: LD_INT 4
23647: ARRAY
23648: PPUSH
23649: CALL_OW 428
23653: ST_TO_ADDR
// if hex then
23654: LD_VAR 0 7
23658: IFFALSE 23676
// ComMoveUnit ( driver , hex ) else
23660: LD_VAR 0 6
23664: PPUSH
23665: LD_VAR 0 7
23669: PPUSH
23670: CALL_OW 112
23674: GO 23715
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23676: LD_VAR 0 6
23680: PPUSH
23681: LD_EXP 83
23685: PUSH
23686: LD_VAR 0 4
23690: ARRAY
23691: PUSH
23692: LD_INT 3
23694: ARRAY
23695: PPUSH
23696: LD_EXP 83
23700: PUSH
23701: LD_VAR 0 4
23705: ARRAY
23706: PUSH
23707: LD_INT 4
23709: ARRAY
23710: PPUSH
23711: CALL_OW 111
// AddComExitVehicle ( driver ) ;
23715: LD_VAR 0 6
23719: PPUSH
23720: CALL_OW 181
// if Multiplayer then
23724: LD_OWVAR 4
23728: IFFALSE 23777
// begin repeat wait ( 10 ) ;
23730: LD_INT 10
23732: PPUSH
23733: CALL_OW 67
// until not IsInUnit ( driver ) ;
23737: LD_VAR 0 6
23741: PPUSH
23742: CALL_OW 310
23746: NOT
23747: IFFALSE 23730
// if not HasTask ( driver ) then
23749: LD_VAR 0 6
23753: PPUSH
23754: CALL_OW 314
23758: NOT
23759: IFFALSE 23775
// ComEnterUnit ( driver , factory ) ;
23761: LD_VAR 0 6
23765: PPUSH
23766: LD_VAR 0 2
23770: PPUSH
23771: CALL_OW 120
// end else
23775: GO 23791
// AddComEnterUnit ( driver , factory ) ;
23777: LD_VAR 0 6
23781: PPUSH
23782: LD_VAR 0 2
23786: PPUSH
23787: CALL_OW 180
// wait ( 0 0$1 ) ;
23791: LD_INT 35
23793: PPUSH
23794: CALL_OW 67
// SetTag ( driver , tag ) ;
23798: LD_VAR 0 6
23802: PPUSH
23803: LD_VAR 0 5
23807: PPUSH
23808: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
23812: LD_VAR 0 1
23816: PPUSH
23817: LD_INT 0
23819: PPUSH
23820: CALL_OW 109
// break ;
23824: GO 23947
// end ; end else
23826: GO 23945
// if GetControl ( vehicle ) = control_remote then
23828: LD_VAR 0 1
23832: PPUSH
23833: CALL_OW 263
23837: PUSH
23838: LD_INT 2
23840: EQUAL
23841: IFFALSE 23904
// begin wait ( 0 0$2 ) ;
23843: LD_INT 70
23845: PPUSH
23846: CALL_OW 67
// if Connect ( vehicle ) then
23850: LD_VAR 0 1
23854: PPUSH
23855: CALL 36982 0 1
23859: IFFALSE 23900
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23861: LD_VAR 0 1
23865: PPUSH
23866: LD_EXP 83
23870: PUSH
23871: LD_VAR 0 4
23875: ARRAY
23876: PUSH
23877: LD_INT 3
23879: ARRAY
23880: PPUSH
23881: LD_EXP 83
23885: PUSH
23886: LD_VAR 0 4
23890: ARRAY
23891: PUSH
23892: LD_INT 4
23894: ARRAY
23895: PPUSH
23896: CALL_OW 171
// break ;
23900: GO 23947
// end else
23902: GO 23945
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23904: LD_VAR 0 1
23908: PPUSH
23909: LD_EXP 83
23913: PUSH
23914: LD_VAR 0 4
23918: ARRAY
23919: PUSH
23920: LD_INT 3
23922: ARRAY
23923: PPUSH
23924: LD_EXP 83
23928: PUSH
23929: LD_VAR 0 4
23933: ARRAY
23934: PUSH
23935: LD_INT 4
23937: ARRAY
23938: PPUSH
23939: CALL_OW 171
// break ;
23943: GO 23947
// end ; end ;
23945: GO 23479
23947: POP
23948: POP
// end ;
23949: LD_VAR 0 3
23953: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23954: LD_INT 0
23956: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23957: LD_VAR 0 1
23961: PUSH
23962: LD_INT 250
23964: EQUAL
23965: PUSH
23966: LD_VAR 0 2
23970: PPUSH
23971: CALL_OW 264
23975: PUSH
23976: LD_INT 81
23978: EQUAL
23979: AND
23980: IFFALSE 24001
// MinerPlaceMine ( unit , x , y ) ;
23982: LD_VAR 0 2
23986: PPUSH
23987: LD_VAR 0 4
23991: PPUSH
23992: LD_VAR 0 5
23996: PPUSH
23997: CALL 27093 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24001: LD_VAR 0 1
24005: PUSH
24006: LD_INT 251
24008: EQUAL
24009: PUSH
24010: LD_VAR 0 2
24014: PPUSH
24015: CALL_OW 264
24019: PUSH
24020: LD_INT 81
24022: EQUAL
24023: AND
24024: IFFALSE 24045
// MinerDetonateMine ( unit , x , y ) ;
24026: LD_VAR 0 2
24030: PPUSH
24031: LD_VAR 0 4
24035: PPUSH
24036: LD_VAR 0 5
24040: PPUSH
24041: CALL 27368 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24045: LD_VAR 0 1
24049: PUSH
24050: LD_INT 252
24052: EQUAL
24053: PUSH
24054: LD_VAR 0 2
24058: PPUSH
24059: CALL_OW 264
24063: PUSH
24064: LD_INT 81
24066: EQUAL
24067: AND
24068: IFFALSE 24089
// MinerCreateMinefield ( unit , x , y ) ;
24070: LD_VAR 0 2
24074: PPUSH
24075: LD_VAR 0 4
24079: PPUSH
24080: LD_VAR 0 5
24084: PPUSH
24085: CALL 27785 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24089: LD_VAR 0 1
24093: PUSH
24094: LD_INT 253
24096: EQUAL
24097: PUSH
24098: LD_VAR 0 2
24102: PPUSH
24103: CALL_OW 257
24107: PUSH
24108: LD_INT 5
24110: EQUAL
24111: AND
24112: IFFALSE 24133
// ComBinocular ( unit , x , y ) ;
24114: LD_VAR 0 2
24118: PPUSH
24119: LD_VAR 0 4
24123: PPUSH
24124: LD_VAR 0 5
24128: PPUSH
24129: CALL 28154 0 3
// if selectedUnit then
24133: LD_VAR 0 3
24137: IFFALSE 24193
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24139: LD_VAR 0 1
24143: PUSH
24144: LD_INT 254
24146: EQUAL
24147: PUSH
24148: LD_VAR 0 2
24152: PPUSH
24153: CALL_OW 264
24157: PUSH
24158: LD_INT 99
24160: EQUAL
24161: AND
24162: PUSH
24163: LD_VAR 0 3
24167: PPUSH
24168: CALL_OW 263
24172: PUSH
24173: LD_INT 3
24175: EQUAL
24176: AND
24177: IFFALSE 24193
// HackDestroyVehicle ( unit , selectedUnit ) ;
24179: LD_VAR 0 2
24183: PPUSH
24184: LD_VAR 0 3
24188: PPUSH
24189: CALL 26457 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24193: LD_VAR 0 1
24197: PUSH
24198: LD_INT 255
24200: EQUAL
24201: PUSH
24202: LD_VAR 0 2
24206: PPUSH
24207: CALL_OW 264
24211: PUSH
24212: LD_INT 14
24214: PUSH
24215: LD_INT 53
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: IN
24222: AND
24223: PUSH
24224: LD_VAR 0 4
24228: PPUSH
24229: LD_VAR 0 5
24233: PPUSH
24234: CALL_OW 488
24238: AND
24239: IFFALSE 24263
// CutTreeXYR ( unit , x , y , 12 ) ;
24241: LD_VAR 0 2
24245: PPUSH
24246: LD_VAR 0 4
24250: PPUSH
24251: LD_VAR 0 5
24255: PPUSH
24256: LD_INT 12
24258: PPUSH
24259: CALL 24454 0 4
// if cmd = 256 then
24263: LD_VAR 0 1
24267: PUSH
24268: LD_INT 256
24270: EQUAL
24271: IFFALSE 24292
// SetFactoryWaypoint ( unit , x , y ) ;
24273: LD_VAR 0 2
24277: PPUSH
24278: LD_VAR 0 4
24282: PPUSH
24283: LD_VAR 0 5
24287: PPUSH
24288: CALL 21930 0 3
// if cmd = 257 then
24292: LD_VAR 0 1
24296: PUSH
24297: LD_INT 257
24299: EQUAL
24300: IFFALSE 24321
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24302: LD_VAR 0 2
24306: PPUSH
24307: LD_VAR 0 4
24311: PPUSH
24312: LD_VAR 0 5
24316: PPUSH
24317: CALL 22420 0 3
// if cmd = 258 then
24321: LD_VAR 0 1
24325: PUSH
24326: LD_INT 258
24328: EQUAL
24329: IFFALSE 24353
// BurnTreeXYR ( unit , x , y , 8 ) ;
24331: LD_VAR 0 2
24335: PPUSH
24336: LD_VAR 0 4
24340: PPUSH
24341: LD_VAR 0 5
24345: PPUSH
24346: LD_INT 8
24348: PPUSH
24349: CALL 24848 0 4
// end ;
24353: LD_VAR 0 6
24357: RET
// export function ComRadiation ( un ) ; var eff ; begin
24358: LD_INT 0
24360: PPUSH
24361: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
24362: LD_VAR 0 1
24366: PPUSH
24367: CALL_OW 264
24371: PUSH
24372: LD_INT 91
24374: NONEQUAL
24375: IFFALSE 24379
// exit ;
24377: GO 24449
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24379: LD_INT 68
24381: PPUSH
24382: LD_VAR 0 1
24386: PPUSH
24387: CALL_OW 255
24391: PPUSH
24392: CALL_OW 321
24396: PUSH
24397: LD_INT 2
24399: EQUAL
24400: IFFALSE 24412
// eff := 70 else
24402: LD_ADDR_VAR 0 3
24406: PUSH
24407: LD_INT 70
24409: ST_TO_ADDR
24410: GO 24420
// eff := 30 ;
24412: LD_ADDR_VAR 0 3
24416: PUSH
24417: LD_INT 30
24419: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24420: LD_VAR 0 1
24424: PPUSH
24425: CALL_OW 250
24429: PPUSH
24430: LD_VAR 0 1
24434: PPUSH
24435: CALL_OW 251
24439: PPUSH
24440: LD_VAR 0 3
24444: PPUSH
24445: CALL_OW 495
// end ;
24449: LD_VAR 0 2
24453: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24454: LD_INT 0
24456: PPUSH
24457: PPUSH
24458: PPUSH
24459: PPUSH
24460: PPUSH
24461: PPUSH
24462: PPUSH
24463: PPUSH
24464: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
24465: LD_VAR 0 1
24469: PPUSH
24470: CALL_OW 302
24474: NOT
24475: PUSH
24476: LD_VAR 0 2
24480: PPUSH
24481: LD_VAR 0 3
24485: PPUSH
24486: CALL_OW 488
24490: NOT
24491: OR
24492: PUSH
24493: LD_VAR 0 4
24497: NOT
24498: OR
24499: IFFALSE 24503
// exit ;
24501: GO 24843
// list := [ ] ;
24503: LD_ADDR_VAR 0 13
24507: PUSH
24508: EMPTY
24509: ST_TO_ADDR
// if x - r < 0 then
24510: LD_VAR 0 2
24514: PUSH
24515: LD_VAR 0 4
24519: MINUS
24520: PUSH
24521: LD_INT 0
24523: LESS
24524: IFFALSE 24536
// min_x := 0 else
24526: LD_ADDR_VAR 0 7
24530: PUSH
24531: LD_INT 0
24533: ST_TO_ADDR
24534: GO 24552
// min_x := x - r ;
24536: LD_ADDR_VAR 0 7
24540: PUSH
24541: LD_VAR 0 2
24545: PUSH
24546: LD_VAR 0 4
24550: MINUS
24551: ST_TO_ADDR
// if y - r < 0 then
24552: LD_VAR 0 3
24556: PUSH
24557: LD_VAR 0 4
24561: MINUS
24562: PUSH
24563: LD_INT 0
24565: LESS
24566: IFFALSE 24578
// min_y := 0 else
24568: LD_ADDR_VAR 0 8
24572: PUSH
24573: LD_INT 0
24575: ST_TO_ADDR
24576: GO 24594
// min_y := y - r ;
24578: LD_ADDR_VAR 0 8
24582: PUSH
24583: LD_VAR 0 3
24587: PUSH
24588: LD_VAR 0 4
24592: MINUS
24593: ST_TO_ADDR
// max_x := x + r ;
24594: LD_ADDR_VAR 0 9
24598: PUSH
24599: LD_VAR 0 2
24603: PUSH
24604: LD_VAR 0 4
24608: PLUS
24609: ST_TO_ADDR
// max_y := y + r ;
24610: LD_ADDR_VAR 0 10
24614: PUSH
24615: LD_VAR 0 3
24619: PUSH
24620: LD_VAR 0 4
24624: PLUS
24625: ST_TO_ADDR
// for _x = min_x to max_x do
24626: LD_ADDR_VAR 0 11
24630: PUSH
24631: DOUBLE
24632: LD_VAR 0 7
24636: DEC
24637: ST_TO_ADDR
24638: LD_VAR 0 9
24642: PUSH
24643: FOR_TO
24644: IFFALSE 24761
// for _y = min_y to max_y do
24646: LD_ADDR_VAR 0 12
24650: PUSH
24651: DOUBLE
24652: LD_VAR 0 8
24656: DEC
24657: ST_TO_ADDR
24658: LD_VAR 0 10
24662: PUSH
24663: FOR_TO
24664: IFFALSE 24757
// begin if not ValidHex ( _x , _y ) then
24666: LD_VAR 0 11
24670: PPUSH
24671: LD_VAR 0 12
24675: PPUSH
24676: CALL_OW 488
24680: NOT
24681: IFFALSE 24685
// continue ;
24683: GO 24663
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24685: LD_VAR 0 11
24689: PPUSH
24690: LD_VAR 0 12
24694: PPUSH
24695: CALL_OW 351
24699: PUSH
24700: LD_VAR 0 11
24704: PPUSH
24705: LD_VAR 0 12
24709: PPUSH
24710: CALL_OW 554
24714: AND
24715: IFFALSE 24755
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24717: LD_ADDR_VAR 0 13
24721: PUSH
24722: LD_VAR 0 13
24726: PPUSH
24727: LD_VAR 0 13
24731: PUSH
24732: LD_INT 1
24734: PLUS
24735: PPUSH
24736: LD_VAR 0 11
24740: PUSH
24741: LD_VAR 0 12
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PPUSH
24750: CALL_OW 2
24754: ST_TO_ADDR
// end ;
24755: GO 24663
24757: POP
24758: POP
24759: GO 24643
24761: POP
24762: POP
// if not list then
24763: LD_VAR 0 13
24767: NOT
24768: IFFALSE 24772
// exit ;
24770: GO 24843
// for i in list do
24772: LD_ADDR_VAR 0 6
24776: PUSH
24777: LD_VAR 0 13
24781: PUSH
24782: FOR_IN
24783: IFFALSE 24841
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24785: LD_VAR 0 1
24789: PPUSH
24790: LD_STRING M
24792: PUSH
24793: LD_VAR 0 6
24797: PUSH
24798: LD_INT 1
24800: ARRAY
24801: PUSH
24802: LD_VAR 0 6
24806: PUSH
24807: LD_INT 2
24809: ARRAY
24810: PUSH
24811: LD_INT 0
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: PUSH
24832: EMPTY
24833: LIST
24834: PPUSH
24835: CALL_OW 447
24839: GO 24782
24841: POP
24842: POP
// end ;
24843: LD_VAR 0 5
24847: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
24848: LD_INT 0
24850: PPUSH
24851: PPUSH
24852: PPUSH
24853: PPUSH
24854: PPUSH
24855: PPUSH
24856: PPUSH
24857: PPUSH
24858: PPUSH
24859: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
24860: LD_VAR 0 1
24864: PPUSH
24865: CALL_OW 302
24869: NOT
24870: PUSH
24871: LD_VAR 0 2
24875: PPUSH
24876: LD_VAR 0 3
24880: PPUSH
24881: CALL_OW 488
24885: NOT
24886: OR
24887: PUSH
24888: LD_VAR 0 4
24892: NOT
24893: OR
24894: IFFALSE 24898
// exit ;
24896: GO 25411
// list := [ ] ;
24898: LD_ADDR_VAR 0 13
24902: PUSH
24903: EMPTY
24904: ST_TO_ADDR
// if x - r < 0 then
24905: LD_VAR 0 2
24909: PUSH
24910: LD_VAR 0 4
24914: MINUS
24915: PUSH
24916: LD_INT 0
24918: LESS
24919: IFFALSE 24931
// min_x := 0 else
24921: LD_ADDR_VAR 0 7
24925: PUSH
24926: LD_INT 0
24928: ST_TO_ADDR
24929: GO 24947
// min_x := x - r ;
24931: LD_ADDR_VAR 0 7
24935: PUSH
24936: LD_VAR 0 2
24940: PUSH
24941: LD_VAR 0 4
24945: MINUS
24946: ST_TO_ADDR
// if y - r < 0 then
24947: LD_VAR 0 3
24951: PUSH
24952: LD_VAR 0 4
24956: MINUS
24957: PUSH
24958: LD_INT 0
24960: LESS
24961: IFFALSE 24973
// min_y := 0 else
24963: LD_ADDR_VAR 0 8
24967: PUSH
24968: LD_INT 0
24970: ST_TO_ADDR
24971: GO 24989
// min_y := y - r ;
24973: LD_ADDR_VAR 0 8
24977: PUSH
24978: LD_VAR 0 3
24982: PUSH
24983: LD_VAR 0 4
24987: MINUS
24988: ST_TO_ADDR
// max_x := x + r ;
24989: LD_ADDR_VAR 0 9
24993: PUSH
24994: LD_VAR 0 2
24998: PUSH
24999: LD_VAR 0 4
25003: PLUS
25004: ST_TO_ADDR
// max_y := y + r ;
25005: LD_ADDR_VAR 0 10
25009: PUSH
25010: LD_VAR 0 3
25014: PUSH
25015: LD_VAR 0 4
25019: PLUS
25020: ST_TO_ADDR
// for _x = min_x to max_x do
25021: LD_ADDR_VAR 0 11
25025: PUSH
25026: DOUBLE
25027: LD_VAR 0 7
25031: DEC
25032: ST_TO_ADDR
25033: LD_VAR 0 9
25037: PUSH
25038: FOR_TO
25039: IFFALSE 25156
// for _y = min_y to max_y do
25041: LD_ADDR_VAR 0 12
25045: PUSH
25046: DOUBLE
25047: LD_VAR 0 8
25051: DEC
25052: ST_TO_ADDR
25053: LD_VAR 0 10
25057: PUSH
25058: FOR_TO
25059: IFFALSE 25152
// begin if not ValidHex ( _x , _y ) then
25061: LD_VAR 0 11
25065: PPUSH
25066: LD_VAR 0 12
25070: PPUSH
25071: CALL_OW 488
25075: NOT
25076: IFFALSE 25080
// continue ;
25078: GO 25058
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25080: LD_VAR 0 11
25084: PPUSH
25085: LD_VAR 0 12
25089: PPUSH
25090: CALL_OW 351
25094: PUSH
25095: LD_VAR 0 11
25099: PPUSH
25100: LD_VAR 0 12
25104: PPUSH
25105: CALL_OW 554
25109: AND
25110: IFFALSE 25150
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25112: LD_ADDR_VAR 0 13
25116: PUSH
25117: LD_VAR 0 13
25121: PPUSH
25122: LD_VAR 0 13
25126: PUSH
25127: LD_INT 1
25129: PLUS
25130: PPUSH
25131: LD_VAR 0 11
25135: PUSH
25136: LD_VAR 0 12
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PPUSH
25145: CALL_OW 2
25149: ST_TO_ADDR
// end ;
25150: GO 25058
25152: POP
25153: POP
25154: GO 25038
25156: POP
25157: POP
// if not list then
25158: LD_VAR 0 13
25162: NOT
25163: IFFALSE 25167
// exit ;
25165: GO 25411
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
25167: LD_ADDR_VAR 0 13
25171: PUSH
25172: LD_VAR 0 1
25176: PPUSH
25177: LD_VAR 0 13
25181: PPUSH
25182: LD_INT 1
25184: PPUSH
25185: LD_INT 1
25187: PPUSH
25188: CALL 34124 0 4
25192: ST_TO_ADDR
// ComStop ( flame ) ;
25193: LD_VAR 0 1
25197: PPUSH
25198: CALL_OW 141
// for i in list do
25202: LD_ADDR_VAR 0 6
25206: PUSH
25207: LD_VAR 0 13
25211: PUSH
25212: FOR_IN
25213: IFFALSE 25244
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
25215: LD_VAR 0 1
25219: PPUSH
25220: LD_VAR 0 6
25224: PUSH
25225: LD_INT 1
25227: ARRAY
25228: PPUSH
25229: LD_VAR 0 6
25233: PUSH
25234: LD_INT 2
25236: ARRAY
25237: PPUSH
25238: CALL_OW 176
25242: GO 25212
25244: POP
25245: POP
// repeat wait ( 0 0$1 ) ;
25246: LD_INT 35
25248: PPUSH
25249: CALL_OW 67
// task := GetTaskList ( flame ) ;
25253: LD_ADDR_VAR 0 14
25257: PUSH
25258: LD_VAR 0 1
25262: PPUSH
25263: CALL_OW 437
25267: ST_TO_ADDR
// if not task then
25268: LD_VAR 0 14
25272: NOT
25273: IFFALSE 25277
// exit ;
25275: GO 25411
// if task [ 1 ] [ 1 ] <> | then
25277: LD_VAR 0 14
25281: PUSH
25282: LD_INT 1
25284: ARRAY
25285: PUSH
25286: LD_INT 1
25288: ARRAY
25289: PUSH
25290: LD_STRING |
25292: NONEQUAL
25293: IFFALSE 25297
// exit ;
25295: GO 25411
// _x := task [ 1 ] [ 2 ] ;
25297: LD_ADDR_VAR 0 11
25301: PUSH
25302: LD_VAR 0 14
25306: PUSH
25307: LD_INT 1
25309: ARRAY
25310: PUSH
25311: LD_INT 2
25313: ARRAY
25314: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
25315: LD_ADDR_VAR 0 12
25319: PUSH
25320: LD_VAR 0 14
25324: PUSH
25325: LD_INT 1
25327: ARRAY
25328: PUSH
25329: LD_INT 3
25331: ARRAY
25332: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
25333: LD_VAR 0 11
25337: PPUSH
25338: LD_VAR 0 12
25342: PPUSH
25343: CALL_OW 351
25347: NOT
25348: PUSH
25349: LD_VAR 0 11
25353: PPUSH
25354: LD_VAR 0 12
25358: PPUSH
25359: CALL_OW 554
25363: NOT
25364: OR
25365: IFFALSE 25399
// begin task := Delete ( task , 1 ) ;
25367: LD_ADDR_VAR 0 14
25371: PUSH
25372: LD_VAR 0 14
25376: PPUSH
25377: LD_INT 1
25379: PPUSH
25380: CALL_OW 3
25384: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
25385: LD_VAR 0 1
25389: PPUSH
25390: LD_VAR 0 14
25394: PPUSH
25395: CALL_OW 446
// end ; until not HasTask ( flame ) ;
25399: LD_VAR 0 1
25403: PPUSH
25404: CALL_OW 314
25408: NOT
25409: IFFALSE 25246
// end ;
25411: LD_VAR 0 5
25415: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25416: LD_EXP 86
25420: NOT
25421: IFFALSE 25471
25423: GO 25425
25425: DISABLE
// begin initHack := true ;
25426: LD_ADDR_EXP 86
25430: PUSH
25431: LD_INT 1
25433: ST_TO_ADDR
// hackTanks := [ ] ;
25434: LD_ADDR_EXP 87
25438: PUSH
25439: EMPTY
25440: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25441: LD_ADDR_EXP 88
25445: PUSH
25446: EMPTY
25447: ST_TO_ADDR
// hackLimit := 3 ;
25448: LD_ADDR_EXP 89
25452: PUSH
25453: LD_INT 3
25455: ST_TO_ADDR
// hackDist := 12 ;
25456: LD_ADDR_EXP 90
25460: PUSH
25461: LD_INT 12
25463: ST_TO_ADDR
// hackCounter := [ ] ;
25464: LD_ADDR_EXP 91
25468: PUSH
25469: EMPTY
25470: ST_TO_ADDR
// end ;
25471: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25472: LD_EXP 86
25476: PUSH
25477: LD_INT 34
25479: PUSH
25480: LD_INT 99
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PPUSH
25487: CALL_OW 69
25491: AND
25492: IFFALSE 25745
25494: GO 25496
25496: DISABLE
25497: LD_INT 0
25499: PPUSH
25500: PPUSH
// begin enable ;
25501: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25502: LD_ADDR_VAR 0 1
25506: PUSH
25507: LD_INT 34
25509: PUSH
25510: LD_INT 99
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PPUSH
25517: CALL_OW 69
25521: PUSH
25522: FOR_IN
25523: IFFALSE 25743
// begin if not i in hackTanks then
25525: LD_VAR 0 1
25529: PUSH
25530: LD_EXP 87
25534: IN
25535: NOT
25536: IFFALSE 25619
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25538: LD_ADDR_EXP 87
25542: PUSH
25543: LD_EXP 87
25547: PPUSH
25548: LD_EXP 87
25552: PUSH
25553: LD_INT 1
25555: PLUS
25556: PPUSH
25557: LD_VAR 0 1
25561: PPUSH
25562: CALL_OW 1
25566: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25567: LD_ADDR_EXP 88
25571: PUSH
25572: LD_EXP 88
25576: PPUSH
25577: LD_EXP 88
25581: PUSH
25582: LD_INT 1
25584: PLUS
25585: PPUSH
25586: EMPTY
25587: PPUSH
25588: CALL_OW 1
25592: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25593: LD_ADDR_EXP 91
25597: PUSH
25598: LD_EXP 91
25602: PPUSH
25603: LD_EXP 91
25607: PUSH
25608: LD_INT 1
25610: PLUS
25611: PPUSH
25612: EMPTY
25613: PPUSH
25614: CALL_OW 1
25618: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25619: LD_VAR 0 1
25623: PPUSH
25624: CALL_OW 302
25628: NOT
25629: IFFALSE 25642
// begin HackUnlinkAll ( i ) ;
25631: LD_VAR 0 1
25635: PPUSH
25636: CALL 25748 0 1
// continue ;
25640: GO 25522
// end ; HackCheckCapturedStatus ( i ) ;
25642: LD_VAR 0 1
25646: PPUSH
25647: CALL 26191 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25651: LD_ADDR_VAR 0 2
25655: PUSH
25656: LD_INT 81
25658: PUSH
25659: LD_VAR 0 1
25663: PPUSH
25664: CALL_OW 255
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 33
25675: PUSH
25676: LD_INT 3
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 91
25685: PUSH
25686: LD_VAR 0 1
25690: PUSH
25691: LD_EXP 90
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 50
25703: PUSH
25704: EMPTY
25705: LIST
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: PPUSH
25713: CALL_OW 69
25717: ST_TO_ADDR
// if not tmp then
25718: LD_VAR 0 2
25722: NOT
25723: IFFALSE 25727
// continue ;
25725: GO 25522
// HackLink ( i , tmp ) ;
25727: LD_VAR 0 1
25731: PPUSH
25732: LD_VAR 0 2
25736: PPUSH
25737: CALL 25884 0 2
// end ;
25741: GO 25522
25743: POP
25744: POP
// end ;
25745: PPOPN 2
25747: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25748: LD_INT 0
25750: PPUSH
25751: PPUSH
25752: PPUSH
// if not hack in hackTanks then
25753: LD_VAR 0 1
25757: PUSH
25758: LD_EXP 87
25762: IN
25763: NOT
25764: IFFALSE 25768
// exit ;
25766: GO 25879
// index := GetElementIndex ( hackTanks , hack ) ;
25768: LD_ADDR_VAR 0 4
25772: PUSH
25773: LD_EXP 87
25777: PPUSH
25778: LD_VAR 0 1
25782: PPUSH
25783: CALL 33421 0 2
25787: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25788: LD_EXP 88
25792: PUSH
25793: LD_VAR 0 4
25797: ARRAY
25798: IFFALSE 25879
// begin for i in hackTanksCaptured [ index ] do
25800: LD_ADDR_VAR 0 3
25804: PUSH
25805: LD_EXP 88
25809: PUSH
25810: LD_VAR 0 4
25814: ARRAY
25815: PUSH
25816: FOR_IN
25817: IFFALSE 25843
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25819: LD_VAR 0 3
25823: PUSH
25824: LD_INT 1
25826: ARRAY
25827: PPUSH
25828: LD_VAR 0 3
25832: PUSH
25833: LD_INT 2
25835: ARRAY
25836: PPUSH
25837: CALL_OW 235
25841: GO 25816
25843: POP
25844: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25845: LD_ADDR_EXP 88
25849: PUSH
25850: LD_EXP 88
25854: PPUSH
25855: LD_VAR 0 4
25859: PPUSH
25860: EMPTY
25861: PPUSH
25862: CALL_OW 1
25866: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25867: LD_VAR 0 1
25871: PPUSH
25872: LD_INT 0
25874: PPUSH
25875: CALL_OW 505
// end ; end ;
25879: LD_VAR 0 2
25883: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25884: LD_INT 0
25886: PPUSH
25887: PPUSH
25888: PPUSH
// if not hack in hackTanks or not vehicles then
25889: LD_VAR 0 1
25893: PUSH
25894: LD_EXP 87
25898: IN
25899: NOT
25900: PUSH
25901: LD_VAR 0 2
25905: NOT
25906: OR
25907: IFFALSE 25911
// exit ;
25909: GO 26186
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25911: LD_ADDR_VAR 0 2
25915: PUSH
25916: LD_VAR 0 1
25920: PPUSH
25921: LD_VAR 0 2
25925: PPUSH
25926: LD_INT 1
25928: PPUSH
25929: LD_INT 1
25931: PPUSH
25932: CALL 34071 0 4
25936: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25937: LD_ADDR_VAR 0 5
25941: PUSH
25942: LD_EXP 87
25946: PPUSH
25947: LD_VAR 0 1
25951: PPUSH
25952: CALL 33421 0 2
25956: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25957: LD_EXP 88
25961: PUSH
25962: LD_VAR 0 5
25966: ARRAY
25967: PUSH
25968: LD_EXP 89
25972: LESS
25973: IFFALSE 26162
// begin for i := 1 to vehicles do
25975: LD_ADDR_VAR 0 4
25979: PUSH
25980: DOUBLE
25981: LD_INT 1
25983: DEC
25984: ST_TO_ADDR
25985: LD_VAR 0 2
25989: PUSH
25990: FOR_TO
25991: IFFALSE 26160
// begin if hackTanksCaptured [ index ] = hackLimit then
25993: LD_EXP 88
25997: PUSH
25998: LD_VAR 0 5
26002: ARRAY
26003: PUSH
26004: LD_EXP 89
26008: EQUAL
26009: IFFALSE 26013
// break ;
26011: GO 26160
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26013: LD_ADDR_EXP 91
26017: PUSH
26018: LD_EXP 91
26022: PPUSH
26023: LD_VAR 0 5
26027: PPUSH
26028: LD_EXP 91
26032: PUSH
26033: LD_VAR 0 5
26037: ARRAY
26038: PUSH
26039: LD_INT 1
26041: PLUS
26042: PPUSH
26043: CALL_OW 1
26047: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26048: LD_ADDR_EXP 88
26052: PUSH
26053: LD_EXP 88
26057: PPUSH
26058: LD_VAR 0 5
26062: PUSH
26063: LD_EXP 88
26067: PUSH
26068: LD_VAR 0 5
26072: ARRAY
26073: PUSH
26074: LD_INT 1
26076: PLUS
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PPUSH
26082: LD_VAR 0 2
26086: PUSH
26087: LD_VAR 0 4
26091: ARRAY
26092: PUSH
26093: LD_VAR 0 2
26097: PUSH
26098: LD_VAR 0 4
26102: ARRAY
26103: PPUSH
26104: CALL_OW 255
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PPUSH
26113: CALL 33636 0 3
26117: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26118: LD_VAR 0 2
26122: PUSH
26123: LD_VAR 0 4
26127: ARRAY
26128: PPUSH
26129: LD_VAR 0 1
26133: PPUSH
26134: CALL_OW 255
26138: PPUSH
26139: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26143: LD_VAR 0 2
26147: PUSH
26148: LD_VAR 0 4
26152: ARRAY
26153: PPUSH
26154: CALL_OW 141
// end ;
26158: GO 25990
26160: POP
26161: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26162: LD_VAR 0 1
26166: PPUSH
26167: LD_EXP 88
26171: PUSH
26172: LD_VAR 0 5
26176: ARRAY
26177: PUSH
26178: LD_INT 0
26180: PLUS
26181: PPUSH
26182: CALL_OW 505
// end ;
26186: LD_VAR 0 3
26190: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26191: LD_INT 0
26193: PPUSH
26194: PPUSH
26195: PPUSH
26196: PPUSH
// if not hack in hackTanks then
26197: LD_VAR 0 1
26201: PUSH
26202: LD_EXP 87
26206: IN
26207: NOT
26208: IFFALSE 26212
// exit ;
26210: GO 26452
// index := GetElementIndex ( hackTanks , hack ) ;
26212: LD_ADDR_VAR 0 4
26216: PUSH
26217: LD_EXP 87
26221: PPUSH
26222: LD_VAR 0 1
26226: PPUSH
26227: CALL 33421 0 2
26231: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26232: LD_ADDR_VAR 0 3
26236: PUSH
26237: DOUBLE
26238: LD_EXP 88
26242: PUSH
26243: LD_VAR 0 4
26247: ARRAY
26248: INC
26249: ST_TO_ADDR
26250: LD_INT 1
26252: PUSH
26253: FOR_DOWNTO
26254: IFFALSE 26426
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26256: LD_ADDR_VAR 0 5
26260: PUSH
26261: LD_EXP 88
26265: PUSH
26266: LD_VAR 0 4
26270: ARRAY
26271: PUSH
26272: LD_VAR 0 3
26276: ARRAY
26277: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26278: LD_VAR 0 5
26282: PUSH
26283: LD_INT 1
26285: ARRAY
26286: PPUSH
26287: CALL_OW 302
26291: NOT
26292: PUSH
26293: LD_VAR 0 5
26297: PUSH
26298: LD_INT 1
26300: ARRAY
26301: PPUSH
26302: CALL_OW 255
26306: PUSH
26307: LD_VAR 0 1
26311: PPUSH
26312: CALL_OW 255
26316: NONEQUAL
26317: OR
26318: IFFALSE 26424
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26320: LD_VAR 0 5
26324: PUSH
26325: LD_INT 1
26327: ARRAY
26328: PPUSH
26329: CALL_OW 305
26333: PUSH
26334: LD_VAR 0 5
26338: PUSH
26339: LD_INT 1
26341: ARRAY
26342: PPUSH
26343: CALL_OW 255
26347: PUSH
26348: LD_VAR 0 1
26352: PPUSH
26353: CALL_OW 255
26357: EQUAL
26358: AND
26359: IFFALSE 26383
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26361: LD_VAR 0 5
26365: PUSH
26366: LD_INT 1
26368: ARRAY
26369: PPUSH
26370: LD_VAR 0 5
26374: PUSH
26375: LD_INT 2
26377: ARRAY
26378: PPUSH
26379: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26383: LD_ADDR_EXP 88
26387: PUSH
26388: LD_EXP 88
26392: PPUSH
26393: LD_VAR 0 4
26397: PPUSH
26398: LD_EXP 88
26402: PUSH
26403: LD_VAR 0 4
26407: ARRAY
26408: PPUSH
26409: LD_VAR 0 3
26413: PPUSH
26414: CALL_OW 3
26418: PPUSH
26419: CALL_OW 1
26423: ST_TO_ADDR
// end ; end ;
26424: GO 26253
26426: POP
26427: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26428: LD_VAR 0 1
26432: PPUSH
26433: LD_EXP 88
26437: PUSH
26438: LD_VAR 0 4
26442: ARRAY
26443: PUSH
26444: LD_INT 0
26446: PLUS
26447: PPUSH
26448: CALL_OW 505
// end ;
26452: LD_VAR 0 2
26456: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26457: LD_INT 0
26459: PPUSH
26460: PPUSH
26461: PPUSH
26462: PPUSH
// if not hack in hackTanks then
26463: LD_VAR 0 1
26467: PUSH
26468: LD_EXP 87
26472: IN
26473: NOT
26474: IFFALSE 26478
// exit ;
26476: GO 26563
// index := GetElementIndex ( hackTanks , hack ) ;
26478: LD_ADDR_VAR 0 5
26482: PUSH
26483: LD_EXP 87
26487: PPUSH
26488: LD_VAR 0 1
26492: PPUSH
26493: CALL 33421 0 2
26497: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26498: LD_ADDR_VAR 0 4
26502: PUSH
26503: DOUBLE
26504: LD_INT 1
26506: DEC
26507: ST_TO_ADDR
26508: LD_EXP 88
26512: PUSH
26513: LD_VAR 0 5
26517: ARRAY
26518: PUSH
26519: FOR_TO
26520: IFFALSE 26561
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26522: LD_EXP 88
26526: PUSH
26527: LD_VAR 0 5
26531: ARRAY
26532: PUSH
26533: LD_VAR 0 4
26537: ARRAY
26538: PUSH
26539: LD_INT 1
26541: ARRAY
26542: PUSH
26543: LD_VAR 0 2
26547: EQUAL
26548: IFFALSE 26559
// KillUnit ( vehicle ) ;
26550: LD_VAR 0 2
26554: PPUSH
26555: CALL_OW 66
26559: GO 26519
26561: POP
26562: POP
// end ;
26563: LD_VAR 0 3
26567: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26568: LD_EXP 92
26572: NOT
26573: IFFALSE 26608
26575: GO 26577
26577: DISABLE
// begin initMiner := true ;
26578: LD_ADDR_EXP 92
26582: PUSH
26583: LD_INT 1
26585: ST_TO_ADDR
// minersList := [ ] ;
26586: LD_ADDR_EXP 93
26590: PUSH
26591: EMPTY
26592: ST_TO_ADDR
// minerMinesList := [ ] ;
26593: LD_ADDR_EXP 94
26597: PUSH
26598: EMPTY
26599: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26600: LD_ADDR_EXP 95
26604: PUSH
26605: LD_INT 5
26607: ST_TO_ADDR
// end ;
26608: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26609: LD_EXP 92
26613: PUSH
26614: LD_INT 34
26616: PUSH
26617: LD_INT 81
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PPUSH
26624: CALL_OW 69
26628: AND
26629: IFFALSE 27090
26631: GO 26633
26633: DISABLE
26634: LD_INT 0
26636: PPUSH
26637: PPUSH
26638: PPUSH
26639: PPUSH
// begin enable ;
26640: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26641: LD_ADDR_VAR 0 1
26645: PUSH
26646: LD_INT 34
26648: PUSH
26649: LD_INT 81
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PPUSH
26656: CALL_OW 69
26660: PUSH
26661: FOR_IN
26662: IFFALSE 26734
// begin if not i in minersList then
26664: LD_VAR 0 1
26668: PUSH
26669: LD_EXP 93
26673: IN
26674: NOT
26675: IFFALSE 26732
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26677: LD_ADDR_EXP 93
26681: PUSH
26682: LD_EXP 93
26686: PPUSH
26687: LD_EXP 93
26691: PUSH
26692: LD_INT 1
26694: PLUS
26695: PPUSH
26696: LD_VAR 0 1
26700: PPUSH
26701: CALL_OW 1
26705: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26706: LD_ADDR_EXP 94
26710: PUSH
26711: LD_EXP 94
26715: PPUSH
26716: LD_EXP 94
26720: PUSH
26721: LD_INT 1
26723: PLUS
26724: PPUSH
26725: EMPTY
26726: PPUSH
26727: CALL_OW 1
26731: ST_TO_ADDR
// end end ;
26732: GO 26661
26734: POP
26735: POP
// for i := minerMinesList downto 1 do
26736: LD_ADDR_VAR 0 1
26740: PUSH
26741: DOUBLE
26742: LD_EXP 94
26746: INC
26747: ST_TO_ADDR
26748: LD_INT 1
26750: PUSH
26751: FOR_DOWNTO
26752: IFFALSE 27088
// begin if IsLive ( minersList [ i ] ) then
26754: LD_EXP 93
26758: PUSH
26759: LD_VAR 0 1
26763: ARRAY
26764: PPUSH
26765: CALL_OW 300
26769: IFFALSE 26797
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26771: LD_EXP 93
26775: PUSH
26776: LD_VAR 0 1
26780: ARRAY
26781: PPUSH
26782: LD_EXP 94
26786: PUSH
26787: LD_VAR 0 1
26791: ARRAY
26792: PPUSH
26793: CALL_OW 505
// if not minerMinesList [ i ] then
26797: LD_EXP 94
26801: PUSH
26802: LD_VAR 0 1
26806: ARRAY
26807: NOT
26808: IFFALSE 26812
// continue ;
26810: GO 26751
// for j := minerMinesList [ i ] downto 1 do
26812: LD_ADDR_VAR 0 2
26816: PUSH
26817: DOUBLE
26818: LD_EXP 94
26822: PUSH
26823: LD_VAR 0 1
26827: ARRAY
26828: INC
26829: ST_TO_ADDR
26830: LD_INT 1
26832: PUSH
26833: FOR_DOWNTO
26834: IFFALSE 27084
// begin side := GetSide ( minersList [ i ] ) ;
26836: LD_ADDR_VAR 0 3
26840: PUSH
26841: LD_EXP 93
26845: PUSH
26846: LD_VAR 0 1
26850: ARRAY
26851: PPUSH
26852: CALL_OW 255
26856: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26857: LD_ADDR_VAR 0 4
26861: PUSH
26862: LD_EXP 94
26866: PUSH
26867: LD_VAR 0 1
26871: ARRAY
26872: PUSH
26873: LD_VAR 0 2
26877: ARRAY
26878: PUSH
26879: LD_INT 1
26881: ARRAY
26882: PPUSH
26883: LD_EXP 94
26887: PUSH
26888: LD_VAR 0 1
26892: ARRAY
26893: PUSH
26894: LD_VAR 0 2
26898: ARRAY
26899: PUSH
26900: LD_INT 2
26902: ARRAY
26903: PPUSH
26904: CALL_OW 428
26908: ST_TO_ADDR
// if not tmp then
26909: LD_VAR 0 4
26913: NOT
26914: IFFALSE 26918
// continue ;
26916: GO 26833
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26918: LD_VAR 0 4
26922: PUSH
26923: LD_INT 81
26925: PUSH
26926: LD_VAR 0 3
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PPUSH
26935: CALL_OW 69
26939: IN
26940: PUSH
26941: LD_EXP 94
26945: PUSH
26946: LD_VAR 0 1
26950: ARRAY
26951: PUSH
26952: LD_VAR 0 2
26956: ARRAY
26957: PUSH
26958: LD_INT 1
26960: ARRAY
26961: PPUSH
26962: LD_EXP 94
26966: PUSH
26967: LD_VAR 0 1
26971: ARRAY
26972: PUSH
26973: LD_VAR 0 2
26977: ARRAY
26978: PUSH
26979: LD_INT 2
26981: ARRAY
26982: PPUSH
26983: CALL_OW 458
26987: AND
26988: IFFALSE 27082
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26990: LD_EXP 94
26994: PUSH
26995: LD_VAR 0 1
26999: ARRAY
27000: PUSH
27001: LD_VAR 0 2
27005: ARRAY
27006: PUSH
27007: LD_INT 1
27009: ARRAY
27010: PPUSH
27011: LD_EXP 94
27015: PUSH
27016: LD_VAR 0 1
27020: ARRAY
27021: PUSH
27022: LD_VAR 0 2
27026: ARRAY
27027: PUSH
27028: LD_INT 2
27030: ARRAY
27031: PPUSH
27032: LD_VAR 0 3
27036: PPUSH
27037: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27041: LD_ADDR_EXP 94
27045: PUSH
27046: LD_EXP 94
27050: PPUSH
27051: LD_VAR 0 1
27055: PPUSH
27056: LD_EXP 94
27060: PUSH
27061: LD_VAR 0 1
27065: ARRAY
27066: PPUSH
27067: LD_VAR 0 2
27071: PPUSH
27072: CALL_OW 3
27076: PPUSH
27077: CALL_OW 1
27081: ST_TO_ADDR
// end ; end ;
27082: GO 26833
27084: POP
27085: POP
// end ;
27086: GO 26751
27088: POP
27089: POP
// end ;
27090: PPOPN 4
27092: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27093: LD_INT 0
27095: PPUSH
27096: PPUSH
// result := false ;
27097: LD_ADDR_VAR 0 4
27101: PUSH
27102: LD_INT 0
27104: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27105: LD_VAR 0 1
27109: PPUSH
27110: CALL_OW 264
27114: PUSH
27115: LD_INT 81
27117: EQUAL
27118: NOT
27119: IFFALSE 27123
// exit ;
27121: GO 27363
// index := GetElementIndex ( minersList , unit ) ;
27123: LD_ADDR_VAR 0 5
27127: PUSH
27128: LD_EXP 93
27132: PPUSH
27133: LD_VAR 0 1
27137: PPUSH
27138: CALL 33421 0 2
27142: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27143: LD_EXP 94
27147: PUSH
27148: LD_VAR 0 5
27152: ARRAY
27153: PUSH
27154: LD_EXP 95
27158: GREATEREQUAL
27159: IFFALSE 27163
// exit ;
27161: GO 27363
// ComMoveXY ( unit , x , y ) ;
27163: LD_VAR 0 1
27167: PPUSH
27168: LD_VAR 0 2
27172: PPUSH
27173: LD_VAR 0 3
27177: PPUSH
27178: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27182: LD_INT 35
27184: PPUSH
27185: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27189: LD_VAR 0 1
27193: PPUSH
27194: LD_VAR 0 2
27198: PPUSH
27199: LD_VAR 0 3
27203: PPUSH
27204: CALL 65182 0 3
27208: NOT
27209: PUSH
27210: LD_VAR 0 1
27214: PPUSH
27215: CALL_OW 314
27219: AND
27220: IFFALSE 27224
// exit ;
27222: GO 27363
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27224: LD_VAR 0 2
27228: PPUSH
27229: LD_VAR 0 3
27233: PPUSH
27234: CALL_OW 428
27238: PUSH
27239: LD_VAR 0 1
27243: EQUAL
27244: PUSH
27245: LD_VAR 0 1
27249: PPUSH
27250: CALL_OW 314
27254: NOT
27255: AND
27256: IFFALSE 27182
// PlaySoundXY ( x , y , PlantMine ) ;
27258: LD_VAR 0 2
27262: PPUSH
27263: LD_VAR 0 3
27267: PPUSH
27268: LD_STRING PlantMine
27270: PPUSH
27271: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27275: LD_VAR 0 2
27279: PPUSH
27280: LD_VAR 0 3
27284: PPUSH
27285: LD_VAR 0 1
27289: PPUSH
27290: CALL_OW 255
27294: PPUSH
27295: LD_INT 0
27297: PPUSH
27298: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27302: LD_ADDR_EXP 94
27306: PUSH
27307: LD_EXP 94
27311: PPUSH
27312: LD_VAR 0 5
27316: PUSH
27317: LD_EXP 94
27321: PUSH
27322: LD_VAR 0 5
27326: ARRAY
27327: PUSH
27328: LD_INT 1
27330: PLUS
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PPUSH
27336: LD_VAR 0 2
27340: PUSH
27341: LD_VAR 0 3
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PPUSH
27350: CALL 33636 0 3
27354: ST_TO_ADDR
// result := true ;
27355: LD_ADDR_VAR 0 4
27359: PUSH
27360: LD_INT 1
27362: ST_TO_ADDR
// end ;
27363: LD_VAR 0 4
27367: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27368: LD_INT 0
27370: PPUSH
27371: PPUSH
27372: PPUSH
// if not unit in minersList then
27373: LD_VAR 0 1
27377: PUSH
27378: LD_EXP 93
27382: IN
27383: NOT
27384: IFFALSE 27388
// exit ;
27386: GO 27780
// index := GetElementIndex ( minersList , unit ) ;
27388: LD_ADDR_VAR 0 6
27392: PUSH
27393: LD_EXP 93
27397: PPUSH
27398: LD_VAR 0 1
27402: PPUSH
27403: CALL 33421 0 2
27407: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27408: LD_ADDR_VAR 0 5
27412: PUSH
27413: DOUBLE
27414: LD_EXP 94
27418: PUSH
27419: LD_VAR 0 6
27423: ARRAY
27424: INC
27425: ST_TO_ADDR
27426: LD_INT 1
27428: PUSH
27429: FOR_DOWNTO
27430: IFFALSE 27591
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27432: LD_EXP 94
27436: PUSH
27437: LD_VAR 0 6
27441: ARRAY
27442: PUSH
27443: LD_VAR 0 5
27447: ARRAY
27448: PUSH
27449: LD_INT 1
27451: ARRAY
27452: PUSH
27453: LD_VAR 0 2
27457: EQUAL
27458: PUSH
27459: LD_EXP 94
27463: PUSH
27464: LD_VAR 0 6
27468: ARRAY
27469: PUSH
27470: LD_VAR 0 5
27474: ARRAY
27475: PUSH
27476: LD_INT 2
27478: ARRAY
27479: PUSH
27480: LD_VAR 0 3
27484: EQUAL
27485: AND
27486: IFFALSE 27589
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27488: LD_EXP 94
27492: PUSH
27493: LD_VAR 0 6
27497: ARRAY
27498: PUSH
27499: LD_VAR 0 5
27503: ARRAY
27504: PUSH
27505: LD_INT 1
27507: ARRAY
27508: PPUSH
27509: LD_EXP 94
27513: PUSH
27514: LD_VAR 0 6
27518: ARRAY
27519: PUSH
27520: LD_VAR 0 5
27524: ARRAY
27525: PUSH
27526: LD_INT 2
27528: ARRAY
27529: PPUSH
27530: LD_VAR 0 1
27534: PPUSH
27535: CALL_OW 255
27539: PPUSH
27540: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27544: LD_ADDR_EXP 94
27548: PUSH
27549: LD_EXP 94
27553: PPUSH
27554: LD_VAR 0 6
27558: PPUSH
27559: LD_EXP 94
27563: PUSH
27564: LD_VAR 0 6
27568: ARRAY
27569: PPUSH
27570: LD_VAR 0 5
27574: PPUSH
27575: CALL_OW 3
27579: PPUSH
27580: CALL_OW 1
27584: ST_TO_ADDR
// exit ;
27585: POP
27586: POP
27587: GO 27780
// end ; end ;
27589: GO 27429
27591: POP
27592: POP
// for i := minerMinesList [ index ] downto 1 do
27593: LD_ADDR_VAR 0 5
27597: PUSH
27598: DOUBLE
27599: LD_EXP 94
27603: PUSH
27604: LD_VAR 0 6
27608: ARRAY
27609: INC
27610: ST_TO_ADDR
27611: LD_INT 1
27613: PUSH
27614: FOR_DOWNTO
27615: IFFALSE 27778
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27617: LD_EXP 94
27621: PUSH
27622: LD_VAR 0 6
27626: ARRAY
27627: PUSH
27628: LD_VAR 0 5
27632: ARRAY
27633: PUSH
27634: LD_INT 1
27636: ARRAY
27637: PPUSH
27638: LD_EXP 94
27642: PUSH
27643: LD_VAR 0 6
27647: ARRAY
27648: PUSH
27649: LD_VAR 0 5
27653: ARRAY
27654: PUSH
27655: LD_INT 2
27657: ARRAY
27658: PPUSH
27659: LD_VAR 0 2
27663: PPUSH
27664: LD_VAR 0 3
27668: PPUSH
27669: CALL_OW 298
27673: PUSH
27674: LD_INT 6
27676: LESS
27677: IFFALSE 27776
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27679: LD_EXP 94
27683: PUSH
27684: LD_VAR 0 6
27688: ARRAY
27689: PUSH
27690: LD_VAR 0 5
27694: ARRAY
27695: PUSH
27696: LD_INT 1
27698: ARRAY
27699: PPUSH
27700: LD_EXP 94
27704: PUSH
27705: LD_VAR 0 6
27709: ARRAY
27710: PUSH
27711: LD_VAR 0 5
27715: ARRAY
27716: PUSH
27717: LD_INT 2
27719: ARRAY
27720: PPUSH
27721: LD_VAR 0 1
27725: PPUSH
27726: CALL_OW 255
27730: PPUSH
27731: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27735: LD_ADDR_EXP 94
27739: PUSH
27740: LD_EXP 94
27744: PPUSH
27745: LD_VAR 0 6
27749: PPUSH
27750: LD_EXP 94
27754: PUSH
27755: LD_VAR 0 6
27759: ARRAY
27760: PPUSH
27761: LD_VAR 0 5
27765: PPUSH
27766: CALL_OW 3
27770: PPUSH
27771: CALL_OW 1
27775: ST_TO_ADDR
// end ; end ;
27776: GO 27614
27778: POP
27779: POP
// end ;
27780: LD_VAR 0 4
27784: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27785: LD_INT 0
27787: PPUSH
27788: PPUSH
27789: PPUSH
27790: PPUSH
27791: PPUSH
27792: PPUSH
27793: PPUSH
27794: PPUSH
27795: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27796: LD_VAR 0 1
27800: PPUSH
27801: CALL_OW 264
27805: PUSH
27806: LD_INT 81
27808: EQUAL
27809: NOT
27810: PUSH
27811: LD_VAR 0 1
27815: PUSH
27816: LD_EXP 93
27820: IN
27821: NOT
27822: OR
27823: IFFALSE 27827
// exit ;
27825: GO 28149
// index := GetElementIndex ( minersList , unit ) ;
27827: LD_ADDR_VAR 0 6
27831: PUSH
27832: LD_EXP 93
27836: PPUSH
27837: LD_VAR 0 1
27841: PPUSH
27842: CALL 33421 0 2
27846: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27847: LD_ADDR_VAR 0 8
27851: PUSH
27852: LD_EXP 95
27856: PUSH
27857: LD_EXP 94
27861: PUSH
27862: LD_VAR 0 6
27866: ARRAY
27867: MINUS
27868: ST_TO_ADDR
// if not minesFreeAmount then
27869: LD_VAR 0 8
27873: NOT
27874: IFFALSE 27878
// exit ;
27876: GO 28149
// tmp := [ ] ;
27878: LD_ADDR_VAR 0 7
27882: PUSH
27883: EMPTY
27884: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27885: LD_ADDR_VAR 0 5
27889: PUSH
27890: DOUBLE
27891: LD_INT 1
27893: DEC
27894: ST_TO_ADDR
27895: LD_VAR 0 8
27899: PUSH
27900: FOR_TO
27901: IFFALSE 28096
// begin _d := rand ( 0 , 5 ) ;
27903: LD_ADDR_VAR 0 11
27907: PUSH
27908: LD_INT 0
27910: PPUSH
27911: LD_INT 5
27913: PPUSH
27914: CALL_OW 12
27918: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27919: LD_ADDR_VAR 0 12
27923: PUSH
27924: LD_INT 2
27926: PPUSH
27927: LD_INT 6
27929: PPUSH
27930: CALL_OW 12
27934: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27935: LD_ADDR_VAR 0 9
27939: PUSH
27940: LD_VAR 0 2
27944: PPUSH
27945: LD_VAR 0 11
27949: PPUSH
27950: LD_VAR 0 12
27954: PPUSH
27955: CALL_OW 272
27959: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27960: LD_ADDR_VAR 0 10
27964: PUSH
27965: LD_VAR 0 3
27969: PPUSH
27970: LD_VAR 0 11
27974: PPUSH
27975: LD_VAR 0 12
27979: PPUSH
27980: CALL_OW 273
27984: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27985: LD_VAR 0 9
27989: PPUSH
27990: LD_VAR 0 10
27994: PPUSH
27995: CALL_OW 488
27999: PUSH
28000: LD_VAR 0 9
28004: PUSH
28005: LD_VAR 0 10
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_VAR 0 7
28018: IN
28019: NOT
28020: AND
28021: PUSH
28022: LD_VAR 0 9
28026: PPUSH
28027: LD_VAR 0 10
28031: PPUSH
28032: CALL_OW 458
28036: NOT
28037: AND
28038: IFFALSE 28080
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28040: LD_ADDR_VAR 0 7
28044: PUSH
28045: LD_VAR 0 7
28049: PPUSH
28050: LD_VAR 0 7
28054: PUSH
28055: LD_INT 1
28057: PLUS
28058: PPUSH
28059: LD_VAR 0 9
28063: PUSH
28064: LD_VAR 0 10
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PPUSH
28073: CALL_OW 1
28077: ST_TO_ADDR
28078: GO 28094
// i := i - 1 ;
28080: LD_ADDR_VAR 0 5
28084: PUSH
28085: LD_VAR 0 5
28089: PUSH
28090: LD_INT 1
28092: MINUS
28093: ST_TO_ADDR
// end ;
28094: GO 27900
28096: POP
28097: POP
// for i in tmp do
28098: LD_ADDR_VAR 0 5
28102: PUSH
28103: LD_VAR 0 7
28107: PUSH
28108: FOR_IN
28109: IFFALSE 28147
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28111: LD_VAR 0 1
28115: PPUSH
28116: LD_VAR 0 5
28120: PUSH
28121: LD_INT 1
28123: ARRAY
28124: PPUSH
28125: LD_VAR 0 5
28129: PUSH
28130: LD_INT 2
28132: ARRAY
28133: PPUSH
28134: CALL 27093 0 3
28138: NOT
28139: IFFALSE 28145
// exit ;
28141: POP
28142: POP
28143: GO 28149
28145: GO 28108
28147: POP
28148: POP
// end ;
28149: LD_VAR 0 4
28153: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
28154: LD_INT 0
28156: PPUSH
28157: PPUSH
28158: PPUSH
28159: PPUSH
28160: PPUSH
28161: PPUSH
28162: PPUSH
28163: PPUSH
28164: PPUSH
// if GetClass ( unit ) <> class_sniper then
28165: LD_VAR 0 1
28169: PPUSH
28170: CALL_OW 257
28174: PUSH
28175: LD_INT 5
28177: NONEQUAL
28178: IFFALSE 28182
// exit ;
28180: GO 28648
// dist := 8 ;
28182: LD_ADDR_VAR 0 5
28186: PUSH
28187: LD_INT 8
28189: ST_TO_ADDR
// viewRange := 12 ;
28190: LD_ADDR_VAR 0 8
28194: PUSH
28195: LD_INT 12
28197: ST_TO_ADDR
// side := GetSide ( unit ) ;
28198: LD_ADDR_VAR 0 6
28202: PUSH
28203: LD_VAR 0 1
28207: PPUSH
28208: CALL_OW 255
28212: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28213: LD_INT 61
28215: PPUSH
28216: LD_VAR 0 6
28220: PPUSH
28221: CALL_OW 321
28225: PUSH
28226: LD_INT 2
28228: EQUAL
28229: IFFALSE 28239
// viewRange := 16 ;
28231: LD_ADDR_VAR 0 8
28235: PUSH
28236: LD_INT 16
28238: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28239: LD_VAR 0 1
28243: PPUSH
28244: LD_VAR 0 2
28248: PPUSH
28249: LD_VAR 0 3
28253: PPUSH
28254: CALL_OW 297
28258: PUSH
28259: LD_VAR 0 5
28263: GREATER
28264: IFFALSE 28343
// begin ComMoveXY ( unit , x , y ) ;
28266: LD_VAR 0 1
28270: PPUSH
28271: LD_VAR 0 2
28275: PPUSH
28276: LD_VAR 0 3
28280: PPUSH
28281: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28285: LD_INT 35
28287: PPUSH
28288: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28292: LD_VAR 0 1
28296: PPUSH
28297: LD_VAR 0 2
28301: PPUSH
28302: LD_VAR 0 3
28306: PPUSH
28307: CALL 65182 0 3
28311: NOT
28312: IFFALSE 28316
// exit ;
28314: GO 28648
// until GetDistUnitXY ( unit , x , y ) < dist ;
28316: LD_VAR 0 1
28320: PPUSH
28321: LD_VAR 0 2
28325: PPUSH
28326: LD_VAR 0 3
28330: PPUSH
28331: CALL_OW 297
28335: PUSH
28336: LD_VAR 0 5
28340: LESS
28341: IFFALSE 28285
// end ; ComTurnXY ( unit , x , y ) ;
28343: LD_VAR 0 1
28347: PPUSH
28348: LD_VAR 0 2
28352: PPUSH
28353: LD_VAR 0 3
28357: PPUSH
28358: CALL_OW 118
// repeat if Multiplayer then
28362: LD_OWVAR 4
28366: IFFALSE 28377
// wait ( 35 ) else
28368: LD_INT 35
28370: PPUSH
28371: CALL_OW 67
28375: GO 28384
// wait ( 5 ) ;
28377: LD_INT 5
28379: PPUSH
28380: CALL_OW 67
// _d := GetDir ( unit ) ;
28384: LD_ADDR_VAR 0 11
28388: PUSH
28389: LD_VAR 0 1
28393: PPUSH
28394: CALL_OW 254
28398: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
28399: LD_ADDR_VAR 0 7
28403: PUSH
28404: LD_VAR 0 1
28408: PPUSH
28409: CALL_OW 250
28413: PPUSH
28414: LD_VAR 0 1
28418: PPUSH
28419: CALL_OW 251
28423: PPUSH
28424: LD_VAR 0 2
28428: PPUSH
28429: LD_VAR 0 3
28433: PPUSH
28434: CALL 67790 0 4
28438: ST_TO_ADDR
// until dir = _d ;
28439: LD_VAR 0 7
28443: PUSH
28444: LD_VAR 0 11
28448: EQUAL
28449: IFFALSE 28362
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
28451: LD_ADDR_VAR 0 9
28455: PUSH
28456: LD_VAR 0 1
28460: PPUSH
28461: CALL_OW 250
28465: PPUSH
28466: LD_VAR 0 7
28470: PPUSH
28471: LD_VAR 0 5
28475: PPUSH
28476: CALL_OW 272
28480: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
28481: LD_ADDR_VAR 0 10
28485: PUSH
28486: LD_VAR 0 1
28490: PPUSH
28491: CALL_OW 251
28495: PPUSH
28496: LD_VAR 0 7
28500: PPUSH
28501: LD_VAR 0 5
28505: PPUSH
28506: CALL_OW 273
28510: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28511: LD_VAR 0 9
28515: PPUSH
28516: LD_VAR 0 10
28520: PPUSH
28521: CALL_OW 488
28525: NOT
28526: IFFALSE 28530
// exit ;
28528: GO 28648
// ComAnimCustom ( unit , 1 ) ;
28530: LD_VAR 0 1
28534: PPUSH
28535: LD_INT 1
28537: PPUSH
28538: CALL_OW 592
// p := 0 ;
28542: LD_ADDR_VAR 0 12
28546: PUSH
28547: LD_INT 0
28549: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28550: LD_VAR 0 9
28554: PPUSH
28555: LD_VAR 0 10
28559: PPUSH
28560: LD_VAR 0 6
28564: PPUSH
28565: LD_VAR 0 8
28569: PPUSH
28570: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
28574: LD_INT 35
28576: PPUSH
28577: CALL_OW 67
// p := Inc ( p ) ;
28581: LD_ADDR_VAR 0 12
28585: PUSH
28586: LD_VAR 0 12
28590: PPUSH
28591: CALL 67746 0 1
28595: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
28596: LD_VAR 0 12
28600: PUSH
28601: LD_INT 3
28603: EQUAL
28604: PUSH
28605: LD_VAR 0 1
28609: PPUSH
28610: CALL_OW 302
28614: NOT
28615: OR
28616: PUSH
28617: LD_VAR 0 1
28621: PPUSH
28622: CALL_OW 301
28626: OR
28627: IFFALSE 28574
// RemoveSeeing ( _x , _y , side ) ;
28629: LD_VAR 0 9
28633: PPUSH
28634: LD_VAR 0 10
28638: PPUSH
28639: LD_VAR 0 6
28643: PPUSH
28644: CALL_OW 331
// end ; end_of_file
28648: LD_VAR 0 4
28652: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28653: LD_INT 0
28655: PPUSH
28656: PPUSH
// if exist_mode then
28657: LD_VAR 0 2
28661: IFFALSE 28707
// begin unit := CreateCharacter ( prefix & ident ) ;
28663: LD_ADDR_VAR 0 5
28667: PUSH
28668: LD_VAR 0 3
28672: PUSH
28673: LD_VAR 0 1
28677: STR
28678: PPUSH
28679: CALL_OW 34
28683: ST_TO_ADDR
// if unit then
28684: LD_VAR 0 5
28688: IFFALSE 28705
// DeleteCharacters ( prefix & ident ) ;
28690: LD_VAR 0 3
28694: PUSH
28695: LD_VAR 0 1
28699: STR
28700: PPUSH
28701: CALL_OW 40
// end else
28705: GO 28722
// unit := NewCharacter ( ident ) ;
28707: LD_ADDR_VAR 0 5
28711: PUSH
28712: LD_VAR 0 1
28716: PPUSH
28717: CALL_OW 25
28721: ST_TO_ADDR
// result := unit ;
28722: LD_ADDR_VAR 0 4
28726: PUSH
28727: LD_VAR 0 5
28731: ST_TO_ADDR
// end ;
28732: LD_VAR 0 4
28736: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28737: LD_INT 0
28739: PPUSH
28740: PPUSH
// if not side or not nation then
28741: LD_VAR 0 1
28745: NOT
28746: PUSH
28747: LD_VAR 0 2
28751: NOT
28752: OR
28753: IFFALSE 28757
// exit ;
28755: GO 29525
// case nation of nation_american :
28757: LD_VAR 0 2
28761: PUSH
28762: LD_INT 1
28764: DOUBLE
28765: EQUAL
28766: IFTRUE 28770
28768: GO 28984
28770: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28771: LD_ADDR_VAR 0 4
28775: PUSH
28776: LD_INT 35
28778: PUSH
28779: LD_INT 45
28781: PUSH
28782: LD_INT 46
28784: PUSH
28785: LD_INT 47
28787: PUSH
28788: LD_INT 82
28790: PUSH
28791: LD_INT 83
28793: PUSH
28794: LD_INT 84
28796: PUSH
28797: LD_INT 85
28799: PUSH
28800: LD_INT 86
28802: PUSH
28803: LD_INT 1
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: LD_INT 6
28811: PUSH
28812: LD_INT 15
28814: PUSH
28815: LD_INT 16
28817: PUSH
28818: LD_INT 7
28820: PUSH
28821: LD_INT 12
28823: PUSH
28824: LD_INT 13
28826: PUSH
28827: LD_INT 10
28829: PUSH
28830: LD_INT 14
28832: PUSH
28833: LD_INT 20
28835: PUSH
28836: LD_INT 21
28838: PUSH
28839: LD_INT 22
28841: PUSH
28842: LD_INT 25
28844: PUSH
28845: LD_INT 32
28847: PUSH
28848: LD_INT 27
28850: PUSH
28851: LD_INT 36
28853: PUSH
28854: LD_INT 69
28856: PUSH
28857: LD_INT 39
28859: PUSH
28860: LD_INT 34
28862: PUSH
28863: LD_INT 40
28865: PUSH
28866: LD_INT 48
28868: PUSH
28869: LD_INT 49
28871: PUSH
28872: LD_INT 50
28874: PUSH
28875: LD_INT 51
28877: PUSH
28878: LD_INT 52
28880: PUSH
28881: LD_INT 53
28883: PUSH
28884: LD_INT 54
28886: PUSH
28887: LD_INT 55
28889: PUSH
28890: LD_INT 56
28892: PUSH
28893: LD_INT 57
28895: PUSH
28896: LD_INT 58
28898: PUSH
28899: LD_INT 59
28901: PUSH
28902: LD_INT 60
28904: PUSH
28905: LD_INT 61
28907: PUSH
28908: LD_INT 62
28910: PUSH
28911: LD_INT 80
28913: PUSH
28914: LD_INT 82
28916: PUSH
28917: LD_INT 83
28919: PUSH
28920: LD_INT 84
28922: PUSH
28923: LD_INT 85
28925: PUSH
28926: LD_INT 86
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: ST_TO_ADDR
28982: GO 29449
28984: LD_INT 2
28986: DOUBLE
28987: EQUAL
28988: IFTRUE 28992
28990: GO 29218
28992: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28993: LD_ADDR_VAR 0 4
28997: PUSH
28998: LD_INT 35
29000: PUSH
29001: LD_INT 45
29003: PUSH
29004: LD_INT 46
29006: PUSH
29007: LD_INT 47
29009: PUSH
29010: LD_INT 82
29012: PUSH
29013: LD_INT 83
29015: PUSH
29016: LD_INT 84
29018: PUSH
29019: LD_INT 85
29021: PUSH
29022: LD_INT 87
29024: PUSH
29025: LD_INT 70
29027: PUSH
29028: LD_INT 1
29030: PUSH
29031: LD_INT 11
29033: PUSH
29034: LD_INT 3
29036: PUSH
29037: LD_INT 4
29039: PUSH
29040: LD_INT 5
29042: PUSH
29043: LD_INT 6
29045: PUSH
29046: LD_INT 15
29048: PUSH
29049: LD_INT 18
29051: PUSH
29052: LD_INT 7
29054: PUSH
29055: LD_INT 17
29057: PUSH
29058: LD_INT 8
29060: PUSH
29061: LD_INT 20
29063: PUSH
29064: LD_INT 21
29066: PUSH
29067: LD_INT 22
29069: PUSH
29070: LD_INT 72
29072: PUSH
29073: LD_INT 26
29075: PUSH
29076: LD_INT 69
29078: PUSH
29079: LD_INT 39
29081: PUSH
29082: LD_INT 40
29084: PUSH
29085: LD_INT 41
29087: PUSH
29088: LD_INT 42
29090: PUSH
29091: LD_INT 43
29093: PUSH
29094: LD_INT 48
29096: PUSH
29097: LD_INT 49
29099: PUSH
29100: LD_INT 50
29102: PUSH
29103: LD_INT 51
29105: PUSH
29106: LD_INT 52
29108: PUSH
29109: LD_INT 53
29111: PUSH
29112: LD_INT 54
29114: PUSH
29115: LD_INT 55
29117: PUSH
29118: LD_INT 56
29120: PUSH
29121: LD_INT 60
29123: PUSH
29124: LD_INT 61
29126: PUSH
29127: LD_INT 62
29129: PUSH
29130: LD_INT 66
29132: PUSH
29133: LD_INT 67
29135: PUSH
29136: LD_INT 68
29138: PUSH
29139: LD_INT 81
29141: PUSH
29142: LD_INT 82
29144: PUSH
29145: LD_INT 83
29147: PUSH
29148: LD_INT 84
29150: PUSH
29151: LD_INT 85
29153: PUSH
29154: LD_INT 87
29156: PUSH
29157: LD_INT 88
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: ST_TO_ADDR
29216: GO 29449
29218: LD_INT 3
29220: DOUBLE
29221: EQUAL
29222: IFTRUE 29226
29224: GO 29448
29226: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29227: LD_ADDR_VAR 0 4
29231: PUSH
29232: LD_INT 46
29234: PUSH
29235: LD_INT 47
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: LD_INT 2
29243: PUSH
29244: LD_INT 82
29246: PUSH
29247: LD_INT 83
29249: PUSH
29250: LD_INT 84
29252: PUSH
29253: LD_INT 85
29255: PUSH
29256: LD_INT 86
29258: PUSH
29259: LD_INT 11
29261: PUSH
29262: LD_INT 9
29264: PUSH
29265: LD_INT 20
29267: PUSH
29268: LD_INT 19
29270: PUSH
29271: LD_INT 21
29273: PUSH
29274: LD_INT 24
29276: PUSH
29277: LD_INT 22
29279: PUSH
29280: LD_INT 25
29282: PUSH
29283: LD_INT 28
29285: PUSH
29286: LD_INT 29
29288: PUSH
29289: LD_INT 30
29291: PUSH
29292: LD_INT 31
29294: PUSH
29295: LD_INT 37
29297: PUSH
29298: LD_INT 38
29300: PUSH
29301: LD_INT 32
29303: PUSH
29304: LD_INT 27
29306: PUSH
29307: LD_INT 33
29309: PUSH
29310: LD_INT 69
29312: PUSH
29313: LD_INT 39
29315: PUSH
29316: LD_INT 34
29318: PUSH
29319: LD_INT 40
29321: PUSH
29322: LD_INT 71
29324: PUSH
29325: LD_INT 23
29327: PUSH
29328: LD_INT 44
29330: PUSH
29331: LD_INT 48
29333: PUSH
29334: LD_INT 49
29336: PUSH
29337: LD_INT 50
29339: PUSH
29340: LD_INT 51
29342: PUSH
29343: LD_INT 52
29345: PUSH
29346: LD_INT 53
29348: PUSH
29349: LD_INT 54
29351: PUSH
29352: LD_INT 55
29354: PUSH
29355: LD_INT 56
29357: PUSH
29358: LD_INT 57
29360: PUSH
29361: LD_INT 58
29363: PUSH
29364: LD_INT 59
29366: PUSH
29367: LD_INT 63
29369: PUSH
29370: LD_INT 64
29372: PUSH
29373: LD_INT 65
29375: PUSH
29376: LD_INT 82
29378: PUSH
29379: LD_INT 83
29381: PUSH
29382: LD_INT 84
29384: PUSH
29385: LD_INT 85
29387: PUSH
29388: LD_INT 86
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: ST_TO_ADDR
29446: GO 29449
29448: POP
// if state > - 1 and state < 3 then
29449: LD_VAR 0 3
29453: PUSH
29454: LD_INT 1
29456: NEG
29457: GREATER
29458: PUSH
29459: LD_VAR 0 3
29463: PUSH
29464: LD_INT 3
29466: LESS
29467: AND
29468: IFFALSE 29525
// for i in result do
29470: LD_ADDR_VAR 0 5
29474: PUSH
29475: LD_VAR 0 4
29479: PUSH
29480: FOR_IN
29481: IFFALSE 29523
// if GetTech ( i , side ) <> state then
29483: LD_VAR 0 5
29487: PPUSH
29488: LD_VAR 0 1
29492: PPUSH
29493: CALL_OW 321
29497: PUSH
29498: LD_VAR 0 3
29502: NONEQUAL
29503: IFFALSE 29521
// result := result diff i ;
29505: LD_ADDR_VAR 0 4
29509: PUSH
29510: LD_VAR 0 4
29514: PUSH
29515: LD_VAR 0 5
29519: DIFF
29520: ST_TO_ADDR
29521: GO 29480
29523: POP
29524: POP
// end ;
29525: LD_VAR 0 4
29529: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29530: LD_INT 0
29532: PPUSH
29533: PPUSH
29534: PPUSH
// result := true ;
29535: LD_ADDR_VAR 0 3
29539: PUSH
29540: LD_INT 1
29542: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29543: LD_ADDR_VAR 0 5
29547: PUSH
29548: LD_VAR 0 2
29552: PPUSH
29553: CALL_OW 480
29557: ST_TO_ADDR
// if not tmp then
29558: LD_VAR 0 5
29562: NOT
29563: IFFALSE 29567
// exit ;
29565: GO 29616
// for i in tmp do
29567: LD_ADDR_VAR 0 4
29571: PUSH
29572: LD_VAR 0 5
29576: PUSH
29577: FOR_IN
29578: IFFALSE 29614
// if GetTech ( i , side ) <> state_researched then
29580: LD_VAR 0 4
29584: PPUSH
29585: LD_VAR 0 1
29589: PPUSH
29590: CALL_OW 321
29594: PUSH
29595: LD_INT 2
29597: NONEQUAL
29598: IFFALSE 29612
// begin result := false ;
29600: LD_ADDR_VAR 0 3
29604: PUSH
29605: LD_INT 0
29607: ST_TO_ADDR
// exit ;
29608: POP
29609: POP
29610: GO 29616
// end ;
29612: GO 29577
29614: POP
29615: POP
// end ;
29616: LD_VAR 0 3
29620: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29621: LD_INT 0
29623: PPUSH
29624: PPUSH
29625: PPUSH
29626: PPUSH
29627: PPUSH
29628: PPUSH
29629: PPUSH
29630: PPUSH
29631: PPUSH
29632: PPUSH
29633: PPUSH
29634: PPUSH
29635: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29636: LD_VAR 0 1
29640: NOT
29641: PUSH
29642: LD_VAR 0 1
29646: PPUSH
29647: CALL_OW 257
29651: PUSH
29652: LD_INT 9
29654: NONEQUAL
29655: OR
29656: IFFALSE 29660
// exit ;
29658: GO 30233
// side := GetSide ( unit ) ;
29660: LD_ADDR_VAR 0 9
29664: PUSH
29665: LD_VAR 0 1
29669: PPUSH
29670: CALL_OW 255
29674: ST_TO_ADDR
// tech_space := tech_spacanom ;
29675: LD_ADDR_VAR 0 12
29679: PUSH
29680: LD_INT 29
29682: ST_TO_ADDR
// tech_time := tech_taurad ;
29683: LD_ADDR_VAR 0 13
29687: PUSH
29688: LD_INT 28
29690: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29691: LD_ADDR_VAR 0 11
29695: PUSH
29696: LD_VAR 0 1
29700: PPUSH
29701: CALL_OW 310
29705: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29706: LD_VAR 0 11
29710: PPUSH
29711: CALL_OW 247
29715: PUSH
29716: LD_INT 2
29718: EQUAL
29719: IFFALSE 29723
// exit ;
29721: GO 30233
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29723: LD_ADDR_VAR 0 8
29727: PUSH
29728: LD_INT 81
29730: PUSH
29731: LD_VAR 0 9
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 3
29742: PUSH
29743: LD_INT 21
29745: PUSH
29746: LD_INT 3
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PPUSH
29761: CALL_OW 69
29765: ST_TO_ADDR
// if not tmp then
29766: LD_VAR 0 8
29770: NOT
29771: IFFALSE 29775
// exit ;
29773: GO 30233
// if in_unit then
29775: LD_VAR 0 11
29779: IFFALSE 29803
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29781: LD_ADDR_VAR 0 10
29785: PUSH
29786: LD_VAR 0 8
29790: PPUSH
29791: LD_VAR 0 11
29795: PPUSH
29796: CALL_OW 74
29800: ST_TO_ADDR
29801: GO 29823
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29803: LD_ADDR_VAR 0 10
29807: PUSH
29808: LD_VAR 0 8
29812: PPUSH
29813: LD_VAR 0 1
29817: PPUSH
29818: CALL_OW 74
29822: ST_TO_ADDR
// if not enemy then
29823: LD_VAR 0 10
29827: NOT
29828: IFFALSE 29832
// exit ;
29830: GO 30233
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29832: LD_VAR 0 11
29836: PUSH
29837: LD_VAR 0 11
29841: PPUSH
29842: LD_VAR 0 10
29846: PPUSH
29847: CALL_OW 296
29851: PUSH
29852: LD_INT 13
29854: GREATER
29855: AND
29856: PUSH
29857: LD_VAR 0 1
29861: PPUSH
29862: LD_VAR 0 10
29866: PPUSH
29867: CALL_OW 296
29871: PUSH
29872: LD_INT 12
29874: GREATER
29875: OR
29876: IFFALSE 29880
// exit ;
29878: GO 30233
// missile := [ 1 ] ;
29880: LD_ADDR_VAR 0 14
29884: PUSH
29885: LD_INT 1
29887: PUSH
29888: EMPTY
29889: LIST
29890: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29891: LD_VAR 0 9
29895: PPUSH
29896: LD_VAR 0 12
29900: PPUSH
29901: CALL_OW 325
29905: IFFALSE 29934
// missile := Replace ( missile , missile + 1 , 2 ) ;
29907: LD_ADDR_VAR 0 14
29911: PUSH
29912: LD_VAR 0 14
29916: PPUSH
29917: LD_VAR 0 14
29921: PUSH
29922: LD_INT 1
29924: PLUS
29925: PPUSH
29926: LD_INT 2
29928: PPUSH
29929: CALL_OW 1
29933: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29934: LD_VAR 0 9
29938: PPUSH
29939: LD_VAR 0 13
29943: PPUSH
29944: CALL_OW 325
29948: PUSH
29949: LD_VAR 0 10
29953: PPUSH
29954: CALL_OW 255
29958: PPUSH
29959: LD_VAR 0 13
29963: PPUSH
29964: CALL_OW 325
29968: NOT
29969: AND
29970: IFFALSE 29999
// missile := Replace ( missile , missile + 1 , 3 ) ;
29972: LD_ADDR_VAR 0 14
29976: PUSH
29977: LD_VAR 0 14
29981: PPUSH
29982: LD_VAR 0 14
29986: PUSH
29987: LD_INT 1
29989: PLUS
29990: PPUSH
29991: LD_INT 3
29993: PPUSH
29994: CALL_OW 1
29998: ST_TO_ADDR
// if missile < 2 then
29999: LD_VAR 0 14
30003: PUSH
30004: LD_INT 2
30006: LESS
30007: IFFALSE 30011
// exit ;
30009: GO 30233
// x := GetX ( enemy ) ;
30011: LD_ADDR_VAR 0 4
30015: PUSH
30016: LD_VAR 0 10
30020: PPUSH
30021: CALL_OW 250
30025: ST_TO_ADDR
// y := GetY ( enemy ) ;
30026: LD_ADDR_VAR 0 5
30030: PUSH
30031: LD_VAR 0 10
30035: PPUSH
30036: CALL_OW 251
30040: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30041: LD_ADDR_VAR 0 6
30045: PUSH
30046: LD_VAR 0 4
30050: PUSH
30051: LD_INT 1
30053: NEG
30054: PPUSH
30055: LD_INT 1
30057: PPUSH
30058: CALL_OW 12
30062: PLUS
30063: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30064: LD_ADDR_VAR 0 7
30068: PUSH
30069: LD_VAR 0 5
30073: PUSH
30074: LD_INT 1
30076: NEG
30077: PPUSH
30078: LD_INT 1
30080: PPUSH
30081: CALL_OW 12
30085: PLUS
30086: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30087: LD_VAR 0 6
30091: PPUSH
30092: LD_VAR 0 7
30096: PPUSH
30097: CALL_OW 488
30101: NOT
30102: IFFALSE 30124
// begin _x := x ;
30104: LD_ADDR_VAR 0 6
30108: PUSH
30109: LD_VAR 0 4
30113: ST_TO_ADDR
// _y := y ;
30114: LD_ADDR_VAR 0 7
30118: PUSH
30119: LD_VAR 0 5
30123: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30124: LD_ADDR_VAR 0 3
30128: PUSH
30129: LD_INT 1
30131: PPUSH
30132: LD_VAR 0 14
30136: PPUSH
30137: CALL_OW 12
30141: ST_TO_ADDR
// case i of 1 :
30142: LD_VAR 0 3
30146: PUSH
30147: LD_INT 1
30149: DOUBLE
30150: EQUAL
30151: IFTRUE 30155
30153: GO 30172
30155: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30156: LD_VAR 0 1
30160: PPUSH
30161: LD_VAR 0 10
30165: PPUSH
30166: CALL_OW 115
30170: GO 30233
30172: LD_INT 2
30174: DOUBLE
30175: EQUAL
30176: IFTRUE 30180
30178: GO 30202
30180: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30181: LD_VAR 0 1
30185: PPUSH
30186: LD_VAR 0 6
30190: PPUSH
30191: LD_VAR 0 7
30195: PPUSH
30196: CALL_OW 153
30200: GO 30233
30202: LD_INT 3
30204: DOUBLE
30205: EQUAL
30206: IFTRUE 30210
30208: GO 30232
30210: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30211: LD_VAR 0 1
30215: PPUSH
30216: LD_VAR 0 6
30220: PPUSH
30221: LD_VAR 0 7
30225: PPUSH
30226: CALL_OW 154
30230: GO 30233
30232: POP
// end ;
30233: LD_VAR 0 2
30237: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30238: LD_INT 0
30240: PPUSH
30241: PPUSH
30242: PPUSH
30243: PPUSH
30244: PPUSH
30245: PPUSH
// if not unit or not building then
30246: LD_VAR 0 1
30250: NOT
30251: PUSH
30252: LD_VAR 0 2
30256: NOT
30257: OR
30258: IFFALSE 30262
// exit ;
30260: GO 30420
// x := GetX ( building ) ;
30262: LD_ADDR_VAR 0 5
30266: PUSH
30267: LD_VAR 0 2
30271: PPUSH
30272: CALL_OW 250
30276: ST_TO_ADDR
// y := GetY ( building ) ;
30277: LD_ADDR_VAR 0 6
30281: PUSH
30282: LD_VAR 0 2
30286: PPUSH
30287: CALL_OW 251
30291: ST_TO_ADDR
// for i = 0 to 5 do
30292: LD_ADDR_VAR 0 4
30296: PUSH
30297: DOUBLE
30298: LD_INT 0
30300: DEC
30301: ST_TO_ADDR
30302: LD_INT 5
30304: PUSH
30305: FOR_TO
30306: IFFALSE 30418
// begin _x := ShiftX ( x , i , 3 ) ;
30308: LD_ADDR_VAR 0 7
30312: PUSH
30313: LD_VAR 0 5
30317: PPUSH
30318: LD_VAR 0 4
30322: PPUSH
30323: LD_INT 3
30325: PPUSH
30326: CALL_OW 272
30330: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30331: LD_ADDR_VAR 0 8
30335: PUSH
30336: LD_VAR 0 6
30340: PPUSH
30341: LD_VAR 0 4
30345: PPUSH
30346: LD_INT 3
30348: PPUSH
30349: CALL_OW 273
30353: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30354: LD_VAR 0 7
30358: PPUSH
30359: LD_VAR 0 8
30363: PPUSH
30364: CALL_OW 488
30368: NOT
30369: IFFALSE 30373
// continue ;
30371: GO 30305
// if HexInfo ( _x , _y ) = 0 then
30373: LD_VAR 0 7
30377: PPUSH
30378: LD_VAR 0 8
30382: PPUSH
30383: CALL_OW 428
30387: PUSH
30388: LD_INT 0
30390: EQUAL
30391: IFFALSE 30416
// begin ComMoveXY ( unit , _x , _y ) ;
30393: LD_VAR 0 1
30397: PPUSH
30398: LD_VAR 0 7
30402: PPUSH
30403: LD_VAR 0 8
30407: PPUSH
30408: CALL_OW 111
// exit ;
30412: POP
30413: POP
30414: GO 30420
// end ; end ;
30416: GO 30305
30418: POP
30419: POP
// end ;
30420: LD_VAR 0 3
30424: RET
// export function ScanBase ( side , base_area ) ; begin
30425: LD_INT 0
30427: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30428: LD_ADDR_VAR 0 3
30432: PUSH
30433: LD_VAR 0 2
30437: PPUSH
30438: LD_INT 81
30440: PUSH
30441: LD_VAR 0 1
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PPUSH
30450: CALL_OW 70
30454: ST_TO_ADDR
// end ;
30455: LD_VAR 0 3
30459: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30460: LD_INT 0
30462: PPUSH
30463: PPUSH
30464: PPUSH
30465: PPUSH
// result := false ;
30466: LD_ADDR_VAR 0 2
30470: PUSH
30471: LD_INT 0
30473: ST_TO_ADDR
// side := GetSide ( unit ) ;
30474: LD_ADDR_VAR 0 3
30478: PUSH
30479: LD_VAR 0 1
30483: PPUSH
30484: CALL_OW 255
30488: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30489: LD_ADDR_VAR 0 4
30493: PUSH
30494: LD_VAR 0 1
30498: PPUSH
30499: CALL_OW 248
30503: ST_TO_ADDR
// case nat of 1 :
30504: LD_VAR 0 4
30508: PUSH
30509: LD_INT 1
30511: DOUBLE
30512: EQUAL
30513: IFTRUE 30517
30515: GO 30528
30517: POP
// tech := tech_lassight ; 2 :
30518: LD_ADDR_VAR 0 5
30522: PUSH
30523: LD_INT 12
30525: ST_TO_ADDR
30526: GO 30567
30528: LD_INT 2
30530: DOUBLE
30531: EQUAL
30532: IFTRUE 30536
30534: GO 30547
30536: POP
// tech := tech_mortar ; 3 :
30537: LD_ADDR_VAR 0 5
30541: PUSH
30542: LD_INT 41
30544: ST_TO_ADDR
30545: GO 30567
30547: LD_INT 3
30549: DOUBLE
30550: EQUAL
30551: IFTRUE 30555
30553: GO 30566
30555: POP
// tech := tech_bazooka ; end ;
30556: LD_ADDR_VAR 0 5
30560: PUSH
30561: LD_INT 44
30563: ST_TO_ADDR
30564: GO 30567
30566: POP
// if Researched ( side , tech ) then
30567: LD_VAR 0 3
30571: PPUSH
30572: LD_VAR 0 5
30576: PPUSH
30577: CALL_OW 325
30581: IFFALSE 30608
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30583: LD_ADDR_VAR 0 2
30587: PUSH
30588: LD_INT 5
30590: PUSH
30591: LD_INT 8
30593: PUSH
30594: LD_INT 9
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: LIST
30601: PUSH
30602: LD_VAR 0 4
30606: ARRAY
30607: ST_TO_ADDR
// end ;
30608: LD_VAR 0 2
30612: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30613: LD_INT 0
30615: PPUSH
30616: PPUSH
30617: PPUSH
// if not mines then
30618: LD_VAR 0 2
30622: NOT
30623: IFFALSE 30627
// exit ;
30625: GO 30771
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30627: LD_ADDR_VAR 0 5
30631: PUSH
30632: LD_INT 81
30634: PUSH
30635: LD_VAR 0 1
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 3
30646: PUSH
30647: LD_INT 21
30649: PUSH
30650: LD_INT 3
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PPUSH
30665: CALL_OW 69
30669: ST_TO_ADDR
// for i in mines do
30670: LD_ADDR_VAR 0 4
30674: PUSH
30675: LD_VAR 0 2
30679: PUSH
30680: FOR_IN
30681: IFFALSE 30769
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30683: LD_VAR 0 4
30687: PUSH
30688: LD_INT 1
30690: ARRAY
30691: PPUSH
30692: LD_VAR 0 4
30696: PUSH
30697: LD_INT 2
30699: ARRAY
30700: PPUSH
30701: CALL_OW 458
30705: NOT
30706: IFFALSE 30710
// continue ;
30708: GO 30680
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30710: LD_VAR 0 4
30714: PUSH
30715: LD_INT 1
30717: ARRAY
30718: PPUSH
30719: LD_VAR 0 4
30723: PUSH
30724: LD_INT 2
30726: ARRAY
30727: PPUSH
30728: CALL_OW 428
30732: PUSH
30733: LD_VAR 0 5
30737: IN
30738: IFFALSE 30767
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30740: LD_VAR 0 4
30744: PUSH
30745: LD_INT 1
30747: ARRAY
30748: PPUSH
30749: LD_VAR 0 4
30753: PUSH
30754: LD_INT 2
30756: ARRAY
30757: PPUSH
30758: LD_VAR 0 1
30762: PPUSH
30763: CALL_OW 456
// end ;
30767: GO 30680
30769: POP
30770: POP
// end ;
30771: LD_VAR 0 3
30775: RET
// export function Count ( array ) ; begin
30776: LD_INT 0
30778: PPUSH
// result := array + 0 ;
30779: LD_ADDR_VAR 0 2
30783: PUSH
30784: LD_VAR 0 1
30788: PUSH
30789: LD_INT 0
30791: PLUS
30792: ST_TO_ADDR
// end ;
30793: LD_VAR 0 2
30797: RET
// export function IsEmpty ( building ) ; begin
30798: LD_INT 0
30800: PPUSH
// if not building then
30801: LD_VAR 0 1
30805: NOT
30806: IFFALSE 30810
// exit ;
30808: GO 30853
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30810: LD_ADDR_VAR 0 2
30814: PUSH
30815: LD_VAR 0 1
30819: PUSH
30820: LD_INT 22
30822: PUSH
30823: LD_VAR 0 1
30827: PPUSH
30828: CALL_OW 255
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 58
30839: PUSH
30840: EMPTY
30841: LIST
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PPUSH
30847: CALL_OW 69
30851: IN
30852: ST_TO_ADDR
// end ;
30853: LD_VAR 0 2
30857: RET
// export function IsNotFull ( building ) ; var places ; begin
30858: LD_INT 0
30860: PPUSH
30861: PPUSH
// if not building then
30862: LD_VAR 0 1
30866: NOT
30867: IFFALSE 30871
// exit ;
30869: GO 30899
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
30871: LD_ADDR_VAR 0 2
30875: PUSH
30876: LD_VAR 0 1
30880: PPUSH
30881: LD_INT 3
30883: PUSH
30884: LD_INT 62
30886: PUSH
30887: EMPTY
30888: LIST
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PPUSH
30894: CALL_OW 72
30898: ST_TO_ADDR
// end ;
30899: LD_VAR 0 2
30903: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30904: LD_INT 0
30906: PPUSH
30907: PPUSH
30908: PPUSH
30909: PPUSH
// tmp := [ ] ;
30910: LD_ADDR_VAR 0 3
30914: PUSH
30915: EMPTY
30916: ST_TO_ADDR
// list := [ ] ;
30917: LD_ADDR_VAR 0 5
30921: PUSH
30922: EMPTY
30923: ST_TO_ADDR
// for i = 16 to 25 do
30924: LD_ADDR_VAR 0 4
30928: PUSH
30929: DOUBLE
30930: LD_INT 16
30932: DEC
30933: ST_TO_ADDR
30934: LD_INT 25
30936: PUSH
30937: FOR_TO
30938: IFFALSE 31011
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30940: LD_ADDR_VAR 0 3
30944: PUSH
30945: LD_VAR 0 3
30949: PUSH
30950: LD_INT 22
30952: PUSH
30953: LD_VAR 0 1
30957: PPUSH
30958: CALL_OW 255
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 91
30969: PUSH
30970: LD_VAR 0 1
30974: PUSH
30975: LD_INT 6
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 30
30985: PUSH
30986: LD_VAR 0 4
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: LIST
30999: PUSH
31000: EMPTY
31001: LIST
31002: PPUSH
31003: CALL_OW 69
31007: ADD
31008: ST_TO_ADDR
31009: GO 30937
31011: POP
31012: POP
// for i = 1 to tmp do
31013: LD_ADDR_VAR 0 4
31017: PUSH
31018: DOUBLE
31019: LD_INT 1
31021: DEC
31022: ST_TO_ADDR
31023: LD_VAR 0 3
31027: PUSH
31028: FOR_TO
31029: IFFALSE 31117
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31031: LD_ADDR_VAR 0 5
31035: PUSH
31036: LD_VAR 0 5
31040: PUSH
31041: LD_VAR 0 3
31045: PUSH
31046: LD_VAR 0 4
31050: ARRAY
31051: PPUSH
31052: CALL_OW 266
31056: PUSH
31057: LD_VAR 0 3
31061: PUSH
31062: LD_VAR 0 4
31066: ARRAY
31067: PPUSH
31068: CALL_OW 250
31072: PUSH
31073: LD_VAR 0 3
31077: PUSH
31078: LD_VAR 0 4
31082: ARRAY
31083: PPUSH
31084: CALL_OW 251
31088: PUSH
31089: LD_VAR 0 3
31093: PUSH
31094: LD_VAR 0 4
31098: ARRAY
31099: PPUSH
31100: CALL_OW 254
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: PUSH
31111: EMPTY
31112: LIST
31113: ADD
31114: ST_TO_ADDR
31115: GO 31028
31117: POP
31118: POP
// result := list ;
31119: LD_ADDR_VAR 0 2
31123: PUSH
31124: LD_VAR 0 5
31128: ST_TO_ADDR
// end ;
31129: LD_VAR 0 2
31133: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31134: LD_INT 0
31136: PPUSH
31137: PPUSH
31138: PPUSH
31139: PPUSH
31140: PPUSH
31141: PPUSH
31142: PPUSH
// if not factory then
31143: LD_VAR 0 1
31147: NOT
31148: IFFALSE 31152
// exit ;
31150: GO 31745
// if control = control_apeman then
31152: LD_VAR 0 4
31156: PUSH
31157: LD_INT 5
31159: EQUAL
31160: IFFALSE 31269
// begin tmp := UnitsInside ( factory ) ;
31162: LD_ADDR_VAR 0 8
31166: PUSH
31167: LD_VAR 0 1
31171: PPUSH
31172: CALL_OW 313
31176: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31177: LD_VAR 0 8
31181: PPUSH
31182: LD_INT 25
31184: PUSH
31185: LD_INT 12
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PPUSH
31192: CALL_OW 72
31196: NOT
31197: IFFALSE 31207
// control := control_manual ;
31199: LD_ADDR_VAR 0 4
31203: PUSH
31204: LD_INT 1
31206: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31207: LD_ADDR_VAR 0 8
31211: PUSH
31212: LD_VAR 0 1
31216: PPUSH
31217: CALL 30904 0 1
31221: ST_TO_ADDR
// if tmp then
31222: LD_VAR 0 8
31226: IFFALSE 31269
// begin for i in tmp do
31228: LD_ADDR_VAR 0 7
31232: PUSH
31233: LD_VAR 0 8
31237: PUSH
31238: FOR_IN
31239: IFFALSE 31267
// if i [ 1 ] = b_ext_radio then
31241: LD_VAR 0 7
31245: PUSH
31246: LD_INT 1
31248: ARRAY
31249: PUSH
31250: LD_INT 22
31252: EQUAL
31253: IFFALSE 31265
// begin control := control_remote ;
31255: LD_ADDR_VAR 0 4
31259: PUSH
31260: LD_INT 2
31262: ST_TO_ADDR
// break ;
31263: GO 31267
// end ;
31265: GO 31238
31267: POP
31268: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31269: LD_VAR 0 1
31273: PPUSH
31274: LD_VAR 0 2
31278: PPUSH
31279: LD_VAR 0 3
31283: PPUSH
31284: LD_VAR 0 4
31288: PPUSH
31289: LD_VAR 0 5
31293: PPUSH
31294: CALL_OW 448
31298: IFFALSE 31333
// begin result := [ chassis , engine , control , weapon ] ;
31300: LD_ADDR_VAR 0 6
31304: PUSH
31305: LD_VAR 0 2
31309: PUSH
31310: LD_VAR 0 3
31314: PUSH
31315: LD_VAR 0 4
31319: PUSH
31320: LD_VAR 0 5
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: ST_TO_ADDR
// exit ;
31331: GO 31745
// end ; _chassis := AvailableChassisList ( factory ) ;
31333: LD_ADDR_VAR 0 9
31337: PUSH
31338: LD_VAR 0 1
31342: PPUSH
31343: CALL_OW 475
31347: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31348: LD_ADDR_VAR 0 11
31352: PUSH
31353: LD_VAR 0 1
31357: PPUSH
31358: CALL_OW 476
31362: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31363: LD_ADDR_VAR 0 12
31367: PUSH
31368: LD_VAR 0 1
31372: PPUSH
31373: CALL_OW 477
31377: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31378: LD_ADDR_VAR 0 10
31382: PUSH
31383: LD_VAR 0 1
31387: PPUSH
31388: CALL_OW 478
31392: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31393: LD_VAR 0 9
31397: NOT
31398: PUSH
31399: LD_VAR 0 11
31403: NOT
31404: OR
31405: PUSH
31406: LD_VAR 0 12
31410: NOT
31411: OR
31412: PUSH
31413: LD_VAR 0 10
31417: NOT
31418: OR
31419: IFFALSE 31454
// begin result := [ chassis , engine , control , weapon ] ;
31421: LD_ADDR_VAR 0 6
31425: PUSH
31426: LD_VAR 0 2
31430: PUSH
31431: LD_VAR 0 3
31435: PUSH
31436: LD_VAR 0 4
31440: PUSH
31441: LD_VAR 0 5
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: ST_TO_ADDR
// exit ;
31452: GO 31745
// end ; if not chassis in _chassis then
31454: LD_VAR 0 2
31458: PUSH
31459: LD_VAR 0 9
31463: IN
31464: NOT
31465: IFFALSE 31491
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31467: LD_ADDR_VAR 0 2
31471: PUSH
31472: LD_VAR 0 9
31476: PUSH
31477: LD_INT 1
31479: PPUSH
31480: LD_VAR 0 9
31484: PPUSH
31485: CALL_OW 12
31489: ARRAY
31490: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31491: LD_VAR 0 2
31495: PPUSH
31496: LD_VAR 0 3
31500: PPUSH
31501: CALL 31750 0 2
31505: NOT
31506: IFFALSE 31565
// repeat engine := _engine [ 1 ] ;
31508: LD_ADDR_VAR 0 3
31512: PUSH
31513: LD_VAR 0 11
31517: PUSH
31518: LD_INT 1
31520: ARRAY
31521: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31522: LD_ADDR_VAR 0 11
31526: PUSH
31527: LD_VAR 0 11
31531: PPUSH
31532: LD_INT 1
31534: PPUSH
31535: CALL_OW 3
31539: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31540: LD_VAR 0 2
31544: PPUSH
31545: LD_VAR 0 3
31549: PPUSH
31550: CALL 31750 0 2
31554: PUSH
31555: LD_VAR 0 11
31559: PUSH
31560: EMPTY
31561: EQUAL
31562: OR
31563: IFFALSE 31508
// if not control in _control then
31565: LD_VAR 0 4
31569: PUSH
31570: LD_VAR 0 12
31574: IN
31575: NOT
31576: IFFALSE 31602
// control := _control [ rand ( 1 , _control ) ] ;
31578: LD_ADDR_VAR 0 4
31582: PUSH
31583: LD_VAR 0 12
31587: PUSH
31588: LD_INT 1
31590: PPUSH
31591: LD_VAR 0 12
31595: PPUSH
31596: CALL_OW 12
31600: ARRAY
31601: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31602: LD_VAR 0 2
31606: PPUSH
31607: LD_VAR 0 5
31611: PPUSH
31612: CALL 31970 0 2
31616: NOT
31617: IFFALSE 31676
// repeat weapon := _weapon [ 1 ] ;
31619: LD_ADDR_VAR 0 5
31623: PUSH
31624: LD_VAR 0 10
31628: PUSH
31629: LD_INT 1
31631: ARRAY
31632: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31633: LD_ADDR_VAR 0 10
31637: PUSH
31638: LD_VAR 0 10
31642: PPUSH
31643: LD_INT 1
31645: PPUSH
31646: CALL_OW 3
31650: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31651: LD_VAR 0 2
31655: PPUSH
31656: LD_VAR 0 5
31660: PPUSH
31661: CALL 31970 0 2
31665: PUSH
31666: LD_VAR 0 10
31670: PUSH
31671: EMPTY
31672: EQUAL
31673: OR
31674: IFFALSE 31619
// result := [ ] ;
31676: LD_ADDR_VAR 0 6
31680: PUSH
31681: EMPTY
31682: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31683: LD_VAR 0 1
31687: PPUSH
31688: LD_VAR 0 2
31692: PPUSH
31693: LD_VAR 0 3
31697: PPUSH
31698: LD_VAR 0 4
31702: PPUSH
31703: LD_VAR 0 5
31707: PPUSH
31708: CALL_OW 448
31712: IFFALSE 31745
// result := [ chassis , engine , control , weapon ] ;
31714: LD_ADDR_VAR 0 6
31718: PUSH
31719: LD_VAR 0 2
31723: PUSH
31724: LD_VAR 0 3
31728: PUSH
31729: LD_VAR 0 4
31733: PUSH
31734: LD_VAR 0 5
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: ST_TO_ADDR
// end ;
31745: LD_VAR 0 6
31749: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31750: LD_INT 0
31752: PPUSH
// if not chassis or not engine then
31753: LD_VAR 0 1
31757: NOT
31758: PUSH
31759: LD_VAR 0 2
31763: NOT
31764: OR
31765: IFFALSE 31769
// exit ;
31767: GO 31965
// case engine of engine_solar :
31769: LD_VAR 0 2
31773: PUSH
31774: LD_INT 2
31776: DOUBLE
31777: EQUAL
31778: IFTRUE 31782
31780: GO 31820
31782: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31783: LD_ADDR_VAR 0 3
31787: PUSH
31788: LD_INT 11
31790: PUSH
31791: LD_INT 12
31793: PUSH
31794: LD_INT 13
31796: PUSH
31797: LD_INT 14
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: LD_INT 2
31805: PUSH
31806: LD_INT 3
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: ST_TO_ADDR
31818: GO 31949
31820: LD_INT 1
31822: DOUBLE
31823: EQUAL
31824: IFTRUE 31828
31826: GO 31890
31828: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31829: LD_ADDR_VAR 0 3
31833: PUSH
31834: LD_INT 11
31836: PUSH
31837: LD_INT 12
31839: PUSH
31840: LD_INT 13
31842: PUSH
31843: LD_INT 14
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: LD_INT 2
31851: PUSH
31852: LD_INT 3
31854: PUSH
31855: LD_INT 4
31857: PUSH
31858: LD_INT 5
31860: PUSH
31861: LD_INT 21
31863: PUSH
31864: LD_INT 23
31866: PUSH
31867: LD_INT 22
31869: PUSH
31870: LD_INT 24
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: ST_TO_ADDR
31888: GO 31949
31890: LD_INT 3
31892: DOUBLE
31893: EQUAL
31894: IFTRUE 31898
31896: GO 31948
31898: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31899: LD_ADDR_VAR 0 3
31903: PUSH
31904: LD_INT 13
31906: PUSH
31907: LD_INT 14
31909: PUSH
31910: LD_INT 2
31912: PUSH
31913: LD_INT 3
31915: PUSH
31916: LD_INT 4
31918: PUSH
31919: LD_INT 5
31921: PUSH
31922: LD_INT 21
31924: PUSH
31925: LD_INT 22
31927: PUSH
31928: LD_INT 23
31930: PUSH
31931: LD_INT 24
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: ST_TO_ADDR
31946: GO 31949
31948: POP
// result := ( chassis in result ) ;
31949: LD_ADDR_VAR 0 3
31953: PUSH
31954: LD_VAR 0 1
31958: PUSH
31959: LD_VAR 0 3
31963: IN
31964: ST_TO_ADDR
// end ;
31965: LD_VAR 0 3
31969: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31970: LD_INT 0
31972: PPUSH
// if not chassis or not weapon then
31973: LD_VAR 0 1
31977: NOT
31978: PUSH
31979: LD_VAR 0 2
31983: NOT
31984: OR
31985: IFFALSE 31989
// exit ;
31987: GO 33049
// case weapon of us_machine_gun :
31989: LD_VAR 0 2
31993: PUSH
31994: LD_INT 2
31996: DOUBLE
31997: EQUAL
31998: IFTRUE 32002
32000: GO 32032
32002: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32003: LD_ADDR_VAR 0 3
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: LD_INT 2
32013: PUSH
32014: LD_INT 3
32016: PUSH
32017: LD_INT 4
32019: PUSH
32020: LD_INT 5
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: ST_TO_ADDR
32030: GO 33033
32032: LD_INT 3
32034: DOUBLE
32035: EQUAL
32036: IFTRUE 32040
32038: GO 32070
32040: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32041: LD_ADDR_VAR 0 3
32045: PUSH
32046: LD_INT 1
32048: PUSH
32049: LD_INT 2
32051: PUSH
32052: LD_INT 3
32054: PUSH
32055: LD_INT 4
32057: PUSH
32058: LD_INT 5
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: ST_TO_ADDR
32068: GO 33033
32070: LD_INT 11
32072: DOUBLE
32073: EQUAL
32074: IFTRUE 32078
32076: GO 32108
32078: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32079: LD_ADDR_VAR 0 3
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: LD_INT 2
32089: PUSH
32090: LD_INT 3
32092: PUSH
32093: LD_INT 4
32095: PUSH
32096: LD_INT 5
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: ST_TO_ADDR
32106: GO 33033
32108: LD_INT 4
32110: DOUBLE
32111: EQUAL
32112: IFTRUE 32116
32114: GO 32142
32116: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32117: LD_ADDR_VAR 0 3
32121: PUSH
32122: LD_INT 2
32124: PUSH
32125: LD_INT 3
32127: PUSH
32128: LD_INT 4
32130: PUSH
32131: LD_INT 5
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: ST_TO_ADDR
32140: GO 33033
32142: LD_INT 5
32144: DOUBLE
32145: EQUAL
32146: IFTRUE 32150
32148: GO 32176
32150: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32151: LD_ADDR_VAR 0 3
32155: PUSH
32156: LD_INT 2
32158: PUSH
32159: LD_INT 3
32161: PUSH
32162: LD_INT 4
32164: PUSH
32165: LD_INT 5
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: ST_TO_ADDR
32174: GO 33033
32176: LD_INT 9
32178: DOUBLE
32179: EQUAL
32180: IFTRUE 32184
32182: GO 32210
32184: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32185: LD_ADDR_VAR 0 3
32189: PUSH
32190: LD_INT 2
32192: PUSH
32193: LD_INT 3
32195: PUSH
32196: LD_INT 4
32198: PUSH
32199: LD_INT 5
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: ST_TO_ADDR
32208: GO 33033
32210: LD_INT 7
32212: DOUBLE
32213: EQUAL
32214: IFTRUE 32218
32216: GO 32244
32218: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32219: LD_ADDR_VAR 0 3
32223: PUSH
32224: LD_INT 2
32226: PUSH
32227: LD_INT 3
32229: PUSH
32230: LD_INT 4
32232: PUSH
32233: LD_INT 5
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: ST_TO_ADDR
32242: GO 33033
32244: LD_INT 12
32246: DOUBLE
32247: EQUAL
32248: IFTRUE 32252
32250: GO 32278
32252: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32253: LD_ADDR_VAR 0 3
32257: PUSH
32258: LD_INT 2
32260: PUSH
32261: LD_INT 3
32263: PUSH
32264: LD_INT 4
32266: PUSH
32267: LD_INT 5
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: ST_TO_ADDR
32276: GO 33033
32278: LD_INT 13
32280: DOUBLE
32281: EQUAL
32282: IFTRUE 32286
32284: GO 32312
32286: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32287: LD_ADDR_VAR 0 3
32291: PUSH
32292: LD_INT 2
32294: PUSH
32295: LD_INT 3
32297: PUSH
32298: LD_INT 4
32300: PUSH
32301: LD_INT 5
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: ST_TO_ADDR
32310: GO 33033
32312: LD_INT 14
32314: DOUBLE
32315: EQUAL
32316: IFTRUE 32320
32318: GO 32338
32320: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32321: LD_ADDR_VAR 0 3
32325: PUSH
32326: LD_INT 4
32328: PUSH
32329: LD_INT 5
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: ST_TO_ADDR
32336: GO 33033
32338: LD_INT 6
32340: DOUBLE
32341: EQUAL
32342: IFTRUE 32346
32344: GO 32364
32346: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32347: LD_ADDR_VAR 0 3
32351: PUSH
32352: LD_INT 4
32354: PUSH
32355: LD_INT 5
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: ST_TO_ADDR
32362: GO 33033
32364: LD_INT 10
32366: DOUBLE
32367: EQUAL
32368: IFTRUE 32372
32370: GO 32390
32372: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32373: LD_ADDR_VAR 0 3
32377: PUSH
32378: LD_INT 4
32380: PUSH
32381: LD_INT 5
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: ST_TO_ADDR
32388: GO 33033
32390: LD_INT 22
32392: DOUBLE
32393: EQUAL
32394: IFTRUE 32398
32396: GO 32424
32398: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32399: LD_ADDR_VAR 0 3
32403: PUSH
32404: LD_INT 11
32406: PUSH
32407: LD_INT 12
32409: PUSH
32410: LD_INT 13
32412: PUSH
32413: LD_INT 14
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: ST_TO_ADDR
32422: GO 33033
32424: LD_INT 23
32426: DOUBLE
32427: EQUAL
32428: IFTRUE 32432
32430: GO 32458
32432: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32433: LD_ADDR_VAR 0 3
32437: PUSH
32438: LD_INT 11
32440: PUSH
32441: LD_INT 12
32443: PUSH
32444: LD_INT 13
32446: PUSH
32447: LD_INT 14
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: ST_TO_ADDR
32456: GO 33033
32458: LD_INT 24
32460: DOUBLE
32461: EQUAL
32462: IFTRUE 32466
32464: GO 32492
32466: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32467: LD_ADDR_VAR 0 3
32471: PUSH
32472: LD_INT 11
32474: PUSH
32475: LD_INT 12
32477: PUSH
32478: LD_INT 13
32480: PUSH
32481: LD_INT 14
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: ST_TO_ADDR
32490: GO 33033
32492: LD_INT 30
32494: DOUBLE
32495: EQUAL
32496: IFTRUE 32500
32498: GO 32526
32500: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32501: LD_ADDR_VAR 0 3
32505: PUSH
32506: LD_INT 11
32508: PUSH
32509: LD_INT 12
32511: PUSH
32512: LD_INT 13
32514: PUSH
32515: LD_INT 14
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: ST_TO_ADDR
32524: GO 33033
32526: LD_INT 25
32528: DOUBLE
32529: EQUAL
32530: IFTRUE 32534
32532: GO 32552
32534: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32535: LD_ADDR_VAR 0 3
32539: PUSH
32540: LD_INT 13
32542: PUSH
32543: LD_INT 14
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: ST_TO_ADDR
32550: GO 33033
32552: LD_INT 27
32554: DOUBLE
32555: EQUAL
32556: IFTRUE 32560
32558: GO 32578
32560: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32561: LD_ADDR_VAR 0 3
32565: PUSH
32566: LD_INT 13
32568: PUSH
32569: LD_INT 14
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: ST_TO_ADDR
32576: GO 33033
32578: LD_INT 92
32580: DOUBLE
32581: EQUAL
32582: IFTRUE 32586
32584: GO 32612
32586: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32587: LD_ADDR_VAR 0 3
32591: PUSH
32592: LD_INT 11
32594: PUSH
32595: LD_INT 12
32597: PUSH
32598: LD_INT 13
32600: PUSH
32601: LD_INT 14
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: ST_TO_ADDR
32610: GO 33033
32612: LD_INT 28
32614: DOUBLE
32615: EQUAL
32616: IFTRUE 32620
32618: GO 32638
32620: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32621: LD_ADDR_VAR 0 3
32625: PUSH
32626: LD_INT 13
32628: PUSH
32629: LD_INT 14
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: ST_TO_ADDR
32636: GO 33033
32638: LD_INT 29
32640: DOUBLE
32641: EQUAL
32642: IFTRUE 32646
32644: GO 32664
32646: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32647: LD_ADDR_VAR 0 3
32651: PUSH
32652: LD_INT 13
32654: PUSH
32655: LD_INT 14
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: ST_TO_ADDR
32662: GO 33033
32664: LD_INT 31
32666: DOUBLE
32667: EQUAL
32668: IFTRUE 32672
32670: GO 32690
32672: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32673: LD_ADDR_VAR 0 3
32677: PUSH
32678: LD_INT 13
32680: PUSH
32681: LD_INT 14
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: ST_TO_ADDR
32688: GO 33033
32690: LD_INT 26
32692: DOUBLE
32693: EQUAL
32694: IFTRUE 32698
32696: GO 32716
32698: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32699: LD_ADDR_VAR 0 3
32703: PUSH
32704: LD_INT 13
32706: PUSH
32707: LD_INT 14
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: ST_TO_ADDR
32714: GO 33033
32716: LD_INT 42
32718: DOUBLE
32719: EQUAL
32720: IFTRUE 32724
32722: GO 32750
32724: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32725: LD_ADDR_VAR 0 3
32729: PUSH
32730: LD_INT 21
32732: PUSH
32733: LD_INT 22
32735: PUSH
32736: LD_INT 23
32738: PUSH
32739: LD_INT 24
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: ST_TO_ADDR
32748: GO 33033
32750: LD_INT 43
32752: DOUBLE
32753: EQUAL
32754: IFTRUE 32758
32756: GO 32784
32758: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32759: LD_ADDR_VAR 0 3
32763: PUSH
32764: LD_INT 21
32766: PUSH
32767: LD_INT 22
32769: PUSH
32770: LD_INT 23
32772: PUSH
32773: LD_INT 24
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: ST_TO_ADDR
32782: GO 33033
32784: LD_INT 44
32786: DOUBLE
32787: EQUAL
32788: IFTRUE 32792
32790: GO 32818
32792: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32793: LD_ADDR_VAR 0 3
32797: PUSH
32798: LD_INT 21
32800: PUSH
32801: LD_INT 22
32803: PUSH
32804: LD_INT 23
32806: PUSH
32807: LD_INT 24
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: ST_TO_ADDR
32816: GO 33033
32818: LD_INT 45
32820: DOUBLE
32821: EQUAL
32822: IFTRUE 32826
32824: GO 32852
32826: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32827: LD_ADDR_VAR 0 3
32831: PUSH
32832: LD_INT 21
32834: PUSH
32835: LD_INT 22
32837: PUSH
32838: LD_INT 23
32840: PUSH
32841: LD_INT 24
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: ST_TO_ADDR
32850: GO 33033
32852: LD_INT 49
32854: DOUBLE
32855: EQUAL
32856: IFTRUE 32860
32858: GO 32886
32860: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32861: LD_ADDR_VAR 0 3
32865: PUSH
32866: LD_INT 21
32868: PUSH
32869: LD_INT 22
32871: PUSH
32872: LD_INT 23
32874: PUSH
32875: LD_INT 24
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: ST_TO_ADDR
32884: GO 33033
32886: LD_INT 51
32888: DOUBLE
32889: EQUAL
32890: IFTRUE 32894
32892: GO 32920
32894: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32895: LD_ADDR_VAR 0 3
32899: PUSH
32900: LD_INT 21
32902: PUSH
32903: LD_INT 22
32905: PUSH
32906: LD_INT 23
32908: PUSH
32909: LD_INT 24
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: ST_TO_ADDR
32918: GO 33033
32920: LD_INT 52
32922: DOUBLE
32923: EQUAL
32924: IFTRUE 32928
32926: GO 32954
32928: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32929: LD_ADDR_VAR 0 3
32933: PUSH
32934: LD_INT 21
32936: PUSH
32937: LD_INT 22
32939: PUSH
32940: LD_INT 23
32942: PUSH
32943: LD_INT 24
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: ST_TO_ADDR
32952: GO 33033
32954: LD_INT 53
32956: DOUBLE
32957: EQUAL
32958: IFTRUE 32962
32960: GO 32980
32962: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32963: LD_ADDR_VAR 0 3
32967: PUSH
32968: LD_INT 23
32970: PUSH
32971: LD_INT 24
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: ST_TO_ADDR
32978: GO 33033
32980: LD_INT 46
32982: DOUBLE
32983: EQUAL
32984: IFTRUE 32988
32986: GO 33006
32988: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32989: LD_ADDR_VAR 0 3
32993: PUSH
32994: LD_INT 23
32996: PUSH
32997: LD_INT 24
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: ST_TO_ADDR
33004: GO 33033
33006: LD_INT 47
33008: DOUBLE
33009: EQUAL
33010: IFTRUE 33014
33012: GO 33032
33014: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33015: LD_ADDR_VAR 0 3
33019: PUSH
33020: LD_INT 23
33022: PUSH
33023: LD_INT 24
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: ST_TO_ADDR
33030: GO 33033
33032: POP
// result := ( chassis in result ) ;
33033: LD_ADDR_VAR 0 3
33037: PUSH
33038: LD_VAR 0 1
33042: PUSH
33043: LD_VAR 0 3
33047: IN
33048: ST_TO_ADDR
// end ;
33049: LD_VAR 0 3
33053: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33054: LD_INT 0
33056: PPUSH
33057: PPUSH
33058: PPUSH
33059: PPUSH
33060: PPUSH
33061: PPUSH
33062: PPUSH
// result := array ;
33063: LD_ADDR_VAR 0 5
33067: PUSH
33068: LD_VAR 0 1
33072: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33073: LD_VAR 0 1
33077: NOT
33078: PUSH
33079: LD_VAR 0 2
33083: NOT
33084: OR
33085: PUSH
33086: LD_VAR 0 3
33090: NOT
33091: OR
33092: PUSH
33093: LD_VAR 0 2
33097: PUSH
33098: LD_VAR 0 1
33102: GREATER
33103: OR
33104: PUSH
33105: LD_VAR 0 3
33109: PUSH
33110: LD_VAR 0 1
33114: GREATER
33115: OR
33116: IFFALSE 33120
// exit ;
33118: GO 33416
// if direction then
33120: LD_VAR 0 4
33124: IFFALSE 33188
// begin d := 1 ;
33126: LD_ADDR_VAR 0 9
33130: PUSH
33131: LD_INT 1
33133: ST_TO_ADDR
// if i_from > i_to then
33134: LD_VAR 0 2
33138: PUSH
33139: LD_VAR 0 3
33143: GREATER
33144: IFFALSE 33170
// length := ( array - i_from ) + i_to else
33146: LD_ADDR_VAR 0 11
33150: PUSH
33151: LD_VAR 0 1
33155: PUSH
33156: LD_VAR 0 2
33160: MINUS
33161: PUSH
33162: LD_VAR 0 3
33166: PLUS
33167: ST_TO_ADDR
33168: GO 33186
// length := i_to - i_from ;
33170: LD_ADDR_VAR 0 11
33174: PUSH
33175: LD_VAR 0 3
33179: PUSH
33180: LD_VAR 0 2
33184: MINUS
33185: ST_TO_ADDR
// end else
33186: GO 33249
// begin d := - 1 ;
33188: LD_ADDR_VAR 0 9
33192: PUSH
33193: LD_INT 1
33195: NEG
33196: ST_TO_ADDR
// if i_from > i_to then
33197: LD_VAR 0 2
33201: PUSH
33202: LD_VAR 0 3
33206: GREATER
33207: IFFALSE 33227
// length := i_from - i_to else
33209: LD_ADDR_VAR 0 11
33213: PUSH
33214: LD_VAR 0 2
33218: PUSH
33219: LD_VAR 0 3
33223: MINUS
33224: ST_TO_ADDR
33225: GO 33249
// length := ( array - i_to ) + i_from ;
33227: LD_ADDR_VAR 0 11
33231: PUSH
33232: LD_VAR 0 1
33236: PUSH
33237: LD_VAR 0 3
33241: MINUS
33242: PUSH
33243: LD_VAR 0 2
33247: PLUS
33248: ST_TO_ADDR
// end ; if not length then
33249: LD_VAR 0 11
33253: NOT
33254: IFFALSE 33258
// exit ;
33256: GO 33416
// tmp := array ;
33258: LD_ADDR_VAR 0 10
33262: PUSH
33263: LD_VAR 0 1
33267: ST_TO_ADDR
// for i = 1 to length do
33268: LD_ADDR_VAR 0 6
33272: PUSH
33273: DOUBLE
33274: LD_INT 1
33276: DEC
33277: ST_TO_ADDR
33278: LD_VAR 0 11
33282: PUSH
33283: FOR_TO
33284: IFFALSE 33404
// begin for j = 1 to array do
33286: LD_ADDR_VAR 0 7
33290: PUSH
33291: DOUBLE
33292: LD_INT 1
33294: DEC
33295: ST_TO_ADDR
33296: LD_VAR 0 1
33300: PUSH
33301: FOR_TO
33302: IFFALSE 33390
// begin k := j + d ;
33304: LD_ADDR_VAR 0 8
33308: PUSH
33309: LD_VAR 0 7
33313: PUSH
33314: LD_VAR 0 9
33318: PLUS
33319: ST_TO_ADDR
// if k > array then
33320: LD_VAR 0 8
33324: PUSH
33325: LD_VAR 0 1
33329: GREATER
33330: IFFALSE 33340
// k := 1 ;
33332: LD_ADDR_VAR 0 8
33336: PUSH
33337: LD_INT 1
33339: ST_TO_ADDR
// if not k then
33340: LD_VAR 0 8
33344: NOT
33345: IFFALSE 33357
// k := array ;
33347: LD_ADDR_VAR 0 8
33351: PUSH
33352: LD_VAR 0 1
33356: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33357: LD_ADDR_VAR 0 10
33361: PUSH
33362: LD_VAR 0 10
33366: PPUSH
33367: LD_VAR 0 8
33371: PPUSH
33372: LD_VAR 0 1
33376: PUSH
33377: LD_VAR 0 7
33381: ARRAY
33382: PPUSH
33383: CALL_OW 1
33387: ST_TO_ADDR
// end ;
33388: GO 33301
33390: POP
33391: POP
// array := tmp ;
33392: LD_ADDR_VAR 0 1
33396: PUSH
33397: LD_VAR 0 10
33401: ST_TO_ADDR
// end ;
33402: GO 33283
33404: POP
33405: POP
// result := array ;
33406: LD_ADDR_VAR 0 5
33410: PUSH
33411: LD_VAR 0 1
33415: ST_TO_ADDR
// end ;
33416: LD_VAR 0 5
33420: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33421: LD_INT 0
33423: PPUSH
33424: PPUSH
// result := 0 ;
33425: LD_ADDR_VAR 0 3
33429: PUSH
33430: LD_INT 0
33432: ST_TO_ADDR
// if not array or not value in array then
33433: LD_VAR 0 1
33437: NOT
33438: PUSH
33439: LD_VAR 0 2
33443: PUSH
33444: LD_VAR 0 1
33448: IN
33449: NOT
33450: OR
33451: IFFALSE 33455
// exit ;
33453: GO 33509
// for i = 1 to array do
33455: LD_ADDR_VAR 0 4
33459: PUSH
33460: DOUBLE
33461: LD_INT 1
33463: DEC
33464: ST_TO_ADDR
33465: LD_VAR 0 1
33469: PUSH
33470: FOR_TO
33471: IFFALSE 33507
// if value = array [ i ] then
33473: LD_VAR 0 2
33477: PUSH
33478: LD_VAR 0 1
33482: PUSH
33483: LD_VAR 0 4
33487: ARRAY
33488: EQUAL
33489: IFFALSE 33505
// begin result := i ;
33491: LD_ADDR_VAR 0 3
33495: PUSH
33496: LD_VAR 0 4
33500: ST_TO_ADDR
// exit ;
33501: POP
33502: POP
33503: GO 33509
// end ;
33505: GO 33470
33507: POP
33508: POP
// end ;
33509: LD_VAR 0 3
33513: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33514: LD_INT 0
33516: PPUSH
// vc_chassis := chassis ;
33517: LD_ADDR_OWVAR 37
33521: PUSH
33522: LD_VAR 0 1
33526: ST_TO_ADDR
// vc_engine := engine ;
33527: LD_ADDR_OWVAR 39
33531: PUSH
33532: LD_VAR 0 2
33536: ST_TO_ADDR
// vc_control := control ;
33537: LD_ADDR_OWVAR 38
33541: PUSH
33542: LD_VAR 0 3
33546: ST_TO_ADDR
// vc_weapon := weapon ;
33547: LD_ADDR_OWVAR 40
33551: PUSH
33552: LD_VAR 0 4
33556: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33557: LD_ADDR_OWVAR 41
33561: PUSH
33562: LD_VAR 0 5
33566: ST_TO_ADDR
// end ;
33567: LD_VAR 0 6
33571: RET
// export function WantPlant ( unit ) ; var task ; begin
33572: LD_INT 0
33574: PPUSH
33575: PPUSH
// result := false ;
33576: LD_ADDR_VAR 0 2
33580: PUSH
33581: LD_INT 0
33583: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33584: LD_ADDR_VAR 0 3
33588: PUSH
33589: LD_VAR 0 1
33593: PPUSH
33594: CALL_OW 437
33598: ST_TO_ADDR
// if task then
33599: LD_VAR 0 3
33603: IFFALSE 33631
// if task [ 1 ] [ 1 ] = p then
33605: LD_VAR 0 3
33609: PUSH
33610: LD_INT 1
33612: ARRAY
33613: PUSH
33614: LD_INT 1
33616: ARRAY
33617: PUSH
33618: LD_STRING p
33620: EQUAL
33621: IFFALSE 33631
// result := true ;
33623: LD_ADDR_VAR 0 2
33627: PUSH
33628: LD_INT 1
33630: ST_TO_ADDR
// end ;
33631: LD_VAR 0 2
33635: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33636: LD_INT 0
33638: PPUSH
33639: PPUSH
33640: PPUSH
33641: PPUSH
// if pos < 1 then
33642: LD_VAR 0 2
33646: PUSH
33647: LD_INT 1
33649: LESS
33650: IFFALSE 33654
// exit ;
33652: GO 33957
// if pos = 1 then
33654: LD_VAR 0 2
33658: PUSH
33659: LD_INT 1
33661: EQUAL
33662: IFFALSE 33695
// result := Replace ( arr , pos [ 1 ] , value ) else
33664: LD_ADDR_VAR 0 4
33668: PUSH
33669: LD_VAR 0 1
33673: PPUSH
33674: LD_VAR 0 2
33678: PUSH
33679: LD_INT 1
33681: ARRAY
33682: PPUSH
33683: LD_VAR 0 3
33687: PPUSH
33688: CALL_OW 1
33692: ST_TO_ADDR
33693: GO 33957
// begin tmp := arr ;
33695: LD_ADDR_VAR 0 6
33699: PUSH
33700: LD_VAR 0 1
33704: ST_TO_ADDR
// s_arr := [ tmp ] ;
33705: LD_ADDR_VAR 0 7
33709: PUSH
33710: LD_VAR 0 6
33714: PUSH
33715: EMPTY
33716: LIST
33717: ST_TO_ADDR
// for i = 1 to pos - 1 do
33718: LD_ADDR_VAR 0 5
33722: PUSH
33723: DOUBLE
33724: LD_INT 1
33726: DEC
33727: ST_TO_ADDR
33728: LD_VAR 0 2
33732: PUSH
33733: LD_INT 1
33735: MINUS
33736: PUSH
33737: FOR_TO
33738: IFFALSE 33783
// begin tmp := tmp [ pos [ i ] ] ;
33740: LD_ADDR_VAR 0 6
33744: PUSH
33745: LD_VAR 0 6
33749: PUSH
33750: LD_VAR 0 2
33754: PUSH
33755: LD_VAR 0 5
33759: ARRAY
33760: ARRAY
33761: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33762: LD_ADDR_VAR 0 7
33766: PUSH
33767: LD_VAR 0 7
33771: PUSH
33772: LD_VAR 0 6
33776: PUSH
33777: EMPTY
33778: LIST
33779: ADD
33780: ST_TO_ADDR
// end ;
33781: GO 33737
33783: POP
33784: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33785: LD_ADDR_VAR 0 6
33789: PUSH
33790: LD_VAR 0 6
33794: PPUSH
33795: LD_VAR 0 2
33799: PUSH
33800: LD_VAR 0 2
33804: ARRAY
33805: PPUSH
33806: LD_VAR 0 3
33810: PPUSH
33811: CALL_OW 1
33815: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33816: LD_ADDR_VAR 0 7
33820: PUSH
33821: LD_VAR 0 7
33825: PPUSH
33826: LD_VAR 0 7
33830: PPUSH
33831: LD_VAR 0 6
33835: PPUSH
33836: CALL_OW 1
33840: ST_TO_ADDR
// for i = s_arr downto 2 do
33841: LD_ADDR_VAR 0 5
33845: PUSH
33846: DOUBLE
33847: LD_VAR 0 7
33851: INC
33852: ST_TO_ADDR
33853: LD_INT 2
33855: PUSH
33856: FOR_DOWNTO
33857: IFFALSE 33941
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33859: LD_ADDR_VAR 0 6
33863: PUSH
33864: LD_VAR 0 7
33868: PUSH
33869: LD_VAR 0 5
33873: PUSH
33874: LD_INT 1
33876: MINUS
33877: ARRAY
33878: PPUSH
33879: LD_VAR 0 2
33883: PUSH
33884: LD_VAR 0 5
33888: PUSH
33889: LD_INT 1
33891: MINUS
33892: ARRAY
33893: PPUSH
33894: LD_VAR 0 7
33898: PUSH
33899: LD_VAR 0 5
33903: ARRAY
33904: PPUSH
33905: CALL_OW 1
33909: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33910: LD_ADDR_VAR 0 7
33914: PUSH
33915: LD_VAR 0 7
33919: PPUSH
33920: LD_VAR 0 5
33924: PUSH
33925: LD_INT 1
33927: MINUS
33928: PPUSH
33929: LD_VAR 0 6
33933: PPUSH
33934: CALL_OW 1
33938: ST_TO_ADDR
// end ;
33939: GO 33856
33941: POP
33942: POP
// result := s_arr [ 1 ] ;
33943: LD_ADDR_VAR 0 4
33947: PUSH
33948: LD_VAR 0 7
33952: PUSH
33953: LD_INT 1
33955: ARRAY
33956: ST_TO_ADDR
// end ; end ;
33957: LD_VAR 0 4
33961: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33962: LD_INT 0
33964: PPUSH
33965: PPUSH
// if not list then
33966: LD_VAR 0 1
33970: NOT
33971: IFFALSE 33975
// exit ;
33973: GO 34066
// i := list [ pos1 ] ;
33975: LD_ADDR_VAR 0 5
33979: PUSH
33980: LD_VAR 0 1
33984: PUSH
33985: LD_VAR 0 2
33989: ARRAY
33990: ST_TO_ADDR
// if not i then
33991: LD_VAR 0 5
33995: NOT
33996: IFFALSE 34000
// exit ;
33998: GO 34066
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34000: LD_ADDR_VAR 0 1
34004: PUSH
34005: LD_VAR 0 1
34009: PPUSH
34010: LD_VAR 0 2
34014: PPUSH
34015: LD_VAR 0 1
34019: PUSH
34020: LD_VAR 0 3
34024: ARRAY
34025: PPUSH
34026: CALL_OW 1
34030: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34031: LD_ADDR_VAR 0 1
34035: PUSH
34036: LD_VAR 0 1
34040: PPUSH
34041: LD_VAR 0 3
34045: PPUSH
34046: LD_VAR 0 5
34050: PPUSH
34051: CALL_OW 1
34055: ST_TO_ADDR
// result := list ;
34056: LD_ADDR_VAR 0 4
34060: PUSH
34061: LD_VAR 0 1
34065: ST_TO_ADDR
// end ;
34066: LD_VAR 0 4
34070: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34071: LD_INT 0
34073: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34074: LD_ADDR_VAR 0 5
34078: PUSH
34079: LD_VAR 0 1
34083: PPUSH
34084: CALL_OW 250
34088: PPUSH
34089: LD_VAR 0 1
34093: PPUSH
34094: CALL_OW 251
34098: PPUSH
34099: LD_VAR 0 2
34103: PPUSH
34104: LD_VAR 0 3
34108: PPUSH
34109: LD_VAR 0 4
34113: PPUSH
34114: CALL 34492 0 5
34118: ST_TO_ADDR
// end ;
34119: LD_VAR 0 5
34123: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34124: LD_INT 0
34126: PPUSH
34127: PPUSH
34128: PPUSH
34129: PPUSH
// if not list or not unit then
34130: LD_VAR 0 2
34134: NOT
34135: PUSH
34136: LD_VAR 0 1
34140: NOT
34141: OR
34142: IFFALSE 34146
// exit ;
34144: GO 34487
// result := [ ] ;
34146: LD_ADDR_VAR 0 5
34150: PUSH
34151: EMPTY
34152: ST_TO_ADDR
// for i in list do
34153: LD_ADDR_VAR 0 6
34157: PUSH
34158: LD_VAR 0 2
34162: PUSH
34163: FOR_IN
34164: IFFALSE 34382
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34166: LD_ADDR_VAR 0 8
34170: PUSH
34171: LD_VAR 0 1
34175: PPUSH
34176: LD_VAR 0 6
34180: PUSH
34181: LD_INT 1
34183: ARRAY
34184: PPUSH
34185: LD_VAR 0 6
34189: PUSH
34190: LD_INT 2
34192: ARRAY
34193: PPUSH
34194: CALL_OW 297
34198: ST_TO_ADDR
// if not Count ( result ) then
34199: LD_VAR 0 5
34203: PPUSH
34204: CALL 30776 0 1
34208: NOT
34209: IFFALSE 34242
// begin result := Join ( result , [ i , tmp ] ) ;
34211: LD_ADDR_VAR 0 5
34215: PUSH
34216: LD_VAR 0 5
34220: PPUSH
34221: LD_VAR 0 6
34225: PUSH
34226: LD_VAR 0 8
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PPUSH
34235: CALL 66385 0 2
34239: ST_TO_ADDR
// continue ;
34240: GO 34163
// end ; if result [ result ] [ 2 ] <= tmp then
34242: LD_VAR 0 5
34246: PUSH
34247: LD_VAR 0 5
34251: ARRAY
34252: PUSH
34253: LD_INT 2
34255: ARRAY
34256: PUSH
34257: LD_VAR 0 8
34261: LESSEQUAL
34262: IFFALSE 34295
// result := Join ( result , [ i , tmp ] ) else
34264: LD_ADDR_VAR 0 5
34268: PUSH
34269: LD_VAR 0 5
34273: PPUSH
34274: LD_VAR 0 6
34278: PUSH
34279: LD_VAR 0 8
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PPUSH
34288: CALL 66385 0 2
34292: ST_TO_ADDR
34293: GO 34380
// begin for j := 1 to Count ( result ) do
34295: LD_ADDR_VAR 0 7
34299: PUSH
34300: DOUBLE
34301: LD_INT 1
34303: DEC
34304: ST_TO_ADDR
34305: LD_VAR 0 5
34309: PPUSH
34310: CALL 30776 0 1
34314: PUSH
34315: FOR_TO
34316: IFFALSE 34378
// begin if tmp < result [ j ] [ 2 ] then
34318: LD_VAR 0 8
34322: PUSH
34323: LD_VAR 0 5
34327: PUSH
34328: LD_VAR 0 7
34332: ARRAY
34333: PUSH
34334: LD_INT 2
34336: ARRAY
34337: LESS
34338: IFFALSE 34376
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34340: LD_ADDR_VAR 0 5
34344: PUSH
34345: LD_VAR 0 5
34349: PPUSH
34350: LD_VAR 0 7
34354: PPUSH
34355: LD_VAR 0 6
34359: PUSH
34360: LD_VAR 0 8
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PPUSH
34369: CALL_OW 2
34373: ST_TO_ADDR
// break ;
34374: GO 34378
// end ; end ;
34376: GO 34315
34378: POP
34379: POP
// end ; end ;
34380: GO 34163
34382: POP
34383: POP
// if result and not asc then
34384: LD_VAR 0 5
34388: PUSH
34389: LD_VAR 0 3
34393: NOT
34394: AND
34395: IFFALSE 34412
// result := ReverseArray ( result ) ;
34397: LD_ADDR_VAR 0 5
34401: PUSH
34402: LD_VAR 0 5
34406: PPUSH
34407: CALL 61652 0 1
34411: ST_TO_ADDR
// tmp := [ ] ;
34412: LD_ADDR_VAR 0 8
34416: PUSH
34417: EMPTY
34418: ST_TO_ADDR
// if mode then
34419: LD_VAR 0 4
34423: IFFALSE 34487
// begin for i := 1 to result do
34425: LD_ADDR_VAR 0 6
34429: PUSH
34430: DOUBLE
34431: LD_INT 1
34433: DEC
34434: ST_TO_ADDR
34435: LD_VAR 0 5
34439: PUSH
34440: FOR_TO
34441: IFFALSE 34475
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
34443: LD_ADDR_VAR 0 8
34447: PUSH
34448: LD_VAR 0 8
34452: PPUSH
34453: LD_VAR 0 5
34457: PUSH
34458: LD_VAR 0 6
34462: ARRAY
34463: PUSH
34464: LD_INT 1
34466: ARRAY
34467: PPUSH
34468: CALL 66385 0 2
34472: ST_TO_ADDR
34473: GO 34440
34475: POP
34476: POP
// result := tmp ;
34477: LD_ADDR_VAR 0 5
34481: PUSH
34482: LD_VAR 0 8
34486: ST_TO_ADDR
// end ; end ;
34487: LD_VAR 0 5
34491: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34492: LD_INT 0
34494: PPUSH
34495: PPUSH
34496: PPUSH
34497: PPUSH
// if not list then
34498: LD_VAR 0 3
34502: NOT
34503: IFFALSE 34507
// exit ;
34505: GO 34895
// result := [ ] ;
34507: LD_ADDR_VAR 0 6
34511: PUSH
34512: EMPTY
34513: ST_TO_ADDR
// for i in list do
34514: LD_ADDR_VAR 0 7
34518: PUSH
34519: LD_VAR 0 3
34523: PUSH
34524: FOR_IN
34525: IFFALSE 34727
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34527: LD_ADDR_VAR 0 9
34531: PUSH
34532: LD_VAR 0 7
34536: PPUSH
34537: LD_VAR 0 1
34541: PPUSH
34542: LD_VAR 0 2
34546: PPUSH
34547: CALL_OW 297
34551: ST_TO_ADDR
// if not result then
34552: LD_VAR 0 6
34556: NOT
34557: IFFALSE 34583
// result := [ [ i , tmp ] ] else
34559: LD_ADDR_VAR 0 6
34563: PUSH
34564: LD_VAR 0 7
34568: PUSH
34569: LD_VAR 0 9
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: EMPTY
34579: LIST
34580: ST_TO_ADDR
34581: GO 34725
// begin if result [ result ] [ 2 ] <= tmp then
34583: LD_VAR 0 6
34587: PUSH
34588: LD_VAR 0 6
34592: ARRAY
34593: PUSH
34594: LD_INT 2
34596: ARRAY
34597: PUSH
34598: LD_VAR 0 9
34602: LESSEQUAL
34603: IFFALSE 34645
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34605: LD_ADDR_VAR 0 6
34609: PUSH
34610: LD_VAR 0 6
34614: PPUSH
34615: LD_VAR 0 6
34619: PUSH
34620: LD_INT 1
34622: PLUS
34623: PPUSH
34624: LD_VAR 0 7
34628: PUSH
34629: LD_VAR 0 9
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PPUSH
34638: CALL_OW 2
34642: ST_TO_ADDR
34643: GO 34725
// for j := 1 to result do
34645: LD_ADDR_VAR 0 8
34649: PUSH
34650: DOUBLE
34651: LD_INT 1
34653: DEC
34654: ST_TO_ADDR
34655: LD_VAR 0 6
34659: PUSH
34660: FOR_TO
34661: IFFALSE 34723
// begin if tmp < result [ j ] [ 2 ] then
34663: LD_VAR 0 9
34667: PUSH
34668: LD_VAR 0 6
34672: PUSH
34673: LD_VAR 0 8
34677: ARRAY
34678: PUSH
34679: LD_INT 2
34681: ARRAY
34682: LESS
34683: IFFALSE 34721
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34685: LD_ADDR_VAR 0 6
34689: PUSH
34690: LD_VAR 0 6
34694: PPUSH
34695: LD_VAR 0 8
34699: PPUSH
34700: LD_VAR 0 7
34704: PUSH
34705: LD_VAR 0 9
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PPUSH
34714: CALL_OW 2
34718: ST_TO_ADDR
// break ;
34719: GO 34723
// end ; end ;
34721: GO 34660
34723: POP
34724: POP
// end ; end ;
34725: GO 34524
34727: POP
34728: POP
// if result and not asc then
34729: LD_VAR 0 6
34733: PUSH
34734: LD_VAR 0 4
34738: NOT
34739: AND
34740: IFFALSE 34815
// begin tmp := result ;
34742: LD_ADDR_VAR 0 9
34746: PUSH
34747: LD_VAR 0 6
34751: ST_TO_ADDR
// for i = tmp downto 1 do
34752: LD_ADDR_VAR 0 7
34756: PUSH
34757: DOUBLE
34758: LD_VAR 0 9
34762: INC
34763: ST_TO_ADDR
34764: LD_INT 1
34766: PUSH
34767: FOR_DOWNTO
34768: IFFALSE 34813
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34770: LD_ADDR_VAR 0 6
34774: PUSH
34775: LD_VAR 0 6
34779: PPUSH
34780: LD_VAR 0 9
34784: PUSH
34785: LD_VAR 0 7
34789: MINUS
34790: PUSH
34791: LD_INT 1
34793: PLUS
34794: PPUSH
34795: LD_VAR 0 9
34799: PUSH
34800: LD_VAR 0 7
34804: ARRAY
34805: PPUSH
34806: CALL_OW 1
34810: ST_TO_ADDR
34811: GO 34767
34813: POP
34814: POP
// end ; tmp := [ ] ;
34815: LD_ADDR_VAR 0 9
34819: PUSH
34820: EMPTY
34821: ST_TO_ADDR
// if mode then
34822: LD_VAR 0 5
34826: IFFALSE 34895
// begin for i = 1 to result do
34828: LD_ADDR_VAR 0 7
34832: PUSH
34833: DOUBLE
34834: LD_INT 1
34836: DEC
34837: ST_TO_ADDR
34838: LD_VAR 0 6
34842: PUSH
34843: FOR_TO
34844: IFFALSE 34883
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34846: LD_ADDR_VAR 0 9
34850: PUSH
34851: LD_VAR 0 9
34855: PPUSH
34856: LD_VAR 0 7
34860: PPUSH
34861: LD_VAR 0 6
34865: PUSH
34866: LD_VAR 0 7
34870: ARRAY
34871: PUSH
34872: LD_INT 1
34874: ARRAY
34875: PPUSH
34876: CALL_OW 1
34880: ST_TO_ADDR
34881: GO 34843
34883: POP
34884: POP
// result := tmp ;
34885: LD_ADDR_VAR 0 6
34889: PUSH
34890: LD_VAR 0 9
34894: ST_TO_ADDR
// end ; end ;
34895: LD_VAR 0 6
34899: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34900: LD_INT 0
34902: PPUSH
34903: PPUSH
34904: PPUSH
34905: PPUSH
34906: PPUSH
34907: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34908: LD_ADDR_VAR 0 5
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: LD_INT 0
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: EMPTY
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: ST_TO_ADDR
// if not x or not y then
34930: LD_VAR 0 2
34934: NOT
34935: PUSH
34936: LD_VAR 0 3
34940: NOT
34941: OR
34942: IFFALSE 34946
// exit ;
34944: GO 36596
// if not range then
34946: LD_VAR 0 4
34950: NOT
34951: IFFALSE 34961
// range := 10 ;
34953: LD_ADDR_VAR 0 4
34957: PUSH
34958: LD_INT 10
34960: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34961: LD_ADDR_VAR 0 8
34965: PUSH
34966: LD_INT 81
34968: PUSH
34969: LD_VAR 0 1
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 92
34980: PUSH
34981: LD_VAR 0 2
34985: PUSH
34986: LD_VAR 0 3
34990: PUSH
34991: LD_VAR 0 4
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 3
35004: PUSH
35005: LD_INT 21
35007: PUSH
35008: LD_INT 3
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: LIST
35023: PPUSH
35024: CALL_OW 69
35028: ST_TO_ADDR
// if not tmp then
35029: LD_VAR 0 8
35033: NOT
35034: IFFALSE 35038
// exit ;
35036: GO 36596
// for i in tmp do
35038: LD_ADDR_VAR 0 6
35042: PUSH
35043: LD_VAR 0 8
35047: PUSH
35048: FOR_IN
35049: IFFALSE 36571
// begin points := [ 0 , 0 , 0 ] ;
35051: LD_ADDR_VAR 0 9
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: LIST
35069: ST_TO_ADDR
// bpoints := 1 ;
35070: LD_ADDR_VAR 0 10
35074: PUSH
35075: LD_INT 1
35077: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35078: LD_VAR 0 6
35082: PPUSH
35083: CALL_OW 247
35087: PUSH
35088: LD_INT 1
35090: DOUBLE
35091: EQUAL
35092: IFTRUE 35096
35094: GO 35674
35096: POP
// begin if GetClass ( i ) = 1 then
35097: LD_VAR 0 6
35101: PPUSH
35102: CALL_OW 257
35106: PUSH
35107: LD_INT 1
35109: EQUAL
35110: IFFALSE 35131
// points := [ 10 , 5 , 3 ] ;
35112: LD_ADDR_VAR 0 9
35116: PUSH
35117: LD_INT 10
35119: PUSH
35120: LD_INT 5
35122: PUSH
35123: LD_INT 3
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: LIST
35130: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35131: LD_VAR 0 6
35135: PPUSH
35136: CALL_OW 257
35140: PUSH
35141: LD_INT 2
35143: PUSH
35144: LD_INT 3
35146: PUSH
35147: LD_INT 4
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: LIST
35154: IN
35155: IFFALSE 35176
// points := [ 3 , 2 , 1 ] ;
35157: LD_ADDR_VAR 0 9
35161: PUSH
35162: LD_INT 3
35164: PUSH
35165: LD_INT 2
35167: PUSH
35168: LD_INT 1
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: LIST
35175: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35176: LD_VAR 0 6
35180: PPUSH
35181: CALL_OW 257
35185: PUSH
35186: LD_INT 5
35188: EQUAL
35189: IFFALSE 35210
// points := [ 130 , 5 , 2 ] ;
35191: LD_ADDR_VAR 0 9
35195: PUSH
35196: LD_INT 130
35198: PUSH
35199: LD_INT 5
35201: PUSH
35202: LD_INT 2
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35210: LD_VAR 0 6
35214: PPUSH
35215: CALL_OW 257
35219: PUSH
35220: LD_INT 8
35222: EQUAL
35223: IFFALSE 35244
// points := [ 35 , 35 , 30 ] ;
35225: LD_ADDR_VAR 0 9
35229: PUSH
35230: LD_INT 35
35232: PUSH
35233: LD_INT 35
35235: PUSH
35236: LD_INT 30
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: LIST
35243: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35244: LD_VAR 0 6
35248: PPUSH
35249: CALL_OW 257
35253: PUSH
35254: LD_INT 9
35256: EQUAL
35257: IFFALSE 35278
// points := [ 20 , 55 , 40 ] ;
35259: LD_ADDR_VAR 0 9
35263: PUSH
35264: LD_INT 20
35266: PUSH
35267: LD_INT 55
35269: PUSH
35270: LD_INT 40
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: LIST
35277: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35278: LD_VAR 0 6
35282: PPUSH
35283: CALL_OW 257
35287: PUSH
35288: LD_INT 12
35290: PUSH
35291: LD_INT 16
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: IN
35298: IFFALSE 35319
// points := [ 5 , 3 , 2 ] ;
35300: LD_ADDR_VAR 0 9
35304: PUSH
35305: LD_INT 5
35307: PUSH
35308: LD_INT 3
35310: PUSH
35311: LD_INT 2
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: LIST
35318: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35319: LD_VAR 0 6
35323: PPUSH
35324: CALL_OW 257
35328: PUSH
35329: LD_INT 17
35331: EQUAL
35332: IFFALSE 35353
// points := [ 100 , 50 , 75 ] ;
35334: LD_ADDR_VAR 0 9
35338: PUSH
35339: LD_INT 100
35341: PUSH
35342: LD_INT 50
35344: PUSH
35345: LD_INT 75
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: LIST
35352: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35353: LD_VAR 0 6
35357: PPUSH
35358: CALL_OW 257
35362: PUSH
35363: LD_INT 15
35365: EQUAL
35366: IFFALSE 35387
// points := [ 10 , 5 , 3 ] ;
35368: LD_ADDR_VAR 0 9
35372: PUSH
35373: LD_INT 10
35375: PUSH
35376: LD_INT 5
35378: PUSH
35379: LD_INT 3
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35387: LD_VAR 0 6
35391: PPUSH
35392: CALL_OW 257
35396: PUSH
35397: LD_INT 14
35399: EQUAL
35400: IFFALSE 35421
// points := [ 10 , 0 , 0 ] ;
35402: LD_ADDR_VAR 0 9
35406: PUSH
35407: LD_INT 10
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: LIST
35420: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35421: LD_VAR 0 6
35425: PPUSH
35426: CALL_OW 257
35430: PUSH
35431: LD_INT 11
35433: EQUAL
35434: IFFALSE 35455
// points := [ 30 , 10 , 5 ] ;
35436: LD_ADDR_VAR 0 9
35440: PUSH
35441: LD_INT 30
35443: PUSH
35444: LD_INT 10
35446: PUSH
35447: LD_INT 5
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: LIST
35454: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35455: LD_VAR 0 1
35459: PPUSH
35460: LD_INT 5
35462: PPUSH
35463: CALL_OW 321
35467: PUSH
35468: LD_INT 2
35470: EQUAL
35471: IFFALSE 35488
// bpoints := bpoints * 1.8 ;
35473: LD_ADDR_VAR 0 10
35477: PUSH
35478: LD_VAR 0 10
35482: PUSH
35483: LD_REAL  1.80000000000000E+0000
35486: MUL
35487: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35488: LD_VAR 0 6
35492: PPUSH
35493: CALL_OW 257
35497: PUSH
35498: LD_INT 1
35500: PUSH
35501: LD_INT 2
35503: PUSH
35504: LD_INT 3
35506: PUSH
35507: LD_INT 4
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: IN
35516: PUSH
35517: LD_VAR 0 1
35521: PPUSH
35522: LD_INT 51
35524: PPUSH
35525: CALL_OW 321
35529: PUSH
35530: LD_INT 2
35532: EQUAL
35533: AND
35534: IFFALSE 35551
// bpoints := bpoints * 1.2 ;
35536: LD_ADDR_VAR 0 10
35540: PUSH
35541: LD_VAR 0 10
35545: PUSH
35546: LD_REAL  1.20000000000000E+0000
35549: MUL
35550: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35551: LD_VAR 0 6
35555: PPUSH
35556: CALL_OW 257
35560: PUSH
35561: LD_INT 5
35563: PUSH
35564: LD_INT 7
35566: PUSH
35567: LD_INT 9
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: LIST
35574: IN
35575: PUSH
35576: LD_VAR 0 1
35580: PPUSH
35581: LD_INT 52
35583: PPUSH
35584: CALL_OW 321
35588: PUSH
35589: LD_INT 2
35591: EQUAL
35592: AND
35593: IFFALSE 35610
// bpoints := bpoints * 1.5 ;
35595: LD_ADDR_VAR 0 10
35599: PUSH
35600: LD_VAR 0 10
35604: PUSH
35605: LD_REAL  1.50000000000000E+0000
35608: MUL
35609: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35610: LD_VAR 0 1
35614: PPUSH
35615: LD_INT 66
35617: PPUSH
35618: CALL_OW 321
35622: PUSH
35623: LD_INT 2
35625: EQUAL
35626: IFFALSE 35643
// bpoints := bpoints * 1.1 ;
35628: LD_ADDR_VAR 0 10
35632: PUSH
35633: LD_VAR 0 10
35637: PUSH
35638: LD_REAL  1.10000000000000E+0000
35641: MUL
35642: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35643: LD_ADDR_VAR 0 10
35647: PUSH
35648: LD_VAR 0 10
35652: PUSH
35653: LD_VAR 0 6
35657: PPUSH
35658: LD_INT 1
35660: PPUSH
35661: CALL_OW 259
35665: PUSH
35666: LD_REAL  1.15000000000000E+0000
35669: MUL
35670: MUL
35671: ST_TO_ADDR
// end ; unit_vehicle :
35672: GO 36500
35674: LD_INT 2
35676: DOUBLE
35677: EQUAL
35678: IFTRUE 35682
35680: GO 36488
35682: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35683: LD_VAR 0 6
35687: PPUSH
35688: CALL_OW 264
35692: PUSH
35693: LD_INT 2
35695: PUSH
35696: LD_INT 42
35698: PUSH
35699: LD_INT 24
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: LIST
35706: IN
35707: IFFALSE 35728
// points := [ 25 , 5 , 3 ] ;
35709: LD_ADDR_VAR 0 9
35713: PUSH
35714: LD_INT 25
35716: PUSH
35717: LD_INT 5
35719: PUSH
35720: LD_INT 3
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: LIST
35727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35728: LD_VAR 0 6
35732: PPUSH
35733: CALL_OW 264
35737: PUSH
35738: LD_INT 4
35740: PUSH
35741: LD_INT 43
35743: PUSH
35744: LD_INT 25
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: IN
35752: IFFALSE 35773
// points := [ 40 , 15 , 5 ] ;
35754: LD_ADDR_VAR 0 9
35758: PUSH
35759: LD_INT 40
35761: PUSH
35762: LD_INT 15
35764: PUSH
35765: LD_INT 5
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: LIST
35772: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35773: LD_VAR 0 6
35777: PPUSH
35778: CALL_OW 264
35782: PUSH
35783: LD_INT 3
35785: PUSH
35786: LD_INT 23
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: IN
35793: IFFALSE 35814
// points := [ 7 , 25 , 8 ] ;
35795: LD_ADDR_VAR 0 9
35799: PUSH
35800: LD_INT 7
35802: PUSH
35803: LD_INT 25
35805: PUSH
35806: LD_INT 8
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: LIST
35813: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35814: LD_VAR 0 6
35818: PPUSH
35819: CALL_OW 264
35823: PUSH
35824: LD_INT 5
35826: PUSH
35827: LD_INT 27
35829: PUSH
35830: LD_INT 44
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: LIST
35837: IN
35838: IFFALSE 35859
// points := [ 14 , 50 , 16 ] ;
35840: LD_ADDR_VAR 0 9
35844: PUSH
35845: LD_INT 14
35847: PUSH
35848: LD_INT 50
35850: PUSH
35851: LD_INT 16
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: LIST
35858: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35859: LD_VAR 0 6
35863: PPUSH
35864: CALL_OW 264
35868: PUSH
35869: LD_INT 6
35871: PUSH
35872: LD_INT 46
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: IN
35879: IFFALSE 35900
// points := [ 32 , 120 , 70 ] ;
35881: LD_ADDR_VAR 0 9
35885: PUSH
35886: LD_INT 32
35888: PUSH
35889: LD_INT 120
35891: PUSH
35892: LD_INT 70
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: LIST
35899: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35900: LD_VAR 0 6
35904: PPUSH
35905: CALL_OW 264
35909: PUSH
35910: LD_INT 7
35912: PUSH
35913: LD_INT 28
35915: PUSH
35916: LD_INT 45
35918: PUSH
35919: LD_INT 92
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: IN
35928: IFFALSE 35949
// points := [ 35 , 20 , 45 ] ;
35930: LD_ADDR_VAR 0 9
35934: PUSH
35935: LD_INT 35
35937: PUSH
35938: LD_INT 20
35940: PUSH
35941: LD_INT 45
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: LIST
35948: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35949: LD_VAR 0 6
35953: PPUSH
35954: CALL_OW 264
35958: PUSH
35959: LD_INT 47
35961: PUSH
35962: EMPTY
35963: LIST
35964: IN
35965: IFFALSE 35986
// points := [ 67 , 45 , 75 ] ;
35967: LD_ADDR_VAR 0 9
35971: PUSH
35972: LD_INT 67
35974: PUSH
35975: LD_INT 45
35977: PUSH
35978: LD_INT 75
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: LIST
35985: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35986: LD_VAR 0 6
35990: PPUSH
35991: CALL_OW 264
35995: PUSH
35996: LD_INT 26
35998: PUSH
35999: EMPTY
36000: LIST
36001: IN
36002: IFFALSE 36023
// points := [ 120 , 30 , 80 ] ;
36004: LD_ADDR_VAR 0 9
36008: PUSH
36009: LD_INT 120
36011: PUSH
36012: LD_INT 30
36014: PUSH
36015: LD_INT 80
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: LIST
36022: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36023: LD_VAR 0 6
36027: PPUSH
36028: CALL_OW 264
36032: PUSH
36033: LD_INT 22
36035: PUSH
36036: EMPTY
36037: LIST
36038: IN
36039: IFFALSE 36060
// points := [ 40 , 1 , 1 ] ;
36041: LD_ADDR_VAR 0 9
36045: PUSH
36046: LD_INT 40
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: LIST
36059: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36060: LD_VAR 0 6
36064: PPUSH
36065: CALL_OW 264
36069: PUSH
36070: LD_INT 29
36072: PUSH
36073: EMPTY
36074: LIST
36075: IN
36076: IFFALSE 36097
// points := [ 70 , 200 , 400 ] ;
36078: LD_ADDR_VAR 0 9
36082: PUSH
36083: LD_INT 70
36085: PUSH
36086: LD_INT 200
36088: PUSH
36089: LD_INT 400
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: LIST
36096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36097: LD_VAR 0 6
36101: PPUSH
36102: CALL_OW 264
36106: PUSH
36107: LD_INT 14
36109: PUSH
36110: LD_INT 53
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: IN
36117: IFFALSE 36138
// points := [ 40 , 10 , 20 ] ;
36119: LD_ADDR_VAR 0 9
36123: PUSH
36124: LD_INT 40
36126: PUSH
36127: LD_INT 10
36129: PUSH
36130: LD_INT 20
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: LIST
36137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36138: LD_VAR 0 6
36142: PPUSH
36143: CALL_OW 264
36147: PUSH
36148: LD_INT 9
36150: PUSH
36151: EMPTY
36152: LIST
36153: IN
36154: IFFALSE 36175
// points := [ 5 , 70 , 20 ] ;
36156: LD_ADDR_VAR 0 9
36160: PUSH
36161: LD_INT 5
36163: PUSH
36164: LD_INT 70
36166: PUSH
36167: LD_INT 20
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: LIST
36174: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36175: LD_VAR 0 6
36179: PPUSH
36180: CALL_OW 264
36184: PUSH
36185: LD_INT 10
36187: PUSH
36188: EMPTY
36189: LIST
36190: IN
36191: IFFALSE 36212
// points := [ 35 , 110 , 70 ] ;
36193: LD_ADDR_VAR 0 9
36197: PUSH
36198: LD_INT 35
36200: PUSH
36201: LD_INT 110
36203: PUSH
36204: LD_INT 70
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: LIST
36211: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36212: LD_VAR 0 6
36216: PPUSH
36217: CALL_OW 265
36221: PUSH
36222: LD_INT 25
36224: EQUAL
36225: IFFALSE 36246
// points := [ 80 , 65 , 100 ] ;
36227: LD_ADDR_VAR 0 9
36231: PUSH
36232: LD_INT 80
36234: PUSH
36235: LD_INT 65
36237: PUSH
36238: LD_INT 100
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: LIST
36245: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36246: LD_VAR 0 6
36250: PPUSH
36251: CALL_OW 263
36255: PUSH
36256: LD_INT 1
36258: EQUAL
36259: IFFALSE 36294
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36261: LD_ADDR_VAR 0 10
36265: PUSH
36266: LD_VAR 0 10
36270: PUSH
36271: LD_VAR 0 6
36275: PPUSH
36276: CALL_OW 311
36280: PPUSH
36281: LD_INT 3
36283: PPUSH
36284: CALL_OW 259
36288: PUSH
36289: LD_INT 4
36291: MUL
36292: MUL
36293: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36294: LD_VAR 0 6
36298: PPUSH
36299: CALL_OW 263
36303: PUSH
36304: LD_INT 2
36306: EQUAL
36307: IFFALSE 36358
// begin j := IsControledBy ( i ) ;
36309: LD_ADDR_VAR 0 7
36313: PUSH
36314: LD_VAR 0 6
36318: PPUSH
36319: CALL_OW 312
36323: ST_TO_ADDR
// if j then
36324: LD_VAR 0 7
36328: IFFALSE 36358
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36330: LD_ADDR_VAR 0 10
36334: PUSH
36335: LD_VAR 0 10
36339: PUSH
36340: LD_VAR 0 7
36344: PPUSH
36345: LD_INT 3
36347: PPUSH
36348: CALL_OW 259
36352: PUSH
36353: LD_INT 3
36355: MUL
36356: MUL
36357: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36358: LD_VAR 0 6
36362: PPUSH
36363: CALL_OW 264
36367: PUSH
36368: LD_INT 5
36370: PUSH
36371: LD_INT 6
36373: PUSH
36374: LD_INT 46
36376: PUSH
36377: LD_INT 44
36379: PUSH
36380: LD_INT 47
36382: PUSH
36383: LD_INT 45
36385: PUSH
36386: LD_INT 28
36388: PUSH
36389: LD_INT 7
36391: PUSH
36392: LD_INT 27
36394: PUSH
36395: LD_INT 29
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: IN
36410: PUSH
36411: LD_VAR 0 1
36415: PPUSH
36416: LD_INT 52
36418: PPUSH
36419: CALL_OW 321
36423: PUSH
36424: LD_INT 2
36426: EQUAL
36427: AND
36428: IFFALSE 36445
// bpoints := bpoints * 1.2 ;
36430: LD_ADDR_VAR 0 10
36434: PUSH
36435: LD_VAR 0 10
36439: PUSH
36440: LD_REAL  1.20000000000000E+0000
36443: MUL
36444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36445: LD_VAR 0 6
36449: PPUSH
36450: CALL_OW 264
36454: PUSH
36455: LD_INT 6
36457: PUSH
36458: LD_INT 46
36460: PUSH
36461: LD_INT 47
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: LIST
36468: IN
36469: IFFALSE 36486
// bpoints := bpoints * 1.2 ;
36471: LD_ADDR_VAR 0 10
36475: PUSH
36476: LD_VAR 0 10
36480: PUSH
36481: LD_REAL  1.20000000000000E+0000
36484: MUL
36485: ST_TO_ADDR
// end ; unit_building :
36486: GO 36500
36488: LD_INT 3
36490: DOUBLE
36491: EQUAL
36492: IFTRUE 36496
36494: GO 36499
36496: POP
// ; end ;
36497: GO 36500
36499: POP
// for j = 1 to 3 do
36500: LD_ADDR_VAR 0 7
36504: PUSH
36505: DOUBLE
36506: LD_INT 1
36508: DEC
36509: ST_TO_ADDR
36510: LD_INT 3
36512: PUSH
36513: FOR_TO
36514: IFFALSE 36567
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36516: LD_ADDR_VAR 0 5
36520: PUSH
36521: LD_VAR 0 5
36525: PPUSH
36526: LD_VAR 0 7
36530: PPUSH
36531: LD_VAR 0 5
36535: PUSH
36536: LD_VAR 0 7
36540: ARRAY
36541: PUSH
36542: LD_VAR 0 9
36546: PUSH
36547: LD_VAR 0 7
36551: ARRAY
36552: PUSH
36553: LD_VAR 0 10
36557: MUL
36558: PLUS
36559: PPUSH
36560: CALL_OW 1
36564: ST_TO_ADDR
36565: GO 36513
36567: POP
36568: POP
// end ;
36569: GO 35048
36571: POP
36572: POP
// result := Replace ( result , 4 , tmp ) ;
36573: LD_ADDR_VAR 0 5
36577: PUSH
36578: LD_VAR 0 5
36582: PPUSH
36583: LD_INT 4
36585: PPUSH
36586: LD_VAR 0 8
36590: PPUSH
36591: CALL_OW 1
36595: ST_TO_ADDR
// end ;
36596: LD_VAR 0 5
36600: RET
// export function DangerAtRange ( unit , range ) ; begin
36601: LD_INT 0
36603: PPUSH
// if not unit then
36604: LD_VAR 0 1
36608: NOT
36609: IFFALSE 36613
// exit ;
36611: GO 36658
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36613: LD_ADDR_VAR 0 3
36617: PUSH
36618: LD_VAR 0 1
36622: PPUSH
36623: CALL_OW 255
36627: PPUSH
36628: LD_VAR 0 1
36632: PPUSH
36633: CALL_OW 250
36637: PPUSH
36638: LD_VAR 0 1
36642: PPUSH
36643: CALL_OW 251
36647: PPUSH
36648: LD_VAR 0 2
36652: PPUSH
36653: CALL 34900 0 4
36657: ST_TO_ADDR
// end ;
36658: LD_VAR 0 3
36662: RET
// export function DangerInArea ( side , area ) ; begin
36663: LD_INT 0
36665: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36666: LD_ADDR_VAR 0 3
36670: PUSH
36671: LD_VAR 0 2
36675: PPUSH
36676: LD_INT 81
36678: PUSH
36679: LD_VAR 0 1
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PPUSH
36688: CALL_OW 70
36692: ST_TO_ADDR
// end ;
36693: LD_VAR 0 3
36697: RET
// export function IsExtension ( b ) ; begin
36698: LD_INT 0
36700: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36701: LD_ADDR_VAR 0 2
36705: PUSH
36706: LD_VAR 0 1
36710: PUSH
36711: LD_INT 23
36713: PUSH
36714: LD_INT 20
36716: PUSH
36717: LD_INT 22
36719: PUSH
36720: LD_INT 17
36722: PUSH
36723: LD_INT 24
36725: PUSH
36726: LD_INT 21
36728: PUSH
36729: LD_INT 19
36731: PUSH
36732: LD_INT 16
36734: PUSH
36735: LD_INT 25
36737: PUSH
36738: LD_INT 18
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: IN
36753: ST_TO_ADDR
// end ;
36754: LD_VAR 0 2
36758: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36759: LD_INT 0
36761: PPUSH
36762: PPUSH
36763: PPUSH
// result := [ ] ;
36764: LD_ADDR_VAR 0 4
36768: PUSH
36769: EMPTY
36770: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36771: LD_ADDR_VAR 0 5
36775: PUSH
36776: LD_VAR 0 2
36780: PPUSH
36781: LD_INT 21
36783: PUSH
36784: LD_INT 3
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PPUSH
36791: CALL_OW 70
36795: ST_TO_ADDR
// if not tmp then
36796: LD_VAR 0 5
36800: NOT
36801: IFFALSE 36805
// exit ;
36803: GO 36869
// if checkLink then
36805: LD_VAR 0 3
36809: IFFALSE 36859
// begin for i in tmp do
36811: LD_ADDR_VAR 0 6
36815: PUSH
36816: LD_VAR 0 5
36820: PUSH
36821: FOR_IN
36822: IFFALSE 36857
// if GetBase ( i ) <> base then
36824: LD_VAR 0 6
36828: PPUSH
36829: CALL_OW 274
36833: PUSH
36834: LD_VAR 0 1
36838: NONEQUAL
36839: IFFALSE 36855
// ComLinkToBase ( base , i ) ;
36841: LD_VAR 0 1
36845: PPUSH
36846: LD_VAR 0 6
36850: PPUSH
36851: CALL_OW 169
36855: GO 36821
36857: POP
36858: POP
// end ; result := tmp ;
36859: LD_ADDR_VAR 0 4
36863: PUSH
36864: LD_VAR 0 5
36868: ST_TO_ADDR
// end ;
36869: LD_VAR 0 4
36873: RET
// export function ComComplete ( units , b ) ; var i ; begin
36874: LD_INT 0
36876: PPUSH
36877: PPUSH
// if not units then
36878: LD_VAR 0 1
36882: NOT
36883: IFFALSE 36887
// exit ;
36885: GO 36977
// for i in units do
36887: LD_ADDR_VAR 0 4
36891: PUSH
36892: LD_VAR 0 1
36896: PUSH
36897: FOR_IN
36898: IFFALSE 36975
// if BuildingStatus ( b ) = bs_build then
36900: LD_VAR 0 2
36904: PPUSH
36905: CALL_OW 461
36909: PUSH
36910: LD_INT 1
36912: EQUAL
36913: IFFALSE 36973
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36915: LD_VAR 0 4
36919: PPUSH
36920: LD_STRING h
36922: PUSH
36923: LD_VAR 0 2
36927: PPUSH
36928: CALL_OW 250
36932: PUSH
36933: LD_VAR 0 2
36937: PPUSH
36938: CALL_OW 251
36942: PUSH
36943: LD_VAR 0 2
36947: PUSH
36948: LD_INT 0
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: PUSH
36966: EMPTY
36967: LIST
36968: PPUSH
36969: CALL_OW 446
36973: GO 36897
36975: POP
36976: POP
// end ;
36977: LD_VAR 0 3
36981: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36982: LD_INT 0
36984: PPUSH
36985: PPUSH
36986: PPUSH
36987: PPUSH
36988: PPUSH
36989: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36990: LD_VAR 0 1
36994: NOT
36995: PUSH
36996: LD_VAR 0 1
37000: PPUSH
37001: CALL_OW 263
37005: PUSH
37006: LD_INT 2
37008: NONEQUAL
37009: OR
37010: IFFALSE 37014
// exit ;
37012: GO 37330
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37014: LD_ADDR_VAR 0 6
37018: PUSH
37019: LD_INT 22
37021: PUSH
37022: LD_VAR 0 1
37026: PPUSH
37027: CALL_OW 255
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 2
37038: PUSH
37039: LD_INT 30
37041: PUSH
37042: LD_INT 36
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 34
37051: PUSH
37052: LD_INT 31
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: LIST
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PPUSH
37068: CALL_OW 69
37072: ST_TO_ADDR
// if not tmp then
37073: LD_VAR 0 6
37077: NOT
37078: IFFALSE 37082
// exit ;
37080: GO 37330
// result := [ ] ;
37082: LD_ADDR_VAR 0 2
37086: PUSH
37087: EMPTY
37088: ST_TO_ADDR
// for i in tmp do
37089: LD_ADDR_VAR 0 3
37093: PUSH
37094: LD_VAR 0 6
37098: PUSH
37099: FOR_IN
37100: IFFALSE 37171
// begin t := UnitsInside ( i ) ;
37102: LD_ADDR_VAR 0 4
37106: PUSH
37107: LD_VAR 0 3
37111: PPUSH
37112: CALL_OW 313
37116: ST_TO_ADDR
// if t then
37117: LD_VAR 0 4
37121: IFFALSE 37169
// for j in t do
37123: LD_ADDR_VAR 0 7
37127: PUSH
37128: LD_VAR 0 4
37132: PUSH
37133: FOR_IN
37134: IFFALSE 37167
// result := Replace ( result , result + 1 , j ) ;
37136: LD_ADDR_VAR 0 2
37140: PUSH
37141: LD_VAR 0 2
37145: PPUSH
37146: LD_VAR 0 2
37150: PUSH
37151: LD_INT 1
37153: PLUS
37154: PPUSH
37155: LD_VAR 0 7
37159: PPUSH
37160: CALL_OW 1
37164: ST_TO_ADDR
37165: GO 37133
37167: POP
37168: POP
// end ;
37169: GO 37099
37171: POP
37172: POP
// if not result then
37173: LD_VAR 0 2
37177: NOT
37178: IFFALSE 37182
// exit ;
37180: GO 37330
// mech := result [ 1 ] ;
37182: LD_ADDR_VAR 0 5
37186: PUSH
37187: LD_VAR 0 2
37191: PUSH
37192: LD_INT 1
37194: ARRAY
37195: ST_TO_ADDR
// if result > 1 then
37196: LD_VAR 0 2
37200: PUSH
37201: LD_INT 1
37203: GREATER
37204: IFFALSE 37316
// begin for i = 2 to result do
37206: LD_ADDR_VAR 0 3
37210: PUSH
37211: DOUBLE
37212: LD_INT 2
37214: DEC
37215: ST_TO_ADDR
37216: LD_VAR 0 2
37220: PUSH
37221: FOR_TO
37222: IFFALSE 37314
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37224: LD_ADDR_VAR 0 4
37228: PUSH
37229: LD_VAR 0 2
37233: PUSH
37234: LD_VAR 0 3
37238: ARRAY
37239: PPUSH
37240: LD_INT 3
37242: PPUSH
37243: CALL_OW 259
37247: PUSH
37248: LD_VAR 0 2
37252: PUSH
37253: LD_VAR 0 3
37257: ARRAY
37258: PPUSH
37259: CALL_OW 432
37263: MINUS
37264: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37265: LD_VAR 0 4
37269: PUSH
37270: LD_VAR 0 5
37274: PPUSH
37275: LD_INT 3
37277: PPUSH
37278: CALL_OW 259
37282: PUSH
37283: LD_VAR 0 5
37287: PPUSH
37288: CALL_OW 432
37292: MINUS
37293: GREATEREQUAL
37294: IFFALSE 37312
// mech := result [ i ] ;
37296: LD_ADDR_VAR 0 5
37300: PUSH
37301: LD_VAR 0 2
37305: PUSH
37306: LD_VAR 0 3
37310: ARRAY
37311: ST_TO_ADDR
// end ;
37312: GO 37221
37314: POP
37315: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37316: LD_VAR 0 1
37320: PPUSH
37321: LD_VAR 0 5
37325: PPUSH
37326: CALL_OW 135
// end ;
37330: LD_VAR 0 2
37334: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37335: LD_INT 0
37337: PPUSH
37338: PPUSH
37339: PPUSH
37340: PPUSH
37341: PPUSH
37342: PPUSH
37343: PPUSH
37344: PPUSH
37345: PPUSH
37346: PPUSH
37347: PPUSH
37348: PPUSH
37349: PPUSH
// result := [ ] ;
37350: LD_ADDR_VAR 0 7
37354: PUSH
37355: EMPTY
37356: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37357: LD_VAR 0 1
37361: PPUSH
37362: CALL_OW 266
37366: PUSH
37367: LD_INT 0
37369: PUSH
37370: LD_INT 1
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: IN
37377: NOT
37378: IFFALSE 37382
// exit ;
37380: GO 39016
// if name then
37382: LD_VAR 0 3
37386: IFFALSE 37402
// SetBName ( base_dep , name ) ;
37388: LD_VAR 0 1
37392: PPUSH
37393: LD_VAR 0 3
37397: PPUSH
37398: CALL_OW 500
// base := GetBase ( base_dep ) ;
37402: LD_ADDR_VAR 0 15
37406: PUSH
37407: LD_VAR 0 1
37411: PPUSH
37412: CALL_OW 274
37416: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37417: LD_ADDR_VAR 0 16
37421: PUSH
37422: LD_VAR 0 1
37426: PPUSH
37427: CALL_OW 255
37431: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37432: LD_ADDR_VAR 0 17
37436: PUSH
37437: LD_VAR 0 1
37441: PPUSH
37442: CALL_OW 248
37446: ST_TO_ADDR
// if sources then
37447: LD_VAR 0 5
37451: IFFALSE 37498
// for i = 1 to 3 do
37453: LD_ADDR_VAR 0 8
37457: PUSH
37458: DOUBLE
37459: LD_INT 1
37461: DEC
37462: ST_TO_ADDR
37463: LD_INT 3
37465: PUSH
37466: FOR_TO
37467: IFFALSE 37496
// AddResourceType ( base , i , sources [ i ] ) ;
37469: LD_VAR 0 15
37473: PPUSH
37474: LD_VAR 0 8
37478: PPUSH
37479: LD_VAR 0 5
37483: PUSH
37484: LD_VAR 0 8
37488: ARRAY
37489: PPUSH
37490: CALL_OW 276
37494: GO 37466
37496: POP
37497: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37498: LD_ADDR_VAR 0 18
37502: PUSH
37503: LD_VAR 0 15
37507: PPUSH
37508: LD_VAR 0 2
37512: PPUSH
37513: LD_INT 1
37515: PPUSH
37516: CALL 36759 0 3
37520: ST_TO_ADDR
// InitHc ;
37521: CALL_OW 19
// InitUc ;
37525: CALL_OW 18
// uc_side := side ;
37529: LD_ADDR_OWVAR 20
37533: PUSH
37534: LD_VAR 0 16
37538: ST_TO_ADDR
// uc_nation := nation ;
37539: LD_ADDR_OWVAR 21
37543: PUSH
37544: LD_VAR 0 17
37548: ST_TO_ADDR
// if buildings then
37549: LD_VAR 0 18
37553: IFFALSE 38875
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37555: LD_ADDR_VAR 0 19
37559: PUSH
37560: LD_VAR 0 18
37564: PPUSH
37565: LD_INT 2
37567: PUSH
37568: LD_INT 30
37570: PUSH
37571: LD_INT 29
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 30
37580: PUSH
37581: LD_INT 30
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: LIST
37592: PPUSH
37593: CALL_OW 72
37597: ST_TO_ADDR
// if tmp then
37598: LD_VAR 0 19
37602: IFFALSE 37650
// for i in tmp do
37604: LD_ADDR_VAR 0 8
37608: PUSH
37609: LD_VAR 0 19
37613: PUSH
37614: FOR_IN
37615: IFFALSE 37648
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37617: LD_VAR 0 8
37621: PPUSH
37622: CALL_OW 250
37626: PPUSH
37627: LD_VAR 0 8
37631: PPUSH
37632: CALL_OW 251
37636: PPUSH
37637: LD_VAR 0 16
37641: PPUSH
37642: CALL_OW 441
37646: GO 37614
37648: POP
37649: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37650: LD_VAR 0 18
37654: PPUSH
37655: LD_INT 2
37657: PUSH
37658: LD_INT 30
37660: PUSH
37661: LD_INT 32
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 30
37670: PUSH
37671: LD_INT 33
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: LIST
37682: PPUSH
37683: CALL_OW 72
37687: IFFALSE 37775
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37689: LD_ADDR_VAR 0 8
37693: PUSH
37694: LD_VAR 0 18
37698: PPUSH
37699: LD_INT 2
37701: PUSH
37702: LD_INT 30
37704: PUSH
37705: LD_INT 32
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 30
37714: PUSH
37715: LD_INT 33
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: LIST
37726: PPUSH
37727: CALL_OW 72
37731: PUSH
37732: FOR_IN
37733: IFFALSE 37773
// begin if not GetBWeapon ( i ) then
37735: LD_VAR 0 8
37739: PPUSH
37740: CALL_OW 269
37744: NOT
37745: IFFALSE 37771
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37747: LD_VAR 0 8
37751: PPUSH
37752: LD_VAR 0 8
37756: PPUSH
37757: LD_VAR 0 2
37761: PPUSH
37762: CALL 39021 0 2
37766: PPUSH
37767: CALL_OW 431
// end ;
37771: GO 37732
37773: POP
37774: POP
// end ; for i = 1 to personel do
37775: LD_ADDR_VAR 0 8
37779: PUSH
37780: DOUBLE
37781: LD_INT 1
37783: DEC
37784: ST_TO_ADDR
37785: LD_VAR 0 6
37789: PUSH
37790: FOR_TO
37791: IFFALSE 38855
// begin if i > 4 then
37793: LD_VAR 0 8
37797: PUSH
37798: LD_INT 4
37800: GREATER
37801: IFFALSE 37805
// break ;
37803: GO 38855
// case i of 1 :
37805: LD_VAR 0 8
37809: PUSH
37810: LD_INT 1
37812: DOUBLE
37813: EQUAL
37814: IFTRUE 37818
37816: GO 37898
37818: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37819: LD_ADDR_VAR 0 12
37823: PUSH
37824: LD_VAR 0 18
37828: PPUSH
37829: LD_INT 22
37831: PUSH
37832: LD_VAR 0 16
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 58
37843: PUSH
37844: EMPTY
37845: LIST
37846: PUSH
37847: LD_INT 2
37849: PUSH
37850: LD_INT 30
37852: PUSH
37853: LD_INT 32
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 30
37862: PUSH
37863: LD_INT 4
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 30
37872: PUSH
37873: LD_INT 5
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: LIST
37890: PPUSH
37891: CALL_OW 72
37895: ST_TO_ADDR
37896: GO 38120
37898: LD_INT 2
37900: DOUBLE
37901: EQUAL
37902: IFTRUE 37906
37904: GO 37968
37906: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37907: LD_ADDR_VAR 0 12
37911: PUSH
37912: LD_VAR 0 18
37916: PPUSH
37917: LD_INT 22
37919: PUSH
37920: LD_VAR 0 16
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 2
37931: PUSH
37932: LD_INT 30
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 30
37944: PUSH
37945: LD_INT 1
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: LIST
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PPUSH
37961: CALL_OW 72
37965: ST_TO_ADDR
37966: GO 38120
37968: LD_INT 3
37970: DOUBLE
37971: EQUAL
37972: IFTRUE 37976
37974: GO 38038
37976: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37977: LD_ADDR_VAR 0 12
37981: PUSH
37982: LD_VAR 0 18
37986: PPUSH
37987: LD_INT 22
37989: PUSH
37990: LD_VAR 0 16
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 2
38001: PUSH
38002: LD_INT 30
38004: PUSH
38005: LD_INT 2
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 30
38014: PUSH
38015: LD_INT 3
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: LIST
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PPUSH
38031: CALL_OW 72
38035: ST_TO_ADDR
38036: GO 38120
38038: LD_INT 4
38040: DOUBLE
38041: EQUAL
38042: IFTRUE 38046
38044: GO 38119
38046: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38047: LD_ADDR_VAR 0 12
38051: PUSH
38052: LD_VAR 0 18
38056: PPUSH
38057: LD_INT 22
38059: PUSH
38060: LD_VAR 0 16
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 2
38071: PUSH
38072: LD_INT 30
38074: PUSH
38075: LD_INT 6
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 30
38084: PUSH
38085: LD_INT 7
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 30
38094: PUSH
38095: LD_INT 8
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PPUSH
38112: CALL_OW 72
38116: ST_TO_ADDR
38117: GO 38120
38119: POP
// if i = 1 then
38120: LD_VAR 0 8
38124: PUSH
38125: LD_INT 1
38127: EQUAL
38128: IFFALSE 38239
// begin tmp := [ ] ;
38130: LD_ADDR_VAR 0 19
38134: PUSH
38135: EMPTY
38136: ST_TO_ADDR
// for j in f do
38137: LD_ADDR_VAR 0 9
38141: PUSH
38142: LD_VAR 0 12
38146: PUSH
38147: FOR_IN
38148: IFFALSE 38221
// if GetBType ( j ) = b_bunker then
38150: LD_VAR 0 9
38154: PPUSH
38155: CALL_OW 266
38159: PUSH
38160: LD_INT 32
38162: EQUAL
38163: IFFALSE 38190
// tmp := Insert ( tmp , 1 , j ) else
38165: LD_ADDR_VAR 0 19
38169: PUSH
38170: LD_VAR 0 19
38174: PPUSH
38175: LD_INT 1
38177: PPUSH
38178: LD_VAR 0 9
38182: PPUSH
38183: CALL_OW 2
38187: ST_TO_ADDR
38188: GO 38219
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38190: LD_ADDR_VAR 0 19
38194: PUSH
38195: LD_VAR 0 19
38199: PPUSH
38200: LD_VAR 0 19
38204: PUSH
38205: LD_INT 1
38207: PLUS
38208: PPUSH
38209: LD_VAR 0 9
38213: PPUSH
38214: CALL_OW 2
38218: ST_TO_ADDR
38219: GO 38147
38221: POP
38222: POP
// if tmp then
38223: LD_VAR 0 19
38227: IFFALSE 38239
// f := tmp ;
38229: LD_ADDR_VAR 0 12
38233: PUSH
38234: LD_VAR 0 19
38238: ST_TO_ADDR
// end ; x := personel [ i ] ;
38239: LD_ADDR_VAR 0 13
38243: PUSH
38244: LD_VAR 0 6
38248: PUSH
38249: LD_VAR 0 8
38253: ARRAY
38254: ST_TO_ADDR
// if x = - 1 then
38255: LD_VAR 0 13
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: EQUAL
38264: IFFALSE 38473
// begin for j in f do
38266: LD_ADDR_VAR 0 9
38270: PUSH
38271: LD_VAR 0 12
38275: PUSH
38276: FOR_IN
38277: IFFALSE 38469
// repeat InitHc ;
38279: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38283: LD_VAR 0 9
38287: PPUSH
38288: CALL_OW 266
38292: PUSH
38293: LD_INT 5
38295: EQUAL
38296: IFFALSE 38366
// begin if UnitsInside ( j ) < 3 then
38298: LD_VAR 0 9
38302: PPUSH
38303: CALL_OW 313
38307: PUSH
38308: LD_INT 3
38310: LESS
38311: IFFALSE 38347
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38313: LD_INT 0
38315: PPUSH
38316: LD_INT 5
38318: PUSH
38319: LD_INT 8
38321: PUSH
38322: LD_INT 9
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: LIST
38329: PUSH
38330: LD_VAR 0 17
38334: ARRAY
38335: PPUSH
38336: LD_VAR 0 4
38340: PPUSH
38341: CALL_OW 380
38345: GO 38364
// PrepareHuman ( false , i , skill ) ;
38347: LD_INT 0
38349: PPUSH
38350: LD_VAR 0 8
38354: PPUSH
38355: LD_VAR 0 4
38359: PPUSH
38360: CALL_OW 380
// end else
38364: GO 38383
// PrepareHuman ( false , i , skill ) ;
38366: LD_INT 0
38368: PPUSH
38369: LD_VAR 0 8
38373: PPUSH
38374: LD_VAR 0 4
38378: PPUSH
38379: CALL_OW 380
// un := CreateHuman ;
38383: LD_ADDR_VAR 0 14
38387: PUSH
38388: CALL_OW 44
38392: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38393: LD_ADDR_VAR 0 7
38397: PUSH
38398: LD_VAR 0 7
38402: PPUSH
38403: LD_INT 1
38405: PPUSH
38406: LD_VAR 0 14
38410: PPUSH
38411: CALL_OW 2
38415: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38416: LD_VAR 0 14
38420: PPUSH
38421: LD_VAR 0 9
38425: PPUSH
38426: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38430: LD_VAR 0 9
38434: PPUSH
38435: CALL_OW 313
38439: PUSH
38440: LD_INT 6
38442: EQUAL
38443: PUSH
38444: LD_VAR 0 9
38448: PPUSH
38449: CALL_OW 266
38453: PUSH
38454: LD_INT 32
38456: PUSH
38457: LD_INT 31
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: IN
38464: OR
38465: IFFALSE 38279
38467: GO 38276
38469: POP
38470: POP
// end else
38471: GO 38853
// for j = 1 to x do
38473: LD_ADDR_VAR 0 9
38477: PUSH
38478: DOUBLE
38479: LD_INT 1
38481: DEC
38482: ST_TO_ADDR
38483: LD_VAR 0 13
38487: PUSH
38488: FOR_TO
38489: IFFALSE 38851
// begin InitHc ;
38491: CALL_OW 19
// if not f then
38495: LD_VAR 0 12
38499: NOT
38500: IFFALSE 38589
// begin PrepareHuman ( false , i , skill ) ;
38502: LD_INT 0
38504: PPUSH
38505: LD_VAR 0 8
38509: PPUSH
38510: LD_VAR 0 4
38514: PPUSH
38515: CALL_OW 380
// un := CreateHuman ;
38519: LD_ADDR_VAR 0 14
38523: PUSH
38524: CALL_OW 44
38528: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38529: LD_ADDR_VAR 0 7
38533: PUSH
38534: LD_VAR 0 7
38538: PPUSH
38539: LD_INT 1
38541: PPUSH
38542: LD_VAR 0 14
38546: PPUSH
38547: CALL_OW 2
38551: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38552: LD_VAR 0 14
38556: PPUSH
38557: LD_VAR 0 1
38561: PPUSH
38562: CALL_OW 250
38566: PPUSH
38567: LD_VAR 0 1
38571: PPUSH
38572: CALL_OW 251
38576: PPUSH
38577: LD_INT 10
38579: PPUSH
38580: LD_INT 0
38582: PPUSH
38583: CALL_OW 50
// continue ;
38587: GO 38488
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38589: LD_VAR 0 12
38593: PUSH
38594: LD_INT 1
38596: ARRAY
38597: PPUSH
38598: CALL_OW 313
38602: PUSH
38603: LD_VAR 0 12
38607: PUSH
38608: LD_INT 1
38610: ARRAY
38611: PPUSH
38612: CALL_OW 266
38616: PUSH
38617: LD_INT 32
38619: PUSH
38620: LD_INT 31
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: IN
38627: AND
38628: PUSH
38629: LD_VAR 0 12
38633: PUSH
38634: LD_INT 1
38636: ARRAY
38637: PPUSH
38638: CALL_OW 313
38642: PUSH
38643: LD_INT 6
38645: EQUAL
38646: OR
38647: IFFALSE 38667
// f := Delete ( f , 1 ) ;
38649: LD_ADDR_VAR 0 12
38653: PUSH
38654: LD_VAR 0 12
38658: PPUSH
38659: LD_INT 1
38661: PPUSH
38662: CALL_OW 3
38666: ST_TO_ADDR
// if not f then
38667: LD_VAR 0 12
38671: NOT
38672: IFFALSE 38690
// begin x := x + 2 ;
38674: LD_ADDR_VAR 0 13
38678: PUSH
38679: LD_VAR 0 13
38683: PUSH
38684: LD_INT 2
38686: PLUS
38687: ST_TO_ADDR
// continue ;
38688: GO 38488
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38690: LD_VAR 0 12
38694: PUSH
38695: LD_INT 1
38697: ARRAY
38698: PPUSH
38699: CALL_OW 266
38703: PUSH
38704: LD_INT 5
38706: EQUAL
38707: IFFALSE 38781
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38709: LD_VAR 0 12
38713: PUSH
38714: LD_INT 1
38716: ARRAY
38717: PPUSH
38718: CALL_OW 313
38722: PUSH
38723: LD_INT 3
38725: LESS
38726: IFFALSE 38762
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38728: LD_INT 0
38730: PPUSH
38731: LD_INT 5
38733: PUSH
38734: LD_INT 8
38736: PUSH
38737: LD_INT 9
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: PUSH
38745: LD_VAR 0 17
38749: ARRAY
38750: PPUSH
38751: LD_VAR 0 4
38755: PPUSH
38756: CALL_OW 380
38760: GO 38779
// PrepareHuman ( false , i , skill ) ;
38762: LD_INT 0
38764: PPUSH
38765: LD_VAR 0 8
38769: PPUSH
38770: LD_VAR 0 4
38774: PPUSH
38775: CALL_OW 380
// end else
38779: GO 38798
// PrepareHuman ( false , i , skill ) ;
38781: LD_INT 0
38783: PPUSH
38784: LD_VAR 0 8
38788: PPUSH
38789: LD_VAR 0 4
38793: PPUSH
38794: CALL_OW 380
// un := CreateHuman ;
38798: LD_ADDR_VAR 0 14
38802: PUSH
38803: CALL_OW 44
38807: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38808: LD_ADDR_VAR 0 7
38812: PUSH
38813: LD_VAR 0 7
38817: PPUSH
38818: LD_INT 1
38820: PPUSH
38821: LD_VAR 0 14
38825: PPUSH
38826: CALL_OW 2
38830: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38831: LD_VAR 0 14
38835: PPUSH
38836: LD_VAR 0 12
38840: PUSH
38841: LD_INT 1
38843: ARRAY
38844: PPUSH
38845: CALL_OW 52
// end ;
38849: GO 38488
38851: POP
38852: POP
// end ;
38853: GO 37790
38855: POP
38856: POP
// result := result ^ buildings ;
38857: LD_ADDR_VAR 0 7
38861: PUSH
38862: LD_VAR 0 7
38866: PUSH
38867: LD_VAR 0 18
38871: ADD
38872: ST_TO_ADDR
// end else
38873: GO 39016
// begin for i = 1 to personel do
38875: LD_ADDR_VAR 0 8
38879: PUSH
38880: DOUBLE
38881: LD_INT 1
38883: DEC
38884: ST_TO_ADDR
38885: LD_VAR 0 6
38889: PUSH
38890: FOR_TO
38891: IFFALSE 39014
// begin if i > 4 then
38893: LD_VAR 0 8
38897: PUSH
38898: LD_INT 4
38900: GREATER
38901: IFFALSE 38905
// break ;
38903: GO 39014
// x := personel [ i ] ;
38905: LD_ADDR_VAR 0 13
38909: PUSH
38910: LD_VAR 0 6
38914: PUSH
38915: LD_VAR 0 8
38919: ARRAY
38920: ST_TO_ADDR
// if x = - 1 then
38921: LD_VAR 0 13
38925: PUSH
38926: LD_INT 1
38928: NEG
38929: EQUAL
38930: IFFALSE 38934
// continue ;
38932: GO 38890
// PrepareHuman ( false , i , skill ) ;
38934: LD_INT 0
38936: PPUSH
38937: LD_VAR 0 8
38941: PPUSH
38942: LD_VAR 0 4
38946: PPUSH
38947: CALL_OW 380
// un := CreateHuman ;
38951: LD_ADDR_VAR 0 14
38955: PUSH
38956: CALL_OW 44
38960: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38961: LD_VAR 0 14
38965: PPUSH
38966: LD_VAR 0 1
38970: PPUSH
38971: CALL_OW 250
38975: PPUSH
38976: LD_VAR 0 1
38980: PPUSH
38981: CALL_OW 251
38985: PPUSH
38986: LD_INT 10
38988: PPUSH
38989: LD_INT 0
38991: PPUSH
38992: CALL_OW 50
// result := result ^ un ;
38996: LD_ADDR_VAR 0 7
39000: PUSH
39001: LD_VAR 0 7
39005: PUSH
39006: LD_VAR 0 14
39010: ADD
39011: ST_TO_ADDR
// end ;
39012: GO 38890
39014: POP
39015: POP
// end ; end ;
39016: LD_VAR 0 7
39020: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39021: LD_INT 0
39023: PPUSH
39024: PPUSH
39025: PPUSH
39026: PPUSH
39027: PPUSH
39028: PPUSH
39029: PPUSH
39030: PPUSH
39031: PPUSH
39032: PPUSH
39033: PPUSH
39034: PPUSH
39035: PPUSH
39036: PPUSH
39037: PPUSH
39038: PPUSH
// result := false ;
39039: LD_ADDR_VAR 0 3
39043: PUSH
39044: LD_INT 0
39046: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39047: LD_VAR 0 1
39051: NOT
39052: PUSH
39053: LD_VAR 0 1
39057: PPUSH
39058: CALL_OW 266
39062: PUSH
39063: LD_INT 32
39065: PUSH
39066: LD_INT 33
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: IN
39073: NOT
39074: OR
39075: IFFALSE 39079
// exit ;
39077: GO 40188
// nat := GetNation ( tower ) ;
39079: LD_ADDR_VAR 0 12
39083: PUSH
39084: LD_VAR 0 1
39088: PPUSH
39089: CALL_OW 248
39093: ST_TO_ADDR
// side := GetSide ( tower ) ;
39094: LD_ADDR_VAR 0 16
39098: PUSH
39099: LD_VAR 0 1
39103: PPUSH
39104: CALL_OW 255
39108: ST_TO_ADDR
// x := GetX ( tower ) ;
39109: LD_ADDR_VAR 0 10
39113: PUSH
39114: LD_VAR 0 1
39118: PPUSH
39119: CALL_OW 250
39123: ST_TO_ADDR
// y := GetY ( tower ) ;
39124: LD_ADDR_VAR 0 11
39128: PUSH
39129: LD_VAR 0 1
39133: PPUSH
39134: CALL_OW 251
39138: ST_TO_ADDR
// if not x or not y then
39139: LD_VAR 0 10
39143: NOT
39144: PUSH
39145: LD_VAR 0 11
39149: NOT
39150: OR
39151: IFFALSE 39155
// exit ;
39153: GO 40188
// weapon := 0 ;
39155: LD_ADDR_VAR 0 18
39159: PUSH
39160: LD_INT 0
39162: ST_TO_ADDR
// fac_list := [ ] ;
39163: LD_ADDR_VAR 0 17
39167: PUSH
39168: EMPTY
39169: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39170: LD_ADDR_VAR 0 6
39174: PUSH
39175: LD_VAR 0 1
39179: PPUSH
39180: CALL_OW 274
39184: PPUSH
39185: LD_VAR 0 2
39189: PPUSH
39190: LD_INT 0
39192: PPUSH
39193: CALL 36759 0 3
39197: PPUSH
39198: LD_INT 30
39200: PUSH
39201: LD_INT 3
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PPUSH
39208: CALL_OW 72
39212: ST_TO_ADDR
// if not factories then
39213: LD_VAR 0 6
39217: NOT
39218: IFFALSE 39222
// exit ;
39220: GO 40188
// for i in factories do
39222: LD_ADDR_VAR 0 8
39226: PUSH
39227: LD_VAR 0 6
39231: PUSH
39232: FOR_IN
39233: IFFALSE 39258
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39235: LD_ADDR_VAR 0 17
39239: PUSH
39240: LD_VAR 0 17
39244: PUSH
39245: LD_VAR 0 8
39249: PPUSH
39250: CALL_OW 478
39254: UNION
39255: ST_TO_ADDR
39256: GO 39232
39258: POP
39259: POP
// if not fac_list then
39260: LD_VAR 0 17
39264: NOT
39265: IFFALSE 39269
// exit ;
39267: GO 40188
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39269: LD_ADDR_VAR 0 5
39273: PUSH
39274: LD_INT 4
39276: PUSH
39277: LD_INT 5
39279: PUSH
39280: LD_INT 9
39282: PUSH
39283: LD_INT 10
39285: PUSH
39286: LD_INT 6
39288: PUSH
39289: LD_INT 7
39291: PUSH
39292: LD_INT 11
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 27
39306: PUSH
39307: LD_INT 28
39309: PUSH
39310: LD_INT 26
39312: PUSH
39313: LD_INT 30
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 43
39324: PUSH
39325: LD_INT 44
39327: PUSH
39328: LD_INT 46
39330: PUSH
39331: LD_INT 45
39333: PUSH
39334: LD_INT 47
39336: PUSH
39337: LD_INT 49
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: LIST
39352: PUSH
39353: LD_VAR 0 12
39357: ARRAY
39358: ST_TO_ADDR
// list := list isect fac_list ;
39359: LD_ADDR_VAR 0 5
39363: PUSH
39364: LD_VAR 0 5
39368: PUSH
39369: LD_VAR 0 17
39373: ISECT
39374: ST_TO_ADDR
// if not list then
39375: LD_VAR 0 5
39379: NOT
39380: IFFALSE 39384
// exit ;
39382: GO 40188
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39384: LD_VAR 0 12
39388: PUSH
39389: LD_INT 3
39391: EQUAL
39392: PUSH
39393: LD_INT 49
39395: PUSH
39396: LD_VAR 0 5
39400: IN
39401: AND
39402: PUSH
39403: LD_INT 31
39405: PPUSH
39406: LD_VAR 0 16
39410: PPUSH
39411: CALL_OW 321
39415: PUSH
39416: LD_INT 2
39418: EQUAL
39419: AND
39420: IFFALSE 39480
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39422: LD_INT 22
39424: PUSH
39425: LD_VAR 0 16
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 35
39436: PUSH
39437: LD_INT 49
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 91
39446: PUSH
39447: LD_VAR 0 1
39451: PUSH
39452: LD_INT 10
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: LIST
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: LIST
39464: PPUSH
39465: CALL_OW 69
39469: NOT
39470: IFFALSE 39480
// weapon := ru_time_lapser ;
39472: LD_ADDR_VAR 0 18
39476: PUSH
39477: LD_INT 49
39479: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39480: LD_VAR 0 12
39484: PUSH
39485: LD_INT 1
39487: PUSH
39488: LD_INT 2
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: IN
39495: PUSH
39496: LD_INT 11
39498: PUSH
39499: LD_VAR 0 5
39503: IN
39504: PUSH
39505: LD_INT 30
39507: PUSH
39508: LD_VAR 0 5
39512: IN
39513: OR
39514: AND
39515: PUSH
39516: LD_INT 6
39518: PPUSH
39519: LD_VAR 0 16
39523: PPUSH
39524: CALL_OW 321
39528: PUSH
39529: LD_INT 2
39531: EQUAL
39532: AND
39533: IFFALSE 39698
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39535: LD_INT 22
39537: PUSH
39538: LD_VAR 0 16
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 2
39549: PUSH
39550: LD_INT 35
39552: PUSH
39553: LD_INT 11
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 35
39562: PUSH
39563: LD_INT 30
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 91
39577: PUSH
39578: LD_VAR 0 1
39582: PUSH
39583: LD_INT 18
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: LIST
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: LIST
39595: PPUSH
39596: CALL_OW 69
39600: NOT
39601: PUSH
39602: LD_INT 22
39604: PUSH
39605: LD_VAR 0 16
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 2
39616: PUSH
39617: LD_INT 30
39619: PUSH
39620: LD_INT 32
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 30
39629: PUSH
39630: LD_INT 33
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 91
39644: PUSH
39645: LD_VAR 0 1
39649: PUSH
39650: LD_INT 12
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: LIST
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: LIST
39662: PUSH
39663: EMPTY
39664: LIST
39665: PPUSH
39666: CALL_OW 69
39670: PUSH
39671: LD_INT 2
39673: GREATER
39674: AND
39675: IFFALSE 39698
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39677: LD_ADDR_VAR 0 18
39681: PUSH
39682: LD_INT 11
39684: PUSH
39685: LD_INT 30
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_VAR 0 12
39696: ARRAY
39697: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39698: LD_VAR 0 18
39702: NOT
39703: PUSH
39704: LD_INT 40
39706: PPUSH
39707: LD_VAR 0 16
39711: PPUSH
39712: CALL_OW 321
39716: PUSH
39717: LD_INT 2
39719: EQUAL
39720: AND
39721: PUSH
39722: LD_INT 7
39724: PUSH
39725: LD_VAR 0 5
39729: IN
39730: PUSH
39731: LD_INT 28
39733: PUSH
39734: LD_VAR 0 5
39738: IN
39739: OR
39740: PUSH
39741: LD_INT 45
39743: PUSH
39744: LD_VAR 0 5
39748: IN
39749: OR
39750: AND
39751: IFFALSE 40005
// begin hex := GetHexInfo ( x , y ) ;
39753: LD_ADDR_VAR 0 4
39757: PUSH
39758: LD_VAR 0 10
39762: PPUSH
39763: LD_VAR 0 11
39767: PPUSH
39768: CALL_OW 546
39772: ST_TO_ADDR
// if hex [ 1 ] then
39773: LD_VAR 0 4
39777: PUSH
39778: LD_INT 1
39780: ARRAY
39781: IFFALSE 39785
// exit ;
39783: GO 40188
// height := hex [ 2 ] ;
39785: LD_ADDR_VAR 0 15
39789: PUSH
39790: LD_VAR 0 4
39794: PUSH
39795: LD_INT 2
39797: ARRAY
39798: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39799: LD_ADDR_VAR 0 14
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: LD_INT 2
39809: PUSH
39810: LD_INT 3
39812: PUSH
39813: LD_INT 5
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: ST_TO_ADDR
// for i in tmp do
39822: LD_ADDR_VAR 0 8
39826: PUSH
39827: LD_VAR 0 14
39831: PUSH
39832: FOR_IN
39833: IFFALSE 40003
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39835: LD_ADDR_VAR 0 9
39839: PUSH
39840: LD_VAR 0 10
39844: PPUSH
39845: LD_VAR 0 8
39849: PPUSH
39850: LD_INT 5
39852: PPUSH
39853: CALL_OW 272
39857: PUSH
39858: LD_VAR 0 11
39862: PPUSH
39863: LD_VAR 0 8
39867: PPUSH
39868: LD_INT 5
39870: PPUSH
39871: CALL_OW 273
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39880: LD_VAR 0 9
39884: PUSH
39885: LD_INT 1
39887: ARRAY
39888: PPUSH
39889: LD_VAR 0 9
39893: PUSH
39894: LD_INT 2
39896: ARRAY
39897: PPUSH
39898: CALL_OW 488
39902: IFFALSE 40001
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39904: LD_ADDR_VAR 0 4
39908: PUSH
39909: LD_VAR 0 9
39913: PUSH
39914: LD_INT 1
39916: ARRAY
39917: PPUSH
39918: LD_VAR 0 9
39922: PUSH
39923: LD_INT 2
39925: ARRAY
39926: PPUSH
39927: CALL_OW 546
39931: ST_TO_ADDR
// if hex [ 1 ] then
39932: LD_VAR 0 4
39936: PUSH
39937: LD_INT 1
39939: ARRAY
39940: IFFALSE 39944
// continue ;
39942: GO 39832
// h := hex [ 2 ] ;
39944: LD_ADDR_VAR 0 13
39948: PUSH
39949: LD_VAR 0 4
39953: PUSH
39954: LD_INT 2
39956: ARRAY
39957: ST_TO_ADDR
// if h + 7 < height then
39958: LD_VAR 0 13
39962: PUSH
39963: LD_INT 7
39965: PLUS
39966: PUSH
39967: LD_VAR 0 15
39971: LESS
39972: IFFALSE 40001
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39974: LD_ADDR_VAR 0 18
39978: PUSH
39979: LD_INT 7
39981: PUSH
39982: LD_INT 28
39984: PUSH
39985: LD_INT 45
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: PUSH
39993: LD_VAR 0 12
39997: ARRAY
39998: ST_TO_ADDR
// break ;
39999: GO 40003
// end ; end ; end ;
40001: GO 39832
40003: POP
40004: POP
// end ; if not weapon then
40005: LD_VAR 0 18
40009: NOT
40010: IFFALSE 40070
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40012: LD_ADDR_VAR 0 5
40016: PUSH
40017: LD_VAR 0 5
40021: PUSH
40022: LD_INT 11
40024: PUSH
40025: LD_INT 30
40027: PUSH
40028: LD_INT 49
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: DIFF
40036: ST_TO_ADDR
// if not list then
40037: LD_VAR 0 5
40041: NOT
40042: IFFALSE 40046
// exit ;
40044: GO 40188
// weapon := list [ rand ( 1 , list ) ] ;
40046: LD_ADDR_VAR 0 18
40050: PUSH
40051: LD_VAR 0 5
40055: PUSH
40056: LD_INT 1
40058: PPUSH
40059: LD_VAR 0 5
40063: PPUSH
40064: CALL_OW 12
40068: ARRAY
40069: ST_TO_ADDR
// end ; if weapon then
40070: LD_VAR 0 18
40074: IFFALSE 40188
// begin tmp := CostOfWeapon ( weapon ) ;
40076: LD_ADDR_VAR 0 14
40080: PUSH
40081: LD_VAR 0 18
40085: PPUSH
40086: CALL_OW 451
40090: ST_TO_ADDR
// j := GetBase ( tower ) ;
40091: LD_ADDR_VAR 0 9
40095: PUSH
40096: LD_VAR 0 1
40100: PPUSH
40101: CALL_OW 274
40105: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40106: LD_VAR 0 9
40110: PPUSH
40111: LD_INT 1
40113: PPUSH
40114: CALL_OW 275
40118: PUSH
40119: LD_VAR 0 14
40123: PUSH
40124: LD_INT 1
40126: ARRAY
40127: GREATEREQUAL
40128: PUSH
40129: LD_VAR 0 9
40133: PPUSH
40134: LD_INT 2
40136: PPUSH
40137: CALL_OW 275
40141: PUSH
40142: LD_VAR 0 14
40146: PUSH
40147: LD_INT 2
40149: ARRAY
40150: GREATEREQUAL
40151: AND
40152: PUSH
40153: LD_VAR 0 9
40157: PPUSH
40158: LD_INT 3
40160: PPUSH
40161: CALL_OW 275
40165: PUSH
40166: LD_VAR 0 14
40170: PUSH
40171: LD_INT 3
40173: ARRAY
40174: GREATEREQUAL
40175: AND
40176: IFFALSE 40188
// result := weapon ;
40178: LD_ADDR_VAR 0 3
40182: PUSH
40183: LD_VAR 0 18
40187: ST_TO_ADDR
// end ; end ;
40188: LD_VAR 0 3
40192: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40193: LD_INT 0
40195: PPUSH
40196: PPUSH
// result := true ;
40197: LD_ADDR_VAR 0 3
40201: PUSH
40202: LD_INT 1
40204: ST_TO_ADDR
// if array1 = array2 then
40205: LD_VAR 0 1
40209: PUSH
40210: LD_VAR 0 2
40214: EQUAL
40215: IFFALSE 40275
// begin for i = 1 to array1 do
40217: LD_ADDR_VAR 0 4
40221: PUSH
40222: DOUBLE
40223: LD_INT 1
40225: DEC
40226: ST_TO_ADDR
40227: LD_VAR 0 1
40231: PUSH
40232: FOR_TO
40233: IFFALSE 40271
// if array1 [ i ] <> array2 [ i ] then
40235: LD_VAR 0 1
40239: PUSH
40240: LD_VAR 0 4
40244: ARRAY
40245: PUSH
40246: LD_VAR 0 2
40250: PUSH
40251: LD_VAR 0 4
40255: ARRAY
40256: NONEQUAL
40257: IFFALSE 40269
// begin result := false ;
40259: LD_ADDR_VAR 0 3
40263: PUSH
40264: LD_INT 0
40266: ST_TO_ADDR
// break ;
40267: GO 40271
// end ;
40269: GO 40232
40271: POP
40272: POP
// end else
40273: GO 40283
// result := false ;
40275: LD_ADDR_VAR 0 3
40279: PUSH
40280: LD_INT 0
40282: ST_TO_ADDR
// end ;
40283: LD_VAR 0 3
40287: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40288: LD_INT 0
40290: PPUSH
40291: PPUSH
// if not array1 or not array2 then
40292: LD_VAR 0 1
40296: NOT
40297: PUSH
40298: LD_VAR 0 2
40302: NOT
40303: OR
40304: IFFALSE 40308
// exit ;
40306: GO 40372
// result := true ;
40308: LD_ADDR_VAR 0 3
40312: PUSH
40313: LD_INT 1
40315: ST_TO_ADDR
// for i = 1 to array1 do
40316: LD_ADDR_VAR 0 4
40320: PUSH
40321: DOUBLE
40322: LD_INT 1
40324: DEC
40325: ST_TO_ADDR
40326: LD_VAR 0 1
40330: PUSH
40331: FOR_TO
40332: IFFALSE 40370
// if array1 [ i ] <> array2 [ i ] then
40334: LD_VAR 0 1
40338: PUSH
40339: LD_VAR 0 4
40343: ARRAY
40344: PUSH
40345: LD_VAR 0 2
40349: PUSH
40350: LD_VAR 0 4
40354: ARRAY
40355: NONEQUAL
40356: IFFALSE 40368
// begin result := false ;
40358: LD_ADDR_VAR 0 3
40362: PUSH
40363: LD_INT 0
40365: ST_TO_ADDR
// break ;
40366: GO 40370
// end ;
40368: GO 40331
40370: POP
40371: POP
// end ;
40372: LD_VAR 0 3
40376: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40377: LD_INT 0
40379: PPUSH
40380: PPUSH
40381: PPUSH
// pom := GetBase ( fac ) ;
40382: LD_ADDR_VAR 0 5
40386: PUSH
40387: LD_VAR 0 1
40391: PPUSH
40392: CALL_OW 274
40396: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40397: LD_ADDR_VAR 0 4
40401: PUSH
40402: LD_VAR 0 2
40406: PUSH
40407: LD_INT 1
40409: ARRAY
40410: PPUSH
40411: LD_VAR 0 2
40415: PUSH
40416: LD_INT 2
40418: ARRAY
40419: PPUSH
40420: LD_VAR 0 2
40424: PUSH
40425: LD_INT 3
40427: ARRAY
40428: PPUSH
40429: LD_VAR 0 2
40433: PUSH
40434: LD_INT 4
40436: ARRAY
40437: PPUSH
40438: CALL_OW 449
40442: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40443: LD_ADDR_VAR 0 3
40447: PUSH
40448: LD_VAR 0 5
40452: PPUSH
40453: LD_INT 1
40455: PPUSH
40456: CALL_OW 275
40460: PUSH
40461: LD_VAR 0 4
40465: PUSH
40466: LD_INT 1
40468: ARRAY
40469: GREATEREQUAL
40470: PUSH
40471: LD_VAR 0 5
40475: PPUSH
40476: LD_INT 2
40478: PPUSH
40479: CALL_OW 275
40483: PUSH
40484: LD_VAR 0 4
40488: PUSH
40489: LD_INT 2
40491: ARRAY
40492: GREATEREQUAL
40493: AND
40494: PUSH
40495: LD_VAR 0 5
40499: PPUSH
40500: LD_INT 3
40502: PPUSH
40503: CALL_OW 275
40507: PUSH
40508: LD_VAR 0 4
40512: PUSH
40513: LD_INT 3
40515: ARRAY
40516: GREATEREQUAL
40517: AND
40518: ST_TO_ADDR
// end ;
40519: LD_VAR 0 3
40523: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40524: LD_INT 0
40526: PPUSH
40527: PPUSH
40528: PPUSH
40529: PPUSH
// pom := GetBase ( building ) ;
40530: LD_ADDR_VAR 0 3
40534: PUSH
40535: LD_VAR 0 1
40539: PPUSH
40540: CALL_OW 274
40544: ST_TO_ADDR
// if not pom then
40545: LD_VAR 0 3
40549: NOT
40550: IFFALSE 40554
// exit ;
40552: GO 40724
// btype := GetBType ( building ) ;
40554: LD_ADDR_VAR 0 5
40558: PUSH
40559: LD_VAR 0 1
40563: PPUSH
40564: CALL_OW 266
40568: ST_TO_ADDR
// if btype = b_armoury then
40569: LD_VAR 0 5
40573: PUSH
40574: LD_INT 4
40576: EQUAL
40577: IFFALSE 40587
// btype := b_barracks ;
40579: LD_ADDR_VAR 0 5
40583: PUSH
40584: LD_INT 5
40586: ST_TO_ADDR
// if btype = b_depot then
40587: LD_VAR 0 5
40591: PUSH
40592: LD_INT 0
40594: EQUAL
40595: IFFALSE 40605
// btype := b_warehouse ;
40597: LD_ADDR_VAR 0 5
40601: PUSH
40602: LD_INT 1
40604: ST_TO_ADDR
// if btype = b_workshop then
40605: LD_VAR 0 5
40609: PUSH
40610: LD_INT 2
40612: EQUAL
40613: IFFALSE 40623
// btype := b_factory ;
40615: LD_ADDR_VAR 0 5
40619: PUSH
40620: LD_INT 3
40622: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40623: LD_ADDR_VAR 0 4
40627: PUSH
40628: LD_VAR 0 5
40632: PPUSH
40633: LD_VAR 0 1
40637: PPUSH
40638: CALL_OW 248
40642: PPUSH
40643: CALL_OW 450
40647: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40648: LD_ADDR_VAR 0 2
40652: PUSH
40653: LD_VAR 0 3
40657: PPUSH
40658: LD_INT 1
40660: PPUSH
40661: CALL_OW 275
40665: PUSH
40666: LD_VAR 0 4
40670: PUSH
40671: LD_INT 1
40673: ARRAY
40674: GREATEREQUAL
40675: PUSH
40676: LD_VAR 0 3
40680: PPUSH
40681: LD_INT 2
40683: PPUSH
40684: CALL_OW 275
40688: PUSH
40689: LD_VAR 0 4
40693: PUSH
40694: LD_INT 2
40696: ARRAY
40697: GREATEREQUAL
40698: AND
40699: PUSH
40700: LD_VAR 0 3
40704: PPUSH
40705: LD_INT 3
40707: PPUSH
40708: CALL_OW 275
40712: PUSH
40713: LD_VAR 0 4
40717: PUSH
40718: LD_INT 3
40720: ARRAY
40721: GREATEREQUAL
40722: AND
40723: ST_TO_ADDR
// end ;
40724: LD_VAR 0 2
40728: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40729: LD_INT 0
40731: PPUSH
40732: PPUSH
40733: PPUSH
// pom := GetBase ( building ) ;
40734: LD_ADDR_VAR 0 4
40738: PUSH
40739: LD_VAR 0 1
40743: PPUSH
40744: CALL_OW 274
40748: ST_TO_ADDR
// if not pom then
40749: LD_VAR 0 4
40753: NOT
40754: IFFALSE 40758
// exit ;
40756: GO 40859
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40758: LD_ADDR_VAR 0 5
40762: PUSH
40763: LD_VAR 0 2
40767: PPUSH
40768: LD_VAR 0 1
40772: PPUSH
40773: CALL_OW 248
40777: PPUSH
40778: CALL_OW 450
40782: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40783: LD_ADDR_VAR 0 3
40787: PUSH
40788: LD_VAR 0 4
40792: PPUSH
40793: LD_INT 1
40795: PPUSH
40796: CALL_OW 275
40800: PUSH
40801: LD_VAR 0 5
40805: PUSH
40806: LD_INT 1
40808: ARRAY
40809: GREATEREQUAL
40810: PUSH
40811: LD_VAR 0 4
40815: PPUSH
40816: LD_INT 2
40818: PPUSH
40819: CALL_OW 275
40823: PUSH
40824: LD_VAR 0 5
40828: PUSH
40829: LD_INT 2
40831: ARRAY
40832: GREATEREQUAL
40833: AND
40834: PUSH
40835: LD_VAR 0 4
40839: PPUSH
40840: LD_INT 3
40842: PPUSH
40843: CALL_OW 275
40847: PUSH
40848: LD_VAR 0 5
40852: PUSH
40853: LD_INT 3
40855: ARRAY
40856: GREATEREQUAL
40857: AND
40858: ST_TO_ADDR
// end ;
40859: LD_VAR 0 3
40863: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40864: LD_INT 0
40866: PPUSH
40867: PPUSH
40868: PPUSH
40869: PPUSH
40870: PPUSH
40871: PPUSH
40872: PPUSH
40873: PPUSH
40874: PPUSH
40875: PPUSH
40876: PPUSH
// result := false ;
40877: LD_ADDR_VAR 0 8
40881: PUSH
40882: LD_INT 0
40884: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40885: LD_VAR 0 5
40889: NOT
40890: PUSH
40891: LD_VAR 0 1
40895: NOT
40896: OR
40897: PUSH
40898: LD_VAR 0 2
40902: NOT
40903: OR
40904: PUSH
40905: LD_VAR 0 3
40909: NOT
40910: OR
40911: IFFALSE 40915
// exit ;
40913: GO 41729
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40915: LD_ADDR_VAR 0 14
40919: PUSH
40920: LD_VAR 0 1
40924: PPUSH
40925: LD_VAR 0 2
40929: PPUSH
40930: LD_VAR 0 3
40934: PPUSH
40935: LD_VAR 0 4
40939: PPUSH
40940: LD_VAR 0 5
40944: PUSH
40945: LD_INT 1
40947: ARRAY
40948: PPUSH
40949: CALL_OW 248
40953: PPUSH
40954: LD_INT 0
40956: PPUSH
40957: CALL 42982 0 6
40961: ST_TO_ADDR
// if not hexes then
40962: LD_VAR 0 14
40966: NOT
40967: IFFALSE 40971
// exit ;
40969: GO 41729
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40971: LD_ADDR_VAR 0 17
40975: PUSH
40976: LD_VAR 0 5
40980: PPUSH
40981: LD_INT 22
40983: PUSH
40984: LD_VAR 0 13
40988: PPUSH
40989: CALL_OW 255
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 2
41000: PUSH
41001: LD_INT 30
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 30
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: LIST
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PPUSH
41030: CALL_OW 72
41034: ST_TO_ADDR
// for i = 1 to hexes do
41035: LD_ADDR_VAR 0 9
41039: PUSH
41040: DOUBLE
41041: LD_INT 1
41043: DEC
41044: ST_TO_ADDR
41045: LD_VAR 0 14
41049: PUSH
41050: FOR_TO
41051: IFFALSE 41727
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41053: LD_ADDR_VAR 0 13
41057: PUSH
41058: LD_VAR 0 14
41062: PUSH
41063: LD_VAR 0 9
41067: ARRAY
41068: PUSH
41069: LD_INT 1
41071: ARRAY
41072: PPUSH
41073: LD_VAR 0 14
41077: PUSH
41078: LD_VAR 0 9
41082: ARRAY
41083: PUSH
41084: LD_INT 2
41086: ARRAY
41087: PPUSH
41088: CALL_OW 428
41092: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41093: LD_VAR 0 14
41097: PUSH
41098: LD_VAR 0 9
41102: ARRAY
41103: PUSH
41104: LD_INT 1
41106: ARRAY
41107: PPUSH
41108: LD_VAR 0 14
41112: PUSH
41113: LD_VAR 0 9
41117: ARRAY
41118: PUSH
41119: LD_INT 2
41121: ARRAY
41122: PPUSH
41123: CALL_OW 351
41127: PUSH
41128: LD_VAR 0 14
41132: PUSH
41133: LD_VAR 0 9
41137: ARRAY
41138: PUSH
41139: LD_INT 1
41141: ARRAY
41142: PPUSH
41143: LD_VAR 0 14
41147: PUSH
41148: LD_VAR 0 9
41152: ARRAY
41153: PUSH
41154: LD_INT 2
41156: ARRAY
41157: PPUSH
41158: CALL_OW 488
41162: NOT
41163: OR
41164: PUSH
41165: LD_VAR 0 13
41169: PPUSH
41170: CALL_OW 247
41174: PUSH
41175: LD_INT 3
41177: EQUAL
41178: OR
41179: IFFALSE 41185
// exit ;
41181: POP
41182: POP
41183: GO 41729
// if not tmp then
41185: LD_VAR 0 13
41189: NOT
41190: IFFALSE 41194
// continue ;
41192: GO 41050
// result := true ;
41194: LD_ADDR_VAR 0 8
41198: PUSH
41199: LD_INT 1
41201: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41202: LD_VAR 0 6
41206: PUSH
41207: LD_VAR 0 13
41211: PPUSH
41212: CALL_OW 247
41216: PUSH
41217: LD_INT 2
41219: EQUAL
41220: AND
41221: PUSH
41222: LD_VAR 0 13
41226: PPUSH
41227: CALL_OW 263
41231: PUSH
41232: LD_INT 1
41234: EQUAL
41235: AND
41236: IFFALSE 41400
// begin if IsDrivenBy ( tmp ) then
41238: LD_VAR 0 13
41242: PPUSH
41243: CALL_OW 311
41247: IFFALSE 41251
// continue ;
41249: GO 41050
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41251: LD_VAR 0 6
41255: PPUSH
41256: LD_INT 3
41258: PUSH
41259: LD_INT 60
41261: PUSH
41262: EMPTY
41263: LIST
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 3
41271: PUSH
41272: LD_INT 55
41274: PUSH
41275: EMPTY
41276: LIST
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PPUSH
41286: CALL_OW 72
41290: IFFALSE 41398
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41292: LD_ADDR_VAR 0 18
41296: PUSH
41297: LD_VAR 0 6
41301: PPUSH
41302: LD_INT 3
41304: PUSH
41305: LD_INT 60
41307: PUSH
41308: EMPTY
41309: LIST
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 3
41317: PUSH
41318: LD_INT 55
41320: PUSH
41321: EMPTY
41322: LIST
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PPUSH
41332: CALL_OW 72
41336: PUSH
41337: LD_INT 1
41339: ARRAY
41340: ST_TO_ADDR
// if IsInUnit ( driver ) then
41341: LD_VAR 0 18
41345: PPUSH
41346: CALL_OW 310
41350: IFFALSE 41361
// ComExit ( driver ) ;
41352: LD_VAR 0 18
41356: PPUSH
41357: CALL 66783 0 1
// AddComEnterUnit ( driver , tmp ) ;
41361: LD_VAR 0 18
41365: PPUSH
41366: LD_VAR 0 13
41370: PPUSH
41371: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41375: LD_VAR 0 18
41379: PPUSH
41380: LD_VAR 0 7
41384: PPUSH
41385: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41389: LD_VAR 0 18
41393: PPUSH
41394: CALL_OW 181
// end ; continue ;
41398: GO 41050
// end ; if not cleaners or not tmp in cleaners then
41400: LD_VAR 0 6
41404: NOT
41405: PUSH
41406: LD_VAR 0 13
41410: PUSH
41411: LD_VAR 0 6
41415: IN
41416: NOT
41417: OR
41418: IFFALSE 41725
// begin if dep then
41420: LD_VAR 0 17
41424: IFFALSE 41560
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41426: LD_ADDR_VAR 0 16
41430: PUSH
41431: LD_VAR 0 17
41435: PUSH
41436: LD_INT 1
41438: ARRAY
41439: PPUSH
41440: CALL_OW 250
41444: PPUSH
41445: LD_VAR 0 17
41449: PUSH
41450: LD_INT 1
41452: ARRAY
41453: PPUSH
41454: CALL_OW 254
41458: PPUSH
41459: LD_INT 5
41461: PPUSH
41462: CALL_OW 272
41466: PUSH
41467: LD_VAR 0 17
41471: PUSH
41472: LD_INT 1
41474: ARRAY
41475: PPUSH
41476: CALL_OW 251
41480: PPUSH
41481: LD_VAR 0 17
41485: PUSH
41486: LD_INT 1
41488: ARRAY
41489: PPUSH
41490: CALL_OW 254
41494: PPUSH
41495: LD_INT 5
41497: PPUSH
41498: CALL_OW 273
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41507: LD_VAR 0 16
41511: PUSH
41512: LD_INT 1
41514: ARRAY
41515: PPUSH
41516: LD_VAR 0 16
41520: PUSH
41521: LD_INT 2
41523: ARRAY
41524: PPUSH
41525: CALL_OW 488
41529: IFFALSE 41560
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41531: LD_VAR 0 13
41535: PPUSH
41536: LD_VAR 0 16
41540: PUSH
41541: LD_INT 1
41543: ARRAY
41544: PPUSH
41545: LD_VAR 0 16
41549: PUSH
41550: LD_INT 2
41552: ARRAY
41553: PPUSH
41554: CALL_OW 111
// continue ;
41558: GO 41050
// end ; end ; r := GetDir ( tmp ) ;
41560: LD_ADDR_VAR 0 15
41564: PUSH
41565: LD_VAR 0 13
41569: PPUSH
41570: CALL_OW 254
41574: ST_TO_ADDR
// if r = 5 then
41575: LD_VAR 0 15
41579: PUSH
41580: LD_INT 5
41582: EQUAL
41583: IFFALSE 41593
// r := 0 ;
41585: LD_ADDR_VAR 0 15
41589: PUSH
41590: LD_INT 0
41592: ST_TO_ADDR
// for j = r to 5 do
41593: LD_ADDR_VAR 0 10
41597: PUSH
41598: DOUBLE
41599: LD_VAR 0 15
41603: DEC
41604: ST_TO_ADDR
41605: LD_INT 5
41607: PUSH
41608: FOR_TO
41609: IFFALSE 41723
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41611: LD_ADDR_VAR 0 11
41615: PUSH
41616: LD_VAR 0 13
41620: PPUSH
41621: CALL_OW 250
41625: PPUSH
41626: LD_VAR 0 10
41630: PPUSH
41631: LD_INT 2
41633: PPUSH
41634: CALL_OW 272
41638: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41639: LD_ADDR_VAR 0 12
41643: PUSH
41644: LD_VAR 0 13
41648: PPUSH
41649: CALL_OW 251
41653: PPUSH
41654: LD_VAR 0 10
41658: PPUSH
41659: LD_INT 2
41661: PPUSH
41662: CALL_OW 273
41666: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41667: LD_VAR 0 11
41671: PPUSH
41672: LD_VAR 0 12
41676: PPUSH
41677: CALL_OW 488
41681: PUSH
41682: LD_VAR 0 11
41686: PPUSH
41687: LD_VAR 0 12
41691: PPUSH
41692: CALL_OW 428
41696: NOT
41697: AND
41698: IFFALSE 41721
// begin ComMoveXY ( tmp , _x , _y ) ;
41700: LD_VAR 0 13
41704: PPUSH
41705: LD_VAR 0 11
41709: PPUSH
41710: LD_VAR 0 12
41714: PPUSH
41715: CALL_OW 111
// break ;
41719: GO 41723
// end ; end ;
41721: GO 41608
41723: POP
41724: POP
// end ; end ;
41725: GO 41050
41727: POP
41728: POP
// end ;
41729: LD_VAR 0 8
41733: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41734: LD_INT 0
41736: PPUSH
// result := true ;
41737: LD_ADDR_VAR 0 3
41741: PUSH
41742: LD_INT 1
41744: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41745: LD_VAR 0 2
41749: PUSH
41750: LD_INT 24
41752: DOUBLE
41753: EQUAL
41754: IFTRUE 41764
41756: LD_INT 33
41758: DOUBLE
41759: EQUAL
41760: IFTRUE 41764
41762: GO 41789
41764: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41765: LD_ADDR_VAR 0 3
41769: PUSH
41770: LD_INT 32
41772: PPUSH
41773: LD_VAR 0 1
41777: PPUSH
41778: CALL_OW 321
41782: PUSH
41783: LD_INT 2
41785: EQUAL
41786: ST_TO_ADDR
41787: GO 42105
41789: LD_INT 20
41791: DOUBLE
41792: EQUAL
41793: IFTRUE 41797
41795: GO 41822
41797: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41798: LD_ADDR_VAR 0 3
41802: PUSH
41803: LD_INT 6
41805: PPUSH
41806: LD_VAR 0 1
41810: PPUSH
41811: CALL_OW 321
41815: PUSH
41816: LD_INT 2
41818: EQUAL
41819: ST_TO_ADDR
41820: GO 42105
41822: LD_INT 22
41824: DOUBLE
41825: EQUAL
41826: IFTRUE 41836
41828: LD_INT 36
41830: DOUBLE
41831: EQUAL
41832: IFTRUE 41836
41834: GO 41861
41836: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41837: LD_ADDR_VAR 0 3
41841: PUSH
41842: LD_INT 15
41844: PPUSH
41845: LD_VAR 0 1
41849: PPUSH
41850: CALL_OW 321
41854: PUSH
41855: LD_INT 2
41857: EQUAL
41858: ST_TO_ADDR
41859: GO 42105
41861: LD_INT 30
41863: DOUBLE
41864: EQUAL
41865: IFTRUE 41869
41867: GO 41894
41869: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41870: LD_ADDR_VAR 0 3
41874: PUSH
41875: LD_INT 20
41877: PPUSH
41878: LD_VAR 0 1
41882: PPUSH
41883: CALL_OW 321
41887: PUSH
41888: LD_INT 2
41890: EQUAL
41891: ST_TO_ADDR
41892: GO 42105
41894: LD_INT 28
41896: DOUBLE
41897: EQUAL
41898: IFTRUE 41908
41900: LD_INT 21
41902: DOUBLE
41903: EQUAL
41904: IFTRUE 41908
41906: GO 41933
41908: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41909: LD_ADDR_VAR 0 3
41913: PUSH
41914: LD_INT 21
41916: PPUSH
41917: LD_VAR 0 1
41921: PPUSH
41922: CALL_OW 321
41926: PUSH
41927: LD_INT 2
41929: EQUAL
41930: ST_TO_ADDR
41931: GO 42105
41933: LD_INT 16
41935: DOUBLE
41936: EQUAL
41937: IFTRUE 41941
41939: GO 41966
41941: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41942: LD_ADDR_VAR 0 3
41946: PUSH
41947: LD_INT 84
41949: PPUSH
41950: LD_VAR 0 1
41954: PPUSH
41955: CALL_OW 321
41959: PUSH
41960: LD_INT 2
41962: EQUAL
41963: ST_TO_ADDR
41964: GO 42105
41966: LD_INT 19
41968: DOUBLE
41969: EQUAL
41970: IFTRUE 41980
41972: LD_INT 23
41974: DOUBLE
41975: EQUAL
41976: IFTRUE 41980
41978: GO 42005
41980: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41981: LD_ADDR_VAR 0 3
41985: PUSH
41986: LD_INT 83
41988: PPUSH
41989: LD_VAR 0 1
41993: PPUSH
41994: CALL_OW 321
41998: PUSH
41999: LD_INT 2
42001: EQUAL
42002: ST_TO_ADDR
42003: GO 42105
42005: LD_INT 17
42007: DOUBLE
42008: EQUAL
42009: IFTRUE 42013
42011: GO 42038
42013: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42014: LD_ADDR_VAR 0 3
42018: PUSH
42019: LD_INT 39
42021: PPUSH
42022: LD_VAR 0 1
42026: PPUSH
42027: CALL_OW 321
42031: PUSH
42032: LD_INT 2
42034: EQUAL
42035: ST_TO_ADDR
42036: GO 42105
42038: LD_INT 18
42040: DOUBLE
42041: EQUAL
42042: IFTRUE 42046
42044: GO 42071
42046: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42047: LD_ADDR_VAR 0 3
42051: PUSH
42052: LD_INT 40
42054: PPUSH
42055: LD_VAR 0 1
42059: PPUSH
42060: CALL_OW 321
42064: PUSH
42065: LD_INT 2
42067: EQUAL
42068: ST_TO_ADDR
42069: GO 42105
42071: LD_INT 27
42073: DOUBLE
42074: EQUAL
42075: IFTRUE 42079
42077: GO 42104
42079: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42080: LD_ADDR_VAR 0 3
42084: PUSH
42085: LD_INT 35
42087: PPUSH
42088: LD_VAR 0 1
42092: PPUSH
42093: CALL_OW 321
42097: PUSH
42098: LD_INT 2
42100: EQUAL
42101: ST_TO_ADDR
42102: GO 42105
42104: POP
// end ;
42105: LD_VAR 0 3
42109: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42110: LD_INT 0
42112: PPUSH
42113: PPUSH
42114: PPUSH
42115: PPUSH
42116: PPUSH
42117: PPUSH
42118: PPUSH
42119: PPUSH
42120: PPUSH
42121: PPUSH
42122: PPUSH
// result := false ;
42123: LD_ADDR_VAR 0 6
42127: PUSH
42128: LD_INT 0
42130: ST_TO_ADDR
// if btype = b_depot then
42131: LD_VAR 0 2
42135: PUSH
42136: LD_INT 0
42138: EQUAL
42139: IFFALSE 42151
// begin result := true ;
42141: LD_ADDR_VAR 0 6
42145: PUSH
42146: LD_INT 1
42148: ST_TO_ADDR
// exit ;
42149: GO 42977
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42151: LD_VAR 0 1
42155: NOT
42156: PUSH
42157: LD_VAR 0 1
42161: PPUSH
42162: CALL_OW 266
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: IN
42177: NOT
42178: OR
42179: PUSH
42180: LD_VAR 0 2
42184: NOT
42185: OR
42186: PUSH
42187: LD_VAR 0 5
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: LD_INT 2
42200: PUSH
42201: LD_INT 3
42203: PUSH
42204: LD_INT 4
42206: PUSH
42207: LD_INT 5
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: IN
42218: NOT
42219: OR
42220: PUSH
42221: LD_VAR 0 3
42225: PPUSH
42226: LD_VAR 0 4
42230: PPUSH
42231: CALL_OW 488
42235: NOT
42236: OR
42237: IFFALSE 42241
// exit ;
42239: GO 42977
// side := GetSide ( depot ) ;
42241: LD_ADDR_VAR 0 9
42245: PUSH
42246: LD_VAR 0 1
42250: PPUSH
42251: CALL_OW 255
42255: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42256: LD_VAR 0 9
42260: PPUSH
42261: LD_VAR 0 2
42265: PPUSH
42266: CALL 41734 0 2
42270: NOT
42271: IFFALSE 42275
// exit ;
42273: GO 42977
// pom := GetBase ( depot ) ;
42275: LD_ADDR_VAR 0 10
42279: PUSH
42280: LD_VAR 0 1
42284: PPUSH
42285: CALL_OW 274
42289: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42290: LD_ADDR_VAR 0 11
42294: PUSH
42295: LD_VAR 0 2
42299: PPUSH
42300: LD_VAR 0 1
42304: PPUSH
42305: CALL_OW 248
42309: PPUSH
42310: CALL_OW 450
42314: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42315: LD_VAR 0 10
42319: PPUSH
42320: LD_INT 1
42322: PPUSH
42323: CALL_OW 275
42327: PUSH
42328: LD_VAR 0 11
42332: PUSH
42333: LD_INT 1
42335: ARRAY
42336: GREATEREQUAL
42337: PUSH
42338: LD_VAR 0 10
42342: PPUSH
42343: LD_INT 2
42345: PPUSH
42346: CALL_OW 275
42350: PUSH
42351: LD_VAR 0 11
42355: PUSH
42356: LD_INT 2
42358: ARRAY
42359: GREATEREQUAL
42360: AND
42361: PUSH
42362: LD_VAR 0 10
42366: PPUSH
42367: LD_INT 3
42369: PPUSH
42370: CALL_OW 275
42374: PUSH
42375: LD_VAR 0 11
42379: PUSH
42380: LD_INT 3
42382: ARRAY
42383: GREATEREQUAL
42384: AND
42385: NOT
42386: IFFALSE 42390
// exit ;
42388: GO 42977
// if GetBType ( depot ) = b_depot then
42390: LD_VAR 0 1
42394: PPUSH
42395: CALL_OW 266
42399: PUSH
42400: LD_INT 0
42402: EQUAL
42403: IFFALSE 42415
// dist := 28 else
42405: LD_ADDR_VAR 0 14
42409: PUSH
42410: LD_INT 28
42412: ST_TO_ADDR
42413: GO 42423
// dist := 36 ;
42415: LD_ADDR_VAR 0 14
42419: PUSH
42420: LD_INT 36
42422: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42423: LD_VAR 0 1
42427: PPUSH
42428: LD_VAR 0 3
42432: PPUSH
42433: LD_VAR 0 4
42437: PPUSH
42438: CALL_OW 297
42442: PUSH
42443: LD_VAR 0 14
42447: GREATER
42448: IFFALSE 42452
// exit ;
42450: GO 42977
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42452: LD_ADDR_VAR 0 12
42456: PUSH
42457: LD_VAR 0 2
42461: PPUSH
42462: LD_VAR 0 3
42466: PPUSH
42467: LD_VAR 0 4
42471: PPUSH
42472: LD_VAR 0 5
42476: PPUSH
42477: LD_VAR 0 1
42481: PPUSH
42482: CALL_OW 248
42486: PPUSH
42487: LD_INT 0
42489: PPUSH
42490: CALL 42982 0 6
42494: ST_TO_ADDR
// if not hexes then
42495: LD_VAR 0 12
42499: NOT
42500: IFFALSE 42504
// exit ;
42502: GO 42977
// hex := GetHexInfo ( x , y ) ;
42504: LD_ADDR_VAR 0 15
42508: PUSH
42509: LD_VAR 0 3
42513: PPUSH
42514: LD_VAR 0 4
42518: PPUSH
42519: CALL_OW 546
42523: ST_TO_ADDR
// if hex [ 1 ] then
42524: LD_VAR 0 15
42528: PUSH
42529: LD_INT 1
42531: ARRAY
42532: IFFALSE 42536
// exit ;
42534: GO 42977
// height := hex [ 2 ] ;
42536: LD_ADDR_VAR 0 13
42540: PUSH
42541: LD_VAR 0 15
42545: PUSH
42546: LD_INT 2
42548: ARRAY
42549: ST_TO_ADDR
// for i = 1 to hexes do
42550: LD_ADDR_VAR 0 7
42554: PUSH
42555: DOUBLE
42556: LD_INT 1
42558: DEC
42559: ST_TO_ADDR
42560: LD_VAR 0 12
42564: PUSH
42565: FOR_TO
42566: IFFALSE 42896
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42568: LD_VAR 0 12
42572: PUSH
42573: LD_VAR 0 7
42577: ARRAY
42578: PUSH
42579: LD_INT 1
42581: ARRAY
42582: PPUSH
42583: LD_VAR 0 12
42587: PUSH
42588: LD_VAR 0 7
42592: ARRAY
42593: PUSH
42594: LD_INT 2
42596: ARRAY
42597: PPUSH
42598: CALL_OW 488
42602: NOT
42603: PUSH
42604: LD_VAR 0 12
42608: PUSH
42609: LD_VAR 0 7
42613: ARRAY
42614: PUSH
42615: LD_INT 1
42617: ARRAY
42618: PPUSH
42619: LD_VAR 0 12
42623: PUSH
42624: LD_VAR 0 7
42628: ARRAY
42629: PUSH
42630: LD_INT 2
42632: ARRAY
42633: PPUSH
42634: CALL_OW 428
42638: PUSH
42639: LD_INT 0
42641: GREATER
42642: OR
42643: PUSH
42644: LD_VAR 0 12
42648: PUSH
42649: LD_VAR 0 7
42653: ARRAY
42654: PUSH
42655: LD_INT 1
42657: ARRAY
42658: PPUSH
42659: LD_VAR 0 12
42663: PUSH
42664: LD_VAR 0 7
42668: ARRAY
42669: PUSH
42670: LD_INT 2
42672: ARRAY
42673: PPUSH
42674: CALL_OW 351
42678: OR
42679: IFFALSE 42685
// exit ;
42681: POP
42682: POP
42683: GO 42977
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42685: LD_ADDR_VAR 0 8
42689: PUSH
42690: LD_VAR 0 12
42694: PUSH
42695: LD_VAR 0 7
42699: ARRAY
42700: PUSH
42701: LD_INT 1
42703: ARRAY
42704: PPUSH
42705: LD_VAR 0 12
42709: PUSH
42710: LD_VAR 0 7
42714: ARRAY
42715: PUSH
42716: LD_INT 2
42718: ARRAY
42719: PPUSH
42720: CALL_OW 546
42724: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42725: LD_VAR 0 8
42729: PUSH
42730: LD_INT 1
42732: ARRAY
42733: PUSH
42734: LD_VAR 0 8
42738: PUSH
42739: LD_INT 2
42741: ARRAY
42742: PUSH
42743: LD_VAR 0 13
42747: PUSH
42748: LD_INT 2
42750: PLUS
42751: GREATER
42752: OR
42753: PUSH
42754: LD_VAR 0 8
42758: PUSH
42759: LD_INT 2
42761: ARRAY
42762: PUSH
42763: LD_VAR 0 13
42767: PUSH
42768: LD_INT 2
42770: MINUS
42771: LESS
42772: OR
42773: PUSH
42774: LD_VAR 0 8
42778: PUSH
42779: LD_INT 3
42781: ARRAY
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 8
42788: PUSH
42789: LD_INT 9
42791: PUSH
42792: LD_INT 10
42794: PUSH
42795: LD_INT 11
42797: PUSH
42798: LD_INT 12
42800: PUSH
42801: LD_INT 13
42803: PUSH
42804: LD_INT 16
42806: PUSH
42807: LD_INT 17
42809: PUSH
42810: LD_INT 18
42812: PUSH
42813: LD_INT 19
42815: PUSH
42816: LD_INT 20
42818: PUSH
42819: LD_INT 21
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: IN
42837: NOT
42838: OR
42839: PUSH
42840: LD_VAR 0 8
42844: PUSH
42845: LD_INT 5
42847: ARRAY
42848: NOT
42849: OR
42850: PUSH
42851: LD_VAR 0 8
42855: PUSH
42856: LD_INT 6
42858: ARRAY
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: LD_INT 2
42865: PUSH
42866: LD_INT 7
42868: PUSH
42869: LD_INT 9
42871: PUSH
42872: LD_INT 10
42874: PUSH
42875: LD_INT 11
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: IN
42886: NOT
42887: OR
42888: IFFALSE 42894
// exit ;
42890: POP
42891: POP
42892: GO 42977
// end ;
42894: GO 42565
42896: POP
42897: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42898: LD_VAR 0 9
42902: PPUSH
42903: LD_VAR 0 3
42907: PPUSH
42908: LD_VAR 0 4
42912: PPUSH
42913: LD_INT 20
42915: PPUSH
42916: CALL 34900 0 4
42920: PUSH
42921: LD_INT 4
42923: ARRAY
42924: IFFALSE 42928
// exit ;
42926: GO 42977
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42928: LD_VAR 0 2
42932: PUSH
42933: LD_INT 29
42935: PUSH
42936: LD_INT 30
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: IN
42943: PUSH
42944: LD_VAR 0 3
42948: PPUSH
42949: LD_VAR 0 4
42953: PPUSH
42954: LD_VAR 0 9
42958: PPUSH
42959: CALL_OW 440
42963: NOT
42964: AND
42965: IFFALSE 42969
// exit ;
42967: GO 42977
// result := true ;
42969: LD_ADDR_VAR 0 6
42973: PUSH
42974: LD_INT 1
42976: ST_TO_ADDR
// end ;
42977: LD_VAR 0 6
42981: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42982: LD_INT 0
42984: PPUSH
42985: PPUSH
42986: PPUSH
42987: PPUSH
42988: PPUSH
42989: PPUSH
42990: PPUSH
42991: PPUSH
42992: PPUSH
42993: PPUSH
42994: PPUSH
42995: PPUSH
42996: PPUSH
42997: PPUSH
42998: PPUSH
42999: PPUSH
43000: PPUSH
43001: PPUSH
43002: PPUSH
43003: PPUSH
43004: PPUSH
43005: PPUSH
43006: PPUSH
43007: PPUSH
43008: PPUSH
43009: PPUSH
43010: PPUSH
43011: PPUSH
43012: PPUSH
43013: PPUSH
43014: PPUSH
43015: PPUSH
43016: PPUSH
43017: PPUSH
43018: PPUSH
43019: PPUSH
43020: PPUSH
43021: PPUSH
43022: PPUSH
43023: PPUSH
43024: PPUSH
43025: PPUSH
43026: PPUSH
43027: PPUSH
43028: PPUSH
43029: PPUSH
43030: PPUSH
43031: PPUSH
43032: PPUSH
43033: PPUSH
43034: PPUSH
43035: PPUSH
43036: PPUSH
43037: PPUSH
43038: PPUSH
43039: PPUSH
43040: PPUSH
43041: PPUSH
// result = [ ] ;
43042: LD_ADDR_VAR 0 7
43046: PUSH
43047: EMPTY
43048: ST_TO_ADDR
// temp_list = [ ] ;
43049: LD_ADDR_VAR 0 9
43053: PUSH
43054: EMPTY
43055: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43056: LD_VAR 0 4
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: LD_INT 3
43072: PUSH
43073: LD_INT 4
43075: PUSH
43076: LD_INT 5
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: IN
43087: NOT
43088: PUSH
43089: LD_VAR 0 1
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: LD_INT 1
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: IN
43104: PUSH
43105: LD_VAR 0 5
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: LD_INT 2
43115: PUSH
43116: LD_INT 3
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: LIST
43123: IN
43124: NOT
43125: AND
43126: OR
43127: IFFALSE 43131
// exit ;
43129: GO 61522
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43131: LD_VAR 0 1
43135: PUSH
43136: LD_INT 6
43138: PUSH
43139: LD_INT 7
43141: PUSH
43142: LD_INT 8
43144: PUSH
43145: LD_INT 13
43147: PUSH
43148: LD_INT 12
43150: PUSH
43151: LD_INT 15
43153: PUSH
43154: LD_INT 11
43156: PUSH
43157: LD_INT 14
43159: PUSH
43160: LD_INT 10
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: IN
43174: IFFALSE 43184
// btype = b_lab ;
43176: LD_ADDR_VAR 0 1
43180: PUSH
43181: LD_INT 6
43183: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43184: LD_VAR 0 6
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: IN
43203: NOT
43204: PUSH
43205: LD_VAR 0 1
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: LD_INT 2
43218: PUSH
43219: LD_INT 3
43221: PUSH
43222: LD_INT 6
43224: PUSH
43225: LD_INT 36
43227: PUSH
43228: LD_INT 4
43230: PUSH
43231: LD_INT 5
43233: PUSH
43234: LD_INT 31
43236: PUSH
43237: LD_INT 32
43239: PUSH
43240: LD_INT 33
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: IN
43256: NOT
43257: PUSH
43258: LD_VAR 0 6
43262: PUSH
43263: LD_INT 1
43265: EQUAL
43266: AND
43267: OR
43268: PUSH
43269: LD_VAR 0 1
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: LD_INT 3
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: IN
43284: NOT
43285: PUSH
43286: LD_VAR 0 6
43290: PUSH
43291: LD_INT 2
43293: EQUAL
43294: AND
43295: OR
43296: IFFALSE 43306
// mode = 0 ;
43298: LD_ADDR_VAR 0 6
43302: PUSH
43303: LD_INT 0
43305: ST_TO_ADDR
// case mode of 0 :
43306: LD_VAR 0 6
43310: PUSH
43311: LD_INT 0
43313: DOUBLE
43314: EQUAL
43315: IFTRUE 43319
43317: GO 54772
43319: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43320: LD_ADDR_VAR 0 11
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: LD_INT 2
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: LD_INT 2
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: LD_INT 2
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: LD_INT 3
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 3
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: LD_INT 2
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43513: LD_ADDR_VAR 0 12
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: LD_INT 0
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: LD_INT 1
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: LD_INT 1
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: NEG
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: NEG
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 2
43636: NEG
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 2
43647: NEG
43648: PUSH
43649: LD_INT 1
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 2
43659: NEG
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 3
43670: NEG
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 3
43681: NEG
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43709: LD_ADDR_VAR 0 13
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 1
43790: NEG
43791: PUSH
43792: LD_INT 2
43794: NEG
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 2
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: NEG
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: LD_INT 2
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: NEG
43857: PUSH
43858: LD_INT 3
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 3
43868: NEG
43869: PUSH
43870: LD_INT 2
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 3
43880: NEG
43881: PUSH
43882: LD_INT 3
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43908: LD_ADDR_VAR 0 14
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: LD_INT 2
44004: NEG
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: LD_INT 3
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: LD_INT 3
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: LD_INT 2
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44104: LD_ADDR_VAR 0 15
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 2
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 2
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 1
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 2
44227: NEG
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 2
44238: NEG
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 3
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 3
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44297: LD_ADDR_VAR 0 16
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: LD_INT 2
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 2
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: LD_INT 2
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: LD_INT 2
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 2
44432: NEG
44433: PUSH
44434: LD_INT 2
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 3
44444: PUSH
44445: LD_INT 2
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 3
44454: PUSH
44455: LD_INT 3
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: LD_INT 3
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44490: LD_ADDR_VAR 0 17
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 2
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 2
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: LD_INT 2
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 2
44666: NEG
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 2
44689: NEG
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44720: LD_ADDR_VAR 0 18
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 2
44919: NEG
44920: PUSH
44921: LD_INT 2
44923: NEG
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44950: LD_ADDR_VAR 0 19
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 2
45126: NEG
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 2
45137: NEG
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45180: LD_ADDR_VAR 0 20
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 2
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 2
45315: PUSH
45316: LD_INT 2
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: NEG
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 2
45367: NEG
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: LD_INT 2
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45410: LD_ADDR_VAR 0 21
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 2
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 2
45586: NEG
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: NEG
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45640: LD_ADDR_VAR 0 22
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 2
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 2
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 2
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: NEG
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45870: LD_ADDR_VAR 0 23
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: LD_INT 3
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: LD_INT 3
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: LD_INT 2
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46150: LD_ADDR_VAR 0 24
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 2
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 2
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: LD_INT 2
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 2
46349: NEG
46350: PUSH
46351: LD_INT 2
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 3
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 3
46393: PUSH
46394: LD_INT 2
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46426: LD_ADDR_VAR 0 25
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: LD_INT 2
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 2
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: LD_INT 2
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: NEG
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: LD_INT 2
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 3
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 3
46647: PUSH
46648: LD_INT 2
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: PUSH
46658: LD_INT 3
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 3
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46700: LD_ADDR_VAR 0 26
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 2
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 2
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 2
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 2
46876: NEG
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 2
46887: NEG
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: LD_INT 2
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: PUSH
46912: LD_INT 3
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: LD_INT 3
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: LD_INT 2
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46976: LD_ADDR_VAR 0 27
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 2
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: NEG
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 2
47163: NEG
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: LD_INT 2
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 2
47198: NEG
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 3
47209: NEG
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 3
47221: NEG
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47256: LD_ADDR_VAR 0 28
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 2
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 2
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 2
47432: NEG
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: NEG
47468: PUSH
47469: LD_INT 3
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: LD_INT 3
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 3
47503: NEG
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47538: LD_ADDR_VAR 0 29
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: LD_INT 2
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: LD_INT 2
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: NEG
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: LD_INT 3
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 2
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 3
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: LD_INT 3
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 3
47782: NEG
47783: PUSH
47784: LD_INT 2
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47817: LD_ADDR_VAR 0 30
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: LD_INT 2
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: LD_INT 2
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 2
47952: PUSH
47953: LD_INT 2
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: LD_INT 2
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 2
47994: NEG
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 3
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 2
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 3
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: PUSH
48040: LD_INT 3
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 3
48060: NEG
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48095: LD_ADDR_VAR 0 31
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: NEG
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: LD_INT 2
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: LD_INT 3
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 2
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 3
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: LD_INT 3
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 3
48338: NEG
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48373: LD_ADDR_VAR 0 32
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: LD_INT 2
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 2
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 2
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: LD_INT 2
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: LD_INT 2
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 2
48550: NEG
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: LD_INT 3
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: LD_INT 2
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 3
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: PUSH
48596: LD_INT 3
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 3
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48651: LD_ADDR_VAR 0 33
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: LD_INT 2
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: LD_INT 3
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 2
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 3
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: LD_INT 3
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: LD_INT 2
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 3
48895: NEG
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48930: LD_ADDR_VAR 0 34
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: LD_INT 2
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 2
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 2
49086: NEG
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: LD_INT 3
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 3
49144: PUSH
49145: LD_INT 2
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: LD_INT 3
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: NEG
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 3
49175: NEG
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49210: LD_ADDR_VAR 0 35
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 2
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49322: LD_ADDR_VAR 0 36
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49434: LD_ADDR_VAR 0 37
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49546: LD_ADDR_VAR 0 38
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 2
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 2
49637: NEG
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49658: LD_ADDR_VAR 0 39
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49770: LD_ADDR_VAR 0 40
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49882: LD_ADDR_VAR 0 41
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: LD_INT 2
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: LD_INT 2
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: LD_INT 3
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 3
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 3
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 3
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 3
50125: PUSH
50126: LD_INT 3
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: LD_INT 3
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 2
50145: NEG
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 3
50156: NEG
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 3
50167: NEG
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 3
50179: NEG
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 3
50191: NEG
50192: PUSH
50193: LD_INT 3
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50232: LD_ADDR_VAR 0 42
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: LD_INT 2
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 2
50398: NEG
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: LD_INT 3
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: LD_INT 3
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: LD_INT 3
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 3
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 3
50478: PUSH
50479: LD_INT 3
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: LD_INT 3
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: LD_INT 3
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: LD_INT 3
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 3
50529: NEG
50530: PUSH
50531: LD_INT 2
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 3
50541: NEG
50542: PUSH
50543: LD_INT 3
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50582: LD_ADDR_VAR 0 43
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: LD_INT 2
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 2
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: LD_INT 2
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: LD_INT 2
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 2
50748: NEG
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 2
50759: NEG
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 3
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 3
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 2
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 2
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 3
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 3
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: LD_INT 3
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 3
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 2
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 3
50878: NEG
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 3
50889: NEG
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50930: LD_ADDR_VAR 0 44
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: LD_INT 2
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 2
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: LD_INT 2
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: LD_INT 2
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 2
51085: NEG
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 2
51096: NEG
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 2
51108: NEG
51109: PUSH
51110: LD_INT 2
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: LD_INT 3
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 3
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 3
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 3
51163: PUSH
51164: LD_INT 2
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 3
51173: PUSH
51174: LD_INT 3
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: LD_INT 3
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: NEG
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 3
51204: NEG
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 3
51215: NEG
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 3
51227: NEG
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 3
51239: NEG
51240: PUSH
51241: LD_INT 3
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51280: LD_ADDR_VAR 0 45
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: LD_INT 2
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: LD_INT 2
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: LD_INT 2
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: LD_INT 2
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 2
51458: NEG
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: NEG
51471: PUSH
51472: LD_INT 3
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 3
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 3
51516: PUSH
51517: LD_INT 2
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 3
51526: PUSH
51527: LD_INT 3
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: LD_INT 3
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: LD_INT 3
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: LD_INT 3
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: LD_INT 2
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 3
51577: NEG
51578: PUSH
51579: LD_INT 2
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 3
51589: NEG
51590: PUSH
51591: LD_INT 3
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51630: LD_ADDR_VAR 0 46
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 2
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 2
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: LD_INT 3
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 3
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 3
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 3
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 3
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 3
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: LD_INT 2
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: NEG
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 3
51926: NEG
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 3
51937: NEG
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51978: LD_ADDR_VAR 0 47
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: LD_INT 2
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52129: LD_ADDR_VAR 0 48
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: LD_INT 0
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: LD_INT 2
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52276: LD_ADDR_VAR 0 49
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 2
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52420: LD_ADDR_VAR 0 50
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 2
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 2
52511: PUSH
52512: LD_INT 2
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 2
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52564: LD_ADDR_VAR 0 51
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 2
52676: NEG
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52711: LD_ADDR_VAR 0 52
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: NEG
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: NEG
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52862: LD_ADDR_VAR 0 53
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: LD_INT 2
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 2
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 2
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 2
52997: PUSH
52998: LD_INT 2
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53092: LD_ADDR_VAR 0 54
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: LD_INT 2
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 2
53268: NEG
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: NEG
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 2
53291: NEG
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53322: LD_ADDR_VAR 0 55
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: LD_INT 1
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: LD_INT 2
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: LD_INT 2
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 2
53521: NEG
53522: PUSH
53523: LD_INT 2
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53552: LD_ADDR_VAR 0 56
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: LD_INT 2
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 2
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 2
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53782: LD_ADDR_VAR 0 57
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: LD_INT 2
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 2
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54012: LD_ADDR_VAR 0 58
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 2
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 2
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: LD_INT 2
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54242: LD_ADDR_VAR 0 59
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54330: LD_ADDR_VAR 0 60
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54418: LD_ADDR_VAR 0 61
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54506: LD_ADDR_VAR 0 62
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54594: LD_ADDR_VAR 0 63
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54682: LD_ADDR_VAR 0 64
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: ST_TO_ADDR
// end ; 1 :
54770: GO 60667
54772: LD_INT 1
54774: DOUBLE
54775: EQUAL
54776: IFTRUE 54780
54778: GO 57403
54780: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54781: LD_ADDR_VAR 0 11
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: LD_INT 3
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 3
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: LD_INT 2
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: LIST
54824: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54825: LD_ADDR_VAR 0 12
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 3
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 3
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: LIST
54865: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54866: LD_ADDR_VAR 0 13
54870: PUSH
54871: LD_INT 3
54873: PUSH
54874: LD_INT 2
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 3
54883: PUSH
54884: LD_INT 3
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 2
54893: PUSH
54894: LD_INT 3
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54906: LD_ADDR_VAR 0 14
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 3
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 3
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: LIST
54946: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54947: LD_ADDR_VAR 0 15
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 3
54965: NEG
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 3
54976: NEG
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: LIST
54990: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54991: LD_ADDR_VAR 0 16
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: LD_INT 3
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 3
55010: NEG
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 3
55022: NEG
55023: PUSH
55024: LD_INT 3
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: LIST
55036: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55037: LD_ADDR_VAR 0 17
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: LD_INT 3
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 3
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: LIST
55080: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55081: LD_ADDR_VAR 0 18
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 3
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 3
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: LIST
55121: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55122: LD_ADDR_VAR 0 19
55126: PUSH
55127: LD_INT 3
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 3
55139: PUSH
55140: LD_INT 3
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: LD_INT 3
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: LIST
55161: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55162: LD_ADDR_VAR 0 20
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: LD_INT 3
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 3
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: LD_INT 2
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: LIST
55202: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55203: LD_ADDR_VAR 0 21
55207: PUSH
55208: LD_INT 2
55210: NEG
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 3
55221: NEG
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 3
55232: NEG
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: LIST
55246: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55247: LD_ADDR_VAR 0 22
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: LD_INT 3
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 3
55266: NEG
55267: PUSH
55268: LD_INT 2
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 3
55278: NEG
55279: PUSH
55280: LD_INT 3
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: LIST
55292: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55293: LD_ADDR_VAR 0 23
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 3
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: LD_INT 4
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: LD_INT 3
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: LIST
55336: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55337: LD_ADDR_VAR 0 24
55341: PUSH
55342: LD_INT 3
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 3
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 4
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: LIST
55377: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55378: LD_ADDR_VAR 0 25
55382: PUSH
55383: LD_INT 3
55385: PUSH
55386: LD_INT 3
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 4
55395: PUSH
55396: LD_INT 3
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 3
55405: PUSH
55406: LD_INT 4
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: LIST
55417: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55418: LD_ADDR_VAR 0 26
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 3
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: LD_INT 4
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: LD_INT 3
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: LIST
55458: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55459: LD_ADDR_VAR 0 27
55463: PUSH
55464: LD_INT 3
55466: NEG
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 3
55477: NEG
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 4
55488: NEG
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: LIST
55502: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55503: LD_ADDR_VAR 0 28
55507: PUSH
55508: LD_INT 3
55510: NEG
55511: PUSH
55512: LD_INT 3
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 3
55522: NEG
55523: PUSH
55524: LD_INT 4
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 4
55534: NEG
55535: PUSH
55536: LD_INT 3
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: LIST
55548: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55549: LD_ADDR_VAR 0 29
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: LD_INT 3
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: LD_INT 3
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: LD_INT 4
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 4
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 1
55613: PUSH
55614: LD_INT 3
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: LD_INT 5
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: LD_INT 5
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: LD_INT 4
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: LD_INT 6
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: LD_INT 6
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 5
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55704: LD_ADDR_VAR 0 30
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 3
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 3
55732: PUSH
55733: LD_INT 1
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 3
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 4
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 4
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 4
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 5
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 5
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 5
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 6
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 6
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55847: LD_ADDR_VAR 0 31
55851: PUSH
55852: LD_INT 3
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 3
55864: PUSH
55865: LD_INT 3
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: LD_INT 3
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 4
55884: PUSH
55885: LD_INT 3
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 4
55894: PUSH
55895: LD_INT 4
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 3
55904: PUSH
55905: LD_INT 4
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 5
55914: PUSH
55915: LD_INT 4
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 5
55924: PUSH
55925: LD_INT 5
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 4
55934: PUSH
55935: LD_INT 5
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 6
55944: PUSH
55945: LD_INT 5
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 6
55954: PUSH
55955: LD_INT 6
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 5
55964: PUSH
55965: LD_INT 6
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55986: LD_ADDR_VAR 0 32
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: LD_INT 3
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 3
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: LD_INT 2
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: LD_INT 4
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: LD_INT 4
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: LD_INT 3
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: LD_INT 5
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 5
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: LD_INT 4
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: LD_INT 6
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: LD_INT 6
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: LD_INT 5
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56129: LD_ADDR_VAR 0 33
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 3
56147: NEG
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 3
56158: NEG
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 3
56170: NEG
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 4
56181: NEG
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 4
56192: NEG
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 4
56204: NEG
56205: PUSH
56206: LD_INT 1
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 5
56215: NEG
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 5
56226: NEG
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 5
56238: NEG
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 6
56249: NEG
56250: PUSH
56251: LD_INT 0
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 6
56260: NEG
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56284: LD_ADDR_VAR 0 34
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: LD_INT 3
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 3
56303: NEG
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 3
56315: NEG
56316: PUSH
56317: LD_INT 3
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 3
56327: NEG
56328: PUSH
56329: LD_INT 4
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 4
56339: NEG
56340: PUSH
56341: LD_INT 3
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 4
56351: NEG
56352: PUSH
56353: LD_INT 4
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 4
56363: NEG
56364: PUSH
56365: LD_INT 5
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 5
56375: NEG
56376: PUSH
56377: LD_INT 4
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 5
56387: NEG
56388: PUSH
56389: LD_INT 5
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 5
56399: NEG
56400: PUSH
56401: LD_INT 6
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 6
56411: NEG
56412: PUSH
56413: LD_INT 5
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 6
56423: NEG
56424: PUSH
56425: LD_INT 6
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56447: LD_ADDR_VAR 0 41
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: LD_INT 3
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: LD_INT 2
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: LIST
56490: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56491: LD_ADDR_VAR 0 42
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 3
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: LIST
56531: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56532: LD_ADDR_VAR 0 43
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 3
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56572: LD_ADDR_VAR 0 44
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: LD_INT 3
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: LD_INT 2
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: LIST
56612: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56613: LD_ADDR_VAR 0 45
56617: PUSH
56618: LD_INT 2
56620: NEG
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 2
56631: NEG
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 3
56642: NEG
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: LIST
56656: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56657: LD_ADDR_VAR 0 46
56661: PUSH
56662: LD_INT 2
56664: NEG
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: LD_INT 3
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 3
56688: NEG
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: LIST
56702: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56703: LD_ADDR_VAR 0 47
56707: PUSH
56708: LD_INT 2
56710: NEG
56711: PUSH
56712: LD_INT 3
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 3
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56736: LD_ADDR_VAR 0 48
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: LD_INT 2
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56767: LD_ADDR_VAR 0 49
56771: PUSH
56772: LD_INT 3
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: LD_INT 2
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56796: LD_ADDR_VAR 0 50
56800: PUSH
56801: LD_INT 2
56803: PUSH
56804: LD_INT 3
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: LD_INT 3
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56825: LD_ADDR_VAR 0 51
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: LD_INT 2
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 2
56843: NEG
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56856: LD_ADDR_VAR 0 52
56860: PUSH
56861: LD_INT 3
56863: NEG
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 3
56875: NEG
56876: PUSH
56877: LD_INT 2
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56889: LD_ADDR_VAR 0 53
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 3
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: LD_INT 3
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: LD_INT 2
56922: NEG
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: LIST
56932: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56933: LD_ADDR_VAR 0 54
56937: PUSH
56938: LD_INT 2
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 3
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 3
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: LIST
56973: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56974: LD_ADDR_VAR 0 55
56978: PUSH
56979: LD_INT 3
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 3
56991: PUSH
56992: LD_INT 3
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 2
57001: PUSH
57002: LD_INT 3
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: LIST
57013: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57014: LD_ADDR_VAR 0 56
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: LD_INT 3
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: LD_INT 3
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: LIST
57054: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57055: LD_ADDR_VAR 0 57
57059: PUSH
57060: LD_INT 2
57062: NEG
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 3
57073: NEG
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 3
57084: NEG
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: LIST
57098: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57099: LD_ADDR_VAR 0 58
57103: PUSH
57104: LD_INT 2
57106: NEG
57107: PUSH
57108: LD_INT 3
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 3
57118: NEG
57119: PUSH
57120: LD_INT 2
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 3
57130: NEG
57131: PUSH
57132: LD_INT 3
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: LIST
57144: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57145: LD_ADDR_VAR 0 59
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: LD_INT 2
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: LIST
57188: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57189: LD_ADDR_VAR 0 60
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: LD_INT 1
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 2
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 2
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: LIST
57229: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57230: LD_ADDR_VAR 0 61
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: LD_INT 2
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: LD_INT 2
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: LIST
57269: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57270: LD_ADDR_VAR 0 62
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: LD_INT 2
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: LD_INT 2
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: LIST
57310: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57311: LD_ADDR_VAR 0 63
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 2
57329: NEG
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: LIST
57354: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57355: LD_ADDR_VAR 0 64
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: LD_INT 2
57366: NEG
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 2
57386: NEG
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: LIST
57400: ST_TO_ADDR
// end ; 2 :
57401: GO 60667
57403: LD_INT 2
57405: DOUBLE
57406: EQUAL
57407: IFTRUE 57411
57409: GO 60666
57411: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57412: LD_ADDR_VAR 0 29
57416: PUSH
57417: LD_INT 4
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 4
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 5
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 5
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 4
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 3
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 3
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 3
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 5
57502: PUSH
57503: LD_INT 2
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 3
57512: PUSH
57513: LD_INT 3
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 3
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 4
57532: PUSH
57533: LD_INT 3
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 4
57542: PUSH
57543: LD_INT 4
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 3
57552: PUSH
57553: LD_INT 4
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: LD_INT 3
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 4
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 2
57592: PUSH
57593: LD_INT 4
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: LD_INT 4
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: LD_INT 3
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: LD_INT 4
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: LD_INT 5
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: LD_INT 5
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: LD_INT 4
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: LD_INT 3
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: LD_INT 5
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 2
57684: NEG
57685: PUSH
57686: LD_INT 3
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 3
57695: NEG
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 3
57706: NEG
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: NEG
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 3
57740: NEG
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 4
57751: NEG
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 4
57762: NEG
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 4
57774: NEG
57775: PUSH
57776: LD_INT 2
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 2
57786: NEG
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 4
57797: NEG
57798: PUSH
57799: LD_INT 4
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 4
57809: NEG
57810: PUSH
57811: LD_INT 5
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 3
57821: NEG
57822: PUSH
57823: LD_INT 4
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 3
57833: NEG
57834: PUSH
57835: LD_INT 3
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 4
57845: NEG
57846: PUSH
57847: LD_INT 3
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 5
57857: NEG
57858: PUSH
57859: LD_INT 4
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 5
57869: NEG
57870: PUSH
57871: LD_INT 5
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 3
57881: NEG
57882: PUSH
57883: LD_INT 5
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 5
57893: NEG
57894: PUSH
57895: LD_INT 3
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57950: LD_ADDR_VAR 0 30
57954: PUSH
57955: LD_INT 4
57957: PUSH
57958: LD_INT 4
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 4
57967: PUSH
57968: LD_INT 3
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 5
57977: PUSH
57978: LD_INT 4
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 5
57987: PUSH
57988: LD_INT 5
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 4
57997: PUSH
57998: LD_INT 5
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 3
58007: PUSH
58008: LD_INT 4
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 3
58017: PUSH
58018: LD_INT 3
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 5
58027: PUSH
58028: LD_INT 3
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 3
58037: PUSH
58038: LD_INT 5
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: LD_INT 3
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 2
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: LD_INT 3
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: LD_INT 4
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: LD_INT 4
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: LD_INT 3
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 1
58108: NEG
58109: PUSH
58110: LD_INT 2
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: LD_INT 4
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 4
58140: NEG
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 4
58151: NEG
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 3
58163: NEG
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 3
58174: NEG
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 4
58185: NEG
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 5
58196: NEG
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 5
58207: NEG
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 5
58219: NEG
58220: PUSH
58221: LD_INT 2
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 3
58231: NEG
58232: PUSH
58233: LD_INT 2
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 3
58242: NEG
58243: PUSH
58244: LD_INT 3
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 3
58254: NEG
58255: PUSH
58256: LD_INT 4
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: LD_INT 3
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 2
58278: NEG
58279: PUSH
58280: LD_INT 2
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 3
58290: NEG
58291: PUSH
58292: LD_INT 2
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 4
58302: NEG
58303: PUSH
58304: LD_INT 3
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 4
58314: NEG
58315: PUSH
58316: LD_INT 4
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: LD_INT 4
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 4
58338: NEG
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: LD_INT 4
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: LD_INT 5
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: LD_INT 4
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: LD_INT 3
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: LD_INT 3
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: NEG
58406: PUSH
58407: LD_INT 4
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: LD_INT 5
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: LD_INT 3
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 2
58440: NEG
58441: PUSH
58442: LD_INT 5
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58497: LD_ADDR_VAR 0 31
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: LD_INT 4
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: LD_INT 3
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: LD_INT 4
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: LD_INT 5
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: LD_INT 5
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: LD_INT 4
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: LD_INT 3
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: LD_INT 5
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 2
58586: NEG
58587: PUSH
58588: LD_INT 3
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 3
58597: NEG
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 3
58608: NEG
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 2
58620: NEG
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 2
58631: NEG
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 3
58642: NEG
58643: PUSH
58644: LD_INT 1
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 4
58653: NEG
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 4
58664: NEG
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 4
58676: NEG
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 2
58688: NEG
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 4
58699: NEG
58700: PUSH
58701: LD_INT 4
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 4
58711: NEG
58712: PUSH
58713: LD_INT 5
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 3
58723: NEG
58724: PUSH
58725: LD_INT 4
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 3
58735: NEG
58736: PUSH
58737: LD_INT 3
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 4
58747: NEG
58748: PUSH
58749: LD_INT 3
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 5
58759: NEG
58760: PUSH
58761: LD_INT 4
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 5
58771: NEG
58772: PUSH
58773: LD_INT 5
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 3
58783: NEG
58784: PUSH
58785: LD_INT 5
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 5
58795: NEG
58796: PUSH
58797: LD_INT 3
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: LD_INT 3
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: LD_INT 4
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 1
58829: PUSH
58830: LD_INT 3
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: LD_INT 2
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: LD_INT 2
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: LD_INT 3
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: LD_INT 4
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 2
58886: PUSH
58887: LD_INT 2
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: LD_INT 4
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 4
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 4
58919: PUSH
58920: LD_INT 1
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 5
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 5
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 4
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 3
58970: PUSH
58971: LD_INT 1
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 3
58981: PUSH
58982: LD_INT 2
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 5
58992: PUSH
58993: LD_INT 2
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59047: LD_ADDR_VAR 0 32
59051: PUSH
59052: LD_INT 4
59054: NEG
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 4
59065: NEG
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 3
59077: NEG
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 3
59088: NEG
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 4
59099: NEG
59100: PUSH
59101: LD_INT 1
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 5
59110: NEG
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 5
59121: NEG
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 5
59133: NEG
59134: PUSH
59135: LD_INT 2
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 3
59145: NEG
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 3
59156: NEG
59157: PUSH
59158: LD_INT 3
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 3
59168: NEG
59169: PUSH
59170: LD_INT 4
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: NEG
59181: PUSH
59182: LD_INT 3
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 2
59192: NEG
59193: PUSH
59194: LD_INT 2
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 3
59204: NEG
59205: PUSH
59206: LD_INT 2
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 4
59216: NEG
59217: PUSH
59218: LD_INT 3
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 4
59228: NEG
59229: PUSH
59230: LD_INT 4
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: LD_INT 4
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 4
59252: NEG
59253: PUSH
59254: LD_INT 2
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: LD_INT 4
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: LD_INT 5
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: LD_INT 4
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: LD_INT 3
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: LD_INT 3
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: LD_INT 4
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: LD_INT 5
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 2
59343: PUSH
59344: LD_INT 3
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 2
59354: NEG
59355: PUSH
59356: LD_INT 5
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 3
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 4
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 4
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 3
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 2
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 2
59438: PUSH
59439: LD_INT 2
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 4
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 4
59459: PUSH
59460: LD_INT 4
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 4
59469: PUSH
59470: LD_INT 3
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 5
59479: PUSH
59480: LD_INT 4
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 5
59489: PUSH
59490: LD_INT 5
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 4
59499: PUSH
59500: LD_INT 5
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 3
59509: PUSH
59510: LD_INT 4
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 3
59519: PUSH
59520: LD_INT 3
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 5
59529: PUSH
59530: LD_INT 3
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 3
59539: PUSH
59540: LD_INT 5
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59594: LD_ADDR_VAR 0 33
59598: PUSH
59599: LD_INT 4
59601: NEG
59602: PUSH
59603: LD_INT 4
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 4
59613: NEG
59614: PUSH
59615: LD_INT 5
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 3
59625: NEG
59626: PUSH
59627: LD_INT 4
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 3
59637: NEG
59638: PUSH
59639: LD_INT 3
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 4
59649: NEG
59650: PUSH
59651: LD_INT 3
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 5
59661: NEG
59662: PUSH
59663: LD_INT 4
59665: NEG
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 5
59673: NEG
59674: PUSH
59675: LD_INT 5
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 3
59685: NEG
59686: PUSH
59687: LD_INT 5
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 5
59697: NEG
59698: PUSH
59699: LD_INT 3
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 3
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: LD_INT 4
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: PUSH
59732: LD_INT 3
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: LD_INT 2
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: LD_INT 2
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: LD_INT 3
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: LD_INT 4
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 2
59788: PUSH
59789: LD_INT 2
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 2
59799: NEG
59800: PUSH
59801: LD_INT 4
59803: NEG
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 4
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 4
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 5
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 5
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 4
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 3
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 3
59883: PUSH
59884: LD_INT 2
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 5
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 3
59904: PUSH
59905: LD_INT 3
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 3
59914: PUSH
59915: LD_INT 2
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 4
59924: PUSH
59925: LD_INT 3
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 4
59934: PUSH
59935: LD_INT 4
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 3
59944: PUSH
59945: LD_INT 4
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: LD_INT 3
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 2
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 4
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: LD_INT 4
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: LD_INT 4
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: LD_INT 3
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: LD_INT 4
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: LD_INT 5
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: LD_INT 5
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: LD_INT 4
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: LD_INT 3
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: LD_INT 5
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 2
60076: NEG
60077: PUSH
60078: LD_INT 3
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60132: LD_ADDR_VAR 0 34
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: LD_INT 4
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: LD_INT 5
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: LD_INT 4
60164: NEG
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: LD_INT 3
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: LD_INT 3
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: LD_INT 4
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: LD_INT 5
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 2
60218: PUSH
60219: LD_INT 3
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 2
60229: NEG
60230: PUSH
60231: LD_INT 5
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 3
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 3
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 4
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 4
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 3
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 2
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 2
60302: PUSH
60303: LD_INT 1
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 2
60313: PUSH
60314: LD_INT 2
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 4
60324: PUSH
60325: LD_INT 2
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 4
60334: PUSH
60335: LD_INT 4
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 4
60344: PUSH
60345: LD_INT 3
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 5
60354: PUSH
60355: LD_INT 4
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 5
60364: PUSH
60365: LD_INT 5
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 4
60374: PUSH
60375: LD_INT 5
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 3
60384: PUSH
60385: LD_INT 4
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 3
60394: PUSH
60395: LD_INT 3
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 5
60404: PUSH
60405: LD_INT 3
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 3
60414: PUSH
60415: LD_INT 5
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: LD_INT 3
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: LD_INT 2
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 1
60444: PUSH
60445: LD_INT 3
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: PUSH
60455: LD_INT 4
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: LD_INT 4
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 3
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 1
60485: NEG
60486: PUSH
60487: LD_INT 2
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 2
60496: PUSH
60497: LD_INT 4
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 2
60506: NEG
60507: PUSH
60508: LD_INT 2
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 4
60517: NEG
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 4
60528: NEG
60529: PUSH
60530: LD_INT 1
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 3
60540: NEG
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 3
60551: NEG
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 4
60562: NEG
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 5
60573: NEG
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 5
60584: NEG
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 5
60596: NEG
60597: PUSH
60598: LD_INT 2
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 3
60608: NEG
60609: PUSH
60610: LD_INT 2
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: ST_TO_ADDR
// end ; end ;
60664: GO 60667
60666: POP
// case btype of b_depot , b_warehouse :
60667: LD_VAR 0 1
60671: PUSH
60672: LD_INT 0
60674: DOUBLE
60675: EQUAL
60676: IFTRUE 60686
60678: LD_INT 1
60680: DOUBLE
60681: EQUAL
60682: IFTRUE 60686
60684: GO 60887
60686: POP
// case nation of nation_american :
60687: LD_VAR 0 5
60691: PUSH
60692: LD_INT 1
60694: DOUBLE
60695: EQUAL
60696: IFTRUE 60700
60698: GO 60756
60700: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60701: LD_ADDR_VAR 0 9
60705: PUSH
60706: LD_VAR 0 11
60710: PUSH
60711: LD_VAR 0 12
60715: PUSH
60716: LD_VAR 0 13
60720: PUSH
60721: LD_VAR 0 14
60725: PUSH
60726: LD_VAR 0 15
60730: PUSH
60731: LD_VAR 0 16
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: PUSH
60744: LD_VAR 0 4
60748: PUSH
60749: LD_INT 1
60751: PLUS
60752: ARRAY
60753: ST_TO_ADDR
60754: GO 60885
60756: LD_INT 2
60758: DOUBLE
60759: EQUAL
60760: IFTRUE 60764
60762: GO 60820
60764: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60765: LD_ADDR_VAR 0 9
60769: PUSH
60770: LD_VAR 0 17
60774: PUSH
60775: LD_VAR 0 18
60779: PUSH
60780: LD_VAR 0 19
60784: PUSH
60785: LD_VAR 0 20
60789: PUSH
60790: LD_VAR 0 21
60794: PUSH
60795: LD_VAR 0 22
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: PUSH
60808: LD_VAR 0 4
60812: PUSH
60813: LD_INT 1
60815: PLUS
60816: ARRAY
60817: ST_TO_ADDR
60818: GO 60885
60820: LD_INT 3
60822: DOUBLE
60823: EQUAL
60824: IFTRUE 60828
60826: GO 60884
60828: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60829: LD_ADDR_VAR 0 9
60833: PUSH
60834: LD_VAR 0 23
60838: PUSH
60839: LD_VAR 0 24
60843: PUSH
60844: LD_VAR 0 25
60848: PUSH
60849: LD_VAR 0 26
60853: PUSH
60854: LD_VAR 0 27
60858: PUSH
60859: LD_VAR 0 28
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: PUSH
60872: LD_VAR 0 4
60876: PUSH
60877: LD_INT 1
60879: PLUS
60880: ARRAY
60881: ST_TO_ADDR
60882: GO 60885
60884: POP
60885: GO 61440
60887: LD_INT 2
60889: DOUBLE
60890: EQUAL
60891: IFTRUE 60901
60893: LD_INT 3
60895: DOUBLE
60896: EQUAL
60897: IFTRUE 60901
60899: GO 60957
60901: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60902: LD_ADDR_VAR 0 9
60906: PUSH
60907: LD_VAR 0 29
60911: PUSH
60912: LD_VAR 0 30
60916: PUSH
60917: LD_VAR 0 31
60921: PUSH
60922: LD_VAR 0 32
60926: PUSH
60927: LD_VAR 0 33
60931: PUSH
60932: LD_VAR 0 34
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: PUSH
60945: LD_VAR 0 4
60949: PUSH
60950: LD_INT 1
60952: PLUS
60953: ARRAY
60954: ST_TO_ADDR
60955: GO 61440
60957: LD_INT 16
60959: DOUBLE
60960: EQUAL
60961: IFTRUE 61019
60963: LD_INT 17
60965: DOUBLE
60966: EQUAL
60967: IFTRUE 61019
60969: LD_INT 18
60971: DOUBLE
60972: EQUAL
60973: IFTRUE 61019
60975: LD_INT 19
60977: DOUBLE
60978: EQUAL
60979: IFTRUE 61019
60981: LD_INT 22
60983: DOUBLE
60984: EQUAL
60985: IFTRUE 61019
60987: LD_INT 20
60989: DOUBLE
60990: EQUAL
60991: IFTRUE 61019
60993: LD_INT 21
60995: DOUBLE
60996: EQUAL
60997: IFTRUE 61019
60999: LD_INT 23
61001: DOUBLE
61002: EQUAL
61003: IFTRUE 61019
61005: LD_INT 24
61007: DOUBLE
61008: EQUAL
61009: IFTRUE 61019
61011: LD_INT 25
61013: DOUBLE
61014: EQUAL
61015: IFTRUE 61019
61017: GO 61075
61019: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61020: LD_ADDR_VAR 0 9
61024: PUSH
61025: LD_VAR 0 35
61029: PUSH
61030: LD_VAR 0 36
61034: PUSH
61035: LD_VAR 0 37
61039: PUSH
61040: LD_VAR 0 38
61044: PUSH
61045: LD_VAR 0 39
61049: PUSH
61050: LD_VAR 0 40
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: PUSH
61063: LD_VAR 0 4
61067: PUSH
61068: LD_INT 1
61070: PLUS
61071: ARRAY
61072: ST_TO_ADDR
61073: GO 61440
61075: LD_INT 6
61077: DOUBLE
61078: EQUAL
61079: IFTRUE 61131
61081: LD_INT 7
61083: DOUBLE
61084: EQUAL
61085: IFTRUE 61131
61087: LD_INT 8
61089: DOUBLE
61090: EQUAL
61091: IFTRUE 61131
61093: LD_INT 13
61095: DOUBLE
61096: EQUAL
61097: IFTRUE 61131
61099: LD_INT 12
61101: DOUBLE
61102: EQUAL
61103: IFTRUE 61131
61105: LD_INT 15
61107: DOUBLE
61108: EQUAL
61109: IFTRUE 61131
61111: LD_INT 11
61113: DOUBLE
61114: EQUAL
61115: IFTRUE 61131
61117: LD_INT 14
61119: DOUBLE
61120: EQUAL
61121: IFTRUE 61131
61123: LD_INT 10
61125: DOUBLE
61126: EQUAL
61127: IFTRUE 61131
61129: GO 61187
61131: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61132: LD_ADDR_VAR 0 9
61136: PUSH
61137: LD_VAR 0 41
61141: PUSH
61142: LD_VAR 0 42
61146: PUSH
61147: LD_VAR 0 43
61151: PUSH
61152: LD_VAR 0 44
61156: PUSH
61157: LD_VAR 0 45
61161: PUSH
61162: LD_VAR 0 46
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: PUSH
61175: LD_VAR 0 4
61179: PUSH
61180: LD_INT 1
61182: PLUS
61183: ARRAY
61184: ST_TO_ADDR
61185: GO 61440
61187: LD_INT 36
61189: DOUBLE
61190: EQUAL
61191: IFTRUE 61195
61193: GO 61251
61195: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61196: LD_ADDR_VAR 0 9
61200: PUSH
61201: LD_VAR 0 47
61205: PUSH
61206: LD_VAR 0 48
61210: PUSH
61211: LD_VAR 0 49
61215: PUSH
61216: LD_VAR 0 50
61220: PUSH
61221: LD_VAR 0 51
61225: PUSH
61226: LD_VAR 0 52
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: PUSH
61239: LD_VAR 0 4
61243: PUSH
61244: LD_INT 1
61246: PLUS
61247: ARRAY
61248: ST_TO_ADDR
61249: GO 61440
61251: LD_INT 4
61253: DOUBLE
61254: EQUAL
61255: IFTRUE 61277
61257: LD_INT 5
61259: DOUBLE
61260: EQUAL
61261: IFTRUE 61277
61263: LD_INT 34
61265: DOUBLE
61266: EQUAL
61267: IFTRUE 61277
61269: LD_INT 37
61271: DOUBLE
61272: EQUAL
61273: IFTRUE 61277
61275: GO 61333
61277: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61278: LD_ADDR_VAR 0 9
61282: PUSH
61283: LD_VAR 0 53
61287: PUSH
61288: LD_VAR 0 54
61292: PUSH
61293: LD_VAR 0 55
61297: PUSH
61298: LD_VAR 0 56
61302: PUSH
61303: LD_VAR 0 57
61307: PUSH
61308: LD_VAR 0 58
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: PUSH
61321: LD_VAR 0 4
61325: PUSH
61326: LD_INT 1
61328: PLUS
61329: ARRAY
61330: ST_TO_ADDR
61331: GO 61440
61333: LD_INT 31
61335: DOUBLE
61336: EQUAL
61337: IFTRUE 61383
61339: LD_INT 32
61341: DOUBLE
61342: EQUAL
61343: IFTRUE 61383
61345: LD_INT 33
61347: DOUBLE
61348: EQUAL
61349: IFTRUE 61383
61351: LD_INT 27
61353: DOUBLE
61354: EQUAL
61355: IFTRUE 61383
61357: LD_INT 26
61359: DOUBLE
61360: EQUAL
61361: IFTRUE 61383
61363: LD_INT 28
61365: DOUBLE
61366: EQUAL
61367: IFTRUE 61383
61369: LD_INT 29
61371: DOUBLE
61372: EQUAL
61373: IFTRUE 61383
61375: LD_INT 30
61377: DOUBLE
61378: EQUAL
61379: IFTRUE 61383
61381: GO 61439
61383: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61384: LD_ADDR_VAR 0 9
61388: PUSH
61389: LD_VAR 0 59
61393: PUSH
61394: LD_VAR 0 60
61398: PUSH
61399: LD_VAR 0 61
61403: PUSH
61404: LD_VAR 0 62
61408: PUSH
61409: LD_VAR 0 63
61413: PUSH
61414: LD_VAR 0 64
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: PUSH
61427: LD_VAR 0 4
61431: PUSH
61432: LD_INT 1
61434: PLUS
61435: ARRAY
61436: ST_TO_ADDR
61437: GO 61440
61439: POP
// temp_list2 = [ ] ;
61440: LD_ADDR_VAR 0 10
61444: PUSH
61445: EMPTY
61446: ST_TO_ADDR
// for i in temp_list do
61447: LD_ADDR_VAR 0 8
61451: PUSH
61452: LD_VAR 0 9
61456: PUSH
61457: FOR_IN
61458: IFFALSE 61510
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61460: LD_ADDR_VAR 0 10
61464: PUSH
61465: LD_VAR 0 10
61469: PUSH
61470: LD_VAR 0 8
61474: PUSH
61475: LD_INT 1
61477: ARRAY
61478: PUSH
61479: LD_VAR 0 2
61483: PLUS
61484: PUSH
61485: LD_VAR 0 8
61489: PUSH
61490: LD_INT 2
61492: ARRAY
61493: PUSH
61494: LD_VAR 0 3
61498: PLUS
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: EMPTY
61505: LIST
61506: ADD
61507: ST_TO_ADDR
61508: GO 61457
61510: POP
61511: POP
// result = temp_list2 ;
61512: LD_ADDR_VAR 0 7
61516: PUSH
61517: LD_VAR 0 10
61521: ST_TO_ADDR
// end ;
61522: LD_VAR 0 7
61526: RET
// export function EnemyInRange ( unit , dist ) ; begin
61527: LD_INT 0
61529: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61530: LD_ADDR_VAR 0 3
61534: PUSH
61535: LD_VAR 0 1
61539: PPUSH
61540: CALL_OW 255
61544: PPUSH
61545: LD_VAR 0 1
61549: PPUSH
61550: CALL_OW 250
61554: PPUSH
61555: LD_VAR 0 1
61559: PPUSH
61560: CALL_OW 251
61564: PPUSH
61565: LD_VAR 0 2
61569: PPUSH
61570: CALL 34900 0 4
61574: PUSH
61575: LD_INT 4
61577: ARRAY
61578: ST_TO_ADDR
// end ;
61579: LD_VAR 0 3
61583: RET
// export function PlayerSeeMe ( unit ) ; begin
61584: LD_INT 0
61586: PPUSH
// result := See ( your_side , unit ) ;
61587: LD_ADDR_VAR 0 2
61591: PUSH
61592: LD_OWVAR 2
61596: PPUSH
61597: LD_VAR 0 1
61601: PPUSH
61602: CALL_OW 292
61606: ST_TO_ADDR
// end ;
61607: LD_VAR 0 2
61611: RET
// export function ReverseDir ( unit ) ; begin
61612: LD_INT 0
61614: PPUSH
// if not unit then
61615: LD_VAR 0 1
61619: NOT
61620: IFFALSE 61624
// exit ;
61622: GO 61647
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61624: LD_ADDR_VAR 0 2
61628: PUSH
61629: LD_VAR 0 1
61633: PPUSH
61634: CALL_OW 254
61638: PUSH
61639: LD_INT 3
61641: PLUS
61642: PUSH
61643: LD_INT 6
61645: MOD
61646: ST_TO_ADDR
// end ;
61647: LD_VAR 0 2
61651: RET
// export function ReverseArray ( array ) ; var i ; begin
61652: LD_INT 0
61654: PPUSH
61655: PPUSH
// if not array then
61656: LD_VAR 0 1
61660: NOT
61661: IFFALSE 61665
// exit ;
61663: GO 61720
// result := [ ] ;
61665: LD_ADDR_VAR 0 2
61669: PUSH
61670: EMPTY
61671: ST_TO_ADDR
// for i := array downto 1 do
61672: LD_ADDR_VAR 0 3
61676: PUSH
61677: DOUBLE
61678: LD_VAR 0 1
61682: INC
61683: ST_TO_ADDR
61684: LD_INT 1
61686: PUSH
61687: FOR_DOWNTO
61688: IFFALSE 61718
// result := Join ( result , array [ i ] ) ;
61690: LD_ADDR_VAR 0 2
61694: PUSH
61695: LD_VAR 0 2
61699: PPUSH
61700: LD_VAR 0 1
61704: PUSH
61705: LD_VAR 0 3
61709: ARRAY
61710: PPUSH
61711: CALL 66385 0 2
61715: ST_TO_ADDR
61716: GO 61687
61718: POP
61719: POP
// end ;
61720: LD_VAR 0 2
61724: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61725: LD_INT 0
61727: PPUSH
61728: PPUSH
61729: PPUSH
61730: PPUSH
61731: PPUSH
61732: PPUSH
// if not unit or not hexes then
61733: LD_VAR 0 1
61737: NOT
61738: PUSH
61739: LD_VAR 0 2
61743: NOT
61744: OR
61745: IFFALSE 61749
// exit ;
61747: GO 61872
// dist := 9999 ;
61749: LD_ADDR_VAR 0 5
61753: PUSH
61754: LD_INT 9999
61756: ST_TO_ADDR
// for i = 1 to hexes do
61757: LD_ADDR_VAR 0 4
61761: PUSH
61762: DOUBLE
61763: LD_INT 1
61765: DEC
61766: ST_TO_ADDR
61767: LD_VAR 0 2
61771: PUSH
61772: FOR_TO
61773: IFFALSE 61860
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61775: LD_ADDR_VAR 0 6
61779: PUSH
61780: LD_VAR 0 1
61784: PPUSH
61785: LD_VAR 0 2
61789: PUSH
61790: LD_VAR 0 4
61794: ARRAY
61795: PUSH
61796: LD_INT 1
61798: ARRAY
61799: PPUSH
61800: LD_VAR 0 2
61804: PUSH
61805: LD_VAR 0 4
61809: ARRAY
61810: PUSH
61811: LD_INT 2
61813: ARRAY
61814: PPUSH
61815: CALL_OW 297
61819: ST_TO_ADDR
// if tdist < dist then
61820: LD_VAR 0 6
61824: PUSH
61825: LD_VAR 0 5
61829: LESS
61830: IFFALSE 61858
// begin hex := hexes [ i ] ;
61832: LD_ADDR_VAR 0 8
61836: PUSH
61837: LD_VAR 0 2
61841: PUSH
61842: LD_VAR 0 4
61846: ARRAY
61847: ST_TO_ADDR
// dist := tdist ;
61848: LD_ADDR_VAR 0 5
61852: PUSH
61853: LD_VAR 0 6
61857: ST_TO_ADDR
// end ; end ;
61858: GO 61772
61860: POP
61861: POP
// result := hex ;
61862: LD_ADDR_VAR 0 3
61866: PUSH
61867: LD_VAR 0 8
61871: ST_TO_ADDR
// end ;
61872: LD_VAR 0 3
61876: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61877: LD_INT 0
61879: PPUSH
61880: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61881: LD_VAR 0 1
61885: NOT
61886: PUSH
61887: LD_VAR 0 1
61891: PUSH
61892: LD_INT 21
61894: PUSH
61895: LD_INT 2
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 23
61904: PUSH
61905: LD_INT 2
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PPUSH
61916: CALL_OW 69
61920: IN
61921: NOT
61922: OR
61923: IFFALSE 61927
// exit ;
61925: GO 61974
// for i = 1 to 3 do
61927: LD_ADDR_VAR 0 3
61931: PUSH
61932: DOUBLE
61933: LD_INT 1
61935: DEC
61936: ST_TO_ADDR
61937: LD_INT 3
61939: PUSH
61940: FOR_TO
61941: IFFALSE 61972
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61943: LD_VAR 0 1
61947: PPUSH
61948: CALL_OW 250
61952: PPUSH
61953: LD_VAR 0 1
61957: PPUSH
61958: CALL_OW 251
61962: PPUSH
61963: LD_INT 1
61965: PPUSH
61966: CALL_OW 453
61970: GO 61940
61972: POP
61973: POP
// end ;
61974: LD_VAR 0 2
61978: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61979: LD_INT 0
61981: PPUSH
61982: PPUSH
61983: PPUSH
61984: PPUSH
61985: PPUSH
61986: PPUSH
// if not unit or not enemy_unit then
61987: LD_VAR 0 1
61991: NOT
61992: PUSH
61993: LD_VAR 0 2
61997: NOT
61998: OR
61999: IFFALSE 62003
// exit ;
62001: GO 62470
// if GetLives ( i ) < 250 then
62003: LD_VAR 0 4
62007: PPUSH
62008: CALL_OW 256
62012: PUSH
62013: LD_INT 250
62015: LESS
62016: IFFALSE 62029
// begin ComAutodestruct ( i ) ;
62018: LD_VAR 0 4
62022: PPUSH
62023: CALL 61877 0 1
// exit ;
62027: GO 62470
// end ; x := GetX ( enemy_unit ) ;
62029: LD_ADDR_VAR 0 7
62033: PUSH
62034: LD_VAR 0 2
62038: PPUSH
62039: CALL_OW 250
62043: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62044: LD_ADDR_VAR 0 8
62048: PUSH
62049: LD_VAR 0 2
62053: PPUSH
62054: CALL_OW 251
62058: ST_TO_ADDR
// if not x or not y then
62059: LD_VAR 0 7
62063: NOT
62064: PUSH
62065: LD_VAR 0 8
62069: NOT
62070: OR
62071: IFFALSE 62075
// exit ;
62073: GO 62470
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62075: LD_ADDR_VAR 0 6
62079: PUSH
62080: LD_VAR 0 7
62084: PPUSH
62085: LD_INT 0
62087: PPUSH
62088: LD_INT 4
62090: PPUSH
62091: CALL_OW 272
62095: PUSH
62096: LD_VAR 0 8
62100: PPUSH
62101: LD_INT 0
62103: PPUSH
62104: LD_INT 4
62106: PPUSH
62107: CALL_OW 273
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_VAR 0 7
62120: PPUSH
62121: LD_INT 1
62123: PPUSH
62124: LD_INT 4
62126: PPUSH
62127: CALL_OW 272
62131: PUSH
62132: LD_VAR 0 8
62136: PPUSH
62137: LD_INT 1
62139: PPUSH
62140: LD_INT 4
62142: PPUSH
62143: CALL_OW 273
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_VAR 0 7
62156: PPUSH
62157: LD_INT 2
62159: PPUSH
62160: LD_INT 4
62162: PPUSH
62163: CALL_OW 272
62167: PUSH
62168: LD_VAR 0 8
62172: PPUSH
62173: LD_INT 2
62175: PPUSH
62176: LD_INT 4
62178: PPUSH
62179: CALL_OW 273
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_VAR 0 7
62192: PPUSH
62193: LD_INT 3
62195: PPUSH
62196: LD_INT 4
62198: PPUSH
62199: CALL_OW 272
62203: PUSH
62204: LD_VAR 0 8
62208: PPUSH
62209: LD_INT 3
62211: PPUSH
62212: LD_INT 4
62214: PPUSH
62215: CALL_OW 273
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_VAR 0 7
62228: PPUSH
62229: LD_INT 4
62231: PPUSH
62232: LD_INT 4
62234: PPUSH
62235: CALL_OW 272
62239: PUSH
62240: LD_VAR 0 8
62244: PPUSH
62245: LD_INT 4
62247: PPUSH
62248: LD_INT 4
62250: PPUSH
62251: CALL_OW 273
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_VAR 0 7
62264: PPUSH
62265: LD_INT 5
62267: PPUSH
62268: LD_INT 4
62270: PPUSH
62271: CALL_OW 272
62275: PUSH
62276: LD_VAR 0 8
62280: PPUSH
62281: LD_INT 5
62283: PPUSH
62284: LD_INT 4
62286: PPUSH
62287: CALL_OW 273
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: ST_TO_ADDR
// for i = tmp downto 1 do
62304: LD_ADDR_VAR 0 4
62308: PUSH
62309: DOUBLE
62310: LD_VAR 0 6
62314: INC
62315: ST_TO_ADDR
62316: LD_INT 1
62318: PUSH
62319: FOR_DOWNTO
62320: IFFALSE 62421
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62322: LD_VAR 0 6
62326: PUSH
62327: LD_VAR 0 4
62331: ARRAY
62332: PUSH
62333: LD_INT 1
62335: ARRAY
62336: PPUSH
62337: LD_VAR 0 6
62341: PUSH
62342: LD_VAR 0 4
62346: ARRAY
62347: PUSH
62348: LD_INT 2
62350: ARRAY
62351: PPUSH
62352: CALL_OW 488
62356: NOT
62357: PUSH
62358: LD_VAR 0 6
62362: PUSH
62363: LD_VAR 0 4
62367: ARRAY
62368: PUSH
62369: LD_INT 1
62371: ARRAY
62372: PPUSH
62373: LD_VAR 0 6
62377: PUSH
62378: LD_VAR 0 4
62382: ARRAY
62383: PUSH
62384: LD_INT 2
62386: ARRAY
62387: PPUSH
62388: CALL_OW 428
62392: PUSH
62393: LD_INT 0
62395: NONEQUAL
62396: OR
62397: IFFALSE 62419
// tmp := Delete ( tmp , i ) ;
62399: LD_ADDR_VAR 0 6
62403: PUSH
62404: LD_VAR 0 6
62408: PPUSH
62409: LD_VAR 0 4
62413: PPUSH
62414: CALL_OW 3
62418: ST_TO_ADDR
62419: GO 62319
62421: POP
62422: POP
// j := GetClosestHex ( unit , tmp ) ;
62423: LD_ADDR_VAR 0 5
62427: PUSH
62428: LD_VAR 0 1
62432: PPUSH
62433: LD_VAR 0 6
62437: PPUSH
62438: CALL 61725 0 2
62442: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62443: LD_VAR 0 1
62447: PPUSH
62448: LD_VAR 0 5
62452: PUSH
62453: LD_INT 1
62455: ARRAY
62456: PPUSH
62457: LD_VAR 0 5
62461: PUSH
62462: LD_INT 2
62464: ARRAY
62465: PPUSH
62466: CALL_OW 111
// end ;
62470: LD_VAR 0 3
62474: RET
// export function PrepareApemanSoldier ( ) ; begin
62475: LD_INT 0
62477: PPUSH
// uc_nation := 0 ;
62478: LD_ADDR_OWVAR 21
62482: PUSH
62483: LD_INT 0
62485: ST_TO_ADDR
// hc_sex := sex_male ;
62486: LD_ADDR_OWVAR 27
62490: PUSH
62491: LD_INT 1
62493: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62494: LD_ADDR_OWVAR 28
62498: PUSH
62499: LD_INT 15
62501: ST_TO_ADDR
// hc_gallery :=  ;
62502: LD_ADDR_OWVAR 33
62506: PUSH
62507: LD_STRING 
62509: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62510: LD_ADDR_OWVAR 31
62514: PUSH
62515: LD_INT 0
62517: PPUSH
62518: LD_INT 3
62520: PPUSH
62521: CALL_OW 12
62525: PUSH
62526: LD_INT 0
62528: PPUSH
62529: LD_INT 3
62531: PPUSH
62532: CALL_OW 12
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: ST_TO_ADDR
// end ;
62549: LD_VAR 0 1
62553: RET
// export function PrepareApemanEngineer ( ) ; begin
62554: LD_INT 0
62556: PPUSH
// uc_nation := 0 ;
62557: LD_ADDR_OWVAR 21
62561: PUSH
62562: LD_INT 0
62564: ST_TO_ADDR
// hc_sex := sex_male ;
62565: LD_ADDR_OWVAR 27
62569: PUSH
62570: LD_INT 1
62572: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62573: LD_ADDR_OWVAR 28
62577: PUSH
62578: LD_INT 16
62580: ST_TO_ADDR
// hc_gallery :=  ;
62581: LD_ADDR_OWVAR 33
62585: PUSH
62586: LD_STRING 
62588: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62589: LD_ADDR_OWVAR 31
62593: PUSH
62594: LD_INT 0
62596: PPUSH
62597: LD_INT 3
62599: PPUSH
62600: CALL_OW 12
62604: PUSH
62605: LD_INT 0
62607: PPUSH
62608: LD_INT 3
62610: PPUSH
62611: CALL_OW 12
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: LD_INT 0
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: ST_TO_ADDR
// end ;
62628: LD_VAR 0 1
62632: RET
// export function PrepareApeman ( agressivity ) ; begin
62633: LD_INT 0
62635: PPUSH
// uc_side := 0 ;
62636: LD_ADDR_OWVAR 20
62640: PUSH
62641: LD_INT 0
62643: ST_TO_ADDR
// uc_nation := 0 ;
62644: LD_ADDR_OWVAR 21
62648: PUSH
62649: LD_INT 0
62651: ST_TO_ADDR
// hc_sex := sex_male ;
62652: LD_ADDR_OWVAR 27
62656: PUSH
62657: LD_INT 1
62659: ST_TO_ADDR
// hc_class := class_apeman ;
62660: LD_ADDR_OWVAR 28
62664: PUSH
62665: LD_INT 12
62667: ST_TO_ADDR
// hc_gallery :=  ;
62668: LD_ADDR_OWVAR 33
62672: PUSH
62673: LD_STRING 
62675: ST_TO_ADDR
// if agressivity = 0 then
62676: LD_VAR 0 1
62680: PUSH
62681: LD_INT 0
62683: EQUAL
62684: IFFALSE 62696
// hc_agressivity := 0 else
62686: LD_ADDR_OWVAR 35
62690: PUSH
62691: LD_INT 0
62693: ST_TO_ADDR
62694: GO 62717
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62696: LD_ADDR_OWVAR 35
62700: PUSH
62701: LD_VAR 0 1
62705: NEG
62706: PPUSH
62707: LD_VAR 0 1
62711: PPUSH
62712: CALL_OW 12
62716: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62717: LD_ADDR_OWVAR 31
62721: PUSH
62722: LD_INT 0
62724: PPUSH
62725: LD_INT 3
62727: PPUSH
62728: CALL_OW 12
62732: PUSH
62733: LD_INT 0
62735: PPUSH
62736: LD_INT 3
62738: PPUSH
62739: CALL_OW 12
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: LD_INT 0
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: ST_TO_ADDR
// end ;
62756: LD_VAR 0 2
62760: RET
// export function PrepareTiger ( agressivity ) ; begin
62761: LD_INT 0
62763: PPUSH
// uc_side := 0 ;
62764: LD_ADDR_OWVAR 20
62768: PUSH
62769: LD_INT 0
62771: ST_TO_ADDR
// uc_nation := 0 ;
62772: LD_ADDR_OWVAR 21
62776: PUSH
62777: LD_INT 0
62779: ST_TO_ADDR
// hc_class := class_tiger ;
62780: LD_ADDR_OWVAR 28
62784: PUSH
62785: LD_INT 14
62787: ST_TO_ADDR
// hc_gallery :=  ;
62788: LD_ADDR_OWVAR 33
62792: PUSH
62793: LD_STRING 
62795: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62796: LD_ADDR_OWVAR 35
62800: PUSH
62801: LD_VAR 0 1
62805: NEG
62806: PPUSH
62807: LD_VAR 0 1
62811: PPUSH
62812: CALL_OW 12
62816: ST_TO_ADDR
// end ;
62817: LD_VAR 0 2
62821: RET
// export function PrepareEnchidna ( ) ; begin
62822: LD_INT 0
62824: PPUSH
// uc_side := 0 ;
62825: LD_ADDR_OWVAR 20
62829: PUSH
62830: LD_INT 0
62832: ST_TO_ADDR
// uc_nation := 0 ;
62833: LD_ADDR_OWVAR 21
62837: PUSH
62838: LD_INT 0
62840: ST_TO_ADDR
// hc_class := class_baggie ;
62841: LD_ADDR_OWVAR 28
62845: PUSH
62846: LD_INT 13
62848: ST_TO_ADDR
// hc_gallery :=  ;
62849: LD_ADDR_OWVAR 33
62853: PUSH
62854: LD_STRING 
62856: ST_TO_ADDR
// end ;
62857: LD_VAR 0 1
62861: RET
// export function PrepareFrog ( ) ; begin
62862: LD_INT 0
62864: PPUSH
// uc_side := 0 ;
62865: LD_ADDR_OWVAR 20
62869: PUSH
62870: LD_INT 0
62872: ST_TO_ADDR
// uc_nation := 0 ;
62873: LD_ADDR_OWVAR 21
62877: PUSH
62878: LD_INT 0
62880: ST_TO_ADDR
// hc_class := class_frog ;
62881: LD_ADDR_OWVAR 28
62885: PUSH
62886: LD_INT 19
62888: ST_TO_ADDR
// hc_gallery :=  ;
62889: LD_ADDR_OWVAR 33
62893: PUSH
62894: LD_STRING 
62896: ST_TO_ADDR
// end ;
62897: LD_VAR 0 1
62901: RET
// export function PrepareFish ( ) ; begin
62902: LD_INT 0
62904: PPUSH
// uc_side := 0 ;
62905: LD_ADDR_OWVAR 20
62909: PUSH
62910: LD_INT 0
62912: ST_TO_ADDR
// uc_nation := 0 ;
62913: LD_ADDR_OWVAR 21
62917: PUSH
62918: LD_INT 0
62920: ST_TO_ADDR
// hc_class := class_fish ;
62921: LD_ADDR_OWVAR 28
62925: PUSH
62926: LD_INT 20
62928: ST_TO_ADDR
// hc_gallery :=  ;
62929: LD_ADDR_OWVAR 33
62933: PUSH
62934: LD_STRING 
62936: ST_TO_ADDR
// end ;
62937: LD_VAR 0 1
62941: RET
// export function PrepareBird ( ) ; begin
62942: LD_INT 0
62944: PPUSH
// uc_side := 0 ;
62945: LD_ADDR_OWVAR 20
62949: PUSH
62950: LD_INT 0
62952: ST_TO_ADDR
// uc_nation := 0 ;
62953: LD_ADDR_OWVAR 21
62957: PUSH
62958: LD_INT 0
62960: ST_TO_ADDR
// hc_class := class_phororhacos ;
62961: LD_ADDR_OWVAR 28
62965: PUSH
62966: LD_INT 18
62968: ST_TO_ADDR
// hc_gallery :=  ;
62969: LD_ADDR_OWVAR 33
62973: PUSH
62974: LD_STRING 
62976: ST_TO_ADDR
// end ;
62977: LD_VAR 0 1
62981: RET
// export function PrepareHorse ( ) ; begin
62982: LD_INT 0
62984: PPUSH
// uc_side := 0 ;
62985: LD_ADDR_OWVAR 20
62989: PUSH
62990: LD_INT 0
62992: ST_TO_ADDR
// uc_nation := 0 ;
62993: LD_ADDR_OWVAR 21
62997: PUSH
62998: LD_INT 0
63000: ST_TO_ADDR
// hc_class := class_horse ;
63001: LD_ADDR_OWVAR 28
63005: PUSH
63006: LD_INT 21
63008: ST_TO_ADDR
// hc_gallery :=  ;
63009: LD_ADDR_OWVAR 33
63013: PUSH
63014: LD_STRING 
63016: ST_TO_ADDR
// end ;
63017: LD_VAR 0 1
63021: RET
// export function PrepareMastodont ( ) ; begin
63022: LD_INT 0
63024: PPUSH
// uc_side := 0 ;
63025: LD_ADDR_OWVAR 20
63029: PUSH
63030: LD_INT 0
63032: ST_TO_ADDR
// uc_nation := 0 ;
63033: LD_ADDR_OWVAR 21
63037: PUSH
63038: LD_INT 0
63040: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63041: LD_ADDR_OWVAR 37
63045: PUSH
63046: LD_INT 31
63048: ST_TO_ADDR
// vc_control := control_rider ;
63049: LD_ADDR_OWVAR 38
63053: PUSH
63054: LD_INT 4
63056: ST_TO_ADDR
// end ;
63057: LD_VAR 0 1
63061: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63062: LD_INT 0
63064: PPUSH
63065: PPUSH
63066: PPUSH
// uc_side = 0 ;
63067: LD_ADDR_OWVAR 20
63071: PUSH
63072: LD_INT 0
63074: ST_TO_ADDR
// uc_nation = 0 ;
63075: LD_ADDR_OWVAR 21
63079: PUSH
63080: LD_INT 0
63082: ST_TO_ADDR
// InitHc_All ( ) ;
63083: CALL_OW 584
// InitVc ;
63087: CALL_OW 20
// if mastodonts then
63091: LD_VAR 0 6
63095: IFFALSE 63162
// for i = 1 to mastodonts do
63097: LD_ADDR_VAR 0 11
63101: PUSH
63102: DOUBLE
63103: LD_INT 1
63105: DEC
63106: ST_TO_ADDR
63107: LD_VAR 0 6
63111: PUSH
63112: FOR_TO
63113: IFFALSE 63160
// begin vc_chassis := 31 ;
63115: LD_ADDR_OWVAR 37
63119: PUSH
63120: LD_INT 31
63122: ST_TO_ADDR
// vc_control := control_rider ;
63123: LD_ADDR_OWVAR 38
63127: PUSH
63128: LD_INT 4
63130: ST_TO_ADDR
// animal := CreateVehicle ;
63131: LD_ADDR_VAR 0 12
63135: PUSH
63136: CALL_OW 45
63140: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63141: LD_VAR 0 12
63145: PPUSH
63146: LD_VAR 0 8
63150: PPUSH
63151: LD_INT 0
63153: PPUSH
63154: CALL 65290 0 3
// end ;
63158: GO 63112
63160: POP
63161: POP
// if horses then
63162: LD_VAR 0 5
63166: IFFALSE 63233
// for i = 1 to horses do
63168: LD_ADDR_VAR 0 11
63172: PUSH
63173: DOUBLE
63174: LD_INT 1
63176: DEC
63177: ST_TO_ADDR
63178: LD_VAR 0 5
63182: PUSH
63183: FOR_TO
63184: IFFALSE 63231
// begin hc_class := 21 ;
63186: LD_ADDR_OWVAR 28
63190: PUSH
63191: LD_INT 21
63193: ST_TO_ADDR
// hc_gallery :=  ;
63194: LD_ADDR_OWVAR 33
63198: PUSH
63199: LD_STRING 
63201: ST_TO_ADDR
// animal := CreateHuman ;
63202: LD_ADDR_VAR 0 12
63206: PUSH
63207: CALL_OW 44
63211: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63212: LD_VAR 0 12
63216: PPUSH
63217: LD_VAR 0 8
63221: PPUSH
63222: LD_INT 0
63224: PPUSH
63225: CALL 65290 0 3
// end ;
63229: GO 63183
63231: POP
63232: POP
// if birds then
63233: LD_VAR 0 1
63237: IFFALSE 63304
// for i = 1 to birds do
63239: LD_ADDR_VAR 0 11
63243: PUSH
63244: DOUBLE
63245: LD_INT 1
63247: DEC
63248: ST_TO_ADDR
63249: LD_VAR 0 1
63253: PUSH
63254: FOR_TO
63255: IFFALSE 63302
// begin hc_class := 18 ;
63257: LD_ADDR_OWVAR 28
63261: PUSH
63262: LD_INT 18
63264: ST_TO_ADDR
// hc_gallery =  ;
63265: LD_ADDR_OWVAR 33
63269: PUSH
63270: LD_STRING 
63272: ST_TO_ADDR
// animal := CreateHuman ;
63273: LD_ADDR_VAR 0 12
63277: PUSH
63278: CALL_OW 44
63282: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63283: LD_VAR 0 12
63287: PPUSH
63288: LD_VAR 0 8
63292: PPUSH
63293: LD_INT 0
63295: PPUSH
63296: CALL 65290 0 3
// end ;
63300: GO 63254
63302: POP
63303: POP
// if tigers then
63304: LD_VAR 0 2
63308: IFFALSE 63392
// for i = 1 to tigers do
63310: LD_ADDR_VAR 0 11
63314: PUSH
63315: DOUBLE
63316: LD_INT 1
63318: DEC
63319: ST_TO_ADDR
63320: LD_VAR 0 2
63324: PUSH
63325: FOR_TO
63326: IFFALSE 63390
// begin hc_class = class_tiger ;
63328: LD_ADDR_OWVAR 28
63332: PUSH
63333: LD_INT 14
63335: ST_TO_ADDR
// hc_gallery =  ;
63336: LD_ADDR_OWVAR 33
63340: PUSH
63341: LD_STRING 
63343: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63344: LD_ADDR_OWVAR 35
63348: PUSH
63349: LD_INT 7
63351: NEG
63352: PPUSH
63353: LD_INT 7
63355: PPUSH
63356: CALL_OW 12
63360: ST_TO_ADDR
// animal := CreateHuman ;
63361: LD_ADDR_VAR 0 12
63365: PUSH
63366: CALL_OW 44
63370: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63371: LD_VAR 0 12
63375: PPUSH
63376: LD_VAR 0 8
63380: PPUSH
63381: LD_INT 0
63383: PPUSH
63384: CALL 65290 0 3
// end ;
63388: GO 63325
63390: POP
63391: POP
// if apemans then
63392: LD_VAR 0 3
63396: IFFALSE 63519
// for i = 1 to apemans do
63398: LD_ADDR_VAR 0 11
63402: PUSH
63403: DOUBLE
63404: LD_INT 1
63406: DEC
63407: ST_TO_ADDR
63408: LD_VAR 0 3
63412: PUSH
63413: FOR_TO
63414: IFFALSE 63517
// begin hc_class = class_apeman ;
63416: LD_ADDR_OWVAR 28
63420: PUSH
63421: LD_INT 12
63423: ST_TO_ADDR
// hc_gallery =  ;
63424: LD_ADDR_OWVAR 33
63428: PUSH
63429: LD_STRING 
63431: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63432: LD_ADDR_OWVAR 35
63436: PUSH
63437: LD_INT 2
63439: NEG
63440: PPUSH
63441: LD_INT 2
63443: PPUSH
63444: CALL_OW 12
63448: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63449: LD_ADDR_OWVAR 31
63453: PUSH
63454: LD_INT 1
63456: PPUSH
63457: LD_INT 3
63459: PPUSH
63460: CALL_OW 12
63464: PUSH
63465: LD_INT 1
63467: PPUSH
63468: LD_INT 3
63470: PPUSH
63471: CALL_OW 12
63475: PUSH
63476: LD_INT 0
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: ST_TO_ADDR
// animal := CreateHuman ;
63488: LD_ADDR_VAR 0 12
63492: PUSH
63493: CALL_OW 44
63497: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63498: LD_VAR 0 12
63502: PPUSH
63503: LD_VAR 0 8
63507: PPUSH
63508: LD_INT 0
63510: PPUSH
63511: CALL 65290 0 3
// end ;
63515: GO 63413
63517: POP
63518: POP
// if enchidnas then
63519: LD_VAR 0 4
63523: IFFALSE 63590
// for i = 1 to enchidnas do
63525: LD_ADDR_VAR 0 11
63529: PUSH
63530: DOUBLE
63531: LD_INT 1
63533: DEC
63534: ST_TO_ADDR
63535: LD_VAR 0 4
63539: PUSH
63540: FOR_TO
63541: IFFALSE 63588
// begin hc_class = 13 ;
63543: LD_ADDR_OWVAR 28
63547: PUSH
63548: LD_INT 13
63550: ST_TO_ADDR
// hc_gallery =  ;
63551: LD_ADDR_OWVAR 33
63555: PUSH
63556: LD_STRING 
63558: ST_TO_ADDR
// animal := CreateHuman ;
63559: LD_ADDR_VAR 0 12
63563: PUSH
63564: CALL_OW 44
63568: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63569: LD_VAR 0 12
63573: PPUSH
63574: LD_VAR 0 8
63578: PPUSH
63579: LD_INT 0
63581: PPUSH
63582: CALL 65290 0 3
// end ;
63586: GO 63540
63588: POP
63589: POP
// if fishes then
63590: LD_VAR 0 7
63594: IFFALSE 63661
// for i = 1 to fishes do
63596: LD_ADDR_VAR 0 11
63600: PUSH
63601: DOUBLE
63602: LD_INT 1
63604: DEC
63605: ST_TO_ADDR
63606: LD_VAR 0 7
63610: PUSH
63611: FOR_TO
63612: IFFALSE 63659
// begin hc_class = 20 ;
63614: LD_ADDR_OWVAR 28
63618: PUSH
63619: LD_INT 20
63621: ST_TO_ADDR
// hc_gallery =  ;
63622: LD_ADDR_OWVAR 33
63626: PUSH
63627: LD_STRING 
63629: ST_TO_ADDR
// animal := CreateHuman ;
63630: LD_ADDR_VAR 0 12
63634: PUSH
63635: CALL_OW 44
63639: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63640: LD_VAR 0 12
63644: PPUSH
63645: LD_VAR 0 9
63649: PPUSH
63650: LD_INT 0
63652: PPUSH
63653: CALL 65290 0 3
// end ;
63657: GO 63611
63659: POP
63660: POP
// end ;
63661: LD_VAR 0 10
63665: RET
// export function WantHeal ( sci , unit ) ; begin
63666: LD_INT 0
63668: PPUSH
// if GetTaskList ( sci ) > 0 then
63669: LD_VAR 0 1
63673: PPUSH
63674: CALL_OW 437
63678: PUSH
63679: LD_INT 0
63681: GREATER
63682: IFFALSE 63752
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63684: LD_VAR 0 1
63688: PPUSH
63689: CALL_OW 437
63693: PUSH
63694: LD_INT 1
63696: ARRAY
63697: PUSH
63698: LD_INT 1
63700: ARRAY
63701: PUSH
63702: LD_STRING l
63704: EQUAL
63705: PUSH
63706: LD_VAR 0 1
63710: PPUSH
63711: CALL_OW 437
63715: PUSH
63716: LD_INT 1
63718: ARRAY
63719: PUSH
63720: LD_INT 4
63722: ARRAY
63723: PUSH
63724: LD_VAR 0 2
63728: EQUAL
63729: AND
63730: IFFALSE 63742
// result := true else
63732: LD_ADDR_VAR 0 3
63736: PUSH
63737: LD_INT 1
63739: ST_TO_ADDR
63740: GO 63750
// result := false ;
63742: LD_ADDR_VAR 0 3
63746: PUSH
63747: LD_INT 0
63749: ST_TO_ADDR
// end else
63750: GO 63760
// result := false ;
63752: LD_ADDR_VAR 0 3
63756: PUSH
63757: LD_INT 0
63759: ST_TO_ADDR
// end ;
63760: LD_VAR 0 3
63764: RET
// export function HealTarget ( sci ) ; begin
63765: LD_INT 0
63767: PPUSH
// if not sci then
63768: LD_VAR 0 1
63772: NOT
63773: IFFALSE 63777
// exit ;
63775: GO 63842
// result := 0 ;
63777: LD_ADDR_VAR 0 2
63781: PUSH
63782: LD_INT 0
63784: ST_TO_ADDR
// if GetTaskList ( sci ) then
63785: LD_VAR 0 1
63789: PPUSH
63790: CALL_OW 437
63794: IFFALSE 63842
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63796: LD_VAR 0 1
63800: PPUSH
63801: CALL_OW 437
63805: PUSH
63806: LD_INT 1
63808: ARRAY
63809: PUSH
63810: LD_INT 1
63812: ARRAY
63813: PUSH
63814: LD_STRING l
63816: EQUAL
63817: IFFALSE 63842
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63819: LD_ADDR_VAR 0 2
63823: PUSH
63824: LD_VAR 0 1
63828: PPUSH
63829: CALL_OW 437
63833: PUSH
63834: LD_INT 1
63836: ARRAY
63837: PUSH
63838: LD_INT 4
63840: ARRAY
63841: ST_TO_ADDR
// end ;
63842: LD_VAR 0 2
63846: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63847: LD_INT 0
63849: PPUSH
63850: PPUSH
63851: PPUSH
63852: PPUSH
// if not base_units then
63853: LD_VAR 0 1
63857: NOT
63858: IFFALSE 63862
// exit ;
63860: GO 63949
// result := false ;
63862: LD_ADDR_VAR 0 2
63866: PUSH
63867: LD_INT 0
63869: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63870: LD_ADDR_VAR 0 5
63874: PUSH
63875: LD_VAR 0 1
63879: PPUSH
63880: LD_INT 21
63882: PUSH
63883: LD_INT 3
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PPUSH
63890: CALL_OW 72
63894: ST_TO_ADDR
// if not tmp then
63895: LD_VAR 0 5
63899: NOT
63900: IFFALSE 63904
// exit ;
63902: GO 63949
// for i in tmp do
63904: LD_ADDR_VAR 0 3
63908: PUSH
63909: LD_VAR 0 5
63913: PUSH
63914: FOR_IN
63915: IFFALSE 63947
// begin result := EnemyInRange ( i , 22 ) ;
63917: LD_ADDR_VAR 0 2
63921: PUSH
63922: LD_VAR 0 3
63926: PPUSH
63927: LD_INT 22
63929: PPUSH
63930: CALL 61527 0 2
63934: ST_TO_ADDR
// if result then
63935: LD_VAR 0 2
63939: IFFALSE 63945
// exit ;
63941: POP
63942: POP
63943: GO 63949
// end ;
63945: GO 63914
63947: POP
63948: POP
// end ;
63949: LD_VAR 0 2
63953: RET
// export function FilterByTag ( units , tag ) ; begin
63954: LD_INT 0
63956: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63957: LD_ADDR_VAR 0 3
63961: PUSH
63962: LD_VAR 0 1
63966: PPUSH
63967: LD_INT 120
63969: PUSH
63970: LD_VAR 0 2
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PPUSH
63979: CALL_OW 72
63983: ST_TO_ADDR
// end ;
63984: LD_VAR 0 3
63988: RET
// export function IsDriver ( un ) ; begin
63989: LD_INT 0
63991: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63992: LD_ADDR_VAR 0 2
63996: PUSH
63997: LD_VAR 0 1
64001: PUSH
64002: LD_INT 55
64004: PUSH
64005: EMPTY
64006: LIST
64007: PPUSH
64008: CALL_OW 69
64012: IN
64013: ST_TO_ADDR
// end ;
64014: LD_VAR 0 2
64018: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64019: LD_INT 0
64021: PPUSH
64022: PPUSH
// list := [ ] ;
64023: LD_ADDR_VAR 0 5
64027: PUSH
64028: EMPTY
64029: ST_TO_ADDR
// case d of 0 :
64030: LD_VAR 0 3
64034: PUSH
64035: LD_INT 0
64037: DOUBLE
64038: EQUAL
64039: IFTRUE 64043
64041: GO 64176
64043: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64044: LD_ADDR_VAR 0 5
64048: PUSH
64049: LD_VAR 0 1
64053: PUSH
64054: LD_INT 4
64056: MINUS
64057: PUSH
64058: LD_VAR 0 2
64062: PUSH
64063: LD_INT 4
64065: MINUS
64066: PUSH
64067: LD_INT 2
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: LIST
64074: PUSH
64075: LD_VAR 0 1
64079: PUSH
64080: LD_INT 3
64082: MINUS
64083: PUSH
64084: LD_VAR 0 2
64088: PUSH
64089: LD_INT 1
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: LIST
64096: PUSH
64097: LD_VAR 0 1
64101: PUSH
64102: LD_INT 4
64104: PLUS
64105: PUSH
64106: LD_VAR 0 2
64110: PUSH
64111: LD_INT 4
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: LIST
64118: PUSH
64119: LD_VAR 0 1
64123: PUSH
64124: LD_INT 3
64126: PLUS
64127: PUSH
64128: LD_VAR 0 2
64132: PUSH
64133: LD_INT 3
64135: PLUS
64136: PUSH
64137: LD_INT 5
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: LIST
64144: PUSH
64145: LD_VAR 0 1
64149: PUSH
64150: LD_VAR 0 2
64154: PUSH
64155: LD_INT 4
64157: PLUS
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: LIST
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: ST_TO_ADDR
// end ; 1 :
64174: GO 64874
64176: LD_INT 1
64178: DOUBLE
64179: EQUAL
64180: IFTRUE 64184
64182: GO 64317
64184: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64185: LD_ADDR_VAR 0 5
64189: PUSH
64190: LD_VAR 0 1
64194: PUSH
64195: LD_VAR 0 2
64199: PUSH
64200: LD_INT 4
64202: MINUS
64203: PUSH
64204: LD_INT 3
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: LIST
64211: PUSH
64212: LD_VAR 0 1
64216: PUSH
64217: LD_INT 3
64219: MINUS
64220: PUSH
64221: LD_VAR 0 2
64225: PUSH
64226: LD_INT 3
64228: MINUS
64229: PUSH
64230: LD_INT 2
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: LIST
64237: PUSH
64238: LD_VAR 0 1
64242: PUSH
64243: LD_INT 4
64245: MINUS
64246: PUSH
64247: LD_VAR 0 2
64251: PUSH
64252: LD_INT 1
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: LIST
64259: PUSH
64260: LD_VAR 0 1
64264: PUSH
64265: LD_VAR 0 2
64269: PUSH
64270: LD_INT 3
64272: PLUS
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: LIST
64281: PUSH
64282: LD_VAR 0 1
64286: PUSH
64287: LD_INT 4
64289: PLUS
64290: PUSH
64291: LD_VAR 0 2
64295: PUSH
64296: LD_INT 4
64298: PLUS
64299: PUSH
64300: LD_INT 5
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: LIST
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: ST_TO_ADDR
// end ; 2 :
64315: GO 64874
64317: LD_INT 2
64319: DOUBLE
64320: EQUAL
64321: IFTRUE 64325
64323: GO 64454
64325: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64326: LD_ADDR_VAR 0 5
64330: PUSH
64331: LD_VAR 0 1
64335: PUSH
64336: LD_VAR 0 2
64340: PUSH
64341: LD_INT 3
64343: MINUS
64344: PUSH
64345: LD_INT 3
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: LIST
64352: PUSH
64353: LD_VAR 0 1
64357: PUSH
64358: LD_INT 4
64360: PLUS
64361: PUSH
64362: LD_VAR 0 2
64366: PUSH
64367: LD_INT 4
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: LIST
64374: PUSH
64375: LD_VAR 0 1
64379: PUSH
64380: LD_VAR 0 2
64384: PUSH
64385: LD_INT 4
64387: PLUS
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: LIST
64396: PUSH
64397: LD_VAR 0 1
64401: PUSH
64402: LD_INT 3
64404: MINUS
64405: PUSH
64406: LD_VAR 0 2
64410: PUSH
64411: LD_INT 1
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: LIST
64418: PUSH
64419: LD_VAR 0 1
64423: PUSH
64424: LD_INT 4
64426: MINUS
64427: PUSH
64428: LD_VAR 0 2
64432: PUSH
64433: LD_INT 4
64435: MINUS
64436: PUSH
64437: LD_INT 2
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: LIST
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: ST_TO_ADDR
// end ; 3 :
64452: GO 64874
64454: LD_INT 3
64456: DOUBLE
64457: EQUAL
64458: IFTRUE 64462
64460: GO 64595
64462: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64463: LD_ADDR_VAR 0 5
64467: PUSH
64468: LD_VAR 0 1
64472: PUSH
64473: LD_INT 3
64475: PLUS
64476: PUSH
64477: LD_VAR 0 2
64481: PUSH
64482: LD_INT 4
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: LIST
64489: PUSH
64490: LD_VAR 0 1
64494: PUSH
64495: LD_INT 4
64497: PLUS
64498: PUSH
64499: LD_VAR 0 2
64503: PUSH
64504: LD_INT 4
64506: PLUS
64507: PUSH
64508: LD_INT 5
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: LIST
64515: PUSH
64516: LD_VAR 0 1
64520: PUSH
64521: LD_INT 4
64523: MINUS
64524: PUSH
64525: LD_VAR 0 2
64529: PUSH
64530: LD_INT 1
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: LIST
64537: PUSH
64538: LD_VAR 0 1
64542: PUSH
64543: LD_VAR 0 2
64547: PUSH
64548: LD_INT 4
64550: MINUS
64551: PUSH
64552: LD_INT 3
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: PUSH
64560: LD_VAR 0 1
64564: PUSH
64565: LD_INT 3
64567: MINUS
64568: PUSH
64569: LD_VAR 0 2
64573: PUSH
64574: LD_INT 3
64576: MINUS
64577: PUSH
64578: LD_INT 2
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: LIST
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: ST_TO_ADDR
// end ; 4 :
64593: GO 64874
64595: LD_INT 4
64597: DOUBLE
64598: EQUAL
64599: IFTRUE 64603
64601: GO 64736
64603: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64604: LD_ADDR_VAR 0 5
64608: PUSH
64609: LD_VAR 0 1
64613: PUSH
64614: LD_VAR 0 2
64618: PUSH
64619: LD_INT 4
64621: PLUS
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: LIST
64630: PUSH
64631: LD_VAR 0 1
64635: PUSH
64636: LD_INT 3
64638: PLUS
64639: PUSH
64640: LD_VAR 0 2
64644: PUSH
64645: LD_INT 3
64647: PLUS
64648: PUSH
64649: LD_INT 5
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: LIST
64656: PUSH
64657: LD_VAR 0 1
64661: PUSH
64662: LD_INT 4
64664: PLUS
64665: PUSH
64666: LD_VAR 0 2
64670: PUSH
64671: LD_INT 4
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: LIST
64678: PUSH
64679: LD_VAR 0 1
64683: PUSH
64684: LD_VAR 0 2
64688: PUSH
64689: LD_INT 3
64691: MINUS
64692: PUSH
64693: LD_INT 3
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: LIST
64700: PUSH
64701: LD_VAR 0 1
64705: PUSH
64706: LD_INT 4
64708: MINUS
64709: PUSH
64710: LD_VAR 0 2
64714: PUSH
64715: LD_INT 4
64717: MINUS
64718: PUSH
64719: LD_INT 2
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: LIST
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: ST_TO_ADDR
// end ; 5 :
64734: GO 64874
64736: LD_INT 5
64738: DOUBLE
64739: EQUAL
64740: IFTRUE 64744
64742: GO 64873
64744: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64745: LD_ADDR_VAR 0 5
64749: PUSH
64750: LD_VAR 0 1
64754: PUSH
64755: LD_INT 4
64757: MINUS
64758: PUSH
64759: LD_VAR 0 2
64763: PUSH
64764: LD_INT 1
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: LIST
64771: PUSH
64772: LD_VAR 0 1
64776: PUSH
64777: LD_VAR 0 2
64781: PUSH
64782: LD_INT 4
64784: MINUS
64785: PUSH
64786: LD_INT 3
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: LIST
64793: PUSH
64794: LD_VAR 0 1
64798: PUSH
64799: LD_INT 4
64801: PLUS
64802: PUSH
64803: LD_VAR 0 2
64807: PUSH
64808: LD_INT 4
64810: PLUS
64811: PUSH
64812: LD_INT 5
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: LIST
64819: PUSH
64820: LD_VAR 0 1
64824: PUSH
64825: LD_INT 3
64827: PLUS
64828: PUSH
64829: LD_VAR 0 2
64833: PUSH
64834: LD_INT 4
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: LIST
64841: PUSH
64842: LD_VAR 0 1
64846: PUSH
64847: LD_VAR 0 2
64851: PUSH
64852: LD_INT 3
64854: PLUS
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: LIST
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: ST_TO_ADDR
// end ; end ;
64871: GO 64874
64873: POP
// result := list ;
64874: LD_ADDR_VAR 0 4
64878: PUSH
64879: LD_VAR 0 5
64883: ST_TO_ADDR
// end ;
64884: LD_VAR 0 4
64888: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64889: LD_INT 0
64891: PPUSH
64892: PPUSH
64893: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64894: LD_VAR 0 1
64898: NOT
64899: PUSH
64900: LD_VAR 0 2
64904: PUSH
64905: LD_INT 1
64907: PUSH
64908: LD_INT 2
64910: PUSH
64911: LD_INT 3
64913: PUSH
64914: LD_INT 4
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: IN
64923: NOT
64924: OR
64925: IFFALSE 64929
// exit ;
64927: GO 65012
// tmp := [ ] ;
64929: LD_ADDR_VAR 0 5
64933: PUSH
64934: EMPTY
64935: ST_TO_ADDR
// for i in units do
64936: LD_ADDR_VAR 0 4
64940: PUSH
64941: LD_VAR 0 1
64945: PUSH
64946: FOR_IN
64947: IFFALSE 64981
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64949: LD_ADDR_VAR 0 5
64953: PUSH
64954: LD_VAR 0 5
64958: PPUSH
64959: LD_VAR 0 4
64963: PPUSH
64964: LD_VAR 0 2
64968: PPUSH
64969: CALL_OW 259
64973: PPUSH
64974: CALL 66385 0 2
64978: ST_TO_ADDR
64979: GO 64946
64981: POP
64982: POP
// if not tmp then
64983: LD_VAR 0 5
64987: NOT
64988: IFFALSE 64992
// exit ;
64990: GO 65012
// result := SortListByListDesc ( units , tmp ) ;
64992: LD_ADDR_VAR 0 3
64996: PUSH
64997: LD_VAR 0 1
65001: PPUSH
65002: LD_VAR 0 5
65006: PPUSH
65007: CALL_OW 77
65011: ST_TO_ADDR
// end ;
65012: LD_VAR 0 3
65016: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65017: LD_INT 0
65019: PPUSH
65020: PPUSH
65021: PPUSH
// result := false ;
65022: LD_ADDR_VAR 0 3
65026: PUSH
65027: LD_INT 0
65029: ST_TO_ADDR
// if not building then
65030: LD_VAR 0 2
65034: NOT
65035: IFFALSE 65039
// exit ;
65037: GO 65177
// x := GetX ( building ) ;
65039: LD_ADDR_VAR 0 4
65043: PUSH
65044: LD_VAR 0 2
65048: PPUSH
65049: CALL_OW 250
65053: ST_TO_ADDR
// y := GetY ( building ) ;
65054: LD_ADDR_VAR 0 5
65058: PUSH
65059: LD_VAR 0 2
65063: PPUSH
65064: CALL_OW 251
65068: ST_TO_ADDR
// if not x or not y then
65069: LD_VAR 0 4
65073: NOT
65074: PUSH
65075: LD_VAR 0 5
65079: NOT
65080: OR
65081: IFFALSE 65085
// exit ;
65083: GO 65177
// if GetTaskList ( unit ) then
65085: LD_VAR 0 1
65089: PPUSH
65090: CALL_OW 437
65094: IFFALSE 65177
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65096: LD_STRING e
65098: PUSH
65099: LD_VAR 0 1
65103: PPUSH
65104: CALL_OW 437
65108: PUSH
65109: LD_INT 1
65111: ARRAY
65112: PUSH
65113: LD_INT 1
65115: ARRAY
65116: EQUAL
65117: PUSH
65118: LD_VAR 0 4
65122: PUSH
65123: LD_VAR 0 1
65127: PPUSH
65128: CALL_OW 437
65132: PUSH
65133: LD_INT 1
65135: ARRAY
65136: PUSH
65137: LD_INT 2
65139: ARRAY
65140: EQUAL
65141: AND
65142: PUSH
65143: LD_VAR 0 5
65147: PUSH
65148: LD_VAR 0 1
65152: PPUSH
65153: CALL_OW 437
65157: PUSH
65158: LD_INT 1
65160: ARRAY
65161: PUSH
65162: LD_INT 3
65164: ARRAY
65165: EQUAL
65166: AND
65167: IFFALSE 65177
// result := true end ;
65169: LD_ADDR_VAR 0 3
65173: PUSH
65174: LD_INT 1
65176: ST_TO_ADDR
// end ;
65177: LD_VAR 0 3
65181: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65182: LD_INT 0
65184: PPUSH
// result := false ;
65185: LD_ADDR_VAR 0 4
65189: PUSH
65190: LD_INT 0
65192: ST_TO_ADDR
// if GetTaskList ( unit ) then
65193: LD_VAR 0 1
65197: PPUSH
65198: CALL_OW 437
65202: IFFALSE 65285
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65204: LD_STRING M
65206: PUSH
65207: LD_VAR 0 1
65211: PPUSH
65212: CALL_OW 437
65216: PUSH
65217: LD_INT 1
65219: ARRAY
65220: PUSH
65221: LD_INT 1
65223: ARRAY
65224: EQUAL
65225: PUSH
65226: LD_VAR 0 2
65230: PUSH
65231: LD_VAR 0 1
65235: PPUSH
65236: CALL_OW 437
65240: PUSH
65241: LD_INT 1
65243: ARRAY
65244: PUSH
65245: LD_INT 2
65247: ARRAY
65248: EQUAL
65249: AND
65250: PUSH
65251: LD_VAR 0 3
65255: PUSH
65256: LD_VAR 0 1
65260: PPUSH
65261: CALL_OW 437
65265: PUSH
65266: LD_INT 1
65268: ARRAY
65269: PUSH
65270: LD_INT 3
65272: ARRAY
65273: EQUAL
65274: AND
65275: IFFALSE 65285
// result := true ;
65277: LD_ADDR_VAR 0 4
65281: PUSH
65282: LD_INT 1
65284: ST_TO_ADDR
// end ; end ;
65285: LD_VAR 0 4
65289: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65290: LD_INT 0
65292: PPUSH
65293: PPUSH
65294: PPUSH
65295: PPUSH
// if not unit or not area then
65296: LD_VAR 0 1
65300: NOT
65301: PUSH
65302: LD_VAR 0 2
65306: NOT
65307: OR
65308: IFFALSE 65312
// exit ;
65310: GO 65488
// tmp := AreaToList ( area , i ) ;
65312: LD_ADDR_VAR 0 6
65316: PUSH
65317: LD_VAR 0 2
65321: PPUSH
65322: LD_VAR 0 5
65326: PPUSH
65327: CALL_OW 517
65331: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65332: LD_ADDR_VAR 0 5
65336: PUSH
65337: DOUBLE
65338: LD_INT 1
65340: DEC
65341: ST_TO_ADDR
65342: LD_VAR 0 6
65346: PUSH
65347: LD_INT 1
65349: ARRAY
65350: PUSH
65351: FOR_TO
65352: IFFALSE 65486
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65354: LD_ADDR_VAR 0 7
65358: PUSH
65359: LD_VAR 0 6
65363: PUSH
65364: LD_INT 1
65366: ARRAY
65367: PUSH
65368: LD_VAR 0 5
65372: ARRAY
65373: PUSH
65374: LD_VAR 0 6
65378: PUSH
65379: LD_INT 2
65381: ARRAY
65382: PUSH
65383: LD_VAR 0 5
65387: ARRAY
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
65393: LD_INT 92
65395: PUSH
65396: LD_VAR 0 7
65400: PUSH
65401: LD_INT 1
65403: ARRAY
65404: PUSH
65405: LD_VAR 0 7
65409: PUSH
65410: LD_INT 2
65412: ARRAY
65413: PUSH
65414: LD_INT 2
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: PPUSH
65423: CALL_OW 69
65427: PUSH
65428: LD_INT 0
65430: EQUAL
65431: IFFALSE 65484
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65433: LD_VAR 0 1
65437: PPUSH
65438: LD_VAR 0 7
65442: PUSH
65443: LD_INT 1
65445: ARRAY
65446: PPUSH
65447: LD_VAR 0 7
65451: PUSH
65452: LD_INT 2
65454: ARRAY
65455: PPUSH
65456: LD_VAR 0 3
65460: PPUSH
65461: CALL_OW 48
// result := IsPlaced ( unit ) ;
65465: LD_ADDR_VAR 0 4
65469: PUSH
65470: LD_VAR 0 1
65474: PPUSH
65475: CALL_OW 305
65479: ST_TO_ADDR
// exit ;
65480: POP
65481: POP
65482: GO 65488
// end ; end ;
65484: GO 65351
65486: POP
65487: POP
// end ;
65488: LD_VAR 0 4
65492: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65493: LD_INT 0
65495: PPUSH
65496: PPUSH
65497: PPUSH
// if not side or side > 8 then
65498: LD_VAR 0 1
65502: NOT
65503: PUSH
65504: LD_VAR 0 1
65508: PUSH
65509: LD_INT 8
65511: GREATER
65512: OR
65513: IFFALSE 65517
// exit ;
65515: GO 65704
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65517: LD_ADDR_VAR 0 4
65521: PUSH
65522: LD_INT 22
65524: PUSH
65525: LD_VAR 0 1
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 21
65536: PUSH
65537: LD_INT 3
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PPUSH
65548: CALL_OW 69
65552: ST_TO_ADDR
// if not tmp then
65553: LD_VAR 0 4
65557: NOT
65558: IFFALSE 65562
// exit ;
65560: GO 65704
// enable_addtolog := true ;
65562: LD_ADDR_OWVAR 81
65566: PUSH
65567: LD_INT 1
65569: ST_TO_ADDR
// AddToLog ( [ ) ;
65570: LD_STRING [
65572: PPUSH
65573: CALL_OW 561
// for i in tmp do
65577: LD_ADDR_VAR 0 3
65581: PUSH
65582: LD_VAR 0 4
65586: PUSH
65587: FOR_IN
65588: IFFALSE 65695
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65590: LD_STRING [
65592: PUSH
65593: LD_VAR 0 3
65597: PPUSH
65598: CALL_OW 266
65602: STR
65603: PUSH
65604: LD_STRING , 
65606: STR
65607: PUSH
65608: LD_VAR 0 3
65612: PPUSH
65613: CALL_OW 250
65617: STR
65618: PUSH
65619: LD_STRING , 
65621: STR
65622: PUSH
65623: LD_VAR 0 3
65627: PPUSH
65628: CALL_OW 251
65632: STR
65633: PUSH
65634: LD_STRING , 
65636: STR
65637: PUSH
65638: LD_VAR 0 3
65642: PPUSH
65643: CALL_OW 254
65647: STR
65648: PUSH
65649: LD_STRING , 
65651: STR
65652: PUSH
65653: LD_VAR 0 3
65657: PPUSH
65658: LD_INT 1
65660: PPUSH
65661: CALL_OW 268
65665: STR
65666: PUSH
65667: LD_STRING , 
65669: STR
65670: PUSH
65671: LD_VAR 0 3
65675: PPUSH
65676: LD_INT 2
65678: PPUSH
65679: CALL_OW 268
65683: STR
65684: PUSH
65685: LD_STRING ],
65687: STR
65688: PPUSH
65689: CALL_OW 561
// end ;
65693: GO 65587
65695: POP
65696: POP
// AddToLog ( ]; ) ;
65697: LD_STRING ];
65699: PPUSH
65700: CALL_OW 561
// end ;
65704: LD_VAR 0 2
65708: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65709: LD_INT 0
65711: PPUSH
65712: PPUSH
65713: PPUSH
65714: PPUSH
65715: PPUSH
// if not area or not rate or not max then
65716: LD_VAR 0 1
65720: NOT
65721: PUSH
65722: LD_VAR 0 2
65726: NOT
65727: OR
65728: PUSH
65729: LD_VAR 0 4
65733: NOT
65734: OR
65735: IFFALSE 65739
// exit ;
65737: GO 65928
// while 1 do
65739: LD_INT 1
65741: IFFALSE 65928
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65743: LD_ADDR_VAR 0 9
65747: PUSH
65748: LD_VAR 0 1
65752: PPUSH
65753: LD_INT 1
65755: PPUSH
65756: CALL_OW 287
65760: PUSH
65761: LD_INT 10
65763: MUL
65764: ST_TO_ADDR
// r := rate / 10 ;
65765: LD_ADDR_VAR 0 7
65769: PUSH
65770: LD_VAR 0 2
65774: PUSH
65775: LD_INT 10
65777: DIVREAL
65778: ST_TO_ADDR
// time := 1 1$00 ;
65779: LD_ADDR_VAR 0 8
65783: PUSH
65784: LD_INT 2100
65786: ST_TO_ADDR
// if amount < min then
65787: LD_VAR 0 9
65791: PUSH
65792: LD_VAR 0 3
65796: LESS
65797: IFFALSE 65815
// r := r * 2 else
65799: LD_ADDR_VAR 0 7
65803: PUSH
65804: LD_VAR 0 7
65808: PUSH
65809: LD_INT 2
65811: MUL
65812: ST_TO_ADDR
65813: GO 65841
// if amount > max then
65815: LD_VAR 0 9
65819: PUSH
65820: LD_VAR 0 4
65824: GREATER
65825: IFFALSE 65841
// r := r / 2 ;
65827: LD_ADDR_VAR 0 7
65831: PUSH
65832: LD_VAR 0 7
65836: PUSH
65837: LD_INT 2
65839: DIVREAL
65840: ST_TO_ADDR
// time := time / r ;
65841: LD_ADDR_VAR 0 8
65845: PUSH
65846: LD_VAR 0 8
65850: PUSH
65851: LD_VAR 0 7
65855: DIVREAL
65856: ST_TO_ADDR
// if time < 0 then
65857: LD_VAR 0 8
65861: PUSH
65862: LD_INT 0
65864: LESS
65865: IFFALSE 65882
// time := time * - 1 ;
65867: LD_ADDR_VAR 0 8
65871: PUSH
65872: LD_VAR 0 8
65876: PUSH
65877: LD_INT 1
65879: NEG
65880: MUL
65881: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65882: LD_VAR 0 8
65886: PUSH
65887: LD_INT 35
65889: PPUSH
65890: LD_INT 875
65892: PPUSH
65893: CALL_OW 12
65897: PLUS
65898: PPUSH
65899: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65903: LD_INT 1
65905: PPUSH
65906: LD_INT 5
65908: PPUSH
65909: CALL_OW 12
65913: PPUSH
65914: LD_VAR 0 1
65918: PPUSH
65919: LD_INT 1
65921: PPUSH
65922: CALL_OW 55
// end ;
65926: GO 65739
// end ;
65928: LD_VAR 0 5
65932: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65933: LD_INT 0
65935: PPUSH
65936: PPUSH
65937: PPUSH
65938: PPUSH
65939: PPUSH
65940: PPUSH
65941: PPUSH
65942: PPUSH
// if not turrets or not factories then
65943: LD_VAR 0 1
65947: NOT
65948: PUSH
65949: LD_VAR 0 2
65953: NOT
65954: OR
65955: IFFALSE 65959
// exit ;
65957: GO 66266
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65959: LD_ADDR_VAR 0 10
65963: PUSH
65964: LD_INT 5
65966: PUSH
65967: LD_INT 6
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 2
65976: PUSH
65977: LD_INT 4
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 3
65986: PUSH
65987: LD_INT 5
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 24
66001: PUSH
66002: LD_INT 25
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 23
66011: PUSH
66012: LD_INT 27
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 42
66025: PUSH
66026: LD_INT 43
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 44
66035: PUSH
66036: LD_INT 46
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 45
66045: PUSH
66046: LD_INT 47
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: LIST
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: LIST
66062: ST_TO_ADDR
// result := [ ] ;
66063: LD_ADDR_VAR 0 3
66067: PUSH
66068: EMPTY
66069: ST_TO_ADDR
// for i in turrets do
66070: LD_ADDR_VAR 0 4
66074: PUSH
66075: LD_VAR 0 1
66079: PUSH
66080: FOR_IN
66081: IFFALSE 66264
// begin nat := GetNation ( i ) ;
66083: LD_ADDR_VAR 0 7
66087: PUSH
66088: LD_VAR 0 4
66092: PPUSH
66093: CALL_OW 248
66097: ST_TO_ADDR
// weapon := 0 ;
66098: LD_ADDR_VAR 0 8
66102: PUSH
66103: LD_INT 0
66105: ST_TO_ADDR
// if not nat then
66106: LD_VAR 0 7
66110: NOT
66111: IFFALSE 66115
// continue ;
66113: GO 66080
// for j in list [ nat ] do
66115: LD_ADDR_VAR 0 5
66119: PUSH
66120: LD_VAR 0 10
66124: PUSH
66125: LD_VAR 0 7
66129: ARRAY
66130: PUSH
66131: FOR_IN
66132: IFFALSE 66173
// if GetBWeapon ( i ) = j [ 1 ] then
66134: LD_VAR 0 4
66138: PPUSH
66139: CALL_OW 269
66143: PUSH
66144: LD_VAR 0 5
66148: PUSH
66149: LD_INT 1
66151: ARRAY
66152: EQUAL
66153: IFFALSE 66171
// begin weapon := j [ 2 ] ;
66155: LD_ADDR_VAR 0 8
66159: PUSH
66160: LD_VAR 0 5
66164: PUSH
66165: LD_INT 2
66167: ARRAY
66168: ST_TO_ADDR
// break ;
66169: GO 66173
// end ;
66171: GO 66131
66173: POP
66174: POP
// if not weapon then
66175: LD_VAR 0 8
66179: NOT
66180: IFFALSE 66184
// continue ;
66182: GO 66080
// for k in factories do
66184: LD_ADDR_VAR 0 6
66188: PUSH
66189: LD_VAR 0 2
66193: PUSH
66194: FOR_IN
66195: IFFALSE 66260
// begin weapons := AvailableWeaponList ( k ) ;
66197: LD_ADDR_VAR 0 9
66201: PUSH
66202: LD_VAR 0 6
66206: PPUSH
66207: CALL_OW 478
66211: ST_TO_ADDR
// if not weapons then
66212: LD_VAR 0 9
66216: NOT
66217: IFFALSE 66221
// continue ;
66219: GO 66194
// if weapon in weapons then
66221: LD_VAR 0 8
66225: PUSH
66226: LD_VAR 0 9
66230: IN
66231: IFFALSE 66258
// begin result := [ i , weapon ] ;
66233: LD_ADDR_VAR 0 3
66237: PUSH
66238: LD_VAR 0 4
66242: PUSH
66243: LD_VAR 0 8
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: ST_TO_ADDR
// exit ;
66252: POP
66253: POP
66254: POP
66255: POP
66256: GO 66266
// end ; end ;
66258: GO 66194
66260: POP
66261: POP
// end ;
66262: GO 66080
66264: POP
66265: POP
// end ;
66266: LD_VAR 0 3
66270: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66271: LD_INT 0
66273: PPUSH
// if not side or side > 8 then
66274: LD_VAR 0 3
66278: NOT
66279: PUSH
66280: LD_VAR 0 3
66284: PUSH
66285: LD_INT 8
66287: GREATER
66288: OR
66289: IFFALSE 66293
// exit ;
66291: GO 66352
// if not range then
66293: LD_VAR 0 4
66297: NOT
66298: IFFALSE 66309
// range := - 12 ;
66300: LD_ADDR_VAR 0 4
66304: PUSH
66305: LD_INT 12
66307: NEG
66308: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66309: LD_VAR 0 1
66313: PPUSH
66314: LD_VAR 0 2
66318: PPUSH
66319: LD_VAR 0 3
66323: PPUSH
66324: LD_VAR 0 4
66328: PPUSH
66329: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66333: LD_VAR 0 1
66337: PPUSH
66338: LD_VAR 0 2
66342: PPUSH
66343: LD_VAR 0 3
66347: PPUSH
66348: CALL_OW 331
// end ;
66352: LD_VAR 0 5
66356: RET
// export function Video ( mode ) ; begin
66357: LD_INT 0
66359: PPUSH
// ingame_video = mode ;
66360: LD_ADDR_OWVAR 52
66364: PUSH
66365: LD_VAR 0 1
66369: ST_TO_ADDR
// interface_hidden = mode ;
66370: LD_ADDR_OWVAR 54
66374: PUSH
66375: LD_VAR 0 1
66379: ST_TO_ADDR
// end ;
66380: LD_VAR 0 2
66384: RET
// export function Join ( array , element ) ; begin
66385: LD_INT 0
66387: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66388: LD_ADDR_VAR 0 3
66392: PUSH
66393: LD_VAR 0 1
66397: PPUSH
66398: LD_VAR 0 1
66402: PUSH
66403: LD_INT 1
66405: PLUS
66406: PPUSH
66407: LD_VAR 0 2
66411: PPUSH
66412: CALL_OW 1
66416: ST_TO_ADDR
// end ;
66417: LD_VAR 0 3
66421: RET
// export function JoinUnion ( array , element ) ; begin
66422: LD_INT 0
66424: PPUSH
// result := array union element ;
66425: LD_ADDR_VAR 0 3
66429: PUSH
66430: LD_VAR 0 1
66434: PUSH
66435: LD_VAR 0 2
66439: UNION
66440: ST_TO_ADDR
// end ;
66441: LD_VAR 0 3
66445: RET
// export function GetBehemoths ( side ) ; begin
66446: LD_INT 0
66448: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66449: LD_ADDR_VAR 0 2
66453: PUSH
66454: LD_INT 22
66456: PUSH
66457: LD_VAR 0 1
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 31
66468: PUSH
66469: LD_INT 25
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PPUSH
66480: CALL_OW 69
66484: ST_TO_ADDR
// end ;
66485: LD_VAR 0 2
66489: RET
// export function Shuffle ( array ) ; var i , index ; begin
66490: LD_INT 0
66492: PPUSH
66493: PPUSH
66494: PPUSH
// result := [ ] ;
66495: LD_ADDR_VAR 0 2
66499: PUSH
66500: EMPTY
66501: ST_TO_ADDR
// if not array then
66502: LD_VAR 0 1
66506: NOT
66507: IFFALSE 66511
// exit ;
66509: GO 66610
// Randomize ;
66511: CALL_OW 10
// for i = array downto 1 do
66515: LD_ADDR_VAR 0 3
66519: PUSH
66520: DOUBLE
66521: LD_VAR 0 1
66525: INC
66526: ST_TO_ADDR
66527: LD_INT 1
66529: PUSH
66530: FOR_DOWNTO
66531: IFFALSE 66608
// begin index := rand ( 1 , array ) ;
66533: LD_ADDR_VAR 0 4
66537: PUSH
66538: LD_INT 1
66540: PPUSH
66541: LD_VAR 0 1
66545: PPUSH
66546: CALL_OW 12
66550: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66551: LD_ADDR_VAR 0 2
66555: PUSH
66556: LD_VAR 0 2
66560: PPUSH
66561: LD_VAR 0 2
66565: PUSH
66566: LD_INT 1
66568: PLUS
66569: PPUSH
66570: LD_VAR 0 1
66574: PUSH
66575: LD_VAR 0 4
66579: ARRAY
66580: PPUSH
66581: CALL_OW 2
66585: ST_TO_ADDR
// array := Delete ( array , index ) ;
66586: LD_ADDR_VAR 0 1
66590: PUSH
66591: LD_VAR 0 1
66595: PPUSH
66596: LD_VAR 0 4
66600: PPUSH
66601: CALL_OW 3
66605: ST_TO_ADDR
// end ;
66606: GO 66530
66608: POP
66609: POP
// end ;
66610: LD_VAR 0 2
66614: RET
// export function GetBaseMaterials ( base ) ; begin
66615: LD_INT 0
66617: PPUSH
// result := [ 0 , 0 , 0 ] ;
66618: LD_ADDR_VAR 0 2
66622: PUSH
66623: LD_INT 0
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: LD_INT 0
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: LIST
66636: ST_TO_ADDR
// if not base then
66637: LD_VAR 0 1
66641: NOT
66642: IFFALSE 66646
// exit ;
66644: GO 66695
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66646: LD_ADDR_VAR 0 2
66650: PUSH
66651: LD_VAR 0 1
66655: PPUSH
66656: LD_INT 1
66658: PPUSH
66659: CALL_OW 275
66663: PUSH
66664: LD_VAR 0 1
66668: PPUSH
66669: LD_INT 2
66671: PPUSH
66672: CALL_OW 275
66676: PUSH
66677: LD_VAR 0 1
66681: PPUSH
66682: LD_INT 3
66684: PPUSH
66685: CALL_OW 275
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: LIST
66694: ST_TO_ADDR
// end ;
66695: LD_VAR 0 2
66699: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66700: LD_INT 0
66702: PPUSH
66703: PPUSH
// result := array ;
66704: LD_ADDR_VAR 0 3
66708: PUSH
66709: LD_VAR 0 1
66713: ST_TO_ADDR
// if size >= result then
66714: LD_VAR 0 2
66718: PUSH
66719: LD_VAR 0 3
66723: GREATEREQUAL
66724: IFFALSE 66728
// exit ;
66726: GO 66778
// if size then
66728: LD_VAR 0 2
66732: IFFALSE 66778
// for i := array downto size do
66734: LD_ADDR_VAR 0 4
66738: PUSH
66739: DOUBLE
66740: LD_VAR 0 1
66744: INC
66745: ST_TO_ADDR
66746: LD_VAR 0 2
66750: PUSH
66751: FOR_DOWNTO
66752: IFFALSE 66776
// result := Delete ( result , result ) ;
66754: LD_ADDR_VAR 0 3
66758: PUSH
66759: LD_VAR 0 3
66763: PPUSH
66764: LD_VAR 0 3
66768: PPUSH
66769: CALL_OW 3
66773: ST_TO_ADDR
66774: GO 66751
66776: POP
66777: POP
// end ;
66778: LD_VAR 0 3
66782: RET
// export function ComExit ( unit ) ; var tmp ; begin
66783: LD_INT 0
66785: PPUSH
66786: PPUSH
// if not IsInUnit ( unit ) then
66787: LD_VAR 0 1
66791: PPUSH
66792: CALL_OW 310
66796: NOT
66797: IFFALSE 66801
// exit ;
66799: GO 66861
// tmp := IsInUnit ( unit ) ;
66801: LD_ADDR_VAR 0 3
66805: PUSH
66806: LD_VAR 0 1
66810: PPUSH
66811: CALL_OW 310
66815: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66816: LD_VAR 0 3
66820: PPUSH
66821: CALL_OW 247
66825: PUSH
66826: LD_INT 2
66828: EQUAL
66829: IFFALSE 66842
// ComExitVehicle ( unit ) else
66831: LD_VAR 0 1
66835: PPUSH
66836: CALL_OW 121
66840: GO 66851
// ComExitBuilding ( unit ) ;
66842: LD_VAR 0 1
66846: PPUSH
66847: CALL_OW 122
// result := tmp ;
66851: LD_ADDR_VAR 0 2
66855: PUSH
66856: LD_VAR 0 3
66860: ST_TO_ADDR
// end ;
66861: LD_VAR 0 2
66865: RET
// export function ComExitAll ( units ) ; var i ; begin
66866: LD_INT 0
66868: PPUSH
66869: PPUSH
// if not units then
66870: LD_VAR 0 1
66874: NOT
66875: IFFALSE 66879
// exit ;
66877: GO 66905
// for i in units do
66879: LD_ADDR_VAR 0 3
66883: PUSH
66884: LD_VAR 0 1
66888: PUSH
66889: FOR_IN
66890: IFFALSE 66903
// ComExit ( i ) ;
66892: LD_VAR 0 3
66896: PPUSH
66897: CALL 66783 0 1
66901: GO 66889
66903: POP
66904: POP
// end ;
66905: LD_VAR 0 2
66909: RET
// export function ResetHc ; begin
66910: LD_INT 0
66912: PPUSH
// InitHc ;
66913: CALL_OW 19
// hc_importance := 0 ;
66917: LD_ADDR_OWVAR 32
66921: PUSH
66922: LD_INT 0
66924: ST_TO_ADDR
// end ;
66925: LD_VAR 0 1
66929: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66930: LD_INT 0
66932: PPUSH
66933: PPUSH
66934: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66935: LD_ADDR_VAR 0 6
66939: PUSH
66940: LD_VAR 0 1
66944: PUSH
66945: LD_VAR 0 3
66949: PLUS
66950: PUSH
66951: LD_INT 2
66953: DIV
66954: ST_TO_ADDR
// if _x < 0 then
66955: LD_VAR 0 6
66959: PUSH
66960: LD_INT 0
66962: LESS
66963: IFFALSE 66980
// _x := _x * - 1 ;
66965: LD_ADDR_VAR 0 6
66969: PUSH
66970: LD_VAR 0 6
66974: PUSH
66975: LD_INT 1
66977: NEG
66978: MUL
66979: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66980: LD_ADDR_VAR 0 7
66984: PUSH
66985: LD_VAR 0 2
66989: PUSH
66990: LD_VAR 0 4
66994: PLUS
66995: PUSH
66996: LD_INT 2
66998: DIV
66999: ST_TO_ADDR
// if _y < 0 then
67000: LD_VAR 0 7
67004: PUSH
67005: LD_INT 0
67007: LESS
67008: IFFALSE 67025
// _y := _y * - 1 ;
67010: LD_ADDR_VAR 0 7
67014: PUSH
67015: LD_VAR 0 7
67019: PUSH
67020: LD_INT 1
67022: NEG
67023: MUL
67024: ST_TO_ADDR
// result := [ _x , _y ] ;
67025: LD_ADDR_VAR 0 5
67029: PUSH
67030: LD_VAR 0 6
67034: PUSH
67035: LD_VAR 0 7
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: ST_TO_ADDR
// end ;
67044: LD_VAR 0 5
67048: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67049: LD_INT 0
67051: PPUSH
67052: PPUSH
67053: PPUSH
67054: PPUSH
// task := GetTaskList ( unit ) ;
67055: LD_ADDR_VAR 0 7
67059: PUSH
67060: LD_VAR 0 1
67064: PPUSH
67065: CALL_OW 437
67069: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67070: LD_VAR 0 7
67074: NOT
67075: PUSH
67076: LD_VAR 0 1
67080: PPUSH
67081: LD_VAR 0 2
67085: PPUSH
67086: CALL_OW 308
67090: NOT
67091: AND
67092: IFFALSE 67096
// exit ;
67094: GO 67214
// if IsInArea ( unit , area ) then
67096: LD_VAR 0 1
67100: PPUSH
67101: LD_VAR 0 2
67105: PPUSH
67106: CALL_OW 308
67110: IFFALSE 67128
// begin ComMoveToArea ( unit , goAway ) ;
67112: LD_VAR 0 1
67116: PPUSH
67117: LD_VAR 0 3
67121: PPUSH
67122: CALL_OW 113
// exit ;
67126: GO 67214
// end ; if task [ 1 ] [ 1 ] <> M then
67128: LD_VAR 0 7
67132: PUSH
67133: LD_INT 1
67135: ARRAY
67136: PUSH
67137: LD_INT 1
67139: ARRAY
67140: PUSH
67141: LD_STRING M
67143: NONEQUAL
67144: IFFALSE 67148
// exit ;
67146: GO 67214
// x := task [ 1 ] [ 2 ] ;
67148: LD_ADDR_VAR 0 5
67152: PUSH
67153: LD_VAR 0 7
67157: PUSH
67158: LD_INT 1
67160: ARRAY
67161: PUSH
67162: LD_INT 2
67164: ARRAY
67165: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67166: LD_ADDR_VAR 0 6
67170: PUSH
67171: LD_VAR 0 7
67175: PUSH
67176: LD_INT 1
67178: ARRAY
67179: PUSH
67180: LD_INT 3
67182: ARRAY
67183: ST_TO_ADDR
// if InArea ( x , y , area ) then
67184: LD_VAR 0 5
67188: PPUSH
67189: LD_VAR 0 6
67193: PPUSH
67194: LD_VAR 0 2
67198: PPUSH
67199: CALL_OW 309
67203: IFFALSE 67214
// ComStop ( unit ) ;
67205: LD_VAR 0 1
67209: PPUSH
67210: CALL_OW 141
// end ;
67214: LD_VAR 0 4
67218: RET
// export function Abs ( value ) ; begin
67219: LD_INT 0
67221: PPUSH
// result := value ;
67222: LD_ADDR_VAR 0 2
67226: PUSH
67227: LD_VAR 0 1
67231: ST_TO_ADDR
// if value < 0 then
67232: LD_VAR 0 1
67236: PUSH
67237: LD_INT 0
67239: LESS
67240: IFFALSE 67257
// result := value * - 1 ;
67242: LD_ADDR_VAR 0 2
67246: PUSH
67247: LD_VAR 0 1
67251: PUSH
67252: LD_INT 1
67254: NEG
67255: MUL
67256: ST_TO_ADDR
// end ;
67257: LD_VAR 0 2
67261: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67262: LD_INT 0
67264: PPUSH
67265: PPUSH
67266: PPUSH
67267: PPUSH
67268: PPUSH
67269: PPUSH
67270: PPUSH
67271: PPUSH
// if not unit or not building then
67272: LD_VAR 0 1
67276: NOT
67277: PUSH
67278: LD_VAR 0 2
67282: NOT
67283: OR
67284: IFFALSE 67288
// exit ;
67286: GO 67514
// x := GetX ( building ) ;
67288: LD_ADDR_VAR 0 4
67292: PUSH
67293: LD_VAR 0 2
67297: PPUSH
67298: CALL_OW 250
67302: ST_TO_ADDR
// y := GetY ( building ) ;
67303: LD_ADDR_VAR 0 6
67307: PUSH
67308: LD_VAR 0 2
67312: PPUSH
67313: CALL_OW 251
67317: ST_TO_ADDR
// d := GetDir ( building ) ;
67318: LD_ADDR_VAR 0 8
67322: PUSH
67323: LD_VAR 0 2
67327: PPUSH
67328: CALL_OW 254
67332: ST_TO_ADDR
// r := 4 ;
67333: LD_ADDR_VAR 0 9
67337: PUSH
67338: LD_INT 4
67340: ST_TO_ADDR
// for i := 1 to 5 do
67341: LD_ADDR_VAR 0 10
67345: PUSH
67346: DOUBLE
67347: LD_INT 1
67349: DEC
67350: ST_TO_ADDR
67351: LD_INT 5
67353: PUSH
67354: FOR_TO
67355: IFFALSE 67512
// begin _x := ShiftX ( x , d , r + i ) ;
67357: LD_ADDR_VAR 0 5
67361: PUSH
67362: LD_VAR 0 4
67366: PPUSH
67367: LD_VAR 0 8
67371: PPUSH
67372: LD_VAR 0 9
67376: PUSH
67377: LD_VAR 0 10
67381: PLUS
67382: PPUSH
67383: CALL_OW 272
67387: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67388: LD_ADDR_VAR 0 7
67392: PUSH
67393: LD_VAR 0 6
67397: PPUSH
67398: LD_VAR 0 8
67402: PPUSH
67403: LD_VAR 0 9
67407: PUSH
67408: LD_VAR 0 10
67412: PLUS
67413: PPUSH
67414: CALL_OW 273
67418: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67419: LD_VAR 0 5
67423: PPUSH
67424: LD_VAR 0 7
67428: PPUSH
67429: CALL_OW 488
67433: PUSH
67434: LD_VAR 0 5
67438: PPUSH
67439: LD_VAR 0 7
67443: PPUSH
67444: CALL_OW 428
67448: PPUSH
67449: CALL_OW 247
67453: PUSH
67454: LD_INT 3
67456: PUSH
67457: LD_INT 2
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: IN
67464: NOT
67465: AND
67466: IFFALSE 67510
// begin ComMoveXY ( unit , _x , _y ) ;
67468: LD_VAR 0 1
67472: PPUSH
67473: LD_VAR 0 5
67477: PPUSH
67478: LD_VAR 0 7
67482: PPUSH
67483: CALL_OW 111
// result := [ _x , _y ] ;
67487: LD_ADDR_VAR 0 3
67491: PUSH
67492: LD_VAR 0 5
67496: PUSH
67497: LD_VAR 0 7
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: ST_TO_ADDR
// exit ;
67506: POP
67507: POP
67508: GO 67514
// end ; end ;
67510: GO 67354
67512: POP
67513: POP
// end ;
67514: LD_VAR 0 3
67518: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67519: LD_INT 0
67521: PPUSH
67522: PPUSH
67523: PPUSH
// result := 0 ;
67524: LD_ADDR_VAR 0 3
67528: PUSH
67529: LD_INT 0
67531: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67532: LD_VAR 0 1
67536: PUSH
67537: LD_INT 0
67539: LESS
67540: PUSH
67541: LD_VAR 0 1
67545: PUSH
67546: LD_INT 8
67548: GREATER
67549: OR
67550: PUSH
67551: LD_VAR 0 2
67555: PUSH
67556: LD_INT 0
67558: LESS
67559: OR
67560: PUSH
67561: LD_VAR 0 2
67565: PUSH
67566: LD_INT 8
67568: GREATER
67569: OR
67570: IFFALSE 67574
// exit ;
67572: GO 67649
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67574: LD_ADDR_VAR 0 4
67578: PUSH
67579: LD_INT 22
67581: PUSH
67582: LD_VAR 0 2
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PPUSH
67591: CALL_OW 69
67595: PUSH
67596: FOR_IN
67597: IFFALSE 67647
// begin un := UnitShoot ( i ) ;
67599: LD_ADDR_VAR 0 5
67603: PUSH
67604: LD_VAR 0 4
67608: PPUSH
67609: CALL_OW 504
67613: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67614: LD_VAR 0 5
67618: PPUSH
67619: CALL_OW 255
67623: PUSH
67624: LD_VAR 0 1
67628: EQUAL
67629: IFFALSE 67645
// begin result := un ;
67631: LD_ADDR_VAR 0 3
67635: PUSH
67636: LD_VAR 0 5
67640: ST_TO_ADDR
// exit ;
67641: POP
67642: POP
67643: GO 67649
// end ; end ;
67645: GO 67596
67647: POP
67648: POP
// end ;
67649: LD_VAR 0 3
67653: RET
// export function GetCargoBay ( units ) ; begin
67654: LD_INT 0
67656: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67657: LD_ADDR_VAR 0 2
67661: PUSH
67662: LD_VAR 0 1
67666: PPUSH
67667: LD_INT 2
67669: PUSH
67670: LD_INT 34
67672: PUSH
67673: LD_INT 12
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 34
67682: PUSH
67683: LD_INT 51
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 34
67692: PUSH
67693: LD_INT 32
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 34
67702: PUSH
67703: LD_INT 89
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: PPUSH
67717: CALL_OW 72
67721: ST_TO_ADDR
// end ;
67722: LD_VAR 0 2
67726: RET
// export function Negate ( value ) ; begin
67727: LD_INT 0
67729: PPUSH
// result := not value ;
67730: LD_ADDR_VAR 0 2
67734: PUSH
67735: LD_VAR 0 1
67739: NOT
67740: ST_TO_ADDR
// end ;
67741: LD_VAR 0 2
67745: RET
// export function Inc ( value ) ; begin
67746: LD_INT 0
67748: PPUSH
// result := value + 1 ;
67749: LD_ADDR_VAR 0 2
67753: PUSH
67754: LD_VAR 0 1
67758: PUSH
67759: LD_INT 1
67761: PLUS
67762: ST_TO_ADDR
// end ;
67763: LD_VAR 0 2
67767: RET
// export function Dec ( value ) ; begin
67768: LD_INT 0
67770: PPUSH
// result := value - 1 ;
67771: LD_ADDR_VAR 0 2
67775: PUSH
67776: LD_VAR 0 1
67780: PUSH
67781: LD_INT 1
67783: MINUS
67784: ST_TO_ADDR
// end ;
67785: LD_VAR 0 2
67789: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67790: LD_INT 0
67792: PPUSH
67793: PPUSH
67794: PPUSH
67795: PPUSH
67796: PPUSH
67797: PPUSH
67798: PPUSH
67799: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67800: LD_VAR 0 1
67804: PPUSH
67805: LD_VAR 0 2
67809: PPUSH
67810: CALL_OW 488
67814: NOT
67815: PUSH
67816: LD_VAR 0 3
67820: PPUSH
67821: LD_VAR 0 4
67825: PPUSH
67826: CALL_OW 488
67830: NOT
67831: OR
67832: IFFALSE 67845
// begin result := - 1 ;
67834: LD_ADDR_VAR 0 5
67838: PUSH
67839: LD_INT 1
67841: NEG
67842: ST_TO_ADDR
// exit ;
67843: GO 68080
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67845: LD_ADDR_VAR 0 12
67849: PUSH
67850: LD_VAR 0 1
67854: PPUSH
67855: LD_VAR 0 2
67859: PPUSH
67860: LD_VAR 0 3
67864: PPUSH
67865: LD_VAR 0 4
67869: PPUSH
67870: CALL 66930 0 4
67874: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67875: LD_ADDR_VAR 0 11
67879: PUSH
67880: LD_VAR 0 1
67884: PPUSH
67885: LD_VAR 0 2
67889: PPUSH
67890: LD_VAR 0 12
67894: PUSH
67895: LD_INT 1
67897: ARRAY
67898: PPUSH
67899: LD_VAR 0 12
67903: PUSH
67904: LD_INT 2
67906: ARRAY
67907: PPUSH
67908: CALL_OW 298
67912: ST_TO_ADDR
// distance := 9999 ;
67913: LD_ADDR_VAR 0 10
67917: PUSH
67918: LD_INT 9999
67920: ST_TO_ADDR
// for i := 0 to 5 do
67921: LD_ADDR_VAR 0 6
67925: PUSH
67926: DOUBLE
67927: LD_INT 0
67929: DEC
67930: ST_TO_ADDR
67931: LD_INT 5
67933: PUSH
67934: FOR_TO
67935: IFFALSE 68078
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67937: LD_ADDR_VAR 0 7
67941: PUSH
67942: LD_VAR 0 1
67946: PPUSH
67947: LD_VAR 0 6
67951: PPUSH
67952: LD_VAR 0 11
67956: PPUSH
67957: CALL_OW 272
67961: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67962: LD_ADDR_VAR 0 8
67966: PUSH
67967: LD_VAR 0 2
67971: PPUSH
67972: LD_VAR 0 6
67976: PPUSH
67977: LD_VAR 0 11
67981: PPUSH
67982: CALL_OW 273
67986: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67987: LD_VAR 0 7
67991: PPUSH
67992: LD_VAR 0 8
67996: PPUSH
67997: CALL_OW 488
68001: NOT
68002: IFFALSE 68006
// continue ;
68004: GO 67934
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68006: LD_ADDR_VAR 0 9
68010: PUSH
68011: LD_VAR 0 12
68015: PUSH
68016: LD_INT 1
68018: ARRAY
68019: PPUSH
68020: LD_VAR 0 12
68024: PUSH
68025: LD_INT 2
68027: ARRAY
68028: PPUSH
68029: LD_VAR 0 7
68033: PPUSH
68034: LD_VAR 0 8
68038: PPUSH
68039: CALL_OW 298
68043: ST_TO_ADDR
// if tmp < distance then
68044: LD_VAR 0 9
68048: PUSH
68049: LD_VAR 0 10
68053: LESS
68054: IFFALSE 68076
// begin result := i ;
68056: LD_ADDR_VAR 0 5
68060: PUSH
68061: LD_VAR 0 6
68065: ST_TO_ADDR
// distance := tmp ;
68066: LD_ADDR_VAR 0 10
68070: PUSH
68071: LD_VAR 0 9
68075: ST_TO_ADDR
// end ; end ;
68076: GO 67934
68078: POP
68079: POP
// end ;
68080: LD_VAR 0 5
68084: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68085: LD_INT 0
68087: PPUSH
68088: PPUSH
// if not driver or not IsInUnit ( driver ) then
68089: LD_VAR 0 1
68093: NOT
68094: PUSH
68095: LD_VAR 0 1
68099: PPUSH
68100: CALL_OW 310
68104: NOT
68105: OR
68106: IFFALSE 68110
// exit ;
68108: GO 68200
// vehicle := IsInUnit ( driver ) ;
68110: LD_ADDR_VAR 0 3
68114: PUSH
68115: LD_VAR 0 1
68119: PPUSH
68120: CALL_OW 310
68124: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68125: LD_VAR 0 1
68129: PPUSH
68130: LD_STRING \
68132: PUSH
68133: LD_INT 0
68135: PUSH
68136: LD_INT 0
68138: PUSH
68139: LD_INT 0
68141: PUSH
68142: LD_INT 0
68144: PUSH
68145: LD_INT 0
68147: PUSH
68148: LD_INT 0
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: PUSH
68160: LD_STRING E
68162: PUSH
68163: LD_INT 0
68165: PUSH
68166: LD_INT 0
68168: PUSH
68169: LD_VAR 0 3
68173: PUSH
68174: LD_INT 0
68176: PUSH
68177: LD_INT 0
68179: PUSH
68180: LD_INT 0
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PPUSH
68196: CALL_OW 446
// end ;
68200: LD_VAR 0 2
68204: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68205: LD_INT 0
68207: PPUSH
68208: PPUSH
// if not driver or not IsInUnit ( driver ) then
68209: LD_VAR 0 1
68213: NOT
68214: PUSH
68215: LD_VAR 0 1
68219: PPUSH
68220: CALL_OW 310
68224: NOT
68225: OR
68226: IFFALSE 68230
// exit ;
68228: GO 68320
// vehicle := IsInUnit ( driver ) ;
68230: LD_ADDR_VAR 0 3
68234: PUSH
68235: LD_VAR 0 1
68239: PPUSH
68240: CALL_OW 310
68244: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68245: LD_VAR 0 1
68249: PPUSH
68250: LD_STRING \
68252: PUSH
68253: LD_INT 0
68255: PUSH
68256: LD_INT 0
68258: PUSH
68259: LD_INT 0
68261: PUSH
68262: LD_INT 0
68264: PUSH
68265: LD_INT 0
68267: PUSH
68268: LD_INT 0
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: PUSH
68280: LD_STRING E
68282: PUSH
68283: LD_INT 0
68285: PUSH
68286: LD_INT 0
68288: PUSH
68289: LD_VAR 0 3
68293: PUSH
68294: LD_INT 0
68296: PUSH
68297: LD_INT 0
68299: PUSH
68300: LD_INT 0
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PPUSH
68316: CALL_OW 447
// end ;
68320: LD_VAR 0 2
68324: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68325: LD_INT 0
68327: PPUSH
68328: PPUSH
68329: PPUSH
// tmp := [ ] ;
68330: LD_ADDR_VAR 0 5
68334: PUSH
68335: EMPTY
68336: ST_TO_ADDR
// for i in units do
68337: LD_ADDR_VAR 0 4
68341: PUSH
68342: LD_VAR 0 1
68346: PUSH
68347: FOR_IN
68348: IFFALSE 68386
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68350: LD_ADDR_VAR 0 5
68354: PUSH
68355: LD_VAR 0 5
68359: PPUSH
68360: LD_VAR 0 5
68364: PUSH
68365: LD_INT 1
68367: PLUS
68368: PPUSH
68369: LD_VAR 0 4
68373: PPUSH
68374: CALL_OW 256
68378: PPUSH
68379: CALL_OW 2
68383: ST_TO_ADDR
68384: GO 68347
68386: POP
68387: POP
// if not tmp then
68388: LD_VAR 0 5
68392: NOT
68393: IFFALSE 68397
// exit ;
68395: GO 68445
// if asc then
68397: LD_VAR 0 2
68401: IFFALSE 68425
// result := SortListByListAsc ( units , tmp ) else
68403: LD_ADDR_VAR 0 3
68407: PUSH
68408: LD_VAR 0 1
68412: PPUSH
68413: LD_VAR 0 5
68417: PPUSH
68418: CALL_OW 76
68422: ST_TO_ADDR
68423: GO 68445
// result := SortListByListDesc ( units , tmp ) ;
68425: LD_ADDR_VAR 0 3
68429: PUSH
68430: LD_VAR 0 1
68434: PPUSH
68435: LD_VAR 0 5
68439: PPUSH
68440: CALL_OW 77
68444: ST_TO_ADDR
// end ;
68445: LD_VAR 0 3
68449: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68450: LD_INT 0
68452: PPUSH
68453: PPUSH
// task := GetTaskList ( mech ) ;
68454: LD_ADDR_VAR 0 4
68458: PUSH
68459: LD_VAR 0 1
68463: PPUSH
68464: CALL_OW 437
68468: ST_TO_ADDR
// if not task then
68469: LD_VAR 0 4
68473: NOT
68474: IFFALSE 68478
// exit ;
68476: GO 68520
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68478: LD_ADDR_VAR 0 3
68482: PUSH
68483: LD_VAR 0 4
68487: PUSH
68488: LD_INT 1
68490: ARRAY
68491: PUSH
68492: LD_INT 1
68494: ARRAY
68495: PUSH
68496: LD_STRING r
68498: EQUAL
68499: PUSH
68500: LD_VAR 0 4
68504: PUSH
68505: LD_INT 1
68507: ARRAY
68508: PUSH
68509: LD_INT 4
68511: ARRAY
68512: PUSH
68513: LD_VAR 0 2
68517: EQUAL
68518: AND
68519: ST_TO_ADDR
// end ;
68520: LD_VAR 0 3
68524: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68525: LD_INT 0
68527: PPUSH
// SetDir ( unit , d ) ;
68528: LD_VAR 0 1
68532: PPUSH
68533: LD_VAR 0 4
68537: PPUSH
68538: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68542: LD_VAR 0 1
68546: PPUSH
68547: LD_VAR 0 2
68551: PPUSH
68552: LD_VAR 0 3
68556: PPUSH
68557: LD_VAR 0 5
68561: PPUSH
68562: CALL_OW 48
// end ;
68566: LD_VAR 0 6
68570: RET
// export function ToNaturalNumber ( number ) ; begin
68571: LD_INT 0
68573: PPUSH
// result := number div 1 ;
68574: LD_ADDR_VAR 0 2
68578: PUSH
68579: LD_VAR 0 1
68583: PUSH
68584: LD_INT 1
68586: DIV
68587: ST_TO_ADDR
// if number < 0 then
68588: LD_VAR 0 1
68592: PUSH
68593: LD_INT 0
68595: LESS
68596: IFFALSE 68606
// result := 0 ;
68598: LD_ADDR_VAR 0 2
68602: PUSH
68603: LD_INT 0
68605: ST_TO_ADDR
// end ;
68606: LD_VAR 0 2
68610: RET
// export function SortByClass ( units , class ) ; var un ; begin
68611: LD_INT 0
68613: PPUSH
68614: PPUSH
// if not units or not class then
68615: LD_VAR 0 1
68619: NOT
68620: PUSH
68621: LD_VAR 0 2
68625: NOT
68626: OR
68627: IFFALSE 68631
// exit ;
68629: GO 68726
// result := [ ] ;
68631: LD_ADDR_VAR 0 3
68635: PUSH
68636: EMPTY
68637: ST_TO_ADDR
// for un in units do
68638: LD_ADDR_VAR 0 4
68642: PUSH
68643: LD_VAR 0 1
68647: PUSH
68648: FOR_IN
68649: IFFALSE 68724
// if GetClass ( un ) = class then
68651: LD_VAR 0 4
68655: PPUSH
68656: CALL_OW 257
68660: PUSH
68661: LD_VAR 0 2
68665: EQUAL
68666: IFFALSE 68693
// result := Insert ( result , 1 , un ) else
68668: LD_ADDR_VAR 0 3
68672: PUSH
68673: LD_VAR 0 3
68677: PPUSH
68678: LD_INT 1
68680: PPUSH
68681: LD_VAR 0 4
68685: PPUSH
68686: CALL_OW 2
68690: ST_TO_ADDR
68691: GO 68722
// result := Replace ( result , result + 1 , un ) ;
68693: LD_ADDR_VAR 0 3
68697: PUSH
68698: LD_VAR 0 3
68702: PPUSH
68703: LD_VAR 0 3
68707: PUSH
68708: LD_INT 1
68710: PLUS
68711: PPUSH
68712: LD_VAR 0 4
68716: PPUSH
68717: CALL_OW 1
68721: ST_TO_ADDR
68722: GO 68648
68724: POP
68725: POP
// end ;
68726: LD_VAR 0 3
68730: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68731: LD_INT 0
68733: PPUSH
68734: PPUSH
68735: PPUSH
68736: PPUSH
68737: PPUSH
68738: PPUSH
68739: PPUSH
// result := [ ] ;
68740: LD_ADDR_VAR 0 4
68744: PUSH
68745: EMPTY
68746: ST_TO_ADDR
// if x - r < 0 then
68747: LD_VAR 0 1
68751: PUSH
68752: LD_VAR 0 3
68756: MINUS
68757: PUSH
68758: LD_INT 0
68760: LESS
68761: IFFALSE 68773
// min_x := 0 else
68763: LD_ADDR_VAR 0 8
68767: PUSH
68768: LD_INT 0
68770: ST_TO_ADDR
68771: GO 68789
// min_x := x - r ;
68773: LD_ADDR_VAR 0 8
68777: PUSH
68778: LD_VAR 0 1
68782: PUSH
68783: LD_VAR 0 3
68787: MINUS
68788: ST_TO_ADDR
// if y - r < 0 then
68789: LD_VAR 0 2
68793: PUSH
68794: LD_VAR 0 3
68798: MINUS
68799: PUSH
68800: LD_INT 0
68802: LESS
68803: IFFALSE 68815
// min_y := 0 else
68805: LD_ADDR_VAR 0 7
68809: PUSH
68810: LD_INT 0
68812: ST_TO_ADDR
68813: GO 68831
// min_y := y - r ;
68815: LD_ADDR_VAR 0 7
68819: PUSH
68820: LD_VAR 0 2
68824: PUSH
68825: LD_VAR 0 3
68829: MINUS
68830: ST_TO_ADDR
// max_x := x + r ;
68831: LD_ADDR_VAR 0 9
68835: PUSH
68836: LD_VAR 0 1
68840: PUSH
68841: LD_VAR 0 3
68845: PLUS
68846: ST_TO_ADDR
// max_y := y + r ;
68847: LD_ADDR_VAR 0 10
68851: PUSH
68852: LD_VAR 0 2
68856: PUSH
68857: LD_VAR 0 3
68861: PLUS
68862: ST_TO_ADDR
// for _x = min_x to max_x do
68863: LD_ADDR_VAR 0 5
68867: PUSH
68868: DOUBLE
68869: LD_VAR 0 8
68873: DEC
68874: ST_TO_ADDR
68875: LD_VAR 0 9
68879: PUSH
68880: FOR_TO
68881: IFFALSE 68982
// for _y = min_y to max_y do
68883: LD_ADDR_VAR 0 6
68887: PUSH
68888: DOUBLE
68889: LD_VAR 0 7
68893: DEC
68894: ST_TO_ADDR
68895: LD_VAR 0 10
68899: PUSH
68900: FOR_TO
68901: IFFALSE 68978
// begin if not ValidHex ( _x , _y ) then
68903: LD_VAR 0 5
68907: PPUSH
68908: LD_VAR 0 6
68912: PPUSH
68913: CALL_OW 488
68917: NOT
68918: IFFALSE 68922
// continue ;
68920: GO 68900
// if GetResourceTypeXY ( _x , _y ) then
68922: LD_VAR 0 5
68926: PPUSH
68927: LD_VAR 0 6
68931: PPUSH
68932: CALL_OW 283
68936: IFFALSE 68976
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68938: LD_ADDR_VAR 0 4
68942: PUSH
68943: LD_VAR 0 4
68947: PPUSH
68948: LD_VAR 0 4
68952: PUSH
68953: LD_INT 1
68955: PLUS
68956: PPUSH
68957: LD_VAR 0 5
68961: PUSH
68962: LD_VAR 0 6
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PPUSH
68971: CALL_OW 1
68975: ST_TO_ADDR
// end ;
68976: GO 68900
68978: POP
68979: POP
68980: GO 68880
68982: POP
68983: POP
// end ;
68984: LD_VAR 0 4
68988: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68989: LD_INT 0
68991: PPUSH
68992: PPUSH
68993: PPUSH
68994: PPUSH
68995: PPUSH
68996: PPUSH
68997: PPUSH
68998: PPUSH
// if not units then
68999: LD_VAR 0 1
69003: NOT
69004: IFFALSE 69008
// exit ;
69006: GO 69536
// result := UnitFilter ( units , [ f_ok ] ) ;
69008: LD_ADDR_VAR 0 3
69012: PUSH
69013: LD_VAR 0 1
69017: PPUSH
69018: LD_INT 50
69020: PUSH
69021: EMPTY
69022: LIST
69023: PPUSH
69024: CALL_OW 72
69028: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69029: LD_ADDR_VAR 0 8
69033: PUSH
69034: LD_VAR 0 1
69038: PUSH
69039: LD_INT 1
69041: ARRAY
69042: PPUSH
69043: CALL_OW 255
69047: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69048: LD_ADDR_VAR 0 10
69052: PUSH
69053: LD_INT 29
69055: PUSH
69056: LD_INT 91
69058: PUSH
69059: LD_INT 49
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: LIST
69066: ST_TO_ADDR
// if not result then
69067: LD_VAR 0 3
69071: NOT
69072: IFFALSE 69076
// exit ;
69074: GO 69536
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69076: LD_ADDR_VAR 0 5
69080: PUSH
69081: LD_INT 81
69083: PUSH
69084: LD_VAR 0 8
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PPUSH
69093: CALL_OW 69
69097: ST_TO_ADDR
// for i in result do
69098: LD_ADDR_VAR 0 4
69102: PUSH
69103: LD_VAR 0 3
69107: PUSH
69108: FOR_IN
69109: IFFALSE 69534
// begin tag := GetTag ( i ) + 1 ;
69111: LD_ADDR_VAR 0 9
69115: PUSH
69116: LD_VAR 0 4
69120: PPUSH
69121: CALL_OW 110
69125: PUSH
69126: LD_INT 1
69128: PLUS
69129: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
69130: LD_ADDR_VAR 0 7
69134: PUSH
69135: LD_VAR 0 4
69139: PPUSH
69140: CALL_OW 250
69144: PPUSH
69145: LD_VAR 0 4
69149: PPUSH
69150: CALL_OW 251
69154: PPUSH
69155: LD_INT 4
69157: PPUSH
69158: CALL 68731 0 3
69162: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
69163: LD_VAR 0 4
69167: PPUSH
69168: CALL_OW 247
69172: PUSH
69173: LD_INT 2
69175: EQUAL
69176: PUSH
69177: LD_VAR 0 7
69181: PUSH
69182: LD_INT 2
69184: GREATER
69185: AND
69186: PUSH
69187: LD_VAR 0 4
69191: PPUSH
69192: CALL_OW 264
69196: PUSH
69197: LD_VAR 0 10
69201: IN
69202: NOT
69203: AND
69204: IFFALSE 69243
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69206: LD_VAR 0 4
69210: PPUSH
69211: LD_VAR 0 7
69215: PUSH
69216: LD_INT 1
69218: ARRAY
69219: PUSH
69220: LD_INT 1
69222: ARRAY
69223: PPUSH
69224: LD_VAR 0 7
69228: PUSH
69229: LD_INT 1
69231: ARRAY
69232: PUSH
69233: LD_INT 2
69235: ARRAY
69236: PPUSH
69237: CALL_OW 116
69241: GO 69532
// if path > tag then
69243: LD_VAR 0 2
69247: PUSH
69248: LD_VAR 0 9
69252: GREATER
69253: IFFALSE 69461
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69255: LD_ADDR_VAR 0 6
69259: PUSH
69260: LD_VAR 0 5
69264: PPUSH
69265: LD_INT 91
69267: PUSH
69268: LD_VAR 0 4
69272: PUSH
69273: LD_INT 8
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: LIST
69280: PPUSH
69281: CALL_OW 72
69285: ST_TO_ADDR
// if nearEnemy then
69286: LD_VAR 0 6
69290: IFFALSE 69359
// begin if GetWeapon ( i ) = ru_time_lapser then
69292: LD_VAR 0 4
69296: PPUSH
69297: CALL_OW 264
69301: PUSH
69302: LD_INT 49
69304: EQUAL
69305: IFFALSE 69333
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69307: LD_VAR 0 4
69311: PPUSH
69312: LD_VAR 0 6
69316: PPUSH
69317: LD_VAR 0 4
69321: PPUSH
69322: CALL_OW 74
69326: PPUSH
69327: CALL_OW 112
69331: GO 69357
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69333: LD_VAR 0 4
69337: PPUSH
69338: LD_VAR 0 6
69342: PPUSH
69343: LD_VAR 0 4
69347: PPUSH
69348: CALL_OW 74
69352: PPUSH
69353: CALL 70607 0 2
// end else
69357: GO 69459
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69359: LD_VAR 0 4
69363: PPUSH
69364: LD_VAR 0 2
69368: PUSH
69369: LD_VAR 0 9
69373: ARRAY
69374: PUSH
69375: LD_INT 1
69377: ARRAY
69378: PPUSH
69379: LD_VAR 0 2
69383: PUSH
69384: LD_VAR 0 9
69388: ARRAY
69389: PUSH
69390: LD_INT 2
69392: ARRAY
69393: PPUSH
69394: CALL_OW 297
69398: PUSH
69399: LD_INT 6
69401: GREATER
69402: IFFALSE 69445
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69404: LD_VAR 0 4
69408: PPUSH
69409: LD_VAR 0 2
69413: PUSH
69414: LD_VAR 0 9
69418: ARRAY
69419: PUSH
69420: LD_INT 1
69422: ARRAY
69423: PPUSH
69424: LD_VAR 0 2
69428: PUSH
69429: LD_VAR 0 9
69433: ARRAY
69434: PUSH
69435: LD_INT 2
69437: ARRAY
69438: PPUSH
69439: CALL_OW 114
69443: GO 69459
// SetTag ( i , tag ) ;
69445: LD_VAR 0 4
69449: PPUSH
69450: LD_VAR 0 9
69454: PPUSH
69455: CALL_OW 109
// end else
69459: GO 69532
// if enemy then
69461: LD_VAR 0 5
69465: IFFALSE 69532
// begin if GetWeapon ( i ) = ru_time_lapser then
69467: LD_VAR 0 4
69471: PPUSH
69472: CALL_OW 264
69476: PUSH
69477: LD_INT 49
69479: EQUAL
69480: IFFALSE 69508
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69482: LD_VAR 0 4
69486: PPUSH
69487: LD_VAR 0 5
69491: PPUSH
69492: LD_VAR 0 4
69496: PPUSH
69497: CALL_OW 74
69501: PPUSH
69502: CALL_OW 112
69506: GO 69532
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69508: LD_VAR 0 4
69512: PPUSH
69513: LD_VAR 0 5
69517: PPUSH
69518: LD_VAR 0 4
69522: PPUSH
69523: CALL_OW 74
69527: PPUSH
69528: CALL 70607 0 2
// end ; end ;
69532: GO 69108
69534: POP
69535: POP
// end ;
69536: LD_VAR 0 3
69540: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69541: LD_INT 0
69543: PPUSH
69544: PPUSH
69545: PPUSH
// if not unit or IsInUnit ( unit ) then
69546: LD_VAR 0 1
69550: NOT
69551: PUSH
69552: LD_VAR 0 1
69556: PPUSH
69557: CALL_OW 310
69561: OR
69562: IFFALSE 69566
// exit ;
69564: GO 69657
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69566: LD_ADDR_VAR 0 4
69570: PUSH
69571: LD_VAR 0 1
69575: PPUSH
69576: CALL_OW 250
69580: PPUSH
69581: LD_VAR 0 2
69585: PPUSH
69586: LD_INT 1
69588: PPUSH
69589: CALL_OW 272
69593: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69594: LD_ADDR_VAR 0 5
69598: PUSH
69599: LD_VAR 0 1
69603: PPUSH
69604: CALL_OW 251
69608: PPUSH
69609: LD_VAR 0 2
69613: PPUSH
69614: LD_INT 1
69616: PPUSH
69617: CALL_OW 273
69621: ST_TO_ADDR
// if ValidHex ( x , y ) then
69622: LD_VAR 0 4
69626: PPUSH
69627: LD_VAR 0 5
69631: PPUSH
69632: CALL_OW 488
69636: IFFALSE 69657
// ComTurnXY ( unit , x , y ) ;
69638: LD_VAR 0 1
69642: PPUSH
69643: LD_VAR 0 4
69647: PPUSH
69648: LD_VAR 0 5
69652: PPUSH
69653: CALL_OW 118
// end ;
69657: LD_VAR 0 3
69661: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69662: LD_INT 0
69664: PPUSH
69665: PPUSH
// result := false ;
69666: LD_ADDR_VAR 0 3
69670: PUSH
69671: LD_INT 0
69673: ST_TO_ADDR
// if not units then
69674: LD_VAR 0 2
69678: NOT
69679: IFFALSE 69683
// exit ;
69681: GO 69728
// for i in units do
69683: LD_ADDR_VAR 0 4
69687: PUSH
69688: LD_VAR 0 2
69692: PUSH
69693: FOR_IN
69694: IFFALSE 69726
// if See ( side , i ) then
69696: LD_VAR 0 1
69700: PPUSH
69701: LD_VAR 0 4
69705: PPUSH
69706: CALL_OW 292
69710: IFFALSE 69724
// begin result := true ;
69712: LD_ADDR_VAR 0 3
69716: PUSH
69717: LD_INT 1
69719: ST_TO_ADDR
// exit ;
69720: POP
69721: POP
69722: GO 69728
// end ;
69724: GO 69693
69726: POP
69727: POP
// end ;
69728: LD_VAR 0 3
69732: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69733: LD_INT 0
69735: PPUSH
69736: PPUSH
69737: PPUSH
69738: PPUSH
// if not unit or not points then
69739: LD_VAR 0 1
69743: NOT
69744: PUSH
69745: LD_VAR 0 2
69749: NOT
69750: OR
69751: IFFALSE 69755
// exit ;
69753: GO 69845
// dist := 99999 ;
69755: LD_ADDR_VAR 0 5
69759: PUSH
69760: LD_INT 99999
69762: ST_TO_ADDR
// for i in points do
69763: LD_ADDR_VAR 0 4
69767: PUSH
69768: LD_VAR 0 2
69772: PUSH
69773: FOR_IN
69774: IFFALSE 69843
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69776: LD_ADDR_VAR 0 6
69780: PUSH
69781: LD_VAR 0 1
69785: PPUSH
69786: LD_VAR 0 4
69790: PUSH
69791: LD_INT 1
69793: ARRAY
69794: PPUSH
69795: LD_VAR 0 4
69799: PUSH
69800: LD_INT 2
69802: ARRAY
69803: PPUSH
69804: CALL_OW 297
69808: ST_TO_ADDR
// if tmpDist < dist then
69809: LD_VAR 0 6
69813: PUSH
69814: LD_VAR 0 5
69818: LESS
69819: IFFALSE 69841
// begin result := i ;
69821: LD_ADDR_VAR 0 3
69825: PUSH
69826: LD_VAR 0 4
69830: ST_TO_ADDR
// dist := tmpDist ;
69831: LD_ADDR_VAR 0 5
69835: PUSH
69836: LD_VAR 0 6
69840: ST_TO_ADDR
// end ; end ;
69841: GO 69773
69843: POP
69844: POP
// end ;
69845: LD_VAR 0 3
69849: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69850: LD_INT 0
69852: PPUSH
// uc_side := side ;
69853: LD_ADDR_OWVAR 20
69857: PUSH
69858: LD_VAR 0 1
69862: ST_TO_ADDR
// uc_nation := 3 ;
69863: LD_ADDR_OWVAR 21
69867: PUSH
69868: LD_INT 3
69870: ST_TO_ADDR
// vc_chassis := 25 ;
69871: LD_ADDR_OWVAR 37
69875: PUSH
69876: LD_INT 25
69878: ST_TO_ADDR
// vc_engine := engine_siberite ;
69879: LD_ADDR_OWVAR 39
69883: PUSH
69884: LD_INT 3
69886: ST_TO_ADDR
// vc_control := control_computer ;
69887: LD_ADDR_OWVAR 38
69891: PUSH
69892: LD_INT 3
69894: ST_TO_ADDR
// vc_weapon := 59 ;
69895: LD_ADDR_OWVAR 40
69899: PUSH
69900: LD_INT 59
69902: ST_TO_ADDR
// result := CreateVehicle ;
69903: LD_ADDR_VAR 0 5
69907: PUSH
69908: CALL_OW 45
69912: ST_TO_ADDR
// SetDir ( result , d ) ;
69913: LD_VAR 0 5
69917: PPUSH
69918: LD_VAR 0 4
69922: PPUSH
69923: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69927: LD_VAR 0 5
69931: PPUSH
69932: LD_VAR 0 2
69936: PPUSH
69937: LD_VAR 0 3
69941: PPUSH
69942: LD_INT 0
69944: PPUSH
69945: CALL_OW 48
// end ;
69949: LD_VAR 0 5
69953: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69954: LD_INT 0
69956: PPUSH
69957: PPUSH
69958: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69959: LD_ADDR_VAR 0 2
69963: PUSH
69964: LD_INT 0
69966: PUSH
69967: LD_INT 0
69969: PUSH
69970: LD_INT 0
69972: PUSH
69973: LD_INT 0
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69982: LD_VAR 0 1
69986: NOT
69987: PUSH
69988: LD_VAR 0 1
69992: PPUSH
69993: CALL_OW 264
69997: PUSH
69998: LD_INT 12
70000: PUSH
70001: LD_INT 51
70003: PUSH
70004: LD_INT 32
70006: PUSH
70007: LD_INT 89
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: IN
70016: NOT
70017: OR
70018: IFFALSE 70022
// exit ;
70020: GO 70120
// for i := 1 to 3 do
70022: LD_ADDR_VAR 0 3
70026: PUSH
70027: DOUBLE
70028: LD_INT 1
70030: DEC
70031: ST_TO_ADDR
70032: LD_INT 3
70034: PUSH
70035: FOR_TO
70036: IFFALSE 70118
// begin tmp := GetCargo ( cargo , i ) ;
70038: LD_ADDR_VAR 0 4
70042: PUSH
70043: LD_VAR 0 1
70047: PPUSH
70048: LD_VAR 0 3
70052: PPUSH
70053: CALL_OW 289
70057: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70058: LD_ADDR_VAR 0 2
70062: PUSH
70063: LD_VAR 0 2
70067: PPUSH
70068: LD_VAR 0 3
70072: PPUSH
70073: LD_VAR 0 4
70077: PPUSH
70078: CALL_OW 1
70082: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70083: LD_ADDR_VAR 0 2
70087: PUSH
70088: LD_VAR 0 2
70092: PPUSH
70093: LD_INT 4
70095: PPUSH
70096: LD_VAR 0 2
70100: PUSH
70101: LD_INT 4
70103: ARRAY
70104: PUSH
70105: LD_VAR 0 4
70109: PLUS
70110: PPUSH
70111: CALL_OW 1
70115: ST_TO_ADDR
// end ;
70116: GO 70035
70118: POP
70119: POP
// end ;
70120: LD_VAR 0 2
70124: RET
// export function Length ( array ) ; begin
70125: LD_INT 0
70127: PPUSH
// result := array + 0 ;
70128: LD_ADDR_VAR 0 2
70132: PUSH
70133: LD_VAR 0 1
70137: PUSH
70138: LD_INT 0
70140: PLUS
70141: ST_TO_ADDR
// end ;
70142: LD_VAR 0 2
70146: RET
// export function PrepareArray ( array ) ; begin
70147: LD_INT 0
70149: PPUSH
// result := array diff 0 ;
70150: LD_ADDR_VAR 0 2
70154: PUSH
70155: LD_VAR 0 1
70159: PUSH
70160: LD_INT 0
70162: DIFF
70163: ST_TO_ADDR
// if not result [ 1 ] then
70164: LD_VAR 0 2
70168: PUSH
70169: LD_INT 1
70171: ARRAY
70172: NOT
70173: IFFALSE 70193
// result := Delete ( result , 1 ) ;
70175: LD_ADDR_VAR 0 2
70179: PUSH
70180: LD_VAR 0 2
70184: PPUSH
70185: LD_INT 1
70187: PPUSH
70188: CALL_OW 3
70192: ST_TO_ADDR
// end ;
70193: LD_VAR 0 2
70197: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70198: LD_INT 0
70200: PPUSH
70201: PPUSH
70202: PPUSH
70203: PPUSH
// sibRocketRange := 25 ;
70204: LD_ADDR_VAR 0 6
70208: PUSH
70209: LD_INT 25
70211: ST_TO_ADDR
// result := false ;
70212: LD_ADDR_VAR 0 4
70216: PUSH
70217: LD_INT 0
70219: ST_TO_ADDR
// for i := 0 to 5 do
70220: LD_ADDR_VAR 0 5
70224: PUSH
70225: DOUBLE
70226: LD_INT 0
70228: DEC
70229: ST_TO_ADDR
70230: LD_INT 5
70232: PUSH
70233: FOR_TO
70234: IFFALSE 70301
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70236: LD_VAR 0 1
70240: PPUSH
70241: LD_VAR 0 5
70245: PPUSH
70246: LD_VAR 0 6
70250: PPUSH
70251: CALL_OW 272
70255: PPUSH
70256: LD_VAR 0 2
70260: PPUSH
70261: LD_VAR 0 5
70265: PPUSH
70266: LD_VAR 0 6
70270: PPUSH
70271: CALL_OW 273
70275: PPUSH
70276: LD_VAR 0 3
70280: PPUSH
70281: CALL_OW 309
70285: IFFALSE 70299
// begin result := true ;
70287: LD_ADDR_VAR 0 4
70291: PUSH
70292: LD_INT 1
70294: ST_TO_ADDR
// exit ;
70295: POP
70296: POP
70297: GO 70303
// end ;
70299: GO 70233
70301: POP
70302: POP
// end ;
70303: LD_VAR 0 4
70307: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
70308: LD_INT 0
70310: PPUSH
70311: PPUSH
70312: PPUSH
// if btype = b_depot then
70313: LD_VAR 0 2
70317: PUSH
70318: LD_INT 0
70320: EQUAL
70321: IFFALSE 70333
// begin result := true ;
70323: LD_ADDR_VAR 0 3
70327: PUSH
70328: LD_INT 1
70330: ST_TO_ADDR
// exit ;
70331: GO 70449
// end ; pom := GetBase ( depot ) ;
70333: LD_ADDR_VAR 0 4
70337: PUSH
70338: LD_VAR 0 1
70342: PPUSH
70343: CALL_OW 274
70347: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
70348: LD_ADDR_VAR 0 5
70352: PUSH
70353: LD_VAR 0 2
70357: PPUSH
70358: LD_VAR 0 1
70362: PPUSH
70363: CALL_OW 248
70367: PPUSH
70368: CALL_OW 450
70372: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
70373: LD_ADDR_VAR 0 3
70377: PUSH
70378: LD_VAR 0 4
70382: PPUSH
70383: LD_INT 1
70385: PPUSH
70386: CALL_OW 275
70390: PUSH
70391: LD_VAR 0 5
70395: PUSH
70396: LD_INT 1
70398: ARRAY
70399: GREATEREQUAL
70400: PUSH
70401: LD_VAR 0 4
70405: PPUSH
70406: LD_INT 2
70408: PPUSH
70409: CALL_OW 275
70413: PUSH
70414: LD_VAR 0 5
70418: PUSH
70419: LD_INT 2
70421: ARRAY
70422: GREATEREQUAL
70423: AND
70424: PUSH
70425: LD_VAR 0 4
70429: PPUSH
70430: LD_INT 3
70432: PPUSH
70433: CALL_OW 275
70437: PUSH
70438: LD_VAR 0 5
70442: PUSH
70443: LD_INT 3
70445: ARRAY
70446: GREATEREQUAL
70447: AND
70448: ST_TO_ADDR
// end ;
70449: LD_VAR 0 3
70453: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70454: LD_INT 0
70456: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70457: LD_VAR 0 1
70461: PPUSH
70462: LD_VAR 0 2
70466: PPUSH
70467: LD_INT 0
70469: PPUSH
70470: LD_INT 0
70472: PPUSH
70473: LD_INT 1
70475: PPUSH
70476: LD_INT 0
70478: PPUSH
70479: CALL_OW 587
// end ;
70483: LD_VAR 0 3
70487: RET
// export function CenterOnNow ( unit ) ; begin
70488: LD_INT 0
70490: PPUSH
// result := IsInUnit ( unit ) ;
70491: LD_ADDR_VAR 0 2
70495: PUSH
70496: LD_VAR 0 1
70500: PPUSH
70501: CALL_OW 310
70505: ST_TO_ADDR
// if not result then
70506: LD_VAR 0 2
70510: NOT
70511: IFFALSE 70523
// result := unit ;
70513: LD_ADDR_VAR 0 2
70517: PUSH
70518: LD_VAR 0 1
70522: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70523: LD_VAR 0 1
70527: PPUSH
70528: CALL_OW 87
// end ;
70532: LD_VAR 0 2
70536: RET
// export function ComMoveHex ( unit , hex ) ; begin
70537: LD_INT 0
70539: PPUSH
// if not hex then
70540: LD_VAR 0 2
70544: NOT
70545: IFFALSE 70549
// exit ;
70547: GO 70602
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70549: LD_VAR 0 2
70553: PUSH
70554: LD_INT 1
70556: ARRAY
70557: PPUSH
70558: LD_VAR 0 2
70562: PUSH
70563: LD_INT 2
70565: ARRAY
70566: PPUSH
70567: CALL_OW 428
70571: IFFALSE 70575
// exit ;
70573: GO 70602
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70575: LD_VAR 0 1
70579: PPUSH
70580: LD_VAR 0 2
70584: PUSH
70585: LD_INT 1
70587: ARRAY
70588: PPUSH
70589: LD_VAR 0 2
70593: PUSH
70594: LD_INT 2
70596: ARRAY
70597: PPUSH
70598: CALL_OW 111
// end ;
70602: LD_VAR 0 3
70606: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70607: LD_INT 0
70609: PPUSH
70610: PPUSH
70611: PPUSH
// if not unit or not enemy then
70612: LD_VAR 0 1
70616: NOT
70617: PUSH
70618: LD_VAR 0 2
70622: NOT
70623: OR
70624: IFFALSE 70628
// exit ;
70626: GO 70752
// x := GetX ( enemy ) ;
70628: LD_ADDR_VAR 0 4
70632: PUSH
70633: LD_VAR 0 2
70637: PPUSH
70638: CALL_OW 250
70642: ST_TO_ADDR
// y := GetY ( enemy ) ;
70643: LD_ADDR_VAR 0 5
70647: PUSH
70648: LD_VAR 0 2
70652: PPUSH
70653: CALL_OW 251
70657: ST_TO_ADDR
// if ValidHex ( x , y ) then
70658: LD_VAR 0 4
70662: PPUSH
70663: LD_VAR 0 5
70667: PPUSH
70668: CALL_OW 488
70672: IFFALSE 70752
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
70674: LD_VAR 0 2
70678: PPUSH
70679: CALL_OW 247
70683: PUSH
70684: LD_INT 3
70686: PUSH
70687: LD_INT 2
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: IN
70694: PUSH
70695: LD_VAR 0 1
70699: PPUSH
70700: CALL_OW 255
70704: PPUSH
70705: LD_VAR 0 2
70709: PPUSH
70710: CALL_OW 292
70714: OR
70715: IFFALSE 70733
// ComAttackUnit ( unit , enemy ) else
70717: LD_VAR 0 1
70721: PPUSH
70722: LD_VAR 0 2
70726: PPUSH
70727: CALL_OW 115
70731: GO 70752
// ComAgressiveMove ( unit , x , y ) ;
70733: LD_VAR 0 1
70737: PPUSH
70738: LD_VAR 0 4
70742: PPUSH
70743: LD_VAR 0 5
70747: PPUSH
70748: CALL_OW 114
// end ;
70752: LD_VAR 0 3
70756: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
70757: LD_INT 0
70759: PPUSH
70760: PPUSH
70761: PPUSH
// list := AreaToList ( area , 0 ) ;
70762: LD_ADDR_VAR 0 5
70766: PUSH
70767: LD_VAR 0 1
70771: PPUSH
70772: LD_INT 0
70774: PPUSH
70775: CALL_OW 517
70779: ST_TO_ADDR
// if not list then
70780: LD_VAR 0 5
70784: NOT
70785: IFFALSE 70789
// exit ;
70787: GO 70919
// if all then
70789: LD_VAR 0 2
70793: IFFALSE 70881
// begin for i := 1 to list [ 1 ] do
70795: LD_ADDR_VAR 0 4
70799: PUSH
70800: DOUBLE
70801: LD_INT 1
70803: DEC
70804: ST_TO_ADDR
70805: LD_VAR 0 5
70809: PUSH
70810: LD_INT 1
70812: ARRAY
70813: PUSH
70814: FOR_TO
70815: IFFALSE 70877
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
70817: LD_ADDR_VAR 0 3
70821: PUSH
70822: LD_VAR 0 3
70826: PPUSH
70827: LD_VAR 0 3
70831: PUSH
70832: LD_INT 1
70834: PLUS
70835: PPUSH
70836: LD_VAR 0 5
70840: PUSH
70841: LD_INT 1
70843: ARRAY
70844: PUSH
70845: LD_VAR 0 4
70849: ARRAY
70850: PUSH
70851: LD_VAR 0 5
70855: PUSH
70856: LD_INT 2
70858: ARRAY
70859: PUSH
70860: LD_VAR 0 4
70864: ARRAY
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PPUSH
70870: CALL_OW 1
70874: ST_TO_ADDR
70875: GO 70814
70877: POP
70878: POP
// exit ;
70879: GO 70919
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
70881: LD_ADDR_VAR 0 3
70885: PUSH
70886: LD_VAR 0 5
70890: PUSH
70891: LD_INT 1
70893: ARRAY
70894: PUSH
70895: LD_INT 1
70897: ARRAY
70898: PUSH
70899: LD_VAR 0 5
70903: PUSH
70904: LD_INT 2
70906: ARRAY
70907: PUSH
70908: LD_INT 1
70910: ARRAY
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: EMPTY
70917: LIST
70918: ST_TO_ADDR
// end ;
70919: LD_VAR 0 3
70923: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
70924: LD_INT 0
70926: PPUSH
70927: PPUSH
// list := AreaToList ( area , 0 ) ;
70928: LD_ADDR_VAR 0 4
70932: PUSH
70933: LD_VAR 0 1
70937: PPUSH
70938: LD_INT 0
70940: PPUSH
70941: CALL_OW 517
70945: ST_TO_ADDR
// if not list then
70946: LD_VAR 0 4
70950: NOT
70951: IFFALSE 70955
// exit ;
70953: GO 70996
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
70955: LD_ADDR_VAR 0 3
70959: PUSH
70960: LD_VAR 0 4
70964: PUSH
70965: LD_INT 1
70967: ARRAY
70968: PUSH
70969: LD_INT 1
70971: ARRAY
70972: PUSH
70973: LD_VAR 0 4
70977: PUSH
70978: LD_INT 2
70980: ARRAY
70981: PUSH
70982: LD_INT 1
70984: ARRAY
70985: PUSH
70986: LD_VAR 0 2
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: LIST
70995: ST_TO_ADDR
// end ;
70996: LD_VAR 0 3
71000: RET
// export function First ( array ) ; begin
71001: LD_INT 0
71003: PPUSH
// if not array then
71004: LD_VAR 0 1
71008: NOT
71009: IFFALSE 71013
// exit ;
71011: GO 71027
// result := array [ 1 ] ;
71013: LD_ADDR_VAR 0 2
71017: PUSH
71018: LD_VAR 0 1
71022: PUSH
71023: LD_INT 1
71025: ARRAY
71026: ST_TO_ADDR
// end ;
71027: LD_VAR 0 2
71031: RET
// export function Last ( array ) ; begin
71032: LD_INT 0
71034: PPUSH
// if not array then
71035: LD_VAR 0 1
71039: NOT
71040: IFFALSE 71044
// exit ;
71042: GO 71060
// result := array [ array ] ;
71044: LD_ADDR_VAR 0 2
71048: PUSH
71049: LD_VAR 0 1
71053: PUSH
71054: LD_VAR 0 1
71058: ARRAY
71059: ST_TO_ADDR
// end ;
71060: LD_VAR 0 2
71064: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
71065: LD_INT 0
71067: PPUSH
71068: PPUSH
// result := [ ] ;
71069: LD_ADDR_VAR 0 5
71073: PUSH
71074: EMPTY
71075: ST_TO_ADDR
// if not array then
71076: LD_VAR 0 1
71080: NOT
71081: IFFALSE 71085
// exit ;
71083: GO 71197
// for i := 1 to array do
71085: LD_ADDR_VAR 0 6
71089: PUSH
71090: DOUBLE
71091: LD_INT 1
71093: DEC
71094: ST_TO_ADDR
71095: LD_VAR 0 1
71099: PUSH
71100: FOR_TO
71101: IFFALSE 71195
// if array [ i ] [ index ] = value then
71103: LD_VAR 0 1
71107: PUSH
71108: LD_VAR 0 6
71112: ARRAY
71113: PUSH
71114: LD_VAR 0 2
71118: ARRAY
71119: PUSH
71120: LD_VAR 0 3
71124: EQUAL
71125: IFFALSE 71193
// begin if indexColumn then
71127: LD_VAR 0 4
71131: IFFALSE 71167
// result := Join ( result , array [ i ] [ indexColumn ] ) else
71133: LD_ADDR_VAR 0 5
71137: PUSH
71138: LD_VAR 0 5
71142: PPUSH
71143: LD_VAR 0 1
71147: PUSH
71148: LD_VAR 0 6
71152: ARRAY
71153: PUSH
71154: LD_VAR 0 4
71158: ARRAY
71159: PPUSH
71160: CALL 66385 0 2
71164: ST_TO_ADDR
71165: GO 71193
// result := Join ( result , array [ i ] ) ;
71167: LD_ADDR_VAR 0 5
71171: PUSH
71172: LD_VAR 0 5
71176: PPUSH
71177: LD_VAR 0 1
71181: PUSH
71182: LD_VAR 0 6
71186: ARRAY
71187: PPUSH
71188: CALL 66385 0 2
71192: ST_TO_ADDR
// end ;
71193: GO 71100
71195: POP
71196: POP
// end ;
71197: LD_VAR 0 5
71201: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
71202: LD_INT 0
71204: PPUSH
// if not vehicles or not parkingPoint then
71205: LD_VAR 0 1
71209: NOT
71210: PUSH
71211: LD_VAR 0 2
71215: NOT
71216: OR
71217: IFFALSE 71221
// exit ;
71219: GO 71319
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
71221: LD_ADDR_VAR 0 1
71225: PUSH
71226: LD_VAR 0 1
71230: PPUSH
71231: LD_INT 50
71233: PUSH
71234: EMPTY
71235: LIST
71236: PUSH
71237: LD_INT 3
71239: PUSH
71240: LD_INT 92
71242: PUSH
71243: LD_VAR 0 2
71247: PUSH
71248: LD_INT 1
71250: ARRAY
71251: PUSH
71252: LD_VAR 0 2
71256: PUSH
71257: LD_INT 2
71259: ARRAY
71260: PUSH
71261: LD_INT 8
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: LIST
71268: LIST
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PPUSH
71278: CALL_OW 72
71282: ST_TO_ADDR
// if not vehicles then
71283: LD_VAR 0 1
71287: NOT
71288: IFFALSE 71292
// exit ;
71290: GO 71319
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
71292: LD_VAR 0 1
71296: PPUSH
71297: LD_VAR 0 2
71301: PUSH
71302: LD_INT 1
71304: ARRAY
71305: PPUSH
71306: LD_VAR 0 2
71310: PUSH
71311: LD_INT 2
71313: ARRAY
71314: PPUSH
71315: CALL_OW 111
// end ;
71319: LD_VAR 0 3
71323: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
71324: LD_INT 0
71326: PPUSH
71327: PPUSH
71328: PPUSH
// if not side or not area then
71329: LD_VAR 0 1
71333: NOT
71334: PUSH
71335: LD_VAR 0 2
71339: NOT
71340: OR
71341: IFFALSE 71345
// exit ;
71343: GO 71464
// tmp := AreaToList ( area , 0 ) ;
71345: LD_ADDR_VAR 0 5
71349: PUSH
71350: LD_VAR 0 2
71354: PPUSH
71355: LD_INT 0
71357: PPUSH
71358: CALL_OW 517
71362: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
71363: LD_ADDR_VAR 0 4
71367: PUSH
71368: DOUBLE
71369: LD_INT 1
71371: DEC
71372: ST_TO_ADDR
71373: LD_VAR 0 5
71377: PUSH
71378: LD_INT 1
71380: ARRAY
71381: PUSH
71382: FOR_TO
71383: IFFALSE 71462
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
71385: LD_VAR 0 5
71389: PUSH
71390: LD_INT 1
71392: ARRAY
71393: PUSH
71394: LD_VAR 0 4
71398: ARRAY
71399: PPUSH
71400: LD_VAR 0 5
71404: PUSH
71405: LD_INT 2
71407: ARRAY
71408: PUSH
71409: LD_VAR 0 4
71413: ARRAY
71414: PPUSH
71415: CALL_OW 351
71419: IFFALSE 71460
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
71421: LD_VAR 0 5
71425: PUSH
71426: LD_INT 1
71428: ARRAY
71429: PUSH
71430: LD_VAR 0 4
71434: ARRAY
71435: PPUSH
71436: LD_VAR 0 5
71440: PUSH
71441: LD_INT 2
71443: ARRAY
71444: PUSH
71445: LD_VAR 0 4
71449: ARRAY
71450: PPUSH
71451: LD_VAR 0 1
71455: PPUSH
71456: CALL_OW 244
// end ;
71460: GO 71382
71462: POP
71463: POP
// end ; end_of_file
71464: LD_VAR 0 3
71468: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71469: LD_VAR 0 1
71473: PUSH
71474: LD_INT 200
71476: DOUBLE
71477: GREATEREQUAL
71478: IFFALSE 71486
71480: LD_INT 299
71482: DOUBLE
71483: LESSEQUAL
71484: IFTRUE 71488
71486: GO 71520
71488: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71489: LD_VAR 0 1
71493: PPUSH
71494: LD_VAR 0 2
71498: PPUSH
71499: LD_VAR 0 3
71503: PPUSH
71504: LD_VAR 0 4
71508: PPUSH
71509: LD_VAR 0 5
71513: PPUSH
71514: CALL 23954 0 5
71518: GO 71597
71520: LD_INT 300
71522: DOUBLE
71523: GREATEREQUAL
71524: IFFALSE 71532
71526: LD_INT 399
71528: DOUBLE
71529: LESSEQUAL
71530: IFTRUE 71534
71532: GO 71596
71534: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71535: LD_VAR 0 1
71539: PPUSH
71540: LD_VAR 0 2
71544: PPUSH
71545: LD_VAR 0 3
71549: PPUSH
71550: LD_VAR 0 4
71554: PPUSH
71555: LD_VAR 0 5
71559: PPUSH
71560: LD_VAR 0 6
71564: PPUSH
71565: LD_VAR 0 7
71569: PPUSH
71570: LD_VAR 0 8
71574: PPUSH
71575: LD_VAR 0 9
71579: PPUSH
71580: LD_VAR 0 10
71584: PPUSH
71585: LD_VAR 0 11
71589: PPUSH
71590: CALL 19942 0 11
71594: GO 71597
71596: POP
// end ;
71597: PPOPN 11
71599: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71600: LD_VAR 0 1
71604: PPUSH
71605: LD_VAR 0 2
71609: PPUSH
71610: LD_VAR 0 3
71614: PPUSH
71615: LD_VAR 0 4
71619: PPUSH
71620: LD_VAR 0 5
71624: PPUSH
71625: CALL 23419 0 5
// end ; end_of_file
71629: PPOPN 5
71631: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71632: LD_VAR 0 1
71636: PPUSH
71637: LD_VAR 0 2
71641: PPUSH
71642: LD_VAR 0 3
71646: PPUSH
71647: LD_VAR 0 4
71651: PPUSH
71652: LD_VAR 0 5
71656: PPUSH
71657: LD_VAR 0 6
71661: PPUSH
71662: CALL 7594 0 6
// end ;
71666: PPOPN 6
71668: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71669: LD_INT 0
71671: PPUSH
// begin if not units then
71672: LD_VAR 0 1
71676: NOT
71677: IFFALSE 71681
// exit ;
71679: GO 71681
// end ;
71681: PPOPN 7
71683: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71684: CALL 7481 0 0
// end ;
71688: PPOPN 1
71690: END
